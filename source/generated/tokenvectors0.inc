;
;	Automatically generated
;
Group0Vectors:
	.word	Unimplemented    ; $80 [[eol]]
	.word	Unimplemented    ; $81 [[sh1]]
	.word	Unimplemented    ; $82 [[sh2]]
	.word	Unimplemented    ; $83 [[sh3]]
	.word	Unimplemented    ; $84 [[fpc]]
	.word	Unimplemented    ; $85 [[str]]
	.word	Unimplemented    ; $86 and
	.word	Unimplemented    ; $87 or
	.word	Unimplemented    ; $88 xor
	.word	Unimplemented    ; $89 >=
	.word	Unimplemented    ; $8a <=
	.word	Unimplemented    ; $8b >
	.word	Unimplemented    ; $8c <
	.word	Unimplemented    ; $8d =
	.word	Unimplemented    ; $8e <>
	.word	Unimplemented    ; $8f +
	.word	Unimplemented    ; $90 -
	.word	Unimplemented    ; $91 >>
	.word	Unimplemented    ; $92 <<
	.word	Unimplemented    ; $93 *
	.word	Unimplemented    ; $94 /
	.word	Unimplemented    ; $95 mod
	.word	Unimplemented    ; $96 ^
	.word	Unimplemented    ; $97 !
	.word	Unimplemented    ; $98 ?
	.word	Unimplemented    ; $99 repeat
	.word	Unimplemented    ; $9a while
	.word	Unimplemented    ; $9b for
	.word	Unimplemented    ; $9c if
	.word	Unimplemented    ; $9d until
	.word	Unimplemented    ; $9e wend
	.word	Unimplemented    ; $9f next
	.word	Unimplemented    ; $a0 then
	.word	Unimplemented    ; $a1 endif
	.word	Unimplemented    ; $a2 ~
	.word	Unimplemented    ; $a3 (
	.word	Unimplemented    ; $a4 &
	.word	Unimplemented    ; $a5 @
	.word	Unimplemented    ; $a6 len(
	.word	Unimplemented    ; $a7 sgn(
	.word	Unimplemented    ; $a8 abs(
	.word	Unimplemented    ; $a9 random(
	.word	Unimplemented    ; $aa page
	.word	Unimplemented    ; $ab true
	.word	Unimplemented    ; $ac false
	.word	Unimplemented    ; $ad min(
	.word	Unimplemented    ; $ae max(
	.word	Unimplemented    ; $af sys(
	.word	Unimplemented    ; $b0 timer(
	.word	Unimplemented    ; $b1 event(
	.word	Unimplemented    ; $b2 get(
	.word	Unimplemented    ; $b3 inkey(
	.word	Unimplemented    ; $b4 alloc(
	.word	Unimplemented    ; $b5 chr$(
	.word	Unimplemented    ; $b6 left$(
	.word	Unimplemented    ; $b7 mid$(
	.word	Unimplemented    ; $b8 right$(
	.word	Unimplemented    ; $b9 str$(
	.word	Unimplemented    ; $ba val(
	.word	Unimplemented    ; $bb peek(
	.word	Unimplemented    ; $bc deek(
	.word	Unimplemented    ; $bd leek(
	.word	Unimplemented    ; $be )
	.word	Unimplemented    ; $bf :
	.word	Unimplemented    ; $c0 ,
	.word	Unimplemented    ; $c1 ;
	.word	Unimplemented    ; $c2 ]
	.word	Unimplemented    ; $c3 to
	.word	Unimplemented    ; $c4 step
	.word	Unimplemented    ; $c5 proc
	.word	Unimplemented    ; $c6 endproc
	.word	Unimplemented    ; $c7 local
	.word	Unimplemented    ; $c8 rem
	.word	Unimplemented    ; $c9 let
	.word	Unimplemented    ; $ca '
	.word	Unimplemented    ; $cb [
	.word	Unimplemented    ; $cc else
	.word	Unimplemented    ; $cd vdu
	.word	Unimplemented    ; $ce read
	.word	Unimplemented    ; $cf data
	.word	Unimplemented    ; $d0 restore
	.word	Unimplemented    ; $d1 print
	.word	Unimplemented    ; $d2 goto
	.word	Unimplemented    ; $d3 gosub
	.word	Unimplemented    ; $d4 return
	.word	Unimplemented    ; $d5 assert
	.word	Unimplemented    ; $d6 stop
	.word	Unimplemented    ; $d7 end
	.word	Unimplemented    ; $d8 dim
	.word	Unimplemented    ; $d9 poke
	.word	Unimplemented    ; $da doke
	.word	Unimplemented    ; $db loke
