;
;	Automatically generated
;
Group0Vectors:
	.word	AdvanceNextLine          ; $80 [[eol]]
	.word	CommandShift1            ; $81 [[sh1]]
	.word	CommandShift2            ; $82 [[sh2]]
	.word	TKErr09                  ; $83 [[sh3]]
	.word	TKErr10                  ; $84 [[fpc]]
	.word	TKErr08                  ; $85 [[str]]
	.word	AndHandler               ; $86 and
	.word	OrHandler                ; $87 or
	.word	XorHandler               ; $88 xor
	.word	CompareGreaterEq         ; $89 >=
	.word	CompareLessEq            ; $8a <=
	.word	CompareGreater           ; $8b >
	.word	CompareLess              ; $8c <
	.word	CompareEquals            ; $8d =
	.word	CompareNotEquals         ; $8e <>
	.word	AddHandler               ; $8f +
	.word	SubHandler               ; $90 -
	.word	ShrHandler               ; $91 >>
	.word	ShlHandler               ; $92 <<
	.word	MulHandler               ; $93 *
	.word	DivHandler               ; $94 /
	.word	ModHandler               ; $95 mod
	.word	PowerHandler             ; $96 ^
	.word	WordRefHandler           ; $97 !
	.word	ByteRefHandler           ; $98 ?
	.word	Command_Repeat           ; $99 repeat
	.word	Command_While            ; $9a while
	.word	Command_FOR              ; $9b for
	.word	CommandIf                ; $9c if
	.word	TKErr04                  ; $9d defproc
	.word	Command_Until            ; $9e until
	.word	Command_Wend             ; $9f wend
	.word	Command_NEXT             ; $a0 next
	.word	TKErr06                  ; $a1 then
	.word	Command_ENDIF            ; $a2 endif
	.word	ReturnProc               ; $a3 endproc
	.word	UnaryParenthesis         ; $a4 (
	.word	UnaryLen                 ; $a5 len(
	.word	UnarySgn                 ; $a6 sgn(
	.word	UnaryAbs                 ; $a7 abs(
	.word	Unary_Random             ; $a8 random(
	.word	Unary_Page               ; $a9 page
	.word	MInt32True               ; $aa true
	.word	MInt32False              ; $ab false
	.word	Unary_Min                ; $ac min(
	.word	Unary_Max                ; $ad max(
	.word	UnarySys                 ; $ae sys(
	.word	UnaryTimer               ; $af timer(
	.word	EventFunction            ; $b0 event(
	.word	UnaryGet                 ; $b1 get(
	.word	UnaryInkey               ; $b2 inkey(
	.word	UnaryAlloc               ; $b3 alloc(
	.word	ExecChr                  ; $b4 chr$(
	.word	ExecLeft                 ; $b5 left$(
	.word	ExecMid                  ; $b6 mid$(
	.word	ExecRight                ; $b7 right$(
	.word	Event_Str                ; $b8 str$(
	.word	UnaryVal                 ; $b9 val(
	.word	UnaryPeek                ; $ba peek(
	.word	UnaryDeek                ; $bb deek(
	.word	UnaryLeek                ; $bc leek(
	.word	UnaryAsc                 ; $bd asc(
	.word	UnaryIntToFloat          ; $be int(
	.word	UnaryFloatToInt          ; $bf float(
	.word	UnaryIsVal               ; $c0 isval(
	.word	ExecUpper                ; $c1 upper$(
	.word	ExecLower                ; $c2 lower$(
	.word	UnaryReference           ; $c3 @
	.word	UnaryComplement          ; $c4 ~
	.word	UnaryHexMarker           ; $c5 &
	.word	UnaryGetString           ; $c6 get$(
	.word	UnaryInkeyString         ; $c7 inkey$(
	.word	UnaryMem                 ; $c8 mem
	.word	TKErr01                  ; $c9 )
	.word	CommandColon             ; $ca :
	.word	TKErr02                  ; $cb ,
	.word	TKErr03                  ; $cc ;
	.word	Command_Rem2             ; $cd '
	.word	TKErr07                  ; $ce to
	.word	TKErr05                  ; $cf step
	.word	CallProc                 ; $d0 proc
	.word	CommandLocal             ; $d1 local
	.word	Command_Dim              ; $d2 dim
	.word	Command_Rem              ; $d3 rem
	.word	CommandLet               ; $d4 let
	.word	Command_Input            ; $d5 input
	.word	Command_ELSE             ; $d6 else
	.word	Command_VDU              ; $d7 vdu
	.word	Command_Print            ; $d8 print
	.word	CommandGOTO              ; $d9 goto
	.word	CommandGOSUB             ; $da gosub
	.word	CommandRETURN            ; $db return
	.word	CommandData              ; $dc data
	.word	Command_Assert           ; $dd assert
	.word	Command_Poke             ; $de poke
	.word	Command_Doke             ; $df doke
	.word	Command_Loke             ; $e0 loke
	.word	Command_Ink              ; $e1 ink
	.word	Command_Paper            ; $e2 paper
	.word	Command_CLS              ; $e3 cls
	.word	Command_Locate           ; $e4 locate
	.word	CommandBreak             ; $e5 break
