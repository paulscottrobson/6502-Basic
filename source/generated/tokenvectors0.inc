;
;	Automatically generated
;
Group0Vectors:
	.word	AdvanceNextLine          ; $80 [[eol]]
	.word	CommandShift1            ; $81 [[sh1]]
	.word	CommandShift2            ; $82 [[sh2]]
	.word	Unimplemented            ; $83 [[sh3]]
	.word	Unimplemented            ; $84 [[fpc]]
	.word	TKErr08                  ; $85 [[str]]
	.word	AndHandler               ; $86 and
	.word	OrHandler                ; $87 or
	.word	XorHandler               ; $88 xor
	.word	CompareGreaterEq         ; $89 >=
	.word	CompareLessEq            ; $8a <=
	.word	CompareGreater           ; $8b >
	.word	CompareLess              ; $8c <
	.word	CompareEquals            ; $8d =
	.word	CompareNotEquals         ; $8e <>
	.word	AddHandler               ; $8f +
	.word	SubHandler               ; $90 -
	.word	ShrHandler               ; $91 >>
	.word	ShlHandler               ; $92 <<
	.word	MulHandler               ; $93 *
	.word	DivHandler               ; $94 /
	.word	ModHandler               ; $95 mod
	.word	PowerHandler             ; $96 ^
	.word	WordRefHandler           ; $97 !
	.word	ByteRefHandler           ; $98 ?
	.word	Unimplemented            ; $99 repeat
	.word	Unimplemented            ; $9a while
	.word	Unimplemented            ; $9b for
	.word	CommandIf                ; $9c if
	.word	Unimplemented            ; $9d until
	.word	Unimplemented            ; $9e wend
	.word	Unimplemented            ; $9f next
	.word	TKErr06                  ; $a0 then
	.word	Unimplemented            ; $a1 endif
	.word	UnaryParenthesis         ; $a2 (
	.word	UnaryLen                 ; $a3 len(
	.word	UnarySgn                 ; $a4 sgn(
	.word	UnaryAbs                 ; $a5 abs(
	.word	Unary_Random             ; $a6 random(
	.word	Unary_Page               ; $a7 page
	.word	MInt32True               ; $a8 true
	.word	MInt32False              ; $a9 false
	.word	Unary_Min                ; $aa min(
	.word	Unary_Max                ; $ab max(
	.word	Unimplemented            ; $ac sys(
	.word	Unimplemented            ; $ad timer(
	.word	Unimplemented            ; $ae event(
	.word	Unimplemented            ; $af get(
	.word	Unimplemented            ; $b0 inkey(
	.word	Unimplemented            ; $b1 alloc(
	.word	Unimplemented            ; $b2 chr$(
	.word	Unimplemented            ; $b3 left$(
	.word	Unimplemented            ; $b4 mid$(
	.word	Unimplemented            ; $b5 right$(
	.word	Unimplemented            ; $b6 str$(
	.word	Unimplemented            ; $b7 val(
	.word	UnaryPeek                ; $b8 peek(
	.word	UnaryDeek                ; $b9 deek(
	.word	UnaryLeek                ; $ba leek(
	.word	UnaryAsc                 ; $bb asc(
	.word	UnaryIntToFloat          ; $bc int(
	.word	UnaryFloatToInt          ; $bd float(
	.word	UnaryReference           ; $be @
	.word	UnaryComplement          ; $bf ~
	.word	UnaryHexMarker           ; $c0 &
	.word	TKErr01                  ; $c1 )
	.word	CommandColon             ; $c2 :
	.word	TKErr02                  ; $c3 ,
	.word	TKErr03                  ; $c4 ;
	.word	Unimplemented            ; $c5 ]
	.word	TKErr07                  ; $c6 to
	.word	TKErr05                  ; $c7 step
	.word	TKErr04                  ; $c8 proc
	.word	Unimplemented            ; $c9 endproc
	.word	Unimplemented            ; $ca local
	.word	Command_Rem              ; $cb rem
	.word	CommandLet               ; $cc let
	.word	Command_Rem2             ; $cd '
	.word	Unimplemented            ; $ce [
	.word	Unimplemented            ; $cf input
	.word	Unimplemented            ; $d0 else
	.word	Unimplemented            ; $d1 vdu
	.word	Unimplemented            ; $d2 read
	.word	Unimplemented            ; $d3 data
	.word	Unimplemented            ; $d4 restore
	.word	Unimplemented            ; $d5 print
	.word	CommandGOTO              ; $d6 goto
	.word	CommandGOSUB             ; $d7 gosub
	.word	CommandRETURN            ; $d8 return
	.word	Command_Assert           ; $d9 assert
	.word	CommandStop              ; $da stop
	.word	CommandEnd               ; $db end
	.word	Unimplemented            ; $dc dim
	.word	Command_Poke             ; $dd poke
	.word	Command_Doke             ; $de doke
	.word	Command_Loke             ; $df loke
