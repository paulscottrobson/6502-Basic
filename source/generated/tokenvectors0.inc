;
;	Automatically generated
;
Group0Vectors:
	.word	Unimplemented            ; $80 [[eol]]
	.word	Unimplemented            ; $81 [[sh1]]
	.word	Unimplemented            ; $82 [[sh2]]
	.word	Unimplemented            ; $83 [[sh3]]
	.word	Unimplemented            ; $84 [[fpc]]
	.word	Unimplemented            ; $85 [[str]]
	.word	AndHandler               ; $86 and
	.word	OrHandler                ; $87 or
	.word	XorHandler               ; $88 xor
	.word	CompareGreaterEq         ; $89 >=
	.word	CompareLessEq            ; $8a <=
	.word	CompareGreater           ; $8b >
	.word	CompareLess              ; $8c <
	.word	CompareEquals            ; $8d =
	.word	CompareNotEquals         ; $8e <>
	.word	AddHandler               ; $8f +
	.word	SubHandler               ; $90 -
	.word	ShrHandler               ; $91 >>
	.word	ShlHandler               ; $92 <<
	.word	MulHandler               ; $93 *
	.word	DivHandler               ; $94 /
	.word	ModHandler               ; $95 mod
	.word	PowerHandler             ; $96 ^
	.word	WordRefHandler           ; $97 !
	.word	ByteRefHandler           ; $98 ?
	.word	Unimplemented            ; $99 repeat
	.word	Unimplemented            ; $9a while
	.word	Unimplemented            ; $9b for
	.word	Unimplemented            ; $9c if
	.word	Unimplemented            ; $9d until
	.word	Unimplemented            ; $9e wend
	.word	Unimplemented            ; $9f next
	.word	Unimplemented            ; $a0 then
	.word	Unimplemented            ; $a1 endif
	.word	Unimplemented            ; $a2 ~
	.word	Unimplemented            ; $a3 (
	.word	Unimplemented            ; $a4 &
	.word	Unimplemented            ; $a5 @
	.word	Unimplemented            ; $a6 len(
	.word	Unimplemented            ; $a7 sgn(
	.word	Unimplemented            ; $a8 abs(
	.word	Unimplemented            ; $a9 random(
	.word	Unimplemented            ; $aa page
	.word	Unimplemented            ; $ab true
	.word	Unimplemented            ; $ac false
	.word	Unimplemented            ; $ad min(
	.word	Unimplemented            ; $ae max(
	.word	Unimplemented            ; $af sys(
	.word	Unimplemented            ; $b0 timer(
	.word	Unimplemented            ; $b1 event(
	.word	Unimplemented            ; $b2 get(
	.word	Unimplemented            ; $b3 inkey(
	.word	Unimplemented            ; $b4 alloc(
	.word	Unimplemented            ; $b5 chr$(
	.word	Unimplemented            ; $b6 left$(
	.word	Unimplemented            ; $b7 mid$(
	.word	Unimplemented            ; $b8 right$(
	.word	Unimplemented            ; $b9 str$(
	.word	Unimplemented            ; $ba val(
	.word	Unimplemented            ; $bb peek(
	.word	Unimplemented            ; $bc deek(
	.word	Unimplemented            ; $bd leek(
	.word	Unimplemented            ; $be int(
	.word	Unimplemented            ; $bf float(
	.word	Unimplemented            ; $c0 )
	.word	Unimplemented            ; $c1 :
	.word	Unimplemented            ; $c2 ,
	.word	Unimplemented            ; $c3 ;
	.word	Unimplemented            ; $c4 ]
	.word	Unimplemented            ; $c5 to
	.word	Unimplemented            ; $c6 step
	.word	Unimplemented            ; $c7 proc
	.word	Unimplemented            ; $c8 endproc
	.word	Unimplemented            ; $c9 local
	.word	Unimplemented            ; $ca rem
	.word	Unimplemented            ; $cb let
	.word	Unimplemented            ; $cc '
	.word	Unimplemented            ; $cd [
	.word	Unimplemented            ; $ce input
	.word	Unimplemented            ; $cf else
	.word	Unimplemented            ; $d0 vdu
	.word	Unimplemented            ; $d1 read
	.word	Unimplemented            ; $d2 data
	.word	Unimplemented            ; $d3 restore
	.word	Unimplemented            ; $d4 print
	.word	Unimplemented            ; $d5 goto
	.word	Unimplemented            ; $d6 gosub
	.word	Unimplemented            ; $d7 return
	.word	Unimplemented            ; $d8 assert
	.word	Unimplemented            ; $d9 stop
	.word	Unimplemented            ; $da end
	.word	Unimplemented            ; $db dim
	.word	Unimplemented            ; $dc poke
	.word	Unimplemented            ; $dd doke
	.word	Unimplemented            ; $de loke
