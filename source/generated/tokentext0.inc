;
;	Automatically generated
;
Group0Text:
	.byte $03,$01,$0e,$84                  ; $86 and
	.byte $02,$0f,$92                      ; $87 or
	.byte $03,$18,$0f,$92                  ; $88 xor
	.byte $02,$3e,$bd                      ; $89 >=
	.byte $02,$3c,$bd                      ; $8a <=
	.byte $01,$be                          ; $8b >
	.byte $01,$bc                          ; $8c <
	.byte $01,$bd                          ; $8d =
	.byte $02,$3c,$be                      ; $8e <>
	.byte $01,$ab                          ; $8f +
	.byte $01,$ad                          ; $90 -
	.byte $02,$3e,$be                      ; $91 >>
	.byte $02,$3c,$bc                      ; $92 <<
	.byte $01,$aa                          ; $93 *
	.byte $01,$af                          ; $94 /
	.byte $03,$0d,$0f,$84                  ; $95 mod
	.byte $01,$9e                          ; $96 ^
	.byte $01,$a1                          ; $97 !
	.byte $01,$bf                          ; $98 ?
	.byte $06,$12,$05,$10,$05,$01,$94      ; $99 repeat
	.byte $05,$17,$08,$09,$0c,$85          ; $9a while
	.byte $03,$06,$0f,$92                  ; $9b for
	.byte $02,$09,$86                      ; $9c if
	.byte $07,$04,$05,$06,$10,$12,$0f,$83  ; $9d defproc
	.byte $05,$15,$0e,$14,$09,$8c          ; $9e until
	.byte $04,$17,$05,$0e,$84              ; $9f wend
	.byte $04,$0e,$05,$18,$94              ; $a0 next
	.byte $04,$14,$08,$05,$8e              ; $a1 then
	.byte $05,$05,$0e,$04,$09,$86          ; $a2 endif
	.byte $07,$05,$0e,$04,$10,$12,$0f,$83  ; $a3 endproc
	.byte $01,$a8                          ; $a4 (
	.byte $04,$0c,$05,$0e,$a8              ; $a5 len(
	.byte $04,$13,$07,$0e,$a8              ; $a6 sgn(
	.byte $04,$01,$02,$13,$a8              ; $a7 abs(
	.byte $07,$12,$01,$0e,$04,$0f,$0d,$a8  ; $a8 random(
	.byte $04,$10,$01,$07,$85              ; $a9 page
	.byte $04,$14,$12,$15,$85              ; $aa true
	.byte $05,$06,$01,$0c,$13,$85          ; $ab false
	.byte $04,$0d,$09,$0e,$a8              ; $ac min(
	.byte $04,$0d,$01,$18,$a8              ; $ad max(
	.byte $04,$13,$19,$13,$a8              ; $ae sys(
	.byte $06,$14,$09,$0d,$05,$12,$a8      ; $af timer(
	.byte $06,$05,$16,$05,$0e,$14,$a8      ; $b0 event(
	.byte $04,$07,$05,$14,$a8              ; $b1 get(
	.byte $06,$09,$0e,$0b,$05,$19,$a8      ; $b2 inkey(
	.byte $06,$01,$0c,$0c,$0f,$03,$a8      ; $b3 alloc(
	.byte $05,$03,$08,$12,$24,$a8          ; $b4 chr$(
	.byte $06,$0c,$05,$06,$14,$24,$a8      ; $b5 left$(
	.byte $05,$0d,$09,$04,$24,$a8          ; $b6 mid$(
	.byte $07,$12,$09,$07,$08,$14,$24,$a8  ; $b7 right$(
	.byte $05,$13,$14,$12,$24,$a8          ; $b8 str$(
	.byte $04,$16,$01,$0c,$a8              ; $b9 val(
	.byte $05,$10,$05,$05,$0b,$a8          ; $ba peek(
	.byte $05,$04,$05,$05,$0b,$a8          ; $bb deek(
	.byte $05,$0c,$05,$05,$0b,$a8          ; $bc leek(
	.byte $04,$01,$13,$03,$a8              ; $bd asc(
	.byte $04,$09,$0e,$14,$a8              ; $be int(
	.byte $06,$06,$0c,$0f,$01,$14,$a8      ; $bf float(
	.byte $06,$09,$13,$16,$01,$0c,$a8      ; $c0 isval(
	.byte $07,$15,$10,$10,$05,$12,$24,$a8  ; $c1 upper$(
	.byte $07,$0c,$0f,$17,$05,$12,$24,$a8  ; $c2 lower$(
	.byte $01,$80                          ; $c3 @
	.byte $01,$be                          ; $c4 ~
	.byte $01,$a6                          ; $c5 &
	.byte $01,$a9                          ; $c6 )
	.byte $01,$ba                          ; $c7 :
	.byte $01,$ac                          ; $c8 ,
	.byte $01,$bb                          ; $c9 ;
	.byte $01,$a7                          ; $ca '
	.byte $02,$14,$8f                      ; $cb to
	.byte $04,$13,$14,$05,$90              ; $cc step
	.byte $04,$10,$12,$0f,$83              ; $cd proc
	.byte $05,$0c,$0f,$03,$01,$8c          ; $ce local
	.byte $03,$04,$09,$8d                  ; $cf dim
	.byte $03,$12,$05,$8d                  ; $d0 rem
	.byte $03,$0c,$05,$94                  ; $d1 let
	.byte $05,$09,$0e,$10,$15,$94          ; $d2 input
	.byte $04,$05,$0c,$13,$85              ; $d3 else
	.byte $03,$16,$04,$95                  ; $d4 vdu
	.byte $05,$10,$12,$09,$0e,$94          ; $d5 print
	.byte $04,$07,$0f,$14,$8f              ; $d6 goto
	.byte $05,$07,$0f,$13,$15,$82          ; $d7 gosub
	.byte $06,$12,$05,$14,$15,$12,$8e      ; $d8 return
	.byte $04,$04,$01,$14,$81              ; $d9 data
	.byte $06,$01,$13,$13,$05,$12,$94      ; $da assert
	.byte $04,$10,$0f,$0b,$85              ; $db poke
	.byte $04,$04,$0f,$0b,$85              ; $dc doke
	.byte $04,$0c,$0f,$0b,$85              ; $dd loke
	.byte $03,$09,$0e,$8b                  ; $de ink
	.byte $05,$10,$01,$10,$05,$92          ; $df paper
	.byte $03,$03,$0c,$93                  ; $e0 cls
	.byte $06,$0c,$0f,$03,$01,$14,$85      ; $e1 locate
	.byte $00

