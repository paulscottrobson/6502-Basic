;
;	Automatically generated
;
Group0Text:
	.byte $03,$01,$0e,$84                  ; $86 and
	.byte $02,$0f,$92                      ; $86 or
	.byte $03,$18,$0f,$92                  ; $86 xor
	.byte $02,$3e,$bd                      ; $86 >=
	.byte $02,$3c,$bd                      ; $86 <=
	.byte $01,$be                          ; $86 >
	.byte $01,$bc                          ; $86 <
	.byte $01,$bd                          ; $86 =
	.byte $02,$3c,$be                      ; $86 <>
	.byte $01,$ab                          ; $86 +
	.byte $01,$ad                          ; $86 -
	.byte $02,$3e,$be                      ; $86 >>
	.byte $02,$3c,$bc                      ; $86 <<
	.byte $01,$aa                          ; $86 *
	.byte $01,$af                          ; $86 /
	.byte $03,$0d,$0f,$84                  ; $86 mod
	.byte $01,$9e                          ; $86 ^
	.byte $01,$a1                          ; $86 !
	.byte $01,$bf                          ; $86 ?
	.byte $06,$12,$05,$10,$05,$01,$94      ; $86 repeat
	.byte $05,$17,$08,$09,$0c,$85          ; $86 while
	.byte $03,$06,$0f,$92                  ; $86 for
	.byte $02,$09,$86                      ; $86 if
	.byte $07,$04,$05,$06,$10,$12,$0f,$83  ; $86 defproc
	.byte $05,$15,$0e,$14,$09,$8c          ; $86 until
	.byte $04,$17,$05,$0e,$84              ; $86 wend
	.byte $04,$0e,$05,$18,$94              ; $86 next
	.byte $04,$14,$08,$05,$8e              ; $86 then
	.byte $05,$05,$0e,$04,$09,$86          ; $86 endif
	.byte $07,$05,$0e,$04,$10,$12,$0f,$83  ; $86 endproc
	.byte $01,$bb                          ; $86 (
	.byte $04,$0c,$05,$0e,$bb              ; $86 len(
	.byte $04,$13,$07,$0e,$bb              ; $86 sgn(
	.byte $04,$01,$02,$13,$bb              ; $86 abs(
	.byte $07,$12,$01,$0e,$04,$0f,$0d,$bb  ; $86 random(
	.byte $04,$10,$01,$07,$85              ; $86 page
	.byte $04,$14,$12,$15,$85              ; $86 true
	.byte $05,$06,$01,$0c,$13,$85          ; $86 false
	.byte $04,$0d,$09,$0e,$bb              ; $86 min(
	.byte $04,$0d,$01,$18,$bb              ; $86 max(
	.byte $04,$13,$19,$13,$bb              ; $86 sys(
	.byte $06,$14,$09,$0d,$05,$12,$bb      ; $86 timer(
	.byte $06,$05,$16,$05,$0e,$14,$bb      ; $86 event(
	.byte $04,$07,$05,$14,$bb              ; $86 get(
	.byte $06,$09,$0e,$0b,$05,$19,$bb      ; $86 inkey(
	.byte $06,$01,$0c,$0c,$0f,$03,$bb      ; $86 alloc(
	.byte $04,$03,$08,$12,$bd              ; $86 chr$(
	.byte $05,$0c,$05,$06,$14,$bd          ; $86 left$(
	.byte $04,$0d,$09,$04,$bd              ; $86 mid$(
	.byte $06,$12,$09,$07,$08,$14,$bd      ; $86 right$(
	.byte $04,$13,$14,$12,$bd              ; $86 str$(
	.byte $04,$16,$01,$0c,$bb              ; $86 val(
	.byte $05,$10,$05,$05,$0b,$bb          ; $86 peek(
	.byte $05,$04,$05,$05,$0b,$bb          ; $86 deek(
	.byte $05,$0c,$05,$05,$0b,$bb          ; $86 leek(
	.byte $04,$01,$13,$03,$bb              ; $86 asc(
	.byte $04,$09,$0e,$14,$bb              ; $86 int(
	.byte $06,$06,$0c,$0f,$01,$14,$bb      ; $86 float(
	.byte $06,$09,$13,$16,$01,$0c,$bb      ; $86 isval(
	.byte $06,$15,$10,$10,$05,$12,$bd      ; $86 upper$(
	.byte $06,$0c,$0f,$17,$05,$12,$bd      ; $86 lower$(
	.byte $01,$80                          ; $86 @
	.byte $01,$be                          ; $86 ~
	.byte $01,$a6                          ; $86 &
	.byte $01,$a9                          ; $86 )
	.byte $01,$ba                          ; $86 :
	.byte $01,$ac                          ; $86 ,
	.byte $01,$bb                          ; $86 ;
	.byte $01,$a7                          ; $86 '
	.byte $02,$14,$8f                      ; $86 to
	.byte $04,$13,$14,$05,$90              ; $86 step
	.byte $04,$10,$12,$0f,$83              ; $86 proc
	.byte $05,$0c,$0f,$03,$01,$8c          ; $86 local
	.byte $03,$04,$09,$8d                  ; $86 dim
	.byte $03,$12,$05,$8d                  ; $86 rem
	.byte $03,$0c,$05,$94                  ; $86 let
	.byte $05,$09,$0e,$10,$15,$94          ; $86 input
	.byte $04,$05,$0c,$13,$85              ; $86 else
	.byte $03,$16,$04,$95                  ; $86 vdu
	.byte $05,$10,$12,$09,$0e,$94          ; $86 print
	.byte $04,$07,$0f,$14,$8f              ; $86 goto
	.byte $05,$07,$0f,$13,$15,$82          ; $86 gosub
	.byte $06,$12,$05,$14,$15,$12,$8e      ; $86 return
	.byte $04,$04,$01,$14,$81              ; $86 data
	.byte $06,$01,$13,$13,$05,$12,$94      ; $86 assert
	.byte $04,$10,$0f,$0b,$85              ; $86 poke
	.byte $04,$04,$0f,$0b,$85              ; $86 doke
	.byte $04,$0c,$0f,$0b,$85              ; $86 loke
	.byte $00

