;
;	Automatically generated
;
Group0Text:
	.byte $03,$41,$4e,$c4                  ; $86 and
	.byte $02,$4f,$d2                      ; $87 or
	.byte $03,$58,$4f,$d2                  ; $88 xor
	.byte $02,$3e,$bd                      ; $89 >=
	.byte $02,$3c,$bd                      ; $8a <=
	.byte $01,$be                          ; $8b >
	.byte $01,$bc                          ; $8c <
	.byte $01,$bd                          ; $8d =
	.byte $02,$3c,$be                      ; $8e <>
	.byte $01,$ab                          ; $8f +
	.byte $01,$ad                          ; $90 -
	.byte $02,$3e,$be                      ; $91 >>
	.byte $02,$3c,$bc                      ; $92 <<
	.byte $01,$aa                          ; $93 *
	.byte $01,$af                          ; $94 /
	.byte $03,$4d,$4f,$c4                  ; $95 mod
	.byte $01,$de                          ; $96 ^
	.byte $01,$a1                          ; $97 !
	.byte $01,$bf                          ; $98 ?
	.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
	.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
	.byte $03,$46,$4f,$d2                  ; $9b for
	.byte $02,$49,$c6                      ; $9c if
	.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
	.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
	.byte $04,$57,$45,$4e,$c4              ; $9f wend
	.byte $04,$4e,$45,$58,$d4              ; $a0 next
	.byte $04,$54,$48,$45,$ce              ; $a1 then
	.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
	.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
	.byte $01,$a8                          ; $a4 (
	.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
	.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
	.byte $04,$41,$42,$53,$a8              ; $a7 abs(
	.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
	.byte $04,$50,$41,$47,$c5              ; $a9 page
	.byte $04,$54,$52,$55,$c5              ; $aa true
	.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
	.byte $04,$4d,$49,$4e,$a8              ; $ac min(
	.byte $04,$4d,$41,$58,$a8              ; $ad max(
	.byte $04,$53,$59,$53,$a8              ; $ae sys(
	.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
	.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
	.byte $04,$47,$45,$54,$a8              ; $b1 get(
	.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
	.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
	.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
	.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
	.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
	.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
	.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
	.byte $04,$56,$41,$4c,$a8              ; $b9 val(
	.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
	.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
	.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
	.byte $04,$41,$53,$43,$a8              ; $bd asc(
	.byte $04,$49,$4e,$54,$a8              ; $be int(
	.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
	.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
	.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
	.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
	.byte $01,$c0                          ; $c3 @
	.byte $01,$fe                          ; $c4 ~
	.byte $01,$a6                          ; $c5 &
	.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
	.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
	.byte $03,$4d,$45,$cd                  ; $c8 mem
	.byte $01,$a9                          ; $c9 )
	.byte $01,$ba                          ; $ca :
	.byte $01,$ac                          ; $cb ,
	.byte $01,$bb                          ; $cc ;
	.byte $01,$a7                          ; $cd '
	.byte $02,$54,$cf                      ; $ce to
	.byte $04,$53,$54,$45,$d0              ; $cf step
	.byte $04,$50,$52,$4f,$c3              ; $d0 proc
	.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
	.byte $03,$44,$49,$cd                  ; $d2 dim
	.byte $03,$52,$45,$cd                  ; $d3 rem
	.byte $03,$4c,$45,$d4                  ; $d4 let
	.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
	.byte $04,$45,$4c,$53,$c5              ; $d6 else
	.byte $03,$56,$44,$d5                  ; $d7 vdu
	.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
	.byte $04,$44,$41,$54,$c1              ; $d9 data
	.byte $05,$49,$4d,$41,$47,$c5          ; $da image
	.byte $02,$41,$d4                      ; $db at
	.byte $04,$46,$4c,$49,$d0              ; $dc flip
	.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
	.byte $04,$50,$4f,$4b,$c5              ; $de poke
	.byte $04,$44,$4f,$4b,$c5              ; $df doke
	.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
	.byte $03,$49,$4e,$cb                  ; $e1 ink
	.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
	.byte $03,$43,$4c,$d3                  ; $e3 cls
	.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
	.byte $01,$ae                          ; $e5 .
	.byte $04,$46,$52,$4f,$cd              ; $e6 from
	.byte $01,$a3                          ; $e7 #
	.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
	.byte $04,$54,$45,$58,$d4              ; $e9 text
	.byte $00

