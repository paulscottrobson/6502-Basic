;
;	Automatically generated
;
Group0Text:
	.byte $03,$01,$0e,$04                  ; $86 and
	.byte $02,$0f,$12                      ; $86 or
	.byte $03,$18,$0f,$12                  ; $86 xor
	.byte $02,$3e,$3d                      ; $86 >=
	.byte $02,$3c,$3d                      ; $86 <=
	.byte $01,$3e                          ; $86 >
	.byte $01,$3c                          ; $86 <
	.byte $01,$3d                          ; $86 =
	.byte $02,$3c,$3e                      ; $86 <>
	.byte $01,$2b                          ; $86 +
	.byte $01,$2d                          ; $86 -
	.byte $02,$3e,$3e                      ; $86 >>
	.byte $02,$3c,$3c                      ; $86 <<
	.byte $01,$2a                          ; $86 *
	.byte $01,$2f                          ; $86 /
	.byte $03,$0d,$0f,$04                  ; $86 mod
	.byte $01,$1e                          ; $86 ^
	.byte $01,$21                          ; $86 !
	.byte $01,$3f                          ; $86 ?
	.byte $06,$12,$05,$10,$05,$01,$14      ; $86 repeat
	.byte $05,$17,$08,$09,$0c,$05          ; $86 while
	.byte $03,$06,$0f,$12                  ; $86 for
	.byte $02,$09,$06                      ; $86 if
	.byte $05,$15,$0e,$14,$09,$0c          ; $86 until
	.byte $04,$17,$05,$0e,$04              ; $86 wend
	.byte $04,$0e,$05,$18,$14              ; $86 next
	.byte $04,$14,$08,$05,$0e              ; $86 then
	.byte $05,$05,$0e,$04,$09,$06          ; $86 endif
	.byte $01,$3e                          ; $86 ~
	.byte $01,$3b                          ; $86 (
	.byte $01,$26                          ; $86 &
	.byte $01,$00                          ; $86 @
	.byte $04,$0c,$05,$0e,$3b              ; $86 len(
	.byte $04,$13,$07,$0e,$3b              ; $86 sgn(
	.byte $04,$01,$02,$13,$3b              ; $86 abs(
	.byte $07,$12,$01,$0e,$04,$0f,$0d,$3b  ; $86 random(
	.byte $04,$10,$01,$07,$05              ; $86 page
	.byte $04,$14,$12,$15,$05              ; $86 true
	.byte $05,$06,$01,$0c,$13,$05          ; $86 false
	.byte $04,$0d,$09,$0e,$3b              ; $86 min(
	.byte $04,$0d,$01,$18,$3b              ; $86 max(
	.byte $04,$13,$19,$13,$3b              ; $86 sys(
	.byte $06,$14,$09,$0d,$05,$12,$3b      ; $86 timer(
	.byte $06,$05,$16,$05,$0e,$14,$3b      ; $86 event(
	.byte $04,$07,$05,$14,$3b              ; $86 get(
	.byte $06,$09,$0e,$0b,$05,$19,$3b      ; $86 inkey(
	.byte $06,$01,$0c,$0c,$0f,$03,$3b      ; $86 alloc(
	.byte $04,$03,$08,$12,$3d              ; $86 chr$(
	.byte $05,$0c,$05,$06,$14,$3d          ; $86 left$(
	.byte $04,$0d,$09,$04,$3d              ; $86 mid$(
	.byte $06,$12,$09,$07,$08,$14,$3d      ; $86 right$(
	.byte $04,$13,$14,$12,$3d              ; $86 str$(
	.byte $04,$16,$01,$0c,$3b              ; $86 val(
	.byte $05,$10,$05,$05,$0b,$3b          ; $86 peek(
	.byte $05,$04,$05,$05,$0b,$3b          ; $86 deek(
	.byte $05,$0c,$05,$05,$0b,$3b          ; $86 leek(
	.byte $01,$29                          ; $86 )
	.byte $01,$3a                          ; $86 :
	.byte $01,$2c                          ; $86 ,
	.byte $01,$3b                          ; $86 ;
	.byte $01,$1d                          ; $86 ]
	.byte $02,$14,$0f                      ; $86 to
	.byte $04,$13,$14,$05,$10              ; $86 step
	.byte $04,$10,$12,$0f,$03              ; $86 proc
	.byte $07,$05,$0e,$04,$10,$12,$0f,$03  ; $86 endproc
	.byte $05,$0c,$0f,$03,$01,$0c          ; $86 local
	.byte $03,$12,$05,$0d                  ; $86 rem
	.byte $03,$0c,$05,$14                  ; $86 let
	.byte $01,$27                          ; $86 '
	.byte $01,$1b                          ; $86 [
	.byte $05,$09,$0e,$10,$15,$14          ; $86 input
	.byte $04,$05,$0c,$13,$05              ; $86 else
	.byte $03,$16,$04,$15                  ; $86 vdu
	.byte $04,$12,$05,$01,$04              ; $86 read
	.byte $04,$04,$01,$14,$01              ; $86 data
	.byte $07,$12,$05,$13,$14,$0f,$12,$05  ; $86 restore
	.byte $05,$10,$12,$09,$0e,$14          ; $86 print
	.byte $04,$07,$0f,$14,$0f              ; $86 goto
	.byte $05,$07,$0f,$13,$15,$02          ; $86 gosub
	.byte $06,$12,$05,$14,$15,$12,$0e      ; $86 return
	.byte $06,$01,$13,$13,$05,$12,$14      ; $86 assert
	.byte $04,$13,$14,$0f,$10              ; $86 stop
	.byte $03,$05,$0e,$04                  ; $86 end
	.byte $03,$04,$09,$0d                  ; $86 dim
	.byte $04,$10,$0f,$0b,$05              ; $86 poke
	.byte $04,$04,$0f,$0b,$05              ; $86 doke
	.byte $04,$0c,$0f,$0b,$05              ; $86 loke
	.byte $00

