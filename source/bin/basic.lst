
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Fri Mar  5 16:27:40 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc


;******  Processing file: main/../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c ac 13	jmp $13ac			jmp 	Command_Run
.25a9					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	0a 0a 00 01 31 3a 8d 90			.byte 10,10,0,1,49,58,141,144,65,128,8,11,0,211,1,49,58,128,11,12,0,203,20,5,19,20,59,196,128,12,13,0,211,1,49,58,198,3,50,58,128,8,14,0,153,197,158,171,128,4,15,0,128,11,16,0,157,20,5,19,20,59,196,128,17,17,0,204,1,49,58,141,106,198,3,50,58,141,144,71,128,12,18,0,211,1,49,58,198,3,50,58,128,5,19,0,163,128,0
>5008	41 80 08 0b 00 d3 01 31 3a 80 0b 0c 00 cb 14 05
>5018	13 14 3b c4 80 0c 0d 00 d3 01 31 3a c6 03 32 3a
>5028	80 08 0e 00 99 c5 9e ab 80 04 0f 00 80 0b 10 00
>5038	9d 14 05 13 14 3b c4 80 11 11 00 cc 01 31 3a 8d
>5048	6a c6 03 32 3a 8d 90 47 80 0c 12 00 d3 01 31 3a
>5058	c6 03 32 3a 80 05 13 00 a3 80 00

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 50 1a	jsr $1a50			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 76 20	jsr $2076			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 7d 21	jsr $217d		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0d		sta $0d				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0e		sta $0e				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0f		sta $0f				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 10		sta $10				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 dc 20	jsr $20dc			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 a2 25	jsr $25a2		jsr	variableHandler
.1065	20 53 15	jsr $1553			jsr 	ScanProc 					; scan for procedures
.1068	68		pla				pla
.1069	a8		tay				tay
.106a	60		rts				rts
.106b					AdvanceLowMemoryByte:
.106b	18		clc				clc
.106c	65 0f		adc $0f				adc 	lowMemory
.106e	85 0f		sta $0f				sta 	lowMemory
.1070	90 02		bcc $1074			bcc 	_ALMBExit
.1072	e6 10		inc $10				inc 	lowMemory+1
.1074					_ALMBExit:
.1074	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.25a9					Command_FOR:
.25a9	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.25ab	a2 0b		ldx #$0b			ldx 	#11
.25ad	20 ea 20	jsr $20ea			jsr 	RSClaim
.25b0	20 b1 10	jsr $10b1			jsr 	CommandLET 					; do the same as LET.
.25b3	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.25b5	c9 80		cmp #$80			cmp 	#$80
.25b7	d0 4c		bne $2605			bne 	_CFType
.25b9	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.25bb	20 b7 20	jsr $20b7			jsr 	CheckToken
.25be	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.25c0	20 52 1a	jsr $1a52			jsr 	EvaluateInteger				; get terminal value in stack 1
.25c3	98		tya				tya
.25c4	48		pha				pha
.25c5	a0 04		ldy #$04			ldy 	#4
.25c7	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.25c9	91 78		sta ($78),y			sta 	(rsPointer),y
.25cb	c8		iny				iny
.25cc	a5 50		lda $50				lda		esInt1
.25ce	91 78		sta ($78),y			sta 	(rsPointer),y
.25d0	c8		iny				iny
.25d1	a9 01		lda #$01			lda 	#1  						; the default step in 6
.25d3	91 78		sta ($78),y			sta 	(rsPointer),y
.25d5	c8		iny				iny
.25d6	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.25d8	91 78		sta ($78),y			sta 	(rsPointer),y
.25da	c8		iny				iny
.25db	a5 51		lda $51				lda		esInt1+1
.25dd	91 78		sta ($78),y			sta 	(rsPointer),y
.25df	c8		iny				iny
.25e0	a5 59		lda $59				lda		esInt2+1
.25e2	91 78		sta ($78),y			sta 	(rsPointer),y
.25e4	c8		iny				iny
.25e5	a5 61		lda $61				lda		esInt3+1
.25e7	91 78		sta ($78),y			sta 	(rsPointer),y
.25e9	68		pla				pla
.25ea	a8		tay				tay
.25eb	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.25ed	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.25ef	d0 0e		bne $25ff			bne 	_CFDone
.25f1	c8		iny				iny									; skip over step.
.25f2	20 52 1a	jsr $1a52			jsr 	EvaluateInteger 			; get step
.25f5	98		tya				tya
.25f6	48		pha				pha
.25f7	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.25f9	a0 06		ldy #$06			ldy 	#6
.25fb	91 78		sta ($78),y			sta 	(rsPointer),y
.25fd	68		pla				pla
.25fe	a8		tay				tay
.25ff					_CFDone:
.25ff	a9 01		lda #$01			lda 	#1
.2601	20 16 21	jsr $2116			jsr 	RSSavePosition 				; save position.
.2604	60		rts				rts
.2605					_CFType:
.2605	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2607	20 7d 21	jsr $217d		jsr	errorHandler
.260a					Command_NEXT:
.260a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.260c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.260e	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2610	f0 05		beq $2617			beq 	_isok
.2612	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2614	20 7d 21	jsr $217d		jsr	errorHandler
.2617					_isok:
.2617	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2619	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.261b	b0 18		bcs $2635			bcs 	_CNNoIndex
.261d	a2 00		ldx #$00			ldx 	#0 							; start on stack
.261f	20 7f 1a	jsr $1a7f			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2622	98		tya				tya
.2623	48		pha				pha
.2624	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2626	b1 78		lda ($78),y			lda 	(rsPointer),y
.2628	d5 48		cmp $48,x			cmp 	esInt0,x
.262a	d0 76		bne $26a2			bne 	_CNBadIndex
.262c	c8		iny				iny
.262d	b1 78		lda ($78),y			lda 	(rsPointer),y
.262f	d5 50		cmp $50,x			cmp 	esInt1,x
.2631	d0 6f		bne $26a2			bne 	_CNBadIndex
.2633	68		pla				pla
.2634	a8		tay				tay
.2635					_CNNoIndex:
.2635	98		tya				tya
.2636	48		pha				pha
.2637	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2639	b1 78		lda ($78),y			lda 	(rsPointer),y
.263b	85 04		sta $04				sta 	temp0
.263d	c8		iny				iny
.263e	b1 78		lda ($78),y			lda 	(rsPointer),y
.2640	85 05		sta $05				sta 	temp0+1
.2642	c8		iny				iny
.2643	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2645	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2647	85 09		sta $09				sta 	temp2+1 					; save for later.
.2649	10 01		bpl $264c			bpl 	_CNSignX
.264b	ca		dex				dex  								; X = $FF
.264c					_CNSignX:
.264c	18		clc				clc 								; add to the LSB
.264d	a0 00		ldy #$00			ldy 	#0
.264f	71 04		adc ($04),y			adc 	(temp0),y
.2651	91 04		sta ($04),y			sta 	(temp0),y
.2653					_CNPropogate:
.2653	c8		iny				iny  								; add the sign extended in X to the rest.
.2654	8a		txa				txa
.2655	71 04		adc ($04),y			adc 	(temp0),y
.2657	91 04		sta ($04),y			sta 	(temp0),y
.2659	c8		iny				iny
.265a	8a		txa				txa
.265b	71 04		adc ($04),y			adc 	(temp0),y
.265d	91 04		sta ($04),y			sta 	(temp0),y
.265f	c8		iny				iny
.2660	8a		txa				txa
.2661	71 04		adc ($04),y			adc 	(temp0),y
.2663	91 04		sta ($04),y			sta 	(temp0),y
.2665	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2666	a5 78		lda $78				lda 	rsPointer
.2668	69 07		adc #$07			adc 	#7
.266a	85 06		sta $06				sta 	temp1
.266c	a9 00		lda #$00			lda 	#0
.266e	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2670	a8		tay				tay 								; and clear the Y register again.
.2671	65 79		adc $79				adc 	rsPointer+1
.2673	85 07		sta $07				sta 	temp1+1
.2675	38		sec				sec 								; calculate current - limit oring interim values.
.2676	20 ae 26	jsr $26ae			jsr 	_CNCompare
.2679	20 ae 26	jsr $26ae			jsr 	_CNCompare
.267c	20 ae 26	jsr $26ae			jsr 	_CNCompare
.267f	20 ae 26	jsr $26ae			jsr 	_CNCompare
.2682	50 02		bvc $2686			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2684	49 80		eor #$80			eor 	#$80
.2686					_CNNoOverflow:
.2686	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2688	30 1d		bmi $26a7			bmi 	_CNCheckDownto
.268a	c9 00		cmp #$00			cmp 	#0
.268c	30 0c		bmi $269a			bmi 	_CNLoopRound 				; loop round if < =
.268e	a5 08		lda $08				lda 	temp2
.2690	f0 08		beq $269a			beq 	_CNLoopRound
.2692					_CNLoopExit:
.2692	68		pla				pla
.2693	a8		tay				tay
.2694	a9 0b		lda #$0b			lda 	#11
.2696	20 0c 21	jsr $210c			jsr 	RSFree
.2699	60		rts				rts
.269a					_CNLoopRound:
.269a	68		pla				pla
.269b	a8		tay				tay
.269c	a9 01		lda #$01			lda 	#1
.269e	20 29 21	jsr $2129			jsr 	RSLoadPosition				; go back to the loop top
.26a1	60		rts				rts
.26a2					_CNBadIndex:
.26a2	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.26a4	20 7d 21	jsr $217d		jsr	errorHandler
.26a7					_CNCheckDownto:
.26a7	c9 00		cmp #$00			cmp 	#0
.26a9	10 ef		bpl $269a			bpl 	_CNLoopRound
.26ab	4c 92 26	jmp $2692			jmp 	_CNLoopExit
.26ae					_CNCompare:
.26ae	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.26b0	f1 06		sbc ($06),y			sbc 	(temp1),y
.26b2	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.26b4	85 08		sta $08				sta 	temp2
.26b6	c8		iny				iny
.26b7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1075					CommandIf:
.1075	20 50 1a	jsr $1a50			jsr 	EvaluateRootInteger 		; if what ?
.1078	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.107c	f0 04		beq $1082			beq 	_IfSimple
.107e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1080	d0 1b		bne $109d			bne 	_IfComplex
.1082					_IfSimple:
.1082	20 76 20	jsr $2076			jsr 	MInt32Zero					; check if TOS zero
.1085	f0 10		beq $1097			beq 	_IfEOL 						; go to next line.
.1087	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1089	c8		iny				iny
.108a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.108c	f0 0c		beq $109a			beq 	_IfGoto 					; do the Goto code
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1090	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1092	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1094	f0 04		beq $109a			beq 	_IfGoto
.1096	60		rts				rts 								; else continue on this line.
.1097					_IfEOL:
.1097	4c c7 15	jmp $15c7			jmp 	AdvanceNextLine 			; go to next line
.109a					_IfGoto:
.109a	4c 06 16	jmp $1606			jmp 	CommandGoto
.109d					_IfComplex:
.109d	20 76 20	jsr $2076			jsr 	MInt32Zero 					; is it true ?
.10a0	f0 01		beq $10a3			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a2	60		rts				rts 								; else continue.
.10a3					_IFSkip:
.10a3	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a5	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a7	4c 21 27	jmp $2721			jmp		ScanForward
.10aa					Command_ELSE:
.10aa	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ac	8a		txa				txa
.10ad	4c 21 27	jmp $2721			jmp		ScanForward
.10b0					Command_ENDIF:
.10b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b1					CommandLet:
.10b1	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b3	20 7f 1a	jsr $1a7f			jsr 	EvaluateReference
.10b6	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b8	20 b7 20	jsr $20b7			jsr 	CheckToken
.10bb	e8		inx				inx 								; do RHS
.10bc	20 33 1a	jsr $1a33			jsr 	Evaluate 					; evaluate and derefernce
.10bf	ca		dex				dex
.10c0	20 c4 10	jsr $10c4			jsr 	WriteValue 					; write it out
.10c3	60		rts				rts
.10c4					WriteValue:
.10c4	98		tya				tya
.10c5	48		pha				pha
.10c6	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c9	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cb	55 41		eor $41,x			eor 	esType+1,x
.10cd	29 40		and #$40			and 	#$40
.10cf	d0 50		bne $1121			bne		_WVType
.10d1	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d3	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d5	29 40		and #$40			and 	#$40
.10d7	d0 1f		bne $10f8			bne 	_WVCopyString
.10d9	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10db	15 41		ora $41,x			ora 	esType+1,x
.10dd	4a		lsr a				lsr 	a
.10de	90 22		bcc $1102			bcc 	_WVCopyData4
.10e0	b5 40		lda $40,x			lda 	esType,x
.10e2	4a		lsr a				lsr 	a
.10e3	90 3c		bcc $1121			bcc 	_WVType
.10e5	e8		inx				inx 								; force the value being written to be a float.
.10e6	20 78 16	jsr $1678			jsr 	BPMakeFloat
.10e9	ca		dex				dex
.10ea	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ed	e8		inx				inx
.10ee	8a		txa				txa
.10ef	a2 20		ldx #$20		ldx	#32
.10f1	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.10f4	aa		tax				tax
.10f5	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.10f8					_WVCopyString:
.10f8	8a		txa				txa
.10f9	a2 0a		ldx #$0a		ldx	#10
.10fb	20 26 24	jsr $2426		jsr	stringHandler
.10fe	aa		tax				tax
.10ff	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.1102					_WVCopyData4:
.1102	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1104	29 20		and #$20			and 	#$20
.1106	d0 10		bne $1118			bne 	_WVCopyData1
.1108	a0 03		ldy #$03			ldy 	#3
.110a	b5 61		lda $61,x			lda 	esInt3+1,x
.110c	91 04		sta ($04),y			sta 	(temp0),y
.110e	88		dey				dey
.110f	b5 59		lda $59,x			lda 	esInt2+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113	88		dey				dey
.1114	b5 51		lda $51,x			lda 	esInt1+1,x
.1116	91 04		sta ($04),y			sta 	(temp0),y
.1118					_WVCopyData1:
.1118	a0 00		ldy #$00			ldy 	#0
.111a	b5 49		lda $49,x			lda 	esInt0+1,x
.111c	91 04		sta ($04),y			sta 	(temp0),y
.111e					_WVCopyExit:
.111e	68		pla				pla
.111f	a8		tay				tay
.1120	60		rts				rts
.1121					_WVType:
.1121	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1123	20 7d 21	jsr $217d		jsr	errorHandler
.1126					TOSToTemp0:
.1126	b5 48		lda $48,x			lda 	esInt0,x
.1128	85 04		sta $04				sta 	temp0
.112a	b5 50		lda $50,x			lda 	esInt1,x
.112c	85 05		sta $05				sta 	temp0+1
.112e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.112f					CommandLocal:
.112f	a2 00		ldx #$00			ldx 	#0
.1131	20 4d 11	jsr $114d			jsr 	LocaliseVariable 			; localise one.
.1134					_CLCheckNext:
.1134	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1136	c8		iny				iny
.1137	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.1139	f0 06		beq $1141			beq 	_CLAssignment
.113b	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; comma try again.
.113d	f0 f0		beq $112f			beq 	CommandLocal
.113f	88		dey				dey
.1140	60		rts				rts
.1141					_CLAssignment:
.1141	a2 01		ldx #$01			ldx 	#1
.1143	20 33 1a	jsr $1a33			jsr 	Evaluate 					; evaluate RHS
.1146	ca		dex				dex
.1147	20 c4 10	jsr $10c4			jsr 	WriteValue
.114a	4c 34 11	jmp $1134			jmp 	_CLCheckNext
.114d					LocaliseVariable:
.114d	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.114f	c9 40		cmp #$40			cmp 	#$40
.1151	b0 67		bcs $11ba			bcs 	_LVSyntax
.1153	8a		txa				txa 								; get the address of that variable.
.1154	a2 00		ldx #$00		ldx	#0
.1156	20 a2 25	jsr $25a2		jsr	variableHandler
.1159	aa		tax				tax
.115a	8a		txa				txa
.115b	48		pha				pha
.115c	98		tya				tya
.115d	48		pha				pha
.115e	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1161	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1163	0a		asl a				asl 	a
.1164	10 16		bpl $117c			bpl 	_LVPushNumber
.1166	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1168	b1 04		lda ($04),y			lda 	(temp0),y
.116a	c8		iny				iny
.116b	85 06		sta $06				sta 	temp1
.116d	b1 04		lda ($04),y			lda 	(temp0),y
.116f	85 07		sta $07				sta 	temp1+1
.1171	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1173	b1 06		lda ($06),y			lda 	(temp1),y
.1175	aa		tax				tax 								; into X
.1176	e8		inx				inx 								; +1 for length.
.1177	a9 24		lda #$24			lda 	#markerString
.1179	4c 91 11	jmp $1191			jmp 	_LVWriteFrame
.117c					_LVPushNumber:
.117c	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.117e	85 06		sta $06				sta 	temp1
.1180	a5 05		lda $05				lda 	temp0+1
.1182	85 07		sta $07				sta 	temp1+1
.1184	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1186	4a		lsr a				lsr 	a
.1187	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1189	a2 04		ldx #$04			ldx 	#VarISize
.118b	90 04		bcc $1191			bcc 	_LVIsInteger
.118d	a9 23		lda #$23			lda 	#markerFloat
.118f	a2 06		ldx #$06			ldx 	#VarFSize
.1191					_LVIsInteger:
.1191					_LVWriteFrame:
.1191	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.1194	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1195	e8		inx				inx
.1196	e8		inx				inx
.1197	20 ea 20	jsr $20ea			jsr 	RSClaim 					; create the stack frame.
.119a	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.119c	a0 01		ldy #$01			ldy 	#1
.119e	91 78		sta ($78),y			sta 	(rsPointer),y
.11a0	c8		iny				iny
.11a1	a5 05		lda $05				lda 	temp0+1
.11a3	91 78		sta ($78),y			sta 	(rsPointer),y
.11a5	a0 00		ldy #$00			ldy 	#0
.11a7					_LVCopyData:
.11a7	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.11a9	c8		iny				iny 								; write allowing for the header bit.
.11aa	c8		iny				iny
.11ab	c8		iny				iny
.11ac	91 78		sta ($78),y			sta 	(rsPointer),y
.11ae	88		dey				dey
.11af	88		dey				dey
.11b0	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.11b3	d0 f2		bne $11a7			bne 	_LVCopyData
.11b5	68		pla				pla
.11b6	a8		tay				tay
.11b7	68		pla				pla
.11b8	aa		tax				tax
.11b9	60		rts				rts
.11ba					_LVSyntax:
.11ba	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.11bc	20 7d 21	jsr $217d		jsr	errorHandler
.11bf					RestoreLocals:
.11bf	a2 00		ldx #$00			ldx 	#0
.11c1	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.11c3	c9 40		cmp #$40			cmp	 	#64
.11c5	90 01		bcc $11c8			bcc 	_RLocal
.11c7	60		rts				rts
.11c8					_RLocal:
.11c8	8a		txa				txa
.11c9	48		pha				pha
.11ca	98		tya				tya
.11cb	48		pha				pha
.11cc	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.11ce	b1 78		lda ($78),y			lda 	(rsPointer),y
.11d0	85 04		sta $04				sta 	temp0
.11d2	c8		iny				iny
.11d3	b1 78		lda ($78),y			lda 	(rsPointer),y
.11d5	85 05		sta $05				sta 	temp0+1
.11d7	a0 00		ldy #$00			ldy 	#0 							; get type back.
.11d9	b1 78		lda ($78),y			lda 	(rsPointer),y
.11db	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.11dd	f0 28		beq $1207			beq 	_RString
.11df	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.11e1	c9 25		cmp #$25			cmp 	#markerInt
.11e3	f0 02		beq $11e7			beq 	_RIsInteger
.11e5	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.11e7					_RIsInteger:
.11e7	8a		txa				txa
.11e8	48		pha				pha
.11e9	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.11eb					_RCopyBack:
.11eb	b1 78		lda ($78),y			lda 	(rsPointer),y
.11ed	88		dey				dey
.11ee	88		dey				dey
.11ef	88		dey				dey
.11f0	91 04		sta ($04),y			sta 	(temp0),y
.11f2	c8		iny				iny
.11f3	c8		iny				iny
.11f4	c8		iny				iny
.11f5	c8		iny				iny
.11f6	ca		dex				dex
.11f7	d0 f2		bne $11eb			bne 	_RCopyBack
.11f9	68		pla				pla 								; get size add 3
.11fa	18		clc				clc
.11fb	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.11fd					_RRestoreAAndLoop:
.11fd	20 0c 21	jsr $210c			jsr 	RSFree
.1200	68		pla				pla
.1201	a8		tay				tay
.1202	68		pla				pla
.1203	aa		tax				tax
.1204	4c bf 11	jmp $11bf			jmp 	RestoreLocals 				; go see if there are any more locals.
.1207					_RString:
.1207	a2 00		ldx #$00			ldx 	#0
.1209	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.120b	b1 78		lda ($78),y			lda 	(rsPointer),y
.120d	95 48		sta $48,x			sta 	esInt0,x
.120f	c8		iny				iny
.1210	b1 78		lda ($78),y			lda 	(rsPointer),y
.1212	95 50		sta $50,x			sta 	esInt1,x
.1214	18		clc				clc
.1215	a5 78		lda $78				lda 	rsPointer
.1217	69 03		adc #$03			adc 	#3
.1219	95 49		sta $49,x			sta 	esInt0+1,x
.121b	a5 79		lda $79				lda 	rsPointer+1
.121d	69 00		adc #$00			adc 	#0
.121f	95 51		sta $51,x			sta 	esInt1+1,x
.1221	8a		txa				txa
.1222	a2 0a		ldx #$0a		ldx	#10
.1224	20 26 24	jsr $2426		jsr	stringHandler
.1227	a0 03		ldy #$03			ldy 	#3 							; get string length
.1229	b1 78		lda ($78),y			lda 	(rsPointer),y
.122b	18		clc				clc
.122c	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.122e	4c fd 11	jmp $11fd			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1231					Command_New:
.1231	20 04 14	jsr $1404			jsr 	ResetCodeAddress 			; point to first line
.1234	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1236	98		tya				tya
.1237	91 02		sta ($02),y			sta 	(codePtr),y
.1239	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.123c	4c c4 15	jmp $15c4			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.123f					Command_Poke:
.123f	a9 01		lda #$01			lda 	#1
.1241	d0 06		bne $1249			bne 	PokeGeneral
.1243					Command_Doke:
.1243	a9 02		lda #$02			lda 	#2
.1245	d0 02		bne $1249			bne 	PokeGeneral
.1247					Command_Loke:
.1247	a9 03		lda #$03			lda 	#3
.1249					PokeGeneral:
.1249	48		pha				pha 								; save size
.124a	20 50 1a	jsr $1a50			jsr 	EvaluateRootInteger 		; target address
.124d	20 cf 20	jsr $20cf			jsr	 	CheckComma
.1250	e8		inx				inx
.1251	20 52 1a	jsr $1a52			jsr 	EvaluateInteger 			; what value to POKE ?
.1254	ca		dex				dex
.1255	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; temp0 points to the target address
.1258	84 0c		sty $0c				sty 	tempShort 					; save Y
.125a	68		pla				pla 								; get copy type and dispatch
.125b	aa		tax				tax
.125c	ca		dex				dex
.125d	f0 14		beq $1273			beq 	_Poke1
.125f	ca		dex				dex
.1260	f0 0b		beq $126d			beq 	_Poke2
.1262	a0 03		ldy #$03			ldy 	#3
.1264	a5 61		lda $61				lda 	esInt3+1
.1266	91 04		sta ($04),y			sta 	(temp0),y
.1268	88		dey				dey
.1269	a5 59		lda $59				lda 	esInt2+1
.126b	91 04		sta ($04),y			sta 	(temp0),y
.126d					_Poke2:
.126d	a0 01		ldy #$01			ldy 	#1
.126f	a5 51		lda $51				lda 	esInt1+1
.1271	91 04		sta ($04),y			sta 	(temp0),y
.1273					_Poke1:
.1273	a0 00		ldy #$00			ldy 	#0
.1275	a5 49		lda $49				lda 	esInt0+1
.1277	91 04		sta ($04),y			sta 	(temp0),y
.1279	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.127b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.127c					Command_Print:
.127c	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.127e	8d f1 0a	sta $0af1			sta 	lastPrintToken
.1281	88		dey				dey
.1282					_PrintLoopSkip:
.1282	c8		iny				iny
.1283					_PrintLoop:
.1283	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1285	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1287	f0 5b		beq $12e4			beq 	_PrintExit
.1289	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.128b	f0 57		beq $12e4			beq 	_PrintExit
.128d	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.1290	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1292	f0 ee		beq $1282			beq 	_PrintLoopSkip
.1294	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.1296	f0 3c		beq $12d4			beq	 	_PrintNewLine
.1298	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.129a	f0 40		beq $12dc			beq 	_PrintTab
.129c	20 31 1a	jsr $1a31			jsr 	EvaluateRoot 				; evaluate something at the root
.129f	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.12a1	85 04		sta $04				sta 	temp0
.12a3	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.12a5	85 05		sta $05				sta 	1+(temp0)
.12a7	a5 40		lda $40				lda 	esType 						; get type
.12a9	f0 15		beq $12c0			beq		_PrintInteger
.12ab	4a		lsr a				lsr 	a 							; check for floating point
.12ac	b0 08		bcs $12b6			bcs 	_PrintFloat
.12ae					_PrintString:
.12ae	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.12b0	20 26 11	jsr $1126			jsr 	TOSToTemp0
.12b3	4c ce 12	jmp $12ce			jmp 	_PrintTemp0 				; print no leading space.
.12b6					_PrintFloat:
.12b6	a9 00		lda #$00			lda 	#0 							; stack level.
.12b8	a2 14		ldx #$14		ldx	#20
.12ba	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.12bd	4c c7 12	jmp $12c7			jmp 	_PrintSpaceTemp0
.12c0					_PrintInteger:
.12c0	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.12c2	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.12c4	20 a5 1f	jsr $1fa5			jsr 	MInt32ToString				; convert to text
.12c7					_PrintSpaceTemp0:
.12c7	a9 20		lda #$20			lda 	#32
.12c9	a2 04		ldx #$04		ldx	#4
.12cb	20 70 21	jsr $2170		jsr	deviceHandler
.12ce					_PrintTemp0:
.12ce	20 f5 12	jsr $12f5			jsr 	PrintString
.12d1	4c 83 12	jmp $1283			jmp 	_PrintLoop
.12d4					_PrintNewLine:
.12d4	a2 00		ldx #$00		ldx	#0
.12d6	20 70 21	jsr $2170		jsr	deviceHandler
.12d9	4c 82 12	jmp $1282			jmp 	_PrintLoopSkip
.12dc					_PrintTab:
.12dc	a2 06		ldx #$06		ldx	#6
.12de	20 70 21	jsr $2170		jsr	deviceHandler
.12e1	4c 82 12	jmp $1282			jmp 	_PrintLoopSkip
.12e4					_PrintExit:
.12e4	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.12e7	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.12e9	f0 09		beq $12f4			beq 	_PrintExit2
.12eb	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.12ed	f0 05		beq $12f4			beq 	_PrintExit2
.12ef	a2 00		ldx #$00		ldx	#0
.12f1	20 70 21	jsr $2170		jsr	deviceHandler
.12f4					_PrintExit2:
.12f4	60		rts				rts
.12f5					PrintString:
.12f5	8a		txa				txa
.12f6	48		pha				pha
.12f7	98		tya				tya
.12f8	48		pha				pha
.12f9	a0 00		ldy #$00			ldy 	#0							; get length
.12fb	b1 04		lda ($04),y			lda 	(temp0),y
.12fd	aa		tax				tax 								; into X
.12fe	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1300	f0 10		beq $1312			beq 	_PSExit
.1302	ca		dex				dex
.1303	8a		txa				txa
.1304	48		pha				pha
.1305	c8		iny				iny
.1306	b1 04		lda ($04),y			lda 	(temp0),y
.1308	a2 04		ldx #$04		ldx	#4
.130a	20 70 21	jsr $2170		jsr	deviceHandler
.130d	68		pla				pla
.130e	aa		tax				tax
.130f	4c fe 12	jmp $12fe			jmp 	_PSLoop
.1312					_PSExit:
.1312	68		pla				pla
.1313	a8		tay				tay
.1314	68		pla				pla
.1315	aa		tax				tax
.1316	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.1317					CallProc:
.1317	20 e7 14	jsr $14e7			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.131a	48		pha				pha 								; save length on stack
.131b	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.131d	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.131f	48		pha				pha
.1320	a5 04		lda $04				lda 	temp0
.1322	48		pha				pha
.1323	98		tya				tya 								; calculate Y + length
.1324	18		clc				clc
.1325	65 0c		adc $0c				adc 	tempShort
.1327	a8		tay				tay
.1328	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.132a					_CallProcEvalParams:
.132a	e8		inx				inx
.132b	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.132d	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.132f	f0 0b		beq $133c			beq 	_CPDoneParams
.1331	20 33 1a	jsr $1a33			jsr 	Evaluate 					; evaluate a parameter
.1334	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1336	c8		iny				iny
.1337	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1339	f0 ef		beq $132a			beq 	_CallProcEvalParams
.133b	88		dey				dey 								; undo consumption.
.133c					_CPDoneParams:
.133c	20 c2 20	jsr $20c2			jsr 	CheckRightParen 			; check closing parenthesis.
.133f	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.1342	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1344	a9 50		lda #$50			lda 	#markerPROC
.1346	20 ea 20	jsr $20ea			jsr 	RSClaim
.1349	a9 01		lda #$01			lda 	#1 							; store return address.
.134b	20 16 21	jsr $2116			jsr 	RSSavePosition
.134e	68		pla				pla 								; get the new code Ptr
.134f	85 02		sta $02				sta 	codePtr
.1351	68		pla				pla
.1352	85 03		sta $03				sta 	codePtr+1
.1354	68		pla				pla 								; length of name + 4 is the param start.
.1355	18		clc				clc
.1356	69 04		adc #$04			adc 	#4
.1358	a8		tay				tay
.1359	a2 ff		ldx #$ff			ldx 	#$FF
.135b					_CPLoadParameters:
.135b	e8		inx				inx 								; point to where the address should be loaded.
.135c	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.135f	f0 1e		beq $137f			beq 	_CPParamError
.1361	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1363	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; is it the right bracket
.1365	f0 0e		beq $1375			beq 	_CPParamComplete 			; done all the parameters
.1367	20 4d 11	jsr $114d			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.136a	20 c4 10	jsr $10c4			jsr 	WriteValue 					; copy the evaluated parameter into there.
.136d	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.136f	c8		iny				iny
.1370	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1372	f0 e7		beq $135b			beq 	_CPLoadParameters
.1374	88		dey				dey 								; no, unconsume and check for )
.1375					_CPParamComplete:
.1375	20 c2 20	jsr $20c2			jsr 	CheckRightParen 			; check )
.1378	e8		inx				inx 								; check right number of parameters
.1379	ec f2 0a	cpx $0af2			cpx 	paramCount
.137c	d0 01		bne $137f			bne 	_CPParamError
.137e	60		rts				rts
.137f					_CPParamError:
.137f	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1381	20 7d 21	jsr $217d		jsr	errorHandler
.1384					ReturnProc:
.1384	20 bf 11	jsr $11bf			jsr 	RestoreLocals 				; get the locals back.
.1387	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1389	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.138b	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.138d	f0 05		beq $1394			beq 	_isok
.138f	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1391	20 7d 21	jsr $217d		jsr	errorHandler
.1394					_isok:
.1394	a9 01		lda #$01			lda 	#1
.1396	20 29 21	jsr $2129			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1399	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.139b	20 0c 21	jsr $210c			jsr 	RSFree
.139e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.139f					Command_Rem:
.139f					Command_Rem2:
.139f	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.13a1	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.13a3	d0 06		bne $13ab			bne 	_CRNotString
.13a5	c8		iny				iny
.13a6	98		tya				tya
.13a7	38		sec				sec
.13a8	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.13aa	a8		tay				tay
.13ab					_CRNotString:
.13ab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.26b8					Command_Repeat:
.26b8	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.26ba	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.26bc	20 ea 20	jsr $20ea			jsr 	RSClaim
.26bf	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.26c1	20 16 21	jsr $2116			jsr 	RSSavePosition
.26c4	60		rts				rts
.26c5					Command_Until:
.26c5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26c7	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.26c9	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.26cb	f0 05		beq $26d2			beq 	_isok
.26cd	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.26cf	20 7d 21	jsr $217d		jsr	errorHandler
.26d2					_isok:
.26d2	20 50 1a	jsr $1a50			jsr 	EvaluateRootInteger 		; at the bottom.
.26d5	20 76 20	jsr $2076			jsr 	MInt32Zero					; check if TOS zero
.26d8	d0 06		bne $26e0			bne 	_CUExit
.26da	a9 01		lda #$01			lda 	#1
.26dc	20 29 21	jsr $2129			jsr 	RSLoadPosition 				; reload the position from offset 1.
.26df	60		rts				rts
.26e0					_CUExit:
.26e0	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.26e2	20 0c 21	jsr $210c			jsr 	RSFree
.26e5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.13ac					Command_Run:
.13ac	a2 ff		ldx #$ff			ldx 	#$FF
.13ae	9a		txs				txs
.13af	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.13b2	20 04 14	jsr $1404			jsr 	ResetCodeAddress 			; back to the start.
.13b5	a0 03		ldy #$03			ldy 	#3
.13b7					CRNextInstruction:
.13b7	64 7b		stz $7b				stz 	softMemAlloc+1
.13b9	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.13bb	10 1c		bpl $13d9			bpl 	_CRNotToken
.13bd	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.13bf	b0 0c		bcs $13cd			bcs 	_CRExecute
.13c1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.13c3	b0 4c		bcs $1411			bcs 	Unimplemented
.13c5	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.13c7	b0 04		bcs $13cd			bcs 	_CRExecute
.13c9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.13cb	b0 16		bcs $13e3			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.13cd					_CRExecute:
.13cd	c8		iny				iny 								; consume it.
.13ce	0a		asl a				asl 	a 							; double it, losing most significant bit.
.13cf	aa		tax				tax
.13d0	20 d6 13	jsr $13d6			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.13d3	4c b7 13	jmp $13b7			jmp 	CRNextInstruction
.13d6					_CRRunRoutine:
.13d6	7c 1b 14	jmp ($141b,x)			jmp 	(Group0Vectors,x)
.13d9					_CRNotToken:
.13d9	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.13db	b0 34		bcs $1411			bcs 	Unimplemented
.13dd					_CRDefaultLet:
.13dd	20 b1 10	jsr $10b1			jsr 	CommandLet 					; do the default, LET
.13e0	4c b7 13	jmp $13b7			jmp 	CRNextInstruction
.13e3					_CRCheckIndirect:
.13e3	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.13e5	f0 f6		beq $13dd			beq 	_CRDefaultLet
.13e7	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.13e9	f0 f2		beq $13dd			beq 	_CRDefaultLet
.13eb	d0 24		bne $1411			bne 	Unimplemented
.13ed					CommandShift1:
.13ed	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.13ef	10 20		bpl $1411			bpl 	Unimplemented 				; we have an error as this should not happen.
.13f1	0a		asl a				asl 	a 							; double into X
.13f2	aa		tax				tax
.13f3	c8		iny				iny 								; advance over it.
.13f4	20 fa 13	jsr $13fa			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.13f7	4c b7 13	jmp $13b7			jmp 	CRNextInstruction
.13fa					_RunIt:
.13fa	6c d3 14	jmp ($14d3)			jmp 	(Group1Vectors) 			; and do the code.
.13fd					CommandShift2:
.13fd	20 84 21	jsr $2184		jsr	extensionHandler
.1400	4c b7 13	jmp $13b7			jmp 	CRNextInstruction
.1403					CommandColon:
.1403	60		rts				rts
.1404					ResetCodeAddress:
.1404	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1407	85 02		sta $02				sta 	codePtr
.1409	ad c9 0a	lda $0ac9			lda 	basePage+1
.140c	85 03		sta $03				sta 	codePtr+1
.140e	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1410	60		rts				rts
.1411					Unimplemented:
.1411	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1413	20 7d 21	jsr $217d		jsr	errorHandler
.1416					TKErr01:
.1416					TKErr02:
.1416					TKErr03:
.1416					TKErr04:
.1416					TKErr05:
.1416					TKErr06:
.1416					TKErr07:
.1416					TKErr08:
.1416	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1418	20 7d 21	jsr $217d		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.141b					Group0Vectors:
>141b	c7 15					.word	AdvanceNextLine          ; $80 [[eol]]
>141d	ed 13					.word	CommandShift1            ; $81 [[sh1]]
>141f	fd 13					.word	CommandShift2            ; $82 [[sh2]]
>1421	11 14					.word	Unimplemented            ; $83 [[sh3]]
>1423	11 14					.word	Unimplemented            ; $84 [[fpc]]
>1425	16 14					.word	TKErr08                  ; $85 [[str]]
>1427	1a 17					.word	AndHandler               ; $86 and
>1429	07 17					.word	OrHandler                ; $87 or
>142b	f4 16					.word	XorHandler               ; $88 xor
>142d	3c 18					.word	CompareGreaterEq         ; $89 >=
>142f	46 18					.word	CompareLessEq            ; $8a <=
>1431	28 18					.word	CompareGreater           ; $8b >
>1433	1e 18					.word	CompareLess              ; $8c <
>1435	14 18					.word	CompareEquals            ; $8d =
>1437	32 18					.word	CompareNotEquals         ; $8e <>
>1439	85 16					.word	AddHandler               ; $8f +
>143b	a8 16					.word	SubHandler               ; $90 -
>143d	40 17					.word	ShrHandler               ; $91 >>
>143f	2d 17					.word	ShlHandler               ; $92 <<
>1441	bb 16					.word	MulHandler               ; $93 *
>1443	ce 16					.word	DivHandler               ; $94 /
>1445	e1 16					.word	ModHandler               ; $95 mod
>1447	79 17					.word	PowerHandler             ; $96 ^
>1449	53 17					.word	WordRefHandler           ; $97 !
>144b	66 17					.word	ByteRefHandler           ; $98 ?
>144d	b8 26					.word	Command_Repeat           ; $99 repeat
>144f	e6 26					.word	Command_While            ; $9a while
>1451	a9 25					.word	Command_FOR              ; $9b for
>1453	75 10					.word	CommandIf                ; $9c if
>1455	16 14					.word	TKErr04                  ; $9d defproc
>1457	c5 26					.word	Command_Until            ; $9e until
>1459	09 27					.word	Command_Wend             ; $9f wend
>145b	0a 26					.word	Command_NEXT             ; $a0 next
>145d	16 14					.word	TKErr06                  ; $a1 then
>145f	b0 10					.word	Command_ENDIF            ; $a2 endif
>1461	84 13					.word	ReturnProc               ; $a3 endproc
>1463	09 1a					.word	UnaryParenthesis         ; $a4 (
>1465	61 1b					.word	UnaryLen                 ; $a5 len(
>1467	a5 1b					.word	UnarySgn                 ; $a6 sgn(
>1469	8e 1b					.word	UnaryAbs                 ; $a7 abs(
>146b	fe 1b					.word	Unary_Random             ; $a8 random(
>146d	48 1c					.word	Unary_Page               ; $a9 page
>146f	4b 20					.word	MInt32True               ; $aa true
>1471	4f 20					.word	MInt32False              ; $ab false
>1473	13 1c					.word	Unary_Min                ; $ac min(
>1475	17 1c					.word	Unary_Max                ; $ad max(
>1477	fe 1c					.word	UnarySys                 ; $ae sys(
>1479	c1 1c					.word	UnaryTimer               ; $af timer(
>147b	de 1a					.word	EventFunction            ; $b0 event(
>147d	ea 1c					.word	UnaryGet                 ; $b1 get(
>147f	da 1c					.word	UnaryInkey               ; $b2 inkey(
>1481	95 1c					.word	UnaryAlloc               ; $b3 alloc(
>1483	26 1d					.word	ExecChr                  ; $b4 chr$(
>1485	3a 1d					.word	ExecLeft                 ; $b5 left$(
>1487	57 1d					.word	ExecMid                  ; $b6 mid$(
>1489	7f 1d					.word	ExecRight                ; $b7 right$(
>148b	56 18					.word	Event_Str                ; $b8 str$(
>148d	85 18					.word	UnaryVal                 ; $b9 val(
>148f	bc 1b					.word	UnaryPeek                ; $ba peek(
>1491	c2 1b					.word	UnaryDeek                ; $bb deek(
>1493	c8 1b					.word	UnaryLeek                ; $bc leek(
>1495	7f 1b					.word	UnaryAsc                 ; $bd asc(
>1497	73 1c					.word	UnaryIntToFloat          ; $be int(
>1499	86 1c					.word	UnaryFloatToInt          ; $bf float(
>149b	88 18					.word	UnaryIsVal               ; $c0 isval(
>149d	56 1c					.word	UnaryReference           ; $c1 @
>149f	6c 1c					.word	UnaryComplement          ; $c2 ~
>14a1	69 1c					.word	UnaryHexMarker           ; $c3 &
>14a3	16 14					.word	TKErr01                  ; $c4 )
>14a5	03 14					.word	CommandColon             ; $c5 :
>14a7	16 14					.word	TKErr02                  ; $c6 ,
>14a9	16 14					.word	TKErr03                  ; $c7 ;
>14ab	9f 13					.word	Command_Rem2             ; $c8 '
>14ad	16 14					.word	TKErr07                  ; $c9 to
>14af	16 14					.word	TKErr05                  ; $ca step
>14b1	17 13					.word	CallProc                 ; $cb proc
>14b3	2f 11					.word	CommandLocal             ; $cc local
>14b5	11 14					.word	Unimplemented            ; $cd dim
>14b7	9f 13					.word	Command_Rem              ; $ce rem
>14b9	b1 10					.word	CommandLet               ; $cf let
>14bb	11 14					.word	Unimplemented            ; $d0 input
>14bd	aa 10					.word	Command_ELSE             ; $d1 else
>14bf	38 16					.word	Command_VDU              ; $d2 vdu
>14c1	7c 12					.word	Command_Print            ; $d3 print
>14c3	06 16					.word	CommandGOTO              ; $d4 goto
>14c5	db 15					.word	CommandGOSUB             ; $d5 gosub
>14c7	ee 15					.word	CommandRETURN            ; $d6 return
>14c9	11 14					.word	Unimplemented            ; $d7 data
>14cb	1a 10					.word	Command_Assert           ; $d8 assert
>14cd	3f 12					.word	Command_Poke             ; $d9 poke
>14cf	43 12					.word	Command_Doke             ; $da doke
>14d1	47 12					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.14d3					Group1Vectors:
>14d3	28 10					.word	CommandClear             ; $86 clear
>14d5	11 14					.word	Unimplemented            ; $87 load
>14d7	11 14					.word	Unimplemented            ; $88 save
>14d9	11 14					.word	Unimplemented            ; $89 list
>14db	31 12					.word	Command_New              ; $8a new
>14dd	ac 13					.word	Command_Run              ; $8b run
>14df	11 14					.word	Unimplemented            ; $8c read
>14e1	11 14					.word	Unimplemented            ; $8d restore
>14e3	c4 15					.word	CommandEnd               ; $8e end
>14e5	bf 15					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af3					procList:
>0af3							.fill 	2		 					; terminated by name high.
.0af5					yInLine:
>0af5							.fill 	1
.14e7					FindProcedure:
.14e7	8c f5 0a	sty $0af5			sty 	yInLine
.14ea	20 a5 15	jsr $15a5			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.14ed	85 06		sta $06				sta 	temp1
.14ef	ad f3 0a	lda $0af3			lda		procList 					; put procList address in temp2
.14f2	85 08		sta $08				sta 	temp2
.14f4	ad f4 0a	lda $0af4			lda 	procList+1
.14f7	85 09		sta $09				sta 	temp2+1
.14f9	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.14fb					_FPLoop:
.14fb	b1 08		lda ($08),y			lda 	(temp2),y
.14fd	f0 4f		beq $154e			beq 	_FPError 					; if so, we don't know this procedure.
.14ff	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1501	c8		iny				iny
.1502	b1 08		lda ($08),y			lda 	(temp2),y
.1504	85 04		sta $04				sta 	temp0
.1506	c8		iny				iny
.1507	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1509	c5 06		cmp $06				cmp 	temp1
.150b	d0 2b		bne $1538			bne 	_FPNext 					; hash is different, go to next.
.150d	38		sec				sec
.150e	ad f5 0a	lda $0af5			lda 	yInLine 					; position in line must be at least 4
.1511	e9 04		sbc #$04			sbc 	#4
.1513	18		clc				clc
.1514	65 02		adc $02				adc 	codePtr
.1516	85 0a		sta $0a				sta 	temp3
.1518	a5 03		lda $03				lda 	codePtr+1
.151a	69 00		adc #$00			adc 	#0
.151c	85 0b		sta $0b				sta 	temp3+1
.151e	98		tya				tya
.151f	48		pha				pha
.1520	a0 04		ldy #$04			ldy 	#4
.1522					_FPCName:
.1522	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.1524	d1 04		cmp ($04),y			cmp 	(temp0),y
.1526	d0 0e		bne $1536			bne 	_FPpulYNext 				; if different go to next one.
.1528	c8		iny				iny
.1529	c9 3a		cmp #$3a			cmp 	#$3A
.152b	90 f5		bcc $1522			bcc 	_FPCName 					; compare the whole lot....
.152d	68		pla				pla 								; throw away the saved Y
.152e	98		tya				tya 								; length of name is Y-4
.152f	38		sec				sec
.1530	e9 04		sbc #$04			sbc 	#4
.1532	ac f5 0a	ldy $0af5			ldy 	yInLine  					; get the original Y back
.1535	60		rts				rts
.1536					_FPpulYNext:
.1536	68		pla				pla
.1537	a8		tay				tay
.1538					_FPNext:
.1538	c8		iny				iny 								; next procedure record.
.1539	10 c0		bpl $14fb			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.153b	98		tya				tya 								; subtract 128 from Y
.153c	38		sec				sec
.153d	e9 80		sbc #$80			sbc 	#128
.153f	a8		tay				tay
.1540	18		clc				clc 								; add 128 to temp2, so we can have more than
.1541	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.1543	69 80		adc #$80			adc 	#128
.1545	85 08		sta $08				sta 	temp2
.1547	90 b2		bcc $14fb			bcc 	_FPLoop
.1549	e6 09		inc $09				inc 	temp2+1
.154b	4c fb 14	jmp $14fb			jmp 	_FPLoop
.154e					_FPError:
.154e	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1550	20 7d 21	jsr $217d		jsr	errorHandler
.1553					ScanProc:
.1553	98		tya				tya
.1554	48		pha				pha
.1555	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.1557	8d f3 0a	sta $0af3			sta 	procList
.155a	a5 10		lda $10				lda 	lowMemory+1
.155c	8d f4 0a	sta $0af4			sta 	procList+1
.155f	20 04 14	jsr $1404			jsr 	ResetCodeAddress 			; back to the start.
.1562					_ScanLoop:
.1562	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1564	b1 02		lda ($02),y			lda 	(codePtr),y
.1566	f0 2a		beq $1592			beq 	_ScanExit
.1568	a0 03		ldy #$03			ldy 	#3							; get first token
.156a	b1 02		lda ($02),y			lda 	(codePtr),y
.156c	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.156e	d0 12		bne $1582			bne 	_ScanNext
.1570	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.1572	20 9a 15	jsr $159a			jsr 	_ScanWrite
.1575	a5 02		lda $02				lda 	codePtr
.1577	20 9a 15	jsr $159a			jsr 	_ScanWrite
.157a	a0 04		ldy #$04			ldy 	#4 							; start of name part
.157c	20 a5 15	jsr $15a5			jsr 	CalculateProcedureHash 		; calculate procedure hash
.157f	20 9a 15	jsr $159a			jsr 	_ScanWrite
.1582					_ScanNext:
.1582	18		clc				clc
.1583	a0 00		ldy #$00			ldy 	#0
.1585	b1 02		lda ($02),y			lda 	(codePtr),y
.1587	65 02		adc $02				adc 	codePtr
.1589	85 02		sta $02				sta 	codePtr
.158b	90 d5		bcc $1562			bcc 	_ScanLoop
.158d	e6 03		inc $03				inc 	codePtr+1
.158f	4c 62 15	jmp $1562			jmp 	_ScanLoop
.1592					_ScanExit:
.1592	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1594	20 9a 15	jsr $159a			jsr 	_ScanWrite
.1597	68		pla				pla
.1598	a8		tay				tay
.1599	60		rts				rts
.159a					_ScanWrite:
.159a	a0 00		ldy #$00			ldy 	#0
.159c	91 0f		sta ($0f),y			sta 	(lowMemory),y
.159e	e6 0f		inc $0f				inc 	lowMemory
.15a0	d0 02		bne $15a4			bne 	_SWNoCarry
.15a2	e6 10		inc $10				inc 	lowMemory+1
.15a4					_SWNoCarry:
.15a4	60		rts				rts
.15a5					CalculateProcedureHash:
.15a5	a9 00		lda #$00			lda 	#0 							; clear hash.
.15a7	85 04		sta $04				sta 	temp0
.15a9					_CPHLoop:
.15a9	18		clc				clc 								; add character and rotate and add carry back in
.15aa	b1 02		lda ($02),y			lda 	(codePtr),y
.15ac	65 04		adc $04				adc 	temp0
.15ae	6a		ror a				ror 	a
.15af	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.15b1	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.15b3	b1 02		lda ($02),y			lda 	(codePtr),y
.15b5	c8		iny				iny 								; advance incase we go round again.
.15b6	c9 3a		cmp #$3a			cmp 	#$3A
.15b8	90 ef		bcc $15a9			bcc 	_CPHLoop
.15ba	a5 04		lda $04				lda 	temp0
.15bc	a9 aa		lda #$aa			lda 	#$AA
.15be	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.15bf					CommandStop:
.15bf	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.15c1	20 7d 21	jsr $217d		jsr	errorHandler
.15c4					CommandEnd:
.15c4	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.15c7					AdvanceNextLine:
.15c7	a0 00		ldy #$00			ldy 	#0 							; get offset
.15c9	b1 02		lda ($02),y			lda 	(codePtr),y
.15cb	18		clc				clc 								; add to codePtr
.15cc	65 02		adc $02				adc 	codePtr
.15ce	85 02		sta $02				sta 	codePtr
.15d0	90 02		bcc $15d4			bcc 	_ANLNoCarry
.15d2	e6 03		inc $03				inc 	codePtr+1
.15d4					_ANLNoCarry:
.15d4	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.15d6	f0 ec		beq $15c4			beq 	CommandEnd 					; execute END
.15d8	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.15da	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.15db					CommandGOSUB:
.15db	20 50 1a	jsr $1a50			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.15de	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.15e0	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.15e2	20 ea 20	jsr $20ea			jsr 	RSClaim
.15e5	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.15e7	20 16 21	jsr $2116			jsr 	RSSavePosition
.15ea	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.15ec	f0 1b		beq $1609			beq 	GotoTOS 					; and do a GOTO there.
.15ee					CommandRETURN:
.15ee	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.15f0	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.15f2	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.15f4	f0 05		beq $15fb			beq 	_isok
.15f6	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.15f8	20 7d 21	jsr $217d		jsr	errorHandler
.15fb					_isok:
.15fb	a9 01		lda #$01			lda 	#1
.15fd	20 29 21	jsr $2129			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1600	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1602	20 0c 21	jsr $210c			jsr 	RSFree
.1605	60		rts				rts
.1606					CommandGOTO:
.1606	20 50 1a	jsr $1a50			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1609					GotoTOS:
.1609	20 04 14	jsr $1404			jsr 	ResetCodeAddress 			; simple search.
.160c					_GotoSearch:
.160c	a0 00		ldy #$00			ldy 	#0 							; get offset
.160e	b1 02		lda ($02),y			lda 	(codePtr),y
.1610	f0 21		beq $1633			beq 	_GotoError 					; not found.
.1612	c8		iny				iny									; check LSB match
.1613	b1 02		lda ($02),y			lda 	(codePtr),y
.1615	d5 48		cmp $48,x			cmp 	esInt0,x
.1617	d0 07		bne $1620			bne 	_GotoNext
.1619	c8		iny				iny
.161a	b1 02		lda ($02),y			lda 	(codePtr),y
.161c	d5 50		cmp $50,x			cmp 	esInt1,x
.161e	f0 10		beq $1630			beq 	_GotoFound
.1620					_GotoNext:
.1620	a0 00		ldy #$00			ldy 	#0 							; go next line
.1622	b1 02		lda ($02),y			lda 	(codePtr),y
.1624	18		clc				clc
.1625	65 02		adc $02				adc 	codePtr
.1627	85 02		sta $02				sta 	codePtr
.1629	90 e1		bcc $160c			bcc 	_GotoSearch
.162b	e6 03		inc $03				inc 	codePtr+1
.162d	4c 0c 16	jmp $160c			jmp 	_GotoSearch
.1630					_GotoFound:
.1630	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1632	60		rts				rts
.1633					_GotoError:
.1633	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1635	20 7d 21	jsr $217d		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.1638					Command_VDU:
.1638	20 50 1a	jsr $1a50			jsr 	EvaluateRootInteger 			; get integer at root.
.163b	a5 48		lda $48				lda 	esInt0
.163d	a2 04		ldx #$04		ldx	#4
.163f	20 70 21	jsr $2170		jsr	deviceHandler
.1642					_CVNext:
.1642	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.1644	c8		iny				iny
.1645	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.1647	f0 ef		beq $1638			beq 	Command_VDU
.1649	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.164b	d0 0a		bne $1657			bne 	_CVExit
.164d	a5 50		lda $50				lda 	esInt1
.164f	a2 04		ldx #$04		ldx	#4
.1651	20 70 21	jsr $2170		jsr	deviceHandler
.1654	4c 42 16	jmp $1642			jmp 	_CVNext
.1657	88		dey		_CVExit:dey
.1658	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.26e6					Command_While:
.26e6	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.26e8	a2 04		ldx #$04			ldx 	#4
.26ea	20 ea 20	jsr $20ea			jsr 	RSClaim 					; create on stack.
.26ed	88		dey				dey
.26ee	a9 01		lda #$01			lda 	#1
.26f0	20 16 21	jsr $2116			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.26f3	c8		iny				iny
.26f4	20 52 1a	jsr $1a52			jsr 	EvaluateInteger				; get the conditional
.26f7	20 76 20	jsr $2076			jsr 	MInt32Zero 	 				; if zero, skip forward.
.26fa	f0 01		beq $26fd			beq 	_CWFail
.26fc	60		rts				rts
.26fd					_CWFail:
.26fd	a9 04		lda #$04			lda 	#4
.26ff	20 0c 21	jsr $210c			jsr 	RSFree 						; close the just opened position.
.2702	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2704	aa		tax				tax
.2705	20 21 27	jsr $2721			jsr 	ScanForward
.2708	60		rts				rts
.2709					Command_Wend:
.2709	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.270b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.270d	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.270f	f0 05		beq $2716			beq 	_isok
.2711	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2713	20 7d 21	jsr $217d		jsr	errorHandler
.2716					_isok:
.2716	a9 01		lda #$01			lda 	#1
.2718	20 29 21	jsr $2129			jsr 	RSLoadPosition				; go back until true
.271b	a9 04		lda #$04			lda 	#4
.271d	20 0c 21	jsr $210c			jsr 	RSFree 						; close the loop
.2720	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1659					BinaryProcess:
.1659	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.165b	15 41		ora $41,x			ora 	esType+1,x
.165d	0a		asl a				asl 	a
.165e	30 0e		bmi $166e			bmi 	_BPStringType 				; if one is set, then string type.
.1660	18		clc				clc 								; return CC for integer
.1661	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1663	f0 08		beq $166d			beq 	_BPExit 					; if both integer then return with CC.
.1665	20 73 16	jsr $1673			jsr 	BPMakeBothFloat 			; make both float
.1668	a9 01		lda #$01			lda 	#$01 						; set result type to float
.166a	95 40		sta $40,x			sta 	esType,x
.166c	38		sec				sec 								; and return with carry set.
.166d					_BPExit:
.166d	60		rts				rts
.166e					_BPStringType:
.166e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1670	20 7d 21	jsr $217d		jsr	errorHandler
.1673					BPMakeBothFloat:
.1673	e8		inx				inx
.1674	20 78 16	jsr $1678			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1677	ca		dex				dex
.1678					BPMakeFloat:
.1678	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.167a	4a		lsr a				lsr 	a
.167b	b0 07		bcs $1684			bcs 	_BPIsFloat
.167d	8a		txa				txa
.167e	a2 1a		ldx #$1a		ldx	#26
.1680	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1683	aa		tax				tax
.1684					_BPIsFloat:
.1684	60		rts				rts
.1685					AddHandler:
.1685	20 d4 18	jsr $18d4			jsr 	DereferenceTwo 				; dereference top two on stack.
.1688	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.168a	35 41		and $41,x			and 	esType+1,x
.168c	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.168e	d0 10		bne $16a0			bne 	_AHStringConcat				; concatenate strings.
.1690	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.1693	b0 03		bcs $1698			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1695	4c 3a 1f	jmp $1f3a			jmp 	MInt32Add 							; else do it as integer.
.1698					_IsFPOperation:
.1698	8a		txa				txa 								; call the relevant fp routine
.1699	a2 02		ldx #$02		ldx	#2
.169b	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.169e	aa		tax				tax
.169f	60		rts				rts
.16a0					_AHStringConcat:
.16a0	8a		txa				txa
.16a1	a2 04		ldx #$04		ldx	#4
.16a3	20 26 24	jsr $2426		jsr	stringHandler
.16a6	aa		tax				tax
.16a7	60		rts				rts
.16a8					SubHandler:
.16a8	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.16ab	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.16ae	b0 03		bcs $16b3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16b0	4c 54 1f	jmp $1f54			jmp 	MInt32Sub 							; else do it as integer.
.16b3					_IsFPOperation:
.16b3	8a		txa				txa 								; call the relevant fp routine
.16b4	a2 10		ldx #$10		ldx	#16
.16b6	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.16b9	aa		tax				tax
.16ba	60		rts				rts
.16bb					MulHandler:
.16bb	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.16be	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.16c1	b0 03		bcs $16c6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16c3	4c 6e 1f	jmp $1f6e			jmp 	MInt32Multiply 							; else do it as integer.
.16c6					_IsFPOperation:
.16c6	8a		txa				txa 								; call the relevant fp routine
.16c7	a2 0a		ldx #$0a		ldx	#10
.16c9	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.16cc	aa		tax				tax
.16cd	60		rts				rts
.16ce					DivHandler:
.16ce	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.16d1	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.16d4	b0 03		bcs $16d9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16d6	4c 32 1e	jmp $1e32			jmp 	MInt32SDivide 							; else do it as integer.
.16d9					_IsFPOperation:
.16d9	8a		txa				txa 								; call the relevant fp routine
.16da	a2 06		ldx #$06		ldx	#6
.16dc	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.16df	aa		tax				tax
.16e0	60		rts				rts
.16e1					ModHandler:
.16e1	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.16e4	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.16e7	b0 03		bcs $16ec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16e9	4c b0 1e	jmp $1eb0			jmp 	MInt32Modulus 							; else do it as integer.
.16ec					_IsFPOperation:
.16ec	8a		txa				txa 								; call the relevant fp routine
.16ed	a2 08		ldx #$08		ldx	#8
.16ef	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.16f2	aa		tax				tax
.16f3	60		rts				rts
.16f4					XorHandler:
.16f4	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.16f7	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.16fa	b0 03		bcs $16ff			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16fc	4c e4 1d	jmp $1de4			jmp 	MInt32Xor 							; else do it as integer.
.16ff					_IsFPOperation:
.16ff	8a		txa				txa 								; call the relevant fp routine
.1700	a2 08		ldx #$08		ldx	#8
.1702	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1705	aa		tax				tax
.1706	60		rts				rts
.1707					OrHandler:
.1707	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.170a	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.170d	b0 03		bcs $1712			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.170f	4c cb 1d	jmp $1dcb			jmp 	MInt32Or 							; else do it as integer.
.1712					_IsFPOperation:
.1712	8a		txa				txa 								; call the relevant fp routine
.1713	a2 08		ldx #$08		ldx	#8
.1715	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1718	aa		tax				tax
.1719	60		rts				rts
.171a					AndHandler:
.171a	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.171d	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.1720	b0 03		bcs $1725			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1722	4c b2 1d	jmp $1db2			jmp 	MInt32And 							; else do it as integer.
.1725					_IsFPOperation:
.1725	8a		txa				txa 								; call the relevant fp routine
.1726	a2 08		ldx #$08		ldx	#8
.1728	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.172b	aa		tax				tax
.172c	60		rts				rts
.172d					ShlHandler:
.172d	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.1730	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.1733	b0 03		bcs $1738			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1735	4c ae 17	jmp $17ae			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.1738					_IsFPOperation:
.1738	8a		txa				txa 								; call the relevant fp routine
.1739	a2 08		ldx #$08		ldx	#8
.173b	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.173e	aa		tax				tax
.173f	60		rts				rts
.1740					ShrHandler:
.1740	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.1743	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.1746	b0 03		bcs $174b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1748	4c b1 17	jmp $17b1			jmp 	MInt32ShiftRightX 							; else do it as integer.
.174b					_IsFPOperation:
.174b	8a		txa				txa 								; call the relevant fp routine
.174c	a2 08		ldx #$08		ldx	#8
.174e	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1751	aa		tax				tax
.1752	60		rts				rts
.1753					WordRefHandler:
.1753	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.1756	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.1759	b0 03		bcs $175e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.175b	4c a0 17	jmp $17a0			jmp 	MInt32WordIndirect 							; else do it as integer.
.175e					_IsFPOperation:
.175e	8a		txa				txa 								; call the relevant fp routine
.175f	a2 08		ldx #$08		ldx	#8
.1761	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1764	aa		tax				tax
.1765	60		rts				rts
.1766					ByteRefHandler:
.1766	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.1769	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.176c	b0 03		bcs $1771			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.176e	4c a4 17	jmp $17a4			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1771					_IsFPOperation:
.1771	8a		txa				txa 								; call the relevant fp routine
.1772	a2 08		ldx #$08		ldx	#8
.1774	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1777	aa		tax				tax
.1778	60		rts				rts
.1779					PowerHandler:
.1779	20 d4 18	jsr $18d4			jsr 	DereferenceTwo
.177c	20 59 16	jsr $1659			jsr 	BinaryProcess 				; check to see if either is float
.177f	b0 03		bcs $1784			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1781	4c 8c 17	jmp $178c			jmp 	PowerInteger 							; else do it as integer.
.1784					_IsFPOperation:
.1784	8a		txa				txa 								; call the relevant fp routine
.1785	a2 16		ldx #$16		ldx	#22
.1787	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.178a	aa		tax				tax
.178b	60		rts				rts
.178c					PowerInteger:
.178c	20 73 16	jsr $1673			jsr 	BPMakeBothFloat				; make them float.
.178f	8a		txa				txa
.1790	a2 16		ldx #$16		ldx	#22
.1792	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1795	a2 12		ldx #$12		ldx	#18
.1797	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.179a	aa		tax				tax
.179b	a9 00		lda #$00			lda 	#0 							; make type integer
.179d	95 40		sta $40,x			sta 	esType,x
.179f	60		rts				rts
.17a0					Mint32WordIndirect:
.17a0	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.17a2	d0 02		bne $17a6			bne 	Min32Indirect
.17a4					Mint32ByteIndirect:
.17a4	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.17a6					Min32Indirect:
.17a6	48		pha				pha 								; save the indirection
.17a7	20 3a 1f	jsr $1f3a			jsr 	MInt32Add 					; add a!b a?b
.17aa	68		pla				pla 								; and set the type to reference.
.17ab	95 40		sta $40,x			sta 	esType,x
.17ad	60		rts				rts
.17ae					Mint32ShiftLeftX:
.17ae	18		clc				clc
.17af	90 01		bcc $17b2			bcc 	Mint32Shift
.17b1					Mint32ShiftRightX:
.17b1	38		sec				sec
.17b2					Mint32Shift:
.17b2	08		php				php 								; save carry flag on stack.
.17b3	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.17b5	15 59		ora $59,x			ora 	esInt2+1,x
.17b7	15 61		ora $61,x			ora 	esInt3+1,x
.17b9	d0 1e		bne $17d9			bne 	_MShiftZero
.17bb	b5 49		lda $49,x			lda 	esInt0+1,x
.17bd	c9 20		cmp #$20			cmp 	#32
.17bf	b0 18		bcs $17d9			bcs 	_MShiftZero
.17c1					_MShiftLoop:
.17c1	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.17c3	f0 12		beq $17d7			beq 	_MShiftExit
.17c5	d6 49		dec $49,x			dec 	esInt0+1,x
.17c7	28		plp				plp 								; restore and save carry
.17c8	08		php				php
.17c9	90 06		bcc $17d1			bcc 	_MShiftLeft
.17cb	20 6d 20	jsr $206d			jsr 	Mint32ShiftRight
.17ce	4c c1 17	jmp $17c1			jmp 	_MShiftLoop
.17d1					_MShiftLeft:
.17d1	20 64 20	jsr $2064			jsr 	Mint32ShiftLeft
.17d4	4c c1 17	jmp $17c1			jmp 	_MShiftLoop
.17d7					_MShiftExit:
.17d7	28		plp				plp	 								; throw saved carry and exit
.17d8	60		rts				rts
.17d9					_MShiftZero:
.17d9	4c 4f 20	jmp $204f			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.17dc					PerformComparison:
.17dc	20 d4 18	jsr $18d4			jsr 	DereferenceTwo 				; make both values.
.17df	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.17e1	35 41		and $41,x			and 	esType+1,x
.17e3	0a		asl a				asl 	a
.17e4	30 1d		bmi $1803			bmi 	_PCIsString
.17e6	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.17e8	15 41		ora $41,x			ora 	esType+1,x
.17ea	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.17eb	30 22		bmi $180f			bmi 	_PCError
.17ed	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.17ef	f0 0f		beq $1800			beq 	_PCIsInteger 				; if not two integers
.17f1	20 73 16	jsr $1673			jsr 	BPMakeBothFloat 			; make both float
.17f4	8a		txa				txa
.17f5	a2 04		ldx #$04		ldx	#4
.17f7	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.17fa	86 0c		stx $0c				stx 	tempShort 					; save result
.17fc	aa		tax				tax
.17fd	a5 0c		lda $0c				lda 	tempShort
.17ff	60		rts				rts
.1800					_PCIsInteger:
.1800	4c fd 1d	jmp $1dfd			jmp 	MInt32Compare
.1803					_PCIsString:
.1803	8a		txa				txa 								; A has SP
.1804	a2 06		ldx #$06		ldx	#6
.1806	20 26 24	jsr $2426		jsr	stringHandler
.1809	86 0c		stx $0c				stx 	tempShort 					; save result
.180b	aa		tax				tax 								; put SP back in X and get result.
.180c	a5 0c		lda $0c				lda 	tempShort
.180e	60		rts				rts
.180f					_PCError:
.180f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1811	20 7d 21	jsr $217d		jsr	errorHandler
.1814					CompareEquals:
.1814	20 dc 17	jsr $17dc			jsr 	PerformComparison
.1817	c9 00		cmp #$00			cmp 	#$00
.1819	f0 35		beq $1850			beq  	CompareTrue
.181b	4c 53 18	jmp $1853			jmp 	CompareFalse
.181e					CompareLess:
.181e	20 dc 17	jsr $17dc			jsr 	PerformComparison
.1821	c9 ff		cmp #$ff			cmp 	#$FF
.1823	f0 2b		beq $1850			beq  	CompareTrue
.1825	4c 53 18	jmp $1853			jmp 	CompareFalse
.1828					CompareGreater:
.1828	20 dc 17	jsr $17dc			jsr 	PerformComparison
.182b	c9 01		cmp #$01			cmp 	#$01
.182d	f0 21		beq $1850			beq  	CompareTrue
.182f	4c 53 18	jmp $1853			jmp 	CompareFalse
.1832					CompareNotEquals:
.1832	20 dc 17	jsr $17dc			jsr 	PerformComparison
.1835	c9 00		cmp #$00			cmp 	#$00
.1837	d0 17		bne $1850			bne  	CompareTrue
.1839	4c 53 18	jmp $1853			jmp 	CompareFalse
.183c					CompareGreaterEq:
.183c	20 dc 17	jsr $17dc			jsr 	PerformComparison
.183f	c9 ff		cmp #$ff			cmp 	#$FF
.1841	d0 0d		bne $1850			bne  	CompareTrue
.1843	4c 53 18	jmp $1853			jmp 	CompareFalse
.1846					CompareLessEq:
.1846	20 dc 17	jsr $17dc			jsr 	PerformComparison
.1849	c9 01		cmp #$01			cmp 	#$01
.184b	d0 03		bne $1850			bne  	CompareTrue
.184d	4c 53 18	jmp $1853			jmp 	CompareFalse
.1850					CompareTrue:
.1850	4c 4b 20	jmp $204b			jmp 	MInt32True
.1853					CompareFalse:
.1853	4c 4f 20	jmp $204f			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.1856					Event_Str:
.1856	20 3c 1a	jsr $1a3c			jsr 	EvaluateNumeric 			; get a number.
.1859	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.185b	d0 13		bne $1870			bne 	_ESFloat
.185d	20 b3 18	jsr $18b3			jsr 	ConvertGetBase
.1860	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1862	85 04		sta $04				sta 	temp0
.1864	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1866	85 05		sta $05				sta 	1+(temp0)
.1868	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.186a	20 a5 1f	jsr $1fa5			jsr 	MInt32ToString 				; convert to string.
.186d	4c 7d 18	jmp $187d			jmp 	_ESCloneExit 				; clone and exit.
.1870					_ESFloat:
.1870	20 c2 20	jsr $20c2			jsr 	CheckRightParen 			; check closing )
.1873	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1876	8a		txa				txa
.1877	a2 14		ldx #$14		ldx	#20
.1879	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.187c	aa		tax				tax
.187d					_ESCloneExit:
.187d	8a		txa				txa
.187e	a2 02		ldx #$02		ldx	#2
.1880	20 26 24	jsr $2426		jsr	stringHandler
.1883	aa		tax				tax
.1884	60		rts				rts
.1885					UnaryVal:
.1885	38		sec				sec
.1886	b0 01		bcs $1889			bcs 	ValueMain
.1888					UnaryIsVal:
.1888	18		clc				clc
.1889					ValueMain:
.1889	08		php				php 								; save results (CS is value, CC is validation)
.188a	20 47 1a	jsr $1a47			jsr 	EvaluateString
.188d	20 b3 18	jsr $18b3			jsr 	ConvertGetBase 				; get base, if any.
.1890	98		tya				tya
.1891	48		pha				pha
.1892	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1895	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1897	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1899	20 c4 1e	jsr $1ec4			jsr 	MInt32FromString 			; convert it back from a string.
.189c	b0 0c		bcs $18aa			bcs 	_VMSuccess 					; successfully converted.
.189e	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.18a0	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.18a2	f0 00		beq $18a4			beq 	_VMFailed 	 				; so we failed.
.18a4					_VMFailed:
.18a4	68		pla				pla
.18a5	a8		tay				tay
.18a6	28		plp				plp
.18a7	4c 4f 20	jmp $204f			jmp 	MInt32False 				; return 0 whatever.
.18aa					_VMSuccess:
.18aa	68		pla				pla
.18ab	a8		tay				tay
.18ac	28		plp				plp 								; if CS the it was val() so we want the value.
.18ad	b0 03		bcs $18b2			bcs 	_VMExit
.18af	4c 4b 20	jmp $204b			jmp 	MInt32True 					; otherwise return true as successful.
.18b2					_VMExit:
.18b2	60		rts				rts
.18b3					ConvertGetBase:
.18b3	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.18b5	95 49		sta $49,x			sta 	esInt0+1,x
.18b7	b1 02		lda ($02),y			lda 	(codePtr),y
.18b9	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.18bb	d0 0e		bne $18cb			bne 	_CGBDone
.18bd	e8		inx				inx 								; next level
.18be	c8		iny				iny 								; skip comma.
.18bf	20 5a 1a	jsr $1a5a			jsr 	EvaluateSmallInteger		; evaluate the base.
.18c2	ca		dex				dex
.18c3	c9 02		cmp #$02			cmp 	#2
.18c5	90 08		bcc $18cf			bcc 	_CGBValue
.18c7	c9 11		cmp #$11			cmp 	#17
.18c9	b0 04		bcs $18cf			bcs 	_CGBValue
.18cb					_CGBDone:
.18cb	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.18ce	60		rts				rts
.18cf					_CGBValue:
.18cf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18d1	20 7d 21	jsr $217d		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.18d4					DereferenceTwo:
.18d4	e8		inx				inx
.18d5	20 d9 18	jsr $18d9			jsr 	DereferenceOne
.18d8	ca		dex				dex
.18d9					DereferenceOne:
.18d9	b5 40		lda $40,x			lda 	esType,x
.18db	10 3d		bpl $191a			bpl 	_DRNotReference 			; is it a reference ?
.18dd	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.18de	b0 3b		bcs $191b			bcs 	_DRFloatDeReference
.18e0	98		tya				tya
.18e1	48		pha				pha
.18e2	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.18e4	85 04		sta $04				sta 	temp0
.18e6	b5 50		lda $50,x			lda 	esInt1,x
.18e8	85 05		sta $05				sta 	temp0+1
.18ea	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.18ec	95 50		sta $50,x			sta 	esInt1,x
.18ee	95 58		sta $58,x			sta 	esInt2,x
.18f0	95 60		sta $60,x			sta 	esInt3,x
.18f2	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.18f4	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.18f6	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.18f7	30 0d		bmi $1906			bmi 	_DeRefString 				; string, 2 bytes only
.18f9	d0 11		bne $190c			bne 	_DeRefByte 					; byte 1 byte only
.18fb					_DeRefLong:
.18fb	a0 03		ldy #$03			ldy 	#3
.18fd	b1 04		lda ($04),y			lda 	(temp0),y
.18ff	95 60		sta $60,x			sta 	esInt3,x
.1901	88		dey				dey
.1902	b1 04		lda ($04),y			lda 	(temp0),y
.1904	95 58		sta $58,x			sta 	esInt2,x
.1906					_DeRefString:
.1906	a0 01		ldy #$01			ldy 	#1
.1908	b1 04		lda ($04),y			lda 	(temp0),y
.190a	95 50		sta $50,x			sta 	esInt1,x
.190c					_DeRefByte:
.190c	a0 00		ldy #$00			ldy 	#0
.190e	b1 04		lda ($04),y			lda 	(temp0),y
.1910	95 48		sta $48,x			sta 	esInt0,x
.1912	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1914	29 40		and #$40			and 	#$40
.1916	95 40		sta $40,x			sta 	esType,x
.1918	68		pla				pla
.1919	a8		tay				tay
.191a					_DRNotReference
.191a	60		rts				rts
.191b					_DRFloatDereference:
.191b	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; address to deref in temp0
.191e	8a		txa				txa
.191f	a2 1c		ldx #$1c		ldx	#28
.1921	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1924	aa		tax				tax
.1925	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1927	95 40		sta $40,x			sta 	esType,x
.1929	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.192a					EvaluateLevel:
.192a	48		pha				pha 								; save precedence level.
.192b	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.192d	95 48		sta $48,x			sta 	esInt0,x
.192f	95 50		sta $50,x			sta 	esInt1,x
.1931	95 58		sta $58,x			sta 	esInt2,x
.1933	95 60		sta $60,x			sta 	esInt3,x
.1935	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1937	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1939	30 21		bmi $195c			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.193b	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.193c	30 0a		bmi $1948			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.193e	8a		txa				txa 								; stack level in X
.193f	a2 00		ldx #$00		ldx	#0
.1941	20 a2 25	jsr $25a2		jsr	variableHandler
.1944	aa		tax				tax
.1945	4c 85 19	jmp $1985			jmp		_ELHasTerm
.1948					_ELIsConstant:
.1948	4a		lsr a				lsr 	a 							; get the value back
.1949	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.194b	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.194d					_ELCheckNext:
.194d	c8		iny				iny 								; look at next
.194e	b1 02		lda ($02),y			lda 	(codePtr),y
.1950	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1952	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1954	b0 2f		bcs $1985			bcs 	_ELHasTerm 					; done getting the constant.
.1956	20 92 1a	jsr $1a92			jsr 	ELShiftByteIn 				; shift byte into position.
.1959	4c 4d 19	jmp $194d			jmp 	_ELCheckNext
.195c					_ELIsToken:
.195c	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.195e	f0 0f		beq $196f			beq 	_ELIsString
.1960	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1962	d0 5f		bne $19c3			bne 	_ELCheckUnary
.1964	8a		txa				txa 								; put X into A
.1965	c8		iny				iny 								; skip over the float marker
.1966	a2 18		ldx #$18		ldx	#24
.1968	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.196b	aa		tax				tax 								; restore X
.196c	4c 85 19	jmp $1985			jmp 	_ELHasTerm
.196f					_ELIsString:
.196f	98		tya				tya 								; address of string is codePtr+y+1
.1970	38		sec				sec
.1971	65 02		adc $02				adc 	codePtr
.1973	95 48		sta $48,x			sta 	esInt0,x
.1975	a5 03		lda $03				lda 	codePtr+1
.1977	69 00		adc #$00			adc 	#0
.1979	95 50		sta $50,x			sta 	esInt1,x
.197b	a9 40		lda #$40			lda 	#$40 						; set type to string value
.197d	95 40		sta $40,x			sta 	esType,x
.197f	c8		iny				iny 								; skip over string.
.1980	98		tya				tya
.1981	38		sec				sec									; +1 for the length itself.
.1982	71 02		adc ($02),y			adc 	(codePtr),y
.1984	a8		tay				tay 								; and fall through to term loop code.
.1985					_ELHasTerm:
.1985	b1 02		lda ($02),y			lda 	(codePtr),y
.1987	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1989	90 04		bcc $198f			bcc 	_ELPopExit
.198b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.198d	90 02		bcc $1991			bcc 	_ELHasBinaryTerm
.198f					_ELPopExit:
.198f	68		pla				pla
.1990					_ELExit:
.1990	60		rts				rts
.1991					_ELHasBinaryTerm:
.1991	84 0c		sty $0c				sty 	tempShort 					; save position
.1993	a8		tay				tay 								; use token as an index and get the precedence.
.1994	b9 3a 1a	lda $1a3a,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1997	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1999	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.199b	68		pla				pla 								; restore current level.
.199c	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.199e	b0 f0		bcs $1990			bcs 	_ELExit
.19a0	48		pha				pha 								; save current level back on the stack.
.19a1	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.19a3	48		pha				pha
.19a4	c8		iny				iny
.19a5	e8		inx				inx 								; calculate the RHS at the operator precedence.
.19a6	a5 0c		lda $0c				lda 	tempShort
.19a8	20 2a 19	jsr $192a			jsr 	EvaluateLevel
.19ab	ca		dex				dex
.19ac	68		pla				pla 								; get the operator back out.
.19ad					_ELExecuteA:
.19ad	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.19af	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.19b0	aa		tax				tax
.19b1	bd 1b 14	lda $141b,x			lda 	Group0Vectors,x
.19b4	85 04		sta $04				sta 	temp0
.19b6	bd 1c 14	lda $141c,x			lda 	Group0Vectors+1,x
.19b9	85 05		sta $05				sta 	temp0+1
.19bb	a6 0c		ldx $0c				ldx 	tempShort
.19bd	20 06 1a	jsr $1a06			jsr 	_ELCallTemp0
.19c0	4c 85 19	jmp $1985			jmp 	_ELHasTerm 					; and loop back round.
.19c3					_ELCheckUnary:
.19c3	c8		iny				iny 								; skip over token.
.19c4	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.19c6	f0 15		beq $19dd			beq 	_ELMinus
.19c8	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.19ca	f0 28		beq $19f4			beq 	_ELIndirect
.19cc	c9 98		cmp #$98			cmp 	#TKW_QMARK
.19ce	f0 24		beq $19f4			beq 	_ELIndirect
.19d0	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.19d2	90 04		bcc $19d8			bcc 	_ELUSyntax
.19d4	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.19d6	90 d5		bcc $19ad			bcc 	_ELExecuteA 				; if so do that token.
.19d8					_ELUSyntax:
.19d8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.19da	20 7d 21	jsr $217d		jsr	errorHandler
.19dd					_ELMinus:
.19dd	20 1b 1a	jsr $1a1b			jsr 	EvaluateNumericTerm 		; get a number to negate.
.19e0	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.19e2	f0 0a		beq $19ee			beq 	_ELMinusInteger
.19e4	8a		txa				txa
.19e5	a2 0c		ldx #$0c		ldx	#12
.19e7	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.19ea	aa		tax				tax
.19eb	4c 85 19	jmp $1985			jmp 	_ELHasTerm
.19ee					_ELMinusInteger:
.19ee	20 09 20	jsr $2009			jsr 	MInt32Negate 				; do int negate
.19f1	4c 85 19	jmp $1985			jmp 	_ELHasTerm
.19f4					_ELIndirect:
.19f4	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.19f5	20 24 1a	jsr $1a24			jsr 	EvaluateIntegerTerm 		; integer address
.19f8	68		pla				pla
.19f9	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.19fb	f0 02		beq $19ff			beq 	_ELHaveModifier
.19fd	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.19ff					_ELHaveModifier:
.19ff	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1a01	95 40		sta $40,x			sta 	esType,x
.1a03	4c 85 19	jmp $1985			jmp 	_ELHasTerm
.1a06					_ELCallTemp0:
.1a06	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1a09					UnaryParenthesis:
.1a09	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1a0b	20 2a 19	jsr $192a			jsr 	EvaluateLevel
.1a0e	20 c2 20	jsr $20c2			jsr 	CheckRightParen 			; check for )
.1a11	60		rts				rts
.1a12					EvaluateTerm:
.1a12	a9 0f		lda #$0f			lda 	#15
.1a14	20 2a 19	jsr $192a			jsr 	EvaluateLevel
.1a17	20 d9 18	jsr $18d9			jsr 	DereferenceOne
.1a1a	60		rts				rts
.1a1b					EvaluateNumericTerm:
.1a1b	20 12 1a	jsr $1a12			jsr 	EvaluateTerm
.1a1e	b5 40		lda $40,x			lda 	esType,x
.1a20	0a		asl a				asl 	a 							; see if it's a string.
.1a21	30 09		bmi $1a2c			bmi 	ENTType
.1a23	60		rts				rts
.1a24					EvaluateIntegerTerm:
.1a24	20 12 1a	jsr $1a12			jsr 	EvaluateTerm
.1a27	b5 40		lda $40,x			lda 	esType,x
.1a29	d0 01		bne $1a2c			bne 	ENTType
.1a2b	60		rts				rts
.1a2c					ENTType:
.1a2c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a2e	20 7d 21	jsr $217d		jsr	errorHandler
.1a31					EvaluateRoot:
.1a31	a2 00		ldx #$00			ldx 	#0
.1a33					Evaluate:
.1a33	a9 00		lda #$00			lda 	#0
.1a35	20 2a 19	jsr $192a			jsr 	EvaluateLevel
.1a38	20 d9 18	jsr $18d9			jsr 	DereferenceOne
.1a3b	60		rts				rts
.1a3c					EvaluateNumeric:
.1a3c	20 33 1a	jsr $1a33			jsr 	Evaluate
.1a3f	b5 40		lda $40,x			lda 	esType,x
.1a41	0a		asl a				asl 	a 							; see if it's a string.
.1a42	30 e8		bmi $1a2c			bmi 	ENTType
.1a44	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1a45	4a		lsr a				lsr 	a
.1a46	60		rts				rts
.1a47					EvaluateString:
.1a47	20 33 1a	jsr $1a33			jsr 	Evaluate
.1a4a	b5 40		lda $40,x			lda 	esType,x
.1a4c	0a		asl a				asl 	a 							; see if it's a string.
.1a4d	10 dd		bpl $1a2c			bpl 	ENTType
.1a4f	60		rts				rts
.1a50					EvaluateRootInteger:
.1a50	a2 00		ldx #$00			ldx 	#0
.1a52					EvaluateInteger:
.1a52	20 33 1a	jsr $1a33			jsr 	Evaluate
.1a55	b5 40		lda $40,x			lda 	esType,x
.1a57	d0 d3		bne $1a2c			bne 	ENTType
.1a59	60		rts				rts
.1a5a					EvaluateSmallInteger:
.1a5a	20 52 1a	jsr $1a52			jsr 	EvaluateInteger
.1a5d	b5 50		lda $50,x			lda 	esInt1,x
.1a5f	15 58		ora $58,x			ora 	esInt2,x
.1a61	15 60		ora $60,x			ora 	esInt3,x
.1a63	d0 03		bne $1a68			bne 	_ESIValue
.1a65	b5 48		lda $48,x			lda 	esInt0,x
.1a67	60		rts				rts
.1a68					_ESIValue:
.1a68	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a6a	20 7d 21	jsr $217d		jsr	errorHandler
.1a6d					LinkEvaluate:
.1a6d	aa		tax				tax
.1a6e	20 33 1a	jsr $1a33			jsr 	Evaluate
.1a71	8a		txa				txa
.1a72	60		rts				rts
.1a73					LinkEvaluateInteger:
.1a73	aa		tax				tax
.1a74	20 52 1a	jsr $1a52			jsr 	EvaluateInteger
.1a77	8a		txa				txa
.1a78	60		rts				rts
.1a79					LinkEvaluateSmallInt:
.1a79	aa		tax				tax
.1a7a	20 5a 1a	jsr $1a5a			jsr 	EvaluateSmallInteger
.1a7d	8a		txa				txa
.1a7e	60		rts				rts
.1a7f					EvaluateReference:
.1a7f	ad d1 1a	lda $1ad1			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1a82	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1a83	e9 01		sbc #$01			sbc 	#1
.1a85	20 2a 19	jsr $192a			jsr 	EvaluateLevel
.1a88	b5 40		lda $40,x			lda 	esType,x
.1a8a	10 01		bpl $1a8d			bpl 	_ERFail
.1a8c	60		rts				rts
.1a8d					_ERFail:
.1a8d	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1a8f	20 7d 21	jsr $217d		jsr	errorHandler
.1a92					ELShiftByteIn:
.1a92	48		pha				pha 								; save bits to shift in.
.1a93	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1a95	48		pha				pha
.1a96	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1a98	95 60		sta $60,x			sta 	esInt3,x
.1a9a	b5 50		lda $50,x			lda 	esInt1,x
.1a9c	95 58		sta $58,x			sta 	esInt2,x
.1a9e	b5 48		lda $48,x			lda 	esInt0,x
.1aa0	95 50		sta $50,x			sta 	esInt1,x
.1aa2	a9 00		lda #$00			lda 	#0
.1aa4	95 48		sta $48,x			sta 	esInt0,x
.1aa6	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1aa7	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1aa9	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1aab					_ELShiftLoop:
.1aab	4a		lsr a				lsr 	a
.1aac	76 60		ror $60,x			ror 	esInt3,x
.1aae	76 58		ror $58,x			ror 	esInt2,x
.1ab0	76 50		ror $50,x			ror 	esInt1,x
.1ab2	76 48		ror $48,x			ror 	esInt0,x
.1ab4	c9 01		cmp #$01			cmp 	#1
.1ab6	d0 f3		bne $1aab			bne 	_ELShiftLoop
.1ab8	68		pla				pla 								; get original 6 bit value and OR in.
.1ab9	29 3f		and #$3f			and 	#$3F
.1abb	15 48		ora $48,x			ora 	esInt0,x
.1abd	95 48		sta $48,x			sta 	esInt0,x
.1abf	60		rts				rts
.1ac0					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1ac0	01					.byte	$01			; $86 and
>1ac1	01					.byte	$01			; $87 or
>1ac2	01					.byte	$01			; $88 xor
>1ac3	02					.byte	$02			; $89 >=
>1ac4	02					.byte	$02			; $8a <=
>1ac5	02					.byte	$02			; $8b >
>1ac6	02					.byte	$02			; $8c <
>1ac7	02					.byte	$02			; $8d =
>1ac8	02					.byte	$02			; $8e <>
>1ac9	03					.byte	$03			; $8f +
>1aca	03					.byte	$03			; $90 -
>1acb	04					.byte	$04			; $91 >>
>1acc	04					.byte	$04			; $92 <<
>1acd	04					.byte	$04			; $93 *
>1ace	04					.byte	$04			; $94 /
>1acf	04					.byte	$04			; $95 mod
>1ad0	05					.byte	$05			; $96 ^
>1ad1	06					.byte	$06			; $97 !
>1ad2	06					.byte	$06			; $98 ?
>1ad3	82					.byte	$82			; $99 repeat
>1ad4	82					.byte	$82			; $9a while
>1ad5	82					.byte	$82			; $9b for
>1ad6	82					.byte	$82			; $9c if
>1ad7	82					.byte	$82			; $9d defproc
>1ad8	80					.byte	$80			; $9e until
>1ad9	80					.byte	$80			; $9f wend
>1ada	80					.byte	$80			; $a0 next
>1adb	80					.byte	$80			; $a1 then
>1adc	80					.byte	$80			; $a2 endif
>1add	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1ade					EventFunction:
.1ade	20 7f 1a	jsr $1a7f			jsr 	EvaluateReference			; get the variable reference.
.1ae1	b5 40		lda $40,x			lda 	esType,x
.1ae3	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1ae5	d0 5b		bne $1b42			bne 	_EFType
.1ae7	20 cf 20	jsr $20cf			jsr 	CheckComma
.1aea	e8		inx				inx
.1aeb	20 52 1a	jsr $1a52			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1aee	20 c2 20	jsr $20c2			jsr 	CheckRightParen 			; finish off with the
.1af1	ca		dex				dex
.1af2	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1af4	29 80		and #$80			and 	#$80
.1af6	15 58		ora $58,x			ora 	esInt2,x
.1af8	15 60		ora $60,x			ora 	esInt3,x
.1afa	d0 41		bne $1b3d			bne 	_EFValue
.1afc	98		tya				tya
.1afd	48		pha				pha
.1afe	8a		txa				txa
.1aff	48		pha				pha
.1b00	a2 08		ldx #$08		ldx	#8
.1b02	20 70 21	jsr $2170		jsr	deviceHandler
.1b05	84 07		sty $07				sty 	temp1+1
.1b07	85 06		sta $06				sta 	temp1
.1b09	68		pla				pla
.1b0a	aa		tax				tax
.1b0b	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1b0e	a0 03		ldy #$03			ldy 	#3							; if -ve
.1b10	b1 04		lda ($04),y			lda 	(temp0),y
.1b12	30 23		bmi $1b37			bmi 	_EFFail 	 				; straight out with fail, means on pause.
.1b14	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1b16	b1 04		lda ($04),y			lda 	(temp0),y
.1b18	c8		iny				iny
.1b19	11 04		ora ($04),y			ora 	(temp0),y
.1b1b	f0 17		beq $1b34			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1b1d	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1b1f	38		sec				sec
.1b20	b1 04		lda ($04),y			lda 	(temp0),y
.1b22	e5 06		sbc $06				sbc 	temp1
.1b24	c8		iny				iny
.1b25	b1 04		lda ($04),y			lda 	(temp0),y
.1b27	e5 07		sbc $07				sbc 	temp1+1
.1b29	10 0c		bpl $1b37			bpl 	_EFFail 					; if trigger >= timer then return False
.1b2b	20 47 1b	jsr $1b47			jsr 	SetEventTimer 				; reset the timer for next time.
.1b2e	20 4b 20	jsr $204b			jsr	 	MInt32True 					; and treutn true as fired.
.1b31	68		pla				pla
.1b32	a8		tay				tay
.1b33	60		rts				rts
.1b34					_EFInitialise:
.1b34	20 47 1b	jsr $1b47			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1b37					_EFFail:
.1b37	68		pla				pla
.1b38	a8		tay				tay
.1b39	20 4f 20	jsr $204f			jsr 	MInt32False
.1b3c	60		rts				rts
.1b3d					_EFValue:
.1b3d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b3f	20 7d 21	jsr $217d		jsr	errorHandler
.1b42					_EFType:
.1b42	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b44	20 7d 21	jsr $217d		jsr	errorHandler
.1b47					SetEventTimer:
.1b47	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1b49	18		clc				clc
.1b4a	a5 06		lda $06				lda 	temp1
.1b4c	75 49		adc $49,x			adc 	esInt0+1,x
.1b4e	91 04		sta ($04),y			sta		(temp0),y
.1b50	c8		iny				iny
.1b51	a5 07		lda $07				lda 	temp1+1
.1b53	75 51		adc $51,x			adc 	esInt1+1,x
.1b55	91 04		sta ($04),y			sta		(temp0),y
.1b57	88		dey				dey
.1b58	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1b5a	d0 04		bne $1b60			bne 	_SETExit
.1b5c	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1b5e	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1b60					_SETExit:
.1b60	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1b61					UnaryLen:
.1b61	20 6f 1b	jsr $1b6f			jsr 	ULStart
.1b64					ULFinish:
.1b64	b1 04		lda ($04),y			lda 	(temp0),y
.1b66	a4 0c		ldy $0c				ldy 	tempShort
.1b68	20 5e 20	jsr $205e			jsr 	MInt32Set8Bit
.1b6b	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.1b6e	60		rts				rts
.1b6f	20 47 1a	jsr $1a47	ULStart:jsr 	EvaluateString
.1b72	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1b74	85 04		sta $04				sta 	temp0
.1b76	b5 50		lda $50,x			lda 	esInt1,x
.1b78	85 05		sta $05				sta 	temp0+1
.1b7a	84 0c		sty $0c				sty 	tempShort 					; get length
.1b7c	a0 00		ldy #$00			ldy 	#0
.1b7e	60		rts				rts
.1b7f					UnaryAsc:
.1b7f	20 6f 1b	jsr $1b6f			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1b82	b1 04		lda ($04),y			lda 	(temp0),y
.1b84	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1b85	c9 00		cmp #$00			cmp 	#0
.1b87	d0 db		bne $1b64			bne 	ULFinish
.1b89	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b8b	20 7d 21	jsr $217d		jsr	errorHandler
.1b8e					UnaryAbs:
.1b8e	20 3c 1a	jsr $1a3c			jsr 	EvaluateNumeric
.1b91	b0 07		bcs $1b9a			bcs 	_UAFloat
.1b93	20 04 20	jsr $2004			jsr 	MInt32Absolute
.1b96	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.1b99	60		rts				rts
.1b9a					_UAFloat:
.1b9a	8a		txa				txa
.1b9b	a2 00		ldx #$00		ldx	#0
.1b9d	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1ba0	aa		tax				tax
.1ba1	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.1ba4	60		rts				rts
.1ba5					UnarySgn:
.1ba5	20 3c 1a	jsr $1a3c			jsr 	EvaluateNumeric
.1ba8	b0 07		bcs $1bb1			bcs 	_USFloat
.1baa	20 3c 20	jsr $203c			jsr 	MInt32Sign
.1bad	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.1bb0	60		rts				rts
.1bb1					_USFloat:
.1bb1	8a		txa				txa
.1bb2	a2 0e		ldx #$0e		ldx	#14
.1bb4	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1bb7	aa		tax				tax
.1bb8	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.1bbb	60		rts				rts
.1bbc					UnaryPeek:
.1bbc	20 e8 1b	jsr $1be8			jsr 	PDLCode
.1bbf	4c dc 1b	jmp $1bdc			jmp 	PDLByte0
.1bc2					UnaryDeek:
.1bc2	20 e8 1b	jsr $1be8			jsr 	PDLCode
.1bc5	4c d6 1b	jmp $1bd6			jmp 	PDLByte1
.1bc8					UnaryLeek:
.1bc8	20 e8 1b	jsr $1be8			jsr 	PDLCode
.1bcb	a0 03		ldy #$03			ldy 	#3
.1bcd	b1 04		lda ($04),y			lda 	(temp0),y
.1bcf	95 60		sta $60,x			sta 	esInt3,x
.1bd1	88		dey				dey
.1bd2	b1 04		lda ($04),y			lda 	(temp0),y
.1bd4	95 58		sta $58,x			sta 	esInt2,x
.1bd6					PDLByte1:
.1bd6	a0 01		ldy #$01			ldy 	#1
.1bd8	b1 04		lda ($04),y			lda 	(temp0),y
.1bda	95 50		sta $50,x			sta 	esInt1,x
.1bdc					PDLByte0:
.1bdc	a0 00		ldy #$00			ldy 	#0
.1bde	b1 04		lda ($04),y			lda 	(temp0),y
.1be0	95 48		sta $48,x			sta 	esInt0,x
.1be2	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1be4	20 c2 20	jsr $20c2			jsr 	CheckRightParen 			; check right and return
.1be7	60		rts				rts
.1be8					PDLCode:
.1be8	20 52 1a	jsr $1a52			jsr 	EvaluateInteger
.1beb	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1bed	85 04		sta $04				sta 	temp0
.1bef	b5 50		lda $50,x			lda 	esInt1,x
.1bf1	85 05		sta $05				sta 	temp0+1
.1bf3	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1bf5	95 50		sta $50,x			sta 	esInt1,x
.1bf7	95 58		sta $58,x			sta 	esInt2,x
.1bf9	95 60		sta $60,x			sta 	esInt3,x
.1bfb	84 0c		sty $0c				sty 	tempShort 					; save Y
.1bfd	60		rts				rts
.1bfe					Unary_Random:
.1bfe	20 7f 20	jsr $207f			jsr 	MInt32Random 				; generate random number.
.1c01	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1c03	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1c05	f0 08		beq $1c0f			beq 	_URExit
.1c07	e8		inx				inx 								; load range 0..r-1 into +1
.1c08	20 52 1a	jsr $1a52			jsr 	EvaluateInteger
.1c0b	ca		dex				dex
.1c0c	20 b0 1e	jsr $1eb0			jsr 	MInt32Modulus 				; calculate random % modulus
.1c0f					_URExit:
.1c0f	20 c2 20	jsr $20c2			jsr 	CheckRightParen 			; check right and return
.1c12	60		rts				rts
.1c13					Unary_Min:
.1c13	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1c15	d0 02		bne $1c19			bne 	UnaryMBody
.1c17					Unary_Max:
.1c17	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1c19					UnaryMBody:
.1c19	48		pha				pha 								; save comparator on stack.
.1c1a	20 33 1a	jsr $1a33			jsr 	Evaluate 					; get the first thing to check
.1c1d					_UnaryMLoop:
.1c1d	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1c1f	c8		iny				iny
.1c20	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1c22	f0 09		beq $1c2d			beq 	_UnaryMExit
.1c24	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.1c26	f0 07		beq $1c2f			beq 	_UnaryMCompare
.1c28	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c2a	20 7d 21	jsr $217d		jsr	errorHandler
.1c2d					_UnaryMExit:
.1c2d	68		pla				pla 								; throw comparator and return.
.1c2e	60		rts				rts
.1c2f					_UnaryMCompare:
.1c2f	e8		inx				inx 								; get the 2nd thing to evaluate
.1c30	20 33 1a	jsr $1a33			jsr 	Evaluate
.1c33	ca		dex				dex
.1c34	20 dc 17	jsr $17dc			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1c37	85 0c		sta $0c				sta 	tempShort 					; save result
.1c39	68		pla				pla 								; get what we need
.1c3a	48		pha				pha
.1c3b	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1c3d	d0 de		bne $1c1d			bne 	_UnaryMLoop 				; no, try another value.
.1c3f	20 4f 20	jsr $204f			jsr 	MInt32False 				; promote 2nd to 1st.
.1c42	20 3a 1f	jsr $1f3a			jsr 	MInt32Add
.1c45	4c 1d 1c	jmp $1c1d			jmp 	_UnaryMLoop
.1c48					Unary_Page:
.1c48	20 4f 20	jsr $204f			jsr 	MInt32False 				; zero
.1c4b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1c4e	95 48		sta $48,x			sta 	esInt0,x
.1c50	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c53	95 50		sta $50,x			sta 	esInt1,x
.1c55	60		rts				rts
.1c56					UnaryReference:
.1c56	a9 0f		lda #$0f			lda 	#15
.1c58	20 2a 19	jsr $192a			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1c5b	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1c5d	10 05		bpl $1c64			bpl 	UType
.1c5f	a9 00		lda #$00			lda 	#0 							; make it an integer
.1c61	95 40		sta $40,x			sta 	esType,x
.1c63	60		rts				rts
.1c64					UType:
.1c64	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c66	20 7d 21	jsr $217d		jsr	errorHandler
.1c69					UnaryHexMarker:
.1c69	4c 24 1a	jmp $1a24			jmp 	EvaluateIntegerTerm
.1c6c					UnaryComplement:
.1c6c	20 24 1a	jsr $1a24			jsr 	EvaluateIntegerTerm
.1c6f	20 23 20	jsr $2023			jsr 	MInt32Not
.1c72	60		rts				rts
.1c73					UnaryIntToFloat:
.1c73	20 3c 1a	jsr $1a3c			jsr 	EvaluateNumeric
.1c76	b5 40		lda $40,x			lda 	esType,x
.1c78	d0 0b		bne $1c85			bne 	_UIFExit
.1c7a	8a		txa				txa
.1c7b	a2 1a		ldx #$1a		ldx	#26
.1c7d	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1c80	aa		tax				tax
.1c81	a9 01		lda #$01			lda 	#1
.1c83	95 40		sta $40,x			sta 	esType,x
.1c85					_UIFExit:
.1c85	60		rts				rts
.1c86					UnaryFloatToInt:
.1c86	20 3c 1a	jsr $1a3c			jsr 	EvaluateNumeric
.1c89	b5 40		lda $40,x			lda 	esType,x
.1c8b	f0 07		beq $1c94			beq 	_UFIExit
.1c8d	8a		txa				txa
.1c8e	a2 12		ldx #$12		ldx	#18
.1c90	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.1c93	aa		tax				tax
.1c94					_UFIExit:
.1c94	60		rts				rts
.1c95					UnaryAlloc:
.1c95	e8		inx				inx 								; evaluate memory required
.1c96	20 52 1a	jsr $1a52			jsr 	EvaluateInteger
.1c99	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.1c9c	ca		dex				dex
.1c9d	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1c9f	15 61		ora $61,x			ora 	esInt3+1,x
.1ca1	d0 19		bne $1cbc			bne 	_UABadValue
.1ca3	20 4f 20	jsr $204f			jsr 	MInt32False					; zero return.
.1ca6	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1ca8	95 50		sta $50,x			sta 	esInt1,x
.1caa	a5 0f		lda $0f				lda 	lowMemory
.1cac	95 48		sta $48,x			sta 	esInt0,x
.1cae	18		clc				clc 								; add alloc required.
.1caf	75 49		adc $49,x			adc 	esInt0+1,x
.1cb1	85 0f		sta $0f				sta 	lowMemory
.1cb3	a5 10		lda $10				lda 	lowMemory+1
.1cb5	75 51		adc $51,x			adc 	esInt1+1,x
.1cb7	85 10		sta $10				sta 	lowMemory+1
.1cb9	b0 01		bcs $1cbc			bcs		_UABadValue 				; overflow definitely bad.
.1cbb	60		rts				rts
.1cbc					_UABadValue:
.1cbc	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cbe	20 7d 21	jsr $217d		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1cc1					UnaryTimer:
.1cc1	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.1cc4	98		tya				tya
.1cc5	48		pha				pha
.1cc6	20 76 20	jsr $2076			jsr 	MInt32Zero 					; zero result
.1cc9	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1ccb	a2 08		ldx #$08		ldx	#8
.1ccd	20 70 21	jsr $2170		jsr	deviceHandler
.1cd0	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1cd2	95 48		sta $48,x			sta 	esInt0,x
.1cd4	98		tya				tya
.1cd5	95 50		sta $50,x			sta 	esInt1,x
.1cd7	68		pla				pla
.1cd8	a8		tay				tay
.1cd9	60		rts				rts
.1cda					UnaryInkey:
.1cda	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.1cdd	86 04		stx $04				stx 	temp0
.1cdf	a2 02		ldx #$02		ldx	#2
.1ce1	20 70 21	jsr $2170		jsr	deviceHandler
.1ce4	a6 04		ldx $04				ldx 	temp0
.1ce6	20 5e 20	jsr $205e			jsr 	MInt32Set8Bit
.1ce9	60		rts				rts
.1cea					UnaryGet:
.1cea	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.1ced	86 04		stx $04				stx 	temp0
.1cef					_UGLoop:
.1cef	a2 02		ldx #$02		ldx	#2
.1cf1	20 70 21	jsr $2170		jsr	deviceHandler
.1cf4	c9 00		cmp #$00			cmp 	#0
.1cf6	f0 f7		beq $1cef			beq 	_UGLoop
.1cf8	a6 04		ldx $04				ldx 	temp0
.1cfa	20 5e 20	jsr $205e			jsr 	MInt32Set8Bit
.1cfd	60		rts				rts
.1cfe					UnarySys:
.1cfe	20 52 1a	jsr $1a52			jsr 	EvaluateInteger 				; get the address
.1d01	20 c2 20	jsr $20c2			jsr 	CheckRightParen
.1d04	20 26 11	jsr $1126			jsr 	TOSToTemp0 						; copy to temp0
.1d07	8a		txa				txa
.1d08	48		pha				pha
.1d09	98		tya				tya
.1d0a	48		pha				pha
.1d0b	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1d0e	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1d11	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1d14	20 23 1d	jsr $1d23			jsr 	_CallTemp0
.1d17	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1d19	68		pla				pla
.1d1a	a8		tay				tay
.1d1b	68		pla				pla
.1d1c	aa		tax				tax
.1d1d	a5 0c		lda $0c				lda 	tempShort
.1d1f	20 5e 20	jsr $205e			jsr 	MInt32Set8Bit 					; return result.
.1d22	60		rts				rts
.1d23					_CallTemp0:
.1d23	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1d26					ExecChr:
.1d26	20 5a 1a	jsr $1a5a			jsr 	EvaluateSmallInteger		; character number
.1d29	20 c2 20	jsr $20c2			jsr 	CheckRightParen				; right bracket
.1d2c	98		tya				tya
.1d2d	48		pha				pha
.1d2e	8a		txa				txa 								; A = stack
.1d2f	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1d31	a2 00		ldx #$00		ldx	#0
.1d33	20 26 24	jsr $2426		jsr	stringHandler
.1d36	aa		tax				tax 								; X = stack
.1d37	68		pla				pla
.1d38	a8		tay				tay
.1d39	60		rts				rts
.1d3a					ExecLeft:
.1d3a	20 47 1a	jsr $1a47			jsr 	EvaluateString 				; string to stack,X
.1d3d	20 cf 20	jsr $20cf			jsr 	CheckComma
.1d40	e8		inx				inx
.1d41	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1d43	20 5e 20	jsr $205e			jsr 	MInt32Set8Bit
.1d46	e8		inx				inx
.1d47	20 5a 1a	jsr $1a5a			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1d4a					ExecSubstring:
.1d4a	ca		dex				dex 								; fix up X
.1d4b	ca		dex				dex
.1d4c	20 c2 20	jsr $20c2			jsr 	CheckRightParen 			; check closing right bracket.
.1d4f	8a		txa				txa 								; do the substring and exit.
.1d50	a2 08		ldx #$08		ldx	#8
.1d52	20 26 24	jsr $2426		jsr	stringHandler
.1d55	aa		tax				tax
.1d56	60		rts				rts
.1d57					ExecMid:
.1d57	20 47 1a	jsr $1a47			jsr 	EvaluateString 				; string to stack,X
.1d5a	20 cf 20	jsr $20cf			jsr 	CheckComma
.1d5d	e8		inx				inx
.1d5e	20 5a 1a	jsr $1a5a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d61	c9 00		cmp #$00			cmp 	#0
.1d63	f0 15		beq $1d7a			beq 	_EMValue
.1d65	e8		inx				inx
.1d66	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1d68	20 5e 20	jsr $205e			jsr 	MInt32Set8Bit
.1d6b	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1d6d	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1d6f	f0 d9		beq $1d4a			beq 	ExecSubString
.1d71	20 cf 20	jsr $20cf			jsr 	CheckComma
.1d74	20 5a 1a	jsr $1a5a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d77	4c 4a 1d	jmp $1d4a			jmp 	ExecSubString
.1d7a					_EMValue:
.1d7a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d7c	20 7d 21	jsr $217d		jsr	errorHandler
.1d7f					ExecRight:
.1d7f	20 47 1a	jsr $1a47			jsr 	EvaluateString 				; string to stack,X
.1d82	20 cf 20	jsr $20cf			jsr 	CheckComma
.1d85	e8		inx				inx
.1d86	20 5a 1a	jsr $1a5a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1d89	ca		dex				dex
.1d8a	98		tya				tya
.1d8b	48		pha				pha
.1d8c	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d8e	85 04		sta $04				sta 	temp0
.1d90	b5 50		lda $50,x			lda 	esInt1,x
.1d92	85 05		sta $05				sta 	temp0+1
.1d94	a0 00		ldy #$00			ldy 	#0 							; point to length
.1d96	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1d98	18		clc				clc 								; add 1.
.1d99	69 01		adc #$01			adc 	#1
.1d9b	38		sec				sec
.1d9c	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1d9e	f0 02		beq $1da2			beq		_ERMake1 					; if zero, make it 1.
.1da0	b0 02		bcs $1da4			bcs		_EROkay
.1da2					_ERMake1:
.1da2	a9 01		lda #$01			lda 	#1 							; start position.
.1da4					_EROkay:
.1da4	e8		inx				inx 								; set start pos.
.1da5	95 48		sta $48,x			sta 	esInt0,x
.1da7	e8		inx				inx
.1da8	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1daa	20 5e 20	jsr $205e			jsr 	MInt32Set8Bit
.1dad	68		pla				pla
.1dae	a8		tay				tay
.1daf	4c 4a 1d	jmp $1d4a			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1db2					MInt32And:
.1db2	b5 48		lda $48,x			lda 	esInt0,x
.1db4	35 49		and $49,x			and 	esInt0+1,x
.1db6	95 48		sta $48,x			sta 	esInt0,x
.1db8	b5 50		lda $50,x			lda 	esInt1,x
.1dba	35 51		and $51,x			and 	esInt1+1,x
.1dbc	95 50		sta $50,x			sta 	esInt1,x
.1dbe	b5 58		lda $58,x			lda 	esInt2,x
.1dc0	35 59		and $59,x			and 	esInt2+1,x
.1dc2	95 58		sta $58,x			sta 	esInt2,x
.1dc4	b5 60		lda $60,x			lda 	esInt3,x
.1dc6	35 61		and $61,x			and 	esInt3+1,x
.1dc8	95 60		sta $60,x			sta 	esInt3,x
.1dca	60		rts				rts
.1dcb					MInt32Or:
.1dcb	b5 48		lda $48,x			lda 	esInt0,x
.1dcd	15 49		ora $49,x			ora 	esInt0+1,x
.1dcf	95 48		sta $48,x			sta 	esInt0,x
.1dd1	b5 50		lda $50,x			lda 	esInt1,x
.1dd3	15 51		ora $51,x			ora 	esInt1+1,x
.1dd5	95 50		sta $50,x			sta 	esInt1,x
.1dd7	b5 58		lda $58,x			lda 	esInt2,x
.1dd9	15 59		ora $59,x			ora 	esInt2+1,x
.1ddb	95 58		sta $58,x			sta 	esInt2,x
.1ddd	b5 60		lda $60,x			lda 	esInt3,x
.1ddf	15 61		ora $61,x			ora 	esInt3+1,x
.1de1	95 60		sta $60,x			sta 	esInt3,x
.1de3	60		rts				rts
.1de4					MInt32Xor:
.1de4	b5 48		lda $48,x			lda 	esInt0,x
.1de6	55 49		eor $49,x			eor 	esInt0+1,x
.1de8	95 48		sta $48,x			sta 	esInt0,x
.1dea	b5 50		lda $50,x			lda 	esInt1,x
.1dec	55 51		eor $51,x			eor 	esInt1+1,x
.1dee	95 50		sta $50,x			sta 	esInt1,x
.1df0	b5 58		lda $58,x			lda 	esInt2,x
.1df2	55 59		eor $59,x			eor 	esInt2+1,x
.1df4	95 58		sta $58,x			sta 	esInt2,x
.1df6	b5 60		lda $60,x			lda 	esInt3,x
.1df8	55 61		eor $61,x			eor 	esInt3+1,x
.1dfa	95 60		sta $60,x			sta 	esInt3,x
.1dfc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1dfd					MInt32Compare:
.1dfd	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1dff	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e01	d0 13		bne $1e16			bne 	MInt32Compare2
.1e03	b5 50		lda $50,x			lda 	esInt1,x
.1e05	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1e07	d0 0d		bne $1e16			bne 	MInt32Compare2
.1e09	b5 58		lda $58,x			lda 	esInt2,x
.1e0b	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1e0d	d0 07		bne $1e16			bne 	MInt32Compare2
.1e0f	b5 60		lda $60,x			lda 	esInt3,x
.1e11	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1e13	d0 01		bne $1e16			bne 	MInt32Compare2
.1e15	60		rts				rts
.1e16					MInt32Compare2:
.1e16	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1e18	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e1a	b5 50		lda $50,x			lda		esInt1,x
.1e1c	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e1e	b5 58		lda $58,x			lda		esInt2,x
.1e20	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e22	b5 60		lda $60,x			lda		esInt3,x
.1e24	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e26	50 02		bvc $1e2a			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1e28	49 80		eor #$80			eor 	#$80
.1e2a					_I32LNoOverflow
.1e2a	30 03		bmi $1e2f			bmi 	MInt32CLess					; if -ve then return $FF
.1e2c	a9 01		lda #$01			lda 	#$01						; else return $01
.1e2e	60		rts				rts
.1e2f					MInt32CLess:
.1e2f	a9 ff		lda #$ff			lda 	#$FF
.1e31	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1e32					MInt32SDivide:
.1e32	98		tya				tya  								; save Y, which is the count of negations
.1e33	48		pha				pha
.1e34	a0 00		ldy #$00			ldy 	#0 							; zero count
.1e36	20 4e 1e	jsr $1e4e			jsr 	_MInt32SRemSign 			; unsign TOS
.1e39	e8		inx				inx 								; unsign TOS+1
.1e3a	20 4e 1e	jsr $1e4e			jsr 	_MInt32SRemSign
.1e3d	ca		dex				dex
.1e3e	98		tya				tya 								; save sign count on stack
.1e3f	48		pha				pha
.1e40	20 57 1e	jsr $1e57			jsr 	MInt32UDivide 				; unsigned division
.1e43	68		pla				pla 								; get sign count back
.1e44	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1e46	f0 03		beq $1e4b			beq 	_I32SNoNeg
.1e48	20 09 20	jsr $2009			jsr 	MInt32Negate
.1e4b					_I32SNoNeg:
.1e4b	68		pla				pla 								; restoe Y and exit
.1e4c	a8		tay				tay
.1e4d	60		rts				rts
.1e4e					_MInt32SRemSign:
.1e4e	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1e50	10 04		bpl $1e56			bpl 	_MInt32SRSExit
.1e52	c8		iny				iny 								; increment the sign count
.1e53	20 09 20	jsr $2009			jsr 	MInt32Negate 				; negate the value.
.1e56					_MInt32SRSExit:
.1e56	60		rts				rts
.1e57					MInt32UDivide:
.1e57	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1e59	15 51		ora $51,x			ora 	esInt1+1,x
.1e5b	15 52		ora $52,x			ora 	esInt1+2,x
.1e5d	15 53		ora $53,x			ora 	esInt1+3,x
.1e5f	f0 4a		beq $1eab			beq 	_MInt32DZero
.1e61	e8		inx				inx 								; clear A
.1e62	e8		inx				inx
.1e63	20 4f 20	jsr $204f			jsr 	MInt32False
.1e66	ca		dex				dex
.1e67	ca		dex				dex
.1e68	98		tya				tya 								; save Y on the stack
.1e69	48		pha				pha
.1e6a	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1e6c					_MInt32UDLoop:
.1e6c	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1e6e	36 50		rol $50,x			rol 	esInt1,x
.1e70	36 58		rol $58,x			rol 	esInt2,x
.1e72	36 60		rol $60,x			rol 	esInt3,x
.1e74	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1e76	36 52		rol $52,x			rol 	esInt1+2,x
.1e78	36 5a		rol $5a,x			rol 	esInt2+2,x
.1e7a	36 62		rol $62,x			rol 	esInt3+2,x
.1e7c	38		sec				sec 								; calculate A-M saving result on the stack
.1e7d	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e7f	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1e81	48		pha				pha
.1e82	b5 52		lda $52,x			lda 	esInt1+2,x
.1e84	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e86	48		pha				pha
.1e87	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1e89	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e8b	48		pha				pha
.1e8c	b5 62		lda $62,x			lda 	esInt3+2,x
.1e8e	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e90	90 10		bcc $1ea2			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1e92	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1e94	68		pla				pla
.1e95	95 5a		sta $5a,x			sta 	esInt2+2,x
.1e97	68		pla				pla
.1e98	95 52		sta $52,x			sta 	esInt1+2,x
.1e9a	68		pla				pla
.1e9b	95 4a		sta $4a,x			sta 	esInt0+2,x
.1e9d	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1e9f	4c a5 1e	jmp $1ea5			jmp 	_MInt32Next 					; do the next iteration
.1ea2					_MInt32NoSubtract:
.1ea2	68		pla				pla
.1ea3	68		pla				pla
.1ea4	68		pla				pla
.1ea5					_MInt32Next:
.1ea5	88		dey				dey 								; do this 32 times.
.1ea6	d0 c4		bne $1e6c			bne 	_MInt32UDLoop
.1ea8	68		pla				pla 								; restore Y and exit
.1ea9	a8		tay				tay
.1eaa	60		rts				rts
.1eab					_MInt32DZero:
.1eab	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1ead	20 7d 21	jsr $217d		jsr	errorHandler
.1eb0					MInt32Modulus:
.1eb0	20 57 1e	jsr $1e57			jsr 	MInt32UDivide 				; do the division.
.1eb3	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1eb5	95 60		sta $60,x			sta 	esInt3,x
.1eb7	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1eb9	95 58		sta $58,x			sta 	esInt2,x
.1ebb	b5 52		lda $52,x			lda 	esInt1+2,x
.1ebd	95 50		sta $50,x			sta 	esInt1,x
.1ebf	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1ec1	95 48		sta $48,x			sta 	esInt0,x
.1ec3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af6					fs32Length:
>0af6							.fill 	1
.1ec4					MInt32FromString:
.1ec4	85 0c		sta $0c				sta 	tempShort 					; save base
.1ec6	98		tya				tya
.1ec7	48		pha				pha
.1ec8	a0 00		ldy #$00			ldy 	#0 							; get length
.1eca	b1 04		lda ($04),y			lda 	(temp0),y
.1ecc	8d f6 0a	sta $0af6			sta 	fs32Length
.1ecf	f0 65		beq $1f36			beq 	_I32FSFail2					; fail if length zero.
.1ed1	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1ed3	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1ed5	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1ed7	d0 09		bne $1ee2			bne 	_I32FSNotNegative
.1ed9	ad f6 0a	lda $0af6			lda 	fs32Length 					; get length back.
.1edc	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1ede	f0 56		beq $1f36			beq 	_I32FSFail2
.1ee0	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1ee2					_I32FSNotNegative:
.1ee2	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1ee4	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1ee6	d0 02		bne $1eea			bne 	_I32FSNN2
.1ee8	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1eea					_I32FSNN2:
.1eea	48		pha				pha 								; save base + final sign on stack.
.1eeb	20 4f 20	jsr $204f			jsr 	MInt32False 				; zero the return value.
.1eee					_I32FSMainLoop:
.1eee	68		pla				pla 								; get the base back into tempShort
.1eef	48		pha				pha
.1ef0	29 7f		and #$7f			and 	#$7F
.1ef2	85 0c		sta $0c				sta 	tempShort
.1ef4	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1ef6	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1ef8	90 02		bcc $1efc			bcc 	_I32FSNotLC
.1efa	e9 20		sbc #$20			sbc 	#32
.1efc					_I32FSNotLC:
.1efc	38		sec				sec 								; subtract 48 (ASCII "0")
.1efd	e9 30		sbc #$30			sbc 	#"0"
.1eff	90 34		bcc $1f35			bcc 	_I32FSFail 					; nothing more to do.
.1f01	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1f03	90 06		bcc $1f0b			bcc 	_I32FSValidate
.1f05	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1f07	90 2c		bcc $1f35			bcc 	_I32FSFail
.1f09	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1f0b					_I32FSValidate:
.1f0b	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1f0d	b0 26		bcs $1f35			bcs 	_I32FSFail 					; sorry, too large for this base.
.1f0f	48		pha				pha 								; save the new digit value.
.1f10	e8		inx				inx 								; put base into next slot.
.1f11	a5 0c		lda $0c				lda 	tempShort
.1f13	20 5e 20	jsr $205e			jsr 	MInt32Set8Bit
.1f16	ca		dex				dex
.1f17	20 6e 1f	jsr $1f6e			jsr 	MInt32Multiply 				; multiply current by the base
.1f1a	e8		inx				inx
.1f1b	68		pla				pla  								; put additive into next slot
.1f1c	20 5e 20	jsr $205e			jsr 	MInt32Set8Bit
.1f1f	ca		dex				dex
.1f20	20 3a 1f	jsr $1f3a			jsr 	MInt32Add 					; and add it
.1f23	c8		iny				iny 								; look at next character
.1f24	cc f6 0a	cpy $0af6			cpy 	fs32Length 					; until > length.
.1f27	f0 c5		beq $1eee			beq 	_I32FSMainLoop
.1f29	90 c3		bcc $1eee			bcc 	_I32FSMainLoop
.1f2b					_I32FSDone:
.1f2b	68		pla				pla 								; get base/final sign back
.1f2c	10 03		bpl $1f31			bpl 	_I32FSNN3
.1f2e	20 09 20	jsr $2009			jsr 	MInt32Negate 				; negate the result.
.1f31					_I32FSNN3:
.1f31	68		pla				pla
.1f32	a8		tay				tay
.1f33	38		sec				sec
.1f34	60		rts				rts
.1f35					_I32FSFail:
.1f35	68		pla				pla
.1f36					_I32FSFail2:
.1f36	68		pla				pla
.1f37	a8		tay				tay
.1f38	18		clc				clc
.1f39	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1f3a					MInt32Add:
.1f3a	18		clc				clc
.1f3b	b5 48		lda $48,x			lda 	esInt0,x
.1f3d	75 49		adc $49,x			adc 	esInt0+1,x
.1f3f	95 48		sta $48,x			sta 	esInt0,x
.1f41	b5 50		lda $50,x			lda 	esInt1,x
.1f43	75 51		adc $51,x			adc 	esInt1+1,x
.1f45	95 50		sta $50,x			sta 	esInt1,x
.1f47	b5 58		lda $58,x			lda 	esInt2,x
.1f49	75 59		adc $59,x			adc 	esInt2+1,x
.1f4b	95 58		sta $58,x			sta 	esInt2,x
.1f4d	b5 60		lda $60,x			lda 	esInt3,x
.1f4f	75 61		adc $61,x			adc 	esInt3+1,x
.1f51	95 60		sta $60,x			sta 	esInt3,x
.1f53	60		rts				rts
.1f54					MInt32Sub:
.1f54	38		sec				sec
.1f55	b5 48		lda $48,x			lda 	esInt0,x
.1f57	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1f59	95 48		sta $48,x			sta 	esInt0,x
.1f5b	b5 50		lda $50,x			lda 	esInt1,x
.1f5d	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1f5f	95 50		sta $50,x			sta 	esInt1,x
.1f61	b5 58		lda $58,x			lda 	esInt2,x
.1f63	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1f65	95 58		sta $58,x			sta 	esInt2,x
.1f67	b5 60		lda $60,x			lda 	esInt3,x
.1f69	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1f6b	95 60		sta $60,x			sta 	esInt3,x
.1f6d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1f6e					MInt32Multiply:
.1f6e	e8		inx				inx 								; copy 2nd -> 3rd
.1f6f	20 94 1f	jsr $1f94			jsr 	MInt32CopyUp
.1f72	ca		dex				dex
.1f73	20 94 1f	jsr $1f94			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1f76	20 4f 20	jsr $204f			jsr 	MInt32False 					; zero 1st.
.1f79					_I32Loop:
.1f79	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1f7b	29 01		and #$01			and 	#1
.1f7d	f0 03		beq $1f82			beq 	_I32NoAdd 					; if set
.1f7f	20 3a 1f	jsr $1f3a			jsr 	MInt32Add 					; add 2nd to 1st.
.1f82					_I32NoAdd:
.1f82	e8		inx				inx 								; shift 2nd left
.1f83	20 64 20	jsr $2064			jsr 	MInt32ShiftLeft
.1f86	e8		inx				inx  								; shift 3rd right
.1f87	20 6d 20	jsr $206d			jsr 	MInt32ShiftRight
.1f8a	20 76 20	jsr $2076			jsr 	MInt32Zero 					; check if zero.
.1f8d	08		php				php 								; save status bits
.1f8e	ca		dex				dex 	 							; point back to 1st
.1f8f	ca		dex				dex
.1f90	28		plp				plp 								; get status bits
.1f91	d0 e6		bne $1f79			bne 	_I32Loop 					; if non-zero keep going.
.1f93	60		rts				rts
.1f94					MInt32CopyUp:
.1f94	b5 48		lda $48,x			lda 	esInt0,x
.1f96	95 49		sta $49,x			sta 	esInt0+1,x
.1f98	b5 50		lda $50,x			lda 	esInt1,x
.1f9a	95 51		sta $51,x			sta 	esInt1+1,x
.1f9c	b5 58		lda $58,x			lda 	esInt2,x
.1f9e	95 59		sta $59,x			sta 	esInt2+1,x
.1fa0	b5 60		lda $60,x			lda 	esInt3,x
.1fa2	95 61		sta $61,x			sta 	esInt3+1,x
.1fa4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af7					MCharCount:	.fill 	1						; count of converted characters
.1fa5					MInt32ToString:
.1fa5	48		pha				pha 								; save base
.1fa6	85 0c		sta $0c				sta 	tempShort 					; save target base.
.1fa8	a9 00		lda #$00			lda 	#0
.1faa	8d f7 0a	sta $0af7			sta 	MCharCount 					; clear character count to 0
.1fad	98		tya				tya
.1fae	48		pha				pha
.1faf	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.1fb1	10 10		bpl $1fc3			bpl 	_I32TSUnsigned
.1fb3	48		pha				pha 								; save base on stack.
.1fb4	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1fb6	10 08		bpl $1fc0			bpl 	_I32TSNoFlip
.1fb8	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1fba	20 f6 1f	jsr $1ff6			jsr 	MI32WriteCharacter
.1fbd	20 09 20	jsr $2009			jsr 	MInt32Negate 				; negate the value.
.1fc0					_I32TSNoFlip:
.1fc0	68		pla				pla 								; get the base back
.1fc1	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1fc3					_I32TSUnsigned:
.1fc3	20 d1 1f	jsr $1fd1			jsr 	MI32DivideWrite 			; recursive code to output string.
.1fc6	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1fc8	ad f7 0a	lda $0af7			lda 	MCharCount
.1fcb	91 04		sta ($04),y			sta 	(temp0),y
.1fcd	68		pla				pla
.1fce	a8		tay				tay
.1fcf	68		pla				pla
.1fd0	60		rts				rts
.1fd1					MI32DivideWrite:
.1fd1	48		pha				pha 								; save the divisor/base
.1fd2	e8		inx				inx 								; write in the dividing position.
.1fd3	20 5e 20	jsr $205e			jsr 	MInt32Set8Bit
.1fd6	ca		dex				dex
.1fd7	20 57 1e	jsr $1e57			jsr 	MInt32UDivide 				; divide number by base.
.1fda	68		pla				pla 								; get the base into Y
.1fdb	a8		tay				tay
.1fdc	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1fde	48		pha				pha
.1fdf	20 76 20	jsr $2076			jsr 	MInt32Zero 					; is the result zero ?
.1fe2	f0 04		beq $1fe8			beq 	_I32NoRecurse 				; if so, don't recurse.
.1fe4	98		tya				tya 								; put base into A
.1fe5	20 d1 1f	jsr $1fd1			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1fe8					_I32NoRecurse:
.1fe8	68		pla				pla 								; get the remainder back
.1fe9	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1feb	90 02		bcc $1fef			bcc 	_I32NotHex
.1fed	69 06		adc #$06			adc 	#7-1
.1fef					_I32NotHex:
.1fef	18		clc				clc 								; make it ASCII
.1ff0	69 30		adc #$30			adc 	#48
.1ff2	20 f6 1f	jsr $1ff6			jsr 	MI32WriteCharacter 			; write the character out
.1ff5	60		rts				rts 								; and exit.
.1ff6					MI32WriteCharacter:
.1ff6	ee f7 0a	inc $0af7			inc 	MCharCount 					; bump count (space for leading count)
.1ff9	ac f7 0a	ldy $0af7			ldy 	MCharCount 					; get position
.1ffc	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1ffe	c8		iny				iny
.1fff	a9 00		lda #$00			lda 	#0
.2001	91 04		sta ($04),y			sta 	(temp0),y
.2003	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af8					MSeed32:	.fill 	4							; random number seed.
.2004					MInt32Absolute:
.2004	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2006	30 01		bmi $2009			bmi 	MInt32Negate
.2008	60		rts				rts
.2009					MInt32Negate:
.2009	38		sec				sec
.200a	a9 00		lda #$00			lda 	#0
.200c	f5 48		sbc $48,x			sbc 	esInt0,x
.200e	95 48		sta $48,x			sta 	esInt0,x
.2010	a9 00		lda #$00			lda 	#0
.2012	f5 50		sbc $50,x			sbc 	esInt1,x
.2014	95 50		sta $50,x			sta 	esInt1,x
.2016	a9 00		lda #$00			lda 	#0
.2018	f5 58		sbc $58,x			sbc 	esInt2,x
.201a	95 58		sta $58,x			sta 	esInt2,x
.201c	a9 00		lda #$00			lda 	#0
.201e	f5 60		sbc $60,x			sbc 	esInt3,x
.2020	95 60		sta $60,x			sta 	esInt3,x
.2022	60		rts				rts
.2023					MInt32Not:
.2023	b5 48		lda $48,x			lda 	esInt0,x
.2025	49 ff		eor #$ff			eor 	#$FF
.2027	95 48		sta $48,x			sta 	esInt0,x
.2029	b5 50		lda $50,x			lda 	esInt1,x
.202b	49 ff		eor #$ff			eor 	#$FF
.202d	95 50		sta $50,x			sta 	esInt1,x
.202f	b5 58		lda $58,x			lda 	esInt2,x
.2031	49 ff		eor #$ff			eor 	#$FF
.2033	95 58		sta $58,x			sta 	esInt2,x
.2035	b5 60		lda $60,x			lda 	esInt3,x
.2037	49 ff		eor #$ff			eor 	#$FF
.2039	95 60		sta $60,x			sta 	esInt3,x
.203b	60		rts				rts
.203c					MInt32Sign:
.203c	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.203e	30 0b		bmi $204b			bmi 	MInt32True 					; if set return -1 (true)
.2040	20 76 20	jsr $2076			jsr 	MInt32Zero 					; is it zero ?
.2043	f0 0a		beq $204f			beq 	MInt32False 					; if zero return 0 (false)
.2045	20 4f 20	jsr $204f			jsr 	MInt32False 					; > 0 return 1
.2048	f6 48		inc $48,x			inc 	esInt0,x
.204a	60		rts				rts
.204b					MInt32True:
.204b	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.204d	d0 02		bne $2051			bne 	MInt32WriteAll
.204f					MInt32False:
.204f	a9 00		lda #$00			lda 	#0
.2051					MInt32WriteAll:
.2051	95 48		sta $48,x			sta 	esInt0,x
.2053					MInt32Write123:
.2053	95 50		sta $50,x			sta 	esInt1,x
.2055	95 58		sta $58,x			sta 	esInt2,x
.2057	95 60		sta $60,x			sta 	esInt3,x
.2059	a9 00		lda #$00			lda 	#$00						; and make it an integer
.205b	95 40		sta $40,x			sta 	esType,x
.205d	60		rts				rts
.205e					MInt32Set8Bit:
.205e	95 48		sta $48,x			sta 	esInt0,x
.2060	a9 00		lda #$00			lda 	#0
.2062	f0 ef		beq $2053			beq		MInt32Write123
.2064					MInt32ShiftLeft:
.2064	16 48		asl $48,x			asl 	esInt0,x
.2066	36 50		rol $50,x			rol	 	esInt1,x
.2068	36 58		rol $58,x			rol	 	esInt2,x
.206a	36 60		rol $60,x			rol	 	esInt3,x
.206c	60		rts				rts
.206d					MInt32ShiftRight:
.206d	56 60		lsr $60,x			lsr 	esInt3,x
.206f	76 58		ror $58,x			ror 	esInt2,x
.2071	76 50		ror $50,x			ror 	esInt1,x
.2073	76 48		ror $48,x			ror 	esInt0,x
.2075	60		rts				rts
.2076					MInt32Zero:
.2076	b5 48		lda $48,x			lda 	esInt0,x
.2078	15 50		ora $50,x			ora 	esInt1,x
.207a	15 58		ora $58,x			ora 	esInt2,x
.207c	15 60		ora $60,x			ora 	esInt3,x
.207e	60		rts				rts
.207f					MInt32Random:
.207f	98		tya				tya
.2080	48		pha				pha
.2081	a0 07		ldy #$07			ldy 	#7
.2083	ad f8 0a	lda $0af8			lda 	MSeed32+0
.2086	d0 03		bne $208b			bne 	_Random1
.2088	a8		tay				tay
.2089	a9 aa		lda #$aa			lda		#$AA
.208b					_Random1:
.208b	0a		asl a				asl 	a
.208c	2e f9 0a	rol $0af9			rol 	MSeed32+1
.208f	2e fa 0a	rol $0afa			rol 	MSeed32+2
.2092	2e fb 0a	rol $0afb			rol 	MSeed32+3
.2095	90 02		bcc $2099			bcc 	_Random2
.2097	49 c5		eor #$c5			eor 	#$C5
.2099					_Random2:
.2099	88		dey				dey
.209a	d0 ef		bne $208b			bne 	_Random1
.209c	8d f8 0a	sta $0af8			sta 	MSeed32+0
.209f	95 48		sta $48,x			sta 	esInt0,x
.20a1	ad f9 0a	lda $0af9			lda 	MSeed32+1
.20a4	95 50		sta $50,x			sta 	esInt1,x
.20a6	ad fa 0a	lda $0afa			lda 	MSeed32+2
.20a9	95 58		sta $58,x			sta 	esInt2,x
.20ab	ad fb 0a	lda $0afb			lda 	MSeed32+3
.20ae	95 60		sta $60,x			sta 	esInt3,x
.20b0	68		pla				pla
.20b1	a8		tay				tay
.20b2	a9 00		lda #$00			lda 	#0
.20b4	95 40		sta $40,x			sta 	esType,x
.20b6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.20b7					CheckToken:
.20b7	d1 02		cmp ($02),y			cmp 	(codePtr),y
.20b9	d0 02		bne $20bd			bne 	_CTError
.20bb	c8		iny				iny
.20bc	60		rts				rts
.20bd					_CTError:
.20bd	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.20bf	20 7d 21	jsr $217d		jsr	errorHandler
.20c2					CheckRightParen:
.20c2	b1 02		lda ($02),y			lda 	(codePtr),y
.20c4	c8		iny				iny
.20c5	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.20c7	d0 01		bne $20ca			bne 	_CRPError
.20c9	60		rts				rts
.20ca					_CRPError:
.20ca	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.20cc	20 7d 21	jsr $217d		jsr	errorHandler
.20cf					CheckComma:
.20cf	b1 02		lda ($02),y			lda 	(codePtr),y
.20d1	c8		iny				iny
.20d2	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.20d4	d0 01		bne $20d7			bne 	_CCError
.20d6	60		rts				rts
.20d7					_CCError:
.20d7	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.20d9	20 7d 21	jsr $217d		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2721					ScanForward:
.2721	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2723	86 07		stx $07				stx 	temp1+1
.2725	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2727	85 08		sta $08				sta 	temp2
.2729	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.272b	c8		iny				iny
.272c	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.272e	d0 08		bne $2738			bne 	_SFNoCheck 					; if so, check token against entered values.
.2730	c5 06		cmp $06				cmp 	temp1
.2732	f0 24		beq $2758			beq 	_SFExit
.2734	c5 07		cmp $07				cmp 	temp1+1
.2736	f0 20		beq $2758			beq 	_SFExit
.2738					_SFNoCheck:
.2738	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.273a	90 ed		bcc $2729			bcc 	_SFLoop
.273c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.273e	90 19		bcc $2759			bcc 	_SFSpecials
.2740	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2742	90 e5		bcc $2729			bcc 	_SFLoop
.2744	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2746	b0 e1		bcs $2729			bcs 	_SFLoop
.2748	aa		tax				tax  								; token in X, and look up the adjuster.
.2749	bd 3a 1a	lda $1a3a,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.274c	38		sec				sec 								; convert to an offset
.274d	e9 81		sbc #$81			sbc 	#$81
.274f	18		clc				clc 								; add to depth
.2750	65 08		adc $08				adc 	temp2
.2752	85 08		sta $08				sta 	temp2
.2754	10 d3		bpl $2729			bpl 	_SFLoop 					; +ve okay to continue
.2756	30 2a		bmi $2782			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2758	60		rts		_SFExit:rts
.2759					_SFSpecials:
.2759	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.275b	f0 14		beq $2771			beq 	_SFNextLine
.275d	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.275f	f0 26		beq $2787			beq 	_SFFloatSkip
.2761	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2763	f0 04		beq $2769			beq 	_SFSkipString
.2765	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2766	4c 29 27	jmp $2729			jmp 	_SFLoop 					; token.
.2769					_SFSkipString:
.2769	98		tya				tya
.276a	38		sec				sec
.276b	71 02		adc ($02),y			adc 	(codePtr),y
.276d	a8		tay				tay
.276e	4c 29 27	jmp $2729			jmp 	_SFLoop
.2771					_SFNextLine:
.2771	a0 00		ldy #$00			ldy 	#0 							; get offset
.2773	b1 02		lda ($02),y			lda 	(codePtr),y
.2775	18		clc				clc 								; add to code pointer.
.2776	65 02		adc $02				adc 	codePtr
.2778	85 02		sta $02				sta 	codePtr
.277a	90 02		bcc $277e			bcc		_SFNLNoCarry
.277c	e6 03		inc $03				inc 	codePtr+1
.277e					_SFNLNoCarry:
.277e	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2780	d0 a7		bne $2729			bne		_SFLoop 					; no go round again
.2782					_SFError:
.2782	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2784	20 7d 21	jsr $217d		jsr	errorHandler
.2787					_SFFloatSkip:
.2787	4c 11 14	jmp $1411			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.20dc					RSReset:
.20dc	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.20de	85 78		sta $78				sta 	rsPointer
.20e0	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.20e2	85 79		sta $79				sta 	1+(rsPointer)
.20e4	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.20e6	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.20e9	60		rts				rts
.20ea					RSClaim:
.20ea	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.20ec	48		pha				pha 								; save marker on stack.
.20ed	8a		txa				txa 								; get bytes required.
.20ee	38		sec				sec
.20ef	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.20f1	65 78		adc $78				adc 	rsPointer
.20f3	85 78		sta $78				sta 	rsPointer
.20f5	a5 79		lda $79				lda 	rsPointer+1
.20f7	69 ff		adc #$ff			adc 	#$FF
.20f9	85 79		sta $79				sta 	rsPointer+1
.20fb	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.20fd	90 08		bcc $2107			bcc 	_RSCOverflow
.20ff	68		pla				pla 								; get marker back
.2100	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2102	91 78		sta ($78),y			sta 	(rsPointer),y
.2104	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.2106	60		rts				rts
.2107					_RSCOverflow:
.2107	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2109	20 7d 21	jsr $217d		jsr	errorHandler
.210c					RSFree:
.210c	18		clc				clc
.210d	65 78		adc $78				adc 	rsPointer
.210f	85 78		sta $78				sta 	rsPointer
.2111	90 02		bcc $2115			bcc 	_RSFExit
.2113	e6 79		inc $79				inc 	rsPointer+1
.2115					_RSFExit:
.2115	60		rts				rts
.2116					RSSavePosition:
.2116	84 0c		sty $0c				sty 	tempShort 					; save Y position
.2118	a8		tay				tay 								; this is where we write it.
.2119	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.211b	91 78		sta ($78),y			sta 	(rsPointer),y
.211d	c8		iny				iny
.211e	a5 03		lda $03				lda 	codePtr+1
.2120	91 78		sta ($78),y			sta 	(rsPointer),y
.2122	c8		iny				iny
.2123	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.2125	91 78		sta ($78),y			sta 	(rsPointer),y
.2127	a8		tay				tay 								; fix Y back again to original value
.2128	60		rts				rts
.2129					RSLoadPosition:
.2129	a8		tay				tay
.212a	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.212c	85 02		sta $02				sta 	codePtr
.212e	c8		iny				iny
.212f	b1 78		lda ($78),y			lda 	(rsPointer),y
.2131	85 03		sta $03				sta 	codePtr+1
.2133	c8		iny				iny
.2134	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2136	a8		tay				tay 								; to Y
.2137	60		rts				rts

;******  Return to file: main/main.asm

.2138					mainHandler:
.2138	7c 3b 21	jmp ($213b,x)			jmp 	(mainVectors,x)
.213b					mainVectors:
>213b	6d 1a					.word LinkEvaluate         ; index 0
>213d	73 1a					.word LinkEvaluateInteger  ; index 2
>213f	79 1a					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm

.2141					section_end_main:
.2141					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.2141					assemblerHandler:
.2141	7c 44 21	jmp ($2144,x)			jmp 	(assemblerVectors,x)
.2144					assemblerVectors:

;******  Return to file: basic.asm

.2144					section_end_assembler:
.2144					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.2144					IONewLine:
.2144	48		pha				pha
.2145	a9 0d		lda #$0d			lda 	#13
.2147	20 54 21	jsr $2154			jsr 	IOPrintChar
.214a	68		pla				pla
.214b	60		rts				rts
.214c					IOTab:
.214c	48		pha				pha
.214d	a9 20		lda #$20			lda 	#32
.214f	20 54 21	jsr $2154			jsr 	IOPrintChar
.2152	68		pla				pla
.2153	60		rts				rts
.2154					IOPrintChar:
.2154	aa		tax				tax
.2155	5a		phy				phy
.2156	8a		txa				txa
.2157	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.215a	7a		ply				ply
.215b	60		rts				rts
.215c					IOInkey:
.215c	98		tya				tya
.215d	48		pha				pha
.215e	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2161	85 0c		sta $0c				sta 	tempShort
.2163	68		pla				pla
.2164	a8		tay				tay
.2165	a5 0c		lda $0c				lda 	tempShort
.2167	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.2168					IOReadTimer:
.2168	20 de ff	jsr $ffde			jsr 	$FFDE
.216b	48		pha				pha
.216c	8a		txa				txa
.216d	a8		tay				tay
.216e	68		pla				pla
.216f	60		rts				rts

;******  Return to file: device/device.asm

.2170					deviceHandler:
.2170	7c 73 21	jmp ($2173,x)			jmp 	(deviceVectors,x)
.2173					deviceVectors:
>2173	44 21					.word IONewLine            ; index 0
>2175	5c 21					.word IOInkey              ; index 2
>2177	54 21					.word IOPrintChar          ; index 4
>2179	4c 21					.word IOTab                ; index 6
>217b	68 21					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm

.217d					section_end_device:
.217d					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.217d					ErrorHandler:
.217d	a9 ee		lda #$ee			lda 	#$EE
.217f	a8		tay				tay
>2180	db						.byte 	$DB
.2181	4c 81 21	jmp $2181	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2184					section_end_error:
.2184					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2184					ExtensionHandler:
.2184	b1 02		lda ($02),y			lda 	(codePtr),y
.2186	c8		iny				iny
.2187	0a		asl a				asl 	a
.2188	aa		tax				tax
.2189	7c 7e 27	jmp ($277e,x)			jmp 	(Group2Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.278a					Group2Vectors:
>278a	8c 21					.word	Command_VPoke            ; $86 vpoke
>278c	8f 21					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.218c					Command_VPoke:
.218c	38		sec				sec 						; one byte , CS
.218d	b0 01		bcs $2190			bcs 	CmdVideoWrite
.218f					Command_VDoke:
.218f	18		clc				clc 						; two bytes, CC
.2190					CmdVideoWrite:
.2190	08		php				php
.2191	a2 00		ldx #$00			ldx 	#0  				; get address into levels 0,1
.2193	20 52 1a	jsr $1a52			jsr 	EvaluateInteger
.2196	20 cf 20	jsr $20cf			jsr 	CheckComma
.2199	e8		inx				inx
.219a	20 52 1a	jsr $1a52			jsr 	EvaluateInteger
.219d	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.219f	29 01		and #$01			and 	#1
.21a1	15 60		ora $60,x			ora 	esInt3,x
.21a3	15 59		ora $59,x			ora 	esInt2+1,x
.21a5	15 61		ora $61,x			ora 	esInt3+1,x
.21a7	d0 21		bne $21ca			bne 	_CVWValue
.21a9	a5 48		lda $48				lda 	esInt0				; set address up
.21ab	8d 20 9f	sta $9f20			sta 	$9F20
.21ae	a5 50		lda $50				lda 	esInt1
.21b0	8d 21 9f	sta $9f21			sta	 	$9F21
.21b3	a5 58		lda $58				lda 	esInt2
.21b5	29 01		and #$01			and 	#1
.21b7	09 10		ora #$10			ora 	#$10 				; step 1.
.21b9	8d 22 9f	sta $9f22			sta 	$9F22
.21bc	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.21be	8d 23 9f	sta $9f23			sta 	$9F23
.21c1	28		plp				plp 						; if it was Poke then exit
.21c2	b0 05		bcs $21c9			bcs 	_CVWExit
.21c4	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.21c6	8d 23 9f	sta $9f23			sta 	$9F23
.21c9					_CVWExit:
.21c9	60		rts				rts
.21ca					_CVWValue:
.21ca	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.21cc	20 7d 21	jsr $217d		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.21cf					section_end_extension:
.21cf					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.21cf					floatingpointHandler:
.21cf	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.21d1	20 7d 21	jsr $217d		jsr	errorHandler

;******  Return to file: basic.asm

.21d4					section_end_floatingpoint:
.21d4					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.21d4					interactionHandler:
.21d4	7c d7 21	jmp ($21d7,x)			jmp 	(interactionVectors,x)
.21d7					interactionVectors:

;******  Return to file: basic.asm

.21d7					section_end_interaction:
.21d7					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.21d7					StringChrs:
.21d7	aa		tax				tax 								; set up stack
.21d8	a9 02		lda #$02			lda 	#2
.21da	20 91 22	jsr $2291			jsr 	AllocateSoftString
.21dd	98		tya				tya
.21de	20 b7 22	jsr $22b7			jsr 	WriteSoftString
.21e1	20 e6 21	jsr $21e6			jsr 	ReturnSoftString
.21e4	8a		txa				txa
.21e5	60		rts				rts
.21e6					ReturnSoftString:
.21e6	a5 7a		lda $7a				lda 	softMemAlloc
.21e8	95 48		sta $48,x			sta 	esInt0,x
.21ea	a5 7b		lda $7b				lda 	softMemAlloc+1
.21ec	95 50		sta $50,x			sta 	esInt1,x
.21ee	a9 00		lda #$00			lda 	#0
.21f0	95 58		sta $58,x			sta 	esInt2,x
.21f2	95 60		sta $60,x			sta 	esInt3,x
.21f4	a9 40		lda #$40			lda 	#$40
.21f6	95 40		sta $40,x			sta 	esType,x
.21f8	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.21f9					STRCompare:
.21f9	48		pha				pha 								; save A
.21fa	aa		tax				tax 								; put stack pos in X
.21fb	98		tya				tya
.21fc	48		pha				pha
.21fd	20 31 22	jsr $2231			jsr 	CopyStringPair
.2200	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2202	b1 04		lda ($04),y			lda 	(temp0),y
.2204	d1 06		cmp ($06),y			cmp 	(temp1),y
.2206	90 02		bcc $220a			bcc 	_SCNotSmaller
.2208	b1 06		lda ($06),y			lda 	(temp1),y
.220a					_SCNotSmaller:
.220a	aa		tax				tax 								; put that in X. We compare this many chars first.
.220b					_SCCompareLoop:
.220b	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.220d	f0 0c		beq $221b			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.220f	ca		dex				dex 								; decrement chars to compare.
.2210	c8		iny				iny 								; move to next character
.2211	38		sec				sec 								; calculate s1[y]-s2[y]
.2212	b1 04		lda ($04),y			lda 	(temp0),y
.2214	f1 06		sbc ($06),y			sbc 	(temp1),y
.2216	d0 0a		bne $2222			bne 	_SCReturnResult 			; if different return sign of A
.2218	4c 0b 22	jmp $220b			jmp 	_SCCompareLoop
.221b					_SCSameToEndShortest
.221b	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.221d	38		sec				sec
.221e	b1 04		lda ($04),y			lda 	(temp0),y
.2220	f1 06		sbc ($06),y			sbc 	(temp1),y
.2222					_SCReturnResult:
.2222	08		php				php 								; set return to zero preserving PSW.
.2223	a2 00		ldx #$00			ldx 	#0
.2225	28		plp				plp
.2226	f0 05		beq $222d			beq 	_SCExit 					; two values equal, then exit
.2228	ca		dex				dex 								; X = $FF
.2229	90 02		bcc $222d			bcc 	_SCExit 					; if 1st < 2nd then -1
.222b	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.222d					_SCExit:
.222d	68		pla				pla
.222e	a8		tay				tay
.222f	68		pla				pla
.2230	60		rts				rts
.2231					CopyStringPair:
.2231	b5 49		lda $49,x			lda 	esInt0+1,x
.2233	85 06		sta $06				sta 	temp1
.2235	b5 51		lda $51,x			lda 	esInt1+1,x
.2237	85 07		sta $07				sta 	temp1+1
.2239					CopyStringTop:
.2239	b5 48		lda $48,x			lda 	esInt0,x
.223b	85 04		sta $04				sta 	temp0
.223d	b5 50		lda $50,x			lda 	esInt1,x
.223f	85 05		sta $05				sta 	temp0+1
.2241	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2242					StringConcat:
.2242	aa		tax				tax									; stack pos in X
.2243	98		tya				tya
.2244	48		pha				pha
.2245	20 31 22	jsr $2231			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2248	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2249	a0 00		ldy #$00			ldy 	#0
.224b	b1 04		lda ($04),y			lda 	(temp0),y
.224d	71 06		adc ($06),y			adc 	(temp1),y
.224f	b0 1c		bcs $226d			bcs 	_SCError 					; just too many characters here.
.2251	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2253	b0 18		bcs $226d			bcs 	_SCError
.2255	20 91 22	jsr $2291			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2258	20 88 22	jsr $2288			jsr 	CopySoftToStack 			; copy that to the stack.
.225b	20 72 22	jsr $2272			jsr 	SCCopyTemp0 				; copy temp0
.225e	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.2260	85 04		sta $04				sta 	temp0
.2262	a5 07		lda $07				lda 	temp1+1
.2264	85 05		sta $05				sta 	temp0+1
.2266	20 72 22	jsr $2272			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2269	68		pla				pla
.226a	a8		tay				tay
.226b	8a		txa				txa 								; and A
.226c	60		rts				rts
.226d					_SCError:
.226d	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.226f	20 7d 21	jsr $217d		jsr	errorHandler
.2272					SCCopyTemp0:
.2272	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2274	b1 04		lda ($04),y			lda 	(temp0),y
.2276	85 08		sta $08				sta 	temp2
.2278					_SCCopyLoop:
.2278	a5 08		lda $08				lda 	temp2 						; done the lot
.227a	f0 0b		beq $2287			beq 	_SCCopyExit
.227c	c6 08		dec $08				dec 	temp2
.227e	c8		iny				iny 								; get next char
.227f	b1 04		lda ($04),y			lda 	(temp0),y
.2281	20 b7 22	jsr $22b7			jsr 	WriteSoftString 			; write to soft string.
.2284	4c 78 22	jmp $2278			jmp 	_SCCopyLoop
.2287					_SCCopyExit:
.2287	60		rts				rts
.2288					CopySoftToStack:
.2288	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.228a	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.228c	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.228e	95 50		sta $50,x			sta 	esInt1,x
.2290	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2291					AllocateSoftString:
.2291	85 0c		sta $0c				sta 	tempShort 					; save count
.2293	98		tya				tya
.2294	48		pha				pha
.2295	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2297	d0 09		bne $22a2			bne 	_ASSDone
.2299	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.229b	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.229d	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.229f	88		dey				dey
.22a0	84 7b		sty $7b				sty 	softMemAlloc+1
.22a2					_ASSDone:
.22a2	38		sec				sec 								; allocate downwards enough memory
.22a3	a5 7a		lda $7a				lda 	softMemAlloc
.22a5	e5 0c		sbc $0c				sbc 	tempShort
.22a7	85 7a		sta $7a				sta 	softMemAlloc
.22a9	a5 7b		lda $7b				lda 	softMemAlloc+1
.22ab	e9 00		sbc #$00			sbc 	#0
.22ad	85 7b		sta $7b				sta 	softMemAlloc+1
.22af	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.22b1	a8		tay				tay
.22b2	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.22b4	68		pla				pla
.22b5	a8		tay				tay
.22b6	60		rts				rts
.22b7					WriteSoftString:
.22b7	84 0c		sty $0c				sty 	tempShort 					; save Y
.22b9	48		pha				pha
.22ba	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.22bc	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.22be	18		clc				clc
.22bf	69 01		adc #$01			adc 	#1
.22c1	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.22c3	a8		tay				tay 								; pointer in Y
.22c4	68		pla				pla 								; get char and write.
.22c5	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.22c7	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.22c9	60		rts				rts
.22ca					StrClone:
.22ca	aa		tax				tax 								; set up stack.
.22cb	98		tya				tya
.22cc	48		pha				pha
.22cd	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.22cf	b1 04		lda ($04),y			lda 	(temp0),y
.22d1	18		clc				clc
.22d2	69 01		adc #$01			adc 	#1
.22d4	20 91 22	jsr $2291			jsr 	AllocateSoftString 			; allocate soft memory
.22d7	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.22d9	95 48		sta $48,x			sta 	esInt0,x
.22db	a5 7b		lda $7b				lda 	softMemAlloc+1
.22dd	95 50		sta $50,x			sta 	esInt1,x
.22df	a9 00		lda #$00			lda 	#0
.22e1	95 58		sta $58,x			sta 	esInt2,x
.22e3	95 60		sta $60,x			sta 	esInt3,x
.22e5	a9 40		lda #$40			lda 	#$40 						; set type to string.
.22e7	95 40		sta $40,x			sta 	esType,x
.22e9	20 72 22	jsr $2272			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.22ec	68		pla				pla
.22ed	a8		tay				tay
.22ee	8a		txa				txa
.22ef	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.22f0					StringSubstring:
.22f0	48		pha				pha
.22f1	aa		tax				tax 								; access stack.
.22f2	98		tya				tya
.22f3	48		pha				pha
.22f4	20 39 22	jsr $2239			jsr 	CopyStringTop 				; point temp0 to the string.
.22f7	a0 00		ldy #$00			ldy 	#0 							; get length.
.22f9	b1 04		lda ($04),y			lda 	(temp0),Y
.22fb	85 06		sta $06				sta 	temp1
.22fd	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.22ff	c5 06		cmp $06				cmp 	temp1 						;
.2301	f0 02		beq $2305			beq 	_SSBOkay
.2303	b0 2a		bcs $232f			bcs 	_SSBReturnNull
.2305					_SSBOkay:
.2305	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2307	18		clc				clc
.2308	69 01		adc #$01			adc 	#1
.230a	38		sec				sec
.230b	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.230d	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.230f	90 02		bcc $2313			bcc		_SSBTrunc
.2311	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2313					_SSBTrunc:
.2313	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2315	18		clc				clc
.2316	69 01		adc #$01			adc 	#1 							; add 1
.2318	20 91 22	jsr $2291			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.231b	20 88 22	jsr $2288			jsr 	CopySoftToStack 			; copy that to the stack.
.231e	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2320					_SSBCopyLoop:
.2320	a5 07		lda $07				lda 	temp1+1 					; done them all
.2322	f0 0e		beq $2332			beq 	_SSBExit
.2324	c6 07		dec $07				dec 	temp1+1
.2326	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2328	20 b7 22	jsr $22b7			jsr 	WriteSoftString
.232b	c8		iny				iny
.232c	4c 20 23	jmp $2320			jmp 	_SSBCopyLoop
.232f					_SSBReturnNull:
.232f	20 36 23	jsr $2336			jsr 	ReturnNull
.2332					_SSBExit:
.2332	68		pla				pla
.2333	a8		tay				tay
.2334	68		pla				pla
.2335	60		rts				rts
.2336					ReturnNull:
.2336	a9 00		lda #$00			lda 	#0 							; clear null string
.2338	8d cc 0a	sta $0acc			sta 	NullString
.233b	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.233d	95 48		sta $48,x			sta 	esInt0,x
.233f	a9 0a		lda #$0a			lda 	#NullString >> 8
.2341	95 50		sta $50,x			sta 	esInt1,x
.2343	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0afc					srcStrLen:
>0afc							.fill 	1
.2344					StringWrite:
.2344	aa		tax				tax
.2345	48		pha				pha
.2346	98		tya				tya
.2347	48		pha				pha
.2348	20 6f 23	jsr $236f			jsr 	CheckOverwriteCurrent
.234b	b0 0d		bcs $235a			bcs		_SWCopyCurrent
.234d	20 ad 23	jsr $23ad			jsr 	RequiresConcretion
.2350	90 0e		bcc $2360			bcc 	_SWWriteReference
.2352	20 10 24	jsr $2410			jsr 	CheckSpecialConcretion
.2355	b0 09		bcs $2360			bcs 	_SWWriteReference
.2357	20 c1 23	jsr $23c1			jsr 	AllocateHardMemory
.235a					_SWCopyCurrent:
.235a	20 f4 23	jsr $23f4			jsr 	CopyStringToHardMemory
.235d	4c 6b 23	jmp $236b			jmp 	_SWExit
.2360					_SWWriteReference
.2360	a0 00		ldy #$00			ldy 	#0
.2362	a5 04		lda $04				lda 	temp0
.2364	91 06		sta ($06),y			sta 	(temp1),y
.2366	c8		iny				iny
.2367	a5 05		lda $05				lda 	temp0+1
.2369	91 06		sta ($06),y			sta 	(temp1),y
.236b					_SWExit:
.236b	68		pla				pla
.236c	a8		tay				tay
.236d	68		pla				pla
.236e	60		rts				rts
.236f					CheckOverwriteCurrent:
.236f	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2371	b5 51		lda $51,x			lda 	esInt1+1,x
.2373	85 05		sta $05				sta 	temp0+1
.2375	b5 49		lda $49,x			lda 	esInt0+1,x
.2377	85 04		sta $04				sta 	temp0
.2379	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.237b	8d fc 0a	sta $0afc			sta 	srcStrLen
.237e	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2380	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2382	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2384	85 07		sta $07				sta 	temp1+1
.2386	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2388	b1 06		lda ($06),y			lda 	(temp1),y
.238a	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.238c	90 1b		bcc $23a9			bcc 	_COCFail 				; in hard memory.
.238e	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2390	b1 06		lda ($06),y			lda 	(temp1),y
.2392	e9 01		sbc #$01			sbc 	#1
.2394	85 08		sta $08				sta 	temp2
.2396	c8		iny				iny
.2397	b1 06		lda ($06),y			lda 	(temp1),y
.2399	e9 00		sbc #$00			sbc 	#0
.239b	85 09		sta $09				sta 	temp2+1
.239d	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.239f	b1 08		lda ($08),y			lda 	(temp2),y
.23a1	38		sec				sec  							; maximum character capacity.
.23a2	e9 02		sbc #$02			sbc 	#2
.23a4	cd fc 0a	cmp $0afc			cmp 	srcStrLen 				; if >= the required length
.23a7	b0 02		bcs $23ab			bcs 	_COCCanReuse
.23a9					_COCFail:
.23a9	18		clc				clc
.23aa	60		rts				rts
.23ab					_COCCanReuse:
.23ab	38		sec				sec
.23ac	60		rts				rts
.23ad					RequiresConcretion:
.23ad	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.23af	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.23b1	b0 0a		bcs $23bd			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.23b3	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.23b5	f0 08		beq $23bf			beq 	_RCFail 				; if not, this cannot be soft memory.
.23b7	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.23b9	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.23bb	90 02		bcc $23bf			bcc 	_RCFail 				; so concreting
.23bd					_RCSucceed:
.23bd	38		sec				sec
.23be	60		rts				rts
.23bf					_RCFail:
.23bf	18		clc				clc
.23c0	60		rts				rts
.23c1					AllocateHardMemory:
.23c1	98		tya				tya
.23c2	48		pha				pha
.23c3	ad fc 0a	lda $0afc			lda 	srcStrLen 				; characters in string
.23c6	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.23c8	b0 04		bcs $23ce			bcs 	_AHMSetMax 				; max out that amount.
.23ca	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.23cc	90 02		bcc $23d0			bcc 	_AHMIsOkay
.23ce					_AHMSetMax:
.23ce	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.23d0					_AHMIsOkay:
.23d0	48		pha				pha
.23d1	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.23d3	38		sec				sec  							; and copy result to TOS as target address.
.23d4	65 0d		adc $0d				adc 	highMemory
.23d6	85 0d		sta $0d				sta 	highMemory
.23d8	a5 0e		lda $0e				lda 	highMemory+1
.23da	69 ff		adc #$ff			adc 	#$FF
.23dc	85 0e		sta $0e				sta 	highMemory+1
.23de	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.23e0	68		pla				pla 							; get the total size of the storage block
.23e1	91 0d		sta ($0d),y			sta 	(highMemory),y
.23e3	18		clc				clc
.23e4	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.23e6	69 01		adc #$01			adc 	#1
.23e8	91 06		sta ($06),y			sta 	(temp1),y
.23ea	a5 0e		lda $0e				lda 	highMemory+1
.23ec	69 00		adc #$00			adc 	#0
.23ee	c8		iny				iny
.23ef	91 06		sta ($06),y			sta 	(temp1),y
.23f1	68		pla				pla
.23f2	a8		tay				tay
.23f3	60		rts				rts
.23f4					CopyStringToHardMemory:
.23f4	98		tya				tya
.23f5	48		pha				pha
.23f6	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.23f8	b1 06		lda ($06),y			lda 	(temp1),y
.23fa	85 08		sta $08				sta 	temp2
.23fc	c8		iny				iny
.23fd	b1 06		lda ($06),y			lda 	(temp1),y
.23ff	85 09		sta $09				sta 	temp2+1
.2401	ac fc 0a	ldy $0afc			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2404					_CSTHMLoop:
.2404	b1 04		lda ($04),y			lda 	(temp0),y
.2406	91 08		sta ($08),y			sta 	(temp2),y
.2408	88		dey				dey
.2409	c0 ff		cpy #$ff			cpy 	#$FF
.240b	d0 f7		bne $2404			bne 	_CSTHMLoop
.240d	68		pla				pla
.240e	a8		tay				tay
.240f	60		rts				rts
.2410					CheckSpecialConcretion:
.2410	ad fc 0a	lda $0afc			lda 	srcStrLen 				; check string is null.
.2413	f0 02		beq $2417			beq 	_CSCNullString
.2415	18		clc				clc
.2416	60		rts				rts
.2417					_CSCNullString:
.2417	a9 00		lda #$00			lda 	#0
.2419	8d cc 0a	sta $0acc			sta 	NullString
.241c	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.241e	85 04		sta $04				sta 	temp0
.2420	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2422	85 05		sta $05				sta 	1+(temp0)
.2424	38		sec				sec
.2425	60		rts				rts

;******  Return to file: string/string.asm

.2426					stringHandler:
.2426	7c 29 24	jmp ($2429,x)			jmp 	(stringVectors,x)
.2429					stringVectors:
>2429	d7 21					.word StringChrs           ; index 0
>242b	ca 22					.word StrClone             ; index 2
>242d	42 22					.word StringConcat         ; index 4
>242f	f9 21					.word STRCompare           ; index 6
>2431	f0 22					.word StringSubstring      ; index 8
>2433	44 23					.word StringWrite          ; index 10

;******  Return to file: basic.asm

.2435					section_end_string:
.2435					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.2435					tokeniserHandler:
.2435	7c 38 24	jmp ($2438,x)			jmp 	(tokeniserVectors,x)
.2438					tokeniserVectors:

;******  Return to file: basic.asm

.2438					section_end_tokeniser:
.2438					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afd					varHash:
>0afd							.fill	1
.0afe					varType:
>0afe							.fill 	1
.0aff					varEnd:
>0aff							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2438					AccessVariable:
.2438	aa		tax				tax 								; stack in X
.2439	c8		iny				iny
.243a	b1 02		lda ($02),y			lda 	(codePtr),y
.243c	88		dey				dey
.243d	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.243f	d0 15		bne $2456			bne 	_AVLong
.2441	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.2443	38		sec				sec 	 							; make it 0-25
.2444	e9 01		sbc #$01			sbc 	#1
.2446	0a		asl a				asl 	a 							; x 4 is LSB of address
.2447	0a		asl a				asl 	a
.2448	95 48		sta $48,x			sta 	esInt0,x
.244a	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.244c	95 50		sta $50,x			sta 	esInt1,x
.244e	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.2450	95 40		sta $40,x			sta 	esType,x
.2452	c8		iny				iny 								; skip over the variable reference in the code.
.2453	c8		iny				iny
.2454	8a		txa				txa 								; stack in A to return.
.2455	60		rts				rts
.2456					_AVLong:
.2456	8a		txa				txa
.2457	48		pha				pha
.2458	20 96 24	jsr $2496			jsr 	AccessSetup 				; set up the basic stuff.
.245b	20 49 25	jsr $2549			jsr 	FindVariable 				; does the variable exist already
.245e	b0 0e		bcs $246e			bcs 	_AVFound
.2460	ad fe 0a	lda $0afe			lda 	varType 					; is the variable type an array
.2463	4a		lsr a				lsr 	a
.2464	90 05		bcc $246b			bcc 	_AVCanCreate
.2466	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.2468	20 7d 21	jsr $217d		jsr	errorHandler
.246b					_AVCanCreate:
.246b	20 d3 24	jsr $24d3			jsr 	CreateVariable 				; no, create it.
.246e					_AVFound:
.246e	68		pla				pla
.246f	aa		tax				tax
.2470	18		clc				clc 								; copy temp0 (variable record address)
.2471	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.2473	69 05		adc #$05			adc 	#5
.2475	95 48		sta $48,x			sta 	esInt0,x
.2477	a5 05		lda $05				lda 	temp0+1
.2479	69 00		adc #$00			adc 	#0
.247b	95 50		sta $50,x			sta 	esInt1,x
.247d	a9 00		lda #$00			lda 	#0
.247f	95 58		sta $58,x			sta 	esInt2,x
.2481	95 60		sta $60,x			sta 	esInt3,x
.2483	ac fe 0a	ldy $0afe			ldy 	varType 					; get the type ID from the type.
.2486	b9 56 24	lda $2456,y			lda 	_AVTypeTable-$3A,y
.2489	95 40		sta $40,x			sta 	esType,x
.248b	ac ff 0a	ldy $0aff			ldy 	varEnd 						; restore Y
.248e	8a		txa				txa 								; return stack in A and return
.248f	60		rts				rts
.2490					_AVTypeTable:
>2490	80 80						.byte 	$80,$80						; integer
>2492	c0 c0						.byte 	$C0,$C0 					; string
>2494	81 81						.byte 	$81,$81 					; float
.2496					AccessSetup:
.2496	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.2498	8d fd 0a	sta $0afd			sta 	varHash
.249b	98		tya				tya
.249c	48		pha				pha
.249d	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.249f	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.24a1	b0 0b		bcs $24ae			bcs 	_ASComplete
.24a3	18		clc				clc 								; add to the hash. Might improve this.
.24a4	6d fd 0a	adc $0afd			adc 	varHash
.24a7	8d fd 0a	sta $0afd			sta 	varHash
.24aa	c8		iny				iny 								; next character
.24ab	4c 9d 24	jmp $249d			jmp 	_ASLoop
.24ae					_ASComplete:
.24ae	8d fe 0a	sta $0afe			sta 	varType 					; save variable type byte
.24b1	c8		iny				iny
.24b2	8c ff 0a	sty $0aff			sty 	varEnd 						; save the ending position.
.24b5	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.24b6	e9 3a		sbc #$3a			sbc 	#$3A
.24b8	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.24b9	0a		asl a				asl 	a
.24ba	0a		asl a				asl 	a
.24bb	0a		asl a				asl 	a 							; 2 bytes/word
.24bc	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.24be	ad fd 0a	lda $0afd			lda 	varHash 					; get hash
.24c1	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.24c3	0a		asl a				asl  	a 							; x 2 (for word) and CC
.24c4	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.24c6	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.24c8	85 7c		sta $7c				sta 	hashList
.24ca	a9 0a		lda #$0a			lda 	#hashTables >> 8
.24cc	69 00		adc #$00			adc 	#0
.24ce	85 7d		sta $7d				sta 	hashList+1
.24d0	68		pla				pla
.24d1	a8		tay				tay
.24d2	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.24d3					CreateVariable:
.24d3	98		tya				tya 								; push Y on the stack twice.
.24d4	48		pha				pha
.24d5	48		pha				pha
.24d6	ae fe 0a	ldx $0afe			ldx 	varType 					; get var type 0-5
.24d9	bd 09 25	lda $2509,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.24dc	48		pha				pha 								; save length
.24dd	a8		tay				tay 								; put into Y.
.24de	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.24e0	85 04		sta $04				sta 	temp0
.24e2	a5 10		lda $10				lda 	lowMemory+1
.24e4	85 05		sta $05				sta 	temp0+1
.24e6	68		pla				pla 								; get length
.24e7	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.24ea					_CVClear:
.24ea	88		dey				dey
.24eb	a9 00		lda #$00			lda 	#0
.24ed	91 04		sta ($04),y			sta 	(temp0),y
.24ef	c0 04		cpy #$04			cpy 	#4
.24f1	d0 f7		bne $24ea			bne 	_CVClear
.24f3	ad fd 0a	lda $0afd			lda 	varHash 					; store hash at offset 4.
.24f6	91 04		sta ($04),y			sta 	(temp0),y
.24f8	68		pla				pla 								; offset, work out where the variable name is.
.24f9	18		clc				clc
.24fa	65 02		adc $02				adc 	codePtr
.24fc	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.24fe	91 04		sta ($04),y			sta 	(temp0),y
.2500	a5 03		lda $03				lda 	codePtr+1
.2502	69 00		adc #$00			adc 	#0
.2504	c8		iny				iny
.2505	91 04		sta ($04),y			sta 	(temp0),y
.2507	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.2509	b1 7c		lda ($7c),y			lda 	(hashList),y
.250b	91 04		sta ($04),y			sta 	(temp0),y
.250d	c8		iny				iny
.250e	b1 7c		lda ($7c),y			lda 	(hashList),y
.2510	91 04		sta ($04),y			sta 	(temp0),y
.2512	a5 05		lda $05				lda 	temp0+1 					; set new link
.2514	91 7c		sta ($7c),y			sta 	(hashList),y
.2516	88		dey				dey
.2517	a5 04		lda $04				lda 	temp0
.2519	91 7c		sta ($7c),y			sta 	(hashList),y
.251b	ad fe 0a	lda $0afe			lda 	varType 					; is it a string ($3C)
.251e	c9 3e		cmp #$3e			cmp 	#$3E
.2520	f0 17		beq $2539			beq 	_CVDefaultFloat0
.2522	c9 3c		cmp #$3c			cmp 	#$3C
.2524	d0 1a		bne $2540			bne 	_CVNoDefaultNull
.2526	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.2528	8d cc 0a	sta $0acc			sta 	NullString
.252b	a0 05		ldy #$05			ldy 	#5
.252d	a9 cc		lda #$cc			lda 	#NullString & $FF
.252f	91 04		sta ($04),y			sta 	(temp0),y
.2531	a9 0a		lda #$0a			lda 	#NullString >> 8
.2533	c8		iny				iny
.2534	91 04		sta ($04),y			sta 	(temp0),y
.2536	4c 40 25	jmp $2540			jmp 	_CVNoDefaultNull
.2539					_CVDefaultFloat0:
.2539	a0 05		ldy #$05			ldy 	#5
.253b	a2 1e		ldx #$1e		ldx	#30
.253d	20 cf 21	jsr $21cf		jsr	floatingpointHandler
.2540					_CVNoDefaultNull:
.2540	68		pla				pla
.2541	a8		tay				tay
.2542	60		rts				rts
>2543	09 09				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarISize 					; <storage for integer>
>2545	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarSSize 					; <storage for string>
>2547	0b 0b						.byte 	VarHSize+VarFSize,VarHSize+VarFSize 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2549					FindVariable:
.2549	98		tya				tya
.254a	48		pha				pha
.254b	98		tya				tya 								; point temp2 to the actual name.
.254c	18		clc				clc
.254d	65 02		adc $02				adc 	codePtr
.254f	85 08		sta $08				sta 	temp2
.2551	a5 03		lda $03				lda 	codePtr+1
.2553	69 00		adc #$00			adc 	#0
.2555	85 09		sta $09				sta 	temp2+1
.2557	a0 00		ldy #$00			ldy 	#0
.2559	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.255b	85 04		sta $04				sta 	temp0
.255d	a5 7d		lda $7d				lda 	hashList+1
.255f	85 05		sta $05				sta 	temp0+1
.2561	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2563	b1 04		lda ($04),y			lda 	(temp0),y
.2565	f0 2c		beq $2593			beq 	_FVFail
.2567	aa		tax				tax
.2568	88		dey				dey		 							; get LSB
.2569	b1 04		lda ($04),y			lda 	(temp0),y
.256b	85 04		sta $04				sta 	temp0 						; update pointer.
.256d	86 05		stx $05				stx 	temp0+1
.256f	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2571	b1 04		lda ($04),y			lda 	(temp0),y
.2573	cd fd 0a	cmp $0afd			cmp 	varHash
.2576	d0 e9		bne $2561			bne 	_FVNext 					; if not, no point in checking the name.
.2578	88		dey				dey 								; copy name pointer to temp1.
.2579	b1 04		lda ($04),y			lda 	(temp0),y
.257b	85 07		sta $07				sta 	temp1+1
.257d	88		dey				dey
.257e	b1 04		lda ($04),y			lda 	(temp0),y
.2580	85 06		sta $06				sta 	temp1
.2582	a0 00		ldy #$00			ldy 	#0
.2584					_FVCheck:
.2584	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2586	d1 08		cmp ($08),y			cmp 	(temp2),y
.2588	d0 d7		bne $2561			bne 	_FVNext		 				; fail if different.
.258a	c8		iny				iny
.258b	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.258d	90 f5		bcc $2584			bcc 	_FVCheck
.258f	68		pla				pla
.2590	a8		tay				tay
.2591	38		sec				sec
.2592	60		rts				rts
.2593					_FVFail:
.2593	68		pla				pla
.2594	a8		tay				tay
.2595	18		clc				clc
.2596	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2597					HashTableReset:
.2597	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2599	a9 00		lda #$00			lda 	#0
.259b					_HTRClear:
.259b	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.259e	ca		dex				dex
.259f	d0 fa		bne $259b			bne 	_HTRClear
.25a1	60		rts				rts

;******  Return to file: variable/variable.asm

.25a2					variableHandler:
.25a2	7c a5 25	jmp ($25a5,x)			jmp 	(variableVectors,x)
.25a5					variableVectors:
>25a5	38 24					.word AccessVariable       ; index 0
>25a7	97 25					.word HashTableReset       ; index 2

;******  Return to file: basic.asm

.25a9					section_end_variable:

;******  End of listing
