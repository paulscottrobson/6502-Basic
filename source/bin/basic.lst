
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Sat Mar 13 06:50:18 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	b0 34						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 3a		lda #$3a			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 64 11	jsr $1164		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 d0 16	jsr $16d0		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 dc 36	jsr $36dc		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.102d					assemblerHandler:
.102d	7c 30 10	jmp ($1030,x)			jmp 	(assemblerVectors,x)
.1030					assemblerVectors:

;******  Return to file: basic.asm

.1030					section_end_assembler:
.1030					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.1030					X16Break:
.1030	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.1033	f0 01		beq $1036			beq 	_IsBreak
.1035	60		rts				rts
.1036					_IsBreak:
.1036	a2 20		ldx #$20			ldx 	#ErrorID_Break
.1038	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.103b					ExternSave:
.103b	98		tya				tya
.103c	48		pha				pha
.103d	20 8b 10	jsr $108b			jsr 	ExternGetLength 			; get length of file into A name YX
.1040	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1043	a9 01		lda #$01			lda 	#1
.1045	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1047	a0 00		ldy #$00			ldy 	#0
.1049	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.104c	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.104e	85 2a		sta $2a				sta 	temp0
.1050	a5 51		lda $51				lda 	esInt1+1
.1052	85 2b		sta $2b				sta 	temp0+1
.1054	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.1056	a4 52		ldy $52				ldy 	esInt1+2
.1058	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.105a	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.105d	b0 03		bcs $1062			bcs 	_ESSave
.105f	68		pla				pla
.1060	a8		tay				tay
.1061	60		rts				rts
.1062					_ESSave:
.1062	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.1064	20 85 11	jsr $1185		jsr	errorHandler
.1067					ExternLoad:
.1067	98		tya				tya
.1068	48		pha				pha
.1069	20 8b 10	jsr $108b			jsr 	ExternGetLength 			; get length of file into A name YX
.106c	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.106f	a9 01		lda #$01			lda 	#1
.1071	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1073	a0 00		ldy #$00			ldy 	#0
.1075	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1078	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.107a	a4 51		ldy $51				ldy 	esInt1+1
.107c	a9 00		lda #$00			lda 	#0 							; load command
.107e	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1081	b0 03		bcs $1086			bcs 	_ESLoad
.1083	68		pla				pla
.1084	a8		tay				tay
.1085	60		rts				rts
.1086					_ESLoad:
.1086	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.1088	20 85 11	jsr $1185		jsr	errorHandler
.108b					ExternGetLength:
.108b	a5 48		lda $48				lda 	esInt0 						; length into A.
.108d	85 2a		sta $2a				sta 	temp0
.108f	a5 50		lda $50				lda 	esInt1
.1091	85 2b		sta $2b				sta 	temp0+1
.1093	a0 00		ldy #$00			ldy 	#0
.1095	b1 2a		lda ($2a),y			lda 	(temp0),y
.1097	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.1099	a4 50		ldy $50				ldy 	esInt1
.109b	e8		inx				inx 								; advance over the length pointer.
.109c	d0 01		bne $109f			bne 	_ESNoCarry
.109e	c8		iny				iny
.109f					_ESNoCarry:
.109f	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af2					bufferCount:
>0af2							.fill 	0
.0af2					bufferStorage:
>0af2							.fill 	MaxLineInputSize
.10a0					IOInitialise:
.10a0	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.10a2	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10a5	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.10a7	20 f7 10	jsr $10f7			jsr 	IOInk
.10aa	a9 00		lda #$00			lda 	#0
.10ac	20 0b 11	jsr $110b			jsr 	IOPaper
.10af	20 b3 10	jsr $10b3			jsr 	IOClearScreen
.10b2	60		rts				rts
.10b3					IOClearScreen:
.10b3	48		pha				pha
.10b4	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.10b6	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					IONewLine:
.10bb	48		pha				pha
.10bc	a9 0d		lda #$0d			lda 	#13
.10be	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10c1	68		pla				pla
.10c2	60		rts				rts
.10c3					IOTab:
.10c3	48		pha				pha
.10c4	a9 20		lda #$20			lda 	#32
.10c6	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10c9	68		pla				pla
.10ca	60		rts				rts
.10cb					IOPrintAscii:
.10cb					IOPrintChar:
.10cb	aa		tax				tax 								; save in X so we can save Y
.10cc	5a		phy				phy
.10cd	8a		txa				txa
.10ce	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.10d0	d0 02		bne $10d4			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.10d2	a9 14		lda #$14			lda 	#$14
.10d4					_IOPCNotBS:
.10d4	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.10d7	7a		ply				ply
.10d8	60		rts				rts
.10d9					IOInkey:
.10d9	98		tya				tya
.10da	48		pha				pha
.10db	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.10de	85 32		sta $32				sta 	tempShort
.10e0	68		pla				pla
.10e1	a8		tay				tay
.10e2	a5 32		lda $32				lda 	tempShort					; no key pressed.
.10e4	f0 10		beq $10f6			beq 	_IOIExit
.10e6	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.10e8	f0 0c		beq $10f6			beq 	_IOIExit
.10ea	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.10ec	f0 06		beq $10f4			beq 	_IOIBackspace
.10ee	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.10f0	90 e7		bcc $10d9			bcc 	IOInkey
.10f2	b0 02		bcs $10f6			bcs 	_IOIExit
.10f4					_IOIBackspace:
.10f4	a9 08		lda #$08			lda 	#8 							; return chr(8)
.10f6					_IOIExit:
.10f6	60		rts				rts
.10f7					IOInk:
.10f7	48		pha				pha
.10f8	29 07		and #$07			and 	#7 							; 8 primaries
.10fa	aa		tax				tax
.10fb	bd 03 11	lda $1103,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.10fe	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1101	68		pla				pla
.1102	60		rts				rts
.1103					_IOColourTable:
>1103	90						.byte 	$90 					; 0 Black
>1104	96						.byte 	$96 					; 1 Red
>1105	1e						.byte 	$1E 					; 2 Green
>1106	9e						.byte 	$9E 					; 3 Yellow
>1107	9a						.byte 	$9A 					; 4 Blue
>1108	9c						.byte 	$9C 					; 5 Magenta
>1109	9f						.byte 	$9F 					; 6 Cyan
>110a	05						.byte 	$05 					; 7 White
.110b					IOPaper:
.110b	48		pha				pha
.110c	48		pha				pha
.110d	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.110f	20 cb 10	jsr $10cb			jsr 	IOPrintChar 			; and then swap them again.
.1112	68		pla				pla
.1113	20 f7 10	jsr $10f7			jsr 	IOInk
.1116	a9 01		lda #$01			lda 	#1
.1118	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.111b	68		pla				pla
.111c	60		rts				rts
.111d					IOLocate:
.111d	48		pha				pha
.111e	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1120	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1123	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1125	20 2c 11	jsr $112c			jsr 	_IOLoc2
.1128	68		pla				pla
.1129	a8		tay				tay
.112a	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.112c					_IOLoc2:
.112c	c0 00		cpy #$00			cpy 	#0
.112e	f0 06		beq $1136			beq 	_IOLocExit
.1130	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1133	88		dey				dey
.1134	d0 f6		bne $112c			bne 	_IOLoc2
.1136					_IOLocExit:
.1136	60		rts				rts
.1137					IOInput:
.1137	a9 00		lda #$00			lda 	#0
.1139	8d f2 0a	sta $0af2			sta 	bufferCount
.113c					_IOILoop:
.113c	20 cf ff	jsr $ffcf			jsr 	$FFCF
.113f	c9 0d		cmp #$0d			cmp 	#13
.1141	f0 10		beq $1153			beq 	_IOIExit
.1143	ae f2 0a	ldx $0af2			ldx 	bufferCount
.1146	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.1148	f0 f2		beq $113c			beq 	_IOILoop
.114a	ee f2 0a	inc $0af2			inc 	bufferCount
.114d	9d f3 0a	sta $0af3,x			sta 	bufferStorage+1,x
.1150	4c 3c 11	jmp $113c			jmp 	_IOILoop
.1153					_IOIExit:
.1153	a9 f2		lda #$f2			lda 	#(bufferCount) & $FF
.1155	85 2a		sta $2a				sta 	temp0
.1157	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.1159	85 2b		sta $2b				sta 	1+(temp0)
.115b	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.115c					IOReadTimer:
.115c	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.115f	48		pha				pha
.1160	8a		txa				txa
.1161	a8		tay				tay
.1162	68		pla				pla
.1163	60		rts				rts

;******  Return to file: device/device.asm

.1164					deviceHandler:
.1164	7c 67 11	jmp ($1167,x)			jmp 	(deviceVectors,x)
.1167					deviceVectors:
>1167	30 10					.word X16Break             ; index 0
>1169	b3 10					.word IOClearScreen        ; index 2
>116b	bb 10					.word IONewLine            ; index 4
>116d	a0 10					.word IOInitialise         ; index 6
>116f	f7 10					.word IOInk                ; index 8
>1171	d9 10					.word IOInkey              ; index 10
>1173	37 11					.word IOInput              ; index 12
>1175	67 10					.word ExternLoad           ; index 14
>1177	1d 11					.word IOLocate             ; index 16
>1179	0b 11					.word IOPaper              ; index 18
>117b	cb 10					.word IOPrintChar          ; index 20
>117d	cb 10					.word IOPrintAscii         ; index 22
>117f	3b 10					.word ExternSave           ; index 24
>1181	c3 10					.word IOTab                ; index 26
>1183	5c 11					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.1185					section_end_device:
.1185					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1185					ErrorHandler:
.1185	8a		txa				txa
.1186	48		pha				pha
.1187	a9 01		lda #$01			lda 	#1 							; red
.1189	a2 08		ldx #$08		ldx	#8
.118b	20 64 11	jsr $1164		jsr	deviceHandler
.118e	68		pla				pla
.118f	aa		tax				tax
.1190	a9 fb		lda #$fb			lda 	#(ErrorTextList) & $FF
.1192	85 2a		sta $2a				sta 	temp0
.1194	a9 11		lda #$11			lda 	#(ErrorTextList) >> 8
.1196	85 2b		sta $2b				sta 	1+(temp0)
.1198	ca		dex		_EHFind:dex									; errors start at 1
.1199	f0 10		beq $11ab			beq 	_EHFound
.119b	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.119d	38		sec				sec
.119e	a5 2a		lda $2a				lda 	temp0
.11a0	71 2a		adc ($2a),y			adc 	(temp0),y
.11a2	85 2a		sta $2a				sta 	temp0
.11a4	90 f2		bcc $1198			bcc 	_EHFind
.11a6	e6 2b		inc $2b				inc 	temp0+1
.11a8	4c 98 11	jmp $1198			jmp 	_EHFind
.11ab					_EHFound:
.11ab	20 4c 14	jsr $144c			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.11ae	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.11b0	b1 28		lda ($28),y			lda 	(codePtr),y
.11b2	f0 39		beq $11ed			beq 	_EHNoLine
.11b4	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.11b6	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.11b9	90 32		bcc $11ed			bcc 	_EHNoLine
.11bb	a9 f7		lda #$f7			lda 	#(EHAtMsg) & $FF
.11bd	85 2a		sta $2a				sta 	temp0
.11bf	a9 11		lda #$11			lda 	#(EHAtMsg) >> 8
.11c1	85 2b		sta $2b				sta 	1+(temp0)
.11c3	20 4c 14	jsr $144c			jsr 	EHPrintAscii
.11c6	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.11c8	a2 00		ldx #$00			ldx 	#0
.11ca	b1 28		lda ($28),y			lda 	(codePtr),y
.11cc	95 48		sta $48,x			sta 	esInt0,x
.11ce	c8		iny				iny
.11cf	b1 28		lda ($28),y			lda 	(codePtr),y
.11d1	95 50		sta $50,x			sta 	esInt1,x
.11d3	a9 00		lda #$00			lda 	#0
.11d5	95 58		sta $58,x			sta 	esInt2,x
.11d7	95 60		sta $60,x			sta 	esInt3,x
.11d9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.11db	85 2a		sta $2a				sta 	temp0
.11dd	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11df	85 2b		sta $2b				sta 	1+(temp0)
.11e1	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.11e3	a9 00		lda #$00			lda 	#0							; stack position zero.
.11e5	a2 0c		ldx #$0c		ldx	#12
.11e7	20 37 2d	jsr $2d37		jsr	mainHandler
.11ea	20 4c 14	jsr $144c			jsr 	EHPrintAscii
.11ed					_EHNoLine:
.11ed	a2 04		ldx #$04		ldx	#4
.11ef	20 64 11	jsr $1164		jsr	deviceHandler
.11f2	a2 02		ldx #$02		ldx	#2
.11f4	20 d0 16	jsr $16d0		jsr	interactionHandler
.11f7					EHAtMsg:
>11f7	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.11fb					ErrorTextList:
>11fb	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1203	20 6e 6f 74 20 50 72 65 73 65 6e 74
>120f	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1217	45 72 72 6f 72
>121c	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>1224	64 69 73 61 62 6c 65 64
>122c	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>1234	6f 6e 20 66 61 69 6c 65 64
>123d	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>1245	42 79 20 5a 65 72 6f
>124c	04 53 74 6f 70				.text 4,"Stop"
>1251	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>1259	73 6d 61 74 63 68
>125f	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1267	20 56 61 6c 75 65
>126d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1275	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1283	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>128b	20 63 6f 6d 6d 61
>1291	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1299	20 72 65 66 65 72 65 6e 63 65
>12a3	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>12ab	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>12b9	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>12c1	74 6f 6f 20 6c 6f 6e 67
>12c9	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>12d1	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>12de	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>12e6	69 74 68 6f 75 74 20 52 45 50 45 41 54
>12f3	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>12fb	74 68 6f 75 74 20 46 4f 52
>1304	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>130c	74 68 6f 75 74 20 57 48 49 4c 45
>1317	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>131f	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>132c	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>1334	54 20 69 6e 64 65 78
>133b	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>1343	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>1353	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>135b	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>136a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1372	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1382	63 65
>1384	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>138c	20 50 72 6f 63 65 64 75 72 65
>1396	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>139e	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>13ae	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>13b6	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>13c4	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>13cc	75 69 72 65 73 20 61 72 72 61 79
>13d7	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>13df	61 79 20 69 6e 64 65 78
>13e7	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>13ef	64 61 74 61
>13f3	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>13fb	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1408	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1410	69 6c 65 64
>1414	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>141c	69 6c 65 64
>1420	05 42 72 65 61 6b			.text 5,"Break"
>1426	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>142e	6d 65 6d 6f 72 79
>1434	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>143c	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>144b	00					.byte 0

;******  Return to file: error/errorhandler.asm

.144c					EHPrintAscii:
.144c	a0 00		ldy #$00			ldy 	#0
.144e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1450	aa		tax				tax
.1451	f0 0f		beq $1462			beq 	_EHPExit
.1453					_EHPLoop:
.1453	c8		iny				iny
.1454	8a		txa				txa
.1455	48		pha				pha
.1456	b1 2a		lda ($2a),y			lda 	(temp0),y
.1458	a2 16		ldx #$16		ldx	#22
.145a	20 64 11	jsr $1164		jsr	deviceHandler
.145d	68		pla				pla
.145e	aa		tax				tax
.145f	ca		dex				dex
.1460	d0 f1		bne $1453			bne 	_EHPLoop
.1462					_EHPExit:
.1462	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1463					section_end_error:
.1463					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1463					ExtensionHandler:
.1463	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1465	d0 08		bne $146f			bne 	_ExtensionUnary 			; is passed in A.
.1467	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1469	c8		iny				iny
.146a	0a		asl a				asl 	a
.146b	aa		tax				tax
.146c	7c 6d 14	jmp ($146d,x)			jmp 	(Group2Vectors-12,x)
.146f					_ExtensionUnary:
.146f	48		pha				pha 								; save stack pos in A
.1470	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1472	c8		iny				iny
.1473	0a		asl a				asl 	a
.1474	aa		tax				tax
.1475	68		pla				pla 								; restore stack pos and call group3 command.
.1476	7c 73 14	jmp ($1473,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1479					Group2Vectors:
>1479	8b 14					.word	Command_VPoke            ; $86 vpoke
>147b	8e 14					.word	Command_VDoke            ; $87 vdoke
>147d	92 1e					.word	Unimplemented            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.147f					Group3Vectors:
>147f	cf 14					.word	Command_VPeek            ; $86 vpeek(
>1481	d2 14					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1483					XEvaluateInteger:
.1483	8a		txa				txa
.1484	a2 06		ldx #$06		ldx	#6
.1486	20 37 2d	jsr $2d37		jsr	mainHandler
.1489	aa		tax				tax
.148a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.148b					Command_VPoke:
.148b	38		sec				sec 						; one byte , CS
.148c	b0 01		bcs $148f			bcs 	CmdVideoWrite
.148e					Command_VDoke:
.148e	18		clc				clc 						; two bytes, CC
.148f					CmdVideoWrite:
.148f	08		php				php 						; save one or two btes
.1490	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1492	20 83 14	jsr $1483			jsr 	XEvaluateInteger
.1495	20 50 2c	jsr $2c50			jsr 	CheckComma
.1498	e8		inx				inx
.1499	20 83 14	jsr $1483			jsr 	XEvaluateInteger
.149c	ca		dex				dex
.149d	20 ae 14	jsr $14ae			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.14a0	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.14a2	8d 23 9f	sta $9f23			sta 	$9F23
.14a5	28		plp				plp 						; if it was Poke then exit
.14a6	b0 05		bcs $14ad			bcs 	_CVWExit
.14a8	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.14aa	8d 23 9f	sta $9f23			sta 	$9F23
.14ad					_CVWExit:
.14ad	60		rts				rts
.14ae					SetUpTOSVRamAddress:
.14ae	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.14b0	29 01		and #$01			and 	#1
.14b2	15 60		ora $60,x			ora 	esInt3,x
.14b4	d0 14		bne $14ca			bne 	CVWValue
.14b6	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.14b8	8d 20 9f	sta $9f20			sta 	$9F20
.14bb	b5 50		lda $50,x			lda 	esInt1,x
.14bd	8d 21 9f	sta $9f21			sta	 	$9F21
.14c0	b5 58		lda $58,x			lda 	esInt2,x
.14c2	29 01		and #$01			and 	#1
.14c4	09 10		ora #$10			ora 	#$10 				; step 1.
.14c6	8d 22 9f	sta $9f22			sta 	$9F22
.14c9	60		rts				rts
.14ca					CVWValue:
.14ca	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.14cc	20 85 11	jsr $1185		jsr	errorHandler
.14cf					Command_VPeek:
.14cf	38		sec				sec 						; one byte , CS
.14d0	b0 01		bcs $14d3			bcs 	CmdVideoRead
.14d2					Command_VDeek:
.14d2	18		clc				clc 						; two bytes, CC
.14d3					CmdVideoRead:
.14d3	08		php				php 						; save action on stack.
.14d4	aa		tax				tax 						; save stack position
.14d5	20 83 14	jsr $1483			jsr 	XEvaluateInteger 	; address
.14d8	20 43 2c	jsr $2c43			jsr 	CheckRightParen 	; closing right bracket.
.14db	20 ae 14	jsr $14ae			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.14de	20 d0 2b	jsr $2bd0			jsr 	MInt32False 		; zero return.
.14e1	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.14e4	95 48		sta $48,x			sta 	esInt0,x
.14e6	28		plp				plp 						; check if DOKE (carry was clear)
.14e7	b0 05		bcs $14ee			bcs 	_CVRExit
.14e9	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.14ec	95 50		sta $50,x			sta 	esInt1,x
.14ee					_CVRExit:
.14ee	8a		txa				txa 						; return X position.
.14ef	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.14f0					section_end_extension:
.14f0					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.14f0					floatingpointHandler:
.14f0	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.14f2	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: basic.asm

.14f5					section_end_floatingpoint:
.14f5					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.14f5					ColdStartEntry:
.14f5	a2 ff		ldx #$ff			ldx 	#$FF
.14f7	9a		txs				txs
.14f8	a2 02		ldx #$02		ldx	#2
.14fa	20 64 11	jsr $1164		jsr	deviceHandler
.14fd	a0 ff		ldy #$ff			ldy 	#255
.14ff					_CSBanner:
.14ff	c8		iny				iny
.1500	b9 26 15	lda $1526,y			lda 	Intro,y
.1503	f0 14		beq $1519			beq 	_CSStart
.1505	c9 08		cmp #$08			cmp 	#8
.1507	90 08		bcc $1511			bcc 	_CSInk
.1509	a2 16		ldx #$16		ldx	#22
.150b	20 64 11	jsr $1164		jsr	deviceHandler
.150e	4c ff 14	jmp $14ff			jmp 	_CSBanner
.1511					_CSInk:
.1511	a2 08		ldx #$08		ldx	#8
.1513	20 64 11	jsr $1164		jsr	deviceHandler
.1516	4c ff 14	jmp $14ff			jmp 	_CSBanner
.1519					_CSStart:
.1519	a2 10		ldx #$10		ldx	#16
.151b	20 37 2d	jsr $2d37		jsr	mainHandler
.151e	a2 02		ldx #$02		ldx	#2
.1520	20 37 2d	jsr $2d37		jsr	mainHandler
.1523	4c 3a 16	jmp $163a			jmp 	WarmStartEntry
>1526	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>152e	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>153e	20 2a 2a 2a 0d 0d
>1544	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>154c	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>155c	32 30 32 31 0d 0d
>1562	02 42 61 73 69 63 20				.text 	2,"Basic "
>1569	30 2e 31 34					.text "0.14"
>156d	20 28						.text 	" ("
>156f	31 33 2d 4d 61 72 2d 32				.text "13-Mar-21"
>1577	31
>1578	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.157c					DeleteLine:
.157c	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.157f	85 2a		sta $2a				sta 	temp0
.1581	ad c9 0a	lda $0ac9			lda 	basePage+1
.1584	85 2b		sta $2b				sta 	temp0+1
.1586	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1588	a5 48		lda $48				lda 	esInt0
.158a	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.158c	d0 07		bne $1595			bne 	_DLNext
.158e	c8		iny				iny
.158f	a5 50		lda $50				lda 	esInt1
.1591	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1593	f0 0a		beq $159f			beq 	_DLFound
.1595	20 bd 15	jsr $15bd	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1598	d0 ec		bne $1586			bne 	_DLLoop
.159a	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.159c	b1 2a		lda ($2a),y			lda 	(temp0),y
.159e	60		rts				rts
.159f					_DLFound:
.159f	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.15a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.15a3	a8		tay				tay
.15a4	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.15a6					_DLCopyDown:
.15a6	b1 2a		lda ($2a),y			lda 	(temp0),y
.15a8	81 2a		sta ($2a,x)			sta 	(temp0,x)
.15aa	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.15ac	d0 02		bne $15b0			bne 	_DLNoCarry
.15ae	e6 2b		inc $2b				inc 	temp0+1
.15b0					_DLNoCarry:
.15b0	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.15b2	c5 35		cmp $35				cmp 	lowMemory
.15b4	d0 f0		bne $15a6			bne 	_DLCopyDown
.15b6	a5 2b		lda $2b				lda 	temp0+1
.15b8	c5 36		cmp $36				cmp 	lowMemory+1
.15ba	d0 ea		bne $15a6			bne 	_DLCopyDown
.15bc	60		rts				rts
.15bd					IAdvanceTemp0:
.15bd	84 32		sty $32				sty 	tempShort
.15bf	18		clc				clc
.15c0	a0 00		ldy #$00			ldy 	#0
.15c2	b1 2a		lda ($2a),y			lda 	(temp0),y
.15c4	65 2a		adc $2a				adc 	temp0
.15c6	85 2a		sta $2a				sta 	temp0
.15c8	90 02		bcc $15cc			bcc 	_IATNoCarry
.15ca	e6 2b		inc $2b				inc 	temp0+1
.15cc					_IATNoCarry:
.15cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.15ce	a4 32		ldy $32				ldy 	tempShort
.15d0	c9 00		cmp #$00			cmp		#0
.15d2	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.15d3					InsertLine:
.15d3	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.15d6	85 2a		sta $2a				sta 	temp0
.15d8	ad c9 0a	lda $0ac9			lda 	basePage+1
.15db	85 2b		sta $2b				sta 	temp0+1
.15dd					_ILLoop:
.15dd	a0 01		ldy #$01			ldy 	#1
.15df	b1 2a		lda ($2a),y			lda 	(temp0),y
.15e1	c5 48		cmp $48				cmp 	esInt0
.15e3	c8		iny				iny
.15e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.15e6	e5 50		sbc $50				sbc 	esInt1
.15e8	b0 05		bcs $15ef			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.15ea	20 bd 15	jsr $15bd			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.15ed	d0 ee		bne $15dd			bne 	_ILLoop
.15ef					_ILFound:
.15ef	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.15f1	85 2c		sta $2c				sta 	temp1
.15f3	a5 36		lda $36				lda 	lowMemory+1
.15f5	85 2d		sta $2d				sta 	temp1+1
.15f7	ad 1f 0d	lda $0d1f			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.15fa	18		clc				clc
.15fb	69 03		adc #$03			adc 	#3
.15fd	a8		tay				tay
.15fe	a2 00		ldx #$00			ldx 	#0
.1600	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.1602	91 2c		sta ($2c),y			sta 	(temp1),y
.1604	a5 2c		lda $2c				lda 	temp1
.1606	c5 2a		cmp $2a				cmp 	temp0
.1608	d0 06		bne $1610			bne 	_ILMNext
.160a	a5 2d		lda $2d				lda 	temp1+1
.160c	c5 2b		cmp $2b				cmp 	temp0+1
.160e	f0 0b		beq $161b			beq 	_ILMCopy
.1610					_ILMNext:
.1610	a5 2c		lda $2c				lda 	temp1
.1612	d0 02		bne $1616			bne 	_ILNoBorrow
.1614	c6 2d		dec $2d				dec 	temp1+1
.1616					_ILNoBorrow:
.1616	c6 2c		dec $2c				dec 	temp1
.1618	4c 00 16	jmp $1600			jmp 	_ILMove
.161b					_ILMCopy:
.161b	98		tya				tya 								; Y is the offset of the new line.
.161c	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.161e	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1620	a5 48		lda $48				lda 	esInt0
.1622	91 2a		sta ($2a),y			sta 	(temp0),y
.1624	c8		iny				iny
.1625	a5 50		lda $50				lda 	esInt1
.1627	91 2a		sta ($2a),y			sta 	(temp0),y
.1629	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.162b					_ILMCopy2:
.162b	b1 28		lda ($28),y			lda 	(codePtr),y
.162d	c8		iny				iny
.162e	c8		iny				iny
.162f	c8		iny				iny
.1630	91 2a		sta ($2a),y			sta 	(temp0),y
.1632	88		dey				dey
.1633	88		dey				dey
.1634	cc 1f 0d	cpy $0d1f			cpy 	tokenBufferIndex
.1637	d0 f2		bne $162b			bne 	_ILMCopy2
.1639	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.163a					WarmStartEntry:
.163a	a2 ff		ldx #$ff			ldx 	#$FF
.163c	9a		txs				txs
.163d	a9 02		lda #$02			lda 	#2							; green text.
.163f	a2 08		ldx #$08		ldx	#8
.1641	20 64 11	jsr $1164		jsr	deviceHandler
.1644	a2 0c		ldx #$0c		ldx	#12
.1646	20 64 11	jsr $1164		jsr	deviceHandler
.1649	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.164b	85 28		sta $28				sta 	codePtr
.164d	a5 2b		lda $2b				lda 	temp0+1
.164f	85 29		sta $29				sta 	codePtr+1
.1651	a2 04		ldx #$04		ldx	#4
.1653	20 64 11	jsr $1164		jsr	deviceHandler
.1656	a2 06		ldx #$06		ldx	#6
.1658	20 dc 36	jsr $36dc		jsr	tokeniserHandler
.165b	90 25		bcc $1682			bcc 	WSEError 					; failed.
.165d	a9 1c		lda #$1c			lda 	#(tokenHeader) & $FF
.165f	85 28		sta $28				sta 	codePtr
.1661	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1663	85 29		sta $29				sta 	1+(codePtr)
.1665	ad 1f 0c	lda $0c1f			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1668	c9 80		cmp #$80			cmp 	#$80
.166a	f0 ce		beq $163a			beq 	WarmStartEntry
.166c	29 c0		and #$c0			and 	#$C0						; does it start with a number
.166e	c9 40		cmp #$40			cmp 	#$40
.1670	f0 15		beq $1687			beq 	HasLineNumber
.1672	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1674	8d 1c 0c	sta $0c1c			sta 	tokenHeader 				; fake program line.
.1677	8d 1d 0c	sta $0c1d			sta 	tokenHeader+1
.167a	8d 1e 0c	sta $0c1e			sta 	tokenHeader+2
.167d	a2 12		ldx #$12		ldx	#18
.167f	20 37 2d	jsr $2d37		jsr	mainHandler
.1682					WSEError:
.1682	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1684	20 85 11	jsr $1185		jsr	errorHandler
.1687					HasLineNumber:
.1687	a0 03		ldy #$03			ldy 	#3 							; get line number
.1689	a9 00		lda #$00			lda 	#0
.168b	a2 06		ldx #$06		ldx	#6
.168d	20 37 2d	jsr $2d37		jsr	mainHandler
.1690	a5 58		lda $58				lda 	esInt2		 				; check in range.
.1692	05 60		ora $60				ora 	esInt3
.1694	d0 ec		bne $1682			bne 	WSEError
.1696	98		tya				tya 								; make codePtr point to code after the line number.
.1697	18		clc				clc
.1698	65 28		adc $28				adc 	codePtr
.169a	85 28		sta $28				sta 	codePtr
.169c	90 02		bcc $16a0			bcc		_HLNNoCarry
.169e	e6 29		inc $29				inc 	codePtr+1
.16a0					_HLNNoCarry:
.16a0	98		tya				tya 								; subtract that offset from the code buffer index
.16a1	38		sec				sec
.16a2	49 ff		eor #$ff			eor 	#$FF
.16a4	6d 1f 0d	adc $0d1f			adc 	tokenBufferIndex
.16a7	18		clc				clc 								; add space allowing for header & $80 trailer
.16a8	69 04		adc #$04			adc 	#4
.16aa	8d 1f 0d	sta $0d1f			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.16ad	20 7c 15	jsr $157c			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.16b0					_HLNNoDelete:
.16b0	ad 1f 0d	lda $0d1f			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.16b3	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.16b5	f0 0c		beq $16c3			beq 	_HLMEditDone
.16b7	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.16b9	18		clc				clc 								; workspace (1k)
.16ba	69 04		adc #$04			adc 	#4
.16bc	c5 34		cmp $34				cmp 	highMemory+1
.16be	b0 0b		bcs $16cb			bcs 	_HLMMemory
.16c0	20 d3 15	jsr $15d3			jsr 	InsertLine 					; insert the line in
.16c3					_HLMEditDone:
.16c3	a2 02		ldx #$02		ldx	#2
.16c5	20 37 2d	jsr $2d37		jsr	mainHandler
.16c8	4c 3a 16	jmp $163a			jmp 	WarmStartEntry
.16cb					_HLMMemory:
.16cb	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.16cd	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.16d0					interactionHandler:
.16d0	7c d3 16	jmp ($16d3,x)			jmp 	(interactionVectors,x)
.16d3					interactionVectors:
>16d3	f5 14					.word ColdStartEntry       ; index 0
>16d5	3a 16					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.16d7					section_end_interaction:
.16d7					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.16d7					Command_Assert:
.16d7	20 3d 26	jsr $263d			jsr 	EvaluateRootInteger 		; what is being asserted.
.16da	20 f7 2b	jsr $2bf7			jsr 	MInt32Zero 					; is it true ?
.16dd	f0 01		beq $16e0			beq 	_CAError
.16df	60		rts				rts
.16e0					_CAError:
.16e0	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.16e2	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.16e5					CommandClear:
.16e5					XCommandClear:
.16e5	98		tya				tya
.16e6	48		pha				pha
.16e7	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.16ea	85 33		sta $33				sta 	highMemory
.16ec	ad cd 0a	lda $0acd			lda 	endMemory+1
.16ef	85 34		sta $34				sta 	highMemory+1
.16f1	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.16f4	85 2a		sta $2a				sta 	temp0
.16f6	ad c9 0a	lda $0ac9			lda 	basePage+1
.16f9	85 2b		sta $2b				sta 	temp0+1
.16fb					_CCFindEnd:
.16fb	a0 00		ldy #$00			ldy 	#0
.16fd	b1 2a		lda ($2a),y			lda 	(temp0),y
.16ff	f0 0c		beq $170d			beq 	_CCFoundEnd 				; offset zero is end.
.1701	18		clc				clc
.1702	65 2a		adc $2a				adc 	temp0 						; move to next line
.1704	85 2a		sta $2a				sta 	temp0
.1706	90 f3		bcc $16fb			bcc 	_CCFindEnd
.1708	e6 2b		inc $2b				inc 	temp0+1
.170a	4c fb 16	jmp $16fb			jmp 	_CCFindEnd
.170d					_CCFoundEnd:
.170d	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.170f	85 35		sta $35				sta 	lowMemory
.1711	a5 2b		lda $2b				lda 	temp0+1
.1713	85 36		sta $36				sta 	lowMemory+1
.1715	18		clc				clc 								; put temp0+1 in endProgram
.1716	a5 2a		lda $2a				lda 	temp0
.1718	69 01		adc #$01			adc 	#1
.171a	8d ca 0a	sta $0aca			sta 	endProgram
.171d	a5 2b		lda $2b				lda 	temp0+1
.171f	69 00		adc #$00			adc 	#0
.1721	8d cb 0a	sta $0acb			sta 	endProgram+1
.1724	18		clc				clc 								; put a bit of space in.
.1725	a5 35		lda $35				lda 	lowMemory
.1727	69 04		adc #$04			adc 	#4
.1729	85 35		sta $35				sta 	lowMemory
.172b	90 02		bcc $172f			bcc 	_CCNoCarry
.172d	e6 36		inc $36				inc 	lowMemory+1
.172f					_CCNoCarry:
.172f	20 d6 2c	jsr $2cd6			jsr 	RSReset 					; reset the return stack.
.1732	a2 04		ldx #$04		ldx	#4
.1734	20 eb 39	jsr $39eb		jsr	variableHandler
.1737	20 ea 1f	jsr $1fea			jsr 	ScanProc 					; scan for procedures
.173a	20 a5 1d	jsr $1da5			jsr 	CommandRestore 				; do a restore
.173d	68		pla				pla
.173e	a8		tay				tay
.173f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1740					Command_Dim:
.1740	a2 02		ldx #$02		ldx	#2
.1742	20 eb 39	jsr $39eb		jsr	variableHandler
.1745	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1747	c8		iny				iny
.1748	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.174a	f0 f4		beq $1740			beq 	Command_Dim
.174c	88		dey				dey 								; unpick get
.174d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.174e					Command_FOR:
.174e	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1750	a2 0b		ldx #$0b			ldx 	#11
.1752	20 e4 2c	jsr $2ce4			jsr 	RSClaim
.1755	20 4f 19	jsr $194f			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1758	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.175a	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.175c	d0 4c		bne $17aa			bne 	_CFType
.175e	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1760	20 38 2c	jsr $2c38			jsr 	CheckToken
.1763	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1765	20 3f 26	jsr $263f			jsr 	EvaluateInteger				; get terminal value in stack 1
.1768	98		tya				tya
.1769	48		pha				pha
.176a	a0 04		ldy #$04			ldy 	#4
.176c	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.176e	91 78		sta ($78),y			sta 	(rsPointer),y
.1770	c8		iny				iny
.1771	a5 50		lda $50				lda		esInt1
.1773	91 78		sta ($78),y			sta 	(rsPointer),y
.1775	c8		iny				iny
.1776	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1778	91 78		sta ($78),y			sta 	(rsPointer),y
.177a	c8		iny				iny
.177b	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.177d	91 78		sta ($78),y			sta 	(rsPointer),y
.177f	c8		iny				iny
.1780	a5 51		lda $51				lda		esInt1+1
.1782	91 78		sta ($78),y			sta 	(rsPointer),y
.1784	c8		iny				iny
.1785	a5 59		lda $59				lda		esInt2+1
.1787	91 78		sta ($78),y			sta 	(rsPointer),y
.1789	c8		iny				iny
.178a	a5 61		lda $61				lda		esInt3+1
.178c	91 78		sta ($78),y			sta 	(rsPointer),y
.178e	68		pla				pla
.178f	a8		tay				tay
.1790	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1792	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1794	d0 0e		bne $17a4			bne 	_CFDone
.1796	c8		iny				iny									; skip over step.
.1797	20 3f 26	jsr $263f			jsr 	EvaluateInteger 			; get step
.179a	98		tya				tya
.179b	48		pha				pha
.179c	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.179e	a0 06		ldy #$06			ldy 	#6
.17a0	91 78		sta ($78),y			sta 	(rsPointer),y
.17a2	68		pla				pla
.17a3	a8		tay				tay
.17a4					_CFDone:
.17a4	a9 01		lda #$01			lda 	#1
.17a6	20 10 2d	jsr $2d10			jsr 	RSSavePosition 				; save position.
.17a9	60		rts				rts
.17aa					_CFType:
.17aa	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.17ac	20 85 11	jsr $1185		jsr	errorHandler
.17af					Command_NEXT:
.17af	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.17b1	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.17b3	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.17b5	f0 05		beq $17bc			beq 	_isok
.17b7	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.17b9	20 85 11	jsr $1185		jsr	errorHandler
.17bc					_isok:
.17bc	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.17be	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.17c0	b0 18		bcs $17da			bcs 	_CNNoIndex
.17c2	a2 00		ldx #$00			ldx 	#0 							; start on stack
.17c4	20 72 26	jsr $2672			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.17c7	98		tya				tya
.17c8	48		pha				pha
.17c9	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.17cb	b1 78		lda ($78),y			lda 	(rsPointer),y
.17cd	d5 48		cmp $48,x			cmp 	esInt0,x
.17cf	d0 76		bne $1847			bne 	_CNBadIndex
.17d1	c8		iny				iny
.17d2	b1 78		lda ($78),y			lda 	(rsPointer),y
.17d4	d5 50		cmp $50,x			cmp 	esInt1,x
.17d6	d0 6f		bne $1847			bne 	_CNBadIndex
.17d8	68		pla				pla
.17d9	a8		tay				tay
.17da					_CNNoIndex:
.17da	98		tya				tya
.17db	48		pha				pha
.17dc	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.17de	b1 78		lda ($78),y			lda 	(rsPointer),y
.17e0	85 2a		sta $2a				sta 	temp0
.17e2	c8		iny				iny
.17e3	b1 78		lda ($78),y			lda 	(rsPointer),y
.17e5	85 2b		sta $2b				sta 	temp0+1
.17e7	c8		iny				iny
.17e8	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.17ea	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.17ec	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.17ee	10 01		bpl $17f1			bpl 	_CNSignX
.17f0	ca		dex				dex  								; X = $FF
.17f1					_CNSignX:
.17f1	18		clc				clc 								; add to the LSB
.17f2	a0 00		ldy #$00			ldy 	#0
.17f4	71 2a		adc ($2a),y			adc 	(temp0),y
.17f6	91 2a		sta ($2a),y			sta 	(temp0),y
.17f8					_CNPropogate:
.17f8	c8		iny				iny  								; add the sign extended in X to the rest.
.17f9	8a		txa				txa
.17fa	71 2a		adc ($2a),y			adc 	(temp0),y
.17fc	91 2a		sta ($2a),y			sta 	(temp0),y
.17fe	c8		iny				iny
.17ff	8a		txa				txa
.1800	71 2a		adc ($2a),y			adc 	(temp0),y
.1802	91 2a		sta ($2a),y			sta 	(temp0),y
.1804	c8		iny				iny
.1805	8a		txa				txa
.1806	71 2a		adc ($2a),y			adc 	(temp0),y
.1808	91 2a		sta ($2a),y			sta 	(temp0),y
.180a	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.180b	a5 78		lda $78				lda 	rsPointer
.180d	69 07		adc #$07			adc 	#7
.180f	85 2c		sta $2c				sta 	temp1
.1811	a9 00		lda #$00			lda 	#0
.1813	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1815	a8		tay				tay 								; and clear the Y register again.
.1816	65 79		adc $79				adc 	rsPointer+1
.1818	85 2d		sta $2d				sta 	temp1+1
.181a	38		sec				sec 								; calculate current - limit oring interim values.
.181b	20 53 18	jsr $1853			jsr 	_CNCompare 					; each of these does a byte.
.181e	20 53 18	jsr $1853			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.1821	20 53 18	jsr $1853			jsr 	_CNCompare 					; and the carry of the subtraction.
.1824	20 53 18	jsr $1853			jsr 	_CNCompare
.1827	50 02		bvc $182b			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1829	49 80		eor #$80			eor 	#$80
.182b					_CNNoOverflow:
.182b	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.182d	30 1d		bmi $184c			bmi 	_CNCheckDownto
.182f	c9 00		cmp #$00			cmp 	#0
.1831	30 0c		bmi $183f			bmi 	_CNLoopRound 				; loop round if < =
.1833	a5 2e		lda $2e				lda 	temp2
.1835	f0 08		beq $183f			beq 	_CNLoopRound
.1837					_CNLoopExit:
.1837	68		pla				pla
.1838	a8		tay				tay
.1839	a9 0b		lda #$0b			lda 	#11
.183b	20 06 2d	jsr $2d06			jsr 	RSFree
.183e	60		rts				rts
.183f					_CNLoopRound:
.183f	68		pla				pla
.1840	a8		tay				tay
.1841	a9 01		lda #$01			lda 	#1
.1843	20 23 2d	jsr $2d23			jsr 	RSLoadPosition				; go back to the loop top
.1846	60		rts				rts
.1847					_CNBadIndex:
.1847	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.1849	20 85 11	jsr $1185		jsr	errorHandler
.184c					_CNCheckDownto:
.184c	c9 00		cmp #$00			cmp 	#0
.184e	10 ef		bpl $183f			bpl 	_CNLoopRound
.1850	4c 37 18	jmp $1837			jmp 	_CNLoopExit
.1853					_CNCompare:
.1853	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1855	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1857	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1859	85 2e		sta $2e				sta 	temp2
.185b	c8		iny				iny
.185c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.185d					CommandIf:
.185d	20 3d 26	jsr $263d			jsr 	EvaluateRootInteger 		; get what's being tested.
.1860	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1862	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.1864	f0 04		beq $186a			beq 	_IfSimple
.1866	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1868	d0 1b		bne $1885			bne 	_IfComplex
.186a					_IfSimple:
.186a	20 f7 2b	jsr $2bf7			jsr 	MInt32Zero					; check if TOS zero
.186d	f0 10		beq $187f			beq 	_IfEOL 						; go to next line.
.186f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1871	c8		iny				iny
.1872	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1874	f0 0c		beq $1882			beq 	_IfGoto 					; do the Goto code
.1876	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1878	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.187a	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.187c	f0 04		beq $1882			beq 	_IfGoto
.187e	60		rts				rts 								; else continue on this line.
.187f					_IfEOL:
.187f	4c 5f 20	jmp $205f			jmp 	AdvanceNextLine 			; go to next line
.1882					_IfGoto:
.1882	4c d4 20	jmp $20d4			jmp 	CommandGoto
.1885					_IfComplex:
.1885	20 f7 2b	jsr $2bf7			jsr 	MInt32Zero 					; is it true ?
.1888	f0 01		beq $188b			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.188a	60		rts				rts 								; else continue.
.188b					_IFSkip:
.188b	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.188d	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.188f	4c 5d 2c	jmp $2c5d			jmp		ScanForward
.1892					Command_ELSE:
.1892	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1894	8a		txa				txa
.1895	4c 5d 2c	jmp $2c5d			jmp		ScanForward
.1898					Command_ENDIF:
.1898	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be2					InputBuffer:
>0be2							.fill 	MaxInputSize+1
.1899					Command_Input:
.1899	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.189b	c8		iny				iny
.189c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.189e	f0 f9		beq $1899			beq 	Command_Input
.18a0	88		dey				dey 							; undo consume
.18a1	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18a3	f0 54		beq $18f9			beq 	_CIExit 				; : or EOL, exit
.18a5	c9 80		cmp #$80			cmp 	#TOK_EOL
.18a7	f0 50		beq $18f9			beq 	_CIExit
.18a9	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.18ab	90 12		bcc $18bf			bcc 	_CIVariable
.18ad	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.18af	d0 43		bne $18f4			bne 	_CISyntax
.18b1	a2 00		ldx #$00			ldx 	#0
.18b3	20 34 26	jsr $2634			jsr 	EvaluateString 			; evaluate and print string
.18b6	20 c4 19	jsr $19c4			jsr 	TOSToTemp0
.18b9	20 c7 1c	jsr $1cc7			jsr 	PrintString
.18bc	4c 99 18	jmp $1899			jmp 	Command_Input
.18bf					_CIVariable:
.18bf	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.18c1	20 72 26	jsr $2672			jsr 	EvaluateReference  		; this is where its going
.18c4					_CIRetry:
.18c4	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.18c6	a2 14		ldx #$14		ldx	#20
.18c8	20 64 11	jsr $1164		jsr	deviceHandler
.18cb	98		tya				tya
.18cc	48		pha				pha
.18cd	20 0d 19	jsr $190d			jsr 	InputString 			; input a string (manually)
.18d0	a2 01		ldx #$01			ldx 	#1
.18d2	20 fa 18	jsr $18fa			jsr 	BufferToStackX 			; make stack,x ref input string.
.18d5	a5 40		lda $40				lda 	esType 					; if target type numeric
.18d7	29 40		and #$40			and 	#$40 					; then convert to number
.18d9	d0 11		bne $18ec			bne 	_CIWrite
.18db	a2 01		ldx #$01			ldx 	#1
.18dd	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.18e0	a9 0a		lda #$0a			lda 	#10
.18e2	20 3e 2a	jsr $2a3e			jsr 	MInt32FromString 		; convert it back from a string.
.18e5	68		pla				pla
.18e6	a8		tay				tay
.18e7	b0 03		bcs $18ec			bcs 	_CIWrite 				; successfully converted.
.18e9	18		clc				clc 							; default fail FP conversion
.18ea	90 d8		bcc $18c4			bcc		_CIRetry				; failed, try again.
.18ec					_CIWrite:
.18ec	a2 00		ldx #$00			ldx 	#0
.18ee	20 62 19	jsr $1962			jsr 	WriteValue
.18f1	4c 99 18	jmp $1899			jmp 	Command_Input
.18f4					_CISyntax:
.18f4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18f6	20 85 11	jsr $1185		jsr	errorHandler
.18f9					_CIExit:
.18f9	60		rts				rts
.18fa					BufferToStackX:
.18fa	a9 e2		lda #$e2			lda 	#InputBuffer & $FF
.18fc	95 48		sta $48,x			sta 	esInt0,x
.18fe	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1900	95 50		sta $50,x			sta 	esInt1,x
.1902	a9 00		lda #$00			lda 	#0
.1904	95 58		sta $58,x			sta 	esInt2,x
.1906	95 60		sta $60,x			sta 	esInt3,x
.1908	a9 40		lda #$40			lda 	#$40
.190a	95 40		sta $40,x			sta 	esType,x
.190c	60		rts				rts
.190d					InputString:
.190d	a9 00		lda #$00			lda 	#0
.190f	8d e2 0b	sta $0be2			sta 	InputBuffer
.1912					_InputLoop:
.1912	a2 00		ldx #$00		ldx	#0
.1914	20 64 11	jsr $1164		jsr	deviceHandler
.1917	a2 0a		ldx #$0a		ldx	#10
.1919	20 64 11	jsr $1164		jsr	deviceHandler
.191c	c9 00		cmp #$00			cmp 	#0
.191e	f0 f2		beq $1912			beq 	_InputLoop
.1920	c9 08		cmp #$08			cmp 	#8
.1922	f0 19		beq $193d			beq 	_InputBackspace
.1924	c9 0d		cmp #$0d			cmp 	#13
.1926	f0 21		beq $1949			beq 	_InputExit
.1928	ae e2 0b	ldx $0be2			ldx 	InputBuffer
.192b	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.192d	f0 e3		beq $1912			beq 	_InputLoop
.192f	9d e3 0b	sta $0be3,x			sta 	InputBuffer+1,x 		; write char
.1932	ee e2 0b	inc $0be2			inc 	InputBuffer 			; advance count.
.1935					_InputPrintLoop:
.1935	a2 14		ldx #$14		ldx	#20
.1937	20 64 11	jsr $1164		jsr	deviceHandler
.193a	4c 12 19	jmp $1912			jmp	 	_InputLoop
.193d					_InputBackspace:
.193d	ad e2 0b	lda $0be2			lda 	InputBuffer 			; at start
.1940	f0 d0		beq $1912			beq 	_InputLoop
.1942	ce e2 0b	dec $0be2			dec 	InputBuffer
.1945	a9 08		lda #$08			lda 	#8
.1947	d0 ec		bne $1935			bne 	_InputPrintLoop
.1949					_InputExit:
.1949	a2 04		ldx #$04		ldx	#4
.194b	20 64 11	jsr $1164		jsr	deviceHandler
.194e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.194f					CommandLet:
.194f	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1951	20 72 26	jsr $2672			jsr 	EvaluateReference
.1954	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1956	20 38 2c	jsr $2c38			jsr 	CheckToken
.1959	e8		inx				inx 								; do RHS
.195a	20 20 26	jsr $2620			jsr 	Evaluate 					; evaluate and dereference
.195d	ca		dex				dex
.195e	20 62 19	jsr $1962			jsr 	WriteValue 					; write it out
.1961	60		rts				rts
.1962					WriteValue:
.1962	98		tya				tya
.1963	48		pha				pha
.1964	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1967	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1969	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.196b	29 40		and #$40			and 	#$40
.196d	d0 50		bne $19bf			bne		_WVType
.196f	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1971	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1973	29 40		and #$40			and 	#$40
.1975	d0 1f		bne $1996			bne 	_WVCopyString
.1977	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1979	15 41		ora $41,x			ora 	esType+1,x
.197b	4a		lsr a				lsr 	a
.197c	90 22		bcc $19a0			bcc 	_WVCopyData4 				; copy 4 data bytes.
.197e	b5 40		lda $40,x			lda 	esType,x
.1980	4a		lsr a				lsr 	a
.1981	90 3c		bcc $19bf			bcc 	_WVType
.1983	e8		inx				inx 								; force the value being written to be a float.
.1984	20 81 21	jsr $2181			jsr 	BPMakeFloat
.1987	ca		dex				dex
.1988	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; set Temp0 to write address
.198b	e8		inx				inx
.198c	8a		txa				txa
.198d	a2 20		ldx #$20		ldx	#32
.198f	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.1992	aa		tax				tax
.1993	4c bc 19	jmp $19bc			jmp 	_WVCopyExit
.1996					_WVCopyString:
.1996	8a		txa				txa
.1997	a2 0e		ldx #$0e		ldx	#14
.1999	20 ed 2f	jsr $2fed		jsr	stringHandler
.199c	aa		tax				tax
.199d	4c bc 19	jmp $19bc			jmp 	_WVCopyExit
.19a0					_WVCopyData4:
.19a0	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.19a2	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.19a4	d0 10		bne $19b6			bne 	_WVCopyData1
.19a6	a0 03		ldy #$03			ldy 	#3
.19a8	b5 61		lda $61,x			lda 	esInt3+1,x
.19aa	91 2a		sta ($2a),y			sta 	(temp0),y
.19ac	88		dey				dey
.19ad	b5 59		lda $59,x			lda 	esInt2+1,x
.19af	91 2a		sta ($2a),y			sta 	(temp0),y
.19b1	88		dey				dey
.19b2	b5 51		lda $51,x			lda 	esInt1+1,x
.19b4	91 2a		sta ($2a),y			sta 	(temp0),y
.19b6					_WVCopyData1:
.19b6	a0 00		ldy #$00			ldy 	#0
.19b8	b5 49		lda $49,x			lda 	esInt0+1,x
.19ba	91 2a		sta ($2a),y			sta 	(temp0),y
.19bc					_WVCopyExit:
.19bc	68		pla				pla
.19bd	a8		tay				tay
.19be	60		rts				rts
.19bf					_WVType:
.19bf	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.19c1	20 85 11	jsr $1185		jsr	errorHandler
.19c4					TOSToTemp0:
.19c4	b5 48		lda $48,x			lda 	esInt0,x
.19c6	85 2a		sta $2a				sta 	temp0
.19c8	b5 50		lda $50,x			lda 	esInt1,x
.19ca	85 2b		sta $2b				sta 	temp0+1
.19cc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.0c03					structIndent:
>0c03							.fill 	1
.19cd					CommandList:
.19cd	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.19cf	8e 03 0c	stx $0c03			stx 	structIndent
.19d2	20 d0 2b	jsr $2bd0			jsr 	MInt32False
.19d5	e8		inx				inx
.19d6	20 cc 2b	jsr $2bcc			jsr 	MInt32True
.19d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.19db	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.19dd	f0 15		beq $19f4			beq 	_CLEndLine
.19df	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.19e1	30 1b		bmi $19fe			bmi 	_CLDoListing 				; do the whole lot.
.19e3	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.19e5	20 3f 26	jsr $263f			jsr 	EvaluateInteger
.19e8	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.19ea	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.19ec	f0 06		beq $19f4			beq 	_CLEndLine
.19ee	20 0e 2b	jsr $2b0e			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.19f1	4c fe 19	jmp $19fe			jmp 	_CLDoListing 				; own e.g. list 1100
.19f4					_CLEndLine:
.19f4	c8		iny				iny 								; skip comma
.19f5	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.19f7	30 05		bmi $19fe			bmi 	_CLDoListing
.19f9	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.19fb	20 3f 26	jsr $263f			jsr 	EvaluateInteger				; get end
.19fe					_CLDoListing:
.19fe	20 85 1e	jsr $1e85			jsr 	ResetCodeAddress 			; back to the start.
.1a01					_CLCheckLoop:
.1a01	a2 00		ldx #$00		ldx	#0
.1a03	20 64 11	jsr $1164		jsr	deviceHandler
.1a06	a0 00		ldy #$00			ldy 	#0							; check end.
.1a08	b1 28		lda ($28),y			lda 	(codePtr),y
.1a0a	f0 41		beq $1a4d			beq 	_CLEnd
.1a0c	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.1a0e	20 50 1a	jsr $1a50			jsr 	CLCompareLineTOS
.1a11	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.1a13	f0 28		beq $1a3d			beq 	_CLNext
.1a15	e8		inx				inx
.1a16	20 50 1a	jsr $1a50			jsr 	CLCompareLineTOS 			; compare vs higher
.1a19	c9 01		cmp #$01			cmp 	#1
.1a1b	f0 20		beq $1a3d			beq 	_CLNext
.1a1d	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.1a1f	20 72 1a	jsr $1a72			jsr 	CLStructureCheck
.1a22	ad 03 0c	lda $0c03			lda 	structIndent 				; indent level.
.1a25	10 02		bpl $1a29			bpl 	_CLPositive
.1a27	a9 00		lda #$00			lda 	#0
.1a29					_CLPositive:
.1a29	a2 02		ldx #$02		ldx	#2
.1a2b	20 dc 36	jsr $36dc		jsr	tokeniserHandler
.1a2e	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.1a30	20 72 1a	jsr $1a72			jsr 	CLStructureCheck
.1a33	ad 03 0c	lda $0c03			lda 	structIndent
.1a36	10 05		bpl $1a3d			bpl 	_CLNext
.1a38	a9 00		lda #$00			lda 	#0
.1a3a	8d 03 0c	sta $0c03			sta 	structIndent
.1a3d					_CLNext:
.1a3d	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.1a3f	b1 28		lda ($28),y			lda 	(codePtr),y
.1a41	18		clc				clc
.1a42	65 28		adc $28				adc 	codePtr
.1a44	85 28		sta $28				sta 	codePtr
.1a46	90 b9		bcc $1a01			bcc 	_CLCheckLoop
.1a48	e6 29		inc $29				inc 	codePtr+1
.1a4a	4c 01 1a	jmp $1a01			jmp 	_CLCheckLoop
.1a4d					_CLEnd:
.1a4d	4c 32 2d	jmp $2d32			jmp 	WarmStart 					; warm start after list.
.1a50					CLCompareLineTOS:
.1a50	a0 01		ldy #$01			ldy 	#1
.1a52	b1 28		lda ($28),y			lda 	(codePtr),y
.1a54	55 48		eor $48,x			eor 	esInt0,x
.1a56	85 2a		sta $2a				sta 	temp0
.1a58	c8		iny				iny
.1a59	b1 28		lda ($28),y			lda 	(codePtr),y
.1a5b	55 50		eor $50,x			eor 	esInt1,x
.1a5d	05 2a		ora $2a				ora 	temp0
.1a5f	f0 10		beq $1a71			beq 	_CLCLTExit
.1a61	88		dey				dey
.1a62	b1 28		lda ($28),y			lda 	(codePtr),y
.1a64	d5 48		cmp $48,x			cmp 	esInt0,x
.1a66	c8		iny				iny
.1a67	b1 28		lda ($28),y			lda 	(codePtr),y
.1a69	f5 50		sbc $50,x			sbc 	esInt1,x
.1a6b	a9 ff		lda #$ff			lda 	#255
.1a6d	90 02		bcc $1a71			bcc 	_CLCLTExit
.1a6f	a9 01		lda #$01			lda 	#1
.1a71					_CLCLTExit:
.1a71	60		rts				rts
.1a72					CLStructureCheck:
.1a72	85 2a		sta $2a				sta 	temp0
.1a74	a0 03		ldy #$03			ldy 	#3
.1a76					_CLSCLoop:
.1a76	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.1a78	c8		iny				iny
.1a79	c9 80		cmp #$80			cmp 	#$80
.1a7b	90 f9		bcc $1a76			bcc 	_CLSCLoop 					; $00-$7F just step over.
.1a7d	f0 28		beq $1aa7			beq		_CLSCExit					; EOL return
.1a7f	c9 86		cmp #$86			cmp 	#$86 						; special handler
.1a81	90 1e		bcc $1aa1			bcc 	_CLSCSpecial
.1a83	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.1a85	90 ef		bcc $1a76			bcc 	_CLSCLoop
.1a87	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.1a89	b0 eb		bcs $1a76			bcs 	_CLSCLoop
.1a8b	aa		tax				tax 								; get adjustment
.1a8c	bd d8 24	lda $24d8,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.1a8f	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.1a91	d0 e3		bne $1a76			bne 	_CLSCLoop
.1a93	38		sec				sec
.1a94	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.1a96	0a		asl a				asl 	a 							; double indent step
.1a97	18		clc				clc
.1a98	6d 03 0c	adc $0c03			adc 	structIndent 				; add to structure indent
.1a9b	8d 03 0c	sta $0c03			sta 	structIndent
.1a9e	4c 76 1a	jmp $1a76			jmp 	_CLSCLoop
.1aa1					_CLSCSpecial:
.1aa1	20 a0 2c	jsr $2ca0			jsr 	ScannerSkipSpecial
.1aa4	4c 76 1a	jmp $1a76			jmp 	_CLSCLoop
.1aa7					_CLSCExit:
.1aa7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1aa8					CommandLoad:
.1aa8	20 d0 1a	jsr $1ad0			jsr 	CLSParameters 					; get parameters for load.
.1aab	08		php				php
.1aac	a2 0e		ldx #$0e		ldx	#14
.1aae	20 64 11	jsr $1164		jsr	deviceHandler
.1ab1	28		plp				plp
.1ab2	b0 08		bcs $1abc			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1ab4	20 e5 16	jsr $16e5			jsr 	CommandClear
.1ab7	a2 02		ldx #$02		ldx	#2
.1ab9	20 d0 16	jsr $16d0		jsr	interactionHandler
.1abc					_CLExit
.1abc	60		rts				rts
.1abd					CommandSave:
.1abd	20 d0 1a	jsr $1ad0			jsr 	CLSParameters					; get parameters for save
.1ac0	90 08		bcc $1aca			bcc 	_CSNoOverrideAddress
.1ac2	20 50 2c	jsr $2c50			jsr 	CheckComma 						; should be a comma.
.1ac5	a2 02		ldx #$02			ldx 	#2
.1ac7	20 3f 26	jsr $263f			jsr 	EvaluateInteger 				; get save end address.
.1aca					_CSNoOverrideAddress:
.1aca	a2 18		ldx #$18		ldx	#24
.1acc	20 64 11	jsr $1164		jsr	deviceHandler
.1acf	60		rts				rts
.1ad0					CLSParameters:
.1ad0	a2 00		ldx #$00			ldx 	#0 								; string
.1ad2	20 34 26	jsr $2634			jsr 	EvaluateString
.1ad5	e8		inx				inx 									; erase out +1 +2
.1ad6	20 d0 2b	jsr $2bd0			jsr 	MInt32False
.1ad9	e8		inx				inx
.1ada	20 d0 2b	jsr $2bd0			jsr 	MInt32False
.1add	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1ae0	85 49		sta $49				sta 	esInt0+1
.1ae2	ad c9 0a	lda $0ac9			lda 	basePage+1
.1ae5	85 51		sta $51				sta 	esInt1+1
.1ae7	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1aea	85 4a		sta $4a				sta 	esInt0+2
.1aec	ad cb 0a	lda $0acb			lda 	endProgram+1
.1aef	85 52		sta $52				sta 	esInt1+2
.1af1	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1af3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1af5	d0 08		bne $1aff			bne 	_CLSDefault
.1af7	c8		iny				iny 									; skip comma
.1af8	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1afa	20 3f 26	jsr $263f			jsr 	EvaluateInteger
.1afd	38		sec				sec
.1afe	60		rts				rts
.1aff					_CLSDefault:
.1aff	18		clc				clc
.1b00	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c04					storeSize:
>0c04							.fill 	1
.1b01					CommandLocal:
.1b01	a2 00		ldx #$00			ldx 	#0
.1b03	20 1f 1b	jsr $1b1f			jsr 	LocaliseVariable 			; localise one.
.1b06					_CLCheckNext:
.1b06	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1b08	c8		iny				iny
.1b09	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1b0b	f0 06		beq $1b13			beq 	_CLAssignment
.1b0d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1b0f	f0 f0		beq $1b01			beq 	CommandLocal
.1b11	88		dey				dey
.1b12	60		rts				rts
.1b13					_CLAssignment:
.1b13	a2 01		ldx #$01			ldx 	#1
.1b15	20 20 26	jsr $2620			jsr 	Evaluate 					; evaluate RHS
.1b18	ca		dex				dex
.1b19	20 62 19	jsr $1962			jsr 	WriteValue
.1b1c	4c 06 1b	jmp $1b06			jmp 	_CLCheckNext
.1b1f					LocaliseVariable:
.1b1f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1b21	c9 40		cmp #$40			cmp 	#$40
.1b23	b0 67		bcs $1b8c			bcs 	_LVSyntax
.1b25	8a		txa				txa 								; get the address of that variable.
.1b26	a2 00		ldx #$00		ldx	#0
.1b28	20 eb 39	jsr $39eb		jsr	variableHandler
.1b2b	aa		tax				tax
.1b2c	8a		txa				txa
.1b2d	48		pha				pha
.1b2e	98		tya				tya
.1b2f	48		pha				pha
.1b30	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1b33	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1b35	0a		asl a				asl 	a
.1b36	10 16		bpl $1b4e			bpl 	_LVPushNumber
.1b38	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1b3a	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b3c	c8		iny				iny
.1b3d	85 2c		sta $2c				sta 	temp1
.1b3f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b41	85 2d		sta $2d				sta 	temp1+1
.1b43	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1b45	b1 2c		lda ($2c),y			lda 	(temp1),y
.1b47	aa		tax				tax 								; into X
.1b48	e8		inx				inx 								; +1 for length.
.1b49	a9 24		lda #$24			lda 	#markerString
.1b4b	4c 63 1b	jmp $1b63			jmp 	_LVWriteFrame
.1b4e					_LVPushNumber:
.1b4e	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1b50	85 2c		sta $2c				sta 	temp1
.1b52	a5 2b		lda $2b				lda 	temp0+1
.1b54	85 2d		sta $2d				sta 	temp1+1
.1b56	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1b58	4a		lsr a				lsr 	a
.1b59	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1b5b	a2 04		ldx #$04			ldx 	#VarISize
.1b5d	90 04		bcc $1b63			bcc 	_LVIsInteger
.1b5f	a9 23		lda #$23			lda 	#markerFloat
.1b61	a2 06		ldx #$06			ldx 	#VarFSize
.1b63					_LVIsInteger:
.1b63					_LVWriteFrame:
.1b63	8e 04 0c	stx $0c04			stx 	storeSize 					; number of bytes to copy from (temp0)
.1b66	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1b67	e8		inx				inx
.1b68	e8		inx				inx
.1b69	20 e4 2c	jsr $2ce4			jsr 	RSClaim 					; create the stack frame.
.1b6c	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1b6e	a0 01		ldy #$01			ldy 	#1
.1b70	91 78		sta ($78),y			sta 	(rsPointer),y
.1b72	c8		iny				iny
.1b73	a5 2b		lda $2b				lda 	temp0+1
.1b75	91 78		sta ($78),y			sta 	(rsPointer),y
.1b77	a0 00		ldy #$00			ldy 	#0
.1b79					_LVCopyData:
.1b79	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1b7b	c8		iny				iny 								; write allowing for the header bit.
.1b7c	c8		iny				iny
.1b7d	c8		iny				iny
.1b7e	91 78		sta ($78),y			sta 	(rsPointer),y
.1b80	88		dey				dey
.1b81	88		dey				dey
.1b82	ce 04 0c	dec $0c04			dec 	storeSize 					; do it storesize times
.1b85	d0 f2		bne $1b79			bne 	_LVCopyData
.1b87	68		pla				pla
.1b88	a8		tay				tay
.1b89	68		pla				pla
.1b8a	aa		tax				tax
.1b8b	60		rts				rts
.1b8c					_LVSyntax:
.1b8c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b8e	20 85 11	jsr $1185		jsr	errorHandler
.1b91					RestoreLocals:
.1b91	a2 00		ldx #$00			ldx 	#0
.1b93	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1b95	c9 40		cmp #$40			cmp	 	#64
.1b97	90 01		bcc $1b9a			bcc 	_RLocal
.1b99	60		rts				rts
.1b9a					_RLocal:
.1b9a	8a		txa				txa
.1b9b	48		pha				pha
.1b9c	98		tya				tya
.1b9d	48		pha				pha
.1b9e	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1ba0	b1 78		lda ($78),y			lda 	(rsPointer),y
.1ba2	85 2a		sta $2a				sta 	temp0
.1ba4	c8		iny				iny
.1ba5	b1 78		lda ($78),y			lda 	(rsPointer),y
.1ba7	85 2b		sta $2b				sta 	temp0+1
.1ba9	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1bab	b1 78		lda ($78),y			lda 	(rsPointer),y
.1bad	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1baf	f0 28		beq $1bd9			beq 	_RString
.1bb1	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1bb3	c9 25		cmp #$25			cmp 	#markerInt
.1bb5	f0 02		beq $1bb9			beq 	_RIsInteger
.1bb7	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1bb9					_RIsInteger:
.1bb9	8a		txa				txa
.1bba	48		pha				pha
.1bbb	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1bbd					_RCopyBack:
.1bbd	b1 78		lda ($78),y			lda 	(rsPointer),y
.1bbf	88		dey				dey
.1bc0	88		dey				dey
.1bc1	88		dey				dey
.1bc2	91 2a		sta ($2a),y			sta 	(temp0),y
.1bc4	c8		iny				iny
.1bc5	c8		iny				iny
.1bc6	c8		iny				iny
.1bc7	c8		iny				iny
.1bc8	ca		dex				dex
.1bc9	d0 f2		bne $1bbd			bne 	_RCopyBack
.1bcb	68		pla				pla 								; get size add 3
.1bcc	18		clc				clc
.1bcd	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1bcf					_RRestoreAAndLoop:
.1bcf	20 06 2d	jsr $2d06			jsr 	RSFree
.1bd2	68		pla				pla
.1bd3	a8		tay				tay
.1bd4	68		pla				pla
.1bd5	aa		tax				tax
.1bd6	4c 91 1b	jmp $1b91			jmp 	RestoreLocals 				; go see if there are any more locals.
.1bd9					_RString:
.1bd9	a2 00		ldx #$00			ldx 	#0
.1bdb	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1bdd	b1 78		lda ($78),y			lda 	(rsPointer),y
.1bdf	95 48		sta $48,x			sta 	esInt0,x
.1be1	c8		iny				iny
.1be2	b1 78		lda ($78),y			lda 	(rsPointer),y
.1be4	95 50		sta $50,x			sta 	esInt1,x
.1be6	18		clc				clc
.1be7	a5 78		lda $78				lda 	rsPointer
.1be9	69 03		adc #$03			adc 	#3
.1beb	95 49		sta $49,x			sta 	esInt0+1,x
.1bed	a5 79		lda $79				lda 	rsPointer+1
.1bef	69 00		adc #$00			adc 	#0
.1bf1	95 51		sta $51,x			sta 	esInt1+1,x
.1bf3	8a		txa				txa
.1bf4	a2 0e		ldx #$0e		ldx	#14
.1bf6	20 ed 2f	jsr $2fed		jsr	stringHandler
.1bf9	a0 03		ldy #$03			ldy 	#3 							; get string length
.1bfb	b1 78		lda ($78),y			lda 	(rsPointer),y
.1bfd	18		clc				clc
.1bfe	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1c00	4c cf 1b	jmp $1bcf			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1c03					Command_New:
.1c03					Command_XNew:
.1c03	20 85 1e	jsr $1e85			jsr 	ResetCodeAddress 			; point to first line
.1c06	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1c08	98		tya				tya
.1c09	91 28		sta ($28),y			sta 	(codePtr),y
.1c0b	20 e5 16	jsr $16e5			jsr 	CommandClear 				; clear everything down.
.1c0e	4c 59 20	jmp $2059			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1c11					Command_Poke:
.1c11	a9 01		lda #$01			lda 	#1
.1c13	d0 06		bne $1c1b			bne 	PokeGeneral
.1c15					Command_Doke:
.1c15	a9 02		lda #$02			lda 	#2
.1c17	d0 02		bne $1c1b			bne 	PokeGeneral
.1c19					Command_Loke:
.1c19	a9 03		lda #$03			lda 	#3
.1c1b					PokeGeneral:
.1c1b	48		pha				pha 								; save id (PDL = 123)
.1c1c	20 3d 26	jsr $263d			jsr 	EvaluateRootInteger 		; target address
.1c1f	20 50 2c	jsr $2c50			jsr	 	CheckComma
.1c22	e8		inx				inx
.1c23	20 3f 26	jsr $263f			jsr 	EvaluateInteger 			; what value to POKE ?
.1c26	ca		dex				dex
.1c27	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; temp0 points to the target address
.1c2a	84 32		sty $32				sty 	tempShort 					; save Y
.1c2c	68		pla				pla 								; get copy type (1-3) and dispatch
.1c2d	aa		tax				tax
.1c2e	ca		dex				dex
.1c2f	f0 14		beq $1c45			beq 	_Poke1
.1c31	ca		dex				dex
.1c32	f0 0b		beq $1c3f			beq 	_Poke2
.1c34	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1c36	a5 61		lda $61				lda 	esInt3+1
.1c38	91 2a		sta ($2a),y			sta 	(temp0),y
.1c3a	88		dey				dey
.1c3b	a5 59		lda $59				lda 	esInt2+1
.1c3d	91 2a		sta ($2a),y			sta 	(temp0),y
.1c3f					_Poke2:
.1c3f	a0 01		ldy #$01			ldy 	#1
.1c41	a5 51		lda $51				lda 	esInt1+1
.1c43	91 2a		sta ($2a),y			sta 	(temp0),y
.1c45					_Poke1:
.1c45	a0 00		ldy #$00			ldy 	#0
.1c47	a5 49		lda $49				lda 	esInt0+1
.1c49	91 2a		sta ($2a),y			sta 	(temp0),y
.1c4b	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1c4d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c05					lastPrintToken:
>0c05							.fill 	1
.1c4e					Command_Print:
.1c4e	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1c50	8d 05 0c	sta $0c05			sta 	lastPrintToken
.1c53	88		dey				dey
.1c54					_PrintLoopSkip:
.1c54	c8		iny				iny
.1c55					_PrintLoop:
.1c55	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1c57	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1c59	f0 5b		beq $1cb6			beq 	_PrintExit
.1c5b	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1c5d	f0 57		beq $1cb6			beq 	_PrintExit
.1c5f	8d 05 0c	sta $0c05			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1c62	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1c64	f0 ee		beq $1c54			beq 	_PrintLoopSkip
.1c66	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1c68	f0 3c		beq $1ca6			beq	 	_PrintNewLine
.1c6a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1c6c	f0 40		beq $1cae			beq 	_PrintTab
.1c6e	20 1e 26	jsr $261e			jsr 	EvaluateRoot 				; evaluate something at the root
.1c71	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1c73	85 2a		sta $2a				sta 	temp0
.1c75	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1c77	85 2b		sta $2b				sta 	1+(temp0)
.1c79	a5 40		lda $40				lda 	esType 						; get type
.1c7b	f0 15		beq $1c92			beq		_PrintInteger
.1c7d	4a		lsr a				lsr 	a 							; check for floating point
.1c7e	b0 08		bcs $1c88			bcs 	_PrintFloat
.1c80					_PrintString:
.1c80	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1c82	20 c4 19	jsr $19c4			jsr 	TOSToTemp0
.1c85	4c a0 1c	jmp $1ca0			jmp 	_PrintTemp0 				; print no leading space.
.1c88					_PrintFloat:
.1c88	a9 00		lda #$00			lda 	#0 							; stack level.
.1c8a	a2 14		ldx #$14		ldx	#20
.1c8c	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.1c8f	4c 99 1c	jmp $1c99			jmp 	_PrintSpaceTemp0
.1c92					_PrintInteger:
.1c92	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1c94	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1c96	20 26 2b	jsr $2b26			jsr 	MInt32ToString				; convert to text
.1c99					_PrintSpaceTemp0:
.1c99	a9 20		lda #$20			lda 	#32
.1c9b	a2 14		ldx #$14		ldx	#20
.1c9d	20 64 11	jsr $1164		jsr	deviceHandler
.1ca0					_PrintTemp0:
.1ca0	20 c7 1c	jsr $1cc7			jsr 	PrintString
.1ca3	4c 55 1c	jmp $1c55			jmp 	_PrintLoop
.1ca6					_PrintNewLine:
.1ca6	a2 04		ldx #$04		ldx	#4
.1ca8	20 64 11	jsr $1164		jsr	deviceHandler
.1cab	4c 54 1c	jmp $1c54			jmp 	_PrintLoopSkip
.1cae					_PrintTab:
.1cae	a2 1a		ldx #$1a		ldx	#26
.1cb0	20 64 11	jsr $1164		jsr	deviceHandler
.1cb3	4c 54 1c	jmp $1c54			jmp 	_PrintLoopSkip
.1cb6					_PrintExit:
.1cb6	ad 05 0c	lda $0c05			lda		lastPrintToken 				; check last token
.1cb9	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1cbb	f0 09		beq $1cc6			beq 	_PrintExit2
.1cbd	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1cbf	f0 05		beq $1cc6			beq 	_PrintExit2
.1cc1	a2 04		ldx #$04		ldx	#4
.1cc3	20 64 11	jsr $1164		jsr	deviceHandler
.1cc6					_PrintExit2:
.1cc6	60		rts				rts
.1cc7					PrintString:
.1cc7	8a		txa				txa
.1cc8	48		pha				pha
.1cc9	98		tya				tya
.1cca	48		pha				pha
.1ccb	a0 00		ldy #$00			ldy 	#0							; get length
.1ccd	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ccf	aa		tax				tax 								; into X
.1cd0	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1cd2	f0 10		beq $1ce4			beq 	_PSExit
.1cd4	ca		dex				dex
.1cd5	8a		txa				txa
.1cd6	48		pha				pha
.1cd7	c8		iny				iny
.1cd8	b1 2a		lda ($2a),y			lda 	(temp0),y
.1cda	a2 14		ldx #$14		ldx	#20
.1cdc	20 64 11	jsr $1164		jsr	deviceHandler
.1cdf	68		pla				pla
.1ce0	aa		tax				tax
.1ce1	4c d0 1c	jmp $1cd0			jmp 	_PSLoop
.1ce4					_PSExit:
.1ce4	68		pla				pla
.1ce5	a8		tay				tay
.1ce6	68		pla				pla
.1ce7	aa		tax				tax
.1ce8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c06					paramCount:
>0c06							.fill 	1
.1ce9					CallProc:
.1ce9	20 7e 1f	jsr $1f7e			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1cec	48		pha				pha 								; save length on stack
.1ced	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1cef	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1cf1	48		pha				pha
.1cf2	a5 2a		lda $2a				lda 	temp0
.1cf4	48		pha				pha
.1cf5	98		tya				tya 								; calculate Y + length
.1cf6	18		clc				clc
.1cf7	65 32		adc $32				adc 	tempShort
.1cf9	a8		tay				tay
.1cfa	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1cfc					_CallProcEvalParams:
.1cfc	e8		inx				inx
.1cfd	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.1cff	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1d01	f0 0b		beq $1d0e			beq 	_CPDoneParams
.1d03	20 20 26	jsr $2620			jsr 	Evaluate 					; evaluate a parameter
.1d06	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1d08	c8		iny				iny
.1d09	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1d0b	f0 ef		beq $1cfc			beq 	_CallProcEvalParams
.1d0d	88		dey				dey 								; undo consumption.
.1d0e					_CPDoneParams:
.1d0e	20 43 2c	jsr $2c43			jsr 	CheckRightParen 			; check closing parenthesis.
.1d11	8e 06 0c	stx $0c06			stx 	paramCount 					; store parameter count+1
.1d14	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1d16	a9 50		lda #$50			lda 	#markerPROC
.1d18	20 e4 2c	jsr $2ce4			jsr 	RSClaim
.1d1b	a9 01		lda #$01			lda 	#1 							; store return address.
.1d1d	20 10 2d	jsr $2d10			jsr 	RSSavePosition
.1d20	68		pla				pla 								; get the new code Ptr
.1d21	85 28		sta $28				sta 	codePtr
.1d23	68		pla				pla
.1d24	85 29		sta $29				sta 	codePtr+1
.1d26	68		pla				pla 								; length of name + 4 is the param start.
.1d27	18		clc				clc
.1d28	69 04		adc #$04			adc 	#4
.1d2a	a8		tay				tay
.1d2b	a2 ff		ldx #$ff			ldx 	#$FF
.1d2d					_CPLoadParameters:
.1d2d	e8		inx				inx 								; point to where the address should be loaded.
.1d2e	ec 06 0c	cpx $0c06			cpx 	paramCount 					; too many parameters in definition ?
.1d31	f0 1e		beq $1d51			beq 	_CPParamError
.1d33	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.1d35	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.1d37	f0 0e		beq $1d47			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.1d39	20 1f 1b	jsr $1b1f			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1d3c	20 62 19	jsr $1962			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1d3f	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.1d41	c8		iny				iny
.1d42	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1d44	f0 e7		beq $1d2d			beq 	_CPLoadParameters
.1d46	88		dey				dey 								; no, unconsume and check for )
.1d47					_CPParamComplete:
.1d47	20 43 2c	jsr $2c43			jsr 	CheckRightParen 			; check )
.1d4a	e8		inx				inx 								; check right number of parameters have been consumed
.1d4b	ec 06 0c	cpx $0c06			cpx 	paramCount
.1d4e	d0 01		bne $1d51			bne 	_CPParamError
.1d50	60		rts				rts
.1d51					_CPParamError:
.1d51	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1d53	20 85 11	jsr $1185		jsr	errorHandler
.1d56					ReturnProc:
.1d56	20 91 1b	jsr $1b91			jsr 	RestoreLocals 				; get the locals back.
.1d59	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1d5b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1d5d	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1d5f	f0 05		beq $1d66			beq 	_isok
.1d61	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1d63	20 85 11	jsr $1185		jsr	errorHandler
.1d66					_isok:
.1d66	a9 01		lda #$01			lda 	#1
.1d68	20 23 2d	jsr $2d23			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1d6b	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1d6d	20 06 2d	jsr $2d06			jsr 	RSFree
.1d70	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c07					dataPtr:
>0c07							.fill 	2
.0c09					dataIndex:
>0c09							.fill 	1
.1d71					CommandRead:
.1d71	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1d73	20 72 26	jsr $2672			jsr 	EvaluateReference
.1d76	20 b7 1d	jsr $1db7			jsr 	SwapDPCP 					; use the data pointer.
.1d79	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1d7b	c8		iny				iny
.1d7c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1d7e	f0 07		beq $1d87			beq 	_CRInData
.1d80	88		dey				dey
.1d81	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1d83	aa		tax				tax
.1d84	20 5d 2c	jsr $2c5d			jsr 	ScanForward
.1d87					_CRInData:
.1d87	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1d89	20 20 26	jsr $2620			jsr 	Evaluate
.1d8c	ca		dex				dex 								; and write the value.
.1d8d	20 62 19	jsr $1962			jsr 	WriteValue
.1d90	20 b7 1d	jsr $1db7			jsr 	SwapDPCP 					; get the code pointer back.
.1d93	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1d95	c8		iny				iny
.1d96	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1d98	f0 d7		beq $1d71			beq 	CommandRead
.1d9a	88		dey				dey
.1d9b	60		rts				rts
.1d9c					CommandData:
.1d9c	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1d9e	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1da0	20 5d 2c	jsr $2c5d			jsr 	ScanForward
.1da3	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1da4	60		rts				rts
.1da5					CommandRestore:
.1da5	ad c8 0a	lda $0ac8			lda 	basePage
.1da8	8d 07 0c	sta $0c07			sta 	dataPtr
.1dab	ad c9 0a	lda $0ac9			lda 	basePage+1
.1dae	8d 08 0c	sta $0c08			sta 	dataPtr+1
.1db1	a9 03		lda #$03			lda 	#3
.1db3	8d 09 0c	sta $0c09			sta 	dataIndex
.1db6	60		rts				rts
.1db7					SwapDPCP:
.1db7	8a		txa				txa
.1db8	48		pha				pha
.1db9	98		tya				tya 								; swap Y, DataIndex
.1dba	ac 09 0c	ldy $0c09			ldy 	DataIndex
.1dbd	8d 09 0c	sta $0c09			sta 	DataIndex
.1dc0	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1dc2	ae 07 0c	ldx $0c07			ldx 	dataptr
.1dc5	8d 07 0c	sta $0c07			sta 	dataPtr
.1dc8	86 28		stx $28				stx 	codePtr
.1dca	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1dcc	ae 08 0c	ldx $0c08			ldx 	dataptr+1
.1dcf	8d 08 0c	sta $0c08			sta 	dataPtr+1
.1dd2	86 29		stx $29				stx 	codePtr+1
.1dd4	68		pla				pla
.1dd5	aa		tax				tax
.1dd6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1dd7					Command_Rem:
.1dd7					Command_Rem2:
.1dd7	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1dd9	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1ddb	d0 06		bne $1de3			bne 	_CRNotString
.1ddd	c8		iny				iny
.1dde	98		tya				tya
.1ddf	38		sec				sec
.1de0	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1de2	a8		tay				tay
.1de3					_CRNotString:
.1de3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.1de4					Command_Repeat:
.1de4	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1de6	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1de8	20 e4 2c	jsr $2ce4			jsr 	RSClaim
.1deb	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1ded	20 10 2d	jsr $2d10			jsr 	RSSavePosition
.1df0	60		rts				rts
.1df1					Command_Until:
.1df1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1df3	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1df5	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1df7	f0 05		beq $1dfe			beq 	_isok
.1df9	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.1dfb	20 85 11	jsr $1185		jsr	errorHandler
.1dfe					_isok:
.1dfe	20 3d 26	jsr $263d			jsr 	EvaluateRootInteger 		; at the bottom.
.1e01	20 f7 2b	jsr $2bf7			jsr 	MInt32Zero					; check if TOS zero
.1e04	d0 06		bne $1e0c			bne 	_CUExit
.1e06	a9 01		lda #$01			lda 	#1
.1e08	20 23 2d	jsr $2d23			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1e0b	60		rts				rts
.1e0c					_CUExit:
.1e0c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1e0e	20 06 2d	jsr $2d06			jsr 	RSFree
.1e11	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c0a					breakCounter:
>0c0a								.fill 	1
.0c0b					breakIncrement:
>0c0b								.fill 	1
.1e12					Command_Run:
.1e12					XCommand_Run:
.1e12	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.1e14	9a		txs				txs
.1e15	20 7f 1e	jsr $1e7f			jsr 	BreakOn 					; turn break on
.1e18	20 e5 16	jsr $16e5			jsr 	CommandClear 				; clear everything.
.1e1b	20 85 1e	jsr $1e85			jsr 	ResetCodeAddress 			; back to the start.
.1e1e					Command_RunFrom:
.1e1e	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1e20					CRNextInstruction:
.1e20	64 7b		stz $7b				stz 	softMemAlloc+1
.1e22	ad 0a 0c	lda $0c0a			lda 	breakCounter 				; check for break.
.1e25	6d 0b 0c	adc $0c0b			adc 	breakIncrement
.1e28	8d 0a 0c	sta $0c0a			sta 	breakCounter
.1e2b	90 05		bcc $1e32			bcc 	_CRNoChecks
.1e2d	a2 00		ldx #$00		ldx	#0
.1e2f	20 64 11	jsr $1164		jsr	deviceHandler
.1e32					_CRNoChecks
.1e32	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.1e34	10 1c		bpl $1e52			bpl 	_CRNotToken
.1e36	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1e38	b0 0c		bcs $1e46			bcs 	_CRExecute
.1e3a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1e3c	b0 54		bcs $1e92			bcs 	Unimplemented
.1e3e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1e40	b0 04		bcs $1e46			bcs 	_CRExecute
.1e42	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1e44	b0 16		bcs $1e5c			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1e46					_CRExecute:
.1e46	c8		iny				iny 								; consume it.
.1e47	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1e48	aa		tax				tax
.1e49	20 4f 1e	jsr $1e4f			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1e4c	4c 20 1e	jmp $1e20			jmp 	CRNextInstruction
.1e4f					_CRRunRoutine:
.1e4f	7c 9c 1e	jmp ($1e9c,x)			jmp 	(Group0Vectors,x)
.1e52					_CRNotToken:
.1e52	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1e54	b0 3c		bcs $1e92			bcs 	Unimplemented
.1e56					_CRDefaultLet:
.1e56	20 4f 19	jsr $194f			jsr 	CommandLet 					; do the default, LET
.1e59	4c 20 1e	jmp $1e20			jmp 	CRNextInstruction
.1e5c					_CRCheckIndirect:
.1e5c	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1e5e	f0 f6		beq $1e56			beq 	_CRDefaultLet
.1e60	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1e62	f0 f2		beq $1e56			beq 	_CRDefaultLet
.1e64	d0 2c		bne $1e92			bne 	Unimplemented
.1e66					CommandShift1:
.1e66	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.1e68	10 28		bpl $1e92			bpl 	Unimplemented 				; we have an error as this should not happen.
.1e6a	0a		asl a				asl 	a 							; double into X
.1e6b	aa		tax				tax
.1e6c	c8		iny				iny 								; advance over it.
.1e6d	7c 5c 1f	jmp ($1f5c,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1e70					CommandShift2:
.1e70	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1e72	20 63 14	jsr $1463		jsr	extensionHandler
.1e75	60		rts				rts
.1e76					CommandColon:
.1e76	60		rts				rts
.1e77					CommandBreak:
.1e77	20 3d 26	jsr $263d			jsr 	EvaluateRootInteger
.1e7a	20 f7 2b	jsr $2bf7			jsr 	MInt32Zero
.1e7d	f0 02		beq $1e81			beq 	BreakOff
.1e7f					BreakOn:
.1e7f	a2 08		ldx #$08			ldx 	#8
.1e81					BreakOff:
.1e81	8e 0b 0c	stx $0c0b			stx 	breakIncrement
.1e84	60		rts				rts
.1e85					ResetCodeAddress:
.1e85	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1e88	85 28		sta $28				sta 	codePtr
.1e8a	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e8d	85 29		sta $29				sta 	codePtr+1
.1e8f	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1e91	60		rts				rts
.1e92					Unimplemented:
.1e92	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1e94	20 85 11	jsr $1185		jsr	errorHandler
.1e97					TKErr01:
.1e97					TKErr02:
.1e97					TKErr03:
.1e97					TKErr04:
.1e97					TKErr05:
.1e97					TKErr06:
.1e97					TKErr07:
.1e97					TKErr08:
.1e97					TKErr09:
.1e97					TKErr10:
.1e97	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1e99	20 85 11	jsr $1185		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1e9c					Group0Vectors:
>1e9c	5f 20					.word	AdvanceNextLine          ; $80 [[eol]]
>1e9e	66 1e					.word	CommandShift1            ; $81 [[sh1]]
>1ea0	70 1e					.word	CommandShift2            ; $82 [[sh2]]
>1ea2	97 1e					.word	TKErr09                  ; $83 [[sh3]]
>1ea4	97 1e					.word	TKErr10                  ; $84 [[fpc]]
>1ea6	97 1e					.word	TKErr08                  ; $85 [[str]]
>1ea8	23 22					.word	AndHandler               ; $86 and
>1eaa	10 22					.word	OrHandler                ; $87 or
>1eac	fd 21					.word	XorHandler               ; $88 xor
>1eae	45 23					.word	CompareGreaterEq         ; $89 >=
>1eb0	4f 23					.word	CompareLessEq            ; $8a <=
>1eb2	31 23					.word	CompareGreater           ; $8b >
>1eb4	27 23					.word	CompareLess              ; $8c <
>1eb6	1d 23					.word	CompareEquals            ; $8d =
>1eb8	3b 23					.word	CompareNotEquals         ; $8e <>
>1eba	8e 21					.word	AddHandler               ; $8f +
>1ebc	b1 21					.word	SubHandler               ; $90 -
>1ebe	49 22					.word	ShrHandler               ; $91 >>
>1ec0	36 22					.word	ShlHandler               ; $92 <<
>1ec2	c4 21					.word	MulHandler               ; $93 *
>1ec4	d7 21					.word	DivHandler               ; $94 /
>1ec6	ea 21					.word	ModHandler               ; $95 mod
>1ec8	82 22					.word	PowerHandler             ; $96 ^
>1eca	5c 22					.word	WordRefHandler           ; $97 !
>1ecc	6f 22					.word	ByteRefHandler           ; $98 ?
>1ece	e4 1d					.word	Command_Repeat           ; $99 repeat
>1ed0	27 21					.word	Command_While            ; $9a while
>1ed2	4e 17					.word	Command_FOR              ; $9b for
>1ed4	5d 18					.word	CommandIf                ; $9c if
>1ed6	97 1e					.word	TKErr04                  ; $9d defproc
>1ed8	f1 1d					.word	Command_Until            ; $9e until
>1eda	4a 21					.word	Command_Wend             ; $9f wend
>1edc	af 17					.word	Command_NEXT             ; $a0 next
>1ede	97 1e					.word	TKErr06                  ; $a1 then
>1ee0	98 18					.word	Command_ENDIF            ; $a2 endif
>1ee2	56 1d					.word	ReturnProc               ; $a3 endproc
>1ee4	27 25					.word	UnaryParenthesis         ; $a4 (
>1ee6	85 26					.word	UnaryLen                 ; $a5 len(
>1ee8	c9 26					.word	UnarySgn                 ; $a6 sgn(
>1eea	b2 26					.word	UnaryAbs                 ; $a7 abs(
>1eec	22 27					.word	Unary_Random             ; $a8 random(
>1eee	6c 27					.word	Unary_Page               ; $a9 page
>1ef0	cc 2b					.word	MInt32True               ; $aa true
>1ef2	d0 2b					.word	MInt32False              ; $ab false
>1ef4	37 27					.word	Unary_Min                ; $ac min(
>1ef6	3b 27					.word	Unary_Max                ; $ad max(
>1ef8	44 28					.word	UnarySys                 ; $ae sys(
>1efa	ed 27					.word	UnaryTimer               ; $af timer(
>1efc	7c 25					.word	EventFunction            ; $b0 event(
>1efe	16 28					.word	UnaryGet                 ; $b1 get(
>1f00	06 28					.word	UnaryInkey               ; $b2 inkey(
>1f02	bd 27					.word	UnaryAlloc               ; $b3 alloc(
>1f04	7d 28					.word	ExecChr                  ; $b4 chr$(
>1f06	ad 28					.word	ExecLeft                 ; $b5 left$(
>1f08	ca 28					.word	ExecMid                  ; $b6 mid$(
>1f0a	f2 28					.word	ExecRight                ; $b7 right$(
>1f0c	5f 23					.word	Event_Str                ; $b8 str$(
>1f0e	8e 23					.word	UnaryVal                 ; $b9 val(
>1f10	e0 26					.word	UnaryPeek                ; $ba peek(
>1f12	e6 26					.word	UnaryDeek                ; $bb deek(
>1f14	ec 26					.word	UnaryLeek                ; $bc leek(
>1f16	a3 26					.word	UnaryAsc                 ; $bd asc(
>1f18	97 27					.word	UnaryIntToFloat          ; $be int(
>1f1a	aa 27					.word	UnaryFloatToInt          ; $bf float(
>1f1c	91 23					.word	UnaryIsVal               ; $c0 isval(
>1f1e	94 28					.word	ExecUpper                ; $c1 upper$(
>1f20	91 28					.word	ExecLower                ; $c2 lower$(
>1f22	7a 27					.word	UnaryReference           ; $c3 @
>1f24	90 27					.word	UnaryComplement          ; $c4 ~
>1f26	8d 27					.word	UnaryHexMarker           ; $c5 &
>1f28	2f 28					.word	UnaryGetString           ; $c6 get$(
>1f2a	35 28					.word	UnaryInkeyString         ; $c7 inkey$(
>1f2c	6c 28					.word	UnaryMem                 ; $c8 mem
>1f2e	97 1e					.word	TKErr01                  ; $c9 )
>1f30	76 1e					.word	CommandColon             ; $ca :
>1f32	97 1e					.word	TKErr02                  ; $cb ,
>1f34	97 1e					.word	TKErr03                  ; $cc ;
>1f36	d7 1d					.word	Command_Rem2             ; $cd '
>1f38	97 1e					.word	TKErr07                  ; $ce to
>1f3a	97 1e					.word	TKErr05                  ; $cf step
>1f3c	e9 1c					.word	CallProc                 ; $d0 proc
>1f3e	01 1b					.word	CommandLocal             ; $d1 local
>1f40	40 17					.word	Command_Dim              ; $d2 dim
>1f42	d7 1d					.word	Command_Rem              ; $d3 rem
>1f44	4f 19					.word	CommandLet               ; $d4 let
>1f46	99 18					.word	Command_Input            ; $d5 input
>1f48	92 18					.word	Command_ELSE             ; $d6 else
>1f4a	06 21					.word	Command_VDU              ; $d7 vdu
>1f4c	4e 1c					.word	Command_Print            ; $d8 print
>1f4e	d4 20					.word	CommandGOTO              ; $d9 goto
>1f50	a9 20					.word	CommandGOSUB             ; $da gosub
>1f52	bc 20					.word	CommandRETURN            ; $db return
>1f54	9c 1d					.word	CommandData              ; $dc data
>1f56	d7 16					.word	Command_Assert           ; $dd assert
>1f58	11 1c					.word	Command_Poke             ; $de poke
>1f5a	15 1c					.word	Command_Doke             ; $df doke
>1f5c	19 1c					.word	Command_Loke             ; $e0 loke
>1f5e	79 20					.word	Command_Ink              ; $e1 ink
>1f60	84 20					.word	Command_Paper            ; $e2 paper
>1f62	73 20					.word	Command_CLS              ; $e3 cls
>1f64	8f 20					.word	Command_Locate           ; $e4 locate
>1f66	77 1e					.word	CommandBreak             ; $e5 break

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1f68					Group1Vectors:
>1f68	e5 16					.word	CommandClear             ; $86 clear
>1f6a	a8 1a					.word	CommandLoad              ; $87 load
>1f6c	bd 1a					.word	CommandSave              ; $88 save
>1f6e	cd 19					.word	CommandList              ; $89 list
>1f70	03 1c					.word	Command_New              ; $8a new
>1f72	12 1e					.word	Command_Run              ; $8b run
>1f74	71 1d					.word	CommandRead              ; $8c read
>1f76	a5 1d					.word	CommandRestore           ; $8d restore
>1f78	59 20					.word	CommandEnd               ; $8e end
>1f7a	54 20					.word	CommandStop              ; $8f stop
>1f7c	5c 20					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c0c					procList:
>0c0c							.fill 	2		 					; terminated by name high being zero.
.0c0e					yInLine:
>0c0e							.fill 	1
.1f7e					FindProcedure:
.1f7e	8c 0e 0c	sty $0c0e			sty 	yInLine 					; save current position.
.1f81	20 3c 20	jsr $203c			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1f84	85 2c		sta $2c				sta 	temp1
.1f86	ad 0c 0c	lda $0c0c			lda		procList 					; put procList address in temp2
.1f89	85 2e		sta $2e				sta 	temp2
.1f8b	ad 0d 0c	lda $0c0d			lda 	procList+1
.1f8e	85 2f		sta $2f				sta 	temp2+1
.1f90	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1f92					_FPLoop:
.1f92	b1 2e		lda ($2e),y			lda 	(temp2),y
.1f94	f0 4f		beq $1fe5			beq 	_FPError 					; if so, we don't know this procedure.
.1f96	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1f98	c8		iny				iny
.1f99	b1 2e		lda ($2e),y			lda 	(temp2),y
.1f9b	85 2a		sta $2a				sta 	temp0
.1f9d	c8		iny				iny
.1f9e	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.1fa0	c5 2c		cmp $2c				cmp 	temp1
.1fa2	d0 2b		bne $1fcf			bne 	_FPNext 					; hash is different, go to next.
.1fa4	38		sec				sec
.1fa5	ad 0e 0c	lda $0c0e			lda 	yInLine 					; position in line must be at least 4
.1fa8	e9 04		sbc #$04			sbc 	#4
.1faa	18		clc				clc
.1fab	65 28		adc $28				adc 	codePtr
.1fad	85 30		sta $30				sta 	temp3
.1faf	a5 29		lda $29				lda 	codePtr+1
.1fb1	69 00		adc #$00			adc 	#0
.1fb3	85 31		sta $31				sta 	temp3+1
.1fb5	98		tya				tya
.1fb6	48		pha				pha
.1fb7	a0 04		ldy #$04			ldy 	#4
.1fb9					_FPCName:
.1fb9	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.1fbb	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1fbd	d0 0e		bne $1fcd			bne 	_FPpulYNext 				; if different go to next one.
.1fbf	c8		iny				iny
.1fc0	c9 3a		cmp #$3a			cmp 	#$3A
.1fc2	90 f5		bcc $1fb9			bcc 	_FPCName 					; compare the whole lot....
.1fc4	68		pla				pla 								; throw away the saved Y
.1fc5	98		tya				tya 								; length of name is Y-4
.1fc6	38		sec				sec
.1fc7	e9 04		sbc #$04			sbc 	#4
.1fc9	ac 0e 0c	ldy $0c0e			ldy 	yInLine  					; get the original Y back
.1fcc	60		rts				rts
.1fcd					_FPpulYNext:
.1fcd	68		pla				pla
.1fce	a8		tay				tay
.1fcf					_FPNext:
.1fcf	c8		iny				iny 								; next procedure record.
.1fd0	10 c0		bpl $1f92			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1fd2	98		tya				tya 								; subtract 128 from Y
.1fd3	38		sec				sec
.1fd4	e9 80		sbc #$80			sbc 	#128
.1fd6	a8		tay				tay
.1fd7	18		clc				clc 								; add 128 to temp2, so we can have more than
.1fd8	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.1fda	69 80		adc #$80			adc 	#128
.1fdc	85 2e		sta $2e				sta 	temp2
.1fde	90 b2		bcc $1f92			bcc 	_FPLoop
.1fe0	e6 2f		inc $2f				inc 	temp2+1
.1fe2	4c 92 1f	jmp $1f92			jmp 	_FPLoop
.1fe5					_FPError:
.1fe5	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1fe7	20 85 11	jsr $1185		jsr	errorHandler
.1fea					ScanProc:
.1fea	98		tya				tya
.1feb	48		pha				pha
.1fec	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.1fee	8d 0c 0c	sta $0c0c			sta 	procList
.1ff1	a5 36		lda $36				lda 	lowMemory+1
.1ff3	8d 0d 0c	sta $0c0d			sta 	procList+1
.1ff6	20 85 1e	jsr $1e85			jsr 	ResetCodeAddress 			; back to the start.
.1ff9					_ScanLoop:
.1ff9	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1ffb	b1 28		lda ($28),y			lda 	(codePtr),y
.1ffd	f0 2a		beq $2029			beq 	_ScanExit
.1fff	a0 03		ldy #$03			ldy 	#3							; get first token
.2001	b1 28		lda ($28),y			lda 	(codePtr),y
.2003	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2005	d0 12		bne $2019			bne 	_ScanNext
.2007	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2009	20 31 20	jsr $2031			jsr 	_ScanWrite
.200c	a5 28		lda $28				lda 	codePtr
.200e	20 31 20	jsr $2031			jsr 	_ScanWrite
.2011	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2013	20 3c 20	jsr $203c			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2016	20 31 20	jsr $2031			jsr 	_ScanWrite					; and write that
.2019					_ScanNext:
.2019	18		clc				clc
.201a	a0 00		ldy #$00			ldy 	#0
.201c	b1 28		lda ($28),y			lda 	(codePtr),y
.201e	65 28		adc $28				adc 	codePtr
.2020	85 28		sta $28				sta 	codePtr
.2022	90 d5		bcc $1ff9			bcc 	_ScanLoop
.2024	e6 29		inc $29				inc 	codePtr+1
.2026	4c f9 1f	jmp $1ff9			jmp 	_ScanLoop
.2029					_ScanExit:
.2029	a9 00		lda #$00			lda 	#0 							; write ending zero.
.202b	20 31 20	jsr $2031			jsr 	_ScanWrite
.202e	68		pla				pla
.202f	a8		tay				tay
.2030	60		rts				rts
.2031					_ScanWrite:
.2031	a0 00		ldy #$00			ldy 	#0
.2033	91 35		sta ($35),y			sta 	(lowMemory),y
.2035	e6 35		inc $35				inc 	lowMemory
.2037	d0 02		bne $203b			bne 	_SWNoCarry
.2039	e6 36		inc $36				inc 	lowMemory+1
.203b					_SWNoCarry:
.203b	60		rts				rts
.203c					CalculateProcedureHash:
.203c	a9 00		lda #$00			lda 	#0 							; clear hash.
.203e	85 2a		sta $2a				sta 	temp0
.2040					_CPHLoop:
.2040	18		clc				clc 								; add character and rotate and add carry back in
.2041	b1 28		lda ($28),y			lda 	(codePtr),y
.2043	65 2a		adc $2a				adc 	temp0
.2045	6a		ror a				ror 	a
.2046	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2048	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.204a	b1 28		lda ($28),y			lda 	(codePtr),y
.204c	c8		iny				iny 								; advance incase we go round again.
.204d	c9 3a		cmp #$3a			cmp 	#$3A
.204f	90 ef		bcc $2040			bcc 	_CPHLoop
.2051	a5 2a		lda $2a				lda 	temp0
.2053	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.2054					CommandStop:
.2054	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2056	20 85 11	jsr $1185		jsr	errorHandler
.2059					CommandEnd:
.2059	4c 32 2d	jmp $2d32			jmp 	WarmStart
.205c					CommandXemu:
.205c	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.205f					AdvanceNextLine:
.205f	a0 00		ldy #$00			ldy 	#0 							; get offset
.2061	b1 28		lda ($28),y			lda 	(codePtr),y
.2063	18		clc				clc 								; add to codePtr
.2064	65 28		adc $28				adc 	codePtr
.2066	85 28		sta $28				sta 	codePtr
.2068	90 02		bcc $206c			bcc 	_ANLNoCarry
.206a	e6 29		inc $29				inc 	codePtr+1
.206c					_ANLNoCarry:
.206c	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.206e	f0 e9		beq $2059			beq 	CommandEnd 					; execute END
.2070	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2072	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.2073					Command_CLS:
.2073	a2 02		ldx #$02		ldx	#2
.2075	20 64 11	jsr $1164		jsr	deviceHandler
.2078	60		rts				rts
.2079					Command_Ink:
.2079	a2 00		ldx #$00			ldx 	#0
.207b	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger
.207e	a2 08		ldx #$08		ldx	#8
.2080	20 64 11	jsr $1164		jsr	deviceHandler
.2083	60		rts				rts
.2084					Command_Paper:
.2084	a2 00		ldx #$00			ldx 	#0
.2086	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger
.2089	a2 12		ldx #$12		ldx	#18
.208b	20 64 11	jsr $1164		jsr	deviceHandler
.208e	60		rts				rts
.208f					Command_Locate:
.208f	a2 00		ldx #$00			ldx 	#0
.2091	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger
.2094	20 50 2c	jsr $2c50			jsr 	CheckComma
.2097	e8		inx				inx
.2098	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger
.209b	98		tya				tya
.209c	48		pha				pha
.209d	a4 49		ldy $49				ldy 	esInt0+1
.209f	a5 48		lda $48				lda 	esInt0
.20a1	a2 10		ldx #$10		ldx	#16
.20a3	20 64 11	jsr $1164		jsr	deviceHandler
.20a6	68		pla				pla
.20a7	a8		tay				tay
.20a8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.20a9					CommandGOSUB:
.20a9	20 3d 26	jsr $263d			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.20ac	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.20ae	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.20b0	20 e4 2c	jsr $2ce4			jsr 	RSClaim
.20b3	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.20b5	20 10 2d	jsr $2d10			jsr 	RSSavePosition
.20b8	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.20ba	f0 1b		beq $20d7			beq 	GotoTOS 					; and do a GOTO there.
.20bc					CommandRETURN:
.20bc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.20be	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.20c0	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.20c2	f0 05		beq $20c9			beq 	_isok
.20c4	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.20c6	20 85 11	jsr $1185		jsr	errorHandler
.20c9					_isok:
.20c9	a9 01		lda #$01			lda 	#1
.20cb	20 23 2d	jsr $2d23			jsr 	RSLoadPosition 				; reload the position from offset 1.
.20ce	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.20d0	20 06 2d	jsr $2d06			jsr 	RSFree
.20d3	60		rts				rts
.20d4					CommandGOTO:
.20d4	20 3d 26	jsr $263d			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.20d7					GotoTOS:
.20d7	20 85 1e	jsr $1e85			jsr 	ResetCodeAddress 			; simple search.
.20da					_GotoSearch:
.20da	a0 00		ldy #$00			ldy 	#0 							; get offset
.20dc	b1 28		lda ($28),y			lda 	(codePtr),y
.20de	f0 21		beq $2101			beq 	_GotoError 					; not found.
.20e0	c8		iny				iny									; check LSB match
.20e1	b1 28		lda ($28),y			lda 	(codePtr),y
.20e3	d5 48		cmp $48,x			cmp 	esInt0,x
.20e5	d0 07		bne $20ee			bne 	_GotoNext
.20e7	c8		iny				iny
.20e8	b1 28		lda ($28),y			lda 	(codePtr),y
.20ea	d5 50		cmp $50,x			cmp 	esInt1,x
.20ec	f0 10		beq $20fe			beq 	_GotoFound
.20ee					_GotoNext:
.20ee	a0 00		ldy #$00			ldy 	#0 							; go next line
.20f0	b1 28		lda ($28),y			lda 	(codePtr),y
.20f2	18		clc				clc
.20f3	65 28		adc $28				adc 	codePtr
.20f5	85 28		sta $28				sta 	codePtr
.20f7	90 e1		bcc $20da			bcc 	_GotoSearch
.20f9	e6 29		inc $29				inc 	codePtr+1
.20fb	4c da 20	jmp $20da			jmp 	_GotoSearch
.20fe					_GotoFound:
.20fe	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2100	60		rts				rts
.2101					_GotoError:
.2101	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2103	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.2106					Command_VDU:
.2106	20 3d 26	jsr $263d			jsr 	EvaluateRootInteger 			; get integer at root.
.2109	a5 48		lda $48				lda 	esInt0
.210b	a2 14		ldx #$14		ldx	#20
.210d	20 64 11	jsr $1164		jsr	deviceHandler
.2110					_CVNext:
.2110	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2112	c8		iny				iny
.2113	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2115	f0 ef		beq $2106			beq 	Command_VDU
.2117	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2119	d0 0a		bne $2125			bne 	_CVExit
.211b	a5 50		lda $50				lda 	esInt1
.211d	a2 14		ldx #$14		ldx	#20
.211f	20 64 11	jsr $1164		jsr	deviceHandler
.2122	4c 10 21	jmp $2110			jmp 	_CVNext
.2125	88		dey		_CVExit:dey
.2126	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2127					Command_While:
.2127	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2129	a2 04		ldx #$04			ldx 	#4
.212b	20 e4 2c	jsr $2ce4			jsr 	RSClaim 					; create on stack.
.212e	88		dey				dey
.212f	a9 01		lda #$01			lda 	#1
.2131	20 10 2d	jsr $2d10			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2134	c8		iny				iny
.2135	20 3f 26	jsr $263f			jsr 	EvaluateInteger				; get the conditional
.2138	20 f7 2b	jsr $2bf7			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.213b	f0 01		beq $213e			beq 	_CWFail
.213d	60		rts				rts
.213e					_CWFail:
.213e	a9 04		lda #$04			lda 	#4
.2140	20 06 2d	jsr $2d06			jsr 	RSFree 						; close the just opened position.
.2143	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2145	aa		tax				tax
.2146	20 5d 2c	jsr $2c5d			jsr 	ScanForward
.2149	60		rts				rts
.214a					Command_Wend:
.214a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.214c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.214e	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2150	f0 05		beq $2157			beq 	_isok
.2152	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2154	20 85 11	jsr $1185		jsr	errorHandler
.2157					_isok:
.2157	a9 01		lda #$01			lda 	#1
.2159	20 23 2d	jsr $2d23			jsr 	RSLoadPosition				; go back until true
.215c	a9 04		lda #$04			lda 	#4
.215e	20 06 2d	jsr $2d06			jsr 	RSFree 						; close the loop
.2161	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.2162					BinaryProcess:
.2162	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2164	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.2166	0a		asl a				asl 	a
.2167	30 0e		bmi $2177			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2169	18		clc				clc 								; return CC for integer
.216a	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.216c	f0 08		beq $2176			beq 	_BPExit 					; if both integer then return with CC.
.216e	20 7c 21	jsr $217c			jsr 	BPMakeBothFloat 			; make both float
.2171	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2173	95 40		sta $40,x			sta 	esType,x
.2175	38		sec				sec 								; and return with carry set.
.2176					_BPExit:
.2176	60		rts				rts
.2177					_BPStringType:
.2177	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2179	20 85 11	jsr $1185		jsr	errorHandler
.217c					BPMakeBothFloat:
.217c	e8		inx				inx
.217d	20 81 21	jsr $2181			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2180	ca		dex				dex
.2181					BPMakeFloat:
.2181	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.2183	4a		lsr a				lsr 	a
.2184	b0 07		bcs $218d			bcs 	_BPIsFloat 					; already a float if set.
.2186	8a		txa				txa
.2187	a2 1a		ldx #$1a		ldx	#26
.2189	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.218c	aa		tax				tax
.218d					_BPIsFloat:
.218d	60		rts				rts
.218e					AddHandler:
.218e	20 dd 23	jsr $23dd			jsr 	DereferenceTwo 				; dereference top two on stack.
.2191	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.2193	35 41		and $41,x			and 	esType+1,x
.2195	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2197	d0 10		bne $21a9			bne 	_AHStringConcat				; concatenate strings.
.2199	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.219c	b0 03		bcs $21a1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.219e	4c b4 2a	jmp $2ab4			jmp 	MInt32Add 							; else do it as integer.
.21a1					_IsFPOperation:
.21a1	8a		txa				txa 								; call the relevant fp routine
.21a2	a2 02		ldx #$02		ldx	#2
.21a4	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.21a7	aa		tax				tax
.21a8	60		rts				rts
.21a9					_AHStringConcat:
.21a9	8a		txa				txa 								; handled by the string module.
.21aa	a2 04		ldx #$04		ldx	#4
.21ac	20 ed 2f	jsr $2fed		jsr	stringHandler
.21af	aa		tax				tax
.21b0	60		rts				rts
.21b1					SubHandler:
.21b1	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.21b4	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.21b7	b0 03		bcs $21bc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21b9	4c ce 2a	jmp $2ace			jmp 	MInt32Sub 							; else do it as integer.
.21bc					_IsFPOperation:
.21bc	8a		txa				txa 								; call the relevant fp routine
.21bd	a2 10		ldx #$10		ldx	#16
.21bf	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.21c2	aa		tax				tax
.21c3	60		rts				rts
.21c4					MulHandler:
.21c4	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.21c7	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.21ca	b0 03		bcs $21cf			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21cc	4c e8 2a	jmp $2ae8			jmp 	MInt32Multiply 							; else do it as integer.
.21cf					_IsFPOperation:
.21cf	8a		txa				txa 								; call the relevant fp routine
.21d0	a2 0a		ldx #$0a		ldx	#10
.21d2	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.21d5	aa		tax				tax
.21d6	60		rts				rts
.21d7					DivHandler:
.21d7	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.21da	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.21dd	b0 03		bcs $21e2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21df	4c a5 29	jmp $29a5			jmp 	MInt32SDivide 							; else do it as integer.
.21e2					_IsFPOperation:
.21e2	8a		txa				txa 								; call the relevant fp routine
.21e3	a2 06		ldx #$06		ldx	#6
.21e5	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.21e8	aa		tax				tax
.21e9	60		rts				rts
.21ea					ModHandler:
.21ea	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.21ed	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.21f0	b0 03		bcs $21f5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21f2	4c 23 2a	jmp $2a23			jmp 	MInt32Modulus 							; else do it as integer.
.21f5					_IsFPOperation:
.21f5	8a		txa				txa 								; call the relevant fp routine
.21f6	a2 08		ldx #$08		ldx	#8
.21f8	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.21fb	aa		tax				tax
.21fc	60		rts				rts
.21fd					XorHandler:
.21fd	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.2200	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.2203	b0 03		bcs $2208			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2205	4c 57 29	jmp $2957			jmp 	MInt32Xor 							; else do it as integer.
.2208					_IsFPOperation:
.2208	8a		txa				txa 								; call the relevant fp routine
.2209	a2 08		ldx #$08		ldx	#8
.220b	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.220e	aa		tax				tax
.220f	60		rts				rts
.2210					OrHandler:
.2210	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.2213	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.2216	b0 03		bcs $221b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2218	4c 3e 29	jmp $293e			jmp 	MInt32Or 							; else do it as integer.
.221b					_IsFPOperation:
.221b	8a		txa				txa 								; call the relevant fp routine
.221c	a2 08		ldx #$08		ldx	#8
.221e	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2221	aa		tax				tax
.2222	60		rts				rts
.2223					AndHandler:
.2223	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.2226	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.2229	b0 03		bcs $222e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.222b	4c 25 29	jmp $2925			jmp 	MInt32And 							; else do it as integer.
.222e					_IsFPOperation:
.222e	8a		txa				txa 								; call the relevant fp routine
.222f	a2 08		ldx #$08		ldx	#8
.2231	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2234	aa		tax				tax
.2235	60		rts				rts
.2236					ShlHandler:
.2236	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.2239	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.223c	b0 03		bcs $2241			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.223e	4c b7 22	jmp $22b7			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2241					_IsFPOperation:
.2241	8a		txa				txa 								; call the relevant fp routine
.2242	a2 08		ldx #$08		ldx	#8
.2244	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2247	aa		tax				tax
.2248	60		rts				rts
.2249					ShrHandler:
.2249	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.224c	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.224f	b0 03		bcs $2254			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2251	4c ba 22	jmp $22ba			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2254					_IsFPOperation:
.2254	8a		txa				txa 								; call the relevant fp routine
.2255	a2 08		ldx #$08		ldx	#8
.2257	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.225a	aa		tax				tax
.225b	60		rts				rts
.225c					WordRefHandler:
.225c	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.225f	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.2262	b0 03		bcs $2267			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2264	4c a9 22	jmp $22a9			jmp 	MInt32WordIndirect 							; else do it as integer.
.2267					_IsFPOperation:
.2267	8a		txa				txa 								; call the relevant fp routine
.2268	a2 08		ldx #$08		ldx	#8
.226a	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.226d	aa		tax				tax
.226e	60		rts				rts
.226f					ByteRefHandler:
.226f	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.2272	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.2275	b0 03		bcs $227a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2277	4c ad 22	jmp $22ad			jmp 	MInt32ByteIndirect 							; else do it as integer.
.227a					_IsFPOperation:
.227a	8a		txa				txa 								; call the relevant fp routine
.227b	a2 08		ldx #$08		ldx	#8
.227d	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2280	aa		tax				tax
.2281	60		rts				rts
.2282					PowerHandler:
.2282	20 dd 23	jsr $23dd			jsr 	DereferenceTwo
.2285	20 62 21	jsr $2162			jsr 	BinaryProcess 				; check to see if either is float
.2288	b0 03		bcs $228d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.228a	4c 95 22	jmp $2295			jmp 	PowerInteger 							; else do it as integer.
.228d					_IsFPOperation:
.228d	8a		txa				txa 								; call the relevant fp routine
.228e	a2 16		ldx #$16		ldx	#22
.2290	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2293	aa		tax				tax
.2294	60		rts				rts
.2295					PowerInteger:
.2295	20 7c 21	jsr $217c			jsr 	BPMakeBothFloat				; make them float.
.2298	8a		txa				txa
.2299	a2 16		ldx #$16		ldx	#22
.229b	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.229e	a2 12		ldx #$12		ldx	#18
.22a0	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.22a3	aa		tax				tax
.22a4	a9 00		lda #$00			lda 	#0 							; make type integer
.22a6	95 40		sta $40,x			sta 	esType,x
.22a8	60		rts				rts
.22a9					Mint32WordIndirect:
.22a9	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.22ab	d0 02		bne $22af			bne 	Min32Indirect
.22ad					Mint32ByteIndirect:
.22ad	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.22af					Min32Indirect:
.22af	48		pha				pha 								; save the indirection
.22b0	20 b4 2a	jsr $2ab4			jsr 	MInt32Add 					; add a!b a?b
.22b3	68		pla				pla 								; and set the type to reference.
.22b4	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.22b6	60		rts				rts
.22b7					Mint32ShiftLeftX:
.22b7	18		clc				clc 								; CC shift left
.22b8	90 01		bcc $22bb			bcc 	Mint32Shift
.22ba					Mint32ShiftRightX:
.22ba	38		sec				sec 								; CS shift right
.22bb					Mint32Shift:
.22bb	08		php				php 								; save carry flag on stack.
.22bc	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.22be	15 59		ora $59,x			ora 	esInt2+1,x
.22c0	15 61		ora $61,x			ora 	esInt3+1,x
.22c2	d0 1e		bne $22e2			bne 	_MShiftZero
.22c4	b5 49		lda $49,x			lda 	esInt0+1,x
.22c6	c9 20		cmp #$20			cmp 	#32
.22c8	b0 18		bcs $22e2			bcs 	_MShiftZero
.22ca					_MShiftLoop:
.22ca	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.22cc	f0 12		beq $22e0			beq 	_MShiftExit
.22ce	d6 49		dec $49,x			dec 	esInt0+1,x
.22d0	28		plp				plp 								; restore and save carry
.22d1	08		php				php
.22d2	90 06		bcc $22da			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.22d4	20 ee 2b	jsr $2bee			jsr 	Mint32ShiftRight
.22d7	4c ca 22	jmp $22ca			jmp 	_MShiftLoop
.22da					_MShiftLeft:
.22da	20 e5 2b	jsr $2be5			jsr 	Mint32ShiftLeft
.22dd	4c ca 22	jmp $22ca			jmp 	_MShiftLoop
.22e0					_MShiftExit:
.22e0	28		plp				plp	 								; throw saved carry and exit
.22e1	60		rts				rts
.22e2					_MShiftZero:
.22e2	4c d0 2b	jmp $2bd0			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.22e5					PerformComparison:
.22e5	20 dd 23	jsr $23dd			jsr 	DereferenceTwo 				; make both values.
.22e8	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.22ea	35 41		and $41,x			and 	esType+1,x
.22ec	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.22ed	30 1d		bmi $230c			bmi 	_PCIsString
.22ef	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.22f1	15 41		ora $41,x			ora 	esType+1,x
.22f3	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.22f4	30 22		bmi $2318			bmi 	_PCError
.22f6	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.22f8	f0 0f		beq $2309			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.22fa	20 7c 21	jsr $217c			jsr 	BPMakeBothFloat 			; make both float
.22fd	8a		txa				txa
.22fe	a2 04		ldx #$04		ldx	#4
.2300	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2303	86 32		stx $32				stx 	tempShort 					; save result
.2305	aa		tax				tax
.2306	a5 32		lda $32				lda 	tempShort
.2308	60		rts				rts
.2309					_PCIsInteger:
.2309	4c 70 29	jmp $2970			jmp 	MInt32Compare
.230c					_PCIsString:
.230c	8a		txa				txa 								; A has SP
.230d	a2 08		ldx #$08		ldx	#8
.230f	20 ed 2f	jsr $2fed		jsr	stringHandler
.2312	86 32		stx $32				stx 	tempShort 					; save result
.2314	aa		tax				tax 								; put SP back in X and get result.
.2315	a5 32		lda $32				lda 	tempShort
.2317	60		rts				rts
.2318					_PCError:
.2318	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.231a	20 85 11	jsr $1185		jsr	errorHandler
.231d					CompareEquals:
.231d	20 e5 22	jsr $22e5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2320	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2322	f0 35		beq $2359			beq  	CompareTrue
.2324	4c 5c 23	jmp $235c			jmp 	CompareFalse
.2327					CompareLess:
.2327	20 e5 22	jsr $22e5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.232a	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.232c	f0 2b		beq $2359			beq  	CompareTrue
.232e	4c 5c 23	jmp $235c			jmp 	CompareFalse
.2331					CompareGreater:
.2331	20 e5 22	jsr $22e5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2334	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2336	f0 21		beq $2359			beq  	CompareTrue
.2338	4c 5c 23	jmp $235c			jmp 	CompareFalse
.233b					CompareNotEquals:
.233b	20 e5 22	jsr $22e5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.233e	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2340	d0 17		bne $2359			bne  	CompareTrue
.2342	4c 5c 23	jmp $235c			jmp 	CompareFalse
.2345					CompareGreaterEq:
.2345	20 e5 22	jsr $22e5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2348	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.234a	d0 0d		bne $2359			bne  	CompareTrue
.234c	4c 5c 23	jmp $235c			jmp 	CompareFalse
.234f					CompareLessEq:
.234f	20 e5 22	jsr $22e5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2352	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2354	d0 03		bne $2359			bne  	CompareTrue
.2356	4c 5c 23	jmp $235c			jmp 	CompareFalse
.2359					CompareTrue:
.2359	4c cc 2b	jmp $2bcc			jmp 	MInt32True
.235c					CompareFalse:
.235c	4c d0 2b	jmp $2bd0			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.235f					Event_Str:
.235f	20 29 26	jsr $2629			jsr 	EvaluateNumeric 			; get a number.
.2362	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.2364	d0 13		bne $2379			bne 	_ESFloat
.2366	20 bc 23	jsr $23bc			jsr 	ConvertGetBase 				; get base, or default.
.2369	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.236b	85 2a		sta $2a				sta 	temp0
.236d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.236f	85 2b		sta $2b				sta 	1+(temp0)
.2371	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2373	20 26 2b	jsr $2b26			jsr 	MInt32ToString 				; convert to string.
.2376	4c 86 23	jmp $2386			jmp 	_ESCloneExit 				; clone and exit.
.2379					_ESFloat:
.2379	20 43 2c	jsr $2c43			jsr 	CheckRightParen 			; check closing )
.237c	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.237f	8a		txa				txa
.2380	a2 14		ldx #$14		ldx	#20
.2382	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2385	aa		tax				tax
.2386					_ESCloneExit:
.2386	8a		txa				txa
.2387	a2 02		ldx #$02		ldx	#2
.2389	20 ed 2f	jsr $2fed		jsr	stringHandler
.238c	aa		tax				tax
.238d	60		rts				rts
.238e					UnaryVal:
.238e	38		sec				sec 								; Carry set to return value
.238f	b0 01		bcs $2392			bcs 	ValueMain
.2391					UnaryIsVal:
.2391	18		clc				clc									; Carry clear to return legitimacy
.2392					ValueMain:
.2392	08		php				php 								; save results (CS is value, CC is validation)
.2393	20 34 26	jsr $2634			jsr 	EvaluateString
.2396	20 bc 23	jsr $23bc			jsr 	ConvertGetBase 				; get base, if any.
.2399	98		tya				tya
.239a	48		pha				pha
.239b	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.239e	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.23a0	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.23a2	20 3e 2a	jsr $2a3e			jsr 	MInt32FromString 			; convert it back from a string.
.23a5	b0 0c		bcs $23b3			bcs 	_VMSuccess 					; successfully converted.
.23a7	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.23a9	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.23ab	f0 00		beq $23ad			beq 	_VMFailed 	 				; so we failed.
.23ad					_VMFailed:
.23ad	68		pla				pla
.23ae	a8		tay				tay
.23af	28		plp				plp
.23b0	4c d0 2b	jmp $2bd0			jmp 	MInt32False 				; return 0 whatever.
.23b3					_VMSuccess:
.23b3	68		pla				pla
.23b4	a8		tay				tay
.23b5	28		plp				plp 								; if CS the it was val() so we want the value.
.23b6	b0 03		bcs $23bb			bcs 	_VMExit
.23b8	4c cc 2b	jmp $2bcc			jmp 	MInt32True 					; otherwise return true as successful.
.23bb					_VMExit:
.23bb	60		rts				rts
.23bc					ConvertGetBase:
.23bc	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.23be	95 49		sta $49,x			sta 	esInt0+1,x
.23c0	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.23c2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.23c4	d0 0e		bne $23d4			bne 	_CGBDone 					; not found, should be )
.23c6	e8		inx				inx 								; next level
.23c7	c8		iny				iny 								; skip comma.
.23c8	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger		; evaluate the base.
.23cb	ca		dex				dex
.23cc	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.23ce	90 08		bcc $23d8			bcc 	_CGBValue 					; (it should work as high as 37)
.23d0	c9 11		cmp #$11			cmp 	#17
.23d2	b0 04		bcs $23d8			bcs 	_CGBValue
.23d4					_CGBDone:
.23d4	20 43 2c	jsr $2c43			jsr 	CheckRightParen
.23d7	60		rts				rts
.23d8					_CGBValue:
.23d8	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.23da	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.23dd					DereferenceTwo:
.23dd	e8		inx				inx
.23de	20 e2 23	jsr $23e2			jsr 	DereferenceOne
.23e1	ca		dex				dex
.23e2					DereferenceOne:
.23e2	b5 40		lda $40,x			lda 	esType,x
.23e4	10 3d		bpl $2423			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.23e6	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.23e7	b0 3b		bcs $2424			bcs 	_DRFloatDeReference
.23e9	98		tya				tya
.23ea	48		pha				pha
.23eb	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.23ed	85 2a		sta $2a				sta 	temp0
.23ef	b5 50		lda $50,x			lda 	esInt1,x
.23f1	85 2b		sta $2b				sta 	temp0+1
.23f3	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.23f5	95 50		sta $50,x			sta 	esInt1,x
.23f7	95 58		sta $58,x			sta 	esInt2,x
.23f9	95 60		sta $60,x			sta 	esInt3,x
.23fb	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.23fd	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.23ff	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2400	30 0d		bmi $240f			bmi 	_DeRefString 				; string, 2 bytes only
.2402	d0 11		bne $2415			bne 	_DeRefByte 					; byte 1 byte only
.2404					_DeRefLong:
.2404	a0 03		ldy #$03			ldy 	#3
.2406	b1 2a		lda ($2a),y			lda 	(temp0),y
.2408	95 60		sta $60,x			sta 	esInt3,x
.240a	88		dey				dey
.240b	b1 2a		lda ($2a),y			lda 	(temp0),y
.240d	95 58		sta $58,x			sta 	esInt2,x
.240f					_DeRefString:
.240f	a0 01		ldy #$01			ldy 	#1
.2411	b1 2a		lda ($2a),y			lda 	(temp0),y
.2413	95 50		sta $50,x			sta 	esInt1,x
.2415					_DeRefByte:
.2415	a0 00		ldy #$00			ldy 	#0
.2417	b1 2a		lda ($2a),y			lda 	(temp0),y
.2419	95 48		sta $48,x			sta 	esInt0,x
.241b	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.241d	29 40		and #$40			and 	#$40
.241f	95 40		sta $40,x			sta 	esType,x
.2421	68		pla				pla
.2422	a8		tay				tay
.2423					_DRNotReference
.2423	60		rts				rts
.2424					_DRFloatDereference:
.2424	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; address to deref in temp0
.2427	8a		txa				txa
.2428	a2 1c		ldx #$1c		ldx	#28
.242a	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.242d	aa		tax				tax
.242e	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2430	95 40		sta $40,x			sta 	esType,x
.2432	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2433					EvaluateLevel:
.2433	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2435	b0 1e		bcs $2455			bcs 	_ELStack
.2437	48		pha				pha 								; save precedence level.
.2438	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.243a	95 48		sta $48,x			sta 	esInt0,x
.243c	95 50		sta $50,x			sta 	esInt1,x
.243e	95 58		sta $58,x			sta 	esInt2,x
.2440	95 60		sta $60,x			sta 	esInt3,x
.2442	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.2444	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2446	30 26		bmi $246e			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2448	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2449	30 0f		bmi $245a			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.244b	8a		txa				txa 								; stack level in X
.244c	a2 00		ldx #$00		ldx	#0
.244e	20 eb 39	jsr $39eb		jsr	variableHandler
.2451	aa		tax				tax
.2452	4c 97 24	jmp $2497			jmp		_ELHasTerm
.2455					_ELStack:
.2455	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.2457	20 85 11	jsr $1185		jsr	errorHandler
.245a					_ELIsConstant:
.245a	4a		lsr a				lsr 	a 							; get the value back
.245b	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.245d	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.245f					_ELCheckNext:
.245f	c8		iny				iny 								; look at next
.2460	b1 28		lda ($28),y			lda 	(codePtr),y
.2462	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2464	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2466	b0 2f		bcs $2497			bcs 	_ELHasTerm 					; done getting the constant.
.2468	20 30 25	jsr $2530			jsr 	ELShiftByteIn 				; shift byte into position.
.246b	4c 5f 24	jmp $245f			jmp 	_ELCheckNext
.246e					_ELIsToken:
.246e	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2470	f0 0f		beq $2481			beq 	_ELIsString
.2472	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2474	d0 5f		bne $24d5			bne 	_ELCheckUnary
.2476	8a		txa				txa 								; put X into A
.2477	c8		iny				iny 								; skip over the float marker
.2478	a2 18		ldx #$18		ldx	#24
.247a	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.247d	aa		tax				tax 								; restore X
.247e	4c 97 24	jmp $2497			jmp 	_ELHasTerm
.2481					_ELIsString:
.2481	98		tya				tya 								; address of string is codePtr+y+1
.2482	38		sec				sec
.2483	65 28		adc $28				adc 	codePtr
.2485	95 48		sta $48,x			sta 	esInt0,x
.2487	a5 29		lda $29				lda 	codePtr+1
.2489	69 00		adc #$00			adc 	#0
.248b	95 50		sta $50,x			sta 	esInt1,x
.248d	a9 40		lda #$40			lda 	#$40 						; set type to string value
.248f	95 40		sta $40,x			sta 	esType,x
.2491	c8		iny				iny 								; skip over string.
.2492	98		tya				tya
.2493	38		sec				sec									; +1 for the length itself.
.2494	71 28		adc ($28),y			adc 	(codePtr),y
.2496	a8		tay				tay 								; and fall through to term loop code.
.2497					_ELHasTerm:
.2497	b1 28		lda ($28),y			lda 	(codePtr),y
.2499	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.249b	90 04		bcc $24a1			bcc 	_ELPopExit
.249d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.249f	90 02		bcc $24a3			bcc 	_ELHasBinaryTerm
.24a1					_ELPopExit:
.24a1	68		pla				pla
.24a2					_ELExit:
.24a2	60		rts				rts
.24a3					_ELHasBinaryTerm:
.24a3	84 32		sty $32				sty 	tempShort 					; save position
.24a5	a8		tay				tay 								; use token as an index and get the precedence.
.24a6	b9 d8 24	lda $24d8,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.24a9	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.24ab	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.24ad	68		pla				pla 								; restore current level.
.24ae	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.24b0	b0 f0		bcs $24a2			bcs 	_ELExit
.24b2	48		pha				pha 								; save current level back on the stack.
.24b3	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.24b5	48		pha				pha
.24b6	c8		iny				iny
.24b7	e8		inx				inx 								; calculate the RHS at the operator precedence.
.24b8	a5 32		lda $32				lda 	tempShort
.24ba	20 33 24	jsr $2433			jsr 	EvaluateLevel
.24bd	ca		dex				dex
.24be	68		pla				pla 								; get the operator back out.
.24bf					_ELExecuteA:
.24bf	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.24c1	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.24c2	aa		tax				tax
.24c3	bd 9c 1e	lda $1e9c,x			lda 	Group0Vectors,x
.24c6	85 2a		sta $2a				sta 	temp0
.24c8	bd 9d 1e	lda $1e9d,x			lda 	Group0Vectors+1,x
.24cb	85 2b		sta $2b				sta 	temp0+1
.24cd	a6 32		ldx $32				ldx 	tempShort
.24cf	20 1c 25	jsr $251c			jsr 	_ELCallTemp0
.24d2	4c 97 24	jmp $2497			jmp 	_ELHasTerm 					; and loop back round.
.24d5					_ELCheckUnary:
.24d5	c8		iny				iny 								; skip over token.
.24d6	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.24d8	f0 19		beq $24f3			beq 	_ELMinus
.24da	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.24dc	f0 2c		beq $250a			beq 	_ELIndirect
.24de	c9 98		cmp #$98			cmp 	#TKW_QMARK
.24e0	f0 28		beq $250a			beq 	_ELIndirect
.24e2	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.24e4	f0 39		beq $251f			beq 	_ELExtension
.24e6	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.24e8	90 04		bcc $24ee			bcc 	_ELUSyntax
.24ea	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.24ec	90 d1		bcc $24bf			bcc 	_ELExecuteA 				; if so do that token.
.24ee					_ELUSyntax:
.24ee	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.24f0	20 85 11	jsr $1185		jsr	errorHandler
.24f3					_ELMinus:
.24f3	20 08 26	jsr $2608			jsr 	EvaluateNumericTerm 		; get a number to negate.
.24f6	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.24f8	f0 0a		beq $2504			beq 	_ELMinusInteger
.24fa	8a		txa				txa
.24fb	a2 0c		ldx #$0c		ldx	#12
.24fd	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2500	aa		tax				tax
.2501	4c 97 24	jmp $2497			jmp 	_ELHasTerm
.2504					_ELMinusInteger:
.2504	20 8a 2b	jsr $2b8a			jsr 	MInt32Negate 				; do int negate
.2507	4c 97 24	jmp $2497			jmp 	_ELHasTerm
.250a					_ELIndirect:
.250a	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.250b	20 11 26	jsr $2611			jsr 	EvaluateIntegerTerm 		; integer address
.250e	68		pla				pla
.250f	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2511	f0 02		beq $2515			beq 	_ELHaveModifier
.2513	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2515					_ELHaveModifier:
.2515	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2517	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2519	4c 97 24	jmp $2497			jmp 	_ELHasTerm
.251c					_ELCallTemp0:
.251c	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.251f					_ELExtension:
.251f	8a		txa				txa 								; stack pos in A
.2520	20 63 14	jsr $1463		jsr	extensionHandler
.2523	aa		tax				tax 								; restore stack
.2524	4c 97 24	jmp $2497			jmp 	_ELHasTerm
.2527					UnaryParenthesis:
.2527	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2529	20 33 24	jsr $2433			jsr 	EvaluateLevel
.252c	20 43 2c	jsr $2c43			jsr 	CheckRightParen 			; check for )
.252f	60		rts				rts
.2530					ELShiftByteIn:
.2530	48		pha				pha 								; save bits to shift in.
.2531	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.2533	48		pha				pha
.2534	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.2536	95 60		sta $60,x			sta 	esInt3,x
.2538	b5 50		lda $50,x			lda 	esInt1,x
.253a	95 58		sta $58,x			sta 	esInt2,x
.253c	b5 48		lda $48,x			lda 	esInt0,x
.253e	95 50		sta $50,x			sta 	esInt1,x
.2540	a9 00		lda #$00			lda 	#0
.2542	95 48		sta $48,x			sta 	esInt0,x
.2544	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2545	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2547	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2549					_ELShiftLoop:
.2549	4a		lsr a				lsr 	a
.254a	76 60		ror $60,x			ror 	esInt3,x
.254c	76 58		ror $58,x			ror 	esInt2,x
.254e	76 50		ror $50,x			ror 	esInt1,x
.2550	76 48		ror $48,x			ror 	esInt0,x
.2552	c9 01		cmp #$01			cmp 	#1
.2554	d0 f3		bne $2549			bne 	_ELShiftLoop
.2556	68		pla				pla 								; get original 6 bit value and OR in.
.2557	29 3f		and #$3f			and 	#$3F
.2559	15 48		ora $48,x			ora 	esInt0,x
.255b	95 48		sta $48,x			sta 	esInt0,x
.255d	60		rts				rts
.255e					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>255e	01					.byte	$01			; $86 and
>255f	01					.byte	$01			; $87 or
>2560	01					.byte	$01			; $88 xor
>2561	02					.byte	$02			; $89 >=
>2562	02					.byte	$02			; $8a <=
>2563	02					.byte	$02			; $8b >
>2564	02					.byte	$02			; $8c <
>2565	02					.byte	$02			; $8d =
>2566	02					.byte	$02			; $8e <>
>2567	03					.byte	$03			; $8f +
>2568	03					.byte	$03			; $90 -
>2569	04					.byte	$04			; $91 >>
>256a	04					.byte	$04			; $92 <<
>256b	04					.byte	$04			; $93 *
>256c	04					.byte	$04			; $94 /
>256d	04					.byte	$04			; $95 mod
>256e	05					.byte	$05			; $96 ^
>256f	06					.byte	$06			; $97 !
>2570	06					.byte	$06			; $98 ?
>2571	82					.byte	$82			; $99 repeat
>2572	82					.byte	$82			; $9a while
>2573	82					.byte	$82			; $9b for
>2574	82					.byte	$82			; $9c if
>2575	82					.byte	$82			; $9d defproc
>2576	80					.byte	$80			; $9e until
>2577	80					.byte	$80			; $9f wend
>2578	80					.byte	$80			; $a0 next
>2579	80					.byte	$80			; $a1 then
>257a	80					.byte	$80			; $a2 endif
>257b	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.257c					EventFunction:
.257c	20 72 26	jsr $2672			jsr 	EvaluateReference			; get the variable reference that tracks the event
.257f	b5 40		lda $40,x			lda 	esType,x
.2581	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2583	d0 5b		bne $25e0			bne 	_EFType
.2585	20 50 2c	jsr $2c50			jsr 	CheckComma
.2588	e8		inx				inx
.2589	20 3f 26	jsr $263f			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.258c	20 43 2c	jsr $2c43			jsr 	CheckRightParen 			; finish off with the right bracket
.258f	ca		dex				dex
.2590	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2592	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2594	15 58		ora $58,x			ora 	esInt2,x
.2596	15 60		ora $60,x			ora 	esInt3,x
.2598	d0 41		bne $25db			bne 	_EFValue
.259a	98		tya				tya
.259b	48		pha				pha
.259c	8a		txa				txa
.259d	48		pha				pha
.259e	a2 1c		ldx #$1c		ldx	#28
.25a0	20 64 11	jsr $1164		jsr	deviceHandler
.25a3	84 2d		sty $2d				sty 	temp1+1
.25a5	85 2c		sta $2c				sta 	temp1
.25a7	68		pla				pla
.25a8	aa		tax				tax
.25a9	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.25ac	a0 03		ldy #$03			ldy 	#3							; if -ve
.25ae	b1 2a		lda ($2a),y			lda 	(temp0),y
.25b0	30 23		bmi $25d5			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.25b2	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.25b4	b1 2a		lda ($2a),y			lda 	(temp0),y
.25b6	c8		iny				iny
.25b7	11 2a		ora ($2a),y			ora 	(temp0),y
.25b9	f0 17		beq $25d2			beq 	_EFInitialise 				; if so, initialise the value but return false.
.25bb	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.25bd	38		sec				sec
.25be	b1 2a		lda ($2a),y			lda 	(temp0),y
.25c0	e5 2c		sbc $2c				sbc 	temp1
.25c2	c8		iny				iny
.25c3	b1 2a		lda ($2a),y			lda 	(temp0),y
.25c5	e5 2d		sbc $2d				sbc 	temp1+1
.25c7	10 0c		bpl $25d5			bpl 	_EFFail 					; if trigger >= timer then return False
.25c9	20 e5 25	jsr $25e5			jsr 	SetEventTimer 				; reset the timer for next time.
.25cc	20 cc 2b	jsr $2bcc			jsr	 	MInt32True 					; and treutn true as fired.
.25cf	68		pla				pla
.25d0	a8		tay				tay
.25d1	60		rts				rts
.25d2					_EFInitialise:
.25d2	20 e5 25	jsr $25e5			jsr		SetEventTimer 				; set trigger time to time + elapsed
.25d5					_EFFail:
.25d5	68		pla				pla
.25d6	a8		tay				tay
.25d7	20 d0 2b	jsr $2bd0			jsr 	MInt32False
.25da	60		rts				rts
.25db					_EFValue:
.25db	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.25dd	20 85 11	jsr $1185		jsr	errorHandler
.25e0					_EFType:
.25e0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.25e2	20 85 11	jsr $1185		jsr	errorHandler
.25e5					SetEventTimer:
.25e5	a0 00		ldy #$00			ldy 	#0
.25e7	18		clc				clc
.25e8	a5 2c		lda $2c				lda 	temp1
.25ea	75 49		adc $49,x			adc 	esInt0+1,x
.25ec	91 2a		sta ($2a),y			sta		(temp0),y
.25ee	c8		iny				iny
.25ef	a5 2d		lda $2d				lda 	temp1+1
.25f1	75 51		adc $51,x			adc 	esInt1+1,x
.25f3	91 2a		sta ($2a),y			sta		(temp0),y
.25f5	88		dey				dey
.25f6	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.25f8	d0 04		bne $25fe			bne 	_SETExit 					; zero means initialise.....
.25fa	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.25fc	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.25fe					_SETExit:
.25fe	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.25ff					EvaluateTerm:
.25ff	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2601	20 33 24	jsr $2433			jsr 	EvaluateLevel
.2604	20 e2 23	jsr $23e2			jsr 	DereferenceOne
.2607	60		rts				rts
.2608					EvaluateNumericTerm:
.2608	20 ff 25	jsr $25ff			jsr 	EvaluateTerm
.260b	b5 40		lda $40,x			lda 	esType,x
.260d	0a		asl a				asl 	a 							; see if it's a string.
.260e	30 09		bmi $2619			bmi 	ENTType
.2610	60		rts				rts
.2611					EvaluateIntegerTerm:
.2611	20 ff 25	jsr $25ff			jsr 	EvaluateTerm
.2614	b5 40		lda $40,x			lda 	esType,x
.2616	d0 01		bne $2619			bne 	ENTType
.2618	60		rts				rts
.2619					ENTType:
.2619	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.261b	20 85 11	jsr $1185		jsr	errorHandler
.261e					EvaluateRoot:
.261e	a2 00		ldx #$00			ldx 	#0
.2620					Evaluate:
.2620	a9 00		lda #$00			lda 	#0
.2622	20 33 24	jsr $2433			jsr 	EvaluateLevel
.2625	20 e2 23	jsr $23e2			jsr 	DereferenceOne
.2628	60		rts				rts
.2629					EvaluateNumeric:
.2629	20 20 26	jsr $2620			jsr 	Evaluate
.262c	b5 40		lda $40,x			lda 	esType,x
.262e	0a		asl a				asl 	a 							; see if it's a string.
.262f	30 e8		bmi $2619			bmi 	ENTType
.2631	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2632	4a		lsr a				lsr 	a
.2633	60		rts				rts
.2634					EvaluateString:
.2634	20 20 26	jsr $2620			jsr 	Evaluate
.2637	b5 40		lda $40,x			lda 	esType,x
.2639	0a		asl a				asl 	a 							; see if it's a string.
.263a	10 dd		bpl $2619			bpl 	ENTType
.263c	60		rts				rts
.263d					EvaluateRootInteger:
.263d	a2 00		ldx #$00			ldx 	#0
.263f					EvaluateInteger:
.263f	20 20 26	jsr $2620			jsr 	Evaluate
.2642	b5 40		lda $40,x			lda 	esType,x
.2644	d0 d3		bne $2619			bne 	ENTType
.2646	60		rts				rts
.2647					EvaluateSmallInteger:
.2647	20 3f 26	jsr $263f			jsr 	EvaluateInteger
.264a	b5 50		lda $50,x			lda 	esInt1,x
.264c	15 58		ora $58,x			ora 	esInt2,x
.264e	15 60		ora $60,x			ora 	esInt3,x
.2650	d0 03		bne $2655			bne 	_ESIValue
.2652	b5 48		lda $48,x			lda 	esInt0,x
.2654	60		rts				rts
.2655					_ESIValue:
.2655	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2657	20 85 11	jsr $1185		jsr	errorHandler
.265a					LinkEvaluate:
.265a	aa		tax				tax
.265b	20 20 26	jsr $2620			jsr 	Evaluate
.265e	8a		txa				txa
.265f	60		rts				rts
.2660					LinkEvaluateTerm:
.2660	aa		tax				tax
.2661	20 ff 25	jsr $25ff			jsr 	EvaluateTerm
.2664	8a		txa				txa
.2665	60		rts				rts
.2666					LinkEvaluateInteger:
.2666	aa		tax				tax
.2667	20 3f 26	jsr $263f			jsr 	EvaluateInteger
.266a	8a		txa				txa
.266b	60		rts				rts
.266c					LinkEvaluateSmallInt:
.266c	aa		tax				tax
.266d	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger
.2670	8a		txa				txa
.2671	60		rts				rts
.2672					EvaluateReference:
.2672	ad 6f 25	lda $256f			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2675	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2676	e9 01		sbc #$01			sbc 	#1
.2678	20 33 24	jsr $2433			jsr 	EvaluateLevel
.267b	b5 40		lda $40,x			lda 	esType,x
.267d	10 01		bpl $2680			bpl 	_ERFail
.267f	60		rts				rts
.2680					_ERFail:
.2680	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2682	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2685					UnaryLen:
.2685	20 93 26	jsr $2693			jsr 	ULStart
.2688					ULFinish:
.2688	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.268a	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.268c	20 df 2b	jsr $2bdf			jsr 	MInt32Set8Bit 				; write it out.
.268f	20 43 2c	jsr $2c43			jsr 	CheckRightParen
.2692	60		rts				rts
.2693	20 34 26	jsr $2634	ULStart:jsr 	EvaluateString
.2696	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2698	85 2a		sta $2a				sta 	temp0
.269a	b5 50		lda $50,x			lda 	esInt1,x
.269c	85 2b		sta $2b				sta 	temp0+1
.269e	84 32		sty $32				sty 	tempShort 					; get length
.26a0	a0 00		ldy #$00			ldy 	#0
.26a2	60		rts				rts
.26a3					UnaryAsc:
.26a3	20 93 26	jsr $2693			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.26a6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.26a8	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.26a9	c9 00		cmp #$00			cmp 	#0
.26ab	d0 db		bne $2688			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.26ad	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.26af	20 85 11	jsr $1185		jsr	errorHandler
.26b2					UnaryAbs:
.26b2	20 29 26	jsr $2629			jsr 	EvaluateNumeric 			; some numeric value
.26b5	b0 07		bcs $26be			bcs 	_UAFloat 					; CS then float, so use that function
.26b7	20 85 2b	jsr $2b85			jsr 	MInt32Absolute 				; int version
.26ba	20 43 2c	jsr $2c43			jsr 	CheckRightParen
.26bd	60		rts				rts
.26be					_UAFloat:
.26be	8a		txa				txa 								; float version
.26bf	a2 00		ldx #$00		ldx	#0
.26c1	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.26c4	aa		tax				tax
.26c5	20 43 2c	jsr $2c43			jsr 	CheckRightParen
.26c8	60		rts				rts
.26c9					UnarySgn:
.26c9	20 29 26	jsr $2629			jsr 	EvaluateNumeric 			; same as above but sign of value
.26cc	b0 07		bcs $26d5			bcs 	_USFloat
.26ce	20 bd 2b	jsr $2bbd			jsr 	MInt32Sign
.26d1	20 43 2c	jsr $2c43			jsr 	CheckRightParen
.26d4	60		rts				rts
.26d5					_USFloat:
.26d5	8a		txa				txa
.26d6	a2 0e		ldx #$0e		ldx	#14
.26d8	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.26db	aa		tax				tax
.26dc	20 43 2c	jsr $2c43			jsr 	CheckRightParen
.26df	60		rts				rts
.26e0					UnaryPeek:
.26e0	20 0c 27	jsr $270c			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.26e3	4c 00 27	jmp $2700			jmp 	PDLByte0
.26e6					UnaryDeek:
.26e6	20 0c 27	jsr $270c			jsr 	PDLCode
.26e9	4c fa 26	jmp $26fa			jmp 	PDLByte1
.26ec					UnaryLeek:
.26ec	20 0c 27	jsr $270c			jsr 	PDLCode
.26ef	a0 03		ldy #$03			ldy 	#3							; read 3-2
.26f1	b1 2a		lda ($2a),y			lda 	(temp0),y
.26f3	95 60		sta $60,x			sta 	esInt3,x
.26f5	88		dey				dey
.26f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.26f8	95 58		sta $58,x			sta 	esInt2,x
.26fa					PDLByte1:
.26fa	a0 01		ldy #$01			ldy 	#1
.26fc	b1 2a		lda ($2a),y			lda 	(temp0),y
.26fe	95 50		sta $50,x			sta 	esInt1,x
.2700					PDLByte0:
.2700	a0 00		ldy #$00			ldy 	#0
.2702	b1 2a		lda ($2a),y			lda 	(temp0),y
.2704	95 48		sta $48,x			sta 	esInt0,x
.2706	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2708	20 43 2c	jsr $2c43			jsr 	CheckRightParen 			; check right and return
.270b	60		rts				rts
.270c					PDLCode:
.270c	20 3f 26	jsr $263f			jsr 	EvaluateInteger 			; some address
.270f	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2711	85 2a		sta $2a				sta 	temp0
.2713	b5 50		lda $50,x			lda 	esInt1,x
.2715	85 2b		sta $2b				sta 	temp0+1
.2717	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2719	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.271b	95 58		sta $58,x			sta 	esInt2,x
.271d	95 60		sta $60,x			sta 	esInt3,x
.271f	84 32		sty $32				sty 	tempShort 					; save Y
.2721	60		rts				rts
.2722					Unary_Random:
.2722	20 00 2c	jsr $2c00			jsr 	MInt32Random 				; generate random number.
.2725	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2727	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2729	f0 08		beq $2733			beq 	_URExit
.272b	e8		inx				inx 								; load range 0..r-1 into +1
.272c	20 3f 26	jsr $263f			jsr 	EvaluateInteger
.272f	ca		dex				dex
.2730	20 23 2a	jsr $2a23			jsr 	MInt32Modulus 				; calculate random % modulus
.2733					_URExit:
.2733	20 43 2c	jsr $2c43			jsr 	CheckRightParen 			; check right and return
.2736	60		rts				rts
.2737					Unary_Min:
.2737	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2739	d0 02		bne $273d			bne 	UnaryMBody
.273b					Unary_Max:
.273b	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.273d					UnaryMBody:
.273d	48		pha				pha 								; save comparator on stack, shows min or max
.273e	20 20 26	jsr $2620			jsr 	Evaluate 					; get the first thing to check
.2741					_UnaryMLoop:
.2741	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2743	c8		iny				iny
.2744	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2746	f0 09		beq $2751			beq 	_UnaryMExit
.2748	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.274a	f0 07		beq $2753			beq 	_UnaryMCompare
.274c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.274e	20 85 11	jsr $1185		jsr	errorHandler
.2751					_UnaryMExit:
.2751	68		pla				pla 								; done so throw comparator and return.
.2752	60		rts				rts
.2753					_UnaryMCompare:
.2753	e8		inx				inx 								; get the 2nd thing to evaluate
.2754	20 20 26	jsr $2620			jsr 	Evaluate
.2757	ca		dex				dex
.2758	20 e5 22	jsr $22e5			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.275b	85 32		sta $32				sta 	tempShort 					; save result
.275d	68		pla				pla 								; get what we need
.275e	48		pha				pha
.275f	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2761	d0 de		bne $2741			bne 	_UnaryMLoop 				; no, try another value.
.2763	20 d0 2b	jsr $2bd0			jsr 	MInt32False 				; promote 2nd to 1st.
.2766	20 b4 2a	jsr $2ab4			jsr 	MInt32Add
.2769	4c 41 27	jmp $2741			jmp 	_UnaryMLoop
.276c					Unary_Page:
.276c	20 d0 2b	jsr $2bd0			jsr 	MInt32False 				; zero
.276f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2772	95 48		sta $48,x			sta 	esInt0,x
.2774	ad c9 0a	lda $0ac9			lda 	basePage+1
.2777	95 50		sta $50,x			sta 	esInt1,x
.2779	60		rts				rts
.277a					UnaryReference:
.277a	a9 0f		lda #$0f			lda 	#15
.277c	20 33 24	jsr $2433			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.277f	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2781	10 05		bpl $2788			bpl 	UType
.2783	a9 00		lda #$00			lda 	#0 							; make it an integer
.2785	95 40		sta $40,x			sta 	esType,x
.2787	60		rts				rts
.2788					UType:
.2788	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.278a	20 85 11	jsr $1185		jsr	errorHandler
.278d					UnaryHexMarker:
.278d	4c 11 26	jmp $2611			jmp 	EvaluateIntegerTerm
.2790					UnaryComplement:
.2790	20 11 26	jsr $2611			jsr 	EvaluateIntegerTerm
.2793	20 a4 2b	jsr $2ba4			jsr 	MInt32Not
.2796	60		rts				rts
.2797					UnaryIntToFloat:
.2797	20 29 26	jsr $2629			jsr 	EvaluateNumeric				; some number
.279a	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.279c	d0 0b		bne $27a9			bne 	_UIFExit
.279e	8a		txa				txa 								; convert and set type
.279f	a2 1a		ldx #$1a		ldx	#26
.27a1	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.27a4	aa		tax				tax
.27a5	a9 01		lda #$01			lda 	#1
.27a7	95 40		sta $40,x			sta 	esType,x
.27a9					_UIFExit:
.27a9	60		rts				rts
.27aa					UnaryFloatToInt:
.27aa	20 29 26	jsr $2629			jsr 	EvaluateNumeric 			; the number
.27ad	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.27af	f0 0b		beq $27bc			beq 	_UFIExit
.27b1	8a		txa				txa 								; convert to int
.27b2	a2 12		ldx #$12		ldx	#18
.27b4	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.27b7	aa		tax				tax
.27b8	a9 00		lda #$00			lda 	#0 							; set type
.27ba	95 40		sta $40,x			sta 	esType,x
.27bc					_UFIExit:
.27bc	60		rts				rts
.27bd					UnaryAlloc:
.27bd	e8		inx				inx 								; evaluate memory required
.27be	20 3f 26	jsr $263f			jsr 	EvaluateInteger
.27c1	20 43 2c	jsr $2c43			jsr 	CheckRightParen
.27c4	ca		dex				dex
.27c5	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.27c7	15 61		ora $61,x			ora 	esInt3+1,x
.27c9	d0 1d		bne $27e8			bne 	_UABadValue
.27cb	20 d0 2b	jsr $2bd0			jsr 	MInt32False					; zero return.
.27ce	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.27d0	95 50		sta $50,x			sta 	esInt1,x
.27d2	a5 35		lda $35				lda 	lowMemory
.27d4	95 48		sta $48,x			sta 	esInt0,x
.27d6	18		clc				clc 								; add alloc required.
.27d7	75 49		adc $49,x			adc 	esInt0+1,x
.27d9	85 35		sta $35				sta 	lowMemory
.27db	a5 36		lda $36				lda 	lowMemory+1
.27dd	75 51		adc $51,x			adc 	esInt1+1,x
.27df	85 36		sta $36				sta 	lowMemory+1
.27e1	b0 05		bcs $27e8			bcs		_UABadValue 				; overflow definitely bad.
.27e3	c5 34		cmp $34				cmp 	highMemory+1
.27e5	b0 01		bcs $27e8			bcs 	_UABadValue 				; out of memory bad.
.27e7	60		rts				rts
.27e8					_UABadValue:
.27e8	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.27ea	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.27ed					UnaryTimer:
.27ed	20 43 2c	jsr $2c43			jsr 	CheckRightParen 			; no parameters
.27f0	98		tya				tya
.27f1	48		pha				pha
.27f2	20 f7 2b	jsr $2bf7			jsr 	MInt32Zero 					; zero result
.27f5	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.27f7	a2 1c		ldx #$1c		ldx	#28
.27f9	20 64 11	jsr $1164		jsr	deviceHandler
.27fc	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.27fe	95 48		sta $48,x			sta 	esInt0,x
.2800	98		tya				tya
.2801	95 50		sta $50,x			sta 	esInt1,x
.2803	68		pla				pla
.2804	a8		tay				tay
.2805	60		rts				rts
.2806					UnaryInkey:
.2806	20 43 2c	jsr $2c43			jsr 	CheckRightParen
.2809	86 2a		stx $2a				stx 	temp0
.280b	a2 0a		ldx #$0a		ldx	#10
.280d	20 64 11	jsr $1164		jsr	deviceHandler
.2810	a6 2a		ldx $2a				ldx 	temp0
.2812	20 df 2b	jsr $2bdf			jsr 	MInt32Set8Bit
.2815	60		rts				rts
.2816					UnaryGet:
.2816	20 43 2c	jsr $2c43			jsr 	CheckRightParen
.2819	86 2a		stx $2a				stx 	temp0
.281b					_UGLoop:
.281b	a2 00		ldx #$00		ldx	#0
.281d	20 64 11	jsr $1164		jsr	deviceHandler
.2820	a2 0a		ldx #$0a		ldx	#10
.2822	20 64 11	jsr $1164		jsr	deviceHandler
.2825	c9 00		cmp #$00			cmp 	#0
.2827	f0 f2		beq $281b			beq 	_UGLoop
.2829	a6 2a		ldx $2a				ldx 	temp0
.282b	20 df 2b	jsr $2bdf			jsr 	MInt32Set8Bit
.282e	60		rts				rts
.282f					UnaryGetString:
.282f	20 16 28	jsr $2816			jsr 	UnaryGet
.2832					UGSDoChr:
.2832	4c 83 28	jmp $2883			jmp 	ChrCode
.2835					UnaryInkeyString:
.2835	20 06 28	jsr $2806			jsr 	UnaryInkey
.2838	b5 48		lda $48,x			lda 	esInt0,x
.283a	d0 f6		bne $2832			bne 	UGSDoChr
.283c	8a		txa				txa
.283d	a2 06		ldx #$06		ldx	#6
.283f	20 ed 2f	jsr $2fed		jsr	stringHandler
.2842	aa		tax				tax
.2843	60		rts				rts
.2844					UnarySys:
.2844	20 3f 26	jsr $263f			jsr 	EvaluateInteger 				; get the address
.2847	20 43 2c	jsr $2c43			jsr 	CheckRightParen
.284a	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 						; copy call address to temp0
.284d	8a		txa				txa
.284e	48		pha				pha
.284f	98		tya				tya
.2850	48		pha				pha
.2851	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2854	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2857	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.285a	20 69 28	jsr $2869			jsr 	_CallTemp0
.285d	85 32		sta $32				sta 	tempShort 						; restore YX
.285f	68		pla				pla
.2860	a8		tay				tay
.2861	68		pla				pla
.2862	aa		tax				tax
.2863	a5 32		lda $32				lda 	tempShort
.2865	20 df 2b	jsr $2bdf			jsr 	MInt32Set8Bit 					; return result.
.2868	60		rts				rts
.2869					_CallTemp0:
.2869	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.286c					UnaryMem:
.286c	20 d0 2b	jsr $2bd0			jsr 	MInt32False 					; set to false (e.g. 0)
.286f	38		sec				sec
.2870	a5 33		lda $33				lda 	highMemory 						; calculate value
.2872	e5 35		sbc $35				sbc 	lowMemory
.2874	95 48		sta $48,x			sta 	esInt0,x
.2876	a5 34		lda $34				lda 	highMemory+1
.2878	e5 36		sbc $36				sbc 	lowMemory+1
.287a	95 50		sta $50,x			sta 	esInt1,x
.287c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.287d					ExecChr:
.287d	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger		; character number 0-255
.2880	20 43 2c	jsr $2c43			jsr 	CheckRightParen				; right bracket
.2883					ChrCode:
.2883	98		tya				tya
.2884	48		pha				pha
.2885	8a		txa				txa 								; A = stack
.2886	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.2888	a2 00		ldx #$00		ldx	#0
.288a	20 ed 2f	jsr $2fed		jsr	stringHandler
.288d	aa		tax				tax 								; X = stack
.288e	68		pla				pla
.288f	a8		tay				tay
.2890	60		rts				rts
.2891					ExecLower:
.2891	38		sec				sec 								; set carry is lower
.2892	b0 01		bcs $2895			bcs 	ExecUpperLower
.2894					ExecUpper:
.2894	18		clc				clc 								; clear carry is upper
.2895					ExecUpperLower:
.2895	08		php				php 								; save carry
.2896	20 34 26	jsr $2634			jsr 	EvaluateString 				; string to stack,X
.2899	20 43 2c	jsr $2c43			jsr 	CheckRightParen 			; check closing right bracket.
.289c	28		plp				plp 								; restore carry, save Y
.289d	98		tya				tya
.289e	48		pha				pha
.289f	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.28a1	2a		rol a				rol 	a
.28a2	a8		tay				tay 								; now in Y
.28a3	8a		txa				txa 								; do the substring and exit.
.28a4	a2 0a		ldx #$0a		ldx	#10
.28a6	20 ed 2f	jsr $2fed		jsr	stringHandler
.28a9	aa		tax				tax
.28aa	68		pla				pla
.28ab	a8		tay				tay
.28ac	60		rts				rts
.28ad					ExecLeft:
.28ad	20 34 26	jsr $2634			jsr 	EvaluateString 				; string to stack,X
.28b0	20 50 2c	jsr $2c50			jsr 	CheckComma
.28b3	e8		inx				inx
.28b4	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.28b6	20 df 2b	jsr $2bdf			jsr 	MInt32Set8Bit
.28b9	e8		inx				inx
.28ba	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.28bd					ExecSubstring:
.28bd	ca		dex				dex 								; fix up X
.28be	ca		dex				dex
.28bf	20 43 2c	jsr $2c43			jsr 	CheckRightParen 			; check closing right bracket.
.28c2	8a		txa				txa 								; do the substring and exit.
.28c3	a2 0c		ldx #$0c		ldx	#12
.28c5	20 ed 2f	jsr $2fed		jsr	stringHandler
.28c8	aa		tax				tax
.28c9	60		rts				rts
.28ca					ExecMid:
.28ca	20 34 26	jsr $2634			jsr 	EvaluateString 				; string to stack,X
.28cd	20 50 2c	jsr $2c50			jsr 	CheckComma
.28d0	e8		inx				inx
.28d1	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.28d4	c9 00		cmp #$00			cmp 	#0
.28d6	f0 15		beq $28ed			beq 	_EMValue
.28d8	e8		inx				inx
.28d9	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.28db	20 df 2b	jsr $2bdf			jsr 	MInt32Set8Bit
.28de	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.28e0	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.28e2	f0 d9		beq $28bd			beq 	ExecSubString
.28e4	20 50 2c	jsr $2c50			jsr 	CheckComma
.28e7	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.28ea	4c bd 28	jmp $28bd			jmp 	ExecSubString
.28ed					_EMValue:
.28ed	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.28ef	20 85 11	jsr $1185		jsr	errorHandler
.28f2					ExecRight:
.28f2	20 34 26	jsr $2634			jsr 	EvaluateString 				; string to stack,X
.28f5	20 50 2c	jsr $2c50			jsr 	CheckComma
.28f8	e8		inx				inx
.28f9	20 47 26	jsr $2647			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.28fc	ca		dex				dex
.28fd	98		tya				tya
.28fe	48		pha				pha
.28ff	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2901	85 2a		sta $2a				sta 	temp0
.2903	b5 50		lda $50,x			lda 	esInt1,x
.2905	85 2b		sta $2b				sta 	temp0+1
.2907	a0 00		ldy #$00			ldy 	#0 							; point to length
.2909	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.290b	18		clc				clc 								; add 1.
.290c	69 01		adc #$01			adc 	#1
.290e	38		sec				sec
.290f	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2911	f0 02		beq $2915			beq		_ERMake1 					; if zero, make it 1.
.2913	b0 02		bcs $2917			bcs		_EROkay
.2915					_ERMake1:
.2915	a9 01		lda #$01			lda 	#1 							; start position.
.2917					_EROkay:
.2917	e8		inx				inx 								; set start pos.
.2918	95 48		sta $48,x			sta 	esInt0,x
.291a	e8		inx				inx
.291b	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.291d	20 df 2b	jsr $2bdf			jsr 	MInt32Set8Bit
.2920	68		pla				pla
.2921	a8		tay				tay
.2922	4c bd 28	jmp $28bd			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2925					MInt32And:
.2925	b5 48		lda $48,x			lda 	esInt0,x
.2927	35 49		and $49,x			and 	esInt0+1,x
.2929	95 48		sta $48,x			sta 	esInt0,x
.292b	b5 50		lda $50,x			lda 	esInt1,x
.292d	35 51		and $51,x			and 	esInt1+1,x
.292f	95 50		sta $50,x			sta 	esInt1,x
.2931	b5 58		lda $58,x			lda 	esInt2,x
.2933	35 59		and $59,x			and 	esInt2+1,x
.2935	95 58		sta $58,x			sta 	esInt2,x
.2937	b5 60		lda $60,x			lda 	esInt3,x
.2939	35 61		and $61,x			and 	esInt3+1,x
.293b	95 60		sta $60,x			sta 	esInt3,x
.293d	60		rts				rts
.293e					MInt32Or:
.293e	b5 48		lda $48,x			lda 	esInt0,x
.2940	15 49		ora $49,x			ora 	esInt0+1,x
.2942	95 48		sta $48,x			sta 	esInt0,x
.2944	b5 50		lda $50,x			lda 	esInt1,x
.2946	15 51		ora $51,x			ora 	esInt1+1,x
.2948	95 50		sta $50,x			sta 	esInt1,x
.294a	b5 58		lda $58,x			lda 	esInt2,x
.294c	15 59		ora $59,x			ora 	esInt2+1,x
.294e	95 58		sta $58,x			sta 	esInt2,x
.2950	b5 60		lda $60,x			lda 	esInt3,x
.2952	15 61		ora $61,x			ora 	esInt3+1,x
.2954	95 60		sta $60,x			sta 	esInt3,x
.2956	60		rts				rts
.2957					MInt32Xor:
.2957	b5 48		lda $48,x			lda 	esInt0,x
.2959	55 49		eor $49,x			eor 	esInt0+1,x
.295b	95 48		sta $48,x			sta 	esInt0,x
.295d	b5 50		lda $50,x			lda 	esInt1,x
.295f	55 51		eor $51,x			eor 	esInt1+1,x
.2961	95 50		sta $50,x			sta 	esInt1,x
.2963	b5 58		lda $58,x			lda 	esInt2,x
.2965	55 59		eor $59,x			eor 	esInt2+1,x
.2967	95 58		sta $58,x			sta 	esInt2,x
.2969	b5 60		lda $60,x			lda 	esInt3,x
.296b	55 61		eor $61,x			eor 	esInt3+1,x
.296d	95 60		sta $60,x			sta 	esInt3,x
.296f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2970					MInt32Compare:
.2970	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2972	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2974	d0 13		bne $2989			bne 	MInt32Compare2
.2976	b5 50		lda $50,x			lda 	esInt1,x
.2978	d5 51		cmp $51,x			cmp 	esInt1+1,x
.297a	d0 0d		bne $2989			bne 	MInt32Compare2
.297c	b5 58		lda $58,x			lda 	esInt2,x
.297e	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2980	d0 07		bne $2989			bne 	MInt32Compare2
.2982	b5 60		lda $60,x			lda 	esInt3,x
.2984	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2986	d0 01		bne $2989			bne 	MInt32Compare2
.2988	60		rts				rts
.2989					MInt32Compare2:
.2989	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.298b	d5 49		cmp $49,x			cmp 	esInt0+1,x
.298d	b5 50		lda $50,x			lda		esInt1,x
.298f	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2991	b5 58		lda $58,x			lda		esInt2,x
.2993	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2995	b5 60		lda $60,x			lda		esInt3,x
.2997	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2999	50 02		bvc $299d			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.299b	49 80		eor #$80			eor 	#$80
.299d					_I32LNoOverflow
.299d	30 03		bmi $29a2			bmi 	MInt32CLess					; if -ve then return $FF
.299f	a9 01		lda #$01			lda 	#$01						; else return $01
.29a1	60		rts				rts
.29a2					MInt32CLess:
.29a2	a9 ff		lda #$ff			lda 	#$FF
.29a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.29a5					MInt32SDivide:
.29a5	98		tya				tya  								; save Y, which is the count of negations
.29a6	48		pha				pha
.29a7	a0 00		ldy #$00			ldy 	#0 							; zero count
.29a9	20 c1 29	jsr $29c1			jsr 	_MInt32SRemSign 			; unsign TOS
.29ac	e8		inx				inx 								; unsign TOS+1
.29ad	20 c1 29	jsr $29c1			jsr 	_MInt32SRemSign
.29b0	ca		dex				dex
.29b1	98		tya				tya 								; save sign count on stack
.29b2	48		pha				pha
.29b3	20 ca 29	jsr $29ca			jsr 	MInt32UDivide 				; unsigned division
.29b6	68		pla				pla 								; get sign count back
.29b7	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.29b9	f0 03		beq $29be			beq 	_I32SNoNeg
.29bb	20 8a 2b	jsr $2b8a			jsr 	MInt32Negate
.29be					_I32SNoNeg:
.29be	68		pla				pla 								; restoe Y and exit
.29bf	a8		tay				tay
.29c0	60		rts				rts
.29c1					_MInt32SRemSign:
.29c1	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.29c3	10 04		bpl $29c9			bpl 	_MInt32SRSExit
.29c5	c8		iny				iny 								; increment the sign count
.29c6	20 8a 2b	jsr $2b8a			jsr 	MInt32Negate 				; negate the value.
.29c9					_MInt32SRSExit:
.29c9	60		rts				rts
.29ca					MInt32UDivide:
.29ca	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.29cc	15 51		ora $51,x			ora 	esInt1+1,x
.29ce	15 52		ora $52,x			ora 	esInt1+2,x
.29d0	15 53		ora $53,x			ora 	esInt1+3,x
.29d2	f0 4a		beq $2a1e			beq 	_MInt32DZero
.29d4	e8		inx				inx 								; clear A
.29d5	e8		inx				inx
.29d6	20 d0 2b	jsr $2bd0			jsr 	MInt32False
.29d9	ca		dex				dex
.29da	ca		dex				dex
.29db	98		tya				tya 								; save Y on the stack
.29dc	48		pha				pha
.29dd	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.29df					_MInt32UDLoop:
.29df	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.29e1	36 50		rol $50,x			rol 	esInt1,x
.29e3	36 58		rol $58,x			rol 	esInt2,x
.29e5	36 60		rol $60,x			rol 	esInt3,x
.29e7	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.29e9	36 52		rol $52,x			rol 	esInt1+2,x
.29eb	36 5a		rol $5a,x			rol 	esInt2+2,x
.29ed	36 62		rol $62,x			rol 	esInt3+2,x
.29ef	38		sec				sec 								; calculate A-M saving result on the stack
.29f0	b5 4a		lda $4a,x			lda 	esInt0+2,x
.29f2	f5 49		sbc $49,x			sbc 	esInt0+1,x
.29f4	48		pha				pha
.29f5	b5 52		lda $52,x			lda 	esInt1+2,x
.29f7	f5 51		sbc $51,x			sbc 	esInt1+1,x
.29f9	48		pha				pha
.29fa	b5 5a		lda $5a,x			lda 	esInt2+2,x
.29fc	f5 59		sbc $59,x			sbc 	esInt2+1,x
.29fe	48		pha				pha
.29ff	b5 62		lda $62,x			lda 	esInt3+2,x
.2a01	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2a03	90 10		bcc $2a15			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2a05	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2a07	68		pla				pla
.2a08	95 5a		sta $5a,x			sta 	esInt2+2,x
.2a0a	68		pla				pla
.2a0b	95 52		sta $52,x			sta 	esInt1+2,x
.2a0d	68		pla				pla
.2a0e	95 4a		sta $4a,x			sta 	esInt0+2,x
.2a10	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2a12	4c 18 2a	jmp $2a18			jmp 	_MInt32Next 					; do the next iteration
.2a15					_MInt32NoSubtract:
.2a15	68		pla				pla
.2a16	68		pla				pla
.2a17	68		pla				pla
.2a18					_MInt32Next:
.2a18	88		dey				dey 								; do this 32 times.
.2a19	d0 c4		bne $29df			bne 	_MInt32UDLoop
.2a1b	68		pla				pla 								; restore Y and exit
.2a1c	a8		tay				tay
.2a1d	60		rts				rts
.2a1e					_MInt32DZero:
.2a1e	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2a20	20 85 11	jsr $1185		jsr	errorHandler
.2a23					MInt32Modulus:
.2a23	20 ca 29	jsr $29ca			jsr 	MInt32UDivide 				; do the division.
.2a26	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2a28	95 60		sta $60,x			sta 	esInt3,x
.2a2a	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2a2c	95 58		sta $58,x			sta 	esInt2,x
.2a2e	b5 52		lda $52,x			lda 	esInt1+2,x
.2a30	95 50		sta $50,x			sta 	esInt1,x
.2a32	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2a34	95 48		sta $48,x			sta 	esInt0,x
.2a36	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c0f					fs32Length:
>0c0f							.fill 	1
.2a37					LinkInt32FromString:
.2a37	aa		tax				tax
.2a38	98		tya				tya
.2a39	20 3e 2a	jsr $2a3e			jsr 	MInt32FromString
.2a3c	8a		txa				txa
.2a3d	60		rts				rts
.2a3e					MInt32FromString:
.2a3e	85 32		sta $32				sta 	tempShort 					; save base
.2a40	98		tya				tya
.2a41	48		pha				pha
.2a42	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2a44	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a46	8d 0f 0c	sta $0c0f			sta 	fs32Length
.2a49	f0 65		beq $2ab0			beq 	_I32FSFail2					; fail if length zero.
.2a4b	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2a4d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2a4f	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2a51	d0 09		bne $2a5c			bne 	_I32FSNotNegative
.2a53	ad 0f 0c	lda $0c0f			lda 	fs32Length 					; get length back.
.2a56	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2a58	f0 56		beq $2ab0			beq 	_I32FSFail2
.2a5a	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2a5c					_I32FSNotNegative:
.2a5c	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2a5e	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2a60	d0 02		bne $2a64			bne 	_I32FSNN2
.2a62	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2a64					_I32FSNN2:
.2a64	48		pha				pha 								; save base + final sign on stack.
.2a65	20 d0 2b	jsr $2bd0			jsr 	MInt32False 				; zero the return value.
.2a68					_I32FSMainLoop:
.2a68	68		pla				pla 								; get the base back into tempShort
.2a69	48		pha				pha
.2a6a	29 7f		and #$7f			and 	#$7F
.2a6c	85 32		sta $32				sta 	tempShort
.2a6e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2a70	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2a72	90 02		bcc $2a76			bcc 	_I32FSNotLC
.2a74	e9 20		sbc #$20			sbc 	#32
.2a76					_I32FSNotLC:
.2a76	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2a77	e9 30		sbc #$30			sbc 	#"0"
.2a79	90 34		bcc $2aaf			bcc 	_I32FSFail 					; nothing more to do.
.2a7b	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2a7d	90 06		bcc $2a85			bcc 	_I32FSValidate
.2a7f	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2a81	90 2c		bcc $2aaf			bcc 	_I32FSFail
.2a83	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2a85					_I32FSValidate:
.2a85	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2a87	b0 26		bcs $2aaf			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2a89	48		pha				pha 								; save the new digit value.
.2a8a	e8		inx				inx 								; put base into next slot up on stack
.2a8b	a5 32		lda $32				lda 	tempShort
.2a8d	20 df 2b	jsr $2bdf			jsr 	MInt32Set8Bit
.2a90	ca		dex				dex
.2a91	20 e8 2a	jsr $2ae8			jsr 	MInt32Multiply 				; multiply current by the base
.2a94	e8		inx				inx
.2a95	68		pla				pla  								; put additive into next slot
.2a96	20 df 2b	jsr $2bdf			jsr 	MInt32Set8Bit
.2a99	ca		dex				dex
.2a9a	20 b4 2a	jsr $2ab4			jsr 	MInt32Add 					; and add it
.2a9d	c8		iny				iny 								; bump the character pointer
.2a9e	cc 0f 0c	cpy $0c0f			cpy 	fs32Length 					; until > length.
.2aa1	f0 c5		beq $2a68			beq 	_I32FSMainLoop
.2aa3	90 c3		bcc $2a68			bcc 	_I32FSMainLoop
.2aa5					_I32FSDone:
.2aa5	68		pla				pla 								; get base/final sign back
.2aa6	10 03		bpl $2aab			bpl 	_I32FSNN3
.2aa8	20 8a 2b	jsr $2b8a			jsr 	MInt32Negate 				; negate the result.
.2aab					_I32FSNN3:
.2aab	68		pla				pla
.2aac	a8		tay				tay
.2aad	38		sec				sec
.2aae	60		rts				rts
.2aaf					_I32FSFail:
.2aaf	68		pla				pla
.2ab0					_I32FSFail2:
.2ab0	68		pla				pla
.2ab1	a8		tay				tay
.2ab2	18		clc				clc
.2ab3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2ab4					MInt32Add:
.2ab4	18		clc				clc
.2ab5	b5 48		lda $48,x			lda 	esInt0,x
.2ab7	75 49		adc $49,x			adc 	esInt0+1,x
.2ab9	95 48		sta $48,x			sta 	esInt0,x
.2abb	b5 50		lda $50,x			lda 	esInt1,x
.2abd	75 51		adc $51,x			adc 	esInt1+1,x
.2abf	95 50		sta $50,x			sta 	esInt1,x
.2ac1	b5 58		lda $58,x			lda 	esInt2,x
.2ac3	75 59		adc $59,x			adc 	esInt2+1,x
.2ac5	95 58		sta $58,x			sta 	esInt2,x
.2ac7	b5 60		lda $60,x			lda 	esInt3,x
.2ac9	75 61		adc $61,x			adc 	esInt3+1,x
.2acb	95 60		sta $60,x			sta 	esInt3,x
.2acd	60		rts				rts
.2ace					MInt32Sub:
.2ace	38		sec				sec
.2acf	b5 48		lda $48,x			lda 	esInt0,x
.2ad1	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2ad3	95 48		sta $48,x			sta 	esInt0,x
.2ad5	b5 50		lda $50,x			lda 	esInt1,x
.2ad7	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2ad9	95 50		sta $50,x			sta 	esInt1,x
.2adb	b5 58		lda $58,x			lda 	esInt2,x
.2add	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2adf	95 58		sta $58,x			sta 	esInt2,x
.2ae1	b5 60		lda $60,x			lda 	esInt3,x
.2ae3	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2ae5	95 60		sta $60,x			sta 	esInt3,x
.2ae7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2ae8					MInt32Multiply:
.2ae8	e8		inx				inx 								; copy 2nd -> 3rd
.2ae9	20 0e 2b	jsr $2b0e			jsr 	MInt32CopyUp
.2aec	ca		dex				dex
.2aed	20 0e 2b	jsr $2b0e			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2af0	20 d0 2b	jsr $2bd0			jsr 	MInt32False 				; zero 1st.
.2af3					_I32Loop:
.2af3	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2af5	29 01		and #$01			and 	#1
.2af7	f0 03		beq $2afc			beq 	_I32NoAdd 					; if set
.2af9	20 b4 2a	jsr $2ab4			jsr 	MInt32Add 					; add 2nd to 1st.
.2afc					_I32NoAdd:
.2afc	e8		inx				inx 								; shift 2nd left
.2afd	20 e5 2b	jsr $2be5			jsr 	MInt32ShiftLeft
.2b00	e8		inx				inx  								; shift 3rd right
.2b01	20 ee 2b	jsr $2bee			jsr 	MInt32ShiftRight
.2b04	20 f7 2b	jsr $2bf7			jsr 	MInt32Zero 					; check if zero.
.2b07	08		php				php 								; save status bits
.2b08	ca		dex				dex 	 							; point back to 1st
.2b09	ca		dex				dex
.2b0a	28		plp				plp 								; get status bits
.2b0b	d0 e6		bne $2af3			bne 	_I32Loop 					; if non-zero keep going.
.2b0d	60		rts				rts
.2b0e					MInt32CopyUp:
.2b0e	b5 48		lda $48,x			lda 	esInt0,x
.2b10	95 49		sta $49,x			sta 	esInt0+1,x
.2b12	b5 50		lda $50,x			lda 	esInt1,x
.2b14	95 51		sta $51,x			sta 	esInt1+1,x
.2b16	b5 58		lda $58,x			lda 	esInt2,x
.2b18	95 59		sta $59,x			sta 	esInt2+1,x
.2b1a	b5 60		lda $60,x			lda 	esInt3,x
.2b1c	95 61		sta $61,x			sta 	esInt3+1,x
.2b1e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c10					MCharCount:	.fill 	1						; count of converted characters
.2b1f					MLInt32ToString:
.2b1f	aa		tax				tax									; module passes stack in A, base in Y
.2b20	98		tya				tya
.2b21	20 26 2b	jsr $2b26			jsr 	MInt32ToString
.2b24	8a		txa				txa
.2b25	60		rts				rts
.2b26					MInt32ToString:
.2b26	48		pha				pha 								; save base
.2b27	85 32		sta $32				sta 	tempShort 					; save target base.
.2b29	a9 00		lda #$00			lda 	#0
.2b2b	8d 10 0c	sta $0c10			sta 	MCharCount 					; clear character count to 0
.2b2e	98		tya				tya
.2b2f	48		pha				pha
.2b30	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2b32	10 10		bpl $2b44			bpl 	_I32TSUnsigned
.2b34	48		pha				pha 								; save base on stack.
.2b35	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2b37	10 08		bpl $2b41			bpl 	_I32TSNoFlip
.2b39	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2b3b	20 77 2b	jsr $2b77			jsr 	MI32WriteCharacter
.2b3e	20 8a 2b	jsr $2b8a			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2b41					_I32TSNoFlip:
.2b41	68		pla				pla 								; get the base back
.2b42	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2b44					_I32TSUnsigned:
.2b44	20 52 2b	jsr $2b52			jsr 	MI32DivideWrite 			; recursive code to output string.
.2b47	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2b49	ad 10 0c	lda $0c10			lda 	MCharCount
.2b4c	91 2a		sta ($2a),y			sta 	(temp0),y
.2b4e	68		pla				pla
.2b4f	a8		tay				tay
.2b50	68		pla				pla
.2b51	60		rts				rts
.2b52					MI32DivideWrite:
.2b52	48		pha				pha 								; save the divisor/base
.2b53	e8		inx				inx 								; write in the dividing position.
.2b54	20 df 2b	jsr $2bdf			jsr 	MInt32Set8Bit
.2b57	ca		dex				dex
.2b58	20 ca 29	jsr $29ca			jsr 	MInt32UDivide 				; divide number by base.
.2b5b	68		pla				pla 								; get the base into Y
.2b5c	a8		tay				tay
.2b5d	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2b5f	48		pha				pha
.2b60	20 f7 2b	jsr $2bf7			jsr 	MInt32Zero 					; is the result zero ?
.2b63	f0 04		beq $2b69			beq 	_I32NoRecurse 				; if so, don't recurse.
.2b65	98		tya				tya 								; put base into A
.2b66	20 52 2b	jsr $2b52			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2b69					_I32NoRecurse:
.2b69	68		pla				pla 								; get the remainder back
.2b6a	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2b6c	90 02		bcc $2b70			bcc 	_I32NotHex
.2b6e	69 06		adc #$06			adc 	#7-1
.2b70					_I32NotHex:
.2b70	18		clc				clc 								; make it ASCII
.2b71	69 30		adc #$30			adc 	#48
.2b73	20 77 2b	jsr $2b77			jsr 	MI32WriteCharacter 			; write the character out
.2b76	60		rts				rts 								; and exit.
.2b77					MI32WriteCharacter:
.2b77	ee 10 0c	inc $0c10			inc 	MCharCount 					; bump count (space for leading count)
.2b7a	ac 10 0c	ldy $0c10			ldy 	MCharCount 					; get position
.2b7d	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2b7f	c8		iny				iny
.2b80	a9 00		lda #$00			lda 	#0
.2b82	91 2a		sta ($2a),y			sta 	(temp0),y
.2b84	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c11					MSeed32:	.fill 	4							; random number seed.
.2b85					MInt32Absolute:
.2b85	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2b87	30 01		bmi $2b8a			bmi 	MInt32Negate
.2b89	60		rts				rts
.2b8a					MInt32Negate:
.2b8a	38		sec				sec 								; subtract from zero.
.2b8b	a9 00		lda #$00			lda 	#0
.2b8d	f5 48		sbc $48,x			sbc 	esInt0,x
.2b8f	95 48		sta $48,x			sta 	esInt0,x
.2b91	a9 00		lda #$00			lda 	#0
.2b93	f5 50		sbc $50,x			sbc 	esInt1,x
.2b95	95 50		sta $50,x			sta 	esInt1,x
.2b97	a9 00		lda #$00			lda 	#0
.2b99	f5 58		sbc $58,x			sbc 	esInt2,x
.2b9b	95 58		sta $58,x			sta 	esInt2,x
.2b9d	a9 00		lda #$00			lda 	#0
.2b9f	f5 60		sbc $60,x			sbc 	esInt3,x
.2ba1	95 60		sta $60,x			sta 	esInt3,x
.2ba3	60		rts				rts
.2ba4					MInt32Not:
.2ba4	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2ba6	49 ff		eor #$ff			eor 	#$FF
.2ba8	95 48		sta $48,x			sta 	esInt0,x
.2baa	b5 50		lda $50,x			lda 	esInt1,x
.2bac	49 ff		eor #$ff			eor 	#$FF
.2bae	95 50		sta $50,x			sta 	esInt1,x
.2bb0	b5 58		lda $58,x			lda 	esInt2,x
.2bb2	49 ff		eor #$ff			eor 	#$FF
.2bb4	95 58		sta $58,x			sta 	esInt2,x
.2bb6	b5 60		lda $60,x			lda 	esInt3,x
.2bb8	49 ff		eor #$ff			eor 	#$FF
.2bba	95 60		sta $60,x			sta 	esInt3,x
.2bbc	60		rts				rts
.2bbd					MInt32Sign:
.2bbd	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2bbf	30 0b		bmi $2bcc			bmi 	MInt32True 					; if set return -1 (true)
.2bc1	20 f7 2b	jsr $2bf7			jsr 	MInt32Zero 					; is it zero ?
.2bc4	f0 0a		beq $2bd0			beq 	MInt32False 				; if zero return 0 (false)
.2bc6	20 d0 2b	jsr $2bd0			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2bc9	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2bcb	60		rts				rts
.2bcc					MInt32True:
.2bcc	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2bce	d0 02		bne $2bd2			bne 	MInt32WriteAll
.2bd0					MInt32False:
.2bd0	a9 00		lda #$00			lda 	#0
.2bd2					MInt32WriteAll:
.2bd2	95 48		sta $48,x			sta 	esInt0,x
.2bd4					MInt32Write123:
.2bd4	95 50		sta $50,x			sta 	esInt1,x
.2bd6	95 58		sta $58,x			sta 	esInt2,x
.2bd8	95 60		sta $60,x			sta 	esInt3,x
.2bda	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2bdc	95 40		sta $40,x			sta 	esType,x
.2bde	60		rts				rts
.2bdf					MInt32Set8Bit:
.2bdf	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2be1	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2be3	f0 ef		beq $2bd4			beq		MInt32Write123
.2be5					MInt32ShiftLeft:
.2be5	16 48		asl $48,x			asl 	esInt0,x
.2be7	36 50		rol $50,x			rol	 	esInt1,x
.2be9	36 58		rol $58,x			rol	 	esInt2,x
.2beb	36 60		rol $60,x			rol	 	esInt3,x
.2bed	60		rts				rts
.2bee					MInt32ShiftRight:
.2bee	56 60		lsr $60,x			lsr 	esInt3,x
.2bf0	76 58		ror $58,x			ror 	esInt2,x
.2bf2	76 50		ror $50,x			ror 	esInt1,x
.2bf4	76 48		ror $48,x			ror 	esInt0,x
.2bf6	60		rts				rts
.2bf7					MInt32Zero:
.2bf7	b5 48		lda $48,x			lda 	esInt0,x
.2bf9	15 50		ora $50,x			ora 	esInt1,x
.2bfb	15 58		ora $58,x			ora 	esInt2,x
.2bfd	15 60		ora $60,x			ora 	esInt3,x
.2bff	60		rts				rts
.2c00					MInt32Random:
.2c00	98		tya				tya
.2c01	48		pha				pha
.2c02	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2c04	ad 11 0c	lda $0c11			lda 	MSeed32+0 					; check the seed isn't zero
.2c07	d0 03		bne $2c0c			bne 	_Random1
.2c09	a8		tay				tay 								; if so do it 256 times
.2c0a	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2c0c					_Random1:
.2c0c	0a		asl a				asl 	a
.2c0d	2e 12 0c	rol $0c12			rol 	MSeed32+1
.2c10	2e 13 0c	rol $0c13			rol 	MSeed32+2
.2c13	2e 14 0c	rol $0c14			rol 	MSeed32+3
.2c16	90 02		bcc $2c1a			bcc 	_Random2
.2c18	49 c5		eor #$c5			eor 	#$C5
.2c1a					_Random2:
.2c1a	88		dey				dey
.2c1b	d0 ef		bne $2c0c			bne 	_Random1
.2c1d	8d 11 0c	sta $0c11			sta 	MSeed32+0 					; copy the seed in.
.2c20	95 48		sta $48,x			sta 	esInt0,x
.2c22	ad 12 0c	lda $0c12			lda 	MSeed32+1
.2c25	95 50		sta $50,x			sta 	esInt1,x
.2c27	ad 13 0c	lda $0c13			lda 	MSeed32+2
.2c2a	95 58		sta $58,x			sta 	esInt2,x
.2c2c	ad 14 0c	lda $0c14			lda 	MSeed32+3
.2c2f	95 60		sta $60,x			sta 	esInt3,x
.2c31	68		pla				pla
.2c32	a8		tay				tay
.2c33	a9 00		lda #$00			lda 	#0
.2c35	95 40		sta $40,x			sta 	esType,x
.2c37	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2c38					CheckToken:
.2c38	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2c3a	d0 02		bne $2c3e			bne 	_CTError
.2c3c	c8		iny				iny
.2c3d	60		rts				rts
.2c3e					_CTError:
.2c3e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2c40	20 85 11	jsr $1185		jsr	errorHandler
.2c43					CheckRightParen:
.2c43	b1 28		lda ($28),y			lda 	(codePtr),y
.2c45	c8		iny				iny
.2c46	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2c48	d0 01		bne $2c4b			bne 	_CRPError
.2c4a	60		rts				rts
.2c4b					_CRPError:
.2c4b	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2c4d	20 85 11	jsr $1185		jsr	errorHandler
.2c50					CheckComma:
.2c50	b1 28		lda ($28),y			lda 	(codePtr),y
.2c52	c8		iny				iny
.2c53	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2c55	d0 01		bne $2c58			bne 	_CCError
.2c57	60		rts				rts
.2c58					_CCError:
.2c58	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2c5a	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2c5d					ScanForward:
.2c5d	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2c5f	86 2d		stx $2d				stx 	temp1+1
.2c61	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2c63	85 2e		sta $2e				sta 	temp2
.2c65	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2c67	c8		iny				iny
.2c68	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2c6a	d0 08		bne $2c74			bne 	_SFNoCheck 					; if so, check token against entered values.
.2c6c	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2c6e	f0 24		beq $2c94			beq 	_SFExit 					; at the same strcture depth.
.2c70	c5 2d		cmp $2d				cmp 	temp1+1
.2c72	f0 20		beq $2c94			beq 	_SFExit
.2c74					_SFNoCheck:
.2c74	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2c76	90 ed		bcc $2c65			bcc 	_SFLoop
.2c78	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2c7a	90 19		bcc $2c95			bcc 	_SFSpecials
.2c7c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2c7e	90 e5		bcc $2c65			bcc 	_SFLoop
.2c80	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2c82	b0 e1		bcs $2c65			bcs 	_SFLoop
.2c84	aa		tax				tax  								; token in X, and look up the adjuster.
.2c85	bd d8 24	lda $24d8,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2c88	38		sec				sec 								; convert to an offset ($FF,$01)
.2c89	e9 81		sbc #$81			sbc 	#$81
.2c8b	18		clc				clc 								; add to depth
.2c8c	65 2e		adc $2e				adc 	temp2
.2c8e	85 2e		sta $2e				sta 	temp2
.2c90	10 d3		bpl $2c65			bpl 	_SFLoop 					; +ve okay to continue
.2c92	30 07		bmi $2c9b			bmi 	SFError 					; if gone -ve then we have a nesting error
.2c94	60		rts		_SFExit:rts
.2c95					_SFSpecials:
.2c95	20 a0 2c	jsr $2ca0			jsr 	ScannerSkipSpecial
.2c98	4c 65 2c	jmp $2c65			jmp 	_SFLoop
.2c9b					SFError:
.2c9b	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2c9d	20 85 11	jsr $1185		jsr	errorHandler
.2ca0					ScannerSkipSpecial:
.2ca0	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2ca2	f0 10		beq $2cb4			beq 	_SFNextLine
.2ca4	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2ca6	f0 28		beq $2cd0			beq 	_SFFloatSkip
.2ca8	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2caa	f0 02		beq $2cae			beq 	_SFSkipString
.2cac	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2cad	60		rts				rts 								; token.
.2cae					_SFSkipString:
.2cae	98		tya				tya
.2caf	38		sec				sec
.2cb0	71 28		adc ($28),y			adc 	(codePtr),y
.2cb2	a8		tay				tay
.2cb3					_SFReturn:
.2cb3	60		rts				rts
.2cb4					_SFNextLine:
.2cb4	a0 00		ldy #$00			ldy 	#0 							; get offset
.2cb6	b1 28		lda ($28),y			lda 	(codePtr),y
.2cb8	18		clc				clc 								; add to code pointer.
.2cb9	65 28		adc $28				adc 	codePtr
.2cbb	85 28		sta $28				sta 	codePtr
.2cbd	90 02		bcc $2cc1			bcc		_SFNLNoCarry
.2cbf	e6 29		inc $29				inc 	codePtr+1
.2cc1					_SFNLNoCarry:
.2cc1	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2cc3	d0 ee		bne $2cb3			bne		_SFReturn 					; no go round again
.2cc5	a5 2c		lda $2c				lda 	temp1
.2cc7	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.2cc9	d0 d0		bne $2c9b			bne 	SFError 					; read uses this to search for data statements
.2ccb	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2ccd	20 85 11	jsr $1185		jsr	errorHandler
.2cd0					_SFFloatSkip:
.2cd0	98		tya				tya 								; skip over an embedded float.
.2cd1	18		clc				clc
.2cd2	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2cd4	a8		tay				tay
.2cd5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2cd6					RSReset:
.2cd6	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2cd8	85 78		sta $78				sta 	rsPointer
.2cda	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2cdc	85 79		sta $79				sta 	1+(rsPointer)
.2cde	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2ce0	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2ce3	60		rts				rts
.2ce4					RSClaim:
.2ce4	84 32		sty $32				sty 	tempShort 					; preserve Y
.2ce6	48		pha				pha 								; save marker on stack.
.2ce7	8a		txa				txa 								; get bytes required.
.2ce8	38		sec				sec
.2ce9	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2ceb	65 78		adc $78				adc 	rsPointer
.2ced	85 78		sta $78				sta 	rsPointer
.2cef	a5 79		lda $79				lda 	rsPointer+1
.2cf1	69 ff		adc #$ff			adc 	#$FF
.2cf3	85 79		sta $79				sta 	rsPointer+1
.2cf5	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2cf7	90 08		bcc $2d01			bcc 	_RSCOverflow
.2cf9	68		pla				pla 								; get marker back
.2cfa	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2cfc	91 78		sta ($78),y			sta 	(rsPointer),y
.2cfe	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2d00	60		rts				rts
.2d01					_RSCOverflow:
.2d01	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2d03	20 85 11	jsr $1185		jsr	errorHandler
.2d06					RSFree:
.2d06	18		clc				clc
.2d07	65 78		adc $78				adc 	rsPointer
.2d09	85 78		sta $78				sta 	rsPointer
.2d0b	90 02		bcc $2d0f			bcc 	_RSFExit
.2d0d	e6 79		inc $79				inc 	rsPointer+1
.2d0f					_RSFExit:
.2d0f	60		rts				rts
.2d10					RSSavePosition:
.2d10	84 32		sty $32				sty 	tempShort 					; save Y position
.2d12	a8		tay				tay 								; this is where we write it.
.2d13	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2d15	91 78		sta ($78),y			sta 	(rsPointer),y
.2d17	c8		iny				iny
.2d18	a5 29		lda $29				lda 	codePtr+1
.2d1a	91 78		sta ($78),y			sta 	(rsPointer),y
.2d1c	c8		iny				iny
.2d1d	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.2d1f	91 78		sta ($78),y			sta 	(rsPointer),y
.2d21	a8		tay				tay 								; fix Y back again to original value
.2d22	60		rts				rts
.2d23					RSLoadPosition:
.2d23	a8		tay				tay
.2d24	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2d26	85 28		sta $28				sta 	codePtr
.2d28	c8		iny				iny
.2d29	b1 78		lda ($78),y			lda 	(rsPointer),y
.2d2b	85 29		sta $29				sta 	codePtr+1
.2d2d	c8		iny				iny
.2d2e	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2d30	a8		tay				tay 								; to Y
.2d31	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.2d32					WarmStart:
.2d32	a2 02		ldx #$02		ldx	#2
.2d34	20 d0 16	jsr $16d0		jsr	interactionHandler

;******  Return to file: main/main.asm

.2d37					mainHandler:
.2d37	7c 3a 2d	jmp ($2d3a,x)			jmp 	(mainVectors,x)
.2d3a					mainVectors:
>2d3a	43 2c					.word CheckRightParen      ; index 0
>2d3c	e5 16					.word XCommandClear        ; index 2
>2d3e	5a 26					.word LinkEvaluate         ; index 4
>2d40	66 26					.word LinkEvaluateInteger  ; index 6
>2d42	6c 26					.word LinkEvaluateSmallInt ; index 8
>2d44	60 26					.word LinkEvaluateTerm     ; index 10
>2d46	1f 2b					.word MLInt32ToString      ; index 12
>2d48	03 1c					.word Command_XNew         ; index 14
>2d4a	12 1e					.word XCommand_Run         ; index 16
>2d4c	1e 1e					.word Command_RunFrom      ; index 18
>2d4e	37 2a					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.2d50					section_end_main:
.2d50					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2d50					StringChrs:
.2d50	aa		tax				tax 								; set up stack
.2d51	a9 02		lda #$02			lda 	#2
.2d53	20 13 2e	jsr $2e13			jsr 	AllocateSoftString
.2d56	98		tya				tya
.2d57	20 39 2e	jsr $2e39			jsr 	WriteSoftString
.2d5a					StringUpdate:
.2d5a	20 68 2d	jsr $2d68			jsr 	ReturnSoftString
.2d5d	8a		txa				txa
.2d5e	60		rts				rts
.2d5f					StringNull:
.2d5f	aa		tax				tax
.2d60	a9 01		lda #$01			lda 	#1
.2d62	20 13 2e	jsr $2e13			jsr 	AllocateSoftString
.2d65	4c 5a 2d	jmp $2d5a			jmp 	StringUpdate
.2d68					ReturnSoftString:
.2d68	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.2d6a	95 48		sta $48,x			sta 	esInt0,x
.2d6c	a5 7b		lda $7b				lda 	softMemAlloc+1
.2d6e	95 50		sta $50,x			sta 	esInt1,x
.2d70	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.2d72	95 58		sta $58,x			sta 	esInt2,x
.2d74	95 60		sta $60,x			sta 	esInt3,x
.2d76	a9 40		lda #$40			lda 	#$40 						; type string.
.2d78	95 40		sta $40,x			sta 	esType,x
.2d7a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2d7b					STRCompare:
.2d7b	48		pha				pha 								; save A
.2d7c	aa		tax				tax 								; put stack pos in X
.2d7d	98		tya				tya
.2d7e	48		pha				pha
.2d7f	20 b3 2d	jsr $2db3			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.2d82	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2d84	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d86	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.2d88	90 02		bcc $2d8c			bcc 	_SCNotSmaller
.2d8a	b1 2c		lda ($2c),y			lda 	(temp1),y
.2d8c					_SCNotSmaller:
.2d8c	aa		tax				tax 								; put that in X. We compare this many chars first.
.2d8d					_SCCompareLoop:
.2d8d	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2d8f	f0 0c		beq $2d9d			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2d91	ca		dex				dex 								; decrement chars to compare.
.2d92	c8		iny				iny 								; move to next character
.2d93	38		sec				sec 								; calculate s1[y]-s2[y]
.2d94	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d96	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2d98	d0 0a		bne $2da4			bne 	_SCReturnResult 			; if different return sign of A
.2d9a	4c 8d 2d	jmp $2d8d			jmp 	_SCCompareLoop
.2d9d					_SCSameToEndShortest
.2d9d	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2d9f	38		sec				sec
.2da0	b1 2a		lda ($2a),y			lda 	(temp0),y
.2da2	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2da4					_SCReturnResult:
.2da4	08		php				php 								; set return to zero preserving PSW.
.2da5	a2 00		ldx #$00			ldx 	#0
.2da7	28		plp				plp
.2da8	f0 05		beq $2daf			beq 	_SCExit 					; two values equal, then exit
.2daa	ca		dex				dex 								; X = $FF
.2dab	90 02		bcc $2daf			bcc 	_SCExit 					; if 1st < 2nd then -1
.2dad	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2daf					_SCExit:
.2daf	68		pla				pla
.2db0	a8		tay				tay
.2db1	68		pla				pla
.2db2	60		rts				rts
.2db3					CopyStringPair:
.2db3	b5 49		lda $49,x			lda 	esInt0+1,x
.2db5	85 2c		sta $2c				sta 	temp1
.2db7	b5 51		lda $51,x			lda 	esInt1+1,x
.2db9	85 2d		sta $2d				sta 	temp1+1
.2dbb					CopyStringTop:
.2dbb	b5 48		lda $48,x			lda 	esInt0,x
.2dbd	85 2a		sta $2a				sta 	temp0
.2dbf	b5 50		lda $50,x			lda 	esInt1,x
.2dc1	85 2b		sta $2b				sta 	temp0+1
.2dc3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2dc4					StringConcat:
.2dc4	aa		tax				tax									; stack pos in X
.2dc5	98		tya				tya
.2dc6	48		pha				pha
.2dc7	20 b3 2d	jsr $2db3			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2dca	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2dcb	a0 00		ldy #$00			ldy 	#0
.2dcd	b1 2a		lda ($2a),y			lda 	(temp0),y
.2dcf	71 2c		adc ($2c),y			adc 	(temp1),y
.2dd1	b0 1c		bcs $2def			bcs 	_SCError 					; just too many characters here.
.2dd3	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2dd5	b0 18		bcs $2def			bcs 	_SCError
.2dd7	20 13 2e	jsr $2e13			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2dda	20 0a 2e	jsr $2e0a			jsr 	CopySoftToStack 			; copy that to the stack.
.2ddd	20 f4 2d	jsr $2df4			jsr 	SCCopyTemp0 				; copy temp0
.2de0	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.2de2	85 2a		sta $2a				sta 	temp0
.2de4	a5 2d		lda $2d				lda 	temp1+1
.2de6	85 2b		sta $2b				sta 	temp0+1
.2de8	20 f4 2d	jsr $2df4			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2deb	68		pla				pla
.2dec	a8		tay				tay
.2ded	8a		txa				txa 								; and A
.2dee	60		rts				rts
.2def					_SCError:
.2def	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2df1	20 85 11	jsr $1185		jsr	errorHandler
.2df4					SCCopyTemp0:
.2df4	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2df6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2df8	85 2e		sta $2e				sta 	temp2
.2dfa					_SCCopyLoop:
.2dfa	a5 2e		lda $2e				lda 	temp2 						; done the lot
.2dfc	f0 0b		beq $2e09			beq 	_SCCopyExit
.2dfe	c6 2e		dec $2e				dec 	temp2
.2e00	c8		iny				iny 								; get next char
.2e01	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e03	20 39 2e	jsr $2e39			jsr 	WriteSoftString 			; write to soft string.
.2e06	4c fa 2d	jmp $2dfa			jmp 	_SCCopyLoop
.2e09					_SCCopyExit:
.2e09	60		rts				rts
.2e0a					CopySoftToStack:
.2e0a	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2e0c	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2e0e	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2e10	95 50		sta $50,x			sta 	esInt1,x
.2e12	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2e13					AllocateSoftString:
.2e13	85 32		sta $32				sta 	tempShort 					; save count
.2e15	98		tya				tya
.2e16	48		pha				pha
.2e17	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2e19	d0 09		bne $2e24			bne 	_ASSDone
.2e1b	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.2e1d	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2e1f	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2e21	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2e22	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.2e24					_ASSDone:
.2e24	38		sec				sec 								; allocate downwards enough memory
.2e25	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2e27	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.2e29	85 7a		sta $7a				sta 	softMemAlloc
.2e2b	a5 7b		lda $7b				lda 	softMemAlloc+1
.2e2d	e9 00		sbc #$00			sbc 	#0
.2e2f	85 7b		sta $7b				sta 	softMemAlloc+1
.2e31	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2e33	a8		tay				tay
.2e34	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2e36	68		pla				pla
.2e37	a8		tay				tay
.2e38	60		rts				rts
.2e39					WriteSoftString:
.2e39	84 32		sty $32				sty 	tempShort 					; save Y
.2e3b	48		pha				pha 								; save character on stack
.2e3c	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2e3e	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2e40	18		clc				clc
.2e41	69 01		adc #$01			adc 	#1
.2e43	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2e45	a8		tay				tay 								; offset in Y
.2e46	68		pla				pla 								; get char and write.
.2e47	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2e49	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.2e4b	60		rts				rts
.2e4c					StrClone:
.2e4c	aa		tax				tax 								; set up stack.
.2e4d	98		tya				tya
.2e4e	48		pha				pha
.2e4f	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2e51	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.2e53	18		clc				clc
.2e54	69 01		adc #$01			adc 	#1
.2e56	20 13 2e	jsr $2e13			jsr 	AllocateSoftString 			; allocate soft memory
.2e59	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2e5b	95 48		sta $48,x			sta 	esInt0,x
.2e5d	a5 7b		lda $7b				lda 	softMemAlloc+1
.2e5f	95 50		sta $50,x			sta 	esInt1,x
.2e61	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2e63	95 58		sta $58,x			sta 	esInt2,x
.2e65	95 60		sta $60,x			sta 	esInt3,x
.2e67	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2e69	95 40		sta $40,x			sta 	esType,x
.2e6b	20 f4 2d	jsr $2df4			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2e6e	68		pla				pla
.2e6f	a8		tay				tay
.2e70	8a		txa				txa
.2e71	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2e72					CaseString:
.2e72	48		pha				pha 								; save A and copy to X
.2e73	aa		tax				tax
.2e74	98		tya				tya
.2e75	48		pha				pha
.2e76	20 bb 2d	jsr $2dbb			jsr 	CopyStringTop 				; target string -> temp0
.2e79	a0 00		ldy #$00			ldy 	#0
.2e7b	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.2e7d	18		clc				clc
.2e7e	69 01		adc #$01			adc 	#1 							; one more for length byte
.2e80	20 13 2e	jsr $2e13			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2e83	20 0a 2e	jsr $2e0a			jsr 	CopySoftToStack 			; copy that to the stack.
.2e86	a0 00		ldy #$00			ldy 	#0
.2e88	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.2e8a	aa		tax				tax
.2e8b					_CSCopy:
.2e8b	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2e8d	f0 24		beq $2eb3			beq 	_CSExit
.2e8f	ca		dex				dex
.2e90	c8		iny				iny
.2e91	68		pla				pla 								; check direction
.2e92	48		pha				pha
.2e93	f0 0c		beq $2ea1			beq 	_CSUpper
.2e95	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.2e97	c9 41		cmp #$41			cmp 	#"A"
.2e99	90 12		bcc $2ead			bcc 	_CSWrite
.2e9b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2e9d	b0 0e		bcs $2ead			bcs 	_CSWrite
.2e9f	90 0a		bcc $2eab			bcc 	_CSFlipWrite
.2ea1					_CSUpper:
.2ea1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.2ea3	c9 61		cmp #$61			cmp 	#"a"
.2ea5	90 06		bcc $2ead			bcc 	_CSWrite
.2ea7	c9 7b		cmp #$7b			cmp 	#"z"+1
.2ea9	b0 02		bcs $2ead			bcs 	_CSWrite
.2eab					_CSFlipWrite:
.2eab	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2ead					_CSWrite:
.2ead	20 39 2e	jsr $2e39			jsr 	WriteSoftString 			; add to soft string.
.2eb0	4c 8b 2e	jmp $2e8b			jmp 	_CSCopy
.2eb3					_CSExit:
.2eb3	68		pla				pla
.2eb4	a8		tay				tay
.2eb5	68		pla				pla
.2eb6	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2eb7					StringSubstring:
.2eb7	48		pha				pha
.2eb8	aa		tax				tax 								; access stack.
.2eb9	98		tya				tya
.2eba	48		pha				pha
.2ebb	20 bb 2d	jsr $2dbb			jsr 	CopyStringTop 				; point temp0 to the string.
.2ebe	a0 00		ldy #$00			ldy 	#0 							; get length.
.2ec0	b1 2a		lda ($2a),y			lda 	(temp0),Y
.2ec2	85 2c		sta $2c				sta 	temp1
.2ec4	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2ec6	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.2ec8	f0 02		beq $2ecc			beq 	_SSBOkay
.2eca	b0 2a		bcs $2ef6			bcs 	_SSBReturnNull
.2ecc					_SSBOkay:
.2ecc	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.2ece	18		clc				clc
.2ecf	69 01		adc #$01			adc 	#1
.2ed1	38		sec				sec
.2ed2	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2ed4	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2ed6	90 02		bcc $2eda			bcc		_SSBTrunc
.2ed8	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2eda					_SSBTrunc:
.2eda	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.2edc	18		clc				clc
.2edd	69 01		adc #$01			adc 	#1 							; add 1
.2edf	20 13 2e	jsr $2e13			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2ee2	20 0a 2e	jsr $2e0a			jsr 	CopySoftToStack 			; copy that to the stack.
.2ee5	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2ee7					_SSBCopyLoop:
.2ee7	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.2ee9	f0 0e		beq $2ef9			beq 	_SSBExit
.2eeb	c6 2d		dec $2d				dec 	temp1+1
.2eed	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.2eef	20 39 2e	jsr $2e39			jsr 	WriteSoftString
.2ef2	c8		iny				iny
.2ef3	4c e7 2e	jmp $2ee7			jmp 	_SSBCopyLoop
.2ef6					_SSBReturnNull:
.2ef6	20 fd 2e	jsr $2efd			jsr 	ReturnNull
.2ef9					_SSBExit:
.2ef9	68		pla				pla
.2efa	a8		tay				tay
.2efb	68		pla				pla
.2efc	60		rts				rts
.2efd					ReturnNull:
.2efd	a9 00		lda #$00			lda 	#0 							; clear null string
.2eff	8d ce 0a	sta $0ace			sta 	NullString
.2f02	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.2f04	95 48		sta $48,x			sta 	esInt0,x
.2f06	a9 0a		lda #$0a			lda 	#NullString >> 8
.2f08	95 50		sta $50,x			sta 	esInt1,x
.2f0a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c15					srcStrLen:
>0c15							.fill 	1
.2f0b					StringWrite:
.2f0b	aa		tax				tax
.2f0c	48		pha				pha
.2f0d	98		tya				tya
.2f0e	48		pha				pha
.2f0f	20 36 2f	jsr $2f36			jsr 	CheckOverwriteCurrent
.2f12	b0 0d		bcs $2f21			bcs		_SWCopyCurrent
.2f14	20 74 2f	jsr $2f74			jsr 	RequiresConcretion
.2f17	90 0e		bcc $2f27			bcc 	_SWWriteReference
.2f19	20 d7 2f	jsr $2fd7			jsr 	CheckSpecialConcretion
.2f1c	b0 09		bcs $2f27			bcs 	_SWWriteReference
.2f1e	20 88 2f	jsr $2f88			jsr 	AllocateHardMemory
.2f21					_SWCopyCurrent:
.2f21	20 bb 2f	jsr $2fbb			jsr 	CopyStringToHardMemory
.2f24	4c 32 2f	jmp $2f32			jmp 	_SWExit
.2f27					_SWWriteReference
.2f27	a0 00		ldy #$00			ldy 	#0
.2f29	a5 2a		lda $2a				lda 	temp0
.2f2b	91 2c		sta ($2c),y			sta 	(temp1),y
.2f2d	c8		iny				iny
.2f2e	a5 2b		lda $2b				lda 	temp0+1
.2f30	91 2c		sta ($2c),y			sta 	(temp1),y
.2f32					_SWExit:
.2f32	68		pla				pla
.2f33	a8		tay				tay
.2f34	68		pla				pla
.2f35	60		rts				rts
.2f36					CheckOverwriteCurrent:
.2f36	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2f38	b5 51		lda $51,x			lda 	esInt1+1,x
.2f3a	85 2b		sta $2b				sta 	temp0+1
.2f3c	b5 49		lda $49,x			lda 	esInt0+1,x
.2f3e	85 2a		sta $2a				sta 	temp0
.2f40	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.2f42	8d 15 0c	sta $0c15			sta 	srcStrLen
.2f45	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2f47	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2f49	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2f4b	85 2d		sta $2d				sta 	temp1+1
.2f4d	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2f4f	b1 2c		lda ($2c),y			lda 	(temp1),y
.2f51	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2f53	90 1b		bcc $2f70			bcc 	_COCFail 				; in hard memory.
.2f55	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2f57	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.2f59	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.2f5b	85 2e		sta $2e				sta 	temp2
.2f5d	c8		iny				iny
.2f5e	b1 2c		lda ($2c),y			lda 	(temp1),y
.2f60	e9 00		sbc #$00			sbc 	#0
.2f62	85 2f		sta $2f				sta 	temp2+1
.2f64	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2f66	b1 2e		lda ($2e),y			lda 	(temp2),y
.2f68	38		sec				sec  							; maximum character capacity.
.2f69	e9 02		sbc #$02			sbc 	#2
.2f6b	cd 15 0c	cmp $0c15			cmp 	srcStrLen 				; if >= the required length
.2f6e	b0 02		bcs $2f72			bcs 	_COCCanReuse
.2f70					_COCFail:
.2f70	18		clc				clc
.2f71	60		rts				rts
.2f72					_COCCanReuse:
.2f72	38		sec				sec
.2f73	60		rts				rts
.2f74					RequiresConcretion:
.2f74	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2f76	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.2f78	b0 0a		bcs $2f84			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2f7a	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2f7c	f0 08		beq $2f86			beq 	_RCFail 				; if not, this cannot be soft memory.
.2f7e	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2f80	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2f82	90 02		bcc $2f86			bcc 	_RCFail 				; so concreting
.2f84					_RCSucceed:
.2f84	38		sec				sec
.2f85	60		rts				rts
.2f86					_RCFail:
.2f86	18		clc				clc
.2f87	60		rts				rts
.2f88					AllocateHardMemory:
.2f88	98		tya				tya
.2f89	48		pha				pha
.2f8a	ad 15 0c	lda $0c15			lda 	srcStrLen 				; characters in string
.2f8d	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2f8f	b0 04		bcs $2f95			bcs 	_AHMSetMax 				; max out that amount.
.2f91	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2f93	90 02		bcc $2f97			bcc 	_AHMIsOkay
.2f95					_AHMSetMax:
.2f95	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2f97					_AHMIsOkay:
.2f97	48		pha				pha	 							; save size to be allocated
.2f98	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2f9a	38		sec				sec  							; and copy result to TOS as target address.
.2f9b	65 33		adc $33				adc 	highMemory
.2f9d	85 33		sta $33				sta 	highMemory
.2f9f	a5 34		lda $34				lda 	highMemory+1
.2fa1	69 ff		adc #$ff			adc 	#$FF
.2fa3	85 34		sta $34				sta 	highMemory+1
.2fa5	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2fa7	68		pla				pla 							; get the total size of the storage block
.2fa8	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.2faa	18		clc				clc
.2fab	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.2fad	69 01		adc #$01			adc 	#1
.2faf	91 2c		sta ($2c),y			sta 	(temp1),y
.2fb1	a5 34		lda $34				lda 	highMemory+1
.2fb3	69 00		adc #$00			adc 	#0
.2fb5	c8		iny				iny
.2fb6	91 2c		sta ($2c),y			sta 	(temp1),y
.2fb8	68		pla				pla
.2fb9	a8		tay				tay
.2fba	60		rts				rts
.2fbb					CopyStringToHardMemory:
.2fbb	98		tya				tya
.2fbc	48		pha				pha
.2fbd	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2fbf	b1 2c		lda ($2c),y			lda 	(temp1),y
.2fc1	85 2e		sta $2e				sta 	temp2
.2fc3	c8		iny				iny
.2fc4	b1 2c		lda ($2c),y			lda 	(temp1),y
.2fc6	85 2f		sta $2f				sta 	temp2+1
.2fc8	ac 15 0c	ldy $0c15			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2fcb					_CSTHMLoop:
.2fcb	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fcd	91 2e		sta ($2e),y			sta 	(temp2),y
.2fcf	88		dey				dey
.2fd0	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.2fd2	d0 f7		bne $2fcb			bne 	_CSTHMLoop
.2fd4	68		pla				pla
.2fd5	a8		tay				tay
.2fd6	60		rts				rts
.2fd7					CheckSpecialConcretion:
.2fd7	ad 15 0c	lda $0c15			lda 	srcStrLen 				; check string is null e.g. length = 0
.2fda	f0 02		beq $2fde			beq 	_CSCNullString
.2fdc	18		clc				clc
.2fdd	60		rts				rts
.2fde					_CSCNullString:
.2fde	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.2fe0	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.2fe3	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.2fe5	85 2a		sta $2a				sta 	temp0
.2fe7	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2fe9	85 2b		sta $2b				sta 	1+(temp0)
.2feb	38		sec				sec
.2fec	60		rts				rts

;******  Return to file: string/string.asm

.2fed					stringHandler:
.2fed	7c f0 2f	jmp ($2ff0,x)			jmp 	(stringVectors,x)
.2ff0					stringVectors:
>2ff0	50 2d					.word StringChrs           ; index 0
>2ff2	4c 2e					.word StrClone             ; index 2
>2ff4	c4 2d					.word StringConcat         ; index 4
>2ff6	5f 2d					.word StringNull           ; index 6
>2ff8	7b 2d					.word STRCompare           ; index 8
>2ffa	72 2e					.word CaseString           ; index 10
>2ffc	b7 2e					.word StringSubstring      ; index 12
>2ffe	0b 2f					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.3000					section_end_string:
.3000					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c16					deTokeniseVector:
>0c16							.fill 	2
.0c18					lastCharacterClass:
>0c18							.fill 	1
.0c19					indent:
>0c19							.fill 	1
.3000					ListLine:
.3000	48		pha				pha
.3001	a9 2e		lda #$2e			lda 	#(deTokenPrint) & $FF
.3003	8d 16 0c	sta $0c16			sta 	deTokeniseVector
.3006	a9 31		lda #$31			lda 	#(deTokenPrint) >> 8
.3008	8d 17 0c	sta $0c17			sta 	1+(deTokeniseVector)
.300b	68		pla				pla
.300c					Detokenise:
.300c	18		clc				clc
.300d	69 06		adc #$06			adc 	#6
.300f	8d 19 0c	sta $0c19			sta 	indent
.3012	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3014	8d 18 0c	sta $0c18			sta 	lastCharacterClass
.3017	a2 02		ldx #$02			ldx 	#2
.3019	20 d0 2b	jsr $2bd0			jsr 	MInt32False
.301c	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.301e	b1 28		lda ($28),y			lda 	(codePtr),y
.3020	95 48		sta $48,x			sta 	esInt0,x
.3022	c8		iny				iny
.3023	b1 28		lda ($28),y			lda 	(codePtr),y
.3025	95 50		sta $50,x			sta 	esInt1,x
.3027	a9 84		lda #$84			lda 	#LTYLineNumber
.3029	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.302c	a9 0a		lda #$0a			lda 	#10 					; base 10
.302e	20 cd 30	jsr $30cd			jsr 	DTPrintInteger 			; print as integer.
.3031	a0 00		ldy #$00			ldy 	#0 						; get length
.3033	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3035	aa		tax				tax
.3036					_DTPadOut:
.3036	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3038	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.303b	e8		inx				inx
.303c	ec 19 0c	cpx $0c19			cpx 	indent
.303f	d0 f5		bne $3036			bne 	_DTPadOut
.3041	a0 03		ldy #$03			ldy 	#3 						; start position.
.3043					_DTListLoop
.3043	b1 28		lda ($28),y			lda 	(codePtr),y
.3045	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3047	f0 58		beq $30a1			beq 	_DTIsString
.3049	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.304b	f0 7c		beq $30c9			beq 	_DTIsFloat
.304d	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.304f	f0 16		beq $3067			beq 	_DTHexConstant
.3051	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3053	d0 06		bne $305b			bne 	_DTNotEnd
.3055	a9 ff		lda #$ff			lda 	#255 					; print CR
.3057	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.305a	60		rts				rts
.305b					_DTNotEnd:
.305b	c9 00		cmp #$00			cmp 	#0
.305d	30 36		bmi $3095			bmi 	_DTIsToken
.305f	c9 40		cmp #$40			cmp 	#$40
.3061	90 38		bcc $309b			bcc 	_DTIsIdentifier
.3063	a9 0a		lda #$0a			lda 	#10 					; this is the base
.3065	d0 08		bne $306f			bne 	_DTConstant
.3067					_DTHexConstant:
.3067	a9 26		lda #$26			lda 	#"&"
.3069	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.306c	c8		iny				iny
.306d	a9 10		lda #$10			lda 	#16
.306f					_DTConstant:
.306f	48		pha				pha
.3070	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.3072	20 4a 31	jsr $314a			jsr 	DTSwitchMode
.3075	a9 86		lda #$86			lda 	#LTYConstant
.3077	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.307a	a2 02		ldx #$02			ldx 	#2
.307c	8a		txa				txa
.307d	a2 0a		ldx #$0a		ldx	#10
.307f	20 37 2d	jsr $2d37		jsr	mainHandler
.3082	aa		tax				tax
.3083	20 c4 19	jsr $19c4			jsr 	TOSToTemp0
.3086	68		pla				pla
.3087	85 32		sta $32				sta 	tempShort
.3089	98		tya				tya
.308a	48		pha				pha
.308b	a5 32		lda $32				lda 	tempShort
.308d	20 cd 30	jsr $30cd			jsr 	DTPrintInteger
.3090	68		pla				pla
.3091	a8		tay				tay
.3092	4c 43 30	jmp $3043			jmp 	_DTListLoop
.3095					_DTIsToken:
.3095	20 a3 31	jsr $31a3			jsr 	DTDecodeToken
.3098	4c 43 30	jmp $3043			jmp 	_DTListLoop
.309b					_DTIsIdentifier:
.309b	20 5c 31	jsr $315c			jsr 	DTIdentifier
.309e	4c 43 30	jmp $3043			jmp 	_DTListLoop
.30a1					_DTIsString:
.30a1	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.30a3	20 4a 31	jsr $314a			jsr 	DTSwitchMode
.30a6	a9 81		lda #$81			lda 	#LTYString
.30a8	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.30ab	a9 22		lda #$22			lda 	#'"'						; open quote
.30ad	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.30b0	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.30b2	8a		txa				txa
.30b3	a2 0a		ldx #$0a		ldx	#10
.30b5	20 37 2d	jsr $2d37		jsr	mainHandler
.30b8	aa		tax				tax
.30b9	20 c4 19	jsr $19c4			jsr 	TOSToTemp0
.30bc	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.30be	20 df 30	jsr $30df			jsr 	DTPrintLengthPrefix
.30c1	a9 22		lda #$22			lda 	#'"'
.30c3	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.30c6	4c 43 30	jmp $3043			jmp 	_DTListLoop
.30c9					_DTIsFloat:
>30c9	db						.byte 	$DB
.30ca	4c c9 30	jmp $30c9			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1a					tPrintCount:
>0c1a							.fill 	1
.30cd					DTPrintInteger:
.30cd	48		pha				pha
.30ce	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.30d0	85 2a		sta $2a				sta 	temp0
.30d2	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.30d4	85 2b		sta $2b				sta 	1+(temp0)
.30d6	68		pla				pla
.30d7	a8		tay				tay
.30d8	8a		txa				txa
.30d9	a2 0c		ldx #$0c		ldx	#12
.30db	20 37 2d	jsr $2d37		jsr	mainHandler
.30de	aa		tax				tax
.30df					DTPrintLengthPrefix:
.30df	aa		tax				tax
.30e0	98		tya				tya
.30e1	48		pha				pha
.30e2	a0 00		ldy #$00			ldy 	#0
.30e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.30e6	8d 1a 0c	sta $0c1a			sta 	tPrintCount
.30e9	f0 1b		beq $3106			beq 	_DTPLPExit
.30eb					_DTPLPLoop:
.30eb	c8		iny				iny
.30ec	b1 2a		lda ($2a),y			lda 	(temp0),y
.30ee	29 7f		and #$7f			and 	#$7F
.30f0	e0 00		cpx #$00			cpx 	#0
.30f2	f0 0a		beq $30fe			beq 	_DTPLPNoCase
.30f4	c9 41		cmp #$41			cmp 	#"A"
.30f6	90 06		bcc $30fe			bcc 	_DTPLPNoCase
.30f8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.30fa	b0 02		bcs $30fe			bcs 	_DTPLPNoCase
.30fc	49 20		eor #$20			eor 	#"A"^"a"
.30fe					_DTPLPNoCase
.30fe	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.3101	ce 1a 0c	dec $0c1a			dec 	tPrintCount
.3104	d0 e5		bne $30eb			bne 	_DTPLPLoop
.3106					_DTPLPExit:
.3106	68		pla				pla
.3107	a8		tay				tay
.3108	60		rts				rts
.3109					ListOutputCharacter:
.3109	85 32		sta $32				sta 	tempShort
.310b	48		pha				pha
.310c	8a		txa				txa
.310d	48		pha				pha
.310e	98		tya				tya
.310f	48		pha				pha
.3110	a5 32		lda $32				lda 	tempShort
.3112	c9 20		cmp #$20			cmp 	#32
.3114	b0 0c		bcs $3122			bcs		_LOCHiBit
.3116	09 40		ora #$40			ora 	#64
.3118	c9 40		cmp #$40			cmp 	#64
.311a	f0 06		beq $3122			beq 	_LOCHiBit
.311c	c9 5b		cmp #$5b			cmp 	#65+26
.311e	b0 02		bcs $3122			bcs 	_LOCHiBit
.3120	69 20		adc #$20			adc 	#32
.3122					_LOCHiBit:
.3122	20 2b 31	jsr $312b			jsr 	_LOCCallVector
.3125	68		pla				pla
.3126	a8		tay				tay
.3127	68		pla				pla
.3128	aa		tax				tax
.3129	68		pla				pla
.312a					_LOCExit:
.312a	60		rts				rts
.312b					_LOCCallVector:
.312b	6c 16 0c	jmp ($0c16)			jmp 	(deTokeniseVector)
.312e					deTokenPrint:
.312e	c9 00		cmp #$00			cmp 	#0
.3130	30 06		bmi $3138			bmi 	_dtpInk
.3132	a2 16		ldx #$16		ldx	#22
.3134	20 64 11	jsr $1164		jsr	deviceHandler
.3137	60		rts				rts
.3138	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.313a	f0 08		beq $3144			beq 	_dtpCR
.313c	29 07		and #$07			and 	#7
.313e	a2 08		ldx #$08		ldx	#8
.3140	20 64 11	jsr $1164		jsr	deviceHandler
.3143	60		rts				rts
.3144					_dtpCR:
.3144	a2 04		ldx #$04		ldx	#4
.3146	20 64 11	jsr $1164		jsr	deviceHandler
.3149	60		rts				rts
.314a					DTSwitchMode:
.314a	cd 18 0c	cmp $0c18			cmp 	LastCharacterClass
.314d	f0 04		beq $3153			beq 	_DTSMNoChange
.314f	8d 18 0c	sta $0c18			sta 	LastCharacterClass
.3152					_DTSMExit:
.3152	60		rts				rts
.3153					_DTSMNoChange:
.3153	c9 01		cmp #$01			cmp 	#1
.3155	f0 fb		beq $3152			beq 	_DTSMExit
.3157	a9 20		lda #$20			lda 	#" "
.3159	4c 09 31	jmp $3109			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.315c					DTIdentifier:
.315c	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.315e	20 4a 31	jsr $314a			jsr 	DTSwitchMode
.3161	a9 87		lda #$87			lda 	#LTYIdentifier
.3163	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.3166					_DTILoop:
.3166	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3168	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.316a	d0 02		bne $316e			bne 	_DTINotUS
.316c	a9 5f		lda #$5f			lda 	#"_"
.316e					_DTINotUS:
.316e	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.3171	c8		iny				iny
.3172	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3174	c9 3a		cmp #$3a			cmp 	#$3A
.3176	90 ee		bcc $3166			bcc 	_DTILoop
.3178	c8		iny				iny
.3179	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.317b	f0 25		beq $31a2			beq 	_DTIExit 					; no postfix.
.317d	48		pha				pha
.317e	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3180	8d 18 0c	sta $0c18			sta 	LastCharacterClass
.3183	a9 82		lda #$82			lda 	#LTYPunctuation
.3185	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.3188	68		pla				pla
.3189	c9 3b		cmp #$3b			cmp 	#$3B
.318b	f0 10		beq $319d			beq 	_DTIArray
.318d	4a		lsr a				lsr 	a 							; array flag in C
.318e	08		php				php
.318f	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3191	f0 02		beq $3195			beq 	_DTIDollar
.3193	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3195					_DTIDollar:
.3195	49 24		eor #$24			eor 	#"$"
.3197	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.319a	28		plp				plp
.319b	90 05		bcc $31a2			bcc 	_DTIExit
.319d					_DTIArray:
.319d	a9 28		lda #$28			lda 	#"("
.319f	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.31a2					_DTIExit:
.31a2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.31a3					DTDecodeToken:
.31a3	a2 00		ldx #$00			ldx 	#0 							; table number to use
.31a5	b1 28		lda ($28),y			lda 	(codePtr),y
.31a7	c9 84		cmp #$84			cmp 	#$84
.31a9	b0 05		bcs $31b0			bcs 	_DTNotShift
.31ab	29 03		and #$03			and 	#3 							; get the shift 1..3
.31ad	0a		asl a				asl 	a 							; put 2 x in X
.31ae	aa		tax				tax
.31af	c8		iny				iny
.31b0					_DTNotShift:
.31b0	bd b0 34	lda $34b0,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.31b3	85 2a		sta $2a				sta 	temp0 						; point into temp0
.31b5	bd b1 34	lda $34b1,x			lda 	TokenTableAddress+1,x
.31b8	85 2b		sta $2b				sta 	temp0+1
.31ba	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.31bc	c8		iny				iny 								; consume it.
.31bd	aa		tax				tax
.31be	98		tya				tya
.31bf	48		pha				pha
.31c0					_DTFindText:
.31c0	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.31c2	f0 11		beq $31d5			beq 	_DTFoundText
.31c4	ca		dex				dex
.31c5	a0 00		ldy #$00			ldy 	#0
.31c7	38		sec				sec
.31c8	b1 2a		lda ($2a),y			lda 	(temp0),y
.31ca	65 2a		adc $2a				adc 	temp0
.31cc	85 2a		sta $2a				sta 	temp0
.31ce	90 f0		bcc $31c0			bcc 	_DTFindText
.31d0	e6 2b		inc $2b				inc 	temp0+1
.31d2	4c c0 31	jmp $31c0			jmp 	_DTFindText
.31d5					_DTFoundText:
.31d5	a0 01		ldy #$01			ldy 	#1 							; get first character
.31d7	b1 2a		lda ($2a),y			lda 	(temp0),y
.31d9	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.31db	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.31dd	90 11		bcc $31f0			bcc 	_DTIsPunctuation
.31df	c9 5b		cmp #$5b			cmp 	#"Z"+1
.31e1	b0 0d		bcs $31f0			bcs 	_DTIsPunctuation
.31e3	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.31e5	20 4a 31	jsr $314a			jsr 	DTSwitchMode
.31e8	a9 83		lda #$83			lda 	#LTYKeyword
.31ea	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.31ed	4c fa 31	jmp $31fa			jmp 	_DTPrint
.31f0					_DTIsPunctuation:
.31f0	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.31f2	20 4a 31	jsr $314a			jsr 	DTSwitchMode
.31f5	a9 82		lda #$82			lda 	#LTYPunctuation
.31f7	20 09 31	jsr $3109			jsr 	ListOutputCharacter
.31fa					_DTPrint:
.31fa	a9 01		lda #$01			lda 	#1 							; fix case.
.31fc	20 df 30	jsr $30df			jsr 	DTPrintLengthPrefix 		; print it out.
.31ff	a0 00		ldy #$00			ldy 	#0
.3201	b1 2a		lda ($2a),y			lda 	(temp0),y
.3203	a8		tay				tay
.3204	b1 2a		lda ($2a),y			lda 	(temp0),y
.3206	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3208	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.320a	90 04		bcc $3210			bcc 	_DTIsNowPunctuation
.320c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.320e	90 05		bcc $3215			bcc 	_DTPExit
.3210					_DTIsNowPunctuation:
.3210	a9 01		lda #$01			lda 	#1
.3212	8d 18 0c	sta $0c18			sta		LastCharacterClass
.3215					_DTPExit:
.3215	68		pla				pla
.3216	a8		tay				tay
.3217	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c1b					currentSet:
>0c1b							.fill 	1
.3218					TokenSearch:
.3218	8a		txa				txa
.3219	48		pha				pha
.321a	98		tya				tya
.321b	48		pha				pha
.321c	a9 00		lda #$00			lda 	#0
.321e	8d 1b 0c	sta $0c1b			sta 	currentSet
.3221					_TSLoop:
.3221	ad 1b 0c	lda $0c1b			lda 	currentSet 					; 2 x currentset in X
.3224	0a		asl a				asl 	a
.3225	aa		tax				tax
.3226	bd b0 34	lda $34b0,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3229	85 2a		sta $2a				sta 	temp0
.322b	bd b1 34	lda $34b1,x			lda 	TokenTableAddress+1,x
.322e	85 2b		sta $2b				sta 	temp0+1
.3230	20 57 32	jsr $3257			jsr 	TokenSearchOne 				; search one table
.3233	b0 0d		bcs $3242			bcs 	_TSFound 					; found a token.
.3235	ee 1b 0c	inc $0c1b			inc 	currentSet 					; next set
.3238	ad 1b 0c	lda $0c1b			lda 	currentSet
.323b	c9 04		cmp #$04			cmp 	#4
.323d	d0 e2		bne $3221			bne 	_TSLoop 					; back if not done all four.
.323f	18		clc				clc 								; clear carry and exit
.3240	90 10		bcc $3252			bcc 	_TSExit
.3242					_TSFound:
.3242	48		pha				pha 								; save token
.3243	ad 1b 0c	lda $0c1b			lda 	currentSet					; if set zero no shift
.3246	f0 05		beq $324d			beq 	_TSNoShift
.3248	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.324a	20 06 33	jsr $3306			jsr 	TokenWrite
.324d					_TSNoShift:
.324d	68		pla				pla 								; get token back
.324e	20 06 33	jsr $3306			jsr 	TokenWrite 					; write it
.3251	38		sec				sec 								; carry set indicating success
.3252					_TSExit:
.3252	68		pla				pla
.3253	a8		tay				tay
.3254	68		pla				pla
.3255	aa		tax				tax
.3256	60		rts				rts
.3257					TokenSearchOne:
.3257	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3259					_TSOLoop:
.3259	a0 00		ldy #$00			ldy 	#0
.325b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.325d	f0 26		beq $3285			beq 	_TSOFail 					; if zero, end of table
.325f	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3262	f0 11		beq $3275			beq 	_TSOCheckText
.3264					_TSONext:
.3264	e8		inx				inx 								; bump token
.3265	a0 00		ldy #$00			ldy 	#0							; get length
.3267	b1 2a		lda ($2a),y			lda 	(temp0),y
.3269	38		sec				sec
.326a	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.326c	85 2a		sta $2a				sta 	temp0
.326e	90 e9		bcc $3259			bcc 	_TSOLoop
.3270	e6 2b		inc $2b				inc 	temp0+1
.3272	4c 59 32	jmp $3259			jmp 	_TSOLoop
.3275					_TSOCheckText:
.3275	a8		tay				tay 								; compare length downto 1.
.3276					_TSOCheckLoop:
.3276	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3278	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.327b	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.327d	d0 e5		bne $3264			bne 	_TSONext 					; different goto next.
.327f	88		dey				dey 								; do all
.3280	d0 f4		bne $3276			bne 	_TSOCheckLoop
.3282	8a		txa				txa 								; return token in A and carry set
.3283	38		sec				sec
.3284	60		rts				rts
.3285					_TSOFail:
.3285	18		clc				clc
.3286	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3287					TokTest:
.3287	a2 ff		ldx #$ff				ldx 	#$FF
.3289	9a		txs					txs
.328a	a9 a7		lda #$a7			lda 	#(TokenText1) & $FF
.328c	85 28		sta $28				sta 	codePtr
.328e	a9 32		lda #$32			lda 	#(TokenText1) >> 8
.3290	85 29		sta $29				sta 	1+(codePtr)
.3292	20 a7 32	jsr $32a7				jsr 	Tokenise
.3295	a2 00		ldx #$00	TokStop:	ldx 	#0
.3297	bd a7 32	lda $32a7,x	_TokCheck:	lda 	TokenBytes1,x
.329a	dd 1f 0c	cmp $0c1f,x				cmp 	tokenBuffer,x
.329d	d0 fe		bne $329d	_TokFail:	bne 	_TokFail
.329f	e8		inx					inx
.32a0	c9 80		cmp #$80				cmp 	#$80
.32a2	d0 f3		bne $3297				bne 	_TokCheck
.32a4	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.32a7					TokenText1:
.32a7					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c1c					tokenHeader:
>0c1c							.fill 	3
.0c1f					tokenBuffer:
>0c1f							.fill 	256
.0d1f					tokenBufferIndex:
>0d1f							.fill 	1
.32a7					Tokenise:
.32a7	20 1f 33	jsr $331f			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.32aa					TokeniseASCIIZ:
.32aa	20 30 33	jsr $3330			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.32ad	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.32af	8d 1f 0d	sta $0d1f			sta 	tokenBufferIndex
.32b2	a8		tay				tay 								; start pointer
.32b3	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.32b5	8d 1f 0c	sta $0c1f			sta 	tokenBuffer
.32b8					_TokLoop:
.32b8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.32ba	f0 46		beq $3302			beq 	_TokExit 					; if zero, then exit.
.32bc	c8		iny				iny 								; skip over spaces.
.32bd	c9 20		cmp #$20			cmp 	#" "
.32bf	f0 f7		beq $32b8			beq 	_TokLoop
.32c1	88		dey				dey 								; point back to character.
.32c2	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.32c4	f0 18		beq $32de			beq 	_TokHexConst
.32c6	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.32c8	f0 23		beq $32ed			beq 	_TokQString
.32ca	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.32cc	b0 26		bcs $32f4			bcs 	_TokPunctuation
.32ce	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.32d0	b0 29		bcs $32fb			bcs 	_TokIdentifier
.32d2	c9 3a		cmp #$3a			cmp 	#"9"+1
.32d4	b0 1e		bcs $32f4			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.32d6	c9 30		cmp #$30			cmp 	#"0"
.32d8	90 1a		bcc $32f4			bcc 	_TokPunctuation 			; < 0, punctuation.
.32da	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.32dc	d0 08		bne $32e6			bne 	_TokConst
.32de					_TokHexConst:
.32de	c8		iny				iny									; consume token.
.32df	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.32e1	20 06 33	jsr $3306			jsr 	TokenWrite
.32e4	a9 10		lda #$10			lda 	#16
.32e6					_TokConst:
.32e6	20 ee 33	jsr $33ee			jsr 	TokeniseInteger
.32e9	b0 cd		bcs $32b8			bcs 	_TokLoop
.32eb	90 17		bcc $3304			bcc 	_TokFail
.32ed					_TokQString:
.32ed	20 84 34	jsr $3484			jsr 	TokeniseString
.32f0	b0 c6		bcs $32b8			bcs 	_TokLoop
.32f2	90 10		bcc $3304			bcc 	_TokFail
.32f4					_TokPunctuation:
.32f4	20 63 34	jsr $3463			jsr 	TokenisePunctuation
.32f7	b0 bf		bcs $32b8			bcs 	_TokLoop
.32f9	90 09		bcc $3304			bcc 	_TokFail
.32fb					_TokIdentifier:
.32fb	20 5f 33	jsr $335f			jsr 	TokeniseIdentifier
.32fe	b0 b8		bcs $32b8			bcs 	_TokLoop
.3300	90 02		bcc $3304			bcc 	_TokFail
.3302					_TokExit:
.3302	38		sec				sec
.3303	60		rts				rts
.3304					_TokFail:
.3304	18		clc				clc
.3305	60		rts				rts
.3306					TokenWrite:
.3306	85 32		sta $32				sta 	tempShort 					; save XA
.3308	48		pha				pha
.3309	8a		txa				txa
.330a	48		pha				pha
.330b	a5 32		lda $32				lda 	tempShort
.330d	ae 1f 0d	ldx $0d1f			ldx 	tokenBufferIndex 			; geet index
.3310	9d 1f 0c	sta $0c1f,x			sta 	tokenBuffer,x 				; write byte to buffer
.3313	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3315	9d 20 0c	sta $0c20,x			sta 	tokenBuffer+1,x
.3318	ee 1f 0d	inc $0d1f			inc 	tokenBufferIndex 			; bump index
.331b	68		pla				pla
.331c	aa		tax				tax
.331d	68		pla				pla
.331e	60		rts				rts
.331f					TokeniseMakeASCIIZ:
.331f	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3321	b1 28		lda ($28),y			lda 	(codePtr),y
.3323	a8		tay				tay
.3324	c8		iny				iny 								; +1, the NULL goes here.
.3325	a9 00		lda #$00			lda 	#0
.3327	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3329	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.332b	d0 02		bne $332f			bne 	_TMKAExit
.332d	e6 29		inc $29				inc 	codePtr+1
.332f					_TMKAExit:
.332f	60		rts				rts
.3330					TokeniseFixCase:
.3330	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3332	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3334					_TFCFlipQ:
.3334	8a		txa				txa
.3335	49 01		eor #$01			eor 	#1
.3337	aa		tax				tax
.3338					_TFCLoop:
.3338	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.333a	f0 22		beq $335e			beq 	_TFCExit 					; if zero exit.
.333c	c9 20		cmp #$20			cmp 	#32 						; if control
.333e	90 1a		bcc $335a			bcc 	_TFCControl
.3340	c8		iny				iny 								; preconsume
.3341	c9 22		cmp #$22			cmp 	#'"'
.3343	f0 ef		beq $3334			beq 	_TFCFlipQ
.3345	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3347	90 ef		bcc $3338			bcc 	_TFCLoop
.3349	c9 7b		cmp #$7b			cmp 	#"z"+1
.334b	b0 eb		bcs $3338			bcs 	_TFCLoop
.334d	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.334f	d0 e7		bne $3338			bne 	_TFCLoop
.3351	88		dey				dey
.3352	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3354					_TFCWrite:
.3354	91 28		sta ($28),y			sta 	(codePtr),y
.3356	c8		iny				iny
.3357	4c 38 33	jmp $3338			jmp 	_TFCLoop
.335a					_TFCControl:
.335a	a9 20		lda #$20			lda 	#" "
.335c	d0 f6		bne $3354			bne 	_TFCWrite
.335e					_TFCExit:
.335e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.335f					TokeniseIdentifier:
.335f	a2 00		ldx #$00			ldx 	#0
.3361					_TICopyID:
.3361	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3363	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3365	f0 16		beq $337d			beq 	_TICopyUnderscore
.3367	c9 2e		cmp #$2e			cmp 	#"."
.3369	f0 14		beq $337f			beq 	_TICopyIn
.336b	c9 30		cmp #$30			cmp 	#"0"
.336d	90 1b		bcc $338a			bcc 	_TIEndCopy
.336f	c9 3a		cmp #$3a			cmp 	#"9"+1
.3371	90 0c		bcc $337f			bcc 	_TICopyIn
.3373	c9 41		cmp #$41			cmp 	#"A"
.3375	90 13		bcc $338a			bcc 	_TIEndCopy
.3377	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3379	b0 0f		bcs $338a			bcs		_TIEndCopy
.337b	90 02		bcc $337f			bcc 	_TICopyIn
.337d					_TICopyUnderScore:
.337d	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.337f					_TICopyIn:
.337f	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3380	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3383	8e cf 0a	stx $0acf			stx 	convertBuffer
.3386	c8		iny				iny 								; next character
.3387	4c 61 33	jmp $3361			jmp 	_TICopyID 					; loop round
.338a					_TIEndCopy:
.338a	a9 24		lda #$24			lda 	#"$"
.338c	20 e1 33	jsr $33e1			jsr 	TIDCheckCopy
.338f	a9 23		lda #$23			lda 	#"#"
.3391	20 e1 33	jsr $33e1			jsr 	TIDCheckCopy
.3394	a9 28		lda #$28			lda 	#"("
.3396	20 e1 33	jsr $33e1			jsr 	TIDCheckCopy
.3399	20 18 32	jsr $3218			jsr 	TokenSearch 				; is it a token
.339c	b0 41		bcs $33df			bcs 	_TIExit 					; if so, then exit.
.339e	98		tya				tya
.339f	48		pha				pha
.33a0	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.33a2	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.33a5	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.33a8	c9 28		cmp #$28			cmp 	#"("
.33aa	d0 02		bne $33ae			bne 	_TINotArray
.33ac	ca		dex				dex 								; yes, remove it and convert to array.
.33ad	c8		iny				iny
.33ae					_TINotArray:
.33ae	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.33b1	c9 24		cmp #$24			cmp 	#"$"
.33b3	d0 03		bne $33b8			bne 	_TINotString
.33b5	ca		dex				dex
.33b6	c8		iny				iny
.33b7	c8		iny				iny
.33b8					_TINotString:
.33b8	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.33bb	c9 23		cmp #$23			cmp 	#"#"
.33bd	d0 05		bne $33c4			bne 	_TINotFloat
.33bf	ca		dex				dex
.33c0	c8		iny				iny
.33c1	c8		iny				iny
.33c2	c8		iny				iny
.33c3	c8		iny				iny
.33c4					_TINotFloat:
.33c4	e8		inx				inx 								; write end marker for identifier.
.33c5	98		tya				tya
.33c6	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.33c9	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.33cc	a2 01		ldx #$01			ldx 	#1
.33ce					_TIOutput:
.33ce	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.33d1	29 3f		and #$3f			and 	#$3F
.33d3	48		pha				pha
.33d4	20 06 33	jsr $3306			jsr 	TokenWrite
.33d7	e8		inx				inx
.33d8	68		pla				pla
.33d9	c9 3a		cmp #$3a			cmp 	#$3A
.33db	90 f1		bcc $33ce			bcc 	_TIOutput
.33dd	68		pla				pla
.33de	a8		tay				tay
.33df					_TIExit:
.33df	38		sec				sec 								; this can't fail.
.33e0	60		rts				rts
.33e1					TIDCheckCopy:
.33e1	d1 28		cmp ($28),y			cmp 	(codePtr),y
.33e3	d0 08		bne $33ed			bne 	_TIDCCExit
.33e5	e8		inx				inx
.33e6	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.33e9	8e cf 0a	stx $0acf			stx 	convertBuffer
.33ec	c8		iny				iny
.33ed					_TIDCCExit:
.33ed	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.33ee					TokeniseInteger:
.33ee	85 2c		sta $2c				sta 	temp1 						; save base
.33f0	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.33f2	8e cf 0a	stx $0acf			stx 	convertBuffer
.33f5					_TIGetChars:
.33f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.33f7	c9 30		cmp #$30			cmp 	#"0"
.33f9	90 1f		bcc $341a			bcc 	_TIEndGet
.33fb	c9 3a		cmp #$3a			cmp 	#"9"+1
.33fd	90 10		bcc $340f			bcc 	_TIHaveChar
.33ff	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3401	c9 0a		cmp #$0a			cmp 	#10
.3403	f0 15		beq $341a			beq 	_TIEndGet
.3405	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3407	c9 41		cmp #$41			cmp 	#"A"
.3409	90 0f		bcc $341a			bcc 	_TIEndGet
.340b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.340d	b0 0b		bcs $341a			bcs 	_TIEndGet
.340f					_TIHaveChar:
.340f	e8		inx				inx 								; write into buffer.
.3410	8e cf 0a	stx $0acf			stx 	convertBuffer
.3413	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3416	c8		iny				iny 								; next char
.3417	4c f5 33	jmp $33f5			jmp 	_TIGetChars
.341a					_TIEndGet:
.341a	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.341c	f0 1c		beq $343a			beq 	_TIFail
.341e	98		tya				tya
.341f	48		pha				pha
.3420	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3422	85 2a		sta $2a				sta 	temp0
.3424	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3426	85 2b		sta $2b				sta 	1+(temp0)
.3428	a9 00		lda #$00			lda 	#0 							; stack 0
.342a	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.342c	a2 14		ldx #$14		ldx	#20
.342e	20 37 2d	jsr $2d37		jsr	mainHandler
.3431	68		pla				pla
.3432	a8		tay				tay
.3433	90 05		bcc $343a			bcc 	_TIFail 					; didn't convert.
.3435	20 3c 34	jsr $343c			jsr 	TIRecursiveOut 				; recursive output ?
.3438	38		sec				sec
.3439	60		rts				rts
.343a					_TIFail:
.343a	18		clc				clc
.343b	60		rts				rts
.343c					TIRecursiveOut:
.343c	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.343e	29 3f		and #$3f			and 	#$3F
.3440	09 40		ora #$40			ora 	#$40
.3442	48		pha				pha
.3443	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.3445	29 c0		and #$c0			and 	#$C0
.3447	05 50		ora $50				ora 	esInt1
.3449	05 58		ora $58				ora 	esInt2
.344b	05 60		ora $60				ora 	esInt3
.344d	f0 10		beq $345f			beq 	_TIRONoRecursion
.344f	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3451					_TIROShift:
.3451	46 60		lsr $60				lsr 	esInt3
.3453	66 58		ror $58				ror 	esInt2
.3455	66 50		ror $50				ror 	esInt1
.3457	66 48		ror $48				ror 	esInt0
.3459	ca		dex				dex
.345a	d0 f5		bne $3451			bne 	_TIROShift
.345c	20 3c 34	jsr $343c			jsr 	TIRecursiveOut 				; call recursively
.345f					_TIRONoRecursion:
.345f	68		pla				pla 								; pull the old bit.
.3460	4c 06 33	jmp $3306			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3463					TokenisePunctuation:
.3463	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3465	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3468	c8		iny				iny
.3469	b1 28		lda ($28),y			lda 	(codePtr),y
.346b	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.346e	c8		iny				iny 								; Y is +2
.346f	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3471	8d cf 0a	sta $0acf			sta 	convertBuffer
.3474	20 18 32	jsr $3218			jsr 	TokenSearch 				; search for that token.
.3477	b0 0a		bcs $3483			bcs 	_TIFound
.3479	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.347c	88		dey				dey 								; Y is now +1
.347d	20 18 32	jsr $3218			jsr 	TokenSearch 				; search for that token.
.3480	b0 01		bcs $3483			bcs 	_TIFound
.3482	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3483					_TIFound:
.3483	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3484					TokeniseString:
.3484	c8		iny				iny 								; skip opening quote
.3485	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3487	84 2a		sty $2a				sty 	temp0 						; save start.
.3489					_TSGetLength:
.3489	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.348b	f0 21		beq $34ae			beq 	_TSFail						; end of line, fail
.348d	c8		iny				iny
.348e	e8		inx				inx
.348f	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3491	d0 f6		bne $3489			bne 	_TSGetLength
.3493	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3495	20 06 33	jsr $3306			jsr 	TokenWrite
.3498	8a		txa				txa 								; output length
.3499	20 06 33	jsr $3306			jsr 	TokenWrite
.349c	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.349e	e0 00		cpx #$00			cpx 	#0 							; check ended
.34a0	f0 09		beq $34ab			beq 	_TSExit
.34a2					_TSOutput:
.34a2	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.34a4	20 06 33	jsr $3306			jsr 	TokenWrite
.34a7	c8		iny				iny
.34a8	ca		dex				dex
.34a9	d0 f7		bne $34a2			bne 	_TSOutput
.34ab					_TSExit:
.34ab	c8		iny				iny 								; skip ending quote
.34ac	38		sec				sec 								; return CS.
.34ad	60		rts				rts
.34ae					_TSFail:
.34ae	18		clc				clc
.34af	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.34b0					TokenTableAddress:
>34b0	b8 34						.word 	Group0Text
>34b2	81 36						.word 	Group1Text
>34b4	ba 36						.word 	Group2Text
>34b6	cd 36						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.34b8					Group0Text:
>34b8	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>34bc	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>34bf	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>34c3	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>34c6	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>34c9	01 be					.byte $01,$be                          ; $8b >
>34cb	01 bc					.byte $01,$bc                          ; $8c <
>34cd	01 bd					.byte $01,$bd                          ; $8d =
>34cf	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>34d2	01 ab					.byte $01,$ab                          ; $8f +
>34d4	01 ad					.byte $01,$ad                          ; $90 -
>34d6	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>34d9	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>34dc	01 aa					.byte $01,$aa                          ; $93 *
>34de	01 af					.byte $01,$af                          ; $94 /
>34e0	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>34e4	01 de					.byte $01,$de                          ; $96 ^
>34e6	01 a1					.byte $01,$a1                          ; $97 !
>34e8	01 bf					.byte $01,$bf                          ; $98 ?
>34ea	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>34f1	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>34f7	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>34fb	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>34fe	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3506	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>350c	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3511	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3516	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>351b	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3521	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3529	01 a8					.byte $01,$a8                          ; $a4 (
>352b	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3530	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3535	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>353a	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3542	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3547	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>354c	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3552	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3557	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>355c	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3561	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3568	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>356f	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3574	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>357b	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3582	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3588	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>358f	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3595	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>359d	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>35a3	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>35a8	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>35ae	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>35b4	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>35ba	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>35bf	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>35c4	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>35cb	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>35d2	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>35da	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>35e2	01 c0					.byte $01,$c0                          ; $c3 @
>35e4	01 fe					.byte $01,$fe                          ; $c4 ~
>35e6	01 a6					.byte $01,$a6                          ; $c5 &
>35e8	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>35ee	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>35f6	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>35fa	01 a9					.byte $01,$a9                          ; $c9 )
>35fc	01 ba					.byte $01,$ba                          ; $ca :
>35fe	01 ac					.byte $01,$ac                          ; $cb ,
>3600	01 bb					.byte $01,$bb                          ; $cc ;
>3602	01 a7					.byte $01,$a7                          ; $cd '
>3604	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3607	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>360c	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3611	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3617	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>361b	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>361f	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3623	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3629	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>362e	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3632	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3638	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>363d	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3643	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>364a	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>364f	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3656	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>365b	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3660	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3665	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3669	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>366f	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3673	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>367a	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3680	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3681					Group1Text:
>3681	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3687	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>368c	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3691	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3696	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>369a	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>369e	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>36a3	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>36ab	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>36af	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>36b4	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>36b9	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.36ba					Group2Text:
>36ba	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>36c0	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>36c6	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>36cc	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.36cd					Group3Text:
>36cd	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>36d4	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>36db	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.36dc					tokeniserHandler:
.36dc	7c df 36	jmp ($36df,x)			jmp 	(tokeniserVectors,x)
.36df					tokeniserVectors:
>36df	0c 30					.word Detokenise           ; index 0
>36e1	00 30					.word ListLine             ; index 2
>36e3	87 32					.word TokTest              ; index 4
>36e5	a7 32					.word Tokenise             ; index 6
>36e7	aa 32					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.36e9					section_end_tokeniser:
.36e9					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d20					varHash:
>0d20							.fill	1
.0d21					varType:
>0d21							.fill 	1
.0d22					varEnd:
>0d22							.fill 	1
.007c					hashList:
>007c							.fill 	2
.36e9					AccessVariable:
.36e9	aa		tax				tax 								; stack in X
.36ea	c8		iny				iny									; look at second character
.36eb	b1 28		lda ($28),y			lda 	(codePtr),y
.36ed	88		dey				dey
.36ee	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.36f0	d0 15		bne $3707			bne 	_AVLong 					; no, always use the hash tables.
.36f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.36f4	38		sec				sec 	 							; make it 0-25
.36f5	e9 01		sbc #$01			sbc 	#1
.36f7	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.36f8	0a		asl a				asl 	a
.36f9	95 48		sta $48,x			sta 	esInt0,x
.36fb	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.36fd	95 50		sta $50,x			sta 	esInt1,x
.36ff	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3701	95 40		sta $40,x			sta 	esType,x
.3703	c8		iny				iny 								; skip over the variable reference in the code.
.3704	c8		iny				iny  								; (1 letter, 1 type)
.3705	8a		txa				txa 								; stack in A to return.
.3706	60		rts				rts
.3707					_AVLong:
.3707	8a		txa				txa
.3708	48		pha				pha
.3709	20 50 37	jsr $3750			jsr 	AccessSetup 				; set up the basic information we need for later
.370c	20 92 39	jsr $3992			jsr 	FindVariable 				; does the variable exist already ?
.370f	b0 0e		bcs $371f			bcs 	_AVFound 					; yes, then its found
.3711	ad 21 0d	lda $0d21			lda 	varType 					; otherwise, is the variable type an array
.3714	4a		lsr a				lsr 	a
.3715	90 05		bcc $371c			bcc 	_AVCanCreate 				; if not, we can autocreate
.3717	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3719	20 85 11	jsr $1185		jsr	errorHandler
.371c					_AVCanCreate:
.371c	20 05 38	jsr $3805			jsr 	CreateVariable 				; variable does not exist, create it.
.371f					_AVFound:
.371f	68		pla				pla
.3720	aa		tax				tax
.3721	18		clc				clc 								; copy temp0 (variable record address)
.3722	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3724	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3726	95 48		sta $48,x			sta 	esInt0,x
.3728	a5 2b		lda $2b				lda 	temp0+1
.372a	69 00		adc #$00			adc 	#0
.372c	95 50		sta $50,x			sta 	esInt1,x
.372e	a9 00		lda #$00			lda 	#0
.3730	95 58		sta $58,x			sta 	esInt2,x
.3732	95 60		sta $60,x			sta 	esInt3,x
.3734	ac 21 0d	ldy $0d21			ldy 	varType 					; get the type ID from the type.
.3737	b9 10 37	lda $3710,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.373a	95 40		sta $40,x			sta 	esType,x
.373c	ac 22 0d	ldy $0d22			ldy 	varEnd 						; restore Y
.373f	ad 21 0d	lda $0d21			lda 	VarType 					; get variable type, put LSB into C
.3742	4a		lsr a				lsr 	a
.3743	90 03		bcc $3748			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3745	20 8d 37	jsr $378d			jsr 	AccessArray 				; array lookup. if LSB was set.
.3748					_AVNotArray:
.3748	8a		txa				txa 								; return stack in A and return
.3749	60		rts				rts
.374a					_AVTypeTable:
>374a	80 80						.byte 	$80,$80						; integer
>374c	c0 c0						.byte 	$C0,$C0 					; string
>374e	81 81						.byte 	$81,$81 					; float
.3750					AccessSetup:
.3750	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3752	8d 20 0d	sta $0d20			sta 	varHash
.3755	98		tya				tya
.3756	48		pha				pha
.3757	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3759	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.375b	b0 0b		bcs $3768			bcs 	_ASComplete
.375d	18		clc				clc 								; add to the hash. Might improve this.
.375e	6d 20 0d	adc $0d20			adc 	varHash
.3761	8d 20 0d	sta $0d20			sta 	varHash
.3764	c8		iny				iny 								; next character
.3765	4c 57 37	jmp $3757			jmp 	_ASLoop
.3768					_ASComplete:
.3768	8d 21 0d	sta $0d21			sta 	varType 					; save variable type byte
.376b	c8		iny				iny
.376c	8c 22 0d	sty $0d22			sty 	varEnd 						; save the ending position.
.376f	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3770	e9 3a		sbc #$3a			sbc 	#$3A
.3772	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3773	0a		asl a				asl 	a
.3774	0a		asl a				asl 	a
.3775	0a		asl a				asl 	a 							; 2 bytes/word
.3776	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3778	ad 20 0d	lda $0d20			lda 	varHash 					; get hash
.377b	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.377d	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.377e	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3780	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3782	85 7c		sta $7c				sta 	hashList 					; making hashLists point to the head of the link list.
.3784	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3786	69 00		adc #$00			adc 	#0
.3788	85 7d		sta $7d				sta 	hashList+1
.378a	68		pla				pla
.378b	a8		tay				tay
.378c	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.378d					AccessArray:
.378d	e8		inx				inx
.378e	8a		txa				txa
.378f	a2 06		ldx #$06		ldx	#6
.3791	20 37 2d	jsr $2d37		jsr	mainHandler
.3794	48		pha				pha
.3795	a2 00		ldx #$00		ldx	#0
.3797	20 37 2d	jsr $2d37		jsr	mainHandler
.379a	68		pla				pla
.379b	aa		tax				tax
.379c	ca		dex				dex
.379d	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.379f	15 59		ora $59,x			ora 	esInt2+1,x
.37a1	d0 33		bne $37d6			bne 	_AABadIndex
.37a3	98		tya				tya
.37a4	48		pha				pha
.37a5	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.37a7	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.37a9	b5 50		lda $50,x			lda 	esInt1,x
.37ab	85 2b		sta $2b				sta 	temp0+1
.37ad	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.37af	b5 49		lda $49,x			lda 	esInt0+1,x
.37b1	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.37b3	c8		iny				iny
.37b4	b5 51		lda $51,x			lda 	esInt1+1,x
.37b6	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.37b8	b0 1c		bcs $37d6			bcs 	_AABadIndex 				; if >= then fail.
.37ba	e8		inx				inx 								; point to index
.37bb	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.37bd	b1 2a		lda ($2a),y			lda 	(temp0),y
.37bf	20 db 37	jsr $37db			jsr 	MultiplyTOSByA 				; specialist multiplier.
.37c2	ca		dex				dex
.37c3	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.37c5	18		clc				clc
.37c6	b5 49		lda $49,x			lda 	esInt0+1,x
.37c8	71 2a		adc ($2a),y			adc 	(temp0),y
.37ca	95 48		sta $48,x			sta 	esInt0,x
.37cc	b5 51		lda $51,x			lda 	esInt1+1,x
.37ce	c8		iny				iny
.37cf	71 2a		adc ($2a),y			adc 	(temp0),y
.37d1	95 50		sta $50,x			sta 	esInt1,x
.37d3	68		pla				pla
.37d4	a8		tay				tay
.37d5	60		rts				rts
.37d6					_AABadIndex:
.37d6	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.37d8	20 85 11	jsr $1185		jsr	errorHandler
.37db					MultiplyTOSByA:
.37db	48		pha				pha
.37dc	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.37de	85 2c		sta $2c				sta 	temp1
.37e0	b5 50		lda $50,x			lda 	esInt1,x
.37e2	85 2d		sta $2d				sta 	temp1+1
.37e4	68		pla				pla
.37e5	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.37e7	36 50		rol $50,x			rol 	esInt1,x
.37e9	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.37eb	f0 17		beq $3804			beq 	_MTBAExit
.37ed	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.37ef	d0 0f		bne $3800			bne 	_MTBANotFloat
.37f1	48		pha				pha
.37f2	18		clc				clc 								; so this will make it x 3
.37f3	b5 48		lda $48,x			lda 	esInt0,x
.37f5	65 2c		adc $2c				adc 	temp1
.37f7	95 48		sta $48,x			sta 	esInt0,x
.37f9	b5 50		lda $50,x			lda 	esInt1,x
.37fb	65 2d		adc $2d				adc 	temp1+1
.37fd	95 50		sta $50,x			sta 	esInt1,x
.37ff	68		pla				pla
.3800					_MTBANotFloat:
.3800	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3802	36 50		rol $50,x			rol 	esInt1,x
.3804					_MTBAExit:
.3804	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3805					CreateVariable:
.3805	98		tya				tya 								; push Y on the stack twice.
.3806	48		pha				pha									; position in code of the new variable.
.3807	48		pha				pha
.3808	ae 21 0d	ldx $0d21			ldx 	varType 					; get var type 0-5 from the var type
.380b	bd 2f 38	lda $382f,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.380e	48		pha				pha 								; save length
.380f	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3811	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3813	a5 36		lda $36				lda 	lowMemory+1
.3815	85 2b		sta $2b				sta 	temp0+1
.3817	68		pla				pla 								; get length
.3818	18		clc				clc 								; add to low memory.
.3819	65 35		adc $35				adc 	lowMemory
.381b	85 35		sta $35				sta 	lowMemory
.381d	90 08		bcc $3827			bcc 	_CVNoCarry
.381f	e6 36		inc $36				inc 	lowMemory+1
.3821	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3823	c5 34		cmp $34				cmp 	highMemory+1
.3825	b0 3d		bcs $3864			bcs 	_CVMemory
.3827					_CVNoCarry:
.3827	ad 20 0d	lda $0d20			lda 	varHash 					; store hash at offset 4.
.382a	a0 04		ldy #$04			ldy 	#4
.382c	91 2a		sta ($2a),y			sta 	(temp0),y
.382e	68		pla				pla 								; offset, work out where the variable name is.
.382f	18		clc				clc
.3830	65 28		adc $28				adc 	codePtr
.3832	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3834	91 2a		sta ($2a),y			sta 	(temp0),y
.3836	a5 29		lda $29				lda 	codePtr+1
.3838	69 00		adc #$00			adc 	#0
.383a	c8		iny				iny
.383b	91 2a		sta ($2a),y			sta 	(temp0),y
.383d	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3840	b0 03		bcs $3845			bcs 	_CVNotImmediate
.3842	20 a7 38	jsr $38a7			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3845					_CVNotImmediate:
.3845	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3847	b1 7c		lda ($7c),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3849	91 2a		sta ($2a),y			sta 	(temp0),y
.384b	c8		iny				iny
.384c	b1 7c		lda ($7c),y			lda 	(hashList),y
.384e	91 2a		sta ($2a),y			sta 	(temp0),y
.3850	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3852	91 7c		sta ($7c),y			sta 	(hashList),y
.3854	88		dey				dey
.3855	a5 2a		lda $2a				lda 	temp0
.3857	91 7c		sta ($7c),y			sta 	(hashList),y
.3859	ad 21 0d	lda $0d21			lda 	varType 					; type in A
.385c	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.385e	20 6f 38	jsr $386f			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3861	68		pla				pla
.3862	a8		tay				tay
.3863	60		rts				rts
.3864					_CVMemory:
.3864	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3866	20 85 11	jsr $1185		jsr	errorHandler
>3869	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>386b	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>386d	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.386f					ZeroTemp0Y:
.386f	4a		lsr a				lsr 	a 							; bit 0 in carry
.3870	0a		asl a				asl 	a
.3871	b0 19		bcs $388c			bcs 	_ZTExit 					; we don't initialise arrays.
.3873	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3875	f0 16		beq $388d			beq 	_ZTWriteNullString 			; write "" string
.3877	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3879	f0 22		beq $389d			beq 	_ZTWriteFloat
.387b	98		tya				tya
.387c	48		pha				pha
.387d	a9 00		lda #$00			lda 	#0
.387f	91 2a		sta ($2a),y			sta 	(temp0),y
.3881	c8		iny				iny
.3882	91 2a		sta ($2a),y			sta 	(temp0),y
.3884	c8		iny				iny
.3885	91 2a		sta ($2a),y			sta 	(temp0),y
.3887	c8		iny				iny
.3888	91 2a		sta ($2a),y			sta 	(temp0),y
.388a	68		pla				pla
.388b	a8		tay				tay
.388c					_ZTExit:
.388c	60		rts				rts
.388d					_ZTWriteNullString:
.388d	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.388f	8d ce 0a	sta $0ace			sta 	NullString
.3892	a9 ce		lda #$ce			lda 	#NullString & $FF
.3894	91 2a		sta ($2a),y			sta 	(temp0),y
.3896	a9 0a		lda #$0a			lda 	#NullString >> 8
.3898	c8		iny				iny
.3899	91 2a		sta ($2a),y			sta 	(temp0),y
.389b	88		dey				dey
.389c	60		rts				rts
.389d					_ZTWriteFloat:
.389d	8a		txa				txa
.389e	48		pha				pha
.389f	a2 1e		ldx #$1e		ldx	#30
.38a1	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.38a4	68		pla				pla
.38a5	aa		tax				tax
.38a6	60		rts				rts
.38a7					CloneVariableName:
.38a7	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.38a9	b1 2a		lda ($2a),y			lda 	(temp0),y
.38ab	85 2e		sta $2e				sta 	temp2
.38ad	c8		iny				iny
.38ae	b1 2a		lda ($2a),y			lda 	(temp0),y
.38b0	85 2f		sta $2f				sta 	temp2+1
.38b2	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.38b4	91 2a		sta ($2a),y			sta 	(temp0),y
.38b6	88		dey				dey
.38b7	a5 35		lda $35				lda 	lowMemory
.38b9	91 2a		sta ($2a),y			sta 	(temp0),y
.38bb	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.38bd					_CVNCopy:
.38bd	b1 2e		lda ($2e),y			lda		(temp2),y
.38bf	91 35		sta ($35),y			sta 	(lowMemory),y
.38c1	c8		iny				iny
.38c2	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.38c4	90 f7		bcc $38bd			bcc 	_CVNCopy
.38c6	98		tya				tya 								; add Y to low memory
.38c7	18		clc				clc
.38c8	65 35		adc $35				adc 	lowMemory
.38ca	85 35		sta $35				sta 	lowMemory
.38cc	90 02		bcc $38d0			bcc 	_CVNNoCarry
.38ce	e6 36		inc $36				inc 	lowMemory+1
.38d0					_CVNNoCarry:
.38d0	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.38d1					CreateArray:
.38d1	20 50 37	jsr $3750			jsr 	AccessSetup 				; set up the basic stuff.
.38d4	ad 21 0d	lda $0d21			lda 	varType 					; is the variable type an array
.38d7	4a		lsr a				lsr 	a
.38d8	90 3f		bcc $3919			bcc 	_CANotArray 				; no, cause an error.
.38da	20 92 39	jsr $3992			jsr 	FindVariable 				; does the variable exist already
.38dd	b0 35		bcs $3914			bcs 	_CAFound 					; cannot redefine it.
.38df	20 05 38	jsr $3805			jsr 	CreateVariable 				; create the variable entry.
.38e2	ac 22 0d	ldy $0d22			ldy 	varEnd 						; point Y to the end of the variable entry.
.38e5	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.38e7	48		pha				pha
.38e8	a5 2b		lda $2b				lda 	temp0+1
.38ea	48		pha				pha
.38eb	ad 21 0d	lda $0d21			lda 	varType 					; push variable type on the stack.
.38ee	48		pha				pha
.38ef	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.38f1	a2 06		ldx #$06		ldx	#6
.38f3	20 37 2d	jsr $2d37		jsr	mainHandler
.38f6	a2 00		ldx #$00		ldx	#0
.38f8	20 37 2d	jsr $2d37		jsr	mainHandler
.38fb	68		pla				pla 		 						; restore type and position.
.38fc	8d 21 0d	sta $0d21			sta 	varType
.38ff	68		pla				pla
.3900	85 2b		sta $2b				sta 	temp0+1
.3902	68		pla				pla
.3903	85 2a		sta $2a				sta 	temp0
.3905	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3907	29 e0		and #$e0			and 	#$E0
.3909	05 58		ora $58				ora 	esInt2
.390b	05 60		ora $60				ora 	esInt3
.390d	f0 0f		beq $391e			beq 	_CASizeOk
.390f					_CASize:
.390f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3911	20 85 11	jsr $1185		jsr	errorHandler
.3914					_CAFound:
.3914	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3916	20 85 11	jsr $1185		jsr	errorHandler
.3919					_CANotArray:
.3919	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.391b	20 85 11	jsr $1185		jsr	errorHandler
.391e					_CASizeOk:
.391e	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3920	d0 02		bne $3924			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3922	e6 49		inc $49				inc 	esInt0+1
.3924					_CANoCarry:
.3924	98		tya				tya
.3925	48		pha				pha
.3926	a0 05		ldy #$05			ldy 	#5
.3928	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.392a	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.392c	c8		iny				iny
.392d	a5 36		lda $36				lda 	lowMemory+1
.392f	91 2a		sta ($2a),y			sta 	(temp0),y
.3931	c8		iny				iny
.3932	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3934	91 2a		sta ($2a),y			sta 	(temp0),y
.3936	c8		iny				iny
.3937	a5 50		lda $50				lda 	esInt1
.3939	91 2a		sta ($2a),y			sta 	(temp0),y
.393b	c8		iny				iny
.393c	ae 21 0d	ldx $0d21			ldx 	varType 					; get the length per element
.393f	bd 4b 39	lda $394b,x			lda 	_CAActualSize-$3A-1,x
.3942	91 2a		sta ($2a),y			sta 	(temp0),y
.3944	aa		tax				tax 								; save size in X
.3945	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3947	85 2a		sta $2a				sta 	temp0
.3949	a5 36		lda $36				lda 	lowMemory+1
.394b	85 2b		sta $2b				sta 	temp0+1
.394d	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.394f	85 2c		sta $2c				sta 	temp1
.3951	85 2d		sta $2d				sta 	temp1+1
.3953					_CAInitialiseArray:
.3953	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3955	ad 21 0d	lda $0d21			lda 	varType 					; base type of array in A.
.3958	29 fe		and #$fe			and 	#$FE
.395a	20 6f 38	jsr $386f			jsr 	ZeroTemp0Y
.395d	8a		txa				txa 								; add X to temp0, also updating lowMemory
.395e	18		clc				clc
.395f	65 2a		adc $2a				adc 	temp0
.3961	85 2a		sta $2a				sta 	temp0
.3963	85 35		sta $35				sta 	lowMemory
.3965	a5 2b		lda $2b				lda 	temp0+1
.3967	69 00		adc #$00			adc 	#0
.3969	85 2b		sta $2b				sta 	temp0+1
.396b	85 36		sta $36				sta 	lowMemory+1
.396d	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.396f	b0 1c		bcs $398d			bcs 	_CAMemory
.3971	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3973	d0 02		bne $3977			bne 	_CAIANoCarry
.3975	e6 2d		inc $2d				inc 	temp1+1
.3977					_CAIANoCarry:
.3977	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3979	c5 2c		cmp $2c				cmp 	temp1
.397b	d0 d6		bne $3953			bne 	_CAInitialiseArray
.397d	a5 50		lda $50				lda 	esInt1
.397f	c5 2d		cmp $2d				cmp 	temp1+1
.3981	d0 d0		bne $3953			bne 	_CAInitialiseArray
.3983	68		pla				pla
.3984	a8		tay				tay
.3985	60		rts				rts
.3986					_CAActualSize:
>3986	04 00						.byte 	VarISize,0
>3988	02 00						.byte 	VarSSize,0
>398a	06 00						.byte 	VarFSize,0
>398c	db						.byte 	$DB
.398d					_CAMemory:
.398d	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.398f	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3992					FindVariable:
.3992	98		tya				tya
.3993	48		pha				pha
.3994	98		tya				tya 								; point temp2 to the actual name
.3995	18		clc				clc 								; in memory of the variable being created
.3996	65 28		adc $28				adc 	codePtr
.3998	85 2e		sta $2e				sta 	temp2
.399a	a5 29		lda $29				lda 	codePtr+1
.399c	69 00		adc #$00			adc 	#0
.399e	85 2f		sta $2f				sta 	temp2+1
.39a0	a0 00		ldy #$00			ldy 	#0
.39a2	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.39a4	85 2a		sta $2a				sta 	temp0
.39a6	a5 7d		lda $7d				lda 	hashList+1
.39a8	85 2b		sta $2b				sta 	temp0+1
.39aa	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.39ac	b1 2a		lda ($2a),y			lda 	(temp0),y
.39ae	f0 2c		beq $39dc			beq 	_FVFail
.39b0	aa		tax				tax
.39b1	88		dey				dey		 							; get LSB
.39b2	b1 2a		lda ($2a),y			lda 	(temp0),y
.39b4	85 2a		sta $2a				sta 	temp0 						; update pointer.
.39b6	86 2b		stx $2b				stx 	temp0+1
.39b8	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.39ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.39bc	cd 20 0d	cmp $0d20			cmp 	varHash
.39bf	d0 e9		bne $39aa			bne 	_FVNext 					; if not, no point in checking the name.
.39c1	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.39c2	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c4	85 2d		sta $2d				sta 	temp1+1
.39c6	88		dey				dey
.39c7	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c9	85 2c		sta $2c				sta 	temp1
.39cb	a0 00		ldy #$00			ldy 	#0
.39cd					_FVCheck:
.39cd	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.39cf	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.39d1	d0 d7		bne $39aa			bne 	_FVNext		 				; fail if different.
.39d3	c8		iny				iny
.39d4	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.39d6	90 f5		bcc $39cd			bcc 	_FVCheck
.39d8	68		pla				pla
.39d9	a8		tay				tay
.39da	38		sec				sec
.39db	60		rts				rts
.39dc					_FVFail:
.39dc	68		pla				pla
.39dd	a8		tay				tay
.39de	18		clc				clc
.39df	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.39e0					HashTableReset:
.39e0	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.39e2	a9 00		lda #$00			lda 	#0
.39e4					_HTRClear:
.39e4	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.39e7	ca		dex				dex
.39e8	d0 fa		bne $39e4			bne 	_HTRClear
.39ea	60		rts				rts

;******  Return to file: variable/variable.asm

.39eb					variableHandler:
.39eb	7c ee 39	jmp ($39ee,x)			jmp 	(variableVectors,x)
.39ee					variableVectors:
>39ee	e9 36					.word AccessVariable       ; index 0
>39f0	d1 38					.word CreateArray          ; index 2
>39f2	e0 39					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.39f4					section_end_variable:
.39f4					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

>39f4							.align 	256
.3a00					programMemory:
>39ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3a00					section_end_footer:

;******  End of listing
