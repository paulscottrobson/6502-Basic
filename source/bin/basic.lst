
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Sun Mar  7 17:35:14 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a2 04		ldx #$04		ldx	#4
.1005	20 8c 23	jsr $238c		jsr	deviceHandler
.1008	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.100a	8d c8 0a	sta $0ac8			sta 	basePage
.100d	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100f	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1012	a9 00		lda #$00			lda 	#($9800) & $FF
.1014	8d ca 0a	sta $0aca			sta 	endMemory
.1017	a9 98		lda #$98			lda 	#($9800) >> 8
.1019	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.101c	4c d9 14	jmp $14d9			jmp 	Command_Run
.2fe2					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	18 01 00 ca 85 11 54 68			.byte 24,1,0,202,133,17,84,104,105,115,32,105,115,32,97,32,99,111,109,109,101,110,116,128,6,2,0,129,137,128,11,3,0,1,49,58,141,144,65,99,128,9,4,0,24,58,141,144,66,128,16,5,0,3,49,60,141,133,6,83,65,86,69,77,69,128,23,6,0,213,133,5,83,84,65,82,84,200,1,49,58,200,3,49,60,200,24,58,128,11,7,0,205,19,8,15,23,59,198,128,30,8,0,205,4,5,13,15,59,106,200,197,82,77,69,89,120,200,133,8,73,78,68,69,77,79,33,33,198,128,11,9,0,205,19,8,15,23,59,198,128,21,10,0,213,133,3,69,78,68,200,1,49,58,200,3,49,60,200,24,58,128,11,11,0,205,19,8,15,23,59,198,128,33,12,0,3,49,60,141,133,19,120,120,120,120,120,120,120,120,120,120,120,120,120,65,65,65,65,65,65,143,133,1,33,128,14,13,0,213,3,49,60,200,165,3,49,60,198,128,11,14,0,205,19,8,15,23,59,198,128,8,15,0,153,199,158,171,128,21,16,0,157,4,5,13,15,59,1,49,58,200,24,58,200,3,49,60,198,128,11,17,0,205,19,8,15,23,59,198,128,18,18,0,3,49,60,141,3,49,60,143,133,4,33,33,33,33,128,11,19,0,205,19,8,15,23,59,198,128,13,20,0,205,24,15,50,59,133,1,42,198,128,43,21,0,213,133,4,68,69,77,79,200,1,49,58,200,3,1,49,60,200,133,1,36,201,184,24,58,200,80,198,200,133,1,36,184,195,3,49,60,200,80,198,128,5,22,0,163,128,13,23,0,157,24,15,50,59,3,49,60,198,128,14,24,0,213,133,3,88,79,50,201,3,49,60,128,5,25,0,163,128,11,26,0,157,19,8,15,23,59,198,128,11,27,0,1,58,141,195,3,49,60,128,26,28,0,213,133,1,36,201,184,187,1,58,198,200,80,198,200,186,187,1,58,198,144,65,198,128,5,29,0,163,128,28,30,0,24,24,58,24,24,59,68,198,24,24,60,24,24,61,68,198,24,24,62,24,24,63,68,198,128,0
>5008	69 73 20 69 73 20 61 20 63 6f 6d 6d 65 6e 74 80
>5018	06 02 00 81 89 80 0b 03 00 01 31 3a 8d 90 41 63
>5028	80 09 04 00 18 3a 8d 90 42 80 10 05 00 03 31 3c
>5038	8d 85 06 53 41 56 45 4d 45 80 17 06 00 d5 85 05
>5048	53 54 41 52 54 c8 01 31 3a c8 03 31 3c c8 18 3a
>5058	80 0b 07 00 cd 13 08 0f 17 3b c6 80 1e 08 00 cd
>5068	04 05 0d 0f 3b 6a c8 c5 52 4d 45 59 78 c8 85 08
>5078	49 4e 44 45 4d 4f 21 21 c6 80 0b 09 00 cd 13 08
>5088	0f 17 3b c6 80 15 0a 00 d5 85 03 45 4e 44 c8 01
>5098	31 3a c8 03 31 3c c8 18 3a 80 0b 0b 00 cd 13 08
>50a8	0f 17 3b c6 80 21 0c 00 03 31 3c 8d 85 13 78 78
>50b8	78 78 78 78 78 78 78 78 78 78 78 41 41 41 41 41
>50c8	41 8f 85 01 21 80 0e 0d 00 d5 03 31 3c c8 a5 03
>50d8	31 3c c6 80 0b 0e 00 cd 13 08 0f 17 3b c6 80 08
>50e8	0f 00 99 c7 9e ab 80 15 10 00 9d 04 05 0d 0f 3b
>50f8	01 31 3a c8 18 3a c8 03 31 3c c6 80 0b 11 00 cd
>5108	13 08 0f 17 3b c6 80 12 12 00 03 31 3c 8d 03 31
>5118	3c 8f 85 04 21 21 21 21 80 0b 13 00 cd 13 08 0f
>5128	17 3b c6 80 0d 14 00 cd 18 0f 32 3b 85 01 2a c6
>5138	80 2b 15 00 d5 85 04 44 45 4d 4f c8 01 31 3a c8
>5148	03 01 31 3c c8 85 01 24 c9 b8 18 3a c8 50 c6 c8
>5158	85 01 24 b8 c3 03 31 3c c8 50 c6 80 05 16 00 a3
>5168	80 0d 17 00 9d 18 0f 32 3b 03 31 3c c6 80 0e 18
>5178	00 d5 85 03 58 4f 32 c9 03 31 3c 80 05 19 00 a3
>5188	80 0b 1a 00 9d 13 08 0f 17 3b c6 80 0b 1b 00 01
>5198	3a 8d c3 03 31 3c 80 1a 1c 00 d5 85 01 24 c9 b8
>51a8	bb 01 3a c6 c8 50 c6 c8 ba bb 01 3a c6 90 41 c6
>51b8	80 05 1d 00 a3 80 1c 1e 00 18 18 3a 18 18 3b 44
>51c8	c6 18 18 3c 18 18 3d 44 c6 18 18 3e 18 18 3f 44
>51d8	c6 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101f					Command_Assert:
.101f	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 		; what is being asserted.
.1022	20 17 22	jsr $2217			jsr 	MInt32Zero 					; is it true ?
.1025	f0 01		beq $1028			beq 	_CAError
.1027	60		rts				rts
.1028					_CAError:
.1028	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.102a	20 a3 23	jsr $23a3		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.102d					CommandClear:
.102d	98		tya				tya
.102e	48		pha				pha
.102f	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.1032	85 0d		sta $0d				sta 	highMemory
.1034	ad cb 0a	lda $0acb			lda 	endMemory+1
.1037	85 0e		sta $0e				sta 	highMemory+1
.1039	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.103c	85 04		sta $04				sta 	temp0
.103e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1041	85 05		sta $05				sta 	temp0+1
.1043					_CCFindEnd:
.1043	a0 00		ldy #$00			ldy 	#0
.1045	b1 04		lda ($04),y			lda 	(temp0),y
.1047	f0 0c		beq $1055			beq 	_CCFoundEnd 				; offset zero is end.
.1049	18		clc				clc
.104a	65 04		adc $04				adc 	temp0 						; move to next line
.104c	85 04		sta $04				sta 	temp0
.104e	90 f3		bcc $1043			bcc 	_CCFindEnd
.1050	e6 05		inc $05				inc 	temp0+1
.1052	4c 43 10	jmp $1043			jmp 	_CCFindEnd
.1055					_CCFoundEnd:
.1055	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1057	85 0f		sta $0f				sta 	lowMemory
.1059	a5 05		lda $05				lda 	temp0+1
.105b	85 10		sta $10				sta 	lowMemory+1
.105d	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105f	20 73 10	jsr $1073			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1062	20 7d 22	jsr $227d			jsr 	RSReset 					; reset the return stack.
.1065	a2 04		ldx #$04		ldx	#4
.1067	20 d9 2f	jsr $2fd9		jsr	variableHandler
.106a	20 8e 16	jsr $168e			jsr 	ScanProc 					; scan for procedures
.106d	20 9a 14	jsr $149a			jsr 	CommandRestore 				; do a restore
.1070	68		pla				pla
.1071	a8		tay				tay
.1072	60		rts				rts
.1073					AdvanceLowMemoryByte:
.1073	18		clc				clc
.1074	65 0f		adc $0f				adc 	lowMemory
.1076	85 0f		sta $0f				sta 	lowMemory
.1078	90 02		bcc $107c			bcc 	_ALMBExit
.107a	e6 10		inc $10				inc 	lowMemory+1
.107c					_ALMBExit:
.107c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.107d					Command_Dim:
.107d	a2 02		ldx #$02		ldx	#2
.107f	20 d9 2f	jsr $2fd9		jsr	variableHandler
.1082	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.1084	c8		iny				iny
.1085	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1087	f0 f4		beq $107d			beq 	Command_Dim
.1089	88		dey				dey 								; unpick get
.108a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2fe2					Command_FOR:
.2fe2	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2fe4	a2 0b		ldx #$0b			ldx 	#11
.2fe6	20 8b 22	jsr $228b			jsr 	RSClaim
.2fe9	20 78 11	jsr $1178			jsr 	CommandLET 					; do the same as LET.
.2fec	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.2fee	c9 80		cmp #$80			cmp 	#$80
.2ff0	d0 4c		bne $303e			bne 	_CFType
.2ff2	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.2ff4	20 58 22	jsr $2258			jsr 	CheckToken
.2ff7	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2ff9	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger				; get terminal value in stack 1
.2ffc	98		tya				tya
.2ffd	48		pha				pha
.2ffe	a0 04		ldy #$04			ldy 	#4
.3000	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.3002	91 78		sta ($78),y			sta 	(rsPointer),y
.3004	c8		iny				iny
.3005	a5 50		lda $50				lda		esInt1
.3007	91 78		sta ($78),y			sta 	(rsPointer),y
.3009	c8		iny				iny
.300a	a9 01		lda #$01			lda 	#1  						; the default step in 6
.300c	91 78		sta ($78),y			sta 	(rsPointer),y
.300e	c8		iny				iny
.300f	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.3011	91 78		sta ($78),y			sta 	(rsPointer),y
.3013	c8		iny				iny
.3014	a5 51		lda $51				lda		esInt1+1
.3016	91 78		sta ($78),y			sta 	(rsPointer),y
.3018	c8		iny				iny
.3019	a5 59		lda $59				lda		esInt2+1
.301b	91 78		sta ($78),y			sta 	(rsPointer),y
.301d	c8		iny				iny
.301e	a5 61		lda $61				lda		esInt3+1
.3020	91 78		sta ($78),y			sta 	(rsPointer),y
.3022	68		pla				pla
.3023	a8		tay				tay
.3024	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.3026	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.3028	d0 0e		bne $3038			bne 	_CFDone
.302a	c8		iny				iny									; skip over step.
.302b	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger 			; get step
.302e	98		tya				tya
.302f	48		pha				pha
.3030	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.3032	a0 06		ldy #$06			ldy 	#6
.3034	91 78		sta ($78),y			sta 	(rsPointer),y
.3036	68		pla				pla
.3037	a8		tay				tay
.3038					_CFDone:
.3038	a9 01		lda #$01			lda 	#1
.303a	20 b7 22	jsr $22b7			jsr 	RSSavePosition 				; save position.
.303d	60		rts				rts
.303e					_CFType:
.303e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3040	20 a3 23	jsr $23a3		jsr	errorHandler
.3043					Command_NEXT:
.3043	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3045	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.3047	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.3049	f0 05		beq $3050			beq 	_isok
.304b	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.304d	20 a3 23	jsr $23a3		jsr	errorHandler
.3050					_isok:
.3050	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.3052	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.3054	b0 18		bcs $306e			bcs 	_CNNoIndex
.3056	a2 00		ldx #$00			ldx 	#0 							; start on stack
.3058	20 02 1c	jsr $1c02			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.305b	98		tya				tya
.305c	48		pha				pha
.305d	a0 04		ldy #$04			ldy 	#4 							; check same variable
.305f	b1 78		lda ($78),y			lda 	(rsPointer),y
.3061	d5 48		cmp $48,x			cmp 	esInt0,x
.3063	d0 76		bne $30db			bne 	_CNBadIndex
.3065	c8		iny				iny
.3066	b1 78		lda ($78),y			lda 	(rsPointer),y
.3068	d5 50		cmp $50,x			cmp 	esInt1,x
.306a	d0 6f		bne $30db			bne 	_CNBadIndex
.306c	68		pla				pla
.306d	a8		tay				tay
.306e					_CNNoIndex:
.306e	98		tya				tya
.306f	48		pha				pha
.3070	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.3072	b1 78		lda ($78),y			lda 	(rsPointer),y
.3074	85 04		sta $04				sta 	temp0
.3076	c8		iny				iny
.3077	b1 78		lda ($78),y			lda 	(rsPointer),y
.3079	85 05		sta $05				sta 	temp0+1
.307b	c8		iny				iny
.307c	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.307e	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.3080	85 09		sta $09				sta 	temp2+1 					; save for later.
.3082	10 01		bpl $3085			bpl 	_CNSignX
.3084	ca		dex				dex  								; X = $FF
.3085					_CNSignX:
.3085	18		clc				clc 								; add to the LSB
.3086	a0 00		ldy #$00			ldy 	#0
.3088	71 04		adc ($04),y			adc 	(temp0),y
.308a	91 04		sta ($04),y			sta 	(temp0),y
.308c					_CNPropogate:
.308c	c8		iny				iny  								; add the sign extended in X to the rest.
.308d	8a		txa				txa
.308e	71 04		adc ($04),y			adc 	(temp0),y
.3090	91 04		sta ($04),y			sta 	(temp0),y
.3092	c8		iny				iny
.3093	8a		txa				txa
.3094	71 04		adc ($04),y			adc 	(temp0),y
.3096	91 04		sta ($04),y			sta 	(temp0),y
.3098	c8		iny				iny
.3099	8a		txa				txa
.309a	71 04		adc ($04),y			adc 	(temp0),y
.309c	91 04		sta ($04),y			sta 	(temp0),y
.309e	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.309f	a5 78		lda $78				lda 	rsPointer
.30a1	69 07		adc #$07			adc 	#7
.30a3	85 06		sta $06				sta 	temp1
.30a5	a9 00		lda #$00			lda 	#0
.30a7	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.30a9	a8		tay				tay 								; and clear the Y register again.
.30aa	65 79		adc $79				adc 	rsPointer+1
.30ac	85 07		sta $07				sta 	temp1+1
.30ae	38		sec				sec 								; calculate current - limit oring interim values.
.30af	20 e7 30	jsr $30e7			jsr 	_CNCompare
.30b2	20 e7 30	jsr $30e7			jsr 	_CNCompare
.30b5	20 e7 30	jsr $30e7			jsr 	_CNCompare
.30b8	20 e7 30	jsr $30e7			jsr 	_CNCompare
.30bb	50 02		bvc $30bf			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.30bd	49 80		eor #$80			eor 	#$80
.30bf					_CNNoOverflow:
.30bf	a4 09		ldy $09				ldy 	temp2+1						; get step back
.30c1	30 1d		bmi $30e0			bmi 	_CNCheckDownto
.30c3	c9 00		cmp #$00			cmp 	#0
.30c5	30 0c		bmi $30d3			bmi 	_CNLoopRound 				; loop round if < =
.30c7	a5 08		lda $08				lda 	temp2
.30c9	f0 08		beq $30d3			beq 	_CNLoopRound
.30cb					_CNLoopExit:
.30cb	68		pla				pla
.30cc	a8		tay				tay
.30cd	a9 0b		lda #$0b			lda 	#11
.30cf	20 ad 22	jsr $22ad			jsr 	RSFree
.30d2	60		rts				rts
.30d3					_CNLoopRound:
.30d3	68		pla				pla
.30d4	a8		tay				tay
.30d5	a9 01		lda #$01			lda 	#1
.30d7	20 ca 22	jsr $22ca			jsr 	RSLoadPosition				; go back to the loop top
.30da	60		rts				rts
.30db					_CNBadIndex:
.30db	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.30dd	20 a3 23	jsr $23a3		jsr	errorHandler
.30e0					_CNCheckDownto:
.30e0	c9 00		cmp #$00			cmp 	#0
.30e2	10 ef		bpl $30d3			bpl 	_CNLoopRound
.30e4	4c cb 30	jmp $30cb			jmp 	_CNLoopExit
.30e7					_CNCompare:
.30e7	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.30e9	f1 06		sbc ($06),y			sbc 	(temp1),y
.30eb	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.30ed	85 08		sta $08				sta 	temp2
.30ef	c8		iny				iny
.30f0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.108b					CommandIf:
.108b	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 		; if what ?
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1090	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1092	f0 04		beq $1098			beq 	_IfSimple
.1094	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1096	d0 1b		bne $10b3			bne 	_IfComplex
.1098					_IfSimple:
.1098	20 17 22	jsr $2217			jsr 	MInt32Zero					; check if TOS zero
.109b	f0 10		beq $10ad			beq 	_IfEOL 						; go to next line.
.109d	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.109f	c8		iny				iny
.10a0	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.10a2	f0 0c		beq $10b0			beq 	_IfGoto 					; do the Goto code
.10a4	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.10a6	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10a8	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10aa	f0 04		beq $10b0			beq 	_IfGoto
.10ac	60		rts				rts 								; else continue on this line.
.10ad					_IfEOL:
.10ad	4c 02 17	jmp $1702			jmp 	AdvanceNextLine 			; go to next line
.10b0					_IfGoto:
.10b0	4c 77 17	jmp $1777			jmp 	CommandGoto
.10b3					_IfComplex:
.10b3	20 17 22	jsr $2217			jsr 	MInt32Zero 					; is it true ?
.10b6	f0 01		beq $10b9			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10b8	60		rts				rts 								; else continue.
.10b9					_IFSkip:
.10b9	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10bb	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10bd	4c dc 31	jmp $31dc			jmp		ScanForward
.10c0					Command_ELSE:
.10c0	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10c2	8a		txa				txa
.10c3	4c dc 31	jmp $31dc			jmp		ScanForward
.10c6					Command_ENDIF:
.10c6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0af0					InputBuffer:
>0af0							.fill 	MaxInputSize+1
.10c7					Command_Input:
.10c7	b1 02		lda ($02),y			lda 	(codePtr),y 			; see what's next.
.10c9	c8		iny				iny
.10ca	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.10cc	f0 f9		beq $10c7			beq 	Command_Input
.10ce	88		dey				dey 							; undo consume
.10cf	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.10d1	f0 54		beq $1127			beq 	_CIExit 				; : or EOL, exit
.10d3	c9 80		cmp #$80			cmp 	#TOK_EOL
.10d5	f0 50		beq $1127			beq 	_CIExit
.10d7	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.10d9	90 12		bcc $10ed			bcc 	_CIVariable
.10db	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.10dd	d0 43		bne $1122			bne 	_CISyntax
.10df	a2 00		ldx #$00			ldx 	#0
.10e1	20 c4 1b	jsr $1bc4			jsr 	EvaluateString 			; evaluate and print string
.10e4	20 ed 11	jsr $11ed			jsr 	TOSToTemp0
.10e7	20 bc 13	jsr $13bc			jsr 	PrintString
.10ea	4c c7 10	jmp $10c7			jmp 	Command_Input
.10ed					_CIVariable:
.10ed	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.10ef	20 02 1c	jsr $1c02			jsr 	EvaluateReference
.10f2					_CIRetry:
.10f2	a9 3f		lda #$3f			lda 	#"?"
.10f4	a2 0e		ldx #$0e		ldx	#14
.10f6	20 8c 23	jsr $238c		jsr	deviceHandler
.10f9	98		tya				tya
.10fa	48		pha				pha
.10fb	20 3b 11	jsr $113b			jsr 	InputString 			; input a string.
.10fe	a2 01		ldx #$01			ldx 	#1
.1100	20 28 11	jsr $1128			jsr 	BufferToStackX 			; make stack,x ref input string.
.1103	a5 40		lda $40				lda 	esType 					; if target type numeric
.1105	29 40		and #$40			and 	#$40 					; then convert to number
.1107	d0 11		bne $111a			bne 	_CIWrite
.1109	a2 01		ldx #$01			ldx 	#1
.110b	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.110e	a9 0a		lda #$0a			lda 	#10
.1110	20 63 20	jsr $2063			jsr 	MInt32FromString 		; convert it back from a string.
.1113	68		pla				pla
.1114	a8		tay				tay
.1115	b0 03		bcs $111a			bcs 	_CIWrite 				; successfully converted.
.1117	18		clc				clc 							; default fail FP conversion
.1118	90 d8		bcc $10f2			bcc		_CIRetry				; failed, try again.
.111a					_CIWrite:
.111a	a2 00		ldx #$00			ldx 	#0
.111c	20 8b 11	jsr $118b			jsr 	WriteValue
.111f	4c c7 10	jmp $10c7			jmp 	Command_Input
.1122					_CISyntax:
.1122	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1124	20 a3 23	jsr $23a3		jsr	errorHandler
.1127					_CIExit:
.1127	60		rts				rts
.1128					BufferToStackX:
.1128	a9 f0		lda #$f0			lda 	#InputBuffer & $FF
.112a	95 48		sta $48,x			sta 	esInt0,x
.112c	a9 0a		lda #$0a			lda 	#InputBuffer >> 8
.112e	95 50		sta $50,x			sta 	esInt1,x
.1130	a9 00		lda #$00			lda 	#0
.1132	95 58		sta $58,x			sta 	esInt2,x
.1134	95 60		sta $60,x			sta 	esInt3,x
.1136	a9 40		lda #$40			lda 	#$40
.1138	95 40		sta $40,x			sta 	esType,x
.113a	60		rts				rts
.113b					InputString:
.113b	a9 00		lda #$00			lda 	#0
.113d	8d f0 0a	sta $0af0			sta 	InputBuffer
.1140					_InputLoop:
.1140	a2 08		ldx #$08		ldx	#8
.1142	20 8c 23	jsr $238c		jsr	deviceHandler
.1145	c9 00		cmp #$00			cmp 	#0
.1147	f0 f7		beq $1140			beq 	_InputLoop
.1149	c9 08		cmp #$08			cmp 	#8
.114b	f0 19		beq $1166			beq 	_InputBackspace
.114d	c9 0d		cmp #$0d			cmp 	#13
.114f	f0 21		beq $1172			beq 	_InputExit
.1151	ae f0 0a	ldx $0af0			ldx 	InputBuffer
.1154	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1156	f0 e8		beq $1140			beq 	_InputLoop
.1158	9d f1 0a	sta $0af1,x			sta 	InputBuffer+1,x 		; write char
.115b	ee f0 0a	inc $0af0			inc 	InputBuffer 			; advance count.
.115e					_InputPrintLoop:
.115e	a2 0e		ldx #$0e		ldx	#14
.1160	20 8c 23	jsr $238c		jsr	deviceHandler
.1163	4c 40 11	jmp $1140			jmp	 	_InputLoop
.1166					_InputBackspace:
.1166	ad f0 0a	lda $0af0			lda 	InputBuffer 			; at start
.1169	f0 d5		beq $1140			beq 	_InputLoop
.116b	ce f0 0a	dec $0af0			dec 	InputBuffer
.116e	a9 08		lda #$08			lda 	#8
.1170	d0 ec		bne $115e			bne 	_InputPrintLoop
.1172					_InputExit:
.1172	a2 02		ldx #$02		ldx	#2
.1174	20 8c 23	jsr $238c		jsr	deviceHandler
.1177	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1178					CommandLet:
.1178	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.117a	20 02 1c	jsr $1c02			jsr 	EvaluateReference
.117d	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.117f	20 58 22	jsr $2258			jsr 	CheckToken
.1182	e8		inx				inx 								; do RHS
.1183	20 b0 1b	jsr $1bb0			jsr 	Evaluate 					; evaluate and derefernce
.1186	ca		dex				dex
.1187	20 8b 11	jsr $118b			jsr 	WriteValue 					; write it out
.118a	60		rts				rts
.118b					WriteValue:
.118b	98		tya				tya
.118c	48		pha				pha
.118d	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1190	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.1192	55 41		eor $41,x			eor 	esType+1,x
.1194	29 40		and #$40			and 	#$40
.1196	d0 50		bne $11e8			bne		_WVType
.1198	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.119a	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.119c	29 40		and #$40			and 	#$40
.119e	d0 1f		bne $11bf			bne 	_WVCopyString
.11a0	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.11a2	15 41		ora $41,x			ora 	esType+1,x
.11a4	4a		lsr a				lsr 	a
.11a5	90 22		bcc $11c9			bcc 	_WVCopyData4
.11a7	b5 40		lda $40,x			lda 	esType,x
.11a9	4a		lsr a				lsr 	a
.11aa	90 3c		bcc $11e8			bcc 	_WVType
.11ac	e8		inx				inx 								; force the value being written to be a float.
.11ad	20 e9 17	jsr $17e9			jsr 	BPMakeFloat
.11b0	ca		dex				dex
.11b1	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; set Temp0 to write address
.11b4	e8		inx				inx
.11b5	8a		txa				txa
.11b6	a2 20		ldx #$20		ldx	#32
.11b8	20 8b 26	jsr $268b		jsr	floatingpointHandler
.11bb	aa		tax				tax
.11bc	4c e5 11	jmp $11e5			jmp 	_WVCopyExit
.11bf					_WVCopyString:
.11bf	8a		txa				txa
.11c0	a2 0c		ldx #$0c		ldx	#12
.11c2	20 27 29	jsr $2927		jsr	stringHandler
.11c5	aa		tax				tax
.11c6	4c e5 11	jmp $11e5			jmp 	_WVCopyExit
.11c9					_WVCopyData4:
.11c9	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.11cb	29 20		and #$20			and 	#$20
.11cd	d0 10		bne $11df			bne 	_WVCopyData1
.11cf	a0 03		ldy #$03			ldy 	#3
.11d1	b5 61		lda $61,x			lda 	esInt3+1,x
.11d3	91 04		sta ($04),y			sta 	(temp0),y
.11d5	88		dey				dey
.11d6	b5 59		lda $59,x			lda 	esInt2+1,x
.11d8	91 04		sta ($04),y			sta 	(temp0),y
.11da	88		dey				dey
.11db	b5 51		lda $51,x			lda 	esInt1+1,x
.11dd	91 04		sta ($04),y			sta 	(temp0),y
.11df					_WVCopyData1:
.11df	a0 00		ldy #$00			ldy 	#0
.11e1	b5 49		lda $49,x			lda 	esInt0+1,x
.11e3	91 04		sta ($04),y			sta 	(temp0),y
.11e5					_WVCopyExit:
.11e5	68		pla				pla
.11e6	a8		tay				tay
.11e7	60		rts				rts
.11e8					_WVType:
.11e8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.11ea	20 a3 23	jsr $23a3		jsr	errorHandler
.11ed					TOSToTemp0:
.11ed	b5 48		lda $48,x			lda 	esInt0,x
.11ef	85 04		sta $04				sta 	temp0
.11f1	b5 50		lda $50,x			lda 	esInt1,x
.11f3	85 05		sta $05				sta 	temp0+1
.11f5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.30f1					CommandList:
.30f1	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1
.30f3	20 f0 21	jsr $21f0			jsr 	MInt32False
.30f6	e8		inx				inx
.30f7	20 ec 21	jsr $21ec			jsr 	MInt32True
.30fa	b1 02		lda ($02),y			lda 	(codePtr),y
.30fc	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; list ,xxxx
.30fe	f0 4e		beq $314e			beq 	_CLEnd
.3100	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.3102	30 1b		bmi $311f			bmi 	_CLDoListing
.3104	a2 00		ldx #$00			ldx 	#0 							; get start
.3106	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.3109	b1 02		lda ($02),y			lda 	(codePtr),y 				; , follows
.310b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.310d	f0 06		beq $3115			beq 	_CLEndLine
.310f	20 33 21	jsr $2133			jsr 	MInt32CopyUp 				; copy first to second
.3112	4c 1f 31	jmp $311f			jmp 	_CLDoListing
.3115					_CLEndLine:
.3115	c8		iny				iny 								; skip comma
.3116	b1 02		lda ($02),y			lda 	(codePtr),y  				; no number follows.
.3118	30 05		bmi $311f			bmi 	_CLDoListing
.311a	a2 01		ldx #$01			ldx 	#1
.311c	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger				; get end
.311f					_CLDoListing:
.311f	20 33 15	jsr $1533			jsr 	ResetCodeAddress 			; back to the start.
.3122					_CLCheckLoop:
.3122	a0 00		ldy #$00			ldy 	#0							; check end.
.3124	b1 02		lda ($02),y			lda 	(codePtr),y
.3126	f0 26		beq $314e			beq 	_CLEnd
.3128	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.312a	20 51 31	jsr $3151			jsr 	CLCompareLineTOS
.312d	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.312f	f0 0d		beq $313e			beq 	_CLNext
.3131	e8		inx				inx
.3132	20 51 31	jsr $3151			jsr 	CLCompareLineTOS 			; compare vs higher
.3135	c9 01		cmp #$01			cmp 	#1
.3137	f0 05		beq $313e			beq 	_CLNext
.3139	a2 02		ldx #$02		ldx	#2
.313b	20 1e 2d	jsr $2d1e		jsr	tokeniserHandler
.313e					_CLNext:
.313e	a0 00		ldy #$00			ldy 	#0
.3140	b1 02		lda ($02),y			lda 	(codePtr),y
.3142	18		clc				clc
.3143	65 02		adc $02				adc 	codePtr
.3145	85 02		sta $02				sta 	codePtr
.3147	90 d9		bcc $3122			bcc 	_CLCheckLoop
.3149	e6 03		inc $03				inc 	codePtr+1
.314b	4c 22 31	jmp $3122			jmp 	_CLCheckLoop
.314e					_CLEnd:
.314e	4c 4e 31	jmp $314e			jmp 	_CLEnd
.3151					CLCompareLineTOS:
.3151	a0 01		ldy #$01			ldy 	#1
.3153	b1 02		lda ($02),y			lda 	(codePtr),y
.3155	55 48		eor $48,x			eor 	esInt0,x
.3157	85 04		sta $04				sta 	temp0
.3159	c8		iny				iny
.315a	b1 02		lda ($02),y			lda 	(codePtr),y
.315c	55 50		eor $50,x			eor 	esInt1,x
.315e	05 04		ora $04				ora 	temp0
.3160	f0 10		beq $3172			beq 	_CLCLTExit
.3162	88		dey				dey
.3163	b1 02		lda ($02),y			lda 	(codePtr),y
.3165	d5 48		cmp $48,x			cmp 	esInt0,x
.3167	c8		iny				iny
.3168	b1 02		lda ($02),y			lda 	(codePtr),y
.316a	f5 50		sbc $50,x			sbc 	esInt1,x
.316c	a9 ff		lda #$ff			lda 	#255
.316e	90 02		bcc $3172			bcc 	_CLCLTExit
.3170	a9 01		lda #$01			lda 	#1
.3172					_CLCLTExit:
.3172	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0b11					storeSize:
>0b11							.fill 	1
.11f6					CommandLocal:
.11f6	a2 00		ldx #$00			ldx 	#0
.11f8	20 14 12	jsr $1214			jsr 	LocaliseVariable 			; localise one.
.11fb					_CLCheckNext:
.11fb	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.11fd	c8		iny				iny
.11fe	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.1200	f0 06		beq $1208			beq 	_CLAssignment
.1202	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1204	f0 f0		beq $11f6			beq 	CommandLocal
.1206	88		dey				dey
.1207	60		rts				rts
.1208					_CLAssignment:
.1208	a2 01		ldx #$01			ldx 	#1
.120a	20 b0 1b	jsr $1bb0			jsr 	Evaluate 					; evaluate RHS
.120d	ca		dex				dex
.120e	20 8b 11	jsr $118b			jsr 	WriteValue
.1211	4c fb 11	jmp $11fb			jmp 	_CLCheckNext
.1214					LocaliseVariable:
.1214	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1216	c9 40		cmp #$40			cmp 	#$40
.1218	b0 67		bcs $1281			bcs 	_LVSyntax
.121a	8a		txa				txa 								; get the address of that variable.
.121b	a2 00		ldx #$00		ldx	#0
.121d	20 d9 2f	jsr $2fd9		jsr	variableHandler
.1220	aa		tax				tax
.1221	8a		txa				txa
.1222	48		pha				pha
.1223	98		tya				tya
.1224	48		pha				pha
.1225	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1228	b5 40		lda $40,x			lda 	esType,x 					; get the type
.122a	0a		asl a				asl 	a
.122b	10 16		bpl $1243			bpl 	_LVPushNumber
.122d	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.122f	b1 04		lda ($04),y			lda 	(temp0),y
.1231	c8		iny				iny
.1232	85 06		sta $06				sta 	temp1
.1234	b1 04		lda ($04),y			lda 	(temp0),y
.1236	85 07		sta $07				sta 	temp1+1
.1238	a0 00		ldy #$00			ldy 	#0 	 						; get length
.123a	b1 06		lda ($06),y			lda 	(temp1),y
.123c	aa		tax				tax 								; into X
.123d	e8		inx				inx 								; +1 for length.
.123e	a9 24		lda #$24			lda 	#markerString
.1240	4c 58 12	jmp $1258			jmp 	_LVWriteFrame
.1243					_LVPushNumber:
.1243	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1245	85 06		sta $06				sta 	temp1
.1247	a5 05		lda $05				lda 	temp0+1
.1249	85 07		sta $07				sta 	temp1+1
.124b	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.124d	4a		lsr a				lsr 	a
.124e	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1250	a2 04		ldx #$04			ldx 	#VarISize
.1252	90 04		bcc $1258			bcc 	_LVIsInteger
.1254	a9 23		lda #$23			lda 	#markerFloat
.1256	a2 06		ldx #$06			ldx 	#VarFSize
.1258					_LVIsInteger:
.1258					_LVWriteFrame:
.1258	8e 11 0b	stx $0b11			stx 	storeSize 					; number of bytes to copy from (temp0)
.125b	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.125c	e8		inx				inx
.125d	e8		inx				inx
.125e	20 8b 22	jsr $228b			jsr 	RSClaim 					; create the stack frame.
.1261	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.1263	a0 01		ldy #$01			ldy 	#1
.1265	91 78		sta ($78),y			sta 	(rsPointer),y
.1267	c8		iny				iny
.1268	a5 05		lda $05				lda 	temp0+1
.126a	91 78		sta ($78),y			sta 	(rsPointer),y
.126c	a0 00		ldy #$00			ldy 	#0
.126e					_LVCopyData:
.126e	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.1270	c8		iny				iny 								; write allowing for the header bit.
.1271	c8		iny				iny
.1272	c8		iny				iny
.1273	91 78		sta ($78),y			sta 	(rsPointer),y
.1275	88		dey				dey
.1276	88		dey				dey
.1277	ce 11 0b	dec $0b11			dec 	storeSize 					; do it storesize times
.127a	d0 f2		bne $126e			bne 	_LVCopyData
.127c	68		pla				pla
.127d	a8		tay				tay
.127e	68		pla				pla
.127f	aa		tax				tax
.1280	60		rts				rts
.1281					_LVSyntax:
.1281	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1283	20 a3 23	jsr $23a3		jsr	errorHandler
.1286					RestoreLocals:
.1286	a2 00		ldx #$00			ldx 	#0
.1288	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.128a	c9 40		cmp #$40			cmp	 	#64
.128c	90 01		bcc $128f			bcc 	_RLocal
.128e	60		rts				rts
.128f					_RLocal:
.128f	8a		txa				txa
.1290	48		pha				pha
.1291	98		tya				tya
.1292	48		pha				pha
.1293	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1295	b1 78		lda ($78),y			lda 	(rsPointer),y
.1297	85 04		sta $04				sta 	temp0
.1299	c8		iny				iny
.129a	b1 78		lda ($78),y			lda 	(rsPointer),y
.129c	85 05		sta $05				sta 	temp0+1
.129e	a0 00		ldy #$00			ldy 	#0 							; get type back.
.12a0	b1 78		lda ($78),y			lda 	(rsPointer),y
.12a2	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.12a4	f0 28		beq $12ce			beq 	_RString
.12a6	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.12a8	c9 25		cmp #$25			cmp 	#markerInt
.12aa	f0 02		beq $12ae			beq 	_RIsInteger
.12ac	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.12ae					_RIsInteger:
.12ae	8a		txa				txa
.12af	48		pha				pha
.12b0	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.12b2					_RCopyBack:
.12b2	b1 78		lda ($78),y			lda 	(rsPointer),y
.12b4	88		dey				dey
.12b5	88		dey				dey
.12b6	88		dey				dey
.12b7	91 04		sta ($04),y			sta 	(temp0),y
.12b9	c8		iny				iny
.12ba	c8		iny				iny
.12bb	c8		iny				iny
.12bc	c8		iny				iny
.12bd	ca		dex				dex
.12be	d0 f2		bne $12b2			bne 	_RCopyBack
.12c0	68		pla				pla 								; get size add 3
.12c1	18		clc				clc
.12c2	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.12c4					_RRestoreAAndLoop:
.12c4	20 ad 22	jsr $22ad			jsr 	RSFree
.12c7	68		pla				pla
.12c8	a8		tay				tay
.12c9	68		pla				pla
.12ca	aa		tax				tax
.12cb	4c 86 12	jmp $1286			jmp 	RestoreLocals 				; go see if there are any more locals.
.12ce					_RString:
.12ce	a2 00		ldx #$00			ldx 	#0
.12d0	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.12d2	b1 78		lda ($78),y			lda 	(rsPointer),y
.12d4	95 48		sta $48,x			sta 	esInt0,x
.12d6	c8		iny				iny
.12d7	b1 78		lda ($78),y			lda 	(rsPointer),y
.12d9	95 50		sta $50,x			sta 	esInt1,x
.12db	18		clc				clc
.12dc	a5 78		lda $78				lda 	rsPointer
.12de	69 03		adc #$03			adc 	#3
.12e0	95 49		sta $49,x			sta 	esInt0+1,x
.12e2	a5 79		lda $79				lda 	rsPointer+1
.12e4	69 00		adc #$00			adc 	#0
.12e6	95 51		sta $51,x			sta 	esInt1+1,x
.12e8	8a		txa				txa
.12e9	a2 0c		ldx #$0c		ldx	#12
.12eb	20 27 29	jsr $2927		jsr	stringHandler
.12ee	a0 03		ldy #$03			ldy 	#3 							; get string length
.12f0	b1 78		lda ($78),y			lda 	(rsPointer),y
.12f2	18		clc				clc
.12f3	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.12f5	4c c4 12	jmp $12c4			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.12f8					Command_New:
.12f8	20 33 15	jsr $1533			jsr 	ResetCodeAddress 			; point to first line
.12fb	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.12fd	98		tya				tya
.12fe	91 02		sta ($02),y			sta 	(codePtr),y
.1300	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything down.
.1303	4c ff 16	jmp $16ff			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1306					Command_Poke:
.1306	a9 01		lda #$01			lda 	#1
.1308	d0 06		bne $1310			bne 	PokeGeneral
.130a					Command_Doke:
.130a	a9 02		lda #$02			lda 	#2
.130c	d0 02		bne $1310			bne 	PokeGeneral
.130e					Command_Loke:
.130e	a9 03		lda #$03			lda 	#3
.1310					PokeGeneral:
.1310	48		pha				pha 								; save size
.1311	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 		; target address
.1314	20 70 22	jsr $2270			jsr	 	CheckComma
.1317	e8		inx				inx
.1318	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger 			; what value to POKE ?
.131b	ca		dex				dex
.131c	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; temp0 points to the target address
.131f	84 0c		sty $0c				sty 	tempShort 					; save Y
.1321	68		pla				pla 								; get copy type and dispatch
.1322	aa		tax				tax
.1323	ca		dex				dex
.1324	f0 14		beq $133a			beq 	_Poke1
.1326	ca		dex				dex
.1327	f0 0b		beq $1334			beq 	_Poke2
.1329	a0 03		ldy #$03			ldy 	#3
.132b	a5 61		lda $61				lda 	esInt3+1
.132d	91 04		sta ($04),y			sta 	(temp0),y
.132f	88		dey				dey
.1330	a5 59		lda $59				lda 	esInt2+1
.1332	91 04		sta ($04),y			sta 	(temp0),y
.1334					_Poke2:
.1334	a0 01		ldy #$01			ldy 	#1
.1336	a5 51		lda $51				lda 	esInt1+1
.1338	91 04		sta ($04),y			sta 	(temp0),y
.133a					_Poke1:
.133a	a0 00		ldy #$00			ldy 	#0
.133c	a5 49		lda $49				lda 	esInt0+1
.133e	91 04		sta ($04),y			sta 	(temp0),y
.1340	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1342	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0b12					lastPrintToken:
>0b12							.fill 	1
.1343					Command_Print:
.1343	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1345	8d 12 0b	sta $0b12			sta 	lastPrintToken
.1348	88		dey				dey
.1349					_PrintLoopSkip:
.1349	c8		iny				iny
.134a					_PrintLoop:
.134a	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.134c	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.134e	f0 5b		beq $13ab			beq 	_PrintExit
.1350	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.1352	f0 57		beq $13ab			beq 	_PrintExit
.1354	8d 12 0b	sta $0b12			sta 	lastPrintToken 				; update LPT
.1357	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1359	f0 ee		beq $1349			beq 	_PrintLoopSkip
.135b	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.135d	f0 3c		beq $139b			beq	 	_PrintNewLine
.135f	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.1361	f0 40		beq $13a3			beq 	_PrintTab
.1363	20 ae 1b	jsr $1bae			jsr 	EvaluateRoot 				; evaluate something at the root
.1366	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1368	85 04		sta $04				sta 	temp0
.136a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.136c	85 05		sta $05				sta 	1+(temp0)
.136e	a5 40		lda $40				lda 	esType 						; get type
.1370	f0 15		beq $1387			beq		_PrintInteger
.1372	4a		lsr a				lsr 	a 							; check for floating point
.1373	b0 08		bcs $137d			bcs 	_PrintFloat
.1375					_PrintString:
.1375	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1377	20 ed 11	jsr $11ed			jsr 	TOSToTemp0
.137a	4c 95 13	jmp $1395			jmp 	_PrintTemp0 				; print no leading space.
.137d					_PrintFloat:
.137d	a9 00		lda #$00			lda 	#0 							; stack level.
.137f	a2 14		ldx #$14		ldx	#20
.1381	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1384	4c 8e 13	jmp $138e			jmp 	_PrintSpaceTemp0
.1387					_PrintInteger:
.1387	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1389	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.138b	20 46 21	jsr $2146			jsr 	MInt32ToString				; convert to text
.138e					_PrintSpaceTemp0:
.138e	a9 20		lda #$20			lda 	#32
.1390	a2 0e		ldx #$0e		ldx	#14
.1392	20 8c 23	jsr $238c		jsr	deviceHandler
.1395					_PrintTemp0:
.1395	20 bc 13	jsr $13bc			jsr 	PrintString
.1398	4c 4a 13	jmp $134a			jmp 	_PrintLoop
.139b					_PrintNewLine:
.139b	a2 02		ldx #$02		ldx	#2
.139d	20 8c 23	jsr $238c		jsr	deviceHandler
.13a0	4c 49 13	jmp $1349			jmp 	_PrintLoopSkip
.13a3					_PrintTab:
.13a3	a2 10		ldx #$10		ldx	#16
.13a5	20 8c 23	jsr $238c		jsr	deviceHandler
.13a8	4c 49 13	jmp $1349			jmp 	_PrintLoopSkip
.13ab					_PrintExit:
.13ab	ad 12 0b	lda $0b12			lda		lastPrintToken 				; check last token
.13ae	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.13b0	f0 09		beq $13bb			beq 	_PrintExit2
.13b2	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.13b4	f0 05		beq $13bb			beq 	_PrintExit2
.13b6	a2 02		ldx #$02		ldx	#2
.13b8	20 8c 23	jsr $238c		jsr	deviceHandler
.13bb					_PrintExit2:
.13bb	60		rts				rts
.13bc					PrintString:
.13bc	8a		txa				txa
.13bd	48		pha				pha
.13be	98		tya				tya
.13bf	48		pha				pha
.13c0	a0 00		ldy #$00			ldy 	#0							; get length
.13c2	b1 04		lda ($04),y			lda 	(temp0),y
.13c4	aa		tax				tax 								; into X
.13c5	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.13c7	f0 10		beq $13d9			beq 	_PSExit
.13c9	ca		dex				dex
.13ca	8a		txa				txa
.13cb	48		pha				pha
.13cc	c8		iny				iny
.13cd	b1 04		lda ($04),y			lda 	(temp0),y
.13cf	a2 0e		ldx #$0e		ldx	#14
.13d1	20 8c 23	jsr $238c		jsr	deviceHandler
.13d4	68		pla				pla
.13d5	aa		tax				tax
.13d6	4c c5 13	jmp $13c5			jmp 	_PSLoop
.13d9					_PSExit:
.13d9	68		pla				pla
.13da	a8		tay				tay
.13db	68		pla				pla
.13dc	aa		tax				tax
.13dd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0b13					paramCount:
>0b13							.fill 	1
.13de					CallProc:
.13de	20 22 16	jsr $1622			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.13e1	48		pha				pha 								; save length on stack
.13e2	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.13e4	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.13e6	48		pha				pha
.13e7	a5 04		lda $04				lda 	temp0
.13e9	48		pha				pha
.13ea	98		tya				tya 								; calculate Y + length
.13eb	18		clc				clc
.13ec	65 0c		adc $0c				adc 	tempShort
.13ee	a8		tay				tay
.13ef	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.13f1					_CallProcEvalParams:
.13f1	e8		inx				inx
.13f2	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.13f4	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.13f6	f0 0b		beq $1403			beq 	_CPDoneParams
.13f8	20 b0 1b	jsr $1bb0			jsr 	Evaluate 					; evaluate a parameter
.13fb	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.13fd	c8		iny				iny
.13fe	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1400	f0 ef		beq $13f1			beq 	_CallProcEvalParams
.1402	88		dey				dey 								; undo consumption.
.1403					_CPDoneParams:
.1403	20 63 22	jsr $2263			jsr 	CheckRightParen 			; check closing parenthesis.
.1406	8e 13 0b	stx $0b13			stx 	paramCount 					; store parameter count+1
.1409	a2 04		ldx #$04			ldx 	#4							; make space on stack
.140b	a9 50		lda #$50			lda 	#markerPROC
.140d	20 8b 22	jsr $228b			jsr 	RSClaim
.1410	a9 01		lda #$01			lda 	#1 							; store return address.
.1412	20 b7 22	jsr $22b7			jsr 	RSSavePosition
.1415	68		pla				pla 								; get the new code Ptr
.1416	85 02		sta $02				sta 	codePtr
.1418	68		pla				pla
.1419	85 03		sta $03				sta 	codePtr+1
.141b	68		pla				pla 								; length of name + 4 is the param start.
.141c	18		clc				clc
.141d	69 04		adc #$04			adc 	#4
.141f	a8		tay				tay
.1420	a2 ff		ldx #$ff			ldx 	#$FF
.1422					_CPLoadParameters:
.1422	e8		inx				inx 								; point to where the address should be loaded.
.1423	ec 13 0b	cpx $0b13			cpx 	paramCount 					; too many parameters in definition ?
.1426	f0 1e		beq $1446			beq 	_CPParamError
.1428	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.142a	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.142c	f0 0e		beq $143c			beq 	_CPParamComplete 			; done all the parameters
.142e	20 14 12	jsr $1214			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1431	20 8b 11	jsr $118b			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1434	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1436	c8		iny				iny
.1437	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1439	f0 e7		beq $1422			beq 	_CPLoadParameters
.143b	88		dey				dey 								; no, unconsume and check for )
.143c					_CPParamComplete:
.143c	20 63 22	jsr $2263			jsr 	CheckRightParen 			; check )
.143f	e8		inx				inx 								; check right number of parameters
.1440	ec 13 0b	cpx $0b13			cpx 	paramCount
.1443	d0 01		bne $1446			bne 	_CPParamError
.1445	60		rts				rts
.1446					_CPParamError:
.1446	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1448	20 a3 23	jsr $23a3		jsr	errorHandler
.144b					ReturnProc:
.144b	20 86 12	jsr $1286			jsr 	RestoreLocals 				; get the locals back.
.144e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1450	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1452	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1454	f0 05		beq $145b			beq 	_isok
.1456	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1458	20 a3 23	jsr $23a3		jsr	errorHandler
.145b					_isok:
.145b	a9 01		lda #$01			lda 	#1
.145d	20 ca 22	jsr $22ca			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1460	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1462	20 ad 22	jsr $22ad			jsr 	RSFree
.1465	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0b14					dataPtr:
>0b14							.fill 	2
.0b16					dataIndex:
>0b16							.fill 	1
.1466					CommandRead:
.1466	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1468	20 02 1c	jsr $1c02			jsr 	EvaluateReference
.146b	20 ac 14	jsr $14ac			jsr 	SwapDPCP 					; use the data pointer.
.146e	b1 02		lda ($02),y			lda 	(codePtr),y 				; see where it is.
.1470	c8		iny				iny
.1471	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1473	f0 07		beq $147c			beq 	_CRInData
.1475	88		dey				dey
.1476	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1478	aa		tax				tax
.1479	20 dc 31	jsr $31dc			jsr 	ScanForward
.147c					_CRInData:
.147c	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.147e	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1481	ca		dex				dex 								; and write the value.
.1482	20 8b 11	jsr $118b			jsr 	WriteValue
.1485	20 ac 14	jsr $14ac			jsr 	SwapDPCP 					; get the code pointer back.
.1488	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.148a	c8		iny				iny
.148b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.148d	f0 d7		beq $1466			beq 	CommandRead
.148f	88		dey				dey
.1490	60		rts				rts
.1491					CommandData:
.1491	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1493	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.1495	20 dc 31	jsr $31dc			jsr 	ScanForward
.1498	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1499	60		rts				rts
.149a					CommandRestore:
.149a	ad c8 0a	lda $0ac8			lda 	basePage
.149d	8d 14 0b	sta $0b14			sta 	dataPtr
.14a0	ad c9 0a	lda $0ac9			lda 	basePage+1
.14a3	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14a6	a9 03		lda #$03			lda 	#3
.14a8	8d 16 0b	sta $0b16			sta 	dataIndex
.14ab	60		rts				rts
.14ac					SwapDPCP:
.14ac	8a		txa				txa
.14ad	48		pha				pha
.14ae	98		tya				tya 								; swap Y, DataIndex
.14af	ac 16 0b	ldy $0b16			ldy 	DataIndex
.14b2	8d 16 0b	sta $0b16			sta 	DataIndex
.14b5	a5 02		lda $02				lda 	codePtr 					; swap code/dataptr low
.14b7	ae 14 0b	ldx $0b14			ldx 	dataptr
.14ba	8d 14 0b	sta $0b14			sta 	dataPtr
.14bd	86 02		stx $02				stx 	codePtr
.14bf	a5 03		lda $03				lda 	codePtr+1 					; swap code/dataptr high.
.14c1	ae 15 0b	ldx $0b15			ldx 	dataptr+1
.14c4	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14c7	86 03		stx $03				stx 	codePtr+1
.14c9	68		pla				pla
.14ca	aa		tax				tax
.14cb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.14cc					Command_Rem:
.14cc					Command_Rem2:
.14cc	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.14ce	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.14d0	d0 06		bne $14d8			bne 	_CRNotString
.14d2	c8		iny				iny
.14d3	98		tya				tya
.14d4	38		sec				sec
.14d5	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.14d7	a8		tay				tay
.14d8					_CRNotString:
.14d8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.3173					Command_Repeat:
.3173	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.3175	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.3177	20 8b 22	jsr $228b			jsr 	RSClaim
.317a	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.317c	20 b7 22	jsr $22b7			jsr 	RSSavePosition
.317f	60		rts				rts
.3180					Command_Until:
.3180	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3182	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.3184	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.3186	f0 05		beq $318d			beq 	_isok
.3188	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.318a	20 a3 23	jsr $23a3		jsr	errorHandler
.318d					_isok:
.318d	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 		; at the bottom.
.3190	20 17 22	jsr $2217			jsr 	MInt32Zero					; check if TOS zero
.3193	d0 06		bne $319b			bne 	_CUExit
.3195	a9 01		lda #$01			lda 	#1
.3197	20 ca 22	jsr $22ca			jsr 	RSLoadPosition 				; reload the position from offset 1.
.319a	60		rts				rts
.319b					_CUExit:
.319b	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.319d	20 ad 22	jsr $22ad			jsr 	RSFree
.31a0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.14d9					Command_Run:
.14d9	a2 ff		ldx #$ff			ldx 	#$FF
.14db	9a		txs				txs
.14dc	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything.
.14df	20 33 15	jsr $1533			jsr 	ResetCodeAddress 			; back to the start.
.14e2	a0 03		ldy #$03			ldy 	#3
.14e4					CRNextInstruction:
.14e4	64 7b		stz $7b				stz 	softMemAlloc+1
.14e6	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.14e8	10 1c		bpl $1506			bpl 	_CRNotToken
.14ea	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.14ec	b0 0c		bcs $14fa			bcs 	_CRExecute
.14ee	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.14f0	b0 4e		bcs $1540			bcs 	Unimplemented
.14f2	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.14f4	b0 04		bcs $14fa			bcs 	_CRExecute
.14f6	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.14f8	b0 16		bcs $1510			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.14fa					_CRExecute:
.14fa	c8		iny				iny 								; consume it.
.14fb	0a		asl a				asl 	a 							; double it, losing most significant bit.
.14fc	aa		tax				tax
.14fd	20 03 15	jsr $1503			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1500	4c e4 14	jmp $14e4			jmp 	CRNextInstruction
.1503					_CRRunRoutine:
.1503	7c 4a 15	jmp ($154a,x)			jmp 	(Group0Vectors,x)
.1506					_CRNotToken:
.1506	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1508	b0 36		bcs $1540			bcs 	Unimplemented
.150a					_CRDefaultLet:
.150a	20 78 11	jsr $1178			jsr 	CommandLet 					; do the default, LET
.150d	4c e4 14	jmp $14e4			jmp 	CRNextInstruction
.1510					_CRCheckIndirect:
.1510	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1512	f0 f6		beq $150a			beq 	_CRDefaultLet
.1514	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1516	f0 f2		beq $150a			beq 	_CRDefaultLet
.1518	d0 26		bne $1540			bne 	Unimplemented
.151a					CommandShift1:
.151a	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.151c	10 22		bpl $1540			bpl 	Unimplemented 				; we have an error as this should not happen.
.151e	0a		asl a				asl 	a 							; double into X
.151f	aa		tax				tax
.1520	c8		iny				iny 								; advance over it.
.1521	20 27 15	jsr $1527			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1524	4c e4 14	jmp $14e4			jmp 	CRNextInstruction
.1527					_RunIt:
.1527	7c 02 16	jmp ($1602,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.152a					CommandShift2:
.152a	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.152c	20 00 26	jsr $2600		jsr	extensionHandler
.152f	4c e4 14	jmp $14e4			jmp 	CRNextInstruction
.1532					CommandColon:
.1532	60		rts				rts
.1533					ResetCodeAddress:
.1533	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1536	85 02		sta $02				sta 	codePtr
.1538	ad c9 0a	lda $0ac9			lda 	basePage+1
.153b	85 03		sta $03				sta 	codePtr+1
.153d	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.153f	60		rts				rts
.1540					Unimplemented:
.1540	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1542	20 a3 23	jsr $23a3		jsr	errorHandler
.1545					TKErr01:
.1545					TKErr02:
.1545					TKErr03:
.1545					TKErr04:
.1545					TKErr05:
.1545					TKErr06:
.1545					TKErr07:
.1545					TKErr08:
.1545					TKErr09:
.1545					TKErr10:
.1545	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1547	20 a3 23	jsr $23a3		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.154a					Group0Vectors:
>154a	02 17					.word	AdvanceNextLine          ; $80 [[eol]]
>154c	1a 15					.word	CommandShift1            ; $81 [[sh1]]
>154e	2a 15					.word	CommandShift2            ; $82 [[sh2]]
>1550	45 15					.word	TKErr09                  ; $83 [[sh3]]
>1552	45 15					.word	TKErr10                  ; $84 [[fpc]]
>1554	45 15					.word	TKErr08                  ; $85 [[str]]
>1556	8b 18					.word	AndHandler               ; $86 and
>1558	78 18					.word	OrHandler                ; $87 or
>155a	65 18					.word	XorHandler               ; $88 xor
>155c	ad 19					.word	CompareGreaterEq         ; $89 >=
>155e	b7 19					.word	CompareLessEq            ; $8a <=
>1560	99 19					.word	CompareGreater           ; $8b >
>1562	8f 19					.word	CompareLess              ; $8c <
>1564	85 19					.word	CompareEquals            ; $8d =
>1566	a3 19					.word	CompareNotEquals         ; $8e <>
>1568	f6 17					.word	AddHandler               ; $8f +
>156a	19 18					.word	SubHandler               ; $90 -
>156c	b1 18					.word	ShrHandler               ; $91 >>
>156e	9e 18					.word	ShlHandler               ; $92 <<
>1570	2c 18					.word	MulHandler               ; $93 *
>1572	3f 18					.word	DivHandler               ; $94 /
>1574	52 18					.word	ModHandler               ; $95 mod
>1576	ea 18					.word	PowerHandler             ; $96 ^
>1578	c4 18					.word	WordRefHandler           ; $97 !
>157a	d7 18					.word	ByteRefHandler           ; $98 ?
>157c	73 31					.word	Command_Repeat           ; $99 repeat
>157e	a1 31					.word	Command_While            ; $9a while
>1580	e2 2f					.word	Command_FOR              ; $9b for
>1582	8b 10					.word	CommandIf                ; $9c if
>1584	45 15					.word	TKErr04                  ; $9d defproc
>1586	80 31					.word	Command_Until            ; $9e until
>1588	c4 31					.word	Command_Wend             ; $9f wend
>158a	43 30					.word	Command_NEXT             ; $a0 next
>158c	45 15					.word	TKErr06                  ; $a1 then
>158e	c6 10					.word	Command_ENDIF            ; $a2 endif
>1590	4b 14					.word	ReturnProc               ; $a3 endproc
>1592	86 1b					.word	UnaryParenthesis         ; $a4 (
>1594	e4 1c					.word	UnaryLen                 ; $a5 len(
>1596	28 1d					.word	UnarySgn                 ; $a6 sgn(
>1598	11 1d					.word	UnaryAbs                 ; $a7 abs(
>159a	81 1d					.word	Unary_Random             ; $a8 random(
>159c	cb 1d					.word	Unary_Page               ; $a9 page
>159e	ec 21					.word	MInt32True               ; $aa true
>15a0	f0 21					.word	MInt32False              ; $ab false
>15a2	96 1d					.word	Unary_Min                ; $ac min(
>15a4	9a 1d					.word	Unary_Max                ; $ad max(
>15a6	81 1e					.word	UnarySys                 ; $ae sys(
>15a8	44 1e					.word	UnaryTimer               ; $af timer(
>15aa	61 1c					.word	EventFunction            ; $b0 event(
>15ac	6d 1e					.word	UnaryGet                 ; $b1 get(
>15ae	5d 1e					.word	UnaryInkey               ; $b2 inkey(
>15b0	18 1e					.word	UnaryAlloc               ; $b3 alloc(
>15b2	a9 1e					.word	ExecChr                  ; $b4 chr$(
>15b4	d9 1e					.word	ExecLeft                 ; $b5 left$(
>15b6	f6 1e					.word	ExecMid                  ; $b6 mid$(
>15b8	1e 1f					.word	ExecRight                ; $b7 right$(
>15ba	c7 19					.word	Event_Str                ; $b8 str$(
>15bc	f6 19					.word	UnaryVal                 ; $b9 val(
>15be	3f 1d					.word	UnaryPeek                ; $ba peek(
>15c0	45 1d					.word	UnaryDeek                ; $bb deek(
>15c2	4b 1d					.word	UnaryLeek                ; $bc leek(
>15c4	02 1d					.word	UnaryAsc                 ; $bd asc(
>15c6	f6 1d					.word	UnaryIntToFloat          ; $be int(
>15c8	09 1e					.word	UnaryFloatToInt          ; $bf float(
>15ca	f9 19					.word	UnaryIsVal               ; $c0 isval(
>15cc	c0 1e					.word	ExecUpper                ; $c1 upper$(
>15ce	bd 1e					.word	ExecLower                ; $c2 lower$(
>15d0	d9 1d					.word	UnaryReference           ; $c3 @
>15d2	ef 1d					.word	UnaryComplement          ; $c4 ~
>15d4	ec 1d					.word	UnaryHexMarker           ; $c5 &
>15d6	45 15					.word	TKErr01                  ; $c6 )
>15d8	32 15					.word	CommandColon             ; $c7 :
>15da	45 15					.word	TKErr02                  ; $c8 ,
>15dc	45 15					.word	TKErr03                  ; $c9 ;
>15de	cc 14					.word	Command_Rem2             ; $ca '
>15e0	45 15					.word	TKErr07                  ; $cb to
>15e2	45 15					.word	TKErr05                  ; $cc step
>15e4	de 13					.word	CallProc                 ; $cd proc
>15e6	f6 11					.word	CommandLocal             ; $ce local
>15e8	7d 10					.word	Command_Dim              ; $cf dim
>15ea	cc 14					.word	Command_Rem              ; $d0 rem
>15ec	78 11					.word	CommandLet               ; $d1 let
>15ee	c7 10					.word	Command_Input            ; $d2 input
>15f0	c0 10					.word	Command_ELSE             ; $d3 else
>15f2	a9 17					.word	Command_VDU              ; $d4 vdu
>15f4	43 13					.word	Command_Print            ; $d5 print
>15f6	77 17					.word	CommandGOTO              ; $d6 goto
>15f8	4c 17					.word	CommandGOSUB             ; $d7 gosub
>15fa	5f 17					.word	CommandRETURN            ; $d8 return
>15fc	91 14					.word	CommandData              ; $d9 data
>15fe	1f 10					.word	Command_Assert           ; $da assert
>1600	06 13					.word	Command_Poke             ; $db poke
>1602	0a 13					.word	Command_Doke             ; $dc doke
>1604	0e 13					.word	Command_Loke             ; $dd loke
>1606	1c 17					.word	Command_Ink              ; $de ink
>1608	27 17					.word	Command_Paper            ; $df paper
>160a	16 17					.word	Command_CLS              ; $e0 cls
>160c	32 17					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.160e					Group1Vectors:
>160e	2d 10					.word	CommandClear             ; $86 clear
>1610	40 15					.word	Unimplemented            ; $87 load
>1612	40 15					.word	Unimplemented            ; $88 save
>1614	f1 30					.word	CommandList              ; $89 list
>1616	f8 12					.word	Command_New              ; $8a new
>1618	d9 14					.word	Command_Run              ; $8b run
>161a	66 14					.word	CommandRead              ; $8c read
>161c	9a 14					.word	CommandRestore           ; $8d restore
>161e	ff 16					.word	CommandEnd               ; $8e end
>1620	fa 16					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0b17					procList:
>0b17							.fill 	2		 					; terminated by name high.
.0b19					yInLine:
>0b19							.fill 	1
.1622					FindProcedure:
.1622	8c 19 0b	sty $0b19			sty 	yInLine
.1625	20 e0 16	jsr $16e0			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1628	85 06		sta $06				sta 	temp1
.162a	ad 17 0b	lda $0b17			lda		procList 					; put procList address in temp2
.162d	85 08		sta $08				sta 	temp2
.162f	ad 18 0b	lda $0b18			lda 	procList+1
.1632	85 09		sta $09				sta 	temp2+1
.1634	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1636					_FPLoop:
.1636	b1 08		lda ($08),y			lda 	(temp2),y
.1638	f0 4f		beq $1689			beq 	_FPError 					; if so, we don't know this procedure.
.163a	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.163c	c8		iny				iny
.163d	b1 08		lda ($08),y			lda 	(temp2),y
.163f	85 04		sta $04				sta 	temp0
.1641	c8		iny				iny
.1642	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1644	c5 06		cmp $06				cmp 	temp1
.1646	d0 2b		bne $1673			bne 	_FPNext 					; hash is different, go to next.
.1648	38		sec				sec
.1649	ad 19 0b	lda $0b19			lda 	yInLine 					; position in line must be at least 4
.164c	e9 04		sbc #$04			sbc 	#4
.164e	18		clc				clc
.164f	65 02		adc $02				adc 	codePtr
.1651	85 0a		sta $0a				sta 	temp3
.1653	a5 03		lda $03				lda 	codePtr+1
.1655	69 00		adc #$00			adc 	#0
.1657	85 0b		sta $0b				sta 	temp3+1
.1659	98		tya				tya
.165a	48		pha				pha
.165b	a0 04		ldy #$04			ldy 	#4
.165d					_FPCName:
.165d	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.165f	d1 04		cmp ($04),y			cmp 	(temp0),y
.1661	d0 0e		bne $1671			bne 	_FPpulYNext 				; if different go to next one.
.1663	c8		iny				iny
.1664	c9 3a		cmp #$3a			cmp 	#$3A
.1666	90 f5		bcc $165d			bcc 	_FPCName 					; compare the whole lot....
.1668	68		pla				pla 								; throw away the saved Y
.1669	98		tya				tya 								; length of name is Y-4
.166a	38		sec				sec
.166b	e9 04		sbc #$04			sbc 	#4
.166d	ac 19 0b	ldy $0b19			ldy 	yInLine  					; get the original Y back
.1670	60		rts				rts
.1671					_FPpulYNext:
.1671	68		pla				pla
.1672	a8		tay				tay
.1673					_FPNext:
.1673	c8		iny				iny 								; next procedure record.
.1674	10 c0		bpl $1636			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1676	98		tya				tya 								; subtract 128 from Y
.1677	38		sec				sec
.1678	e9 80		sbc #$80			sbc 	#128
.167a	a8		tay				tay
.167b	18		clc				clc 								; add 128 to temp2, so we can have more than
.167c	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.167e	69 80		adc #$80			adc 	#128
.1680	85 08		sta $08				sta 	temp2
.1682	90 b2		bcc $1636			bcc 	_FPLoop
.1684	e6 09		inc $09				inc 	temp2+1
.1686	4c 36 16	jmp $1636			jmp 	_FPLoop
.1689					_FPError:
.1689	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.168b	20 a3 23	jsr $23a3		jsr	errorHandler
.168e					ScanProc:
.168e	98		tya				tya
.168f	48		pha				pha
.1690	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.1692	8d 17 0b	sta $0b17			sta 	procList
.1695	a5 10		lda $10				lda 	lowMemory+1
.1697	8d 18 0b	sta $0b18			sta 	procList+1
.169a	20 33 15	jsr $1533			jsr 	ResetCodeAddress 			; back to the start.
.169d					_ScanLoop:
.169d	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.169f	b1 02		lda ($02),y			lda 	(codePtr),y
.16a1	f0 2a		beq $16cd			beq 	_ScanExit
.16a3	a0 03		ldy #$03			ldy 	#3							; get first token
.16a5	b1 02		lda ($02),y			lda 	(codePtr),y
.16a7	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.16a9	d0 12		bne $16bd			bne 	_ScanNext
.16ab	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.16ad	20 d5 16	jsr $16d5			jsr 	_ScanWrite
.16b0	a5 02		lda $02				lda 	codePtr
.16b2	20 d5 16	jsr $16d5			jsr 	_ScanWrite
.16b5	a0 04		ldy #$04			ldy 	#4 							; start of name part
.16b7	20 e0 16	jsr $16e0			jsr 	CalculateProcedureHash 		; calculate procedure hash
.16ba	20 d5 16	jsr $16d5			jsr 	_ScanWrite
.16bd					_ScanNext:
.16bd	18		clc				clc
.16be	a0 00		ldy #$00			ldy 	#0
.16c0	b1 02		lda ($02),y			lda 	(codePtr),y
.16c2	65 02		adc $02				adc 	codePtr
.16c4	85 02		sta $02				sta 	codePtr
.16c6	90 d5		bcc $169d			bcc 	_ScanLoop
.16c8	e6 03		inc $03				inc 	codePtr+1
.16ca	4c 9d 16	jmp $169d			jmp 	_ScanLoop
.16cd					_ScanExit:
.16cd	a9 00		lda #$00			lda 	#0 							; write ending zero.
.16cf	20 d5 16	jsr $16d5			jsr 	_ScanWrite
.16d2	68		pla				pla
.16d3	a8		tay				tay
.16d4	60		rts				rts
.16d5					_ScanWrite:
.16d5	a0 00		ldy #$00			ldy 	#0
.16d7	91 0f		sta ($0f),y			sta 	(lowMemory),y
.16d9	e6 0f		inc $0f				inc 	lowMemory
.16db	d0 02		bne $16df			bne 	_SWNoCarry
.16dd	e6 10		inc $10				inc 	lowMemory+1
.16df					_SWNoCarry:
.16df	60		rts				rts
.16e0					CalculateProcedureHash:
.16e0	a9 00		lda #$00			lda 	#0 							; clear hash.
.16e2	85 04		sta $04				sta 	temp0
.16e4					_CPHLoop:
.16e4	18		clc				clc 								; add character and rotate and add carry back in
.16e5	b1 02		lda ($02),y			lda 	(codePtr),y
.16e7	65 04		adc $04				adc 	temp0
.16e9	6a		ror a				ror 	a
.16ea	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.16ec	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.16ee	b1 02		lda ($02),y			lda 	(codePtr),y
.16f0	c8		iny				iny 								; advance incase we go round again.
.16f1	c9 3a		cmp #$3a			cmp 	#$3A
.16f3	90 ef		bcc $16e4			bcc 	_CPHLoop
.16f5	a5 04		lda $04				lda 	temp0
.16f7	a9 aa		lda #$aa			lda 	#$AA
.16f9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.16fa					CommandStop:
.16fa	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.16fc	20 a3 23	jsr $23a3		jsr	errorHandler
.16ff					CommandEnd:
.16ff	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1702					AdvanceNextLine:
.1702	a0 00		ldy #$00			ldy 	#0 							; get offset
.1704	b1 02		lda ($02),y			lda 	(codePtr),y
.1706	18		clc				clc 								; add to codePtr
.1707	65 02		adc $02				adc 	codePtr
.1709	85 02		sta $02				sta 	codePtr
.170b	90 02		bcc $170f			bcc 	_ANLNoCarry
.170d	e6 03		inc $03				inc 	codePtr+1
.170f					_ANLNoCarry:
.170f	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1711	f0 ec		beq $16ff			beq 	CommandEnd 					; execute END
.1713	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1715	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1716					Command_CLS:
.1716	a2 00		ldx #$00		ldx	#0
.1718	20 8c 23	jsr $238c		jsr	deviceHandler
.171b	60		rts				rts
.171c					Command_Ink:
.171c	a2 00		ldx #$00			ldx 	#0
.171e	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger
.1721	a2 06		ldx #$06		ldx	#6
.1723	20 8c 23	jsr $238c		jsr	deviceHandler
.1726	60		rts				rts
.1727					Command_Paper:
.1727	a2 00		ldx #$00			ldx 	#0
.1729	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger
.172c	a2 0c		ldx #$0c		ldx	#12
.172e	20 8c 23	jsr $238c		jsr	deviceHandler
.1731	60		rts				rts
.1732					Command_Locate:
.1732	a2 00		ldx #$00			ldx 	#0
.1734	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger
.1737	20 70 22	jsr $2270			jsr 	CheckComma
.173a	e8		inx				inx
.173b	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger
.173e	98		tya				tya
.173f	48		pha				pha
.1740	a4 49		ldy $49				ldy 	esInt0+1
.1742	a5 48		lda $48				lda 	esInt0
.1744	a2 0a		ldx #$0a		ldx	#10
.1746	20 8c 23	jsr $238c		jsr	deviceHandler
.1749	68		pla				pla
.174a	a8		tay				tay
.174b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.174c					CommandGOSUB:
.174c	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.174f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1751	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1753	20 8b 22	jsr $228b			jsr 	RSClaim
.1756	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1758	20 b7 22	jsr $22b7			jsr 	RSSavePosition
.175b	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.175d	f0 1b		beq $177a			beq 	GotoTOS 					; and do a GOTO there.
.175f					CommandRETURN:
.175f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1761	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1763	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1765	f0 05		beq $176c			beq 	_isok
.1767	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1769	20 a3 23	jsr $23a3		jsr	errorHandler
.176c					_isok:
.176c	a9 01		lda #$01			lda 	#1
.176e	20 ca 22	jsr $22ca			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1771	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1773	20 ad 22	jsr $22ad			jsr 	RSFree
.1776	60		rts				rts
.1777					CommandGOTO:
.1777	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.177a					GotoTOS:
.177a	20 33 15	jsr $1533			jsr 	ResetCodeAddress 			; simple search.
.177d					_GotoSearch:
.177d	a0 00		ldy #$00			ldy 	#0 							; get offset
.177f	b1 02		lda ($02),y			lda 	(codePtr),y
.1781	f0 21		beq $17a4			beq 	_GotoError 					; not found.
.1783	c8		iny				iny									; check LSB match
.1784	b1 02		lda ($02),y			lda 	(codePtr),y
.1786	d5 48		cmp $48,x			cmp 	esInt0,x
.1788	d0 07		bne $1791			bne 	_GotoNext
.178a	c8		iny				iny
.178b	b1 02		lda ($02),y			lda 	(codePtr),y
.178d	d5 50		cmp $50,x			cmp 	esInt1,x
.178f	f0 10		beq $17a1			beq 	_GotoFound
.1791					_GotoNext:
.1791	a0 00		ldy #$00			ldy 	#0 							; go next line
.1793	b1 02		lda ($02),y			lda 	(codePtr),y
.1795	18		clc				clc
.1796	65 02		adc $02				adc 	codePtr
.1798	85 02		sta $02				sta 	codePtr
.179a	90 e1		bcc $177d			bcc 	_GotoSearch
.179c	e6 03		inc $03				inc 	codePtr+1
.179e	4c 7d 17	jmp $177d			jmp 	_GotoSearch
.17a1					_GotoFound:
.17a1	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.17a3	60		rts				rts
.17a4					_GotoError:
.17a4	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.17a6	20 a3 23	jsr $23a3		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.17a9					Command_VDU:
.17a9	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 			; get integer at root.
.17ac	a5 48		lda $48				lda 	esInt0
.17ae	a2 0e		ldx #$0e		ldx	#14
.17b0	20 8c 23	jsr $238c		jsr	deviceHandler
.17b3					_CVNext:
.17b3	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.17b5	c8		iny				iny
.17b6	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.17b8	f0 ef		beq $17a9			beq 	Command_VDU
.17ba	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.17bc	d0 0a		bne $17c8			bne 	_CVExit
.17be	a5 50		lda $50				lda 	esInt1
.17c0	a2 0e		ldx #$0e		ldx	#14
.17c2	20 8c 23	jsr $238c		jsr	deviceHandler
.17c5	4c b3 17	jmp $17b3			jmp 	_CVNext
.17c8	88		dey		_CVExit:dey
.17c9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.31a1					Command_While:
.31a1	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.31a3	a2 04		ldx #$04			ldx 	#4
.31a5	20 8b 22	jsr $228b			jsr 	RSClaim 					; create on stack.
.31a8	88		dey				dey
.31a9	a9 01		lda #$01			lda 	#1
.31ab	20 b7 22	jsr $22b7			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.31ae	c8		iny				iny
.31af	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger				; get the conditional
.31b2	20 17 22	jsr $2217			jsr 	MInt32Zero 	 				; if zero, skip forward.
.31b5	f0 01		beq $31b8			beq 	_CWFail
.31b7	60		rts				rts
.31b8					_CWFail:
.31b8	a9 04		lda #$04			lda 	#4
.31ba	20 ad 22	jsr $22ad			jsr 	RSFree 						; close the just opened position.
.31bd	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.31bf	aa		tax				tax
.31c0	20 dc 31	jsr $31dc			jsr 	ScanForward
.31c3	60		rts				rts
.31c4					Command_Wend:
.31c4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.31c6	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.31c8	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.31ca	f0 05		beq $31d1			beq 	_isok
.31cc	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.31ce	20 a3 23	jsr $23a3		jsr	errorHandler
.31d1					_isok:
.31d1	a9 01		lda #$01			lda 	#1
.31d3	20 ca 22	jsr $22ca			jsr 	RSLoadPosition				; go back until true
.31d6	a9 04		lda #$04			lda 	#4
.31d8	20 ad 22	jsr $22ad			jsr 	RSFree 						; close the loop
.31db	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.17ca					BinaryProcess:
.17ca	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.17cc	15 41		ora $41,x			ora 	esType+1,x
.17ce	0a		asl a				asl 	a
.17cf	30 0e		bmi $17df			bmi 	_BPStringType 				; if one is set, then string type.
.17d1	18		clc				clc 								; return CC for integer
.17d2	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.17d4	f0 08		beq $17de			beq 	_BPExit 					; if both integer then return with CC.
.17d6	20 e4 17	jsr $17e4			jsr 	BPMakeBothFloat 			; make both float
.17d9	a9 01		lda #$01			lda 	#$01 						; set result type to float
.17db	95 40		sta $40,x			sta 	esType,x
.17dd	38		sec				sec 								; and return with carry set.
.17de					_BPExit:
.17de	60		rts				rts
.17df					_BPStringType:
.17df	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.17e1	20 a3 23	jsr $23a3		jsr	errorHandler
.17e4					BPMakeBothFloat:
.17e4	e8		inx				inx
.17e5	20 e9 17	jsr $17e9			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.17e8	ca		dex				dex
.17e9					BPMakeFloat:
.17e9	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.17eb	4a		lsr a				lsr 	a
.17ec	b0 07		bcs $17f5			bcs 	_BPIsFloat
.17ee	8a		txa				txa
.17ef	a2 1a		ldx #$1a		ldx	#26
.17f1	20 8b 26	jsr $268b		jsr	floatingpointHandler
.17f4	aa		tax				tax
.17f5					_BPIsFloat:
.17f5	60		rts				rts
.17f6					AddHandler:
.17f6	20 45 1a	jsr $1a45			jsr 	DereferenceTwo 				; dereference top two on stack.
.17f9	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.17fb	35 41		and $41,x			and 	esType+1,x
.17fd	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.17ff	d0 10		bne $1811			bne 	_AHStringConcat				; concatenate strings.
.1801	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.1804	b0 03		bcs $1809			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1806	4c d9 20	jmp $20d9			jmp 	MInt32Add 							; else do it as integer.
.1809					_IsFPOperation:
.1809	8a		txa				txa 								; call the relevant fp routine
.180a	a2 02		ldx #$02		ldx	#2
.180c	20 8b 26	jsr $268b		jsr	floatingpointHandler
.180f	aa		tax				tax
.1810	60		rts				rts
.1811					_AHStringConcat:
.1811	8a		txa				txa
.1812	a2 04		ldx #$04		ldx	#4
.1814	20 27 29	jsr $2927		jsr	stringHandler
.1817	aa		tax				tax
.1818	60		rts				rts
.1819					SubHandler:
.1819	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.181c	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.181f	b0 03		bcs $1824			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1821	4c f3 20	jmp $20f3			jmp 	MInt32Sub 							; else do it as integer.
.1824					_IsFPOperation:
.1824	8a		txa				txa 								; call the relevant fp routine
.1825	a2 10		ldx #$10		ldx	#16
.1827	20 8b 26	jsr $268b		jsr	floatingpointHandler
.182a	aa		tax				tax
.182b	60		rts				rts
.182c					MulHandler:
.182c	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.182f	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.1832	b0 03		bcs $1837			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1834	4c 0d 21	jmp $210d			jmp 	MInt32Multiply 							; else do it as integer.
.1837					_IsFPOperation:
.1837	8a		txa				txa 								; call the relevant fp routine
.1838	a2 0a		ldx #$0a		ldx	#10
.183a	20 8b 26	jsr $268b		jsr	floatingpointHandler
.183d	aa		tax				tax
.183e	60		rts				rts
.183f					DivHandler:
.183f	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.1842	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.1845	b0 03		bcs $184a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1847	4c d1 1f	jmp $1fd1			jmp 	MInt32SDivide 							; else do it as integer.
.184a					_IsFPOperation:
.184a	8a		txa				txa 								; call the relevant fp routine
.184b	a2 06		ldx #$06		ldx	#6
.184d	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1850	aa		tax				tax
.1851	60		rts				rts
.1852					ModHandler:
.1852	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.1855	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.1858	b0 03		bcs $185d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.185a	4c 4f 20	jmp $204f			jmp 	MInt32Modulus 							; else do it as integer.
.185d					_IsFPOperation:
.185d	8a		txa				txa 								; call the relevant fp routine
.185e	a2 08		ldx #$08		ldx	#8
.1860	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1863	aa		tax				tax
.1864	60		rts				rts
.1865					XorHandler:
.1865	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.1868	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.186b	b0 03		bcs $1870			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.186d	4c 83 1f	jmp $1f83			jmp 	MInt32Xor 							; else do it as integer.
.1870					_IsFPOperation:
.1870	8a		txa				txa 								; call the relevant fp routine
.1871	a2 08		ldx #$08		ldx	#8
.1873	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1876	aa		tax				tax
.1877	60		rts				rts
.1878					OrHandler:
.1878	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.187b	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.187e	b0 03		bcs $1883			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1880	4c 6a 1f	jmp $1f6a			jmp 	MInt32Or 							; else do it as integer.
.1883					_IsFPOperation:
.1883	8a		txa				txa 								; call the relevant fp routine
.1884	a2 08		ldx #$08		ldx	#8
.1886	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1889	aa		tax				tax
.188a	60		rts				rts
.188b					AndHandler:
.188b	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.188e	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.1891	b0 03		bcs $1896			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1893	4c 51 1f	jmp $1f51			jmp 	MInt32And 							; else do it as integer.
.1896					_IsFPOperation:
.1896	8a		txa				txa 								; call the relevant fp routine
.1897	a2 08		ldx #$08		ldx	#8
.1899	20 8b 26	jsr $268b		jsr	floatingpointHandler
.189c	aa		tax				tax
.189d	60		rts				rts
.189e					ShlHandler:
.189e	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.18a1	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.18a4	b0 03		bcs $18a9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18a6	4c 1f 19	jmp $191f			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.18a9					_IsFPOperation:
.18a9	8a		txa				txa 								; call the relevant fp routine
.18aa	a2 08		ldx #$08		ldx	#8
.18ac	20 8b 26	jsr $268b		jsr	floatingpointHandler
.18af	aa		tax				tax
.18b0	60		rts				rts
.18b1					ShrHandler:
.18b1	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.18b4	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.18b7	b0 03		bcs $18bc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18b9	4c 22 19	jmp $1922			jmp 	MInt32ShiftRightX 							; else do it as integer.
.18bc					_IsFPOperation:
.18bc	8a		txa				txa 								; call the relevant fp routine
.18bd	a2 08		ldx #$08		ldx	#8
.18bf	20 8b 26	jsr $268b		jsr	floatingpointHandler
.18c2	aa		tax				tax
.18c3	60		rts				rts
.18c4					WordRefHandler:
.18c4	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.18c7	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.18ca	b0 03		bcs $18cf			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18cc	4c 11 19	jmp $1911			jmp 	MInt32WordIndirect 							; else do it as integer.
.18cf					_IsFPOperation:
.18cf	8a		txa				txa 								; call the relevant fp routine
.18d0	a2 08		ldx #$08		ldx	#8
.18d2	20 8b 26	jsr $268b		jsr	floatingpointHandler
.18d5	aa		tax				tax
.18d6	60		rts				rts
.18d7					ByteRefHandler:
.18d7	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.18da	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.18dd	b0 03		bcs $18e2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18df	4c 15 19	jmp $1915			jmp 	MInt32ByteIndirect 							; else do it as integer.
.18e2					_IsFPOperation:
.18e2	8a		txa				txa 								; call the relevant fp routine
.18e3	a2 08		ldx #$08		ldx	#8
.18e5	20 8b 26	jsr $268b		jsr	floatingpointHandler
.18e8	aa		tax				tax
.18e9	60		rts				rts
.18ea					PowerHandler:
.18ea	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.18ed	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.18f0	b0 03		bcs $18f5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18f2	4c fd 18	jmp $18fd			jmp 	PowerInteger 							; else do it as integer.
.18f5					_IsFPOperation:
.18f5	8a		txa				txa 								; call the relevant fp routine
.18f6	a2 16		ldx #$16		ldx	#22
.18f8	20 8b 26	jsr $268b		jsr	floatingpointHandler
.18fb	aa		tax				tax
.18fc	60		rts				rts
.18fd					PowerInteger:
.18fd	20 e4 17	jsr $17e4			jsr 	BPMakeBothFloat				; make them float.
.1900	8a		txa				txa
.1901	a2 16		ldx #$16		ldx	#22
.1903	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1906	a2 12		ldx #$12		ldx	#18
.1908	20 8b 26	jsr $268b		jsr	floatingpointHandler
.190b	aa		tax				tax
.190c	a9 00		lda #$00			lda 	#0 							; make type integer
.190e	95 40		sta $40,x			sta 	esType,x
.1910	60		rts				rts
.1911					Mint32WordIndirect:
.1911	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1913	d0 02		bne $1917			bne 	Min32Indirect
.1915					Mint32ByteIndirect:
.1915	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1917					Min32Indirect:
.1917	48		pha				pha 								; save the indirection
.1918	20 d9 20	jsr $20d9			jsr 	MInt32Add 					; add a!b a?b
.191b	68		pla				pla 								; and set the type to reference.
.191c	95 40		sta $40,x			sta 	esType,x
.191e	60		rts				rts
.191f					Mint32ShiftLeftX:
.191f	18		clc				clc
.1920	90 01		bcc $1923			bcc 	Mint32Shift
.1922					Mint32ShiftRightX:
.1922	38		sec				sec
.1923					Mint32Shift:
.1923	08		php				php 								; save carry flag on stack.
.1924	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1926	15 59		ora $59,x			ora 	esInt2+1,x
.1928	15 61		ora $61,x			ora 	esInt3+1,x
.192a	d0 1e		bne $194a			bne 	_MShiftZero
.192c	b5 49		lda $49,x			lda 	esInt0+1,x
.192e	c9 20		cmp #$20			cmp 	#32
.1930	b0 18		bcs $194a			bcs 	_MShiftZero
.1932					_MShiftLoop:
.1932	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1934	f0 12		beq $1948			beq 	_MShiftExit
.1936	d6 49		dec $49,x			dec 	esInt0+1,x
.1938	28		plp				plp 								; restore and save carry
.1939	08		php				php
.193a	90 06		bcc $1942			bcc 	_MShiftLeft
.193c	20 0e 22	jsr $220e			jsr 	Mint32ShiftRight
.193f	4c 32 19	jmp $1932			jmp 	_MShiftLoop
.1942					_MShiftLeft:
.1942	20 05 22	jsr $2205			jsr 	Mint32ShiftLeft
.1945	4c 32 19	jmp $1932			jmp 	_MShiftLoop
.1948					_MShiftExit:
.1948	28		plp				plp	 								; throw saved carry and exit
.1949	60		rts				rts
.194a					_MShiftZero:
.194a	4c f0 21	jmp $21f0			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.194d					PerformComparison:
.194d	20 45 1a	jsr $1a45			jsr 	DereferenceTwo 				; make both values.
.1950	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1952	35 41		and $41,x			and 	esType+1,x
.1954	0a		asl a				asl 	a
.1955	30 1d		bmi $1974			bmi 	_PCIsString
.1957	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1959	15 41		ora $41,x			ora 	esType+1,x
.195b	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.195c	30 22		bmi $1980			bmi 	_PCError
.195e	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1960	f0 0f		beq $1971			beq 	_PCIsInteger 				; if not two integers
.1962	20 e4 17	jsr $17e4			jsr 	BPMakeBothFloat 			; make both float
.1965	8a		txa				txa
.1966	a2 04		ldx #$04		ldx	#4
.1968	20 8b 26	jsr $268b		jsr	floatingpointHandler
.196b	86 0c		stx $0c				stx 	tempShort 					; save result
.196d	aa		tax				tax
.196e	a5 0c		lda $0c				lda 	tempShort
.1970	60		rts				rts
.1971					_PCIsInteger:
.1971	4c 9c 1f	jmp $1f9c			jmp 	MInt32Compare
.1974					_PCIsString:
.1974	8a		txa				txa 								; A has SP
.1975	a2 06		ldx #$06		ldx	#6
.1977	20 27 29	jsr $2927		jsr	stringHandler
.197a	86 0c		stx $0c				stx 	tempShort 					; save result
.197c	aa		tax				tax 								; put SP back in X and get result.
.197d	a5 0c		lda $0c				lda 	tempShort
.197f	60		rts				rts
.1980					_PCError:
.1980	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1982	20 a3 23	jsr $23a3		jsr	errorHandler
.1985					CompareEquals:
.1985	20 4d 19	jsr $194d			jsr 	PerformComparison
.1988	c9 00		cmp #$00			cmp 	#$00
.198a	f0 35		beq $19c1			beq  	CompareTrue
.198c	4c c4 19	jmp $19c4			jmp 	CompareFalse
.198f					CompareLess:
.198f	20 4d 19	jsr $194d			jsr 	PerformComparison
.1992	c9 ff		cmp #$ff			cmp 	#$FF
.1994	f0 2b		beq $19c1			beq  	CompareTrue
.1996	4c c4 19	jmp $19c4			jmp 	CompareFalse
.1999					CompareGreater:
.1999	20 4d 19	jsr $194d			jsr 	PerformComparison
.199c	c9 01		cmp #$01			cmp 	#$01
.199e	f0 21		beq $19c1			beq  	CompareTrue
.19a0	4c c4 19	jmp $19c4			jmp 	CompareFalse
.19a3					CompareNotEquals:
.19a3	20 4d 19	jsr $194d			jsr 	PerformComparison
.19a6	c9 00		cmp #$00			cmp 	#$00
.19a8	d0 17		bne $19c1			bne  	CompareTrue
.19aa	4c c4 19	jmp $19c4			jmp 	CompareFalse
.19ad					CompareGreaterEq:
.19ad	20 4d 19	jsr $194d			jsr 	PerformComparison
.19b0	c9 ff		cmp #$ff			cmp 	#$FF
.19b2	d0 0d		bne $19c1			bne  	CompareTrue
.19b4	4c c4 19	jmp $19c4			jmp 	CompareFalse
.19b7					CompareLessEq:
.19b7	20 4d 19	jsr $194d			jsr 	PerformComparison
.19ba	c9 01		cmp #$01			cmp 	#$01
.19bc	d0 03		bne $19c1			bne  	CompareTrue
.19be	4c c4 19	jmp $19c4			jmp 	CompareFalse
.19c1					CompareTrue:
.19c1	4c ec 21	jmp $21ec			jmp 	MInt32True
.19c4					CompareFalse:
.19c4	4c f0 21	jmp $21f0			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.19c7					Event_Str:
.19c7	20 b9 1b	jsr $1bb9			jsr 	EvaluateNumeric 			; get a number.
.19ca	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.19cc	d0 13		bne $19e1			bne 	_ESFloat
.19ce	20 24 1a	jsr $1a24			jsr 	ConvertGetBase
.19d1	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.19d3	85 04		sta $04				sta 	temp0
.19d5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.19d7	85 05		sta $05				sta 	1+(temp0)
.19d9	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.19db	20 46 21	jsr $2146			jsr 	MInt32ToString 				; convert to string.
.19de	4c ee 19	jmp $19ee			jmp 	_ESCloneExit 				; clone and exit.
.19e1					_ESFloat:
.19e1	20 63 22	jsr $2263			jsr 	CheckRightParen 			; check closing )
.19e4	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.19e7	8a		txa				txa
.19e8	a2 14		ldx #$14		ldx	#20
.19ea	20 8b 26	jsr $268b		jsr	floatingpointHandler
.19ed	aa		tax				tax
.19ee					_ESCloneExit:
.19ee	8a		txa				txa
.19ef	a2 02		ldx #$02		ldx	#2
.19f1	20 27 29	jsr $2927		jsr	stringHandler
.19f4	aa		tax				tax
.19f5	60		rts				rts
.19f6					UnaryVal:
.19f6	38		sec				sec
.19f7	b0 01		bcs $19fa			bcs 	ValueMain
.19f9					UnaryIsVal:
.19f9	18		clc				clc
.19fa					ValueMain:
.19fa	08		php				php 								; save results (CS is value, CC is validation)
.19fb	20 c4 1b	jsr $1bc4			jsr 	EvaluateString
.19fe	20 24 1a	jsr $1a24			jsr 	ConvertGetBase 				; get base, if any.
.1a01	98		tya				tya
.1a02	48		pha				pha
.1a03	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1a06	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1a08	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1a0a	20 63 20	jsr $2063			jsr 	MInt32FromString 			; convert it back from a string.
.1a0d	b0 0c		bcs $1a1b			bcs 	_VMSuccess 					; successfully converted.
.1a0f	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1a11	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1a13	f0 00		beq $1a15			beq 	_VMFailed 	 				; so we failed.
.1a15					_VMFailed:
.1a15	68		pla				pla
.1a16	a8		tay				tay
.1a17	28		plp				plp
.1a18	4c f0 21	jmp $21f0			jmp 	MInt32False 				; return 0 whatever.
.1a1b					_VMSuccess:
.1a1b	68		pla				pla
.1a1c	a8		tay				tay
.1a1d	28		plp				plp 								; if CS the it was val() so we want the value.
.1a1e	b0 03		bcs $1a23			bcs 	_VMExit
.1a20	4c ec 21	jmp $21ec			jmp 	MInt32True 					; otherwise return true as successful.
.1a23					_VMExit:
.1a23	60		rts				rts
.1a24					ConvertGetBase:
.1a24	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1a26	95 49		sta $49,x			sta 	esInt0+1,x
.1a28	b1 02		lda ($02),y			lda 	(codePtr),y
.1a2a	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a2c	d0 0e		bne $1a3c			bne 	_CGBDone
.1a2e	e8		inx				inx 								; next level
.1a2f	c8		iny				iny 								; skip comma.
.1a30	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger		; evaluate the base.
.1a33	ca		dex				dex
.1a34	c9 02		cmp #$02			cmp 	#2
.1a36	90 08		bcc $1a40			bcc 	_CGBValue
.1a38	c9 11		cmp #$11			cmp 	#17
.1a3a	b0 04		bcs $1a40			bcs 	_CGBValue
.1a3c					_CGBDone:
.1a3c	20 63 22	jsr $2263			jsr 	CheckRightParen
.1a3f	60		rts				rts
.1a40					_CGBValue:
.1a40	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a42	20 a3 23	jsr $23a3		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1a45					DereferenceTwo:
.1a45	e8		inx				inx
.1a46	20 4a 1a	jsr $1a4a			jsr 	DereferenceOne
.1a49	ca		dex				dex
.1a4a					DereferenceOne:
.1a4a	b5 40		lda $40,x			lda 	esType,x
.1a4c	10 3d		bpl $1a8b			bpl 	_DRNotReference 			; is it a reference ?
.1a4e	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1a4f	b0 3b		bcs $1a8c			bcs 	_DRFloatDeReference
.1a51	98		tya				tya
.1a52	48		pha				pha
.1a53	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1a55	85 04		sta $04				sta 	temp0
.1a57	b5 50		lda $50,x			lda 	esInt1,x
.1a59	85 05		sta $05				sta 	temp0+1
.1a5b	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1a5d	95 50		sta $50,x			sta 	esInt1,x
.1a5f	95 58		sta $58,x			sta 	esInt2,x
.1a61	95 60		sta $60,x			sta 	esInt3,x
.1a63	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1a65	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1a67	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1a68	30 0d		bmi $1a77			bmi 	_DeRefString 				; string, 2 bytes only
.1a6a	d0 11		bne $1a7d			bne 	_DeRefByte 					; byte 1 byte only
.1a6c					_DeRefLong:
.1a6c	a0 03		ldy #$03			ldy 	#3
.1a6e	b1 04		lda ($04),y			lda 	(temp0),y
.1a70	95 60		sta $60,x			sta 	esInt3,x
.1a72	88		dey				dey
.1a73	b1 04		lda ($04),y			lda 	(temp0),y
.1a75	95 58		sta $58,x			sta 	esInt2,x
.1a77					_DeRefString:
.1a77	a0 01		ldy #$01			ldy 	#1
.1a79	b1 04		lda ($04),y			lda 	(temp0),y
.1a7b	95 50		sta $50,x			sta 	esInt1,x
.1a7d					_DeRefByte:
.1a7d	a0 00		ldy #$00			ldy 	#0
.1a7f	b1 04		lda ($04),y			lda 	(temp0),y
.1a81	95 48		sta $48,x			sta 	esInt0,x
.1a83	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1a85	29 40		and #$40			and 	#$40
.1a87	95 40		sta $40,x			sta 	esType,x
.1a89	68		pla				pla
.1a8a	a8		tay				tay
.1a8b					_DRNotReference
.1a8b	60		rts				rts
.1a8c					_DRFloatDereference:
.1a8c	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; address to deref in temp0
.1a8f	8a		txa				txa
.1a90	a2 1c		ldx #$1c		ldx	#28
.1a92	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1a95	aa		tax				tax
.1a96	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1a98	95 40		sta $40,x			sta 	esType,x
.1a9a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1a9b					EvaluateLevel:
.1a9b	48		pha				pha 								; save precedence level.
.1a9c	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1a9e	95 48		sta $48,x			sta 	esInt0,x
.1aa0	95 50		sta $50,x			sta 	esInt1,x
.1aa2	95 58		sta $58,x			sta 	esInt2,x
.1aa4	95 60		sta $60,x			sta 	esInt3,x
.1aa6	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1aa8	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1aaa	30 21		bmi $1acd			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1aac	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1aad	30 0a		bmi $1ab9			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1aaf	8a		txa				txa 								; stack level in X
.1ab0	a2 00		ldx #$00		ldx	#0
.1ab2	20 d9 2f	jsr $2fd9		jsr	variableHandler
.1ab5	aa		tax				tax
.1ab6	4c f6 1a	jmp $1af6			jmp		_ELHasTerm
.1ab9					_ELIsConstant:
.1ab9	4a		lsr a				lsr 	a 							; get the value back
.1aba	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1abc	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1abe					_ELCheckNext:
.1abe	c8		iny				iny 								; look at next
.1abf	b1 02		lda ($02),y			lda 	(codePtr),y
.1ac1	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1ac3	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1ac5	b0 2f		bcs $1af6			bcs 	_ELHasTerm 					; done getting the constant.
.1ac7	20 15 1c	jsr $1c15			jsr 	ELShiftByteIn 				; shift byte into position.
.1aca	4c be 1a	jmp $1abe			jmp 	_ELCheckNext
.1acd					_ELIsToken:
.1acd	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1acf	f0 0f		beq $1ae0			beq 	_ELIsString
.1ad1	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1ad3	d0 5f		bne $1b34			bne 	_ELCheckUnary
.1ad5	8a		txa				txa 								; put X into A
.1ad6	c8		iny				iny 								; skip over the float marker
.1ad7	a2 18		ldx #$18		ldx	#24
.1ad9	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1adc	aa		tax				tax 								; restore X
.1add	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm
.1ae0					_ELIsString:
.1ae0	98		tya				tya 								; address of string is codePtr+y+1
.1ae1	38		sec				sec
.1ae2	65 02		adc $02				adc 	codePtr
.1ae4	95 48		sta $48,x			sta 	esInt0,x
.1ae6	a5 03		lda $03				lda 	codePtr+1
.1ae8	69 00		adc #$00			adc 	#0
.1aea	95 50		sta $50,x			sta 	esInt1,x
.1aec	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1aee	95 40		sta $40,x			sta 	esType,x
.1af0	c8		iny				iny 								; skip over string.
.1af1	98		tya				tya
.1af2	38		sec				sec									; +1 for the length itself.
.1af3	71 02		adc ($02),y			adc 	(codePtr),y
.1af5	a8		tay				tay 								; and fall through to term loop code.
.1af6					_ELHasTerm:
.1af6	b1 02		lda ($02),y			lda 	(codePtr),y
.1af8	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1afa	90 04		bcc $1b00			bcc 	_ELPopExit
.1afc	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1afe	90 02		bcc $1b02			bcc 	_ELHasBinaryTerm
.1b00					_ELPopExit:
.1b00	68		pla				pla
.1b01					_ELExit:
.1b01	60		rts				rts
.1b02					_ELHasBinaryTerm:
.1b02	84 0c		sty $0c				sty 	tempShort 					; save position
.1b04	a8		tay				tay 								; use token as an index and get the precedence.
.1b05	b9 bd 1b	lda $1bbd,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1b08	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1b0a	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1b0c	68		pla				pla 								; restore current level.
.1b0d	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1b0f	b0 f0		bcs $1b01			bcs 	_ELExit
.1b11	48		pha				pha 								; save current level back on the stack.
.1b12	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1b14	48		pha				pha
.1b15	c8		iny				iny
.1b16	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1b17	a5 0c		lda $0c				lda 	tempShort
.1b19	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel
.1b1c	ca		dex				dex
.1b1d	68		pla				pla 								; get the operator back out.
.1b1e					_ELExecuteA:
.1b1e	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1b20	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1b21	aa		tax				tax
.1b22	bd 4a 15	lda $154a,x			lda 	Group0Vectors,x
.1b25	85 04		sta $04				sta 	temp0
.1b27	bd 4b 15	lda $154b,x			lda 	Group0Vectors+1,x
.1b2a	85 05		sta $05				sta 	temp0+1
.1b2c	a6 0c		ldx $0c				ldx 	tempShort
.1b2e	20 7b 1b	jsr $1b7b			jsr 	_ELCallTemp0
.1b31	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm 					; and loop back round.
.1b34					_ELCheckUnary:
.1b34	c8		iny				iny 								; skip over token.
.1b35	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1b37	f0 19		beq $1b52			beq 	_ELMinus
.1b39	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1b3b	f0 2c		beq $1b69			beq 	_ELIndirect
.1b3d	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1b3f	f0 28		beq $1b69			beq 	_ELIndirect
.1b41	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1b43	f0 39		beq $1b7e			beq 	_ELExtension
.1b45	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1b47	90 04		bcc $1b4d			bcc 	_ELUSyntax
.1b49	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1b4b	90 d1		bcc $1b1e			bcc 	_ELExecuteA 				; if so do that token.
.1b4d					_ELUSyntax:
.1b4d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b4f	20 a3 23	jsr $23a3		jsr	errorHandler
.1b52					_ELMinus:
.1b52	20 98 1b	jsr $1b98			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1b55	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1b57	f0 0a		beq $1b63			beq 	_ELMinusInteger
.1b59	8a		txa				txa
.1b5a	a2 0c		ldx #$0c		ldx	#12
.1b5c	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1b5f	aa		tax				tax
.1b60	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm
.1b63					_ELMinusInteger:
.1b63	20 aa 21	jsr $21aa			jsr 	MInt32Negate 				; do int negate
.1b66	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm
.1b69					_ELIndirect:
.1b69	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1b6a	20 a1 1b	jsr $1ba1			jsr 	EvaluateIntegerTerm 		; integer address
.1b6d	68		pla				pla
.1b6e	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1b70	f0 02		beq $1b74			beq 	_ELHaveModifier
.1b72	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1b74					_ELHaveModifier:
.1b74	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1b76	95 40		sta $40,x			sta 	esType,x
.1b78	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm
.1b7b					_ELCallTemp0:
.1b7b	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1b7e					_ELExtension:
.1b7e	8a		txa				txa 								; stack pos in A
.1b7f	20 00 26	jsr $2600		jsr	extensionHandler
.1b82	aa		tax				tax 								; restore stack
.1b83	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm
.1b86					UnaryParenthesis:
.1b86	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1b88	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel
.1b8b	20 63 22	jsr $2263			jsr 	CheckRightParen 			; check for )
.1b8e	60		rts				rts
.1b8f					EvaluateTerm:
.1b8f	a9 0f		lda #$0f			lda 	#15
.1b91	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel
.1b94	20 4a 1a	jsr $1a4a			jsr 	DereferenceOne
.1b97	60		rts				rts
.1b98					EvaluateNumericTerm:
.1b98	20 8f 1b	jsr $1b8f			jsr 	EvaluateTerm
.1b9b	b5 40		lda $40,x			lda 	esType,x
.1b9d	0a		asl a				asl 	a 							; see if it's a string.
.1b9e	30 09		bmi $1ba9			bmi 	ENTType
.1ba0	60		rts				rts
.1ba1					EvaluateIntegerTerm:
.1ba1	20 8f 1b	jsr $1b8f			jsr 	EvaluateTerm
.1ba4	b5 40		lda $40,x			lda 	esType,x
.1ba6	d0 01		bne $1ba9			bne 	ENTType
.1ba8	60		rts				rts
.1ba9					ENTType:
.1ba9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1bab	20 a3 23	jsr $23a3		jsr	errorHandler
.1bae					EvaluateRoot:
.1bae	a2 00		ldx #$00			ldx 	#0
.1bb0					Evaluate:
.1bb0	a9 00		lda #$00			lda 	#0
.1bb2	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel
.1bb5	20 4a 1a	jsr $1a4a			jsr 	DereferenceOne
.1bb8	60		rts				rts
.1bb9					EvaluateNumeric:
.1bb9	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1bbc	b5 40		lda $40,x			lda 	esType,x
.1bbe	0a		asl a				asl 	a 							; see if it's a string.
.1bbf	30 e8		bmi $1ba9			bmi 	ENTType
.1bc1	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1bc2	4a		lsr a				lsr 	a
.1bc3	60		rts				rts
.1bc4					EvaluateString:
.1bc4	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1bc7	b5 40		lda $40,x			lda 	esType,x
.1bc9	0a		asl a				asl 	a 							; see if it's a string.
.1bca	10 dd		bpl $1ba9			bpl 	ENTType
.1bcc	60		rts				rts
.1bcd					EvaluateRootInteger:
.1bcd	a2 00		ldx #$00			ldx 	#0
.1bcf					EvaluateInteger:
.1bcf	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1bd2	b5 40		lda $40,x			lda 	esType,x
.1bd4	d0 d3		bne $1ba9			bne 	ENTType
.1bd6	60		rts				rts
.1bd7					EvaluateSmallInteger:
.1bd7	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.1bda	b5 50		lda $50,x			lda 	esInt1,x
.1bdc	15 58		ora $58,x			ora 	esInt2,x
.1bde	15 60		ora $60,x			ora 	esInt3,x
.1be0	d0 03		bne $1be5			bne 	_ESIValue
.1be2	b5 48		lda $48,x			lda 	esInt0,x
.1be4	60		rts				rts
.1be5					_ESIValue:
.1be5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1be7	20 a3 23	jsr $23a3		jsr	errorHandler
.1bea					LinkEvaluate:
.1bea	aa		tax				tax
.1beb	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1bee	8a		txa				txa
.1bef	60		rts				rts
.1bf0					LinkEvaluateTerm:
.1bf0	aa		tax				tax
.1bf1	20 8f 1b	jsr $1b8f			jsr 	EvaluateTerm
.1bf4	8a		txa				txa
.1bf5	60		rts				rts
.1bf6					LinkEvaluateInteger:
.1bf6	aa		tax				tax
.1bf7	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.1bfa	8a		txa				txa
.1bfb	60		rts				rts
.1bfc					LinkEvaluateSmallInt:
.1bfc	aa		tax				tax
.1bfd	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger
.1c00	8a		txa				txa
.1c01	60		rts				rts
.1c02					EvaluateReference:
.1c02	ad 54 1c	lda $1c54			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1c05	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1c06	e9 01		sbc #$01			sbc 	#1
.1c08	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel
.1c0b	b5 40		lda $40,x			lda 	esType,x
.1c0d	10 01		bpl $1c10			bpl 	_ERFail
.1c0f	60		rts				rts
.1c10					_ERFail:
.1c10	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1c12	20 a3 23	jsr $23a3		jsr	errorHandler
.1c15					ELShiftByteIn:
.1c15	48		pha				pha 								; save bits to shift in.
.1c16	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1c18	48		pha				pha
.1c19	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1c1b	95 60		sta $60,x			sta 	esInt3,x
.1c1d	b5 50		lda $50,x			lda 	esInt1,x
.1c1f	95 58		sta $58,x			sta 	esInt2,x
.1c21	b5 48		lda $48,x			lda 	esInt0,x
.1c23	95 50		sta $50,x			sta 	esInt1,x
.1c25	a9 00		lda #$00			lda 	#0
.1c27	95 48		sta $48,x			sta 	esInt0,x
.1c29	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1c2a	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1c2c	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1c2e					_ELShiftLoop:
.1c2e	4a		lsr a				lsr 	a
.1c2f	76 60		ror $60,x			ror 	esInt3,x
.1c31	76 58		ror $58,x			ror 	esInt2,x
.1c33	76 50		ror $50,x			ror 	esInt1,x
.1c35	76 48		ror $48,x			ror 	esInt0,x
.1c37	c9 01		cmp #$01			cmp 	#1
.1c39	d0 f3		bne $1c2e			bne 	_ELShiftLoop
.1c3b	68		pla				pla 								; get original 6 bit value and OR in.
.1c3c	29 3f		and #$3f			and 	#$3F
.1c3e	15 48		ora $48,x			ora 	esInt0,x
.1c40	95 48		sta $48,x			sta 	esInt0,x
.1c42	60		rts				rts
.1c43					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1c43	01					.byte	$01			; $86 and
>1c44	01					.byte	$01			; $87 or
>1c45	01					.byte	$01			; $88 xor
>1c46	02					.byte	$02			; $89 >=
>1c47	02					.byte	$02			; $8a <=
>1c48	02					.byte	$02			; $8b >
>1c49	02					.byte	$02			; $8c <
>1c4a	02					.byte	$02			; $8d =
>1c4b	02					.byte	$02			; $8e <>
>1c4c	03					.byte	$03			; $8f +
>1c4d	03					.byte	$03			; $90 -
>1c4e	04					.byte	$04			; $91 >>
>1c4f	04					.byte	$04			; $92 <<
>1c50	04					.byte	$04			; $93 *
>1c51	04					.byte	$04			; $94 /
>1c52	04					.byte	$04			; $95 mod
>1c53	05					.byte	$05			; $96 ^
>1c54	06					.byte	$06			; $97 !
>1c55	06					.byte	$06			; $98 ?
>1c56	82					.byte	$82			; $99 repeat
>1c57	82					.byte	$82			; $9a while
>1c58	82					.byte	$82			; $9b for
>1c59	82					.byte	$82			; $9c if
>1c5a	82					.byte	$82			; $9d defproc
>1c5b	80					.byte	$80			; $9e until
>1c5c	80					.byte	$80			; $9f wend
>1c5d	80					.byte	$80			; $a0 next
>1c5e	80					.byte	$80			; $a1 then
>1c5f	80					.byte	$80			; $a2 endif
>1c60	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1c61					EventFunction:
.1c61	20 02 1c	jsr $1c02			jsr 	EvaluateReference			; get the variable reference.
.1c64	b5 40		lda $40,x			lda 	esType,x
.1c66	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1c68	d0 5b		bne $1cc5			bne 	_EFType
.1c6a	20 70 22	jsr $2270			jsr 	CheckComma
.1c6d	e8		inx				inx
.1c6e	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1c71	20 63 22	jsr $2263			jsr 	CheckRightParen 			; finish off with the
.1c74	ca		dex				dex
.1c75	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1c77	29 80		and #$80			and 	#$80
.1c79	15 58		ora $58,x			ora 	esInt2,x
.1c7b	15 60		ora $60,x			ora 	esInt3,x
.1c7d	d0 41		bne $1cc0			bne 	_EFValue
.1c7f	98		tya				tya
.1c80	48		pha				pha
.1c81	8a		txa				txa
.1c82	48		pha				pha
.1c83	a2 12		ldx #$12		ldx	#18
.1c85	20 8c 23	jsr $238c		jsr	deviceHandler
.1c88	84 07		sty $07				sty 	temp1+1
.1c8a	85 06		sta $06				sta 	temp1
.1c8c	68		pla				pla
.1c8d	aa		tax				tax
.1c8e	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1c91	a0 03		ldy #$03			ldy 	#3							; if -ve
.1c93	b1 04		lda ($04),y			lda 	(temp0),y
.1c95	30 23		bmi $1cba			bmi 	_EFFail 	 				; straight out with fail, means on pause.
.1c97	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1c99	b1 04		lda ($04),y			lda 	(temp0),y
.1c9b	c8		iny				iny
.1c9c	11 04		ora ($04),y			ora 	(temp0),y
.1c9e	f0 17		beq $1cb7			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1ca0	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1ca2	38		sec				sec
.1ca3	b1 04		lda ($04),y			lda 	(temp0),y
.1ca5	e5 06		sbc $06				sbc 	temp1
.1ca7	c8		iny				iny
.1ca8	b1 04		lda ($04),y			lda 	(temp0),y
.1caa	e5 07		sbc $07				sbc 	temp1+1
.1cac	10 0c		bpl $1cba			bpl 	_EFFail 					; if trigger >= timer then return False
.1cae	20 ca 1c	jsr $1cca			jsr 	SetEventTimer 				; reset the timer for next time.
.1cb1	20 ec 21	jsr $21ec			jsr	 	MInt32True 					; and treutn true as fired.
.1cb4	68		pla				pla
.1cb5	a8		tay				tay
.1cb6	60		rts				rts
.1cb7					_EFInitialise:
.1cb7	20 ca 1c	jsr $1cca			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1cba					_EFFail:
.1cba	68		pla				pla
.1cbb	a8		tay				tay
.1cbc	20 f0 21	jsr $21f0			jsr 	MInt32False
.1cbf	60		rts				rts
.1cc0					_EFValue:
.1cc0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cc2	20 a3 23	jsr $23a3		jsr	errorHandler
.1cc5					_EFType:
.1cc5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1cc7	20 a3 23	jsr $23a3		jsr	errorHandler
.1cca					SetEventTimer:
.1cca	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1ccc	18		clc				clc
.1ccd	a5 06		lda $06				lda 	temp1
.1ccf	75 49		adc $49,x			adc 	esInt0+1,x
.1cd1	91 04		sta ($04),y			sta		(temp0),y
.1cd3	c8		iny				iny
.1cd4	a5 07		lda $07				lda 	temp1+1
.1cd6	75 51		adc $51,x			adc 	esInt1+1,x
.1cd8	91 04		sta ($04),y			sta		(temp0),y
.1cda	88		dey				dey
.1cdb	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1cdd	d0 04		bne $1ce3			bne 	_SETExit
.1cdf	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1ce1	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1ce3					_SETExit:
.1ce3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1ce4					UnaryLen:
.1ce4	20 f2 1c	jsr $1cf2			jsr 	ULStart
.1ce7					ULFinish:
.1ce7	b1 04		lda ($04),y			lda 	(temp0),y
.1ce9	a4 0c		ldy $0c				ldy 	tempShort
.1ceb	20 ff 21	jsr $21ff			jsr 	MInt32Set8Bit
.1cee	20 63 22	jsr $2263			jsr 	CheckRightParen
.1cf1	60		rts				rts
.1cf2	20 c4 1b	jsr $1bc4	ULStart:jsr 	EvaluateString
.1cf5	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1cf7	85 04		sta $04				sta 	temp0
.1cf9	b5 50		lda $50,x			lda 	esInt1,x
.1cfb	85 05		sta $05				sta 	temp0+1
.1cfd	84 0c		sty $0c				sty 	tempShort 					; get length
.1cff	a0 00		ldy #$00			ldy 	#0
.1d01	60		rts				rts
.1d02					UnaryAsc:
.1d02	20 f2 1c	jsr $1cf2			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1d05	b1 04		lda ($04),y			lda 	(temp0),y
.1d07	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1d08	c9 00		cmp #$00			cmp 	#0
.1d0a	d0 db		bne $1ce7			bne 	ULFinish
.1d0c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d0e	20 a3 23	jsr $23a3		jsr	errorHandler
.1d11					UnaryAbs:
.1d11	20 b9 1b	jsr $1bb9			jsr 	EvaluateNumeric
.1d14	b0 07		bcs $1d1d			bcs 	_UAFloat
.1d16	20 a5 21	jsr $21a5			jsr 	MInt32Absolute
.1d19	20 63 22	jsr $2263			jsr 	CheckRightParen
.1d1c	60		rts				rts
.1d1d					_UAFloat:
.1d1d	8a		txa				txa
.1d1e	a2 00		ldx #$00		ldx	#0
.1d20	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1d23	aa		tax				tax
.1d24	20 63 22	jsr $2263			jsr 	CheckRightParen
.1d27	60		rts				rts
.1d28					UnarySgn:
.1d28	20 b9 1b	jsr $1bb9			jsr 	EvaluateNumeric
.1d2b	b0 07		bcs $1d34			bcs 	_USFloat
.1d2d	20 dd 21	jsr $21dd			jsr 	MInt32Sign
.1d30	20 63 22	jsr $2263			jsr 	CheckRightParen
.1d33	60		rts				rts
.1d34					_USFloat:
.1d34	8a		txa				txa
.1d35	a2 0e		ldx #$0e		ldx	#14
.1d37	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1d3a	aa		tax				tax
.1d3b	20 63 22	jsr $2263			jsr 	CheckRightParen
.1d3e	60		rts				rts
.1d3f					UnaryPeek:
.1d3f	20 6b 1d	jsr $1d6b			jsr 	PDLCode
.1d42	4c 5f 1d	jmp $1d5f			jmp 	PDLByte0
.1d45					UnaryDeek:
.1d45	20 6b 1d	jsr $1d6b			jsr 	PDLCode
.1d48	4c 59 1d	jmp $1d59			jmp 	PDLByte1
.1d4b					UnaryLeek:
.1d4b	20 6b 1d	jsr $1d6b			jsr 	PDLCode
.1d4e	a0 03		ldy #$03			ldy 	#3
.1d50	b1 04		lda ($04),y			lda 	(temp0),y
.1d52	95 60		sta $60,x			sta 	esInt3,x
.1d54	88		dey				dey
.1d55	b1 04		lda ($04),y			lda 	(temp0),y
.1d57	95 58		sta $58,x			sta 	esInt2,x
.1d59					PDLByte1:
.1d59	a0 01		ldy #$01			ldy 	#1
.1d5b	b1 04		lda ($04),y			lda 	(temp0),y
.1d5d	95 50		sta $50,x			sta 	esInt1,x
.1d5f					PDLByte0:
.1d5f	a0 00		ldy #$00			ldy 	#0
.1d61	b1 04		lda ($04),y			lda 	(temp0),y
.1d63	95 48		sta $48,x			sta 	esInt0,x
.1d65	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1d67	20 63 22	jsr $2263			jsr 	CheckRightParen 			; check right and return
.1d6a	60		rts				rts
.1d6b					PDLCode:
.1d6b	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.1d6e	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d70	85 04		sta $04				sta 	temp0
.1d72	b5 50		lda $50,x			lda 	esInt1,x
.1d74	85 05		sta $05				sta 	temp0+1
.1d76	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1d78	95 50		sta $50,x			sta 	esInt1,x
.1d7a	95 58		sta $58,x			sta 	esInt2,x
.1d7c	95 60		sta $60,x			sta 	esInt3,x
.1d7e	84 0c		sty $0c				sty 	tempShort 					; save Y
.1d80	60		rts				rts
.1d81					Unary_Random:
.1d81	20 20 22	jsr $2220			jsr 	MInt32Random 				; generate random number.
.1d84	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1d86	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1d88	f0 08		beq $1d92			beq 	_URExit
.1d8a	e8		inx				inx 								; load range 0..r-1 into +1
.1d8b	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.1d8e	ca		dex				dex
.1d8f	20 4f 20	jsr $204f			jsr 	MInt32Modulus 				; calculate random % modulus
.1d92					_URExit:
.1d92	20 63 22	jsr $2263			jsr 	CheckRightParen 			; check right and return
.1d95	60		rts				rts
.1d96					Unary_Min:
.1d96	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1d98	d0 02		bne $1d9c			bne 	UnaryMBody
.1d9a					Unary_Max:
.1d9a	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1d9c					UnaryMBody:
.1d9c	48		pha				pha 								; save comparator on stack.
.1d9d	20 b0 1b	jsr $1bb0			jsr 	Evaluate 					; get the first thing to check
.1da0					_UnaryMLoop:
.1da0	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1da2	c8		iny				iny
.1da3	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1da5	f0 09		beq $1db0			beq 	_UnaryMExit
.1da7	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1da9	f0 07		beq $1db2			beq 	_UnaryMCompare
.1dab	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1dad	20 a3 23	jsr $23a3		jsr	errorHandler
.1db0					_UnaryMExit:
.1db0	68		pla				pla 								; throw comparator and return.
.1db1	60		rts				rts
.1db2					_UnaryMCompare:
.1db2	e8		inx				inx 								; get the 2nd thing to evaluate
.1db3	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1db6	ca		dex				dex
.1db7	20 4d 19	jsr $194d			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1dba	85 0c		sta $0c				sta 	tempShort 					; save result
.1dbc	68		pla				pla 								; get what we need
.1dbd	48		pha				pha
.1dbe	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1dc0	d0 de		bne $1da0			bne 	_UnaryMLoop 				; no, try another value.
.1dc2	20 f0 21	jsr $21f0			jsr 	MInt32False 				; promote 2nd to 1st.
.1dc5	20 d9 20	jsr $20d9			jsr 	MInt32Add
.1dc8	4c a0 1d	jmp $1da0			jmp 	_UnaryMLoop
.1dcb					Unary_Page:
.1dcb	20 f0 21	jsr $21f0			jsr 	MInt32False 				; zero
.1dce	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1dd1	95 48		sta $48,x			sta 	esInt0,x
.1dd3	ad c9 0a	lda $0ac9			lda 	basePage+1
.1dd6	95 50		sta $50,x			sta 	esInt1,x
.1dd8	60		rts				rts
.1dd9					UnaryReference:
.1dd9	a9 0f		lda #$0f			lda 	#15
.1ddb	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1dde	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1de0	10 05		bpl $1de7			bpl 	UType
.1de2	a9 00		lda #$00			lda 	#0 							; make it an integer
.1de4	95 40		sta $40,x			sta 	esType,x
.1de6	60		rts				rts
.1de7					UType:
.1de7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1de9	20 a3 23	jsr $23a3		jsr	errorHandler
.1dec					UnaryHexMarker:
.1dec	4c a1 1b	jmp $1ba1			jmp 	EvaluateIntegerTerm
.1def					UnaryComplement:
.1def	20 a1 1b	jsr $1ba1			jsr 	EvaluateIntegerTerm
.1df2	20 c4 21	jsr $21c4			jsr 	MInt32Not
.1df5	60		rts				rts
.1df6					UnaryIntToFloat:
.1df6	20 b9 1b	jsr $1bb9			jsr 	EvaluateNumeric
.1df9	b5 40		lda $40,x			lda 	esType,x
.1dfb	d0 0b		bne $1e08			bne 	_UIFExit
.1dfd	8a		txa				txa
.1dfe	a2 1a		ldx #$1a		ldx	#26
.1e00	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1e03	aa		tax				tax
.1e04	a9 01		lda #$01			lda 	#1
.1e06	95 40		sta $40,x			sta 	esType,x
.1e08					_UIFExit:
.1e08	60		rts				rts
.1e09					UnaryFloatToInt:
.1e09	20 b9 1b	jsr $1bb9			jsr 	EvaluateNumeric
.1e0c	b5 40		lda $40,x			lda 	esType,x
.1e0e	f0 07		beq $1e17			beq 	_UFIExit
.1e10	8a		txa				txa
.1e11	a2 12		ldx #$12		ldx	#18
.1e13	20 8b 26	jsr $268b		jsr	floatingpointHandler
.1e16	aa		tax				tax
.1e17					_UFIExit:
.1e17	60		rts				rts
.1e18					UnaryAlloc:
.1e18	e8		inx				inx 								; evaluate memory required
.1e19	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.1e1c	20 63 22	jsr $2263			jsr 	CheckRightParen
.1e1f	ca		dex				dex
.1e20	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1e22	15 61		ora $61,x			ora 	esInt3+1,x
.1e24	d0 19		bne $1e3f			bne 	_UABadValue
.1e26	20 f0 21	jsr $21f0			jsr 	MInt32False					; zero return.
.1e29	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1e2b	95 50		sta $50,x			sta 	esInt1,x
.1e2d	a5 0f		lda $0f				lda 	lowMemory
.1e2f	95 48		sta $48,x			sta 	esInt0,x
.1e31	18		clc				clc 								; add alloc required.
.1e32	75 49		adc $49,x			adc 	esInt0+1,x
.1e34	85 0f		sta $0f				sta 	lowMemory
.1e36	a5 10		lda $10				lda 	lowMemory+1
.1e38	75 51		adc $51,x			adc 	esInt1+1,x
.1e3a	85 10		sta $10				sta 	lowMemory+1
.1e3c	b0 01		bcs $1e3f			bcs		_UABadValue 				; overflow definitely bad.
.1e3e	60		rts				rts
.1e3f					_UABadValue:
.1e3f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e41	20 a3 23	jsr $23a3		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1e44					UnaryTimer:
.1e44	20 63 22	jsr $2263			jsr 	CheckRightParen
.1e47	98		tya				tya
.1e48	48		pha				pha
.1e49	20 17 22	jsr $2217			jsr 	MInt32Zero 					; zero result
.1e4c	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1e4e	a2 12		ldx #$12		ldx	#18
.1e50	20 8c 23	jsr $238c		jsr	deviceHandler
.1e53	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1e55	95 48		sta $48,x			sta 	esInt0,x
.1e57	98		tya				tya
.1e58	95 50		sta $50,x			sta 	esInt1,x
.1e5a	68		pla				pla
.1e5b	a8		tay				tay
.1e5c	60		rts				rts
.1e5d					UnaryInkey:
.1e5d	20 63 22	jsr $2263			jsr 	CheckRightParen
.1e60	86 04		stx $04				stx 	temp0
.1e62	a2 08		ldx #$08		ldx	#8
.1e64	20 8c 23	jsr $238c		jsr	deviceHandler
.1e67	a6 04		ldx $04				ldx 	temp0
.1e69	20 ff 21	jsr $21ff			jsr 	MInt32Set8Bit
.1e6c	60		rts				rts
.1e6d					UnaryGet:
.1e6d	20 63 22	jsr $2263			jsr 	CheckRightParen
.1e70	86 04		stx $04				stx 	temp0
.1e72					_UGLoop:
.1e72	a2 08		ldx #$08		ldx	#8
.1e74	20 8c 23	jsr $238c		jsr	deviceHandler
.1e77	c9 00		cmp #$00			cmp 	#0
.1e79	f0 f7		beq $1e72			beq 	_UGLoop
.1e7b	a6 04		ldx $04				ldx 	temp0
.1e7d	20 ff 21	jsr $21ff			jsr 	MInt32Set8Bit
.1e80	60		rts				rts
.1e81					UnarySys:
.1e81	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger 				; get the address
.1e84	20 63 22	jsr $2263			jsr 	CheckRightParen
.1e87	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 						; copy to temp0
.1e8a	8a		txa				txa
.1e8b	48		pha				pha
.1e8c	98		tya				tya
.1e8d	48		pha				pha
.1e8e	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1e91	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1e94	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1e97	20 a6 1e	jsr $1ea6			jsr 	_CallTemp0
.1e9a	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1e9c	68		pla				pla
.1e9d	a8		tay				tay
.1e9e	68		pla				pla
.1e9f	aa		tax				tax
.1ea0	a5 0c		lda $0c				lda 	tempShort
.1ea2	20 ff 21	jsr $21ff			jsr 	MInt32Set8Bit 					; return result.
.1ea5	60		rts				rts
.1ea6					_CallTemp0:
.1ea6	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1ea9					ExecChr:
.1ea9	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger		; character number
.1eac	20 63 22	jsr $2263			jsr 	CheckRightParen				; right bracket
.1eaf	98		tya				tya
.1eb0	48		pha				pha
.1eb1	8a		txa				txa 								; A = stack
.1eb2	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1eb4	a2 00		ldx #$00		ldx	#0
.1eb6	20 27 29	jsr $2927		jsr	stringHandler
.1eb9	aa		tax				tax 								; X = stack
.1eba	68		pla				pla
.1ebb	a8		tay				tay
.1ebc	60		rts				rts
.1ebd					ExecLower:
.1ebd	38		sec				sec
.1ebe	b0 01		bcs $1ec1			bcs 	ExecUpperLower
.1ec0					ExecUpper:
.1ec0	18		clc				clc
.1ec1					ExecUpperLower:
.1ec1	08		php				php 								; save carry
.1ec2	20 c4 1b	jsr $1bc4			jsr 	EvaluateString 				; string to stack,X
.1ec5	20 63 22	jsr $2263			jsr 	CheckRightParen 			; check closing right bracket.
.1ec8	28		plp				plp 								; restore carry, save Y
.1ec9	98		tya				tya
.1eca	48		pha				pha
.1ecb	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1ecd	2a		rol a				rol 	a
.1ece	a8		tay				tay 								; now in Y
.1ecf	8a		txa				txa 								; do the substring and exit.
.1ed0	a2 08		ldx #$08		ldx	#8
.1ed2	20 27 29	jsr $2927		jsr	stringHandler
.1ed5	aa		tax				tax
.1ed6	68		pla				pla
.1ed7	a8		tay				tay
.1ed8	60		rts				rts
.1ed9					ExecLeft:
.1ed9	20 c4 1b	jsr $1bc4			jsr 	EvaluateString 				; string to stack,X
.1edc	20 70 22	jsr $2270			jsr 	CheckComma
.1edf	e8		inx				inx
.1ee0	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1ee2	20 ff 21	jsr $21ff			jsr 	MInt32Set8Bit
.1ee5	e8		inx				inx
.1ee6	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1ee9					ExecSubstring:
.1ee9	ca		dex				dex 								; fix up X
.1eea	ca		dex				dex
.1eeb	20 63 22	jsr $2263			jsr 	CheckRightParen 			; check closing right bracket.
.1eee	8a		txa				txa 								; do the substring and exit.
.1eef	a2 0a		ldx #$0a		ldx	#10
.1ef1	20 27 29	jsr $2927		jsr	stringHandler
.1ef4	aa		tax				tax
.1ef5	60		rts				rts
.1ef6					ExecMid:
.1ef6	20 c4 1b	jsr $1bc4			jsr 	EvaluateString 				; string to stack,X
.1ef9	20 70 22	jsr $2270			jsr 	CheckComma
.1efc	e8		inx				inx
.1efd	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f00	c9 00		cmp #$00			cmp 	#0
.1f02	f0 15		beq $1f19			beq 	_EMValue
.1f04	e8		inx				inx
.1f05	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1f07	20 ff 21	jsr $21ff			jsr 	MInt32Set8Bit
.1f0a	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1f0c	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1f0e	f0 d9		beq $1ee9			beq 	ExecSubString
.1f10	20 70 22	jsr $2270			jsr 	CheckComma
.1f13	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f16	4c e9 1e	jmp $1ee9			jmp 	ExecSubString
.1f19					_EMValue:
.1f19	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f1b	20 a3 23	jsr $23a3		jsr	errorHandler
.1f1e					ExecRight:
.1f1e	20 c4 1b	jsr $1bc4			jsr 	EvaluateString 				; string to stack,X
.1f21	20 70 22	jsr $2270			jsr 	CheckComma
.1f24	e8		inx				inx
.1f25	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1f28	ca		dex				dex
.1f29	98		tya				tya
.1f2a	48		pha				pha
.1f2b	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1f2d	85 04		sta $04				sta 	temp0
.1f2f	b5 50		lda $50,x			lda 	esInt1,x
.1f31	85 05		sta $05				sta 	temp0+1
.1f33	a0 00		ldy #$00			ldy 	#0 							; point to length
.1f35	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1f37	18		clc				clc 								; add 1.
.1f38	69 01		adc #$01			adc 	#1
.1f3a	38		sec				sec
.1f3b	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1f3d	f0 02		beq $1f41			beq		_ERMake1 					; if zero, make it 1.
.1f3f	b0 02		bcs $1f43			bcs		_EROkay
.1f41					_ERMake1:
.1f41	a9 01		lda #$01			lda 	#1 							; start position.
.1f43					_EROkay:
.1f43	e8		inx				inx 								; set start pos.
.1f44	95 48		sta $48,x			sta 	esInt0,x
.1f46	e8		inx				inx
.1f47	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1f49	20 ff 21	jsr $21ff			jsr 	MInt32Set8Bit
.1f4c	68		pla				pla
.1f4d	a8		tay				tay
.1f4e	4c e9 1e	jmp $1ee9			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1f51					MInt32And:
.1f51	b5 48		lda $48,x			lda 	esInt0,x
.1f53	35 49		and $49,x			and 	esInt0+1,x
.1f55	95 48		sta $48,x			sta 	esInt0,x
.1f57	b5 50		lda $50,x			lda 	esInt1,x
.1f59	35 51		and $51,x			and 	esInt1+1,x
.1f5b	95 50		sta $50,x			sta 	esInt1,x
.1f5d	b5 58		lda $58,x			lda 	esInt2,x
.1f5f	35 59		and $59,x			and 	esInt2+1,x
.1f61	95 58		sta $58,x			sta 	esInt2,x
.1f63	b5 60		lda $60,x			lda 	esInt3,x
.1f65	35 61		and $61,x			and 	esInt3+1,x
.1f67	95 60		sta $60,x			sta 	esInt3,x
.1f69	60		rts				rts
.1f6a					MInt32Or:
.1f6a	b5 48		lda $48,x			lda 	esInt0,x
.1f6c	15 49		ora $49,x			ora 	esInt0+1,x
.1f6e	95 48		sta $48,x			sta 	esInt0,x
.1f70	b5 50		lda $50,x			lda 	esInt1,x
.1f72	15 51		ora $51,x			ora 	esInt1+1,x
.1f74	95 50		sta $50,x			sta 	esInt1,x
.1f76	b5 58		lda $58,x			lda 	esInt2,x
.1f78	15 59		ora $59,x			ora 	esInt2+1,x
.1f7a	95 58		sta $58,x			sta 	esInt2,x
.1f7c	b5 60		lda $60,x			lda 	esInt3,x
.1f7e	15 61		ora $61,x			ora 	esInt3+1,x
.1f80	95 60		sta $60,x			sta 	esInt3,x
.1f82	60		rts				rts
.1f83					MInt32Xor:
.1f83	b5 48		lda $48,x			lda 	esInt0,x
.1f85	55 49		eor $49,x			eor 	esInt0+1,x
.1f87	95 48		sta $48,x			sta 	esInt0,x
.1f89	b5 50		lda $50,x			lda 	esInt1,x
.1f8b	55 51		eor $51,x			eor 	esInt1+1,x
.1f8d	95 50		sta $50,x			sta 	esInt1,x
.1f8f	b5 58		lda $58,x			lda 	esInt2,x
.1f91	55 59		eor $59,x			eor 	esInt2+1,x
.1f93	95 58		sta $58,x			sta 	esInt2,x
.1f95	b5 60		lda $60,x			lda 	esInt3,x
.1f97	55 61		eor $61,x			eor 	esInt3+1,x
.1f99	95 60		sta $60,x			sta 	esInt3,x
.1f9b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1f9c					MInt32Compare:
.1f9c	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1f9e	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fa0	d0 13		bne $1fb5			bne 	MInt32Compare2
.1fa2	b5 50		lda $50,x			lda 	esInt1,x
.1fa4	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1fa6	d0 0d		bne $1fb5			bne 	MInt32Compare2
.1fa8	b5 58		lda $58,x			lda 	esInt2,x
.1faa	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1fac	d0 07		bne $1fb5			bne 	MInt32Compare2
.1fae	b5 60		lda $60,x			lda 	esInt3,x
.1fb0	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1fb2	d0 01		bne $1fb5			bne 	MInt32Compare2
.1fb4	60		rts				rts
.1fb5					MInt32Compare2:
.1fb5	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1fb7	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fb9	b5 50		lda $50,x			lda		esInt1,x
.1fbb	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1fbd	b5 58		lda $58,x			lda		esInt2,x
.1fbf	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1fc1	b5 60		lda $60,x			lda		esInt3,x
.1fc3	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1fc5	50 02		bvc $1fc9			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1fc7	49 80		eor #$80			eor 	#$80
.1fc9					_I32LNoOverflow
.1fc9	30 03		bmi $1fce			bmi 	MInt32CLess					; if -ve then return $FF
.1fcb	a9 01		lda #$01			lda 	#$01						; else return $01
.1fcd	60		rts				rts
.1fce					MInt32CLess:
.1fce	a9 ff		lda #$ff			lda 	#$FF
.1fd0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1fd1					MInt32SDivide:
.1fd1	98		tya				tya  								; save Y, which is the count of negations
.1fd2	48		pha				pha
.1fd3	a0 00		ldy #$00			ldy 	#0 							; zero count
.1fd5	20 ed 1f	jsr $1fed			jsr 	_MInt32SRemSign 			; unsign TOS
.1fd8	e8		inx				inx 								; unsign TOS+1
.1fd9	20 ed 1f	jsr $1fed			jsr 	_MInt32SRemSign
.1fdc	ca		dex				dex
.1fdd	98		tya				tya 								; save sign count on stack
.1fde	48		pha				pha
.1fdf	20 f6 1f	jsr $1ff6			jsr 	MInt32UDivide 				; unsigned division
.1fe2	68		pla				pla 								; get sign count back
.1fe3	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1fe5	f0 03		beq $1fea			beq 	_I32SNoNeg
.1fe7	20 aa 21	jsr $21aa			jsr 	MInt32Negate
.1fea					_I32SNoNeg:
.1fea	68		pla				pla 								; restoe Y and exit
.1feb	a8		tay				tay
.1fec	60		rts				rts
.1fed					_MInt32SRemSign:
.1fed	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1fef	10 04		bpl $1ff5			bpl 	_MInt32SRSExit
.1ff1	c8		iny				iny 								; increment the sign count
.1ff2	20 aa 21	jsr $21aa			jsr 	MInt32Negate 				; negate the value.
.1ff5					_MInt32SRSExit:
.1ff5	60		rts				rts
.1ff6					MInt32UDivide:
.1ff6	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1ff8	15 51		ora $51,x			ora 	esInt1+1,x
.1ffa	15 52		ora $52,x			ora 	esInt1+2,x
.1ffc	15 53		ora $53,x			ora 	esInt1+3,x
.1ffe	f0 4a		beq $204a			beq 	_MInt32DZero
.2000	e8		inx				inx 								; clear A
.2001	e8		inx				inx
.2002	20 f0 21	jsr $21f0			jsr 	MInt32False
.2005	ca		dex				dex
.2006	ca		dex				dex
.2007	98		tya				tya 								; save Y on the stack
.2008	48		pha				pha
.2009	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.200b					_MInt32UDLoop:
.200b	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.200d	36 50		rol $50,x			rol 	esInt1,x
.200f	36 58		rol $58,x			rol 	esInt2,x
.2011	36 60		rol $60,x			rol 	esInt3,x
.2013	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2015	36 52		rol $52,x			rol 	esInt1+2,x
.2017	36 5a		rol $5a,x			rol 	esInt2+2,x
.2019	36 62		rol $62,x			rol 	esInt3+2,x
.201b	38		sec				sec 								; calculate A-M saving result on the stack
.201c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.201e	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2020	48		pha				pha
.2021	b5 52		lda $52,x			lda 	esInt1+2,x
.2023	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2025	48		pha				pha
.2026	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2028	f5 59		sbc $59,x			sbc 	esInt2+1,x
.202a	48		pha				pha
.202b	b5 62		lda $62,x			lda 	esInt3+2,x
.202d	f5 61		sbc $61,x			sbc 	esInt3+1,x
.202f	90 10		bcc $2041			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2031	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2033	68		pla				pla
.2034	95 5a		sta $5a,x			sta 	esInt2+2,x
.2036	68		pla				pla
.2037	95 52		sta $52,x			sta 	esInt1+2,x
.2039	68		pla				pla
.203a	95 4a		sta $4a,x			sta 	esInt0+2,x
.203c	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.203e	4c 44 20	jmp $2044			jmp 	_MInt32Next 					; do the next iteration
.2041					_MInt32NoSubtract:
.2041	68		pla				pla
.2042	68		pla				pla
.2043	68		pla				pla
.2044					_MInt32Next:
.2044	88		dey				dey 								; do this 32 times.
.2045	d0 c4		bne $200b			bne 	_MInt32UDLoop
.2047	68		pla				pla 								; restore Y and exit
.2048	a8		tay				tay
.2049	60		rts				rts
.204a					_MInt32DZero:
.204a	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.204c	20 a3 23	jsr $23a3		jsr	errorHandler
.204f					MInt32Modulus:
.204f	20 f6 1f	jsr $1ff6			jsr 	MInt32UDivide 				; do the division.
.2052	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2054	95 60		sta $60,x			sta 	esInt3,x
.2056	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2058	95 58		sta $58,x			sta 	esInt2,x
.205a	b5 52		lda $52,x			lda 	esInt1+2,x
.205c	95 50		sta $50,x			sta 	esInt1,x
.205e	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2060	95 48		sta $48,x			sta 	esInt0,x
.2062	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0b1a					fs32Length:
>0b1a							.fill 	1
.2063					MInt32FromString:
.2063	85 0c		sta $0c				sta 	tempShort 					; save base
.2065	98		tya				tya
.2066	48		pha				pha
.2067	a0 00		ldy #$00			ldy 	#0 							; get length
.2069	b1 04		lda ($04),y			lda 	(temp0),y
.206b	8d 1a 0b	sta $0b1a			sta 	fs32Length
.206e	f0 65		beq $20d5			beq 	_I32FSFail2					; fail if length zero.
.2070	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2072	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.2074	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2076	d0 09		bne $2081			bne 	_I32FSNotNegative
.2078	ad 1a 0b	lda $0b1a			lda 	fs32Length 					; get length back.
.207b	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.207d	f0 56		beq $20d5			beq 	_I32FSFail2
.207f	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2081					_I32FSNotNegative:
.2081	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.2083	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2085	d0 02		bne $2089			bne 	_I32FSNN2
.2087	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2089					_I32FSNN2:
.2089	48		pha				pha 								; save base + final sign on stack.
.208a	20 f0 21	jsr $21f0			jsr 	MInt32False 				; zero the return value.
.208d					_I32FSMainLoop:
.208d	68		pla				pla 								; get the base back into tempShort
.208e	48		pha				pha
.208f	29 7f		and #$7f			and 	#$7F
.2091	85 0c		sta $0c				sta 	tempShort
.2093	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.2095	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2097	90 02		bcc $209b			bcc 	_I32FSNotLC
.2099	e9 20		sbc #$20			sbc 	#32
.209b					_I32FSNotLC:
.209b	38		sec				sec 								; subtract 48 (ASCII "0")
.209c	e9 30		sbc #$30			sbc 	#"0"
.209e	90 34		bcc $20d4			bcc 	_I32FSFail 					; nothing more to do.
.20a0	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.20a2	90 06		bcc $20aa			bcc 	_I32FSValidate
.20a4	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.20a6	90 2c		bcc $20d4			bcc 	_I32FSFail
.20a8	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.20aa					_I32FSValidate:
.20aa	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.20ac	b0 26		bcs $20d4			bcs 	_I32FSFail 					; sorry, too large for this base.
.20ae	48		pha				pha 								; save the new digit value.
.20af	e8		inx				inx 								; put base into next slot.
.20b0	a5 0c		lda $0c				lda 	tempShort
.20b2	20 ff 21	jsr $21ff			jsr 	MInt32Set8Bit
.20b5	ca		dex				dex
.20b6	20 0d 21	jsr $210d			jsr 	MInt32Multiply 				; multiply current by the base
.20b9	e8		inx				inx
.20ba	68		pla				pla  								; put additive into next slot
.20bb	20 ff 21	jsr $21ff			jsr 	MInt32Set8Bit
.20be	ca		dex				dex
.20bf	20 d9 20	jsr $20d9			jsr 	MInt32Add 					; and add it
.20c2	c8		iny				iny 								; look at next character
.20c3	cc 1a 0b	cpy $0b1a			cpy 	fs32Length 					; until > length.
.20c6	f0 c5		beq $208d			beq 	_I32FSMainLoop
.20c8	90 c3		bcc $208d			bcc 	_I32FSMainLoop
.20ca					_I32FSDone:
.20ca	68		pla				pla 								; get base/final sign back
.20cb	10 03		bpl $20d0			bpl 	_I32FSNN3
.20cd	20 aa 21	jsr $21aa			jsr 	MInt32Negate 				; negate the result.
.20d0					_I32FSNN3:
.20d0	68		pla				pla
.20d1	a8		tay				tay
.20d2	38		sec				sec
.20d3	60		rts				rts
.20d4					_I32FSFail:
.20d4	68		pla				pla
.20d5					_I32FSFail2:
.20d5	68		pla				pla
.20d6	a8		tay				tay
.20d7	18		clc				clc
.20d8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.20d9					MInt32Add:
.20d9	18		clc				clc
.20da	b5 48		lda $48,x			lda 	esInt0,x
.20dc	75 49		adc $49,x			adc 	esInt0+1,x
.20de	95 48		sta $48,x			sta 	esInt0,x
.20e0	b5 50		lda $50,x			lda 	esInt1,x
.20e2	75 51		adc $51,x			adc 	esInt1+1,x
.20e4	95 50		sta $50,x			sta 	esInt1,x
.20e6	b5 58		lda $58,x			lda 	esInt2,x
.20e8	75 59		adc $59,x			adc 	esInt2+1,x
.20ea	95 58		sta $58,x			sta 	esInt2,x
.20ec	b5 60		lda $60,x			lda 	esInt3,x
.20ee	75 61		adc $61,x			adc 	esInt3+1,x
.20f0	95 60		sta $60,x			sta 	esInt3,x
.20f2	60		rts				rts
.20f3					MInt32Sub:
.20f3	38		sec				sec
.20f4	b5 48		lda $48,x			lda 	esInt0,x
.20f6	f5 49		sbc $49,x			sbc 	esInt0+1,x
.20f8	95 48		sta $48,x			sta 	esInt0,x
.20fa	b5 50		lda $50,x			lda 	esInt1,x
.20fc	f5 51		sbc $51,x			sbc 	esInt1+1,x
.20fe	95 50		sta $50,x			sta 	esInt1,x
.2100	b5 58		lda $58,x			lda 	esInt2,x
.2102	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2104	95 58		sta $58,x			sta 	esInt2,x
.2106	b5 60		lda $60,x			lda 	esInt3,x
.2108	f5 61		sbc $61,x			sbc 	esInt3+1,x
.210a	95 60		sta $60,x			sta 	esInt3,x
.210c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.210d					MInt32Multiply:
.210d	e8		inx				inx 								; copy 2nd -> 3rd
.210e	20 33 21	jsr $2133			jsr 	MInt32CopyUp
.2111	ca		dex				dex
.2112	20 33 21	jsr $2133			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2115	20 f0 21	jsr $21f0			jsr 	MInt32False 					; zero 1st.
.2118					_I32Loop:
.2118	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.211a	29 01		and #$01			and 	#1
.211c	f0 03		beq $2121			beq 	_I32NoAdd 					; if set
.211e	20 d9 20	jsr $20d9			jsr 	MInt32Add 					; add 2nd to 1st.
.2121					_I32NoAdd:
.2121	e8		inx				inx 								; shift 2nd left
.2122	20 05 22	jsr $2205			jsr 	MInt32ShiftLeft
.2125	e8		inx				inx  								; shift 3rd right
.2126	20 0e 22	jsr $220e			jsr 	MInt32ShiftRight
.2129	20 17 22	jsr $2217			jsr 	MInt32Zero 					; check if zero.
.212c	08		php				php 								; save status bits
.212d	ca		dex				dex 	 							; point back to 1st
.212e	ca		dex				dex
.212f	28		plp				plp 								; get status bits
.2130	d0 e6		bne $2118			bne 	_I32Loop 					; if non-zero keep going.
.2132	60		rts				rts
.2133					MInt32CopyUp:
.2133	b5 48		lda $48,x			lda 	esInt0,x
.2135	95 49		sta $49,x			sta 	esInt0+1,x
.2137	b5 50		lda $50,x			lda 	esInt1,x
.2139	95 51		sta $51,x			sta 	esInt1+1,x
.213b	b5 58		lda $58,x			lda 	esInt2,x
.213d	95 59		sta $59,x			sta 	esInt2+1,x
.213f	b5 60		lda $60,x			lda 	esInt3,x
.2141	95 61		sta $61,x			sta 	esInt3+1,x
.2143	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0b1b					MCharCount:	.fill 	1						; count of converted characters
.2144					MLInt32ToString:
.2144	aa		tax				tax									; module passes stack in A, base in Y
.2145	98		tya				tya
.2146					MInt32ToString:
.2146	48		pha				pha 								; save base
.2147	85 0c		sta $0c				sta 	tempShort 					; save target base.
.2149	a9 00		lda #$00			lda 	#0
.214b	8d 1b 0b	sta $0b1b			sta 	MCharCount 					; clear character count to 0
.214e	98		tya				tya
.214f	48		pha				pha
.2150	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.2152	10 10		bpl $2164			bpl 	_I32TSUnsigned
.2154	48		pha				pha 								; save base on stack.
.2155	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2157	10 08		bpl $2161			bpl 	_I32TSNoFlip
.2159	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.215b	20 97 21	jsr $2197			jsr 	MI32WriteCharacter
.215e	20 aa 21	jsr $21aa			jsr 	MInt32Negate 				; negate the value.
.2161					_I32TSNoFlip:
.2161	68		pla				pla 								; get the base back
.2162	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2164					_I32TSUnsigned:
.2164	20 72 21	jsr $2172			jsr 	MI32DivideWrite 			; recursive code to output string.
.2167	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2169	ad 1b 0b	lda $0b1b			lda 	MCharCount
.216c	91 04		sta ($04),y			sta 	(temp0),y
.216e	68		pla				pla
.216f	a8		tay				tay
.2170	68		pla				pla
.2171	60		rts				rts
.2172					MI32DivideWrite:
.2172	48		pha				pha 								; save the divisor/base
.2173	e8		inx				inx 								; write in the dividing position.
.2174	20 ff 21	jsr $21ff			jsr 	MInt32Set8Bit
.2177	ca		dex				dex
.2178	20 f6 1f	jsr $1ff6			jsr 	MInt32UDivide 				; divide number by base.
.217b	68		pla				pla 								; get the base into Y
.217c	a8		tay				tay
.217d	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.217f	48		pha				pha
.2180	20 17 22	jsr $2217			jsr 	MInt32Zero 					; is the result zero ?
.2183	f0 04		beq $2189			beq 	_I32NoRecurse 				; if so, don't recurse.
.2185	98		tya				tya 								; put base into A
.2186	20 72 21	jsr $2172			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2189					_I32NoRecurse:
.2189	68		pla				pla 								; get the remainder back
.218a	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.218c	90 02		bcc $2190			bcc 	_I32NotHex
.218e	69 06		adc #$06			adc 	#7-1
.2190					_I32NotHex:
.2190	18		clc				clc 								; make it ASCII
.2191	69 30		adc #$30			adc 	#48
.2193	20 97 21	jsr $2197			jsr 	MI32WriteCharacter 			; write the character out
.2196	60		rts				rts 								; and exit.
.2197					MI32WriteCharacter:
.2197	ee 1b 0b	inc $0b1b			inc 	MCharCount 					; bump count (space for leading count)
.219a	ac 1b 0b	ldy $0b1b			ldy 	MCharCount 					; get position
.219d	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.219f	c8		iny				iny
.21a0	a9 00		lda #$00			lda 	#0
.21a2	91 04		sta ($04),y			sta 	(temp0),y
.21a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0b1c					MSeed32:	.fill 	4							; random number seed.
.21a5					MInt32Absolute:
.21a5	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.21a7	30 01		bmi $21aa			bmi 	MInt32Negate
.21a9	60		rts				rts
.21aa					MInt32Negate:
.21aa	38		sec				sec
.21ab	a9 00		lda #$00			lda 	#0
.21ad	f5 48		sbc $48,x			sbc 	esInt0,x
.21af	95 48		sta $48,x			sta 	esInt0,x
.21b1	a9 00		lda #$00			lda 	#0
.21b3	f5 50		sbc $50,x			sbc 	esInt1,x
.21b5	95 50		sta $50,x			sta 	esInt1,x
.21b7	a9 00		lda #$00			lda 	#0
.21b9	f5 58		sbc $58,x			sbc 	esInt2,x
.21bb	95 58		sta $58,x			sta 	esInt2,x
.21bd	a9 00		lda #$00			lda 	#0
.21bf	f5 60		sbc $60,x			sbc 	esInt3,x
.21c1	95 60		sta $60,x			sta 	esInt3,x
.21c3	60		rts				rts
.21c4					MInt32Not:
.21c4	b5 48		lda $48,x			lda 	esInt0,x
.21c6	49 ff		eor #$ff			eor 	#$FF
.21c8	95 48		sta $48,x			sta 	esInt0,x
.21ca	b5 50		lda $50,x			lda 	esInt1,x
.21cc	49 ff		eor #$ff			eor 	#$FF
.21ce	95 50		sta $50,x			sta 	esInt1,x
.21d0	b5 58		lda $58,x			lda 	esInt2,x
.21d2	49 ff		eor #$ff			eor 	#$FF
.21d4	95 58		sta $58,x			sta 	esInt2,x
.21d6	b5 60		lda $60,x			lda 	esInt3,x
.21d8	49 ff		eor #$ff			eor 	#$FF
.21da	95 60		sta $60,x			sta 	esInt3,x
.21dc	60		rts				rts
.21dd					MInt32Sign:
.21dd	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.21df	30 0b		bmi $21ec			bmi 	MInt32True 					; if set return -1 (true)
.21e1	20 17 22	jsr $2217			jsr 	MInt32Zero 					; is it zero ?
.21e4	f0 0a		beq $21f0			beq 	MInt32False 					; if zero return 0 (false)
.21e6	20 f0 21	jsr $21f0			jsr 	MInt32False 					; > 0 return 1
.21e9	f6 48		inc $48,x			inc 	esInt0,x
.21eb	60		rts				rts
.21ec					MInt32True:
.21ec	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.21ee	d0 02		bne $21f2			bne 	MInt32WriteAll
.21f0					MInt32False:
.21f0	a9 00		lda #$00			lda 	#0
.21f2					MInt32WriteAll:
.21f2	95 48		sta $48,x			sta 	esInt0,x
.21f4					MInt32Write123:
.21f4	95 50		sta $50,x			sta 	esInt1,x
.21f6	95 58		sta $58,x			sta 	esInt2,x
.21f8	95 60		sta $60,x			sta 	esInt3,x
.21fa	a9 00		lda #$00			lda 	#$00						; and make it an integer
.21fc	95 40		sta $40,x			sta 	esType,x
.21fe	60		rts				rts
.21ff					MInt32Set8Bit:
.21ff	95 48		sta $48,x			sta 	esInt0,x
.2201	a9 00		lda #$00			lda 	#0
.2203	f0 ef		beq $21f4			beq		MInt32Write123
.2205					MInt32ShiftLeft:
.2205	16 48		asl $48,x			asl 	esInt0,x
.2207	36 50		rol $50,x			rol	 	esInt1,x
.2209	36 58		rol $58,x			rol	 	esInt2,x
.220b	36 60		rol $60,x			rol	 	esInt3,x
.220d	60		rts				rts
.220e					MInt32ShiftRight:
.220e	56 60		lsr $60,x			lsr 	esInt3,x
.2210	76 58		ror $58,x			ror 	esInt2,x
.2212	76 50		ror $50,x			ror 	esInt1,x
.2214	76 48		ror $48,x			ror 	esInt0,x
.2216	60		rts				rts
.2217					MInt32Zero:
.2217	b5 48		lda $48,x			lda 	esInt0,x
.2219	15 50		ora $50,x			ora 	esInt1,x
.221b	15 58		ora $58,x			ora 	esInt2,x
.221d	15 60		ora $60,x			ora 	esInt3,x
.221f	60		rts				rts
.2220					MInt32Random:
.2220	98		tya				tya
.2221	48		pha				pha
.2222	a0 07		ldy #$07			ldy 	#7
.2224	ad 1c 0b	lda $0b1c			lda 	MSeed32+0
.2227	d0 03		bne $222c			bne 	_Random1
.2229	a8		tay				tay
.222a	a9 aa		lda #$aa			lda		#$AA
.222c					_Random1:
.222c	0a		asl a				asl 	a
.222d	2e 1d 0b	rol $0b1d			rol 	MSeed32+1
.2230	2e 1e 0b	rol $0b1e			rol 	MSeed32+2
.2233	2e 1f 0b	rol $0b1f			rol 	MSeed32+3
.2236	90 02		bcc $223a			bcc 	_Random2
.2238	49 c5		eor #$c5			eor 	#$C5
.223a					_Random2:
.223a	88		dey				dey
.223b	d0 ef		bne $222c			bne 	_Random1
.223d	8d 1c 0b	sta $0b1c			sta 	MSeed32+0
.2240	95 48		sta $48,x			sta 	esInt0,x
.2242	ad 1d 0b	lda $0b1d			lda 	MSeed32+1
.2245	95 50		sta $50,x			sta 	esInt1,x
.2247	ad 1e 0b	lda $0b1e			lda 	MSeed32+2
.224a	95 58		sta $58,x			sta 	esInt2,x
.224c	ad 1f 0b	lda $0b1f			lda 	MSeed32+3
.224f	95 60		sta $60,x			sta 	esInt3,x
.2251	68		pla				pla
.2252	a8		tay				tay
.2253	a9 00		lda #$00			lda 	#0
.2255	95 40		sta $40,x			sta 	esType,x
.2257	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2258					CheckToken:
.2258	d1 02		cmp ($02),y			cmp 	(codePtr),y
.225a	d0 02		bne $225e			bne 	_CTError
.225c	c8		iny				iny
.225d	60		rts				rts
.225e					_CTError:
.225e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2260	20 a3 23	jsr $23a3		jsr	errorHandler
.2263					CheckRightParen:
.2263	b1 02		lda ($02),y			lda 	(codePtr),y
.2265	c8		iny				iny
.2266	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2268	d0 01		bne $226b			bne 	_CRPError
.226a	60		rts				rts
.226b					_CRPError:
.226b	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.226d	20 a3 23	jsr $23a3		jsr	errorHandler
.2270					CheckComma:
.2270	b1 02		lda ($02),y			lda 	(codePtr),y
.2272	c8		iny				iny
.2273	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.2275	d0 01		bne $2278			bne 	_CCError
.2277	60		rts				rts
.2278					_CCError:
.2278	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.227a	20 a3 23	jsr $23a3		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.31dc					ScanForward:
.31dc	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.31de	86 07		stx $07				stx 	temp1+1
.31e0	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.31e2	85 08		sta $08				sta 	temp2
.31e4	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.31e6	c8		iny				iny
.31e7	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.31e9	d0 08		bne $31f3			bne 	_SFNoCheck 					; if so, check token against entered values.
.31eb	c5 06		cmp $06				cmp 	temp1
.31ed	f0 24		beq $3213			beq 	_SFExit
.31ef	c5 07		cmp $07				cmp 	temp1+1
.31f1	f0 20		beq $3213			beq 	_SFExit
.31f3					_SFNoCheck:
.31f3	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.31f5	90 ed		bcc $31e4			bcc 	_SFLoop
.31f7	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.31f9	90 19		bcc $3214			bcc 	_SFSpecials
.31fb	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.31fd	90 e5		bcc $31e4			bcc 	_SFLoop
.31ff	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.3201	b0 e1		bcs $31e4			bcs 	_SFLoop
.3203	aa		tax				tax  								; token in X, and look up the adjuster.
.3204	bd bd 1b	lda $1bbd,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.3207	38		sec				sec 								; convert to an offset
.3208	e9 81		sbc #$81			sbc 	#$81
.320a	18		clc				clc 								; add to depth
.320b	65 08		adc $08				adc 	temp2
.320d	85 08		sta $08				sta 	temp2
.320f	10 d3		bpl $31e4			bpl 	_SFLoop 					; +ve okay to continue
.3211	30 35		bmi $3248			bmi 	_SFError 					; if gone -ve then we have a nesting error
.3213	60		rts		_SFExit:rts
.3214					_SFSpecials:
.3214	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.3216	f0 14		beq $322c			beq 	_SFNextLine
.3218	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.321a	f0 31		beq $324d			beq 	_SFFloatSkip
.321c	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.321e	f0 04		beq $3224			beq 	_SFSkipString
.3220	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.3221	4c e4 31	jmp $31e4			jmp 	_SFLoop 					; token.
.3224					_SFSkipString:
.3224	98		tya				tya
.3225	38		sec				sec
.3226	71 02		adc ($02),y			adc 	(codePtr),y
.3228	a8		tay				tay
.3229	4c e4 31	jmp $31e4			jmp 	_SFLoop
.322c					_SFNextLine:
.322c	a0 00		ldy #$00			ldy 	#0 							; get offset
.322e	b1 02		lda ($02),y			lda 	(codePtr),y
.3230	18		clc				clc 								; add to code pointer.
.3231	65 02		adc $02				adc 	codePtr
.3233	85 02		sta $02				sta 	codePtr
.3235	90 02		bcc $3239			bcc		_SFNLNoCarry
.3237	e6 03		inc $03				inc 	codePtr+1
.3239					_SFNLNoCarry:
.3239	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.323b	d0 a7		bne $31e4			bne		_SFLoop 					; no go round again
.323d	a5 06		lda $06				lda 	temp1
.323f	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.3241	d0 05		bne $3248			bne 	_SFError
.3243	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.3245	20 a3 23	jsr $23a3		jsr	errorHandler
.3248					_SFError:
.3248	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.324a	20 a3 23	jsr $23a3		jsr	errorHandler
.324d					_SFFloatSkip:
.324d	4c 40 15	jmp $1540			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.227d					RSReset:
.227d	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.227f	85 78		sta $78				sta 	rsPointer
.2281	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2283	85 79		sta $79				sta 	1+(rsPointer)
.2285	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2287	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.228a	60		rts				rts
.228b					RSClaim:
.228b	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.228d	48		pha				pha 								; save marker on stack.
.228e	8a		txa				txa 								; get bytes required.
.228f	38		sec				sec
.2290	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2292	65 78		adc $78				adc 	rsPointer
.2294	85 78		sta $78				sta 	rsPointer
.2296	a5 79		lda $79				lda 	rsPointer+1
.2298	69 ff		adc #$ff			adc 	#$FF
.229a	85 79		sta $79				sta 	rsPointer+1
.229c	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.229e	90 08		bcc $22a8			bcc 	_RSCOverflow
.22a0	68		pla				pla 								; get marker back
.22a1	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.22a3	91 78		sta ($78),y			sta 	(rsPointer),y
.22a5	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.22a7	60		rts				rts
.22a8					_RSCOverflow:
.22a8	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.22aa	20 a3 23	jsr $23a3		jsr	errorHandler
.22ad					RSFree:
.22ad	18		clc				clc
.22ae	65 78		adc $78				adc 	rsPointer
.22b0	85 78		sta $78				sta 	rsPointer
.22b2	90 02		bcc $22b6			bcc 	_RSFExit
.22b4	e6 79		inc $79				inc 	rsPointer+1
.22b6					_RSFExit:
.22b6	60		rts				rts
.22b7					RSSavePosition:
.22b7	84 0c		sty $0c				sty 	tempShort 					; save Y position
.22b9	a8		tay				tay 								; this is where we write it.
.22ba	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.22bc	91 78		sta ($78),y			sta 	(rsPointer),y
.22be	c8		iny				iny
.22bf	a5 03		lda $03				lda 	codePtr+1
.22c1	91 78		sta ($78),y			sta 	(rsPointer),y
.22c3	c8		iny				iny
.22c4	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.22c6	91 78		sta ($78),y			sta 	(rsPointer),y
.22c8	a8		tay				tay 								; fix Y back again to original value
.22c9	60		rts				rts
.22ca					RSLoadPosition:
.22ca	a8		tay				tay
.22cb	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.22cd	85 02		sta $02				sta 	codePtr
.22cf	c8		iny				iny
.22d0	b1 78		lda ($78),y			lda 	(rsPointer),y
.22d2	85 03		sta $03				sta 	codePtr+1
.22d4	c8		iny				iny
.22d5	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.22d7	a8		tay				tay 								; to Y
.22d8	60		rts				rts

;******  Return to file: main/main.asm

.22d9					mainHandler:
.22d9	7c dc 22	jmp ($22dc,x)			jmp 	(mainVectors,x)
.22dc					mainVectors:
>22dc	63 22					.word CheckRightParen      ; index 0
>22de	ea 1b					.word LinkEvaluate         ; index 2
>22e0	f6 1b					.word LinkEvaluateInteger  ; index 4
>22e2	fc 1b					.word LinkEvaluateSmallInt ; index 6
>22e4	f0 1b					.word LinkEvaluateTerm     ; index 8
>22e6	44 21					.word MLInt32ToString      ; index 10
>22e8	bc 13					.word PrintString          ; index 12

;******  Return to file: basic.asm

.22ea					section_end_main:
.22ea					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.22ea					assemblerHandler:
.22ea	7c ed 22	jmp ($22ed,x)			jmp 	(assemblerVectors,x)
.22ed					assemblerVectors:

;******  Return to file: basic.asm

.22ed					section_end_assembler:
.22ed					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.22ed					IOInitialise:
.22ed	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.22ef	20 18 23	jsr $2318			jsr 	IOPrintChar
.22f2	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.22f4	20 44 23	jsr $2344			jsr 	IOInk
.22f7	a9 00		lda #$00			lda 	#0
.22f9	20 58 23	jsr $2358			jsr 	IOPaper
.22fc	20 00 23	jsr $2300			jsr 	IOClearScreen
.22ff	60		rts				rts
.2300					IOClearScreen:
.2300	48		pha				pha
.2301	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.2303	20 18 23	jsr $2318			jsr 	IOPrintChar
.2306	68		pla				pla
.2307	60		rts				rts
.2308					IONewLine:
.2308	48		pha				pha
.2309	a9 0d		lda #$0d			lda 	#13
.230b	20 18 23	jsr $2318			jsr 	IOPrintChar
.230e	68		pla				pla
.230f	60		rts				rts
.2310					IOTab:
.2310	48		pha				pha
.2311	a9 20		lda #$20			lda 	#32
.2313	20 18 23	jsr $2318			jsr 	IOPrintChar
.2316	68		pla				pla
.2317	60		rts				rts
.2318					IOPrintChar:
.2318	aa		tax				tax 								; save in X so we can save Y
.2319	5a		phy				phy
.231a	8a		txa				txa
.231b	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.231d	d0 02		bne $2321			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.231f	a9 14		lda #$14			lda 	#$14
.2321					_IOPCNotBS:
.2321	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.2324	7a		ply				ply
.2325	60		rts				rts
.2326					IOInkey:
.2326	98		tya				tya
.2327	48		pha				pha
.2328	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.232b	85 0c		sta $0c				sta 	tempShort
.232d	68		pla				pla
.232e	a8		tay				tay
.232f	a5 0c		lda $0c				lda 	tempShort					; no key pressed.
.2331	f0 10		beq $2343			beq 	_IOIExit
.2333	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.2335	f0 0c		beq $2343			beq 	_IOIExit
.2337	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.2339	f0 06		beq $2341			beq 	_IOIBackspace
.233b	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.233d	90 e7		bcc $2326			bcc 	IOInkey
.233f	b0 02		bcs $2343			bcs 	_IOIExit
.2341					_IOIBackspace:
.2341	a9 08		lda #$08			lda 	#8 							; return chr(8)
.2343					_IOIExit:
.2343	60		rts				rts
.2344					IOInk:
.2344	48		pha				pha
.2345	29 07		and #$07			and 	#7 							; 8 primaries
.2347	aa		tax				tax
.2348	bd 50 23	lda $2350,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.234b	20 18 23	jsr $2318			jsr 	IOPrintChar
.234e	68		pla				pla
.234f	60		rts				rts
.2350					_IOColourTable:
>2350	90						.byte 	$90 					; 0 Black
>2351	96						.byte 	$96 					; 1 Red
>2352	1e						.byte 	$1E 					; 2 Green
>2353	9e						.byte 	$9E 					; 3 Yellow
>2354	9a						.byte 	$9A 					; 4 Blue
>2355	9c						.byte 	$9C 					; 5 Magenta
>2356	9f						.byte 	$9F 					; 6 Cyan
>2357	05						.byte 	$05 					; 7 White
.2358					IOPaper:
.2358	48		pha				pha
.2359	48		pha				pha
.235a	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.235c	20 18 23	jsr $2318			jsr 	IOPrintChar 			; and then swap them again.
.235f	68		pla				pla
.2360	20 44 23	jsr $2344			jsr 	IOInk
.2363	a9 01		lda #$01			lda 	#1
.2365	20 18 23	jsr $2318			jsr 	IOPrintChar
.2368	68		pla				pla
.2369	60		rts				rts
.236a					IOLocate:
.236a	48		pha				pha
.236b	a9 13		lda #$13			lda 	#$13 					; home cursor code
.236d	20 18 23	jsr $2318			jsr 	IOPrintChar
.2370	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.2372	20 79 23	jsr $2379			jsr 	_IOLoc2
.2375	68		pla				pla
.2376	a8		tay				tay
.2377	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.2379					_IOLoc2:
.2379	c0 00		cpy #$00			cpy 	#0
.237b	f0 06		beq $2383			beq 	_IOLocExit
.237d	20 18 23	jsr $2318			jsr 	IOPrintChar
.2380	88		dey				dey
.2381	d0 f6		bne $2379			bne 	_IOLoc2
.2383					_IOLocExit:
.2383	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.2384					IOReadTimer:
.2384	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.2387	48		pha				pha
.2388	8a		txa				txa
.2389	a8		tay				tay
.238a	68		pla				pla
.238b	60		rts				rts

;******  Return to file: device/device.asm

.238c					deviceHandler:
.238c	7c 8f 23	jmp ($238f,x)			jmp 	(deviceVectors,x)
.238f					deviceVectors:
>238f	00 23					.word IOClearScreen        ; index 0
>2391	08 23					.word IONewLine            ; index 2
>2393	ed 22					.word IOInitialise         ; index 4
>2395	44 23					.word IOInk                ; index 6
>2397	26 23					.word IOInkey              ; index 8
>2399	6a 23					.word IOLocate             ; index 10
>239b	58 23					.word IOPaper              ; index 12
>239d	18 23					.word IOPrintChar          ; index 14
>239f	10 23					.word IOTab                ; index 16
>23a1	84 23					.word IOReadTimer          ; index 18

;******  Return to file: basic.asm

.23a3					section_end_device:
.23a3					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.23a3					ErrorHandler:
.23a3	a9 03		lda #$03			lda 	#(ErrorTextList) & $FF
.23a5	85 04		sta $04				sta 	temp0
.23a7	a9 24		lda #$24			lda 	#(ErrorTextList) >> 8
.23a9	85 05		sta $05				sta 	1+(temp0)
.23ab	ca		dex		_EHFind:dex									; errors start at 1
.23ac	f0 10		beq $23be			beq 	_EHFound
.23ae	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.23b0	38		sec				sec
.23b1	a5 04		lda $04				lda 	temp0
.23b3	71 04		adc ($04),y			adc 	(temp0),y
.23b5	85 04		sta $04				sta 	temp0
.23b7	90 f2		bcc $23ab			bcc 	_EHFind
.23b9	e6 05		inc $05				inc 	temp0+1
.23bb	4c ab 23	jmp $23ab			jmp 	_EHFind
.23be					_EHFound:
.23be	a2 0c		ldx #$0c		ldx	#12
.23c0	20 d9 22	jsr $22d9		jsr	mainHandler
.23c3	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.23c5	b1 02		lda ($02),y			lda 	(codePtr),y
.23c7	f0 33		beq $23fc			beq 	_EHNoLine
.23c9	a9 ff		lda #$ff			lda 	#(EHAtMsg) & $FF
.23cb	85 04		sta $04				sta 	temp0
.23cd	a9 23		lda #$23			lda 	#(EHAtMsg) >> 8
.23cf	85 05		sta $05				sta 	1+(temp0)
.23d1	a2 0c		ldx #$0c		ldx	#12
.23d3	20 d9 22	jsr $22d9		jsr	mainHandler
.23d6	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.23d8	a2 00		ldx #$00			ldx 	#0
.23da	20 f0 21	jsr $21f0			jsr 	MInt32False 				; erase slot 0.
.23dd	b1 02		lda ($02),y			lda 	(codePtr),y
.23df	95 48		sta $48,x			sta 	esInt0,x
.23e1	c8		iny				iny
.23e2	b1 02		lda ($02),y			lda 	(codePtr),y
.23e4	95 50		sta $50,x			sta 	esInt1,x
.23e6	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.23e8	85 04		sta $04				sta 	temp0
.23ea	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.23ec	85 05		sta $05				sta 	1+(temp0)
.23ee	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.23f0	a9 00		lda #$00			lda 	#0							; stack position zero.
.23f2	a2 0a		ldx #$0a		ldx	#10
.23f4	20 d9 22	jsr $22d9		jsr	mainHandler
.23f7	a2 0c		ldx #$0c		ldx	#12
.23f9	20 d9 22	jsr $22d9		jsr	mainHandler
.23fc					_EHNoLine:
.23fc	4c fc 23	jmp $23fc	_EHHalt:jmp 	_EHHalt
.23ff					EHAtMsg:
>23ff	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.2403					ErrorTextList:
>2403	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>240b	20 6e 6f 74 20 50 72 65 73 65 6e 74
>2417	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>241f	45 72 72 6f 72
>2424	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>242c	64 69 73 61 62 6c 65 64
>2434	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>243c	6f 6e 20 66 61 69 6c 65 64
>2445	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>244d	42 79 20 5a 65 72 6f
>2454	04 53 74 6f 70				.text 4,"Stop"
>2459	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>2461	73 6d 61 74 63 68
>2467	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>246f	20 56 61 6c 75 65
>2475	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>247d	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>248b	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>2493	20 63 6f 6d 6d 61
>2499	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>24a1	20 72 65 66 65 72 65 6e 63 65
>24ab	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>24b3	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>24c1	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>24c9	74 6f 6f 20 6c 6f 6e 67 2e
>24d2	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>24da	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>24e7	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>24ef	69 74 68 6f 75 74 20 52 45 50 45 41 54
>24fc	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>2504	74 68 6f 75 74 20 46 4f 52
>250d	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>2515	74 68 6f 75 74 20 57 48 49 4c 45
>2520	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>2528	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>2535	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>253d	54 20 69 6e 64 65 78
>2544	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>254c	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>255c	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>2564	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>2573	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>257b	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>258b	63 65 2e
>258e	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>2596	20 50 72 6f 63 65 64 75 72 65
>25a0	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>25a8	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>25b8	2e
>25b9	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>25c1	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>25cf	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>25d7	75 69 72 65 73 20 61 72 72 61 79
>25e2	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>25ea	61 79 20 69 6e 64 65 78 2e
>25f3	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>25fb	64 61 74 61
>25ff	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2600					section_end_error:
.2600					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2600					ExtensionHandler:
.2600	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.2602	d0 08		bne $260c			bne 	_ExtensionUnary 			; is passed in A.
.2604	b1 02		lda ($02),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.2606	c8		iny				iny
.2607	0a		asl a				asl 	a
.2608	aa		tax				tax
.2609	7c 0a 26	jmp ($260a,x)			jmp 	(Group2Vectors-12,x)
.260c					_ExtensionUnary:
.260c	48		pha				pha 								; save stack pos in A
.260d	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token, double into X
.260f	c8		iny				iny
.2610	0a		asl a				asl 	a
.2611	aa		tax				tax
.2612	68		pla				pla 								; restore stack pos and call group3 command.
.2613	7c 0e 26	jmp ($260e,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.2616					Group2Vectors:
>2616	26 26					.word	Command_VPoke            ; $86 vpoke
>2618	29 26					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.261a					Group3Vectors:
>261a	6a 26					.word	Command_VPeek            ; $86 vpeek(
>261c	6d 26					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.261e					XEvaluateInteger:
.261e	8a		txa				txa
.261f	a2 04		ldx #$04		ldx	#4
.2621	20 d9 22	jsr $22d9		jsr	mainHandler
.2624	aa		tax				tax
.2625	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.2626					Command_VPoke:
.2626	38		sec				sec 						; one byte , CS
.2627	b0 01		bcs $262a			bcs 	CmdVideoWrite
.2629					Command_VDoke:
.2629	18		clc				clc 						; two bytes, CC
.262a					CmdVideoWrite:
.262a	08		php				php 						; save one or two btes
.262b	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.262d	20 1e 26	jsr $261e			jsr 	XEvaluateInteger
.2630	20 70 22	jsr $2270			jsr 	CheckComma
.2633	e8		inx				inx
.2634	20 1e 26	jsr $261e			jsr 	XEvaluateInteger
.2637	ca		dex				dex
.2638	20 49 26	jsr $2649			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.263b	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.263d	8d 23 9f	sta $9f23			sta 	$9F23
.2640	28		plp				plp 						; if it was Poke then exit
.2641	b0 05		bcs $2648			bcs 	_CVWExit
.2643	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.2645	8d 23 9f	sta $9f23			sta 	$9F23
.2648					_CVWExit:
.2648	60		rts				rts
.2649					SetUpTOSVRamAddress:
.2649	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.264b	29 01		and #$01			and 	#1
.264d	15 60		ora $60,x			ora 	esInt3,x
.264f	d0 14		bne $2665			bne 	CVWValue
.2651	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.2653	8d 20 9f	sta $9f20			sta 	$9F20
.2656	b5 50		lda $50,x			lda 	esInt1,x
.2658	8d 21 9f	sta $9f21			sta	 	$9F21
.265b	b5 58		lda $58,x			lda 	esInt2,x
.265d	29 01		and #$01			and 	#1
.265f	09 10		ora #$10			ora 	#$10 				; step 1.
.2661	8d 22 9f	sta $9f22			sta 	$9F22
.2664	60		rts				rts
.2665					CVWValue:
.2665	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2667	20 a3 23	jsr $23a3		jsr	errorHandler
.266a					Command_VPeek:
.266a	38		sec				sec 						; one byte , CS
.266b	b0 01		bcs $266e			bcs 	CmdVideoRead
.266d					Command_VDeek:
.266d	18		clc				clc 						; two bytes, CC
.266e					CmdVideoRead:
.266e	08		php				php 						; save action on stack.
.266f	aa		tax				tax 						; save stack position
.2670	20 1e 26	jsr $261e			jsr 	XEvaluateInteger 	; address
.2673	20 63 22	jsr $2263			jsr 	CheckRightParen 	; closing right bracket.
.2676	20 49 26	jsr $2649			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2679	20 f0 21	jsr $21f0			jsr 	MInt32False 		; zero return.
.267c	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.267f	95 48		sta $48,x			sta 	esInt0,x
.2681	28		plp				plp 						; check if DOKE (carry was clear)
.2682	b0 05		bcs $2689			bcs 	_CVRExit
.2684	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2687	95 50		sta $50,x			sta 	esInt1,x
.2689					_CVRExit:
.2689	8a		txa				txa 						; return X position.
.268a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.268b					section_end_extension:
.268b					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.268b					floatingpointHandler:
.268b	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.268d	20 a3 23	jsr $23a3		jsr	errorHandler

;******  Return to file: basic.asm

.2690					section_end_floatingpoint:
.2690					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.2690					interactionHandler:
.2690	7c 93 26	jmp ($2693,x)			jmp 	(interactionVectors,x)
.2693					interactionVectors:

;******  Return to file: basic.asm

.2693					section_end_interaction:
.2693					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2693					StringChrs:
.2693	aa		tax				tax 								; set up stack
.2694	a9 02		lda #$02			lda 	#2
.2696	20 4d 27	jsr $274d			jsr 	AllocateSoftString
.2699	98		tya				tya
.269a	20 73 27	jsr $2773			jsr 	WriteSoftString
.269d	20 a2 26	jsr $26a2			jsr 	ReturnSoftString
.26a0	8a		txa				txa
.26a1	60		rts				rts
.26a2					ReturnSoftString:
.26a2	a5 7a		lda $7a				lda 	softMemAlloc
.26a4	95 48		sta $48,x			sta 	esInt0,x
.26a6	a5 7b		lda $7b				lda 	softMemAlloc+1
.26a8	95 50		sta $50,x			sta 	esInt1,x
.26aa	a9 00		lda #$00			lda 	#0
.26ac	95 58		sta $58,x			sta 	esInt2,x
.26ae	95 60		sta $60,x			sta 	esInt3,x
.26b0	a9 40		lda #$40			lda 	#$40
.26b2	95 40		sta $40,x			sta 	esType,x
.26b4	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.26b5					STRCompare:
.26b5	48		pha				pha 								; save A
.26b6	aa		tax				tax 								; put stack pos in X
.26b7	98		tya				tya
.26b8	48		pha				pha
.26b9	20 ed 26	jsr $26ed			jsr 	CopyStringPair
.26bc	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.26be	b1 04		lda ($04),y			lda 	(temp0),y
.26c0	d1 06		cmp ($06),y			cmp 	(temp1),y
.26c2	90 02		bcc $26c6			bcc 	_SCNotSmaller
.26c4	b1 06		lda ($06),y			lda 	(temp1),y
.26c6					_SCNotSmaller:
.26c6	aa		tax				tax 								; put that in X. We compare this many chars first.
.26c7					_SCCompareLoop:
.26c7	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.26c9	f0 0c		beq $26d7			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.26cb	ca		dex				dex 								; decrement chars to compare.
.26cc	c8		iny				iny 								; move to next character
.26cd	38		sec				sec 								; calculate s1[y]-s2[y]
.26ce	b1 04		lda ($04),y			lda 	(temp0),y
.26d0	f1 06		sbc ($06),y			sbc 	(temp1),y
.26d2	d0 0a		bne $26de			bne 	_SCReturnResult 			; if different return sign of A
.26d4	4c c7 26	jmp $26c7			jmp 	_SCCompareLoop
.26d7					_SCSameToEndShortest
.26d7	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.26d9	38		sec				sec
.26da	b1 04		lda ($04),y			lda 	(temp0),y
.26dc	f1 06		sbc ($06),y			sbc 	(temp1),y
.26de					_SCReturnResult:
.26de	08		php				php 								; set return to zero preserving PSW.
.26df	a2 00		ldx #$00			ldx 	#0
.26e1	28		plp				plp
.26e2	f0 05		beq $26e9			beq 	_SCExit 					; two values equal, then exit
.26e4	ca		dex				dex 								; X = $FF
.26e5	90 02		bcc $26e9			bcc 	_SCExit 					; if 1st < 2nd then -1
.26e7	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.26e9					_SCExit:
.26e9	68		pla				pla
.26ea	a8		tay				tay
.26eb	68		pla				pla
.26ec	60		rts				rts
.26ed					CopyStringPair:
.26ed	b5 49		lda $49,x			lda 	esInt0+1,x
.26ef	85 06		sta $06				sta 	temp1
.26f1	b5 51		lda $51,x			lda 	esInt1+1,x
.26f3	85 07		sta $07				sta 	temp1+1
.26f5					CopyStringTop:
.26f5	b5 48		lda $48,x			lda 	esInt0,x
.26f7	85 04		sta $04				sta 	temp0
.26f9	b5 50		lda $50,x			lda 	esInt1,x
.26fb	85 05		sta $05				sta 	temp0+1
.26fd	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.26fe					StringConcat:
.26fe	aa		tax				tax									; stack pos in X
.26ff	98		tya				tya
.2700	48		pha				pha
.2701	20 ed 26	jsr $26ed			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2704	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2705	a0 00		ldy #$00			ldy 	#0
.2707	b1 04		lda ($04),y			lda 	(temp0),y
.2709	71 06		adc ($06),y			adc 	(temp1),y
.270b	b0 1c		bcs $2729			bcs 	_SCError 					; just too many characters here.
.270d	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.270f	b0 18		bcs $2729			bcs 	_SCError
.2711	20 4d 27	jsr $274d			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2714	20 44 27	jsr $2744			jsr 	CopySoftToStack 			; copy that to the stack.
.2717	20 2e 27	jsr $272e			jsr 	SCCopyTemp0 				; copy temp0
.271a	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.271c	85 04		sta $04				sta 	temp0
.271e	a5 07		lda $07				lda 	temp1+1
.2720	85 05		sta $05				sta 	temp0+1
.2722	20 2e 27	jsr $272e			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2725	68		pla				pla
.2726	a8		tay				tay
.2727	8a		txa				txa 								; and A
.2728	60		rts				rts
.2729					_SCError:
.2729	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.272b	20 a3 23	jsr $23a3		jsr	errorHandler
.272e					SCCopyTemp0:
.272e	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2730	b1 04		lda ($04),y			lda 	(temp0),y
.2732	85 08		sta $08				sta 	temp2
.2734					_SCCopyLoop:
.2734	a5 08		lda $08				lda 	temp2 						; done the lot
.2736	f0 0b		beq $2743			beq 	_SCCopyExit
.2738	c6 08		dec $08				dec 	temp2
.273a	c8		iny				iny 								; get next char
.273b	b1 04		lda ($04),y			lda 	(temp0),y
.273d	20 73 27	jsr $2773			jsr 	WriteSoftString 			; write to soft string.
.2740	4c 34 27	jmp $2734			jmp 	_SCCopyLoop
.2743					_SCCopyExit:
.2743	60		rts				rts
.2744					CopySoftToStack:
.2744	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2746	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2748	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.274a	95 50		sta $50,x			sta 	esInt1,x
.274c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.274d					AllocateSoftString:
.274d	85 0c		sta $0c				sta 	tempShort 					; save count
.274f	98		tya				tya
.2750	48		pha				pha
.2751	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2753	d0 09		bne $275e			bne 	_ASSDone
.2755	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.2757	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2759	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.275b	88		dey				dey
.275c	84 7b		sty $7b				sty 	softMemAlloc+1
.275e					_ASSDone:
.275e	38		sec				sec 								; allocate downwards enough memory
.275f	a5 7a		lda $7a				lda 	softMemAlloc
.2761	e5 0c		sbc $0c				sbc 	tempShort
.2763	85 7a		sta $7a				sta 	softMemAlloc
.2765	a5 7b		lda $7b				lda 	softMemAlloc+1
.2767	e9 00		sbc #$00			sbc 	#0
.2769	85 7b		sta $7b				sta 	softMemAlloc+1
.276b	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.276d	a8		tay				tay
.276e	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2770	68		pla				pla
.2771	a8		tay				tay
.2772	60		rts				rts
.2773					WriteSoftString:
.2773	84 0c		sty $0c				sty 	tempShort 					; save Y
.2775	48		pha				pha
.2776	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2778	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.277a	18		clc				clc
.277b	69 01		adc #$01			adc 	#1
.277d	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.277f	a8		tay				tay 								; pointer in Y
.2780	68		pla				pla 								; get char and write.
.2781	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2783	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.2785	60		rts				rts
.2786					StrClone:
.2786	aa		tax				tax 								; set up stack.
.2787	98		tya				tya
.2788	48		pha				pha
.2789	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.278b	b1 04		lda ($04),y			lda 	(temp0),y
.278d	18		clc				clc
.278e	69 01		adc #$01			adc 	#1
.2790	20 4d 27	jsr $274d			jsr 	AllocateSoftString 			; allocate soft memory
.2793	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2795	95 48		sta $48,x			sta 	esInt0,x
.2797	a5 7b		lda $7b				lda 	softMemAlloc+1
.2799	95 50		sta $50,x			sta 	esInt1,x
.279b	a9 00		lda #$00			lda 	#0
.279d	95 58		sta $58,x			sta 	esInt2,x
.279f	95 60		sta $60,x			sta 	esInt3,x
.27a1	a9 40		lda #$40			lda 	#$40 						; set type to string.
.27a3	95 40		sta $40,x			sta 	esType,x
.27a5	20 2e 27	jsr $272e			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.27a8	68		pla				pla
.27a9	a8		tay				tay
.27aa	8a		txa				txa
.27ab	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.27ac					CaseString:
.27ac	48		pha				pha 								; save A and copy to X
.27ad	aa		tax				tax
.27ae	98		tya				tya
.27af	48		pha				pha
.27b0	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; target string -> temp0
.27b3	a0 00		ldy #$00			ldy 	#0
.27b5	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.27b7	18		clc				clc
.27b8	69 01		adc #$01			adc 	#1 							; one more for length byte
.27ba	20 4d 27	jsr $274d			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.27bd	20 44 27	jsr $2744			jsr 	CopySoftToStack 			; copy that to the stack.
.27c0	a0 00		ldy #$00			ldy 	#0
.27c2	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.27c4	aa		tax				tax
.27c5					_CSCopy:
.27c5	e0 00		cpx #$00			cpx 	#0
.27c7	f0 24		beq $27ed			beq 	_CSExit
.27c9	ca		dex				dex
.27ca	c8		iny				iny
.27cb	68		pla				pla 								; check direction
.27cc	48		pha				pha
.27cd	f0 0c		beq $27db			beq 	_CSUpper
.27cf	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.27d1	c9 41		cmp #$41			cmp 	#"A"
.27d3	90 12		bcc $27e7			bcc 	_CSWrite
.27d5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.27d7	b0 0e		bcs $27e7			bcs 	_CSWrite
.27d9	90 0a		bcc $27e5			bcc 	_CSFlipWrite
.27db					_CSUpper:
.27db	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.27dd	c9 61		cmp #$61			cmp 	#"a"
.27df	90 06		bcc $27e7			bcc 	_CSWrite
.27e1	c9 7b		cmp #$7b			cmp 	#"z"+1
.27e3	b0 02		bcs $27e7			bcs 	_CSWrite
.27e5					_CSFlipWrite:
.27e5	49 20		eor #$20			eor 	#"A"^"a"
.27e7					_CSWrite:
.27e7	20 73 27	jsr $2773			jsr 	WriteSoftString
.27ea	4c c5 27	jmp $27c5			jmp 	_CSCopy
.27ed					_CSExit:
.27ed	68		pla				pla
.27ee	a8		tay				tay
.27ef	68		pla				pla
.27f0	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.27f1					StringSubstring:
.27f1	48		pha				pha
.27f2	aa		tax				tax 								; access stack.
.27f3	98		tya				tya
.27f4	48		pha				pha
.27f5	20 f5 26	jsr $26f5			jsr 	CopyStringTop 				; point temp0 to the string.
.27f8	a0 00		ldy #$00			ldy 	#0 							; get length.
.27fa	b1 04		lda ($04),y			lda 	(temp0),Y
.27fc	85 06		sta $06				sta 	temp1
.27fe	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2800	c5 06		cmp $06				cmp 	temp1 						;
.2802	f0 02		beq $2806			beq 	_SSBOkay
.2804	b0 2a		bcs $2830			bcs 	_SSBReturnNull
.2806					_SSBOkay:
.2806	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2808	18		clc				clc
.2809	69 01		adc #$01			adc 	#1
.280b	38		sec				sec
.280c	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.280e	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2810	90 02		bcc $2814			bcc		_SSBTrunc
.2812	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2814					_SSBTrunc:
.2814	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2816	18		clc				clc
.2817	69 01		adc #$01			adc 	#1 							; add 1
.2819	20 4d 27	jsr $274d			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.281c	20 44 27	jsr $2744			jsr 	CopySoftToStack 			; copy that to the stack.
.281f	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2821					_SSBCopyLoop:
.2821	a5 07		lda $07				lda 	temp1+1 					; done them all
.2823	f0 0e		beq $2833			beq 	_SSBExit
.2825	c6 07		dec $07				dec 	temp1+1
.2827	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2829	20 73 27	jsr $2773			jsr 	WriteSoftString
.282c	c8		iny				iny
.282d	4c 21 28	jmp $2821			jmp 	_SSBCopyLoop
.2830					_SSBReturnNull:
.2830	20 37 28	jsr $2837			jsr 	ReturnNull
.2833					_SSBExit:
.2833	68		pla				pla
.2834	a8		tay				tay
.2835	68		pla				pla
.2836	60		rts				rts
.2837					ReturnNull:
.2837	a9 00		lda #$00			lda 	#0 							; clear null string
.2839	8d cc 0a	sta $0acc			sta 	NullString
.283c	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.283e	95 48		sta $48,x			sta 	esInt0,x
.2840	a9 0a		lda #$0a			lda 	#NullString >> 8
.2842	95 50		sta $50,x			sta 	esInt1,x
.2844	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0b20					srcStrLen:
>0b20							.fill 	1
.2845					StringWrite:
.2845	aa		tax				tax
.2846	48		pha				pha
.2847	98		tya				tya
.2848	48		pha				pha
.2849	20 70 28	jsr $2870			jsr 	CheckOverwriteCurrent
.284c	b0 0d		bcs $285b			bcs		_SWCopyCurrent
.284e	20 ae 28	jsr $28ae			jsr 	RequiresConcretion
.2851	90 0e		bcc $2861			bcc 	_SWWriteReference
.2853	20 11 29	jsr $2911			jsr 	CheckSpecialConcretion
.2856	b0 09		bcs $2861			bcs 	_SWWriteReference
.2858	20 c2 28	jsr $28c2			jsr 	AllocateHardMemory
.285b					_SWCopyCurrent:
.285b	20 f5 28	jsr $28f5			jsr 	CopyStringToHardMemory
.285e	4c 6c 28	jmp $286c			jmp 	_SWExit
.2861					_SWWriteReference
.2861	a0 00		ldy #$00			ldy 	#0
.2863	a5 04		lda $04				lda 	temp0
.2865	91 06		sta ($06),y			sta 	(temp1),y
.2867	c8		iny				iny
.2868	a5 05		lda $05				lda 	temp0+1
.286a	91 06		sta ($06),y			sta 	(temp1),y
.286c					_SWExit:
.286c	68		pla				pla
.286d	a8		tay				tay
.286e	68		pla				pla
.286f	60		rts				rts
.2870					CheckOverwriteCurrent:
.2870	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2872	b5 51		lda $51,x			lda 	esInt1+1,x
.2874	85 05		sta $05				sta 	temp0+1
.2876	b5 49		lda $49,x			lda 	esInt0+1,x
.2878	85 04		sta $04				sta 	temp0
.287a	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.287c	8d 20 0b	sta $0b20			sta 	srcStrLen
.287f	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2881	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2883	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2885	85 07		sta $07				sta 	temp1+1
.2887	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2889	b1 06		lda ($06),y			lda 	(temp1),y
.288b	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.288d	90 1b		bcc $28aa			bcc 	_COCFail 				; in hard memory.
.288f	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2891	b1 06		lda ($06),y			lda 	(temp1),y
.2893	e9 01		sbc #$01			sbc 	#1
.2895	85 08		sta $08				sta 	temp2
.2897	c8		iny				iny
.2898	b1 06		lda ($06),y			lda 	(temp1),y
.289a	e9 00		sbc #$00			sbc 	#0
.289c	85 09		sta $09				sta 	temp2+1
.289e	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.28a0	b1 08		lda ($08),y			lda 	(temp2),y
.28a2	38		sec				sec  							; maximum character capacity.
.28a3	e9 02		sbc #$02			sbc 	#2
.28a5	cd 20 0b	cmp $0b20			cmp 	srcStrLen 				; if >= the required length
.28a8	b0 02		bcs $28ac			bcs 	_COCCanReuse
.28aa					_COCFail:
.28aa	18		clc				clc
.28ab	60		rts				rts
.28ac					_COCCanReuse:
.28ac	38		sec				sec
.28ad	60		rts				rts
.28ae					RequiresConcretion:
.28ae	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.28b0	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.28b2	b0 0a		bcs $28be			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.28b4	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.28b6	f0 08		beq $28c0			beq 	_RCFail 				; if not, this cannot be soft memory.
.28b8	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.28ba	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.28bc	90 02		bcc $28c0			bcc 	_RCFail 				; so concreting
.28be					_RCSucceed:
.28be	38		sec				sec
.28bf	60		rts				rts
.28c0					_RCFail:
.28c0	18		clc				clc
.28c1	60		rts				rts
.28c2					AllocateHardMemory:
.28c2	98		tya				tya
.28c3	48		pha				pha
.28c4	ad 20 0b	lda $0b20			lda 	srcStrLen 				; characters in string
.28c7	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.28c9	b0 04		bcs $28cf			bcs 	_AHMSetMax 				; max out that amount.
.28cb	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.28cd	90 02		bcc $28d1			bcc 	_AHMIsOkay
.28cf					_AHMSetMax:
.28cf	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.28d1					_AHMIsOkay:
.28d1	48		pha				pha
.28d2	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.28d4	38		sec				sec  							; and copy result to TOS as target address.
.28d5	65 0d		adc $0d				adc 	highMemory
.28d7	85 0d		sta $0d				sta 	highMemory
.28d9	a5 0e		lda $0e				lda 	highMemory+1
.28db	69 ff		adc #$ff			adc 	#$FF
.28dd	85 0e		sta $0e				sta 	highMemory+1
.28df	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.28e1	68		pla				pla 							; get the total size of the storage block
.28e2	91 0d		sta ($0d),y			sta 	(highMemory),y
.28e4	18		clc				clc
.28e5	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.28e7	69 01		adc #$01			adc 	#1
.28e9	91 06		sta ($06),y			sta 	(temp1),y
.28eb	a5 0e		lda $0e				lda 	highMemory+1
.28ed	69 00		adc #$00			adc 	#0
.28ef	c8		iny				iny
.28f0	91 06		sta ($06),y			sta 	(temp1),y
.28f2	68		pla				pla
.28f3	a8		tay				tay
.28f4	60		rts				rts
.28f5					CopyStringToHardMemory:
.28f5	98		tya				tya
.28f6	48		pha				pha
.28f7	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.28f9	b1 06		lda ($06),y			lda 	(temp1),y
.28fb	85 08		sta $08				sta 	temp2
.28fd	c8		iny				iny
.28fe	b1 06		lda ($06),y			lda 	(temp1),y
.2900	85 09		sta $09				sta 	temp2+1
.2902	ac 20 0b	ldy $0b20			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2905					_CSTHMLoop:
.2905	b1 04		lda ($04),y			lda 	(temp0),y
.2907	91 08		sta ($08),y			sta 	(temp2),y
.2909	88		dey				dey
.290a	c0 ff		cpy #$ff			cpy 	#$FF
.290c	d0 f7		bne $2905			bne 	_CSTHMLoop
.290e	68		pla				pla
.290f	a8		tay				tay
.2910	60		rts				rts
.2911					CheckSpecialConcretion:
.2911	ad 20 0b	lda $0b20			lda 	srcStrLen 				; check string is null.
.2914	f0 02		beq $2918			beq 	_CSCNullString
.2916	18		clc				clc
.2917	60		rts				rts
.2918					_CSCNullString:
.2918	a9 00		lda #$00			lda 	#0
.291a	8d cc 0a	sta $0acc			sta 	NullString
.291d	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.291f	85 04		sta $04				sta 	temp0
.2921	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2923	85 05		sta $05				sta 	1+(temp0)
.2925	38		sec				sec
.2926	60		rts				rts

;******  Return to file: string/string.asm

.2927					stringHandler:
.2927	7c 2a 29	jmp ($292a,x)			jmp 	(stringVectors,x)
.292a					stringVectors:
>292a	93 26					.word StringChrs           ; index 0
>292c	86 27					.word StrClone             ; index 2
>292e	fe 26					.word StringConcat         ; index 4
>2930	b5 26					.word STRCompare           ; index 6
>2932	ac 27					.word CaseString           ; index 8
>2934	f1 27					.word StringSubstring      ; index 10
>2936	45 28					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2938					section_end_string:
.2938					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0b21					deTokeniseVector:
>0b21							.fill 	2
.0b23					lastCharacterClass:
>0b23							.fill 	1
.2938					ListLine:
.2938	a9 48		lda #$48			lda 	#(deTokenPrint) & $FF
.293a	8d 21 0b	sta $0b21			sta 	deTokeniseVector
.293d	a9 2a		lda #$2a			lda 	#(deTokenPrint) >> 8
.293f	8d 22 0b	sta $0b22			sta 	1+(deTokeniseVector)
.2942					Detokenise:
.2942	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.2944	8d 23 0b	sta $0b23			sta 	lastCharacterClass
.2947	a2 02		ldx #$02			ldx 	#2
.2949	20 f0 21	jsr $21f0			jsr 	MInt32False
.294c	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.294e	b1 02		lda ($02),y			lda 	(codePtr),y
.2950	95 48		sta $48,x			sta 	esInt0,x
.2952	c8		iny				iny
.2953	b1 02		lda ($02),y			lda 	(codePtr),y
.2955	95 50		sta $50,x			sta 	esInt1,x
.2957	a9 84		lda #$84			lda 	#LTYLineNumber
.2959	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.295c	a9 0a		lda #$0a			lda 	#10 					; base 10
.295e	20 fa 29	jsr $29fa			jsr 	DTPrintInteger 			; print as integer.
.2961	a0 00		ldy #$00			ldy 	#0 						; get length
.2963	b1 04		lda ($04),y			lda 	(temp0),y 				; into X
.2965	aa		tax				tax
.2966					_DTPadOut:
.2966	a9 20		lda #$20			lda 	#" "
.2968	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.296b	e8		inx				inx
.296c	e0 06		cpx #$06			cpx 	#6
.296e	d0 f6		bne $2966			bne 	_DTPadOut
.2970	a0 03		ldy #$03			ldy 	#3 						; start position.
.2972					_DTListLoop
.2972	b1 02		lda ($02),y			lda 	(codePtr),y
.2974	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.2976	f0 58		beq $29d0			beq 	_DTIsString
.2978	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.297a	f0 7a		beq $29f6			beq 	_DTIsFloat
.297c	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.297e	f0 16		beq $2996			beq 	_DTHexConstant
.2980	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.2982	d0 06		bne $298a			bne 	_DTNotEnd
.2984	a9 ff		lda #$ff			lda 	#255 					; print CR
.2986	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.2989	60		rts				rts
.298a					_DTNotEnd:
.298a	c9 00		cmp #$00			cmp 	#0
.298c	30 36		bmi $29c4			bmi 	_DTIsToken
.298e	c9 40		cmp #$40			cmp 	#$40
.2990	90 38		bcc $29ca			bcc 	_DTIsIdentifier
.2992	a9 0a		lda #$0a			lda 	#10 					; this is the base
.2994	d0 08		bne $299e			bne 	_DTConstant
.2996					_DTHexConstant:
.2996	a9 26		lda #$26			lda 	#"&"
.2998	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.299b	c8		iny				iny
.299c	a9 10		lda #$10			lda 	#16
.299e					_DTConstant:
.299e	48		pha				pha
.299f	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.29a1	20 64 2a	jsr $2a64			jsr 	DTSwitchMode
.29a4	a9 86		lda #$86			lda 	#LTYConstant
.29a6	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.29a9	a2 02		ldx #$02			ldx 	#2
.29ab	8a		txa				txa
.29ac	a2 08		ldx #$08		ldx	#8
.29ae	20 d9 22	jsr $22d9		jsr	mainHandler
.29b1	aa		tax				tax
.29b2	20 ed 11	jsr $11ed			jsr 	TOSToTemp0
.29b5	68		pla				pla
.29b6	85 0c		sta $0c				sta 	tempShort
.29b8	98		tya				tya
.29b9	48		pha				pha
.29ba	a5 0c		lda $0c				lda 	tempShort
.29bc	20 fa 29	jsr $29fa			jsr 	DTPrintInteger
.29bf	68		pla				pla
.29c0	a8		tay				tay
.29c1	4c 72 29	jmp $2972			jmp 	_DTListLoop
.29c4					_DTIsToken:
.29c4	20 b7 2a	jsr $2ab7			jsr 	DTDecodeToken
.29c7	4c 72 29	jmp $2972			jmp 	_DTListLoop
.29ca					_DTIsIdentifier:
.29ca	20 76 2a	jsr $2a76			jsr 	DTIdentifier
.29cd	4c 72 29	jmp $2972			jmp 	_DTListLoop
.29d0					_DTIsString:
.29d0	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.29d2	20 64 2a	jsr $2a64			jsr 	DTSwitchMode
.29d5	a9 81		lda #$81			lda 	#LTYString
.29d7	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.29da	a9 22		lda #$22			lda 	#'"'						; open quote
.29dc	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.29df	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.29e1	8a		txa				txa
.29e2	a2 08		ldx #$08		ldx	#8
.29e4	20 d9 22	jsr $22d9		jsr	mainHandler
.29e7	aa		tax				tax
.29e8	20 ed 11	jsr $11ed			jsr 	TOSToTemp0
.29eb	20 0c 2a	jsr $2a0c			jsr 	DTPrintLengthPrefix
.29ee	a9 22		lda #$22			lda 	#'"'
.29f0	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.29f3	4c 72 29	jmp $2972			jmp 	_DTListLoop
.29f6					_DTIsFloat:
>29f6	db						.byte 	$DB
.29f7	4c f6 29	jmp $29f6			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.29fa					DTPrintInteger:
.29fa	48		pha				pha
.29fb	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.29fd	85 04		sta $04				sta 	temp0
.29ff	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2a01	85 05		sta $05				sta 	1+(temp0)
.2a03	68		pla				pla
.2a04	a8		tay				tay
.2a05	8a		txa				txa
.2a06	a2 0a		ldx #$0a		ldx	#10
.2a08	20 d9 22	jsr $22d9		jsr	mainHandler
.2a0b	aa		tax				tax
.2a0c					DTPrintLengthPrefix:
.2a0c	98		tya				tya
.2a0d	48		pha				pha
.2a0e	a0 00		ldy #$00			ldy 	#0
.2a10	b1 04		lda ($04),y			lda 	(temp0),y
.2a12	aa		tax				tax
.2a13	f0 0b		beq $2a20			beq 	_DTPLPExit
.2a15					_DTPLPLoop:
.2a15	c8		iny				iny
.2a16	b1 04		lda ($04),y			lda 	(temp0),y
.2a18	29 7f		and #$7f			and 	#$7F
.2a1a	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.2a1d	ca		dex				dex
.2a1e	d0 f5		bne $2a15			bne 	_DTPLPLoop
.2a20					_DTPLPExit:
.2a20	68		pla				pla
.2a21	a8		tay				tay
.2a22	60		rts				rts
.2a23					ListOutputCharacter:
.2a23	85 0c		sta $0c				sta 	tempShort
.2a25	48		pha				pha
.2a26	8a		txa				txa
.2a27	48		pha				pha
.2a28	98		tya				tya
.2a29	48		pha				pha
.2a2a	a5 0c		lda $0c				lda 	tempShort
.2a2c	c9 20		cmp #$20			cmp 	#32
.2a2e	b0 0c		bcs $2a3c			bcs		_LOCHiBit
.2a30	09 40		ora #$40			ora 	#64
.2a32	c9 40		cmp #$40			cmp 	#64
.2a34	f0 06		beq $2a3c			beq 	_LOCHiBit
.2a36	c9 5b		cmp #$5b			cmp 	#65+26
.2a38	b0 02		bcs $2a3c			bcs 	_LOCHiBit
.2a3a	69 20		adc #$20			adc 	#32
.2a3c					_LOCHiBit:
.2a3c	20 45 2a	jsr $2a45			jsr 	_LOCCallVector
.2a3f	68		pla				pla
.2a40	a8		tay				tay
.2a41	68		pla				pla
.2a42	aa		tax				tax
.2a43	68		pla				pla
.2a44					_LOCExit:
.2a44	60		rts				rts
.2a45					_LOCCallVector:
.2a45	6c 21 0b	jmp ($0b21)			jmp 	(deTokeniseVector)
.2a48					deTokenPrint:
.2a48	c9 00		cmp #$00			cmp 	#0
.2a4a	30 06		bmi $2a52			bmi 	_dtpInk
.2a4c	a2 0e		ldx #$0e		ldx	#14
.2a4e	20 8c 23	jsr $238c		jsr	deviceHandler
.2a51	60		rts				rts
.2a52	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.2a54	f0 08		beq $2a5e			beq 	_dtpCR
.2a56	29 07		and #$07			and 	#7
.2a58	a2 06		ldx #$06		ldx	#6
.2a5a	20 8c 23	jsr $238c		jsr	deviceHandler
.2a5d	60		rts				rts
.2a5e					_dtpCR:
.2a5e	a2 02		ldx #$02		ldx	#2
.2a60	20 8c 23	jsr $238c		jsr	deviceHandler
.2a63	60		rts				rts
.2a64					DTSwitchMode:
.2a64	cd 23 0b	cmp $0b23			cmp 	LastCharacterClass
.2a67	f0 04		beq $2a6d			beq 	_DTSMNoChange
.2a69	8d 23 0b	sta $0b23			sta 	LastCharacterClass
.2a6c					_DTSMExit:
.2a6c	60		rts				rts
.2a6d					_DTSMNoChange:
.2a6d	c9 01		cmp #$01			cmp 	#1
.2a6f	f0 fb		beq $2a6c			beq 	_DTSMExit
.2a71	a9 20		lda #$20			lda 	#" "
.2a73	4c 23 2a	jmp $2a23			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.2a76					DTIdentifier:
.2a76	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2a78	20 64 2a	jsr $2a64			jsr 	DTSwitchMode
.2a7b	a9 87		lda #$87			lda 	#LTYIdentifier
.2a7d	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.2a80					_DTILoop:
.2a80	b1 02		lda ($02),y			lda 	(codePtr),y 				; output main bit of identifier.
.2a82	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.2a85	c8		iny				iny
.2a86	b1 02		lda ($02),y			lda 	(codePtr),y 				; until end identifier marker.
.2a88	c9 3a		cmp #$3a			cmp 	#$3A
.2a8a	90 f4		bcc $2a80			bcc 	_DTILoop
.2a8c	c8		iny				iny
.2a8d	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.2a8f	f0 25		beq $2ab6			beq 	_DTIExit 					; no postfix.
.2a91	48		pha				pha
.2a92	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.2a94	8d 23 0b	sta $0b23			sta 	LastCharacterClass
.2a97	a9 82		lda #$82			lda 	#LTYPunctuation
.2a99	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.2a9c	68		pla				pla
.2a9d	c9 3b		cmp #$3b			cmp 	#$3B
.2a9f	f0 10		beq $2ab1			beq 	_DTIArray
.2aa1	4a		lsr a				lsr 	a 							; array flag in C
.2aa2	08		php				php
.2aa3	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.2aa5	f0 02		beq $2aa9			beq 	_DTIDollar
.2aa7	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.2aa9					_DTIDollar:
.2aa9	49 24		eor #$24			eor 	#"$"
.2aab	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.2aae	28		plp				plp
.2aaf	90 05		bcc $2ab6			bcc 	_DTIExit
.2ab1					_DTIArray:
.2ab1	a9 28		lda #$28			lda 	#"("
.2ab3	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.2ab6					_DTIExit:
.2ab6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.2ab7					DTDecodeToken:
.2ab7	a2 00		ldx #$00			ldx 	#0 							; table number to use
.2ab9	b1 02		lda ($02),y			lda 	(codePtr),y
.2abb	c9 84		cmp #$84			cmp 	#$84
.2abd	b0 05		bcs $2ac4			bcs 	_DTNotShift
.2abf	29 03		and #$03			and 	#3 							; get the shift 1..3
.2ac1	0a		asl a				asl 	a 							; put 2 x in X
.2ac2	aa		tax				tax
.2ac3	c8		iny				iny
.2ac4					_DTNotShift:
.2ac4	bd 15 2b	lda $2b15,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.2ac7	85 04		sta $04				sta 	temp0 						; point into temp0
.2ac9	bd 16 2b	lda $2b16,x			lda 	TokenTableAddress+1,x
.2acc	85 05		sta $05				sta 	temp0+1
.2ace	b1 02		lda ($02),y			lda 	(codePtr),y 				; get the token value.
.2ad0	c8		iny				iny 								; consume it.
.2ad1	aa		tax				tax
.2ad2	98		tya				tya
.2ad3	48		pha				pha
.2ad4					_DTFindText:
.2ad4	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.2ad6	f0 11		beq $2ae9			beq 	_DTFoundText
.2ad8	ca		dex				dex
.2ad9	a0 00		ldy #$00			ldy 	#0
.2adb	38		sec				sec
.2adc	b1 04		lda ($04),y			lda 	(temp0),y
.2ade	65 04		adc $04				adc 	temp0
.2ae0	85 04		sta $04				sta 	temp0
.2ae2	90 f0		bcc $2ad4			bcc 	_DTFindText
.2ae4	e6 05		inc $05				inc 	temp0+1
.2ae6	4c d4 2a	jmp $2ad4			jmp 	_DTFindText
.2ae9					_DTFoundText:
.2ae9	a0 00		ldy #$00			ldy 	#0 							; get last character
.2aeb	b1 04		lda ($04),y			lda 	(temp0),y
.2aed	a8		tay				tay
.2aee	b1 04		lda ($04),y			lda 	(temp0),y
.2af0	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2af2	f0 11		beq $2b05			beq 	_DTIsPunctuation
.2af4	c9 1b		cmp #$1b			cmp 	#27
.2af6	b0 0d		bcs $2b05			bcs 	_DTIsPunctuation
.2af8	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2afa	20 64 2a	jsr $2a64			jsr 	DTSwitchMode
.2afd	a9 83		lda #$83			lda 	#LTYKeyword
.2aff	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.2b02	4c 0f 2b	jmp $2b0f			jmp 	_DTPrint
.2b05					_DTIsPunctuation:
.2b05	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2b07	20 64 2a	jsr $2a64			jsr 	DTSwitchMode
.2b0a	a9 82		lda #$82			lda 	#LTYPunctuation
.2b0c	20 23 2a	jsr $2a23			jsr 	ListOutputCharacter
.2b0f					_DTPrint:
.2b0f	20 0c 2a	jsr $2a0c			jsr 	DTPrintLengthPrefix 		; print it out.
.2b12	68		pla				pla
.2b13	a8		tay				tay
.2b14	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.2b15					TokenTableAddress:
>2b15	1d 2b						.word 	Group0Text
>2b17	ce 2c						.word 	Group1Text
>2b19	02 2d						.word 	Group2Text
>2b1b	0f 2d						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.2b1d					Group0Text:
>2b1d	03 01 0e 84				.byte $03,$01,$0e,$84                  ; $86 and
>2b21	02 0f 92				.byte $02,$0f,$92                      ; $87 or
>2b24	03 18 0f 92				.byte $03,$18,$0f,$92                  ; $88 xor
>2b28	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>2b2b	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>2b2e	01 be					.byte $01,$be                          ; $8b >
>2b30	01 bc					.byte $01,$bc                          ; $8c <
>2b32	01 bd					.byte $01,$bd                          ; $8d =
>2b34	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>2b37	01 ab					.byte $01,$ab                          ; $8f +
>2b39	01 ad					.byte $01,$ad                          ; $90 -
>2b3b	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>2b3e	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>2b41	01 aa					.byte $01,$aa                          ; $93 *
>2b43	01 af					.byte $01,$af                          ; $94 /
>2b45	03 0d 0f 84				.byte $03,$0d,$0f,$84                  ; $95 mod
>2b49	01 9e					.byte $01,$9e                          ; $96 ^
>2b4b	01 a1					.byte $01,$a1                          ; $97 !
>2b4d	01 bf					.byte $01,$bf                          ; $98 ?
>2b4f	06 12 05 10 05 01 94			.byte $06,$12,$05,$10,$05,$01,$94      ; $99 repeat
>2b56	05 17 08 09 0c 85			.byte $05,$17,$08,$09,$0c,$85          ; $9a while
>2b5c	03 06 0f 92				.byte $03,$06,$0f,$92                  ; $9b for
>2b60	02 09 86				.byte $02,$09,$86                      ; $9c if
>2b63	07 04 05 06 10 12 0f 83			.byte $07,$04,$05,$06,$10,$12,$0f,$83  ; $9d defproc
>2b6b	05 15 0e 14 09 8c			.byte $05,$15,$0e,$14,$09,$8c          ; $9e until
>2b71	04 17 05 0e 84				.byte $04,$17,$05,$0e,$84              ; $9f wend
>2b76	04 0e 05 18 94				.byte $04,$0e,$05,$18,$94              ; $a0 next
>2b7b	04 14 08 05 8e				.byte $04,$14,$08,$05,$8e              ; $a1 then
>2b80	05 05 0e 04 09 86			.byte $05,$05,$0e,$04,$09,$86          ; $a2 endif
>2b86	07 05 0e 04 10 12 0f 83			.byte $07,$05,$0e,$04,$10,$12,$0f,$83  ; $a3 endproc
>2b8e	01 a8					.byte $01,$a8                          ; $a4 (
>2b90	04 0c 05 0e a8				.byte $04,$0c,$05,$0e,$a8              ; $a5 len(
>2b95	04 13 07 0e a8				.byte $04,$13,$07,$0e,$a8              ; $a6 sgn(
>2b9a	04 01 02 13 a8				.byte $04,$01,$02,$13,$a8              ; $a7 abs(
>2b9f	07 12 01 0e 04 0f 0d a8			.byte $07,$12,$01,$0e,$04,$0f,$0d,$a8  ; $a8 random(
>2ba7	04 10 01 07 85				.byte $04,$10,$01,$07,$85              ; $a9 page
>2bac	04 14 12 15 85				.byte $04,$14,$12,$15,$85              ; $aa true
>2bb1	05 06 01 0c 13 85			.byte $05,$06,$01,$0c,$13,$85          ; $ab false
>2bb7	04 0d 09 0e a8				.byte $04,$0d,$09,$0e,$a8              ; $ac min(
>2bbc	04 0d 01 18 a8				.byte $04,$0d,$01,$18,$a8              ; $ad max(
>2bc1	04 13 19 13 a8				.byte $04,$13,$19,$13,$a8              ; $ae sys(
>2bc6	06 14 09 0d 05 12 a8			.byte $06,$14,$09,$0d,$05,$12,$a8      ; $af timer(
>2bcd	06 05 16 05 0e 14 a8			.byte $06,$05,$16,$05,$0e,$14,$a8      ; $b0 event(
>2bd4	04 07 05 14 a8				.byte $04,$07,$05,$14,$a8              ; $b1 get(
>2bd9	06 09 0e 0b 05 19 a8			.byte $06,$09,$0e,$0b,$05,$19,$a8      ; $b2 inkey(
>2be0	06 01 0c 0c 0f 03 a8			.byte $06,$01,$0c,$0c,$0f,$03,$a8      ; $b3 alloc(
>2be7	05 03 08 12 24 a8			.byte $05,$03,$08,$12,$24,$a8          ; $b4 chr$(
>2bed	06 0c 05 06 14 24 a8			.byte $06,$0c,$05,$06,$14,$24,$a8      ; $b5 left$(
>2bf4	05 0d 09 04 24 a8			.byte $05,$0d,$09,$04,$24,$a8          ; $b6 mid$(
>2bfa	07 12 09 07 08 14 24 a8			.byte $07,$12,$09,$07,$08,$14,$24,$a8  ; $b7 right$(
>2c02	05 13 14 12 24 a8			.byte $05,$13,$14,$12,$24,$a8          ; $b8 str$(
>2c08	04 16 01 0c a8				.byte $04,$16,$01,$0c,$a8              ; $b9 val(
>2c0d	05 10 05 05 0b a8			.byte $05,$10,$05,$05,$0b,$a8          ; $ba peek(
>2c13	05 04 05 05 0b a8			.byte $05,$04,$05,$05,$0b,$a8          ; $bb deek(
>2c19	05 0c 05 05 0b a8			.byte $05,$0c,$05,$05,$0b,$a8          ; $bc leek(
>2c1f	04 01 13 03 a8				.byte $04,$01,$13,$03,$a8              ; $bd asc(
>2c24	04 09 0e 14 a8				.byte $04,$09,$0e,$14,$a8              ; $be int(
>2c29	06 06 0c 0f 01 14 a8			.byte $06,$06,$0c,$0f,$01,$14,$a8      ; $bf float(
>2c30	06 09 13 16 01 0c a8			.byte $06,$09,$13,$16,$01,$0c,$a8      ; $c0 isval(
>2c37	07 15 10 10 05 12 24 a8			.byte $07,$15,$10,$10,$05,$12,$24,$a8  ; $c1 upper$(
>2c3f	07 0c 0f 17 05 12 24 a8			.byte $07,$0c,$0f,$17,$05,$12,$24,$a8  ; $c2 lower$(
>2c47	01 80					.byte $01,$80                          ; $c3 @
>2c49	01 be					.byte $01,$be                          ; $c4 ~
>2c4b	01 a6					.byte $01,$a6                          ; $c5 &
>2c4d	01 a9					.byte $01,$a9                          ; $c6 )
>2c4f	01 ba					.byte $01,$ba                          ; $c7 :
>2c51	01 ac					.byte $01,$ac                          ; $c8 ,
>2c53	01 bb					.byte $01,$bb                          ; $c9 ;
>2c55	01 a7					.byte $01,$a7                          ; $ca '
>2c57	02 14 8f				.byte $02,$14,$8f                      ; $cb to
>2c5a	04 13 14 05 90				.byte $04,$13,$14,$05,$90              ; $cc step
>2c5f	04 10 12 0f 83				.byte $04,$10,$12,$0f,$83              ; $cd proc
>2c64	05 0c 0f 03 01 8c			.byte $05,$0c,$0f,$03,$01,$8c          ; $ce local
>2c6a	03 04 09 8d				.byte $03,$04,$09,$8d                  ; $cf dim
>2c6e	03 12 05 8d				.byte $03,$12,$05,$8d                  ; $d0 rem
>2c72	03 0c 05 94				.byte $03,$0c,$05,$94                  ; $d1 let
>2c76	05 09 0e 10 15 94			.byte $05,$09,$0e,$10,$15,$94          ; $d2 input
>2c7c	04 05 0c 13 85				.byte $04,$05,$0c,$13,$85              ; $d3 else
>2c81	03 16 04 95				.byte $03,$16,$04,$95                  ; $d4 vdu
>2c85	05 10 12 09 0e 94			.byte $05,$10,$12,$09,$0e,$94          ; $d5 print
>2c8b	04 07 0f 14 8f				.byte $04,$07,$0f,$14,$8f              ; $d6 goto
>2c90	05 07 0f 13 15 82			.byte $05,$07,$0f,$13,$15,$82          ; $d7 gosub
>2c96	06 12 05 14 15 12 8e			.byte $06,$12,$05,$14,$15,$12,$8e      ; $d8 return
>2c9d	04 04 01 14 81				.byte $04,$04,$01,$14,$81              ; $d9 data
>2ca2	06 01 13 13 05 12 94			.byte $06,$01,$13,$13,$05,$12,$94      ; $da assert
>2ca9	04 10 0f 0b 85				.byte $04,$10,$0f,$0b,$85              ; $db poke
>2cae	04 04 0f 0b 85				.byte $04,$04,$0f,$0b,$85              ; $dc doke
>2cb3	04 0c 0f 0b 85				.byte $04,$0c,$0f,$0b,$85              ; $dd loke
>2cb8	03 09 0e 8b				.byte $03,$09,$0e,$8b                  ; $de ink
>2cbc	05 10 01 10 05 92			.byte $05,$10,$01,$10,$05,$92          ; $df paper
>2cc2	03 03 0c 93				.byte $03,$03,$0c,$93                  ; $e0 cls
>2cc6	06 0c 0f 03 01 14 85			.byte $06,$0c,$0f,$03,$01,$14,$85      ; $e1 locate
>2ccd	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.2cce					Group1Text:
>2cce	05 03 0c 05 01 92			.byte $05,$03,$0c,$05,$01,$92          ; $86 clear
>2cd4	04 0c 0f 01 84				.byte $04,$0c,$0f,$01,$84              ; $87 load
>2cd9	04 13 01 16 85				.byte $04,$13,$01,$16,$85              ; $88 save
>2cde	04 0c 09 13 94				.byte $04,$0c,$09,$13,$94              ; $89 list
>2ce3	03 0e 05 97				.byte $03,$0e,$05,$97                  ; $8a new
>2ce7	03 12 15 8e				.byte $03,$12,$15,$8e                  ; $8b run
>2ceb	04 12 05 01 84				.byte $04,$12,$05,$01,$84              ; $8c read
>2cf0	07 12 05 13 14 0f 12 85			.byte $07,$12,$05,$13,$14,$0f,$12,$85  ; $8d restore
>2cf8	03 05 0e 84				.byte $03,$05,$0e,$84                  ; $8e end
>2cfc	04 13 14 0f 90				.byte $04,$13,$14,$0f,$90              ; $8f stop
>2d01	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.2d02					Group2Text:
>2d02	05 16 10 0f 0b 85			.byte $05,$16,$10,$0f,$0b,$85          ; $86 vpoke
>2d08	05 16 04 0f 0b 85			.byte $05,$16,$04,$0f,$0b,$85          ; $87 vdoke
>2d0e	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.2d0f					Group3Text:
>2d0f	06 16 10 05 05 0b a8			.byte $06,$16,$10,$05,$05,$0b,$a8      ; $86 vpeek(
>2d16	06 16 04 05 05 0b a8			.byte $06,$16,$04,$05,$05,$0b,$a8      ; $87 vdeek(
>2d1d	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.2d1e					tokeniserHandler:
.2d1e	7c 21 2d	jmp ($2d21,x)			jmp 	(tokeniserVectors,x)
.2d21					tokeniserVectors:
>2d21	42 29					.word Detokenise           ; index 0
>2d23	38 29					.word ListLine             ; index 2

;******  Return to file: basic.asm

.2d25					section_end_tokeniser:
.2d25					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0b24					varHash:
>0b24							.fill	1
.0b25					varType:
>0b25							.fill 	1
.0b26					varEnd:
>0b26							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2d25					AccessVariable:
.2d25	aa		tax				tax 								; stack in X
.2d26	c8		iny				iny
.2d27	b1 02		lda ($02),y			lda 	(codePtr),y
.2d29	88		dey				dey
.2d2a	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.2d2c	d0 15		bne $2d43			bne 	_AVLong
.2d2e	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.2d30	38		sec				sec 	 							; make it 0-25
.2d31	e9 01		sbc #$01			sbc 	#1
.2d33	0a		asl a				asl 	a 							; x 4 is LSB of address
.2d34	0a		asl a				asl 	a
.2d35	95 48		sta $48,x			sta 	esInt0,x
.2d37	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.2d39	95 50		sta $50,x			sta 	esInt1,x
.2d3b	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.2d3d	95 40		sta $40,x			sta 	esType,x
.2d3f	c8		iny				iny 								; skip over the variable reference in the code.
.2d40	c8		iny				iny
.2d41	8a		txa				txa 								; stack in A to return.
.2d42	60		rts				rts
.2d43					_AVLong:
.2d43	8a		txa				txa
.2d44	48		pha				pha
.2d45	20 8c 2d	jsr $2d8c			jsr 	AccessSetup 				; set up the basic stuff.
.2d48	20 80 2f	jsr $2f80			jsr 	FindVariable 				; does the variable exist already
.2d4b	b0 0e		bcs $2d5b			bcs 	_AVFound
.2d4d	ad 25 0b	lda $0b25			lda 	varType 					; is the variable type an array
.2d50	4a		lsr a				lsr 	a
.2d51	90 05		bcc $2d58			bcc 	_AVCanCreate
.2d53	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.2d55	20 a3 23	jsr $23a3		jsr	errorHandler
.2d58					_AVCanCreate:
.2d58	20 3f 2e	jsr $2e3f			jsr 	CreateVariable 				; no, create it.
.2d5b					_AVFound:
.2d5b	68		pla				pla
.2d5c	aa		tax				tax
.2d5d	18		clc				clc 								; copy temp0 (variable record address)
.2d5e	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.2d60	69 05		adc #$05			adc 	#5
.2d62	95 48		sta $48,x			sta 	esInt0,x
.2d64	a5 05		lda $05				lda 	temp0+1
.2d66	69 00		adc #$00			adc 	#0
.2d68	95 50		sta $50,x			sta 	esInt1,x
.2d6a	a9 00		lda #$00			lda 	#0
.2d6c	95 58		sta $58,x			sta 	esInt2,x
.2d6e	95 60		sta $60,x			sta 	esInt3,x
.2d70	ac 25 0b	ldy $0b25			ldy 	varType 					; get the type ID from the type.
.2d73	b9 4c 2d	lda $2d4c,y			lda 	_AVTypeTable-$3A,y
.2d76	95 40		sta $40,x			sta 	esType,x
.2d78	ac 26 0b	ldy $0b26			ldy 	varEnd 						; restore Y
.2d7b	ad 25 0b	lda $0b25			lda 	VarType 					; get variable type, put LSB into C
.2d7e	4a		lsr a				lsr 	a
.2d7f	90 03		bcc $2d84			bcc 	_AVNotArray
.2d81	20 c9 2d	jsr $2dc9			jsr 	AccessArray 				; array lookup. if LSB was set.
.2d84					_AVNotArray:
.2d84	8a		txa				txa 								; return stack in A and return
.2d85	60		rts				rts
.2d86					_AVTypeTable:
>2d86	80 80						.byte 	$80,$80						; integer
>2d88	c0 c0						.byte 	$C0,$C0 					; string
>2d8a	81 81						.byte 	$81,$81 					; float
.2d8c					AccessSetup:
.2d8c	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.2d8e	8d 24 0b	sta $0b24			sta 	varHash
.2d91	98		tya				tya
.2d92	48		pha				pha
.2d93	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.2d95	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.2d97	b0 0b		bcs $2da4			bcs 	_ASComplete
.2d99	18		clc				clc 								; add to the hash. Might improve this.
.2d9a	6d 24 0b	adc $0b24			adc 	varHash
.2d9d	8d 24 0b	sta $0b24			sta 	varHash
.2da0	c8		iny				iny 								; next character
.2da1	4c 93 2d	jmp $2d93			jmp 	_ASLoop
.2da4					_ASComplete:
.2da4	8d 25 0b	sta $0b25			sta 	varType 					; save variable type byte
.2da7	c8		iny				iny
.2da8	8c 26 0b	sty $0b26			sty 	varEnd 						; save the ending position.
.2dab	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.2dac	e9 3a		sbc #$3a			sbc 	#$3A
.2dae	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.2daf	0a		asl a				asl 	a
.2db0	0a		asl a				asl 	a
.2db1	0a		asl a				asl 	a 							; 2 bytes/word
.2db2	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.2db4	ad 24 0b	lda $0b24			lda 	varHash 					; get hash
.2db7	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.2db9	0a		asl a				asl  	a 							; x 2 (for word) and CC
.2dba	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.2dbc	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.2dbe	85 7c		sta $7c				sta 	hashList
.2dc0	a9 0a		lda #$0a			lda 	#hashTables >> 8
.2dc2	69 00		adc #$00			adc 	#0
.2dc4	85 7d		sta $7d				sta 	hashList+1
.2dc6	68		pla				pla
.2dc7	a8		tay				tay
.2dc8	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.2dc9					AccessArray:
.2dc9	e8		inx				inx
.2dca	8a		txa				txa
.2dcb	a2 04		ldx #$04		ldx	#4
.2dcd	20 d9 22	jsr $22d9		jsr	mainHandler
.2dd0	aa		tax				tax
.2dd1	ca		dex				dex
.2dd2	a2 00		ldx #$00		ldx	#0
.2dd4	20 d9 22	jsr $22d9		jsr	mainHandler
.2dd7	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.2dd9	15 59		ora $59,x			ora 	esInt2+1,x
.2ddb	d0 33		bne $2e10			bne 	_AABadIndex
.2ddd	98		tya				tya
.2dde	48		pha				pha
.2ddf	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.2de1	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.2de3	b5 50		lda $50,x			lda 	esInt1,x
.2de5	85 05		sta $05				sta 	temp0+1
.2de7	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.2de9	b5 49		lda $49,x			lda 	esInt0+1,x
.2deb	d1 04		cmp ($04),y			cmp 	(temp0),y
.2ded	c8		iny				iny
.2dee	b5 51		lda $51,x			lda 	esInt1+1,x
.2df0	f1 04		sbc ($04),y			sbc 	(temp0),y
.2df2	b0 1c		bcs $2e10			bcs 	_AABadIndex 				; if >= then fail.
.2df4	e8		inx				inx 								; point to index
.2df5	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.2df7	b1 04		lda ($04),y			lda 	(temp0),y
.2df9	20 15 2e	jsr $2e15			jsr 	MultiplyTOSByA 				; specialist multiplier.
.2dfc	ca		dex				dex
.2dfd	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.2dff	18		clc				clc
.2e00	b5 49		lda $49,x			lda 	esInt0+1,x
.2e02	71 04		adc ($04),y			adc 	(temp0),y
.2e04	95 48		sta $48,x			sta 	esInt0,x
.2e06	b5 51		lda $51,x			lda 	esInt1+1,x
.2e08	c8		iny				iny
.2e09	71 04		adc ($04),y			adc 	(temp0),y
.2e0b	95 50		sta $50,x			sta 	esInt1,x
.2e0d	68		pla				pla
.2e0e	a8		tay				tay
.2e0f	60		rts				rts
.2e10					_AABadIndex:
.2e10	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.2e12	20 a3 23	jsr $23a3		jsr	errorHandler
.2e15					MultiplyTOSByA:
.2e15	48		pha				pha
.2e16	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.2e18	85 06		sta $06				sta 	temp1
.2e1a	b5 50		lda $50,x			lda 	esInt1,x
.2e1c	85 07		sta $07				sta 	temp1+1
.2e1e	68		pla				pla
.2e1f	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.2e21	36 50		rol $50,x			rol 	esInt1,x
.2e23	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.2e25	f0 17		beq $2e3e			beq 	_MTBAExit
.2e27	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.2e29	d0 0f		bne $2e3a			bne 	_MTBANotFloat
.2e2b	48		pha				pha
.2e2c	18		clc				clc 								; so this will make it x 3
.2e2d	b5 48		lda $48,x			lda 	esInt0,x
.2e2f	65 06		adc $06				adc 	temp1
.2e31	95 48		sta $48,x			sta 	esInt0,x
.2e33	b5 50		lda $50,x			lda 	esInt1,x
.2e35	65 07		adc $07				adc 	temp1+1
.2e37	95 50		sta $50,x			sta 	esInt1,x
.2e39	68		pla				pla
.2e3a					_MTBANotFloat:
.2e3a	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.2e3c	36 50		rol $50,x			rol 	esInt1,x
.2e3e					_MTBAExit:
.2e3e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2e3f					CreateVariable:
.2e3f	98		tya				tya 								; push Y on the stack twice.
.2e40	48		pha				pha
.2e41	48		pha				pha
.2e42	ae 25 0b	ldx $0b25			ldx 	varType 					; get var type 0-5
.2e45	bd 50 2e	lda $2e50,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.2e48	48		pha				pha 								; save length
.2e49	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.2e4b	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.2e4d	a5 10		lda $10				lda 	lowMemory+1
.2e4f	85 05		sta $05				sta 	temp0+1
.2e51	68		pla				pla 								; get length
.2e52	20 73 10	jsr $1073			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.2e55	ad 24 0b	lda $0b24			lda 	varHash 					; store hash at offset 4.
.2e58	a0 04		ldy #$04			ldy 	#4
.2e5a	91 04		sta ($04),y			sta 	(temp0),y
.2e5c	68		pla				pla 								; offset, work out where the variable name is.
.2e5d	18		clc				clc
.2e5e	65 02		adc $02				adc 	codePtr
.2e60	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2e62	91 04		sta ($04),y			sta 	(temp0),y
.2e64	a5 03		lda $03				lda 	codePtr+1
.2e66	69 00		adc #$00			adc 	#0
.2e68	c8		iny				iny
.2e69	91 04		sta ($04),y			sta 	(temp0),y
.2e6b	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.2e6d	b1 7c		lda ($7c),y			lda 	(hashList),y
.2e6f	91 04		sta ($04),y			sta 	(temp0),y
.2e71	c8		iny				iny
.2e72	b1 7c		lda ($7c),y			lda 	(hashList),y
.2e74	91 04		sta ($04),y			sta 	(temp0),y
.2e76	a5 05		lda $05				lda 	temp0+1 					; set new link
.2e78	91 7c		sta ($7c),y			sta 	(hashList),y
.2e7a	88		dey				dey
.2e7b	a5 04		lda $04				lda 	temp0
.2e7d	91 7c		sta ($7c),y			sta 	(hashList),y
.2e7f	ad 25 0b	lda $0b25			lda 	varType 					; type in A
.2e82	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.2e84	20 90 2e	jsr $2e90			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.2e87	68		pla				pla
.2e88	a8		tay				tay
.2e89	60		rts				rts
>2e8a	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>2e8c	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>2e8e	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.2e90					ZeroTemp0Y:
.2e90	4a		lsr a				lsr 	a 							; bit 0 in carry
.2e91	0a		asl a				asl 	a
.2e92	b0 19		bcs $2ead			bcs 	_ZTExit 					; we don't initialise arrays.
.2e94	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.2e96	f0 16		beq $2eae			beq 	_ZTWriteNullString 			; write "" string
.2e98	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.2e9a	f0 22		beq $2ebe			beq 	_ZTWriteFloat
.2e9c	98		tya				tya
.2e9d	48		pha				pha
.2e9e	a9 00		lda #$00			lda 	#0
.2ea0	91 04		sta ($04),y			sta 	(temp0),y
.2ea2	c8		iny				iny
.2ea3	91 04		sta ($04),y			sta 	(temp0),y
.2ea5	c8		iny				iny
.2ea6	91 04		sta ($04),y			sta 	(temp0),y
.2ea8	c8		iny				iny
.2ea9	91 04		sta ($04),y			sta 	(temp0),y
.2eab	68		pla				pla
.2eac	a8		tay				tay
.2ead					_ZTExit:
.2ead	60		rts				rts
.2eae					_ZTWriteNullString:
.2eae	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.2eb0	8d cc 0a	sta $0acc			sta 	NullString
.2eb3	a9 cc		lda #$cc			lda 	#NullString & $FF
.2eb5	91 04		sta ($04),y			sta 	(temp0),y
.2eb7	a9 0a		lda #$0a			lda 	#NullString >> 8
.2eb9	c8		iny				iny
.2eba	91 04		sta ($04),y			sta 	(temp0),y
.2ebc	88		dey				dey
.2ebd	60		rts				rts
.2ebe					_ZTWriteFloat:
.2ebe	8a		txa				txa
.2ebf	48		pha				pha
.2ec0	a2 1e		ldx #$1e		ldx	#30
.2ec2	20 8b 26	jsr $268b		jsr	floatingpointHandler
.2ec5	68		pla				pla
.2ec6	aa		tax				tax
.2ec7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.2ec8					CreateArray:
.2ec8	20 8c 2d	jsr $2d8c			jsr 	AccessSetup 				; set up the basic stuff.
.2ecb	ad 25 0b	lda $0b25			lda 	varType 					; is the variable type an array
.2ece	4a		lsr a				lsr 	a
.2ecf	90 3f		bcc $2f10			bcc 	_CANotArray 				; no, cause an error.
.2ed1	20 80 2f	jsr $2f80			jsr 	FindVariable 				; does the variable exist already
.2ed4	b0 35		bcs $2f0b			bcs 	_CAFound 					; cannot redefine it.
.2ed6	20 3f 2e	jsr $2e3f			jsr 	CreateVariable 				; create the variable entry.
.2ed9	ac 26 0b	ldy $0b26			ldy 	varEnd 						; point Y to the end of the variable entry.
.2edc	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.2ede	48		pha				pha
.2edf	a5 05		lda $05				lda 	temp0+1
.2ee1	48		pha				pha
.2ee2	ad 25 0b	lda $0b25			lda 	varType 					; push variable type on the stack.
.2ee5	48		pha				pha
.2ee6	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.2ee8	a2 04		ldx #$04		ldx	#4
.2eea	20 d9 22	jsr $22d9		jsr	mainHandler
.2eed	a2 00		ldx #$00		ldx	#0
.2eef	20 d9 22	jsr $22d9		jsr	mainHandler
.2ef2	68		pla				pla 		 						; restore type and position.
.2ef3	8d 25 0b	sta $0b25			sta 	varType
.2ef6	68		pla				pla
.2ef7	85 05		sta $05				sta 	temp0+1
.2ef9	68		pla				pla
.2efa	85 04		sta $04				sta 	temp0
.2efc	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.2efe	29 e0		and #$e0			and 	#$E0
.2f00	05 58		ora $58				ora 	esInt2
.2f02	05 60		ora $60				ora 	esInt3
.2f04	f0 0f		beq $2f15			beq 	_CASizeOk
.2f06					_CASize:
.2f06	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2f08	20 a3 23	jsr $23a3		jsr	errorHandler
.2f0b					_CAFound:
.2f0b	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.2f0d	20 a3 23	jsr $23a3		jsr	errorHandler
.2f10					_CANotArray:
.2f10	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.2f12	20 a3 23	jsr $23a3		jsr	errorHandler
.2f15					_CASizeOk:
.2f15	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.2f17	d0 02		bne $2f1b			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.2f19	e6 49		inc $49				inc 	esInt0+1
.2f1b					_CANoCarry:
.2f1b	98		tya				tya
.2f1c	48		pha				pha
.2f1d	a0 05		ldy #$05			ldy 	#5
.2f1f	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.2f21	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.2f23	c8		iny				iny
.2f24	a5 10		lda $10				lda 	lowMemory+1
.2f26	91 04		sta ($04),y			sta 	(temp0),y
.2f28	c8		iny				iny
.2f29	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.2f2b	91 04		sta ($04),y			sta 	(temp0),y
.2f2d	c8		iny				iny
.2f2e	a5 50		lda $50				lda 	esInt1
.2f30	91 04		sta ($04),y			sta 	(temp0),y
.2f32	c8		iny				iny
.2f33	ae 25 0b	ldx $0b25			ldx 	varType 					; get the length per element
.2f36	bd 3e 2f	lda $2f3e,x			lda 	_CAActualSize-$3A-1,x
.2f39	91 04		sta ($04),y			sta 	(temp0),y
.2f3b	aa		tax				tax 								; save size in X
.2f3c	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.2f3e	85 04		sta $04				sta 	temp0
.2f40	a5 10		lda $10				lda 	lowMemory+1
.2f42	85 05		sta $05				sta 	temp0+1
.2f44	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.2f46	85 06		sta $06				sta 	temp1
.2f48	85 07		sta $07				sta 	temp1+1
.2f4a					_CAInitialiseArray:
.2f4a	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.2f4c	ad 25 0b	lda $0b25			lda 	varType 					; base type of array in A.
.2f4f	29 fe		and #$fe			and 	#$FE
.2f51	20 90 2e	jsr $2e90			jsr 	ZeroTemp0Y
.2f54	8a		txa				txa 								; add X to temp0, also updating lowMemory
.2f55	18		clc				clc
.2f56	65 04		adc $04				adc 	temp0
.2f58	85 04		sta $04				sta 	temp0
.2f5a	85 0f		sta $0f				sta 	lowMemory
.2f5c	a5 05		lda $05				lda 	temp0+1
.2f5e	69 00		adc #$00			adc 	#0
.2f60	85 05		sta $05				sta 	temp0+1
.2f62	85 10		sta $10				sta 	lowMemory+1
.2f64	e6 06		inc $06				inc 	temp1 						; bump the counter.
.2f66	d0 02		bne $2f6a			bne 	_CAIANoCarry
.2f68	e6 07		inc $07				inc 	temp1+1
.2f6a					_CAIANoCarry:
.2f6a	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.2f6c	c5 06		cmp $06				cmp 	temp1
.2f6e	d0 da		bne $2f4a			bne 	_CAInitialiseArray
.2f70	a5 50		lda $50				lda 	esInt1
.2f72	c5 07		cmp $07				cmp 	temp1+1
.2f74	d0 d4		bne $2f4a			bne 	_CAInitialiseArray
.2f76	68		pla				pla
.2f77	a8		tay				tay
.2f78	60		rts				rts
.2f79					_CAActualSize:
>2f79	04 00						.byte 	VarISize,0
>2f7b	02 00						.byte 	VarSSize,0
>2f7d	06 00						.byte 	VarFSize,0
>2f7f	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2f80					FindVariable:
.2f80	98		tya				tya
.2f81	48		pha				pha
.2f82	98		tya				tya 								; point temp2 to the actual name.
.2f83	18		clc				clc
.2f84	65 02		adc $02				adc 	codePtr
.2f86	85 08		sta $08				sta 	temp2
.2f88	a5 03		lda $03				lda 	codePtr+1
.2f8a	69 00		adc #$00			adc 	#0
.2f8c	85 09		sta $09				sta 	temp2+1
.2f8e	a0 00		ldy #$00			ldy 	#0
.2f90	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.2f92	85 04		sta $04				sta 	temp0
.2f94	a5 7d		lda $7d				lda 	hashList+1
.2f96	85 05		sta $05				sta 	temp0+1
.2f98	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2f9a	b1 04		lda ($04),y			lda 	(temp0),y
.2f9c	f0 2c		beq $2fca			beq 	_FVFail
.2f9e	aa		tax				tax
.2f9f	88		dey				dey		 							; get LSB
.2fa0	b1 04		lda ($04),y			lda 	(temp0),y
.2fa2	85 04		sta $04				sta 	temp0 						; update pointer.
.2fa4	86 05		stx $05				stx 	temp0+1
.2fa6	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2fa8	b1 04		lda ($04),y			lda 	(temp0),y
.2faa	cd 24 0b	cmp $0b24			cmp 	varHash
.2fad	d0 e9		bne $2f98			bne 	_FVNext 					; if not, no point in checking the name.
.2faf	88		dey				dey 								; copy name pointer to temp1.
.2fb0	b1 04		lda ($04),y			lda 	(temp0),y
.2fb2	85 07		sta $07				sta 	temp1+1
.2fb4	88		dey				dey
.2fb5	b1 04		lda ($04),y			lda 	(temp0),y
.2fb7	85 06		sta $06				sta 	temp1
.2fb9	a0 00		ldy #$00			ldy 	#0
.2fbb					_FVCheck:
.2fbb	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2fbd	d1 08		cmp ($08),y			cmp 	(temp2),y
.2fbf	d0 d7		bne $2f98			bne 	_FVNext		 				; fail if different.
.2fc1	c8		iny				iny
.2fc2	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2fc4	90 f5		bcc $2fbb			bcc 	_FVCheck
.2fc6	68		pla				pla
.2fc7	a8		tay				tay
.2fc8	38		sec				sec
.2fc9	60		rts				rts
.2fca					_FVFail:
.2fca	68		pla				pla
.2fcb	a8		tay				tay
.2fcc	18		clc				clc
.2fcd	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2fce					HashTableReset:
.2fce	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2fd0	a9 00		lda #$00			lda 	#0
.2fd2					_HTRClear:
.2fd2	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2fd5	ca		dex				dex
.2fd6	d0 fa		bne $2fd2			bne 	_HTRClear
.2fd8	60		rts				rts

;******  Return to file: variable/variable.asm

.2fd9					variableHandler:
.2fd9	7c dc 2f	jmp ($2fdc,x)			jmp 	(variableVectors,x)
.2fdc					variableVectors:
>2fdc	25 2d					.word AccessVariable       ; index 0
>2fde	c8 2e					.word CreateArray          ; index 2
>2fe0	ce 2f					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.2fe2					section_end_variable:

;******  End of listing
