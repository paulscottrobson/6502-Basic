
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Sat Mar  6 21:55:13 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a2 02		ldx #$02		ldx	#2
.1005	20 28 22	jsr $2228		jsr	deviceHandler
.1008	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.100a	8d c8 0a	sta $0ac8			sta 	basePage
.100d	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100f	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1012	a9 00		lda #$00			lda 	#($9800) & $FF
.1014	8d ca 0a	sta $0aca			sta 	endMemory
.1017	a9 98		lda #$98			lda 	#($9800) >> 8
.1019	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.101c	4c 28 14	jmp $1428			jmp 	Command_Run
.2a95					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	0c 0a 00 d5 85 05 53 54			.byte 12,10,0,213,133,5,83,84,65,82,84,128,17,11,0,207,3,59,69,198,200,14,1,13,5,61,66,198,128,17,12,0,129,140,1,58,200,2,50,58,200,3,59,67,198,128,16,13,0,213,1,58,200,2,50,58,200,3,59,67,198,128,26,14,0,155,9,58,141,65,203,66,199,129,140,14,1,13,5,61,9,58,198,199,160,9,58,128,25,15,0,155,9,58,141,65,203,66,199,213,14,1,13,5,61,9,58,198,199,160,9,58,128,18,16,0,217,76,200,77,200,78,199,213,133,4,78,69,88,84,128,14,17,0,213,133,7,84,69,88,84,73,69,83,128,18,18,0,217,133,4,80,97,117,108,200,133,4,74,97,110,101,128,11,19,0,213,133,4,68,79,78,69,128,6,20,0,129,143,128,4,21,0,128,4,22,0,128,0
>5008	41 52 54 80 11 0b 00 cf 03 3b 45 c6 c8 0e 01 0d
>5018	05 3d 42 c6 80 11 0c 00 81 8c 01 3a c8 02 32 3a
>5028	c8 03 3b 43 c6 80 10 0d 00 d5 01 3a c8 02 32 3a
>5038	c8 03 3b 43 c6 80 1a 0e 00 9b 09 3a 8d 41 cb 42
>5048	c7 81 8c 0e 01 0d 05 3d 09 3a c6 c7 a0 09 3a 80
>5058	19 0f 00 9b 09 3a 8d 41 cb 42 c7 d5 0e 01 0d 05
>5068	3d 09 3a c6 c7 a0 09 3a 80 12 10 00 d9 4c c8 4d
>5078	c8 4e c7 d5 85 04 4e 45 58 54 80 0e 11 00 d5 85
>5088	07 54 45 58 54 49 45 53 80 12 12 00 d9 85 04 50
>5098	61 75 6c c8 85 04 4a 61 6e 65 80 0b 13 00 d5 85
>50a8	04 44 4f 4e 45 80 06 14 00 81 8f 80 04 15 00 80
>50b8	04 16 00 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101f					Command_Assert:
.101f	20 de 1a	jsr $1ade			jsr 	EvaluateRootInteger 		; what is being asserted.
.1022	20 22 21	jsr $2122			jsr 	MInt32Zero 					; is it true ?
.1025	f0 01		beq $1028			beq 	_CAError
.1027	60		rts				rts
.1028					_CAError:
.1028	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.102a	20 37 22	jsr $2237		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.102d					CommandClear:
.102d	98		tya				tya
.102e	48		pha				pha
.102f	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.1032	85 0d		sta $0d				sta 	highMemory
.1034	ad cb 0a	lda $0acb			lda 	endMemory+1
.1037	85 0e		sta $0e				sta 	highMemory+1
.1039	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.103c	85 04		sta $04				sta 	temp0
.103e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1041	85 05		sta $05				sta 	temp0+1
.1043					_CCFindEnd:
.1043	a0 00		ldy #$00			ldy 	#0
.1045	b1 04		lda ($04),y			lda 	(temp0),y
.1047	f0 0c		beq $1055			beq 	_CCFoundEnd 				; offset zero is end.
.1049	18		clc				clc
.104a	65 04		adc $04				adc 	temp0 						; move to next line
.104c	85 04		sta $04				sta 	temp0
.104e	90 f3		bcc $1043			bcc 	_CCFindEnd
.1050	e6 05		inc $05				inc 	temp0+1
.1052	4c 43 10	jmp $1043			jmp 	_CCFindEnd
.1055					_CCFoundEnd:
.1055	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1057	85 0f		sta $0f				sta 	lowMemory
.1059	a5 05		lda $05				lda 	temp0+1
.105b	85 10		sta $10				sta 	lowMemory+1
.105d	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105f	20 73 10	jsr $1073			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1062	20 88 21	jsr $2188			jsr 	RSReset 					; reset the return stack.
.1065	a2 04		ldx #$04		ldx	#4
.1067	20 8c 2a	jsr $2a8c		jsr	variableHandler
.106a	20 d5 15	jsr $15d5			jsr 	ScanProc 					; scan for procedures
.106d	20 e9 13	jsr $13e9			jsr 	CommandRestore 				; do a restore
.1070	68		pla				pla
.1071	a8		tay				tay
.1072	60		rts				rts
.1073					AdvanceLowMemoryByte:
.1073	18		clc				clc
.1074	65 0f		adc $0f				adc 	lowMemory
.1076	85 0f		sta $0f				sta 	lowMemory
.1078	90 02		bcc $107c			bcc 	_ALMBExit
.107a	e6 10		inc $10				inc 	lowMemory+1
.107c					_ALMBExit:
.107c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.107d					Command_Dim:
.107d	a2 02		ldx #$02		ldx	#2
.107f	20 8c 2a	jsr $2a8c		jsr	variableHandler
.1082	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.1084	c8		iny				iny
.1085	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1087	f0 f4		beq $107d			beq 	Command_Dim
.1089	88		dey				dey 								; unpick get
.108a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2a95					Command_FOR:
.2a95	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2a97	a2 0b		ldx #$0b			ldx 	#11
.2a99	20 96 21	jsr $2196			jsr 	RSClaim
.2a9c	20 c7 10	jsr $10c7			jsr 	CommandLET 					; do the same as LET.
.2a9f	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.2aa1	c9 80		cmp #$80			cmp 	#$80
.2aa3	d0 4c		bne $2af1			bne 	_CFType
.2aa5	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.2aa7	20 63 21	jsr $2163			jsr 	CheckToken
.2aaa	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2aac	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger				; get terminal value in stack 1
.2aaf	98		tya				tya
.2ab0	48		pha				pha
.2ab1	a0 04		ldy #$04			ldy 	#4
.2ab3	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.2ab5	91 78		sta ($78),y			sta 	(rsPointer),y
.2ab7	c8		iny				iny
.2ab8	a5 50		lda $50				lda		esInt1
.2aba	91 78		sta ($78),y			sta 	(rsPointer),y
.2abc	c8		iny				iny
.2abd	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2abf	91 78		sta ($78),y			sta 	(rsPointer),y
.2ac1	c8		iny				iny
.2ac2	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.2ac4	91 78		sta ($78),y			sta 	(rsPointer),y
.2ac6	c8		iny				iny
.2ac7	a5 51		lda $51				lda		esInt1+1
.2ac9	91 78		sta ($78),y			sta 	(rsPointer),y
.2acb	c8		iny				iny
.2acc	a5 59		lda $59				lda		esInt2+1
.2ace	91 78		sta ($78),y			sta 	(rsPointer),y
.2ad0	c8		iny				iny
.2ad1	a5 61		lda $61				lda		esInt3+1
.2ad3	91 78		sta ($78),y			sta 	(rsPointer),y
.2ad5	68		pla				pla
.2ad6	a8		tay				tay
.2ad7	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.2ad9	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.2adb	d0 0e		bne $2aeb			bne 	_CFDone
.2add	c8		iny				iny									; skip over step.
.2ade	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger 			; get step
.2ae1	98		tya				tya
.2ae2	48		pha				pha
.2ae3	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2ae5	a0 06		ldy #$06			ldy 	#6
.2ae7	91 78		sta ($78),y			sta 	(rsPointer),y
.2ae9	68		pla				pla
.2aea	a8		tay				tay
.2aeb					_CFDone:
.2aeb	a9 01		lda #$01			lda 	#1
.2aed	20 c2 21	jsr $21c2			jsr 	RSSavePosition 				; save position.
.2af0	60		rts				rts
.2af1					_CFType:
.2af1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2af3	20 37 22	jsr $2237		jsr	errorHandler
.2af6					Command_NEXT:
.2af6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2af8	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2afa	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2afc	f0 05		beq $2b03			beq 	_isok
.2afe	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2b00	20 37 22	jsr $2237		jsr	errorHandler
.2b03					_isok:
.2b03	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2b05	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2b07	b0 18		bcs $2b21			bcs 	_CNNoIndex
.2b09	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2b0b	20 0d 1b	jsr $1b0d			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2b0e	98		tya				tya
.2b0f	48		pha				pha
.2b10	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2b12	b1 78		lda ($78),y			lda 	(rsPointer),y
.2b14	d5 48		cmp $48,x			cmp 	esInt0,x
.2b16	d0 76		bne $2b8e			bne 	_CNBadIndex
.2b18	c8		iny				iny
.2b19	b1 78		lda ($78),y			lda 	(rsPointer),y
.2b1b	d5 50		cmp $50,x			cmp 	esInt1,x
.2b1d	d0 6f		bne $2b8e			bne 	_CNBadIndex
.2b1f	68		pla				pla
.2b20	a8		tay				tay
.2b21					_CNNoIndex:
.2b21	98		tya				tya
.2b22	48		pha				pha
.2b23	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2b25	b1 78		lda ($78),y			lda 	(rsPointer),y
.2b27	85 04		sta $04				sta 	temp0
.2b29	c8		iny				iny
.2b2a	b1 78		lda ($78),y			lda 	(rsPointer),y
.2b2c	85 05		sta $05				sta 	temp0+1
.2b2e	c8		iny				iny
.2b2f	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2b31	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2b33	85 09		sta $09				sta 	temp2+1 					; save for later.
.2b35	10 01		bpl $2b38			bpl 	_CNSignX
.2b37	ca		dex				dex  								; X = $FF
.2b38					_CNSignX:
.2b38	18		clc				clc 								; add to the LSB
.2b39	a0 00		ldy #$00			ldy 	#0
.2b3b	71 04		adc ($04),y			adc 	(temp0),y
.2b3d	91 04		sta ($04),y			sta 	(temp0),y
.2b3f					_CNPropogate:
.2b3f	c8		iny				iny  								; add the sign extended in X to the rest.
.2b40	8a		txa				txa
.2b41	71 04		adc ($04),y			adc 	(temp0),y
.2b43	91 04		sta ($04),y			sta 	(temp0),y
.2b45	c8		iny				iny
.2b46	8a		txa				txa
.2b47	71 04		adc ($04),y			adc 	(temp0),y
.2b49	91 04		sta ($04),y			sta 	(temp0),y
.2b4b	c8		iny				iny
.2b4c	8a		txa				txa
.2b4d	71 04		adc ($04),y			adc 	(temp0),y
.2b4f	91 04		sta ($04),y			sta 	(temp0),y
.2b51	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2b52	a5 78		lda $78				lda 	rsPointer
.2b54	69 07		adc #$07			adc 	#7
.2b56	85 06		sta $06				sta 	temp1
.2b58	a9 00		lda #$00			lda 	#0
.2b5a	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2b5c	a8		tay				tay 								; and clear the Y register again.
.2b5d	65 79		adc $79				adc 	rsPointer+1
.2b5f	85 07		sta $07				sta 	temp1+1
.2b61	38		sec				sec 								; calculate current - limit oring interim values.
.2b62	20 9a 2b	jsr $2b9a			jsr 	_CNCompare
.2b65	20 9a 2b	jsr $2b9a			jsr 	_CNCompare
.2b68	20 9a 2b	jsr $2b9a			jsr 	_CNCompare
.2b6b	20 9a 2b	jsr $2b9a			jsr 	_CNCompare
.2b6e	50 02		bvc $2b72			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2b70	49 80		eor #$80			eor 	#$80
.2b72					_CNNoOverflow:
.2b72	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2b74	30 1d		bmi $2b93			bmi 	_CNCheckDownto
.2b76	c9 00		cmp #$00			cmp 	#0
.2b78	30 0c		bmi $2b86			bmi 	_CNLoopRound 				; loop round if < =
.2b7a	a5 08		lda $08				lda 	temp2
.2b7c	f0 08		beq $2b86			beq 	_CNLoopRound
.2b7e					_CNLoopExit:
.2b7e	68		pla				pla
.2b7f	a8		tay				tay
.2b80	a9 0b		lda #$0b			lda 	#11
.2b82	20 b8 21	jsr $21b8			jsr 	RSFree
.2b85	60		rts				rts
.2b86					_CNLoopRound:
.2b86	68		pla				pla
.2b87	a8		tay				tay
.2b88	a9 01		lda #$01			lda 	#1
.2b8a	20 d5 21	jsr $21d5			jsr 	RSLoadPosition				; go back to the loop top
.2b8d	60		rts				rts
.2b8e					_CNBadIndex:
.2b8e	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2b90	20 37 22	jsr $2237		jsr	errorHandler
.2b93					_CNCheckDownto:
.2b93	c9 00		cmp #$00			cmp 	#0
.2b95	10 ef		bpl $2b86			bpl 	_CNLoopRound
.2b97	4c 7e 2b	jmp $2b7e			jmp 	_CNLoopExit
.2b9a					_CNCompare:
.2b9a	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2b9c	f1 06		sbc ($06),y			sbc 	(temp1),y
.2b9e	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.2ba0	85 08		sta $08				sta 	temp2
.2ba2	c8		iny				iny
.2ba3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.108b					CommandIf:
.108b	20 de 1a	jsr $1ade			jsr 	EvaluateRootInteger 		; if what ?
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1090	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1092	f0 04		beq $1098			beq 	_IfSimple
.1094	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1096	d0 1b		bne $10b3			bne 	_IfComplex
.1098					_IfSimple:
.1098	20 22 21	jsr $2122			jsr 	MInt32Zero					; check if TOS zero
.109b	f0 10		beq $10ad			beq 	_IfEOL 						; go to next line.
.109d	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.109f	c8		iny				iny
.10a0	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.10a2	f0 0c		beq $10b0			beq 	_IfGoto 					; do the Goto code
.10a4	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.10a6	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10a8	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10aa	f0 04		beq $10b0			beq 	_IfGoto
.10ac	60		rts				rts 								; else continue on this line.
.10ad					_IfEOL:
.10ad	4c 49 16	jmp $1649			jmp 	AdvanceNextLine 			; go to next line
.10b0					_IfGoto:
.10b0	4c 88 16	jmp $1688			jmp 	CommandGoto
.10b3					_IfComplex:
.10b3	20 22 21	jsr $2122			jsr 	MInt32Zero 					; is it true ?
.10b6	f0 01		beq $10b9			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10b8	60		rts				rts 								; else continue.
.10b9					_IFSkip:
.10b9	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10bb	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10bd	4c 0d 2c	jmp $2c0d			jmp		ScanForward
.10c0					Command_ELSE:
.10c0	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10c2	8a		txa				txa
.10c3	4c 0d 2c	jmp $2c0d			jmp		ScanForward
.10c6					Command_ENDIF:
.10c6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10c7					CommandLet:
.10c7	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10c9	20 0d 1b	jsr $1b0d			jsr 	EvaluateReference
.10cc	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10ce	20 63 21	jsr $2163			jsr 	CheckToken
.10d1	e8		inx				inx 								; do RHS
.10d2	20 c1 1a	jsr $1ac1			jsr 	Evaluate 					; evaluate and derefernce
.10d5	ca		dex				dex
.10d6	20 da 10	jsr $10da			jsr 	WriteValue 					; write it out
.10d9	60		rts				rts
.10da					WriteValue:
.10da	98		tya				tya
.10db	48		pha				pha
.10dc	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10df	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10e1	55 41		eor $41,x			eor 	esType+1,x
.10e3	29 40		and #$40			and 	#$40
.10e5	d0 50		bne $1137			bne		_WVType
.10e7	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10e9	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10eb	29 40		and #$40			and 	#$40
.10ed	d0 1f		bne $110e			bne 	_WVCopyString
.10ef	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10f1	15 41		ora $41,x			ora 	esType+1,x
.10f3	4a		lsr a				lsr 	a
.10f4	90 22		bcc $1118			bcc 	_WVCopyData4
.10f6	b5 40		lda $40,x			lda 	esType,x
.10f8	4a		lsr a				lsr 	a
.10f9	90 3c		bcc $1137			bcc 	_WVType
.10fb	e8		inx				inx 								; force the value being written to be a float.
.10fc	20 fa 16	jsr $16fa			jsr 	BPMakeFloat
.10ff	ca		dex				dex
.1100	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; set Temp0 to write address
.1103	e8		inx				inx
.1104	8a		txa				txa
.1105	a2 20		ldx #$20		ldx	#32
.1107	20 28 25	jsr $2528		jsr	floatingpointHandler
.110a	aa		tax				tax
.110b	4c 34 11	jmp $1134			jmp 	_WVCopyExit
.110e					_WVCopyString:
.110e	8a		txa				txa
.110f	a2 0c		ldx #$0c		ldx	#12
.1111	20 c4 27	jsr $27c4		jsr	stringHandler
.1114	aa		tax				tax
.1115	4c 34 11	jmp $1134			jmp 	_WVCopyExit
.1118					_WVCopyData4:
.1118	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.111a	29 20		and #$20			and 	#$20
.111c	d0 10		bne $112e			bne 	_WVCopyData1
.111e	a0 03		ldy #$03			ldy 	#3
.1120	b5 61		lda $61,x			lda 	esInt3+1,x
.1122	91 04		sta ($04),y			sta 	(temp0),y
.1124	88		dey				dey
.1125	b5 59		lda $59,x			lda 	esInt2+1,x
.1127	91 04		sta ($04),y			sta 	(temp0),y
.1129	88		dey				dey
.112a	b5 51		lda $51,x			lda 	esInt1+1,x
.112c	91 04		sta ($04),y			sta 	(temp0),y
.112e					_WVCopyData1:
.112e	a0 00		ldy #$00			ldy 	#0
.1130	b5 49		lda $49,x			lda 	esInt0+1,x
.1132	91 04		sta ($04),y			sta 	(temp0),y
.1134					_WVCopyExit:
.1134	68		pla				pla
.1135	a8		tay				tay
.1136	60		rts				rts
.1137					_WVType:
.1137	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1139	20 37 22	jsr $2237		jsr	errorHandler
.113c					TOSToTemp0:
.113c	b5 48		lda $48,x			lda 	esInt0,x
.113e	85 04		sta $04				sta 	temp0
.1140	b5 50		lda $50,x			lda 	esInt1,x
.1142	85 05		sta $05				sta 	temp0+1
.1144	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.1145					CommandLocal:
.1145	a2 00		ldx #$00			ldx 	#0
.1147	20 63 11	jsr $1163			jsr 	LocaliseVariable 			; localise one.
.114a					_CLCheckNext:
.114a	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.114c	c8		iny				iny
.114d	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.114f	f0 06		beq $1157			beq 	_CLAssignment
.1151	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1153	f0 f0		beq $1145			beq 	CommandLocal
.1155	88		dey				dey
.1156	60		rts				rts
.1157					_CLAssignment:
.1157	a2 01		ldx #$01			ldx 	#1
.1159	20 c1 1a	jsr $1ac1			jsr 	Evaluate 					; evaluate RHS
.115c	ca		dex				dex
.115d	20 da 10	jsr $10da			jsr 	WriteValue
.1160	4c 4a 11	jmp $114a			jmp 	_CLCheckNext
.1163					LocaliseVariable:
.1163	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1165	c9 40		cmp #$40			cmp 	#$40
.1167	b0 67		bcs $11d0			bcs 	_LVSyntax
.1169	8a		txa				txa 								; get the address of that variable.
.116a	a2 00		ldx #$00		ldx	#0
.116c	20 8c 2a	jsr $2a8c		jsr	variableHandler
.116f	aa		tax				tax
.1170	8a		txa				txa
.1171	48		pha				pha
.1172	98		tya				tya
.1173	48		pha				pha
.1174	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1177	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1179	0a		asl a				asl 	a
.117a	10 16		bpl $1192			bpl 	_LVPushNumber
.117c	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.117e	b1 04		lda ($04),y			lda 	(temp0),y
.1180	c8		iny				iny
.1181	85 06		sta $06				sta 	temp1
.1183	b1 04		lda ($04),y			lda 	(temp0),y
.1185	85 07		sta $07				sta 	temp1+1
.1187	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1189	b1 06		lda ($06),y			lda 	(temp1),y
.118b	aa		tax				tax 								; into X
.118c	e8		inx				inx 								; +1 for length.
.118d	a9 24		lda #$24			lda 	#markerString
.118f	4c a7 11	jmp $11a7			jmp 	_LVWriteFrame
.1192					_LVPushNumber:
.1192	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1194	85 06		sta $06				sta 	temp1
.1196	a5 05		lda $05				lda 	temp0+1
.1198	85 07		sta $07				sta 	temp1+1
.119a	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.119c	4a		lsr a				lsr 	a
.119d	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.119f	a2 04		ldx #$04			ldx 	#VarISize
.11a1	90 04		bcc $11a7			bcc 	_LVIsInteger
.11a3	a9 23		lda #$23			lda 	#markerFloat
.11a5	a2 06		ldx #$06			ldx 	#VarFSize
.11a7					_LVIsInteger:
.11a7					_LVWriteFrame:
.11a7	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.11aa	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.11ab	e8		inx				inx
.11ac	e8		inx				inx
.11ad	20 96 21	jsr $2196			jsr 	RSClaim 					; create the stack frame.
.11b0	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.11b2	a0 01		ldy #$01			ldy 	#1
.11b4	91 78		sta ($78),y			sta 	(rsPointer),y
.11b6	c8		iny				iny
.11b7	a5 05		lda $05				lda 	temp0+1
.11b9	91 78		sta ($78),y			sta 	(rsPointer),y
.11bb	a0 00		ldy #$00			ldy 	#0
.11bd					_LVCopyData:
.11bd	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.11bf	c8		iny				iny 								; write allowing for the header bit.
.11c0	c8		iny				iny
.11c1	c8		iny				iny
.11c2	91 78		sta ($78),y			sta 	(rsPointer),y
.11c4	88		dey				dey
.11c5	88		dey				dey
.11c6	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.11c9	d0 f2		bne $11bd			bne 	_LVCopyData
.11cb	68		pla				pla
.11cc	a8		tay				tay
.11cd	68		pla				pla
.11ce	aa		tax				tax
.11cf	60		rts				rts
.11d0					_LVSyntax:
.11d0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.11d2	20 37 22	jsr $2237		jsr	errorHandler
.11d5					RestoreLocals:
.11d5	a2 00		ldx #$00			ldx 	#0
.11d7	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.11d9	c9 40		cmp #$40			cmp	 	#64
.11db	90 01		bcc $11de			bcc 	_RLocal
.11dd	60		rts				rts
.11de					_RLocal:
.11de	8a		txa				txa
.11df	48		pha				pha
.11e0	98		tya				tya
.11e1	48		pha				pha
.11e2	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.11e4	b1 78		lda ($78),y			lda 	(rsPointer),y
.11e6	85 04		sta $04				sta 	temp0
.11e8	c8		iny				iny
.11e9	b1 78		lda ($78),y			lda 	(rsPointer),y
.11eb	85 05		sta $05				sta 	temp0+1
.11ed	a0 00		ldy #$00			ldy 	#0 							; get type back.
.11ef	b1 78		lda ($78),y			lda 	(rsPointer),y
.11f1	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.11f3	f0 28		beq $121d			beq 	_RString
.11f5	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.11f7	c9 25		cmp #$25			cmp 	#markerInt
.11f9	f0 02		beq $11fd			beq 	_RIsInteger
.11fb	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.11fd					_RIsInteger:
.11fd	8a		txa				txa
.11fe	48		pha				pha
.11ff	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1201					_RCopyBack:
.1201	b1 78		lda ($78),y			lda 	(rsPointer),y
.1203	88		dey				dey
.1204	88		dey				dey
.1205	88		dey				dey
.1206	91 04		sta ($04),y			sta 	(temp0),y
.1208	c8		iny				iny
.1209	c8		iny				iny
.120a	c8		iny				iny
.120b	c8		iny				iny
.120c	ca		dex				dex
.120d	d0 f2		bne $1201			bne 	_RCopyBack
.120f	68		pla				pla 								; get size add 3
.1210	18		clc				clc
.1211	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1213					_RRestoreAAndLoop:
.1213	20 b8 21	jsr $21b8			jsr 	RSFree
.1216	68		pla				pla
.1217	a8		tay				tay
.1218	68		pla				pla
.1219	aa		tax				tax
.121a	4c d5 11	jmp $11d5			jmp 	RestoreLocals 				; go see if there are any more locals.
.121d					_RString:
.121d	a2 00		ldx #$00			ldx 	#0
.121f	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1221	b1 78		lda ($78),y			lda 	(rsPointer),y
.1223	95 48		sta $48,x			sta 	esInt0,x
.1225	c8		iny				iny
.1226	b1 78		lda ($78),y			lda 	(rsPointer),y
.1228	95 50		sta $50,x			sta 	esInt1,x
.122a	18		clc				clc
.122b	a5 78		lda $78				lda 	rsPointer
.122d	69 03		adc #$03			adc 	#3
.122f	95 49		sta $49,x			sta 	esInt0+1,x
.1231	a5 79		lda $79				lda 	rsPointer+1
.1233	69 00		adc #$00			adc 	#0
.1235	95 51		sta $51,x			sta 	esInt1+1,x
.1237	8a		txa				txa
.1238	a2 0c		ldx #$0c		ldx	#12
.123a	20 c4 27	jsr $27c4		jsr	stringHandler
.123d	a0 03		ldy #$03			ldy 	#3 							; get string length
.123f	b1 78		lda ($78),y			lda 	(rsPointer),y
.1241	18		clc				clc
.1242	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1244	4c 13 12	jmp $1213			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1247					Command_New:
.1247	20 82 14	jsr $1482			jsr 	ResetCodeAddress 			; point to first line
.124a	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.124c	98		tya				tya
.124d	91 02		sta ($02),y			sta 	(codePtr),y
.124f	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything down.
.1252	4c 46 16	jmp $1646			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1255					Command_Poke:
.1255	a9 01		lda #$01			lda 	#1
.1257	d0 06		bne $125f			bne 	PokeGeneral
.1259					Command_Doke:
.1259	a9 02		lda #$02			lda 	#2
.125b	d0 02		bne $125f			bne 	PokeGeneral
.125d					Command_Loke:
.125d	a9 03		lda #$03			lda 	#3
.125f					PokeGeneral:
.125f	48		pha				pha 								; save size
.1260	20 de 1a	jsr $1ade			jsr 	EvaluateRootInteger 		; target address
.1263	20 7b 21	jsr $217b			jsr	 	CheckComma
.1266	e8		inx				inx
.1267	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger 			; what value to POKE ?
.126a	ca		dex				dex
.126b	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; temp0 points to the target address
.126e	84 0c		sty $0c				sty 	tempShort 					; save Y
.1270	68		pla				pla 								; get copy type and dispatch
.1271	aa		tax				tax
.1272	ca		dex				dex
.1273	f0 14		beq $1289			beq 	_Poke1
.1275	ca		dex				dex
.1276	f0 0b		beq $1283			beq 	_Poke2
.1278	a0 03		ldy #$03			ldy 	#3
.127a	a5 61		lda $61				lda 	esInt3+1
.127c	91 04		sta ($04),y			sta 	(temp0),y
.127e	88		dey				dey
.127f	a5 59		lda $59				lda 	esInt2+1
.1281	91 04		sta ($04),y			sta 	(temp0),y
.1283					_Poke2:
.1283	a0 01		ldy #$01			ldy 	#1
.1285	a5 51		lda $51				lda 	esInt1+1
.1287	91 04		sta ($04),y			sta 	(temp0),y
.1289					_Poke1:
.1289	a0 00		ldy #$00			ldy 	#0
.128b	a5 49		lda $49				lda 	esInt0+1
.128d	91 04		sta ($04),y			sta 	(temp0),y
.128f	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1291	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.1292					Command_Print:
.1292	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1294	8d f1 0a	sta $0af1			sta 	lastPrintToken
.1297	88		dey				dey
.1298					_PrintLoopSkip:
.1298	c8		iny				iny
.1299					_PrintLoop:
.1299	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.129b	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.129d	f0 5b		beq $12fa			beq 	_PrintExit
.129f	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.12a1	f0 57		beq $12fa			beq 	_PrintExit
.12a3	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.12a6	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.12a8	f0 ee		beq $1298			beq 	_PrintLoopSkip
.12aa	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.12ac	f0 3c		beq $12ea			beq	 	_PrintNewLine
.12ae	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.12b0	f0 40		beq $12f2			beq 	_PrintTab
.12b2	20 bf 1a	jsr $1abf			jsr 	EvaluateRoot 				; evaluate something at the root
.12b5	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.12b7	85 04		sta $04				sta 	temp0
.12b9	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.12bb	85 05		sta $05				sta 	1+(temp0)
.12bd	a5 40		lda $40				lda 	esType 						; get type
.12bf	f0 15		beq $12d6			beq		_PrintInteger
.12c1	4a		lsr a				lsr 	a 							; check for floating point
.12c2	b0 08		bcs $12cc			bcs 	_PrintFloat
.12c4					_PrintString:
.12c4	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.12c6	20 3c 11	jsr $113c			jsr 	TOSToTemp0
.12c9	4c e4 12	jmp $12e4			jmp 	_PrintTemp0 				; print no leading space.
.12cc					_PrintFloat:
.12cc	a9 00		lda #$00			lda 	#0 							; stack level.
.12ce	a2 14		ldx #$14		ldx	#20
.12d0	20 28 25	jsr $2528		jsr	floatingpointHandler
.12d3	4c dd 12	jmp $12dd			jmp 	_PrintSpaceTemp0
.12d6					_PrintInteger:
.12d6	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.12d8	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.12da	20 51 20	jsr $2051			jsr 	MInt32ToString				; convert to text
.12dd					_PrintSpaceTemp0:
.12dd	a9 20		lda #$20			lda 	#32
.12df	a2 06		ldx #$06		ldx	#6
.12e1	20 28 22	jsr $2228		jsr	deviceHandler
.12e4					_PrintTemp0:
.12e4	20 0b 13	jsr $130b			jsr 	PrintString
.12e7	4c 99 12	jmp $1299			jmp 	_PrintLoop
.12ea					_PrintNewLine:
.12ea	a2 00		ldx #$00		ldx	#0
.12ec	20 28 22	jsr $2228		jsr	deviceHandler
.12ef	4c 98 12	jmp $1298			jmp 	_PrintLoopSkip
.12f2					_PrintTab:
.12f2	a2 08		ldx #$08		ldx	#8
.12f4	20 28 22	jsr $2228		jsr	deviceHandler
.12f7	4c 98 12	jmp $1298			jmp 	_PrintLoopSkip
.12fa					_PrintExit:
.12fa	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.12fd	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.12ff	f0 09		beq $130a			beq 	_PrintExit2
.1301	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1303	f0 05		beq $130a			beq 	_PrintExit2
.1305	a2 00		ldx #$00		ldx	#0
.1307	20 28 22	jsr $2228		jsr	deviceHandler
.130a					_PrintExit2:
.130a	60		rts				rts
.130b					PrintString:
.130b	8a		txa				txa
.130c	48		pha				pha
.130d	98		tya				tya
.130e	48		pha				pha
.130f	a0 00		ldy #$00			ldy 	#0							; get length
.1311	b1 04		lda ($04),y			lda 	(temp0),y
.1313	aa		tax				tax 								; into X
.1314	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1316	f0 10		beq $1328			beq 	_PSExit
.1318	ca		dex				dex
.1319	8a		txa				txa
.131a	48		pha				pha
.131b	c8		iny				iny
.131c	b1 04		lda ($04),y			lda 	(temp0),y
.131e	a2 06		ldx #$06		ldx	#6
.1320	20 28 22	jsr $2228		jsr	deviceHandler
.1323	68		pla				pla
.1324	aa		tax				tax
.1325	4c 14 13	jmp $1314			jmp 	_PSLoop
.1328					_PSExit:
.1328	68		pla				pla
.1329	a8		tay				tay
.132a	68		pla				pla
.132b	aa		tax				tax
.132c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.132d					CallProc:
.132d	20 69 15	jsr $1569			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1330	48		pha				pha 								; save length on stack
.1331	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.1333	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.1335	48		pha				pha
.1336	a5 04		lda $04				lda 	temp0
.1338	48		pha				pha
.1339	98		tya				tya 								; calculate Y + length
.133a	18		clc				clc
.133b	65 0c		adc $0c				adc 	tempShort
.133d	a8		tay				tay
.133e	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1340					_CallProcEvalParams:
.1340	e8		inx				inx
.1341	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.1343	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1345	f0 0b		beq $1352			beq 	_CPDoneParams
.1347	20 c1 1a	jsr $1ac1			jsr 	Evaluate 					; evaluate a parameter
.134a	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.134c	c8		iny				iny
.134d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.134f	f0 ef		beq $1340			beq 	_CallProcEvalParams
.1351	88		dey				dey 								; undo consumption.
.1352					_CPDoneParams:
.1352	20 6e 21	jsr $216e			jsr 	CheckRightParen 			; check closing parenthesis.
.1355	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.1358	a2 04		ldx #$04			ldx 	#4							; make space on stack
.135a	a9 50		lda #$50			lda 	#markerPROC
.135c	20 96 21	jsr $2196			jsr 	RSClaim
.135f	a9 01		lda #$01			lda 	#1 							; store return address.
.1361	20 c2 21	jsr $21c2			jsr 	RSSavePosition
.1364	68		pla				pla 								; get the new code Ptr
.1365	85 02		sta $02				sta 	codePtr
.1367	68		pla				pla
.1368	85 03		sta $03				sta 	codePtr+1
.136a	68		pla				pla 								; length of name + 4 is the param start.
.136b	18		clc				clc
.136c	69 04		adc #$04			adc 	#4
.136e	a8		tay				tay
.136f	a2 ff		ldx #$ff			ldx 	#$FF
.1371					_CPLoadParameters:
.1371	e8		inx				inx 								; point to where the address should be loaded.
.1372	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.1375	f0 1e		beq $1395			beq 	_CPParamError
.1377	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1379	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.137b	f0 0e		beq $138b			beq 	_CPParamComplete 			; done all the parameters
.137d	20 63 11	jsr $1163			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1380	20 da 10	jsr $10da			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1383	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1385	c8		iny				iny
.1386	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1388	f0 e7		beq $1371			beq 	_CPLoadParameters
.138a	88		dey				dey 								; no, unconsume and check for )
.138b					_CPParamComplete:
.138b	20 6e 21	jsr $216e			jsr 	CheckRightParen 			; check )
.138e	e8		inx				inx 								; check right number of parameters
.138f	ec f2 0a	cpx $0af2			cpx 	paramCount
.1392	d0 01		bne $1395			bne 	_CPParamError
.1394	60		rts				rts
.1395					_CPParamError:
.1395	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1397	20 37 22	jsr $2237		jsr	errorHandler
.139a					ReturnProc:
.139a	20 d5 11	jsr $11d5			jsr 	RestoreLocals 				; get the locals back.
.139d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.139f	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.13a1	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.13a3	f0 05		beq $13aa			beq 	_isok
.13a5	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.13a7	20 37 22	jsr $2237		jsr	errorHandler
.13aa					_isok:
.13aa	a9 01		lda #$01			lda 	#1
.13ac	20 d5 21	jsr $21d5			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13af	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13b1	20 b8 21	jsr $21b8			jsr 	RSFree
.13b4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0af3					dataPtr:
>0af3							.fill 	2
.0af5					dataIndex:
>0af5							.fill 	1
.13b5					CommandRead:
.13b5	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.13b7	20 0d 1b	jsr $1b0d			jsr 	EvaluateReference
.13ba	20 fb 13	jsr $13fb			jsr 	SwapDPCP 					; use the data pointer.
.13bd	b1 02		lda ($02),y			lda 	(codePtr),y 				; see where it is.
.13bf	c8		iny				iny
.13c0	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.13c2	f0 07		beq $13cb			beq 	_CRInData
.13c4	88		dey				dey
.13c5	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.13c7	aa		tax				tax
.13c8	20 0d 2c	jsr $2c0d			jsr 	ScanForward
.13cb					_CRInData:
.13cb	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.13cd	20 c1 1a	jsr $1ac1			jsr 	Evaluate
.13d0	ca		dex				dex 								; and write the value.
.13d1	20 da 10	jsr $10da			jsr 	WriteValue
.13d4	20 fb 13	jsr $13fb			jsr 	SwapDPCP 					; get the code pointer back.
.13d7	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.13d9	c8		iny				iny
.13da	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.13dc	f0 d7		beq $13b5			beq 	CommandRead
.13de	88		dey				dey
.13df	60		rts				rts
.13e0					CommandData:
.13e0	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.13e2	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.13e4	20 0d 2c	jsr $2c0d			jsr 	ScanForward
.13e7	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.13e8	60		rts				rts
.13e9					CommandRestore:
.13e9	ad c8 0a	lda $0ac8			lda 	basePage
.13ec	8d f3 0a	sta $0af3			sta 	dataPtr
.13ef	ad c9 0a	lda $0ac9			lda 	basePage+1
.13f2	8d f4 0a	sta $0af4			sta 	dataPtr+1
.13f5	a9 03		lda #$03			lda 	#3
.13f7	8d f5 0a	sta $0af5			sta 	dataIndex
.13fa	60		rts				rts
.13fb					SwapDPCP:
.13fb	8a		txa				txa
.13fc	48		pha				pha
.13fd	98		tya				tya 								; swap Y, DataIndex
.13fe	ac f5 0a	ldy $0af5			ldy 	DataIndex
.1401	8d f5 0a	sta $0af5			sta 	DataIndex
.1404	a5 02		lda $02				lda 	codePtr 					; swap code/dataptr low
.1406	ae f3 0a	ldx $0af3			ldx 	dataptr
.1409	8d f3 0a	sta $0af3			sta 	dataPtr
.140c	86 02		stx $02				stx 	codePtr
.140e	a5 03		lda $03				lda 	codePtr+1 					; swap code/dataptr high.
.1410	ae f4 0a	ldx $0af4			ldx 	dataptr+1
.1413	8d f4 0a	sta $0af4			sta 	dataPtr+1
.1416	86 03		stx $03				stx 	codePtr+1
.1418	68		pla				pla
.1419	aa		tax				tax
.141a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.141b					Command_Rem:
.141b					Command_Rem2:
.141b	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.141d	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.141f	d0 06		bne $1427			bne 	_CRNotString
.1421	c8		iny				iny
.1422	98		tya				tya
.1423	38		sec				sec
.1424	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1426	a8		tay				tay
.1427					_CRNotString:
.1427	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.2ba4					Command_Repeat:
.2ba4	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2ba6	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2ba8	20 96 21	jsr $2196			jsr 	RSClaim
.2bab	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2bad	20 c2 21	jsr $21c2			jsr 	RSSavePosition
.2bb0	60		rts				rts
.2bb1					Command_Until:
.2bb1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2bb3	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2bb5	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2bb7	f0 05		beq $2bbe			beq 	_isok
.2bb9	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2bbb	20 37 22	jsr $2237		jsr	errorHandler
.2bbe					_isok:
.2bbe	20 de 1a	jsr $1ade			jsr 	EvaluateRootInteger 		; at the bottom.
.2bc1	20 22 21	jsr $2122			jsr 	MInt32Zero					; check if TOS zero
.2bc4	d0 06		bne $2bcc			bne 	_CUExit
.2bc6	a9 01		lda #$01			lda 	#1
.2bc8	20 d5 21	jsr $21d5			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2bcb	60		rts				rts
.2bcc					_CUExit:
.2bcc	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2bce	20 b8 21	jsr $21b8			jsr 	RSFree
.2bd1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.1428					Command_Run:
.1428	a2 ff		ldx #$ff			ldx 	#$FF
.142a	9a		txs				txs
.142b	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything.
.142e	20 82 14	jsr $1482			jsr 	ResetCodeAddress 			; back to the start.
.1431	a0 03		ldy #$03			ldy 	#3
.1433					CRNextInstruction:
.1433	64 7b		stz $7b				stz 	softMemAlloc+1
.1435	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1437	10 1c		bpl $1455			bpl 	_CRNotToken
.1439	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.143b	b0 0c		bcs $1449			bcs 	_CRExecute
.143d	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.143f	b0 4e		bcs $148f			bcs 	Unimplemented
.1441	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1443	b0 04		bcs $1449			bcs 	_CRExecute
.1445	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1447	b0 16		bcs $145f			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1449					_CRExecute:
.1449	c8		iny				iny 								; consume it.
.144a	0a		asl a				asl 	a 							; double it, losing most significant bit.
.144b	aa		tax				tax
.144c	20 52 14	jsr $1452			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.144f	4c 33 14	jmp $1433			jmp 	CRNextInstruction
.1452					_CRRunRoutine:
.1452	7c 99 14	jmp ($1499,x)			jmp 	(Group0Vectors,x)
.1455					_CRNotToken:
.1455	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1457	b0 36		bcs $148f			bcs 	Unimplemented
.1459					_CRDefaultLet:
.1459	20 c7 10	jsr $10c7			jsr 	CommandLet 					; do the default, LET
.145c	4c 33 14	jmp $1433			jmp 	CRNextInstruction
.145f					_CRCheckIndirect:
.145f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1461	f0 f6		beq $1459			beq 	_CRDefaultLet
.1463	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1465	f0 f2		beq $1459			beq 	_CRDefaultLet
.1467	d0 26		bne $148f			bne 	Unimplemented
.1469					CommandShift1:
.1469	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.146b	10 22		bpl $148f			bpl 	Unimplemented 				; we have an error as this should not happen.
.146d	0a		asl a				asl 	a 							; double into X
.146e	aa		tax				tax
.146f	c8		iny				iny 								; advance over it.
.1470	20 76 14	jsr $1476			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1473	4c 33 14	jmp $1433			jmp 	CRNextInstruction
.1476					_RunIt:
.1476	7c 49 15	jmp ($1549,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1479					CommandShift2:
.1479	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.147b	20 97 24	jsr $2497		jsr	extensionHandler
.147e	4c 33 14	jmp $1433			jmp 	CRNextInstruction
.1481					CommandColon:
.1481	60		rts				rts
.1482					ResetCodeAddress:
.1482	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1485	85 02		sta $02				sta 	codePtr
.1487	ad c9 0a	lda $0ac9			lda 	basePage+1
.148a	85 03		sta $03				sta 	codePtr+1
.148c	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.148e	60		rts				rts
.148f					Unimplemented:
.148f	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1491	20 37 22	jsr $2237		jsr	errorHandler
.1494					TKErr01:
.1494					TKErr02:
.1494					TKErr03:
.1494					TKErr04:
.1494					TKErr05:
.1494					TKErr06:
.1494					TKErr07:
.1494					TKErr08:
.1494					TKErr09:
.1494					TKErr10:
.1494	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1496	20 37 22	jsr $2237		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1499					Group0Vectors:
>1499	49 16					.word	AdvanceNextLine          ; $80 [[eol]]
>149b	69 14					.word	CommandShift1            ; $81 [[sh1]]
>149d	79 14					.word	CommandShift2            ; $82 [[sh2]]
>149f	94 14					.word	TKErr09                  ; $83 [[sh3]]
>14a1	94 14					.word	TKErr10                  ; $84 [[fpc]]
>14a3	94 14					.word	TKErr08                  ; $85 [[str]]
>14a5	9c 17					.word	AndHandler               ; $86 and
>14a7	89 17					.word	OrHandler                ; $87 or
>14a9	76 17					.word	XorHandler               ; $88 xor
>14ab	be 18					.word	CompareGreaterEq         ; $89 >=
>14ad	c8 18					.word	CompareLessEq            ; $8a <=
>14af	aa 18					.word	CompareGreater           ; $8b >
>14b1	a0 18					.word	CompareLess              ; $8c <
>14b3	96 18					.word	CompareEquals            ; $8d =
>14b5	b4 18					.word	CompareNotEquals         ; $8e <>
>14b7	07 17					.word	AddHandler               ; $8f +
>14b9	2a 17					.word	SubHandler               ; $90 -
>14bb	c2 17					.word	ShrHandler               ; $91 >>
>14bd	af 17					.word	ShlHandler               ; $92 <<
>14bf	3d 17					.word	MulHandler               ; $93 *
>14c1	50 17					.word	DivHandler               ; $94 /
>14c3	63 17					.word	ModHandler               ; $95 mod
>14c5	fb 17					.word	PowerHandler             ; $96 ^
>14c7	d5 17					.word	WordRefHandler           ; $97 !
>14c9	e8 17					.word	ByteRefHandler           ; $98 ?
>14cb	a4 2b					.word	Command_Repeat           ; $99 repeat
>14cd	d2 2b					.word	Command_While            ; $9a while
>14cf	95 2a					.word	Command_FOR              ; $9b for
>14d1	8b 10					.word	CommandIf                ; $9c if
>14d3	94 14					.word	TKErr04                  ; $9d defproc
>14d5	b1 2b					.word	Command_Until            ; $9e until
>14d7	f5 2b					.word	Command_Wend             ; $9f wend
>14d9	f6 2a					.word	Command_NEXT             ; $a0 next
>14db	94 14					.word	TKErr06                  ; $a1 then
>14dd	c6 10					.word	Command_ENDIF            ; $a2 endif
>14df	9a 13					.word	ReturnProc               ; $a3 endproc
>14e1	97 1a					.word	UnaryParenthesis         ; $a4 (
>14e3	ef 1b					.word	UnaryLen                 ; $a5 len(
>14e5	33 1c					.word	UnarySgn                 ; $a6 sgn(
>14e7	1c 1c					.word	UnaryAbs                 ; $a7 abs(
>14e9	8c 1c					.word	Unary_Random             ; $a8 random(
>14eb	d6 1c					.word	Unary_Page               ; $a9 page
>14ed	f7 20					.word	MInt32True               ; $aa true
>14ef	fb 20					.word	MInt32False              ; $ab false
>14f1	a1 1c					.word	Unary_Min                ; $ac min(
>14f3	a5 1c					.word	Unary_Max                ; $ad max(
>14f5	8c 1d					.word	UnarySys                 ; $ae sys(
>14f7	4f 1d					.word	UnaryTimer               ; $af timer(
>14f9	6c 1b					.word	EventFunction            ; $b0 event(
>14fb	78 1d					.word	UnaryGet                 ; $b1 get(
>14fd	68 1d					.word	UnaryInkey               ; $b2 inkey(
>14ff	23 1d					.word	UnaryAlloc               ; $b3 alloc(
>1501	b4 1d					.word	ExecChr                  ; $b4 chr$(
>1503	e4 1d					.word	ExecLeft                 ; $b5 left$(
>1505	01 1e					.word	ExecMid                  ; $b6 mid$(
>1507	29 1e					.word	ExecRight                ; $b7 right$(
>1509	d8 18					.word	Event_Str                ; $b8 str$(
>150b	07 19					.word	UnaryVal                 ; $b9 val(
>150d	4a 1c					.word	UnaryPeek                ; $ba peek(
>150f	50 1c					.word	UnaryDeek                ; $bb deek(
>1511	56 1c					.word	UnaryLeek                ; $bc leek(
>1513	0d 1c					.word	UnaryAsc                 ; $bd asc(
>1515	01 1d					.word	UnaryIntToFloat          ; $be int(
>1517	14 1d					.word	UnaryFloatToInt          ; $bf float(
>1519	0a 19					.word	UnaryIsVal               ; $c0 isval(
>151b	cb 1d					.word	ExecUpper                ; $c1 upper$(
>151d	c8 1d					.word	ExecLower                ; $c2 lower$(
>151f	e4 1c					.word	UnaryReference           ; $c3 @
>1521	fa 1c					.word	UnaryComplement          ; $c4 ~
>1523	f7 1c					.word	UnaryHexMarker           ; $c5 &
>1525	94 14					.word	TKErr01                  ; $c6 )
>1527	81 14					.word	CommandColon             ; $c7 :
>1529	94 14					.word	TKErr02                  ; $c8 ,
>152b	94 14					.word	TKErr03                  ; $c9 ;
>152d	1b 14					.word	Command_Rem2             ; $ca '
>152f	94 14					.word	TKErr07                  ; $cb to
>1531	94 14					.word	TKErr05                  ; $cc step
>1533	2d 13					.word	CallProc                 ; $cd proc
>1535	45 11					.word	CommandLocal             ; $ce local
>1537	7d 10					.word	Command_Dim              ; $cf dim
>1539	1b 14					.word	Command_Rem              ; $d0 rem
>153b	c7 10					.word	CommandLet               ; $d1 let
>153d	8f 14					.word	Unimplemented            ; $d2 input
>153f	c0 10					.word	Command_ELSE             ; $d3 else
>1541	ba 16					.word	Command_VDU              ; $d4 vdu
>1543	92 12					.word	Command_Print            ; $d5 print
>1545	88 16					.word	CommandGOTO              ; $d6 goto
>1547	5d 16					.word	CommandGOSUB             ; $d7 gosub
>1549	70 16					.word	CommandRETURN            ; $d8 return
>154b	e0 13					.word	CommandData              ; $d9 data
>154d	1f 10					.word	Command_Assert           ; $da assert
>154f	55 12					.word	Command_Poke             ; $db poke
>1551	59 12					.word	Command_Doke             ; $dc doke
>1553	5d 12					.word	Command_Loke             ; $dd loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1555					Group1Vectors:
>1555	2d 10					.word	CommandClear             ; $86 clear
>1557	8f 14					.word	Unimplemented            ; $87 load
>1559	8f 14					.word	Unimplemented            ; $88 save
>155b	8f 14					.word	Unimplemented            ; $89 list
>155d	47 12					.word	Command_New              ; $8a new
>155f	28 14					.word	Command_Run              ; $8b run
>1561	b5 13					.word	CommandRead              ; $8c read
>1563	e9 13					.word	CommandRestore           ; $8d restore
>1565	46 16					.word	CommandEnd               ; $8e end
>1567	41 16					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af6					procList:
>0af6							.fill 	2		 					; terminated by name high.
.0af8					yInLine:
>0af8							.fill 	1
.1569					FindProcedure:
.1569	8c f8 0a	sty $0af8			sty 	yInLine
.156c	20 27 16	jsr $1627			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.156f	85 06		sta $06				sta 	temp1
.1571	ad f6 0a	lda $0af6			lda		procList 					; put procList address in temp2
.1574	85 08		sta $08				sta 	temp2
.1576	ad f7 0a	lda $0af7			lda 	procList+1
.1579	85 09		sta $09				sta 	temp2+1
.157b	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.157d					_FPLoop:
.157d	b1 08		lda ($08),y			lda 	(temp2),y
.157f	f0 4f		beq $15d0			beq 	_FPError 					; if so, we don't know this procedure.
.1581	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1583	c8		iny				iny
.1584	b1 08		lda ($08),y			lda 	(temp2),y
.1586	85 04		sta $04				sta 	temp0
.1588	c8		iny				iny
.1589	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.158b	c5 06		cmp $06				cmp 	temp1
.158d	d0 2b		bne $15ba			bne 	_FPNext 					; hash is different, go to next.
.158f	38		sec				sec
.1590	ad f8 0a	lda $0af8			lda 	yInLine 					; position in line must be at least 4
.1593	e9 04		sbc #$04			sbc 	#4
.1595	18		clc				clc
.1596	65 02		adc $02				adc 	codePtr
.1598	85 0a		sta $0a				sta 	temp3
.159a	a5 03		lda $03				lda 	codePtr+1
.159c	69 00		adc #$00			adc 	#0
.159e	85 0b		sta $0b				sta 	temp3+1
.15a0	98		tya				tya
.15a1	48		pha				pha
.15a2	a0 04		ldy #$04			ldy 	#4
.15a4					_FPCName:
.15a4	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.15a6	d1 04		cmp ($04),y			cmp 	(temp0),y
.15a8	d0 0e		bne $15b8			bne 	_FPpulYNext 				; if different go to next one.
.15aa	c8		iny				iny
.15ab	c9 3a		cmp #$3a			cmp 	#$3A
.15ad	90 f5		bcc $15a4			bcc 	_FPCName 					; compare the whole lot....
.15af	68		pla				pla 								; throw away the saved Y
.15b0	98		tya				tya 								; length of name is Y-4
.15b1	38		sec				sec
.15b2	e9 04		sbc #$04			sbc 	#4
.15b4	ac f8 0a	ldy $0af8			ldy 	yInLine  					; get the original Y back
.15b7	60		rts				rts
.15b8					_FPpulYNext:
.15b8	68		pla				pla
.15b9	a8		tay				tay
.15ba					_FPNext:
.15ba	c8		iny				iny 								; next procedure record.
.15bb	10 c0		bpl $157d			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.15bd	98		tya				tya 								; subtract 128 from Y
.15be	38		sec				sec
.15bf	e9 80		sbc #$80			sbc 	#128
.15c1	a8		tay				tay
.15c2	18		clc				clc 								; add 128 to temp2, so we can have more than
.15c3	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.15c5	69 80		adc #$80			adc 	#128
.15c7	85 08		sta $08				sta 	temp2
.15c9	90 b2		bcc $157d			bcc 	_FPLoop
.15cb	e6 09		inc $09				inc 	temp2+1
.15cd	4c 7d 15	jmp $157d			jmp 	_FPLoop
.15d0					_FPError:
.15d0	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.15d2	20 37 22	jsr $2237		jsr	errorHandler
.15d5					ScanProc:
.15d5	98		tya				tya
.15d6	48		pha				pha
.15d7	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.15d9	8d f6 0a	sta $0af6			sta 	procList
.15dc	a5 10		lda $10				lda 	lowMemory+1
.15de	8d f7 0a	sta $0af7			sta 	procList+1
.15e1	20 82 14	jsr $1482			jsr 	ResetCodeAddress 			; back to the start.
.15e4					_ScanLoop:
.15e4	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.15e6	b1 02		lda ($02),y			lda 	(codePtr),y
.15e8	f0 2a		beq $1614			beq 	_ScanExit
.15ea	a0 03		ldy #$03			ldy 	#3							; get first token
.15ec	b1 02		lda ($02),y			lda 	(codePtr),y
.15ee	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.15f0	d0 12		bne $1604			bne 	_ScanNext
.15f2	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.15f4	20 1c 16	jsr $161c			jsr 	_ScanWrite
.15f7	a5 02		lda $02				lda 	codePtr
.15f9	20 1c 16	jsr $161c			jsr 	_ScanWrite
.15fc	a0 04		ldy #$04			ldy 	#4 							; start of name part
.15fe	20 27 16	jsr $1627			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1601	20 1c 16	jsr $161c			jsr 	_ScanWrite
.1604					_ScanNext:
.1604	18		clc				clc
.1605	a0 00		ldy #$00			ldy 	#0
.1607	b1 02		lda ($02),y			lda 	(codePtr),y
.1609	65 02		adc $02				adc 	codePtr
.160b	85 02		sta $02				sta 	codePtr
.160d	90 d5		bcc $15e4			bcc 	_ScanLoop
.160f	e6 03		inc $03				inc 	codePtr+1
.1611	4c e4 15	jmp $15e4			jmp 	_ScanLoop
.1614					_ScanExit:
.1614	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1616	20 1c 16	jsr $161c			jsr 	_ScanWrite
.1619	68		pla				pla
.161a	a8		tay				tay
.161b	60		rts				rts
.161c					_ScanWrite:
.161c	a0 00		ldy #$00			ldy 	#0
.161e	91 0f		sta ($0f),y			sta 	(lowMemory),y
.1620	e6 0f		inc $0f				inc 	lowMemory
.1622	d0 02		bne $1626			bne 	_SWNoCarry
.1624	e6 10		inc $10				inc 	lowMemory+1
.1626					_SWNoCarry:
.1626	60		rts				rts
.1627					CalculateProcedureHash:
.1627	a9 00		lda #$00			lda 	#0 							; clear hash.
.1629	85 04		sta $04				sta 	temp0
.162b					_CPHLoop:
.162b	18		clc				clc 								; add character and rotate and add carry back in
.162c	b1 02		lda ($02),y			lda 	(codePtr),y
.162e	65 04		adc $04				adc 	temp0
.1630	6a		ror a				ror 	a
.1631	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1633	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.1635	b1 02		lda ($02),y			lda 	(codePtr),y
.1637	c8		iny				iny 								; advance incase we go round again.
.1638	c9 3a		cmp #$3a			cmp 	#$3A
.163a	90 ef		bcc $162b			bcc 	_CPHLoop
.163c	a5 04		lda $04				lda 	temp0
.163e	a9 aa		lda #$aa			lda 	#$AA
.1640	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1641					CommandStop:
.1641	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1643	20 37 22	jsr $2237		jsr	errorHandler
.1646					CommandEnd:
.1646	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1649					AdvanceNextLine:
.1649	a0 00		ldy #$00			ldy 	#0 							; get offset
.164b	b1 02		lda ($02),y			lda 	(codePtr),y
.164d	18		clc				clc 								; add to codePtr
.164e	65 02		adc $02				adc 	codePtr
.1650	85 02		sta $02				sta 	codePtr
.1652	90 02		bcc $1656			bcc 	_ANLNoCarry
.1654	e6 03		inc $03				inc 	codePtr+1
.1656					_ANLNoCarry:
.1656	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1658	f0 ec		beq $1646			beq 	CommandEnd 					; execute END
.165a	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.165c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.165d					CommandGOSUB:
.165d	20 de 1a	jsr $1ade			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1660	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1662	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1664	20 96 21	jsr $2196			jsr 	RSClaim
.1667	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1669	20 c2 21	jsr $21c2			jsr 	RSSavePosition
.166c	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.166e	f0 1b		beq $168b			beq 	GotoTOS 					; and do a GOTO there.
.1670					CommandRETURN:
.1670	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1672	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1674	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1676	f0 05		beq $167d			beq 	_isok
.1678	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.167a	20 37 22	jsr $2237		jsr	errorHandler
.167d					_isok:
.167d	a9 01		lda #$01			lda 	#1
.167f	20 d5 21	jsr $21d5			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1682	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1684	20 b8 21	jsr $21b8			jsr 	RSFree
.1687	60		rts				rts
.1688					CommandGOTO:
.1688	20 de 1a	jsr $1ade			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.168b					GotoTOS:
.168b	20 82 14	jsr $1482			jsr 	ResetCodeAddress 			; simple search.
.168e					_GotoSearch:
.168e	a0 00		ldy #$00			ldy 	#0 							; get offset
.1690	b1 02		lda ($02),y			lda 	(codePtr),y
.1692	f0 21		beq $16b5			beq 	_GotoError 					; not found.
.1694	c8		iny				iny									; check LSB match
.1695	b1 02		lda ($02),y			lda 	(codePtr),y
.1697	d5 48		cmp $48,x			cmp 	esInt0,x
.1699	d0 07		bne $16a2			bne 	_GotoNext
.169b	c8		iny				iny
.169c	b1 02		lda ($02),y			lda 	(codePtr),y
.169e	d5 50		cmp $50,x			cmp 	esInt1,x
.16a0	f0 10		beq $16b2			beq 	_GotoFound
.16a2					_GotoNext:
.16a2	a0 00		ldy #$00			ldy 	#0 							; go next line
.16a4	b1 02		lda ($02),y			lda 	(codePtr),y
.16a6	18		clc				clc
.16a7	65 02		adc $02				adc 	codePtr
.16a9	85 02		sta $02				sta 	codePtr
.16ab	90 e1		bcc $168e			bcc 	_GotoSearch
.16ad	e6 03		inc $03				inc 	codePtr+1
.16af	4c 8e 16	jmp $168e			jmp 	_GotoSearch
.16b2					_GotoFound:
.16b2	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.16b4	60		rts				rts
.16b5					_GotoError:
.16b5	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.16b7	20 37 22	jsr $2237		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.16ba					Command_VDU:
.16ba	20 de 1a	jsr $1ade			jsr 	EvaluateRootInteger 			; get integer at root.
.16bd	a5 48		lda $48				lda 	esInt0
.16bf	a2 06		ldx #$06		ldx	#6
.16c1	20 28 22	jsr $2228		jsr	deviceHandler
.16c4					_CVNext:
.16c4	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.16c6	c8		iny				iny
.16c7	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.16c9	f0 ef		beq $16ba			beq 	Command_VDU
.16cb	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.16cd	d0 0a		bne $16d9			bne 	_CVExit
.16cf	a5 50		lda $50				lda 	esInt1
.16d1	a2 06		ldx #$06		ldx	#6
.16d3	20 28 22	jsr $2228		jsr	deviceHandler
.16d6	4c c4 16	jmp $16c4			jmp 	_CVNext
.16d9	88		dey		_CVExit:dey
.16da	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2bd2					Command_While:
.2bd2	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2bd4	a2 04		ldx #$04			ldx 	#4
.2bd6	20 96 21	jsr $2196			jsr 	RSClaim 					; create on stack.
.2bd9	88		dey				dey
.2bda	a9 01		lda #$01			lda 	#1
.2bdc	20 c2 21	jsr $21c2			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2bdf	c8		iny				iny
.2be0	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger				; get the conditional
.2be3	20 22 21	jsr $2122			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2be6	f0 01		beq $2be9			beq 	_CWFail
.2be8	60		rts				rts
.2be9					_CWFail:
.2be9	a9 04		lda #$04			lda 	#4
.2beb	20 b8 21	jsr $21b8			jsr 	RSFree 						; close the just opened position.
.2bee	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2bf0	aa		tax				tax
.2bf1	20 0d 2c	jsr $2c0d			jsr 	ScanForward
.2bf4	60		rts				rts
.2bf5					Command_Wend:
.2bf5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2bf7	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2bf9	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2bfb	f0 05		beq $2c02			beq 	_isok
.2bfd	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2bff	20 37 22	jsr $2237		jsr	errorHandler
.2c02					_isok:
.2c02	a9 01		lda #$01			lda 	#1
.2c04	20 d5 21	jsr $21d5			jsr 	RSLoadPosition				; go back until true
.2c07	a9 04		lda #$04			lda 	#4
.2c09	20 b8 21	jsr $21b8			jsr 	RSFree 						; close the loop
.2c0c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.16db					BinaryProcess:
.16db	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.16dd	15 41		ora $41,x			ora 	esType+1,x
.16df	0a		asl a				asl 	a
.16e0	30 0e		bmi $16f0			bmi 	_BPStringType 				; if one is set, then string type.
.16e2	18		clc				clc 								; return CC for integer
.16e3	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.16e5	f0 08		beq $16ef			beq 	_BPExit 					; if both integer then return with CC.
.16e7	20 f5 16	jsr $16f5			jsr 	BPMakeBothFloat 			; make both float
.16ea	a9 01		lda #$01			lda 	#$01 						; set result type to float
.16ec	95 40		sta $40,x			sta 	esType,x
.16ee	38		sec				sec 								; and return with carry set.
.16ef					_BPExit:
.16ef	60		rts				rts
.16f0					_BPStringType:
.16f0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.16f2	20 37 22	jsr $2237		jsr	errorHandler
.16f5					BPMakeBothFloat:
.16f5	e8		inx				inx
.16f6	20 fa 16	jsr $16fa			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.16f9	ca		dex				dex
.16fa					BPMakeFloat:
.16fa	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.16fc	4a		lsr a				lsr 	a
.16fd	b0 07		bcs $1706			bcs 	_BPIsFloat
.16ff	8a		txa				txa
.1700	a2 1a		ldx #$1a		ldx	#26
.1702	20 28 25	jsr $2528		jsr	floatingpointHandler
.1705	aa		tax				tax
.1706					_BPIsFloat:
.1706	60		rts				rts
.1707					AddHandler:
.1707	20 56 19	jsr $1956			jsr 	DereferenceTwo 				; dereference top two on stack.
.170a	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.170c	35 41		and $41,x			and 	esType+1,x
.170e	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1710	d0 10		bne $1722			bne 	_AHStringConcat				; concatenate strings.
.1712	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.1715	b0 03		bcs $171a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1717	4c e4 1f	jmp $1fe4			jmp 	MInt32Add 							; else do it as integer.
.171a					_IsFPOperation:
.171a	8a		txa				txa 								; call the relevant fp routine
.171b	a2 02		ldx #$02		ldx	#2
.171d	20 28 25	jsr $2528		jsr	floatingpointHandler
.1720	aa		tax				tax
.1721	60		rts				rts
.1722					_AHStringConcat:
.1722	8a		txa				txa
.1723	a2 04		ldx #$04		ldx	#4
.1725	20 c4 27	jsr $27c4		jsr	stringHandler
.1728	aa		tax				tax
.1729	60		rts				rts
.172a					SubHandler:
.172a	20 56 19	jsr $1956			jsr 	DereferenceTwo
.172d	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.1730	b0 03		bcs $1735			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1732	4c fe 1f	jmp $1ffe			jmp 	MInt32Sub 							; else do it as integer.
.1735					_IsFPOperation:
.1735	8a		txa				txa 								; call the relevant fp routine
.1736	a2 10		ldx #$10		ldx	#16
.1738	20 28 25	jsr $2528		jsr	floatingpointHandler
.173b	aa		tax				tax
.173c	60		rts				rts
.173d					MulHandler:
.173d	20 56 19	jsr $1956			jsr 	DereferenceTwo
.1740	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.1743	b0 03		bcs $1748			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1745	4c 18 20	jmp $2018			jmp 	MInt32Multiply 							; else do it as integer.
.1748					_IsFPOperation:
.1748	8a		txa				txa 								; call the relevant fp routine
.1749	a2 0a		ldx #$0a		ldx	#10
.174b	20 28 25	jsr $2528		jsr	floatingpointHandler
.174e	aa		tax				tax
.174f	60		rts				rts
.1750					DivHandler:
.1750	20 56 19	jsr $1956			jsr 	DereferenceTwo
.1753	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.1756	b0 03		bcs $175b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1758	4c dc 1e	jmp $1edc			jmp 	MInt32SDivide 							; else do it as integer.
.175b					_IsFPOperation:
.175b	8a		txa				txa 								; call the relevant fp routine
.175c	a2 06		ldx #$06		ldx	#6
.175e	20 28 25	jsr $2528		jsr	floatingpointHandler
.1761	aa		tax				tax
.1762	60		rts				rts
.1763					ModHandler:
.1763	20 56 19	jsr $1956			jsr 	DereferenceTwo
.1766	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.1769	b0 03		bcs $176e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.176b	4c 5a 1f	jmp $1f5a			jmp 	MInt32Modulus 							; else do it as integer.
.176e					_IsFPOperation:
.176e	8a		txa				txa 								; call the relevant fp routine
.176f	a2 08		ldx #$08		ldx	#8
.1771	20 28 25	jsr $2528		jsr	floatingpointHandler
.1774	aa		tax				tax
.1775	60		rts				rts
.1776					XorHandler:
.1776	20 56 19	jsr $1956			jsr 	DereferenceTwo
.1779	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.177c	b0 03		bcs $1781			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.177e	4c 8e 1e	jmp $1e8e			jmp 	MInt32Xor 							; else do it as integer.
.1781					_IsFPOperation:
.1781	8a		txa				txa 								; call the relevant fp routine
.1782	a2 08		ldx #$08		ldx	#8
.1784	20 28 25	jsr $2528		jsr	floatingpointHandler
.1787	aa		tax				tax
.1788	60		rts				rts
.1789					OrHandler:
.1789	20 56 19	jsr $1956			jsr 	DereferenceTwo
.178c	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.178f	b0 03		bcs $1794			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1791	4c 75 1e	jmp $1e75			jmp 	MInt32Or 							; else do it as integer.
.1794					_IsFPOperation:
.1794	8a		txa				txa 								; call the relevant fp routine
.1795	a2 08		ldx #$08		ldx	#8
.1797	20 28 25	jsr $2528		jsr	floatingpointHandler
.179a	aa		tax				tax
.179b	60		rts				rts
.179c					AndHandler:
.179c	20 56 19	jsr $1956			jsr 	DereferenceTwo
.179f	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.17a2	b0 03		bcs $17a7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17a4	4c 5c 1e	jmp $1e5c			jmp 	MInt32And 							; else do it as integer.
.17a7					_IsFPOperation:
.17a7	8a		txa				txa 								; call the relevant fp routine
.17a8	a2 08		ldx #$08		ldx	#8
.17aa	20 28 25	jsr $2528		jsr	floatingpointHandler
.17ad	aa		tax				tax
.17ae	60		rts				rts
.17af					ShlHandler:
.17af	20 56 19	jsr $1956			jsr 	DereferenceTwo
.17b2	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.17b5	b0 03		bcs $17ba			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17b7	4c 30 18	jmp $1830			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.17ba					_IsFPOperation:
.17ba	8a		txa				txa 								; call the relevant fp routine
.17bb	a2 08		ldx #$08		ldx	#8
.17bd	20 28 25	jsr $2528		jsr	floatingpointHandler
.17c0	aa		tax				tax
.17c1	60		rts				rts
.17c2					ShrHandler:
.17c2	20 56 19	jsr $1956			jsr 	DereferenceTwo
.17c5	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.17c8	b0 03		bcs $17cd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17ca	4c 33 18	jmp $1833			jmp 	MInt32ShiftRightX 							; else do it as integer.
.17cd					_IsFPOperation:
.17cd	8a		txa				txa 								; call the relevant fp routine
.17ce	a2 08		ldx #$08		ldx	#8
.17d0	20 28 25	jsr $2528		jsr	floatingpointHandler
.17d3	aa		tax				tax
.17d4	60		rts				rts
.17d5					WordRefHandler:
.17d5	20 56 19	jsr $1956			jsr 	DereferenceTwo
.17d8	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.17db	b0 03		bcs $17e0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17dd	4c 22 18	jmp $1822			jmp 	MInt32WordIndirect 							; else do it as integer.
.17e0					_IsFPOperation:
.17e0	8a		txa				txa 								; call the relevant fp routine
.17e1	a2 08		ldx #$08		ldx	#8
.17e3	20 28 25	jsr $2528		jsr	floatingpointHandler
.17e6	aa		tax				tax
.17e7	60		rts				rts
.17e8					ByteRefHandler:
.17e8	20 56 19	jsr $1956			jsr 	DereferenceTwo
.17eb	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.17ee	b0 03		bcs $17f3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17f0	4c 26 18	jmp $1826			jmp 	MInt32ByteIndirect 							; else do it as integer.
.17f3					_IsFPOperation:
.17f3	8a		txa				txa 								; call the relevant fp routine
.17f4	a2 08		ldx #$08		ldx	#8
.17f6	20 28 25	jsr $2528		jsr	floatingpointHandler
.17f9	aa		tax				tax
.17fa	60		rts				rts
.17fb					PowerHandler:
.17fb	20 56 19	jsr $1956			jsr 	DereferenceTwo
.17fe	20 db 16	jsr $16db			jsr 	BinaryProcess 				; check to see if either is float
.1801	b0 03		bcs $1806			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1803	4c 0e 18	jmp $180e			jmp 	PowerInteger 							; else do it as integer.
.1806					_IsFPOperation:
.1806	8a		txa				txa 								; call the relevant fp routine
.1807	a2 16		ldx #$16		ldx	#22
.1809	20 28 25	jsr $2528		jsr	floatingpointHandler
.180c	aa		tax				tax
.180d	60		rts				rts
.180e					PowerInteger:
.180e	20 f5 16	jsr $16f5			jsr 	BPMakeBothFloat				; make them float.
.1811	8a		txa				txa
.1812	a2 16		ldx #$16		ldx	#22
.1814	20 28 25	jsr $2528		jsr	floatingpointHandler
.1817	a2 12		ldx #$12		ldx	#18
.1819	20 28 25	jsr $2528		jsr	floatingpointHandler
.181c	aa		tax				tax
.181d	a9 00		lda #$00			lda 	#0 							; make type integer
.181f	95 40		sta $40,x			sta 	esType,x
.1821	60		rts				rts
.1822					Mint32WordIndirect:
.1822	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1824	d0 02		bne $1828			bne 	Min32Indirect
.1826					Mint32ByteIndirect:
.1826	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1828					Min32Indirect:
.1828	48		pha				pha 								; save the indirection
.1829	20 e4 1f	jsr $1fe4			jsr 	MInt32Add 					; add a!b a?b
.182c	68		pla				pla 								; and set the type to reference.
.182d	95 40		sta $40,x			sta 	esType,x
.182f	60		rts				rts
.1830					Mint32ShiftLeftX:
.1830	18		clc				clc
.1831	90 01		bcc $1834			bcc 	Mint32Shift
.1833					Mint32ShiftRightX:
.1833	38		sec				sec
.1834					Mint32Shift:
.1834	08		php				php 								; save carry flag on stack.
.1835	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1837	15 59		ora $59,x			ora 	esInt2+1,x
.1839	15 61		ora $61,x			ora 	esInt3+1,x
.183b	d0 1e		bne $185b			bne 	_MShiftZero
.183d	b5 49		lda $49,x			lda 	esInt0+1,x
.183f	c9 20		cmp #$20			cmp 	#32
.1841	b0 18		bcs $185b			bcs 	_MShiftZero
.1843					_MShiftLoop:
.1843	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1845	f0 12		beq $1859			beq 	_MShiftExit
.1847	d6 49		dec $49,x			dec 	esInt0+1,x
.1849	28		plp				plp 								; restore and save carry
.184a	08		php				php
.184b	90 06		bcc $1853			bcc 	_MShiftLeft
.184d	20 19 21	jsr $2119			jsr 	Mint32ShiftRight
.1850	4c 43 18	jmp $1843			jmp 	_MShiftLoop
.1853					_MShiftLeft:
.1853	20 10 21	jsr $2110			jsr 	Mint32ShiftLeft
.1856	4c 43 18	jmp $1843			jmp 	_MShiftLoop
.1859					_MShiftExit:
.1859	28		plp				plp	 								; throw saved carry and exit
.185a	60		rts				rts
.185b					_MShiftZero:
.185b	4c fb 20	jmp $20fb			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.185e					PerformComparison:
.185e	20 56 19	jsr $1956			jsr 	DereferenceTwo 				; make both values.
.1861	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1863	35 41		and $41,x			and 	esType+1,x
.1865	0a		asl a				asl 	a
.1866	30 1d		bmi $1885			bmi 	_PCIsString
.1868	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.186a	15 41		ora $41,x			ora 	esType+1,x
.186c	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.186d	30 22		bmi $1891			bmi 	_PCError
.186f	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1871	f0 0f		beq $1882			beq 	_PCIsInteger 				; if not two integers
.1873	20 f5 16	jsr $16f5			jsr 	BPMakeBothFloat 			; make both float
.1876	8a		txa				txa
.1877	a2 04		ldx #$04		ldx	#4
.1879	20 28 25	jsr $2528		jsr	floatingpointHandler
.187c	86 0c		stx $0c				stx 	tempShort 					; save result
.187e	aa		tax				tax
.187f	a5 0c		lda $0c				lda 	tempShort
.1881	60		rts				rts
.1882					_PCIsInteger:
.1882	4c a7 1e	jmp $1ea7			jmp 	MInt32Compare
.1885					_PCIsString:
.1885	8a		txa				txa 								; A has SP
.1886	a2 06		ldx #$06		ldx	#6
.1888	20 c4 27	jsr $27c4		jsr	stringHandler
.188b	86 0c		stx $0c				stx 	tempShort 					; save result
.188d	aa		tax				tax 								; put SP back in X and get result.
.188e	a5 0c		lda $0c				lda 	tempShort
.1890	60		rts				rts
.1891					_PCError:
.1891	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1893	20 37 22	jsr $2237		jsr	errorHandler
.1896					CompareEquals:
.1896	20 5e 18	jsr $185e			jsr 	PerformComparison
.1899	c9 00		cmp #$00			cmp 	#$00
.189b	f0 35		beq $18d2			beq  	CompareTrue
.189d	4c d5 18	jmp $18d5			jmp 	CompareFalse
.18a0					CompareLess:
.18a0	20 5e 18	jsr $185e			jsr 	PerformComparison
.18a3	c9 ff		cmp #$ff			cmp 	#$FF
.18a5	f0 2b		beq $18d2			beq  	CompareTrue
.18a7	4c d5 18	jmp $18d5			jmp 	CompareFalse
.18aa					CompareGreater:
.18aa	20 5e 18	jsr $185e			jsr 	PerformComparison
.18ad	c9 01		cmp #$01			cmp 	#$01
.18af	f0 21		beq $18d2			beq  	CompareTrue
.18b1	4c d5 18	jmp $18d5			jmp 	CompareFalse
.18b4					CompareNotEquals:
.18b4	20 5e 18	jsr $185e			jsr 	PerformComparison
.18b7	c9 00		cmp #$00			cmp 	#$00
.18b9	d0 17		bne $18d2			bne  	CompareTrue
.18bb	4c d5 18	jmp $18d5			jmp 	CompareFalse
.18be					CompareGreaterEq:
.18be	20 5e 18	jsr $185e			jsr 	PerformComparison
.18c1	c9 ff		cmp #$ff			cmp 	#$FF
.18c3	d0 0d		bne $18d2			bne  	CompareTrue
.18c5	4c d5 18	jmp $18d5			jmp 	CompareFalse
.18c8					CompareLessEq:
.18c8	20 5e 18	jsr $185e			jsr 	PerformComparison
.18cb	c9 01		cmp #$01			cmp 	#$01
.18cd	d0 03		bne $18d2			bne  	CompareTrue
.18cf	4c d5 18	jmp $18d5			jmp 	CompareFalse
.18d2					CompareTrue:
.18d2	4c f7 20	jmp $20f7			jmp 	MInt32True
.18d5					CompareFalse:
.18d5	4c fb 20	jmp $20fb			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.18d8					Event_Str:
.18d8	20 ca 1a	jsr $1aca			jsr 	EvaluateNumeric 			; get a number.
.18db	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.18dd	d0 13		bne $18f2			bne 	_ESFloat
.18df	20 35 19	jsr $1935			jsr 	ConvertGetBase
.18e2	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.18e4	85 04		sta $04				sta 	temp0
.18e6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.18e8	85 05		sta $05				sta 	1+(temp0)
.18ea	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.18ec	20 51 20	jsr $2051			jsr 	MInt32ToString 				; convert to string.
.18ef	4c ff 18	jmp $18ff			jmp 	_ESCloneExit 				; clone and exit.
.18f2					_ESFloat:
.18f2	20 6e 21	jsr $216e			jsr 	CheckRightParen 			; check closing )
.18f5	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.18f8	8a		txa				txa
.18f9	a2 14		ldx #$14		ldx	#20
.18fb	20 28 25	jsr $2528		jsr	floatingpointHandler
.18fe	aa		tax				tax
.18ff					_ESCloneExit:
.18ff	8a		txa				txa
.1900	a2 02		ldx #$02		ldx	#2
.1902	20 c4 27	jsr $27c4		jsr	stringHandler
.1905	aa		tax				tax
.1906	60		rts				rts
.1907					UnaryVal:
.1907	38		sec				sec
.1908	b0 01		bcs $190b			bcs 	ValueMain
.190a					UnaryIsVal:
.190a	18		clc				clc
.190b					ValueMain:
.190b	08		php				php 								; save results (CS is value, CC is validation)
.190c	20 d5 1a	jsr $1ad5			jsr 	EvaluateString
.190f	20 35 19	jsr $1935			jsr 	ConvertGetBase 				; get base, if any.
.1912	98		tya				tya
.1913	48		pha				pha
.1914	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1917	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1919	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.191b	20 6e 1f	jsr $1f6e			jsr 	MInt32FromString 			; convert it back from a string.
.191e	b0 0c		bcs $192c			bcs 	_VMSuccess 					; successfully converted.
.1920	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1922	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1924	f0 00		beq $1926			beq 	_VMFailed 	 				; so we failed.
.1926					_VMFailed:
.1926	68		pla				pla
.1927	a8		tay				tay
.1928	28		plp				plp
.1929	4c fb 20	jmp $20fb			jmp 	MInt32False 				; return 0 whatever.
.192c					_VMSuccess:
.192c	68		pla				pla
.192d	a8		tay				tay
.192e	28		plp				plp 								; if CS the it was val() so we want the value.
.192f	b0 03		bcs $1934			bcs 	_VMExit
.1931	4c f7 20	jmp $20f7			jmp 	MInt32True 					; otherwise return true as successful.
.1934					_VMExit:
.1934	60		rts				rts
.1935					ConvertGetBase:
.1935	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1937	95 49		sta $49,x			sta 	esInt0+1,x
.1939	b1 02		lda ($02),y			lda 	(codePtr),y
.193b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.193d	d0 0e		bne $194d			bne 	_CGBDone
.193f	e8		inx				inx 								; next level
.1940	c8		iny				iny 								; skip comma.
.1941	20 e8 1a	jsr $1ae8			jsr 	EvaluateSmallInteger		; evaluate the base.
.1944	ca		dex				dex
.1945	c9 02		cmp #$02			cmp 	#2
.1947	90 08		bcc $1951			bcc 	_CGBValue
.1949	c9 11		cmp #$11			cmp 	#17
.194b	b0 04		bcs $1951			bcs 	_CGBValue
.194d					_CGBDone:
.194d	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1950	60		rts				rts
.1951					_CGBValue:
.1951	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1953	20 37 22	jsr $2237		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1956					DereferenceTwo:
.1956	e8		inx				inx
.1957	20 5b 19	jsr $195b			jsr 	DereferenceOne
.195a	ca		dex				dex
.195b					DereferenceOne:
.195b	b5 40		lda $40,x			lda 	esType,x
.195d	10 3d		bpl $199c			bpl 	_DRNotReference 			; is it a reference ?
.195f	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1960	b0 3b		bcs $199d			bcs 	_DRFloatDeReference
.1962	98		tya				tya
.1963	48		pha				pha
.1964	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1966	85 04		sta $04				sta 	temp0
.1968	b5 50		lda $50,x			lda 	esInt1,x
.196a	85 05		sta $05				sta 	temp0+1
.196c	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.196e	95 50		sta $50,x			sta 	esInt1,x
.1970	95 58		sta $58,x			sta 	esInt2,x
.1972	95 60		sta $60,x			sta 	esInt3,x
.1974	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1976	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1978	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1979	30 0d		bmi $1988			bmi 	_DeRefString 				; string, 2 bytes only
.197b	d0 11		bne $198e			bne 	_DeRefByte 					; byte 1 byte only
.197d					_DeRefLong:
.197d	a0 03		ldy #$03			ldy 	#3
.197f	b1 04		lda ($04),y			lda 	(temp0),y
.1981	95 60		sta $60,x			sta 	esInt3,x
.1983	88		dey				dey
.1984	b1 04		lda ($04),y			lda 	(temp0),y
.1986	95 58		sta $58,x			sta 	esInt2,x
.1988					_DeRefString:
.1988	a0 01		ldy #$01			ldy 	#1
.198a	b1 04		lda ($04),y			lda 	(temp0),y
.198c	95 50		sta $50,x			sta 	esInt1,x
.198e					_DeRefByte:
.198e	a0 00		ldy #$00			ldy 	#0
.1990	b1 04		lda ($04),y			lda 	(temp0),y
.1992	95 48		sta $48,x			sta 	esInt0,x
.1994	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1996	29 40		and #$40			and 	#$40
.1998	95 40		sta $40,x			sta 	esType,x
.199a	68		pla				pla
.199b	a8		tay				tay
.199c					_DRNotReference
.199c	60		rts				rts
.199d					_DRFloatDereference:
.199d	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; address to deref in temp0
.19a0	8a		txa				txa
.19a1	a2 1c		ldx #$1c		ldx	#28
.19a3	20 28 25	jsr $2528		jsr	floatingpointHandler
.19a6	aa		tax				tax
.19a7	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.19a9	95 40		sta $40,x			sta 	esType,x
.19ab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.19ac					EvaluateLevel:
.19ac	48		pha				pha 								; save precedence level.
.19ad	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.19af	95 48		sta $48,x			sta 	esInt0,x
.19b1	95 50		sta $50,x			sta 	esInt1,x
.19b3	95 58		sta $58,x			sta 	esInt2,x
.19b5	95 60		sta $60,x			sta 	esInt3,x
.19b7	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.19b9	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.19bb	30 21		bmi $19de			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.19bd	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.19be	30 0a		bmi $19ca			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.19c0	8a		txa				txa 								; stack level in X
.19c1	a2 00		ldx #$00		ldx	#0
.19c3	20 8c 2a	jsr $2a8c		jsr	variableHandler
.19c6	aa		tax				tax
.19c7	4c 07 1a	jmp $1a07			jmp		_ELHasTerm
.19ca					_ELIsConstant:
.19ca	4a		lsr a				lsr 	a 							; get the value back
.19cb	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.19cd	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.19cf					_ELCheckNext:
.19cf	c8		iny				iny 								; look at next
.19d0	b1 02		lda ($02),y			lda 	(codePtr),y
.19d2	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.19d4	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.19d6	b0 2f		bcs $1a07			bcs 	_ELHasTerm 					; done getting the constant.
.19d8	20 20 1b	jsr $1b20			jsr 	ELShiftByteIn 				; shift byte into position.
.19db	4c cf 19	jmp $19cf			jmp 	_ELCheckNext
.19de					_ELIsToken:
.19de	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.19e0	f0 0f		beq $19f1			beq 	_ELIsString
.19e2	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.19e4	d0 5f		bne $1a45			bne 	_ELCheckUnary
.19e6	8a		txa				txa 								; put X into A
.19e7	c8		iny				iny 								; skip over the float marker
.19e8	a2 18		ldx #$18		ldx	#24
.19ea	20 28 25	jsr $2528		jsr	floatingpointHandler
.19ed	aa		tax				tax 								; restore X
.19ee	4c 07 1a	jmp $1a07			jmp 	_ELHasTerm
.19f1					_ELIsString:
.19f1	98		tya				tya 								; address of string is codePtr+y+1
.19f2	38		sec				sec
.19f3	65 02		adc $02				adc 	codePtr
.19f5	95 48		sta $48,x			sta 	esInt0,x
.19f7	a5 03		lda $03				lda 	codePtr+1
.19f9	69 00		adc #$00			adc 	#0
.19fb	95 50		sta $50,x			sta 	esInt1,x
.19fd	a9 40		lda #$40			lda 	#$40 						; set type to string value
.19ff	95 40		sta $40,x			sta 	esType,x
.1a01	c8		iny				iny 								; skip over string.
.1a02	98		tya				tya
.1a03	38		sec				sec									; +1 for the length itself.
.1a04	71 02		adc ($02),y			adc 	(codePtr),y
.1a06	a8		tay				tay 								; and fall through to term loop code.
.1a07					_ELHasTerm:
.1a07	b1 02		lda ($02),y			lda 	(codePtr),y
.1a09	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1a0b	90 04		bcc $1a11			bcc 	_ELPopExit
.1a0d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1a0f	90 02		bcc $1a13			bcc 	_ELHasBinaryTerm
.1a11					_ELPopExit:
.1a11	68		pla				pla
.1a12					_ELExit:
.1a12	60		rts				rts
.1a13					_ELHasBinaryTerm:
.1a13	84 0c		sty $0c				sty 	tempShort 					; save position
.1a15	a8		tay				tay 								; use token as an index and get the precedence.
.1a16	b9 c8 1a	lda $1ac8,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1a19	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1a1b	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1a1d	68		pla				pla 								; restore current level.
.1a1e	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1a20	b0 f0		bcs $1a12			bcs 	_ELExit
.1a22	48		pha				pha 								; save current level back on the stack.
.1a23	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1a25	48		pha				pha
.1a26	c8		iny				iny
.1a27	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1a28	a5 0c		lda $0c				lda 	tempShort
.1a2a	20 ac 19	jsr $19ac			jsr 	EvaluateLevel
.1a2d	ca		dex				dex
.1a2e	68		pla				pla 								; get the operator back out.
.1a2f					_ELExecuteA:
.1a2f	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1a31	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1a32	aa		tax				tax
.1a33	bd 99 14	lda $1499,x			lda 	Group0Vectors,x
.1a36	85 04		sta $04				sta 	temp0
.1a38	bd 9a 14	lda $149a,x			lda 	Group0Vectors+1,x
.1a3b	85 05		sta $05				sta 	temp0+1
.1a3d	a6 0c		ldx $0c				ldx 	tempShort
.1a3f	20 8c 1a	jsr $1a8c			jsr 	_ELCallTemp0
.1a42	4c 07 1a	jmp $1a07			jmp 	_ELHasTerm 					; and loop back round.
.1a45					_ELCheckUnary:
.1a45	c8		iny				iny 								; skip over token.
.1a46	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1a48	f0 19		beq $1a63			beq 	_ELMinus
.1a4a	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1a4c	f0 2c		beq $1a7a			beq 	_ELIndirect
.1a4e	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1a50	f0 28		beq $1a7a			beq 	_ELIndirect
.1a52	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1a54	f0 39		beq $1a8f			beq 	_ELExtension
.1a56	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1a58	90 04		bcc $1a5e			bcc 	_ELUSyntax
.1a5a	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1a5c	90 d1		bcc $1a2f			bcc 	_ELExecuteA 				; if so do that token.
.1a5e					_ELUSyntax:
.1a5e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1a60	20 37 22	jsr $2237		jsr	errorHandler
.1a63					_ELMinus:
.1a63	20 a9 1a	jsr $1aa9			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1a66	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1a68	f0 0a		beq $1a74			beq 	_ELMinusInteger
.1a6a	8a		txa				txa
.1a6b	a2 0c		ldx #$0c		ldx	#12
.1a6d	20 28 25	jsr $2528		jsr	floatingpointHandler
.1a70	aa		tax				tax
.1a71	4c 07 1a	jmp $1a07			jmp 	_ELHasTerm
.1a74					_ELMinusInteger:
.1a74	20 b5 20	jsr $20b5			jsr 	MInt32Negate 				; do int negate
.1a77	4c 07 1a	jmp $1a07			jmp 	_ELHasTerm
.1a7a					_ELIndirect:
.1a7a	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1a7b	20 b2 1a	jsr $1ab2			jsr 	EvaluateIntegerTerm 		; integer address
.1a7e	68		pla				pla
.1a7f	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1a81	f0 02		beq $1a85			beq 	_ELHaveModifier
.1a83	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1a85					_ELHaveModifier:
.1a85	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1a87	95 40		sta $40,x			sta 	esType,x
.1a89	4c 07 1a	jmp $1a07			jmp 	_ELHasTerm
.1a8c					_ELCallTemp0:
.1a8c	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1a8f					_ELExtension:
.1a8f	8a		txa				txa 								; stack pos in A
.1a90	20 97 24	jsr $2497		jsr	extensionHandler
.1a93	aa		tax				tax 								; restore stack
.1a94	4c 07 1a	jmp $1a07			jmp 	_ELHasTerm
.1a97					UnaryParenthesis:
.1a97	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1a99	20 ac 19	jsr $19ac			jsr 	EvaluateLevel
.1a9c	20 6e 21	jsr $216e			jsr 	CheckRightParen 			; check for )
.1a9f	60		rts				rts
.1aa0					EvaluateTerm:
.1aa0	a9 0f		lda #$0f			lda 	#15
.1aa2	20 ac 19	jsr $19ac			jsr 	EvaluateLevel
.1aa5	20 5b 19	jsr $195b			jsr 	DereferenceOne
.1aa8	60		rts				rts
.1aa9					EvaluateNumericTerm:
.1aa9	20 a0 1a	jsr $1aa0			jsr 	EvaluateTerm
.1aac	b5 40		lda $40,x			lda 	esType,x
.1aae	0a		asl a				asl 	a 							; see if it's a string.
.1aaf	30 09		bmi $1aba			bmi 	ENTType
.1ab1	60		rts				rts
.1ab2					EvaluateIntegerTerm:
.1ab2	20 a0 1a	jsr $1aa0			jsr 	EvaluateTerm
.1ab5	b5 40		lda $40,x			lda 	esType,x
.1ab7	d0 01		bne $1aba			bne 	ENTType
.1ab9	60		rts				rts
.1aba					ENTType:
.1aba	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1abc	20 37 22	jsr $2237		jsr	errorHandler
.1abf					EvaluateRoot:
.1abf	a2 00		ldx #$00			ldx 	#0
.1ac1					Evaluate:
.1ac1	a9 00		lda #$00			lda 	#0
.1ac3	20 ac 19	jsr $19ac			jsr 	EvaluateLevel
.1ac6	20 5b 19	jsr $195b			jsr 	DereferenceOne
.1ac9	60		rts				rts
.1aca					EvaluateNumeric:
.1aca	20 c1 1a	jsr $1ac1			jsr 	Evaluate
.1acd	b5 40		lda $40,x			lda 	esType,x
.1acf	0a		asl a				asl 	a 							; see if it's a string.
.1ad0	30 e8		bmi $1aba			bmi 	ENTType
.1ad2	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1ad3	4a		lsr a				lsr 	a
.1ad4	60		rts				rts
.1ad5					EvaluateString:
.1ad5	20 c1 1a	jsr $1ac1			jsr 	Evaluate
.1ad8	b5 40		lda $40,x			lda 	esType,x
.1ada	0a		asl a				asl 	a 							; see if it's a string.
.1adb	10 dd		bpl $1aba			bpl 	ENTType
.1add	60		rts				rts
.1ade					EvaluateRootInteger:
.1ade	a2 00		ldx #$00			ldx 	#0
.1ae0					EvaluateInteger:
.1ae0	20 c1 1a	jsr $1ac1			jsr 	Evaluate
.1ae3	b5 40		lda $40,x			lda 	esType,x
.1ae5	d0 d3		bne $1aba			bne 	ENTType
.1ae7	60		rts				rts
.1ae8					EvaluateSmallInteger:
.1ae8	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger
.1aeb	b5 50		lda $50,x			lda 	esInt1,x
.1aed	15 58		ora $58,x			ora 	esInt2,x
.1aef	15 60		ora $60,x			ora 	esInt3,x
.1af1	d0 03		bne $1af6			bne 	_ESIValue
.1af3	b5 48		lda $48,x			lda 	esInt0,x
.1af5	60		rts				rts
.1af6					_ESIValue:
.1af6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1af8	20 37 22	jsr $2237		jsr	errorHandler
.1afb					LinkEvaluate:
.1afb	aa		tax				tax
.1afc	20 c1 1a	jsr $1ac1			jsr 	Evaluate
.1aff	8a		txa				txa
.1b00	60		rts				rts
.1b01					LinkEvaluateInteger:
.1b01	aa		tax				tax
.1b02	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger
.1b05	8a		txa				txa
.1b06	60		rts				rts
.1b07					LinkEvaluateSmallInt:
.1b07	aa		tax				tax
.1b08	20 e8 1a	jsr $1ae8			jsr 	EvaluateSmallInteger
.1b0b	8a		txa				txa
.1b0c	60		rts				rts
.1b0d					EvaluateReference:
.1b0d	ad 5f 1b	lda $1b5f			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1b10	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1b11	e9 01		sbc #$01			sbc 	#1
.1b13	20 ac 19	jsr $19ac			jsr 	EvaluateLevel
.1b16	b5 40		lda $40,x			lda 	esType,x
.1b18	10 01		bpl $1b1b			bpl 	_ERFail
.1b1a	60		rts				rts
.1b1b					_ERFail:
.1b1b	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1b1d	20 37 22	jsr $2237		jsr	errorHandler
.1b20					ELShiftByteIn:
.1b20	48		pha				pha 								; save bits to shift in.
.1b21	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1b23	48		pha				pha
.1b24	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1b26	95 60		sta $60,x			sta 	esInt3,x
.1b28	b5 50		lda $50,x			lda 	esInt1,x
.1b2a	95 58		sta $58,x			sta 	esInt2,x
.1b2c	b5 48		lda $48,x			lda 	esInt0,x
.1b2e	95 50		sta $50,x			sta 	esInt1,x
.1b30	a9 00		lda #$00			lda 	#0
.1b32	95 48		sta $48,x			sta 	esInt0,x
.1b34	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1b35	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1b37	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1b39					_ELShiftLoop:
.1b39	4a		lsr a				lsr 	a
.1b3a	76 60		ror $60,x			ror 	esInt3,x
.1b3c	76 58		ror $58,x			ror 	esInt2,x
.1b3e	76 50		ror $50,x			ror 	esInt1,x
.1b40	76 48		ror $48,x			ror 	esInt0,x
.1b42	c9 01		cmp #$01			cmp 	#1
.1b44	d0 f3		bne $1b39			bne 	_ELShiftLoop
.1b46	68		pla				pla 								; get original 6 bit value and OR in.
.1b47	29 3f		and #$3f			and 	#$3F
.1b49	15 48		ora $48,x			ora 	esInt0,x
.1b4b	95 48		sta $48,x			sta 	esInt0,x
.1b4d	60		rts				rts
.1b4e					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1b4e	01					.byte	$01			; $86 and
>1b4f	01					.byte	$01			; $87 or
>1b50	01					.byte	$01			; $88 xor
>1b51	02					.byte	$02			; $89 >=
>1b52	02					.byte	$02			; $8a <=
>1b53	02					.byte	$02			; $8b >
>1b54	02					.byte	$02			; $8c <
>1b55	02					.byte	$02			; $8d =
>1b56	02					.byte	$02			; $8e <>
>1b57	03					.byte	$03			; $8f +
>1b58	03					.byte	$03			; $90 -
>1b59	04					.byte	$04			; $91 >>
>1b5a	04					.byte	$04			; $92 <<
>1b5b	04					.byte	$04			; $93 *
>1b5c	04					.byte	$04			; $94 /
>1b5d	04					.byte	$04			; $95 mod
>1b5e	05					.byte	$05			; $96 ^
>1b5f	06					.byte	$06			; $97 !
>1b60	06					.byte	$06			; $98 ?
>1b61	82					.byte	$82			; $99 repeat
>1b62	82					.byte	$82			; $9a while
>1b63	82					.byte	$82			; $9b for
>1b64	82					.byte	$82			; $9c if
>1b65	82					.byte	$82			; $9d defproc
>1b66	80					.byte	$80			; $9e until
>1b67	80					.byte	$80			; $9f wend
>1b68	80					.byte	$80			; $a0 next
>1b69	80					.byte	$80			; $a1 then
>1b6a	80					.byte	$80			; $a2 endif
>1b6b	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1b6c					EventFunction:
.1b6c	20 0d 1b	jsr $1b0d			jsr 	EvaluateReference			; get the variable reference.
.1b6f	b5 40		lda $40,x			lda 	esType,x
.1b71	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1b73	d0 5b		bne $1bd0			bne 	_EFType
.1b75	20 7b 21	jsr $217b			jsr 	CheckComma
.1b78	e8		inx				inx
.1b79	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1b7c	20 6e 21	jsr $216e			jsr 	CheckRightParen 			; finish off with the
.1b7f	ca		dex				dex
.1b80	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1b82	29 80		and #$80			and 	#$80
.1b84	15 58		ora $58,x			ora 	esInt2,x
.1b86	15 60		ora $60,x			ora 	esInt3,x
.1b88	d0 41		bne $1bcb			bne 	_EFValue
.1b8a	98		tya				tya
.1b8b	48		pha				pha
.1b8c	8a		txa				txa
.1b8d	48		pha				pha
.1b8e	a2 0a		ldx #$0a		ldx	#10
.1b90	20 28 22	jsr $2228		jsr	deviceHandler
.1b93	84 07		sty $07				sty 	temp1+1
.1b95	85 06		sta $06				sta 	temp1
.1b97	68		pla				pla
.1b98	aa		tax				tax
.1b99	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1b9c	a0 03		ldy #$03			ldy 	#3							; if -ve
.1b9e	b1 04		lda ($04),y			lda 	(temp0),y
.1ba0	30 23		bmi $1bc5			bmi 	_EFFail 	 				; straight out with fail, means on pause.
.1ba2	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1ba4	b1 04		lda ($04),y			lda 	(temp0),y
.1ba6	c8		iny				iny
.1ba7	11 04		ora ($04),y			ora 	(temp0),y
.1ba9	f0 17		beq $1bc2			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1bab	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1bad	38		sec				sec
.1bae	b1 04		lda ($04),y			lda 	(temp0),y
.1bb0	e5 06		sbc $06				sbc 	temp1
.1bb2	c8		iny				iny
.1bb3	b1 04		lda ($04),y			lda 	(temp0),y
.1bb5	e5 07		sbc $07				sbc 	temp1+1
.1bb7	10 0c		bpl $1bc5			bpl 	_EFFail 					; if trigger >= timer then return False
.1bb9	20 d5 1b	jsr $1bd5			jsr 	SetEventTimer 				; reset the timer for next time.
.1bbc	20 f7 20	jsr $20f7			jsr	 	MInt32True 					; and treutn true as fired.
.1bbf	68		pla				pla
.1bc0	a8		tay				tay
.1bc1	60		rts				rts
.1bc2					_EFInitialise:
.1bc2	20 d5 1b	jsr $1bd5			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1bc5					_EFFail:
.1bc5	68		pla				pla
.1bc6	a8		tay				tay
.1bc7	20 fb 20	jsr $20fb			jsr 	MInt32False
.1bca	60		rts				rts
.1bcb					_EFValue:
.1bcb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1bcd	20 37 22	jsr $2237		jsr	errorHandler
.1bd0					_EFType:
.1bd0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1bd2	20 37 22	jsr $2237		jsr	errorHandler
.1bd5					SetEventTimer:
.1bd5	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1bd7	18		clc				clc
.1bd8	a5 06		lda $06				lda 	temp1
.1bda	75 49		adc $49,x			adc 	esInt0+1,x
.1bdc	91 04		sta ($04),y			sta		(temp0),y
.1bde	c8		iny				iny
.1bdf	a5 07		lda $07				lda 	temp1+1
.1be1	75 51		adc $51,x			adc 	esInt1+1,x
.1be3	91 04		sta ($04),y			sta		(temp0),y
.1be5	88		dey				dey
.1be6	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1be8	d0 04		bne $1bee			bne 	_SETExit
.1bea	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1bec	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1bee					_SETExit:
.1bee	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1bef					UnaryLen:
.1bef	20 fd 1b	jsr $1bfd			jsr 	ULStart
.1bf2					ULFinish:
.1bf2	b1 04		lda ($04),y			lda 	(temp0),y
.1bf4	a4 0c		ldy $0c				ldy 	tempShort
.1bf6	20 0a 21	jsr $210a			jsr 	MInt32Set8Bit
.1bf9	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1bfc	60		rts				rts
.1bfd	20 d5 1a	jsr $1ad5	ULStart:jsr 	EvaluateString
.1c00	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1c02	85 04		sta $04				sta 	temp0
.1c04	b5 50		lda $50,x			lda 	esInt1,x
.1c06	85 05		sta $05				sta 	temp0+1
.1c08	84 0c		sty $0c				sty 	tempShort 					; get length
.1c0a	a0 00		ldy #$00			ldy 	#0
.1c0c	60		rts				rts
.1c0d					UnaryAsc:
.1c0d	20 fd 1b	jsr $1bfd			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1c10	b1 04		lda ($04),y			lda 	(temp0),y
.1c12	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1c13	c9 00		cmp #$00			cmp 	#0
.1c15	d0 db		bne $1bf2			bne 	ULFinish
.1c17	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c19	20 37 22	jsr $2237		jsr	errorHandler
.1c1c					UnaryAbs:
.1c1c	20 ca 1a	jsr $1aca			jsr 	EvaluateNumeric
.1c1f	b0 07		bcs $1c28			bcs 	_UAFloat
.1c21	20 b0 20	jsr $20b0			jsr 	MInt32Absolute
.1c24	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1c27	60		rts				rts
.1c28					_UAFloat:
.1c28	8a		txa				txa
.1c29	a2 00		ldx #$00		ldx	#0
.1c2b	20 28 25	jsr $2528		jsr	floatingpointHandler
.1c2e	aa		tax				tax
.1c2f	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1c32	60		rts				rts
.1c33					UnarySgn:
.1c33	20 ca 1a	jsr $1aca			jsr 	EvaluateNumeric
.1c36	b0 07		bcs $1c3f			bcs 	_USFloat
.1c38	20 e8 20	jsr $20e8			jsr 	MInt32Sign
.1c3b	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1c3e	60		rts				rts
.1c3f					_USFloat:
.1c3f	8a		txa				txa
.1c40	a2 0e		ldx #$0e		ldx	#14
.1c42	20 28 25	jsr $2528		jsr	floatingpointHandler
.1c45	aa		tax				tax
.1c46	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1c49	60		rts				rts
.1c4a					UnaryPeek:
.1c4a	20 76 1c	jsr $1c76			jsr 	PDLCode
.1c4d	4c 6a 1c	jmp $1c6a			jmp 	PDLByte0
.1c50					UnaryDeek:
.1c50	20 76 1c	jsr $1c76			jsr 	PDLCode
.1c53	4c 64 1c	jmp $1c64			jmp 	PDLByte1
.1c56					UnaryLeek:
.1c56	20 76 1c	jsr $1c76			jsr 	PDLCode
.1c59	a0 03		ldy #$03			ldy 	#3
.1c5b	b1 04		lda ($04),y			lda 	(temp0),y
.1c5d	95 60		sta $60,x			sta 	esInt3,x
.1c5f	88		dey				dey
.1c60	b1 04		lda ($04),y			lda 	(temp0),y
.1c62	95 58		sta $58,x			sta 	esInt2,x
.1c64					PDLByte1:
.1c64	a0 01		ldy #$01			ldy 	#1
.1c66	b1 04		lda ($04),y			lda 	(temp0),y
.1c68	95 50		sta $50,x			sta 	esInt1,x
.1c6a					PDLByte0:
.1c6a	a0 00		ldy #$00			ldy 	#0
.1c6c	b1 04		lda ($04),y			lda 	(temp0),y
.1c6e	95 48		sta $48,x			sta 	esInt0,x
.1c70	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1c72	20 6e 21	jsr $216e			jsr 	CheckRightParen 			; check right and return
.1c75	60		rts				rts
.1c76					PDLCode:
.1c76	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger
.1c79	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1c7b	85 04		sta $04				sta 	temp0
.1c7d	b5 50		lda $50,x			lda 	esInt1,x
.1c7f	85 05		sta $05				sta 	temp0+1
.1c81	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1c83	95 50		sta $50,x			sta 	esInt1,x
.1c85	95 58		sta $58,x			sta 	esInt2,x
.1c87	95 60		sta $60,x			sta 	esInt3,x
.1c89	84 0c		sty $0c				sty 	tempShort 					; save Y
.1c8b	60		rts				rts
.1c8c					Unary_Random:
.1c8c	20 2b 21	jsr $212b			jsr 	MInt32Random 				; generate random number.
.1c8f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1c91	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1c93	f0 08		beq $1c9d			beq 	_URExit
.1c95	e8		inx				inx 								; load range 0..r-1 into +1
.1c96	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger
.1c99	ca		dex				dex
.1c9a	20 5a 1f	jsr $1f5a			jsr 	MInt32Modulus 				; calculate random % modulus
.1c9d					_URExit:
.1c9d	20 6e 21	jsr $216e			jsr 	CheckRightParen 			; check right and return
.1ca0	60		rts				rts
.1ca1					Unary_Min:
.1ca1	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1ca3	d0 02		bne $1ca7			bne 	UnaryMBody
.1ca5					Unary_Max:
.1ca5	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1ca7					UnaryMBody:
.1ca7	48		pha				pha 								; save comparator on stack.
.1ca8	20 c1 1a	jsr $1ac1			jsr 	Evaluate 					; get the first thing to check
.1cab					_UnaryMLoop:
.1cab	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1cad	c8		iny				iny
.1cae	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1cb0	f0 09		beq $1cbb			beq 	_UnaryMExit
.1cb2	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1cb4	f0 07		beq $1cbd			beq 	_UnaryMCompare
.1cb6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1cb8	20 37 22	jsr $2237		jsr	errorHandler
.1cbb					_UnaryMExit:
.1cbb	68		pla				pla 								; throw comparator and return.
.1cbc	60		rts				rts
.1cbd					_UnaryMCompare:
.1cbd	e8		inx				inx 								; get the 2nd thing to evaluate
.1cbe	20 c1 1a	jsr $1ac1			jsr 	Evaluate
.1cc1	ca		dex				dex
.1cc2	20 5e 18	jsr $185e			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1cc5	85 0c		sta $0c				sta 	tempShort 					; save result
.1cc7	68		pla				pla 								; get what we need
.1cc8	48		pha				pha
.1cc9	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1ccb	d0 de		bne $1cab			bne 	_UnaryMLoop 				; no, try another value.
.1ccd	20 fb 20	jsr $20fb			jsr 	MInt32False 				; promote 2nd to 1st.
.1cd0	20 e4 1f	jsr $1fe4			jsr 	MInt32Add
.1cd3	4c ab 1c	jmp $1cab			jmp 	_UnaryMLoop
.1cd6					Unary_Page:
.1cd6	20 fb 20	jsr $20fb			jsr 	MInt32False 				; zero
.1cd9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1cdc	95 48		sta $48,x			sta 	esInt0,x
.1cde	ad c9 0a	lda $0ac9			lda 	basePage+1
.1ce1	95 50		sta $50,x			sta 	esInt1,x
.1ce3	60		rts				rts
.1ce4					UnaryReference:
.1ce4	a9 0f		lda #$0f			lda 	#15
.1ce6	20 ac 19	jsr $19ac			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1ce9	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1ceb	10 05		bpl $1cf2			bpl 	UType
.1ced	a9 00		lda #$00			lda 	#0 							; make it an integer
.1cef	95 40		sta $40,x			sta 	esType,x
.1cf1	60		rts				rts
.1cf2					UType:
.1cf2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1cf4	20 37 22	jsr $2237		jsr	errorHandler
.1cf7					UnaryHexMarker:
.1cf7	4c b2 1a	jmp $1ab2			jmp 	EvaluateIntegerTerm
.1cfa					UnaryComplement:
.1cfa	20 b2 1a	jsr $1ab2			jsr 	EvaluateIntegerTerm
.1cfd	20 cf 20	jsr $20cf			jsr 	MInt32Not
.1d00	60		rts				rts
.1d01					UnaryIntToFloat:
.1d01	20 ca 1a	jsr $1aca			jsr 	EvaluateNumeric
.1d04	b5 40		lda $40,x			lda 	esType,x
.1d06	d0 0b		bne $1d13			bne 	_UIFExit
.1d08	8a		txa				txa
.1d09	a2 1a		ldx #$1a		ldx	#26
.1d0b	20 28 25	jsr $2528		jsr	floatingpointHandler
.1d0e	aa		tax				tax
.1d0f	a9 01		lda #$01			lda 	#1
.1d11	95 40		sta $40,x			sta 	esType,x
.1d13					_UIFExit:
.1d13	60		rts				rts
.1d14					UnaryFloatToInt:
.1d14	20 ca 1a	jsr $1aca			jsr 	EvaluateNumeric
.1d17	b5 40		lda $40,x			lda 	esType,x
.1d19	f0 07		beq $1d22			beq 	_UFIExit
.1d1b	8a		txa				txa
.1d1c	a2 12		ldx #$12		ldx	#18
.1d1e	20 28 25	jsr $2528		jsr	floatingpointHandler
.1d21	aa		tax				tax
.1d22					_UFIExit:
.1d22	60		rts				rts
.1d23					UnaryAlloc:
.1d23	e8		inx				inx 								; evaluate memory required
.1d24	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger
.1d27	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1d2a	ca		dex				dex
.1d2b	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1d2d	15 61		ora $61,x			ora 	esInt3+1,x
.1d2f	d0 19		bne $1d4a			bne 	_UABadValue
.1d31	20 fb 20	jsr $20fb			jsr 	MInt32False					; zero return.
.1d34	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1d36	95 50		sta $50,x			sta 	esInt1,x
.1d38	a5 0f		lda $0f				lda 	lowMemory
.1d3a	95 48		sta $48,x			sta 	esInt0,x
.1d3c	18		clc				clc 								; add alloc required.
.1d3d	75 49		adc $49,x			adc 	esInt0+1,x
.1d3f	85 0f		sta $0f				sta 	lowMemory
.1d41	a5 10		lda $10				lda 	lowMemory+1
.1d43	75 51		adc $51,x			adc 	esInt1+1,x
.1d45	85 10		sta $10				sta 	lowMemory+1
.1d47	b0 01		bcs $1d4a			bcs		_UABadValue 				; overflow definitely bad.
.1d49	60		rts				rts
.1d4a					_UABadValue:
.1d4a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d4c	20 37 22	jsr $2237		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1d4f					UnaryTimer:
.1d4f	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1d52	98		tya				tya
.1d53	48		pha				pha
.1d54	20 22 21	jsr $2122			jsr 	MInt32Zero 					; zero result
.1d57	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1d59	a2 0a		ldx #$0a		ldx	#10
.1d5b	20 28 22	jsr $2228		jsr	deviceHandler
.1d5e	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1d60	95 48		sta $48,x			sta 	esInt0,x
.1d62	98		tya				tya
.1d63	95 50		sta $50,x			sta 	esInt1,x
.1d65	68		pla				pla
.1d66	a8		tay				tay
.1d67	60		rts				rts
.1d68					UnaryInkey:
.1d68	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1d6b	86 04		stx $04				stx 	temp0
.1d6d	a2 04		ldx #$04		ldx	#4
.1d6f	20 28 22	jsr $2228		jsr	deviceHandler
.1d72	a6 04		ldx $04				ldx 	temp0
.1d74	20 0a 21	jsr $210a			jsr 	MInt32Set8Bit
.1d77	60		rts				rts
.1d78					UnaryGet:
.1d78	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1d7b	86 04		stx $04				stx 	temp0
.1d7d					_UGLoop:
.1d7d	a2 04		ldx #$04		ldx	#4
.1d7f	20 28 22	jsr $2228		jsr	deviceHandler
.1d82	c9 00		cmp #$00			cmp 	#0
.1d84	f0 f7		beq $1d7d			beq 	_UGLoop
.1d86	a6 04		ldx $04				ldx 	temp0
.1d88	20 0a 21	jsr $210a			jsr 	MInt32Set8Bit
.1d8b	60		rts				rts
.1d8c					UnarySys:
.1d8c	20 e0 1a	jsr $1ae0			jsr 	EvaluateInteger 				; get the address
.1d8f	20 6e 21	jsr $216e			jsr 	CheckRightParen
.1d92	20 3c 11	jsr $113c			jsr 	TOSToTemp0 						; copy to temp0
.1d95	8a		txa				txa
.1d96	48		pha				pha
.1d97	98		tya				tya
.1d98	48		pha				pha
.1d99	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1d9c	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1d9f	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1da2	20 b1 1d	jsr $1db1			jsr 	_CallTemp0
.1da5	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1da7	68		pla				pla
.1da8	a8		tay				tay
.1da9	68		pla				pla
.1daa	aa		tax				tax
.1dab	a5 0c		lda $0c				lda 	tempShort
.1dad	20 0a 21	jsr $210a			jsr 	MInt32Set8Bit 					; return result.
.1db0	60		rts				rts
.1db1					_CallTemp0:
.1db1	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1db4					ExecChr:
.1db4	20 e8 1a	jsr $1ae8			jsr 	EvaluateSmallInteger		; character number
.1db7	20 6e 21	jsr $216e			jsr 	CheckRightParen				; right bracket
.1dba	98		tya				tya
.1dbb	48		pha				pha
.1dbc	8a		txa				txa 								; A = stack
.1dbd	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1dbf	a2 00		ldx #$00		ldx	#0
.1dc1	20 c4 27	jsr $27c4		jsr	stringHandler
.1dc4	aa		tax				tax 								; X = stack
.1dc5	68		pla				pla
.1dc6	a8		tay				tay
.1dc7	60		rts				rts
.1dc8					ExecLower:
.1dc8	38		sec				sec
.1dc9	b0 01		bcs $1dcc			bcs 	ExecUpperLower
.1dcb					ExecUpper:
.1dcb	18		clc				clc
.1dcc					ExecUpperLower:
.1dcc	08		php				php 								; save carry
.1dcd	20 d5 1a	jsr $1ad5			jsr 	EvaluateString 				; string to stack,X
.1dd0	20 6e 21	jsr $216e			jsr 	CheckRightParen 			; check closing right bracket.
.1dd3	28		plp				plp 								; restore carry, save Y
.1dd4	98		tya				tya
.1dd5	48		pha				pha
.1dd6	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1dd8	2a		rol a				rol 	a
.1dd9	a8		tay				tay 								; now in Y
.1dda	8a		txa				txa 								; do the substring and exit.
.1ddb	a2 08		ldx #$08		ldx	#8
.1ddd	20 c4 27	jsr $27c4		jsr	stringHandler
.1de0	aa		tax				tax
.1de1	68		pla				pla
.1de2	a8		tay				tay
.1de3	60		rts				rts
.1de4					ExecLeft:
.1de4	20 d5 1a	jsr $1ad5			jsr 	EvaluateString 				; string to stack,X
.1de7	20 7b 21	jsr $217b			jsr 	CheckComma
.1dea	e8		inx				inx
.1deb	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1ded	20 0a 21	jsr $210a			jsr 	MInt32Set8Bit
.1df0	e8		inx				inx
.1df1	20 e8 1a	jsr $1ae8			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1df4					ExecSubstring:
.1df4	ca		dex				dex 								; fix up X
.1df5	ca		dex				dex
.1df6	20 6e 21	jsr $216e			jsr 	CheckRightParen 			; check closing right bracket.
.1df9	8a		txa				txa 								; do the substring and exit.
.1dfa	a2 0a		ldx #$0a		ldx	#10
.1dfc	20 c4 27	jsr $27c4		jsr	stringHandler
.1dff	aa		tax				tax
.1e00	60		rts				rts
.1e01					ExecMid:
.1e01	20 d5 1a	jsr $1ad5			jsr 	EvaluateString 				; string to stack,X
.1e04	20 7b 21	jsr $217b			jsr 	CheckComma
.1e07	e8		inx				inx
.1e08	20 e8 1a	jsr $1ae8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1e0b	c9 00		cmp #$00			cmp 	#0
.1e0d	f0 15		beq $1e24			beq 	_EMValue
.1e0f	e8		inx				inx
.1e10	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1e12	20 0a 21	jsr $210a			jsr 	MInt32Set8Bit
.1e15	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1e17	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1e19	f0 d9		beq $1df4			beq 	ExecSubString
.1e1b	20 7b 21	jsr $217b			jsr 	CheckComma
.1e1e	20 e8 1a	jsr $1ae8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1e21	4c f4 1d	jmp $1df4			jmp 	ExecSubString
.1e24					_EMValue:
.1e24	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e26	20 37 22	jsr $2237		jsr	errorHandler
.1e29					ExecRight:
.1e29	20 d5 1a	jsr $1ad5			jsr 	EvaluateString 				; string to stack,X
.1e2c	20 7b 21	jsr $217b			jsr 	CheckComma
.1e2f	e8		inx				inx
.1e30	20 e8 1a	jsr $1ae8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1e33	ca		dex				dex
.1e34	98		tya				tya
.1e35	48		pha				pha
.1e36	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1e38	85 04		sta $04				sta 	temp0
.1e3a	b5 50		lda $50,x			lda 	esInt1,x
.1e3c	85 05		sta $05				sta 	temp0+1
.1e3e	a0 00		ldy #$00			ldy 	#0 							; point to length
.1e40	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1e42	18		clc				clc 								; add 1.
.1e43	69 01		adc #$01			adc 	#1
.1e45	38		sec				sec
.1e46	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1e48	f0 02		beq $1e4c			beq		_ERMake1 					; if zero, make it 1.
.1e4a	b0 02		bcs $1e4e			bcs		_EROkay
.1e4c					_ERMake1:
.1e4c	a9 01		lda #$01			lda 	#1 							; start position.
.1e4e					_EROkay:
.1e4e	e8		inx				inx 								; set start pos.
.1e4f	95 48		sta $48,x			sta 	esInt0,x
.1e51	e8		inx				inx
.1e52	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1e54	20 0a 21	jsr $210a			jsr 	MInt32Set8Bit
.1e57	68		pla				pla
.1e58	a8		tay				tay
.1e59	4c f4 1d	jmp $1df4			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1e5c					MInt32And:
.1e5c	b5 48		lda $48,x			lda 	esInt0,x
.1e5e	35 49		and $49,x			and 	esInt0+1,x
.1e60	95 48		sta $48,x			sta 	esInt0,x
.1e62	b5 50		lda $50,x			lda 	esInt1,x
.1e64	35 51		and $51,x			and 	esInt1+1,x
.1e66	95 50		sta $50,x			sta 	esInt1,x
.1e68	b5 58		lda $58,x			lda 	esInt2,x
.1e6a	35 59		and $59,x			and 	esInt2+1,x
.1e6c	95 58		sta $58,x			sta 	esInt2,x
.1e6e	b5 60		lda $60,x			lda 	esInt3,x
.1e70	35 61		and $61,x			and 	esInt3+1,x
.1e72	95 60		sta $60,x			sta 	esInt3,x
.1e74	60		rts				rts
.1e75					MInt32Or:
.1e75	b5 48		lda $48,x			lda 	esInt0,x
.1e77	15 49		ora $49,x			ora 	esInt0+1,x
.1e79	95 48		sta $48,x			sta 	esInt0,x
.1e7b	b5 50		lda $50,x			lda 	esInt1,x
.1e7d	15 51		ora $51,x			ora 	esInt1+1,x
.1e7f	95 50		sta $50,x			sta 	esInt1,x
.1e81	b5 58		lda $58,x			lda 	esInt2,x
.1e83	15 59		ora $59,x			ora 	esInt2+1,x
.1e85	95 58		sta $58,x			sta 	esInt2,x
.1e87	b5 60		lda $60,x			lda 	esInt3,x
.1e89	15 61		ora $61,x			ora 	esInt3+1,x
.1e8b	95 60		sta $60,x			sta 	esInt3,x
.1e8d	60		rts				rts
.1e8e					MInt32Xor:
.1e8e	b5 48		lda $48,x			lda 	esInt0,x
.1e90	55 49		eor $49,x			eor 	esInt0+1,x
.1e92	95 48		sta $48,x			sta 	esInt0,x
.1e94	b5 50		lda $50,x			lda 	esInt1,x
.1e96	55 51		eor $51,x			eor 	esInt1+1,x
.1e98	95 50		sta $50,x			sta 	esInt1,x
.1e9a	b5 58		lda $58,x			lda 	esInt2,x
.1e9c	55 59		eor $59,x			eor 	esInt2+1,x
.1e9e	95 58		sta $58,x			sta 	esInt2,x
.1ea0	b5 60		lda $60,x			lda 	esInt3,x
.1ea2	55 61		eor $61,x			eor 	esInt3+1,x
.1ea4	95 60		sta $60,x			sta 	esInt3,x
.1ea6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1ea7					MInt32Compare:
.1ea7	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1ea9	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1eab	d0 13		bne $1ec0			bne 	MInt32Compare2
.1ead	b5 50		lda $50,x			lda 	esInt1,x
.1eaf	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1eb1	d0 0d		bne $1ec0			bne 	MInt32Compare2
.1eb3	b5 58		lda $58,x			lda 	esInt2,x
.1eb5	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1eb7	d0 07		bne $1ec0			bne 	MInt32Compare2
.1eb9	b5 60		lda $60,x			lda 	esInt3,x
.1ebb	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1ebd	d0 01		bne $1ec0			bne 	MInt32Compare2
.1ebf	60		rts				rts
.1ec0					MInt32Compare2:
.1ec0	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1ec2	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1ec4	b5 50		lda $50,x			lda		esInt1,x
.1ec6	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1ec8	b5 58		lda $58,x			lda		esInt2,x
.1eca	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1ecc	b5 60		lda $60,x			lda		esInt3,x
.1ece	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1ed0	50 02		bvc $1ed4			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1ed2	49 80		eor #$80			eor 	#$80
.1ed4					_I32LNoOverflow
.1ed4	30 03		bmi $1ed9			bmi 	MInt32CLess					; if -ve then return $FF
.1ed6	a9 01		lda #$01			lda 	#$01						; else return $01
.1ed8	60		rts				rts
.1ed9					MInt32CLess:
.1ed9	a9 ff		lda #$ff			lda 	#$FF
.1edb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1edc					MInt32SDivide:
.1edc	98		tya				tya  								; save Y, which is the count of negations
.1edd	48		pha				pha
.1ede	a0 00		ldy #$00			ldy 	#0 							; zero count
.1ee0	20 f8 1e	jsr $1ef8			jsr 	_MInt32SRemSign 			; unsign TOS
.1ee3	e8		inx				inx 								; unsign TOS+1
.1ee4	20 f8 1e	jsr $1ef8			jsr 	_MInt32SRemSign
.1ee7	ca		dex				dex
.1ee8	98		tya				tya 								; save sign count on stack
.1ee9	48		pha				pha
.1eea	20 01 1f	jsr $1f01			jsr 	MInt32UDivide 				; unsigned division
.1eed	68		pla				pla 								; get sign count back
.1eee	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1ef0	f0 03		beq $1ef5			beq 	_I32SNoNeg
.1ef2	20 b5 20	jsr $20b5			jsr 	MInt32Negate
.1ef5					_I32SNoNeg:
.1ef5	68		pla				pla 								; restoe Y and exit
.1ef6	a8		tay				tay
.1ef7	60		rts				rts
.1ef8					_MInt32SRemSign:
.1ef8	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1efa	10 04		bpl $1f00			bpl 	_MInt32SRSExit
.1efc	c8		iny				iny 								; increment the sign count
.1efd	20 b5 20	jsr $20b5			jsr 	MInt32Negate 				; negate the value.
.1f00					_MInt32SRSExit:
.1f00	60		rts				rts
.1f01					MInt32UDivide:
.1f01	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1f03	15 51		ora $51,x			ora 	esInt1+1,x
.1f05	15 52		ora $52,x			ora 	esInt1+2,x
.1f07	15 53		ora $53,x			ora 	esInt1+3,x
.1f09	f0 4a		beq $1f55			beq 	_MInt32DZero
.1f0b	e8		inx				inx 								; clear A
.1f0c	e8		inx				inx
.1f0d	20 fb 20	jsr $20fb			jsr 	MInt32False
.1f10	ca		dex				dex
.1f11	ca		dex				dex
.1f12	98		tya				tya 								; save Y on the stack
.1f13	48		pha				pha
.1f14	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1f16					_MInt32UDLoop:
.1f16	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1f18	36 50		rol $50,x			rol 	esInt1,x
.1f1a	36 58		rol $58,x			rol 	esInt2,x
.1f1c	36 60		rol $60,x			rol 	esInt3,x
.1f1e	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1f20	36 52		rol $52,x			rol 	esInt1+2,x
.1f22	36 5a		rol $5a,x			rol 	esInt2+2,x
.1f24	36 62		rol $62,x			rol 	esInt3+2,x
.1f26	38		sec				sec 								; calculate A-M saving result on the stack
.1f27	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1f29	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1f2b	48		pha				pha
.1f2c	b5 52		lda $52,x			lda 	esInt1+2,x
.1f2e	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1f30	48		pha				pha
.1f31	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1f33	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1f35	48		pha				pha
.1f36	b5 62		lda $62,x			lda 	esInt3+2,x
.1f38	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1f3a	90 10		bcc $1f4c			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1f3c	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1f3e	68		pla				pla
.1f3f	95 5a		sta $5a,x			sta 	esInt2+2,x
.1f41	68		pla				pla
.1f42	95 52		sta $52,x			sta 	esInt1+2,x
.1f44	68		pla				pla
.1f45	95 4a		sta $4a,x			sta 	esInt0+2,x
.1f47	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1f49	4c 4f 1f	jmp $1f4f			jmp 	_MInt32Next 					; do the next iteration
.1f4c					_MInt32NoSubtract:
.1f4c	68		pla				pla
.1f4d	68		pla				pla
.1f4e	68		pla				pla
.1f4f					_MInt32Next:
.1f4f	88		dey				dey 								; do this 32 times.
.1f50	d0 c4		bne $1f16			bne 	_MInt32UDLoop
.1f52	68		pla				pla 								; restore Y and exit
.1f53	a8		tay				tay
.1f54	60		rts				rts
.1f55					_MInt32DZero:
.1f55	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1f57	20 37 22	jsr $2237		jsr	errorHandler
.1f5a					MInt32Modulus:
.1f5a	20 01 1f	jsr $1f01			jsr 	MInt32UDivide 				; do the division.
.1f5d	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1f5f	95 60		sta $60,x			sta 	esInt3,x
.1f61	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1f63	95 58		sta $58,x			sta 	esInt2,x
.1f65	b5 52		lda $52,x			lda 	esInt1+2,x
.1f67	95 50		sta $50,x			sta 	esInt1,x
.1f69	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1f6b	95 48		sta $48,x			sta 	esInt0,x
.1f6d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af9					fs32Length:
>0af9							.fill 	1
.1f6e					MInt32FromString:
.1f6e	85 0c		sta $0c				sta 	tempShort 					; save base
.1f70	98		tya				tya
.1f71	48		pha				pha
.1f72	a0 00		ldy #$00			ldy 	#0 							; get length
.1f74	b1 04		lda ($04),y			lda 	(temp0),y
.1f76	8d f9 0a	sta $0af9			sta 	fs32Length
.1f79	f0 65		beq $1fe0			beq 	_I32FSFail2					; fail if length zero.
.1f7b	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1f7d	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1f7f	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1f81	d0 09		bne $1f8c			bne 	_I32FSNotNegative
.1f83	ad f9 0a	lda $0af9			lda 	fs32Length 					; get length back.
.1f86	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1f88	f0 56		beq $1fe0			beq 	_I32FSFail2
.1f8a	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1f8c					_I32FSNotNegative:
.1f8c	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1f8e	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1f90	d0 02		bne $1f94			bne 	_I32FSNN2
.1f92	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1f94					_I32FSNN2:
.1f94	48		pha				pha 								; save base + final sign on stack.
.1f95	20 fb 20	jsr $20fb			jsr 	MInt32False 				; zero the return value.
.1f98					_I32FSMainLoop:
.1f98	68		pla				pla 								; get the base back into tempShort
.1f99	48		pha				pha
.1f9a	29 7f		and #$7f			and 	#$7F
.1f9c	85 0c		sta $0c				sta 	tempShort
.1f9e	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1fa0	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1fa2	90 02		bcc $1fa6			bcc 	_I32FSNotLC
.1fa4	e9 20		sbc #$20			sbc 	#32
.1fa6					_I32FSNotLC:
.1fa6	38		sec				sec 								; subtract 48 (ASCII "0")
.1fa7	e9 30		sbc #$30			sbc 	#"0"
.1fa9	90 34		bcc $1fdf			bcc 	_I32FSFail 					; nothing more to do.
.1fab	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1fad	90 06		bcc $1fb5			bcc 	_I32FSValidate
.1faf	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1fb1	90 2c		bcc $1fdf			bcc 	_I32FSFail
.1fb3	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1fb5					_I32FSValidate:
.1fb5	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1fb7	b0 26		bcs $1fdf			bcs 	_I32FSFail 					; sorry, too large for this base.
.1fb9	48		pha				pha 								; save the new digit value.
.1fba	e8		inx				inx 								; put base into next slot.
.1fbb	a5 0c		lda $0c				lda 	tempShort
.1fbd	20 0a 21	jsr $210a			jsr 	MInt32Set8Bit
.1fc0	ca		dex				dex
.1fc1	20 18 20	jsr $2018			jsr 	MInt32Multiply 				; multiply current by the base
.1fc4	e8		inx				inx
.1fc5	68		pla				pla  								; put additive into next slot
.1fc6	20 0a 21	jsr $210a			jsr 	MInt32Set8Bit
.1fc9	ca		dex				dex
.1fca	20 e4 1f	jsr $1fe4			jsr 	MInt32Add 					; and add it
.1fcd	c8		iny				iny 								; look at next character
.1fce	cc f9 0a	cpy $0af9			cpy 	fs32Length 					; until > length.
.1fd1	f0 c5		beq $1f98			beq 	_I32FSMainLoop
.1fd3	90 c3		bcc $1f98			bcc 	_I32FSMainLoop
.1fd5					_I32FSDone:
.1fd5	68		pla				pla 								; get base/final sign back
.1fd6	10 03		bpl $1fdb			bpl 	_I32FSNN3
.1fd8	20 b5 20	jsr $20b5			jsr 	MInt32Negate 				; negate the result.
.1fdb					_I32FSNN3:
.1fdb	68		pla				pla
.1fdc	a8		tay				tay
.1fdd	38		sec				sec
.1fde	60		rts				rts
.1fdf					_I32FSFail:
.1fdf	68		pla				pla
.1fe0					_I32FSFail2:
.1fe0	68		pla				pla
.1fe1	a8		tay				tay
.1fe2	18		clc				clc
.1fe3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1fe4					MInt32Add:
.1fe4	18		clc				clc
.1fe5	b5 48		lda $48,x			lda 	esInt0,x
.1fe7	75 49		adc $49,x			adc 	esInt0+1,x
.1fe9	95 48		sta $48,x			sta 	esInt0,x
.1feb	b5 50		lda $50,x			lda 	esInt1,x
.1fed	75 51		adc $51,x			adc 	esInt1+1,x
.1fef	95 50		sta $50,x			sta 	esInt1,x
.1ff1	b5 58		lda $58,x			lda 	esInt2,x
.1ff3	75 59		adc $59,x			adc 	esInt2+1,x
.1ff5	95 58		sta $58,x			sta 	esInt2,x
.1ff7	b5 60		lda $60,x			lda 	esInt3,x
.1ff9	75 61		adc $61,x			adc 	esInt3+1,x
.1ffb	95 60		sta $60,x			sta 	esInt3,x
.1ffd	60		rts				rts
.1ffe					MInt32Sub:
.1ffe	38		sec				sec
.1fff	b5 48		lda $48,x			lda 	esInt0,x
.2001	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2003	95 48		sta $48,x			sta 	esInt0,x
.2005	b5 50		lda $50,x			lda 	esInt1,x
.2007	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2009	95 50		sta $50,x			sta 	esInt1,x
.200b	b5 58		lda $58,x			lda 	esInt2,x
.200d	f5 59		sbc $59,x			sbc 	esInt2+1,x
.200f	95 58		sta $58,x			sta 	esInt2,x
.2011	b5 60		lda $60,x			lda 	esInt3,x
.2013	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2015	95 60		sta $60,x			sta 	esInt3,x
.2017	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2018					MInt32Multiply:
.2018	e8		inx				inx 								; copy 2nd -> 3rd
.2019	20 3e 20	jsr $203e			jsr 	MInt32CopyUp
.201c	ca		dex				dex
.201d	20 3e 20	jsr $203e			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2020	20 fb 20	jsr $20fb			jsr 	MInt32False 					; zero 1st.
.2023					_I32Loop:
.2023	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2025	29 01		and #$01			and 	#1
.2027	f0 03		beq $202c			beq 	_I32NoAdd 					; if set
.2029	20 e4 1f	jsr $1fe4			jsr 	MInt32Add 					; add 2nd to 1st.
.202c					_I32NoAdd:
.202c	e8		inx				inx 								; shift 2nd left
.202d	20 10 21	jsr $2110			jsr 	MInt32ShiftLeft
.2030	e8		inx				inx  								; shift 3rd right
.2031	20 19 21	jsr $2119			jsr 	MInt32ShiftRight
.2034	20 22 21	jsr $2122			jsr 	MInt32Zero 					; check if zero.
.2037	08		php				php 								; save status bits
.2038	ca		dex				dex 	 							; point back to 1st
.2039	ca		dex				dex
.203a	28		plp				plp 								; get status bits
.203b	d0 e6		bne $2023			bne 	_I32Loop 					; if non-zero keep going.
.203d	60		rts				rts
.203e					MInt32CopyUp:
.203e	b5 48		lda $48,x			lda 	esInt0,x
.2040	95 49		sta $49,x			sta 	esInt0+1,x
.2042	b5 50		lda $50,x			lda 	esInt1,x
.2044	95 51		sta $51,x			sta 	esInt1+1,x
.2046	b5 58		lda $58,x			lda 	esInt2,x
.2048	95 59		sta $59,x			sta 	esInt2+1,x
.204a	b5 60		lda $60,x			lda 	esInt3,x
.204c	95 61		sta $61,x			sta 	esInt3+1,x
.204e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0afa					MCharCount:	.fill 	1						; count of converted characters
.204f					MLInt32ToString:
.204f	aa		tax				tax									; module passes stack in A, base in Y
.2050	98		tya				tya
.2051					MInt32ToString:
.2051	48		pha				pha 								; save base
.2052	85 0c		sta $0c				sta 	tempShort 					; save target base.
.2054	a9 00		lda #$00			lda 	#0
.2056	8d fa 0a	sta $0afa			sta 	MCharCount 					; clear character count to 0
.2059	98		tya				tya
.205a	48		pha				pha
.205b	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.205d	10 10		bpl $206f			bpl 	_I32TSUnsigned
.205f	48		pha				pha 								; save base on stack.
.2060	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2062	10 08		bpl $206c			bpl 	_I32TSNoFlip
.2064	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2066	20 a2 20	jsr $20a2			jsr 	MI32WriteCharacter
.2069	20 b5 20	jsr $20b5			jsr 	MInt32Negate 				; negate the value.
.206c					_I32TSNoFlip:
.206c	68		pla				pla 								; get the base back
.206d	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.206f					_I32TSUnsigned:
.206f	20 7d 20	jsr $207d			jsr 	MI32DivideWrite 			; recursive code to output string.
.2072	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2074	ad fa 0a	lda $0afa			lda 	MCharCount
.2077	91 04		sta ($04),y			sta 	(temp0),y
.2079	68		pla				pla
.207a	a8		tay				tay
.207b	68		pla				pla
.207c	60		rts				rts
.207d					MI32DivideWrite:
.207d	48		pha				pha 								; save the divisor/base
.207e	e8		inx				inx 								; write in the dividing position.
.207f	20 0a 21	jsr $210a			jsr 	MInt32Set8Bit
.2082	ca		dex				dex
.2083	20 01 1f	jsr $1f01			jsr 	MInt32UDivide 				; divide number by base.
.2086	68		pla				pla 								; get the base into Y
.2087	a8		tay				tay
.2088	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.208a	48		pha				pha
.208b	20 22 21	jsr $2122			jsr 	MInt32Zero 					; is the result zero ?
.208e	f0 04		beq $2094			beq 	_I32NoRecurse 				; if so, don't recurse.
.2090	98		tya				tya 								; put base into A
.2091	20 7d 20	jsr $207d			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2094					_I32NoRecurse:
.2094	68		pla				pla 								; get the remainder back
.2095	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.2097	90 02		bcc $209b			bcc 	_I32NotHex
.2099	69 06		adc #$06			adc 	#7-1
.209b					_I32NotHex:
.209b	18		clc				clc 								; make it ASCII
.209c	69 30		adc #$30			adc 	#48
.209e	20 a2 20	jsr $20a2			jsr 	MI32WriteCharacter 			; write the character out
.20a1	60		rts				rts 								; and exit.
.20a2					MI32WriteCharacter:
.20a2	ee fa 0a	inc $0afa			inc 	MCharCount 					; bump count (space for leading count)
.20a5	ac fa 0a	ldy $0afa			ldy 	MCharCount 					; get position
.20a8	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.20aa	c8		iny				iny
.20ab	a9 00		lda #$00			lda 	#0
.20ad	91 04		sta ($04),y			sta 	(temp0),y
.20af	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0afb					MSeed32:	.fill 	4							; random number seed.
.20b0					MInt32Absolute:
.20b0	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.20b2	30 01		bmi $20b5			bmi 	MInt32Negate
.20b4	60		rts				rts
.20b5					MInt32Negate:
.20b5	38		sec				sec
.20b6	a9 00		lda #$00			lda 	#0
.20b8	f5 48		sbc $48,x			sbc 	esInt0,x
.20ba	95 48		sta $48,x			sta 	esInt0,x
.20bc	a9 00		lda #$00			lda 	#0
.20be	f5 50		sbc $50,x			sbc 	esInt1,x
.20c0	95 50		sta $50,x			sta 	esInt1,x
.20c2	a9 00		lda #$00			lda 	#0
.20c4	f5 58		sbc $58,x			sbc 	esInt2,x
.20c6	95 58		sta $58,x			sta 	esInt2,x
.20c8	a9 00		lda #$00			lda 	#0
.20ca	f5 60		sbc $60,x			sbc 	esInt3,x
.20cc	95 60		sta $60,x			sta 	esInt3,x
.20ce	60		rts				rts
.20cf					MInt32Not:
.20cf	b5 48		lda $48,x			lda 	esInt0,x
.20d1	49 ff		eor #$ff			eor 	#$FF
.20d3	95 48		sta $48,x			sta 	esInt0,x
.20d5	b5 50		lda $50,x			lda 	esInt1,x
.20d7	49 ff		eor #$ff			eor 	#$FF
.20d9	95 50		sta $50,x			sta 	esInt1,x
.20db	b5 58		lda $58,x			lda 	esInt2,x
.20dd	49 ff		eor #$ff			eor 	#$FF
.20df	95 58		sta $58,x			sta 	esInt2,x
.20e1	b5 60		lda $60,x			lda 	esInt3,x
.20e3	49 ff		eor #$ff			eor 	#$FF
.20e5	95 60		sta $60,x			sta 	esInt3,x
.20e7	60		rts				rts
.20e8					MInt32Sign:
.20e8	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.20ea	30 0b		bmi $20f7			bmi 	MInt32True 					; if set return -1 (true)
.20ec	20 22 21	jsr $2122			jsr 	MInt32Zero 					; is it zero ?
.20ef	f0 0a		beq $20fb			beq 	MInt32False 					; if zero return 0 (false)
.20f1	20 fb 20	jsr $20fb			jsr 	MInt32False 					; > 0 return 1
.20f4	f6 48		inc $48,x			inc 	esInt0,x
.20f6	60		rts				rts
.20f7					MInt32True:
.20f7	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.20f9	d0 02		bne $20fd			bne 	MInt32WriteAll
.20fb					MInt32False:
.20fb	a9 00		lda #$00			lda 	#0
.20fd					MInt32WriteAll:
.20fd	95 48		sta $48,x			sta 	esInt0,x
.20ff					MInt32Write123:
.20ff	95 50		sta $50,x			sta 	esInt1,x
.2101	95 58		sta $58,x			sta 	esInt2,x
.2103	95 60		sta $60,x			sta 	esInt3,x
.2105	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2107	95 40		sta $40,x			sta 	esType,x
.2109	60		rts				rts
.210a					MInt32Set8Bit:
.210a	95 48		sta $48,x			sta 	esInt0,x
.210c	a9 00		lda #$00			lda 	#0
.210e	f0 ef		beq $20ff			beq		MInt32Write123
.2110					MInt32ShiftLeft:
.2110	16 48		asl $48,x			asl 	esInt0,x
.2112	36 50		rol $50,x			rol	 	esInt1,x
.2114	36 58		rol $58,x			rol	 	esInt2,x
.2116	36 60		rol $60,x			rol	 	esInt3,x
.2118	60		rts				rts
.2119					MInt32ShiftRight:
.2119	56 60		lsr $60,x			lsr 	esInt3,x
.211b	76 58		ror $58,x			ror 	esInt2,x
.211d	76 50		ror $50,x			ror 	esInt1,x
.211f	76 48		ror $48,x			ror 	esInt0,x
.2121	60		rts				rts
.2122					MInt32Zero:
.2122	b5 48		lda $48,x			lda 	esInt0,x
.2124	15 50		ora $50,x			ora 	esInt1,x
.2126	15 58		ora $58,x			ora 	esInt2,x
.2128	15 60		ora $60,x			ora 	esInt3,x
.212a	60		rts				rts
.212b					MInt32Random:
.212b	98		tya				tya
.212c	48		pha				pha
.212d	a0 07		ldy #$07			ldy 	#7
.212f	ad fb 0a	lda $0afb			lda 	MSeed32+0
.2132	d0 03		bne $2137			bne 	_Random1
.2134	a8		tay				tay
.2135	a9 aa		lda #$aa			lda		#$AA
.2137					_Random1:
.2137	0a		asl a				asl 	a
.2138	2e fc 0a	rol $0afc			rol 	MSeed32+1
.213b	2e fd 0a	rol $0afd			rol 	MSeed32+2
.213e	2e fe 0a	rol $0afe			rol 	MSeed32+3
.2141	90 02		bcc $2145			bcc 	_Random2
.2143	49 c5		eor #$c5			eor 	#$C5
.2145					_Random2:
.2145	88		dey				dey
.2146	d0 ef		bne $2137			bne 	_Random1
.2148	8d fb 0a	sta $0afb			sta 	MSeed32+0
.214b	95 48		sta $48,x			sta 	esInt0,x
.214d	ad fc 0a	lda $0afc			lda 	MSeed32+1
.2150	95 50		sta $50,x			sta 	esInt1,x
.2152	ad fd 0a	lda $0afd			lda 	MSeed32+2
.2155	95 58		sta $58,x			sta 	esInt2,x
.2157	ad fe 0a	lda $0afe			lda 	MSeed32+3
.215a	95 60		sta $60,x			sta 	esInt3,x
.215c	68		pla				pla
.215d	a8		tay				tay
.215e	a9 00		lda #$00			lda 	#0
.2160	95 40		sta $40,x			sta 	esType,x
.2162	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2163					CheckToken:
.2163	d1 02		cmp ($02),y			cmp 	(codePtr),y
.2165	d0 02		bne $2169			bne 	_CTError
.2167	c8		iny				iny
.2168	60		rts				rts
.2169					_CTError:
.2169	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.216b	20 37 22	jsr $2237		jsr	errorHandler
.216e					CheckRightParen:
.216e	b1 02		lda ($02),y			lda 	(codePtr),y
.2170	c8		iny				iny
.2171	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2173	d0 01		bne $2176			bne 	_CRPError
.2175	60		rts				rts
.2176					_CRPError:
.2176	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2178	20 37 22	jsr $2237		jsr	errorHandler
.217b					CheckComma:
.217b	b1 02		lda ($02),y			lda 	(codePtr),y
.217d	c8		iny				iny
.217e	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.2180	d0 01		bne $2183			bne 	_CCError
.2182	60		rts				rts
.2183					_CCError:
.2183	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2185	20 37 22	jsr $2237		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2c0d					ScanForward:
.2c0d	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2c0f	86 07		stx $07				stx 	temp1+1
.2c11	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2c13	85 08		sta $08				sta 	temp2
.2c15	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2c17	c8		iny				iny
.2c18	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.2c1a	d0 08		bne $2c24			bne 	_SFNoCheck 					; if so, check token against entered values.
.2c1c	c5 06		cmp $06				cmp 	temp1
.2c1e	f0 24		beq $2c44			beq 	_SFExit
.2c20	c5 07		cmp $07				cmp 	temp1+1
.2c22	f0 20		beq $2c44			beq 	_SFExit
.2c24					_SFNoCheck:
.2c24	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2c26	90 ed		bcc $2c15			bcc 	_SFLoop
.2c28	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2c2a	90 19		bcc $2c45			bcc 	_SFSpecials
.2c2c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2c2e	90 e5		bcc $2c15			bcc 	_SFLoop
.2c30	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2c32	b0 e1		bcs $2c15			bcs 	_SFLoop
.2c34	aa		tax				tax  								; token in X, and look up the adjuster.
.2c35	bd c8 1a	lda $1ac8,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2c38	38		sec				sec 								; convert to an offset
.2c39	e9 81		sbc #$81			sbc 	#$81
.2c3b	18		clc				clc 								; add to depth
.2c3c	65 08		adc $08				adc 	temp2
.2c3e	85 08		sta $08				sta 	temp2
.2c40	10 d3		bpl $2c15			bpl 	_SFLoop 					; +ve okay to continue
.2c42	30 35		bmi $2c79			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2c44	60		rts		_SFExit:rts
.2c45					_SFSpecials:
.2c45	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2c47	f0 14		beq $2c5d			beq 	_SFNextLine
.2c49	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2c4b	f0 31		beq $2c7e			beq 	_SFFloatSkip
.2c4d	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2c4f	f0 04		beq $2c55			beq 	_SFSkipString
.2c51	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2c52	4c 15 2c	jmp $2c15			jmp 	_SFLoop 					; token.
.2c55					_SFSkipString:
.2c55	98		tya				tya
.2c56	38		sec				sec
.2c57	71 02		adc ($02),y			adc 	(codePtr),y
.2c59	a8		tay				tay
.2c5a	4c 15 2c	jmp $2c15			jmp 	_SFLoop
.2c5d					_SFNextLine:
.2c5d	a0 00		ldy #$00			ldy 	#0 							; get offset
.2c5f	b1 02		lda ($02),y			lda 	(codePtr),y
.2c61	18		clc				clc 								; add to code pointer.
.2c62	65 02		adc $02				adc 	codePtr
.2c64	85 02		sta $02				sta 	codePtr
.2c66	90 02		bcc $2c6a			bcc		_SFNLNoCarry
.2c68	e6 03		inc $03				inc 	codePtr+1
.2c6a					_SFNLNoCarry:
.2c6a	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2c6c	d0 a7		bne $2c15			bne		_SFLoop 					; no go round again
.2c6e	a5 06		lda $06				lda 	temp1
.2c70	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2c72	d0 05		bne $2c79			bne 	_SFError
.2c74	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2c76	20 37 22	jsr $2237		jsr	errorHandler
.2c79					_SFError:
.2c79	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2c7b	20 37 22	jsr $2237		jsr	errorHandler
.2c7e					_SFFloatSkip:
.2c7e	4c 8f 14	jmp $148f			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2188					RSReset:
.2188	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.218a	85 78		sta $78				sta 	rsPointer
.218c	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.218e	85 79		sta $79				sta 	1+(rsPointer)
.2190	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2192	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2195	60		rts				rts
.2196					RSClaim:
.2196	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.2198	48		pha				pha 								; save marker on stack.
.2199	8a		txa				txa 								; get bytes required.
.219a	38		sec				sec
.219b	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.219d	65 78		adc $78				adc 	rsPointer
.219f	85 78		sta $78				sta 	rsPointer
.21a1	a5 79		lda $79				lda 	rsPointer+1
.21a3	69 ff		adc #$ff			adc 	#$FF
.21a5	85 79		sta $79				sta 	rsPointer+1
.21a7	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.21a9	90 08		bcc $21b3			bcc 	_RSCOverflow
.21ab	68		pla				pla 								; get marker back
.21ac	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.21ae	91 78		sta ($78),y			sta 	(rsPointer),y
.21b0	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.21b2	60		rts				rts
.21b3					_RSCOverflow:
.21b3	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.21b5	20 37 22	jsr $2237		jsr	errorHandler
.21b8					RSFree:
.21b8	18		clc				clc
.21b9	65 78		adc $78				adc 	rsPointer
.21bb	85 78		sta $78				sta 	rsPointer
.21bd	90 02		bcc $21c1			bcc 	_RSFExit
.21bf	e6 79		inc $79				inc 	rsPointer+1
.21c1					_RSFExit:
.21c1	60		rts				rts
.21c2					RSSavePosition:
.21c2	84 0c		sty $0c				sty 	tempShort 					; save Y position
.21c4	a8		tay				tay 								; this is where we write it.
.21c5	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.21c7	91 78		sta ($78),y			sta 	(rsPointer),y
.21c9	c8		iny				iny
.21ca	a5 03		lda $03				lda 	codePtr+1
.21cc	91 78		sta ($78),y			sta 	(rsPointer),y
.21ce	c8		iny				iny
.21cf	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.21d1	91 78		sta ($78),y			sta 	(rsPointer),y
.21d3	a8		tay				tay 								; fix Y back again to original value
.21d4	60		rts				rts
.21d5					RSLoadPosition:
.21d5	a8		tay				tay
.21d6	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.21d8	85 02		sta $02				sta 	codePtr
.21da	c8		iny				iny
.21db	b1 78		lda ($78),y			lda 	(rsPointer),y
.21dd	85 03		sta $03				sta 	codePtr+1
.21df	c8		iny				iny
.21e0	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.21e2	a8		tay				tay 								; to Y
.21e3	60		rts				rts

;******  Return to file: main/main.asm

.21e4					mainHandler:
.21e4	7c e7 21	jmp ($21e7,x)			jmp 	(mainVectors,x)
.21e7					mainVectors:
>21e7	6e 21					.word CheckRightParen      ; index 0
>21e9	fb 1a					.word LinkEvaluate         ; index 2
>21eb	01 1b					.word LinkEvaluateInteger  ; index 4
>21ed	07 1b					.word LinkEvaluateSmallInt ; index 6
>21ef	4f 20					.word MLInt32ToString      ; index 8
>21f1	0b 13					.word PrintString          ; index 10

;******  Return to file: basic.asm

.21f3					section_end_main:
.21f3					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.21f3					assemblerHandler:
.21f3	7c f6 21	jmp ($21f6,x)			jmp 	(assemblerVectors,x)
.21f6					assemblerVectors:

;******  Return to file: basic.asm

.21f6					section_end_assembler:
.21f6					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.21f6					IOInitialise:
.21f6	a9 0f		lda #$0f			lda 	#15
.21f8	20 0c 22	jsr $220c			jsr 	IOPrintChar
.21fb	60		rts				rts
.21fc					IONewLine:
.21fc	48		pha				pha
.21fd	a9 0d		lda #$0d			lda 	#13
.21ff	20 0c 22	jsr $220c			jsr 	IOPrintChar
.2202	68		pla				pla
.2203	60		rts				rts
.2204					IOTab:
.2204	48		pha				pha
.2205	a9 20		lda #$20			lda 	#32
.2207	20 0c 22	jsr $220c			jsr 	IOPrintChar
.220a	68		pla				pla
.220b	60		rts				rts
.220c					IOPrintChar:
.220c	aa		tax				tax
.220d	5a		phy				phy
.220e	8a		txa				txa
.220f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2212	7a		ply				ply
.2213	60		rts				rts
.2214					IOInkey:
.2214	98		tya				tya
.2215	48		pha				pha
.2216	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2219	85 0c		sta $0c				sta 	tempShort
.221b	68		pla				pla
.221c	a8		tay				tay
.221d	a5 0c		lda $0c				lda 	tempShort
.221f	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.2220					IOReadTimer:
.2220	20 de ff	jsr $ffde			jsr 	$FFDE
.2223	48		pha				pha
.2224	8a		txa				txa
.2225	a8		tay				tay
.2226	68		pla				pla
.2227	60		rts				rts

;******  Return to file: device/device.asm

.2228					deviceHandler:
.2228	7c 2b 22	jmp ($222b,x)			jmp 	(deviceVectors,x)
.222b					deviceVectors:
>222b	fc 21					.word IONewLine            ; index 0
>222d	f6 21					.word IOInitialise         ; index 2
>222f	14 22					.word IOInkey              ; index 4
>2231	0c 22					.word IOPrintChar          ; index 6
>2233	04 22					.word IOTab                ; index 8
>2235	20 22					.word IOReadTimer          ; index 10

;******  Return to file: basic.asm

.2237					section_end_device:
.2237					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.2237					ErrorHandler:
.2237	a9 9a		lda #$9a			lda 	#(ErrorTextList) & $FF
.2239	85 04		sta $04				sta 	temp0
.223b	a9 22		lda #$22			lda 	#(ErrorTextList) >> 8
.223d	85 05		sta $05				sta 	1+(temp0)
.223f	ca		dex		_EHFind:dex
.2240	f0 10		beq $2252			beq 	_EHFound
.2242	a0 00		ldy #$00			ldy 	#0 							; goto next text message
.2244	38		sec				sec
.2245	a5 04		lda $04				lda 	temp0
.2247	71 04		adc ($04),y			adc 	(temp0),y
.2249	85 04		sta $04				sta 	temp0
.224b	90 f2		bcc $223f			bcc 	_EHFind
.224d	e6 05		inc $05				inc 	temp0+1
.224f	4c 3f 22	jmp $223f			jmp 	_EHFind
.2252					_EHFound:
.2252	a2 0a		ldx #$0a		ldx	#10
.2254	20 e4 21	jsr $21e4		jsr	mainHandler
.2257	a0 00		ldy #$00			ldy 	#0 							; in a line ?
.2259	b1 02		lda ($02),y			lda 	(codePtr),y
.225b	f0 36		beq $2293			beq 	_EHNoLine
.225d	a9 96		lda #$96			lda 	#(EHAtMsg) & $FF
.225f	85 04		sta $04				sta 	temp0
.2261	a9 22		lda #$22			lda 	#(EHAtMsg) >> 8
.2263	85 05		sta $05				sta 	1+(temp0)
.2265	a2 0a		ldx #$0a		ldx	#10
.2267	20 e4 21	jsr $21e4		jsr	mainHandler
.226a	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.226c	a2 00		ldx #$00			ldx 	#0
.226e	b1 02		lda ($02),y			lda 	(codePtr),y
.2270	95 48		sta $48,x			sta 	esInt0,x
.2272	c8		iny				iny
.2273	b1 02		lda ($02),y			lda 	(codePtr),y
.2275	95 50		sta $50,x			sta 	esInt1,x
.2277	a9 00		lda #$00			lda 	#0
.2279	95 58		sta $58,x			sta 	esInt2,x
.227b	95 60		sta $60,x			sta 	esInt3,x
.227d	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.227f	85 04		sta $04				sta 	temp0
.2281	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2283	85 05		sta $05				sta 	1+(temp0)
.2285	a0 0a		ldy #$0a			ldy 	#10
.2287	a9 00		lda #$00			lda 	#0
.2289	a2 08		ldx #$08		ldx	#8
.228b	20 e4 21	jsr $21e4		jsr	mainHandler
.228e	a2 0a		ldx #$0a		ldx	#10
.2290	20 e4 21	jsr $21e4		jsr	mainHandler
.2293					_EHNoLine:
.2293	4c 93 22	jmp $2293	_EHHalt:jmp 	_EHHalt
.2296					EHAtMsg:
>2296	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.229a					ErrorTextList:
>229a	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>22a2	20 6e 6f 74 20 50 72 65 73 65 6e 74
>22ae	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>22b6	45 72 72 6f 72
>22bb	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>22c3	64 69 73 61 62 6c 65 64
>22cb	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>22d3	6f 6e 20 66 61 69 6c 65 64
>22dc	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>22e4	42 79 20 5a 65 72 6f
>22eb	04 53 74 6f 70				.text 4,"Stop"
>22f0	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>22f8	73 6d 61 74 63 68
>22fe	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>2306	20 56 61 6c 75 65
>230c	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>2314	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>2322	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>232a	20 63 6f 6d 6d 61
>2330	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>2338	20 72 65 66 65 72 65 6e 63 65
>2342	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>234a	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>2358	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>2360	74 6f 6f 20 6c 6f 6e 67 2e
>2369	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>2371	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>237e	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>2386	69 74 68 6f 75 74 20 52 45 50 45 41 54
>2393	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>239b	74 68 6f 75 74 20 46 4f 52
>23a4	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>23ac	74 68 6f 75 74 20 57 48 49 4c 45
>23b7	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>23bf	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>23cc	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>23d4	54 20 69 6e 64 65 78
>23db	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>23e3	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>23f3	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>23fb	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>240a	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>2412	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>2422	63 65 2e
>2425	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>242d	20 50 72 6f 63 65 64 75 72 65
>2437	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>243f	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>244f	2e
>2450	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>2458	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>2466	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>246e	75 69 72 65 73 20 61 72 72 61 79
>2479	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>2481	61 79 20 69 6e 64 65 78 2e
>248a	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>2492	64 61 74 61
>2496	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2497					section_end_error:
.2497					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2497					ExtensionHandler:
.2497	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.2499	d0 08		bne $24a3			bne 	_ExtensionUnary
.249b	b1 02		lda ($02),y			lda 	(codePtr),y
.249d	c8		iny				iny
.249e	0a		asl a				asl 	a
.249f	aa		tax				tax
.24a0	7c a1 24	jmp ($24a1,x)			jmp 	(Group2Vectors-12,X)
.24a3					_ExtensionUnary:
.24a3	48		pha				pha 								; save stack pos in A
.24a4	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token
.24a6	c8		iny				iny
.24a7	0a		asl a				asl 	a
.24a8	aa		tax				tax
.24a9	68		pla				pla
.24aa	7c a5 24	jmp ($24a5,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.24ad					Group2Vectors:
>24ad	bd 24					.word	Command_VPoke            ; $86 vpoke
>24af	c0 24					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.24b1					Group3Vectors:
>24b1	01 25					.word	Command_VPeek            ; $86 vpeek(
>24b3	04 25					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.24b5					XEvaluateInteger:
.24b5	8a		txa				txa
.24b6	a2 04		ldx #$04		ldx	#4
.24b8	20 e4 21	jsr $21e4		jsr	mainHandler
.24bb	aa		tax				tax
.24bc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.24bd					Command_VPoke:
.24bd	38		sec				sec 						; one byte , CS
.24be	b0 01		bcs $24c1			bcs 	CmdVideoWrite
.24c0					Command_VDoke:
.24c0	18		clc				clc 						; two bytes, CC
.24c1					CmdVideoWrite:
.24c1	08		php				php
.24c2	a2 00		ldx #$00			ldx 	#0  				; get address into levels 0,1
.24c4	20 b5 24	jsr $24b5			jsr 	XEvaluateInteger
.24c7	20 7b 21	jsr $217b			jsr 	CheckComma
.24ca	e8		inx				inx
.24cb	20 b5 24	jsr $24b5			jsr 	XEvaluateInteger
.24ce	ca		dex				dex
.24cf	20 e0 24	jsr $24e0			jsr 	SetUpTOSVRamAddress
.24d2	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.24d4	8d 23 9f	sta $9f23			sta 	$9F23
.24d7	28		plp				plp 						; if it was Poke then exit
.24d8	b0 05		bcs $24df			bcs 	_CVWExit
.24da	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.24dc	8d 23 9f	sta $9f23			sta 	$9F23
.24df					_CVWExit:
.24df	60		rts				rts
.24e0					SetUpTOSVRamAddress:
.24e0	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.24e2	29 01		and #$01			and 	#1
.24e4	15 60		ora $60,x			ora 	esInt3,x
.24e6	d0 14		bne $24fc			bne 	CVWValue
.24e8	b5 48		lda $48,x			lda 	esInt0,x				; set address up
.24ea	8d 20 9f	sta $9f20			sta 	$9F20
.24ed	b5 50		lda $50,x			lda 	esInt1,x
.24ef	8d 21 9f	sta $9f21			sta	 	$9F21
.24f2	b5 58		lda $58,x			lda 	esInt2,x
.24f4	29 01		and #$01			and 	#1
.24f6	09 10		ora #$10			ora 	#$10 				; step 1.
.24f8	8d 22 9f	sta $9f22			sta 	$9F22
.24fb	60		rts				rts
.24fc					CVWValue:
.24fc	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.24fe	20 37 22	jsr $2237		jsr	errorHandler
.2501					Command_VPeek:
.2501	38		sec				sec 						; one byte , CS
.2502	b0 01		bcs $2505			bcs 	CmdVideoRead
.2504					Command_VDeek:
.2504	18		clc				clc 						; two bytes, CC
.2505					CmdVideoRead:
>2505	db						.byte 	$DB
.2506	08		php				php 						; save action on stack.
.2507	aa		tax				tax 						; save stack position
.2508	20 b5 24	jsr $24b5			jsr 	XEvaluateInteger 	; address
.250b	20 6e 21	jsr $216e			jsr 	CheckRightParen 	; closing right bracket.
.250e	20 e0 24	jsr $24e0			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2511	a9 00		lda #$00			lda 	#0 					; zero the return value
.2513	95 60		sta $60,x			sta 	esInt3,x
.2515	95 58		sta $58,x			sta 	esInt2,x
.2517	95 50		sta $50,x			sta 	esInt1,x
.2519	ad 23 9f	lda $9f23			lda 	$9F23
.251c	95 48		sta $48,x			sta 	esInt0,x
.251e	28		plp				plp
.251f	b0 05		bcs $2526			bcs 	_CVRExit
.2521	ad 23 9f	lda $9f23			lda 	$9F23
.2524	95 50		sta $50,x			sta 	esInt1,x
.2526					_CVRExit:
.2526	8a		txa				txa 						; return X position.
.2527	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2528					section_end_extension:
.2528					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2528					floatingpointHandler:
.2528	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.252a	20 37 22	jsr $2237		jsr	errorHandler

;******  Return to file: basic.asm

.252d					section_end_floatingpoint:
.252d					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.252d					interactionHandler:
.252d	7c 30 25	jmp ($2530,x)			jmp 	(interactionVectors,x)
.2530					interactionVectors:

;******  Return to file: basic.asm

.2530					section_end_interaction:
.2530					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2530					StringChrs:
.2530	aa		tax				tax 								; set up stack
.2531	a9 02		lda #$02			lda 	#2
.2533	20 ea 25	jsr $25ea			jsr 	AllocateSoftString
.2536	98		tya				tya
.2537	20 10 26	jsr $2610			jsr 	WriteSoftString
.253a	20 3f 25	jsr $253f			jsr 	ReturnSoftString
.253d	8a		txa				txa
.253e	60		rts				rts
.253f					ReturnSoftString:
.253f	a5 7a		lda $7a				lda 	softMemAlloc
.2541	95 48		sta $48,x			sta 	esInt0,x
.2543	a5 7b		lda $7b				lda 	softMemAlloc+1
.2545	95 50		sta $50,x			sta 	esInt1,x
.2547	a9 00		lda #$00			lda 	#0
.2549	95 58		sta $58,x			sta 	esInt2,x
.254b	95 60		sta $60,x			sta 	esInt3,x
.254d	a9 40		lda #$40			lda 	#$40
.254f	95 40		sta $40,x			sta 	esType,x
.2551	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2552					STRCompare:
.2552	48		pha				pha 								; save A
.2553	aa		tax				tax 								; put stack pos in X
.2554	98		tya				tya
.2555	48		pha				pha
.2556	20 8a 25	jsr $258a			jsr 	CopyStringPair
.2559	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.255b	b1 04		lda ($04),y			lda 	(temp0),y
.255d	d1 06		cmp ($06),y			cmp 	(temp1),y
.255f	90 02		bcc $2563			bcc 	_SCNotSmaller
.2561	b1 06		lda ($06),y			lda 	(temp1),y
.2563					_SCNotSmaller:
.2563	aa		tax				tax 								; put that in X. We compare this many chars first.
.2564					_SCCompareLoop:
.2564	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2566	f0 0c		beq $2574			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2568	ca		dex				dex 								; decrement chars to compare.
.2569	c8		iny				iny 								; move to next character
.256a	38		sec				sec 								; calculate s1[y]-s2[y]
.256b	b1 04		lda ($04),y			lda 	(temp0),y
.256d	f1 06		sbc ($06),y			sbc 	(temp1),y
.256f	d0 0a		bne $257b			bne 	_SCReturnResult 			; if different return sign of A
.2571	4c 64 25	jmp $2564			jmp 	_SCCompareLoop
.2574					_SCSameToEndShortest
.2574	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2576	38		sec				sec
.2577	b1 04		lda ($04),y			lda 	(temp0),y
.2579	f1 06		sbc ($06),y			sbc 	(temp1),y
.257b					_SCReturnResult:
.257b	08		php				php 								; set return to zero preserving PSW.
.257c	a2 00		ldx #$00			ldx 	#0
.257e	28		plp				plp
.257f	f0 05		beq $2586			beq 	_SCExit 					; two values equal, then exit
.2581	ca		dex				dex 								; X = $FF
.2582	90 02		bcc $2586			bcc 	_SCExit 					; if 1st < 2nd then -1
.2584	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2586					_SCExit:
.2586	68		pla				pla
.2587	a8		tay				tay
.2588	68		pla				pla
.2589	60		rts				rts
.258a					CopyStringPair:
.258a	b5 49		lda $49,x			lda 	esInt0+1,x
.258c	85 06		sta $06				sta 	temp1
.258e	b5 51		lda $51,x			lda 	esInt1+1,x
.2590	85 07		sta $07				sta 	temp1+1
.2592					CopyStringTop:
.2592	b5 48		lda $48,x			lda 	esInt0,x
.2594	85 04		sta $04				sta 	temp0
.2596	b5 50		lda $50,x			lda 	esInt1,x
.2598	85 05		sta $05				sta 	temp0+1
.259a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.259b					StringConcat:
.259b	aa		tax				tax									; stack pos in X
.259c	98		tya				tya
.259d	48		pha				pha
.259e	20 8a 25	jsr $258a			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.25a1	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.25a2	a0 00		ldy #$00			ldy 	#0
.25a4	b1 04		lda ($04),y			lda 	(temp0),y
.25a6	71 06		adc ($06),y			adc 	(temp1),y
.25a8	b0 1c		bcs $25c6			bcs 	_SCError 					; just too many characters here.
.25aa	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.25ac	b0 18		bcs $25c6			bcs 	_SCError
.25ae	20 ea 25	jsr $25ea			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.25b1	20 e1 25	jsr $25e1			jsr 	CopySoftToStack 			; copy that to the stack.
.25b4	20 cb 25	jsr $25cb			jsr 	SCCopyTemp0 				; copy temp0
.25b7	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.25b9	85 04		sta $04				sta 	temp0
.25bb	a5 07		lda $07				lda 	temp1+1
.25bd	85 05		sta $05				sta 	temp0+1
.25bf	20 cb 25	jsr $25cb			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.25c2	68		pla				pla
.25c3	a8		tay				tay
.25c4	8a		txa				txa 								; and A
.25c5	60		rts				rts
.25c6					_SCError:
.25c6	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.25c8	20 37 22	jsr $2237		jsr	errorHandler
.25cb					SCCopyTemp0:
.25cb	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.25cd	b1 04		lda ($04),y			lda 	(temp0),y
.25cf	85 08		sta $08				sta 	temp2
.25d1					_SCCopyLoop:
.25d1	a5 08		lda $08				lda 	temp2 						; done the lot
.25d3	f0 0b		beq $25e0			beq 	_SCCopyExit
.25d5	c6 08		dec $08				dec 	temp2
.25d7	c8		iny				iny 								; get next char
.25d8	b1 04		lda ($04),y			lda 	(temp0),y
.25da	20 10 26	jsr $2610			jsr 	WriteSoftString 			; write to soft string.
.25dd	4c d1 25	jmp $25d1			jmp 	_SCCopyLoop
.25e0					_SCCopyExit:
.25e0	60		rts				rts
.25e1					CopySoftToStack:
.25e1	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.25e3	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.25e5	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.25e7	95 50		sta $50,x			sta 	esInt1,x
.25e9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.25ea					AllocateSoftString:
.25ea	85 0c		sta $0c				sta 	tempShort 					; save count
.25ec	98		tya				tya
.25ed	48		pha				pha
.25ee	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.25f0	d0 09		bne $25fb			bne 	_ASSDone
.25f2	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.25f4	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.25f6	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.25f8	88		dey				dey
.25f9	84 7b		sty $7b				sty 	softMemAlloc+1
.25fb					_ASSDone:
.25fb	38		sec				sec 								; allocate downwards enough memory
.25fc	a5 7a		lda $7a				lda 	softMemAlloc
.25fe	e5 0c		sbc $0c				sbc 	tempShort
.2600	85 7a		sta $7a				sta 	softMemAlloc
.2602	a5 7b		lda $7b				lda 	softMemAlloc+1
.2604	e9 00		sbc #$00			sbc 	#0
.2606	85 7b		sta $7b				sta 	softMemAlloc+1
.2608	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.260a	a8		tay				tay
.260b	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.260d	68		pla				pla
.260e	a8		tay				tay
.260f	60		rts				rts
.2610					WriteSoftString:
.2610	84 0c		sty $0c				sty 	tempShort 					; save Y
.2612	48		pha				pha
.2613	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2615	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2617	18		clc				clc
.2618	69 01		adc #$01			adc 	#1
.261a	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.261c	a8		tay				tay 								; pointer in Y
.261d	68		pla				pla 								; get char and write.
.261e	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2620	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.2622	60		rts				rts
.2623					StrClone:
.2623	aa		tax				tax 								; set up stack.
.2624	98		tya				tya
.2625	48		pha				pha
.2626	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2628	b1 04		lda ($04),y			lda 	(temp0),y
.262a	18		clc				clc
.262b	69 01		adc #$01			adc 	#1
.262d	20 ea 25	jsr $25ea			jsr 	AllocateSoftString 			; allocate soft memory
.2630	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2632	95 48		sta $48,x			sta 	esInt0,x
.2634	a5 7b		lda $7b				lda 	softMemAlloc+1
.2636	95 50		sta $50,x			sta 	esInt1,x
.2638	a9 00		lda #$00			lda 	#0
.263a	95 58		sta $58,x			sta 	esInt2,x
.263c	95 60		sta $60,x			sta 	esInt3,x
.263e	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2640	95 40		sta $40,x			sta 	esType,x
.2642	20 cb 25	jsr $25cb			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2645	68		pla				pla
.2646	a8		tay				tay
.2647	8a		txa				txa
.2648	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2649					CaseString:
.2649	48		pha				pha 								; save A and copy to X
.264a	aa		tax				tax
.264b	98		tya				tya
.264c	48		pha				pha
.264d	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; target string -> temp0
.2650	a0 00		ldy #$00			ldy 	#0
.2652	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.2654	18		clc				clc
.2655	69 01		adc #$01			adc 	#1 							; one more for length byte
.2657	20 ea 25	jsr $25ea			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.265a	20 e1 25	jsr $25e1			jsr 	CopySoftToStack 			; copy that to the stack.
.265d	a0 00		ldy #$00			ldy 	#0
.265f	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.2661	aa		tax				tax
.2662					_CSCopy:
.2662	e0 00		cpx #$00			cpx 	#0
.2664	f0 24		beq $268a			beq 	_CSExit
.2666	ca		dex				dex
.2667	c8		iny				iny
.2668	68		pla				pla 								; check direction
.2669	48		pha				pha
.266a	f0 0c		beq $2678			beq 	_CSUpper
.266c	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.266e	c9 41		cmp #$41			cmp 	#"A"
.2670	90 12		bcc $2684			bcc 	_CSWrite
.2672	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2674	b0 0e		bcs $2684			bcs 	_CSWrite
.2676	90 0a		bcc $2682			bcc 	_CSFlipWrite
.2678					_CSUpper:
.2678	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.267a	c9 61		cmp #$61			cmp 	#"a"
.267c	90 06		bcc $2684			bcc 	_CSWrite
.267e	c9 7b		cmp #$7b			cmp 	#"z"+1
.2680	b0 02		bcs $2684			bcs 	_CSWrite
.2682					_CSFlipWrite:
.2682	49 20		eor #$20			eor 	#"A"^"a"
.2684					_CSWrite:
.2684	20 10 26	jsr $2610			jsr 	WriteSoftString
.2687	4c 62 26	jmp $2662			jmp 	_CSCopy
.268a					_CSExit:
.268a	68		pla				pla
.268b	a8		tay				tay
.268c	68		pla				pla
.268d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.268e					StringSubstring:
.268e	48		pha				pha
.268f	aa		tax				tax 								; access stack.
.2690	98		tya				tya
.2691	48		pha				pha
.2692	20 92 25	jsr $2592			jsr 	CopyStringTop 				; point temp0 to the string.
.2695	a0 00		ldy #$00			ldy 	#0 							; get length.
.2697	b1 04		lda ($04),y			lda 	(temp0),Y
.2699	85 06		sta $06				sta 	temp1
.269b	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.269d	c5 06		cmp $06				cmp 	temp1 						;
.269f	f0 02		beq $26a3			beq 	_SSBOkay
.26a1	b0 2a		bcs $26cd			bcs 	_SSBReturnNull
.26a3					_SSBOkay:
.26a3	a5 06		lda $06				lda 	temp1 						; get the total length +1
.26a5	18		clc				clc
.26a6	69 01		adc #$01			adc 	#1
.26a8	38		sec				sec
.26a9	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.26ab	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.26ad	90 02		bcc $26b1			bcc		_SSBTrunc
.26af	b5 4a		lda $4a,x			lda 	esInt0+2,x
.26b1					_SSBTrunc:
.26b1	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.26b3	18		clc				clc
.26b4	69 01		adc #$01			adc 	#1 							; add 1
.26b6	20 ea 25	jsr $25ea			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.26b9	20 e1 25	jsr $25e1			jsr 	CopySoftToStack 			; copy that to the stack.
.26bc	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.26be					_SSBCopyLoop:
.26be	a5 07		lda $07				lda 	temp1+1 					; done them all
.26c0	f0 0e		beq $26d0			beq 	_SSBExit
.26c2	c6 07		dec $07				dec 	temp1+1
.26c4	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.26c6	20 10 26	jsr $2610			jsr 	WriteSoftString
.26c9	c8		iny				iny
.26ca	4c be 26	jmp $26be			jmp 	_SSBCopyLoop
.26cd					_SSBReturnNull:
.26cd	20 d4 26	jsr $26d4			jsr 	ReturnNull
.26d0					_SSBExit:
.26d0	68		pla				pla
.26d1	a8		tay				tay
.26d2	68		pla				pla
.26d3	60		rts				rts
.26d4					ReturnNull:
.26d4	a9 00		lda #$00			lda 	#0 							; clear null string
.26d6	8d cc 0a	sta $0acc			sta 	NullString
.26d9	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.26db	95 48		sta $48,x			sta 	esInt0,x
.26dd	a9 0a		lda #$0a			lda 	#NullString >> 8
.26df	95 50		sta $50,x			sta 	esInt1,x
.26e1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0aff					srcStrLen:
>0aff							.fill 	1
.26e2					StringWrite:
.26e2	aa		tax				tax
.26e3	48		pha				pha
.26e4	98		tya				tya
.26e5	48		pha				pha
.26e6	20 0d 27	jsr $270d			jsr 	CheckOverwriteCurrent
.26e9	b0 0d		bcs $26f8			bcs		_SWCopyCurrent
.26eb	20 4b 27	jsr $274b			jsr 	RequiresConcretion
.26ee	90 0e		bcc $26fe			bcc 	_SWWriteReference
.26f0	20 ae 27	jsr $27ae			jsr 	CheckSpecialConcretion
.26f3	b0 09		bcs $26fe			bcs 	_SWWriteReference
.26f5	20 5f 27	jsr $275f			jsr 	AllocateHardMemory
.26f8					_SWCopyCurrent:
.26f8	20 92 27	jsr $2792			jsr 	CopyStringToHardMemory
.26fb	4c 09 27	jmp $2709			jmp 	_SWExit
.26fe					_SWWriteReference
.26fe	a0 00		ldy #$00			ldy 	#0
.2700	a5 04		lda $04				lda 	temp0
.2702	91 06		sta ($06),y			sta 	(temp1),y
.2704	c8		iny				iny
.2705	a5 05		lda $05				lda 	temp0+1
.2707	91 06		sta ($06),y			sta 	(temp1),y
.2709					_SWExit:
.2709	68		pla				pla
.270a	a8		tay				tay
.270b	68		pla				pla
.270c	60		rts				rts
.270d					CheckOverwriteCurrent:
.270d	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.270f	b5 51		lda $51,x			lda 	esInt1+1,x
.2711	85 05		sta $05				sta 	temp0+1
.2713	b5 49		lda $49,x			lda 	esInt0+1,x
.2715	85 04		sta $04				sta 	temp0
.2717	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.2719	8d ff 0a	sta $0aff			sta 	srcStrLen
.271c	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.271e	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2720	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2722	85 07		sta $07				sta 	temp1+1
.2724	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2726	b1 06		lda ($06),y			lda 	(temp1),y
.2728	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.272a	90 1b		bcc $2747			bcc 	_COCFail 				; in hard memory.
.272c	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.272e	b1 06		lda ($06),y			lda 	(temp1),y
.2730	e9 01		sbc #$01			sbc 	#1
.2732	85 08		sta $08				sta 	temp2
.2734	c8		iny				iny
.2735	b1 06		lda ($06),y			lda 	(temp1),y
.2737	e9 00		sbc #$00			sbc 	#0
.2739	85 09		sta $09				sta 	temp2+1
.273b	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.273d	b1 08		lda ($08),y			lda 	(temp2),y
.273f	38		sec				sec  							; maximum character capacity.
.2740	e9 02		sbc #$02			sbc 	#2
.2742	cd ff 0a	cmp $0aff			cmp 	srcStrLen 				; if >= the required length
.2745	b0 02		bcs $2749			bcs 	_COCCanReuse
.2747					_COCFail:
.2747	18		clc				clc
.2748	60		rts				rts
.2749					_COCCanReuse:
.2749	38		sec				sec
.274a	60		rts				rts
.274b					RequiresConcretion:
.274b	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.274d	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.274f	b0 0a		bcs $275b			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2751	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2753	f0 08		beq $275d			beq 	_RCFail 				; if not, this cannot be soft memory.
.2755	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2757	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2759	90 02		bcc $275d			bcc 	_RCFail 				; so concreting
.275b					_RCSucceed:
.275b	38		sec				sec
.275c	60		rts				rts
.275d					_RCFail:
.275d	18		clc				clc
.275e	60		rts				rts
.275f					AllocateHardMemory:
.275f	98		tya				tya
.2760	48		pha				pha
.2761	ad ff 0a	lda $0aff			lda 	srcStrLen 				; characters in string
.2764	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2766	b0 04		bcs $276c			bcs 	_AHMSetMax 				; max out that amount.
.2768	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.276a	90 02		bcc $276e			bcc 	_AHMIsOkay
.276c					_AHMSetMax:
.276c	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.276e					_AHMIsOkay:
.276e	48		pha				pha
.276f	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2771	38		sec				sec  							; and copy result to TOS as target address.
.2772	65 0d		adc $0d				adc 	highMemory
.2774	85 0d		sta $0d				sta 	highMemory
.2776	a5 0e		lda $0e				lda 	highMemory+1
.2778	69 ff		adc #$ff			adc 	#$FF
.277a	85 0e		sta $0e				sta 	highMemory+1
.277c	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.277e	68		pla				pla 							; get the total size of the storage block
.277f	91 0d		sta ($0d),y			sta 	(highMemory),y
.2781	18		clc				clc
.2782	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2784	69 01		adc #$01			adc 	#1
.2786	91 06		sta ($06),y			sta 	(temp1),y
.2788	a5 0e		lda $0e				lda 	highMemory+1
.278a	69 00		adc #$00			adc 	#0
.278c	c8		iny				iny
.278d	91 06		sta ($06),y			sta 	(temp1),y
.278f	68		pla				pla
.2790	a8		tay				tay
.2791	60		rts				rts
.2792					CopyStringToHardMemory:
.2792	98		tya				tya
.2793	48		pha				pha
.2794	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2796	b1 06		lda ($06),y			lda 	(temp1),y
.2798	85 08		sta $08				sta 	temp2
.279a	c8		iny				iny
.279b	b1 06		lda ($06),y			lda 	(temp1),y
.279d	85 09		sta $09				sta 	temp2+1
.279f	ac ff 0a	ldy $0aff			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.27a2					_CSTHMLoop:
.27a2	b1 04		lda ($04),y			lda 	(temp0),y
.27a4	91 08		sta ($08),y			sta 	(temp2),y
.27a6	88		dey				dey
.27a7	c0 ff		cpy #$ff			cpy 	#$FF
.27a9	d0 f7		bne $27a2			bne 	_CSTHMLoop
.27ab	68		pla				pla
.27ac	a8		tay				tay
.27ad	60		rts				rts
.27ae					CheckSpecialConcretion:
.27ae	ad ff 0a	lda $0aff			lda 	srcStrLen 				; check string is null.
.27b1	f0 02		beq $27b5			beq 	_CSCNullString
.27b3	18		clc				clc
.27b4	60		rts				rts
.27b5					_CSCNullString:
.27b5	a9 00		lda #$00			lda 	#0
.27b7	8d cc 0a	sta $0acc			sta 	NullString
.27ba	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.27bc	85 04		sta $04				sta 	temp0
.27be	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.27c0	85 05		sta $05				sta 	1+(temp0)
.27c2	38		sec				sec
.27c3	60		rts				rts

;******  Return to file: string/string.asm

.27c4					stringHandler:
.27c4	7c c7 27	jmp ($27c7,x)			jmp 	(stringVectors,x)
.27c7					stringVectors:
>27c7	30 25					.word StringChrs           ; index 0
>27c9	23 26					.word StrClone             ; index 2
>27cb	9b 25					.word StringConcat         ; index 4
>27cd	52 25					.word STRCompare           ; index 6
>27cf	49 26					.word CaseString           ; index 8
>27d1	8e 26					.word StringSubstring      ; index 10
>27d3	e2 26					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.27d5					section_end_string:
.27d5					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.27d5					tokeniserHandler:
.27d5	7c d8 27	jmp ($27d8,x)			jmp 	(tokeniserVectors,x)
.27d8					tokeniserVectors:

;******  Return to file: basic.asm

.27d8					section_end_tokeniser:
.27d8					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0b00					varHash:
>0b00							.fill	1
.0b01					varType:
>0b01							.fill 	1
.0b02					varEnd:
>0b02							.fill 	1
.007c					hashList:
>007c							.fill 	2
.27d8					AccessVariable:
.27d8	aa		tax				tax 								; stack in X
.27d9	c8		iny				iny
.27da	b1 02		lda ($02),y			lda 	(codePtr),y
.27dc	88		dey				dey
.27dd	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.27df	d0 15		bne $27f6			bne 	_AVLong
.27e1	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.27e3	38		sec				sec 	 							; make it 0-25
.27e4	e9 01		sbc #$01			sbc 	#1
.27e6	0a		asl a				asl 	a 							; x 4 is LSB of address
.27e7	0a		asl a				asl 	a
.27e8	95 48		sta $48,x			sta 	esInt0,x
.27ea	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.27ec	95 50		sta $50,x			sta 	esInt1,x
.27ee	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.27f0	95 40		sta $40,x			sta 	esType,x
.27f2	c8		iny				iny 								; skip over the variable reference in the code.
.27f3	c8		iny				iny
.27f4	8a		txa				txa 								; stack in A to return.
.27f5	60		rts				rts
.27f6					_AVLong:
.27f6	8a		txa				txa
.27f7	48		pha				pha
.27f8	20 3f 28	jsr $283f			jsr 	AccessSetup 				; set up the basic stuff.
.27fb	20 33 2a	jsr $2a33			jsr 	FindVariable 				; does the variable exist already
.27fe	b0 0e		bcs $280e			bcs 	_AVFound
.2800	ad 01 0b	lda $0b01			lda 	varType 					; is the variable type an array
.2803	4a		lsr a				lsr 	a
.2804	90 05		bcc $280b			bcc 	_AVCanCreate
.2806	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.2808	20 37 22	jsr $2237		jsr	errorHandler
.280b					_AVCanCreate:
.280b	20 f2 28	jsr $28f2			jsr 	CreateVariable 				; no, create it.
.280e					_AVFound:
.280e	68		pla				pla
.280f	aa		tax				tax
.2810	18		clc				clc 								; copy temp0 (variable record address)
.2811	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.2813	69 05		adc #$05			adc 	#5
.2815	95 48		sta $48,x			sta 	esInt0,x
.2817	a5 05		lda $05				lda 	temp0+1
.2819	69 00		adc #$00			adc 	#0
.281b	95 50		sta $50,x			sta 	esInt1,x
.281d	a9 00		lda #$00			lda 	#0
.281f	95 58		sta $58,x			sta 	esInt2,x
.2821	95 60		sta $60,x			sta 	esInt3,x
.2823	ac 01 0b	ldy $0b01			ldy 	varType 					; get the type ID from the type.
.2826	b9 ff 27	lda $27ff,y			lda 	_AVTypeTable-$3A,y
.2829	95 40		sta $40,x			sta 	esType,x
.282b	ac 02 0b	ldy $0b02			ldy 	varEnd 						; restore Y
.282e	ad 01 0b	lda $0b01			lda 	VarType 					; get variable type, put LSB into C
.2831	4a		lsr a				lsr 	a
.2832	90 03		bcc $2837			bcc 	_AVNotArray
.2834	20 7c 28	jsr $287c			jsr 	AccessArray 				; array lookup. if LSB was set.
.2837					_AVNotArray:
.2837	8a		txa				txa 								; return stack in A and return
.2838	60		rts				rts
.2839					_AVTypeTable:
>2839	80 80						.byte 	$80,$80						; integer
>283b	c0 c0						.byte 	$C0,$C0 					; string
>283d	81 81						.byte 	$81,$81 					; float
.283f					AccessSetup:
.283f	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.2841	8d 00 0b	sta $0b00			sta 	varHash
.2844	98		tya				tya
.2845	48		pha				pha
.2846	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.2848	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.284a	b0 0b		bcs $2857			bcs 	_ASComplete
.284c	18		clc				clc 								; add to the hash. Might improve this.
.284d	6d 00 0b	adc $0b00			adc 	varHash
.2850	8d 00 0b	sta $0b00			sta 	varHash
.2853	c8		iny				iny 								; next character
.2854	4c 46 28	jmp $2846			jmp 	_ASLoop
.2857					_ASComplete:
.2857	8d 01 0b	sta $0b01			sta 	varType 					; save variable type byte
.285a	c8		iny				iny
.285b	8c 02 0b	sty $0b02			sty 	varEnd 						; save the ending position.
.285e	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.285f	e9 3a		sbc #$3a			sbc 	#$3A
.2861	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.2862	0a		asl a				asl 	a
.2863	0a		asl a				asl 	a
.2864	0a		asl a				asl 	a 							; 2 bytes/word
.2865	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.2867	ad 00 0b	lda $0b00			lda 	varHash 					; get hash
.286a	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.286c	0a		asl a				asl  	a 							; x 2 (for word) and CC
.286d	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.286f	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.2871	85 7c		sta $7c				sta 	hashList
.2873	a9 0a		lda #$0a			lda 	#hashTables >> 8
.2875	69 00		adc #$00			adc 	#0
.2877	85 7d		sta $7d				sta 	hashList+1
.2879	68		pla				pla
.287a	a8		tay				tay
.287b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.287c					AccessArray:
.287c	e8		inx				inx
.287d	8a		txa				txa
.287e	a2 04		ldx #$04		ldx	#4
.2880	20 e4 21	jsr $21e4		jsr	mainHandler
.2883	aa		tax				tax
.2884	ca		dex				dex
.2885	a2 00		ldx #$00		ldx	#0
.2887	20 e4 21	jsr $21e4		jsr	mainHandler
.288a	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.288c	15 59		ora $59,x			ora 	esInt2+1,x
.288e	d0 33		bne $28c3			bne 	_AABadIndex
.2890	98		tya				tya
.2891	48		pha				pha
.2892	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.2894	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.2896	b5 50		lda $50,x			lda 	esInt1,x
.2898	85 05		sta $05				sta 	temp0+1
.289a	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.289c	b5 49		lda $49,x			lda 	esInt0+1,x
.289e	d1 04		cmp ($04),y			cmp 	(temp0),y
.28a0	c8		iny				iny
.28a1	b5 51		lda $51,x			lda 	esInt1+1,x
.28a3	f1 04		sbc ($04),y			sbc 	(temp0),y
.28a5	b0 1c		bcs $28c3			bcs 	_AABadIndex 				; if >= then fail.
.28a7	e8		inx				inx 								; point to index
.28a8	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.28aa	b1 04		lda ($04),y			lda 	(temp0),y
.28ac	20 c8 28	jsr $28c8			jsr 	MultiplyTOSByA 				; specialist multiplier.
.28af	ca		dex				dex
.28b0	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.28b2	18		clc				clc
.28b3	b5 49		lda $49,x			lda 	esInt0+1,x
.28b5	71 04		adc ($04),y			adc 	(temp0),y
.28b7	95 48		sta $48,x			sta 	esInt0,x
.28b9	b5 51		lda $51,x			lda 	esInt1+1,x
.28bb	c8		iny				iny
.28bc	71 04		adc ($04),y			adc 	(temp0),y
.28be	95 50		sta $50,x			sta 	esInt1,x
.28c0	68		pla				pla
.28c1	a8		tay				tay
.28c2	60		rts				rts
.28c3					_AABadIndex:
.28c3	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.28c5	20 37 22	jsr $2237		jsr	errorHandler
.28c8					MultiplyTOSByA:
.28c8	48		pha				pha
.28c9	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.28cb	85 06		sta $06				sta 	temp1
.28cd	b5 50		lda $50,x			lda 	esInt1,x
.28cf	85 07		sta $07				sta 	temp1+1
.28d1	68		pla				pla
.28d2	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.28d4	36 50		rol $50,x			rol 	esInt1,x
.28d6	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.28d8	f0 17		beq $28f1			beq 	_MTBAExit
.28da	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.28dc	d0 0f		bne $28ed			bne 	_MTBANotFloat
.28de	48		pha				pha
.28df	18		clc				clc 								; so this will make it x 3
.28e0	b5 48		lda $48,x			lda 	esInt0,x
.28e2	65 06		adc $06				adc 	temp1
.28e4	95 48		sta $48,x			sta 	esInt0,x
.28e6	b5 50		lda $50,x			lda 	esInt1,x
.28e8	65 07		adc $07				adc 	temp1+1
.28ea	95 50		sta $50,x			sta 	esInt1,x
.28ec	68		pla				pla
.28ed					_MTBANotFloat:
.28ed	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.28ef	36 50		rol $50,x			rol 	esInt1,x
.28f1					_MTBAExit:
.28f1	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.28f2					CreateVariable:
.28f2	98		tya				tya 								; push Y on the stack twice.
.28f3	48		pha				pha
.28f4	48		pha				pha
.28f5	ae 01 0b	ldx $0b01			ldx 	varType 					; get var type 0-5
.28f8	bd 03 29	lda $2903,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.28fb	48		pha				pha 								; save length
.28fc	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.28fe	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.2900	a5 10		lda $10				lda 	lowMemory+1
.2902	85 05		sta $05				sta 	temp0+1
.2904	68		pla				pla 								; get length
.2905	20 73 10	jsr $1073			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.2908	ad 00 0b	lda $0b00			lda 	varHash 					; store hash at offset 4.
.290b	a0 04		ldy #$04			ldy 	#4
.290d	91 04		sta ($04),y			sta 	(temp0),y
.290f	68		pla				pla 								; offset, work out where the variable name is.
.2910	18		clc				clc
.2911	65 02		adc $02				adc 	codePtr
.2913	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2915	91 04		sta ($04),y			sta 	(temp0),y
.2917	a5 03		lda $03				lda 	codePtr+1
.2919	69 00		adc #$00			adc 	#0
.291b	c8		iny				iny
.291c	91 04		sta ($04),y			sta 	(temp0),y
.291e	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.2920	b1 7c		lda ($7c),y			lda 	(hashList),y
.2922	91 04		sta ($04),y			sta 	(temp0),y
.2924	c8		iny				iny
.2925	b1 7c		lda ($7c),y			lda 	(hashList),y
.2927	91 04		sta ($04),y			sta 	(temp0),y
.2929	a5 05		lda $05				lda 	temp0+1 					; set new link
.292b	91 7c		sta ($7c),y			sta 	(hashList),y
.292d	88		dey				dey
.292e	a5 04		lda $04				lda 	temp0
.2930	91 7c		sta ($7c),y			sta 	(hashList),y
.2932	ad 01 0b	lda $0b01			lda 	varType 					; type in A
.2935	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.2937	20 43 29	jsr $2943			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.293a	68		pla				pla
.293b	a8		tay				tay
.293c	60		rts				rts
>293d	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>293f	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>2941	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.2943					ZeroTemp0Y:
.2943	4a		lsr a				lsr 	a 							; bit 0 in carry
.2944	0a		asl a				asl 	a
.2945	b0 19		bcs $2960			bcs 	_ZTExit 					; we don't initialise arrays.
.2947	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.2949	f0 16		beq $2961			beq 	_ZTWriteNullString 			; write "" string
.294b	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.294d	f0 22		beq $2971			beq 	_ZTWriteFloat
.294f	98		tya				tya
.2950	48		pha				pha
.2951	a9 00		lda #$00			lda 	#0
.2953	91 04		sta ($04),y			sta 	(temp0),y
.2955	c8		iny				iny
.2956	91 04		sta ($04),y			sta 	(temp0),y
.2958	c8		iny				iny
.2959	91 04		sta ($04),y			sta 	(temp0),y
.295b	c8		iny				iny
.295c	91 04		sta ($04),y			sta 	(temp0),y
.295e	68		pla				pla
.295f	a8		tay				tay
.2960					_ZTExit:
.2960	60		rts				rts
.2961					_ZTWriteNullString:
.2961	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.2963	8d cc 0a	sta $0acc			sta 	NullString
.2966	a9 cc		lda #$cc			lda 	#NullString & $FF
.2968	91 04		sta ($04),y			sta 	(temp0),y
.296a	a9 0a		lda #$0a			lda 	#NullString >> 8
.296c	c8		iny				iny
.296d	91 04		sta ($04),y			sta 	(temp0),y
.296f	88		dey				dey
.2970	60		rts				rts
.2971					_ZTWriteFloat:
.2971	8a		txa				txa
.2972	48		pha				pha
.2973	a2 1e		ldx #$1e		ldx	#30
.2975	20 28 25	jsr $2528		jsr	floatingpointHandler
.2978	68		pla				pla
.2979	aa		tax				tax
.297a	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.297b					CreateArray:
.297b	20 3f 28	jsr $283f			jsr 	AccessSetup 				; set up the basic stuff.
.297e	ad 01 0b	lda $0b01			lda 	varType 					; is the variable type an array
.2981	4a		lsr a				lsr 	a
.2982	90 3f		bcc $29c3			bcc 	_CANotArray 				; no, cause an error.
.2984	20 33 2a	jsr $2a33			jsr 	FindVariable 				; does the variable exist already
.2987	b0 35		bcs $29be			bcs 	_CAFound 					; cannot redefine it.
.2989	20 f2 28	jsr $28f2			jsr 	CreateVariable 				; create the variable entry.
.298c	ac 02 0b	ldy $0b02			ldy 	varEnd 						; point Y to the end of the variable entry.
.298f	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.2991	48		pha				pha
.2992	a5 05		lda $05				lda 	temp0+1
.2994	48		pha				pha
.2995	ad 01 0b	lda $0b01			lda 	varType 					; push variable type on the stack.
.2998	48		pha				pha
.2999	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.299b	a2 04		ldx #$04		ldx	#4
.299d	20 e4 21	jsr $21e4		jsr	mainHandler
.29a0	a2 00		ldx #$00		ldx	#0
.29a2	20 e4 21	jsr $21e4		jsr	mainHandler
.29a5	68		pla				pla 		 						; restore type and position.
.29a6	8d 01 0b	sta $0b01			sta 	varType
.29a9	68		pla				pla
.29aa	85 05		sta $05				sta 	temp0+1
.29ac	68		pla				pla
.29ad	85 04		sta $04				sta 	temp0
.29af	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.29b1	29 e0		and #$e0			and 	#$E0
.29b3	05 58		ora $58				ora 	esInt2
.29b5	05 60		ora $60				ora 	esInt3
.29b7	f0 0f		beq $29c8			beq 	_CASizeOk
.29b9					_CASize:
.29b9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.29bb	20 37 22	jsr $2237		jsr	errorHandler
.29be					_CAFound:
.29be	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.29c0	20 37 22	jsr $2237		jsr	errorHandler
.29c3					_CANotArray:
.29c3	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.29c5	20 37 22	jsr $2237		jsr	errorHandler
.29c8					_CASizeOk:
.29c8	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.29ca	d0 02		bne $29ce			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.29cc	e6 49		inc $49				inc 	esInt0+1
.29ce					_CANoCarry:
.29ce	98		tya				tya
.29cf	48		pha				pha
.29d0	a0 05		ldy #$05			ldy 	#5
.29d2	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.29d4	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.29d6	c8		iny				iny
.29d7	a5 10		lda $10				lda 	lowMemory+1
.29d9	91 04		sta ($04),y			sta 	(temp0),y
.29db	c8		iny				iny
.29dc	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.29de	91 04		sta ($04),y			sta 	(temp0),y
.29e0	c8		iny				iny
.29e1	a5 50		lda $50				lda 	esInt1
.29e3	91 04		sta ($04),y			sta 	(temp0),y
.29e5	c8		iny				iny
.29e6	ae 01 0b	ldx $0b01			ldx 	varType 					; get the length per element
.29e9	bd f1 29	lda $29f1,x			lda 	_CAActualSize-$3A-1,x
.29ec	91 04		sta ($04),y			sta 	(temp0),y
.29ee	aa		tax				tax 								; save size in X
.29ef	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.29f1	85 04		sta $04				sta 	temp0
.29f3	a5 10		lda $10				lda 	lowMemory+1
.29f5	85 05		sta $05				sta 	temp0+1
.29f7	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.29f9	85 06		sta $06				sta 	temp1
.29fb	85 07		sta $07				sta 	temp1+1
.29fd					_CAInitialiseArray:
.29fd	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.29ff	ad 01 0b	lda $0b01			lda 	varType 					; base type of array in A.
.2a02	29 fe		and #$fe			and 	#$FE
.2a04	20 43 29	jsr $2943			jsr 	ZeroTemp0Y
.2a07	8a		txa				txa 								; add X to temp0, also updating lowMemory
.2a08	18		clc				clc
.2a09	65 04		adc $04				adc 	temp0
.2a0b	85 04		sta $04				sta 	temp0
.2a0d	85 0f		sta $0f				sta 	lowMemory
.2a0f	a5 05		lda $05				lda 	temp0+1
.2a11	69 00		adc #$00			adc 	#0
.2a13	85 05		sta $05				sta 	temp0+1
.2a15	85 10		sta $10				sta 	lowMemory+1
.2a17	e6 06		inc $06				inc 	temp1 						; bump the counter.
.2a19	d0 02		bne $2a1d			bne 	_CAIANoCarry
.2a1b	e6 07		inc $07				inc 	temp1+1
.2a1d					_CAIANoCarry:
.2a1d	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.2a1f	c5 06		cmp $06				cmp 	temp1
.2a21	d0 da		bne $29fd			bne 	_CAInitialiseArray
.2a23	a5 50		lda $50				lda 	esInt1
.2a25	c5 07		cmp $07				cmp 	temp1+1
.2a27	d0 d4		bne $29fd			bne 	_CAInitialiseArray
.2a29	68		pla				pla
.2a2a	a8		tay				tay
.2a2b	60		rts				rts
.2a2c					_CAActualSize:
>2a2c	04 00						.byte 	VarISize,0
>2a2e	02 00						.byte 	VarSSize,0
>2a30	06 00						.byte 	VarFSize,0
>2a32	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2a33					FindVariable:
.2a33	98		tya				tya
.2a34	48		pha				pha
.2a35	98		tya				tya 								; point temp2 to the actual name.
.2a36	18		clc				clc
.2a37	65 02		adc $02				adc 	codePtr
.2a39	85 08		sta $08				sta 	temp2
.2a3b	a5 03		lda $03				lda 	codePtr+1
.2a3d	69 00		adc #$00			adc 	#0
.2a3f	85 09		sta $09				sta 	temp2+1
.2a41	a0 00		ldy #$00			ldy 	#0
.2a43	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.2a45	85 04		sta $04				sta 	temp0
.2a47	a5 7d		lda $7d				lda 	hashList+1
.2a49	85 05		sta $05				sta 	temp0+1
.2a4b	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2a4d	b1 04		lda ($04),y			lda 	(temp0),y
.2a4f	f0 2c		beq $2a7d			beq 	_FVFail
.2a51	aa		tax				tax
.2a52	88		dey				dey		 							; get LSB
.2a53	b1 04		lda ($04),y			lda 	(temp0),y
.2a55	85 04		sta $04				sta 	temp0 						; update pointer.
.2a57	86 05		stx $05				stx 	temp0+1
.2a59	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2a5b	b1 04		lda ($04),y			lda 	(temp0),y
.2a5d	cd 00 0b	cmp $0b00			cmp 	varHash
.2a60	d0 e9		bne $2a4b			bne 	_FVNext 					; if not, no point in checking the name.
.2a62	88		dey				dey 								; copy name pointer to temp1.
.2a63	b1 04		lda ($04),y			lda 	(temp0),y
.2a65	85 07		sta $07				sta 	temp1+1
.2a67	88		dey				dey
.2a68	b1 04		lda ($04),y			lda 	(temp0),y
.2a6a	85 06		sta $06				sta 	temp1
.2a6c	a0 00		ldy #$00			ldy 	#0
.2a6e					_FVCheck:
.2a6e	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2a70	d1 08		cmp ($08),y			cmp 	(temp2),y
.2a72	d0 d7		bne $2a4b			bne 	_FVNext		 				; fail if different.
.2a74	c8		iny				iny
.2a75	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2a77	90 f5		bcc $2a6e			bcc 	_FVCheck
.2a79	68		pla				pla
.2a7a	a8		tay				tay
.2a7b	38		sec				sec
.2a7c	60		rts				rts
.2a7d					_FVFail:
.2a7d	68		pla				pla
.2a7e	a8		tay				tay
.2a7f	18		clc				clc
.2a80	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2a81					HashTableReset:
.2a81	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2a83	a9 00		lda #$00			lda 	#0
.2a85					_HTRClear:
.2a85	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2a88	ca		dex				dex
.2a89	d0 fa		bne $2a85			bne 	_HTRClear
.2a8b	60		rts				rts

;******  Return to file: variable/variable.asm

.2a8c					variableHandler:
.2a8c	7c 8f 2a	jmp ($2a8f,x)			jmp 	(variableVectors,x)
.2a8f					variableVectors:
>2a8f	d8 27					.word AccessVariable       ; index 0
>2a91	7b 29					.word CreateArray          ; index 2
>2a93	81 2a					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.2a95					section_end_variable:

;******  End of listing
