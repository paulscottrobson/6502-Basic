
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Thu Apr 08 16:04:56 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=1					cputype = 1
=1					autorun = 1
=0					coldstartnew = 0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35
.0af2					jumpVector:
>0af2							.fill 	2

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$ea					TKW_TYPE                     = $ea ; type
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$93					TKW_SOUND                    = $93 ; sound
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(
=$8f					TKW_PLAYINGLPAREN            = $8f ; playing(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	83 46						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4f		lda #$4f			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 bc 28	jsr $28bc		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 ac 13	jsr $13ac		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 e7 14	jsr $14e7		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 bc 28	jsr $28bc		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 c6 41	jsr $41c6		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 4e 4a	jsr $4a4e		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 0d 4e	jsr $4e0d		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 4e 4a	jsr $4a4e		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first character into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit 					; e.g. "INX"
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ? so it is lda (something
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A on its own. This is for ASL A
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it - this should be $3A
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1 (it may of course be absolute)
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing 				; get ,X or ,Y if present
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit 					; neither present
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX 					; decide if ,X or ,Y
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 1b 3f	jsr $3f1b		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 09 15	jsr $1509		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 1b 3f	jsr $3f1b		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X) so get the ending and error on anything else.
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 1b 3f	jsr $3f1b		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma (e.g. ,X ,Y)
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af4					finalOpcode:
>0af4							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f4 0a	sta $0af4			sta 	finalOpcode					; save opcode.
.1113	5a		phy				phy
.1114	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O (e.g. what do we display/check.)
.1117	29 02		and #$02			and 	#2
.1119	f0 2b		beq $1146			beq 	_ASMWNoEcho 				; if bit 2 zero then don't echo.
.111b	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111e	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1121	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1124	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1127	ad f4 0a	lda $0af4			lda 	finalOpcode 				; write opcode
.112a	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.112d	e0 00		cpx #$00			cpx 	#0
.112f	f0 0e		beq $113f			beq 	_ASMWEchoExit
.1131	a5 98		lda $98				lda 	esInt0
.1133	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.1136	e0 01		cpx #$01			cpx 	#1
.1138	f0 05		beq $113f			beq 	_ASMWEchoExit
.113a	a5 a0		lda $a0				lda 	esInt1
.113c	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.113f					_ASMWEchoExit:
.113f	da		phx				phx
.1140	a2 06		ldx #$06		ldx	#6
.1142	20 e7 14	jsr $14e7		jsr	deviceHandler
.1145	fa		plx				plx
.1146					_ASMWNoEcho:
.1146	ad f4 0a	lda $0af4			lda 	finalOpcode 				; opcode
.1149	20 60 11	jsr $1160			jsr 	AsmWriteByte
.114c	e0 00		cpx #$00			cpx 	#0	 						; exit if no operands
.114e	f0 0e		beq $115e			beq 	_ASMWExit
.1150	a5 98		lda $98				lda 	esInt0	 					; low byte
.1152	20 60 11	jsr $1160			jsr 	AsmWriteByte
.1155	e0 01		cpx #$01			cpx 	#1
.1157	f0 05		beq $115e			beq 	_ASMWExit
.1159	a5 a0		lda $a0				lda 	esInt1 						; high byte
.115b	20 60 11	jsr $1160			jsr 	AsmWriteByte
.115e					_ASMWExit:
.115e	7a		ply				ply
.115f	60		rts				rts
.1160					AsmWriteByte:
.1160	a0 00		ldy #$00			ldy 	#0
.1162	48		pha				pha
.1163	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1166	85 2a		sta $2a				sta 	temp0
.1168	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116b	85 2b		sta $2b				sta 	temp0+1
.116d	68		pla				pla 								; write out the byte.
.116e	91 2a		sta ($2a),y			sta 	(temp0),y
.1170	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1173	d0 03		bne $1178			bne 	_AWBNoCarry
.1175	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1178					_AWBNoCarry:
.1178	60		rts				rts
.1179					AWIWriteHexSpace:
.1179	48		pha				pha
.117a	a9 20		lda #$20			lda 	#" "
.117c	20 93 11	jsr $1193			jsr 	AWIPrintChar
.117f	68		pla				pla
.1180					AWIWriteHex:
.1180	48		pha				pha
.1181	4a		lsr a				lsr 	a
.1182	4a		lsr a				lsr 	a
.1183	4a		lsr a				lsr 	a
.1184	4a		lsr a				lsr 	a
.1185	20 89 11	jsr $1189			jsr 	AWIPrintNibble
.1188	68		pla				pla
.1189					AWIPrintNibble:
.1189	29 0f		and #$0f			and 	#15
.118b	c9 0a		cmp #$0a			cmp 	#10
.118d	90 02		bcc $1191			bcc 	_AWIPNDigit
.118f	69 06		adc #$06			adc 	#6
.1191					_AWIPNDigit:
.1191	69 30		adc #$30			adc 	#48
.1193					AWIPrintChar:
.1193	85 32		sta $32				sta 	tempShort
.1195	da		phx				phx
.1196	a5 32		lda $32				lda 	tempShort
.1198	a2 16		ldx #$16		ldx	#22
.119a	20 e7 14	jsr $14e7		jsr	deviceHandler
.119d	fa		plx				plx
.119e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af5					asmToken:
>0af5							.fill 	1
.0af6					asmMode:
>0af6							.fill 	1 							; esInt0/1
.0af7					asmBaseOpcode:
>0af7							.fill 	1
.119f					AssembleOneInstruction:
.119f	8d f5 0a	sta $0af5			sta 	asmToken 					; save the token
.11a2	aa		tax				tax
.11a3	bd 6c 11	lda $116c,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11a6	8d f7 0a	sta $0af7			sta 	asmBaseOpcode
.11a9	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11ac	8d f6 0a	sta $0af6			sta 	asmMode
.11af	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b1	d0 05		bne $11b8			bne 	_AOIThreeBytes 				; if so, we have to use three byte, can't try zp before abs
.11b3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11b6	b0 10		bcs $11c8			bcs 	_AOISuccess 				; worked ok.
.11b8					_AOIThreeBytes:
.11b8	ae f6 0a	ldx $0af6			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11bb	bd f2 11	lda $11f2,x			lda 	AbsoluteVersionTable,x
.11be	30 09		bmi $11c9			bmi 	_AOIError					; not possible, no equivalent.
.11c0	8d f6 0a	sta $0af6			sta 	asmMode
.11c3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11c6	90 01		bcc $11c9			bcc 	_AOIError 					; didn't work.
.11c8					_AOISuccess:
.11c8	60		rts				rts
.11c9					_AOIError:
.11c9	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11cb	20 09 15	jsr $1509		jsr	errorHandler
.11ce					AssembleAttempt:
.11ce	20 d7 11	jsr $11d7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d1	b0 03		bcs $11d6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d3	20 7f 13	jsr $137f			jsr 	AssembleSpecialCase
.11d6					_AAExit:
.11d6	60		rts				rts
.11d7					_AADispatch:
.11d7	ad f5 0a	lda $0af5			lda 	asmToken
.11da	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11dc	b0 11		bcs $11ef			bcs 	_AAGroup4
.11de	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e0	b0 0a		bcs $11ec			bcs 	_AAGroup3
.11e2	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11e4	b0 03		bcs $11e9			bcs 	_AAGroup2
.11e6	4c c5 12	jmp $12c5			jmp 	AssembleGroup1
.11e9					_AAGroup2:
.11e9	4c 20 13	jmp $1320			jmp 	AssembleGroup2
.11ec					_AAGroup3:
.11ec	4c 41 13	jmp $1341			jmp 	AssembleGroup3
.11ef					_AAGroup4:
.11ef	4c 75 13	jmp $1375			jmp 	AssembleGroup4
.11f2					AbsoluteVersionTable:
>11f2	ff						.byte	$FF 			; fail AMD_IMM
>11f3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11f4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11f5	ff						.byte	$FF 			; fail AMD_ABS
>11f6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11f7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11f8	ff						.byte	$FF 			; fail AMD_ABSY
>11f9	ff						.byte	$FF 			; fail AMD_ABSX
>11fa	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11fb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11fc	ff						.byte	$FF 			; fail AMD_ABSIND
>11fd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11fe	ff						.byte	$FF 			; fail AMD_REL
>11ff	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1200					OpcodeTable:
>1200	01					.byte	$01			; $94 ora
>1201	21					.byte	$21			; $95 (and)
>1202	41					.byte	$41			; $96 eor
>1203	61					.byte	$61			; $97 adc
>1204	81					.byte	$81			; $98 sta
>1205	a1					.byte	$a1			; $99 lda
>1206	c1					.byte	$c1			; $9a cmp
>1207	e1					.byte	$e1			; $9b sbc
>1208	02					.byte	$02			; $9c asl
>1209	22					.byte	$22			; $9d rol
>120a	42					.byte	$42			; $9e lsr
>120b	62					.byte	$62			; $9f ror
>120c	82					.byte	$82			; $a0 stx
>120d	a2					.byte	$a2			; $a1 ldx
>120e	c2					.byte	$c2			; $a2 dec
>120f	e2					.byte	$e2			; $a3 inc
>1210	60					.byte	$60			; $a4 stz
>1211	20					.byte	$20			; $a5 bit
>1212	80					.byte	$80			; $a6 sty
>1213	a0					.byte	$a0			; $a7 ldy
>1214	c0					.byte	$c0			; $a8 cpy
>1215	e0					.byte	$e0			; $a9 cpx
>1216	00					.byte	$00			; $aa tsb
>1217	10					.byte	$10			; $ab trb
>1218	14					.byte	$14			; $ac jsr
>1219	40					.byte	$40			; $ad jmp
>121a	10					.byte	$10			; $ae bpl
>121b	30					.byte	$30			; $af bmi
>121c	50					.byte	$50			; $b0 bvc
>121d	70					.byte	$70			; $b1 bvs
>121e	90					.byte	$90			; $b2 bcc
>121f	b0					.byte	$b0			; $b3 bcs
>1220	d0					.byte	$d0			; $b4 bne
>1221	f0					.byte	$f0			; $b5 beq
>1222	80					.byte	$80			; $b6 bra
>1223	00					.byte	$00			; $b7 brk
>1224	08					.byte	$08			; $b8 php
>1225	18					.byte	$18			; $b9 clc
>1226	28					.byte	$28			; $ba plp
>1227	38					.byte	$38			; $bb sec
>1228	40					.byte	$40			; $bc rti
>1229	48					.byte	$48			; $bd pha
>122a	58					.byte	$58			; $be cli
>122b	5a					.byte	$5a			; $bf phy
>122c	60					.byte	$60			; $c0 rts
>122d	68					.byte	$68			; $c1 pla
>122e	78					.byte	$78			; $c2 sei
>122f	7a					.byte	$7a			; $c3 ply
>1230	88					.byte	$88			; $c4 dey
>1231	8a					.byte	$8a			; $c5 txa
>1232	98					.byte	$98			; $c6 tya
>1233	9a					.byte	$9a			; $c7 txs
>1234	a8					.byte	$a8			; $c8 tay
>1235	aa					.byte	$aa			; $c9 tax
>1236	b8					.byte	$b8			; $ca clv
>1237	ba					.byte	$ba			; $cb tsx
>1238	c8					.byte	$c8			; $cc iny
>1239	ca					.byte	$ca			; $cd dex
>123a	d8					.byte	$d8			; $ce cld
>123b	da					.byte	$da			; $cf phx
>123c	e8					.byte	$e8			; $d0 inx
>123d	ea					.byte	$ea			; $d1 nop
>123e	f8					.byte	$f8			; $d2 sed
>123f	fa					.byte	$fa			; $d3 plx
.1240					Group2OpcodeAvailability:
>1240	ae					.byte	$ae			; $9c asl $02
>1241	ae					.byte	$ae			; $9d rol $22
>1242	ae					.byte	$ae			; $9e lsr $42
>1243	ae					.byte	$ae			; $9f ror $62
>1244	0a					.byte	$0a			; $a0 stx $82
>1245	0b					.byte	$0b			; $a1 ldx $a2
>1246	aa					.byte	$aa			; $a2 dec $c2
>1247	aa					.byte	$aa			; $a3 inc $e2
>1248	22					.byte	$22			; $a4 stz $60
>1249	aa					.byte	$aa			; $a5 bit $20
>124a	2a					.byte	$2a			; $a6 sty $80
>124b	ab					.byte	$ab			; $a7 ldy $a0
>124c	2b					.byte	$2b			; $a8 cpy $c0
>124d	0b					.byte	$0b			; $a9 cpx $e0
>124e	0a					.byte	$0a			; $aa tsb $00
>124f	0a					.byte	$0a			; $ab trb $10
>1250	08					.byte	$08			; $ac jsr $14
>1251	08					.byte	$08			; $ad jmp $40
.1252					AssemblerSpecialCases:
>1252	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>1255	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>1258	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>125b	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>125e	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1261	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>1264	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>1267	a5 00 89				.byte	$a5,0,$89		; bit #
>126a	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>126d	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1270	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1271					AssembleLabel:
.1271	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1273	c9 3a		cmp #$3a			cmp 	#$3A 						; e.g. it isn't just '.'
.1275	b0 49		bcs $12c0			bcs 	_ALSyntax
.1277	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.1279	a2 02		ldx #$02		ldx	#2
.127b	20 0d 4e	jsr $4e0d		jsr	variableHandler
.127e	a5 90		lda $90				lda 	esType 						; check integer reference
.1280	c9 80		cmp #$80			cmp 	#$80
.1282	d0 3c		bne $12c0			bne 	_ALSyntax
.1284	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.1286	85 2a		sta $2a				sta 	temp0
.1288	a5 a0		lda $a0				lda 	esInt1
.128a	85 2b		sta $2b				sta 	temp0+1
.128c	5a		phy				phy
.128d	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2 ?
.1290	4a		lsr a				lsr 	a
.1291	90 11		bcc $12a4			bcc 	_ALWrite
.1293	a0 00		ldy #$00			ldy 	#0
.1295	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.1298	d1 2a		cmp ($2a),y			cmp 	(temp0),y 					; labels cannot change value, usually means address mode has changed.
.129a	d0 1f		bne $12bb			bne 	_ALChanged
.129c	c8		iny				iny
.129d	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a2	d0 17		bne $12bb			bne 	_ALChanged
.12a4					_ALWrite:
.12a4	a0 00		ldy #$00			ldy 	#0
.12a6	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12a9	91 2a		sta ($2a),y			sta 	(temp0),y
.12ab	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12ae	c8		iny				iny
.12af	91 2a		sta ($2a),y			sta 	(temp0),y
.12b1	a9 00		lda #$00			lda 	#0
.12b3	c8		iny				iny
.12b4	91 2a		sta ($2a),y			sta 	(temp0),y
.12b6	c8		iny				iny
.12b7	91 2a		sta ($2a),y			sta 	(temp0),y
.12b9	7a		ply				ply
.12ba	60		rts				rts
.12bb					_ALChanged:
.12bb	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12bd	20 09 15	jsr $1509		jsr	errorHandler
.12c0					_ALSyntax:
.12c0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12c2	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12c5					AssembleGroup1:
.12c5	ad f5 0a	lda $0af5			lda 	asmToken 					; firstly, we throw out STA immediate
.12c8	c9 98		cmp #$98			cmp 	#TKW_STA
.12ca	d0 07		bne $12d3			bne 	_AG1NotStoreImm
.12cc	ad f6 0a	lda $0af6			lda 	asmMode
.12cf	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d1	f0 2c		beq $12ff			beq 	AG1ModeError
.12d3					_AG1NotStoreImm:
.12d3	ae f6 0a	ldx $0af6			ldx 	asmMode						; get mode into X.
.12d6	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12d9	48		pha				pha
.12da	f0 23		beq $12ff			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12dc	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12de	d0 02		bne $12e2			bne 	_AG1NotImmediate
.12e0	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12e2					_AG1NotImmediate:
.12e2	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12e4	d0 02		bne $12e8			bne 	_AG1NotZX
.12e6	a2 00		ldx #$00			ldx 	#0
.12e8					_AG1NotZX:
.12e8	68		pla				pla 								; restore length
.12e9	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12eb	b0 10		bcs $12fd			bcs 	AG1Fail
.12ed					AG1ReturnValue:
.12ed	85 32		sta $32				sta 	tempShort 					; save size of operand
.12ef	18		clc				clc
.12f0	bd 12 13	lda $1312,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12f3	6d f7 0a	adc $0af7			adc 	asmBaseOpcode 				; add the base opcode.
.12f6	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12f8	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.12fb	38		sec				sec
.12fc	60		rts				rts
.12fd					AG1Fail:
.12fd	18		clc				clc
.12fe	60		rts				rts
.12ff					AG1ModeError:
.12ff	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1301	20 09 15	jsr $1509		jsr	errorHandler
.1304					AMDOperandSize:
>1304	01 01 00 02					.byte 	1,1,0,2
>1308	01 01 02 02					.byte 	1,1,2,2
>130c	01 01 02 02					.byte 	1,1,2,2
>1310	01 01						.byte 	1,1
.1312					AMDOffsetFromBase:
>1312	00 04 08 0c					.byte 	0,4,8,12
>1316	10 14 18 1c					.byte	16,20,24,28
>131a	11 00 00 00					.byte 	17,0,0,0
>131e	00 00						.byte 	0,0
.1320					AssembleGroup2:
.1320	ad f6 0a	lda $0af6			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.1323	c9 08		cmp #$08			cmp 	#8
.1325	b0 18		bcs $133f			bcs 	_AG2Fail
.1327	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1329	ae f5 0a	ldx $0af5			ldx 	asmToken					; get token in X, then get the availability flags for it
.132c	bd a4 11	lda $11a4,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.132f					_AG2Shift:
.132f	4a		lsr a				lsr 	a
.1330	c6 2a		dec $2a				dec 	temp0
.1332	10 fb		bpl $132f			bpl 	_AG2Shift
.1334	90 09		bcc $133f			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.1336	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.1339	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.133c	4c ed 12	jmp $12ed			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.133f					_AG2Fail:
.133f	18		clc				clc
.1340	60		rts				rts
.1341					AssembleGroup3:
.1341	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.1344	4a		lsr a				lsr 	a
.1345	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.1347	90 21		bcc $136a			bcc 	_AG3Default
.1349	38		sec				sec	 								; calculate branch offset
.134a	a5 98		lda $98				lda		esInt0
.134c	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.134f	aa		tax				tax
.1350	a5 a0		lda $a0				lda		esInt1
.1352	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.1355	85 a0		sta $a0				sta 	esInt1
.1357	8a		txa				txa 								; add 126, now 128 too many.
.1358	18		clc				clc 								; we can use this to check the range
.1359	69 7e		adc #$7e			adc 	#126
.135b	85 98		sta $98				sta 	esInt0
.135d	90 02		bcc $1361			bcc 	_AG3NoCarry
.135f	e6 a0		inc $a0				inc 	esInt1
.1361					_AG3NoCarry:
.1361	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.1363	d0 0b		bne $1370			bne 	_AG3Range
.1365	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.1367	38		sec				sec
.1368	e9 80		sbc #$80			sbc 	#128
.136a					_AG3Default:
.136a	85 98		sta $98				sta 	esInt0
.136c					_AG3ExitOk:
.136c	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.136e	d0 07		bne $1377			bne 	AG4Write
.1370					_AG3Range:
.1370	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.1372	20 09 15	jsr $1509		jsr	errorHandler
.1375					AssembleGroup4:
.1375	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1377					AG4Write:
.1377	ad f7 0a	lda $0af7			lda 	asmBaseOpcode				; the opcode is the opcode base.
.137a	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.137d	38		sec				sec
.137e	60		rts				rts
.137f					AssembleSpecialCase:
.137f	a2 00		ldx #$00			ldx 	#0
.1381					_ASCScan:
.1381	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.1384	cd f5 0a	cmp $0af5			cmp 	asmToken
.1387	d0 08		bne $1391			bne 	_ASCNext
.1389	bd 53 12	lda $1253,x			lda 	AssemblerSpecialCases+1,x
.138c	cd f6 0a	cmp $0af6			cmp 	asmMode
.138f	f0 0a		beq $139b			beq 	_ASCFound
.1391					_ASCNext:
.1391	e8		inx				inx									; next entry
.1392	e8		inx				inx
.1393	e8		inx				inx
.1394	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; until table ends
.1397	d0 e8		bne $1381			bne 	_ASCScan
.1399	18		clc				clc
.139a	60		rts				rts
.139b					_ASCFound:
.139b	bd 54 12	lda $1254,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.139e	48		pha				pha
.139f	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.13a2	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13a5	aa		tax				tax
.13a6	68		pla				pla 								; opcode back
.13a7	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13aa	38		sec				sec
.13ab	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13ac					assemblerHandler:
.13ac	7c af 13	jmp ($13af,x)			jmp 	(assemblerVectors,x)
.13af					assemblerVectors:
>13af	b5 13					.word _DummyControlHandler ; index 0
>13b1	9f 11					.word AssembleOneInstruction ; index 2
>13b3	71 12					.word AssembleLabel        ; index 4
.13b5					_DummyControlHandler:
.13b5	60		rts			rts

;******  Return to file: basic.asm

.13b6					section_end_assembler:
.13b6					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13b6					X16Break:
.13b6	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13b9	f0 01		beq $13bc			beq 	_IsBreak
.13bb	60		rts				rts
.13bc					_IsBreak:
.13bc	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13be	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c1					ExternSave:
.13c1	5a		phy				phy
.13c2	20 0d 14	jsr $140d			jsr 	ExternGetLength 			; get length of file into A name YX
.13c5	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13c8	a9 01		lda #$01			lda 	#1
.13ca	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13cc	a0 00		ldy #$00			ldy 	#0
.13ce	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13d1	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13d3	85 2a		sta $2a				sta 	temp0
.13d5	a5 a1		lda $a1				lda 	esInt1+1
.13d7	85 2b		sta $2b				sta 	temp0+1
.13d9	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13db	a4 a2		ldy $a2				ldy 	esInt1+2
.13dd	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13df	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13e2	b0 02		bcs $13e6			bcs 	_ESSave
.13e4	7a		ply				ply
.13e5	60		rts				rts
.13e6					_ESSave:
.13e6	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13e8	20 09 15	jsr $1509		jsr	errorHandler
.13eb					ExternLoad:
.13eb	5a		phy				phy
.13ec	20 0d 14	jsr $140d			jsr 	ExternGetLength 			; get length of file into A name YX
.13ef	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13f2	a9 01		lda #$01			lda 	#1
.13f4	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13f6	a0 00		ldy #$00			ldy 	#0
.13f8	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13fb	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.13fd	a4 a1		ldy $a1				ldy 	esInt1+1
.13ff	a9 00		lda #$00			lda 	#0 							; load command
.1401	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1404	b0 02		bcs $1408			bcs 	_ESLoad
.1406	7a		ply				ply
.1407	60		rts				rts
.1408					_ESLoad:
.1408	a2 20		ldx #$20			ldx 	#ErrorID_Load
.140a	20 09 15	jsr $1509		jsr	errorHandler
.140d					ExternGetLength:
.140d	a5 98		lda $98				lda 	esInt0 						; length into A.
.140f	85 2a		sta $2a				sta 	temp0
.1411	a5 a0		lda $a0				lda 	esInt1
.1413	85 2b		sta $2b				sta 	temp0+1
.1415	a0 00		ldy #$00			ldy 	#0
.1417	b1 2a		lda ($2a),y			lda 	(temp0),y
.1419	a6 98		ldx $98				ldx 	esInt0 						; name string address into YX
.141b	a4 a0		ldy $a0				ldy 	esInt1
.141d	e8		inx				inx 								; advance over the length byte.
.141e	d0 01		bne $1421			bne 	_ESNoCarry
.1420	c8		iny				iny
.1421					_ESNoCarry:
.1421	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af8					bufferCount:
>0af8							.fill 	0
.0af8					bufferStorage:
>0af8							.fill 	MaxLineInputSize
.1422					IOControlHandler:
.1422	c9 00		cmp #$00			cmp 	#0
.1424	d0 12		bne $1438			bne		_CHExit
.1426	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1428	20 51 14	jsr $1451			jsr 	IOPrintChar
.142b	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.142d	20 7b 14	jsr $147b			jsr 	IOInk
.1430	a9 00		lda #$00			lda 	#0
.1432	20 8f 14	jsr $148f			jsr 	IOPaper
.1435	20 39 14	jsr $1439			jsr 	IOClearScreen
.1438					_CHExit:
.1438	60		rts				rts
.1439					IOClearScreen:
.1439	48		pha				pha
.143a	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.143c	20 51 14	jsr $1451			jsr 	IOPrintChar
.143f	68		pla				pla
.1440	60		rts				rts
.1441					IONewLine:
.1441	48		pha				pha
.1442	a9 0d		lda #$0d			lda 	#13
.1444	20 51 14	jsr $1451			jsr 	IOPrintChar
.1447	68		pla				pla
.1448	60		rts				rts
.1449					IOTab:
.1449	48		pha				pha
.144a	a9 20		lda #$20			lda 	#32
.144c	20 51 14	jsr $1451			jsr 	IOPrintChar
.144f	68		pla				pla
.1450	60		rts				rts
.1451					IOPrintAscii:
.1451					IOPrintChar:
.1451	aa		tax				tax 								; save in X so we can save Y
.1452	5a		phy				phy
.1453	8a		txa				txa
.1454	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1456	d0 02		bne $145a			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1458	a9 14		lda #$14			lda 	#$14
.145a					_IOPCNotBS:
.145a	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.145d	7a		ply				ply
.145e	60		rts				rts
.145f					IOInkey:
.145f	5a		phy				phy
.1460	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1463	85 32		sta $32				sta 	tempShort
.1465	7a		ply				ply
.1466	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1468	f0 10		beq $147a			beq 	_IOIExit
.146a	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.146c	f0 0c		beq $147a			beq 	_IOIExit
.146e	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1470	f0 06		beq $1478			beq 	_IOIBackspace
.1472	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1474	90 e9		bcc $145f			bcc 	IOInkey
.1476	b0 02		bcs $147a			bcs 	_IOIExit
.1478					_IOIBackspace:
.1478	a9 08		lda #$08			lda 	#8 							; return chr(8)
.147a					_IOIExit:
.147a	60		rts				rts
.147b					IOInk:
.147b	48		pha				pha
.147c	29 07		and #$07			and 	#7 							; 8 primaries
.147e	aa		tax				tax
.147f	bd 87 14	lda $1487,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1482	20 51 14	jsr $1451			jsr 	IOPrintChar
.1485	68		pla				pla
.1486	60		rts				rts
.1487					_IOColourTable:
>1487	90						.byte 	$90 					; 0 Black
>1488	96						.byte 	$96 					; 1 Red
>1489	1e						.byte 	$1E 					; 2 Green
>148a	9e						.byte 	$9E 					; 3 Yellow
>148b	9a						.byte 	$9A 					; 4 Blue
>148c	9c						.byte 	$9C 					; 5 Magenta
>148d	9f						.byte 	$9F 					; 6 Cyan
>148e	05						.byte 	$05 					; 7 White
.148f					IOPaper:
.148f	48		pha				pha
.1490	48		pha				pha
.1491	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.1493	20 51 14	jsr $1451			jsr 	IOPrintChar 			; and then swap them again.
.1496	68		pla				pla
.1497	20 7b 14	jsr $147b			jsr 	IOInk
.149a	a9 01		lda #$01			lda 	#1
.149c	20 51 14	jsr $1451			jsr 	IOPrintChar
.149f	68		pla				pla
.14a0	60		rts				rts
.14a1					IOLocate:
.14a1	48		pha				pha
.14a2	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14a4	20 51 14	jsr $1451			jsr 	IOPrintChar
.14a7	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14a9	20 af 14	jsr $14af			jsr 	_IOLoc2
.14ac	7a		ply				ply
.14ad	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14af					_IOLoc2:
.14af	c0 00		cpy #$00			cpy 	#0
.14b1	f0 06		beq $14b9			beq 	_IOLocExit
.14b3	20 51 14	jsr $1451			jsr 	IOPrintChar
.14b6	88		dey				dey
.14b7	d0 f6		bne $14af			bne 	_IOLoc2
.14b9					_IOLocExit:
.14b9	60		rts				rts
.14ba					IOInput:
.14ba	a9 00		lda #$00			lda 	#0
.14bc	8d f8 0a	sta $0af8			sta 	bufferCount
.14bf					_IOILoop:
.14bf	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14c2	c9 0d		cmp #$0d			cmp 	#13
.14c4	f0 10		beq $14d6			beq 	_IOIExit
.14c6	ae f8 0a	ldx $0af8			ldx 	bufferCount
.14c9	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14cb	f0 f2		beq $14bf			beq 	_IOILoop
.14cd	ee f8 0a	inc $0af8			inc 	bufferCount
.14d0	9d f9 0a	sta $0af9,x			sta 	bufferStorage+1,x
.14d3	4c bf 14	jmp $14bf			jmp 	_IOILoop
.14d6					_IOIExit:
.14d6	a9 f8		lda #$f8			lda 	#(bufferCount) & $FF
.14d8	85 2a		sta $2a				sta 	temp0
.14da	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14dc	85 2b		sta $2b				sta 	1+(temp0)
.14de	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14df					IOReadTimer:
.14df	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14e2	48		pha				pha
.14e3	8a		txa				txa
.14e4	a8		tay				tay
.14e5	68		pla				pla
.14e6	60		rts				rts

;******  Return to file: device/device.asm

.14e7					deviceHandler:
.14e7	7c ea 14	jmp ($14ea,x)			jmp 	(deviceVectors,x)
.14ea					deviceVectors:
>14ea	22 14					.word IOControlHandler     ; index 0
>14ec	b6 13					.word X16Break             ; index 2
>14ee	39 14					.word IOClearScreen        ; index 4
>14f0	41 14					.word IONewLine            ; index 6
>14f2	7b 14					.word IOInk                ; index 8
>14f4	5f 14					.word IOInkey              ; index 10
>14f6	ba 14					.word IOInput              ; index 12
>14f8	eb 13					.word ExternLoad           ; index 14
>14fa	a1 14					.word IOLocate             ; index 16
>14fc	8f 14					.word IOPaper              ; index 18
>14fe	51 14					.word IOPrintChar          ; index 20
>1500	51 14					.word IOPrintAscii         ; index 22
>1502	c1 13					.word ExternSave           ; index 24
>1504	49 14					.word IOTab                ; index 26
>1506	df 14					.word IOReadTimer          ; index 28
.1508					_DummyControlHandler:
.1508	60		rts			rts

;******  Return to file: basic.asm

.1509					section_end_device:
.1509					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1509					ErrorHandler:
.1509	da		phx				phx
.150a	a9 01		lda #$01			lda 	#1 							; red
.150c	a2 08		ldx #$08		ldx	#8
.150e	20 e7 14	jsr $14e7		jsr	deviceHandler
.1511	fa		plx				plx
.1512	a9 7d		lda #$7d			lda 	#(ErrorTextList) & $FF
.1514	85 2a		sta $2a				sta 	temp0
.1516	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1518	85 2b		sta $2b				sta 	1+(temp0)
.151a	ca		dex		_EHFind:dex									; errors start at 1
.151b	f0 10		beq $152d			beq 	_EHFound
.151d	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.151f	38		sec				sec
.1520	a5 2a		lda $2a				lda 	temp0
.1522	71 2a		adc ($2a),y			adc 	(temp0),y
.1524	85 2a		sta $2a				sta 	temp0
.1526	90 f2		bcc $151a			bcc 	_EHFind
.1528	e6 2b		inc $2b				inc 	temp0+1
.152a	4c 1a 15	jmp $151a			jmp 	_EHFind
.152d					_EHFound:
.152d	20 41 18	jsr $1841			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1530	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1532	b1 28		lda ($28),y			lda 	(codePtr),y
.1534	f0 39		beq $156f			beq 	_EHNoLine
.1536	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1538	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.153b	90 32		bcc $156f			bcc 	_EHNoLine
.153d	a9 79		lda #$79			lda 	#(EHAtMsg) & $FF
.153f	85 2a		sta $2a				sta 	temp0
.1541	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1543	85 2b		sta $2b				sta 	1+(temp0)
.1545	20 41 18	jsr $1841			jsr 	EHPrintAscii
.1548	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.154a	a2 00		ldx #$00			ldx 	#0
.154c	b1 28		lda ($28),y			lda 	(codePtr),y
.154e	95 98		sta $98,x			sta 	esInt0,x
.1550	c8		iny				iny
.1551	b1 28		lda ($28),y			lda 	(codePtr),y
.1553	95 a0		sta $a0,x			sta 	esInt1,x
.1555	a9 00		lda #$00			lda 	#0
.1557	95 a8		sta $a8,x			sta 	esInt2,x
.1559	95 b0		sta $b0,x			sta 	esInt3,x
.155b	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.155d	85 2a		sta $2a				sta 	temp0
.155f	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1561	85 2b		sta $2b				sta 	1+(temp0)
.1563	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1565	a9 00		lda #$00			lda 	#0							; stack position zero.
.1567	a2 12		ldx #$12		ldx	#18
.1569	20 1b 3f	jsr $3f1b		jsr	mainHandler
.156c	20 41 18	jsr $1841			jsr 	EHPrintAscii
.156f					_EHNoLine:
.156f	a2 06		ldx #$06		ldx	#6
.1571	20 e7 14	jsr $14e7		jsr	deviceHandler
.1574	a2 04		ldx #$04		ldx	#4
.1576	20 bc 28	jsr $28bc		jsr	interactionHandler
.1579					EHAtMsg:
>1579	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.157d					ErrorTextList:
>157d	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1585	20 6e 6f 74 20 50 72 65 73 65 6e 74
>1591	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1599	45 72 72 6f 72
>159e	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15a6	64 69 73 61 62 6c 65 64
>15ae	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15b6	6f 6e 20 66 61 69 6c 65 64
>15bf	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15c7	42 79 20 5a 65 72 6f
>15ce	04 53 74 6f 70				.text 4,"Stop"
>15d3	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15db	73 6d 61 74 63 68
>15e1	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15e9	20 56 61 6c 75 65
>15ef	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15f7	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1605	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>160d	20 63 6f 6d 6d 61
>1613	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>161b	20 72 65 66 65 72 65 6e 63 65
>1625	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>162d	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>163b	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1643	74 6f 6f 20 6c 6f 6e 67
>164b	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1653	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1660	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1668	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1675	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>167d	74 68 6f 75 74 20 46 4f 52
>1686	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>168e	74 68 6f 75 74 20 57 48 49 4c 45
>1699	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16a1	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16ae	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16b6	54 20 69 6e 64 65 78
>16bd	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16c5	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16d5	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16dd	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16ec	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16f4	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1704	63 65
>1706	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>170e	20 50 72 6f 63 65 64 75 72 65
>1718	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1720	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1730	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1738	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1746	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>174e	75 69 72 65 73 20 61 72 72 61 79
>1759	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1761	61 79 20 69 6e 64 65 78
>1769	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1771	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1781	6e 64 69 63 65 73
>1787	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>178f	64 61 74 61
>1793	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>179b	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17a8	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17b0	69 6c 65 64
>17b4	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17bc	69 6c 65 64
>17c0	05 42 72 65 61 6b			.text 5,"Break"
>17c6	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17ce	6d 65 6d 6f 72 79
>17d4	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17dc	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17eb	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17f3	72 61 6e 64 2f 4d 6f 64 65
>17fc	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1804	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1810	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1818	68 61 6e 67 65 64 20 76 61 6c 75 65
>1824	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>182c	74 65 20 53 65 6c 65 63 74 65 64
>1837	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>183f	65
>1840	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1841					EHPrintAscii:
.1841	a0 00		ldy #$00			ldy 	#0
.1843	b1 2a		lda ($2a),y			lda 	(temp0),y
.1845	aa		tax				tax
.1846	f0 0d		beq $1855			beq 	_EHPExit
.1848					_EHPLoop:
.1848	c8		iny				iny
.1849	da		phx				phx
.184a	b1 2a		lda ($2a),y			lda 	(temp0),y
.184c	a2 16		ldx #$16		ldx	#22
.184e	20 e7 14	jsr $14e7		jsr	deviceHandler
.1851	fa		plx				plx
.1852	ca		dex				dex
.1853	d0 f3		bne $1848			bne 	_EHPLoop
.1855					_EHPExit:
.1855	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1856					section_end_error:
.1856					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1856					ExtensionHandler:
.1856	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1858	f0 16		beq $1870			beq 	_ExtensionForce
.185a	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.185c	d0 08		bne $1866			bne 	_ExtensionUnary 			; is passed in A.
.185e	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1860	c8		iny				iny
.1861	0a		asl a				asl 	a
.1862	aa		tax				tax
.1863	7c 67 18	jmp ($1867,x)			jmp 	(Group2Vectors-12,x)
.1866					_ExtensionUnary:
.1866	48		pha				pha 								; save stack pos in A
.1867	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1869	c8		iny				iny
.186a	0a		asl a				asl 	a
.186b	aa		tax				tax
.186c	68		pla				pla 								; restore stack pos and call group3 command.
.186d	7c 83 18	jmp ($1883,x)			jmp 	(Group3Vectors-12,x)
.1870					_ExtensionForce:
.1870	4c 96 23	jmp $2396			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1873					Group2Vectors:
>1873	6e 25					.word	Command_VPoke            ; $86 vpoke
>1875	71 25					.word	Command_VDoke            ; $87 vdoke
>1877	46 25					.word	Command_VLoad            ; $88 vload
>1879	a8 23					.word	CommandMode              ; $89 mode
>187b	66 24					.word	CommandPalette           ; $8a palette
>187d	d5 20					.word	CommandSprite            ; $8b sprite
>187f	c5 1d					.word	CommandClg               ; $8c clg
>1881	c7 1a					.word	Command_Rect             ; $8d rect
>1883	cf 1a					.word	Command_Frame            ; $8e frame
>1885	9d 24					.word	Command_Draw             ; $8f draw
>1887	b4 1a					.word	Command_Plot             ; $90 plot
>1889	8e 19					.word	Command_Line             ; $91 line
>188b	20 22					.word	Command_Paint            ; $92 paint
>188d	e5 1e					.word	CommandSound             ; $93 sound

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.188f					Group3Vectors:
>188f	ba 25					.word	Command_VPeek            ; $86 vpeek(
>1891	bd 25					.word	Command_VDeek            ; $87 vdeek(
>1893	68 23					.word	Sprite_GetX              ; $88 sprite.x(
>1895	6b 23					.word	Sprite_GetY              ; $89 sprite.y(
>1897	1d 20					.word	FunctionCollide          ; $8a hit(
>1899	64 1e					.word	Unary_JoyX               ; $8b joy.x(
>189b	67 1e					.word	Unary_JoyY               ; $8c joy.y(
>189d	a0 1e					.word	Unary_JButton            ; $8d joy.b(
>189f	39 1e					.word	Unary_Clock              ; $8e clock(
>18a1	de 1f					.word	Unary_Playing            ; $8f playing(

;******  Return to file: extension/extensionhandler.asm

.18a3					XEvaluateInteger:
.18a3	8a		txa				txa
.18a4	a2 0a		ldx #$0a		ldx	#10
.18a6	20 1b 3f	jsr $3f1b		jsr	mainHandler
.18a9	aa		tax				tax
.18aa	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be8					gStartStorage:
.0be8					gCurrentXPos:
>0be8							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0bea					gCurrentYPos:
>0bea							.fill 	2
.0bec					gX1:
>0bec							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bee					gY1:
>0bee							.fill 	2
.0bf0					gX2:
>0bf0							.fill 	2
.0bf2					gY2:
>0bf2							.fill 	2
.0bf4					gError:
>0bf4							.fill 	2
.0bf6					g2Error:
>0bf6							.fill 	2
.0bf8					gdx:
>0bf8							.fill 	2
.0bfa					gdy:
>0bfa							.fill 	2
.0bfc					gWordHandler:
>0bfc							.fill 	2
.0bfe					gModifiers:
.0bfe					gdInk:
>0bfe							.fill 	1
.0bff					gdPaper:
>0bff							.fill 	1
.0c00					gdSize:
>0c00							.fill 	1
.0c01					gdImage:
>0c01							.fill 	1
.0c02					gdFlip:
>0c02							.fill 	1
.0c03					gEndStorage:
.0c03					gdXLimit:
>0c03							.fill 	2
.0c05					gdYLimit:
>0c05							.fill 	2
.0c07					gdText:
>0c07							.fill 	2
.18ab					GResetStorage:
.18ab	da		phx				phx
.18ac	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18ae	a9 00		lda #$00			lda 	#0
.18b0					_GRSLoop:
.18b0	9d e8 0b	sta $0be8,x			sta 	gStartStorage,x
.18b3	ca		dex				dex
.18b4	10 fa		bpl $18b0			bpl 	_GRSLoop
.18b6	a9 01		lda #$01			lda 	#1
.18b8	8d fe 0b	sta $0bfe			sta 	gdInk
.18bb	8d 00 0c	sta $0c00			sta 	gdSize
.18be	fa		plx				plx
.18bf	60		rts				rts
.18c0					GHandler:
.18c0	8e fd 0b	stx $0bfd			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18c3	8d fc 0b	sta $0bfc			sta 	gWordHandler
.18c6	a9 00		lda #$00			lda 	#0							; default no text.
.18c8	8d 08 0c	sta $0c08			sta 	gdText+1
.18cb	88		dey				dey 								; predecrement
.18cc					_GHLoopNext:
.18cc	c8		iny				iny									; advance one character
.18cd					_GHLoop:
.18cd	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18cf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d1	f0 f9		beq $18cc			beq 	_GHLoopNext
.18d3	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18d5	f0 4c		beq $1923			beq 	_GHExit
.18d7	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18d9	f0 48		beq $1923			beq 	_GHExit
.18db	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18dd	f0 35		beq $1914			beq 	_GHCallHandler 				; update post & call the handler
.18df	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e1	f0 31		beq $1914			beq 	_GHCallHandler
.18e3	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18e5	f0 14		beq $18fb			beq 	_GHCPairSkip
.18e7	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.18e9	f0 39		beq $1924			beq 	_GHText
.18eb	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18ed					_GHCheckTokens:
.18ed	b1 28		lda ($28),y			lda 	(codePtr),y
.18ef	dd 39 19	cmp $1939,x			cmp 	_GHTokenTable,x
.18f2	f0 0e		beq $1902			beq 	_GHFoundToken
.18f4	e8		inx				inx
.18f5	bd 39 19	lda $1939,x			lda 	_GHTokenTable,x
.18f8	d0 f3		bne $18ed			bne 	_GHCheckTokens
.18fa	88		dey				dey
.18fb					_GHCPairSkip:
.18fb	c8		iny				iny
.18fc					_GHCPair:
.18fc	20 3f 19	jsr $193f			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.18ff	4c cd 18	jmp $18cd			jmp 	_GHLoop
.1902					_GHFoundToken:
.1902	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1903	da		phx				phx
.1904	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1906	a2 0c		ldx #$0c		ldx	#12
.1908	20 1b 3f	jsr $3f1b		jsr	mainHandler
.190b	fa		plx				plx
.190c	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.190e	9d fe 0b	sta $0bfe,x			sta 	gModifiers,x 				; update the modifiers
.1911	4c cd 18	jmp $18cd			jmp 	_GHLoop 					; and loop back
.1914					_GHCallHandler:
.1914	c8		iny				iny 								; consume AT or TO.
.1915	20 3f 19	jsr $193f			jsr 	GHMakeCurrent 				; update the coordinates.
.1918	5a		phy				phy
.1919	20 20 19	jsr $1920			jsr 	_GHCallHandlerCode 			; call the handler code
.191c	7a		ply				ply
.191d	4c cd 18	jmp $18cd			jmp 	_GHLoop 					; and loop round.
.1920					_GHCallHandlerCode:
.1920	6c fc 0b	jmp ($0bfc)			jmp 	(gWordHandler)
.1923					_GHExit:
.1923	60		rts				rts
.1924					_GHText:
.1924	c8		iny				iny 								; skip token
.1925	a9 00		lda #$00			lda 	#0 							; get string.
.1927	a2 0e		ldx #$0e		ldx	#14
.1929	20 1b 3f	jsr $3f1b		jsr	mainHandler
.192c	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.192e	8d 07 0c	sta $0c07			sta 	gdText
.1931	a5 a0		lda $a0				lda 	esInt1
.1933	8d 08 0c	sta $0c08			sta 	gdText+1
.1936	4c cd 18	jmp $18cd			jmp 	_GHLoop
.1939					_GHTokenTable:
>1939	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>193e	00						.byte 	0
.193f					GHMakeCurrent:
.193f	da		phx				phx
.1940	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1942	20 51 19	jsr $1951			jsr 	_GHMCDoIt
.1945	a2 02		ldx #$02		ldx	#2
.1947	20 1b 3f	jsr $3f1b		jsr	mainHandler
.194a	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.194c	20 51 19	jsr $1951			jsr 	_GHMCDoIt
.194f	fa		plx				plx
.1950	60		rts				rts
.1951					_GHMCDoIt:
.1951	bd e8 0b	lda $0be8,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1954	9d ec 0b	sta $0bec,x			sta 	gX1,x
.1957	bd e9 0b	lda $0be9,x			lda 	gCurrentXPos+1,x
.195a	9d ed 0b	sta $0bed,x			sta 	gX1+1,x
.195d	da		phx				phx
.195e	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1960	a2 0a		ldx #$0a		ldx	#10
.1962	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1965	fa		plx				plx
.1966	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1968	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.196b	a5 a0		lda $a0				lda 	esInt1
.196d	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1970	b0 17		bcs $1989			bcs 	_GMHCRange
.1972	a5 a8		lda $a8				lda 	esInt2
.1974	05 b0		ora $b0				ora 	esInt3
.1976	d0 11		bne $1989			bne 	_GMHCRange
.1978	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.197a	9d e8 0b	sta $0be8,x			sta 	gCurrentXPos,x
.197d	9d f0 0b	sta $0bf0,x			sta 	gX2,x
.1980	a5 a0		lda $a0				lda 	esInt1
.1982	9d e9 0b	sta $0be9,x			sta 	gCurrentXPos+1,x
.1985	9d f1 0b	sta $0bf1,x			sta 	gX2+1,x
.1988	60		rts				rts
.1989					_GMHCRange:
.1989	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.198b	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c09					gdySign:
>0c09							.fill 	1
.198e					Command_Line:
.198e	a9 96		lda #$96			lda 	#LineHandler & $FF
.1990	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.1992	20 c0 18	jsr $18c0			jsr 	GHandler
.1995	60		rts				rts
.1996					LineHandler:
.1996	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.1998	a0 04		ldy #$04			ldy 	#gX2-gX1
.199a	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.199d	f0 09		beq $19a8			beq 	_LHRectCode
.199f	a2 02		ldx #$02			ldx 	#gY1-gX1
.19a1	a0 06		ldy #$06			ldy 	#gY2-gX1
.19a3	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.19a6	d0 03		bne $19ab			bne 	_LHLineDrawer
.19a8					_LHRectCode:
.19a8	4c db 1a	jmp $1adb			jmp 	RectHandler
.19ab					_LHLineDrawer:
.19ab	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19ad	a0 04		ldy #$04			ldy 	#gX2-gX1
.19af	20 5f 1c	jsr $1c5f			jsr 	CompareCoords
.19b2	90 0a		bcc $19be			bcc 	_LHNoSwap
.19b4	20 a7 1c	jsr $1ca7			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19b7	a2 02		ldx #$02			ldx 	#gY1-gX1
.19b9	a0 06		ldy #$06			ldy 	#gY2-gX1
.19bb	20 a7 1c	jsr $1ca7			jsr 	GSwapCoords
.19be					_LHNoSwap:
.19be	20 e7 19	jsr $19e7			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19c1	a0 00		ldy #$00			ldy 	#gX1-gX1
.19c3	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19c6	b0 15		bcs $19dd			bcs 	_LHExit 					; line off screen.
.19c8					_LHDrawLoop:
.19c8	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19ca	a0 04		ldy #$04			ldy 	#gX2-gX1
.19cc	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.19cf	d0 0d		bne $19de			bne 	_LHNextPixel
.19d1	a2 06		ldx #$06			ldx 	#gY2-gX1
.19d3	a0 06		ldy #$06			ldy 	#gY2-gX1
.19d5	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.19d8	d0 04		bne $19de			bne 	_LHNextPixel
.19da	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; plot the last pixel.
.19dd					_LHExit:
.19dd	60		rts				rts
.19de					_LHNextPixel:
.19de	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; plot the pixel.
.19e1	20 3b 1a	jsr $1a3b			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19e4	4c c8 19	jmp $19c8			jmp  	_LHDrawLoop 				; and loop back if okay
.19e7					BresenhamInitialise:
.19e7	38		sec				sec
.19e8	ad f0 0b	lda $0bf0			lda 	gX2
.19eb	ed ec 0b	sbc $0bec			sbc 	gX1
.19ee	8d f8 0b	sta $0bf8			sta 	gdX
.19f1	ad f1 0b	lda $0bf1			lda 	gX2+1
.19f4	ed ed 0b	sbc $0bed			sbc 	gX1+1
.19f7	8d f9 0b	sta $0bf9			sta 	gdX+1
.19fa	38		sec				sec
.19fb	ad ee 0b	lda $0bee			lda 	gY1
.19fe	ed f2 0b	sbc $0bf2			sbc 	gY2
.1a01	8d fa 0b	sta $0bfa			sta 	gdy
.1a04	ad ef 0b	lda $0bef			lda 	gY1+1
.1a07	ed f3 0b	sbc $0bf3			sbc 	gY2+1
.1a0a	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a0d	ad fb 0b	lda $0bfb			lda 	gdy+1 						; save sign of dy
.1a10	8d 09 0c	sta $0c09			sta 	gdysign
.1a13	30 12		bmi $1a27			bmi 	_BINormal
.1a15	38		sec				sec
.1a16	a9 00		lda #$00			lda 	#0
.1a18	ed fa 0b	sbc $0bfa			sbc 	gdy
.1a1b	8d fa 0b	sta $0bfa			sta 	gdy
.1a1e	a9 00		lda #$00			lda 	#0
.1a20	ed fb 0b	sbc $0bfb			sbc 	gdy+1
.1a23	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a26	60		rts				rts
.1a27					_BINormal:
.1a27	18		clc				clc
.1a28	ad f8 0b	lda $0bf8			lda 	gdx
.1a2b	6d fa 0b	adc $0bfa			adc 	gdy
.1a2e	8d f4 0b	sta $0bf4			sta 	gError
.1a31	ad f9 0b	lda $0bf9			lda 	gdx+1
.1a34	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a37	8d f5 0b	sta $0bf5			sta 	gError+1
.1a3a	60		rts				rts
.1a3b					BresenhamIteration:
.1a3b	ad f4 0b	lda $0bf4			lda 	gError
.1a3e	0a		asl a				asl 	a
.1a3f	8d f6 0b	sta $0bf6			sta 	g2Error
.1a42	ad f5 0b	lda $0bf5			lda 	gError+1
.1a45	2a		rol a				rol 	a
.1a46	8d f7 0b	sta $0bf7			sta 	g2Error+1
.1a49	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a4b	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a4d	20 6c 1c	jsr $1c6c			jsr 	CompareCoordsSigned
.1a50	30 03		bmi $1a55			bmi 	_BINoE2DY
.1a52	20 62 1a	jsr $1a62			jsr 	BresenhamE2GEDY
.1a55					_BINoE2DY:
.1a55	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a57	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a59	20 6c 1c	jsr $1c6c			jsr 	CompareCoordsSigned
.1a5c	30 03		bmi $1a61			bmi 	_BINoDXE2
.1a5e	20 81 1a	jsr $1a81			jsr 	BresenhamDXGEE2
.1a61					_BINoDXE2:
.1a61	60		rts				rts
.1a62					BresenhamE2GEDY:
.1a62	18		clc				clc
.1a63	ad f4 0b	lda $0bf4			lda 	gError
.1a66	6d fa 0b	adc $0bfa			adc 	gdy
.1a69	8d f4 0b	sta $0bf4			sta 	gError
.1a6c	ad f5 0b	lda $0bf5			lda 	gError+1
.1a6f	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a72	8d f5 0b	sta $0bf5			sta 	gError+1
.1a75	ee ec 0b	inc $0bec			inc 	gX1
.1a78	d0 03		bne $1a7d			bne 	_BE2Skip
.1a7a	ee ed 0b	inc $0bed			inc 	gX1+1
.1a7d					_BE2Skip:
.1a7d	20 c4 1c	jsr $1cc4			jsr 	gdMvRight
.1a80	60		rts				rts
.1a81					BresenhamDXGEE2:
.1a81	18		clc				clc
.1a82	ad f4 0b	lda $0bf4			lda 	gError
.1a85	6d f8 0b	adc $0bf8			adc 	gdx
.1a88	8d f4 0b	sta $0bf4			sta 	gError
.1a8b	ad f5 0b	lda $0bf5			lda 	gError+1
.1a8e	6d f9 0b	adc $0bf9			adc 	gdx+1
.1a91	8d f5 0b	sta $0bf5			sta 	gError+1
.1a94	ad 09 0c	lda $0c09			lda 	gdySign
.1a97	10 0c		bpl $1aa5			bpl 	_BEDXInvertY
.1a99	ee ee 0b	inc $0bee			inc 	gY1
.1a9c	d0 03		bne $1aa1			bne 	_BEDXSkip
.1a9e	ee ef 0b	inc $0bef			inc 	gY1+1
.1aa1					_BEDXSkip:
.1aa1	20 ff 1c	jsr $1cff			jsr 	gdMvDown
.1aa4	60		rts				rts
.1aa5					_BEDXInvertY:
.1aa5	ad ee 0b	lda $0bee			lda 	gY1
.1aa8	d0 03		bne $1aad			bne 	_BEDXSkip2
.1aaa	ce ef 0b	dec $0bef			dec 	gY1+1
.1aad					_BEDXSkip2:
.1aad	ce ee 0b	dec $0bee			dec 	gY1
.1ab0	20 da 1c	jsr $1cda			jsr 	gdMvUp
.1ab3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1ab4					Command_Plot:
.1ab4	a9 bc		lda #$bc			lda 	#PlotHandler & $FF
.1ab6	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ab8	20 c0 18	jsr $18c0			jsr 	GHandler
.1abb	60		rts				rts
.1abc					PlotHandler:
.1abc	a0 04		ldy #$04			ldy 	#gX2-gX1
.1abe	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1ac1	b0 03		bcs $1ac6			bcs 	_PHExit 					; off screen, return with CS.
.1ac3	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; pixel in Ink.
.1ac6	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c0a					frameFlag:
>0c0a							.fill 	1
.1ac7					Command_Rect:
.1ac7	a9 db		lda #$db			lda 	#RectHandler & $FF
.1ac9	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1acb	20 c0 18	jsr $18c0			jsr 	GHandler
.1ace	60		rts				rts
.1acf					Command_Frame:
.1acf	a9 d7		lda #$d7			lda 	#FrameHandler & $FF
.1ad1	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1ad3	20 c0 18	jsr $18c0			jsr 	GHandler
.1ad6	60		rts				rts
.1ad7					FrameHandler:
.1ad7	a9 01		lda #$01			lda 	#1
.1ad9	d0 02		bne $1add			bne 	RectHandler+2
.1adb					RectHandler:
.1adb	a9 00		lda #$00			lda 	#0
.1add	8d 0a 0c	sta $0c0a			sta 	frameFlag
.1ae0	20 83 1c	jsr $1c83			jsr 	BoxSort 					; sort so topleft/bottom right
.1ae3	20 0c 1b	jsr $1b0c			jsr 	DrawBoxPart 				; solid first line
.1ae6					_FHLoop:
.1ae6	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1ae8	a0 06		ldy #$06			ldy 	#gY2-gX1
.1aea	20 5f 1c	jsr $1c5f			jsr 	CompareCoords
.1aed	b0 19		bcs $1b08			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1aef	ad 0a 0c	lda $0c0a			lda 	frameFlag 					; identify solid or frame ?
.1af2	f0 06		beq $1afa			beq 	_FHIsSolidRect
.1af4	20 25 1b	jsr $1b25			jsr 	DrawBoxEnds
.1af7	4c fd 1a	jmp $1afd			jmp 	_FHNext
.1afa					_FHIsSolidRect:
.1afa	20 0c 1b	jsr $1b0c			jsr 	DrawBoxPart
.1afd					_FHNext:
.1afd	ee ee 0b	inc $0bee			inc 	gY1 						; bump Y1 and loop back.
.1b00	d0 e4		bne $1ae6			bne 	_FHLoop
.1b02	ee ef 0b	inc $0bef			inc 	gY1+1
.1b05	4c e6 1a	jmp $1ae6			jmp 	_FHLoop
.1b08					_FHLastLine:
.1b08	20 0c 1b	jsr $1b0c			jsr 	DrawBoxPart 				; solid last line whatever
.1b0b					_FHExit:
.1b0b	60		rts				rts
.1b0c					DrawBoxPart:
.1b0c	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b0e	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b11	38		sec				sec 								; calculate line length => temp0
.1b12	ad f0 0b	lda $0bf0			lda 	gX2
.1b15	ed ec 0b	sbc $0bec			sbc 	gX1
.1b18	48		pha				pha
.1b19	ad f1 0b	lda $0bf1			lda 	gX2+1
.1b1c	ed ed 0b	sbc $0bed			sbc 	gx1+1
.1b1f	aa		tax				tax
.1b20	68		pla				pla 								; line length in XA.
.1b21	20 3d 1b	jsr $1b3d			jsr 	DrawHorizontalLine
.1b24	60		rts				rts
.1b25					DrawBoxEnds:
.1b25	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b27	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b2a	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; LH end.
.1b2d	ad f0 0b	lda $0bf0			lda 	gX2 						; set position to X2,Y1
.1b30	ae f1 0b	ldx $0bf1			ldx 	gX2+1
.1b33	20 10 1e	jsr $1e10			jsr 	gdSetX
.1b36	20 21 1d	jsr $1d21			jsr		gdSetDrawPosition 			; update position.
.1b39	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; RH end.
.1b3c	60		rts				rts
.1b3d					DrawHorizontalLine:
.1b3d	86 32		stx $32				stx 	tempShort
.1b3f	aa		tax				tax
.1b40	a4 32		ldy $32				ldy 	tempShort
.1b42	ad fe 0b	lda $0bfe			lda 	gdInk
.1b45	4c 1e 1e	jmp $1e1e			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c0b					RenderFunction:
>0c0b							.fill 	2
.0c0d					RenderWidth:
>0c0d							.fill 	1
.0c0e					RenderHeight:
>0c0e							.fill 	1
.0c0f					RenderType:
>0c0f							.fill 	1
.0c10					RenderCache:
>0c10							.fill 	64
.1b48					ImageRenderer:
.1b48	8e 0c 0c	stx $0c0c			stx 	RenderFunction+1
.1b4b	8d 0b 0c	sta $0c0b			sta 	RenderFunction
.1b4e	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b50	20 31 1c	jsr $1c31			jsr 	CallRenderFunction
.1b53	8d 0f 0c	sta $0c0f			sta 	RenderType 					; and save it.
.1b56	8e 0d 0c	stx $0c0d			stx 	RenderWidth
.1b59	8c 0e 0c	sty $0c0e			sty 	RenderHeight
.1b5c	8a		txa				txa 								; check X coordinate
.1b5d	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b5f	20 f8 1b	jsr $1bf8			jsr 	RenderCheckRange
.1b62	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; check Y coordinate
.1b65	a2 02		ldx #$02			ldx 	#2
.1b67	20 f8 1b	jsr $1bf8			jsr 	RenderCheckRange
.1b6a	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b6c					_IRLoop1:
.1b6c	5a		phy				phy
.1b6d	20 d4 1b	jsr $1bd4			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1b70	20 31 1c	jsr $1c31			jsr 	CallRenderFunction 			; fill the rendering cache.
.1b73	7a		ply				ply
.1b74	ae 00 0c	ldx $0c00			ldx 	gdSize 						; number of times to do the row.
.1b77					_IRLoop2:
.1b77	20 84 1b	jsr $1b84			jsr 	RenderDrawRow 				; draw one row.
.1b7a	ca		dex				dex 								; scale # times.
.1b7b	d0 fa		bne $1b77			bne 	_IRLoop2
.1b7d	c8		iny				iny 								; next vertical row
.1b7e	cc 0e 0c	cpy $0c0e			cpy 	RenderHeight 				; done the lot ?
.1b81	d0 e9		bne $1b6c			bne 	_IRLoop1
.1b83	60		rts				rts
.1b84					RenderDrawRow:
.1b84	da		phx				phx
.1b85	5a		phy				phy
.1b86	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1b88	20 49 1c	jsr $1c49			jsr 	SetupXY
.1b8b	7a		ply				ply
.1b8c	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1b8e					_RDRLoop1:
.1b8e	20 a1 1b	jsr $1ba1			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1b91	e8		inx				inx
.1b92	ec 0d 0c	cpx $0c0d			cpx 	RenderWidth 				; until done the whole lot.
.1b95	d0 f7		bne $1b8e			bne 	_RDRLoop1
.1b97	ee f2 0b	inc $0bf2			inc 	gY2 						; next line down
.1b9a	d0 03		bne $1b9f			bne 	_RDRNoCarry
.1b9c	ee f3 0b	inc $0bf3			inc 	gY2+1
.1b9f					_RDRNoCarry:
.1b9f	fa		plx				plx
.1ba0	60		rts				rts
.1ba1					RenderDrawPixelSet:
.1ba1	da		phx				phx
.1ba2	5a		phy				phy
.1ba3	20 d4 1b	jsr $1bd4			jsr 	RenderFlipXY 				; flip positions as required.
.1ba6	20 be 1b	jsr $1bbe			jsr 	RenderGetInk				; get colour to draw with.
.1ba9	ae 00 0c	ldx $0c00			ldx 	gdSize 						; X counts the size.
.1bac					_RDPSLoop:
.1bac	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bae	f0 03		beq $1bb3			beq 	_RDPSNoDraw
.1bb0	20 66 1d	jsr $1d66			jsr 	gdPlotA 					; draw A otherwise
.1bb3					_RDPSNoDraw:
.1bb3	48		pha				pha 								; move right
.1bb4	20 c4 1c	jsr $1cc4			jsr 	gdMvRight
.1bb7	68		pla				pla
.1bb8	ca		dex				dex
.1bb9	d0 f1		bne $1bac			bne 	_RDPSLoop 					; do it size times.
.1bbb	7a		ply				ply
.1bbc	fa		plx				plx
.1bbd	60		rts				rts
.1bbe					RenderGetInk:
.1bbe	ad 0f 0c	lda $0c0f			lda 	RenderType 					; type, if 0 it's a bitmap
.1bc1	f0 04		beq $1bc7			beq 	_RGIBitmap
.1bc3	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bc6	60		rts				rts
.1bc7					_RGIBitmap:
.1bc7	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bca	f0 04		beq $1bd0			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bcc	ad fe 0b	lda $0bfe			lda 	gdInk
.1bcf	60		rts				rts
.1bd0					_RGIBPaper:
.1bd0	ad ff 0b	lda $0bff			lda 	gdPaper
.1bd3	60		rts				rts
.1bd4					RenderFlipXY:
.1bd4	ad 02 0c	lda $0c02			lda 	gdFlip 						; check any flip at all
.1bd7	29 03		and #$03			and 	#3
.1bd9	f0 1c		beq $1bf7			beq 	_RFExit
.1bdb	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1bdc	90 09		bcc $1be7			bcc 	_RFNoHFlip
.1bde	ad 0d 0c	lda $0c0d			lda 	RenderWidth 				; X Flip
.1be1	86 32		stx $32				stx 	tempShort
.1be3	18		clc				clc
.1be4	e5 32		sbc $32				sbc 	tempShort
.1be6	aa		tax				tax
.1be7					_RFNoHFlip:
.1be7	ad 02 0c	lda $0c02			lda 	gdFlip
.1bea	29 02		and #$02			and 	#2 							; bit 1 check
.1bec	f0 09		beq $1bf7			beq 	_RFExit
.1bee	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; Y Flip
.1bf1	84 32		sty $32				sty 	tempShort
.1bf3	18		clc				clc
.1bf4	e5 32		sbc $32				sbc 	tempShort
.1bf6	a8		tay				tay
.1bf7					_RFExit:
.1bf7	60		rts				rts
.1bf8					RenderCheckRange:
.1bf8	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1bfa	ac 00 0c	ldy $0c00			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1bfd	84 2a		sty $2a				sty 	temp0
.1bff	f0 2b		beq $1c2c			beq 	_RCRValue
.1c01	a9 00		lda #$00			lda 	#0 							; total
.1c03					_RCRMultiply:
.1c03	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c05	90 05		bcc $1c0c			bcc 	_RCRNoAdd 					; not adding this time.
.1c07	18		clc				clc
.1c08	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c0a	b0 20		bcs $1c2c			bcs 	_RCRValue 					; overflow
.1c0c					_RCRNoAdd:
.1c0c	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c0e	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c10	d0 f1		bne $1c03			bne 	_RCRMultiply
.1c12	18		clc				clc 								; add to x2 or y2, store in temp0
.1c13	7d f0 0b	adc $0bf0,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c16	85 2a		sta $2a				sta 	temp0
.1c18	bd f1 0b	lda $0bf1,x			lda 	gX2+1,x
.1c1b	69 00		adc #$00			adc 	#0
.1c1d	85 2b		sta $2b				sta 	temp0+1
.1c1f	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c21	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1c24	a5 2b		lda $2b				lda 	temp0+1
.1c26	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1c29	b0 01		bcs $1c2c			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c2b	60		rts				rts
.1c2c					_RCRValue:
.1c2c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c2e	20 09 15	jsr $1509		jsr	errorHandler
.1c31					CallRenderFunction:
.1c31	6c 0b 0c	jmp ($0c0b)			jmp 	(RenderFunction)
.1c34					TestImageAccess:
.1c34	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c36	f0 0a		beq $1c42			beq 	_TIAGetInfo
.1c38	a0 3f		ldy #$3f			ldy 	#63
.1c3a					_TIACreate:
.1c3a	98		tya				tya
.1c3b	99 10 0c	sta $0c10,y			sta 	RenderCache,y
.1c3e	88		dey				dey
.1c3f	10 f9		bpl $1c3a			bpl 	_TIACreate
.1c41	60		rts				rts
.1c42					_TIAGetInfo:
.1c42	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c44	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c46	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c48	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c49					SetupXY:
.1c49	b9 ec 0b	lda $0bec,y			lda 	gX1,y
.1c4c	be ed 0b	ldx $0bed,y			ldx 	gX1+1,y
.1c4f	20 10 1e	jsr $1e10			jsr 	gdSetX
.1c52	b9 ee 0b	lda $0bee,y			lda 	gY1,y
.1c55	be ef 0b	ldx $0bef,y			ldx 	gY1+1,y
.1c58	20 17 1e	jsr $1e17			jsr 	gdSetY
.1c5b	20 21 1d	jsr $1d21			jsr 	gdSetDrawPosition
.1c5e	60		rts				rts
.1c5f					CompareCoords:
.1c5f	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c62	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c65	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1c68	f9 ed 0b	sbc $0bed,y			sbc 	gX1+1,y
.1c6b	60		rts				rts
.1c6c					CompareCoordsSigned:
.1c6c	20 5f 1c	jsr $1c5f			jsr 	CompareCoords
.1c6f	50 02		bvc $1c73			bvc 	_CCSExit
.1c71	49 80		eor #$80			eor 	#$80
.1c73					_CCSExit:
.1c73	60		rts				rts
.1c74					CompareCoordsEq:
.1c74	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c77	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c7a	d0 06		bne $1c82			bne 	_CCEExit
.1c7c	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1c7f	d9 ed 0b	cmp $0bed,y			cmp 	gX1+1,y
.1c82					_CCEExit:
.1c82	60		rts				rts
.1c83					BoxSort:
.1c83	a2 00		ldx #$00			ldx 	#gx1-gx1
.1c85	a0 04		ldy #$04			ldy 	#gx2-gx1
.1c87	20 98 1c	jsr $1c98			jsr 	GCompareCoords
.1c8a	20 a5 1c	jsr $1ca5			jsr 	GSortMinMaxCoords
.1c8d	a2 02		ldx #$02			ldx 	#gy1-gx1
.1c8f	a0 06		ldy #$06			ldy 	#gy2-gx1
.1c91	20 98 1c	jsr $1c98			jsr 	GCompareCoords
.1c94	20 a5 1c	jsr $1ca5			jsr 	GSortMinMaxCoords
.1c97	60		rts				rts
.1c98					GCompareCoords:
.1c98	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1c9b	d9 ec 0b	cmp $0bec,y			cmp 	gx1,y
.1c9e	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1ca1	f9 ed 0b	sbc $0bed,y			sbc 	gx1+1,y
.1ca4	60		rts				rts
.1ca5					GSortMinMaxCoords:
.1ca5	90 1c		bcc $1cc3			bcc 	GSMMCExit
.1ca7					GSwapCoords:
.1ca7	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1caa	48		pha				pha
.1cab	b9 ec 0b	lda $0bec,y			lda 	gx1,y
.1cae	9d ec 0b	sta $0bec,x			sta 	gx1,x
.1cb1	68		pla				pla
.1cb2	99 ec 0b	sta $0bec,y			sta 	gx1,y
.1cb5	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1cb8	48		pha				pha
.1cb9	b9 ed 0b	lda $0bed,y			lda 	gx1+1,y
.1cbc	9d ed 0b	sta $0bed,x			sta 	gx1+1,x
.1cbf	68		pla				pla
.1cc0	99 ed 0b	sta $0bed,y			sta 	gx1+1,y
.1cc3					GSMMCExit:
.1cc3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1cc4					gdMvRight:
.1cc4	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1cc7	d0 08		bne $1cd1			bne 	_gdMR0
.1cc9	ee 21 9f	inc $9f21			inc 	$9F21
.1ccc	d0 03		bne $1cd1			bne 	_gdMR0
.1cce	ee 22 9f	inc $9f22			inc 	$9F22
.1cd1					_gdMR0:
.1cd1	ee 54 0c	inc $0c54			inc 	gdXPos
.1cd4	d0 03		bne $1cd9			bne 	_gdMR1
.1cd6	ee 55 0c	inc $0c55			inc 	gdXPos+1
.1cd9					_gdMR1:
.1cd9	60		rts				rts
.1cda					gdMvUp:
.1cda	ad 56 0c	lda $0c56			lda 	gdYPos 						; decrement Y Pos
.1cdd	d0 03		bne $1ce2			bne 	_gdMU1
.1cdf	ce 57 0c	dec $0c57			dec 	gdYPos+1
.1ce2	ce 56 0c	dec $0c56	_gdMU1:	dec 	gdYPos
.1ce5	38		sec				sec 								; adjust position by -320
.1ce6	ad 20 9f	lda $9f20			lda 	$9F20
.1ce9	e9 40		sbc #$40			sbc 	#64
.1ceb	8d 20 9f	sta $9f20			sta 	$9F20
.1cee	ad 21 9f	lda $9f21			lda 	$9F21
.1cf1	e9 01		sbc #$01			sbc 	#1
.1cf3	8d 21 9f	sta $9f21			sta 	$9F21
.1cf6	ad 22 9f	lda $9f22			lda 	$9F22
.1cf9	e9 00		sbc #$00			sbc 	#0
.1cfb	8d 22 9f	sta $9f22			sta 	$9F22
.1cfe	60		rts				rts
.1cff					gdMvDown:
.1cff	ee 56 0c	inc $0c56			inc 	gdYPos 						; decrement Y Pos
.1d02	d0 03		bne $1d07			bne 	_gdMU1
.1d04	ee 57 0c	inc $0c57			inc 	gdYPos+1
.1d07					_gdMU1:
.1d07	18		clc				clc 								; adjust position by -320
.1d08	ad 20 9f	lda $9f20			lda 	$9F20
.1d0b	69 40		adc #$40			adc 	#64
.1d0d	8d 20 9f	sta $9f20			sta 	$9F20
.1d10	ad 21 9f	lda $9f21			lda 	$9F21
.1d13	69 01		adc #$01			adc 	#1
.1d15	8d 21 9f	sta $9f21			sta 	$9F21
.1d18	ad 22 9f	lda $9f22			lda 	$9F22
.1d1b	69 00		adc #$00			adc 	#0
.1d1d	8d 22 9f	sta $9f22			sta 	$9F22
.1d20	60		rts				rts
.1d21					gdSetDrawPosition:
.1d21	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d23	85 2a		sta $2a				sta 	temp0
.1d25	ad 56 0c	lda $0c56			lda 	gdYPos
.1d28	85 2b		sta $2b				sta 	temp0+1
.1d2a	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d2c	66 2a		ror $2a				ror 	temp0
.1d2e	46 2b		lsr $2b				lsr 	temp0+1
.1d30	66 2a		ror $2a				ror 	temp0
.1d32	ad 56 0c	lda $0c56			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d35	18		clc				clc
.1d36	65 2b		adc $2b				adc 	temp0+1
.1d38	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d3a	18		clc				clc
.1d3b	a5 2a		lda $2a				lda 	temp0
.1d3d	6d 54 0c	adc $0c54			adc 	gdXPos
.1d40	85 2a		sta $2a				sta 	temp0
.1d42	a5 2b		lda $2b				lda 	temp0+1
.1d44	6d 55 0c	adc $0c55			adc 	gdXPos+1
.1d47	85 2b		sta $2b				sta 	temp0+1
.1d49	18		clc				clc
.1d4a	ad 51 0c	lda $0c51			lda 	gdBitmapAddress
.1d4d	65 2a		adc $2a				adc 	temp0
.1d4f	8d 20 9f	sta $9f20			sta 	$9F20
.1d52	ad 52 0c	lda $0c52			lda 	gdBitmapAddress+1
.1d55	65 2b		adc $2b				adc 	temp0+1
.1d57	8d 21 9f	sta $9f21			sta 	$9F21
.1d5a	ad 53 0c	lda $0c53			lda 	gdBitmapAddress+2
.1d5d	69 00		adc #$00			adc 	#0
.1d5f	8d 22 9f	sta $9f22			sta 	$9F22
.1d62	60		rts				rts
.1d63					gdPlotInk:
.1d63	ad fe 0b	lda $0bfe			lda 	gdInk
.1d66					gdPlotA:
.1d66	8d 23 9f	sta $9f23			sta 	$9F23
.1d69	60		rts				rts
.1d6a					gdPlotPaper:
.1d6a	ad ff 0b	lda $0bff			lda 	gdPaper
.1d6d	c9 ff		cmp #$ff			cmp 	#$FF
.1d6f	f0 03		beq $1d74			beq 	_gdPPSkip
.1d71	8d 23 9f	sta $9f23			sta 	$9F23
.1d74					_gdPPSkip:
.1d74	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c50					gdEnabled:
>0c50							.fill 	1
.0c51					gdBitmapAddress:
>0c51							.fill 	3
.0c54					gdXPos:
>0c54							.fill 	2
.0c56					gdYPos:
>0c56							.fill 	2
.1d75					gdModeChanged:
.1d75	da		phx				phx
.1d76	5a		phy				phy
.1d77	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d79	8d 50 0c	sta $0c50			sta 	gdEnabled
.1d7c	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1d7f	c9 40		cmp #$40			cmp 	#$40
.1d81	d0 1f		bne $1da2			bne 	_gdExit
.1d83	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1d86	c9 40		cmp #$40			cmp 	#$40
.1d88	d0 18		bne $1da2			bne 	_gdExit
.1d8a	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1d8d	0a		asl a				asl 	a 							;
.1d8e	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1d8f	10 09		bpl $1d9a			bpl 	_gdNotLayer1
.1d91	48		pha				pha 								; save A
.1d92	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1d94	20 a8 1d	jsr $1da8			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d97	68		pla				pla 								; restore A
.1d98	b0 08		bcs $1da2			bcs 	_gdExit 					; if successful then exit
.1d9a					_gdNotLayer1:
.1d9a	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1d9b	10 05		bpl $1da2			bpl 	_gdExit 					; if not enabled, exit
.1d9d	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1d9f	20 a8 1d	jsr $1da8			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1da2					_gdExit:
.1da2	20 dc 1d	jsr $1ddc			jsr 	gdClearGraphics 			; clear graphics display.
.1da5	7a		ply				ply
.1da6	fa		plx				plx
.1da7	60		rts				rts
.1da8					gdCheckBitmap:
.1da8	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1dab	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1dad	d0 14		bne $1dc3			bne 	_gdCBFail
.1daf	ee 50 0c	inc $0c50			inc 	gdEnabled 					; set the enabled flag to non zero.
.1db2	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1db5	0a		asl a				asl 	a
.1db6	8d 52 0c	sta $0c52			sta 	gdBitmapAddress+1
.1db9	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1dbb	8d 53 0c	sta $0c53			sta 	gdBitmapAddress+2
.1dbe	a9 00		lda #$00			lda 	#$00
.1dc0	8d 51 0c	sta $0c51			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dc3					_gdCBFail:
.1dc3	18		clc				clc
.1dc4	60		rts				rts
.1dc5					CommandClg:
.1dc5	b1 28		lda ($28),y			lda 	(codePtr),y
.1dc7	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1dc9	d0 0d		bne $1dd8			bne 	_CCLClear
.1dcb	c8		iny				iny
.1dcc	a9 00		lda #$00			lda 	#0
.1dce	a2 0c		ldx #$0c		ldx	#12
.1dd0	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1dd3	a5 98		lda $98				lda 	esInt0
.1dd5	8d ff 0b	sta $0bff			sta 	gdPaper
.1dd8					_CCLClear:
.1dd8	20 dc 1d	jsr $1ddc			jsr 	gdClearGraphics
.1ddb	60		rts				rts
.1ddc					gdClearGraphics:
.1ddc	da		phx				phx
.1ddd	5a		phy				phy
.1dde	ad 50 0c	lda $0c50			lda 	gdEnabled 					; screen enabled
.1de1	f0 2a		beq $1e0d			beq 	_gdCGExit
.1de3	a9 40		lda #$40			lda 	#(320) & $FF
.1de5	8d 03 0c	sta $0c03			sta 	gdXLimit
.1de8	a9 01		lda #$01			lda 	#(320) >> 8
.1dea	8d 04 0c	sta $0c04			sta 	1+(gdXLimit)
.1ded	a9 c8		lda #$c8			lda 	#(200) & $FF
.1def	8d 05 0c	sta $0c05			sta 	gdYLimit
.1df2	a9 00		lda #$00			lda 	#(200) >> 8
.1df4	8d 06 0c	sta $0c06			sta 	1+(gdYLimit)
.1df7	a9 00		lda #$00			lda 	#0 							; home cursor
.1df9	aa		tax				tax
.1dfa	20 10 1e	jsr $1e10			jsr 	gdSetX
.1dfd	20 17 1e	jsr $1e17			jsr 	gdSetY
.1e00	20 21 1d	jsr $1d21			jsr 	gdSetDrawPosition 			; set the draw position.
.1e03	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e05	a2 00		ldx #$00			ldx 	#0
.1e07	ad ff 0b	lda $0bff			lda 	gdPaper
.1e0a	20 1e 1e	jsr $1e1e			jsr 	gdOptHorizontalWriter
.1e0d					_gdCGExit:
.1e0d	7a		ply				ply
.1e0e	fa		plx				plx
.1e0f	60		rts				rts
.1e10					gdSetX:
.1e10	8d 54 0c	sta $0c54			sta 	gdXPos
.1e13	8e 55 0c	stx $0c55			stx 	gdXPos+1
.1e16	60		rts				rts
.1e17					gdSetY:
.1e17	8d 56 0c	sta $0c56			sta 	gdYPos
.1e1a	8e 57 0c	stx $0c57			stx 	gdYPos+1
.1e1d	60		rts				rts
.1e1e					gdOptHorizontalWriter:
.1e1e	48		pha				pha
.1e1f	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e22	09 10		ora #$10			ora 	#$10
.1e24	8d 22 9f	sta $9f22			sta 	$9F22
.1e27	68		pla				pla
.1e28					_gdOLoop:
.1e28	8d 23 9f	sta $9f23			sta 	$9F23
.1e2b	e0 00		cpx #$00			cpx 	#0
.1e2d	d0 05		bne $1e34			bne 	_gdNoBorrow
.1e2f	c0 00		cpy #$00			cpy 	#0
.1e31	f0 05		beq $1e38			beq 	_gdExit
.1e33	88		dey				dey
.1e34					_gdNoBorrow:
.1e34	ca		dex				dex
.1e35	4c 28 1e	jmp $1e28			jmp 	_gdOLoop
.1e38					_gdExit:
.1e38	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e39					Unary_Clock:
.1e39	a2 0c		ldx #$0c		ldx	#12
.1e3b	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1e3e	48		pha				pha 								; save stack pos
.1e3f	a2 04		ldx #$04		ldx	#4
.1e41	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1e44	5a		phy				phy
.1e45	20 50 ff	jsr $ff50			jsr 	$FF50
.1e48	7a		ply				ply
.1e49	68		pla				pla 								; restore, repush, put into X to read offset
.1e4a	48		pha				pha
.1e4b	aa		tax				tax
.1e4c	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e4e	c9 06		cmp #$06			cmp 	#6
.1e50	b0 0d		bcs $1e5f			bcs 	_UCValue
.1e52	aa		tax				tax 								; index in X and read RTC.
.1e53	b5 02		lda $02,x			lda 	2,x
.1e55	85 32		sta $32				sta 	tempshort
.1e57	68		pla				pla 								; restore number stack index.
.1e58	aa		tax				tax
.1e59	a5 32		lda $32				lda 	tempShort
.1e5b	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e5d	8a		txa				txa
.1e5e	60		rts				rts
.1e5f					_UCValue:
.1e5f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e61	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e64					Unary_JoyX:
.1e64	38		sec				sec
.1e65	b0 01		bcs $1e68			bcs 	JoystickRead
.1e67					Unary_JoyY:
.1e67	18		clc				clc
.1e68					JoystickRead:
.1e68	48		pha				pha 								; save stack position
.1e69	08		php				php 								; save test flag.
.1e6a	a2 04		ldx #$04		ldx	#4
.1e6c	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1e6f	20 c6 1e	jsr $1ec6			jsr 	ReadJoystick 				; read it.
.1e72	28		plp				plp
.1e73	b0 02		bcs $1e77			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e75	4a		lsr a				lsr 	a
.1e76	4a		lsr a				lsr 	a
.1e77					_JRNoShift:
.1e77	29 03		and #$03			and 	#3 							; isolate the test bits.
.1e79	f0 0d		beq $1e88			beq 	JoyReturnA 					; if nothing pressed, return A.
.1e7b	c9 03		cmp #$03			cmp 	#3
.1e7d	f0 07		beq $1e86			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1e7f	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1e80	b0 15		bcs $1e97			bcs 	JoyReturn1
.1e82					JoyReturnTrue:
.1e82	a9 ff		lda #$ff			lda 	#$FF
.1e84	d0 02		bne $1e88			bne 	JoyReturnA
.1e86					JoyReturnFalse:
.1e86	a9 00		lda #$00			lda 	#0
.1e88					JoyReturnA:
.1e88	85 32		sta $32				sta 	tempShort 					; return A
.1e8a	fa		plx				plx
.1e8b	a5 32		lda $32				lda 	tempShort
.1e8d	95 98		sta $98,x			sta 	esInt0,x
.1e8f					JoyReturn13:
.1e8f	95 a0		sta $a0,x			sta 	esInt1,x
.1e91	95 a8		sta $a8,x			sta 	esInt2,x
.1e93	95 b0		sta $b0,x			sta 	esInt3,x
.1e95	8a		txa				txa 								; return NSP in A
.1e96	60		rts				rts
.1e97					JoyReturn1:
.1e97	fa		plx				plx
.1e98	a9 01		lda #$01			lda 	#1
.1e9a	95 98		sta $98,x			sta 	esInt0,x
.1e9c	a9 00		lda #$00			lda 	#0
.1e9e	f0 ef		beq $1e8f			beq 	JoyReturn13
.1ea0					Unary_JButton:
.1ea0	48		pha				pha 								; save X on stack, put in X
.1ea1	a2 0c		ldx #$0c		ldx	#12
.1ea3	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1ea6	aa		tax				tax 								; get value to check, push on stack.
.1ea7	b5 98		lda $98,x			lda 	esInt0,x
.1ea9	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1eab	b0 14		bcs $1ec1			bcs 	_UJBadValue
.1ead	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1eaf	48		pha				pha 								; save that shift count on the stack.
.1eb0	a2 04		ldx #$04		ldx	#4
.1eb2	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1eb5	fa		plx				plx
.1eb6	20 c6 1e	jsr $1ec6			jsr 	ReadJoystick 				; joystick read
.1eb9					_UJShift:
.1eb9	4a		lsr a				lsr 	a
.1eba	ca		dex				dex
.1ebb	d0 fc		bne $1eb9			bne 	_UJShift
.1ebd	b0 c3		bcs $1e82			bcs 	JoyReturnTrue
.1ebf	90 c5		bcc $1e86			bcc 	JoyReturnFalse
.1ec1					_UJBadValue:
.1ec1	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ec3	20 09 15	jsr $1509		jsr	errorHandler
.1ec6					ReadJoystick:
.1ec6	da		phx				phx
.1ec7	5a		phy				phy
.1ec8	a9 00		lda #$00			lda 	#0
.1eca	20 56 ff	jsr $ff56			jsr 	$FF56
.1ecd	c0 00		cpy #$00			cpy 	#0
.1ecf	d0 0f		bne $1ee0			bne 	_RJError
.1ed1	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1ed3	d0 02		bne $1ed7			bne 	_RJNoBug
.1ed5	a9 ff		lda #$ff			lda 	#$FF
.1ed7					_RJNoBug:
.1ed7	85 32		sta $32				sta 	tempShort
.1ed9	7a		ply				ply
.1eda	fa		plx				plx
.1edb	a5 32		lda $32				lda 	tempShort
.1edd	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1edf	60		rts				rts
.1ee0					_RJError:
.1ee0	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ee2	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sound.asm

=16					Channels = 16 								; # of sound channels.
.0c58					LiveChannels:
>0c58							.fill 	1
.0c59					ChannelTime:
>0c59							.fill 	Channels 					; # of ticks until channels goes silent if non-zero
.0c69					sndPitch:
>0c69							.fill 	2
.0c6b					sndChannel:
>0c6b							.fill 	1
.0c6c					sndTime:
>0c6c							.fill 	1
.0c6d					sndType:
>0c6d							.fill 	1
.0c6e					sndVolume:
>0c6e							.fill 	1
.1ee5					CommandSound:
.1ee5	a9 00		lda #$00			lda 	#0 							; clear the default sound options
.1ee7	8d 69 0c	sta $0c69			sta 	sndPitch
.1eea	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.1eed	8d 6d 0c	sta $0c6d			sta 	sndType
.1ef0	a9 ff		lda #$ff			lda 	#$FF 						; values are 255,63 are masked.
.1ef2	8d 6b 0c	sta $0c6b			sta 	sndChannel
.1ef5	8d 6e 0c	sta $0c6e			sta 	sndVolume
.1ef8	a9 05		lda #$05			lda 	#5 							; default time is 0.5s
.1efa	8d 6c 0c	sta $0c6c			sta 	sndTime
.1efd					_ComSoundLoop:
.1efd	b1 28		lda ($28),y			lda 	(codePtr),y 				; next token
.1eff	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line/colon do the sound
.1f01	f0 55		beq $1f58			beq 	_CSDoSound
.1f03	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1f05	f0 51		beq $1f58			beq 	_CSDoSound
.1f07	c9 db		cmp #$db			cmp 	#TKW_AT 					; is it AT pitch ?
.1f09	f0 29		beq $1f34			beq 	_CSSetPitch
.1f0b	a2 03		ldx #$03			ldx 	#3 							; look up in the tokens table
.1f0d					_CSCheck:
.1f0d	dd 54 1f	cmp $1f54,x			cmp 	_ComSoundTokens,x 			; if found token update value.
.1f10	f0 10		beq $1f22			beq 	_CSFoundToken
.1f12	ca		dex				dex
.1f13	10 f8		bpl $1f0d			bpl 	_CSCheck
.1f15	c8		iny				iny
.1f16	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR 					; was it sound CLEAR
.1f18	d0 03		bne $1f1d			bne 	_CSSyntax
.1f1a	4c b7 1f	jmp $1fb7			jmp 	SoundReset
.1f1d					_CSSyntax:
.1f1d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1f1f	20 09 15	jsr $1509		jsr	errorHandler
.1f22					_CSFoundToken:
.1f22	da		phx				phx
.1f23	c8		iny				iny 								; skip it
.1f24	a9 00		lda #$00			lda 	#0 							; get a small int
.1f26	a2 0c		ldx #$0c		ldx	#12
.1f28	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1f2b	fa		plx				plx
.1f2c	a5 98		lda $98				lda 	esInt0 						; copy value to setup memory
.1f2e	9d 6b 0c	sta $0c6b,x			sta 	sndChannel,x
.1f31	4c fd 1e	jmp $1efd			jmp 	_ComSoundLoop
.1f34					_CSSetPitch:
.1f34	c8		iny				iny 								; skip AT
.1f35	a9 00		lda #$00			lda 	#0 							; get an integer.
.1f37	a2 0a		ldx #$0a		ldx	#10
.1f39	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1f3c	a5 a8		lda $a8				lda 	esInt2 						; check range
.1f3e	05 b0		ora $b0				ora 	esInt3
.1f40	d0 0d		bne $1f4f			bne 	_CSBadValue
.1f42	a5 98		lda $98				lda 	esInt0	 					; copy into pitch and loop back
.1f44	8d 69 0c	sta $0c69			sta 	sndPitch
.1f47	a5 a0		lda $a0				lda 	esInt1
.1f49	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.1f4c	4c fd 1e	jmp $1efd			jmp 	_ComSoundLoop
.1f4f					_CSBadValue:
.1f4f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f51	20 09 15	jsr $1509		jsr	errorHandler
.1f54					_ComSoundTokens:
>1f54	ce 9b ea cf					.byte 	TKW_TO,TKW_FOR,TKW_TYPE,TKW_STEP
.1f58					_CSDoSound:
.1f58	ae 6b 0c	ldx $0c6b			ldx 	sndChannel 					; if channel >= 16 look for channel unused.
.1f5b	c9 10		cmp #$10			cmp 	#16
.1f5d	90 0f		bcc $1f6e			bcc 	_CSHaveChannel
.1f5f	a2 0f		ldx #$0f			ldx 	#15
.1f61					_CSFindChannel:
.1f61	bd 59 0c	lda $0c59,x			lda 	channelTime,x 				; time is zero e.g. sound off.
.1f64	f0 08		beq $1f6e			beq 	_CSHaveChannel
.1f66	ca		dex				dex
.1f67	10 f8		bpl $1f61			bpl 	_CSFindChannel 				; try all of them
.1f69	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f6b	20 09 15	jsr $1509		jsr	errorHandler
.1f6e					_CSHaveChannel:
.1f6e	ad 6c 0c	lda $0c6c			lda 	sndTime 					; get how long
.1f71	f0 31		beq $1fa4			beq 	_CSExit 					; if zero then exit
.1f73	9d 59 0c	sta $0c59,x			sta 	channelTime,x 				; set the channel time for this channel.
.1f76	ee 58 0c	inc $0c58			inc 	liveChannels 				; one more channel playing
.1f79	8a		txa				txa 								; point to Channel A
.1f7a	20 a5 1f	jsr $1fa5			jsr 	CSPointChannel
.1f7d	ad 69 0c	lda $0c69			lda 	sndPitch 					; write pitch out
.1f80	8d 23 9f	sta $9f23			sta 	$9F23
.1f83	ad 6a 0c	lda $0c6a			lda 	sndPitch+1
.1f86	8d 23 9f	sta $9f23			sta 	$9F23
.1f89	ad 6e 0c	lda $0c6e			lda 	sndVolume 					; get volume, max out at 63.
.1f8c	c9 40		cmp #$40			cmp 	#64
.1f8e	90 02		bcc $1f92			bcc 	_CSHaveVolume
.1f90	a9 3f		lda #$3f			lda 	#63
.1f92					_CSHaveVolume:
.1f92	09 c0		ora #$c0			ora 	#$C0 						; both channels
.1f94	8d 23 9f	sta $9f23			sta 	$9F23 						; write out.
.1f97	ad 6d 0c	lda $0c6d			lda 	sndType 					; get waveform (bits 0-1 Pulse, Sawtooth, Triangle Noise)
.1f9a	6a		ror a				ror 	a 							; rotate into position 7,6
.1f9b	6a		ror a				ror 	a
.1f9c	6a		ror a				ror 	a
.1f9d	29 c0		and #$c0			and 	#$C0 						; mask other bits
.1f9f	09 3f		ora #$3f			ora 	#63 						; 50% duty cycle.
.1fa1	8d 23 9f	sta $9f23			sta 	$9F23
.1fa4					_CSExit:
.1fa4	60		rts				rts
.1fa5					CSPointChannel:
.1fa5	0a		asl a				asl 	a 							; 4 bytes / channel
.1fa6	0a		asl a				asl 	a
.1fa7	09 c0		ora #$c0			ora 	#$C0 						; at $1F9C0
.1fa9	8d 20 9f	sta $9f20			sta 	$9F20
.1fac	a9 f9		lda #$f9			lda 	#$F9
.1fae	8d 21 9f	sta $9f21			sta 	$9F21
.1fb1	a9 11		lda #$11			lda 	#$11
.1fb3	8d 22 9f	sta $9f22			sta 	$9F22
.1fb6	60		rts				rts
.1fb7					SoundReset:
.1fb7	a9 00		lda #$00			lda 	#0							; no channels playing
.1fb9	8d 58 0c	sta $0c58			sta 	LiveChannels
.1fbc	a2 0f		ldx #$0f			ldx 	#Channels-1
.1fbe					_SCClear:
.1fbe	9d 59 0c	sta $0c59,x			sta 	ChannelTime,x
.1fc1	ca		dex				dex
.1fc2	10 fa		bpl $1fbe			bpl 	_SCClear
.1fc4	a9 c0		lda #$c0			lda 	#$C0 						; point VRAM data pointer to $1F9C0 increment
.1fc6	8d 20 9f	sta $9f20			sta 	$9F20
.1fc9	a9 f9		lda #$f9			lda 	#$F9
.1fcb	8d 21 9f	sta $9f21			sta 	$9F21
.1fce	a9 11		lda #$11			lda 	#$11
.1fd0	8d 22 9f	sta $9f22			sta 	$9F22
.1fd3					_SCClear2:
.1fd3	a9 00		lda #$00			lda 	#0
.1fd5	8d 23 9f	sta $9f23			sta 	$9F23
.1fd8	ad 20 9f	lda $9f20			lda 	$9F20
.1fdb	d0 f6		bne $1fd3			bne 	_SCClear2
.1fdd	60		rts				rts
.1fde					Unary_Playing:
.1fde	48		pha				pha 						; save stack position
.1fdf	b1 28		lda ($28),y			lda 	(codePtr),y 		; check for playing()
.1fe1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1fe3	f0 2d		beq $2012			beq 	_UPCount
.1fe5	68		pla				pla 						; get SP back.
.1fe6	48		pha				pha
.1fe7	a2 0c		ldx #$0c		ldx	#12
.1fe9	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1fec	a2 04		ldx #$04		ldx	#4
.1fee	20 1b 3f	jsr $3f1b		jsr	mainHandler
.1ff1	fa		plx				plx
.1ff2	86 32		stx $32				stx 	tempShort 			; save X
.1ff4	b5 98		lda $98,x			lda 	esInt0,x 			; check level, must be < 16
.1ff6	c9 10		cmp #$10			cmp 	#16
.1ff8	b0 13		bcs $200d			bcs 	_UPValue
.1ffa	aa		tax				tax 						; get the time
.1ffb	bd 59 0c	lda $0c59,x			lda 	ChannelTime,x 		; 0 if zero, 255 if non-zero.
.1ffe	f0 02		beq $2002			beq 	_UPZero
.2000	a9 ff		lda #$ff			lda 	#255
.2002					_UPZero:
.2002	a6 32		ldx $32				ldx 	tempShort 			; stack pointer back
.2004	95 98		sta $98,x			sta 	esInt0,x 			; return value
.2006					_UPSet13:
.2006	95 a0		sta $a0,x			sta 	esInt1,x
.2008	95 a8		sta $a8,x			sta 	esInt2,x
.200a	95 b0		sta $b0,x			sta 	esInt3,x
.200c	60		rts				rts
.200d					_UPValue:
.200d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.200f	20 09 15	jsr $1509		jsr	errorHandler
.2012					_UPCount:
.2012	c8		iny				iny 						; skip )
.2013	fa		plx				plx
.2014	ad 58 0c	lda $0c58			lda 	LiveChannels
.2017	95 98		sta $98,x			sta 	esInt0,x
.2019	a9 00		lda #$00			lda 	#0
.201b	f0 e9		beq $2006			beq 	_UPSet13

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c6f					hitSprite1:
>0c6f							.fill 	1 							; this won't work ... if you nest HIT() which
.0c70					hitSprite2:
>0c70							.fill 	1
.0c71					hitRange:
>0c71							.fill 	1
.201d					FunctionCollide:
.201d	48		pha				pha 								; save and put index into X
.201e	aa		tax				tax
.201f	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.2021	8d 71 0c	sta $0c71			sta 	hitRange
.2024	20 c4 20	jsr $20c4			jsr 	_FCGetSpriteID
.2027	8d 6f 0c	sta $0c6f			sta 	hitSprite1
.202a	da		phx				phx
.202b	a2 02		ldx #$02		ldx	#2
.202d	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2030	fa		plx				plx
.2031	20 c4 20	jsr $20c4			jsr 	_FCGetSpriteID
.2034	8d 70 0c	sta $0c70			sta 	hitSprite2
.2037	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.2039	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.203b	f0 12		beq $204f			beq 	_FCParam2
.203d	da		phx				phx
.203e	a2 02		ldx #$02		ldx	#2
.2040	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2043	68		pla				pla
.2044	a2 0c		ldx #$0c		ldx	#12
.2046	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2049	aa		tax				tax
.204a	b5 98		lda $98,x			lda 	esInt0,x
.204c	8d 71 0c	sta $0c71			sta 	hitRange
.204f					_FCParam2:
.204f	a2 04		ldx #$04		ldx	#4
.2051	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2054	68		pla				pla 								; set X to point to the stack again.
.2055	48		pha				pha
.2056	aa		tax				tax
.2057	5a		phy				phy
.2058	18		clc				clc 								; do it with the horizontal values.
.2059	20 7a 20	jsr $207a			jsr 	_FCCheck
.205c	90 0a		bcc $2068			bcc 	_FCFail
.205e	38		sec				sec 								; do it with the vertical values.
.205f	20 7a 20	jsr $207a			jsr 	_FCCheck
.2062	90 04		bcc $2068			bcc 	_FCFail
.2064	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.2066	d0 02		bne $206a			bne 	_FCReturnA
.2068					_FCFail:
.2068	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.206a					_FCReturnA:
.206a	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.206c	7a		ply				ply
.206d	68		pla				pla 								; restore stack, return result and exit.
.206e	aa		tax				tax
.206f	a5 32		lda $32				lda 	tempShort
.2071	95 98		sta $98,x			sta 	esInt0,x
.2073	95 a0		sta $a0,x			sta 	esInt1,x
.2075	95 a8		sta $a8,x			sta 	esInt2,x
.2077	95 b0		sta $b0,x			sta 	esInt3,x
.2079	60		rts				rts
.207a					_FCCheck:
.207a	08		php				php 								; save the H/V flag twice
.207b	08		php				php
.207c	ad 6f 0c	lda $0c6f			lda 	hitSprite1 					; select sprite 1 and read its location
.207f	20 02 22	jsr $2202			jsr 	SelectSpriteA 				; into X
.2082	28		plp				plp
.2083	20 26 23	jsr $2326			jsr 	SpriteReadCoordinate
.2086	ad 70 0c	lda $0c70			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.2089	20 02 22	jsr $2202			jsr 	SelectSpriteA
.208c	e8		inx				inx
.208d	28		plp				plp
.208e	20 26 23	jsr $2326			jsr 	SpriteReadCoordinate
.2091	ca		dex				dex
.2092	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.2093	b5 98		lda $98,x			lda 	esInt0,x
.2095	f5 99		sbc $99,x			sbc 	esInt0+1,x
.2097	85 2a		sta $2a				sta 	temp0
.2099	b5 a0		lda $a0,x			lda 	esInt1,x
.209b	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.209d	85 2b		sta $2b				sta 	temp0+1
.209f	10 0d		bpl $20ae			bpl 	_FCCIsPositive
.20a1	38		sec				sec 								; if -ve calculate |difference|
.20a2	a9 00		lda #$00			lda 	#0
.20a4	e5 2a		sbc $2a				sbc 	temp0
.20a6	85 2a		sta $2a				sta 	temp0
.20a8	a9 00		lda #$00			lda 	#0
.20aa	e5 2b		sbc $2b				sbc 	temp0+1
.20ac	85 2b		sta $2b				sta 	temp0+1
.20ae					_FCCIsPositive:
.20ae	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.20b0	d0 10		bne $20c2			bne 	_FCCFail
.20b2	18		clc				clc 								; work out required min distance which is
.20b3	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.20b5	75 b1		adc $b1,x			adc 	esInt3+1,x
.20b7	ac 71 0c	ldy $0c71			ldy 	hitRange 					; get the hit range
.20ba	f0 01		beq $20bd			beq 	_FCCNoSetRange 				; override if non zero.
.20bc	98		tya				tya
.20bd					_FCCNoSetRange:
.20bd	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.20bf	f0 01		beq $20c2			beq 	_FCCFail
.20c1	60		rts				rts
.20c2					_FCCFail:
.20c2	18		clc				clc
.20c3	60		rts				rts
.20c4					_FCGetSpriteID:
.20c4	8a		txa				txa
.20c5	a2 0c		ldx #$0c		ldx	#12
.20c7	20 1b 3f	jsr $3f1b		jsr	mainHandler
.20ca	aa		tax				tax
.20cb	b5 98		lda $98,x			lda 	esInt0,x
.20cd	30 01		bmi $20d0			bmi 	_FCGSValue
.20cf	60		rts				rts
.20d0					_FCGSValue:
.20d0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.20d2	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c72					currSprite:
>0c72							.fill 	2
.20d5					CommandSprite:
.20d5	20 d7 21	jsr $21d7			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.20d8	d0 0d		bne $20e7			bne 	_CSCheckClear
.20da	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.20dd	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.20df	90 02		bcc $20e3			bcc 	_CSNotOn 					; if CS turn on, so set it
.20e1	09 40		ora #$40			ora 	#$40
.20e3					_CSNotOn:
.20e3	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.20e6	60		rts				rts
.20e7					_CSCheckClear:
.20e7	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.20e9	8d 73 0c	sta $0c73			sta 	currSprite+1
.20ec	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.20ee	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.20f0	d0 05		bne $20f7			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.20f2	20 e8 21	jsr $21e8			jsr 	CSClearSprites 				; clear all the sprites
.20f5	c8		iny				iny 								; consume CLEAR token and exit.
.20f6	60		rts				rts
.20f7					_CSCommandLoop:
.20f7	20 d7 21	jsr $21d7			jsr 	CSCheckOnOff 				; check sprite on/off
.20fa	f0 2c		beq $2128			beq 	_CSSetVisibility
.20fc	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.20fe	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.2100	f0 25		beq $2127			beq 	_CSExit
.2102	c8		iny				iny									; consume it
.2103	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.2105	f0 20		beq $2127			beq 	_CSExit
.2107	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.2109	f0 ec		beq $20f7			beq 	_CSCommandLoop
.210b	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.210d	f0 69		beq $2178			beq 	_CSSetImage
.210f	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.2111	f0 2b		beq $213e			beq 	_CSSetFlip
.2113	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.2115	f0 46		beq $215d			beq 	_CSSetPos
.2117	88		dey				dey 								; unpick DEY
.2118	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.211a	a2 0c		ldx #$0c		ldx	#12
.211c	20 1b 3f	jsr $3f1b		jsr	mainHandler
.211f	a5 98		lda $98				lda 	esInt0
.2121	20 02 22	jsr $2202			jsr 	SelectSpriteA
.2124	4c f7 20	jmp $20f7			jmp 	_CSCommandLoop
.2127					_CSExit:
.2127	60		rts				rts
.2128					_CSSetVisibility:
.2128	08		php				php 								; save carry
.2129	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.212b	20 be 21	jsr $21be			jsr 	SpriteSetTarget
.212e	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2131	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2133	28		plp				plp
.2134	90 02		bcc $2138			bcc 	_CSSetOff 					; check if carry was set
.2136	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2138					_CSSetOff:
.2138	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.213b	4c f7 20	jmp $20f7			jmp 	_CSCommandLoop
.213e					_CSSetFlip:
.213e	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2140	a2 0c		ldx #$0c		ldx	#12
.2142	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2145	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2147	20 be 21	jsr $21be			jsr 	SpriteSetTarget
.214a	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.214c	29 03		and #$03			and 	#3
.214e	85 2a		sta $2a				sta 	temp0
.2150	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.2153	29 fc		and #$fc			and 	#$FC
.2155	05 2a		ora $2a				ora 	temp0
.2157	8d 23 9f	sta $9f23			sta 	$9F23
.215a	4c f7 20	jmp $20f7			jmp 	_CSCommandLoop
.215d					_CSSetPos:
.215d	a9 00		lda #$00			lda 	#0 							; X now at level 0
.215f	a2 0a		ldx #$0a		ldx	#10
.2161	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2164	a2 02		ldx #$02		ldx	#2
.2166	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2169	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.216b	a2 0a		ldx #$0a		ldx	#10
.216d	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2170	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2172	20 e4 22	jsr $22e4			jsr 	SpriteMove 					; move it.
.2175	4c f7 20	jmp $20f7			jmp 	_CSCommandLoop
.2178					_CSSetImage:
.2178	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.217a	a2 0c		ldx #$0c		ldx	#12
.217c	20 1b 3f	jsr $3f1b		jsr	mainHandler
.217f	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.2181	20 be 21	jsr $21be			jsr 	SpriteSetTarget
.2184	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2186	bd ba 0c	lda $0cba,x			lda 	imageAddr32Low,x 			; copy low address in.
.2189	8d 23 9f	sta $9f23			sta 	$9F23
.218c	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.218f	bd 7a 0c	lda $0c7a,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2192	29 10		and #$10			and 	#$10
.2194	0a		asl a				asl 	a
.2195	0a		asl a				asl		a
.2196	0a		asl a				asl 	a 							; put into bit 7
.2197	1d fa 0c	ora $0cfa,x			ora 	imageAddr32High,x 			; or high address with it.
.219a	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.219d	a9 06		lda #$06			lda 	#6
.219f	20 be 21	jsr $21be			jsr 	SpriteSetTarget 			; set sprite on.
.21a2	ad 23 9f	lda $9f23			lda 	$9F23
.21a5	09 0c		ora #$0c			ora 	#$0C
.21a7	8d 23 9f	sta $9f23			sta 	$9F23
.21aa	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.21ad	bd 7a 0c	lda $0c7a,x			lda 	imageInfo,x 				; get image info
.21b0	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.21b1	0a		asl a				asl 	a
.21b2	0a		asl a				asl 	a
.21b3	0a		asl a				asl 	a
.21b4	b0 02		bcs $21b8			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.21b6	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.21b8					_CSNoOffset:
.21b8	8d 23 9f	sta $9f23			sta 	$9F23
.21bb	4c f7 20	jmp $20f7			jmp 	_CSCommandLoop
.21be					SpriteSetTarget:
.21be	0d 72 0c	ora $0c72			ora 	currSprite
.21c1	8d 20 9f	sta $9f20			sta 	$9F20
.21c4	ad 73 0c	lda $0c73			lda 	currSprite+1
.21c7	f0 09		beq $21d2			beq 	_SSTNoSet
.21c9	8d 21 9f	sta $9f21			sta 	$9F21
.21cc	a9 01		lda #$01			lda 	#$01
.21ce	8d 22 9f	sta $9f22			sta 	$9F22
.21d1	60		rts				rts
.21d2					_SSTNoSet:
.21d2	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.21d4	20 09 15	jsr $1509		jsr	errorHandler
.21d7					CSCheckOnOff:
.21d7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.21d9	c8		iny				iny
.21da	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.21dc	18		clc				clc
.21dd	f0 08		beq $21e7			beq 	_CSCOExit
.21df	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.21e1	38		sec				sec 								; return NE if neither.
.21e2	f0 03		beq $21e7			beq 	_CSCOExit
.21e4	88		dey				dey 								; undo consume
.21e5	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.21e7					_CSCOExit:
.21e7	60		rts				rts
.21e8					CSClearSprites:
.21e8	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.21ea	8d 22 9f	sta $9f22			sta 	$9F22
.21ed	a9 fc		lda #$fc			lda 	#$FC
.21ef	8d 21 9f	sta $9f21			sta 	$9F21
.21f2	a9 00		lda #$00			lda 	#0
.21f4	8d 20 9f	sta $9f20			sta 	$9F20
.21f7					_CSClear:
.21f7	a9 00		lda #$00			lda 	#0 							; set everything to $00
.21f9	8d 23 9f	sta $9f23			sta 	$9F23
.21fc	ad 21 9f	lda $9f21			lda 	$9F21
.21ff	d0 f6		bne $21f7			bne 	_CSClear
.2201	60		rts				rts
.2202					SelectSpriteA:
.2202	85 2a		sta $2a				sta 	temp0
.2204	a9 00		lda #$00			lda 	#0
.2206	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.2208	b0 11		bcs $221b			bcs 	_CSBadValue 				; sprites only 0-127
.220a	06 2a		asl $2a				asl 	temp0
.220c	2a		rol a				rol 	a
.220d	06 2a		asl $2a				asl 	temp0
.220f	2a		rol a				rol 	a
.2210	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.2212	8d 73 0c	sta $0c73			sta 	currSprite+1
.2215	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.2217	8d 72 0c	sta $0c72			sta 	currSprite+0
.221a	60		rts				rts
.221b					_CSBadValue
.221b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.221d	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0c74					srenderWidth:
>0c74							.fill 	1
.2220					Command_Paint:
.2220	a9 28		lda #$28			lda 	#ImageHandler & $FF
.2222	a2 22		ldx #$22			ldx 	#ImageHandler >> 8
.2224	20 c0 18	jsr $18c0			jsr 	GHandler
.2227	60		rts				rts
.2228					ImageHandler:
.2228	a9 2f		lda #$2f			lda 	#SpriteImageAccess & $FF
.222a	a2 22		ldx #$22			ldx 	#SpriteImageAccess >> 8
.222c	4c 48 1b	jmp $1b48			jmp 	ImageRenderer
.222f					SpriteImageAccess:
.222f	c0 ff		cpy #$ff			cpy 	#255
.2231	d0 22		bne $2255			bne 	_SIAGetPixel
.2233	ae 01 0c	ldx $0c01			ldx 	gdImage 					; get the image #
.2236	bd 7a 0c	lda $0c7a,x			lda 	imageInfo,x 				; get the image information.
.2239	48		pha				pha
.223a	29 03		and #$03			and 	#3 							; LSB x 2 width
.223c	aa		tax				tax
.223d	bd 51 22	lda $2251,x			lda 	_SIASizeTable,x
.2240	8d 74 0c	sta $0c74			sta 	sRenderWidth 				; save rendering width.
.2243	aa		tax				tax
.2244	68		pla				pla 								; get back next 2 bits are height
.2245	4a		lsr a				lsr 	a
.2246	4a		lsr a				lsr 	a
.2247	29 03		and #$03			and 	#3
.2249	a8		tay				tay
.224a	b9 51 22	lda $2251,y			lda 	_SIASizeTable,y
.224d	a8		tay				tay
.224e	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.2250	60		rts				rts
.2251					_SIASizeTable:
>2251	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.2255					_SIAGetPixel:
.2255	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.2257	a9 00		lda #$00			lda 	#0
.2259	85 2b		sta $2b				sta 	temp0+1
.225b	ac 01 0c	ldy $0c01			ldy 	gdImage 					; get image info into A
.225e	b9 7a 0c	lda $0c7a,y			lda 	imageInfo,y
.2261	48		pha				pha
.2262	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.2264	85 2c		sta $2c				sta 	temp1
.2266	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.2267	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.2269	18		clc				clc
.226a	69 03		adc #$03			adc 	#3
.226c	a8		tay				tay
.226d					_SIAMultiply:
.226d	06 2a		asl $2a				asl 	temp0
.226f	26 2b		rol $2b				rol 	temp0+1
.2271	88		dey				dey
.2272	d0 f9		bne $226d			bne 	_SIAMultiply
.2274	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.2276	d0 04		bne $227c			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.2278	46 2b		lsr $2b				lsr 	temp0+1
.227a	66 2a		ror $2a				ror 	temp0
.227c					_SIANoHalf:
.227c	ae 01 0c	ldx $0c01			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.227f	bd ba 0c	lda $0cba,x			lda 	imageAddr32Low,x
.2282	85 2e		sta $2e				sta 	temp2
.2284	bd fa 0c	lda $0cfa,x			lda 	imageAddr32High,x
.2287	85 2f		sta $2f				sta 	temp2+1
.2289	a9 00		lda #$00			lda 	#0
.228b	85 30		sta $30				sta 	temp3
.228d	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.228f					_SIMult32:
.228f	06 2e		asl $2e				asl 	temp2
.2291	26 2f		rol $2f				rol 	temp2+1
.2293	26 30		rol $30				rol 	temp3
.2295	ca		dex				dex
.2296	d0 f7		bne $228f			bne 	_SIMult32
.2298	ee 25 9f	inc $9f25			inc 	$9F25 						; select alternate data port
.229b	18		clc				clc
.229c	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.229e	65 2e		adc $2e				adc 	temp2
.22a0	8d 20 9f	sta $9f20			sta 	$9F20
.22a3	a5 2b		lda $2b				lda 	temp0+1
.22a5	65 2f		adc $2f				adc 	temp2+1
.22a7	8d 21 9f	sta $9f21			sta 	$9F21
.22aa	a9 10		lda #$10			lda 	#$10
.22ac	65 30		adc $30				adc 	temp3
.22ae	8d 22 9f	sta $9f22			sta 	$9F22
.22b1	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.22b3					_SIFillCacheLoop:
.22b3	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.22b5	d0 12		bne $22c9			bne 	_SI8Bit
.22b7	ad 24 9f	lda $9f24			lda 	$9F24 						; get data
.22ba	48		pha				pha 								; save it
.22bb	4a		lsr a				lsr 	a 							; MSB first
.22bc	4a		lsr a				lsr 	a
.22bd	4a		lsr a				lsr 	a
.22be	4a		lsr a				lsr 	a
.22bf	20 d9 22	jsr $22d9			jsr 	_SIWrite4Bit
.22c2	68		pla				pla
.22c3	20 d9 22	jsr $22d9			jsr 	_SIWrite4Bit
.22c6	4c d0 22	jmp $22d0			jmp 	_SIAdvance
.22c9					_SI8Bit:
.22c9	ad 24 9f	lda $9f24			lda 	$9F24 						; copy data into render cache
.22cc	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.22cf	e8		inx				inx
.22d0					_SIAdvance:
.22d0	ec 74 0c	cpx $0c74			cpx 	sRenderWidth 				; filled the cache to required width ?
.22d3	d0 de		bne $22b3			bne 	_SIFillCacheLoop
.22d5	ce 25 9f	dec $9f25			dec 	$9F25 						; select original data port.
.22d8	60		rts				rts
.22d9					_SIWrite4Bit:
.22d9	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.22db	f0 02		beq $22df			beq 	_SIW4Skip
.22dd	09 f0		ora #$f0			ora 	#$F0
.22df					_SIW4Skip:
.22df	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.22e2	e8		inx				inx
.22e3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.22e4					SpriteMove:
.22e4	5a		phy				phy
.22e5	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.22e7	20 be 21	jsr $21be			jsr 	SpriteSetTarget
.22ea	ad 23 9f	lda $9f23			lda 	$9F23
.22ed	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.22ee	4a		lsr a				lsr 	a
.22ef	4a		lsr a				lsr 	a
.22f0	4a		lsr a				lsr 	a
.22f1	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.22f3	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.22f5	20 be 21	jsr $21be			jsr 	SpriteSetTarget
.22f8	20 06 23	jsr $2306			jsr 	SMWritePosition 					; write X position out.
.22fb	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.22fd	46 2a		lsr $2a				lsr 	temp0
.22ff	e8		inx				inx 										; get the y position
.2300	20 06 23	jsr $2306			jsr 	SMWritePosition 					; and write that out.
.2303	ca		dex				dex 										; fix X and quit.
.2304	7a		ply				ply
.2305	60		rts				rts
.2306					SMWritePosition:
.2306	a5 2a		lda $2a				lda 	temp0 								; get dim size
.2308	29 03		and #$03			and 	#3 									; in range into Y
.230a	a8		tay				tay
.230b	38		sec				sec
.230c	b5 98		lda $98,x			lda 	esInt0,x
.230e	f9 22 23	sbc $2322,y			sbc 	SMHalfSize,y
.2311	8d 23 9f	sta $9f23			sta 	$9F23
.2314	ee 20 9f	inc $9f20			inc 	$9F20
.2317	b5 a0		lda $a0,x			lda 	esInt1,x
.2319	e9 00		sbc #$00			sbc 	#0
.231b	8d 23 9f	sta $9f23			sta 	$9F23
.231e	ee 20 9f	inc $9f20			inc 	$9F20
.2321	60		rts				rts
.2322					SMHalfSize:
>2322	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2326					SpriteReadCoordinate:
.2326	5a		phy				phy
.2327	08		php				php 										; save CTR on stack
.2328	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.232a	20 be 21	jsr $21be			jsr 	SpriteSetTarget
.232d	ad 23 9f	lda $9f23			lda 	$9F23
.2330	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2331	4a		lsr a				lsr 	a
.2332	4a		lsr a				lsr 	a
.2333	4a		lsr a				lsr 	a
.2334	28		plp				plp 										; restore CTS
.2335	08		php				php
.2336	90 02		bcc $233a			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2338	4a		lsr a				lsr 	a
.2339	4a		lsr a				lsr 	a
.233a					_SPRCNotY1:
.233a	29 03		and #$03			and 	#3 									; point into half width/height
.233c	a8		tay				tay
.233d	b9 22 23	lda $2322,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2340	95 b0		sta $b0,x			sta 	esInt3,x
.2342	28		plp				plp 										; CS Y CC X
.2343	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2345	2a		rol a				rol 	a
.2346	2a		rol a				rol 	a
.2347	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2349	20 be 21	jsr $21be			jsr 	SpriteSetTarget 					; set data pointer offset by that
.234c	18		clc				clc 										; read and unfix centre.
.234d	ad 23 9f	lda $9f23			lda 	$9F23
.2350	75 b0		adc $b0,x			adc 	esInt3,x
.2352	95 98		sta $98,x			sta 	esInt0,x
.2354	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.2357	ad 23 9f	lda $9f23			lda 	$9F23
.235a	69 00		adc #$00			adc 	#0
.235c	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.235e	c9 08		cmp #$08			cmp		#$08
.2360	90 02		bcc $2364			bcc 	_SPRCNoSX
.2362	09 f0		ora #$f0			ora 	#$F0
.2364					_SPRCNoSX:
.2364	95 a0		sta $a0,x			sta 	esInt1,x
.2366	7a		ply				ply
.2367	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2368					Sprite_GetX:
.2368	18		clc				clc
.2369	90 01		bcc $236c			bcc 	SpriteGetCode
.236b					Sprite_GetY:
.236b	38		sec				sec
.236c					SpriteGetCode:
.236c	08		php				php 								; CLC : X SEC: Y, save on stack.
.236d	48		pha				pha 								; save stack position
.236e	20 89 23	jsr $2389			jsr 	GetSpriteNumber 			; get # of sprite.
.2371	a2 04		ldx #$04		ldx	#4
.2373	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2376	fa		plx				plx
.2377	28		plp				plp 								; which one ?
.2378	20 26 23	jsr $2326			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.237b	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.237d	29 80		and #$80			and 	#$80
.237f	f0 02		beq $2383			beq 	_SGXYPos
.2381	a9 ff		lda #$ff			lda 	#$FF
.2383					_SGXYPos:
.2383	95 a8		sta $a8,x			sta 	esInt2,x
.2385	95 b0		sta $b0,x			sta 	esInt3,x
.2387	8a		txa				txa 								; return NSP in A
.2388	60		rts				rts
.2389					GetSpriteNumber:
.2389	48		pha				pha
.238a	a2 0c		ldx #$0c		ldx	#12
.238c	20 1b 3f	jsr $3f1b		jsr	mainHandler
.238f	fa		plx				plx
.2390	b5 98		lda $98,x			lda 	esInt0,x
.2392	20 02 22	jsr $2202			jsr 	SelectSpriteA
.2395	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c75					currentMode:
>0c75							.fill 	4
.2396					ForceMode0:
.2396	a2 00		ldx #$00			ldx 	#0
.2398	86 98		stx $98				stx 	esInt0 						; in case we do it.
.239a					_FMCheck:
.239a	bd 2e 24	lda $242e,x			lda 	CMModeList,x 				; do we need to switch ?
.239d	dd 75 0c	cmp $0c75,x			cmp 	currentMode,x
.23a0	d0 13		bne $23b5			bne 	CMSetMode 					; different so switch.
.23a2	e8		inx				inx
.23a3	e0 04		cpx #$04			cpx 	#4
.23a5	d0 f3		bne $239a			bne 	_FMCheck
.23a7	60		rts				rts
.23a8					CommandMode:
.23a8	a9 00		lda #$00			lda 	#0
.23aa	a2 0a		ldx #$0a		ldx	#10
.23ac	20 1b 3f	jsr $3f1b		jsr	mainHandler
.23af	a5 b0		lda $b0				lda 	esInt3
.23b1	29 70		and #$70			and 	#$70
.23b3	d0 06		bne $23bb			bne 	CMNoExpand
.23b5					CMSetMode:
.23b5	20 0f 24	jsr $240f			jsr 	CMExpandMode
.23b8	4c cf 23	jmp $23cf			jmp 	CMUpdateMode
.23bb					CMNoExpand:
.23bb	a5 98		lda $98				lda 	esInt0
.23bd	8d 75 0c	sta $0c75			sta 	currentMode
.23c0	a5 a0		lda $a0				lda 	esInt1
.23c2	8d 76 0c	sta $0c76			sta 	currentMode+1
.23c5	a5 a8		lda $a8				lda 	esInt2
.23c7	8d 77 0c	sta $0c77			sta 	currentMode+2
.23ca	a5 b0		lda $b0				lda 	esInt3
.23cc	8d 78 0c	sta $0c78			sta 	currentMode+3
.23cf					CMUpdateMode:
.23cf	a2 11		ldx #$11			ldx 	#$11
.23d1					_CMClear:
.23d1	a9 00		lda #$00			lda 	#0
.23d3	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.23d6	ca		dex				dex
.23d7	10 f8		bpl $23d1			bpl 	_CMClear
.23d9	ad 78 0c	lda $0c78			lda 	currentMode+3 				; get current mode
.23dc	48		pha				pha 								; stack twice.
.23dd	48		pha				pha
.23de	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.23e0	09 01		ora #$01			ora 	#$01 						; turn the output on.
.23e2	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.23e5	68		pla				pla 								; get back
.23e6	20 3e 24	jsr $243e			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.23e9	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.23ec	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.23ed	4a		lsr a				lsr 	a
.23ee	4a		lsr a				lsr 	a
.23ef	20 3e 24	jsr $243e			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.23f2	8d 2b 9f	sta $9f2b			sta 	$9F2B
.23f5	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.23f7	ad 75 0c	lda $0c75			lda 	currentMode					; get L0 config byte
.23fa	20 49 24	jsr $2449			jsr 	CMDecodeLayer 				; and decode layer 0
.23fd	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.23ff	ad 76 0c	lda $0c76			lda 	currentMode+1
.2402	20 49 24	jsr $2449			jsr 	CMDecodeLayer
.2405	20 75 1d	jsr $1d75			jsr 	gdModeChanged 				; check the bitmap status.
.2408	20 ab 18	jsr $18ab			jsr 	GResetStorage 				; reset the graphics drawing storage.
.240b	20 b7 1f	jsr $1fb7			jsr 	SoundReset 					; Reset the sound channels.
.240e	60		rts				rts
.240f					CMExpandMode:
.240f	a5 98		lda $98				lda 	esInt0 						; get mode number
.2411	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2413	b0 14		bcs $2429			bcs 	_CMModeError
.2415	0a		asl a				asl 	a 							; x 4 into X
.2416	0a		asl a				asl 	a
.2417	aa		tax				tax
.2418	5a		phy				phy
.2419	a0 00		ldy #$00			ldy 	#0
.241b					_CMEMCopy:
.241b	bd 2e 24	lda $242e,x			lda 	CMModeList,x
.241e	99 75 0c	sta $0c75,y			sta 	currentMode,y
.2421	e8		inx				inx
.2422	c8		iny				iny
.2423	c0 04		cpy #$04			cpy 	#4
.2425	d0 f4		bne $241b			bne 	_CMEMCopy
.2427	7a		ply				ply
.2428	60		rts				rts
.2429					_CMModeError:
.2429	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.242b	20 09 15	jsr $1509		jsr	errorHandler
.242e					CMModeList:
>242e	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2432	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2436	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>243a	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.243e					CMEndModeList:
.243e					CMToScale:
.243e	29 03		and #$03			and 	#3 							; lower 2 bits only
.2440	aa		tax				tax 								; put in X for counting
.2441	a9 00		lda #$00			lda 	#0 							; zero result
.2443	38		sec				sec 								; first time rotate CS in
.2444					_CMTSLoop:
.2444	6a		ror a				ror 	a
.2445	ca		dex				dex
.2446	10 fc		bpl $2444			bpl 	_CMTSLoop
.2448	60		rts				rts
.2449					CMDecodeLayer:
.2449	48		pha				pha 								; save it.
.244a	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.244c	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.244f	68		pla				pla 								; get it back
.2450	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2452	f0 02		beq $2456			beq 	_CMDLNotSet
.2454	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2456					_CMDLNotSet:
.2456	e0 00		cpx #$00			cpx 	#0
.2458	f0 06		beq $2460			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.245a	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.245c	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.245f	60		rts				rts
.2460					_CMDLayer0:
.2460	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2462	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2465	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.2466					CommandPalette:
.2466	a9 00		lda #$00			lda 	#0
.2468	a2 0c		ldx #$0c		ldx	#12
.246a	20 1b 3f	jsr $3f1b		jsr	mainHandler
.246d	a2 02		ldx #$02		ldx	#2
.246f	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2472	a9 01		lda #$01			lda 	#1
.2474	a2 08		ldx #$08		ldx	#8
.2476	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2479	a5 98		lda $98				lda 	esInt0 					; get palette #
.247b	20 8b 24	jsr $248b			jsr 	PointToPaletteA			; point to palette register
.247e	a5 99		lda $99				lda 	esInt0+1
.2480	8d 23 9f	sta $9f23			sta 	$9F23
.2483	a5 a1		lda $a1				lda 	esInt1+1
.2485	29 0f		and #$0f			and 	#$0F
.2487	8d 23 9f	sta $9f23			sta 	$9F23
.248a	60		rts				rts
.248b					PointToPaletteA:
.248b	0a		asl a				asl 	a 							; x 2 -> LSB
.248c	8d 20 9f	sta $9f20			sta 	$9F20
.248f	a9 00		lda #$00			lda 	#0 							; carry into A
.2491	2a		rol a				rol 	a
.2492	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.2494	8d 21 9f	sta $9f21			sta 	$9F21
.2497	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.2499	8d 22 9f	sta $9f22			sta 	$9F22
.249c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

=$f800					DefaultFont = $F800
.249d					Command_Draw:
.249d	a9 a5		lda #$a5			lda 	#TextHandler & $FF
.249f	a2 24		ldx #$24			ldx 	#TextHandler >> 8
.24a1	20 c0 18	jsr $18c0			jsr 	GHandler
.24a4	60		rts				rts
.24a5					TextHandler:
.24a5	ad 08 0c	lda $0c08			lda 	gdText+1 					; do we have a string
.24a8	d0 1a		bne $24c4			bne 	_THHasString
.24aa					_THCallRenderer:
.24aa	da		phx				phx
.24ab	ad f2 0b	lda $0bf2			lda 	gy2
.24ae	48		pha				pha
.24af	ad f3 0b	lda $0bf3			lda 	gy2+1
.24b2	48		pha				pha
.24b3	a9 f8		lda #$f8			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.24b5	a2 24		ldx #$24			ldx 	#BitmapTextAccess >> 8
.24b7	20 48 1b	jsr $1b48			jsr 	ImageRenderer
.24ba	68		pla				pla 								; restore y position and x register
.24bb	8d f3 0b	sta $0bf3			sta 	gy2+1
.24be	68		pla				pla
.24bf	8d f2 0b	sta $0bf2			sta 	gy2
.24c2	fa		plx				plx
.24c3	60		rts				rts
.24c4					_THHasString:
.24c4	a2 00		ldx #$00			ldx 	#0 							; position in string
.24c6					_THStringLoop:
.24c6	ad 07 0c	lda $0c07			lda 	gdText 						; text => temp0
.24c9	85 2a		sta $2a				sta 	temp0
.24cb	ad 08 0c	lda $0c08			lda 	gdText+1
.24ce	85 2b		sta $2b				sta 	temp0+1
.24d0	8a		txa				txa 								; length = string length.
.24d1	a0 00		ldy #$00			ldy 	#0
.24d3	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.24d5	f0 20		beq $24f7			beq 	_THExit 					; if so exit.
.24d7	e8		inx				inx 								; next character, put in Y
.24d8	8a		txa				txa
.24d9	a8		tay				tay
.24da	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.24dc	8d 01 0c	sta $0c01			sta 	gdImage
.24df	20 aa 24	jsr $24aa			jsr 	_THCallRenderer 			; render the text
.24e2	ad 00 0c	lda $0c00			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.24e5	0a		asl a				asl		a
.24e6	0a		asl a				asl 	a
.24e7	0a		asl a				asl 	a
.24e8	18		clc				clc
.24e9	6d f0 0b	adc $0bf0			adc 	gX2 						; add to horizontal position
.24ec	8d f0 0b	sta $0bf0			sta 	gx2
.24ef	90 d5		bcc $24c6			bcc 	_THStringLoop
.24f1	ee f1 0b	inc $0bf1			inc 	gx2+1
.24f4	4c c6 24	jmp $24c6			jmp 	_THStringLoop 				; do the whole lot.
.24f7					_THExit:
.24f7	60		rts				rts
.24f8					BitmapTextAccess:
.24f8	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.24fa	d0 07		bne $2503			bne 	_BTABitmap
.24fc	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.24fe	a2 08		ldx #$08			ldx 	#8
.2500	a0 08		ldy #$08			ldy 	#8
.2502	60		rts				rts
.2503					_BTABitmap:
.2503	ad 01 0c	lda $0c01			lda 	gdImage 					; Image => temp0:A
.2506	20 0a 25	jsr $250a			jsr 	DrawCharacterA
.2509	60		rts				rts
.250a					DrawCharacterA:
.250a	85 2a		sta $2a				sta 	temp0
.250c	a9 00		lda #$00			lda 	#0
.250e	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.2510	2a		rol a				rol 	a
.2511	06 2a		asl $2a				asl 	temp0
.2513	2a		rol a				rol 	a
.2514	06 2a		asl $2a				asl 	temp0
.2516	2a		rol a				rol 	a
.2517	09 f8		ora #$f8			ora 	#DefaultFont >> 8 			; A now points into font table.
.2519	ee 25 9f	inc $9f25			inc 	$9F25 						; alternate port set.
.251c	8d 21 9f	sta $9f21			sta 	$9F21 						; set up address
.251f	a9 10		lda #$10			lda 	#$10
.2521	8d 22 9f	sta $9f22			sta 	$9F22
.2524	84 32		sty $32				sty 	tempShort
.2526	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.2528	05 32		ora $32				ora 	tempShort
.252a	8d 20 9f	sta $9f20			sta 	$9F20 						; address set up.
.252d	ad 24 9f	lda $9f24			lda 	$9F24 						; get bitmap
.2530	ce 25 9f	dec $9f25			dec 	$9F25 						; original port set back
.2533	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.2535	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.2537					_BTADoCache:
.2537	a9 00		lda #$00			lda 	#0
.2539	46 2a		lsr $2a				lsr 	temp0
.253b	90 02		bcc $253f			bcc 	_BTANotSet
.253d	a9 ff		lda #$ff			lda 	#255
.253f					_BTANotSet:
.253f	9d 10 0c	sta $0c10,x			sta 	renderCache,x
.2542	ca		dex				dex
.2543	10 f2		bpl $2537			bpl 	_BTADoCache
.2545	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.2546					Command_VLoad:
.2546	a9 00		lda #$00			lda 	#0 								; string which is the file name
.2548	a2 0e		ldx #$0e		ldx	#14
.254a	20 1b 3f	jsr $3f1b		jsr	mainHandler
.254d	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.254f	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.2551	95 98		sta $98,x			sta 	esInt0,x
.2553	a5 36		lda $36				lda 	lowMemory+1
.2555	95 a0		sta $a0,x			sta 	esInt1,x
.2557	a9 00		lda #$00			lda 	#0
.2559	95 a8		sta $a8,x			sta 	esInt2,x
.255b	95 b0		sta $b0,x			sta 	esInt3,x
.255d	a2 0e		ldx #$0e		ldx	#14
.255f	20 e7 14	jsr $14e7		jsr	deviceHandler
.2562	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.2564	85 2a		sta $2a				sta 	temp0
.2566	a5 a1		lda $a1				lda 	esInt1+1
.2568	85 2b		sta $2b				sta 	temp0+1
.256a	20 e5 25	jsr $25e5			jsr 	LoadVRAMFile 					; load the VRAM file in.
.256d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.256e					Command_VPoke:
.256e	38		sec				sec 						; one byte , CS
.256f	b0 01		bcs $2572			bcs 	CmdVideoWrite
.2571					Command_VDoke:
.2571	18		clc				clc 						; two bytes, CC
.2572					CmdVideoWrite:
.2572	08		php				php 						; save one or two btes
.2573	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.2575	a2 0a		ldx #$0a		ldx	#10
.2577	20 1b 3f	jsr $3f1b		jsr	mainHandler
.257a	a2 02		ldx #$02		ldx	#2
.257c	20 1b 3f	jsr $3f1b		jsr	mainHandler
.257f	a9 01		lda #$01			lda 	#1
.2581	a2 0a		ldx #$0a		ldx	#10
.2583	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2586	a2 00		ldx #$00			ldx 	#0
.2588	20 99 25	jsr $2599			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.258b	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.258d	8d 23 9f	sta $9f23			sta 	$9F23
.2590	28		plp				plp 						; if it was Poke then exit
.2591	b0 05		bcs $2598			bcs 	_CVWExit
.2593	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2595	8d 23 9f	sta $9f23			sta 	$9F23
.2598					_CVWExit:
.2598	60		rts				rts
.2599					SetUpTOSVRamAddress:
.2599	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.259b	29 fe		and #$fe			and 	#$FE
.259d	15 b0		ora $b0,x			ora 	esInt3,x
.259f	d0 14		bne $25b5			bne 	CVWValue
.25a1	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.25a3	8d 20 9f	sta $9f20			sta 	$9F20
.25a6	b5 a0		lda $a0,x			lda 	esInt1,x
.25a8	8d 21 9f	sta $9f21			sta	 	$9F21
.25ab	b5 a8		lda $a8,x			lda 	esInt2,x
.25ad	29 01		and #$01			and 	#1
.25af	09 10		ora #$10			ora 	#$10 				; step 1.
.25b1	8d 22 9f	sta $9f22			sta 	$9F22
.25b4	60		rts				rts
.25b5					CVWValue:
.25b5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.25b7	20 09 15	jsr $1509		jsr	errorHandler
.25ba					Command_VPeek:
.25ba	38		sec				sec 						; one byte , CS
.25bb	b0 01		bcs $25be			bcs 	CmdVideoRead
.25bd					Command_VDeek:
.25bd	18		clc				clc 						; two bytes, CC
.25be					CmdVideoRead:
.25be	08		php				php 						; save action on stack.
.25bf	48		pha				pha 						; save stack position
.25c0	a2 0a		ldx #$0a		ldx	#10
.25c2	20 1b 3f	jsr $3f1b		jsr	mainHandler
.25c5	a2 04		ldx #$04		ldx	#4
.25c7	20 1b 3f	jsr $3f1b		jsr	mainHandler
.25ca	fa		plx				plx
.25cb	20 99 25	jsr $2599			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.25ce	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.25d0	95 a0		sta $a0,x			sta 	esInt1,x
.25d2	95 a8		sta $a8,x			sta 	esInt2,x
.25d4	95 b0		sta $b0,x			sta 	esInt3,x
.25d6	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.25d9	95 98		sta $98,x			sta 	esInt0,x
.25db	28		plp				plp 						; check if DOKE (carry was clear)
.25dc	b0 05		bcs $25e3			bcs 	_CVRExit
.25de	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.25e1	95 a0		sta $a0,x			sta 	esInt1,x
.25e3					_CVRExit:
.25e3	8a		txa				txa 						; return X position.
.25e4	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c79					compressMode:
>0c79							.fill 	1
.0c7a					imageInfo:
>0c7a							.fill 	X16MaxImages
.0cba					imageAddr32Low:
>0cba							.fill  	X16MaxImages
.0cfa					imageAddr32High:
>0cfa							.fill  	X16MaxImages
.25e5					LoadVRAMFile:
.25e5	da		phx				phx
.25e6	5a		phy				phy
.25e7					_LVRLoop:
.25e7	20 c1 26	jsr $26c1			jsr 	LVFGet 						; get the next (never access direct)
.25ea	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.25ec	f0 42		beq $2630			beq 	_LVRExit
.25ee	b0 5a		bcs $264a			bcs 	_LVRLoad 					; load data in ?
.25f0	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.25f2	90 11		bcc $2605			bcc 	_LVRSetAddress
.25f4	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.25f6	f0 3b		beq $2633			beq 	_LVRSetPalette
.25f8	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.25fa	90 2d		bcc $2629			bcc 	_LVRSetCompress
.25fc	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.25fe	90 5e		bcc $265e			bcc 	_LVRSetSprite
.2600	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2602	20 09 15	jsr $1509		jsr	errorHandler
.2605					_LVRSetAddress:
.2605	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2607	20 c1 26	jsr $26c1			jsr 	LVFGet
.260a	85 2c		sta $2c				sta 	temp1
.260c	a9 00		lda #$00			lda 	#0
.260e	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.2610	66 2c		ror $2c				ror 	temp1
.2612	6a		ror a				ror		a
.2613	46 2d		lsr $2d				lsr 	temp1+1
.2615	66 2c		ror $2c				ror 	temp1
.2617	6a		ror a				ror		a
.2618	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.261b	a5 2c		lda $2c				lda 	temp1
.261d	8d 21 9f	sta $9f21			sta 	$9F21
.2620	a5 2d		lda $2d				lda 	temp1+1
.2622	09 10		ora #$10			ora 	#$10
.2624	8d 22 9f	sta $9f22			sta 	$9F22
.2627	d0 be		bne $25e7			bne 	_LVRLoop
.2629					_LVRSetCompress:
.2629	29 07		and #$07			and 	#7
.262b	8d 79 0c	sta $0c79			sta 	compressMode
.262e	10 b7		bpl $25e7			bpl 	_LVRLoop
.2630					_LVRExit:
.2630	7a		ply				ply
.2631	fa		plx				plx
.2632	60		rts				rts
.2633					_LVRSetPalette:
.2633	20 c1 26	jsr $26c1			jsr 	LVFGet 						; get palette id.
.2636	20 8b 24	jsr $248b			jsr 	PointToPaletteA 			; in palette.asm
.2639	20 c1 26	jsr $26c1			jsr 	LVFGet 						; copy 12 bit palette data in.
.263c	8d 23 9f	sta $9f23			sta 	$9F23
.263f	20 c1 26	jsr $26c1			jsr 	LVFGet
.2642	29 0f		and #$0f			and 	#$0F
.2644	8d 23 9f	sta $9f23			sta 	$9F23
.2647	4c e7 25	jmp $25e7			jmp 	_LVRLoop
.264a					_LVRLoad:
.264a	ae 79 0c	ldx $0c79			ldx 	compressMode
.264d	d0 55		bne $26a4			bne 	_LVRNotMode0
.264f	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.2651					_LVRLCopyX:
.2651	aa		tax				tax
.2652					_LVRLCopy:
.2652	20 c1 26	jsr $26c1			jsr 	LVFGet 						; write to data.
.2655	8d 23 9f	sta $9f23			sta 	$9F23
.2658	ca		dex				dex
.2659	d0 f7		bne $2652			bne 	_LVRLCopy
.265b	4c e7 25	jmp $25e7			jmp 	_LVRLoop
.265e					_LVRSetSprite:
.265e	48		pha				pha 								; save on stack
.265f	20 c1 26	jsr $26c1			jsr 	LVFGet 						; get the sprite number into X
.2662	aa		tax				tax
.2663	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.2665	b0 38		bcs $269f			bcs 	_LVRSSValue
.2667	68		pla				pla 								; restore the data held in the first byte
.2668	9d 7a 0c	sta $0c7a,x			sta 	imageInfo,x 				; and write into the sprite image table.
.266b					_LVRAlignVRAM:
.266b	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.266e	29 1f		and #$1f			and 	#$1F
.2670	f0 07		beq $2679			beq 	_LVRAligned
.2672	a9 00		lda #$00			lda 	#$00
.2674	8d 23 9f	sta $9f23			sta 	$9F23
.2677	f0 f2		beq $266b			beq 	_LVRAlignVRAM
.2679					_LVRAligned:
.2679	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.267c	4a		lsr a				lsr 	a 	 						; first halve into temp1
.267d	ad 21 9f	lda $9f21			lda 	$9F21
.2680	6a		ror a				ror 	a
.2681	85 2d		sta $2d				sta 	temp1+1
.2683	ad 20 9f	lda $9f20			lda 	$9F20
.2686	6a		ror a				ror 	a
.2687	85 2c		sta $2c				sta 	temp1
.2689	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.268b					_LVRShift:
.268b	46 2d		lsr $2d				lsr 	temp1+1
.268d	66 2c		ror $2c				ror 	temp1
.268f	88		dey				dey
.2690	d0 f9		bne $268b			bne 	_LVRShift
.2692	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.2694	9d fa 0c	sta $0cfa,x			sta 	imageAddr32High,x
.2697	a5 2c		lda $2c				lda 	temp1
.2699	9d ba 0c	sta $0cba,x			sta 	imageAddr32Low,x
.269c	4c e7 25	jmp $25e7			jmp 	_LVRLoop
.269f					_LVRSSValue:
.269f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.26a1	20 09 15	jsr $1509		jsr	errorHandler
.26a4					_LVRNotMode0:
.26a4	e0 01		cpx #$01			cpx 	#1
.26a6	d0 15		bne $26bd			bne 	_LVRNotMode1
.26a8	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.26aa	c9 40		cmp #$40			cmp 	#$40
.26ac	90 a3		bcc $2651			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.26ae					_LVRRLEGroup:
.26ae	29 3f		and #$3f			and 	#$3F
.26b0	aa		tax				tax
.26b1	20 c1 26	jsr $26c1			jsr 	LVFGet
.26b4					_LVRLEGroupLoop:
.26b4	8d 23 9f	sta $9f23			sta 	$9F23
.26b7	ca		dex				dex
.26b8	d0 fa		bne $26b4			bne 	_LVRLEGroupLoop
.26ba	4c e7 25	jmp $25e7			jmp 	_LVRLoop
.26bd					_LVRNotMode1:
>26bd	db						.byte 	$DB
.26be	4c bd 26	jmp $26bd			jmp 	_LVRNotMode1
.26c1	84 32		sty $32		LVFGet:	sty 	tempShort
.26c3	a0 00		ldy #$00			ldy 	#0
.26c5	b1 2a		lda ($2a),y			lda 	(temp0),y
.26c7	a4 32		ldy $32				ldy	 	tempShort
.26c9	e6 2a		inc $2a				inc 	temp0
.26cb	d0 02		bne $26cf			bne 	_LVFGExit
.26cd	e6 2b		inc $2b				inc 	temp0+1
.26cf					_LVFGExit:
.26cf	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.26d0					section_end_extension:
.26d0					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.26d0					floatingpointHandler:
.26d0	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.26d2	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: basic.asm

.26d5					section_end_floatingpoint:
.26d5					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.26d5					ColdStartEntry:
.26d5	a2 ff		ldx #$ff			ldx 	#$FF
.26d7	9a		txs				txs
.26d8	20 61 27	jsr $2761			jsr 	ForceStandardMode
.26db	a2 04		ldx #$04		ldx	#4
.26dd	20 e7 14	jsr $14e7		jsr	deviceHandler
.26e0	a0 ff		ldy #$ff			ldy 	#255
.26e2					_CSBanner:
.26e2	c8		iny				iny
.26e3	b9 09 27	lda $2709,y			lda 	Intro,y
.26e6	f0 14		beq $26fc			beq 	_CSStart
.26e8	c9 08		cmp #$08			cmp 	#8
.26ea	90 08		bcc $26f4			bcc 	_CSInk
.26ec	a2 16		ldx #$16		ldx	#22
.26ee	20 e7 14	jsr $14e7		jsr	deviceHandler
.26f1	4c e2 26	jmp $26e2			jmp 	_CSBanner
.26f4					_CSInk:
.26f4	a2 08		ldx #$08		ldx	#8
.26f6	20 e7 14	jsr $14e7		jsr	deviceHandler
.26f9	4c e2 26	jmp $26e2			jmp 	_CSBanner
.26fc					_CSStart:
.26fc	a2 16		ldx #$16		ldx	#22
.26fe	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2701	a2 06		ldx #$06		ldx	#6
.2703	20 1b 3f	jsr $3f1b		jsr	mainHandler
.2706	4c 21 28	jmp $2821			jmp 	WarmStartEntry
>2709	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2711	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2721	20 2a 2a 2a 0d 0d
>2727	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>272f	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>273f	32 30 32 31 0d 0d
>2745	02 42 61 73 69 63 20				.text 	2,"Basic "
>274c	30 2e 32 31					.text "0.21"
>2750	20 28						.text 	" ("
>2752	30 35 2d 41 70 72 2d 32				.text "05-Apr-2021"
>275a	30 32 31
>275d	29 0d 0d 00					.text 	")",13,13,0
.2761					ForceStandardMode:
.2761	a9 fe		lda #$fe			lda 	#$FE
.2763	20 56 18	jsr $1856		jsr	extensionHandler
.2766	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2767					DeleteLine:
.2767	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.276a	85 2a		sta $2a				sta 	temp0
.276c	ad c9 0a	lda $0ac9			lda 	basePage+1
.276f	85 2b		sta $2b				sta 	temp0+1
.2771	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.2773	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.2775	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2777	d0 07		bne $2780			bne 	_DLNext
.2779	c8		iny				iny
.277a	a5 a0		lda $a0				lda 	esInt1
.277c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.277e	f0 06		beq $2786			beq 	_DLFound
.2780	20 a4 27	jsr $27a4	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2783	d0 ec		bne $2771			bne 	_DLLoop
.2785	60		rts				rts
.2786					_DLFound:
.2786	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2788	b1 2a		lda ($2a),y			lda 	(temp0),y
.278a	a8		tay				tay 								; so we copy from (temp0),y
.278b	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.278d					_DLCopyDown:
.278d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.278f	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2791	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.2793	d0 02		bne $2797			bne 	_DLNoCarry
.2795	e6 2b		inc $2b				inc 	temp0+1
.2797					_DLNoCarry:
.2797	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.2799	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.279b	d0 f0		bne $278d			bne 	_DLCopyDown
.279d	a5 2b		lda $2b				lda 	temp0+1
.279f	c5 36		cmp $36				cmp 	lowMemory+1
.27a1	d0 ea		bne $278d			bne 	_DLCopyDown
.27a3	60		rts				rts
.27a4					IAdvanceTemp0:
.27a4	84 32		sty $32				sty 	tempShort
.27a6	18		clc				clc
.27a7	a0 00		ldy #$00			ldy 	#0 							; get offset
.27a9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.27ab	65 2a		adc $2a				adc 	temp0
.27ad	85 2a		sta $2a				sta 	temp0
.27af	90 02		bcc $27b3			bcc 	_IATNoCarry
.27b1	e6 2b		inc $2b				inc 	temp0+1
.27b3					_IATNoCarry:
.27b3	b1 2a		lda ($2a),y			lda 	(temp0),y
.27b5	a4 32		ldy $32				ldy 	tempShort
.27b7	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.27b9	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.27ba					InsertLine:
.27ba	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.27bd	85 2a		sta $2a				sta 	temp0
.27bf	ad c9 0a	lda $0ac9			lda 	basePage+1
.27c2	85 2b		sta $2b				sta 	temp0+1
.27c4					_ILLoop:
.27c4	a0 01		ldy #$01			ldy 	#1
.27c6	b1 2a		lda ($2a),y			lda 	(temp0),y
.27c8	c5 98		cmp $98				cmp 	esInt0
.27ca	c8		iny				iny
.27cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.27cd	e5 a0		sbc $a0				sbc 	esInt1
.27cf	b0 05		bcs $27d6			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.27d1	20 a4 27	jsr $27a4			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.27d4	d0 ee		bne $27c4			bne 	_ILLoop
.27d6					_ILFound:
.27d6	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.27d8	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.27da	a5 36		lda $36				lda 	lowMemory+1
.27dc	85 2d		sta $2d				sta 	temp1+1
.27de	ad 77 0e	lda $0e77			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.27e1	18		clc				clc 								; add 3 for the line number and offset.
.27e2	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.27e4	a8		tay				tay
.27e5	a2 00		ldx #$00			ldx 	#0
.27e7	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.27e9	91 2c		sta ($2c),y			sta 	(temp1),y
.27eb	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.27ed	c5 2a		cmp $2a				cmp 	temp0
.27ef	d0 06		bne $27f7			bne 	_ILMNext
.27f1	a5 2d		lda $2d				lda 	temp1+1
.27f3	c5 2b		cmp $2b				cmp 	temp0+1
.27f5	f0 0b		beq $2802			beq 	_ILMCopy
.27f7					_ILMNext:
.27f7	a5 2c		lda $2c				lda 	temp1
.27f9	d0 02		bne $27fd			bne 	_ILNoBorrow
.27fb	c6 2d		dec $2d				dec 	temp1+1
.27fd					_ILNoBorrow:
.27fd	c6 2c		dec $2c				dec 	temp1
.27ff	4c e7 27	jmp $27e7			jmp 	_ILMove 					; and go round again
.2802					_ILMCopy:
.2802	98		tya				tya 								; Y is the offset of the new line.
.2803	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2805	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2807	a5 98		lda $98				lda 	esInt0
.2809	91 2a		sta ($2a),y			sta 	(temp0),y
.280b	c8		iny				iny
.280c	a5 a0		lda $a0				lda 	esInt1
.280e	91 2a		sta ($2a),y			sta 	(temp0),y
.2810	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2812					_ILMCopy2:
.2812	b1 28		lda ($28),y			lda 	(codePtr),y
.2814	c8		iny				iny
.2815	c8		iny				iny
.2816	c8		iny				iny
.2817	91 2a		sta ($2a),y			sta 	(temp0),y
.2819	88		dey				dey
.281a	88		dey				dey
.281b	cc 77 0e	cpy $0e77			cpy 	tokenBufferIndex
.281e	d0 f2		bne $2812			bne 	_ILMCopy2
.2820	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2821					WarmStartEntry:
.2821	a2 ff		ldx #$ff			ldx 	#$FF
.2823	9a		txs				txs
.2824	20 61 27	jsr $2761			jsr 	ForceStandardMode
.2827	a9 02		lda #$02			lda 	#2							; green text.
.2829	a2 08		ldx #$08		ldx	#8
.282b	20 e7 14	jsr $14e7		jsr	deviceHandler
.282e	a2 0c		ldx #$0c		ldx	#12
.2830	20 e7 14	jsr $14e7		jsr	deviceHandler
.2833	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.2835	85 28		sta $28				sta 	codePtr
.2837	a5 2b		lda $2b				lda 	temp0+1
.2839	85 29		sta $29				sta 	codePtr+1
.283b	a2 06		ldx #$06		ldx	#6
.283d	20 e7 14	jsr $14e7		jsr	deviceHandler
.2840	a2 08		ldx #$08		ldx	#8
.2842	20 4e 4a	jsr $4a4e		jsr	tokeniserHandler
.2845	c9 00		cmp #$00			cmp 	#0
.2847	f0 25		beq $286e			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2849	a9 74		lda #$74			lda 	#(tokenHeader) & $FF
.284b	85 28		sta $28				sta 	codePtr
.284d	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.284f	85 29		sta $29				sta 	1+(codePtr)
.2851	ad 77 0d	lda $0d77			lda 	tokenBuffer 				; is it a blank line, go get another line.
.2854	c9 80		cmp #$80			cmp 	#$80
.2856	f0 c9		beq $2821			beq 	WarmStartEntry
.2858	29 c0		and #$c0			and 	#$C0						; does it start with a number
.285a	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.285c	f0 15		beq $2873			beq 	HasLineNumber
.285e	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2860	8d 74 0d	sta $0d74			sta 	tokenHeader 				; fake program line.
.2863	8d 75 0d	sta $0d75			sta 	tokenHeader+1
.2866	8d 76 0d	sta $0d76			sta 	tokenHeader+2
.2869	a2 18		ldx #$18		ldx	#24
.286b	20 1b 3f	jsr $3f1b		jsr	mainHandler
.286e					WSEError:
.286e	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2870	20 09 15	jsr $1509		jsr	errorHandler
.2873					HasLineNumber:
.2873	a0 03		ldy #$03			ldy 	#3 							; get line number
.2875	a9 00		lda #$00			lda 	#0
.2877	a2 0a		ldx #$0a		ldx	#10
.2879	20 1b 3f	jsr $3f1b		jsr	mainHandler
.287c	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.287e	05 b0		ora $b0				ora 	esInt3
.2880	d0 ec		bne $286e			bne 	WSEError
.2882	98		tya				tya 								; make codePtr point to code after the line number.
.2883	18		clc				clc 								; by skipping over the tokenised number.
.2884	65 28		adc $28				adc 	codePtr
.2886	85 28		sta $28				sta 	codePtr
.2888	90 02		bcc $288c			bcc		_HLNNoCarry
.288a	e6 29		inc $29				inc 	codePtr+1
.288c					_HLNNoCarry:
.288c	98		tya				tya 								; subtract that offset from the code buffer index
.288d	38		sec				sec
.288e	49 ff		eor #$ff			eor 	#$FF
.2890	6d 77 0e	adc $0e77			adc 	tokenBufferIndex
.2893	18		clc				clc 								; add space allowing for header & $80 trailer
.2894	69 04		adc #$04			adc 	#4
.2896	8d 77 0e	sta $0e77			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2899	20 67 27	jsr $2767			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.289c					_HLNNoDelete:
.289c	ad 77 0e	lda $0e77			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.289f	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.28a1	f0 0c		beq $28af			beq 	_HLMEditDone
.28a3	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.28a5	18		clc				clc 								; workspace (1k)
.28a6	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.28a8	c5 34		cmp $34				cmp 	highMemory+1
.28aa	b0 0b		bcs $28b7			bcs 	_HLMMemory 					; nope, won't allowit.
.28ac	20 ba 27	jsr $27ba			jsr 	InsertLine 					; insert the line in
.28af					_HLMEditDone:
.28af	a2 06		ldx #$06		ldx	#6
.28b1	20 1b 3f	jsr $3f1b		jsr	mainHandler
.28b4	4c 21 28	jmp $2821			jmp 	WarmStartEntry
.28b7					_HLMMemory:
.28b7	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.28b9	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.28bc					interactionHandler:
.28bc	7c bf 28	jmp ($28bf,x)			jmp 	(interactionVectors,x)
.28bf					interactionVectors:
>28bf	c5 28					.word _DummyControlHandler ; index 0
>28c1	d5 26					.word ColdStartEntry       ; index 2
>28c3	21 28					.word WarmStartEntry       ; index 4
.28c5					_DummyControlHandler:
.28c5	60		rts			rts

;******  Return to file: basic.asm

.28c6					section_end_interaction:
.28c6					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d3a					dataPtr:
>0d3a							.fill 	2
.0d3c					dataIndex:
>0d3c							.fill 	1
.28c6					CommandRead:
.28c6	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.28c8	20 e9 37	jsr $37e9			jsr 	EvaluateReference
.28cb	20 0c 29	jsr $290c			jsr 	SwapDPCP 					; use the data pointer.
.28ce	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.28d0	c8		iny				iny
.28d1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.28d3	f0 07		beq $28dc			beq 	_CRInData
.28d5	88		dey				dey
.28d6	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.28d8	aa		tax				tax
.28d9	20 e9 2f	jsr $2fe9			jsr 	ScanForward
.28dc					_CRInData:
.28dc	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.28de	20 91 37	jsr $3791			jsr 	Evaluate
.28e1	ca		dex				dex 								; and write the value.
.28e2	20 54 2b	jsr $2b54			jsr 	WriteValue
.28e5	20 0c 29	jsr $290c			jsr 	SwapDPCP 					; get the code pointer back.
.28e8	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.28ea	c8		iny				iny
.28eb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.28ed	f0 d7		beq $28c6			beq 	CommandRead
.28ef	88		dey				dey
.28f0	60		rts				rts
.28f1					CommandData:
.28f1	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.28f3	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.28f5	20 e9 2f	jsr $2fe9			jsr 	ScanForward
.28f8	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.28f9	60		rts				rts
.28fa					CommandRestore:
.28fa	ad c8 0a	lda $0ac8			lda 	basePage
.28fd	8d 3a 0d	sta $0d3a			sta 	dataPtr
.2900	ad c9 0a	lda $0ac9			lda 	basePage+1
.2903	8d 3b 0d	sta $0d3b			sta 	dataPtr+1
.2906	a9 03		lda #$03			lda 	#3
.2908	8d 3c 0d	sta $0d3c			sta 	dataIndex
.290b	60		rts				rts
.290c					SwapDPCP:
.290c	da		phx				phx
.290d	98		tya				tya 								; swap Y, DataIndex
.290e	ac 3c 0d	ldy $0d3c			ldy 	DataIndex
.2911	8d 3c 0d	sta $0d3c			sta 	DataIndex
.2914	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2916	ae 3a 0d	ldx $0d3a			ldx 	dataptr
.2919	8d 3a 0d	sta $0d3a			sta 	dataPtr
.291c	86 28		stx $28				stx 	codePtr
.291e	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2920	ae 3b 0d	ldx $0d3b			ldx 	dataptr+1
.2923	8d 3b 0d	sta $0d3b			sta 	dataPtr+1
.2926	86 29		stx $29				stx 	codePtr+1
.2928	fa		plx				plx
.2929	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.292a					CommandGOSUB:
.292a	20 ae 37	jsr $37ae			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.292d	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.292f	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2931	20 c8 3e	jsr $3ec8			jsr 	RSClaim
.2934	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2936	20 f4 3e	jsr $3ef4			jsr 	RSSavePosition
.2939	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.293b	f0 1b		beq $2958			beq 	GotoTOS 					; and do a GOTO there.
.293d					CommandRETURN:
.293d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.293f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2941	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2943	f0 05		beq $294a			beq 	_isok
.2945	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2947	20 09 15	jsr $1509		jsr	errorHandler
.294a					_isok:
.294a	a9 01		lda #$01			lda 	#1
.294c	20 07 3f	jsr $3f07			jsr 	RSLoadPosition 				; reload the position from offset 1.
.294f	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2951	20 ea 3e	jsr $3eea			jsr 	RSFree
.2954	60		rts				rts
.2955					CommandGOTO:
.2955	20 ae 37	jsr $37ae			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2958					GotoTOS:
.2958	20 d2 32	jsr $32d2			jsr 	ResetCodeAddress 			; simple search.
.295b					_GotoSearch:
.295b	a0 00		ldy #$00			ldy 	#0 							; get offset
.295d	b1 28		lda ($28),y			lda 	(codePtr),y
.295f	f0 21		beq $2982			beq 	_GotoError 					; not found.
.2961	c8		iny				iny									; check LSB match
.2962	b1 28		lda ($28),y			lda 	(codePtr),y
.2964	d5 98		cmp $98,x			cmp 	esInt0,x
.2966	d0 07		bne $296f			bne 	_GotoNext
.2968	c8		iny				iny
.2969	b1 28		lda ($28),y			lda 	(codePtr),y
.296b	d5 a0		cmp $a0,x			cmp 	esInt1,x
.296d	f0 10		beq $297f			beq 	_GotoFound
.296f					_GotoNext:
.296f	a0 00		ldy #$00			ldy 	#0 							; go next line
.2971	b1 28		lda ($28),y			lda 	(codePtr),y
.2973	18		clc				clc
.2974	65 28		adc $28				adc 	codePtr
.2976	85 28		sta $28				sta 	codePtr
.2978	90 e1		bcc $295b			bcc 	_GotoSearch
.297a	e6 29		inc $29				inc 	codePtr+1
.297c	4c 5b 29	jmp $295b			jmp 	_GotoSearch
.297f					_GotoFound:
.297f	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2981	60		rts				rts
.2982					_GotoError:
.2982	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2984	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0d3d					InputBuffer:
>0d3d							.fill 	MaxInputSize+1
.2987					Command_Input:
.2987	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2989	c8		iny				iny
.298a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.298c	f0 f9		beq $2987			beq 	Command_Input
.298e	88		dey				dey 							; undo consume
.298f	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2991	f0 52		beq $29e5			beq 	_CIExit 				; : or EOL, exit
.2993	c9 80		cmp #$80			cmp 	#TOK_EOL
.2995	f0 4e		beq $29e5			beq 	_CIExit
.2997	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2999	90 12		bcc $29ad			bcc 	_CIVariable
.299b	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.299d	d0 41		bne $29e0			bne 	_CISyntax
.299f	a2 00		ldx #$00			ldx 	#0
.29a1	20 a5 37	jsr $37a5			jsr 	EvaluateString 			; evaluate and print string
.29a4	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0
.29a7	20 b4 2a	jsr $2ab4			jsr 	PrintString
.29aa	4c 87 29	jmp $2987			jmp 	Command_Input
.29ad					_CIVariable:
.29ad	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.29af	20 e9 37	jsr $37e9			jsr 	EvaluateReference  		; this is where its going
.29b2					_CIRetry:
.29b2	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.29b4	a2 14		ldx #$14		ldx	#20
.29b6	20 e7 14	jsr $14e7		jsr	deviceHandler
.29b9	5a		phy				phy
.29ba	20 f9 29	jsr $29f9			jsr 	InputString 			; input a string (manually)
.29bd	a2 01		ldx #$01			ldx 	#1
.29bf	20 e6 29	jsr $29e6			jsr 	BufferToStackX 			; make stack,x ref input string.
.29c2	a5 90		lda $90				lda 	esType 					; if target type numeric
.29c4	29 40		and #$40			and 	#$40 					; then convert to number
.29c6	d0 10		bne $29d8			bne 	_CIWrite
.29c8	a2 01		ldx #$01			ldx 	#1
.29ca	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.29cd	a9 0a		lda #$0a			lda 	#10
.29cf	20 a2 3c	jsr $3ca2			jsr 	MInt32FromString 		; convert it back from a string.
.29d2	7a		ply				ply
.29d3	b0 03		bcs $29d8			bcs 	_CIWrite 				; successfully converted.
.29d5	18		clc				clc 							; default fail FP conversion
.29d6	90 da		bcc $29b2			bcc		_CIRetry				; failed, try again.
.29d8					_CIWrite:
.29d8	a2 00		ldx #$00			ldx 	#0
.29da	20 54 2b	jsr $2b54			jsr 	WriteValue
.29dd	4c 87 29	jmp $2987			jmp 	Command_Input
.29e0					_CISyntax:
.29e0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.29e2	20 09 15	jsr $1509		jsr	errorHandler
.29e5					_CIExit:
.29e5	60		rts				rts
.29e6					BufferToStackX:
.29e6	a9 3d		lda #$3d			lda 	#InputBuffer & $FF
.29e8	95 98		sta $98,x			sta 	esInt0,x
.29ea	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.29ec	95 a0		sta $a0,x			sta 	esInt1,x
.29ee	a9 00		lda #$00			lda 	#0
.29f0	95 a8		sta $a8,x			sta 	esInt2,x
.29f2	95 b0		sta $b0,x			sta 	esInt3,x
.29f4	a9 40		lda #$40			lda 	#$40
.29f6	95 90		sta $90,x			sta 	esType,x
.29f8	60		rts				rts
.29f9					InputString:
.29f9	a9 00		lda #$00			lda 	#0
.29fb	8d 3d 0d	sta $0d3d			sta 	InputBuffer
.29fe					_InputLoop:
.29fe	a2 02		ldx #$02		ldx	#2
.2a00	20 e7 14	jsr $14e7		jsr	deviceHandler
.2a03	a2 0a		ldx #$0a		ldx	#10
.2a05	20 e7 14	jsr $14e7		jsr	deviceHandler
.2a08	c9 00		cmp #$00			cmp 	#0
.2a0a	f0 f2		beq $29fe			beq 	_InputLoop
.2a0c	c9 08		cmp #$08			cmp 	#8
.2a0e	f0 19		beq $2a29			beq 	_InputBackspace
.2a10	c9 0d		cmp #$0d			cmp 	#13
.2a12	f0 21		beq $2a35			beq 	_InputExit
.2a14	ae 3d 0d	ldx $0d3d			ldx 	InputBuffer
.2a17	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2a19	f0 e3		beq $29fe			beq 	_InputLoop
.2a1b	9d 3e 0d	sta $0d3e,x			sta 	InputBuffer+1,x 		; write char
.2a1e	ee 3d 0d	inc $0d3d			inc 	InputBuffer 			; advance count.
.2a21					_InputPrintLoop:
.2a21	a2 14		ldx #$14		ldx	#20
.2a23	20 e7 14	jsr $14e7		jsr	deviceHandler
.2a26	4c fe 29	jmp $29fe			jmp	 	_InputLoop
.2a29					_InputBackspace:
.2a29	ad 3d 0d	lda $0d3d			lda 	InputBuffer 			; at start
.2a2c	f0 d0		beq $29fe			beq 	_InputLoop
.2a2e	ce 3d 0d	dec $0d3d			dec 	InputBuffer
.2a31	a9 08		lda #$08			lda 	#8
.2a33	d0 ec		bne $2a21			bne 	_InputPrintLoop
.2a35					_InputExit:
.2a35	a2 06		ldx #$06		ldx	#6
.2a37	20 e7 14	jsr $14e7		jsr	deviceHandler
.2a3a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d5e					lastPrintToken:
>0d5e							.fill 	1
.2a3b					Command_Print:
.2a3b	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2a3d	8d 5e 0d	sta $0d5e			sta 	lastPrintToken
.2a40	88		dey				dey
.2a41					_PrintLoopSkip:
.2a41	c8		iny				iny
.2a42					_PrintLoop:
.2a42	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2a44	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2a46	f0 5b		beq $2aa3			beq 	_PrintExit
.2a48	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2a4a	f0 57		beq $2aa3			beq 	_PrintExit
.2a4c	8d 5e 0d	sta $0d5e			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2a4f	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2a51	f0 ee		beq $2a41			beq 	_PrintLoopSkip
.2a53	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2a55	f0 3c		beq $2a93			beq	 	_PrintNewLine
.2a57	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2a59	f0 40		beq $2a9b			beq 	_PrintTab
.2a5b	20 8f 37	jsr $378f			jsr 	EvaluateRoot 				; evaluate something at the root
.2a5e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2a60	85 2a		sta $2a				sta 	temp0
.2a62	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2a64	85 2b		sta $2b				sta 	1+(temp0)
.2a66	a5 90		lda $90				lda 	esType 						; get type
.2a68	f0 15		beq $2a7f			beq		_PrintInteger
.2a6a	4a		lsr a				lsr 	a 							; check for floating point
.2a6b	b0 08		bcs $2a75			bcs 	_PrintFloat
.2a6d					_PrintString:
.2a6d	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2a6f	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0
.2a72	4c 8d 2a	jmp $2a8d			jmp 	_PrintTemp0 				; print no leading space.
.2a75					_PrintFloat:
.2a75	a9 00		lda #$00			lda 	#0 							; stack level.
.2a77	a2 16		ldx #$16		ldx	#22
.2a79	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.2a7c	4c 86 2a	jmp $2a86			jmp 	_PrintSpaceTemp0
.2a7f					_PrintInteger:
.2a7f	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2a81	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2a83	20 87 3d	jsr $3d87			jsr 	MInt32ToString				; convert to text
.2a86					_PrintSpaceTemp0:
.2a86	a9 20		lda #$20			lda 	#32
.2a88	a2 14		ldx #$14		ldx	#20
.2a8a	20 e7 14	jsr $14e7		jsr	deviceHandler
.2a8d					_PrintTemp0:
.2a8d	20 b4 2a	jsr $2ab4			jsr 	PrintString
.2a90	4c 42 2a	jmp $2a42			jmp 	_PrintLoop
.2a93					_PrintNewLine:
.2a93	a2 06		ldx #$06		ldx	#6
.2a95	20 e7 14	jsr $14e7		jsr	deviceHandler
.2a98	4c 41 2a	jmp $2a41			jmp 	_PrintLoopSkip
.2a9b					_PrintTab:
.2a9b	a2 1a		ldx #$1a		ldx	#26
.2a9d	20 e7 14	jsr $14e7		jsr	deviceHandler
.2aa0	4c 41 2a	jmp $2a41			jmp 	_PrintLoopSkip
.2aa3					_PrintExit:
.2aa3	ad 5e 0d	lda $0d5e			lda		lastPrintToken 				; check last token
.2aa6	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2aa8	f0 09		beq $2ab3			beq 	_PrintExit2
.2aaa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2aac	f0 05		beq $2ab3			beq 	_PrintExit2
.2aae	a2 06		ldx #$06		ldx	#6
.2ab0	20 e7 14	jsr $14e7		jsr	deviceHandler
.2ab3					_PrintExit2:
.2ab3	60		rts				rts
.2ab4					PrintString:
.2ab4	da		phx				phx
.2ab5	5a		phy				phy
.2ab6	a0 00		ldy #$00			ldy 	#0							; get length
.2ab8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2aba	aa		tax				tax 								; into X
.2abb	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2abd	f0 0e		beq $2acd			beq 	_PSExit
.2abf	ca		dex				dex
.2ac0	da		phx				phx
.2ac1	c8		iny				iny
.2ac2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ac4	a2 14		ldx #$14		ldx	#20
.2ac6	20 e7 14	jsr $14e7		jsr	deviceHandler
.2ac9	fa		plx				plx
.2aca	4c bb 2a	jmp $2abb			jmp 	_PSLoop
.2acd					_PSExit:
.2acd	7a		ply				ply
.2ace	fa		plx				plx
.2acf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2ad0					Command_CLS:
.2ad0	a2 04		ldx #$04		ldx	#4
.2ad2	20 e7 14	jsr $14e7		jsr	deviceHandler
.2ad5	60		rts				rts
.2ad6					Command_Ink:
.2ad6	a2 00		ldx #$00			ldx 	#0
.2ad8	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger
.2adb	a2 08		ldx #$08		ldx	#8
.2add	20 e7 14	jsr $14e7		jsr	deviceHandler
.2ae0	60		rts				rts
.2ae1					Command_Paper:
.2ae1	a2 00		ldx #$00			ldx 	#0
.2ae3	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger
.2ae6	a2 12		ldx #$12		ldx	#18
.2ae8	20 e7 14	jsr $14e7		jsr	deviceHandler
.2aeb	60		rts				rts
.2aec					Command_Locate:
.2aec	a2 00		ldx #$00			ldx 	#0
.2aee	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger
.2af1	20 ad 3e	jsr $3ead			jsr 	CheckComma
.2af4	e8		inx				inx
.2af5	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger
.2af8	5a		phy				phy
.2af9	a4 99		ldy $99				ldy 	esInt0+1
.2afb	a5 98		lda $98				lda 	esInt0
.2afd	a2 10		ldx #$10		ldx	#16
.2aff	20 e7 14	jsr $14e7		jsr	deviceHandler
.2b02	7a		ply				ply
.2b03	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2b04					Command_VDU:
.2b04	20 ae 37	jsr $37ae			jsr 	EvaluateRootInteger 			; get integer at root.
.2b07	a5 98		lda $98				lda 	esInt0
.2b09	a2 14		ldx #$14		ldx	#20
.2b0b	20 e7 14	jsr $14e7		jsr	deviceHandler
.2b0e					_CVNext:
.2b0e	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2b10	c8		iny				iny
.2b11	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2b13	f0 ef		beq $2b04			beq 	Command_VDU
.2b15	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2b17	d0 0a		bne $2b23			bne 	_CVExit
.2b19	a5 a0		lda $a0				lda 	esInt1
.2b1b	a2 14		ldx #$14		ldx	#20
.2b1d	20 e7 14	jsr $14e7		jsr	deviceHandler
.2b20	4c 0e 2b	jmp $2b0e			jmp 	_CVNext
.2b23	88		dey		_CVExit:dey
.2b24	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2b25					Command_Assert:
.2b25	20 ae 37	jsr $37ae			jsr 	EvaluateRootInteger 		; what is being asserted.
.2b28	20 56 3e	jsr $3e56			jsr 	MInt32Zero 					; is it true ?
.2b2b	f0 01		beq $2b2e			beq 	_CAError
.2b2d	60		rts				rts
.2b2e					_CAError:
.2b2e	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2b30	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2b33					Command_Dim:
.2b33	a2 04		ldx #$04		ldx	#4
.2b35	20 0d 4e	jsr $4e0d		jsr	variableHandler
.2b38	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2b3a	c8		iny				iny
.2b3b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2b3d	f0 f4		beq $2b33			beq 	Command_Dim
.2b3f	88		dey				dey 								; unpick get
.2b40	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2b41					CommandLet:
.2b41	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2b43	20 e9 37	jsr $37e9			jsr 	EvaluateReference
.2b46	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2b48	20 95 3e	jsr $3e95			jsr 	CheckToken
.2b4b	e8		inx				inx 								; do RHS
.2b4c	20 91 37	jsr $3791			jsr 	Evaluate 					; evaluate and dereference
.2b4f	ca		dex				dex
.2b50	20 54 2b	jsr $2b54			jsr 	WriteValue 					; write it out
.2b53	60		rts				rts
.2b54					WriteValue:
.2b54	5a		phy				phy
.2b55	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2b58	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2b5a	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2b5c	29 40		and #$40			and 	#$40
.2b5e	d0 4f		bne $2baf			bne		_WVType
.2b60	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2b62	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2b64	29 40		and #$40			and 	#$40
.2b66	d0 1f		bne $2b87			bne 	_WVCopyString
.2b68	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2b6a	15 91		ora $91,x			ora 	esType+1,x
.2b6c	4a		lsr a				lsr 	a
.2b6d	90 22		bcc $2b91			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2b6f	b5 90		lda $90,x			lda 	esType,x
.2b71	4a		lsr a				lsr 	a
.2b72	90 3b		bcc $2baf			bcc 	_WVType
.2b74	e8		inx				inx 								; force the value being written to be a float.
.2b75	20 f5 33	jsr $33f5			jsr 	BPMakeFloat
.2b78	ca		dex				dex
.2b79	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0 					; set Temp0 to write address
.2b7c	e8		inx				inx
.2b7d	8a		txa				txa
.2b7e	a2 22		ldx #$22		ldx	#34
.2b80	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.2b83	aa		tax				tax
.2b84	4c ad 2b	jmp $2bad			jmp 	_WVCopyExit
.2b87					_WVCopyString:
.2b87	8a		txa				txa
.2b88	a2 10		ldx #$10		ldx	#16
.2b8a	20 c6 41	jsr $41c6		jsr	stringHandler
.2b8d	aa		tax				tax
.2b8e	4c ad 2b	jmp $2bad			jmp 	_WVCopyExit
.2b91					_WVCopyData4:
.2b91	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2b93	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2b95	d0 10		bne $2ba7			bne 	_WVCopyData1
.2b97	a0 03		ldy #$03			ldy 	#3
.2b99	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2b9b	91 2a		sta ($2a),y			sta 	(temp0),y
.2b9d	88		dey				dey
.2b9e	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2ba0	91 2a		sta ($2a),y			sta 	(temp0),y
.2ba2	88		dey				dey
.2ba3	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2ba5	91 2a		sta ($2a),y			sta 	(temp0),y
.2ba7					_WVCopyData1:
.2ba7	a0 00		ldy #$00			ldy 	#0
.2ba9	b5 99		lda $99,x			lda 	esInt0+1,x
.2bab	91 2a		sta ($2a),y			sta 	(temp0),y
.2bad					_WVCopyExit:
.2bad	7a		ply				ply
.2bae	60		rts				rts
.2baf					_WVType:
.2baf	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2bb1	20 09 15	jsr $1509		jsr	errorHandler
.2bb4					TOSToTemp0:
.2bb4	b5 98		lda $98,x			lda 	esInt0,x
.2bb6	85 2a		sta $2a				sta 	temp0
.2bb8	b5 a0		lda $a0,x			lda 	esInt1,x
.2bba	85 2b		sta $2b				sta 	temp0+1
.2bbc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2bbd					Command_Poke:
.2bbd	a9 01		lda #$01			lda 	#1
.2bbf	d0 06		bne $2bc7			bne 	PokeGeneral
.2bc1					Command_Doke:
.2bc1	a9 02		lda #$02			lda 	#2
.2bc3	d0 02		bne $2bc7			bne 	PokeGeneral
.2bc5					Command_Loke:
.2bc5	a9 03		lda #$03			lda 	#3
.2bc7					PokeGeneral:
.2bc7	48		pha				pha 								; save id (PDL = 123)
.2bc8	20 ae 37	jsr $37ae			jsr 	EvaluateRootInteger 		; target address
.2bcb	20 ad 3e	jsr $3ead			jsr	 	CheckComma
.2bce	e8		inx				inx
.2bcf	20 b0 37	jsr $37b0			jsr 	EvaluateInteger 			; what value to POKE ?
.2bd2	ca		dex				dex
.2bd3	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0 					; temp0 points to the target address
.2bd6	84 32		sty $32				sty 	tempShort 					; save Y
.2bd8	68		pla				pla 								; get copy type (1-3) and dispatch
.2bd9	aa		tax				tax
.2bda	ca		dex				dex
.2bdb	f0 14		beq $2bf1			beq 	_Poke1
.2bdd	ca		dex				dex
.2bde	f0 0b		beq $2beb			beq 	_Poke2
.2be0	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2be2	a5 b1		lda $b1				lda 	esInt3+1
.2be4	91 2a		sta ($2a),y			sta 	(temp0),y
.2be6	88		dey				dey
.2be7	a5 a9		lda $a9				lda 	esInt2+1
.2be9	91 2a		sta ($2a),y			sta 	(temp0),y
.2beb					_Poke2:
.2beb	a0 01		ldy #$01			ldy 	#1
.2bed	a5 a1		lda $a1				lda 	esInt1+1
.2bef	91 2a		sta ($2a),y			sta 	(temp0),y
.2bf1					_Poke1:
.2bf1	a0 00		ldy #$00			ldy 	#0
.2bf3	a5 99		lda $99				lda 	esInt0+1
.2bf5	91 2a		sta ($2a),y			sta 	(temp0),y
.2bf7	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2bf9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2bfa					Command_Rem:
.2bfa					Command_Rem2:
.2bfa	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2bfc	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2bfe	d0 06		bne $2c06			bne 	_CRNotString
.2c00	c8		iny				iny
.2c01	98		tya				tya
.2c02	38		sec				sec
.2c03	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2c05	a8		tay				tay
.2c06					_CRNotString:
.2c06	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2c07					CommandStop:
.2c07	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2c09	20 09 15	jsr $1509		jsr	errorHandler
.2c0c					CommandEnd:
.2c0c	4c 16 3f	jmp $3f16			jmp 	WarmStart
.2c0f					CommandXemu:
.2c0f	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2c12					AdvanceNextLine:
.2c12	a0 00		ldy #$00			ldy 	#0 							; get offset
.2c14	b1 28		lda ($28),y			lda 	(codePtr),y
.2c16	18		clc				clc 								; add to codePtr
.2c17	65 28		adc $28				adc 	codePtr
.2c19	85 28		sta $28				sta 	codePtr
.2c1b	90 02		bcc $2c1f			bcc 	_ANLNoCarry
.2c1d	e6 29		inc $29				inc 	codePtr+1
.2c1f					_ANLNoCarry:
.2c1f	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2c21	f0 e9		beq $2c0c			beq 	CommandEnd 					; execute END
.2c23	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2c25	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2c26					Command_FOR:
.2c26	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2c28	a2 0b		ldx #$0b			ldx 	#11
.2c2a	20 c8 3e	jsr $3ec8			jsr 	RSClaim
.2c2d	20 41 2b	jsr $2b41			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2c30	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2c32	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2c34	d0 48		bne $2c7e			bne 	_CFType
.2c36	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2c38	20 95 3e	jsr $3e95			jsr 	CheckToken
.2c3b	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2c3d	20 b0 37	jsr $37b0			jsr 	EvaluateInteger				; get terminal value in stack 1
.2c40	5a		phy				phy
.2c41	a0 04		ldy #$04			ldy 	#4
.2c43	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2c45	91 37		sta ($37),y			sta 	(rsPointer),y
.2c47	c8		iny				iny
.2c48	a5 a0		lda $a0				lda		esInt1
.2c4a	91 37		sta ($37),y			sta 	(rsPointer),y
.2c4c	c8		iny				iny
.2c4d	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2c4f	91 37		sta ($37),y			sta 	(rsPointer),y
.2c51	c8		iny				iny
.2c52	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2c54	91 37		sta ($37),y			sta 	(rsPointer),y
.2c56	c8		iny				iny
.2c57	a5 a1		lda $a1				lda		esInt1+1
.2c59	91 37		sta ($37),y			sta 	(rsPointer),y
.2c5b	c8		iny				iny
.2c5c	a5 a9		lda $a9				lda		esInt2+1
.2c5e	91 37		sta ($37),y			sta 	(rsPointer),y
.2c60	c8		iny				iny
.2c61	a5 b1		lda $b1				lda		esInt3+1
.2c63	91 37		sta ($37),y			sta 	(rsPointer),y
.2c65	7a		ply				ply
.2c66	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2c68	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2c6a	d0 0c		bne $2c78			bne 	_CFDone
.2c6c	c8		iny				iny									; skip over step.
.2c6d	20 b0 37	jsr $37b0			jsr 	EvaluateInteger 			; get step
.2c70	5a		phy				phy
.2c71	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2c73	a0 06		ldy #$06			ldy 	#6
.2c75	91 37		sta ($37),y			sta 	(rsPointer),y
.2c77	7a		ply				ply
.2c78					_CFDone:
.2c78	a9 01		lda #$01			lda 	#1
.2c7a	20 f4 3e	jsr $3ef4			jsr 	RSSavePosition 				; save position.
.2c7d	60		rts				rts
.2c7e					_CFType:
.2c7e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c80	20 09 15	jsr $1509		jsr	errorHandler
.2c83					Command_NEXT:
.2c83	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c85	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c87	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2c89	f0 05		beq $2c90			beq 	_isok
.2c8b	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2c8d	20 09 15	jsr $1509		jsr	errorHandler
.2c90					_isok:
.2c90	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2c92	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2c94	b0 16		bcs $2cac			bcs 	_CNNoIndex
.2c96	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2c98	20 e9 37	jsr $37e9			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2c9b	5a		phy				phy
.2c9c	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2c9e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ca0	d5 98		cmp $98,x			cmp 	esInt0,x
.2ca2	d0 72		bne $2d16			bne 	_CNBadIndex
.2ca4	c8		iny				iny
.2ca5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ca7	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2ca9	d0 6b		bne $2d16			bne 	_CNBadIndex
.2cab	7a		ply				ply
.2cac					_CNNoIndex:
.2cac	5a		phy				phy
.2cad	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2caf	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cb1	85 2a		sta $2a				sta 	temp0
.2cb3	c8		iny				iny
.2cb4	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cb6	85 2b		sta $2b				sta 	temp0+1
.2cb8	c8		iny				iny
.2cb9	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2cbb	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2cbd	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2cbf	10 01		bpl $2cc2			bpl 	_CNSignX
.2cc1	ca		dex				dex  								; X = $FF
.2cc2					_CNSignX:
.2cc2	18		clc				clc 								; add to the LSB
.2cc3	a0 00		ldy #$00			ldy 	#0
.2cc5	71 2a		adc ($2a),y			adc 	(temp0),y
.2cc7	91 2a		sta ($2a),y			sta 	(temp0),y
.2cc9					_CNPropogate:
.2cc9	c8		iny				iny  								; add the sign extended in X to the rest.
.2cca	8a		txa				txa
.2ccb	71 2a		adc ($2a),y			adc 	(temp0),y
.2ccd	91 2a		sta ($2a),y			sta 	(temp0),y
.2ccf	c8		iny				iny
.2cd0	8a		txa				txa
.2cd1	71 2a		adc ($2a),y			adc 	(temp0),y
.2cd3	91 2a		sta ($2a),y			sta 	(temp0),y
.2cd5	c8		iny				iny
.2cd6	8a		txa				txa
.2cd7	71 2a		adc ($2a),y			adc 	(temp0),y
.2cd9	91 2a		sta ($2a),y			sta 	(temp0),y
.2cdb	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2cdc	a5 37		lda $37				lda 	rsPointer
.2cde	69 07		adc #$07			adc 	#7
.2ce0	85 2c		sta $2c				sta 	temp1
.2ce2	a9 00		lda #$00			lda 	#0
.2ce4	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2ce6	a8		tay				tay 								; and clear the Y register again.
.2ce7	65 38		adc $38				adc 	rsPointer+1
.2ce9	85 2d		sta $2d				sta 	temp1+1
.2ceb	38		sec				sec 								; calculate current - limit oring interim values.
.2cec	20 22 2d	jsr $2d22			jsr 	_CNCompare 					; each of these does a byte.
.2cef	20 22 2d	jsr $2d22			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2cf2	20 22 2d	jsr $2d22			jsr 	_CNCompare 					; and the carry of the subtraction.
.2cf5	20 22 2d	jsr $2d22			jsr 	_CNCompare
.2cf8	50 02		bvc $2cfc			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2cfa	49 80		eor #$80			eor 	#$80
.2cfc					_CNNoOverflow:
.2cfc	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2cfe	30 1b		bmi $2d1b			bmi 	_CNCheckDownto
.2d00	c9 00		cmp #$00			cmp 	#0
.2d02	30 0b		bmi $2d0f			bmi 	_CNLoopRound 				; loop round if < =
.2d04	a5 2e		lda $2e				lda 	temp2
.2d06	f0 07		beq $2d0f			beq 	_CNLoopRound
.2d08					_CNLoopExit:
.2d08	7a		ply				ply
.2d09	a9 0b		lda #$0b			lda 	#11
.2d0b	20 ea 3e	jsr $3eea			jsr 	RSFree
.2d0e	60		rts				rts
.2d0f					_CNLoopRound:
.2d0f	7a		ply				ply
.2d10	a9 01		lda #$01			lda 	#1
.2d12	20 07 3f	jsr $3f07			jsr 	RSLoadPosition				; go back to the loop top
.2d15	60		rts				rts
.2d16					_CNBadIndex:
.2d16	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2d18	20 09 15	jsr $1509		jsr	errorHandler
.2d1b					_CNCheckDownto:
.2d1b	c9 00		cmp #$00			cmp 	#0
.2d1d	10 f0		bpl $2d0f			bpl 	_CNLoopRound
.2d1f	4c 08 2d	jmp $2d08			jmp 	_CNLoopExit
.2d22					_CNCompare:
.2d22	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2d24	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2d26	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2d28	85 2e		sta $2e				sta 	temp2
.2d2a	c8		iny				iny
.2d2b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2d2c					CommandIf:
.2d2c	20 ae 37	jsr $37ae			jsr 	EvaluateRootInteger 		; get what's being tested.
.2d2f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2d31	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2d33	f0 04		beq $2d39			beq 	_IfSimple
.2d35	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2d37	d0 1b		bne $2d54			bne 	_IfComplex
.2d39					_IfSimple:
.2d39	20 56 3e	jsr $3e56			jsr 	MInt32Zero					; check if TOS zero
.2d3c	f0 10		beq $2d4e			beq 	_IfEOL 						; go to next line.
.2d3e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2d40	c8		iny				iny
.2d41	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2d43	f0 0c		beq $2d51			beq 	_IfGoto 					; do the Goto code
.2d45	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2d47	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2d49	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2d4b	f0 04		beq $2d51			beq 	_IfGoto
.2d4d	60		rts				rts 								; else continue on this line.
.2d4e					_IfEOL:
.2d4e	4c 12 2c	jmp $2c12			jmp 	AdvanceNextLine 			; go to next line
.2d51					_IfGoto:
.2d51	4c 55 29	jmp $2955			jmp 	CommandGoto
.2d54					_IfComplex:
.2d54	20 56 3e	jsr $3e56			jsr 	MInt32Zero 					; is it true ?
.2d57	f0 01		beq $2d5a			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2d59	60		rts				rts 								; else continue.
.2d5a					_IFSkip:
.2d5a	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2d5c	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2d5e	4c e9 2f	jmp $2fe9			jmp		ScanForward
.2d61					Command_ELSE:
.2d61	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2d63	8a		txa				txa
.2d64	4c e9 2f	jmp $2fe9			jmp		ScanForward
.2d67					Command_ENDIF:
.2d67	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d5f					storeSize:
>0d5f							.fill 	1
.2d68					CommandLocal:
.2d68	a2 00		ldx #$00			ldx 	#0
.2d6a	20 86 2d	jsr $2d86			jsr 	LocaliseVariable 			; localise one.
.2d6d					_CLCheckNext:
.2d6d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2d6f	c8		iny				iny
.2d70	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2d72	f0 06		beq $2d7a			beq 	_CLAssignment
.2d74	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2d76	f0 f0		beq $2d68			beq 	CommandLocal
.2d78	88		dey				dey
.2d79	60		rts				rts
.2d7a					_CLAssignment:
.2d7a	a2 01		ldx #$01			ldx 	#1
.2d7c	20 91 37	jsr $3791			jsr 	Evaluate 					; evaluate RHS
.2d7f	ca		dex				dex
.2d80	20 54 2b	jsr $2b54			jsr 	WriteValue
.2d83	4c 6d 2d	jmp $2d6d			jmp 	_CLCheckNext
.2d86					LocaliseVariable:
.2d86	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2d88	c9 40		cmp #$40			cmp 	#$40
.2d8a	b0 63		bcs $2def			bcs 	_LVSyntax
.2d8c	8a		txa				txa 								; get the address of that variable.
.2d8d	a2 02		ldx #$02		ldx	#2
.2d8f	20 0d 4e	jsr $4e0d		jsr	variableHandler
.2d92	aa		tax				tax
.2d93	da		phx				phx
.2d94	5a		phy				phy
.2d95	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2d98	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2d9a	0a		asl a				asl 	a
.2d9b	10 16		bpl $2db3			bpl 	_LVPushNumber
.2d9d	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2d9f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2da1	c8		iny				iny
.2da2	85 2c		sta $2c				sta 	temp1
.2da4	b1 2a		lda ($2a),y			lda 	(temp0),y
.2da6	85 2d		sta $2d				sta 	temp1+1
.2da8	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2daa	b1 2c		lda ($2c),y			lda 	(temp1),y
.2dac	aa		tax				tax 								; into X
.2dad	e8		inx				inx 								; +1 for length.
.2dae	a9 24		lda #$24			lda 	#markerString
.2db0	4c c8 2d	jmp $2dc8			jmp 	_LVWriteFrame
.2db3					_LVPushNumber:
.2db3	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2db5	85 2c		sta $2c				sta 	temp1
.2db7	a5 2b		lda $2b				lda 	temp0+1
.2db9	85 2d		sta $2d				sta 	temp1+1
.2dbb	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2dbd	4a		lsr a				lsr 	a
.2dbe	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2dc0	a2 04		ldx #$04			ldx 	#VarISize
.2dc2	90 04		bcc $2dc8			bcc 	_LVIsInteger
.2dc4	a9 23		lda #$23			lda 	#markerFloat
.2dc6	a2 06		ldx #$06			ldx 	#VarFSize
.2dc8					_LVIsInteger:
.2dc8					_LVWriteFrame:
.2dc8	8e 5f 0d	stx $0d5f			stx 	storeSize 					; number of bytes to copy from (temp0)
.2dcb	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2dcc	e8		inx				inx
.2dcd	e8		inx				inx
.2dce	20 c8 3e	jsr $3ec8			jsr 	RSClaim 					; create the stack frame.
.2dd1	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2dd3	a0 01		ldy #$01			ldy 	#1
.2dd5	91 37		sta ($37),y			sta 	(rsPointer),y
.2dd7	c8		iny				iny
.2dd8	a5 2b		lda $2b				lda 	temp0+1
.2dda	91 37		sta ($37),y			sta 	(rsPointer),y
.2ddc	a0 00		ldy #$00			ldy 	#0
.2dde					_LVCopyData:
.2dde	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2de0	c8		iny				iny 								; write allowing for the header bit.
.2de1	c8		iny				iny
.2de2	c8		iny				iny
.2de3	91 37		sta ($37),y			sta 	(rsPointer),y
.2de5	88		dey				dey
.2de6	88		dey				dey
.2de7	ce 5f 0d	dec $0d5f			dec 	storeSize 					; do it storesize times
.2dea	d0 f2		bne $2dde			bne 	_LVCopyData
.2dec	7a		ply				ply
.2ded	fa		plx				plx
.2dee	60		rts				rts
.2def					_LVSyntax:
.2def	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2df1	20 09 15	jsr $1509		jsr	errorHandler
.2df4					RestoreLocals:
.2df4	a2 00		ldx #$00			ldx 	#0
.2df6	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2df8	c9 40		cmp #$40			cmp	 	#64
.2dfa	90 01		bcc $2dfd			bcc 	_RLocal
.2dfc	60		rts				rts
.2dfd					_RLocal:
.2dfd	da		phx				phx
.2dfe	5a		phy				phy
.2dff	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2e01	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e03	85 2a		sta $2a				sta 	temp0
.2e05	c8		iny				iny
.2e06	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e08	85 2b		sta $2b				sta 	temp0+1
.2e0a	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2e0c	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e0e	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2e10	f0 25		beq $2e37			beq 	_RString
.2e12	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2e14	c9 25		cmp #$25			cmp 	#markerInt
.2e16	f0 02		beq $2e1a			beq 	_RIsInteger
.2e18	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2e1a					_RIsInteger:
.2e1a	da		phx				phx
.2e1b	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2e1d					_RCopyBack:
.2e1d	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e1f	88		dey				dey
.2e20	88		dey				dey
.2e21	88		dey				dey
.2e22	91 2a		sta ($2a),y			sta 	(temp0),y
.2e24	c8		iny				iny
.2e25	c8		iny				iny
.2e26	c8		iny				iny
.2e27	c8		iny				iny
.2e28	ca		dex				dex
.2e29	d0 f2		bne $2e1d			bne 	_RCopyBack
.2e2b	68		pla				pla 								; get size add 3
.2e2c	18		clc				clc
.2e2d	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2e2f					_RRestoreAAndLoop:
.2e2f	20 ea 3e	jsr $3eea			jsr 	RSFree
.2e32	7a		ply				ply
.2e33	fa		plx				plx
.2e34	4c f4 2d	jmp $2df4			jmp 	RestoreLocals 				; go see if there are any more locals.
.2e37					_RString:
.2e37	a2 00		ldx #$00			ldx 	#0
.2e39	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2e3b	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e3d	95 98		sta $98,x			sta 	esInt0,x
.2e3f	c8		iny				iny
.2e40	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e42	95 a0		sta $a0,x			sta 	esInt1,x
.2e44	18		clc				clc
.2e45	a5 37		lda $37				lda 	rsPointer
.2e47	69 03		adc #$03			adc 	#3
.2e49	95 99		sta $99,x			sta 	esInt0+1,x
.2e4b	a5 38		lda $38				lda 	rsPointer+1
.2e4d	69 00		adc #$00			adc 	#0
.2e4f	95 a1		sta $a1,x			sta 	esInt1+1,x
.2e51	8a		txa				txa
.2e52	a2 10		ldx #$10		ldx	#16
.2e54	20 c6 41	jsr $41c6		jsr	stringHandler
.2e57	a0 03		ldy #$03			ldy 	#3 							; get string length
.2e59	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e5b	18		clc				clc
.2e5c	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2e5e	4c 2f 2e	jmp $2e2f			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d60					paramCount:
>0d60							.fill 	1
.2e61					CallProc:
.2e61	20 e9 2e	jsr $2ee9			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2e64	48		pha				pha 								; save length on stack
.2e65	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2e67	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2e69	48		pha				pha
.2e6a	a5 2a		lda $2a				lda 	temp0
.2e6c	48		pha				pha
.2e6d	98		tya				tya 								; calculate Y + length
.2e6e	18		clc				clc
.2e6f	65 32		adc $32				adc 	tempShort
.2e71	a8		tay				tay
.2e72	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2e74					_CallProcEvalParams:
.2e74	e8		inx				inx
.2e75	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2e77	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2e79	f0 0b		beq $2e86			beq 	_CPDoneParams
.2e7b	20 91 37	jsr $3791			jsr 	Evaluate 					; evaluate a parameter
.2e7e	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2e80	c8		iny				iny
.2e81	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2e83	f0 ef		beq $2e74			beq 	_CallProcEvalParams
.2e85	88		dey				dey 								; undo consumption.
.2e86					_CPDoneParams:
.2e86	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen 			; check closing parenthesis.
.2e89	8e 60 0d	stx $0d60			stx 	paramCount 					; store parameter count+1
.2e8c	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2e8e	a9 50		lda #$50			lda 	#markerPROC
.2e90	20 c8 3e	jsr $3ec8			jsr 	RSClaim
.2e93	a9 01		lda #$01			lda 	#1 							; store return address.
.2e95	20 f4 3e	jsr $3ef4			jsr 	RSSavePosition
.2e98	68		pla				pla 								; get the new code Ptr
.2e99	85 28		sta $28				sta 	codePtr
.2e9b	68		pla				pla
.2e9c	85 29		sta $29				sta 	codePtr+1
.2e9e	68		pla				pla 								; length of name + 4 is the param start.
.2e9f	18		clc				clc
.2ea0	69 04		adc #$04			adc 	#4
.2ea2	a8		tay				tay
.2ea3	a2 ff		ldx #$ff			ldx 	#$FF
.2ea5					_CPLoadParameters:
.2ea5	e8		inx				inx 								; point to where the address should be loaded.
.2ea6	ec 60 0d	cpx $0d60			cpx 	paramCount 					; too many parameters in definition ?
.2ea9	f0 1e		beq $2ec9			beq 	_CPParamError
.2eab	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2ead	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2eaf	f0 0e		beq $2ebf			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2eb1	20 86 2d	jsr $2d86			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2eb4	20 54 2b	jsr $2b54			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2eb7	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2eb9	c8		iny				iny
.2eba	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2ebc	f0 e7		beq $2ea5			beq 	_CPLoadParameters
.2ebe	88		dey				dey 								; no, unconsume and check for )
.2ebf					_CPParamComplete:
.2ebf	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen 			; check )
.2ec2	e8		inx				inx 								; check right number of parameters have been consumed
.2ec3	ec 60 0d	cpx $0d60			cpx 	paramCount
.2ec6	d0 01		bne $2ec9			bne 	_CPParamError
.2ec8	60		rts				rts
.2ec9					_CPParamError:
.2ec9	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2ecb	20 09 15	jsr $1509		jsr	errorHandler
.2ece					ReturnProc:
.2ece	20 f4 2d	jsr $2df4			jsr 	RestoreLocals 				; get the locals back.
.2ed1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2ed3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ed5	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2ed7	f0 05		beq $2ede			beq 	_isok
.2ed9	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2edb	20 09 15	jsr $1509		jsr	errorHandler
.2ede					_isok:
.2ede	a9 01		lda #$01			lda 	#1
.2ee0	20 07 3f	jsr $3f07			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2ee3	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2ee5	20 ea 3e	jsr $3eea			jsr 	RSFree
.2ee8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d61					procList:
>0d61							.fill 	2		 					; terminated by name high being zero.
.0d63					yInLine:
>0d63							.fill 	1
.2ee9					FindProcedure:
.2ee9	8c 63 0d	sty $0d63			sty 	yInLine 					; save current position.
.2eec	20 a3 2f	jsr $2fa3			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2eef	85 2c		sta $2c				sta 	temp1
.2ef1	ad 61 0d	lda $0d61			lda		procList 					; put procList address in temp2
.2ef4	85 2e		sta $2e				sta 	temp2
.2ef6	ad 62 0d	lda $0d62			lda 	procList+1
.2ef9	85 2f		sta $2f				sta 	temp2+1
.2efb	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2efd					_FPLoop:
.2efd	b1 2e		lda ($2e),y			lda 	(temp2),y
.2eff	f0 4d		beq $2f4e			beq 	_FPError 					; if so, we don't know this procedure.
.2f01	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2f03	c8		iny				iny
.2f04	b1 2e		lda ($2e),y			lda 	(temp2),y
.2f06	85 2a		sta $2a				sta 	temp0
.2f08	c8		iny				iny
.2f09	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2f0b	c5 2c		cmp $2c				cmp 	temp1
.2f0d	d0 29		bne $2f38			bne 	_FPNext 					; hash is different, go to next.
.2f0f	38		sec				sec
.2f10	ad 63 0d	lda $0d63			lda 	yInLine 					; position in line must be at least 4
.2f13	e9 04		sbc #$04			sbc 	#4
.2f15	18		clc				clc
.2f16	65 28		adc $28				adc 	codePtr
.2f18	85 30		sta $30				sta 	temp3
.2f1a	a5 29		lda $29				lda 	codePtr+1
.2f1c	69 00		adc #$00			adc 	#0
.2f1e	85 31		sta $31				sta 	temp3+1
.2f20	5a		phy				phy
.2f21	a0 04		ldy #$04			ldy 	#4
.2f23					_FPCName:
.2f23	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2f25	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2f27	d0 0e		bne $2f37			bne 	_FPpulYNext 				; if different go to next one.
.2f29	c8		iny				iny
.2f2a	c9 3a		cmp #$3a			cmp 	#$3A
.2f2c	90 f5		bcc $2f23			bcc 	_FPCName 					; compare the whole lot....
.2f2e	68		pla				pla 								; throw away the saved Y
.2f2f	98		tya				tya 								; length of name is Y-4
.2f30	38		sec				sec
.2f31	e9 04		sbc #$04			sbc 	#4
.2f33	ac 63 0d	ldy $0d63			ldy 	yInLine  					; get the original Y back
.2f36	60		rts				rts
.2f37					_FPpulYNext:
.2f37	7a		ply				ply
.2f38					_FPNext:
.2f38	c8		iny				iny 								; next procedure record.
.2f39	10 c2		bpl $2efd			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2f3b	98		tya				tya 								; subtract 128 from Y
.2f3c	38		sec				sec
.2f3d	e9 80		sbc #$80			sbc 	#128
.2f3f	a8		tay				tay
.2f40	18		clc				clc 								; add 128 to temp2, so we can have more than
.2f41	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2f43	69 80		adc #$80			adc 	#128
.2f45	85 2e		sta $2e				sta 	temp2
.2f47	90 b4		bcc $2efd			bcc 	_FPLoop
.2f49	e6 2f		inc $2f				inc 	temp2+1
.2f4b	4c fd 2e	jmp $2efd			jmp 	_FPLoop
.2f4e					_FPError:
.2f4e	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2f50	20 09 15	jsr $1509		jsr	errorHandler
.2f53					ScanProc:
.2f53	5a		phy				phy
.2f54	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2f56	8d 61 0d	sta $0d61			sta 	procList
.2f59	a5 36		lda $36				lda 	lowMemory+1
.2f5b	8d 62 0d	sta $0d62			sta 	procList+1
.2f5e	20 d2 32	jsr $32d2			jsr 	ResetCodeAddress 			; back to the start.
.2f61					_ScanLoop:
.2f61	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2f63	b1 28		lda ($28),y			lda 	(codePtr),y
.2f65	f0 2a		beq $2f91			beq 	_ScanExit
.2f67	a0 03		ldy #$03			ldy 	#3							; get first token
.2f69	b1 28		lda ($28),y			lda 	(codePtr),y
.2f6b	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2f6d	d0 12		bne $2f81			bne 	_ScanNext
.2f6f	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2f71	20 98 2f	jsr $2f98			jsr 	_ScanWrite
.2f74	a5 28		lda $28				lda 	codePtr
.2f76	20 98 2f	jsr $2f98			jsr 	_ScanWrite
.2f79	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2f7b	20 a3 2f	jsr $2fa3			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2f7e	20 98 2f	jsr $2f98			jsr 	_ScanWrite					; and write that
.2f81					_ScanNext:
.2f81	18		clc				clc
.2f82	a0 00		ldy #$00			ldy 	#0
.2f84	b1 28		lda ($28),y			lda 	(codePtr),y
.2f86	65 28		adc $28				adc 	codePtr
.2f88	85 28		sta $28				sta 	codePtr
.2f8a	90 d5		bcc $2f61			bcc 	_ScanLoop
.2f8c	e6 29		inc $29				inc 	codePtr+1
.2f8e	4c 61 2f	jmp $2f61			jmp 	_ScanLoop
.2f91					_ScanExit:
.2f91	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2f93	20 98 2f	jsr $2f98			jsr 	_ScanWrite
.2f96	7a		ply				ply
.2f97	60		rts				rts
.2f98					_ScanWrite:
.2f98	a0 00		ldy #$00			ldy 	#0
.2f9a	91 35		sta ($35),y			sta 	(lowMemory),y
.2f9c	e6 35		inc $35				inc 	lowMemory
.2f9e	d0 02		bne $2fa2			bne 	_SWNoCarry
.2fa0	e6 36		inc $36				inc 	lowMemory+1
.2fa2					_SWNoCarry:
.2fa2	60		rts				rts
.2fa3					CalculateProcedureHash:
.2fa3	a9 00		lda #$00			lda 	#0 							; clear hash.
.2fa5	85 2a		sta $2a				sta 	temp0
.2fa7					_CPHLoop:
.2fa7	18		clc				clc 								; add character and rotate and add carry back in
.2fa8	b1 28		lda ($28),y			lda 	(codePtr),y
.2faa	65 2a		adc $2a				adc 	temp0
.2fac	6a		ror a				ror 	a
.2fad	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2faf	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2fb1	b1 28		lda ($28),y			lda 	(codePtr),y
.2fb3	c8		iny				iny 								; advance incase we go round again.
.2fb4	c9 3a		cmp #$3a			cmp 	#$3A
.2fb6	90 ef		bcc $2fa7			bcc 	_CPHLoop
.2fb8	a5 2a		lda $2a				lda 	temp0
.2fba	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2fbb					Command_Repeat:
.2fbb	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2fbd	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2fbf	20 c8 3e	jsr $3ec8			jsr 	RSClaim
.2fc2	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2fc4	20 f4 3e	jsr $3ef4			jsr 	RSSavePosition
.2fc7	60		rts				rts
.2fc8					Command_Until:
.2fc8	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2fca	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2fcc	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2fce	f0 05		beq $2fd5			beq 	_isok
.2fd0	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2fd2	20 09 15	jsr $1509		jsr	errorHandler
.2fd5					_isok:
.2fd5	20 ae 37	jsr $37ae			jsr 	EvaluateRootInteger 		; at the bottom.
.2fd8	20 56 3e	jsr $3e56			jsr 	MInt32Zero					; check if TOS zero
.2fdb	d0 06		bne $2fe3			bne 	_CUExit
.2fdd	a9 01		lda #$01			lda 	#1
.2fdf	20 07 3f	jsr $3f07			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2fe2	60		rts				rts
.2fe3					_CUExit:
.2fe3	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2fe5	20 ea 3e	jsr $3eea			jsr 	RSFree
.2fe8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2fe9					ScanForward:
.2fe9	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2feb	86 2d		stx $2d				stx 	temp1+1
.2fed	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2fef	85 2e		sta $2e				sta 	temp2
.2ff1	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2ff3	c8		iny				iny
.2ff4	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2ff6	d0 08		bne $3000			bne 	_SFNoCheck 					; if so, check token against entered values.
.2ff8	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2ffa	f0 24		beq $3020			beq 	_SFExit 					; at the same strcture depth.
.2ffc	c5 2d		cmp $2d				cmp 	temp1+1
.2ffe	f0 20		beq $3020			beq 	_SFExit
.3000					_SFNoCheck:
.3000	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.3002	90 ed		bcc $2ff1			bcc 	_SFLoop
.3004	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.3006	90 19		bcc $3021			bcc 	_SFSpecials
.3008	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.300a	90 e5		bcc $2ff1			bcc 	_SFLoop
.300c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.300e	b0 e1		bcs $2ff1			bcs 	_SFLoop
.3010	aa		tax				tax  								; token in X, and look up the adjuster.
.3011	bd cc 36	lda $36cc,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.3014	38		sec				sec 								; convert to an offset ($FF,$01)
.3015	e9 81		sbc #$81			sbc 	#$81
.3017	18		clc				clc 								; add to depth
.3018	65 2e		adc $2e				adc 	temp2
.301a	85 2e		sta $2e				sta 	temp2
.301c	10 d3		bpl $2ff1			bpl 	_SFLoop 					; +ve okay to continue
.301e	30 07		bmi $3027			bmi 	SFError 					; if gone -ve then we have a nesting error
.3020	60		rts		_SFExit:rts
.3021					_SFSpecials:
.3021	20 2c 30	jsr $302c			jsr 	ScannerSkipSpecial
.3024	4c f1 2f	jmp $2ff1			jmp 	_SFLoop
.3027					SFError:
.3027	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.3029	20 09 15	jsr $1509		jsr	errorHandler
.302c					ScannerSkipSpecial:
.302c	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.302e	f0 10		beq $3040			beq 	_SFNextLine
.3030	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.3032	f0 2b		beq $305f			beq 	_SFFloatSkip
.3034	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.3036	f0 02		beq $303a			beq 	_SFSkipString
.3038	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.3039	60		rts				rts 								; token.
.303a					_SFSkipString:
.303a	98		tya				tya
.303b	38		sec				sec
.303c	71 28		adc ($28),y			adc 	(codePtr),y
.303e	a8		tay				tay
.303f	60		rts				rts
.3040					_SFNextLine:
.3040	a0 00		ldy #$00			ldy 	#0 							; get offset
.3042	b1 28		lda ($28),y			lda 	(codePtr),y
.3044	18		clc				clc 								; add to code pointer.
.3045	65 28		adc $28				adc 	codePtr
.3047	85 28		sta $28				sta 	codePtr
.3049	90 02		bcc $304d			bcc		_SFNLNoCarry
.304b	e6 29		inc $29				inc 	codePtr+1
.304d					_SFNLNoCarry:
.304d	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.304f	d0 0b		bne $305c			bne		_SFXNL 						; no go round again
.3051	a5 2c		lda $2c				lda 	temp1
.3053	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.3055	d0 d0		bne $3027			bne 	SFError 					; read uses this to search for data statements
.3057	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.3059	20 09 15	jsr $1509		jsr	errorHandler
.305c	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.305e	60		rts				rts
.305f					_SFFloatSkip:
.305f	98		tya				tya 								; skip over an embedded float.
.3060	18		clc				clc
.3061	69 05		adc #$05			adc 	#FloatEmbeddedSize
.3063	a8		tay				tay
.3064	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.3065					Command_While:
.3065	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.3067	a2 04		ldx #$04			ldx 	#4
.3069	20 c8 3e	jsr $3ec8			jsr 	RSClaim 					; create on stack.
.306c	88		dey				dey
.306d	a9 01		lda #$01			lda 	#1
.306f	20 f4 3e	jsr $3ef4			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.3072	c8		iny				iny
.3073	20 ae 37	jsr $37ae			jsr 	EvaluateRootInteger			; get the conditional
.3076	20 56 3e	jsr $3e56			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.3079	f0 01		beq $307c			beq 	_CWFail
.307b	60		rts				rts
.307c					_CWFail:
.307c	a9 04		lda #$04			lda 	#4
.307e	20 ea 3e	jsr $3eea			jsr 	RSFree 						; close the just opened position.
.3081	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.3083	aa		tax				tax
.3084	20 e9 2f	jsr $2fe9			jsr 	ScanForward
.3087	60		rts				rts
.3088					Command_Wend:
.3088	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.308a	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.308c	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.308e	f0 05		beq $3095			beq 	_isok
.3090	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.3092	20 09 15	jsr $1509		jsr	errorHandler
.3095					_isok:
.3095	a9 01		lda #$01			lda 	#1
.3097	20 07 3f	jsr $3f07			jsr 	RSLoadPosition				; go back until true
.309a	a9 04		lda #$04			lda 	#4
.309c	20 ea 3e	jsr $3eea			jsr 	RSFree 						; close the loop
.309f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.30a0					CommandClear:
.30a0					XCommandClear:
.30a0	5a		phy				phy
.30a1	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.30a4	85 33		sta $33				sta 	highMemory
.30a6	ad cd 0a	lda $0acd			lda 	endMemory+1
.30a9	85 34		sta $34				sta 	highMemory+1
.30ab	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.30ae	85 2a		sta $2a				sta 	temp0
.30b0	ad c9 0a	lda $0ac9			lda 	basePage+1
.30b3	85 2b		sta $2b				sta 	temp0+1
.30b5					_CCFindEnd:
.30b5	a0 00		ldy #$00			ldy 	#0
.30b7	b1 2a		lda ($2a),y			lda 	(temp0),y
.30b9	f0 0c		beq $30c7			beq 	_CCFoundEnd 				; offset zero is end.
.30bb	18		clc				clc
.30bc	65 2a		adc $2a				adc 	temp0 						; move to next line
.30be	85 2a		sta $2a				sta 	temp0
.30c0	90 f3		bcc $30b5			bcc 	_CCFindEnd
.30c2	e6 2b		inc $2b				inc 	temp0+1
.30c4	4c b5 30	jmp $30b5			jmp 	_CCFindEnd
.30c7					_CCFoundEnd:
.30c7	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.30c9	85 35		sta $35				sta 	lowMemory
.30cb	a5 2b		lda $2b				lda 	temp0+1
.30cd	85 36		sta $36				sta 	lowMemory+1
.30cf	18		clc				clc 								; put temp0+1 in endProgram
.30d0	a5 2a		lda $2a				lda 	temp0
.30d2	69 01		adc #$01			adc 	#1
.30d4	8d ca 0a	sta $0aca			sta 	endProgram
.30d7	a5 2b		lda $2b				lda 	temp0+1
.30d9	69 00		adc #$00			adc 	#0
.30db	8d cb 0a	sta $0acb			sta 	endProgram+1
.30de	18		clc				clc 								; put a bit of space in.
.30df	a5 35		lda $35				lda 	lowMemory
.30e1	69 04		adc #$04			adc 	#4
.30e3	85 35		sta $35				sta 	lowMemory
.30e5	90 02		bcc $30e9			bcc 	_CCNoCarry
.30e7	e6 36		inc $36				inc 	lowMemory+1
.30e9					_CCNoCarry:
.30e9	20 ba 3e	jsr $3eba			jsr 	RSReset 					; reset the return stack.
.30ec	a2 06		ldx #$06		ldx	#6
.30ee	20 0d 4e	jsr $4e0d		jsr	variableHandler
.30f1	20 53 2f	jsr $2f53			jsr 	ScanProc 					; scan for procedures
.30f4	20 fa 28	jsr $28fa			jsr 	CommandRestore 				; do a restore
.30f7	7a		ply				ply
.30f8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d64					structIndent:
>0d64							.fill 	1
.30f9					CommandList:
.30f9	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.30fb	8e 64 0d	stx $0d64			stx 	structIndent
.30fe	20 2f 3e	jsr $3e2f			jsr 	MInt32False
.3101	e8		inx				inx
.3102	20 2b 3e	jsr $3e2b			jsr 	MInt32True
.3105	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.3107	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.3109	f0 15		beq $3120			beq 	_CLEndLine
.310b	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.310d	30 1b		bmi $312a			bmi 	_CLDoListing 				; do the whole lot.
.310f	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.3111	20 b0 37	jsr $37b0			jsr 	EvaluateInteger
.3114	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.3116	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3118	f0 06		beq $3120			beq 	_CLEndLine
.311a	20 6f 3d	jsr $3d6f			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.311d	4c 2a 31	jmp $312a			jmp 	_CLDoListing 				; own e.g. list 1100
.3120					_CLEndLine:
.3120	c8		iny				iny 								; skip comma
.3121	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.3123	30 05		bmi $312a			bmi 	_CLDoListing
.3125	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.3127	20 b0 37	jsr $37b0			jsr 	EvaluateInteger				; get end
.312a					_CLDoListing:
.312a	20 d2 32	jsr $32d2			jsr 	ResetCodeAddress 			; back to the start.
.312d					_CLCheckLoop:
.312d	a2 02		ldx #$02		ldx	#2
.312f	20 e7 14	jsr $14e7		jsr	deviceHandler
.3132	a0 00		ldy #$00			ldy 	#0							; check end.
.3134	b1 28		lda ($28),y			lda 	(codePtr),y
.3136	f0 41		beq $3179			beq 	_CLEnd
.3138	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.313a	20 7c 31	jsr $317c			jsr 	CLCompareLineTOS
.313d	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.313f	f0 28		beq $3169			beq 	_CLNext
.3141	e8		inx				inx
.3142	20 7c 31	jsr $317c			jsr 	CLCompareLineTOS 			; compare vs higher
.3145	c9 01		cmp #$01			cmp 	#1
.3147	f0 20		beq $3169			beq 	_CLNext
.3149	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.314b	20 9e 31	jsr $319e			jsr 	CLStructureCheck
.314e	ad 64 0d	lda $0d64			lda 	structIndent 				; indent level.
.3151	10 02		bpl $3155			bpl 	_CLPositive
.3153	a9 00		lda #$00			lda 	#0
.3155					_CLPositive:
.3155	a2 04		ldx #$04		ldx	#4
.3157	20 4e 4a	jsr $4a4e		jsr	tokeniserHandler
.315a	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.315c	20 9e 31	jsr $319e			jsr 	CLStructureCheck
.315f	ad 64 0d	lda $0d64			lda 	structIndent
.3162	10 05		bpl $3169			bpl 	_CLNext
.3164	a9 00		lda #$00			lda 	#0
.3166	8d 64 0d	sta $0d64			sta 	structIndent
.3169					_CLNext:
.3169	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.316b	b1 28		lda ($28),y			lda 	(codePtr),y
.316d	18		clc				clc
.316e	65 28		adc $28				adc 	codePtr
.3170	85 28		sta $28				sta 	codePtr
.3172	90 b9		bcc $312d			bcc 	_CLCheckLoop
.3174	e6 29		inc $29				inc 	codePtr+1
.3176	4c 2d 31	jmp $312d			jmp 	_CLCheckLoop
.3179					_CLEnd:
.3179	4c 16 3f	jmp $3f16			jmp 	WarmStart 					; warm start after list.
.317c					CLCompareLineTOS:
.317c	a0 01		ldy #$01			ldy 	#1
.317e	b1 28		lda ($28),y			lda 	(codePtr),y
.3180	55 98		eor $98,x			eor 	esInt0,x
.3182	85 2a		sta $2a				sta 	temp0
.3184	c8		iny				iny
.3185	b1 28		lda ($28),y			lda 	(codePtr),y
.3187	55 a0		eor $a0,x			eor 	esInt1,x
.3189	05 2a		ora $2a				ora 	temp0
.318b	f0 10		beq $319d			beq 	_CLCLTExit
.318d	88		dey				dey
.318e	b1 28		lda ($28),y			lda 	(codePtr),y
.3190	d5 98		cmp $98,x			cmp 	esInt0,x
.3192	c8		iny				iny
.3193	b1 28		lda ($28),y			lda 	(codePtr),y
.3195	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3197	a9 ff		lda #$ff			lda 	#255
.3199	90 02		bcc $319d			bcc 	_CLCLTExit
.319b	a9 01		lda #$01			lda 	#1
.319d					_CLCLTExit:
.319d	60		rts				rts
.319e					CLStructureCheck:
.319e	85 2a		sta $2a				sta 	temp0
.31a0	a0 03		ldy #$03			ldy 	#3
.31a2					_CLSCLoop:
.31a2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.31a4	c8		iny				iny
.31a5	c9 80		cmp #$80			cmp 	#$80
.31a7	90 f9		bcc $31a2			bcc 	_CLSCLoop 					; $00-$7F just step over.
.31a9	f0 28		beq $31d3			beq		_CLSCExit					; EOL return
.31ab	c9 86		cmp #$86			cmp 	#$86 						; special handler
.31ad	90 1e		bcc $31cd			bcc 	_CLSCSpecial
.31af	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.31b1	90 ef		bcc $31a2			bcc 	_CLSCLoop
.31b3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.31b5	b0 eb		bcs $31a2			bcs 	_CLSCLoop
.31b7	aa		tax				tax 								; get adjustment
.31b8	bd cc 36	lda $36cc,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.31bb	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.31bd	d0 e3		bne $31a2			bne 	_CLSCLoop
.31bf	38		sec				sec
.31c0	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.31c2	0a		asl a				asl 	a 							; double indent step
.31c3	18		clc				clc
.31c4	6d 64 0d	adc $0d64			adc 	structIndent 				; add to structure indent
.31c7	8d 64 0d	sta $0d64			sta 	structIndent
.31ca	4c a2 31	jmp $31a2			jmp 	_CLSCLoop
.31cd					_CLSCSpecial:
.31cd	20 2c 30	jsr $302c			jsr 	ScannerSkipSpecial
.31d0	4c a2 31	jmp $31a2			jmp 	_CLSCLoop
.31d3					_CLSCExit:
.31d3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.31d4					CommandLoad:
.31d4	20 fc 31	jsr $31fc			jsr 	CLSParameters 					; get parameters for load.
.31d7	08		php				php
.31d8	a2 0e		ldx #$0e		ldx	#14
.31da	20 e7 14	jsr $14e7		jsr	deviceHandler
.31dd	28		plp				plp
.31de	b0 08		bcs $31e8			bcs 	_CLExit 						; if CC then load a program, so warm start.
.31e0	20 a0 30	jsr $30a0			jsr 	CommandClear
.31e3	a2 04		ldx #$04		ldx	#4
.31e5	20 bc 28	jsr $28bc		jsr	interactionHandler
.31e8					_CLExit
.31e8	60		rts				rts
.31e9					CommandSave:
.31e9	20 fc 31	jsr $31fc			jsr 	CLSParameters					; get parameters for save
.31ec	90 08		bcc $31f6			bcc 	_CSNoOverrideAddress
.31ee	20 ad 3e	jsr $3ead			jsr 	CheckComma 						; should be a comma.
.31f1	a2 02		ldx #$02			ldx 	#2
.31f3	20 b0 37	jsr $37b0			jsr 	EvaluateInteger 				; get save end address.
.31f6					_CSNoOverrideAddress:
.31f6	a2 18		ldx #$18		ldx	#24
.31f8	20 e7 14	jsr $14e7		jsr	deviceHandler
.31fb	60		rts				rts
.31fc					CLSParameters:
.31fc	a2 00		ldx #$00			ldx 	#0 								; string at +0
.31fe	20 a5 37	jsr $37a5			jsr 	EvaluateString
.3201	e8		inx				inx 									; erase out +1 (start) +2 (end, for save)
.3202	20 2f 3e	jsr $3e2f			jsr 	MInt32False
.3205	e8		inx				inx
.3206	20 2f 3e	jsr $3e2f			jsr 	MInt32False
.3209	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.320c	85 99		sta $99				sta 	esInt0+1
.320e	ad c9 0a	lda $0ac9			lda 	basePage+1
.3211	85 a1		sta $a1				sta 	esInt1+1
.3213	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.3216	85 9a		sta $9a				sta 	esInt0+2
.3218	ad cb 0a	lda $0acb			lda 	endProgram+1
.321b	85 a2		sta $a2				sta 	esInt1+2
.321d	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.321f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3221	d0 08		bne $322b			bne 	_CLSDefault
.3223	c8		iny				iny 									; skip comma
.3224	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.3226	20 b0 37	jsr $37b0			jsr 	EvaluateInteger 				; the load or start save address
.3229	38		sec				sec 									; return CS indicating override
.322a	60		rts				rts
.322b					_CLSDefault:
.322b	18		clc				clc
.322c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.322d					Command_New:
.322d					Command_XNew:
.322d	20 d2 32	jsr $32d2			jsr 	ResetCodeAddress 			; point to first line
.3230	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.3232	98		tya				tya
.3233	91 28		sta ($28),y			sta 	(codePtr),y
.3235	20 a0 30	jsr $30a0			jsr 	CommandClear 				; clear everything down.
.3238	4c 0c 2c	jmp $2c0c			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d65					breakCounter:
>0d65								.fill 	1
.0d66					breakIncrement:
>0d66								.fill 	1
.323b					Command_Run:
.323b					XCommand_Run:
.323b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.323d	9a		txs				txs
.323e	20 cc 32	jsr $32cc			jsr 	BreakOn 					; turn break on
.3241	20 a0 30	jsr $30a0			jsr 	CommandClear 				; clear everything.
.3244	20 d2 32	jsr $32d2			jsr 	ResetCodeAddress 			; back to the start.
.3247					Command_RunFrom:
.3247	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.3249					CRNextInstruction:
.3249	a9 00		lda #$00			lda 	#0
.324b	85 3a		sta $3a				sta 	softMemAlloc+1
.324d	ad 65 0d	lda $0d65			lda 	breakCounter 				; check for break.
.3250	6d 66 0d	adc $0d66			adc 	breakIncrement
.3253	8d 65 0d	sta $0d65			sta 	breakCounter
.3256	90 05		bcc $325d			bcc 	_CRNoChecks
.3258	a2 02		ldx #$02		ldx	#2
.325a	20 e7 14	jsr $14e7		jsr	deviceHandler
.325d					_CRNoChecks
.325d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.325f	10 1c		bpl $327d			bpl 	_CRNotToken
.3261	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.3263	b0 0c		bcs $3271			bcs 	_CRExecute
.3265	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.3267	b0 55		bcs $32be			bcs 	Unimplemented
.3269	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.326b	b0 04		bcs $3271			bcs 	_CRExecute
.326d	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.326f	b0 16		bcs $3287			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.3271					_CRExecute:
.3271	c8		iny				iny 								; consume it.
.3272	0a		asl a				asl 	a 							; double it, losing most significant bit.
.3273	aa		tax				tax
.3274	20 7a 32	jsr $327a			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.3277	4c 49 32	jmp $3249			jmp 	CRNextInstruction
.327a					_CRRunRoutine:
.327a	7c e4 32	jmp ($32e4,x)			jmp 	(Group0Vectors,x)
.327d					_CRNotToken:
.327d	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.327f	b0 3d		bcs $32be			bcs 	Unimplemented
.3281					_CRDefaultLet:
.3281	20 41 2b	jsr $2b41			jsr 	CommandLet 					; do the default, LET
.3284	4c 49 32	jmp $3249			jmp 	CRNextInstruction
.3287					_CRCheckIndirect:
.3287	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.3289	f0 0a		beq $3295			beq 	_CRAndCommand
.328b	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.328d	f0 f2		beq $3281			beq 	_CRDefaultLet
.328f	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.3291	f0 ee		beq $3281			beq 	_CRDefaultLet
.3293	d0 29		bne $32be			bne 	Unimplemented
.3295					_CRAndCommand:
.3295	c8		iny				iny 								; skip over the AND token
.3296	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.3298	20 b2 32	jsr $32b2			jsr 	CommandAssembler 			; do the assembler command
.329b	4c 49 32	jmp $3249			jmp 	CRNextInstruction 			; and loop round.
.329e					CommandShift1:
.329e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.32a0	10 1c		bpl $32be			bpl 	Unimplemented 				; we have an error as this should not happen.
.32a2	c8		iny				iny 								; advance over it.
.32a3	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.32a5	b0 0b		bcs $32b2			bcs 	CommandAssembler
.32a7	0a		asl a				asl 	a 							; double into X
.32a8	aa		tax				tax
.32a9	7c ae 33	jmp ($33ae,x)			jmp 	(Group1Vectors-12,x)
.32ac					CommandShift2:
.32ac	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.32ae	20 56 18	jsr $1856		jsr	extensionHandler
.32b1	60		rts				rts
.32b2					CommandAssembler:
.32b2	a2 02		ldx #$02		ldx	#2
.32b4	20 ac 13	jsr $13ac		jsr	assemblerHandler
.32b7	60		rts				rts
.32b8					CommandAssemblerLabel:
.32b8	a2 04		ldx #$04		ldx	#4
.32ba	20 ac 13	jsr $13ac		jsr	assemblerHandler
.32bd	60		rts				rts
.32be					Unimplemented:
.32be	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.32c0	20 09 15	jsr $1509		jsr	errorHandler
.32c3					CommandColon:
.32c3	60		rts				rts
.32c4					CommandBreak:
.32c4	20 ae 37	jsr $37ae			jsr 	EvaluateRootInteger
.32c7	20 56 3e	jsr $3e56			jsr 	MInt32Zero
.32ca	f0 02		beq $32ce			beq 	BreakOff
.32cc					BreakOn:
.32cc	a2 04		ldx #$04			ldx 	#4 							; checks 1 in 256/X instructions.
.32ce					BreakOff:
.32ce	8e 66 0d	stx $0d66			stx 	breakIncrement
.32d1	60		rts				rts
.32d2					ResetCodeAddress:
.32d2	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.32d5	85 28		sta $28				sta 	codePtr
.32d7	ad c9 0a	lda $0ac9			lda 	basePage+1
.32da	85 29		sta $29				sta 	codePtr+1
.32dc	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.32de	60		rts				rts
.32df					TKErr01:
.32df					TKErr02:
.32df					TKErr03:
.32df					TKErr04:
.32df					TKErr05:
.32df					TKErr06:
.32df					TKErr07:
.32df					TKErr08:
.32df					TKErr09:
.32df					TKErr10:
.32df					TKErr11:
.32df					TKErr12:
.32df					TKErr13:
.32df					TKErr14:
.32df					TKErr15:
.32df					TKErr16:
.32df	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.32e1	20 09 15	jsr $1509		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.32e4					Group0Vectors:
>32e4	12 2c					.word	AdvanceNextLine          ; $80 [[eol]]
>32e6	9e 32					.word	CommandShift1            ; $81 [[sh1]]
>32e8	ac 32					.word	CommandShift2            ; $82 [[sh2]]
>32ea	df 32					.word	TKErr09                  ; $83 [[sh3]]
>32ec	df 32					.word	TKErr10                  ; $84 [[fpc]]
>32ee	df 32					.word	TKErr08                  ; $85 [[str]]
>32f0	97 34					.word	AndHandler               ; $86 and
>32f2	84 34					.word	OrHandler                ; $87 or
>32f4	71 34					.word	XorHandler               ; $88 xor
>32f6	b9 35					.word	CompareGreaterEq         ; $89 >=
>32f8	c3 35					.word	CompareLessEq            ; $8a <=
>32fa	a5 35					.word	CompareGreater           ; $8b >
>32fc	9b 35					.word	CompareLess              ; $8c <
>32fe	91 35					.word	CompareEquals            ; $8d =
>3300	af 35					.word	CompareNotEquals         ; $8e <>
>3302	02 34					.word	AddHandler               ; $8f +
>3304	25 34					.word	SubHandler               ; $90 -
>3306	bd 34					.word	ShrHandler               ; $91 >>
>3308	aa 34					.word	ShlHandler               ; $92 <<
>330a	38 34					.word	MulHandler               ; $93 *
>330c	4b 34					.word	DivHandler               ; $94 /
>330e	5e 34					.word	ModHandler               ; $95 mod
>3310	f6 34					.word	PowerHandler             ; $96 ^
>3312	d0 34					.word	WordRefHandler           ; $97 !
>3314	e3 34					.word	ByteRefHandler           ; $98 ?
>3316	bb 2f					.word	Command_Repeat           ; $99 repeat
>3318	65 30					.word	Command_While            ; $9a while
>331a	26 2c					.word	Command_FOR              ; $9b for
>331c	2c 2d					.word	CommandIf                ; $9c if
>331e	df 32					.word	TKErr04                  ; $9d defproc
>3320	c8 2f					.word	Command_Until            ; $9e until
>3322	88 30					.word	Command_Wend             ; $9f wend
>3324	83 2c					.word	Command_NEXT             ; $a0 next
>3326	df 32					.word	TKErr06                  ; $a1 then
>3328	67 2d					.word	Command_ENDIF            ; $a2 endif
>332a	ce 2e					.word	ReturnProc               ; $a3 endproc
>332c	1b 37					.word	UnaryParenthesis         ; $a4 (
>332e	f5 38					.word	UnaryLen                 ; $a5 len(
>3330	39 39					.word	UnarySgn                 ; $a6 sgn(
>3332	22 39					.word	UnaryAbs                 ; $a7 abs(
>3334	92 39					.word	Unary_Random             ; $a8 random(
>3336	dc 39					.word	Unary_Page               ; $a9 page
>3338	2b 3e					.word	MInt32True               ; $aa true
>333a	2f 3e					.word	MInt32False              ; $ab false
>333c	a7 39					.word	Unary_Min                ; $ac min(
>333e	ab 39					.word	Unary_Max                ; $ad max(
>3340	b2 3a					.word	UnarySys                 ; $ae sys(
>3342	5d 3a					.word	UnaryTimer               ; $af timer(
>3344	77 38					.word	EventFunction            ; $b0 event(
>3346	84 3a					.word	UnaryGet                 ; $b1 get(
>3348	74 3a					.word	UnaryInkey               ; $b2 inkey(
>334a	2d 3a					.word	UnaryAlloc               ; $b3 alloc(
>334c	e7 3a					.word	ExecChr                  ; $b4 chr$(
>334e	13 3b					.word	ExecLeft                 ; $b5 left$(
>3350	30 3b					.word	ExecMid                  ; $b6 mid$(
>3352	58 3b					.word	ExecRight                ; $b7 right$(
>3354	fc 37					.word	Event_Str                ; $b8 str$(
>3356	2b 38					.word	UnaryVal                 ; $b9 val(
>3358	50 39					.word	UnaryPeek                ; $ba peek(
>335a	56 39					.word	UnaryDeek                ; $bb deek(
>335c	5c 39					.word	UnaryLeek                ; $bc leek(
>335e	13 39					.word	UnaryAsc                 ; $bd asc(
>3360	07 3a					.word	UnaryIntToFloat          ; $be int(
>3362	1a 3a					.word	UnaryFloatToInt          ; $bf float(
>3364	2e 38					.word	UnaryIsVal               ; $c0 isval(
>3366	fc 3a					.word	ExecUpper                ; $c1 upper$(
>3368	f9 3a					.word	ExecLower                ; $c2 lower$(
>336a	ea 39					.word	UnaryReference           ; $c3 @
>336c	00 3a					.word	UnaryComplement          ; $c4 ~
>336e	fd 39					.word	UnaryHexMarker           ; $c5 &
>3370	9d 3a					.word	UnaryGetString           ; $c6 get$(
>3372	a3 3a					.word	UnaryInkeyString         ; $c7 inkey$(
>3374	d6 3a					.word	UnaryMem                 ; $c8 mem
>3376	df 32					.word	TKErr01                  ; $c9 )
>3378	c3 32					.word	CommandColon             ; $ca :
>337a	df 32					.word	TKErr02                  ; $cb ,
>337c	df 32					.word	TKErr03                  ; $cc ;
>337e	fa 2b					.word	Command_Rem2             ; $cd '
>3380	df 32					.word	TKErr07                  ; $ce to
>3382	df 32					.word	TKErr05                  ; $cf step
>3384	61 2e					.word	CallProc                 ; $d0 proc
>3386	68 2d					.word	CommandLocal             ; $d1 local
>3388	33 2b					.word	Command_Dim              ; $d2 dim
>338a	fa 2b					.word	Command_Rem              ; $d3 rem
>338c	41 2b					.word	CommandLet               ; $d4 let
>338e	87 29					.word	Command_Input            ; $d5 input
>3390	61 2d					.word	Command_ELSE             ; $d6 else
>3392	04 2b					.word	Command_VDU              ; $d7 vdu
>3394	3b 2a					.word	Command_Print            ; $d8 print
>3396	f1 28					.word	CommandData              ; $d9 data
>3398	df 32					.word	TKErr13                  ; $da image
>339a	df 32					.word	TKErr12                  ; $db at
>339c	df 32					.word	TKErr14                  ; $dc flip
>339e	25 2b					.word	Command_Assert           ; $dd assert
>33a0	bd 2b					.word	Command_Poke             ; $de poke
>33a2	c1 2b					.word	Command_Doke             ; $df doke
>33a4	c5 2b					.word	Command_Loke             ; $e0 loke
>33a6	d6 2a					.word	Command_Ink              ; $e1 ink
>33a8	e1 2a					.word	Command_Paper            ; $e2 paper
>33aa	d0 2a					.word	Command_CLS              ; $e3 cls
>33ac	ec 2a					.word	Command_Locate           ; $e4 locate
>33ae	b8 32					.word	CommandAssemblerLabel    ; $e5 .
>33b0	df 32					.word	TKErr15                  ; $e6 from
>33b2	df 32					.word	TKErr11                  ; $e7 #
>33b4	a0 30					.word	CommandClear             ; $e8 clear
>33b6	df 32					.word	TKErr16                  ; $e9 text
>33b8	be 32					.word	Unimplemented            ; $ea type

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.33ba					Group1Vectors:
>33ba	d4 31					.word	CommandLoad              ; $86 load
>33bc	e9 31					.word	CommandSave              ; $87 save
>33be	f9 30					.word	CommandList              ; $88 list
>33c0	2d 32					.word	Command_New              ; $89 new
>33c2	c4 32					.word	CommandBreak             ; $8a break
>33c4	3b 32					.word	Command_Run              ; $8b run
>33c6	c6 28					.word	CommandRead              ; $8c read
>33c8	fa 28					.word	CommandRestore           ; $8d restore
>33ca	0c 2c					.word	CommandEnd               ; $8e end
>33cc	07 2c					.word	CommandStop              ; $8f stop
>33ce	0f 2c					.word	CommandXemu              ; $90 xemu
>33d0	55 29					.word	CommandGOTO              ; $91 goto
>33d2	2a 29					.word	CommandGOSUB             ; $92 gosub
>33d4	3d 29					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.33d6					BinaryProcess:
.33d6	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.33d8	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.33da	0a		asl a				asl 	a
.33db	30 0e		bmi $33eb			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.33dd	18		clc				clc 								; return CC for integer
.33de	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.33e0	f0 08		beq $33ea			beq 	_BPExit 					; if both integer then return with CC.
.33e2	20 f0 33	jsr $33f0			jsr 	BPMakeBothFloat 			; make both float
.33e5	a9 01		lda #$01			lda 	#$01 						; set result type to float
.33e7	95 90		sta $90,x			sta 	esType,x
.33e9	38		sec				sec 								; and return with carry set.
.33ea					_BPExit:
.33ea	60		rts				rts
.33eb					_BPStringType:
.33eb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.33ed	20 09 15	jsr $1509		jsr	errorHandler
.33f0					BPMakeBothFloat:
.33f0	e8		inx				inx
.33f1	20 f5 33	jsr $33f5			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.33f4	ca		dex				dex
.33f5					BPMakeFloat:
.33f5	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.33f7	4a		lsr a				lsr 	a
.33f8	b0 07		bcs $3401			bcs 	_BPIsFloat 					; already a float if set.
.33fa	8a		txa				txa
.33fb	a2 1c		ldx #$1c		ldx	#28
.33fd	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3400	aa		tax				tax
.3401					_BPIsFloat:
.3401	60		rts				rts
.3402					AddHandler:
.3402	20 d3 35	jsr $35d3			jsr 	DereferenceTwo 				; dereference top two on stack.
.3405	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.3407	35 91		and $91,x			and 	esType+1,x
.3409	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.340b	d0 10		bne $341d			bne 	_AHStringConcat				; concatenate strings.
.340d	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.3410	b0 03		bcs $3415			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3412	4c 15 3d	jmp $3d15			jmp 	MInt32Add 							; else do it as integer.
.3415					_IsFPOperation:
.3415	8a		txa				txa 								; call the relevant fp routine
.3416	a2 04		ldx #$04		ldx	#4
.3418	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.341b	aa		tax				tax
.341c	60		rts				rts
.341d					_AHStringConcat:
.341d	8a		txa				txa 								; handled by the string module.
.341e	a2 06		ldx #$06		ldx	#6
.3420	20 c6 41	jsr $41c6		jsr	stringHandler
.3423	aa		tax				tax
.3424	60		rts				rts
.3425					SubHandler:
.3425	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.3428	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.342b	b0 03		bcs $3430			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.342d	4c 2f 3d	jmp $3d2f			jmp 	MInt32Sub 							; else do it as integer.
.3430					_IsFPOperation:
.3430	8a		txa				txa 								; call the relevant fp routine
.3431	a2 12		ldx #$12		ldx	#18
.3433	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3436	aa		tax				tax
.3437	60		rts				rts
.3438					MulHandler:
.3438	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.343b	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.343e	b0 03		bcs $3443			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3440	4c 49 3d	jmp $3d49			jmp 	MInt32Multiply 							; else do it as integer.
.3443					_IsFPOperation:
.3443	8a		txa				txa 								; call the relevant fp routine
.3444	a2 0c		ldx #$0c		ldx	#12
.3446	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3449	aa		tax				tax
.344a	60		rts				rts
.344b					DivHandler:
.344b	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.344e	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.3451	b0 03		bcs $3456			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3453	4c 09 3c	jmp $3c09			jmp 	MInt32SDivide 							; else do it as integer.
.3456					_IsFPOperation:
.3456	8a		txa				txa 								; call the relevant fp routine
.3457	a2 08		ldx #$08		ldx	#8
.3459	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.345c	aa		tax				tax
.345d	60		rts				rts
.345e					ModHandler:
.345e	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.3461	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.3464	b0 03		bcs $3469			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3466	4c 87 3c	jmp $3c87			jmp 	MInt32Modulus 							; else do it as integer.
.3469					_IsFPOperation:
.3469	8a		txa				txa 								; call the relevant fp routine
.346a	a2 0a		ldx #$0a		ldx	#10
.346c	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.346f	aa		tax				tax
.3470	60		rts				rts
.3471					XorHandler:
.3471	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.3474	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.3477	b0 03		bcs $347c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3479	4c bb 3b	jmp $3bbb			jmp 	MInt32Xor 							; else do it as integer.
.347c					_IsFPOperation:
.347c	8a		txa				txa 								; call the relevant fp routine
.347d	a2 0a		ldx #$0a		ldx	#10
.347f	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3482	aa		tax				tax
.3483	60		rts				rts
.3484					OrHandler:
.3484	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.3487	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.348a	b0 03		bcs $348f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.348c	4c a2 3b	jmp $3ba2			jmp 	MInt32Or 							; else do it as integer.
.348f					_IsFPOperation:
.348f	8a		txa				txa 								; call the relevant fp routine
.3490	a2 0a		ldx #$0a		ldx	#10
.3492	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3495	aa		tax				tax
.3496	60		rts				rts
.3497					AndHandler:
.3497	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.349a	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.349d	b0 03		bcs $34a2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.349f	4c 89 3b	jmp $3b89			jmp 	MInt32And 							; else do it as integer.
.34a2					_IsFPOperation:
.34a2	8a		txa				txa 								; call the relevant fp routine
.34a3	a2 0a		ldx #$0a		ldx	#10
.34a5	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.34a8	aa		tax				tax
.34a9	60		rts				rts
.34aa					ShlHandler:
.34aa	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.34ad	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.34b0	b0 03		bcs $34b5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34b2	4c 2b 35	jmp $352b			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.34b5					_IsFPOperation:
.34b5	8a		txa				txa 								; call the relevant fp routine
.34b6	a2 0a		ldx #$0a		ldx	#10
.34b8	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.34bb	aa		tax				tax
.34bc	60		rts				rts
.34bd					ShrHandler:
.34bd	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.34c0	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.34c3	b0 03		bcs $34c8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34c5	4c 2e 35	jmp $352e			jmp 	MInt32ShiftRightX 							; else do it as integer.
.34c8					_IsFPOperation:
.34c8	8a		txa				txa 								; call the relevant fp routine
.34c9	a2 0a		ldx #$0a		ldx	#10
.34cb	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.34ce	aa		tax				tax
.34cf	60		rts				rts
.34d0					WordRefHandler:
.34d0	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.34d3	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.34d6	b0 03		bcs $34db			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34d8	4c 1d 35	jmp $351d			jmp 	MInt32WordIndirect 							; else do it as integer.
.34db					_IsFPOperation:
.34db	8a		txa				txa 								; call the relevant fp routine
.34dc	a2 0a		ldx #$0a		ldx	#10
.34de	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.34e1	aa		tax				tax
.34e2	60		rts				rts
.34e3					ByteRefHandler:
.34e3	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.34e6	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.34e9	b0 03		bcs $34ee			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34eb	4c 21 35	jmp $3521			jmp 	MInt32ByteIndirect 							; else do it as integer.
.34ee					_IsFPOperation:
.34ee	8a		txa				txa 								; call the relevant fp routine
.34ef	a2 0a		ldx #$0a		ldx	#10
.34f1	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.34f4	aa		tax				tax
.34f5	60		rts				rts
.34f6					PowerHandler:
.34f6	20 d3 35	jsr $35d3			jsr 	DereferenceTwo
.34f9	20 d6 33	jsr $33d6			jsr 	BinaryProcess 				; check to see if either is float
.34fc	b0 03		bcs $3501			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34fe	4c 09 35	jmp $3509			jmp 	PowerInteger 							; else do it as integer.
.3501					_IsFPOperation:
.3501	8a		txa				txa 								; call the relevant fp routine
.3502	a2 18		ldx #$18		ldx	#24
.3504	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3507	aa		tax				tax
.3508	60		rts				rts
.3509					PowerInteger:
.3509	20 f0 33	jsr $33f0			jsr 	BPMakeBothFloat				; make them float.
.350c	8a		txa				txa
.350d	a2 18		ldx #$18		ldx	#24
.350f	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3512	a2 14		ldx #$14		ldx	#20
.3514	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3517	aa		tax				tax
.3518	a9 00		lda #$00			lda 	#0 							; make type integer
.351a	95 90		sta $90,x			sta 	esType,x
.351c	60		rts				rts
.351d					Mint32WordIndirect:
.351d	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.351f	d0 02		bne $3523			bne 	Min32Indirect
.3521					Mint32ByteIndirect:
.3521	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.3523					Min32Indirect:
.3523	48		pha				pha 								; save the indirection
.3524	20 15 3d	jsr $3d15			jsr 	MInt32Add 					; add a!b a?b
.3527	68		pla				pla 								; and set the type to reference.
.3528	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.352a	60		rts				rts
.352b					Mint32ShiftLeftX:
.352b	18		clc				clc 								; CC shift left
.352c	90 01		bcc $352f			bcc 	Mint32Shift
.352e					Mint32ShiftRightX:
.352e	38		sec				sec 								; CS shift right
.352f					Mint32Shift:
.352f	08		php				php 								; save carry flag on stack.
.3530	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3532	15 a9		ora $a9,x			ora 	esInt2+1,x
.3534	15 b1		ora $b1,x			ora 	esInt3+1,x
.3536	d0 1e		bne $3556			bne 	_MShiftZero
.3538	b5 99		lda $99,x			lda 	esInt0+1,x
.353a	c9 20		cmp #$20			cmp 	#32
.353c	b0 18		bcs $3556			bcs 	_MShiftZero
.353e					_MShiftLoop:
.353e	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3540	f0 12		beq $3554			beq 	_MShiftExit
.3542	d6 99		dec $99,x			dec 	esInt0+1,x
.3544	28		plp				plp 								; restore and save carry
.3545	08		php				php
.3546	90 06		bcc $354e			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3548	20 4d 3e	jsr $3e4d			jsr 	Mint32ShiftRight
.354b	4c 3e 35	jmp $353e			jmp 	_MShiftLoop
.354e					_MShiftLeft:
.354e	20 44 3e	jsr $3e44			jsr 	Mint32ShiftLeft
.3551	4c 3e 35	jmp $353e			jmp 	_MShiftLoop
.3554					_MShiftExit:
.3554	28		plp				plp	 								; throw saved carry and exit
.3555	60		rts				rts
.3556					_MShiftZero:
.3556	4c 2f 3e	jmp $3e2f			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.3559					PerformComparison:
.3559	20 d3 35	jsr $35d3			jsr 	DereferenceTwo 				; make both values.
.355c	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.355e	35 91		and $91,x			and 	esType+1,x
.3560	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3561	30 1d		bmi $3580			bmi 	_PCIsString
.3563	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.3565	15 91		ora $91,x			ora 	esType+1,x
.3567	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3568	30 22		bmi $358c			bmi 	_PCError
.356a	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.356c	f0 0f		beq $357d			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.356e	20 f0 33	jsr $33f0			jsr 	BPMakeBothFloat 			; make both float
.3571	8a		txa				txa
.3572	a2 06		ldx #$06		ldx	#6
.3574	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3577	86 32		stx $32				stx 	tempShort 					; save result
.3579	aa		tax				tax
.357a	a5 32		lda $32				lda 	tempShort
.357c	60		rts				rts
.357d					_PCIsInteger:
.357d	4c d4 3b	jmp $3bd4			jmp 	MInt32Compare
.3580					_PCIsString:
.3580	8a		txa				txa 								; A has SP
.3581	a2 0a		ldx #$0a		ldx	#10
.3583	20 c6 41	jsr $41c6		jsr	stringHandler
.3586	86 32		stx $32				stx 	tempShort 					; save result
.3588	aa		tax				tax 								; put SP back in X and get result.
.3589	a5 32		lda $32				lda 	tempShort
.358b	60		rts				rts
.358c					_PCError:
.358c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.358e	20 09 15	jsr $1509		jsr	errorHandler
.3591					CompareEquals:
.3591	20 59 35	jsr $3559			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3594	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3596	f0 35		beq $35cd			beq  	CompareTrue
.3598	4c d0 35	jmp $35d0			jmp 	CompareFalse
.359b					CompareLess:
.359b	20 59 35	jsr $3559			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.359e	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.35a0	f0 2b		beq $35cd			beq  	CompareTrue
.35a2	4c d0 35	jmp $35d0			jmp 	CompareFalse
.35a5					CompareGreater:
.35a5	20 59 35	jsr $3559			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.35a8	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.35aa	f0 21		beq $35cd			beq  	CompareTrue
.35ac	4c d0 35	jmp $35d0			jmp 	CompareFalse
.35af					CompareNotEquals:
.35af	20 59 35	jsr $3559			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.35b2	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.35b4	d0 17		bne $35cd			bne  	CompareTrue
.35b6	4c d0 35	jmp $35d0			jmp 	CompareFalse
.35b9					CompareGreaterEq:
.35b9	20 59 35	jsr $3559			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.35bc	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.35be	d0 0d		bne $35cd			bne  	CompareTrue
.35c0	4c d0 35	jmp $35d0			jmp 	CompareFalse
.35c3					CompareLessEq:
.35c3	20 59 35	jsr $3559			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.35c6	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.35c8	d0 03		bne $35cd			bne  	CompareTrue
.35ca	4c d0 35	jmp $35d0			jmp 	CompareFalse
.35cd					CompareTrue:
.35cd	4c 2b 3e	jmp $3e2b			jmp 	MInt32True
.35d0					CompareFalse:
.35d0	4c 2f 3e	jmp $3e2f			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.35d3					DereferenceTwo:
.35d3	e8		inx				inx
.35d4	20 d8 35	jsr $35d8			jsr 	DereferenceOne
.35d7	ca		dex				dex
.35d8					DereferenceOne:
.35d8	b5 90		lda $90,x			lda 	esType,x
.35da	10 3b		bpl $3617			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.35dc	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.35dd	b0 39		bcs $3618			bcs 	_DRFloatDeReference
.35df	5a		phy				phy
.35e0	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.35e2	85 2a		sta $2a				sta 	temp0
.35e4	b5 a0		lda $a0,x			lda 	esInt1,x
.35e6	85 2b		sta $2b				sta 	temp0+1
.35e8	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.35ea	95 a0		sta $a0,x			sta 	esInt1,x
.35ec	95 a8		sta $a8,x			sta 	esInt2,x
.35ee	95 b0		sta $b0,x			sta 	esInt3,x
.35f0	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.35f2	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.35f4	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.35f5	30 0d		bmi $3604			bmi 	_DeRefString 				; string, 2 bytes only
.35f7	d0 11		bne $360a			bne 	_DeRefByte 					; byte 1 byte only
.35f9					_DeRefLong:
.35f9	a0 03		ldy #$03			ldy 	#3
.35fb	b1 2a		lda ($2a),y			lda 	(temp0),y
.35fd	95 b0		sta $b0,x			sta 	esInt3,x
.35ff	88		dey				dey
.3600	b1 2a		lda ($2a),y			lda 	(temp0),y
.3602	95 a8		sta $a8,x			sta 	esInt2,x
.3604					_DeRefString:
.3604	a0 01		ldy #$01			ldy 	#1
.3606	b1 2a		lda ($2a),y			lda 	(temp0),y
.3608	95 a0		sta $a0,x			sta 	esInt1,x
.360a					_DeRefByte:
.360a	a0 00		ldy #$00			ldy 	#0
.360c	b1 2a		lda ($2a),y			lda 	(temp0),y
.360e	95 98		sta $98,x			sta 	esInt0,x
.3610	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.3612	29 40		and #$40			and 	#$40
.3614	95 90		sta $90,x			sta 	esType,x
.3616	7a		ply				ply
.3617					_DRNotReference
.3617	60		rts				rts
.3618					_DRFloatDereference:
.3618	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0 					; address to deref in temp0
.361b	8a		txa				txa
.361c	a2 1e		ldx #$1e		ldx	#30
.361e	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3621	aa		tax				tax
.3622	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.3624	95 90		sta $90,x			sta 	esType,x
.3626	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.3627					EvaluateLevel:
.3627	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.3629	b0 1e		bcs $3649			bcs 	_ELStack
.362b	48		pha				pha 								; save precedence level.
.362c	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.362e	95 98		sta $98,x			sta 	esInt0,x
.3630	95 a0		sta $a0,x			sta 	esInt1,x
.3632	95 a8		sta $a8,x			sta 	esInt2,x
.3634	95 b0		sta $b0,x			sta 	esInt3,x
.3636	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.3638	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.363a	30 26		bmi $3662			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.363c	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.363d	30 0f		bmi $364e			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.363f	8a		txa				txa 								; stack level in X
.3640	a2 02		ldx #$02		ldx	#2
.3642	20 0d 4e	jsr $4e0d		jsr	variableHandler
.3645	aa		tax				tax
.3646	4c 8b 36	jmp $368b			jmp		_ELHasTerm
.3649					_ELStack:
.3649	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.364b	20 09 15	jsr $1509		jsr	errorHandler
.364e					_ELIsConstant:
.364e	4a		lsr a				lsr 	a 							; get the value back
.364f	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3651	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.3653					_ELCheckNext:
.3653	c8		iny				iny 								; look at next
.3654	b1 28		lda ($28),y			lda 	(codePtr),y
.3656	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.3658	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.365a	b0 2f		bcs $368b			bcs 	_ELHasTerm 					; done getting the constant.
.365c	20 24 37	jsr $3724			jsr 	ELShiftByteIn 				; shift byte into position.
.365f	4c 53 36	jmp $3653			jmp 	_ELCheckNext
.3662					_ELIsToken:
.3662	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3664	f0 0f		beq $3675			beq 	_ELIsString
.3666	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3668	d0 5f		bne $36c9			bne 	_ELCheckUnary
.366a	8a		txa				txa 								; put X into A
.366b	c8		iny				iny 								; skip over the float marker
.366c	a2 1a		ldx #$1a		ldx	#26
.366e	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3671	aa		tax				tax 								; restore X
.3672	4c 8b 36	jmp $368b			jmp 	_ELHasTerm
.3675					_ELIsString:
.3675	98		tya				tya 								; address of string is codePtr+y+1
.3676	38		sec				sec
.3677	65 28		adc $28				adc 	codePtr
.3679	95 98		sta $98,x			sta 	esInt0,x
.367b	a5 29		lda $29				lda 	codePtr+1
.367d	69 00		adc #$00			adc 	#0
.367f	95 a0		sta $a0,x			sta 	esInt1,x
.3681	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3683	95 90		sta $90,x			sta 	esType,x
.3685	c8		iny				iny 								; skip over string.
.3686	98		tya				tya
.3687	38		sec				sec									; +1 for the length itself.
.3688	71 28		adc ($28),y			adc 	(codePtr),y
.368a	a8		tay				tay 								; and fall through to term loop code.
.368b					_ELHasTerm:
.368b	b1 28		lda ($28),y			lda 	(codePtr),y
.368d	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.368f	90 04		bcc $3695			bcc 	_ELPopExit
.3691	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3693	90 02		bcc $3697			bcc 	_ELHasBinaryTerm
.3695					_ELPopExit:
.3695	68		pla				pla
.3696					_ELExit:
.3696	60		rts				rts
.3697					_ELHasBinaryTerm:
.3697	84 32		sty $32				sty 	tempShort 					; save position
.3699	a8		tay				tay 								; use token as an index and get the precedence.
.369a	b9 cc 36	lda $36cc,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.369d	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.369f	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.36a1	68		pla				pla 								; restore current level.
.36a2	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.36a4	b0 f0		bcs $3696			bcs 	_ELExit
.36a6	48		pha				pha 								; save current level back on the stack.
.36a7	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.36a9	48		pha				pha
.36aa	c8		iny				iny
.36ab	e8		inx				inx 								; calculate the RHS at the operator precedence.
.36ac	a5 32		lda $32				lda 	tempShort
.36ae	20 27 36	jsr $3627			jsr 	EvaluateLevel
.36b1	ca		dex				dex
.36b2	68		pla				pla 								; get the operator back out.
.36b3					_ELExecuteA:
.36b3	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.36b5	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.36b6	aa		tax				tax
.36b7	bd e4 32	lda $32e4,x			lda 	Group0Vectors,x
.36ba	85 2a		sta $2a				sta 	temp0
.36bc	bd e5 32	lda $32e5,x			lda 	Group0Vectors+1,x
.36bf	85 2b		sta $2b				sta 	temp0+1
.36c1	a6 32		ldx $32				ldx 	tempShort
.36c3	20 10 37	jsr $3710			jsr 	_ELCallTemp0
.36c6	4c 8b 36	jmp $368b			jmp 	_ELHasTerm 					; and loop back round.
.36c9					_ELCheckUnary:
.36c9	c8		iny				iny 								; skip over token.
.36ca	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.36cc	f0 19		beq $36e7			beq 	_ELMinus
.36ce	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.36d0	f0 2c		beq $36fe			beq 	_ELIndirect
.36d2	c9 98		cmp #$98			cmp 	#TKW_QMARK
.36d4	f0 28		beq $36fe			beq 	_ELIndirect
.36d6	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.36d8	f0 39		beq $3713			beq 	_ELExtension
.36da	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.36dc	90 04		bcc $36e2			bcc 	_ELUSyntax
.36de	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.36e0	90 d1		bcc $36b3			bcc 	_ELExecuteA 				; if so do that token.
.36e2					_ELUSyntax:
.36e2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.36e4	20 09 15	jsr $1509		jsr	errorHandler
.36e7					_ELMinus:
.36e7	20 79 37	jsr $3779			jsr 	EvaluateNumericTerm 		; get a number to negate.
.36ea	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.36ec	f0 0a		beq $36f8			beq 	_ELMinusInteger
.36ee	8a		txa				txa
.36ef	a2 0e		ldx #$0e		ldx	#14
.36f1	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.36f4	aa		tax				tax
.36f5	4c 8b 36	jmp $368b			jmp 	_ELHasTerm
.36f8					_ELMinusInteger:
.36f8	20 e9 3d	jsr $3de9			jsr 	MInt32Negate 				; do int negate
.36fb	4c 8b 36	jmp $368b			jmp 	_ELHasTerm
.36fe					_ELIndirect:
.36fe	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.36ff	20 82 37	jsr $3782			jsr 	EvaluateIntegerTerm 		; integer address
.3702	68		pla				pla
.3703	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.3705	f0 02		beq $3709			beq 	_ELHaveModifier
.3707	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.3709					_ELHaveModifier:
.3709	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.370b	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.370d	4c 8b 36	jmp $368b			jmp 	_ELHasTerm
.3710					_ELCallTemp0:
.3710	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3713					_ELExtension:
.3713	8a		txa				txa 								; stack pos in A
.3714	20 56 18	jsr $1856		jsr	extensionHandler
.3717	aa		tax				tax 								; restore stack
.3718	4c 8b 36	jmp $368b			jmp 	_ELHasTerm
.371b					UnaryParenthesis:
.371b	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.371d	20 27 36	jsr $3627			jsr 	EvaluateLevel
.3720	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen 			; check for )
.3723	60		rts				rts
.3724					ELShiftByteIn:
.3724	48		pha				pha 								; save bits to shift in.
.3725	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.3727	48		pha				pha
.3728	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.372a	95 b0		sta $b0,x			sta 	esInt3,x
.372c	b5 a0		lda $a0,x			lda 	esInt1,x
.372e	95 a8		sta $a8,x			sta 	esInt2,x
.3730	b5 98		lda $98,x			lda 	esInt0,x
.3732	95 a0		sta $a0,x			sta 	esInt1,x
.3734	a9 00		lda #$00			lda 	#0
.3736	95 98		sta $98,x			sta 	esInt0,x
.3738	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.3739	29 03		and #$03			and 	#3 							; only want lower 2 bits
.373b	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.373d					_ELShiftLoop:
.373d	4a		lsr a				lsr 	a
.373e	76 b0		ror $b0,x			ror 	esInt3,x
.3740	76 a8		ror $a8,x			ror 	esInt2,x
.3742	76 a0		ror $a0,x			ror 	esInt1,x
.3744	76 98		ror $98,x			ror 	esInt0,x
.3746	c9 01		cmp #$01			cmp 	#1
.3748	d0 f3		bne $373d			bne 	_ELShiftLoop
.374a	68		pla				pla 								; get original 6 bit value and OR in.
.374b	29 3f		and #$3f			and 	#$3F
.374d	15 98		ora $98,x			ora 	esInt0,x
.374f	95 98		sta $98,x			sta 	esInt0,x
.3751	60		rts				rts
.3752					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3752	01					.byte	$01			; $86 and
>3753	01					.byte	$01			; $87 or
>3754	01					.byte	$01			; $88 xor
>3755	02					.byte	$02			; $89 >=
>3756	02					.byte	$02			; $8a <=
>3757	02					.byte	$02			; $8b >
>3758	02					.byte	$02			; $8c <
>3759	02					.byte	$02			; $8d =
>375a	02					.byte	$02			; $8e <>
>375b	03					.byte	$03			; $8f +
>375c	03					.byte	$03			; $90 -
>375d	04					.byte	$04			; $91 >>
>375e	04					.byte	$04			; $92 <<
>375f	04					.byte	$04			; $93 *
>3760	04					.byte	$04			; $94 /
>3761	04					.byte	$04			; $95 mod
>3762	05					.byte	$05			; $96 ^
>3763	06					.byte	$06			; $97 !
>3764	06					.byte	$06			; $98 ?
>3765	82					.byte	$82			; $99 repeat
>3766	82					.byte	$82			; $9a while
>3767	82					.byte	$82			; $9b for
>3768	82					.byte	$82			; $9c if
>3769	82					.byte	$82			; $9d defproc
>376a	80					.byte	$80			; $9e until
>376b	80					.byte	$80			; $9f wend
>376c	80					.byte	$80			; $a0 next
>376d	80					.byte	$80			; $a1 then
>376e	80					.byte	$80			; $a2 endif
>376f	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3770					EvaluateTerm:
.3770	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.3772	20 27 36	jsr $3627			jsr 	EvaluateLevel
.3775	20 d8 35	jsr $35d8			jsr 	DereferenceOne
.3778	60		rts				rts
.3779					EvaluateNumericTerm:
.3779	20 70 37	jsr $3770			jsr 	EvaluateTerm
.377c	b5 90		lda $90,x			lda 	esType,x
.377e	0a		asl a				asl 	a 							; see if it's a string.
.377f	30 09		bmi $378a			bmi 	ENTType
.3781	60		rts				rts
.3782					EvaluateIntegerTerm:
.3782	20 70 37	jsr $3770			jsr 	EvaluateTerm
.3785	b5 90		lda $90,x			lda 	esType,x
.3787	d0 01		bne $378a			bne 	ENTType
.3789	60		rts				rts
.378a					ENTType:
.378a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.378c	20 09 15	jsr $1509		jsr	errorHandler
.378f					EvaluateRoot:
.378f	a2 00		ldx #$00			ldx 	#0
.3791					Evaluate:
.3791	a9 00		lda #$00			lda 	#0
.3793	20 27 36	jsr $3627			jsr 	EvaluateLevel
.3796	20 d8 35	jsr $35d8			jsr 	DereferenceOne
.3799	60		rts				rts
.379a					EvaluateNumeric:
.379a	20 91 37	jsr $3791			jsr 	Evaluate
.379d	b5 90		lda $90,x			lda 	esType,x
.379f	0a		asl a				asl 	a 							; see if it's a string.
.37a0	30 e8		bmi $378a			bmi 	ENTType
.37a2	4a		lsr a				lsr 	a 							; shift float flag into carry.
.37a3	4a		lsr a				lsr 	a
.37a4	60		rts				rts
.37a5					EvaluateString:
.37a5	20 91 37	jsr $3791			jsr 	Evaluate
.37a8	b5 90		lda $90,x			lda 	esType,x
.37aa	0a		asl a				asl 	a 							; see if it's a string.
.37ab	10 dd		bpl $378a			bpl 	ENTType
.37ad	60		rts				rts
.37ae					EvaluateRootInteger:
.37ae	a2 00		ldx #$00			ldx 	#0
.37b0					EvaluateInteger:
.37b0	20 91 37	jsr $3791			jsr 	Evaluate
.37b3	b5 90		lda $90,x			lda 	esType,x
.37b5	d0 d3		bne $378a			bne 	ENTType
.37b7	60		rts				rts
.37b8					EvaluateSmallInteger:
.37b8	20 b0 37	jsr $37b0			jsr 	EvaluateInteger
.37bb	b5 a0		lda $a0,x			lda 	esInt1,x
.37bd	15 a8		ora $a8,x			ora 	esInt2,x
.37bf	15 b0		ora $b0,x			ora 	esInt3,x
.37c1	d0 03		bne $37c6			bne 	_ESIValue
.37c3	b5 98		lda $98,x			lda 	esInt0,x
.37c5	60		rts				rts
.37c6					_ESIValue:
.37c6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.37c8	20 09 15	jsr $1509		jsr	errorHandler
.37cb					LinkEvaluate:
.37cb	aa		tax				tax
.37cc	20 91 37	jsr $3791			jsr 	Evaluate
.37cf	8a		txa				txa
.37d0	60		rts				rts
.37d1					LinkEvaluateTerm:
.37d1	aa		tax				tax
.37d2	20 70 37	jsr $3770			jsr 	EvaluateTerm
.37d5	8a		txa				txa
.37d6	60		rts				rts
.37d7					LinkEvaluateInteger:
.37d7	aa		tax				tax
.37d8	20 b0 37	jsr $37b0			jsr 	EvaluateInteger
.37db	8a		txa				txa
.37dc	60		rts				rts
.37dd					LinkEvaluateString:
.37dd	aa		tax				tax
.37de	20 a5 37	jsr $37a5			jsr 	EvaluateString
.37e1	8a		txa				txa
.37e2	60		rts				rts
.37e3					LinkEvaluateSmallInt:
.37e3	aa		tax				tax
.37e4	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger
.37e7	8a		txa				txa
.37e8	60		rts				rts
.37e9					EvaluateReference:
.37e9	ad 63 37	lda $3763			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.37ec	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.37ed	e9 01		sbc #$01			sbc 	#1
.37ef	20 27 36	jsr $3627			jsr 	EvaluateLevel
.37f2	b5 90		lda $90,x			lda 	esType,x
.37f4	10 01		bpl $37f7			bpl 	_ERFail
.37f6	60		rts				rts
.37f7					_ERFail:
.37f7	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.37f9	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.37fc					Event_Str:
.37fc	20 9a 37	jsr $379a			jsr 	EvaluateNumeric 			; get a number.
.37ff	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.3801	d0 13		bne $3816			bne 	_ESFloat
.3803	20 56 38	jsr $3856			jsr 	ConvertGetBase 				; get base, or default.
.3806	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3808	85 2a		sta $2a				sta 	temp0
.380a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.380c	85 2b		sta $2b				sta 	1+(temp0)
.380e	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3810	20 87 3d	jsr $3d87			jsr 	MInt32ToString 				; convert to string.
.3813	4c 23 38	jmp $3823			jmp 	_ESCloneExit 				; clone and exit.
.3816					_ESFloat:
.3816	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen 			; check closing )
.3819	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.381c	8a		txa				txa
.381d	a2 16		ldx #$16		ldx	#22
.381f	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3822	aa		tax				tax
.3823					_ESCloneExit:
.3823	8a		txa				txa
.3824	a2 04		ldx #$04		ldx	#4
.3826	20 c6 41	jsr $41c6		jsr	stringHandler
.3829	aa		tax				tax
.382a	60		rts				rts
.382b					UnaryVal:
.382b	38		sec				sec 								; Carry set to return value
.382c	b0 01		bcs $382f			bcs 	ValueMain
.382e					UnaryIsVal:
.382e	18		clc				clc									; Carry clear to return legitimacy
.382f					ValueMain:
.382f	08		php				php 								; save results (CS is value, CC is validation)
.3830	20 a5 37	jsr $37a5			jsr 	EvaluateString
.3833	20 56 38	jsr $3856			jsr 	ConvertGetBase 				; get base, if any.
.3836	5a		phy				phy
.3837	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.383a	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.383c	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.383e	20 a2 3c	jsr $3ca2			jsr 	MInt32FromString 			; convert it back from a string.
.3841	b0 0b		bcs $384e			bcs 	_VMSuccess 					; successfully converted.
.3843	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.3845	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3847	f0 00		beq $3849			beq 	_VMFailed 	 				; so we failed.
.3849					_VMFailed:
.3849	7a		ply				ply
.384a	28		plp				plp
.384b	4c 2f 3e	jmp $3e2f			jmp 	MInt32False 				; return 0 whatever.
.384e					_VMSuccess:
.384e	7a		ply				ply
.384f	28		plp				plp 								; if CS the it was val() so we want the value.
.3850	b0 03		bcs $3855			bcs 	_VMExit
.3852	4c 2b 3e	jmp $3e2b			jmp 	MInt32True 					; otherwise return true as successful.
.3855					_VMExit:
.3855	60		rts				rts
.3856					ConvertGetBase:
.3856	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3858	95 99		sta $99,x			sta 	esInt0+1,x
.385a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.385c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.385e	d0 0e		bne $386e			bne 	_CGBDone 					; not found, should be )
.3860	e8		inx				inx 								; next level
.3861	c8		iny				iny 								; skip comma.
.3862	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger		; evaluate the base.
.3865	ca		dex				dex
.3866	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3868	90 08		bcc $3872			bcc 	_CGBValue 					; (it should work as high as 37)
.386a	c9 11		cmp #$11			cmp 	#17
.386c	b0 04		bcs $3872			bcs 	_CGBValue
.386e					_CGBDone:
.386e	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen
.3871	60		rts				rts
.3872					_CGBValue:
.3872	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3874	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.3877					EventFunction:
.3877	20 e9 37	jsr $37e9			jsr 	EvaluateReference			; get the variable reference that tracks the event
.387a	b5 90		lda $90,x			lda 	esType,x
.387c	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.387e	d0 56		bne $38d6			bne 	_EFType
.3880	20 ad 3e	jsr $3ead			jsr 	CheckComma
.3883	e8		inx				inx
.3884	20 b0 37	jsr $37b0			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.3887	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen 			; finish off with the right bracket
.388a	ca		dex				dex
.388b	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.388d	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.388f	15 a8		ora $a8,x			ora 	esInt2,x
.3891	15 b0		ora $b0,x			ora 	esInt3,x
.3893	d0 3c		bne $38d1			bne 	_EFValue
.3895	5a		phy				phy
.3896	da		phx				phx
.3897	a2 1c		ldx #$1c		ldx	#28
.3899	20 e7 14	jsr $14e7		jsr	deviceHandler
.389c	84 2d		sty $2d				sty 	temp1+1
.389e	85 2c		sta $2c				sta 	temp1
.38a0	fa		plx				plx
.38a1	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.38a4	a0 03		ldy #$03			ldy 	#3							; if -ve
.38a6	b1 2a		lda ($2a),y			lda 	(temp0),y
.38a8	30 22		bmi $38cc			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.38aa	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.38ac	b1 2a		lda ($2a),y			lda 	(temp0),y
.38ae	c8		iny				iny
.38af	11 2a		ora ($2a),y			ora 	(temp0),y
.38b1	f0 16		beq $38c9			beq 	_EFInitialise 				; if so, initialise the value but return false.
.38b3	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.38b5	38		sec				sec
.38b6	b1 2a		lda ($2a),y			lda 	(temp0),y
.38b8	e5 2c		sbc $2c				sbc 	temp1
.38ba	c8		iny				iny
.38bb	b1 2a		lda ($2a),y			lda 	(temp0),y
.38bd	e5 2d		sbc $2d				sbc 	temp1+1
.38bf	10 0b		bpl $38cc			bpl 	_EFFail 					; if trigger >= timer then return False
.38c1	20 db 38	jsr $38db			jsr 	SetEventTimer 				; reset the timer for next time.
.38c4	20 2b 3e	jsr $3e2b			jsr	 	MInt32True 					; and treutn true as fired.
.38c7	7a		ply				ply
.38c8	60		rts				rts
.38c9					_EFInitialise:
.38c9	20 db 38	jsr $38db			jsr		SetEventTimer 				; set trigger time to time + elapsed
.38cc					_EFFail:
.38cc	7a		ply				ply
.38cd	20 2f 3e	jsr $3e2f			jsr 	MInt32False
.38d0	60		rts				rts
.38d1					_EFValue:
.38d1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.38d3	20 09 15	jsr $1509		jsr	errorHandler
.38d6					_EFType:
.38d6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.38d8	20 09 15	jsr $1509		jsr	errorHandler
.38db					SetEventTimer:
.38db	a0 00		ldy #$00			ldy 	#0
.38dd	18		clc				clc
.38de	a5 2c		lda $2c				lda 	temp1
.38e0	75 99		adc $99,x			adc 	esInt0+1,x
.38e2	91 2a		sta ($2a),y			sta		(temp0),y
.38e4	c8		iny				iny
.38e5	a5 2d		lda $2d				lda 	temp1+1
.38e7	75 a1		adc $a1,x			adc 	esInt1+1,x
.38e9	91 2a		sta ($2a),y			sta		(temp0),y
.38eb	88		dey				dey
.38ec	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.38ee	d0 04		bne $38f4			bne 	_SETExit 					; zero means initialise.....
.38f0	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.38f2	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.38f4					_SETExit:
.38f4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.38f5					UnaryLen:
.38f5	20 03 39	jsr $3903			jsr 	ULStart
.38f8					ULFinish:
.38f8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.38fa	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.38fc	20 3e 3e	jsr $3e3e			jsr 	MInt32Set8Bit 				; write it out.
.38ff	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen
.3902	60		rts				rts
.3903	20 a5 37	jsr $37a5	ULStart:jsr 	EvaluateString
.3906	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3908	85 2a		sta $2a				sta 	temp0
.390a	b5 a0		lda $a0,x			lda 	esInt1,x
.390c	85 2b		sta $2b				sta 	temp0+1
.390e	84 32		sty $32				sty 	tempShort 					; get length
.3910	a0 00		ldy #$00			ldy 	#0
.3912	60		rts				rts
.3913					UnaryAsc:
.3913	20 03 39	jsr $3903			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3916	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3918	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3919	c9 00		cmp #$00			cmp 	#0
.391b	d0 db		bne $38f8			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.391d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.391f	20 09 15	jsr $1509		jsr	errorHandler
.3922					UnaryAbs:
.3922	20 9a 37	jsr $379a			jsr 	EvaluateNumeric 			; some numeric value
.3925	b0 07		bcs $392e			bcs 	_UAFloat 					; CS then float, so use that function
.3927	20 e4 3d	jsr $3de4			jsr 	MInt32Absolute 				; int version
.392a	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen
.392d	60		rts				rts
.392e					_UAFloat:
.392e	8a		txa				txa 								; float version
.392f	a2 02		ldx #$02		ldx	#2
.3931	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3934	aa		tax				tax
.3935	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen
.3938	60		rts				rts
.3939					UnarySgn:
.3939	20 9a 37	jsr $379a			jsr 	EvaluateNumeric 			; same as above but sign of value
.393c	b0 07		bcs $3945			bcs 	_USFloat
.393e	20 1c 3e	jsr $3e1c			jsr 	MInt32Sign
.3941	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen
.3944	60		rts				rts
.3945					_USFloat:
.3945	8a		txa				txa
.3946	a2 10		ldx #$10		ldx	#16
.3948	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.394b	aa		tax				tax
.394c	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen
.394f	60		rts				rts
.3950					UnaryPeek:
.3950	20 7c 39	jsr $397c			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3953	4c 70 39	jmp $3970			jmp 	PDLByte0
.3956					UnaryDeek:
.3956	20 7c 39	jsr $397c			jsr 	PDLCode
.3959	4c 6a 39	jmp $396a			jmp 	PDLByte1
.395c					UnaryLeek:
.395c	20 7c 39	jsr $397c			jsr 	PDLCode
.395f	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3961	b1 2a		lda ($2a),y			lda 	(temp0),y
.3963	95 b0		sta $b0,x			sta 	esInt3,x
.3965	88		dey				dey
.3966	b1 2a		lda ($2a),y			lda 	(temp0),y
.3968	95 a8		sta $a8,x			sta 	esInt2,x
.396a					PDLByte1:
.396a	a0 01		ldy #$01			ldy 	#1
.396c	b1 2a		lda ($2a),y			lda 	(temp0),y
.396e	95 a0		sta $a0,x			sta 	esInt1,x
.3970					PDLByte0:
.3970	a0 00		ldy #$00			ldy 	#0
.3972	b1 2a		lda ($2a),y			lda 	(temp0),y
.3974	95 98		sta $98,x			sta 	esInt0,x
.3976	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3978	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen 			; check right and return
.397b	60		rts				rts
.397c					PDLCode:
.397c	20 b0 37	jsr $37b0			jsr 	EvaluateInteger 			; some address
.397f	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3981	85 2a		sta $2a				sta 	temp0
.3983	b5 a0		lda $a0,x			lda 	esInt1,x
.3985	85 2b		sta $2b				sta 	temp0+1
.3987	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3989	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.398b	95 a8		sta $a8,x			sta 	esInt2,x
.398d	95 b0		sta $b0,x			sta 	esInt3,x
.398f	84 32		sty $32				sty 	tempShort 					; save Y
.3991	60		rts				rts
.3992					Unary_Random:
.3992	20 5f 3e	jsr $3e5f			jsr 	MInt32Random 				; generate random number.
.3995	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3997	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3999	f0 08		beq $39a3			beq 	_URExit
.399b	e8		inx				inx 								; load range 0..r-1 into +1
.399c	20 b0 37	jsr $37b0			jsr 	EvaluateInteger
.399f	ca		dex				dex
.39a0	20 87 3c	jsr $3c87			jsr 	MInt32Modulus 				; calculate random % modulus
.39a3					_URExit:
.39a3	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen 			; check right and return
.39a6	60		rts				rts
.39a7					Unary_Min:
.39a7	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.39a9	d0 02		bne $39ad			bne 	UnaryMBody
.39ab					Unary_Max:
.39ab	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.39ad					UnaryMBody:
.39ad	48		pha				pha 								; save comparator on stack, shows min or max
.39ae	20 91 37	jsr $3791			jsr 	Evaluate 					; get the first thing to check
.39b1					_UnaryMLoop:
.39b1	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.39b3	c8		iny				iny
.39b4	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.39b6	f0 09		beq $39c1			beq 	_UnaryMExit
.39b8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.39ba	f0 07		beq $39c3			beq 	_UnaryMCompare
.39bc	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.39be	20 09 15	jsr $1509		jsr	errorHandler
.39c1					_UnaryMExit:
.39c1	68		pla				pla 								; done so throw comparator and return.
.39c2	60		rts				rts
.39c3					_UnaryMCompare:
.39c3	e8		inx				inx 								; get the 2nd thing to evaluate
.39c4	20 91 37	jsr $3791			jsr 	Evaluate
.39c7	ca		dex				dex
.39c8	20 59 35	jsr $3559			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.39cb	85 32		sta $32				sta 	tempShort 					; save result
.39cd	68		pla				pla 								; get what we need
.39ce	48		pha				pha
.39cf	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.39d1	d0 de		bne $39b1			bne 	_UnaryMLoop 				; no, try another value.
.39d3	20 2f 3e	jsr $3e2f			jsr 	MInt32False 				; promote 2nd to 1st.
.39d6	20 15 3d	jsr $3d15			jsr 	MInt32Add
.39d9	4c b1 39	jmp $39b1			jmp 	_UnaryMLoop
.39dc					Unary_Page:
.39dc	20 2f 3e	jsr $3e2f			jsr 	MInt32False 				; zero
.39df	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.39e2	95 98		sta $98,x			sta 	esInt0,x
.39e4	ad c9 0a	lda $0ac9			lda 	basePage+1
.39e7	95 a0		sta $a0,x			sta 	esInt1,x
.39e9	60		rts				rts
.39ea					UnaryReference:
.39ea	a9 0f		lda #$0f			lda 	#15
.39ec	20 27 36	jsr $3627			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.39ef	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.39f1	10 05		bpl $39f8			bpl 	UType
.39f3	a9 00		lda #$00			lda 	#0 							; make it an integer
.39f5	95 90		sta $90,x			sta 	esType,x
.39f7	60		rts				rts
.39f8					UType:
.39f8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.39fa	20 09 15	jsr $1509		jsr	errorHandler
.39fd					UnaryHexMarker:
.39fd	4c 82 37	jmp $3782			jmp 	EvaluateIntegerTerm
.3a00					UnaryComplement:
.3a00	20 82 37	jsr $3782			jsr 	EvaluateIntegerTerm
.3a03	20 03 3e	jsr $3e03			jsr 	MInt32Not
.3a06	60		rts				rts
.3a07					UnaryIntToFloat:
.3a07	20 9a 37	jsr $379a			jsr 	EvaluateNumeric				; some number
.3a0a	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3a0c	d0 0b		bne $3a19			bne 	_UIFExit
.3a0e	8a		txa				txa 								; convert and set type
.3a0f	a2 1c		ldx #$1c		ldx	#28
.3a11	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3a14	aa		tax				tax
.3a15	a9 01		lda #$01			lda 	#1
.3a17	95 90		sta $90,x			sta 	esType,x
.3a19					_UIFExit:
.3a19	60		rts				rts
.3a1a					UnaryFloatToInt:
.3a1a	20 9a 37	jsr $379a			jsr 	EvaluateNumeric 			; the number
.3a1d	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3a1f	f0 0b		beq $3a2c			beq 	_UFIExit
.3a21	8a		txa				txa 								; convert to int
.3a22	a2 14		ldx #$14		ldx	#20
.3a24	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.3a27	aa		tax				tax
.3a28	a9 00		lda #$00			lda 	#0 							; set type
.3a2a	95 90		sta $90,x			sta 	esType,x
.3a2c					_UFIExit:
.3a2c	60		rts				rts
.3a2d					UnaryAlloc:
.3a2d	e8		inx				inx 								; evaluate memory required
.3a2e	20 b0 37	jsr $37b0			jsr 	EvaluateInteger
.3a31	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen
.3a34	ca		dex				dex
.3a35	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3a37	15 b1		ora $b1,x			ora 	esInt3+1,x
.3a39	d0 1d		bne $3a58			bne 	_UABadValue
.3a3b	20 2f 3e	jsr $3e2f			jsr 	MInt32False					; zero return.
.3a3e	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3a40	95 a0		sta $a0,x			sta 	esInt1,x
.3a42	a5 35		lda $35				lda 	lowMemory
.3a44	95 98		sta $98,x			sta 	esInt0,x
.3a46	18		clc				clc 								; add alloc required.
.3a47	75 99		adc $99,x			adc 	esInt0+1,x
.3a49	85 35		sta $35				sta 	lowMemory
.3a4b	a5 36		lda $36				lda 	lowMemory+1
.3a4d	75 a1		adc $a1,x			adc 	esInt1+1,x
.3a4f	85 36		sta $36				sta 	lowMemory+1
.3a51	b0 05		bcs $3a58			bcs		_UABadValue 				; overflow definitely bad.
.3a53	c5 34		cmp $34				cmp 	highMemory+1
.3a55	b0 01		bcs $3a58			bcs 	_UABadValue 				; out of memory bad.
.3a57	60		rts				rts
.3a58					_UABadValue:
.3a58	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3a5a	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3a5d					UnaryTimer:
.3a5d	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen 			; no parameters
.3a60	5a		phy				phy
.3a61	20 56 3e	jsr $3e56			jsr 	MInt32Zero 					; zero result
.3a64	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3a66	a2 1c		ldx #$1c		ldx	#28
.3a68	20 e7 14	jsr $14e7		jsr	deviceHandler
.3a6b	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3a6d	95 98		sta $98,x			sta 	esInt0,x
.3a6f	98		tya				tya
.3a70	95 a0		sta $a0,x			sta 	esInt1,x
.3a72	7a		ply				ply
.3a73	60		rts				rts
.3a74					UnaryInkey:
.3a74	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen
.3a77	86 2a		stx $2a				stx 	temp0
.3a79	a2 0a		ldx #$0a		ldx	#10
.3a7b	20 e7 14	jsr $14e7		jsr	deviceHandler
.3a7e	a6 2a		ldx $2a				ldx 	temp0
.3a80	20 3e 3e	jsr $3e3e			jsr 	MInt32Set8Bit
.3a83	60		rts				rts
.3a84					UnaryGet:
.3a84	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen
.3a87	86 2a		stx $2a				stx 	temp0
.3a89					_UGLoop:
.3a89	a2 02		ldx #$02		ldx	#2
.3a8b	20 e7 14	jsr $14e7		jsr	deviceHandler
.3a8e	a2 0a		ldx #$0a		ldx	#10
.3a90	20 e7 14	jsr $14e7		jsr	deviceHandler
.3a93	c9 00		cmp #$00			cmp 	#0
.3a95	f0 f2		beq $3a89			beq 	_UGLoop
.3a97	a6 2a		ldx $2a				ldx 	temp0
.3a99	20 3e 3e	jsr $3e3e			jsr 	MInt32Set8Bit
.3a9c	60		rts				rts
.3a9d					UnaryGetString:
.3a9d	20 84 3a	jsr $3a84			jsr 	UnaryGet
.3aa0					UGSDoChr:
.3aa0	4c ed 3a	jmp $3aed			jmp 	ChrCode
.3aa3					UnaryInkeyString:
.3aa3	20 74 3a	jsr $3a74			jsr 	UnaryInkey
.3aa6	b5 98		lda $98,x			lda 	esInt0,x
.3aa8	d0 f6		bne $3aa0			bne 	UGSDoChr
.3aaa	8a		txa				txa
.3aab	a2 08		ldx #$08		ldx	#8
.3aad	20 c6 41	jsr $41c6		jsr	stringHandler
.3ab0	aa		tax				tax
.3ab1	60		rts				rts
.3ab2					UnarySys:
.3ab2	20 b0 37	jsr $37b0			jsr 	EvaluateInteger 				; get the address
.3ab5	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen
.3ab8	20 b4 2b	jsr $2bb4			jsr 	TOSToTemp0 						; copy call address to temp0
.3abb	da		phx				phx
.3abc	5a		phy				phy
.3abd	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3ac0	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3ac3	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3ac6	20 d3 3a	jsr $3ad3			jsr 	_CallTemp0
.3ac9	85 32		sta $32				sta 	tempShort 						; restore YX
.3acb	7a		ply				ply
.3acc	fa		plx				plx
.3acd	a5 32		lda $32				lda 	tempShort
.3acf	20 3e 3e	jsr $3e3e			jsr 	MInt32Set8Bit 					; return result.
.3ad2	60		rts				rts
.3ad3					_CallTemp0:
.3ad3	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3ad6					UnaryMem:
.3ad6	20 2f 3e	jsr $3e2f			jsr 	MInt32False 					; set to false (e.g. 0)
.3ad9	38		sec				sec
.3ada	a5 33		lda $33				lda 	highMemory 						; calculate value
.3adc	e5 35		sbc $35				sbc 	lowMemory
.3ade	95 98		sta $98,x			sta 	esInt0,x
.3ae0	a5 34		lda $34				lda 	highMemory+1
.3ae2	e5 36		sbc $36				sbc 	lowMemory+1
.3ae4	95 a0		sta $a0,x			sta 	esInt1,x
.3ae6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3ae7					ExecChr:
.3ae7	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger		; character number 0-255
.3aea	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen				; right bracket
.3aed					ChrCode:
.3aed	5a		phy				phy
.3aee	8a		txa				txa 								; A = stack
.3aef	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3af1	a2 02		ldx #$02		ldx	#2
.3af3	20 c6 41	jsr $41c6		jsr	stringHandler
.3af6	aa		tax				tax 								; X = stack
.3af7	7a		ply				ply
.3af8	60		rts				rts
.3af9					ExecLower:
.3af9	38		sec				sec 								; set carry is lower
.3afa	b0 01		bcs $3afd			bcs 	ExecUpperLower
.3afc					ExecUpper:
.3afc	18		clc				clc 								; clear carry is upper
.3afd					ExecUpperLower:
.3afd	08		php				php 								; save carry
.3afe	20 a5 37	jsr $37a5			jsr 	EvaluateString 				; string to stack,X
.3b01	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen 			; check closing right bracket.
.3b04	28		plp				plp 								; restore carry, save Y
.3b05	5a		phy				phy
.3b06	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3b08	2a		rol a				rol 	a
.3b09	a8		tay				tay 								; now in Y
.3b0a	8a		txa				txa 								; do the substring and exit.
.3b0b	a2 0c		ldx #$0c		ldx	#12
.3b0d	20 c6 41	jsr $41c6		jsr	stringHandler
.3b10	aa		tax				tax
.3b11	7a		ply				ply
.3b12	60		rts				rts
.3b13					ExecLeft:
.3b13	20 a5 37	jsr $37a5			jsr 	EvaluateString 				; string to stack,X
.3b16	20 ad 3e	jsr $3ead			jsr 	CheckComma
.3b19	e8		inx				inx
.3b1a	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3b1c	20 3e 3e	jsr $3e3e			jsr 	MInt32Set8Bit
.3b1f	e8		inx				inx
.3b20	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3b23					ExecSubstring:
.3b23	ca		dex				dex 								; fix up X
.3b24	ca		dex				dex
.3b25	20 a0 3e	jsr $3ea0			jsr 	CheckRightParen 			; check closing right bracket.
.3b28	8a		txa				txa 								; do the substring and exit.
.3b29	a2 0e		ldx #$0e		ldx	#14
.3b2b	20 c6 41	jsr $41c6		jsr	stringHandler
.3b2e	aa		tax				tax
.3b2f	60		rts				rts
.3b30					ExecMid:
.3b30	20 a5 37	jsr $37a5			jsr 	EvaluateString 				; string to stack,X
.3b33	20 ad 3e	jsr $3ead			jsr 	CheckComma
.3b36	e8		inx				inx
.3b37	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3b3a	c9 00		cmp #$00			cmp 	#0
.3b3c	f0 15		beq $3b53			beq 	_EMValue
.3b3e	e8		inx				inx
.3b3f	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3b41	20 3e 3e	jsr $3e3e			jsr 	MInt32Set8Bit
.3b44	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3b46	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3b48	f0 d9		beq $3b23			beq 	ExecSubString
.3b4a	20 ad 3e	jsr $3ead			jsr 	CheckComma
.3b4d	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3b50	4c 23 3b	jmp $3b23			jmp 	ExecSubString
.3b53					_EMValue:
.3b53	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3b55	20 09 15	jsr $1509		jsr	errorHandler
.3b58					ExecRight:
.3b58	20 a5 37	jsr $37a5			jsr 	EvaluateString 				; string to stack,X
.3b5b	20 ad 3e	jsr $3ead			jsr 	CheckComma
.3b5e	e8		inx				inx
.3b5f	20 b8 37	jsr $37b8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3b62	ca		dex				dex
.3b63	5a		phy				phy
.3b64	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3b66	85 2a		sta $2a				sta 	temp0
.3b68	b5 a0		lda $a0,x			lda 	esInt1,x
.3b6a	85 2b		sta $2b				sta 	temp0+1
.3b6c	a0 00		ldy #$00			ldy 	#0 							; point to length
.3b6e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3b70	18		clc				clc 								; add 1.
.3b71	69 01		adc #$01			adc 	#1
.3b73	38		sec				sec
.3b74	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3b76	f0 02		beq $3b7a			beq		_ERMake1 					; if zero, make it 1.
.3b78	b0 02		bcs $3b7c			bcs		_EROkay
.3b7a					_ERMake1:
.3b7a	a9 01		lda #$01			lda 	#1 							; start position.
.3b7c					_EROkay:
.3b7c	e8		inx				inx 								; set start pos.
.3b7d	95 98		sta $98,x			sta 	esInt0,x
.3b7f	e8		inx				inx
.3b80	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3b82	20 3e 3e	jsr $3e3e			jsr 	MInt32Set8Bit
.3b85	7a		ply				ply
.3b86	4c 23 3b	jmp $3b23			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3b89					MInt32And:
.3b89	b5 98		lda $98,x			lda 	esInt0,x
.3b8b	35 99		and $99,x			and 	esInt0+1,x
.3b8d	95 98		sta $98,x			sta 	esInt0,x
.3b8f	b5 a0		lda $a0,x			lda 	esInt1,x
.3b91	35 a1		and $a1,x			and 	esInt1+1,x
.3b93	95 a0		sta $a0,x			sta 	esInt1,x
.3b95	b5 a8		lda $a8,x			lda 	esInt2,x
.3b97	35 a9		and $a9,x			and 	esInt2+1,x
.3b99	95 a8		sta $a8,x			sta 	esInt2,x
.3b9b	b5 b0		lda $b0,x			lda 	esInt3,x
.3b9d	35 b1		and $b1,x			and 	esInt3+1,x
.3b9f	95 b0		sta $b0,x			sta 	esInt3,x
.3ba1	60		rts				rts
.3ba2					MInt32Or:
.3ba2	b5 98		lda $98,x			lda 	esInt0,x
.3ba4	15 99		ora $99,x			ora 	esInt0+1,x
.3ba6	95 98		sta $98,x			sta 	esInt0,x
.3ba8	b5 a0		lda $a0,x			lda 	esInt1,x
.3baa	15 a1		ora $a1,x			ora 	esInt1+1,x
.3bac	95 a0		sta $a0,x			sta 	esInt1,x
.3bae	b5 a8		lda $a8,x			lda 	esInt2,x
.3bb0	15 a9		ora $a9,x			ora 	esInt2+1,x
.3bb2	95 a8		sta $a8,x			sta 	esInt2,x
.3bb4	b5 b0		lda $b0,x			lda 	esInt3,x
.3bb6	15 b1		ora $b1,x			ora 	esInt3+1,x
.3bb8	95 b0		sta $b0,x			sta 	esInt3,x
.3bba	60		rts				rts
.3bbb					MInt32Xor:
.3bbb	b5 98		lda $98,x			lda 	esInt0,x
.3bbd	55 99		eor $99,x			eor 	esInt0+1,x
.3bbf	95 98		sta $98,x			sta 	esInt0,x
.3bc1	b5 a0		lda $a0,x			lda 	esInt1,x
.3bc3	55 a1		eor $a1,x			eor 	esInt1+1,x
.3bc5	95 a0		sta $a0,x			sta 	esInt1,x
.3bc7	b5 a8		lda $a8,x			lda 	esInt2,x
.3bc9	55 a9		eor $a9,x			eor 	esInt2+1,x
.3bcb	95 a8		sta $a8,x			sta 	esInt2,x
.3bcd	b5 b0		lda $b0,x			lda 	esInt3,x
.3bcf	55 b1		eor $b1,x			eor 	esInt3+1,x
.3bd1	95 b0		sta $b0,x			sta 	esInt3,x
.3bd3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3bd4					MInt32Compare:
.3bd4	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3bd6	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3bd8	d0 13		bne $3bed			bne 	MInt32Compare2
.3bda	b5 a0		lda $a0,x			lda 	esInt1,x
.3bdc	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3bde	d0 0d		bne $3bed			bne 	MInt32Compare2
.3be0	b5 a8		lda $a8,x			lda 	esInt2,x
.3be2	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3be4	d0 07		bne $3bed			bne 	MInt32Compare2
.3be6	b5 b0		lda $b0,x			lda 	esInt3,x
.3be8	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3bea	d0 01		bne $3bed			bne 	MInt32Compare2
.3bec	60		rts				rts
.3bed					MInt32Compare2:
.3bed	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3bef	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3bf1	b5 a0		lda $a0,x			lda		esInt1,x
.3bf3	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3bf5	b5 a8		lda $a8,x			lda		esInt2,x
.3bf7	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3bf9	b5 b0		lda $b0,x			lda		esInt3,x
.3bfb	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3bfd	50 02		bvc $3c01			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3bff	49 80		eor #$80			eor 	#$80
.3c01					_I32LNoOverflow
.3c01	30 03		bmi $3c06			bmi 	MInt32CLess					; if -ve then return $FF
.3c03	a9 01		lda #$01			lda 	#$01						; else return $01
.3c05	60		rts				rts
.3c06					MInt32CLess:
.3c06	a9 ff		lda #$ff			lda 	#$FF
.3c08	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3c09					MInt32SDivide:
.3c09	98		tya				tya  								; save Y, which is the count of negations
.3c0a	48		pha				pha
.3c0b	a0 00		ldy #$00			ldy 	#0 							; zero count
.3c0d	20 25 3c	jsr $3c25			jsr 	_MInt32SRemSign 			; unsign TOS
.3c10	e8		inx				inx 								; unsign TOS+1
.3c11	20 25 3c	jsr $3c25			jsr 	_MInt32SRemSign
.3c14	ca		dex				dex
.3c15	98		tya				tya 								; save sign count on stack
.3c16	48		pha				pha
.3c17	20 2e 3c	jsr $3c2e			jsr 	MInt32UDivide 				; unsigned division
.3c1a	68		pla				pla 								; get sign count back
.3c1b	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3c1d	f0 03		beq $3c22			beq 	_I32SNoNeg
.3c1f	20 e9 3d	jsr $3de9			jsr 	MInt32Negate
.3c22					_I32SNoNeg:
.3c22	68		pla				pla 								; restoe Y and exit
.3c23	a8		tay				tay
.3c24	60		rts				rts
.3c25					_MInt32SRemSign:
.3c25	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3c27	10 04		bpl $3c2d			bpl 	_MInt32SRSExit
.3c29	c8		iny				iny 								; increment the sign count
.3c2a	20 e9 3d	jsr $3de9			jsr 	MInt32Negate 				; negate the value.
.3c2d					_MInt32SRSExit:
.3c2d	60		rts				rts
.3c2e					MInt32UDivide:
.3c2e	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3c30	15 a1		ora $a1,x			ora 	esInt1+1,x
.3c32	15 a2		ora $a2,x			ora 	esInt1+2,x
.3c34	15 a3		ora $a3,x			ora 	esInt1+3,x
.3c36	f0 4a		beq $3c82			beq 	_MInt32DZero
.3c38	e8		inx				inx 								; clear A
.3c39	e8		inx				inx
.3c3a	20 2f 3e	jsr $3e2f			jsr 	MInt32False
.3c3d	ca		dex				dex
.3c3e	ca		dex				dex
.3c3f	98		tya				tya 								; save Y on the stack
.3c40	48		pha				pha
.3c41	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3c43					_MInt32UDLoop:
.3c43	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3c45	36 a0		rol $a0,x			rol 	esInt1,x
.3c47	36 a8		rol $a8,x			rol 	esInt2,x
.3c49	36 b0		rol $b0,x			rol 	esInt3,x
.3c4b	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3c4d	36 a2		rol $a2,x			rol 	esInt1+2,x
.3c4f	36 aa		rol $aa,x			rol 	esInt2+2,x
.3c51	36 b2		rol $b2,x			rol 	esInt3+2,x
.3c53	38		sec				sec 								; calculate A-M saving result on the stack
.3c54	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3c56	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3c58	48		pha				pha
.3c59	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3c5b	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3c5d	48		pha				pha
.3c5e	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3c60	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3c62	48		pha				pha
.3c63	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3c65	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3c67	90 10		bcc $3c79			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3c69	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3c6b	68		pla				pla
.3c6c	95 aa		sta $aa,x			sta 	esInt2+2,x
.3c6e	68		pla				pla
.3c6f	95 a2		sta $a2,x			sta 	esInt1+2,x
.3c71	68		pla				pla
.3c72	95 9a		sta $9a,x			sta 	esInt0+2,x
.3c74	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3c76	4c 7c 3c	jmp $3c7c			jmp 	_MInt32Next 					; do the next iteration
.3c79					_MInt32NoSubtract:
.3c79	68		pla				pla
.3c7a	68		pla				pla
.3c7b	68		pla				pla
.3c7c					_MInt32Next:
.3c7c	88		dey				dey 								; do this 32 times.
.3c7d	d0 c4		bne $3c43			bne 	_MInt32UDLoop
.3c7f	68		pla				pla 								; restore Y and exit
.3c80	a8		tay				tay
.3c81	60		rts				rts
.3c82					_MInt32DZero:
.3c82	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3c84	20 09 15	jsr $1509		jsr	errorHandler
.3c87					MInt32Modulus:
.3c87	20 2e 3c	jsr $3c2e			jsr 	MInt32UDivide 				; do the division.
.3c8a	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3c8c	95 b0		sta $b0,x			sta 	esInt3,x
.3c8e	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3c90	95 a8		sta $a8,x			sta 	esInt2,x
.3c92	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3c94	95 a0		sta $a0,x			sta 	esInt1,x
.3c96	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3c98	95 98		sta $98,x			sta 	esInt0,x
.3c9a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d67					fs32Length:
>0d67							.fill 	1
.3c9b					LinkInt32FromString:
.3c9b	aa		tax				tax
.3c9c	98		tya				tya
.3c9d	20 a2 3c	jsr $3ca2			jsr 	MInt32FromString
.3ca0	8a		txa				txa
.3ca1	60		rts				rts
.3ca2					MInt32FromString:
.3ca2	85 32		sta $32				sta 	tempShort 					; save base
.3ca4	5a		phy				phy
.3ca5	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3ca7	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ca9	8d 67 0d	sta $0d67			sta 	fs32Length
.3cac	f0 64		beq $3d12			beq 	_I32FSFail2					; fail if length zero.
.3cae	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3cb0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3cb2	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3cb4	d0 09		bne $3cbf			bne 	_I32FSNotNegative
.3cb6	ad 67 0d	lda $0d67			lda 	fs32Length 					; get length back.
.3cb9	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3cbb	f0 55		beq $3d12			beq 	_I32FSFail2
.3cbd	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3cbf					_I32FSNotNegative:
.3cbf	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3cc1	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3cc3	d0 02		bne $3cc7			bne 	_I32FSNN2
.3cc5	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3cc7					_I32FSNN2:
.3cc7	48		pha				pha 								; save base + final sign on stack.
.3cc8	20 2f 3e	jsr $3e2f			jsr 	MInt32False 				; zero the return value.
.3ccb					_I32FSMainLoop:
.3ccb	68		pla				pla 								; get the base back into tempShort
.3ccc	48		pha				pha
.3ccd	29 7f		and #$7f			and 	#$7F
.3ccf	85 32		sta $32				sta 	tempShort
.3cd1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3cd3	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3cd5	90 02		bcc $3cd9			bcc 	_I32FSNotLC
.3cd7	e9 20		sbc #$20			sbc 	#32
.3cd9					_I32FSNotLC:
.3cd9	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3cda	e9 30		sbc #$30			sbc 	#"0"
.3cdc	90 33		bcc $3d11			bcc 	_I32FSFail 					; nothing more to do.
.3cde	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3ce0	90 06		bcc $3ce8			bcc 	_I32FSValidate
.3ce2	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3ce4	90 2b		bcc $3d11			bcc 	_I32FSFail
.3ce6	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3ce8					_I32FSValidate:
.3ce8	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3cea	b0 25		bcs $3d11			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3cec	48		pha				pha 								; save the new digit value.
.3ced	e8		inx				inx 								; put base into next slot up on stack
.3cee	a5 32		lda $32				lda 	tempShort
.3cf0	20 3e 3e	jsr $3e3e			jsr 	MInt32Set8Bit
.3cf3	ca		dex				dex
.3cf4	20 49 3d	jsr $3d49			jsr 	MInt32Multiply 				; multiply current by the base
.3cf7	e8		inx				inx
.3cf8	68		pla				pla  								; put additive into next slot
.3cf9	20 3e 3e	jsr $3e3e			jsr 	MInt32Set8Bit
.3cfc	ca		dex				dex
.3cfd	20 15 3d	jsr $3d15			jsr 	MInt32Add 					; and add it
.3d00	c8		iny				iny 								; bump the character pointer
.3d01	cc 67 0d	cpy $0d67			cpy 	fs32Length 					; until > length.
.3d04	f0 c5		beq $3ccb			beq 	_I32FSMainLoop
.3d06	90 c3		bcc $3ccb			bcc 	_I32FSMainLoop
.3d08					_I32FSDone:
.3d08	68		pla				pla 								; get base/final sign back
.3d09	10 03		bpl $3d0e			bpl 	_I32FSNN3
.3d0b	20 e9 3d	jsr $3de9			jsr 	MInt32Negate 				; negate the result.
.3d0e					_I32FSNN3:
.3d0e	7a		ply				ply
.3d0f	38		sec				sec
.3d10	60		rts				rts
.3d11					_I32FSFail:
.3d11	68		pla				pla
.3d12					_I32FSFail2:
.3d12	7a		ply				ply
.3d13	18		clc				clc
.3d14	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3d15					MInt32Add:
.3d15	18		clc				clc
.3d16	b5 98		lda $98,x			lda 	esInt0,x
.3d18	75 99		adc $99,x			adc 	esInt0+1,x
.3d1a	95 98		sta $98,x			sta 	esInt0,x
.3d1c	b5 a0		lda $a0,x			lda 	esInt1,x
.3d1e	75 a1		adc $a1,x			adc 	esInt1+1,x
.3d20	95 a0		sta $a0,x			sta 	esInt1,x
.3d22	b5 a8		lda $a8,x			lda 	esInt2,x
.3d24	75 a9		adc $a9,x			adc 	esInt2+1,x
.3d26	95 a8		sta $a8,x			sta 	esInt2,x
.3d28	b5 b0		lda $b0,x			lda 	esInt3,x
.3d2a	75 b1		adc $b1,x			adc 	esInt3+1,x
.3d2c	95 b0		sta $b0,x			sta 	esInt3,x
.3d2e	60		rts				rts
.3d2f					MInt32Sub:
.3d2f	38		sec				sec
.3d30	b5 98		lda $98,x			lda 	esInt0,x
.3d32	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3d34	95 98		sta $98,x			sta 	esInt0,x
.3d36	b5 a0		lda $a0,x			lda 	esInt1,x
.3d38	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3d3a	95 a0		sta $a0,x			sta 	esInt1,x
.3d3c	b5 a8		lda $a8,x			lda 	esInt2,x
.3d3e	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d40	95 a8		sta $a8,x			sta 	esInt2,x
.3d42	b5 b0		lda $b0,x			lda 	esInt3,x
.3d44	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d46	95 b0		sta $b0,x			sta 	esInt3,x
.3d48	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3d49					MInt32Multiply:
.3d49	e8		inx				inx 								; copy 2nd -> 3rd
.3d4a	20 6f 3d	jsr $3d6f			jsr 	MInt32CopyUp
.3d4d	ca		dex				dex
.3d4e	20 6f 3d	jsr $3d6f			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3d51	20 2f 3e	jsr $3e2f			jsr 	MInt32False 				; zero 1st.
.3d54					_I32Loop:
.3d54	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3d56	29 01		and #$01			and 	#1
.3d58	f0 03		beq $3d5d			beq 	_I32NoAdd 					; if set
.3d5a	20 15 3d	jsr $3d15			jsr 	MInt32Add 					; add 2nd to 1st.
.3d5d					_I32NoAdd:
.3d5d	e8		inx				inx 								; shift 2nd left
.3d5e	20 44 3e	jsr $3e44			jsr 	MInt32ShiftLeft
.3d61	e8		inx				inx  								; shift 3rd right
.3d62	20 4d 3e	jsr $3e4d			jsr 	MInt32ShiftRight
.3d65	20 56 3e	jsr $3e56			jsr 	MInt32Zero 					; check if zero.
.3d68	08		php				php 								; save status bits
.3d69	ca		dex				dex 	 							; point back to 1st
.3d6a	ca		dex				dex
.3d6b	28		plp				plp 								; get status bits
.3d6c	d0 e6		bne $3d54			bne 	_I32Loop 					; if non-zero keep going.
.3d6e	60		rts				rts
.3d6f					MInt32CopyUp:
.3d6f	b5 98		lda $98,x			lda 	esInt0,x
.3d71	95 99		sta $99,x			sta 	esInt0+1,x
.3d73	b5 a0		lda $a0,x			lda 	esInt1,x
.3d75	95 a1		sta $a1,x			sta 	esInt1+1,x
.3d77	b5 a8		lda $a8,x			lda 	esInt2,x
.3d79	95 a9		sta $a9,x			sta 	esInt2+1,x
.3d7b	b5 b0		lda $b0,x			lda 	esInt3,x
.3d7d	95 b1		sta $b1,x			sta 	esInt3+1,x
.3d7f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d68					MCharCount:	.fill 	1						; count of converted characters
.3d80					MLInt32ToString:
.3d80	aa		tax				tax									; module passes stack in A, base in Y
.3d81	98		tya				tya
.3d82	20 87 3d	jsr $3d87			jsr 	MInt32ToString
.3d85	8a		txa				txa
.3d86	60		rts				rts
.3d87					MInt32ToString:
.3d87	48		pha				pha 								; save base
.3d88	85 32		sta $32				sta 	tempShort 					; save target base.
.3d8a	a9 00		lda #$00			lda 	#0
.3d8c	8d 68 0d	sta $0d68			sta 	MCharCount 					; clear character count to 0
.3d8f	5a		phy				phy
.3d90	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3d92	10 10		bpl $3da4			bpl 	_I32TSUnsigned
.3d94	48		pha				pha 								; save base on stack.
.3d95	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3d97	10 08		bpl $3da1			bpl 	_I32TSNoFlip
.3d99	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3d9b	20 d6 3d	jsr $3dd6			jsr 	MI32WriteCharacter
.3d9e	20 e9 3d	jsr $3de9			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3da1					_I32TSNoFlip:
.3da1	68		pla				pla 								; get the base back
.3da2	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3da4					_I32TSUnsigned:
.3da4	20 b1 3d	jsr $3db1			jsr 	MI32DivideWrite 			; recursive code to output string.
.3da7	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3da9	ad 68 0d	lda $0d68			lda 	MCharCount
.3dac	91 2a		sta ($2a),y			sta 	(temp0),y
.3dae	7a		ply				ply
.3daf	68		pla				pla
.3db0	60		rts				rts
.3db1					MI32DivideWrite:
.3db1	48		pha				pha 								; save the divisor/base
.3db2	e8		inx				inx 								; write in the dividing position.
.3db3	20 3e 3e	jsr $3e3e			jsr 	MInt32Set8Bit
.3db6	ca		dex				dex
.3db7	20 2e 3c	jsr $3c2e			jsr 	MInt32UDivide 				; divide number by base.
.3dba	68		pla				pla 								; get the base into Y
.3dbb	a8		tay				tay
.3dbc	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3dbe	48		pha				pha
.3dbf	20 56 3e	jsr $3e56			jsr 	MInt32Zero 					; is the result zero ?
.3dc2	f0 04		beq $3dc8			beq 	_I32NoRecurse 				; if so, don't recurse.
.3dc4	98		tya				tya 								; put base into A
.3dc5	20 b1 3d	jsr $3db1			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3dc8					_I32NoRecurse:
.3dc8	68		pla				pla 								; get the remainder back
.3dc9	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3dcb	90 02		bcc $3dcf			bcc 	_I32NotHex
.3dcd	69 06		adc #$06			adc 	#7-1
.3dcf					_I32NotHex:
.3dcf	18		clc				clc 								; make it ASCII
.3dd0	69 30		adc #$30			adc 	#48
.3dd2	20 d6 3d	jsr $3dd6			jsr 	MI32WriteCharacter 			; write the character out
.3dd5	60		rts				rts 								; and exit.
.3dd6					MI32WriteCharacter:
.3dd6	ee 68 0d	inc $0d68			inc 	MCharCount 					; bump count (space for leading count)
.3dd9	ac 68 0d	ldy $0d68			ldy 	MCharCount 					; get position
.3ddc	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3dde	c8		iny				iny
.3ddf	a9 00		lda #$00			lda 	#0
.3de1	91 2a		sta ($2a),y			sta 	(temp0),y
.3de3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d69					MSeed32:	.fill 	4							; random number seed.
.3de4					MInt32Absolute:
.3de4	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3de6	30 01		bmi $3de9			bmi 	MInt32Negate
.3de8	60		rts				rts
.3de9					MInt32Negate:
.3de9	38		sec				sec 								; subtract from zero.
.3dea	a9 00		lda #$00			lda 	#0
.3dec	f5 98		sbc $98,x			sbc 	esInt0,x
.3dee	95 98		sta $98,x			sta 	esInt0,x
.3df0	a9 00		lda #$00			lda 	#0
.3df2	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3df4	95 a0		sta $a0,x			sta 	esInt1,x
.3df6	a9 00		lda #$00			lda 	#0
.3df8	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3dfa	95 a8		sta $a8,x			sta 	esInt2,x
.3dfc	a9 00		lda #$00			lda 	#0
.3dfe	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3e00	95 b0		sta $b0,x			sta 	esInt3,x
.3e02	60		rts				rts
.3e03					MInt32Not:
.3e03	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3e05	49 ff		eor #$ff			eor 	#$FF
.3e07	95 98		sta $98,x			sta 	esInt0,x
.3e09	b5 a0		lda $a0,x			lda 	esInt1,x
.3e0b	49 ff		eor #$ff			eor 	#$FF
.3e0d	95 a0		sta $a0,x			sta 	esInt1,x
.3e0f	b5 a8		lda $a8,x			lda 	esInt2,x
.3e11	49 ff		eor #$ff			eor 	#$FF
.3e13	95 a8		sta $a8,x			sta 	esInt2,x
.3e15	b5 b0		lda $b0,x			lda 	esInt3,x
.3e17	49 ff		eor #$ff			eor 	#$FF
.3e19	95 b0		sta $b0,x			sta 	esInt3,x
.3e1b	60		rts				rts
.3e1c					MInt32Sign:
.3e1c	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3e1e	30 0b		bmi $3e2b			bmi 	MInt32True 					; if set return -1 (true)
.3e20	20 56 3e	jsr $3e56			jsr 	MInt32Zero 					; is it zero ?
.3e23	f0 0a		beq $3e2f			beq 	MInt32False 				; if zero return 0 (false)
.3e25	20 2f 3e	jsr $3e2f			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3e28	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3e2a	60		rts				rts
.3e2b					MInt32True:
.3e2b	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3e2d	d0 02		bne $3e31			bne 	MInt32WriteAll
.3e2f					MInt32False:
.3e2f	a9 00		lda #$00			lda 	#0
.3e31					MInt32WriteAll:
.3e31	95 98		sta $98,x			sta 	esInt0,x
.3e33					MInt32Write123:
.3e33	95 a0		sta $a0,x			sta 	esInt1,x
.3e35	95 a8		sta $a8,x			sta 	esInt2,x
.3e37	95 b0		sta $b0,x			sta 	esInt3,x
.3e39	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3e3b	95 90		sta $90,x			sta 	esType,x
.3e3d	60		rts				rts
.3e3e					MInt32Set8Bit:
.3e3e	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3e40	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3e42	f0 ef		beq $3e33			beq		MInt32Write123
.3e44					MInt32ShiftLeft:
.3e44	16 98		asl $98,x			asl 	esInt0,x
.3e46	36 a0		rol $a0,x			rol	 	esInt1,x
.3e48	36 a8		rol $a8,x			rol	 	esInt2,x
.3e4a	36 b0		rol $b0,x			rol	 	esInt3,x
.3e4c	60		rts				rts
.3e4d					MInt32ShiftRight:
.3e4d	56 b0		lsr $b0,x			lsr 	esInt3,x
.3e4f	76 a8		ror $a8,x			ror 	esInt2,x
.3e51	76 a0		ror $a0,x			ror 	esInt1,x
.3e53	76 98		ror $98,x			ror 	esInt0,x
.3e55	60		rts				rts
.3e56					MInt32Zero:
.3e56	b5 98		lda $98,x			lda 	esInt0,x
.3e58	15 a0		ora $a0,x			ora 	esInt1,x
.3e5a	15 a8		ora $a8,x			ora 	esInt2,x
.3e5c	15 b0		ora $b0,x			ora 	esInt3,x
.3e5e	60		rts				rts
.3e5f					MInt32Random:
.3e5f	5a		phy				phy
.3e60	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3e62	ad 69 0d	lda $0d69			lda 	MSeed32+0 					; check the seed isn't zero
.3e65	d0 03		bne $3e6a			bne 	_Random1
.3e67	a8		tay				tay 								; if so do it 256 times
.3e68	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3e6a					_Random1:
.3e6a	0a		asl a				asl 	a
.3e6b	2e 6a 0d	rol $0d6a			rol 	MSeed32+1
.3e6e	2e 6b 0d	rol $0d6b			rol 	MSeed32+2
.3e71	2e 6c 0d	rol $0d6c			rol 	MSeed32+3
.3e74	90 02		bcc $3e78			bcc 	_Random2
.3e76	49 c5		eor #$c5			eor 	#$C5
.3e78					_Random2:
.3e78	88		dey				dey
.3e79	d0 ef		bne $3e6a			bne 	_Random1
.3e7b	8d 69 0d	sta $0d69			sta 	MSeed32+0 					; copy the seed in.
.3e7e	95 98		sta $98,x			sta 	esInt0,x
.3e80	ad 6a 0d	lda $0d6a			lda 	MSeed32+1
.3e83	95 a0		sta $a0,x			sta 	esInt1,x
.3e85	ad 6b 0d	lda $0d6b			lda 	MSeed32+2
.3e88	95 a8		sta $a8,x			sta 	esInt2,x
.3e8a	ad 6c 0d	lda $0d6c			lda 	MSeed32+3
.3e8d	95 b0		sta $b0,x			sta 	esInt3,x
.3e8f	7a		ply				ply
.3e90	a9 00		lda #$00			lda 	#0
.3e92	95 90		sta $90,x			sta 	esType,x
.3e94	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3e95					CheckToken:
.3e95	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3e97	d0 02		bne $3e9b			bne 	_CTError
.3e99	c8		iny				iny
.3e9a	60		rts				rts
.3e9b					_CTError:
.3e9b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3e9d	20 09 15	jsr $1509		jsr	errorHandler
.3ea0					CheckRightParen:
.3ea0	b1 28		lda ($28),y			lda 	(codePtr),y
.3ea2	c8		iny				iny
.3ea3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3ea5	d0 01		bne $3ea8			bne 	_CRPError
.3ea7	60		rts				rts
.3ea8					_CRPError:
.3ea8	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3eaa	20 09 15	jsr $1509		jsr	errorHandler
.3ead					CheckComma:
.3ead	b1 28		lda ($28),y			lda 	(codePtr),y
.3eaf	c8		iny				iny
.3eb0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3eb2	d0 01		bne $3eb5			bne 	_CCError
.3eb4	60		rts				rts
.3eb5					_CCError:
.3eb5	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3eb7	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3eba					RSReset:
.3eba	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3ebc	85 37		sta $37				sta 	rsPointer
.3ebe	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3ec0	85 38		sta $38				sta 	1+(rsPointer)
.3ec2	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3ec4	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3ec7	60		rts				rts
.3ec8					RSClaim:
.3ec8	84 32		sty $32				sty 	tempShort 					; preserve Y
.3eca	48		pha				pha 								; save marker on stack.
.3ecb	8a		txa				txa 								; get bytes required.
.3ecc	38		sec				sec
.3ecd	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3ecf	65 37		adc $37				adc 	rsPointer
.3ed1	85 37		sta $37				sta 	rsPointer
.3ed3	a5 38		lda $38				lda 	rsPointer+1
.3ed5	69 ff		adc #$ff			adc 	#$FF
.3ed7	85 38		sta $38				sta 	rsPointer+1
.3ed9	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3edb	90 08		bcc $3ee5			bcc 	_RSCOverflow
.3edd	68		pla				pla 								; get marker back
.3ede	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3ee0	91 37		sta ($37),y			sta 	(rsPointer),y
.3ee2	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3ee4	60		rts				rts
.3ee5					_RSCOverflow:
.3ee5	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3ee7	20 09 15	jsr $1509		jsr	errorHandler
.3eea					RSFree:
.3eea	18		clc				clc
.3eeb	65 37		adc $37				adc 	rsPointer
.3eed	85 37		sta $37				sta 	rsPointer
.3eef	90 02		bcc $3ef3			bcc 	_RSFExit
.3ef1	e6 38		inc $38				inc 	rsPointer+1
.3ef3					_RSFExit:
.3ef3	60		rts				rts
.3ef4					RSSavePosition:
.3ef4	84 32		sty $32				sty 	tempShort 					; save Y position
.3ef6	a8		tay				tay 								; this is where we write it.
.3ef7	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3ef9	91 37		sta ($37),y			sta 	(rsPointer),y
.3efb	c8		iny				iny
.3efc	a5 29		lda $29				lda 	codePtr+1
.3efe	91 37		sta ($37),y			sta 	(rsPointer),y
.3f00	c8		iny				iny
.3f01	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3f03	91 37		sta ($37),y			sta 	(rsPointer),y
.3f05	a8		tay				tay 								; fix Y back again to original value
.3f06	60		rts				rts
.3f07					RSLoadPosition:
.3f07	a8		tay				tay
.3f08	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3f0a	85 28		sta $28				sta 	codePtr
.3f0c	c8		iny				iny
.3f0d	b1 37		lda ($37),y			lda 	(rsPointer),y
.3f0f	85 29		sta $29				sta 	codePtr+1
.3f11	c8		iny				iny
.3f12	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3f14	a8		tay				tay 								; to Y
.3f15	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3f16					WarmStart:
.3f16	a2 04		ldx #$04		ldx	#4
.3f18	20 bc 28	jsr $28bc		jsr	interactionHandler

;******  Return to file: main/main.asm

.3f1b					mainHandler:
.3f1b	7c 1e 3f	jmp ($3f1e,x)			jmp 	(mainVectors,x)
.3f1e					mainVectors:
>3f1e	3a 3f					.word _DummyControlHandler ; index 0
>3f20	ad 3e					.word CheckComma           ; index 2
>3f22	a0 3e					.word CheckRightParen      ; index 4
>3f24	a0 30					.word XCommandClear        ; index 6
>3f26	cb 37					.word LinkEvaluate         ; index 8
>3f28	d7 37					.word LinkEvaluateInteger  ; index 10
>3f2a	e3 37					.word LinkEvaluateSmallInt ; index 12
>3f2c	dd 37					.word LinkEvaluateString   ; index 14
>3f2e	d1 37					.word LinkEvaluateTerm     ; index 16
>3f30	80 3d					.word MLInt32ToString      ; index 18
>3f32	2d 32					.word Command_XNew         ; index 20
>3f34	3b 32					.word XCommand_Run         ; index 22
>3f36	47 32					.word Command_RunFrom      ; index 24
>3f38	9b 3c					.word LinkInt32FromString  ; index 26
.3f3a					_DummyControlHandler:
.3f3a	60		rts			rts

;******  Return to file: basic.asm

.3f3b					section_end_main:
.3f3b					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3f3b					StringChrs:
.3f3b	aa		tax				tax 								; set up stack
.3f3c	a9 02		lda #$02			lda 	#2
.3f3e	20 fa 3f	jsr $3ffa			jsr 	AllocateSoftString
.3f41	98		tya				tya
.3f42	20 1e 40	jsr $401e			jsr 	WriteSoftString
.3f45					StringUpdate:
.3f45	20 53 3f	jsr $3f53			jsr 	ReturnSoftString
.3f48	8a		txa				txa
.3f49	60		rts				rts
.3f4a					StringNull:
.3f4a	aa		tax				tax
.3f4b	a9 01		lda #$01			lda 	#1
.3f4d	20 fa 3f	jsr $3ffa			jsr 	AllocateSoftString
.3f50	4c 45 3f	jmp $3f45			jmp 	StringUpdate
.3f53					ReturnSoftString:
.3f53	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3f55	95 98		sta $98,x			sta 	esInt0,x
.3f57	a5 3a		lda $3a				lda 	softMemAlloc+1
.3f59	95 a0		sta $a0,x			sta 	esInt1,x
.3f5b	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3f5d	95 a8		sta $a8,x			sta 	esInt2,x
.3f5f	95 b0		sta $b0,x			sta 	esInt3,x
.3f61	a9 40		lda #$40			lda 	#$40 						; type string.
.3f63	95 90		sta $90,x			sta 	esType,x
.3f65	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3f66					STRCompare:
.3f66	48		pha				pha 								; save A
.3f67	aa		tax				tax 								; put stack pos in X
.3f68	5a		phy				phy
.3f69	20 9c 3f	jsr $3f9c			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3f6c	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3f6e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f70	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3f72	90 02		bcc $3f76			bcc 	_SCNotSmaller
.3f74	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f76					_SCNotSmaller:
.3f76	aa		tax				tax 								; put that in X. We compare this many chars first.
.3f77					_SCCompareLoop:
.3f77	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3f79	f0 0c		beq $3f87			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3f7b	ca		dex				dex 								; decrement chars to compare.
.3f7c	c8		iny				iny 								; move to next character
.3f7d	38		sec				sec 								; calculate s1[y]-s2[y]
.3f7e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f80	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3f82	d0 0a		bne $3f8e			bne 	_SCReturnResult 			; if different return sign of A
.3f84	4c 77 3f	jmp $3f77			jmp 	_SCCompareLoop
.3f87					_SCSameToEndShortest
.3f87	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3f89	38		sec				sec
.3f8a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f8c	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3f8e					_SCReturnResult:
.3f8e	08		php				php 								; set return to zero preserving PSW.
.3f8f	a2 00		ldx #$00			ldx 	#0
.3f91	28		plp				plp
.3f92	f0 05		beq $3f99			beq 	_SCExit 					; two values equal, then exit
.3f94	ca		dex				dex 								; X = $FF
.3f95	90 02		bcc $3f99			bcc 	_SCExit 					; if 1st < 2nd then -1
.3f97	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3f99					_SCExit:
.3f99	7a		ply				ply
.3f9a	68		pla				pla
.3f9b	60		rts				rts
.3f9c					CopyStringPair:
.3f9c	b5 99		lda $99,x			lda 	esInt0+1,x
.3f9e	85 2c		sta $2c				sta 	temp1
.3fa0	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3fa2	85 2d		sta $2d				sta 	temp1+1
.3fa4					CopyStringTop:
.3fa4	b5 98		lda $98,x			lda 	esInt0,x
.3fa6	85 2a		sta $2a				sta 	temp0
.3fa8	b5 a0		lda $a0,x			lda 	esInt1,x
.3faa	85 2b		sta $2b				sta 	temp0+1
.3fac	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3fad					StringConcat:
.3fad	aa		tax				tax									; stack pos in X
.3fae	5a		phy				phy
.3faf	20 9c 3f	jsr $3f9c			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3fb2	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3fb3	a0 00		ldy #$00			ldy 	#0
.3fb5	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fb7	71 2c		adc ($2c),y			adc 	(temp1),y
.3fb9	b0 1b		bcs $3fd6			bcs 	_SCError 					; just too many characters here.
.3fbb	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3fbd	b0 17		bcs $3fd6			bcs 	_SCError
.3fbf	20 fa 3f	jsr $3ffa			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3fc2	20 f1 3f	jsr $3ff1			jsr 	CopySoftToStack 			; copy that to the stack.
.3fc5	20 db 3f	jsr $3fdb			jsr 	SCCopyTemp0 				; copy temp0
.3fc8	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3fca	85 2a		sta $2a				sta 	temp0
.3fcc	a5 2d		lda $2d				lda 	temp1+1
.3fce	85 2b		sta $2b				sta 	temp0+1
.3fd0	20 db 3f	jsr $3fdb			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3fd3	7a		ply				ply
.3fd4	8a		txa				txa 								; and A
.3fd5	60		rts				rts
.3fd6					_SCError:
.3fd6	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3fd8	20 09 15	jsr $1509		jsr	errorHandler
.3fdb					SCCopyTemp0:
.3fdb	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3fdd	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fdf	85 2e		sta $2e				sta 	temp2
.3fe1					_SCCopyLoop:
.3fe1	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3fe3	f0 0b		beq $3ff0			beq 	_SCCopyExit
.3fe5	c6 2e		dec $2e				dec 	temp2
.3fe7	c8		iny				iny 								; get next char
.3fe8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fea	20 1e 40	jsr $401e			jsr 	WriteSoftString 			; write to soft string.
.3fed	4c e1 3f	jmp $3fe1			jmp 	_SCCopyLoop
.3ff0					_SCCopyExit:
.3ff0	60		rts				rts
.3ff1					CopySoftToStack:
.3ff1	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3ff3	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3ff5	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3ff7	95 a0		sta $a0,x			sta 	esInt1,x
.3ff9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3ffa					AllocateSoftString:
.3ffa	85 32		sta $32				sta 	tempShort 					; save count
.3ffc	5a		phy				phy
.3ffd	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3fff	d0 09		bne $400a			bne 	_ASSDone
.4001	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.4003	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.4005	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.4007	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.4008	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.400a					_ASSDone:
.400a	38		sec				sec 								; allocate downwards enough memory
.400b	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.400d	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.400f	85 39		sta $39				sta 	softMemAlloc
.4011	a5 3a		lda $3a				lda 	softMemAlloc+1
.4013	e9 00		sbc #$00			sbc 	#0
.4015	85 3a		sta $3a				sta 	softMemAlloc+1
.4017	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.4019	a8		tay				tay
.401a	91 39		sta ($39),y			sta 	(softMemAlloc),y
.401c	7a		ply				ply
.401d	60		rts				rts
.401e					WriteSoftString:
.401e	84 32		sty $32				sty 	tempShort 					; save Y
.4020	48		pha				pha 								; save character on stack
.4021	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.4023	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.4025	18		clc				clc
.4026	69 01		adc #$01			adc 	#1
.4028	91 39		sta ($39),y			sta 	(softMemAlloc),y
.402a	a8		tay				tay 								; offset in Y
.402b	68		pla				pla 								; get char and write.
.402c	91 39		sta ($39),y			sta 	(softMemAlloc),y
.402e	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.4030	60		rts				rts
.4031					StrClone:
.4031	aa		tax				tax 								; set up stack.
.4032	5a		phy				phy
.4033	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.4035	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.4037	18		clc				clc
.4038	69 01		adc #$01			adc 	#1
.403a	20 fa 3f	jsr $3ffa			jsr 	AllocateSoftString 			; allocate soft memory
.403d	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.403f	95 98		sta $98,x			sta 	esInt0,x
.4041	a5 3a		lda $3a				lda 	softMemAlloc+1
.4043	95 a0		sta $a0,x			sta 	esInt1,x
.4045	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.4047	95 a8		sta $a8,x			sta 	esInt2,x
.4049	95 b0		sta $b0,x			sta 	esInt3,x
.404b	a9 40		lda #$40			lda 	#$40 						; set type to string.
.404d	95 90		sta $90,x			sta 	esType,x
.404f	20 db 3f	jsr $3fdb			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.4052	7a		ply				ply
.4053	8a		txa				txa
.4054	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.4055					CaseString:
.4055	48		pha				pha 								; save A and copy to X
.4056	aa		tax				tax
.4057	5a		phy				phy
.4058	20 a4 3f	jsr $3fa4			jsr 	CopyStringTop 				; target string -> temp0
.405b	a0 00		ldy #$00			ldy 	#0
.405d	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.405f	18		clc				clc
.4060	69 01		adc #$01			adc 	#1 							; one more for length byte
.4062	20 fa 3f	jsr $3ffa			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.4065	20 f1 3f	jsr $3ff1			jsr 	CopySoftToStack 			; copy that to the stack.
.4068	a0 00		ldy #$00			ldy 	#0
.406a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.406c	aa		tax				tax
.406d					_CSCopy:
.406d	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.406f	f0 24		beq $4095			beq 	_CSExit
.4071	ca		dex				dex
.4072	c8		iny				iny
.4073	68		pla				pla 								; check direction
.4074	48		pha				pha
.4075	f0 0c		beq $4083			beq 	_CSUpper
.4077	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.4079	c9 41		cmp #$41			cmp 	#"A"
.407b	90 12		bcc $408f			bcc 	_CSWrite
.407d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.407f	b0 0e		bcs $408f			bcs 	_CSWrite
.4081	90 0a		bcc $408d			bcc 	_CSFlipWrite
.4083					_CSUpper:
.4083	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.4085	c9 61		cmp #$61			cmp 	#"a"
.4087	90 06		bcc $408f			bcc 	_CSWrite
.4089	c9 7b		cmp #$7b			cmp 	#"z"+1
.408b	b0 02		bcs $408f			bcs 	_CSWrite
.408d					_CSFlipWrite:
.408d	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.408f					_CSWrite:
.408f	20 1e 40	jsr $401e			jsr 	WriteSoftString 			; add to soft string.
.4092	4c 6d 40	jmp $406d			jmp 	_CSCopy
.4095					_CSExit:
.4095	7a		ply				ply
.4096	68		pla				pla
.4097	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.4098					StringSubstring:
.4098	48		pha				pha
.4099	aa		tax				tax 								; access stack.
.409a	5a		phy				phy
.409b	20 a4 3f	jsr $3fa4			jsr 	CopyStringTop 				; point temp0 to the string.
.409e	a0 00		ldy #$00			ldy 	#0 							; get length.
.40a0	b1 2a		lda ($2a),y			lda 	(temp0),Y
.40a2	85 2c		sta $2c				sta 	temp1
.40a4	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.40a6	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.40a8	f0 02		beq $40ac			beq 	_SSBOkay
.40aa	b0 2a		bcs $40d6			bcs 	_SSBReturnNull
.40ac					_SSBOkay:
.40ac	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.40ae	18		clc				clc
.40af	69 01		adc #$01			adc 	#1
.40b1	38		sec				sec
.40b2	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.40b4	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.40b6	90 02		bcc $40ba			bcc		_SSBTrunc
.40b8	b5 9a		lda $9a,x			lda 	esInt0+2,x
.40ba					_SSBTrunc:
.40ba	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.40bc	18		clc				clc
.40bd	69 01		adc #$01			adc 	#1 							; add 1
.40bf	20 fa 3f	jsr $3ffa			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.40c2	20 f1 3f	jsr $3ff1			jsr 	CopySoftToStack 			; copy that to the stack.
.40c5	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.40c7					_SSBCopyLoop:
.40c7	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.40c9	f0 0e		beq $40d9			beq 	_SSBExit
.40cb	c6 2d		dec $2d				dec 	temp1+1
.40cd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.40cf	20 1e 40	jsr $401e			jsr 	WriteSoftString
.40d2	c8		iny				iny
.40d3	4c c7 40	jmp $40c7			jmp 	_SSBCopyLoop
.40d6					_SSBReturnNull:
.40d6	20 dc 40	jsr $40dc			jsr 	ReturnNull
.40d9					_SSBExit:
.40d9	7a		ply				ply
.40da	68		pla				pla
.40db	60		rts				rts
.40dc					ReturnNull:
.40dc	a9 00		lda #$00			lda 	#0 							; clear null string
.40de	8d ce 0a	sta $0ace			sta 	NullString
.40e1	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.40e3	95 98		sta $98,x			sta 	esInt0,x
.40e5	a9 0a		lda #$0a			lda 	#NullString >> 8
.40e7	95 a0		sta $a0,x			sta 	esInt1,x
.40e9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d6d					srcStrLen:
>0d6d							.fill 	1
.40ea					StringWrite:
.40ea	aa		tax				tax
.40eb	48		pha				pha
.40ec	5a		phy				phy
.40ed	20 13 41	jsr $4113			jsr 	CheckOverwriteCurrent
.40f0	b0 0d		bcs $40ff			bcs		_SWCopyCurrent
.40f2	20 51 41	jsr $4151			jsr 	RequiresConcretion
.40f5	90 0e		bcc $4105			bcc 	_SWWriteReference
.40f7	20 b0 41	jsr $41b0			jsr 	CheckSpecialConcretion
.40fa	b0 09		bcs $4105			bcs 	_SWWriteReference
.40fc	20 65 41	jsr $4165			jsr 	AllocateHardMemory
.40ff					_SWCopyCurrent:
.40ff	20 96 41	jsr $4196			jsr 	CopyStringToHardMemory
.4102	4c 10 41	jmp $4110			jmp 	_SWExit
.4105					_SWWriteReference
.4105	a0 00		ldy #$00			ldy 	#0
.4107	a5 2a		lda $2a				lda 	temp0
.4109	91 2c		sta ($2c),y			sta 	(temp1),y
.410b	c8		iny				iny
.410c	a5 2b		lda $2b				lda 	temp0+1
.410e	91 2c		sta ($2c),y			sta 	(temp1),y
.4110					_SWExit:
.4110	7a		ply				ply
.4111	68		pla				pla
.4112	60		rts				rts
.4113					CheckOverwriteCurrent:
.4113	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.4115	b5 a1		lda $a1,x			lda 	esInt1+1,x
.4117	85 2b		sta $2b				sta 	temp0+1
.4119	b5 99		lda $99,x			lda 	esInt0+1,x
.411b	85 2a		sta $2a				sta 	temp0
.411d	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.411f	8d 6d 0d	sta $0d6d			sta 	srcStrLen
.4122	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.4124	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.4126	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4128	85 2d		sta $2d				sta 	temp1+1
.412a	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.412c	b1 2c		lda ($2c),y			lda 	(temp1),y
.412e	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.4130	90 1b		bcc $414d			bcc 	_COCFail 				; in hard memory.
.4132	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.4134	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.4136	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4138	85 2e		sta $2e				sta 	temp2
.413a	c8		iny				iny
.413b	b1 2c		lda ($2c),y			lda 	(temp1),y
.413d	e9 00		sbc #$00			sbc 	#0
.413f	85 2f		sta $2f				sta 	temp2+1
.4141	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.4143	b1 2e		lda ($2e),y			lda 	(temp2),y
.4145	38		sec				sec  							; maximum character capacity.
.4146	e9 02		sbc #$02			sbc 	#2
.4148	cd 6d 0d	cmp $0d6d			cmp 	srcStrLen 				; if >= the required length
.414b	b0 02		bcs $414f			bcs 	_COCCanReuse
.414d					_COCFail:
.414d	18		clc				clc
.414e	60		rts				rts
.414f					_COCCanReuse:
.414f	38		sec				sec
.4150	60		rts				rts
.4151					RequiresConcretion:
.4151	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.4153	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.4155	b0 0a		bcs $4161			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.4157	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.4159	f0 08		beq $4163			beq 	_RCFail 				; if not, this cannot be soft memory.
.415b	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.415d	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.415f	90 02		bcc $4163			bcc 	_RCFail 				; so concreting
.4161					_RCSucceed:
.4161	38		sec				sec
.4162	60		rts				rts
.4163					_RCFail:
.4163	18		clc				clc
.4164	60		rts				rts
.4165					AllocateHardMemory:
.4165	5a		phy				phy
.4166	ad 6d 0d	lda $0d6d			lda 	srcStrLen 				; characters in string
.4169	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.416b	b0 04		bcs $4171			bcs 	_AHMSetMax 				; max out that amount.
.416d	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.416f	90 02		bcc $4173			bcc 	_AHMIsOkay
.4171					_AHMSetMax:
.4171	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.4173					_AHMIsOkay:
.4173	48		pha				pha	 							; save size to be allocated
.4174	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.4176	38		sec				sec  							; and copy result to TOS as target address.
.4177	65 33		adc $33				adc 	highMemory
.4179	85 33		sta $33				sta 	highMemory
.417b	a5 34		lda $34				lda 	highMemory+1
.417d	69 ff		adc #$ff			adc 	#$FF
.417f	85 34		sta $34				sta 	highMemory+1
.4181	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.4183	68		pla				pla 							; get the total size of the storage block
.4184	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.4186	18		clc				clc
.4187	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.4189	69 01		adc #$01			adc 	#1
.418b	91 2c		sta ($2c),y			sta 	(temp1),y
.418d	a5 34		lda $34				lda 	highMemory+1
.418f	69 00		adc #$00			adc 	#0
.4191	c8		iny				iny
.4192	91 2c		sta ($2c),y			sta 	(temp1),y
.4194	7a		ply				ply
.4195	60		rts				rts
.4196					CopyStringToHardMemory:
.4196	5a		phy				phy
.4197	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.4199	b1 2c		lda ($2c),y			lda 	(temp1),y
.419b	85 2e		sta $2e				sta 	temp2
.419d	c8		iny				iny
.419e	b1 2c		lda ($2c),y			lda 	(temp1),y
.41a0	85 2f		sta $2f				sta 	temp2+1
.41a2	ac 6d 0d	ldy $0d6d			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.41a5					_CSTHMLoop:
.41a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.41a7	91 2e		sta ($2e),y			sta 	(temp2),y
.41a9	88		dey				dey
.41aa	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.41ac	d0 f7		bne $41a5			bne 	_CSTHMLoop
.41ae	7a		ply				ply
.41af	60		rts				rts
.41b0					CheckSpecialConcretion:
.41b0	ad 6d 0d	lda $0d6d			lda 	srcStrLen 				; check string is null e.g. length = 0
.41b3	f0 02		beq $41b7			beq 	_CSCNullString
.41b5	18		clc				clc
.41b6	60		rts				rts
.41b7					_CSCNullString:
.41b7	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.41b9	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.41bc	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.41be	85 2a		sta $2a				sta 	temp0
.41c0	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.41c2	85 2b		sta $2b				sta 	1+(temp0)
.41c4	38		sec				sec
.41c5	60		rts				rts

;******  Return to file: string/string.asm

.41c6					stringHandler:
.41c6	7c c9 41	jmp ($41c9,x)			jmp 	(stringVectors,x)
.41c9					stringVectors:
>41c9	db 41					.word _DummyControlHandler ; index 0
>41cb	3b 3f					.word StringChrs           ; index 2
>41cd	31 40					.word StrClone             ; index 4
>41cf	ad 3f					.word StringConcat         ; index 6
>41d1	4a 3f					.word StringNull           ; index 8
>41d3	66 3f					.word STRCompare           ; index 10
>41d5	55 40					.word CaseString           ; index 12
>41d7	98 40					.word StringSubstring      ; index 14
>41d9	ea 40					.word StringWrite          ; index 16
.41db					_DummyControlHandler:
.41db	60		rts			rts

;******  Return to file: basic.asm

.41dc					section_end_string:
.41dc					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d6e					deTokeniseVector:
>0d6e							.fill 	2
.0d70					lastCharacterClass:
>0d70							.fill 	1
.0d71					indent:
>0d71							.fill 	1
.41dc					ListLine:
.41dc	48		pha				pha								; enter here to list to console. sets the output vector
.41dd	a9 0b		lda #$0b			lda 	#(deTokenPrint) & $FF
.41df	8d 6e 0d	sta $0d6e			sta 	deTokeniseVector
.41e2	a9 43		lda #$43			lda 	#(deTokenPrint) >> 8
.41e4	8d 6f 0d	sta $0d6f			sta 	1+(deTokeniseVector)
.41e7	68		pla				pla
.41e8					Detokenise:
.41e8	18		clc				clc 							; space required for line number.
.41e9	69 06		adc #$06			adc 	#6
.41eb	8d 71 0d	sta $0d71			sta 	indent
.41ee	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.41f0	8d 70 0d	sta $0d70			sta 	lastCharacterClass
.41f3	a2 02		ldx #$02			ldx 	#2
.41f5	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.41f7	95 a8		sta $a8,x			sta 	esInt2,x
.41f9	95 b0		sta $b0,x			sta 	esInt3,x
.41fb	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.41fd	b1 28		lda ($28),y			lda 	(codePtr),y
.41ff	95 98		sta $98,x			sta 	esInt0,x
.4201	c8		iny				iny
.4202	b1 28		lda ($28),y			lda 	(codePtr),y
.4204	95 a0		sta $a0,x			sta 	esInt1,x
.4206	a9 84		lda #$84			lda 	#LTYLineNumber
.4208	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.420b	a9 0a		lda #$0a			lda 	#10 					; base 10
.420d	20 b1 42	jsr $42b1			jsr 	DTPrintInteger 			; print as integer.
.4210	a0 00		ldy #$00			ldy 	#0 						; get length
.4212	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.4214	aa		tax				tax
.4215					_DTPadOut:
.4215	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4217	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.421a	e8		inx				inx
.421b	ec 71 0d	cpx $0d71			cpx 	indent
.421e	d0 f5		bne $4215			bne 	_DTPadOut
.4220	a0 03		ldy #$03			ldy 	#3 						; start position.
.4222					_DTListLoop:
.4222	b1 28		lda ($28),y			lda 	(codePtr),y
.4224	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.4226	f0 5c		beq $4284			beq 	_DTIsString
.4228	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.422a	f0 54		beq $4280			beq 	_DTIsFloat
.422c	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.422e	f0 16		beq $4246			beq 	_DTHexConstant
.4230	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.4232	d0 06		bne $423a			bne 	_DTNotEnd
.4234	a9 ff		lda #$ff			lda 	#255 					; print CR
.4236	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.4239	60		rts				rts
.423a					_DTNotEnd:
.423a	c9 00		cmp #$00			cmp 	#0
.423c	30 36		bmi $4274			bmi 	_DTIsToken
.423e	c9 40		cmp #$40			cmp 	#$40
.4240	90 38		bcc $427a			bcc 	_DTIsIdentifier
.4242	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.4244	d0 0d		bne $4253			bne 	_DTConstant
.4246					_DTHexConstant:
.4246	a9 26		lda #$26			lda 	#"&"
.4248	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.424b	c8		iny				iny
.424c	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.424e	20 27 43	jsr $4327			jsr 	DTSwitchMode
.4251	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.4253					_DTConstant:
.4253	48		pha				pha
.4254	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.4256	20 27 43	jsr $4327			jsr 	DTSwitchMode
.4259	a9 86		lda #$86			lda 	#LTYConstant
.425b	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.425e	a2 02		ldx #$02			ldx 	#2 						; get its value
.4260	8a		txa				txa
.4261	a2 10		ldx #$10		ldx	#16
.4263	20 1b 3f	jsr $3f1b		jsr	mainHandler
.4266	aa		tax				tax
.4267	68		pla				pla 							; get base back
.4268	85 32		sta $32				sta 	tempShort
.426a	5a		phy				phy
.426b	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.426d	20 b1 42	jsr $42b1			jsr 	DTPrintInteger
.4270	7a		ply				ply
.4271	4c 22 42	jmp $4222			jmp 	_DTListLoop
.4274					_DTIsToken:
.4274	20 80 43	jsr $4380			jsr 	DTDecodeToken
.4277	4c 22 42	jmp $4222			jmp 	_DTListLoop
.427a					_DTIsIdentifier:
.427a	20 39 43	jsr $4339			jsr 	DTIdentifier
.427d	4c 22 42	jmp $4222			jmp 	_DTListLoop
.4280					_DTIsFloat:
>4280	db						.byte 	$DB
.4281	4c 80 42	jmp $4280			jmp 	_DTIsFloat
.4284					_DTIsString:
.4284	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4286	20 27 43	jsr $4327			jsr 	DTSwitchMode
.4289	a9 81		lda #$81			lda 	#LTYString
.428b	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.428e	a9 22		lda #$22			lda 	#'"'						; open quote
.4290	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.4293	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.4295	8a		txa				txa
.4296	a2 10		ldx #$10		ldx	#16
.4298	20 1b 3f	jsr $3f1b		jsr	mainHandler
.429b	aa		tax				tax
.429c	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.429e	85 2a		sta $2a				sta 	temp0
.42a0	b5 a0		lda $a0,x			lda 	esInt1,x
.42a2	85 2b		sta $2b				sta 	temp0+1
.42a4	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.42a6	20 c2 42	jsr $42c2			jsr 	DTPrintLengthPrefix
.42a9	a9 22		lda #$22			lda 	#'"'
.42ab	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.42ae	4c 22 42	jmp $4222			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d72					tPrintCount:
>0d72							.fill 	1
.42b1					DTPrintInteger:
.42b1	48		pha				pha									; save base
.42b2	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.42b4	85 2a		sta $2a				sta 	temp0
.42b6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.42b8	85 2b		sta $2b				sta 	1+(temp0)
.42ba	7a		ply				ply
.42bb	8a		txa				txa
.42bc	a2 12		ldx #$12		ldx	#18
.42be	20 1b 3f	jsr $3f1b		jsr	mainHandler
.42c1	aa		tax				tax 								; then drop through here.
.42c2					DTPrintLengthPrefix:
.42c2	aa		tax				tax 								; A = 0 = don't case convert.
.42c3	5a		phy				phy
.42c4	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.42c6	b1 2a		lda ($2a),y			lda 	(temp0),y
.42c8	8d 72 0d	sta $0d72			sta 	tPrintCount
.42cb	f0 1b		beq $42e8			beq 	_DTPLPExit 					; empty string
.42cd					_DTPLPLoop:
.42cd	c8		iny				iny 								; get next.
.42ce	b1 2a		lda ($2a),y			lda 	(temp0),y
.42d0	29 7f		and #$7f			and 	#$7F
.42d2	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.42d4	f0 0a		beq $42e0			beq 	_DTPLPNoCase
.42d6	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.42d8	90 06		bcc $42e0			bcc 	_DTPLPNoCase
.42da	c9 5b		cmp #$5b			cmp 	#"Z"+1
.42dc	b0 02		bcs $42e0			bcs 	_DTPLPNoCase
.42de	49 20		eor #$20			eor 	#"A"^"a"
.42e0					_DTPLPNoCase
.42e0	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter 		; call handler
.42e3	ce 72 0d	dec $0d72			dec 	tPrintCount 				; do all the characters
.42e6	d0 e5		bne $42cd			bne 	_DTPLPLoop
.42e8					_DTPLPExit:
.42e8	7a		ply				ply
.42e9	60		rts				rts
.42ea					ListOutputCharacter:
.42ea	85 32		sta $32				sta 	tempShort
.42ec	48		pha				pha
.42ed	da		phx				phx
.42ee	5a		phy				phy
.42ef	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.42f1	c9 20		cmp #$20			cmp 	#32
.42f3	b0 0c		bcs $4301			bcs		_LOCHiBit
.42f5	09 40		ora #$40			ora 	#64 						; conversion
.42f7	c9 40		cmp #$40			cmp 	#64							; make l/c
.42f9	f0 06		beq $4301			beq 	_LOCHiBit
.42fb	c9 5b		cmp #$5b			cmp 	#65+26
.42fd	b0 02		bcs $4301			bcs 	_LOCHiBit
.42ff	69 20		adc #$20			adc 	#32
.4301					_LOCHiBit:
.4301	20 08 43	jsr $4308			jsr 	_LOCCallVector				; call o/p handler routine
.4304	7a		ply				ply
.4305	fa		plx				plx
.4306	68		pla				pla
.4307					_LOCExit:
.4307	60		rts				rts
.4308					_LOCCallVector:
.4308	6c 6e 0d	jmp ($0d6e)			jmp 	(deTokeniseVector)
.430b					deTokenPrint:
.430b	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.430d	30 06		bmi $4315			bmi 	_dtpInk
.430f	a2 16		ldx #$16		ldx	#22
.4311	20 e7 14	jsr $14e7		jsr	deviceHandler
.4314	60		rts				rts
.4315	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4317	f0 08		beq $4321			beq 	_dtpCR						; except $FF => CRLF
.4319	29 07		and #$07			and 	#7
.431b	a2 08		ldx #$08		ldx	#8
.431d	20 e7 14	jsr $14e7		jsr	deviceHandler
.4320	60		rts				rts
.4321					_dtpCR:
.4321	a2 06		ldx #$06		ldx	#6
.4323	20 e7 14	jsr $14e7		jsr	deviceHandler
.4326	60		rts				rts
.4327					DTSwitchMode:
.4327	cd 70 0d	cmp $0d70			cmp 	LastCharacterClass 			; if changed, update character class
.432a	f0 04		beq $4330			beq 	_DTSMNoChange
.432c	8d 70 0d	sta $0d70			sta 	LastCharacterClass
.432f					_DTSMExit:
.432f	60		rts				rts
.4330					_DTSMNoChange:
.4330	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.4332	f0 fb		beq $432f			beq 	_DTSMExit 					; need a space.
.4334	a9 20		lda #$20			lda 	#" "
.4336	4c ea 42	jmp $42ea			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4339					DTIdentifier:
.4339	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.433b	20 27 43	jsr $4327			jsr 	DTSwitchMode
.433e	a9 87		lda #$87			lda 	#LTYIdentifier
.4340	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.4343					_DTILoop:
.4343	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.4345	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4347	d0 02		bne $434b			bne 	_DTINotUS
.4349	a9 5f		lda #$5f			lda 	#"_"
.434b					_DTINotUS:
.434b	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.434e	c8		iny				iny
.434f	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.4351	c9 3a		cmp #$3a			cmp 	#$3A
.4353	90 ee		bcc $4343			bcc 	_DTILoop
.4355	c8		iny				iny
.4356	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4358	f0 25		beq $437f			beq 	_DTIExit 					; no postfix.
.435a	48		pha				pha
.435b	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.435d	8d 70 0d	sta $0d70			sta 	LastCharacterClass
.4360	a9 82		lda #$82			lda 	#LTYPunctuation
.4362	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.4365	68		pla				pla
.4366	c9 3b		cmp #$3b			cmp 	#$3B
.4368	f0 10		beq $437a			beq 	_DTIArray
.436a	4a		lsr a				lsr 	a 							; array flag in C
.436b	08		php				php
.436c	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.436e	f0 02		beq $4372			beq 	_DTIDollar
.4370	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.4372					_DTIDollar:
.4372	49 24		eor #$24			eor 	#"$"
.4374	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.4377	28		plp				plp
.4378	90 05		bcc $437f			bcc 	_DTIExit
.437a					_DTIArray:
.437a	a9 28		lda #$28			lda 	#"("
.437c	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.437f					_DTIExit:
.437f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4380					DTDecodeToken:
.4380	a2 00		ldx #$00			ldx 	#0 							; table number to use
.4382	b1 28		lda ($28),y			lda 	(codePtr),y
.4384	c9 84		cmp #$84			cmp 	#$84
.4386	b0 05		bcs $438d			bcs 	_DTNotShift
.4388	29 03		and #$03			and 	#3 							; get the shift 1..3
.438a	0a		asl a				asl 	a 							; put 2 x in X
.438b	aa		tax				tax
.438c	c8		iny				iny
.438d					_DTNotShift:
.438d	bd 83 46	lda $4683,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.4390	85 2a		sta $2a				sta 	temp0 						; point into temp0
.4392	bd 84 46	lda $4684,x			lda 	TokenTableAddress+1,x
.4395	85 2b		sta $2b				sta 	temp0+1
.4397	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.4399	c8		iny				iny 								; consume it.
.439a	aa		tax				tax
.439b	5a		phy				phy
.439c					_DTFindText:
.439c	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.439e	f0 11		beq $43b1			beq 	_DTFoundText
.43a0	ca		dex				dex
.43a1	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.43a3	38		sec				sec
.43a4	b1 2a		lda ($2a),y			lda 	(temp0),y
.43a6	65 2a		adc $2a				adc 	temp0
.43a8	85 2a		sta $2a				sta 	temp0
.43aa	90 f0		bcc $439c			bcc 	_DTFindText
.43ac	e6 2b		inc $2b				inc 	temp0+1
.43ae	4c 9c 43	jmp $439c			jmp 	_DTFindText
.43b1					_DTFoundText:
.43b1	a0 01		ldy #$01			ldy 	#1 							; get first character
.43b3	b1 2a		lda ($2a),y			lda 	(temp0),y
.43b5	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.43b7	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.43b9	90 11		bcc $43cc			bcc 	_DTIsPunctuation
.43bb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43bd	b0 0d		bcs $43cc			bcs 	_DTIsPunctuation
.43bf	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.43c1	20 27 43	jsr $4327			jsr 	DTSwitchMode
.43c4	a9 83		lda #$83			lda 	#LTYKeyword
.43c6	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.43c9	4c d6 43	jmp $43d6			jmp 	_DTPrint
.43cc					_DTIsPunctuation:
.43cc	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.43ce	20 27 43	jsr $4327			jsr 	DTSwitchMode
.43d1	a9 82		lda #$82			lda 	#LTYPunctuation
.43d3	20 ea 42	jsr $42ea			jsr 	ListOutputCharacter
.43d6					_DTPrint:
.43d6	a9 01		lda #$01			lda 	#1 							; fix case.
.43d8	20 c2 42	jsr $42c2			jsr 	DTPrintLengthPrefix 		; print it out.
.43db	a0 00		ldy #$00			ldy 	#0
.43dd	b1 2a		lda ($2a),y			lda 	(temp0),y
.43df	a8		tay				tay
.43e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.43e2	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.43e4	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.43e6	90 04		bcc $43ec			bcc 	_DTIsNowPunctuation
.43e8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43ea	90 05		bcc $43f1			bcc 	_DTPExit
.43ec					_DTIsNowPunctuation:
.43ec	a9 01		lda #$01			lda 	#1
.43ee	8d 70 0d	sta $0d70			sta		LastCharacterClass
.43f1					_DTPExit:
.43f1	7a		ply				ply
.43f2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d73					currentSet:
>0d73							.fill 	1
.43f3					TokenSearch:
.43f3	da		phx				phx
.43f4	5a		phy				phy
.43f5	a9 00		lda #$00			lda 	#0
.43f7	8d 73 0d	sta $0d73			sta 	currentSet
.43fa					_TSLoop:
.43fa	ad 73 0d	lda $0d73			lda 	currentSet 					; 2 x currentset in X
.43fd	0a		asl a				asl 	a
.43fe	aa		tax				tax
.43ff	bd 83 46	lda $4683,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.4402	85 2a		sta $2a				sta 	temp0
.4404	bd 84 46	lda $4684,x			lda 	TokenTableAddress+1,x
.4407	85 2b		sta $2b				sta 	temp0+1
.4409	20 2e 44	jsr $442e			jsr 	TokenSearchOne 				; search one table
.440c	b0 0d		bcs $441b			bcs 	_TSFound 					; found a token.
.440e	ee 73 0d	inc $0d73			inc 	currentSet 					; next set
.4411	ad 73 0d	lda $0d73			lda 	currentSet
.4414	c9 04		cmp #$04			cmp 	#4
.4416	d0 e2		bne $43fa			bne 	_TSLoop 					; back if not done all four.
.4418	18		clc				clc 								; clear carry and exit
.4419	90 10		bcc $442b			bcc 	_TSExit
.441b					_TSFound:
.441b	48		pha				pha 								; save token
.441c	ad 73 0d	lda $0d73			lda 	currentSet					; if set zero no shift
.441f	f0 05		beq $4426			beq 	_TSNoShift
.4421	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.4423	20 df 44	jsr $44df			jsr 	TokenWrite
.4426					_TSNoShift:
.4426	68		pla				pla 								; get token back
.4427	20 df 44	jsr $44df			jsr 	TokenWrite 					; write it
.442a	38		sec				sec 								; carry set indicating success
.442b					_TSExit:
.442b	7a		ply				ply
.442c	fa		plx				plx
.442d	60		rts				rts
.442e					TokenSearchOne:
.442e	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.4430					_TSOLoop:
.4430	a0 00		ldy #$00			ldy 	#0
.4432	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4434	f0 26		beq $445c			beq 	_TSOFail 					; if zero, end of table
.4436	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4439	f0 11		beq $444c			beq 	_TSOCheckText
.443b					_TSONext:
.443b	e8		inx				inx 								; bump token
.443c	a0 00		ldy #$00			ldy 	#0							; get length
.443e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4440	38		sec				sec
.4441	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4443	85 2a		sta $2a				sta 	temp0
.4445	90 e9		bcc $4430			bcc 	_TSOLoop
.4447	e6 2b		inc $2b				inc 	temp0+1
.4449	4c 30 44	jmp $4430			jmp 	_TSOLoop
.444c					_TSOCheckText:
.444c	a8		tay				tay 								; compare length downto 1.
.444d					_TSOCheckLoop:
.444d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.444f	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4452	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4454	d0 e5		bne $443b			bne 	_TSONext 					; different goto next.
.4456	88		dey				dey 								; do all
.4457	d0 f4		bne $444d			bne 	_TSOCheckLoop
.4459	8a		txa				txa 								; return token in A and carry set
.445a	38		sec				sec
.445b	60		rts				rts
.445c					_TSOFail:
.445c	18		clc				clc
.445d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.445e					TokTest:
.445e	a2 ff		ldx #$ff				ldx 	#$FF
.4460	9a		txs					txs
.4461	a9 7e		lda #$7e			lda 	#(TokenText1) & $FF
.4463	85 28		sta $28				sta 	codePtr
.4465	a9 44		lda #$44			lda 	#(TokenText1) >> 8
.4467	85 29		sta $29				sta 	1+(codePtr)
.4469	20 7e 44	jsr $447e				jsr 	Tokenise
.446c	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.446e	bd 7e 44	lda $447e,x	_TokCheck:	lda 	TokenBytes1,x
.4471	dd 77 0d	cmp $0d77,x				cmp 	tokenBuffer,x
.4474	d0 fe		bne $4474	_TokFail:	bne 	_TokFail	 		; error.
.4476	e8		inx					inx
.4477	c9 80		cmp #$80				cmp 	#$80
.4479	d0 f3		bne $446e				bne 	_TokCheck
.447b	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.447e					TokenText1:
.447e					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d74					tokenHeader:
>0d74							.fill 	3
.0d77					tokenBuffer:
>0d77							.fill 	256
.0e77					tokenBufferIndex:
>0e77							.fill 	1
.447e					Tokenise:
.447e	20 f6 44	jsr $44f6			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.4481					TokeniseASCIIZ:
.4481	20 07 45	jsr $4507			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4484	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4486	8d 77 0e	sta $0e77			sta 	tokenBufferIndex
.4489	a8		tay				tay 								; start pointer
.448a	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.448c	8d 77 0d	sta $0d77			sta 	tokenBuffer
.448f					_TokLoop:
.448f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4491	f0 46		beq $44d9			beq 	_TokExit 					; if zero, then exit.
.4493	c8		iny				iny 								; skip over spaces.
.4494	c9 20		cmp #$20			cmp 	#" "
.4496	f0 f7		beq $448f			beq 	_TokLoop
.4498	88		dey				dey 								; point back to character.
.4499	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.449b	f0 18		beq $44b5			beq 	_TokHexConst
.449d	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.449f	f0 23		beq $44c4			beq 	_TokQString
.44a1	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.44a3	b0 26		bcs $44cb			bcs 	_TokPunctuation
.44a5	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.44a7	b0 29		bcs $44d2			bcs 	_TokIdentifier
.44a9	c9 3a		cmp #$3a			cmp 	#"9"+1
.44ab	b0 1e		bcs $44cb			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.44ad	c9 30		cmp #$30			cmp 	#"0"
.44af	90 1a		bcc $44cb			bcc 	_TokPunctuation 			; < 0, punctuation.
.44b1	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.44b3	d0 08		bne $44bd			bne 	_TokConst
.44b5					_TokHexConst:
.44b5	c8		iny				iny									; consume token.
.44b6	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.44b8	20 df 44	jsr $44df			jsr 	TokenWrite
.44bb	a9 10		lda #$10			lda 	#16
.44bd					_TokConst:
.44bd	20 c3 45	jsr $45c3			jsr 	TokeniseInteger
.44c0	b0 cd		bcs $448f			bcs 	_TokLoop
.44c2	90 18		bcc $44dc			bcc 	_TokFail
.44c4					_TokQString:
.44c4	20 57 46	jsr $4657			jsr 	TokeniseString
.44c7	b0 c6		bcs $448f			bcs 	_TokLoop
.44c9	90 11		bcc $44dc			bcc 	_TokFail
.44cb					_TokPunctuation:
.44cb	20 36 46	jsr $4636			jsr 	TokenisePunctuation
.44ce	b0 bf		bcs $448f			bcs 	_TokLoop
.44d0	90 0a		bcc $44dc			bcc 	_TokFail
.44d2					_TokIdentifier:
.44d2	20 36 45	jsr $4536			jsr 	TokeniseIdentifier
.44d5	b0 b8		bcs $448f			bcs 	_TokLoop
.44d7	90 03		bcc $44dc			bcc 	_TokFail
.44d9					_TokExit:
.44d9	a9 01		lda #$01			lda 	#1
.44db	60		rts				rts
.44dc					_TokFail:
.44dc	a9 00		lda #$00			lda 	#0
.44de	60		rts				rts
.44df					TokenWrite:
.44df	85 32		sta $32				sta 	tempShort 					; save XA
.44e1	48		pha				pha
.44e2	da		phx				phx
.44e3	a5 32		lda $32				lda 	tempShort
.44e5	ae 77 0e	ldx $0e77			ldx 	tokenBufferIndex 			; geet index
.44e8	9d 77 0d	sta $0d77,x			sta 	tokenBuffer,x 				; write byte to buffer
.44eb	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.44ed	9d 78 0d	sta $0d78,x			sta 	tokenBuffer+1,x
.44f0	ee 77 0e	inc $0e77			inc 	tokenBufferIndex 			; bump index
.44f3	fa		plx				plx
.44f4	68		pla				pla
.44f5	60		rts				rts
.44f6					TokeniseMakeASCIIZ:
.44f6	a0 00		ldy #$00			ldy 	#0							; get length of string.
.44f8	b1 28		lda ($28),y			lda 	(codePtr),y
.44fa	a8		tay				tay
.44fb	c8		iny				iny 								; +1, the NULL goes here.
.44fc	a9 00		lda #$00			lda 	#0
.44fe	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4500	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4502	d0 02		bne $4506			bne 	_TMKAExit
.4504	e6 29		inc $29				inc 	codePtr+1
.4506					_TMKAExit:
.4506	60		rts				rts
.4507					TokeniseFixCase:
.4507	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4509	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.450b					_TFCFlipQ:
.450b	8a		txa				txa
.450c	49 01		eor #$01			eor 	#1
.450e	aa		tax				tax
.450f					_TFCLoop:
.450f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4511	f0 22		beq $4535			beq 	_TFCExit 					; if zero exit.
.4513	c9 20		cmp #$20			cmp 	#32 						; if control
.4515	90 1a		bcc $4531			bcc 	_TFCControl
.4517	c8		iny				iny 								; preconsume
.4518	c9 22		cmp #$22			cmp 	#'"'
.451a	f0 ef		beq $450b			beq 	_TFCFlipQ
.451c	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.451e	90 ef		bcc $450f			bcc 	_TFCLoop
.4520	c9 7b		cmp #$7b			cmp 	#"z"+1
.4522	b0 eb		bcs $450f			bcs 	_TFCLoop
.4524	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4526	d0 e7		bne $450f			bne 	_TFCLoop
.4528	88		dey				dey
.4529	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.452b					_TFCWrite:
.452b	91 28		sta ($28),y			sta 	(codePtr),y
.452d	c8		iny				iny
.452e	4c 0f 45	jmp $450f			jmp 	_TFCLoop
.4531					_TFCControl:
.4531	a9 20		lda #$20			lda 	#" "
.4533	d0 f6		bne $452b			bne 	_TFCWrite
.4535					_TFCExit:
.4535	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4536					TokeniseIdentifier:
.4536	a2 00		ldx #$00			ldx 	#0
.4538					_TICopyID:
.4538	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.453a	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.453c	f0 16		beq $4554			beq 	_TICopyUnderscore
.453e	c9 2e		cmp #$2e			cmp 	#"."
.4540	f0 14		beq $4556			beq 	_TICopyIn
.4542	c9 30		cmp #$30			cmp 	#"0"
.4544	90 1b		bcc $4561			bcc 	_TIEndCopy
.4546	c9 3a		cmp #$3a			cmp 	#"9"+1
.4548	90 0c		bcc $4556			bcc 	_TICopyIn
.454a	c9 41		cmp #$41			cmp 	#"A"
.454c	90 13		bcc $4561			bcc 	_TIEndCopy
.454e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4550	b0 0f		bcs $4561			bcs		_TIEndCopy
.4552	90 02		bcc $4556			bcc 	_TICopyIn
.4554					_TICopyUnderScore:
.4554	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4556					_TICopyIn:
.4556	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4557	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.455a	8e cf 0a	stx $0acf			stx 	convertBuffer
.455d	c8		iny				iny 								; next character
.455e	4c 38 45	jmp $4538			jmp 	_TICopyID 					; loop round
.4561					_TIEndCopy:
.4561	a9 24		lda #$24			lda 	#"$"
.4563	20 b6 45	jsr $45b6			jsr 	TIDCheckCopy
.4566	a9 23		lda #$23			lda 	#"#"
.4568	20 b6 45	jsr $45b6			jsr 	TIDCheckCopy
.456b	a9 28		lda #$28			lda 	#"("
.456d	20 b6 45	jsr $45b6			jsr 	TIDCheckCopy
.4570	20 f3 43	jsr $43f3			jsr 	TokenSearch 				; is it a token
.4573	b0 3f		bcs $45b4			bcs 	_TIExit 					; if so, then exit.
.4575	5a		phy				phy
.4576	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4578	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.457b	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.457e	c9 28		cmp #$28			cmp 	#"("
.4580	d0 02		bne $4584			bne 	_TINotArray
.4582	ca		dex				dex 								; yes, remove it and convert to array.
.4583	c8		iny				iny
.4584					_TINotArray:
.4584	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4587	c9 24		cmp #$24			cmp 	#"$"
.4589	d0 03		bne $458e			bne 	_TINotString
.458b	ca		dex				dex
.458c	c8		iny				iny
.458d	c8		iny				iny
.458e					_TINotString:
.458e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4591	c9 23		cmp #$23			cmp 	#"#"
.4593	d0 05		bne $459a			bne 	_TINotFloat
.4595	ca		dex				dex
.4596	c8		iny				iny
.4597	c8		iny				iny
.4598	c8		iny				iny
.4599	c8		iny				iny
.459a					_TINotFloat:
.459a	e8		inx				inx 								; write end marker for identifier.
.459b	98		tya				tya
.459c	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.459f	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.45a2	a2 01		ldx #$01			ldx 	#1
.45a4					_TIOutput:
.45a4	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.45a7	29 3f		and #$3f			and 	#$3F
.45a9	48		pha				pha
.45aa	20 df 44	jsr $44df			jsr 	TokenWrite
.45ad	e8		inx				inx
.45ae	68		pla				pla
.45af	c9 3a		cmp #$3a			cmp 	#$3A
.45b1	90 f1		bcc $45a4			bcc 	_TIOutput
.45b3	7a		ply				ply
.45b4					_TIExit:
.45b4	38		sec				sec 								; this can't fail.
.45b5	60		rts				rts
.45b6					TIDCheckCopy:
.45b6	d1 28		cmp ($28),y			cmp 	(codePtr),y
.45b8	d0 08		bne $45c2			bne 	_TIDCCExit
.45ba	e8		inx				inx
.45bb	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.45be	8e cf 0a	stx $0acf			stx 	convertBuffer
.45c1	c8		iny				iny
.45c2					_TIDCCExit:
.45c2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.45c3					TokeniseInteger:
.45c3	85 2c		sta $2c				sta 	temp1 						; save base
.45c5	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.45c7	8e cf 0a	stx $0acf			stx 	convertBuffer
.45ca					_TIGetChars:
.45ca	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.45cc	c9 30		cmp #$30			cmp 	#"0"
.45ce	90 1f		bcc $45ef			bcc 	_TIEndGet
.45d0	c9 3a		cmp #$3a			cmp 	#"9"+1
.45d2	90 10		bcc $45e4			bcc 	_TIHaveChar
.45d4	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.45d6	c9 0a		cmp #$0a			cmp 	#10
.45d8	f0 15		beq $45ef			beq 	_TIEndGet
.45da	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.45dc	c9 41		cmp #$41			cmp 	#"A"
.45de	90 0f		bcc $45ef			bcc 	_TIEndGet
.45e0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.45e2	b0 0b		bcs $45ef			bcs 	_TIEndGet
.45e4					_TIHaveChar:
.45e4	e8		inx				inx 								; write into buffer.
.45e5	8e cf 0a	stx $0acf			stx 	convertBuffer
.45e8	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.45eb	c8		iny				iny 								; next char
.45ec	4c ca 45	jmp $45ca			jmp 	_TIGetChars
.45ef					_TIEndGet:
.45ef	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.45f1	f0 1a		beq $460d			beq 	_TIFail
.45f3	5a		phy				phy
.45f4	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.45f6	85 2a		sta $2a				sta 	temp0
.45f8	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.45fa	85 2b		sta $2b				sta 	1+(temp0)
.45fc	a9 00		lda #$00			lda 	#0 							; stack level 0
.45fe	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4600	a2 1a		ldx #$1a		ldx	#26
.4602	20 1b 3f	jsr $3f1b		jsr	mainHandler
.4605	7a		ply				ply
.4606	90 05		bcc $460d			bcc 	_TIFail 					; didn't convert.
.4608	20 0f 46	jsr $460f			jsr 	TIRecursiveOut 				; recursive output ?
.460b	38		sec				sec
.460c	60		rts				rts
.460d					_TIFail:
.460d	18		clc				clc
.460e	60		rts				rts
.460f					TIRecursiveOut:
.460f	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4611	29 3f		and #$3f			and 	#$3F
.4613	09 40		ora #$40			ora 	#$40
.4615	48		pha				pha
.4616	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.4618	29 c0		and #$c0			and 	#$C0
.461a	05 a0		ora $a0				ora 	esInt1
.461c	05 a8		ora $a8				ora 	esInt2
.461e	05 b0		ora $b0				ora 	esInt3
.4620	f0 10		beq $4632			beq 	_TIRONoRecursion
.4622	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4624					_TIROShift:
.4624	46 b0		lsr $b0				lsr 	esInt3
.4626	66 a8		ror $a8				ror 	esInt2
.4628	66 a0		ror $a0				ror 	esInt1
.462a	66 98		ror $98				ror 	esInt0
.462c	ca		dex				dex
.462d	d0 f5		bne $4624			bne 	_TIROShift
.462f	20 0f 46	jsr $460f			jsr 	TIRecursiveOut 				; call recursively
.4632					_TIRONoRecursion:
.4632	68		pla				pla 								; pull the old bit.
.4633	4c df 44	jmp $44df			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4636					TokenisePunctuation:
.4636	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4638	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.463b	c8		iny				iny
.463c	b1 28		lda ($28),y			lda 	(codePtr),y
.463e	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4641	c8		iny				iny 								; Y is +2
.4642	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4644	8d cf 0a	sta $0acf			sta 	convertBuffer
.4647	20 f3 43	jsr $43f3			jsr 	TokenSearch 				; search for that token.
.464a	b0 0a		bcs $4656			bcs 	_TIFound
.464c	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.464f	88		dey				dey 								; Y is now +1
.4650	20 f3 43	jsr $43f3			jsr 	TokenSearch 				; search for that token.
.4653	b0 01		bcs $4656			bcs 	_TIFound
.4655	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4656					_TIFound:
.4656	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4657					TokeniseString:
.4657	c8		iny				iny 								; skip opening quote
.4658	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.465a	84 2a		sty $2a				sty 	temp0 						; save start.
.465c					_TSGetLength:
.465c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.465e	f0 21		beq $4681			beq 	_TSFail						; end of line, fail
.4660	c8		iny				iny
.4661	e8		inx				inx
.4662	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4664	d0 f6		bne $465c			bne 	_TSGetLength
.4666	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4668	20 df 44	jsr $44df			jsr 	TokenWrite
.466b	8a		txa				txa 								; output length
.466c	20 df 44	jsr $44df			jsr 	TokenWrite
.466f	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4671	e0 00		cpx #$00			cpx 	#0 							; check ended
.4673	f0 09		beq $467e			beq 	_TSExit
.4675					_TSOutput:
.4675	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4677	20 df 44	jsr $44df			jsr 	TokenWrite
.467a	c8		iny				iny
.467b	ca		dex				dex
.467c	d0 f7		bne $4675			bne 	_TSOutput
.467e					_TSExit:
.467e	c8		iny				iny 								; skip ending quote
.467f	38		sec				sec 								; return CS.
.4680	60		rts				rts
.4681					_TSFail:
.4681	18		clc				clc
.4682	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4683					TokenTableAddress:
>4683	8b 46						.word 	Group0Text
>4685	63 48						.word 	Group1Text
>4687	b0 49						.word 	Group2Text
>4689	01 4a						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.468b					Group0Text:
>468b	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>468f	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4692	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>4696	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>4699	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>469c	01 be					.byte $01,$be                          ; $8b >
>469e	01 bc					.byte $01,$bc                          ; $8c <
>46a0	01 bd					.byte $01,$bd                          ; $8d =
>46a2	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>46a5	01 ab					.byte $01,$ab                          ; $8f +
>46a7	01 ad					.byte $01,$ad                          ; $90 -
>46a9	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>46ac	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>46af	01 aa					.byte $01,$aa                          ; $93 *
>46b1	01 af					.byte $01,$af                          ; $94 /
>46b3	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>46b7	01 de					.byte $01,$de                          ; $96 ^
>46b9	01 a1					.byte $01,$a1                          ; $97 !
>46bb	01 bf					.byte $01,$bf                          ; $98 ?
>46bd	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>46c4	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>46ca	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>46ce	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>46d1	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>46d9	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>46df	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>46e4	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>46e9	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>46ee	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>46f4	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>46fc	01 a8					.byte $01,$a8                          ; $a4 (
>46fe	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>4703	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>4708	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>470d	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>4715	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>471a	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>471f	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4725	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>472a	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>472f	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4734	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>473b	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4742	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4747	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>474e	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4755	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>475b	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4762	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4768	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4770	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4776	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>477b	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4781	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4787	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>478d	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4792	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>4797	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>479e	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>47a5	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>47ad	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>47b5	01 c0					.byte $01,$c0                          ; $c3 @
>47b7	01 fe					.byte $01,$fe                          ; $c4 ~
>47b9	01 a6					.byte $01,$a6                          ; $c5 &
>47bb	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>47c1	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>47c9	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>47cd	01 a9					.byte $01,$a9                          ; $c9 )
>47cf	01 ba					.byte $01,$ba                          ; $ca :
>47d1	01 ac					.byte $01,$ac                          ; $cb ,
>47d3	01 bb					.byte $01,$bb                          ; $cc ;
>47d5	01 a7					.byte $01,$a7                          ; $cd '
>47d7	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>47da	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>47df	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>47e4	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>47ea	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>47ee	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>47f2	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>47f6	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>47fc	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4801	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4805	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>480b	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4810	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4816	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4819	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>481e	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4825	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>482a	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>482f	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4834	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4838	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>483e	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4842	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4849	01 ae					.byte $01,$ae                          ; $e5 .
>484b	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>4850	01 a3					.byte $01,$a3                          ; $e7 #
>4852	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4858	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>485d	04 54 59 50 c5				.byte $04,$54,$59,$50,$c5              ; $ea type
>4862	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4863					Group1Text:
>4863	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4868	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>486d	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4872	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4876	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>487c	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4880	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4885	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>488d	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4891	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4896	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>489b	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>48a0	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>48a6	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>48ad	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>48b1	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>48b7	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>48bb	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>48bf	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>48c3	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>48c7	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>48cb	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>48cf	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>48d3	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>48d7	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>48db	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>48df	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>48e3	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>48e7	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>48eb	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>48ef	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>48f3	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>48f7	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>48fb	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>48ff	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4903	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4907	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>490b	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>490f	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4913	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4917	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>491b	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>491f	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4923	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4927	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>492b	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>492f	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4933	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4937	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>493b	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>493f	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4943	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4947	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>494b	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>494f	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4953	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4957	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>495b	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>495f	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4963	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4967	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>496b	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>496f	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4973	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4977	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>497b	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>497f	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4983	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4987	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>498b	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>498f	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4993	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4997	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>499b	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>499f	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>49a3	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>49a7	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>49ab	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>49af	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.49b0					Group2Text:
>49b0	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>49b6	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>49bc	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>49c2	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>49c7	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>49cf	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>49d6	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>49da	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>49df	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>49e5	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>49ea	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>49ef	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>49f4	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>49fa	05 53 4f 55 4e c4			.byte $05,$53,$4f,$55,$4e,$c4          ; $93 sound
>4a00	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4a01					Group3Text:
>4a01	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4a08	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4a0f	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4a17	58 a8
>4a19	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4a21	59 a8
>4a23	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4a28	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4a2f	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4a36	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4a3d	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4a44	08 50 4c 41 59 49 4e 47			.byte $08,$50,$4c,$41,$59,$49,$4e,$47,$a8 ; $8f playing(
>4a4c	a8
>4a4d	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4a4e					tokeniserHandler:
.4a4e	7c 51 4a	jmp ($4a51,x)			jmp 	(tokeniserVectors,x)
.4a51					tokeniserVectors:
>4a51	5d 4a					.word _DummyControlHandler ; index 0
>4a53	e8 41					.word Detokenise           ; index 2
>4a55	dc 41					.word ListLine             ; index 4
>4a57	5e 44					.word TokTest              ; index 6
>4a59	7e 44					.word Tokenise             ; index 8
>4a5b	81 44					.word TokeniseASCIIZ       ; index 10
.4a5d					_DummyControlHandler:
.4a5d	60		rts			rts

;******  Return to file: basic.asm

.4a5e					section_end_tokeniser:
.4a5e					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4a5e					AccessArray:
.4a5e	da		phx				phx
.4a5f	e8		inx				inx
.4a60	20 24 4b	jsr $4b24			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4a63	fa		plx				plx
.4a64	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4a66	85 2a		sta $2a				sta 	temp0
.4a68	b5 a0		lda $a0,x			lda 	esInt1,x
.4a6a	85 2b		sta $2b				sta 	temp0+1
.4a6c	da		phx				phx
.4a6d	5a		phy				phy
.4a6e					_AAFollow:
.4a6e	a0 00		ldy #$00			ldy 	#0
.4a70	b1 2a		lda ($2a),y			lda 	(temp0),y
.4a72	48		pha				pha
.4a73	c8		iny				iny
.4a74	b1 2a		lda ($2a),y			lda 	(temp0),y
.4a76	85 2b		sta $2b				sta 	temp0+1
.4a78	68		pla				pla
.4a79	85 2a		sta $2a				sta 	temp0
.4a7b	e8		inx				inx 								; advance to next stack slot.
.4a7c	a0 00		ldy #$00			ldy 	#0
.4a7e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4a80	d5 98		cmp $98,x			cmp 	esInt0,x
.4a82	c8		iny				iny
.4a83	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4a85	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4a87	29 7f		and #$7f			and 	#$7F
.4a89	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4a8b	90 4e		bcc $4adb			bcc 	_AABadIndex 				; failed on index if max index < required.
.4a8d	18		clc				clc
.4a8e	a5 2a		lda $2a				lda 	temp0
.4a90	69 02		adc #$02			adc 	#2
.4a92	85 2a		sta $2a				sta 	temp0
.4a94	90 02		bcc $4a98			bcc 	_AANoCarry
.4a96	e6 2b		inc $2b				inc 	temp0+1
.4a98					_AANoCarry:
.4a98	b5 98		lda $98,x			lda 	esInt0,x
.4a9a	85 2e		sta $2e				sta 	temp2
.4a9c	b5 a0		lda $a0,x			lda 	esInt1,x
.4a9e	85 2f		sta $2f				sta 	temp2+1
.4aa0	ac 7a 0e	ldy $0e7a			ldy 	varType
.4aa3	b9 7e 4b	lda $4b7e,y			lda 	CAActualSize-$3A,y
.4aa6	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4aa8	30 02		bmi $4aac			bmi 	_AANotPointer
.4aaa	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4aac					_AANotPointer:
.4aac	20 28 4c	jsr $4c28			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4aaf	18		clc				clc
.4ab0	a5 2a		lda $2a				lda 	temp0
.4ab2	65 2e		adc $2e				adc 	temp2
.4ab4	85 2a		sta $2a				sta 	temp0
.4ab6	a5 2b		lda $2b				lda 	temp0+1
.4ab8	65 2f		adc $2f				adc 	temp2+1
.4aba	85 2b		sta $2b				sta 	temp0+1
.4abc	b5 91		lda $91,x			lda 	esType+1,x
.4abe	30 07		bmi $4ac7			bmi 	_AAUsedAllIndices
.4ac0	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4ac2	10 12		bpl $4ad6			bpl 	_AABadDepth 				; no, too many indexes.
.4ac4	4c 6e 4a	jmp $4a6e			jmp 	_AAFollow 					; otherwise follow them.
.4ac7					_AAUsedAllIndices:
.4ac7	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4ac9	30 0b		bmi $4ad6			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4acb	7a		ply				ply
.4acc	fa		plx				plx
.4acd	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4acf	95 98		sta $98,x			sta 	esInt0,x
.4ad1	a5 2b		lda $2b				lda 	temp0+1
.4ad3	95 a0		sta $a0,x			sta 	esInt1,x
.4ad5	60		rts				rts
.4ad6					_AABadDepth:
.4ad6	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4ad8	20 09 15	jsr $1509		jsr	errorHandler
.4adb					_AABadIndex:
.4adb	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4add	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e78					elementSize:
>0e78							.fill	 1
.4ae0					CreateArray:
.4ae0	20 b5 4c	jsr $4cb5			jsr 	AccessSetup 				; set up the basic stuff, hashtables and so on.
.4ae3	ad 7a 0e	lda $0e7a			lda 	varType 					; is the variable type an array
.4ae6	4a		lsr a				lsr 	a
.4ae7	90 36		bcc $4b1f			bcc 	CANotArray 					; no, cause an error.
.4ae9	20 b7 4d	jsr $4db7			jsr 	FindVariable 				; does the variable exist already
.4aec	b0 2c		bcs $4b1a			bcs 	CAFound 					; if so, error cannot redefine it.
.4aee	20 f0 4c	jsr $4cf0			jsr 	CreateVariable 				; create the variable entry.
.4af1	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4af3	48		pha				pha
.4af4	a5 2b		lda $2b				lda 	temp0+1
.4af6	48		pha				pha
.4af7	a2 00		ldx #$00			ldx 	#0
.4af9	20 24 4b	jsr $4b24			jsr 	GetArrayDimensions 			; get the array dimensions
.4afc	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4afe	20 54 4b	jsr $4b54			jsr 	CreateArrayLevel 			; level to YA
.4b01	aa		tax				tax 								; level now in YX
.4b02	68		pla				pla 								; get address back to temp0 to write.
.4b03	85 2b		sta $2b				sta 	temp0+1
.4b05	68		pla				pla
.4b06	85 2a		sta $2a				sta 	temp0
.4b08	98		tya				tya 								; write YX there (address in original record)
.4b09	a0 06		ldy #$06			ldy 	#6
.4b0b	91 2a		sta ($2a),y			sta 	(temp0),y
.4b0d	88		dey				dey
.4b0e	8a		txa				txa
.4b0f	91 2a		sta ($2a),y			sta 	(temp0),y
.4b11	ac 7b 0e	ldy $0e7b			ldy 	varEnd 						; restore Y and exit.
.4b14	60		rts				rts
.4b15					CASize:
.4b15	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4b17	20 09 15	jsr $1509		jsr	errorHandler
.4b1a					CAFound:
.4b1a	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4b1c	20 09 15	jsr $1509		jsr	errorHandler
.4b1f					CANotArray:
.4b1f	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4b21	20 09 15	jsr $1509		jsr	errorHandler
.4b24					GetArrayDimensions:
.4b24	ad 7a 0e	lda $0e7a			lda 	varType 					; push variable type on the stack.
.4b27	48		pha				pha
.4b28	ac 7b 0e	ldy $0e7b			ldy 	varEnd
.4b2b					_CAGetDimensions:
.4b2b	8a		txa				txa 								; get the next level
.4b2c	a2 0a		ldx #$0a		ldx	#10
.4b2e	20 1b 3f	jsr $3f1b		jsr	mainHandler
.4b31	aa		tax				tax
.4b32	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4b34	29 e0		and #$e0			and 	#$E0
.4b36	15 a8		ora $a8,x			ora 	esInt2,x
.4b38	15 b0		ora $b0,x			ora 	esInt3,x
.4b3a	d0 d9		bne $4b15			bne 	CASize
.4b3c	e8		inx				inx 								; next level.
.4b3d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4b3f	c8		iny				iny
.4b40	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4b42	f0 e7		beq $4b2b			beq 	_CAGetDimensions
.4b44	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4b46	d0 cd		bne $4b15			bne 	CASize
.4b48	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4b4a	95 90		sta $90,x			sta 	esType,x 					; dimensions there are, it marks the end.
.4b4c	68		pla				pla 								; restore the variable type ($3A-$3F)
.4b4d	8d 7a 0e	sta $0e7a			sta 	varType
.4b50	8c 7b 0e	sty $0e7b			sty 	varEnd 						; save exit Y value, after dimensions
.4b53	60		rts				rts
.4b54					CreateArrayLevel:
.4b54	ac 7a 0e	ldy $0e7a			ldy 	varType
.4b57	b9 7e 4b	lda $4b7e,y			lda 	CAActualSize-$3A,y 			; $3A is the first type marker.
.4b5a	8d 78 0e	sta $0e78			sta 	elementSize 				; get element size this level.
.4b5d	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4b5f	30 05		bmi $4b66			bmi 	_CANotPointer 				; then its values, keep elementsize
.4b61	a9 02		lda #$02			lda 	#2 							; use array of pointers, each element is 2.
.4b63	8d 78 0e	sta $0e78			sta 	elementSize
.4b66					_CANotPointer:
.4b66	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4b68	85 2a		sta $2a				sta 	temp0
.4b6a	48		pha				pha
.4b6b	a5 36		lda $36				lda 	lowMemory+1
.4b6d	85 2b		sta $2b				sta 	temp0+1
.4b6f	48		pha				pha
.4b70	20 f1 4b	jsr $4bf1			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4b73	a0 00		ldy #$00			ldy 	#0
.4b75	b5 98		lda $98,x			lda 	esInt0,x
.4b77	91 2a		sta ($2a),y			sta 	(temp0),y
.4b79	c8		iny				iny
.4b7a	b5 a0		lda $a0,x			lda 	esInt1,x
.4b7c	91 2a		sta ($2a),y			sta 	(temp0),y
.4b7e	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4b80	30 06		bmi $4b88			bmi 	_CALNotLast
.4b82	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4b84	09 80		ora #$80			ora 	#$80
.4b86	91 2a		sta ($2a),y			sta 	(temp0),y
.4b88					_CALNotLast:
.4b88	a9 02		lda #$02			lda 	#2
.4b8a	20 ae 4b	jsr $4bae			jsr 	_CALAddTemp0
.4b8d	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4b8f	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4b91	b5 a0		lda $a0,x			lda 	esInt1,x
.4b93	95 b0		sta $b0,x			sta 	esInt3,x
.4b95					_CALClear:
.4b95	20 be 4b	jsr $4bbe			jsr 	EraseOneElement
.4b98	ad 78 0e	lda $0e78			lda 	elementSize 				; move to next element
.4b9b	20 ae 4b	jsr $4bae			jsr 	_CALAddTemp0
.4b9e	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4ba0	d0 02		bne $4ba4			bne 	_CALNoBorrow
.4ba2	d6 b0		dec $b0,x			dec 	esInt3,x
.4ba4					_CALNoBorrow:
.4ba4	d6 a8		dec $a8,x			dec 	esInt2,x
.4ba6	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4ba8	10 eb		bpl $4b95			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4baa	68		pla				pla 								; restore the start of this into YA.
.4bab	a8		tay				tay
.4bac	68		pla				pla
.4bad	60		rts				rts
.4bae					_CALAddTemp0:
.4bae	18		clc				clc
.4baf	65 2a		adc $2a				adc 	temp0
.4bb1	85 2a		sta $2a				sta 	temp0
.4bb3	90 02		bcc $4bb7			bcc 	_CALANoCarry
.4bb5	e6 2b		inc $2b				inc 	temp0+1
.4bb7					_CALANoCarry:
.4bb7	60		rts				rts
.4bb8					CAActualSize:
>4bb8	04 04						.byte 	VarISize,VarISize
>4bba	02 02						.byte 	VarSSize,VarSSize
>4bbc	06 06						.byte 	VarFSize,VarFSize
.4bbe					EraseOneElement:
.4bbe	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4bc0	10 09		bpl $4bcb			bpl 	_EOESubArray
.4bc2	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4bc4	ad 7a 0e	lda $0e7a			lda 	varType
.4bc7	20 59 4d	jsr $4d59			jsr 	ZeroTemp0Y
.4bca	60		rts				rts
.4bcb					_EOESubArray:
.4bcb	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4bcd	48		pha				pha
.4bce	a5 2b		lda $2b				lda 	temp0+1
.4bd0	48		pha				pha
.4bd1	ad 78 0e	lda $0e78			lda 	elementSize 				; save element size
.4bd4	48		pha				pha
.4bd5	e8		inx				inx 								; create at next level
.4bd6	20 54 4b	jsr $4b54			jsr 	CreateArrayLevel
.4bd9	ca		dex				dex
.4bda	85 32		sta $32				sta 	tempShort 					; save A
.4bdc	68		pla				pla  								; restore element size.
.4bdd	8d 78 0e	sta $0e78			sta 	elementSize
.4be0	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4be1	85 2b		sta $2b				sta 	temp0+1
.4be3	68		pla				pla
.4be4	85 2a		sta $2a				sta 	temp0
.4be6	98		tya				tya 								; store Y/A there
.4be7	a0 01		ldy #$01			ldy 	#1
.4be9	91 2a		sta ($2a),y			sta 	(temp0),y
.4beb	a5 32		lda $32				lda 	tempShort
.4bed	88		dey				dey
.4bee	91 2a		sta ($2a),y			sta 	(temp0),y
.4bf0	60		rts				rts
.4bf1					AllocateArraySpace:
.4bf1	18		clc				clc 								; element count + 1 => temp2.
.4bf2	b5 98		lda $98,x			lda 	esInt0,x
.4bf4	69 01		adc #$01			adc 	#1
.4bf6	85 2e		sta $2e				sta 	temp2
.4bf8	b5 a0		lda $a0,x			lda 	esInt1,x
.4bfa	69 00		adc #$00			adc 	#0
.4bfc	85 2f		sta $2f				sta 	temp2+1
.4bfe	ad 78 0e	lda $0e78			lda 	elementSize 				; bytes per element
.4c01	20 28 4c	jsr $4c28			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4c04	18		clc				clc 								; add 2 for 'max element' byte.
.4c05	a5 2e		lda $2e				lda 	temp2
.4c07	69 02		adc #$02			adc 	#2
.4c09	85 2e		sta $2e				sta 	temp2
.4c0b	90 02		bcc $4c0f			bcc 	_AASNoCarry
.4c0d	e6 2f		inc $2f				inc 	temp2+1
.4c0f					_AASNoCarry:
.4c0f	18		clc				clc 								; add to low memory, allocating space.
.4c10	a5 35		lda $35				lda 	lowMemory
.4c12	65 2e		adc $2e				adc 	temp2
.4c14	85 35		sta $35				sta 	lowMemory
.4c16	a5 36		lda $36				lda 	lowMemory+1
.4c18	65 2f		adc $2f				adc 	temp2+1
.4c1a	85 36		sta $36				sta 	lowMemory+1
.4c1c	b0 05		bcs $4c23			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4c1e	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4c20	b0 01		bcs $4c23			bcs 	_AASFail
.4c22	60		rts				rts
.4c23					_AASFail:
.4c23	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4c25	20 09 15	jsr $1509		jsr	errorHandler
.4c28					MultiplyTemp2ByA:
.4c28	48		pha				pha
.4c29	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4c2b	85 30		sta $30				sta 	temp3
.4c2d	a5 2f		lda $2f				lda 	temp2+1
.4c2f	85 31		sta $31				sta 	temp3+1
.4c31	68		pla				pla
.4c32	06 2e		asl $2e				asl 	temp2 						; double it.
.4c34	26 2f		rol $2f				rol 	temp2+1
.4c36	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4c38	f0 15		beq $4c4f			beq 	_MTBAExit
.4c3a	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4c3c	d0 0d		bne $4c4b			bne 	_MTBANotFloat
.4c3e	18		clc				clc 								; so this will make it x 3
.4c3f	a5 2e		lda $2e				lda 	temp2
.4c41	65 30		adc $30				adc 	temp3
.4c43	85 2e		sta $2e				sta 	temp2
.4c45	a5 2f		lda $2f				lda 	temp2+1
.4c47	65 31		adc $31				adc 	temp3+1
.4c49	85 2f		sta $2f				sta 	temp2+1
.4c4b					_MTBANotFloat:
.4c4b	06 2e		asl $2e				asl 	temp2 						; double it.
.4c4d	26 2f		rol $2f				rol 	temp2+1
.4c4f					_MTBAExit:
.4c4f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e79					varHash:
>0e79							.fill	1
.0e7a					varType:
>0e7a							.fill 	1
.0e7b					varEnd:
>0e7b							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4c50					AccessVariable:
.4c50	aa		tax				tax 								; stack in X
.4c51	c8		iny				iny									; look at second character
.4c52	b1 28		lda ($28),y			lda 	(codePtr),y
.4c54	88		dey				dey
.4c55	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4c57	d0 15		bne $4c6e			bne 	_AVLong 					; no, always use the hash tables.
.4c59	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4c5b	38		sec				sec 	 							; make it 0-25
.4c5c	e9 01		sbc #$01			sbc 	#1
.4c5e	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4c5f	0a		asl a				asl 	a
.4c60	95 98		sta $98,x			sta 	esInt0,x
.4c62	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4c64	95 a0		sta $a0,x			sta 	esInt1,x
.4c66	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4c68	95 90		sta $90,x			sta 	esType,x
.4c6a	c8		iny				iny 								; skip over the variable reference in the code.
.4c6b	c8		iny				iny  								; (1 letter, 1 type)
.4c6c	8a		txa				txa 								; stack in A to return.
.4c6d	60		rts				rts
.4c6e					_AVLong:
.4c6e	da		phx				phx
.4c6f	20 b5 4c	jsr $4cb5			jsr 	AccessSetup 				; set up the basic information we need for later
.4c72	20 b7 4d	jsr $4db7			jsr 	FindVariable 				; does the variable exist already ?
.4c75	b0 0e		bcs $4c85			bcs 	_AVFound 					; yes, then its found
.4c77	ad 7a 0e	lda $0e7a			lda 	varType 					; otherwise, is the variable type an array
.4c7a	4a		lsr a				lsr 	a
.4c7b	90 05		bcc $4c82			bcc 	_AVCanCreate 				; if not, we can autocreate
.4c7d	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4c7f	20 09 15	jsr $1509		jsr	errorHandler
.4c82					_AVCanCreate:
.4c82	20 f0 4c	jsr $4cf0			jsr 	CreateVariable 				; variable does not exist, create it.
.4c85					_AVFound:
.4c85	fa		plx				plx
.4c86	18		clc				clc 								; copy temp0 (variable record address)
.4c87	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4c89	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4c8b	95 98		sta $98,x			sta 	esInt0,x
.4c8d	a5 2b		lda $2b				lda 	temp0+1
.4c8f	69 00		adc #$00			adc 	#0
.4c91	95 a0		sta $a0,x			sta 	esInt1,x
.4c93	a9 00		lda #$00			lda 	#0
.4c95	95 a8		sta $a8,x			sta 	esInt2,x
.4c97	95 b0		sta $b0,x			sta 	esInt3,x
.4c99	ac 7a 0e	ldy $0e7a			ldy 	varType 					; get the type ID from the type.
.4c9c	b9 75 4c	lda $4c75,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4c9f	95 90		sta $90,x			sta 	esType,x
.4ca1	ac 7b 0e	ldy $0e7b			ldy 	varEnd 						; restore Y
.4ca4	ad 7a 0e	lda $0e7a			lda 	VarType 					; get variable type, put LSB into C
.4ca7	4a		lsr a				lsr 	a
.4ca8	90 03		bcc $4cad			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4caa	20 5e 4a	jsr $4a5e			jsr 	AccessArray 				; array lookup. if LSB was set.
.4cad					_AVNotArray:
.4cad	8a		txa				txa 								; return stack in A and return
.4cae	60		rts				rts
.4caf					_AVTypeTable:
>4caf	80 80						.byte 	$80,$80						; integer
>4cb1	c0 c0						.byte 	$C0,$C0 					; string
>4cb3	81 81						.byte 	$81,$81 					; float
.4cb5					AccessSetup:
.4cb5	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4cb7	8d 79 0e	sta $0e79			sta 	varHash
.4cba	5a		phy				phy
.4cbb	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4cbd	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4cbf	b0 0b		bcs $4ccc			bcs 	_ASComplete
.4cc1	18		clc				clc 								; add to the hash. Might improve this.
.4cc2	6d 79 0e	adc $0e79			adc 	varHash
.4cc5	8d 79 0e	sta $0e79			sta 	varHash
.4cc8	c8		iny				iny 								; next character
.4cc9	4c bb 4c	jmp $4cbb			jmp 	_ASLoop
.4ccc					_ASComplete:
.4ccc	8d 7a 0e	sta $0e7a			sta 	varType 					; save variable type byte
.4ccf	c8		iny				iny
.4cd0	8c 7b 0e	sty $0e7b			sty 	varEnd 						; save the ending position.
.4cd3	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4cd4	e9 3a		sbc #$3a			sbc 	#$3A
.4cd6	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4cd7	0a		asl a				asl 	a
.4cd8	0a		asl a				asl 	a
.4cd9	0a		asl a				asl 	a 							; 2 bytes/word
.4cda	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4cdc	ad 79 0e	lda $0e79			lda 	varHash 					; get hash
.4cdf	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4ce1	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4ce2	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4ce4	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4ce6	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4ce8	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4cea	69 00		adc #$00			adc 	#0
.4cec	85 3c		sta $3c				sta 	hashList+1
.4cee	7a		ply				ply
.4cef	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4cf0					CreateVariable:
.4cf0	98		tya				tya 								; push Y on the stack twice.
.4cf1	48		pha				pha									; position in code of the new variable.
.4cf2	48		pha				pha
.4cf3	ae 7a 0e	ldx $0e7a			ldx 	varType 					; get var type 0-5 from the var type
.4cf6	bd 19 4d	lda $4d19,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4cf9	48		pha				pha 								; save length
.4cfa	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4cfc	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4cfe	a5 36		lda $36				lda 	lowMemory+1
.4d00	85 2b		sta $2b				sta 	temp0+1
.4d02	68		pla				pla 								; get length
.4d03	18		clc				clc 								; add to low memory.
.4d04	65 35		adc $35				adc 	lowMemory
.4d06	85 35		sta $35				sta 	lowMemory
.4d08	90 08		bcc $4d12			bcc 	_CVNoCarry
.4d0a	e6 36		inc $36				inc 	lowMemory+1
.4d0c	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4d0e	c5 34		cmp $34				cmp 	highMemory+1
.4d10	b0 3c		bcs $4d4e			bcs 	_CVMemory
.4d12					_CVNoCarry:
.4d12	ad 79 0e	lda $0e79			lda 	varHash 					; store hash at offset 4.
.4d15	a0 04		ldy #$04			ldy 	#4
.4d17	91 2a		sta ($2a),y			sta 	(temp0),y
.4d19	68		pla				pla 								; offset, work out where the variable name is.
.4d1a	18		clc				clc
.4d1b	65 28		adc $28				adc 	codePtr
.4d1d	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4d1f	91 2a		sta ($2a),y			sta 	(temp0),y
.4d21	a5 29		lda $29				lda 	codePtr+1
.4d23	69 00		adc #$00			adc 	#0
.4d25	c8		iny				iny
.4d26	91 2a		sta ($2a),y			sta 	(temp0),y
.4d28	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4d2b	b0 03		bcs $4d30			bcs 	_CVNotImmediate
.4d2d	20 8d 4d	jsr $4d8d			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4d30					_CVNotImmediate:
.4d30	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4d32	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4d34	91 2a		sta ($2a),y			sta 	(temp0),y
.4d36	c8		iny				iny
.4d37	b1 3b		lda ($3b),y			lda 	(hashList),y
.4d39	91 2a		sta ($2a),y			sta 	(temp0),y
.4d3b	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4d3d	91 3b		sta ($3b),y			sta 	(hashList),y
.4d3f	88		dey				dey
.4d40	a5 2a		lda $2a				lda 	temp0
.4d42	91 3b		sta ($3b),y			sta 	(hashList),y
.4d44	ad 7a 0e	lda $0e7a			lda 	varType 					; type in A
.4d47	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4d49	20 59 4d	jsr $4d59			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4d4c	7a		ply				ply
.4d4d	60		rts				rts
.4d4e					_CVMemory:
.4d4e	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4d50	20 09 15	jsr $1509		jsr	errorHandler
>4d53	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4d55	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4d57	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4d59					ZeroTemp0Y:
.4d59	4a		lsr a				lsr 	a 							; bit 0 in carry
.4d5a	0a		asl a				asl 	a
.4d5b	b0 17		bcs $4d74			bcs 	_ZTExit 					; we don't initialise arrays.
.4d5d	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4d5f	f0 14		beq $4d75			beq 	_ZTWriteNullString 			; write "" string
.4d61	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4d63	f0 20		beq $4d85			beq 	_ZTWriteFloat
.4d65	5a		phy				phy
.4d66	a9 00		lda #$00			lda 	#0
.4d68	91 2a		sta ($2a),y			sta 	(temp0),y
.4d6a	c8		iny				iny
.4d6b	91 2a		sta ($2a),y			sta 	(temp0),y
.4d6d	c8		iny				iny
.4d6e	91 2a		sta ($2a),y			sta 	(temp0),y
.4d70	c8		iny				iny
.4d71	91 2a		sta ($2a),y			sta 	(temp0),y
.4d73	7a		ply				ply
.4d74					_ZTExit:
.4d74	60		rts				rts
.4d75					_ZTWriteNullString:
.4d75	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4d77	8d ce 0a	sta $0ace			sta 	NullString
.4d7a	a9 ce		lda #$ce			lda 	#NullString & $FF
.4d7c	91 2a		sta ($2a),y			sta 	(temp0),y
.4d7e	a9 0a		lda #$0a			lda 	#NullString >> 8
.4d80	c8		iny				iny
.4d81	91 2a		sta ($2a),y			sta 	(temp0),y
.4d83	88		dey				dey
.4d84	60		rts				rts
.4d85					_ZTWriteFloat:
.4d85	da		phx				phx
.4d86	a2 20		ldx #$20		ldx	#32
.4d88	20 d0 26	jsr $26d0		jsr	floatingpointHandler
.4d8b	fa		plx				plx
.4d8c	60		rts				rts
.4d8d					CloneVariableName:
.4d8d	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4d8f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d91	85 2e		sta $2e				sta 	temp2
.4d93	c8		iny				iny
.4d94	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d96	85 2f		sta $2f				sta 	temp2+1
.4d98	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4d9a	91 2a		sta ($2a),y			sta 	(temp0),y
.4d9c	88		dey				dey
.4d9d	a5 35		lda $35				lda 	lowMemory
.4d9f	91 2a		sta ($2a),y			sta 	(temp0),y
.4da1	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4da3					_CVNCopy:
.4da3	b1 2e		lda ($2e),y			lda		(temp2),y
.4da5	91 35		sta ($35),y			sta 	(lowMemory),y
.4da7	c8		iny				iny
.4da8	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4daa	90 f7		bcc $4da3			bcc 	_CVNCopy
.4dac	98		tya				tya 								; add Y to low memory
.4dad	18		clc				clc
.4dae	65 35		adc $35				adc 	lowMemory
.4db0	85 35		sta $35				sta 	lowMemory
.4db2	90 02		bcc $4db6			bcc 	_CVNNoCarry
.4db4	e6 36		inc $36				inc 	lowMemory+1
.4db6					_CVNNoCarry:
.4db6	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4db7					FindVariable:
.4db7	5a		phy				phy
.4db8	98		tya				tya 								; point temp2 to the actual name
.4db9	18		clc				clc 								; in memory of the variable being created
.4dba	65 28		adc $28				adc 	codePtr
.4dbc	85 2e		sta $2e				sta 	temp2
.4dbe	a5 29		lda $29				lda 	codePtr+1
.4dc0	69 00		adc #$00			adc 	#0
.4dc2	85 2f		sta $2f				sta 	temp2+1
.4dc4	a0 00		ldy #$00			ldy 	#0
.4dc6	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4dc8	85 2a		sta $2a				sta 	temp0
.4dca	a5 3c		lda $3c				lda 	hashList+1
.4dcc	85 2b		sta $2b				sta 	temp0+1
.4dce	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4dd0	b1 2a		lda ($2a),y			lda 	(temp0),y
.4dd2	f0 2b		beq $4dff			beq 	_FVFail
.4dd4	aa		tax				tax
.4dd5	88		dey				dey		 							; get LSB
.4dd6	b1 2a		lda ($2a),y			lda 	(temp0),y
.4dd8	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4dda	86 2b		stx $2b				stx 	temp0+1
.4ddc	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4dde	b1 2a		lda ($2a),y			lda 	(temp0),y
.4de0	cd 79 0e	cmp $0e79			cmp 	varHash
.4de3	d0 e9		bne $4dce			bne 	_FVNext 					; if not, no point in checking the name.
.4de5	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4de6	b1 2a		lda ($2a),y			lda 	(temp0),y
.4de8	85 2d		sta $2d				sta 	temp1+1
.4dea	88		dey				dey
.4deb	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ded	85 2c		sta $2c				sta 	temp1
.4def	a0 00		ldy #$00			ldy 	#0
.4df1					_FVCheck:
.4df1	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4df3	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4df5	d0 d7		bne $4dce			bne 	_FVNext		 				; fail if different.
.4df7	c8		iny				iny
.4df8	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4dfa	90 f5		bcc $4df1			bcc 	_FVCheck
.4dfc	7a		ply				ply
.4dfd	38		sec				sec
.4dfe	60		rts				rts
.4dff					_FVFail:
.4dff	7a		ply				ply
.4e00	18		clc				clc
.4e01	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4e02					HashTableReset:
.4e02	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4e04	a9 00		lda #$00			lda 	#0
.4e06					_HTRClear:
.4e06	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4e09	ca		dex				dex
.4e0a	d0 fa		bne $4e06			bne 	_HTRClear
.4e0c	60		rts				rts

;******  Return to file: variable/variable.asm

.4e0d					variableHandler:
.4e0d	7c 10 4e	jmp ($4e10,x)			jmp 	(variableVectors,x)
.4e10					variableVectors:
>4e10	18 4e					.word _DummyControlHandler ; index 0
>4e12	50 4c					.word AccessVariable       ; index 2
>4e14	e0 4a					.word CreateArray          ; index 4
>4e16	02 4e					.word HashTableReset       ; index 6
.4e18					_DummyControlHandler:
.4e18	60		rts			rts

;******  Return to file: basic.asm

.4e19					section_end_variable:
.4e19					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e7c					endStorage:
>4e19							.align 	256
.4f00					programMemory:
>4eff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4f00					section_end_footer:

;******  End of listing
