
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Wed Apr 28 15:11:36 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=1					cputype = 1
=1					autorun = 1
=0					coldstartnew = 0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35
.0af2					jumpVector:
>0af2							.fill 	2

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$ea					TKW_TYPE                     = $ea ; type
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$93					TKW_SOUND                    = $93 ; sound
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(
=$8f					TKW_PLAYINGLPAREN            = $8f ; playing(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: device/option_x16/x16const.inc

=$ffde					KNLReadTimer = $FFDE
=$ffd2					KNLPrintChar = $FFD2
=$ffe4					KNLCheckKeyboarBuffer = $FFE4
=$ffcf					KNLInputLine = $FFCF
=$ffe1					KNLCheckBreak = $FFE1
=$ffbd					KNLFileSetName = $FFBD
=$ffba					KNLFileSetLFS = $FFBA
=$ffd5					KNLFileLoad = $FFD5
=$ffd8					KNLFileSave = $FFD8

;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.
=$9f20					X16VeraAddLow = $9F20
=$9f21					X16VeraAddMed = $9F21
=$9f22					X16VeraAddHigh = $9F22
=$9f23					X16VeraData0 = $9F23
=$9f24					X16VeraData1 = $9F24
=$9f25					X16VeraControl = $9F25
=$9f29					X16VeraDCVideo = $9F29
=$9f2a					X16VeraHScale = $9F2A
=$9f2b					X16VeraVScale = $9F2B
=$9f2d					X16VeraLayerConfig = $9F2D
=$9f2e					X16VeraLayerMapBase = $9F2E
=$9f2f					X16VeraLayerTileBase = $9F2F
=$ff56					X16KReadJoystick = $FF56
=$ff50					X16KReadRTC = $FF50
=$1f9c0					X16VeraSound = $1F9C0
=$1fa00					X16VeraPalette = $1FA00
=320					GrWidth = 320 								; gfx mode size.
=200					GrHeight = 200
=$f800					VeraDefaultFont = $F800 					; where font is in Vera

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	8b 47						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 50		lda #$50			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 c2 29	jsr $29c2		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 ac 13	jsr $13ac		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 05 15	jsr $1505		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 c2 29	jsr $29c2		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 23 40	jsr $4023		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 ce 42	jsr $42ce		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 56 4b	jsr $4b56		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 15 4f	jsr $4f15		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 56 4b	jsr $4b56		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first character into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit 					; e.g. "INX"
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ? so it is lda (something
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A on its own. This is for ASL A
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it - this should be $3A
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1 (it may of course be absolute)
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 23 40	jsr $4023		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing 				; get ,X or ,Y if present
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit 					; neither present
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX 					; decide if ,X or ,Y
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 23 40	jsr $4023		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 27 15	jsr $1527		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 23 40	jsr $4023		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X) so get the ending and error on anything else.
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 23 40	jsr $4023		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma (e.g. ,X ,Y)
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af4					finalOpcode:
>0af4							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f4 0a	sta $0af4			sta 	finalOpcode					; save opcode.
.1113	5a		phy				phy
.1114	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O (e.g. what do we display/check.)
.1117	29 02		and #$02			and 	#2
.1119	f0 2b		beq $1146			beq 	_ASMWNoEcho 				; if bit 2 zero then don't echo.
.111b	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111e	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1121	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1124	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1127	ad f4 0a	lda $0af4			lda 	finalOpcode 				; write opcode
.112a	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.112d	e0 00		cpx #$00			cpx 	#0
.112f	f0 0e		beq $113f			beq 	_ASMWEchoExit
.1131	a5 98		lda $98				lda 	esInt0
.1133	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.1136	e0 01		cpx #$01			cpx 	#1
.1138	f0 05		beq $113f			beq 	_ASMWEchoExit
.113a	a5 a0		lda $a0				lda 	esInt1
.113c	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.113f					_ASMWEchoExit:
.113f	da		phx				phx
.1140	a2 04		ldx #$04		ldx	#4
.1142	20 05 15	jsr $1505		jsr	deviceHandler
.1145	fa		plx				plx
.1146					_ASMWNoEcho:
.1146	ad f4 0a	lda $0af4			lda 	finalOpcode 				; opcode
.1149	20 60 11	jsr $1160			jsr 	AsmWriteByte
.114c	e0 00		cpx #$00			cpx 	#0	 						; exit if no operands
.114e	f0 0e		beq $115e			beq 	_ASMWExit
.1150	a5 98		lda $98				lda 	esInt0	 					; low byte
.1152	20 60 11	jsr $1160			jsr 	AsmWriteByte
.1155	e0 01		cpx #$01			cpx 	#1
.1157	f0 05		beq $115e			beq 	_ASMWExit
.1159	a5 a0		lda $a0				lda 	esInt1 						; high byte
.115b	20 60 11	jsr $1160			jsr 	AsmWriteByte
.115e					_ASMWExit:
.115e	7a		ply				ply
.115f	60		rts				rts
.1160					AsmWriteByte:
.1160	a0 00		ldy #$00			ldy 	#0
.1162	48		pha				pha
.1163	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1166	85 2a		sta $2a				sta 	temp0
.1168	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116b	85 2b		sta $2b				sta 	temp0+1
.116d	68		pla				pla 								; write out the byte.
.116e	91 2a		sta ($2a),y			sta 	(temp0),y
.1170	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1173	d0 03		bne $1178			bne 	_AWBNoCarry
.1175	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1178					_AWBNoCarry:
.1178	60		rts				rts
.1179					AWIWriteHexSpace:
.1179	48		pha				pha
.117a	a9 20		lda #$20			lda 	#" "
.117c	20 93 11	jsr $1193			jsr 	AWIPrintChar
.117f	68		pla				pla
.1180					AWIWriteHex:
.1180	48		pha				pha
.1181	4a		lsr a				lsr 	a
.1182	4a		lsr a				lsr 	a
.1183	4a		lsr a				lsr 	a
.1184	4a		lsr a				lsr 	a
.1185	20 89 11	jsr $1189			jsr 	AWIPrintNibble
.1188	68		pla				pla
.1189					AWIPrintNibble:
.1189	29 0f		and #$0f			and 	#15
.118b	c9 0a		cmp #$0a			cmp 	#10
.118d	90 02		bcc $1191			bcc 	_AWIPNDigit
.118f	69 06		adc #$06			adc 	#6
.1191					_AWIPNDigit:
.1191	69 30		adc #$30			adc 	#48
.1193					AWIPrintChar:
.1193	85 32		sta $32				sta 	tempShort
.1195	da		phx				phx
.1196	a5 32		lda $32				lda 	tempShort
.1198	a2 14		ldx #$14		ldx	#20
.119a	20 05 15	jsr $1505		jsr	deviceHandler
.119d	fa		plx				plx
.119e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af5					asmToken:
>0af5							.fill 	1
.0af6					asmMode:
>0af6							.fill 	1 							; esInt0/1
.0af7					asmBaseOpcode:
>0af7							.fill 	1
.119f					AssembleOneInstruction:
.119f	8d f5 0a	sta $0af5			sta 	asmToken 					; save the token
.11a2	aa		tax				tax
.11a3	bd 6c 11	lda $116c,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11a6	8d f7 0a	sta $0af7			sta 	asmBaseOpcode
.11a9	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11ac	8d f6 0a	sta $0af6			sta 	asmMode
.11af	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b1	d0 05		bne $11b8			bne 	_AOIThreeBytes 				; if so, we have to use three byte, can't try zp before abs
.11b3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11b6	b0 10		bcs $11c8			bcs 	_AOISuccess 				; worked ok.
.11b8					_AOIThreeBytes:
.11b8	ae f6 0a	ldx $0af6			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11bb	bd f2 11	lda $11f2,x			lda 	AbsoluteVersionTable,x
.11be	30 09		bmi $11c9			bmi 	_AOIError					; not possible, no equivalent.
.11c0	8d f6 0a	sta $0af6			sta 	asmMode
.11c3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11c6	90 01		bcc $11c9			bcc 	_AOIError 					; didn't work.
.11c8					_AOISuccess:
.11c8	60		rts				rts
.11c9					_AOIError:
.11c9	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11cb	20 27 15	jsr $1527		jsr	errorHandler
.11ce					AssembleAttempt:
.11ce	20 d7 11	jsr $11d7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d1	b0 03		bcs $11d6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d3	20 7f 13	jsr $137f			jsr 	AssembleSpecialCase
.11d6					_AAExit:
.11d6	60		rts				rts
.11d7					_AADispatch:
.11d7	ad f5 0a	lda $0af5			lda 	asmToken
.11da	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11dc	b0 11		bcs $11ef			bcs 	_AAGroup4
.11de	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e0	b0 0a		bcs $11ec			bcs 	_AAGroup3
.11e2	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11e4	b0 03		bcs $11e9			bcs 	_AAGroup2
.11e6	4c c5 12	jmp $12c5			jmp 	AssembleGroup1
.11e9					_AAGroup2:
.11e9	4c 20 13	jmp $1320			jmp 	AssembleGroup2
.11ec					_AAGroup3:
.11ec	4c 41 13	jmp $1341			jmp 	AssembleGroup3
.11ef					_AAGroup4:
.11ef	4c 75 13	jmp $1375			jmp 	AssembleGroup4
.11f2					AbsoluteVersionTable:
>11f2	ff						.byte	$FF 			; fail AMD_IMM
>11f3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11f4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11f5	ff						.byte	$FF 			; fail AMD_ABS
>11f6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11f7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11f8	ff						.byte	$FF 			; fail AMD_ABSY
>11f9	ff						.byte	$FF 			; fail AMD_ABSX
>11fa	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11fb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11fc	ff						.byte	$FF 			; fail AMD_ABSIND
>11fd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11fe	ff						.byte	$FF 			; fail AMD_REL
>11ff	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1200					OpcodeTable:
>1200	01					.byte	$01			; $94 ora
>1201	21					.byte	$21			; $95 (and)
>1202	41					.byte	$41			; $96 eor
>1203	61					.byte	$61			; $97 adc
>1204	81					.byte	$81			; $98 sta
>1205	a1					.byte	$a1			; $99 lda
>1206	c1					.byte	$c1			; $9a cmp
>1207	e1					.byte	$e1			; $9b sbc
>1208	02					.byte	$02			; $9c asl
>1209	22					.byte	$22			; $9d rol
>120a	42					.byte	$42			; $9e lsr
>120b	62					.byte	$62			; $9f ror
>120c	82					.byte	$82			; $a0 stx
>120d	a2					.byte	$a2			; $a1 ldx
>120e	c2					.byte	$c2			; $a2 dec
>120f	e2					.byte	$e2			; $a3 inc
>1210	60					.byte	$60			; $a4 stz
>1211	20					.byte	$20			; $a5 bit
>1212	80					.byte	$80			; $a6 sty
>1213	a0					.byte	$a0			; $a7 ldy
>1214	c0					.byte	$c0			; $a8 cpy
>1215	e0					.byte	$e0			; $a9 cpx
>1216	00					.byte	$00			; $aa tsb
>1217	10					.byte	$10			; $ab trb
>1218	14					.byte	$14			; $ac jsr
>1219	40					.byte	$40			; $ad jmp
>121a	10					.byte	$10			; $ae bpl
>121b	30					.byte	$30			; $af bmi
>121c	50					.byte	$50			; $b0 bvc
>121d	70					.byte	$70			; $b1 bvs
>121e	90					.byte	$90			; $b2 bcc
>121f	b0					.byte	$b0			; $b3 bcs
>1220	d0					.byte	$d0			; $b4 bne
>1221	f0					.byte	$f0			; $b5 beq
>1222	80					.byte	$80			; $b6 bra
>1223	00					.byte	$00			; $b7 brk
>1224	08					.byte	$08			; $b8 php
>1225	18					.byte	$18			; $b9 clc
>1226	28					.byte	$28			; $ba plp
>1227	38					.byte	$38			; $bb sec
>1228	40					.byte	$40			; $bc rti
>1229	48					.byte	$48			; $bd pha
>122a	58					.byte	$58			; $be cli
>122b	5a					.byte	$5a			; $bf phy
>122c	60					.byte	$60			; $c0 rts
>122d	68					.byte	$68			; $c1 pla
>122e	78					.byte	$78			; $c2 sei
>122f	7a					.byte	$7a			; $c3 ply
>1230	88					.byte	$88			; $c4 dey
>1231	8a					.byte	$8a			; $c5 txa
>1232	98					.byte	$98			; $c6 tya
>1233	9a					.byte	$9a			; $c7 txs
>1234	a8					.byte	$a8			; $c8 tay
>1235	aa					.byte	$aa			; $c9 tax
>1236	b8					.byte	$b8			; $ca clv
>1237	ba					.byte	$ba			; $cb tsx
>1238	c8					.byte	$c8			; $cc iny
>1239	ca					.byte	$ca			; $cd dex
>123a	d8					.byte	$d8			; $ce cld
>123b	da					.byte	$da			; $cf phx
>123c	e8					.byte	$e8			; $d0 inx
>123d	ea					.byte	$ea			; $d1 nop
>123e	f8					.byte	$f8			; $d2 sed
>123f	fa					.byte	$fa			; $d3 plx
.1240					Group2OpcodeAvailability:
>1240	ae					.byte	$ae			; $9c asl $02
>1241	ae					.byte	$ae			; $9d rol $22
>1242	ae					.byte	$ae			; $9e lsr $42
>1243	ae					.byte	$ae			; $9f ror $62
>1244	0a					.byte	$0a			; $a0 stx $82
>1245	0b					.byte	$0b			; $a1 ldx $a2
>1246	aa					.byte	$aa			; $a2 dec $c2
>1247	aa					.byte	$aa			; $a3 inc $e2
>1248	22					.byte	$22			; $a4 stz $60
>1249	aa					.byte	$aa			; $a5 bit $20
>124a	2a					.byte	$2a			; $a6 sty $80
>124b	ab					.byte	$ab			; $a7 ldy $a0
>124c	2b					.byte	$2b			; $a8 cpy $c0
>124d	0b					.byte	$0b			; $a9 cpx $e0
>124e	0a					.byte	$0a			; $aa tsb $00
>124f	0a					.byte	$0a			; $ab trb $10
>1250	08					.byte	$08			; $ac jsr $14
>1251	08					.byte	$08			; $ad jmp $40
.1252					AssemblerSpecialCases:
>1252	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>1255	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>1258	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>125b	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>125e	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1261	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>1264	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>1267	a5 00 89				.byte	$a5,0,$89		; bit #
>126a	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>126d	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1270	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1271					AssembleLabel:
.1271	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1273	c9 3a		cmp #$3a			cmp 	#$3A 						; e.g. it isn't just '.'
.1275	b0 49		bcs $12c0			bcs 	_ALSyntax
.1277	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.1279	a2 02		ldx #$02		ldx	#2
.127b	20 15 4f	jsr $4f15		jsr	variableHandler
.127e	a5 90		lda $90				lda 	esType 						; check integer reference
.1280	c9 80		cmp #$80			cmp 	#$80
.1282	d0 3c		bne $12c0			bne 	_ALSyntax
.1284	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.1286	85 2a		sta $2a				sta 	temp0
.1288	a5 a0		lda $a0				lda 	esInt1
.128a	85 2b		sta $2b				sta 	temp0+1
.128c	5a		phy				phy
.128d	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2 ?
.1290	4a		lsr a				lsr 	a
.1291	90 11		bcc $12a4			bcc 	_ALWrite
.1293	a0 00		ldy #$00			ldy 	#0
.1295	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.1298	d1 2a		cmp ($2a),y			cmp 	(temp0),y 					; labels cannot change value, usually means address mode has changed.
.129a	d0 1f		bne $12bb			bne 	_ALChanged
.129c	c8		iny				iny
.129d	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a2	d0 17		bne $12bb			bne 	_ALChanged
.12a4					_ALWrite:
.12a4	a0 00		ldy #$00			ldy 	#0
.12a6	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12a9	91 2a		sta ($2a),y			sta 	(temp0),y
.12ab	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12ae	c8		iny				iny
.12af	91 2a		sta ($2a),y			sta 	(temp0),y
.12b1	a9 00		lda #$00			lda 	#0
.12b3	c8		iny				iny
.12b4	91 2a		sta ($2a),y			sta 	(temp0),y
.12b6	c8		iny				iny
.12b7	91 2a		sta ($2a),y			sta 	(temp0),y
.12b9	7a		ply				ply
.12ba	60		rts				rts
.12bb					_ALChanged:
.12bb	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12bd	20 27 15	jsr $1527		jsr	errorHandler
.12c0					_ALSyntax:
.12c0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12c2	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12c5					AssembleGroup1:
.12c5	ad f5 0a	lda $0af5			lda 	asmToken 					; firstly, we throw out STA immediate
.12c8	c9 98		cmp #$98			cmp 	#TKW_STA
.12ca	d0 07		bne $12d3			bne 	_AG1NotStoreImm
.12cc	ad f6 0a	lda $0af6			lda 	asmMode
.12cf	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d1	f0 2c		beq $12ff			beq 	AG1ModeError
.12d3					_AG1NotStoreImm:
.12d3	ae f6 0a	ldx $0af6			ldx 	asmMode						; get mode into X.
.12d6	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12d9	48		pha				pha
.12da	f0 23		beq $12ff			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12dc	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12de	d0 02		bne $12e2			bne 	_AG1NotImmediate
.12e0	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12e2					_AG1NotImmediate:
.12e2	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12e4	d0 02		bne $12e8			bne 	_AG1NotZX
.12e6	a2 00		ldx #$00			ldx 	#0
.12e8					_AG1NotZX:
.12e8	68		pla				pla 								; restore length
.12e9	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12eb	b0 10		bcs $12fd			bcs 	AG1Fail
.12ed					AG1ReturnValue:
.12ed	85 32		sta $32				sta 	tempShort 					; save size of operand
.12ef	18		clc				clc
.12f0	bd 12 13	lda $1312,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12f3	6d f7 0a	adc $0af7			adc 	asmBaseOpcode 				; add the base opcode.
.12f6	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12f8	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.12fb	38		sec				sec
.12fc	60		rts				rts
.12fd					AG1Fail:
.12fd	18		clc				clc
.12fe	60		rts				rts
.12ff					AG1ModeError:
.12ff	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1301	20 27 15	jsr $1527		jsr	errorHandler
.1304					AMDOperandSize:
>1304	01 01 00 02					.byte 	1,1,0,2
>1308	01 01 02 02					.byte 	1,1,2,2
>130c	01 01 02 02					.byte 	1,1,2,2
>1310	01 01						.byte 	1,1
.1312					AMDOffsetFromBase:
>1312	00 04 08 0c					.byte 	0,4,8,12
>1316	10 14 18 1c					.byte	16,20,24,28
>131a	11 00 00 00					.byte 	17,0,0,0
>131e	00 00						.byte 	0,0
.1320					AssembleGroup2:
.1320	ad f6 0a	lda $0af6			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.1323	c9 08		cmp #$08			cmp 	#8
.1325	b0 18		bcs $133f			bcs 	_AG2Fail
.1327	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1329	ae f5 0a	ldx $0af5			ldx 	asmToken					; get token in X, then get the availability flags for it
.132c	bd a4 11	lda $11a4,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.132f					_AG2Shift:
.132f	4a		lsr a				lsr 	a
.1330	c6 2a		dec $2a				dec 	temp0
.1332	10 fb		bpl $132f			bpl 	_AG2Shift
.1334	90 09		bcc $133f			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.1336	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.1339	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.133c	4c ed 12	jmp $12ed			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.133f					_AG2Fail:
.133f	18		clc				clc
.1340	60		rts				rts
.1341					AssembleGroup3:
.1341	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.1344	4a		lsr a				lsr 	a
.1345	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.1347	90 21		bcc $136a			bcc 	_AG3Default
.1349	38		sec				sec	 								; calculate branch offset
.134a	a5 98		lda $98				lda		esInt0
.134c	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.134f	aa		tax				tax
.1350	a5 a0		lda $a0				lda		esInt1
.1352	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.1355	85 a0		sta $a0				sta 	esInt1
.1357	8a		txa				txa 								; add 126, now 128 too many.
.1358	18		clc				clc 								; we can use this to check the range
.1359	69 7e		adc #$7e			adc 	#126
.135b	85 98		sta $98				sta 	esInt0
.135d	90 02		bcc $1361			bcc 	_AG3NoCarry
.135f	e6 a0		inc $a0				inc 	esInt1
.1361					_AG3NoCarry:
.1361	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.1363	d0 0b		bne $1370			bne 	_AG3Range
.1365	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.1367	38		sec				sec
.1368	e9 80		sbc #$80			sbc 	#128
.136a					_AG3Default:
.136a	85 98		sta $98				sta 	esInt0
.136c					_AG3ExitOk:
.136c	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.136e	d0 07		bne $1377			bne 	AG4Write
.1370					_AG3Range:
.1370	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.1372	20 27 15	jsr $1527		jsr	errorHandler
.1375					AssembleGroup4:
.1375	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1377					AG4Write:
.1377	ad f7 0a	lda $0af7			lda 	asmBaseOpcode				; the opcode is the opcode base.
.137a	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.137d	38		sec				sec
.137e	60		rts				rts
.137f					AssembleSpecialCase:
.137f	a2 00		ldx #$00			ldx 	#0
.1381					_ASCScan:
.1381	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.1384	cd f5 0a	cmp $0af5			cmp 	asmToken
.1387	d0 08		bne $1391			bne 	_ASCNext
.1389	bd 53 12	lda $1253,x			lda 	AssemblerSpecialCases+1,x
.138c	cd f6 0a	cmp $0af6			cmp 	asmMode
.138f	f0 0a		beq $139b			beq 	_ASCFound
.1391					_ASCNext:
.1391	e8		inx				inx									; next entry
.1392	e8		inx				inx
.1393	e8		inx				inx
.1394	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; until table ends
.1397	d0 e8		bne $1381			bne 	_ASCScan
.1399	18		clc				clc
.139a	60		rts				rts
.139b					_ASCFound:
.139b	bd 54 12	lda $1254,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.139e	48		pha				pha
.139f	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.13a2	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13a5	aa		tax				tax
.13a6	68		pla				pla 								; opcode back
.13a7	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13aa	38		sec				sec
.13ab	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13ac					assemblerHandler:
.13ac	7c af 13	jmp ($13af,x)			jmp 	(assemblerVectors,x)
.13af					assemblerVectors:
>13af	b5 13					.word _DummyControlHandler ; index 0
>13b1	9f 11					.word AssembleOneInstruction ; index 2
>13b3	71 12					.word AssembleLabel        ; index 4
.13b5					_DummyControlHandler:
.13b5	60		rts			rts

;******  Return to file: basic.asm

.13b6					section_end_assembler:
.13b6					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13b6					X16SyncBreak:
.13b6	5a		phy				phy
.13b7	20 de ff	jsr $ffde			jsr 	KNLReadTimer
.13ba	ac e8 0b	ldy $0be8			ldy 	nextSyncTick 				; if NST = 0 then always sync
.13bd	a8		tay				tay 								; save tick in Y
.13be	38		sec				sec
.13bf	ed e8 0b	sbc $0be8			sbc 	nextSyncTick 				; calculate timer - next tick
.13c2	30 0c		bmi $13d0			bmi 	_X16NoSync 					; if -ve then no sync.
.13c4					_X16Sync:
.13c4	98		tya				tya 								; get current time back
.13c5	18		clc				clc 								; work out time of next tick.
.13c6	69 06		adc #$06			adc 	#6 							; at 60Hz that is six ticks.
.13c8	8d e8 0b	sta $0be8			sta 	nextSyncTick
.13cb	a9 fd		lda #$fd			lda 	#$FD 						; call the extension update code.
.13cd	20 74 18	jsr $1874		jsr	extensionHandler
.13d0					_X16NoSync:
.13d0	7a		ply				ply
.13d1	20 e1 ff	jsr $ffe1			jsr 	KNLCheckBreak
.13d4	f0 01		beq $13d7			beq 	_IsBreak
.13d6	60		rts				rts
.13d7					_IsBreak:
.13d7	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13d9	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13dc					ExternSave:
.13dc	5a		phy				phy
.13dd	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.13e0	20 bd ff	jsr $ffbd			jsr 	KNLFileSetName 				; set name
.13e3	a9 01		lda #$01			lda 	#1
.13e5	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13e7	a0 00		ldy #$00			ldy 	#0
.13e9	20 ba ff	jsr $ffba			jsr 	KNLFileSetLFS 				; set LFS
.13ec	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13ee	85 2a		sta $2a				sta 	temp0
.13f0	a5 a1		lda $a1				lda 	esInt1+1
.13f2	85 2b		sta $2b				sta 	temp0+1
.13f4	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13f6	a4 a2		ldy $a2				ldy 	esInt1+2
.13f8	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13fa	20 d8 ff	jsr $ffd8			jsr 	KNLFileSave 				; save
.13fd	b0 02		bcs $1401			bcs 	_ESSave
.13ff	7a		ply				ply
.1400	60		rts				rts
.1401					_ESSave:
.1401	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.1403	20 27 15	jsr $1527		jsr	errorHandler
.1406					ExternLoad:
.1406	5a		phy				phy
.1407	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.140a	20 bd ff	jsr $ffbd			jsr 	KNLFileSetName 				; set name
.140d	a9 01		lda #$01			lda 	#1
.140f	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1411	a0 00		ldy #$00			ldy 	#0
.1413	20 ba ff	jsr $ffba			jsr 	KNLFileSetLFS 				; set LFS
.1416	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1418	a4 a1		ldy $a1				ldy 	esInt1+1
.141a	a9 00		lda #$00			lda 	#0 							; load command
.141c	20 d5 ff	jsr $ffd5			jsr 	KNLFileLoad
.141f	b0 02		bcs $1423			bcs 	_ESLoad
.1421	7a		ply				ply
.1422	60		rts				rts
.1423					_ESLoad:
.1423	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1425	20 27 15	jsr $1527		jsr	errorHandler
.1428					ExternGetLength:
.1428	a5 98		lda $98				lda 	esInt0 						; length into A.
.142a	85 2a		sta $2a				sta 	temp0
.142c	a5 a0		lda $a0				lda 	esInt1
.142e	85 2b		sta $2b				sta 	temp0+1
.1430	a0 00		ldy #$00			ldy 	#0
.1432	b1 2a		lda ($2a),y			lda 	(temp0),y
.1434	a6 98		ldx $98				ldx 	esInt0 						; name string address into YX
.1436	a4 a0		ldy $a0				ldy 	esInt1
.1438	e8		inx				inx 								; advance over the length byte.
.1439	d0 01		bne $143c			bne 	_ESNoCarry
.143b	c8		iny				iny
.143c					_ESNoCarry:
.143c	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af8					bufferCount:
>0af8							.fill 	0
.0af8					bufferStorage:
>0af8							.fill 	MaxLineInputSize
.0be8					nextSyncTick:
>0be8							.fill 	0
.143d					IOControlHandler:
.143d	c9 00		cmp #$00			cmp 	#0
.143f	d0 15		bne $1456			bne		_CHExit
.1441	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1443	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1446	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1448	20 99 14	jsr $1499			jsr 	IOInk
.144b	a9 00		lda #$00			lda 	#0
.144d	8d e8 0b	sta $0be8			sta 	nextSyncTick
.1450	20 ad 14	jsr $14ad			jsr 	IOPaper
.1453	20 57 14	jsr $1457			jsr 	IOClearScreen
.1456					_CHExit:
.1456	60		rts				rts
.1457					IOClearScreen:
.1457	48		pha				pha
.1458	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.145a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.145d	68		pla				pla
.145e	60		rts				rts
.145f					IONewLine:
.145f	48		pha				pha
.1460	a9 0d		lda #$0d			lda 	#13
.1462	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1465	68		pla				pla
.1466	60		rts				rts
.1467					IOTab:
.1467	48		pha				pha
.1468	a9 20		lda #$20			lda 	#32
.146a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.146d	68		pla				pla
.146e	60		rts				rts
.146f					IOPrintAscii:
.146f					IOPrintChar:
.146f	aa		tax				tax 								; save in X so we can save Y
.1470	5a		phy				phy
.1471	8a		txa				txa
.1472	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1474	d0 02		bne $1478			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1476	a9 14		lda #$14			lda 	#$14
.1478					_IOPCNotBS:
.1478	20 d2 ff	jsr $ffd2			jsr 	KNLPrintChar 				; CBM OS Call.
.147b	7a		ply				ply
.147c	60		rts				rts
.147d					IOInkey:
.147d	5a		phy				phy
.147e	20 e4 ff	jsr $ffe4			jsr 	KNLCheckKeyboarBuffer
.1481	85 32		sta $32				sta 	tempShort
.1483	7a		ply				ply
.1484	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1486	f0 10		beq $1498			beq 	_IOIExit
.1488	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.148a	f0 0c		beq $1498			beq 	_IOIExit
.148c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.148e	f0 06		beq $1496			beq 	_IOIBackspace
.1490	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1492	90 e9		bcc $147d			bcc 	IOInkey
.1494	b0 02		bcs $1498			bcs 	_IOIExit
.1496					_IOIBackspace:
.1496	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1498					_IOIExit:
.1498	60		rts				rts
.1499					IOInk:
.1499	48		pha				pha
.149a	29 07		and #$07			and 	#7 							; 8 primaries
.149c	aa		tax				tax
.149d	bd a5 14	lda $14a5,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.14a0	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14a3	68		pla				pla
.14a4	60		rts				rts
.14a5					_IOColourTable:
>14a5	90						.byte 	$90 					; 0 Black
>14a6	96						.byte 	$96 					; 1 Red
>14a7	1e						.byte 	$1E 					; 2 Green
>14a8	9e						.byte 	$9E 					; 3 Yellow
>14a9	9a						.byte 	$9A 					; 4 Blue
>14aa	9c						.byte 	$9C 					; 5 Magenta
>14ab	9f						.byte 	$9F 					; 6 Cyan
>14ac	05						.byte 	$05 					; 7 White
.14ad					IOPaper:
.14ad	48		pha				pha
.14ae	48		pha				pha
.14af	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14b1	20 6f 14	jsr $146f			jsr 	IOPrintChar 			; and then swap them again.
.14b4	68		pla				pla
.14b5	20 99 14	jsr $1499			jsr 	IOInk
.14b8	a9 01		lda #$01			lda 	#1
.14ba	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14bd	68		pla				pla
.14be	60		rts				rts
.14bf					IOLocate:
.14bf	48		pha				pha
.14c0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14c2	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14c5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14c7	20 cd 14	jsr $14cd			jsr 	_IOLoc2
.14ca	7a		ply				ply
.14cb	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14cd					_IOLoc2:
.14cd	c0 00		cpy #$00			cpy 	#0
.14cf	f0 06		beq $14d7			beq 	_IOLocExit
.14d1	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14d4	88		dey				dey
.14d5	d0 f6		bne $14cd			bne 	_IOLoc2
.14d7					_IOLocExit:
.14d7	60		rts				rts
.14d8					IOInput:
.14d8	a9 00		lda #$00			lda 	#0
.14da	8d f8 0a	sta $0af8			sta 	bufferCount
.14dd					_IOILoop:
.14dd	20 cf ff	jsr $ffcf			jsr 	KNLInputLine
.14e0	c9 0d		cmp #$0d			cmp 	#13
.14e2	f0 10		beq $14f4			beq 	_IOIExit
.14e4	ae f8 0a	ldx $0af8			ldx 	bufferCount
.14e7	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14e9	f0 f2		beq $14dd			beq 	_IOILoop
.14eb	ee f8 0a	inc $0af8			inc 	bufferCount
.14ee	9d f9 0a	sta $0af9,x			sta 	bufferStorage+1,x
.14f1	4c dd 14	jmp $14dd			jmp 	_IOILoop
.14f4					_IOIExit:
.14f4	a9 f8		lda #$f8			lda 	#(bufferCount) & $FF
.14f6	85 2a		sta $2a				sta 	temp0
.14f8	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14fa	85 2b		sta $2b				sta 	1+(temp0)
.14fc	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14fd					IOReadTimer:
.14fd	20 de ff	jsr $ffde			jsr 	KNLReadTimer 				; reads timer into YXA so we want only YA
.1500	48		pha				pha
.1501	8a		txa				txa
.1502	a8		tay				tay
.1503	68		pla				pla
.1504	60		rts				rts

;******  Return to file: device/device.asm

.1505					deviceHandler:
.1505	7c 08 15	jmp ($1508,x)			jmp 	(deviceVectors,x)
.1508					deviceVectors:
>1508	3d 14					.word IOControlHandler     ; index 0
>150a	57 14					.word IOClearScreen        ; index 2
>150c	5f 14					.word IONewLine            ; index 4
>150e	99 14					.word IOInk                ; index 6
>1510	7d 14					.word IOInkey              ; index 8
>1512	d8 14					.word IOInput              ; index 10
>1514	06 14					.word ExternLoad           ; index 12
>1516	bf 14					.word IOLocate             ; index 14
>1518	ad 14					.word IOPaper              ; index 16
>151a	6f 14					.word IOPrintChar          ; index 18
>151c	6f 14					.word IOPrintAscii         ; index 20
>151e	dc 13					.word ExternSave           ; index 22
>1520	b6 13					.word X16SyncBreak         ; index 24
>1522	67 14					.word IOTab                ; index 26
>1524	fd 14					.word IOReadTimer          ; index 28
.1526					_DummyControlHandler:
.1526	60		rts			rts

;******  Return to file: basic.asm

.1527					section_end_device:
.1527					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1527					ErrorHandler:
.1527	da		phx				phx
.1528	a9 01		lda #$01			lda 	#1 							; red
.152a	a2 06		ldx #$06		ldx	#6
.152c	20 05 15	jsr $1505		jsr	deviceHandler
.152f	fa		plx				plx
.1530	a9 9b		lda #$9b			lda 	#(ErrorTextList) & $FF
.1532	85 2a		sta $2a				sta 	temp0
.1534	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1536	85 2b		sta $2b				sta 	1+(temp0)
.1538	ca		dex		_EHFind:dex									; errors start at 1
.1539	f0 10		beq $154b			beq 	_EHFound
.153b	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.153d	38		sec				sec
.153e	a5 2a		lda $2a				lda 	temp0
.1540	71 2a		adc ($2a),y			adc 	(temp0),y
.1542	85 2a		sta $2a				sta 	temp0
.1544	90 f2		bcc $1538			bcc 	_EHFind
.1546	e6 2b		inc $2b				inc 	temp0+1
.1548	4c 38 15	jmp $1538			jmp 	_EHFind
.154b					_EHFound:
.154b	20 5f 18	jsr $185f			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.154e	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1550	b1 28		lda ($28),y			lda 	(codePtr),y
.1552	f0 39		beq $158d			beq 	_EHNoLine
.1554	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1556	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1559	90 32		bcc $158d			bcc 	_EHNoLine
.155b	a9 97		lda #$97			lda 	#(EHAtMsg) & $FF
.155d	85 2a		sta $2a				sta 	temp0
.155f	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1561	85 2b		sta $2b				sta 	1+(temp0)
.1563	20 5f 18	jsr $185f			jsr 	EHPrintAscii
.1566	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1568	a2 00		ldx #$00			ldx 	#0
.156a	b1 28		lda ($28),y			lda 	(codePtr),y
.156c	95 98		sta $98,x			sta 	esInt0,x
.156e	c8		iny				iny
.156f	b1 28		lda ($28),y			lda 	(codePtr),y
.1571	95 a0		sta $a0,x			sta 	esInt1,x
.1573	a9 00		lda #$00			lda 	#0
.1575	95 a8		sta $a8,x			sta 	esInt2,x
.1577	95 b0		sta $b0,x			sta 	esInt3,x
.1579	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.157b	85 2a		sta $2a				sta 	temp0
.157d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.157f	85 2b		sta $2b				sta 	1+(temp0)
.1581	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1583	a9 00		lda #$00			lda 	#0							; stack position zero.
.1585	a2 12		ldx #$12		ldx	#18
.1587	20 23 40	jsr $4023		jsr	mainHandler
.158a	20 5f 18	jsr $185f			jsr 	EHPrintAscii
.158d					_EHNoLine:
.158d	a2 04		ldx #$04		ldx	#4
.158f	20 05 15	jsr $1505		jsr	deviceHandler
.1592	a2 04		ldx #$04		ldx	#4
.1594	20 c2 29	jsr $29c2		jsr	interactionHandler
.1597					EHAtMsg:
>1597	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.159b					ErrorTextList:
>159b	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>15a3	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15af	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15b7	45 72 72 6f 72
>15bc	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15c4	64 69 73 61 62 6c 65 64
>15cc	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15d4	6f 6e 20 66 61 69 6c 65 64
>15dd	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15e5	42 79 20 5a 65 72 6f
>15ec	04 53 74 6f 70				.text 4,"Stop"
>15f1	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15f9	73 6d 61 74 63 68
>15ff	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1607	20 56 61 6c 75 65
>160d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1615	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1623	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>162b	20 63 6f 6d 6d 61
>1631	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1639	20 72 65 66 65 72 65 6e 63 65
>1643	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>164b	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1659	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1661	74 6f 6f 20 6c 6f 6e 67
>1669	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1671	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>167e	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1686	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1693	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>169b	74 68 6f 75 74 20 46 4f 52
>16a4	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>16ac	74 68 6f 75 74 20 57 48 49 4c 45
>16b7	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16bf	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16cc	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16d4	54 20 69 6e 64 65 78
>16db	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16e3	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16f3	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16fb	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>170a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1712	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1722	63 65
>1724	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>172c	20 50 72 6f 63 65 64 75 72 65
>1736	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>173e	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>174e	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1756	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1764	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>176c	75 69 72 65 73 20 61 72 72 61 79
>1777	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>177f	61 79 20 69 6e 64 65 78
>1787	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>178f	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>179f	6e 64 69 63 65 73
>17a5	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17ad	64 61 74 61
>17b1	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17b9	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17c6	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17ce	69 6c 65 64
>17d2	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17da	69 6c 65 64
>17de	05 42 72 65 61 6b			.text 5,"Break"
>17e4	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17ec	6d 65 6d 6f 72 79
>17f2	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17fa	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>1809	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1811	72 61 6e 64 2f 4d 6f 64 65
>181a	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1822	6f 75 74 20 6f 66 20 72 61 6e 67 65
>182e	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1836	68 61 6e 67 65 64 20 76 61 6c 75 65
>1842	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>184a	74 65 20 53 65 6c 65 63 74 65 64
>1855	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>185d	65
>185e	00					.byte 0

;******  Return to file: error/errorhandler.asm

.185f					EHPrintAscii:
.185f	a0 00		ldy #$00			ldy 	#0
.1861	b1 2a		lda ($2a),y			lda 	(temp0),y
.1863	aa		tax				tax
.1864	f0 0d		beq $1873			beq 	_EHPExit
.1866					_EHPLoop:
.1866	c8		iny				iny
.1867	da		phx				phx
.1868	b1 2a		lda ($2a),y			lda 	(temp0),y
.186a	a2 14		ldx #$14		ldx	#20
.186c	20 05 15	jsr $1505		jsr	deviceHandler
.186f	fa		plx				plx
.1870	ca		dex				dex
.1871	d0 f3		bne $1866			bne 	_EHPLoop
.1873					_EHPExit:
.1873	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1874					section_end_error:
.1874					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1874					ExtensionHandler:
.1874	c9 fd		cmp #$fd			cmp 	#$FD 						; check for sync
.1876	f0 21		beq $1899			beq 	_ExtensionSync
.1878	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.187a	f0 16		beq $1892			beq 	_ExtensionForce
.187c	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.187e	d0 08		bne $1888			bne 	_ExtensionUnary 			; is passed in A.
.1880	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1882	c8		iny				iny
.1883	0a		asl a				asl 	a
.1884	aa		tax				tax
.1885	7c 90 18	jmp ($1890,x)			jmp 	(Group2Vectors-12,x)
.1888					_ExtensionUnary:
.1888	48		pha				pha 								; save stack pos in A
.1889	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.188b	c8		iny				iny
.188c	0a		asl a				asl 	a
.188d	aa		tax				tax
.188e	68		pla				pla 								; restore stack pos and call group3 command.
.188f	7c ac 18	jmp ($18ac,x)			jmp 	(Group3Vectors-12,x)
.1892					_ExtensionForce:
.1892	20 e0 1f	jsr $1fe0			jsr 	SoundReset 					; all sound off as not updated
.1895	20 9b 24	jsr $249b			jsr 	ForceMode0 					; switch to mode 0 perhaps
.1898	60		rts				rts
.1899					_ExtensionSync:
.1899	4c ca 20	jmp $20ca			jmp 	SoundInterrupt

;******  Processing file: extension/../generated/tokenvectors2.inc

.189c					Group2Vectors:
>189c	74 26					.word	Command_VPoke            ; $86 vpoke
>189e	77 26					.word	Command_VDoke            ; $87 vdoke
>18a0	4c 26					.word	Command_VLoad            ; $88 vload
>18a2	ad 24					.word	CommandMode              ; $89 mode
>18a4	68 25					.word	CommandPalette           ; $8a palette
>18a6	b3 21					.word	CommandSprite            ; $8b sprite
>18a8	ee 1d					.word	CommandClg               ; $8c clg
>18aa	f0 1a					.word	Command_Rect             ; $8d rect
>18ac	f8 1a					.word	Command_Frame            ; $8e frame
>18ae	9f 25					.word	Command_Draw             ; $8f draw
>18b0	dd 1a					.word	Command_Plot             ; $90 plot
>18b2	b7 19					.word	Command_Line             ; $91 line
>18b4	fe 22					.word	Command_Paint            ; $92 paint
>18b6	0f 20					.word	CommandSound             ; $93 sound

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18b8					Group3Vectors:
>18b8	c0 26					.word	Command_VPeek            ; $86 vpeek(
>18ba	c3 26					.word	Command_VDeek            ; $87 vdeek(
>18bc	46 24					.word	Sprite_GetX              ; $88 sprite.x(
>18be	49 24					.word	Sprite_GetY              ; $89 sprite.y(
>18c0	fb 20					.word	FunctionCollide          ; $8a hit(
>18c2	8d 1e					.word	Unary_JoyX               ; $8b joy.x(
>18c4	90 1e					.word	Unary_JoyY               ; $8c joy.y(
>18c6	c9 1e					.word	Unary_JButton            ; $8d joy.b(
>18c8	62 1e					.word	Unary_Clock              ; $8e clock(
>18ca	8f 1f					.word	Unary_Playing            ; $8f playing(

;******  Return to file: extension/extensionhandler.asm

.18cc					XEvaluateInteger:
.18cc	8a		txa				txa
.18cd	a2 0a		ldx #$0a		ldx	#10
.18cf	20 23 40	jsr $4023		jsr	mainHandler
.18d2	aa		tax				tax
.18d3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be8					gStartStorage:
.0be8					gCurrentXPos:
>0be8							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0bea					gCurrentYPos:
>0bea							.fill 	2
.0bec					gX1:
>0bec							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bee					gY1:
>0bee							.fill 	2
.0bf0					gX2:
>0bf0							.fill 	2
.0bf2					gY2:
>0bf2							.fill 	2
.0bf4					gError:
>0bf4							.fill 	2
.0bf6					g2Error:
>0bf6							.fill 	2
.0bf8					gdx:
>0bf8							.fill 	2
.0bfa					gdy:
>0bfa							.fill 	2
.0bfc					gWordHandler:
>0bfc							.fill 	2
.0bfe					gModifiers:
.0bfe					gdInk:
>0bfe							.fill 	1
.0bff					gdPaper:
>0bff							.fill 	1
.0c00					gdSize:
>0c00							.fill 	1
.0c01					gdImage:
>0c01							.fill 	1
.0c02					gdFlip:
>0c02							.fill 	1
.0c03					gEndStorage:
.0c03					gdXLimit:
>0c03							.fill 	2
.0c05					gdYLimit:
>0c05							.fill 	2
.0c07					gdText:
>0c07							.fill 	2
.18d4					GResetStorage:
.18d4	da		phx				phx
.18d5	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18d7	a9 00		lda #$00			lda 	#0
.18d9					_GRSLoop:
.18d9	9d e8 0b	sta $0be8,x			sta 	gStartStorage,x
.18dc	ca		dex				dex
.18dd	10 fa		bpl $18d9			bpl 	_GRSLoop
.18df	a9 01		lda #$01			lda 	#1 	 						; ink and size both 1, sensible defaults.
.18e1	8d fe 0b	sta $0bfe			sta 	gdInk
.18e4	8d 00 0c	sta $0c00			sta 	gdSize
.18e7	fa		plx				plx
.18e8	60		rts				rts
.18e9					GHandler:
.18e9	8e fd 0b	stx $0bfd			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18ec	8d fc 0b	sta $0bfc			sta 	gWordHandler
.18ef	a9 00		lda #$00			lda 	#0							; default no text.
.18f1	8d 08 0c	sta $0c08			sta 	gdText+1
.18f4	88		dey				dey 								; predecrement
.18f5					_GHLoopNext:
.18f5	c8		iny				iny									; advance one character
.18f6					_GHLoop:
.18f6	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18f8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18fa	f0 f9		beq $18f5			beq 	_GHLoopNext
.18fc	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18fe	f0 4c		beq $194c			beq 	_GHExit
.1900	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1902	f0 48		beq $194c			beq 	_GHExit
.1904	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.1906	f0 35		beq $193d			beq 	_GHCallHandler 				; update post & call the handler
.1908	c9 ce		cmp #$ce			cmp 	#TKW_TO
.190a	f0 31		beq $193d			beq 	_GHCallHandler
.190c	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.190e	f0 14		beq $1924			beq 	_GHCPairSkip
.1910	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.1912	f0 39		beq $194d			beq 	_GHText
.1914	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.1916					_GHCheckTokens:
.1916	b1 28		lda ($28),y			lda 	(codePtr),y
.1918	dd 62 19	cmp $1962,x			cmp 	_GHTokenTable,x
.191b	f0 0e		beq $192b			beq 	_GHFoundToken
.191d	e8		inx				inx
.191e	bd 62 19	lda $1962,x			lda 	_GHTokenTable,x
.1921	d0 f3		bne $1916			bne 	_GHCheckTokens
.1923	88		dey				dey
.1924					_GHCPairSkip:
.1924	c8		iny				iny
.1925					_GHCPair:
.1925	20 68 19	jsr $1968			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1928	4c f6 18	jmp $18f6			jmp 	_GHLoop
.192b					_GHFoundToken:
.192b	c8		iny				iny 								; skip token (INK/PAPER etc.)
.192c	da		phx				phx
.192d	a9 00		lda #$00			lda 	#0 							; evaluate byte
.192f	a2 0c		ldx #$0c		ldx	#12
.1931	20 23 40	jsr $4023		jsr	mainHandler
.1934	fa		plx				plx
.1935	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1937	9d fe 0b	sta $0bfe,x			sta 	gModifiers,x 				; update the modifiers
.193a	4c f6 18	jmp $18f6			jmp 	_GHLoop 					; and loop back
.193d					_GHCallHandler:
.193d	c8		iny				iny 								; consume AT or TO.
.193e	20 68 19	jsr $1968			jsr 	GHMakeCurrent 				; update the coordinates.
.1941	5a		phy				phy
.1942	20 49 19	jsr $1949			jsr 	_GHCallHandlerCode 			; call the handler code
.1945	7a		ply				ply
.1946	4c f6 18	jmp $18f6			jmp 	_GHLoop 					; and loop round.
.1949					_GHCallHandlerCode:
.1949	6c fc 0b	jmp ($0bfc)			jmp 	(gWordHandler)
.194c					_GHExit:
.194c	60		rts				rts
.194d					_GHText:
.194d	c8		iny				iny 								; skip token
.194e	a9 00		lda #$00			lda 	#0 							; get string.
.1950	a2 0e		ldx #$0e		ldx	#14
.1952	20 23 40	jsr $4023		jsr	mainHandler
.1955	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.1957	8d 07 0c	sta $0c07			sta 	gdText
.195a	a5 a0		lda $a0				lda 	esInt1
.195c	8d 08 0c	sta $0c08			sta 	gdText+1
.195f	4c f6 18	jmp $18f6			jmp 	_GHLoop
.1962					_GHTokenTable:
>1962	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1967	00						.byte 	0
.1968					GHMakeCurrent:
.1968	da		phx				phx
.1969	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.196b	20 7a 19	jsr $197a			jsr 	_GHMCDoIt
.196e	a2 02		ldx #$02		ldx	#2
.1970	20 23 40	jsr $4023		jsr	mainHandler
.1973	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1975	20 7a 19	jsr $197a			jsr 	_GHMCDoIt
.1978	fa		plx				plx
.1979	60		rts				rts
.197a					_GHMCDoIt:
.197a	bd e8 0b	lda $0be8,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.197d	9d ec 0b	sta $0bec,x			sta 	gX1,x
.1980	bd e9 0b	lda $0be9,x			lda 	gCurrentXPos+1,x
.1983	9d ed 0b	sta $0bed,x			sta 	gX1+1,x
.1986	da		phx				phx
.1987	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1989	a2 0a		ldx #$0a		ldx	#10
.198b	20 23 40	jsr $4023		jsr	mainHandler
.198e	fa		plx				plx
.198f	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1991	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1994	a5 a0		lda $a0				lda 	esInt1
.1996	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1999	b0 17		bcs $19b2			bcs 	_GMHCRange
.199b	a5 a8		lda $a8				lda 	esInt2
.199d	05 b0		ora $b0				ora 	esInt3
.199f	d0 11		bne $19b2			bne 	_GMHCRange
.19a1	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.19a3	9d e8 0b	sta $0be8,x			sta 	gCurrentXPos,x
.19a6	9d f0 0b	sta $0bf0,x			sta 	gX2,x
.19a9	a5 a0		lda $a0				lda 	esInt1
.19ab	9d e9 0b	sta $0be9,x			sta 	gCurrentXPos+1,x
.19ae	9d f1 0b	sta $0bf1,x			sta 	gX2+1,x
.19b1	60		rts				rts
.19b2					_GMHCRange:
.19b2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19b4	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c09					gdySign:
>0c09							.fill 	1
.19b7					Command_Line:
.19b7	a9 bf		lda #$bf			lda 	#LineHandler & $FF
.19b9	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.19bb	20 e9 18	jsr $18e9			jsr 	GHandler
.19be	60		rts				rts
.19bf					LineHandler:
.19bf	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19c1	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c3	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.19c6	f0 09		beq $19d1			beq 	_LHRectCode
.19c8	a2 02		ldx #$02			ldx 	#gY1-gX1
.19ca	a0 06		ldy #$06			ldy 	#gY2-gX1
.19cc	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.19cf	d0 03		bne $19d4			bne 	_LHLineDrawer
.19d1					_LHRectCode:
.19d1	4c 04 1b	jmp $1b04			jmp 	RectHandler
.19d4					_LHLineDrawer:
.19d4	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19d6	a0 04		ldy #$04			ldy 	#gX2-gX1
.19d8	20 88 1c	jsr $1c88			jsr 	CompareCoords
.19db	90 0a		bcc $19e7			bcc 	_LHNoSwap
.19dd	20 d0 1c	jsr $1cd0			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19e0	a2 02		ldx #$02			ldx 	#gY1-gX1
.19e2	a0 06		ldy #$06			ldy 	#gY2-gX1
.19e4	20 d0 1c	jsr $1cd0			jsr 	GSwapCoords
.19e7					_LHNoSwap:
.19e7	20 10 1a	jsr $1a10			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19ea	a0 00		ldy #$00			ldy 	#gX1-gX1
.19ec	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19ef	b0 15		bcs $1a06			bcs 	_LHExit 					; line off screen.
.19f1					_LHDrawLoop:
.19f1	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19f3	a0 04		ldy #$04			ldy 	#gX2-gX1
.19f5	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.19f8	d0 0d		bne $1a07			bne 	_LHNextPixel
.19fa	a2 06		ldx #$06			ldx 	#gY2-gX1
.19fc	a0 06		ldy #$06			ldy 	#gY2-gX1
.19fe	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.1a01	d0 04		bne $1a07			bne 	_LHNextPixel
.1a03	20 4a 1d	jsr $1d4a			jsr 	gdPlotInk 					; plot the last pixel.
.1a06					_LHExit:
.1a06	60		rts				rts
.1a07					_LHNextPixel:
.1a07	20 4a 1d	jsr $1d4a			jsr 	gdPlotInk 					; plot the pixel.
.1a0a	20 64 1a	jsr $1a64			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.1a0d	4c f1 19	jmp $19f1			jmp  	_LHDrawLoop 				; and loop back if okay
.1a10					BresenhamInitialise:
.1a10	38		sec				sec
.1a11	ad f0 0b	lda $0bf0			lda 	gX2
.1a14	ed ec 0b	sbc $0bec			sbc 	gX1
.1a17	8d f8 0b	sta $0bf8			sta 	gdX
.1a1a	ad f1 0b	lda $0bf1			lda 	gX2+1
.1a1d	ed ed 0b	sbc $0bed			sbc 	gX1+1
.1a20	8d f9 0b	sta $0bf9			sta 	gdX+1
.1a23	38		sec				sec
.1a24	ad ee 0b	lda $0bee			lda 	gY1
.1a27	ed f2 0b	sbc $0bf2			sbc 	gY2
.1a2a	8d fa 0b	sta $0bfa			sta 	gdy
.1a2d	ad ef 0b	lda $0bef			lda 	gY1+1
.1a30	ed f3 0b	sbc $0bf3			sbc 	gY2+1
.1a33	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a36	ad fb 0b	lda $0bfb			lda 	gdy+1 						; save sign of dy
.1a39	8d 09 0c	sta $0c09			sta 	gdysign
.1a3c	30 12		bmi $1a50			bmi 	_BINormal
.1a3e	38		sec				sec
.1a3f	a9 00		lda #$00			lda 	#0
.1a41	ed fa 0b	sbc $0bfa			sbc 	gdy
.1a44	8d fa 0b	sta $0bfa			sta 	gdy
.1a47	a9 00		lda #$00			lda 	#0
.1a49	ed fb 0b	sbc $0bfb			sbc 	gdy+1
.1a4c	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a4f	60		rts				rts
.1a50					_BINormal:
.1a50	18		clc				clc
.1a51	ad f8 0b	lda $0bf8			lda 	gdx
.1a54	6d fa 0b	adc $0bfa			adc 	gdy
.1a57	8d f4 0b	sta $0bf4			sta 	gError
.1a5a	ad f9 0b	lda $0bf9			lda 	gdx+1
.1a5d	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a60	8d f5 0b	sta $0bf5			sta 	gError+1
.1a63	60		rts				rts
.1a64					BresenhamIteration:
.1a64	ad f4 0b	lda $0bf4			lda 	gError
.1a67	0a		asl a				asl 	a
.1a68	8d f6 0b	sta $0bf6			sta 	g2Error
.1a6b	ad f5 0b	lda $0bf5			lda 	gError+1
.1a6e	2a		rol a				rol 	a
.1a6f	8d f7 0b	sta $0bf7			sta 	g2Error+1
.1a72	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a74	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a76	20 95 1c	jsr $1c95			jsr 	CompareCoordsSigned
.1a79	30 03		bmi $1a7e			bmi 	_BINoE2DY
.1a7b	20 8b 1a	jsr $1a8b			jsr 	BresenhamE2GEDY
.1a7e					_BINoE2DY:
.1a7e	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a80	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a82	20 95 1c	jsr $1c95			jsr 	CompareCoordsSigned
.1a85	30 03		bmi $1a8a			bmi 	_BINoDXE2
.1a87	20 aa 1a	jsr $1aaa			jsr 	BresenhamDXGEE2
.1a8a					_BINoDXE2:
.1a8a	60		rts				rts
.1a8b					BresenhamE2GEDY:
.1a8b	18		clc				clc
.1a8c	ad f4 0b	lda $0bf4			lda 	gError
.1a8f	6d fa 0b	adc $0bfa			adc 	gdy
.1a92	8d f4 0b	sta $0bf4			sta 	gError
.1a95	ad f5 0b	lda $0bf5			lda 	gError+1
.1a98	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a9b	8d f5 0b	sta $0bf5			sta 	gError+1
.1a9e	ee ec 0b	inc $0bec			inc 	gX1
.1aa1	d0 03		bne $1aa6			bne 	_BE2Skip
.1aa3	ee ed 0b	inc $0bed			inc 	gX1+1
.1aa6					_BE2Skip:
.1aa6	20 ed 1c	jsr $1ced			jsr 	gdMvRight
.1aa9	60		rts				rts
.1aaa					BresenhamDXGEE2:
.1aaa	18		clc				clc
.1aab	ad f4 0b	lda $0bf4			lda 	gError
.1aae	6d f8 0b	adc $0bf8			adc 	gdx
.1ab1	8d f4 0b	sta $0bf4			sta 	gError
.1ab4	ad f5 0b	lda $0bf5			lda 	gError+1
.1ab7	6d f9 0b	adc $0bf9			adc 	gdx+1
.1aba	8d f5 0b	sta $0bf5			sta 	gError+1
.1abd	ad 09 0c	lda $0c09			lda 	gdySign
.1ac0	10 0c		bpl $1ace			bpl 	_BEDXInvertY
.1ac2	ee ee 0b	inc $0bee			inc 	gY1
.1ac5	d0 03		bne $1aca			bne 	_BEDXSkip
.1ac7	ee ef 0b	inc $0bef			inc 	gY1+1
.1aca					_BEDXSkip:
.1aca	20 28 1d	jsr $1d28			jsr 	gdMvDown
.1acd	60		rts				rts
.1ace					_BEDXInvertY:
.1ace	ad ee 0b	lda $0bee			lda 	gY1
.1ad1	d0 03		bne $1ad6			bne 	_BEDXSkip2
.1ad3	ce ef 0b	dec $0bef			dec 	gY1+1
.1ad6					_BEDXSkip2:
.1ad6	ce ee 0b	dec $0bee			dec 	gY1
.1ad9	20 03 1d	jsr $1d03			jsr 	gdMvUp
.1adc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1add					Command_Plot:
.1add	a9 e5		lda #$e5			lda 	#PlotHandler & $FF
.1adf	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ae1	20 e9 18	jsr $18e9			jsr 	GHandler
.1ae4	60		rts				rts
.1ae5					PlotHandler:
.1ae5	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ae7	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X2,Y2 to draw e.g. plot to 100,100
.1aea	b0 03		bcs $1aef			bcs 	_PHExit 					; off screen, return with CS.
.1aec	20 4a 1d	jsr $1d4a			jsr 	gdPlotInk 					; pixel in Ink.
.1aef	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c0a					frameFlag:
>0c0a							.fill 	1
.1af0					Command_Rect:
.1af0	a9 04		lda #$04			lda 	#RectHandler & $FF
.1af2	a2 1b		ldx #$1b			ldx 	#RectHandler >> 8
.1af4	20 e9 18	jsr $18e9			jsr 	GHandler
.1af7	60		rts				rts
.1af8					Command_Frame:
.1af8	a9 00		lda #$00			lda 	#FrameHandler & $FF
.1afa	a2 1b		ldx #$1b			ldx 	#FrameHandler >> 8
.1afc	20 e9 18	jsr $18e9			jsr 	GHandler
.1aff	60		rts				rts
.1b00					FrameHandler:
.1b00	a9 01		lda #$01			lda 	#1 							; set frame flag to 1/0 on entry.
.1b02	d0 02		bne $1b06			bne 	FRHandlerMain
.1b04					RectHandler:
.1b04	a9 00		lda #$00			lda 	#0
.1b06					FRHandlerMain:
.1b06	8d 0a 0c	sta $0c0a			sta 	frameFlag
.1b09	20 ac 1c	jsr $1cac			jsr 	BoxSort 					; sort so topleft/bottom right
.1b0c	20 35 1b	jsr $1b35			jsr 	DrawBoxPart 				; solid first line
.1b0f					_FHLoop:
.1b0f	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1b11	a0 06		ldy #$06			ldy 	#gY2-gX1
.1b13	20 88 1c	jsr $1c88			jsr 	CompareCoords
.1b16	b0 19		bcs $1b31			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1b18	ad 0a 0c	lda $0c0a			lda 	frameFlag 					; identify solid or frame ?
.1b1b	f0 06		beq $1b23			beq 	_FHIsSolidRect 				; if solid, draw the solid line.
.1b1d	20 4e 1b	jsr $1b4e			jsr 	DrawBoxEnds					; otherwise draw just the start and end
.1b20	4c 26 1b	jmp $1b26			jmp 	_FHNext
.1b23					_FHIsSolidRect:
.1b23	20 35 1b	jsr $1b35			jsr 	DrawBoxPart
.1b26					_FHNext:
.1b26	ee ee 0b	inc $0bee			inc 	gY1 						; bump Y1 and loop back.
.1b29	d0 e4		bne $1b0f			bne 	_FHLoop
.1b2b	ee ef 0b	inc $0bef			inc 	gY1+1
.1b2e	4c 0f 1b	jmp $1b0f			jmp 	_FHLoop
.1b31					_FHLastLine:
.1b31	20 35 1b	jsr $1b35			jsr 	DrawBoxPart 				; solid last line whatever
.1b34					_FHExit:
.1b34	60		rts				rts
.1b35					DrawBoxPart:
.1b35	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b37	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b3a	38		sec				sec 								; calculate line length => temp0
.1b3b	ad f0 0b	lda $0bf0			lda 	gX2
.1b3e	ed ec 0b	sbc $0bec			sbc 	gX1
.1b41	48		pha				pha
.1b42	ad f1 0b	lda $0bf1			lda 	gX2+1
.1b45	ed ed 0b	sbc $0bed			sbc 	gx1+1
.1b48	aa		tax				tax
.1b49	68		pla				pla 								; line length in XA.
.1b4a	20 66 1b	jsr $1b66			jsr 	DrawHorizontalLine
.1b4d	60		rts				rts
.1b4e					DrawBoxEnds:
.1b4e	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b50	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b53	20 4a 1d	jsr $1d4a			jsr 	gdPlotInk 					; LH end.
.1b56	ad f0 0b	lda $0bf0			lda 	gX2 						; set position to X2,Y1
.1b59	ae f1 0b	ldx $0bf1			ldx 	gX2+1
.1b5c	20 39 1e	jsr $1e39			jsr 	gdSetX
.1b5f	20 5c 1d	jsr $1d5c			jsr		gdSetDrawPosition 			; update position.
.1b62	20 4a 1d	jsr $1d4a			jsr 	gdPlotInk 					; RH end.
.1b65	60		rts				rts
.1b66					DrawHorizontalLine:
.1b66	86 32		stx $32				stx 	tempShort
.1b68	aa		tax				tax
.1b69	a4 32		ldy $32				ldy 	tempShort
.1b6b	ad fe 0b	lda $0bfe			lda 	gdInk
.1b6e	4c 47 1e	jmp $1e47			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c0b					RenderFunction:
>0c0b							.fill 	2
.0c0d					RenderWidth:
>0c0d							.fill 	1
.0c0e					RenderHeight:
>0c0e							.fill 	1
.0c0f					RenderType:
>0c0f							.fill 	1
.0c10					RenderCache:
>0c10							.fill 	64
.1b71					ImageRenderer:
.1b71	8e 0c 0c	stx $0c0c			stx 	RenderFunction+1
.1b74	8d 0b 0c	sta $0c0b			sta 	RenderFunction
.1b77	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b79	20 5a 1c	jsr $1c5a			jsr 	CallRenderFunction
.1b7c	8d 0f 0c	sta $0c0f			sta 	RenderType 					; and save it.
.1b7f	8e 0d 0c	stx $0c0d			stx 	RenderWidth
.1b82	8c 0e 0c	sty $0c0e			sty 	RenderHeight
.1b85	8a		txa				txa 								; check X coordinate
.1b86	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b88	20 21 1c	jsr $1c21			jsr 	RenderCheckRange 			; this checks and throws error if off screen.
.1b8b	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; check Y coordinate
.1b8e	a2 02		ldx #$02			ldx 	#2
.1b90	20 21 1c	jsr $1c21			jsr 	RenderCheckRange
.1b93	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b95					_IRLoop1:
.1b95	5a		phy				phy
.1b96	20 fd 1b	jsr $1bfd			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1b99	20 5a 1c	jsr $1c5a			jsr 	CallRenderFunction 			; fill the rendering cache for this row.
.1b9c	7a		ply				ply
.1b9d	ae 00 0c	ldx $0c00			ldx 	gdSize 						; number of times to do the row is the scale value
.1ba0					_IRLoop2:
.1ba0	20 ad 1b	jsr $1bad			jsr 	RenderDrawRow 				; draw one row.
.1ba3	ca		dex				dex 								; scale # times.
.1ba4	d0 fa		bne $1ba0			bne 	_IRLoop2
.1ba6	c8		iny				iny 								; next vertical row
.1ba7	cc 0e 0c	cpy $0c0e			cpy 	RenderHeight 				; done the lot ?
.1baa	d0 e9		bne $1b95			bne 	_IRLoop1
.1bac	60		rts				rts
.1bad					RenderDrawRow:
.1bad	da		phx				phx
.1bae	5a		phy				phy
.1baf	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1bb1	20 72 1c	jsr $1c72			jsr 	SetupXY
.1bb4	7a		ply				ply
.1bb5	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1bb7					_RDRLoop1:
.1bb7	20 ca 1b	jsr $1bca			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1bba	e8		inx				inx
.1bbb	ec 0d 0c	cpx $0c0d			cpx 	RenderWidth 				; until done the whole lot.
.1bbe	d0 f7		bne $1bb7			bne 	_RDRLoop1
.1bc0	ee f2 0b	inc $0bf2			inc 	gY2 						; next line down
.1bc3	d0 03		bne $1bc8			bne 	_RDRNoCarry
.1bc5	ee f3 0b	inc $0bf3			inc 	gY2+1
.1bc8					_RDRNoCarry:
.1bc8	fa		plx				plx
.1bc9	60		rts				rts
.1bca					RenderDrawPixelSet:
.1bca	da		phx				phx
.1bcb	5a		phy				phy
.1bcc	20 fd 1b	jsr $1bfd			jsr 	RenderFlipXY 				; flip positions as required.
.1bcf	20 e7 1b	jsr $1be7			jsr 	RenderGetInk				; get colour to draw with.
.1bd2	ae 00 0c	ldx $0c00			ldx 	gdSize 						; X counts the size.
.1bd5					_RDPSLoop:
.1bd5	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bd7	f0 03		beq $1bdc			beq 	_RDPSNoDraw
.1bd9	20 4d 1d	jsr $1d4d			jsr 	gdPlotA 					; draw A otherwise
.1bdc					_RDPSNoDraw:
.1bdc	48		pha				pha 								; move right
.1bdd	20 ed 1c	jsr $1ced			jsr 	gdMvRight
.1be0	68		pla				pla
.1be1	ca		dex				dex
.1be2	d0 f1		bne $1bd5			bne 	_RDPSLoop 					; do it size times.
.1be4	7a		ply				ply
.1be5	fa		plx				plx
.1be6	60		rts				rts
.1be7					RenderGetInk:
.1be7	ad 0f 0c	lda $0c0f			lda 	RenderType 					; type, if 0 it's a bitmap
.1bea	f0 04		beq $1bf0			beq 	_RGIBitmap
.1bec	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bef	60		rts				rts
.1bf0					_RGIBitmap:
.1bf0	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bf3	f0 04		beq $1bf9			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bf5	ad fe 0b	lda $0bfe			lda 	gdInk
.1bf8	60		rts				rts
.1bf9					_RGIBPaper:
.1bf9	ad ff 0b	lda $0bff			lda 	gdPaper
.1bfc	60		rts				rts
.1bfd					RenderFlipXY:
.1bfd	ad 02 0c	lda $0c02			lda 	gdFlip 						; check any flip at all
.1c00	29 03		and #$03			and 	#3
.1c02	f0 1c		beq $1c20			beq 	_RFExit
.1c04	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1c05	90 09		bcc $1c10			bcc 	_RFNoHFlip
.1c07	ad 0d 0c	lda $0c0d			lda 	RenderWidth 				; X Flip
.1c0a	86 32		stx $32				stx 	tempShort
.1c0c	18		clc				clc
.1c0d	e5 32		sbc $32				sbc 	tempShort
.1c0f	aa		tax				tax
.1c10					_RFNoHFlip:
.1c10	ad 02 0c	lda $0c02			lda 	gdFlip
.1c13	29 02		and #$02			and 	#2 							; bit 1 check
.1c15	f0 09		beq $1c20			beq 	_RFExit
.1c17	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; Y Flip
.1c1a	84 32		sty $32				sty 	tempShort
.1c1c	18		clc				clc
.1c1d	e5 32		sbc $32				sbc 	tempShort
.1c1f	a8		tay				tay
.1c20					_RFExit:
.1c20	60		rts				rts
.1c21					RenderCheckRange:
.1c21	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1c23	ac 00 0c	ldy $0c00			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1c26	84 2a		sty $2a				sty 	temp0
.1c28	f0 2b		beq $1c55			beq 	_RCRValue
.1c2a	a9 00		lda #$00			lda 	#0 							; total
.1c2c					_RCRMultiply:
.1c2c	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c2e	90 05		bcc $1c35			bcc 	_RCRNoAdd 					; not adding this time.
.1c30	18		clc				clc
.1c31	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c33	b0 20		bcs $1c55			bcs 	_RCRValue 					; overflow
.1c35					_RCRNoAdd:
.1c35	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c37	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c39	d0 f1		bne $1c2c			bne 	_RCRMultiply
.1c3b	18		clc				clc 								; add to x2 or y2, store in temp0
.1c3c	7d f0 0b	adc $0bf0,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c3f	85 2a		sta $2a				sta 	temp0
.1c41	bd f1 0b	lda $0bf1,x			lda 	gX2+1,x
.1c44	69 00		adc #$00			adc 	#0
.1c46	85 2b		sta $2b				sta 	temp0+1
.1c48	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c4a	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1c4d	a5 2b		lda $2b				lda 	temp0+1
.1c4f	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1c52	b0 01		bcs $1c55			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c54	60		rts				rts
.1c55					_RCRValue:
.1c55	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c57	20 27 15	jsr $1527		jsr	errorHandler
.1c5a					CallRenderFunction:
.1c5a	6c 0b 0c	jmp ($0c0b)			jmp 	(RenderFunction)
.1c5d					TestImageAccess:
.1c5d	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c5f	f0 0a		beq $1c6b			beq 	_TIAGetInfo
.1c61	a0 3f		ldy #$3f			ldy 	#63
.1c63					_TIACreate:
.1c63	98		tya				tya
.1c64	99 10 0c	sta $0c10,y			sta 	RenderCache,y
.1c67	88		dey				dey
.1c68	10 f9		bpl $1c63			bpl 	_TIACreate
.1c6a	60		rts				rts
.1c6b					_TIAGetInfo:
.1c6b	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c6d	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c6f	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c71	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c72					SetupXY:
.1c72	b9 ec 0b	lda $0bec,y			lda 	gX1,y 						; set the X position
.1c75	be ed 0b	ldx $0bed,y			ldx 	gX1+1,y
.1c78	20 39 1e	jsr $1e39			jsr 	gdSetX
.1c7b	b9 ee 0b	lda $0bee,y			lda 	gY1,y 						; set the Y position
.1c7e	be ef 0b	ldx $0bef,y			ldx 	gY1+1,y
.1c81	20 40 1e	jsr $1e40			jsr 	gdSetY
.1c84	20 5c 1d	jsr $1d5c			jsr 	gdSetDrawPosition 			; recalculate and set up Vera.
.1c87	60		rts				rts
.1c88					CompareCoords:
.1c88	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c8b	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c8e	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1c91	f9 ed 0b	sbc $0bed,y			sbc 	gX1+1,y
.1c94	60		rts				rts
.1c95					CompareCoordsSigned:
.1c95	20 88 1c	jsr $1c88			jsr 	CompareCoords
.1c98	50 02		bvc $1c9c			bvc 	_CCSExit
.1c9a	49 80		eor #$80			eor 	#$80
.1c9c					_CCSExit:
.1c9c	60		rts				rts
.1c9d					CompareCoordsEq:
.1c9d	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1ca0	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1ca3	d0 06		bne $1cab			bne 	_CCEExit
.1ca5	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1ca8	d9 ed 0b	cmp $0bed,y			cmp 	gX1+1,y
.1cab					_CCEExit:
.1cab	60		rts				rts
.1cac					BoxSort:
.1cac	a2 00		ldx #$00			ldx 	#gx1-gx1
.1cae	a0 04		ldy #$04			ldy 	#gx2-gx1
.1cb0	20 c1 1c	jsr $1cc1			jsr 	GCompareCoords
.1cb3	20 ce 1c	jsr $1cce			jsr 	GSortMinMaxCoords
.1cb6	a2 02		ldx #$02			ldx 	#gy1-gx1
.1cb8	a0 06		ldy #$06			ldy 	#gy2-gx1
.1cba	20 c1 1c	jsr $1cc1			jsr 	GCompareCoords
.1cbd	20 ce 1c	jsr $1cce			jsr 	GSortMinMaxCoords
.1cc0	60		rts				rts
.1cc1					GCompareCoords:
.1cc1	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1cc4	d9 ec 0b	cmp $0bec,y			cmp 	gx1,y
.1cc7	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1cca	f9 ed 0b	sbc $0bed,y			sbc 	gx1+1,y
.1ccd	60		rts				rts
.1cce					GSortMinMaxCoords:
.1cce	90 1c		bcc $1cec			bcc 	GSMMCExit
.1cd0					GSwapCoords:
.1cd0	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1cd3	48		pha				pha
.1cd4	b9 ec 0b	lda $0bec,y			lda 	gx1,y
.1cd7	9d ec 0b	sta $0bec,x			sta 	gx1,x
.1cda	68		pla				pla
.1cdb	99 ec 0b	sta $0bec,y			sta 	gx1,y
.1cde	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1ce1	48		pha				pha
.1ce2	b9 ed 0b	lda $0bed,y			lda 	gx1+1,y
.1ce5	9d ed 0b	sta $0bed,x			sta 	gx1+1,x
.1ce8	68		pla				pla
.1ce9	99 ed 0b	sta $0bed,y			sta 	gx1+1,y
.1cec					GSMMCExit:
.1cec	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1ced					gdMvRight:
.1ced	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; bump X16VeraAddLow
.1cf0	d0 08		bne $1cfa			bne 	_gdMR0
.1cf2	ee 21 9f	inc $9f21			inc 	X16VeraAddMed
.1cf5	d0 03		bne $1cfa			bne 	_gdMR0
.1cf7	ee 22 9f	inc $9f22			inc 	X16VeraAddHigh
.1cfa					_gdMR0:
.1cfa	ee 54 0c	inc $0c54			inc 	gdXPos
.1cfd	d0 03		bne $1d02			bne 	_gdMR1
.1cff	ee 55 0c	inc $0c55			inc 	gdXPos+1
.1d02					_gdMR1:
.1d02	60		rts				rts
.1d03					gdMvUp:
.1d03	ad 56 0c	lda $0c56			lda 	gdYPos 						; decrement Y Pos
.1d06	d0 03		bne $1d0b			bne 	_gdMU1
.1d08	ce 57 0c	dec $0c57			dec 	gdYPos+1
.1d0b	ce 56 0c	dec $0c56	_gdMU1:	dec 	gdYPos
.1d0e	38		sec				sec 								; adjust position by -320
.1d0f	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.1d12	e9 40		sbc #$40			sbc 	#GrWidth & $FF
.1d14	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d17	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.1d1a	e9 01		sbc #$01			sbc 	#GrWidth >> 8
.1d1c	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d1f	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh
.1d22	e9 00		sbc #$00			sbc 	#0
.1d24	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d27	60		rts				rts
.1d28					gdMvDown:
.1d28	ee 56 0c	inc $0c56			inc 	gdYPos 						; decrement Y Pos
.1d2b	d0 03		bne $1d30			bne 	_gdMU1
.1d2d	ee 57 0c	inc $0c57			inc 	gdYPos+1
.1d30					_gdMU1:
.1d30	18		clc				clc 								; adjust position by -320
.1d31	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.1d34	69 40		adc #$40			adc 	#GrWidth & $FF
.1d36	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d39	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.1d3c	69 01		adc #$01			adc 	#GrWidth >> 8
.1d3e	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d41	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh
.1d44	69 00		adc #$00			adc 	#0
.1d46	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d49	60		rts				rts
.1d4a					gdPlotInk:
.1d4a	ad fe 0b	lda $0bfe			lda 	gdInk
.1d4d					gdPlotA:
.1d4d	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1d50	60		rts				rts
.1d51					gdPlotPaper:
.1d51	ad ff 0b	lda $0bff			lda 	gdPaper
.1d54	c9 ff		cmp #$ff			cmp 	#$FF
.1d56	f0 03		beq $1d5b			beq 	_gdPPSkip
.1d58	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1d5b					_gdPPSkip:
.1d5b	60		rts				rts
.1d5c					gdSetDrawPosition:
.1d5c	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d5e	85 2a		sta $2a				sta 	temp0
.1d60	ad 56 0c	lda $0c56			lda 	gdYPos
.1d63	85 2b		sta $2b				sta 	temp0+1
.1d65	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d67	66 2a		ror $2a				ror 	temp0
.1d69	46 2b		lsr $2b				lsr 	temp0+1
.1d6b	66 2a		ror $2a				ror 	temp0
.1d6d	ad 56 0c	lda $0c56			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d70	18		clc				clc
.1d71	65 2b		adc $2b				adc 	temp0+1
.1d73	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d75	18		clc				clc
.1d76	a5 2a		lda $2a				lda 	temp0
.1d78	6d 54 0c	adc $0c54			adc 	gdXPos
.1d7b	85 2a		sta $2a				sta 	temp0
.1d7d	a5 2b		lda $2b				lda 	temp0+1
.1d7f	6d 55 0c	adc $0c55			adc 	gdXPos+1
.1d82	85 2b		sta $2b				sta 	temp0+1
.1d84	18		clc				clc 								; write bitmapaddress + temp0 to the vera address register
.1d85	ad 51 0c	lda $0c51			lda 	gdBitmapAddress
.1d88	65 2a		adc $2a				adc 	temp0
.1d8a	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d8d	ad 52 0c	lda $0c52			lda 	gdBitmapAddress+1
.1d90	65 2b		adc $2b				adc 	temp0+1
.1d92	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d95	ad 53 0c	lda $0c53			lda 	gdBitmapAddress+2
.1d98	69 00		adc #$00			adc 	#0
.1d9a	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d9d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c50					gdEnabled:
>0c50							.fill 	1
.0c51					gdBitmapAddress:
>0c51							.fill 	3
.0c54					gdXPos:
>0c54							.fill 	2
.0c56					gdYPos:
>0c56							.fill 	2
.1d9e					gdModeChanged:
.1d9e	da		phx				phx
.1d9f	5a		phy				phy
.1da0	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1da2	8d 50 0c	sta $0c50			sta 	gdEnabled
.1da5	ad 2a 9f	lda $9f2a			lda 	X16VeraHScale 				; requires $40 for H/V Scale
.1da8	c9 40		cmp #$40			cmp 	#$40
.1daa	d0 1f		bne $1dcb			bne 	_gdExit
.1dac	ad 2b 9f	lda $9f2b			lda 	X16VeraVScale
.1daf	c9 40		cmp #$40			cmp 	#$40
.1db1	d0 18		bne $1dcb			bne 	_gdExit
.1db3	ad 29 9f	lda $9f29			lda 	X16VeraDCVideo 				; read DC_Video, see which layers are enabled.
.1db6	0a		asl a				asl 	a 							;
.1db7	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1db8	10 09		bpl $1dc3			bpl 	_gdNotLayer1
.1dba	48		pha				pha 								; save A
.1dbb	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1dbd	20 d1 1d	jsr $1dd1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dc0	68		pla				pla 								; restore A
.1dc1	b0 08		bcs $1dcb			bcs 	_gdExit 					; if successful then exit
.1dc3					_gdNotLayer1:
.1dc3	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1dc4	10 05		bpl $1dcb			bpl 	_gdExit 					; if not enabled, exit
.1dc6	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at X16VeraLayerConfig)
.1dc8	20 d1 1d	jsr $1dd1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dcb					_gdExit:
.1dcb	20 05 1e	jsr $1e05			jsr 	gdClearGraphics 			; clear graphics display.
.1dce	7a		ply				ply
.1dcf	fa		plx				plx
.1dd0	60		rts				rts
.1dd1					gdCheckBitmap:
.1dd1	bd 2d 9f	lda $9f2d,x			lda 	X16VeraLayerConfig,x 		; look at bitmap bit.
.1dd4	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1dd6	d0 14		bne $1dec			bne 	_gdCBFail
.1dd8	ee 50 0c	inc $0c50			inc 	gdEnabled 					; set the enabled flag to non zero.
.1ddb	bd 2f 9f	lda $9f2f,x			lda 	X16VeraLayerTileBase,x 		; this is the bitmap address / 2
.1dde	0a		asl a				asl 	a
.1ddf	8d 52 0c	sta $0c52			sta 	gdBitmapAddress+1
.1de2	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1de4	8d 53 0c	sta $0c53			sta 	gdBitmapAddress+2
.1de7	a9 00		lda #$00			lda 	#$00
.1de9	8d 51 0c	sta $0c51			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dec					_gdCBFail:
.1dec	18		clc				clc
.1ded	60		rts				rts
.1dee					CommandClg:
.1dee	b1 28		lda ($28),y			lda 	(codePtr),y 				; CLG PAPER x
.1df0	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1df2	d0 0d		bne $1e01			bne 	_CCLClear
.1df4	c8		iny				iny 								; skip paper
.1df5	a9 00		lda #$00			lda 	#0 							; get paper and update
.1df7	a2 0c		ldx #$0c		ldx	#12
.1df9	20 23 40	jsr $4023		jsr	mainHandler
.1dfc	a5 98		lda $98				lda 	esInt0
.1dfe	8d ff 0b	sta $0bff			sta 	gdPaper
.1e01					_CCLClear:
.1e01	20 05 1e	jsr $1e05			jsr 	gdClearGraphics 			; call graphics clear code.
.1e04	60		rts				rts
.1e05					gdClearGraphics:
.1e05	da		phx				phx
.1e06	5a		phy				phy
.1e07	ad 50 0c	lda $0c50			lda 	gdEnabled 					; bitmap screen enabled ?
.1e0a	f0 2a		beq $1e36			beq 	_gdCGExit 					; no, then can't clear
.1e0c	a9 40		lda #$40			lda 	#(GrWidth) & $FF
.1e0e	8d 03 0c	sta $0c03			sta 	gdXLimit
.1e11	a9 01		lda #$01			lda 	#(GrWidth) >> 8
.1e13	8d 04 0c	sta $0c04			sta 	1+(gdXLimit)
.1e16	a9 c8		lda #$c8			lda 	#(GrHeight) & $FF
.1e18	8d 05 0c	sta $0c05			sta 	gdYLimit
.1e1b	a9 00		lda #$00			lda 	#(GrHeight) >> 8
.1e1d	8d 06 0c	sta $0c06			sta 	1+(gdYLimit)
.1e20	a9 00		lda #$00			lda 	#0 							; home cursor
.1e22	aa		tax				tax
.1e23	20 39 1e	jsr $1e39			jsr 	gdSetX
.1e26	20 40 1e	jsr $1e40			jsr 	gdSetY
.1e29	20 5c 1d	jsr $1d5c			jsr 	gdSetDrawPosition 			; set the draw position.
.1e2c	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e2e	a2 00		ldx #$00			ldx 	#0
.1e30	ad ff 0b	lda $0bff			lda 	gdPaper
.1e33	20 47 1e	jsr $1e47			jsr 	gdOptHorizontalWriter		; call the optimised horizontal writer to do $FA00 of A
.1e36					_gdCGExit:
.1e36	7a		ply				ply
.1e37	fa		plx				plx
.1e38	60		rts				rts
.1e39					gdSetX:
.1e39	8d 54 0c	sta $0c54			sta 	gdXPos
.1e3c	8e 55 0c	stx $0c55			stx 	gdXPos+1
.1e3f	60		rts				rts
.1e40					gdSetY:
.1e40	8d 56 0c	sta $0c56			sta 	gdYPos
.1e43	8e 57 0c	stx $0c57			stx 	gdYPos+1
.1e46	60		rts				rts
.1e47					gdOptHorizontalWriter:
.1e47	48		pha				pha
.1e48	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh 						; make it autoincrement.
.1e4b	09 10		ora #$10			ora 	#$10
.1e4d	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1e50	68		pla				pla
.1e51					_gdOLoop:
.1e51	8d 23 9f	sta $9f23			sta 	X16VeraData0						; write colour out.
.1e54	e0 00		cpx #$00			cpx 	#0 									; exit if X = Y = 0
.1e56	d0 05		bne $1e5d			bne 	_gdNoBorrow 						; decrement YX in here.
.1e58	c0 00		cpy #$00			cpy 	#0
.1e5a	f0 05		beq $1e61			beq 	_gdExit
.1e5c	88		dey				dey 			 							; X 0 so borrow from Y
.1e5d					_gdNoBorrow:
.1e5d	ca		dex				dex
.1e5e	4c 51 1e	jmp $1e51			jmp 	_gdOLoop
.1e61					_gdExit:
.1e61	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e62					Unary_Clock:
.1e62	a2 0c		ldx #$0c		ldx	#12
.1e64	20 23 40	jsr $4023		jsr	mainHandler
.1e67	48		pha				pha 								; save stack pos
.1e68	a2 04		ldx #$04		ldx	#4
.1e6a	20 23 40	jsr $4023		jsr	mainHandler
.1e6d	5a		phy				phy
.1e6e	20 50 ff	jsr $ff50			jsr 	X16KReadRTC
.1e71	7a		ply				ply
.1e72	68		pla				pla 								; restore, repush, put into X to read offset
.1e73	48		pha				pha
.1e74	aa		tax				tax
.1e75	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e77	c9 06		cmp #$06			cmp 	#6
.1e79	b0 0d		bcs $1e88			bcs 	_UCValue
.1e7b	aa		tax				tax 								; index in X and read RTC.
.1e7c	b5 02		lda $02,x			lda 	2,x
.1e7e	85 32		sta $32				sta 	tempshort
.1e80	68		pla				pla 								; restore number stack index.
.1e81	aa		tax				tax
.1e82	a5 32		lda $32				lda 	tempShort
.1e84	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e86	8a		txa				txa
.1e87	60		rts				rts
.1e88					_UCValue:
.1e88	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e8a	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e8d					Unary_JoyX:
.1e8d	38		sec				sec
.1e8e	b0 01		bcs $1e91			bcs 	JoystickRead
.1e90					Unary_JoyY:
.1e90	18		clc				clc
.1e91					JoystickRead:
.1e91	48		pha				pha 								; save stack position
.1e92	08		php				php 								; save test flag.
.1e93	a2 04		ldx #$04		ldx	#4
.1e95	20 23 40	jsr $4023		jsr	mainHandler
.1e98	20 ef 1e	jsr $1eef			jsr 	ReadJoystick 				; read it.
.1e9b	28		plp				plp 								; get back axis
.1e9c	b0 02		bcs $1ea0			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y axis buttons
.1e9e	4a		lsr a				lsr 	a
.1e9f	4a		lsr a				lsr 	a
.1ea0					_JRNoShift:
.1ea0	29 03		and #$03			and 	#3 							; isolate the test bits.
.1ea2	f0 0d		beq $1eb1			beq 	JoyReturnA 					; if nothing pressed, return A.
.1ea4	c9 03		cmp #$03			cmp 	#3
.1ea6	f0 07		beq $1eaf			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1ea8	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1ea9	b0 15		bcs $1ec0			bcs 	JoyReturn1
.1eab					JoyReturnTrue:
.1eab	a9 ff		lda #$ff			lda 	#$FF
.1ead	d0 02		bne $1eb1			bne 	JoyReturnA
.1eaf					JoyReturnFalse:
.1eaf	a9 00		lda #$00			lda 	#0
.1eb1					JoyReturnA:
.1eb1	85 32		sta $32				sta 	tempShort 					; return A
.1eb3	fa		plx				plx
.1eb4	a5 32		lda $32				lda 	tempShort
.1eb6	95 98		sta $98,x			sta 	esInt0,x
.1eb8					JoyReturn13:
.1eb8	95 a0		sta $a0,x			sta 	esInt1,x
.1eba	95 a8		sta $a8,x			sta 	esInt2,x
.1ebc	95 b0		sta $b0,x			sta 	esInt3,x
.1ebe	8a		txa				txa 								; return NSP in A
.1ebf	60		rts				rts
.1ec0					JoyReturn1:
.1ec0	fa		plx				plx
.1ec1	a9 01		lda #$01			lda 	#1
.1ec3	95 98		sta $98,x			sta 	esInt0,x
.1ec5	a9 00		lda #$00			lda 	#0
.1ec7	f0 ef		beq $1eb8			beq 	JoyReturn13
.1ec9					Unary_JButton:
.1ec9	48		pha				pha 								; save X on stack, put in X
.1eca	a2 0c		ldx #$0c		ldx	#12
.1ecc	20 23 40	jsr $4023		jsr	mainHandler
.1ecf	aa		tax				tax 								; get value to check, push on stack.
.1ed0	b5 98		lda $98,x			lda 	esInt0,x
.1ed2	c9 04		cmp #$04			cmp 	#4 							; check button # 0-3
.1ed4	b0 14		bcs $1eea			bcs 	_UJBadValue
.1ed6	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ed8	48		pha				pha 								; save that shift count on the stack.
.1ed9	a2 04		ldx #$04		ldx	#4
.1edb	20 23 40	jsr $4023		jsr	mainHandler
.1ede	fa		plx				plx
.1edf	20 ef 1e	jsr $1eef			jsr 	ReadJoystick 				; joystick read
.1ee2					_UJShift:
.1ee2	4a		lsr a				lsr 	a
.1ee3	ca		dex				dex
.1ee4	d0 fc		bne $1ee2			bne 	_UJShift
.1ee6	b0 c3		bcs $1eab			bcs 	JoyReturnTrue
.1ee8	90 c5		bcc $1eaf			bcc 	JoyReturnFalse
.1eea					_UJBadValue:
.1eea	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1eec	20 27 15	jsr $1527		jsr	errorHandler
.1eef					ReadJoystick:
.1eef	da		phx				phx
.1ef0	5a		phy				phy
.1ef1	a9 00		lda #$00			lda 	#0
.1ef3	20 56 ff	jsr $ff56			jsr 	X16KReadJoystick
.1ef6	c0 00		cpy #$00			cpy 	#0
.1ef8	d0 0f		bne $1f09			bne 	_RJError
.1efa	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially, which means all the
.1efc	d0 02		bne $1f00			bne 	_RJNoBug 					; buttons are pressed, so we assume you haven't actually
.1efe	a9 ff		lda #$ff			lda 	#$FF 						; done this !
.1f00					_RJNoBug:
.1f00	85 32		sta $32				sta 	tempShort
.1f02	7a		ply				ply
.1f03	fa		plx				plx
.1f04	a5 32		lda $32				lda 	tempShort
.1f06	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1f08	60		rts				rts
.1f09					_RJError:
.1f09	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f0b	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndqueue.asm

.1f0e					SoundAddQueue:
.1f0e	86 2a		stx $2a				stx 	temp0 						; save XY in temp0
.1f10	84 2b		sty $2b				sty 	temp0+1
.1f12	a2 00		ldx #$00			ldx 	#0 							; look for empty spot.
.1f14					_SAQFind:
.1f14	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; check if first byte (time) zero means clear.
.1f17	f0 0e		beq $1f27			beq 	_SAQFound
.1f19	8a		txa				txa 								; forward 6
.1f1a	18		clc				clc
.1f1b	69 06		adc #$06			adc 	#6
.1f1d	aa		tax				tax
.1f1e	e0 60		cpx #$60			cpx 	#sndQueueSize*6 			; queue is full ?
.1f20	90 f2		bcc $1f14			bcc 	_SAQFind
.1f22	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f24	20 27 15	jsr $1527		jsr	errorHandler
.1f27					_SAQFound:
.1f27	a0 05		ldy #$05			ldy 	#5 							; get and save time
.1f29	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f2b	9d 71 0c	sta $0c71,x			sta 	sndQueue+0,x
.1f2e	88		dey				dey 								; get and save the channel.
.1f2f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f31	9d 72 0c	sta $0c72,x			sta 	sndQueue+1,x
.1f34	a0 00		ldy #$00			ldy 	#0
.1f36					_SAQCopy1:
.1f36	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy 4 bytes of PSG data in.
.1f38	9d 73 0c	sta $0c73,x			sta 	sndQueue+2,x
.1f3b	c8		iny				iny
.1f3c	e8		inx				inx
.1f3d	c0 04		cpy #$04			cpy 	#4
.1f3f	d0 f5		bne $1f36			bne		 _SAQCopy1
.1f41	60		rts				rts
.1f42					SoundCheckQueue:
.1f42	85 2a		sta $2a				sta 	temp0 						; save channel #
.1f44	da		phx				phx
.1f45	5a		phy				phy
.1f46	a6 2a		ldx $2a				ldx 	temp0 						; is the channel in use, if so we cannot play.
.1f48	bd 59 0c	lda $0c59,x			lda 	channelTime,x
.1f4b	d0 3f		bne $1f8c			bne 	_SCQExit
.1f4d	a2 00		ldx #$00			ldx 	#0 							; work through queue.
.1f4f					_SCQSearch:
.1f4f	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; reached the end, e.g. time = 0
.1f52	f0 38		beq $1f8c			beq 	_SCQExit
.1f54	bd 72 0c	lda $0c72,x			lda 	sndQueue+1,x 				; compare channel #
.1f57	c5 2a		cmp $2a				cmp 	temp0
.1f59	f0 08		beq $1f63			beq 	_SCQFound
.1f5b	8a		txa				txa
.1f5c	18		clc				clc
.1f5d	69 06		adc #$06			adc 	#6
.1f5f	8a		txa				txa
.1f60	4c 4f 1f	jmp $1f4f			jmp 	_SCQSearch
.1f63					_SCQFound:
.1f63	a4 2a		ldy $2a				ldy 	temp0 						; Y = channel #
.1f65	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; get time
.1f68	99 59 0c	sta $0c59,y			sta 	channelTime,y 				; write that in the time channel slot
.1f6b	ee 58 0c	inc $0c58			inc 	LiveChannels 				; one more playing.
.1f6e	da		phx				phx
.1f6f	a5 2a		lda $2a				lda 	temp0 						; get channel #
.1f71	20 ce 1f	jsr $1fce			jsr 	CSPointChannel  			; point VRAM pointer to it.
.1f74	a0 04		ldy #$04			ldy 	#4 							; counter
.1f76					_SCQCopy:
.1f76	bd 73 0c	lda $0c73,x			lda 	sndQueue+2,x 				; copy the sound production data to the PSG
.1f79	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1f7c	e8		inx				inx
.1f7d	88		dey				dey
.1f7e	d0 f6		bne $1f76			bne 	_SCQCopy
.1f80	fa		plx				plx
.1f81					_SCQDelete:
.1f81	bd 77 0c	lda $0c77,x			lda 	sndQueue+6,x 				; delete the queue entry
.1f84	9d 71 0c	sta $0c71,x			sta 	sndQueue,x
.1f87	e8		inx				inx
.1f88	e0 61		cpx #$61			cpx 	#sndQueueSize*6+1
.1f8a	d0 f5		bne $1f81			bne 	_SCQDelete
.1f8c					_SCQExit:
.1f8c	7a		ply				ply
.1f8d	fa		plx				plx
.1f8e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndunary.asm

.1f8f					Unary_Playing:
.1f8f	48		pha				pha 						; save stack position
.1f90	b1 28		lda ($28),y			lda 	(codePtr),y 		; check for playing()
.1f92	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f94	f0 2d		beq $1fc3			beq 	_UPCount
.1f96	68		pla				pla 						; get SP back.
.1f97	48		pha				pha
.1f98	a2 0c		ldx #$0c		ldx	#12
.1f9a	20 23 40	jsr $4023		jsr	mainHandler
.1f9d	a2 04		ldx #$04		ldx	#4
.1f9f	20 23 40	jsr $4023		jsr	mainHandler
.1fa2	fa		plx				plx
.1fa3	86 32		stx $32				stx 	tempShort 			; save X
.1fa5	b5 98		lda $98,x			lda 	esInt0,x 			; check level, must be < 16
.1fa7	c9 10		cmp #$10			cmp 	#16
.1fa9	b0 13		bcs $1fbe			bcs 	_UPValue
.1fab	aa		tax				tax 						; get the time
.1fac	bd 59 0c	lda $0c59,x			lda 	ChannelTime,x 		; 0 if zero, 255 if non-zero.
.1faf	f0 02		beq $1fb3			beq 	_UPZero
.1fb1	a9 ff		lda #$ff			lda 	#255
.1fb3					_UPZero:
.1fb3	a6 32		ldx $32				ldx 	tempShort 			; stack pointer back
.1fb5	95 98		sta $98,x			sta 	esInt0,x 			; return value
.1fb7					_UPSet13:
.1fb7	95 a0		sta $a0,x			sta 	esInt1,x
.1fb9	95 a8		sta $a8,x			sta 	esInt2,x
.1fbb	95 b0		sta $b0,x			sta 	esInt3,x
.1fbd	60		rts				rts
.1fbe					_UPValue:
.1fbe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fc0	20 27 15	jsr $1527		jsr	errorHandler
.1fc3					_UPCount:
.1fc3	c8		iny				iny 						; skip )
.1fc4	fa		plx				plx
.1fc5	ad 58 0c	lda $0c58			lda 	LiveChannels
.1fc8	95 98		sta $98,x			sta 	esInt0,x
.1fca	a9 00		lda #$00			lda 	#0
.1fcc	f0 e9		beq $1fb7			beq 	_UPSet13

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndutils.asm

.1fce					CSPointChannel:
.1fce	0a		asl a				asl 	a 							; 4 bytes / channel
.1fcf	0a		asl a				asl 	a
.1fd0	09 c0		ora #$c0			ora 	#X16VeraSound & $FF			; at $1F9C0
.1fd2	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1fd5	a9 f9		lda #$f9			lda 	#(X16VeraSound >> 8) & $FF
.1fd7	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1fda	a9 11		lda #$11			lda 	#(X16VeraSound >> 16) | $10
.1fdc	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1fdf	60		rts				rts
.1fe0					SoundReset:
.1fe0	a9 00		lda #$00			lda 	#0							; no channels playing
.1fe2	8d 58 0c	sta $0c58			sta 	LiveChannels
.1fe5	a2 0f		ldx #$0f			ldx 	#Channels-1
.1fe7					_SCClear:
.1fe7	9d 59 0c	sta $0c59,x			sta 	ChannelTime,x
.1fea	ca		dex				dex
.1feb	10 fa		bpl $1fe7			bpl 	_SCClear
.1fed	a2 61		ldx #$61			ldx 	#sndQueueSize*6+1 			; zero the sound queue.
.1fef					_SCClear2:
.1fef	9d 70 0c	sta $0c70,x			sta 	sndQueue-1,x
.1ff2	ca		dex				dex
.1ff3	d0 fa		bne $1fef			bne 	_SCClear2
.1ff5	a9 c0		lda #$c0			lda 	#X16VeraSound & $FF			; point VRAM data pointer to $1F9C0 increment
.1ff7	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1ffa	a9 f9		lda #$f9			lda 	#(X16VeraSound >> 8) & $FF
.1ffc	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1fff	a9 11		lda #$11			lda 	#(X16VeraSound >> 16) | $10
.2001	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2004					_SCClear3:
.2004	a9 00		lda #$00			lda 	#0
.2006	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2009	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.200c	d0 f6		bne $2004			bne 	_SCClear3
.200e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sound.asm

=16					Channels = 16 								; # of sound channels.
.0c58					LiveChannels:
>0c58							.fill 	1
.0c59					ChannelTime:
>0c59							.fill 	Channels 					; # of ticks until channels goes silent if non-zero
.0c69					sndPitch:
>0c69							.fill 	2
.0c6b					sndExtra:
>0c6b							.fill 	2
.0c6d					sndChannel:
>0c6d							.fill 	1
.0c6e					sndTime:
>0c6e							.fill 	1
.0c6f					sndType:
>0c6f							.fill 	1
.0c70					sndVolume:
>0c70							.fill 	1
=16					sndQueueSize = 16
.0c71					sndQueue:
>0c71							.fill	6*sndQueueSize+1 			; extra byte is so copy zero when deleting last element.
.200f					CommandSound:
.200f	a9 00		lda #$00			lda 	#0 							; clear the default sound options
.2011	8d 69 0c	sta $0c69			sta 	sndPitch
.2014	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.2017	8d 6f 0c	sta $0c6f			sta 	sndType
.201a	a9 ff		lda #$ff			lda 	#$FF 						; values are 255,63 are masked.
.201c	8d 6d 0c	sta $0c6d			sta 	sndChannel
.201f	8d 70 0c	sta $0c70			sta 	sndVolume
.2022	a9 05		lda #$05			lda 	#5 							; default time is 0.5s
.2024	8d 6e 0c	sta $0c6e			sta 	sndTime
.2027					_ComSoundLoop:
.2027	b1 28		lda ($28),y			lda 	(codePtr),y 				; next token
.2029	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line/colon do the sound
.202b	f0 55		beq $2082			beq 	_CSDoSound
.202d	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.202f	f0 51		beq $2082			beq 	_CSDoSound
.2031	c9 db		cmp #$db			cmp 	#TKW_AT 					; is it AT pitch ?
.2033	f0 29		beq $205e			beq 	_CSSetPitch
.2035	a2 03		ldx #$03			ldx 	#3 							; look up in the tokens table
.2037					_CSCheck:
.2037	dd 7e 20	cmp $207e,x			cmp 	_ComSoundTokens,x 			; if found token update value.
.203a	f0 10		beq $204c			beq 	_CSFoundToken
.203c	ca		dex				dex
.203d	10 f8		bpl $2037			bpl 	_CSCheck
.203f	c8		iny				iny
.2040	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR 					; was it sound CLEAR
.2042	d0 03		bne $2047			bne 	_CSSyntax
.2044	4c e0 1f	jmp $1fe0			jmp 	SoundReset
.2047					_CSSyntax:
.2047	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2049	20 27 15	jsr $1527		jsr	errorHandler
.204c					_CSFoundToken:
.204c	da		phx				phx
.204d	c8		iny				iny 								; skip it
.204e	a9 00		lda #$00			lda 	#0 							; get a small int
.2050	a2 0c		ldx #$0c		ldx	#12
.2052	20 23 40	jsr $4023		jsr	mainHandler
.2055	fa		plx				plx
.2056	a5 98		lda $98				lda 	esInt0 						; copy value to setup memory
.2058	9d 6d 0c	sta $0c6d,x			sta 	sndChannel,x
.205b	4c 27 20	jmp $2027			jmp 	_ComSoundLoop
.205e					_CSSetPitch:
.205e	c8		iny				iny 								; skip AT
.205f	a9 00		lda #$00			lda 	#0 							; get an integer.
.2061	a2 0a		ldx #$0a		ldx	#10
.2063	20 23 40	jsr $4023		jsr	mainHandler
.2066	a5 a8		lda $a8				lda 	esInt2 						; check range
.2068	05 b0		ora $b0				ora 	esInt3
.206a	d0 0d		bne $2079			bne 	_CSBadValue
.206c	a5 98		lda $98				lda 	esInt0	 					; copy into pitch and loop back
.206e	8d 69 0c	sta $0c69			sta 	sndPitch
.2071	a5 a0		lda $a0				lda 	esInt1
.2073	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.2076	4c 27 20	jmp $2027			jmp 	_ComSoundLoop
.2079					_CSBadValue:
.2079	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.207b	20 27 15	jsr $1527		jsr	errorHandler
.207e					_ComSoundTokens:
>207e	ce 9b ea cf					.byte 	TKW_TO,TKW_FOR,TKW_TYPE,TKW_STEP
.2082					_CSDoSound:
.2082	ae 6d 0c	ldx $0c6d			ldx 	sndChannel 					; if channel >= 16 look for channel unused.
.2085	e0 10		cpx #$10			cpx 	#16
.2087	90 0f		bcc $2098			bcc 	_CSHaveChannel
.2089	a2 0f		ldx #$0f			ldx 	#15
.208b					_CSFindChannel:
.208b	bd 59 0c	lda $0c59,x			lda 	channelTime,x 				; time is zero e.g. sound off.
.208e	f0 08		beq $2098			beq 	_CSHaveChannel
.2090	ca		dex				dex
.2091	10 f8		bpl $208b			bpl 	_CSFindChannel 				; try all of them
.2093	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.2095	20 27 15	jsr $1527		jsr	errorHandler
.2098					_CSHaveChannel:
.2098	8e 6d 0c	stx $0c6d			stx 	sndChannel 					; update channel.
.209b	ad 6e 0c	lda $0c6e			lda 	sndTime 					; get how long
.209e	f0 29		beq $20c9			beq 	_CSExit 					; if zero then exit
.20a0	ad 70 0c	lda $0c70			lda 	sndVolume 					; get volume, max out at 63.
.20a3	c9 40		cmp #$40			cmp 	#64
.20a5	90 02		bcc $20a9			bcc 	_CSHaveVolume
.20a7	a9 3f		lda #$3f			lda 	#63
.20a9					_CSHaveVolume:
.20a9	09 c0		ora #$c0			ora 	#$C0 						; both channels
.20ab	8d 6b 0c	sta $0c6b			sta 	sndExtra 					; write out.
.20ae	ad 6f 0c	lda $0c6f			lda 	sndType 					; get waveform (bits 0-1 Pulse, Sawtooth, Triangle Noise)
.20b1	6a		ror a				ror 	a 							; rotate into position 7,6
.20b2	6a		ror a				ror 	a
.20b3	6a		ror a				ror 	a
.20b4	29 c0		and #$c0			and 	#$C0 						; mask other bits
.20b6	09 3f		ora #$3f			ora 	#63 						; 50% duty cycle.
.20b8	8d 6c 0c	sta $0c6c			sta 	sndExtra+1
.20bb	5a		phy				phy
.20bc	da		phx				phx
.20bd	a2 69		ldx #$69			ldx 	#sndPitch & 255 			; XY = sound data
.20bf	a0 0c		ldy #$0c			ldy 	#sndPitch >> 8
.20c1	20 0e 1f	jsr $1f0e			jsr 	SoundAddQueue 				; add it to the queue.
.20c4	68		pla				pla 								; get channel #
.20c5	20 42 1f	jsr $1f42			jsr 	SoundCheckQueue 			; check if we can play this one now, e.g. the queue was empty.
.20c8	7a		ply				ply
.20c9					_CSExit:
.20c9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/soundsync.asm

.20ca					SoundInterrupt:
.20ca	ad 58 0c	lda $0c58			lda 	LiveChannels 		; anything playing ?
.20cd	f0 2b		beq $20fa			beq 	_SIExit
.20cf	a2 0f		ldx #$0f			ldx 	#15 				; check each channel ?
.20d1	bd 59 0c	lda $0c59,x	_SILoop:lda 	channelTime,x 		; time left ?
.20d4	f0 21		beq $20f7			beq 	_SINext 	 		; if zero not playing
.20d6	38		sec				sec 						; subtract one from time
.20d7	e9 01		sbc #$01			sbc 	#1
.20d9	9d 59 0c	sta $0c59,x			sta 	channelTime,x
.20dc	d0 19		bne $20f7			bne 	_SINext 			; if non zero, time for sound off.
.20de	ce 58 0c	dec $0c58			dec 	LiveChannels 		; one fewer channels.
.20e1	8a		txa				txa 						; point to sound PSG
.20e2	20 ce 1f	jsr $1fce			jsr 	CSPointChannel
.20e5	a9 00		lda #$00			lda 	#0 					; zero it all out
.20e7	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20ea	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20ed	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20f0	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20f3	8a		txa				txa 						; check the queue for this for more notes.
.20f4	20 42 1f	jsr $1f42			jsr 	SoundCheckQueue
.20f7	ca		dex		_SINext:dex
.20f8	10 d7		bpl $20d1			bpl 	_SILoop
.20fa					_SIExit:
.20fa	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0cd2					hitSprite1:
>0cd2							.fill 	1 							; this won't work ... if you nest HIT() which
.0cd3					hitSprite2:
>0cd3							.fill 	1
.0cd4					hitRange:
>0cd4							.fill 	1
.20fb					FunctionCollide:
.20fb	48		pha				pha 								; save and put index into X
.20fc	aa		tax				tax
.20fd	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.20ff	8d d4 0c	sta $0cd4			sta 	hitRange
.2102	20 a2 21	jsr $21a2			jsr 	_FCGetSpriteID
.2105	8d d2 0c	sta $0cd2			sta 	hitSprite1
.2108	da		phx				phx
.2109	a2 02		ldx #$02		ldx	#2
.210b	20 23 40	jsr $4023		jsr	mainHandler
.210e	fa		plx				plx
.210f	20 a2 21	jsr $21a2			jsr 	_FCGetSpriteID
.2112	8d d3 0c	sta $0cd3			sta 	hitSprite2
.2115	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.2117	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2119	f0 12		beq $212d			beq 	_FCParam2
.211b	da		phx				phx
.211c	a2 02		ldx #$02		ldx	#2
.211e	20 23 40	jsr $4023		jsr	mainHandler
.2121	68		pla				pla
.2122	a2 0c		ldx #$0c		ldx	#12
.2124	20 23 40	jsr $4023		jsr	mainHandler
.2127	aa		tax				tax
.2128	b5 98		lda $98,x			lda 	esInt0,x
.212a	8d d4 0c	sta $0cd4			sta 	hitRange
.212d					_FCParam2:
.212d	a2 04		ldx #$04		ldx	#4
.212f	20 23 40	jsr $4023		jsr	mainHandler
.2132	68		pla				pla 								; set X to point to the stack again.
.2133	48		pha				pha
.2134	aa		tax				tax
.2135	5a		phy				phy
.2136	18		clc				clc 								; do it with the horizontal values.
.2137	20 58 21	jsr $2158			jsr 	_FCCheck
.213a	90 0a		bcc $2146			bcc 	_FCFail
.213c	38		sec				sec 								; do it with the vertical values.
.213d	20 58 21	jsr $2158			jsr 	_FCCheck
.2140	90 04		bcc $2146			bcc 	_FCFail
.2142	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.2144	d0 02		bne $2148			bne 	_FCReturnA
.2146					_FCFail:
.2146	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.2148					_FCReturnA:
.2148	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.214a	7a		ply				ply
.214b	68		pla				pla 								; restore stack, return result and exit.
.214c	aa		tax				tax
.214d	a5 32		lda $32				lda 	tempShort
.214f	95 98		sta $98,x			sta 	esInt0,x
.2151	95 a0		sta $a0,x			sta 	esInt1,x
.2153	95 a8		sta $a8,x			sta 	esInt2,x
.2155	95 b0		sta $b0,x			sta 	esInt3,x
.2157	60		rts				rts
.2158					_FCCheck:
.2158	08		php				php 								; save the H/V flag twice
.2159	08		php				php
.215a	ad d2 0c	lda $0cd2			lda 	hitSprite1 					; select sprite 1 and read its location
.215d	20 e0 22	jsr $22e0			jsr 	SelectSpriteA 				; into X
.2160	28		plp				plp
.2161	20 04 24	jsr $2404			jsr 	SpriteReadCoordinate
.2164	ad d3 0c	lda $0cd3			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.2167	20 e0 22	jsr $22e0			jsr 	SelectSpriteA
.216a	e8		inx				inx
.216b	28		plp				plp
.216c	20 04 24	jsr $2404			jsr 	SpriteReadCoordinate
.216f	ca		dex				dex
.2170	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.2171	b5 98		lda $98,x			lda 	esInt0,x
.2173	f5 99		sbc $99,x			sbc 	esInt0+1,x
.2175	85 2a		sta $2a				sta 	temp0
.2177	b5 a0		lda $a0,x			lda 	esInt1,x
.2179	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.217b	85 2b		sta $2b				sta 	temp0+1
.217d	10 0d		bpl $218c			bpl 	_FCCIsPositive
.217f	38		sec				sec 								; if -ve calculate |difference|
.2180	a9 00		lda #$00			lda 	#0
.2182	e5 2a		sbc $2a				sbc 	temp0
.2184	85 2a		sta $2a				sta 	temp0
.2186	a9 00		lda #$00			lda 	#0
.2188	e5 2b		sbc $2b				sbc 	temp0+1
.218a	85 2b		sta $2b				sta 	temp0+1
.218c					_FCCIsPositive:
.218c	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.218e	d0 10		bne $21a0			bne 	_FCCFail
.2190	18		clc				clc 								; work out required min distance which is
.2191	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.2193	75 b1		adc $b1,x			adc 	esInt3+1,x
.2195	ac d4 0c	ldy $0cd4			ldy 	hitRange 					; get the hit range
.2198	f0 01		beq $219b			beq 	_FCCNoSetRange 				; override if non zero.
.219a	98		tya				tya
.219b					_FCCNoSetRange:
.219b	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.219d	f0 01		beq $21a0			beq 	_FCCFail
.219f	60		rts				rts
.21a0					_FCCFail:
.21a0	18		clc				clc
.21a1	60		rts				rts
.21a2					_FCGetSpriteID:
.21a2	8a		txa				txa
.21a3	a2 0c		ldx #$0c		ldx	#12
.21a5	20 23 40	jsr $4023		jsr	mainHandler
.21a8	aa		tax				tax
.21a9	b5 98		lda $98,x			lda 	esInt0,x
.21ab	30 01		bmi $21ae			bmi 	_FCGSValue
.21ad	60		rts				rts
.21ae					_FCGSValue:
.21ae	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.21b0	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0cd5					currSprite:
>0cd5							.fill 	2
.21b3					CommandSprite:
.21b3	20 b5 22	jsr $22b5			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.21b6	d0 0d		bne $21c5			bne 	_CSCheckClear
.21b8	ad 29 9f	lda $9f29			lda 	X16VeraDCVideo 				; sprite enable is bit 6.
.21bb	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.21bd	90 02		bcc $21c1			bcc 	_CSNotOn 					; if CS turn on, so set it
.21bf	09 40		ora #$40			ora 	#$40
.21c1					_CSNotOn:
.21c1	8d 29 9f	sta $9f29			sta 	X16VeraDCVideo 						; write it back in new state and exit
.21c4	60		rts				rts
.21c5					_CSCheckClear:
.21c5	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.21c7	8d d6 0c	sta $0cd6			sta 	currSprite+1
.21ca	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.21cc	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.21ce	d0 05		bne $21d5			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.21d0	20 c6 22	jsr $22c6			jsr 	CSClearSprites 				; clear all the sprites
.21d3	c8		iny				iny 								; consume CLEAR token and exit.
.21d4	60		rts				rts
.21d5					_CSCommandLoop:
.21d5	20 b5 22	jsr $22b5			jsr 	CSCheckOnOff 				; check sprite on/off
.21d8	f0 2c		beq $2206			beq 	_CSSetVisibility
.21da	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.21dc	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.21de	f0 25		beq $2205			beq 	_CSExit
.21e0	c8		iny				iny									; consume it
.21e1	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.21e3	f0 20		beq $2205			beq 	_CSExit
.21e5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.21e7	f0 ec		beq $21d5			beq 	_CSCommandLoop
.21e9	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.21eb	f0 69		beq $2256			beq 	_CSSetImage
.21ed	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.21ef	f0 2b		beq $221c			beq 	_CSSetFlip
.21f1	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.21f3	f0 46		beq $223b			beq 	_CSSetPos
.21f5	88		dey				dey 								; unpick DEY
.21f6	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.21f8	a2 0c		ldx #$0c		ldx	#12
.21fa	20 23 40	jsr $4023		jsr	mainHandler
.21fd	a5 98		lda $98				lda 	esInt0
.21ff	20 e0 22	jsr $22e0			jsr 	SelectSpriteA
.2202	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.2205					_CSExit:
.2205	60		rts				rts
.2206					_CSSetVisibility:
.2206	08		php				php 								; save carry
.2207	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.2209	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.220c	ad 23 9f	lda $9f23			lda 	X16VeraData0 						; read it.
.220f	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2211	28		plp				plp
.2212	90 02		bcc $2216			bcc 	_CSSetOff 					; check if carry was set
.2214	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2216					_CSSetOff:
.2216	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; update and loop back
.2219	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.221c					_CSSetFlip:
.221c	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.221e	a2 0c		ldx #$0c		ldx	#12
.2220	20 23 40	jsr $4023		jsr	mainHandler
.2223	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2225	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.2228	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.222a	29 03		and #$03			and 	#3
.222c	85 2a		sta $2a				sta 	temp0
.222e	ad 23 9f	lda $9f23			lda 	X16VeraData0 				; update the flip.
.2231	29 fc		and #$fc			and 	#$FC
.2233	05 2a		ora $2a				ora 	temp0
.2235	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2238	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.223b					_CSSetPos:
.223b	a9 00		lda #$00			lda 	#0 							; X now at level 0
.223d	a2 0a		ldx #$0a		ldx	#10
.223f	20 23 40	jsr $4023		jsr	mainHandler
.2242	a2 02		ldx #$02		ldx	#2
.2244	20 23 40	jsr $4023		jsr	mainHandler
.2247	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.2249	a2 0a		ldx #$0a		ldx	#10
.224b	20 23 40	jsr $4023		jsr	mainHandler
.224e	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2250	20 c2 23	jsr $23c2			jsr 	SpriteMove 					; move it.
.2253	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.2256					_CSSetImage:
.2256	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2258	a2 0c		ldx #$0c		ldx	#12
.225a	20 23 40	jsr $4023		jsr	mainHandler
.225d	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.225f	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.2262	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2264	bd 1d 0d	lda $0d1d,x			lda 	imageAddr32Low,x 			; copy low address in.
.2267	8d 23 9f	sta $9f23			sta 	X16VeraData0
.226a	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; bump to offset 1.
.226d	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2270	29 10		and #$10			and 	#$10
.2272	0a		asl a				asl 	a
.2273	0a		asl a				asl		a
.2274	0a		asl a				asl 	a 							; put into bit 7
.2275	1d 5d 0d	ora $0d5d,x			ora 	imageAddr32High,x 			; or high address with it.
.2278	8d 23 9f	sta $9f23			sta 	X16VeraData0 						; write the high byte.
.227b	a9 06		lda #$06			lda 	#6
.227d	20 9c 22	jsr $229c			jsr 	SpriteSetTarget 			; set sprite on.
.2280	ad 23 9f	lda $9f23			lda 	X16VeraData0
.2283	09 0c		ora #$0c			ora 	#$0C
.2285	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2288	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; point to byte 7 : height/width/palette offset
.228b	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get image info
.228e	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.228f	0a		asl a				asl 	a
.2290	0a		asl a				asl 	a
.2291	0a		asl a				asl 	a
.2292	b0 02		bcs $2296			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.2294	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.2296					_CSNoOffset:
.2296	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2299	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.229c					SpriteSetTarget:
.229c	0d d5 0c	ora $0cd5			ora 	currSprite
.229f	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.22a2	ad d6 0c	lda $0cd6			lda 	currSprite+1
.22a5	f0 09		beq $22b0			beq 	_SSTNoSet
.22a7	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.22aa	a9 01		lda #$01			lda 	#$01
.22ac	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.22af	60		rts				rts
.22b0					_SSTNoSet:
.22b0	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.22b2	20 27 15	jsr $1527		jsr	errorHandler
.22b5					CSCheckOnOff:
.22b5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.22b7	c8		iny				iny
.22b8	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.22ba	18		clc				clc
.22bb	f0 08		beq $22c5			beq 	_CSCOExit
.22bd	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.22bf	38		sec				sec 								; return NE if neither.
.22c0	f0 03		beq $22c5			beq 	_CSCOExit
.22c2	88		dey				dey 								; undo consume
.22c3	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.22c5					_CSCOExit:
.22c5	60		rts				rts
.22c6					CSClearSprites:
.22c6	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.22c8	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.22cb	a9 fc		lda #$fc			lda 	#$FC
.22cd	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.22d0	a9 00		lda #$00			lda 	#0
.22d2	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.22d5					_CSClear:
.22d5	a9 00		lda #$00			lda 	#0 							; set everything to $00
.22d7	8d 23 9f	sta $9f23			sta 	X16VeraData0
.22da	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.22dd	d0 f6		bne $22d5			bne 	_CSClear
.22df	60		rts				rts
.22e0					SelectSpriteA:
.22e0	85 2a		sta $2a				sta 	temp0
.22e2	a9 00		lda #$00			lda 	#0
.22e4	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.22e6	b0 11		bcs $22f9			bcs 	_CSBadValue 				; sprites only 0-127
.22e8	06 2a		asl $2a				asl 	temp0
.22ea	2a		rol a				rol 	a
.22eb	06 2a		asl $2a				asl 	temp0
.22ed	2a		rol a				rol 	a
.22ee	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.22f0	8d d6 0c	sta $0cd6			sta 	currSprite+1
.22f3	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.22f5	8d d5 0c	sta $0cd5			sta 	currSprite+0
.22f8	60		rts				rts
.22f9					_CSBadValue
.22f9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.22fb	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0cd7					srenderWidth:
>0cd7							.fill 	1
.22fe					Command_Paint:
.22fe	a9 06		lda #$06			lda 	#ImageHandler & $FF
.2300	a2 23		ldx #$23			ldx 	#ImageHandler >> 8
.2302	20 e9 18	jsr $18e9			jsr 	GHandler
.2305	60		rts				rts
.2306					ImageHandler:
.2306	a9 0d		lda #$0d			lda 	#SpriteImageAccess & $FF
.2308	a2 23		ldx #$23			ldx 	#SpriteImageAccess >> 8
.230a	4c 71 1b	jmp $1b71			jmp 	ImageRenderer
.230d					SpriteImageAccess:
.230d	c0 ff		cpy #$ff			cpy 	#255
.230f	d0 22		bne $2333			bne 	_SIAGetPixel
.2311	ae 01 0c	ldx $0c01			ldx 	gdImage 					; get the image #
.2314	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get the image information.
.2317	48		pha				pha
.2318	29 03		and #$03			and 	#3 							; LSB x 2 width
.231a	aa		tax				tax
.231b	bd 2f 23	lda $232f,x			lda 	_SIASizeTable,x
.231e	8d d7 0c	sta $0cd7			sta 	sRenderWidth 				; save rendering width.
.2321	aa		tax				tax
.2322	68		pla				pla 								; get back next 2 bits are height
.2323	4a		lsr a				lsr 	a
.2324	4a		lsr a				lsr 	a
.2325	29 03		and #$03			and 	#3
.2327	a8		tay				tay
.2328	b9 2f 23	lda $232f,y			lda 	_SIASizeTable,y
.232b	a8		tay				tay
.232c	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.232e	60		rts				rts
.232f					_SIASizeTable:
>232f	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.2333					_SIAGetPixel:
.2333	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.2335	a9 00		lda #$00			lda 	#0
.2337	85 2b		sta $2b				sta 	temp0+1
.2339	ac 01 0c	ldy $0c01			ldy 	gdImage 					; get image info into A
.233c	b9 dd 0c	lda $0cdd,y			lda 	imageInfo,y
.233f	48		pha				pha
.2340	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.2342	85 2c		sta $2c				sta 	temp1
.2344	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.2345	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.2347	18		clc				clc
.2348	69 03		adc #$03			adc 	#3
.234a	a8		tay				tay
.234b					_SIAMultiply:
.234b	06 2a		asl $2a				asl 	temp0
.234d	26 2b		rol $2b				rol 	temp0+1
.234f	88		dey				dey
.2350	d0 f9		bne $234b			bne 	_SIAMultiply
.2352	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.2354	d0 04		bne $235a			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.2356	46 2b		lsr $2b				lsr 	temp0+1
.2358	66 2a		ror $2a				ror 	temp0
.235a					_SIANoHalf:
.235a	ae 01 0c	ldx $0c01			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.235d	bd 1d 0d	lda $0d1d,x			lda 	imageAddr32Low,x
.2360	85 2e		sta $2e				sta 	temp2
.2362	bd 5d 0d	lda $0d5d,x			lda 	imageAddr32High,x
.2365	85 2f		sta $2f				sta 	temp2+1
.2367	a9 00		lda #$00			lda 	#0
.2369	85 30		sta $30				sta 	temp3
.236b	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.236d					_SIMult32:
.236d	06 2e		asl $2e				asl 	temp2
.236f	26 2f		rol $2f				rol 	temp2+1
.2371	26 30		rol $30				rol 	temp3
.2373	ca		dex				dex
.2374	d0 f7		bne $236d			bne 	_SIMult32
.2376	ee 25 9f	inc $9f25			inc 	X16VeraControl 				; select alternate data port
.2379	18		clc				clc
.237a	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.237c	65 2e		adc $2e				adc 	temp2
.237e	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.2381	a5 2b		lda $2b				lda 	temp0+1
.2383	65 2f		adc $2f				adc 	temp2+1
.2385	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.2388	a9 10		lda #$10			lda 	#$10
.238a	65 30		adc $30				adc 	temp3
.238c	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.238f	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.2391					_SIFillCacheLoop:
.2391	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.2393	d0 12		bne $23a7			bne 	_SI8Bit
.2395	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; get data
.2398	48		pha				pha 								; save it
.2399	4a		lsr a				lsr 	a 							; MSB first
.239a	4a		lsr a				lsr 	a
.239b	4a		lsr a				lsr 	a
.239c	4a		lsr a				lsr 	a
.239d	20 b7 23	jsr $23b7			jsr 	_SIWrite4Bit
.23a0	68		pla				pla
.23a1	20 b7 23	jsr $23b7			jsr 	_SIWrite4Bit
.23a4	4c ae 23	jmp $23ae			jmp 	_SIAdvance
.23a7					_SI8Bit:
.23a7	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; copy data into render cache
.23aa	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.23ad	e8		inx				inx
.23ae					_SIAdvance:
.23ae	ec d7 0c	cpx $0cd7			cpx 	sRenderWidth 				; filled the cache to required width ?
.23b1	d0 de		bne $2391			bne 	_SIFillCacheLoop
.23b3	ce 25 9f	dec $9f25			dec 	X16VeraControl 				; select original data port.
.23b6	60		rts				rts
.23b7					_SIWrite4Bit:
.23b7	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.23b9	f0 02		beq $23bd			beq 	_SIW4Skip
.23bb	09 f0		ora #$f0			ora 	#$F0
.23bd					_SIW4Skip:
.23bd	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.23c0	e8		inx				inx
.23c1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.23c2					SpriteMove:
.23c2	5a		phy				phy
.23c3	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.23c5	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.23c8	ad 23 9f	lda $9f23			lda 	X16VeraData0
.23cb	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.23cc	4a		lsr a				lsr 	a
.23cd	4a		lsr a				lsr 	a
.23ce	4a		lsr a				lsr 	a
.23cf	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.23d1	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.23d3	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.23d6	20 e4 23	jsr $23e4			jsr 	SMWritePosition 					; write X position out.
.23d9	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.23db	46 2a		lsr $2a				lsr 	temp0
.23dd	e8		inx				inx 										; get the y position
.23de	20 e4 23	jsr $23e4			jsr 	SMWritePosition 					; and write that out.
.23e1	ca		dex				dex 										; fix X and quit.
.23e2	7a		ply				ply
.23e3	60		rts				rts
.23e4					SMWritePosition:
.23e4	a5 2a		lda $2a				lda 	temp0 								; get dim size
.23e6	29 03		and #$03			and 	#3 									; in range into Y
.23e8	a8		tay				tay
.23e9	38		sec				sec
.23ea	b5 98		lda $98,x			lda 	esInt0,x
.23ec	f9 00 24	sbc $2400,y			sbc 	SMHalfSize,y
.23ef	8d 23 9f	sta $9f23			sta 	X16VeraData0
.23f2	ee 20 9f	inc $9f20			inc 	X16VeraAddLow
.23f5	b5 a0		lda $a0,x			lda 	esInt1,x
.23f7	e9 00		sbc #$00			sbc 	#0
.23f9	8d 23 9f	sta $9f23			sta 	X16VeraData0
.23fc	ee 20 9f	inc $9f20			inc 	X16VeraAddLow
.23ff	60		rts				rts
.2400					SMHalfSize:
>2400	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2404					SpriteReadCoordinate:
.2404	5a		phy				phy
.2405	08		php				php 										; save CTR on stack
.2406	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2408	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.240b	ad 23 9f	lda $9f23			lda 	X16VeraData0
.240e	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.240f	4a		lsr a				lsr 	a
.2410	4a		lsr a				lsr 	a
.2411	4a		lsr a				lsr 	a
.2412	28		plp				plp 										; restore CTS
.2413	08		php				php
.2414	90 02		bcc $2418			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2416	4a		lsr a				lsr 	a
.2417	4a		lsr a				lsr 	a
.2418					_SPRCNotY1:
.2418	29 03		and #$03			and 	#3 									; point into half width/height
.241a	a8		tay				tay
.241b	b9 00 24	lda $2400,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.241e	95 b0		sta $b0,x			sta 	esInt3,x
.2420	28		plp				plp 										; CS Y CC X
.2421	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2423	2a		rol a				rol 	a
.2424	2a		rol a				rol 	a
.2425	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2427	20 9c 22	jsr $229c			jsr 	SpriteSetTarget 					; set data pointer offset by that
.242a	18		clc				clc 										; read and unfix centre.
.242b	ad 23 9f	lda $9f23			lda 	X16VeraData0
.242e	75 b0		adc $b0,x			adc 	esInt3,x
.2430	95 98		sta $98,x			sta 	esInt0,x
.2432	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 						; do MSB
.2435	ad 23 9f	lda $9f23			lda 	X16VeraData0
.2438	69 00		adc #$00			adc 	#0
.243a	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.243c	c9 08		cmp #$08			cmp		#$08
.243e	90 02		bcc $2442			bcc 	_SPRCNoSX
.2440	09 f0		ora #$f0			ora 	#$F0
.2442					_SPRCNoSX:
.2442	95 a0		sta $a0,x			sta 	esInt1,x
.2444	7a		ply				ply
.2445	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2446					Sprite_GetX:
.2446	18		clc				clc
.2447	90 01		bcc $244a			bcc 	SpriteGetCode
.2449					Sprite_GetY:
.2449	38		sec				sec
.244a					SpriteGetCode:
.244a	08		php				php 								; CLC : X SEC: Y, save on stack.
.244b	48		pha				pha 								; save stack position
.244c	20 67 24	jsr $2467			jsr 	GetSpriteNumber 			; get # of sprite.
.244f	a2 04		ldx #$04		ldx	#4
.2451	20 23 40	jsr $4023		jsr	mainHandler
.2454	fa		plx				plx
.2455	28		plp				plp 								; which one ?
.2456	20 04 24	jsr $2404			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.2459	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.245b	29 80		and #$80			and 	#$80
.245d	f0 02		beq $2461			beq 	_SGXYPos
.245f	a9 ff		lda #$ff			lda 	#$FF
.2461					_SGXYPos:
.2461	95 a8		sta $a8,x			sta 	esInt2,x
.2463	95 b0		sta $b0,x			sta 	esInt3,x
.2465	8a		txa				txa 								; return NSP in A
.2466	60		rts				rts
.2467					GetSpriteNumber:
.2467	48		pha				pha
.2468	a2 0c		ldx #$0c		ldx	#12
.246a	20 23 40	jsr $4023		jsr	mainHandler
.246d	fa		plx				plx
.246e	b5 98		lda $98,x			lda 	esInt0,x
.2470	20 e0 22	jsr $22e0			jsr 	SelectSpriteA
.2473	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/imagedef.asm

.2474					Command_Image:
.2474	a9 00		lda #$00			lda 	#0 							; get a small int
.2476	a2 0c		ldx #$0c		ldx	#12
.2478	20 23 40	jsr $4023		jsr	mainHandler
.247b	5a		phy				phy
.247c	a5 98		lda $98				lda 	esInt0 						; get character #
.247e	a0 00		ldy #$00			ldy 	#0 							; offset 0
.2480	20 2b 26	jsr $262b			jsr 	PointVeraCharacterA 		; routine in textdraw that points to character A
.2483	7a		ply				ply
.2484					_CILoop:
.2484	b1 28		lda ($28),y			lda 	(codePtr),Y 				; followed by ,
.2486	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2488	d0 10		bne $249a			bne 	_CIExit 					; no, then done.
.248a	c8		iny				iny 								; skip comma
.248b	a9 00		lda #$00			lda 	#0 							; get a small int
.248d	a2 0c		ldx #$0c		ldx	#12
.248f	20 23 40	jsr $4023		jsr	mainHandler
.2492	a5 98		lda $98				lda 	esInt0
.2494	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; write to vera
.2497	4c 84 24	jmp $2484			jmp 	_CILoop
.249a					_CIExit:
.249a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0cd8					currentMode:
>0cd8							.fill 	4
.249b					ForceMode0:
.249b	a2 00		ldx #$00			ldx 	#0
.249d	86 98		stx $98				stx 	esInt0 						; in case we do it, like mode n command, set +0
.249f					_FMCheck:
.249f	bd 30 25	lda $2530,x			lda 	CMModeList,x 				; do we need to switch ?
.24a2	dd d8 0c	cmp $0cd8,x			cmp 	currentMode,x
.24a5	d0 13		bne $24ba			bne 	CMSetMode 					; different so switch.
.24a7	e8		inx				inx
.24a8	e0 04		cpx #$04			cpx 	#4 							; compared all four bytes.
.24aa	d0 f3		bne $249f			bne 	_FMCheck
.24ac	60		rts				rts
.24ad					CommandMode:
.24ad	a9 00		lda #$00			lda 	#0 							; get mode number
.24af	a2 0a		ldx #$0a		ldx	#10
.24b1	20 23 40	jsr $4023		jsr	mainHandler
.24b4	a5 b0		lda $b0				lda 	esInt3 						; these 3 bits goto $9F29 as Sprites/Layer enable
.24b6	29 70		and #$70			and 	#$70 						; so if they are all zero then this is likely a mode number
.24b8	d0 06		bne $24c0			bne 	CMNoExpand 					; otherwise it is a user defined 32 bit one.
.24ba					CMSetMode:
.24ba	20 11 25	jsr $2511			jsr 	CMExpandMode 				; mode number -> mode definition
.24bd	4c d4 24	jmp $24d4			jmp 	CMUpdateMode
.24c0					CMNoExpand:
.24c0	a5 98		lda $98				lda 	esInt0 						; copy 32 bit data to current mode.
.24c2	8d d8 0c	sta $0cd8			sta 	currentMode
.24c5	a5 a0		lda $a0				lda 	esInt1
.24c7	8d d9 0c	sta $0cd9			sta 	currentMode+1
.24ca	a5 a8		lda $a8				lda 	esInt2
.24cc	8d da 0c	sta $0cda			sta 	currentMode+2
.24cf	a5 b0		lda $b0				lda 	esInt3
.24d1	8d db 0c	sta $0cdb			sta 	currentMode+3
.24d4					CMUpdateMode:
.24d4	a2 11		ldx #$11			ldx 	#$11
.24d6					_CMClear:
.24d6	a9 00		lda #$00			lda 	#0
.24d8	9d 29 9f	sta $9f29,x			sta 	X16VeraDCVideo,X
.24db	ca		dex				dex
.24dc	10 f8		bpl $24d6			bpl 	_CMClear
.24de	ad db 0c	lda $0cdb			lda 	currentMode+3 				; get current mode
.24e1	48		pha				pha 								; stack twice.
.24e2	48		pha				pha
.24e3	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.24e5	09 01		ora #$01			ora 	#$01 						; turn the output on.
.24e7	8d 29 9f	sta $9f29			sta 	X16VeraDCVideo 				; write to DC_VIDEO
.24ea	68		pla				pla 								; get back
.24eb	20 40 25	jsr $2540			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.24ee	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.24f1	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.24f2	4a		lsr a				lsr 	a
.24f3	4a		lsr a				lsr 	a
.24f4	20 40 25	jsr $2540			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.24f7	8d 2b 9f	sta $9f2b			sta 	X16VeraVScale
.24fa	a2 00		ldx #$00			ldx 	#0 							; this is offset from X16VeraLayerConfig to do L0
.24fc	ad d8 0c	lda $0cd8			lda 	currentMode					; get L0 config byte
.24ff	20 4b 25	jsr $254b			jsr 	CMDecodeLayer 				; and decode layer 0
.2502	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2504	ad d9 0c	lda $0cd9			lda 	currentMode+1
.2507	20 4b 25	jsr $254b			jsr 	CMDecodeLayer
.250a	20 9e 1d	jsr $1d9e			jsr 	gdModeChanged 				; check the bitmap status.
.250d	20 d4 18	jsr $18d4			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2510	60		rts				rts
.2511					CMExpandMode:
.2511	a5 98		lda $98				lda 	esInt0 						; get mode number, check it is valid.
.2513	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2515	b0 14		bcs $252b			bcs 	_CMModeError
.2517	0a		asl a				asl 	a 							; x 4 into X
.2518	0a		asl a				asl 	a
.2519	aa		tax				tax
.251a	5a		phy				phy
.251b	a0 00		ldy #$00			ldy 	#0
.251d					_CMEMCopy:
.251d	bd 30 25	lda $2530,x			lda 	CMModeList,x 				; copy defined mode data in , 4 bytes
.2520	99 d8 0c	sta $0cd8,y			sta 	currentMode,y
.2523	e8		inx				inx
.2524	c8		iny				iny
.2525	c0 04		cpy #$04			cpy 	#4
.2527	d0 f4		bne $251d			bne 	_CMEMCopy
.2529	7a		ply				ply
.252a	60		rts				rts
.252b					_CMModeError:
.252b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.252d	20 27 15	jsr $1527		jsr	errorHandler
.2530					CMModeList:
>2530	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2534	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2538	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>253c	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2540					CMEndModeList:
.2540					CMToScale:
.2540	29 03		and #$03			and 	#3 							; lower 2 bits only
.2542	aa		tax				tax 								; put in X for counting
.2543	a9 00		lda #$00			lda 	#0 							; zero result
.2545	38		sec				sec 								; first time rotate CS in
.2546					_CMTSLoop:
.2546	6a		ror a				ror 	a
.2547	ca		dex				dex
.2548	10 fc		bpl $2546			bpl 	_CMTSLoop
.254a	60		rts				rts
.254b					CMDecodeLayer:
.254b	48		pha				pha 								; save it.
.254c	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.254e	9d 2d 9f	sta $9f2d,x			sta 	X16VeraLayerConfig,X
.2551	68		pla				pla 								; get it back
.2552	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2554	f0 02		beq $2558			beq 	_CMDLNotSet
.2556	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2558					_CMDLNotSet:
.2558	e0 00		cpx #$00			cpx 	#0
.255a	f0 06		beq $2562			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.255c	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.255e	9d 2f 9f	sta $9f2f,x			sta 	X16VeraLayerTileBase,X
.2561	60		rts				rts
.2562					_CMDLayer0:
.2562	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2564	9d 2f 9f	sta $9f2f,x			sta 	X16VeraLayerTileBase,X
.2567	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.2568					CommandPalette:
.2568	a9 00		lda #$00			lda 	#0
.256a	a2 0c		ldx #$0c		ldx	#12
.256c	20 23 40	jsr $4023		jsr	mainHandler
.256f	a2 02		ldx #$02		ldx	#2
.2571	20 23 40	jsr $4023		jsr	mainHandler
.2574	a9 01		lda #$01			lda 	#1 						; palette RGB -> 1
.2576	a2 08		ldx #$08		ldx	#8
.2578	20 23 40	jsr $4023		jsr	mainHandler
.257b	a5 98		lda $98				lda 	esInt0 					; get palette #
.257d	20 8d 25	jsr $258d			jsr 	PointToPaletteA			; point to palette register
.2580	a5 99		lda $99				lda 	esInt0+1				; copy 12 bits of palette data to vera
.2582	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2585	a5 a1		lda $a1				lda 	esInt1+1
.2587	29 0f		and #$0f			and 	#$0F
.2589	8d 23 9f	sta $9f23			sta 	X16VeraData0
.258c	60		rts				rts
.258d					PointToPaletteA:
.258d	0a		asl a				asl 	a 							; x 2 -> LSB
.258e	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.2591	a9 00		lda #$00			lda 	#0 							; carry into A
.2593	2a		rol a				rol 	a
.2594	09 fa		ora #$fa			ora 	#(X16VeraPalette >> 8)&$FF	; make correct address
.2596	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.2599	a9 11		lda #$11			lda 	#(X16VeraPalette >> 16)|$10	; $01 and single step => X16VeraAddHigh
.259b	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.259e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

.259f					Command_Draw:
.259f	a9 a7		lda #$a7			lda 	#TextHandler & $FF
.25a1	a2 25		ldx #$25			ldx 	#TextHandler >> 8
.25a3	20 e9 18	jsr $18e9			jsr 	GHandler
.25a6	60		rts				rts
.25a7					TextHandler:
.25a7	ad 08 0c	lda $0c08			lda 	gdText+1 					; do we have a string
.25aa	d0 1a		bne $25c6			bne 	_THHasString
.25ac					_THCallRenderer:
.25ac	da		phx				phx
.25ad	ad f2 0b	lda $0bf2			lda 	gy2
.25b0	48		pha				pha
.25b1	ad f3 0b	lda $0bf3			lda 	gy2+1
.25b4	48		pha				pha
.25b5	a9 fa		lda #$fa			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.25b7	a2 25		ldx #$25			ldx 	#BitmapTextAccess >> 8
.25b9	20 71 1b	jsr $1b71			jsr 	ImageRenderer
.25bc	68		pla				pla 								; restore y position and x register
.25bd	8d f3 0b	sta $0bf3			sta 	gy2+1
.25c0	68		pla				pla
.25c1	8d f2 0b	sta $0bf2			sta 	gy2
.25c4	fa		plx				plx
.25c5	60		rts				rts
.25c6					_THHasString:
.25c6	a2 00		ldx #$00			ldx 	#0 							; position in string
.25c8					_THStringLoop:
.25c8	ad 07 0c	lda $0c07			lda 	gdText 						; text => temp0
.25cb	85 2a		sta $2a				sta 	temp0
.25cd	ad 08 0c	lda $0c08			lda 	gdText+1
.25d0	85 2b		sta $2b				sta 	temp0+1
.25d2	8a		txa				txa 								; length = string length.
.25d3	a0 00		ldy #$00			ldy 	#0
.25d5	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.25d7	f0 20		beq $25f9			beq 	_THExit 					; if so exit.
.25d9	e8		inx				inx 								; next character, put in Y
.25da	8a		txa				txa
.25db	a8		tay				tay
.25dc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.25de	8d 01 0c	sta $0c01			sta 	gdImage
.25e1	20 ac 25	jsr $25ac			jsr 	_THCallRenderer 			; render the text
.25e4	ad 00 0c	lda $0c00			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.25e7	0a		asl a				asl		a
.25e8	0a		asl a				asl 	a
.25e9	0a		asl a				asl 	a
.25ea	18		clc				clc
.25eb	6d f0 0b	adc $0bf0			adc 	gX2 						; add to horizontal position
.25ee	8d f0 0b	sta $0bf0			sta 	gx2
.25f1	90 d5		bcc $25c8			bcc 	_THStringLoop
.25f3	ee f1 0b	inc $0bf1			inc 	gx2+1
.25f6	4c c8 25	jmp $25c8			jmp 	_THStringLoop 				; do the whole lot.
.25f9					_THExit:
.25f9	60		rts				rts
.25fa					BitmapTextAccess:
.25fa	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.25fc	d0 07		bne $2605			bne 	_BTABitmap
.25fe	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.2600	a2 08		ldx #$08			ldx 	#8
.2602	a0 08		ldy #$08			ldy 	#8
.2604	60		rts				rts
.2605					_BTABitmap:
.2605	ad 01 0c	lda $0c01			lda 	gdImage 					; Image => temp0:A
.2608	20 0c 26	jsr $260c			jsr 	GetRenderCharacterA
.260b	60		rts				rts
.260c					GetRenderCharacterA:
.260c	ee 25 9f	inc $9f25			inc 	X16VeraControl 				; alternate port set.
.260f	20 2b 26	jsr $262b			jsr 	PointVeraCharacterA
.2612	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; get bitmap
.2615	ce 25 9f	dec $9f25			dec 	X16VeraControl 				; original port set back
.2618	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.261a	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.261c					_BTADoCache:
.261c	a9 00		lda #$00			lda 	#0
.261e	46 2a		lsr $2a				lsr 	temp0
.2620	90 02		bcc $2624			bcc 	_BTANotSet
.2622	a9 ff		lda #$ff			lda 	#255
.2624					_BTANotSet:
.2624	9d 10 0c	sta $0c10,x			sta 	renderCache,x
.2627	ca		dex				dex
.2628	10 f2		bpl $261c			bpl 	_BTADoCache
.262a	60		rts				rts
.262b					PointVeraCharacterA:
.262b	85 2a		sta $2a				sta 	temp0
.262d	a9 00		lda #$00			lda 	#0
.262f	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.2631	2a		rol a				rol 	a
.2632	06 2a		asl $2a				asl 	temp0
.2634	2a		rol a				rol 	a
.2635	06 2a		asl $2a				asl 	temp0
.2637	2a		rol a				rol 	a
.2638	09 f8		ora #$f8			ora 	#(VeraDefaultFont >> 8)&$FF ; A now points into font table.
.263a	8d 21 9f	sta $9f21			sta 	X16VeraAddMed 				; set up address
.263d	a9 10		lda #$10			lda 	#$10+(VeraDefaultFont >> 16)
.263f	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2642	84 32		sty $32				sty 	tempShort
.2644	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.2646	05 32		ora $32				ora 	tempShort
.2648	8d 20 9f	sta $9f20			sta 	X16VeraAddLow 				; address set up.
.264b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.264c					Command_VLoad:
.264c	a9 00		lda #$00			lda 	#0 								; string which is the file name
.264e	a2 0e		ldx #$0e		ldx	#14
.2650	20 23 40	jsr $4023		jsr	mainHandler
.2653	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.2655	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.2657	95 98		sta $98,x			sta 	esInt0,x
.2659	a5 36		lda $36				lda 	lowMemory+1
.265b	95 a0		sta $a0,x			sta 	esInt1,x
.265d	a9 00		lda #$00			lda 	#0
.265f	95 a8		sta $a8,x			sta 	esInt2,x
.2661	95 b0		sta $b0,x			sta 	esInt3,x
.2663	a2 0c		ldx #$0c		ldx	#12
.2665	20 05 15	jsr $1505		jsr	deviceHandler
.2668	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.266a	85 2a		sta $2a				sta 	temp0
.266c	a5 a1		lda $a1				lda 	esInt1+1
.266e	85 2b		sta $2b				sta 	temp0+1
.2670	20 eb 26	jsr $26eb			jsr 	LoadVRAMFile 					; load the VRAM file in.
.2673	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2674					Command_VPoke:
.2674	38		sec				sec 						; one byte , CS
.2675	b0 01		bcs $2678			bcs 	CmdVideoWrite
.2677					Command_VDoke:
.2677	18		clc				clc 						; two bytes, CC
.2678					CmdVideoWrite:
.2678	08		php				php 						; save one or two btes
.2679	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.267b	a2 0a		ldx #$0a		ldx	#10
.267d	20 23 40	jsr $4023		jsr	mainHandler
.2680	a2 02		ldx #$02		ldx	#2
.2682	20 23 40	jsr $4023		jsr	mainHandler
.2685	a9 01		lda #$01			lda 	#1
.2687	a2 0a		ldx #$0a		ldx	#10
.2689	20 23 40	jsr $4023		jsr	mainHandler
.268c	a2 00		ldx #$00			ldx 	#0
.268e	20 9f 26	jsr $269f			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2691	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2693	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2696	28		plp				plp 						; if it was Poke then exit
.2697	b0 05		bcs $269e			bcs 	_CVWExit
.2699	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.269b	8d 23 9f	sta $9f23			sta 	X16VeraData0
.269e					_CVWExit:
.269e	60		rts				rts
.269f					SetUpTOSVRamAddress:
.269f	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.26a1	29 fe		and #$fe			and 	#$FE
.26a3	15 b0		ora $b0,x			ora 	esInt3,x
.26a5	d0 14		bne $26bb			bne 	CVWValue
.26a7	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.26a9	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.26ac	b5 a0		lda $a0,x			lda 	esInt1,x
.26ae	8d 21 9f	sta $9f21			sta	 	X16VeraAddMed
.26b1	b5 a8		lda $a8,x			lda 	esInt2,x
.26b3	29 01		and #$01			and 	#1
.26b5	09 10		ora #$10			ora 	#$10 				; step 1.
.26b7	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.26ba	60		rts				rts
.26bb					CVWValue:
.26bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.26bd	20 27 15	jsr $1527		jsr	errorHandler
.26c0					Command_VPeek:
.26c0	38		sec				sec 						; one byte , CS
.26c1	b0 01		bcs $26c4			bcs 	CmdVideoRead
.26c3					Command_VDeek:
.26c3	18		clc				clc 						; two bytes, CC
.26c4					CmdVideoRead:
.26c4	08		php				php 						; save action on stack.
.26c5	48		pha				pha 						; save stack position
.26c6	a2 0a		ldx #$0a		ldx	#10
.26c8	20 23 40	jsr $4023		jsr	mainHandler
.26cb	a2 04		ldx #$04		ldx	#4
.26cd	20 23 40	jsr $4023		jsr	mainHandler
.26d0	fa		plx				plx
.26d1	20 9f 26	jsr $269f			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.26d4	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.26d6	95 a0		sta $a0,x			sta 	esInt1,x
.26d8	95 a8		sta $a8,x			sta 	esInt2,x
.26da	95 b0		sta $b0,x			sta 	esInt3,x
.26dc	ad 23 9f	lda $9f23			lda 	X16VeraData0				; copy 1st byte
.26df	95 98		sta $98,x			sta 	esInt0,x
.26e1	28		plp				plp 						; check if DOKE (carry was clear)
.26e2	b0 05		bcs $26e9			bcs 	_CVRExit
.26e4	ad 23 9f	lda $9f23			lda 	X16VeraData0 				; copy 2nd byte
.26e7	95 a0		sta $a0,x			sta 	esInt1,x
.26e9					_CVRExit:
.26e9	8a		txa				txa 						; return X position.
.26ea	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0cdc					compressMode:
>0cdc							.fill 	1
.0cdd					imageInfo:
>0cdd							.fill 	X16MaxImages
.0d1d					imageAddr32Low:
>0d1d							.fill  	X16MaxImages
.0d5d					imageAddr32High:
>0d5d							.fill  	X16MaxImages
.26eb					LoadVRAMFile:
.26eb	da		phx				phx
.26ec	5a		phy				phy
.26ed					_LVRLoop:
.26ed	20 c7 27	jsr $27c7			jsr 	LVFGet 						; get the next (never access direct)
.26f0	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.26f2	f0 42		beq $2736			beq 	_LVRExit
.26f4	b0 5a		bcs $2750			bcs 	_LVRLoad 					; load data in ?
.26f6	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.26f8	90 11		bcc $270b			bcc 	_LVRSetAddress
.26fa	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.26fc	f0 3b		beq $2739			beq 	_LVRSetPalette
.26fe	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2700	90 2d		bcc $272f			bcc 	_LVRSetCompress
.2702	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2704	90 5e		bcc $2764			bcc 	_LVRSetSprite
.2706	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2708	20 27 15	jsr $1527		jsr	errorHandler
.270b					_LVRSetAddress:
.270b	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.270d	20 c7 27	jsr $27c7			jsr 	LVFGet
.2710	85 2c		sta $2c				sta 	temp1
.2712	a9 00		lda #$00			lda 	#0
.2714	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.2716	66 2c		ror $2c				ror 	temp1
.2718	6a		ror a				ror		a
.2719	46 2d		lsr $2d				lsr 	temp1+1
.271b	66 2c		ror $2c				ror 	temp1
.271d	6a		ror a				ror		a
.271e	8d 20 9f	sta $9f20			sta 	X16VeraAddLow 						; set write address with +1 increment
.2721	a5 2c		lda $2c				lda 	temp1
.2723	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.2726	a5 2d		lda $2d				lda 	temp1+1
.2728	09 10		ora #$10			ora 	#$10
.272a	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.272d	d0 be		bne $26ed			bne 	_LVRLoop
.272f					_LVRSetCompress:
.272f	29 07		and #$07			and 	#7
.2731	8d dc 0c	sta $0cdc			sta 	compressMode
.2734	10 b7		bpl $26ed			bpl 	_LVRLoop
.2736					_LVRExit:
.2736	7a		ply				ply
.2737	fa		plx				plx
.2738	60		rts				rts
.2739					_LVRSetPalette:
.2739	20 c7 27	jsr $27c7			jsr 	LVFGet 						; get palette id.
.273c	20 8d 25	jsr $258d			jsr 	PointToPaletteA 			; in palette.asm
.273f	20 c7 27	jsr $27c7			jsr 	LVFGet 						; copy 12 bit palette data in.
.2742	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; and send to Vera
.2745	20 c7 27	jsr $27c7			jsr 	LVFGet
.2748	29 0f		and #$0f			and 	#$0F
.274a	8d 23 9f	sta $9f23			sta 	X16VeraData0
.274d	4c ed 26	jmp $26ed			jmp 	_LVRLoop
.2750					_LVRLoad:
.2750	ae dc 0c	ldx $0cdc			ldx 	compressMode
.2753	d0 55		bne $27aa			bne 	_LVRNotMode0
.2755	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.2757					_LVRLCopyX:
.2757	aa		tax				tax
.2758					_LVRLCopy:
.2758	20 c7 27	jsr $27c7			jsr 	LVFGet 						; write to data.
.275b	8d 23 9f	sta $9f23			sta 	X16VeraData0
.275e	ca		dex				dex
.275f	d0 f7		bne $2758			bne 	_LVRLCopy
.2761	4c ed 26	jmp $26ed			jmp 	_LVRLoop
.2764					_LVRSetSprite:
.2764	48		pha				pha 								; save on stack
.2765	20 c7 27	jsr $27c7			jsr 	LVFGet 						; get the sprite number into X
.2768	aa		tax				tax
.2769	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.276b	b0 38		bcs $27a5			bcs 	_LVRSSValue
.276d	68		pla				pla 								; restore the data held in the first byte
.276e	9d dd 0c	sta $0cdd,x			sta 	imageInfo,x 				; and write into the sprite image table.
.2771					_LVRAlignVRAM:
.2771	ad 20 9f	lda $9f20			lda 	X16VeraAddLow 				; check VRAM on 32 byte boundary
.2774	29 1f		and #$1f			and 	#$1F 						; sprite image addresses are limited to this.
.2776	f0 07		beq $277f			beq 	_LVRAligned
.2778	a9 00		lda #$00			lda 	#$00
.277a	8d 23 9f	sta $9f23			sta 	X16VeraData0
.277d	f0 f2		beq $2771			beq 	_LVRAlignVRAM
.277f					_LVRAligned:
.277f	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh 				; put address/32 in sprite image table
.2782	4a		lsr a				lsr 	a 	 						; first halve into temp1
.2783	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.2786	6a		ror a				ror 	a
.2787	85 2d		sta $2d				sta 	temp1+1
.2789	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.278c	6a		ror a				ror 	a
.278d	85 2c		sta $2c				sta 	temp1
.278f	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2791					_LVRShift:
.2791	46 2d		lsr $2d				lsr 	temp1+1
.2793	66 2c		ror $2c				ror 	temp1
.2795	88		dey				dey
.2796	d0 f9		bne $2791			bne 	_LVRShift
.2798	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.279a	9d 5d 0d	sta $0d5d,x			sta 	imageAddr32High,x
.279d	a5 2c		lda $2c				lda 	temp1
.279f	9d 1d 0d	sta $0d1d,x			sta 	imageAddr32Low,x
.27a2	4c ed 26	jmp $26ed			jmp 	_LVRLoop
.27a5					_LVRSSValue:
.27a5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.27a7	20 27 15	jsr $1527		jsr	errorHandler
.27aa					_LVRNotMode0:
.27aa	e0 01		cpx #$01			cpx 	#1
.27ac	d0 15		bne $27c3			bne 	_LVRNotMode1
.27ae	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.27b0	c9 40		cmp #$40			cmp 	#$40
.27b2	90 a3		bcc $2757			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.27b4					_LVRRLEGroup:
.27b4	29 3f		and #$3f			and 	#$3F 						; the number of copies of the following byte.
.27b6	aa		tax				tax
.27b7	20 c7 27	jsr $27c7			jsr 	LVFGet 						; get the byte to copy
.27ba					_LVRLEGroupLoop:
.27ba	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; write it out X times
.27bd	ca		dex				dex
.27be	d0 fa		bne $27ba			bne 	_LVRLEGroupLoop
.27c0	4c ed 26	jmp $26ed			jmp 	_LVRLoop
.27c3					_LVRNotMode1:
>27c3	db						.byte 	$DB
.27c4	4c c3 27	jmp $27c3			jmp 	_LVRNotMode1
.27c7	84 32		sty $32		LVFGet:	sty 	tempShort
.27c9	a0 00		ldy #$00			ldy 	#0
.27cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.27cd	a4 32		ldy $32				ldy	 	tempShort
.27cf	e6 2a		inc $2a				inc 	temp0
.27d1	d0 02		bne $27d5			bne 	_LVFGExit
.27d3	e6 2b		inc $2b				inc 	temp0+1
.27d5					_LVFGExit:
.27d5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.27d6					section_end_extension:
.27d6					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.27d6					floatingpointHandler:
.27d6	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.27d8	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: basic.asm

.27db					section_end_floatingpoint:
.27db					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.27db					ColdStartEntry:
.27db	a2 ff		ldx #$ff			ldx 	#$FF
.27dd	9a		txs				txs
.27de	20 67 28	jsr $2867			jsr 	ForceStandardMode
.27e1	a2 02		ldx #$02		ldx	#2
.27e3	20 05 15	jsr $1505		jsr	deviceHandler
.27e6	a0 ff		ldy #$ff			ldy 	#255
.27e8					_CSBanner:
.27e8	c8		iny				iny
.27e9	b9 0f 28	lda $280f,y			lda 	Intro,y
.27ec	f0 14		beq $2802			beq 	_CSStart
.27ee	c9 08		cmp #$08			cmp 	#8
.27f0	90 08		bcc $27fa			bcc 	_CSInk
.27f2	a2 14		ldx #$14		ldx	#20
.27f4	20 05 15	jsr $1505		jsr	deviceHandler
.27f7	4c e8 27	jmp $27e8			jmp 	_CSBanner
.27fa					_CSInk:
.27fa	a2 06		ldx #$06		ldx	#6
.27fc	20 05 15	jsr $1505		jsr	deviceHandler
.27ff	4c e8 27	jmp $27e8			jmp 	_CSBanner
.2802					_CSStart:
.2802	a2 16		ldx #$16		ldx	#22
.2804	20 23 40	jsr $4023		jsr	mainHandler
.2807	a2 06		ldx #$06		ldx	#6
.2809	20 23 40	jsr $4023		jsr	mainHandler
.280c	4c 27 29	jmp $2927			jmp 	WarmStartEntry
>280f	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2817	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2827	20 2a 2a 2a 0d 0d
>282d	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>2835	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>2845	32 30 32 31 0d 0d
>284b	02 42 61 73 69 63 20				.text 	2,"Basic "
>2852	30 2e 33 32					.text "0.32"
>2856	20 28						.text 	" ("
>2858	32 37 2d 41 70 72 2d 32				.text "27-Apr-2021"
>2860	30 32 31
>2863	29 0d 0d 00					.text 	")",13,13,0
.2867					ForceStandardMode:
.2867	a9 fe		lda #$fe			lda 	#$FE
.2869	20 74 18	jsr $1874		jsr	extensionHandler
.286c	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.286d					DeleteLine:
.286d	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2870	85 2a		sta $2a				sta 	temp0
.2872	ad c9 0a	lda $0ac9			lda 	basePage+1
.2875	85 2b		sta $2b				sta 	temp0+1
.2877	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.2879	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.287b	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.287d	d0 07		bne $2886			bne 	_DLNext
.287f	c8		iny				iny
.2880	a5 a0		lda $a0				lda 	esInt1
.2882	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2884	f0 06		beq $288c			beq 	_DLFound
.2886	20 aa 28	jsr $28aa	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2889	d0 ec		bne $2877			bne 	_DLLoop
.288b	60		rts				rts
.288c					_DLFound:
.288c	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.288e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2890	a8		tay				tay 								; so we copy from (temp0),y
.2891	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2893					_DLCopyDown:
.2893	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2895	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2897	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.2899	d0 02		bne $289d			bne 	_DLNoCarry
.289b	e6 2b		inc $2b				inc 	temp0+1
.289d					_DLNoCarry:
.289d	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.289f	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.28a1	d0 f0		bne $2893			bne 	_DLCopyDown
.28a3	a5 2b		lda $2b				lda 	temp0+1
.28a5	c5 36		cmp $36				cmp 	lowMemory+1
.28a7	d0 ea		bne $2893			bne 	_DLCopyDown
.28a9	60		rts				rts
.28aa					IAdvanceTemp0:
.28aa	84 32		sty $32				sty 	tempShort
.28ac	18		clc				clc
.28ad	a0 00		ldy #$00			ldy 	#0 							; get offset
.28af	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.28b1	65 2a		adc $2a				adc 	temp0
.28b3	85 2a		sta $2a				sta 	temp0
.28b5	90 02		bcc $28b9			bcc 	_IATNoCarry
.28b7	e6 2b		inc $2b				inc 	temp0+1
.28b9					_IATNoCarry:
.28b9	b1 2a		lda ($2a),y			lda 	(temp0),y
.28bb	a4 32		ldy $32				ldy 	tempShort
.28bd	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.28bf	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.28c0					InsertLine:
.28c0	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.28c3	85 2a		sta $2a				sta 	temp0
.28c5	ad c9 0a	lda $0ac9			lda 	basePage+1
.28c8	85 2b		sta $2b				sta 	temp0+1
.28ca					_ILLoop:
.28ca	a0 01		ldy #$01			ldy 	#1
.28cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.28ce	c5 98		cmp $98				cmp 	esInt0
.28d0	c8		iny				iny
.28d1	b1 2a		lda ($2a),y			lda 	(temp0),y
.28d3	e5 a0		sbc $a0				sbc 	esInt1
.28d5	b0 05		bcs $28dc			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.28d7	20 aa 28	jsr $28aa			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.28da	d0 ee		bne $28ca			bne 	_ILLoop
.28dc					_ILFound:
.28dc	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.28de	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.28e0	a5 36		lda $36				lda 	lowMemory+1
.28e2	85 2d		sta $2d				sta 	temp1+1
.28e4	ad da 0e	lda $0eda			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.28e7	18		clc				clc 								; add 3 for the line number and offset.
.28e8	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.28ea	a8		tay				tay
.28eb	a2 00		ldx #$00			ldx 	#0
.28ed	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.28ef	91 2c		sta ($2c),y			sta 	(temp1),y
.28f1	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.28f3	c5 2a		cmp $2a				cmp 	temp0
.28f5	d0 06		bne $28fd			bne 	_ILMNext
.28f7	a5 2d		lda $2d				lda 	temp1+1
.28f9	c5 2b		cmp $2b				cmp 	temp0+1
.28fb	f0 0b		beq $2908			beq 	_ILMCopy
.28fd					_ILMNext:
.28fd	a5 2c		lda $2c				lda 	temp1
.28ff	d0 02		bne $2903			bne 	_ILNoBorrow
.2901	c6 2d		dec $2d				dec 	temp1+1
.2903					_ILNoBorrow:
.2903	c6 2c		dec $2c				dec 	temp1
.2905	4c ed 28	jmp $28ed			jmp 	_ILMove 					; and go round again
.2908					_ILMCopy:
.2908	98		tya				tya 								; Y is the offset of the new line.
.2909	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.290b	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.290d	a5 98		lda $98				lda 	esInt0
.290f	91 2a		sta ($2a),y			sta 	(temp0),y
.2911	c8		iny				iny
.2912	a5 a0		lda $a0				lda 	esInt1
.2914	91 2a		sta ($2a),y			sta 	(temp0),y
.2916	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2918					_ILMCopy2:
.2918	b1 28		lda ($28),y			lda 	(codePtr),y
.291a	c8		iny				iny
.291b	c8		iny				iny
.291c	c8		iny				iny
.291d	91 2a		sta ($2a),y			sta 	(temp0),y
.291f	88		dey				dey
.2920	88		dey				dey
.2921	cc da 0e	cpy $0eda			cpy 	tokenBufferIndex
.2924	d0 f2		bne $2918			bne 	_ILMCopy2
.2926	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2927					WarmStartEntry:
.2927	a2 ff		ldx #$ff			ldx 	#$FF
.2929	9a		txs				txs
.292a	20 67 28	jsr $2867			jsr 	ForceStandardMode
.292d	a9 02		lda #$02			lda 	#2							; green text.
.292f	a2 06		ldx #$06		ldx	#6
.2931	20 05 15	jsr $1505		jsr	deviceHandler
.2934	a2 0a		ldx #$0a		ldx	#10
.2936	20 05 15	jsr $1505		jsr	deviceHandler
.2939	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.293b	85 28		sta $28				sta 	codePtr
.293d	a5 2b		lda $2b				lda 	temp0+1
.293f	85 29		sta $29				sta 	codePtr+1
.2941	a2 04		ldx #$04		ldx	#4
.2943	20 05 15	jsr $1505		jsr	deviceHandler
.2946	a2 08		ldx #$08		ldx	#8
.2948	20 56 4b	jsr $4b56		jsr	tokeniserHandler
.294b	c9 00		cmp #$00			cmp 	#0
.294d	f0 25		beq $2974			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.294f	a9 d7		lda #$d7			lda 	#(tokenHeader) & $FF
.2951	85 28		sta $28				sta 	codePtr
.2953	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.2955	85 29		sta $29				sta 	1+(codePtr)
.2957	ad da 0d	lda $0dda			lda 	tokenBuffer 				; is it a blank line, go get another line.
.295a	c9 80		cmp #$80			cmp 	#$80
.295c	f0 c9		beq $2927			beq 	WarmStartEntry
.295e	29 c0		and #$c0			and 	#$C0						; does it start with a number
.2960	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.2962	f0 15		beq $2979			beq 	HasLineNumber
.2964	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2966	8d d7 0d	sta $0dd7			sta 	tokenHeader 				; fake program line.
.2969	8d d8 0d	sta $0dd8			sta 	tokenHeader+1
.296c	8d d9 0d	sta $0dd9			sta 	tokenHeader+2
.296f	a2 18		ldx #$18		ldx	#24
.2971	20 23 40	jsr $4023		jsr	mainHandler
.2974					WSEError:
.2974	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2976	20 27 15	jsr $1527		jsr	errorHandler
.2979					HasLineNumber:
.2979	a0 03		ldy #$03			ldy 	#3 							; get line number
.297b	a9 00		lda #$00			lda 	#0
.297d	a2 0a		ldx #$0a		ldx	#10
.297f	20 23 40	jsr $4023		jsr	mainHandler
.2982	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.2984	05 b0		ora $b0				ora 	esInt3
.2986	d0 ec		bne $2974			bne 	WSEError
.2988	98		tya				tya 								; make codePtr point to code after the line number.
.2989	18		clc				clc 								; by skipping over the tokenised number.
.298a	65 28		adc $28				adc 	codePtr
.298c	85 28		sta $28				sta 	codePtr
.298e	90 02		bcc $2992			bcc		_HLNNoCarry
.2990	e6 29		inc $29				inc 	codePtr+1
.2992					_HLNNoCarry:
.2992	98		tya				tya 								; subtract that offset from the code buffer index
.2993	38		sec				sec
.2994	49 ff		eor #$ff			eor 	#$FF
.2996	6d da 0e	adc $0eda			adc 	tokenBufferIndex
.2999	18		clc				clc 								; add space allowing for header & $80 trailer
.299a	69 04		adc #$04			adc 	#4
.299c	8d da 0e	sta $0eda			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.299f	20 6d 28	jsr $286d			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.29a2					_HLNNoDelete:
.29a2	ad da 0e	lda $0eda			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.29a5	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.29a7	f0 0c		beq $29b5			beq 	_HLMEditDone
.29a9	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.29ab	18		clc				clc 								; workspace (1k)
.29ac	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.29ae	c5 34		cmp $34				cmp 	highMemory+1
.29b0	b0 0b		bcs $29bd			bcs 	_HLMMemory 					; nope, won't allowit.
.29b2	20 c0 28	jsr $28c0			jsr 	InsertLine 					; insert the line in
.29b5					_HLMEditDone:
.29b5	a2 06		ldx #$06		ldx	#6
.29b7	20 23 40	jsr $4023		jsr	mainHandler
.29ba	4c 27 29	jmp $2927			jmp 	WarmStartEntry
.29bd					_HLMMemory:
.29bd	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.29bf	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.29c2					interactionHandler:
.29c2	7c c5 29	jmp ($29c5,x)			jmp 	(interactionVectors,x)
.29c5					interactionVectors:
>29c5	cb 29					.word _DummyControlHandler ; index 0
>29c7	db 27					.word ColdStartEntry       ; index 2
>29c9	27 29					.word WarmStartEntry       ; index 4
.29cb					_DummyControlHandler:
.29cb	60		rts			rts

;******  Return to file: basic.asm

.29cc					section_end_interaction:
.29cc					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d9d					dataPtr:
>0d9d							.fill 	2
.0d9f					dataIndex:
>0d9f							.fill 	1
.29cc					CommandRead:
.29cc	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.29ce	20 ef 38	jsr $38ef			jsr 	EvaluateReference
.29d1	20 12 2a	jsr $2a12			jsr 	SwapDPCP 					; use the data pointer.
.29d4	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.29d6	c8		iny				iny
.29d7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.29d9	f0 07		beq $29e2			beq 	_CRInData
.29db	88		dey				dey
.29dc	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.29de	aa		tax				tax
.29df	20 ef 30	jsr $30ef			jsr 	ScanForward
.29e2					_CRInData:
.29e2	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.29e4	20 97 38	jsr $3897			jsr 	Evaluate
.29e7	ca		dex				dex 								; and write the value.
.29e8	20 5a 2c	jsr $2c5a			jsr 	WriteValue
.29eb	20 12 2a	jsr $2a12			jsr 	SwapDPCP 					; get the code pointer back.
.29ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.29f0	c8		iny				iny
.29f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.29f3	f0 d7		beq $29cc			beq 	CommandRead
.29f5	88		dey				dey
.29f6	60		rts				rts
.29f7					CommandData:
.29f7	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.29f9	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.29fb	20 ef 30	jsr $30ef			jsr 	ScanForward
.29fe	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.29ff	60		rts				rts
.2a00					CommandRestore:
.2a00	ad c8 0a	lda $0ac8			lda 	basePage
.2a03	8d 9d 0d	sta $0d9d			sta 	dataPtr
.2a06	ad c9 0a	lda $0ac9			lda 	basePage+1
.2a09	8d 9e 0d	sta $0d9e			sta 	dataPtr+1
.2a0c	a9 03		lda #$03			lda 	#3
.2a0e	8d 9f 0d	sta $0d9f			sta 	dataIndex
.2a11	60		rts				rts
.2a12					SwapDPCP:
.2a12	da		phx				phx
.2a13	98		tya				tya 								; swap Y, DataIndex
.2a14	ac 9f 0d	ldy $0d9f			ldy 	DataIndex
.2a17	8d 9f 0d	sta $0d9f			sta 	DataIndex
.2a1a	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2a1c	ae 9d 0d	ldx $0d9d			ldx 	dataptr
.2a1f	8d 9d 0d	sta $0d9d			sta 	dataPtr
.2a22	86 28		stx $28				stx 	codePtr
.2a24	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2a26	ae 9e 0d	ldx $0d9e			ldx 	dataptr+1
.2a29	8d 9e 0d	sta $0d9e			sta 	dataPtr+1
.2a2c	86 29		stx $29				stx 	codePtr+1
.2a2e	fa		plx				plx
.2a2f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.2a30					CommandGOSUB:
.2a30	20 b4 38	jsr $38b4			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2a33	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2a35	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2a37	20 d0 3f	jsr $3fd0			jsr 	RSClaim
.2a3a	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2a3c	20 fc 3f	jsr $3ffc			jsr 	RSSavePosition
.2a3f	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.2a41	f0 1b		beq $2a5e			beq 	GotoTOS 					; and do a GOTO there.
.2a43					CommandRETURN:
.2a43	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a45	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a47	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2a49	f0 05		beq $2a50			beq 	_isok
.2a4b	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2a4d	20 27 15	jsr $1527		jsr	errorHandler
.2a50					_isok:
.2a50	a9 01		lda #$01			lda 	#1
.2a52	20 0f 40	jsr $400f			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2a55	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2a57	20 f2 3f	jsr $3ff2			jsr 	RSFree
.2a5a	60		rts				rts
.2a5b					CommandGOTO:
.2a5b	20 b4 38	jsr $38b4			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2a5e					GotoTOS:
.2a5e	20 d8 33	jsr $33d8			jsr 	ResetCodeAddress 			; simple search.
.2a61					_GotoSearch:
.2a61	a0 00		ldy #$00			ldy 	#0 							; get offset
.2a63	b1 28		lda ($28),y			lda 	(codePtr),y
.2a65	f0 21		beq $2a88			beq 	_GotoError 					; not found.
.2a67	c8		iny				iny									; check LSB match
.2a68	b1 28		lda ($28),y			lda 	(codePtr),y
.2a6a	d5 98		cmp $98,x			cmp 	esInt0,x
.2a6c	d0 07		bne $2a75			bne 	_GotoNext
.2a6e	c8		iny				iny
.2a6f	b1 28		lda ($28),y			lda 	(codePtr),y
.2a71	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2a73	f0 10		beq $2a85			beq 	_GotoFound
.2a75					_GotoNext:
.2a75	a0 00		ldy #$00			ldy 	#0 							; go next line
.2a77	b1 28		lda ($28),y			lda 	(codePtr),y
.2a79	18		clc				clc
.2a7a	65 28		adc $28				adc 	codePtr
.2a7c	85 28		sta $28				sta 	codePtr
.2a7e	90 e1		bcc $2a61			bcc 	_GotoSearch
.2a80	e6 29		inc $29				inc 	codePtr+1
.2a82	4c 61 2a	jmp $2a61			jmp 	_GotoSearch
.2a85					_GotoFound:
.2a85	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2a87	60		rts				rts
.2a88					_GotoError:
.2a88	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2a8a	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0da0					InputBuffer:
>0da0							.fill 	MaxInputSize+1
.2a8d					Command_Input:
.2a8d	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2a8f	c8		iny				iny
.2a90	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2a92	f0 f9		beq $2a8d			beq 	Command_Input
.2a94	88		dey				dey 							; undo consume
.2a95	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2a97	f0 52		beq $2aeb			beq 	_CIExit 				; : or EOL, exit
.2a99	c9 80		cmp #$80			cmp 	#TOK_EOL
.2a9b	f0 4e		beq $2aeb			beq 	_CIExit
.2a9d	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2a9f	90 12		bcc $2ab3			bcc 	_CIVariable
.2aa1	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2aa3	d0 41		bne $2ae6			bne 	_CISyntax
.2aa5	a2 00		ldx #$00			ldx 	#0
.2aa7	20 ab 38	jsr $38ab			jsr 	EvaluateString 			; evaluate and print string
.2aaa	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0
.2aad	20 ba 2b	jsr $2bba			jsr 	PrintString
.2ab0	4c 8d 2a	jmp $2a8d			jmp 	Command_Input
.2ab3					_CIVariable:
.2ab3	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2ab5	20 ef 38	jsr $38ef			jsr 	EvaluateReference  		; this is where its going
.2ab8					_CIRetry:
.2ab8	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2aba	a2 12		ldx #$12		ldx	#18
.2abc	20 05 15	jsr $1505		jsr	deviceHandler
.2abf	5a		phy				phy
.2ac0	20 ff 2a	jsr $2aff			jsr 	InputString 			; input a string (manually)
.2ac3	a2 01		ldx #$01			ldx 	#1
.2ac5	20 ec 2a	jsr $2aec			jsr 	BufferToStackX 			; make stack,x ref input string.
.2ac8	a5 90		lda $90				lda 	esType 					; if target type numeric
.2aca	29 40		and #$40			and 	#$40 					; then convert to number
.2acc	d0 10		bne $2ade			bne 	_CIWrite
.2ace	a2 01		ldx #$01			ldx 	#1
.2ad0	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2ad3	a9 0a		lda #$0a			lda 	#10
.2ad5	20 aa 3d	jsr $3daa			jsr 	MInt32FromString 		; convert it back from a string.
.2ad8	7a		ply				ply
.2ad9	b0 03		bcs $2ade			bcs 	_CIWrite 				; successfully converted.
.2adb	18		clc				clc 							; default fail FP conversion
.2adc	90 da		bcc $2ab8			bcc		_CIRetry				; failed, try again.
.2ade					_CIWrite:
.2ade	a2 00		ldx #$00			ldx 	#0
.2ae0	20 5a 2c	jsr $2c5a			jsr 	WriteValue
.2ae3	4c 8d 2a	jmp $2a8d			jmp 	Command_Input
.2ae6					_CISyntax:
.2ae6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ae8	20 27 15	jsr $1527		jsr	errorHandler
.2aeb					_CIExit:
.2aeb	60		rts				rts
.2aec					BufferToStackX:
.2aec	a9 a0		lda #$a0			lda 	#InputBuffer & $FF
.2aee	95 98		sta $98,x			sta 	esInt0,x
.2af0	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.2af2	95 a0		sta $a0,x			sta 	esInt1,x
.2af4	a9 00		lda #$00			lda 	#0
.2af6	95 a8		sta $a8,x			sta 	esInt2,x
.2af8	95 b0		sta $b0,x			sta 	esInt3,x
.2afa	a9 40		lda #$40			lda 	#$40
.2afc	95 90		sta $90,x			sta 	esType,x
.2afe	60		rts				rts
.2aff					InputString:
.2aff	a9 00		lda #$00			lda 	#0
.2b01	8d a0 0d	sta $0da0			sta 	InputBuffer
.2b04					_InputLoop:
.2b04	a2 18		ldx #$18		ldx	#24
.2b06	20 05 15	jsr $1505		jsr	deviceHandler
.2b09	a2 08		ldx #$08		ldx	#8
.2b0b	20 05 15	jsr $1505		jsr	deviceHandler
.2b0e	c9 00		cmp #$00			cmp 	#0
.2b10	f0 f2		beq $2b04			beq 	_InputLoop
.2b12	c9 08		cmp #$08			cmp 	#8
.2b14	f0 19		beq $2b2f			beq 	_InputBackspace
.2b16	c9 0d		cmp #$0d			cmp 	#13
.2b18	f0 21		beq $2b3b			beq 	_InputExit
.2b1a	ae a0 0d	ldx $0da0			ldx 	InputBuffer
.2b1d	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2b1f	f0 e3		beq $2b04			beq 	_InputLoop
.2b21	9d a1 0d	sta $0da1,x			sta 	InputBuffer+1,x 		; write char
.2b24	ee a0 0d	inc $0da0			inc 	InputBuffer 			; advance count.
.2b27					_InputPrintLoop:
.2b27	a2 12		ldx #$12		ldx	#18
.2b29	20 05 15	jsr $1505		jsr	deviceHandler
.2b2c	4c 04 2b	jmp $2b04			jmp	 	_InputLoop
.2b2f					_InputBackspace:
.2b2f	ad a0 0d	lda $0da0			lda 	InputBuffer 			; at start
.2b32	f0 d0		beq $2b04			beq 	_InputLoop
.2b34	ce a0 0d	dec $0da0			dec 	InputBuffer
.2b37	a9 08		lda #$08			lda 	#8
.2b39	d0 ec		bne $2b27			bne 	_InputPrintLoop
.2b3b					_InputExit:
.2b3b	a2 04		ldx #$04		ldx	#4
.2b3d	20 05 15	jsr $1505		jsr	deviceHandler
.2b40	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0dc1					lastPrintToken:
>0dc1							.fill 	1
.2b41					Command_Print:
.2b41	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2b43	8d c1 0d	sta $0dc1			sta 	lastPrintToken
.2b46	88		dey				dey
.2b47					_PrintLoopSkip:
.2b47	c8		iny				iny
.2b48					_PrintLoop:
.2b48	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2b4a	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2b4c	f0 5b		beq $2ba9			beq 	_PrintExit
.2b4e	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2b50	f0 57		beq $2ba9			beq 	_PrintExit
.2b52	8d c1 0d	sta $0dc1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2b55	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2b57	f0 ee		beq $2b47			beq 	_PrintLoopSkip
.2b59	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2b5b	f0 3c		beq $2b99			beq	 	_PrintNewLine
.2b5d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2b5f	f0 40		beq $2ba1			beq 	_PrintTab
.2b61	20 95 38	jsr $3895			jsr 	EvaluateRoot 				; evaluate something at the root
.2b64	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2b66	85 2a		sta $2a				sta 	temp0
.2b68	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2b6a	85 2b		sta $2b				sta 	1+(temp0)
.2b6c	a5 90		lda $90				lda 	esType 						; get type
.2b6e	f0 15		beq $2b85			beq		_PrintInteger
.2b70	4a		lsr a				lsr 	a 							; check for floating point
.2b71	b0 08		bcs $2b7b			bcs 	_PrintFloat
.2b73					_PrintString:
.2b73	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2b75	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0
.2b78	4c 93 2b	jmp $2b93			jmp 	_PrintTemp0 				; print no leading space.
.2b7b					_PrintFloat:
.2b7b	a9 00		lda #$00			lda 	#0 							; stack level.
.2b7d	a2 16		ldx #$16		ldx	#22
.2b7f	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.2b82	4c 8c 2b	jmp $2b8c			jmp 	_PrintSpaceTemp0
.2b85					_PrintInteger:
.2b85	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2b87	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2b89	20 8f 3e	jsr $3e8f			jsr 	MInt32ToString				; convert to text
.2b8c					_PrintSpaceTemp0:
.2b8c	a9 20		lda #$20			lda 	#32
.2b8e	a2 12		ldx #$12		ldx	#18
.2b90	20 05 15	jsr $1505		jsr	deviceHandler
.2b93					_PrintTemp0:
.2b93	20 ba 2b	jsr $2bba			jsr 	PrintString
.2b96	4c 48 2b	jmp $2b48			jmp 	_PrintLoop
.2b99					_PrintNewLine:
.2b99	a2 04		ldx #$04		ldx	#4
.2b9b	20 05 15	jsr $1505		jsr	deviceHandler
.2b9e	4c 47 2b	jmp $2b47			jmp 	_PrintLoopSkip
.2ba1					_PrintTab:
.2ba1	a2 1a		ldx #$1a		ldx	#26
.2ba3	20 05 15	jsr $1505		jsr	deviceHandler
.2ba6	4c 47 2b	jmp $2b47			jmp 	_PrintLoopSkip
.2ba9					_PrintExit:
.2ba9	ad c1 0d	lda $0dc1			lda		lastPrintToken 				; check last token
.2bac	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2bae	f0 09		beq $2bb9			beq 	_PrintExit2
.2bb0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2bb2	f0 05		beq $2bb9			beq 	_PrintExit2
.2bb4	a2 04		ldx #$04		ldx	#4
.2bb6	20 05 15	jsr $1505		jsr	deviceHandler
.2bb9					_PrintExit2:
.2bb9	60		rts				rts
.2bba					PrintString:
.2bba	da		phx				phx
.2bbb	5a		phy				phy
.2bbc	a0 00		ldy #$00			ldy 	#0							; get length
.2bbe	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bc0	aa		tax				tax 								; into X
.2bc1	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2bc3	f0 0e		beq $2bd3			beq 	_PSExit
.2bc5	ca		dex				dex
.2bc6	da		phx				phx
.2bc7	c8		iny				iny
.2bc8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bca	a2 12		ldx #$12		ldx	#18
.2bcc	20 05 15	jsr $1505		jsr	deviceHandler
.2bcf	fa		plx				plx
.2bd0	4c c1 2b	jmp $2bc1			jmp 	_PSLoop
.2bd3					_PSExit:
.2bd3	7a		ply				ply
.2bd4	fa		plx				plx
.2bd5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2bd6					Command_CLS:
.2bd6	a2 02		ldx #$02		ldx	#2
.2bd8	20 05 15	jsr $1505		jsr	deviceHandler
.2bdb	60		rts				rts
.2bdc					Command_Ink:
.2bdc	a2 00		ldx #$00			ldx 	#0
.2bde	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger
.2be1	a2 06		ldx #$06		ldx	#6
.2be3	20 05 15	jsr $1505		jsr	deviceHandler
.2be6	60		rts				rts
.2be7					Command_Paper:
.2be7	a2 00		ldx #$00			ldx 	#0
.2be9	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger
.2bec	a2 10		ldx #$10		ldx	#16
.2bee	20 05 15	jsr $1505		jsr	deviceHandler
.2bf1	60		rts				rts
.2bf2					Command_Locate:
.2bf2	a2 00		ldx #$00			ldx 	#0
.2bf4	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger
.2bf7	20 b5 3f	jsr $3fb5			jsr 	CheckComma
.2bfa	e8		inx				inx
.2bfb	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger
.2bfe	5a		phy				phy
.2bff	a4 99		ldy $99				ldy 	esInt0+1
.2c01	a5 98		lda $98				lda 	esInt0
.2c03	a2 0e		ldx #$0e		ldx	#14
.2c05	20 05 15	jsr $1505		jsr	deviceHandler
.2c08	7a		ply				ply
.2c09	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2c0a					Command_VDU:
.2c0a	20 b4 38	jsr $38b4			jsr 	EvaluateRootInteger 			; get integer at root.
.2c0d	a5 98		lda $98				lda 	esInt0
.2c0f	a2 12		ldx #$12		ldx	#18
.2c11	20 05 15	jsr $1505		jsr	deviceHandler
.2c14					_CVNext:
.2c14	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2c16	c8		iny				iny
.2c17	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2c19	f0 ef		beq $2c0a			beq 	Command_VDU
.2c1b	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2c1d	d0 0a		bne $2c29			bne 	_CVExit
.2c1f	a5 a0		lda $a0				lda 	esInt1
.2c21	a2 12		ldx #$12		ldx	#18
.2c23	20 05 15	jsr $1505		jsr	deviceHandler
.2c26	4c 14 2c	jmp $2c14			jmp 	_CVNext
.2c29	88		dey		_CVExit:dey
.2c2a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2c2b					Command_Assert:
.2c2b	20 b4 38	jsr $38b4			jsr 	EvaluateRootInteger 		; what is being asserted.
.2c2e	20 5e 3f	jsr $3f5e			jsr 	MInt32Zero 					; is it true ?
.2c31	f0 01		beq $2c34			beq 	_CAError
.2c33	60		rts				rts
.2c34					_CAError:
.2c34	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2c36	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2c39					Command_Dim:
.2c39	a2 04		ldx #$04		ldx	#4
.2c3b	20 15 4f	jsr $4f15		jsr	variableHandler
.2c3e	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2c40	c8		iny				iny
.2c41	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2c43	f0 f4		beq $2c39			beq 	Command_Dim
.2c45	88		dey				dey 								; unpick get
.2c46	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2c47					CommandLet:
.2c47	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2c49	20 ef 38	jsr $38ef			jsr 	EvaluateReference
.2c4c	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2c4e	20 9d 3f	jsr $3f9d			jsr 	CheckToken
.2c51	e8		inx				inx 								; do RHS
.2c52	20 97 38	jsr $3897			jsr 	Evaluate 					; evaluate and dereference
.2c55	ca		dex				dex
.2c56	20 5a 2c	jsr $2c5a			jsr 	WriteValue 					; write it out
.2c59	60		rts				rts
.2c5a					WriteValue:
.2c5a	5a		phy				phy
.2c5b	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2c5e	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2c60	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2c62	29 40		and #$40			and 	#$40
.2c64	d0 4f		bne $2cb5			bne		_WVType
.2c66	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2c68	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2c6a	29 40		and #$40			and 	#$40
.2c6c	d0 1f		bne $2c8d			bne 	_WVCopyString
.2c6e	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2c70	15 91		ora $91,x			ora 	esType+1,x
.2c72	4a		lsr a				lsr 	a
.2c73	90 22		bcc $2c97			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2c75	b5 90		lda $90,x			lda 	esType,x
.2c77	4a		lsr a				lsr 	a
.2c78	90 3b		bcc $2cb5			bcc 	_WVType
.2c7a	e8		inx				inx 								; force the value being written to be a float.
.2c7b	20 fb 34	jsr $34fb			jsr 	BPMakeFloat
.2c7e	ca		dex				dex
.2c7f	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0 					; set Temp0 to write address
.2c82	e8		inx				inx
.2c83	8a		txa				txa
.2c84	a2 22		ldx #$22		ldx	#34
.2c86	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.2c89	aa		tax				tax
.2c8a	4c b3 2c	jmp $2cb3			jmp 	_WVCopyExit
.2c8d					_WVCopyString:
.2c8d	8a		txa				txa
.2c8e	a2 10		ldx #$10		ldx	#16
.2c90	20 ce 42	jsr $42ce		jsr	stringHandler
.2c93	aa		tax				tax
.2c94	4c b3 2c	jmp $2cb3			jmp 	_WVCopyExit
.2c97					_WVCopyData4:
.2c97	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2c99	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2c9b	d0 10		bne $2cad			bne 	_WVCopyData1
.2c9d	a0 03		ldy #$03			ldy 	#3
.2c9f	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2ca1	91 2a		sta ($2a),y			sta 	(temp0),y
.2ca3	88		dey				dey
.2ca4	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2ca6	91 2a		sta ($2a),y			sta 	(temp0),y
.2ca8	88		dey				dey
.2ca9	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2cab	91 2a		sta ($2a),y			sta 	(temp0),y
.2cad					_WVCopyData1:
.2cad	a0 00		ldy #$00			ldy 	#0
.2caf	b5 99		lda $99,x			lda 	esInt0+1,x
.2cb1	91 2a		sta ($2a),y			sta 	(temp0),y
.2cb3					_WVCopyExit:
.2cb3	7a		ply				ply
.2cb4	60		rts				rts
.2cb5					_WVType:
.2cb5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2cb7	20 27 15	jsr $1527		jsr	errorHandler
.2cba					TOSToTemp0:
.2cba	b5 98		lda $98,x			lda 	esInt0,x
.2cbc	85 2a		sta $2a				sta 	temp0
.2cbe	b5 a0		lda $a0,x			lda 	esInt1,x
.2cc0	85 2b		sta $2b				sta 	temp0+1
.2cc2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2cc3					Command_Poke:
.2cc3	a9 01		lda #$01			lda 	#1
.2cc5	d0 06		bne $2ccd			bne 	PokeGeneral
.2cc7					Command_Doke:
.2cc7	a9 02		lda #$02			lda 	#2
.2cc9	d0 02		bne $2ccd			bne 	PokeGeneral
.2ccb					Command_Loke:
.2ccb	a9 03		lda #$03			lda 	#3
.2ccd					PokeGeneral:
.2ccd	48		pha				pha 								; save id (PDL = 123)
.2cce	20 b4 38	jsr $38b4			jsr 	EvaluateRootInteger 		; target address
.2cd1	20 b5 3f	jsr $3fb5			jsr	 	CheckComma
.2cd4	e8		inx				inx
.2cd5	20 b6 38	jsr $38b6			jsr 	EvaluateInteger 			; what value to POKE ?
.2cd8	ca		dex				dex
.2cd9	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0 					; temp0 points to the target address
.2cdc	84 32		sty $32				sty 	tempShort 					; save Y
.2cde	68		pla				pla 								; get copy type (1-3) and dispatch
.2cdf	aa		tax				tax
.2ce0	ca		dex				dex
.2ce1	f0 14		beq $2cf7			beq 	_Poke1
.2ce3	ca		dex				dex
.2ce4	f0 0b		beq $2cf1			beq 	_Poke2
.2ce6	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2ce8	a5 b1		lda $b1				lda 	esInt3+1
.2cea	91 2a		sta ($2a),y			sta 	(temp0),y
.2cec	88		dey				dey
.2ced	a5 a9		lda $a9				lda 	esInt2+1
.2cef	91 2a		sta ($2a),y			sta 	(temp0),y
.2cf1					_Poke2:
.2cf1	a0 01		ldy #$01			ldy 	#1
.2cf3	a5 a1		lda $a1				lda 	esInt1+1
.2cf5	91 2a		sta ($2a),y			sta 	(temp0),y
.2cf7					_Poke1:
.2cf7	a0 00		ldy #$00			ldy 	#0
.2cf9	a5 99		lda $99				lda 	esInt0+1
.2cfb	91 2a		sta ($2a),y			sta 	(temp0),y
.2cfd	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2cff	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2d00					Command_Rem:
.2d00					Command_Rem2:
.2d00	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2d02	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2d04	d0 06		bne $2d0c			bne 	_CRNotString
.2d06	c8		iny				iny
.2d07	98		tya				tya
.2d08	38		sec				sec
.2d09	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2d0b	a8		tay				tay
.2d0c					_CRNotString:
.2d0c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2d0d					CommandStop:
.2d0d	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2d0f	20 27 15	jsr $1527		jsr	errorHandler
.2d12					CommandEnd:
.2d12	4c 1e 40	jmp $401e			jmp 	WarmStart
.2d15					CommandXemu:
.2d15	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2d18					AdvanceNextLine:
.2d18	a0 00		ldy #$00			ldy 	#0 							; get offset
.2d1a	b1 28		lda ($28),y			lda 	(codePtr),y
.2d1c	18		clc				clc 								; add to codePtr
.2d1d	65 28		adc $28				adc 	codePtr
.2d1f	85 28		sta $28				sta 	codePtr
.2d21	90 02		bcc $2d25			bcc 	_ANLNoCarry
.2d23	e6 29		inc $29				inc 	codePtr+1
.2d25					_ANLNoCarry:
.2d25	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2d27	f0 e9		beq $2d12			beq 	CommandEnd 					; execute END
.2d29	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2d2b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2d2c					Command_FOR:
.2d2c	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2d2e	a2 0b		ldx #$0b			ldx 	#11
.2d30	20 d0 3f	jsr $3fd0			jsr 	RSClaim
.2d33	20 47 2c	jsr $2c47			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2d36	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2d38	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2d3a	d0 48		bne $2d84			bne 	_CFType
.2d3c	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2d3e	20 9d 3f	jsr $3f9d			jsr 	CheckToken
.2d41	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2d43	20 b6 38	jsr $38b6			jsr 	EvaluateInteger				; get terminal value in stack 1
.2d46	5a		phy				phy
.2d47	a0 04		ldy #$04			ldy 	#4
.2d49	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2d4b	91 37		sta ($37),y			sta 	(rsPointer),y
.2d4d	c8		iny				iny
.2d4e	a5 a0		lda $a0				lda		esInt1
.2d50	91 37		sta ($37),y			sta 	(rsPointer),y
.2d52	c8		iny				iny
.2d53	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2d55	91 37		sta ($37),y			sta 	(rsPointer),y
.2d57	c8		iny				iny
.2d58	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2d5a	91 37		sta ($37),y			sta 	(rsPointer),y
.2d5c	c8		iny				iny
.2d5d	a5 a1		lda $a1				lda		esInt1+1
.2d5f	91 37		sta ($37),y			sta 	(rsPointer),y
.2d61	c8		iny				iny
.2d62	a5 a9		lda $a9				lda		esInt2+1
.2d64	91 37		sta ($37),y			sta 	(rsPointer),y
.2d66	c8		iny				iny
.2d67	a5 b1		lda $b1				lda		esInt3+1
.2d69	91 37		sta ($37),y			sta 	(rsPointer),y
.2d6b	7a		ply				ply
.2d6c	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2d6e	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2d70	d0 0c		bne $2d7e			bne 	_CFDone
.2d72	c8		iny				iny									; skip over step.
.2d73	20 b6 38	jsr $38b6			jsr 	EvaluateInteger 			; get step
.2d76	5a		phy				phy
.2d77	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2d79	a0 06		ldy #$06			ldy 	#6
.2d7b	91 37		sta ($37),y			sta 	(rsPointer),y
.2d7d	7a		ply				ply
.2d7e					_CFDone:
.2d7e	a9 01		lda #$01			lda 	#1
.2d80	20 fc 3f	jsr $3ffc			jsr 	RSSavePosition 				; save position.
.2d83	60		rts				rts
.2d84					_CFType:
.2d84	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d86	20 27 15	jsr $1527		jsr	errorHandler
.2d89					Command_NEXT:
.2d89	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d8b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d8d	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2d8f	f0 05		beq $2d96			beq 	_isok
.2d91	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2d93	20 27 15	jsr $1527		jsr	errorHandler
.2d96					_isok:
.2d96	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2d98	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2d9a	b0 16		bcs $2db2			bcs 	_CNNoIndex
.2d9c	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2d9e	20 ef 38	jsr $38ef			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2da1	5a		phy				phy
.2da2	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2da4	b1 37		lda ($37),y			lda 	(rsPointer),y
.2da6	d5 98		cmp $98,x			cmp 	esInt0,x
.2da8	d0 72		bne $2e1c			bne 	_CNBadIndex
.2daa	c8		iny				iny
.2dab	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dad	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2daf	d0 6b		bne $2e1c			bne 	_CNBadIndex
.2db1	7a		ply				ply
.2db2					_CNNoIndex:
.2db2	5a		phy				phy
.2db3	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2db5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2db7	85 2a		sta $2a				sta 	temp0
.2db9	c8		iny				iny
.2dba	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dbc	85 2b		sta $2b				sta 	temp0+1
.2dbe	c8		iny				iny
.2dbf	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2dc1	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2dc3	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2dc5	10 01		bpl $2dc8			bpl 	_CNSignX
.2dc7	ca		dex				dex  								; X = $FF
.2dc8					_CNSignX:
.2dc8	18		clc				clc 								; add to the LSB
.2dc9	a0 00		ldy #$00			ldy 	#0
.2dcb	71 2a		adc ($2a),y			adc 	(temp0),y
.2dcd	91 2a		sta ($2a),y			sta 	(temp0),y
.2dcf					_CNPropogate:
.2dcf	c8		iny				iny  								; add the sign extended in X to the rest.
.2dd0	8a		txa				txa
.2dd1	71 2a		adc ($2a),y			adc 	(temp0),y
.2dd3	91 2a		sta ($2a),y			sta 	(temp0),y
.2dd5	c8		iny				iny
.2dd6	8a		txa				txa
.2dd7	71 2a		adc ($2a),y			adc 	(temp0),y
.2dd9	91 2a		sta ($2a),y			sta 	(temp0),y
.2ddb	c8		iny				iny
.2ddc	8a		txa				txa
.2ddd	71 2a		adc ($2a),y			adc 	(temp0),y
.2ddf	91 2a		sta ($2a),y			sta 	(temp0),y
.2de1	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2de2	a5 37		lda $37				lda 	rsPointer
.2de4	69 07		adc #$07			adc 	#7
.2de6	85 2c		sta $2c				sta 	temp1
.2de8	a9 00		lda #$00			lda 	#0
.2dea	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2dec	a8		tay				tay 								; and clear the Y register again.
.2ded	65 38		adc $38				adc 	rsPointer+1
.2def	85 2d		sta $2d				sta 	temp1+1
.2df1	38		sec				sec 								; calculate current - limit oring interim values.
.2df2	20 28 2e	jsr $2e28			jsr 	_CNCompare 					; each of these does a byte.
.2df5	20 28 2e	jsr $2e28			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2df8	20 28 2e	jsr $2e28			jsr 	_CNCompare 					; and the carry of the subtraction.
.2dfb	20 28 2e	jsr $2e28			jsr 	_CNCompare
.2dfe	50 02		bvc $2e02			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2e00	49 80		eor #$80			eor 	#$80
.2e02					_CNNoOverflow:
.2e02	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2e04	30 1b		bmi $2e21			bmi 	_CNCheckDownto
.2e06	c9 00		cmp #$00			cmp 	#0
.2e08	30 0b		bmi $2e15			bmi 	_CNLoopRound 				; loop round if < =
.2e0a	a5 2e		lda $2e				lda 	temp2
.2e0c	f0 07		beq $2e15			beq 	_CNLoopRound
.2e0e					_CNLoopExit:
.2e0e	7a		ply				ply
.2e0f	a9 0b		lda #$0b			lda 	#11
.2e11	20 f2 3f	jsr $3ff2			jsr 	RSFree
.2e14	60		rts				rts
.2e15					_CNLoopRound:
.2e15	7a		ply				ply
.2e16	a9 01		lda #$01			lda 	#1
.2e18	20 0f 40	jsr $400f			jsr 	RSLoadPosition				; go back to the loop top
.2e1b	60		rts				rts
.2e1c					_CNBadIndex:
.2e1c	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2e1e	20 27 15	jsr $1527		jsr	errorHandler
.2e21					_CNCheckDownto:
.2e21	c9 00		cmp #$00			cmp 	#0
.2e23	10 f0		bpl $2e15			bpl 	_CNLoopRound
.2e25	4c 0e 2e	jmp $2e0e			jmp 	_CNLoopExit
.2e28					_CNCompare:
.2e28	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2e2a	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2e2c	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2e2e	85 2e		sta $2e				sta 	temp2
.2e30	c8		iny				iny
.2e31	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2e32					CommandIf:
.2e32	20 b4 38	jsr $38b4			jsr 	EvaluateRootInteger 		; get what's being tested.
.2e35	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2e37	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2e39	f0 04		beq $2e3f			beq 	_IfSimple
.2e3b	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2e3d	d0 1b		bne $2e5a			bne 	_IfComplex
.2e3f					_IfSimple:
.2e3f	20 5e 3f	jsr $3f5e			jsr 	MInt32Zero					; check if TOS zero
.2e42	f0 10		beq $2e54			beq 	_IfEOL 						; go to next line.
.2e44	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2e46	c8		iny				iny
.2e47	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2e49	f0 0c		beq $2e57			beq 	_IfGoto 					; do the Goto code
.2e4b	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2e4d	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2e4f	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2e51	f0 04		beq $2e57			beq 	_IfGoto
.2e53	60		rts				rts 								; else continue on this line.
.2e54					_IfEOL:
.2e54	4c 18 2d	jmp $2d18			jmp 	AdvanceNextLine 			; go to next line
.2e57					_IfGoto:
.2e57	4c 5b 2a	jmp $2a5b			jmp 	CommandGoto
.2e5a					_IfComplex:
.2e5a	20 5e 3f	jsr $3f5e			jsr 	MInt32Zero 					; is it true ?
.2e5d	f0 01		beq $2e60			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2e5f	60		rts				rts 								; else continue.
.2e60					_IFSkip:
.2e60	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2e62	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2e64	4c ef 30	jmp $30ef			jmp		ScanForward
.2e67					Command_ELSE:
.2e67	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2e69	8a		txa				txa
.2e6a	4c ef 30	jmp $30ef			jmp		ScanForward
.2e6d					Command_ENDIF:
.2e6d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0dc2					storeSize:
>0dc2							.fill 	1
.2e6e					CommandLocal:
.2e6e	a2 00		ldx #$00			ldx 	#0
.2e70	20 8c 2e	jsr $2e8c			jsr 	LocaliseVariable 			; localise one.
.2e73					_CLCheckNext:
.2e73	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2e75	c8		iny				iny
.2e76	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2e78	f0 06		beq $2e80			beq 	_CLAssignment
.2e7a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2e7c	f0 f0		beq $2e6e			beq 	CommandLocal
.2e7e	88		dey				dey
.2e7f	60		rts				rts
.2e80					_CLAssignment:
.2e80	a2 01		ldx #$01			ldx 	#1
.2e82	20 97 38	jsr $3897			jsr 	Evaluate 					; evaluate RHS
.2e85	ca		dex				dex
.2e86	20 5a 2c	jsr $2c5a			jsr 	WriteValue
.2e89	4c 73 2e	jmp $2e73			jmp 	_CLCheckNext
.2e8c					LocaliseVariable:
.2e8c	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2e8e	c9 40		cmp #$40			cmp 	#$40
.2e90	b0 63		bcs $2ef5			bcs 	_LVSyntax
.2e92	8a		txa				txa 								; get the address of that variable.
.2e93	a2 02		ldx #$02		ldx	#2
.2e95	20 15 4f	jsr $4f15		jsr	variableHandler
.2e98	aa		tax				tax
.2e99	da		phx				phx
.2e9a	5a		phy				phy
.2e9b	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2e9e	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2ea0	0a		asl a				asl 	a
.2ea1	10 16		bpl $2eb9			bpl 	_LVPushNumber
.2ea3	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2ea5	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ea7	c8		iny				iny
.2ea8	85 2c		sta $2c				sta 	temp1
.2eaa	b1 2a		lda ($2a),y			lda 	(temp0),y
.2eac	85 2d		sta $2d				sta 	temp1+1
.2eae	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2eb0	b1 2c		lda ($2c),y			lda 	(temp1),y
.2eb2	aa		tax				tax 								; into X
.2eb3	e8		inx				inx 								; +1 for length.
.2eb4	a9 24		lda #$24			lda 	#markerString
.2eb6	4c ce 2e	jmp $2ece			jmp 	_LVWriteFrame
.2eb9					_LVPushNumber:
.2eb9	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2ebb	85 2c		sta $2c				sta 	temp1
.2ebd	a5 2b		lda $2b				lda 	temp0+1
.2ebf	85 2d		sta $2d				sta 	temp1+1
.2ec1	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2ec3	4a		lsr a				lsr 	a
.2ec4	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2ec6	a2 04		ldx #$04			ldx 	#VarISize
.2ec8	90 04		bcc $2ece			bcc 	_LVIsInteger
.2eca	a9 23		lda #$23			lda 	#markerFloat
.2ecc	a2 06		ldx #$06			ldx 	#VarFSize
.2ece					_LVIsInteger:
.2ece					_LVWriteFrame:
.2ece	8e c2 0d	stx $0dc2			stx 	storeSize 					; number of bytes to copy from (temp0)
.2ed1	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2ed2	e8		inx				inx
.2ed3	e8		inx				inx
.2ed4	20 d0 3f	jsr $3fd0			jsr 	RSClaim 					; create the stack frame.
.2ed7	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2ed9	a0 01		ldy #$01			ldy 	#1
.2edb	91 37		sta ($37),y			sta 	(rsPointer),y
.2edd	c8		iny				iny
.2ede	a5 2b		lda $2b				lda 	temp0+1
.2ee0	91 37		sta ($37),y			sta 	(rsPointer),y
.2ee2	a0 00		ldy #$00			ldy 	#0
.2ee4					_LVCopyData:
.2ee4	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2ee6	c8		iny				iny 								; write allowing for the header bit.
.2ee7	c8		iny				iny
.2ee8	c8		iny				iny
.2ee9	91 37		sta ($37),y			sta 	(rsPointer),y
.2eeb	88		dey				dey
.2eec	88		dey				dey
.2eed	ce c2 0d	dec $0dc2			dec 	storeSize 					; do it storesize times
.2ef0	d0 f2		bne $2ee4			bne 	_LVCopyData
.2ef2	7a		ply				ply
.2ef3	fa		plx				plx
.2ef4	60		rts				rts
.2ef5					_LVSyntax:
.2ef5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ef7	20 27 15	jsr $1527		jsr	errorHandler
.2efa					RestoreLocals:
.2efa	a2 00		ldx #$00			ldx 	#0
.2efc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2efe	c9 40		cmp #$40			cmp	 	#64
.2f00	90 01		bcc $2f03			bcc 	_RLocal
.2f02	60		rts				rts
.2f03					_RLocal:
.2f03	da		phx				phx
.2f04	5a		phy				phy
.2f05	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2f07	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f09	85 2a		sta $2a				sta 	temp0
.2f0b	c8		iny				iny
.2f0c	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f0e	85 2b		sta $2b				sta 	temp0+1
.2f10	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2f12	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f14	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2f16	f0 25		beq $2f3d			beq 	_RString
.2f18	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2f1a	c9 25		cmp #$25			cmp 	#markerInt
.2f1c	f0 02		beq $2f20			beq 	_RIsInteger
.2f1e	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2f20					_RIsInteger:
.2f20	da		phx				phx
.2f21	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2f23					_RCopyBack:
.2f23	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f25	88		dey				dey
.2f26	88		dey				dey
.2f27	88		dey				dey
.2f28	91 2a		sta ($2a),y			sta 	(temp0),y
.2f2a	c8		iny				iny
.2f2b	c8		iny				iny
.2f2c	c8		iny				iny
.2f2d	c8		iny				iny
.2f2e	ca		dex				dex
.2f2f	d0 f2		bne $2f23			bne 	_RCopyBack
.2f31	68		pla				pla 								; get size add 3
.2f32	18		clc				clc
.2f33	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2f35					_RRestoreAAndLoop:
.2f35	20 f2 3f	jsr $3ff2			jsr 	RSFree
.2f38	7a		ply				ply
.2f39	fa		plx				plx
.2f3a	4c fa 2e	jmp $2efa			jmp 	RestoreLocals 				; go see if there are any more locals.
.2f3d					_RString:
.2f3d	a2 00		ldx #$00			ldx 	#0
.2f3f	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2f41	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f43	95 98		sta $98,x			sta 	esInt0,x
.2f45	c8		iny				iny
.2f46	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f48	95 a0		sta $a0,x			sta 	esInt1,x
.2f4a	18		clc				clc
.2f4b	a5 37		lda $37				lda 	rsPointer
.2f4d	69 03		adc #$03			adc 	#3
.2f4f	95 99		sta $99,x			sta 	esInt0+1,x
.2f51	a5 38		lda $38				lda 	rsPointer+1
.2f53	69 00		adc #$00			adc 	#0
.2f55	95 a1		sta $a1,x			sta 	esInt1+1,x
.2f57	8a		txa				txa
.2f58	a2 10		ldx #$10		ldx	#16
.2f5a	20 ce 42	jsr $42ce		jsr	stringHandler
.2f5d	a0 03		ldy #$03			ldy 	#3 							; get string length
.2f5f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f61	18		clc				clc
.2f62	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2f64	4c 35 2f	jmp $2f35			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0dc3					paramCount:
>0dc3							.fill 	1
.2f67					CallProc:
.2f67	20 ef 2f	jsr $2fef			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2f6a	48		pha				pha 								; save length on stack
.2f6b	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2f6d	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2f6f	48		pha				pha
.2f70	a5 2a		lda $2a				lda 	temp0
.2f72	48		pha				pha
.2f73	98		tya				tya 								; calculate Y + length
.2f74	18		clc				clc
.2f75	65 32		adc $32				adc 	tempShort
.2f77	a8		tay				tay
.2f78	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2f7a					_CallProcEvalParams:
.2f7a	e8		inx				inx
.2f7b	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2f7d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f7f	f0 0b		beq $2f8c			beq 	_CPDoneParams
.2f81	20 97 38	jsr $3897			jsr 	Evaluate 					; evaluate a parameter
.2f84	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2f86	c8		iny				iny
.2f87	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2f89	f0 ef		beq $2f7a			beq 	_CallProcEvalParams
.2f8b	88		dey				dey 								; undo consumption.
.2f8c					_CPDoneParams:
.2f8c	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen 			; check closing parenthesis.
.2f8f	8e c3 0d	stx $0dc3			stx 	paramCount 					; store parameter count+1
.2f92	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2f94	a9 50		lda #$50			lda 	#markerPROC
.2f96	20 d0 3f	jsr $3fd0			jsr 	RSClaim
.2f99	a9 01		lda #$01			lda 	#1 							; store return address.
.2f9b	20 fc 3f	jsr $3ffc			jsr 	RSSavePosition
.2f9e	68		pla				pla 								; get the new code Ptr
.2f9f	85 28		sta $28				sta 	codePtr
.2fa1	68		pla				pla
.2fa2	85 29		sta $29				sta 	codePtr+1
.2fa4	68		pla				pla 								; length of name + 4 is the param start.
.2fa5	18		clc				clc
.2fa6	69 04		adc #$04			adc 	#4
.2fa8	a8		tay				tay
.2fa9	a2 ff		ldx #$ff			ldx 	#$FF
.2fab					_CPLoadParameters:
.2fab	e8		inx				inx 								; point to where the address should be loaded.
.2fac	ec c3 0d	cpx $0dc3			cpx 	paramCount 					; too many parameters in definition ?
.2faf	f0 1e		beq $2fcf			beq 	_CPParamError
.2fb1	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2fb3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2fb5	f0 0e		beq $2fc5			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2fb7	20 8c 2e	jsr $2e8c			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2fba	20 5a 2c	jsr $2c5a			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2fbd	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2fbf	c8		iny				iny
.2fc0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2fc2	f0 e7		beq $2fab			beq 	_CPLoadParameters
.2fc4	88		dey				dey 								; no, unconsume and check for )
.2fc5					_CPParamComplete:
.2fc5	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen 			; check )
.2fc8	e8		inx				inx 								; check right number of parameters have been consumed
.2fc9	ec c3 0d	cpx $0dc3			cpx 	paramCount
.2fcc	d0 01		bne $2fcf			bne 	_CPParamError
.2fce	60		rts				rts
.2fcf					_CPParamError:
.2fcf	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2fd1	20 27 15	jsr $1527		jsr	errorHandler
.2fd4					ReturnProc:
.2fd4	20 fa 2e	jsr $2efa			jsr 	RestoreLocals 				; get the locals back.
.2fd7	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2fd9	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2fdb	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2fdd	f0 05		beq $2fe4			beq 	_isok
.2fdf	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2fe1	20 27 15	jsr $1527		jsr	errorHandler
.2fe4					_isok:
.2fe4	a9 01		lda #$01			lda 	#1
.2fe6	20 0f 40	jsr $400f			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2fe9	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2feb	20 f2 3f	jsr $3ff2			jsr 	RSFree
.2fee	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0dc4					procList:
>0dc4							.fill 	2		 					; terminated by name high being zero.
.0dc6					yInLine:
>0dc6							.fill 	1
.2fef					FindProcedure:
.2fef	8c c6 0d	sty $0dc6			sty 	yInLine 					; save current position.
.2ff2	20 a9 30	jsr $30a9			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2ff5	85 2c		sta $2c				sta 	temp1
.2ff7	ad c4 0d	lda $0dc4			lda		procList 					; put procList address in temp2
.2ffa	85 2e		sta $2e				sta 	temp2
.2ffc	ad c5 0d	lda $0dc5			lda 	procList+1
.2fff	85 2f		sta $2f				sta 	temp2+1
.3001	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.3003					_FPLoop:
.3003	b1 2e		lda ($2e),y			lda 	(temp2),y
.3005	f0 4d		beq $3054			beq 	_FPError 					; if so, we don't know this procedure.
.3007	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.3009	c8		iny				iny
.300a	b1 2e		lda ($2e),y			lda 	(temp2),y
.300c	85 2a		sta $2a				sta 	temp0
.300e	c8		iny				iny
.300f	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.3011	c5 2c		cmp $2c				cmp 	temp1
.3013	d0 29		bne $303e			bne 	_FPNext 					; hash is different, go to next.
.3015	38		sec				sec
.3016	ad c6 0d	lda $0dc6			lda 	yInLine 					; position in line must be at least 4
.3019	e9 04		sbc #$04			sbc 	#4
.301b	18		clc				clc
.301c	65 28		adc $28				adc 	codePtr
.301e	85 30		sta $30				sta 	temp3
.3020	a5 29		lda $29				lda 	codePtr+1
.3022	69 00		adc #$00			adc 	#0
.3024	85 31		sta $31				sta 	temp3+1
.3026	5a		phy				phy
.3027	a0 04		ldy #$04			ldy 	#4
.3029					_FPCName:
.3029	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.302b	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.302d	d0 0e		bne $303d			bne 	_FPpulYNext 				; if different go to next one.
.302f	c8		iny				iny
.3030	c9 3a		cmp #$3a			cmp 	#$3A
.3032	90 f5		bcc $3029			bcc 	_FPCName 					; compare the whole lot....
.3034	68		pla				pla 								; throw away the saved Y
.3035	98		tya				tya 								; length of name is Y-4
.3036	38		sec				sec
.3037	e9 04		sbc #$04			sbc 	#4
.3039	ac c6 0d	ldy $0dc6			ldy 	yInLine  					; get the original Y back
.303c	60		rts				rts
.303d					_FPpulYNext:
.303d	7a		ply				ply
.303e					_FPNext:
.303e	c8		iny				iny 								; next procedure record.
.303f	10 c2		bpl $3003			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.3041	98		tya				tya 								; subtract 128 from Y
.3042	38		sec				sec
.3043	e9 80		sbc #$80			sbc 	#128
.3045	a8		tay				tay
.3046	18		clc				clc 								; add 128 to temp2, so we can have more than
.3047	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.3049	69 80		adc #$80			adc 	#128
.304b	85 2e		sta $2e				sta 	temp2
.304d	90 b4		bcc $3003			bcc 	_FPLoop
.304f	e6 2f		inc $2f				inc 	temp2+1
.3051	4c 03 30	jmp $3003			jmp 	_FPLoop
.3054					_FPError:
.3054	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.3056	20 27 15	jsr $1527		jsr	errorHandler
.3059					ScanProc:
.3059	5a		phy				phy
.305a	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.305c	8d c4 0d	sta $0dc4			sta 	procList
.305f	a5 36		lda $36				lda 	lowMemory+1
.3061	8d c5 0d	sta $0dc5			sta 	procList+1
.3064	20 d8 33	jsr $33d8			jsr 	ResetCodeAddress 			; back to the start.
.3067					_ScanLoop:
.3067	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.3069	b1 28		lda ($28),y			lda 	(codePtr),y
.306b	f0 2a		beq $3097			beq 	_ScanExit
.306d	a0 03		ldy #$03			ldy 	#3							; get first token
.306f	b1 28		lda ($28),y			lda 	(codePtr),y
.3071	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.3073	d0 12		bne $3087			bne 	_ScanNext
.3075	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.3077	20 9e 30	jsr $309e			jsr 	_ScanWrite
.307a	a5 28		lda $28				lda 	codePtr
.307c	20 9e 30	jsr $309e			jsr 	_ScanWrite
.307f	a0 04		ldy #$04			ldy 	#4 							; start of name part
.3081	20 a9 30	jsr $30a9			jsr 	CalculateProcedureHash 		; calculate procedure hash
.3084	20 9e 30	jsr $309e			jsr 	_ScanWrite					; and write that
.3087					_ScanNext:
.3087	18		clc				clc
.3088	a0 00		ldy #$00			ldy 	#0
.308a	b1 28		lda ($28),y			lda 	(codePtr),y
.308c	65 28		adc $28				adc 	codePtr
.308e	85 28		sta $28				sta 	codePtr
.3090	90 d5		bcc $3067			bcc 	_ScanLoop
.3092	e6 29		inc $29				inc 	codePtr+1
.3094	4c 67 30	jmp $3067			jmp 	_ScanLoop
.3097					_ScanExit:
.3097	a9 00		lda #$00			lda 	#0 							; write ending zero.
.3099	20 9e 30	jsr $309e			jsr 	_ScanWrite
.309c	7a		ply				ply
.309d	60		rts				rts
.309e					_ScanWrite:
.309e	a0 00		ldy #$00			ldy 	#0
.30a0	91 35		sta ($35),y			sta 	(lowMemory),y
.30a2	e6 35		inc $35				inc 	lowMemory
.30a4	d0 02		bne $30a8			bne 	_SWNoCarry
.30a6	e6 36		inc $36				inc 	lowMemory+1
.30a8					_SWNoCarry:
.30a8	60		rts				rts
.30a9					CalculateProcedureHash:
.30a9	a9 00		lda #$00			lda 	#0 							; clear hash.
.30ab	85 2a		sta $2a				sta 	temp0
.30ad					_CPHLoop:
.30ad	18		clc				clc 								; add character and rotate and add carry back in
.30ae	b1 28		lda ($28),y			lda 	(codePtr),y
.30b0	65 2a		adc $2a				adc 	temp0
.30b2	6a		ror a				ror 	a
.30b3	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.30b5	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.30b7	b1 28		lda ($28),y			lda 	(codePtr),y
.30b9	c8		iny				iny 								; advance incase we go round again.
.30ba	c9 3a		cmp #$3a			cmp 	#$3A
.30bc	90 ef		bcc $30ad			bcc 	_CPHLoop
.30be	a5 2a		lda $2a				lda 	temp0
.30c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.30c1					Command_Repeat:
.30c1	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.30c3	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.30c5	20 d0 3f	jsr $3fd0			jsr 	RSClaim
.30c8	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.30ca	20 fc 3f	jsr $3ffc			jsr 	RSSavePosition
.30cd	60		rts				rts
.30ce					Command_Until:
.30ce	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.30d0	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.30d2	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.30d4	f0 05		beq $30db			beq 	_isok
.30d6	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.30d8	20 27 15	jsr $1527		jsr	errorHandler
.30db					_isok:
.30db	20 b4 38	jsr $38b4			jsr 	EvaluateRootInteger 		; at the bottom.
.30de	20 5e 3f	jsr $3f5e			jsr 	MInt32Zero					; check if TOS zero
.30e1	d0 06		bne $30e9			bne 	_CUExit
.30e3	a9 01		lda #$01			lda 	#1
.30e5	20 0f 40	jsr $400f			jsr 	RSLoadPosition 				; reload the position from offset 1.
.30e8	60		rts				rts
.30e9					_CUExit:
.30e9	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.30eb	20 f2 3f	jsr $3ff2			jsr 	RSFree
.30ee	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.30ef					ScanForward:
.30ef	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.30f1	86 2d		stx $2d				stx 	temp1+1
.30f3	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.30f5	85 2e		sta $2e				sta 	temp2
.30f7	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.30f9	c8		iny				iny
.30fa	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.30fc	d0 08		bne $3106			bne 	_SFNoCheck 					; if so, check token against entered values.
.30fe	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.3100	f0 24		beq $3126			beq 	_SFExit 					; at the same strcture depth.
.3102	c5 2d		cmp $2d				cmp 	temp1+1
.3104	f0 20		beq $3126			beq 	_SFExit
.3106					_SFNoCheck:
.3106	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.3108	90 ed		bcc $30f7			bcc 	_SFLoop
.310a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.310c	90 19		bcc $3127			bcc 	_SFSpecials
.310e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.3110	90 e5		bcc $30f7			bcc 	_SFLoop
.3112	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.3114	b0 e1		bcs $30f7			bcs 	_SFLoop
.3116	aa		tax				tax  								; token in X, and look up the adjuster.
.3117	bd d2 37	lda $37d2,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.311a	38		sec				sec 								; convert to an offset ($FF,$01)
.311b	e9 81		sbc #$81			sbc 	#$81
.311d	18		clc				clc 								; add to depth
.311e	65 2e		adc $2e				adc 	temp2
.3120	85 2e		sta $2e				sta 	temp2
.3122	10 d3		bpl $30f7			bpl 	_SFLoop 					; +ve okay to continue
.3124	30 07		bmi $312d			bmi 	SFError 					; if gone -ve then we have a nesting error
.3126	60		rts		_SFExit:rts
.3127					_SFSpecials:
.3127	20 32 31	jsr $3132			jsr 	ScannerSkipSpecial
.312a	4c f7 30	jmp $30f7			jmp 	_SFLoop
.312d					SFError:
.312d	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.312f	20 27 15	jsr $1527		jsr	errorHandler
.3132					ScannerSkipSpecial:
.3132	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.3134	f0 10		beq $3146			beq 	_SFNextLine
.3136	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.3138	f0 2b		beq $3165			beq 	_SFFloatSkip
.313a	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.313c	f0 02		beq $3140			beq 	_SFSkipString
.313e	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.313f	60		rts				rts 								; token.
.3140					_SFSkipString:
.3140	98		tya				tya
.3141	38		sec				sec
.3142	71 28		adc ($28),y			adc 	(codePtr),y
.3144	a8		tay				tay
.3145	60		rts				rts
.3146					_SFNextLine:
.3146	a0 00		ldy #$00			ldy 	#0 							; get offset
.3148	b1 28		lda ($28),y			lda 	(codePtr),y
.314a	18		clc				clc 								; add to code pointer.
.314b	65 28		adc $28				adc 	codePtr
.314d	85 28		sta $28				sta 	codePtr
.314f	90 02		bcc $3153			bcc		_SFNLNoCarry
.3151	e6 29		inc $29				inc 	codePtr+1
.3153					_SFNLNoCarry:
.3153	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.3155	d0 0b		bne $3162			bne		_SFXNL 						; no go round again
.3157	a5 2c		lda $2c				lda 	temp1
.3159	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.315b	d0 d0		bne $312d			bne 	SFError 					; read uses this to search for data statements
.315d	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.315f	20 27 15	jsr $1527		jsr	errorHandler
.3162	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.3164	60		rts				rts
.3165					_SFFloatSkip:
.3165	98		tya				tya 								; skip over an embedded float.
.3166	18		clc				clc
.3167	69 05		adc #$05			adc 	#FloatEmbeddedSize
.3169	a8		tay				tay
.316a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.316b					Command_While:
.316b	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.316d	a2 04		ldx #$04			ldx 	#4
.316f	20 d0 3f	jsr $3fd0			jsr 	RSClaim 					; create on stack.
.3172	88		dey				dey
.3173	a9 01		lda #$01			lda 	#1
.3175	20 fc 3f	jsr $3ffc			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.3178	c8		iny				iny
.3179	20 b4 38	jsr $38b4			jsr 	EvaluateRootInteger			; get the conditional
.317c	20 5e 3f	jsr $3f5e			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.317f	f0 01		beq $3182			beq 	_CWFail
.3181	60		rts				rts
.3182					_CWFail:
.3182	a9 04		lda #$04			lda 	#4
.3184	20 f2 3f	jsr $3ff2			jsr 	RSFree 						; close the just opened position.
.3187	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.3189	aa		tax				tax
.318a	20 ef 30	jsr $30ef			jsr 	ScanForward
.318d	60		rts				rts
.318e					Command_Wend:
.318e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3190	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.3192	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.3194	f0 05		beq $319b			beq 	_isok
.3196	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.3198	20 27 15	jsr $1527		jsr	errorHandler
.319b					_isok:
.319b	a9 01		lda #$01			lda 	#1
.319d	20 0f 40	jsr $400f			jsr 	RSLoadPosition				; go back until true
.31a0	a9 04		lda #$04			lda 	#4
.31a2	20 f2 3f	jsr $3ff2			jsr 	RSFree 						; close the loop
.31a5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.31a6					CommandClear:
.31a6					XCommandClear:
.31a6	5a		phy				phy
.31a7	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.31aa	85 33		sta $33				sta 	highMemory
.31ac	ad cd 0a	lda $0acd			lda 	endMemory+1
.31af	85 34		sta $34				sta 	highMemory+1
.31b1	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.31b4	85 2a		sta $2a				sta 	temp0
.31b6	ad c9 0a	lda $0ac9			lda 	basePage+1
.31b9	85 2b		sta $2b				sta 	temp0+1
.31bb					_CCFindEnd:
.31bb	a0 00		ldy #$00			ldy 	#0
.31bd	b1 2a		lda ($2a),y			lda 	(temp0),y
.31bf	f0 0c		beq $31cd			beq 	_CCFoundEnd 				; offset zero is end.
.31c1	18		clc				clc
.31c2	65 2a		adc $2a				adc 	temp0 						; move to next line
.31c4	85 2a		sta $2a				sta 	temp0
.31c6	90 f3		bcc $31bb			bcc 	_CCFindEnd
.31c8	e6 2b		inc $2b				inc 	temp0+1
.31ca	4c bb 31	jmp $31bb			jmp 	_CCFindEnd
.31cd					_CCFoundEnd:
.31cd	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.31cf	85 35		sta $35				sta 	lowMemory
.31d1	a5 2b		lda $2b				lda 	temp0+1
.31d3	85 36		sta $36				sta 	lowMemory+1
.31d5	18		clc				clc 								; put temp0+1 in endProgram
.31d6	a5 2a		lda $2a				lda 	temp0
.31d8	69 01		adc #$01			adc 	#1
.31da	8d ca 0a	sta $0aca			sta 	endProgram
.31dd	a5 2b		lda $2b				lda 	temp0+1
.31df	69 00		adc #$00			adc 	#0
.31e1	8d cb 0a	sta $0acb			sta 	endProgram+1
.31e4	18		clc				clc 								; put a bit of space in.
.31e5	a5 35		lda $35				lda 	lowMemory
.31e7	69 04		adc #$04			adc 	#4
.31e9	85 35		sta $35				sta 	lowMemory
.31eb	90 02		bcc $31ef			bcc 	_CCNoCarry
.31ed	e6 36		inc $36				inc 	lowMemory+1
.31ef					_CCNoCarry:
.31ef	20 c2 3f	jsr $3fc2			jsr 	RSReset 					; reset the return stack.
.31f2	a2 06		ldx #$06		ldx	#6
.31f4	20 15 4f	jsr $4f15		jsr	variableHandler
.31f7	20 59 30	jsr $3059			jsr 	ScanProc 					; scan for procedures
.31fa	20 00 2a	jsr $2a00			jsr 	CommandRestore 				; do a restore
.31fd	7a		ply				ply
.31fe	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0dc7					structIndent:
>0dc7							.fill 	1
.31ff					CommandList:
.31ff	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.3201	8e c7 0d	stx $0dc7			stx 	structIndent
.3204	20 37 3f	jsr $3f37			jsr 	MInt32False
.3207	e8		inx				inx
.3208	20 33 3f	jsr $3f33			jsr 	MInt32True
.320b	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.320d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.320f	f0 15		beq $3226			beq 	_CLEndLine
.3211	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.3213	30 1b		bmi $3230			bmi 	_CLDoListing 				; do the whole lot.
.3215	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.3217	20 b6 38	jsr $38b6			jsr 	EvaluateInteger
.321a	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.321c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.321e	f0 06		beq $3226			beq 	_CLEndLine
.3220	20 77 3e	jsr $3e77			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.3223	4c 30 32	jmp $3230			jmp 	_CLDoListing 				; own e.g. list 1100
.3226					_CLEndLine:
.3226	c8		iny				iny 								; skip comma
.3227	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.3229	30 05		bmi $3230			bmi 	_CLDoListing
.322b	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.322d	20 b6 38	jsr $38b6			jsr 	EvaluateInteger				; get end
.3230					_CLDoListing:
.3230	20 d8 33	jsr $33d8			jsr 	ResetCodeAddress 			; back to the start.
.3233					_CLCheckLoop:
.3233	a2 18		ldx #$18		ldx	#24
.3235	20 05 15	jsr $1505		jsr	deviceHandler
.3238	a0 00		ldy #$00			ldy 	#0							; check end.
.323a	b1 28		lda ($28),y			lda 	(codePtr),y
.323c	f0 41		beq $327f			beq 	_CLEnd
.323e	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3240	20 82 32	jsr $3282			jsr 	CLCompareLineTOS
.3243	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3245	f0 28		beq $326f			beq 	_CLNext
.3247	e8		inx				inx
.3248	20 82 32	jsr $3282			jsr 	CLCompareLineTOS 			; compare vs higher
.324b	c9 01		cmp #$01			cmp 	#1
.324d	f0 20		beq $326f			beq 	_CLNext
.324f	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.3251	20 a4 32	jsr $32a4			jsr 	CLStructureCheck
.3254	ad c7 0d	lda $0dc7			lda 	structIndent 				; indent level.
.3257	10 02		bpl $325b			bpl 	_CLPositive
.3259	a9 00		lda #$00			lda 	#0
.325b					_CLPositive:
.325b	a2 04		ldx #$04		ldx	#4
.325d	20 56 4b	jsr $4b56		jsr	tokeniserHandler
.3260	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.3262	20 a4 32	jsr $32a4			jsr 	CLStructureCheck
.3265	ad c7 0d	lda $0dc7			lda 	structIndent
.3268	10 05		bpl $326f			bpl 	_CLNext
.326a	a9 00		lda #$00			lda 	#0
.326c	8d c7 0d	sta $0dc7			sta 	structIndent
.326f					_CLNext:
.326f	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.3271	b1 28		lda ($28),y			lda 	(codePtr),y
.3273	18		clc				clc
.3274	65 28		adc $28				adc 	codePtr
.3276	85 28		sta $28				sta 	codePtr
.3278	90 b9		bcc $3233			bcc 	_CLCheckLoop
.327a	e6 29		inc $29				inc 	codePtr+1
.327c	4c 33 32	jmp $3233			jmp 	_CLCheckLoop
.327f					_CLEnd:
.327f	4c 1e 40	jmp $401e			jmp 	WarmStart 					; warm start after list.
.3282					CLCompareLineTOS:
.3282	a0 01		ldy #$01			ldy 	#1
.3284	b1 28		lda ($28),y			lda 	(codePtr),y
.3286	55 98		eor $98,x			eor 	esInt0,x
.3288	85 2a		sta $2a				sta 	temp0
.328a	c8		iny				iny
.328b	b1 28		lda ($28),y			lda 	(codePtr),y
.328d	55 a0		eor $a0,x			eor 	esInt1,x
.328f	05 2a		ora $2a				ora 	temp0
.3291	f0 10		beq $32a3			beq 	_CLCLTExit
.3293	88		dey				dey
.3294	b1 28		lda ($28),y			lda 	(codePtr),y
.3296	d5 98		cmp $98,x			cmp 	esInt0,x
.3298	c8		iny				iny
.3299	b1 28		lda ($28),y			lda 	(codePtr),y
.329b	f5 a0		sbc $a0,x			sbc 	esInt1,x
.329d	a9 ff		lda #$ff			lda 	#255
.329f	90 02		bcc $32a3			bcc 	_CLCLTExit
.32a1	a9 01		lda #$01			lda 	#1
.32a3					_CLCLTExit:
.32a3	60		rts				rts
.32a4					CLStructureCheck:
.32a4	85 2a		sta $2a				sta 	temp0
.32a6	a0 03		ldy #$03			ldy 	#3
.32a8					_CLSCLoop:
.32a8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.32aa	c8		iny				iny
.32ab	c9 80		cmp #$80			cmp 	#$80
.32ad	90 f9		bcc $32a8			bcc 	_CLSCLoop 					; $00-$7F just step over.
.32af	f0 28		beq $32d9			beq		_CLSCExit					; EOL return
.32b1	c9 86		cmp #$86			cmp 	#$86 						; special handler
.32b3	90 1e		bcc $32d3			bcc 	_CLSCSpecial
.32b5	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.32b7	90 ef		bcc $32a8			bcc 	_CLSCLoop
.32b9	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.32bb	b0 eb		bcs $32a8			bcs 	_CLSCLoop
.32bd	aa		tax				tax 								; get adjustment
.32be	bd d2 37	lda $37d2,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.32c1	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.32c3	d0 e3		bne $32a8			bne 	_CLSCLoop
.32c5	38		sec				sec
.32c6	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.32c8	0a		asl a				asl 	a 							; double indent step
.32c9	18		clc				clc
.32ca	6d c7 0d	adc $0dc7			adc 	structIndent 				; add to structure indent
.32cd	8d c7 0d	sta $0dc7			sta 	structIndent
.32d0	4c a8 32	jmp $32a8			jmp 	_CLSCLoop
.32d3					_CLSCSpecial:
.32d3	20 32 31	jsr $3132			jsr 	ScannerSkipSpecial
.32d6	4c a8 32	jmp $32a8			jmp 	_CLSCLoop
.32d9					_CLSCExit:
.32d9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.32da					CommandLoad:
.32da	20 02 33	jsr $3302			jsr 	CLSParameters 					; get parameters for load.
.32dd	08		php				php
.32de	a2 0c		ldx #$0c		ldx	#12
.32e0	20 05 15	jsr $1505		jsr	deviceHandler
.32e3	28		plp				plp
.32e4	b0 08		bcs $32ee			bcs 	_CLExit 						; if CC then load a program, so warm start.
.32e6	20 a6 31	jsr $31a6			jsr 	CommandClear
.32e9	a2 04		ldx #$04		ldx	#4
.32eb	20 c2 29	jsr $29c2		jsr	interactionHandler
.32ee					_CLExit
.32ee	60		rts				rts
.32ef					CommandSave:
.32ef	20 02 33	jsr $3302			jsr 	CLSParameters					; get parameters for save
.32f2	90 08		bcc $32fc			bcc 	_CSNoOverrideAddress
.32f4	20 b5 3f	jsr $3fb5			jsr 	CheckComma 						; should be a comma.
.32f7	a2 02		ldx #$02			ldx 	#2
.32f9	20 b6 38	jsr $38b6			jsr 	EvaluateInteger 				; get save end address.
.32fc					_CSNoOverrideAddress:
.32fc	a2 16		ldx #$16		ldx	#22
.32fe	20 05 15	jsr $1505		jsr	deviceHandler
.3301	60		rts				rts
.3302					CLSParameters:
.3302	a2 00		ldx #$00			ldx 	#0 								; string at +0
.3304	20 ab 38	jsr $38ab			jsr 	EvaluateString
.3307	e8		inx				inx 									; erase out +1 (start) +2 (end, for save)
.3308	20 37 3f	jsr $3f37			jsr 	MInt32False
.330b	e8		inx				inx
.330c	20 37 3f	jsr $3f37			jsr 	MInt32False
.330f	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.3312	85 99		sta $99				sta 	esInt0+1
.3314	ad c9 0a	lda $0ac9			lda 	basePage+1
.3317	85 a1		sta $a1				sta 	esInt1+1
.3319	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.331c	85 9a		sta $9a				sta 	esInt0+2
.331e	ad cb 0a	lda $0acb			lda 	endProgram+1
.3321	85 a2		sta $a2				sta 	esInt1+2
.3323	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.3325	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3327	d0 08		bne $3331			bne 	_CLSDefault
.3329	c8		iny				iny 									; skip comma
.332a	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.332c	20 b6 38	jsr $38b6			jsr 	EvaluateInteger 				; the load or start save address
.332f	38		sec				sec 									; return CS indicating override
.3330	60		rts				rts
.3331					_CLSDefault:
.3331	18		clc				clc
.3332	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.3333					Command_New:
.3333					Command_XNew:
.3333	20 d8 33	jsr $33d8			jsr 	ResetCodeAddress 			; point to first line
.3336	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.3338	98		tya				tya
.3339	91 28		sta ($28),y			sta 	(codePtr),y
.333b	20 a6 31	jsr $31a6			jsr 	CommandClear 				; clear everything down.
.333e	4c 12 2d	jmp $2d12			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0dc8					breakCounter:
>0dc8								.fill 	1
.0dc9					breakIncrement:
>0dc9								.fill 	1
.3341					Command_Run:
.3341					XCommand_Run:
.3341	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.3343	9a		txs				txs
.3344	20 d2 33	jsr $33d2			jsr 	BreakOn 					; turn break on
.3347	20 a6 31	jsr $31a6			jsr 	CommandClear 				; clear everything.
.334a	20 d8 33	jsr $33d8			jsr 	ResetCodeAddress 			; back to the start.
.334d					Command_RunFrom:
.334d	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.334f					CRNextInstruction:
.334f	a9 00		lda #$00			lda 	#0
.3351	85 3a		sta $3a				sta 	softMemAlloc+1
.3353	ad c8 0d	lda $0dc8			lda 	breakCounter 				; check for break.
.3356	6d c9 0d	adc $0dc9			adc 	breakIncrement
.3359	8d c8 0d	sta $0dc8			sta 	breakCounter
.335c	90 05		bcc $3363			bcc 	_CRNoChecks
.335e	a2 18		ldx #$18		ldx	#24
.3360	20 05 15	jsr $1505		jsr	deviceHandler
.3363					_CRNoChecks
.3363	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.3365	10 1c		bpl $3383			bpl 	_CRNotToken
.3367	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.3369	b0 0c		bcs $3377			bcs 	_CRExecute
.336b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.336d	b0 55		bcs $33c4			bcs 	Unimplemented
.336f	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.3371	b0 04		bcs $3377			bcs 	_CRExecute
.3373	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.3375	b0 16		bcs $338d			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.3377					_CRExecute:
.3377	c8		iny				iny 								; consume it.
.3378	0a		asl a				asl 	a 							; double it, losing most significant bit.
.3379	aa		tax				tax
.337a	20 80 33	jsr $3380			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.337d	4c 4f 33	jmp $334f			jmp 	CRNextInstruction
.3380					_CRRunRoutine:
.3380	7c ea 33	jmp ($33ea,x)			jmp 	(Group0Vectors,x)
.3383					_CRNotToken:
.3383	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.3385	b0 3d		bcs $33c4			bcs 	Unimplemented
.3387					_CRDefaultLet:
.3387	20 47 2c	jsr $2c47			jsr 	CommandLet 					; do the default, LET
.338a	4c 4f 33	jmp $334f			jmp 	CRNextInstruction
.338d					_CRCheckIndirect:
.338d	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.338f	f0 0a		beq $339b			beq 	_CRAndCommand
.3391	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.3393	f0 f2		beq $3387			beq 	_CRDefaultLet
.3395	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.3397	f0 ee		beq $3387			beq 	_CRDefaultLet
.3399	d0 29		bne $33c4			bne 	Unimplemented
.339b					_CRAndCommand:
.339b	c8		iny				iny 								; skip over the AND token
.339c	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.339e	20 b8 33	jsr $33b8			jsr 	CommandAssembler 			; do the assembler command
.33a1	4c 4f 33	jmp $334f			jmp 	CRNextInstruction 			; and loop round.
.33a4					CommandShift1:
.33a4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.33a6	10 1c		bpl $33c4			bpl 	Unimplemented 				; we have an error as this should not happen.
.33a8	c8		iny				iny 								; advance over it.
.33a9	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.33ab	b0 0b		bcs $33b8			bcs 	CommandAssembler
.33ad	0a		asl a				asl 	a 							; double into X
.33ae	aa		tax				tax
.33af	7c b4 34	jmp ($34b4,x)			jmp 	(Group1Vectors-12,x)
.33b2					CommandShift2:
.33b2	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.33b4	20 74 18	jsr $1874		jsr	extensionHandler
.33b7	60		rts				rts
.33b8					CommandAssembler:
.33b8	a2 02		ldx #$02		ldx	#2
.33ba	20 ac 13	jsr $13ac		jsr	assemblerHandler
.33bd	60		rts				rts
.33be					CommandAssemblerLabel:
.33be	a2 04		ldx #$04		ldx	#4
.33c0	20 ac 13	jsr $13ac		jsr	assemblerHandler
.33c3	60		rts				rts
.33c4					Unimplemented:
.33c4	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.33c6	20 27 15	jsr $1527		jsr	errorHandler
.33c9					CommandColon:
.33c9	60		rts				rts
.33ca					CommandBreak:
.33ca	20 b4 38	jsr $38b4			jsr 	EvaluateRootInteger
.33cd	20 5e 3f	jsr $3f5e			jsr 	MInt32Zero
.33d0	f0 02		beq $33d4			beq 	BreakOff
.33d2					BreakOn:
.33d2	a2 04		ldx #$04			ldx 	#4 							; checks 1 in 256/X instructions.
.33d4					BreakOff:
.33d4	8e c9 0d	stx $0dc9			stx 	breakIncrement
.33d7	60		rts				rts
.33d8					ResetCodeAddress:
.33d8	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.33db	85 28		sta $28				sta 	codePtr
.33dd	ad c9 0a	lda $0ac9			lda 	basePage+1
.33e0	85 29		sta $29				sta 	codePtr+1
.33e2	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.33e4	60		rts				rts
.33e5					TKErr01:
.33e5					TKErr02:
.33e5					TKErr03:
.33e5					TKErr04:
.33e5					TKErr05:
.33e5					TKErr06:
.33e5					TKErr07:
.33e5					TKErr08:
.33e5					TKErr09:
.33e5					TKErr10:
.33e5					TKErr11:
.33e5					TKErr12:
.33e5					TKErr14:
.33e5					TKErr15:
.33e5					TKErr16:
.33e5					TKErr17:
.33e5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.33e7	20 27 15	jsr $1527		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.33ea					Group0Vectors:
>33ea	18 2d					.word	AdvanceNextLine          ; $80 [[eol]]
>33ec	a4 33					.word	CommandShift1            ; $81 [[sh1]]
>33ee	b2 33					.word	CommandShift2            ; $82 [[sh2]]
>33f0	e5 33					.word	TKErr09                  ; $83 [[sh3]]
>33f2	e5 33					.word	TKErr10                  ; $84 [[fpc]]
>33f4	e5 33					.word	TKErr08                  ; $85 [[str]]
>33f6	9d 35					.word	AndHandler               ; $86 and
>33f8	8a 35					.word	OrHandler                ; $87 or
>33fa	77 35					.word	XorHandler               ; $88 xor
>33fc	bf 36					.word	CompareGreaterEq         ; $89 >=
>33fe	c9 36					.word	CompareLessEq            ; $8a <=
>3400	ab 36					.word	CompareGreater           ; $8b >
>3402	a1 36					.word	CompareLess              ; $8c <
>3404	97 36					.word	CompareEquals            ; $8d =
>3406	b5 36					.word	CompareNotEquals         ; $8e <>
>3408	08 35					.word	AddHandler               ; $8f +
>340a	2b 35					.word	SubHandler               ; $90 -
>340c	c3 35					.word	ShrHandler               ; $91 >>
>340e	b0 35					.word	ShlHandler               ; $92 <<
>3410	3e 35					.word	MulHandler               ; $93 *
>3412	51 35					.word	DivHandler               ; $94 /
>3414	64 35					.word	ModHandler               ; $95 mod
>3416	fc 35					.word	PowerHandler             ; $96 ^
>3418	d6 35					.word	WordRefHandler           ; $97 !
>341a	e9 35					.word	ByteRefHandler           ; $98 ?
>341c	c1 30					.word	Command_Repeat           ; $99 repeat
>341e	6b 31					.word	Command_While            ; $9a while
>3420	2c 2d					.word	Command_FOR              ; $9b for
>3422	32 2e					.word	CommandIf                ; $9c if
>3424	e5 33					.word	TKErr04                  ; $9d defproc
>3426	ce 30					.word	Command_Until            ; $9e until
>3428	8e 31					.word	Command_Wend             ; $9f wend
>342a	89 2d					.word	Command_NEXT             ; $a0 next
>342c	e5 33					.word	TKErr06                  ; $a1 then
>342e	6d 2e					.word	Command_ENDIF            ; $a2 endif
>3430	d4 2f					.word	ReturnProc               ; $a3 endproc
>3432	21 38					.word	UnaryParenthesis         ; $a4 (
>3434	fb 39					.word	UnaryLen                 ; $a5 len(
>3436	3f 3a					.word	UnarySgn                 ; $a6 sgn(
>3438	28 3a					.word	UnaryAbs                 ; $a7 abs(
>343a	98 3a					.word	Unary_Random             ; $a8 random(
>343c	e2 3a					.word	Unary_Page               ; $a9 page
>343e	33 3f					.word	MInt32True               ; $aa true
>3440	37 3f					.word	MInt32False              ; $ab false
>3442	ad 3a					.word	Unary_Min                ; $ac min(
>3444	b1 3a					.word	Unary_Max                ; $ad max(
>3446	ba 3b					.word	UnarySys                 ; $ae sys(
>3448	63 3b					.word	UnaryTimer               ; $af timer(
>344a	7d 39					.word	EventFunction            ; $b0 event(
>344c	8a 3b					.word	UnaryGet                 ; $b1 get(
>344e	7a 3b					.word	UnaryInkey               ; $b2 inkey(
>3450	33 3b					.word	UnaryAlloc               ; $b3 alloc(
>3452	ef 3b					.word	ExecChr                  ; $b4 chr$(
>3454	1b 3c					.word	ExecLeft                 ; $b5 left$(
>3456	38 3c					.word	ExecMid                  ; $b6 mid$(
>3458	60 3c					.word	ExecRight                ; $b7 right$(
>345a	02 39					.word	Event_Str                ; $b8 str$(
>345c	31 39					.word	UnaryVal                 ; $b9 val(
>345e	56 3a					.word	UnaryPeek                ; $ba peek(
>3460	5c 3a					.word	UnaryDeek                ; $bb deek(
>3462	62 3a					.word	UnaryLeek                ; $bc leek(
>3464	19 3a					.word	UnaryAsc                 ; $bd asc(
>3466	0d 3b					.word	UnaryIntToFloat          ; $be int(
>3468	20 3b					.word	UnaryFloatToInt          ; $bf float(
>346a	34 39					.word	UnaryIsVal               ; $c0 isval(
>346c	04 3c					.word	ExecUpper                ; $c1 upper$(
>346e	01 3c					.word	ExecLower                ; $c2 lower$(
>3470	f0 3a					.word	UnaryReference           ; $c3 @
>3472	06 3b					.word	UnaryComplement          ; $c4 ~
>3474	03 3b					.word	UnaryHexMarker           ; $c5 &
>3476	a5 3b					.word	UnaryGetString           ; $c6 get$(
>3478	ab 3b					.word	UnaryInkeyString         ; $c7 inkey$(
>347a	de 3b					.word	UnaryMem                 ; $c8 mem
>347c	e5 33					.word	TKErr01                  ; $c9 )
>347e	c9 33					.word	CommandColon             ; $ca :
>3480	e5 33					.word	TKErr02                  ; $cb ,
>3482	e5 33					.word	TKErr03                  ; $cc ;
>3484	00 2d					.word	Command_Rem2             ; $cd '
>3486	e5 33					.word	TKErr07                  ; $ce to
>3488	e5 33					.word	TKErr05                  ; $cf step
>348a	67 2f					.word	CallProc                 ; $d0 proc
>348c	6e 2e					.word	CommandLocal             ; $d1 local
>348e	39 2c					.word	Command_Dim              ; $d2 dim
>3490	00 2d					.word	Command_Rem              ; $d3 rem
>3492	47 2c					.word	CommandLet               ; $d4 let
>3494	8d 2a					.word	Command_Input            ; $d5 input
>3496	67 2e					.word	Command_ELSE             ; $d6 else
>3498	0a 2c					.word	Command_VDU              ; $d7 vdu
>349a	41 2b					.word	Command_Print            ; $d8 print
>349c	f7 29					.word	CommandData              ; $d9 data
>349e	74 24					.word	Command_Image            ; $da image
>34a0	e5 33					.word	TKErr12                  ; $db at
>34a2	e5 33					.word	TKErr14                  ; $dc flip
>34a4	2b 2c					.word	Command_Assert           ; $dd assert
>34a6	c3 2c					.word	Command_Poke             ; $de poke
>34a8	c7 2c					.word	Command_Doke             ; $df doke
>34aa	cb 2c					.word	Command_Loke             ; $e0 loke
>34ac	dc 2b					.word	Command_Ink              ; $e1 ink
>34ae	e7 2b					.word	Command_Paper            ; $e2 paper
>34b0	d6 2b					.word	Command_CLS              ; $e3 cls
>34b2	f2 2b					.word	Command_Locate           ; $e4 locate
>34b4	be 33					.word	CommandAssemblerLabel    ; $e5 .
>34b6	e5 33					.word	TKErr15                  ; $e6 from
>34b8	e5 33					.word	TKErr11                  ; $e7 #
>34ba	a6 31					.word	CommandClear             ; $e8 clear
>34bc	e5 33					.word	TKErr16                  ; $e9 text
>34be	e5 33					.word	TKErr17                  ; $ea type

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.34c0					Group1Vectors:
>34c0	da 32					.word	CommandLoad              ; $86 load
>34c2	ef 32					.word	CommandSave              ; $87 save
>34c4	ff 31					.word	CommandList              ; $88 list
>34c6	33 33					.word	Command_New              ; $89 new
>34c8	ca 33					.word	CommandBreak             ; $8a break
>34ca	41 33					.word	Command_Run              ; $8b run
>34cc	cc 29					.word	CommandRead              ; $8c read
>34ce	00 2a					.word	CommandRestore           ; $8d restore
>34d0	12 2d					.word	CommandEnd               ; $8e end
>34d2	0d 2d					.word	CommandStop              ; $8f stop
>34d4	15 2d					.word	CommandXemu              ; $90 xemu
>34d6	5b 2a					.word	CommandGOTO              ; $91 goto
>34d8	30 2a					.word	CommandGOSUB             ; $92 gosub
>34da	43 2a					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.34dc					BinaryProcess:
.34dc	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.34de	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.34e0	0a		asl a				asl 	a
.34e1	30 0e		bmi $34f1			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.34e3	18		clc				clc 								; return CC for integer
.34e4	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.34e6	f0 08		beq $34f0			beq 	_BPExit 					; if both integer then return with CC.
.34e8	20 f6 34	jsr $34f6			jsr 	BPMakeBothFloat 			; make both float
.34eb	a9 01		lda #$01			lda 	#$01 						; set result type to float
.34ed	95 90		sta $90,x			sta 	esType,x
.34ef	38		sec				sec 								; and return with carry set.
.34f0					_BPExit:
.34f0	60		rts				rts
.34f1					_BPStringType:
.34f1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.34f3	20 27 15	jsr $1527		jsr	errorHandler
.34f6					BPMakeBothFloat:
.34f6	e8		inx				inx
.34f7	20 fb 34	jsr $34fb			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.34fa	ca		dex				dex
.34fb					BPMakeFloat:
.34fb	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.34fd	4a		lsr a				lsr 	a
.34fe	b0 07		bcs $3507			bcs 	_BPIsFloat 					; already a float if set.
.3500	8a		txa				txa
.3501	a2 1c		ldx #$1c		ldx	#28
.3503	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3506	aa		tax				tax
.3507					_BPIsFloat:
.3507	60		rts				rts
.3508					AddHandler:
.3508	20 d9 36	jsr $36d9			jsr 	DereferenceTwo 				; dereference top two on stack.
.350b	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.350d	35 91		and $91,x			and 	esType+1,x
.350f	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.3511	d0 10		bne $3523			bne 	_AHStringConcat				; concatenate strings.
.3513	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.3516	b0 03		bcs $351b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3518	4c 1d 3e	jmp $3e1d			jmp 	MInt32Add 							; else do it as integer.
.351b					_IsFPOperation:
.351b	8a		txa				txa 								; call the relevant fp routine
.351c	a2 04		ldx #$04		ldx	#4
.351e	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3521	aa		tax				tax
.3522	60		rts				rts
.3523					_AHStringConcat:
.3523	8a		txa				txa 								; handled by the string module.
.3524	a2 06		ldx #$06		ldx	#6
.3526	20 ce 42	jsr $42ce		jsr	stringHandler
.3529	aa		tax				tax
.352a	60		rts				rts
.352b					SubHandler:
.352b	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.352e	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.3531	b0 03		bcs $3536			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3533	4c 37 3e	jmp $3e37			jmp 	MInt32Sub 							; else do it as integer.
.3536					_IsFPOperation:
.3536	8a		txa				txa 								; call the relevant fp routine
.3537	a2 12		ldx #$12		ldx	#18
.3539	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.353c	aa		tax				tax
.353d	60		rts				rts
.353e					MulHandler:
.353e	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.3541	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.3544	b0 03		bcs $3549			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3546	4c 51 3e	jmp $3e51			jmp 	MInt32Multiply 							; else do it as integer.
.3549					_IsFPOperation:
.3549	8a		txa				txa 								; call the relevant fp routine
.354a	a2 0c		ldx #$0c		ldx	#12
.354c	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.354f	aa		tax				tax
.3550	60		rts				rts
.3551					DivHandler:
.3551	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.3554	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.3557	b0 03		bcs $355c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3559	4c 11 3d	jmp $3d11			jmp 	MInt32SDivide 							; else do it as integer.
.355c					_IsFPOperation:
.355c	8a		txa				txa 								; call the relevant fp routine
.355d	a2 08		ldx #$08		ldx	#8
.355f	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3562	aa		tax				tax
.3563	60		rts				rts
.3564					ModHandler:
.3564	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.3567	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.356a	b0 03		bcs $356f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.356c	4c 8f 3d	jmp $3d8f			jmp 	MInt32Modulus 							; else do it as integer.
.356f					_IsFPOperation:
.356f	8a		txa				txa 								; call the relevant fp routine
.3570	a2 0a		ldx #$0a		ldx	#10
.3572	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3575	aa		tax				tax
.3576	60		rts				rts
.3577					XorHandler:
.3577	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.357a	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.357d	b0 03		bcs $3582			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.357f	4c c3 3c	jmp $3cc3			jmp 	MInt32Xor 							; else do it as integer.
.3582					_IsFPOperation:
.3582	8a		txa				txa 								; call the relevant fp routine
.3583	a2 0a		ldx #$0a		ldx	#10
.3585	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3588	aa		tax				tax
.3589	60		rts				rts
.358a					OrHandler:
.358a	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.358d	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.3590	b0 03		bcs $3595			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3592	4c aa 3c	jmp $3caa			jmp 	MInt32Or 							; else do it as integer.
.3595					_IsFPOperation:
.3595	8a		txa				txa 								; call the relevant fp routine
.3596	a2 0a		ldx #$0a		ldx	#10
.3598	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.359b	aa		tax				tax
.359c	60		rts				rts
.359d					AndHandler:
.359d	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.35a0	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.35a3	b0 03		bcs $35a8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35a5	4c 91 3c	jmp $3c91			jmp 	MInt32And 							; else do it as integer.
.35a8					_IsFPOperation:
.35a8	8a		txa				txa 								; call the relevant fp routine
.35a9	a2 0a		ldx #$0a		ldx	#10
.35ab	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.35ae	aa		tax				tax
.35af	60		rts				rts
.35b0					ShlHandler:
.35b0	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.35b3	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.35b6	b0 03		bcs $35bb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35b8	4c 31 36	jmp $3631			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.35bb					_IsFPOperation:
.35bb	8a		txa				txa 								; call the relevant fp routine
.35bc	a2 0a		ldx #$0a		ldx	#10
.35be	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.35c1	aa		tax				tax
.35c2	60		rts				rts
.35c3					ShrHandler:
.35c3	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.35c6	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.35c9	b0 03		bcs $35ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35cb	4c 34 36	jmp $3634			jmp 	MInt32ShiftRightX 							; else do it as integer.
.35ce					_IsFPOperation:
.35ce	8a		txa				txa 								; call the relevant fp routine
.35cf	a2 0a		ldx #$0a		ldx	#10
.35d1	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.35d4	aa		tax				tax
.35d5	60		rts				rts
.35d6					WordRefHandler:
.35d6	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.35d9	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.35dc	b0 03		bcs $35e1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35de	4c 23 36	jmp $3623			jmp 	MInt32WordIndirect 							; else do it as integer.
.35e1					_IsFPOperation:
.35e1	8a		txa				txa 								; call the relevant fp routine
.35e2	a2 0a		ldx #$0a		ldx	#10
.35e4	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.35e7	aa		tax				tax
.35e8	60		rts				rts
.35e9					ByteRefHandler:
.35e9	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.35ec	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.35ef	b0 03		bcs $35f4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35f1	4c 27 36	jmp $3627			jmp 	MInt32ByteIndirect 							; else do it as integer.
.35f4					_IsFPOperation:
.35f4	8a		txa				txa 								; call the relevant fp routine
.35f5	a2 0a		ldx #$0a		ldx	#10
.35f7	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.35fa	aa		tax				tax
.35fb	60		rts				rts
.35fc					PowerHandler:
.35fc	20 d9 36	jsr $36d9			jsr 	DereferenceTwo
.35ff	20 dc 34	jsr $34dc			jsr 	BinaryProcess 				; check to see if either is float
.3602	b0 03		bcs $3607			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3604	4c 0f 36	jmp $360f			jmp 	PowerInteger 							; else do it as integer.
.3607					_IsFPOperation:
.3607	8a		txa				txa 								; call the relevant fp routine
.3608	a2 18		ldx #$18		ldx	#24
.360a	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.360d	aa		tax				tax
.360e	60		rts				rts
.360f					PowerInteger:
.360f	20 f6 34	jsr $34f6			jsr 	BPMakeBothFloat				; make them float.
.3612	8a		txa				txa
.3613	a2 18		ldx #$18		ldx	#24
.3615	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3618	a2 14		ldx #$14		ldx	#20
.361a	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.361d	aa		tax				tax
.361e	a9 00		lda #$00			lda 	#0 							; make type integer
.3620	95 90		sta $90,x			sta 	esType,x
.3622	60		rts				rts
.3623					Mint32WordIndirect:
.3623	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.3625	d0 02		bne $3629			bne 	Min32Indirect
.3627					Mint32ByteIndirect:
.3627	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.3629					Min32Indirect:
.3629	48		pha				pha 								; save the indirection
.362a	20 1d 3e	jsr $3e1d			jsr 	MInt32Add 					; add a!b a?b
.362d	68		pla				pla 								; and set the type to reference.
.362e	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.3630	60		rts				rts
.3631					Mint32ShiftLeftX:
.3631	18		clc				clc 								; CC shift left
.3632	90 01		bcc $3635			bcc 	Mint32Shift
.3634					Mint32ShiftRightX:
.3634	38		sec				sec 								; CS shift right
.3635					Mint32Shift:
.3635	08		php				php 								; save carry flag on stack.
.3636	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3638	15 a9		ora $a9,x			ora 	esInt2+1,x
.363a	15 b1		ora $b1,x			ora 	esInt3+1,x
.363c	d0 1e		bne $365c			bne 	_MShiftZero
.363e	b5 99		lda $99,x			lda 	esInt0+1,x
.3640	c9 20		cmp #$20			cmp 	#32
.3642	b0 18		bcs $365c			bcs 	_MShiftZero
.3644					_MShiftLoop:
.3644	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3646	f0 12		beq $365a			beq 	_MShiftExit
.3648	d6 99		dec $99,x			dec 	esInt0+1,x
.364a	28		plp				plp 								; restore and save carry
.364b	08		php				php
.364c	90 06		bcc $3654			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.364e	20 55 3f	jsr $3f55			jsr 	Mint32ShiftRight
.3651	4c 44 36	jmp $3644			jmp 	_MShiftLoop
.3654					_MShiftLeft:
.3654	20 4c 3f	jsr $3f4c			jsr 	Mint32ShiftLeft
.3657	4c 44 36	jmp $3644			jmp 	_MShiftLoop
.365a					_MShiftExit:
.365a	28		plp				plp	 								; throw saved carry and exit
.365b	60		rts				rts
.365c					_MShiftZero:
.365c	4c 37 3f	jmp $3f37			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.365f					PerformComparison:
.365f	20 d9 36	jsr $36d9			jsr 	DereferenceTwo 				; make both values.
.3662	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.3664	35 91		and $91,x			and 	esType+1,x
.3666	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3667	30 1d		bmi $3686			bmi 	_PCIsString
.3669	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.366b	15 91		ora $91,x			ora 	esType+1,x
.366d	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.366e	30 22		bmi $3692			bmi 	_PCError
.3670	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.3672	f0 0f		beq $3683			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3674	20 f6 34	jsr $34f6			jsr 	BPMakeBothFloat 			; make both float
.3677	8a		txa				txa
.3678	a2 06		ldx #$06		ldx	#6
.367a	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.367d	86 32		stx $32				stx 	tempShort 					; save result
.367f	aa		tax				tax
.3680	a5 32		lda $32				lda 	tempShort
.3682	60		rts				rts
.3683					_PCIsInteger:
.3683	4c dc 3c	jmp $3cdc			jmp 	MInt32Compare
.3686					_PCIsString:
.3686	8a		txa				txa 								; A has SP
.3687	a2 0a		ldx #$0a		ldx	#10
.3689	20 ce 42	jsr $42ce		jsr	stringHandler
.368c	86 32		stx $32				stx 	tempShort 					; save result
.368e	aa		tax				tax 								; put SP back in X and get result.
.368f	a5 32		lda $32				lda 	tempShort
.3691	60		rts				rts
.3692					_PCError:
.3692	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3694	20 27 15	jsr $1527		jsr	errorHandler
.3697					CompareEquals:
.3697	20 5f 36	jsr $365f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.369a	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.369c	f0 35		beq $36d3			beq  	CompareTrue
.369e	4c d6 36	jmp $36d6			jmp 	CompareFalse
.36a1					CompareLess:
.36a1	20 5f 36	jsr $365f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36a4	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.36a6	f0 2b		beq $36d3			beq  	CompareTrue
.36a8	4c d6 36	jmp $36d6			jmp 	CompareFalse
.36ab					CompareGreater:
.36ab	20 5f 36	jsr $365f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36ae	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.36b0	f0 21		beq $36d3			beq  	CompareTrue
.36b2	4c d6 36	jmp $36d6			jmp 	CompareFalse
.36b5					CompareNotEquals:
.36b5	20 5f 36	jsr $365f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36b8	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.36ba	d0 17		bne $36d3			bne  	CompareTrue
.36bc	4c d6 36	jmp $36d6			jmp 	CompareFalse
.36bf					CompareGreaterEq:
.36bf	20 5f 36	jsr $365f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36c2	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.36c4	d0 0d		bne $36d3			bne  	CompareTrue
.36c6	4c d6 36	jmp $36d6			jmp 	CompareFalse
.36c9					CompareLessEq:
.36c9	20 5f 36	jsr $365f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36cc	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.36ce	d0 03		bne $36d3			bne  	CompareTrue
.36d0	4c d6 36	jmp $36d6			jmp 	CompareFalse
.36d3					CompareTrue:
.36d3	4c 33 3f	jmp $3f33			jmp 	MInt32True
.36d6					CompareFalse:
.36d6	4c 37 3f	jmp $3f37			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.36d9					DereferenceTwo:
.36d9	e8		inx				inx
.36da	20 de 36	jsr $36de			jsr 	DereferenceOne
.36dd	ca		dex				dex
.36de					DereferenceOne:
.36de	b5 90		lda $90,x			lda 	esType,x
.36e0	10 3b		bpl $371d			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.36e2	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.36e3	b0 39		bcs $371e			bcs 	_DRFloatDeReference
.36e5	5a		phy				phy
.36e6	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.36e8	85 2a		sta $2a				sta 	temp0
.36ea	b5 a0		lda $a0,x			lda 	esInt1,x
.36ec	85 2b		sta $2b				sta 	temp0+1
.36ee	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.36f0	95 a0		sta $a0,x			sta 	esInt1,x
.36f2	95 a8		sta $a8,x			sta 	esInt2,x
.36f4	95 b0		sta $b0,x			sta 	esInt3,x
.36f6	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.36f8	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.36fa	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.36fb	30 0d		bmi $370a			bmi 	_DeRefString 				; string, 2 bytes only
.36fd	d0 11		bne $3710			bne 	_DeRefByte 					; byte 1 byte only
.36ff					_DeRefLong:
.36ff	a0 03		ldy #$03			ldy 	#3
.3701	b1 2a		lda ($2a),y			lda 	(temp0),y
.3703	95 b0		sta $b0,x			sta 	esInt3,x
.3705	88		dey				dey
.3706	b1 2a		lda ($2a),y			lda 	(temp0),y
.3708	95 a8		sta $a8,x			sta 	esInt2,x
.370a					_DeRefString:
.370a	a0 01		ldy #$01			ldy 	#1
.370c	b1 2a		lda ($2a),y			lda 	(temp0),y
.370e	95 a0		sta $a0,x			sta 	esInt1,x
.3710					_DeRefByte:
.3710	a0 00		ldy #$00			ldy 	#0
.3712	b1 2a		lda ($2a),y			lda 	(temp0),y
.3714	95 98		sta $98,x			sta 	esInt0,x
.3716	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.3718	29 40		and #$40			and 	#$40
.371a	95 90		sta $90,x			sta 	esType,x
.371c	7a		ply				ply
.371d					_DRNotReference
.371d	60		rts				rts
.371e					_DRFloatDereference:
.371e	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0 					; address to deref in temp0
.3721	8a		txa				txa
.3722	a2 1e		ldx #$1e		ldx	#30
.3724	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3727	aa		tax				tax
.3728	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.372a	95 90		sta $90,x			sta 	esType,x
.372c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.372d					EvaluateLevel:
.372d	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.372f	b0 1e		bcs $374f			bcs 	_ELStack
.3731	48		pha				pha 								; save precedence level.
.3732	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3734	95 98		sta $98,x			sta 	esInt0,x
.3736	95 a0		sta $a0,x			sta 	esInt1,x
.3738	95 a8		sta $a8,x			sta 	esInt2,x
.373a	95 b0		sta $b0,x			sta 	esInt3,x
.373c	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.373e	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.3740	30 26		bmi $3768			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.3742	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3743	30 0f		bmi $3754			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3745	8a		txa				txa 								; stack level in X
.3746	a2 02		ldx #$02		ldx	#2
.3748	20 15 4f	jsr $4f15		jsr	variableHandler
.374b	aa		tax				tax
.374c	4c 91 37	jmp $3791			jmp		_ELHasTerm
.374f					_ELStack:
.374f	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3751	20 27 15	jsr $1527		jsr	errorHandler
.3754					_ELIsConstant:
.3754	4a		lsr a				lsr 	a 							; get the value back
.3755	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3757	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.3759					_ELCheckNext:
.3759	c8		iny				iny 								; look at next
.375a	b1 28		lda ($28),y			lda 	(codePtr),y
.375c	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.375e	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.3760	b0 2f		bcs $3791			bcs 	_ELHasTerm 					; done getting the constant.
.3762	20 2a 38	jsr $382a			jsr 	ELShiftByteIn 				; shift byte into position.
.3765	4c 59 37	jmp $3759			jmp 	_ELCheckNext
.3768					_ELIsToken:
.3768	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.376a	f0 0f		beq $377b			beq 	_ELIsString
.376c	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.376e	d0 5f		bne $37cf			bne 	_ELCheckUnary
.3770	8a		txa				txa 								; put X into A
.3771	c8		iny				iny 								; skip over the float marker
.3772	a2 1a		ldx #$1a		ldx	#26
.3774	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3777	aa		tax				tax 								; restore X
.3778	4c 91 37	jmp $3791			jmp 	_ELHasTerm
.377b					_ELIsString:
.377b	98		tya				tya 								; address of string is codePtr+y+1
.377c	38		sec				sec
.377d	65 28		adc $28				adc 	codePtr
.377f	95 98		sta $98,x			sta 	esInt0,x
.3781	a5 29		lda $29				lda 	codePtr+1
.3783	69 00		adc #$00			adc 	#0
.3785	95 a0		sta $a0,x			sta 	esInt1,x
.3787	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3789	95 90		sta $90,x			sta 	esType,x
.378b	c8		iny				iny 								; skip over string.
.378c	98		tya				tya
.378d	38		sec				sec									; +1 for the length itself.
.378e	71 28		adc ($28),y			adc 	(codePtr),y
.3790	a8		tay				tay 								; and fall through to term loop code.
.3791					_ELHasTerm:
.3791	b1 28		lda ($28),y			lda 	(codePtr),y
.3793	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3795	90 04		bcc $379b			bcc 	_ELPopExit
.3797	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3799	90 02		bcc $379d			bcc 	_ELHasBinaryTerm
.379b					_ELPopExit:
.379b	68		pla				pla
.379c					_ELExit:
.379c	60		rts				rts
.379d					_ELHasBinaryTerm:
.379d	84 32		sty $32				sty 	tempShort 					; save position
.379f	a8		tay				tay 								; use token as an index and get the precedence.
.37a0	b9 d2 37	lda $37d2,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.37a3	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.37a5	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.37a7	68		pla				pla 								; restore current level.
.37a8	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.37aa	b0 f0		bcs $379c			bcs 	_ELExit
.37ac	48		pha				pha 								; save current level back on the stack.
.37ad	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.37af	48		pha				pha
.37b0	c8		iny				iny
.37b1	e8		inx				inx 								; calculate the RHS at the operator precedence.
.37b2	a5 32		lda $32				lda 	tempShort
.37b4	20 2d 37	jsr $372d			jsr 	EvaluateLevel
.37b7	ca		dex				dex
.37b8	68		pla				pla 								; get the operator back out.
.37b9					_ELExecuteA:
.37b9	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.37bb	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.37bc	aa		tax				tax
.37bd	bd ea 33	lda $33ea,x			lda 	Group0Vectors,x
.37c0	85 2a		sta $2a				sta 	temp0
.37c2	bd eb 33	lda $33eb,x			lda 	Group0Vectors+1,x
.37c5	85 2b		sta $2b				sta 	temp0+1
.37c7	a6 32		ldx $32				ldx 	tempShort
.37c9	20 16 38	jsr $3816			jsr 	_ELCallTemp0
.37cc	4c 91 37	jmp $3791			jmp 	_ELHasTerm 					; and loop back round.
.37cf					_ELCheckUnary:
.37cf	c8		iny				iny 								; skip over token.
.37d0	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.37d2	f0 19		beq $37ed			beq 	_ELMinus
.37d4	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.37d6	f0 2c		beq $3804			beq 	_ELIndirect
.37d8	c9 98		cmp #$98			cmp 	#TKW_QMARK
.37da	f0 28		beq $3804			beq 	_ELIndirect
.37dc	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.37de	f0 39		beq $3819			beq 	_ELExtension
.37e0	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.37e2	90 04		bcc $37e8			bcc 	_ELUSyntax
.37e4	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.37e6	90 d1		bcc $37b9			bcc 	_ELExecuteA 				; if so do that token.
.37e8					_ELUSyntax:
.37e8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.37ea	20 27 15	jsr $1527		jsr	errorHandler
.37ed					_ELMinus:
.37ed	20 7f 38	jsr $387f			jsr 	EvaluateNumericTerm 		; get a number to negate.
.37f0	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.37f2	f0 0a		beq $37fe			beq 	_ELMinusInteger
.37f4	8a		txa				txa
.37f5	a2 0e		ldx #$0e		ldx	#14
.37f7	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.37fa	aa		tax				tax
.37fb	4c 91 37	jmp $3791			jmp 	_ELHasTerm
.37fe					_ELMinusInteger:
.37fe	20 f1 3e	jsr $3ef1			jsr 	MInt32Negate 				; do int negate
.3801	4c 91 37	jmp $3791			jmp 	_ELHasTerm
.3804					_ELIndirect:
.3804	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.3805	20 88 38	jsr $3888			jsr 	EvaluateIntegerTerm 		; integer address
.3808	68		pla				pla
.3809	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.380b	f0 02		beq $380f			beq 	_ELHaveModifier
.380d	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.380f					_ELHaveModifier:
.380f	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.3811	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.3813	4c 91 37	jmp $3791			jmp 	_ELHasTerm
.3816					_ELCallTemp0:
.3816	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3819					_ELExtension:
.3819	8a		txa				txa 								; stack pos in A
.381a	20 74 18	jsr $1874		jsr	extensionHandler
.381d	aa		tax				tax 								; restore stack
.381e	4c 91 37	jmp $3791			jmp 	_ELHasTerm
.3821					UnaryParenthesis:
.3821	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.3823	20 2d 37	jsr $372d			jsr 	EvaluateLevel
.3826	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen 			; check for )
.3829	60		rts				rts
.382a					ELShiftByteIn:
.382a	48		pha				pha 								; save bits to shift in.
.382b	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.382d	48		pha				pha
.382e	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.3830	95 b0		sta $b0,x			sta 	esInt3,x
.3832	b5 a0		lda $a0,x			lda 	esInt1,x
.3834	95 a8		sta $a8,x			sta 	esInt2,x
.3836	b5 98		lda $98,x			lda 	esInt0,x
.3838	95 a0		sta $a0,x			sta 	esInt1,x
.383a	a9 00		lda #$00			lda 	#0
.383c	95 98		sta $98,x			sta 	esInt0,x
.383e	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.383f	29 03		and #$03			and 	#3 							; only want lower 2 bits
.3841	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3843					_ELShiftLoop:
.3843	4a		lsr a				lsr 	a
.3844	76 b0		ror $b0,x			ror 	esInt3,x
.3846	76 a8		ror $a8,x			ror 	esInt2,x
.3848	76 a0		ror $a0,x			ror 	esInt1,x
.384a	76 98		ror $98,x			ror 	esInt0,x
.384c	c9 01		cmp #$01			cmp 	#1
.384e	d0 f3		bne $3843			bne 	_ELShiftLoop
.3850	68		pla				pla 								; get original 6 bit value and OR in.
.3851	29 3f		and #$3f			and 	#$3F
.3853	15 98		ora $98,x			ora 	esInt0,x
.3855	95 98		sta $98,x			sta 	esInt0,x
.3857	60		rts				rts
.3858					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3858	01					.byte	$01			; $86 and
>3859	01					.byte	$01			; $87 or
>385a	01					.byte	$01			; $88 xor
>385b	02					.byte	$02			; $89 >=
>385c	02					.byte	$02			; $8a <=
>385d	02					.byte	$02			; $8b >
>385e	02					.byte	$02			; $8c <
>385f	02					.byte	$02			; $8d =
>3860	02					.byte	$02			; $8e <>
>3861	03					.byte	$03			; $8f +
>3862	03					.byte	$03			; $90 -
>3863	04					.byte	$04			; $91 >>
>3864	04					.byte	$04			; $92 <<
>3865	04					.byte	$04			; $93 *
>3866	04					.byte	$04			; $94 /
>3867	04					.byte	$04			; $95 mod
>3868	05					.byte	$05			; $96 ^
>3869	06					.byte	$06			; $97 !
>386a	06					.byte	$06			; $98 ?
>386b	82					.byte	$82			; $99 repeat
>386c	82					.byte	$82			; $9a while
>386d	82					.byte	$82			; $9b for
>386e	82					.byte	$82			; $9c if
>386f	82					.byte	$82			; $9d defproc
>3870	80					.byte	$80			; $9e until
>3871	80					.byte	$80			; $9f wend
>3872	80					.byte	$80			; $a0 next
>3873	80					.byte	$80			; $a1 then
>3874	80					.byte	$80			; $a2 endif
>3875	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3876					EvaluateTerm:
.3876	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.3878	20 2d 37	jsr $372d			jsr 	EvaluateLevel
.387b	20 de 36	jsr $36de			jsr 	DereferenceOne
.387e	60		rts				rts
.387f					EvaluateNumericTerm:
.387f	20 76 38	jsr $3876			jsr 	EvaluateTerm
.3882	b5 90		lda $90,x			lda 	esType,x
.3884	0a		asl a				asl 	a 							; see if it's a string.
.3885	30 09		bmi $3890			bmi 	ENTType
.3887	60		rts				rts
.3888					EvaluateIntegerTerm:
.3888	20 76 38	jsr $3876			jsr 	EvaluateTerm
.388b	b5 90		lda $90,x			lda 	esType,x
.388d	d0 01		bne $3890			bne 	ENTType
.388f	60		rts				rts
.3890					ENTType:
.3890	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3892	20 27 15	jsr $1527		jsr	errorHandler
.3895					EvaluateRoot:
.3895	a2 00		ldx #$00			ldx 	#0
.3897					Evaluate:
.3897	a9 00		lda #$00			lda 	#0
.3899	20 2d 37	jsr $372d			jsr 	EvaluateLevel
.389c	20 de 36	jsr $36de			jsr 	DereferenceOne
.389f	60		rts				rts
.38a0					EvaluateNumeric:
.38a0	20 97 38	jsr $3897			jsr 	Evaluate
.38a3	b5 90		lda $90,x			lda 	esType,x
.38a5	0a		asl a				asl 	a 							; see if it's a string.
.38a6	30 e8		bmi $3890			bmi 	ENTType
.38a8	4a		lsr a				lsr 	a 							; shift float flag into carry.
.38a9	4a		lsr a				lsr 	a
.38aa	60		rts				rts
.38ab					EvaluateString:
.38ab	20 97 38	jsr $3897			jsr 	Evaluate
.38ae	b5 90		lda $90,x			lda 	esType,x
.38b0	0a		asl a				asl 	a 							; see if it's a string.
.38b1	10 dd		bpl $3890			bpl 	ENTType
.38b3	60		rts				rts
.38b4					EvaluateRootInteger:
.38b4	a2 00		ldx #$00			ldx 	#0
.38b6					EvaluateInteger:
.38b6	20 97 38	jsr $3897			jsr 	Evaluate
.38b9	b5 90		lda $90,x			lda 	esType,x
.38bb	d0 d3		bne $3890			bne 	ENTType
.38bd	60		rts				rts
.38be					EvaluateSmallInteger:
.38be	20 b6 38	jsr $38b6			jsr 	EvaluateInteger
.38c1	b5 a0		lda $a0,x			lda 	esInt1,x
.38c3	15 a8		ora $a8,x			ora 	esInt2,x
.38c5	15 b0		ora $b0,x			ora 	esInt3,x
.38c7	d0 03		bne $38cc			bne 	_ESIValue
.38c9	b5 98		lda $98,x			lda 	esInt0,x
.38cb	60		rts				rts
.38cc					_ESIValue:
.38cc	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.38ce	20 27 15	jsr $1527		jsr	errorHandler
.38d1					LinkEvaluate:
.38d1	aa		tax				tax
.38d2	20 97 38	jsr $3897			jsr 	Evaluate
.38d5	8a		txa				txa
.38d6	60		rts				rts
.38d7					LinkEvaluateTerm:
.38d7	aa		tax				tax
.38d8	20 76 38	jsr $3876			jsr 	EvaluateTerm
.38db	8a		txa				txa
.38dc	60		rts				rts
.38dd					LinkEvaluateInteger:
.38dd	aa		tax				tax
.38de	20 b6 38	jsr $38b6			jsr 	EvaluateInteger
.38e1	8a		txa				txa
.38e2	60		rts				rts
.38e3					LinkEvaluateString:
.38e3	aa		tax				tax
.38e4	20 ab 38	jsr $38ab			jsr 	EvaluateString
.38e7	8a		txa				txa
.38e8	60		rts				rts
.38e9					LinkEvaluateSmallInt:
.38e9	aa		tax				tax
.38ea	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger
.38ed	8a		txa				txa
.38ee	60		rts				rts
.38ef					EvaluateReference:
.38ef	ad 69 38	lda $3869			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.38f2	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.38f3	e9 01		sbc #$01			sbc 	#1
.38f5	20 2d 37	jsr $372d			jsr 	EvaluateLevel
.38f8	b5 90		lda $90,x			lda 	esType,x
.38fa	10 01		bpl $38fd			bpl 	_ERFail
.38fc	60		rts				rts
.38fd					_ERFail:
.38fd	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.38ff	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.3902					Event_Str:
.3902	20 a0 38	jsr $38a0			jsr 	EvaluateNumeric 			; get a number.
.3905	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.3907	d0 13		bne $391c			bne 	_ESFloat
.3909	20 5c 39	jsr $395c			jsr 	ConvertGetBase 				; get base, or default.
.390c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.390e	85 2a		sta $2a				sta 	temp0
.3910	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3912	85 2b		sta $2b				sta 	1+(temp0)
.3914	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3916	20 8f 3e	jsr $3e8f			jsr 	MInt32ToString 				; convert to string.
.3919	4c 29 39	jmp $3929			jmp 	_ESCloneExit 				; clone and exit.
.391c					_ESFloat:
.391c	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen 			; check closing )
.391f	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3922	8a		txa				txa
.3923	a2 16		ldx #$16		ldx	#22
.3925	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3928	aa		tax				tax
.3929					_ESCloneExit:
.3929	8a		txa				txa
.392a	a2 04		ldx #$04		ldx	#4
.392c	20 ce 42	jsr $42ce		jsr	stringHandler
.392f	aa		tax				tax
.3930	60		rts				rts
.3931					UnaryVal:
.3931	38		sec				sec 								; Carry set to return value
.3932	b0 01		bcs $3935			bcs 	ValueMain
.3934					UnaryIsVal:
.3934	18		clc				clc									; Carry clear to return legitimacy
.3935					ValueMain:
.3935	08		php				php 								; save results (CS is value, CC is validation)
.3936	20 ab 38	jsr $38ab			jsr 	EvaluateString
.3939	20 5c 39	jsr $395c			jsr 	ConvertGetBase 				; get base, if any.
.393c	5a		phy				phy
.393d	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3940	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3942	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3944	20 aa 3d	jsr $3daa			jsr 	MInt32FromString 			; convert it back from a string.
.3947	b0 0b		bcs $3954			bcs 	_VMSuccess 					; successfully converted.
.3949	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.394b	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.394d	f0 00		beq $394f			beq 	_VMFailed 	 				; so we failed.
.394f					_VMFailed:
.394f	7a		ply				ply
.3950	28		plp				plp
.3951	4c 37 3f	jmp $3f37			jmp 	MInt32False 				; return 0 whatever.
.3954					_VMSuccess:
.3954	7a		ply				ply
.3955	28		plp				plp 								; if CS the it was val() so we want the value.
.3956	b0 03		bcs $395b			bcs 	_VMExit
.3958	4c 33 3f	jmp $3f33			jmp 	MInt32True 					; otherwise return true as successful.
.395b					_VMExit:
.395b	60		rts				rts
.395c					ConvertGetBase:
.395c	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.395e	95 99		sta $99,x			sta 	esInt0+1,x
.3960	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3962	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3964	d0 0e		bne $3974			bne 	_CGBDone 					; not found, should be )
.3966	e8		inx				inx 								; next level
.3967	c8		iny				iny 								; skip comma.
.3968	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger		; evaluate the base.
.396b	ca		dex				dex
.396c	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.396e	90 08		bcc $3978			bcc 	_CGBValue 					; (it should work as high as 37)
.3970	c9 11		cmp #$11			cmp 	#17
.3972	b0 04		bcs $3978			bcs 	_CGBValue
.3974					_CGBDone:
.3974	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen
.3977	60		rts				rts
.3978					_CGBValue:
.3978	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.397a	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.397d					EventFunction:
.397d	20 ef 38	jsr $38ef			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3980	b5 90		lda $90,x			lda 	esType,x
.3982	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3984	d0 56		bne $39dc			bne 	_EFType
.3986	20 b5 3f	jsr $3fb5			jsr 	CheckComma
.3989	e8		inx				inx
.398a	20 b6 38	jsr $38b6			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.398d	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen 			; finish off with the right bracket
.3990	ca		dex				dex
.3991	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3993	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3995	15 a8		ora $a8,x			ora 	esInt2,x
.3997	15 b0		ora $b0,x			ora 	esInt3,x
.3999	d0 3c		bne $39d7			bne 	_EFValue
.399b	5a		phy				phy
.399c	da		phx				phx
.399d	a2 1c		ldx #$1c		ldx	#28
.399f	20 05 15	jsr $1505		jsr	deviceHandler
.39a2	84 2d		sty $2d				sty 	temp1+1
.39a4	85 2c		sta $2c				sta 	temp1
.39a6	fa		plx				plx
.39a7	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.39aa	a0 03		ldy #$03			ldy 	#3							; if -ve
.39ac	b1 2a		lda ($2a),y			lda 	(temp0),y
.39ae	30 22		bmi $39d2			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.39b0	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.39b2	b1 2a		lda ($2a),y			lda 	(temp0),y
.39b4	c8		iny				iny
.39b5	11 2a		ora ($2a),y			ora 	(temp0),y
.39b7	f0 16		beq $39cf			beq 	_EFInitialise 				; if so, initialise the value but return false.
.39b9	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.39bb	38		sec				sec
.39bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.39be	e5 2c		sbc $2c				sbc 	temp1
.39c0	c8		iny				iny
.39c1	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c3	e5 2d		sbc $2d				sbc 	temp1+1
.39c5	10 0b		bpl $39d2			bpl 	_EFFail 					; if trigger >= timer then return False
.39c7	20 e1 39	jsr $39e1			jsr 	SetEventTimer 				; reset the timer for next time.
.39ca	20 33 3f	jsr $3f33			jsr	 	MInt32True 					; and treutn true as fired.
.39cd	7a		ply				ply
.39ce	60		rts				rts
.39cf					_EFInitialise:
.39cf	20 e1 39	jsr $39e1			jsr		SetEventTimer 				; set trigger time to time + elapsed
.39d2					_EFFail:
.39d2	7a		ply				ply
.39d3	20 37 3f	jsr $3f37			jsr 	MInt32False
.39d6	60		rts				rts
.39d7					_EFValue:
.39d7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.39d9	20 27 15	jsr $1527		jsr	errorHandler
.39dc					_EFType:
.39dc	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.39de	20 27 15	jsr $1527		jsr	errorHandler
.39e1					SetEventTimer:
.39e1	a0 00		ldy #$00			ldy 	#0
.39e3	18		clc				clc
.39e4	a5 2c		lda $2c				lda 	temp1
.39e6	75 99		adc $99,x			adc 	esInt0+1,x
.39e8	91 2a		sta ($2a),y			sta		(temp0),y
.39ea	c8		iny				iny
.39eb	a5 2d		lda $2d				lda 	temp1+1
.39ed	75 a1		adc $a1,x			adc 	esInt1+1,x
.39ef	91 2a		sta ($2a),y			sta		(temp0),y
.39f1	88		dey				dey
.39f2	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.39f4	d0 04		bne $39fa			bne 	_SETExit 					; zero means initialise.....
.39f6	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.39f8	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.39fa					_SETExit:
.39fa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.39fb					UnaryLen:
.39fb	20 09 3a	jsr $3a09			jsr 	ULStart
.39fe					ULFinish:
.39fe	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3a00	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3a02	20 46 3f	jsr $3f46			jsr 	MInt32Set8Bit 				; write it out.
.3a05	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen
.3a08	60		rts				rts
.3a09	20 ab 38	jsr $38ab	ULStart:jsr 	EvaluateString
.3a0c	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3a0e	85 2a		sta $2a				sta 	temp0
.3a10	b5 a0		lda $a0,x			lda 	esInt1,x
.3a12	85 2b		sta $2b				sta 	temp0+1
.3a14	84 32		sty $32				sty 	tempShort 					; get length
.3a16	a0 00		ldy #$00			ldy 	#0
.3a18	60		rts				rts
.3a19					UnaryAsc:
.3a19	20 09 3a	jsr $3a09			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3a1c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3a1e	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3a1f	c9 00		cmp #$00			cmp 	#0
.3a21	d0 db		bne $39fe			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3a23	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3a25	20 27 15	jsr $1527		jsr	errorHandler
.3a28					UnaryAbs:
.3a28	20 a0 38	jsr $38a0			jsr 	EvaluateNumeric 			; some numeric value
.3a2b	b0 07		bcs $3a34			bcs 	_UAFloat 					; CS then float, so use that function
.3a2d	20 ec 3e	jsr $3eec			jsr 	MInt32Absolute 				; int version
.3a30	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen
.3a33	60		rts				rts
.3a34					_UAFloat:
.3a34	8a		txa				txa 								; float version
.3a35	a2 02		ldx #$02		ldx	#2
.3a37	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3a3a	aa		tax				tax
.3a3b	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen
.3a3e	60		rts				rts
.3a3f					UnarySgn:
.3a3f	20 a0 38	jsr $38a0			jsr 	EvaluateNumeric 			; same as above but sign of value
.3a42	b0 07		bcs $3a4b			bcs 	_USFloat
.3a44	20 24 3f	jsr $3f24			jsr 	MInt32Sign
.3a47	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen
.3a4a	60		rts				rts
.3a4b					_USFloat:
.3a4b	8a		txa				txa
.3a4c	a2 10		ldx #$10		ldx	#16
.3a4e	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3a51	aa		tax				tax
.3a52	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen
.3a55	60		rts				rts
.3a56					UnaryPeek:
.3a56	20 82 3a	jsr $3a82			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3a59	4c 76 3a	jmp $3a76			jmp 	PDLByte0
.3a5c					UnaryDeek:
.3a5c	20 82 3a	jsr $3a82			jsr 	PDLCode
.3a5f	4c 70 3a	jmp $3a70			jmp 	PDLByte1
.3a62					UnaryLeek:
.3a62	20 82 3a	jsr $3a82			jsr 	PDLCode
.3a65	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3a67	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a69	95 b0		sta $b0,x			sta 	esInt3,x
.3a6b	88		dey				dey
.3a6c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a6e	95 a8		sta $a8,x			sta 	esInt2,x
.3a70					PDLByte1:
.3a70	a0 01		ldy #$01			ldy 	#1
.3a72	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a74	95 a0		sta $a0,x			sta 	esInt1,x
.3a76					PDLByte0:
.3a76	a0 00		ldy #$00			ldy 	#0
.3a78	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a7a	95 98		sta $98,x			sta 	esInt0,x
.3a7c	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3a7e	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen 			; check right and return
.3a81	60		rts				rts
.3a82					PDLCode:
.3a82	20 b6 38	jsr $38b6			jsr 	EvaluateInteger 			; some address
.3a85	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3a87	85 2a		sta $2a				sta 	temp0
.3a89	b5 a0		lda $a0,x			lda 	esInt1,x
.3a8b	85 2b		sta $2b				sta 	temp0+1
.3a8d	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3a8f	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3a91	95 a8		sta $a8,x			sta 	esInt2,x
.3a93	95 b0		sta $b0,x			sta 	esInt3,x
.3a95	84 32		sty $32				sty 	tempShort 					; save Y
.3a97	60		rts				rts
.3a98					Unary_Random:
.3a98	20 67 3f	jsr $3f67			jsr 	MInt32Random 				; generate random number.
.3a9b	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3a9d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3a9f	f0 08		beq $3aa9			beq 	_URExit
.3aa1	e8		inx				inx 								; load range 0..r-1 into +1
.3aa2	20 b6 38	jsr $38b6			jsr 	EvaluateInteger
.3aa5	ca		dex				dex
.3aa6	20 8f 3d	jsr $3d8f			jsr 	MInt32Modulus 				; calculate random % modulus
.3aa9					_URExit:
.3aa9	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen 			; check right and return
.3aac	60		rts				rts
.3aad					Unary_Min:
.3aad	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3aaf	d0 02		bne $3ab3			bne 	UnaryMBody
.3ab1					Unary_Max:
.3ab1	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3ab3					UnaryMBody:
.3ab3	48		pha				pha 								; save comparator on stack, shows min or max
.3ab4	20 97 38	jsr $3897			jsr 	Evaluate 					; get the first thing to check
.3ab7					_UnaryMLoop:
.3ab7	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3ab9	c8		iny				iny
.3aba	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3abc	f0 09		beq $3ac7			beq 	_UnaryMExit
.3abe	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3ac0	f0 07		beq $3ac9			beq 	_UnaryMCompare
.3ac2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3ac4	20 27 15	jsr $1527		jsr	errorHandler
.3ac7					_UnaryMExit:
.3ac7	68		pla				pla 								; done so throw comparator and return.
.3ac8	60		rts				rts
.3ac9					_UnaryMCompare:
.3ac9	e8		inx				inx 								; get the 2nd thing to evaluate
.3aca	20 97 38	jsr $3897			jsr 	Evaluate
.3acd	ca		dex				dex
.3ace	20 5f 36	jsr $365f			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3ad1	85 32		sta $32				sta 	tempShort 					; save result
.3ad3	68		pla				pla 								; get what we need
.3ad4	48		pha				pha
.3ad5	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3ad7	d0 de		bne $3ab7			bne 	_UnaryMLoop 				; no, try another value.
.3ad9	20 37 3f	jsr $3f37			jsr 	MInt32False 				; promote 2nd to 1st.
.3adc	20 1d 3e	jsr $3e1d			jsr 	MInt32Add
.3adf	4c b7 3a	jmp $3ab7			jmp 	_UnaryMLoop
.3ae2					Unary_Page:
.3ae2	20 37 3f	jsr $3f37			jsr 	MInt32False 				; zero
.3ae5	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3ae8	95 98		sta $98,x			sta 	esInt0,x
.3aea	ad c9 0a	lda $0ac9			lda 	basePage+1
.3aed	95 a0		sta $a0,x			sta 	esInt1,x
.3aef	60		rts				rts
.3af0					UnaryReference:
.3af0	a9 0f		lda #$0f			lda 	#15
.3af2	20 2d 37	jsr $372d			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3af5	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.3af7	10 05		bpl $3afe			bpl 	UType
.3af9	a9 00		lda #$00			lda 	#0 							; make it an integer
.3afb	95 90		sta $90,x			sta 	esType,x
.3afd	60		rts				rts
.3afe					UType:
.3afe	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3b00	20 27 15	jsr $1527		jsr	errorHandler
.3b03					UnaryHexMarker:
.3b03	4c 88 38	jmp $3888			jmp 	EvaluateIntegerTerm
.3b06					UnaryComplement:
.3b06	20 88 38	jsr $3888			jsr 	EvaluateIntegerTerm
.3b09	20 0b 3f	jsr $3f0b			jsr 	MInt32Not
.3b0c	60		rts				rts
.3b0d					UnaryIntToFloat:
.3b0d	20 a0 38	jsr $38a0			jsr 	EvaluateNumeric				; some number
.3b10	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3b12	d0 0b		bne $3b1f			bne 	_UIFExit
.3b14	8a		txa				txa 								; convert and set type
.3b15	a2 1c		ldx #$1c		ldx	#28
.3b17	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3b1a	aa		tax				tax
.3b1b	a9 01		lda #$01			lda 	#1
.3b1d	95 90		sta $90,x			sta 	esType,x
.3b1f					_UIFExit:
.3b1f	60		rts				rts
.3b20					UnaryFloatToInt:
.3b20	20 a0 38	jsr $38a0			jsr 	EvaluateNumeric 			; the number
.3b23	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3b25	f0 0b		beq $3b32			beq 	_UFIExit
.3b27	8a		txa				txa 								; convert to int
.3b28	a2 14		ldx #$14		ldx	#20
.3b2a	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.3b2d	aa		tax				tax
.3b2e	a9 00		lda #$00			lda 	#0 							; set type
.3b30	95 90		sta $90,x			sta 	esType,x
.3b32					_UFIExit:
.3b32	60		rts				rts
.3b33					UnaryAlloc:
.3b33	e8		inx				inx 								; evaluate memory required
.3b34	20 b6 38	jsr $38b6			jsr 	EvaluateInteger
.3b37	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen
.3b3a	ca		dex				dex
.3b3b	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3b3d	15 b1		ora $b1,x			ora 	esInt3+1,x
.3b3f	d0 1d		bne $3b5e			bne 	_UABadValue
.3b41	20 37 3f	jsr $3f37			jsr 	MInt32False					; zero return.
.3b44	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3b46	95 a0		sta $a0,x			sta 	esInt1,x
.3b48	a5 35		lda $35				lda 	lowMemory
.3b4a	95 98		sta $98,x			sta 	esInt0,x
.3b4c	18		clc				clc 								; add alloc required.
.3b4d	75 99		adc $99,x			adc 	esInt0+1,x
.3b4f	85 35		sta $35				sta 	lowMemory
.3b51	a5 36		lda $36				lda 	lowMemory+1
.3b53	75 a1		adc $a1,x			adc 	esInt1+1,x
.3b55	85 36		sta $36				sta 	lowMemory+1
.3b57	b0 05		bcs $3b5e			bcs		_UABadValue 				; overflow definitely bad.
.3b59	c5 34		cmp $34				cmp 	highMemory+1
.3b5b	b0 01		bcs $3b5e			bcs 	_UABadValue 				; out of memory bad.
.3b5d	60		rts				rts
.3b5e					_UABadValue:
.3b5e	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3b60	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3b63					UnaryTimer:
.3b63	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen 			; no parameters
.3b66	5a		phy				phy
.3b67	20 5e 3f	jsr $3f5e			jsr 	MInt32Zero 					; zero result
.3b6a	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3b6c	a2 1c		ldx #$1c		ldx	#28
.3b6e	20 05 15	jsr $1505		jsr	deviceHandler
.3b71	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3b73	95 98		sta $98,x			sta 	esInt0,x
.3b75	98		tya				tya
.3b76	95 a0		sta $a0,x			sta 	esInt1,x
.3b78	7a		ply				ply
.3b79	60		rts				rts
.3b7a					UnaryInkey:
.3b7a	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen
.3b7d	86 2a		stx $2a				stx 	temp0
.3b7f	a2 08		ldx #$08		ldx	#8
.3b81	20 05 15	jsr $1505		jsr	deviceHandler
.3b84	a6 2a		ldx $2a				ldx 	temp0
.3b86	20 46 3f	jsr $3f46			jsr 	MInt32Set8Bit
.3b89	60		rts				rts
.3b8a					UnaryGet:
.3b8a	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen
.3b8d	da		phx				phx
.3b8e					_UGLoop:
.3b8e	a2 18		ldx #$18		ldx	#24
.3b90	20 05 15	jsr $1505		jsr	deviceHandler
.3b93	a2 08		ldx #$08		ldx	#8
.3b95	20 05 15	jsr $1505		jsr	deviceHandler
.3b98	c9 00		cmp #$00			cmp 	#0
.3b9a	f0 f2		beq $3b8e			beq 	_UGLoop
.3b9c	85 32		sta $32				sta 	tempShort
.3b9e	fa		plx				plx
.3b9f	a5 32		lda $32				lda 	tempShort
.3ba1	20 46 3f	jsr $3f46			jsr 	MInt32Set8Bit
.3ba4	60		rts				rts
.3ba5					UnaryGetString:
.3ba5	20 8a 3b	jsr $3b8a			jsr 	UnaryGet
.3ba8					UGSDoChr:
.3ba8	4c f5 3b	jmp $3bf5			jmp 	ChrCode
.3bab					UnaryInkeyString:
.3bab	20 7a 3b	jsr $3b7a			jsr 	UnaryInkey
.3bae	b5 98		lda $98,x			lda 	esInt0,x
.3bb0	d0 f6		bne $3ba8			bne 	UGSDoChr
.3bb2	8a		txa				txa
.3bb3	a2 08		ldx #$08		ldx	#8
.3bb5	20 ce 42	jsr $42ce		jsr	stringHandler
.3bb8	aa		tax				tax
.3bb9	60		rts				rts
.3bba					UnarySys:
.3bba	20 b6 38	jsr $38b6			jsr 	EvaluateInteger 				; get the address
.3bbd	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen
.3bc0	20 ba 2c	jsr $2cba			jsr 	TOSToTemp0 						; copy call address to temp0
.3bc3	da		phx				phx
.3bc4	5a		phy				phy
.3bc5	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3bc8	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3bcb	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3bce	20 db 3b	jsr $3bdb			jsr 	_CallTemp0
.3bd1	85 32		sta $32				sta 	tempShort 						; restore YX
.3bd3	7a		ply				ply
.3bd4	fa		plx				plx
.3bd5	a5 32		lda $32				lda 	tempShort
.3bd7	20 46 3f	jsr $3f46			jsr 	MInt32Set8Bit 					; return result.
.3bda	60		rts				rts
.3bdb					_CallTemp0:
.3bdb	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3bde					UnaryMem:
.3bde	20 37 3f	jsr $3f37			jsr 	MInt32False 					; set to false (e.g. 0)
.3be1	38		sec				sec
.3be2	a5 33		lda $33				lda 	highMemory 						; calculate value
.3be4	e5 35		sbc $35				sbc 	lowMemory
.3be6	95 98		sta $98,x			sta 	esInt0,x
.3be8	a5 34		lda $34				lda 	highMemory+1
.3bea	e5 36		sbc $36				sbc 	lowMemory+1
.3bec	95 a0		sta $a0,x			sta 	esInt1,x
.3bee	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3bef					ExecChr:
.3bef	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger		; character number 0-255
.3bf2	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen				; right bracket
.3bf5					ChrCode:
.3bf5	5a		phy				phy
.3bf6	8a		txa				txa 								; A = stack
.3bf7	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3bf9	a2 02		ldx #$02		ldx	#2
.3bfb	20 ce 42	jsr $42ce		jsr	stringHandler
.3bfe	aa		tax				tax 								; X = stack
.3bff	7a		ply				ply
.3c00	60		rts				rts
.3c01					ExecLower:
.3c01	38		sec				sec 								; set carry is lower
.3c02	b0 01		bcs $3c05			bcs 	ExecUpperLower
.3c04					ExecUpper:
.3c04	18		clc				clc 								; clear carry is upper
.3c05					ExecUpperLower:
.3c05	08		php				php 								; save carry
.3c06	20 ab 38	jsr $38ab			jsr 	EvaluateString 				; string to stack,X
.3c09	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen 			; check closing right bracket.
.3c0c	28		plp				plp 								; restore carry, save Y
.3c0d	5a		phy				phy
.3c0e	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3c10	2a		rol a				rol 	a
.3c11	a8		tay				tay 								; now in Y
.3c12	8a		txa				txa 								; do the substring and exit.
.3c13	a2 0c		ldx #$0c		ldx	#12
.3c15	20 ce 42	jsr $42ce		jsr	stringHandler
.3c18	aa		tax				tax
.3c19	7a		ply				ply
.3c1a	60		rts				rts
.3c1b					ExecLeft:
.3c1b	20 ab 38	jsr $38ab			jsr 	EvaluateString 				; string to stack,X
.3c1e	20 b5 3f	jsr $3fb5			jsr 	CheckComma
.3c21	e8		inx				inx
.3c22	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3c24	20 46 3f	jsr $3f46			jsr 	MInt32Set8Bit
.3c27	e8		inx				inx
.3c28	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3c2b					ExecSubstring:
.3c2b	ca		dex				dex 								; fix up X
.3c2c	ca		dex				dex
.3c2d	20 a8 3f	jsr $3fa8			jsr 	CheckRightParen 			; check closing right bracket.
.3c30	8a		txa				txa 								; do the substring and exit.
.3c31	a2 0e		ldx #$0e		ldx	#14
.3c33	20 ce 42	jsr $42ce		jsr	stringHandler
.3c36	aa		tax				tax
.3c37	60		rts				rts
.3c38					ExecMid:
.3c38	20 ab 38	jsr $38ab			jsr 	EvaluateString 				; string to stack,X
.3c3b	20 b5 3f	jsr $3fb5			jsr 	CheckComma
.3c3e	e8		inx				inx
.3c3f	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3c42	c9 00		cmp #$00			cmp 	#0
.3c44	f0 15		beq $3c5b			beq 	_EMValue
.3c46	e8		inx				inx
.3c47	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3c49	20 46 3f	jsr $3f46			jsr 	MInt32Set8Bit
.3c4c	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3c4e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3c50	f0 d9		beq $3c2b			beq 	ExecSubString
.3c52	20 b5 3f	jsr $3fb5			jsr 	CheckComma
.3c55	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3c58	4c 2b 3c	jmp $3c2b			jmp 	ExecSubString
.3c5b					_EMValue:
.3c5b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3c5d	20 27 15	jsr $1527		jsr	errorHandler
.3c60					ExecRight:
.3c60	20 ab 38	jsr $38ab			jsr 	EvaluateString 				; string to stack,X
.3c63	20 b5 3f	jsr $3fb5			jsr 	CheckComma
.3c66	e8		inx				inx
.3c67	20 be 38	jsr $38be			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3c6a	ca		dex				dex
.3c6b	5a		phy				phy
.3c6c	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3c6e	85 2a		sta $2a				sta 	temp0
.3c70	b5 a0		lda $a0,x			lda 	esInt1,x
.3c72	85 2b		sta $2b				sta 	temp0+1
.3c74	a0 00		ldy #$00			ldy 	#0 							; point to length
.3c76	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3c78	18		clc				clc 								; add 1.
.3c79	69 01		adc #$01			adc 	#1
.3c7b	38		sec				sec
.3c7c	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3c7e	f0 02		beq $3c82			beq		_ERMake1 					; if zero, make it 1.
.3c80	b0 02		bcs $3c84			bcs		_EROkay
.3c82					_ERMake1:
.3c82	a9 01		lda #$01			lda 	#1 							; start position.
.3c84					_EROkay:
.3c84	e8		inx				inx 								; set start pos.
.3c85	95 98		sta $98,x			sta 	esInt0,x
.3c87	e8		inx				inx
.3c88	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3c8a	20 46 3f	jsr $3f46			jsr 	MInt32Set8Bit
.3c8d	7a		ply				ply
.3c8e	4c 2b 3c	jmp $3c2b			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3c91					MInt32And:
.3c91	b5 98		lda $98,x			lda 	esInt0,x
.3c93	35 99		and $99,x			and 	esInt0+1,x
.3c95	95 98		sta $98,x			sta 	esInt0,x
.3c97	b5 a0		lda $a0,x			lda 	esInt1,x
.3c99	35 a1		and $a1,x			and 	esInt1+1,x
.3c9b	95 a0		sta $a0,x			sta 	esInt1,x
.3c9d	b5 a8		lda $a8,x			lda 	esInt2,x
.3c9f	35 a9		and $a9,x			and 	esInt2+1,x
.3ca1	95 a8		sta $a8,x			sta 	esInt2,x
.3ca3	b5 b0		lda $b0,x			lda 	esInt3,x
.3ca5	35 b1		and $b1,x			and 	esInt3+1,x
.3ca7	95 b0		sta $b0,x			sta 	esInt3,x
.3ca9	60		rts				rts
.3caa					MInt32Or:
.3caa	b5 98		lda $98,x			lda 	esInt0,x
.3cac	15 99		ora $99,x			ora 	esInt0+1,x
.3cae	95 98		sta $98,x			sta 	esInt0,x
.3cb0	b5 a0		lda $a0,x			lda 	esInt1,x
.3cb2	15 a1		ora $a1,x			ora 	esInt1+1,x
.3cb4	95 a0		sta $a0,x			sta 	esInt1,x
.3cb6	b5 a8		lda $a8,x			lda 	esInt2,x
.3cb8	15 a9		ora $a9,x			ora 	esInt2+1,x
.3cba	95 a8		sta $a8,x			sta 	esInt2,x
.3cbc	b5 b0		lda $b0,x			lda 	esInt3,x
.3cbe	15 b1		ora $b1,x			ora 	esInt3+1,x
.3cc0	95 b0		sta $b0,x			sta 	esInt3,x
.3cc2	60		rts				rts
.3cc3					MInt32Xor:
.3cc3	b5 98		lda $98,x			lda 	esInt0,x
.3cc5	55 99		eor $99,x			eor 	esInt0+1,x
.3cc7	95 98		sta $98,x			sta 	esInt0,x
.3cc9	b5 a0		lda $a0,x			lda 	esInt1,x
.3ccb	55 a1		eor $a1,x			eor 	esInt1+1,x
.3ccd	95 a0		sta $a0,x			sta 	esInt1,x
.3ccf	b5 a8		lda $a8,x			lda 	esInt2,x
.3cd1	55 a9		eor $a9,x			eor 	esInt2+1,x
.3cd3	95 a8		sta $a8,x			sta 	esInt2,x
.3cd5	b5 b0		lda $b0,x			lda 	esInt3,x
.3cd7	55 b1		eor $b1,x			eor 	esInt3+1,x
.3cd9	95 b0		sta $b0,x			sta 	esInt3,x
.3cdb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3cdc					MInt32Compare:
.3cdc	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3cde	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3ce0	d0 13		bne $3cf5			bne 	MInt32Compare2
.3ce2	b5 a0		lda $a0,x			lda 	esInt1,x
.3ce4	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3ce6	d0 0d		bne $3cf5			bne 	MInt32Compare2
.3ce8	b5 a8		lda $a8,x			lda 	esInt2,x
.3cea	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3cec	d0 07		bne $3cf5			bne 	MInt32Compare2
.3cee	b5 b0		lda $b0,x			lda 	esInt3,x
.3cf0	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3cf2	d0 01		bne $3cf5			bne 	MInt32Compare2
.3cf4	60		rts				rts
.3cf5					MInt32Compare2:
.3cf5	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3cf7	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3cf9	b5 a0		lda $a0,x			lda		esInt1,x
.3cfb	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3cfd	b5 a8		lda $a8,x			lda		esInt2,x
.3cff	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d01	b5 b0		lda $b0,x			lda		esInt3,x
.3d03	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d05	50 02		bvc $3d09			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3d07	49 80		eor #$80			eor 	#$80
.3d09					_I32LNoOverflow
.3d09	30 03		bmi $3d0e			bmi 	MInt32CLess					; if -ve then return $FF
.3d0b	a9 01		lda #$01			lda 	#$01						; else return $01
.3d0d	60		rts				rts
.3d0e					MInt32CLess:
.3d0e	a9 ff		lda #$ff			lda 	#$FF
.3d10	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3d11					MInt32SDivide:
.3d11	98		tya				tya  								; save Y, which is the count of negations
.3d12	48		pha				pha
.3d13	a0 00		ldy #$00			ldy 	#0 							; zero count
.3d15	20 2d 3d	jsr $3d2d			jsr 	_MInt32SRemSign 			; unsign TOS
.3d18	e8		inx				inx 								; unsign TOS+1
.3d19	20 2d 3d	jsr $3d2d			jsr 	_MInt32SRemSign
.3d1c	ca		dex				dex
.3d1d	98		tya				tya 								; save sign count on stack
.3d1e	48		pha				pha
.3d1f	20 36 3d	jsr $3d36			jsr 	MInt32UDivide 				; unsigned division
.3d22	68		pla				pla 								; get sign count back
.3d23	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3d25	f0 03		beq $3d2a			beq 	_I32SNoNeg
.3d27	20 f1 3e	jsr $3ef1			jsr 	MInt32Negate
.3d2a					_I32SNoNeg:
.3d2a	68		pla				pla 								; restoe Y and exit
.3d2b	a8		tay				tay
.3d2c	60		rts				rts
.3d2d					_MInt32SRemSign:
.3d2d	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3d2f	10 04		bpl $3d35			bpl 	_MInt32SRSExit
.3d31	c8		iny				iny 								; increment the sign count
.3d32	20 f1 3e	jsr $3ef1			jsr 	MInt32Negate 				; negate the value.
.3d35					_MInt32SRSExit:
.3d35	60		rts				rts
.3d36					MInt32UDivide:
.3d36	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3d38	15 a1		ora $a1,x			ora 	esInt1+1,x
.3d3a	15 a2		ora $a2,x			ora 	esInt1+2,x
.3d3c	15 a3		ora $a3,x			ora 	esInt1+3,x
.3d3e	f0 4a		beq $3d8a			beq 	_MInt32DZero
.3d40	e8		inx				inx 								; clear A
.3d41	e8		inx				inx
.3d42	20 37 3f	jsr $3f37			jsr 	MInt32False
.3d45	ca		dex				dex
.3d46	ca		dex				dex
.3d47	98		tya				tya 								; save Y on the stack
.3d48	48		pha				pha
.3d49	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3d4b					_MInt32UDLoop:
.3d4b	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3d4d	36 a0		rol $a0,x			rol 	esInt1,x
.3d4f	36 a8		rol $a8,x			rol 	esInt2,x
.3d51	36 b0		rol $b0,x			rol 	esInt3,x
.3d53	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3d55	36 a2		rol $a2,x			rol 	esInt1+2,x
.3d57	36 aa		rol $aa,x			rol 	esInt2+2,x
.3d59	36 b2		rol $b2,x			rol 	esInt3+2,x
.3d5b	38		sec				sec 								; calculate A-M saving result on the stack
.3d5c	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3d5e	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3d60	48		pha				pha
.3d61	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3d63	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3d65	48		pha				pha
.3d66	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3d68	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d6a	48		pha				pha
.3d6b	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3d6d	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d6f	90 10		bcc $3d81			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3d71	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3d73	68		pla				pla
.3d74	95 aa		sta $aa,x			sta 	esInt2+2,x
.3d76	68		pla				pla
.3d77	95 a2		sta $a2,x			sta 	esInt1+2,x
.3d79	68		pla				pla
.3d7a	95 9a		sta $9a,x			sta 	esInt0+2,x
.3d7c	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3d7e	4c 84 3d	jmp $3d84			jmp 	_MInt32Next 					; do the next iteration
.3d81					_MInt32NoSubtract:
.3d81	68		pla				pla
.3d82	68		pla				pla
.3d83	68		pla				pla
.3d84					_MInt32Next:
.3d84	88		dey				dey 								; do this 32 times.
.3d85	d0 c4		bne $3d4b			bne 	_MInt32UDLoop
.3d87	68		pla				pla 								; restore Y and exit
.3d88	a8		tay				tay
.3d89	60		rts				rts
.3d8a					_MInt32DZero:
.3d8a	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3d8c	20 27 15	jsr $1527		jsr	errorHandler
.3d8f					MInt32Modulus:
.3d8f	20 36 3d	jsr $3d36			jsr 	MInt32UDivide 				; do the division.
.3d92	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3d94	95 b0		sta $b0,x			sta 	esInt3,x
.3d96	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3d98	95 a8		sta $a8,x			sta 	esInt2,x
.3d9a	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3d9c	95 a0		sta $a0,x			sta 	esInt1,x
.3d9e	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3da0	95 98		sta $98,x			sta 	esInt0,x
.3da2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0dca					fs32Length:
>0dca							.fill 	1
.3da3					LinkInt32FromString:
.3da3	aa		tax				tax
.3da4	98		tya				tya
.3da5	20 aa 3d	jsr $3daa			jsr 	MInt32FromString
.3da8	8a		txa				txa
.3da9	60		rts				rts
.3daa					MInt32FromString:
.3daa	85 32		sta $32				sta 	tempShort 					; save base
.3dac	5a		phy				phy
.3dad	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3daf	b1 2a		lda ($2a),y			lda 	(temp0),y
.3db1	8d ca 0d	sta $0dca			sta 	fs32Length
.3db4	f0 64		beq $3e1a			beq 	_I32FSFail2					; fail if length zero.
.3db6	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3db8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3dba	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3dbc	d0 09		bne $3dc7			bne 	_I32FSNotNegative
.3dbe	ad ca 0d	lda $0dca			lda 	fs32Length 					; get length back.
.3dc1	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3dc3	f0 55		beq $3e1a			beq 	_I32FSFail2
.3dc5	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3dc7					_I32FSNotNegative:
.3dc7	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3dc9	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3dcb	d0 02		bne $3dcf			bne 	_I32FSNN2
.3dcd	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3dcf					_I32FSNN2:
.3dcf	48		pha				pha 								; save base + final sign on stack.
.3dd0	20 37 3f	jsr $3f37			jsr 	MInt32False 				; zero the return value.
.3dd3					_I32FSMainLoop:
.3dd3	68		pla				pla 								; get the base back into tempShort
.3dd4	48		pha				pha
.3dd5	29 7f		and #$7f			and 	#$7F
.3dd7	85 32		sta $32				sta 	tempShort
.3dd9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3ddb	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3ddd	90 02		bcc $3de1			bcc 	_I32FSNotLC
.3ddf	e9 20		sbc #$20			sbc 	#32
.3de1					_I32FSNotLC:
.3de1	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3de2	e9 30		sbc #$30			sbc 	#"0"
.3de4	90 33		bcc $3e19			bcc 	_I32FSFail 					; nothing more to do.
.3de6	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3de8	90 06		bcc $3df0			bcc 	_I32FSValidate
.3dea	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3dec	90 2b		bcc $3e19			bcc 	_I32FSFail
.3dee	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3df0					_I32FSValidate:
.3df0	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3df2	b0 25		bcs $3e19			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3df4	48		pha				pha 								; save the new digit value.
.3df5	e8		inx				inx 								; put base into next slot up on stack
.3df6	a5 32		lda $32				lda 	tempShort
.3df8	20 46 3f	jsr $3f46			jsr 	MInt32Set8Bit
.3dfb	ca		dex				dex
.3dfc	20 51 3e	jsr $3e51			jsr 	MInt32Multiply 				; multiply current by the base
.3dff	e8		inx				inx
.3e00	68		pla				pla  								; put additive into next slot
.3e01	20 46 3f	jsr $3f46			jsr 	MInt32Set8Bit
.3e04	ca		dex				dex
.3e05	20 1d 3e	jsr $3e1d			jsr 	MInt32Add 					; and add it
.3e08	c8		iny				iny 								; bump the character pointer
.3e09	cc ca 0d	cpy $0dca			cpy 	fs32Length 					; until > length.
.3e0c	f0 c5		beq $3dd3			beq 	_I32FSMainLoop
.3e0e	90 c3		bcc $3dd3			bcc 	_I32FSMainLoop
.3e10					_I32FSDone:
.3e10	68		pla				pla 								; get base/final sign back
.3e11	10 03		bpl $3e16			bpl 	_I32FSNN3
.3e13	20 f1 3e	jsr $3ef1			jsr 	MInt32Negate 				; negate the result.
.3e16					_I32FSNN3:
.3e16	7a		ply				ply
.3e17	38		sec				sec
.3e18	60		rts				rts
.3e19					_I32FSFail:
.3e19	68		pla				pla
.3e1a					_I32FSFail2:
.3e1a	7a		ply				ply
.3e1b	18		clc				clc
.3e1c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3e1d					MInt32Add:
.3e1d	18		clc				clc
.3e1e	b5 98		lda $98,x			lda 	esInt0,x
.3e20	75 99		adc $99,x			adc 	esInt0+1,x
.3e22	95 98		sta $98,x			sta 	esInt0,x
.3e24	b5 a0		lda $a0,x			lda 	esInt1,x
.3e26	75 a1		adc $a1,x			adc 	esInt1+1,x
.3e28	95 a0		sta $a0,x			sta 	esInt1,x
.3e2a	b5 a8		lda $a8,x			lda 	esInt2,x
.3e2c	75 a9		adc $a9,x			adc 	esInt2+1,x
.3e2e	95 a8		sta $a8,x			sta 	esInt2,x
.3e30	b5 b0		lda $b0,x			lda 	esInt3,x
.3e32	75 b1		adc $b1,x			adc 	esInt3+1,x
.3e34	95 b0		sta $b0,x			sta 	esInt3,x
.3e36	60		rts				rts
.3e37					MInt32Sub:
.3e37	38		sec				sec
.3e38	b5 98		lda $98,x			lda 	esInt0,x
.3e3a	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3e3c	95 98		sta $98,x			sta 	esInt0,x
.3e3e	b5 a0		lda $a0,x			lda 	esInt1,x
.3e40	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3e42	95 a0		sta $a0,x			sta 	esInt1,x
.3e44	b5 a8		lda $a8,x			lda 	esInt2,x
.3e46	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3e48	95 a8		sta $a8,x			sta 	esInt2,x
.3e4a	b5 b0		lda $b0,x			lda 	esInt3,x
.3e4c	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3e4e	95 b0		sta $b0,x			sta 	esInt3,x
.3e50	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3e51					MInt32Multiply:
.3e51	e8		inx				inx 								; copy 2nd -> 3rd
.3e52	20 77 3e	jsr $3e77			jsr 	MInt32CopyUp
.3e55	ca		dex				dex
.3e56	20 77 3e	jsr $3e77			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3e59	20 37 3f	jsr $3f37			jsr 	MInt32False 				; zero 1st.
.3e5c					_I32Loop:
.3e5c	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3e5e	29 01		and #$01			and 	#1
.3e60	f0 03		beq $3e65			beq 	_I32NoAdd 					; if set
.3e62	20 1d 3e	jsr $3e1d			jsr 	MInt32Add 					; add 2nd to 1st.
.3e65					_I32NoAdd:
.3e65	e8		inx				inx 								; shift 2nd left
.3e66	20 4c 3f	jsr $3f4c			jsr 	MInt32ShiftLeft
.3e69	e8		inx				inx  								; shift 3rd right
.3e6a	20 55 3f	jsr $3f55			jsr 	MInt32ShiftRight
.3e6d	20 5e 3f	jsr $3f5e			jsr 	MInt32Zero 					; check if zero.
.3e70	08		php				php 								; save status bits
.3e71	ca		dex				dex 	 							; point back to 1st
.3e72	ca		dex				dex
.3e73	28		plp				plp 								; get status bits
.3e74	d0 e6		bne $3e5c			bne 	_I32Loop 					; if non-zero keep going.
.3e76	60		rts				rts
.3e77					MInt32CopyUp:
.3e77	b5 98		lda $98,x			lda 	esInt0,x
.3e79	95 99		sta $99,x			sta 	esInt0+1,x
.3e7b	b5 a0		lda $a0,x			lda 	esInt1,x
.3e7d	95 a1		sta $a1,x			sta 	esInt1+1,x
.3e7f	b5 a8		lda $a8,x			lda 	esInt2,x
.3e81	95 a9		sta $a9,x			sta 	esInt2+1,x
.3e83	b5 b0		lda $b0,x			lda 	esInt3,x
.3e85	95 b1		sta $b1,x			sta 	esInt3+1,x
.3e87	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0dcb					MCharCount:	.fill 	1						; count of converted characters
.3e88					MLInt32ToString:
.3e88	aa		tax				tax									; module passes stack in A, base in Y
.3e89	98		tya				tya
.3e8a	20 8f 3e	jsr $3e8f			jsr 	MInt32ToString
.3e8d	8a		txa				txa
.3e8e	60		rts				rts
.3e8f					MInt32ToString:
.3e8f	48		pha				pha 								; save base
.3e90	85 32		sta $32				sta 	tempShort 					; save target base.
.3e92	a9 00		lda #$00			lda 	#0
.3e94	8d cb 0d	sta $0dcb			sta 	MCharCount 					; clear character count to 0
.3e97	5a		phy				phy
.3e98	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3e9a	10 10		bpl $3eac			bpl 	_I32TSUnsigned
.3e9c	48		pha				pha 								; save base on stack.
.3e9d	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3e9f	10 08		bpl $3ea9			bpl 	_I32TSNoFlip
.3ea1	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3ea3	20 de 3e	jsr $3ede			jsr 	MI32WriteCharacter
.3ea6	20 f1 3e	jsr $3ef1			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3ea9					_I32TSNoFlip:
.3ea9	68		pla				pla 								; get the base back
.3eaa	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3eac					_I32TSUnsigned:
.3eac	20 b9 3e	jsr $3eb9			jsr 	MI32DivideWrite 			; recursive code to output string.
.3eaf	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3eb1	ad cb 0d	lda $0dcb			lda 	MCharCount
.3eb4	91 2a		sta ($2a),y			sta 	(temp0),y
.3eb6	7a		ply				ply
.3eb7	68		pla				pla
.3eb8	60		rts				rts
.3eb9					MI32DivideWrite:
.3eb9	48		pha				pha 								; save the divisor/base
.3eba	e8		inx				inx 								; write in the dividing position.
.3ebb	20 46 3f	jsr $3f46			jsr 	MInt32Set8Bit
.3ebe	ca		dex				dex
.3ebf	20 36 3d	jsr $3d36			jsr 	MInt32UDivide 				; divide number by base.
.3ec2	68		pla				pla 								; get the base into Y
.3ec3	a8		tay				tay
.3ec4	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3ec6	48		pha				pha
.3ec7	20 5e 3f	jsr $3f5e			jsr 	MInt32Zero 					; is the result zero ?
.3eca	f0 04		beq $3ed0			beq 	_I32NoRecurse 				; if so, don't recurse.
.3ecc	98		tya				tya 								; put base into A
.3ecd	20 b9 3e	jsr $3eb9			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3ed0					_I32NoRecurse:
.3ed0	68		pla				pla 								; get the remainder back
.3ed1	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3ed3	90 02		bcc $3ed7			bcc 	_I32NotHex
.3ed5	69 06		adc #$06			adc 	#7-1
.3ed7					_I32NotHex:
.3ed7	18		clc				clc 								; make it ASCII
.3ed8	69 30		adc #$30			adc 	#48
.3eda	20 de 3e	jsr $3ede			jsr 	MI32WriteCharacter 			; write the character out
.3edd	60		rts				rts 								; and exit.
.3ede					MI32WriteCharacter:
.3ede	ee cb 0d	inc $0dcb			inc 	MCharCount 					; bump count (space for leading count)
.3ee1	ac cb 0d	ldy $0dcb			ldy 	MCharCount 					; get position
.3ee4	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3ee6	c8		iny				iny
.3ee7	a9 00		lda #$00			lda 	#0
.3ee9	91 2a		sta ($2a),y			sta 	(temp0),y
.3eeb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0dcc					MSeed32:	.fill 	4							; random number seed.
.3eec					MInt32Absolute:
.3eec	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3eee	30 01		bmi $3ef1			bmi 	MInt32Negate
.3ef0	60		rts				rts
.3ef1					MInt32Negate:
.3ef1	38		sec				sec 								; subtract from zero.
.3ef2	a9 00		lda #$00			lda 	#0
.3ef4	f5 98		sbc $98,x			sbc 	esInt0,x
.3ef6	95 98		sta $98,x			sta 	esInt0,x
.3ef8	a9 00		lda #$00			lda 	#0
.3efa	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3efc	95 a0		sta $a0,x			sta 	esInt1,x
.3efe	a9 00		lda #$00			lda 	#0
.3f00	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3f02	95 a8		sta $a8,x			sta 	esInt2,x
.3f04	a9 00		lda #$00			lda 	#0
.3f06	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3f08	95 b0		sta $b0,x			sta 	esInt3,x
.3f0a	60		rts				rts
.3f0b					MInt32Not:
.3f0b	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3f0d	49 ff		eor #$ff			eor 	#$FF
.3f0f	95 98		sta $98,x			sta 	esInt0,x
.3f11	b5 a0		lda $a0,x			lda 	esInt1,x
.3f13	49 ff		eor #$ff			eor 	#$FF
.3f15	95 a0		sta $a0,x			sta 	esInt1,x
.3f17	b5 a8		lda $a8,x			lda 	esInt2,x
.3f19	49 ff		eor #$ff			eor 	#$FF
.3f1b	95 a8		sta $a8,x			sta 	esInt2,x
.3f1d	b5 b0		lda $b0,x			lda 	esInt3,x
.3f1f	49 ff		eor #$ff			eor 	#$FF
.3f21	95 b0		sta $b0,x			sta 	esInt3,x
.3f23	60		rts				rts
.3f24					MInt32Sign:
.3f24	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3f26	30 0b		bmi $3f33			bmi 	MInt32True 					; if set return -1 (true)
.3f28	20 5e 3f	jsr $3f5e			jsr 	MInt32Zero 					; is it zero ?
.3f2b	f0 0a		beq $3f37			beq 	MInt32False 				; if zero return 0 (false)
.3f2d	20 37 3f	jsr $3f37			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3f30	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3f32	60		rts				rts
.3f33					MInt32True:
.3f33	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3f35	d0 02		bne $3f39			bne 	MInt32WriteAll
.3f37					MInt32False:
.3f37	a9 00		lda #$00			lda 	#0
.3f39					MInt32WriteAll:
.3f39	95 98		sta $98,x			sta 	esInt0,x
.3f3b					MInt32Write123:
.3f3b	95 a0		sta $a0,x			sta 	esInt1,x
.3f3d	95 a8		sta $a8,x			sta 	esInt2,x
.3f3f	95 b0		sta $b0,x			sta 	esInt3,x
.3f41	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3f43	95 90		sta $90,x			sta 	esType,x
.3f45	60		rts				rts
.3f46					MInt32Set8Bit:
.3f46	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3f48	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3f4a	f0 ef		beq $3f3b			beq		MInt32Write123
.3f4c					MInt32ShiftLeft:
.3f4c	16 98		asl $98,x			asl 	esInt0,x
.3f4e	36 a0		rol $a0,x			rol	 	esInt1,x
.3f50	36 a8		rol $a8,x			rol	 	esInt2,x
.3f52	36 b0		rol $b0,x			rol	 	esInt3,x
.3f54	60		rts				rts
.3f55					MInt32ShiftRight:
.3f55	56 b0		lsr $b0,x			lsr 	esInt3,x
.3f57	76 a8		ror $a8,x			ror 	esInt2,x
.3f59	76 a0		ror $a0,x			ror 	esInt1,x
.3f5b	76 98		ror $98,x			ror 	esInt0,x
.3f5d	60		rts				rts
.3f5e					MInt32Zero:
.3f5e	b5 98		lda $98,x			lda 	esInt0,x
.3f60	15 a0		ora $a0,x			ora 	esInt1,x
.3f62	15 a8		ora $a8,x			ora 	esInt2,x
.3f64	15 b0		ora $b0,x			ora 	esInt3,x
.3f66	60		rts				rts
.3f67					MInt32Random:
.3f67	5a		phy				phy
.3f68	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3f6a	ad cc 0d	lda $0dcc			lda 	MSeed32+0 					; check the seed isn't zero
.3f6d	d0 03		bne $3f72			bne 	_Random1
.3f6f	a8		tay				tay 								; if so do it 256 times
.3f70	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3f72					_Random1:
.3f72	0a		asl a				asl 	a
.3f73	2e cd 0d	rol $0dcd			rol 	MSeed32+1
.3f76	2e ce 0d	rol $0dce			rol 	MSeed32+2
.3f79	2e cf 0d	rol $0dcf			rol 	MSeed32+3
.3f7c	90 02		bcc $3f80			bcc 	_Random2
.3f7e	49 c5		eor #$c5			eor 	#$C5
.3f80					_Random2:
.3f80	88		dey				dey
.3f81	d0 ef		bne $3f72			bne 	_Random1
.3f83	8d cc 0d	sta $0dcc			sta 	MSeed32+0 					; copy the seed in.
.3f86	95 98		sta $98,x			sta 	esInt0,x
.3f88	ad cd 0d	lda $0dcd			lda 	MSeed32+1
.3f8b	95 a0		sta $a0,x			sta 	esInt1,x
.3f8d	ad ce 0d	lda $0dce			lda 	MSeed32+2
.3f90	95 a8		sta $a8,x			sta 	esInt2,x
.3f92	ad cf 0d	lda $0dcf			lda 	MSeed32+3
.3f95	95 b0		sta $b0,x			sta 	esInt3,x
.3f97	7a		ply				ply
.3f98	a9 00		lda #$00			lda 	#0
.3f9a	95 90		sta $90,x			sta 	esType,x
.3f9c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3f9d					CheckToken:
.3f9d	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3f9f	d0 02		bne $3fa3			bne 	_CTError
.3fa1	c8		iny				iny
.3fa2	60		rts				rts
.3fa3					_CTError:
.3fa3	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3fa5	20 27 15	jsr $1527		jsr	errorHandler
.3fa8					CheckRightParen:
.3fa8	b1 28		lda ($28),y			lda 	(codePtr),y
.3faa	c8		iny				iny
.3fab	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3fad	d0 01		bne $3fb0			bne 	_CRPError
.3faf	60		rts				rts
.3fb0					_CRPError:
.3fb0	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3fb2	20 27 15	jsr $1527		jsr	errorHandler
.3fb5					CheckComma:
.3fb5	b1 28		lda ($28),y			lda 	(codePtr),y
.3fb7	c8		iny				iny
.3fb8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3fba	d0 01		bne $3fbd			bne 	_CCError
.3fbc	60		rts				rts
.3fbd					_CCError:
.3fbd	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3fbf	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3fc2					RSReset:
.3fc2	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3fc4	85 37		sta $37				sta 	rsPointer
.3fc6	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3fc8	85 38		sta $38				sta 	1+(rsPointer)
.3fca	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3fcc	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3fcf	60		rts				rts
.3fd0					RSClaim:
.3fd0	84 32		sty $32				sty 	tempShort 					; preserve Y
.3fd2	48		pha				pha 								; save marker on stack.
.3fd3	8a		txa				txa 								; get bytes required.
.3fd4	38		sec				sec
.3fd5	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3fd7	65 37		adc $37				adc 	rsPointer
.3fd9	85 37		sta $37				sta 	rsPointer
.3fdb	a5 38		lda $38				lda 	rsPointer+1
.3fdd	69 ff		adc #$ff			adc 	#$FF
.3fdf	85 38		sta $38				sta 	rsPointer+1
.3fe1	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3fe3	90 08		bcc $3fed			bcc 	_RSCOverflow
.3fe5	68		pla				pla 								; get marker back
.3fe6	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3fe8	91 37		sta ($37),y			sta 	(rsPointer),y
.3fea	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3fec	60		rts				rts
.3fed					_RSCOverflow:
.3fed	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3fef	20 27 15	jsr $1527		jsr	errorHandler
.3ff2					RSFree:
.3ff2	18		clc				clc
.3ff3	65 37		adc $37				adc 	rsPointer
.3ff5	85 37		sta $37				sta 	rsPointer
.3ff7	90 02		bcc $3ffb			bcc 	_RSFExit
.3ff9	e6 38		inc $38				inc 	rsPointer+1
.3ffb					_RSFExit:
.3ffb	60		rts				rts
.3ffc					RSSavePosition:
.3ffc	84 32		sty $32				sty 	tempShort 					; save Y position
.3ffe	a8		tay				tay 								; this is where we write it.
.3fff	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.4001	91 37		sta ($37),y			sta 	(rsPointer),y
.4003	c8		iny				iny
.4004	a5 29		lda $29				lda 	codePtr+1
.4006	91 37		sta ($37),y			sta 	(rsPointer),y
.4008	c8		iny				iny
.4009	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.400b	91 37		sta ($37),y			sta 	(rsPointer),y
.400d	a8		tay				tay 								; fix Y back again to original value
.400e	60		rts				rts
.400f					RSLoadPosition:
.400f	a8		tay				tay
.4010	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.4012	85 28		sta $28				sta 	codePtr
.4014	c8		iny				iny
.4015	b1 37		lda ($37),y			lda 	(rsPointer),y
.4017	85 29		sta $29				sta 	codePtr+1
.4019	c8		iny				iny
.401a	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.401c	a8		tay				tay 								; to Y
.401d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.401e					WarmStart:
.401e	a2 04		ldx #$04		ldx	#4
.4020	20 c2 29	jsr $29c2		jsr	interactionHandler

;******  Return to file: main/main.asm

.4023					mainHandler:
.4023	7c 26 40	jmp ($4026,x)			jmp 	(mainVectors,x)
.4026					mainVectors:
>4026	42 40					.word _DummyControlHandler ; index 0
>4028	b5 3f					.word CheckComma           ; index 2
>402a	a8 3f					.word CheckRightParen      ; index 4
>402c	a6 31					.word XCommandClear        ; index 6
>402e	d1 38					.word LinkEvaluate         ; index 8
>4030	dd 38					.word LinkEvaluateInteger  ; index 10
>4032	e9 38					.word LinkEvaluateSmallInt ; index 12
>4034	e3 38					.word LinkEvaluateString   ; index 14
>4036	d7 38					.word LinkEvaluateTerm     ; index 16
>4038	88 3e					.word MLInt32ToString      ; index 18
>403a	33 33					.word Command_XNew         ; index 20
>403c	41 33					.word XCommand_Run         ; index 22
>403e	4d 33					.word Command_RunFrom      ; index 24
>4040	a3 3d					.word LinkInt32FromString  ; index 26
.4042					_DummyControlHandler:
.4042	60		rts			rts

;******  Return to file: basic.asm

.4043					section_end_main:
.4043					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.4043					StringChrs:
.4043	aa		tax				tax 								; set up stack
.4044	a9 02		lda #$02			lda 	#2
.4046	20 02 41	jsr $4102			jsr 	AllocateSoftString
.4049	98		tya				tya
.404a	20 26 41	jsr $4126			jsr 	WriteSoftString
.404d					StringUpdate:
.404d	20 5b 40	jsr $405b			jsr 	ReturnSoftString
.4050	8a		txa				txa
.4051	60		rts				rts
.4052					StringNull:
.4052	aa		tax				tax
.4053	a9 01		lda #$01			lda 	#1
.4055	20 02 41	jsr $4102			jsr 	AllocateSoftString
.4058	4c 4d 40	jmp $404d			jmp 	StringUpdate
.405b					ReturnSoftString:
.405b	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.405d	95 98		sta $98,x			sta 	esInt0,x
.405f	a5 3a		lda $3a				lda 	softMemAlloc+1
.4061	95 a0		sta $a0,x			sta 	esInt1,x
.4063	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.4065	95 a8		sta $a8,x			sta 	esInt2,x
.4067	95 b0		sta $b0,x			sta 	esInt3,x
.4069	a9 40		lda #$40			lda 	#$40 						; type string.
.406b	95 90		sta $90,x			sta 	esType,x
.406d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.406e					STRCompare:
.406e	48		pha				pha 								; save A
.406f	aa		tax				tax 								; put stack pos in X
.4070	5a		phy				phy
.4071	20 a4 40	jsr $40a4			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.4074	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.4076	b1 2a		lda ($2a),y			lda 	(temp0),y
.4078	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.407a	90 02		bcc $407e			bcc 	_SCNotSmaller
.407c	b1 2c		lda ($2c),y			lda 	(temp1),y
.407e					_SCNotSmaller:
.407e	aa		tax				tax 								; put that in X. We compare this many chars first.
.407f					_SCCompareLoop:
.407f	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.4081	f0 0c		beq $408f			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.4083	ca		dex				dex 								; decrement chars to compare.
.4084	c8		iny				iny 								; move to next character
.4085	38		sec				sec 								; calculate s1[y]-s2[y]
.4086	b1 2a		lda ($2a),y			lda 	(temp0),y
.4088	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.408a	d0 0a		bne $4096			bne 	_SCReturnResult 			; if different return sign of A
.408c	4c 7f 40	jmp $407f			jmp 	_SCCompareLoop
.408f					_SCSameToEndShortest
.408f	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.4091	38		sec				sec
.4092	b1 2a		lda ($2a),y			lda 	(temp0),y
.4094	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.4096					_SCReturnResult:
.4096	08		php				php 								; set return to zero preserving PSW.
.4097	a2 00		ldx #$00			ldx 	#0
.4099	28		plp				plp
.409a	f0 05		beq $40a1			beq 	_SCExit 					; two values equal, then exit
.409c	ca		dex				dex 								; X = $FF
.409d	90 02		bcc $40a1			bcc 	_SCExit 					; if 1st < 2nd then -1
.409f	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.40a1					_SCExit:
.40a1	7a		ply				ply
.40a2	68		pla				pla
.40a3	60		rts				rts
.40a4					CopyStringPair:
.40a4	b5 99		lda $99,x			lda 	esInt0+1,x
.40a6	85 2c		sta $2c				sta 	temp1
.40a8	b5 a1		lda $a1,x			lda 	esInt1+1,x
.40aa	85 2d		sta $2d				sta 	temp1+1
.40ac					CopyStringTop:
.40ac	b5 98		lda $98,x			lda 	esInt0,x
.40ae	85 2a		sta $2a				sta 	temp0
.40b0	b5 a0		lda $a0,x			lda 	esInt1,x
.40b2	85 2b		sta $2b				sta 	temp0+1
.40b4	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.40b5					StringConcat:
.40b5	aa		tax				tax									; stack pos in X
.40b6	5a		phy				phy
.40b7	20 a4 40	jsr $40a4			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.40ba	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.40bb	a0 00		ldy #$00			ldy 	#0
.40bd	b1 2a		lda ($2a),y			lda 	(temp0),y
.40bf	71 2c		adc ($2c),y			adc 	(temp1),y
.40c1	b0 1b		bcs $40de			bcs 	_SCError 					; just too many characters here.
.40c3	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.40c5	b0 17		bcs $40de			bcs 	_SCError
.40c7	20 02 41	jsr $4102			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.40ca	20 f9 40	jsr $40f9			jsr 	CopySoftToStack 			; copy that to the stack.
.40cd	20 e3 40	jsr $40e3			jsr 	SCCopyTemp0 				; copy temp0
.40d0	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.40d2	85 2a		sta $2a				sta 	temp0
.40d4	a5 2d		lda $2d				lda 	temp1+1
.40d6	85 2b		sta $2b				sta 	temp0+1
.40d8	20 e3 40	jsr $40e3			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.40db	7a		ply				ply
.40dc	8a		txa				txa 								; and A
.40dd	60		rts				rts
.40de					_SCError:
.40de	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.40e0	20 27 15	jsr $1527		jsr	errorHandler
.40e3					SCCopyTemp0:
.40e3	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.40e5	b1 2a		lda ($2a),y			lda 	(temp0),y
.40e7	85 2e		sta $2e				sta 	temp2
.40e9					_SCCopyLoop:
.40e9	a5 2e		lda $2e				lda 	temp2 						; done the lot
.40eb	f0 0b		beq $40f8			beq 	_SCCopyExit
.40ed	c6 2e		dec $2e				dec 	temp2
.40ef	c8		iny				iny 								; get next char
.40f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.40f2	20 26 41	jsr $4126			jsr 	WriteSoftString 			; write to soft string.
.40f5	4c e9 40	jmp $40e9			jmp 	_SCCopyLoop
.40f8					_SCCopyExit:
.40f8	60		rts				rts
.40f9					CopySoftToStack:
.40f9	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.40fb	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.40fd	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.40ff	95 a0		sta $a0,x			sta 	esInt1,x
.4101	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.4102					AllocateSoftString:
.4102	85 32		sta $32				sta 	tempShort 					; save count
.4104	5a		phy				phy
.4105	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.4107	d0 09		bne $4112			bne 	_ASSDone
.4109	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.410b	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.410d	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.410f	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.4110	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.4112					_ASSDone:
.4112	38		sec				sec 								; allocate downwards enough memory
.4113	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.4115	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.4117	85 39		sta $39				sta 	softMemAlloc
.4119	a5 3a		lda $3a				lda 	softMemAlloc+1
.411b	e9 00		sbc #$00			sbc 	#0
.411d	85 3a		sta $3a				sta 	softMemAlloc+1
.411f	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.4121	a8		tay				tay
.4122	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4124	7a		ply				ply
.4125	60		rts				rts
.4126					WriteSoftString:
.4126	84 32		sty $32				sty 	tempShort 					; save Y
.4128	48		pha				pha 								; save character on stack
.4129	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.412b	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.412d	18		clc				clc
.412e	69 01		adc #$01			adc 	#1
.4130	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4132	a8		tay				tay 								; offset in Y
.4133	68		pla				pla 								; get char and write.
.4134	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4136	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.4138	60		rts				rts
.4139					StrClone:
.4139	aa		tax				tax 								; set up stack.
.413a	5a		phy				phy
.413b	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.413d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.413f	18		clc				clc
.4140	69 01		adc #$01			adc 	#1
.4142	20 02 41	jsr $4102			jsr 	AllocateSoftString 			; allocate soft memory
.4145	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.4147	95 98		sta $98,x			sta 	esInt0,x
.4149	a5 3a		lda $3a				lda 	softMemAlloc+1
.414b	95 a0		sta $a0,x			sta 	esInt1,x
.414d	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.414f	95 a8		sta $a8,x			sta 	esInt2,x
.4151	95 b0		sta $b0,x			sta 	esInt3,x
.4153	a9 40		lda #$40			lda 	#$40 						; set type to string.
.4155	95 90		sta $90,x			sta 	esType,x
.4157	20 e3 40	jsr $40e3			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.415a	7a		ply				ply
.415b	8a		txa				txa
.415c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.415d					CaseString:
.415d	48		pha				pha 								; save A and copy to X
.415e	aa		tax				tax
.415f	5a		phy				phy
.4160	20 ac 40	jsr $40ac			jsr 	CopyStringTop 				; target string -> temp0
.4163	a0 00		ldy #$00			ldy 	#0
.4165	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.4167	18		clc				clc
.4168	69 01		adc #$01			adc 	#1 							; one more for length byte
.416a	20 02 41	jsr $4102			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.416d	20 f9 40	jsr $40f9			jsr 	CopySoftToStack 			; copy that to the stack.
.4170	a0 00		ldy #$00			ldy 	#0
.4172	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.4174	aa		tax				tax
.4175					_CSCopy:
.4175	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.4177	f0 24		beq $419d			beq 	_CSExit
.4179	ca		dex				dex
.417a	c8		iny				iny
.417b	68		pla				pla 								; check direction
.417c	48		pha				pha
.417d	f0 0c		beq $418b			beq 	_CSUpper
.417f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.4181	c9 41		cmp #$41			cmp 	#"A"
.4183	90 12		bcc $4197			bcc 	_CSWrite
.4185	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4187	b0 0e		bcs $4197			bcs 	_CSWrite
.4189	90 0a		bcc $4195			bcc 	_CSFlipWrite
.418b					_CSUpper:
.418b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.418d	c9 61		cmp #$61			cmp 	#"a"
.418f	90 06		bcc $4197			bcc 	_CSWrite
.4191	c9 7b		cmp #$7b			cmp 	#"z"+1
.4193	b0 02		bcs $4197			bcs 	_CSWrite
.4195					_CSFlipWrite:
.4195	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.4197					_CSWrite:
.4197	20 26 41	jsr $4126			jsr 	WriteSoftString 			; add to soft string.
.419a	4c 75 41	jmp $4175			jmp 	_CSCopy
.419d					_CSExit:
.419d	7a		ply				ply
.419e	68		pla				pla
.419f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.41a0					StringSubstring:
.41a0	48		pha				pha
.41a1	aa		tax				tax 								; access stack.
.41a2	5a		phy				phy
.41a3	20 ac 40	jsr $40ac			jsr 	CopyStringTop 				; point temp0 to the string.
.41a6	a0 00		ldy #$00			ldy 	#0 							; get length.
.41a8	b1 2a		lda ($2a),y			lda 	(temp0),Y
.41aa	85 2c		sta $2c				sta 	temp1
.41ac	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.41ae	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.41b0	f0 02		beq $41b4			beq 	_SSBOkay
.41b2	b0 2a		bcs $41de			bcs 	_SSBReturnNull
.41b4					_SSBOkay:
.41b4	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.41b6	18		clc				clc
.41b7	69 01		adc #$01			adc 	#1
.41b9	38		sec				sec
.41ba	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.41bc	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.41be	90 02		bcc $41c2			bcc		_SSBTrunc
.41c0	b5 9a		lda $9a,x			lda 	esInt0+2,x
.41c2					_SSBTrunc:
.41c2	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.41c4	18		clc				clc
.41c5	69 01		adc #$01			adc 	#1 							; add 1
.41c7	20 02 41	jsr $4102			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.41ca	20 f9 40	jsr $40f9			jsr 	CopySoftToStack 			; copy that to the stack.
.41cd	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.41cf					_SSBCopyLoop:
.41cf	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.41d1	f0 0e		beq $41e1			beq 	_SSBExit
.41d3	c6 2d		dec $2d				dec 	temp1+1
.41d5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.41d7	20 26 41	jsr $4126			jsr 	WriteSoftString
.41da	c8		iny				iny
.41db	4c cf 41	jmp $41cf			jmp 	_SSBCopyLoop
.41de					_SSBReturnNull:
.41de	20 e4 41	jsr $41e4			jsr 	ReturnNull
.41e1					_SSBExit:
.41e1	7a		ply				ply
.41e2	68		pla				pla
.41e3	60		rts				rts
.41e4					ReturnNull:
.41e4	a9 00		lda #$00			lda 	#0 							; clear null string
.41e6	8d ce 0a	sta $0ace			sta 	NullString
.41e9	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.41eb	95 98		sta $98,x			sta 	esInt0,x
.41ed	a9 0a		lda #$0a			lda 	#NullString >> 8
.41ef	95 a0		sta $a0,x			sta 	esInt1,x
.41f1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0dd0					srcStrLen:
>0dd0							.fill 	1
.41f2					StringWrite:
.41f2	aa		tax				tax
.41f3	48		pha				pha
.41f4	5a		phy				phy
.41f5	20 1b 42	jsr $421b			jsr 	CheckOverwriteCurrent
.41f8	b0 0d		bcs $4207			bcs		_SWCopyCurrent
.41fa	20 59 42	jsr $4259			jsr 	RequiresConcretion
.41fd	90 0e		bcc $420d			bcc 	_SWWriteReference
.41ff	20 b8 42	jsr $42b8			jsr 	CheckSpecialConcretion
.4202	b0 09		bcs $420d			bcs 	_SWWriteReference
.4204	20 6d 42	jsr $426d			jsr 	AllocateHardMemory
.4207					_SWCopyCurrent:
.4207	20 9e 42	jsr $429e			jsr 	CopyStringToHardMemory
.420a	4c 18 42	jmp $4218			jmp 	_SWExit
.420d					_SWWriteReference
.420d	a0 00		ldy #$00			ldy 	#0
.420f	a5 2a		lda $2a				lda 	temp0
.4211	91 2c		sta ($2c),y			sta 	(temp1),y
.4213	c8		iny				iny
.4214	a5 2b		lda $2b				lda 	temp0+1
.4216	91 2c		sta ($2c),y			sta 	(temp1),y
.4218					_SWExit:
.4218	7a		ply				ply
.4219	68		pla				pla
.421a	60		rts				rts
.421b					CheckOverwriteCurrent:
.421b	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.421d	b5 a1		lda $a1,x			lda 	esInt1+1,x
.421f	85 2b		sta $2b				sta 	temp0+1
.4221	b5 99		lda $99,x			lda 	esInt0+1,x
.4223	85 2a		sta $2a				sta 	temp0
.4225	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.4227	8d d0 0d	sta $0dd0			sta 	srcStrLen
.422a	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.422c	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.422e	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4230	85 2d		sta $2d				sta 	temp1+1
.4232	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.4234	b1 2c		lda ($2c),y			lda 	(temp1),y
.4236	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.4238	90 1b		bcc $4255			bcc 	_COCFail 				; in hard memory.
.423a	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.423c	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.423e	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4240	85 2e		sta $2e				sta 	temp2
.4242	c8		iny				iny
.4243	b1 2c		lda ($2c),y			lda 	(temp1),y
.4245	e9 00		sbc #$00			sbc 	#0
.4247	85 2f		sta $2f				sta 	temp2+1
.4249	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.424b	b1 2e		lda ($2e),y			lda 	(temp2),y
.424d	38		sec				sec  							; maximum character capacity.
.424e	e9 02		sbc #$02			sbc 	#2
.4250	cd d0 0d	cmp $0dd0			cmp 	srcStrLen 				; if >= the required length
.4253	b0 02		bcs $4257			bcs 	_COCCanReuse
.4255					_COCFail:
.4255	18		clc				clc
.4256	60		rts				rts
.4257					_COCCanReuse:
.4257	38		sec				sec
.4258	60		rts				rts
.4259					RequiresConcretion:
.4259	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.425b	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.425d	b0 0a		bcs $4269			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.425f	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.4261	f0 08		beq $426b			beq 	_RCFail 				; if not, this cannot be soft memory.
.4263	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.4265	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.4267	90 02		bcc $426b			bcc 	_RCFail 				; so concreting
.4269					_RCSucceed:
.4269	38		sec				sec
.426a	60		rts				rts
.426b					_RCFail:
.426b	18		clc				clc
.426c	60		rts				rts
.426d					AllocateHardMemory:
.426d	5a		phy				phy
.426e	ad d0 0d	lda $0dd0			lda 	srcStrLen 				; characters in string
.4271	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.4273	b0 04		bcs $4279			bcs 	_AHMSetMax 				; max out that amount.
.4275	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.4277	90 02		bcc $427b			bcc 	_AHMIsOkay
.4279					_AHMSetMax:
.4279	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.427b					_AHMIsOkay:
.427b	48		pha				pha	 							; save size to be allocated
.427c	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.427e	38		sec				sec  							; and copy result to TOS as target address.
.427f	65 33		adc $33				adc 	highMemory
.4281	85 33		sta $33				sta 	highMemory
.4283	a5 34		lda $34				lda 	highMemory+1
.4285	69 ff		adc #$ff			adc 	#$FF
.4287	85 34		sta $34				sta 	highMemory+1
.4289	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.428b	68		pla				pla 							; get the total size of the storage block
.428c	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.428e	18		clc				clc
.428f	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.4291	69 01		adc #$01			adc 	#1
.4293	91 2c		sta ($2c),y			sta 	(temp1),y
.4295	a5 34		lda $34				lda 	highMemory+1
.4297	69 00		adc #$00			adc 	#0
.4299	c8		iny				iny
.429a	91 2c		sta ($2c),y			sta 	(temp1),y
.429c	7a		ply				ply
.429d	60		rts				rts
.429e					CopyStringToHardMemory:
.429e	5a		phy				phy
.429f	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.42a1	b1 2c		lda ($2c),y			lda 	(temp1),y
.42a3	85 2e		sta $2e				sta 	temp2
.42a5	c8		iny				iny
.42a6	b1 2c		lda ($2c),y			lda 	(temp1),y
.42a8	85 2f		sta $2f				sta 	temp2+1
.42aa	ac d0 0d	ldy $0dd0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.42ad					_CSTHMLoop:
.42ad	b1 2a		lda ($2a),y			lda 	(temp0),y
.42af	91 2e		sta ($2e),y			sta 	(temp2),y
.42b1	88		dey				dey
.42b2	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.42b4	d0 f7		bne $42ad			bne 	_CSTHMLoop
.42b6	7a		ply				ply
.42b7	60		rts				rts
.42b8					CheckSpecialConcretion:
.42b8	ad d0 0d	lda $0dd0			lda 	srcStrLen 				; check string is null e.g. length = 0
.42bb	f0 02		beq $42bf			beq 	_CSCNullString
.42bd	18		clc				clc
.42be	60		rts				rts
.42bf					_CSCNullString:
.42bf	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.42c1	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.42c4	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.42c6	85 2a		sta $2a				sta 	temp0
.42c8	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.42ca	85 2b		sta $2b				sta 	1+(temp0)
.42cc	38		sec				sec
.42cd	60		rts				rts

;******  Return to file: string/string.asm

.42ce					stringHandler:
.42ce	7c d1 42	jmp ($42d1,x)			jmp 	(stringVectors,x)
.42d1					stringVectors:
>42d1	e3 42					.word _DummyControlHandler ; index 0
>42d3	43 40					.word StringChrs           ; index 2
>42d5	39 41					.word StrClone             ; index 4
>42d7	b5 40					.word StringConcat         ; index 6
>42d9	52 40					.word StringNull           ; index 8
>42db	6e 40					.word STRCompare           ; index 10
>42dd	5d 41					.word CaseString           ; index 12
>42df	a0 41					.word StringSubstring      ; index 14
>42e1	f2 41					.word StringWrite          ; index 16
.42e3					_DummyControlHandler:
.42e3	60		rts			rts

;******  Return to file: basic.asm

.42e4					section_end_string:
.42e4					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0dd1					deTokeniseVector:
>0dd1							.fill 	2
.0dd3					lastCharacterClass:
>0dd3							.fill 	1
.0dd4					indent:
>0dd4							.fill 	1
.42e4					ListLine:
.42e4	48		pha				pha								; enter here to list to console. sets the output vector
.42e5	a9 13		lda #$13			lda 	#(deTokenPrint) & $FF
.42e7	8d d1 0d	sta $0dd1			sta 	deTokeniseVector
.42ea	a9 44		lda #$44			lda 	#(deTokenPrint) >> 8
.42ec	8d d2 0d	sta $0dd2			sta 	1+(deTokeniseVector)
.42ef	68		pla				pla
.42f0					Detokenise:
.42f0	18		clc				clc 							; space required for line number.
.42f1	69 06		adc #$06			adc 	#6
.42f3	8d d4 0d	sta $0dd4			sta 	indent
.42f6	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.42f8	8d d3 0d	sta $0dd3			sta 	lastCharacterClass
.42fb	a2 02		ldx #$02			ldx 	#2
.42fd	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.42ff	95 a8		sta $a8,x			sta 	esInt2,x
.4301	95 b0		sta $b0,x			sta 	esInt3,x
.4303	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.4305	b1 28		lda ($28),y			lda 	(codePtr),y
.4307	95 98		sta $98,x			sta 	esInt0,x
.4309	c8		iny				iny
.430a	b1 28		lda ($28),y			lda 	(codePtr),y
.430c	95 a0		sta $a0,x			sta 	esInt1,x
.430e	a9 84		lda #$84			lda 	#LTYLineNumber
.4310	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.4313	a9 0a		lda #$0a			lda 	#10 					; base 10
.4315	20 b9 43	jsr $43b9			jsr 	DTPrintInteger 			; print as integer.
.4318	a0 00		ldy #$00			ldy 	#0 						; get length
.431a	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.431c	aa		tax				tax
.431d					_DTPadOut:
.431d	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.431f	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.4322	e8		inx				inx
.4323	ec d4 0d	cpx $0dd4			cpx 	indent
.4326	d0 f5		bne $431d			bne 	_DTPadOut
.4328	a0 03		ldy #$03			ldy 	#3 						; start position.
.432a					_DTListLoop:
.432a	b1 28		lda ($28),y			lda 	(codePtr),y
.432c	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.432e	f0 5c		beq $438c			beq 	_DTIsString
.4330	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.4332	f0 54		beq $4388			beq 	_DTIsFloat
.4334	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.4336	f0 16		beq $434e			beq 	_DTHexConstant
.4338	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.433a	d0 06		bne $4342			bne 	_DTNotEnd
.433c	a9 ff		lda #$ff			lda 	#255 					; print CR
.433e	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.4341	60		rts				rts
.4342					_DTNotEnd:
.4342	c9 00		cmp #$00			cmp 	#0
.4344	30 36		bmi $437c			bmi 	_DTIsToken
.4346	c9 40		cmp #$40			cmp 	#$40
.4348	90 38		bcc $4382			bcc 	_DTIsIdentifier
.434a	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.434c	d0 0d		bne $435b			bne 	_DTConstant
.434e					_DTHexConstant:
.434e	a9 26		lda #$26			lda 	#"&"
.4350	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.4353	c8		iny				iny
.4354	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.4356	20 2f 44	jsr $442f			jsr 	DTSwitchMode
.4359	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.435b					_DTConstant:
.435b	48		pha				pha
.435c	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.435e	20 2f 44	jsr $442f			jsr 	DTSwitchMode
.4361	a9 86		lda #$86			lda 	#LTYConstant
.4363	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.4366	a2 02		ldx #$02			ldx 	#2 						; get its value
.4368	8a		txa				txa
.4369	a2 10		ldx #$10		ldx	#16
.436b	20 23 40	jsr $4023		jsr	mainHandler
.436e	aa		tax				tax
.436f	68		pla				pla 							; get base back
.4370	85 32		sta $32				sta 	tempShort
.4372	5a		phy				phy
.4373	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.4375	20 b9 43	jsr $43b9			jsr 	DTPrintInteger
.4378	7a		ply				ply
.4379	4c 2a 43	jmp $432a			jmp 	_DTListLoop
.437c					_DTIsToken:
.437c	20 88 44	jsr $4488			jsr 	DTDecodeToken
.437f	4c 2a 43	jmp $432a			jmp 	_DTListLoop
.4382					_DTIsIdentifier:
.4382	20 41 44	jsr $4441			jsr 	DTIdentifier
.4385	4c 2a 43	jmp $432a			jmp 	_DTListLoop
.4388					_DTIsFloat:
>4388	db						.byte 	$DB
.4389	4c 88 43	jmp $4388			jmp 	_DTIsFloat
.438c					_DTIsString:
.438c	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.438e	20 2f 44	jsr $442f			jsr 	DTSwitchMode
.4391	a9 81		lda #$81			lda 	#LTYString
.4393	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.4396	a9 22		lda #$22			lda 	#'"'						; open quote
.4398	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.439b	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.439d	8a		txa				txa
.439e	a2 10		ldx #$10		ldx	#16
.43a0	20 23 40	jsr $4023		jsr	mainHandler
.43a3	aa		tax				tax
.43a4	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.43a6	85 2a		sta $2a				sta 	temp0
.43a8	b5 a0		lda $a0,x			lda 	esInt1,x
.43aa	85 2b		sta $2b				sta 	temp0+1
.43ac	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.43ae	20 ca 43	jsr $43ca			jsr 	DTPrintLengthPrefix
.43b1	a9 22		lda #$22			lda 	#'"'
.43b3	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.43b6	4c 2a 43	jmp $432a			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0dd5					tPrintCount:
>0dd5							.fill 	1
.43b9					DTPrintInteger:
.43b9	48		pha				pha									; save base
.43ba	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.43bc	85 2a		sta $2a				sta 	temp0
.43be	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.43c0	85 2b		sta $2b				sta 	1+(temp0)
.43c2	7a		ply				ply
.43c3	8a		txa				txa
.43c4	a2 12		ldx #$12		ldx	#18
.43c6	20 23 40	jsr $4023		jsr	mainHandler
.43c9	aa		tax				tax 								; then drop through here.
.43ca					DTPrintLengthPrefix:
.43ca	aa		tax				tax 								; A = 0 = don't case convert.
.43cb	5a		phy				phy
.43cc	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.43ce	b1 2a		lda ($2a),y			lda 	(temp0),y
.43d0	8d d5 0d	sta $0dd5			sta 	tPrintCount
.43d3	f0 1b		beq $43f0			beq 	_DTPLPExit 					; empty string
.43d5					_DTPLPLoop:
.43d5	c8		iny				iny 								; get next.
.43d6	b1 2a		lda ($2a),y			lda 	(temp0),y
.43d8	29 7f		and #$7f			and 	#$7F
.43da	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.43dc	f0 0a		beq $43e8			beq 	_DTPLPNoCase
.43de	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.43e0	90 06		bcc $43e8			bcc 	_DTPLPNoCase
.43e2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43e4	b0 02		bcs $43e8			bcs 	_DTPLPNoCase
.43e6	49 20		eor #$20			eor 	#"A"^"a"
.43e8					_DTPLPNoCase
.43e8	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter 		; call handler
.43eb	ce d5 0d	dec $0dd5			dec 	tPrintCount 				; do all the characters
.43ee	d0 e5		bne $43d5			bne 	_DTPLPLoop
.43f0					_DTPLPExit:
.43f0	7a		ply				ply
.43f1	60		rts				rts
.43f2					ListOutputCharacter:
.43f2	85 32		sta $32				sta 	tempShort
.43f4	48		pha				pha
.43f5	da		phx				phx
.43f6	5a		phy				phy
.43f7	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.43f9	c9 20		cmp #$20			cmp 	#32
.43fb	b0 0c		bcs $4409			bcs		_LOCHiBit
.43fd	09 40		ora #$40			ora 	#64 						; conversion
.43ff	c9 40		cmp #$40			cmp 	#64							; make l/c
.4401	f0 06		beq $4409			beq 	_LOCHiBit
.4403	c9 5b		cmp #$5b			cmp 	#65+26
.4405	b0 02		bcs $4409			bcs 	_LOCHiBit
.4407	69 20		adc #$20			adc 	#32
.4409					_LOCHiBit:
.4409	20 10 44	jsr $4410			jsr 	_LOCCallVector				; call o/p handler routine
.440c	7a		ply				ply
.440d	fa		plx				plx
.440e	68		pla				pla
.440f					_LOCExit:
.440f	60		rts				rts
.4410					_LOCCallVector:
.4410	6c d1 0d	jmp ($0dd1)			jmp 	(deTokeniseVector)
.4413					deTokenPrint:
.4413	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.4415	30 06		bmi $441d			bmi 	_dtpInk
.4417	a2 14		ldx #$14		ldx	#20
.4419	20 05 15	jsr $1505		jsr	deviceHandler
.441c	60		rts				rts
.441d	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.441f	f0 08		beq $4429			beq 	_dtpCR						; except $FF => CRLF
.4421	29 07		and #$07			and 	#7
.4423	a2 06		ldx #$06		ldx	#6
.4425	20 05 15	jsr $1505		jsr	deviceHandler
.4428	60		rts				rts
.4429					_dtpCR:
.4429	a2 04		ldx #$04		ldx	#4
.442b	20 05 15	jsr $1505		jsr	deviceHandler
.442e	60		rts				rts
.442f					DTSwitchMode:
.442f	cd d3 0d	cmp $0dd3			cmp 	LastCharacterClass 			; if changed, update character class
.4432	f0 04		beq $4438			beq 	_DTSMNoChange
.4434	8d d3 0d	sta $0dd3			sta 	LastCharacterClass
.4437					_DTSMExit:
.4437	60		rts				rts
.4438					_DTSMNoChange:
.4438	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.443a	f0 fb		beq $4437			beq 	_DTSMExit 					; need a space.
.443c	a9 20		lda #$20			lda 	#" "
.443e	4c f2 43	jmp $43f2			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4441					DTIdentifier:
.4441	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4443	20 2f 44	jsr $442f			jsr 	DTSwitchMode
.4446	a9 87		lda #$87			lda 	#LTYIdentifier
.4448	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.444b					_DTILoop:
.444b	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.444d	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.444f	d0 02		bne $4453			bne 	_DTINotUS
.4451	a9 5f		lda #$5f			lda 	#"_"
.4453					_DTINotUS:
.4453	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.4456	c8		iny				iny
.4457	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.4459	c9 3a		cmp #$3a			cmp 	#$3A
.445b	90 ee		bcc $444b			bcc 	_DTILoop
.445d	c8		iny				iny
.445e	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4460	f0 25		beq $4487			beq 	_DTIExit 					; no postfix.
.4462	48		pha				pha
.4463	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.4465	8d d3 0d	sta $0dd3			sta 	LastCharacterClass
.4468	a9 82		lda #$82			lda 	#LTYPunctuation
.446a	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.446d	68		pla				pla
.446e	c9 3b		cmp #$3b			cmp 	#$3B
.4470	f0 10		beq $4482			beq 	_DTIArray
.4472	4a		lsr a				lsr 	a 							; array flag in C
.4473	08		php				php
.4474	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.4476	f0 02		beq $447a			beq 	_DTIDollar
.4478	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.447a					_DTIDollar:
.447a	49 24		eor #$24			eor 	#"$"
.447c	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.447f	28		plp				plp
.4480	90 05		bcc $4487			bcc 	_DTIExit
.4482					_DTIArray:
.4482	a9 28		lda #$28			lda 	#"("
.4484	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.4487					_DTIExit:
.4487	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4488					DTDecodeToken:
.4488	a2 00		ldx #$00			ldx 	#0 							; table number to use
.448a	b1 28		lda ($28),y			lda 	(codePtr),y
.448c	c9 84		cmp #$84			cmp 	#$84
.448e	b0 05		bcs $4495			bcs 	_DTNotShift
.4490	29 03		and #$03			and 	#3 							; get the shift 1..3
.4492	0a		asl a				asl 	a 							; put 2 x in X
.4493	aa		tax				tax
.4494	c8		iny				iny
.4495					_DTNotShift:
.4495	bd 8b 47	lda $478b,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.4498	85 2a		sta $2a				sta 	temp0 						; point into temp0
.449a	bd 8c 47	lda $478c,x			lda 	TokenTableAddress+1,x
.449d	85 2b		sta $2b				sta 	temp0+1
.449f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.44a1	c8		iny				iny 								; consume it.
.44a2	aa		tax				tax
.44a3	5a		phy				phy
.44a4					_DTFindText:
.44a4	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.44a6	f0 11		beq $44b9			beq 	_DTFoundText
.44a8	ca		dex				dex
.44a9	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.44ab	38		sec				sec
.44ac	b1 2a		lda ($2a),y			lda 	(temp0),y
.44ae	65 2a		adc $2a				adc 	temp0
.44b0	85 2a		sta $2a				sta 	temp0
.44b2	90 f0		bcc $44a4			bcc 	_DTFindText
.44b4	e6 2b		inc $2b				inc 	temp0+1
.44b6	4c a4 44	jmp $44a4			jmp 	_DTFindText
.44b9					_DTFoundText:
.44b9	a0 01		ldy #$01			ldy 	#1 							; get first character
.44bb	b1 2a		lda ($2a),y			lda 	(temp0),y
.44bd	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.44bf	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.44c1	90 11		bcc $44d4			bcc 	_DTIsPunctuation
.44c3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44c5	b0 0d		bcs $44d4			bcs 	_DTIsPunctuation
.44c7	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.44c9	20 2f 44	jsr $442f			jsr 	DTSwitchMode
.44cc	a9 83		lda #$83			lda 	#LTYKeyword
.44ce	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.44d1	4c de 44	jmp $44de			jmp 	_DTPrint
.44d4					_DTIsPunctuation:
.44d4	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.44d6	20 2f 44	jsr $442f			jsr 	DTSwitchMode
.44d9	a9 82		lda #$82			lda 	#LTYPunctuation
.44db	20 f2 43	jsr $43f2			jsr 	ListOutputCharacter
.44de					_DTPrint:
.44de	a9 01		lda #$01			lda 	#1 							; fix case.
.44e0	20 ca 43	jsr $43ca			jsr 	DTPrintLengthPrefix 		; print it out.
.44e3	a0 00		ldy #$00			ldy 	#0
.44e5	b1 2a		lda ($2a),y			lda 	(temp0),y
.44e7	a8		tay				tay
.44e8	b1 2a		lda ($2a),y			lda 	(temp0),y
.44ea	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.44ec	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.44ee	90 04		bcc $44f4			bcc 	_DTIsNowPunctuation
.44f0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44f2	90 05		bcc $44f9			bcc 	_DTPExit
.44f4					_DTIsNowPunctuation:
.44f4	a9 01		lda #$01			lda 	#1
.44f6	8d d3 0d	sta $0dd3			sta		LastCharacterClass
.44f9					_DTPExit:
.44f9	7a		ply				ply
.44fa	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0dd6					currentSet:
>0dd6							.fill 	1
.44fb					TokenSearch:
.44fb	da		phx				phx
.44fc	5a		phy				phy
.44fd	a9 00		lda #$00			lda 	#0
.44ff	8d d6 0d	sta $0dd6			sta 	currentSet
.4502					_TSLoop:
.4502	ad d6 0d	lda $0dd6			lda 	currentSet 					; 2 x currentset in X
.4505	0a		asl a				asl 	a
.4506	aa		tax				tax
.4507	bd 8b 47	lda $478b,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.450a	85 2a		sta $2a				sta 	temp0
.450c	bd 8c 47	lda $478c,x			lda 	TokenTableAddress+1,x
.450f	85 2b		sta $2b				sta 	temp0+1
.4511	20 36 45	jsr $4536			jsr 	TokenSearchOne 				; search one table
.4514	b0 0d		bcs $4523			bcs 	_TSFound 					; found a token.
.4516	ee d6 0d	inc $0dd6			inc 	currentSet 					; next set
.4519	ad d6 0d	lda $0dd6			lda 	currentSet
.451c	c9 04		cmp #$04			cmp 	#4
.451e	d0 e2		bne $4502			bne 	_TSLoop 					; back if not done all four.
.4520	18		clc				clc 								; clear carry and exit
.4521	90 10		bcc $4533			bcc 	_TSExit
.4523					_TSFound:
.4523	48		pha				pha 								; save token
.4524	ad d6 0d	lda $0dd6			lda 	currentSet					; if set zero no shift
.4527	f0 05		beq $452e			beq 	_TSNoShift
.4529	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.452b	20 e7 45	jsr $45e7			jsr 	TokenWrite
.452e					_TSNoShift:
.452e	68		pla				pla 								; get token back
.452f	20 e7 45	jsr $45e7			jsr 	TokenWrite 					; write it
.4532	38		sec				sec 								; carry set indicating success
.4533					_TSExit:
.4533	7a		ply				ply
.4534	fa		plx				plx
.4535	60		rts				rts
.4536					TokenSearchOne:
.4536	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.4538					_TSOLoop:
.4538	a0 00		ldy #$00			ldy 	#0
.453a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.453c	f0 26		beq $4564			beq 	_TSOFail 					; if zero, end of table
.453e	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4541	f0 11		beq $4554			beq 	_TSOCheckText
.4543					_TSONext:
.4543	e8		inx				inx 								; bump token
.4544	a0 00		ldy #$00			ldy 	#0							; get length
.4546	b1 2a		lda ($2a),y			lda 	(temp0),y
.4548	38		sec				sec
.4549	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.454b	85 2a		sta $2a				sta 	temp0
.454d	90 e9		bcc $4538			bcc 	_TSOLoop
.454f	e6 2b		inc $2b				inc 	temp0+1
.4551	4c 38 45	jmp $4538			jmp 	_TSOLoop
.4554					_TSOCheckText:
.4554	a8		tay				tay 								; compare length downto 1.
.4555					_TSOCheckLoop:
.4555	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.4557	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.455a	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.455c	d0 e5		bne $4543			bne 	_TSONext 					; different goto next.
.455e	88		dey				dey 								; do all
.455f	d0 f4		bne $4555			bne 	_TSOCheckLoop
.4561	8a		txa				txa 								; return token in A and carry set
.4562	38		sec				sec
.4563	60		rts				rts
.4564					_TSOFail:
.4564	18		clc				clc
.4565	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.4566					TokTest:
.4566	a2 ff		ldx #$ff				ldx 	#$FF
.4568	9a		txs					txs
.4569	a9 86		lda #$86			lda 	#(TokenText1) & $FF
.456b	85 28		sta $28				sta 	codePtr
.456d	a9 45		lda #$45			lda 	#(TokenText1) >> 8
.456f	85 29		sta $29				sta 	1+(codePtr)
.4571	20 86 45	jsr $4586				jsr 	Tokenise
.4574	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.4576	bd 86 45	lda $4586,x	_TokCheck:	lda 	TokenBytes1,x
.4579	dd da 0d	cmp $0dda,x				cmp 	tokenBuffer,x
.457c	d0 fe		bne $457c	_TokFail:	bne 	_TokFail	 		; error.
.457e	e8		inx					inx
.457f	c9 80		cmp #$80				cmp 	#$80
.4581	d0 f3		bne $4576				bne 	_TokCheck
.4583	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.4586					TokenText1:
.4586					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0dd7					tokenHeader:
>0dd7							.fill 	3
.0dda					tokenBuffer:
>0dda							.fill 	256
.0eda					tokenBufferIndex:
>0eda							.fill 	1
.4586					Tokenise:
.4586	20 fe 45	jsr $45fe			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.4589					TokeniseASCIIZ:
.4589	20 0f 46	jsr $460f			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.458c	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.458e	8d da 0e	sta $0eda			sta 	tokenBufferIndex
.4591	a8		tay				tay 								; start pointer
.4592	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.4594	8d da 0d	sta $0dda			sta 	tokenBuffer
.4597					_TokLoop:
.4597	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4599	f0 46		beq $45e1			beq 	_TokExit 					; if zero, then exit.
.459b	c8		iny				iny 								; skip over spaces.
.459c	c9 20		cmp #$20			cmp 	#" "
.459e	f0 f7		beq $4597			beq 	_TokLoop
.45a0	88		dey				dey 								; point back to character.
.45a1	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.45a3	f0 18		beq $45bd			beq 	_TokHexConst
.45a5	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.45a7	f0 23		beq $45cc			beq 	_TokQString
.45a9	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.45ab	b0 26		bcs $45d3			bcs 	_TokPunctuation
.45ad	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.45af	b0 29		bcs $45da			bcs 	_TokIdentifier
.45b1	c9 3a		cmp #$3a			cmp 	#"9"+1
.45b3	b0 1e		bcs $45d3			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.45b5	c9 30		cmp #$30			cmp 	#"0"
.45b7	90 1a		bcc $45d3			bcc 	_TokPunctuation 			; < 0, punctuation.
.45b9	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.45bb	d0 08		bne $45c5			bne 	_TokConst
.45bd					_TokHexConst:
.45bd	c8		iny				iny									; consume token.
.45be	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.45c0	20 e7 45	jsr $45e7			jsr 	TokenWrite
.45c3	a9 10		lda #$10			lda 	#16
.45c5					_TokConst:
.45c5	20 cb 46	jsr $46cb			jsr 	TokeniseInteger
.45c8	b0 cd		bcs $4597			bcs 	_TokLoop
.45ca	90 18		bcc $45e4			bcc 	_TokFail
.45cc					_TokQString:
.45cc	20 5f 47	jsr $475f			jsr 	TokeniseString
.45cf	b0 c6		bcs $4597			bcs 	_TokLoop
.45d1	90 11		bcc $45e4			bcc 	_TokFail
.45d3					_TokPunctuation:
.45d3	20 3e 47	jsr $473e			jsr 	TokenisePunctuation
.45d6	b0 bf		bcs $4597			bcs 	_TokLoop
.45d8	90 0a		bcc $45e4			bcc 	_TokFail
.45da					_TokIdentifier:
.45da	20 3e 46	jsr $463e			jsr 	TokeniseIdentifier
.45dd	b0 b8		bcs $4597			bcs 	_TokLoop
.45df	90 03		bcc $45e4			bcc 	_TokFail
.45e1					_TokExit:
.45e1	a9 01		lda #$01			lda 	#1
.45e3	60		rts				rts
.45e4					_TokFail:
.45e4	a9 00		lda #$00			lda 	#0
.45e6	60		rts				rts
.45e7					TokenWrite:
.45e7	85 32		sta $32				sta 	tempShort 					; save XA
.45e9	48		pha				pha
.45ea	da		phx				phx
.45eb	a5 32		lda $32				lda 	tempShort
.45ed	ae da 0e	ldx $0eda			ldx 	tokenBufferIndex 			; geet index
.45f0	9d da 0d	sta $0dda,x			sta 	tokenBuffer,x 				; write byte to buffer
.45f3	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.45f5	9d db 0d	sta $0ddb,x			sta 	tokenBuffer+1,x
.45f8	ee da 0e	inc $0eda			inc 	tokenBufferIndex 			; bump index
.45fb	fa		plx				plx
.45fc	68		pla				pla
.45fd	60		rts				rts
.45fe					TokeniseMakeASCIIZ:
.45fe	a0 00		ldy #$00			ldy 	#0							; get length of string.
.4600	b1 28		lda ($28),y			lda 	(codePtr),y
.4602	a8		tay				tay
.4603	c8		iny				iny 								; +1, the NULL goes here.
.4604	a9 00		lda #$00			lda 	#0
.4606	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4608	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.460a	d0 02		bne $460e			bne 	_TMKAExit
.460c	e6 29		inc $29				inc 	codePtr+1
.460e					_TMKAExit:
.460e	60		rts				rts
.460f					TokeniseFixCase:
.460f	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4611	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.4613					_TFCFlipQ:
.4613	8a		txa				txa
.4614	49 01		eor #$01			eor 	#1
.4616	aa		tax				tax
.4617					_TFCLoop:
.4617	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4619	f0 22		beq $463d			beq 	_TFCExit 					; if zero exit.
.461b	c9 20		cmp #$20			cmp 	#32 						; if control
.461d	90 1a		bcc $4639			bcc 	_TFCControl
.461f	c8		iny				iny 								; preconsume
.4620	c9 22		cmp #$22			cmp 	#'"'
.4622	f0 ef		beq $4613			beq 	_TFCFlipQ
.4624	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.4626	90 ef		bcc $4617			bcc 	_TFCLoop
.4628	c9 7b		cmp #$7b			cmp 	#"z"+1
.462a	b0 eb		bcs $4617			bcs 	_TFCLoop
.462c	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.462e	d0 e7		bne $4617			bne 	_TFCLoop
.4630	88		dey				dey
.4631	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4633					_TFCWrite:
.4633	91 28		sta ($28),y			sta 	(codePtr),y
.4635	c8		iny				iny
.4636	4c 17 46	jmp $4617			jmp 	_TFCLoop
.4639					_TFCControl:
.4639	a9 20		lda #$20			lda 	#" "
.463b	d0 f6		bne $4633			bne 	_TFCWrite
.463d					_TFCExit:
.463d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.463e					TokeniseIdentifier:
.463e	a2 00		ldx #$00			ldx 	#0
.4640					_TICopyID:
.4640	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4642	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.4644	f0 16		beq $465c			beq 	_TICopyUnderscore
.4646	c9 2e		cmp #$2e			cmp 	#"."
.4648	f0 14		beq $465e			beq 	_TICopyIn
.464a	c9 30		cmp #$30			cmp 	#"0"
.464c	90 1b		bcc $4669			bcc 	_TIEndCopy
.464e	c9 3a		cmp #$3a			cmp 	#"9"+1
.4650	90 0c		bcc $465e			bcc 	_TICopyIn
.4652	c9 41		cmp #$41			cmp 	#"A"
.4654	90 13		bcc $4669			bcc 	_TIEndCopy
.4656	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4658	b0 0f		bcs $4669			bcs		_TIEndCopy
.465a	90 02		bcc $465e			bcc 	_TICopyIn
.465c					_TICopyUnderScore:
.465c	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.465e					_TICopyIn:
.465e	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.465f	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4662	8e cf 0a	stx $0acf			stx 	convertBuffer
.4665	c8		iny				iny 								; next character
.4666	4c 40 46	jmp $4640			jmp 	_TICopyID 					; loop round
.4669					_TIEndCopy:
.4669	a9 24		lda #$24			lda 	#"$"
.466b	20 be 46	jsr $46be			jsr 	TIDCheckCopy
.466e	a9 23		lda #$23			lda 	#"#"
.4670	20 be 46	jsr $46be			jsr 	TIDCheckCopy
.4673	a9 28		lda #$28			lda 	#"("
.4675	20 be 46	jsr $46be			jsr 	TIDCheckCopy
.4678	20 fb 44	jsr $44fb			jsr 	TokenSearch 				; is it a token
.467b	b0 3f		bcs $46bc			bcs 	_TIExit 					; if so, then exit.
.467d	5a		phy				phy
.467e	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4680	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.4683	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4686	c9 28		cmp #$28			cmp 	#"("
.4688	d0 02		bne $468c			bne 	_TINotArray
.468a	ca		dex				dex 								; yes, remove it and convert to array.
.468b	c8		iny				iny
.468c					_TINotArray:
.468c	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.468f	c9 24		cmp #$24			cmp 	#"$"
.4691	d0 03		bne $4696			bne 	_TINotString
.4693	ca		dex				dex
.4694	c8		iny				iny
.4695	c8		iny				iny
.4696					_TINotString:
.4696	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4699	c9 23		cmp #$23			cmp 	#"#"
.469b	d0 05		bne $46a2			bne 	_TINotFloat
.469d	ca		dex				dex
.469e	c8		iny				iny
.469f	c8		iny				iny
.46a0	c8		iny				iny
.46a1	c8		iny				iny
.46a2					_TINotFloat:
.46a2	e8		inx				inx 								; write end marker for identifier.
.46a3	98		tya				tya
.46a4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46a7	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.46aa	a2 01		ldx #$01			ldx 	#1
.46ac					_TIOutput:
.46ac	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.46af	29 3f		and #$3f			and 	#$3F
.46b1	48		pha				pha
.46b2	20 e7 45	jsr $45e7			jsr 	TokenWrite
.46b5	e8		inx				inx
.46b6	68		pla				pla
.46b7	c9 3a		cmp #$3a			cmp 	#$3A
.46b9	90 f1		bcc $46ac			bcc 	_TIOutput
.46bb	7a		ply				ply
.46bc					_TIExit:
.46bc	38		sec				sec 								; this can't fail.
.46bd	60		rts				rts
.46be					TIDCheckCopy:
.46be	d1 28		cmp ($28),y			cmp 	(codePtr),y
.46c0	d0 08		bne $46ca			bne 	_TIDCCExit
.46c2	e8		inx				inx
.46c3	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46c6	8e cf 0a	stx $0acf			stx 	convertBuffer
.46c9	c8		iny				iny
.46ca					_TIDCCExit:
.46ca	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.46cb					TokeniseInteger:
.46cb	85 2c		sta $2c				sta 	temp1 						; save base
.46cd	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.46cf	8e cf 0a	stx $0acf			stx 	convertBuffer
.46d2					_TIGetChars:
.46d2	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.46d4	c9 30		cmp #$30			cmp 	#"0"
.46d6	90 1f		bcc $46f7			bcc 	_TIEndGet
.46d8	c9 3a		cmp #$3a			cmp 	#"9"+1
.46da	90 10		bcc $46ec			bcc 	_TIHaveChar
.46dc	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.46de	c9 0a		cmp #$0a			cmp 	#10
.46e0	f0 15		beq $46f7			beq 	_TIEndGet
.46e2	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.46e4	c9 41		cmp #$41			cmp 	#"A"
.46e6	90 0f		bcc $46f7			bcc 	_TIEndGet
.46e8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.46ea	b0 0b		bcs $46f7			bcs 	_TIEndGet
.46ec					_TIHaveChar:
.46ec	e8		inx				inx 								; write into buffer.
.46ed	8e cf 0a	stx $0acf			stx 	convertBuffer
.46f0	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46f3	c8		iny				iny 								; next char
.46f4	4c d2 46	jmp $46d2			jmp 	_TIGetChars
.46f7					_TIEndGet:
.46f7	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.46f9	f0 1a		beq $4715			beq 	_TIFail
.46fb	5a		phy				phy
.46fc	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.46fe	85 2a		sta $2a				sta 	temp0
.4700	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4702	85 2b		sta $2b				sta 	1+(temp0)
.4704	a9 00		lda #$00			lda 	#0 							; stack level 0
.4706	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4708	a2 1a		ldx #$1a		ldx	#26
.470a	20 23 40	jsr $4023		jsr	mainHandler
.470d	7a		ply				ply
.470e	90 05		bcc $4715			bcc 	_TIFail 					; didn't convert.
.4710	20 17 47	jsr $4717			jsr 	TIRecursiveOut 				; recursive output ?
.4713	38		sec				sec
.4714	60		rts				rts
.4715					_TIFail:
.4715	18		clc				clc
.4716	60		rts				rts
.4717					TIRecursiveOut:
.4717	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4719	29 3f		and #$3f			and 	#$3F
.471b	09 40		ora #$40			ora 	#$40
.471d	48		pha				pha
.471e	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.4720	29 c0		and #$c0			and 	#$C0
.4722	05 a0		ora $a0				ora 	esInt1
.4724	05 a8		ora $a8				ora 	esInt2
.4726	05 b0		ora $b0				ora 	esInt3
.4728	f0 10		beq $473a			beq 	_TIRONoRecursion
.472a	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.472c					_TIROShift:
.472c	46 b0		lsr $b0				lsr 	esInt3
.472e	66 a8		ror $a8				ror 	esInt2
.4730	66 a0		ror $a0				ror 	esInt1
.4732	66 98		ror $98				ror 	esInt0
.4734	ca		dex				dex
.4735	d0 f5		bne $472c			bne 	_TIROShift
.4737	20 17 47	jsr $4717			jsr 	TIRecursiveOut 				; call recursively
.473a					_TIRONoRecursion:
.473a	68		pla				pla 								; pull the old bit.
.473b	4c e7 45	jmp $45e7			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.473e					TokenisePunctuation:
.473e	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4740	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4743	c8		iny				iny
.4744	b1 28		lda ($28),y			lda 	(codePtr),y
.4746	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4749	c8		iny				iny 								; Y is +2
.474a	a9 02		lda #$02			lda 	#2 							; 2 character string.
.474c	8d cf 0a	sta $0acf			sta 	convertBuffer
.474f	20 fb 44	jsr $44fb			jsr 	TokenSearch 				; search for that token.
.4752	b0 0a		bcs $475e			bcs 	_TIFound
.4754	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4757	88		dey				dey 								; Y is now +1
.4758	20 fb 44	jsr $44fb			jsr 	TokenSearch 				; search for that token.
.475b	b0 01		bcs $475e			bcs 	_TIFound
.475d	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.475e					_TIFound:
.475e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.475f					TokeniseString:
.475f	c8		iny				iny 								; skip opening quote
.4760	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4762	84 2a		sty $2a				sty 	temp0 						; save start.
.4764					_TSGetLength:
.4764	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4766	f0 21		beq $4789			beq 	_TSFail						; end of line, fail
.4768	c8		iny				iny
.4769	e8		inx				inx
.476a	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.476c	d0 f6		bne $4764			bne 	_TSGetLength
.476e	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4770	20 e7 45	jsr $45e7			jsr 	TokenWrite
.4773	8a		txa				txa 								; output length
.4774	20 e7 45	jsr $45e7			jsr 	TokenWrite
.4777	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4779	e0 00		cpx #$00			cpx 	#0 							; check ended
.477b	f0 09		beq $4786			beq 	_TSExit
.477d					_TSOutput:
.477d	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.477f	20 e7 45	jsr $45e7			jsr 	TokenWrite
.4782	c8		iny				iny
.4783	ca		dex				dex
.4784	d0 f7		bne $477d			bne 	_TSOutput
.4786					_TSExit:
.4786	c8		iny				iny 								; skip ending quote
.4787	38		sec				sec 								; return CS.
.4788	60		rts				rts
.4789					_TSFail:
.4789	18		clc				clc
.478a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.478b					TokenTableAddress:
>478b	93 47						.word 	Group0Text
>478d	6b 49						.word 	Group1Text
>478f	b8 4a						.word 	Group2Text
>4791	09 4b						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4793					Group0Text:
>4793	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4797	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>479a	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>479e	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>47a1	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>47a4	01 be					.byte $01,$be                          ; $8b >
>47a6	01 bc					.byte $01,$bc                          ; $8c <
>47a8	01 bd					.byte $01,$bd                          ; $8d =
>47aa	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>47ad	01 ab					.byte $01,$ab                          ; $8f +
>47af	01 ad					.byte $01,$ad                          ; $90 -
>47b1	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>47b4	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>47b7	01 aa					.byte $01,$aa                          ; $93 *
>47b9	01 af					.byte $01,$af                          ; $94 /
>47bb	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>47bf	01 de					.byte $01,$de                          ; $96 ^
>47c1	01 a1					.byte $01,$a1                          ; $97 !
>47c3	01 bf					.byte $01,$bf                          ; $98 ?
>47c5	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>47cc	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>47d2	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>47d6	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>47d9	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>47e1	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>47e7	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>47ec	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>47f1	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>47f6	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>47fc	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>4804	01 a8					.byte $01,$a8                          ; $a4 (
>4806	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>480b	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>4810	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4815	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>481d	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4822	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4827	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>482d	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4832	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4837	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>483c	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4843	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>484a	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>484f	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4856	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>485d	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4863	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>486a	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4870	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4878	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>487e	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4883	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4889	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>488f	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4895	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>489a	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>489f	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>48a6	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>48ad	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>48b5	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>48bd	01 c0					.byte $01,$c0                          ; $c3 @
>48bf	01 fe					.byte $01,$fe                          ; $c4 ~
>48c1	01 a6					.byte $01,$a6                          ; $c5 &
>48c3	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>48c9	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>48d1	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>48d5	01 a9					.byte $01,$a9                          ; $c9 )
>48d7	01 ba					.byte $01,$ba                          ; $ca :
>48d9	01 ac					.byte $01,$ac                          ; $cb ,
>48db	01 bb					.byte $01,$bb                          ; $cc ;
>48dd	01 a7					.byte $01,$a7                          ; $cd '
>48df	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>48e2	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>48e7	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>48ec	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>48f2	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>48f6	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>48fa	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>48fe	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>4904	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4909	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>490d	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4913	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4918	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>491e	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4921	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4926	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>492d	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4932	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4937	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>493c	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4940	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4946	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>494a	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4951	01 ae					.byte $01,$ae                          ; $e5 .
>4953	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>4958	01 a3					.byte $01,$a3                          ; $e7 #
>495a	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4960	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>4965	04 54 59 50 c5				.byte $04,$54,$59,$50,$c5              ; $ea type
>496a	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.496b					Group1Text:
>496b	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4970	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4975	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>497a	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>497e	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4984	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4988	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>498d	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4995	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4999	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>499e	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>49a3	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>49a8	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>49ae	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>49b5	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>49b9	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>49bf	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>49c3	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>49c7	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>49cb	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>49cf	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>49d3	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>49d7	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>49db	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>49df	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>49e3	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>49e7	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>49eb	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>49ef	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>49f3	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>49f7	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>49fb	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>49ff	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>4a03	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4a07	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4a0b	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4a0f	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>4a13	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4a17	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4a1b	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4a1f	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4a23	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4a27	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4a2b	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4a2f	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4a33	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4a37	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4a3b	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4a3f	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4a43	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4a47	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4a4b	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4a4f	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4a53	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4a57	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4a5b	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4a5f	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4a63	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4a67	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4a6b	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4a6f	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4a73	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4a77	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4a7b	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4a7f	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4a83	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4a87	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4a8b	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4a8f	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4a93	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4a97	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4a9b	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4a9f	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4aa3	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4aa7	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4aab	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4aaf	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4ab3	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4ab7	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4ab8					Group2Text:
>4ab8	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4abe	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4ac4	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4aca	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4acf	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4ad7	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4ade	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>4ae2	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>4ae7	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>4aed	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>4af2	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>4af7	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4afc	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>4b02	05 53 4f 55 4e c4			.byte $05,$53,$4f,$55,$4e,$c4          ; $93 sound
>4b08	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4b09					Group3Text:
>4b09	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4b10	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4b17	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4b1f	58 a8
>4b21	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4b29	59 a8
>4b2b	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4b30	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4b37	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4b3e	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4b45	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4b4c	08 50 4c 41 59 49 4e 47			.byte $08,$50,$4c,$41,$59,$49,$4e,$47,$a8 ; $8f playing(
>4b54	a8
>4b55	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4b56					tokeniserHandler:
.4b56	7c 59 4b	jmp ($4b59,x)			jmp 	(tokeniserVectors,x)
.4b59					tokeniserVectors:
>4b59	65 4b					.word _DummyControlHandler ; index 0
>4b5b	f0 42					.word Detokenise           ; index 2
>4b5d	e4 42					.word ListLine             ; index 4
>4b5f	66 45					.word TokTest              ; index 6
>4b61	86 45					.word Tokenise             ; index 8
>4b63	89 45					.word TokeniseASCIIZ       ; index 10
.4b65					_DummyControlHandler:
.4b65	60		rts			rts

;******  Return to file: basic.asm

.4b66					section_end_tokeniser:
.4b66					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4b66					AccessArray:
.4b66	da		phx				phx
.4b67	e8		inx				inx
.4b68	20 2c 4c	jsr $4c2c			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4b6b	fa		plx				plx
.4b6c	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4b6e	85 2a		sta $2a				sta 	temp0
.4b70	b5 a0		lda $a0,x			lda 	esInt1,x
.4b72	85 2b		sta $2b				sta 	temp0+1
.4b74	da		phx				phx
.4b75	5a		phy				phy
.4b76					_AAFollow:
.4b76	a0 00		ldy #$00			ldy 	#0
.4b78	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b7a	48		pha				pha
.4b7b	c8		iny				iny
.4b7c	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b7e	85 2b		sta $2b				sta 	temp0+1
.4b80	68		pla				pla
.4b81	85 2a		sta $2a				sta 	temp0
.4b83	e8		inx				inx 								; advance to next stack slot.
.4b84	a0 00		ldy #$00			ldy 	#0
.4b86	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4b88	d5 98		cmp $98,x			cmp 	esInt0,x
.4b8a	c8		iny				iny
.4b8b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4b8d	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4b8f	29 7f		and #$7f			and 	#$7F
.4b91	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4b93	90 4e		bcc $4be3			bcc 	_AABadIndex 				; failed on index if max index < required.
.4b95	18		clc				clc
.4b96	a5 2a		lda $2a				lda 	temp0
.4b98	69 02		adc #$02			adc 	#2
.4b9a	85 2a		sta $2a				sta 	temp0
.4b9c	90 02		bcc $4ba0			bcc 	_AANoCarry
.4b9e	e6 2b		inc $2b				inc 	temp0+1
.4ba0					_AANoCarry:
.4ba0	b5 98		lda $98,x			lda 	esInt0,x
.4ba2	85 2e		sta $2e				sta 	temp2
.4ba4	b5 a0		lda $a0,x			lda 	esInt1,x
.4ba6	85 2f		sta $2f				sta 	temp2+1
.4ba8	ac dd 0e	ldy $0edd			ldy 	varType
.4bab	b9 86 4c	lda $4c86,y			lda 	CAActualSize-$3A,y
.4bae	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4bb0	30 02		bmi $4bb4			bmi 	_AANotPointer
.4bb2	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4bb4					_AANotPointer:
.4bb4	20 30 4d	jsr $4d30			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4bb7	18		clc				clc
.4bb8	a5 2a		lda $2a				lda 	temp0
.4bba	65 2e		adc $2e				adc 	temp2
.4bbc	85 2a		sta $2a				sta 	temp0
.4bbe	a5 2b		lda $2b				lda 	temp0+1
.4bc0	65 2f		adc $2f				adc 	temp2+1
.4bc2	85 2b		sta $2b				sta 	temp0+1
.4bc4	b5 91		lda $91,x			lda 	esType+1,x
.4bc6	30 07		bmi $4bcf			bmi 	_AAUsedAllIndices
.4bc8	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4bca	10 12		bpl $4bde			bpl 	_AABadDepth 				; no, too many indexes.
.4bcc	4c 76 4b	jmp $4b76			jmp 	_AAFollow 					; otherwise follow them.
.4bcf					_AAUsedAllIndices:
.4bcf	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4bd1	30 0b		bmi $4bde			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4bd3	7a		ply				ply
.4bd4	fa		plx				plx
.4bd5	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4bd7	95 98		sta $98,x			sta 	esInt0,x
.4bd9	a5 2b		lda $2b				lda 	temp0+1
.4bdb	95 a0		sta $a0,x			sta 	esInt1,x
.4bdd	60		rts				rts
.4bde					_AABadDepth:
.4bde	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4be0	20 27 15	jsr $1527		jsr	errorHandler
.4be3					_AABadIndex:
.4be3	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4be5	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0edb					elementSize:
>0edb							.fill	 1
.4be8					CreateArray:
.4be8	20 bd 4d	jsr $4dbd			jsr 	AccessSetup 				; set up the basic stuff, hashtables and so on.
.4beb	ad dd 0e	lda $0edd			lda 	varType 					; is the variable type an array
.4bee	4a		lsr a				lsr 	a
.4bef	90 36		bcc $4c27			bcc 	CANotArray 					; no, cause an error.
.4bf1	20 bf 4e	jsr $4ebf			jsr 	FindVariable 				; does the variable exist already
.4bf4	b0 2c		bcs $4c22			bcs 	CAFound 					; if so, error cannot redefine it.
.4bf6	20 f8 4d	jsr $4df8			jsr 	CreateVariable 				; create the variable entry.
.4bf9	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4bfb	48		pha				pha
.4bfc	a5 2b		lda $2b				lda 	temp0+1
.4bfe	48		pha				pha
.4bff	a2 00		ldx #$00			ldx 	#0
.4c01	20 2c 4c	jsr $4c2c			jsr 	GetArrayDimensions 			; get the array dimensions
.4c04	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4c06	20 5c 4c	jsr $4c5c			jsr 	CreateArrayLevel 			; level to YA
.4c09	aa		tax				tax 								; level now in YX
.4c0a	68		pla				pla 								; get address back to temp0 to write.
.4c0b	85 2b		sta $2b				sta 	temp0+1
.4c0d	68		pla				pla
.4c0e	85 2a		sta $2a				sta 	temp0
.4c10	98		tya				tya 								; write YX there (address in original record)
.4c11	a0 06		ldy #$06			ldy 	#6
.4c13	91 2a		sta ($2a),y			sta 	(temp0),y
.4c15	88		dey				dey
.4c16	8a		txa				txa
.4c17	91 2a		sta ($2a),y			sta 	(temp0),y
.4c19	ac de 0e	ldy $0ede			ldy 	varEnd 						; restore Y and exit.
.4c1c	60		rts				rts
.4c1d					CASize:
.4c1d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4c1f	20 27 15	jsr $1527		jsr	errorHandler
.4c22					CAFound:
.4c22	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4c24	20 27 15	jsr $1527		jsr	errorHandler
.4c27					CANotArray:
.4c27	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4c29	20 27 15	jsr $1527		jsr	errorHandler
.4c2c					GetArrayDimensions:
.4c2c	ad dd 0e	lda $0edd			lda 	varType 					; push variable type on the stack.
.4c2f	48		pha				pha
.4c30	ac de 0e	ldy $0ede			ldy 	varEnd
.4c33					_CAGetDimensions:
.4c33	8a		txa				txa 								; get the next level
.4c34	a2 0a		ldx #$0a		ldx	#10
.4c36	20 23 40	jsr $4023		jsr	mainHandler
.4c39	aa		tax				tax
.4c3a	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4c3c	29 e0		and #$e0			and 	#$E0
.4c3e	15 a8		ora $a8,x			ora 	esInt2,x
.4c40	15 b0		ora $b0,x			ora 	esInt3,x
.4c42	d0 d9		bne $4c1d			bne 	CASize
.4c44	e8		inx				inx 								; next level.
.4c45	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4c47	c8		iny				iny
.4c48	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4c4a	f0 e7		beq $4c33			beq 	_CAGetDimensions
.4c4c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4c4e	d0 cd		bne $4c1d			bne 	CASize
.4c50	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4c52	95 90		sta $90,x			sta 	esType,x 					; dimensions there are, it marks the end.
.4c54	68		pla				pla 								; restore the variable type ($3A-$3F)
.4c55	8d dd 0e	sta $0edd			sta 	varType
.4c58	8c de 0e	sty $0ede			sty 	varEnd 						; save exit Y value, after dimensions
.4c5b	60		rts				rts
.4c5c					CreateArrayLevel:
.4c5c	ac dd 0e	ldy $0edd			ldy 	varType
.4c5f	b9 86 4c	lda $4c86,y			lda 	CAActualSize-$3A,y 			; $3A is the first type marker.
.4c62	8d db 0e	sta $0edb			sta 	elementSize 				; get element size this level.
.4c65	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4c67	30 05		bmi $4c6e			bmi 	_CANotPointer 				; then its values, keep elementsize
.4c69	a9 02		lda #$02			lda 	#2 							; use array of pointers, each element is 2.
.4c6b	8d db 0e	sta $0edb			sta 	elementSize
.4c6e					_CANotPointer:
.4c6e	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4c70	85 2a		sta $2a				sta 	temp0
.4c72	48		pha				pha
.4c73	a5 36		lda $36				lda 	lowMemory+1
.4c75	85 2b		sta $2b				sta 	temp0+1
.4c77	48		pha				pha
.4c78	20 f9 4c	jsr $4cf9			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4c7b	a0 00		ldy #$00			ldy 	#0
.4c7d	b5 98		lda $98,x			lda 	esInt0,x
.4c7f	91 2a		sta ($2a),y			sta 	(temp0),y
.4c81	c8		iny				iny
.4c82	b5 a0		lda $a0,x			lda 	esInt1,x
.4c84	91 2a		sta ($2a),y			sta 	(temp0),y
.4c86	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4c88	30 06		bmi $4c90			bmi 	_CALNotLast
.4c8a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4c8c	09 80		ora #$80			ora 	#$80
.4c8e	91 2a		sta ($2a),y			sta 	(temp0),y
.4c90					_CALNotLast:
.4c90	a9 02		lda #$02			lda 	#2
.4c92	20 b6 4c	jsr $4cb6			jsr 	_CALAddTemp0
.4c95	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4c97	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4c99	b5 a0		lda $a0,x			lda 	esInt1,x
.4c9b	95 b0		sta $b0,x			sta 	esInt3,x
.4c9d					_CALClear:
.4c9d	20 c6 4c	jsr $4cc6			jsr 	EraseOneElement
.4ca0	ad db 0e	lda $0edb			lda 	elementSize 				; move to next element
.4ca3	20 b6 4c	jsr $4cb6			jsr 	_CALAddTemp0
.4ca6	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4ca8	d0 02		bne $4cac			bne 	_CALNoBorrow
.4caa	d6 b0		dec $b0,x			dec 	esInt3,x
.4cac					_CALNoBorrow:
.4cac	d6 a8		dec $a8,x			dec 	esInt2,x
.4cae	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4cb0	10 eb		bpl $4c9d			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4cb2	68		pla				pla 								; restore the start of this into YA.
.4cb3	a8		tay				tay
.4cb4	68		pla				pla
.4cb5	60		rts				rts
.4cb6					_CALAddTemp0:
.4cb6	18		clc				clc
.4cb7	65 2a		adc $2a				adc 	temp0
.4cb9	85 2a		sta $2a				sta 	temp0
.4cbb	90 02		bcc $4cbf			bcc 	_CALANoCarry
.4cbd	e6 2b		inc $2b				inc 	temp0+1
.4cbf					_CALANoCarry:
.4cbf	60		rts				rts
.4cc0					CAActualSize:
>4cc0	04 04						.byte 	VarISize,VarISize
>4cc2	02 02						.byte 	VarSSize,VarSSize
>4cc4	06 06						.byte 	VarFSize,VarFSize
.4cc6					EraseOneElement:
.4cc6	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4cc8	10 09		bpl $4cd3			bpl 	_EOESubArray
.4cca	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4ccc	ad dd 0e	lda $0edd			lda 	varType
.4ccf	20 61 4e	jsr $4e61			jsr 	ZeroTemp0Y
.4cd2	60		rts				rts
.4cd3					_EOESubArray:
.4cd3	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4cd5	48		pha				pha
.4cd6	a5 2b		lda $2b				lda 	temp0+1
.4cd8	48		pha				pha
.4cd9	ad db 0e	lda $0edb			lda 	elementSize 				; save element size
.4cdc	48		pha				pha
.4cdd	e8		inx				inx 								; create at next level
.4cde	20 5c 4c	jsr $4c5c			jsr 	CreateArrayLevel
.4ce1	ca		dex				dex
.4ce2	85 32		sta $32				sta 	tempShort 					; save A
.4ce4	68		pla				pla  								; restore element size.
.4ce5	8d db 0e	sta $0edb			sta 	elementSize
.4ce8	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4ce9	85 2b		sta $2b				sta 	temp0+1
.4ceb	68		pla				pla
.4cec	85 2a		sta $2a				sta 	temp0
.4cee	98		tya				tya 								; store Y/A there
.4cef	a0 01		ldy #$01			ldy 	#1
.4cf1	91 2a		sta ($2a),y			sta 	(temp0),y
.4cf3	a5 32		lda $32				lda 	tempShort
.4cf5	88		dey				dey
.4cf6	91 2a		sta ($2a),y			sta 	(temp0),y
.4cf8	60		rts				rts
.4cf9					AllocateArraySpace:
.4cf9	18		clc				clc 								; element count + 1 => temp2.
.4cfa	b5 98		lda $98,x			lda 	esInt0,x
.4cfc	69 01		adc #$01			adc 	#1
.4cfe	85 2e		sta $2e				sta 	temp2
.4d00	b5 a0		lda $a0,x			lda 	esInt1,x
.4d02	69 00		adc #$00			adc 	#0
.4d04	85 2f		sta $2f				sta 	temp2+1
.4d06	ad db 0e	lda $0edb			lda 	elementSize 				; bytes per element
.4d09	20 30 4d	jsr $4d30			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4d0c	18		clc				clc 								; add 2 for 'max element' byte.
.4d0d	a5 2e		lda $2e				lda 	temp2
.4d0f	69 02		adc #$02			adc 	#2
.4d11	85 2e		sta $2e				sta 	temp2
.4d13	90 02		bcc $4d17			bcc 	_AASNoCarry
.4d15	e6 2f		inc $2f				inc 	temp2+1
.4d17					_AASNoCarry:
.4d17	18		clc				clc 								; add to low memory, allocating space.
.4d18	a5 35		lda $35				lda 	lowMemory
.4d1a	65 2e		adc $2e				adc 	temp2
.4d1c	85 35		sta $35				sta 	lowMemory
.4d1e	a5 36		lda $36				lda 	lowMemory+1
.4d20	65 2f		adc $2f				adc 	temp2+1
.4d22	85 36		sta $36				sta 	lowMemory+1
.4d24	b0 05		bcs $4d2b			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4d26	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4d28	b0 01		bcs $4d2b			bcs 	_AASFail
.4d2a	60		rts				rts
.4d2b					_AASFail:
.4d2b	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4d2d	20 27 15	jsr $1527		jsr	errorHandler
.4d30					MultiplyTemp2ByA:
.4d30	48		pha				pha
.4d31	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4d33	85 30		sta $30				sta 	temp3
.4d35	a5 2f		lda $2f				lda 	temp2+1
.4d37	85 31		sta $31				sta 	temp3+1
.4d39	68		pla				pla
.4d3a	06 2e		asl $2e				asl 	temp2 						; double it.
.4d3c	26 2f		rol $2f				rol 	temp2+1
.4d3e	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4d40	f0 15		beq $4d57			beq 	_MTBAExit
.4d42	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4d44	d0 0d		bne $4d53			bne 	_MTBANotFloat
.4d46	18		clc				clc 								; so this will make it x 3
.4d47	a5 2e		lda $2e				lda 	temp2
.4d49	65 30		adc $30				adc 	temp3
.4d4b	85 2e		sta $2e				sta 	temp2
.4d4d	a5 2f		lda $2f				lda 	temp2+1
.4d4f	65 31		adc $31				adc 	temp3+1
.4d51	85 2f		sta $2f				sta 	temp2+1
.4d53					_MTBANotFloat:
.4d53	06 2e		asl $2e				asl 	temp2 						; double it.
.4d55	26 2f		rol $2f				rol 	temp2+1
.4d57					_MTBAExit:
.4d57	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0edc					varHash:
>0edc							.fill	1
.0edd					varType:
>0edd							.fill 	1
.0ede					varEnd:
>0ede							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4d58					AccessVariable:
.4d58	aa		tax				tax 								; stack in X
.4d59	c8		iny				iny									; look at second character
.4d5a	b1 28		lda ($28),y			lda 	(codePtr),y
.4d5c	88		dey				dey
.4d5d	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4d5f	d0 15		bne $4d76			bne 	_AVLong 					; no, always use the hash tables.
.4d61	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4d63	38		sec				sec 	 							; make it 0-25
.4d64	e9 01		sbc #$01			sbc 	#1
.4d66	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4d67	0a		asl a				asl 	a
.4d68	95 98		sta $98,x			sta 	esInt0,x
.4d6a	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4d6c	95 a0		sta $a0,x			sta 	esInt1,x
.4d6e	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4d70	95 90		sta $90,x			sta 	esType,x
.4d72	c8		iny				iny 								; skip over the variable reference in the code.
.4d73	c8		iny				iny  								; (1 letter, 1 type)
.4d74	8a		txa				txa 								; stack in A to return.
.4d75	60		rts				rts
.4d76					_AVLong:
.4d76	da		phx				phx
.4d77	20 bd 4d	jsr $4dbd			jsr 	AccessSetup 				; set up the basic information we need for later
.4d7a	20 bf 4e	jsr $4ebf			jsr 	FindVariable 				; does the variable exist already ?
.4d7d	b0 0e		bcs $4d8d			bcs 	_AVFound 					; yes, then its found
.4d7f	ad dd 0e	lda $0edd			lda 	varType 					; otherwise, is the variable type an array
.4d82	4a		lsr a				lsr 	a
.4d83	90 05		bcc $4d8a			bcc 	_AVCanCreate 				; if not, we can autocreate
.4d85	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4d87	20 27 15	jsr $1527		jsr	errorHandler
.4d8a					_AVCanCreate:
.4d8a	20 f8 4d	jsr $4df8			jsr 	CreateVariable 				; variable does not exist, create it.
.4d8d					_AVFound:
.4d8d	fa		plx				plx
.4d8e	18		clc				clc 								; copy temp0 (variable record address)
.4d8f	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4d91	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4d93	95 98		sta $98,x			sta 	esInt0,x
.4d95	a5 2b		lda $2b				lda 	temp0+1
.4d97	69 00		adc #$00			adc 	#0
.4d99	95 a0		sta $a0,x			sta 	esInt1,x
.4d9b	a9 00		lda #$00			lda 	#0
.4d9d	95 a8		sta $a8,x			sta 	esInt2,x
.4d9f	95 b0		sta $b0,x			sta 	esInt3,x
.4da1	ac dd 0e	ldy $0edd			ldy 	varType 					; get the type ID from the type.
.4da4	b9 7d 4d	lda $4d7d,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4da7	95 90		sta $90,x			sta 	esType,x
.4da9	ac de 0e	ldy $0ede			ldy 	varEnd 						; restore Y
.4dac	ad dd 0e	lda $0edd			lda 	VarType 					; get variable type, put LSB into C
.4daf	4a		lsr a				lsr 	a
.4db0	90 03		bcc $4db5			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4db2	20 66 4b	jsr $4b66			jsr 	AccessArray 				; array lookup. if LSB was set.
.4db5					_AVNotArray:
.4db5	8a		txa				txa 								; return stack in A and return
.4db6	60		rts				rts
.4db7					_AVTypeTable:
>4db7	80 80						.byte 	$80,$80						; integer
>4db9	c0 c0						.byte 	$C0,$C0 					; string
>4dbb	81 81						.byte 	$81,$81 					; float
.4dbd					AccessSetup:
.4dbd	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4dbf	8d dc 0e	sta $0edc			sta 	varHash
.4dc2	5a		phy				phy
.4dc3	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4dc5	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4dc7	b0 0b		bcs $4dd4			bcs 	_ASComplete
.4dc9	18		clc				clc 								; add to the hash. Might improve this.
.4dca	6d dc 0e	adc $0edc			adc 	varHash
.4dcd	8d dc 0e	sta $0edc			sta 	varHash
.4dd0	c8		iny				iny 								; next character
.4dd1	4c c3 4d	jmp $4dc3			jmp 	_ASLoop
.4dd4					_ASComplete:
.4dd4	8d dd 0e	sta $0edd			sta 	varType 					; save variable type byte
.4dd7	c8		iny				iny
.4dd8	8c de 0e	sty $0ede			sty 	varEnd 						; save the ending position.
.4ddb	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4ddc	e9 3a		sbc #$3a			sbc 	#$3A
.4dde	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4ddf	0a		asl a				asl 	a
.4de0	0a		asl a				asl 	a
.4de1	0a		asl a				asl 	a 							; 2 bytes/word
.4de2	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4de4	ad dc 0e	lda $0edc			lda 	varHash 					; get hash
.4de7	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4de9	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4dea	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4dec	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4dee	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4df0	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4df2	69 00		adc #$00			adc 	#0
.4df4	85 3c		sta $3c				sta 	hashList+1
.4df6	7a		ply				ply
.4df7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4df8					CreateVariable:
.4df8	98		tya				tya 								; push Y on the stack twice.
.4df9	48		pha				pha									; position in code of the new variable.
.4dfa	48		pha				pha
.4dfb	ae dd 0e	ldx $0edd			ldx 	varType 					; get var type 0-5 from the var type
.4dfe	bd 21 4e	lda $4e21,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4e01	48		pha				pha 								; save length
.4e02	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4e04	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4e06	a5 36		lda $36				lda 	lowMemory+1
.4e08	85 2b		sta $2b				sta 	temp0+1
.4e0a	68		pla				pla 								; get length
.4e0b	18		clc				clc 								; add to low memory.
.4e0c	65 35		adc $35				adc 	lowMemory
.4e0e	85 35		sta $35				sta 	lowMemory
.4e10	90 08		bcc $4e1a			bcc 	_CVNoCarry
.4e12	e6 36		inc $36				inc 	lowMemory+1
.4e14	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4e16	c5 34		cmp $34				cmp 	highMemory+1
.4e18	b0 3c		bcs $4e56			bcs 	_CVMemory
.4e1a					_CVNoCarry:
.4e1a	ad dc 0e	lda $0edc			lda 	varHash 					; store hash at offset 4.
.4e1d	a0 04		ldy #$04			ldy 	#4
.4e1f	91 2a		sta ($2a),y			sta 	(temp0),y
.4e21	68		pla				pla 								; offset, work out where the variable name is.
.4e22	18		clc				clc
.4e23	65 28		adc $28				adc 	codePtr
.4e25	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4e27	91 2a		sta ($2a),y			sta 	(temp0),y
.4e29	a5 29		lda $29				lda 	codePtr+1
.4e2b	69 00		adc #$00			adc 	#0
.4e2d	c8		iny				iny
.4e2e	91 2a		sta ($2a),y			sta 	(temp0),y
.4e30	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4e33	b0 03		bcs $4e38			bcs 	_CVNotImmediate
.4e35	20 95 4e	jsr $4e95			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4e38					_CVNotImmediate:
.4e38	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4e3a	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4e3c	91 2a		sta ($2a),y			sta 	(temp0),y
.4e3e	c8		iny				iny
.4e3f	b1 3b		lda ($3b),y			lda 	(hashList),y
.4e41	91 2a		sta ($2a),y			sta 	(temp0),y
.4e43	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4e45	91 3b		sta ($3b),y			sta 	(hashList),y
.4e47	88		dey				dey
.4e48	a5 2a		lda $2a				lda 	temp0
.4e4a	91 3b		sta ($3b),y			sta 	(hashList),y
.4e4c	ad dd 0e	lda $0edd			lda 	varType 					; type in A
.4e4f	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4e51	20 61 4e	jsr $4e61			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4e54	7a		ply				ply
.4e55	60		rts				rts
.4e56					_CVMemory:
.4e56	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4e58	20 27 15	jsr $1527		jsr	errorHandler
>4e5b	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4e5d	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4e5f	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4e61					ZeroTemp0Y:
.4e61	4a		lsr a				lsr 	a 							; bit 0 in carry
.4e62	0a		asl a				asl 	a
.4e63	b0 17		bcs $4e7c			bcs 	_ZTExit 					; we don't initialise arrays.
.4e65	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4e67	f0 14		beq $4e7d			beq 	_ZTWriteNullString 			; write "" string
.4e69	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4e6b	f0 20		beq $4e8d			beq 	_ZTWriteFloat
.4e6d	5a		phy				phy
.4e6e	a9 00		lda #$00			lda 	#0
.4e70	91 2a		sta ($2a),y			sta 	(temp0),y
.4e72	c8		iny				iny
.4e73	91 2a		sta ($2a),y			sta 	(temp0),y
.4e75	c8		iny				iny
.4e76	91 2a		sta ($2a),y			sta 	(temp0),y
.4e78	c8		iny				iny
.4e79	91 2a		sta ($2a),y			sta 	(temp0),y
.4e7b	7a		ply				ply
.4e7c					_ZTExit:
.4e7c	60		rts				rts
.4e7d					_ZTWriteNullString:
.4e7d	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4e7f	8d ce 0a	sta $0ace			sta 	NullString
.4e82	a9 ce		lda #$ce			lda 	#NullString & $FF
.4e84	91 2a		sta ($2a),y			sta 	(temp0),y
.4e86	a9 0a		lda #$0a			lda 	#NullString >> 8
.4e88	c8		iny				iny
.4e89	91 2a		sta ($2a),y			sta 	(temp0),y
.4e8b	88		dey				dey
.4e8c	60		rts				rts
.4e8d					_ZTWriteFloat:
.4e8d	da		phx				phx
.4e8e	a2 20		ldx #$20		ldx	#32
.4e90	20 d6 27	jsr $27d6		jsr	floatingpointHandler
.4e93	fa		plx				plx
.4e94	60		rts				rts
.4e95					CloneVariableName:
.4e95	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4e97	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e99	85 2e		sta $2e				sta 	temp2
.4e9b	c8		iny				iny
.4e9c	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e9e	85 2f		sta $2f				sta 	temp2+1
.4ea0	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4ea2	91 2a		sta ($2a),y			sta 	(temp0),y
.4ea4	88		dey				dey
.4ea5	a5 35		lda $35				lda 	lowMemory
.4ea7	91 2a		sta ($2a),y			sta 	(temp0),y
.4ea9	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4eab					_CVNCopy:
.4eab	b1 2e		lda ($2e),y			lda		(temp2),y
.4ead	91 35		sta ($35),y			sta 	(lowMemory),y
.4eaf	c8		iny				iny
.4eb0	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4eb2	90 f7		bcc $4eab			bcc 	_CVNCopy
.4eb4	98		tya				tya 								; add Y to low memory
.4eb5	18		clc				clc
.4eb6	65 35		adc $35				adc 	lowMemory
.4eb8	85 35		sta $35				sta 	lowMemory
.4eba	90 02		bcc $4ebe			bcc 	_CVNNoCarry
.4ebc	e6 36		inc $36				inc 	lowMemory+1
.4ebe					_CVNNoCarry:
.4ebe	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4ebf					FindVariable:
.4ebf	5a		phy				phy
.4ec0	98		tya				tya 								; point temp2 to the actual name
.4ec1	18		clc				clc 								; in memory of the variable being created
.4ec2	65 28		adc $28				adc 	codePtr
.4ec4	85 2e		sta $2e				sta 	temp2
.4ec6	a5 29		lda $29				lda 	codePtr+1
.4ec8	69 00		adc #$00			adc 	#0
.4eca	85 2f		sta $2f				sta 	temp2+1
.4ecc	a0 00		ldy #$00			ldy 	#0
.4ece	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4ed0	85 2a		sta $2a				sta 	temp0
.4ed2	a5 3c		lda $3c				lda 	hashList+1
.4ed4	85 2b		sta $2b				sta 	temp0+1
.4ed6	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4ed8	b1 2a		lda ($2a),y			lda 	(temp0),y
.4eda	f0 2b		beq $4f07			beq 	_FVFail
.4edc	aa		tax				tax
.4edd	88		dey				dey		 							; get LSB
.4ede	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ee0	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4ee2	86 2b		stx $2b				stx 	temp0+1
.4ee4	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4ee6	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ee8	cd dc 0e	cmp $0edc			cmp 	varHash
.4eeb	d0 e9		bne $4ed6			bne 	_FVNext 					; if not, no point in checking the name.
.4eed	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4eee	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ef0	85 2d		sta $2d				sta 	temp1+1
.4ef2	88		dey				dey
.4ef3	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ef5	85 2c		sta $2c				sta 	temp1
.4ef7	a0 00		ldy #$00			ldy 	#0
.4ef9					_FVCheck:
.4ef9	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4efb	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4efd	d0 d7		bne $4ed6			bne 	_FVNext		 				; fail if different.
.4eff	c8		iny				iny
.4f00	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4f02	90 f5		bcc $4ef9			bcc 	_FVCheck
.4f04	7a		ply				ply
.4f05	38		sec				sec
.4f06	60		rts				rts
.4f07					_FVFail:
.4f07	7a		ply				ply
.4f08	18		clc				clc
.4f09	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4f0a					HashTableReset:
.4f0a	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4f0c	a9 00		lda #$00			lda 	#0
.4f0e					_HTRClear:
.4f0e	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4f11	ca		dex				dex
.4f12	d0 fa		bne $4f0e			bne 	_HTRClear
.4f14	60		rts				rts

;******  Return to file: variable/variable.asm

.4f15					variableHandler:
.4f15	7c 18 4f	jmp ($4f18,x)			jmp 	(variableVectors,x)
.4f18					variableVectors:
>4f18	20 4f					.word _DummyControlHandler ; index 0
>4f1a	58 4d					.word AccessVariable       ; index 2
>4f1c	e8 4b					.word CreateArray          ; index 4
>4f1e	0a 4f					.word HashTableReset       ; index 6
.4f20					_DummyControlHandler:
.4f20	60		rts			rts

;******  Return to file: basic.asm

.4f21					section_end_variable:
.4f21					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0edf					endStorage:
>4f21							.align 	256
.5000					programMemory:
>4fff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.5000					section_end_footer:

;******  End of listing
