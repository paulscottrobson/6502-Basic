
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Sat Mar 20 08:02:10 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	22 3a						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 42		lda #$42			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 bf 14	jsr $14bf		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 0d 1c	jsr $1c0d		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 6f 3d	jsr $3d6f		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	8a		txa				txa
.1030	95 50		sta $50,x			sta 	esInt0,x
.1032	95 58		sta $58,x			sta 	esInt1,x
.1034	95 60		sta $60,x			sta 	esInt2,x
.1036	95 68		sta $68,x			sta 	esInt3,x
.1038	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.103a	aa		tax				tax
.103b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.103d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.103f	f0 41		beq $1082			beq 	_AGOExit
.1041	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1043	f0 3d		beq $1082			beq 	_AGOExit
.1045	c8		iny				iny 								; consume the token
.1046	a9 00		lda #$00			lda 	#AMD_IMM
.1048	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.104a	f0 2d		beq $1079			beq		_AGOEvalExit 				; with an operand.
.104c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.104e	f0 40		beq $1090			beq 	_AGOIndirect
.1050	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1052	d0 0b		bne $105f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1054	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1056	c8		iny				iny
.1057	aa		tax				tax
.1058	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.105a	e0 3a		cpx #$3a			cpx 	#$3A
.105c	f0 24		beq $1082			beq 	_AGOExit
.105e	88		dey				dey 								; unpick 2 iny
.105f					_AGOZeroPage1:
.105f	88		dey				dey
.1060	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1062	a2 08		ldx #$08		ldx	#8
.1064	20 9e 32	jsr $329e		jsr	mainHandler
.1067	20 bf 10	jsr $10bf			jsr 	AsmGetIndexing
.106a	a9 01		lda #$01			lda 	#AMD_ZERO
.106c	90 14		bcc $1082			bcc 	_AGOExit
.106e	a9 05		lda #$05			lda 	#AMD_ZEROX
.1070	e0 00		cpx #$00			cpx 	#0
.1072	f0 0e		beq $1082			beq 	_AGOExit
.1074	a9 09		lda #$09			lda 	#AMD_ZEROY
.1076	4c 82 10	jmp $1082			jmp 	_AGOExit
.1079					_AGOEvalExit:
.1079	48		pha				pha
.107a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.107c	a2 08		ldx #$08		ldx	#8
.107e	20 9e 32	jsr $329e		jsr	mainHandler
.1081	68		pla				pla
.1082					_AGOExit:
.1082	48		pha				pha 								; save the mode
.1083	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.1085	05 68		ora $68				ora 	esInt3
.1087	d0 02		bne $108b			bne 	_AGOValue
.1089	68		pla				pla
.108a	60		rts				rts
.108b					_AGOValue:
.108b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.108d	20 e0 14	jsr $14e0		jsr	errorHandler
.1090					_AGOIndirect:
.1090	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1092	a2 08		ldx #$08		ldx	#8
.1094	20 9e 32	jsr $329e		jsr	mainHandler
.1097	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1099	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.109b	f0 11		beq $10ae			beq 	_AGOIndIndY
.109d	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; must be ,X)
.10a0	90 39		bcc $10db			bcc 	AGISyntax
.10a2	e0 00		cpx #$00			cpx 	#0
.10a4	d0 35		bne $10db			bne 	AGISyntax
.10a6	a2 02		ldx #$02		ldx	#2
.10a8	20 9e 32	jsr $329e		jsr	mainHandler
.10ab	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10ad	60		rts				rts
.10ae					_AGOIndIndY:
.10ae	c8		iny				iny
.10af	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; get indexing if any
.10b2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10b4	90 cc		bcc $1082			bcc 	_AGOExit 					; none then exit
.10b6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b8	f0 21		beq $10db			beq 	AGISyntax
.10ba	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10bc	4c 82 10	jmp $1082			jmp 	_AGOExit
.10bf					AsmGetIndexing:
.10bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10c1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10c3	18		clc				clc
.10c4	d0 14		bne $10da			bne 	_AGIExit 					; no comma, return with CC
.10c6	c8		iny				iny 								; get what SHOULD be X or Y
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c9	38		sec				sec 								; subtract 6 bit ASCII of X
.10ca	e9 18		sbc #$18			sbc 	#"X" & $3F
.10cc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10ce	b0 0b		bcs $10db			bcs 	AGISyntax
.10d0	aa		tax				tax 								; put in index
.10d1	c8		iny				iny 								; get what follows that, should be the $3A marker
.10d2	b1 28		lda ($28),y			lda 	(codePtr),y
.10d4	c8		iny				iny
.10d5	c9 3a		cmp #$3a			cmp 	#$3A
.10d7	d0 02		bne $10db			bne 	AGISyntax
.10d9	38		sec				sec 								; return CS and index mode in X
.10da					_AGIExit:
.10da	60		rts				rts
.10db					AGISyntax:
.10db	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10dd	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10e0					AsmWriteInstruction:
.10e0	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10e3	98		tya				tya
.10e4	48		pha				pha
.10e5	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e8	29 02		and #$02			and 	#2
.10ea	f0 2d		beq $1119			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10ec	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10ef	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f2	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10f5	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f8	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10fb	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.10fe	e0 00		cpx #$00			cpx 	#0
.1100	f0 0e		beq $1110			beq 	_ASMWEchoExit
.1102	a5 50		lda $50				lda 	esInt0
.1104	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1107	e0 01		cpx #$01			cpx 	#1
.1109	f0 05		beq $1110			beq 	_ASMWEchoExit
.110b	a5 58		lda $58				lda 	esInt1
.110d	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1110					_ASMWEchoExit:
.1110	8a		txa				txa
.1111	48		pha				pha
.1112	a2 04		ldx #$04		ldx	#4
.1114	20 bf 14	jsr $14bf		jsr	deviceHandler
.1117	68		pla				pla
.1118	aa		tax				tax
.1119					_ASMWNoEcho:
.1119	ad f2 0a	lda $0af2			lda 	finalOpcode
.111c	20 34 11	jsr $1134			jsr 	AsmWriteByte
.111f	e0 00		cpx #$00			cpx 	#0
.1121	f0 0e		beq $1131			beq 	_ASMWExit
.1123	a5 50		lda $50				lda 	esInt0
.1125	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1128	e0 01		cpx #$01			cpx 	#1
.112a	f0 05		beq $1131			beq 	_ASMWExit
.112c	a5 58		lda $58				lda 	esInt1
.112e	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1131					_ASMWExit:
.1131	68		pla				pla
.1132	a8		tay				tay
.1133	60		rts				rts
.1134					AsmWriteByte:
.1134	a0 00		ldy #$00			ldy 	#0
.1136	48		pha				pha
.1137	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.113a	85 2a		sta $2a				sta 	temp0
.113c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.113f	85 2b		sta $2b				sta 	temp0+1
.1141	68		pla				pla 								; write out the byte.
.1142	91 2a		sta ($2a),y			sta 	(temp0),y
.1144	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1147	d0 03		bne $114c			bne 	_AWBNoCarry
.1149	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.114c					_AWBNoCarry:
.114c	60		rts				rts
.114d					AWIWriteHexSpace:
.114d	48		pha				pha
.114e	a9 20		lda #$20			lda 	#" "
.1150	20 67 11	jsr $1167			jsr 	AWIPrintChar
.1153	68		pla				pla
.1154					AWIWriteHex:
.1154	48		pha				pha
.1155	4a		lsr a				lsr 	a
.1156	4a		lsr a				lsr 	a
.1157	4a		lsr a				lsr 	a
.1158	4a		lsr a				lsr 	a
.1159	20 5d 11	jsr $115d			jsr 	AWIPrintNibble
.115c	68		pla				pla
.115d					AWIPrintNibble:
.115d	29 0f		and #$0f			and 	#15
.115f	c9 0a		cmp #$0a			cmp 	#10
.1161	90 02		bcc $1165			bcc 	_AWIPNDigit
.1163	69 06		adc #$06			adc 	#6
.1165					_AWIPNDigit:
.1165	69 30		adc #$30			adc 	#48
.1167					AWIPrintChar:
.1167	85 32		sta $32				sta 	tempShort
.1169	8a		txa				txa
.116a	48		pha				pha
.116b	a5 32		lda $32				lda 	tempShort
.116d	a2 16		ldx #$16		ldx	#22
.116f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1172	68		pla				pla
.1173	aa		tax				tax
.1174	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.1175					AssembleOneInstruction:
.1175	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1178	aa		tax				tax
.1179	bd 42 11	lda $1142,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.117c	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.117f	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.1182	8d f4 0a	sta $0af4			sta 	asmMode
.1185	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.1187	d0 05		bne $118e			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1189	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.118c	b0 10		bcs $119e			bcs 	_AOISuccess 				; worked ok.
.118e					_AOIThreeBytes:
.118e	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.1191	bd c8 11	lda $11c8,x			lda 	AbsoluteVersionTable,x
.1194	30 09		bmi $119f			bmi 	_AOIError					; not possible, no equivalent.
.1196	8d f4 0a	sta $0af4			sta 	asmMode
.1199	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.119c	90 01		bcc $119f			bcc 	_AOIError 					; didn't work.
.119e					_AOISuccess:
.119e	60		rts				rts
.119f					_AOIError:
.119f	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11a1	20 e0 14	jsr $14e0		jsr	errorHandler
.11a4					AssembleAttempt:
.11a4	20 ad 11	jsr $11ad			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a7	b0 03		bcs $11ac			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a9	20 57 13	jsr $1357			jsr 	AssembleSpecialCase
.11ac					_AAExit:
.11ac	60		rts				rts
.11ad					_AADispatch:
.11ad	ad f3 0a	lda $0af3			lda 	asmToken
.11b0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11b2	b0 11		bcs $11c5			bcs 	_AAGroup4
.11b4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11b6	b0 0a		bcs $11c2			bcs 	_AAGroup3
.11b8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ba	b0 03		bcs $11bf			bcs 	_AAGroup2
.11bc	4c 9d 12	jmp $129d			jmp 	AssembleGroup1
.11bf					_AAGroup2:
.11bf	4c f8 12	jmp $12f8			jmp 	AssembleGroup2
.11c2					_AAGroup3:
.11c2	4c 19 13	jmp $1319			jmp 	AssembleGroup3
.11c5					_AAGroup4:
.11c5	4c 4d 13	jmp $134d			jmp 	AssembleGroup4
.11c8					AbsoluteVersionTable:
>11c8	ff						.byte	$FF 			; fail AMD_IMM
>11c9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11ca	ff						.byte	$FF 			; fail AMD_ACCIMP
>11cb	ff						.byte	$FF 			; fail AMD_ABS
>11cc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11cd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11ce	ff						.byte	$FF 			; fail AMD_ABSY
>11cf	ff						.byte	$FF 			; fail AMD_ABSX
>11d0	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11d1	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11d2	ff						.byte	$FF 			; fail AMD_ABSIND
>11d3	ff						.byte	$FF 			; fail AMD_ABSINDX
>11d4	ff						.byte	$FF 			; fail AMD_REL
>11d5	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d6					OpcodeTable:
>11d6	01					.byte	$01			; $94 ora
>11d7	21					.byte	$21			; $95 (and)
>11d8	41					.byte	$41			; $96 eor
>11d9	61					.byte	$61			; $97 adc
>11da	81					.byte	$81			; $98 sta
>11db	a1					.byte	$a1			; $99 lda
>11dc	c1					.byte	$c1			; $9a cmp
>11dd	e1					.byte	$e1			; $9b sbc
>11de	02					.byte	$02			; $9c asl
>11df	22					.byte	$22			; $9d rol
>11e0	42					.byte	$42			; $9e lsr
>11e1	62					.byte	$62			; $9f ror
>11e2	82					.byte	$82			; $a0 stx
>11e3	a2					.byte	$a2			; $a1 ldx
>11e4	c2					.byte	$c2			; $a2 dec
>11e5	e2					.byte	$e2			; $a3 inc
>11e6	60					.byte	$60			; $a4 stz
>11e7	20					.byte	$20			; $a5 bit
>11e8	80					.byte	$80			; $a6 sty
>11e9	a0					.byte	$a0			; $a7 ldy
>11ea	c0					.byte	$c0			; $a8 cpy
>11eb	e0					.byte	$e0			; $a9 cpx
>11ec	00					.byte	$00			; $aa tsb
>11ed	10					.byte	$10			; $ab trb
>11ee	14					.byte	$14			; $ac jsr
>11ef	40					.byte	$40			; $ad jmp
>11f0	10					.byte	$10			; $ae bpl
>11f1	30					.byte	$30			; $af bmi
>11f2	50					.byte	$50			; $b0 bvc
>11f3	70					.byte	$70			; $b1 bvs
>11f4	90					.byte	$90			; $b2 bcc
>11f5	b0					.byte	$b0			; $b3 bcs
>11f6	d0					.byte	$d0			; $b4 bne
>11f7	f0					.byte	$f0			; $b5 beq
>11f8	80					.byte	$80			; $b6 bra
>11f9	00					.byte	$00			; $b7 brk
>11fa	08					.byte	$08			; $b8 php
>11fb	18					.byte	$18			; $b9 clc
>11fc	28					.byte	$28			; $ba plp
>11fd	38					.byte	$38			; $bb sec
>11fe	40					.byte	$40			; $bc rti
>11ff	48					.byte	$48			; $bd pha
>1200	58					.byte	$58			; $be cli
>1201	5a					.byte	$5a			; $bf phy
>1202	60					.byte	$60			; $c0 rts
>1203	68					.byte	$68			; $c1 pla
>1204	78					.byte	$78			; $c2 sei
>1205	7a					.byte	$7a			; $c3 ply
>1206	88					.byte	$88			; $c4 dey
>1207	8a					.byte	$8a			; $c5 txa
>1208	98					.byte	$98			; $c6 tya
>1209	9a					.byte	$9a			; $c7 txs
>120a	a8					.byte	$a8			; $c8 tay
>120b	aa					.byte	$aa			; $c9 tax
>120c	b8					.byte	$b8			; $ca clv
>120d	ba					.byte	$ba			; $cb tsx
>120e	c8					.byte	$c8			; $cc iny
>120f	ca					.byte	$ca			; $cd dex
>1210	d8					.byte	$d8			; $ce cld
>1211	da					.byte	$da			; $cf phx
>1212	e8					.byte	$e8			; $d0 inx
>1213	ea					.byte	$ea			; $d1 nop
>1214	f8					.byte	$f8			; $d2 sed
>1215	fa					.byte	$fa			; $d3 plx
.1216					Group2OpcodeAvailability:
>1216	ae					.byte	$ae			; $9c asl $02
>1217	ae					.byte	$ae			; $9d rol $22
>1218	ae					.byte	$ae			; $9e lsr $42
>1219	ae					.byte	$ae			; $9f ror $62
>121a	0a					.byte	$0a			; $a0 stx $82
>121b	0b					.byte	$0b			; $a1 ldx $a2
>121c	aa					.byte	$aa			; $a2 dec $c2
>121d	aa					.byte	$aa			; $a3 inc $e2
>121e	22					.byte	$22			; $a4 stz $60
>121f	aa					.byte	$aa			; $a5 bit $20
>1220	2a					.byte	$2a			; $a6 sty $80
>1221	ab					.byte	$ab			; $a7 ldy $a0
>1222	2b					.byte	$2b			; $a8 cpy $c0
>1223	0b					.byte	$0b			; $a9 cpx $e0
>1224	0a					.byte	$0a			; $aa tsb $00
>1225	0a					.byte	$0a			; $ab trb $10
>1226	08					.byte	$08			; $ac jsr $14
>1227	08					.byte	$08			; $ad jmp $40
.1228					AssemblerSpecialCases:
>1228	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>122b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>122e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1231	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1234	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1237	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>123a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>123d	a5 00 89				.byte	$a5,0,$89		; bit #
>1240	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1243	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1246	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1247					AssembleLabel:
.1247	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1249	c9 3a		cmp #$3a			cmp 	#$3A
.124b	b0 4b		bcs $1298			bcs 	_ALSyntax
.124d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.124f	a2 00		ldx #$00		ldx	#0
.1251	20 3d 41	jsr $413d		jsr	variableHandler
.1254	a5 48		lda $48				lda 	esType 						; check integer reference
.1256	c9 80		cmp #$80			cmp 	#$80
.1258	d0 3e		bne $1298			bne 	_ALSyntax
.125a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.125c	85 2a		sta $2a				sta 	temp0
.125e	a5 58		lda $58				lda 	esInt1
.1260	85 2b		sta $2b				sta 	temp0+1
.1262	98		tya				tya
.1263	48		pha				pha
.1264	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1267	4a		lsr a				lsr 	a
.1268	90 11		bcc $127b			bcc 	_ALWrite
.126a	a0 00		ldy #$00			ldy 	#0
.126c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.126f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1271	d0 20		bne $1293			bne 	_ALChanged
.1273	c8		iny				iny
.1274	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1277	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1279	d0 18		bne $1293			bne 	_ALChanged
.127b					_ALWrite:
.127b	a0 00		ldy #$00			ldy 	#0
.127d	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.1280	91 2a		sta ($2a),y			sta 	(temp0),y
.1282	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1285	c8		iny				iny
.1286	91 2a		sta ($2a),y			sta 	(temp0),y
.1288	a9 00		lda #$00			lda 	#0
.128a	c8		iny				iny
.128b	91 2a		sta ($2a),y			sta 	(temp0),y
.128d	c8		iny				iny
.128e	91 2a		sta ($2a),y			sta 	(temp0),y
.1290	68		pla				pla
.1291	a8		tay				tay
.1292	60		rts				rts
.1293					_ALChanged:
.1293	a2 26		ldx #$26			ldx 	#ErrorID_Label
.1295	20 e0 14	jsr $14e0		jsr	errorHandler
.1298					_ALSyntax:
.1298	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.129a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.129d					AssembleGroup1:
.129d	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12a0	c9 98		cmp #$98			cmp 	#TKW_STA
.12a2	d0 07		bne $12ab			bne 	_AG1NotStoreImm
.12a4	ad f4 0a	lda $0af4			lda 	asmMode
.12a7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12a9	f0 2c		beq $12d7			beq 	AG1ModeError
.12ab					_AG1NotStoreImm:
.12ab	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12ae	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12b1	48		pha				pha
.12b2	f0 23		beq $12d7			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12b4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12b6	d0 02		bne $12ba			bne 	_AG1NotImmediate
.12b8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ba					_AG1NotImmediate:
.12ba	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12bc	d0 02		bne $12c0			bne 	_AG1NotZX
.12be	a2 00		ldx #$00			ldx 	#0
.12c0					_AG1NotZX:
.12c0	68		pla				pla 								; restore length
.12c1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12c3	b0 10		bcs $12d5			bcs 	AG1Fail
.12c5					AG1ReturnValue:
.12c5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12c7	18		clc				clc
.12c8	bd ea 12	lda $12ea,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12cb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12ce	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12d0	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.12d3	38		sec				sec
.12d4	60		rts				rts
.12d5					AG1Fail:
.12d5	18		clc				clc
.12d6	60		rts				rts
.12d7					AG1ModeError:
.12d7	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.12d9	20 e0 14	jsr $14e0		jsr	errorHandler
.12dc					AMDOperandSize:
>12dc	01 01 00 02					.byte 	1,1,0,2
>12e0	01 01 02 02					.byte 	1,1,2,2
>12e4	01 01 02 02					.byte 	1,1,2,2
>12e8	01 01						.byte 	1,1
.12ea					AMDOffsetFromBase:
>12ea	00 04 08 0c					.byte 	0,4,8,12
>12ee	10 14 18 1c					.byte	16,20,24,28
>12f2	11 00 00 00					.byte 	17,0,0,0
>12f6	00 00						.byte 	0,0
.12f8					AssembleGroup2:
.12f8	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.12fb	c9 08		cmp #$08			cmp 	#8
.12fd	b0 18		bcs $1317			bcs 	_AG2Fail
.12ff	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1301	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1304	bd 7a 11	lda $117a,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1307					_AG2Shift:
.1307	4a		lsr a				lsr 	a
.1308	c6 2a		dec $2a				dec 	temp0
.130a	10 fb		bpl $1307			bpl 	_AG2Shift
.130c	90 09		bcc $1317			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.130e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1311	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1314	4c c5 12	jmp $12c5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1317					_AG2Fail:
.1317	18		clc				clc
.1318	60		rts				rts
.1319					AssembleGroup3:
.1319	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.131c	4a		lsr a				lsr 	a
.131d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.131f	90 21		bcc $1342			bcc 	_AG3Default
.1321	38		sec				sec	 								; calculate branch offset
.1322	a5 50		lda $50				lda		esInt0
.1324	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1327	aa		tax				tax
.1328	a5 58		lda $58				lda		esInt1
.132a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.132d	85 58		sta $58				sta 	esInt1
.132f	8a		txa				txa 								; add 126, now 128 too many.
.1330	18		clc				clc 								; we can use this to check the range
.1331	69 7e		adc #$7e			adc 	#126
.1333	85 50		sta $50				sta 	esInt0
.1335	90 02		bcc $1339			bcc 	_AG3NoCarry
.1337	e6 58		inc $58				inc 	esInt1
.1339					_AG3NoCarry:
.1339	a5 58		lda $58				lda 	esInt1 						; check in range.
.133b	d0 0b		bne $1348			bne 	_AG3Range
.133d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.133f	38		sec				sec
.1340	e9 80		sbc #$80			sbc 	#128
.1342					_AG3Default:
.1342	85 50		sta $50				sta 	esInt0
.1344					_AG3ExitOk:
.1344	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1346	d0 07		bne $134f			bne 	AG4Write
.1348					_AG3Range:
.1348	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.134a	20 e0 14	jsr $14e0		jsr	errorHandler
.134d					AssembleGroup4:
.134d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.134f					AG4Write:
.134f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1352	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1355	38		sec				sec
.1356	60		rts				rts
.1357					AssembleSpecialCase:
.1357	a2 00		ldx #$00			ldx 	#0
.1359					_ASCScan:
.1359	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.135c	cd f3 0a	cmp $0af3			cmp 	asmToken
.135f	d0 08		bne $1369			bne 	_ASCNext
.1361	bd 29 12	lda $1229,x			lda 	AssemblerSpecialCases+1,x
.1364	cd f4 0a	cmp $0af4			cmp 	asmMode
.1367	f0 0a		beq $1373			beq 	_ASCFound
.1369					_ASCNext:
.1369	e8		inx				inx									; next entry
.136a	e8		inx				inx
.136b	e8		inx				inx
.136c	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; until table ends
.136f	d0 e8		bne $1359			bne 	_ASCScan
.1371	18		clc				clc
.1372	60		rts				rts
.1373					_ASCFound:
.1373	bd 2a 12	lda $122a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.1376	48		pha				pha
.1377	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.137a	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.137d	aa		tax				tax
.137e	68		pla				pla 								; opcode back
.137f	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1382	38		sec				sec
.1383	60		rts				rts

;******  Return to file: assembler/assembler.asm

.1384					assemblerHandler:
.1384	7c 87 13	jmp ($1387,x)			jmp 	(assemblerVectors,x)
.1387					assemblerVectors:
>1387	75 11					.word AssembleOneInstruction ; index 0
>1389	47 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.138b					section_end_assembler:
.138b					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.138b					X16Break:
.138b	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.138e	f0 01		beq $1391			beq 	_IsBreak
.1390	60		rts				rts
.1391					_IsBreak:
.1391	a2 21		ldx #$21			ldx 	#ErrorID_Break
.1393	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1396					ExternSave:
.1396	98		tya				tya
.1397	48		pha				pha
.1398	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.139b	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.139e	a9 01		lda #$01			lda 	#1
.13a0	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13a2	a0 00		ldy #$00			ldy 	#0
.13a4	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13a7	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13a9	85 2a		sta $2a				sta 	temp0
.13ab	a5 59		lda $59				lda 	esInt1+1
.13ad	85 2b		sta $2b				sta 	temp0+1
.13af	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13b1	a4 5a		ldy $5a				ldy 	esInt1+2
.13b3	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13b5	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13b8	b0 03		bcs $13bd			bcs 	_ESSave
.13ba	68		pla				pla
.13bb	a8		tay				tay
.13bc	60		rts				rts
.13bd					_ESSave:
.13bd	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13bf	20 e0 14	jsr $14e0		jsr	errorHandler
.13c2					ExternLoad:
.13c2	98		tya				tya
.13c3	48		pha				pha
.13c4	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.13c7	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13ca	a9 01		lda #$01			lda 	#1
.13cc	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13ce	a0 00		ldy #$00			ldy 	#0
.13d0	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13d3	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.13d5	a4 59		ldy $59				ldy 	esInt1+1
.13d7	a9 00		lda #$00			lda 	#0 							; load command
.13d9	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13dc	b0 03		bcs $13e1			bcs 	_ESLoad
.13de	68		pla				pla
.13df	a8		tay				tay
.13e0	60		rts				rts
.13e1					_ESLoad:
.13e1	a2 20		ldx #$20			ldx 	#ErrorID_Load
.13e3	20 e0 14	jsr $14e0		jsr	errorHandler
.13e6					ExternGetLength:
.13e6	a5 50		lda $50				lda 	esInt0 						; length into A.
.13e8	85 2a		sta $2a				sta 	temp0
.13ea	a5 58		lda $58				lda 	esInt1
.13ec	85 2b		sta $2b				sta 	temp0+1
.13ee	a0 00		ldy #$00			ldy 	#0
.13f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.13f2	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.13f4	a4 58		ldy $58				ldy 	esInt1
.13f6	e8		inx				inx 								; advance over the length pointer.
.13f7	d0 01		bne $13fa			bne 	_ESNoCarry
.13f9	c8		iny				iny
.13fa					_ESNoCarry:
.13fa	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.13fb					IOInitialise:
.13fb	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.13fd	20 26 14	jsr $1426			jsr 	IOPrintChar
.1400	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1402	20 52 14	jsr $1452			jsr 	IOInk
.1405	a9 00		lda #$00			lda 	#0
.1407	20 66 14	jsr $1466			jsr 	IOPaper
.140a	20 0e 14	jsr $140e			jsr 	IOClearScreen
.140d	60		rts				rts
.140e					IOClearScreen:
.140e	48		pha				pha
.140f	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1411	20 26 14	jsr $1426			jsr 	IOPrintChar
.1414	68		pla				pla
.1415	60		rts				rts
.1416					IONewLine:
.1416	48		pha				pha
.1417	a9 0d		lda #$0d			lda 	#13
.1419	20 26 14	jsr $1426			jsr 	IOPrintChar
.141c	68		pla				pla
.141d	60		rts				rts
.141e					IOTab:
.141e	48		pha				pha
.141f	a9 20		lda #$20			lda 	#32
.1421	20 26 14	jsr $1426			jsr 	IOPrintChar
.1424	68		pla				pla
.1425	60		rts				rts
.1426					IOPrintAscii:
.1426					IOPrintChar:
.1426	aa		tax				tax 								; save in X so we can save Y
.1427	5a		phy				phy
.1428	8a		txa				txa
.1429	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.142b	d0 02		bne $142f			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.142d	a9 14		lda #$14			lda 	#$14
.142f					_IOPCNotBS:
.142f	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1432	7a		ply				ply
.1433	60		rts				rts
.1434					IOInkey:
.1434	98		tya				tya
.1435	48		pha				pha
.1436	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1439	85 32		sta $32				sta 	tempShort
.143b	68		pla				pla
.143c	a8		tay				tay
.143d	a5 32		lda $32				lda 	tempShort					; no key pressed.
.143f	f0 10		beq $1451			beq 	_IOIExit
.1441	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.1443	f0 0c		beq $1451			beq 	_IOIExit
.1445	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1447	f0 06		beq $144f			beq 	_IOIBackspace
.1449	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.144b	90 e7		bcc $1434			bcc 	IOInkey
.144d	b0 02		bcs $1451			bcs 	_IOIExit
.144f					_IOIBackspace:
.144f	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1451					_IOIExit:
.1451	60		rts				rts
.1452					IOInk:
.1452	48		pha				pha
.1453	29 07		and #$07			and 	#7 							; 8 primaries
.1455	aa		tax				tax
.1456	bd 5e 14	lda $145e,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1459	20 26 14	jsr $1426			jsr 	IOPrintChar
.145c	68		pla				pla
.145d	60		rts				rts
.145e					_IOColourTable:
>145e	90						.byte 	$90 					; 0 Black
>145f	96						.byte 	$96 					; 1 Red
>1460	1e						.byte 	$1E 					; 2 Green
>1461	9e						.byte 	$9E 					; 3 Yellow
>1462	9a						.byte 	$9A 					; 4 Blue
>1463	9c						.byte 	$9C 					; 5 Magenta
>1464	9f						.byte 	$9F 					; 6 Cyan
>1465	05						.byte 	$05 					; 7 White
.1466					IOPaper:
.1466	48		pha				pha
.1467	48		pha				pha
.1468	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.146a	20 26 14	jsr $1426			jsr 	IOPrintChar 			; and then swap them again.
.146d	68		pla				pla
.146e	20 52 14	jsr $1452			jsr 	IOInk
.1471	a9 01		lda #$01			lda 	#1
.1473	20 26 14	jsr $1426			jsr 	IOPrintChar
.1476	68		pla				pla
.1477	60		rts				rts
.1478					IOLocate:
.1478	48		pha				pha
.1479	a9 13		lda #$13			lda 	#$13 					; home cursor code
.147b	20 26 14	jsr $1426			jsr 	IOPrintChar
.147e	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1480	20 87 14	jsr $1487			jsr 	_IOLoc2
.1483	68		pla				pla
.1484	a8		tay				tay
.1485	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1487					_IOLoc2:
.1487	c0 00		cpy #$00			cpy 	#0
.1489	f0 06		beq $1491			beq 	_IOLocExit
.148b	20 26 14	jsr $1426			jsr 	IOPrintChar
.148e	88		dey				dey
.148f	d0 f6		bne $1487			bne 	_IOLoc2
.1491					_IOLocExit:
.1491	60		rts				rts
.1492					IOInput:
.1492	a9 00		lda #$00			lda 	#0
.1494	8d f6 0a	sta $0af6			sta 	bufferCount
.1497					_IOILoop:
.1497	20 cf ff	jsr $ffcf			jsr 	$FFCF
.149a	c9 0d		cmp #$0d			cmp 	#13
.149c	f0 10		beq $14ae			beq 	_IOIExit
.149e	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14a1	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14a3	f0 f2		beq $1497			beq 	_IOILoop
.14a5	ee f6 0a	inc $0af6			inc 	bufferCount
.14a8	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14ab	4c 97 14	jmp $1497			jmp 	_IOILoop
.14ae					_IOIExit:
.14ae	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14b0	85 2a		sta $2a				sta 	temp0
.14b2	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14b4	85 2b		sta $2b				sta 	1+(temp0)
.14b6	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14b7					IOReadTimer:
.14b7	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14ba	48		pha				pha
.14bb	8a		txa				txa
.14bc	a8		tay				tay
.14bd	68		pla				pla
.14be	60		rts				rts

;******  Return to file: device/device.asm

.14bf					deviceHandler:
.14bf	7c c2 14	jmp ($14c2,x)			jmp 	(deviceVectors,x)
.14c2					deviceVectors:
>14c2	8b 13					.word X16Break             ; index 0
>14c4	0e 14					.word IOClearScreen        ; index 2
>14c6	16 14					.word IONewLine            ; index 4
>14c8	fb 13					.word IOInitialise         ; index 6
>14ca	52 14					.word IOInk                ; index 8
>14cc	34 14					.word IOInkey              ; index 10
>14ce	92 14					.word IOInput              ; index 12
>14d0	c2 13					.word ExternLoad           ; index 14
>14d2	78 14					.word IOLocate             ; index 16
>14d4	66 14					.word IOPaper              ; index 18
>14d6	26 14					.word IOPrintChar          ; index 20
>14d8	26 14					.word IOPrintAscii         ; index 22
>14da	96 13					.word ExternSave           ; index 24
>14dc	1e 14					.word IOTab                ; index 26
>14de	b7 14					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.14e0					section_end_device:
.14e0					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.14e0					ErrorHandler:
.14e0	8a		txa				txa
.14e1	48		pha				pha
.14e2	a9 01		lda #$01			lda 	#1 							; red
.14e4	a2 08		ldx #$08		ldx	#8
.14e6	20 bf 14	jsr $14bf		jsr	deviceHandler
.14e9	68		pla				pla
.14ea	aa		tax				tax
.14eb	a9 56		lda #$56			lda 	#(ErrorTextList) & $FF
.14ed	85 2a		sta $2a				sta 	temp0
.14ef	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.14f1	85 2b		sta $2b				sta 	1+(temp0)
.14f3	ca		dex		_EHFind:dex									; errors start at 1
.14f4	f0 10		beq $1506			beq 	_EHFound
.14f6	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.14f8	38		sec				sec
.14f9	a5 2a		lda $2a				lda 	temp0
.14fb	71 2a		adc ($2a),y			adc 	(temp0),y
.14fd	85 2a		sta $2a				sta 	temp0
.14ff	90 f2		bcc $14f3			bcc 	_EHFind
.1501	e6 2b		inc $2b				inc 	temp0+1
.1503	4c f3 14	jmp $14f3			jmp 	_EHFind
.1506					_EHFound:
.1506	20 fe 17	jsr $17fe			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1509	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.150b	b1 28		lda ($28),y			lda 	(codePtr),y
.150d	f0 39		beq $1548			beq 	_EHNoLine
.150f	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1511	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1514	90 32		bcc $1548			bcc 	_EHNoLine
.1516	a9 52		lda #$52			lda 	#(EHAtMsg) & $FF
.1518	85 2a		sta $2a				sta 	temp0
.151a	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.151c	85 2b		sta $2b				sta 	1+(temp0)
.151e	20 fe 17	jsr $17fe			jsr 	EHPrintAscii
.1521	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1523	a2 00		ldx #$00			ldx 	#0
.1525	b1 28		lda ($28),y			lda 	(codePtr),y
.1527	95 50		sta $50,x			sta 	esInt0,x
.1529	c8		iny				iny
.152a	b1 28		lda ($28),y			lda 	(codePtr),y
.152c	95 58		sta $58,x			sta 	esInt1,x
.152e	a9 00		lda #$00			lda 	#0
.1530	95 60		sta $60,x			sta 	esInt2,x
.1532	95 68		sta $68,x			sta 	esInt3,x
.1534	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1536	85 2a		sta $2a				sta 	temp0
.1538	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.153a	85 2b		sta $2b				sta 	1+(temp0)
.153c	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.153e	a9 00		lda #$00			lda 	#0							; stack position zero.
.1540	a2 0e		ldx #$0e		ldx	#14
.1542	20 9e 32	jsr $329e		jsr	mainHandler
.1545	20 fe 17	jsr $17fe			jsr 	EHPrintAscii
.1548					_EHNoLine:
.1548	a2 04		ldx #$04		ldx	#4
.154a	20 bf 14	jsr $14bf		jsr	deviceHandler
.154d	a2 02		ldx #$02		ldx	#2
.154f	20 0d 1c	jsr $1c0d		jsr	interactionHandler
.1552					EHAtMsg:
>1552	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.1556					ErrorTextList:
>1556	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>155e	20 6e 6f 74 20 50 72 65 73 65 6e 74
>156a	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1572	45 72 72 6f 72
>1577	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>157f	64 69 73 61 62 6c 65 64
>1587	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>158f	6f 6e 20 66 61 69 6c 65 64
>1598	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15a0	42 79 20 5a 65 72 6f
>15a7	04 53 74 6f 70				.text 4,"Stop"
>15ac	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15b4	73 6d 61 74 63 68
>15ba	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15c2	20 56 61 6c 75 65
>15c8	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15d0	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>15de	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>15e6	20 63 6f 6d 6d 61
>15ec	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>15f4	20 72 65 66 65 72 65 6e 63 65
>15fe	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>1606	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1614	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>161c	74 6f 6f 20 6c 6f 6e 67
>1624	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>162c	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1639	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1641	69 74 68 6f 75 74 20 52 45 50 45 41 54
>164e	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1656	74 68 6f 75 74 20 46 4f 52
>165f	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1667	74 68 6f 75 74 20 57 48 49 4c 45
>1672	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>167a	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1687	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>168f	54 20 69 6e 64 65 78
>1696	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>169e	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16ae	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16b6	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16c5	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16cd	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>16dd	63 65
>16df	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>16e7	20 50 72 6f 63 65 64 75 72 65
>16f1	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>16f9	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1709	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1711	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>171f	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>1727	75 69 72 65 73 20 61 72 72 61 79
>1732	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>173a	61 79 20 69 6e 64 65 78
>1742	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>174a	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>175a	6e 64 69 63 65 73
>1760	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>1768	64 61 74 61
>176c	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>1774	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1781	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1789	69 6c 65 64
>178d	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1795	69 6c 65 64
>1799	05 42 72 65 61 6b			.text 5,"Break"
>179f	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17a7	6d 65 6d 6f 72 79
>17ad	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17b5	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17c4	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17cc	72 61 6e 64 2f 4d 6f 64 65
>17d5	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>17dd	6f 75 74 20 6f 66 20 72 61 6e 67 65
>17e9	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>17f1	68 61 6e 67 65 64 20 76 61 6c 75 65
>17fd	00					.byte 0

;******  Return to file: error/errorhandler.asm

.17fe					EHPrintAscii:
.17fe	a0 00		ldy #$00			ldy 	#0
.1800	b1 2a		lda ($2a),y			lda 	(temp0),y
.1802	aa		tax				tax
.1803	f0 0f		beq $1814			beq 	_EHPExit
.1805					_EHPLoop:
.1805	c8		iny				iny
.1806	8a		txa				txa
.1807	48		pha				pha
.1808	b1 2a		lda ($2a),y			lda 	(temp0),y
.180a	a2 16		ldx #$16		ldx	#22
.180c	20 bf 14	jsr $14bf		jsr	deviceHandler
.180f	68		pla				pla
.1810	aa		tax				tax
.1811	ca		dex				dex
.1812	d0 f1		bne $1805			bne 	_EHPLoop
.1814					_EHPExit:
.1814	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1815					section_end_error:
.1815					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1815					ExtensionHandler:
.1815	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1817	f0 16		beq $182f			beq 	_ExtensionForce
.1819	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.181b	d0 08		bne $1825			bne 	_ExtensionUnary 			; is passed in A.
.181d	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.181f	c8		iny				iny
.1820	0a		asl a				asl 	a
.1821	aa		tax				tax
.1822	7c 26 18	jmp ($1826,x)			jmp 	(Group2Vectors-12,x)
.1825					_ExtensionUnary:
.1825	48		pha				pha 								; save stack pos in A
.1826	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1828	c8		iny				iny
.1829	0a		asl a				asl 	a
.182a	aa		tax				tax
.182b	68		pla				pla 								; restore stack pos and call group3 command.
.182c	7c 30 18	jmp ($1830,x)			jmp 	(Group3Vectors-12,X)
.182f					_ExtensionForce:
.182f	4c 48 18	jmp $1848			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1832					Group2Vectors:
>1832	5d 19					.word	Command_VPoke            ; $86 vpoke
>1834	60 19					.word	Command_VDoke            ; $87 vdoke
>1836	3a 19					.word	Command_VLoad            ; $88 vload
>1838	5a 18					.word	CommandMode              ; $89 mode
>183a	03 19					.word	CommandPalette           ; $8a palette

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.183c					Group3Vectors:
>183c	a1 19					.word	Command_VPeek            ; $86 vpeek(
>183e	a4 19					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1840					XEvaluateInteger:
.1840	8a		txa				txa
.1841	a2 08		ldx #$08		ldx	#8
.1843	20 9e 32	jsr $329e		jsr	mainHandler
.1846	aa		tax				tax
.1847	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.1848					ForceMode0:
.1848	a2 00		ldx #$00			ldx 	#0
.184a	86 50		stx $50				stx 	esInt0 						; in case we do it.
.184c					_FMCheck:
.184c	bd d7 18	lda $18d7,x			lda 	CMModeList,x 				; do we need to switch ?
.184f	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.1852	d0 11		bne $1865			bne 	CMSetMode 					; different so switch.
.1854	e8		inx				inx
.1855	e0 04		cpx #$04			cpx 	#4
.1857	d0 f3		bne $184c			bne 	_FMCheck
.1859	60		rts				rts
.185a					CommandMode:
.185a	a2 00		ldx #$00			ldx 	#0
.185c	20 40 18	jsr $1840			jsr 	XEvaluateInteger
.185f	a5 68		lda $68				lda 	esInt3
.1861	29 70		and #$70			and 	#$70
.1863	d0 06		bne $186b			bne 	CMNoExpand
.1865					CMSetMode:
.1865	20 b6 18	jsr $18b6			jsr 	CMExpandMode
.1868	4c 7f 18	jmp $187f			jmp 	CMUpdateMode
.186b					CMNoExpand:
.186b	a5 50		lda $50				lda 	esInt0
.186d	8d e6 0b	sta $0be6			sta 	currentMode
.1870	a5 58		lda $58				lda 	esInt1
.1872	8d e7 0b	sta $0be7			sta 	currentMode+1
.1875	a5 60		lda $60				lda 	esInt2
.1877	8d e8 0b	sta $0be8			sta 	currentMode+2
.187a	a5 68		lda $68				lda 	esInt3
.187c	8d e9 0b	sta $0be9			sta 	currentMode+3
.187f					CMUpdateMode:
.187f	a2 11		ldx #$11			ldx 	#$11
.1881					_CMClear:
.1881	a9 00		lda #$00			lda 	#0
.1883	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1886	ca		dex				dex
.1887	10 f8		bpl $1881			bpl 	_CMClear
.1889	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.188c	48		pha				pha 								; stack twice.
.188d	48		pha				pha
.188e	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1890	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1892	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1895	68		pla				pla 								; get back
.1896	20 db 18	jsr $18db			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1899	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.189c	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.189d	4a		lsr a				lsr 	a
.189e	4a		lsr a				lsr 	a
.189f	20 db 18	jsr $18db			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18a2	8d 2b 9f	sta $9f2b			sta 	$9F2B
.18a5	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.18a7	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18aa	20 e6 18	jsr $18e6			jsr 	CMDecodeLayer 				; and decode layer 0
.18ad	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18af	ad e7 0b	lda $0be7			lda 	currentMode+1
.18b2	20 e6 18	jsr $18e6			jsr 	CMDecodeLayer
.18b5	60		rts				rts
.18b6					CMExpandMode:
.18b6	a5 50		lda $50				lda 	esInt0 						; get mode number
.18b8	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.18ba	b0 16		bcs $18d2			bcs 	_CMModeError
.18bc	0a		asl a				asl 	a 							; x 4 into X
.18bd	0a		asl a				asl 	a
.18be	aa		tax				tax
.18bf	98		tya				tya
.18c0	48		pha				pha
.18c1	a0 00		ldy #$00			ldy 	#0
.18c3					_CMEMCopy:
.18c3	bd d7 18	lda $18d7,x			lda 	CMModeList,x
.18c6	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.18c9	e8		inx				inx
.18ca	c8		iny				iny
.18cb	c0 04		cpy #$04			cpy 	#4
.18cd	d0 f4		bne $18c3			bne 	_CMEMCopy
.18cf	68		pla				pla
.18d0	a8		tay				tay
.18d1	60		rts				rts
.18d2					_CMModeError:
.18d2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18d4	20 e0 14	jsr $14e0		jsr	errorHandler
.18d7					CMModeList:
>18d7	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.18db					CMEndModeList:
.18db					CMToScale:
.18db	29 03		and #$03			and 	#3 							; lower 2 bits only
.18dd	aa		tax				tax 								; put in X for counting
.18de	a9 00		lda #$00			lda 	#0 							; zero result
.18e0	38		sec				sec 								; first time rotate CS in
.18e1					_CMTSLoop:
.18e1	6a		ror a				ror 	a
.18e2	ca		dex				dex
.18e3	10 fc		bpl $18e1			bpl 	_CMTSLoop
.18e5	60		rts				rts
.18e6					CMDecodeLayer:
.18e6	48		pha				pha 								; save it.
.18e7	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.18e9	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.18ec	68		pla				pla 								; get it back
.18ed	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.18ef	f0 02		beq $18f3			beq 	_CMDLNotSet
.18f1	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.18f3					_CMDLNotSet:
.18f3	e0 00		cpx #$00			cpx 	#0
.18f5	f0 06		beq $18fd			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.18f7	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.18f9	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.18fc	60		rts				rts
.18fd					_CMDLayer0:
.18fd	09 80		ora #$80			ora 	#$80 						; tile base is $80
.18ff	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1902	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/palette.asm

.1903					CommandPalette:
.1903	a9 00		lda #$00			lda 	#0
.1905	a2 0a		ldx #$0a		ldx	#10
.1907	20 9e 32	jsr $329e		jsr	mainHandler
.190a	a2 00		ldx #$00		ldx	#0
.190c	20 9e 32	jsr $329e		jsr	mainHandler
.190f	a9 01		lda #$01			lda 	#1
.1911	a2 06		ldx #$06		ldx	#6
.1913	20 9e 32	jsr $329e		jsr	mainHandler
.1916	a5 50		lda $50				lda 	esInt0 					; get palette #
.1918	20 28 19	jsr $1928			jsr 	PointToPaletteA			; point to palette register
.191b	a5 51		lda $51				lda 	esInt0+1
.191d	8d 23 9f	sta $9f23			sta 	$9F23
.1920	a5 59		lda $59				lda 	esInt1+1
.1922	29 0f		and #$0f			and 	#$0F
.1924	8d 23 9f	sta $9f23			sta 	$9F23
.1927	60		rts				rts
.1928					PointToPaletteA:
.1928	0a		asl a				asl 	a 							; x 2 -> LSB
.1929	8d 20 9f	sta $9f20			sta 	$9F20
.192c	a9 00		lda #$00			lda 	#0 							; carry into A
.192e	2a		rol a				rol 	a
.192f	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1931	8d 21 9f	sta $9f21			sta 	$9F21
.1934	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1936	8d 22 9f	sta $9f22			sta 	$9F22
.1939	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.193a					Command_VLoad:
.193a	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.193c	20 13 2b	jsr $2b13			jsr 	EvaluateString
.193f	e8		inx				inx
.1940	20 b0 31	jsr $31b0			jsr 	MInt32False
.1943	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1945	95 50		sta $50,x			sta 	esInt0,x
.1947	a5 36		lda $36				lda 	lowMemory+1
.1949	95 58		sta $58,x			sta 	esInt1,x
.194b	ca		dex				dex
.194c	a2 0e		ldx #$0e		ldx	#14
.194e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1951	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1953	85 2a		sta $2a				sta 	temp0
.1955	a5 59		lda $59				lda 	esInt1+1
.1957	85 2b		sta $2b				sta 	temp0+1
.1959	20 c2 19	jsr $19c2			jsr 	LoadVRAMFile 					; load the VRAM file in.
.195c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.195d					Command_VPoke:
.195d	38		sec				sec 						; one byte , CS
.195e	b0 01		bcs $1961			bcs 	CmdVideoWrite
.1960					Command_VDoke:
.1960	18		clc				clc 						; two bytes, CC
.1961					CmdVideoWrite:
.1961	08		php				php 						; save one or two btes
.1962	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1964	20 40 18	jsr $1840			jsr 	XEvaluateInteger
.1967	20 30 32	jsr $3230			jsr 	CheckComma
.196a	e8		inx				inx
.196b	20 40 18	jsr $1840			jsr 	XEvaluateInteger
.196e	ca		dex				dex
.196f	20 80 19	jsr $1980			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1972	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1974	8d 23 9f	sta $9f23			sta 	$9F23
.1977	28		plp				plp 						; if it was Poke then exit
.1978	b0 05		bcs $197f			bcs 	_CVWExit
.197a	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.197c	8d 23 9f	sta $9f23			sta 	$9F23
.197f					_CVWExit:
.197f	60		rts				rts
.1980					SetUpTOSVRamAddress:
.1980	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1982	29 fe		and #$fe			and 	#$FE
.1984	15 68		ora $68,x			ora 	esInt3,x
.1986	d0 14		bne $199c			bne 	CVWValue
.1988	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.198a	8d 20 9f	sta $9f20			sta 	$9F20
.198d	b5 58		lda $58,x			lda 	esInt1,x
.198f	8d 21 9f	sta $9f21			sta	 	$9F21
.1992	b5 60		lda $60,x			lda 	esInt2,x
.1994	29 01		and #$01			and 	#1
.1996	09 10		ora #$10			ora 	#$10 				; step 1.
.1998	8d 22 9f	sta $9f22			sta 	$9F22
.199b	60		rts				rts
.199c					CVWValue:
.199c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.199e	20 e0 14	jsr $14e0		jsr	errorHandler
.19a1					Command_VPeek:
.19a1	38		sec				sec 						; one byte , CS
.19a2	b0 01		bcs $19a5			bcs 	CmdVideoRead
.19a4					Command_VDeek:
.19a4	18		clc				clc 						; two bytes, CC
.19a5					CmdVideoRead:
.19a5	08		php				php 						; save action on stack.
.19a6	aa		tax				tax 						; save stack position
.19a7	20 40 18	jsr $1840			jsr 	XEvaluateInteger 	; address
.19aa	20 23 32	jsr $3223			jsr 	CheckRightParen 	; closing right bracket.
.19ad	20 80 19	jsr $1980			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.19b0	20 b0 31	jsr $31b0			jsr 	MInt32False 		; zero return.
.19b3	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.19b6	95 50		sta $50,x			sta 	esInt0,x
.19b8	28		plp				plp 						; check if DOKE (carry was clear)
.19b9	b0 05		bcs $19c0			bcs 	_CVRExit
.19bb	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.19be	95 58		sta $58,x			sta 	esInt1,x
.19c0					_CVRExit:
.19c0	8a		txa				txa 						; return X position.
.19c1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bea					compressMode:
>0bea							.fill 	1
.19c2					LoadVRAMFile:
.19c2					_LVRLoop:
.19c2	20 12 1a	jsr $1a12			jsr 	LVFGet 						; get the next (never access direct)
.19c5	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.19c7	f0 3a		beq $1a03			beq 	_LVRExit
.19c9	b0 39		bcs $1a04			bcs 	_LVRLoad 					; load data in ?
.19cb	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.19cd	90 09		bcc $19d8			bcc 	_LVRSetAddress
.19cf	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.19d1	90 29		bcc $19fc			bcc 	_LVRSetCompress
.19d3	a2 01		ldx #$01			ldx 	#ErrorID_missing
.19d5	20 e0 14	jsr $14e0		jsr	errorHandler
.19d8					_LVRSetAddress:
.19d8	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.19da	20 12 1a	jsr $1a12			jsr 	LVFGet
.19dd	85 2c		sta $2c				sta 	temp1
.19df	a9 00		lda #$00			lda 	#0
.19e1	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.19e3	66 2c		ror $2c				ror 	temp1
.19e5	6a		ror a				ror		a
.19e6	46 2d		lsr $2d				lsr 	temp1+1
.19e8	66 2c		ror $2c				ror 	temp1
.19ea	6a		ror a				ror		a
.19eb	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.19ee	a5 2c		lda $2c				lda 	temp1
.19f0	8d 21 9f	sta $9f21			sta 	$9F21
.19f3	a5 2d		lda $2d				lda 	temp1+1
.19f5	09 10		ora #$10			ora 	#$10
.19f7	8d 22 9f	sta $9f22			sta 	$9F22
.19fa	d0 c6		bne $19c2			bne 	_LVRLoop
.19fc					_LVRSetCompress:
.19fc	29 07		and #$07			and 	#7
.19fe	8d ea 0b	sta $0bea			sta 	compressMode
.1a01	10 bf		bpl $19c2			bpl 	_LVRLoop
.1a03					_LVRExit:
.1a03	60		rts				rts
.1a04					_LVRLoad:
.1a04	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1a06	aa		tax				tax
.1a07					_LVRLCopy:
.1a07	20 12 1a	jsr $1a12			jsr 	LVFGet 						; write to data.
.1a0a	8d 23 9f	sta $9f23			sta 	$9F23
.1a0d	ca		dex				dex
.1a0e	d0 f7		bne $1a07			bne 	_LVRLCopy
.1a10	f0 b0		beq $19c2			beq 	_LVRLoop
.1a12	84 32		sty $32		LVFGet:	sty 	tempShort
.1a14	a0 00		ldy #$00			ldy 	#0
.1a16	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a18	a4 32		ldy $32				ldy	 	tempShort
.1a1a	e6 2a		inc $2a				inc 	temp0
.1a1c	d0 02		bne $1a20			bne 	_LVFGExit
.1a1e	e6 2b		inc $2b				inc 	temp0+1
.1a20					_LVFGExit:
.1a20	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1a21					section_end_extension:
.1a21					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1a21					floatingpointHandler:
.1a21	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1a23	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: basic.asm

.1a26					section_end_floatingpoint:
.1a26					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1a26					ColdStartEntry:
.1a26	a2 ff		ldx #$ff			ldx 	#$FF
.1a28	9a		txs				txs
.1a29	20 b2 1a	jsr $1ab2			jsr 	ForceStandardMode
.1a2c	a2 02		ldx #$02		ldx	#2
.1a2e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a31	a0 ff		ldy #$ff			ldy 	#255
.1a33					_CSBanner:
.1a33	c8		iny				iny
.1a34	b9 5a 1a	lda $1a5a,y			lda 	Intro,y
.1a37	f0 14		beq $1a4d			beq 	_CSStart
.1a39	c9 08		cmp #$08			cmp 	#8
.1a3b	90 08		bcc $1a45			bcc 	_CSInk
.1a3d	a2 16		ldx #$16		ldx	#22
.1a3f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a42	4c 33 1a	jmp $1a33			jmp 	_CSBanner
.1a45					_CSInk:
.1a45	a2 08		ldx #$08		ldx	#8
.1a47	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a4a	4c 33 1a	jmp $1a33			jmp 	_CSBanner
.1a4d					_CSStart:
.1a4d	a2 12		ldx #$12		ldx	#18
.1a4f	20 9e 32	jsr $329e		jsr	mainHandler
.1a52	a2 04		ldx #$04		ldx	#4
.1a54	20 9e 32	jsr $329e		jsr	mainHandler
.1a57	4c 72 1b	jmp $1b72			jmp 	WarmStartEntry
>1a5a	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1a62	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1a72	20 2a 2a 2a 0d 0d
>1a78	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1a80	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1a90	32 30 32 31 0d 0d
>1a96	02 42 61 73 69 63 20				.text 	2,"Basic "
>1a9d	30 2e 31 37					.text "0.17"
>1aa1	20 28						.text 	" ("
>1aa3	31 38 2d 4d 61 72 2d 32				.text "18-Mar-2021"
>1aab	30 32 31
>1aae	29 0d 0d 00					.text 	")",13,13,0
.1ab2					ForceStandardMode:
.1ab2	a9 fe		lda #$fe			lda 	#$FE
.1ab4	20 15 18	jsr $1815		jsr	extensionHandler
.1ab7	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1ab8					DeleteLine:
.1ab8	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1abb	85 2a		sta $2a				sta 	temp0
.1abd	ad c9 0a	lda $0ac9			lda 	basePage+1
.1ac0	85 2b		sta $2b				sta 	temp0+1
.1ac2	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1ac4	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1ac6	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1ac8	d0 07		bne $1ad1			bne 	_DLNext
.1aca	c8		iny				iny
.1acb	a5 58		lda $58				lda 	esInt1
.1acd	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1acf	f0 06		beq $1ad7			beq 	_DLFound
.1ad1	20 f5 1a	jsr $1af5	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1ad4	d0 ec		bne $1ac2			bne 	_DLLoop
.1ad6	60		rts				rts
.1ad7					_DLFound:
.1ad7	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1ad9	b1 2a		lda ($2a),y			lda 	(temp0),y
.1adb	a8		tay				tay 								; so we copy from (temp0),y
.1adc	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1ade					_DLCopyDown:
.1ade	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1ae0	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1ae2	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1ae4	d0 02		bne $1ae8			bne 	_DLNoCarry
.1ae6	e6 2b		inc $2b				inc 	temp0+1
.1ae8					_DLNoCarry:
.1ae8	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1aea	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1aec	d0 f0		bne $1ade			bne 	_DLCopyDown
.1aee	a5 2b		lda $2b				lda 	temp0+1
.1af0	c5 36		cmp $36				cmp 	lowMemory+1
.1af2	d0 ea		bne $1ade			bne 	_DLCopyDown
.1af4	60		rts				rts
.1af5					IAdvanceTemp0:
.1af5	84 32		sty $32				sty 	tempShort
.1af7	18		clc				clc
.1af8	a0 00		ldy #$00			ldy 	#0 							; get offset
.1afa	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1afc	65 2a		adc $2a				adc 	temp0
.1afe	85 2a		sta $2a				sta 	temp0
.1b00	90 02		bcc $1b04			bcc 	_IATNoCarry
.1b02	e6 2b		inc $2b				inc 	temp0+1
.1b04					_IATNoCarry:
.1b04	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b06	a4 32		ldy $32				ldy 	tempShort
.1b08	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1b0a	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1b0b					InsertLine:
.1b0b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1b0e	85 2a		sta $2a				sta 	temp0
.1b10	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b13	85 2b		sta $2b				sta 	temp0+1
.1b15					_ILLoop:
.1b15	a0 01		ldy #$01			ldy 	#1
.1b17	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b19	c5 50		cmp $50				cmp 	esInt0
.1b1b	c8		iny				iny
.1b1c	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b1e	e5 58		sbc $58				sbc 	esInt1
.1b20	b0 05		bcs $1b27			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1b22	20 f5 1a	jsr $1af5			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1b25	d0 ee		bne $1b15			bne 	_ILLoop
.1b27					_ILFound:
.1b27	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1b29	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1b2b	a5 36		lda $36				lda 	lowMemory+1
.1b2d	85 2d		sta $2d				sta 	temp1+1
.1b2f	ad 28 0d	lda $0d28			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1b32	18		clc				clc 								; add 3 for the line number and offset.
.1b33	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1b35	a8		tay				tay
.1b36	a2 00		ldx #$00			ldx 	#0
.1b38	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1b3a	91 2c		sta ($2c),y			sta 	(temp1),y
.1b3c	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1b3e	c5 2a		cmp $2a				cmp 	temp0
.1b40	d0 06		bne $1b48			bne 	_ILMNext
.1b42	a5 2d		lda $2d				lda 	temp1+1
.1b44	c5 2b		cmp $2b				cmp 	temp0+1
.1b46	f0 0b		beq $1b53			beq 	_ILMCopy
.1b48					_ILMNext:
.1b48	a5 2c		lda $2c				lda 	temp1
.1b4a	d0 02		bne $1b4e			bne 	_ILNoBorrow
.1b4c	c6 2d		dec $2d				dec 	temp1+1
.1b4e					_ILNoBorrow:
.1b4e	c6 2c		dec $2c				dec 	temp1
.1b50	4c 38 1b	jmp $1b38			jmp 	_ILMove 					; and go round again
.1b53					_ILMCopy:
.1b53	98		tya				tya 								; Y is the offset of the new line.
.1b54	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1b56	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1b58	a5 50		lda $50				lda 	esInt0
.1b5a	91 2a		sta ($2a),y			sta 	(temp0),y
.1b5c	c8		iny				iny
.1b5d	a5 58		lda $58				lda 	esInt1
.1b5f	91 2a		sta ($2a),y			sta 	(temp0),y
.1b61	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1b63					_ILMCopy2:
.1b63	b1 28		lda ($28),y			lda 	(codePtr),y
.1b65	c8		iny				iny
.1b66	c8		iny				iny
.1b67	c8		iny				iny
.1b68	91 2a		sta ($2a),y			sta 	(temp0),y
.1b6a	88		dey				dey
.1b6b	88		dey				dey
.1b6c	cc 28 0d	cpy $0d28			cpy 	tokenBufferIndex
.1b6f	d0 f2		bne $1b63			bne 	_ILMCopy2
.1b71	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1b72					WarmStartEntry:
.1b72	a2 ff		ldx #$ff			ldx 	#$FF
.1b74	9a		txs				txs
.1b75	20 b2 1a	jsr $1ab2			jsr 	ForceStandardMode
.1b78	a9 02		lda #$02			lda 	#2							; green text.
.1b7a	a2 08		ldx #$08		ldx	#8
.1b7c	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b7f	a2 0c		ldx #$0c		ldx	#12
.1b81	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b84	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1b86	85 28		sta $28				sta 	codePtr
.1b88	a5 2b		lda $2b				lda 	temp0+1
.1b8a	85 29		sta $29				sta 	codePtr+1
.1b8c	a2 04		ldx #$04		ldx	#4
.1b8e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b91	a2 06		ldx #$06		ldx	#6
.1b93	20 6f 3d	jsr $3d6f		jsr	tokeniserHandler
.1b96	c9 00		cmp #$00			cmp 	#0
.1b98	f0 25		beq $1bbf			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1b9a	a9 25		lda #$25			lda 	#(tokenHeader) & $FF
.1b9c	85 28		sta $28				sta 	codePtr
.1b9e	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1ba0	85 29		sta $29				sta 	1+(codePtr)
.1ba2	ad 28 0c	lda $0c28			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1ba5	c9 80		cmp #$80			cmp 	#$80
.1ba7	f0 c9		beq $1b72			beq 	WarmStartEntry
.1ba9	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1bab	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1bad	f0 15		beq $1bc4			beq 	HasLineNumber
.1baf	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1bb1	8d 25 0c	sta $0c25			sta 	tokenHeader 				; fake program line.
.1bb4	8d 26 0c	sta $0c26			sta 	tokenHeader+1
.1bb7	8d 27 0c	sta $0c27			sta 	tokenHeader+2
.1bba	a2 14		ldx #$14		ldx	#20
.1bbc	20 9e 32	jsr $329e		jsr	mainHandler
.1bbf					WSEError:
.1bbf	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1bc1	20 e0 14	jsr $14e0		jsr	errorHandler
.1bc4					HasLineNumber:
.1bc4	a0 03		ldy #$03			ldy 	#3 							; get line number
.1bc6	a9 00		lda #$00			lda 	#0
.1bc8	a2 08		ldx #$08		ldx	#8
.1bca	20 9e 32	jsr $329e		jsr	mainHandler
.1bcd	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1bcf	05 68		ora $68				ora 	esInt3
.1bd1	d0 ec		bne $1bbf			bne 	WSEError
.1bd3	98		tya				tya 								; make codePtr point to code after the line number.
.1bd4	18		clc				clc 								; by skipping over the tokenised number.
.1bd5	65 28		adc $28				adc 	codePtr
.1bd7	85 28		sta $28				sta 	codePtr
.1bd9	90 02		bcc $1bdd			bcc		_HLNNoCarry
.1bdb	e6 29		inc $29				inc 	codePtr+1
.1bdd					_HLNNoCarry:
.1bdd	98		tya				tya 								; subtract that offset from the code buffer index
.1bde	38		sec				sec
.1bdf	49 ff		eor #$ff			eor 	#$FF
.1be1	6d 28 0d	adc $0d28			adc 	tokenBufferIndex
.1be4	18		clc				clc 								; add space allowing for header & $80 trailer
.1be5	69 04		adc #$04			adc 	#4
.1be7	8d 28 0d	sta $0d28			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1bea	20 b8 1a	jsr $1ab8			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1bed					_HLNNoDelete:
.1bed	ad 28 0d	lda $0d28			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1bf0	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1bf2	f0 0c		beq $1c00			beq 	_HLMEditDone
.1bf4	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1bf6	18		clc				clc 								; workspace (1k)
.1bf7	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1bf9	c5 34		cmp $34				cmp 	highMemory+1
.1bfb	b0 0b		bcs $1c08			bcs 	_HLMMemory 					; nope, won't allowit.
.1bfd	20 0b 1b	jsr $1b0b			jsr 	InsertLine 					; insert the line in
.1c00					_HLMEditDone:
.1c00	a2 04		ldx #$04		ldx	#4
.1c02	20 9e 32	jsr $329e		jsr	mainHandler
.1c05	4c 72 1b	jmp $1b72			jmp 	WarmStartEntry
.1c08					_HLMMemory:
.1c08	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1c0a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1c0d					interactionHandler:
.1c0d	7c 10 1c	jmp ($1c10,x)			jmp 	(interactionVectors,x)
.1c10					interactionVectors:
>1c10	26 1a					.word ColdStartEntry       ; index 0
>1c12	72 1b					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1c14					section_end_interaction:
.1c14					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0beb					dataPtr:
>0beb							.fill 	2
.0bed					dataIndex:
>0bed							.fill 	1
.1c14					CommandRead:
.1c14	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1c16	20 51 2b	jsr $2b51			jsr 	EvaluateReference
.1c19	20 5a 1c	jsr $1c5a			jsr 	SwapDPCP 					; use the data pointer.
.1c1c	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1c1e	c8		iny				iny
.1c1f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1c21	f0 07		beq $1c2a			beq 	_CRInData
.1c23	88		dey				dey
.1c24	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1c26	aa		tax				tax
.1c27	20 5b 23	jsr $235b			jsr 	ScanForward
.1c2a					_CRInData:
.1c2a	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1c2c	20 ff 2a	jsr $2aff			jsr 	Evaluate
.1c2f	ca		dex				dex 								; and write the value.
.1c30	20 ae 1e	jsr $1eae			jsr 	WriteValue
.1c33	20 5a 1c	jsr $1c5a			jsr 	SwapDPCP 					; get the code pointer back.
.1c36	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1c38	c8		iny				iny
.1c39	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1c3b	f0 d7		beq $1c14			beq 	CommandRead
.1c3d	88		dey				dey
.1c3e	60		rts				rts
.1c3f					CommandData:
.1c3f	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1c41	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1c43	20 5b 23	jsr $235b			jsr 	ScanForward
.1c46	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1c47	60		rts				rts
.1c48					CommandRestore:
.1c48	ad c8 0a	lda $0ac8			lda 	basePage
.1c4b	8d eb 0b	sta $0beb			sta 	dataPtr
.1c4e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c51	8d ec 0b	sta $0bec			sta 	dataPtr+1
.1c54	a9 03		lda #$03			lda 	#3
.1c56	8d ed 0b	sta $0bed			sta 	dataIndex
.1c59	60		rts				rts
.1c5a					SwapDPCP:
.1c5a	8a		txa				txa
.1c5b	48		pha				pha
.1c5c	98		tya				tya 								; swap Y, DataIndex
.1c5d	ac ed 0b	ldy $0bed			ldy 	DataIndex
.1c60	8d ed 0b	sta $0bed			sta 	DataIndex
.1c63	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1c65	ae eb 0b	ldx $0beb			ldx 	dataptr
.1c68	8d eb 0b	sta $0beb			sta 	dataPtr
.1c6b	86 28		stx $28				stx 	codePtr
.1c6d	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1c6f	ae ec 0b	ldx $0bec			ldx 	dataptr+1
.1c72	8d ec 0b	sta $0bec			sta 	dataPtr+1
.1c75	86 29		stx $29				stx 	codePtr+1
.1c77	68		pla				pla
.1c78	aa		tax				tax
.1c79	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1c7a					CommandGOSUB:
.1c7a	20 1c 2b	jsr $2b1c			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1c7d	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1c7f	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1c81	20 4b 32	jsr $324b			jsr 	RSClaim
.1c84	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1c86	20 77 32	jsr $3277			jsr 	RSSavePosition
.1c89	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1c8b	f0 1b		beq $1ca8			beq 	GotoTOS 					; and do a GOTO there.
.1c8d					CommandRETURN:
.1c8d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1c8f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1c91	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1c93	f0 05		beq $1c9a			beq 	_isok
.1c95	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1c97	20 e0 14	jsr $14e0		jsr	errorHandler
.1c9a					_isok:
.1c9a	a9 01		lda #$01			lda 	#1
.1c9c	20 8a 32	jsr $328a			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1c9f	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1ca1	20 6d 32	jsr $326d			jsr 	RSFree
.1ca4	60		rts				rts
.1ca5					CommandGOTO:
.1ca5	20 1c 2b	jsr $2b1c			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1ca8					GotoTOS:
.1ca8	20 3f 26	jsr $263f			jsr 	ResetCodeAddress 			; simple search.
.1cab					_GotoSearch:
.1cab	a0 00		ldy #$00			ldy 	#0 							; get offset
.1cad	b1 28		lda ($28),y			lda 	(codePtr),y
.1caf	f0 21		beq $1cd2			beq 	_GotoError 					; not found.
.1cb1	c8		iny				iny									; check LSB match
.1cb2	b1 28		lda ($28),y			lda 	(codePtr),y
.1cb4	d5 50		cmp $50,x			cmp 	esInt0,x
.1cb6	d0 07		bne $1cbf			bne 	_GotoNext
.1cb8	c8		iny				iny
.1cb9	b1 28		lda ($28),y			lda 	(codePtr),y
.1cbb	d5 58		cmp $58,x			cmp 	esInt1,x
.1cbd	f0 10		beq $1ccf			beq 	_GotoFound
.1cbf					_GotoNext:
.1cbf	a0 00		ldy #$00			ldy 	#0 							; go next line
.1cc1	b1 28		lda ($28),y			lda 	(codePtr),y
.1cc3	18		clc				clc
.1cc4	65 28		adc $28				adc 	codePtr
.1cc6	85 28		sta $28				sta 	codePtr
.1cc8	90 e1		bcc $1cab			bcc 	_GotoSearch
.1cca	e6 29		inc $29				inc 	codePtr+1
.1ccc	4c ab 1c	jmp $1cab			jmp 	_GotoSearch
.1ccf					_GotoFound:
.1ccf	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1cd1	60		rts				rts
.1cd2					_GotoError:
.1cd2	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1cd4	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0bee					InputBuffer:
>0bee							.fill 	MaxInputSize+1
.1cd7					Command_Input:
.1cd7	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1cd9	c8		iny				iny
.1cda	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1cdc	f0 f9		beq $1cd7			beq 	Command_Input
.1cde	88		dey				dey 							; undo consume
.1cdf	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1ce1	f0 54		beq $1d37			beq 	_CIExit 				; : or EOL, exit
.1ce3	c9 80		cmp #$80			cmp 	#TOK_EOL
.1ce5	f0 50		beq $1d37			beq 	_CIExit
.1ce7	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1ce9	90 12		bcc $1cfd			bcc 	_CIVariable
.1ceb	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1ced	d0 43		bne $1d32			bne 	_CISyntax
.1cef	a2 00		ldx #$00			ldx 	#0
.1cf1	20 13 2b	jsr $2b13			jsr 	EvaluateString 			; evaluate and print string
.1cf4	20 10 1f	jsr $1f10			jsr 	TOSToTemp0
.1cf7	20 06 1e	jsr $1e06			jsr 	PrintString
.1cfa	4c d7 1c	jmp $1cd7			jmp 	Command_Input
.1cfd					_CIVariable:
.1cfd	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1cff	20 51 2b	jsr $2b51			jsr 	EvaluateReference  		; this is where its going
.1d02					_CIRetry:
.1d02	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1d04	a2 14		ldx #$14		ldx	#20
.1d06	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d09	98		tya				tya
.1d0a	48		pha				pha
.1d0b	20 4b 1d	jsr $1d4b			jsr 	InputString 			; input a string (manually)
.1d0e	a2 01		ldx #$01			ldx 	#1
.1d10	20 38 1d	jsr $1d38			jsr 	BufferToStackX 			; make stack,x ref input string.
.1d13	a5 48		lda $48				lda 	esType 					; if target type numeric
.1d15	29 40		and #$40			and 	#$40 					; then convert to number
.1d17	d0 11		bne $1d2a			bne 	_CIWrite
.1d19	a2 01		ldx #$01			ldx 	#1
.1d1b	20 10 1f	jsr $1f10			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1d1e	a9 0a		lda #$0a			lda 	#10
.1d20	20 1e 30	jsr $301e			jsr 	MInt32FromString 		; convert it back from a string.
.1d23	68		pla				pla
.1d24	a8		tay				tay
.1d25	b0 03		bcs $1d2a			bcs 	_CIWrite 				; successfully converted.
.1d27	18		clc				clc 							; default fail FP conversion
.1d28	90 d8		bcc $1d02			bcc		_CIRetry				; failed, try again.
.1d2a					_CIWrite:
.1d2a	a2 00		ldx #$00			ldx 	#0
.1d2c	20 ae 1e	jsr $1eae			jsr 	WriteValue
.1d2f	4c d7 1c	jmp $1cd7			jmp 	Command_Input
.1d32					_CISyntax:
.1d32	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d34	20 e0 14	jsr $14e0		jsr	errorHandler
.1d37					_CIExit:
.1d37	60		rts				rts
.1d38					BufferToStackX:
.1d38	a9 ee		lda #$ee			lda 	#InputBuffer & $FF
.1d3a	95 50		sta $50,x			sta 	esInt0,x
.1d3c	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1d3e	95 58		sta $58,x			sta 	esInt1,x
.1d40	a9 00		lda #$00			lda 	#0
.1d42	95 60		sta $60,x			sta 	esInt2,x
.1d44	95 68		sta $68,x			sta 	esInt3,x
.1d46	a9 40		lda #$40			lda 	#$40
.1d48	95 48		sta $48,x			sta 	esType,x
.1d4a	60		rts				rts
.1d4b					InputString:
.1d4b	a9 00		lda #$00			lda 	#0
.1d4d	8d ee 0b	sta $0bee			sta 	InputBuffer
.1d50					_InputLoop:
.1d50	a2 00		ldx #$00		ldx	#0
.1d52	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d55	a2 0a		ldx #$0a		ldx	#10
.1d57	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d5a	c9 00		cmp #$00			cmp 	#0
.1d5c	f0 f2		beq $1d50			beq 	_InputLoop
.1d5e	c9 08		cmp #$08			cmp 	#8
.1d60	f0 19		beq $1d7b			beq 	_InputBackspace
.1d62	c9 0d		cmp #$0d			cmp 	#13
.1d64	f0 21		beq $1d87			beq 	_InputExit
.1d66	ae ee 0b	ldx $0bee			ldx 	InputBuffer
.1d69	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1d6b	f0 e3		beq $1d50			beq 	_InputLoop
.1d6d	9d ef 0b	sta $0bef,x			sta 	InputBuffer+1,x 		; write char
.1d70	ee ee 0b	inc $0bee			inc 	InputBuffer 			; advance count.
.1d73					_InputPrintLoop:
.1d73	a2 14		ldx #$14		ldx	#20
.1d75	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d78	4c 50 1d	jmp $1d50			jmp	 	_InputLoop
.1d7b					_InputBackspace:
.1d7b	ad ee 0b	lda $0bee			lda 	InputBuffer 			; at start
.1d7e	f0 d0		beq $1d50			beq 	_InputLoop
.1d80	ce ee 0b	dec $0bee			dec 	InputBuffer
.1d83	a9 08		lda #$08			lda 	#8
.1d85	d0 ec		bne $1d73			bne 	_InputPrintLoop
.1d87					_InputExit:
.1d87	a2 04		ldx #$04		ldx	#4
.1d89	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d8c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0c0f					lastPrintToken:
>0c0f							.fill 	1
.1d8d					Command_Print:
.1d8d	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1d8f	8d 0f 0c	sta $0c0f			sta 	lastPrintToken
.1d92	88		dey				dey
.1d93					_PrintLoopSkip:
.1d93	c8		iny				iny
.1d94					_PrintLoop:
.1d94	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1d96	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1d98	f0 5b		beq $1df5			beq 	_PrintExit
.1d9a	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1d9c	f0 57		beq $1df5			beq 	_PrintExit
.1d9e	8d 0f 0c	sta $0c0f			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1da1	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1da3	f0 ee		beq $1d93			beq 	_PrintLoopSkip
.1da5	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1da7	f0 3c		beq $1de5			beq	 	_PrintNewLine
.1da9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1dab	f0 40		beq $1ded			beq 	_PrintTab
.1dad	20 fd 2a	jsr $2afd			jsr 	EvaluateRoot 				; evaluate something at the root
.1db0	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1db2	85 2a		sta $2a				sta 	temp0
.1db4	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1db6	85 2b		sta $2b				sta 	1+(temp0)
.1db8	a5 48		lda $48				lda 	esType 						; get type
.1dba	f0 15		beq $1dd1			beq		_PrintInteger
.1dbc	4a		lsr a				lsr 	a 							; check for floating point
.1dbd	b0 08		bcs $1dc7			bcs 	_PrintFloat
.1dbf					_PrintString:
.1dbf	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1dc1	20 10 1f	jsr $1f10			jsr 	TOSToTemp0
.1dc4	4c df 1d	jmp $1ddf			jmp 	_PrintTemp0 				; print no leading space.
.1dc7					_PrintFloat:
.1dc7	a9 00		lda #$00			lda 	#0 							; stack level.
.1dc9	a2 14		ldx #$14		ldx	#20
.1dcb	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.1dce	4c d8 1d	jmp $1dd8			jmp 	_PrintSpaceTemp0
.1dd1					_PrintInteger:
.1dd1	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1dd3	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1dd5	20 06 31	jsr $3106			jsr 	MInt32ToString				; convert to text
.1dd8					_PrintSpaceTemp0:
.1dd8	a9 20		lda #$20			lda 	#32
.1dda	a2 14		ldx #$14		ldx	#20
.1ddc	20 bf 14	jsr $14bf		jsr	deviceHandler
.1ddf					_PrintTemp0:
.1ddf	20 06 1e	jsr $1e06			jsr 	PrintString
.1de2	4c 94 1d	jmp $1d94			jmp 	_PrintLoop
.1de5					_PrintNewLine:
.1de5	a2 04		ldx #$04		ldx	#4
.1de7	20 bf 14	jsr $14bf		jsr	deviceHandler
.1dea	4c 93 1d	jmp $1d93			jmp 	_PrintLoopSkip
.1ded					_PrintTab:
.1ded	a2 1a		ldx #$1a		ldx	#26
.1def	20 bf 14	jsr $14bf		jsr	deviceHandler
.1df2	4c 93 1d	jmp $1d93			jmp 	_PrintLoopSkip
.1df5					_PrintExit:
.1df5	ad 0f 0c	lda $0c0f			lda		lastPrintToken 				; check last token
.1df8	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1dfa	f0 09		beq $1e05			beq 	_PrintExit2
.1dfc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1dfe	f0 05		beq $1e05			beq 	_PrintExit2
.1e00	a2 04		ldx #$04		ldx	#4
.1e02	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e05					_PrintExit2:
.1e05	60		rts				rts
.1e06					PrintString:
.1e06	8a		txa				txa
.1e07	48		pha				pha
.1e08	98		tya				tya
.1e09	48		pha				pha
.1e0a	a0 00		ldy #$00			ldy 	#0							; get length
.1e0c	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e0e	aa		tax				tax 								; into X
.1e0f	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1e11	f0 10		beq $1e23			beq 	_PSExit
.1e13	ca		dex				dex
.1e14	8a		txa				txa
.1e15	48		pha				pha
.1e16	c8		iny				iny
.1e17	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e19	a2 14		ldx #$14		ldx	#20
.1e1b	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e1e	68		pla				pla
.1e1f	aa		tax				tax
.1e20	4c 0f 1e	jmp $1e0f			jmp 	_PSLoop
.1e23					_PSExit:
.1e23	68		pla				pla
.1e24	a8		tay				tay
.1e25	68		pla				pla
.1e26	aa		tax				tax
.1e27	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.1e28					Command_CLS:
.1e28	a2 02		ldx #$02		ldx	#2
.1e2a	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e2d	60		rts				rts
.1e2e					Command_Ink:
.1e2e	a2 00		ldx #$00			ldx 	#0
.1e30	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger
.1e33	a2 08		ldx #$08		ldx	#8
.1e35	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e38	60		rts				rts
.1e39					Command_Paper:
.1e39	a2 00		ldx #$00			ldx 	#0
.1e3b	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger
.1e3e	a2 12		ldx #$12		ldx	#18
.1e40	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e43	60		rts				rts
.1e44					Command_Locate:
.1e44	a2 00		ldx #$00			ldx 	#0
.1e46	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger
.1e49	20 30 32	jsr $3230			jsr 	CheckComma
.1e4c	e8		inx				inx
.1e4d	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger
.1e50	98		tya				tya
.1e51	48		pha				pha
.1e52	a4 51		ldy $51				ldy 	esInt0+1
.1e54	a5 50		lda $50				lda 	esInt0
.1e56	a2 10		ldx #$10		ldx	#16
.1e58	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e5b	68		pla				pla
.1e5c	a8		tay				tay
.1e5d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.1e5e					Command_VDU:
.1e5e	20 1c 2b	jsr $2b1c			jsr 	EvaluateRootInteger 			; get integer at root.
.1e61	a5 50		lda $50				lda 	esInt0
.1e63	a2 14		ldx #$14		ldx	#20
.1e65	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e68					_CVNext:
.1e68	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.1e6a	c8		iny				iny
.1e6b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.1e6d	f0 ef		beq $1e5e			beq 	Command_VDU
.1e6f	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1e71	d0 0a		bne $1e7d			bne 	_CVExit
.1e73	a5 58		lda $58				lda 	esInt1
.1e75	a2 14		ldx #$14		ldx	#20
.1e77	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e7a	4c 68 1e	jmp $1e68			jmp 	_CVNext
.1e7d	88		dey		_CVExit:dey
.1e7e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.1e7f					Command_Assert:
.1e7f	20 1c 2b	jsr $2b1c			jsr 	EvaluateRootInteger 		; what is being asserted.
.1e82	20 d7 31	jsr $31d7			jsr 	MInt32Zero 					; is it true ?
.1e85	f0 01		beq $1e88			beq 	_CAError
.1e87	60		rts				rts
.1e88					_CAError:
.1e88	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1e8a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.1e8d					Command_Dim:
.1e8d	a2 02		ldx #$02		ldx	#2
.1e8f	20 3d 41	jsr $413d		jsr	variableHandler
.1e92	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1e94	c8		iny				iny
.1e95	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1e97	f0 f4		beq $1e8d			beq 	Command_Dim
.1e99	88		dey				dey 								; unpick get
.1e9a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.1e9b					CommandLet:
.1e9b	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1e9d	20 51 2b	jsr $2b51			jsr 	EvaluateReference
.1ea0	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1ea2	20 18 32	jsr $3218			jsr 	CheckToken
.1ea5	e8		inx				inx 								; do RHS
.1ea6	20 ff 2a	jsr $2aff			jsr 	Evaluate 					; evaluate and dereference
.1ea9	ca		dex				dex
.1eaa	20 ae 1e	jsr $1eae			jsr 	WriteValue 					; write it out
.1ead	60		rts				rts
.1eae					WriteValue:
.1eae	98		tya				tya
.1eaf	48		pha				pha
.1eb0	20 10 1f	jsr $1f10			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1eb3	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.1eb5	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.1eb7	29 40		and #$40			and 	#$40
.1eb9	d0 50		bne $1f0b			bne		_WVType
.1ebb	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1ebd	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.1ebf	29 40		and #$40			and 	#$40
.1ec1	d0 1f		bne $1ee2			bne 	_WVCopyString
.1ec3	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.1ec5	15 49		ora $49,x			ora 	esType+1,x
.1ec7	4a		lsr a				lsr 	a
.1ec8	90 22		bcc $1eec			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1eca	b5 48		lda $48,x			lda 	esType,x
.1ecc	4a		lsr a				lsr 	a
.1ecd	90 3c		bcc $1f0b			bcc 	_WVType
.1ecf	e8		inx				inx 								; force the value being written to be a float.
.1ed0	20 61 27	jsr $2761			jsr 	BPMakeFloat
.1ed3	ca		dex				dex
.1ed4	20 10 1f	jsr $1f10			jsr 	TOSToTemp0 					; set Temp0 to write address
.1ed7	e8		inx				inx
.1ed8	8a		txa				txa
.1ed9	a2 20		ldx #$20		ldx	#32
.1edb	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.1ede	aa		tax				tax
.1edf	4c 08 1f	jmp $1f08			jmp 	_WVCopyExit
.1ee2					_WVCopyString:
.1ee2	8a		txa				txa
.1ee3	a2 0e		ldx #$0e		ldx	#14
.1ee5	20 56 35	jsr $3556		jsr	stringHandler
.1ee8	aa		tax				tax
.1ee9	4c 08 1f	jmp $1f08			jmp 	_WVCopyExit
.1eec					_WVCopyData4:
.1eec	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.1eee	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1ef0	d0 10		bne $1f02			bne 	_WVCopyData1
.1ef2	a0 03		ldy #$03			ldy 	#3
.1ef4	b5 69		lda $69,x			lda 	esInt3+1,x
.1ef6	91 2a		sta ($2a),y			sta 	(temp0),y
.1ef8	88		dey				dey
.1ef9	b5 61		lda $61,x			lda 	esInt2+1,x
.1efb	91 2a		sta ($2a),y			sta 	(temp0),y
.1efd	88		dey				dey
.1efe	b5 59		lda $59,x			lda 	esInt1+1,x
.1f00	91 2a		sta ($2a),y			sta 	(temp0),y
.1f02					_WVCopyData1:
.1f02	a0 00		ldy #$00			ldy 	#0
.1f04	b5 51		lda $51,x			lda 	esInt0+1,x
.1f06	91 2a		sta ($2a),y			sta 	(temp0),y
.1f08					_WVCopyExit:
.1f08	68		pla				pla
.1f09	a8		tay				tay
.1f0a	60		rts				rts
.1f0b					_WVType:
.1f0b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1f0d	20 e0 14	jsr $14e0		jsr	errorHandler
.1f10					TOSToTemp0:
.1f10	b5 50		lda $50,x			lda 	esInt0,x
.1f12	85 2a		sta $2a				sta 	temp0
.1f14	b5 58		lda $58,x			lda 	esInt1,x
.1f16	85 2b		sta $2b				sta 	temp0+1
.1f18	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.1f19					Command_Poke:
.1f19	a9 01		lda #$01			lda 	#1
.1f1b	d0 06		bne $1f23			bne 	PokeGeneral
.1f1d					Command_Doke:
.1f1d	a9 02		lda #$02			lda 	#2
.1f1f	d0 02		bne $1f23			bne 	PokeGeneral
.1f21					Command_Loke:
.1f21	a9 03		lda #$03			lda 	#3
.1f23					PokeGeneral:
.1f23	48		pha				pha 								; save id (PDL = 123)
.1f24	20 1c 2b	jsr $2b1c			jsr 	EvaluateRootInteger 		; target address
.1f27	20 30 32	jsr $3230			jsr	 	CheckComma
.1f2a	e8		inx				inx
.1f2b	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger 			; what value to POKE ?
.1f2e	ca		dex				dex
.1f2f	20 10 1f	jsr $1f10			jsr 	TOSToTemp0 					; temp0 points to the target address
.1f32	84 32		sty $32				sty 	tempShort 					; save Y
.1f34	68		pla				pla 								; get copy type (1-3) and dispatch
.1f35	aa		tax				tax
.1f36	ca		dex				dex
.1f37	f0 14		beq $1f4d			beq 	_Poke1
.1f39	ca		dex				dex
.1f3a	f0 0b		beq $1f47			beq 	_Poke2
.1f3c	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1f3e	a5 69		lda $69				lda 	esInt3+1
.1f40	91 2a		sta ($2a),y			sta 	(temp0),y
.1f42	88		dey				dey
.1f43	a5 61		lda $61				lda 	esInt2+1
.1f45	91 2a		sta ($2a),y			sta 	(temp0),y
.1f47					_Poke2:
.1f47	a0 01		ldy #$01			ldy 	#1
.1f49	a5 59		lda $59				lda 	esInt1+1
.1f4b	91 2a		sta ($2a),y			sta 	(temp0),y
.1f4d					_Poke1:
.1f4d	a0 00		ldy #$00			ldy 	#0
.1f4f	a5 51		lda $51				lda 	esInt0+1
.1f51	91 2a		sta ($2a),y			sta 	(temp0),y
.1f53	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1f55	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.1f56					Command_Rem:
.1f56					Command_Rem2:
.1f56	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1f58	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1f5a	d0 06		bne $1f62			bne 	_CRNotString
.1f5c	c8		iny				iny
.1f5d	98		tya				tya
.1f5e	38		sec				sec
.1f5f	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1f61	a8		tay				tay
.1f62					_CRNotString:
.1f62	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.1f63					CommandStop:
.1f63	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1f65	20 e0 14	jsr $14e0		jsr	errorHandler
.1f68					CommandEnd:
.1f68	4c 99 32	jmp $3299			jmp 	WarmStart
.1f6b					CommandXemu:
.1f6b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1f6e					AdvanceNextLine:
.1f6e	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f70	b1 28		lda ($28),y			lda 	(codePtr),y
.1f72	18		clc				clc 								; add to codePtr
.1f73	65 28		adc $28				adc 	codePtr
.1f75	85 28		sta $28				sta 	codePtr
.1f77	90 02		bcc $1f7b			bcc 	_ANLNoCarry
.1f79	e6 29		inc $29				inc 	codePtr+1
.1f7b					_ANLNoCarry:
.1f7b	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1f7d	f0 e9		beq $1f68			beq 	CommandEnd 					; execute END
.1f7f	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1f81	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.1f82					Command_FOR:
.1f82	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1f84	a2 0b		ldx #$0b			ldx 	#11
.1f86	20 4b 32	jsr $324b			jsr 	RSClaim
.1f89	20 9b 1e	jsr $1e9b			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1f8c	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.1f8e	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1f90	d0 4c		bne $1fde			bne 	_CFType
.1f92	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1f94	20 18 32	jsr $3218			jsr 	CheckToken
.1f97	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1f99	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger				; get terminal value in stack 1
.1f9c	98		tya				tya
.1f9d	48		pha				pha
.1f9e	a0 04		ldy #$04			ldy 	#4
.1fa0	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1fa2	91 37		sta ($37),y			sta 	(rsPointer),y
.1fa4	c8		iny				iny
.1fa5	a5 58		lda $58				lda		esInt1
.1fa7	91 37		sta ($37),y			sta 	(rsPointer),y
.1fa9	c8		iny				iny
.1faa	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1fac	91 37		sta ($37),y			sta 	(rsPointer),y
.1fae	c8		iny				iny
.1faf	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.1fb1	91 37		sta ($37),y			sta 	(rsPointer),y
.1fb3	c8		iny				iny
.1fb4	a5 59		lda $59				lda		esInt1+1
.1fb6	91 37		sta ($37),y			sta 	(rsPointer),y
.1fb8	c8		iny				iny
.1fb9	a5 61		lda $61				lda		esInt2+1
.1fbb	91 37		sta ($37),y			sta 	(rsPointer),y
.1fbd	c8		iny				iny
.1fbe	a5 69		lda $69				lda		esInt3+1
.1fc0	91 37		sta ($37),y			sta 	(rsPointer),y
.1fc2	68		pla				pla
.1fc3	a8		tay				tay
.1fc4	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1fc6	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1fc8	d0 0e		bne $1fd8			bne 	_CFDone
.1fca	c8		iny				iny									; skip over step.
.1fcb	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger 			; get step
.1fce	98		tya				tya
.1fcf	48		pha				pha
.1fd0	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1fd2	a0 06		ldy #$06			ldy 	#6
.1fd4	91 37		sta ($37),y			sta 	(rsPointer),y
.1fd6	68		pla				pla
.1fd7	a8		tay				tay
.1fd8					_CFDone:
.1fd8	a9 01		lda #$01			lda 	#1
.1fda	20 77 32	jsr $3277			jsr 	RSSavePosition 				; save position.
.1fdd	60		rts				rts
.1fde					_CFType:
.1fde	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1fe0	20 e0 14	jsr $14e0		jsr	errorHandler
.1fe3					Command_NEXT:
.1fe3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1fe5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1fe7	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1fe9	f0 05		beq $1ff0			beq 	_isok
.1feb	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1fed	20 e0 14	jsr $14e0		jsr	errorHandler
.1ff0					_isok:
.1ff0	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1ff2	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1ff4	b0 18		bcs $200e			bcs 	_CNNoIndex
.1ff6	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1ff8	20 51 2b	jsr $2b51			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1ffb	98		tya				tya
.1ffc	48		pha				pha
.1ffd	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1fff	b1 37		lda ($37),y			lda 	(rsPointer),y
.2001	d5 50		cmp $50,x			cmp 	esInt0,x
.2003	d0 76		bne $207b			bne 	_CNBadIndex
.2005	c8		iny				iny
.2006	b1 37		lda ($37),y			lda 	(rsPointer),y
.2008	d5 58		cmp $58,x			cmp 	esInt1,x
.200a	d0 6f		bne $207b			bne 	_CNBadIndex
.200c	68		pla				pla
.200d	a8		tay				tay
.200e					_CNNoIndex:
.200e	98		tya				tya
.200f	48		pha				pha
.2010	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2012	b1 37		lda ($37),y			lda 	(rsPointer),y
.2014	85 2a		sta $2a				sta 	temp0
.2016	c8		iny				iny
.2017	b1 37		lda ($37),y			lda 	(rsPointer),y
.2019	85 2b		sta $2b				sta 	temp0+1
.201b	c8		iny				iny
.201c	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.201e	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2020	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2022	10 01		bpl $2025			bpl 	_CNSignX
.2024	ca		dex				dex  								; X = $FF
.2025					_CNSignX:
.2025	18		clc				clc 								; add to the LSB
.2026	a0 00		ldy #$00			ldy 	#0
.2028	71 2a		adc ($2a),y			adc 	(temp0),y
.202a	91 2a		sta ($2a),y			sta 	(temp0),y
.202c					_CNPropogate:
.202c	c8		iny				iny  								; add the sign extended in X to the rest.
.202d	8a		txa				txa
.202e	71 2a		adc ($2a),y			adc 	(temp0),y
.2030	91 2a		sta ($2a),y			sta 	(temp0),y
.2032	c8		iny				iny
.2033	8a		txa				txa
.2034	71 2a		adc ($2a),y			adc 	(temp0),y
.2036	91 2a		sta ($2a),y			sta 	(temp0),y
.2038	c8		iny				iny
.2039	8a		txa				txa
.203a	71 2a		adc ($2a),y			adc 	(temp0),y
.203c	91 2a		sta ($2a),y			sta 	(temp0),y
.203e	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.203f	a5 37		lda $37				lda 	rsPointer
.2041	69 07		adc #$07			adc 	#7
.2043	85 2c		sta $2c				sta 	temp1
.2045	a9 00		lda #$00			lda 	#0
.2047	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2049	a8		tay				tay 								; and clear the Y register again.
.204a	65 38		adc $38				adc 	rsPointer+1
.204c	85 2d		sta $2d				sta 	temp1+1
.204e	38		sec				sec 								; calculate current - limit oring interim values.
.204f	20 87 20	jsr $2087			jsr 	_CNCompare 					; each of these does a byte.
.2052	20 87 20	jsr $2087			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2055	20 87 20	jsr $2087			jsr 	_CNCompare 					; and the carry of the subtraction.
.2058	20 87 20	jsr $2087			jsr 	_CNCompare
.205b	50 02		bvc $205f			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.205d	49 80		eor #$80			eor 	#$80
.205f					_CNNoOverflow:
.205f	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2061	30 1d		bmi $2080			bmi 	_CNCheckDownto
.2063	c9 00		cmp #$00			cmp 	#0
.2065	30 0c		bmi $2073			bmi 	_CNLoopRound 				; loop round if < =
.2067	a5 2e		lda $2e				lda 	temp2
.2069	f0 08		beq $2073			beq 	_CNLoopRound
.206b					_CNLoopExit:
.206b	68		pla				pla
.206c	a8		tay				tay
.206d	a9 0b		lda #$0b			lda 	#11
.206f	20 6d 32	jsr $326d			jsr 	RSFree
.2072	60		rts				rts
.2073					_CNLoopRound:
.2073	68		pla				pla
.2074	a8		tay				tay
.2075	a9 01		lda #$01			lda 	#1
.2077	20 8a 32	jsr $328a			jsr 	RSLoadPosition				; go back to the loop top
.207a	60		rts				rts
.207b					_CNBadIndex:
.207b	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.207d	20 e0 14	jsr $14e0		jsr	errorHandler
.2080					_CNCheckDownto:
.2080	c9 00		cmp #$00			cmp 	#0
.2082	10 ef		bpl $2073			bpl 	_CNLoopRound
.2084	4c 6b 20	jmp $206b			jmp 	_CNLoopExit
.2087					_CNCompare:
.2087	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2089	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.208b	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.208d	85 2e		sta $2e				sta 	temp2
.208f	c8		iny				iny
.2090	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2091					CommandIf:
.2091	20 1c 2b	jsr $2b1c			jsr 	EvaluateRootInteger 		; get what's being tested.
.2094	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2096	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2098	f0 04		beq $209e			beq 	_IfSimple
.209a	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.209c	d0 1b		bne $20b9			bne 	_IfComplex
.209e					_IfSimple:
.209e	20 d7 31	jsr $31d7			jsr 	MInt32Zero					; check if TOS zero
.20a1	f0 10		beq $20b3			beq 	_IfEOL 						; go to next line.
.20a3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.20a5	c8		iny				iny
.20a6	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.20a8	f0 0c		beq $20b6			beq 	_IfGoto 					; do the Goto code
.20aa	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.20ac	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.20ae	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.20b0	f0 04		beq $20b6			beq 	_IfGoto
.20b2	60		rts				rts 								; else continue on this line.
.20b3					_IfEOL:
.20b3	4c 6e 1f	jmp $1f6e			jmp 	AdvanceNextLine 			; go to next line
.20b6					_IfGoto:
.20b6	4c a5 1c	jmp $1ca5			jmp 	CommandGoto
.20b9					_IfComplex:
.20b9	20 d7 31	jsr $31d7			jsr 	MInt32Zero 					; is it true ?
.20bc	f0 01		beq $20bf			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.20be	60		rts				rts 								; else continue.
.20bf					_IFSkip:
.20bf	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.20c1	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.20c3	4c 5b 23	jmp $235b			jmp		ScanForward
.20c6					Command_ELSE:
.20c6	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.20c8	8a		txa				txa
.20c9	4c 5b 23	jmp $235b			jmp		ScanForward
.20cc					Command_ENDIF:
.20cc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0c10					storeSize:
>0c10							.fill 	1
.20cd					CommandLocal:
.20cd	a2 00		ldx #$00			ldx 	#0
.20cf	20 eb 20	jsr $20eb			jsr 	LocaliseVariable 			; localise one.
.20d2					_CLCheckNext:
.20d2	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.20d4	c8		iny				iny
.20d5	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.20d7	f0 06		beq $20df			beq 	_CLAssignment
.20d9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.20db	f0 f0		beq $20cd			beq 	CommandLocal
.20dd	88		dey				dey
.20de	60		rts				rts
.20df					_CLAssignment:
.20df	a2 01		ldx #$01			ldx 	#1
.20e1	20 ff 2a	jsr $2aff			jsr 	Evaluate 					; evaluate RHS
.20e4	ca		dex				dex
.20e5	20 ae 1e	jsr $1eae			jsr 	WriteValue
.20e8	4c d2 20	jmp $20d2			jmp 	_CLCheckNext
.20eb					LocaliseVariable:
.20eb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.20ed	c9 40		cmp #$40			cmp 	#$40
.20ef	b0 67		bcs $2158			bcs 	_LVSyntax
.20f1	8a		txa				txa 								; get the address of that variable.
.20f2	a2 00		ldx #$00		ldx	#0
.20f4	20 3d 41	jsr $413d		jsr	variableHandler
.20f7	aa		tax				tax
.20f8	8a		txa				txa
.20f9	48		pha				pha
.20fa	98		tya				tya
.20fb	48		pha				pha
.20fc	20 10 1f	jsr $1f10			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.20ff	b5 48		lda $48,x			lda 	esType,x 					; get the type
.2101	0a		asl a				asl 	a
.2102	10 16		bpl $211a			bpl 	_LVPushNumber
.2104	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2106	b1 2a		lda ($2a),y			lda 	(temp0),y
.2108	c8		iny				iny
.2109	85 2c		sta $2c				sta 	temp1
.210b	b1 2a		lda ($2a),y			lda 	(temp0),y
.210d	85 2d		sta $2d				sta 	temp1+1
.210f	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2111	b1 2c		lda ($2c),y			lda 	(temp1),y
.2113	aa		tax				tax 								; into X
.2114	e8		inx				inx 								; +1 for length.
.2115	a9 24		lda #$24			lda 	#markerString
.2117	4c 2f 21	jmp $212f			jmp 	_LVWriteFrame
.211a					_LVPushNumber:
.211a	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.211c	85 2c		sta $2c				sta 	temp1
.211e	a5 2b		lda $2b				lda 	temp0+1
.2120	85 2d		sta $2d				sta 	temp1+1
.2122	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.2124	4a		lsr a				lsr 	a
.2125	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2127	a2 04		ldx #$04			ldx 	#VarISize
.2129	90 04		bcc $212f			bcc 	_LVIsInteger
.212b	a9 23		lda #$23			lda 	#markerFloat
.212d	a2 06		ldx #$06			ldx 	#VarFSize
.212f					_LVIsInteger:
.212f					_LVWriteFrame:
.212f	8e 10 0c	stx $0c10			stx 	storeSize 					; number of bytes to copy from (temp0)
.2132	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2133	e8		inx				inx
.2134	e8		inx				inx
.2135	20 4b 32	jsr $324b			jsr 	RSClaim 					; create the stack frame.
.2138	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.213a	a0 01		ldy #$01			ldy 	#1
.213c	91 37		sta ($37),y			sta 	(rsPointer),y
.213e	c8		iny				iny
.213f	a5 2b		lda $2b				lda 	temp0+1
.2141	91 37		sta ($37),y			sta 	(rsPointer),y
.2143	a0 00		ldy #$00			ldy 	#0
.2145					_LVCopyData:
.2145	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2147	c8		iny				iny 								; write allowing for the header bit.
.2148	c8		iny				iny
.2149	c8		iny				iny
.214a	91 37		sta ($37),y			sta 	(rsPointer),y
.214c	88		dey				dey
.214d	88		dey				dey
.214e	ce 10 0c	dec $0c10			dec 	storeSize 					; do it storesize times
.2151	d0 f2		bne $2145			bne 	_LVCopyData
.2153	68		pla				pla
.2154	a8		tay				tay
.2155	68		pla				pla
.2156	aa		tax				tax
.2157	60		rts				rts
.2158					_LVSyntax:
.2158	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.215a	20 e0 14	jsr $14e0		jsr	errorHandler
.215d					RestoreLocals:
.215d	a2 00		ldx #$00			ldx 	#0
.215f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2161	c9 40		cmp #$40			cmp	 	#64
.2163	90 01		bcc $2166			bcc 	_RLocal
.2165	60		rts				rts
.2166					_RLocal:
.2166	8a		txa				txa
.2167	48		pha				pha
.2168	98		tya				tya
.2169	48		pha				pha
.216a	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.216c	b1 37		lda ($37),y			lda 	(rsPointer),y
.216e	85 2a		sta $2a				sta 	temp0
.2170	c8		iny				iny
.2171	b1 37		lda ($37),y			lda 	(rsPointer),y
.2173	85 2b		sta $2b				sta 	temp0+1
.2175	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2177	b1 37		lda ($37),y			lda 	(rsPointer),y
.2179	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.217b	f0 28		beq $21a5			beq 	_RString
.217d	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.217f	c9 25		cmp #$25			cmp 	#markerInt
.2181	f0 02		beq $2185			beq 	_RIsInteger
.2183	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2185					_RIsInteger:
.2185	8a		txa				txa
.2186	48		pha				pha
.2187	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2189					_RCopyBack:
.2189	b1 37		lda ($37),y			lda 	(rsPointer),y
.218b	88		dey				dey
.218c	88		dey				dey
.218d	88		dey				dey
.218e	91 2a		sta ($2a),y			sta 	(temp0),y
.2190	c8		iny				iny
.2191	c8		iny				iny
.2192	c8		iny				iny
.2193	c8		iny				iny
.2194	ca		dex				dex
.2195	d0 f2		bne $2189			bne 	_RCopyBack
.2197	68		pla				pla 								; get size add 3
.2198	18		clc				clc
.2199	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.219b					_RRestoreAAndLoop:
.219b	20 6d 32	jsr $326d			jsr 	RSFree
.219e	68		pla				pla
.219f	a8		tay				tay
.21a0	68		pla				pla
.21a1	aa		tax				tax
.21a2	4c 5d 21	jmp $215d			jmp 	RestoreLocals 				; go see if there are any more locals.
.21a5					_RString:
.21a5	a2 00		ldx #$00			ldx 	#0
.21a7	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.21a9	b1 37		lda ($37),y			lda 	(rsPointer),y
.21ab	95 50		sta $50,x			sta 	esInt0,x
.21ad	c8		iny				iny
.21ae	b1 37		lda ($37),y			lda 	(rsPointer),y
.21b0	95 58		sta $58,x			sta 	esInt1,x
.21b2	18		clc				clc
.21b3	a5 37		lda $37				lda 	rsPointer
.21b5	69 03		adc #$03			adc 	#3
.21b7	95 51		sta $51,x			sta 	esInt0+1,x
.21b9	a5 38		lda $38				lda 	rsPointer+1
.21bb	69 00		adc #$00			adc 	#0
.21bd	95 59		sta $59,x			sta 	esInt1+1,x
.21bf	8a		txa				txa
.21c0	a2 0e		ldx #$0e		ldx	#14
.21c2	20 56 35	jsr $3556		jsr	stringHandler
.21c5	a0 03		ldy #$03			ldy 	#3 							; get string length
.21c7	b1 37		lda ($37),y			lda 	(rsPointer),y
.21c9	18		clc				clc
.21ca	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.21cc	4c 9b 21	jmp $219b			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0c11					paramCount:
>0c11							.fill 	1
.21cf					CallProc:
.21cf	20 57 22	jsr $2257			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.21d2	48		pha				pha 								; save length on stack
.21d3	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.21d5	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.21d7	48		pha				pha
.21d8	a5 2a		lda $2a				lda 	temp0
.21da	48		pha				pha
.21db	98		tya				tya 								; calculate Y + length
.21dc	18		clc				clc
.21dd	65 32		adc $32				adc 	tempShort
.21df	a8		tay				tay
.21e0	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.21e2					_CallProcEvalParams:
.21e2	e8		inx				inx
.21e3	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.21e5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.21e7	f0 0b		beq $21f4			beq 	_CPDoneParams
.21e9	20 ff 2a	jsr $2aff			jsr 	Evaluate 					; evaluate a parameter
.21ec	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.21ee	c8		iny				iny
.21ef	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.21f1	f0 ef		beq $21e2			beq 	_CallProcEvalParams
.21f3	88		dey				dey 								; undo consumption.
.21f4					_CPDoneParams:
.21f4	20 23 32	jsr $3223			jsr 	CheckRightParen 			; check closing parenthesis.
.21f7	8e 11 0c	stx $0c11			stx 	paramCount 					; store parameter count+1
.21fa	a2 04		ldx #$04			ldx 	#4							; make space on stack
.21fc	a9 50		lda #$50			lda 	#markerPROC
.21fe	20 4b 32	jsr $324b			jsr 	RSClaim
.2201	a9 01		lda #$01			lda 	#1 							; store return address.
.2203	20 77 32	jsr $3277			jsr 	RSSavePosition
.2206	68		pla				pla 								; get the new code Ptr
.2207	85 28		sta $28				sta 	codePtr
.2209	68		pla				pla
.220a	85 29		sta $29				sta 	codePtr+1
.220c	68		pla				pla 								; length of name + 4 is the param start.
.220d	18		clc				clc
.220e	69 04		adc #$04			adc 	#4
.2210	a8		tay				tay
.2211	a2 ff		ldx #$ff			ldx 	#$FF
.2213					_CPLoadParameters:
.2213	e8		inx				inx 								; point to where the address should be loaded.
.2214	ec 11 0c	cpx $0c11			cpx 	paramCount 					; too many parameters in definition ?
.2217	f0 1e		beq $2237			beq 	_CPParamError
.2219	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.221b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.221d	f0 0e		beq $222d			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.221f	20 eb 20	jsr $20eb			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2222	20 ae 1e	jsr $1eae			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2225	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2227	c8		iny				iny
.2228	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.222a	f0 e7		beq $2213			beq 	_CPLoadParameters
.222c	88		dey				dey 								; no, unconsume and check for )
.222d					_CPParamComplete:
.222d	20 23 32	jsr $3223			jsr 	CheckRightParen 			; check )
.2230	e8		inx				inx 								; check right number of parameters have been consumed
.2231	ec 11 0c	cpx $0c11			cpx 	paramCount
.2234	d0 01		bne $2237			bne 	_CPParamError
.2236	60		rts				rts
.2237					_CPParamError:
.2237	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2239	20 e0 14	jsr $14e0		jsr	errorHandler
.223c					ReturnProc:
.223c	20 5d 21	jsr $215d			jsr 	RestoreLocals 				; get the locals back.
.223f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2241	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2243	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2245	f0 05		beq $224c			beq 	_isok
.2247	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2249	20 e0 14	jsr $14e0		jsr	errorHandler
.224c					_isok:
.224c	a9 01		lda #$01			lda 	#1
.224e	20 8a 32	jsr $328a			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2251	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2253	20 6d 32	jsr $326d			jsr 	RSFree
.2256	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0c12					procList:
>0c12							.fill 	2		 					; terminated by name high being zero.
.0c14					yInLine:
>0c14							.fill 	1
.2257					FindProcedure:
.2257	8c 14 0c	sty $0c14			sty 	yInLine 					; save current position.
.225a	20 15 23	jsr $2315			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.225d	85 2c		sta $2c				sta 	temp1
.225f	ad 12 0c	lda $0c12			lda		procList 					; put procList address in temp2
.2262	85 2e		sta $2e				sta 	temp2
.2264	ad 13 0c	lda $0c13			lda 	procList+1
.2267	85 2f		sta $2f				sta 	temp2+1
.2269	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.226b					_FPLoop:
.226b	b1 2e		lda ($2e),y			lda 	(temp2),y
.226d	f0 4f		beq $22be			beq 	_FPError 					; if so, we don't know this procedure.
.226f	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2271	c8		iny				iny
.2272	b1 2e		lda ($2e),y			lda 	(temp2),y
.2274	85 2a		sta $2a				sta 	temp0
.2276	c8		iny				iny
.2277	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2279	c5 2c		cmp $2c				cmp 	temp1
.227b	d0 2b		bne $22a8			bne 	_FPNext 					; hash is different, go to next.
.227d	38		sec				sec
.227e	ad 14 0c	lda $0c14			lda 	yInLine 					; position in line must be at least 4
.2281	e9 04		sbc #$04			sbc 	#4
.2283	18		clc				clc
.2284	65 28		adc $28				adc 	codePtr
.2286	85 30		sta $30				sta 	temp3
.2288	a5 29		lda $29				lda 	codePtr+1
.228a	69 00		adc #$00			adc 	#0
.228c	85 31		sta $31				sta 	temp3+1
.228e	98		tya				tya
.228f	48		pha				pha
.2290	a0 04		ldy #$04			ldy 	#4
.2292					_FPCName:
.2292	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2294	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2296	d0 0e		bne $22a6			bne 	_FPpulYNext 				; if different go to next one.
.2298	c8		iny				iny
.2299	c9 3a		cmp #$3a			cmp 	#$3A
.229b	90 f5		bcc $2292			bcc 	_FPCName 					; compare the whole lot....
.229d	68		pla				pla 								; throw away the saved Y
.229e	98		tya				tya 								; length of name is Y-4
.229f	38		sec				sec
.22a0	e9 04		sbc #$04			sbc 	#4
.22a2	ac 14 0c	ldy $0c14			ldy 	yInLine  					; get the original Y back
.22a5	60		rts				rts
.22a6					_FPpulYNext:
.22a6	68		pla				pla
.22a7	a8		tay				tay
.22a8					_FPNext:
.22a8	c8		iny				iny 								; next procedure record.
.22a9	10 c0		bpl $226b			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.22ab	98		tya				tya 								; subtract 128 from Y
.22ac	38		sec				sec
.22ad	e9 80		sbc #$80			sbc 	#128
.22af	a8		tay				tay
.22b0	18		clc				clc 								; add 128 to temp2, so we can have more than
.22b1	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.22b3	69 80		adc #$80			adc 	#128
.22b5	85 2e		sta $2e				sta 	temp2
.22b7	90 b2		bcc $226b			bcc 	_FPLoop
.22b9	e6 2f		inc $2f				inc 	temp2+1
.22bb	4c 6b 22	jmp $226b			jmp 	_FPLoop
.22be					_FPError:
.22be	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.22c0	20 e0 14	jsr $14e0		jsr	errorHandler
.22c3					ScanProc:
.22c3	98		tya				tya
.22c4	48		pha				pha
.22c5	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.22c7	8d 12 0c	sta $0c12			sta 	procList
.22ca	a5 36		lda $36				lda 	lowMemory+1
.22cc	8d 13 0c	sta $0c13			sta 	procList+1
.22cf	20 3f 26	jsr $263f			jsr 	ResetCodeAddress 			; back to the start.
.22d2					_ScanLoop:
.22d2	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.22d4	b1 28		lda ($28),y			lda 	(codePtr),y
.22d6	f0 2a		beq $2302			beq 	_ScanExit
.22d8	a0 03		ldy #$03			ldy 	#3							; get first token
.22da	b1 28		lda ($28),y			lda 	(codePtr),y
.22dc	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.22de	d0 12		bne $22f2			bne 	_ScanNext
.22e0	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.22e2	20 0a 23	jsr $230a			jsr 	_ScanWrite
.22e5	a5 28		lda $28				lda 	codePtr
.22e7	20 0a 23	jsr $230a			jsr 	_ScanWrite
.22ea	a0 04		ldy #$04			ldy 	#4 							; start of name part
.22ec	20 15 23	jsr $2315			jsr 	CalculateProcedureHash 		; calculate procedure hash
.22ef	20 0a 23	jsr $230a			jsr 	_ScanWrite					; and write that
.22f2					_ScanNext:
.22f2	18		clc				clc
.22f3	a0 00		ldy #$00			ldy 	#0
.22f5	b1 28		lda ($28),y			lda 	(codePtr),y
.22f7	65 28		adc $28				adc 	codePtr
.22f9	85 28		sta $28				sta 	codePtr
.22fb	90 d5		bcc $22d2			bcc 	_ScanLoop
.22fd	e6 29		inc $29				inc 	codePtr+1
.22ff	4c d2 22	jmp $22d2			jmp 	_ScanLoop
.2302					_ScanExit:
.2302	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2304	20 0a 23	jsr $230a			jsr 	_ScanWrite
.2307	68		pla				pla
.2308	a8		tay				tay
.2309	60		rts				rts
.230a					_ScanWrite:
.230a	a0 00		ldy #$00			ldy 	#0
.230c	91 35		sta ($35),y			sta 	(lowMemory),y
.230e	e6 35		inc $35				inc 	lowMemory
.2310	d0 02		bne $2314			bne 	_SWNoCarry
.2312	e6 36		inc $36				inc 	lowMemory+1
.2314					_SWNoCarry:
.2314	60		rts				rts
.2315					CalculateProcedureHash:
.2315	a9 00		lda #$00			lda 	#0 							; clear hash.
.2317	85 2a		sta $2a				sta 	temp0
.2319					_CPHLoop:
.2319	18		clc				clc 								; add character and rotate and add carry back in
.231a	b1 28		lda ($28),y			lda 	(codePtr),y
.231c	65 2a		adc $2a				adc 	temp0
.231e	6a		ror a				ror 	a
.231f	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2321	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2323	b1 28		lda ($28),y			lda 	(codePtr),y
.2325	c8		iny				iny 								; advance incase we go round again.
.2326	c9 3a		cmp #$3a			cmp 	#$3A
.2328	90 ef		bcc $2319			bcc 	_CPHLoop
.232a	a5 2a		lda $2a				lda 	temp0
.232c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.232d					Command_Repeat:
.232d	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.232f	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2331	20 4b 32	jsr $324b			jsr 	RSClaim
.2334	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2336	20 77 32	jsr $3277			jsr 	RSSavePosition
.2339	60		rts				rts
.233a					Command_Until:
.233a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.233c	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.233e	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2340	f0 05		beq $2347			beq 	_isok
.2342	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2344	20 e0 14	jsr $14e0		jsr	errorHandler
.2347					_isok:
.2347	20 1c 2b	jsr $2b1c			jsr 	EvaluateRootInteger 		; at the bottom.
.234a	20 d7 31	jsr $31d7			jsr 	MInt32Zero					; check if TOS zero
.234d	d0 06		bne $2355			bne 	_CUExit
.234f	a9 01		lda #$01			lda 	#1
.2351	20 8a 32	jsr $328a			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2354	60		rts				rts
.2355					_CUExit:
.2355	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2357	20 6d 32	jsr $326d			jsr 	RSFree
.235a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.235b					ScanForward:
.235b	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.235d	86 2d		stx $2d				stx 	temp1+1
.235f	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2361	85 2e		sta $2e				sta 	temp2
.2363	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2365	c8		iny				iny
.2366	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2368	d0 08		bne $2372			bne 	_SFNoCheck 					; if so, check token against entered values.
.236a	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.236c	f0 24		beq $2392			beq 	_SFExit 					; at the same strcture depth.
.236e	c5 2d		cmp $2d				cmp 	temp1+1
.2370	f0 20		beq $2392			beq 	_SFExit
.2372					_SFNoCheck:
.2372	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2374	90 ed		bcc $2363			bcc 	_SFLoop
.2376	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2378	90 19		bcc $2393			bcc 	_SFSpecials
.237a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.237c	90 e5		bcc $2363			bcc 	_SFLoop
.237e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2380	b0 e1		bcs $2363			bcs 	_SFLoop
.2382	aa		tax				tax  								; token in X, and look up the adjuster.
.2383	bd 3a 2a	lda $2a3a,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2386	38		sec				sec 								; convert to an offset ($FF,$01)
.2387	e9 81		sbc #$81			sbc 	#$81
.2389	18		clc				clc 								; add to depth
.238a	65 2e		adc $2e				adc 	temp2
.238c	85 2e		sta $2e				sta 	temp2
.238e	10 d3		bpl $2363			bpl 	_SFLoop 					; +ve okay to continue
.2390	30 07		bmi $2399			bmi 	SFError 					; if gone -ve then we have a nesting error
.2392	60		rts		_SFExit:rts
.2393					_SFSpecials:
.2393	20 9e 23	jsr $239e			jsr 	ScannerSkipSpecial
.2396	4c 63 23	jmp $2363			jmp 	_SFLoop
.2399					SFError:
.2399	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.239b	20 e0 14	jsr $14e0		jsr	errorHandler
.239e					ScannerSkipSpecial:
.239e	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.23a0	f0 10		beq $23b2			beq 	_SFNextLine
.23a2	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.23a4	f0 2b		beq $23d1			beq 	_SFFloatSkip
.23a6	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.23a8	f0 02		beq $23ac			beq 	_SFSkipString
.23aa	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.23ab	60		rts				rts 								; token.
.23ac					_SFSkipString:
.23ac	98		tya				tya
.23ad	38		sec				sec
.23ae	71 28		adc ($28),y			adc 	(codePtr),y
.23b0	a8		tay				tay
.23b1	60		rts				rts
.23b2					_SFNextLine:
.23b2	a0 00		ldy #$00			ldy 	#0 							; get offset
.23b4	b1 28		lda ($28),y			lda 	(codePtr),y
.23b6	18		clc				clc 								; add to code pointer.
.23b7	65 28		adc $28				adc 	codePtr
.23b9	85 28		sta $28				sta 	codePtr
.23bb	90 02		bcc $23bf			bcc		_SFNLNoCarry
.23bd	e6 29		inc $29				inc 	codePtr+1
.23bf					_SFNLNoCarry:
.23bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.23c1	d0 0b		bne $23ce			bne		_SFXNL 						; no go round again
.23c3	a5 2c		lda $2c				lda 	temp1
.23c5	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.23c7	d0 d0		bne $2399			bne 	SFError 					; read uses this to search for data statements
.23c9	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.23cb	20 e0 14	jsr $14e0		jsr	errorHandler
.23ce	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.23d0	60		rts				rts
.23d1					_SFFloatSkip:
.23d1	98		tya				tya 								; skip over an embedded float.
.23d2	18		clc				clc
.23d3	69 05		adc #$05			adc 	#FloatEmbeddedSize
.23d5	a8		tay				tay
.23d6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.23d7					Command_While:
.23d7	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.23d9	a2 04		ldx #$04			ldx 	#4
.23db	20 4b 32	jsr $324b			jsr 	RSClaim 					; create on stack.
.23de	88		dey				dey
.23df	a9 01		lda #$01			lda 	#1
.23e1	20 77 32	jsr $3277			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.23e4	c8		iny				iny
.23e5	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger				; get the conditional
.23e8	20 d7 31	jsr $31d7			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.23eb	f0 01		beq $23ee			beq 	_CWFail
.23ed	60		rts				rts
.23ee					_CWFail:
.23ee	a9 04		lda #$04			lda 	#4
.23f0	20 6d 32	jsr $326d			jsr 	RSFree 						; close the just opened position.
.23f3	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.23f5	aa		tax				tax
.23f6	20 5b 23	jsr $235b			jsr 	ScanForward
.23f9	60		rts				rts
.23fa					Command_Wend:
.23fa	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.23fc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23fe	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2400	f0 05		beq $2407			beq 	_isok
.2402	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2404	20 e0 14	jsr $14e0		jsr	errorHandler
.2407					_isok:
.2407	a9 01		lda #$01			lda 	#1
.2409	20 8a 32	jsr $328a			jsr 	RSLoadPosition				; go back until true
.240c	a9 04		lda #$04			lda 	#4
.240e	20 6d 32	jsr $326d			jsr 	RSFree 						; close the loop
.2411	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2412					CommandClear:
.2412					XCommandClear:
.2412	98		tya				tya
.2413	48		pha				pha
.2414	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2417	85 33		sta $33				sta 	highMemory
.2419	ad cd 0a	lda $0acd			lda 	endMemory+1
.241c	85 34		sta $34				sta 	highMemory+1
.241e	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2421	85 2a		sta $2a				sta 	temp0
.2423	ad c9 0a	lda $0ac9			lda 	basePage+1
.2426	85 2b		sta $2b				sta 	temp0+1
.2428					_CCFindEnd:
.2428	a0 00		ldy #$00			ldy 	#0
.242a	b1 2a		lda ($2a),y			lda 	(temp0),y
.242c	f0 0c		beq $243a			beq 	_CCFoundEnd 				; offset zero is end.
.242e	18		clc				clc
.242f	65 2a		adc $2a				adc 	temp0 						; move to next line
.2431	85 2a		sta $2a				sta 	temp0
.2433	90 f3		bcc $2428			bcc 	_CCFindEnd
.2435	e6 2b		inc $2b				inc 	temp0+1
.2437	4c 28 24	jmp $2428			jmp 	_CCFindEnd
.243a					_CCFoundEnd:
.243a	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.243c	85 35		sta $35				sta 	lowMemory
.243e	a5 2b		lda $2b				lda 	temp0+1
.2440	85 36		sta $36				sta 	lowMemory+1
.2442	18		clc				clc 								; put temp0+1 in endProgram
.2443	a5 2a		lda $2a				lda 	temp0
.2445	69 01		adc #$01			adc 	#1
.2447	8d ca 0a	sta $0aca			sta 	endProgram
.244a	a5 2b		lda $2b				lda 	temp0+1
.244c	69 00		adc #$00			adc 	#0
.244e	8d cb 0a	sta $0acb			sta 	endProgram+1
.2451	18		clc				clc 								; put a bit of space in.
.2452	a5 35		lda $35				lda 	lowMemory
.2454	69 04		adc #$04			adc 	#4
.2456	85 35		sta $35				sta 	lowMemory
.2458	90 02		bcc $245c			bcc 	_CCNoCarry
.245a	e6 36		inc $36				inc 	lowMemory+1
.245c					_CCNoCarry:
.245c	20 3d 32	jsr $323d			jsr 	RSReset 					; reset the return stack.
.245f	a2 04		ldx #$04		ldx	#4
.2461	20 3d 41	jsr $413d		jsr	variableHandler
.2464	20 c3 22	jsr $22c3			jsr 	ScanProc 					; scan for procedures
.2467	20 48 1c	jsr $1c48			jsr 	CommandRestore 				; do a restore
.246a	68		pla				pla
.246b	a8		tay				tay
.246c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0c15					structIndent:
>0c15							.fill 	1
.246d					CommandList:
.246d	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.246f	8e 15 0c	stx $0c15			stx 	structIndent
.2472	20 b0 31	jsr $31b0			jsr 	MInt32False
.2475	e8		inx				inx
.2476	20 ac 31	jsr $31ac			jsr 	MInt32True
.2479	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.247b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.247d	f0 15		beq $2494			beq 	_CLEndLine
.247f	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2481	30 1b		bmi $249e			bmi 	_CLDoListing 				; do the whole lot.
.2483	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2485	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger
.2488	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.248a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.248c	f0 06		beq $2494			beq 	_CLEndLine
.248e	20 ee 30	jsr $30ee			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2491	4c 9e 24	jmp $249e			jmp 	_CLDoListing 				; own e.g. list 1100
.2494					_CLEndLine:
.2494	c8		iny				iny 								; skip comma
.2495	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2497	30 05		bmi $249e			bmi 	_CLDoListing
.2499	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.249b	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger				; get end
.249e					_CLDoListing:
.249e	20 3f 26	jsr $263f			jsr 	ResetCodeAddress 			; back to the start.
.24a1					_CLCheckLoop:
.24a1	a2 00		ldx #$00		ldx	#0
.24a3	20 bf 14	jsr $14bf		jsr	deviceHandler
.24a6	a0 00		ldy #$00			ldy 	#0							; check end.
.24a8	b1 28		lda ($28),y			lda 	(codePtr),y
.24aa	f0 41		beq $24ed			beq 	_CLEnd
.24ac	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.24ae	20 f0 24	jsr $24f0			jsr 	CLCompareLineTOS
.24b1	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.24b3	f0 28		beq $24dd			beq 	_CLNext
.24b5	e8		inx				inx
.24b6	20 f0 24	jsr $24f0			jsr 	CLCompareLineTOS 			; compare vs higher
.24b9	c9 01		cmp #$01			cmp 	#1
.24bb	f0 20		beq $24dd			beq 	_CLNext
.24bd	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.24bf	20 12 25	jsr $2512			jsr 	CLStructureCheck
.24c2	ad 15 0c	lda $0c15			lda 	structIndent 				; indent level.
.24c5	10 02		bpl $24c9			bpl 	_CLPositive
.24c7	a9 00		lda #$00			lda 	#0
.24c9					_CLPositive:
.24c9	a2 02		ldx #$02		ldx	#2
.24cb	20 6f 3d	jsr $3d6f		jsr	tokeniserHandler
.24ce	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.24d0	20 12 25	jsr $2512			jsr 	CLStructureCheck
.24d3	ad 15 0c	lda $0c15			lda 	structIndent
.24d6	10 05		bpl $24dd			bpl 	_CLNext
.24d8	a9 00		lda #$00			lda 	#0
.24da	8d 15 0c	sta $0c15			sta 	structIndent
.24dd					_CLNext:
.24dd	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.24df	b1 28		lda ($28),y			lda 	(codePtr),y
.24e1	18		clc				clc
.24e2	65 28		adc $28				adc 	codePtr
.24e4	85 28		sta $28				sta 	codePtr
.24e6	90 b9		bcc $24a1			bcc 	_CLCheckLoop
.24e8	e6 29		inc $29				inc 	codePtr+1
.24ea	4c a1 24	jmp $24a1			jmp 	_CLCheckLoop
.24ed					_CLEnd:
.24ed	4c 99 32	jmp $3299			jmp 	WarmStart 					; warm start after list.
.24f0					CLCompareLineTOS:
.24f0	a0 01		ldy #$01			ldy 	#1
.24f2	b1 28		lda ($28),y			lda 	(codePtr),y
.24f4	55 50		eor $50,x			eor 	esInt0,x
.24f6	85 2a		sta $2a				sta 	temp0
.24f8	c8		iny				iny
.24f9	b1 28		lda ($28),y			lda 	(codePtr),y
.24fb	55 58		eor $58,x			eor 	esInt1,x
.24fd	05 2a		ora $2a				ora 	temp0
.24ff	f0 10		beq $2511			beq 	_CLCLTExit
.2501	88		dey				dey
.2502	b1 28		lda ($28),y			lda 	(codePtr),y
.2504	d5 50		cmp $50,x			cmp 	esInt0,x
.2506	c8		iny				iny
.2507	b1 28		lda ($28),y			lda 	(codePtr),y
.2509	f5 58		sbc $58,x			sbc 	esInt1,x
.250b	a9 ff		lda #$ff			lda 	#255
.250d	90 02		bcc $2511			bcc 	_CLCLTExit
.250f	a9 01		lda #$01			lda 	#1
.2511					_CLCLTExit:
.2511	60		rts				rts
.2512					CLStructureCheck:
.2512	85 2a		sta $2a				sta 	temp0
.2514	a0 03		ldy #$03			ldy 	#3
.2516					_CLSCLoop:
.2516	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2518	c8		iny				iny
.2519	c9 80		cmp #$80			cmp 	#$80
.251b	90 f9		bcc $2516			bcc 	_CLSCLoop 					; $00-$7F just step over.
.251d	f0 28		beq $2547			beq		_CLSCExit					; EOL return
.251f	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2521	90 1e		bcc $2541			bcc 	_CLSCSpecial
.2523	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2525	90 ef		bcc $2516			bcc 	_CLSCLoop
.2527	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2529	b0 eb		bcs $2516			bcs 	_CLSCLoop
.252b	aa		tax				tax 								; get adjustment
.252c	bd 3a 2a	lda $2a3a,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.252f	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2531	d0 e3		bne $2516			bne 	_CLSCLoop
.2533	38		sec				sec
.2534	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2536	0a		asl a				asl 	a 							; double indent step
.2537	18		clc				clc
.2538	6d 15 0c	adc $0c15			adc 	structIndent 				; add to structure indent
.253b	8d 15 0c	sta $0c15			sta 	structIndent
.253e	4c 16 25	jmp $2516			jmp 	_CLSCLoop
.2541					_CLSCSpecial:
.2541	20 9e 23	jsr $239e			jsr 	ScannerSkipSpecial
.2544	4c 16 25	jmp $2516			jmp 	_CLSCLoop
.2547					_CLSCExit:
.2547	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2548					CommandLoad:
.2548	20 70 25	jsr $2570			jsr 	CLSParameters 					; get parameters for load.
.254b	08		php				php
.254c	a2 0e		ldx #$0e		ldx	#14
.254e	20 bf 14	jsr $14bf		jsr	deviceHandler
.2551	28		plp				plp
.2552	b0 08		bcs $255c			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2554	20 12 24	jsr $2412			jsr 	CommandClear
.2557	a2 02		ldx #$02		ldx	#2
.2559	20 0d 1c	jsr $1c0d		jsr	interactionHandler
.255c					_CLExit
.255c	60		rts				rts
.255d					CommandSave:
.255d	20 70 25	jsr $2570			jsr 	CLSParameters					; get parameters for save
.2560	90 08		bcc $256a			bcc 	_CSNoOverrideAddress
.2562	20 30 32	jsr $3230			jsr 	CheckComma 						; should be a comma.
.2565	a2 02		ldx #$02			ldx 	#2
.2567	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger 				; get save end address.
.256a					_CSNoOverrideAddress:
.256a	a2 18		ldx #$18		ldx	#24
.256c	20 bf 14	jsr $14bf		jsr	deviceHandler
.256f	60		rts				rts
.2570					CLSParameters:
.2570	a2 00		ldx #$00			ldx 	#0 								; string
.2572	20 13 2b	jsr $2b13			jsr 	EvaluateString
.2575	e8		inx				inx 									; erase out +1 +2
.2576	20 b0 31	jsr $31b0			jsr 	MInt32False
.2579	e8		inx				inx
.257a	20 b0 31	jsr $31b0			jsr 	MInt32False
.257d	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2580	85 51		sta $51				sta 	esInt0+1
.2582	ad c9 0a	lda $0ac9			lda 	basePage+1
.2585	85 59		sta $59				sta 	esInt1+1
.2587	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.258a	85 52		sta $52				sta 	esInt0+2
.258c	ad cb 0a	lda $0acb			lda 	endProgram+1
.258f	85 5a		sta $5a				sta 	esInt1+2
.2591	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2593	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2595	d0 08		bne $259f			bne 	_CLSDefault
.2597	c8		iny				iny 									; skip comma
.2598	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.259a	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger
.259d	38		sec				sec
.259e	60		rts				rts
.259f					_CLSDefault:
.259f	18		clc				clc
.25a0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.25a1					Command_New:
.25a1					Command_XNew:
.25a1	20 3f 26	jsr $263f			jsr 	ResetCodeAddress 			; point to first line
.25a4	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.25a6	98		tya				tya
.25a7	91 28		sta ($28),y			sta 	(codePtr),y
.25a9	20 12 24	jsr $2412			jsr 	CommandClear 				; clear everything down.
.25ac	4c 68 1f	jmp $1f68			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0c16					breakCounter:
>0c16								.fill 	1
.0c17					breakIncrement:
>0c17								.fill 	1
.25af					Command_Run:
.25af					XCommand_Run:
.25af	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.25b1	9a		txs				txs
.25b2	20 39 26	jsr $2639			jsr 	BreakOn 					; turn break on
.25b5	20 12 24	jsr $2412			jsr 	CommandClear 				; clear everything.
.25b8	20 3f 26	jsr $263f			jsr 	ResetCodeAddress 			; back to the start.
.25bb					Command_RunFrom:
.25bb	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.25bd					CRNextInstruction:
.25bd	64 3a		stz $3a				stz 	softMemAlloc+1
.25bf	ad 16 0c	lda $0c16			lda 	breakCounter 				; check for break.
.25c2	6d 17 0c	adc $0c17			adc 	breakIncrement
.25c5	8d 16 0c	sta $0c16			sta 	breakCounter
.25c8	90 05		bcc $25cf			bcc 	_CRNoChecks
.25ca	a2 00		ldx #$00		ldx	#0
.25cc	20 bf 14	jsr $14bf		jsr	deviceHandler
.25cf					_CRNoChecks
.25cf	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.25d1	10 1c		bpl $25ef			bpl 	_CRNotToken
.25d3	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.25d5	b0 0c		bcs $25e3			bcs 	_CRExecute
.25d7	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.25d9	b0 71		bcs $264c			bcs 	Unimplemented
.25db	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.25dd	b0 04		bcs $25e3			bcs 	_CRExecute
.25df	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.25e1	b0 16		bcs $25f9			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.25e3					_CRExecute:
.25e3	c8		iny				iny 								; consume it.
.25e4	0a		asl a				asl 	a 							; double it, losing most significant bit.
.25e5	aa		tax				tax
.25e6	20 ec 25	jsr $25ec			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.25e9	4c bd 25	jmp $25bd			jmp 	CRNextInstruction
.25ec					_CRRunRoutine:
.25ec	7c 56 26	jmp ($2656,x)			jmp 	(Group0Vectors,x)
.25ef					_CRNotToken:
.25ef	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.25f1	b0 59		bcs $264c			bcs 	Unimplemented
.25f3					_CRDefaultLet:
.25f3	20 9b 1e	jsr $1e9b			jsr 	CommandLet 					; do the default, LET
.25f6	4c bd 25	jmp $25bd			jmp 	CRNextInstruction
.25f9					_CRCheckIndirect:
.25f9	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.25fb	f0 0a		beq $2607			beq 	_CRAndCommand
.25fd	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.25ff	f0 f2		beq $25f3			beq 	_CRDefaultLet
.2601	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2603	f0 ee		beq $25f3			beq 	_CRDefaultLet
.2605	d0 45		bne $264c			bne 	Unimplemented
.2607					_CRAndCommand:
.2607	c8		iny				iny 								; skip over the AND token
.2608	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.260a	20 24 26	jsr $2624			jsr 	CommandAssembler 			; do the assembler command
.260d	4c bd 25	jmp $25bd			jmp 	CRNextInstruction 			; and loop round.
.2610					CommandShift1:
.2610	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2612	10 38		bpl $264c			bpl 	Unimplemented 				; we have an error as this should not happen.
.2614	c8		iny				iny 								; advance over it.
.2615	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2617	b0 0b		bcs $2624			bcs 	CommandAssembler
.2619	0a		asl a				asl 	a 							; double into X
.261a	aa		tax				tax
.261b	7c 1a 27	jmp ($271a,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.261e					CommandShift2:
.261e	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2620	20 15 18	jsr $1815		jsr	extensionHandler
.2623	60		rts				rts
.2624					CommandAssembler:
.2624	a2 00		ldx #$00		ldx	#0
.2626	20 84 13	jsr $1384		jsr	assemblerHandler
.2629	60		rts				rts
.262a					CommandAssemblerLabel:
.262a	a2 02		ldx #$02		ldx	#2
.262c	20 84 13	jsr $1384		jsr	assemblerHandler
.262f	60		rts				rts
.2630					CommandColon:
.2630	60		rts				rts
.2631					CommandBreak:
.2631	20 1c 2b	jsr $2b1c			jsr 	EvaluateRootInteger
.2634	20 d7 31	jsr $31d7			jsr 	MInt32Zero
.2637	f0 02		beq $263b			beq 	BreakOff
.2639					BreakOn:
.2639	a2 08		ldx #$08			ldx 	#8
.263b					BreakOff:
.263b	8e 17 0c	stx $0c17			stx 	breakIncrement
.263e	60		rts				rts
.263f					ResetCodeAddress:
.263f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2642	85 28		sta $28				sta 	codePtr
.2644	ad c9 0a	lda $0ac9			lda 	basePage+1
.2647	85 29		sta $29				sta 	codePtr+1
.2649	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.264b	60		rts				rts
.264c					Unimplemented:
.264c	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.264e	20 e0 14	jsr $14e0		jsr	errorHandler
.2651					TKErr01:
.2651					TKErr02:
.2651					TKErr03:
.2651					TKErr04:
.2651					TKErr05:
.2651					TKErr06:
.2651					TKErr07:
.2651					TKErr08:
.2651					TKErr09:
.2651					TKErr10:
.2651					TKErr11:
.2651	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2653	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2656					Group0Vectors:
>2656	6e 1f					.word	AdvanceNextLine          ; $80 [[eol]]
>2658	10 26					.word	CommandShift1            ; $81 [[sh1]]
>265a	1e 26					.word	CommandShift2            ; $82 [[sh2]]
>265c	51 26					.word	TKErr09                  ; $83 [[sh3]]
>265e	51 26					.word	TKErr10                  ; $84 [[fpc]]
>2660	51 26					.word	TKErr08                  ; $85 [[str]]
>2662	03 28					.word	AndHandler               ; $86 and
>2664	f0 27					.word	OrHandler                ; $87 or
>2666	dd 27					.word	XorHandler               ; $88 xor
>2668	25 29					.word	CompareGreaterEq         ; $89 >=
>266a	2f 29					.word	CompareLessEq            ; $8a <=
>266c	11 29					.word	CompareGreater           ; $8b >
>266e	07 29					.word	CompareLess              ; $8c <
>2670	fd 28					.word	CompareEquals            ; $8d =
>2672	1b 29					.word	CompareNotEquals         ; $8e <>
>2674	6e 27					.word	AddHandler               ; $8f +
>2676	91 27					.word	SubHandler               ; $90 -
>2678	29 28					.word	ShrHandler               ; $91 >>
>267a	16 28					.word	ShlHandler               ; $92 <<
>267c	a4 27					.word	MulHandler               ; $93 *
>267e	b7 27					.word	DivHandler               ; $94 /
>2680	ca 27					.word	ModHandler               ; $95 mod
>2682	62 28					.word	PowerHandler             ; $96 ^
>2684	3c 28					.word	WordRefHandler           ; $97 !
>2686	4f 28					.word	ByteRefHandler           ; $98 ?
>2688	2d 23					.word	Command_Repeat           ; $99 repeat
>268a	d7 23					.word	Command_While            ; $9a while
>268c	82 1f					.word	Command_FOR              ; $9b for
>268e	91 20					.word	CommandIf                ; $9c if
>2690	51 26					.word	TKErr04                  ; $9d defproc
>2692	3a 23					.word	Command_Until            ; $9e until
>2694	fa 23					.word	Command_Wend             ; $9f wend
>2696	e3 1f					.word	Command_NEXT             ; $a0 next
>2698	51 26					.word	TKErr06                  ; $a1 then
>269a	cc 20					.word	Command_ENDIF            ; $a2 endif
>269c	3c 22					.word	ReturnProc               ; $a3 endproc
>269e	89 2a					.word	UnaryParenthesis         ; $a4 (
>26a0	65 2c					.word	UnaryLen                 ; $a5 len(
>26a2	a9 2c					.word	UnarySgn                 ; $a6 sgn(
>26a4	92 2c					.word	UnaryAbs                 ; $a7 abs(
>26a6	02 2d					.word	Unary_Random             ; $a8 random(
>26a8	4c 2d					.word	Unary_Page               ; $a9 page
>26aa	ac 31					.word	MInt32True               ; $aa true
>26ac	b0 31					.word	MInt32False              ; $ab false
>26ae	17 2d					.word	Unary_Min                ; $ac min(
>26b0	1b 2d					.word	Unary_Max                ; $ad max(
>26b2	24 2e					.word	UnarySys                 ; $ae sys(
>26b4	cd 2d					.word	UnaryTimer               ; $af timer(
>26b6	e2 2b					.word	EventFunction            ; $b0 event(
>26b8	f6 2d					.word	UnaryGet                 ; $b1 get(
>26ba	e6 2d					.word	UnaryInkey               ; $b2 inkey(
>26bc	9d 2d					.word	UnaryAlloc               ; $b3 alloc(
>26be	5d 2e					.word	ExecChr                  ; $b4 chr$(
>26c0	8d 2e					.word	ExecLeft                 ; $b5 left$(
>26c2	aa 2e					.word	ExecMid                  ; $b6 mid$(
>26c4	d2 2e					.word	ExecRight                ; $b7 right$(
>26c6	64 2b					.word	Event_Str                ; $b8 str$(
>26c8	93 2b					.word	UnaryVal                 ; $b9 val(
>26ca	c0 2c					.word	UnaryPeek                ; $ba peek(
>26cc	c6 2c					.word	UnaryDeek                ; $bb deek(
>26ce	cc 2c					.word	UnaryLeek                ; $bc leek(
>26d0	83 2c					.word	UnaryAsc                 ; $bd asc(
>26d2	77 2d					.word	UnaryIntToFloat          ; $be int(
>26d4	8a 2d					.word	UnaryFloatToInt          ; $bf float(
>26d6	96 2b					.word	UnaryIsVal               ; $c0 isval(
>26d8	74 2e					.word	ExecUpper                ; $c1 upper$(
>26da	71 2e					.word	ExecLower                ; $c2 lower$(
>26dc	5a 2d					.word	UnaryReference           ; $c3 @
>26de	70 2d					.word	UnaryComplement          ; $c4 ~
>26e0	6d 2d					.word	UnaryHexMarker           ; $c5 &
>26e2	0f 2e					.word	UnaryGetString           ; $c6 get$(
>26e4	15 2e					.word	UnaryInkeyString         ; $c7 inkey$(
>26e6	4c 2e					.word	UnaryMem                 ; $c8 mem
>26e8	51 26					.word	TKErr01                  ; $c9 )
>26ea	30 26					.word	CommandColon             ; $ca :
>26ec	51 26					.word	TKErr02                  ; $cb ,
>26ee	51 26					.word	TKErr03                  ; $cc ;
>26f0	56 1f					.word	Command_Rem2             ; $cd '
>26f2	51 26					.word	TKErr07                  ; $ce to
>26f4	51 26					.word	TKErr05                  ; $cf step
>26f6	cf 21					.word	CallProc                 ; $d0 proc
>26f8	cd 20					.word	CommandLocal             ; $d1 local
>26fa	8d 1e					.word	Command_Dim              ; $d2 dim
>26fc	56 1f					.word	Command_Rem              ; $d3 rem
>26fe	9b 1e					.word	CommandLet               ; $d4 let
>2700	d7 1c					.word	Command_Input            ; $d5 input
>2702	c6 20					.word	Command_ELSE             ; $d6 else
>2704	5e 1e					.word	Command_VDU              ; $d7 vdu
>2706	8d 1d					.word	Command_Print            ; $d8 print
>2708	3f 1c					.word	CommandData              ; $d9 data
>270a	4c 26					.word	Unimplemented            ; $da image
>270c	4c 26					.word	Unimplemented            ; $db at
>270e	4c 26					.word	Unimplemented            ; $dc flip
>2710	7f 1e					.word	Command_Assert           ; $dd assert
>2712	19 1f					.word	Command_Poke             ; $de poke
>2714	1d 1f					.word	Command_Doke             ; $df doke
>2716	21 1f					.word	Command_Loke             ; $e0 loke
>2718	2e 1e					.word	Command_Ink              ; $e1 ink
>271a	39 1e					.word	Command_Paper            ; $e2 paper
>271c	28 1e					.word	Command_CLS              ; $e3 cls
>271e	44 1e					.word	Command_Locate           ; $e4 locate
>2720	31 26					.word	CommandBreak             ; $e5 break
>2722	2a 26					.word	CommandAssemblerLabel    ; $e6 .
>2724	51 26					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2726					Group1Vectors:
>2726	12 24					.word	CommandClear             ; $86 clear
>2728	48 25					.word	CommandLoad              ; $87 load
>272a	5d 25					.word	CommandSave              ; $88 save
>272c	6d 24					.word	CommandList              ; $89 list
>272e	a1 25					.word	Command_New              ; $8a new
>2730	af 25					.word	Command_Run              ; $8b run
>2732	14 1c					.word	CommandRead              ; $8c read
>2734	48 1c					.word	CommandRestore           ; $8d restore
>2736	68 1f					.word	CommandEnd               ; $8e end
>2738	63 1f					.word	CommandStop              ; $8f stop
>273a	6b 1f					.word	CommandXemu              ; $90 xemu
>273c	a5 1c					.word	CommandGOTO              ; $91 goto
>273e	7a 1c					.word	CommandGOSUB             ; $92 gosub
>2740	8d 1c					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2742					BinaryProcess:
.2742	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2744	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2746	0a		asl a				asl 	a
.2747	30 0e		bmi $2757			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2749	18		clc				clc 								; return CC for integer
.274a	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.274c	f0 08		beq $2756			beq 	_BPExit 					; if both integer then return with CC.
.274e	20 5c 27	jsr $275c			jsr 	BPMakeBothFloat 			; make both float
.2751	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2753	95 48		sta $48,x			sta 	esType,x
.2755	38		sec				sec 								; and return with carry set.
.2756					_BPExit:
.2756	60		rts				rts
.2757					_BPStringType:
.2757	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2759	20 e0 14	jsr $14e0		jsr	errorHandler
.275c					BPMakeBothFloat:
.275c	e8		inx				inx
.275d	20 61 27	jsr $2761			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2760	ca		dex				dex
.2761					BPMakeFloat:
.2761	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.2763	4a		lsr a				lsr 	a
.2764	b0 07		bcs $276d			bcs 	_BPIsFloat 					; already a float if set.
.2766	8a		txa				txa
.2767	a2 1a		ldx #$1a		ldx	#26
.2769	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.276c	aa		tax				tax
.276d					_BPIsFloat:
.276d	60		rts				rts
.276e					AddHandler:
.276e	20 3f 29	jsr $293f			jsr 	DereferenceTwo 				; dereference top two on stack.
.2771	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.2773	35 49		and $49,x			and 	esType+1,x
.2775	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2777	d0 10		bne $2789			bne 	_AHStringConcat				; concatenate strings.
.2779	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.277c	b0 03		bcs $2781			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.277e	4c 94 30	jmp $3094			jmp 	MInt32Add 							; else do it as integer.
.2781					_IsFPOperation:
.2781	8a		txa				txa 								; call the relevant fp routine
.2782	a2 02		ldx #$02		ldx	#2
.2784	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2787	aa		tax				tax
.2788	60		rts				rts
.2789					_AHStringConcat:
.2789	8a		txa				txa 								; handled by the string module.
.278a	a2 04		ldx #$04		ldx	#4
.278c	20 56 35	jsr $3556		jsr	stringHandler
.278f	aa		tax				tax
.2790	60		rts				rts
.2791					SubHandler:
.2791	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.2794	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.2797	b0 03		bcs $279c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2799	4c ae 30	jmp $30ae			jmp 	MInt32Sub 							; else do it as integer.
.279c					_IsFPOperation:
.279c	8a		txa				txa 								; call the relevant fp routine
.279d	a2 10		ldx #$10		ldx	#16
.279f	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.27a2	aa		tax				tax
.27a3	60		rts				rts
.27a4					MulHandler:
.27a4	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.27a7	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.27aa	b0 03		bcs $27af			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27ac	4c c8 30	jmp $30c8			jmp 	MInt32Multiply 							; else do it as integer.
.27af					_IsFPOperation:
.27af	8a		txa				txa 								; call the relevant fp routine
.27b0	a2 0a		ldx #$0a		ldx	#10
.27b2	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.27b5	aa		tax				tax
.27b6	60		rts				rts
.27b7					DivHandler:
.27b7	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.27ba	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.27bd	b0 03		bcs $27c2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27bf	4c 85 2f	jmp $2f85			jmp 	MInt32SDivide 							; else do it as integer.
.27c2					_IsFPOperation:
.27c2	8a		txa				txa 								; call the relevant fp routine
.27c3	a2 06		ldx #$06		ldx	#6
.27c5	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.27c8	aa		tax				tax
.27c9	60		rts				rts
.27ca					ModHandler:
.27ca	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.27cd	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.27d0	b0 03		bcs $27d5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27d2	4c 03 30	jmp $3003			jmp 	MInt32Modulus 							; else do it as integer.
.27d5					_IsFPOperation:
.27d5	8a		txa				txa 								; call the relevant fp routine
.27d6	a2 08		ldx #$08		ldx	#8
.27d8	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.27db	aa		tax				tax
.27dc	60		rts				rts
.27dd					XorHandler:
.27dd	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.27e0	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.27e3	b0 03		bcs $27e8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27e5	4c 37 2f	jmp $2f37			jmp 	MInt32Xor 							; else do it as integer.
.27e8					_IsFPOperation:
.27e8	8a		txa				txa 								; call the relevant fp routine
.27e9	a2 08		ldx #$08		ldx	#8
.27eb	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.27ee	aa		tax				tax
.27ef	60		rts				rts
.27f0					OrHandler:
.27f0	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.27f3	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.27f6	b0 03		bcs $27fb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27f8	4c 1e 2f	jmp $2f1e			jmp 	MInt32Or 							; else do it as integer.
.27fb					_IsFPOperation:
.27fb	8a		txa				txa 								; call the relevant fp routine
.27fc	a2 08		ldx #$08		ldx	#8
.27fe	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2801	aa		tax				tax
.2802	60		rts				rts
.2803					AndHandler:
.2803	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.2806	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.2809	b0 03		bcs $280e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.280b	4c 05 2f	jmp $2f05			jmp 	MInt32And 							; else do it as integer.
.280e					_IsFPOperation:
.280e	8a		txa				txa 								; call the relevant fp routine
.280f	a2 08		ldx #$08		ldx	#8
.2811	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2814	aa		tax				tax
.2815	60		rts				rts
.2816					ShlHandler:
.2816	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.2819	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.281c	b0 03		bcs $2821			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.281e	4c 97 28	jmp $2897			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2821					_IsFPOperation:
.2821	8a		txa				txa 								; call the relevant fp routine
.2822	a2 08		ldx #$08		ldx	#8
.2824	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2827	aa		tax				tax
.2828	60		rts				rts
.2829					ShrHandler:
.2829	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.282c	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.282f	b0 03		bcs $2834			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2831	4c 9a 28	jmp $289a			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2834					_IsFPOperation:
.2834	8a		txa				txa 								; call the relevant fp routine
.2835	a2 08		ldx #$08		ldx	#8
.2837	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.283a	aa		tax				tax
.283b	60		rts				rts
.283c					WordRefHandler:
.283c	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.283f	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.2842	b0 03		bcs $2847			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2844	4c 89 28	jmp $2889			jmp 	MInt32WordIndirect 							; else do it as integer.
.2847					_IsFPOperation:
.2847	8a		txa				txa 								; call the relevant fp routine
.2848	a2 08		ldx #$08		ldx	#8
.284a	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.284d	aa		tax				tax
.284e	60		rts				rts
.284f					ByteRefHandler:
.284f	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.2852	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.2855	b0 03		bcs $285a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2857	4c 8d 28	jmp $288d			jmp 	MInt32ByteIndirect 							; else do it as integer.
.285a					_IsFPOperation:
.285a	8a		txa				txa 								; call the relevant fp routine
.285b	a2 08		ldx #$08		ldx	#8
.285d	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2860	aa		tax				tax
.2861	60		rts				rts
.2862					PowerHandler:
.2862	20 3f 29	jsr $293f			jsr 	DereferenceTwo
.2865	20 42 27	jsr $2742			jsr 	BinaryProcess 				; check to see if either is float
.2868	b0 03		bcs $286d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.286a	4c 75 28	jmp $2875			jmp 	PowerInteger 							; else do it as integer.
.286d					_IsFPOperation:
.286d	8a		txa				txa 								; call the relevant fp routine
.286e	a2 16		ldx #$16		ldx	#22
.2870	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2873	aa		tax				tax
.2874	60		rts				rts
.2875					PowerInteger:
.2875	20 5c 27	jsr $275c			jsr 	BPMakeBothFloat				; make them float.
.2878	8a		txa				txa
.2879	a2 16		ldx #$16		ldx	#22
.287b	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.287e	a2 12		ldx #$12		ldx	#18
.2880	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2883	aa		tax				tax
.2884	a9 00		lda #$00			lda 	#0 							; make type integer
.2886	95 48		sta $48,x			sta 	esType,x
.2888	60		rts				rts
.2889					Mint32WordIndirect:
.2889	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.288b	d0 02		bne $288f			bne 	Min32Indirect
.288d					Mint32ByteIndirect:
.288d	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.288f					Min32Indirect:
.288f	48		pha				pha 								; save the indirection
.2890	20 94 30	jsr $3094			jsr 	MInt32Add 					; add a!b a?b
.2893	68		pla				pla 								; and set the type to reference.
.2894	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2896	60		rts				rts
.2897					Mint32ShiftLeftX:
.2897	18		clc				clc 								; CC shift left
.2898	90 01		bcc $289b			bcc 	Mint32Shift
.289a					Mint32ShiftRightX:
.289a	38		sec				sec 								; CS shift right
.289b					Mint32Shift:
.289b	08		php				php 								; save carry flag on stack.
.289c	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.289e	15 61		ora $61,x			ora 	esInt2+1,x
.28a0	15 69		ora $69,x			ora 	esInt3+1,x
.28a2	d0 1e		bne $28c2			bne 	_MShiftZero
.28a4	b5 51		lda $51,x			lda 	esInt0+1,x
.28a6	c9 20		cmp #$20			cmp 	#32
.28a8	b0 18		bcs $28c2			bcs 	_MShiftZero
.28aa					_MShiftLoop:
.28aa	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.28ac	f0 12		beq $28c0			beq 	_MShiftExit
.28ae	d6 51		dec $51,x			dec 	esInt0+1,x
.28b0	28		plp				plp 								; restore and save carry
.28b1	08		php				php
.28b2	90 06		bcc $28ba			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.28b4	20 ce 31	jsr $31ce			jsr 	Mint32ShiftRight
.28b7	4c aa 28	jmp $28aa			jmp 	_MShiftLoop
.28ba					_MShiftLeft:
.28ba	20 c5 31	jsr $31c5			jsr 	Mint32ShiftLeft
.28bd	4c aa 28	jmp $28aa			jmp 	_MShiftLoop
.28c0					_MShiftExit:
.28c0	28		plp				plp	 								; throw saved carry and exit
.28c1	60		rts				rts
.28c2					_MShiftZero:
.28c2	4c b0 31	jmp $31b0			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.28c5					PerformComparison:
.28c5	20 3f 29	jsr $293f			jsr 	DereferenceTwo 				; make both values.
.28c8	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.28ca	35 49		and $49,x			and 	esType+1,x
.28cc	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.28cd	30 1d		bmi $28ec			bmi 	_PCIsString
.28cf	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.28d1	15 49		ora $49,x			ora 	esType+1,x
.28d3	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.28d4	30 22		bmi $28f8			bmi 	_PCError
.28d6	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.28d8	f0 0f		beq $28e9			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.28da	20 5c 27	jsr $275c			jsr 	BPMakeBothFloat 			; make both float
.28dd	8a		txa				txa
.28de	a2 04		ldx #$04		ldx	#4
.28e0	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.28e3	86 32		stx $32				stx 	tempShort 					; save result
.28e5	aa		tax				tax
.28e6	a5 32		lda $32				lda 	tempShort
.28e8	60		rts				rts
.28e9					_PCIsInteger:
.28e9	4c 50 2f	jmp $2f50			jmp 	MInt32Compare
.28ec					_PCIsString:
.28ec	8a		txa				txa 								; A has SP
.28ed	a2 08		ldx #$08		ldx	#8
.28ef	20 56 35	jsr $3556		jsr	stringHandler
.28f2	86 32		stx $32				stx 	tempShort 					; save result
.28f4	aa		tax				tax 								; put SP back in X and get result.
.28f5	a5 32		lda $32				lda 	tempShort
.28f7	60		rts				rts
.28f8					_PCError:
.28f8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.28fa	20 e0 14	jsr $14e0		jsr	errorHandler
.28fd					CompareEquals:
.28fd	20 c5 28	jsr $28c5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2900	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2902	f0 35		beq $2939			beq  	CompareTrue
.2904	4c 3c 29	jmp $293c			jmp 	CompareFalse
.2907					CompareLess:
.2907	20 c5 28	jsr $28c5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.290a	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.290c	f0 2b		beq $2939			beq  	CompareTrue
.290e	4c 3c 29	jmp $293c			jmp 	CompareFalse
.2911					CompareGreater:
.2911	20 c5 28	jsr $28c5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2914	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2916	f0 21		beq $2939			beq  	CompareTrue
.2918	4c 3c 29	jmp $293c			jmp 	CompareFalse
.291b					CompareNotEquals:
.291b	20 c5 28	jsr $28c5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.291e	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2920	d0 17		bne $2939			bne  	CompareTrue
.2922	4c 3c 29	jmp $293c			jmp 	CompareFalse
.2925					CompareGreaterEq:
.2925	20 c5 28	jsr $28c5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2928	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.292a	d0 0d		bne $2939			bne  	CompareTrue
.292c	4c 3c 29	jmp $293c			jmp 	CompareFalse
.292f					CompareLessEq:
.292f	20 c5 28	jsr $28c5			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2932	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2934	d0 03		bne $2939			bne  	CompareTrue
.2936	4c 3c 29	jmp $293c			jmp 	CompareFalse
.2939					CompareTrue:
.2939	4c ac 31	jmp $31ac			jmp 	MInt32True
.293c					CompareFalse:
.293c	4c b0 31	jmp $31b0			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.293f					DereferenceTwo:
.293f	e8		inx				inx
.2940	20 44 29	jsr $2944			jsr 	DereferenceOne
.2943	ca		dex				dex
.2944					DereferenceOne:
.2944	b5 48		lda $48,x			lda 	esType,x
.2946	10 3d		bpl $2985			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2948	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2949	b0 3b		bcs $2986			bcs 	_DRFloatDeReference
.294b	98		tya				tya
.294c	48		pha				pha
.294d	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.294f	85 2a		sta $2a				sta 	temp0
.2951	b5 58		lda $58,x			lda 	esInt1,x
.2953	85 2b		sta $2b				sta 	temp0+1
.2955	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2957	95 58		sta $58,x			sta 	esInt1,x
.2959	95 60		sta $60,x			sta 	esInt2,x
.295b	95 68		sta $68,x			sta 	esInt3,x
.295d	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.295f	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2961	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2962	30 0d		bmi $2971			bmi 	_DeRefString 				; string, 2 bytes only
.2964	d0 11		bne $2977			bne 	_DeRefByte 					; byte 1 byte only
.2966					_DeRefLong:
.2966	a0 03		ldy #$03			ldy 	#3
.2968	b1 2a		lda ($2a),y			lda 	(temp0),y
.296a	95 68		sta $68,x			sta 	esInt3,x
.296c	88		dey				dey
.296d	b1 2a		lda ($2a),y			lda 	(temp0),y
.296f	95 60		sta $60,x			sta 	esInt2,x
.2971					_DeRefString:
.2971	a0 01		ldy #$01			ldy 	#1
.2973	b1 2a		lda ($2a),y			lda 	(temp0),y
.2975	95 58		sta $58,x			sta 	esInt1,x
.2977					_DeRefByte:
.2977	a0 00		ldy #$00			ldy 	#0
.2979	b1 2a		lda ($2a),y			lda 	(temp0),y
.297b	95 50		sta $50,x			sta 	esInt0,x
.297d	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.297f	29 40		and #$40			and 	#$40
.2981	95 48		sta $48,x			sta 	esType,x
.2983	68		pla				pla
.2984	a8		tay				tay
.2985					_DRNotReference
.2985	60		rts				rts
.2986					_DRFloatDereference:
.2986	20 10 1f	jsr $1f10			jsr 	TOSToTemp0 					; address to deref in temp0
.2989	8a		txa				txa
.298a	a2 1c		ldx #$1c		ldx	#28
.298c	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.298f	aa		tax				tax
.2990	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2992	95 48		sta $48,x			sta 	esType,x
.2994	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2995					EvaluateLevel:
.2995	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2997	b0 1e		bcs $29b7			bcs 	_ELStack
.2999	48		pha				pha 								; save precedence level.
.299a	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.299c	95 50		sta $50,x			sta 	esInt0,x
.299e	95 58		sta $58,x			sta 	esInt1,x
.29a0	95 60		sta $60,x			sta 	esInt2,x
.29a2	95 68		sta $68,x			sta 	esInt3,x
.29a4	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.29a6	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.29a8	30 26		bmi $29d0			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.29aa	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.29ab	30 0f		bmi $29bc			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.29ad	8a		txa				txa 								; stack level in X
.29ae	a2 00		ldx #$00		ldx	#0
.29b0	20 3d 41	jsr $413d		jsr	variableHandler
.29b3	aa		tax				tax
.29b4	4c f9 29	jmp $29f9			jmp		_ELHasTerm
.29b7					_ELStack:
.29b7	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.29b9	20 e0 14	jsr $14e0		jsr	errorHandler
.29bc					_ELIsConstant:
.29bc	4a		lsr a				lsr 	a 							; get the value back
.29bd	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.29bf	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.29c1					_ELCheckNext:
.29c1	c8		iny				iny 								; look at next
.29c2	b1 28		lda ($28),y			lda 	(codePtr),y
.29c4	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.29c6	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.29c8	b0 2f		bcs $29f9			bcs 	_ELHasTerm 					; done getting the constant.
.29ca	20 92 2a	jsr $2a92			jsr 	ELShiftByteIn 				; shift byte into position.
.29cd	4c c1 29	jmp $29c1			jmp 	_ELCheckNext
.29d0					_ELIsToken:
.29d0	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.29d2	f0 0f		beq $29e3			beq 	_ELIsString
.29d4	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.29d6	d0 5f		bne $2a37			bne 	_ELCheckUnary
.29d8	8a		txa				txa 								; put X into A
.29d9	c8		iny				iny 								; skip over the float marker
.29da	a2 18		ldx #$18		ldx	#24
.29dc	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.29df	aa		tax				tax 								; restore X
.29e0	4c f9 29	jmp $29f9			jmp 	_ELHasTerm
.29e3					_ELIsString:
.29e3	98		tya				tya 								; address of string is codePtr+y+1
.29e4	38		sec				sec
.29e5	65 28		adc $28				adc 	codePtr
.29e7	95 50		sta $50,x			sta 	esInt0,x
.29e9	a5 29		lda $29				lda 	codePtr+1
.29eb	69 00		adc #$00			adc 	#0
.29ed	95 58		sta $58,x			sta 	esInt1,x
.29ef	a9 40		lda #$40			lda 	#$40 						; set type to string value
.29f1	95 48		sta $48,x			sta 	esType,x
.29f3	c8		iny				iny 								; skip over string.
.29f4	98		tya				tya
.29f5	38		sec				sec									; +1 for the length itself.
.29f6	71 28		adc ($28),y			adc 	(codePtr),y
.29f8	a8		tay				tay 								; and fall through to term loop code.
.29f9					_ELHasTerm:
.29f9	b1 28		lda ($28),y			lda 	(codePtr),y
.29fb	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.29fd	90 04		bcc $2a03			bcc 	_ELPopExit
.29ff	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2a01	90 02		bcc $2a05			bcc 	_ELHasBinaryTerm
.2a03					_ELPopExit:
.2a03	68		pla				pla
.2a04					_ELExit:
.2a04	60		rts				rts
.2a05					_ELHasBinaryTerm:
.2a05	84 32		sty $32				sty 	tempShort 					; save position
.2a07	a8		tay				tay 								; use token as an index and get the precedence.
.2a08	b9 3a 2a	lda $2a3a,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2a0b	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2a0d	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2a0f	68		pla				pla 								; restore current level.
.2a10	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2a12	b0 f0		bcs $2a04			bcs 	_ELExit
.2a14	48		pha				pha 								; save current level back on the stack.
.2a15	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2a17	48		pha				pha
.2a18	c8		iny				iny
.2a19	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2a1a	a5 32		lda $32				lda 	tempShort
.2a1c	20 95 29	jsr $2995			jsr 	EvaluateLevel
.2a1f	ca		dex				dex
.2a20	68		pla				pla 								; get the operator back out.
.2a21					_ELExecuteA:
.2a21	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2a23	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2a24	aa		tax				tax
.2a25	bd 56 26	lda $2656,x			lda 	Group0Vectors,x
.2a28	85 2a		sta $2a				sta 	temp0
.2a2a	bd 57 26	lda $2657,x			lda 	Group0Vectors+1,x
.2a2d	85 2b		sta $2b				sta 	temp0+1
.2a2f	a6 32		ldx $32				ldx 	tempShort
.2a31	20 7e 2a	jsr $2a7e			jsr 	_ELCallTemp0
.2a34	4c f9 29	jmp $29f9			jmp 	_ELHasTerm 					; and loop back round.
.2a37					_ELCheckUnary:
.2a37	c8		iny				iny 								; skip over token.
.2a38	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2a3a	f0 19		beq $2a55			beq 	_ELMinus
.2a3c	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2a3e	f0 2c		beq $2a6c			beq 	_ELIndirect
.2a40	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2a42	f0 28		beq $2a6c			beq 	_ELIndirect
.2a44	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2a46	f0 39		beq $2a81			beq 	_ELExtension
.2a48	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2a4a	90 04		bcc $2a50			bcc 	_ELUSyntax
.2a4c	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2a4e	90 d1		bcc $2a21			bcc 	_ELExecuteA 				; if so do that token.
.2a50					_ELUSyntax:
.2a50	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a52	20 e0 14	jsr $14e0		jsr	errorHandler
.2a55					_ELMinus:
.2a55	20 e7 2a	jsr $2ae7			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2a58	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2a5a	f0 0a		beq $2a66			beq 	_ELMinusInteger
.2a5c	8a		txa				txa
.2a5d	a2 0c		ldx #$0c		ldx	#12
.2a5f	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2a62	aa		tax				tax
.2a63	4c f9 29	jmp $29f9			jmp 	_ELHasTerm
.2a66					_ELMinusInteger:
.2a66	20 6a 31	jsr $316a			jsr 	MInt32Negate 				; do int negate
.2a69	4c f9 29	jmp $29f9			jmp 	_ELHasTerm
.2a6c					_ELIndirect:
.2a6c	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2a6d	20 f0 2a	jsr $2af0			jsr 	EvaluateIntegerTerm 		; integer address
.2a70	68		pla				pla
.2a71	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2a73	f0 02		beq $2a77			beq 	_ELHaveModifier
.2a75	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2a77					_ELHaveModifier:
.2a77	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2a79	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2a7b	4c f9 29	jmp $29f9			jmp 	_ELHasTerm
.2a7e					_ELCallTemp0:
.2a7e	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2a81					_ELExtension:
.2a81	8a		txa				txa 								; stack pos in A
.2a82	20 15 18	jsr $1815		jsr	extensionHandler
.2a85	aa		tax				tax 								; restore stack
.2a86	4c f9 29	jmp $29f9			jmp 	_ELHasTerm
.2a89					UnaryParenthesis:
.2a89	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2a8b	20 95 29	jsr $2995			jsr 	EvaluateLevel
.2a8e	20 23 32	jsr $3223			jsr 	CheckRightParen 			; check for )
.2a91	60		rts				rts
.2a92					ELShiftByteIn:
.2a92	48		pha				pha 								; save bits to shift in.
.2a93	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2a95	48		pha				pha
.2a96	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2a98	95 68		sta $68,x			sta 	esInt3,x
.2a9a	b5 58		lda $58,x			lda 	esInt1,x
.2a9c	95 60		sta $60,x			sta 	esInt2,x
.2a9e	b5 50		lda $50,x			lda 	esInt0,x
.2aa0	95 58		sta $58,x			sta 	esInt1,x
.2aa2	a9 00		lda #$00			lda 	#0
.2aa4	95 50		sta $50,x			sta 	esInt0,x
.2aa6	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2aa7	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2aa9	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2aab					_ELShiftLoop:
.2aab	4a		lsr a				lsr 	a
.2aac	76 68		ror $68,x			ror 	esInt3,x
.2aae	76 60		ror $60,x			ror 	esInt2,x
.2ab0	76 58		ror $58,x			ror 	esInt1,x
.2ab2	76 50		ror $50,x			ror 	esInt0,x
.2ab4	c9 01		cmp #$01			cmp 	#1
.2ab6	d0 f3		bne $2aab			bne 	_ELShiftLoop
.2ab8	68		pla				pla 								; get original 6 bit value and OR in.
.2ab9	29 3f		and #$3f			and 	#$3F
.2abb	15 50		ora $50,x			ora 	esInt0,x
.2abd	95 50		sta $50,x			sta 	esInt0,x
.2abf	60		rts				rts
.2ac0					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2ac0	01					.byte	$01			; $86 and
>2ac1	01					.byte	$01			; $87 or
>2ac2	01					.byte	$01			; $88 xor
>2ac3	02					.byte	$02			; $89 >=
>2ac4	02					.byte	$02			; $8a <=
>2ac5	02					.byte	$02			; $8b >
>2ac6	02					.byte	$02			; $8c <
>2ac7	02					.byte	$02			; $8d =
>2ac8	02					.byte	$02			; $8e <>
>2ac9	03					.byte	$03			; $8f +
>2aca	03					.byte	$03			; $90 -
>2acb	04					.byte	$04			; $91 >>
>2acc	04					.byte	$04			; $92 <<
>2acd	04					.byte	$04			; $93 *
>2ace	04					.byte	$04			; $94 /
>2acf	04					.byte	$04			; $95 mod
>2ad0	05					.byte	$05			; $96 ^
>2ad1	06					.byte	$06			; $97 !
>2ad2	06					.byte	$06			; $98 ?
>2ad3	82					.byte	$82			; $99 repeat
>2ad4	82					.byte	$82			; $9a while
>2ad5	82					.byte	$82			; $9b for
>2ad6	82					.byte	$82			; $9c if
>2ad7	82					.byte	$82			; $9d defproc
>2ad8	80					.byte	$80			; $9e until
>2ad9	80					.byte	$80			; $9f wend
>2ada	80					.byte	$80			; $a0 next
>2adb	80					.byte	$80			; $a1 then
>2adc	80					.byte	$80			; $a2 endif
>2add	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2ade					EvaluateTerm:
.2ade	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2ae0	20 95 29	jsr $2995			jsr 	EvaluateLevel
.2ae3	20 44 29	jsr $2944			jsr 	DereferenceOne
.2ae6	60		rts				rts
.2ae7					EvaluateNumericTerm:
.2ae7	20 de 2a	jsr $2ade			jsr 	EvaluateTerm
.2aea	b5 48		lda $48,x			lda 	esType,x
.2aec	0a		asl a				asl 	a 							; see if it's a string.
.2aed	30 09		bmi $2af8			bmi 	ENTType
.2aef	60		rts				rts
.2af0					EvaluateIntegerTerm:
.2af0	20 de 2a	jsr $2ade			jsr 	EvaluateTerm
.2af3	b5 48		lda $48,x			lda 	esType,x
.2af5	d0 01		bne $2af8			bne 	ENTType
.2af7	60		rts				rts
.2af8					ENTType:
.2af8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2afa	20 e0 14	jsr $14e0		jsr	errorHandler
.2afd					EvaluateRoot:
.2afd	a2 00		ldx #$00			ldx 	#0
.2aff					Evaluate:
.2aff	a9 00		lda #$00			lda 	#0
.2b01	20 95 29	jsr $2995			jsr 	EvaluateLevel
.2b04	20 44 29	jsr $2944			jsr 	DereferenceOne
.2b07	60		rts				rts
.2b08					EvaluateNumeric:
.2b08	20 ff 2a	jsr $2aff			jsr 	Evaluate
.2b0b	b5 48		lda $48,x			lda 	esType,x
.2b0d	0a		asl a				asl 	a 							; see if it's a string.
.2b0e	30 e8		bmi $2af8			bmi 	ENTType
.2b10	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2b11	4a		lsr a				lsr 	a
.2b12	60		rts				rts
.2b13					EvaluateString:
.2b13	20 ff 2a	jsr $2aff			jsr 	Evaluate
.2b16	b5 48		lda $48,x			lda 	esType,x
.2b18	0a		asl a				asl 	a 							; see if it's a string.
.2b19	10 dd		bpl $2af8			bpl 	ENTType
.2b1b	60		rts				rts
.2b1c					EvaluateRootInteger:
.2b1c	a2 00		ldx #$00			ldx 	#0
.2b1e					EvaluateInteger:
.2b1e	20 ff 2a	jsr $2aff			jsr 	Evaluate
.2b21	b5 48		lda $48,x			lda 	esType,x
.2b23	d0 d3		bne $2af8			bne 	ENTType
.2b25	60		rts				rts
.2b26					EvaluateSmallInteger:
.2b26	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger
.2b29	b5 58		lda $58,x			lda 	esInt1,x
.2b2b	15 60		ora $60,x			ora 	esInt2,x
.2b2d	15 68		ora $68,x			ora 	esInt3,x
.2b2f	d0 03		bne $2b34			bne 	_ESIValue
.2b31	b5 50		lda $50,x			lda 	esInt0,x
.2b33	60		rts				rts
.2b34					_ESIValue:
.2b34	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2b36	20 e0 14	jsr $14e0		jsr	errorHandler
.2b39					LinkEvaluate:
.2b39	aa		tax				tax
.2b3a	20 ff 2a	jsr $2aff			jsr 	Evaluate
.2b3d	8a		txa				txa
.2b3e	60		rts				rts
.2b3f					LinkEvaluateTerm:
.2b3f	aa		tax				tax
.2b40	20 de 2a	jsr $2ade			jsr 	EvaluateTerm
.2b43	8a		txa				txa
.2b44	60		rts				rts
.2b45					LinkEvaluateInteger:
.2b45	aa		tax				tax
.2b46	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger
.2b49	8a		txa				txa
.2b4a	60		rts				rts
.2b4b					LinkEvaluateSmallInt:
.2b4b	aa		tax				tax
.2b4c	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger
.2b4f	8a		txa				txa
.2b50	60		rts				rts
.2b51					EvaluateReference:
.2b51	ad d1 2a	lda $2ad1			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2b54	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2b55	e9 01		sbc #$01			sbc 	#1
.2b57	20 95 29	jsr $2995			jsr 	EvaluateLevel
.2b5a	b5 48		lda $48,x			lda 	esType,x
.2b5c	10 01		bpl $2b5f			bpl 	_ERFail
.2b5e	60		rts				rts
.2b5f					_ERFail:
.2b5f	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2b61	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2b64					Event_Str:
.2b64	20 08 2b	jsr $2b08			jsr 	EvaluateNumeric 			; get a number.
.2b67	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2b69	d0 13		bne $2b7e			bne 	_ESFloat
.2b6b	20 c1 2b	jsr $2bc1			jsr 	ConvertGetBase 				; get base, or default.
.2b6e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2b70	85 2a		sta $2a				sta 	temp0
.2b72	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2b74	85 2b		sta $2b				sta 	1+(temp0)
.2b76	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2b78	20 06 31	jsr $3106			jsr 	MInt32ToString 				; convert to string.
.2b7b	4c 8b 2b	jmp $2b8b			jmp 	_ESCloneExit 				; clone and exit.
.2b7e					_ESFloat:
.2b7e	20 23 32	jsr $3223			jsr 	CheckRightParen 			; check closing )
.2b81	20 10 1f	jsr $1f10			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2b84	8a		txa				txa
.2b85	a2 14		ldx #$14		ldx	#20
.2b87	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2b8a	aa		tax				tax
.2b8b					_ESCloneExit:
.2b8b	8a		txa				txa
.2b8c	a2 02		ldx #$02		ldx	#2
.2b8e	20 56 35	jsr $3556		jsr	stringHandler
.2b91	aa		tax				tax
.2b92	60		rts				rts
.2b93					UnaryVal:
.2b93	38		sec				sec 								; Carry set to return value
.2b94	b0 01		bcs $2b97			bcs 	ValueMain
.2b96					UnaryIsVal:
.2b96	18		clc				clc									; Carry clear to return legitimacy
.2b97					ValueMain:
.2b97	08		php				php 								; save results (CS is value, CC is validation)
.2b98	20 13 2b	jsr $2b13			jsr 	EvaluateString
.2b9b	20 c1 2b	jsr $2bc1			jsr 	ConvertGetBase 				; get base, if any.
.2b9e	98		tya				tya
.2b9f	48		pha				pha
.2ba0	20 10 1f	jsr $1f10			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2ba3	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2ba5	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2ba7	20 1e 30	jsr $301e			jsr 	MInt32FromString 			; convert it back from a string.
.2baa	b0 0c		bcs $2bb8			bcs 	_VMSuccess 					; successfully converted.
.2bac	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2bae	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2bb0	f0 00		beq $2bb2			beq 	_VMFailed 	 				; so we failed.
.2bb2					_VMFailed:
.2bb2	68		pla				pla
.2bb3	a8		tay				tay
.2bb4	28		plp				plp
.2bb5	4c b0 31	jmp $31b0			jmp 	MInt32False 				; return 0 whatever.
.2bb8					_VMSuccess:
.2bb8	68		pla				pla
.2bb9	a8		tay				tay
.2bba	28		plp				plp 								; if CS the it was val() so we want the value.
.2bbb	b0 03		bcs $2bc0			bcs 	_VMExit
.2bbd	4c ac 31	jmp $31ac			jmp 	MInt32True 					; otherwise return true as successful.
.2bc0					_VMExit:
.2bc0	60		rts				rts
.2bc1					ConvertGetBase:
.2bc1	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2bc3	95 51		sta $51,x			sta 	esInt0+1,x
.2bc5	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2bc7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2bc9	d0 0e		bne $2bd9			bne 	_CGBDone 					; not found, should be )
.2bcb	e8		inx				inx 								; next level
.2bcc	c8		iny				iny 								; skip comma.
.2bcd	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger		; evaluate the base.
.2bd0	ca		dex				dex
.2bd1	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2bd3	90 08		bcc $2bdd			bcc 	_CGBValue 					; (it should work as high as 37)
.2bd5	c9 11		cmp #$11			cmp 	#17
.2bd7	b0 04		bcs $2bdd			bcs 	_CGBValue
.2bd9					_CGBDone:
.2bd9	20 23 32	jsr $3223			jsr 	CheckRightParen
.2bdc	60		rts				rts
.2bdd					_CGBValue:
.2bdd	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2bdf	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2be2					EventFunction:
.2be2	20 51 2b	jsr $2b51			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2be5	b5 48		lda $48,x			lda 	esType,x
.2be7	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2be9	d0 5b		bne $2c46			bne 	_EFType
.2beb	20 30 32	jsr $3230			jsr 	CheckComma
.2bee	e8		inx				inx
.2bef	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2bf2	20 23 32	jsr $3223			jsr 	CheckRightParen 			; finish off with the right bracket
.2bf5	ca		dex				dex
.2bf6	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2bf8	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2bfa	15 60		ora $60,x			ora 	esInt2,x
.2bfc	15 68		ora $68,x			ora 	esInt3,x
.2bfe	d0 41		bne $2c41			bne 	_EFValue
.2c00	98		tya				tya
.2c01	48		pha				pha
.2c02	8a		txa				txa
.2c03	48		pha				pha
.2c04	a2 1c		ldx #$1c		ldx	#28
.2c06	20 bf 14	jsr $14bf		jsr	deviceHandler
.2c09	84 2d		sty $2d				sty 	temp1+1
.2c0b	85 2c		sta $2c				sta 	temp1
.2c0d	68		pla				pla
.2c0e	aa		tax				tax
.2c0f	20 10 1f	jsr $1f10			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2c12	a0 03		ldy #$03			ldy 	#3							; if -ve
.2c14	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c16	30 23		bmi $2c3b			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2c18	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2c1a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c1c	c8		iny				iny
.2c1d	11 2a		ora ($2a),y			ora 	(temp0),y
.2c1f	f0 17		beq $2c38			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2c21	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2c23	38		sec				sec
.2c24	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c26	e5 2c		sbc $2c				sbc 	temp1
.2c28	c8		iny				iny
.2c29	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c2b	e5 2d		sbc $2d				sbc 	temp1+1
.2c2d	10 0c		bpl $2c3b			bpl 	_EFFail 					; if trigger >= timer then return False
.2c2f	20 4b 2c	jsr $2c4b			jsr 	SetEventTimer 				; reset the timer for next time.
.2c32	20 ac 31	jsr $31ac			jsr	 	MInt32True 					; and treutn true as fired.
.2c35	68		pla				pla
.2c36	a8		tay				tay
.2c37	60		rts				rts
.2c38					_EFInitialise:
.2c38	20 4b 2c	jsr $2c4b			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2c3b					_EFFail:
.2c3b	68		pla				pla
.2c3c	a8		tay				tay
.2c3d	20 b0 31	jsr $31b0			jsr 	MInt32False
.2c40	60		rts				rts
.2c41					_EFValue:
.2c41	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2c43	20 e0 14	jsr $14e0		jsr	errorHandler
.2c46					_EFType:
.2c46	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c48	20 e0 14	jsr $14e0		jsr	errorHandler
.2c4b					SetEventTimer:
.2c4b	a0 00		ldy #$00			ldy 	#0
.2c4d	18		clc				clc
.2c4e	a5 2c		lda $2c				lda 	temp1
.2c50	75 51		adc $51,x			adc 	esInt0+1,x
.2c52	91 2a		sta ($2a),y			sta		(temp0),y
.2c54	c8		iny				iny
.2c55	a5 2d		lda $2d				lda 	temp1+1
.2c57	75 59		adc $59,x			adc 	esInt1+1,x
.2c59	91 2a		sta ($2a),y			sta		(temp0),y
.2c5b	88		dey				dey
.2c5c	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2c5e	d0 04		bne $2c64			bne 	_SETExit 					; zero means initialise.....
.2c60	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2c62	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2c64					_SETExit:
.2c64	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2c65					UnaryLen:
.2c65	20 73 2c	jsr $2c73			jsr 	ULStart
.2c68					ULFinish:
.2c68	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2c6a	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2c6c	20 bf 31	jsr $31bf			jsr 	MInt32Set8Bit 				; write it out.
.2c6f	20 23 32	jsr $3223			jsr 	CheckRightParen
.2c72	60		rts				rts
.2c73	20 13 2b	jsr $2b13	ULStart:jsr 	EvaluateString
.2c76	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2c78	85 2a		sta $2a				sta 	temp0
.2c7a	b5 58		lda $58,x			lda 	esInt1,x
.2c7c	85 2b		sta $2b				sta 	temp0+1
.2c7e	84 32		sty $32				sty 	tempShort 					; get length
.2c80	a0 00		ldy #$00			ldy 	#0
.2c82	60		rts				rts
.2c83					UnaryAsc:
.2c83	20 73 2c	jsr $2c73			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2c86	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2c88	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2c89	c9 00		cmp #$00			cmp 	#0
.2c8b	d0 db		bne $2c68			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2c8d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2c8f	20 e0 14	jsr $14e0		jsr	errorHandler
.2c92					UnaryAbs:
.2c92	20 08 2b	jsr $2b08			jsr 	EvaluateNumeric 			; some numeric value
.2c95	b0 07		bcs $2c9e			bcs 	_UAFloat 					; CS then float, so use that function
.2c97	20 65 31	jsr $3165			jsr 	MInt32Absolute 				; int version
.2c9a	20 23 32	jsr $3223			jsr 	CheckRightParen
.2c9d	60		rts				rts
.2c9e					_UAFloat:
.2c9e	8a		txa				txa 								; float version
.2c9f	a2 00		ldx #$00		ldx	#0
.2ca1	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2ca4	aa		tax				tax
.2ca5	20 23 32	jsr $3223			jsr 	CheckRightParen
.2ca8	60		rts				rts
.2ca9					UnarySgn:
.2ca9	20 08 2b	jsr $2b08			jsr 	EvaluateNumeric 			; same as above but sign of value
.2cac	b0 07		bcs $2cb5			bcs 	_USFloat
.2cae	20 9d 31	jsr $319d			jsr 	MInt32Sign
.2cb1	20 23 32	jsr $3223			jsr 	CheckRightParen
.2cb4	60		rts				rts
.2cb5					_USFloat:
.2cb5	8a		txa				txa
.2cb6	a2 0e		ldx #$0e		ldx	#14
.2cb8	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2cbb	aa		tax				tax
.2cbc	20 23 32	jsr $3223			jsr 	CheckRightParen
.2cbf	60		rts				rts
.2cc0					UnaryPeek:
.2cc0	20 ec 2c	jsr $2cec			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2cc3	4c e0 2c	jmp $2ce0			jmp 	PDLByte0
.2cc6					UnaryDeek:
.2cc6	20 ec 2c	jsr $2cec			jsr 	PDLCode
.2cc9	4c da 2c	jmp $2cda			jmp 	PDLByte1
.2ccc					UnaryLeek:
.2ccc	20 ec 2c	jsr $2cec			jsr 	PDLCode
.2ccf	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2cd1	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cd3	95 68		sta $68,x			sta 	esInt3,x
.2cd5	88		dey				dey
.2cd6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cd8	95 60		sta $60,x			sta 	esInt2,x
.2cda					PDLByte1:
.2cda	a0 01		ldy #$01			ldy 	#1
.2cdc	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cde	95 58		sta $58,x			sta 	esInt1,x
.2ce0					PDLByte0:
.2ce0	a0 00		ldy #$00			ldy 	#0
.2ce2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ce4	95 50		sta $50,x			sta 	esInt0,x
.2ce6	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2ce8	20 23 32	jsr $3223			jsr 	CheckRightParen 			; check right and return
.2ceb	60		rts				rts
.2cec					PDLCode:
.2cec	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger 			; some address
.2cef	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2cf1	85 2a		sta $2a				sta 	temp0
.2cf3	b5 58		lda $58,x			lda 	esInt1,x
.2cf5	85 2b		sta $2b				sta 	temp0+1
.2cf7	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2cf9	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2cfb	95 60		sta $60,x			sta 	esInt2,x
.2cfd	95 68		sta $68,x			sta 	esInt3,x
.2cff	84 32		sty $32				sty 	tempShort 					; save Y
.2d01	60		rts				rts
.2d02					Unary_Random:
.2d02	20 e0 31	jsr $31e0			jsr 	MInt32Random 				; generate random number.
.2d05	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2d07	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2d09	f0 08		beq $2d13			beq 	_URExit
.2d0b	e8		inx				inx 								; load range 0..r-1 into +1
.2d0c	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger
.2d0f	ca		dex				dex
.2d10	20 03 30	jsr $3003			jsr 	MInt32Modulus 				; calculate random % modulus
.2d13					_URExit:
.2d13	20 23 32	jsr $3223			jsr 	CheckRightParen 			; check right and return
.2d16	60		rts				rts
.2d17					Unary_Min:
.2d17	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2d19	d0 02		bne $2d1d			bne 	UnaryMBody
.2d1b					Unary_Max:
.2d1b	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2d1d					UnaryMBody:
.2d1d	48		pha				pha 								; save comparator on stack, shows min or max
.2d1e	20 ff 2a	jsr $2aff			jsr 	Evaluate 					; get the first thing to check
.2d21					_UnaryMLoop:
.2d21	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2d23	c8		iny				iny
.2d24	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2d26	f0 09		beq $2d31			beq 	_UnaryMExit
.2d28	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2d2a	f0 07		beq $2d33			beq 	_UnaryMCompare
.2d2c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2d2e	20 e0 14	jsr $14e0		jsr	errorHandler
.2d31					_UnaryMExit:
.2d31	68		pla				pla 								; done so throw comparator and return.
.2d32	60		rts				rts
.2d33					_UnaryMCompare:
.2d33	e8		inx				inx 								; get the 2nd thing to evaluate
.2d34	20 ff 2a	jsr $2aff			jsr 	Evaluate
.2d37	ca		dex				dex
.2d38	20 c5 28	jsr $28c5			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2d3b	85 32		sta $32				sta 	tempShort 					; save result
.2d3d	68		pla				pla 								; get what we need
.2d3e	48		pha				pha
.2d3f	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2d41	d0 de		bne $2d21			bne 	_UnaryMLoop 				; no, try another value.
.2d43	20 b0 31	jsr $31b0			jsr 	MInt32False 				; promote 2nd to 1st.
.2d46	20 94 30	jsr $3094			jsr 	MInt32Add
.2d49	4c 21 2d	jmp $2d21			jmp 	_UnaryMLoop
.2d4c					Unary_Page:
.2d4c	20 b0 31	jsr $31b0			jsr 	MInt32False 				; zero
.2d4f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2d52	95 50		sta $50,x			sta 	esInt0,x
.2d54	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d57	95 58		sta $58,x			sta 	esInt1,x
.2d59	60		rts				rts
.2d5a					UnaryReference:
.2d5a	a9 0f		lda #$0f			lda 	#15
.2d5c	20 95 29	jsr $2995			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2d5f	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2d61	10 05		bpl $2d68			bpl 	UType
.2d63	a9 00		lda #$00			lda 	#0 							; make it an integer
.2d65	95 48		sta $48,x			sta 	esType,x
.2d67	60		rts				rts
.2d68					UType:
.2d68	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d6a	20 e0 14	jsr $14e0		jsr	errorHandler
.2d6d					UnaryHexMarker:
.2d6d	4c f0 2a	jmp $2af0			jmp 	EvaluateIntegerTerm
.2d70					UnaryComplement:
.2d70	20 f0 2a	jsr $2af0			jsr 	EvaluateIntegerTerm
.2d73	20 84 31	jsr $3184			jsr 	MInt32Not
.2d76	60		rts				rts
.2d77					UnaryIntToFloat:
.2d77	20 08 2b	jsr $2b08			jsr 	EvaluateNumeric				; some number
.2d7a	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2d7c	d0 0b		bne $2d89			bne 	_UIFExit
.2d7e	8a		txa				txa 								; convert and set type
.2d7f	a2 1a		ldx #$1a		ldx	#26
.2d81	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2d84	aa		tax				tax
.2d85	a9 01		lda #$01			lda 	#1
.2d87	95 48		sta $48,x			sta 	esType,x
.2d89					_UIFExit:
.2d89	60		rts				rts
.2d8a					UnaryFloatToInt:
.2d8a	20 08 2b	jsr $2b08			jsr 	EvaluateNumeric 			; the number
.2d8d	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2d8f	f0 0b		beq $2d9c			beq 	_UFIExit
.2d91	8a		txa				txa 								; convert to int
.2d92	a2 12		ldx #$12		ldx	#18
.2d94	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2d97	aa		tax				tax
.2d98	a9 00		lda #$00			lda 	#0 							; set type
.2d9a	95 48		sta $48,x			sta 	esType,x
.2d9c					_UFIExit:
.2d9c	60		rts				rts
.2d9d					UnaryAlloc:
.2d9d	e8		inx				inx 								; evaluate memory required
.2d9e	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger
.2da1	20 23 32	jsr $3223			jsr 	CheckRightParen
.2da4	ca		dex				dex
.2da5	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2da7	15 69		ora $69,x			ora 	esInt3+1,x
.2da9	d0 1d		bne $2dc8			bne 	_UABadValue
.2dab	20 b0 31	jsr $31b0			jsr 	MInt32False					; zero return.
.2dae	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2db0	95 58		sta $58,x			sta 	esInt1,x
.2db2	a5 35		lda $35				lda 	lowMemory
.2db4	95 50		sta $50,x			sta 	esInt0,x
.2db6	18		clc				clc 								; add alloc required.
.2db7	75 51		adc $51,x			adc 	esInt0+1,x
.2db9	85 35		sta $35				sta 	lowMemory
.2dbb	a5 36		lda $36				lda 	lowMemory+1
.2dbd	75 59		adc $59,x			adc 	esInt1+1,x
.2dbf	85 36		sta $36				sta 	lowMemory+1
.2dc1	b0 05		bcs $2dc8			bcs		_UABadValue 				; overflow definitely bad.
.2dc3	c5 34		cmp $34				cmp 	highMemory+1
.2dc5	b0 01		bcs $2dc8			bcs 	_UABadValue 				; out of memory bad.
.2dc7	60		rts				rts
.2dc8					_UABadValue:
.2dc8	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2dca	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.2dcd					UnaryTimer:
.2dcd	20 23 32	jsr $3223			jsr 	CheckRightParen 			; no parameters
.2dd0	98		tya				tya
.2dd1	48		pha				pha
.2dd2	20 d7 31	jsr $31d7			jsr 	MInt32Zero 					; zero result
.2dd5	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2dd7	a2 1c		ldx #$1c		ldx	#28
.2dd9	20 bf 14	jsr $14bf		jsr	deviceHandler
.2ddc	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2dde	95 50		sta $50,x			sta 	esInt0,x
.2de0	98		tya				tya
.2de1	95 58		sta $58,x			sta 	esInt1,x
.2de3	68		pla				pla
.2de4	a8		tay				tay
.2de5	60		rts				rts
.2de6					UnaryInkey:
.2de6	20 23 32	jsr $3223			jsr 	CheckRightParen
.2de9	86 2a		stx $2a				stx 	temp0
.2deb	a2 0a		ldx #$0a		ldx	#10
.2ded	20 bf 14	jsr $14bf		jsr	deviceHandler
.2df0	a6 2a		ldx $2a				ldx 	temp0
.2df2	20 bf 31	jsr $31bf			jsr 	MInt32Set8Bit
.2df5	60		rts				rts
.2df6					UnaryGet:
.2df6	20 23 32	jsr $3223			jsr 	CheckRightParen
.2df9	86 2a		stx $2a				stx 	temp0
.2dfb					_UGLoop:
.2dfb	a2 00		ldx #$00		ldx	#0
.2dfd	20 bf 14	jsr $14bf		jsr	deviceHandler
.2e00	a2 0a		ldx #$0a		ldx	#10
.2e02	20 bf 14	jsr $14bf		jsr	deviceHandler
.2e05	c9 00		cmp #$00			cmp 	#0
.2e07	f0 f2		beq $2dfb			beq 	_UGLoop
.2e09	a6 2a		ldx $2a				ldx 	temp0
.2e0b	20 bf 31	jsr $31bf			jsr 	MInt32Set8Bit
.2e0e	60		rts				rts
.2e0f					UnaryGetString:
.2e0f	20 f6 2d	jsr $2df6			jsr 	UnaryGet
.2e12					UGSDoChr:
.2e12	4c 63 2e	jmp $2e63			jmp 	ChrCode
.2e15					UnaryInkeyString:
.2e15	20 e6 2d	jsr $2de6			jsr 	UnaryInkey
.2e18	b5 50		lda $50,x			lda 	esInt0,x
.2e1a	d0 f6		bne $2e12			bne 	UGSDoChr
.2e1c	8a		txa				txa
.2e1d	a2 06		ldx #$06		ldx	#6
.2e1f	20 56 35	jsr $3556		jsr	stringHandler
.2e22	aa		tax				tax
.2e23	60		rts				rts
.2e24					UnarySys:
.2e24	20 1e 2b	jsr $2b1e			jsr 	EvaluateInteger 				; get the address
.2e27	20 23 32	jsr $3223			jsr 	CheckRightParen
.2e2a	20 10 1f	jsr $1f10			jsr 	TOSToTemp0 						; copy call address to temp0
.2e2d	8a		txa				txa
.2e2e	48		pha				pha
.2e2f	98		tya				tya
.2e30	48		pha				pha
.2e31	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2e34	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2e37	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2e3a	20 49 2e	jsr $2e49			jsr 	_CallTemp0
.2e3d	85 32		sta $32				sta 	tempShort 						; restore YX
.2e3f	68		pla				pla
.2e40	a8		tay				tay
.2e41	68		pla				pla
.2e42	aa		tax				tax
.2e43	a5 32		lda $32				lda 	tempShort
.2e45	20 bf 31	jsr $31bf			jsr 	MInt32Set8Bit 					; return result.
.2e48	60		rts				rts
.2e49					_CallTemp0:
.2e49	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2e4c					UnaryMem:
.2e4c	20 b0 31	jsr $31b0			jsr 	MInt32False 					; set to false (e.g. 0)
.2e4f	38		sec				sec
.2e50	a5 33		lda $33				lda 	highMemory 						; calculate value
.2e52	e5 35		sbc $35				sbc 	lowMemory
.2e54	95 50		sta $50,x			sta 	esInt0,x
.2e56	a5 34		lda $34				lda 	highMemory+1
.2e58	e5 36		sbc $36				sbc 	lowMemory+1
.2e5a	95 58		sta $58,x			sta 	esInt1,x
.2e5c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.2e5d					ExecChr:
.2e5d	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger		; character number 0-255
.2e60	20 23 32	jsr $3223			jsr 	CheckRightParen				; right bracket
.2e63					ChrCode:
.2e63	98		tya				tya
.2e64	48		pha				pha
.2e65	8a		txa				txa 								; A = stack
.2e66	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.2e68	a2 00		ldx #$00		ldx	#0
.2e6a	20 56 35	jsr $3556		jsr	stringHandler
.2e6d	aa		tax				tax 								; X = stack
.2e6e	68		pla				pla
.2e6f	a8		tay				tay
.2e70	60		rts				rts
.2e71					ExecLower:
.2e71	38		sec				sec 								; set carry is lower
.2e72	b0 01		bcs $2e75			bcs 	ExecUpperLower
.2e74					ExecUpper:
.2e74	18		clc				clc 								; clear carry is upper
.2e75					ExecUpperLower:
.2e75	08		php				php 								; save carry
.2e76	20 13 2b	jsr $2b13			jsr 	EvaluateString 				; string to stack,X
.2e79	20 23 32	jsr $3223			jsr 	CheckRightParen 			; check closing right bracket.
.2e7c	28		plp				plp 								; restore carry, save Y
.2e7d	98		tya				tya
.2e7e	48		pha				pha
.2e7f	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2e81	2a		rol a				rol 	a
.2e82	a8		tay				tay 								; now in Y
.2e83	8a		txa				txa 								; do the substring and exit.
.2e84	a2 0a		ldx #$0a		ldx	#10
.2e86	20 56 35	jsr $3556		jsr	stringHandler
.2e89	aa		tax				tax
.2e8a	68		pla				pla
.2e8b	a8		tay				tay
.2e8c	60		rts				rts
.2e8d					ExecLeft:
.2e8d	20 13 2b	jsr $2b13			jsr 	EvaluateString 				; string to stack,X
.2e90	20 30 32	jsr $3230			jsr 	CheckComma
.2e93	e8		inx				inx
.2e94	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2e96	20 bf 31	jsr $31bf			jsr 	MInt32Set8Bit
.2e99	e8		inx				inx
.2e9a	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2e9d					ExecSubstring:
.2e9d	ca		dex				dex 								; fix up X
.2e9e	ca		dex				dex
.2e9f	20 23 32	jsr $3223			jsr 	CheckRightParen 			; check closing right bracket.
.2ea2	8a		txa				txa 								; do the substring and exit.
.2ea3	a2 0c		ldx #$0c		ldx	#12
.2ea5	20 56 35	jsr $3556		jsr	stringHandler
.2ea8	aa		tax				tax
.2ea9	60		rts				rts
.2eaa					ExecMid:
.2eaa	20 13 2b	jsr $2b13			jsr 	EvaluateString 				; string to stack,X
.2ead	20 30 32	jsr $3230			jsr 	CheckComma
.2eb0	e8		inx				inx
.2eb1	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2eb4	c9 00		cmp #$00			cmp 	#0
.2eb6	f0 15		beq $2ecd			beq 	_EMValue
.2eb8	e8		inx				inx
.2eb9	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2ebb	20 bf 31	jsr $31bf			jsr 	MInt32Set8Bit
.2ebe	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2ec0	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2ec2	f0 d9		beq $2e9d			beq 	ExecSubString
.2ec4	20 30 32	jsr $3230			jsr 	CheckComma
.2ec7	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2eca	4c 9d 2e	jmp $2e9d			jmp 	ExecSubString
.2ecd					_EMValue:
.2ecd	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ecf	20 e0 14	jsr $14e0		jsr	errorHandler
.2ed2					ExecRight:
.2ed2	20 13 2b	jsr $2b13			jsr 	EvaluateString 				; string to stack,X
.2ed5	20 30 32	jsr $3230			jsr 	CheckComma
.2ed8	e8		inx				inx
.2ed9	20 26 2b	jsr $2b26			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2edc	ca		dex				dex
.2edd	98		tya				tya
.2ede	48		pha				pha
.2edf	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2ee1	85 2a		sta $2a				sta 	temp0
.2ee3	b5 58		lda $58,x			lda 	esInt1,x
.2ee5	85 2b		sta $2b				sta 	temp0+1
.2ee7	a0 00		ldy #$00			ldy 	#0 							; point to length
.2ee9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2eeb	18		clc				clc 								; add 1.
.2eec	69 01		adc #$01			adc 	#1
.2eee	38		sec				sec
.2eef	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.2ef1	f0 02		beq $2ef5			beq		_ERMake1 					; if zero, make it 1.
.2ef3	b0 02		bcs $2ef7			bcs		_EROkay
.2ef5					_ERMake1:
.2ef5	a9 01		lda #$01			lda 	#1 							; start position.
.2ef7					_EROkay:
.2ef7	e8		inx				inx 								; set start pos.
.2ef8	95 50		sta $50,x			sta 	esInt0,x
.2efa	e8		inx				inx
.2efb	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2efd	20 bf 31	jsr $31bf			jsr 	MInt32Set8Bit
.2f00	68		pla				pla
.2f01	a8		tay				tay
.2f02	4c 9d 2e	jmp $2e9d			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2f05					MInt32And:
.2f05	b5 50		lda $50,x			lda 	esInt0,x
.2f07	35 51		and $51,x			and 	esInt0+1,x
.2f09	95 50		sta $50,x			sta 	esInt0,x
.2f0b	b5 58		lda $58,x			lda 	esInt1,x
.2f0d	35 59		and $59,x			and 	esInt1+1,x
.2f0f	95 58		sta $58,x			sta 	esInt1,x
.2f11	b5 60		lda $60,x			lda 	esInt2,x
.2f13	35 61		and $61,x			and 	esInt2+1,x
.2f15	95 60		sta $60,x			sta 	esInt2,x
.2f17	b5 68		lda $68,x			lda 	esInt3,x
.2f19	35 69		and $69,x			and 	esInt3+1,x
.2f1b	95 68		sta $68,x			sta 	esInt3,x
.2f1d	60		rts				rts
.2f1e					MInt32Or:
.2f1e	b5 50		lda $50,x			lda 	esInt0,x
.2f20	15 51		ora $51,x			ora 	esInt0+1,x
.2f22	95 50		sta $50,x			sta 	esInt0,x
.2f24	b5 58		lda $58,x			lda 	esInt1,x
.2f26	15 59		ora $59,x			ora 	esInt1+1,x
.2f28	95 58		sta $58,x			sta 	esInt1,x
.2f2a	b5 60		lda $60,x			lda 	esInt2,x
.2f2c	15 61		ora $61,x			ora 	esInt2+1,x
.2f2e	95 60		sta $60,x			sta 	esInt2,x
.2f30	b5 68		lda $68,x			lda 	esInt3,x
.2f32	15 69		ora $69,x			ora 	esInt3+1,x
.2f34	95 68		sta $68,x			sta 	esInt3,x
.2f36	60		rts				rts
.2f37					MInt32Xor:
.2f37	b5 50		lda $50,x			lda 	esInt0,x
.2f39	55 51		eor $51,x			eor 	esInt0+1,x
.2f3b	95 50		sta $50,x			sta 	esInt0,x
.2f3d	b5 58		lda $58,x			lda 	esInt1,x
.2f3f	55 59		eor $59,x			eor 	esInt1+1,x
.2f41	95 58		sta $58,x			sta 	esInt1,x
.2f43	b5 60		lda $60,x			lda 	esInt2,x
.2f45	55 61		eor $61,x			eor 	esInt2+1,x
.2f47	95 60		sta $60,x			sta 	esInt2,x
.2f49	b5 68		lda $68,x			lda 	esInt3,x
.2f4b	55 69		eor $69,x			eor 	esInt3+1,x
.2f4d	95 68		sta $68,x			sta 	esInt3,x
.2f4f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2f50					MInt32Compare:
.2f50	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.2f52	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2f54	d0 13		bne $2f69			bne 	MInt32Compare2
.2f56	b5 58		lda $58,x			lda 	esInt1,x
.2f58	d5 59		cmp $59,x			cmp 	esInt1+1,x
.2f5a	d0 0d		bne $2f69			bne 	MInt32Compare2
.2f5c	b5 60		lda $60,x			lda 	esInt2,x
.2f5e	d5 61		cmp $61,x			cmp 	esInt2+1,x
.2f60	d0 07		bne $2f69			bne 	MInt32Compare2
.2f62	b5 68		lda $68,x			lda 	esInt3,x
.2f64	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2f66	d0 01		bne $2f69			bne 	MInt32Compare2
.2f68	60		rts				rts
.2f69					MInt32Compare2:
.2f69	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2f6b	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2f6d	b5 58		lda $58,x			lda		esInt1,x
.2f6f	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2f71	b5 60		lda $60,x			lda		esInt2,x
.2f73	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2f75	b5 68		lda $68,x			lda		esInt3,x
.2f77	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2f79	50 02		bvc $2f7d			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2f7b	49 80		eor #$80			eor 	#$80
.2f7d					_I32LNoOverflow
.2f7d	30 03		bmi $2f82			bmi 	MInt32CLess					; if -ve then return $FF
.2f7f	a9 01		lda #$01			lda 	#$01						; else return $01
.2f81	60		rts				rts
.2f82					MInt32CLess:
.2f82	a9 ff		lda #$ff			lda 	#$FF
.2f84	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2f85					MInt32SDivide:
.2f85	98		tya				tya  								; save Y, which is the count of negations
.2f86	48		pha				pha
.2f87	a0 00		ldy #$00			ldy 	#0 							; zero count
.2f89	20 a1 2f	jsr $2fa1			jsr 	_MInt32SRemSign 			; unsign TOS
.2f8c	e8		inx				inx 								; unsign TOS+1
.2f8d	20 a1 2f	jsr $2fa1			jsr 	_MInt32SRemSign
.2f90	ca		dex				dex
.2f91	98		tya				tya 								; save sign count on stack
.2f92	48		pha				pha
.2f93	20 aa 2f	jsr $2faa			jsr 	MInt32UDivide 				; unsigned division
.2f96	68		pla				pla 								; get sign count back
.2f97	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2f99	f0 03		beq $2f9e			beq 	_I32SNoNeg
.2f9b	20 6a 31	jsr $316a			jsr 	MInt32Negate
.2f9e					_I32SNoNeg:
.2f9e	68		pla				pla 								; restoe Y and exit
.2f9f	a8		tay				tay
.2fa0	60		rts				rts
.2fa1					_MInt32SRemSign:
.2fa1	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.2fa3	10 04		bpl $2fa9			bpl 	_MInt32SRSExit
.2fa5	c8		iny				iny 								; increment the sign count
.2fa6	20 6a 31	jsr $316a			jsr 	MInt32Negate 				; negate the value.
.2fa9					_MInt32SRSExit:
.2fa9	60		rts				rts
.2faa					MInt32UDivide:
.2faa	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.2fac	15 59		ora $59,x			ora 	esInt1+1,x
.2fae	15 5a		ora $5a,x			ora 	esInt1+2,x
.2fb0	15 5b		ora $5b,x			ora 	esInt1+3,x
.2fb2	f0 4a		beq $2ffe			beq 	_MInt32DZero
.2fb4	e8		inx				inx 								; clear A
.2fb5	e8		inx				inx
.2fb6	20 b0 31	jsr $31b0			jsr 	MInt32False
.2fb9	ca		dex				dex
.2fba	ca		dex				dex
.2fbb	98		tya				tya 								; save Y on the stack
.2fbc	48		pha				pha
.2fbd	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2fbf					_MInt32UDLoop:
.2fbf	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.2fc1	36 58		rol $58,x			rol 	esInt1,x
.2fc3	36 60		rol $60,x			rol 	esInt2,x
.2fc5	36 68		rol $68,x			rol 	esInt3,x
.2fc7	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.2fc9	36 5a		rol $5a,x			rol 	esInt1+2,x
.2fcb	36 62		rol $62,x			rol 	esInt2+2,x
.2fcd	36 6a		rol $6a,x			rol 	esInt3+2,x
.2fcf	38		sec				sec 								; calculate A-M saving result on the stack
.2fd0	b5 52		lda $52,x			lda 	esInt0+2,x
.2fd2	f5 51		sbc $51,x			sbc 	esInt0+1,x
.2fd4	48		pha				pha
.2fd5	b5 5a		lda $5a,x			lda 	esInt1+2,x
.2fd7	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2fd9	48		pha				pha
.2fda	b5 62		lda $62,x			lda 	esInt2+2,x
.2fdc	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2fde	48		pha				pha
.2fdf	b5 6a		lda $6a,x			lda 	esInt3+2,x
.2fe1	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2fe3	90 10		bcc $2ff5			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2fe5	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.2fe7	68		pla				pla
.2fe8	95 62		sta $62,x			sta 	esInt2+2,x
.2fea	68		pla				pla
.2feb	95 5a		sta $5a,x			sta 	esInt1+2,x
.2fed	68		pla				pla
.2fee	95 52		sta $52,x			sta 	esInt0+2,x
.2ff0	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2ff2	4c f8 2f	jmp $2ff8			jmp 	_MInt32Next 					; do the next iteration
.2ff5					_MInt32NoSubtract:
.2ff5	68		pla				pla
.2ff6	68		pla				pla
.2ff7	68		pla				pla
.2ff8					_MInt32Next:
.2ff8	88		dey				dey 								; do this 32 times.
.2ff9	d0 c4		bne $2fbf			bne 	_MInt32UDLoop
.2ffb	68		pla				pla 								; restore Y and exit
.2ffc	a8		tay				tay
.2ffd	60		rts				rts
.2ffe					_MInt32DZero:
.2ffe	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3000	20 e0 14	jsr $14e0		jsr	errorHandler
.3003					MInt32Modulus:
.3003	20 aa 2f	jsr $2faa			jsr 	MInt32UDivide 				; do the division.
.3006	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3008	95 68		sta $68,x			sta 	esInt3,x
.300a	b5 62		lda $62,x			lda 	esInt2+2,x
.300c	95 60		sta $60,x			sta 	esInt2,x
.300e	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3010	95 58		sta $58,x			sta 	esInt1,x
.3012	b5 52		lda $52,x			lda 	esInt0+2,x
.3014	95 50		sta $50,x			sta 	esInt0,x
.3016	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c18					fs32Length:
>0c18							.fill 	1
.3017					LinkInt32FromString:
.3017	aa		tax				tax
.3018	98		tya				tya
.3019	20 1e 30	jsr $301e			jsr 	MInt32FromString
.301c	8a		txa				txa
.301d	60		rts				rts
.301e					MInt32FromString:
.301e	85 32		sta $32				sta 	tempShort 					; save base
.3020	98		tya				tya
.3021	48		pha				pha
.3022	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3024	b1 2a		lda ($2a),y			lda 	(temp0),y
.3026	8d 18 0c	sta $0c18			sta 	fs32Length
.3029	f0 65		beq $3090			beq 	_I32FSFail2					; fail if length zero.
.302b	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.302d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.302f	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3031	d0 09		bne $303c			bne 	_I32FSNotNegative
.3033	ad 18 0c	lda $0c18			lda 	fs32Length 					; get length back.
.3036	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3038	f0 56		beq $3090			beq 	_I32FSFail2
.303a	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.303c					_I32FSNotNegative:
.303c	a5 32		lda $32				lda 	tempShort 					; get the base back.
.303e	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3040	d0 02		bne $3044			bne 	_I32FSNN2
.3042	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3044					_I32FSNN2:
.3044	48		pha				pha 								; save base + final sign on stack.
.3045	20 b0 31	jsr $31b0			jsr 	MInt32False 				; zero the return value.
.3048					_I32FSMainLoop:
.3048	68		pla				pla 								; get the base back into tempShort
.3049	48		pha				pha
.304a	29 7f		and #$7f			and 	#$7F
.304c	85 32		sta $32				sta 	tempShort
.304e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3050	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3052	90 02		bcc $3056			bcc 	_I32FSNotLC
.3054	e9 20		sbc #$20			sbc 	#32
.3056					_I32FSNotLC:
.3056	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3057	e9 30		sbc #$30			sbc 	#"0"
.3059	90 34		bcc $308f			bcc 	_I32FSFail 					; nothing more to do.
.305b	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.305d	90 06		bcc $3065			bcc 	_I32FSValidate
.305f	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3061	90 2c		bcc $308f			bcc 	_I32FSFail
.3063	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3065					_I32FSValidate:
.3065	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3067	b0 26		bcs $308f			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3069	48		pha				pha 								; save the new digit value.
.306a	e8		inx				inx 								; put base into next slot up on stack
.306b	a5 32		lda $32				lda 	tempShort
.306d	20 bf 31	jsr $31bf			jsr 	MInt32Set8Bit
.3070	ca		dex				dex
.3071	20 c8 30	jsr $30c8			jsr 	MInt32Multiply 				; multiply current by the base
.3074	e8		inx				inx
.3075	68		pla				pla  								; put additive into next slot
.3076	20 bf 31	jsr $31bf			jsr 	MInt32Set8Bit
.3079	ca		dex				dex
.307a	20 94 30	jsr $3094			jsr 	MInt32Add 					; and add it
.307d	c8		iny				iny 								; bump the character pointer
.307e	cc 18 0c	cpy $0c18			cpy 	fs32Length 					; until > length.
.3081	f0 c5		beq $3048			beq 	_I32FSMainLoop
.3083	90 c3		bcc $3048			bcc 	_I32FSMainLoop
.3085					_I32FSDone:
.3085	68		pla				pla 								; get base/final sign back
.3086	10 03		bpl $308b			bpl 	_I32FSNN3
.3088	20 6a 31	jsr $316a			jsr 	MInt32Negate 				; negate the result.
.308b					_I32FSNN3:
.308b	68		pla				pla
.308c	a8		tay				tay
.308d	38		sec				sec
.308e	60		rts				rts
.308f					_I32FSFail:
.308f	68		pla				pla
.3090					_I32FSFail2:
.3090	68		pla				pla
.3091	a8		tay				tay
.3092	18		clc				clc
.3093	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3094					MInt32Add:
.3094	18		clc				clc
.3095	b5 50		lda $50,x			lda 	esInt0,x
.3097	75 51		adc $51,x			adc 	esInt0+1,x
.3099	95 50		sta $50,x			sta 	esInt0,x
.309b	b5 58		lda $58,x			lda 	esInt1,x
.309d	75 59		adc $59,x			adc 	esInt1+1,x
.309f	95 58		sta $58,x			sta 	esInt1,x
.30a1	b5 60		lda $60,x			lda 	esInt2,x
.30a3	75 61		adc $61,x			adc 	esInt2+1,x
.30a5	95 60		sta $60,x			sta 	esInt2,x
.30a7	b5 68		lda $68,x			lda 	esInt3,x
.30a9	75 69		adc $69,x			adc 	esInt3+1,x
.30ab	95 68		sta $68,x			sta 	esInt3,x
.30ad	60		rts				rts
.30ae					MInt32Sub:
.30ae	38		sec				sec
.30af	b5 50		lda $50,x			lda 	esInt0,x
.30b1	f5 51		sbc $51,x			sbc 	esInt0+1,x
.30b3	95 50		sta $50,x			sta 	esInt0,x
.30b5	b5 58		lda $58,x			lda 	esInt1,x
.30b7	f5 59		sbc $59,x			sbc 	esInt1+1,x
.30b9	95 58		sta $58,x			sta 	esInt1,x
.30bb	b5 60		lda $60,x			lda 	esInt2,x
.30bd	f5 61		sbc $61,x			sbc 	esInt2+1,x
.30bf	95 60		sta $60,x			sta 	esInt2,x
.30c1	b5 68		lda $68,x			lda 	esInt3,x
.30c3	f5 69		sbc $69,x			sbc 	esInt3+1,x
.30c5	95 68		sta $68,x			sta 	esInt3,x
.30c7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.30c8					MInt32Multiply:
.30c8	e8		inx				inx 								; copy 2nd -> 3rd
.30c9	20 ee 30	jsr $30ee			jsr 	MInt32CopyUp
.30cc	ca		dex				dex
.30cd	20 ee 30	jsr $30ee			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.30d0	20 b0 31	jsr $31b0			jsr 	MInt32False 				; zero 1st.
.30d3					_I32Loop:
.30d3	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.30d5	29 01		and #$01			and 	#1
.30d7	f0 03		beq $30dc			beq 	_I32NoAdd 					; if set
.30d9	20 94 30	jsr $3094			jsr 	MInt32Add 					; add 2nd to 1st.
.30dc					_I32NoAdd:
.30dc	e8		inx				inx 								; shift 2nd left
.30dd	20 c5 31	jsr $31c5			jsr 	MInt32ShiftLeft
.30e0	e8		inx				inx  								; shift 3rd right
.30e1	20 ce 31	jsr $31ce			jsr 	MInt32ShiftRight
.30e4	20 d7 31	jsr $31d7			jsr 	MInt32Zero 					; check if zero.
.30e7	08		php				php 								; save status bits
.30e8	ca		dex				dex 	 							; point back to 1st
.30e9	ca		dex				dex
.30ea	28		plp				plp 								; get status bits
.30eb	d0 e6		bne $30d3			bne 	_I32Loop 					; if non-zero keep going.
.30ed	60		rts				rts
.30ee					MInt32CopyUp:
.30ee	b5 50		lda $50,x			lda 	esInt0,x
.30f0	95 51		sta $51,x			sta 	esInt0+1,x
.30f2	b5 58		lda $58,x			lda 	esInt1,x
.30f4	95 59		sta $59,x			sta 	esInt1+1,x
.30f6	b5 60		lda $60,x			lda 	esInt2,x
.30f8	95 61		sta $61,x			sta 	esInt2+1,x
.30fa	b5 68		lda $68,x			lda 	esInt3,x
.30fc	95 69		sta $69,x			sta 	esInt3+1,x
.30fe	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c19					MCharCount:	.fill 	1						; count of converted characters
.30ff					MLInt32ToString:
.30ff	aa		tax				tax									; module passes stack in A, base in Y
.3100	98		tya				tya
.3101	20 06 31	jsr $3106			jsr 	MInt32ToString
.3104	8a		txa				txa
.3105	60		rts				rts
.3106					MInt32ToString:
.3106	48		pha				pha 								; save base
.3107	85 32		sta $32				sta 	tempShort 					; save target base.
.3109	a9 00		lda #$00			lda 	#0
.310b	8d 19 0c	sta $0c19			sta 	MCharCount 					; clear character count to 0
.310e	98		tya				tya
.310f	48		pha				pha
.3110	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3112	10 10		bpl $3124			bpl 	_I32TSUnsigned
.3114	48		pha				pha 								; save base on stack.
.3115	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.3117	10 08		bpl $3121			bpl 	_I32TSNoFlip
.3119	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.311b	20 57 31	jsr $3157			jsr 	MI32WriteCharacter
.311e	20 6a 31	jsr $316a			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3121					_I32TSNoFlip:
.3121	68		pla				pla 								; get the base back
.3122	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3124					_I32TSUnsigned:
.3124	20 32 31	jsr $3132			jsr 	MI32DivideWrite 			; recursive code to output string.
.3127	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3129	ad 19 0c	lda $0c19			lda 	MCharCount
.312c	91 2a		sta ($2a),y			sta 	(temp0),y
.312e	68		pla				pla
.312f	a8		tay				tay
.3130	68		pla				pla
.3131	60		rts				rts
.3132					MI32DivideWrite:
.3132	48		pha				pha 								; save the divisor/base
.3133	e8		inx				inx 								; write in the dividing position.
.3134	20 bf 31	jsr $31bf			jsr 	MInt32Set8Bit
.3137	ca		dex				dex
.3138	20 aa 2f	jsr $2faa			jsr 	MInt32UDivide 				; divide number by base.
.313b	68		pla				pla 								; get the base into Y
.313c	a8		tay				tay
.313d	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.313f	48		pha				pha
.3140	20 d7 31	jsr $31d7			jsr 	MInt32Zero 					; is the result zero ?
.3143	f0 04		beq $3149			beq 	_I32NoRecurse 				; if so, don't recurse.
.3145	98		tya				tya 								; put base into A
.3146	20 32 31	jsr $3132			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3149					_I32NoRecurse:
.3149	68		pla				pla 								; get the remainder back
.314a	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.314c	90 02		bcc $3150			bcc 	_I32NotHex
.314e	69 06		adc #$06			adc 	#7-1
.3150					_I32NotHex:
.3150	18		clc				clc 								; make it ASCII
.3151	69 30		adc #$30			adc 	#48
.3153	20 57 31	jsr $3157			jsr 	MI32WriteCharacter 			; write the character out
.3156	60		rts				rts 								; and exit.
.3157					MI32WriteCharacter:
.3157	ee 19 0c	inc $0c19			inc 	MCharCount 					; bump count (space for leading count)
.315a	ac 19 0c	ldy $0c19			ldy 	MCharCount 					; get position
.315d	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.315f	c8		iny				iny
.3160	a9 00		lda #$00			lda 	#0
.3162	91 2a		sta ($2a),y			sta 	(temp0),y
.3164	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c1a					MSeed32:	.fill 	4							; random number seed.
.3165					MInt32Absolute:
.3165	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.3167	30 01		bmi $316a			bmi 	MInt32Negate
.3169	60		rts				rts
.316a					MInt32Negate:
.316a	38		sec				sec 								; subtract from zero.
.316b	a9 00		lda #$00			lda 	#0
.316d	f5 50		sbc $50,x			sbc 	esInt0,x
.316f	95 50		sta $50,x			sta 	esInt0,x
.3171	a9 00		lda #$00			lda 	#0
.3173	f5 58		sbc $58,x			sbc 	esInt1,x
.3175	95 58		sta $58,x			sta 	esInt1,x
.3177	a9 00		lda #$00			lda 	#0
.3179	f5 60		sbc $60,x			sbc 	esInt2,x
.317b	95 60		sta $60,x			sta 	esInt2,x
.317d	a9 00		lda #$00			lda 	#0
.317f	f5 68		sbc $68,x			sbc 	esInt3,x
.3181	95 68		sta $68,x			sta 	esInt3,x
.3183	60		rts				rts
.3184					MInt32Not:
.3184	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.3186	49 ff		eor #$ff			eor 	#$FF
.3188	95 50		sta $50,x			sta 	esInt0,x
.318a	b5 58		lda $58,x			lda 	esInt1,x
.318c	49 ff		eor #$ff			eor 	#$FF
.318e	95 58		sta $58,x			sta 	esInt1,x
.3190	b5 60		lda $60,x			lda 	esInt2,x
.3192	49 ff		eor #$ff			eor 	#$FF
.3194	95 60		sta $60,x			sta 	esInt2,x
.3196	b5 68		lda $68,x			lda 	esInt3,x
.3198	49 ff		eor #$ff			eor 	#$FF
.319a	95 68		sta $68,x			sta 	esInt3,x
.319c	60		rts				rts
.319d					MInt32Sign:
.319d	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.319f	30 0b		bmi $31ac			bmi 	MInt32True 					; if set return -1 (true)
.31a1	20 d7 31	jsr $31d7			jsr 	MInt32Zero 					; is it zero ?
.31a4	f0 0a		beq $31b0			beq 	MInt32False 				; if zero return 0 (false)
.31a6	20 b0 31	jsr $31b0			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.31a9	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.31ab	60		rts				rts
.31ac					MInt32True:
.31ac	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.31ae	d0 02		bne $31b2			bne 	MInt32WriteAll
.31b0					MInt32False:
.31b0	a9 00		lda #$00			lda 	#0
.31b2					MInt32WriteAll:
.31b2	95 50		sta $50,x			sta 	esInt0,x
.31b4					MInt32Write123:
.31b4	95 58		sta $58,x			sta 	esInt1,x
.31b6	95 60		sta $60,x			sta 	esInt2,x
.31b8	95 68		sta $68,x			sta 	esInt3,x
.31ba	a9 00		lda #$00			lda 	#$00						; and make it an integer
.31bc	95 48		sta $48,x			sta 	esType,x
.31be	60		rts				rts
.31bf					MInt32Set8Bit:
.31bf	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.31c1	a9 00		lda #$00			lda 	#0 							; a value 0-255
.31c3	f0 ef		beq $31b4			beq		MInt32Write123
.31c5					MInt32ShiftLeft:
.31c5	16 50		asl $50,x			asl 	esInt0,x
.31c7	36 58		rol $58,x			rol	 	esInt1,x
.31c9	36 60		rol $60,x			rol	 	esInt2,x
.31cb	36 68		rol $68,x			rol	 	esInt3,x
.31cd	60		rts				rts
.31ce					MInt32ShiftRight:
.31ce	56 68		lsr $68,x			lsr 	esInt3,x
.31d0	76 60		ror $60,x			ror 	esInt2,x
.31d2	76 58		ror $58,x			ror 	esInt1,x
.31d4	76 50		ror $50,x			ror 	esInt0,x
.31d6	60		rts				rts
.31d7					MInt32Zero:
.31d7	b5 50		lda $50,x			lda 	esInt0,x
.31d9	15 58		ora $58,x			ora 	esInt1,x
.31db	15 60		ora $60,x			ora 	esInt2,x
.31dd	15 68		ora $68,x			ora 	esInt3,x
.31df	60		rts				rts
.31e0					MInt32Random:
.31e0	98		tya				tya
.31e1	48		pha				pha
.31e2	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.31e4	ad 1a 0c	lda $0c1a			lda 	MSeed32+0 					; check the seed isn't zero
.31e7	d0 03		bne $31ec			bne 	_Random1
.31e9	a8		tay				tay 								; if so do it 256 times
.31ea	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.31ec					_Random1:
.31ec	0a		asl a				asl 	a
.31ed	2e 1b 0c	rol $0c1b			rol 	MSeed32+1
.31f0	2e 1c 0c	rol $0c1c			rol 	MSeed32+2
.31f3	2e 1d 0c	rol $0c1d			rol 	MSeed32+3
.31f6	90 02		bcc $31fa			bcc 	_Random2
.31f8	49 c5		eor #$c5			eor 	#$C5
.31fa					_Random2:
.31fa	88		dey				dey
.31fb	d0 ef		bne $31ec			bne 	_Random1
.31fd	8d 1a 0c	sta $0c1a			sta 	MSeed32+0 					; copy the seed in.
.3200	95 50		sta $50,x			sta 	esInt0,x
.3202	ad 1b 0c	lda $0c1b			lda 	MSeed32+1
.3205	95 58		sta $58,x			sta 	esInt1,x
.3207	ad 1c 0c	lda $0c1c			lda 	MSeed32+2
.320a	95 60		sta $60,x			sta 	esInt2,x
.320c	ad 1d 0c	lda $0c1d			lda 	MSeed32+3
.320f	95 68		sta $68,x			sta 	esInt3,x
.3211	68		pla				pla
.3212	a8		tay				tay
.3213	a9 00		lda #$00			lda 	#0
.3215	95 48		sta $48,x			sta 	esType,x
.3217	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3218					CheckToken:
.3218	d1 28		cmp ($28),y			cmp 	(codePtr),y
.321a	d0 02		bne $321e			bne 	_CTError
.321c	c8		iny				iny
.321d	60		rts				rts
.321e					_CTError:
.321e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3220	20 e0 14	jsr $14e0		jsr	errorHandler
.3223					CheckRightParen:
.3223	b1 28		lda ($28),y			lda 	(codePtr),y
.3225	c8		iny				iny
.3226	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3228	d0 01		bne $322b			bne 	_CRPError
.322a	60		rts				rts
.322b					_CRPError:
.322b	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.322d	20 e0 14	jsr $14e0		jsr	errorHandler
.3230					CheckComma:
.3230	b1 28		lda ($28),y			lda 	(codePtr),y
.3232	c8		iny				iny
.3233	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3235	d0 01		bne $3238			bne 	_CCError
.3237	60		rts				rts
.3238					_CCError:
.3238	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.323a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.323d					RSReset:
.323d	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.323f	85 37		sta $37				sta 	rsPointer
.3241	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3243	85 38		sta $38				sta 	1+(rsPointer)
.3245	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3247	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.324a	60		rts				rts
.324b					RSClaim:
.324b	84 32		sty $32				sty 	tempShort 					; preserve Y
.324d	48		pha				pha 								; save marker on stack.
.324e	8a		txa				txa 								; get bytes required.
.324f	38		sec				sec
.3250	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3252	65 37		adc $37				adc 	rsPointer
.3254	85 37		sta $37				sta 	rsPointer
.3256	a5 38		lda $38				lda 	rsPointer+1
.3258	69 ff		adc #$ff			adc 	#$FF
.325a	85 38		sta $38				sta 	rsPointer+1
.325c	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.325e	90 08		bcc $3268			bcc 	_RSCOverflow
.3260	68		pla				pla 								; get marker back
.3261	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3263	91 37		sta ($37),y			sta 	(rsPointer),y
.3265	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3267	60		rts				rts
.3268					_RSCOverflow:
.3268	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.326a	20 e0 14	jsr $14e0		jsr	errorHandler
.326d					RSFree:
.326d	18		clc				clc
.326e	65 37		adc $37				adc 	rsPointer
.3270	85 37		sta $37				sta 	rsPointer
.3272	90 02		bcc $3276			bcc 	_RSFExit
.3274	e6 38		inc $38				inc 	rsPointer+1
.3276					_RSFExit:
.3276	60		rts				rts
.3277					RSSavePosition:
.3277	84 32		sty $32				sty 	tempShort 					; save Y position
.3279	a8		tay				tay 								; this is where we write it.
.327a	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.327c	91 37		sta ($37),y			sta 	(rsPointer),y
.327e	c8		iny				iny
.327f	a5 29		lda $29				lda 	codePtr+1
.3281	91 37		sta ($37),y			sta 	(rsPointer),y
.3283	c8		iny				iny
.3284	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3286	91 37		sta ($37),y			sta 	(rsPointer),y
.3288	a8		tay				tay 								; fix Y back again to original value
.3289	60		rts				rts
.328a					RSLoadPosition:
.328a	a8		tay				tay
.328b	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.328d	85 28		sta $28				sta 	codePtr
.328f	c8		iny				iny
.3290	b1 37		lda ($37),y			lda 	(rsPointer),y
.3292	85 29		sta $29				sta 	codePtr+1
.3294	c8		iny				iny
.3295	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3297	a8		tay				tay 								; to Y
.3298	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3299					WarmStart:
.3299	a2 02		ldx #$02		ldx	#2
.329b	20 0d 1c	jsr $1c0d		jsr	interactionHandler

;******  Return to file: main/main.asm

.329e					mainHandler:
.329e	7c a1 32	jmp ($32a1,x)			jmp 	(mainVectors,x)
.32a1					mainVectors:
>32a1	30 32					.word CheckComma           ; index 0
>32a3	23 32					.word CheckRightParen      ; index 2
>32a5	12 24					.word XCommandClear        ; index 4
>32a7	39 2b					.word LinkEvaluate         ; index 6
>32a9	45 2b					.word LinkEvaluateInteger  ; index 8
>32ab	4b 2b					.word LinkEvaluateSmallInt ; index 10
>32ad	3f 2b					.word LinkEvaluateTerm     ; index 12
>32af	ff 30					.word MLInt32ToString      ; index 14
>32b1	a1 25					.word Command_XNew         ; index 16
>32b3	af 25					.word XCommand_Run         ; index 18
>32b5	bb 25					.word Command_RunFrom      ; index 20
>32b7	17 30					.word LinkInt32FromString  ; index 22

;******  Return to file: basic.asm

.32b9					section_end_main:
.32b9					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.32b9					StringChrs:
.32b9	aa		tax				tax 								; set up stack
.32ba	a9 02		lda #$02			lda 	#2
.32bc	20 7c 33	jsr $337c			jsr 	AllocateSoftString
.32bf	98		tya				tya
.32c0	20 a2 33	jsr $33a2			jsr 	WriteSoftString
.32c3					StringUpdate:
.32c3	20 d1 32	jsr $32d1			jsr 	ReturnSoftString
.32c6	8a		txa				txa
.32c7	60		rts				rts
.32c8					StringNull:
.32c8	aa		tax				tax
.32c9	a9 01		lda #$01			lda 	#1
.32cb	20 7c 33	jsr $337c			jsr 	AllocateSoftString
.32ce	4c c3 32	jmp $32c3			jmp 	StringUpdate
.32d1					ReturnSoftString:
.32d1	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.32d3	95 50		sta $50,x			sta 	esInt0,x
.32d5	a5 3a		lda $3a				lda 	softMemAlloc+1
.32d7	95 58		sta $58,x			sta 	esInt1,x
.32d9	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.32db	95 60		sta $60,x			sta 	esInt2,x
.32dd	95 68		sta $68,x			sta 	esInt3,x
.32df	a9 40		lda #$40			lda 	#$40 						; type string.
.32e1	95 48		sta $48,x			sta 	esType,x
.32e3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.32e4					STRCompare:
.32e4	48		pha				pha 								; save A
.32e5	aa		tax				tax 								; put stack pos in X
.32e6	98		tya				tya
.32e7	48		pha				pha
.32e8	20 1c 33	jsr $331c			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.32eb	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.32ed	b1 2a		lda ($2a),y			lda 	(temp0),y
.32ef	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.32f1	90 02		bcc $32f5			bcc 	_SCNotSmaller
.32f3	b1 2c		lda ($2c),y			lda 	(temp1),y
.32f5					_SCNotSmaller:
.32f5	aa		tax				tax 								; put that in X. We compare this many chars first.
.32f6					_SCCompareLoop:
.32f6	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.32f8	f0 0c		beq $3306			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.32fa	ca		dex				dex 								; decrement chars to compare.
.32fb	c8		iny				iny 								; move to next character
.32fc	38		sec				sec 								; calculate s1[y]-s2[y]
.32fd	b1 2a		lda ($2a),y			lda 	(temp0),y
.32ff	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3301	d0 0a		bne $330d			bne 	_SCReturnResult 			; if different return sign of A
.3303	4c f6 32	jmp $32f6			jmp 	_SCCompareLoop
.3306					_SCSameToEndShortest
.3306	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3308	38		sec				sec
.3309	b1 2a		lda ($2a),y			lda 	(temp0),y
.330b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.330d					_SCReturnResult:
.330d	08		php				php 								; set return to zero preserving PSW.
.330e	a2 00		ldx #$00			ldx 	#0
.3310	28		plp				plp
.3311	f0 05		beq $3318			beq 	_SCExit 					; two values equal, then exit
.3313	ca		dex				dex 								; X = $FF
.3314	90 02		bcc $3318			bcc 	_SCExit 					; if 1st < 2nd then -1
.3316	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3318					_SCExit:
.3318	68		pla				pla
.3319	a8		tay				tay
.331a	68		pla				pla
.331b	60		rts				rts
.331c					CopyStringPair:
.331c	b5 51		lda $51,x			lda 	esInt0+1,x
.331e	85 2c		sta $2c				sta 	temp1
.3320	b5 59		lda $59,x			lda 	esInt1+1,x
.3322	85 2d		sta $2d				sta 	temp1+1
.3324					CopyStringTop:
.3324	b5 50		lda $50,x			lda 	esInt0,x
.3326	85 2a		sta $2a				sta 	temp0
.3328	b5 58		lda $58,x			lda 	esInt1,x
.332a	85 2b		sta $2b				sta 	temp0+1
.332c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.332d					StringConcat:
.332d	aa		tax				tax									; stack pos in X
.332e	98		tya				tya
.332f	48		pha				pha
.3330	20 1c 33	jsr $331c			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3333	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3334	a0 00		ldy #$00			ldy 	#0
.3336	b1 2a		lda ($2a),y			lda 	(temp0),y
.3338	71 2c		adc ($2c),y			adc 	(temp1),y
.333a	b0 1c		bcs $3358			bcs 	_SCError 					; just too many characters here.
.333c	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.333e	b0 18		bcs $3358			bcs 	_SCError
.3340	20 7c 33	jsr $337c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3343	20 73 33	jsr $3373			jsr 	CopySoftToStack 			; copy that to the stack.
.3346	20 5d 33	jsr $335d			jsr 	SCCopyTemp0 				; copy temp0
.3349	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.334b	85 2a		sta $2a				sta 	temp0
.334d	a5 2d		lda $2d				lda 	temp1+1
.334f	85 2b		sta $2b				sta 	temp0+1
.3351	20 5d 33	jsr $335d			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3354	68		pla				pla
.3355	a8		tay				tay
.3356	8a		txa				txa 								; and A
.3357	60		rts				rts
.3358					_SCError:
.3358	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.335a	20 e0 14	jsr $14e0		jsr	errorHandler
.335d					SCCopyTemp0:
.335d	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.335f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3361	85 2e		sta $2e				sta 	temp2
.3363					_SCCopyLoop:
.3363	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3365	f0 0b		beq $3372			beq 	_SCCopyExit
.3367	c6 2e		dec $2e				dec 	temp2
.3369	c8		iny				iny 								; get next char
.336a	b1 2a		lda ($2a),y			lda 	(temp0),y
.336c	20 a2 33	jsr $33a2			jsr 	WriteSoftString 			; write to soft string.
.336f	4c 63 33	jmp $3363			jmp 	_SCCopyLoop
.3372					_SCCopyExit:
.3372	60		rts				rts
.3373					CopySoftToStack:
.3373	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3375	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.3377	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3379	95 58		sta $58,x			sta 	esInt1,x
.337b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.337c					AllocateSoftString:
.337c	85 32		sta $32				sta 	tempShort 					; save count
.337e	98		tya				tya
.337f	48		pha				pha
.3380	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3382	d0 09		bne $338d			bne 	_ASSDone
.3384	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3386	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3388	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.338a	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.338b	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.338d					_ASSDone:
.338d	38		sec				sec 								; allocate downwards enough memory
.338e	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3390	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3392	85 39		sta $39				sta 	softMemAlloc
.3394	a5 3a		lda $3a				lda 	softMemAlloc+1
.3396	e9 00		sbc #$00			sbc 	#0
.3398	85 3a		sta $3a				sta 	softMemAlloc+1
.339a	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.339c	a8		tay				tay
.339d	91 39		sta ($39),y			sta 	(softMemAlloc),y
.339f	68		pla				pla
.33a0	a8		tay				tay
.33a1	60		rts				rts
.33a2					WriteSoftString:
.33a2	84 32		sty $32				sty 	tempShort 					; save Y
.33a4	48		pha				pha 								; save character on stack
.33a5	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.33a7	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.33a9	18		clc				clc
.33aa	69 01		adc #$01			adc 	#1
.33ac	91 39		sta ($39),y			sta 	(softMemAlloc),y
.33ae	a8		tay				tay 								; offset in Y
.33af	68		pla				pla 								; get char and write.
.33b0	91 39		sta ($39),y			sta 	(softMemAlloc),y
.33b2	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.33b4	60		rts				rts
.33b5					StrClone:
.33b5	aa		tax				tax 								; set up stack.
.33b6	98		tya				tya
.33b7	48		pha				pha
.33b8	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.33ba	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.33bc	18		clc				clc
.33bd	69 01		adc #$01			adc 	#1
.33bf	20 7c 33	jsr $337c			jsr 	AllocateSoftString 			; allocate soft memory
.33c2	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.33c4	95 50		sta $50,x			sta 	esInt0,x
.33c6	a5 3a		lda $3a				lda 	softMemAlloc+1
.33c8	95 58		sta $58,x			sta 	esInt1,x
.33ca	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.33cc	95 60		sta $60,x			sta 	esInt2,x
.33ce	95 68		sta $68,x			sta 	esInt3,x
.33d0	a9 40		lda #$40			lda 	#$40 						; set type to string.
.33d2	95 48		sta $48,x			sta 	esType,x
.33d4	20 5d 33	jsr $335d			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.33d7	68		pla				pla
.33d8	a8		tay				tay
.33d9	8a		txa				txa
.33da	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.33db					CaseString:
.33db	48		pha				pha 								; save A and copy to X
.33dc	aa		tax				tax
.33dd	98		tya				tya
.33de	48		pha				pha
.33df	20 24 33	jsr $3324			jsr 	CopyStringTop 				; target string -> temp0
.33e2	a0 00		ldy #$00			ldy 	#0
.33e4	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.33e6	18		clc				clc
.33e7	69 01		adc #$01			adc 	#1 							; one more for length byte
.33e9	20 7c 33	jsr $337c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.33ec	20 73 33	jsr $3373			jsr 	CopySoftToStack 			; copy that to the stack.
.33ef	a0 00		ldy #$00			ldy 	#0
.33f1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.33f3	aa		tax				tax
.33f4					_CSCopy:
.33f4	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.33f6	f0 24		beq $341c			beq 	_CSExit
.33f8	ca		dex				dex
.33f9	c8		iny				iny
.33fa	68		pla				pla 								; check direction
.33fb	48		pha				pha
.33fc	f0 0c		beq $340a			beq 	_CSUpper
.33fe	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3400	c9 41		cmp #$41			cmp 	#"A"
.3402	90 12		bcc $3416			bcc 	_CSWrite
.3404	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3406	b0 0e		bcs $3416			bcs 	_CSWrite
.3408	90 0a		bcc $3414			bcc 	_CSFlipWrite
.340a					_CSUpper:
.340a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.340c	c9 61		cmp #$61			cmp 	#"a"
.340e	90 06		bcc $3416			bcc 	_CSWrite
.3410	c9 7b		cmp #$7b			cmp 	#"z"+1
.3412	b0 02		bcs $3416			bcs 	_CSWrite
.3414					_CSFlipWrite:
.3414	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3416					_CSWrite:
.3416	20 a2 33	jsr $33a2			jsr 	WriteSoftString 			; add to soft string.
.3419	4c f4 33	jmp $33f4			jmp 	_CSCopy
.341c					_CSExit:
.341c	68		pla				pla
.341d	a8		tay				tay
.341e	68		pla				pla
.341f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3420					StringSubstring:
.3420	48		pha				pha
.3421	aa		tax				tax 								; access stack.
.3422	98		tya				tya
.3423	48		pha				pha
.3424	20 24 33	jsr $3324			jsr 	CopyStringTop 				; point temp0 to the string.
.3427	a0 00		ldy #$00			ldy 	#0 							; get length.
.3429	b1 2a		lda ($2a),y			lda 	(temp0),Y
.342b	85 2c		sta $2c				sta 	temp1
.342d	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.342f	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3431	f0 02		beq $3435			beq 	_SSBOkay
.3433	b0 2a		bcs $345f			bcs 	_SSBReturnNull
.3435					_SSBOkay:
.3435	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3437	18		clc				clc
.3438	69 01		adc #$01			adc 	#1
.343a	38		sec				sec
.343b	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.343d	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.343f	90 02		bcc $3443			bcc		_SSBTrunc
.3441	b5 52		lda $52,x			lda 	esInt0+2,x
.3443					_SSBTrunc:
.3443	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3445	18		clc				clc
.3446	69 01		adc #$01			adc 	#1 							; add 1
.3448	20 7c 33	jsr $337c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.344b	20 73 33	jsr $3373			jsr 	CopySoftToStack 			; copy that to the stack.
.344e	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3450					_SSBCopyLoop:
.3450	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3452	f0 0e		beq $3462			beq 	_SSBExit
.3454	c6 2d		dec $2d				dec 	temp1+1
.3456	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3458	20 a2 33	jsr $33a2			jsr 	WriteSoftString
.345b	c8		iny				iny
.345c	4c 50 34	jmp $3450			jmp 	_SSBCopyLoop
.345f					_SSBReturnNull:
.345f	20 66 34	jsr $3466			jsr 	ReturnNull
.3462					_SSBExit:
.3462	68		pla				pla
.3463	a8		tay				tay
.3464	68		pla				pla
.3465	60		rts				rts
.3466					ReturnNull:
.3466	a9 00		lda #$00			lda 	#0 							; clear null string
.3468	8d ce 0a	sta $0ace			sta 	NullString
.346b	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.346d	95 50		sta $50,x			sta 	esInt0,x
.346f	a9 0a		lda #$0a			lda 	#NullString >> 8
.3471	95 58		sta $58,x			sta 	esInt1,x
.3473	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0c1e					srcStrLen:
>0c1e							.fill 	1
.3474					StringWrite:
.3474	aa		tax				tax
.3475	48		pha				pha
.3476	98		tya				tya
.3477	48		pha				pha
.3478	20 9f 34	jsr $349f			jsr 	CheckOverwriteCurrent
.347b	b0 0d		bcs $348a			bcs		_SWCopyCurrent
.347d	20 dd 34	jsr $34dd			jsr 	RequiresConcretion
.3480	90 0e		bcc $3490			bcc 	_SWWriteReference
.3482	20 40 35	jsr $3540			jsr 	CheckSpecialConcretion
.3485	b0 09		bcs $3490			bcs 	_SWWriteReference
.3487	20 f1 34	jsr $34f1			jsr 	AllocateHardMemory
.348a					_SWCopyCurrent:
.348a	20 24 35	jsr $3524			jsr 	CopyStringToHardMemory
.348d	4c 9b 34	jmp $349b			jmp 	_SWExit
.3490					_SWWriteReference
.3490	a0 00		ldy #$00			ldy 	#0
.3492	a5 2a		lda $2a				lda 	temp0
.3494	91 2c		sta ($2c),y			sta 	(temp1),y
.3496	c8		iny				iny
.3497	a5 2b		lda $2b				lda 	temp0+1
.3499	91 2c		sta ($2c),y			sta 	(temp1),y
.349b					_SWExit:
.349b	68		pla				pla
.349c	a8		tay				tay
.349d	68		pla				pla
.349e	60		rts				rts
.349f					CheckOverwriteCurrent:
.349f	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.34a1	b5 59		lda $59,x			lda 	esInt1+1,x
.34a3	85 2b		sta $2b				sta 	temp0+1
.34a5	b5 51		lda $51,x			lda 	esInt0+1,x
.34a7	85 2a		sta $2a				sta 	temp0
.34a9	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.34ab	8d 1e 0c	sta $0c1e			sta 	srcStrLen
.34ae	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.34b0	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.34b2	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.34b4	85 2d		sta $2d				sta 	temp1+1
.34b6	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.34b8	b1 2c		lda ($2c),y			lda 	(temp1),y
.34ba	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.34bc	90 1b		bcc $34d9			bcc 	_COCFail 				; in hard memory.
.34be	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.34c0	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.34c2	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.34c4	85 2e		sta $2e				sta 	temp2
.34c6	c8		iny				iny
.34c7	b1 2c		lda ($2c),y			lda 	(temp1),y
.34c9	e9 00		sbc #$00			sbc 	#0
.34cb	85 2f		sta $2f				sta 	temp2+1
.34cd	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.34cf	b1 2e		lda ($2e),y			lda 	(temp2),y
.34d1	38		sec				sec  							; maximum character capacity.
.34d2	e9 02		sbc #$02			sbc 	#2
.34d4	cd 1e 0c	cmp $0c1e			cmp 	srcStrLen 				; if >= the required length
.34d7	b0 02		bcs $34db			bcs 	_COCCanReuse
.34d9					_COCFail:
.34d9	18		clc				clc
.34da	60		rts				rts
.34db					_COCCanReuse:
.34db	38		sec				sec
.34dc	60		rts				rts
.34dd					RequiresConcretion:
.34dd	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.34df	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.34e1	b0 0a		bcs $34ed			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.34e3	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.34e5	f0 08		beq $34ef			beq 	_RCFail 				; if not, this cannot be soft memory.
.34e7	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.34e9	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.34eb	90 02		bcc $34ef			bcc 	_RCFail 				; so concreting
.34ed					_RCSucceed:
.34ed	38		sec				sec
.34ee	60		rts				rts
.34ef					_RCFail:
.34ef	18		clc				clc
.34f0	60		rts				rts
.34f1					AllocateHardMemory:
.34f1	98		tya				tya
.34f2	48		pha				pha
.34f3	ad 1e 0c	lda $0c1e			lda 	srcStrLen 				; characters in string
.34f6	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.34f8	b0 04		bcs $34fe			bcs 	_AHMSetMax 				; max out that amount.
.34fa	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.34fc	90 02		bcc $3500			bcc 	_AHMIsOkay
.34fe					_AHMSetMax:
.34fe	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3500					_AHMIsOkay:
.3500	48		pha				pha	 							; save size to be allocated
.3501	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3503	38		sec				sec  							; and copy result to TOS as target address.
.3504	65 33		adc $33				adc 	highMemory
.3506	85 33		sta $33				sta 	highMemory
.3508	a5 34		lda $34				lda 	highMemory+1
.350a	69 ff		adc #$ff			adc 	#$FF
.350c	85 34		sta $34				sta 	highMemory+1
.350e	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3510	68		pla				pla 							; get the total size of the storage block
.3511	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3513	18		clc				clc
.3514	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3516	69 01		adc #$01			adc 	#1
.3518	91 2c		sta ($2c),y			sta 	(temp1),y
.351a	a5 34		lda $34				lda 	highMemory+1
.351c	69 00		adc #$00			adc 	#0
.351e	c8		iny				iny
.351f	91 2c		sta ($2c),y			sta 	(temp1),y
.3521	68		pla				pla
.3522	a8		tay				tay
.3523	60		rts				rts
.3524					CopyStringToHardMemory:
.3524	98		tya				tya
.3525	48		pha				pha
.3526	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3528	b1 2c		lda ($2c),y			lda 	(temp1),y
.352a	85 2e		sta $2e				sta 	temp2
.352c	c8		iny				iny
.352d	b1 2c		lda ($2c),y			lda 	(temp1),y
.352f	85 2f		sta $2f				sta 	temp2+1
.3531	ac 1e 0c	ldy $0c1e			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3534					_CSTHMLoop:
.3534	b1 2a		lda ($2a),y			lda 	(temp0),y
.3536	91 2e		sta ($2e),y			sta 	(temp2),y
.3538	88		dey				dey
.3539	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.353b	d0 f7		bne $3534			bne 	_CSTHMLoop
.353d	68		pla				pla
.353e	a8		tay				tay
.353f	60		rts				rts
.3540					CheckSpecialConcretion:
.3540	ad 1e 0c	lda $0c1e			lda 	srcStrLen 				; check string is null e.g. length = 0
.3543	f0 02		beq $3547			beq 	_CSCNullString
.3545	18		clc				clc
.3546	60		rts				rts
.3547					_CSCNullString:
.3547	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3549	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.354c	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.354e	85 2a		sta $2a				sta 	temp0
.3550	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3552	85 2b		sta $2b				sta 	1+(temp0)
.3554	38		sec				sec
.3555	60		rts				rts

;******  Return to file: string/string.asm

.3556					stringHandler:
.3556	7c 59 35	jmp ($3559,x)			jmp 	(stringVectors,x)
.3559					stringVectors:
>3559	b9 32					.word StringChrs           ; index 0
>355b	b5 33					.word StrClone             ; index 2
>355d	2d 33					.word StringConcat         ; index 4
>355f	c8 32					.word StringNull           ; index 6
>3561	e4 32					.word STRCompare           ; index 8
>3563	db 33					.word CaseString           ; index 10
>3565	20 34					.word StringSubstring      ; index 12
>3567	74 34					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.3569					section_end_string:
.3569					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1f					deTokeniseVector:
>0c1f							.fill 	2
.0c21					lastCharacterClass:
>0c21							.fill 	1
.0c22					indent:
>0c22							.fill 	1
.3569					ListLine:
.3569	48		pha				pha								; enter here to list to console. sets the output vector
.356a	a9 9e		lda #$9e			lda 	#(deTokenPrint) & $FF
.356c	8d 1f 0c	sta $0c1f			sta 	deTokeniseVector
.356f	a9 36		lda #$36			lda 	#(deTokenPrint) >> 8
.3571	8d 20 0c	sta $0c20			sta 	1+(deTokeniseVector)
.3574	68		pla				pla
.3575					Detokenise:
.3575	18		clc				clc 							; space required for line number.
.3576	69 06		adc #$06			adc 	#6
.3578	8d 22 0c	sta $0c22			sta 	indent
.357b	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.357d	8d 21 0c	sta $0c21			sta 	lastCharacterClass
.3580	a2 02		ldx #$02			ldx 	#2
.3582	20 b0 31	jsr $31b0			jsr 	MInt32False
.3585	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3587	b1 28		lda ($28),y			lda 	(codePtr),y
.3589	95 50		sta $50,x			sta 	esInt0,x
.358b	c8		iny				iny
.358c	b1 28		lda ($28),y			lda 	(codePtr),y
.358e	95 58		sta $58,x			sta 	esInt1,x
.3590	a9 84		lda #$84			lda 	#LTYLineNumber
.3592	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.3595	a9 0a		lda #$0a			lda 	#10 					; base 10
.3597	20 3d 36	jsr $363d			jsr 	DTPrintInteger 			; print as integer.
.359a	a0 00		ldy #$00			ldy 	#0 						; get length
.359c	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.359e	aa		tax				tax
.359f					_DTPadOut:
.359f	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.35a1	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.35a4	e8		inx				inx
.35a5	ec 22 0c	cpx $0c22			cpx 	indent
.35a8	d0 f5		bne $359f			bne 	_DTPadOut
.35aa	a0 03		ldy #$03			ldy 	#3 						; start position.
.35ac					_DTListLoop
.35ac	b1 28		lda ($28),y			lda 	(codePtr),y
.35ae	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.35b0	f0 5e		beq $3610			beq 	_DTIsString
.35b2	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.35b4	f0 56		beq $360c			beq 	_DTIsFloat
.35b6	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.35b8	f0 16		beq $35d0			beq 	_DTHexConstant
.35ba	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.35bc	d0 06		bne $35c4			bne 	_DTNotEnd
.35be	a9 ff		lda #$ff			lda 	#255 					; print CR
.35c0	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.35c3	60		rts				rts
.35c4					_DTNotEnd:
.35c4	c9 00		cmp #$00			cmp 	#0
.35c6	30 38		bmi $3600			bmi 	_DTIsToken
.35c8	c9 40		cmp #$40			cmp 	#$40
.35ca	90 3a		bcc $3606			bcc 	_DTIsIdentifier
.35cc	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.35ce	d0 0d		bne $35dd			bne 	_DTConstant
.35d0					_DTHexConstant:
.35d0	a9 26		lda #$26			lda 	#"&"
.35d2	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.35d5	c8		iny				iny
.35d6	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.35d8	20 ba 36	jsr $36ba			jsr 	DTSwitchMode
.35db	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.35dd					_DTConstant:
.35dd	48		pha				pha
.35de	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.35e0	20 ba 36	jsr $36ba			jsr 	DTSwitchMode
.35e3	a9 86		lda #$86			lda 	#LTYConstant
.35e5	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.35e8	a2 02		ldx #$02			ldx 	#2 						; get its value
.35ea	8a		txa				txa
.35eb	a2 0c		ldx #$0c		ldx	#12
.35ed	20 9e 32	jsr $329e		jsr	mainHandler
.35f0	aa		tax				tax
.35f1	68		pla				pla 							; get base back
.35f2	85 32		sta $32				sta 	tempShort
.35f4	98		tya				tya
.35f5	48		pha				pha
.35f6	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.35f8	20 3d 36	jsr $363d			jsr 	DTPrintInteger
.35fb	68		pla				pla
.35fc	a8		tay				tay
.35fd	4c ac 35	jmp $35ac			jmp 	_DTListLoop
.3600					_DTIsToken:
.3600	20 13 37	jsr $3713			jsr 	DTDecodeToken
.3603	4c ac 35	jmp $35ac			jmp 	_DTListLoop
.3606					_DTIsIdentifier:
.3606	20 cc 36	jsr $36cc			jsr 	DTIdentifier
.3609	4c ac 35	jmp $35ac			jmp 	_DTListLoop
.360c					_DTIsFloat:
>360c	db						.byte 	$DB
.360d	4c 0c 36	jmp $360c			jmp 	_DTIsFloat
.3610					_DTIsString:
.3610	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3612	20 ba 36	jsr $36ba			jsr 	DTSwitchMode
.3615	a9 81		lda #$81			lda 	#LTYString
.3617	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.361a	a9 22		lda #$22			lda 	#'"'						; open quote
.361c	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.361f	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3621	8a		txa				txa
.3622	a2 0c		ldx #$0c		ldx	#12
.3624	20 9e 32	jsr $329e		jsr	mainHandler
.3627	aa		tax				tax
.3628	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.362a	85 2a		sta $2a				sta 	temp0
.362c	b5 58		lda $58,x			lda 	esInt1,x
.362e	85 2b		sta $2b				sta 	temp0+1
.3630	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3632	20 4f 36	jsr $364f			jsr 	DTPrintLengthPrefix
.3635	a9 22		lda #$22			lda 	#'"'
.3637	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.363a	4c ac 35	jmp $35ac			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c23					tPrintCount:
>0c23							.fill 	1
.363d					DTPrintInteger:
.363d	48		pha				pha									; save base
.363e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3640	85 2a		sta $2a				sta 	temp0
.3642	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3644	85 2b		sta $2b				sta 	1+(temp0)
.3646	68		pla				pla
.3647	a8		tay				tay
.3648	8a		txa				txa
.3649	a2 0e		ldx #$0e		ldx	#14
.364b	20 9e 32	jsr $329e		jsr	mainHandler
.364e	aa		tax				tax 								; then drop through here.
.364f					DTPrintLengthPrefix:
.364f	aa		tax				tax 								; A = 0 = don't case convert.
.3650	98		tya				tya
.3651	48		pha				pha
.3652	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3654	b1 2a		lda ($2a),y			lda 	(temp0),y
.3656	8d 23 0c	sta $0c23			sta 	tPrintCount
.3659	f0 1b		beq $3676			beq 	_DTPLPExit 					; empty string
.365b					_DTPLPLoop:
.365b	c8		iny				iny 								; get next.
.365c	b1 2a		lda ($2a),y			lda 	(temp0),y
.365e	29 7f		and #$7f			and 	#$7F
.3660	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3662	f0 0a		beq $366e			beq 	_DTPLPNoCase
.3664	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3666	90 06		bcc $366e			bcc 	_DTPLPNoCase
.3668	c9 5b		cmp #$5b			cmp 	#"Z"+1
.366a	b0 02		bcs $366e			bcs 	_DTPLPNoCase
.366c	49 20		eor #$20			eor 	#"A"^"a"
.366e					_DTPLPNoCase
.366e	20 79 36	jsr $3679			jsr 	ListOutputCharacter 		; call handler
.3671	ce 23 0c	dec $0c23			dec 	tPrintCount 				; do all the characters
.3674	d0 e5		bne $365b			bne 	_DTPLPLoop
.3676					_DTPLPExit:
.3676	68		pla				pla
.3677	a8		tay				tay
.3678	60		rts				rts
.3679					ListOutputCharacter:
.3679	85 32		sta $32				sta 	tempShort
.367b	48		pha				pha
.367c	8a		txa				txa
.367d	48		pha				pha
.367e	98		tya				tya
.367f	48		pha				pha
.3680	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3682	c9 20		cmp #$20			cmp 	#32
.3684	b0 0c		bcs $3692			bcs		_LOCHiBit
.3686	09 40		ora #$40			ora 	#64 						; conversion
.3688	c9 40		cmp #$40			cmp 	#64							; make l/c
.368a	f0 06		beq $3692			beq 	_LOCHiBit
.368c	c9 5b		cmp #$5b			cmp 	#65+26
.368e	b0 02		bcs $3692			bcs 	_LOCHiBit
.3690	69 20		adc #$20			adc 	#32
.3692					_LOCHiBit:
.3692	20 9b 36	jsr $369b			jsr 	_LOCCallVector				; call o/p handler routine
.3695	68		pla				pla
.3696	a8		tay				tay
.3697	68		pla				pla
.3698	aa		tax				tax
.3699	68		pla				pla
.369a					_LOCExit:
.369a	60		rts				rts
.369b					_LOCCallVector:
.369b	6c 1f 0c	jmp ($0c1f)			jmp 	(deTokeniseVector)
.369e					deTokenPrint:
.369e	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.36a0	30 06		bmi $36a8			bmi 	_dtpInk
.36a2	a2 16		ldx #$16		ldx	#22
.36a4	20 bf 14	jsr $14bf		jsr	deviceHandler
.36a7	60		rts				rts
.36a8	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.36aa	f0 08		beq $36b4			beq 	_dtpCR						; except $FF => CRLF
.36ac	29 07		and #$07			and 	#7
.36ae	a2 08		ldx #$08		ldx	#8
.36b0	20 bf 14	jsr $14bf		jsr	deviceHandler
.36b3	60		rts				rts
.36b4					_dtpCR:
.36b4	a2 04		ldx #$04		ldx	#4
.36b6	20 bf 14	jsr $14bf		jsr	deviceHandler
.36b9	60		rts				rts
.36ba					DTSwitchMode:
.36ba	cd 21 0c	cmp $0c21			cmp 	LastCharacterClass 			; if changed, update character class
.36bd	f0 04		beq $36c3			beq 	_DTSMNoChange
.36bf	8d 21 0c	sta $0c21			sta 	LastCharacterClass
.36c2					_DTSMExit:
.36c2	60		rts				rts
.36c3					_DTSMNoChange:
.36c3	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.36c5	f0 fb		beq $36c2			beq 	_DTSMExit 					; need a space.
.36c7	a9 20		lda #$20			lda 	#" "
.36c9	4c 79 36	jmp $3679			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.36cc					DTIdentifier:
.36cc	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.36ce	20 ba 36	jsr $36ba			jsr 	DTSwitchMode
.36d1	a9 87		lda #$87			lda 	#LTYIdentifier
.36d3	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.36d6					_DTILoop:
.36d6	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.36d8	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.36da	d0 02		bne $36de			bne 	_DTINotUS
.36dc	a9 5f		lda #$5f			lda 	#"_"
.36de					_DTINotUS:
.36de	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.36e1	c8		iny				iny
.36e2	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.36e4	c9 3a		cmp #$3a			cmp 	#$3A
.36e6	90 ee		bcc $36d6			bcc 	_DTILoop
.36e8	c8		iny				iny
.36e9	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.36eb	f0 25		beq $3712			beq 	_DTIExit 					; no postfix.
.36ed	48		pha				pha
.36ee	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.36f0	8d 21 0c	sta $0c21			sta 	LastCharacterClass
.36f3	a9 82		lda #$82			lda 	#LTYPunctuation
.36f5	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.36f8	68		pla				pla
.36f9	c9 3b		cmp #$3b			cmp 	#$3B
.36fb	f0 10		beq $370d			beq 	_DTIArray
.36fd	4a		lsr a				lsr 	a 							; array flag in C
.36fe	08		php				php
.36ff	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3701	f0 02		beq $3705			beq 	_DTIDollar
.3703	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3705					_DTIDollar:
.3705	49 24		eor #$24			eor 	#"$"
.3707	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.370a	28		plp				plp
.370b	90 05		bcc $3712			bcc 	_DTIExit
.370d					_DTIArray:
.370d	a9 28		lda #$28			lda 	#"("
.370f	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.3712					_DTIExit:
.3712	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3713					DTDecodeToken:
.3713	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3715	b1 28		lda ($28),y			lda 	(codePtr),y
.3717	c9 84		cmp #$84			cmp 	#$84
.3719	b0 05		bcs $3720			bcs 	_DTNotShift
.371b	29 03		and #$03			and 	#3 							; get the shift 1..3
.371d	0a		asl a				asl 	a 							; put 2 x in X
.371e	aa		tax				tax
.371f	c8		iny				iny
.3720					_DTNotShift:
.3720	bd 22 3a	lda $3a22,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3723	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3725	bd 23 3a	lda $3a23,x			lda 	TokenTableAddress+1,x
.3728	85 2b		sta $2b				sta 	temp0+1
.372a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.372c	c8		iny				iny 								; consume it.
.372d	aa		tax				tax
.372e	98		tya				tya
.372f	48		pha				pha
.3730					_DTFindText:
.3730	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3732	f0 11		beq $3745			beq 	_DTFoundText
.3734	ca		dex				dex
.3735	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3737	38		sec				sec
.3738	b1 2a		lda ($2a),y			lda 	(temp0),y
.373a	65 2a		adc $2a				adc 	temp0
.373c	85 2a		sta $2a				sta 	temp0
.373e	90 f0		bcc $3730			bcc 	_DTFindText
.3740	e6 2b		inc $2b				inc 	temp0+1
.3742	4c 30 37	jmp $3730			jmp 	_DTFindText
.3745					_DTFoundText:
.3745	a0 01		ldy #$01			ldy 	#1 							; get first character
.3747	b1 2a		lda ($2a),y			lda 	(temp0),y
.3749	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.374b	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.374d	90 11		bcc $3760			bcc 	_DTIsPunctuation
.374f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3751	b0 0d		bcs $3760			bcs 	_DTIsPunctuation
.3753	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3755	20 ba 36	jsr $36ba			jsr 	DTSwitchMode
.3758	a9 83		lda #$83			lda 	#LTYKeyword
.375a	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.375d	4c 6a 37	jmp $376a			jmp 	_DTPrint
.3760					_DTIsPunctuation:
.3760	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3762	20 ba 36	jsr $36ba			jsr 	DTSwitchMode
.3765	a9 82		lda #$82			lda 	#LTYPunctuation
.3767	20 79 36	jsr $3679			jsr 	ListOutputCharacter
.376a					_DTPrint:
.376a	a9 01		lda #$01			lda 	#1 							; fix case.
.376c	20 4f 36	jsr $364f			jsr 	DTPrintLengthPrefix 		; print it out.
.376f	a0 00		ldy #$00			ldy 	#0
.3771	b1 2a		lda ($2a),y			lda 	(temp0),y
.3773	a8		tay				tay
.3774	b1 2a		lda ($2a),y			lda 	(temp0),y
.3776	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3778	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.377a	90 04		bcc $3780			bcc 	_DTIsNowPunctuation
.377c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.377e	90 05		bcc $3785			bcc 	_DTPExit
.3780					_DTIsNowPunctuation:
.3780	a9 01		lda #$01			lda 	#1
.3782	8d 21 0c	sta $0c21			sta		LastCharacterClass
.3785					_DTPExit:
.3785	68		pla				pla
.3786	a8		tay				tay
.3787	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c24					currentSet:
>0c24							.fill 	1
.3788					TokenSearch:
.3788	8a		txa				txa
.3789	48		pha				pha
.378a	98		tya				tya
.378b	48		pha				pha
.378c	a9 00		lda #$00			lda 	#0
.378e	8d 24 0c	sta $0c24			sta 	currentSet
.3791					_TSLoop:
.3791	ad 24 0c	lda $0c24			lda 	currentSet 					; 2 x currentset in X
.3794	0a		asl a				asl 	a
.3795	aa		tax				tax
.3796	bd 22 3a	lda $3a22,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3799	85 2a		sta $2a				sta 	temp0
.379b	bd 23 3a	lda $3a23,x			lda 	TokenTableAddress+1,x
.379e	85 2b		sta $2b				sta 	temp0+1
.37a0	20 c7 37	jsr $37c7			jsr 	TokenSearchOne 				; search one table
.37a3	b0 0d		bcs $37b2			bcs 	_TSFound 					; found a token.
.37a5	ee 24 0c	inc $0c24			inc 	currentSet 					; next set
.37a8	ad 24 0c	lda $0c24			lda 	currentSet
.37ab	c9 04		cmp #$04			cmp 	#4
.37ad	d0 e2		bne $3791			bne 	_TSLoop 					; back if not done all four.
.37af	18		clc				clc 								; clear carry and exit
.37b0	90 10		bcc $37c2			bcc 	_TSExit
.37b2					_TSFound:
.37b2	48		pha				pha 								; save token
.37b3	ad 24 0c	lda $0c24			lda 	currentSet					; if set zero no shift
.37b6	f0 05		beq $37bd			beq 	_TSNoShift
.37b8	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.37ba	20 78 38	jsr $3878			jsr 	TokenWrite
.37bd					_TSNoShift:
.37bd	68		pla				pla 								; get token back
.37be	20 78 38	jsr $3878			jsr 	TokenWrite 					; write it
.37c1	38		sec				sec 								; carry set indicating success
.37c2					_TSExit:
.37c2	68		pla				pla
.37c3	a8		tay				tay
.37c4	68		pla				pla
.37c5	aa		tax				tax
.37c6	60		rts				rts
.37c7					TokenSearchOne:
.37c7	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.37c9					_TSOLoop:
.37c9	a0 00		ldy #$00			ldy 	#0
.37cb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.37cd	f0 26		beq $37f5			beq 	_TSOFail 					; if zero, end of table
.37cf	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.37d2	f0 11		beq $37e5			beq 	_TSOCheckText
.37d4					_TSONext:
.37d4	e8		inx				inx 								; bump token
.37d5	a0 00		ldy #$00			ldy 	#0							; get length
.37d7	b1 2a		lda ($2a),y			lda 	(temp0),y
.37d9	38		sec				sec
.37da	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.37dc	85 2a		sta $2a				sta 	temp0
.37de	90 e9		bcc $37c9			bcc 	_TSOLoop
.37e0	e6 2b		inc $2b				inc 	temp0+1
.37e2	4c c9 37	jmp $37c9			jmp 	_TSOLoop
.37e5					_TSOCheckText:
.37e5	a8		tay				tay 								; compare length downto 1.
.37e6					_TSOCheckLoop:
.37e6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.37e8	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.37eb	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.37ed	d0 e5		bne $37d4			bne 	_TSONext 					; different goto next.
.37ef	88		dey				dey 								; do all
.37f0	d0 f4		bne $37e6			bne 	_TSOCheckLoop
.37f2	8a		txa				txa 								; return token in A and carry set
.37f3	38		sec				sec
.37f4	60		rts				rts
.37f5					_TSOFail:
.37f5	18		clc				clc
.37f6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.37f7					TokTest:
.37f7	a2 ff		ldx #$ff				ldx 	#$FF
.37f9	9a		txs					txs
.37fa	a9 17		lda #$17			lda 	#(TokenText1) & $FF
.37fc	85 28		sta $28				sta 	codePtr
.37fe	a9 38		lda #$38			lda 	#(TokenText1) >> 8
.3800	85 29		sta $29				sta 	1+(codePtr)
.3802	20 17 38	jsr $3817				jsr 	Tokenise
.3805	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3807	bd 17 38	lda $3817,x	_TokCheck:	lda 	TokenBytes1,x
.380a	dd 28 0c	cmp $0c28,x				cmp 	tokenBuffer,x
.380d	d0 fe		bne $380d	_TokFail:	bne 	_TokFail	 		; error.
.380f	e8		inx					inx
.3810	c9 80		cmp #$80				cmp 	#$80
.3812	d0 f3		bne $3807				bne 	_TokCheck
.3814	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3817					TokenText1:
.3817					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c25					tokenHeader:
>0c25							.fill 	3
.0c28					tokenBuffer:
>0c28							.fill 	256
.0d28					tokenBufferIndex:
>0d28							.fill 	1
.3817					Tokenise:
.3817	20 91 38	jsr $3891			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.381a					TokeniseASCIIZ:
.381a	20 a2 38	jsr $38a2			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.381d	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.381f	8d 28 0d	sta $0d28			sta 	tokenBufferIndex
.3822	a8		tay				tay 								; start pointer
.3823	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3825	8d 28 0c	sta $0c28			sta 	tokenBuffer
.3828					_TokLoop:
.3828	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.382a	f0 46		beq $3872			beq 	_TokExit 					; if zero, then exit.
.382c	c8		iny				iny 								; skip over spaces.
.382d	c9 20		cmp #$20			cmp 	#" "
.382f	f0 f7		beq $3828			beq 	_TokLoop
.3831	88		dey				dey 								; point back to character.
.3832	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3834	f0 18		beq $384e			beq 	_TokHexConst
.3836	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3838	f0 23		beq $385d			beq 	_TokQString
.383a	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.383c	b0 26		bcs $3864			bcs 	_TokPunctuation
.383e	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3840	b0 29		bcs $386b			bcs 	_TokIdentifier
.3842	c9 3a		cmp #$3a			cmp 	#"9"+1
.3844	b0 1e		bcs $3864			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3846	c9 30		cmp #$30			cmp 	#"0"
.3848	90 1a		bcc $3864			bcc 	_TokPunctuation 			; < 0, punctuation.
.384a	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.384c	d0 08		bne $3856			bne 	_TokConst
.384e					_TokHexConst:
.384e	c8		iny				iny									; consume token.
.384f	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3851	20 78 38	jsr $3878			jsr 	TokenWrite
.3854	a9 10		lda #$10			lda 	#16
.3856					_TokConst:
.3856	20 60 39	jsr $3960			jsr 	TokeniseInteger
.3859	b0 cd		bcs $3828			bcs 	_TokLoop
.385b	90 18		bcc $3875			bcc 	_TokFail
.385d					_TokQString:
.385d	20 f6 39	jsr $39f6			jsr 	TokeniseString
.3860	b0 c6		bcs $3828			bcs 	_TokLoop
.3862	90 11		bcc $3875			bcc 	_TokFail
.3864					_TokPunctuation:
.3864	20 d5 39	jsr $39d5			jsr 	TokenisePunctuation
.3867	b0 bf		bcs $3828			bcs 	_TokLoop
.3869	90 0a		bcc $3875			bcc 	_TokFail
.386b					_TokIdentifier:
.386b	20 d1 38	jsr $38d1			jsr 	TokeniseIdentifier
.386e	b0 b8		bcs $3828			bcs 	_TokLoop
.3870	90 03		bcc $3875			bcc 	_TokFail
.3872					_TokExit:
.3872	a9 01		lda #$01			lda 	#1
.3874	60		rts				rts
.3875					_TokFail:
.3875	a9 00		lda #$00			lda 	#0
.3877	60		rts				rts
.3878					TokenWrite:
.3878	85 32		sta $32				sta 	tempShort 					; save XA
.387a	48		pha				pha
.387b	8a		txa				txa
.387c	48		pha				pha
.387d	a5 32		lda $32				lda 	tempShort
.387f	ae 28 0d	ldx $0d28			ldx 	tokenBufferIndex 			; geet index
.3882	9d 28 0c	sta $0c28,x			sta 	tokenBuffer,x 				; write byte to buffer
.3885	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3887	9d 29 0c	sta $0c29,x			sta 	tokenBuffer+1,x
.388a	ee 28 0d	inc $0d28			inc 	tokenBufferIndex 			; bump index
.388d	68		pla				pla
.388e	aa		tax				tax
.388f	68		pla				pla
.3890	60		rts				rts
.3891					TokeniseMakeASCIIZ:
.3891	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3893	b1 28		lda ($28),y			lda 	(codePtr),y
.3895	a8		tay				tay
.3896	c8		iny				iny 								; +1, the NULL goes here.
.3897	a9 00		lda #$00			lda 	#0
.3899	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.389b	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.389d	d0 02		bne $38a1			bne 	_TMKAExit
.389f	e6 29		inc $29				inc 	codePtr+1
.38a1					_TMKAExit:
.38a1	60		rts				rts
.38a2					TokeniseFixCase:
.38a2	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.38a4	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.38a6					_TFCFlipQ:
.38a6	8a		txa				txa
.38a7	49 01		eor #$01			eor 	#1
.38a9	aa		tax				tax
.38aa					_TFCLoop:
.38aa	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.38ac	f0 22		beq $38d0			beq 	_TFCExit 					; if zero exit.
.38ae	c9 20		cmp #$20			cmp 	#32 						; if control
.38b0	90 1a		bcc $38cc			bcc 	_TFCControl
.38b2	c8		iny				iny 								; preconsume
.38b3	c9 22		cmp #$22			cmp 	#'"'
.38b5	f0 ef		beq $38a6			beq 	_TFCFlipQ
.38b7	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.38b9	90 ef		bcc $38aa			bcc 	_TFCLoop
.38bb	c9 7b		cmp #$7b			cmp 	#"z"+1
.38bd	b0 eb		bcs $38aa			bcs 	_TFCLoop
.38bf	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.38c1	d0 e7		bne $38aa			bne 	_TFCLoop
.38c3	88		dey				dey
.38c4	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.38c6					_TFCWrite:
.38c6	91 28		sta ($28),y			sta 	(codePtr),y
.38c8	c8		iny				iny
.38c9	4c aa 38	jmp $38aa			jmp 	_TFCLoop
.38cc					_TFCControl:
.38cc	a9 20		lda #$20			lda 	#" "
.38ce	d0 f6		bne $38c6			bne 	_TFCWrite
.38d0					_TFCExit:
.38d0	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.38d1					TokeniseIdentifier:
.38d1	a2 00		ldx #$00			ldx 	#0
.38d3					_TICopyID:
.38d3	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.38d5	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.38d7	f0 16		beq $38ef			beq 	_TICopyUnderscore
.38d9	c9 2e		cmp #$2e			cmp 	#"."
.38db	f0 14		beq $38f1			beq 	_TICopyIn
.38dd	c9 30		cmp #$30			cmp 	#"0"
.38df	90 1b		bcc $38fc			bcc 	_TIEndCopy
.38e1	c9 3a		cmp #$3a			cmp 	#"9"+1
.38e3	90 0c		bcc $38f1			bcc 	_TICopyIn
.38e5	c9 41		cmp #$41			cmp 	#"A"
.38e7	90 13		bcc $38fc			bcc 	_TIEndCopy
.38e9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.38eb	b0 0f		bcs $38fc			bcs		_TIEndCopy
.38ed	90 02		bcc $38f1			bcc 	_TICopyIn
.38ef					_TICopyUnderScore:
.38ef	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.38f1					_TICopyIn:
.38f1	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.38f2	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.38f5	8e cf 0a	stx $0acf			stx 	convertBuffer
.38f8	c8		iny				iny 								; next character
.38f9	4c d3 38	jmp $38d3			jmp 	_TICopyID 					; loop round
.38fc					_TIEndCopy:
.38fc	a9 24		lda #$24			lda 	#"$"
.38fe	20 53 39	jsr $3953			jsr 	TIDCheckCopy
.3901	a9 23		lda #$23			lda 	#"#"
.3903	20 53 39	jsr $3953			jsr 	TIDCheckCopy
.3906	a9 28		lda #$28			lda 	#"("
.3908	20 53 39	jsr $3953			jsr 	TIDCheckCopy
.390b	20 88 37	jsr $3788			jsr 	TokenSearch 				; is it a token
.390e	b0 41		bcs $3951			bcs 	_TIExit 					; if so, then exit.
.3910	98		tya				tya
.3911	48		pha				pha
.3912	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3914	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3917	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.391a	c9 28		cmp #$28			cmp 	#"("
.391c	d0 02		bne $3920			bne 	_TINotArray
.391e	ca		dex				dex 								; yes, remove it and convert to array.
.391f	c8		iny				iny
.3920					_TINotArray:
.3920	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3923	c9 24		cmp #$24			cmp 	#"$"
.3925	d0 03		bne $392a			bne 	_TINotString
.3927	ca		dex				dex
.3928	c8		iny				iny
.3929	c8		iny				iny
.392a					_TINotString:
.392a	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.392d	c9 23		cmp #$23			cmp 	#"#"
.392f	d0 05		bne $3936			bne 	_TINotFloat
.3931	ca		dex				dex
.3932	c8		iny				iny
.3933	c8		iny				iny
.3934	c8		iny				iny
.3935	c8		iny				iny
.3936					_TINotFloat:
.3936	e8		inx				inx 								; write end marker for identifier.
.3937	98		tya				tya
.3938	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.393b	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.393e	a2 01		ldx #$01			ldx 	#1
.3940					_TIOutput:
.3940	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3943	29 3f		and #$3f			and 	#$3F
.3945	48		pha				pha
.3946	20 78 38	jsr $3878			jsr 	TokenWrite
.3949	e8		inx				inx
.394a	68		pla				pla
.394b	c9 3a		cmp #$3a			cmp 	#$3A
.394d	90 f1		bcc $3940			bcc 	_TIOutput
.394f	68		pla				pla
.3950	a8		tay				tay
.3951					_TIExit:
.3951	38		sec				sec 								; this can't fail.
.3952	60		rts				rts
.3953					TIDCheckCopy:
.3953	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3955	d0 08		bne $395f			bne 	_TIDCCExit
.3957	e8		inx				inx
.3958	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.395b	8e cf 0a	stx $0acf			stx 	convertBuffer
.395e	c8		iny				iny
.395f					_TIDCCExit:
.395f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3960					TokeniseInteger:
.3960	85 2c		sta $2c				sta 	temp1 						; save base
.3962	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3964	8e cf 0a	stx $0acf			stx 	convertBuffer
.3967					_TIGetChars:
.3967	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3969	c9 30		cmp #$30			cmp 	#"0"
.396b	90 1f		bcc $398c			bcc 	_TIEndGet
.396d	c9 3a		cmp #$3a			cmp 	#"9"+1
.396f	90 10		bcc $3981			bcc 	_TIHaveChar
.3971	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3973	c9 0a		cmp #$0a			cmp 	#10
.3975	f0 15		beq $398c			beq 	_TIEndGet
.3977	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3979	c9 41		cmp #$41			cmp 	#"A"
.397b	90 0f		bcc $398c			bcc 	_TIEndGet
.397d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.397f	b0 0b		bcs $398c			bcs 	_TIEndGet
.3981					_TIHaveChar:
.3981	e8		inx				inx 								; write into buffer.
.3982	8e cf 0a	stx $0acf			stx 	convertBuffer
.3985	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3988	c8		iny				iny 								; next char
.3989	4c 67 39	jmp $3967			jmp 	_TIGetChars
.398c					_TIEndGet:
.398c	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.398e	f0 1c		beq $39ac			beq 	_TIFail
.3990	98		tya				tya
.3991	48		pha				pha
.3992	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3994	85 2a		sta $2a				sta 	temp0
.3996	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3998	85 2b		sta $2b				sta 	1+(temp0)
.399a	a9 00		lda #$00			lda 	#0 							; stack level 0
.399c	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.399e	a2 16		ldx #$16		ldx	#22
.39a0	20 9e 32	jsr $329e		jsr	mainHandler
.39a3	68		pla				pla
.39a4	a8		tay				tay
.39a5	90 05		bcc $39ac			bcc 	_TIFail 					; didn't convert.
.39a7	20 ae 39	jsr $39ae			jsr 	TIRecursiveOut 				; recursive output ?
.39aa	38		sec				sec
.39ab	60		rts				rts
.39ac					_TIFail:
.39ac	18		clc				clc
.39ad	60		rts				rts
.39ae					TIRecursiveOut:
.39ae	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.39b0	29 3f		and #$3f			and 	#$3F
.39b2	09 40		ora #$40			ora 	#$40
.39b4	48		pha				pha
.39b5	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.39b7	29 c0		and #$c0			and 	#$C0
.39b9	05 58		ora $58				ora 	esInt1
.39bb	05 60		ora $60				ora 	esInt2
.39bd	05 68		ora $68				ora 	esInt3
.39bf	f0 10		beq $39d1			beq 	_TIRONoRecursion
.39c1	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.39c3					_TIROShift:
.39c3	46 68		lsr $68				lsr 	esInt3
.39c5	66 60		ror $60				ror 	esInt2
.39c7	66 58		ror $58				ror 	esInt1
.39c9	66 50		ror $50				ror 	esInt0
.39cb	ca		dex				dex
.39cc	d0 f5		bne $39c3			bne 	_TIROShift
.39ce	20 ae 39	jsr $39ae			jsr 	TIRecursiveOut 				; call recursively
.39d1					_TIRONoRecursion:
.39d1	68		pla				pla 								; pull the old bit.
.39d2	4c 78 38	jmp $3878			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.39d5					TokenisePunctuation:
.39d5	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.39d7	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.39da	c8		iny				iny
.39db	b1 28		lda ($28),y			lda 	(codePtr),y
.39dd	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.39e0	c8		iny				iny 								; Y is +2
.39e1	a9 02		lda #$02			lda 	#2 							; 2 character string.
.39e3	8d cf 0a	sta $0acf			sta 	convertBuffer
.39e6	20 88 37	jsr $3788			jsr 	TokenSearch 				; search for that token.
.39e9	b0 0a		bcs $39f5			bcs 	_TIFound
.39eb	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.39ee	88		dey				dey 								; Y is now +1
.39ef	20 88 37	jsr $3788			jsr 	TokenSearch 				; search for that token.
.39f2	b0 01		bcs $39f5			bcs 	_TIFound
.39f4	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.39f5					_TIFound:
.39f5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.39f6					TokeniseString:
.39f6	c8		iny				iny 								; skip opening quote
.39f7	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.39f9	84 2a		sty $2a				sty 	temp0 						; save start.
.39fb					_TSGetLength:
.39fb	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.39fd	f0 21		beq $3a20			beq 	_TSFail						; end of line, fail
.39ff	c8		iny				iny
.3a00	e8		inx				inx
.3a01	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3a03	d0 f6		bne $39fb			bne 	_TSGetLength
.3a05	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3a07	20 78 38	jsr $3878			jsr 	TokenWrite
.3a0a	8a		txa				txa 								; output length
.3a0b	20 78 38	jsr $3878			jsr 	TokenWrite
.3a0e	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3a10	e0 00		cpx #$00			cpx 	#0 							; check ended
.3a12	f0 09		beq $3a1d			beq 	_TSExit
.3a14					_TSOutput:
.3a14	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3a16	20 78 38	jsr $3878			jsr 	TokenWrite
.3a19	c8		iny				iny
.3a1a	ca		dex				dex
.3a1b	d0 f7		bne $3a14			bne 	_TSOutput
.3a1d					_TSExit:
.3a1d	c8		iny				iny 								; skip ending quote
.3a1e	38		sec				sec 								; return CS.
.3a1f	60		rts				rts
.3a20					_TSFail:
.3a20	18		clc				clc
.3a21	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3a22					TokenTableAddress:
>3a22	2a 3a						.word 	Group0Text
>3a24	f3 3b						.word 	Group1Text
>3a26	40 3d						.word 	Group2Text
>3a28	60 3d						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3a2a					Group0Text:
>3a2a	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3a2e	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3a31	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3a35	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3a38	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3a3b	01 be					.byte $01,$be                          ; $8b >
>3a3d	01 bc					.byte $01,$bc                          ; $8c <
>3a3f	01 bd					.byte $01,$bd                          ; $8d =
>3a41	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3a44	01 ab					.byte $01,$ab                          ; $8f +
>3a46	01 ad					.byte $01,$ad                          ; $90 -
>3a48	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3a4b	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3a4e	01 aa					.byte $01,$aa                          ; $93 *
>3a50	01 af					.byte $01,$af                          ; $94 /
>3a52	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3a56	01 de					.byte $01,$de                          ; $96 ^
>3a58	01 a1					.byte $01,$a1                          ; $97 !
>3a5a	01 bf					.byte $01,$bf                          ; $98 ?
>3a5c	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3a63	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3a69	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3a6d	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3a70	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3a78	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3a7e	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3a83	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3a88	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3a8d	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3a93	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3a9b	01 a8					.byte $01,$a8                          ; $a4 (
>3a9d	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3aa2	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3aa7	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3aac	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3ab4	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3ab9	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3abe	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3ac4	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3ac9	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3ace	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3ad3	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3ada	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3ae1	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3ae6	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3aed	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3af4	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3afa	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3b01	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3b07	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3b0f	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3b15	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3b1a	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3b20	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3b26	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3b2c	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3b31	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3b36	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3b3d	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3b44	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3b4c	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3b54	01 c0					.byte $01,$c0                          ; $c3 @
>3b56	01 fe					.byte $01,$fe                          ; $c4 ~
>3b58	01 a6					.byte $01,$a6                          ; $c5 &
>3b5a	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3b60	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3b68	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3b6c	01 a9					.byte $01,$a9                          ; $c9 )
>3b6e	01 ba					.byte $01,$ba                          ; $ca :
>3b70	01 ac					.byte $01,$ac                          ; $cb ,
>3b72	01 bb					.byte $01,$bb                          ; $cc ;
>3b74	01 a7					.byte $01,$a7                          ; $cd '
>3b76	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3b79	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3b7e	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3b83	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3b89	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3b8d	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3b91	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3b95	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3b9b	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3ba0	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3ba4	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3baa	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3baf	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3bb5	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3bb8	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3bbd	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3bc4	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3bc9	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3bce	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3bd3	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3bd7	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3bdd	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3be1	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3be8	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3bee	01 ae					.byte $01,$ae                          ; $e6 .
>3bf0	01 a3					.byte $01,$a3                          ; $e7 #
>3bf2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3bf3					Group1Text:
>3bf3	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3bf9	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3bfe	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3c03	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3c08	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3c0c	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3c10	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3c15	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3c1d	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3c21	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3c26	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3c2b	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>3c30	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>3c36	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>3c3d	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>3c41	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>3c47	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>3c4b	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>3c4f	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>3c53	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>3c57	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>3c5b	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>3c5f	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>3c63	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>3c67	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>3c6b	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>3c6f	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>3c73	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>3c77	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>3c7b	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>3c7f	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>3c83	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>3c87	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>3c8b	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>3c8f	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>3c93	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>3c97	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>3c9b	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>3c9f	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>3ca3	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>3ca7	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>3cab	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>3caf	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>3cb3	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>3cb7	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>3cbb	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>3cbf	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>3cc3	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>3cc7	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>3ccb	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>3ccf	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>3cd3	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>3cd7	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>3cdb	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>3cdf	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>3ce3	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>3ce7	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>3ceb	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>3cef	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>3cf3	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>3cf7	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>3cfb	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>3cff	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>3d03	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>3d07	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>3d0b	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>3d0f	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>3d13	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>3d17	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>3d1b	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>3d1f	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>3d23	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>3d27	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>3d2b	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>3d2f	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>3d33	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>3d37	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>3d3b	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>3d3f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3d40					Group2Text:
>3d40	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3d46	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3d4c	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3d52	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3d57	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>3d5f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3d60					Group3Text:
>3d60	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3d67	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3d6e	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3d6f					tokeniserHandler:
.3d6f	7c 72 3d	jmp ($3d72,x)			jmp 	(tokeniserVectors,x)
.3d72					tokeniserVectors:
>3d72	75 35					.word Detokenise           ; index 0
>3d74	69 35					.word ListLine             ; index 2
>3d76	f7 37					.word TokTest              ; index 4
>3d78	17 38					.word Tokenise             ; index 6
>3d7a	1a 38					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3d7c					section_end_tokeniser:
.3d7c					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3d7c					AccessArray:
.3d7c	8a		txa				txa
.3d7d	48		pha				pha
.3d7e	e8		inx				inx
.3d7f	20 48 3e	jsr $3e48			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.3d82	68		pla				pla
.3d83	aa		tax				tax
.3d84	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.3d86	85 2a		sta $2a				sta 	temp0
.3d88	b5 58		lda $58,x			lda 	esInt1,x
.3d8a	85 2b		sta $2b				sta 	temp0+1
.3d8c	8a		txa				txa
.3d8d	48		pha				pha
.3d8e	98		tya				tya
.3d8f	48		pha				pha
.3d90					_AAFollow:
.3d90	a0 00		ldy #$00			ldy 	#0
.3d92	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d94	48		pha				pha
.3d95	c8		iny				iny
.3d96	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d98	85 2b		sta $2b				sta 	temp0+1
.3d9a	68		pla				pla
.3d9b	85 2a		sta $2a				sta 	temp0
.3d9d	e8		inx				inx 								; advance to next stack slot.
.3d9e	a0 00		ldy #$00			ldy 	#0
.3da0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.3da2	d5 50		cmp $50,x			cmp 	esInt0,x
.3da4	c8		iny				iny
.3da5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.3da7	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.3da9	29 7f		and #$7f			and 	#$7F
.3dab	f5 58		sbc $58,x			sbc 	esInt1,x
.3dad	90 50		bcc $3dff			bcc 	_AABadIndex 				; failed on index if max index < required.
.3daf	18		clc				clc
.3db0	a5 2a		lda $2a				lda 	temp0
.3db2	69 02		adc #$02			adc 	#2
.3db4	85 2a		sta $2a				sta 	temp0
.3db6	90 02		bcc $3dba			bcc 	_AANoCarry
.3db8	e6 2b		inc $2b				inc 	temp0+1
.3dba					_AANoCarry:
.3dba	b5 50		lda $50,x			lda 	esInt0,x
.3dbc	85 2e		sta $2e				sta 	temp2
.3dbe	b5 58		lda $58,x			lda 	esInt1,x
.3dc0	85 2f		sta $2f				sta 	temp2+1
.3dc2	ac 2b 0d	ldy $0d2b			ldy 	varType
.3dc5	b9 a2 3e	lda $3ea2,y			lda 	CAActualSize-$3A,y
.3dc8	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3dca	30 02		bmi $3dce			bmi 	_AANotPointer
.3dcc	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3dce					_AANotPointer:
.3dce	20 4c 3f	jsr $3f4c			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.3dd1	18		clc				clc
.3dd2	a5 2a		lda $2a				lda 	temp0
.3dd4	65 2e		adc $2e				adc 	temp2
.3dd6	85 2a		sta $2a				sta 	temp0
.3dd8	a5 2b		lda $2b				lda 	temp0+1
.3dda	65 2f		adc $2f				adc 	temp2+1
.3ddc	85 2b		sta $2b				sta 	temp0+1
.3dde	b5 49		lda $49,x			lda 	esType+1,x
.3de0	30 07		bmi $3de9			bmi 	_AAUsedAllIndices
.3de2	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.3de4	10 14		bpl $3dfa			bpl 	_AABadDepth 				; no, too many indexes.
.3de6	4c 90 3d	jmp $3d90			jmp 	_AAFollow 					; otherwise follow them.
.3de9					_AAUsedAllIndices:
.3de9	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.3deb	30 0d		bmi $3dfa			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.3ded	68		pla				pla
.3dee	a8		tay				tay
.3def	68		pla				pla
.3df0	aa		tax				tax
.3df1	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.3df3	95 50		sta $50,x			sta 	esInt0,x
.3df5	a5 2b		lda $2b				lda 	temp0+1
.3df7	95 58		sta $58,x			sta 	esInt1,x
.3df9	60		rts				rts
.3dfa					_AABadDepth:
.3dfa	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.3dfc	20 e0 14	jsr $14e0		jsr	errorHandler
.3dff					_AABadIndex:
.3dff	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3e01	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0d29					elementSize:
>0d29							.fill	 1
.3e04					CreateArray:
.3e04	20 db 3f	jsr $3fdb			jsr 	AccessSetup 				; set up the basic stuff.
.3e07	ad 2b 0d	lda $0d2b			lda 	varType 					; is the variable type an array
.3e0a	4a		lsr a				lsr 	a
.3e0b	90 36		bcc $3e43			bcc 	CANotArray 					; no, cause an error.
.3e0d	20 e4 40	jsr $40e4			jsr 	FindVariable 				; does the variable exist already
.3e10	b0 2c		bcs $3e3e			bcs 	CAFound 					; cannot redefine it.
.3e12	20 18 40	jsr $4018			jsr 	CreateVariable 				; create the variable entry.
.3e15	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3e17	48		pha				pha
.3e18	a5 2b		lda $2b				lda 	temp0+1
.3e1a	48		pha				pha
.3e1b	a2 00		ldx #$00			ldx 	#0
.3e1d	20 48 3e	jsr $3e48			jsr 	GetArrayDimensions 			; get the array dimensions
.3e20	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.3e22	20 78 3e	jsr $3e78			jsr 	CreateArrayLevel 			; level to YA
.3e25	aa		tax				tax 								; level now in YX
.3e26	68		pla				pla 								; get address back to temp0 to write.
.3e27	85 2b		sta $2b				sta 	temp0+1
.3e29	68		pla				pla
.3e2a	85 2a		sta $2a				sta 	temp0
.3e2c	98		tya				tya 								; write YX there.
.3e2d	a0 06		ldy #$06			ldy 	#6
.3e2f	91 2a		sta ($2a),y			sta 	(temp0),y
.3e31	88		dey				dey
.3e32	8a		txa				txa
.3e33	91 2a		sta ($2a),y			sta 	(temp0),y
.3e35	ac 2c 0d	ldy $0d2c			ldy 	varEnd 						; restore Y and exit.
.3e38	60		rts				rts
.3e39					CASize:
.3e39	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3e3b	20 e0 14	jsr $14e0		jsr	errorHandler
.3e3e					CAFound:
.3e3e	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3e40	20 e0 14	jsr $14e0		jsr	errorHandler
.3e43					CANotArray:
.3e43	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3e45	20 e0 14	jsr $14e0		jsr	errorHandler
.3e48					GetArrayDimensions:
.3e48	ad 2b 0d	lda $0d2b			lda 	varType 					; push variable type on the stack.
.3e4b	48		pha				pha
.3e4c	ac 2c 0d	ldy $0d2c			ldy 	varEnd
.3e4f					_CAGetDimensions:
.3e4f	8a		txa				txa 								; get the next level
.3e50	a2 08		ldx #$08		ldx	#8
.3e52	20 9e 32	jsr $329e		jsr	mainHandler
.3e55	aa		tax				tax
.3e56	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.3e58	29 e0		and #$e0			and 	#$E0
.3e5a	15 60		ora $60,x			ora 	esInt2,x
.3e5c	15 68		ora $68,x			ora 	esInt3,x
.3e5e	d0 d9		bne $3e39			bne 	CASize
.3e60	e8		inx				inx 								; next level.
.3e61	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.3e63	c8		iny				iny
.3e64	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.3e66	f0 e7		beq $3e4f			beq 	_CAGetDimensions
.3e68	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.3e6a	d0 cd		bne $3e39			bne 	CASize
.3e6c	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.3e6e	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.3e70	68		pla				pla 								; restore the variable type ($3A-$3F)
.3e71	8d 2b 0d	sta $0d2b			sta 	varType
.3e74	8c 2c 0d	sty $0d2c			sty 	varEnd 						; save exit Y value, after dimensions
.3e77	60		rts				rts
.3e78					CreateArrayLevel:
.3e78	ac 2b 0d	ldy $0d2b			ldy 	varType
.3e7b	b9 a2 3e	lda $3ea2,y			lda 	CAActualSize-$3A,y
.3e7e	8d 29 0d	sta $0d29			sta 	elementSize 				; get element size this level.
.3e81	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3e83	30 05		bmi $3e8a			bmi 	_CANotPointer
.3e85	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3e87	8d 29 0d	sta $0d29			sta 	elementSize
.3e8a					_CANotPointer:
.3e8a	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.3e8c	85 2a		sta $2a				sta 	temp0
.3e8e	48		pha				pha
.3e8f	a5 36		lda $36				lda 	lowMemory+1
.3e91	85 2b		sta $2b				sta 	temp0+1
.3e93	48		pha				pha
.3e94	20 15 3f	jsr $3f15			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.3e97	a0 00		ldy #$00			ldy 	#0
.3e99	b5 50		lda $50,x			lda 	esInt0,x
.3e9b	91 2a		sta ($2a),y			sta 	(temp0),y
.3e9d	c8		iny				iny
.3e9e	b5 58		lda $58,x			lda 	esInt1,x
.3ea0	91 2a		sta ($2a),y			sta 	(temp0),y
.3ea2	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.3ea4	30 06		bmi $3eac			bmi 	_CALNotLast
.3ea6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.3ea8	09 80		ora #$80			ora 	#$80
.3eaa	91 2a		sta ($2a),y			sta 	(temp0),y
.3eac					_CALNotLast:
.3eac	a9 02		lda #$02			lda 	#2
.3eae	20 d2 3e	jsr $3ed2			jsr 	_CALAddTemp0
.3eb1	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.3eb3	95 60		sta $60,x			sta 	esInt2,x 					; count.
.3eb5	b5 58		lda $58,x			lda 	esInt1,x
.3eb7	95 68		sta $68,x			sta 	esInt3,x
.3eb9					_CALClear:
.3eb9	20 e2 3e	jsr $3ee2			jsr 	EraseOneElement
.3ebc	ad 29 0d	lda $0d29			lda 	elementSize 				; move to next element
.3ebf	20 d2 3e	jsr $3ed2			jsr 	_CALAddTemp0
.3ec2	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.3ec4	d0 02		bne $3ec8			bne 	_CALNoBorrow
.3ec6	d6 68		dec $68,x			dec 	esInt3,x
.3ec8					_CALNoBorrow:
.3ec8	d6 60		dec $60,x			dec 	esInt2,x
.3eca	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.3ecc	10 eb		bpl $3eb9			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.3ece	68		pla				pla 								; restore the start of this into YA.
.3ecf	a8		tay				tay
.3ed0	68		pla				pla
.3ed1	60		rts				rts
.3ed2					_CALAddTemp0:
.3ed2	18		clc				clc
.3ed3	65 2a		adc $2a				adc 	temp0
.3ed5	85 2a		sta $2a				sta 	temp0
.3ed7	90 02		bcc $3edb			bcc 	_CALANoCarry
.3ed9	e6 2b		inc $2b				inc 	temp0+1
.3edb					_CALANoCarry:
.3edb	60		rts				rts
.3edc					CAActualSize:
>3edc	04 04						.byte 	VarISize,VarISize
>3ede	02 02						.byte 	VarSSize,VarSSize
>3ee0	06 06						.byte 	VarFSize,VarFSize
.3ee2					EraseOneElement:
.3ee2	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.3ee4	10 09		bpl $3eef			bpl 	_EOESubArray
.3ee6	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.3ee8	ad 2b 0d	lda $0d2b			lda 	varType
.3eeb	20 82 40	jsr $4082			jsr 	ZeroTemp0Y
.3eee	60		rts				rts
.3eef					_EOESubArray:
.3eef	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.3ef1	48		pha				pha
.3ef2	a5 2b		lda $2b				lda 	temp0+1
.3ef4	48		pha				pha
.3ef5	ad 29 0d	lda $0d29			lda 	elementSize 				; save element size
.3ef8	48		pha				pha
.3ef9	e8		inx				inx 								; create at next level
.3efa	20 78 3e	jsr $3e78			jsr 	CreateArrayLevel
.3efd	ca		dex				dex
.3efe	85 32		sta $32				sta 	tempShort 					; save A
.3f00	68		pla				pla  								; restore element size.
.3f01	8d 29 0d	sta $0d29			sta 	elementSize
.3f04	68		pla				pla 								; restore temp0, which is where this new array level goes.
.3f05	85 2b		sta $2b				sta 	temp0+1
.3f07	68		pla				pla
.3f08	85 2a		sta $2a				sta 	temp0
.3f0a	98		tya				tya 								; store Y/A there
.3f0b	a0 01		ldy #$01			ldy 	#1
.3f0d	91 2a		sta ($2a),y			sta 	(temp0),y
.3f0f	a5 32		lda $32				lda 	tempShort
.3f11	88		dey				dey
.3f12	91 2a		sta ($2a),y			sta 	(temp0),y
.3f14	60		rts				rts
.3f15					AllocateArraySpace:
.3f15	18		clc				clc 								; element count + 1 => temp2.
.3f16	b5 50		lda $50,x			lda 	esInt0,x
.3f18	69 01		adc #$01			adc 	#1
.3f1a	85 2e		sta $2e				sta 	temp2
.3f1c	b5 58		lda $58,x			lda 	esInt1,x
.3f1e	69 00		adc #$00			adc 	#0
.3f20	85 2f		sta $2f				sta 	temp2+1
.3f22	ad 29 0d	lda $0d29			lda 	elementSize 				; bytes per element
.3f25	20 4c 3f	jsr $3f4c			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.3f28	18		clc				clc 								; add 2 for 'max element' byte.
.3f29	a5 2e		lda $2e				lda 	temp2
.3f2b	69 02		adc #$02			adc 	#2
.3f2d	85 2e		sta $2e				sta 	temp2
.3f2f	90 02		bcc $3f33			bcc 	_AASNoCarry
.3f31	e6 2f		inc $2f				inc 	temp2+1
.3f33					_AASNoCarry:
.3f33	18		clc				clc 								; add to low memory, allocating space.
.3f34	a5 35		lda $35				lda 	lowMemory
.3f36	65 2e		adc $2e				adc 	temp2
.3f38	85 35		sta $35				sta 	lowMemory
.3f3a	a5 36		lda $36				lda 	lowMemory+1
.3f3c	65 2f		adc $2f				adc 	temp2+1
.3f3e	85 36		sta $36				sta 	lowMemory+1
.3f40	b0 05		bcs $3f47			bcs 	_AASFail 					; out of memory as adding causes wrapround
.3f42	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.3f44	b0 01		bcs $3f47			bcs 	_AASFail
.3f46	60		rts				rts
.3f47					_AASFail:
.3f47	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3f49	20 e0 14	jsr $14e0		jsr	errorHandler
.3f4c					MultiplyTemp2ByA:
.3f4c	48		pha				pha
.3f4d	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.3f4f	85 30		sta $30				sta 	temp3
.3f51	a5 2f		lda $2f				lda 	temp2+1
.3f53	85 31		sta $31				sta 	temp3+1
.3f55	68		pla				pla
.3f56	06 2e		asl $2e				asl 	temp2 						; double it.
.3f58	26 2f		rol $2f				rol 	temp2+1
.3f5a	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3f5c	f0 15		beq $3f73			beq 	_MTBAExit
.3f5e	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.3f60	d0 0d		bne $3f6f			bne 	_MTBANotFloat
.3f62	18		clc				clc 								; so this will make it x 3
.3f63	a5 2e		lda $2e				lda 	temp2
.3f65	65 30		adc $30				adc 	temp3
.3f67	85 2e		sta $2e				sta 	temp2
.3f69	a5 2f		lda $2f				lda 	temp2+1
.3f6b	65 31		adc $31				adc 	temp3+1
.3f6d	85 2f		sta $2f				sta 	temp2+1
.3f6f					_MTBANotFloat:
.3f6f	06 2e		asl $2e				asl 	temp2 						; double it.
.3f71	26 2f		rol $2f				rol 	temp2+1
.3f73					_MTBAExit:
.3f73	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0d2a					varHash:
>0d2a							.fill	1
.0d2b					varType:
>0d2b							.fill 	1
.0d2c					varEnd:
>0d2c							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3f74					AccessVariable:
.3f74	aa		tax				tax 								; stack in X
.3f75	c8		iny				iny									; look at second character
.3f76	b1 28		lda ($28),y			lda 	(codePtr),y
.3f78	88		dey				dey
.3f79	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3f7b	d0 15		bne $3f92			bne 	_AVLong 					; no, always use the hash tables.
.3f7d	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3f7f	38		sec				sec 	 							; make it 0-25
.3f80	e9 01		sbc #$01			sbc 	#1
.3f82	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3f83	0a		asl a				asl 	a
.3f84	95 50		sta $50,x			sta 	esInt0,x
.3f86	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3f88	95 58		sta $58,x			sta 	esInt1,x
.3f8a	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3f8c	95 48		sta $48,x			sta 	esType,x
.3f8e	c8		iny				iny 								; skip over the variable reference in the code.
.3f8f	c8		iny				iny  								; (1 letter, 1 type)
.3f90	8a		txa				txa 								; stack in A to return.
.3f91	60		rts				rts
.3f92					_AVLong:
.3f92	8a		txa				txa
.3f93	48		pha				pha
.3f94	20 db 3f	jsr $3fdb			jsr 	AccessSetup 				; set up the basic information we need for later
.3f97	20 e4 40	jsr $40e4			jsr 	FindVariable 				; does the variable exist already ?
.3f9a	b0 0e		bcs $3faa			bcs 	_AVFound 					; yes, then its found
.3f9c	ad 2b 0d	lda $0d2b			lda 	varType 					; otherwise, is the variable type an array
.3f9f	4a		lsr a				lsr 	a
.3fa0	90 05		bcc $3fa7			bcc 	_AVCanCreate 				; if not, we can autocreate
.3fa2	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3fa4	20 e0 14	jsr $14e0		jsr	errorHandler
.3fa7					_AVCanCreate:
.3fa7	20 18 40	jsr $4018			jsr 	CreateVariable 				; variable does not exist, create it.
.3faa					_AVFound:
.3faa	68		pla				pla
.3fab	aa		tax				tax
.3fac	18		clc				clc 								; copy temp0 (variable record address)
.3fad	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3faf	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3fb1	95 50		sta $50,x			sta 	esInt0,x
.3fb3	a5 2b		lda $2b				lda 	temp0+1
.3fb5	69 00		adc #$00			adc 	#0
.3fb7	95 58		sta $58,x			sta 	esInt1,x
.3fb9	a9 00		lda #$00			lda 	#0
.3fbb	95 60		sta $60,x			sta 	esInt2,x
.3fbd	95 68		sta $68,x			sta 	esInt3,x
.3fbf	ac 2b 0d	ldy $0d2b			ldy 	varType 					; get the type ID from the type.
.3fc2	b9 9b 3f	lda $3f9b,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3fc5	95 48		sta $48,x			sta 	esType,x
.3fc7	ac 2c 0d	ldy $0d2c			ldy 	varEnd 						; restore Y
.3fca	ad 2b 0d	lda $0d2b			lda 	VarType 					; get variable type, put LSB into C
.3fcd	4a		lsr a				lsr 	a
.3fce	90 03		bcc $3fd3			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3fd0	20 7c 3d	jsr $3d7c			jsr 	AccessArray 				; array lookup. if LSB was set.
.3fd3					_AVNotArray:
.3fd3	8a		txa				txa 								; return stack in A and return
.3fd4	60		rts				rts
.3fd5					_AVTypeTable:
>3fd5	80 80						.byte 	$80,$80						; integer
>3fd7	c0 c0						.byte 	$C0,$C0 					; string
>3fd9	81 81						.byte 	$81,$81 					; float
.3fdb					AccessSetup:
.3fdb	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3fdd	8d 2a 0d	sta $0d2a			sta 	varHash
.3fe0	98		tya				tya
.3fe1	48		pha				pha
.3fe2	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3fe4	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3fe6	b0 0b		bcs $3ff3			bcs 	_ASComplete
.3fe8	18		clc				clc 								; add to the hash. Might improve this.
.3fe9	6d 2a 0d	adc $0d2a			adc 	varHash
.3fec	8d 2a 0d	sta $0d2a			sta 	varHash
.3fef	c8		iny				iny 								; next character
.3ff0	4c e2 3f	jmp $3fe2			jmp 	_ASLoop
.3ff3					_ASComplete:
.3ff3	8d 2b 0d	sta $0d2b			sta 	varType 					; save variable type byte
.3ff6	c8		iny				iny
.3ff7	8c 2c 0d	sty $0d2c			sty 	varEnd 						; save the ending position.
.3ffa	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3ffb	e9 3a		sbc #$3a			sbc 	#$3A
.3ffd	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3ffe	0a		asl a				asl 	a
.3fff	0a		asl a				asl 	a
.4000	0a		asl a				asl 	a 							; 2 bytes/word
.4001	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4003	ad 2a 0d	lda $0d2a			lda 	varHash 					; get hash
.4006	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4008	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4009	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.400b	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.400d	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.400f	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4011	69 00		adc #$00			adc 	#0
.4013	85 3c		sta $3c				sta 	hashList+1
.4015	68		pla				pla
.4016	a8		tay				tay
.4017	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4018					CreateVariable:
.4018	98		tya				tya 								; push Y on the stack twice.
.4019	48		pha				pha									; position in code of the new variable.
.401a	48		pha				pha
.401b	ae 2b 0d	ldx $0d2b			ldx 	varType 					; get var type 0-5 from the var type
.401e	bd 42 40	lda $4042,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4021	48		pha				pha 								; save length
.4022	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4024	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4026	a5 36		lda $36				lda 	lowMemory+1
.4028	85 2b		sta $2b				sta 	temp0+1
.402a	68		pla				pla 								; get length
.402b	18		clc				clc 								; add to low memory.
.402c	65 35		adc $35				adc 	lowMemory
.402e	85 35		sta $35				sta 	lowMemory
.4030	90 08		bcc $403a			bcc 	_CVNoCarry
.4032	e6 36		inc $36				inc 	lowMemory+1
.4034	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4036	c5 34		cmp $34				cmp 	highMemory+1
.4038	b0 3d		bcs $4077			bcs 	_CVMemory
.403a					_CVNoCarry:
.403a	ad 2a 0d	lda $0d2a			lda 	varHash 					; store hash at offset 4.
.403d	a0 04		ldy #$04			ldy 	#4
.403f	91 2a		sta ($2a),y			sta 	(temp0),y
.4041	68		pla				pla 								; offset, work out where the variable name is.
.4042	18		clc				clc
.4043	65 28		adc $28				adc 	codePtr
.4045	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4047	91 2a		sta ($2a),y			sta 	(temp0),y
.4049	a5 29		lda $29				lda 	codePtr+1
.404b	69 00		adc #$00			adc 	#0
.404d	c8		iny				iny
.404e	91 2a		sta ($2a),y			sta 	(temp0),y
.4050	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4053	b0 03		bcs $4058			bcs 	_CVNotImmediate
.4055	20 ba 40	jsr $40ba			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4058					_CVNotImmediate:
.4058	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.405a	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.405c	91 2a		sta ($2a),y			sta 	(temp0),y
.405e	c8		iny				iny
.405f	b1 3b		lda ($3b),y			lda 	(hashList),y
.4061	91 2a		sta ($2a),y			sta 	(temp0),y
.4063	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4065	91 3b		sta ($3b),y			sta 	(hashList),y
.4067	88		dey				dey
.4068	a5 2a		lda $2a				lda 	temp0
.406a	91 3b		sta ($3b),y			sta 	(hashList),y
.406c	ad 2b 0d	lda $0d2b			lda 	varType 					; type in A
.406f	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4071	20 82 40	jsr $4082			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4074	68		pla				pla
.4075	a8		tay				tay
.4076	60		rts				rts
.4077					_CVMemory:
.4077	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4079	20 e0 14	jsr $14e0		jsr	errorHandler
>407c	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>407e	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4080	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4082					ZeroTemp0Y:
.4082	4a		lsr a				lsr 	a 							; bit 0 in carry
.4083	0a		asl a				asl 	a
.4084	b0 19		bcs $409f			bcs 	_ZTExit 					; we don't initialise arrays.
.4086	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4088	f0 16		beq $40a0			beq 	_ZTWriteNullString 			; write "" string
.408a	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.408c	f0 22		beq $40b0			beq 	_ZTWriteFloat
.408e	98		tya				tya
.408f	48		pha				pha
.4090	a9 00		lda #$00			lda 	#0
.4092	91 2a		sta ($2a),y			sta 	(temp0),y
.4094	c8		iny				iny
.4095	91 2a		sta ($2a),y			sta 	(temp0),y
.4097	c8		iny				iny
.4098	91 2a		sta ($2a),y			sta 	(temp0),y
.409a	c8		iny				iny
.409b	91 2a		sta ($2a),y			sta 	(temp0),y
.409d	68		pla				pla
.409e	a8		tay				tay
.409f					_ZTExit:
.409f	60		rts				rts
.40a0					_ZTWriteNullString:
.40a0	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.40a2	8d ce 0a	sta $0ace			sta 	NullString
.40a5	a9 ce		lda #$ce			lda 	#NullString & $FF
.40a7	91 2a		sta ($2a),y			sta 	(temp0),y
.40a9	a9 0a		lda #$0a			lda 	#NullString >> 8
.40ab	c8		iny				iny
.40ac	91 2a		sta ($2a),y			sta 	(temp0),y
.40ae	88		dey				dey
.40af	60		rts				rts
.40b0					_ZTWriteFloat:
.40b0	8a		txa				txa
.40b1	48		pha				pha
.40b2	a2 1e		ldx #$1e		ldx	#30
.40b4	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.40b7	68		pla				pla
.40b8	aa		tax				tax
.40b9	60		rts				rts
.40ba					CloneVariableName:
.40ba	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.40bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.40be	85 2e		sta $2e				sta 	temp2
.40c0	c8		iny				iny
.40c1	b1 2a		lda ($2a),y			lda 	(temp0),y
.40c3	85 2f		sta $2f				sta 	temp2+1
.40c5	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.40c7	91 2a		sta ($2a),y			sta 	(temp0),y
.40c9	88		dey				dey
.40ca	a5 35		lda $35				lda 	lowMemory
.40cc	91 2a		sta ($2a),y			sta 	(temp0),y
.40ce	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.40d0					_CVNCopy:
.40d0	b1 2e		lda ($2e),y			lda		(temp2),y
.40d2	91 35		sta ($35),y			sta 	(lowMemory),y
.40d4	c8		iny				iny
.40d5	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.40d7	90 f7		bcc $40d0			bcc 	_CVNCopy
.40d9	98		tya				tya 								; add Y to low memory
.40da	18		clc				clc
.40db	65 35		adc $35				adc 	lowMemory
.40dd	85 35		sta $35				sta 	lowMemory
.40df	90 02		bcc $40e3			bcc 	_CVNNoCarry
.40e1	e6 36		inc $36				inc 	lowMemory+1
.40e3					_CVNNoCarry:
.40e3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.40e4					FindVariable:
.40e4	98		tya				tya
.40e5	48		pha				pha
.40e6	98		tya				tya 								; point temp2 to the actual name
.40e7	18		clc				clc 								; in memory of the variable being created
.40e8	65 28		adc $28				adc 	codePtr
.40ea	85 2e		sta $2e				sta 	temp2
.40ec	a5 29		lda $29				lda 	codePtr+1
.40ee	69 00		adc #$00			adc 	#0
.40f0	85 2f		sta $2f				sta 	temp2+1
.40f2	a0 00		ldy #$00			ldy 	#0
.40f4	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.40f6	85 2a		sta $2a				sta 	temp0
.40f8	a5 3c		lda $3c				lda 	hashList+1
.40fa	85 2b		sta $2b				sta 	temp0+1
.40fc	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.40fe	b1 2a		lda ($2a),y			lda 	(temp0),y
.4100	f0 2c		beq $412e			beq 	_FVFail
.4102	aa		tax				tax
.4103	88		dey				dey		 							; get LSB
.4104	b1 2a		lda ($2a),y			lda 	(temp0),y
.4106	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4108	86 2b		stx $2b				stx 	temp0+1
.410a	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.410c	b1 2a		lda ($2a),y			lda 	(temp0),y
.410e	cd 2a 0d	cmp $0d2a			cmp 	varHash
.4111	d0 e9		bne $40fc			bne 	_FVNext 					; if not, no point in checking the name.
.4113	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4114	b1 2a		lda ($2a),y			lda 	(temp0),y
.4116	85 2d		sta $2d				sta 	temp1+1
.4118	88		dey				dey
.4119	b1 2a		lda ($2a),y			lda 	(temp0),y
.411b	85 2c		sta $2c				sta 	temp1
.411d	a0 00		ldy #$00			ldy 	#0
.411f					_FVCheck:
.411f	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4121	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4123	d0 d7		bne $40fc			bne 	_FVNext		 				; fail if different.
.4125	c8		iny				iny
.4126	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4128	90 f5		bcc $411f			bcc 	_FVCheck
.412a	68		pla				pla
.412b	a8		tay				tay
.412c	38		sec				sec
.412d	60		rts				rts
.412e					_FVFail:
.412e	68		pla				pla
.412f	a8		tay				tay
.4130	18		clc				clc
.4131	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4132					HashTableReset:
.4132	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4134	a9 00		lda #$00			lda 	#0
.4136					_HTRClear:
.4136	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4139	ca		dex				dex
.413a	d0 fa		bne $4136			bne 	_HTRClear
.413c	60		rts				rts

;******  Return to file: variable/variable.asm

.413d					variableHandler:
.413d	7c 40 41	jmp ($4140,x)			jmp 	(variableVectors,x)
.4140					variableVectors:
>4140	74 3f					.word AccessVariable       ; index 0
>4142	04 3e					.word CreateArray          ; index 2
>4144	32 41					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.4146					section_end_variable:
.4146					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d2d					endStorage:
>4146							.align 	256
.4200					programMemory:
>41ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4200					section_end_footer:

;******  End of listing
