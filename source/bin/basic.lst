
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=0 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Thu Mar 11 11:43:53 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					autorun=0
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$28					ZeroPageStorage = $28
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line.
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000					Start:
.1000	4c e3 22	jmp $22e3			jmp 	ColdStart
.1003	4c d9 2e	jmp $2ed9			jmp 	TokTest
>1006	ff 30						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.360d					ReturnPos:
.5000					programMemory:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	18 e8 03 ca 85 11 54 68			.byte 24,232,3,202,133,17,84,104,105,115,32,105,115,32,97,32,99,111,109,109,101,110,116,128,9,242,3,129,137,200,81,76,128,12,252,3,1,45,49,58,141,144,65,99,128,9,6,4,24,58,141,144,66,128,7,16,4,213,1,58,128,14,26,4,213,193,133,5,72,101,108,108,111,198,128,14,36,4,213,194,133,5,72,101,108,108,111,198,128,23,46,4,3,49,60,141,133,6,83,65,86,69,77,69,143,133,4,116,101,115,116,128,24,56,4,213,133,5,83,84,65,82,84,200,1,45,49,58,200,3,49,60,200,24,58,128,11,66,4,205,19,8,15,23,59,198,128,30,76,4,205,4,5,13,15,59,106,200,197,82,77,69,89,120,200,133,8,73,78,68,69,77,79,33,33,198,128,11,86,4,205,19,8,15,23,59,198,128,22,96,4,213,133,3,69,78,68,200,1,45,49,58,200,3,49,60,200,24,58,128,11,106,4,205,19,8,15,23,59,198,128,33,116,4,3,49,60,141,133,19,120,120,120,120,120,120,120,120,120,120,120,120,120,65,65,65,65,65,65,143,133,1,33,128,14,126,4,213,3,49,60,200,165,3,49,60,198,128,11,136,4,205,19,8,15,23,59,198,128,8,146,4,153,199,158,171,128,22,156,4,157,4,5,13,15,59,1,45,49,58,200,24,58,200,3,49,60,198,128,11,166,4,205,19,8,15,23,59,198,128,18,176,4,3,49,60,141,3,49,60,143,133,4,33,33,33,33,128,11,186,4,205,19,8,15,23,59,198,128,13,196,4,205,24,15,50,59,133,1,42,198,128,45,206,4,213,133,4,68,69,77,79,200,1,45,49,58,200,3,1,45,49,60,200,133,1,36,201,184,24,58,200,80,198,200,133,1,36,184,195,3,49,60,200,80,198,128,5,216,4,163,128,13,226,4,157,24,15,50,59,3,49,60,198,128,14,236,4,213,133,3,88,79,50,201,3,49,60,128,5,246,4,163,128,11,0,5,157,19,8,15,23,59,198,128,11,10,5,1,58,141,195,3,49,60,128,26,20,5,213,133,1,36,201,184,187,1,58,198,200,80,198,200,186,187,1,58,198,144,65,198,128,5,30,5,163,128,28,40,5,24,24,58,24,24,59,68,198,24,24,60,24,24,61,68,198,24,24,62,24,24,63,68,198,128,0
>5008	69 73 20 69 73 20 61 20 63 6f 6d 6d 65 6e 74 80
>5018	09 f2 03 81 89 c8 51 4c 80 0c fc 03 01 2d 31 3a
>5028	8d 90 41 63 80 09 06 04 18 3a 8d 90 42 80 07 10
>5038	04 d5 01 3a 80 0e 1a 04 d5 c1 85 05 48 65 6c 6c
>5048	6f c6 80 0e 24 04 d5 c2 85 05 48 65 6c 6c 6f c6
>5058	80 17 2e 04 03 31 3c 8d 85 06 53 41 56 45 4d 45
>5068	8f 85 04 74 65 73 74 80 18 38 04 d5 85 05 53 54
>5078	41 52 54 c8 01 2d 31 3a c8 03 31 3c c8 18 3a 80
>5088	0b 42 04 cd 13 08 0f 17 3b c6 80 1e 4c 04 cd 04
>5098	05 0d 0f 3b 6a c8 c5 52 4d 45 59 78 c8 85 08 49
>50a8	4e 44 45 4d 4f 21 21 c6 80 0b 56 04 cd 13 08 0f
>50b8	17 3b c6 80 16 60 04 d5 85 03 45 4e 44 c8 01 2d
>50c8	31 3a c8 03 31 3c c8 18 3a 80 0b 6a 04 cd 13 08
>50d8	0f 17 3b c6 80 21 74 04 03 31 3c 8d 85 13 78 78
>50e8	78 78 78 78 78 78 78 78 78 78 78 41 41 41 41 41
>50f8	41 8f 85 01 21 80 0e 7e 04 d5 03 31 3c c8 a5 03
>5108	31 3c c6 80 0b 88 04 cd 13 08 0f 17 3b c6 80 08
>5118	92 04 99 c7 9e ab 80 16 9c 04 9d 04 05 0d 0f 3b
>5128	01 2d 31 3a c8 18 3a c8 03 31 3c c6 80 0b a6 04
>5138	cd 13 08 0f 17 3b c6 80 12 b0 04 03 31 3c 8d 03
>5148	31 3c 8f 85 04 21 21 21 21 80 0b ba 04 cd 13 08
>5158	0f 17 3b c6 80 0d c4 04 cd 18 0f 32 3b 85 01 2a
>5168	c6 80 2d ce 04 d5 85 04 44 45 4d 4f c8 01 2d 31
>5178	3a c8 03 01 2d 31 3c c8 85 01 24 c9 b8 18 3a c8
>5188	50 c6 c8 85 01 24 b8 c3 03 31 3c c8 50 c6 80 05
>5198	d8 04 a3 80 0d e2 04 9d 18 0f 32 3b 03 31 3c c6
>51a8	80 0e ec 04 d5 85 03 58 4f 32 c9 03 31 3c 80 05
>51b8	f6 04 a3 80 0b 00 05 9d 13 08 0f 17 3b c6 80 0b
>51c8	0a 05 01 3a 8d c3 03 31 3c 80 1a 14 05 d5 85 01
>51d8	24 c9 b8 bb 01 3a c6 c8 50 c6 c8 ba bb 01 3a c6
>51e8	90 41 c6 80 05 1e 05 a3 80 1c 28 05 18 18 3a 18
>51f8	18 3b 44 c6 18 18 3c 18 18 3d 44 c6 18 18 3e 18
>5208	18 3f 44 c6 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.100a					Command_Assert:
.100a	20 f2 1c	jsr $1cf2			jsr 	EvaluateRootInteger 		; what is being asserted.
.100d	20 7d 22	jsr $227d			jsr 	MInt32Zero 					; is it true ?
.1010	f0 01		beq $1013			beq 	_CAError
.1012	60		rts				rts
.1013					_CAError:
.1013	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1015	20 c7 24	jsr $24c7		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1018					CommandClear:
.1018					XCommandClear:
.1018	98		tya				tya
.1019	48		pha				pha
.101a	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.101d	85 33		sta $33				sta 	highMemory
.101f	ad cd 0a	lda $0acd			lda 	endMemory+1
.1022	85 34		sta $34				sta 	highMemory+1
.1024	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1027	85 2a		sta $2a				sta 	temp0
.1029	ad c9 0a	lda $0ac9			lda 	basePage+1
.102c	85 2b		sta $2b				sta 	temp0+1
.102e					_CCFindEnd:
.102e	a0 00		ldy #$00			ldy 	#0
.1030	b1 2a		lda ($2a),y			lda 	(temp0),y
.1032	f0 0c		beq $1040			beq 	_CCFoundEnd 				; offset zero is end.
.1034	18		clc				clc
.1035	65 2a		adc $2a				adc 	temp0 						; move to next line
.1037	85 2a		sta $2a				sta 	temp0
.1039	90 f3		bcc $102e			bcc 	_CCFindEnd
.103b	e6 2b		inc $2b				inc 	temp0+1
.103d	4c 2e 10	jmp $102e			jmp 	_CCFindEnd
.1040					_CCFoundEnd:
.1040	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.1042	85 35		sta $35				sta 	lowMemory
.1044	a5 2b		lda $2b				lda 	temp0+1
.1046	85 36		sta $36				sta 	lowMemory+1
.1048	18		clc				clc 								; put temp0+1 in endProgram
.1049	a5 2a		lda $2a				lda 	temp0
.104b	69 01		adc #$01			adc 	#1
.104d	8d ca 0a	sta $0aca			sta 	endProgram
.1050	a5 2b		lda $2b				lda 	temp0+1
.1052	69 00		adc #$00			adc 	#0
.1054	8d cb 0a	sta $0acb			sta 	endProgram+1
.1057	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.1059	20 6d 10	jsr $106d			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105c	20 09 23	jsr $2309			jsr 	RSReset 					; reset the return stack.
.105f	a2 04		ldx #$04		ldx	#4
.1061	20 04 36	jsr $3604		jsr	variableHandler
.1064	20 e3 16	jsr $16e3			jsr 	ScanProc 					; scan for procedures
.1067	20 ed 14	jsr $14ed			jsr 	CommandRestore 				; do a restore
.106a	68		pla				pla
.106b	a8		tay				tay
.106c	60		rts				rts
.106d					AdvanceLowMemoryByte:
.106d	18		clc				clc
.106e	65 35		adc $35				adc 	lowMemory
.1070	85 35		sta $35				sta 	lowMemory
.1072	90 02		bcc $1076			bcc 	_ALMBExit
.1074	e6 36		inc $36				inc 	lowMemory+1
.1076					_ALMBExit:
.1076	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1077					Command_Dim:
.1077	a2 02		ldx #$02		ldx	#2
.1079	20 04 36	jsr $3604		jsr	variableHandler
.107c	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.107e	c8		iny				iny
.107f	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1081	f0 f4		beq $1077			beq 	Command_Dim
.1083	88		dey				dey 								; unpick get
.1084	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.360d					Command_FOR:
.360d	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.360f	a2 0b		ldx #$0b			ldx 	#11
.3611	20 17 23	jsr $2317			jsr 	RSClaim
.3614	20 72 11	jsr $1172			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.3617	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.3619	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.361b	d0 4c		bne $3669			bne 	_CFType
.361d	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.361f	20 be 22	jsr $22be			jsr 	CheckToken
.3622	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.3624	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger				; get terminal value in stack 1
.3627	98		tya				tya
.3628	48		pha				pha
.3629	a0 04		ldy #$04			ldy 	#4
.362b	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.362d	91 78		sta ($78),y			sta 	(rsPointer),y
.362f	c8		iny				iny
.3630	a5 50		lda $50				lda		esInt1
.3632	91 78		sta ($78),y			sta 	(rsPointer),y
.3634	c8		iny				iny
.3635	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.3637	91 78		sta ($78),y			sta 	(rsPointer),y
.3639	c8		iny				iny
.363a	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.363c	91 78		sta ($78),y			sta 	(rsPointer),y
.363e	c8		iny				iny
.363f	a5 51		lda $51				lda		esInt1+1
.3641	91 78		sta ($78),y			sta 	(rsPointer),y
.3643	c8		iny				iny
.3644	a5 59		lda $59				lda		esInt2+1
.3646	91 78		sta ($78),y			sta 	(rsPointer),y
.3648	c8		iny				iny
.3649	a5 61		lda $61				lda		esInt3+1
.364b	91 78		sta ($78),y			sta 	(rsPointer),y
.364d	68		pla				pla
.364e	a8		tay				tay
.364f	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.3651	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.3653	d0 0e		bne $3663			bne 	_CFDone
.3655	c8		iny				iny									; skip over step.
.3656	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger 			; get step
.3659	98		tya				tya
.365a	48		pha				pha
.365b	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.365d	a0 06		ldy #$06			ldy 	#6
.365f	91 78		sta ($78),y			sta 	(rsPointer),y
.3661	68		pla				pla
.3662	a8		tay				tay
.3663					_CFDone:
.3663	a9 01		lda #$01			lda 	#1
.3665	20 43 23	jsr $2343			jsr 	RSSavePosition 				; save position.
.3668	60		rts				rts
.3669					_CFType:
.3669	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.366b	20 c7 24	jsr $24c7		jsr	errorHandler
.366e					Command_NEXT:
.366e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3670	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.3672	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.3674	f0 05		beq $367b			beq 	_isok
.3676	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.3678	20 c7 24	jsr $24c7		jsr	errorHandler
.367b					_isok:
.367b	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.367d	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.367f	b0 18		bcs $3699			bcs 	_CNNoIndex
.3681	a2 00		ldx #$00			ldx 	#0 							; start on stack
.3683	20 27 1d	jsr $1d27			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.3686	98		tya				tya
.3687	48		pha				pha
.3688	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.368a	b1 78		lda ($78),y			lda 	(rsPointer),y
.368c	d5 48		cmp $48,x			cmp 	esInt0,x
.368e	d0 76		bne $3706			bne 	_CNBadIndex
.3690	c8		iny				iny
.3691	b1 78		lda ($78),y			lda 	(rsPointer),y
.3693	d5 50		cmp $50,x			cmp 	esInt1,x
.3695	d0 6f		bne $3706			bne 	_CNBadIndex
.3697	68		pla				pla
.3698	a8		tay				tay
.3699					_CNNoIndex:
.3699	98		tya				tya
.369a	48		pha				pha
.369b	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.369d	b1 78		lda ($78),y			lda 	(rsPointer),y
.369f	85 2a		sta $2a				sta 	temp0
.36a1	c8		iny				iny
.36a2	b1 78		lda ($78),y			lda 	(rsPointer),y
.36a4	85 2b		sta $2b				sta 	temp0+1
.36a6	c8		iny				iny
.36a7	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.36a9	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.36ab	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.36ad	10 01		bpl $36b0			bpl 	_CNSignX
.36af	ca		dex				dex  								; X = $FF
.36b0					_CNSignX:
.36b0	18		clc				clc 								; add to the LSB
.36b1	a0 00		ldy #$00			ldy 	#0
.36b3	71 2a		adc ($2a),y			adc 	(temp0),y
.36b5	91 2a		sta ($2a),y			sta 	(temp0),y
.36b7					_CNPropogate:
.36b7	c8		iny				iny  								; add the sign extended in X to the rest.
.36b8	8a		txa				txa
.36b9	71 2a		adc ($2a),y			adc 	(temp0),y
.36bb	91 2a		sta ($2a),y			sta 	(temp0),y
.36bd	c8		iny				iny
.36be	8a		txa				txa
.36bf	71 2a		adc ($2a),y			adc 	(temp0),y
.36c1	91 2a		sta ($2a),y			sta 	(temp0),y
.36c3	c8		iny				iny
.36c4	8a		txa				txa
.36c5	71 2a		adc ($2a),y			adc 	(temp0),y
.36c7	91 2a		sta ($2a),y			sta 	(temp0),y
.36c9	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.36ca	a5 78		lda $78				lda 	rsPointer
.36cc	69 07		adc #$07			adc 	#7
.36ce	85 2c		sta $2c				sta 	temp1
.36d0	a9 00		lda #$00			lda 	#0
.36d2	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.36d4	a8		tay				tay 								; and clear the Y register again.
.36d5	65 79		adc $79				adc 	rsPointer+1
.36d7	85 2d		sta $2d				sta 	temp1+1
.36d9	38		sec				sec 								; calculate current - limit oring interim values.
.36da	20 12 37	jsr $3712			jsr 	_CNCompare 					; each of these does a byte.
.36dd	20 12 37	jsr $3712			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.36e0	20 12 37	jsr $3712			jsr 	_CNCompare 					; and the carry of the subtraction.
.36e3	20 12 37	jsr $3712			jsr 	_CNCompare
.36e6	50 02		bvc $36ea			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.36e8	49 80		eor #$80			eor 	#$80
.36ea					_CNNoOverflow:
.36ea	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.36ec	30 1d		bmi $370b			bmi 	_CNCheckDownto
.36ee	c9 00		cmp #$00			cmp 	#0
.36f0	30 0c		bmi $36fe			bmi 	_CNLoopRound 				; loop round if < =
.36f2	a5 2e		lda $2e				lda 	temp2
.36f4	f0 08		beq $36fe			beq 	_CNLoopRound
.36f6					_CNLoopExit:
.36f6	68		pla				pla
.36f7	a8		tay				tay
.36f8	a9 0b		lda #$0b			lda 	#11
.36fa	20 39 23	jsr $2339			jsr 	RSFree
.36fd	60		rts				rts
.36fe					_CNLoopRound:
.36fe	68		pla				pla
.36ff	a8		tay				tay
.3700	a9 01		lda #$01			lda 	#1
.3702	20 56 23	jsr $2356			jsr 	RSLoadPosition				; go back to the loop top
.3705	60		rts				rts
.3706					_CNBadIndex:
.3706	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.3708	20 c7 24	jsr $24c7		jsr	errorHandler
.370b					_CNCheckDownto:
.370b	c9 00		cmp #$00			cmp 	#0
.370d	10 ef		bpl $36fe			bpl 	_CNLoopRound
.370f	4c f6 36	jmp $36f6			jmp 	_CNLoopExit
.3712					_CNCompare:
.3712	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.3714	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3716	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.3718	85 2e		sta $2e				sta 	temp2
.371a	c8		iny				iny
.371b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1085					CommandIf:
.1085	20 f2 1c	jsr $1cf2			jsr 	EvaluateRootInteger 		; get what's being tested.
.1088	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.108a	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.108c	f0 04		beq $1092			beq 	_IfSimple
.108e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1090	d0 1b		bne $10ad			bne 	_IfComplex
.1092					_IfSimple:
.1092	20 7d 22	jsr $227d			jsr 	MInt32Zero					; check if TOS zero
.1095	f0 10		beq $10a7			beq 	_IfEOL 						; go to next line.
.1097	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1099	c8		iny				iny
.109a	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.109c	f0 0c		beq $10aa			beq 	_IfGoto 					; do the Goto code
.109e	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.10a0	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10a2	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10a4	f0 04		beq $10aa			beq 	_IfGoto
.10a6	60		rts				rts 								; else continue on this line.
.10a7					_IfEOL:
.10a7	4c 58 17	jmp $1758			jmp 	AdvanceNextLine 			; go to next line
.10aa					_IfGoto:
.10aa	4c cd 17	jmp $17cd			jmp 	CommandGoto
.10ad					_IfComplex:
.10ad	20 7d 22	jsr $227d			jsr 	MInt32Zero 					; is it true ?
.10b0	f0 01		beq $10b3			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10b2	60		rts				rts 								; else continue.
.10b3					_IFSkip:
.10b3	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10b5	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10b7	4c 07 38	jmp $3807			jmp		ScanForward
.10ba					Command_ELSE:
.10ba	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10bc	8a		txa				txa
.10bd	4c 07 38	jmp $3807			jmp		ScanForward
.10c0					Command_ENDIF:
.10c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0af2					InputBuffer:
>0af2							.fill 	MaxInputSize+1
.10c1					Command_Input:
.10c1	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.10c3	c8		iny				iny
.10c4	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.10c6	f0 f9		beq $10c1			beq 	Command_Input
.10c8	88		dey				dey 							; undo consume
.10c9	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.10cb	f0 54		beq $1121			beq 	_CIExit 				; : or EOL, exit
.10cd	c9 80		cmp #$80			cmp 	#TOK_EOL
.10cf	f0 50		beq $1121			beq 	_CIExit
.10d1	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.10d3	90 12		bcc $10e7			bcc 	_CIVariable
.10d5	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.10d7	d0 43		bne $111c			bne 	_CISyntax
.10d9	a2 00		ldx #$00			ldx 	#0
.10db	20 e9 1c	jsr $1ce9			jsr 	EvaluateString 			; evaluate and print string
.10de	20 e7 11	jsr $11e7			jsr 	TOSToTemp0
.10e1	20 0f 14	jsr $140f			jsr 	PrintString
.10e4	4c c1 10	jmp $10c1			jmp 	Command_Input
.10e7					_CIVariable:
.10e7	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.10e9	20 27 1d	jsr $1d27			jsr 	EvaluateReference
.10ec					_CIRetry:
.10ec	a9 3f		lda #$3f			lda 	#"?"
.10ee	a2 12		ldx #$12		ldx	#18
.10f0	20 aa 24	jsr $24aa		jsr	deviceHandler
.10f3	98		tya				tya
.10f4	48		pha				pha
.10f5	20 35 11	jsr $1135			jsr 	InputString 			; input a string.
.10f8	a2 01		ldx #$01			ldx 	#1
.10fa	20 22 11	jsr $1122			jsr 	BufferToStackX 			; make stack,x ref input string.
.10fd	a5 40		lda $40				lda 	esType 					; if target type numeric
.10ff	29 40		and #$40			and 	#$40 					; then convert to number
.1101	d0 11		bne $1114			bne 	_CIWrite
.1103	a2 01		ldx #$01			ldx 	#1
.1105	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1108	a9 0a		lda #$0a			lda 	#10
.110a	20 c4 20	jsr $20c4			jsr 	MInt32FromString 		; convert it back from a string.
.110d	68		pla				pla
.110e	a8		tay				tay
.110f	b0 03		bcs $1114			bcs 	_CIWrite 				; successfully converted.
.1111	18		clc				clc 							; default fail FP conversion
.1112	90 d8		bcc $10ec			bcc		_CIRetry				; failed, try again.
.1114					_CIWrite:
.1114	a2 00		ldx #$00			ldx 	#0
.1116	20 85 11	jsr $1185			jsr 	WriteValue
.1119	4c c1 10	jmp $10c1			jmp 	Command_Input
.111c					_CISyntax:
.111c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.111e	20 c7 24	jsr $24c7		jsr	errorHandler
.1121					_CIExit:
.1121	60		rts				rts
.1122					BufferToStackX:
.1122	a9 f2		lda #$f2			lda 	#InputBuffer & $FF
.1124	95 48		sta $48,x			sta 	esInt0,x
.1126	a9 0a		lda #$0a			lda 	#InputBuffer >> 8
.1128	95 50		sta $50,x			sta 	esInt1,x
.112a	a9 00		lda #$00			lda 	#0
.112c	95 58		sta $58,x			sta 	esInt2,x
.112e	95 60		sta $60,x			sta 	esInt3,x
.1130	a9 40		lda #$40			lda 	#$40
.1132	95 40		sta $40,x			sta 	esType,x
.1134	60		rts				rts
.1135					InputString:
.1135	a9 00		lda #$00			lda 	#0
.1137	8d f2 0a	sta $0af2			sta 	InputBuffer
.113a					_InputLoop:
.113a	a2 08		ldx #$08		ldx	#8
.113c	20 aa 24	jsr $24aa		jsr	deviceHandler
.113f	c9 00		cmp #$00			cmp 	#0
.1141	f0 f7		beq $113a			beq 	_InputLoop
.1143	c9 08		cmp #$08			cmp 	#8
.1145	f0 19		beq $1160			beq 	_InputBackspace
.1147	c9 0d		cmp #$0d			cmp 	#13
.1149	f0 21		beq $116c			beq 	_InputExit
.114b	ae f2 0a	ldx $0af2			ldx 	InputBuffer
.114e	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1150	f0 e8		beq $113a			beq 	_InputLoop
.1152	9d f3 0a	sta $0af3,x			sta 	InputBuffer+1,x 		; write char
.1155	ee f2 0a	inc $0af2			inc 	InputBuffer 			; advance count.
.1158					_InputPrintLoop:
.1158	a2 12		ldx #$12		ldx	#18
.115a	20 aa 24	jsr $24aa		jsr	deviceHandler
.115d	4c 3a 11	jmp $113a			jmp	 	_InputLoop
.1160					_InputBackspace:
.1160	ad f2 0a	lda $0af2			lda 	InputBuffer 			; at start
.1163	f0 d5		beq $113a			beq 	_InputLoop
.1165	ce f2 0a	dec $0af2			dec 	InputBuffer
.1168	a9 08		lda #$08			lda 	#8
.116a	d0 ec		bne $1158			bne 	_InputPrintLoop
.116c					_InputExit:
.116c	a2 02		ldx #$02		ldx	#2
.116e	20 aa 24	jsr $24aa		jsr	deviceHandler
.1171	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1172					CommandLet:
.1172	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1174	20 27 1d	jsr $1d27			jsr 	EvaluateReference
.1177	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1179	20 be 22	jsr $22be			jsr 	CheckToken
.117c	e8		inx				inx 								; do RHS
.117d	20 d5 1c	jsr $1cd5			jsr 	Evaluate 					; evaluate and dereference
.1180	ca		dex				dex
.1181	20 85 11	jsr $1185			jsr 	WriteValue 					; write it out
.1184	60		rts				rts
.1185					WriteValue:
.1185	98		tya				tya
.1186	48		pha				pha
.1187	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.118a	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.118c	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.118e	29 40		and #$40			and 	#$40
.1190	d0 50		bne $11e2			bne		_WVType
.1192	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1194	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1196	29 40		and #$40			and 	#$40
.1198	d0 1f		bne $11b9			bne 	_WVCopyString
.119a	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.119c	15 41		ora $41,x			ora 	esType+1,x
.119e	4a		lsr a				lsr 	a
.119f	90 22		bcc $11c3			bcc 	_WVCopyData4 				; copy 4 data bytes.
.11a1	b5 40		lda $40,x			lda 	esType,x
.11a3	4a		lsr a				lsr 	a
.11a4	90 3c		bcc $11e2			bcc 	_WVType
.11a6	e8		inx				inx 								; force the value being written to be a float.
.11a7	20 3f 18	jsr $183f			jsr 	BPMakeFloat
.11aa	ca		dex				dex
.11ab	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; set Temp0 to write address
.11ae	e8		inx				inx
.11af	8a		txa				txa
.11b0	a2 20		ldx #$20		ldx	#32
.11b2	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.11b5	aa		tax				tax
.11b6	4c df 11	jmp $11df			jmp 	_WVCopyExit
.11b9					_WVCopyString:
.11b9	8a		txa				txa
.11ba	a2 0c		ldx #$0c		ldx	#12
.11bc	20 61 2c	jsr $2c61		jsr	stringHandler
.11bf	aa		tax				tax
.11c0	4c df 11	jmp $11df			jmp 	_WVCopyExit
.11c3					_WVCopyData4:
.11c3	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.11c5	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.11c7	d0 10		bne $11d9			bne 	_WVCopyData1
.11c9	a0 03		ldy #$03			ldy 	#3
.11cb	b5 61		lda $61,x			lda 	esInt3+1,x
.11cd	91 2a		sta ($2a),y			sta 	(temp0),y
.11cf	88		dey				dey
.11d0	b5 59		lda $59,x			lda 	esInt2+1,x
.11d2	91 2a		sta ($2a),y			sta 	(temp0),y
.11d4	88		dey				dey
.11d5	b5 51		lda $51,x			lda 	esInt1+1,x
.11d7	91 2a		sta ($2a),y			sta 	(temp0),y
.11d9					_WVCopyData1:
.11d9	a0 00		ldy #$00			ldy 	#0
.11db	b5 49		lda $49,x			lda 	esInt0+1,x
.11dd	91 2a		sta ($2a),y			sta 	(temp0),y
.11df					_WVCopyExit:
.11df	68		pla				pla
.11e0	a8		tay				tay
.11e1	60		rts				rts
.11e2					_WVType:
.11e2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.11e4	20 c7 24	jsr $24c7		jsr	errorHandler
.11e7					TOSToTemp0:
.11e7	b5 48		lda $48,x			lda 	esInt0,x
.11e9	85 2a		sta $2a				sta 	temp0
.11eb	b5 50		lda $50,x			lda 	esInt1,x
.11ed	85 2b		sta $2b				sta 	temp0+1
.11ef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.371c					CommandList:
.371c	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1
.371e	20 56 22	jsr $2256			jsr 	MInt32False
.3721	e8		inx				inx
.3722	20 52 22	jsr $2252			jsr 	MInt32True
.3725	b1 28		lda ($28),y			lda 	(codePtr),y
.3727	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; list ,xxxx
.3729	f0 15		beq $3740			beq 	_CLEndLine
.372b	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.372d	30 1b		bmi $374a			bmi 	_CLDoListing
.372f	a2 00		ldx #$00			ldx 	#0 							; get start
.3731	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger
.3734	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows
.3736	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.3738	f0 06		beq $3740			beq 	_CLEndLine
.373a	20 94 21	jsr $2194			jsr 	MInt32CopyUp 				; copy first to second
.373d	4c 4a 37	jmp $374a			jmp 	_CLDoListing
.3740					_CLEndLine:
.3740	c8		iny				iny 								; skip comma
.3741	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows.
.3743	30 05		bmi $374a			bmi 	_CLDoListing
.3745	a2 01		ldx #$01			ldx 	#1
.3747	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger				; get end
.374a					_CLDoListing:
.374a	20 86 15	jsr $1586			jsr 	ResetCodeAddress 			; back to the start.
.374d					_CLCheckLoop:
.374d	a0 00		ldy #$00			ldy 	#0							; check end.
.374f	b1 28		lda ($28),y			lda 	(codePtr),y
.3751	f0 26		beq $3779			beq 	_CLEnd
.3753	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3755	20 7c 37	jsr $377c			jsr 	CLCompareLineTOS
.3758	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.375a	f0 0d		beq $3769			beq 	_CLNext
.375c	e8		inx				inx
.375d	20 7c 37	jsr $377c			jsr 	CLCompareLineTOS 			; compare vs higher
.3760	c9 01		cmp #$01			cmp 	#1
.3762	f0 05		beq $3769			beq 	_CLNext
.3764	a2 02		ldx #$02		ldx	#2
.3766	20 0d 33	jsr $330d		jsr	tokeniserHandler
.3769					_CLNext:
.3769	a0 00		ldy #$00			ldy 	#0
.376b	b1 28		lda ($28),y			lda 	(codePtr),y
.376d	18		clc				clc
.376e	65 28		adc $28				adc 	codePtr
.3770	85 28		sta $28				sta 	codePtr
.3772	90 d9		bcc $374d			bcc 	_CLCheckLoop
.3774	e6 29		inc $29				inc 	codePtr+1
.3776	4c 4d 37	jmp $374d			jmp 	_CLCheckLoop
.3779					_CLEnd:
.3779	4c 04 23	jmp $2304			jmp 	WarmStart
.377c					CLCompareLineTOS:
.377c	a0 01		ldy #$01			ldy 	#1
.377e	b1 28		lda ($28),y			lda 	(codePtr),y
.3780	55 48		eor $48,x			eor 	esInt0,x
.3782	85 2a		sta $2a				sta 	temp0
.3784	c8		iny				iny
.3785	b1 28		lda ($28),y			lda 	(codePtr),y
.3787	55 50		eor $50,x			eor 	esInt1,x
.3789	05 2a		ora $2a				ora 	temp0
.378b	f0 10		beq $379d			beq 	_CLCLTExit
.378d	88		dey				dey
.378e	b1 28		lda ($28),y			lda 	(codePtr),y
.3790	d5 48		cmp $48,x			cmp 	esInt0,x
.3792	c8		iny				iny
.3793	b1 28		lda ($28),y			lda 	(codePtr),y
.3795	f5 50		sbc $50,x			sbc 	esInt1,x
.3797	a9 ff		lda #$ff			lda 	#255
.3799	90 02		bcc $379d			bcc 	_CLCLTExit
.379b	a9 01		lda #$01			lda 	#1
.379d					_CLCLTExit:
.379d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.11f0					CommandLoad:
.11f0	20 18 12	jsr $1218			jsr 	CLSParameters 					; get parameters for load.
.11f3	08		php				php
.11f4	a2 0c		ldx #$0c		ldx	#12
.11f6	20 aa 24	jsr $24aa		jsr	deviceHandler
.11f9	28		plp				plp
.11fa	b0 08		bcs $1204			bcs 	_CLExit 						; if CC then load a program, so warm start.
.11fc	20 18 10	jsr $1018			jsr 	CommandClear
.11ff	a2 02		ldx #$02		ldx	#2
.1201	20 c6 29	jsr $29c6		jsr	interactionHandler
.1204					_CLExit
.1204	60		rts				rts
.1205					CommandSave:
.1205	20 18 12	jsr $1218			jsr 	CLSParameters					; get parameters for save
.1208	90 08		bcc $1212			bcc 	_CSNoOverrideAddress
.120a	20 d6 22	jsr $22d6			jsr 	CheckComma 						; should be a comma.
.120d	a2 02		ldx #$02			ldx 	#2
.120f	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger 				; get save end address.
.1212					_CSNoOverrideAddress:
.1212	a2 14		ldx #$14		ldx	#20
.1214	20 aa 24	jsr $24aa		jsr	deviceHandler
.1217	60		rts				rts
.1218					CLSParameters:
.1218	a2 00		ldx #$00			ldx 	#0 								; string
.121a	20 e9 1c	jsr $1ce9			jsr 	EvaluateString
.121d	e8		inx				inx 									; erase out +1 +2
.121e	20 56 22	jsr $2256			jsr 	MInt32False
.1221	e8		inx				inx
.1222	20 56 22	jsr $2256			jsr 	MInt32False
.1225	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1228	85 49		sta $49				sta 	esInt0+1
.122a	ad c9 0a	lda $0ac9			lda 	basePage+1
.122d	85 51		sta $51				sta 	esInt1+1
.122f	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1232	85 4a		sta $4a				sta 	esInt0+2
.1234	ad cb 0a	lda $0acb			lda 	endProgram+1
.1237	85 52		sta $52				sta 	esInt1+2
.1239	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.123b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.123d	d0 08		bne $1247			bne 	_CLSDefault
.123f	c8		iny				iny 									; skip comma
.1240	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1242	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger
.1245	38		sec				sec
.1246	60		rts				rts
.1247					_CLSDefault:
.1247	18		clc				clc
.1248	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0b13					storeSize:
>0b13							.fill 	1
.1249					CommandLocal:
.1249	a2 00		ldx #$00			ldx 	#0
.124b	20 67 12	jsr $1267			jsr 	LocaliseVariable 			; localise one.
.124e					_CLCheckNext:
.124e	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1250	c8		iny				iny
.1251	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.1253	f0 06		beq $125b			beq 	_CLAssignment
.1255	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1257	f0 f0		beq $1249			beq 	CommandLocal
.1259	88		dey				dey
.125a	60		rts				rts
.125b					_CLAssignment:
.125b	a2 01		ldx #$01			ldx 	#1
.125d	20 d5 1c	jsr $1cd5			jsr 	Evaluate 					; evaluate RHS
.1260	ca		dex				dex
.1261	20 85 11	jsr $1185			jsr 	WriteValue
.1264	4c 4e 12	jmp $124e			jmp 	_CLCheckNext
.1267					LocaliseVariable:
.1267	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1269	c9 40		cmp #$40			cmp 	#$40
.126b	b0 67		bcs $12d4			bcs 	_LVSyntax
.126d	8a		txa				txa 								; get the address of that variable.
.126e	a2 00		ldx #$00		ldx	#0
.1270	20 04 36	jsr $3604		jsr	variableHandler
.1273	aa		tax				tax
.1274	8a		txa				txa
.1275	48		pha				pha
.1276	98		tya				tya
.1277	48		pha				pha
.1278	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.127b	b5 40		lda $40,x			lda 	esType,x 					; get the type
.127d	0a		asl a				asl 	a
.127e	10 16		bpl $1296			bpl 	_LVPushNumber
.1280	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1282	b1 2a		lda ($2a),y			lda 	(temp0),y
.1284	c8		iny				iny
.1285	85 2c		sta $2c				sta 	temp1
.1287	b1 2a		lda ($2a),y			lda 	(temp0),y
.1289	85 2d		sta $2d				sta 	temp1+1
.128b	a0 00		ldy #$00			ldy 	#0 	 						; get length
.128d	b1 2c		lda ($2c),y			lda 	(temp1),y
.128f	aa		tax				tax 								; into X
.1290	e8		inx				inx 								; +1 for length.
.1291	a9 24		lda #$24			lda 	#markerString
.1293	4c ab 12	jmp $12ab			jmp 	_LVWriteFrame
.1296					_LVPushNumber:
.1296	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1298	85 2c		sta $2c				sta 	temp1
.129a	a5 2b		lda $2b				lda 	temp0+1
.129c	85 2d		sta $2d				sta 	temp1+1
.129e	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.12a0	4a		lsr a				lsr 	a
.12a1	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.12a3	a2 04		ldx #$04			ldx 	#VarISize
.12a5	90 04		bcc $12ab			bcc 	_LVIsInteger
.12a7	a9 23		lda #$23			lda 	#markerFloat
.12a9	a2 06		ldx #$06			ldx 	#VarFSize
.12ab					_LVIsInteger:
.12ab					_LVWriteFrame:
.12ab	8e 13 0b	stx $0b13			stx 	storeSize 					; number of bytes to copy from (temp0)
.12ae	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.12af	e8		inx				inx
.12b0	e8		inx				inx
.12b1	20 17 23	jsr $2317			jsr 	RSClaim 					; create the stack frame.
.12b4	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.12b6	a0 01		ldy #$01			ldy 	#1
.12b8	91 78		sta ($78),y			sta 	(rsPointer),y
.12ba	c8		iny				iny
.12bb	a5 2b		lda $2b				lda 	temp0+1
.12bd	91 78		sta ($78),y			sta 	(rsPointer),y
.12bf	a0 00		ldy #$00			ldy 	#0
.12c1					_LVCopyData:
.12c1	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.12c3	c8		iny				iny 								; write allowing for the header bit.
.12c4	c8		iny				iny
.12c5	c8		iny				iny
.12c6	91 78		sta ($78),y			sta 	(rsPointer),y
.12c8	88		dey				dey
.12c9	88		dey				dey
.12ca	ce 13 0b	dec $0b13			dec 	storeSize 					; do it storesize times
.12cd	d0 f2		bne $12c1			bne 	_LVCopyData
.12cf	68		pla				pla
.12d0	a8		tay				tay
.12d1	68		pla				pla
.12d2	aa		tax				tax
.12d3	60		rts				rts
.12d4					_LVSyntax:
.12d4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12d6	20 c7 24	jsr $24c7		jsr	errorHandler
.12d9					RestoreLocals:
.12d9	a2 00		ldx #$00			ldx 	#0
.12db	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.12dd	c9 40		cmp #$40			cmp	 	#64
.12df	90 01		bcc $12e2			bcc 	_RLocal
.12e1	60		rts				rts
.12e2					_RLocal:
.12e2	8a		txa				txa
.12e3	48		pha				pha
.12e4	98		tya				tya
.12e5	48		pha				pha
.12e6	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.12e8	b1 78		lda ($78),y			lda 	(rsPointer),y
.12ea	85 2a		sta $2a				sta 	temp0
.12ec	c8		iny				iny
.12ed	b1 78		lda ($78),y			lda 	(rsPointer),y
.12ef	85 2b		sta $2b				sta 	temp0+1
.12f1	a0 00		ldy #$00			ldy 	#0 							; get type back.
.12f3	b1 78		lda ($78),y			lda 	(rsPointer),y
.12f5	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.12f7	f0 28		beq $1321			beq 	_RString
.12f9	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.12fb	c9 25		cmp #$25			cmp 	#markerInt
.12fd	f0 02		beq $1301			beq 	_RIsInteger
.12ff	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1301					_RIsInteger:
.1301	8a		txa				txa
.1302	48		pha				pha
.1303	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1305					_RCopyBack:
.1305	b1 78		lda ($78),y			lda 	(rsPointer),y
.1307	88		dey				dey
.1308	88		dey				dey
.1309	88		dey				dey
.130a	91 2a		sta ($2a),y			sta 	(temp0),y
.130c	c8		iny				iny
.130d	c8		iny				iny
.130e	c8		iny				iny
.130f	c8		iny				iny
.1310	ca		dex				dex
.1311	d0 f2		bne $1305			bne 	_RCopyBack
.1313	68		pla				pla 								; get size add 3
.1314	18		clc				clc
.1315	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1317					_RRestoreAAndLoop:
.1317	20 39 23	jsr $2339			jsr 	RSFree
.131a	68		pla				pla
.131b	a8		tay				tay
.131c	68		pla				pla
.131d	aa		tax				tax
.131e	4c d9 12	jmp $12d9			jmp 	RestoreLocals 				; go see if there are any more locals.
.1321					_RString:
.1321	a2 00		ldx #$00			ldx 	#0
.1323	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1325	b1 78		lda ($78),y			lda 	(rsPointer),y
.1327	95 48		sta $48,x			sta 	esInt0,x
.1329	c8		iny				iny
.132a	b1 78		lda ($78),y			lda 	(rsPointer),y
.132c	95 50		sta $50,x			sta 	esInt1,x
.132e	18		clc				clc
.132f	a5 78		lda $78				lda 	rsPointer
.1331	69 03		adc #$03			adc 	#3
.1333	95 49		sta $49,x			sta 	esInt0+1,x
.1335	a5 79		lda $79				lda 	rsPointer+1
.1337	69 00		adc #$00			adc 	#0
.1339	95 51		sta $51,x			sta 	esInt1+1,x
.133b	8a		txa				txa
.133c	a2 0c		ldx #$0c		ldx	#12
.133e	20 61 2c	jsr $2c61		jsr	stringHandler
.1341	a0 03		ldy #$03			ldy 	#3 							; get string length
.1343	b1 78		lda ($78),y			lda 	(rsPointer),y
.1345	18		clc				clc
.1346	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1348	4c 17 13	jmp $1317			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.134b					Command_New:
.134b					Command_XNew:
.134b	20 86 15	jsr $1586			jsr 	ResetCodeAddress 			; point to first line
.134e	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1350	98		tya				tya
.1351	91 28		sta ($28),y			sta 	(codePtr),y
.1353	20 18 10	jsr $1018			jsr 	CommandClear 				; clear everything down.
.1356	4c 52 17	jmp $1752			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1359					Command_Poke:
.1359	a9 01		lda #$01			lda 	#1
.135b	d0 06		bne $1363			bne 	PokeGeneral
.135d					Command_Doke:
.135d	a9 02		lda #$02			lda 	#2
.135f	d0 02		bne $1363			bne 	PokeGeneral
.1361					Command_Loke:
.1361	a9 03		lda #$03			lda 	#3
.1363					PokeGeneral:
.1363	48		pha				pha 								; save id (PDL = 123)
.1364	20 f2 1c	jsr $1cf2			jsr 	EvaluateRootInteger 		; target address
.1367	20 d6 22	jsr $22d6			jsr	 	CheckComma
.136a	e8		inx				inx
.136b	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger 			; what value to POKE ?
.136e	ca		dex				dex
.136f	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; temp0 points to the target address
.1372	84 32		sty $32				sty 	tempShort 					; save Y
.1374	68		pla				pla 								; get copy type (1-3) and dispatch
.1375	aa		tax				tax
.1376	ca		dex				dex
.1377	f0 14		beq $138d			beq 	_Poke1
.1379	ca		dex				dex
.137a	f0 0b		beq $1387			beq 	_Poke2
.137c	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.137e	a5 61		lda $61				lda 	esInt3+1
.1380	91 2a		sta ($2a),y			sta 	(temp0),y
.1382	88		dey				dey
.1383	a5 59		lda $59				lda 	esInt2+1
.1385	91 2a		sta ($2a),y			sta 	(temp0),y
.1387					_Poke2:
.1387	a0 01		ldy #$01			ldy 	#1
.1389	a5 51		lda $51				lda 	esInt1+1
.138b	91 2a		sta ($2a),y			sta 	(temp0),y
.138d					_Poke1:
.138d	a0 00		ldy #$00			ldy 	#0
.138f	a5 49		lda $49				lda 	esInt0+1
.1391	91 2a		sta ($2a),y			sta 	(temp0),y
.1393	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1395	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0b14					lastPrintToken:
>0b14							.fill 	1
.1396					Command_Print:
.1396	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1398	8d 14 0b	sta $0b14			sta 	lastPrintToken
.139b	88		dey				dey
.139c					_PrintLoopSkip:
.139c	c8		iny				iny
.139d					_PrintLoop:
.139d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.139f	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.13a1	f0 5b		beq $13fe			beq 	_PrintExit
.13a3	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.13a5	f0 57		beq $13fe			beq 	_PrintExit
.13a7	8d 14 0b	sta $0b14			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.13aa	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.13ac	f0 ee		beq $139c			beq 	_PrintLoopSkip
.13ae	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.13b0	f0 3c		beq $13ee			beq	 	_PrintNewLine
.13b2	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.13b4	f0 40		beq $13f6			beq 	_PrintTab
.13b6	20 d3 1c	jsr $1cd3			jsr 	EvaluateRoot 				; evaluate something at the root
.13b9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.13bb	85 2a		sta $2a				sta 	temp0
.13bd	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.13bf	85 2b		sta $2b				sta 	1+(temp0)
.13c1	a5 40		lda $40				lda 	esType 						; get type
.13c3	f0 15		beq $13da			beq		_PrintInteger
.13c5	4a		lsr a				lsr 	a 							; check for floating point
.13c6	b0 08		bcs $13d0			bcs 	_PrintFloat
.13c8					_PrintString:
.13c8	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.13ca	20 e7 11	jsr $11e7			jsr 	TOSToTemp0
.13cd	4c e8 13	jmp $13e8			jmp 	_PrintTemp0 				; print no leading space.
.13d0					_PrintFloat:
.13d0	a9 00		lda #$00			lda 	#0 							; stack level.
.13d2	a2 14		ldx #$14		ldx	#20
.13d4	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.13d7	4c e1 13	jmp $13e1			jmp 	_PrintSpaceTemp0
.13da					_PrintInteger:
.13da	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.13dc	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.13de	20 ac 21	jsr $21ac			jsr 	MInt32ToString				; convert to text
.13e1					_PrintSpaceTemp0:
.13e1	a9 20		lda #$20			lda 	#32
.13e3	a2 12		ldx #$12		ldx	#18
.13e5	20 aa 24	jsr $24aa		jsr	deviceHandler
.13e8					_PrintTemp0:
.13e8	20 0f 14	jsr $140f			jsr 	PrintString
.13eb	4c 9d 13	jmp $139d			jmp 	_PrintLoop
.13ee					_PrintNewLine:
.13ee	a2 02		ldx #$02		ldx	#2
.13f0	20 aa 24	jsr $24aa		jsr	deviceHandler
.13f3	4c 9c 13	jmp $139c			jmp 	_PrintLoopSkip
.13f6					_PrintTab:
.13f6	a2 16		ldx #$16		ldx	#22
.13f8	20 aa 24	jsr $24aa		jsr	deviceHandler
.13fb	4c 9c 13	jmp $139c			jmp 	_PrintLoopSkip
.13fe					_PrintExit:
.13fe	ad 14 0b	lda $0b14			lda		lastPrintToken 				; check last token
.1401	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1403	f0 09		beq $140e			beq 	_PrintExit2
.1405	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1407	f0 05		beq $140e			beq 	_PrintExit2
.1409	a2 02		ldx #$02		ldx	#2
.140b	20 aa 24	jsr $24aa		jsr	deviceHandler
.140e					_PrintExit2:
.140e	60		rts				rts
.140f					PrintString:
.140f	8a		txa				txa
.1410	48		pha				pha
.1411	98		tya				tya
.1412	48		pha				pha
.1413	a0 00		ldy #$00			ldy 	#0							; get length
.1415	b1 2a		lda ($2a),y			lda 	(temp0),y
.1417	aa		tax				tax 								; into X
.1418	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.141a	f0 10		beq $142c			beq 	_PSExit
.141c	ca		dex				dex
.141d	8a		txa				txa
.141e	48		pha				pha
.141f	c8		iny				iny
.1420	b1 2a		lda ($2a),y			lda 	(temp0),y
.1422	a2 12		ldx #$12		ldx	#18
.1424	20 aa 24	jsr $24aa		jsr	deviceHandler
.1427	68		pla				pla
.1428	aa		tax				tax
.1429	4c 18 14	jmp $1418			jmp 	_PSLoop
.142c					_PSExit:
.142c	68		pla				pla
.142d	a8		tay				tay
.142e	68		pla				pla
.142f	aa		tax				tax
.1430	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0b15					paramCount:
>0b15							.fill 	1
.1431					CallProc:
.1431	20 77 16	jsr $1677			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1434	48		pha				pha 								; save length on stack
.1435	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1437	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1439	48		pha				pha
.143a	a5 2a		lda $2a				lda 	temp0
.143c	48		pha				pha
.143d	98		tya				tya 								; calculate Y + length
.143e	18		clc				clc
.143f	65 32		adc $32				adc 	tempShort
.1441	a8		tay				tay
.1442	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1444					_CallProcEvalParams:
.1444	e8		inx				inx
.1445	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) ?
.1447	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1449	f0 0b		beq $1456			beq 	_CPDoneParams
.144b	20 d5 1c	jsr $1cd5			jsr 	Evaluate 					; evaluate a parameter
.144e	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1450	c8		iny				iny
.1451	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1453	f0 ef		beq $1444			beq 	_CallProcEvalParams
.1455	88		dey				dey 								; undo consumption.
.1456					_CPDoneParams:
.1456	20 c9 22	jsr $22c9			jsr 	CheckRightParen 			; check closing parenthesis.
.1459	8e 15 0b	stx $0b15			stx 	paramCount 					; store parameter count+1
.145c	a2 04		ldx #$04			ldx 	#4							; make space on stack
.145e	a9 50		lda #$50			lda 	#markerPROC
.1460	20 17 23	jsr $2317			jsr 	RSClaim
.1463	a9 01		lda #$01			lda 	#1 							; store return address.
.1465	20 43 23	jsr $2343			jsr 	RSSavePosition
.1468	68		pla				pla 								; get the new code Ptr
.1469	85 28		sta $28				sta 	codePtr
.146b	68		pla				pla
.146c	85 29		sta $29				sta 	codePtr+1
.146e	68		pla				pla 								; length of name + 4 is the param start.
.146f	18		clc				clc
.1470	69 04		adc #$04			adc 	#4
.1472	a8		tay				tay
.1473	a2 ff		ldx #$ff			ldx 	#$FF
.1475					_CPLoadParameters:
.1475	e8		inx				inx 								; point to where the address should be loaded.
.1476	ec 15 0b	cpx $0b15			cpx 	paramCount 					; too many parameters in definition ?
.1479	f0 1e		beq $1499			beq 	_CPParamError
.147b	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.147d	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.147f	f0 0e		beq $148f			beq 	_CPParamComplete 			; done all the parameters
.1481	20 67 12	jsr $1267			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1484	20 85 11	jsr $1185			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1487	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.1489	c8		iny				iny
.148a	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.148c	f0 e7		beq $1475			beq 	_CPLoadParameters
.148e	88		dey				dey 								; no, unconsume and check for )
.148f					_CPParamComplete:
.148f	20 c9 22	jsr $22c9			jsr 	CheckRightParen 			; check )
.1492	e8		inx				inx 								; check right number of parameters
.1493	ec 15 0b	cpx $0b15			cpx 	paramCount
.1496	d0 01		bne $1499			bne 	_CPParamError
.1498	60		rts				rts
.1499					_CPParamError:
.1499	a2 18		ldx #$18			ldx 	#ErrorID_Params
.149b	20 c7 24	jsr $24c7		jsr	errorHandler
.149e					ReturnProc:
.149e	20 d9 12	jsr $12d9			jsr 	RestoreLocals 				; get the locals back.
.14a1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.14a3	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.14a5	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.14a7	f0 05		beq $14ae			beq 	_isok
.14a9	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.14ab	20 c7 24	jsr $24c7		jsr	errorHandler
.14ae					_isok:
.14ae	a9 01		lda #$01			lda 	#1
.14b0	20 56 23	jsr $2356			jsr 	RSLoadPosition 				; reload the position from offset 1.
.14b3	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.14b5	20 39 23	jsr $2339			jsr 	RSFree
.14b8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0b16					dataPtr:
>0b16							.fill 	2
.0b18					dataIndex:
>0b18							.fill 	1
.14b9					CommandRead:
.14b9	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.14bb	20 27 1d	jsr $1d27			jsr 	EvaluateReference
.14be	20 ff 14	jsr $14ff			jsr 	SwapDPCP 					; use the data pointer.
.14c1	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.14c3	c8		iny				iny
.14c4	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.14c6	f0 07		beq $14cf			beq 	_CRInData
.14c8	88		dey				dey
.14c9	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.14cb	aa		tax				tax
.14cc	20 07 38	jsr $3807			jsr 	ScanForward
.14cf					_CRInData:
.14cf	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.14d1	20 d5 1c	jsr $1cd5			jsr 	Evaluate
.14d4	ca		dex				dex 								; and write the value.
.14d5	20 85 11	jsr $1185			jsr 	WriteValue
.14d8	20 ff 14	jsr $14ff			jsr 	SwapDPCP 					; get the code pointer back.
.14db	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.14dd	c8		iny				iny
.14de	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.14e0	f0 d7		beq $14b9			beq 	CommandRead
.14e2	88		dey				dey
.14e3	60		rts				rts
.14e4					CommandData:
.14e4	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.14e6	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.14e8	20 07 38	jsr $3807			jsr 	ScanForward
.14eb	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.14ec	60		rts				rts
.14ed					CommandRestore:
.14ed	ad c8 0a	lda $0ac8			lda 	basePage
.14f0	8d 16 0b	sta $0b16			sta 	dataPtr
.14f3	ad c9 0a	lda $0ac9			lda 	basePage+1
.14f6	8d 17 0b	sta $0b17			sta 	dataPtr+1
.14f9	a9 03		lda #$03			lda 	#3
.14fb	8d 18 0b	sta $0b18			sta 	dataIndex
.14fe	60		rts				rts
.14ff					SwapDPCP:
.14ff	8a		txa				txa
.1500	48		pha				pha
.1501	98		tya				tya 								; swap Y, DataIndex
.1502	ac 18 0b	ldy $0b18			ldy 	DataIndex
.1505	8d 18 0b	sta $0b18			sta 	DataIndex
.1508	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.150a	ae 16 0b	ldx $0b16			ldx 	dataptr
.150d	8d 16 0b	sta $0b16			sta 	dataPtr
.1510	86 28		stx $28				stx 	codePtr
.1512	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1514	ae 17 0b	ldx $0b17			ldx 	dataptr+1
.1517	8d 17 0b	sta $0b17			sta 	dataPtr+1
.151a	86 29		stx $29				stx 	codePtr+1
.151c	68		pla				pla
.151d	aa		tax				tax
.151e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.151f					Command_Rem:
.151f					Command_Rem2:
.151f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1521	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1523	d0 06		bne $152b			bne 	_CRNotString
.1525	c8		iny				iny
.1526	98		tya				tya
.1527	38		sec				sec
.1528	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.152a	a8		tay				tay
.152b					_CRNotString:
.152b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.379e					Command_Repeat:
.379e	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.37a0	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.37a2	20 17 23	jsr $2317			jsr 	RSClaim
.37a5	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.37a7	20 43 23	jsr $2343			jsr 	RSSavePosition
.37aa	60		rts				rts
.37ab					Command_Until:
.37ab	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.37ad	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.37af	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.37b1	f0 05		beq $37b8			beq 	_isok
.37b3	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.37b5	20 c7 24	jsr $24c7		jsr	errorHandler
.37b8					_isok:
.37b8	20 f2 1c	jsr $1cf2			jsr 	EvaluateRootInteger 		; at the bottom.
.37bb	20 7d 22	jsr $227d			jsr 	MInt32Zero					; check if TOS zero
.37be	d0 06		bne $37c6			bne 	_CUExit
.37c0	a9 01		lda #$01			lda 	#1
.37c2	20 56 23	jsr $2356			jsr 	RSLoadPosition 				; reload the position from offset 1.
.37c5	60		rts				rts
.37c6					_CUExit:
.37c6	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.37c8	20 39 23	jsr $2339			jsr 	RSFree
.37cb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.152c					Command_Run:
.152c	a2 ff		ldx #$ff			ldx 	#$FF
.152e	9a		txs				txs
.152f	20 18 10	jsr $1018			jsr 	CommandClear 				; clear everything.
.1532	20 86 15	jsr $1586			jsr 	ResetCodeAddress 			; back to the start.
.1535					Command_RunFrom:
.1535	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1537					CRNextInstruction:
.1537	64 7b		stz $7b				stz 	softMemAlloc+1
.1539	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.153b	10 1c		bpl $1559			bpl 	_CRNotToken
.153d	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.153f	b0 0c		bcs $154d			bcs 	_CRExecute
.1541	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1543	b0 4e		bcs $1593			bcs 	Unimplemented
.1545	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1547	b0 04		bcs $154d			bcs 	_CRExecute
.1549	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.154b	b0 16		bcs $1563			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.154d					_CRExecute:
.154d	c8		iny				iny 								; consume it.
.154e	0a		asl a				asl 	a 							; double it, losing most significant bit.
.154f	aa		tax				tax
.1550	20 56 15	jsr $1556			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1553	4c 37 15	jmp $1537			jmp 	CRNextInstruction
.1556					_CRRunRoutine:
.1556	7c 9d 15	jmp ($159d,x)			jmp 	(Group0Vectors,x)
.1559					_CRNotToken:
.1559	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.155b	b0 36		bcs $1593			bcs 	Unimplemented
.155d					_CRDefaultLet:
.155d	20 72 11	jsr $1172			jsr 	CommandLet 					; do the default, LET
.1560	4c 37 15	jmp $1537			jmp 	CRNextInstruction
.1563					_CRCheckIndirect:
.1563	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1565	f0 f6		beq $155d			beq 	_CRDefaultLet
.1567	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1569	f0 f2		beq $155d			beq 	_CRDefaultLet
.156b	d0 26		bne $1593			bne 	Unimplemented
.156d					CommandShift1:
.156d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.156f	10 22		bpl $1593			bpl 	Unimplemented 				; we have an error as this should not happen.
.1571	0a		asl a				asl 	a 							; double into X
.1572	aa		tax				tax
.1573	c8		iny				iny 								; advance over it.
.1574	20 7a 15	jsr $157a			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1577	4c 37 15	jmp $1537			jmp 	CRNextInstruction
.157a					_RunIt:
.157a	7c 55 16	jmp ($1655,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.157d					CommandShift2:
.157d	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.157f	20 6e 27	jsr $276e		jsr	extensionHandler
.1582	4c 37 15	jmp $1537			jmp 	CRNextInstruction
.1585					CommandColon:
.1585	60		rts				rts
.1586					ResetCodeAddress:
.1586	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1589	85 28		sta $28				sta 	codePtr
.158b	ad c9 0a	lda $0ac9			lda 	basePage+1
.158e	85 29		sta $29				sta 	codePtr+1
.1590	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1592	60		rts				rts
.1593					Unimplemented:
.1593	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1595	20 c7 24	jsr $24c7		jsr	errorHandler
.1598					TKErr01:
.1598					TKErr02:
.1598					TKErr03:
.1598					TKErr04:
.1598					TKErr05:
.1598					TKErr06:
.1598					TKErr07:
.1598					TKErr08:
.1598					TKErr09:
.1598					TKErr10:
.1598	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.159a	20 c7 24	jsr $24c7		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.159d					Group0Vectors:
>159d	58 17					.word	AdvanceNextLine          ; $80 [[eol]]
>159f	6d 15					.word	CommandShift1            ; $81 [[sh1]]
>15a1	7d 15					.word	CommandShift2            ; $82 [[sh2]]
>15a3	98 15					.word	TKErr09                  ; $83 [[sh3]]
>15a5	98 15					.word	TKErr10                  ; $84 [[fpc]]
>15a7	98 15					.word	TKErr08                  ; $85 [[str]]
>15a9	e1 18					.word	AndHandler               ; $86 and
>15ab	ce 18					.word	OrHandler                ; $87 or
>15ad	bb 18					.word	XorHandler               ; $88 xor
>15af	03 1a					.word	CompareGreaterEq         ; $89 >=
>15b1	0d 1a					.word	CompareLessEq            ; $8a <=
>15b3	ef 19					.word	CompareGreater           ; $8b >
>15b5	e5 19					.word	CompareLess              ; $8c <
>15b7	db 19					.word	CompareEquals            ; $8d =
>15b9	f9 19					.word	CompareNotEquals         ; $8e <>
>15bb	4c 18					.word	AddHandler               ; $8f +
>15bd	6f 18					.word	SubHandler               ; $90 -
>15bf	07 19					.word	ShrHandler               ; $91 >>
>15c1	f4 18					.word	ShlHandler               ; $92 <<
>15c3	82 18					.word	MulHandler               ; $93 *
>15c5	95 18					.word	DivHandler               ; $94 /
>15c7	a8 18					.word	ModHandler               ; $95 mod
>15c9	40 19					.word	PowerHandler             ; $96 ^
>15cb	1a 19					.word	WordRefHandler           ; $97 !
>15cd	2d 19					.word	ByteRefHandler           ; $98 ?
>15cf	9e 37					.word	Command_Repeat           ; $99 repeat
>15d1	cc 37					.word	Command_While            ; $9a while
>15d3	0d 36					.word	Command_FOR              ; $9b for
>15d5	85 10					.word	CommandIf                ; $9c if
>15d7	98 15					.word	TKErr04                  ; $9d defproc
>15d9	ab 37					.word	Command_Until            ; $9e until
>15db	ef 37					.word	Command_Wend             ; $9f wend
>15dd	6e 36					.word	Command_NEXT             ; $a0 next
>15df	98 15					.word	TKErr06                  ; $a1 then
>15e1	c0 10					.word	Command_ENDIF            ; $a2 endif
>15e3	9e 14					.word	ReturnProc               ; $a3 endproc
>15e5	dc 1b					.word	UnaryParenthesis         ; $a4 (
>15e7	3a 1d					.word	UnaryLen                 ; $a5 len(
>15e9	7e 1d					.word	UnarySgn                 ; $a6 sgn(
>15eb	67 1d					.word	UnaryAbs                 ; $a7 abs(
>15ed	d7 1d					.word	Unary_Random             ; $a8 random(
>15ef	21 1e					.word	Unary_Page               ; $a9 page
>15f1	52 22					.word	MInt32True               ; $aa true
>15f3	56 22					.word	MInt32False              ; $ab false
>15f5	ec 1d					.word	Unary_Min                ; $ac min(
>15f7	f0 1d					.word	Unary_Max                ; $ad max(
>15f9	db 1e					.word	UnarySys                 ; $ae sys(
>15fb	9e 1e					.word	UnaryTimer               ; $af timer(
>15fd	31 1c					.word	EventFunction            ; $b0 event(
>15ff	c7 1e					.word	UnaryGet                 ; $b1 get(
>1601	b7 1e					.word	UnaryInkey               ; $b2 inkey(
>1603	72 1e					.word	UnaryAlloc               ; $b3 alloc(
>1605	03 1f					.word	ExecChr                  ; $b4 chr$(
>1607	33 1f					.word	ExecLeft                 ; $b5 left$(
>1609	50 1f					.word	ExecMid                  ; $b6 mid$(
>160b	78 1f					.word	ExecRight                ; $b7 right$(
>160d	1d 1a					.word	Event_Str                ; $b8 str$(
>160f	4c 1a					.word	UnaryVal                 ; $b9 val(
>1611	95 1d					.word	UnaryPeek                ; $ba peek(
>1613	9b 1d					.word	UnaryDeek                ; $bb deek(
>1615	a1 1d					.word	UnaryLeek                ; $bc leek(
>1617	58 1d					.word	UnaryAsc                 ; $bd asc(
>1619	4c 1e					.word	UnaryIntToFloat          ; $be int(
>161b	5f 1e					.word	UnaryFloatToInt          ; $bf float(
>161d	4f 1a					.word	UnaryIsVal               ; $c0 isval(
>161f	1a 1f					.word	ExecUpper                ; $c1 upper$(
>1621	17 1f					.word	ExecLower                ; $c2 lower$(
>1623	2f 1e					.word	UnaryReference           ; $c3 @
>1625	45 1e					.word	UnaryComplement          ; $c4 ~
>1627	42 1e					.word	UnaryHexMarker           ; $c5 &
>1629	98 15					.word	TKErr01                  ; $c6 )
>162b	85 15					.word	CommandColon             ; $c7 :
>162d	98 15					.word	TKErr02                  ; $c8 ,
>162f	98 15					.word	TKErr03                  ; $c9 ;
>1631	1f 15					.word	Command_Rem2             ; $ca '
>1633	98 15					.word	TKErr07                  ; $cb to
>1635	98 15					.word	TKErr05                  ; $cc step
>1637	31 14					.word	CallProc                 ; $cd proc
>1639	49 12					.word	CommandLocal             ; $ce local
>163b	77 10					.word	Command_Dim              ; $cf dim
>163d	1f 15					.word	Command_Rem              ; $d0 rem
>163f	72 11					.word	CommandLet               ; $d1 let
>1641	c1 10					.word	Command_Input            ; $d2 input
>1643	ba 10					.word	Command_ELSE             ; $d3 else
>1645	ff 17					.word	Command_VDU              ; $d4 vdu
>1647	96 13					.word	Command_Print            ; $d5 print
>1649	cd 17					.word	CommandGOTO              ; $d6 goto
>164b	a2 17					.word	CommandGOSUB             ; $d7 gosub
>164d	b5 17					.word	CommandRETURN            ; $d8 return
>164f	e4 14					.word	CommandData              ; $d9 data
>1651	0a 10					.word	Command_Assert           ; $da assert
>1653	59 13					.word	Command_Poke             ; $db poke
>1655	5d 13					.word	Command_Doke             ; $dc doke
>1657	61 13					.word	Command_Loke             ; $dd loke
>1659	72 17					.word	Command_Ink              ; $de ink
>165b	7d 17					.word	Command_Paper            ; $df paper
>165d	6c 17					.word	Command_CLS              ; $e0 cls
>165f	88 17					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1661					Group1Vectors:
>1661	18 10					.word	CommandClear             ; $86 clear
>1663	f0 11					.word	CommandLoad              ; $87 load
>1665	05 12					.word	CommandSave              ; $88 save
>1667	1c 37					.word	CommandList              ; $89 list
>1669	4b 13					.word	Command_New              ; $8a new
>166b	2c 15					.word	Command_Run              ; $8b run
>166d	b9 14					.word	CommandRead              ; $8c read
>166f	ed 14					.word	CommandRestore           ; $8d restore
>1671	52 17					.word	CommandEnd               ; $8e end
>1673	4d 17					.word	CommandStop              ; $8f stop
>1675	55 17					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0b19					procList:
>0b19							.fill 	2		 					; terminated by name high.
.0b1b					yInLine:
>0b1b							.fill 	1
.1677					FindProcedure:
.1677	8c 1b 0b	sty $0b1b			sty 	yInLine
.167a	20 35 17	jsr $1735			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.167d	85 2c		sta $2c				sta 	temp1
.167f	ad 19 0b	lda $0b19			lda		procList 					; put procList address in temp2
.1682	85 2e		sta $2e				sta 	temp2
.1684	ad 1a 0b	lda $0b1a			lda 	procList+1
.1687	85 2f		sta $2f				sta 	temp2+1
.1689	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.168b					_FPLoop:
.168b	b1 2e		lda ($2e),y			lda 	(temp2),y
.168d	f0 4f		beq $16de			beq 	_FPError 					; if so, we don't know this procedure.
.168f	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1691	c8		iny				iny
.1692	b1 2e		lda ($2e),y			lda 	(temp2),y
.1694	85 2a		sta $2a				sta 	temp0
.1696	c8		iny				iny
.1697	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.1699	c5 2c		cmp $2c				cmp 	temp1
.169b	d0 2b		bne $16c8			bne 	_FPNext 					; hash is different, go to next.
.169d	38		sec				sec
.169e	ad 1b 0b	lda $0b1b			lda 	yInLine 					; position in line must be at least 4
.16a1	e9 04		sbc #$04			sbc 	#4
.16a3	18		clc				clc
.16a4	65 28		adc $28				adc 	codePtr
.16a6	85 30		sta $30				sta 	temp3
.16a8	a5 29		lda $29				lda 	codePtr+1
.16aa	69 00		adc #$00			adc 	#0
.16ac	85 31		sta $31				sta 	temp3+1
.16ae	98		tya				tya
.16af	48		pha				pha
.16b0	a0 04		ldy #$04			ldy 	#4
.16b2					_FPCName:
.16b2	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.16b4	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.16b6	d0 0e		bne $16c6			bne 	_FPpulYNext 				; if different go to next one.
.16b8	c8		iny				iny
.16b9	c9 3a		cmp #$3a			cmp 	#$3A
.16bb	90 f5		bcc $16b2			bcc 	_FPCName 					; compare the whole lot....
.16bd	68		pla				pla 								; throw away the saved Y
.16be	98		tya				tya 								; length of name is Y-4
.16bf	38		sec				sec
.16c0	e9 04		sbc #$04			sbc 	#4
.16c2	ac 1b 0b	ldy $0b1b			ldy 	yInLine  					; get the original Y back
.16c5	60		rts				rts
.16c6					_FPpulYNext:
.16c6	68		pla				pla
.16c7	a8		tay				tay
.16c8					_FPNext:
.16c8	c8		iny				iny 								; next procedure record.
.16c9	10 c0		bpl $168b			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.16cb	98		tya				tya 								; subtract 128 from Y
.16cc	38		sec				sec
.16cd	e9 80		sbc #$80			sbc 	#128
.16cf	a8		tay				tay
.16d0	18		clc				clc 								; add 128 to temp2, so we can have more than
.16d1	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.16d3	69 80		adc #$80			adc 	#128
.16d5	85 2e		sta $2e				sta 	temp2
.16d7	90 b2		bcc $168b			bcc 	_FPLoop
.16d9	e6 2f		inc $2f				inc 	temp2+1
.16db	4c 8b 16	jmp $168b			jmp 	_FPLoop
.16de					_FPError:
.16de	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.16e0	20 c7 24	jsr $24c7		jsr	errorHandler
.16e3					ScanProc:
.16e3	98		tya				tya
.16e4	48		pha				pha
.16e5	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.16e7	8d 19 0b	sta $0b19			sta 	procList
.16ea	a5 36		lda $36				lda 	lowMemory+1
.16ec	8d 1a 0b	sta $0b1a			sta 	procList+1
.16ef	20 86 15	jsr $1586			jsr 	ResetCodeAddress 			; back to the start.
.16f2					_ScanLoop:
.16f2	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.16f4	b1 28		lda ($28),y			lda 	(codePtr),y
.16f6	f0 2a		beq $1722			beq 	_ScanExit
.16f8	a0 03		ldy #$03			ldy 	#3							; get first token
.16fa	b1 28		lda ($28),y			lda 	(codePtr),y
.16fc	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.16fe	d0 12		bne $1712			bne 	_ScanNext
.1700	a5 29		lda $29				lda 	codePtr+1 					; write high and low
.1702	20 2a 17	jsr $172a			jsr 	_ScanWrite
.1705	a5 28		lda $28				lda 	codePtr
.1707	20 2a 17	jsr $172a			jsr 	_ScanWrite
.170a	a0 04		ldy #$04			ldy 	#4 							; start of name part
.170c	20 35 17	jsr $1735			jsr 	CalculateProcedureHash 		; calculate procedure hash
.170f	20 2a 17	jsr $172a			jsr 	_ScanWrite
.1712					_ScanNext:
.1712	18		clc				clc
.1713	a0 00		ldy #$00			ldy 	#0
.1715	b1 28		lda ($28),y			lda 	(codePtr),y
.1717	65 28		adc $28				adc 	codePtr
.1719	85 28		sta $28				sta 	codePtr
.171b	90 d5		bcc $16f2			bcc 	_ScanLoop
.171d	e6 29		inc $29				inc 	codePtr+1
.171f	4c f2 16	jmp $16f2			jmp 	_ScanLoop
.1722					_ScanExit:
.1722	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1724	20 2a 17	jsr $172a			jsr 	_ScanWrite
.1727	68		pla				pla
.1728	a8		tay				tay
.1729	60		rts				rts
.172a					_ScanWrite:
.172a	a0 00		ldy #$00			ldy 	#0
.172c	91 35		sta ($35),y			sta 	(lowMemory),y
.172e	e6 35		inc $35				inc 	lowMemory
.1730	d0 02		bne $1734			bne 	_SWNoCarry
.1732	e6 36		inc $36				inc 	lowMemory+1
.1734					_SWNoCarry:
.1734	60		rts				rts
.1735					CalculateProcedureHash:
.1735	a9 00		lda #$00			lda 	#0 							; clear hash.
.1737	85 2a		sta $2a				sta 	temp0
.1739					_CPHLoop:
.1739	18		clc				clc 								; add character and rotate and add carry back in
.173a	b1 28		lda ($28),y			lda 	(codePtr),y
.173c	65 2a		adc $2a				adc 	temp0
.173e	6a		ror a				ror 	a
.173f	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1741	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.1743	b1 28		lda ($28),y			lda 	(codePtr),y
.1745	c8		iny				iny 								; advance incase we go round again.
.1746	c9 3a		cmp #$3a			cmp 	#$3A
.1748	90 ef		bcc $1739			bcc 	_CPHLoop
.174a	a5 2a		lda $2a				lda 	temp0
.174c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.174d					CommandStop:
.174d	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.174f	20 c7 24	jsr $24c7		jsr	errorHandler
.1752					CommandEnd:
.1752	4c 04 23	jmp $2304			jmp 	WarmStart
.1755					CommandXemu:
.1755	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1758					AdvanceNextLine:
.1758	a0 00		ldy #$00			ldy 	#0 							; get offset
.175a	b1 28		lda ($28),y			lda 	(codePtr),y
.175c	18		clc				clc 								; add to codePtr
.175d	65 28		adc $28				adc 	codePtr
.175f	85 28		sta $28				sta 	codePtr
.1761	90 02		bcc $1765			bcc 	_ANLNoCarry
.1763	e6 29		inc $29				inc 	codePtr+1
.1765					_ANLNoCarry:
.1765	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1767	f0 e9		beq $1752			beq 	CommandEnd 					; execute END
.1769	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.176b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.176c					Command_CLS:
.176c	a2 00		ldx #$00		ldx	#0
.176e	20 aa 24	jsr $24aa		jsr	deviceHandler
.1771	60		rts				rts
.1772					Command_Ink:
.1772	a2 00		ldx #$00			ldx 	#0
.1774	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger
.1777	a2 06		ldx #$06		ldx	#6
.1779	20 aa 24	jsr $24aa		jsr	deviceHandler
.177c	60		rts				rts
.177d					Command_Paper:
.177d	a2 00		ldx #$00			ldx 	#0
.177f	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger
.1782	a2 10		ldx #$10		ldx	#16
.1784	20 aa 24	jsr $24aa		jsr	deviceHandler
.1787	60		rts				rts
.1788					Command_Locate:
.1788	a2 00		ldx #$00			ldx 	#0
.178a	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger
.178d	20 d6 22	jsr $22d6			jsr 	CheckComma
.1790	e8		inx				inx
.1791	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger
.1794	98		tya				tya
.1795	48		pha				pha
.1796	a4 49		ldy $49				ldy 	esInt0+1
.1798	a5 48		lda $48				lda 	esInt0
.179a	a2 0e		ldx #$0e		ldx	#14
.179c	20 aa 24	jsr $24aa		jsr	deviceHandler
.179f	68		pla				pla
.17a0	a8		tay				tay
.17a1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.17a2					CommandGOSUB:
.17a2	20 f2 1c	jsr $1cf2			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.17a5	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.17a7	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.17a9	20 17 23	jsr $2317			jsr 	RSClaim
.17ac	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.17ae	20 43 23	jsr $2343			jsr 	RSSavePosition
.17b1	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.17b3	f0 1b		beq $17d0			beq 	GotoTOS 					; and do a GOTO there.
.17b5					CommandRETURN:
.17b5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.17b7	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.17b9	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.17bb	f0 05		beq $17c2			beq 	_isok
.17bd	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.17bf	20 c7 24	jsr $24c7		jsr	errorHandler
.17c2					_isok:
.17c2	a9 01		lda #$01			lda 	#1
.17c4	20 56 23	jsr $2356			jsr 	RSLoadPosition 				; reload the position from offset 1.
.17c7	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.17c9	20 39 23	jsr $2339			jsr 	RSFree
.17cc	60		rts				rts
.17cd					CommandGOTO:
.17cd	20 f2 1c	jsr $1cf2			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.17d0					GotoTOS:
.17d0	20 86 15	jsr $1586			jsr 	ResetCodeAddress 			; simple search.
.17d3					_GotoSearch:
.17d3	a0 00		ldy #$00			ldy 	#0 							; get offset
.17d5	b1 28		lda ($28),y			lda 	(codePtr),y
.17d7	f0 21		beq $17fa			beq 	_GotoError 					; not found.
.17d9	c8		iny				iny									; check LSB match
.17da	b1 28		lda ($28),y			lda 	(codePtr),y
.17dc	d5 48		cmp $48,x			cmp 	esInt0,x
.17de	d0 07		bne $17e7			bne 	_GotoNext
.17e0	c8		iny				iny
.17e1	b1 28		lda ($28),y			lda 	(codePtr),y
.17e3	d5 50		cmp $50,x			cmp 	esInt1,x
.17e5	f0 10		beq $17f7			beq 	_GotoFound
.17e7					_GotoNext:
.17e7	a0 00		ldy #$00			ldy 	#0 							; go next line
.17e9	b1 28		lda ($28),y			lda 	(codePtr),y
.17eb	18		clc				clc
.17ec	65 28		adc $28				adc 	codePtr
.17ee	85 28		sta $28				sta 	codePtr
.17f0	90 e1		bcc $17d3			bcc 	_GotoSearch
.17f2	e6 29		inc $29				inc 	codePtr+1
.17f4	4c d3 17	jmp $17d3			jmp 	_GotoSearch
.17f7					_GotoFound:
.17f7	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.17f9	60		rts				rts
.17fa					_GotoError:
.17fa	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.17fc	20 c7 24	jsr $24c7		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.17ff					Command_VDU:
.17ff	20 f2 1c	jsr $1cf2			jsr 	EvaluateRootInteger 			; get integer at root.
.1802	a5 48		lda $48				lda 	esInt0
.1804	a2 12		ldx #$12		ldx	#18
.1806	20 aa 24	jsr $24aa		jsr	deviceHandler
.1809					_CVNext:
.1809	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.180b	c8		iny				iny
.180c	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.180e	f0 ef		beq $17ff			beq 	Command_VDU
.1810	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1812	d0 0a		bne $181e			bne 	_CVExit
.1814	a5 50		lda $50				lda 	esInt1
.1816	a2 12		ldx #$12		ldx	#18
.1818	20 aa 24	jsr $24aa		jsr	deviceHandler
.181b	4c 09 18	jmp $1809			jmp 	_CVNext
.181e	88		dey		_CVExit:dey
.181f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.37cc					Command_While:
.37cc	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.37ce	a2 04		ldx #$04			ldx 	#4
.37d0	20 17 23	jsr $2317			jsr 	RSClaim 					; create on stack.
.37d3	88		dey				dey
.37d4	a9 01		lda #$01			lda 	#1
.37d6	20 43 23	jsr $2343			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.37d9	c8		iny				iny
.37da	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger				; get the conditional
.37dd	20 7d 22	jsr $227d			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.37e0	f0 01		beq $37e3			beq 	_CWFail
.37e2	60		rts				rts
.37e3					_CWFail:
.37e3	a9 04		lda #$04			lda 	#4
.37e5	20 39 23	jsr $2339			jsr 	RSFree 						; close the just opened position.
.37e8	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.37ea	aa		tax				tax
.37eb	20 07 38	jsr $3807			jsr 	ScanForward
.37ee	60		rts				rts
.37ef					Command_Wend:
.37ef	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.37f1	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.37f3	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.37f5	f0 05		beq $37fc			beq 	_isok
.37f7	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.37f9	20 c7 24	jsr $24c7		jsr	errorHandler
.37fc					_isok:
.37fc	a9 01		lda #$01			lda 	#1
.37fe	20 56 23	jsr $2356			jsr 	RSLoadPosition				; go back until true
.3801	a9 04		lda #$04			lda 	#4
.3803	20 39 23	jsr $2339			jsr 	RSFree 						; close the loop
.3806	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1820					BinaryProcess:
.1820	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1822	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.1824	0a		asl a				asl 	a
.1825	30 0e		bmi $1835			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.1827	18		clc				clc 								; return CC for integer
.1828	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.182a	f0 08		beq $1834			beq 	_BPExit 					; if both integer then return with CC.
.182c	20 3a 18	jsr $183a			jsr 	BPMakeBothFloat 			; make both float
.182f	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1831	95 40		sta $40,x			sta 	esType,x
.1833	38		sec				sec 								; and return with carry set.
.1834					_BPExit:
.1834	60		rts				rts
.1835					_BPStringType:
.1835	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1837	20 c7 24	jsr $24c7		jsr	errorHandler
.183a					BPMakeBothFloat:
.183a	e8		inx				inx
.183b	20 3f 18	jsr $183f			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.183e	ca		dex				dex
.183f					BPMakeFloat:
.183f	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.1841	4a		lsr a				lsr 	a
.1842	b0 07		bcs $184b			bcs 	_BPIsFloat 					; already a float if set.
.1844	8a		txa				txa
.1845	a2 1a		ldx #$1a		ldx	#26
.1847	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.184a	aa		tax				tax
.184b					_BPIsFloat:
.184b	60		rts				rts
.184c					AddHandler:
.184c	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo 				; dereference top two on stack.
.184f	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1851	35 41		and $41,x			and 	esType+1,x
.1853	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.1855	d0 10		bne $1867			bne 	_AHStringConcat				; concatenate strings.
.1857	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.185a	b0 03		bcs $185f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.185c	4c 3a 21	jmp $213a			jmp 	MInt32Add 							; else do it as integer.
.185f					_IsFPOperation:
.185f	8a		txa				txa 								; call the relevant fp routine
.1860	a2 02		ldx #$02		ldx	#2
.1862	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1865	aa		tax				tax
.1866	60		rts				rts
.1867					_AHStringConcat:
.1867	8a		txa				txa 								; handled by the string module.
.1868	a2 04		ldx #$04		ldx	#4
.186a	20 61 2c	jsr $2c61		jsr	stringHandler
.186d	aa		tax				tax
.186e	60		rts				rts
.186f					SubHandler:
.186f	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.1872	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.1875	b0 03		bcs $187a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1877	4c 54 21	jmp $2154			jmp 	MInt32Sub 							; else do it as integer.
.187a					_IsFPOperation:
.187a	8a		txa				txa 								; call the relevant fp routine
.187b	a2 10		ldx #$10		ldx	#16
.187d	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1880	aa		tax				tax
.1881	60		rts				rts
.1882					MulHandler:
.1882	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.1885	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.1888	b0 03		bcs $188d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.188a	4c 6e 21	jmp $216e			jmp 	MInt32Multiply 							; else do it as integer.
.188d					_IsFPOperation:
.188d	8a		txa				txa 								; call the relevant fp routine
.188e	a2 0a		ldx #$0a		ldx	#10
.1890	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1893	aa		tax				tax
.1894	60		rts				rts
.1895					DivHandler:
.1895	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.1898	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.189b	b0 03		bcs $18a0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.189d	4c 2b 20	jmp $202b			jmp 	MInt32SDivide 							; else do it as integer.
.18a0					_IsFPOperation:
.18a0	8a		txa				txa 								; call the relevant fp routine
.18a1	a2 06		ldx #$06		ldx	#6
.18a3	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.18a6	aa		tax				tax
.18a7	60		rts				rts
.18a8					ModHandler:
.18a8	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.18ab	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.18ae	b0 03		bcs $18b3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18b0	4c a9 20	jmp $20a9			jmp 	MInt32Modulus 							; else do it as integer.
.18b3					_IsFPOperation:
.18b3	8a		txa				txa 								; call the relevant fp routine
.18b4	a2 08		ldx #$08		ldx	#8
.18b6	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.18b9	aa		tax				tax
.18ba	60		rts				rts
.18bb					XorHandler:
.18bb	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.18be	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.18c1	b0 03		bcs $18c6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18c3	4c dd 1f	jmp $1fdd			jmp 	MInt32Xor 							; else do it as integer.
.18c6					_IsFPOperation:
.18c6	8a		txa				txa 								; call the relevant fp routine
.18c7	a2 08		ldx #$08		ldx	#8
.18c9	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.18cc	aa		tax				tax
.18cd	60		rts				rts
.18ce					OrHandler:
.18ce	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.18d1	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.18d4	b0 03		bcs $18d9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18d6	4c c4 1f	jmp $1fc4			jmp 	MInt32Or 							; else do it as integer.
.18d9					_IsFPOperation:
.18d9	8a		txa				txa 								; call the relevant fp routine
.18da	a2 08		ldx #$08		ldx	#8
.18dc	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.18df	aa		tax				tax
.18e0	60		rts				rts
.18e1					AndHandler:
.18e1	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.18e4	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.18e7	b0 03		bcs $18ec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18e9	4c ab 1f	jmp $1fab			jmp 	MInt32And 							; else do it as integer.
.18ec					_IsFPOperation:
.18ec	8a		txa				txa 								; call the relevant fp routine
.18ed	a2 08		ldx #$08		ldx	#8
.18ef	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.18f2	aa		tax				tax
.18f3	60		rts				rts
.18f4					ShlHandler:
.18f4	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.18f7	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.18fa	b0 03		bcs $18ff			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18fc	4c 75 19	jmp $1975			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.18ff					_IsFPOperation:
.18ff	8a		txa				txa 								; call the relevant fp routine
.1900	a2 08		ldx #$08		ldx	#8
.1902	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1905	aa		tax				tax
.1906	60		rts				rts
.1907					ShrHandler:
.1907	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.190a	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.190d	b0 03		bcs $1912			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.190f	4c 78 19	jmp $1978			jmp 	MInt32ShiftRightX 							; else do it as integer.
.1912					_IsFPOperation:
.1912	8a		txa				txa 								; call the relevant fp routine
.1913	a2 08		ldx #$08		ldx	#8
.1915	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1918	aa		tax				tax
.1919	60		rts				rts
.191a					WordRefHandler:
.191a	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.191d	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.1920	b0 03		bcs $1925			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1922	4c 67 19	jmp $1967			jmp 	MInt32WordIndirect 							; else do it as integer.
.1925					_IsFPOperation:
.1925	8a		txa				txa 								; call the relevant fp routine
.1926	a2 08		ldx #$08		ldx	#8
.1928	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.192b	aa		tax				tax
.192c	60		rts				rts
.192d					ByteRefHandler:
.192d	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.1930	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.1933	b0 03		bcs $1938			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1935	4c 6b 19	jmp $196b			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1938					_IsFPOperation:
.1938	8a		txa				txa 								; call the relevant fp routine
.1939	a2 08		ldx #$08		ldx	#8
.193b	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.193e	aa		tax				tax
.193f	60		rts				rts
.1940					PowerHandler:
.1940	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo
.1943	20 20 18	jsr $1820			jsr 	BinaryProcess 				; check to see if either is float
.1946	b0 03		bcs $194b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1948	4c 53 19	jmp $1953			jmp 	PowerInteger 							; else do it as integer.
.194b					_IsFPOperation:
.194b	8a		txa				txa 								; call the relevant fp routine
.194c	a2 16		ldx #$16		ldx	#22
.194e	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1951	aa		tax				tax
.1952	60		rts				rts
.1953					PowerInteger:
.1953	20 3a 18	jsr $183a			jsr 	BPMakeBothFloat				; make them float.
.1956	8a		txa				txa
.1957	a2 16		ldx #$16		ldx	#22
.1959	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.195c	a2 12		ldx #$12		ldx	#18
.195e	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1961	aa		tax				tax
.1962	a9 00		lda #$00			lda 	#0 							; make type integer
.1964	95 40		sta $40,x			sta 	esType,x
.1966	60		rts				rts
.1967					Mint32WordIndirect:
.1967	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.1969	d0 02		bne $196d			bne 	Min32Indirect
.196b					Mint32ByteIndirect:
.196b	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.196d					Min32Indirect:
.196d	48		pha				pha 								; save the indirection
.196e	20 3a 21	jsr $213a			jsr 	MInt32Add 					; add a!b a?b
.1971	68		pla				pla 								; and set the type to reference.
.1972	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.1974	60		rts				rts
.1975					Mint32ShiftLeftX:
.1975	18		clc				clc 								; CC shift left
.1976	90 01		bcc $1979			bcc 	Mint32Shift
.1978					Mint32ShiftRightX:
.1978	38		sec				sec 								; CS shift right
.1979					Mint32Shift:
.1979	08		php				php 								; save carry flag on stack.
.197a	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.197c	15 59		ora $59,x			ora 	esInt2+1,x
.197e	15 61		ora $61,x			ora 	esInt3+1,x
.1980	d0 1e		bne $19a0			bne 	_MShiftZero
.1982	b5 49		lda $49,x			lda 	esInt0+1,x
.1984	c9 20		cmp #$20			cmp 	#32
.1986	b0 18		bcs $19a0			bcs 	_MShiftZero
.1988					_MShiftLoop:
.1988	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.198a	f0 12		beq $199e			beq 	_MShiftExit
.198c	d6 49		dec $49,x			dec 	esInt0+1,x
.198e	28		plp				plp 								; restore and save carry
.198f	08		php				php
.1990	90 06		bcc $1998			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.1992	20 74 22	jsr $2274			jsr 	Mint32ShiftRight
.1995	4c 88 19	jmp $1988			jmp 	_MShiftLoop
.1998					_MShiftLeft:
.1998	20 6b 22	jsr $226b			jsr 	Mint32ShiftLeft
.199b	4c 88 19	jmp $1988			jmp 	_MShiftLoop
.199e					_MShiftExit:
.199e	28		plp				plp	 								; throw saved carry and exit
.199f	60		rts				rts
.19a0					_MShiftZero:
.19a0	4c 56 22	jmp $2256			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.19a3					PerformComparison:
.19a3	20 9b 1a	jsr $1a9b			jsr 	DereferenceTwo 				; make both values.
.19a6	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.19a8	35 41		and $41,x			and 	esType+1,x
.19aa	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.19ab	30 1d		bmi $19ca			bmi 	_PCIsString
.19ad	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.19af	15 41		ora $41,x			ora 	esType+1,x
.19b1	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.19b2	30 22		bmi $19d6			bmi 	_PCError
.19b4	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.19b6	f0 0f		beq $19c7			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.19b8	20 3a 18	jsr $183a			jsr 	BPMakeBothFloat 			; make both float
.19bb	8a		txa				txa
.19bc	a2 04		ldx #$04		ldx	#4
.19be	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.19c1	86 32		stx $32				stx 	tempShort 					; save result
.19c3	aa		tax				tax
.19c4	a5 32		lda $32				lda 	tempShort
.19c6	60		rts				rts
.19c7					_PCIsInteger:
.19c7	4c f6 1f	jmp $1ff6			jmp 	MInt32Compare
.19ca					_PCIsString:
.19ca	8a		txa				txa 								; A has SP
.19cb	a2 06		ldx #$06		ldx	#6
.19cd	20 61 2c	jsr $2c61		jsr	stringHandler
.19d0	86 32		stx $32				stx 	tempShort 					; save result
.19d2	aa		tax				tax 								; put SP back in X and get result.
.19d3	a5 32		lda $32				lda 	tempShort
.19d5	60		rts				rts
.19d6					_PCError:
.19d6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.19d8	20 c7 24	jsr $24c7		jsr	errorHandler
.19db					CompareEquals:
.19db	20 a3 19	jsr $19a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19de	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.19e0	f0 35		beq $1a17			beq  	CompareTrue
.19e2	4c 1a 1a	jmp $1a1a			jmp 	CompareFalse
.19e5					CompareLess:
.19e5	20 a3 19	jsr $19a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19e8	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.19ea	f0 2b		beq $1a17			beq  	CompareTrue
.19ec	4c 1a 1a	jmp $1a1a			jmp 	CompareFalse
.19ef					CompareGreater:
.19ef	20 a3 19	jsr $19a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19f2	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.19f4	f0 21		beq $1a17			beq  	CompareTrue
.19f6	4c 1a 1a	jmp $1a1a			jmp 	CompareFalse
.19f9					CompareNotEquals:
.19f9	20 a3 19	jsr $19a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19fc	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.19fe	d0 17		bne $1a17			bne  	CompareTrue
.1a00	4c 1a 1a	jmp $1a1a			jmp 	CompareFalse
.1a03					CompareGreaterEq:
.1a03	20 a3 19	jsr $19a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.1a06	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.1a08	d0 0d		bne $1a17			bne  	CompareTrue
.1a0a	4c 1a 1a	jmp $1a1a			jmp 	CompareFalse
.1a0d					CompareLessEq:
.1a0d	20 a3 19	jsr $19a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.1a10	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.1a12	d0 03		bne $1a17			bne  	CompareTrue
.1a14	4c 1a 1a	jmp $1a1a			jmp 	CompareFalse
.1a17					CompareTrue:
.1a17	4c 52 22	jmp $2252			jmp 	MInt32True
.1a1a					CompareFalse:
.1a1a	4c 56 22	jmp $2256			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.1a1d					Event_Str:
.1a1d	20 de 1c	jsr $1cde			jsr 	EvaluateNumeric 			; get a number.
.1a20	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.1a22	d0 13		bne $1a37			bne 	_ESFloat
.1a24	20 7a 1a	jsr $1a7a			jsr 	ConvertGetBase 				; get base, or default.
.1a27	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1a29	85 2a		sta $2a				sta 	temp0
.1a2b	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1a2d	85 2b		sta $2b				sta 	1+(temp0)
.1a2f	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1a31	20 ac 21	jsr $21ac			jsr 	MInt32ToString 				; convert to string.
.1a34	4c 44 1a	jmp $1a44			jmp 	_ESCloneExit 				; clone and exit.
.1a37					_ESFloat:
.1a37	20 c9 22	jsr $22c9			jsr 	CheckRightParen 			; check closing )
.1a3a	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1a3d	8a		txa				txa
.1a3e	a2 14		ldx #$14		ldx	#20
.1a40	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1a43	aa		tax				tax
.1a44					_ESCloneExit:
.1a44	8a		txa				txa
.1a45	a2 02		ldx #$02		ldx	#2
.1a47	20 61 2c	jsr $2c61		jsr	stringHandler
.1a4a	aa		tax				tax
.1a4b	60		rts				rts
.1a4c					UnaryVal:
.1a4c	38		sec				sec 								; Carry set to return value
.1a4d	b0 01		bcs $1a50			bcs 	ValueMain
.1a4f					UnaryIsVal:
.1a4f	18		clc				clc									; Carry clear to return legitimacy
.1a50					ValueMain:
.1a50	08		php				php 								; save results (CS is value, CC is validation)
.1a51	20 e9 1c	jsr $1ce9			jsr 	EvaluateString
.1a54	20 7a 1a	jsr $1a7a			jsr 	ConvertGetBase 				; get base, if any.
.1a57	98		tya				tya
.1a58	48		pha				pha
.1a59	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1a5c	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1a5e	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1a60	20 c4 20	jsr $20c4			jsr 	MInt32FromString 			; convert it back from a string.
.1a63	b0 0c		bcs $1a71			bcs 	_VMSuccess 					; successfully converted.
.1a65	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1a67	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1a69	f0 00		beq $1a6b			beq 	_VMFailed 	 				; so we failed.
.1a6b					_VMFailed:
.1a6b	68		pla				pla
.1a6c	a8		tay				tay
.1a6d	28		plp				plp
.1a6e	4c 56 22	jmp $2256			jmp 	MInt32False 				; return 0 whatever.
.1a71					_VMSuccess:
.1a71	68		pla				pla
.1a72	a8		tay				tay
.1a73	28		plp				plp 								; if CS the it was val() so we want the value.
.1a74	b0 03		bcs $1a79			bcs 	_VMExit
.1a76	4c 52 22	jmp $2252			jmp 	MInt32True 					; otherwise return true as successful.
.1a79					_VMExit:
.1a79	60		rts				rts
.1a7a					ConvertGetBase:
.1a7a	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1a7c	95 49		sta $49,x			sta 	esInt0+1,x
.1a7e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.1a80	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a82	d0 0e		bne $1a92			bne 	_CGBDone 					; not found, should be )
.1a84	e8		inx				inx 								; next level
.1a85	c8		iny				iny 								; skip comma.
.1a86	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger		; evaluate the base.
.1a89	ca		dex				dex
.1a8a	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.1a8c	90 08		bcc $1a96			bcc 	_CGBValue 					; (it should work as high as 37)
.1a8e	c9 11		cmp #$11			cmp 	#17
.1a90	b0 04		bcs $1a96			bcs 	_CGBValue
.1a92					_CGBDone:
.1a92	20 c9 22	jsr $22c9			jsr 	CheckRightParen
.1a95	60		rts				rts
.1a96					_CGBValue:
.1a96	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a98	20 c7 24	jsr $24c7		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1a9b					DereferenceTwo:
.1a9b	e8		inx				inx
.1a9c	20 a0 1a	jsr $1aa0			jsr 	DereferenceOne
.1a9f	ca		dex				dex
.1aa0					DereferenceOne:
.1aa0	b5 40		lda $40,x			lda 	esType,x
.1aa2	10 3d		bpl $1ae1			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.1aa4	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1aa5	b0 3b		bcs $1ae2			bcs 	_DRFloatDeReference
.1aa7	98		tya				tya
.1aa8	48		pha				pha
.1aa9	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1aab	85 2a		sta $2a				sta 	temp0
.1aad	b5 50		lda $50,x			lda 	esInt1,x
.1aaf	85 2b		sta $2b				sta 	temp0+1
.1ab1	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1ab3	95 50		sta $50,x			sta 	esInt1,x
.1ab5	95 58		sta $58,x			sta 	esInt2,x
.1ab7	95 60		sta $60,x			sta 	esInt3,x
.1ab9	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1abb	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1abd	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1abe	30 0d		bmi $1acd			bmi 	_DeRefString 				; string, 2 bytes only
.1ac0	d0 11		bne $1ad3			bne 	_DeRefByte 					; byte 1 byte only
.1ac2					_DeRefLong:
.1ac2	a0 03		ldy #$03			ldy 	#3
.1ac4	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ac6	95 60		sta $60,x			sta 	esInt3,x
.1ac8	88		dey				dey
.1ac9	b1 2a		lda ($2a),y			lda 	(temp0),y
.1acb	95 58		sta $58,x			sta 	esInt2,x
.1acd					_DeRefString:
.1acd	a0 01		ldy #$01			ldy 	#1
.1acf	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ad1	95 50		sta $50,x			sta 	esInt1,x
.1ad3					_DeRefByte:
.1ad3	a0 00		ldy #$00			ldy 	#0
.1ad5	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ad7	95 48		sta $48,x			sta 	esInt0,x
.1ad9	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1adb	29 40		and #$40			and 	#$40
.1add	95 40		sta $40,x			sta 	esType,x
.1adf	68		pla				pla
.1ae0	a8		tay				tay
.1ae1					_DRNotReference
.1ae1	60		rts				rts
.1ae2					_DRFloatDereference:
.1ae2	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; address to deref in temp0
.1ae5	8a		txa				txa
.1ae6	a2 1c		ldx #$1c		ldx	#28
.1ae8	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1aeb	aa		tax				tax
.1aec	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1aee	95 40		sta $40,x			sta 	esType,x
.1af0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1af1					EvaluateLevel:
.1af1	48		pha				pha 								; save precedence level.
.1af2	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1af4	95 48		sta $48,x			sta 	esInt0,x
.1af6	95 50		sta $50,x			sta 	esInt1,x
.1af8	95 58		sta $58,x			sta 	esInt2,x
.1afa	95 60		sta $60,x			sta 	esInt3,x
.1afc	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1afe	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.1b00	30 21		bmi $1b23			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1b02	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1b03	30 0a		bmi $1b0f			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1b05	8a		txa				txa 								; stack level in X
.1b06	a2 00		ldx #$00		ldx	#0
.1b08	20 04 36	jsr $3604		jsr	variableHandler
.1b0b	aa		tax				tax
.1b0c	4c 4c 1b	jmp $1b4c			jmp		_ELHasTerm
.1b0f					_ELIsConstant:
.1b0f	4a		lsr a				lsr 	a 							; get the value back
.1b10	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1b12	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1b14					_ELCheckNext:
.1b14	c8		iny				iny 								; look at next
.1b15	b1 28		lda ($28),y			lda 	(codePtr),y
.1b17	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1b19	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1b1b	b0 2f		bcs $1b4c			bcs 	_ELHasTerm 					; done getting the constant.
.1b1d	20 e5 1b	jsr $1be5			jsr 	ELShiftByteIn 				; shift byte into position.
.1b20	4c 14 1b	jmp $1b14			jmp 	_ELCheckNext
.1b23					_ELIsToken:
.1b23	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1b25	f0 0f		beq $1b36			beq 	_ELIsString
.1b27	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1b29	d0 5f		bne $1b8a			bne 	_ELCheckUnary
.1b2b	8a		txa				txa 								; put X into A
.1b2c	c8		iny				iny 								; skip over the float marker
.1b2d	a2 18		ldx #$18		ldx	#24
.1b2f	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1b32	aa		tax				tax 								; restore X
.1b33	4c 4c 1b	jmp $1b4c			jmp 	_ELHasTerm
.1b36					_ELIsString:
.1b36	98		tya				tya 								; address of string is codePtr+y+1
.1b37	38		sec				sec
.1b38	65 28		adc $28				adc 	codePtr
.1b3a	95 48		sta $48,x			sta 	esInt0,x
.1b3c	a5 29		lda $29				lda 	codePtr+1
.1b3e	69 00		adc #$00			adc 	#0
.1b40	95 50		sta $50,x			sta 	esInt1,x
.1b42	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1b44	95 40		sta $40,x			sta 	esType,x
.1b46	c8		iny				iny 								; skip over string.
.1b47	98		tya				tya
.1b48	38		sec				sec									; +1 for the length itself.
.1b49	71 28		adc ($28),y			adc 	(codePtr),y
.1b4b	a8		tay				tay 								; and fall through to term loop code.
.1b4c					_ELHasTerm:
.1b4c	b1 28		lda ($28),y			lda 	(codePtr),y
.1b4e	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1b50	90 04		bcc $1b56			bcc 	_ELPopExit
.1b52	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1b54	90 02		bcc $1b58			bcc 	_ELHasBinaryTerm
.1b56					_ELPopExit:
.1b56	68		pla				pla
.1b57					_ELExit:
.1b57	60		rts				rts
.1b58					_ELHasBinaryTerm:
.1b58	84 32		sty $32				sty 	tempShort 					; save position
.1b5a	a8		tay				tay 								; use token as an index and get the precedence.
.1b5b	b9 8d 1b	lda $1b8d,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1b5e	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.1b60	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.1b62	68		pla				pla 								; restore current level.
.1b63	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.1b65	b0 f0		bcs $1b57			bcs 	_ELExit
.1b67	48		pha				pha 								; save current level back on the stack.
.1b68	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1b6a	48		pha				pha
.1b6b	c8		iny				iny
.1b6c	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1b6d	a5 32		lda $32				lda 	tempShort
.1b6f	20 f1 1a	jsr $1af1			jsr 	EvaluateLevel
.1b72	ca		dex				dex
.1b73	68		pla				pla 								; get the operator back out.
.1b74					_ELExecuteA:
.1b74	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1b76	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1b77	aa		tax				tax
.1b78	bd 9d 15	lda $159d,x			lda 	Group0Vectors,x
.1b7b	85 2a		sta $2a				sta 	temp0
.1b7d	bd 9e 15	lda $159e,x			lda 	Group0Vectors+1,x
.1b80	85 2b		sta $2b				sta 	temp0+1
.1b82	a6 32		ldx $32				ldx 	tempShort
.1b84	20 d1 1b	jsr $1bd1			jsr 	_ELCallTemp0
.1b87	4c 4c 1b	jmp $1b4c			jmp 	_ELHasTerm 					; and loop back round.
.1b8a					_ELCheckUnary:
.1b8a	c8		iny				iny 								; skip over token.
.1b8b	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1b8d	f0 19		beq $1ba8			beq 	_ELMinus
.1b8f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1b91	f0 2c		beq $1bbf			beq 	_ELIndirect
.1b93	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1b95	f0 28		beq $1bbf			beq 	_ELIndirect
.1b97	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1b99	f0 39		beq $1bd4			beq 	_ELExtension
.1b9b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1b9d	90 04		bcc $1ba3			bcc 	_ELUSyntax
.1b9f	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1ba1	90 d1		bcc $1b74			bcc 	_ELExecuteA 				; if so do that token.
.1ba3					_ELUSyntax:
.1ba3	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1ba5	20 c7 24	jsr $24c7		jsr	errorHandler
.1ba8					_ELMinus:
.1ba8	20 bd 1c	jsr $1cbd			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1bab	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1bad	f0 0a		beq $1bb9			beq 	_ELMinusInteger
.1baf	8a		txa				txa
.1bb0	a2 0c		ldx #$0c		ldx	#12
.1bb2	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1bb5	aa		tax				tax
.1bb6	4c 4c 1b	jmp $1b4c			jmp 	_ELHasTerm
.1bb9					_ELMinusInteger:
.1bb9	20 10 22	jsr $2210			jsr 	MInt32Negate 				; do int negate
.1bbc	4c 4c 1b	jmp $1b4c			jmp 	_ELHasTerm
.1bbf					_ELIndirect:
.1bbf	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1bc0	20 c6 1c	jsr $1cc6			jsr 	EvaluateIntegerTerm 		; integer address
.1bc3	68		pla				pla
.1bc4	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1bc6	f0 02		beq $1bca			beq 	_ELHaveModifier
.1bc8	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1bca					_ELHaveModifier:
.1bca	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1bcc	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.1bce	4c 4c 1b	jmp $1b4c			jmp 	_ELHasTerm
.1bd1					_ELCallTemp0:
.1bd1	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.1bd4					_ELExtension:
.1bd4	8a		txa				txa 								; stack pos in A
.1bd5	20 6e 27	jsr $276e		jsr	extensionHandler
.1bd8	aa		tax				tax 								; restore stack
.1bd9	4c 4c 1b	jmp $1b4c			jmp 	_ELHasTerm
.1bdc					UnaryParenthesis:
.1bdc	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1bde	20 f1 1a	jsr $1af1			jsr 	EvaluateLevel
.1be1	20 c9 22	jsr $22c9			jsr 	CheckRightParen 			; check for )
.1be4	60		rts				rts
.1be5					ELShiftByteIn:
.1be5	48		pha				pha 								; save bits to shift in.
.1be6	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1be8	48		pha				pha
.1be9	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1beb	95 60		sta $60,x			sta 	esInt3,x
.1bed	b5 50		lda $50,x			lda 	esInt1,x
.1bef	95 58		sta $58,x			sta 	esInt2,x
.1bf1	b5 48		lda $48,x			lda 	esInt0,x
.1bf3	95 50		sta $50,x			sta 	esInt1,x
.1bf5	a9 00		lda #$00			lda 	#0
.1bf7	95 48		sta $48,x			sta 	esInt0,x
.1bf9	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1bfa	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1bfc	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1bfe					_ELShiftLoop:
.1bfe	4a		lsr a				lsr 	a
.1bff	76 60		ror $60,x			ror 	esInt3,x
.1c01	76 58		ror $58,x			ror 	esInt2,x
.1c03	76 50		ror $50,x			ror 	esInt1,x
.1c05	76 48		ror $48,x			ror 	esInt0,x
.1c07	c9 01		cmp #$01			cmp 	#1
.1c09	d0 f3		bne $1bfe			bne 	_ELShiftLoop
.1c0b	68		pla				pla 								; get original 6 bit value and OR in.
.1c0c	29 3f		and #$3f			and 	#$3F
.1c0e	15 48		ora $48,x			ora 	esInt0,x
.1c10	95 48		sta $48,x			sta 	esInt0,x
.1c12	60		rts				rts
.1c13					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1c13	01					.byte	$01			; $86 and
>1c14	01					.byte	$01			; $87 or
>1c15	01					.byte	$01			; $88 xor
>1c16	02					.byte	$02			; $89 >=
>1c17	02					.byte	$02			; $8a <=
>1c18	02					.byte	$02			; $8b >
>1c19	02					.byte	$02			; $8c <
>1c1a	02					.byte	$02			; $8d =
>1c1b	02					.byte	$02			; $8e <>
>1c1c	03					.byte	$03			; $8f +
>1c1d	03					.byte	$03			; $90 -
>1c1e	04					.byte	$04			; $91 >>
>1c1f	04					.byte	$04			; $92 <<
>1c20	04					.byte	$04			; $93 *
>1c21	04					.byte	$04			; $94 /
>1c22	04					.byte	$04			; $95 mod
>1c23	05					.byte	$05			; $96 ^
>1c24	06					.byte	$06			; $97 !
>1c25	06					.byte	$06			; $98 ?
>1c26	82					.byte	$82			; $99 repeat
>1c27	82					.byte	$82			; $9a while
>1c28	82					.byte	$82			; $9b for
>1c29	82					.byte	$82			; $9c if
>1c2a	82					.byte	$82			; $9d defproc
>1c2b	80					.byte	$80			; $9e until
>1c2c	80					.byte	$80			; $9f wend
>1c2d	80					.byte	$80			; $a0 next
>1c2e	80					.byte	$80			; $a1 then
>1c2f	80					.byte	$80			; $a2 endif
>1c30	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1c31					EventFunction:
.1c31	20 27 1d	jsr $1d27			jsr 	EvaluateReference			; get the variable reference that tracks the event
.1c34	b5 40		lda $40,x			lda 	esType,x
.1c36	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.1c38	d0 5b		bne $1c95			bne 	_EFType
.1c3a	20 d6 22	jsr $22d6			jsr 	CheckComma
.1c3d	e8		inx				inx
.1c3e	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1c41	20 c9 22	jsr $22c9			jsr 	CheckRightParen 			; finish off with the right bracket
.1c44	ca		dex				dex
.1c45	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.1c47	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.1c49	15 58		ora $58,x			ora 	esInt2,x
.1c4b	15 60		ora $60,x			ora 	esInt3,x
.1c4d	d0 41		bne $1c90			bne 	_EFValue
.1c4f	98		tya				tya
.1c50	48		pha				pha
.1c51	8a		txa				txa
.1c52	48		pha				pha
.1c53	a2 18		ldx #$18		ldx	#24
.1c55	20 aa 24	jsr $24aa		jsr	deviceHandler
.1c58	84 2d		sty $2d				sty 	temp1+1
.1c5a	85 2c		sta $2c				sta 	temp1
.1c5c	68		pla				pla
.1c5d	aa		tax				tax
.1c5e	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.1c61	a0 03		ldy #$03			ldy 	#3							; if -ve
.1c63	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c65	30 23		bmi $1c8a			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.1c67	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1c69	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c6b	c8		iny				iny
.1c6c	11 2a		ora ($2a),y			ora 	(temp0),y
.1c6e	f0 17		beq $1c87			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1c70	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1c72	38		sec				sec
.1c73	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c75	e5 2c		sbc $2c				sbc 	temp1
.1c77	c8		iny				iny
.1c78	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c7a	e5 2d		sbc $2d				sbc 	temp1+1
.1c7c	10 0c		bpl $1c8a			bpl 	_EFFail 					; if trigger >= timer then return False
.1c7e	20 9a 1c	jsr $1c9a			jsr 	SetEventTimer 				; reset the timer for next time.
.1c81	20 52 22	jsr $2252			jsr	 	MInt32True 					; and treutn true as fired.
.1c84	68		pla				pla
.1c85	a8		tay				tay
.1c86	60		rts				rts
.1c87					_EFInitialise:
.1c87	20 9a 1c	jsr $1c9a			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1c8a					_EFFail:
.1c8a	68		pla				pla
.1c8b	a8		tay				tay
.1c8c	20 56 22	jsr $2256			jsr 	MInt32False
.1c8f	60		rts				rts
.1c90					_EFValue:
.1c90	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c92	20 c7 24	jsr $24c7		jsr	errorHandler
.1c95					_EFType:
.1c95	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c97	20 c7 24	jsr $24c7		jsr	errorHandler
.1c9a					SetEventTimer:
.1c9a	a0 00		ldy #$00			ldy 	#0
.1c9c	18		clc				clc
.1c9d	a5 2c		lda $2c				lda 	temp1
.1c9f	75 49		adc $49,x			adc 	esInt0+1,x
.1ca1	91 2a		sta ($2a),y			sta		(temp0),y
.1ca3	c8		iny				iny
.1ca4	a5 2d		lda $2d				lda 	temp1+1
.1ca6	75 51		adc $51,x			adc 	esInt1+1,x
.1ca8	91 2a		sta ($2a),y			sta		(temp0),y
.1caa	88		dey				dey
.1cab	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.1cad	d0 04		bne $1cb3			bne 	_SETExit 					; zero means initialise.....
.1caf	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1cb1	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.1cb3					_SETExit:
.1cb3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.1cb4					EvaluateTerm:
.1cb4	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.1cb6	20 f1 1a	jsr $1af1			jsr 	EvaluateLevel
.1cb9	20 a0 1a	jsr $1aa0			jsr 	DereferenceOne
.1cbc	60		rts				rts
.1cbd					EvaluateNumericTerm:
.1cbd	20 b4 1c	jsr $1cb4			jsr 	EvaluateTerm
.1cc0	b5 40		lda $40,x			lda 	esType,x
.1cc2	0a		asl a				asl 	a 							; see if it's a string.
.1cc3	30 09		bmi $1cce			bmi 	ENTType
.1cc5	60		rts				rts
.1cc6					EvaluateIntegerTerm:
.1cc6	20 b4 1c	jsr $1cb4			jsr 	EvaluateTerm
.1cc9	b5 40		lda $40,x			lda 	esType,x
.1ccb	d0 01		bne $1cce			bne 	ENTType
.1ccd	60		rts				rts
.1cce					ENTType:
.1cce	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1cd0	20 c7 24	jsr $24c7		jsr	errorHandler
.1cd3					EvaluateRoot:
.1cd3	a2 00		ldx #$00			ldx 	#0
.1cd5					Evaluate:
.1cd5	a9 00		lda #$00			lda 	#0
.1cd7	20 f1 1a	jsr $1af1			jsr 	EvaluateLevel
.1cda	20 a0 1a	jsr $1aa0			jsr 	DereferenceOne
.1cdd	60		rts				rts
.1cde					EvaluateNumeric:
.1cde	20 d5 1c	jsr $1cd5			jsr 	Evaluate
.1ce1	b5 40		lda $40,x			lda 	esType,x
.1ce3	0a		asl a				asl 	a 							; see if it's a string.
.1ce4	30 e8		bmi $1cce			bmi 	ENTType
.1ce6	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1ce7	4a		lsr a				lsr 	a
.1ce8	60		rts				rts
.1ce9					EvaluateString:
.1ce9	20 d5 1c	jsr $1cd5			jsr 	Evaluate
.1cec	b5 40		lda $40,x			lda 	esType,x
.1cee	0a		asl a				asl 	a 							; see if it's a string.
.1cef	10 dd		bpl $1cce			bpl 	ENTType
.1cf1	60		rts				rts
.1cf2					EvaluateRootInteger:
.1cf2	a2 00		ldx #$00			ldx 	#0
.1cf4					EvaluateInteger:
.1cf4	20 d5 1c	jsr $1cd5			jsr 	Evaluate
.1cf7	b5 40		lda $40,x			lda 	esType,x
.1cf9	d0 d3		bne $1cce			bne 	ENTType
.1cfb	60		rts				rts
.1cfc					EvaluateSmallInteger:
.1cfc	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger
.1cff	b5 50		lda $50,x			lda 	esInt1,x
.1d01	15 58		ora $58,x			ora 	esInt2,x
.1d03	15 60		ora $60,x			ora 	esInt3,x
.1d05	d0 03		bne $1d0a			bne 	_ESIValue
.1d07	b5 48		lda $48,x			lda 	esInt0,x
.1d09	60		rts				rts
.1d0a					_ESIValue:
.1d0a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d0c	20 c7 24	jsr $24c7		jsr	errorHandler
.1d0f					LinkEvaluate:
.1d0f	aa		tax				tax
.1d10	20 d5 1c	jsr $1cd5			jsr 	Evaluate
.1d13	8a		txa				txa
.1d14	60		rts				rts
.1d15					LinkEvaluateTerm:
.1d15	aa		tax				tax
.1d16	20 b4 1c	jsr $1cb4			jsr 	EvaluateTerm
.1d19	8a		txa				txa
.1d1a	60		rts				rts
.1d1b					LinkEvaluateInteger:
.1d1b	aa		tax				tax
.1d1c	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger
.1d1f	8a		txa				txa
.1d20	60		rts				rts
.1d21					LinkEvaluateSmallInt:
.1d21	aa		tax				tax
.1d22	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger
.1d25	8a		txa				txa
.1d26	60		rts				rts
.1d27					EvaluateReference:
.1d27	ad 24 1c	lda $1c24			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1d2a	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1d2b	e9 01		sbc #$01			sbc 	#1
.1d2d	20 f1 1a	jsr $1af1			jsr 	EvaluateLevel
.1d30	b5 40		lda $40,x			lda 	esType,x
.1d32	10 01		bpl $1d35			bpl 	_ERFail
.1d34	60		rts				rts
.1d35					_ERFail:
.1d35	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1d37	20 c7 24	jsr $24c7		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1d3a					UnaryLen:
.1d3a	20 48 1d	jsr $1d48			jsr 	ULStart
.1d3d					ULFinish:
.1d3d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.1d3f	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.1d41	20 65 22	jsr $2265			jsr 	MInt32Set8Bit 				; write it out.
.1d44	20 c9 22	jsr $22c9			jsr 	CheckRightParen
.1d47	60		rts				rts
.1d48	20 e9 1c	jsr $1ce9	ULStart:jsr 	EvaluateString
.1d4b	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d4d	85 2a		sta $2a				sta 	temp0
.1d4f	b5 50		lda $50,x			lda 	esInt1,x
.1d51	85 2b		sta $2b				sta 	temp0+1
.1d53	84 32		sty $32				sty 	tempShort 					; get length
.1d55	a0 00		ldy #$00			ldy 	#0
.1d57	60		rts				rts
.1d58					UnaryAsc:
.1d58	20 48 1d	jsr $1d48			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1d5b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.1d5d	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1d5e	c9 00		cmp #$00			cmp 	#0
.1d60	d0 db		bne $1d3d			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.1d62	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d64	20 c7 24	jsr $24c7		jsr	errorHandler
.1d67					UnaryAbs:
.1d67	20 de 1c	jsr $1cde			jsr 	EvaluateNumeric 			; some numeric value
.1d6a	b0 07		bcs $1d73			bcs 	_UAFloat 					; CS then float, so use that function
.1d6c	20 0b 22	jsr $220b			jsr 	MInt32Absolute 				; int version
.1d6f	20 c9 22	jsr $22c9			jsr 	CheckRightParen
.1d72	60		rts				rts
.1d73					_UAFloat:
.1d73	8a		txa				txa 								; float version
.1d74	a2 00		ldx #$00		ldx	#0
.1d76	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1d79	aa		tax				tax
.1d7a	20 c9 22	jsr $22c9			jsr 	CheckRightParen
.1d7d	60		rts				rts
.1d7e					UnarySgn:
.1d7e	20 de 1c	jsr $1cde			jsr 	EvaluateNumeric 			; same as above but sign of value
.1d81	b0 07		bcs $1d8a			bcs 	_USFloat
.1d83	20 43 22	jsr $2243			jsr 	MInt32Sign
.1d86	20 c9 22	jsr $22c9			jsr 	CheckRightParen
.1d89	60		rts				rts
.1d8a					_USFloat:
.1d8a	8a		txa				txa
.1d8b	a2 0e		ldx #$0e		ldx	#14
.1d8d	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1d90	aa		tax				tax
.1d91	20 c9 22	jsr $22c9			jsr 	CheckRightParen
.1d94	60		rts				rts
.1d95					UnaryPeek:
.1d95	20 c1 1d	jsr $1dc1			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.1d98	4c b5 1d	jmp $1db5			jmp 	PDLByte0
.1d9b					UnaryDeek:
.1d9b	20 c1 1d	jsr $1dc1			jsr 	PDLCode
.1d9e	4c af 1d	jmp $1daf			jmp 	PDLByte1
.1da1					UnaryLeek:
.1da1	20 c1 1d	jsr $1dc1			jsr 	PDLCode
.1da4	a0 03		ldy #$03			ldy 	#3							; read 3-2
.1da6	b1 2a		lda ($2a),y			lda 	(temp0),y
.1da8	95 60		sta $60,x			sta 	esInt3,x
.1daa	88		dey				dey
.1dab	b1 2a		lda ($2a),y			lda 	(temp0),y
.1dad	95 58		sta $58,x			sta 	esInt2,x
.1daf					PDLByte1:
.1daf	a0 01		ldy #$01			ldy 	#1
.1db1	b1 2a		lda ($2a),y			lda 	(temp0),y
.1db3	95 50		sta $50,x			sta 	esInt1,x
.1db5					PDLByte0:
.1db5	a0 00		ldy #$00			ldy 	#0
.1db7	b1 2a		lda ($2a),y			lda 	(temp0),y
.1db9	95 48		sta $48,x			sta 	esInt0,x
.1dbb	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.1dbd	20 c9 22	jsr $22c9			jsr 	CheckRightParen 			; check right and return
.1dc0	60		rts				rts
.1dc1					PDLCode:
.1dc1	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger 			; some address
.1dc4	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1dc6	85 2a		sta $2a				sta 	temp0
.1dc8	b5 50		lda $50,x			lda 	esInt1,x
.1dca	85 2b		sta $2b				sta 	temp0+1
.1dcc	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1dce	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.1dd0	95 58		sta $58,x			sta 	esInt2,x
.1dd2	95 60		sta $60,x			sta 	esInt3,x
.1dd4	84 32		sty $32				sty 	tempShort 					; save Y
.1dd6	60		rts				rts
.1dd7					Unary_Random:
.1dd7	20 86 22	jsr $2286			jsr 	MInt32Random 				; generate random number.
.1dda	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.1ddc	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1dde	f0 08		beq $1de8			beq 	_URExit
.1de0	e8		inx				inx 								; load range 0..r-1 into +1
.1de1	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger
.1de4	ca		dex				dex
.1de5	20 a9 20	jsr $20a9			jsr 	MInt32Modulus 				; calculate random % modulus
.1de8					_URExit:
.1de8	20 c9 22	jsr $22c9			jsr 	CheckRightParen 			; check right and return
.1deb	60		rts				rts
.1dec					Unary_Min:
.1dec	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1dee	d0 02		bne $1df2			bne 	UnaryMBody
.1df0					Unary_Max:
.1df0	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1df2					UnaryMBody:
.1df2	48		pha				pha 								; save comparator on stack, shows min or max
.1df3	20 d5 1c	jsr $1cd5			jsr 	Evaluate 					; get the first thing to check
.1df6					_UnaryMLoop:
.1df6	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.1df8	c8		iny				iny
.1df9	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1dfb	f0 09		beq $1e06			beq 	_UnaryMExit
.1dfd	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1dff	f0 07		beq $1e08			beq 	_UnaryMCompare
.1e01	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1e03	20 c7 24	jsr $24c7		jsr	errorHandler
.1e06					_UnaryMExit:
.1e06	68		pla				pla 								; done so throw comparator and return.
.1e07	60		rts				rts
.1e08					_UnaryMCompare:
.1e08	e8		inx				inx 								; get the 2nd thing to evaluate
.1e09	20 d5 1c	jsr $1cd5			jsr 	Evaluate
.1e0c	ca		dex				dex
.1e0d	20 a3 19	jsr $19a3			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1e10	85 32		sta $32				sta 	tempShort 					; save result
.1e12	68		pla				pla 								; get what we need
.1e13	48		pha				pha
.1e14	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.1e16	d0 de		bne $1df6			bne 	_UnaryMLoop 				; no, try another value.
.1e18	20 56 22	jsr $2256			jsr 	MInt32False 				; promote 2nd to 1st.
.1e1b	20 3a 21	jsr $213a			jsr 	MInt32Add
.1e1e	4c f6 1d	jmp $1df6			jmp 	_UnaryMLoop
.1e21					Unary_Page:
.1e21	20 56 22	jsr $2256			jsr 	MInt32False 				; zero
.1e24	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1e27	95 48		sta $48,x			sta 	esInt0,x
.1e29	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e2c	95 50		sta $50,x			sta 	esInt1,x
.1e2e	60		rts				rts
.1e2f					UnaryReference:
.1e2f	a9 0f		lda #$0f			lda 	#15
.1e31	20 f1 1a	jsr $1af1			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1e34	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1e36	10 05		bpl $1e3d			bpl 	UType
.1e38	a9 00		lda #$00			lda 	#0 							; make it an integer
.1e3a	95 40		sta $40,x			sta 	esType,x
.1e3c	60		rts				rts
.1e3d					UType:
.1e3d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1e3f	20 c7 24	jsr $24c7		jsr	errorHandler
.1e42					UnaryHexMarker:
.1e42	4c c6 1c	jmp $1cc6			jmp 	EvaluateIntegerTerm
.1e45					UnaryComplement:
.1e45	20 c6 1c	jsr $1cc6			jsr 	EvaluateIntegerTerm
.1e48	20 2a 22	jsr $222a			jsr 	MInt32Not
.1e4b	60		rts				rts
.1e4c					UnaryIntToFloat:
.1e4c	20 de 1c	jsr $1cde			jsr 	EvaluateNumeric				; some number
.1e4f	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.1e51	d0 0b		bne $1e5e			bne 	_UIFExit
.1e53	8a		txa				txa 								; convert and set type
.1e54	a2 1a		ldx #$1a		ldx	#26
.1e56	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1e59	aa		tax				tax
.1e5a	a9 01		lda #$01			lda 	#1
.1e5c	95 40		sta $40,x			sta 	esType,x
.1e5e					_UIFExit:
.1e5e	60		rts				rts
.1e5f					UnaryFloatToInt:
.1e5f	20 de 1c	jsr $1cde			jsr 	EvaluateNumeric 			; the number
.1e62	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.1e64	f0 0b		beq $1e71			beq 	_UFIExit
.1e66	8a		txa				txa 								; convert to int
.1e67	a2 12		ldx #$12		ldx	#18
.1e69	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.1e6c	aa		tax				tax
.1e6d	a9 00		lda #$00			lda 	#0 							; set type
.1e6f	95 40		sta $40,x			sta 	esType,x
.1e71					_UFIExit:
.1e71	60		rts				rts
.1e72					UnaryAlloc:
.1e72	e8		inx				inx 								; evaluate memory required
.1e73	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger
.1e76	20 c9 22	jsr $22c9			jsr 	CheckRightParen
.1e79	ca		dex				dex
.1e7a	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1e7c	15 61		ora $61,x			ora 	esInt3+1,x
.1e7e	d0 19		bne $1e99			bne 	_UABadValue
.1e80	20 56 22	jsr $2256			jsr 	MInt32False					; zero return.
.1e83	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.1e85	95 50		sta $50,x			sta 	esInt1,x
.1e87	a5 35		lda $35				lda 	lowMemory
.1e89	95 48		sta $48,x			sta 	esInt0,x
.1e8b	18		clc				clc 								; add alloc required.
.1e8c	75 49		adc $49,x			adc 	esInt0+1,x
.1e8e	85 35		sta $35				sta 	lowMemory
.1e90	a5 36		lda $36				lda 	lowMemory+1
.1e92	75 51		adc $51,x			adc 	esInt1+1,x
.1e94	85 36		sta $36				sta 	lowMemory+1
.1e96	b0 01		bcs $1e99			bcs		_UABadValue 				; overflow definitely bad.
.1e98	60		rts				rts
.1e99					_UABadValue:
.1e99	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e9b	20 c7 24	jsr $24c7		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1e9e					UnaryTimer:
.1e9e	20 c9 22	jsr $22c9			jsr 	CheckRightParen 			; no parameters
.1ea1	98		tya				tya
.1ea2	48		pha				pha
.1ea3	20 7d 22	jsr $227d			jsr 	MInt32Zero 					; zero result
.1ea6	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.1ea8	a2 18		ldx #$18		ldx	#24
.1eaa	20 aa 24	jsr $24aa		jsr	deviceHandler
.1ead	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.1eaf	95 48		sta $48,x			sta 	esInt0,x
.1eb1	98		tya				tya
.1eb2	95 50		sta $50,x			sta 	esInt1,x
.1eb4	68		pla				pla
.1eb5	a8		tay				tay
.1eb6	60		rts				rts
.1eb7					UnaryInkey:
.1eb7	20 c9 22	jsr $22c9			jsr 	CheckRightParen
.1eba	86 2a		stx $2a				stx 	temp0
.1ebc	a2 08		ldx #$08		ldx	#8
.1ebe	20 aa 24	jsr $24aa		jsr	deviceHandler
.1ec1	a6 2a		ldx $2a				ldx 	temp0
.1ec3	20 65 22	jsr $2265			jsr 	MInt32Set8Bit
.1ec6	60		rts				rts
.1ec7					UnaryGet:
.1ec7	20 c9 22	jsr $22c9			jsr 	CheckRightParen
.1eca	86 2a		stx $2a				stx 	temp0
.1ecc					_UGLoop:
.1ecc	a2 08		ldx #$08		ldx	#8
.1ece	20 aa 24	jsr $24aa		jsr	deviceHandler
.1ed1	c9 00		cmp #$00			cmp 	#0
.1ed3	f0 f7		beq $1ecc			beq 	_UGLoop
.1ed5	a6 2a		ldx $2a				ldx 	temp0
.1ed7	20 65 22	jsr $2265			jsr 	MInt32Set8Bit
.1eda	60		rts				rts
.1edb					UnarySys:
.1edb	20 f4 1c	jsr $1cf4			jsr 	EvaluateInteger 				; get the address
.1ede	20 c9 22	jsr $22c9			jsr 	CheckRightParen
.1ee1	20 e7 11	jsr $11e7			jsr 	TOSToTemp0 						; copy call address to temp0
.1ee4	8a		txa				txa
.1ee5	48		pha				pha
.1ee6	98		tya				tya
.1ee7	48		pha				pha
.1ee8	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1eeb	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1eee	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1ef1	20 00 1f	jsr $1f00			jsr 	_CallTemp0
.1ef4	85 32		sta $32				sta 	tempShort 						; restore YX
.1ef6	68		pla				pla
.1ef7	a8		tay				tay
.1ef8	68		pla				pla
.1ef9	aa		tax				tax
.1efa	a5 32		lda $32				lda 	tempShort
.1efc	20 65 22	jsr $2265			jsr 	MInt32Set8Bit 					; return result.
.1eff	60		rts				rts
.1f00					_CallTemp0:
.1f00	6c 2a 00	jmp ($002a)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1f03					ExecChr:
.1f03	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger		; character number 0-255
.1f06	20 c9 22	jsr $22c9			jsr 	CheckRightParen				; right bracket
.1f09	98		tya				tya
.1f0a	48		pha				pha
.1f0b	8a		txa				txa 								; A = stack
.1f0c	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1f0e	a2 00		ldx #$00		ldx	#0
.1f10	20 61 2c	jsr $2c61		jsr	stringHandler
.1f13	aa		tax				tax 								; X = stack
.1f14	68		pla				pla
.1f15	a8		tay				tay
.1f16	60		rts				rts
.1f17					ExecLower:
.1f17	38		sec				sec 								; set carry is lower
.1f18	b0 01		bcs $1f1b			bcs 	ExecUpperLower
.1f1a					ExecUpper:
.1f1a	18		clc				clc 								; clear carry is upper
.1f1b					ExecUpperLower:
.1f1b	08		php				php 								; save carry
.1f1c	20 e9 1c	jsr $1ce9			jsr 	EvaluateString 				; string to stack,X
.1f1f	20 c9 22	jsr $22c9			jsr 	CheckRightParen 			; check closing right bracket.
.1f22	28		plp				plp 								; restore carry, save Y
.1f23	98		tya				tya
.1f24	48		pha				pha
.1f25	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1f27	2a		rol a				rol 	a
.1f28	a8		tay				tay 								; now in Y
.1f29	8a		txa				txa 								; do the substring and exit.
.1f2a	a2 08		ldx #$08		ldx	#8
.1f2c	20 61 2c	jsr $2c61		jsr	stringHandler
.1f2f	aa		tax				tax
.1f30	68		pla				pla
.1f31	a8		tay				tay
.1f32	60		rts				rts
.1f33					ExecLeft:
.1f33	20 e9 1c	jsr $1ce9			jsr 	EvaluateString 				; string to stack,X
.1f36	20 d6 22	jsr $22d6			jsr 	CheckComma
.1f39	e8		inx				inx
.1f3a	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1f3c	20 65 22	jsr $2265			jsr 	MInt32Set8Bit
.1f3f	e8		inx				inx
.1f40	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1f43					ExecSubstring:
.1f43	ca		dex				dex 								; fix up X
.1f44	ca		dex				dex
.1f45	20 c9 22	jsr $22c9			jsr 	CheckRightParen 			; check closing right bracket.
.1f48	8a		txa				txa 								; do the substring and exit.
.1f49	a2 0a		ldx #$0a		ldx	#10
.1f4b	20 61 2c	jsr $2c61		jsr	stringHandler
.1f4e	aa		tax				tax
.1f4f	60		rts				rts
.1f50					ExecMid:
.1f50	20 e9 1c	jsr $1ce9			jsr 	EvaluateString 				; string to stack,X
.1f53	20 d6 22	jsr $22d6			jsr 	CheckComma
.1f56	e8		inx				inx
.1f57	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f5a	c9 00		cmp #$00			cmp 	#0
.1f5c	f0 15		beq $1f73			beq 	_EMValue
.1f5e	e8		inx				inx
.1f5f	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.1f61	20 65 22	jsr $2265			jsr 	MInt32Set8Bit
.1f64	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.1f66	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1f68	f0 d9		beq $1f43			beq 	ExecSubString
.1f6a	20 d6 22	jsr $22d6			jsr 	CheckComma
.1f6d	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f70	4c 43 1f	jmp $1f43			jmp 	ExecSubString
.1f73					_EMValue:
.1f73	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f75	20 c7 24	jsr $24c7		jsr	errorHandler
.1f78					ExecRight:
.1f78	20 e9 1c	jsr $1ce9			jsr 	EvaluateString 				; string to stack,X
.1f7b	20 d6 22	jsr $22d6			jsr 	CheckComma
.1f7e	e8		inx				inx
.1f7f	20 fc 1c	jsr $1cfc			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1f82	ca		dex				dex
.1f83	98		tya				tya
.1f84	48		pha				pha
.1f85	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1f87	85 2a		sta $2a				sta 	temp0
.1f89	b5 50		lda $50,x			lda 	esInt1,x
.1f8b	85 2b		sta $2b				sta 	temp0+1
.1f8d	a0 00		ldy #$00			ldy 	#0 							; point to length
.1f8f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.1f91	18		clc				clc 								; add 1.
.1f92	69 01		adc #$01			adc 	#1
.1f94	38		sec				sec
.1f95	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1f97	f0 02		beq $1f9b			beq		_ERMake1 					; if zero, make it 1.
.1f99	b0 02		bcs $1f9d			bcs		_EROkay
.1f9b					_ERMake1:
.1f9b	a9 01		lda #$01			lda 	#1 							; start position.
.1f9d					_EROkay:
.1f9d	e8		inx				inx 								; set start pos.
.1f9e	95 48		sta $48,x			sta 	esInt0,x
.1fa0	e8		inx				inx
.1fa1	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1fa3	20 65 22	jsr $2265			jsr 	MInt32Set8Bit
.1fa6	68		pla				pla
.1fa7	a8		tay				tay
.1fa8	4c 43 1f	jmp $1f43			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1fab					MInt32And:
.1fab	b5 48		lda $48,x			lda 	esInt0,x
.1fad	35 49		and $49,x			and 	esInt0+1,x
.1faf	95 48		sta $48,x			sta 	esInt0,x
.1fb1	b5 50		lda $50,x			lda 	esInt1,x
.1fb3	35 51		and $51,x			and 	esInt1+1,x
.1fb5	95 50		sta $50,x			sta 	esInt1,x
.1fb7	b5 58		lda $58,x			lda 	esInt2,x
.1fb9	35 59		and $59,x			and 	esInt2+1,x
.1fbb	95 58		sta $58,x			sta 	esInt2,x
.1fbd	b5 60		lda $60,x			lda 	esInt3,x
.1fbf	35 61		and $61,x			and 	esInt3+1,x
.1fc1	95 60		sta $60,x			sta 	esInt3,x
.1fc3	60		rts				rts
.1fc4					MInt32Or:
.1fc4	b5 48		lda $48,x			lda 	esInt0,x
.1fc6	15 49		ora $49,x			ora 	esInt0+1,x
.1fc8	95 48		sta $48,x			sta 	esInt0,x
.1fca	b5 50		lda $50,x			lda 	esInt1,x
.1fcc	15 51		ora $51,x			ora 	esInt1+1,x
.1fce	95 50		sta $50,x			sta 	esInt1,x
.1fd0	b5 58		lda $58,x			lda 	esInt2,x
.1fd2	15 59		ora $59,x			ora 	esInt2+1,x
.1fd4	95 58		sta $58,x			sta 	esInt2,x
.1fd6	b5 60		lda $60,x			lda 	esInt3,x
.1fd8	15 61		ora $61,x			ora 	esInt3+1,x
.1fda	95 60		sta $60,x			sta 	esInt3,x
.1fdc	60		rts				rts
.1fdd					MInt32Xor:
.1fdd	b5 48		lda $48,x			lda 	esInt0,x
.1fdf	55 49		eor $49,x			eor 	esInt0+1,x
.1fe1	95 48		sta $48,x			sta 	esInt0,x
.1fe3	b5 50		lda $50,x			lda 	esInt1,x
.1fe5	55 51		eor $51,x			eor 	esInt1+1,x
.1fe7	95 50		sta $50,x			sta 	esInt1,x
.1fe9	b5 58		lda $58,x			lda 	esInt2,x
.1feb	55 59		eor $59,x			eor 	esInt2+1,x
.1fed	95 58		sta $58,x			sta 	esInt2,x
.1fef	b5 60		lda $60,x			lda 	esInt3,x
.1ff1	55 61		eor $61,x			eor 	esInt3+1,x
.1ff3	95 60		sta $60,x			sta 	esInt3,x
.1ff5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1ff6					MInt32Compare:
.1ff6	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.1ff8	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1ffa	d0 13		bne $200f			bne 	MInt32Compare2
.1ffc	b5 50		lda $50,x			lda 	esInt1,x
.1ffe	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2000	d0 0d		bne $200f			bne 	MInt32Compare2
.2002	b5 58		lda $58,x			lda 	esInt2,x
.2004	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2006	d0 07		bne $200f			bne 	MInt32Compare2
.2008	b5 60		lda $60,x			lda 	esInt3,x
.200a	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.200c	d0 01		bne $200f			bne 	MInt32Compare2
.200e	60		rts				rts
.200f					MInt32Compare2:
.200f	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2011	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2013	b5 50		lda $50,x			lda		esInt1,x
.2015	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2017	b5 58		lda $58,x			lda		esInt2,x
.2019	f5 59		sbc $59,x			sbc 	esInt2+1,x
.201b	b5 60		lda $60,x			lda		esInt3,x
.201d	f5 61		sbc $61,x			sbc 	esInt3+1,x
.201f	50 02		bvc $2023			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2021	49 80		eor #$80			eor 	#$80
.2023					_I32LNoOverflow
.2023	30 03		bmi $2028			bmi 	MInt32CLess					; if -ve then return $FF
.2025	a9 01		lda #$01			lda 	#$01						; else return $01
.2027	60		rts				rts
.2028					MInt32CLess:
.2028	a9 ff		lda #$ff			lda 	#$FF
.202a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.202b					MInt32SDivide:
.202b	98		tya				tya  								; save Y, which is the count of negations
.202c	48		pha				pha
.202d	a0 00		ldy #$00			ldy 	#0 							; zero count
.202f	20 47 20	jsr $2047			jsr 	_MInt32SRemSign 			; unsign TOS
.2032	e8		inx				inx 								; unsign TOS+1
.2033	20 47 20	jsr $2047			jsr 	_MInt32SRemSign
.2036	ca		dex				dex
.2037	98		tya				tya 								; save sign count on stack
.2038	48		pha				pha
.2039	20 50 20	jsr $2050			jsr 	MInt32UDivide 				; unsigned division
.203c	68		pla				pla 								; get sign count back
.203d	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.203f	f0 03		beq $2044			beq 	_I32SNoNeg
.2041	20 10 22	jsr $2210			jsr 	MInt32Negate
.2044					_I32SNoNeg:
.2044	68		pla				pla 								; restoe Y and exit
.2045	a8		tay				tay
.2046	60		rts				rts
.2047					_MInt32SRemSign:
.2047	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2049	10 04		bpl $204f			bpl 	_MInt32SRSExit
.204b	c8		iny				iny 								; increment the sign count
.204c	20 10 22	jsr $2210			jsr 	MInt32Negate 				; negate the value.
.204f					_MInt32SRSExit:
.204f	60		rts				rts
.2050					MInt32UDivide:
.2050	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2052	15 51		ora $51,x			ora 	esInt1+1,x
.2054	15 52		ora $52,x			ora 	esInt1+2,x
.2056	15 53		ora $53,x			ora 	esInt1+3,x
.2058	f0 4a		beq $20a4			beq 	_MInt32DZero
.205a	e8		inx				inx 								; clear A
.205b	e8		inx				inx
.205c	20 56 22	jsr $2256			jsr 	MInt32False
.205f	ca		dex				dex
.2060	ca		dex				dex
.2061	98		tya				tya 								; save Y on the stack
.2062	48		pha				pha
.2063	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2065					_MInt32UDLoop:
.2065	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2067	36 50		rol $50,x			rol 	esInt1,x
.2069	36 58		rol $58,x			rol 	esInt2,x
.206b	36 60		rol $60,x			rol 	esInt3,x
.206d	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.206f	36 52		rol $52,x			rol 	esInt1+2,x
.2071	36 5a		rol $5a,x			rol 	esInt2+2,x
.2073	36 62		rol $62,x			rol 	esInt3+2,x
.2075	38		sec				sec 								; calculate A-M saving result on the stack
.2076	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2078	f5 49		sbc $49,x			sbc 	esInt0+1,x
.207a	48		pha				pha
.207b	b5 52		lda $52,x			lda 	esInt1+2,x
.207d	f5 51		sbc $51,x			sbc 	esInt1+1,x
.207f	48		pha				pha
.2080	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2082	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2084	48		pha				pha
.2085	b5 62		lda $62,x			lda 	esInt3+2,x
.2087	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2089	90 10		bcc $209b			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.208b	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.208d	68		pla				pla
.208e	95 5a		sta $5a,x			sta 	esInt2+2,x
.2090	68		pla				pla
.2091	95 52		sta $52,x			sta 	esInt1+2,x
.2093	68		pla				pla
.2094	95 4a		sta $4a,x			sta 	esInt0+2,x
.2096	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2098	4c 9e 20	jmp $209e			jmp 	_MInt32Next 					; do the next iteration
.209b					_MInt32NoSubtract:
.209b	68		pla				pla
.209c	68		pla				pla
.209d	68		pla				pla
.209e					_MInt32Next:
.209e	88		dey				dey 								; do this 32 times.
.209f	d0 c4		bne $2065			bne 	_MInt32UDLoop
.20a1	68		pla				pla 								; restore Y and exit
.20a2	a8		tay				tay
.20a3	60		rts				rts
.20a4					_MInt32DZero:
.20a4	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.20a6	20 c7 24	jsr $24c7		jsr	errorHandler
.20a9					MInt32Modulus:
.20a9	20 50 20	jsr $2050			jsr 	MInt32UDivide 				; do the division.
.20ac	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.20ae	95 60		sta $60,x			sta 	esInt3,x
.20b0	b5 5a		lda $5a,x			lda 	esInt2+2,x
.20b2	95 58		sta $58,x			sta 	esInt2,x
.20b4	b5 52		lda $52,x			lda 	esInt1+2,x
.20b6	95 50		sta $50,x			sta 	esInt1,x
.20b8	b5 4a		lda $4a,x			lda 	esInt0+2,x
.20ba	95 48		sta $48,x			sta 	esInt0,x
.20bc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0b1c					fs32Length:
>0b1c							.fill 	1
.20bd					LinkInt32FromString:
.20bd	aa		tax				tax
.20be	98		tya				tya
.20bf	20 c4 20	jsr $20c4			jsr 	MInt32FromString
.20c2	8a		txa				txa
.20c3	60		rts				rts
.20c4					MInt32FromString:
.20c4	85 32		sta $32				sta 	tempShort 					; save base
.20c6	98		tya				tya
.20c7	48		pha				pha
.20c8	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.20ca	b1 2a		lda ($2a),y			lda 	(temp0),y
.20cc	8d 1c 0b	sta $0b1c			sta 	fs32Length
.20cf	f0 65		beq $2136			beq 	_I32FSFail2					; fail if length zero.
.20d1	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.20d3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.20d5	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.20d7	d0 09		bne $20e2			bne 	_I32FSNotNegative
.20d9	ad 1c 0b	lda $0b1c			lda 	fs32Length 					; get length back.
.20dc	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.20de	f0 56		beq $2136			beq 	_I32FSFail2
.20e0	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.20e2					_I32FSNotNegative:
.20e2	a5 32		lda $32				lda 	tempShort 					; get the base back.
.20e4	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.20e6	d0 02		bne $20ea			bne 	_I32FSNN2
.20e8	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.20ea					_I32FSNN2:
.20ea	48		pha				pha 								; save base + final sign on stack.
.20eb	20 56 22	jsr $2256			jsr 	MInt32False 				; zero the return value.
.20ee					_I32FSMainLoop:
.20ee	68		pla				pla 								; get the base back into tempShort
.20ef	48		pha				pha
.20f0	29 7f		and #$7f			and 	#$7F
.20f2	85 32		sta $32				sta 	tempShort
.20f4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.20f6	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.20f8	90 02		bcc $20fc			bcc 	_I32FSNotLC
.20fa	e9 20		sbc #$20			sbc 	#32
.20fc					_I32FSNotLC:
.20fc	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.20fd	e9 30		sbc #$30			sbc 	#"0"
.20ff	90 34		bcc $2135			bcc 	_I32FSFail 					; nothing more to do.
.2101	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2103	90 06		bcc $210b			bcc 	_I32FSValidate
.2105	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2107	90 2c		bcc $2135			bcc 	_I32FSFail
.2109	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.210b					_I32FSValidate:
.210b	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.210d	b0 26		bcs $2135			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.210f	48		pha				pha 								; save the new digit value.
.2110	e8		inx				inx 								; put base into next slot up on stack
.2111	a5 32		lda $32				lda 	tempShort
.2113	20 65 22	jsr $2265			jsr 	MInt32Set8Bit
.2116	ca		dex				dex
.2117	20 6e 21	jsr $216e			jsr 	MInt32Multiply 				; multiply current by the base
.211a	e8		inx				inx
.211b	68		pla				pla  								; put additive into next slot
.211c	20 65 22	jsr $2265			jsr 	MInt32Set8Bit
.211f	ca		dex				dex
.2120	20 3a 21	jsr $213a			jsr 	MInt32Add 					; and add it
.2123	c8		iny				iny 								; bump the character pointer
.2124	cc 1c 0b	cpy $0b1c			cpy 	fs32Length 					; until > length.
.2127	f0 c5		beq $20ee			beq 	_I32FSMainLoop
.2129	90 c3		bcc $20ee			bcc 	_I32FSMainLoop
.212b					_I32FSDone:
.212b	68		pla				pla 								; get base/final sign back
.212c	10 03		bpl $2131			bpl 	_I32FSNN3
.212e	20 10 22	jsr $2210			jsr 	MInt32Negate 				; negate the result.
.2131					_I32FSNN3:
.2131	68		pla				pla
.2132	a8		tay				tay
.2133	38		sec				sec
.2134	60		rts				rts
.2135					_I32FSFail:
.2135	68		pla				pla
.2136					_I32FSFail2:
.2136	68		pla				pla
.2137	a8		tay				tay
.2138	18		clc				clc
.2139	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.213a					MInt32Add:
.213a	18		clc				clc
.213b	b5 48		lda $48,x			lda 	esInt0,x
.213d	75 49		adc $49,x			adc 	esInt0+1,x
.213f	95 48		sta $48,x			sta 	esInt0,x
.2141	b5 50		lda $50,x			lda 	esInt1,x
.2143	75 51		adc $51,x			adc 	esInt1+1,x
.2145	95 50		sta $50,x			sta 	esInt1,x
.2147	b5 58		lda $58,x			lda 	esInt2,x
.2149	75 59		adc $59,x			adc 	esInt2+1,x
.214b	95 58		sta $58,x			sta 	esInt2,x
.214d	b5 60		lda $60,x			lda 	esInt3,x
.214f	75 61		adc $61,x			adc 	esInt3+1,x
.2151	95 60		sta $60,x			sta 	esInt3,x
.2153	60		rts				rts
.2154					MInt32Sub:
.2154	38		sec				sec
.2155	b5 48		lda $48,x			lda 	esInt0,x
.2157	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2159	95 48		sta $48,x			sta 	esInt0,x
.215b	b5 50		lda $50,x			lda 	esInt1,x
.215d	f5 51		sbc $51,x			sbc 	esInt1+1,x
.215f	95 50		sta $50,x			sta 	esInt1,x
.2161	b5 58		lda $58,x			lda 	esInt2,x
.2163	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2165	95 58		sta $58,x			sta 	esInt2,x
.2167	b5 60		lda $60,x			lda 	esInt3,x
.2169	f5 61		sbc $61,x			sbc 	esInt3+1,x
.216b	95 60		sta $60,x			sta 	esInt3,x
.216d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.216e					MInt32Multiply:
.216e	e8		inx				inx 								; copy 2nd -> 3rd
.216f	20 94 21	jsr $2194			jsr 	MInt32CopyUp
.2172	ca		dex				dex
.2173	20 94 21	jsr $2194			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2176	20 56 22	jsr $2256			jsr 	MInt32False 				; zero 1st.
.2179					_I32Loop:
.2179	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.217b	29 01		and #$01			and 	#1
.217d	f0 03		beq $2182			beq 	_I32NoAdd 					; if set
.217f	20 3a 21	jsr $213a			jsr 	MInt32Add 					; add 2nd to 1st.
.2182					_I32NoAdd:
.2182	e8		inx				inx 								; shift 2nd left
.2183	20 6b 22	jsr $226b			jsr 	MInt32ShiftLeft
.2186	e8		inx				inx  								; shift 3rd right
.2187	20 74 22	jsr $2274			jsr 	MInt32ShiftRight
.218a	20 7d 22	jsr $227d			jsr 	MInt32Zero 					; check if zero.
.218d	08		php				php 								; save status bits
.218e	ca		dex				dex 	 							; point back to 1st
.218f	ca		dex				dex
.2190	28		plp				plp 								; get status bits
.2191	d0 e6		bne $2179			bne 	_I32Loop 					; if non-zero keep going.
.2193	60		rts				rts
.2194					MInt32CopyUp:
.2194	b5 48		lda $48,x			lda 	esInt0,x
.2196	95 49		sta $49,x			sta 	esInt0+1,x
.2198	b5 50		lda $50,x			lda 	esInt1,x
.219a	95 51		sta $51,x			sta 	esInt1+1,x
.219c	b5 58		lda $58,x			lda 	esInt2,x
.219e	95 59		sta $59,x			sta 	esInt2+1,x
.21a0	b5 60		lda $60,x			lda 	esInt3,x
.21a2	95 61		sta $61,x			sta 	esInt3+1,x
.21a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0b1d					MCharCount:	.fill 	1						; count of converted characters
.21a5					MLInt32ToString:
.21a5	aa		tax				tax									; module passes stack in A, base in Y
.21a6	98		tya				tya
.21a7	20 ac 21	jsr $21ac			jsr 	MInt32ToString
.21aa	8a		txa				txa
.21ab	60		rts				rts
.21ac					MInt32ToString:
.21ac	48		pha				pha 								; save base
.21ad	85 32		sta $32				sta 	tempShort 					; save target base.
.21af	a9 00		lda #$00			lda 	#0
.21b1	8d 1d 0b	sta $0b1d			sta 	MCharCount 					; clear character count to 0
.21b4	98		tya				tya
.21b5	48		pha				pha
.21b6	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.21b8	10 10		bpl $21ca			bpl 	_I32TSUnsigned
.21ba	48		pha				pha 								; save base on stack.
.21bb	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.21bd	10 08		bpl $21c7			bpl 	_I32TSNoFlip
.21bf	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.21c1	20 fd 21	jsr $21fd			jsr 	MI32WriteCharacter
.21c4	20 10 22	jsr $2210			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.21c7					_I32TSNoFlip:
.21c7	68		pla				pla 								; get the base back
.21c8	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.21ca					_I32TSUnsigned:
.21ca	20 d8 21	jsr $21d8			jsr 	MI32DivideWrite 			; recursive code to output string.
.21cd	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.21cf	ad 1d 0b	lda $0b1d			lda 	MCharCount
.21d2	91 2a		sta ($2a),y			sta 	(temp0),y
.21d4	68		pla				pla
.21d5	a8		tay				tay
.21d6	68		pla				pla
.21d7	60		rts				rts
.21d8					MI32DivideWrite:
.21d8	48		pha				pha 								; save the divisor/base
.21d9	e8		inx				inx 								; write in the dividing position.
.21da	20 65 22	jsr $2265			jsr 	MInt32Set8Bit
.21dd	ca		dex				dex
.21de	20 50 20	jsr $2050			jsr 	MInt32UDivide 				; divide number by base.
.21e1	68		pla				pla 								; get the base into Y
.21e2	a8		tay				tay
.21e3	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.21e5	48		pha				pha
.21e6	20 7d 22	jsr $227d			jsr 	MInt32Zero 					; is the result zero ?
.21e9	f0 04		beq $21ef			beq 	_I32NoRecurse 				; if so, don't recurse.
.21eb	98		tya				tya 								; put base into A
.21ec	20 d8 21	jsr $21d8			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.21ef					_I32NoRecurse:
.21ef	68		pla				pla 								; get the remainder back
.21f0	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.21f2	90 02		bcc $21f6			bcc 	_I32NotHex
.21f4	69 06		adc #$06			adc 	#7-1
.21f6					_I32NotHex:
.21f6	18		clc				clc 								; make it ASCII
.21f7	69 30		adc #$30			adc 	#48
.21f9	20 fd 21	jsr $21fd			jsr 	MI32WriteCharacter 			; write the character out
.21fc	60		rts				rts 								; and exit.
.21fd					MI32WriteCharacter:
.21fd	ee 1d 0b	inc $0b1d			inc 	MCharCount 					; bump count (space for leading count)
.2200	ac 1d 0b	ldy $0b1d			ldy 	MCharCount 					; get position
.2203	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2205	c8		iny				iny
.2206	a9 00		lda #$00			lda 	#0
.2208	91 2a		sta ($2a),y			sta 	(temp0),y
.220a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0b1e					MSeed32:	.fill 	4							; random number seed.
.220b					MInt32Absolute:
.220b	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.220d	30 01		bmi $2210			bmi 	MInt32Negate
.220f	60		rts				rts
.2210					MInt32Negate:
.2210	38		sec				sec 								; subtract from zero.
.2211	a9 00		lda #$00			lda 	#0
.2213	f5 48		sbc $48,x			sbc 	esInt0,x
.2215	95 48		sta $48,x			sta 	esInt0,x
.2217	a9 00		lda #$00			lda 	#0
.2219	f5 50		sbc $50,x			sbc 	esInt1,x
.221b	95 50		sta $50,x			sta 	esInt1,x
.221d	a9 00		lda #$00			lda 	#0
.221f	f5 58		sbc $58,x			sbc 	esInt2,x
.2221	95 58		sta $58,x			sta 	esInt2,x
.2223	a9 00		lda #$00			lda 	#0
.2225	f5 60		sbc $60,x			sbc 	esInt3,x
.2227	95 60		sta $60,x			sta 	esInt3,x
.2229	60		rts				rts
.222a					MInt32Not:
.222a	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.222c	49 ff		eor #$ff			eor 	#$FF
.222e	95 48		sta $48,x			sta 	esInt0,x
.2230	b5 50		lda $50,x			lda 	esInt1,x
.2232	49 ff		eor #$ff			eor 	#$FF
.2234	95 50		sta $50,x			sta 	esInt1,x
.2236	b5 58		lda $58,x			lda 	esInt2,x
.2238	49 ff		eor #$ff			eor 	#$FF
.223a	95 58		sta $58,x			sta 	esInt2,x
.223c	b5 60		lda $60,x			lda 	esInt3,x
.223e	49 ff		eor #$ff			eor 	#$FF
.2240	95 60		sta $60,x			sta 	esInt3,x
.2242	60		rts				rts
.2243					MInt32Sign:
.2243	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2245	30 0b		bmi $2252			bmi 	MInt32True 					; if set return -1 (true)
.2247	20 7d 22	jsr $227d			jsr 	MInt32Zero 					; is it zero ?
.224a	f0 0a		beq $2256			beq 	MInt32False 				; if zero return 0 (false)
.224c	20 56 22	jsr $2256			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.224f	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2251	60		rts				rts
.2252					MInt32True:
.2252	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2254	d0 02		bne $2258			bne 	MInt32WriteAll
.2256					MInt32False:
.2256	a9 00		lda #$00			lda 	#0
.2258					MInt32WriteAll:
.2258	95 48		sta $48,x			sta 	esInt0,x
.225a					MInt32Write123:
.225a	95 50		sta $50,x			sta 	esInt1,x
.225c	95 58		sta $58,x			sta 	esInt2,x
.225e	95 60		sta $60,x			sta 	esInt3,x
.2260	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2262	95 40		sta $40,x			sta 	esType,x
.2264	60		rts				rts
.2265					MInt32Set8Bit:
.2265	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2267	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2269	f0 ef		beq $225a			beq		MInt32Write123
.226b					MInt32ShiftLeft:
.226b	16 48		asl $48,x			asl 	esInt0,x
.226d	36 50		rol $50,x			rol	 	esInt1,x
.226f	36 58		rol $58,x			rol	 	esInt2,x
.2271	36 60		rol $60,x			rol	 	esInt3,x
.2273	60		rts				rts
.2274					MInt32ShiftRight:
.2274	56 60		lsr $60,x			lsr 	esInt3,x
.2276	76 58		ror $58,x			ror 	esInt2,x
.2278	76 50		ror $50,x			ror 	esInt1,x
.227a	76 48		ror $48,x			ror 	esInt0,x
.227c	60		rts				rts
.227d					MInt32Zero:
.227d	b5 48		lda $48,x			lda 	esInt0,x
.227f	15 50		ora $50,x			ora 	esInt1,x
.2281	15 58		ora $58,x			ora 	esInt2,x
.2283	15 60		ora $60,x			ora 	esInt3,x
.2285	60		rts				rts
.2286					MInt32Random:
.2286	98		tya				tya
.2287	48		pha				pha
.2288	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.228a	ad 1e 0b	lda $0b1e			lda 	MSeed32+0 					; check the seed isn't zero
.228d	d0 03		bne $2292			bne 	_Random1
.228f	a8		tay				tay 								; if so do it 256 times
.2290	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2292					_Random1:
.2292	0a		asl a				asl 	a
.2293	2e 1f 0b	rol $0b1f			rol 	MSeed32+1
.2296	2e 20 0b	rol $0b20			rol 	MSeed32+2
.2299	2e 21 0b	rol $0b21			rol 	MSeed32+3
.229c	90 02		bcc $22a0			bcc 	_Random2
.229e	49 c5		eor #$c5			eor 	#$C5
.22a0					_Random2:
.22a0	88		dey				dey
.22a1	d0 ef		bne $2292			bne 	_Random1
.22a3	8d 1e 0b	sta $0b1e			sta 	MSeed32+0 					; copy the seed in.
.22a6	95 48		sta $48,x			sta 	esInt0,x
.22a8	ad 1f 0b	lda $0b1f			lda 	MSeed32+1
.22ab	95 50		sta $50,x			sta 	esInt1,x
.22ad	ad 20 0b	lda $0b20			lda 	MSeed32+2
.22b0	95 58		sta $58,x			sta 	esInt2,x
.22b2	ad 21 0b	lda $0b21			lda 	MSeed32+3
.22b5	95 60		sta $60,x			sta 	esInt3,x
.22b7	68		pla				pla
.22b8	a8		tay				tay
.22b9	a9 00		lda #$00			lda 	#0
.22bb	95 40		sta $40,x			sta 	esType,x
.22bd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.22be					CheckToken:
.22be	d1 28		cmp ($28),y			cmp 	(codePtr),y
.22c0	d0 02		bne $22c4			bne 	_CTError
.22c2	c8		iny				iny
.22c3	60		rts				rts
.22c4					_CTError:
.22c4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.22c6	20 c7 24	jsr $24c7		jsr	errorHandler
.22c9					CheckRightParen:
.22c9	b1 28		lda ($28),y			lda 	(codePtr),y
.22cb	c8		iny				iny
.22cc	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.22ce	d0 01		bne $22d1			bne 	_CRPError
.22d0	60		rts				rts
.22d1					_CRPError:
.22d1	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.22d3	20 c7 24	jsr $24c7		jsr	errorHandler
.22d6					CheckComma:
.22d6	b1 28		lda ($28),y			lda 	(codePtr),y
.22d8	c8		iny				iny
.22d9	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.22db	d0 01		bne $22de			bne 	_CCError
.22dd	60		rts				rts
.22de					_CCError:
.22de	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.22e0	20 c7 24	jsr $24c7		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/coldwarmstart.asm

.22e3					ColdStart:
.22e3	a2 ff		ldx #$ff			ldx 	#$FF 						; clear the stack
.22e5	9a		txs				txs
.22e6	a2 04		ldx #$04		ldx	#4
.22e8	20 aa 24	jsr $24aa		jsr	deviceHandler
.22eb	a9 00		lda #$00			lda 	#(programMemory) & $FF
.22ed	8d c8 0a	sta $0ac8			sta 	basePage
.22f0	a9 50		lda #$50			lda 	#(programMemory) >> 8
.22f2	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.22f5	a9 00		lda #$00			lda 	#($9800) & $FF
.22f7	8d cc 0a	sta $0acc			sta 	endMemory
.22fa	a9 98		lda #$98			lda 	#($9800) >> 8
.22fc	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.22ff	a2 00		ldx #$00		ldx	#0
.2301	20 c6 29	jsr $29c6		jsr	interactionHandler
.2304					WarmStart:
.2304	a2 02		ldx #$02		ldx	#2
.2306	20 c6 29	jsr $29c6		jsr	interactionHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.3807					ScanForward:
.3807	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.3809	86 2d		stx $2d				stx 	temp1+1
.380b	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.380d	85 2e		sta $2e				sta 	temp2
.380f	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.3811	c8		iny				iny
.3812	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.3814	d0 08		bne $381e			bne 	_SFNoCheck 					; if so, check token against entered values.
.3816	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.3818	f0 24		beq $383e			beq 	_SFExit 					; at the same strcture depth.
.381a	c5 2d		cmp $2d				cmp 	temp1+1
.381c	f0 20		beq $383e			beq 	_SFExit
.381e					_SFNoCheck:
.381e	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.3820	90 ed		bcc $380f			bcc 	_SFLoop
.3822	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.3824	90 19		bcc $383f			bcc 	_SFSpecials
.3826	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.3828	90 e5		bcc $380f			bcc 	_SFLoop
.382a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.382c	b0 e1		bcs $380f			bcs 	_SFLoop
.382e	aa		tax				tax  								; token in X, and look up the adjuster.
.382f	bd 8d 1b	lda $1b8d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.3832	38		sec				sec 								; convert to an offset ($FF,$01)
.3833	e9 81		sbc #$81			sbc 	#$81
.3835	18		clc				clc 								; add to depth
.3836	65 2e		adc $2e				adc 	temp2
.3838	85 2e		sta $2e				sta 	temp2
.383a	10 d3		bpl $380f			bpl 	_SFLoop 					; +ve okay to continue
.383c	30 35		bmi $3873			bmi 	_SFError 					; if gone -ve then we have a nesting error
.383e	60		rts		_SFExit:rts
.383f					_SFSpecials:
.383f	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.3841	f0 14		beq $3857			beq 	_SFNextLine
.3843	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.3845	f0 31		beq $3878			beq 	_SFFloatSkip
.3847	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.3849	f0 04		beq $384f			beq 	_SFSkipString
.384b	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.384c	4c 0f 38	jmp $380f			jmp 	_SFLoop 					; token.
.384f					_SFSkipString:
.384f	98		tya				tya
.3850	38		sec				sec
.3851	71 28		adc ($28),y			adc 	(codePtr),y
.3853	a8		tay				tay
.3854	4c 0f 38	jmp $380f			jmp 	_SFLoop
.3857					_SFNextLine:
.3857	a0 00		ldy #$00			ldy 	#0 							; get offset
.3859	b1 28		lda ($28),y			lda 	(codePtr),y
.385b	18		clc				clc 								; add to code pointer.
.385c	65 28		adc $28				adc 	codePtr
.385e	85 28		sta $28				sta 	codePtr
.3860	90 02		bcc $3864			bcc		_SFNLNoCarry
.3862	e6 29		inc $29				inc 	codePtr+1
.3864					_SFNLNoCarry:
.3864	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.3866	d0 a7		bne $380f			bne		_SFLoop 					; no go round again
.3868	a5 2c		lda $2c				lda 	temp1
.386a	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.386c	d0 05		bne $3873			bne 	_SFError 					; read uses this to search for data statements
.386e	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.3870	20 c7 24	jsr $24c7		jsr	errorHandler
.3873					_SFError:
.3873	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.3875	20 c7 24	jsr $24c7		jsr	errorHandler
.3878					_SFFloatSkip:
.3878	4c 93 15	jmp $1593			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2309					RSReset:
.2309	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.230b	85 78		sta $78				sta 	rsPointer
.230d	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.230f	85 79		sta $79				sta 	1+(rsPointer)
.2311	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2313	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2316	60		rts				rts
.2317					RSClaim:
.2317	84 32		sty $32				sty 	tempShort 					; preserve Y
.2319	48		pha				pha 								; save marker on stack.
.231a	8a		txa				txa 								; get bytes required.
.231b	38		sec				sec
.231c	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.231e	65 78		adc $78				adc 	rsPointer
.2320	85 78		sta $78				sta 	rsPointer
.2322	a5 79		lda $79				lda 	rsPointer+1
.2324	69 ff		adc #$ff			adc 	#$FF
.2326	85 79		sta $79				sta 	rsPointer+1
.2328	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.232a	90 08		bcc $2334			bcc 	_RSCOverflow
.232c	68		pla				pla 								; get marker back
.232d	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.232f	91 78		sta ($78),y			sta 	(rsPointer),y
.2331	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2333	60		rts				rts
.2334					_RSCOverflow:
.2334	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2336	20 c7 24	jsr $24c7		jsr	errorHandler
.2339					RSFree:
.2339	18		clc				clc
.233a	65 78		adc $78				adc 	rsPointer
.233c	85 78		sta $78				sta 	rsPointer
.233e	90 02		bcc $2342			bcc 	_RSFExit
.2340	e6 79		inc $79				inc 	rsPointer+1
.2342					_RSFExit:
.2342	60		rts				rts
.2343					RSSavePosition:
.2343	84 32		sty $32				sty 	tempShort 					; save Y position
.2345	a8		tay				tay 								; this is where we write it.
.2346	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2348	91 78		sta ($78),y			sta 	(rsPointer),y
.234a	c8		iny				iny
.234b	a5 29		lda $29				lda 	codePtr+1
.234d	91 78		sta ($78),y			sta 	(rsPointer),y
.234f	c8		iny				iny
.2350	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.2352	91 78		sta ($78),y			sta 	(rsPointer),y
.2354	a8		tay				tay 								; fix Y back again to original value
.2355	60		rts				rts
.2356					RSLoadPosition:
.2356	a8		tay				tay
.2357	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2359	85 28		sta $28				sta 	codePtr
.235b	c8		iny				iny
.235c	b1 78		lda ($78),y			lda 	(rsPointer),y
.235e	85 29		sta $29				sta 	codePtr+1
.2360	c8		iny				iny
.2361	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2363	a8		tay				tay 								; to Y
.2364	60		rts				rts

;******  Return to file: main/main.asm

.2365					mainHandler:
.2365	7c 68 23	jmp ($2368,x)			jmp 	(mainVectors,x)
.2368					mainVectors:
>2368	c9 22					.word CheckRightParen      ; index 0
>236a	18 10					.word XCommandClear        ; index 2
>236c	0f 1d					.word LinkEvaluate         ; index 4
>236e	1b 1d					.word LinkEvaluateInteger  ; index 6
>2370	21 1d					.word LinkEvaluateSmallInt ; index 8
>2372	15 1d					.word LinkEvaluateTerm     ; index 10
>2374	a5 21					.word MLInt32ToString      ; index 12
>2376	4b 13					.word Command_XNew         ; index 14
>2378	0f 14					.word PrintString          ; index 16
>237a	35 15					.word Command_RunFrom      ; index 18
>237c	bd 20					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.237e					section_end_main:
.237e					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.237e					assemblerHandler:
.237e	7c 81 23	jmp ($2381,x)			jmp 	(assemblerVectors,x)
.2381					assemblerVectors:

;******  Return to file: basic.asm

.2381					section_end_assembler:
.2381					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.2381					ExternSave:
.2381	98		tya				tya
.2382	48		pha				pha
.2383	20 d1 23	jsr $23d1			jsr 	ExternGetLength 			; get length of file into A name YX
.2386	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.2389	a9 01		lda #$01			lda 	#1
.238b	a2 08		ldx #$08			ldx 	#8	 						; device #8
.238d	a0 00		ldy #$00			ldy 	#0
.238f	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.2392	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.2394	85 2a		sta $2a				sta 	temp0
.2396	a5 51		lda $51				lda 	esInt1+1
.2398	85 2b		sta $2b				sta 	temp0+1
.239a	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.239c	a4 52		ldy $52				ldy 	esInt1+2
.239e	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.23a0	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.23a3	b0 03		bcs $23a8			bcs 	_ESSave
.23a5	68		pla				pla
.23a6	a8		tay				tay
.23a7	60		rts				rts
.23a8					_ESSave:
.23a8	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.23aa	20 c7 24	jsr $24c7		jsr	errorHandler
.23ad					ExternLoad:
.23ad	98		tya				tya
.23ae	48		pha				pha
.23af	20 d1 23	jsr $23d1			jsr 	ExternGetLength 			; get length of file into A name YX
.23b2	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.23b5	a9 01		lda #$01			lda 	#1
.23b7	a2 08		ldx #$08			ldx 	#8	 						; device #8
.23b9	a0 00		ldy #$00			ldy 	#0
.23bb	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.23be	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.23c0	a4 51		ldy $51				ldy 	esInt1+1
.23c2	a9 00		lda #$00			lda 	#0 							; load command
.23c4	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.23c7	b0 03		bcs $23cc			bcs 	_ESLoad
.23c9	68		pla				pla
.23ca	a8		tay				tay
.23cb	60		rts				rts
.23cc					_ESLoad:
.23cc	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.23ce	20 c7 24	jsr $24c7		jsr	errorHandler
.23d1					ExternGetLength:
.23d1	a5 48		lda $48				lda 	esInt0 						; length into A.
.23d3	85 2a		sta $2a				sta 	temp0
.23d5	a5 50		lda $50				lda 	esInt1
.23d7	85 2b		sta $2b				sta 	temp0+1
.23d9	a0 00		ldy #$00			ldy 	#0
.23db	b1 2a		lda ($2a),y			lda 	(temp0),y
.23dd	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.23df	a4 50		ldy $50				ldy 	esInt1
.23e1	e8		inx				inx 								; advance over the length pointer.
.23e2	d0 01		bne $23e5			bne 	_ESNoCarry
.23e4	c8		iny				iny
.23e5					_ESNoCarry:
.23e5	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0b22					bufferCount:
>0b22							.fill 	0
.0b22					bufferStorage:
>0b22							.fill 	MaxLineInputSize
.23e6					IOInitialise:
.23e6	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.23e8	20 11 24	jsr $2411			jsr 	IOPrintChar
.23eb	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.23ed	20 3d 24	jsr $243d			jsr 	IOInk
.23f0	a9 00		lda #$00			lda 	#0
.23f2	20 51 24	jsr $2451			jsr 	IOPaper
.23f5	20 f9 23	jsr $23f9			jsr 	IOClearScreen
.23f8	60		rts				rts
.23f9					IOClearScreen:
.23f9	48		pha				pha
.23fa	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.23fc	20 11 24	jsr $2411			jsr 	IOPrintChar
.23ff	68		pla				pla
.2400	60		rts				rts
.2401					IONewLine:
.2401	48		pha				pha
.2402	a9 0d		lda #$0d			lda 	#13
.2404	20 11 24	jsr $2411			jsr 	IOPrintChar
.2407	68		pla				pla
.2408	60		rts				rts
.2409					IOTab:
.2409	48		pha				pha
.240a	a9 20		lda #$20			lda 	#32
.240c	20 11 24	jsr $2411			jsr 	IOPrintChar
.240f	68		pla				pla
.2410	60		rts				rts
.2411					IOPrintChar:
.2411	aa		tax				tax 								; save in X so we can save Y
.2412	5a		phy				phy
.2413	8a		txa				txa
.2414	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.2416	d0 02		bne $241a			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.2418	a9 14		lda #$14			lda 	#$14
.241a					_IOPCNotBS:
.241a	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.241d	7a		ply				ply
.241e	60		rts				rts
.241f					IOInkey:
.241f	98		tya				tya
.2420	48		pha				pha
.2421	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2424	85 32		sta $32				sta 	tempShort
.2426	68		pla				pla
.2427	a8		tay				tay
.2428	a5 32		lda $32				lda 	tempShort					; no key pressed.
.242a	f0 10		beq $243c			beq 	_IOIExit
.242c	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.242e	f0 0c		beq $243c			beq 	_IOIExit
.2430	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.2432	f0 06		beq $243a			beq 	_IOIBackspace
.2434	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.2436	90 e7		bcc $241f			bcc 	IOInkey
.2438	b0 02		bcs $243c			bcs 	_IOIExit
.243a					_IOIBackspace:
.243a	a9 08		lda #$08			lda 	#8 							; return chr(8)
.243c					_IOIExit:
.243c	60		rts				rts
.243d					IOInk:
.243d	48		pha				pha
.243e	29 07		and #$07			and 	#7 							; 8 primaries
.2440	aa		tax				tax
.2441	bd 49 24	lda $2449,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.2444	20 11 24	jsr $2411			jsr 	IOPrintChar
.2447	68		pla				pla
.2448	60		rts				rts
.2449					_IOColourTable:
>2449	90						.byte 	$90 					; 0 Black
>244a	96						.byte 	$96 					; 1 Red
>244b	1e						.byte 	$1E 					; 2 Green
>244c	9e						.byte 	$9E 					; 3 Yellow
>244d	9a						.byte 	$9A 					; 4 Blue
>244e	9c						.byte 	$9C 					; 5 Magenta
>244f	9f						.byte 	$9F 					; 6 Cyan
>2450	05						.byte 	$05 					; 7 White
.2451					IOPaper:
.2451	48		pha				pha
.2452	48		pha				pha
.2453	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.2455	20 11 24	jsr $2411			jsr 	IOPrintChar 			; and then swap them again.
.2458	68		pla				pla
.2459	20 3d 24	jsr $243d			jsr 	IOInk
.245c	a9 01		lda #$01			lda 	#1
.245e	20 11 24	jsr $2411			jsr 	IOPrintChar
.2461	68		pla				pla
.2462	60		rts				rts
.2463					IOLocate:
.2463	48		pha				pha
.2464	a9 13		lda #$13			lda 	#$13 					; home cursor code
.2466	20 11 24	jsr $2411			jsr 	IOPrintChar
.2469	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.246b	20 72 24	jsr $2472			jsr 	_IOLoc2
.246e	68		pla				pla
.246f	a8		tay				tay
.2470	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.2472					_IOLoc2:
.2472	c0 00		cpy #$00			cpy 	#0
.2474	f0 06		beq $247c			beq 	_IOLocExit
.2476	20 11 24	jsr $2411			jsr 	IOPrintChar
.2479	88		dey				dey
.247a	d0 f6		bne $2472			bne 	_IOLoc2
.247c					_IOLocExit:
.247c	60		rts				rts
.247d					IOInput:
.247d	a9 00		lda #$00			lda 	#0
.247f	8d 22 0b	sta $0b22			sta 	bufferCount
.2482					_IOILoop:
.2482	20 cf ff	jsr $ffcf			jsr 	$FFCF
.2485	c9 0d		cmp #$0d			cmp 	#13
.2487	f0 10		beq $2499			beq 	_IOIExit
.2489	ae 22 0b	ldx $0b22			ldx 	bufferCount
.248c	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.248e	f0 f2		beq $2482			beq 	_IOILoop
.2490	ee 22 0b	inc $0b22			inc 	bufferCount
.2493	9d 23 0b	sta $0b23,x			sta 	bufferStorage+1,x
.2496	4c 82 24	jmp $2482			jmp 	_IOILoop
.2499					_IOIExit:
.2499	a9 22		lda #$22			lda 	#(bufferCount) & $FF
.249b	85 2a		sta $2a				sta 	temp0
.249d	a9 0b		lda #$0b			lda 	#(bufferCount) >> 8
.249f	85 2b		sta $2b				sta 	1+(temp0)
.24a1	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.24a2					IOReadTimer:
.24a2	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.24a5	48		pha				pha
.24a6	8a		txa				txa
.24a7	a8		tay				tay
.24a8	68		pla				pla
.24a9	60		rts				rts

;******  Return to file: device/device.asm

.24aa					deviceHandler:
.24aa	7c ad 24	jmp ($24ad,x)			jmp 	(deviceVectors,x)
.24ad					deviceVectors:
>24ad	f9 23					.word IOClearScreen        ; index 0
>24af	01 24					.word IONewLine            ; index 2
>24b1	e6 23					.word IOInitialise         ; index 4
>24b3	3d 24					.word IOInk                ; index 6
>24b5	1f 24					.word IOInkey              ; index 8
>24b7	7d 24					.word IOInput              ; index 10
>24b9	ad 23					.word ExternLoad           ; index 12
>24bb	63 24					.word IOLocate             ; index 14
>24bd	51 24					.word IOPaper              ; index 16
>24bf	11 24					.word IOPrintChar          ; index 18
>24c1	81 23					.word ExternSave           ; index 20
>24c3	09 24					.word IOTab                ; index 22
>24c5	a2 24					.word IOReadTimer          ; index 24

;******  Return to file: basic.asm

.24c7					section_end_device:
.24c7					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.24c7					ErrorHandler:
.24c7	8a		txa				txa
.24c8	48		pha				pha
.24c9	a9 01		lda #$01			lda 	#1 							; red
.24cb	a2 06		ldx #$06		ldx	#6
.24cd	20 aa 24	jsr $24aa		jsr	deviceHandler
.24d0	68		pla				pla
.24d1	aa		tax				tax
.24d2	a9 43		lda #$43			lda 	#(ErrorTextList) & $FF
.24d4	85 2a		sta $2a				sta 	temp0
.24d6	a9 25		lda #$25			lda 	#(ErrorTextList) >> 8
.24d8	85 2b		sta $2b				sta 	1+(temp0)
.24da	ca		dex		_EHFind:dex									; errors start at 1
.24db	f0 10		beq $24ed			beq 	_EHFound
.24dd	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.24df	38		sec				sec
.24e0	a5 2a		lda $2a				lda 	temp0
.24e2	71 2a		adc ($2a),y			adc 	(temp0),y
.24e4	85 2a		sta $2a				sta 	temp0
.24e6	90 f2		bcc $24da			bcc 	_EHFind
.24e8	e6 2b		inc $2b				inc 	temp0+1
.24ea	4c da 24	jmp $24da			jmp 	_EHFind
.24ed					_EHFound:
.24ed	a2 10		ldx #$10		ldx	#16
.24ef	20 65 23	jsr $2365		jsr	mainHandler
.24f2	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.24f4	b1 28		lda ($28),y			lda 	(codePtr),y
.24f6	f0 3d		beq $2535			beq 	_EHNoLine
.24f8	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.24fa	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.24fd	90 36		bcc $2535			bcc 	_EHNoLine
.24ff	a9 3f		lda #$3f			lda 	#(EHAtMsg) & $FF
.2501	85 2a		sta $2a				sta 	temp0
.2503	a9 25		lda #$25			lda 	#(EHAtMsg) >> 8
.2505	85 2b		sta $2b				sta 	1+(temp0)
.2507	a2 10		ldx #$10		ldx	#16
.2509	20 65 23	jsr $2365		jsr	mainHandler
.250c	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.250e	a2 00		ldx #$00			ldx 	#0
.2510	b1 28		lda ($28),y			lda 	(codePtr),y
.2512	95 48		sta $48,x			sta 	esInt0,x
.2514	c8		iny				iny
.2515	b1 28		lda ($28),y			lda 	(codePtr),y
.2517	95 50		sta $50,x			sta 	esInt1,x
.2519	a9 00		lda #$00			lda 	#0
.251b	95 58		sta $58,x			sta 	esInt2,x
.251d	95 60		sta $60,x			sta 	esInt3,x
.251f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2521	85 2a		sta $2a				sta 	temp0
.2523	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2525	85 2b		sta $2b				sta 	1+(temp0)
.2527	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.2529	a9 00		lda #$00			lda 	#0							; stack position zero.
.252b	a2 0c		ldx #$0c		ldx	#12
.252d	20 65 23	jsr $2365		jsr	mainHandler
.2530	a2 10		ldx #$10		ldx	#16
.2532	20 65 23	jsr $2365		jsr	mainHandler
.2535					_EHNoLine:
.2535	a2 02		ldx #$02		ldx	#2
.2537	20 aa 24	jsr $24aa		jsr	deviceHandler
.253a	a2 02		ldx #$02		ldx	#2
.253c	20 c6 29	jsr $29c6		jsr	interactionHandler
.253f					EHAtMsg:
>253f	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.2543					ErrorTextList:
>2543	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>254b	20 6e 6f 74 20 50 72 65 73 65 6e 74
>2557	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>255f	45 72 72 6f 72
>2564	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>256c	64 69 73 61 62 6c 65 64
>2574	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>257c	6f 6e 20 66 61 69 6c 65 64
>2585	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>258d	42 79 20 5a 65 72 6f
>2594	04 53 74 6f 70				.text 4,"Stop"
>2599	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>25a1	73 6d 61 74 63 68
>25a7	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>25af	20 56 61 6c 75 65
>25b5	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>25bd	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>25cb	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>25d3	20 63 6f 6d 6d 61
>25d9	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>25e1	20 72 65 66 65 72 65 6e 63 65
>25eb	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>25f3	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>2601	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>2609	74 6f 6f 20 6c 6f 6e 67 2e
>2612	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>261a	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>2627	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>262f	69 74 68 6f 75 74 20 52 45 50 45 41 54
>263c	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>2644	74 68 6f 75 74 20 46 4f 52
>264d	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>2655	74 68 6f 75 74 20 57 48 49 4c 45
>2660	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>2668	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>2675	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>267d	54 20 69 6e 64 65 78
>2684	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>268c	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>269c	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>26a4	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>26b3	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>26bb	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>26cb	63 65 2e
>26ce	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>26d6	20 50 72 6f 63 65 64 75 72 65
>26e0	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>26e8	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>26f8	2e
>26f9	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>2701	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>270f	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>2717	75 69 72 65 73 20 61 72 72 61 79
>2722	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>272a	61 79 20 69 6e 64 65 78 2e
>2733	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>273b	64 61 74 61
>273f	15 43 61 6e 6e 6f 74 20			.text 21,"Cannot tokenise line."
>2747	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65 2e
>2755	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>275d	69 6c 65 64
>2761	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>2769	69 6c 65 64
>276d	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.276e					section_end_error:
.276e					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.276e					ExtensionHandler:
.276e	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.2770	d0 08		bne $277a			bne 	_ExtensionUnary 			; is passed in A.
.2772	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.2774	c8		iny				iny
.2775	0a		asl a				asl 	a
.2776	aa		tax				tax
.2777	7c 78 27	jmp ($2778,x)			jmp 	(Group2Vectors-12,x)
.277a					_ExtensionUnary:
.277a	48		pha				pha 								; save stack pos in A
.277b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.277d	c8		iny				iny
.277e	0a		asl a				asl 	a
.277f	aa		tax				tax
.2780	68		pla				pla 								; restore stack pos and call group3 command.
.2781	7c 7c 27	jmp ($277c,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.2784					Group2Vectors:
>2784	94 27					.word	Command_VPoke            ; $86 vpoke
>2786	97 27					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.2788					Group3Vectors:
>2788	d8 27					.word	Command_VPeek            ; $86 vpeek(
>278a	db 27					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.278c					XEvaluateInteger:
.278c	8a		txa				txa
.278d	a2 06		ldx #$06		ldx	#6
.278f	20 65 23	jsr $2365		jsr	mainHandler
.2792	aa		tax				tax
.2793	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.2794					Command_VPoke:
.2794	38		sec				sec 						; one byte , CS
.2795	b0 01		bcs $2798			bcs 	CmdVideoWrite
.2797					Command_VDoke:
.2797	18		clc				clc 						; two bytes, CC
.2798					CmdVideoWrite:
.2798	08		php				php 						; save one or two btes
.2799	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.279b	20 8c 27	jsr $278c			jsr 	XEvaluateInteger
.279e	20 d6 22	jsr $22d6			jsr 	CheckComma
.27a1	e8		inx				inx
.27a2	20 8c 27	jsr $278c			jsr 	XEvaluateInteger
.27a5	ca		dex				dex
.27a6	20 b7 27	jsr $27b7			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.27a9	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.27ab	8d 23 9f	sta $9f23			sta 	$9F23
.27ae	28		plp				plp 						; if it was Poke then exit
.27af	b0 05		bcs $27b6			bcs 	_CVWExit
.27b1	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.27b3	8d 23 9f	sta $9f23			sta 	$9F23
.27b6					_CVWExit:
.27b6	60		rts				rts
.27b7					SetUpTOSVRamAddress:
.27b7	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.27b9	29 01		and #$01			and 	#1
.27bb	15 60		ora $60,x			ora 	esInt3,x
.27bd	d0 14		bne $27d3			bne 	CVWValue
.27bf	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.27c1	8d 20 9f	sta $9f20			sta 	$9F20
.27c4	b5 50		lda $50,x			lda 	esInt1,x
.27c6	8d 21 9f	sta $9f21			sta	 	$9F21
.27c9	b5 58		lda $58,x			lda 	esInt2,x
.27cb	29 01		and #$01			and 	#1
.27cd	09 10		ora #$10			ora 	#$10 				; step 1.
.27cf	8d 22 9f	sta $9f22			sta 	$9F22
.27d2	60		rts				rts
.27d3					CVWValue:
.27d3	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.27d5	20 c7 24	jsr $24c7		jsr	errorHandler
.27d8					Command_VPeek:
.27d8	38		sec				sec 						; one byte , CS
.27d9	b0 01		bcs $27dc			bcs 	CmdVideoRead
.27db					Command_VDeek:
.27db	18		clc				clc 						; two bytes, CC
.27dc					CmdVideoRead:
.27dc	08		php				php 						; save action on stack.
.27dd	aa		tax				tax 						; save stack position
.27de	20 8c 27	jsr $278c			jsr 	XEvaluateInteger 	; address
.27e1	20 c9 22	jsr $22c9			jsr 	CheckRightParen 	; closing right bracket.
.27e4	20 b7 27	jsr $27b7			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.27e7	20 56 22	jsr $2256			jsr 	MInt32False 		; zero return.
.27ea	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.27ed	95 48		sta $48,x			sta 	esInt0,x
.27ef	28		plp				plp 						; check if DOKE (carry was clear)
.27f0	b0 05		bcs $27f7			bcs 	_CVRExit
.27f2	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.27f5	95 50		sta $50,x			sta 	esInt1,x
.27f7					_CVRExit:
.27f7	8a		txa				txa 						; return X position.
.27f8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.27f9					section_end_extension:
.27f9					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.27f9					floatingpointHandler:
.27f9	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.27fb	20 c7 24	jsr $24c7		jsr	errorHandler

;******  Return to file: basic.asm

.27fe					section_end_floatingpoint:
.27fe					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.27fe					ColdStartEntry:
.27fe	a2 ff		ldx #$ff			ldx 	#$FF
.2800	9a		txs				txs
.2801	a2 00		ldx #$00		ldx	#0
.2803	20 aa 24	jsr $24aa		jsr	deviceHandler
.2806	a0 ff		ldy #$ff			ldy 	#255
.2808					_CSBanner:
.2808	c8		iny				iny
.2809	b9 2a 28	lda $282a,y			lda 	Intro,y
.280c	f0 14		beq $2822			beq 	_CSStart
.280e	c9 08		cmp #$08			cmp 	#8
.2810	90 08		bcc $281a			bcc 	_CSInk
.2812	a2 12		ldx #$12		ldx	#18
.2814	20 aa 24	jsr $24aa		jsr	deviceHandler
.2817	4c 08 28	jmp $2808			jmp 	_CSBanner
.281a					_CSInk:
.281a	a2 06		ldx #$06		ldx	#6
.281c	20 aa 24	jsr $24aa		jsr	deviceHandler
.281f	4c 08 28	jmp $2808			jmp 	_CSBanner
.2822					_CSStart:
.2822	a2 02		ldx #$02		ldx	#2
.2824	20 65 23	jsr $2365		jsr	mainHandler
.2827	4c 3e 29	jmp $293e			jmp 	WarmStartEntry
>282a	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2832	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2842	20 2a 2a 2a 0d 0d
>2848	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>2850	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>2860	32 30 32 31 0d 0d
>2866	02 42 61 73 69 63 20				.text 	2,"Basic "
>286d	30 2e 31 32					.text "0.12"
>2871	20 28						.text 	" ("
>2873	31 31 2d 4d 61 72 2d 32				.text "11-Mar-21"
>287b	31
>287c	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2880					DeleteLine:
.2880	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2883	85 2a		sta $2a				sta 	temp0
.2885	ad c9 0a	lda $0ac9			lda 	basePage+1
.2888	85 2b		sta $2b				sta 	temp0+1
.288a	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.288c	a5 48		lda $48				lda 	esInt0
.288e	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2890	d0 07		bne $2899			bne 	_DLNext
.2892	c8		iny				iny
.2893	a5 50		lda $50				lda 	esInt1
.2895	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2897	f0 0a		beq $28a3			beq 	_DLFound
.2899	20 c1 28	jsr $28c1	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.289c	d0 ec		bne $288a			bne 	_DLLoop
.289e	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.28a0	b1 2a		lda ($2a),y			lda 	(temp0),y
.28a2	60		rts				rts
.28a3					_DLFound:
.28a3	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.28a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.28a7	a8		tay				tay
.28a8	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.28aa					_DLCopyDown:
.28aa	b1 2a		lda ($2a),y			lda 	(temp0),y
.28ac	81 2a		sta ($2a,x)			sta 	(temp0,x)
.28ae	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.28b0	d0 02		bne $28b4			bne 	_DLNoCarry
.28b2	e6 2b		inc $2b				inc 	temp0+1
.28b4					_DLNoCarry:
.28b4	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.28b6	c5 35		cmp $35				cmp 	lowMemory
.28b8	d0 f0		bne $28aa			bne 	_DLCopyDown
.28ba	a5 2b		lda $2b				lda 	temp0+1
.28bc	c5 36		cmp $36				cmp 	lowMemory+1
.28be	d0 ea		bne $28aa			bne 	_DLCopyDown
.28c0	60		rts				rts
.28c1					IAdvanceTemp0:
.28c1	84 32		sty $32				sty 	tempShort
.28c3	18		clc				clc
.28c4	a0 00		ldy #$00			ldy 	#0
.28c6	b1 2a		lda ($2a),y			lda 	(temp0),y
.28c8	65 2a		adc $2a				adc 	temp0
.28ca	85 2a		sta $2a				sta 	temp0
.28cc	90 02		bcc $28d0			bcc 	_IATNoCarry
.28ce	e6 2b		inc $2b				inc 	temp0+1
.28d0					_IATNoCarry:
.28d0	b1 2a		lda ($2a),y			lda 	(temp0),y
.28d2	a4 32		ldy $32				ldy 	tempShort
.28d4	c9 00		cmp #$00			cmp		#0
.28d6	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.28d7					InsertLine:
.28d7	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.28da	85 2a		sta $2a				sta 	temp0
.28dc	ad c9 0a	lda $0ac9			lda 	basePage+1
.28df	85 2b		sta $2b				sta 	temp0+1
.28e1					_ILLoop:
.28e1	a0 01		ldy #$01			ldy 	#1
.28e3	b1 2a		lda ($2a),y			lda 	(temp0),y
.28e5	c5 48		cmp $48				cmp 	esInt0
.28e7	c8		iny				iny
.28e8	b1 2a		lda ($2a),y			lda 	(temp0),y
.28ea	e5 50		sbc $50				sbc 	esInt1
.28ec	b0 05		bcs $28f3			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.28ee	20 c1 28	jsr $28c1			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.28f1	d0 ee		bne $28e1			bne 	_ILLoop
.28f3					_ILFound:
.28f3	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.28f5	85 2c		sta $2c				sta 	temp1
.28f7	a5 36		lda $36				lda 	lowMemory+1
.28f9	85 2d		sta $2d				sta 	temp1+1
.28fb	ad 1a 0d	lda $0d1a			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.28fe	18		clc				clc
.28ff	69 03		adc #$03			adc 	#3
.2901	a8		tay				tay
.2902	a2 00		ldx #$00			ldx 	#0
.2904	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.2906	91 2c		sta ($2c),y			sta 	(temp1),y
.2908	a5 2c		lda $2c				lda 	temp1
.290a	c5 2a		cmp $2a				cmp 	temp0
.290c	d0 06		bne $2914			bne 	_ILMNext
.290e	a5 2d		lda $2d				lda 	temp1+1
.2910	c5 2b		cmp $2b				cmp 	temp0+1
.2912	f0 0b		beq $291f			beq 	_ILMCopy
.2914					_ILMNext:
.2914	a5 2c		lda $2c				lda 	temp1
.2916	d0 02		bne $291a			bne 	_ILNoBorrow
.2918	c6 2d		dec $2d				dec 	temp1+1
.291a					_ILNoBorrow:
.291a	c6 2c		dec $2c				dec 	temp1
.291c	4c 04 29	jmp $2904			jmp 	_ILMove
.291f					_ILMCopy:
.291f	98		tya				tya 								; Y is the offset of the new line.
.2920	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2922	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2924	a5 48		lda $48				lda 	esInt0
.2926	91 2a		sta ($2a),y			sta 	(temp0),y
.2928	c8		iny				iny
.2929	a5 50		lda $50				lda 	esInt1
.292b	91 2a		sta ($2a),y			sta 	(temp0),y
.292d	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.292f					_ILMCopy2:
.292f	b1 28		lda ($28),y			lda 	(codePtr),y
.2931	c8		iny				iny
.2932	c8		iny				iny
.2933	c8		iny				iny
.2934	91 2a		sta ($2a),y			sta 	(temp0),y
.2936	88		dey				dey
.2937	88		dey				dey
.2938	cc 1a 0d	cpy $0d1a			cpy 	tokenBufferIndex
.293b	d0 f2		bne $292f			bne 	_ILMCopy2
.293d	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.293e					WarmStartEntry:
.293e	a2 ff		ldx #$ff			ldx 	#$FF
.2940	9a		txs				txs
.2941	a9 02		lda #$02			lda 	#2							; green text.
.2943	a2 06		ldx #$06		ldx	#6
.2945	20 aa 24	jsr $24aa		jsr	deviceHandler
.2948	a2 0a		ldx #$0a		ldx	#10
.294a	20 aa 24	jsr $24aa		jsr	deviceHandler
.294d	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.294f	85 28		sta $28				sta 	codePtr
.2951	a5 2b		lda $2b				lda 	temp0+1
.2953	85 29		sta $29				sta 	codePtr+1
.2955	a2 02		ldx #$02		ldx	#2
.2957	20 aa 24	jsr $24aa		jsr	deviceHandler
.295a	a2 04		ldx #$04		ldx	#4
.295c	20 0d 33	jsr $330d		jsr	tokeniserHandler
.295f	90 25		bcc $2986			bcc 	WSEError 					; failed.
.2961	a9 17		lda #$17			lda 	#(tokenHeader) & $FF
.2963	85 28		sta $28				sta 	codePtr
.2965	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.2967	85 29		sta $29				sta 	1+(codePtr)
.2969	ad 1a 0c	lda $0c1a			lda 	tokenBuffer 				; is it a blank line, go get another line.
.296c	c9 80		cmp #$80			cmp 	#$80
.296e	f0 ce		beq $293e			beq 	WarmStartEntry
.2970	29 c0		and #$c0			and 	#$C0						; does it start with a number
.2972	c9 40		cmp #$40			cmp 	#$40
.2974	f0 15		beq $298b			beq 	HasLineNumber
.2976	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2978	8d 17 0c	sta $0c17			sta 	tokenHeader 				; fake program line.
.297b	8d 18 0c	sta $0c18			sta 	tokenHeader+1
.297e	8d 19 0c	sta $0c19			sta 	tokenHeader+2
.2981	a2 12		ldx #$12		ldx	#18
.2983	20 65 23	jsr $2365		jsr	mainHandler
.2986					WSEError:
.2986	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.2988	20 c7 24	jsr $24c7		jsr	errorHandler
.298b					HasLineNumber:
.298b	a0 03		ldy #$03			ldy 	#3 							; get line number
.298d	a9 00		lda #$00			lda 	#0
.298f	a2 06		ldx #$06		ldx	#6
.2991	20 65 23	jsr $2365		jsr	mainHandler
.2994	a5 58		lda $58				lda 	esInt2		 				; check in range.
.2996	05 60		ora $60				ora 	esInt3
.2998	d0 ec		bne $2986			bne 	WSEError
.299a	98		tya				tya 								; make codePtr point to code after the line number.
.299b	18		clc				clc
.299c	65 28		adc $28				adc 	codePtr
.299e	85 28		sta $28				sta 	codePtr
.29a0	90 02		bcc $29a4			bcc		_HLNNoCarry
.29a2	e6 29		inc $29				inc 	codePtr+1
.29a4					_HLNNoCarry:
.29a4	98		tya				tya 								; subtract that offset from the code buffer index
.29a5	38		sec				sec
.29a6	49 ff		eor #$ff			eor 	#$FF
.29a8	6d 1a 0d	adc $0d1a			adc 	tokenBufferIndex
.29ab	18		clc				clc 								; add space allowing for header & $80 trailer
.29ac	69 04		adc #$04			adc 	#4
.29ae	8d 1a 0d	sta $0d1a			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.29b1	20 80 28	jsr $2880			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.29b4					_HLNNoDelete:
.29b4	ad 1a 0d	lda $0d1a			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.29b7	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.29b9	f0 03		beq $29be			beq 	_HLMEditDone
.29bb	20 d7 28	jsr $28d7			jsr 	InsertLine 					; insert the line in
.29be					_HLMEditDone:
.29be	a2 02		ldx #$02		ldx	#2
.29c0	20 65 23	jsr $2365		jsr	mainHandler
.29c3	4c 3e 29	jmp $293e			jmp 	WarmStartEntry

;******  Return to file: interaction/interaction.asm

.29c6					interactionHandler:
.29c6	7c c9 29	jmp ($29c9,x)			jmp 	(interactionVectors,x)
.29c9					interactionVectors:
>29c9	fe 27					.word ColdStartEntry       ; index 0
>29cb	3e 29					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.29cd					section_end_interaction:
.29cd					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.29cd					StringChrs:
.29cd	aa		tax				tax 								; set up stack
.29ce	a9 02		lda #$02			lda 	#2
.29d0	20 87 2a	jsr $2a87			jsr 	AllocateSoftString
.29d3	98		tya				tya
.29d4	20 ad 2a	jsr $2aad			jsr 	WriteSoftString
.29d7	20 dc 29	jsr $29dc			jsr 	ReturnSoftString
.29da	8a		txa				txa
.29db	60		rts				rts
.29dc					ReturnSoftString:
.29dc	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.29de	95 48		sta $48,x			sta 	esInt0,x
.29e0	a5 7b		lda $7b				lda 	softMemAlloc+1
.29e2	95 50		sta $50,x			sta 	esInt1,x
.29e4	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.29e6	95 58		sta $58,x			sta 	esInt2,x
.29e8	95 60		sta $60,x			sta 	esInt3,x
.29ea	a9 40		lda #$40			lda 	#$40 						; type string.
.29ec	95 40		sta $40,x			sta 	esType,x
.29ee	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.29ef					STRCompare:
.29ef	48		pha				pha 								; save A
.29f0	aa		tax				tax 								; put stack pos in X
.29f1	98		tya				tya
.29f2	48		pha				pha
.29f3	20 27 2a	jsr $2a27			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.29f6	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.29f8	b1 2a		lda ($2a),y			lda 	(temp0),y
.29fa	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.29fc	90 02		bcc $2a00			bcc 	_SCNotSmaller
.29fe	b1 2c		lda ($2c),y			lda 	(temp1),y
.2a00					_SCNotSmaller:
.2a00	aa		tax				tax 								; put that in X. We compare this many chars first.
.2a01					_SCCompareLoop:
.2a01	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2a03	f0 0c		beq $2a11			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2a05	ca		dex				dex 								; decrement chars to compare.
.2a06	c8		iny				iny 								; move to next character
.2a07	38		sec				sec 								; calculate s1[y]-s2[y]
.2a08	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a0a	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2a0c	d0 0a		bne $2a18			bne 	_SCReturnResult 			; if different return sign of A
.2a0e	4c 01 2a	jmp $2a01			jmp 	_SCCompareLoop
.2a11					_SCSameToEndShortest
.2a11	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2a13	38		sec				sec
.2a14	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a16	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2a18					_SCReturnResult:
.2a18	08		php				php 								; set return to zero preserving PSW.
.2a19	a2 00		ldx #$00			ldx 	#0
.2a1b	28		plp				plp
.2a1c	f0 05		beq $2a23			beq 	_SCExit 					; two values equal, then exit
.2a1e	ca		dex				dex 								; X = $FF
.2a1f	90 02		bcc $2a23			bcc 	_SCExit 					; if 1st < 2nd then -1
.2a21	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2a23					_SCExit:
.2a23	68		pla				pla
.2a24	a8		tay				tay
.2a25	68		pla				pla
.2a26	60		rts				rts
.2a27					CopyStringPair:
.2a27	b5 49		lda $49,x			lda 	esInt0+1,x
.2a29	85 2c		sta $2c				sta 	temp1
.2a2b	b5 51		lda $51,x			lda 	esInt1+1,x
.2a2d	85 2d		sta $2d				sta 	temp1+1
.2a2f					CopyStringTop:
.2a2f	b5 48		lda $48,x			lda 	esInt0,x
.2a31	85 2a		sta $2a				sta 	temp0
.2a33	b5 50		lda $50,x			lda 	esInt1,x
.2a35	85 2b		sta $2b				sta 	temp0+1
.2a37	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2a38					StringConcat:
.2a38	aa		tax				tax									; stack pos in X
.2a39	98		tya				tya
.2a3a	48		pha				pha
.2a3b	20 27 2a	jsr $2a27			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2a3e	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2a3f	a0 00		ldy #$00			ldy 	#0
.2a41	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a43	71 2c		adc ($2c),y			adc 	(temp1),y
.2a45	b0 1c		bcs $2a63			bcs 	_SCError 					; just too many characters here.
.2a47	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2a49	b0 18		bcs $2a63			bcs 	_SCError
.2a4b	20 87 2a	jsr $2a87			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2a4e	20 7e 2a	jsr $2a7e			jsr 	CopySoftToStack 			; copy that to the stack.
.2a51	20 68 2a	jsr $2a68			jsr 	SCCopyTemp0 				; copy temp0
.2a54	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.2a56	85 2a		sta $2a				sta 	temp0
.2a58	a5 2d		lda $2d				lda 	temp1+1
.2a5a	85 2b		sta $2b				sta 	temp0+1
.2a5c	20 68 2a	jsr $2a68			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2a5f	68		pla				pla
.2a60	a8		tay				tay
.2a61	8a		txa				txa 								; and A
.2a62	60		rts				rts
.2a63					_SCError:
.2a63	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2a65	20 c7 24	jsr $24c7		jsr	errorHandler
.2a68					SCCopyTemp0:
.2a68	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2a6a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a6c	85 2e		sta $2e				sta 	temp2
.2a6e					_SCCopyLoop:
.2a6e	a5 2e		lda $2e				lda 	temp2 						; done the lot
.2a70	f0 0b		beq $2a7d			beq 	_SCCopyExit
.2a72	c6 2e		dec $2e				dec 	temp2
.2a74	c8		iny				iny 								; get next char
.2a75	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a77	20 ad 2a	jsr $2aad			jsr 	WriteSoftString 			; write to soft string.
.2a7a	4c 6e 2a	jmp $2a6e			jmp 	_SCCopyLoop
.2a7d					_SCCopyExit:
.2a7d	60		rts				rts
.2a7e					CopySoftToStack:
.2a7e	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2a80	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2a82	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2a84	95 50		sta $50,x			sta 	esInt1,x
.2a86	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2a87					AllocateSoftString:
.2a87	85 32		sta $32				sta 	tempShort 					; save count
.2a89	98		tya				tya
.2a8a	48		pha				pha
.2a8b	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2a8d	d0 09		bne $2a98			bne 	_ASSDone
.2a8f	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.2a91	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2a93	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2a95	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2a96	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.2a98					_ASSDone:
.2a98	38		sec				sec 								; allocate downwards enough memory
.2a99	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2a9b	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.2a9d	85 7a		sta $7a				sta 	softMemAlloc
.2a9f	a5 7b		lda $7b				lda 	softMemAlloc+1
.2aa1	e9 00		sbc #$00			sbc 	#0
.2aa3	85 7b		sta $7b				sta 	softMemAlloc+1
.2aa5	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2aa7	a8		tay				tay
.2aa8	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2aaa	68		pla				pla
.2aab	a8		tay				tay
.2aac	60		rts				rts
.2aad					WriteSoftString:
.2aad	84 32		sty $32				sty 	tempShort 					; save Y
.2aaf	48		pha				pha 								; save character on stack
.2ab0	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2ab2	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2ab4	18		clc				clc
.2ab5	69 01		adc #$01			adc 	#1
.2ab7	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2ab9	a8		tay				tay 								; offset in Y
.2aba	68		pla				pla 								; get char and write.
.2abb	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2abd	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.2abf	60		rts				rts
.2ac0					StrClone:
.2ac0	aa		tax				tax 								; set up stack.
.2ac1	98		tya				tya
.2ac2	48		pha				pha
.2ac3	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2ac5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.2ac7	18		clc				clc
.2ac8	69 01		adc #$01			adc 	#1
.2aca	20 87 2a	jsr $2a87			jsr 	AllocateSoftString 			; allocate soft memory
.2acd	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2acf	95 48		sta $48,x			sta 	esInt0,x
.2ad1	a5 7b		lda $7b				lda 	softMemAlloc+1
.2ad3	95 50		sta $50,x			sta 	esInt1,x
.2ad5	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2ad7	95 58		sta $58,x			sta 	esInt2,x
.2ad9	95 60		sta $60,x			sta 	esInt3,x
.2adb	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2add	95 40		sta $40,x			sta 	esType,x
.2adf	20 68 2a	jsr $2a68			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2ae2	68		pla				pla
.2ae3	a8		tay				tay
.2ae4	8a		txa				txa
.2ae5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2ae6					CaseString:
.2ae6	48		pha				pha 								; save A and copy to X
.2ae7	aa		tax				tax
.2ae8	98		tya				tya
.2ae9	48		pha				pha
.2aea	20 2f 2a	jsr $2a2f			jsr 	CopyStringTop 				; target string -> temp0
.2aed	a0 00		ldy #$00			ldy 	#0
.2aef	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.2af1	18		clc				clc
.2af2	69 01		adc #$01			adc 	#1 							; one more for length byte
.2af4	20 87 2a	jsr $2a87			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2af7	20 7e 2a	jsr $2a7e			jsr 	CopySoftToStack 			; copy that to the stack.
.2afa	a0 00		ldy #$00			ldy 	#0
.2afc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.2afe	aa		tax				tax
.2aff					_CSCopy:
.2aff	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2b01	f0 24		beq $2b27			beq 	_CSExit
.2b03	ca		dex				dex
.2b04	c8		iny				iny
.2b05	68		pla				pla 								; check direction
.2b06	48		pha				pha
.2b07	f0 0c		beq $2b15			beq 	_CSUpper
.2b09	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.2b0b	c9 41		cmp #$41			cmp 	#"A"
.2b0d	90 12		bcc $2b21			bcc 	_CSWrite
.2b0f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2b11	b0 0e		bcs $2b21			bcs 	_CSWrite
.2b13	90 0a		bcc $2b1f			bcc 	_CSFlipWrite
.2b15					_CSUpper:
.2b15	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.2b17	c9 61		cmp #$61			cmp 	#"a"
.2b19	90 06		bcc $2b21			bcc 	_CSWrite
.2b1b	c9 7b		cmp #$7b			cmp 	#"z"+1
.2b1d	b0 02		bcs $2b21			bcs 	_CSWrite
.2b1f					_CSFlipWrite:
.2b1f	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2b21					_CSWrite:
.2b21	20 ad 2a	jsr $2aad			jsr 	WriteSoftString 			; add to soft string.
.2b24	4c ff 2a	jmp $2aff			jmp 	_CSCopy
.2b27					_CSExit:
.2b27	68		pla				pla
.2b28	a8		tay				tay
.2b29	68		pla				pla
.2b2a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2b2b					StringSubstring:
.2b2b	48		pha				pha
.2b2c	aa		tax				tax 								; access stack.
.2b2d	98		tya				tya
.2b2e	48		pha				pha
.2b2f	20 2f 2a	jsr $2a2f			jsr 	CopyStringTop 				; point temp0 to the string.
.2b32	a0 00		ldy #$00			ldy 	#0 							; get length.
.2b34	b1 2a		lda ($2a),y			lda 	(temp0),Y
.2b36	85 2c		sta $2c				sta 	temp1
.2b38	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2b3a	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.2b3c	f0 02		beq $2b40			beq 	_SSBOkay
.2b3e	b0 2a		bcs $2b6a			bcs 	_SSBReturnNull
.2b40					_SSBOkay:
.2b40	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.2b42	18		clc				clc
.2b43	69 01		adc #$01			adc 	#1
.2b45	38		sec				sec
.2b46	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2b48	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2b4a	90 02		bcc $2b4e			bcc		_SSBTrunc
.2b4c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2b4e					_SSBTrunc:
.2b4e	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.2b50	18		clc				clc
.2b51	69 01		adc #$01			adc 	#1 							; add 1
.2b53	20 87 2a	jsr $2a87			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2b56	20 7e 2a	jsr $2a7e			jsr 	CopySoftToStack 			; copy that to the stack.
.2b59	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2b5b					_SSBCopyLoop:
.2b5b	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.2b5d	f0 0e		beq $2b6d			beq 	_SSBExit
.2b5f	c6 2d		dec $2d				dec 	temp1+1
.2b61	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.2b63	20 ad 2a	jsr $2aad			jsr 	WriteSoftString
.2b66	c8		iny				iny
.2b67	4c 5b 2b	jmp $2b5b			jmp 	_SSBCopyLoop
.2b6a					_SSBReturnNull:
.2b6a	20 71 2b	jsr $2b71			jsr 	ReturnNull
.2b6d					_SSBExit:
.2b6d	68		pla				pla
.2b6e	a8		tay				tay
.2b6f	68		pla				pla
.2b70	60		rts				rts
.2b71					ReturnNull:
.2b71	a9 00		lda #$00			lda 	#0 							; clear null string
.2b73	8d ce 0a	sta $0ace			sta 	NullString
.2b76	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.2b78	95 48		sta $48,x			sta 	esInt0,x
.2b7a	a9 0a		lda #$0a			lda 	#NullString >> 8
.2b7c	95 50		sta $50,x			sta 	esInt1,x
.2b7e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c12					srcStrLen:
>0c12							.fill 	1
.2b7f					StringWrite:
.2b7f	aa		tax				tax
.2b80	48		pha				pha
.2b81	98		tya				tya
.2b82	48		pha				pha
.2b83	20 aa 2b	jsr $2baa			jsr 	CheckOverwriteCurrent
.2b86	b0 0d		bcs $2b95			bcs		_SWCopyCurrent
.2b88	20 e8 2b	jsr $2be8			jsr 	RequiresConcretion
.2b8b	90 0e		bcc $2b9b			bcc 	_SWWriteReference
.2b8d	20 4b 2c	jsr $2c4b			jsr 	CheckSpecialConcretion
.2b90	b0 09		bcs $2b9b			bcs 	_SWWriteReference
.2b92	20 fc 2b	jsr $2bfc			jsr 	AllocateHardMemory
.2b95					_SWCopyCurrent:
.2b95	20 2f 2c	jsr $2c2f			jsr 	CopyStringToHardMemory
.2b98	4c a6 2b	jmp $2ba6			jmp 	_SWExit
.2b9b					_SWWriteReference
.2b9b	a0 00		ldy #$00			ldy 	#0
.2b9d	a5 2a		lda $2a				lda 	temp0
.2b9f	91 2c		sta ($2c),y			sta 	(temp1),y
.2ba1	c8		iny				iny
.2ba2	a5 2b		lda $2b				lda 	temp0+1
.2ba4	91 2c		sta ($2c),y			sta 	(temp1),y
.2ba6					_SWExit:
.2ba6	68		pla				pla
.2ba7	a8		tay				tay
.2ba8	68		pla				pla
.2ba9	60		rts				rts
.2baa					CheckOverwriteCurrent:
.2baa	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2bac	b5 51		lda $51,x			lda 	esInt1+1,x
.2bae	85 2b		sta $2b				sta 	temp0+1
.2bb0	b5 49		lda $49,x			lda 	esInt0+1,x
.2bb2	85 2a		sta $2a				sta 	temp0
.2bb4	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.2bb6	8d 12 0c	sta $0c12			sta 	srcStrLen
.2bb9	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2bbb	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2bbd	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2bbf	85 2d		sta $2d				sta 	temp1+1
.2bc1	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2bc3	b1 2c		lda ($2c),y			lda 	(temp1),y
.2bc5	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2bc7	90 1b		bcc $2be4			bcc 	_COCFail 				; in hard memory.
.2bc9	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2bcb	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.2bcd	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.2bcf	85 2e		sta $2e				sta 	temp2
.2bd1	c8		iny				iny
.2bd2	b1 2c		lda ($2c),y			lda 	(temp1),y
.2bd4	e9 00		sbc #$00			sbc 	#0
.2bd6	85 2f		sta $2f				sta 	temp2+1
.2bd8	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2bda	b1 2e		lda ($2e),y			lda 	(temp2),y
.2bdc	38		sec				sec  							; maximum character capacity.
.2bdd	e9 02		sbc #$02			sbc 	#2
.2bdf	cd 12 0c	cmp $0c12			cmp 	srcStrLen 				; if >= the required length
.2be2	b0 02		bcs $2be6			bcs 	_COCCanReuse
.2be4					_COCFail:
.2be4	18		clc				clc
.2be5	60		rts				rts
.2be6					_COCCanReuse:
.2be6	38		sec				sec
.2be7	60		rts				rts
.2be8					RequiresConcretion:
.2be8	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2bea	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.2bec	b0 0a		bcs $2bf8			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2bee	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2bf0	f0 08		beq $2bfa			beq 	_RCFail 				; if not, this cannot be soft memory.
.2bf2	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2bf4	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2bf6	90 02		bcc $2bfa			bcc 	_RCFail 				; so concreting
.2bf8					_RCSucceed:
.2bf8	38		sec				sec
.2bf9	60		rts				rts
.2bfa					_RCFail:
.2bfa	18		clc				clc
.2bfb	60		rts				rts
.2bfc					AllocateHardMemory:
.2bfc	98		tya				tya
.2bfd	48		pha				pha
.2bfe	ad 12 0c	lda $0c12			lda 	srcStrLen 				; characters in string
.2c01	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2c03	b0 04		bcs $2c09			bcs 	_AHMSetMax 				; max out that amount.
.2c05	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2c07	90 02		bcc $2c0b			bcc 	_AHMIsOkay
.2c09					_AHMSetMax:
.2c09	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2c0b					_AHMIsOkay:
.2c0b	48		pha				pha	 							; save size to be allocated
.2c0c	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2c0e	38		sec				sec  							; and copy result to TOS as target address.
.2c0f	65 33		adc $33				adc 	highMemory
.2c11	85 33		sta $33				sta 	highMemory
.2c13	a5 34		lda $34				lda 	highMemory+1
.2c15	69 ff		adc #$ff			adc 	#$FF
.2c17	85 34		sta $34				sta 	highMemory+1
.2c19	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2c1b	68		pla				pla 							; get the total size of the storage block
.2c1c	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.2c1e	18		clc				clc
.2c1f	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.2c21	69 01		adc #$01			adc 	#1
.2c23	91 2c		sta ($2c),y			sta 	(temp1),y
.2c25	a5 34		lda $34				lda 	highMemory+1
.2c27	69 00		adc #$00			adc 	#0
.2c29	c8		iny				iny
.2c2a	91 2c		sta ($2c),y			sta 	(temp1),y
.2c2c	68		pla				pla
.2c2d	a8		tay				tay
.2c2e	60		rts				rts
.2c2f					CopyStringToHardMemory:
.2c2f	98		tya				tya
.2c30	48		pha				pha
.2c31	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2c33	b1 2c		lda ($2c),y			lda 	(temp1),y
.2c35	85 2e		sta $2e				sta 	temp2
.2c37	c8		iny				iny
.2c38	b1 2c		lda ($2c),y			lda 	(temp1),y
.2c3a	85 2f		sta $2f				sta 	temp2+1
.2c3c	ac 12 0c	ldy $0c12			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2c3f					_CSTHMLoop:
.2c3f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c41	91 2e		sta ($2e),y			sta 	(temp2),y
.2c43	88		dey				dey
.2c44	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.2c46	d0 f7		bne $2c3f			bne 	_CSTHMLoop
.2c48	68		pla				pla
.2c49	a8		tay				tay
.2c4a	60		rts				rts
.2c4b					CheckSpecialConcretion:
.2c4b	ad 12 0c	lda $0c12			lda 	srcStrLen 				; check string is null e.g. length = 0
.2c4e	f0 02		beq $2c52			beq 	_CSCNullString
.2c50	18		clc				clc
.2c51	60		rts				rts
.2c52					_CSCNullString:
.2c52	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.2c54	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.2c57	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.2c59	85 2a		sta $2a				sta 	temp0
.2c5b	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2c5d	85 2b		sta $2b				sta 	1+(temp0)
.2c5f	38		sec				sec
.2c60	60		rts				rts

;******  Return to file: string/string.asm

.2c61					stringHandler:
.2c61	7c 64 2c	jmp ($2c64,x)			jmp 	(stringVectors,x)
.2c64					stringVectors:
>2c64	cd 29					.word StringChrs           ; index 0
>2c66	c0 2a					.word StrClone             ; index 2
>2c68	38 2a					.word StringConcat         ; index 4
>2c6a	ef 29					.word STRCompare           ; index 6
>2c6c	e6 2a					.word CaseString           ; index 8
>2c6e	2b 2b					.word StringSubstring      ; index 10
>2c70	7f 2b					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2c72					section_end_string:
.2c72					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c13					deTokeniseVector:
>0c13							.fill 	2
.0c15					lastCharacterClass:
>0c15							.fill 	1
.2c72					ListLine:
.2c72	a9 82		lda #$82			lda 	#(deTokenPrint) & $FF
.2c74	8d 13 0c	sta $0c13			sta 	deTokeniseVector
.2c77	a9 2d		lda #$2d			lda 	#(deTokenPrint) >> 8
.2c79	8d 14 0c	sta $0c14			sta 	1+(deTokeniseVector)
.2c7c					Detokenise:
.2c7c	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.2c7e	8d 15 0c	sta $0c15			sta 	lastCharacterClass
.2c81	a2 02		ldx #$02			ldx 	#2
.2c83	20 56 22	jsr $2256			jsr 	MInt32False
.2c86	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.2c88	b1 28		lda ($28),y			lda 	(codePtr),y
.2c8a	95 48		sta $48,x			sta 	esInt0,x
.2c8c	c8		iny				iny
.2c8d	b1 28		lda ($28),y			lda 	(codePtr),y
.2c8f	95 50		sta $50,x			sta 	esInt1,x
.2c91	a9 84		lda #$84			lda 	#LTYLineNumber
.2c93	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2c96	a9 0a		lda #$0a			lda 	#10 					; base 10
.2c98	20 34 2d	jsr $2d34			jsr 	DTPrintInteger 			; print as integer.
.2c9b	a0 00		ldy #$00			ldy 	#0 						; get length
.2c9d	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.2c9f	aa		tax				tax
.2ca0					_DTPadOut:
.2ca0	a9 20		lda #$20			lda 	#" "
.2ca2	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2ca5	e8		inx				inx
.2ca6	e0 06		cpx #$06			cpx 	#6
.2ca8	d0 f6		bne $2ca0			bne 	_DTPadOut
.2caa	a0 03		ldy #$03			ldy 	#3 						; start position.
.2cac					_DTListLoop
.2cac	b1 28		lda ($28),y			lda 	(codePtr),y
.2cae	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.2cb0	f0 58		beq $2d0a			beq 	_DTIsString
.2cb2	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.2cb4	f0 7a		beq $2d30			beq 	_DTIsFloat
.2cb6	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.2cb8	f0 16		beq $2cd0			beq 	_DTHexConstant
.2cba	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.2cbc	d0 06		bne $2cc4			bne 	_DTNotEnd
.2cbe	a9 ff		lda #$ff			lda 	#255 					; print CR
.2cc0	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2cc3	60		rts				rts
.2cc4					_DTNotEnd:
.2cc4	c9 00		cmp #$00			cmp 	#0
.2cc6	30 36		bmi $2cfe			bmi 	_DTIsToken
.2cc8	c9 40		cmp #$40			cmp 	#$40
.2cca	90 38		bcc $2d04			bcc 	_DTIsIdentifier
.2ccc	a9 0a		lda #$0a			lda 	#10 					; this is the base
.2cce	d0 08		bne $2cd8			bne 	_DTConstant
.2cd0					_DTHexConstant:
.2cd0	a9 26		lda #$26			lda 	#"&"
.2cd2	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2cd5	c8		iny				iny
.2cd6	a9 10		lda #$10			lda 	#16
.2cd8					_DTConstant:
.2cd8	48		pha				pha
.2cd9	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.2cdb	20 9e 2d	jsr $2d9e			jsr 	DTSwitchMode
.2cde	a9 86		lda #$86			lda 	#LTYConstant
.2ce0	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2ce3	a2 02		ldx #$02			ldx 	#2
.2ce5	8a		txa				txa
.2ce6	a2 0a		ldx #$0a		ldx	#10
.2ce8	20 65 23	jsr $2365		jsr	mainHandler
.2ceb	aa		tax				tax
.2cec	20 e7 11	jsr $11e7			jsr 	TOSToTemp0
.2cef	68		pla				pla
.2cf0	85 32		sta $32				sta 	tempShort
.2cf2	98		tya				tya
.2cf3	48		pha				pha
.2cf4	a5 32		lda $32				lda 	tempShort
.2cf6	20 34 2d	jsr $2d34			jsr 	DTPrintInteger
.2cf9	68		pla				pla
.2cfa	a8		tay				tay
.2cfb	4c ac 2c	jmp $2cac			jmp 	_DTListLoop
.2cfe					_DTIsToken:
.2cfe	20 f7 2d	jsr $2df7			jsr 	DTDecodeToken
.2d01	4c ac 2c	jmp $2cac			jmp 	_DTListLoop
.2d04					_DTIsIdentifier:
.2d04	20 b0 2d	jsr $2db0			jsr 	DTIdentifier
.2d07	4c ac 2c	jmp $2cac			jmp 	_DTListLoop
.2d0a					_DTIsString:
.2d0a	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2d0c	20 9e 2d	jsr $2d9e			jsr 	DTSwitchMode
.2d0f	a9 81		lda #$81			lda 	#LTYString
.2d11	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2d14	a9 22		lda #$22			lda 	#'"'						; open quote
.2d16	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2d19	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.2d1b	8a		txa				txa
.2d1c	a2 0a		ldx #$0a		ldx	#10
.2d1e	20 65 23	jsr $2365		jsr	mainHandler
.2d21	aa		tax				tax
.2d22	20 e7 11	jsr $11e7			jsr 	TOSToTemp0
.2d25	20 46 2d	jsr $2d46			jsr 	DTPrintLengthPrefix
.2d28	a9 22		lda #$22			lda 	#'"'
.2d2a	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2d2d	4c ac 2c	jmp $2cac			jmp 	_DTListLoop
.2d30					_DTIsFloat:
>2d30	db						.byte 	$DB
.2d31	4c 30 2d	jmp $2d30			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.2d34					DTPrintInteger:
.2d34	48		pha				pha
.2d35	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2d37	85 2a		sta $2a				sta 	temp0
.2d39	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2d3b	85 2b		sta $2b				sta 	1+(temp0)
.2d3d	68		pla				pla
.2d3e	a8		tay				tay
.2d3f	8a		txa				txa
.2d40	a2 0c		ldx #$0c		ldx	#12
.2d42	20 65 23	jsr $2365		jsr	mainHandler
.2d45	aa		tax				tax
.2d46					DTPrintLengthPrefix:
.2d46	98		tya				tya
.2d47	48		pha				pha
.2d48	a0 00		ldy #$00			ldy 	#0
.2d4a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d4c	aa		tax				tax
.2d4d	f0 0b		beq $2d5a			beq 	_DTPLPExit
.2d4f					_DTPLPLoop:
.2d4f	c8		iny				iny
.2d50	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d52	29 7f		and #$7f			and 	#$7F
.2d54	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2d57	ca		dex				dex
.2d58	d0 f5		bne $2d4f			bne 	_DTPLPLoop
.2d5a					_DTPLPExit:
.2d5a	68		pla				pla
.2d5b	a8		tay				tay
.2d5c	60		rts				rts
.2d5d					ListOutputCharacter:
.2d5d	85 32		sta $32				sta 	tempShort
.2d5f	48		pha				pha
.2d60	8a		txa				txa
.2d61	48		pha				pha
.2d62	98		tya				tya
.2d63	48		pha				pha
.2d64	a5 32		lda $32				lda 	tempShort
.2d66	c9 20		cmp #$20			cmp 	#32
.2d68	b0 0c		bcs $2d76			bcs		_LOCHiBit
.2d6a	09 40		ora #$40			ora 	#64
.2d6c	c9 40		cmp #$40			cmp 	#64
.2d6e	f0 06		beq $2d76			beq 	_LOCHiBit
.2d70	c9 5b		cmp #$5b			cmp 	#65+26
.2d72	b0 02		bcs $2d76			bcs 	_LOCHiBit
.2d74	69 20		adc #$20			adc 	#32
.2d76					_LOCHiBit:
.2d76	20 7f 2d	jsr $2d7f			jsr 	_LOCCallVector
.2d79	68		pla				pla
.2d7a	a8		tay				tay
.2d7b	68		pla				pla
.2d7c	aa		tax				tax
.2d7d	68		pla				pla
.2d7e					_LOCExit:
.2d7e	60		rts				rts
.2d7f					_LOCCallVector:
.2d7f	6c 13 0c	jmp ($0c13)			jmp 	(deTokeniseVector)
.2d82					deTokenPrint:
.2d82	c9 00		cmp #$00			cmp 	#0
.2d84	30 06		bmi $2d8c			bmi 	_dtpInk
.2d86	a2 12		ldx #$12		ldx	#18
.2d88	20 aa 24	jsr $24aa		jsr	deviceHandler
.2d8b	60		rts				rts
.2d8c	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.2d8e	f0 08		beq $2d98			beq 	_dtpCR
.2d90	29 07		and #$07			and 	#7
.2d92	a2 06		ldx #$06		ldx	#6
.2d94	20 aa 24	jsr $24aa		jsr	deviceHandler
.2d97	60		rts				rts
.2d98					_dtpCR:
.2d98	a2 02		ldx #$02		ldx	#2
.2d9a	20 aa 24	jsr $24aa		jsr	deviceHandler
.2d9d	60		rts				rts
.2d9e					DTSwitchMode:
.2d9e	cd 15 0c	cmp $0c15			cmp 	LastCharacterClass
.2da1	f0 04		beq $2da7			beq 	_DTSMNoChange
.2da3	8d 15 0c	sta $0c15			sta 	LastCharacterClass
.2da6					_DTSMExit:
.2da6	60		rts				rts
.2da7					_DTSMNoChange:
.2da7	c9 01		cmp #$01			cmp 	#1
.2da9	f0 fb		beq $2da6			beq 	_DTSMExit
.2dab	a9 20		lda #$20			lda 	#" "
.2dad	4c 5d 2d	jmp $2d5d			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.2db0					DTIdentifier:
.2db0	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2db2	20 9e 2d	jsr $2d9e			jsr 	DTSwitchMode
.2db5	a9 87		lda #$87			lda 	#LTYIdentifier
.2db7	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2dba					_DTILoop:
.2dba	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.2dbc	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.2dbe	d0 02		bne $2dc2			bne 	_DTINotUS
.2dc0	a9 5f		lda #$5f			lda 	#"_"
.2dc2					_DTINotUS:
.2dc2	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2dc5	c8		iny				iny
.2dc6	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.2dc8	c9 3a		cmp #$3a			cmp 	#$3A
.2dca	90 ee		bcc $2dba			bcc 	_DTILoop
.2dcc	c8		iny				iny
.2dcd	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.2dcf	f0 25		beq $2df6			beq 	_DTIExit 					; no postfix.
.2dd1	48		pha				pha
.2dd2	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.2dd4	8d 15 0c	sta $0c15			sta 	LastCharacterClass
.2dd7	a9 82		lda #$82			lda 	#LTYPunctuation
.2dd9	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2ddc	68		pla				pla
.2ddd	c9 3b		cmp #$3b			cmp 	#$3B
.2ddf	f0 10		beq $2df1			beq 	_DTIArray
.2de1	4a		lsr a				lsr 	a 							; array flag in C
.2de2	08		php				php
.2de3	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.2de5	f0 02		beq $2de9			beq 	_DTIDollar
.2de7	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.2de9					_DTIDollar:
.2de9	49 24		eor #$24			eor 	#"$"
.2deb	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2dee	28		plp				plp
.2def	90 05		bcc $2df6			bcc 	_DTIExit
.2df1					_DTIArray:
.2df1	a9 28		lda #$28			lda 	#"("
.2df3	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2df6					_DTIExit:
.2df6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.2df7					DTDecodeToken:
.2df7	a2 00		ldx #$00			ldx 	#0 							; table number to use
.2df9	b1 28		lda ($28),y			lda 	(codePtr),y
.2dfb	c9 84		cmp #$84			cmp 	#$84
.2dfd	b0 05		bcs $2e04			bcs 	_DTNotShift
.2dff	29 03		and #$03			and 	#3 							; get the shift 1..3
.2e01	0a		asl a				asl 	a 							; put 2 x in X
.2e02	aa		tax				tax
.2e03	c8		iny				iny
.2e04					_DTNotShift:
.2e04	bd ff 30	lda $30ff,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.2e07	85 2a		sta $2a				sta 	temp0 						; point into temp0
.2e09	bd 00 31	lda $3100,x			lda 	TokenTableAddress+1,x
.2e0c	85 2b		sta $2b				sta 	temp0+1
.2e0e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.2e10	c8		iny				iny 								; consume it.
.2e11	aa		tax				tax
.2e12	98		tya				tya
.2e13	48		pha				pha
.2e14					_DTFindText:
.2e14	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.2e16	f0 11		beq $2e29			beq 	_DTFoundText
.2e18	ca		dex				dex
.2e19	a0 00		ldy #$00			ldy 	#0
.2e1b	38		sec				sec
.2e1c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e1e	65 2a		adc $2a				adc 	temp0
.2e20	85 2a		sta $2a				sta 	temp0
.2e22	90 f0		bcc $2e14			bcc 	_DTFindText
.2e24	e6 2b		inc $2b				inc 	temp0+1
.2e26	4c 14 2e	jmp $2e14			jmp 	_DTFindText
.2e29					_DTFoundText:
.2e29	a0 01		ldy #$01			ldy 	#1 							; get first character
.2e2b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e2d	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2e2f	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.2e31	90 11		bcc $2e44			bcc 	_DTIsPunctuation
.2e33	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2e35	b0 0d		bcs $2e44			bcs 	_DTIsPunctuation
.2e37	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2e39	20 9e 2d	jsr $2d9e			jsr 	DTSwitchMode
.2e3c	a9 83		lda #$83			lda 	#LTYKeyword
.2e3e	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2e41	4c 4e 2e	jmp $2e4e			jmp 	_DTPrint
.2e44					_DTIsPunctuation:
.2e44	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2e46	20 9e 2d	jsr $2d9e			jsr 	DTSwitchMode
.2e49	a9 82		lda #$82			lda 	#LTYPunctuation
.2e4b	20 5d 2d	jsr $2d5d			jsr 	ListOutputCharacter
.2e4e					_DTPrint:
.2e4e	20 46 2d	jsr $2d46			jsr 	DTPrintLengthPrefix 		; print it out.
.2e51	a0 00		ldy #$00			ldy 	#0 							; get last character
.2e53	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e55	a8		tay				tay
.2e56	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e58	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2e5a	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.2e5c	90 04		bcc $2e62			bcc 	_DTIsNowPunctuation
.2e5e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2e60	90 05		bcc $2e67			bcc 	_DTPExit
.2e62					_DTIsNowPunctuation:
.2e62	a9 01		lda #$01			lda 	#1
.2e64	8d 15 0c	sta $0c15			sta		LastCharacterClass
.2e67					_DTPExit:
.2e67	68		pla				pla
.2e68	a8		tay				tay
.2e69	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c16					currentSet:
>0c16							.fill 	1
.2e6a					TokenSearch:
.2e6a	8a		txa				txa
.2e6b	48		pha				pha
.2e6c	98		tya				tya
.2e6d	48		pha				pha
.2e6e	a9 00		lda #$00			lda 	#0
.2e70	8d 16 0c	sta $0c16			sta 	currentSet
.2e73					_TSLoop:
.2e73	ad 16 0c	lda $0c16			lda 	currentSet 					; 2 x currentset in X
.2e76	0a		asl a				asl 	a
.2e77	aa		tax				tax
.2e78	bd ff 30	lda $30ff,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.2e7b	85 2a		sta $2a				sta 	temp0
.2e7d	bd 00 31	lda $3100,x			lda 	TokenTableAddress+1,x
.2e80	85 2b		sta $2b				sta 	temp0+1
.2e82	20 a9 2e	jsr $2ea9			jsr 	TokenSearchOne 				; search one table
.2e85	b0 0d		bcs $2e94			bcs 	_TSFound 					; found a token.
.2e87	ee 16 0c	inc $0c16			inc 	currentSet 					; next set
.2e8a	ad 16 0c	lda $0c16			lda 	currentSet
.2e8d	c9 04		cmp #$04			cmp 	#4
.2e8f	d0 e2		bne $2e73			bne 	_TSLoop 					; back if not done all four.
.2e91	18		clc				clc 								; clear carry and exit
.2e92	90 10		bcc $2ea4			bcc 	_TSExit
.2e94					_TSFound:
.2e94	48		pha				pha 								; save token
.2e95	ad 16 0c	lda $0c16			lda 	currentSet					; if set zero no shift
.2e98	f0 05		beq $2e9f			beq 	_TSNoShift
.2e9a	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.2e9c	20 55 2f	jsr $2f55			jsr 	TokenWrite
.2e9f					_TSNoShift:
.2e9f	68		pla				pla 								; get token back
.2ea0	20 55 2f	jsr $2f55			jsr 	TokenWrite 					; write it
.2ea3	38		sec				sec 								; carry set indicating success
.2ea4					_TSExit:
.2ea4	68		pla				pla
.2ea5	a8		tay				tay
.2ea6	68		pla				pla
.2ea7	aa		tax				tax
.2ea8	60		rts				rts
.2ea9					TokenSearchOne:
.2ea9	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.2eab					_TSOLoop:
.2eab	a0 00		ldy #$00			ldy 	#0
.2ead	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.2eaf	f0 26		beq $2ed7			beq 	_TSOFail 					; if zero, end of table
.2eb1	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.2eb4	f0 11		beq $2ec7			beq 	_TSOCheckText
.2eb6					_TSONext:
.2eb6	e8		inx				inx 								; bump token
.2eb7	a0 00		ldy #$00			ldy 	#0							; get length
.2eb9	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ebb	38		sec				sec
.2ebc	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.2ebe	85 2a		sta $2a				sta 	temp0
.2ec0	90 e9		bcc $2eab			bcc 	_TSOLoop
.2ec2	e6 2b		inc $2b				inc 	temp0+1
.2ec4	4c ab 2e	jmp $2eab			jmp 	_TSOLoop
.2ec7					_TSOCheckText:
.2ec7	a8		tay				tay 								; compare length downto 1.
.2ec8					_TSOCheckLoop:
.2ec8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.2eca	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.2ecd	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.2ecf	d0 e5		bne $2eb6			bne 	_TSONext 					; different goto next.
.2ed1	88		dey				dey 								; do all
.2ed2	d0 f4		bne $2ec8			bne 	_TSOCheckLoop
.2ed4	8a		txa				txa 								; return token in A and carry set
.2ed5	38		sec				sec
.2ed6	60		rts				rts
.2ed7					_TSOFail:
.2ed7	18		clc				clc
.2ed8	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.2ed9					TokTest:
.2ed9	a9 f6		lda #$f6			lda 	#(TokenText1) & $FF
.2edb	85 28		sta $28				sta 	codePtr
.2edd	a9 2e		lda #$2e			lda 	#(TokenText1) >> 8
.2edf	85 29		sta $29				sta 	1+(codePtr)
.2ee1	20 f6 2e	jsr $2ef6				jsr 	Tokenise
.2ee4	a2 00		ldx #$00	TokStop:	ldx 	#0
.2ee6	bd f6 2e	lda $2ef6,x	_TokCheck:	lda 	TokenBytes1,x
.2ee9	dd 1a 0c	cmp $0c1a,x				cmp 	tokenBuffer,x
.2eec	d0 fe		bne $2eec	_TokFail:	bne 	_TokFail
.2eee	e8		inx					inx
.2eef	c9 80		cmp #$80				cmp 	#$80
.2ef1	d0 f3		bne $2ee6				bne 	_TokCheck
.2ef3	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.2ef6					TokenText1:
.2ef6					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c17					tokenHeader:
>0c17							.fill 	3
.0c1a					tokenBuffer:
>0c1a							.fill 	256
.0d1a					tokenBufferIndex:
>0d1a							.fill 	1
.2ef6					Tokenise:
.2ef6	20 6e 2f	jsr $2f6e			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.2ef9					TokeniseASCIIZ:
.2ef9	20 7f 2f	jsr $2f7f			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.2efc	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.2efe	8d 1a 0d	sta $0d1a			sta 	tokenBufferIndex
.2f01	a8		tay				tay 								; start pointer
.2f02	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.2f04	8d 1a 0c	sta $0c1a			sta 	tokenBuffer
.2f07					_TokLoop:
.2f07	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.2f09	f0 46		beq $2f51			beq 	_TokExit 					; if zero, then exit.
.2f0b	c8		iny				iny 								; skip over spaces.
.2f0c	c9 20		cmp #$20			cmp 	#" "
.2f0e	f0 f7		beq $2f07			beq 	_TokLoop
.2f10	88		dey				dey 								; point back to character.
.2f11	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.2f13	f0 18		beq $2f2d			beq 	_TokHexConst
.2f15	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.2f17	f0 23		beq $2f3c			beq 	_TokQString
.2f19	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.2f1b	b0 26		bcs $2f43			bcs 	_TokPunctuation
.2f1d	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.2f1f	b0 29		bcs $2f4a			bcs 	_TokIdentifier
.2f21	c9 3a		cmp #$3a			cmp 	#"9"+1
.2f23	b0 1e		bcs $2f43			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.2f25	c9 30		cmp #$30			cmp 	#"0"
.2f27	90 1a		bcc $2f43			bcc 	_TokPunctuation 			; < 0, punctuation.
.2f29	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.2f2b	d0 08		bne $2f35			bne 	_TokConst
.2f2d					_TokHexConst:
.2f2d	c8		iny				iny									; consume token.
.2f2e	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.2f30	20 55 2f	jsr $2f55			jsr 	TokenWrite
.2f33	a9 10		lda #$10			lda 	#16
.2f35					_TokConst:
.2f35	20 3d 30	jsr $303d			jsr 	TokeniseInteger
.2f38	b0 cd		bcs $2f07			bcs 	_TokLoop
.2f3a	90 17		bcc $2f53			bcc 	_TokFail
.2f3c					_TokQString:
.2f3c	20 d3 30	jsr $30d3			jsr 	TokeniseString
.2f3f	b0 c6		bcs $2f07			bcs 	_TokLoop
.2f41	90 10		bcc $2f53			bcc 	_TokFail
.2f43					_TokPunctuation:
.2f43	20 b2 30	jsr $30b2			jsr 	TokenisePunctuation
.2f46	b0 bf		bcs $2f07			bcs 	_TokLoop
.2f48	90 09		bcc $2f53			bcc 	_TokFail
.2f4a					_TokIdentifier:
.2f4a	20 ae 2f	jsr $2fae			jsr 	TokeniseIdentifier
.2f4d	b0 b8		bcs $2f07			bcs 	_TokLoop
.2f4f	90 02		bcc $2f53			bcc 	_TokFail
.2f51					_TokExit:
.2f51	38		sec				sec
.2f52	60		rts				rts
.2f53					_TokFail:
.2f53	18		clc				clc
.2f54	60		rts				rts
.2f55					TokenWrite:
.2f55	85 32		sta $32				sta 	tempShort 					; save XA
.2f57	48		pha				pha
.2f58	8a		txa				txa
.2f59	48		pha				pha
.2f5a	a5 32		lda $32				lda 	tempShort
.2f5c	ae 1a 0d	ldx $0d1a			ldx 	tokenBufferIndex 			; geet index
.2f5f	9d 1a 0c	sta $0c1a,x			sta 	tokenBuffer,x 				; write byte to buffer
.2f62	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.2f64	9d 1b 0c	sta $0c1b,x			sta 	tokenBuffer+1,x
.2f67	ee 1a 0d	inc $0d1a			inc 	tokenBufferIndex 			; bump index
.2f6a	68		pla				pla
.2f6b	aa		tax				tax
.2f6c	68		pla				pla
.2f6d	60		rts				rts
.2f6e					TokeniseMakeASCIIZ:
.2f6e	a0 00		ldy #$00			ldy 	#0							; get length of string.
.2f70	b1 28		lda ($28),y			lda 	(codePtr),y
.2f72	a8		tay				tay
.2f73	c8		iny				iny 								; +1, the NULL goes here.
.2f74	a9 00		lda #$00			lda 	#0
.2f76	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.2f78	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.2f7a	d0 02		bne $2f7e			bne 	_TMKAExit
.2f7c	e6 29		inc $29				inc 	codePtr+1
.2f7e					_TMKAExit:
.2f7e	60		rts				rts
.2f7f					TokeniseFixCase:
.2f7f	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.2f81	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.2f83					_TFCFlipQ:
.2f83	8a		txa				txa
.2f84	49 01		eor #$01			eor 	#1
.2f86	aa		tax				tax
.2f87					_TFCLoop:
.2f87	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.2f89	f0 22		beq $2fad			beq 	_TFCExit 					; if zero exit.
.2f8b	c9 20		cmp #$20			cmp 	#32 						; if control
.2f8d	90 1a		bcc $2fa9			bcc 	_TFCControl
.2f8f	c8		iny				iny 								; preconsume
.2f90	c9 22		cmp #$22			cmp 	#'"'
.2f92	f0 ef		beq $2f83			beq 	_TFCFlipQ
.2f94	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.2f96	90 ef		bcc $2f87			bcc 	_TFCLoop
.2f98	c9 7b		cmp #$7b			cmp 	#"z"+1
.2f9a	b0 eb		bcs $2f87			bcs 	_TFCLoop
.2f9c	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.2f9e	d0 e7		bne $2f87			bne 	_TFCLoop
.2fa0	88		dey				dey
.2fa1	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.2fa3					_TFCWrite:
.2fa3	91 28		sta ($28),y			sta 	(codePtr),y
.2fa5	c8		iny				iny
.2fa6	4c 87 2f	jmp $2f87			jmp 	_TFCLoop
.2fa9					_TFCControl:
.2fa9	a9 20		lda #$20			lda 	#" "
.2fab	d0 f6		bne $2fa3			bne 	_TFCWrite
.2fad					_TFCExit:
.2fad	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.2fae					TokeniseIdentifier:
.2fae	a2 00		ldx #$00			ldx 	#0
.2fb0					_TICopyID:
.2fb0	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.2fb2	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.2fb4	f0 16		beq $2fcc			beq 	_TICopyUnderscore
.2fb6	c9 2e		cmp #$2e			cmp 	#"."
.2fb8	f0 14		beq $2fce			beq 	_TICopyIn
.2fba	c9 30		cmp #$30			cmp 	#"0"
.2fbc	90 1b		bcc $2fd9			bcc 	_TIEndCopy
.2fbe	c9 3a		cmp #$3a			cmp 	#"9"+1
.2fc0	90 0c		bcc $2fce			bcc 	_TICopyIn
.2fc2	c9 41		cmp #$41			cmp 	#"A"
.2fc4	90 13		bcc $2fd9			bcc 	_TIEndCopy
.2fc6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2fc8	b0 0f		bcs $2fd9			bcs		_TIEndCopy
.2fca	90 02		bcc $2fce			bcc 	_TICopyIn
.2fcc					_TICopyUnderScore:
.2fcc	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.2fce					_TICopyIn:
.2fce	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.2fcf	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.2fd2	8e cf 0a	stx $0acf			stx 	convertBuffer
.2fd5	c8		iny				iny 								; next character
.2fd6	4c b0 2f	jmp $2fb0			jmp 	_TICopyID 					; loop round
.2fd9					_TIEndCopy:
.2fd9	a9 24		lda #$24			lda 	#"$"
.2fdb	20 30 30	jsr $3030			jsr 	TIDCheckCopy
.2fde	a9 23		lda #$23			lda 	#"#"
.2fe0	20 30 30	jsr $3030			jsr 	TIDCheckCopy
.2fe3	a9 28		lda #$28			lda 	#"("
.2fe5	20 30 30	jsr $3030			jsr 	TIDCheckCopy
.2fe8	20 6a 2e	jsr $2e6a			jsr 	TokenSearch 				; is it a token
.2feb	b0 41		bcs $302e			bcs 	_TIExit 					; if so, then exit.
.2fed	98		tya				tya
.2fee	48		pha				pha
.2fef	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.2ff1	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.2ff4	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.2ff7	c9 28		cmp #$28			cmp 	#"("
.2ff9	d0 02		bne $2ffd			bne 	_TINotArray
.2ffb	ca		dex				dex 								; yes, remove it and convert to array.
.2ffc	c8		iny				iny
.2ffd					_TINotArray:
.2ffd	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3000	c9 24		cmp #$24			cmp 	#"$"
.3002	d0 03		bne $3007			bne 	_TINotString
.3004	ca		dex				dex
.3005	c8		iny				iny
.3006	c8		iny				iny
.3007					_TINotString:
.3007	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.300a	c9 23		cmp #$23			cmp 	#"#"
.300c	d0 05		bne $3013			bne 	_TINotFloat
.300e	ca		dex				dex
.300f	c8		iny				iny
.3010	c8		iny				iny
.3011	c8		iny				iny
.3012	c8		iny				iny
.3013					_TINotFloat:
.3013	e8		inx				inx 								; write end marker for identifier.
.3014	98		tya				tya
.3015	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3018	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.301b	a2 01		ldx #$01			ldx 	#1
.301d					_TIOutput:
.301d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3020	29 3f		and #$3f			and 	#$3F
.3022	48		pha				pha
.3023	20 55 2f	jsr $2f55			jsr 	TokenWrite
.3026	e8		inx				inx
.3027	68		pla				pla
.3028	c9 3a		cmp #$3a			cmp 	#$3A
.302a	90 f1		bcc $301d			bcc 	_TIOutput
.302c	68		pla				pla
.302d	a8		tay				tay
.302e					_TIExit:
.302e	38		sec				sec 								; this can't fail.
.302f	60		rts				rts
.3030					TIDCheckCopy:
.3030	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3032	d0 08		bne $303c			bne 	_TIDCCExit
.3034	e8		inx				inx
.3035	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3038	8e cf 0a	stx $0acf			stx 	convertBuffer
.303b	c8		iny				iny
.303c					_TIDCCExit:
.303c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.303d					TokeniseInteger:
.303d	85 2c		sta $2c				sta 	temp1 						; save base
.303f	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3041	8e cf 0a	stx $0acf			stx 	convertBuffer
.3044					_TIGetChars:
.3044	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3046	c9 30		cmp #$30			cmp 	#"0"
.3048	90 1f		bcc $3069			bcc 	_TIEndGet
.304a	c9 3a		cmp #$3a			cmp 	#"9"+1
.304c	90 10		bcc $305e			bcc 	_TIHaveChar
.304e	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3050	c9 0a		cmp #$0a			cmp 	#10
.3052	f0 15		beq $3069			beq 	_TIEndGet
.3054	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3056	c9 41		cmp #$41			cmp 	#"A"
.3058	90 0f		bcc $3069			bcc 	_TIEndGet
.305a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.305c	b0 0b		bcs $3069			bcs 	_TIEndGet
.305e					_TIHaveChar:
.305e	e8		inx				inx 								; write into buffer.
.305f	8e cf 0a	stx $0acf			stx 	convertBuffer
.3062	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3065	c8		iny				iny 								; next char
.3066	4c 44 30	jmp $3044			jmp 	_TIGetChars
.3069					_TIEndGet:
.3069	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.306b	f0 1c		beq $3089			beq 	_TIFail
.306d	98		tya				tya
.306e	48		pha				pha
.306f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3071	85 2a		sta $2a				sta 	temp0
.3073	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3075	85 2b		sta $2b				sta 	1+(temp0)
.3077	a9 00		lda #$00			lda 	#0 							; stack 0
.3079	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.307b	a2 14		ldx #$14		ldx	#20
.307d	20 65 23	jsr $2365		jsr	mainHandler
.3080	68		pla				pla
.3081	a8		tay				tay
.3082	90 05		bcc $3089			bcc 	_TIFail 					; didn't convert.
.3084	20 8b 30	jsr $308b			jsr 	TIRecursiveOut 				; recursive output ?
.3087	38		sec				sec
.3088	60		rts				rts
.3089					_TIFail:
.3089	18		clc				clc
.308a	60		rts				rts
.308b					TIRecursiveOut:
.308b	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.308d	29 3f		and #$3f			and 	#$3F
.308f	09 40		ora #$40			ora 	#$40
.3091	48		pha				pha
.3092	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.3094	29 c0		and #$c0			and 	#$C0
.3096	05 50		ora $50				ora 	esInt1
.3098	05 58		ora $58				ora 	esInt2
.309a	05 60		ora $60				ora 	esInt3
.309c	f0 10		beq $30ae			beq 	_TIRONoRecursion
.309e	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.30a0					_TIROShift:
.30a0	46 60		lsr $60				lsr 	esInt3
.30a2	66 58		ror $58				ror 	esInt2
.30a4	66 50		ror $50				ror 	esInt1
.30a6	66 48		ror $48				ror 	esInt0
.30a8	ca		dex				dex
.30a9	d0 f5		bne $30a0			bne 	_TIROShift
.30ab	20 8b 30	jsr $308b			jsr 	TIRecursiveOut 				; call recursively
.30ae					_TIRONoRecursion:
.30ae	68		pla				pla 								; pull the old bit.
.30af	4c 55 2f	jmp $2f55			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.30b2					TokenisePunctuation:
.30b2	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.30b4	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.30b7	c8		iny				iny
.30b8	b1 28		lda ($28),y			lda 	(codePtr),y
.30ba	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.30bd	c8		iny				iny 								; Y is +2
.30be	a9 02		lda #$02			lda 	#2 							; 2 character string.
.30c0	8d cf 0a	sta $0acf			sta 	convertBuffer
.30c3	20 6a 2e	jsr $2e6a			jsr 	TokenSearch 				; search for that token.
.30c6	b0 0a		bcs $30d2			bcs 	_TIFound
.30c8	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.30cb	88		dey				dey 								; Y is now +1
.30cc	20 6a 2e	jsr $2e6a			jsr 	TokenSearch 				; search for that token.
.30cf	b0 01		bcs $30d2			bcs 	_TIFound
.30d1	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.30d2					_TIFound:
.30d2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.30d3					TokeniseString:
.30d3	c8		iny				iny 								; skip opening quote
.30d4	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.30d6	84 2a		sty $2a				sty 	temp0 						; save start.
.30d8					_TSGetLength:
.30d8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.30da	f0 21		beq $30fd			beq 	_TSFail						; end of line, fail
.30dc	c8		iny				iny
.30dd	e8		inx				inx
.30de	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.30e0	d0 f6		bne $30d8			bne 	_TSGetLength
.30e2	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.30e4	20 55 2f	jsr $2f55			jsr 	TokenWrite
.30e7	8a		txa				txa 								; output length
.30e8	20 55 2f	jsr $2f55			jsr 	TokenWrite
.30eb	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.30ed	e0 00		cpx #$00			cpx 	#0 							; check ended
.30ef	f0 09		beq $30fa			beq 	_TSExit
.30f1					_TSOutput:
.30f1	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.30f3	20 55 2f	jsr $2f55			jsr 	TokenWrite
.30f6	c8		iny				iny
.30f7	ca		dex				dex
.30f8	d0 f7		bne $30f1			bne 	_TSOutput
.30fa					_TSExit:
.30fa	c8		iny				iny 								; skip ending quote
.30fb	38		sec				sec 								; return CS.
.30fc	60		rts				rts
.30fd					_TSFail:
.30fd	18		clc				clc
.30fe	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.30ff					TokenTableAddress:
>30ff	07 31						.word 	Group0Text
>3101	b8 32						.word 	Group1Text
>3103	f1 32						.word 	Group2Text
>3105	fe 32						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3107					Group0Text:
>3107	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>310b	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>310e	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3112	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3115	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3118	01 be					.byte $01,$be                          ; $8b >
>311a	01 bc					.byte $01,$bc                          ; $8c <
>311c	01 bd					.byte $01,$bd                          ; $8d =
>311e	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3121	01 ab					.byte $01,$ab                          ; $8f +
>3123	01 ad					.byte $01,$ad                          ; $90 -
>3125	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3128	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>312b	01 aa					.byte $01,$aa                          ; $93 *
>312d	01 af					.byte $01,$af                          ; $94 /
>312f	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3133	01 de					.byte $01,$de                          ; $96 ^
>3135	01 a1					.byte $01,$a1                          ; $97 !
>3137	01 bf					.byte $01,$bf                          ; $98 ?
>3139	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3140	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3146	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>314a	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>314d	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3155	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>315b	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3160	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3165	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>316a	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3170	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3178	01 a8					.byte $01,$a8                          ; $a4 (
>317a	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>317f	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3184	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3189	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3191	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3196	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>319b	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>31a1	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>31a6	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>31ab	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>31b0	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>31b7	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>31be	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>31c3	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>31ca	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>31d1	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>31d7	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>31de	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>31e4	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>31ec	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>31f2	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>31f7	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>31fd	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3203	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3209	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>320e	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3213	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>321a	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3221	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3229	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3231	01 c0					.byte $01,$c0                          ; $c3 @
>3233	01 fe					.byte $01,$fe                          ; $c4 ~
>3235	01 a6					.byte $01,$a6                          ; $c5 &
>3237	01 a9					.byte $01,$a9                          ; $c6 )
>3239	01 ba					.byte $01,$ba                          ; $c7 :
>323b	01 ac					.byte $01,$ac                          ; $c8 ,
>323d	01 bb					.byte $01,$bb                          ; $c9 ;
>323f	01 a7					.byte $01,$a7                          ; $ca '
>3241	02 54 cf				.byte $02,$54,$cf                      ; $cb to
>3244	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cc step
>3249	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $cd proc
>324e	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $ce local
>3254	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $cf dim
>3258	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d0 rem
>325c	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d1 let
>3260	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d2 input
>3266	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d3 else
>326b	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d4 vdu
>326f	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d5 print
>3275	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d6 goto
>327a	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $d7 gosub
>3280	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $d8 return
>3287	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>328c	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $da assert
>3293	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $db poke
>3298	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $dc doke
>329d	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $dd loke
>32a2	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $de ink
>32a6	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $df paper
>32ac	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e0 cls
>32b0	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e1 locate
>32b7	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.32b8					Group1Text:
>32b8	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>32be	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>32c3	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>32c8	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>32cd	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>32d1	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>32d5	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>32da	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>32e2	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>32e6	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>32eb	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>32f0	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.32f1					Group2Text:
>32f1	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>32f7	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>32fd	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.32fe					Group3Text:
>32fe	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3305	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>330c	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.330d					tokeniserHandler:
.330d	7c 10 33	jmp ($3310,x)			jmp 	(tokeniserVectors,x)
.3310					tokeniserVectors:
>3310	7c 2c					.word Detokenise           ; index 0
>3312	72 2c					.word ListLine             ; index 2
>3314	f6 2e					.word Tokenise             ; index 4
>3316	f9 2e					.word TokeniseASCIIZ       ; index 6

;******  Return to file: basic.asm

.3318					section_end_tokeniser:
.3318					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d1b					varHash:
>0d1b							.fill	1
.0d1c					varType:
>0d1c							.fill 	1
.0d1d					varEnd:
>0d1d							.fill 	1
.007c					hashList:
>007c							.fill 	2
.3318					AccessVariable:
.3318	aa		tax				tax 								; stack in X
.3319	c8		iny				iny									; look at second character
.331a	b1 28		lda ($28),y			lda 	(codePtr),y
.331c	88		dey				dey
.331d	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.331f	d0 15		bne $3336			bne 	_AVLong 					; no, always use the hash tables.
.3321	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3323	38		sec				sec 	 							; make it 0-25
.3324	e9 01		sbc #$01			sbc 	#1
.3326	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3327	0a		asl a				asl 	a
.3328	95 48		sta $48,x			sta 	esInt0,x
.332a	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.332c	95 50		sta $50,x			sta 	esInt1,x
.332e	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3330	95 40		sta $40,x			sta 	esType,x
.3332	c8		iny				iny 								; skip over the variable reference in the code.
.3333	c8		iny				iny  								; (1 letter, 1 type)
.3334	8a		txa				txa 								; stack in A to return.
.3335	60		rts				rts
.3336					_AVLong:
.3336	8a		txa				txa
.3337	48		pha				pha
.3338	20 7f 33	jsr $337f			jsr 	AccessSetup 				; set up the basic information we need for later
.333b	20 ab 35	jsr $35ab			jsr 	FindVariable 				; does the variable exist already ?
.333e	b0 0e		bcs $334e			bcs 	_AVFound 					; yes, then its found
.3340	ad 1c 0d	lda $0d1c			lda 	varType 					; otherwise, is the variable type an array
.3343	4a		lsr a				lsr 	a
.3344	90 05		bcc $334b			bcc 	_AVCanCreate 				; if not, we can autocreate
.3346	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3348	20 c7 24	jsr $24c7		jsr	errorHandler
.334b					_AVCanCreate:
.334b	20 32 34	jsr $3432			jsr 	CreateVariable 				; variable does not exist, create it.
.334e					_AVFound:
.334e	68		pla				pla
.334f	aa		tax				tax
.3350	18		clc				clc 								; copy temp0 (variable record address)
.3351	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3353	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3355	95 48		sta $48,x			sta 	esInt0,x
.3357	a5 2b		lda $2b				lda 	temp0+1
.3359	69 00		adc #$00			adc 	#0
.335b	95 50		sta $50,x			sta 	esInt1,x
.335d	a9 00		lda #$00			lda 	#0
.335f	95 58		sta $58,x			sta 	esInt2,x
.3361	95 60		sta $60,x			sta 	esInt3,x
.3363	ac 1c 0d	ldy $0d1c			ldy 	varType 					; get the type ID from the type.
.3366	b9 3f 33	lda $333f,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3369	95 40		sta $40,x			sta 	esType,x
.336b	ac 1d 0d	ldy $0d1d			ldy 	varEnd 						; restore Y
.336e	ad 1c 0d	lda $0d1c			lda 	VarType 					; get variable type, put LSB into C
.3371	4a		lsr a				lsr 	a
.3372	90 03		bcc $3377			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3374	20 bc 33	jsr $33bc			jsr 	AccessArray 				; array lookup. if LSB was set.
.3377					_AVNotArray:
.3377	8a		txa				txa 								; return stack in A and return
.3378	60		rts				rts
.3379					_AVTypeTable:
>3379	80 80						.byte 	$80,$80						; integer
>337b	c0 c0						.byte 	$C0,$C0 					; string
>337d	81 81						.byte 	$81,$81 					; float
.337f					AccessSetup:
.337f	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3381	8d 1b 0d	sta $0d1b			sta 	varHash
.3384	98		tya				tya
.3385	48		pha				pha
.3386	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3388	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.338a	b0 0b		bcs $3397			bcs 	_ASComplete
.338c	18		clc				clc 								; add to the hash. Might improve this.
.338d	6d 1b 0d	adc $0d1b			adc 	varHash
.3390	8d 1b 0d	sta $0d1b			sta 	varHash
.3393	c8		iny				iny 								; next character
.3394	4c 86 33	jmp $3386			jmp 	_ASLoop
.3397					_ASComplete:
.3397	8d 1c 0d	sta $0d1c			sta 	varType 					; save variable type byte
.339a	c8		iny				iny
.339b	8c 1d 0d	sty $0d1d			sty 	varEnd 						; save the ending position.
.339e	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.339f	e9 3a		sbc #$3a			sbc 	#$3A
.33a1	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.33a2	0a		asl a				asl 	a
.33a3	0a		asl a				asl 	a
.33a4	0a		asl a				asl 	a 							; 2 bytes/word
.33a5	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.33a7	ad 1b 0d	lda $0d1b			lda 	varHash 					; get hash
.33aa	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.33ac	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.33ad	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.33af	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.33b1	85 7c		sta $7c				sta 	hashList 					; making hashLists point to the head of the link list.
.33b3	a9 0a		lda #$0a			lda 	#hashTables >> 8
.33b5	69 00		adc #$00			adc 	#0
.33b7	85 7d		sta $7d				sta 	hashList+1
.33b9	68		pla				pla
.33ba	a8		tay				tay
.33bb	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.33bc					AccessArray:
.33bc	e8		inx				inx
.33bd	8a		txa				txa
.33be	a2 06		ldx #$06		ldx	#6
.33c0	20 65 23	jsr $2365		jsr	mainHandler
.33c3	aa		tax				tax
.33c4	ca		dex				dex
.33c5	a2 00		ldx #$00		ldx	#0
.33c7	20 65 23	jsr $2365		jsr	mainHandler
.33ca	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.33cc	15 59		ora $59,x			ora 	esInt2+1,x
.33ce	d0 33		bne $3403			bne 	_AABadIndex
.33d0	98		tya				tya
.33d1	48		pha				pha
.33d2	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.33d4	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.33d6	b5 50		lda $50,x			lda 	esInt1,x
.33d8	85 2b		sta $2b				sta 	temp0+1
.33da	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.33dc	b5 49		lda $49,x			lda 	esInt0+1,x
.33de	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.33e0	c8		iny				iny
.33e1	b5 51		lda $51,x			lda 	esInt1+1,x
.33e3	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.33e5	b0 1c		bcs $3403			bcs 	_AABadIndex 				; if >= then fail.
.33e7	e8		inx				inx 								; point to index
.33e8	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.33ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.33ec	20 08 34	jsr $3408			jsr 	MultiplyTOSByA 				; specialist multiplier.
.33ef	ca		dex				dex
.33f0	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.33f2	18		clc				clc
.33f3	b5 49		lda $49,x			lda 	esInt0+1,x
.33f5	71 2a		adc ($2a),y			adc 	(temp0),y
.33f7	95 48		sta $48,x			sta 	esInt0,x
.33f9	b5 51		lda $51,x			lda 	esInt1+1,x
.33fb	c8		iny				iny
.33fc	71 2a		adc ($2a),y			adc 	(temp0),y
.33fe	95 50		sta $50,x			sta 	esInt1,x
.3400	68		pla				pla
.3401	a8		tay				tay
.3402	60		rts				rts
.3403					_AABadIndex:
.3403	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3405	20 c7 24	jsr $24c7		jsr	errorHandler
.3408					MultiplyTOSByA:
.3408	48		pha				pha
.3409	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.340b	85 2c		sta $2c				sta 	temp1
.340d	b5 50		lda $50,x			lda 	esInt1,x
.340f	85 2d		sta $2d				sta 	temp1+1
.3411	68		pla				pla
.3412	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3414	36 50		rol $50,x			rol 	esInt1,x
.3416	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3418	f0 17		beq $3431			beq 	_MTBAExit
.341a	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.341c	d0 0f		bne $342d			bne 	_MTBANotFloat
.341e	48		pha				pha
.341f	18		clc				clc 								; so this will make it x 3
.3420	b5 48		lda $48,x			lda 	esInt0,x
.3422	65 2c		adc $2c				adc 	temp1
.3424	95 48		sta $48,x			sta 	esInt0,x
.3426	b5 50		lda $50,x			lda 	esInt1,x
.3428	65 2d		adc $2d				adc 	temp1+1
.342a	95 50		sta $50,x			sta 	esInt1,x
.342c	68		pla				pla
.342d					_MTBANotFloat:
.342d	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.342f	36 50		rol $50,x			rol 	esInt1,x
.3431					_MTBAExit:
.3431	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3432					CreateVariable:
.3432	98		tya				tya 								; push Y on the stack twice.
.3433	48		pha				pha									; position in code of the new variable.
.3434	48		pha				pha
.3435	ae 1c 0d	ldx $0d1c			ldx 	varType 					; get var type 0-5 from the var type
.3438	bd 51 34	lda $3451,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.343b	48		pha				pha 								; save length
.343c	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.343e	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3440	a5 36		lda $36				lda 	lowMemory+1
.3442	85 2b		sta $2b				sta 	temp0+1
.3444	68		pla				pla 								; get length
.3445	18		clc				clc 								; add to low memory.
.3446	65 35		adc $35				adc 	lowMemory
.3448	85 35		sta $35				sta 	lowMemory
.344a	90 02		bcc $344e			bcc 	_CVNoCarry
.344c	e6 36		inc $36				inc 	lowMemory+1
.344e					_CVNoCarry:
.344e	ad 1b 0d	lda $0d1b			lda 	varHash 					; store hash at offset 4.
.3451	a0 04		ldy #$04			ldy 	#4
.3453	91 2a		sta ($2a),y			sta 	(temp0),y
.3455	68		pla				pla 								; offset, work out where the variable name is.
.3456	18		clc				clc
.3457	65 28		adc $28				adc 	codePtr
.3459	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.345b	91 2a		sta ($2a),y			sta 	(temp0),y
.345d	a5 29		lda $29				lda 	codePtr+1
.345f	69 00		adc #$00			adc 	#0
.3461	c8		iny				iny
.3462	91 2a		sta ($2a),y			sta 	(temp0),y
.3464	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3467	b0 03		bcs $346c			bcs 	_CVNotImmediate
.3469	20 c9 34	jsr $34c9			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.346c					_CVNotImmediate:
.346c	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.346e	b1 7c		lda ($7c),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3470	91 2a		sta ($2a),y			sta 	(temp0),y
.3472	c8		iny				iny
.3473	b1 7c		lda ($7c),y			lda 	(hashList),y
.3475	91 2a		sta ($2a),y			sta 	(temp0),y
.3477	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3479	91 7c		sta ($7c),y			sta 	(hashList),y
.347b	88		dey				dey
.347c	a5 2a		lda $2a				lda 	temp0
.347e	91 7c		sta ($7c),y			sta 	(hashList),y
.3480	ad 1c 0d	lda $0d1c			lda 	varType 					; type in A
.3483	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3485	20 91 34	jsr $3491			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3488	68		pla				pla
.3489	a8		tay				tay
.348a	60		rts				rts
>348b	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>348d	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>348f	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3491					ZeroTemp0Y:
.3491	4a		lsr a				lsr 	a 							; bit 0 in carry
.3492	0a		asl a				asl 	a
.3493	b0 19		bcs $34ae			bcs 	_ZTExit 					; we don't initialise arrays.
.3495	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3497	f0 16		beq $34af			beq 	_ZTWriteNullString 			; write "" string
.3499	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.349b	f0 22		beq $34bf			beq 	_ZTWriteFloat
.349d	98		tya				tya
.349e	48		pha				pha
.349f	a9 00		lda #$00			lda 	#0
.34a1	91 2a		sta ($2a),y			sta 	(temp0),y
.34a3	c8		iny				iny
.34a4	91 2a		sta ($2a),y			sta 	(temp0),y
.34a6	c8		iny				iny
.34a7	91 2a		sta ($2a),y			sta 	(temp0),y
.34a9	c8		iny				iny
.34aa	91 2a		sta ($2a),y			sta 	(temp0),y
.34ac	68		pla				pla
.34ad	a8		tay				tay
.34ae					_ZTExit:
.34ae	60		rts				rts
.34af					_ZTWriteNullString:
.34af	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.34b1	8d ce 0a	sta $0ace			sta 	NullString
.34b4	a9 ce		lda #$ce			lda 	#NullString & $FF
.34b6	91 2a		sta ($2a),y			sta 	(temp0),y
.34b8	a9 0a		lda #$0a			lda 	#NullString >> 8
.34ba	c8		iny				iny
.34bb	91 2a		sta ($2a),y			sta 	(temp0),y
.34bd	88		dey				dey
.34be	60		rts				rts
.34bf					_ZTWriteFloat:
.34bf	8a		txa				txa
.34c0	48		pha				pha
.34c1	a2 1e		ldx #$1e		ldx	#30
.34c3	20 f9 27	jsr $27f9		jsr	floatingpointHandler
.34c6	68		pla				pla
.34c7	aa		tax				tax
.34c8	60		rts				rts
.34c9					CloneVariableName:
.34c9	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.34cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.34cd	85 2e		sta $2e				sta 	temp2
.34cf	c8		iny				iny
.34d0	b1 2a		lda ($2a),y			lda 	(temp0),y
.34d2	85 2f		sta $2f				sta 	temp2+1
.34d4	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.34d6	91 2a		sta ($2a),y			sta 	(temp0),y
.34d8	88		dey				dey
.34d9	a5 35		lda $35				lda 	lowMemory
.34db	91 2a		sta ($2a),y			sta 	(temp0),y
.34dd	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.34df					_CVNCopy:
.34df	b1 2e		lda ($2e),y			lda		(temp2),y
.34e1	91 35		sta ($35),y			sta 	(lowMemory),y
.34e3	c8		iny				iny
.34e4	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.34e6	90 f7		bcc $34df			bcc 	_CVNCopy
.34e8	98		tya				tya 								; add Y to low memory
.34e9	18		clc				clc
.34ea	65 35		adc $35				adc 	lowMemory
.34ec	85 35		sta $35				sta 	lowMemory
.34ee	90 02		bcc $34f2			bcc 	_CVNNoCarry
.34f0	e6 36		inc $36				inc 	lowMemory+1
.34f2					_CVNNoCarry:
.34f2	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.34f3					CreateArray:
.34f3	20 7f 33	jsr $337f			jsr 	AccessSetup 				; set up the basic stuff.
.34f6	ad 1c 0d	lda $0d1c			lda 	varType 					; is the variable type an array
.34f9	4a		lsr a				lsr 	a
.34fa	90 3f		bcc $353b			bcc 	_CANotArray 				; no, cause an error.
.34fc	20 ab 35	jsr $35ab			jsr 	FindVariable 				; does the variable exist already
.34ff	b0 35		bcs $3536			bcs 	_CAFound 					; cannot redefine it.
.3501	20 32 34	jsr $3432			jsr 	CreateVariable 				; create the variable entry.
.3504	ac 1d 0d	ldy $0d1d			ldy 	varEnd 						; point Y to the end of the variable entry.
.3507	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3509	48		pha				pha
.350a	a5 2b		lda $2b				lda 	temp0+1
.350c	48		pha				pha
.350d	ad 1c 0d	lda $0d1c			lda 	varType 					; push variable type on the stack.
.3510	48		pha				pha
.3511	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3513	a2 06		ldx #$06		ldx	#6
.3515	20 65 23	jsr $2365		jsr	mainHandler
.3518	a2 00		ldx #$00		ldx	#0
.351a	20 65 23	jsr $2365		jsr	mainHandler
.351d	68		pla				pla 		 						; restore type and position.
.351e	8d 1c 0d	sta $0d1c			sta 	varType
.3521	68		pla				pla
.3522	85 2b		sta $2b				sta 	temp0+1
.3524	68		pla				pla
.3525	85 2a		sta $2a				sta 	temp0
.3527	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3529	29 e0		and #$e0			and 	#$E0
.352b	05 58		ora $58				ora 	esInt2
.352d	05 60		ora $60				ora 	esInt3
.352f	f0 0f		beq $3540			beq 	_CASizeOk
.3531					_CASize:
.3531	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3533	20 c7 24	jsr $24c7		jsr	errorHandler
.3536					_CAFound:
.3536	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3538	20 c7 24	jsr $24c7		jsr	errorHandler
.353b					_CANotArray:
.353b	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.353d	20 c7 24	jsr $24c7		jsr	errorHandler
.3540					_CASizeOk:
.3540	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3542	d0 02		bne $3546			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3544	e6 49		inc $49				inc 	esInt0+1
.3546					_CANoCarry:
.3546	98		tya				tya
.3547	48		pha				pha
.3548	a0 05		ldy #$05			ldy 	#5
.354a	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.354c	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.354e	c8		iny				iny
.354f	a5 36		lda $36				lda 	lowMemory+1
.3551	91 2a		sta ($2a),y			sta 	(temp0),y
.3553	c8		iny				iny
.3554	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3556	91 2a		sta ($2a),y			sta 	(temp0),y
.3558	c8		iny				iny
.3559	a5 50		lda $50				lda 	esInt1
.355b	91 2a		sta ($2a),y			sta 	(temp0),y
.355d	c8		iny				iny
.355e	ae 1c 0d	ldx $0d1c			ldx 	varType 					; get the length per element
.3561	bd 69 35	lda $3569,x			lda 	_CAActualSize-$3A-1,x
.3564	91 2a		sta ($2a),y			sta 	(temp0),y
.3566	aa		tax				tax 								; save size in X
.3567	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3569	85 2a		sta $2a				sta 	temp0
.356b	a5 36		lda $36				lda 	lowMemory+1
.356d	85 2b		sta $2b				sta 	temp0+1
.356f	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3571	85 2c		sta $2c				sta 	temp1
.3573	85 2d		sta $2d				sta 	temp1+1
.3575					_CAInitialiseArray:
.3575	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3577	ad 1c 0d	lda $0d1c			lda 	varType 					; base type of array in A.
.357a	29 fe		and #$fe			and 	#$FE
.357c	20 91 34	jsr $3491			jsr 	ZeroTemp0Y
.357f	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3580	18		clc				clc
.3581	65 2a		adc $2a				adc 	temp0
.3583	85 2a		sta $2a				sta 	temp0
.3585	85 35		sta $35				sta 	lowMemory
.3587	a5 2b		lda $2b				lda 	temp0+1
.3589	69 00		adc #$00			adc 	#0
.358b	85 2b		sta $2b				sta 	temp0+1
.358d	85 36		sta $36				sta 	lowMemory+1
.358f	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3591	d0 02		bne $3595			bne 	_CAIANoCarry
.3593	e6 2d		inc $2d				inc 	temp1+1
.3595					_CAIANoCarry:
.3595	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3597	c5 2c		cmp $2c				cmp 	temp1
.3599	d0 da		bne $3575			bne 	_CAInitialiseArray
.359b	a5 50		lda $50				lda 	esInt1
.359d	c5 2d		cmp $2d				cmp 	temp1+1
.359f	d0 d4		bne $3575			bne 	_CAInitialiseArray
.35a1	68		pla				pla
.35a2	a8		tay				tay
.35a3	60		rts				rts
.35a4					_CAActualSize:
>35a4	04 00						.byte 	VarISize,0
>35a6	02 00						.byte 	VarSSize,0
>35a8	06 00						.byte 	VarFSize,0
>35aa	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.35ab					FindVariable:
.35ab	98		tya				tya
.35ac	48		pha				pha
.35ad	98		tya				tya 								; point temp2 to the actual name
.35ae	18		clc				clc 								; in memory of the variable being created
.35af	65 28		adc $28				adc 	codePtr
.35b1	85 2e		sta $2e				sta 	temp2
.35b3	a5 29		lda $29				lda 	codePtr+1
.35b5	69 00		adc #$00			adc 	#0
.35b7	85 2f		sta $2f				sta 	temp2+1
.35b9	a0 00		ldy #$00			ldy 	#0
.35bb	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.35bd	85 2a		sta $2a				sta 	temp0
.35bf	a5 7d		lda $7d				lda 	hashList+1
.35c1	85 2b		sta $2b				sta 	temp0+1
.35c3	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.35c5	b1 2a		lda ($2a),y			lda 	(temp0),y
.35c7	f0 2c		beq $35f5			beq 	_FVFail
.35c9	aa		tax				tax
.35ca	88		dey				dey		 							; get LSB
.35cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.35cd	85 2a		sta $2a				sta 	temp0 						; update pointer.
.35cf	86 2b		stx $2b				stx 	temp0+1
.35d1	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.35d3	b1 2a		lda ($2a),y			lda 	(temp0),y
.35d5	cd 1b 0d	cmp $0d1b			cmp 	varHash
.35d8	d0 e9		bne $35c3			bne 	_FVNext 					; if not, no point in checking the name.
.35da	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.35db	b1 2a		lda ($2a),y			lda 	(temp0),y
.35dd	85 2d		sta $2d				sta 	temp1+1
.35df	88		dey				dey
.35e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.35e2	85 2c		sta $2c				sta 	temp1
.35e4	a0 00		ldy #$00			ldy 	#0
.35e6					_FVCheck:
.35e6	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.35e8	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.35ea	d0 d7		bne $35c3			bne 	_FVNext		 				; fail if different.
.35ec	c8		iny				iny
.35ed	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.35ef	90 f5		bcc $35e6			bcc 	_FVCheck
.35f1	68		pla				pla
.35f2	a8		tay				tay
.35f3	38		sec				sec
.35f4	60		rts				rts
.35f5					_FVFail:
.35f5	68		pla				pla
.35f6	a8		tay				tay
.35f7	18		clc				clc
.35f8	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.35f9					HashTableReset:
.35f9	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.35fb	a9 00		lda #$00			lda 	#0
.35fd					_HTRClear:
.35fd	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3600	ca		dex				dex
.3601	d0 fa		bne $35fd			bne 	_HTRClear
.3603	60		rts				rts

;******  Return to file: variable/variable.asm

.3604					variableHandler:
.3604	7c 07 36	jmp ($3607,x)			jmp 	(variableVectors,x)
.3607					variableVectors:
>3607	18 33					.word AccessVariable       ; index 0
>3609	f3 34					.word CreateArray          ; index 2
>360b	f9 35					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.360d					section_end_variable:

;******  End of listing
