
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Fri Apr 02 11:19:05 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_TEXT                     = $90 ; text
=$91					TKW_PLOT                     = $91 ; plot
=$92					TKW_LINE                     = $92 ; line
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	61 43						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4b		lda #$4b			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 36 25	jsr $2536		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 36 25	jsr $2536		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 8f 3e	jsr $3e8f		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 12 47	jsr $4712		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 e3 4a	jsr $4ae3		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 12 47	jsr $4712		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 d2 3b	jsr $3bd2		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 d2 3b	jsr $3bd2		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 d2 3b	jsr $3bd2		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 e3 4a	jsr $4ae3		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 d2 3b	jsr $3bd2		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 36 25	jsr $2536		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 94 18	jmp ($1894,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c b1 20	jmp $20b1			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	e3 21					.word	Command_VPoke            ; $86 vpoke
>1888	e6 21					.word	Command_VDoke            ; $87 vdoke
>188a	bb 21					.word	Command_VLoad            ; $88 vload
>188c	c3 20					.word	CommandMode              ; $89 mode
>188e	84 21					.word	CommandPalette           ; $8a palette
>1890	ae 1e					.word	CommandSprite            ; $8b sprite
>1892	80 21					.word	CommandClg               ; $8c clg
>1894	ba 1a					.word	Command_Rect             ; $8d rect
>1896	c2 1a					.word	Command_Frame            ; $8e frame
>1898	78 2f					.word	Unimplemented            ; $8f draw
>189a	78 2f					.word	Unimplemented            ; $90 text
>189c	a7 1a					.word	Command_Plot             ; $91 plot
>189e	81 19					.word	Command_Line             ; $92 line

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a0					Group3Vectors:
>18a0	2f 22					.word	Command_VPeek            ; $86 vpeek(
>18a2	32 22					.word	Command_VDeek            ; $87 vdeek(
>18a4	81 20					.word	Sprite_GetX              ; $88 sprite.x(
>18a6	84 20					.word	Sprite_GetY              ; $89 sprite.y(
>18a8	f1 1d					.word	FunctionCollide          ; $8a hit(
>18aa	69 1d					.word	Unary_JoyX               ; $8b joy.x(
>18ac	6c 1d					.word	Unary_JoyY               ; $8c joy.y(
>18ae	a7 1d					.word	Unary_JButton            ; $8d joy.b(
>18b0	3c 1d					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b2					XEvaluateInteger:
.18b2	8a		txa				txa
.18b3	a2 0a		ldx #$0a		ldx	#10
.18b5	20 d2 3b	jsr $3bd2		jsr	mainHandler
.18b8	aa		tax				tax
.18b9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gEndStorage:
.18ba					GResetStorage:
.18ba	8a		txa				txa
.18bb	48		pha				pha
.18bc	a2 15		ldx #$15			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18be	a9 00		lda #$00			lda 	#0
.18c0					_GRSLoop:
.18c0	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c3	ca		dex				dex
.18c4	10 fa		bpl $18c0			bpl 	_GRSLoop
.18c6	68		pla				pla
.18c7	aa		tax				tax
.18c8	60		rts				rts
.18c9					GHandler:
.18c9	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18cc	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18cf	88		dey				dey 								; predecrement
.18d0					_GHLoopNext:
.18d0	c8		iny				iny									; advance one character
.18d1					_GHLoop:
.18d1	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18d3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d5	f0 f9		beq $18d0			beq 	_GHLoopNext
.18d7	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18d9	f0 4c		beq $1927			beq 	_GHExit
.18db	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18dd	f0 48		beq $1927			beq 	_GHExit
.18df	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e1	f0 33		beq $1916			beq 	_GHCallHandler 				; update post & call the handler
.18e3	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e5	f0 2f		beq $1916			beq 	_GHCallHandler
.18e7	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18e9	f0 10		beq $18fb			beq 	_GHCPairSkip
.18eb	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18ed					_GHCheckTokens:
.18ed	b1 28		lda ($28),y			lda 	(codePtr),y
.18ef	dd 28 19	cmp $1928,x			cmp 	_GHTokenTable,x
.18f2	f0 0e		beq $1902			beq 	_GHFoundToken
.18f4	e8		inx				inx
.18f5	bd 28 19	lda $1928,x			lda 	_GHTokenTable,x
.18f8	d0 f3		bne $18ed			bne 	_GHCheckTokens
.18fa	88		dey				dey
.18fb					_GHCPairSkip:
.18fb	c8		iny				iny
.18fc					_GHCPair:
.18fc	20 2e 19	jsr $192e			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.18ff	4c d1 18	jmp $18d1			jmp 	_GHLoop
.1902					_GHFoundToken:
.1902	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1903	8a		txa				txa
.1904	48		pha				pha
.1905	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1907	a2 0c		ldx #$0c		ldx	#12
.1909	20 d2 3b	jsr $3bd2		jsr	mainHandler
.190c	68		pla				pla
.190d	aa		tax				tax
.190e	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1910	9d 06 0c	sta $0c06,x			sta 	gModifiers,x 				; update the modifiers
.1913	4c d1 18	jmp $18d1			jmp 	_GHLoop 					; and loop back
.1916					_GHCallHandler:
.1916	c8		iny				iny 								; consume AT or TO.
.1917	20 2e 19	jsr $192e			jsr 	GHMakeCurrent 				; update the coordinates.
.191a	98		tya				tya
.191b	48		pha				pha
.191c	20 24 19	jsr $1924			jsr 	_GHCallHandlerCode 			; call the handler code
.191f	68		pla				pla
.1920	a8		tay				tay
.1921	4c d1 18	jmp $18d1			jmp 	_GHLoop 					; and loop round.
.1924					_GHCallHandlerCode:
.1924	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.1927					_GHExit:
.1927	60		rts				rts
.1928					_GHTokenTable:
>1928	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>192d	00						.byte 	0
.192e					GHMakeCurrent:
.192e	8a		txa				txa
.192f	48		pha				pha
.1930	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1932	20 42 19	jsr $1942			jsr 	_GHMCDoIt
.1935	a2 02		ldx #$02		ldx	#2
.1937	20 d2 3b	jsr $3bd2		jsr	mainHandler
.193a	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.193c	20 42 19	jsr $1942			jsr 	_GHMCDoIt
.193f	68		pla				pla
.1940	aa		tax				tax
.1941	60		rts				rts
.1942					_GHMCDoIt:
.1942	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1945	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1948	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.194b	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.194e	8a		txa				txa
.194f	48		pha				pha
.1950	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1952	a2 0a		ldx #$0a		ldx	#10
.1954	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1957	68		pla				pla
.1958	aa		tax				tax
.1959	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.195b	dd 0b 0c	cmp $0c0b,x			cmp 	gdXLimit,x
.195e	a5 a0		lda $a0				lda 	esInt1
.1960	fd 0c 0c	sbc $0c0c,x			sbc 	gdXLimit+1,x
.1963	b0 17		bcs $197c			bcs 	_GMHCRange
.1965	a5 a8		lda $a8				lda 	esInt2
.1967	05 b0		ora $b0				ora 	esInt3
.1969	d0 11		bne $197c			bne 	_GMHCRange
.196b	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.196d	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.1970	9d ee 0b	sta $0bee,x			sta 	gX2,x
.1973	a5 a0		lda $a0				lda 	esInt1
.1975	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1978	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.197b	60		rts				rts
.197c					_GMHCRange:
.197c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.197e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0bfc					gdySign:
>0bfc							.fill 	1
.1981					Command_Line:
.1981	a9 89		lda #$89			lda 	#LineHandler & $FF
.1983	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.1985	20 c9 18	jsr $18c9			jsr 	GHandler
.1988	60		rts				rts
.1989					LineHandler:
.1989	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.198b	a0 04		ldy #$04			ldy 	#gX2-gX1
.198d	20 72 1b	jsr $1b72			jsr 	CompareCoordsEq
.1990	f0 09		beq $199b			beq 	_LHRectCode
.1992	a2 02		ldx #$02			ldx 	#gY1-gX1
.1994	a0 06		ldy #$06			ldy 	#gY2-gX1
.1996	20 72 1b	jsr $1b72			jsr 	CompareCoordsEq
.1999	d0 03		bne $199e			bne 	_LHLineDrawer
.199b					_LHRectCode:
.199b	4c ce 1a	jmp $1ace			jmp 	RectHandler
.199e					_LHLineDrawer:
.199e	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19a0	a0 04		ldy #$04			ldy 	#gX2-gX1
.19a2	20 5d 1b	jsr $1b5d			jsr 	CompareCoords
.19a5	90 0a		bcc $19b1			bcc 	_LHNoSwap
.19a7	20 a5 1b	jsr $1ba5			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19aa	a2 02		ldx #$02			ldx 	#gY1-gX1
.19ac	a0 06		ldy #$06			ldy 	#gY2-gX1
.19ae	20 a5 1b	jsr $1ba5			jsr 	GSwapCoords
.19b1					_LHNoSwap:
.19b1	20 da 19	jsr $19da			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19b4	a0 00		ldy #$00			ldy 	#gX1-gX1
.19b6	20 47 1b	jsr $1b47			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19b9	b0 15		bcs $19d0			bcs 	_LHExit 					; line off screen.
.19bb					_LHDrawLoop:
.19bb	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19bd	a0 04		ldy #$04			ldy 	#gX2-gX1
.19bf	20 72 1b	jsr $1b72			jsr 	CompareCoordsEq
.19c2	d0 0d		bne $19d1			bne 	_LHNextPixel
.19c4	a2 06		ldx #$06			ldx 	#gY2-gX1
.19c6	a0 06		ldy #$06			ldy 	#gY2-gX1
.19c8	20 72 1b	jsr $1b72			jsr 	CompareCoordsEq
.19cb	d0 04		bne $19d1			bne 	_LHNextPixel
.19cd	20 61 1c	jsr $1c61			jsr 	gdPlotInk 					; plot the last pixel.
.19d0					_LHExit:
.19d0	60		rts				rts
.19d1					_LHNextPixel:
.19d1	20 61 1c	jsr $1c61			jsr 	gdPlotInk 					; plot the pixel.
.19d4	20 2e 1a	jsr $1a2e			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19d7	4c bb 19	jmp $19bb			jmp  	_LHDrawLoop 				; and loop back if okay
.19da					BresenhamInitialise:
.19da	38		sec				sec
.19db	ad ee 0b	lda $0bee			lda 	gX2
.19de	ed ea 0b	sbc $0bea			sbc 	gX1
.19e1	8d f6 0b	sta $0bf6			sta 	gdX
.19e4	ad ef 0b	lda $0bef			lda 	gX2+1
.19e7	ed eb 0b	sbc $0beb			sbc 	gX1+1
.19ea	8d f7 0b	sta $0bf7			sta 	gdX+1
.19ed	38		sec				sec
.19ee	ad ec 0b	lda $0bec			lda 	gY1
.19f1	ed f0 0b	sbc $0bf0			sbc 	gY2
.19f4	8d f8 0b	sta $0bf8			sta 	gdy
.19f7	ad ed 0b	lda $0bed			lda 	gY1+1
.19fa	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.19fd	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a00	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a03	8d fc 0b	sta $0bfc			sta 	gdysign
.1a06	30 12		bmi $1a1a			bmi 	_BINormal
.1a08	38		sec				sec
.1a09	a9 00		lda #$00			lda 	#0
.1a0b	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a0e	8d f8 0b	sta $0bf8			sta 	gdy
.1a11	a9 00		lda #$00			lda 	#0
.1a13	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a16	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a19	60		rts				rts
.1a1a					_BINormal:
.1a1a	18		clc				clc
.1a1b	ad f6 0b	lda $0bf6			lda 	gdx
.1a1e	6d f8 0b	adc $0bf8			adc 	gdy
.1a21	8d f2 0b	sta $0bf2			sta 	gError
.1a24	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a27	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a2a	8d f3 0b	sta $0bf3			sta 	gError+1
.1a2d	60		rts				rts
.1a2e					BresenhamIteration:
.1a2e	ad f2 0b	lda $0bf2			lda 	gError
.1a31	0a		asl a				asl 	a
.1a32	8d f4 0b	sta $0bf4			sta 	g2Error
.1a35	ad f3 0b	lda $0bf3			lda 	gError+1
.1a38	2a		rol a				rol 	a
.1a39	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a3c	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a3e	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a40	20 6a 1b	jsr $1b6a			jsr 	CompareCoordsSigned
.1a43	30 03		bmi $1a48			bmi 	_BINoE2DY
.1a45	20 55 1a	jsr $1a55			jsr 	BresenhamE2GEDY
.1a48					_BINoE2DY:
.1a48	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a4a	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a4c	20 6a 1b	jsr $1b6a			jsr 	CompareCoordsSigned
.1a4f	30 03		bmi $1a54			bmi 	_BINoDXE2
.1a51	20 74 1a	jsr $1a74			jsr 	BresenhamDXGEE2
.1a54					_BINoDXE2:
.1a54	60		rts				rts
.1a55					BresenhamE2GEDY:
.1a55	18		clc				clc
.1a56	ad f2 0b	lda $0bf2			lda 	gError
.1a59	6d f8 0b	adc $0bf8			adc 	gdy
.1a5c	8d f2 0b	sta $0bf2			sta 	gError
.1a5f	ad f3 0b	lda $0bf3			lda 	gError+1
.1a62	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a65	8d f3 0b	sta $0bf3			sta 	gError+1
.1a68	ee ea 0b	inc $0bea			inc 	gX1
.1a6b	d0 03		bne $1a70			bne 	_BE2Skip
.1a6d	ee eb 0b	inc $0beb			inc 	gX1+1
.1a70					_BE2Skip:
.1a70	20 c2 1b	jsr $1bc2			jsr 	gdMvRight
.1a73	60		rts				rts
.1a74					BresenhamDXGEE2:
.1a74	18		clc				clc
.1a75	ad f2 0b	lda $0bf2			lda 	gError
.1a78	6d f6 0b	adc $0bf6			adc 	gdx
.1a7b	8d f2 0b	sta $0bf2			sta 	gError
.1a7e	ad f3 0b	lda $0bf3			lda 	gError+1
.1a81	6d f7 0b	adc $0bf7			adc 	gdx+1
.1a84	8d f3 0b	sta $0bf3			sta 	gError+1
.1a87	ad fc 0b	lda $0bfc			lda 	gdySign
.1a8a	10 0c		bpl $1a98			bpl 	_BEDXInvertY
.1a8c	ee ec 0b	inc $0bec			inc 	gY1
.1a8f	d0 03		bne $1a94			bne 	_BEDXSkip
.1a91	ee ed 0b	inc $0bed			inc 	gY1+1
.1a94					_BEDXSkip:
.1a94	20 fd 1b	jsr $1bfd			jsr 	gdMvDown
.1a97	60		rts				rts
.1a98					_BEDXInvertY:
.1a98	ad ec 0b	lda $0bec			lda 	gY1
.1a9b	d0 03		bne $1aa0			bne 	_BEDXSkip2
.1a9d	ce ed 0b	dec $0bed			dec 	gY1+1
.1aa0					_BEDXSkip2:
.1aa0	ce ec 0b	dec $0bec			dec 	gY1
.1aa3	20 d8 1b	jsr $1bd8			jsr 	gdMvUp
.1aa6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1aa7					Command_Plot:
.1aa7	a9 af		lda #$af			lda 	#PlotHandler & $FF
.1aa9	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1aab	20 c9 18	jsr $18c9			jsr 	GHandler
.1aae	60		rts				rts
.1aaf					PlotHandler:
.1aaf	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ab1	20 47 1b	jsr $1b47			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1ab4	b0 03		bcs $1ab9			bcs 	_PHExit 					; off screen, return with CS.
.1ab6	20 61 1c	jsr $1c61			jsr 	gdPlotInk 					; pixel in Ink.
.1ab9	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0bfd					frameFlag:
>0bfd							.fill 	1
.1aba					Command_Rect:
.1aba	a9 ce		lda #$ce			lda 	#RectHandler & $FF
.1abc	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1abe	20 c9 18	jsr $18c9			jsr 	GHandler
.1ac1	60		rts				rts
.1ac2					Command_Frame:
.1ac2	a9 ca		lda #$ca			lda 	#FrameHandler & $FF
.1ac4	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1ac6	20 c9 18	jsr $18c9			jsr 	GHandler
.1ac9	60		rts				rts
.1aca					FrameHandler:
.1aca	a9 01		lda #$01			lda 	#1
.1acc	d0 02		bne $1ad0			bne 	RectHandler+2
.1ace					RectHandler:
.1ace	a9 00		lda #$00			lda 	#0
.1ad0	8d fd 0b	sta $0bfd			sta 	frameFlag
.1ad3	20 81 1b	jsr $1b81			jsr 	BoxSort 					; sort so topleft/bottom right
.1ad6	20 ff 1a	jsr $1aff			jsr 	DrawBoxPart 				; solid first line
.1ad9					_FHLoop:
.1ad9	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1adb	a0 06		ldy #$06			ldy 	#gY2-gX1
.1add	20 5d 1b	jsr $1b5d			jsr 	CompareCoords
.1ae0	b0 19		bcs $1afb			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1ae2	ad fd 0b	lda $0bfd			lda 	frameFlag 					; identify solid or frame ?
.1ae5	f0 06		beq $1aed			beq 	_FHIsSolidRect
.1ae7	20 18 1b	jsr $1b18			jsr 	DrawBoxEnds
.1aea	4c f0 1a	jmp $1af0			jmp 	_FHNext
.1aed					_FHIsSolidRect:
.1aed	20 ff 1a	jsr $1aff			jsr 	DrawBoxPart
.1af0					_FHNext:
.1af0	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1af3	d0 e4		bne $1ad9			bne 	_FHLoop
.1af5	ee ed 0b	inc $0bed			inc 	gY1+1
.1af8	4c d9 1a	jmp $1ad9			jmp 	_FHLoop
.1afb					_FHLastLine:
.1afb	20 ff 1a	jsr $1aff			jsr 	DrawBoxPart 				; solid last line whatever
.1afe					_FHExit:
.1afe	60		rts				rts
.1aff					DrawBoxPart:
.1aff	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b01	20 47 1b	jsr $1b47			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b04	38		sec				sec 								; calculate line length => temp0
.1b05	ad ee 0b	lda $0bee			lda 	gX2
.1b08	ed ea 0b	sbc $0bea			sbc 	gX1
.1b0b	48		pha				pha
.1b0c	ad ef 0b	lda $0bef			lda 	gX2+1
.1b0f	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b12	aa		tax				tax
.1b13	68		pla				pla 								; line length in XA.
.1b14	20 30 1b	jsr $1b30			jsr 	DrawHorizontalLine
.1b17	60		rts				rts
.1b18					DrawBoxEnds:
.1b18	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b1a	20 47 1b	jsr $1b47			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b1d	20 61 1c	jsr $1c61			jsr 	gdPlotInk 					; LH end.
.1b20	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b23	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b26	20 1a 1d	jsr $1d1a			jsr 	gdSetX
.1b29	20 1f 1c	jsr $1c1f			jsr		gdSetDrawPosition 			; update position.
.1b2c	20 61 1c	jsr $1c61			jsr 	gdPlotInk 					; RH end.
.1b2f	60		rts				rts
.1b30					DrawHorizontalLine:
.1b30	86 2d		stx $2d				stx 	temp1+1
.1b32	85 2c		sta $2c				sta 	temp1
.1b34					_DVLLoop:
.1b34	20 61 1c	jsr $1c61			jsr 	gdPlotInk
.1b37	20 c2 1b	jsr $1bc2			jsr		gdMvRight
.1b3a	a5 2c		lda $2c				lda 	temp1
.1b3c	d0 02		bne $1b40			bne 	_DVLNoBorrow
.1b3e	c6 2d		dec $2d				dec 	temp1+1
.1b40					_DVLNoBorrow:
.1b40	c6 2c		dec $2c				dec 	temp1
.1b42	a5 2d		lda $2d				lda 	temp1+1
.1b44	10 ee		bpl $1b34			bpl 	_DVLLoop
.1b46					_DVLExit:
.1b46	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1b47					SetupXY:
.1b47	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1b4a	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1b4d	20 1a 1d	jsr $1d1a			jsr 	gdSetX
.1b50	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1b53	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1b56	20 21 1d	jsr $1d21			jsr 	gdSetY
.1b59	20 1f 1c	jsr $1c1f			jsr 	gdSetDrawPosition
.1b5c	60		rts				rts
.1b5d					CompareCoords:
.1b5d	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1b60	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1b63	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1b66	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1b69	60		rts				rts
.1b6a					CompareCoordsSigned:
.1b6a	20 5d 1b	jsr $1b5d			jsr 	CompareCoords
.1b6d	50 02		bvc $1b71			bvc 	_CCSExit
.1b6f	49 80		eor #$80			eor 	#$80
.1b71					_CCSExit:
.1b71	60		rts				rts
.1b72					CompareCoordsEq:
.1b72	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1b75	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1b78	d0 06		bne $1b80			bne 	_CCEExit
.1b7a	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1b7d	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1b80					_CCEExit:
.1b80	60		rts				rts
.1b81					BoxSort:
.1b81	a2 00		ldx #$00			ldx 	#gx1-gx1
.1b83	a0 04		ldy #$04			ldy 	#gx2-gx1
.1b85	20 96 1b	jsr $1b96			jsr 	GCompareCoords
.1b88	20 a3 1b	jsr $1ba3			jsr 	GSortMinMaxCoords
.1b8b	a2 02		ldx #$02			ldx 	#gy1-gx1
.1b8d	a0 06		ldy #$06			ldy 	#gy2-gx1
.1b8f	20 96 1b	jsr $1b96			jsr 	GCompareCoords
.1b92	20 a3 1b	jsr $1ba3			jsr 	GSortMinMaxCoords
.1b95	60		rts				rts
.1b96					GCompareCoords:
.1b96	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1b99	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1b9c	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1b9f	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1ba2	60		rts				rts
.1ba3					GSortMinMaxCoords:
.1ba3	90 1c		bcc $1bc1			bcc 	GSMMCExit
.1ba5					GSwapCoords:
.1ba5	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1ba8	48		pha				pha
.1ba9	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1bac	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1baf	68		pla				pla
.1bb0	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1bb3	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1bb6	48		pha				pha
.1bb7	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1bba	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1bbd	68		pla				pla
.1bbe	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1bc1					GSMMCExit:
.1bc1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1bc2					gdMvRight:
.1bc2	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1bc5	d0 08		bne $1bcf			bne 	_gdMR0
.1bc7	ee 21 9f	inc $9f21			inc 	$9F21
.1bca	d0 03		bne $1bcf			bne 	_gdMR0
.1bcc	ee 22 9f	inc $9f22			inc 	$9F22
.1bcf					_gdMR0:
.1bcf	ee 02 0c	inc $0c02			inc 	gdXPos
.1bd2	d0 03		bne $1bd7			bne 	_gdMR1
.1bd4	ee 03 0c	inc $0c03			inc 	gdXPos+1
.1bd7					_gdMR1:
.1bd7	60		rts				rts
.1bd8					gdMvUp:
.1bd8	ad 04 0c	lda $0c04			lda 	gdYPos 						; decrement Y Pos
.1bdb	d0 03		bne $1be0			bne 	_gdMU1
.1bdd	ce 05 0c	dec $0c05			dec 	gdYPos+1
.1be0	ce 04 0c	dec $0c04	_gdMU1:	dec 	gdYPos
.1be3	38		sec				sec 								; adjust position by -320
.1be4	ad 20 9f	lda $9f20			lda 	$9F20
.1be7	e9 40		sbc #$40			sbc 	#64
.1be9	8d 20 9f	sta $9f20			sta 	$9F20
.1bec	ad 21 9f	lda $9f21			lda 	$9F21
.1bef	e9 01		sbc #$01			sbc 	#1
.1bf1	8d 21 9f	sta $9f21			sta 	$9F21
.1bf4	ad 22 9f	lda $9f22			lda 	$9F22
.1bf7	e9 00		sbc #$00			sbc 	#0
.1bf9	8d 22 9f	sta $9f22			sta 	$9F22
.1bfc	60		rts				rts
.1bfd					gdMvDown:
.1bfd	ee 04 0c	inc $0c04			inc 	gdYPos 						; decrement Y Pos
.1c00	d0 03		bne $1c05			bne 	_gdMU1
.1c02	ee 05 0c	inc $0c05			inc 	gdYPos+1
.1c05					_gdMU1:
.1c05	18		clc				clc 								; adjust position by -320
.1c06	ad 20 9f	lda $9f20			lda 	$9F20
.1c09	69 40		adc #$40			adc 	#64
.1c0b	8d 20 9f	sta $9f20			sta 	$9F20
.1c0e	ad 21 9f	lda $9f21			lda 	$9F21
.1c11	69 01		adc #$01			adc 	#1
.1c13	8d 21 9f	sta $9f21			sta 	$9F21
.1c16	ad 22 9f	lda $9f22			lda 	$9F22
.1c19	69 00		adc #$00			adc 	#0
.1c1b	8d 22 9f	sta $9f22			sta 	$9F22
.1c1e	60		rts				rts
.1c1f					gdSetDrawPosition:
.1c1f	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1c21	85 2a		sta $2a				sta 	temp0
.1c23	ad 04 0c	lda $0c04			lda 	gdYPos
.1c26	85 2b		sta $2b				sta 	temp0+1
.1c28	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1c2a	66 2a		ror $2a				ror 	temp0
.1c2c	46 2b		lsr $2b				lsr 	temp0+1
.1c2e	66 2a		ror $2a				ror 	temp0
.1c30	ad 04 0c	lda $0c04			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1c33	18		clc				clc
.1c34	65 2b		adc $2b				adc 	temp0+1
.1c36	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1c38	18		clc				clc
.1c39	a5 2a		lda $2a				lda 	temp0
.1c3b	6d 02 0c	adc $0c02			adc 	gdXPos
.1c3e	85 2a		sta $2a				sta 	temp0
.1c40	a5 2b		lda $2b				lda 	temp0+1
.1c42	6d 03 0c	adc $0c03			adc 	gdXPos+1
.1c45	85 2b		sta $2b				sta 	temp0+1
.1c47	18		clc				clc
.1c48	ad ff 0b	lda $0bff			lda 	gdBitmapAddress
.1c4b	65 2a		adc $2a				adc 	temp0
.1c4d	8d 20 9f	sta $9f20			sta 	$9F20
.1c50	ad 00 0c	lda $0c00			lda 	gdBitmapAddress+1
.1c53	65 2b		adc $2b				adc 	temp0+1
.1c55	8d 21 9f	sta $9f21			sta 	$9F21
.1c58	ad 01 0c	lda $0c01			lda 	gdBitmapAddress+2
.1c5b	69 00		adc #$00			adc 	#0
.1c5d	8d 22 9f	sta $9f22			sta 	$9F22
.1c60	60		rts				rts
.1c61					gdPlotInk:
.1c61	ad 06 0c	lda $0c06			lda 	gdInk
.1c64	8d 23 9f	sta $9f23			sta 	$9F23
.1c67	60		rts				rts
.1c68					gdPlotPaper:
.1c68	ad 07 0c	lda $0c07			lda 	gdPaper
.1c6b	c9 ff		cmp #$ff			cmp 	#$FF
.1c6d	f0 03		beq $1c72			beq 	_gdPPSkip
.1c6f	8d 23 9f	sta $9f23			sta 	$9F23
.1c72					_gdPPSkip:
.1c72	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0bfe					gdEnabled:
>0bfe							.fill 	1
.0bff					gdBitmapAddress:
>0bff							.fill 	3
.0c02					gdXPos:
>0c02							.fill 	2
.0c04					gdYPos:
>0c04							.fill 	2
.0c06					gModifiers:
.0c06					gdInk:
>0c06							.fill 	1
.0c07					gdPaper:
>0c07							.fill 	1
.0c08					gdSize:
>0c08							.fill 	1
.0c09					gdImage:
>0c09							.fill 	1
.0c0a					gdFlip:
>0c0a							.fill 	1
.0c0b					gdXLimit:
>0c0b							.fill 	2
.0c0d					gdYLimit:
>0c0d							.fill 	2
.1c73					gdModeChanged:
.1c73	8a		txa				txa
.1c74	48		pha				pha
.1c75	98		tya				tya
.1c76	48		pha				pha
.1c77	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1c79	8d fe 0b	sta $0bfe			sta 	gdEnabled
.1c7c	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1c7f	c9 40		cmp #$40			cmp 	#$40
.1c81	d0 1f		bne $1ca2			bne 	_gdExit
.1c83	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1c86	c9 40		cmp #$40			cmp 	#$40
.1c88	d0 18		bne $1ca2			bne 	_gdExit
.1c8a	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1c8d	0a		asl a				asl 	a 							;
.1c8e	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1c8f	10 09		bpl $1c9a			bpl 	_gdNotLayer1
.1c91	48		pha				pha 								; save A
.1c92	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1c94	20 bd 1c	jsr $1cbd			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1c97	68		pla				pla 								; restore A
.1c98	b0 08		bcs $1ca2			bcs 	_gdExit 					; if successful then exit
.1c9a					_gdNotLayer1:
.1c9a	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1c9b	10 05		bpl $1ca2			bpl 	_gdExit 					; if not enabled, exit
.1c9d	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1c9f	20 bd 1c	jsr $1cbd			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1ca2					_gdExit:
.1ca2	a9 00		lda #$00			lda 	#0 							; initialise modifiers.
.1ca4	8d 07 0c	sta $0c07			sta 	gdPaper
.1ca7	8d 0a 0c	sta $0c0a			sta 	gdFlip
.1caa	8d 09 0c	sta $0c09			sta 	gdImage
.1cad	a9 01		lda #$01			lda 	#1
.1caf	8d 06 0c	sta $0c06			sta 	gdInk
.1cb2	8d 08 0c	sta $0c08			sta 	gdSize
.1cb5	20 ee 1c	jsr $1cee			jsr 	gdClearGraphics 			; clear graphics display.
.1cb8	68		pla				pla
.1cb9	a8		tay				tay
.1cba	68		pla				pla
.1cbb	aa		tax				tax
.1cbc	60		rts				rts
.1cbd					gdCheckBitmap:
.1cbd	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1cc0	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1cc2	d0 28		bne $1cec			bne 	_gdCBFail
.1cc4	ee fe 0b	inc $0bfe			inc 	gdEnabled 					; set the enabled flag to non zero.
.1cc7	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1cca	0a		asl a				asl 	a
.1ccb	8d 00 0c	sta $0c00			sta 	gdBitmapAddress+1
.1cce	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1cd0	8d 01 0c	sta $0c01			sta 	gdBitmapAddress+2
.1cd3	a9 00		lda #$00			lda 	#$00
.1cd5	8d ff 0b	sta $0bff			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1cd8	a9 40		lda #$40			lda 	#(320) & $FF
.1cda	8d 0b 0c	sta $0c0b			sta 	gdXLimit
.1cdd	a9 01		lda #$01			lda 	#(320) >> 8
.1cdf	8d 0c 0c	sta $0c0c			sta 	1+(gdXLimit)
.1ce2	a9 c8		lda #$c8			lda 	#(200) & $FF
.1ce4	8d 0d 0c	sta $0c0d			sta 	gdYLimit
.1ce7	a9 00		lda #$00			lda 	#(200) >> 8
.1ce9	8d 0e 0c	sta $0c0e			sta 	1+(gdYLimit)
.1cec					_gdCBFail:
.1cec	18		clc				clc
.1ced	60		rts				rts
.1cee					gdClearGraphics:
.1cee	8a		txa				txa
.1cef	48		pha				pha
.1cf0	98		tya				tya
.1cf1	48		pha				pha
.1cf2	ad fe 0b	lda $0bfe			lda 	gdEnabled 					; screen enabled
.1cf5	f0 1e		beq $1d15			beq 	_gdCGExit
.1cf7	a9 00		lda #$00			lda 	#0 							; home cursor
.1cf9	aa		tax				tax
.1cfa	20 1a 1d	jsr $1d1a			jsr 	gdSetX
.1cfd	20 21 1d	jsr $1d21			jsr 	gdSetY
.1d00	8d 07 0c	sta $0c07			sta 	gdPaper 					; paper black
.1d03	20 1f 1c	jsr $1c1f			jsr 	gdSetDrawPosition 			; set the draw position.
.1d06	a9 01		lda #$01			lda 	#1 							; ink white
.1d08	8d 06 0c	sta $0c06			sta 	gdInk
.1d0b	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1d0d	a2 00		ldx #$00			ldx 	#0
.1d0f	ad 07 0c	lda $0c07			lda 	gdPaper
.1d12	20 28 1d	jsr $1d28			jsr 	gdOptHorizontalWriter
.1d15					_gdCGExit:
.1d15	68		pla				pla
.1d16	a8		tay				tay
.1d17	68		pla				pla
.1d18	aa		tax				tax
.1d19	60		rts				rts
.1d1a					gdSetX:
.1d1a	8d 02 0c	sta $0c02			sta 	gdXPos
.1d1d	8e 03 0c	stx $0c03			stx 	gdXPos+1
.1d20	60		rts				rts
.1d21					gdSetY:
.1d21	8d 04 0c	sta $0c04			sta 	gdYPos
.1d24	8e 05 0c	stx $0c05			stx 	gdYPos+1
.1d27	60		rts				rts
.1d28					gdOptHorizontalWriter:
.1d28	48		pha				pha
.1d29	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1d2c	09 10		ora #$10			ora 	#$10
.1d2e	8d 22 9f	sta $9f22			sta 	$9F22
.1d31	68		pla				pla
.1d32					_gdOLoop:
.1d32	8d 23 9f	sta $9f23			sta 	$9F23
.1d35	ca		dex				dex
.1d36	d0 fa		bne $1d32			bne 	_gdOLoop
.1d38	88		dey				dey
.1d39	d0 f7		bne $1d32			bne 	_gdOLoop
.1d3b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1d3c					Unary_Clock:
.1d3c	a2 0c		ldx #$0c		ldx	#12
.1d3e	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1d41	48		pha				pha 								; save stack pos
.1d42	a2 04		ldx #$04		ldx	#4
.1d44	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1d47	98		tya				tya
.1d48	48		pha				pha
.1d49	20 50 ff	jsr $ff50			jsr 	$FF50
.1d4c	68		pla				pla
.1d4d	a8		tay				tay
.1d4e	68		pla				pla 								; restore, repush, put into X to read offset
.1d4f	48		pha				pha
.1d50	aa		tax				tax
.1d51	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1d53	c9 06		cmp #$06			cmp 	#6
.1d55	b0 0d		bcs $1d64			bcs 	_UCValue
.1d57	aa		tax				tax 								; index in X and read RTC.
.1d58	b5 02		lda $02,x			lda 	2,x
.1d5a	85 32		sta $32				sta 	tempshort
.1d5c	68		pla				pla 								; restore number stack index.
.1d5d	aa		tax				tax
.1d5e	a5 32		lda $32				lda 	tempShort
.1d60	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1d62	8a		txa				txa
.1d63	60		rts				rts
.1d64					_UCValue:
.1d64	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d66	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1d69					Unary_JoyX:
.1d69	38		sec				sec
.1d6a	b0 01		bcs $1d6d			bcs 	JoystickRead
.1d6c					Unary_JoyY:
.1d6c	18		clc				clc
.1d6d					JoystickRead:
.1d6d	48		pha				pha 								; save stack position
.1d6e	08		php				php 								; save test flag.
.1d6f	a2 04		ldx #$04		ldx	#4
.1d71	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1d74	20 ce 1d	jsr $1dce			jsr 	ReadJoystick 				; read it.
.1d77	28		plp				plp
.1d78	b0 02		bcs $1d7c			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1d7a	4a		lsr a				lsr 	a
.1d7b	4a		lsr a				lsr 	a
.1d7c					_JRNoShift:
.1d7c	29 03		and #$03			and 	#3 							; isolate the test bits.
.1d7e	f0 0d		beq $1d8d			beq 	JoyReturnA 					; if nothing pressed, return A.
.1d80	c9 03		cmp #$03			cmp 	#3
.1d82	f0 07		beq $1d8b			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1d84	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1d85	b0 16		bcs $1d9d			bcs 	JoyReturn1
.1d87					JoyReturnTrue:
.1d87	a9 ff		lda #$ff			lda 	#$FF
.1d89	d0 02		bne $1d8d			bne 	JoyReturnA
.1d8b					JoyReturnFalse:
.1d8b	a9 00		lda #$00			lda 	#0
.1d8d					JoyReturnA:
.1d8d	85 32		sta $32				sta 	tempShort 					; return A
.1d8f	68		pla				pla
.1d90	aa		tax				tax
.1d91	a5 32		lda $32				lda 	tempShort
.1d93	95 98		sta $98,x			sta 	esInt0,x
.1d95					JoyReturn13:
.1d95	95 a0		sta $a0,x			sta 	esInt1,x
.1d97	95 a8		sta $a8,x			sta 	esInt2,x
.1d99	95 b0		sta $b0,x			sta 	esInt3,x
.1d9b	8a		txa				txa 								; return NSP in A
.1d9c	60		rts				rts
.1d9d					JoyReturn1:
.1d9d	68		pla				pla
.1d9e	aa		tax				tax
.1d9f	a9 01		lda #$01			lda 	#1
.1da1	95 98		sta $98,x			sta 	esInt0,x
.1da3	a9 00		lda #$00			lda 	#0
.1da5	f0 ee		beq $1d95			beq 	JoyReturn13
.1da7					Unary_JButton:
.1da7	48		pha				pha 								; save X on stack, put in X
.1da8	a2 0c		ldx #$0c		ldx	#12
.1daa	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1dad	aa		tax				tax 								; get value to check, push on stack.
.1dae	b5 98		lda $98,x			lda 	esInt0,x
.1db0	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1db2	b0 15		bcs $1dc9			bcs 	_UJBadValue
.1db4	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1db6	48		pha				pha 								; save that shift count on the stack.
.1db7	a2 04		ldx #$04		ldx	#4
.1db9	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1dbc	68		pla				pla
.1dbd	aa		tax				tax
.1dbe	20 ce 1d	jsr $1dce			jsr 	ReadJoystick 				; joystick read
.1dc1					_UJShift:
.1dc1	4a		lsr a				lsr 	a
.1dc2	ca		dex				dex
.1dc3	d0 fc		bne $1dc1			bne 	_UJShift
.1dc5	b0 c0		bcs $1d87			bcs 	JoyReturnTrue
.1dc7	90 c2		bcc $1d8b			bcc 	JoyReturnFalse
.1dc9					_UJBadValue:
.1dc9	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1dcb	20 18 15	jsr $1518		jsr	errorHandler
.1dce					ReadJoystick:
.1dce	8a		txa				txa
.1dcf	48		pha				pha
.1dd0	98		tya				tya
.1dd1	48		pha				pha
.1dd2	a9 00		lda #$00			lda 	#0
.1dd4	20 56 ff	jsr $ff56			jsr 	$FF56
.1dd7	c0 00		cpy #$00			cpy 	#0
.1dd9	d0 11		bne $1dec			bne 	_RJError
.1ddb	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1ddd	d0 02		bne $1de1			bne 	_RJNoBug
.1ddf	a9 ff		lda #$ff			lda 	#$FF
.1de1					_RJNoBug:
.1de1	85 32		sta $32				sta 	tempShort
.1de3	68		pla				pla
.1de4	a8		tay				tay
.1de5	68		pla				pla
.1de6	aa		tax				tax
.1de7	a5 32		lda $32				lda 	tempShort
.1de9	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1deb	60		rts				rts
.1dec					_RJError:
.1dec	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1dee	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c0f					hitSprite1:
>0c0f							.fill 	1 							; this won't work ... if you nest HIT() which
.0c10					hitSprite2:
>0c10							.fill 	1
.0c11					hitRange:
>0c11							.fill 	1
.1df1					FunctionCollide:
.1df1	48		pha				pha 								; save and put index into X
.1df2	aa		tax				tax
.1df3	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1df5	8d 11 0c	sta $0c11			sta 	hitRange
.1df8	20 9d 1e	jsr $1e9d			jsr 	_FCGetSpriteID
.1dfb	8d 0f 0c	sta $0c0f			sta 	hitSprite1
.1dfe	8a		txa				txa
.1dff	48		pha				pha
.1e00	a2 02		ldx #$02		ldx	#2
.1e02	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1e05	68		pla				pla
.1e06	aa		tax				tax
.1e07	20 9d 1e	jsr $1e9d			jsr 	_FCGetSpriteID
.1e0a	8d 10 0c	sta $0c10			sta 	hitSprite2
.1e0d	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1e0f	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1e11	f0 13		beq $1e26			beq 	_FCParam2
.1e13	8a		txa				txa
.1e14	48		pha				pha
.1e15	a2 02		ldx #$02		ldx	#2
.1e17	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1e1a	68		pla				pla
.1e1b	a2 0c		ldx #$0c		ldx	#12
.1e1d	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1e20	aa		tax				tax
.1e21	b5 98		lda $98,x			lda 	esInt0,x
.1e23	8d 11 0c	sta $0c11			sta 	hitRange
.1e26					_FCParam2:
.1e26	a2 04		ldx #$04		ldx	#4
.1e28	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1e2b	68		pla				pla 								; set X to point to the stack again.
.1e2c	48		pha				pha
.1e2d	aa		tax				tax
.1e2e	98		tya				tya
.1e2f	48		pha				pha
.1e30	18		clc				clc 								; do it with the horizontal values.
.1e31	20 53 1e	jsr $1e53			jsr 	_FCCheck
.1e34	90 0a		bcc $1e40			bcc 	_FCFail
.1e36	38		sec				sec 								; do it with the vertical values.
.1e37	20 53 1e	jsr $1e53			jsr 	_FCCheck
.1e3a	90 04		bcc $1e40			bcc 	_FCFail
.1e3c	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1e3e	d0 02		bne $1e42			bne 	_FCReturnA
.1e40					_FCFail:
.1e40	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1e42					_FCReturnA:
.1e42	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1e44	68		pla				pla
.1e45	a8		tay				tay
.1e46	68		pla				pla 								; restore stack, return result and exit.
.1e47	aa		tax				tax
.1e48	a5 32		lda $32				lda 	tempShort
.1e4a	95 98		sta $98,x			sta 	esInt0,x
.1e4c	95 a0		sta $a0,x			sta 	esInt1,x
.1e4e	95 a8		sta $a8,x			sta 	esInt2,x
.1e50	95 b0		sta $b0,x			sta 	esInt3,x
.1e52	60		rts				rts
.1e53					_FCCheck:
.1e53	08		php				php 								; save the H/V flag twice
.1e54	08		php				php
.1e55	ad 0f 0c	lda $0c0f			lda 	hitSprite1 					; select sprite 1 and read its location
.1e58	20 db 1f	jsr $1fdb			jsr 	SelectSpriteA 				; into X
.1e5b	28		plp				plp
.1e5c	20 3d 20	jsr $203d			jsr 	SpriteReadCoordinate
.1e5f	ad 10 0c	lda $0c10			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1e62	20 db 1f	jsr $1fdb			jsr 	SelectSpriteA
.1e65	e8		inx				inx
.1e66	28		plp				plp
.1e67	20 3d 20	jsr $203d			jsr 	SpriteReadCoordinate
.1e6a	ca		dex				dex
.1e6b	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1e6c	b5 98		lda $98,x			lda 	esInt0,x
.1e6e	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1e70	85 2a		sta $2a				sta 	temp0
.1e72	b5 a0		lda $a0,x			lda 	esInt1,x
.1e74	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1e76	85 2b		sta $2b				sta 	temp0+1
.1e78	10 0d		bpl $1e87			bpl 	_FCCIsPositive
.1e7a	38		sec				sec 								; if -ve calculate |difference|
.1e7b	a9 00		lda #$00			lda 	#0
.1e7d	e5 2a		sbc $2a				sbc 	temp0
.1e7f	85 2a		sta $2a				sta 	temp0
.1e81	a9 00		lda #$00			lda 	#0
.1e83	e5 2b		sbc $2b				sbc 	temp0+1
.1e85	85 2b		sta $2b				sta 	temp0+1
.1e87					_FCCIsPositive:
.1e87	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1e89	d0 10		bne $1e9b			bne 	_FCCFail
.1e8b	18		clc				clc 								; work out required min distance which is
.1e8c	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1e8e	75 b1		adc $b1,x			adc 	esInt3+1,x
.1e90	ac 11 0c	ldy $0c11			ldy 	hitRange 					; get the hit range
.1e93	f0 01		beq $1e96			beq 	_FCCNoSetRange 				; override if non zero.
.1e95	98		tya				tya
.1e96					_FCCNoSetRange:
.1e96	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1e98	f0 01		beq $1e9b			beq 	_FCCFail
.1e9a	60		rts				rts
.1e9b					_FCCFail:
.1e9b	18		clc				clc
.1e9c	60		rts				rts
.1e9d					_FCGetSpriteID:
.1e9d	8a		txa				txa
.1e9e	a2 0c		ldx #$0c		ldx	#12
.1ea0	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1ea3	aa		tax				tax
.1ea4	b5 98		lda $98,x			lda 	esInt0,x
.1ea6	30 01		bmi $1ea9			bmi 	_FCGSValue
.1ea8	60		rts				rts
.1ea9					_FCGSValue:
.1ea9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1eab	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c12					currSprite:
>0c12							.fill 	2
.1eae					CommandSprite:
.1eae	20 b0 1f	jsr $1fb0			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1eb1	d0 0d		bne $1ec0			bne 	_CSCheckClear
.1eb3	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1eb6	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1eb8	90 02		bcc $1ebc			bcc 	_CSNotOn 					; if CS turn on, so set it
.1eba	09 40		ora #$40			ora 	#$40
.1ebc					_CSNotOn:
.1ebc	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1ebf	60		rts				rts
.1ec0					_CSCheckClear:
.1ec0	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1ec2	8d 13 0c	sta $0c13			sta 	currSprite+1
.1ec5	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1ec7	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1ec9	d0 05		bne $1ed0			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1ecb	20 c1 1f	jsr $1fc1			jsr 	CSClearSprites 				; clear all the sprites
.1ece	c8		iny				iny 								; consume CLEAR token and exit.
.1ecf	60		rts				rts
.1ed0					_CSCommandLoop:
.1ed0	20 b0 1f	jsr $1fb0			jsr 	CSCheckOnOff 				; check sprite on/off
.1ed3	f0 2c		beq $1f01			beq 	_CSSetVisibility
.1ed5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1ed7	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1ed9	f0 25		beq $1f00			beq 	_CSExit
.1edb	c8		iny				iny									; consume it
.1edc	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1ede	f0 20		beq $1f00			beq 	_CSExit
.1ee0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1ee2	f0 ec		beq $1ed0			beq 	_CSCommandLoop
.1ee4	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1ee6	f0 69		beq $1f51			beq 	_CSSetImage
.1ee8	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1eea	f0 2b		beq $1f17			beq 	_CSSetFlip
.1eec	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1eee	f0 46		beq $1f36			beq 	_CSSetPos
.1ef0	88		dey				dey 								; unpick DEY
.1ef1	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1ef3	a2 0c		ldx #$0c		ldx	#12
.1ef5	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1ef8	a5 98		lda $98				lda 	esInt0
.1efa	20 db 1f	jsr $1fdb			jsr 	SelectSpriteA
.1efd	4c d0 1e	jmp $1ed0			jmp 	_CSCommandLoop
.1f00					_CSExit:
.1f00	60		rts				rts
.1f01					_CSSetVisibility:
.1f01	08		php				php 								; save carry
.1f02	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1f04	20 97 1f	jsr $1f97			jsr 	SpriteSetTarget
.1f07	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1f0a	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1f0c	28		plp				plp
.1f0d	90 02		bcc $1f11			bcc 	_CSSetOff 					; check if carry was set
.1f0f	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1f11					_CSSetOff:
.1f11	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1f14	4c d0 1e	jmp $1ed0			jmp 	_CSCommandLoop
.1f17					_CSSetFlip:
.1f17	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1f19	a2 0c		ldx #$0c		ldx	#12
.1f1b	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1f1e	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1f20	20 97 1f	jsr $1f97			jsr 	SpriteSetTarget
.1f23	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.1f25	29 03		and #$03			and 	#3
.1f27	85 2a		sta $2a				sta 	temp0
.1f29	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1f2c	29 fc		and #$fc			and 	#$FC
.1f2e	05 2a		ora $2a				ora 	temp0
.1f30	8d 23 9f	sta $9f23			sta 	$9F23
.1f33	4c d0 1e	jmp $1ed0			jmp 	_CSCommandLoop
.1f36					_CSSetPos:
.1f36	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1f38	a2 0a		ldx #$0a		ldx	#10
.1f3a	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1f3d	a2 02		ldx #$02		ldx	#2
.1f3f	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1f42	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1f44	a2 0a		ldx #$0a		ldx	#10
.1f46	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1f49	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1f4b	20 f9 1f	jsr $1ff9			jsr 	SpriteMove 					; move it.
.1f4e	4c d0 1e	jmp $1ed0			jmp 	_CSCommandLoop
.1f51					_CSSetImage:
.1f51	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1f53	a2 0c		ldx #$0c		ldx	#12
.1f55	20 d2 3b	jsr $3bd2		jsr	mainHandler
.1f58	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1f5a	20 97 1f	jsr $1f97			jsr 	SpriteSetTarget
.1f5d	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.1f5f	bd 59 0c	lda $0c59,x			lda 	imageAddr2Low,x 			; copy low address in.
.1f62	8d 23 9f	sta $9f23			sta 	$9F23
.1f65	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1f68	bd 19 0c	lda $0c19,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1f6b	29 10		and #$10			and 	#$10
.1f6d	0a		asl a				asl 	a
.1f6e	0a		asl a				asl		a
.1f6f	0a		asl a				asl 	a 							; put into bit 7
.1f70	1d 99 0c	ora $0c99,x			ora 	imageAddr2High,x 			; or high address with it.
.1f73	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1f76	a9 06		lda #$06			lda 	#6
.1f78	20 97 1f	jsr $1f97			jsr 	SpriteSetTarget 			; set sprite on.
.1f7b	ad 23 9f	lda $9f23			lda 	$9F23
.1f7e	09 0c		ora #$0c			ora 	#$0C
.1f80	8d 23 9f	sta $9f23			sta 	$9F23
.1f83	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1f86	bd 19 0c	lda $0c19,x			lda 	imageInfo,x 				; get image info
.1f89	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1f8a	0a		asl a				asl 	a
.1f8b	0a		asl a				asl 	a
.1f8c	0a		asl a				asl 	a
.1f8d	b0 02		bcs $1f91			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1f8f	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1f91					_CSNoOffset:
.1f91	8d 23 9f	sta $9f23			sta 	$9F23
.1f94	4c d0 1e	jmp $1ed0			jmp 	_CSCommandLoop
.1f97					SpriteSetTarget:
.1f97	0d 12 0c	ora $0c12			ora 	currSprite
.1f9a	8d 20 9f	sta $9f20			sta 	$9F20
.1f9d	ad 13 0c	lda $0c13			lda 	currSprite+1
.1fa0	f0 09		beq $1fab			beq 	_SSTNoSet
.1fa2	8d 21 9f	sta $9f21			sta 	$9F21
.1fa5	a9 01		lda #$01			lda 	#$01
.1fa7	8d 22 9f	sta $9f22			sta 	$9F22
.1faa	60		rts				rts
.1fab					_SSTNoSet:
.1fab	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1fad	20 18 15	jsr $1518		jsr	errorHandler
.1fb0					CSCheckOnOff:
.1fb0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1fb2	c8		iny				iny
.1fb3	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1fb5	18		clc				clc
.1fb6	f0 08		beq $1fc0			beq 	_CSCOExit
.1fb8	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1fba	38		sec				sec 								; return NE if neither.
.1fbb	f0 03		beq $1fc0			beq 	_CSCOExit
.1fbd	88		dey				dey 								; undo consume
.1fbe	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1fc0					_CSCOExit:
.1fc0	60		rts				rts
.1fc1					CSClearSprites:
.1fc1	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1fc3	8d 22 9f	sta $9f22			sta 	$9F22
.1fc6	a9 fc		lda #$fc			lda 	#$FC
.1fc8	8d 21 9f	sta $9f21			sta 	$9F21
.1fcb	a9 00		lda #$00			lda 	#0
.1fcd	8d 20 9f	sta $9f20			sta 	$9F20
.1fd0					_CSClear:
.1fd0	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1fd2	8d 23 9f	sta $9f23			sta 	$9F23
.1fd5	ad 21 9f	lda $9f21			lda 	$9F21
.1fd8	d0 f6		bne $1fd0			bne 	_CSClear
.1fda	60		rts				rts
.1fdb					SelectSpriteA:
.1fdb	85 2a		sta $2a				sta 	temp0
.1fdd	a9 00		lda #$00			lda 	#0
.1fdf	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1fe1	b0 11		bcs $1ff4			bcs 	_CSBadValue 				; sprites only 0-127
.1fe3	06 2a		asl $2a				asl 	temp0
.1fe5	2a		rol a				rol 	a
.1fe6	06 2a		asl $2a				asl 	temp0
.1fe8	2a		rol a				rol 	a
.1fe9	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.1feb	8d 13 0c	sta $0c13			sta 	currSprite+1
.1fee	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.1ff0	8d 12 0c	sta $0c12			sta 	currSprite+0
.1ff3	60		rts				rts
.1ff4					_CSBadValue
.1ff4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ff6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.1ff9					SpriteMove:
.1ff9	98		tya				tya
.1ffa	48		pha				pha
.1ffb	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1ffd	20 97 1f	jsr $1f97			jsr 	SpriteSetTarget
.2000	ad 23 9f	lda $9f23			lda 	$9F23
.2003	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2004	4a		lsr a				lsr 	a
.2005	4a		lsr a				lsr 	a
.2006	4a		lsr a				lsr 	a
.2007	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.2009	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.200b	20 97 1f	jsr $1f97			jsr 	SpriteSetTarget
.200e	20 1d 20	jsr $201d			jsr 	SMWritePosition 					; write X position out.
.2011	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.2013	46 2a		lsr $2a				lsr 	temp0
.2015	e8		inx				inx 										; get the y position
.2016	20 1d 20	jsr $201d			jsr 	SMWritePosition 					; and write that out.
.2019	ca		dex				dex 										; fix X and quit.
.201a	68		pla				pla
.201b	a8		tay				tay
.201c	60		rts				rts
.201d					SMWritePosition:
.201d	a5 2a		lda $2a				lda 	temp0 								; get dim size
.201f	29 03		and #$03			and 	#3 									; in range into Y
.2021	a8		tay				tay
.2022	38		sec				sec
.2023	b5 98		lda $98,x			lda 	esInt0,x
.2025	f9 39 20	sbc $2039,y			sbc 	SMHalfSize,y
.2028	8d 23 9f	sta $9f23			sta 	$9F23
.202b	ee 20 9f	inc $9f20			inc 	$9F20
.202e	b5 a0		lda $a0,x			lda 	esInt1,x
.2030	e9 00		sbc #$00			sbc 	#0
.2032	8d 23 9f	sta $9f23			sta 	$9F23
.2035	ee 20 9f	inc $9f20			inc 	$9F20
.2038	60		rts				rts
.2039					SMHalfSize:
>2039	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.203d					SpriteReadCoordinate:
.203d	98		tya				tya
.203e	48		pha				pha
.203f	08		php				php 										; save CTR on stack
.2040	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2042	20 97 1f	jsr $1f97			jsr 	SpriteSetTarget
.2045	ad 23 9f	lda $9f23			lda 	$9F23
.2048	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2049	4a		lsr a				lsr 	a
.204a	4a		lsr a				lsr 	a
.204b	4a		lsr a				lsr 	a
.204c	28		plp				plp 										; restore CTS
.204d	08		php				php
.204e	90 02		bcc $2052			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2050	4a		lsr a				lsr 	a
.2051	4a		lsr a				lsr 	a
.2052					_SPRCNotY1:
.2052	29 03		and #$03			and 	#3 									; point into half width/height
.2054	a8		tay				tay
.2055	b9 39 20	lda $2039,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2058	95 b0		sta $b0,x			sta 	esInt3,x
.205a	28		plp				plp 										; CS Y CC X
.205b	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.205d	2a		rol a				rol 	a
.205e	2a		rol a				rol 	a
.205f	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2061	20 97 1f	jsr $1f97			jsr 	SpriteSetTarget 					; set data pointer offset by that
.2064	18		clc				clc 										; read and unfix centre.
.2065	ad 23 9f	lda $9f23			lda 	$9F23
.2068	75 b0		adc $b0,x			adc 	esInt3,x
.206a	95 98		sta $98,x			sta 	esInt0,x
.206c	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.206f	ad 23 9f	lda $9f23			lda 	$9F23
.2072	69 00		adc #$00			adc 	#0
.2074	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2076	c9 08		cmp #$08			cmp		#$08
.2078	90 02		bcc $207c			bcc 	_SPRCNoSX
.207a	09 f0		ora #$f0			ora 	#$F0
.207c					_SPRCNoSX:
.207c	95 a0		sta $a0,x			sta 	esInt1,x
.207e	68		pla				pla
.207f	a8		tay				tay
.2080	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2081					Sprite_GetX:
.2081	18		clc				clc
.2082	90 01		bcc $2085			bcc 	SpriteGetCode
.2084					Sprite_GetY:
.2084	38		sec				sec
.2085					SpriteGetCode:
.2085	08		php				php 								; CLC : X SEC: Y, save on stack.
.2086	48		pha				pha 								; save stack position
.2087	20 a3 20	jsr $20a3			jsr 	GetSpriteNumber 			; get # of sprite.
.208a	a2 04		ldx #$04		ldx	#4
.208c	20 d2 3b	jsr $3bd2		jsr	mainHandler
.208f	68		pla				pla
.2090	aa		tax				tax
.2091	28		plp				plp 								; which one ?
.2092	20 3d 20	jsr $203d			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.2095	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.2097	29 80		and #$80			and 	#$80
.2099	f0 02		beq $209d			beq 	_SGXYPos
.209b	a9 ff		lda #$ff			lda 	#$FF
.209d					_SGXYPos:
.209d	95 a8		sta $a8,x			sta 	esInt2,x
.209f	95 b0		sta $b0,x			sta 	esInt3,x
.20a1	8a		txa				txa 								; return NSP in A
.20a2	60		rts				rts
.20a3					GetSpriteNumber:
.20a3	48		pha				pha
.20a4	a2 0c		ldx #$0c		ldx	#12
.20a6	20 d2 3b	jsr $3bd2		jsr	mainHandler
.20a9	68		pla				pla
.20aa	aa		tax				tax
.20ab	b5 98		lda $98,x			lda 	esInt0,x
.20ad	20 db 1f	jsr $1fdb			jsr 	SelectSpriteA
.20b0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c14					currentMode:
>0c14							.fill 	4
.20b1					ForceMode0:
.20b1	a2 00		ldx #$00			ldx 	#0
.20b3	86 98		stx $98				stx 	esInt0 						; in case we do it.
.20b5					_FMCheck:
.20b5	bd 48 21	lda $2148,x			lda 	CMModeList,x 				; do we need to switch ?
.20b8	dd 14 0c	cmp $0c14,x			cmp 	currentMode,x
.20bb	d0 13		bne $20d0			bne 	CMSetMode 					; different so switch.
.20bd	e8		inx				inx
.20be	e0 04		cpx #$04			cpx 	#4
.20c0	d0 f3		bne $20b5			bne 	_FMCheck
.20c2	60		rts				rts
.20c3					CommandMode:
.20c3	a9 00		lda #$00			lda 	#0
.20c5	a2 0a		ldx #$0a		ldx	#10
.20c7	20 d2 3b	jsr $3bd2		jsr	mainHandler
.20ca	a5 b0		lda $b0				lda 	esInt3
.20cc	29 70		and #$70			and 	#$70
.20ce	d0 06		bne $20d6			bne 	CMNoExpand
.20d0					CMSetMode:
.20d0	20 27 21	jsr $2127			jsr 	CMExpandMode
.20d3	4c ea 20	jmp $20ea			jmp 	CMUpdateMode
.20d6					CMNoExpand:
.20d6	a5 98		lda $98				lda 	esInt0
.20d8	8d 14 0c	sta $0c14			sta 	currentMode
.20db	a5 a0		lda $a0				lda 	esInt1
.20dd	8d 15 0c	sta $0c15			sta 	currentMode+1
.20e0	a5 a8		lda $a8				lda 	esInt2
.20e2	8d 16 0c	sta $0c16			sta 	currentMode+2
.20e5	a5 b0		lda $b0				lda 	esInt3
.20e7	8d 17 0c	sta $0c17			sta 	currentMode+3
.20ea					CMUpdateMode:
.20ea	a2 11		ldx #$11			ldx 	#$11
.20ec					_CMClear:
.20ec	a9 00		lda #$00			lda 	#0
.20ee	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.20f1	ca		dex				dex
.20f2	10 f8		bpl $20ec			bpl 	_CMClear
.20f4	ad 17 0c	lda $0c17			lda 	currentMode+3 				; get current mode
.20f7	48		pha				pha 								; stack twice.
.20f8	48		pha				pha
.20f9	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.20fb	09 01		ora #$01			ora 	#$01 						; turn the output on.
.20fd	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.2100	68		pla				pla 								; get back
.2101	20 58 21	jsr $2158			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2104	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.2107	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.2108	4a		lsr a				lsr 	a
.2109	4a		lsr a				lsr 	a
.210a	20 58 21	jsr $2158			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.210d	8d 2b 9f	sta $9f2b			sta 	$9F2B
.2110	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.2112	ad 14 0c	lda $0c14			lda 	currentMode					; get L0 config byte
.2115	20 63 21	jsr $2163			jsr 	CMDecodeLayer 				; and decode layer 0
.2118	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.211a	ad 15 0c	lda $0c15			lda 	currentMode+1
.211d	20 63 21	jsr $2163			jsr 	CMDecodeLayer
.2120	20 73 1c	jsr $1c73			jsr 	gdModeChanged 				; check the bitmap status.
.2123	20 ba 18	jsr $18ba			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2126	60		rts				rts
.2127					CMExpandMode:
.2127	a5 98		lda $98				lda 	esInt0 						; get mode number
.2129	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.212b	b0 16		bcs $2143			bcs 	_CMModeError
.212d	0a		asl a				asl 	a 							; x 4 into X
.212e	0a		asl a				asl 	a
.212f	aa		tax				tax
.2130	98		tya				tya
.2131	48		pha				pha
.2132	a0 00		ldy #$00			ldy 	#0
.2134					_CMEMCopy:
.2134	bd 48 21	lda $2148,x			lda 	CMModeList,x
.2137	99 14 0c	sta $0c14,y			sta 	currentMode,y
.213a	e8		inx				inx
.213b	c8		iny				iny
.213c	c0 04		cpy #$04			cpy 	#4
.213e	d0 f4		bne $2134			bne 	_CMEMCopy
.2140	68		pla				pla
.2141	a8		tay				tay
.2142	60		rts				rts
.2143					_CMModeError:
.2143	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2145	20 18 15	jsr $1518		jsr	errorHandler
.2148					CMModeList:
>2148	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>214c	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2150	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>2154	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2158					CMEndModeList:
.2158					CMToScale:
.2158	29 03		and #$03			and 	#3 							; lower 2 bits only
.215a	aa		tax				tax 								; put in X for counting
.215b	a9 00		lda #$00			lda 	#0 							; zero result
.215d	38		sec				sec 								; first time rotate CS in
.215e					_CMTSLoop:
.215e	6a		ror a				ror 	a
.215f	ca		dex				dex
.2160	10 fc		bpl $215e			bpl 	_CMTSLoop
.2162	60		rts				rts
.2163					CMDecodeLayer:
.2163	48		pha				pha 								; save it.
.2164	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2166	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.2169	68		pla				pla 								; get it back
.216a	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.216c	f0 02		beq $2170			beq 	_CMDLNotSet
.216e	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2170					_CMDLNotSet:
.2170	e0 00		cpx #$00			cpx 	#0
.2172	f0 06		beq $217a			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.2174	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2176	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2179	60		rts				rts
.217a					_CMDLayer0:
.217a	09 80		ora #$80			ora 	#$80 						; tile base is $80
.217c	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.217f	60		rts				rts
.2180					CommandClg:
.2180	20 ee 1c	jsr $1cee			jsr 	gdClearGraphics
.2183	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.2184					CommandPalette:
.2184	a9 00		lda #$00			lda 	#0
.2186	a2 0c		ldx #$0c		ldx	#12
.2188	20 d2 3b	jsr $3bd2		jsr	mainHandler
.218b	a2 02		ldx #$02		ldx	#2
.218d	20 d2 3b	jsr $3bd2		jsr	mainHandler
.2190	a9 01		lda #$01			lda 	#1
.2192	a2 08		ldx #$08		ldx	#8
.2194	20 d2 3b	jsr $3bd2		jsr	mainHandler
.2197	a5 98		lda $98				lda 	esInt0 					; get palette #
.2199	20 a9 21	jsr $21a9			jsr 	PointToPaletteA			; point to palette register
.219c	a5 99		lda $99				lda 	esInt0+1
.219e	8d 23 9f	sta $9f23			sta 	$9F23
.21a1	a5 a1		lda $a1				lda 	esInt1+1
.21a3	29 0f		and #$0f			and 	#$0F
.21a5	8d 23 9f	sta $9f23			sta 	$9F23
.21a8	60		rts				rts
.21a9					PointToPaletteA:
.21a9	0a		asl a				asl 	a 							; x 2 -> LSB
.21aa	8d 20 9f	sta $9f20			sta 	$9F20
.21ad	a9 00		lda #$00			lda 	#0 							; carry into A
.21af	2a		rol a				rol 	a
.21b0	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.21b2	8d 21 9f	sta $9f21			sta 	$9F21
.21b5	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.21b7	8d 22 9f	sta $9f22			sta 	$9F22
.21ba	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.21bb					Command_VLoad:
.21bb	a9 00		lda #$00			lda 	#0 								; string which is the file name
.21bd	a2 0e		ldx #$0e		ldx	#14
.21bf	20 d2 3b	jsr $3bd2		jsr	mainHandler
.21c2	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.21c4	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.21c6	95 98		sta $98,x			sta 	esInt0,x
.21c8	a5 36		lda $36				lda 	lowMemory+1
.21ca	95 a0		sta $a0,x			sta 	esInt1,x
.21cc	a9 00		lda #$00			lda 	#0
.21ce	95 a8		sta $a8,x			sta 	esInt2,x
.21d0	95 b0		sta $b0,x			sta 	esInt3,x
.21d2	a2 0e		ldx #$0e		ldx	#14
.21d4	20 f6 14	jsr $14f6		jsr	deviceHandler
.21d7	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.21d9	85 2a		sta $2a				sta 	temp0
.21db	a5 a1		lda $a1				lda 	esInt1+1
.21dd	85 2b		sta $2b				sta 	temp0+1
.21df	20 5b 22	jsr $225b			jsr 	LoadVRAMFile 					; load the VRAM file in.
.21e2	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.21e3					Command_VPoke:
.21e3	38		sec				sec 						; one byte , CS
.21e4	b0 01		bcs $21e7			bcs 	CmdVideoWrite
.21e6					Command_VDoke:
.21e6	18		clc				clc 						; two bytes, CC
.21e7					CmdVideoWrite:
.21e7	08		php				php 						; save one or two btes
.21e8	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.21ea	a2 0a		ldx #$0a		ldx	#10
.21ec	20 d2 3b	jsr $3bd2		jsr	mainHandler
.21ef	a2 02		ldx #$02		ldx	#2
.21f1	20 d2 3b	jsr $3bd2		jsr	mainHandler
.21f4	a9 01		lda #$01			lda 	#1
.21f6	a2 0a		ldx #$0a		ldx	#10
.21f8	20 d2 3b	jsr $3bd2		jsr	mainHandler
.21fb	a2 00		ldx #$00			ldx 	#0
.21fd	20 0e 22	jsr $220e			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2200	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2202	8d 23 9f	sta $9f23			sta 	$9F23
.2205	28		plp				plp 						; if it was Poke then exit
.2206	b0 05		bcs $220d			bcs 	_CVWExit
.2208	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.220a	8d 23 9f	sta $9f23			sta 	$9F23
.220d					_CVWExit:
.220d	60		rts				rts
.220e					SetUpTOSVRamAddress:
.220e	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2210	29 fe		and #$fe			and 	#$FE
.2212	15 b0		ora $b0,x			ora 	esInt3,x
.2214	d0 14		bne $222a			bne 	CVWValue
.2216	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.2218	8d 20 9f	sta $9f20			sta 	$9F20
.221b	b5 a0		lda $a0,x			lda 	esInt1,x
.221d	8d 21 9f	sta $9f21			sta	 	$9F21
.2220	b5 a8		lda $a8,x			lda 	esInt2,x
.2222	29 01		and #$01			and 	#1
.2224	09 10		ora #$10			ora 	#$10 				; step 1.
.2226	8d 22 9f	sta $9f22			sta 	$9F22
.2229	60		rts				rts
.222a					CVWValue:
.222a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.222c	20 18 15	jsr $1518		jsr	errorHandler
.222f					Command_VPeek:
.222f	38		sec				sec 						; one byte , CS
.2230	b0 01		bcs $2233			bcs 	CmdVideoRead
.2232					Command_VDeek:
.2232	18		clc				clc 						; two bytes, CC
.2233					CmdVideoRead:
.2233	08		php				php 						; save action on stack.
.2234	48		pha				pha 						; save stack position
.2235	a2 0a		ldx #$0a		ldx	#10
.2237	20 d2 3b	jsr $3bd2		jsr	mainHandler
.223a	a2 04		ldx #$04		ldx	#4
.223c	20 d2 3b	jsr $3bd2		jsr	mainHandler
.223f	68		pla				pla
.2240	aa		tax				tax
.2241	20 0e 22	jsr $220e			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2244	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.2246	95 a0		sta $a0,x			sta 	esInt1,x
.2248	95 a8		sta $a8,x			sta 	esInt2,x
.224a	95 b0		sta $b0,x			sta 	esInt3,x
.224c	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.224f	95 98		sta $98,x			sta 	esInt0,x
.2251	28		plp				plp 						; check if DOKE (carry was clear)
.2252	b0 05		bcs $2259			bcs 	_CVRExit
.2254	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2257	95 a0		sta $a0,x			sta 	esInt1,x
.2259					_CVRExit:
.2259	8a		txa				txa 						; return X position.
.225a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c18					compressMode:
>0c18							.fill 	1
.0c19					imageInfo:
>0c19							.fill 	X16MaxImages
.0c59					imageAddr2Low:
>0c59							.fill  	X16MaxImages
.0c99					imageAddr2High:
>0c99							.fill  	X16MaxImages
.225b					LoadVRAMFile:
.225b	8a		txa				txa
.225c	48		pha				pha
.225d	98		tya				tya
.225e	48		pha				pha
.225f					_LVRLoop:
.225f	20 3b 23	jsr $233b			jsr 	LVFGet 						; get the next (never access direct)
.2262	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.2264	f0 42		beq $22a8			beq 	_LVRExit
.2266	b0 5c		bcs $22c4			bcs 	_LVRLoad 					; load data in ?
.2268	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.226a	90 11		bcc $227d			bcc 	_LVRSetAddress
.226c	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.226e	f0 3d		beq $22ad			beq 	_LVRSetPalette
.2270	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2272	90 2d		bcc $22a1			bcc 	_LVRSetCompress
.2274	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2276	90 60		bcc $22d8			bcc 	_LVRSetSprite
.2278	a2 01		ldx #$01			ldx 	#ErrorID_missing
.227a	20 18 15	jsr $1518		jsr	errorHandler
.227d					_LVRSetAddress:
.227d	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.227f	20 3b 23	jsr $233b			jsr 	LVFGet
.2282	85 2c		sta $2c				sta 	temp1
.2284	a9 00		lda #$00			lda 	#0
.2286	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.2288	66 2c		ror $2c				ror 	temp1
.228a	6a		ror a				ror		a
.228b	46 2d		lsr $2d				lsr 	temp1+1
.228d	66 2c		ror $2c				ror 	temp1
.228f	6a		ror a				ror		a
.2290	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.2293	a5 2c		lda $2c				lda 	temp1
.2295	8d 21 9f	sta $9f21			sta 	$9F21
.2298	a5 2d		lda $2d				lda 	temp1+1
.229a	09 10		ora #$10			ora 	#$10
.229c	8d 22 9f	sta $9f22			sta 	$9F22
.229f	d0 be		bne $225f			bne 	_LVRLoop
.22a1					_LVRSetCompress:
.22a1	29 07		and #$07			and 	#7
.22a3	8d 18 0c	sta $0c18			sta 	compressMode
.22a6	10 b7		bpl $225f			bpl 	_LVRLoop
.22a8					_LVRExit:
.22a8	68		pla				pla
.22a9	a8		tay				tay
.22aa	68		pla				pla
.22ab	aa		tax				tax
.22ac	60		rts				rts
.22ad					_LVRSetPalette:
.22ad	20 3b 23	jsr $233b			jsr 	LVFGet 						; get palette id.
.22b0	20 a9 21	jsr $21a9			jsr 	PointToPaletteA 			; in palette.asm
.22b3	20 3b 23	jsr $233b			jsr 	LVFGet 						; copy 12 bit palette data in.
.22b6	8d 23 9f	sta $9f23			sta 	$9F23
.22b9	20 3b 23	jsr $233b			jsr 	LVFGet
.22bc	29 0f		and #$0f			and 	#$0F
.22be	8d 23 9f	sta $9f23			sta 	$9F23
.22c1	4c 5f 22	jmp $225f			jmp 	_LVRLoop
.22c4					_LVRLoad:
.22c4	ae 18 0c	ldx $0c18			ldx 	compressMode
.22c7	d0 55		bne $231e			bne 	_LVRNotMode0
.22c9	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.22cb					_LVRLCopyX:
.22cb	aa		tax				tax
.22cc					_LVRLCopy:
.22cc	20 3b 23	jsr $233b			jsr 	LVFGet 						; write to data.
.22cf	8d 23 9f	sta $9f23			sta 	$9F23
.22d2	ca		dex				dex
.22d3	d0 f7		bne $22cc			bne 	_LVRLCopy
.22d5	4c 5f 22	jmp $225f			jmp 	_LVRLoop
.22d8					_LVRSetSprite:
.22d8	48		pha				pha 								; save on stack
.22d9	20 3b 23	jsr $233b			jsr 	LVFGet 						; get the sprite number into X
.22dc	aa		tax				tax
.22dd	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.22df	b0 38		bcs $2319			bcs 	_LVRSSValue
.22e1	68		pla				pla 								; restore the data held in the first byte
.22e2	9d 19 0c	sta $0c19,x			sta 	imageInfo,x 				; and write into the sprite image table.
.22e5					_LVRAlignVRAM:
.22e5	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.22e8	29 1f		and #$1f			and 	#$1F
.22ea	f0 07		beq $22f3			beq 	_LVRAligned
.22ec	a9 00		lda #$00			lda 	#$00
.22ee	8d 23 9f	sta $9f23			sta 	$9F23
.22f1	f0 f2		beq $22e5			beq 	_LVRAlignVRAM
.22f3					_LVRAligned:
.22f3	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.22f6	4a		lsr a				lsr 	a 	 						; first halve into temp1
.22f7	ad 21 9f	lda $9f21			lda 	$9F21
.22fa	6a		ror a				ror 	a
.22fb	85 2d		sta $2d				sta 	temp1+1
.22fd	ad 20 9f	lda $9f20			lda 	$9F20
.2300	6a		ror a				ror 	a
.2301	85 2c		sta $2c				sta 	temp1
.2303	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2305					_LVRShift:
.2305	46 2d		lsr $2d				lsr 	temp1+1
.2307	66 2c		ror $2c				ror 	temp1
.2309	88		dey				dey
.230a	d0 f9		bne $2305			bne 	_LVRShift
.230c	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.230e	9d 99 0c	sta $0c99,x			sta 	imageAddr2High,x
.2311	a5 2c		lda $2c				lda 	temp1
.2313	9d 59 0c	sta $0c59,x			sta 	imageAddr2Low,x
.2316	4c 5f 22	jmp $225f			jmp 	_LVRLoop
.2319					_LVRSSValue:
.2319	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.231b	20 18 15	jsr $1518		jsr	errorHandler
.231e					_LVRNotMode0:
.231e	e0 01		cpx #$01			cpx 	#1
.2320	d0 15		bne $2337			bne 	_LVRNotMode1
.2322	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.2324	c9 40		cmp #$40			cmp 	#$40
.2326	90 a3		bcc $22cb			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.2328					_LVRRLEGroup:
.2328	29 3f		and #$3f			and 	#$3F
.232a	aa		tax				tax
.232b	20 3b 23	jsr $233b			jsr 	LVFGet
.232e					_LVRLEGroupLoop:
.232e	8d 23 9f	sta $9f23			sta 	$9F23
.2331	ca		dex				dex
.2332	d0 fa		bne $232e			bne 	_LVRLEGroupLoop
.2334	4c 5f 22	jmp $225f			jmp 	_LVRLoop
.2337					_LVRNotMode1:
>2337	db						.byte 	$DB
.2338	4c 37 23	jmp $2337			jmp 	_LVRNotMode1
.233b	84 32		sty $32		LVFGet:	sty 	tempShort
.233d	a0 00		ldy #$00			ldy 	#0
.233f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2341	a4 32		ldy $32				ldy	 	tempShort
.2343	e6 2a		inc $2a				inc 	temp0
.2345	d0 02		bne $2349			bne 	_LVFGExit
.2347	e6 2b		inc $2b				inc 	temp0+1
.2349					_LVFGExit:
.2349	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.234a					section_end_extension:
.234a					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.234a					floatingpointHandler:
.234a	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.234c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.234f					section_end_floatingpoint:
.234f					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.234f					ColdStartEntry:
.234f	a2 ff		ldx #$ff			ldx 	#$FF
.2351	9a		txs				txs
.2352	20 db 23	jsr $23db			jsr 	ForceStandardMode
.2355	a2 04		ldx #$04		ldx	#4
.2357	20 f6 14	jsr $14f6		jsr	deviceHandler
.235a	a0 ff		ldy #$ff			ldy 	#255
.235c					_CSBanner:
.235c	c8		iny				iny
.235d	b9 83 23	lda $2383,y			lda 	Intro,y
.2360	f0 14		beq $2376			beq 	_CSStart
.2362	c9 08		cmp #$08			cmp 	#8
.2364	90 08		bcc $236e			bcc 	_CSInk
.2366	a2 16		ldx #$16		ldx	#22
.2368	20 f6 14	jsr $14f6		jsr	deviceHandler
.236b	4c 5c 23	jmp $235c			jmp 	_CSBanner
.236e					_CSInk:
.236e	a2 08		ldx #$08		ldx	#8
.2370	20 f6 14	jsr $14f6		jsr	deviceHandler
.2373	4c 5c 23	jmp $235c			jmp 	_CSBanner
.2376					_CSStart:
.2376	a2 16		ldx #$16		ldx	#22
.2378	20 d2 3b	jsr $3bd2		jsr	mainHandler
.237b	a2 06		ldx #$06		ldx	#6
.237d	20 d2 3b	jsr $3bd2		jsr	mainHandler
.2380	4c 9b 24	jmp $249b			jmp 	WarmStartEntry
>2383	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>238b	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>239b	20 2a 2a 2a 0d 0d
>23a1	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>23a9	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>23b9	32 30 32 31 0d 0d
>23bf	02 42 61 73 69 63 20				.text 	2,"Basic "
>23c6	30 2e 32 30					.text "0.20"
>23ca	20 28						.text 	" ("
>23cc	33 30 2d 4d 61 72 2d 32				.text "30-Mar-2021"
>23d4	30 32 31
>23d7	29 0d 0d 00					.text 	")",13,13,0
.23db					ForceStandardMode:
.23db	a9 fe		lda #$fe			lda 	#$FE
.23dd	20 69 18	jsr $1869		jsr	extensionHandler
.23e0	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.23e1					DeleteLine:
.23e1	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.23e4	85 2a		sta $2a				sta 	temp0
.23e6	ad c9 0a	lda $0ac9			lda 	basePage+1
.23e9	85 2b		sta $2b				sta 	temp0+1
.23eb	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.23ed	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.23ef	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23f1	d0 07		bne $23fa			bne 	_DLNext
.23f3	c8		iny				iny
.23f4	a5 a0		lda $a0				lda 	esInt1
.23f6	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23f8	f0 06		beq $2400			beq 	_DLFound
.23fa	20 1e 24	jsr $241e	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.23fd	d0 ec		bne $23eb			bne 	_DLLoop
.23ff	60		rts				rts
.2400					_DLFound:
.2400	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2402	b1 2a		lda ($2a),y			lda 	(temp0),y
.2404	a8		tay				tay 								; so we copy from (temp0),y
.2405	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2407					_DLCopyDown:
.2407	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2409	81 2a		sta ($2a,x)			sta 	(temp0,x)
.240b	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.240d	d0 02		bne $2411			bne 	_DLNoCarry
.240f	e6 2b		inc $2b				inc 	temp0+1
.2411					_DLNoCarry:
.2411	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.2413	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.2415	d0 f0		bne $2407			bne 	_DLCopyDown
.2417	a5 2b		lda $2b				lda 	temp0+1
.2419	c5 36		cmp $36				cmp 	lowMemory+1
.241b	d0 ea		bne $2407			bne 	_DLCopyDown
.241d	60		rts				rts
.241e					IAdvanceTemp0:
.241e	84 32		sty $32				sty 	tempShort
.2420	18		clc				clc
.2421	a0 00		ldy #$00			ldy 	#0 							; get offset
.2423	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.2425	65 2a		adc $2a				adc 	temp0
.2427	85 2a		sta $2a				sta 	temp0
.2429	90 02		bcc $242d			bcc 	_IATNoCarry
.242b	e6 2b		inc $2b				inc 	temp0+1
.242d					_IATNoCarry:
.242d	b1 2a		lda ($2a),y			lda 	(temp0),y
.242f	a4 32		ldy $32				ldy 	tempShort
.2431	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.2433	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.2434					InsertLine:
.2434	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2437	85 2a		sta $2a				sta 	temp0
.2439	ad c9 0a	lda $0ac9			lda 	basePage+1
.243c	85 2b		sta $2b				sta 	temp0+1
.243e					_ILLoop:
.243e	a0 01		ldy #$01			ldy 	#1
.2440	b1 2a		lda ($2a),y			lda 	(temp0),y
.2442	c5 98		cmp $98				cmp 	esInt0
.2444	c8		iny				iny
.2445	b1 2a		lda ($2a),y			lda 	(temp0),y
.2447	e5 a0		sbc $a0				sbc 	esInt1
.2449	b0 05		bcs $2450			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.244b	20 1e 24	jsr $241e			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.244e	d0 ee		bne $243e			bne 	_ILLoop
.2450					_ILFound:
.2450	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.2452	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.2454	a5 36		lda $36				lda 	lowMemory+1
.2456	85 2d		sta $2d				sta 	temp1+1
.2458	ad 16 0e	lda $0e16			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.245b	18		clc				clc 								; add 3 for the line number and offset.
.245c	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.245e	a8		tay				tay
.245f	a2 00		ldx #$00			ldx 	#0
.2461	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.2463	91 2c		sta ($2c),y			sta 	(temp1),y
.2465	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.2467	c5 2a		cmp $2a				cmp 	temp0
.2469	d0 06		bne $2471			bne 	_ILMNext
.246b	a5 2d		lda $2d				lda 	temp1+1
.246d	c5 2b		cmp $2b				cmp 	temp0+1
.246f	f0 0b		beq $247c			beq 	_ILMCopy
.2471					_ILMNext:
.2471	a5 2c		lda $2c				lda 	temp1
.2473	d0 02		bne $2477			bne 	_ILNoBorrow
.2475	c6 2d		dec $2d				dec 	temp1+1
.2477					_ILNoBorrow:
.2477	c6 2c		dec $2c				dec 	temp1
.2479	4c 61 24	jmp $2461			jmp 	_ILMove 					; and go round again
.247c					_ILMCopy:
.247c	98		tya				tya 								; Y is the offset of the new line.
.247d	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.247f	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2481	a5 98		lda $98				lda 	esInt0
.2483	91 2a		sta ($2a),y			sta 	(temp0),y
.2485	c8		iny				iny
.2486	a5 a0		lda $a0				lda 	esInt1
.2488	91 2a		sta ($2a),y			sta 	(temp0),y
.248a	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.248c					_ILMCopy2:
.248c	b1 28		lda ($28),y			lda 	(codePtr),y
.248e	c8		iny				iny
.248f	c8		iny				iny
.2490	c8		iny				iny
.2491	91 2a		sta ($2a),y			sta 	(temp0),y
.2493	88		dey				dey
.2494	88		dey				dey
.2495	cc 16 0e	cpy $0e16			cpy 	tokenBufferIndex
.2498	d0 f2		bne $248c			bne 	_ILMCopy2
.249a	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.249b					WarmStartEntry:
.249b	a2 ff		ldx #$ff			ldx 	#$FF
.249d	9a		txs				txs
.249e	20 db 23	jsr $23db			jsr 	ForceStandardMode
.24a1	a9 02		lda #$02			lda 	#2							; green text.
.24a3	a2 08		ldx #$08		ldx	#8
.24a5	20 f6 14	jsr $14f6		jsr	deviceHandler
.24a8	a2 0c		ldx #$0c		ldx	#12
.24aa	20 f6 14	jsr $14f6		jsr	deviceHandler
.24ad	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.24af	85 28		sta $28				sta 	codePtr
.24b1	a5 2b		lda $2b				lda 	temp0+1
.24b3	85 29		sta $29				sta 	codePtr+1
.24b5	a2 06		ldx #$06		ldx	#6
.24b7	20 f6 14	jsr $14f6		jsr	deviceHandler
.24ba	a2 08		ldx #$08		ldx	#8
.24bc	20 12 47	jsr $4712		jsr	tokeniserHandler
.24bf	c9 00		cmp #$00			cmp 	#0
.24c1	f0 25		beq $24e8			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.24c3	a9 13		lda #$13			lda 	#(tokenHeader) & $FF
.24c5	85 28		sta $28				sta 	codePtr
.24c7	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.24c9	85 29		sta $29				sta 	1+(codePtr)
.24cb	ad 16 0d	lda $0d16			lda 	tokenBuffer 				; is it a blank line, go get another line.
.24ce	c9 80		cmp #$80			cmp 	#$80
.24d0	f0 c9		beq $249b			beq 	WarmStartEntry
.24d2	29 c0		and #$c0			and 	#$C0						; does it start with a number
.24d4	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.24d6	f0 15		beq $24ed			beq 	HasLineNumber
.24d8	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.24da	8d 13 0d	sta $0d13			sta 	tokenHeader 				; fake program line.
.24dd	8d 14 0d	sta $0d14			sta 	tokenHeader+1
.24e0	8d 15 0d	sta $0d15			sta 	tokenHeader+2
.24e3	a2 18		ldx #$18		ldx	#24
.24e5	20 d2 3b	jsr $3bd2		jsr	mainHandler
.24e8					WSEError:
.24e8	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.24ea	20 18 15	jsr $1518		jsr	errorHandler
.24ed					HasLineNumber:
.24ed	a0 03		ldy #$03			ldy 	#3 							; get line number
.24ef	a9 00		lda #$00			lda 	#0
.24f1	a2 0a		ldx #$0a		ldx	#10
.24f3	20 d2 3b	jsr $3bd2		jsr	mainHandler
.24f6	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.24f8	05 b0		ora $b0				ora 	esInt3
.24fa	d0 ec		bne $24e8			bne 	WSEError
.24fc	98		tya				tya 								; make codePtr point to code after the line number.
.24fd	18		clc				clc 								; by skipping over the tokenised number.
.24fe	65 28		adc $28				adc 	codePtr
.2500	85 28		sta $28				sta 	codePtr
.2502	90 02		bcc $2506			bcc		_HLNNoCarry
.2504	e6 29		inc $29				inc 	codePtr+1
.2506					_HLNNoCarry:
.2506	98		tya				tya 								; subtract that offset from the code buffer index
.2507	38		sec				sec
.2508	49 ff		eor #$ff			eor 	#$FF
.250a	6d 16 0e	adc $0e16			adc 	tokenBufferIndex
.250d	18		clc				clc 								; add space allowing for header & $80 trailer
.250e	69 04		adc #$04			adc 	#4
.2510	8d 16 0e	sta $0e16			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2513	20 e1 23	jsr $23e1			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.2516					_HLNNoDelete:
.2516	ad 16 0e	lda $0e16			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2519	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.251b	f0 0c		beq $2529			beq 	_HLMEditDone
.251d	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.251f	18		clc				clc 								; workspace (1k)
.2520	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.2522	c5 34		cmp $34				cmp 	highMemory+1
.2524	b0 0b		bcs $2531			bcs 	_HLMMemory 					; nope, won't allowit.
.2526	20 34 24	jsr $2434			jsr 	InsertLine 					; insert the line in
.2529					_HLMEditDone:
.2529	a2 06		ldx #$06		ldx	#6
.252b	20 d2 3b	jsr $3bd2		jsr	mainHandler
.252e	4c 9b 24	jmp $249b			jmp 	WarmStartEntry
.2531					_HLMMemory:
.2531	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2533	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2536					interactionHandler:
.2536	7c 39 25	jmp ($2539,x)			jmp 	(interactionVectors,x)
.2539					interactionVectors:
>2539	3f 25					.word _DummyControlHandler ; index 0
>253b	4f 23					.word ColdStartEntry       ; index 2
>253d	9b 24					.word WarmStartEntry       ; index 4
.253f					_DummyControlHandler:
.253f	60		rts			rts

;******  Return to file: basic.asm

.2540					section_end_interaction:
.2540					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cd9					dataPtr:
>0cd9							.fill 	2
.0cdb					dataIndex:
>0cdb							.fill 	1
.2540					CommandRead:
.2540	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2542	20 85 34	jsr $3485			jsr 	EvaluateReference
.2545	20 86 25	jsr $2586			jsr 	SwapDPCP 					; use the data pointer.
.2548	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.254a	c8		iny				iny
.254b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.254d	f0 07		beq $2556			beq 	_CRInData
.254f	88		dey				dey
.2550	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2552	aa		tax				tax
.2553	20 87 2c	jsr $2c87			jsr 	ScanForward
.2556					_CRInData:
.2556	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2558	20 2d 34	jsr $342d			jsr 	Evaluate
.255b	ca		dex				dex 								; and write the value.
.255c	20 da 27	jsr $27da			jsr 	WriteValue
.255f	20 86 25	jsr $2586			jsr 	SwapDPCP 					; get the code pointer back.
.2562	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2564	c8		iny				iny
.2565	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.2567	f0 d7		beq $2540			beq 	CommandRead
.2569	88		dey				dey
.256a	60		rts				rts
.256b					CommandData:
.256b	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.256d	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.256f	20 87 2c	jsr $2c87			jsr 	ScanForward
.2572	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2573	60		rts				rts
.2574					CommandRestore:
.2574	ad c8 0a	lda $0ac8			lda 	basePage
.2577	8d d9 0c	sta $0cd9			sta 	dataPtr
.257a	ad c9 0a	lda $0ac9			lda 	basePage+1
.257d	8d da 0c	sta $0cda			sta 	dataPtr+1
.2580	a9 03		lda #$03			lda 	#3
.2582	8d db 0c	sta $0cdb			sta 	dataIndex
.2585	60		rts				rts
.2586					SwapDPCP:
.2586	8a		txa				txa
.2587	48		pha				pha
.2588	98		tya				tya 								; swap Y, DataIndex
.2589	ac db 0c	ldy $0cdb			ldy 	DataIndex
.258c	8d db 0c	sta $0cdb			sta 	DataIndex
.258f	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2591	ae d9 0c	ldx $0cd9			ldx 	dataptr
.2594	8d d9 0c	sta $0cd9			sta 	dataPtr
.2597	86 28		stx $28				stx 	codePtr
.2599	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.259b	ae da 0c	ldx $0cda			ldx 	dataptr+1
.259e	8d da 0c	sta $0cda			sta 	dataPtr+1
.25a1	86 29		stx $29				stx 	codePtr+1
.25a3	68		pla				pla
.25a4	aa		tax				tax
.25a5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.25a6					CommandGOSUB:
.25a6	20 4a 34	jsr $344a			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.25a9	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.25ab	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.25ad	20 7f 3b	jsr $3b7f			jsr 	RSClaim
.25b0	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.25b2	20 ab 3b	jsr $3bab			jsr 	RSSavePosition
.25b5	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.25b7	f0 1b		beq $25d4			beq 	GotoTOS 					; and do a GOTO there.
.25b9					CommandRETURN:
.25b9	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.25bb	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.25bd	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.25bf	f0 05		beq $25c6			beq 	_isok
.25c1	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.25c3	20 18 15	jsr $1518		jsr	errorHandler
.25c6					_isok:
.25c6	a9 01		lda #$01			lda 	#1
.25c8	20 be 3b	jsr $3bbe			jsr 	RSLoadPosition 				; reload the position from offset 1.
.25cb	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.25cd	20 a1 3b	jsr $3ba1			jsr 	RSFree
.25d0	60		rts				rts
.25d1					CommandGOTO:
.25d1	20 4a 34	jsr $344a			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.25d4					GotoTOS:
.25d4	20 6b 2f	jsr $2f6b			jsr 	ResetCodeAddress 			; simple search.
.25d7					_GotoSearch:
.25d7	a0 00		ldy #$00			ldy 	#0 							; get offset
.25d9	b1 28		lda ($28),y			lda 	(codePtr),y
.25db	f0 21		beq $25fe			beq 	_GotoError 					; not found.
.25dd	c8		iny				iny									; check LSB match
.25de	b1 28		lda ($28),y			lda 	(codePtr),y
.25e0	d5 98		cmp $98,x			cmp 	esInt0,x
.25e2	d0 07		bne $25eb			bne 	_GotoNext
.25e4	c8		iny				iny
.25e5	b1 28		lda ($28),y			lda 	(codePtr),y
.25e7	d5 a0		cmp $a0,x			cmp 	esInt1,x
.25e9	f0 10		beq $25fb			beq 	_GotoFound
.25eb					_GotoNext:
.25eb	a0 00		ldy #$00			ldy 	#0 							; go next line
.25ed	b1 28		lda ($28),y			lda 	(codePtr),y
.25ef	18		clc				clc
.25f0	65 28		adc $28				adc 	codePtr
.25f2	85 28		sta $28				sta 	codePtr
.25f4	90 e1		bcc $25d7			bcc 	_GotoSearch
.25f6	e6 29		inc $29				inc 	codePtr+1
.25f8	4c d7 25	jmp $25d7			jmp 	_GotoSearch
.25fb					_GotoFound:
.25fb	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.25fd	60		rts				rts
.25fe					_GotoError:
.25fe	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2600	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cdc					InputBuffer:
>0cdc							.fill 	MaxInputSize+1
.2603					Command_Input:
.2603	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2605	c8		iny				iny
.2606	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2608	f0 f9		beq $2603			beq 	Command_Input
.260a	88		dey				dey 							; undo consume
.260b	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.260d	f0 54		beq $2663			beq 	_CIExit 				; : or EOL, exit
.260f	c9 80		cmp #$80			cmp 	#TOK_EOL
.2611	f0 50		beq $2663			beq 	_CIExit
.2613	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2615	90 12		bcc $2629			bcc 	_CIVariable
.2617	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2619	d0 43		bne $265e			bne 	_CISyntax
.261b	a2 00		ldx #$00			ldx 	#0
.261d	20 41 34	jsr $3441			jsr 	EvaluateString 			; evaluate and print string
.2620	20 3c 28	jsr $283c			jsr 	TOSToTemp0
.2623	20 32 27	jsr $2732			jsr 	PrintString
.2626	4c 03 26	jmp $2603			jmp 	Command_Input
.2629					_CIVariable:
.2629	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.262b	20 85 34	jsr $3485			jsr 	EvaluateReference  		; this is where its going
.262e					_CIRetry:
.262e	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2630	a2 14		ldx #$14		ldx	#20
.2632	20 f6 14	jsr $14f6		jsr	deviceHandler
.2635	98		tya				tya
.2636	48		pha				pha
.2637	20 77 26	jsr $2677			jsr 	InputString 			; input a string (manually)
.263a	a2 01		ldx #$01			ldx 	#1
.263c	20 64 26	jsr $2664			jsr 	BufferToStackX 			; make stack,x ref input string.
.263f	a5 90		lda $90				lda 	esType 					; if target type numeric
.2641	29 40		and #$40			and 	#$40 					; then convert to number
.2643	d0 11		bne $2656			bne 	_CIWrite
.2645	a2 01		ldx #$01			ldx 	#1
.2647	20 3c 28	jsr $283c			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.264a	a9 0a		lda #$0a			lda 	#10
.264c	20 52 39	jsr $3952			jsr 	MInt32FromString 		; convert it back from a string.
.264f	68		pla				pla
.2650	a8		tay				tay
.2651	b0 03		bcs $2656			bcs 	_CIWrite 				; successfully converted.
.2653	18		clc				clc 							; default fail FP conversion
.2654	90 d8		bcc $262e			bcc		_CIRetry				; failed, try again.
.2656					_CIWrite:
.2656	a2 00		ldx #$00			ldx 	#0
.2658	20 da 27	jsr $27da			jsr 	WriteValue
.265b	4c 03 26	jmp $2603			jmp 	Command_Input
.265e					_CISyntax:
.265e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2660	20 18 15	jsr $1518		jsr	errorHandler
.2663					_CIExit:
.2663	60		rts				rts
.2664					BufferToStackX:
.2664	a9 dc		lda #$dc			lda 	#InputBuffer & $FF
.2666	95 98		sta $98,x			sta 	esInt0,x
.2668	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.266a	95 a0		sta $a0,x			sta 	esInt1,x
.266c	a9 00		lda #$00			lda 	#0
.266e	95 a8		sta $a8,x			sta 	esInt2,x
.2670	95 b0		sta $b0,x			sta 	esInt3,x
.2672	a9 40		lda #$40			lda 	#$40
.2674	95 90		sta $90,x			sta 	esType,x
.2676	60		rts				rts
.2677					InputString:
.2677	a9 00		lda #$00			lda 	#0
.2679	8d dc 0c	sta $0cdc			sta 	InputBuffer
.267c					_InputLoop:
.267c	a2 02		ldx #$02		ldx	#2
.267e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2681	a2 0a		ldx #$0a		ldx	#10
.2683	20 f6 14	jsr $14f6		jsr	deviceHandler
.2686	c9 00		cmp #$00			cmp 	#0
.2688	f0 f2		beq $267c			beq 	_InputLoop
.268a	c9 08		cmp #$08			cmp 	#8
.268c	f0 19		beq $26a7			beq 	_InputBackspace
.268e	c9 0d		cmp #$0d			cmp 	#13
.2690	f0 21		beq $26b3			beq 	_InputExit
.2692	ae dc 0c	ldx $0cdc			ldx 	InputBuffer
.2695	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2697	f0 e3		beq $267c			beq 	_InputLoop
.2699	9d dd 0c	sta $0cdd,x			sta 	InputBuffer+1,x 		; write char
.269c	ee dc 0c	inc $0cdc			inc 	InputBuffer 			; advance count.
.269f					_InputPrintLoop:
.269f	a2 14		ldx #$14		ldx	#20
.26a1	20 f6 14	jsr $14f6		jsr	deviceHandler
.26a4	4c 7c 26	jmp $267c			jmp	 	_InputLoop
.26a7					_InputBackspace:
.26a7	ad dc 0c	lda $0cdc			lda 	InputBuffer 			; at start
.26aa	f0 d0		beq $267c			beq 	_InputLoop
.26ac	ce dc 0c	dec $0cdc			dec 	InputBuffer
.26af	a9 08		lda #$08			lda 	#8
.26b1	d0 ec		bne $269f			bne 	_InputPrintLoop
.26b3					_InputExit:
.26b3	a2 06		ldx #$06		ldx	#6
.26b5	20 f6 14	jsr $14f6		jsr	deviceHandler
.26b8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cfd					lastPrintToken:
>0cfd							.fill 	1
.26b9					Command_Print:
.26b9	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.26bb	8d fd 0c	sta $0cfd			sta 	lastPrintToken
.26be	88		dey				dey
.26bf					_PrintLoopSkip:
.26bf	c8		iny				iny
.26c0					_PrintLoop:
.26c0	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.26c2	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.26c4	f0 5b		beq $2721			beq 	_PrintExit
.26c6	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.26c8	f0 57		beq $2721			beq 	_PrintExit
.26ca	8d fd 0c	sta $0cfd			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.26cd	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.26cf	f0 ee		beq $26bf			beq 	_PrintLoopSkip
.26d1	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.26d3	f0 3c		beq $2711			beq	 	_PrintNewLine
.26d5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.26d7	f0 40		beq $2719			beq 	_PrintTab
.26d9	20 2b 34	jsr $342b			jsr 	EvaluateRoot 				; evaluate something at the root
.26dc	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.26de	85 2a		sta $2a				sta 	temp0
.26e0	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.26e2	85 2b		sta $2b				sta 	1+(temp0)
.26e4	a5 90		lda $90				lda 	esType 						; get type
.26e6	f0 15		beq $26fd			beq		_PrintInteger
.26e8	4a		lsr a				lsr 	a 							; check for floating point
.26e9	b0 08		bcs $26f3			bcs 	_PrintFloat
.26eb					_PrintString:
.26eb	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.26ed	20 3c 28	jsr $283c			jsr 	TOSToTemp0
.26f0	4c 0b 27	jmp $270b			jmp 	_PrintTemp0 				; print no leading space.
.26f3					_PrintFloat:
.26f3	a9 00		lda #$00			lda 	#0 							; stack level.
.26f5	a2 16		ldx #$16		ldx	#22
.26f7	20 4a 23	jsr $234a		jsr	floatingpointHandler
.26fa	4c 04 27	jmp $2704			jmp 	_PrintSpaceTemp0
.26fd					_PrintInteger:
.26fd	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.26ff	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2701	20 3a 3a	jsr $3a3a			jsr 	MInt32ToString				; convert to text
.2704					_PrintSpaceTemp0:
.2704	a9 20		lda #$20			lda 	#32
.2706	a2 14		ldx #$14		ldx	#20
.2708	20 f6 14	jsr $14f6		jsr	deviceHandler
.270b					_PrintTemp0:
.270b	20 32 27	jsr $2732			jsr 	PrintString
.270e	4c c0 26	jmp $26c0			jmp 	_PrintLoop
.2711					_PrintNewLine:
.2711	a2 06		ldx #$06		ldx	#6
.2713	20 f6 14	jsr $14f6		jsr	deviceHandler
.2716	4c bf 26	jmp $26bf			jmp 	_PrintLoopSkip
.2719					_PrintTab:
.2719	a2 1a		ldx #$1a		ldx	#26
.271b	20 f6 14	jsr $14f6		jsr	deviceHandler
.271e	4c bf 26	jmp $26bf			jmp 	_PrintLoopSkip
.2721					_PrintExit:
.2721	ad fd 0c	lda $0cfd			lda		lastPrintToken 				; check last token
.2724	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2726	f0 09		beq $2731			beq 	_PrintExit2
.2728	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.272a	f0 05		beq $2731			beq 	_PrintExit2
.272c	a2 06		ldx #$06		ldx	#6
.272e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2731					_PrintExit2:
.2731	60		rts				rts
.2732					PrintString:
.2732	8a		txa				txa
.2733	48		pha				pha
.2734	98		tya				tya
.2735	48		pha				pha
.2736	a0 00		ldy #$00			ldy 	#0							; get length
.2738	b1 2a		lda ($2a),y			lda 	(temp0),y
.273a	aa		tax				tax 								; into X
.273b	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.273d	f0 10		beq $274f			beq 	_PSExit
.273f	ca		dex				dex
.2740	8a		txa				txa
.2741	48		pha				pha
.2742	c8		iny				iny
.2743	b1 2a		lda ($2a),y			lda 	(temp0),y
.2745	a2 14		ldx #$14		ldx	#20
.2747	20 f6 14	jsr $14f6		jsr	deviceHandler
.274a	68		pla				pla
.274b	aa		tax				tax
.274c	4c 3b 27	jmp $273b			jmp 	_PSLoop
.274f					_PSExit:
.274f	68		pla				pla
.2750	a8		tay				tay
.2751	68		pla				pla
.2752	aa		tax				tax
.2753	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2754					Command_CLS:
.2754	a2 04		ldx #$04		ldx	#4
.2756	20 f6 14	jsr $14f6		jsr	deviceHandler
.2759	60		rts				rts
.275a					Command_Ink:
.275a	a2 00		ldx #$00			ldx 	#0
.275c	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger
.275f	a2 08		ldx #$08		ldx	#8
.2761	20 f6 14	jsr $14f6		jsr	deviceHandler
.2764	60		rts				rts
.2765					Command_Paper:
.2765	a2 00		ldx #$00			ldx 	#0
.2767	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger
.276a	a2 12		ldx #$12		ldx	#18
.276c	20 f6 14	jsr $14f6		jsr	deviceHandler
.276f	60		rts				rts
.2770					Command_Locate:
.2770	a2 00		ldx #$00			ldx 	#0
.2772	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger
.2775	20 64 3b	jsr $3b64			jsr 	CheckComma
.2778	e8		inx				inx
.2779	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger
.277c	98		tya				tya
.277d	48		pha				pha
.277e	a4 99		ldy $99				ldy 	esInt0+1
.2780	a5 98		lda $98				lda 	esInt0
.2782	a2 10		ldx #$10		ldx	#16
.2784	20 f6 14	jsr $14f6		jsr	deviceHandler
.2787	68		pla				pla
.2788	a8		tay				tay
.2789	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.278a					Command_VDU:
.278a	20 4a 34	jsr $344a			jsr 	EvaluateRootInteger 			; get integer at root.
.278d	a5 98		lda $98				lda 	esInt0
.278f	a2 14		ldx #$14		ldx	#20
.2791	20 f6 14	jsr $14f6		jsr	deviceHandler
.2794					_CVNext:
.2794	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2796	c8		iny				iny
.2797	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2799	f0 ef		beq $278a			beq 	Command_VDU
.279b	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.279d	d0 0a		bne $27a9			bne 	_CVExit
.279f	a5 a0		lda $a0				lda 	esInt1
.27a1	a2 14		ldx #$14		ldx	#20
.27a3	20 f6 14	jsr $14f6		jsr	deviceHandler
.27a6	4c 94 27	jmp $2794			jmp 	_CVNext
.27a9	88		dey		_CVExit:dey
.27aa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.27ab					Command_Assert:
.27ab	20 4a 34	jsr $344a			jsr 	EvaluateRootInteger 		; what is being asserted.
.27ae	20 0b 3b	jsr $3b0b			jsr 	MInt32Zero 					; is it true ?
.27b1	f0 01		beq $27b4			beq 	_CAError
.27b3	60		rts				rts
.27b4					_CAError:
.27b4	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.27b6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.27b9					Command_Dim:
.27b9	a2 04		ldx #$04		ldx	#4
.27bb	20 e3 4a	jsr $4ae3		jsr	variableHandler
.27be	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.27c0	c8		iny				iny
.27c1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.27c3	f0 f4		beq $27b9			beq 	Command_Dim
.27c5	88		dey				dey 								; unpick get
.27c6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.27c7					CommandLet:
.27c7	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.27c9	20 85 34	jsr $3485			jsr 	EvaluateReference
.27cc	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.27ce	20 4c 3b	jsr $3b4c			jsr 	CheckToken
.27d1	e8		inx				inx 								; do RHS
.27d2	20 2d 34	jsr $342d			jsr 	Evaluate 					; evaluate and dereference
.27d5	ca		dex				dex
.27d6	20 da 27	jsr $27da			jsr 	WriteValue 					; write it out
.27d9	60		rts				rts
.27da					WriteValue:
.27da	98		tya				tya
.27db	48		pha				pha
.27dc	20 3c 28	jsr $283c			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.27df	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.27e1	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.27e3	29 40		and #$40			and 	#$40
.27e5	d0 50		bne $2837			bne		_WVType
.27e7	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.27e9	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.27eb	29 40		and #$40			and 	#$40
.27ed	d0 1f		bne $280e			bne 	_WVCopyString
.27ef	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.27f1	15 91		ora $91,x			ora 	esType+1,x
.27f3	4a		lsr a				lsr 	a
.27f4	90 22		bcc $2818			bcc 	_WVCopyData4 				; copy 4 data bytes.
.27f6	b5 90		lda $90,x			lda 	esType,x
.27f8	4a		lsr a				lsr 	a
.27f9	90 3c		bcc $2837			bcc 	_WVType
.27fb	e8		inx				inx 								; force the value being written to be a float.
.27fc	20 8f 30	jsr $308f			jsr 	BPMakeFloat
.27ff	ca		dex				dex
.2800	20 3c 28	jsr $283c			jsr 	TOSToTemp0 					; set Temp0 to write address
.2803	e8		inx				inx
.2804	8a		txa				txa
.2805	a2 22		ldx #$22		ldx	#34
.2807	20 4a 23	jsr $234a		jsr	floatingpointHandler
.280a	aa		tax				tax
.280b	4c 34 28	jmp $2834			jmp 	_WVCopyExit
.280e					_WVCopyString:
.280e	8a		txa				txa
.280f	a2 10		ldx #$10		ldx	#16
.2811	20 8f 3e	jsr $3e8f		jsr	stringHandler
.2814	aa		tax				tax
.2815	4c 34 28	jmp $2834			jmp 	_WVCopyExit
.2818					_WVCopyData4:
.2818	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.281a	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.281c	d0 10		bne $282e			bne 	_WVCopyData1
.281e	a0 03		ldy #$03			ldy 	#3
.2820	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2822	91 2a		sta ($2a),y			sta 	(temp0),y
.2824	88		dey				dey
.2825	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2827	91 2a		sta ($2a),y			sta 	(temp0),y
.2829	88		dey				dey
.282a	b5 a1		lda $a1,x			lda 	esInt1+1,x
.282c	91 2a		sta ($2a),y			sta 	(temp0),y
.282e					_WVCopyData1:
.282e	a0 00		ldy #$00			ldy 	#0
.2830	b5 99		lda $99,x			lda 	esInt0+1,x
.2832	91 2a		sta ($2a),y			sta 	(temp0),y
.2834					_WVCopyExit:
.2834	68		pla				pla
.2835	a8		tay				tay
.2836	60		rts				rts
.2837					_WVType:
.2837	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2839	20 18 15	jsr $1518		jsr	errorHandler
.283c					TOSToTemp0:
.283c	b5 98		lda $98,x			lda 	esInt0,x
.283e	85 2a		sta $2a				sta 	temp0
.2840	b5 a0		lda $a0,x			lda 	esInt1,x
.2842	85 2b		sta $2b				sta 	temp0+1
.2844	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2845					Command_Poke:
.2845	a9 01		lda #$01			lda 	#1
.2847	d0 06		bne $284f			bne 	PokeGeneral
.2849					Command_Doke:
.2849	a9 02		lda #$02			lda 	#2
.284b	d0 02		bne $284f			bne 	PokeGeneral
.284d					Command_Loke:
.284d	a9 03		lda #$03			lda 	#3
.284f					PokeGeneral:
.284f	48		pha				pha 								; save id (PDL = 123)
.2850	20 4a 34	jsr $344a			jsr 	EvaluateRootInteger 		; target address
.2853	20 64 3b	jsr $3b64			jsr	 	CheckComma
.2856	e8		inx				inx
.2857	20 4c 34	jsr $344c			jsr 	EvaluateInteger 			; what value to POKE ?
.285a	ca		dex				dex
.285b	20 3c 28	jsr $283c			jsr 	TOSToTemp0 					; temp0 points to the target address
.285e	84 32		sty $32				sty 	tempShort 					; save Y
.2860	68		pla				pla 								; get copy type (1-3) and dispatch
.2861	aa		tax				tax
.2862	ca		dex				dex
.2863	f0 14		beq $2879			beq 	_Poke1
.2865	ca		dex				dex
.2866	f0 0b		beq $2873			beq 	_Poke2
.2868	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.286a	a5 b1		lda $b1				lda 	esInt3+1
.286c	91 2a		sta ($2a),y			sta 	(temp0),y
.286e	88		dey				dey
.286f	a5 a9		lda $a9				lda 	esInt2+1
.2871	91 2a		sta ($2a),y			sta 	(temp0),y
.2873					_Poke2:
.2873	a0 01		ldy #$01			ldy 	#1
.2875	a5 a1		lda $a1				lda 	esInt1+1
.2877	91 2a		sta ($2a),y			sta 	(temp0),y
.2879					_Poke1:
.2879	a0 00		ldy #$00			ldy 	#0
.287b	a5 99		lda $99				lda 	esInt0+1
.287d	91 2a		sta ($2a),y			sta 	(temp0),y
.287f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2881	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2882					Command_Rem:
.2882					Command_Rem2:
.2882	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2884	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2886	d0 06		bne $288e			bne 	_CRNotString
.2888	c8		iny				iny
.2889	98		tya				tya
.288a	38		sec				sec
.288b	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.288d	a8		tay				tay
.288e					_CRNotString:
.288e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.288f					CommandStop:
.288f	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2891	20 18 15	jsr $1518		jsr	errorHandler
.2894					CommandEnd:
.2894	4c cd 3b	jmp $3bcd			jmp 	WarmStart
.2897					CommandXemu:
.2897	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.289a					AdvanceNextLine:
.289a	a0 00		ldy #$00			ldy 	#0 							; get offset
.289c	b1 28		lda ($28),y			lda 	(codePtr),y
.289e	18		clc				clc 								; add to codePtr
.289f	65 28		adc $28				adc 	codePtr
.28a1	85 28		sta $28				sta 	codePtr
.28a3	90 02		bcc $28a7			bcc 	_ANLNoCarry
.28a5	e6 29		inc $29				inc 	codePtr+1
.28a7					_ANLNoCarry:
.28a7	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.28a9	f0 e9		beq $2894			beq 	CommandEnd 					; execute END
.28ab	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.28ad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.28ae					Command_FOR:
.28ae	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.28b0	a2 0b		ldx #$0b			ldx 	#11
.28b2	20 7f 3b	jsr $3b7f			jsr 	RSClaim
.28b5	20 c7 27	jsr $27c7			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.28b8	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.28ba	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.28bc	d0 4c		bne $290a			bne 	_CFType
.28be	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.28c0	20 4c 3b	jsr $3b4c			jsr 	CheckToken
.28c3	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.28c5	20 4c 34	jsr $344c			jsr 	EvaluateInteger				; get terminal value in stack 1
.28c8	98		tya				tya
.28c9	48		pha				pha
.28ca	a0 04		ldy #$04			ldy 	#4
.28cc	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.28ce	91 37		sta ($37),y			sta 	(rsPointer),y
.28d0	c8		iny				iny
.28d1	a5 a0		lda $a0				lda		esInt1
.28d3	91 37		sta ($37),y			sta 	(rsPointer),y
.28d5	c8		iny				iny
.28d6	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.28d8	91 37		sta ($37),y			sta 	(rsPointer),y
.28da	c8		iny				iny
.28db	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.28dd	91 37		sta ($37),y			sta 	(rsPointer),y
.28df	c8		iny				iny
.28e0	a5 a1		lda $a1				lda		esInt1+1
.28e2	91 37		sta ($37),y			sta 	(rsPointer),y
.28e4	c8		iny				iny
.28e5	a5 a9		lda $a9				lda		esInt2+1
.28e7	91 37		sta ($37),y			sta 	(rsPointer),y
.28e9	c8		iny				iny
.28ea	a5 b1		lda $b1				lda		esInt3+1
.28ec	91 37		sta ($37),y			sta 	(rsPointer),y
.28ee	68		pla				pla
.28ef	a8		tay				tay
.28f0	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.28f2	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.28f4	d0 0e		bne $2904			bne 	_CFDone
.28f6	c8		iny				iny									; skip over step.
.28f7	20 4c 34	jsr $344c			jsr 	EvaluateInteger 			; get step
.28fa	98		tya				tya
.28fb	48		pha				pha
.28fc	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.28fe	a0 06		ldy #$06			ldy 	#6
.2900	91 37		sta ($37),y			sta 	(rsPointer),y
.2902	68		pla				pla
.2903	a8		tay				tay
.2904					_CFDone:
.2904	a9 01		lda #$01			lda 	#1
.2906	20 ab 3b	jsr $3bab			jsr 	RSSavePosition 				; save position.
.2909	60		rts				rts
.290a					_CFType:
.290a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.290c	20 18 15	jsr $1518		jsr	errorHandler
.290f					Command_NEXT:
.290f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2911	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2913	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2915	f0 05		beq $291c			beq 	_isok
.2917	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2919	20 18 15	jsr $1518		jsr	errorHandler
.291c					_isok:
.291c	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.291e	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2920	b0 18		bcs $293a			bcs 	_CNNoIndex
.2922	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2924	20 85 34	jsr $3485			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2927	98		tya				tya
.2928	48		pha				pha
.2929	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.292b	b1 37		lda ($37),y			lda 	(rsPointer),y
.292d	d5 98		cmp $98,x			cmp 	esInt0,x
.292f	d0 76		bne $29a7			bne 	_CNBadIndex
.2931	c8		iny				iny
.2932	b1 37		lda ($37),y			lda 	(rsPointer),y
.2934	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2936	d0 6f		bne $29a7			bne 	_CNBadIndex
.2938	68		pla				pla
.2939	a8		tay				tay
.293a					_CNNoIndex:
.293a	98		tya				tya
.293b	48		pha				pha
.293c	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.293e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2940	85 2a		sta $2a				sta 	temp0
.2942	c8		iny				iny
.2943	b1 37		lda ($37),y			lda 	(rsPointer),y
.2945	85 2b		sta $2b				sta 	temp0+1
.2947	c8		iny				iny
.2948	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.294a	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.294c	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.294e	10 01		bpl $2951			bpl 	_CNSignX
.2950	ca		dex				dex  								; X = $FF
.2951					_CNSignX:
.2951	18		clc				clc 								; add to the LSB
.2952	a0 00		ldy #$00			ldy 	#0
.2954	71 2a		adc ($2a),y			adc 	(temp0),y
.2956	91 2a		sta ($2a),y			sta 	(temp0),y
.2958					_CNPropogate:
.2958	c8		iny				iny  								; add the sign extended in X to the rest.
.2959	8a		txa				txa
.295a	71 2a		adc ($2a),y			adc 	(temp0),y
.295c	91 2a		sta ($2a),y			sta 	(temp0),y
.295e	c8		iny				iny
.295f	8a		txa				txa
.2960	71 2a		adc ($2a),y			adc 	(temp0),y
.2962	91 2a		sta ($2a),y			sta 	(temp0),y
.2964	c8		iny				iny
.2965	8a		txa				txa
.2966	71 2a		adc ($2a),y			adc 	(temp0),y
.2968	91 2a		sta ($2a),y			sta 	(temp0),y
.296a	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.296b	a5 37		lda $37				lda 	rsPointer
.296d	69 07		adc #$07			adc 	#7
.296f	85 2c		sta $2c				sta 	temp1
.2971	a9 00		lda #$00			lda 	#0
.2973	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2975	a8		tay				tay 								; and clear the Y register again.
.2976	65 38		adc $38				adc 	rsPointer+1
.2978	85 2d		sta $2d				sta 	temp1+1
.297a	38		sec				sec 								; calculate current - limit oring interim values.
.297b	20 b3 29	jsr $29b3			jsr 	_CNCompare 					; each of these does a byte.
.297e	20 b3 29	jsr $29b3			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2981	20 b3 29	jsr $29b3			jsr 	_CNCompare 					; and the carry of the subtraction.
.2984	20 b3 29	jsr $29b3			jsr 	_CNCompare
.2987	50 02		bvc $298b			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2989	49 80		eor #$80			eor 	#$80
.298b					_CNNoOverflow:
.298b	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.298d	30 1d		bmi $29ac			bmi 	_CNCheckDownto
.298f	c9 00		cmp #$00			cmp 	#0
.2991	30 0c		bmi $299f			bmi 	_CNLoopRound 				; loop round if < =
.2993	a5 2e		lda $2e				lda 	temp2
.2995	f0 08		beq $299f			beq 	_CNLoopRound
.2997					_CNLoopExit:
.2997	68		pla				pla
.2998	a8		tay				tay
.2999	a9 0b		lda #$0b			lda 	#11
.299b	20 a1 3b	jsr $3ba1			jsr 	RSFree
.299e	60		rts				rts
.299f					_CNLoopRound:
.299f	68		pla				pla
.29a0	a8		tay				tay
.29a1	a9 01		lda #$01			lda 	#1
.29a3	20 be 3b	jsr $3bbe			jsr 	RSLoadPosition				; go back to the loop top
.29a6	60		rts				rts
.29a7					_CNBadIndex:
.29a7	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.29a9	20 18 15	jsr $1518		jsr	errorHandler
.29ac					_CNCheckDownto:
.29ac	c9 00		cmp #$00			cmp 	#0
.29ae	10 ef		bpl $299f			bpl 	_CNLoopRound
.29b0	4c 97 29	jmp $2997			jmp 	_CNLoopExit
.29b3					_CNCompare:
.29b3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.29b5	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.29b7	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.29b9	85 2e		sta $2e				sta 	temp2
.29bb	c8		iny				iny
.29bc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.29bd					CommandIf:
.29bd	20 4a 34	jsr $344a			jsr 	EvaluateRootInteger 		; get what's being tested.
.29c0	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.29c2	c9 91		cmp #$91			cmp 	#TKW_GOTO
.29c4	f0 04		beq $29ca			beq 	_IfSimple
.29c6	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.29c8	d0 1b		bne $29e5			bne 	_IfComplex
.29ca					_IfSimple:
.29ca	20 0b 3b	jsr $3b0b			jsr 	MInt32Zero					; check if TOS zero
.29cd	f0 10		beq $29df			beq 	_IfEOL 						; go to next line.
.29cf	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.29d1	c8		iny				iny
.29d2	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.29d4	f0 0c		beq $29e2			beq 	_IfGoto 					; do the Goto code
.29d6	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.29d8	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.29da	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.29dc	f0 04		beq $29e2			beq 	_IfGoto
.29de	60		rts				rts 								; else continue on this line.
.29df					_IfEOL:
.29df	4c 9a 28	jmp $289a			jmp 	AdvanceNextLine 			; go to next line
.29e2					_IfGoto:
.29e2	4c d1 25	jmp $25d1			jmp 	CommandGoto
.29e5					_IfComplex:
.29e5	20 0b 3b	jsr $3b0b			jsr 	MInt32Zero 					; is it true ?
.29e8	f0 01		beq $29eb			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.29ea	60		rts				rts 								; else continue.
.29eb					_IFSkip:
.29eb	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.29ed	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.29ef	4c 87 2c	jmp $2c87			jmp		ScanForward
.29f2					Command_ELSE:
.29f2	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.29f4	8a		txa				txa
.29f5	4c 87 2c	jmp $2c87			jmp		ScanForward
.29f8					Command_ENDIF:
.29f8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cfe					storeSize:
>0cfe							.fill 	1
.29f9					CommandLocal:
.29f9	a2 00		ldx #$00			ldx 	#0
.29fb	20 17 2a	jsr $2a17			jsr 	LocaliseVariable 			; localise one.
.29fe					_CLCheckNext:
.29fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2a00	c8		iny				iny
.2a01	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2a03	f0 06		beq $2a0b			beq 	_CLAssignment
.2a05	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2a07	f0 f0		beq $29f9			beq 	CommandLocal
.2a09	88		dey				dey
.2a0a	60		rts				rts
.2a0b					_CLAssignment:
.2a0b	a2 01		ldx #$01			ldx 	#1
.2a0d	20 2d 34	jsr $342d			jsr 	Evaluate 					; evaluate RHS
.2a10	ca		dex				dex
.2a11	20 da 27	jsr $27da			jsr 	WriteValue
.2a14	4c fe 29	jmp $29fe			jmp 	_CLCheckNext
.2a17					LocaliseVariable:
.2a17	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2a19	c9 40		cmp #$40			cmp 	#$40
.2a1b	b0 67		bcs $2a84			bcs 	_LVSyntax
.2a1d	8a		txa				txa 								; get the address of that variable.
.2a1e	a2 02		ldx #$02		ldx	#2
.2a20	20 e3 4a	jsr $4ae3		jsr	variableHandler
.2a23	aa		tax				tax
.2a24	8a		txa				txa
.2a25	48		pha				pha
.2a26	98		tya				tya
.2a27	48		pha				pha
.2a28	20 3c 28	jsr $283c			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2a2b	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2a2d	0a		asl a				asl 	a
.2a2e	10 16		bpl $2a46			bpl 	_LVPushNumber
.2a30	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2a32	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a34	c8		iny				iny
.2a35	85 2c		sta $2c				sta 	temp1
.2a37	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a39	85 2d		sta $2d				sta 	temp1+1
.2a3b	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2a3d	b1 2c		lda ($2c),y			lda 	(temp1),y
.2a3f	aa		tax				tax 								; into X
.2a40	e8		inx				inx 								; +1 for length.
.2a41	a9 24		lda #$24			lda 	#markerString
.2a43	4c 5b 2a	jmp $2a5b			jmp 	_LVWriteFrame
.2a46					_LVPushNumber:
.2a46	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2a48	85 2c		sta $2c				sta 	temp1
.2a4a	a5 2b		lda $2b				lda 	temp0+1
.2a4c	85 2d		sta $2d				sta 	temp1+1
.2a4e	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2a50	4a		lsr a				lsr 	a
.2a51	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2a53	a2 04		ldx #$04			ldx 	#VarISize
.2a55	90 04		bcc $2a5b			bcc 	_LVIsInteger
.2a57	a9 23		lda #$23			lda 	#markerFloat
.2a59	a2 06		ldx #$06			ldx 	#VarFSize
.2a5b					_LVIsInteger:
.2a5b					_LVWriteFrame:
.2a5b	8e fe 0c	stx $0cfe			stx 	storeSize 					; number of bytes to copy from (temp0)
.2a5e	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2a5f	e8		inx				inx
.2a60	e8		inx				inx
.2a61	20 7f 3b	jsr $3b7f			jsr 	RSClaim 					; create the stack frame.
.2a64	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2a66	a0 01		ldy #$01			ldy 	#1
.2a68	91 37		sta ($37),y			sta 	(rsPointer),y
.2a6a	c8		iny				iny
.2a6b	a5 2b		lda $2b				lda 	temp0+1
.2a6d	91 37		sta ($37),y			sta 	(rsPointer),y
.2a6f	a0 00		ldy #$00			ldy 	#0
.2a71					_LVCopyData:
.2a71	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2a73	c8		iny				iny 								; write allowing for the header bit.
.2a74	c8		iny				iny
.2a75	c8		iny				iny
.2a76	91 37		sta ($37),y			sta 	(rsPointer),y
.2a78	88		dey				dey
.2a79	88		dey				dey
.2a7a	ce fe 0c	dec $0cfe			dec 	storeSize 					; do it storesize times
.2a7d	d0 f2		bne $2a71			bne 	_LVCopyData
.2a7f	68		pla				pla
.2a80	a8		tay				tay
.2a81	68		pla				pla
.2a82	aa		tax				tax
.2a83	60		rts				rts
.2a84					_LVSyntax:
.2a84	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a86	20 18 15	jsr $1518		jsr	errorHandler
.2a89					RestoreLocals:
.2a89	a2 00		ldx #$00			ldx 	#0
.2a8b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a8d	c9 40		cmp #$40			cmp	 	#64
.2a8f	90 01		bcc $2a92			bcc 	_RLocal
.2a91	60		rts				rts
.2a92					_RLocal:
.2a92	8a		txa				txa
.2a93	48		pha				pha
.2a94	98		tya				tya
.2a95	48		pha				pha
.2a96	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2a98	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a9a	85 2a		sta $2a				sta 	temp0
.2a9c	c8		iny				iny
.2a9d	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a9f	85 2b		sta $2b				sta 	temp0+1
.2aa1	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2aa3	b1 37		lda ($37),y			lda 	(rsPointer),y
.2aa5	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2aa7	f0 28		beq $2ad1			beq 	_RString
.2aa9	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2aab	c9 25		cmp #$25			cmp 	#markerInt
.2aad	f0 02		beq $2ab1			beq 	_RIsInteger
.2aaf	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2ab1					_RIsInteger:
.2ab1	8a		txa				txa
.2ab2	48		pha				pha
.2ab3	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2ab5					_RCopyBack:
.2ab5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ab7	88		dey				dey
.2ab8	88		dey				dey
.2ab9	88		dey				dey
.2aba	91 2a		sta ($2a),y			sta 	(temp0),y
.2abc	c8		iny				iny
.2abd	c8		iny				iny
.2abe	c8		iny				iny
.2abf	c8		iny				iny
.2ac0	ca		dex				dex
.2ac1	d0 f2		bne $2ab5			bne 	_RCopyBack
.2ac3	68		pla				pla 								; get size add 3
.2ac4	18		clc				clc
.2ac5	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2ac7					_RRestoreAAndLoop:
.2ac7	20 a1 3b	jsr $3ba1			jsr 	RSFree
.2aca	68		pla				pla
.2acb	a8		tay				tay
.2acc	68		pla				pla
.2acd	aa		tax				tax
.2ace	4c 89 2a	jmp $2a89			jmp 	RestoreLocals 				; go see if there are any more locals.
.2ad1					_RString:
.2ad1	a2 00		ldx #$00			ldx 	#0
.2ad3	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2ad5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ad7	95 98		sta $98,x			sta 	esInt0,x
.2ad9	c8		iny				iny
.2ada	b1 37		lda ($37),y			lda 	(rsPointer),y
.2adc	95 a0		sta $a0,x			sta 	esInt1,x
.2ade	18		clc				clc
.2adf	a5 37		lda $37				lda 	rsPointer
.2ae1	69 03		adc #$03			adc 	#3
.2ae3	95 99		sta $99,x			sta 	esInt0+1,x
.2ae5	a5 38		lda $38				lda 	rsPointer+1
.2ae7	69 00		adc #$00			adc 	#0
.2ae9	95 a1		sta $a1,x			sta 	esInt1+1,x
.2aeb	8a		txa				txa
.2aec	a2 10		ldx #$10		ldx	#16
.2aee	20 8f 3e	jsr $3e8f		jsr	stringHandler
.2af1	a0 03		ldy #$03			ldy 	#3 							; get string length
.2af3	b1 37		lda ($37),y			lda 	(rsPointer),y
.2af5	18		clc				clc
.2af6	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2af8	4c c7 2a	jmp $2ac7			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cff					paramCount:
>0cff							.fill 	1
.2afb					CallProc:
.2afb	20 83 2b	jsr $2b83			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2afe	48		pha				pha 								; save length on stack
.2aff	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2b01	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2b03	48		pha				pha
.2b04	a5 2a		lda $2a				lda 	temp0
.2b06	48		pha				pha
.2b07	98		tya				tya 								; calculate Y + length
.2b08	18		clc				clc
.2b09	65 32		adc $32				adc 	tempShort
.2b0b	a8		tay				tay
.2b0c	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2b0e					_CallProcEvalParams:
.2b0e	e8		inx				inx
.2b0f	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2b11	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b13	f0 0b		beq $2b20			beq 	_CPDoneParams
.2b15	20 2d 34	jsr $342d			jsr 	Evaluate 					; evaluate a parameter
.2b18	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2b1a	c8		iny				iny
.2b1b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2b1d	f0 ef		beq $2b0e			beq 	_CallProcEvalParams
.2b1f	88		dey				dey 								; undo consumption.
.2b20					_CPDoneParams:
.2b20	20 57 3b	jsr $3b57			jsr 	CheckRightParen 			; check closing parenthesis.
.2b23	8e ff 0c	stx $0cff			stx 	paramCount 					; store parameter count+1
.2b26	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2b28	a9 50		lda #$50			lda 	#markerPROC
.2b2a	20 7f 3b	jsr $3b7f			jsr 	RSClaim
.2b2d	a9 01		lda #$01			lda 	#1 							; store return address.
.2b2f	20 ab 3b	jsr $3bab			jsr 	RSSavePosition
.2b32	68		pla				pla 								; get the new code Ptr
.2b33	85 28		sta $28				sta 	codePtr
.2b35	68		pla				pla
.2b36	85 29		sta $29				sta 	codePtr+1
.2b38	68		pla				pla 								; length of name + 4 is the param start.
.2b39	18		clc				clc
.2b3a	69 04		adc #$04			adc 	#4
.2b3c	a8		tay				tay
.2b3d	a2 ff		ldx #$ff			ldx 	#$FF
.2b3f					_CPLoadParameters:
.2b3f	e8		inx				inx 								; point to where the address should be loaded.
.2b40	ec ff 0c	cpx $0cff			cpx 	paramCount 					; too many parameters in definition ?
.2b43	f0 1e		beq $2b63			beq 	_CPParamError
.2b45	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2b47	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2b49	f0 0e		beq $2b59			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2b4b	20 17 2a	jsr $2a17			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2b4e	20 da 27	jsr $27da			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2b51	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2b53	c8		iny				iny
.2b54	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2b56	f0 e7		beq $2b3f			beq 	_CPLoadParameters
.2b58	88		dey				dey 								; no, unconsume and check for )
.2b59					_CPParamComplete:
.2b59	20 57 3b	jsr $3b57			jsr 	CheckRightParen 			; check )
.2b5c	e8		inx				inx 								; check right number of parameters have been consumed
.2b5d	ec ff 0c	cpx $0cff			cpx 	paramCount
.2b60	d0 01		bne $2b63			bne 	_CPParamError
.2b62	60		rts				rts
.2b63					_CPParamError:
.2b63	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2b65	20 18 15	jsr $1518		jsr	errorHandler
.2b68					ReturnProc:
.2b68	20 89 2a	jsr $2a89			jsr 	RestoreLocals 				; get the locals back.
.2b6b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b6d	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2b6f	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2b71	f0 05		beq $2b78			beq 	_isok
.2b73	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2b75	20 18 15	jsr $1518		jsr	errorHandler
.2b78					_isok:
.2b78	a9 01		lda #$01			lda 	#1
.2b7a	20 be 3b	jsr $3bbe			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2b7d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2b7f	20 a1 3b	jsr $3ba1			jsr 	RSFree
.2b82	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d00					procList:
>0d00							.fill 	2		 					; terminated by name high being zero.
.0d02					yInLine:
>0d02							.fill 	1
.2b83					FindProcedure:
.2b83	8c 02 0d	sty $0d02			sty 	yInLine 					; save current position.
.2b86	20 41 2c	jsr $2c41			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2b89	85 2c		sta $2c				sta 	temp1
.2b8b	ad 00 0d	lda $0d00			lda		procList 					; put procList address in temp2
.2b8e	85 2e		sta $2e				sta 	temp2
.2b90	ad 01 0d	lda $0d01			lda 	procList+1
.2b93	85 2f		sta $2f				sta 	temp2+1
.2b95	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2b97					_FPLoop:
.2b97	b1 2e		lda ($2e),y			lda 	(temp2),y
.2b99	f0 4f		beq $2bea			beq 	_FPError 					; if so, we don't know this procedure.
.2b9b	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2b9d	c8		iny				iny
.2b9e	b1 2e		lda ($2e),y			lda 	(temp2),y
.2ba0	85 2a		sta $2a				sta 	temp0
.2ba2	c8		iny				iny
.2ba3	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2ba5	c5 2c		cmp $2c				cmp 	temp1
.2ba7	d0 2b		bne $2bd4			bne 	_FPNext 					; hash is different, go to next.
.2ba9	38		sec				sec
.2baa	ad 02 0d	lda $0d02			lda 	yInLine 					; position in line must be at least 4
.2bad	e9 04		sbc #$04			sbc 	#4
.2baf	18		clc				clc
.2bb0	65 28		adc $28				adc 	codePtr
.2bb2	85 30		sta $30				sta 	temp3
.2bb4	a5 29		lda $29				lda 	codePtr+1
.2bb6	69 00		adc #$00			adc 	#0
.2bb8	85 31		sta $31				sta 	temp3+1
.2bba	98		tya				tya
.2bbb	48		pha				pha
.2bbc	a0 04		ldy #$04			ldy 	#4
.2bbe					_FPCName:
.2bbe	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2bc0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2bc2	d0 0e		bne $2bd2			bne 	_FPpulYNext 				; if different go to next one.
.2bc4	c8		iny				iny
.2bc5	c9 3a		cmp #$3a			cmp 	#$3A
.2bc7	90 f5		bcc $2bbe			bcc 	_FPCName 					; compare the whole lot....
.2bc9	68		pla				pla 								; throw away the saved Y
.2bca	98		tya				tya 								; length of name is Y-4
.2bcb	38		sec				sec
.2bcc	e9 04		sbc #$04			sbc 	#4
.2bce	ac 02 0d	ldy $0d02			ldy 	yInLine  					; get the original Y back
.2bd1	60		rts				rts
.2bd2					_FPpulYNext:
.2bd2	68		pla				pla
.2bd3	a8		tay				tay
.2bd4					_FPNext:
.2bd4	c8		iny				iny 								; next procedure record.
.2bd5	10 c0		bpl $2b97			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2bd7	98		tya				tya 								; subtract 128 from Y
.2bd8	38		sec				sec
.2bd9	e9 80		sbc #$80			sbc 	#128
.2bdb	a8		tay				tay
.2bdc	18		clc				clc 								; add 128 to temp2, so we can have more than
.2bdd	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2bdf	69 80		adc #$80			adc 	#128
.2be1	85 2e		sta $2e				sta 	temp2
.2be3	90 b2		bcc $2b97			bcc 	_FPLoop
.2be5	e6 2f		inc $2f				inc 	temp2+1
.2be7	4c 97 2b	jmp $2b97			jmp 	_FPLoop
.2bea					_FPError:
.2bea	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2bec	20 18 15	jsr $1518		jsr	errorHandler
.2bef					ScanProc:
.2bef	98		tya				tya
.2bf0	48		pha				pha
.2bf1	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2bf3	8d 00 0d	sta $0d00			sta 	procList
.2bf6	a5 36		lda $36				lda 	lowMemory+1
.2bf8	8d 01 0d	sta $0d01			sta 	procList+1
.2bfb	20 6b 2f	jsr $2f6b			jsr 	ResetCodeAddress 			; back to the start.
.2bfe					_ScanLoop:
.2bfe	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2c00	b1 28		lda ($28),y			lda 	(codePtr),y
.2c02	f0 2a		beq $2c2e			beq 	_ScanExit
.2c04	a0 03		ldy #$03			ldy 	#3							; get first token
.2c06	b1 28		lda ($28),y			lda 	(codePtr),y
.2c08	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2c0a	d0 12		bne $2c1e			bne 	_ScanNext
.2c0c	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2c0e	20 36 2c	jsr $2c36			jsr 	_ScanWrite
.2c11	a5 28		lda $28				lda 	codePtr
.2c13	20 36 2c	jsr $2c36			jsr 	_ScanWrite
.2c16	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2c18	20 41 2c	jsr $2c41			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2c1b	20 36 2c	jsr $2c36			jsr 	_ScanWrite					; and write that
.2c1e					_ScanNext:
.2c1e	18		clc				clc
.2c1f	a0 00		ldy #$00			ldy 	#0
.2c21	b1 28		lda ($28),y			lda 	(codePtr),y
.2c23	65 28		adc $28				adc 	codePtr
.2c25	85 28		sta $28				sta 	codePtr
.2c27	90 d5		bcc $2bfe			bcc 	_ScanLoop
.2c29	e6 29		inc $29				inc 	codePtr+1
.2c2b	4c fe 2b	jmp $2bfe			jmp 	_ScanLoop
.2c2e					_ScanExit:
.2c2e	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2c30	20 36 2c	jsr $2c36			jsr 	_ScanWrite
.2c33	68		pla				pla
.2c34	a8		tay				tay
.2c35	60		rts				rts
.2c36					_ScanWrite:
.2c36	a0 00		ldy #$00			ldy 	#0
.2c38	91 35		sta ($35),y			sta 	(lowMemory),y
.2c3a	e6 35		inc $35				inc 	lowMemory
.2c3c	d0 02		bne $2c40			bne 	_SWNoCarry
.2c3e	e6 36		inc $36				inc 	lowMemory+1
.2c40					_SWNoCarry:
.2c40	60		rts				rts
.2c41					CalculateProcedureHash:
.2c41	a9 00		lda #$00			lda 	#0 							; clear hash.
.2c43	85 2a		sta $2a				sta 	temp0
.2c45					_CPHLoop:
.2c45	18		clc				clc 								; add character and rotate and add carry back in
.2c46	b1 28		lda ($28),y			lda 	(codePtr),y
.2c48	65 2a		adc $2a				adc 	temp0
.2c4a	6a		ror a				ror 	a
.2c4b	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2c4d	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2c4f	b1 28		lda ($28),y			lda 	(codePtr),y
.2c51	c8		iny				iny 								; advance incase we go round again.
.2c52	c9 3a		cmp #$3a			cmp 	#$3A
.2c54	90 ef		bcc $2c45			bcc 	_CPHLoop
.2c56	a5 2a		lda $2a				lda 	temp0
.2c58	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2c59					Command_Repeat:
.2c59	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2c5b	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2c5d	20 7f 3b	jsr $3b7f			jsr 	RSClaim
.2c60	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2c62	20 ab 3b	jsr $3bab			jsr 	RSSavePosition
.2c65	60		rts				rts
.2c66					Command_Until:
.2c66	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c68	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c6a	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2c6c	f0 05		beq $2c73			beq 	_isok
.2c6e	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2c70	20 18 15	jsr $1518		jsr	errorHandler
.2c73					_isok:
.2c73	20 4a 34	jsr $344a			jsr 	EvaluateRootInteger 		; at the bottom.
.2c76	20 0b 3b	jsr $3b0b			jsr 	MInt32Zero					; check if TOS zero
.2c79	d0 06		bne $2c81			bne 	_CUExit
.2c7b	a9 01		lda #$01			lda 	#1
.2c7d	20 be 3b	jsr $3bbe			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2c80	60		rts				rts
.2c81					_CUExit:
.2c81	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2c83	20 a1 3b	jsr $3ba1			jsr 	RSFree
.2c86	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2c87					ScanForward:
.2c87	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2c89	86 2d		stx $2d				stx 	temp1+1
.2c8b	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2c8d	85 2e		sta $2e				sta 	temp2
.2c8f	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2c91	c8		iny				iny
.2c92	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2c94	d0 08		bne $2c9e			bne 	_SFNoCheck 					; if so, check token against entered values.
.2c96	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2c98	f0 24		beq $2cbe			beq 	_SFExit 					; at the same strcture depth.
.2c9a	c5 2d		cmp $2d				cmp 	temp1+1
.2c9c	f0 20		beq $2cbe			beq 	_SFExit
.2c9e					_SFNoCheck:
.2c9e	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2ca0	90 ed		bcc $2c8f			bcc 	_SFLoop
.2ca2	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2ca4	90 19		bcc $2cbf			bcc 	_SFSpecials
.2ca6	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2ca8	90 e5		bcc $2c8f			bcc 	_SFLoop
.2caa	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2cac	b0 e1		bcs $2c8f			bcs 	_SFLoop
.2cae	aa		tax				tax  								; token in X, and look up the adjuster.
.2caf	bd 68 33	lda $3368,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2cb2	38		sec				sec 								; convert to an offset ($FF,$01)
.2cb3	e9 81		sbc #$81			sbc 	#$81
.2cb5	18		clc				clc 								; add to depth
.2cb6	65 2e		adc $2e				adc 	temp2
.2cb8	85 2e		sta $2e				sta 	temp2
.2cba	10 d3		bpl $2c8f			bpl 	_SFLoop 					; +ve okay to continue
.2cbc	30 07		bmi $2cc5			bmi 	SFError 					; if gone -ve then we have a nesting error
.2cbe	60		rts		_SFExit:rts
.2cbf					_SFSpecials:
.2cbf	20 ca 2c	jsr $2cca			jsr 	ScannerSkipSpecial
.2cc2	4c 8f 2c	jmp $2c8f			jmp 	_SFLoop
.2cc5					SFError:
.2cc5	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2cc7	20 18 15	jsr $1518		jsr	errorHandler
.2cca					ScannerSkipSpecial:
.2cca	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2ccc	f0 10		beq $2cde			beq 	_SFNextLine
.2cce	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2cd0	f0 2b		beq $2cfd			beq 	_SFFloatSkip
.2cd2	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2cd4	f0 02		beq $2cd8			beq 	_SFSkipString
.2cd6	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2cd7	60		rts				rts 								; token.
.2cd8					_SFSkipString:
.2cd8	98		tya				tya
.2cd9	38		sec				sec
.2cda	71 28		adc ($28),y			adc 	(codePtr),y
.2cdc	a8		tay				tay
.2cdd	60		rts				rts
.2cde					_SFNextLine:
.2cde	a0 00		ldy #$00			ldy 	#0 							; get offset
.2ce0	b1 28		lda ($28),y			lda 	(codePtr),y
.2ce2	18		clc				clc 								; add to code pointer.
.2ce3	65 28		adc $28				adc 	codePtr
.2ce5	85 28		sta $28				sta 	codePtr
.2ce7	90 02		bcc $2ceb			bcc		_SFNLNoCarry
.2ce9	e6 29		inc $29				inc 	codePtr+1
.2ceb					_SFNLNoCarry:
.2ceb	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2ced	d0 0b		bne $2cfa			bne		_SFXNL 						; no go round again
.2cef	a5 2c		lda $2c				lda 	temp1
.2cf1	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2cf3	d0 d0		bne $2cc5			bne 	SFError 					; read uses this to search for data statements
.2cf5	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2cf7	20 18 15	jsr $1518		jsr	errorHandler
.2cfa	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2cfc	60		rts				rts
.2cfd					_SFFloatSkip:
.2cfd	98		tya				tya 								; skip over an embedded float.
.2cfe	18		clc				clc
.2cff	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2d01	a8		tay				tay
.2d02	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2d03					Command_While:
.2d03	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2d05	a2 04		ldx #$04			ldx 	#4
.2d07	20 7f 3b	jsr $3b7f			jsr 	RSClaim 					; create on stack.
.2d0a	88		dey				dey
.2d0b	a9 01		lda #$01			lda 	#1
.2d0d	20 ab 3b	jsr $3bab			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2d10	c8		iny				iny
.2d11	20 4a 34	jsr $344a			jsr 	EvaluateRootInteger			; get the conditional
.2d14	20 0b 3b	jsr $3b0b			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2d17	f0 01		beq $2d1a			beq 	_CWFail
.2d19	60		rts				rts
.2d1a					_CWFail:
.2d1a	a9 04		lda #$04			lda 	#4
.2d1c	20 a1 3b	jsr $3ba1			jsr 	RSFree 						; close the just opened position.
.2d1f	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2d21	aa		tax				tax
.2d22	20 87 2c	jsr $2c87			jsr 	ScanForward
.2d25	60		rts				rts
.2d26					Command_Wend:
.2d26	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d28	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d2a	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2d2c	f0 05		beq $2d33			beq 	_isok
.2d2e	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2d30	20 18 15	jsr $1518		jsr	errorHandler
.2d33					_isok:
.2d33	a9 01		lda #$01			lda 	#1
.2d35	20 be 3b	jsr $3bbe			jsr 	RSLoadPosition				; go back until true
.2d38	a9 04		lda #$04			lda 	#4
.2d3a	20 a1 3b	jsr $3ba1			jsr 	RSFree 						; close the loop
.2d3d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2d3e					CommandClear:
.2d3e					XCommandClear:
.2d3e	98		tya				tya
.2d3f	48		pha				pha
.2d40	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2d43	85 33		sta $33				sta 	highMemory
.2d45	ad cd 0a	lda $0acd			lda 	endMemory+1
.2d48	85 34		sta $34				sta 	highMemory+1
.2d4a	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2d4d	85 2a		sta $2a				sta 	temp0
.2d4f	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d52	85 2b		sta $2b				sta 	temp0+1
.2d54					_CCFindEnd:
.2d54	a0 00		ldy #$00			ldy 	#0
.2d56	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d58	f0 0c		beq $2d66			beq 	_CCFoundEnd 				; offset zero is end.
.2d5a	18		clc				clc
.2d5b	65 2a		adc $2a				adc 	temp0 						; move to next line
.2d5d	85 2a		sta $2a				sta 	temp0
.2d5f	90 f3		bcc $2d54			bcc 	_CCFindEnd
.2d61	e6 2b		inc $2b				inc 	temp0+1
.2d63	4c 54 2d	jmp $2d54			jmp 	_CCFindEnd
.2d66					_CCFoundEnd:
.2d66	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2d68	85 35		sta $35				sta 	lowMemory
.2d6a	a5 2b		lda $2b				lda 	temp0+1
.2d6c	85 36		sta $36				sta 	lowMemory+1
.2d6e	18		clc				clc 								; put temp0+1 in endProgram
.2d6f	a5 2a		lda $2a				lda 	temp0
.2d71	69 01		adc #$01			adc 	#1
.2d73	8d ca 0a	sta $0aca			sta 	endProgram
.2d76	a5 2b		lda $2b				lda 	temp0+1
.2d78	69 00		adc #$00			adc 	#0
.2d7a	8d cb 0a	sta $0acb			sta 	endProgram+1
.2d7d	18		clc				clc 								; put a bit of space in.
.2d7e	a5 35		lda $35				lda 	lowMemory
.2d80	69 04		adc #$04			adc 	#4
.2d82	85 35		sta $35				sta 	lowMemory
.2d84	90 02		bcc $2d88			bcc 	_CCNoCarry
.2d86	e6 36		inc $36				inc 	lowMemory+1
.2d88					_CCNoCarry:
.2d88	20 71 3b	jsr $3b71			jsr 	RSReset 					; reset the return stack.
.2d8b	a2 06		ldx #$06		ldx	#6
.2d8d	20 e3 4a	jsr $4ae3		jsr	variableHandler
.2d90	20 ef 2b	jsr $2bef			jsr 	ScanProc 					; scan for procedures
.2d93	20 74 25	jsr $2574			jsr 	CommandRestore 				; do a restore
.2d96	68		pla				pla
.2d97	a8		tay				tay
.2d98	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d03					structIndent:
>0d03							.fill 	1
.2d99					CommandList:
.2d99	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2d9b	8e 03 0d	stx $0d03			stx 	structIndent
.2d9e	20 e4 3a	jsr $3ae4			jsr 	MInt32False
.2da1	e8		inx				inx
.2da2	20 e0 3a	jsr $3ae0			jsr 	MInt32True
.2da5	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2da7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2da9	f0 15		beq $2dc0			beq 	_CLEndLine
.2dab	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2dad	30 1b		bmi $2dca			bmi 	_CLDoListing 				; do the whole lot.
.2daf	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2db1	20 4c 34	jsr $344c			jsr 	EvaluateInteger
.2db4	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2db6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2db8	f0 06		beq $2dc0			beq 	_CLEndLine
.2dba	20 22 3a	jsr $3a22			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2dbd	4c ca 2d	jmp $2dca			jmp 	_CLDoListing 				; own e.g. list 1100
.2dc0					_CLEndLine:
.2dc0	c8		iny				iny 								; skip comma
.2dc1	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2dc3	30 05		bmi $2dca			bmi 	_CLDoListing
.2dc5	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2dc7	20 4c 34	jsr $344c			jsr 	EvaluateInteger				; get end
.2dca					_CLDoListing:
.2dca	20 6b 2f	jsr $2f6b			jsr 	ResetCodeAddress 			; back to the start.
.2dcd					_CLCheckLoop:
.2dcd	a2 02		ldx #$02		ldx	#2
.2dcf	20 f6 14	jsr $14f6		jsr	deviceHandler
.2dd2	a0 00		ldy #$00			ldy 	#0							; check end.
.2dd4	b1 28		lda ($28),y			lda 	(codePtr),y
.2dd6	f0 41		beq $2e19			beq 	_CLEnd
.2dd8	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2dda	20 1c 2e	jsr $2e1c			jsr 	CLCompareLineTOS
.2ddd	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2ddf	f0 28		beq $2e09			beq 	_CLNext
.2de1	e8		inx				inx
.2de2	20 1c 2e	jsr $2e1c			jsr 	CLCompareLineTOS 			; compare vs higher
.2de5	c9 01		cmp #$01			cmp 	#1
.2de7	f0 20		beq $2e09			beq 	_CLNext
.2de9	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2deb	20 3e 2e	jsr $2e3e			jsr 	CLStructureCheck
.2dee	ad 03 0d	lda $0d03			lda 	structIndent 				; indent level.
.2df1	10 02		bpl $2df5			bpl 	_CLPositive
.2df3	a9 00		lda #$00			lda 	#0
.2df5					_CLPositive:
.2df5	a2 04		ldx #$04		ldx	#4
.2df7	20 12 47	jsr $4712		jsr	tokeniserHandler
.2dfa	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2dfc	20 3e 2e	jsr $2e3e			jsr 	CLStructureCheck
.2dff	ad 03 0d	lda $0d03			lda 	structIndent
.2e02	10 05		bpl $2e09			bpl 	_CLNext
.2e04	a9 00		lda #$00			lda 	#0
.2e06	8d 03 0d	sta $0d03			sta 	structIndent
.2e09					_CLNext:
.2e09	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2e0b	b1 28		lda ($28),y			lda 	(codePtr),y
.2e0d	18		clc				clc
.2e0e	65 28		adc $28				adc 	codePtr
.2e10	85 28		sta $28				sta 	codePtr
.2e12	90 b9		bcc $2dcd			bcc 	_CLCheckLoop
.2e14	e6 29		inc $29				inc 	codePtr+1
.2e16	4c cd 2d	jmp $2dcd			jmp 	_CLCheckLoop
.2e19					_CLEnd:
.2e19	4c cd 3b	jmp $3bcd			jmp 	WarmStart 					; warm start after list.
.2e1c					CLCompareLineTOS:
.2e1c	a0 01		ldy #$01			ldy 	#1
.2e1e	b1 28		lda ($28),y			lda 	(codePtr),y
.2e20	55 98		eor $98,x			eor 	esInt0,x
.2e22	85 2a		sta $2a				sta 	temp0
.2e24	c8		iny				iny
.2e25	b1 28		lda ($28),y			lda 	(codePtr),y
.2e27	55 a0		eor $a0,x			eor 	esInt1,x
.2e29	05 2a		ora $2a				ora 	temp0
.2e2b	f0 10		beq $2e3d			beq 	_CLCLTExit
.2e2d	88		dey				dey
.2e2e	b1 28		lda ($28),y			lda 	(codePtr),y
.2e30	d5 98		cmp $98,x			cmp 	esInt0,x
.2e32	c8		iny				iny
.2e33	b1 28		lda ($28),y			lda 	(codePtr),y
.2e35	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2e37	a9 ff		lda #$ff			lda 	#255
.2e39	90 02		bcc $2e3d			bcc 	_CLCLTExit
.2e3b	a9 01		lda #$01			lda 	#1
.2e3d					_CLCLTExit:
.2e3d	60		rts				rts
.2e3e					CLStructureCheck:
.2e3e	85 2a		sta $2a				sta 	temp0
.2e40	a0 03		ldy #$03			ldy 	#3
.2e42					_CLSCLoop:
.2e42	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2e44	c8		iny				iny
.2e45	c9 80		cmp #$80			cmp 	#$80
.2e47	90 f9		bcc $2e42			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2e49	f0 28		beq $2e73			beq		_CLSCExit					; EOL return
.2e4b	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2e4d	90 1e		bcc $2e6d			bcc 	_CLSCSpecial
.2e4f	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2e51	90 ef		bcc $2e42			bcc 	_CLSCLoop
.2e53	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2e55	b0 eb		bcs $2e42			bcs 	_CLSCLoop
.2e57	aa		tax				tax 								; get adjustment
.2e58	bd 68 33	lda $3368,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2e5b	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2e5d	d0 e3		bne $2e42			bne 	_CLSCLoop
.2e5f	38		sec				sec
.2e60	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2e62	0a		asl a				asl 	a 							; double indent step
.2e63	18		clc				clc
.2e64	6d 03 0d	adc $0d03			adc 	structIndent 				; add to structure indent
.2e67	8d 03 0d	sta $0d03			sta 	structIndent
.2e6a	4c 42 2e	jmp $2e42			jmp 	_CLSCLoop
.2e6d					_CLSCSpecial:
.2e6d	20 ca 2c	jsr $2cca			jsr 	ScannerSkipSpecial
.2e70	4c 42 2e	jmp $2e42			jmp 	_CLSCLoop
.2e73					_CLSCExit:
.2e73	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2e74					CommandLoad:
.2e74	20 9c 2e	jsr $2e9c			jsr 	CLSParameters 					; get parameters for load.
.2e77	08		php				php
.2e78	a2 0e		ldx #$0e		ldx	#14
.2e7a	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e7d	28		plp				plp
.2e7e	b0 08		bcs $2e88			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2e80	20 3e 2d	jsr $2d3e			jsr 	CommandClear
.2e83	a2 04		ldx #$04		ldx	#4
.2e85	20 36 25	jsr $2536		jsr	interactionHandler
.2e88					_CLExit
.2e88	60		rts				rts
.2e89					CommandSave:
.2e89	20 9c 2e	jsr $2e9c			jsr 	CLSParameters					; get parameters for save
.2e8c	90 08		bcc $2e96			bcc 	_CSNoOverrideAddress
.2e8e	20 64 3b	jsr $3b64			jsr 	CheckComma 						; should be a comma.
.2e91	a2 02		ldx #$02			ldx 	#2
.2e93	20 4c 34	jsr $344c			jsr 	EvaluateInteger 				; get save end address.
.2e96					_CSNoOverrideAddress:
.2e96	a2 18		ldx #$18		ldx	#24
.2e98	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e9b	60		rts				rts
.2e9c					CLSParameters:
.2e9c	a2 00		ldx #$00			ldx 	#0 								; string
.2e9e	20 41 34	jsr $3441			jsr 	EvaluateString
.2ea1	e8		inx				inx 									; erase out +1 +2
.2ea2	20 e4 3a	jsr $3ae4			jsr 	MInt32False
.2ea5	e8		inx				inx
.2ea6	20 e4 3a	jsr $3ae4			jsr 	MInt32False
.2ea9	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2eac	85 99		sta $99				sta 	esInt0+1
.2eae	ad c9 0a	lda $0ac9			lda 	basePage+1
.2eb1	85 a1		sta $a1				sta 	esInt1+1
.2eb3	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2eb6	85 9a		sta $9a				sta 	esInt0+2
.2eb8	ad cb 0a	lda $0acb			lda 	endProgram+1
.2ebb	85 a2		sta $a2				sta 	esInt1+2
.2ebd	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2ebf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2ec1	d0 08		bne $2ecb			bne 	_CLSDefault
.2ec3	c8		iny				iny 									; skip comma
.2ec4	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2ec6	20 4c 34	jsr $344c			jsr 	EvaluateInteger
.2ec9	38		sec				sec
.2eca	60		rts				rts
.2ecb					_CLSDefault:
.2ecb	18		clc				clc
.2ecc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2ecd					Command_New:
.2ecd					Command_XNew:
.2ecd	20 6b 2f	jsr $2f6b			jsr 	ResetCodeAddress 			; point to first line
.2ed0	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2ed2	98		tya				tya
.2ed3	91 28		sta ($28),y			sta 	(codePtr),y
.2ed5	20 3e 2d	jsr $2d3e			jsr 	CommandClear 				; clear everything down.
.2ed8	4c 94 28	jmp $2894			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d04					breakCounter:
>0d04								.fill 	1
.0d05					breakIncrement:
>0d05								.fill 	1
.2edb					Command_Run:
.2edb					XCommand_Run:
.2edb	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2edd	9a		txs				txs
.2ede	20 65 2f	jsr $2f65			jsr 	BreakOn 					; turn break on
.2ee1	20 3e 2d	jsr $2d3e			jsr 	CommandClear 				; clear everything.
.2ee4	20 6b 2f	jsr $2f6b			jsr 	ResetCodeAddress 			; back to the start.
.2ee7					Command_RunFrom:
.2ee7	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2ee9					CRNextInstruction:
.2ee9	64 3a		stz $3a				stz 	softMemAlloc+1
.2eeb	ad 04 0d	lda $0d04			lda 	breakCounter 				; check for break.
.2eee	6d 05 0d	adc $0d05			adc 	breakIncrement
.2ef1	8d 04 0d	sta $0d04			sta 	breakCounter
.2ef4	90 05		bcc $2efb			bcc 	_CRNoChecks
.2ef6	a2 02		ldx #$02		ldx	#2
.2ef8	20 f6 14	jsr $14f6		jsr	deviceHandler
.2efb					_CRNoChecks
.2efb	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2efd	10 1c		bpl $2f1b			bpl 	_CRNotToken
.2eff	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2f01	b0 0c		bcs $2f0f			bcs 	_CRExecute
.2f03	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2f05	b0 71		bcs $2f78			bcs 	Unimplemented
.2f07	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2f09	b0 04		bcs $2f0f			bcs 	_CRExecute
.2f0b	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2f0d	b0 16		bcs $2f25			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2f0f					_CRExecute:
.2f0f	c8		iny				iny 								; consume it.
.2f10	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2f11	aa		tax				tax
.2f12	20 18 2f	jsr $2f18			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2f15	4c e9 2e	jmp $2ee9			jmp 	CRNextInstruction
.2f18					_CRRunRoutine:
.2f18	7c 82 2f	jmp ($2f82,x)			jmp 	(Group0Vectors,x)
.2f1b					_CRNotToken:
.2f1b	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2f1d	b0 59		bcs $2f78			bcs 	Unimplemented
.2f1f					_CRDefaultLet:
.2f1f	20 c7 27	jsr $27c7			jsr 	CommandLet 					; do the default, LET
.2f22	4c e9 2e	jmp $2ee9			jmp 	CRNextInstruction
.2f25					_CRCheckIndirect:
.2f25	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2f27	f0 0a		beq $2f33			beq 	_CRAndCommand
.2f29	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2f2b	f0 f2		beq $2f1f			beq 	_CRDefaultLet
.2f2d	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2f2f	f0 ee		beq $2f1f			beq 	_CRDefaultLet
.2f31	d0 45		bne $2f78			bne 	Unimplemented
.2f33					_CRAndCommand:
.2f33	c8		iny				iny 								; skip over the AND token
.2f34	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2f36	20 50 2f	jsr $2f50			jsr 	CommandAssembler 			; do the assembler command
.2f39	4c e9 2e	jmp $2ee9			jmp 	CRNextInstruction 			; and loop round.
.2f3c					CommandShift1:
.2f3c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2f3e	10 38		bpl $2f78			bpl 	Unimplemented 				; we have an error as this should not happen.
.2f40	c8		iny				iny 								; advance over it.
.2f41	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2f43	b0 0b		bcs $2f50			bcs 	CommandAssembler
.2f45	0a		asl a				asl 	a 							; double into X
.2f46	aa		tax				tax
.2f47	7c 48 30	jmp ($3048,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2f4a					CommandShift2:
.2f4a	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2f4c	20 69 18	jsr $1869		jsr	extensionHandler
.2f4f	60		rts				rts
.2f50					CommandAssembler:
.2f50	a2 02		ldx #$02		ldx	#2
.2f52	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2f55	60		rts				rts
.2f56					CommandAssemblerLabel:
.2f56	a2 04		ldx #$04		ldx	#4
.2f58	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2f5b	60		rts				rts
.2f5c					CommandColon:
.2f5c	60		rts				rts
.2f5d					CommandBreak:
.2f5d	20 4a 34	jsr $344a			jsr 	EvaluateRootInteger
.2f60	20 0b 3b	jsr $3b0b			jsr 	MInt32Zero
.2f63	f0 02		beq $2f67			beq 	BreakOff
.2f65					BreakOn:
.2f65	a2 08		ldx #$08			ldx 	#8
.2f67					BreakOff:
.2f67	8e 05 0d	stx $0d05			stx 	breakIncrement
.2f6a	60		rts				rts
.2f6b					ResetCodeAddress:
.2f6b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2f6e	85 28		sta $28				sta 	codePtr
.2f70	ad c9 0a	lda $0ac9			lda 	basePage+1
.2f73	85 29		sta $29				sta 	codePtr+1
.2f75	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2f77	60		rts				rts
.2f78					Unimplemented:
.2f78	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2f7a	20 18 15	jsr $1518		jsr	errorHandler
.2f7d					TKErr01:
.2f7d					TKErr02:
.2f7d					TKErr03:
.2f7d					TKErr04:
.2f7d					TKErr05:
.2f7d					TKErr06:
.2f7d					TKErr07:
.2f7d					TKErr08:
.2f7d					TKErr09:
.2f7d					TKErr10:
.2f7d					TKErr11:
.2f7d					TKErr12:
.2f7d					TKErr13:
.2f7d					TKErr14:
.2f7d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2f7f	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2f82					Group0Vectors:
>2f82	9a 28					.word	AdvanceNextLine          ; $80 [[eol]]
>2f84	3c 2f					.word	CommandShift1            ; $81 [[sh1]]
>2f86	4a 2f					.word	CommandShift2            ; $82 [[sh2]]
>2f88	7d 2f					.word	TKErr09                  ; $83 [[sh3]]
>2f8a	7d 2f					.word	TKErr10                  ; $84 [[fpc]]
>2f8c	7d 2f					.word	TKErr08                  ; $85 [[str]]
>2f8e	31 31					.word	AndHandler               ; $86 and
>2f90	1e 31					.word	OrHandler                ; $87 or
>2f92	0b 31					.word	XorHandler               ; $88 xor
>2f94	53 32					.word	CompareGreaterEq         ; $89 >=
>2f96	5d 32					.word	CompareLessEq            ; $8a <=
>2f98	3f 32					.word	CompareGreater           ; $8b >
>2f9a	35 32					.word	CompareLess              ; $8c <
>2f9c	2b 32					.word	CompareEquals            ; $8d =
>2f9e	49 32					.word	CompareNotEquals         ; $8e <>
>2fa0	9c 30					.word	AddHandler               ; $8f +
>2fa2	bf 30					.word	SubHandler               ; $90 -
>2fa4	57 31					.word	ShrHandler               ; $91 >>
>2fa6	44 31					.word	ShlHandler               ; $92 <<
>2fa8	d2 30					.word	MulHandler               ; $93 *
>2faa	e5 30					.word	DivHandler               ; $94 /
>2fac	f8 30					.word	ModHandler               ; $95 mod
>2fae	90 31					.word	PowerHandler             ; $96 ^
>2fb0	6a 31					.word	WordRefHandler           ; $97 !
>2fb2	7d 31					.word	ByteRefHandler           ; $98 ?
>2fb4	59 2c					.word	Command_Repeat           ; $99 repeat
>2fb6	03 2d					.word	Command_While            ; $9a while
>2fb8	ae 28					.word	Command_FOR              ; $9b for
>2fba	bd 29					.word	CommandIf                ; $9c if
>2fbc	7d 2f					.word	TKErr04                  ; $9d defproc
>2fbe	66 2c					.word	Command_Until            ; $9e until
>2fc0	26 2d					.word	Command_Wend             ; $9f wend
>2fc2	0f 29					.word	Command_NEXT             ; $a0 next
>2fc4	7d 2f					.word	TKErr06                  ; $a1 then
>2fc6	f8 29					.word	Command_ENDIF            ; $a2 endif
>2fc8	68 2b					.word	ReturnProc               ; $a3 endproc
>2fca	b7 33					.word	UnaryParenthesis         ; $a4 (
>2fcc	99 35					.word	UnaryLen                 ; $a5 len(
>2fce	dd 35					.word	UnarySgn                 ; $a6 sgn(
>2fd0	c6 35					.word	UnaryAbs                 ; $a7 abs(
>2fd2	36 36					.word	Unary_Random             ; $a8 random(
>2fd4	80 36					.word	Unary_Page               ; $a9 page
>2fd6	e0 3a					.word	MInt32True               ; $aa true
>2fd8	e4 3a					.word	MInt32False              ; $ab false
>2fda	4b 36					.word	Unary_Min                ; $ac min(
>2fdc	4f 36					.word	Unary_Max                ; $ad max(
>2fde	58 37					.word	UnarySys                 ; $ae sys(
>2fe0	01 37					.word	UnaryTimer               ; $af timer(
>2fe2	16 35					.word	EventFunction            ; $b0 event(
>2fe4	2a 37					.word	UnaryGet                 ; $b1 get(
>2fe6	1a 37					.word	UnaryInkey               ; $b2 inkey(
>2fe8	d1 36					.word	UnaryAlloc               ; $b3 alloc(
>2fea	91 37					.word	ExecChr                  ; $b4 chr$(
>2fec	c1 37					.word	ExecLeft                 ; $b5 left$(
>2fee	de 37					.word	ExecMid                  ; $b6 mid$(
>2ff0	06 38					.word	ExecRight                ; $b7 right$(
>2ff2	98 34					.word	Event_Str                ; $b8 str$(
>2ff4	c7 34					.word	UnaryVal                 ; $b9 val(
>2ff6	f4 35					.word	UnaryPeek                ; $ba peek(
>2ff8	fa 35					.word	UnaryDeek                ; $bb deek(
>2ffa	00 36					.word	UnaryLeek                ; $bc leek(
>2ffc	b7 35					.word	UnaryAsc                 ; $bd asc(
>2ffe	ab 36					.word	UnaryIntToFloat          ; $be int(
>3000	be 36					.word	UnaryFloatToInt          ; $bf float(
>3002	ca 34					.word	UnaryIsVal               ; $c0 isval(
>3004	a8 37					.word	ExecUpper                ; $c1 upper$(
>3006	a5 37					.word	ExecLower                ; $c2 lower$(
>3008	8e 36					.word	UnaryReference           ; $c3 @
>300a	a4 36					.word	UnaryComplement          ; $c4 ~
>300c	a1 36					.word	UnaryHexMarker           ; $c5 &
>300e	43 37					.word	UnaryGetString           ; $c6 get$(
>3010	49 37					.word	UnaryInkeyString         ; $c7 inkey$(
>3012	80 37					.word	UnaryMem                 ; $c8 mem
>3014	7d 2f					.word	TKErr01                  ; $c9 )
>3016	5c 2f					.word	CommandColon             ; $ca :
>3018	7d 2f					.word	TKErr02                  ; $cb ,
>301a	7d 2f					.word	TKErr03                  ; $cc ;
>301c	82 28					.word	Command_Rem2             ; $cd '
>301e	7d 2f					.word	TKErr07                  ; $ce to
>3020	7d 2f					.word	TKErr05                  ; $cf step
>3022	fb 2a					.word	CallProc                 ; $d0 proc
>3024	f9 29					.word	CommandLocal             ; $d1 local
>3026	b9 27					.word	Command_Dim              ; $d2 dim
>3028	82 28					.word	Command_Rem              ; $d3 rem
>302a	c7 27					.word	CommandLet               ; $d4 let
>302c	03 26					.word	Command_Input            ; $d5 input
>302e	f2 29					.word	Command_ELSE             ; $d6 else
>3030	8a 27					.word	Command_VDU              ; $d7 vdu
>3032	b9 26					.word	Command_Print            ; $d8 print
>3034	6b 25					.word	CommandData              ; $d9 data
>3036	7d 2f					.word	TKErr13                  ; $da image
>3038	7d 2f					.word	TKErr12                  ; $db at
>303a	7d 2f					.word	TKErr14                  ; $dc flip
>303c	ab 27					.word	Command_Assert           ; $dd assert
>303e	45 28					.word	Command_Poke             ; $de poke
>3040	49 28					.word	Command_Doke             ; $df doke
>3042	4d 28					.word	Command_Loke             ; $e0 loke
>3044	5a 27					.word	Command_Ink              ; $e1 ink
>3046	65 27					.word	Command_Paper            ; $e2 paper
>3048	54 27					.word	Command_CLS              ; $e3 cls
>304a	70 27					.word	Command_Locate           ; $e4 locate
>304c	56 2f					.word	CommandAssemblerLabel    ; $e5 .
>304e	78 2f					.word	Unimplemented            ; $e6 from
>3050	7d 2f					.word	TKErr11                  ; $e7 #
>3052	3e 2d					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.3054					Group1Vectors:
>3054	74 2e					.word	CommandLoad              ; $86 load
>3056	89 2e					.word	CommandSave              ; $87 save
>3058	99 2d					.word	CommandList              ; $88 list
>305a	cd 2e					.word	Command_New              ; $89 new
>305c	5d 2f					.word	CommandBreak             ; $8a break
>305e	db 2e					.word	Command_Run              ; $8b run
>3060	40 25					.word	CommandRead              ; $8c read
>3062	74 25					.word	CommandRestore           ; $8d restore
>3064	94 28					.word	CommandEnd               ; $8e end
>3066	8f 28					.word	CommandStop              ; $8f stop
>3068	97 28					.word	CommandXemu              ; $90 xemu
>306a	d1 25					.word	CommandGOTO              ; $91 goto
>306c	a6 25					.word	CommandGOSUB             ; $92 gosub
>306e	b9 25					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.3070					BinaryProcess:
.3070	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.3072	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.3074	0a		asl a				asl 	a
.3075	30 0e		bmi $3085			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.3077	18		clc				clc 								; return CC for integer
.3078	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.307a	f0 08		beq $3084			beq 	_BPExit 					; if both integer then return with CC.
.307c	20 8a 30	jsr $308a			jsr 	BPMakeBothFloat 			; make both float
.307f	a9 01		lda #$01			lda 	#$01 						; set result type to float
.3081	95 90		sta $90,x			sta 	esType,x
.3083	38		sec				sec 								; and return with carry set.
.3084					_BPExit:
.3084	60		rts				rts
.3085					_BPStringType:
.3085	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3087	20 18 15	jsr $1518		jsr	errorHandler
.308a					BPMakeBothFloat:
.308a	e8		inx				inx
.308b	20 8f 30	jsr $308f			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.308e	ca		dex				dex
.308f					BPMakeFloat:
.308f	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.3091	4a		lsr a				lsr 	a
.3092	b0 07		bcs $309b			bcs 	_BPIsFloat 					; already a float if set.
.3094	8a		txa				txa
.3095	a2 1c		ldx #$1c		ldx	#28
.3097	20 4a 23	jsr $234a		jsr	floatingpointHandler
.309a	aa		tax				tax
.309b					_BPIsFloat:
.309b	60		rts				rts
.309c					AddHandler:
.309c	20 6d 32	jsr $326d			jsr 	DereferenceTwo 				; dereference top two on stack.
.309f	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.30a1	35 91		and $91,x			and 	esType+1,x
.30a3	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.30a5	d0 10		bne $30b7			bne 	_AHStringConcat				; concatenate strings.
.30a7	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.30aa	b0 03		bcs $30af			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30ac	4c c8 39	jmp $39c8			jmp 	MInt32Add 							; else do it as integer.
.30af					_IsFPOperation:
.30af	8a		txa				txa 								; call the relevant fp routine
.30b0	a2 04		ldx #$04		ldx	#4
.30b2	20 4a 23	jsr $234a		jsr	floatingpointHandler
.30b5	aa		tax				tax
.30b6	60		rts				rts
.30b7					_AHStringConcat:
.30b7	8a		txa				txa 								; handled by the string module.
.30b8	a2 06		ldx #$06		ldx	#6
.30ba	20 8f 3e	jsr $3e8f		jsr	stringHandler
.30bd	aa		tax				tax
.30be	60		rts				rts
.30bf					SubHandler:
.30bf	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.30c2	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.30c5	b0 03		bcs $30ca			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30c7	4c e2 39	jmp $39e2			jmp 	MInt32Sub 							; else do it as integer.
.30ca					_IsFPOperation:
.30ca	8a		txa				txa 								; call the relevant fp routine
.30cb	a2 12		ldx #$12		ldx	#18
.30cd	20 4a 23	jsr $234a		jsr	floatingpointHandler
.30d0	aa		tax				tax
.30d1	60		rts				rts
.30d2					MulHandler:
.30d2	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.30d5	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.30d8	b0 03		bcs $30dd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30da	4c fc 39	jmp $39fc			jmp 	MInt32Multiply 							; else do it as integer.
.30dd					_IsFPOperation:
.30dd	8a		txa				txa 								; call the relevant fp routine
.30de	a2 0c		ldx #$0c		ldx	#12
.30e0	20 4a 23	jsr $234a		jsr	floatingpointHandler
.30e3	aa		tax				tax
.30e4	60		rts				rts
.30e5					DivHandler:
.30e5	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.30e8	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.30eb	b0 03		bcs $30f0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30ed	4c b9 38	jmp $38b9			jmp 	MInt32SDivide 							; else do it as integer.
.30f0					_IsFPOperation:
.30f0	8a		txa				txa 								; call the relevant fp routine
.30f1	a2 08		ldx #$08		ldx	#8
.30f3	20 4a 23	jsr $234a		jsr	floatingpointHandler
.30f6	aa		tax				tax
.30f7	60		rts				rts
.30f8					ModHandler:
.30f8	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.30fb	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.30fe	b0 03		bcs $3103			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3100	4c 37 39	jmp $3937			jmp 	MInt32Modulus 							; else do it as integer.
.3103					_IsFPOperation:
.3103	8a		txa				txa 								; call the relevant fp routine
.3104	a2 0a		ldx #$0a		ldx	#10
.3106	20 4a 23	jsr $234a		jsr	floatingpointHandler
.3109	aa		tax				tax
.310a	60		rts				rts
.310b					XorHandler:
.310b	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.310e	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.3111	b0 03		bcs $3116			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3113	4c 6b 38	jmp $386b			jmp 	MInt32Xor 							; else do it as integer.
.3116					_IsFPOperation:
.3116	8a		txa				txa 								; call the relevant fp routine
.3117	a2 0a		ldx #$0a		ldx	#10
.3119	20 4a 23	jsr $234a		jsr	floatingpointHandler
.311c	aa		tax				tax
.311d	60		rts				rts
.311e					OrHandler:
.311e	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.3121	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.3124	b0 03		bcs $3129			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3126	4c 52 38	jmp $3852			jmp 	MInt32Or 							; else do it as integer.
.3129					_IsFPOperation:
.3129	8a		txa				txa 								; call the relevant fp routine
.312a	a2 0a		ldx #$0a		ldx	#10
.312c	20 4a 23	jsr $234a		jsr	floatingpointHandler
.312f	aa		tax				tax
.3130	60		rts				rts
.3131					AndHandler:
.3131	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.3134	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.3137	b0 03		bcs $313c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3139	4c 39 38	jmp $3839			jmp 	MInt32And 							; else do it as integer.
.313c					_IsFPOperation:
.313c	8a		txa				txa 								; call the relevant fp routine
.313d	a2 0a		ldx #$0a		ldx	#10
.313f	20 4a 23	jsr $234a		jsr	floatingpointHandler
.3142	aa		tax				tax
.3143	60		rts				rts
.3144					ShlHandler:
.3144	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.3147	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.314a	b0 03		bcs $314f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.314c	4c c5 31	jmp $31c5			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.314f					_IsFPOperation:
.314f	8a		txa				txa 								; call the relevant fp routine
.3150	a2 0a		ldx #$0a		ldx	#10
.3152	20 4a 23	jsr $234a		jsr	floatingpointHandler
.3155	aa		tax				tax
.3156	60		rts				rts
.3157					ShrHandler:
.3157	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.315a	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.315d	b0 03		bcs $3162			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.315f	4c c8 31	jmp $31c8			jmp 	MInt32ShiftRightX 							; else do it as integer.
.3162					_IsFPOperation:
.3162	8a		txa				txa 								; call the relevant fp routine
.3163	a2 0a		ldx #$0a		ldx	#10
.3165	20 4a 23	jsr $234a		jsr	floatingpointHandler
.3168	aa		tax				tax
.3169	60		rts				rts
.316a					WordRefHandler:
.316a	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.316d	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.3170	b0 03		bcs $3175			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3172	4c b7 31	jmp $31b7			jmp 	MInt32WordIndirect 							; else do it as integer.
.3175					_IsFPOperation:
.3175	8a		txa				txa 								; call the relevant fp routine
.3176	a2 0a		ldx #$0a		ldx	#10
.3178	20 4a 23	jsr $234a		jsr	floatingpointHandler
.317b	aa		tax				tax
.317c	60		rts				rts
.317d					ByteRefHandler:
.317d	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.3180	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.3183	b0 03		bcs $3188			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3185	4c bb 31	jmp $31bb			jmp 	MInt32ByteIndirect 							; else do it as integer.
.3188					_IsFPOperation:
.3188	8a		txa				txa 								; call the relevant fp routine
.3189	a2 0a		ldx #$0a		ldx	#10
.318b	20 4a 23	jsr $234a		jsr	floatingpointHandler
.318e	aa		tax				tax
.318f	60		rts				rts
.3190					PowerHandler:
.3190	20 6d 32	jsr $326d			jsr 	DereferenceTwo
.3193	20 70 30	jsr $3070			jsr 	BinaryProcess 				; check to see if either is float
.3196	b0 03		bcs $319b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3198	4c a3 31	jmp $31a3			jmp 	PowerInteger 							; else do it as integer.
.319b					_IsFPOperation:
.319b	8a		txa				txa 								; call the relevant fp routine
.319c	a2 18		ldx #$18		ldx	#24
.319e	20 4a 23	jsr $234a		jsr	floatingpointHandler
.31a1	aa		tax				tax
.31a2	60		rts				rts
.31a3					PowerInteger:
.31a3	20 8a 30	jsr $308a			jsr 	BPMakeBothFloat				; make them float.
.31a6	8a		txa				txa
.31a7	a2 18		ldx #$18		ldx	#24
.31a9	20 4a 23	jsr $234a		jsr	floatingpointHandler
.31ac	a2 14		ldx #$14		ldx	#20
.31ae	20 4a 23	jsr $234a		jsr	floatingpointHandler
.31b1	aa		tax				tax
.31b2	a9 00		lda #$00			lda 	#0 							; make type integer
.31b4	95 90		sta $90,x			sta 	esType,x
.31b6	60		rts				rts
.31b7					Mint32WordIndirect:
.31b7	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.31b9	d0 02		bne $31bd			bne 	Min32Indirect
.31bb					Mint32ByteIndirect:
.31bb	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.31bd					Min32Indirect:
.31bd	48		pha				pha 								; save the indirection
.31be	20 c8 39	jsr $39c8			jsr 	MInt32Add 					; add a!b a?b
.31c1	68		pla				pla 								; and set the type to reference.
.31c2	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.31c4	60		rts				rts
.31c5					Mint32ShiftLeftX:
.31c5	18		clc				clc 								; CC shift left
.31c6	90 01		bcc $31c9			bcc 	Mint32Shift
.31c8					Mint32ShiftRightX:
.31c8	38		sec				sec 								; CS shift right
.31c9					Mint32Shift:
.31c9	08		php				php 								; save carry flag on stack.
.31ca	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.31cc	15 a9		ora $a9,x			ora 	esInt2+1,x
.31ce	15 b1		ora $b1,x			ora 	esInt3+1,x
.31d0	d0 1e		bne $31f0			bne 	_MShiftZero
.31d2	b5 99		lda $99,x			lda 	esInt0+1,x
.31d4	c9 20		cmp #$20			cmp 	#32
.31d6	b0 18		bcs $31f0			bcs 	_MShiftZero
.31d8					_MShiftLoop:
.31d8	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.31da	f0 12		beq $31ee			beq 	_MShiftExit
.31dc	d6 99		dec $99,x			dec 	esInt0+1,x
.31de	28		plp				plp 								; restore and save carry
.31df	08		php				php
.31e0	90 06		bcc $31e8			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.31e2	20 02 3b	jsr $3b02			jsr 	Mint32ShiftRight
.31e5	4c d8 31	jmp $31d8			jmp 	_MShiftLoop
.31e8					_MShiftLeft:
.31e8	20 f9 3a	jsr $3af9			jsr 	Mint32ShiftLeft
.31eb	4c d8 31	jmp $31d8			jmp 	_MShiftLoop
.31ee					_MShiftExit:
.31ee	28		plp				plp	 								; throw saved carry and exit
.31ef	60		rts				rts
.31f0					_MShiftZero:
.31f0	4c e4 3a	jmp $3ae4			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.31f3					PerformComparison:
.31f3	20 6d 32	jsr $326d			jsr 	DereferenceTwo 				; make both values.
.31f6	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.31f8	35 91		and $91,x			and 	esType+1,x
.31fa	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.31fb	30 1d		bmi $321a			bmi 	_PCIsString
.31fd	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.31ff	15 91		ora $91,x			ora 	esType+1,x
.3201	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3202	30 22		bmi $3226			bmi 	_PCError
.3204	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.3206	f0 0f		beq $3217			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3208	20 8a 30	jsr $308a			jsr 	BPMakeBothFloat 			; make both float
.320b	8a		txa				txa
.320c	a2 06		ldx #$06		ldx	#6
.320e	20 4a 23	jsr $234a		jsr	floatingpointHandler
.3211	86 32		stx $32				stx 	tempShort 					; save result
.3213	aa		tax				tax
.3214	a5 32		lda $32				lda 	tempShort
.3216	60		rts				rts
.3217					_PCIsInteger:
.3217	4c 84 38	jmp $3884			jmp 	MInt32Compare
.321a					_PCIsString:
.321a	8a		txa				txa 								; A has SP
.321b	a2 0a		ldx #$0a		ldx	#10
.321d	20 8f 3e	jsr $3e8f		jsr	stringHandler
.3220	86 32		stx $32				stx 	tempShort 					; save result
.3222	aa		tax				tax 								; put SP back in X and get result.
.3223	a5 32		lda $32				lda 	tempShort
.3225	60		rts				rts
.3226					_PCError:
.3226	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3228	20 18 15	jsr $1518		jsr	errorHandler
.322b					CompareEquals:
.322b	20 f3 31	jsr $31f3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.322e	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3230	f0 35		beq $3267			beq  	CompareTrue
.3232	4c 6a 32	jmp $326a			jmp 	CompareFalse
.3235					CompareLess:
.3235	20 f3 31	jsr $31f3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3238	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.323a	f0 2b		beq $3267			beq  	CompareTrue
.323c	4c 6a 32	jmp $326a			jmp 	CompareFalse
.323f					CompareGreater:
.323f	20 f3 31	jsr $31f3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3242	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3244	f0 21		beq $3267			beq  	CompareTrue
.3246	4c 6a 32	jmp $326a			jmp 	CompareFalse
.3249					CompareNotEquals:
.3249	20 f3 31	jsr $31f3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.324c	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.324e	d0 17		bne $3267			bne  	CompareTrue
.3250	4c 6a 32	jmp $326a			jmp 	CompareFalse
.3253					CompareGreaterEq:
.3253	20 f3 31	jsr $31f3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3256	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3258	d0 0d		bne $3267			bne  	CompareTrue
.325a	4c 6a 32	jmp $326a			jmp 	CompareFalse
.325d					CompareLessEq:
.325d	20 f3 31	jsr $31f3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3260	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3262	d0 03		bne $3267			bne  	CompareTrue
.3264	4c 6a 32	jmp $326a			jmp 	CompareFalse
.3267					CompareTrue:
.3267	4c e0 3a	jmp $3ae0			jmp 	MInt32True
.326a					CompareFalse:
.326a	4c e4 3a	jmp $3ae4			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.326d					DereferenceTwo:
.326d	e8		inx				inx
.326e	20 72 32	jsr $3272			jsr 	DereferenceOne
.3271	ca		dex				dex
.3272					DereferenceOne:
.3272	b5 90		lda $90,x			lda 	esType,x
.3274	10 3d		bpl $32b3			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.3276	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.3277	b0 3b		bcs $32b4			bcs 	_DRFloatDeReference
.3279	98		tya				tya
.327a	48		pha				pha
.327b	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.327d	85 2a		sta $2a				sta 	temp0
.327f	b5 a0		lda $a0,x			lda 	esInt1,x
.3281	85 2b		sta $2b				sta 	temp0+1
.3283	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.3285	95 a0		sta $a0,x			sta 	esInt1,x
.3287	95 a8		sta $a8,x			sta 	esInt2,x
.3289	95 b0		sta $b0,x			sta 	esInt3,x
.328b	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.328d	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.328f	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.3290	30 0d		bmi $329f			bmi 	_DeRefString 				; string, 2 bytes only
.3292	d0 11		bne $32a5			bne 	_DeRefByte 					; byte 1 byte only
.3294					_DeRefLong:
.3294	a0 03		ldy #$03			ldy 	#3
.3296	b1 2a		lda ($2a),y			lda 	(temp0),y
.3298	95 b0		sta $b0,x			sta 	esInt3,x
.329a	88		dey				dey
.329b	b1 2a		lda ($2a),y			lda 	(temp0),y
.329d	95 a8		sta $a8,x			sta 	esInt2,x
.329f					_DeRefString:
.329f	a0 01		ldy #$01			ldy 	#1
.32a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.32a3	95 a0		sta $a0,x			sta 	esInt1,x
.32a5					_DeRefByte:
.32a5	a0 00		ldy #$00			ldy 	#0
.32a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.32a9	95 98		sta $98,x			sta 	esInt0,x
.32ab	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.32ad	29 40		and #$40			and 	#$40
.32af	95 90		sta $90,x			sta 	esType,x
.32b1	68		pla				pla
.32b2	a8		tay				tay
.32b3					_DRNotReference
.32b3	60		rts				rts
.32b4					_DRFloatDereference:
.32b4	20 3c 28	jsr $283c			jsr 	TOSToTemp0 					; address to deref in temp0
.32b7	8a		txa				txa
.32b8	a2 1e		ldx #$1e		ldx	#30
.32ba	20 4a 23	jsr $234a		jsr	floatingpointHandler
.32bd	aa		tax				tax
.32be	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.32c0	95 90		sta $90,x			sta 	esType,x
.32c2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.32c3					EvaluateLevel:
.32c3	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.32c5	b0 1e		bcs $32e5			bcs 	_ELStack
.32c7	48		pha				pha 								; save precedence level.
.32c8	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.32ca	95 98		sta $98,x			sta 	esInt0,x
.32cc	95 a0		sta $a0,x			sta 	esInt1,x
.32ce	95 a8		sta $a8,x			sta 	esInt2,x
.32d0	95 b0		sta $b0,x			sta 	esInt3,x
.32d2	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.32d4	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.32d6	30 26		bmi $32fe			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.32d8	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.32d9	30 0f		bmi $32ea			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.32db	8a		txa				txa 								; stack level in X
.32dc	a2 02		ldx #$02		ldx	#2
.32de	20 e3 4a	jsr $4ae3		jsr	variableHandler
.32e1	aa		tax				tax
.32e2	4c 27 33	jmp $3327			jmp		_ELHasTerm
.32e5					_ELStack:
.32e5	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.32e7	20 18 15	jsr $1518		jsr	errorHandler
.32ea					_ELIsConstant:
.32ea	4a		lsr a				lsr 	a 							; get the value back
.32eb	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.32ed	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.32ef					_ELCheckNext:
.32ef	c8		iny				iny 								; look at next
.32f0	b1 28		lda ($28),y			lda 	(codePtr),y
.32f2	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.32f4	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.32f6	b0 2f		bcs $3327			bcs 	_ELHasTerm 					; done getting the constant.
.32f8	20 c0 33	jsr $33c0			jsr 	ELShiftByteIn 				; shift byte into position.
.32fb	4c ef 32	jmp $32ef			jmp 	_ELCheckNext
.32fe					_ELIsToken:
.32fe	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3300	f0 0f		beq $3311			beq 	_ELIsString
.3302	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3304	d0 5f		bne $3365			bne 	_ELCheckUnary
.3306	8a		txa				txa 								; put X into A
.3307	c8		iny				iny 								; skip over the float marker
.3308	a2 1a		ldx #$1a		ldx	#26
.330a	20 4a 23	jsr $234a		jsr	floatingpointHandler
.330d	aa		tax				tax 								; restore X
.330e	4c 27 33	jmp $3327			jmp 	_ELHasTerm
.3311					_ELIsString:
.3311	98		tya				tya 								; address of string is codePtr+y+1
.3312	38		sec				sec
.3313	65 28		adc $28				adc 	codePtr
.3315	95 98		sta $98,x			sta 	esInt0,x
.3317	a5 29		lda $29				lda 	codePtr+1
.3319	69 00		adc #$00			adc 	#0
.331b	95 a0		sta $a0,x			sta 	esInt1,x
.331d	a9 40		lda #$40			lda 	#$40 						; set type to string value
.331f	95 90		sta $90,x			sta 	esType,x
.3321	c8		iny				iny 								; skip over string.
.3322	98		tya				tya
.3323	38		sec				sec									; +1 for the length itself.
.3324	71 28		adc ($28),y			adc 	(codePtr),y
.3326	a8		tay				tay 								; and fall through to term loop code.
.3327					_ELHasTerm:
.3327	b1 28		lda ($28),y			lda 	(codePtr),y
.3329	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.332b	90 04		bcc $3331			bcc 	_ELPopExit
.332d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.332f	90 02		bcc $3333			bcc 	_ELHasBinaryTerm
.3331					_ELPopExit:
.3331	68		pla				pla
.3332					_ELExit:
.3332	60		rts				rts
.3333					_ELHasBinaryTerm:
.3333	84 32		sty $32				sty 	tempShort 					; save position
.3335	a8		tay				tay 								; use token as an index and get the precedence.
.3336	b9 68 33	lda $3368,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3339	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.333b	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.333d	68		pla				pla 								; restore current level.
.333e	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3340	b0 f0		bcs $3332			bcs 	_ELExit
.3342	48		pha				pha 								; save current level back on the stack.
.3343	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.3345	48		pha				pha
.3346	c8		iny				iny
.3347	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3348	a5 32		lda $32				lda 	tempShort
.334a	20 c3 32	jsr $32c3			jsr 	EvaluateLevel
.334d	ca		dex				dex
.334e	68		pla				pla 								; get the operator back out.
.334f					_ELExecuteA:
.334f	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3351	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3352	aa		tax				tax
.3353	bd 82 2f	lda $2f82,x			lda 	Group0Vectors,x
.3356	85 2a		sta $2a				sta 	temp0
.3358	bd 83 2f	lda $2f83,x			lda 	Group0Vectors+1,x
.335b	85 2b		sta $2b				sta 	temp0+1
.335d	a6 32		ldx $32				ldx 	tempShort
.335f	20 ac 33	jsr $33ac			jsr 	_ELCallTemp0
.3362	4c 27 33	jmp $3327			jmp 	_ELHasTerm 					; and loop back round.
.3365					_ELCheckUnary:
.3365	c8		iny				iny 								; skip over token.
.3366	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3368	f0 19		beq $3383			beq 	_ELMinus
.336a	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.336c	f0 2c		beq $339a			beq 	_ELIndirect
.336e	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3370	f0 28		beq $339a			beq 	_ELIndirect
.3372	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.3374	f0 39		beq $33af			beq 	_ELExtension
.3376	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.3378	90 04		bcc $337e			bcc 	_ELUSyntax
.337a	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.337c	90 d1		bcc $334f			bcc 	_ELExecuteA 				; if so do that token.
.337e					_ELUSyntax:
.337e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3380	20 18 15	jsr $1518		jsr	errorHandler
.3383					_ELMinus:
.3383	20 15 34	jsr $3415			jsr 	EvaluateNumericTerm 		; get a number to negate.
.3386	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.3388	f0 0a		beq $3394			beq 	_ELMinusInteger
.338a	8a		txa				txa
.338b	a2 0e		ldx #$0e		ldx	#14
.338d	20 4a 23	jsr $234a		jsr	floatingpointHandler
.3390	aa		tax				tax
.3391	4c 27 33	jmp $3327			jmp 	_ELHasTerm
.3394					_ELMinusInteger:
.3394	20 9e 3a	jsr $3a9e			jsr 	MInt32Negate 				; do int negate
.3397	4c 27 33	jmp $3327			jmp 	_ELHasTerm
.339a					_ELIndirect:
.339a	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.339b	20 1e 34	jsr $341e			jsr 	EvaluateIntegerTerm 		; integer address
.339e	68		pla				pla
.339f	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.33a1	f0 02		beq $33a5			beq 	_ELHaveModifier
.33a3	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.33a5					_ELHaveModifier:
.33a5	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.33a7	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.33a9	4c 27 33	jmp $3327			jmp 	_ELHasTerm
.33ac					_ELCallTemp0:
.33ac	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.33af					_ELExtension:
.33af	8a		txa				txa 								; stack pos in A
.33b0	20 69 18	jsr $1869		jsr	extensionHandler
.33b3	aa		tax				tax 								; restore stack
.33b4	4c 27 33	jmp $3327			jmp 	_ELHasTerm
.33b7					UnaryParenthesis:
.33b7	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.33b9	20 c3 32	jsr $32c3			jsr 	EvaluateLevel
.33bc	20 57 3b	jsr $3b57			jsr 	CheckRightParen 			; check for )
.33bf	60		rts				rts
.33c0					ELShiftByteIn:
.33c0	48		pha				pha 								; save bits to shift in.
.33c1	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.33c3	48		pha				pha
.33c4	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.33c6	95 b0		sta $b0,x			sta 	esInt3,x
.33c8	b5 a0		lda $a0,x			lda 	esInt1,x
.33ca	95 a8		sta $a8,x			sta 	esInt2,x
.33cc	b5 98		lda $98,x			lda 	esInt0,x
.33ce	95 a0		sta $a0,x			sta 	esInt1,x
.33d0	a9 00		lda #$00			lda 	#0
.33d2	95 98		sta $98,x			sta 	esInt0,x
.33d4	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.33d5	29 03		and #$03			and 	#3 							; only want lower 2 bits
.33d7	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.33d9					_ELShiftLoop:
.33d9	4a		lsr a				lsr 	a
.33da	76 b0		ror $b0,x			ror 	esInt3,x
.33dc	76 a8		ror $a8,x			ror 	esInt2,x
.33de	76 a0		ror $a0,x			ror 	esInt1,x
.33e0	76 98		ror $98,x			ror 	esInt0,x
.33e2	c9 01		cmp #$01			cmp 	#1
.33e4	d0 f3		bne $33d9			bne 	_ELShiftLoop
.33e6	68		pla				pla 								; get original 6 bit value and OR in.
.33e7	29 3f		and #$3f			and 	#$3F
.33e9	15 98		ora $98,x			ora 	esInt0,x
.33eb	95 98		sta $98,x			sta 	esInt0,x
.33ed	60		rts				rts
.33ee					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>33ee	01					.byte	$01			; $86 and
>33ef	01					.byte	$01			; $87 or
>33f0	01					.byte	$01			; $88 xor
>33f1	02					.byte	$02			; $89 >=
>33f2	02					.byte	$02			; $8a <=
>33f3	02					.byte	$02			; $8b >
>33f4	02					.byte	$02			; $8c <
>33f5	02					.byte	$02			; $8d =
>33f6	02					.byte	$02			; $8e <>
>33f7	03					.byte	$03			; $8f +
>33f8	03					.byte	$03			; $90 -
>33f9	04					.byte	$04			; $91 >>
>33fa	04					.byte	$04			; $92 <<
>33fb	04					.byte	$04			; $93 *
>33fc	04					.byte	$04			; $94 /
>33fd	04					.byte	$04			; $95 mod
>33fe	05					.byte	$05			; $96 ^
>33ff	06					.byte	$06			; $97 !
>3400	06					.byte	$06			; $98 ?
>3401	82					.byte	$82			; $99 repeat
>3402	82					.byte	$82			; $9a while
>3403	82					.byte	$82			; $9b for
>3404	82					.byte	$82			; $9c if
>3405	82					.byte	$82			; $9d defproc
>3406	80					.byte	$80			; $9e until
>3407	80					.byte	$80			; $9f wend
>3408	80					.byte	$80			; $a0 next
>3409	80					.byte	$80			; $a1 then
>340a	80					.byte	$80			; $a2 endif
>340b	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.340c					EvaluateTerm:
.340c	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.340e	20 c3 32	jsr $32c3			jsr 	EvaluateLevel
.3411	20 72 32	jsr $3272			jsr 	DereferenceOne
.3414	60		rts				rts
.3415					EvaluateNumericTerm:
.3415	20 0c 34	jsr $340c			jsr 	EvaluateTerm
.3418	b5 90		lda $90,x			lda 	esType,x
.341a	0a		asl a				asl 	a 							; see if it's a string.
.341b	30 09		bmi $3426			bmi 	ENTType
.341d	60		rts				rts
.341e					EvaluateIntegerTerm:
.341e	20 0c 34	jsr $340c			jsr 	EvaluateTerm
.3421	b5 90		lda $90,x			lda 	esType,x
.3423	d0 01		bne $3426			bne 	ENTType
.3425	60		rts				rts
.3426					ENTType:
.3426	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3428	20 18 15	jsr $1518		jsr	errorHandler
.342b					EvaluateRoot:
.342b	a2 00		ldx #$00			ldx 	#0
.342d					Evaluate:
.342d	a9 00		lda #$00			lda 	#0
.342f	20 c3 32	jsr $32c3			jsr 	EvaluateLevel
.3432	20 72 32	jsr $3272			jsr 	DereferenceOne
.3435	60		rts				rts
.3436					EvaluateNumeric:
.3436	20 2d 34	jsr $342d			jsr 	Evaluate
.3439	b5 90		lda $90,x			lda 	esType,x
.343b	0a		asl a				asl 	a 							; see if it's a string.
.343c	30 e8		bmi $3426			bmi 	ENTType
.343e	4a		lsr a				lsr 	a 							; shift float flag into carry.
.343f	4a		lsr a				lsr 	a
.3440	60		rts				rts
.3441					EvaluateString:
.3441	20 2d 34	jsr $342d			jsr 	Evaluate
.3444	b5 90		lda $90,x			lda 	esType,x
.3446	0a		asl a				asl 	a 							; see if it's a string.
.3447	10 dd		bpl $3426			bpl 	ENTType
.3449	60		rts				rts
.344a					EvaluateRootInteger:
.344a	a2 00		ldx #$00			ldx 	#0
.344c					EvaluateInteger:
.344c	20 2d 34	jsr $342d			jsr 	Evaluate
.344f	b5 90		lda $90,x			lda 	esType,x
.3451	d0 d3		bne $3426			bne 	ENTType
.3453	60		rts				rts
.3454					EvaluateSmallInteger:
.3454	20 4c 34	jsr $344c			jsr 	EvaluateInteger
.3457	b5 a0		lda $a0,x			lda 	esInt1,x
.3459	15 a8		ora $a8,x			ora 	esInt2,x
.345b	15 b0		ora $b0,x			ora 	esInt3,x
.345d	d0 03		bne $3462			bne 	_ESIValue
.345f	b5 98		lda $98,x			lda 	esInt0,x
.3461	60		rts				rts
.3462					_ESIValue:
.3462	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3464	20 18 15	jsr $1518		jsr	errorHandler
.3467					LinkEvaluate:
.3467	aa		tax				tax
.3468	20 2d 34	jsr $342d			jsr 	Evaluate
.346b	8a		txa				txa
.346c	60		rts				rts
.346d					LinkEvaluateTerm:
.346d	aa		tax				tax
.346e	20 0c 34	jsr $340c			jsr 	EvaluateTerm
.3471	8a		txa				txa
.3472	60		rts				rts
.3473					LinkEvaluateInteger:
.3473	aa		tax				tax
.3474	20 4c 34	jsr $344c			jsr 	EvaluateInteger
.3477	8a		txa				txa
.3478	60		rts				rts
.3479					LinkEvaluateString:
.3479	aa		tax				tax
.347a	20 41 34	jsr $3441			jsr 	EvaluateString
.347d	8a		txa				txa
.347e	60		rts				rts
.347f					LinkEvaluateSmallInt:
.347f	aa		tax				tax
.3480	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger
.3483	8a		txa				txa
.3484	60		rts				rts
.3485					EvaluateReference:
.3485	ad ff 33	lda $33ff			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.3488	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.3489	e9 01		sbc #$01			sbc 	#1
.348b	20 c3 32	jsr $32c3			jsr 	EvaluateLevel
.348e	b5 90		lda $90,x			lda 	esType,x
.3490	10 01		bpl $3493			bpl 	_ERFail
.3492	60		rts				rts
.3493					_ERFail:
.3493	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.3495	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.3498					Event_Str:
.3498	20 36 34	jsr $3436			jsr 	EvaluateNumeric 			; get a number.
.349b	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.349d	d0 13		bne $34b2			bne 	_ESFloat
.349f	20 f5 34	jsr $34f5			jsr 	ConvertGetBase 				; get base, or default.
.34a2	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.34a4	85 2a		sta $2a				sta 	temp0
.34a6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.34a8	85 2b		sta $2b				sta 	1+(temp0)
.34aa	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.34ac	20 3a 3a	jsr $3a3a			jsr 	MInt32ToString 				; convert to string.
.34af	4c bf 34	jmp $34bf			jmp 	_ESCloneExit 				; clone and exit.
.34b2					_ESFloat:
.34b2	20 57 3b	jsr $3b57			jsr 	CheckRightParen 			; check closing )
.34b5	20 3c 28	jsr $283c			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.34b8	8a		txa				txa
.34b9	a2 16		ldx #$16		ldx	#22
.34bb	20 4a 23	jsr $234a		jsr	floatingpointHandler
.34be	aa		tax				tax
.34bf					_ESCloneExit:
.34bf	8a		txa				txa
.34c0	a2 04		ldx #$04		ldx	#4
.34c2	20 8f 3e	jsr $3e8f		jsr	stringHandler
.34c5	aa		tax				tax
.34c6	60		rts				rts
.34c7					UnaryVal:
.34c7	38		sec				sec 								; Carry set to return value
.34c8	b0 01		bcs $34cb			bcs 	ValueMain
.34ca					UnaryIsVal:
.34ca	18		clc				clc									; Carry clear to return legitimacy
.34cb					ValueMain:
.34cb	08		php				php 								; save results (CS is value, CC is validation)
.34cc	20 41 34	jsr $3441			jsr 	EvaluateString
.34cf	20 f5 34	jsr $34f5			jsr 	ConvertGetBase 				; get base, if any.
.34d2	98		tya				tya
.34d3	48		pha				pha
.34d4	20 3c 28	jsr $283c			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.34d7	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.34d9	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.34db	20 52 39	jsr $3952			jsr 	MInt32FromString 			; convert it back from a string.
.34de	b0 0c		bcs $34ec			bcs 	_VMSuccess 					; successfully converted.
.34e0	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.34e2	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.34e4	f0 00		beq $34e6			beq 	_VMFailed 	 				; so we failed.
.34e6					_VMFailed:
.34e6	68		pla				pla
.34e7	a8		tay				tay
.34e8	28		plp				plp
.34e9	4c e4 3a	jmp $3ae4			jmp 	MInt32False 				; return 0 whatever.
.34ec					_VMSuccess:
.34ec	68		pla				pla
.34ed	a8		tay				tay
.34ee	28		plp				plp 								; if CS the it was val() so we want the value.
.34ef	b0 03		bcs $34f4			bcs 	_VMExit
.34f1	4c e0 3a	jmp $3ae0			jmp 	MInt32True 					; otherwise return true as successful.
.34f4					_VMExit:
.34f4	60		rts				rts
.34f5					ConvertGetBase:
.34f5	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.34f7	95 99		sta $99,x			sta 	esInt0+1,x
.34f9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.34fb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.34fd	d0 0e		bne $350d			bne 	_CGBDone 					; not found, should be )
.34ff	e8		inx				inx 								; next level
.3500	c8		iny				iny 								; skip comma.
.3501	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger		; evaluate the base.
.3504	ca		dex				dex
.3505	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3507	90 08		bcc $3511			bcc 	_CGBValue 					; (it should work as high as 37)
.3509	c9 11		cmp #$11			cmp 	#17
.350b	b0 04		bcs $3511			bcs 	_CGBValue
.350d					_CGBDone:
.350d	20 57 3b	jsr $3b57			jsr 	CheckRightParen
.3510	60		rts				rts
.3511					_CGBValue:
.3511	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3513	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.3516					EventFunction:
.3516	20 85 34	jsr $3485			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3519	b5 90		lda $90,x			lda 	esType,x
.351b	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.351d	d0 5b		bne $357a			bne 	_EFType
.351f	20 64 3b	jsr $3b64			jsr 	CheckComma
.3522	e8		inx				inx
.3523	20 4c 34	jsr $344c			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.3526	20 57 3b	jsr $3b57			jsr 	CheckRightParen 			; finish off with the right bracket
.3529	ca		dex				dex
.352a	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.352c	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.352e	15 a8		ora $a8,x			ora 	esInt2,x
.3530	15 b0		ora $b0,x			ora 	esInt3,x
.3532	d0 41		bne $3575			bne 	_EFValue
.3534	98		tya				tya
.3535	48		pha				pha
.3536	8a		txa				txa
.3537	48		pha				pha
.3538	a2 1c		ldx #$1c		ldx	#28
.353a	20 f6 14	jsr $14f6		jsr	deviceHandler
.353d	84 2d		sty $2d				sty 	temp1+1
.353f	85 2c		sta $2c				sta 	temp1
.3541	68		pla				pla
.3542	aa		tax				tax
.3543	20 3c 28	jsr $283c			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.3546	a0 03		ldy #$03			ldy 	#3							; if -ve
.3548	b1 2a		lda ($2a),y			lda 	(temp0),y
.354a	30 23		bmi $356f			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.354c	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.354e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3550	c8		iny				iny
.3551	11 2a		ora ($2a),y			ora 	(temp0),y
.3553	f0 17		beq $356c			beq 	_EFInitialise 				; if so, initialise the value but return false.
.3555	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.3557	38		sec				sec
.3558	b1 2a		lda ($2a),y			lda 	(temp0),y
.355a	e5 2c		sbc $2c				sbc 	temp1
.355c	c8		iny				iny
.355d	b1 2a		lda ($2a),y			lda 	(temp0),y
.355f	e5 2d		sbc $2d				sbc 	temp1+1
.3561	10 0c		bpl $356f			bpl 	_EFFail 					; if trigger >= timer then return False
.3563	20 7f 35	jsr $357f			jsr 	SetEventTimer 				; reset the timer for next time.
.3566	20 e0 3a	jsr $3ae0			jsr	 	MInt32True 					; and treutn true as fired.
.3569	68		pla				pla
.356a	a8		tay				tay
.356b	60		rts				rts
.356c					_EFInitialise:
.356c	20 7f 35	jsr $357f			jsr		SetEventTimer 				; set trigger time to time + elapsed
.356f					_EFFail:
.356f	68		pla				pla
.3570	a8		tay				tay
.3571	20 e4 3a	jsr $3ae4			jsr 	MInt32False
.3574	60		rts				rts
.3575					_EFValue:
.3575	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3577	20 18 15	jsr $1518		jsr	errorHandler
.357a					_EFType:
.357a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.357c	20 18 15	jsr $1518		jsr	errorHandler
.357f					SetEventTimer:
.357f	a0 00		ldy #$00			ldy 	#0
.3581	18		clc				clc
.3582	a5 2c		lda $2c				lda 	temp1
.3584	75 99		adc $99,x			adc 	esInt0+1,x
.3586	91 2a		sta ($2a),y			sta		(temp0),y
.3588	c8		iny				iny
.3589	a5 2d		lda $2d				lda 	temp1+1
.358b	75 a1		adc $a1,x			adc 	esInt1+1,x
.358d	91 2a		sta ($2a),y			sta		(temp0),y
.358f	88		dey				dey
.3590	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.3592	d0 04		bne $3598			bne 	_SETExit 					; zero means initialise.....
.3594	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.3596	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.3598					_SETExit:
.3598	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.3599					UnaryLen:
.3599	20 a7 35	jsr $35a7			jsr 	ULStart
.359c					ULFinish:
.359c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.359e	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.35a0	20 f3 3a	jsr $3af3			jsr 	MInt32Set8Bit 				; write it out.
.35a3	20 57 3b	jsr $3b57			jsr 	CheckRightParen
.35a6	60		rts				rts
.35a7	20 41 34	jsr $3441	ULStart:jsr 	EvaluateString
.35aa	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.35ac	85 2a		sta $2a				sta 	temp0
.35ae	b5 a0		lda $a0,x			lda 	esInt1,x
.35b0	85 2b		sta $2b				sta 	temp0+1
.35b2	84 32		sty $32				sty 	tempShort 					; get length
.35b4	a0 00		ldy #$00			ldy 	#0
.35b6	60		rts				rts
.35b7					UnaryAsc:
.35b7	20 a7 35	jsr $35a7			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.35ba	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.35bc	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.35bd	c9 00		cmp #$00			cmp 	#0
.35bf	d0 db		bne $359c			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.35c1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.35c3	20 18 15	jsr $1518		jsr	errorHandler
.35c6					UnaryAbs:
.35c6	20 36 34	jsr $3436			jsr 	EvaluateNumeric 			; some numeric value
.35c9	b0 07		bcs $35d2			bcs 	_UAFloat 					; CS then float, so use that function
.35cb	20 99 3a	jsr $3a99			jsr 	MInt32Absolute 				; int version
.35ce	20 57 3b	jsr $3b57			jsr 	CheckRightParen
.35d1	60		rts				rts
.35d2					_UAFloat:
.35d2	8a		txa				txa 								; float version
.35d3	a2 02		ldx #$02		ldx	#2
.35d5	20 4a 23	jsr $234a		jsr	floatingpointHandler
.35d8	aa		tax				tax
.35d9	20 57 3b	jsr $3b57			jsr 	CheckRightParen
.35dc	60		rts				rts
.35dd					UnarySgn:
.35dd	20 36 34	jsr $3436			jsr 	EvaluateNumeric 			; same as above but sign of value
.35e0	b0 07		bcs $35e9			bcs 	_USFloat
.35e2	20 d1 3a	jsr $3ad1			jsr 	MInt32Sign
.35e5	20 57 3b	jsr $3b57			jsr 	CheckRightParen
.35e8	60		rts				rts
.35e9					_USFloat:
.35e9	8a		txa				txa
.35ea	a2 10		ldx #$10		ldx	#16
.35ec	20 4a 23	jsr $234a		jsr	floatingpointHandler
.35ef	aa		tax				tax
.35f0	20 57 3b	jsr $3b57			jsr 	CheckRightParen
.35f3	60		rts				rts
.35f4					UnaryPeek:
.35f4	20 20 36	jsr $3620			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.35f7	4c 14 36	jmp $3614			jmp 	PDLByte0
.35fa					UnaryDeek:
.35fa	20 20 36	jsr $3620			jsr 	PDLCode
.35fd	4c 0e 36	jmp $360e			jmp 	PDLByte1
.3600					UnaryLeek:
.3600	20 20 36	jsr $3620			jsr 	PDLCode
.3603	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3605	b1 2a		lda ($2a),y			lda 	(temp0),y
.3607	95 b0		sta $b0,x			sta 	esInt3,x
.3609	88		dey				dey
.360a	b1 2a		lda ($2a),y			lda 	(temp0),y
.360c	95 a8		sta $a8,x			sta 	esInt2,x
.360e					PDLByte1:
.360e	a0 01		ldy #$01			ldy 	#1
.3610	b1 2a		lda ($2a),y			lda 	(temp0),y
.3612	95 a0		sta $a0,x			sta 	esInt1,x
.3614					PDLByte0:
.3614	a0 00		ldy #$00			ldy 	#0
.3616	b1 2a		lda ($2a),y			lda 	(temp0),y
.3618	95 98		sta $98,x			sta 	esInt0,x
.361a	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.361c	20 57 3b	jsr $3b57			jsr 	CheckRightParen 			; check right and return
.361f	60		rts				rts
.3620					PDLCode:
.3620	20 4c 34	jsr $344c			jsr 	EvaluateInteger 			; some address
.3623	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3625	85 2a		sta $2a				sta 	temp0
.3627	b5 a0		lda $a0,x			lda 	esInt1,x
.3629	85 2b		sta $2b				sta 	temp0+1
.362b	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.362d	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.362f	95 a8		sta $a8,x			sta 	esInt2,x
.3631	95 b0		sta $b0,x			sta 	esInt3,x
.3633	84 32		sty $32				sty 	tempShort 					; save Y
.3635	60		rts				rts
.3636					Unary_Random:
.3636	20 14 3b	jsr $3b14			jsr 	MInt32Random 				; generate random number.
.3639	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.363b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.363d	f0 08		beq $3647			beq 	_URExit
.363f	e8		inx				inx 								; load range 0..r-1 into +1
.3640	20 4c 34	jsr $344c			jsr 	EvaluateInteger
.3643	ca		dex				dex
.3644	20 37 39	jsr $3937			jsr 	MInt32Modulus 				; calculate random % modulus
.3647					_URExit:
.3647	20 57 3b	jsr $3b57			jsr 	CheckRightParen 			; check right and return
.364a	60		rts				rts
.364b					Unary_Min:
.364b	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.364d	d0 02		bne $3651			bne 	UnaryMBody
.364f					Unary_Max:
.364f	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3651					UnaryMBody:
.3651	48		pha				pha 								; save comparator on stack, shows min or max
.3652	20 2d 34	jsr $342d			jsr 	Evaluate 					; get the first thing to check
.3655					_UnaryMLoop:
.3655	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3657	c8		iny				iny
.3658	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.365a	f0 09		beq $3665			beq 	_UnaryMExit
.365c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.365e	f0 07		beq $3667			beq 	_UnaryMCompare
.3660	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3662	20 18 15	jsr $1518		jsr	errorHandler
.3665					_UnaryMExit:
.3665	68		pla				pla 								; done so throw comparator and return.
.3666	60		rts				rts
.3667					_UnaryMCompare:
.3667	e8		inx				inx 								; get the 2nd thing to evaluate
.3668	20 2d 34	jsr $342d			jsr 	Evaluate
.366b	ca		dex				dex
.366c	20 f3 31	jsr $31f3			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.366f	85 32		sta $32				sta 	tempShort 					; save result
.3671	68		pla				pla 								; get what we need
.3672	48		pha				pha
.3673	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3675	d0 de		bne $3655			bne 	_UnaryMLoop 				; no, try another value.
.3677	20 e4 3a	jsr $3ae4			jsr 	MInt32False 				; promote 2nd to 1st.
.367a	20 c8 39	jsr $39c8			jsr 	MInt32Add
.367d	4c 55 36	jmp $3655			jmp 	_UnaryMLoop
.3680					Unary_Page:
.3680	20 e4 3a	jsr $3ae4			jsr 	MInt32False 				; zero
.3683	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3686	95 98		sta $98,x			sta 	esInt0,x
.3688	ad c9 0a	lda $0ac9			lda 	basePage+1
.368b	95 a0		sta $a0,x			sta 	esInt1,x
.368d	60		rts				rts
.368e					UnaryReference:
.368e	a9 0f		lda #$0f			lda 	#15
.3690	20 c3 32	jsr $32c3			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3693	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.3695	10 05		bpl $369c			bpl 	UType
.3697	a9 00		lda #$00			lda 	#0 							; make it an integer
.3699	95 90		sta $90,x			sta 	esType,x
.369b	60		rts				rts
.369c					UType:
.369c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.369e	20 18 15	jsr $1518		jsr	errorHandler
.36a1					UnaryHexMarker:
.36a1	4c 1e 34	jmp $341e			jmp 	EvaluateIntegerTerm
.36a4					UnaryComplement:
.36a4	20 1e 34	jsr $341e			jsr 	EvaluateIntegerTerm
.36a7	20 b8 3a	jsr $3ab8			jsr 	MInt32Not
.36aa	60		rts				rts
.36ab					UnaryIntToFloat:
.36ab	20 36 34	jsr $3436			jsr 	EvaluateNumeric				; some number
.36ae	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.36b0	d0 0b		bne $36bd			bne 	_UIFExit
.36b2	8a		txa				txa 								; convert and set type
.36b3	a2 1c		ldx #$1c		ldx	#28
.36b5	20 4a 23	jsr $234a		jsr	floatingpointHandler
.36b8	aa		tax				tax
.36b9	a9 01		lda #$01			lda 	#1
.36bb	95 90		sta $90,x			sta 	esType,x
.36bd					_UIFExit:
.36bd	60		rts				rts
.36be					UnaryFloatToInt:
.36be	20 36 34	jsr $3436			jsr 	EvaluateNumeric 			; the number
.36c1	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.36c3	f0 0b		beq $36d0			beq 	_UFIExit
.36c5	8a		txa				txa 								; convert to int
.36c6	a2 14		ldx #$14		ldx	#20
.36c8	20 4a 23	jsr $234a		jsr	floatingpointHandler
.36cb	aa		tax				tax
.36cc	a9 00		lda #$00			lda 	#0 							; set type
.36ce	95 90		sta $90,x			sta 	esType,x
.36d0					_UFIExit:
.36d0	60		rts				rts
.36d1					UnaryAlloc:
.36d1	e8		inx				inx 								; evaluate memory required
.36d2	20 4c 34	jsr $344c			jsr 	EvaluateInteger
.36d5	20 57 3b	jsr $3b57			jsr 	CheckRightParen
.36d8	ca		dex				dex
.36d9	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.36db	15 b1		ora $b1,x			ora 	esInt3+1,x
.36dd	d0 1d		bne $36fc			bne 	_UABadValue
.36df	20 e4 3a	jsr $3ae4			jsr 	MInt32False					; zero return.
.36e2	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.36e4	95 a0		sta $a0,x			sta 	esInt1,x
.36e6	a5 35		lda $35				lda 	lowMemory
.36e8	95 98		sta $98,x			sta 	esInt0,x
.36ea	18		clc				clc 								; add alloc required.
.36eb	75 99		adc $99,x			adc 	esInt0+1,x
.36ed	85 35		sta $35				sta 	lowMemory
.36ef	a5 36		lda $36				lda 	lowMemory+1
.36f1	75 a1		adc $a1,x			adc 	esInt1+1,x
.36f3	85 36		sta $36				sta 	lowMemory+1
.36f5	b0 05		bcs $36fc			bcs		_UABadValue 				; overflow definitely bad.
.36f7	c5 34		cmp $34				cmp 	highMemory+1
.36f9	b0 01		bcs $36fc			bcs 	_UABadValue 				; out of memory bad.
.36fb	60		rts				rts
.36fc					_UABadValue:
.36fc	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.36fe	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3701					UnaryTimer:
.3701	20 57 3b	jsr $3b57			jsr 	CheckRightParen 			; no parameters
.3704	98		tya				tya
.3705	48		pha				pha
.3706	20 0b 3b	jsr $3b0b			jsr 	MInt32Zero 					; zero result
.3709	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.370b	a2 1c		ldx #$1c		ldx	#28
.370d	20 f6 14	jsr $14f6		jsr	deviceHandler
.3710	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3712	95 98		sta $98,x			sta 	esInt0,x
.3714	98		tya				tya
.3715	95 a0		sta $a0,x			sta 	esInt1,x
.3717	68		pla				pla
.3718	a8		tay				tay
.3719	60		rts				rts
.371a					UnaryInkey:
.371a	20 57 3b	jsr $3b57			jsr 	CheckRightParen
.371d	86 2a		stx $2a				stx 	temp0
.371f	a2 0a		ldx #$0a		ldx	#10
.3721	20 f6 14	jsr $14f6		jsr	deviceHandler
.3724	a6 2a		ldx $2a				ldx 	temp0
.3726	20 f3 3a	jsr $3af3			jsr 	MInt32Set8Bit
.3729	60		rts				rts
.372a					UnaryGet:
.372a	20 57 3b	jsr $3b57			jsr 	CheckRightParen
.372d	86 2a		stx $2a				stx 	temp0
.372f					_UGLoop:
.372f	a2 02		ldx #$02		ldx	#2
.3731	20 f6 14	jsr $14f6		jsr	deviceHandler
.3734	a2 0a		ldx #$0a		ldx	#10
.3736	20 f6 14	jsr $14f6		jsr	deviceHandler
.3739	c9 00		cmp #$00			cmp 	#0
.373b	f0 f2		beq $372f			beq 	_UGLoop
.373d	a6 2a		ldx $2a				ldx 	temp0
.373f	20 f3 3a	jsr $3af3			jsr 	MInt32Set8Bit
.3742	60		rts				rts
.3743					UnaryGetString:
.3743	20 2a 37	jsr $372a			jsr 	UnaryGet
.3746					UGSDoChr:
.3746	4c 97 37	jmp $3797			jmp 	ChrCode
.3749					UnaryInkeyString:
.3749	20 1a 37	jsr $371a			jsr 	UnaryInkey
.374c	b5 98		lda $98,x			lda 	esInt0,x
.374e	d0 f6		bne $3746			bne 	UGSDoChr
.3750	8a		txa				txa
.3751	a2 08		ldx #$08		ldx	#8
.3753	20 8f 3e	jsr $3e8f		jsr	stringHandler
.3756	aa		tax				tax
.3757	60		rts				rts
.3758					UnarySys:
.3758	20 4c 34	jsr $344c			jsr 	EvaluateInteger 				; get the address
.375b	20 57 3b	jsr $3b57			jsr 	CheckRightParen
.375e	20 3c 28	jsr $283c			jsr 	TOSToTemp0 						; copy call address to temp0
.3761	8a		txa				txa
.3762	48		pha				pha
.3763	98		tya				tya
.3764	48		pha				pha
.3765	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3768	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.376b	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.376e	20 7d 37	jsr $377d			jsr 	_CallTemp0
.3771	85 32		sta $32				sta 	tempShort 						; restore YX
.3773	68		pla				pla
.3774	a8		tay				tay
.3775	68		pla				pla
.3776	aa		tax				tax
.3777	a5 32		lda $32				lda 	tempShort
.3779	20 f3 3a	jsr $3af3			jsr 	MInt32Set8Bit 					; return result.
.377c	60		rts				rts
.377d					_CallTemp0:
.377d	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3780					UnaryMem:
.3780	20 e4 3a	jsr $3ae4			jsr 	MInt32False 					; set to false (e.g. 0)
.3783	38		sec				sec
.3784	a5 33		lda $33				lda 	highMemory 						; calculate value
.3786	e5 35		sbc $35				sbc 	lowMemory
.3788	95 98		sta $98,x			sta 	esInt0,x
.378a	a5 34		lda $34				lda 	highMemory+1
.378c	e5 36		sbc $36				sbc 	lowMemory+1
.378e	95 a0		sta $a0,x			sta 	esInt1,x
.3790	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3791					ExecChr:
.3791	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger		; character number 0-255
.3794	20 57 3b	jsr $3b57			jsr 	CheckRightParen				; right bracket
.3797					ChrCode:
.3797	98		tya				tya
.3798	48		pha				pha
.3799	8a		txa				txa 								; A = stack
.379a	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.379c	a2 02		ldx #$02		ldx	#2
.379e	20 8f 3e	jsr $3e8f		jsr	stringHandler
.37a1	aa		tax				tax 								; X = stack
.37a2	68		pla				pla
.37a3	a8		tay				tay
.37a4	60		rts				rts
.37a5					ExecLower:
.37a5	38		sec				sec 								; set carry is lower
.37a6	b0 01		bcs $37a9			bcs 	ExecUpperLower
.37a8					ExecUpper:
.37a8	18		clc				clc 								; clear carry is upper
.37a9					ExecUpperLower:
.37a9	08		php				php 								; save carry
.37aa	20 41 34	jsr $3441			jsr 	EvaluateString 				; string to stack,X
.37ad	20 57 3b	jsr $3b57			jsr 	CheckRightParen 			; check closing right bracket.
.37b0	28		plp				plp 								; restore carry, save Y
.37b1	98		tya				tya
.37b2	48		pha				pha
.37b3	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.37b5	2a		rol a				rol 	a
.37b6	a8		tay				tay 								; now in Y
.37b7	8a		txa				txa 								; do the substring and exit.
.37b8	a2 0c		ldx #$0c		ldx	#12
.37ba	20 8f 3e	jsr $3e8f		jsr	stringHandler
.37bd	aa		tax				tax
.37be	68		pla				pla
.37bf	a8		tay				tay
.37c0	60		rts				rts
.37c1					ExecLeft:
.37c1	20 41 34	jsr $3441			jsr 	EvaluateString 				; string to stack,X
.37c4	20 64 3b	jsr $3b64			jsr 	CheckComma
.37c7	e8		inx				inx
.37c8	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.37ca	20 f3 3a	jsr $3af3			jsr 	MInt32Set8Bit
.37cd	e8		inx				inx
.37ce	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.37d1					ExecSubstring:
.37d1	ca		dex				dex 								; fix up X
.37d2	ca		dex				dex
.37d3	20 57 3b	jsr $3b57			jsr 	CheckRightParen 			; check closing right bracket.
.37d6	8a		txa				txa 								; do the substring and exit.
.37d7	a2 0e		ldx #$0e		ldx	#14
.37d9	20 8f 3e	jsr $3e8f		jsr	stringHandler
.37dc	aa		tax				tax
.37dd	60		rts				rts
.37de					ExecMid:
.37de	20 41 34	jsr $3441			jsr 	EvaluateString 				; string to stack,X
.37e1	20 64 3b	jsr $3b64			jsr 	CheckComma
.37e4	e8		inx				inx
.37e5	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.37e8	c9 00		cmp #$00			cmp 	#0
.37ea	f0 15		beq $3801			beq 	_EMValue
.37ec	e8		inx				inx
.37ed	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.37ef	20 f3 3a	jsr $3af3			jsr 	MInt32Set8Bit
.37f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.37f4	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.37f6	f0 d9		beq $37d1			beq 	ExecSubString
.37f8	20 64 3b	jsr $3b64			jsr 	CheckComma
.37fb	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.37fe	4c d1 37	jmp $37d1			jmp 	ExecSubString
.3801					_EMValue:
.3801	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3803	20 18 15	jsr $1518		jsr	errorHandler
.3806					ExecRight:
.3806	20 41 34	jsr $3441			jsr 	EvaluateString 				; string to stack,X
.3809	20 64 3b	jsr $3b64			jsr 	CheckComma
.380c	e8		inx				inx
.380d	20 54 34	jsr $3454			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3810	ca		dex				dex
.3811	98		tya				tya
.3812	48		pha				pha
.3813	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3815	85 2a		sta $2a				sta 	temp0
.3817	b5 a0		lda $a0,x			lda 	esInt1,x
.3819	85 2b		sta $2b				sta 	temp0+1
.381b	a0 00		ldy #$00			ldy 	#0 							; point to length
.381d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.381f	18		clc				clc 								; add 1.
.3820	69 01		adc #$01			adc 	#1
.3822	38		sec				sec
.3823	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3825	f0 02		beq $3829			beq		_ERMake1 					; if zero, make it 1.
.3827	b0 02		bcs $382b			bcs		_EROkay
.3829					_ERMake1:
.3829	a9 01		lda #$01			lda 	#1 							; start position.
.382b					_EROkay:
.382b	e8		inx				inx 								; set start pos.
.382c	95 98		sta $98,x			sta 	esInt0,x
.382e	e8		inx				inx
.382f	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3831	20 f3 3a	jsr $3af3			jsr 	MInt32Set8Bit
.3834	68		pla				pla
.3835	a8		tay				tay
.3836	4c d1 37	jmp $37d1			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3839					MInt32And:
.3839	b5 98		lda $98,x			lda 	esInt0,x
.383b	35 99		and $99,x			and 	esInt0+1,x
.383d	95 98		sta $98,x			sta 	esInt0,x
.383f	b5 a0		lda $a0,x			lda 	esInt1,x
.3841	35 a1		and $a1,x			and 	esInt1+1,x
.3843	95 a0		sta $a0,x			sta 	esInt1,x
.3845	b5 a8		lda $a8,x			lda 	esInt2,x
.3847	35 a9		and $a9,x			and 	esInt2+1,x
.3849	95 a8		sta $a8,x			sta 	esInt2,x
.384b	b5 b0		lda $b0,x			lda 	esInt3,x
.384d	35 b1		and $b1,x			and 	esInt3+1,x
.384f	95 b0		sta $b0,x			sta 	esInt3,x
.3851	60		rts				rts
.3852					MInt32Or:
.3852	b5 98		lda $98,x			lda 	esInt0,x
.3854	15 99		ora $99,x			ora 	esInt0+1,x
.3856	95 98		sta $98,x			sta 	esInt0,x
.3858	b5 a0		lda $a0,x			lda 	esInt1,x
.385a	15 a1		ora $a1,x			ora 	esInt1+1,x
.385c	95 a0		sta $a0,x			sta 	esInt1,x
.385e	b5 a8		lda $a8,x			lda 	esInt2,x
.3860	15 a9		ora $a9,x			ora 	esInt2+1,x
.3862	95 a8		sta $a8,x			sta 	esInt2,x
.3864	b5 b0		lda $b0,x			lda 	esInt3,x
.3866	15 b1		ora $b1,x			ora 	esInt3+1,x
.3868	95 b0		sta $b0,x			sta 	esInt3,x
.386a	60		rts				rts
.386b					MInt32Xor:
.386b	b5 98		lda $98,x			lda 	esInt0,x
.386d	55 99		eor $99,x			eor 	esInt0+1,x
.386f	95 98		sta $98,x			sta 	esInt0,x
.3871	b5 a0		lda $a0,x			lda 	esInt1,x
.3873	55 a1		eor $a1,x			eor 	esInt1+1,x
.3875	95 a0		sta $a0,x			sta 	esInt1,x
.3877	b5 a8		lda $a8,x			lda 	esInt2,x
.3879	55 a9		eor $a9,x			eor 	esInt2+1,x
.387b	95 a8		sta $a8,x			sta 	esInt2,x
.387d	b5 b0		lda $b0,x			lda 	esInt3,x
.387f	55 b1		eor $b1,x			eor 	esInt3+1,x
.3881	95 b0		sta $b0,x			sta 	esInt3,x
.3883	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3884					MInt32Compare:
.3884	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3886	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3888	d0 13		bne $389d			bne 	MInt32Compare2
.388a	b5 a0		lda $a0,x			lda 	esInt1,x
.388c	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.388e	d0 0d		bne $389d			bne 	MInt32Compare2
.3890	b5 a8		lda $a8,x			lda 	esInt2,x
.3892	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3894	d0 07		bne $389d			bne 	MInt32Compare2
.3896	b5 b0		lda $b0,x			lda 	esInt3,x
.3898	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.389a	d0 01		bne $389d			bne 	MInt32Compare2
.389c	60		rts				rts
.389d					MInt32Compare2:
.389d	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.389f	d5 99		cmp $99,x			cmp 	esInt0+1,x
.38a1	b5 a0		lda $a0,x			lda		esInt1,x
.38a3	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.38a5	b5 a8		lda $a8,x			lda		esInt2,x
.38a7	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.38a9	b5 b0		lda $b0,x			lda		esInt3,x
.38ab	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.38ad	50 02		bvc $38b1			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.38af	49 80		eor #$80			eor 	#$80
.38b1					_I32LNoOverflow
.38b1	30 03		bmi $38b6			bmi 	MInt32CLess					; if -ve then return $FF
.38b3	a9 01		lda #$01			lda 	#$01						; else return $01
.38b5	60		rts				rts
.38b6					MInt32CLess:
.38b6	a9 ff		lda #$ff			lda 	#$FF
.38b8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.38b9					MInt32SDivide:
.38b9	98		tya				tya  								; save Y, which is the count of negations
.38ba	48		pha				pha
.38bb	a0 00		ldy #$00			ldy 	#0 							; zero count
.38bd	20 d5 38	jsr $38d5			jsr 	_MInt32SRemSign 			; unsign TOS
.38c0	e8		inx				inx 								; unsign TOS+1
.38c1	20 d5 38	jsr $38d5			jsr 	_MInt32SRemSign
.38c4	ca		dex				dex
.38c5	98		tya				tya 								; save sign count on stack
.38c6	48		pha				pha
.38c7	20 de 38	jsr $38de			jsr 	MInt32UDivide 				; unsigned division
.38ca	68		pla				pla 								; get sign count back
.38cb	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.38cd	f0 03		beq $38d2			beq 	_I32SNoNeg
.38cf	20 9e 3a	jsr $3a9e			jsr 	MInt32Negate
.38d2					_I32SNoNeg:
.38d2	68		pla				pla 								; restoe Y and exit
.38d3	a8		tay				tay
.38d4	60		rts				rts
.38d5					_MInt32SRemSign:
.38d5	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.38d7	10 04		bpl $38dd			bpl 	_MInt32SRSExit
.38d9	c8		iny				iny 								; increment the sign count
.38da	20 9e 3a	jsr $3a9e			jsr 	MInt32Negate 				; negate the value.
.38dd					_MInt32SRSExit:
.38dd	60		rts				rts
.38de					MInt32UDivide:
.38de	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.38e0	15 a1		ora $a1,x			ora 	esInt1+1,x
.38e2	15 a2		ora $a2,x			ora 	esInt1+2,x
.38e4	15 a3		ora $a3,x			ora 	esInt1+3,x
.38e6	f0 4a		beq $3932			beq 	_MInt32DZero
.38e8	e8		inx				inx 								; clear A
.38e9	e8		inx				inx
.38ea	20 e4 3a	jsr $3ae4			jsr 	MInt32False
.38ed	ca		dex				dex
.38ee	ca		dex				dex
.38ef	98		tya				tya 								; save Y on the stack
.38f0	48		pha				pha
.38f1	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.38f3					_MInt32UDLoop:
.38f3	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.38f5	36 a0		rol $a0,x			rol 	esInt1,x
.38f7	36 a8		rol $a8,x			rol 	esInt2,x
.38f9	36 b0		rol $b0,x			rol 	esInt3,x
.38fb	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.38fd	36 a2		rol $a2,x			rol 	esInt1+2,x
.38ff	36 aa		rol $aa,x			rol 	esInt2+2,x
.3901	36 b2		rol $b2,x			rol 	esInt3+2,x
.3903	38		sec				sec 								; calculate A-M saving result on the stack
.3904	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3906	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3908	48		pha				pha
.3909	b5 a2		lda $a2,x			lda 	esInt1+2,x
.390b	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.390d	48		pha				pha
.390e	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3910	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3912	48		pha				pha
.3913	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3915	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3917	90 10		bcc $3929			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3919	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.391b	68		pla				pla
.391c	95 aa		sta $aa,x			sta 	esInt2+2,x
.391e	68		pla				pla
.391f	95 a2		sta $a2,x			sta 	esInt1+2,x
.3921	68		pla				pla
.3922	95 9a		sta $9a,x			sta 	esInt0+2,x
.3924	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3926	4c 2c 39	jmp $392c			jmp 	_MInt32Next 					; do the next iteration
.3929					_MInt32NoSubtract:
.3929	68		pla				pla
.392a	68		pla				pla
.392b	68		pla				pla
.392c					_MInt32Next:
.392c	88		dey				dey 								; do this 32 times.
.392d	d0 c4		bne $38f3			bne 	_MInt32UDLoop
.392f	68		pla				pla 								; restore Y and exit
.3930	a8		tay				tay
.3931	60		rts				rts
.3932					_MInt32DZero:
.3932	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3934	20 18 15	jsr $1518		jsr	errorHandler
.3937					MInt32Modulus:
.3937	20 de 38	jsr $38de			jsr 	MInt32UDivide 				; do the division.
.393a	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.393c	95 b0		sta $b0,x			sta 	esInt3,x
.393e	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3940	95 a8		sta $a8,x			sta 	esInt2,x
.3942	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3944	95 a0		sta $a0,x			sta 	esInt1,x
.3946	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3948	95 98		sta $98,x			sta 	esInt0,x
.394a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d06					fs32Length:
>0d06							.fill 	1
.394b					LinkInt32FromString:
.394b	aa		tax				tax
.394c	98		tya				tya
.394d	20 52 39	jsr $3952			jsr 	MInt32FromString
.3950	8a		txa				txa
.3951	60		rts				rts
.3952					MInt32FromString:
.3952	85 32		sta $32				sta 	tempShort 					; save base
.3954	98		tya				tya
.3955	48		pha				pha
.3956	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3958	b1 2a		lda ($2a),y			lda 	(temp0),y
.395a	8d 06 0d	sta $0d06			sta 	fs32Length
.395d	f0 65		beq $39c4			beq 	_I32FSFail2					; fail if length zero.
.395f	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3961	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3963	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3965	d0 09		bne $3970			bne 	_I32FSNotNegative
.3967	ad 06 0d	lda $0d06			lda 	fs32Length 					; get length back.
.396a	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.396c	f0 56		beq $39c4			beq 	_I32FSFail2
.396e	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3970					_I32FSNotNegative:
.3970	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3972	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3974	d0 02		bne $3978			bne 	_I32FSNN2
.3976	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3978					_I32FSNN2:
.3978	48		pha				pha 								; save base + final sign on stack.
.3979	20 e4 3a	jsr $3ae4			jsr 	MInt32False 				; zero the return value.
.397c					_I32FSMainLoop:
.397c	68		pla				pla 								; get the base back into tempShort
.397d	48		pha				pha
.397e	29 7f		and #$7f			and 	#$7F
.3980	85 32		sta $32				sta 	tempShort
.3982	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3984	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3986	90 02		bcc $398a			bcc 	_I32FSNotLC
.3988	e9 20		sbc #$20			sbc 	#32
.398a					_I32FSNotLC:
.398a	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.398b	e9 30		sbc #$30			sbc 	#"0"
.398d	90 34		bcc $39c3			bcc 	_I32FSFail 					; nothing more to do.
.398f	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3991	90 06		bcc $3999			bcc 	_I32FSValidate
.3993	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3995	90 2c		bcc $39c3			bcc 	_I32FSFail
.3997	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3999					_I32FSValidate:
.3999	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.399b	b0 26		bcs $39c3			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.399d	48		pha				pha 								; save the new digit value.
.399e	e8		inx				inx 								; put base into next slot up on stack
.399f	a5 32		lda $32				lda 	tempShort
.39a1	20 f3 3a	jsr $3af3			jsr 	MInt32Set8Bit
.39a4	ca		dex				dex
.39a5	20 fc 39	jsr $39fc			jsr 	MInt32Multiply 				; multiply current by the base
.39a8	e8		inx				inx
.39a9	68		pla				pla  								; put additive into next slot
.39aa	20 f3 3a	jsr $3af3			jsr 	MInt32Set8Bit
.39ad	ca		dex				dex
.39ae	20 c8 39	jsr $39c8			jsr 	MInt32Add 					; and add it
.39b1	c8		iny				iny 								; bump the character pointer
.39b2	cc 06 0d	cpy $0d06			cpy 	fs32Length 					; until > length.
.39b5	f0 c5		beq $397c			beq 	_I32FSMainLoop
.39b7	90 c3		bcc $397c			bcc 	_I32FSMainLoop
.39b9					_I32FSDone:
.39b9	68		pla				pla 								; get base/final sign back
.39ba	10 03		bpl $39bf			bpl 	_I32FSNN3
.39bc	20 9e 3a	jsr $3a9e			jsr 	MInt32Negate 				; negate the result.
.39bf					_I32FSNN3:
.39bf	68		pla				pla
.39c0	a8		tay				tay
.39c1	38		sec				sec
.39c2	60		rts				rts
.39c3					_I32FSFail:
.39c3	68		pla				pla
.39c4					_I32FSFail2:
.39c4	68		pla				pla
.39c5	a8		tay				tay
.39c6	18		clc				clc
.39c7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.39c8					MInt32Add:
.39c8	18		clc				clc
.39c9	b5 98		lda $98,x			lda 	esInt0,x
.39cb	75 99		adc $99,x			adc 	esInt0+1,x
.39cd	95 98		sta $98,x			sta 	esInt0,x
.39cf	b5 a0		lda $a0,x			lda 	esInt1,x
.39d1	75 a1		adc $a1,x			adc 	esInt1+1,x
.39d3	95 a0		sta $a0,x			sta 	esInt1,x
.39d5	b5 a8		lda $a8,x			lda 	esInt2,x
.39d7	75 a9		adc $a9,x			adc 	esInt2+1,x
.39d9	95 a8		sta $a8,x			sta 	esInt2,x
.39db	b5 b0		lda $b0,x			lda 	esInt3,x
.39dd	75 b1		adc $b1,x			adc 	esInt3+1,x
.39df	95 b0		sta $b0,x			sta 	esInt3,x
.39e1	60		rts				rts
.39e2					MInt32Sub:
.39e2	38		sec				sec
.39e3	b5 98		lda $98,x			lda 	esInt0,x
.39e5	f5 99		sbc $99,x			sbc 	esInt0+1,x
.39e7	95 98		sta $98,x			sta 	esInt0,x
.39e9	b5 a0		lda $a0,x			lda 	esInt1,x
.39eb	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.39ed	95 a0		sta $a0,x			sta 	esInt1,x
.39ef	b5 a8		lda $a8,x			lda 	esInt2,x
.39f1	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.39f3	95 a8		sta $a8,x			sta 	esInt2,x
.39f5	b5 b0		lda $b0,x			lda 	esInt3,x
.39f7	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.39f9	95 b0		sta $b0,x			sta 	esInt3,x
.39fb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.39fc					MInt32Multiply:
.39fc	e8		inx				inx 								; copy 2nd -> 3rd
.39fd	20 22 3a	jsr $3a22			jsr 	MInt32CopyUp
.3a00	ca		dex				dex
.3a01	20 22 3a	jsr $3a22			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3a04	20 e4 3a	jsr $3ae4			jsr 	MInt32False 				; zero 1st.
.3a07					_I32Loop:
.3a07	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3a09	29 01		and #$01			and 	#1
.3a0b	f0 03		beq $3a10			beq 	_I32NoAdd 					; if set
.3a0d	20 c8 39	jsr $39c8			jsr 	MInt32Add 					; add 2nd to 1st.
.3a10					_I32NoAdd:
.3a10	e8		inx				inx 								; shift 2nd left
.3a11	20 f9 3a	jsr $3af9			jsr 	MInt32ShiftLeft
.3a14	e8		inx				inx  								; shift 3rd right
.3a15	20 02 3b	jsr $3b02			jsr 	MInt32ShiftRight
.3a18	20 0b 3b	jsr $3b0b			jsr 	MInt32Zero 					; check if zero.
.3a1b	08		php				php 								; save status bits
.3a1c	ca		dex				dex 	 							; point back to 1st
.3a1d	ca		dex				dex
.3a1e	28		plp				plp 								; get status bits
.3a1f	d0 e6		bne $3a07			bne 	_I32Loop 					; if non-zero keep going.
.3a21	60		rts				rts
.3a22					MInt32CopyUp:
.3a22	b5 98		lda $98,x			lda 	esInt0,x
.3a24	95 99		sta $99,x			sta 	esInt0+1,x
.3a26	b5 a0		lda $a0,x			lda 	esInt1,x
.3a28	95 a1		sta $a1,x			sta 	esInt1+1,x
.3a2a	b5 a8		lda $a8,x			lda 	esInt2,x
.3a2c	95 a9		sta $a9,x			sta 	esInt2+1,x
.3a2e	b5 b0		lda $b0,x			lda 	esInt3,x
.3a30	95 b1		sta $b1,x			sta 	esInt3+1,x
.3a32	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d07					MCharCount:	.fill 	1						; count of converted characters
.3a33					MLInt32ToString:
.3a33	aa		tax				tax									; module passes stack in A, base in Y
.3a34	98		tya				tya
.3a35	20 3a 3a	jsr $3a3a			jsr 	MInt32ToString
.3a38	8a		txa				txa
.3a39	60		rts				rts
.3a3a					MInt32ToString:
.3a3a	48		pha				pha 								; save base
.3a3b	85 32		sta $32				sta 	tempShort 					; save target base.
.3a3d	a9 00		lda #$00			lda 	#0
.3a3f	8d 07 0d	sta $0d07			sta 	MCharCount 					; clear character count to 0
.3a42	98		tya				tya
.3a43	48		pha				pha
.3a44	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3a46	10 10		bpl $3a58			bpl 	_I32TSUnsigned
.3a48	48		pha				pha 								; save base on stack.
.3a49	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3a4b	10 08		bpl $3a55			bpl 	_I32TSNoFlip
.3a4d	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3a4f	20 8b 3a	jsr $3a8b			jsr 	MI32WriteCharacter
.3a52	20 9e 3a	jsr $3a9e			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3a55					_I32TSNoFlip:
.3a55	68		pla				pla 								; get the base back
.3a56	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3a58					_I32TSUnsigned:
.3a58	20 66 3a	jsr $3a66			jsr 	MI32DivideWrite 			; recursive code to output string.
.3a5b	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3a5d	ad 07 0d	lda $0d07			lda 	MCharCount
.3a60	91 2a		sta ($2a),y			sta 	(temp0),y
.3a62	68		pla				pla
.3a63	a8		tay				tay
.3a64	68		pla				pla
.3a65	60		rts				rts
.3a66					MI32DivideWrite:
.3a66	48		pha				pha 								; save the divisor/base
.3a67	e8		inx				inx 								; write in the dividing position.
.3a68	20 f3 3a	jsr $3af3			jsr 	MInt32Set8Bit
.3a6b	ca		dex				dex
.3a6c	20 de 38	jsr $38de			jsr 	MInt32UDivide 				; divide number by base.
.3a6f	68		pla				pla 								; get the base into Y
.3a70	a8		tay				tay
.3a71	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3a73	48		pha				pha
.3a74	20 0b 3b	jsr $3b0b			jsr 	MInt32Zero 					; is the result zero ?
.3a77	f0 04		beq $3a7d			beq 	_I32NoRecurse 				; if so, don't recurse.
.3a79	98		tya				tya 								; put base into A
.3a7a	20 66 3a	jsr $3a66			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3a7d					_I32NoRecurse:
.3a7d	68		pla				pla 								; get the remainder back
.3a7e	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3a80	90 02		bcc $3a84			bcc 	_I32NotHex
.3a82	69 06		adc #$06			adc 	#7-1
.3a84					_I32NotHex:
.3a84	18		clc				clc 								; make it ASCII
.3a85	69 30		adc #$30			adc 	#48
.3a87	20 8b 3a	jsr $3a8b			jsr 	MI32WriteCharacter 			; write the character out
.3a8a	60		rts				rts 								; and exit.
.3a8b					MI32WriteCharacter:
.3a8b	ee 07 0d	inc $0d07			inc 	MCharCount 					; bump count (space for leading count)
.3a8e	ac 07 0d	ldy $0d07			ldy 	MCharCount 					; get position
.3a91	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3a93	c8		iny				iny
.3a94	a9 00		lda #$00			lda 	#0
.3a96	91 2a		sta ($2a),y			sta 	(temp0),y
.3a98	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d08					MSeed32:	.fill 	4							; random number seed.
.3a99					MInt32Absolute:
.3a99	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3a9b	30 01		bmi $3a9e			bmi 	MInt32Negate
.3a9d	60		rts				rts
.3a9e					MInt32Negate:
.3a9e	38		sec				sec 								; subtract from zero.
.3a9f	a9 00		lda #$00			lda 	#0
.3aa1	f5 98		sbc $98,x			sbc 	esInt0,x
.3aa3	95 98		sta $98,x			sta 	esInt0,x
.3aa5	a9 00		lda #$00			lda 	#0
.3aa7	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3aa9	95 a0		sta $a0,x			sta 	esInt1,x
.3aab	a9 00		lda #$00			lda 	#0
.3aad	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3aaf	95 a8		sta $a8,x			sta 	esInt2,x
.3ab1	a9 00		lda #$00			lda 	#0
.3ab3	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3ab5	95 b0		sta $b0,x			sta 	esInt3,x
.3ab7	60		rts				rts
.3ab8					MInt32Not:
.3ab8	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3aba	49 ff		eor #$ff			eor 	#$FF
.3abc	95 98		sta $98,x			sta 	esInt0,x
.3abe	b5 a0		lda $a0,x			lda 	esInt1,x
.3ac0	49 ff		eor #$ff			eor 	#$FF
.3ac2	95 a0		sta $a0,x			sta 	esInt1,x
.3ac4	b5 a8		lda $a8,x			lda 	esInt2,x
.3ac6	49 ff		eor #$ff			eor 	#$FF
.3ac8	95 a8		sta $a8,x			sta 	esInt2,x
.3aca	b5 b0		lda $b0,x			lda 	esInt3,x
.3acc	49 ff		eor #$ff			eor 	#$FF
.3ace	95 b0		sta $b0,x			sta 	esInt3,x
.3ad0	60		rts				rts
.3ad1					MInt32Sign:
.3ad1	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3ad3	30 0b		bmi $3ae0			bmi 	MInt32True 					; if set return -1 (true)
.3ad5	20 0b 3b	jsr $3b0b			jsr 	MInt32Zero 					; is it zero ?
.3ad8	f0 0a		beq $3ae4			beq 	MInt32False 				; if zero return 0 (false)
.3ada	20 e4 3a	jsr $3ae4			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3add	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3adf	60		rts				rts
.3ae0					MInt32True:
.3ae0	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3ae2	d0 02		bne $3ae6			bne 	MInt32WriteAll
.3ae4					MInt32False:
.3ae4	a9 00		lda #$00			lda 	#0
.3ae6					MInt32WriteAll:
.3ae6	95 98		sta $98,x			sta 	esInt0,x
.3ae8					MInt32Write123:
.3ae8	95 a0		sta $a0,x			sta 	esInt1,x
.3aea	95 a8		sta $a8,x			sta 	esInt2,x
.3aec	95 b0		sta $b0,x			sta 	esInt3,x
.3aee	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3af0	95 90		sta $90,x			sta 	esType,x
.3af2	60		rts				rts
.3af3					MInt32Set8Bit:
.3af3	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3af5	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3af7	f0 ef		beq $3ae8			beq		MInt32Write123
.3af9					MInt32ShiftLeft:
.3af9	16 98		asl $98,x			asl 	esInt0,x
.3afb	36 a0		rol $a0,x			rol	 	esInt1,x
.3afd	36 a8		rol $a8,x			rol	 	esInt2,x
.3aff	36 b0		rol $b0,x			rol	 	esInt3,x
.3b01	60		rts				rts
.3b02					MInt32ShiftRight:
.3b02	56 b0		lsr $b0,x			lsr 	esInt3,x
.3b04	76 a8		ror $a8,x			ror 	esInt2,x
.3b06	76 a0		ror $a0,x			ror 	esInt1,x
.3b08	76 98		ror $98,x			ror 	esInt0,x
.3b0a	60		rts				rts
.3b0b					MInt32Zero:
.3b0b	b5 98		lda $98,x			lda 	esInt0,x
.3b0d	15 a0		ora $a0,x			ora 	esInt1,x
.3b0f	15 a8		ora $a8,x			ora 	esInt2,x
.3b11	15 b0		ora $b0,x			ora 	esInt3,x
.3b13	60		rts				rts
.3b14					MInt32Random:
.3b14	98		tya				tya
.3b15	48		pha				pha
.3b16	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3b18	ad 08 0d	lda $0d08			lda 	MSeed32+0 					; check the seed isn't zero
.3b1b	d0 03		bne $3b20			bne 	_Random1
.3b1d	a8		tay				tay 								; if so do it 256 times
.3b1e	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3b20					_Random1:
.3b20	0a		asl a				asl 	a
.3b21	2e 09 0d	rol $0d09			rol 	MSeed32+1
.3b24	2e 0a 0d	rol $0d0a			rol 	MSeed32+2
.3b27	2e 0b 0d	rol $0d0b			rol 	MSeed32+3
.3b2a	90 02		bcc $3b2e			bcc 	_Random2
.3b2c	49 c5		eor #$c5			eor 	#$C5
.3b2e					_Random2:
.3b2e	88		dey				dey
.3b2f	d0 ef		bne $3b20			bne 	_Random1
.3b31	8d 08 0d	sta $0d08			sta 	MSeed32+0 					; copy the seed in.
.3b34	95 98		sta $98,x			sta 	esInt0,x
.3b36	ad 09 0d	lda $0d09			lda 	MSeed32+1
.3b39	95 a0		sta $a0,x			sta 	esInt1,x
.3b3b	ad 0a 0d	lda $0d0a			lda 	MSeed32+2
.3b3e	95 a8		sta $a8,x			sta 	esInt2,x
.3b40	ad 0b 0d	lda $0d0b			lda 	MSeed32+3
.3b43	95 b0		sta $b0,x			sta 	esInt3,x
.3b45	68		pla				pla
.3b46	a8		tay				tay
.3b47	a9 00		lda #$00			lda 	#0
.3b49	95 90		sta $90,x			sta 	esType,x
.3b4b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3b4c					CheckToken:
.3b4c	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3b4e	d0 02		bne $3b52			bne 	_CTError
.3b50	c8		iny				iny
.3b51	60		rts				rts
.3b52					_CTError:
.3b52	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3b54	20 18 15	jsr $1518		jsr	errorHandler
.3b57					CheckRightParen:
.3b57	b1 28		lda ($28),y			lda 	(codePtr),y
.3b59	c8		iny				iny
.3b5a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3b5c	d0 01		bne $3b5f			bne 	_CRPError
.3b5e	60		rts				rts
.3b5f					_CRPError:
.3b5f	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3b61	20 18 15	jsr $1518		jsr	errorHandler
.3b64					CheckComma:
.3b64	b1 28		lda ($28),y			lda 	(codePtr),y
.3b66	c8		iny				iny
.3b67	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3b69	d0 01		bne $3b6c			bne 	_CCError
.3b6b	60		rts				rts
.3b6c					_CCError:
.3b6c	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3b6e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3b71					RSReset:
.3b71	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3b73	85 37		sta $37				sta 	rsPointer
.3b75	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3b77	85 38		sta $38				sta 	1+(rsPointer)
.3b79	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3b7b	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3b7e	60		rts				rts
.3b7f					RSClaim:
.3b7f	84 32		sty $32				sty 	tempShort 					; preserve Y
.3b81	48		pha				pha 								; save marker on stack.
.3b82	8a		txa				txa 								; get bytes required.
.3b83	38		sec				sec
.3b84	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3b86	65 37		adc $37				adc 	rsPointer
.3b88	85 37		sta $37				sta 	rsPointer
.3b8a	a5 38		lda $38				lda 	rsPointer+1
.3b8c	69 ff		adc #$ff			adc 	#$FF
.3b8e	85 38		sta $38				sta 	rsPointer+1
.3b90	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3b92	90 08		bcc $3b9c			bcc 	_RSCOverflow
.3b94	68		pla				pla 								; get marker back
.3b95	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3b97	91 37		sta ($37),y			sta 	(rsPointer),y
.3b99	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3b9b	60		rts				rts
.3b9c					_RSCOverflow:
.3b9c	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3b9e	20 18 15	jsr $1518		jsr	errorHandler
.3ba1					RSFree:
.3ba1	18		clc				clc
.3ba2	65 37		adc $37				adc 	rsPointer
.3ba4	85 37		sta $37				sta 	rsPointer
.3ba6	90 02		bcc $3baa			bcc 	_RSFExit
.3ba8	e6 38		inc $38				inc 	rsPointer+1
.3baa					_RSFExit:
.3baa	60		rts				rts
.3bab					RSSavePosition:
.3bab	84 32		sty $32				sty 	tempShort 					; save Y position
.3bad	a8		tay				tay 								; this is where we write it.
.3bae	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3bb0	91 37		sta ($37),y			sta 	(rsPointer),y
.3bb2	c8		iny				iny
.3bb3	a5 29		lda $29				lda 	codePtr+1
.3bb5	91 37		sta ($37),y			sta 	(rsPointer),y
.3bb7	c8		iny				iny
.3bb8	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3bba	91 37		sta ($37),y			sta 	(rsPointer),y
.3bbc	a8		tay				tay 								; fix Y back again to original value
.3bbd	60		rts				rts
.3bbe					RSLoadPosition:
.3bbe	a8		tay				tay
.3bbf	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3bc1	85 28		sta $28				sta 	codePtr
.3bc3	c8		iny				iny
.3bc4	b1 37		lda ($37),y			lda 	(rsPointer),y
.3bc6	85 29		sta $29				sta 	codePtr+1
.3bc8	c8		iny				iny
.3bc9	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3bcb	a8		tay				tay 								; to Y
.3bcc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3bcd					WarmStart:
.3bcd	a2 04		ldx #$04		ldx	#4
.3bcf	20 36 25	jsr $2536		jsr	interactionHandler

;******  Return to file: main/main.asm

.3bd2					mainHandler:
.3bd2	7c d5 3b	jmp ($3bd5,x)			jmp 	(mainVectors,x)
.3bd5					mainVectors:
>3bd5	f1 3b					.word _DummyControlHandler ; index 0
>3bd7	64 3b					.word CheckComma           ; index 2
>3bd9	57 3b					.word CheckRightParen      ; index 4
>3bdb	3e 2d					.word XCommandClear        ; index 6
>3bdd	67 34					.word LinkEvaluate         ; index 8
>3bdf	73 34					.word LinkEvaluateInteger  ; index 10
>3be1	7f 34					.word LinkEvaluateSmallInt ; index 12
>3be3	79 34					.word LinkEvaluateString   ; index 14
>3be5	6d 34					.word LinkEvaluateTerm     ; index 16
>3be7	33 3a					.word MLInt32ToString      ; index 18
>3be9	cd 2e					.word Command_XNew         ; index 20
>3beb	db 2e					.word XCommand_Run         ; index 22
>3bed	e7 2e					.word Command_RunFrom      ; index 24
>3bef	4b 39					.word LinkInt32FromString  ; index 26
.3bf1					_DummyControlHandler:
.3bf1	60		rts			rts

;******  Return to file: basic.asm

.3bf2					section_end_main:
.3bf2					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3bf2					StringChrs:
.3bf2	aa		tax				tax 								; set up stack
.3bf3	a9 02		lda #$02			lda 	#2
.3bf5	20 b5 3c	jsr $3cb5			jsr 	AllocateSoftString
.3bf8	98		tya				tya
.3bf9	20 db 3c	jsr $3cdb			jsr 	WriteSoftString
.3bfc					StringUpdate:
.3bfc	20 0a 3c	jsr $3c0a			jsr 	ReturnSoftString
.3bff	8a		txa				txa
.3c00	60		rts				rts
.3c01					StringNull:
.3c01	aa		tax				tax
.3c02	a9 01		lda #$01			lda 	#1
.3c04	20 b5 3c	jsr $3cb5			jsr 	AllocateSoftString
.3c07	4c fc 3b	jmp $3bfc			jmp 	StringUpdate
.3c0a					ReturnSoftString:
.3c0a	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3c0c	95 98		sta $98,x			sta 	esInt0,x
.3c0e	a5 3a		lda $3a				lda 	softMemAlloc+1
.3c10	95 a0		sta $a0,x			sta 	esInt1,x
.3c12	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3c14	95 a8		sta $a8,x			sta 	esInt2,x
.3c16	95 b0		sta $b0,x			sta 	esInt3,x
.3c18	a9 40		lda #$40			lda 	#$40 						; type string.
.3c1a	95 90		sta $90,x			sta 	esType,x
.3c1c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3c1d					STRCompare:
.3c1d	48		pha				pha 								; save A
.3c1e	aa		tax				tax 								; put stack pos in X
.3c1f	98		tya				tya
.3c20	48		pha				pha
.3c21	20 55 3c	jsr $3c55			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3c24	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3c26	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c28	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3c2a	90 02		bcc $3c2e			bcc 	_SCNotSmaller
.3c2c	b1 2c		lda ($2c),y			lda 	(temp1),y
.3c2e					_SCNotSmaller:
.3c2e	aa		tax				tax 								; put that in X. We compare this many chars first.
.3c2f					_SCCompareLoop:
.3c2f	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3c31	f0 0c		beq $3c3f			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3c33	ca		dex				dex 								; decrement chars to compare.
.3c34	c8		iny				iny 								; move to next character
.3c35	38		sec				sec 								; calculate s1[y]-s2[y]
.3c36	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c38	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3c3a	d0 0a		bne $3c46			bne 	_SCReturnResult 			; if different return sign of A
.3c3c	4c 2f 3c	jmp $3c2f			jmp 	_SCCompareLoop
.3c3f					_SCSameToEndShortest
.3c3f	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3c41	38		sec				sec
.3c42	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c44	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3c46					_SCReturnResult:
.3c46	08		php				php 								; set return to zero preserving PSW.
.3c47	a2 00		ldx #$00			ldx 	#0
.3c49	28		plp				plp
.3c4a	f0 05		beq $3c51			beq 	_SCExit 					; two values equal, then exit
.3c4c	ca		dex				dex 								; X = $FF
.3c4d	90 02		bcc $3c51			bcc 	_SCExit 					; if 1st < 2nd then -1
.3c4f	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3c51					_SCExit:
.3c51	68		pla				pla
.3c52	a8		tay				tay
.3c53	68		pla				pla
.3c54	60		rts				rts
.3c55					CopyStringPair:
.3c55	b5 99		lda $99,x			lda 	esInt0+1,x
.3c57	85 2c		sta $2c				sta 	temp1
.3c59	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3c5b	85 2d		sta $2d				sta 	temp1+1
.3c5d					CopyStringTop:
.3c5d	b5 98		lda $98,x			lda 	esInt0,x
.3c5f	85 2a		sta $2a				sta 	temp0
.3c61	b5 a0		lda $a0,x			lda 	esInt1,x
.3c63	85 2b		sta $2b				sta 	temp0+1
.3c65	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3c66					StringConcat:
.3c66	aa		tax				tax									; stack pos in X
.3c67	98		tya				tya
.3c68	48		pha				pha
.3c69	20 55 3c	jsr $3c55			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3c6c	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3c6d	a0 00		ldy #$00			ldy 	#0
.3c6f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c71	71 2c		adc ($2c),y			adc 	(temp1),y
.3c73	b0 1c		bcs $3c91			bcs 	_SCError 					; just too many characters here.
.3c75	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3c77	b0 18		bcs $3c91			bcs 	_SCError
.3c79	20 b5 3c	jsr $3cb5			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3c7c	20 ac 3c	jsr $3cac			jsr 	CopySoftToStack 			; copy that to the stack.
.3c7f	20 96 3c	jsr $3c96			jsr 	SCCopyTemp0 				; copy temp0
.3c82	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3c84	85 2a		sta $2a				sta 	temp0
.3c86	a5 2d		lda $2d				lda 	temp1+1
.3c88	85 2b		sta $2b				sta 	temp0+1
.3c8a	20 96 3c	jsr $3c96			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3c8d	68		pla				pla
.3c8e	a8		tay				tay
.3c8f	8a		txa				txa 								; and A
.3c90	60		rts				rts
.3c91					_SCError:
.3c91	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3c93	20 18 15	jsr $1518		jsr	errorHandler
.3c96					SCCopyTemp0:
.3c96	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3c98	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c9a	85 2e		sta $2e				sta 	temp2
.3c9c					_SCCopyLoop:
.3c9c	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3c9e	f0 0b		beq $3cab			beq 	_SCCopyExit
.3ca0	c6 2e		dec $2e				dec 	temp2
.3ca2	c8		iny				iny 								; get next char
.3ca3	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ca5	20 db 3c	jsr $3cdb			jsr 	WriteSoftString 			; write to soft string.
.3ca8	4c 9c 3c	jmp $3c9c			jmp 	_SCCopyLoop
.3cab					_SCCopyExit:
.3cab	60		rts				rts
.3cac					CopySoftToStack:
.3cac	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3cae	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3cb0	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3cb2	95 a0		sta $a0,x			sta 	esInt1,x
.3cb4	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3cb5					AllocateSoftString:
.3cb5	85 32		sta $32				sta 	tempShort 					; save count
.3cb7	98		tya				tya
.3cb8	48		pha				pha
.3cb9	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3cbb	d0 09		bne $3cc6			bne 	_ASSDone
.3cbd	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3cbf	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3cc1	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3cc3	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3cc4	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3cc6					_ASSDone:
.3cc6	38		sec				sec 								; allocate downwards enough memory
.3cc7	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3cc9	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3ccb	85 39		sta $39				sta 	softMemAlloc
.3ccd	a5 3a		lda $3a				lda 	softMemAlloc+1
.3ccf	e9 00		sbc #$00			sbc 	#0
.3cd1	85 3a		sta $3a				sta 	softMemAlloc+1
.3cd3	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3cd5	a8		tay				tay
.3cd6	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3cd8	68		pla				pla
.3cd9	a8		tay				tay
.3cda	60		rts				rts
.3cdb					WriteSoftString:
.3cdb	84 32		sty $32				sty 	tempShort 					; save Y
.3cdd	48		pha				pha 								; save character on stack
.3cde	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3ce0	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3ce2	18		clc				clc
.3ce3	69 01		adc #$01			adc 	#1
.3ce5	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3ce7	a8		tay				tay 								; offset in Y
.3ce8	68		pla				pla 								; get char and write.
.3ce9	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3ceb	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3ced	60		rts				rts
.3cee					StrClone:
.3cee	aa		tax				tax 								; set up stack.
.3cef	98		tya				tya
.3cf0	48		pha				pha
.3cf1	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3cf3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3cf5	18		clc				clc
.3cf6	69 01		adc #$01			adc 	#1
.3cf8	20 b5 3c	jsr $3cb5			jsr 	AllocateSoftString 			; allocate soft memory
.3cfb	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3cfd	95 98		sta $98,x			sta 	esInt0,x
.3cff	a5 3a		lda $3a				lda 	softMemAlloc+1
.3d01	95 a0		sta $a0,x			sta 	esInt1,x
.3d03	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3d05	95 a8		sta $a8,x			sta 	esInt2,x
.3d07	95 b0		sta $b0,x			sta 	esInt3,x
.3d09	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3d0b	95 90		sta $90,x			sta 	esType,x
.3d0d	20 96 3c	jsr $3c96			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3d10	68		pla				pla
.3d11	a8		tay				tay
.3d12	8a		txa				txa
.3d13	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3d14					CaseString:
.3d14	48		pha				pha 								; save A and copy to X
.3d15	aa		tax				tax
.3d16	98		tya				tya
.3d17	48		pha				pha
.3d18	20 5d 3c	jsr $3c5d			jsr 	CopyStringTop 				; target string -> temp0
.3d1b	a0 00		ldy #$00			ldy 	#0
.3d1d	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3d1f	18		clc				clc
.3d20	69 01		adc #$01			adc 	#1 							; one more for length byte
.3d22	20 b5 3c	jsr $3cb5			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d25	20 ac 3c	jsr $3cac			jsr 	CopySoftToStack 			; copy that to the stack.
.3d28	a0 00		ldy #$00			ldy 	#0
.3d2a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3d2c	aa		tax				tax
.3d2d					_CSCopy:
.3d2d	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3d2f	f0 24		beq $3d55			beq 	_CSExit
.3d31	ca		dex				dex
.3d32	c8		iny				iny
.3d33	68		pla				pla 								; check direction
.3d34	48		pha				pha
.3d35	f0 0c		beq $3d43			beq 	_CSUpper
.3d37	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3d39	c9 41		cmp #$41			cmp 	#"A"
.3d3b	90 12		bcc $3d4f			bcc 	_CSWrite
.3d3d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3d3f	b0 0e		bcs $3d4f			bcs 	_CSWrite
.3d41	90 0a		bcc $3d4d			bcc 	_CSFlipWrite
.3d43					_CSUpper:
.3d43	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3d45	c9 61		cmp #$61			cmp 	#"a"
.3d47	90 06		bcc $3d4f			bcc 	_CSWrite
.3d49	c9 7b		cmp #$7b			cmp 	#"z"+1
.3d4b	b0 02		bcs $3d4f			bcs 	_CSWrite
.3d4d					_CSFlipWrite:
.3d4d	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3d4f					_CSWrite:
.3d4f	20 db 3c	jsr $3cdb			jsr 	WriteSoftString 			; add to soft string.
.3d52	4c 2d 3d	jmp $3d2d			jmp 	_CSCopy
.3d55					_CSExit:
.3d55	68		pla				pla
.3d56	a8		tay				tay
.3d57	68		pla				pla
.3d58	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3d59					StringSubstring:
.3d59	48		pha				pha
.3d5a	aa		tax				tax 								; access stack.
.3d5b	98		tya				tya
.3d5c	48		pha				pha
.3d5d	20 5d 3c	jsr $3c5d			jsr 	CopyStringTop 				; point temp0 to the string.
.3d60	a0 00		ldy #$00			ldy 	#0 							; get length.
.3d62	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3d64	85 2c		sta $2c				sta 	temp1
.3d66	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3d68	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3d6a	f0 02		beq $3d6e			beq 	_SSBOkay
.3d6c	b0 2a		bcs $3d98			bcs 	_SSBReturnNull
.3d6e					_SSBOkay:
.3d6e	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3d70	18		clc				clc
.3d71	69 01		adc #$01			adc 	#1
.3d73	38		sec				sec
.3d74	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3d76	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3d78	90 02		bcc $3d7c			bcc		_SSBTrunc
.3d7a	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3d7c					_SSBTrunc:
.3d7c	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3d7e	18		clc				clc
.3d7f	69 01		adc #$01			adc 	#1 							; add 1
.3d81	20 b5 3c	jsr $3cb5			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d84	20 ac 3c	jsr $3cac			jsr 	CopySoftToStack 			; copy that to the stack.
.3d87	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3d89					_SSBCopyLoop:
.3d89	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3d8b	f0 0e		beq $3d9b			beq 	_SSBExit
.3d8d	c6 2d		dec $2d				dec 	temp1+1
.3d8f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3d91	20 db 3c	jsr $3cdb			jsr 	WriteSoftString
.3d94	c8		iny				iny
.3d95	4c 89 3d	jmp $3d89			jmp 	_SSBCopyLoop
.3d98					_SSBReturnNull:
.3d98	20 9f 3d	jsr $3d9f			jsr 	ReturnNull
.3d9b					_SSBExit:
.3d9b	68		pla				pla
.3d9c	a8		tay				tay
.3d9d	68		pla				pla
.3d9e	60		rts				rts
.3d9f					ReturnNull:
.3d9f	a9 00		lda #$00			lda 	#0 							; clear null string
.3da1	8d ce 0a	sta $0ace			sta 	NullString
.3da4	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3da6	95 98		sta $98,x			sta 	esInt0,x
.3da8	a9 0a		lda #$0a			lda 	#NullString >> 8
.3daa	95 a0		sta $a0,x			sta 	esInt1,x
.3dac	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d0c					srcStrLen:
>0d0c							.fill 	1
.3dad					StringWrite:
.3dad	aa		tax				tax
.3dae	48		pha				pha
.3daf	98		tya				tya
.3db0	48		pha				pha
.3db1	20 d8 3d	jsr $3dd8			jsr 	CheckOverwriteCurrent
.3db4	b0 0d		bcs $3dc3			bcs		_SWCopyCurrent
.3db6	20 16 3e	jsr $3e16			jsr 	RequiresConcretion
.3db9	90 0e		bcc $3dc9			bcc 	_SWWriteReference
.3dbb	20 79 3e	jsr $3e79			jsr 	CheckSpecialConcretion
.3dbe	b0 09		bcs $3dc9			bcs 	_SWWriteReference
.3dc0	20 2a 3e	jsr $3e2a			jsr 	AllocateHardMemory
.3dc3					_SWCopyCurrent:
.3dc3	20 5d 3e	jsr $3e5d			jsr 	CopyStringToHardMemory
.3dc6	4c d4 3d	jmp $3dd4			jmp 	_SWExit
.3dc9					_SWWriteReference
.3dc9	a0 00		ldy #$00			ldy 	#0
.3dcb	a5 2a		lda $2a				lda 	temp0
.3dcd	91 2c		sta ($2c),y			sta 	(temp1),y
.3dcf	c8		iny				iny
.3dd0	a5 2b		lda $2b				lda 	temp0+1
.3dd2	91 2c		sta ($2c),y			sta 	(temp1),y
.3dd4					_SWExit:
.3dd4	68		pla				pla
.3dd5	a8		tay				tay
.3dd6	68		pla				pla
.3dd7	60		rts				rts
.3dd8					CheckOverwriteCurrent:
.3dd8	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3dda	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3ddc	85 2b		sta $2b				sta 	temp0+1
.3dde	b5 99		lda $99,x			lda 	esInt0+1,x
.3de0	85 2a		sta $2a				sta 	temp0
.3de2	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3de4	8d 0c 0d	sta $0d0c			sta 	srcStrLen
.3de7	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3de9	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3deb	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3ded	85 2d		sta $2d				sta 	temp1+1
.3def	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3df1	b1 2c		lda ($2c),y			lda 	(temp1),y
.3df3	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3df5	90 1b		bcc $3e12			bcc 	_COCFail 				; in hard memory.
.3df7	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3df9	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3dfb	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3dfd	85 2e		sta $2e				sta 	temp2
.3dff	c8		iny				iny
.3e00	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e02	e9 00		sbc #$00			sbc 	#0
.3e04	85 2f		sta $2f				sta 	temp2+1
.3e06	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3e08	b1 2e		lda ($2e),y			lda 	(temp2),y
.3e0a	38		sec				sec  							; maximum character capacity.
.3e0b	e9 02		sbc #$02			sbc 	#2
.3e0d	cd 0c 0d	cmp $0d0c			cmp 	srcStrLen 				; if >= the required length
.3e10	b0 02		bcs $3e14			bcs 	_COCCanReuse
.3e12					_COCFail:
.3e12	18		clc				clc
.3e13	60		rts				rts
.3e14					_COCCanReuse:
.3e14	38		sec				sec
.3e15	60		rts				rts
.3e16					RequiresConcretion:
.3e16	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3e18	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3e1a	b0 0a		bcs $3e26			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3e1c	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3e1e	f0 08		beq $3e28			beq 	_RCFail 				; if not, this cannot be soft memory.
.3e20	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3e22	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3e24	90 02		bcc $3e28			bcc 	_RCFail 				; so concreting
.3e26					_RCSucceed:
.3e26	38		sec				sec
.3e27	60		rts				rts
.3e28					_RCFail:
.3e28	18		clc				clc
.3e29	60		rts				rts
.3e2a					AllocateHardMemory:
.3e2a	98		tya				tya
.3e2b	48		pha				pha
.3e2c	ad 0c 0d	lda $0d0c			lda 	srcStrLen 				; characters in string
.3e2f	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3e31	b0 04		bcs $3e37			bcs 	_AHMSetMax 				; max out that amount.
.3e33	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3e35	90 02		bcc $3e39			bcc 	_AHMIsOkay
.3e37					_AHMSetMax:
.3e37	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3e39					_AHMIsOkay:
.3e39	48		pha				pha	 							; save size to be allocated
.3e3a	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3e3c	38		sec				sec  							; and copy result to TOS as target address.
.3e3d	65 33		adc $33				adc 	highMemory
.3e3f	85 33		sta $33				sta 	highMemory
.3e41	a5 34		lda $34				lda 	highMemory+1
.3e43	69 ff		adc #$ff			adc 	#$FF
.3e45	85 34		sta $34				sta 	highMemory+1
.3e47	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3e49	68		pla				pla 							; get the total size of the storage block
.3e4a	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3e4c	18		clc				clc
.3e4d	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3e4f	69 01		adc #$01			adc 	#1
.3e51	91 2c		sta ($2c),y			sta 	(temp1),y
.3e53	a5 34		lda $34				lda 	highMemory+1
.3e55	69 00		adc #$00			adc 	#0
.3e57	c8		iny				iny
.3e58	91 2c		sta ($2c),y			sta 	(temp1),y
.3e5a	68		pla				pla
.3e5b	a8		tay				tay
.3e5c	60		rts				rts
.3e5d					CopyStringToHardMemory:
.3e5d	98		tya				tya
.3e5e	48		pha				pha
.3e5f	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3e61	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e63	85 2e		sta $2e				sta 	temp2
.3e65	c8		iny				iny
.3e66	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e68	85 2f		sta $2f				sta 	temp2+1
.3e6a	ac 0c 0d	ldy $0d0c			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3e6d					_CSTHMLoop:
.3e6d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e6f	91 2e		sta ($2e),y			sta 	(temp2),y
.3e71	88		dey				dey
.3e72	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3e74	d0 f7		bne $3e6d			bne 	_CSTHMLoop
.3e76	68		pla				pla
.3e77	a8		tay				tay
.3e78	60		rts				rts
.3e79					CheckSpecialConcretion:
.3e79	ad 0c 0d	lda $0d0c			lda 	srcStrLen 				; check string is null e.g. length = 0
.3e7c	f0 02		beq $3e80			beq 	_CSCNullString
.3e7e	18		clc				clc
.3e7f	60		rts				rts
.3e80					_CSCNullString:
.3e80	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3e82	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3e85	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3e87	85 2a		sta $2a				sta 	temp0
.3e89	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3e8b	85 2b		sta $2b				sta 	1+(temp0)
.3e8d	38		sec				sec
.3e8e	60		rts				rts

;******  Return to file: string/string.asm

.3e8f					stringHandler:
.3e8f	7c 92 3e	jmp ($3e92,x)			jmp 	(stringVectors,x)
.3e92					stringVectors:
>3e92	a4 3e					.word _DummyControlHandler ; index 0
>3e94	f2 3b					.word StringChrs           ; index 2
>3e96	ee 3c					.word StrClone             ; index 4
>3e98	66 3c					.word StringConcat         ; index 6
>3e9a	01 3c					.word StringNull           ; index 8
>3e9c	1d 3c					.word STRCompare           ; index 10
>3e9e	14 3d					.word CaseString           ; index 12
>3ea0	59 3d					.word StringSubstring      ; index 14
>3ea2	ad 3d					.word StringWrite          ; index 16
.3ea4					_DummyControlHandler:
.3ea4	60		rts			rts

;******  Return to file: basic.asm

.3ea5					section_end_string:
.3ea5					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d0d					deTokeniseVector:
>0d0d							.fill 	2
.0d0f					lastCharacterClass:
>0d0f							.fill 	1
.0d10					indent:
>0d10							.fill 	1
.3ea5					ListLine:
.3ea5	48		pha				pha								; enter here to list to console. sets the output vector
.3ea6	a9 dd		lda #$dd			lda 	#(deTokenPrint) & $FF
.3ea8	8d 0d 0d	sta $0d0d			sta 	deTokeniseVector
.3eab	a9 3f		lda #$3f			lda 	#(deTokenPrint) >> 8
.3ead	8d 0e 0d	sta $0d0e			sta 	1+(deTokeniseVector)
.3eb0	68		pla				pla
.3eb1					Detokenise:
.3eb1	18		clc				clc 							; space required for line number.
.3eb2	69 06		adc #$06			adc 	#6
.3eb4	8d 10 0d	sta $0d10			sta 	indent
.3eb7	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3eb9	8d 0f 0d	sta $0d0f			sta 	lastCharacterClass
.3ebc	a2 02		ldx #$02			ldx 	#2
.3ebe	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3ec0	95 a8		sta $a8,x			sta 	esInt2,x
.3ec2	95 b0		sta $b0,x			sta 	esInt3,x
.3ec4	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3ec6	b1 28		lda ($28),y			lda 	(codePtr),y
.3ec8	95 98		sta $98,x			sta 	esInt0,x
.3eca	c8		iny				iny
.3ecb	b1 28		lda ($28),y			lda 	(codePtr),y
.3ecd	95 a0		sta $a0,x			sta 	esInt1,x
.3ecf	a9 84		lda #$84			lda 	#LTYLineNumber
.3ed1	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.3ed4	a9 0a		lda #$0a			lda 	#10 					; base 10
.3ed6	20 7c 3f	jsr $3f7c			jsr 	DTPrintInteger 			; print as integer.
.3ed9	a0 00		ldy #$00			ldy 	#0 						; get length
.3edb	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3edd	aa		tax				tax
.3ede					_DTPadOut:
.3ede	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3ee0	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.3ee3	e8		inx				inx
.3ee4	ec 10 0d	cpx $0d10			cpx 	indent
.3ee7	d0 f5		bne $3ede			bne 	_DTPadOut
.3ee9	a0 03		ldy #$03			ldy 	#3 						; start position.
.3eeb					_DTListLoop:
.3eeb	b1 28		lda ($28),y			lda 	(codePtr),y
.3eed	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3eef	f0 5e		beq $3f4f			beq 	_DTIsString
.3ef1	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3ef3	f0 56		beq $3f4b			beq 	_DTIsFloat
.3ef5	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3ef7	f0 16		beq $3f0f			beq 	_DTHexConstant
.3ef9	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3efb	d0 06		bne $3f03			bne 	_DTNotEnd
.3efd	a9 ff		lda #$ff			lda 	#255 					; print CR
.3eff	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.3f02	60		rts				rts
.3f03					_DTNotEnd:
.3f03	c9 00		cmp #$00			cmp 	#0
.3f05	30 38		bmi $3f3f			bmi 	_DTIsToken
.3f07	c9 40		cmp #$40			cmp 	#$40
.3f09	90 3a		bcc $3f45			bcc 	_DTIsIdentifier
.3f0b	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3f0d	d0 0d		bne $3f1c			bne 	_DTConstant
.3f0f					_DTHexConstant:
.3f0f	a9 26		lda #$26			lda 	#"&"
.3f11	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.3f14	c8		iny				iny
.3f15	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3f17	20 f9 3f	jsr $3ff9			jsr 	DTSwitchMode
.3f1a	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3f1c					_DTConstant:
.3f1c	48		pha				pha
.3f1d	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3f1f	20 f9 3f	jsr $3ff9			jsr 	DTSwitchMode
.3f22	a9 86		lda #$86			lda 	#LTYConstant
.3f24	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.3f27	a2 02		ldx #$02			ldx 	#2 						; get its value
.3f29	8a		txa				txa
.3f2a	a2 10		ldx #$10		ldx	#16
.3f2c	20 d2 3b	jsr $3bd2		jsr	mainHandler
.3f2f	aa		tax				tax
.3f30	68		pla				pla 							; get base back
.3f31	85 32		sta $32				sta 	tempShort
.3f33	98		tya				tya
.3f34	48		pha				pha
.3f35	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3f37	20 7c 3f	jsr $3f7c			jsr 	DTPrintInteger
.3f3a	68		pla				pla
.3f3b	a8		tay				tay
.3f3c	4c eb 3e	jmp $3eeb			jmp 	_DTListLoop
.3f3f					_DTIsToken:
.3f3f	20 52 40	jsr $4052			jsr 	DTDecodeToken
.3f42	4c eb 3e	jmp $3eeb			jmp 	_DTListLoop
.3f45					_DTIsIdentifier:
.3f45	20 0b 40	jsr $400b			jsr 	DTIdentifier
.3f48	4c eb 3e	jmp $3eeb			jmp 	_DTListLoop
.3f4b					_DTIsFloat:
>3f4b	db						.byte 	$DB
.3f4c	4c 4b 3f	jmp $3f4b			jmp 	_DTIsFloat
.3f4f					_DTIsString:
.3f4f	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3f51	20 f9 3f	jsr $3ff9			jsr 	DTSwitchMode
.3f54	a9 81		lda #$81			lda 	#LTYString
.3f56	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.3f59	a9 22		lda #$22			lda 	#'"'						; open quote
.3f5b	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.3f5e	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3f60	8a		txa				txa
.3f61	a2 10		ldx #$10		ldx	#16
.3f63	20 d2 3b	jsr $3bd2		jsr	mainHandler
.3f66	aa		tax				tax
.3f67	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.3f69	85 2a		sta $2a				sta 	temp0
.3f6b	b5 a0		lda $a0,x			lda 	esInt1,x
.3f6d	85 2b		sta $2b				sta 	temp0+1
.3f6f	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3f71	20 8e 3f	jsr $3f8e			jsr 	DTPrintLengthPrefix
.3f74	a9 22		lda #$22			lda 	#'"'
.3f76	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.3f79	4c eb 3e	jmp $3eeb			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d11					tPrintCount:
>0d11							.fill 	1
.3f7c					DTPrintInteger:
.3f7c	48		pha				pha									; save base
.3f7d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3f7f	85 2a		sta $2a				sta 	temp0
.3f81	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3f83	85 2b		sta $2b				sta 	1+(temp0)
.3f85	68		pla				pla
.3f86	a8		tay				tay
.3f87	8a		txa				txa
.3f88	a2 12		ldx #$12		ldx	#18
.3f8a	20 d2 3b	jsr $3bd2		jsr	mainHandler
.3f8d	aa		tax				tax 								; then drop through here.
.3f8e					DTPrintLengthPrefix:
.3f8e	aa		tax				tax 								; A = 0 = don't case convert.
.3f8f	98		tya				tya
.3f90	48		pha				pha
.3f91	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3f93	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f95	8d 11 0d	sta $0d11			sta 	tPrintCount
.3f98	f0 1b		beq $3fb5			beq 	_DTPLPExit 					; empty string
.3f9a					_DTPLPLoop:
.3f9a	c8		iny				iny 								; get next.
.3f9b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f9d	29 7f		and #$7f			and 	#$7F
.3f9f	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3fa1	f0 0a		beq $3fad			beq 	_DTPLPNoCase
.3fa3	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3fa5	90 06		bcc $3fad			bcc 	_DTPLPNoCase
.3fa7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3fa9	b0 02		bcs $3fad			bcs 	_DTPLPNoCase
.3fab	49 20		eor #$20			eor 	#"A"^"a"
.3fad					_DTPLPNoCase
.3fad	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter 		; call handler
.3fb0	ce 11 0d	dec $0d11			dec 	tPrintCount 				; do all the characters
.3fb3	d0 e5		bne $3f9a			bne 	_DTPLPLoop
.3fb5					_DTPLPExit:
.3fb5	68		pla				pla
.3fb6	a8		tay				tay
.3fb7	60		rts				rts
.3fb8					ListOutputCharacter:
.3fb8	85 32		sta $32				sta 	tempShort
.3fba	48		pha				pha
.3fbb	8a		txa				txa
.3fbc	48		pha				pha
.3fbd	98		tya				tya
.3fbe	48		pha				pha
.3fbf	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3fc1	c9 20		cmp #$20			cmp 	#32
.3fc3	b0 0c		bcs $3fd1			bcs		_LOCHiBit
.3fc5	09 40		ora #$40			ora 	#64 						; conversion
.3fc7	c9 40		cmp #$40			cmp 	#64							; make l/c
.3fc9	f0 06		beq $3fd1			beq 	_LOCHiBit
.3fcb	c9 5b		cmp #$5b			cmp 	#65+26
.3fcd	b0 02		bcs $3fd1			bcs 	_LOCHiBit
.3fcf	69 20		adc #$20			adc 	#32
.3fd1					_LOCHiBit:
.3fd1	20 da 3f	jsr $3fda			jsr 	_LOCCallVector				; call o/p handler routine
.3fd4	68		pla				pla
.3fd5	a8		tay				tay
.3fd6	68		pla				pla
.3fd7	aa		tax				tax
.3fd8	68		pla				pla
.3fd9					_LOCExit:
.3fd9	60		rts				rts
.3fda					_LOCCallVector:
.3fda	6c 0d 0d	jmp ($0d0d)			jmp 	(deTokeniseVector)
.3fdd					deTokenPrint:
.3fdd	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3fdf	30 06		bmi $3fe7			bmi 	_dtpInk
.3fe1	a2 16		ldx #$16		ldx	#22
.3fe3	20 f6 14	jsr $14f6		jsr	deviceHandler
.3fe6	60		rts				rts
.3fe7	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3fe9	f0 08		beq $3ff3			beq 	_dtpCR						; except $FF => CRLF
.3feb	29 07		and #$07			and 	#7
.3fed	a2 08		ldx #$08		ldx	#8
.3fef	20 f6 14	jsr $14f6		jsr	deviceHandler
.3ff2	60		rts				rts
.3ff3					_dtpCR:
.3ff3	a2 06		ldx #$06		ldx	#6
.3ff5	20 f6 14	jsr $14f6		jsr	deviceHandler
.3ff8	60		rts				rts
.3ff9					DTSwitchMode:
.3ff9	cd 0f 0d	cmp $0d0f			cmp 	LastCharacterClass 			; if changed, update character class
.3ffc	f0 04		beq $4002			beq 	_DTSMNoChange
.3ffe	8d 0f 0d	sta $0d0f			sta 	LastCharacterClass
.4001					_DTSMExit:
.4001	60		rts				rts
.4002					_DTSMNoChange:
.4002	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.4004	f0 fb		beq $4001			beq 	_DTSMExit 					; need a space.
.4006	a9 20		lda #$20			lda 	#" "
.4008	4c b8 3f	jmp $3fb8			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.400b					DTIdentifier:
.400b	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.400d	20 f9 3f	jsr $3ff9			jsr 	DTSwitchMode
.4010	a9 87		lda #$87			lda 	#LTYIdentifier
.4012	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.4015					_DTILoop:
.4015	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.4017	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4019	d0 02		bne $401d			bne 	_DTINotUS
.401b	a9 5f		lda #$5f			lda 	#"_"
.401d					_DTINotUS:
.401d	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.4020	c8		iny				iny
.4021	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.4023	c9 3a		cmp #$3a			cmp 	#$3A
.4025	90 ee		bcc $4015			bcc 	_DTILoop
.4027	c8		iny				iny
.4028	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.402a	f0 25		beq $4051			beq 	_DTIExit 					; no postfix.
.402c	48		pha				pha
.402d	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.402f	8d 0f 0d	sta $0d0f			sta 	LastCharacterClass
.4032	a9 82		lda #$82			lda 	#LTYPunctuation
.4034	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.4037	68		pla				pla
.4038	c9 3b		cmp #$3b			cmp 	#$3B
.403a	f0 10		beq $404c			beq 	_DTIArray
.403c	4a		lsr a				lsr 	a 							; array flag in C
.403d	08		php				php
.403e	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.4040	f0 02		beq $4044			beq 	_DTIDollar
.4042	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.4044					_DTIDollar:
.4044	49 24		eor #$24			eor 	#"$"
.4046	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.4049	28		plp				plp
.404a	90 05		bcc $4051			bcc 	_DTIExit
.404c					_DTIArray:
.404c	a9 28		lda #$28			lda 	#"("
.404e	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.4051					_DTIExit:
.4051	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4052					DTDecodeToken:
.4052	a2 00		ldx #$00			ldx 	#0 							; table number to use
.4054	b1 28		lda ($28),y			lda 	(codePtr),y
.4056	c9 84		cmp #$84			cmp 	#$84
.4058	b0 05		bcs $405f			bcs 	_DTNotShift
.405a	29 03		and #$03			and 	#3 							; get the shift 1..3
.405c	0a		asl a				asl 	a 							; put 2 x in X
.405d	aa		tax				tax
.405e	c8		iny				iny
.405f					_DTNotShift:
.405f	bd 61 43	lda $4361,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.4062	85 2a		sta $2a				sta 	temp0 						; point into temp0
.4064	bd 62 43	lda $4362,x			lda 	TokenTableAddress+1,x
.4067	85 2b		sta $2b				sta 	temp0+1
.4069	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.406b	c8		iny				iny 								; consume it.
.406c	aa		tax				tax
.406d	98		tya				tya
.406e	48		pha				pha
.406f					_DTFindText:
.406f	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.4071	f0 11		beq $4084			beq 	_DTFoundText
.4073	ca		dex				dex
.4074	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.4076	38		sec				sec
.4077	b1 2a		lda ($2a),y			lda 	(temp0),y
.4079	65 2a		adc $2a				adc 	temp0
.407b	85 2a		sta $2a				sta 	temp0
.407d	90 f0		bcc $406f			bcc 	_DTFindText
.407f	e6 2b		inc $2b				inc 	temp0+1
.4081	4c 6f 40	jmp $406f			jmp 	_DTFindText
.4084					_DTFoundText:
.4084	a0 01		ldy #$01			ldy 	#1 							; get first character
.4086	b1 2a		lda ($2a),y			lda 	(temp0),y
.4088	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.408a	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.408c	90 11		bcc $409f			bcc 	_DTIsPunctuation
.408e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4090	b0 0d		bcs $409f			bcs 	_DTIsPunctuation
.4092	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4094	20 f9 3f	jsr $3ff9			jsr 	DTSwitchMode
.4097	a9 83		lda #$83			lda 	#LTYKeyword
.4099	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.409c	4c a9 40	jmp $40a9			jmp 	_DTPrint
.409f					_DTIsPunctuation:
.409f	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.40a1	20 f9 3f	jsr $3ff9			jsr 	DTSwitchMode
.40a4	a9 82		lda #$82			lda 	#LTYPunctuation
.40a6	20 b8 3f	jsr $3fb8			jsr 	ListOutputCharacter
.40a9					_DTPrint:
.40a9	a9 01		lda #$01			lda 	#1 							; fix case.
.40ab	20 8e 3f	jsr $3f8e			jsr 	DTPrintLengthPrefix 		; print it out.
.40ae	a0 00		ldy #$00			ldy 	#0
.40b0	b1 2a		lda ($2a),y			lda 	(temp0),y
.40b2	a8		tay				tay
.40b3	b1 2a		lda ($2a),y			lda 	(temp0),y
.40b5	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.40b7	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.40b9	90 04		bcc $40bf			bcc 	_DTIsNowPunctuation
.40bb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40bd	90 05		bcc $40c4			bcc 	_DTPExit
.40bf					_DTIsNowPunctuation:
.40bf	a9 01		lda #$01			lda 	#1
.40c1	8d 0f 0d	sta $0d0f			sta		LastCharacterClass
.40c4					_DTPExit:
.40c4	68		pla				pla
.40c5	a8		tay				tay
.40c6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d12					currentSet:
>0d12							.fill 	1
.40c7					TokenSearch:
.40c7	8a		txa				txa
.40c8	48		pha				pha
.40c9	98		tya				tya
.40ca	48		pha				pha
.40cb	a9 00		lda #$00			lda 	#0
.40cd	8d 12 0d	sta $0d12			sta 	currentSet
.40d0					_TSLoop:
.40d0	ad 12 0d	lda $0d12			lda 	currentSet 					; 2 x currentset in X
.40d3	0a		asl a				asl 	a
.40d4	aa		tax				tax
.40d5	bd 61 43	lda $4361,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.40d8	85 2a		sta $2a				sta 	temp0
.40da	bd 62 43	lda $4362,x			lda 	TokenTableAddress+1,x
.40dd	85 2b		sta $2b				sta 	temp0+1
.40df	20 06 41	jsr $4106			jsr 	TokenSearchOne 				; search one table
.40e2	b0 0d		bcs $40f1			bcs 	_TSFound 					; found a token.
.40e4	ee 12 0d	inc $0d12			inc 	currentSet 					; next set
.40e7	ad 12 0d	lda $0d12			lda 	currentSet
.40ea	c9 04		cmp #$04			cmp 	#4
.40ec	d0 e2		bne $40d0			bne 	_TSLoop 					; back if not done all four.
.40ee	18		clc				clc 								; clear carry and exit
.40ef	90 10		bcc $4101			bcc 	_TSExit
.40f1					_TSFound:
.40f1	48		pha				pha 								; save token
.40f2	ad 12 0d	lda $0d12			lda 	currentSet					; if set zero no shift
.40f5	f0 05		beq $40fc			beq 	_TSNoShift
.40f7	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.40f9	20 b7 41	jsr $41b7			jsr 	TokenWrite
.40fc					_TSNoShift:
.40fc	68		pla				pla 								; get token back
.40fd	20 b7 41	jsr $41b7			jsr 	TokenWrite 					; write it
.4100	38		sec				sec 								; carry set indicating success
.4101					_TSExit:
.4101	68		pla				pla
.4102	a8		tay				tay
.4103	68		pla				pla
.4104	aa		tax				tax
.4105	60		rts				rts
.4106					TokenSearchOne:
.4106	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.4108					_TSOLoop:
.4108	a0 00		ldy #$00			ldy 	#0
.410a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.410c	f0 26		beq $4134			beq 	_TSOFail 					; if zero, end of table
.410e	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4111	f0 11		beq $4124			beq 	_TSOCheckText
.4113					_TSONext:
.4113	e8		inx				inx 								; bump token
.4114	a0 00		ldy #$00			ldy 	#0							; get length
.4116	b1 2a		lda ($2a),y			lda 	(temp0),y
.4118	38		sec				sec
.4119	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.411b	85 2a		sta $2a				sta 	temp0
.411d	90 e9		bcc $4108			bcc 	_TSOLoop
.411f	e6 2b		inc $2b				inc 	temp0+1
.4121	4c 08 41	jmp $4108			jmp 	_TSOLoop
.4124					_TSOCheckText:
.4124	a8		tay				tay 								; compare length downto 1.
.4125					_TSOCheckLoop:
.4125	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.4127	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.412a	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.412c	d0 e5		bne $4113			bne 	_TSONext 					; different goto next.
.412e	88		dey				dey 								; do all
.412f	d0 f4		bne $4125			bne 	_TSOCheckLoop
.4131	8a		txa				txa 								; return token in A and carry set
.4132	38		sec				sec
.4133	60		rts				rts
.4134					_TSOFail:
.4134	18		clc				clc
.4135	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.4136					TokTest:
.4136	a2 ff		ldx #$ff				ldx 	#$FF
.4138	9a		txs					txs
.4139	a9 56		lda #$56			lda 	#(TokenText1) & $FF
.413b	85 28		sta $28				sta 	codePtr
.413d	a9 41		lda #$41			lda 	#(TokenText1) >> 8
.413f	85 29		sta $29				sta 	1+(codePtr)
.4141	20 56 41	jsr $4156				jsr 	Tokenise
.4144	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.4146	bd 56 41	lda $4156,x	_TokCheck:	lda 	TokenBytes1,x
.4149	dd 16 0d	cmp $0d16,x				cmp 	tokenBuffer,x
.414c	d0 fe		bne $414c	_TokFail:	bne 	_TokFail	 		; error.
.414e	e8		inx					inx
.414f	c9 80		cmp #$80				cmp 	#$80
.4151	d0 f3		bne $4146				bne 	_TokCheck
.4153	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.4156					TokenText1:
.4156					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d13					tokenHeader:
>0d13							.fill 	3
.0d16					tokenBuffer:
>0d16							.fill 	256
.0e16					tokenBufferIndex:
>0e16							.fill 	1
.4156					Tokenise:
.4156	20 d0 41	jsr $41d0			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.4159					TokeniseASCIIZ:
.4159	20 e1 41	jsr $41e1			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.415c	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.415e	8d 16 0e	sta $0e16			sta 	tokenBufferIndex
.4161	a8		tay				tay 								; start pointer
.4162	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.4164	8d 16 0d	sta $0d16			sta 	tokenBuffer
.4167					_TokLoop:
.4167	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4169	f0 46		beq $41b1			beq 	_TokExit 					; if zero, then exit.
.416b	c8		iny				iny 								; skip over spaces.
.416c	c9 20		cmp #$20			cmp 	#" "
.416e	f0 f7		beq $4167			beq 	_TokLoop
.4170	88		dey				dey 								; point back to character.
.4171	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.4173	f0 18		beq $418d			beq 	_TokHexConst
.4175	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.4177	f0 23		beq $419c			beq 	_TokQString
.4179	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.417b	b0 26		bcs $41a3			bcs 	_TokPunctuation
.417d	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.417f	b0 29		bcs $41aa			bcs 	_TokIdentifier
.4181	c9 3a		cmp #$3a			cmp 	#"9"+1
.4183	b0 1e		bcs $41a3			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.4185	c9 30		cmp #$30			cmp 	#"0"
.4187	90 1a		bcc $41a3			bcc 	_TokPunctuation 			; < 0, punctuation.
.4189	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.418b	d0 08		bne $4195			bne 	_TokConst
.418d					_TokHexConst:
.418d	c8		iny				iny									; consume token.
.418e	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.4190	20 b7 41	jsr $41b7			jsr 	TokenWrite
.4193	a9 10		lda #$10			lda 	#16
.4195					_TokConst:
.4195	20 9f 42	jsr $429f			jsr 	TokeniseInteger
.4198	b0 cd		bcs $4167			bcs 	_TokLoop
.419a	90 18		bcc $41b4			bcc 	_TokFail
.419c					_TokQString:
.419c	20 35 43	jsr $4335			jsr 	TokeniseString
.419f	b0 c6		bcs $4167			bcs 	_TokLoop
.41a1	90 11		bcc $41b4			bcc 	_TokFail
.41a3					_TokPunctuation:
.41a3	20 14 43	jsr $4314			jsr 	TokenisePunctuation
.41a6	b0 bf		bcs $4167			bcs 	_TokLoop
.41a8	90 0a		bcc $41b4			bcc 	_TokFail
.41aa					_TokIdentifier:
.41aa	20 10 42	jsr $4210			jsr 	TokeniseIdentifier
.41ad	b0 b8		bcs $4167			bcs 	_TokLoop
.41af	90 03		bcc $41b4			bcc 	_TokFail
.41b1					_TokExit:
.41b1	a9 01		lda #$01			lda 	#1
.41b3	60		rts				rts
.41b4					_TokFail:
.41b4	a9 00		lda #$00			lda 	#0
.41b6	60		rts				rts
.41b7					TokenWrite:
.41b7	85 32		sta $32				sta 	tempShort 					; save XA
.41b9	48		pha				pha
.41ba	8a		txa				txa
.41bb	48		pha				pha
.41bc	a5 32		lda $32				lda 	tempShort
.41be	ae 16 0e	ldx $0e16			ldx 	tokenBufferIndex 			; geet index
.41c1	9d 16 0d	sta $0d16,x			sta 	tokenBuffer,x 				; write byte to buffer
.41c4	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.41c6	9d 17 0d	sta $0d17,x			sta 	tokenBuffer+1,x
.41c9	ee 16 0e	inc $0e16			inc 	tokenBufferIndex 			; bump index
.41cc	68		pla				pla
.41cd	aa		tax				tax
.41ce	68		pla				pla
.41cf	60		rts				rts
.41d0					TokeniseMakeASCIIZ:
.41d0	a0 00		ldy #$00			ldy 	#0							; get length of string.
.41d2	b1 28		lda ($28),y			lda 	(codePtr),y
.41d4	a8		tay				tay
.41d5	c8		iny				iny 								; +1, the NULL goes here.
.41d6	a9 00		lda #$00			lda 	#0
.41d8	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.41da	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.41dc	d0 02		bne $41e0			bne 	_TMKAExit
.41de	e6 29		inc $29				inc 	codePtr+1
.41e0					_TMKAExit:
.41e0	60		rts				rts
.41e1					TokeniseFixCase:
.41e1	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.41e3	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.41e5					_TFCFlipQ:
.41e5	8a		txa				txa
.41e6	49 01		eor #$01			eor 	#1
.41e8	aa		tax				tax
.41e9					_TFCLoop:
.41e9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.41eb	f0 22		beq $420f			beq 	_TFCExit 					; if zero exit.
.41ed	c9 20		cmp #$20			cmp 	#32 						; if control
.41ef	90 1a		bcc $420b			bcc 	_TFCControl
.41f1	c8		iny				iny 								; preconsume
.41f2	c9 22		cmp #$22			cmp 	#'"'
.41f4	f0 ef		beq $41e5			beq 	_TFCFlipQ
.41f6	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.41f8	90 ef		bcc $41e9			bcc 	_TFCLoop
.41fa	c9 7b		cmp #$7b			cmp 	#"z"+1
.41fc	b0 eb		bcs $41e9			bcs 	_TFCLoop
.41fe	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4200	d0 e7		bne $41e9			bne 	_TFCLoop
.4202	88		dey				dey
.4203	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4205					_TFCWrite:
.4205	91 28		sta ($28),y			sta 	(codePtr),y
.4207	c8		iny				iny
.4208	4c e9 41	jmp $41e9			jmp 	_TFCLoop
.420b					_TFCControl:
.420b	a9 20		lda #$20			lda 	#" "
.420d	d0 f6		bne $4205			bne 	_TFCWrite
.420f					_TFCExit:
.420f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4210					TokeniseIdentifier:
.4210	a2 00		ldx #$00			ldx 	#0
.4212					_TICopyID:
.4212	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4214	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.4216	f0 16		beq $422e			beq 	_TICopyUnderscore
.4218	c9 2e		cmp #$2e			cmp 	#"."
.421a	f0 14		beq $4230			beq 	_TICopyIn
.421c	c9 30		cmp #$30			cmp 	#"0"
.421e	90 1b		bcc $423b			bcc 	_TIEndCopy
.4220	c9 3a		cmp #$3a			cmp 	#"9"+1
.4222	90 0c		bcc $4230			bcc 	_TICopyIn
.4224	c9 41		cmp #$41			cmp 	#"A"
.4226	90 13		bcc $423b			bcc 	_TIEndCopy
.4228	c9 5b		cmp #$5b			cmp 	#"Z"+1
.422a	b0 0f		bcs $423b			bcs		_TIEndCopy
.422c	90 02		bcc $4230			bcc 	_TICopyIn
.422e					_TICopyUnderScore:
.422e	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4230					_TICopyIn:
.4230	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4231	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4234	8e cf 0a	stx $0acf			stx 	convertBuffer
.4237	c8		iny				iny 								; next character
.4238	4c 12 42	jmp $4212			jmp 	_TICopyID 					; loop round
.423b					_TIEndCopy:
.423b	a9 24		lda #$24			lda 	#"$"
.423d	20 92 42	jsr $4292			jsr 	TIDCheckCopy
.4240	a9 23		lda #$23			lda 	#"#"
.4242	20 92 42	jsr $4292			jsr 	TIDCheckCopy
.4245	a9 28		lda #$28			lda 	#"("
.4247	20 92 42	jsr $4292			jsr 	TIDCheckCopy
.424a	20 c7 40	jsr $40c7			jsr 	TokenSearch 				; is it a token
.424d	b0 41		bcs $4290			bcs 	_TIExit 					; if so, then exit.
.424f	98		tya				tya
.4250	48		pha				pha
.4251	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4253	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.4256	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4259	c9 28		cmp #$28			cmp 	#"("
.425b	d0 02		bne $425f			bne 	_TINotArray
.425d	ca		dex				dex 								; yes, remove it and convert to array.
.425e	c8		iny				iny
.425f					_TINotArray:
.425f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4262	c9 24		cmp #$24			cmp 	#"$"
.4264	d0 03		bne $4269			bne 	_TINotString
.4266	ca		dex				dex
.4267	c8		iny				iny
.4268	c8		iny				iny
.4269					_TINotString:
.4269	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.426c	c9 23		cmp #$23			cmp 	#"#"
.426e	d0 05		bne $4275			bne 	_TINotFloat
.4270	ca		dex				dex
.4271	c8		iny				iny
.4272	c8		iny				iny
.4273	c8		iny				iny
.4274	c8		iny				iny
.4275					_TINotFloat:
.4275	e8		inx				inx 								; write end marker for identifier.
.4276	98		tya				tya
.4277	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.427a	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.427d	a2 01		ldx #$01			ldx 	#1
.427f					_TIOutput:
.427f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4282	29 3f		and #$3f			and 	#$3F
.4284	48		pha				pha
.4285	20 b7 41	jsr $41b7			jsr 	TokenWrite
.4288	e8		inx				inx
.4289	68		pla				pla
.428a	c9 3a		cmp #$3a			cmp 	#$3A
.428c	90 f1		bcc $427f			bcc 	_TIOutput
.428e	68		pla				pla
.428f	a8		tay				tay
.4290					_TIExit:
.4290	38		sec				sec 								; this can't fail.
.4291	60		rts				rts
.4292					TIDCheckCopy:
.4292	d1 28		cmp ($28),y			cmp 	(codePtr),y
.4294	d0 08		bne $429e			bne 	_TIDCCExit
.4296	e8		inx				inx
.4297	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.429a	8e cf 0a	stx $0acf			stx 	convertBuffer
.429d	c8		iny				iny
.429e					_TIDCCExit:
.429e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.429f					TokeniseInteger:
.429f	85 2c		sta $2c				sta 	temp1 						; save base
.42a1	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.42a3	8e cf 0a	stx $0acf			stx 	convertBuffer
.42a6					_TIGetChars:
.42a6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.42a8	c9 30		cmp #$30			cmp 	#"0"
.42aa	90 1f		bcc $42cb			bcc 	_TIEndGet
.42ac	c9 3a		cmp #$3a			cmp 	#"9"+1
.42ae	90 10		bcc $42c0			bcc 	_TIHaveChar
.42b0	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.42b2	c9 0a		cmp #$0a			cmp 	#10
.42b4	f0 15		beq $42cb			beq 	_TIEndGet
.42b6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.42b8	c9 41		cmp #$41			cmp 	#"A"
.42ba	90 0f		bcc $42cb			bcc 	_TIEndGet
.42bc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.42be	b0 0b		bcs $42cb			bcs 	_TIEndGet
.42c0					_TIHaveChar:
.42c0	e8		inx				inx 								; write into buffer.
.42c1	8e cf 0a	stx $0acf			stx 	convertBuffer
.42c4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.42c7	c8		iny				iny 								; next char
.42c8	4c a6 42	jmp $42a6			jmp 	_TIGetChars
.42cb					_TIEndGet:
.42cb	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.42cd	f0 1c		beq $42eb			beq 	_TIFail
.42cf	98		tya				tya
.42d0	48		pha				pha
.42d1	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.42d3	85 2a		sta $2a				sta 	temp0
.42d5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.42d7	85 2b		sta $2b				sta 	1+(temp0)
.42d9	a9 00		lda #$00			lda 	#0 							; stack level 0
.42db	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.42dd	a2 1a		ldx #$1a		ldx	#26
.42df	20 d2 3b	jsr $3bd2		jsr	mainHandler
.42e2	68		pla				pla
.42e3	a8		tay				tay
.42e4	90 05		bcc $42eb			bcc 	_TIFail 					; didn't convert.
.42e6	20 ed 42	jsr $42ed			jsr 	TIRecursiveOut 				; recursive output ?
.42e9	38		sec				sec
.42ea	60		rts				rts
.42eb					_TIFail:
.42eb	18		clc				clc
.42ec	60		rts				rts
.42ed					TIRecursiveOut:
.42ed	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.42ef	29 3f		and #$3f			and 	#$3F
.42f1	09 40		ora #$40			ora 	#$40
.42f3	48		pha				pha
.42f4	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.42f6	29 c0		and #$c0			and 	#$C0
.42f8	05 a0		ora $a0				ora 	esInt1
.42fa	05 a8		ora $a8				ora 	esInt2
.42fc	05 b0		ora $b0				ora 	esInt3
.42fe	f0 10		beq $4310			beq 	_TIRONoRecursion
.4300	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4302					_TIROShift:
.4302	46 b0		lsr $b0				lsr 	esInt3
.4304	66 a8		ror $a8				ror 	esInt2
.4306	66 a0		ror $a0				ror 	esInt1
.4308	66 98		ror $98				ror 	esInt0
.430a	ca		dex				dex
.430b	d0 f5		bne $4302			bne 	_TIROShift
.430d	20 ed 42	jsr $42ed			jsr 	TIRecursiveOut 				; call recursively
.4310					_TIRONoRecursion:
.4310	68		pla				pla 								; pull the old bit.
.4311	4c b7 41	jmp $41b7			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4314					TokenisePunctuation:
.4314	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4316	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4319	c8		iny				iny
.431a	b1 28		lda ($28),y			lda 	(codePtr),y
.431c	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.431f	c8		iny				iny 								; Y is +2
.4320	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4322	8d cf 0a	sta $0acf			sta 	convertBuffer
.4325	20 c7 40	jsr $40c7			jsr 	TokenSearch 				; search for that token.
.4328	b0 0a		bcs $4334			bcs 	_TIFound
.432a	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.432d	88		dey				dey 								; Y is now +1
.432e	20 c7 40	jsr $40c7			jsr 	TokenSearch 				; search for that token.
.4331	b0 01		bcs $4334			bcs 	_TIFound
.4333	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4334					_TIFound:
.4334	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4335					TokeniseString:
.4335	c8		iny				iny 								; skip opening quote
.4336	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4338	84 2a		sty $2a				sty 	temp0 						; save start.
.433a					_TSGetLength:
.433a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.433c	f0 21		beq $435f			beq 	_TSFail						; end of line, fail
.433e	c8		iny				iny
.433f	e8		inx				inx
.4340	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4342	d0 f6		bne $433a			bne 	_TSGetLength
.4344	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4346	20 b7 41	jsr $41b7			jsr 	TokenWrite
.4349	8a		txa				txa 								; output length
.434a	20 b7 41	jsr $41b7			jsr 	TokenWrite
.434d	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.434f	e0 00		cpx #$00			cpx 	#0 							; check ended
.4351	f0 09		beq $435c			beq 	_TSExit
.4353					_TSOutput:
.4353	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4355	20 b7 41	jsr $41b7			jsr 	TokenWrite
.4358	c8		iny				iny
.4359	ca		dex				dex
.435a	d0 f7		bne $4353			bne 	_TSOutput
.435c					_TSExit:
.435c	c8		iny				iny 								; skip ending quote
.435d	38		sec				sec 								; return CS.
.435e	60		rts				rts
.435f					_TSFail:
.435f	18		clc				clc
.4360	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4361					TokenTableAddress:
>4361	69 43						.word 	Group0Text
>4363	37 45						.word 	Group1Text
>4365	84 46						.word 	Group2Text
>4367	ce 46						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4369					Group0Text:
>4369	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>436d	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4370	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>4374	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>4377	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>437a	01 be					.byte $01,$be                          ; $8b >
>437c	01 bc					.byte $01,$bc                          ; $8c <
>437e	01 bd					.byte $01,$bd                          ; $8d =
>4380	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>4383	01 ab					.byte $01,$ab                          ; $8f +
>4385	01 ad					.byte $01,$ad                          ; $90 -
>4387	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>438a	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>438d	01 aa					.byte $01,$aa                          ; $93 *
>438f	01 af					.byte $01,$af                          ; $94 /
>4391	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>4395	01 de					.byte $01,$de                          ; $96 ^
>4397	01 a1					.byte $01,$a1                          ; $97 !
>4399	01 bf					.byte $01,$bf                          ; $98 ?
>439b	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>43a2	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>43a8	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>43ac	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>43af	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>43b7	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>43bd	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>43c2	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>43c7	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>43cc	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>43d2	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>43da	01 a8					.byte $01,$a8                          ; $a4 (
>43dc	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>43e1	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>43e6	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>43eb	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>43f3	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>43f8	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>43fd	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4403	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4408	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>440d	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4412	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4419	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4420	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4425	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>442c	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4433	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4439	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4440	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4446	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>444e	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4454	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4459	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>445f	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4465	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>446b	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4470	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>4475	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>447c	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>4483	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>448b	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>4493	01 c0					.byte $01,$c0                          ; $c3 @
>4495	01 fe					.byte $01,$fe                          ; $c4 ~
>4497	01 a6					.byte $01,$a6                          ; $c5 &
>4499	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>449f	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>44a7	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>44ab	01 a9					.byte $01,$a9                          ; $c9 )
>44ad	01 ba					.byte $01,$ba                          ; $ca :
>44af	01 ac					.byte $01,$ac                          ; $cb ,
>44b1	01 bb					.byte $01,$bb                          ; $cc ;
>44b3	01 a7					.byte $01,$a7                          ; $cd '
>44b5	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>44b8	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>44bd	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>44c2	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>44c8	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>44cc	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>44d0	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>44d4	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>44da	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>44df	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>44e3	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>44e9	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>44ee	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>44f4	02 41 d4				.byte $02,$41,$d4                      ; $db at
>44f7	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>44fc	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4503	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4508	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>450d	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4512	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4516	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>451c	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4520	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4527	01 ae					.byte $01,$ae                          ; $e5 .
>4529	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>452e	01 a3					.byte $01,$a3                          ; $e7 #
>4530	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4536	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4537					Group1Text:
>4537	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>453c	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4541	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4546	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>454a	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4550	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4554	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4559	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4561	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4565	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>456a	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>456f	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>4574	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>457a	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>4581	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>4585	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>458b	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>458f	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>4593	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>4597	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>459b	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>459f	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>45a3	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>45a7	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>45ab	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>45af	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>45b3	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>45b7	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>45bb	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>45bf	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>45c3	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>45c7	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>45cb	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>45cf	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>45d3	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>45d7	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>45db	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>45df	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>45e3	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>45e7	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>45eb	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>45ef	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>45f3	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>45f7	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>45fb	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>45ff	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4603	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4607	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>460b	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>460f	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4613	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4617	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>461b	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>461f	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4623	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4627	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>462b	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>462f	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4633	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4637	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>463b	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>463f	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4643	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4647	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>464b	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>464f	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4653	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4657	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>465b	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>465f	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4663	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4667	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>466b	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>466f	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4673	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4677	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>467b	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>467f	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4683	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4684					Group2Text:
>4684	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>468a	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4690	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4696	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>469b	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>46a3	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>46aa	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>46ae	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>46b3	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>46b9	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>46be	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $90 text
>46c3	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $91 plot
>46c8	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $92 line
>46cd	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.46ce					Group3Text:
>46ce	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>46d5	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>46dc	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>46e4	58 a8
>46e6	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>46ee	59 a8
>46f0	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>46f5	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>46fc	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4703	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>470a	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4711	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4712					tokeniserHandler:
.4712	7c 15 47	jmp ($4715,x)			jmp 	(tokeniserVectors,x)
.4715					tokeniserVectors:
>4715	21 47					.word _DummyControlHandler ; index 0
>4717	b1 3e					.word Detokenise           ; index 2
>4719	a5 3e					.word ListLine             ; index 4
>471b	36 41					.word TokTest              ; index 6
>471d	56 41					.word Tokenise             ; index 8
>471f	59 41					.word TokeniseASCIIZ       ; index 10
.4721					_DummyControlHandler:
.4721	60		rts			rts

;******  Return to file: basic.asm

.4722					section_end_tokeniser:
.4722					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4722					AccessArray:
.4722	8a		txa				txa
.4723	48		pha				pha
.4724	e8		inx				inx
.4725	20 ee 47	jsr $47ee			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4728	68		pla				pla
.4729	aa		tax				tax
.472a	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.472c	85 2a		sta $2a				sta 	temp0
.472e	b5 a0		lda $a0,x			lda 	esInt1,x
.4730	85 2b		sta $2b				sta 	temp0+1
.4732	8a		txa				txa
.4733	48		pha				pha
.4734	98		tya				tya
.4735	48		pha				pha
.4736					_AAFollow:
.4736	a0 00		ldy #$00			ldy 	#0
.4738	b1 2a		lda ($2a),y			lda 	(temp0),y
.473a	48		pha				pha
.473b	c8		iny				iny
.473c	b1 2a		lda ($2a),y			lda 	(temp0),y
.473e	85 2b		sta $2b				sta 	temp0+1
.4740	68		pla				pla
.4741	85 2a		sta $2a				sta 	temp0
.4743	e8		inx				inx 								; advance to next stack slot.
.4744	a0 00		ldy #$00			ldy 	#0
.4746	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4748	d5 98		cmp $98,x			cmp 	esInt0,x
.474a	c8		iny				iny
.474b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.474d	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.474f	29 7f		and #$7f			and 	#$7F
.4751	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4753	90 50		bcc $47a5			bcc 	_AABadIndex 				; failed on index if max index < required.
.4755	18		clc				clc
.4756	a5 2a		lda $2a				lda 	temp0
.4758	69 02		adc #$02			adc 	#2
.475a	85 2a		sta $2a				sta 	temp0
.475c	90 02		bcc $4760			bcc 	_AANoCarry
.475e	e6 2b		inc $2b				inc 	temp0+1
.4760					_AANoCarry:
.4760	b5 98		lda $98,x			lda 	esInt0,x
.4762	85 2e		sta $2e				sta 	temp2
.4764	b5 a0		lda $a0,x			lda 	esInt1,x
.4766	85 2f		sta $2f				sta 	temp2+1
.4768	ac 19 0e	ldy $0e19			ldy 	varType
.476b	b9 48 48	lda $4848,y			lda 	CAActualSize-$3A,y
.476e	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4770	30 02		bmi $4774			bmi 	_AANotPointer
.4772	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4774					_AANotPointer:
.4774	20 f2 48	jsr $48f2			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4777	18		clc				clc
.4778	a5 2a		lda $2a				lda 	temp0
.477a	65 2e		adc $2e				adc 	temp2
.477c	85 2a		sta $2a				sta 	temp0
.477e	a5 2b		lda $2b				lda 	temp0+1
.4780	65 2f		adc $2f				adc 	temp2+1
.4782	85 2b		sta $2b				sta 	temp0+1
.4784	b5 91		lda $91,x			lda 	esType+1,x
.4786	30 07		bmi $478f			bmi 	_AAUsedAllIndices
.4788	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.478a	10 14		bpl $47a0			bpl 	_AABadDepth 				; no, too many indexes.
.478c	4c 36 47	jmp $4736			jmp 	_AAFollow 					; otherwise follow them.
.478f					_AAUsedAllIndices:
.478f	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4791	30 0d		bmi $47a0			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4793	68		pla				pla
.4794	a8		tay				tay
.4795	68		pla				pla
.4796	aa		tax				tax
.4797	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4799	95 98		sta $98,x			sta 	esInt0,x
.479b	a5 2b		lda $2b				lda 	temp0+1
.479d	95 a0		sta $a0,x			sta 	esInt1,x
.479f	60		rts				rts
.47a0					_AABadDepth:
.47a0	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.47a2	20 18 15	jsr $1518		jsr	errorHandler
.47a5					_AABadIndex:
.47a5	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.47a7	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e17					elementSize:
>0e17							.fill	 1
.47aa					CreateArray:
.47aa	20 81 49	jsr $4981			jsr 	AccessSetup 				; set up the basic stuff.
.47ad	ad 19 0e	lda $0e19			lda 	varType 					; is the variable type an array
.47b0	4a		lsr a				lsr 	a
.47b1	90 36		bcc $47e9			bcc 	CANotArray 					; no, cause an error.
.47b3	20 8a 4a	jsr $4a8a			jsr 	FindVariable 				; does the variable exist already
.47b6	b0 2c		bcs $47e4			bcs 	CAFound 					; cannot redefine it.
.47b8	20 be 49	jsr $49be			jsr 	CreateVariable 				; create the variable entry.
.47bb	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.47bd	48		pha				pha
.47be	a5 2b		lda $2b				lda 	temp0+1
.47c0	48		pha				pha
.47c1	a2 00		ldx #$00			ldx 	#0
.47c3	20 ee 47	jsr $47ee			jsr 	GetArrayDimensions 			; get the array dimensions
.47c6	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.47c8	20 1e 48	jsr $481e			jsr 	CreateArrayLevel 			; level to YA
.47cb	aa		tax				tax 								; level now in YX
.47cc	68		pla				pla 								; get address back to temp0 to write.
.47cd	85 2b		sta $2b				sta 	temp0+1
.47cf	68		pla				pla
.47d0	85 2a		sta $2a				sta 	temp0
.47d2	98		tya				tya 								; write YX there.
.47d3	a0 06		ldy #$06			ldy 	#6
.47d5	91 2a		sta ($2a),y			sta 	(temp0),y
.47d7	88		dey				dey
.47d8	8a		txa				txa
.47d9	91 2a		sta ($2a),y			sta 	(temp0),y
.47db	ac 1a 0e	ldy $0e1a			ldy 	varEnd 						; restore Y and exit.
.47de	60		rts				rts
.47df					CASize:
.47df	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.47e1	20 18 15	jsr $1518		jsr	errorHandler
.47e4					CAFound:
.47e4	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.47e6	20 18 15	jsr $1518		jsr	errorHandler
.47e9					CANotArray:
.47e9	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.47eb	20 18 15	jsr $1518		jsr	errorHandler
.47ee					GetArrayDimensions:
.47ee	ad 19 0e	lda $0e19			lda 	varType 					; push variable type on the stack.
.47f1	48		pha				pha
.47f2	ac 1a 0e	ldy $0e1a			ldy 	varEnd
.47f5					_CAGetDimensions:
.47f5	8a		txa				txa 								; get the next level
.47f6	a2 0a		ldx #$0a		ldx	#10
.47f8	20 d2 3b	jsr $3bd2		jsr	mainHandler
.47fb	aa		tax				tax
.47fc	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.47fe	29 e0		and #$e0			and 	#$E0
.4800	15 a8		ora $a8,x			ora 	esInt2,x
.4802	15 b0		ora $b0,x			ora 	esInt3,x
.4804	d0 d9		bne $47df			bne 	CASize
.4806	e8		inx				inx 								; next level.
.4807	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4809	c8		iny				iny
.480a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.480c	f0 e7		beq $47f5			beq 	_CAGetDimensions
.480e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4810	d0 cd		bne $47df			bne 	CASize
.4812	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4814	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.4816	68		pla				pla 								; restore the variable type ($3A-$3F)
.4817	8d 19 0e	sta $0e19			sta 	varType
.481a	8c 1a 0e	sty $0e1a			sty 	varEnd 						; save exit Y value, after dimensions
.481d	60		rts				rts
.481e					CreateArrayLevel:
.481e	ac 19 0e	ldy $0e19			ldy 	varType
.4821	b9 48 48	lda $4848,y			lda 	CAActualSize-$3A,y
.4824	8d 17 0e	sta $0e17			sta 	elementSize 				; get element size this level.
.4827	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4829	30 05		bmi $4830			bmi 	_CANotPointer
.482b	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.482d	8d 17 0e	sta $0e17			sta 	elementSize
.4830					_CANotPointer:
.4830	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4832	85 2a		sta $2a				sta 	temp0
.4834	48		pha				pha
.4835	a5 36		lda $36				lda 	lowMemory+1
.4837	85 2b		sta $2b				sta 	temp0+1
.4839	48		pha				pha
.483a	20 bb 48	jsr $48bb			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.483d	a0 00		ldy #$00			ldy 	#0
.483f	b5 98		lda $98,x			lda 	esInt0,x
.4841	91 2a		sta ($2a),y			sta 	(temp0),y
.4843	c8		iny				iny
.4844	b5 a0		lda $a0,x			lda 	esInt1,x
.4846	91 2a		sta ($2a),y			sta 	(temp0),y
.4848	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.484a	30 06		bmi $4852			bmi 	_CALNotLast
.484c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.484e	09 80		ora #$80			ora 	#$80
.4850	91 2a		sta ($2a),y			sta 	(temp0),y
.4852					_CALNotLast:
.4852	a9 02		lda #$02			lda 	#2
.4854	20 78 48	jsr $4878			jsr 	_CALAddTemp0
.4857	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4859	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.485b	b5 a0		lda $a0,x			lda 	esInt1,x
.485d	95 b0		sta $b0,x			sta 	esInt3,x
.485f					_CALClear:
.485f	20 88 48	jsr $4888			jsr 	EraseOneElement
.4862	ad 17 0e	lda $0e17			lda 	elementSize 				; move to next element
.4865	20 78 48	jsr $4878			jsr 	_CALAddTemp0
.4868	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.486a	d0 02		bne $486e			bne 	_CALNoBorrow
.486c	d6 b0		dec $b0,x			dec 	esInt3,x
.486e					_CALNoBorrow:
.486e	d6 a8		dec $a8,x			dec 	esInt2,x
.4870	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4872	10 eb		bpl $485f			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4874	68		pla				pla 								; restore the start of this into YA.
.4875	a8		tay				tay
.4876	68		pla				pla
.4877	60		rts				rts
.4878					_CALAddTemp0:
.4878	18		clc				clc
.4879	65 2a		adc $2a				adc 	temp0
.487b	85 2a		sta $2a				sta 	temp0
.487d	90 02		bcc $4881			bcc 	_CALANoCarry
.487f	e6 2b		inc $2b				inc 	temp0+1
.4881					_CALANoCarry:
.4881	60		rts				rts
.4882					CAActualSize:
>4882	04 04						.byte 	VarISize,VarISize
>4884	02 02						.byte 	VarSSize,VarSSize
>4886	06 06						.byte 	VarFSize,VarFSize
.4888					EraseOneElement:
.4888	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.488a	10 09		bpl $4895			bpl 	_EOESubArray
.488c	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.488e	ad 19 0e	lda $0e19			lda 	varType
.4891	20 28 4a	jsr $4a28			jsr 	ZeroTemp0Y
.4894	60		rts				rts
.4895					_EOESubArray:
.4895	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4897	48		pha				pha
.4898	a5 2b		lda $2b				lda 	temp0+1
.489a	48		pha				pha
.489b	ad 17 0e	lda $0e17			lda 	elementSize 				; save element size
.489e	48		pha				pha
.489f	e8		inx				inx 								; create at next level
.48a0	20 1e 48	jsr $481e			jsr 	CreateArrayLevel
.48a3	ca		dex				dex
.48a4	85 32		sta $32				sta 	tempShort 					; save A
.48a6	68		pla				pla  								; restore element size.
.48a7	8d 17 0e	sta $0e17			sta 	elementSize
.48aa	68		pla				pla 								; restore temp0, which is where this new array level goes.
.48ab	85 2b		sta $2b				sta 	temp0+1
.48ad	68		pla				pla
.48ae	85 2a		sta $2a				sta 	temp0
.48b0	98		tya				tya 								; store Y/A there
.48b1	a0 01		ldy #$01			ldy 	#1
.48b3	91 2a		sta ($2a),y			sta 	(temp0),y
.48b5	a5 32		lda $32				lda 	tempShort
.48b7	88		dey				dey
.48b8	91 2a		sta ($2a),y			sta 	(temp0),y
.48ba	60		rts				rts
.48bb					AllocateArraySpace:
.48bb	18		clc				clc 								; element count + 1 => temp2.
.48bc	b5 98		lda $98,x			lda 	esInt0,x
.48be	69 01		adc #$01			adc 	#1
.48c0	85 2e		sta $2e				sta 	temp2
.48c2	b5 a0		lda $a0,x			lda 	esInt1,x
.48c4	69 00		adc #$00			adc 	#0
.48c6	85 2f		sta $2f				sta 	temp2+1
.48c8	ad 17 0e	lda $0e17			lda 	elementSize 				; bytes per element
.48cb	20 f2 48	jsr $48f2			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.48ce	18		clc				clc 								; add 2 for 'max element' byte.
.48cf	a5 2e		lda $2e				lda 	temp2
.48d1	69 02		adc #$02			adc 	#2
.48d3	85 2e		sta $2e				sta 	temp2
.48d5	90 02		bcc $48d9			bcc 	_AASNoCarry
.48d7	e6 2f		inc $2f				inc 	temp2+1
.48d9					_AASNoCarry:
.48d9	18		clc				clc 								; add to low memory, allocating space.
.48da	a5 35		lda $35				lda 	lowMemory
.48dc	65 2e		adc $2e				adc 	temp2
.48de	85 35		sta $35				sta 	lowMemory
.48e0	a5 36		lda $36				lda 	lowMemory+1
.48e2	65 2f		adc $2f				adc 	temp2+1
.48e4	85 36		sta $36				sta 	lowMemory+1
.48e6	b0 05		bcs $48ed			bcs 	_AASFail 					; out of memory as adding causes wrapround
.48e8	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.48ea	b0 01		bcs $48ed			bcs 	_AASFail
.48ec	60		rts				rts
.48ed					_AASFail:
.48ed	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.48ef	20 18 15	jsr $1518		jsr	errorHandler
.48f2					MultiplyTemp2ByA:
.48f2	48		pha				pha
.48f3	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.48f5	85 30		sta $30				sta 	temp3
.48f7	a5 2f		lda $2f				lda 	temp2+1
.48f9	85 31		sta $31				sta 	temp3+1
.48fb	68		pla				pla
.48fc	06 2e		asl $2e				asl 	temp2 						; double it.
.48fe	26 2f		rol $2f				rol 	temp2+1
.4900	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4902	f0 15		beq $4919			beq 	_MTBAExit
.4904	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4906	d0 0d		bne $4915			bne 	_MTBANotFloat
.4908	18		clc				clc 								; so this will make it x 3
.4909	a5 2e		lda $2e				lda 	temp2
.490b	65 30		adc $30				adc 	temp3
.490d	85 2e		sta $2e				sta 	temp2
.490f	a5 2f		lda $2f				lda 	temp2+1
.4911	65 31		adc $31				adc 	temp3+1
.4913	85 2f		sta $2f				sta 	temp2+1
.4915					_MTBANotFloat:
.4915	06 2e		asl $2e				asl 	temp2 						; double it.
.4917	26 2f		rol $2f				rol 	temp2+1
.4919					_MTBAExit:
.4919	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e18					varHash:
>0e18							.fill	1
.0e19					varType:
>0e19							.fill 	1
.0e1a					varEnd:
>0e1a							.fill 	1
.003b					hashList:
>003b							.fill 	2
.491a					AccessVariable:
.491a	aa		tax				tax 								; stack in X
.491b	c8		iny				iny									; look at second character
.491c	b1 28		lda ($28),y			lda 	(codePtr),y
.491e	88		dey				dey
.491f	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4921	d0 15		bne $4938			bne 	_AVLong 					; no, always use the hash tables.
.4923	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4925	38		sec				sec 	 							; make it 0-25
.4926	e9 01		sbc #$01			sbc 	#1
.4928	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4929	0a		asl a				asl 	a
.492a	95 98		sta $98,x			sta 	esInt0,x
.492c	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.492e	95 a0		sta $a0,x			sta 	esInt1,x
.4930	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4932	95 90		sta $90,x			sta 	esType,x
.4934	c8		iny				iny 								; skip over the variable reference in the code.
.4935	c8		iny				iny  								; (1 letter, 1 type)
.4936	8a		txa				txa 								; stack in A to return.
.4937	60		rts				rts
.4938					_AVLong:
.4938	8a		txa				txa
.4939	48		pha				pha
.493a	20 81 49	jsr $4981			jsr 	AccessSetup 				; set up the basic information we need for later
.493d	20 8a 4a	jsr $4a8a			jsr 	FindVariable 				; does the variable exist already ?
.4940	b0 0e		bcs $4950			bcs 	_AVFound 					; yes, then its found
.4942	ad 19 0e	lda $0e19			lda 	varType 					; otherwise, is the variable type an array
.4945	4a		lsr a				lsr 	a
.4946	90 05		bcc $494d			bcc 	_AVCanCreate 				; if not, we can autocreate
.4948	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.494a	20 18 15	jsr $1518		jsr	errorHandler
.494d					_AVCanCreate:
.494d	20 be 49	jsr $49be			jsr 	CreateVariable 				; variable does not exist, create it.
.4950					_AVFound:
.4950	68		pla				pla
.4951	aa		tax				tax
.4952	18		clc				clc 								; copy temp0 (variable record address)
.4953	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4955	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4957	95 98		sta $98,x			sta 	esInt0,x
.4959	a5 2b		lda $2b				lda 	temp0+1
.495b	69 00		adc #$00			adc 	#0
.495d	95 a0		sta $a0,x			sta 	esInt1,x
.495f	a9 00		lda #$00			lda 	#0
.4961	95 a8		sta $a8,x			sta 	esInt2,x
.4963	95 b0		sta $b0,x			sta 	esInt3,x
.4965	ac 19 0e	ldy $0e19			ldy 	varType 					; get the type ID from the type.
.4968	b9 41 49	lda $4941,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.496b	95 90		sta $90,x			sta 	esType,x
.496d	ac 1a 0e	ldy $0e1a			ldy 	varEnd 						; restore Y
.4970	ad 19 0e	lda $0e19			lda 	VarType 					; get variable type, put LSB into C
.4973	4a		lsr a				lsr 	a
.4974	90 03		bcc $4979			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4976	20 22 47	jsr $4722			jsr 	AccessArray 				; array lookup. if LSB was set.
.4979					_AVNotArray:
.4979	8a		txa				txa 								; return stack in A and return
.497a	60		rts				rts
.497b					_AVTypeTable:
>497b	80 80						.byte 	$80,$80						; integer
>497d	c0 c0						.byte 	$C0,$C0 					; string
>497f	81 81						.byte 	$81,$81 					; float
.4981					AccessSetup:
.4981	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4983	8d 18 0e	sta $0e18			sta 	varHash
.4986	98		tya				tya
.4987	48		pha				pha
.4988	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.498a	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.498c	b0 0b		bcs $4999			bcs 	_ASComplete
.498e	18		clc				clc 								; add to the hash. Might improve this.
.498f	6d 18 0e	adc $0e18			adc 	varHash
.4992	8d 18 0e	sta $0e18			sta 	varHash
.4995	c8		iny				iny 								; next character
.4996	4c 88 49	jmp $4988			jmp 	_ASLoop
.4999					_ASComplete:
.4999	8d 19 0e	sta $0e19			sta 	varType 					; save variable type byte
.499c	c8		iny				iny
.499d	8c 1a 0e	sty $0e1a			sty 	varEnd 						; save the ending position.
.49a0	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.49a1	e9 3a		sbc #$3a			sbc 	#$3A
.49a3	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.49a4	0a		asl a				asl 	a
.49a5	0a		asl a				asl 	a
.49a6	0a		asl a				asl 	a 							; 2 bytes/word
.49a7	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.49a9	ad 18 0e	lda $0e18			lda 	varHash 					; get hash
.49ac	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.49ae	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.49af	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.49b1	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.49b3	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.49b5	a9 0a		lda #$0a			lda 	#hashTables >> 8
.49b7	69 00		adc #$00			adc 	#0
.49b9	85 3c		sta $3c				sta 	hashList+1
.49bb	68		pla				pla
.49bc	a8		tay				tay
.49bd	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.49be					CreateVariable:
.49be	98		tya				tya 								; push Y on the stack twice.
.49bf	48		pha				pha									; position in code of the new variable.
.49c0	48		pha				pha
.49c1	ae 19 0e	ldx $0e19			ldx 	varType 					; get var type 0-5 from the var type
.49c4	bd e8 49	lda $49e8,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.49c7	48		pha				pha 								; save length
.49c8	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.49ca	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.49cc	a5 36		lda $36				lda 	lowMemory+1
.49ce	85 2b		sta $2b				sta 	temp0+1
.49d0	68		pla				pla 								; get length
.49d1	18		clc				clc 								; add to low memory.
.49d2	65 35		adc $35				adc 	lowMemory
.49d4	85 35		sta $35				sta 	lowMemory
.49d6	90 08		bcc $49e0			bcc 	_CVNoCarry
.49d8	e6 36		inc $36				inc 	lowMemory+1
.49da	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.49dc	c5 34		cmp $34				cmp 	highMemory+1
.49de	b0 3d		bcs $4a1d			bcs 	_CVMemory
.49e0					_CVNoCarry:
.49e0	ad 18 0e	lda $0e18			lda 	varHash 					; store hash at offset 4.
.49e3	a0 04		ldy #$04			ldy 	#4
.49e5	91 2a		sta ($2a),y			sta 	(temp0),y
.49e7	68		pla				pla 								; offset, work out where the variable name is.
.49e8	18		clc				clc
.49e9	65 28		adc $28				adc 	codePtr
.49eb	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.49ed	91 2a		sta ($2a),y			sta 	(temp0),y
.49ef	a5 29		lda $29				lda 	codePtr+1
.49f1	69 00		adc #$00			adc 	#0
.49f3	c8		iny				iny
.49f4	91 2a		sta ($2a),y			sta 	(temp0),y
.49f6	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.49f9	b0 03		bcs $49fe			bcs 	_CVNotImmediate
.49fb	20 60 4a	jsr $4a60			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.49fe					_CVNotImmediate:
.49fe	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4a00	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4a02	91 2a		sta ($2a),y			sta 	(temp0),y
.4a04	c8		iny				iny
.4a05	b1 3b		lda ($3b),y			lda 	(hashList),y
.4a07	91 2a		sta ($2a),y			sta 	(temp0),y
.4a09	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4a0b	91 3b		sta ($3b),y			sta 	(hashList),y
.4a0d	88		dey				dey
.4a0e	a5 2a		lda $2a				lda 	temp0
.4a10	91 3b		sta ($3b),y			sta 	(hashList),y
.4a12	ad 19 0e	lda $0e19			lda 	varType 					; type in A
.4a15	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4a17	20 28 4a	jsr $4a28			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4a1a	68		pla				pla
.4a1b	a8		tay				tay
.4a1c	60		rts				rts
.4a1d					_CVMemory:
.4a1d	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4a1f	20 18 15	jsr $1518		jsr	errorHandler
>4a22	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4a24	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4a26	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4a28					ZeroTemp0Y:
.4a28	4a		lsr a				lsr 	a 							; bit 0 in carry
.4a29	0a		asl a				asl 	a
.4a2a	b0 19		bcs $4a45			bcs 	_ZTExit 					; we don't initialise arrays.
.4a2c	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4a2e	f0 16		beq $4a46			beq 	_ZTWriteNullString 			; write "" string
.4a30	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4a32	f0 22		beq $4a56			beq 	_ZTWriteFloat
.4a34	98		tya				tya
.4a35	48		pha				pha
.4a36	a9 00		lda #$00			lda 	#0
.4a38	91 2a		sta ($2a),y			sta 	(temp0),y
.4a3a	c8		iny				iny
.4a3b	91 2a		sta ($2a),y			sta 	(temp0),y
.4a3d	c8		iny				iny
.4a3e	91 2a		sta ($2a),y			sta 	(temp0),y
.4a40	c8		iny				iny
.4a41	91 2a		sta ($2a),y			sta 	(temp0),y
.4a43	68		pla				pla
.4a44	a8		tay				tay
.4a45					_ZTExit:
.4a45	60		rts				rts
.4a46					_ZTWriteNullString:
.4a46	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4a48	8d ce 0a	sta $0ace			sta 	NullString
.4a4b	a9 ce		lda #$ce			lda 	#NullString & $FF
.4a4d	91 2a		sta ($2a),y			sta 	(temp0),y
.4a4f	a9 0a		lda #$0a			lda 	#NullString >> 8
.4a51	c8		iny				iny
.4a52	91 2a		sta ($2a),y			sta 	(temp0),y
.4a54	88		dey				dey
.4a55	60		rts				rts
.4a56					_ZTWriteFloat:
.4a56	8a		txa				txa
.4a57	48		pha				pha
.4a58	a2 20		ldx #$20		ldx	#32
.4a5a	20 4a 23	jsr $234a		jsr	floatingpointHandler
.4a5d	68		pla				pla
.4a5e	aa		tax				tax
.4a5f	60		rts				rts
.4a60					CloneVariableName:
.4a60	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4a62	b1 2a		lda ($2a),y			lda 	(temp0),y
.4a64	85 2e		sta $2e				sta 	temp2
.4a66	c8		iny				iny
.4a67	b1 2a		lda ($2a),y			lda 	(temp0),y
.4a69	85 2f		sta $2f				sta 	temp2+1
.4a6b	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4a6d	91 2a		sta ($2a),y			sta 	(temp0),y
.4a6f	88		dey				dey
.4a70	a5 35		lda $35				lda 	lowMemory
.4a72	91 2a		sta ($2a),y			sta 	(temp0),y
.4a74	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4a76					_CVNCopy:
.4a76	b1 2e		lda ($2e),y			lda		(temp2),y
.4a78	91 35		sta ($35),y			sta 	(lowMemory),y
.4a7a	c8		iny				iny
.4a7b	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4a7d	90 f7		bcc $4a76			bcc 	_CVNCopy
.4a7f	98		tya				tya 								; add Y to low memory
.4a80	18		clc				clc
.4a81	65 35		adc $35				adc 	lowMemory
.4a83	85 35		sta $35				sta 	lowMemory
.4a85	90 02		bcc $4a89			bcc 	_CVNNoCarry
.4a87	e6 36		inc $36				inc 	lowMemory+1
.4a89					_CVNNoCarry:
.4a89	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4a8a					FindVariable:
.4a8a	98		tya				tya
.4a8b	48		pha				pha
.4a8c	98		tya				tya 								; point temp2 to the actual name
.4a8d	18		clc				clc 								; in memory of the variable being created
.4a8e	65 28		adc $28				adc 	codePtr
.4a90	85 2e		sta $2e				sta 	temp2
.4a92	a5 29		lda $29				lda 	codePtr+1
.4a94	69 00		adc #$00			adc 	#0
.4a96	85 2f		sta $2f				sta 	temp2+1
.4a98	a0 00		ldy #$00			ldy 	#0
.4a9a	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4a9c	85 2a		sta $2a				sta 	temp0
.4a9e	a5 3c		lda $3c				lda 	hashList+1
.4aa0	85 2b		sta $2b				sta 	temp0+1
.4aa2	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4aa4	b1 2a		lda ($2a),y			lda 	(temp0),y
.4aa6	f0 2c		beq $4ad4			beq 	_FVFail
.4aa8	aa		tax				tax
.4aa9	88		dey				dey		 							; get LSB
.4aaa	b1 2a		lda ($2a),y			lda 	(temp0),y
.4aac	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4aae	86 2b		stx $2b				stx 	temp0+1
.4ab0	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4ab2	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ab4	cd 18 0e	cmp $0e18			cmp 	varHash
.4ab7	d0 e9		bne $4aa2			bne 	_FVNext 					; if not, no point in checking the name.
.4ab9	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4aba	b1 2a		lda ($2a),y			lda 	(temp0),y
.4abc	85 2d		sta $2d				sta 	temp1+1
.4abe	88		dey				dey
.4abf	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ac1	85 2c		sta $2c				sta 	temp1
.4ac3	a0 00		ldy #$00			ldy 	#0
.4ac5					_FVCheck:
.4ac5	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4ac7	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4ac9	d0 d7		bne $4aa2			bne 	_FVNext		 				; fail if different.
.4acb	c8		iny				iny
.4acc	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4ace	90 f5		bcc $4ac5			bcc 	_FVCheck
.4ad0	68		pla				pla
.4ad1	a8		tay				tay
.4ad2	38		sec				sec
.4ad3	60		rts				rts
.4ad4					_FVFail:
.4ad4	68		pla				pla
.4ad5	a8		tay				tay
.4ad6	18		clc				clc
.4ad7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4ad8					HashTableReset:
.4ad8	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4ada	a9 00		lda #$00			lda 	#0
.4adc					_HTRClear:
.4adc	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4adf	ca		dex				dex
.4ae0	d0 fa		bne $4adc			bne 	_HTRClear
.4ae2	60		rts				rts

;******  Return to file: variable/variable.asm

.4ae3					variableHandler:
.4ae3	7c e6 4a	jmp ($4ae6,x)			jmp 	(variableVectors,x)
.4ae6					variableVectors:
>4ae6	ee 4a					.word _DummyControlHandler ; index 0
>4ae8	1a 49					.word AccessVariable       ; index 2
>4aea	aa 47					.word CreateArray          ; index 4
>4aec	d8 4a					.word HashTableReset       ; index 6
.4aee					_DummyControlHandler:
.4aee	60		rts			rts

;******  Return to file: basic.asm

.4aef					section_end_variable:
.4aef					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e1b					endStorage:
>4aef							.align 	256
.4b00					programMemory:
>4aff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4b00					section_end_footer:

;******  End of listing
