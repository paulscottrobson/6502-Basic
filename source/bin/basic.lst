
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Tue Apr 27 01:55:42 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=1					cputype = 1
=1					autorun = 1
=0					coldstartnew = 0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35
.0af2					jumpVector:
>0af2							.fill 	2

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$ea					TKW_TYPE                     = $ea ; type
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$93					TKW_SOUND                    = $93 ; sound
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(
=$8f					TKW_PLAYINGLPAREN            = $8f ; playing(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: device/option_x16/x16const.inc

=$ffde					KNLReadTimer = $FFDE
=$ffd2					KNLPrintChar = $FFD2
=$ffe4					KNLCheckKeyboarBuffer = $FFE4
=$ffcf					KNLInputLine = $FFCF
=$ffe1					KNLCheckBreak = $FFE1
=$ffbd					KNLFileSetName = $FFBD
=$ffba					KNLFileSetLFS = $FFBA
=$ffd5					KNLFileLoad = $FFD5
=$ffd8					KNLFileSave = $FFD8

;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.
=$9f20					X16VeraAddLow = $9F20
=$9f21					X16VeraAddMed = $9F21
=$9f22					X16VeraAddHigh = $9F22
=$9f23					X16VeraData0 = $9F23
=$9f24					X16VeraData1 = $9F24
=$9f25					X16VeraControl = $9F25
=$9f29					X16VeraDCVideo = $9F29
=$9f2a					X16VeraHScale = $9F2A
=$9f2b					X16VeraVScale = $9F2B
=$9f2d					X16VeraLayerConfig = $9F2D
=$9f2e					X16VeraLayerMapBase = $9F2E
=$9f2f					X16VeraLayerTileBase = $9F2F
=$ff56					X16KReadJoystick = $FF56
=$ff50					X16KReadRTC = $FF50
=$1f9c0					X16VeraSound = $1F9C0
=$1fa00					X16VeraPalette = $1FA00
=320					GrWidth = 320 								; gfx mode size.
=200					GrHeight = 200
=$f800					VeraDefaultFont = $F800 					; where font is in Vera

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	8c 47						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 50		lda #$50			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 c5 29	jsr $29c5		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 ac 13	jsr $13ac		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 05 15	jsr $1505		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 c5 29	jsr $29c5		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 24 40	jsr $4024		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 cf 42	jsr $42cf		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 57 4b	jsr $4b57		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 16 4f	jsr $4f16		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 57 4b	jsr $4b57		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first character into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit 					; e.g. "INX"
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ? so it is lda (something
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A on its own. This is for ASL A
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it - this should be $3A
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1 (it may of course be absolute)
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 24 40	jsr $4024		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing 				; get ,X or ,Y if present
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit 					; neither present
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX 					; decide if ,X or ,Y
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 24 40	jsr $4024		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 27 15	jsr $1527		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 24 40	jsr $4024		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X) so get the ending and error on anything else.
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 24 40	jsr $4024		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma (e.g. ,X ,Y)
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af4					finalOpcode:
>0af4							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f4 0a	sta $0af4			sta 	finalOpcode					; save opcode.
.1113	5a		phy				phy
.1114	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O (e.g. what do we display/check.)
.1117	29 02		and #$02			and 	#2
.1119	f0 2b		beq $1146			beq 	_ASMWNoEcho 				; if bit 2 zero then don't echo.
.111b	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111e	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1121	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1124	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1127	ad f4 0a	lda $0af4			lda 	finalOpcode 				; write opcode
.112a	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.112d	e0 00		cpx #$00			cpx 	#0
.112f	f0 0e		beq $113f			beq 	_ASMWEchoExit
.1131	a5 98		lda $98				lda 	esInt0
.1133	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.1136	e0 01		cpx #$01			cpx 	#1
.1138	f0 05		beq $113f			beq 	_ASMWEchoExit
.113a	a5 a0		lda $a0				lda 	esInt1
.113c	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.113f					_ASMWEchoExit:
.113f	da		phx				phx
.1140	a2 04		ldx #$04		ldx	#4
.1142	20 05 15	jsr $1505		jsr	deviceHandler
.1145	fa		plx				plx
.1146					_ASMWNoEcho:
.1146	ad f4 0a	lda $0af4			lda 	finalOpcode 				; opcode
.1149	20 60 11	jsr $1160			jsr 	AsmWriteByte
.114c	e0 00		cpx #$00			cpx 	#0	 						; exit if no operands
.114e	f0 0e		beq $115e			beq 	_ASMWExit
.1150	a5 98		lda $98				lda 	esInt0	 					; low byte
.1152	20 60 11	jsr $1160			jsr 	AsmWriteByte
.1155	e0 01		cpx #$01			cpx 	#1
.1157	f0 05		beq $115e			beq 	_ASMWExit
.1159	a5 a0		lda $a0				lda 	esInt1 						; high byte
.115b	20 60 11	jsr $1160			jsr 	AsmWriteByte
.115e					_ASMWExit:
.115e	7a		ply				ply
.115f	60		rts				rts
.1160					AsmWriteByte:
.1160	a0 00		ldy #$00			ldy 	#0
.1162	48		pha				pha
.1163	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1166	85 2a		sta $2a				sta 	temp0
.1168	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116b	85 2b		sta $2b				sta 	temp0+1
.116d	68		pla				pla 								; write out the byte.
.116e	91 2a		sta ($2a),y			sta 	(temp0),y
.1170	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1173	d0 03		bne $1178			bne 	_AWBNoCarry
.1175	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1178					_AWBNoCarry:
.1178	60		rts				rts
.1179					AWIWriteHexSpace:
.1179	48		pha				pha
.117a	a9 20		lda #$20			lda 	#" "
.117c	20 93 11	jsr $1193			jsr 	AWIPrintChar
.117f	68		pla				pla
.1180					AWIWriteHex:
.1180	48		pha				pha
.1181	4a		lsr a				lsr 	a
.1182	4a		lsr a				lsr 	a
.1183	4a		lsr a				lsr 	a
.1184	4a		lsr a				lsr 	a
.1185	20 89 11	jsr $1189			jsr 	AWIPrintNibble
.1188	68		pla				pla
.1189					AWIPrintNibble:
.1189	29 0f		and #$0f			and 	#15
.118b	c9 0a		cmp #$0a			cmp 	#10
.118d	90 02		bcc $1191			bcc 	_AWIPNDigit
.118f	69 06		adc #$06			adc 	#6
.1191					_AWIPNDigit:
.1191	69 30		adc #$30			adc 	#48
.1193					AWIPrintChar:
.1193	85 32		sta $32				sta 	tempShort
.1195	da		phx				phx
.1196	a5 32		lda $32				lda 	tempShort
.1198	a2 14		ldx #$14		ldx	#20
.119a	20 05 15	jsr $1505		jsr	deviceHandler
.119d	fa		plx				plx
.119e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af5					asmToken:
>0af5							.fill 	1
.0af6					asmMode:
>0af6							.fill 	1 							; esInt0/1
.0af7					asmBaseOpcode:
>0af7							.fill 	1
.119f					AssembleOneInstruction:
.119f	8d f5 0a	sta $0af5			sta 	asmToken 					; save the token
.11a2	aa		tax				tax
.11a3	bd 6c 11	lda $116c,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11a6	8d f7 0a	sta $0af7			sta 	asmBaseOpcode
.11a9	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11ac	8d f6 0a	sta $0af6			sta 	asmMode
.11af	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b1	d0 05		bne $11b8			bne 	_AOIThreeBytes 				; if so, we have to use three byte, can't try zp before abs
.11b3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11b6	b0 10		bcs $11c8			bcs 	_AOISuccess 				; worked ok.
.11b8					_AOIThreeBytes:
.11b8	ae f6 0a	ldx $0af6			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11bb	bd f2 11	lda $11f2,x			lda 	AbsoluteVersionTable,x
.11be	30 09		bmi $11c9			bmi 	_AOIError					; not possible, no equivalent.
.11c0	8d f6 0a	sta $0af6			sta 	asmMode
.11c3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11c6	90 01		bcc $11c9			bcc 	_AOIError 					; didn't work.
.11c8					_AOISuccess:
.11c8	60		rts				rts
.11c9					_AOIError:
.11c9	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11cb	20 27 15	jsr $1527		jsr	errorHandler
.11ce					AssembleAttempt:
.11ce	20 d7 11	jsr $11d7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d1	b0 03		bcs $11d6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d3	20 7f 13	jsr $137f			jsr 	AssembleSpecialCase
.11d6					_AAExit:
.11d6	60		rts				rts
.11d7					_AADispatch:
.11d7	ad f5 0a	lda $0af5			lda 	asmToken
.11da	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11dc	b0 11		bcs $11ef			bcs 	_AAGroup4
.11de	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e0	b0 0a		bcs $11ec			bcs 	_AAGroup3
.11e2	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11e4	b0 03		bcs $11e9			bcs 	_AAGroup2
.11e6	4c c5 12	jmp $12c5			jmp 	AssembleGroup1
.11e9					_AAGroup2:
.11e9	4c 20 13	jmp $1320			jmp 	AssembleGroup2
.11ec					_AAGroup3:
.11ec	4c 41 13	jmp $1341			jmp 	AssembleGroup3
.11ef					_AAGroup4:
.11ef	4c 75 13	jmp $1375			jmp 	AssembleGroup4
.11f2					AbsoluteVersionTable:
>11f2	ff						.byte	$FF 			; fail AMD_IMM
>11f3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11f4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11f5	ff						.byte	$FF 			; fail AMD_ABS
>11f6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11f7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11f8	ff						.byte	$FF 			; fail AMD_ABSY
>11f9	ff						.byte	$FF 			; fail AMD_ABSX
>11fa	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11fb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11fc	ff						.byte	$FF 			; fail AMD_ABSIND
>11fd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11fe	ff						.byte	$FF 			; fail AMD_REL
>11ff	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1200					OpcodeTable:
>1200	01					.byte	$01			; $94 ora
>1201	21					.byte	$21			; $95 (and)
>1202	41					.byte	$41			; $96 eor
>1203	61					.byte	$61			; $97 adc
>1204	81					.byte	$81			; $98 sta
>1205	a1					.byte	$a1			; $99 lda
>1206	c1					.byte	$c1			; $9a cmp
>1207	e1					.byte	$e1			; $9b sbc
>1208	02					.byte	$02			; $9c asl
>1209	22					.byte	$22			; $9d rol
>120a	42					.byte	$42			; $9e lsr
>120b	62					.byte	$62			; $9f ror
>120c	82					.byte	$82			; $a0 stx
>120d	a2					.byte	$a2			; $a1 ldx
>120e	c2					.byte	$c2			; $a2 dec
>120f	e2					.byte	$e2			; $a3 inc
>1210	60					.byte	$60			; $a4 stz
>1211	20					.byte	$20			; $a5 bit
>1212	80					.byte	$80			; $a6 sty
>1213	a0					.byte	$a0			; $a7 ldy
>1214	c0					.byte	$c0			; $a8 cpy
>1215	e0					.byte	$e0			; $a9 cpx
>1216	00					.byte	$00			; $aa tsb
>1217	10					.byte	$10			; $ab trb
>1218	14					.byte	$14			; $ac jsr
>1219	40					.byte	$40			; $ad jmp
>121a	10					.byte	$10			; $ae bpl
>121b	30					.byte	$30			; $af bmi
>121c	50					.byte	$50			; $b0 bvc
>121d	70					.byte	$70			; $b1 bvs
>121e	90					.byte	$90			; $b2 bcc
>121f	b0					.byte	$b0			; $b3 bcs
>1220	d0					.byte	$d0			; $b4 bne
>1221	f0					.byte	$f0			; $b5 beq
>1222	80					.byte	$80			; $b6 bra
>1223	00					.byte	$00			; $b7 brk
>1224	08					.byte	$08			; $b8 php
>1225	18					.byte	$18			; $b9 clc
>1226	28					.byte	$28			; $ba plp
>1227	38					.byte	$38			; $bb sec
>1228	40					.byte	$40			; $bc rti
>1229	48					.byte	$48			; $bd pha
>122a	58					.byte	$58			; $be cli
>122b	5a					.byte	$5a			; $bf phy
>122c	60					.byte	$60			; $c0 rts
>122d	68					.byte	$68			; $c1 pla
>122e	78					.byte	$78			; $c2 sei
>122f	7a					.byte	$7a			; $c3 ply
>1230	88					.byte	$88			; $c4 dey
>1231	8a					.byte	$8a			; $c5 txa
>1232	98					.byte	$98			; $c6 tya
>1233	9a					.byte	$9a			; $c7 txs
>1234	a8					.byte	$a8			; $c8 tay
>1235	aa					.byte	$aa			; $c9 tax
>1236	b8					.byte	$b8			; $ca clv
>1237	ba					.byte	$ba			; $cb tsx
>1238	c8					.byte	$c8			; $cc iny
>1239	ca					.byte	$ca			; $cd dex
>123a	d8					.byte	$d8			; $ce cld
>123b	da					.byte	$da			; $cf phx
>123c	e8					.byte	$e8			; $d0 inx
>123d	ea					.byte	$ea			; $d1 nop
>123e	f8					.byte	$f8			; $d2 sed
>123f	fa					.byte	$fa			; $d3 plx
.1240					Group2OpcodeAvailability:
>1240	ae					.byte	$ae			; $9c asl $02
>1241	ae					.byte	$ae			; $9d rol $22
>1242	ae					.byte	$ae			; $9e lsr $42
>1243	ae					.byte	$ae			; $9f ror $62
>1244	0a					.byte	$0a			; $a0 stx $82
>1245	0b					.byte	$0b			; $a1 ldx $a2
>1246	aa					.byte	$aa			; $a2 dec $c2
>1247	aa					.byte	$aa			; $a3 inc $e2
>1248	22					.byte	$22			; $a4 stz $60
>1249	aa					.byte	$aa			; $a5 bit $20
>124a	2a					.byte	$2a			; $a6 sty $80
>124b	ab					.byte	$ab			; $a7 ldy $a0
>124c	2b					.byte	$2b			; $a8 cpy $c0
>124d	0b					.byte	$0b			; $a9 cpx $e0
>124e	0a					.byte	$0a			; $aa tsb $00
>124f	0a					.byte	$0a			; $ab trb $10
>1250	08					.byte	$08			; $ac jsr $14
>1251	08					.byte	$08			; $ad jmp $40
.1252					AssemblerSpecialCases:
>1252	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>1255	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>1258	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>125b	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>125e	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1261	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>1264	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>1267	a5 00 89				.byte	$a5,0,$89		; bit #
>126a	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>126d	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1270	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1271					AssembleLabel:
.1271	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1273	c9 3a		cmp #$3a			cmp 	#$3A 						; e.g. it isn't just '.'
.1275	b0 49		bcs $12c0			bcs 	_ALSyntax
.1277	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.1279	a2 02		ldx #$02		ldx	#2
.127b	20 16 4f	jsr $4f16		jsr	variableHandler
.127e	a5 90		lda $90				lda 	esType 						; check integer reference
.1280	c9 80		cmp #$80			cmp 	#$80
.1282	d0 3c		bne $12c0			bne 	_ALSyntax
.1284	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.1286	85 2a		sta $2a				sta 	temp0
.1288	a5 a0		lda $a0				lda 	esInt1
.128a	85 2b		sta $2b				sta 	temp0+1
.128c	5a		phy				phy
.128d	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2 ?
.1290	4a		lsr a				lsr 	a
.1291	90 11		bcc $12a4			bcc 	_ALWrite
.1293	a0 00		ldy #$00			ldy 	#0
.1295	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.1298	d1 2a		cmp ($2a),y			cmp 	(temp0),y 					; labels cannot change value, usually means address mode has changed.
.129a	d0 1f		bne $12bb			bne 	_ALChanged
.129c	c8		iny				iny
.129d	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a2	d0 17		bne $12bb			bne 	_ALChanged
.12a4					_ALWrite:
.12a4	a0 00		ldy #$00			ldy 	#0
.12a6	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12a9	91 2a		sta ($2a),y			sta 	(temp0),y
.12ab	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12ae	c8		iny				iny
.12af	91 2a		sta ($2a),y			sta 	(temp0),y
.12b1	a9 00		lda #$00			lda 	#0
.12b3	c8		iny				iny
.12b4	91 2a		sta ($2a),y			sta 	(temp0),y
.12b6	c8		iny				iny
.12b7	91 2a		sta ($2a),y			sta 	(temp0),y
.12b9	7a		ply				ply
.12ba	60		rts				rts
.12bb					_ALChanged:
.12bb	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12bd	20 27 15	jsr $1527		jsr	errorHandler
.12c0					_ALSyntax:
.12c0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12c2	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12c5					AssembleGroup1:
.12c5	ad f5 0a	lda $0af5			lda 	asmToken 					; firstly, we throw out STA immediate
.12c8	c9 98		cmp #$98			cmp 	#TKW_STA
.12ca	d0 07		bne $12d3			bne 	_AG1NotStoreImm
.12cc	ad f6 0a	lda $0af6			lda 	asmMode
.12cf	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d1	f0 2c		beq $12ff			beq 	AG1ModeError
.12d3					_AG1NotStoreImm:
.12d3	ae f6 0a	ldx $0af6			ldx 	asmMode						; get mode into X.
.12d6	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12d9	48		pha				pha
.12da	f0 23		beq $12ff			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12dc	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12de	d0 02		bne $12e2			bne 	_AG1NotImmediate
.12e0	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12e2					_AG1NotImmediate:
.12e2	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12e4	d0 02		bne $12e8			bne 	_AG1NotZX
.12e6	a2 00		ldx #$00			ldx 	#0
.12e8					_AG1NotZX:
.12e8	68		pla				pla 								; restore length
.12e9	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12eb	b0 10		bcs $12fd			bcs 	AG1Fail
.12ed					AG1ReturnValue:
.12ed	85 32		sta $32				sta 	tempShort 					; save size of operand
.12ef	18		clc				clc
.12f0	bd 12 13	lda $1312,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12f3	6d f7 0a	adc $0af7			adc 	asmBaseOpcode 				; add the base opcode.
.12f6	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12f8	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.12fb	38		sec				sec
.12fc	60		rts				rts
.12fd					AG1Fail:
.12fd	18		clc				clc
.12fe	60		rts				rts
.12ff					AG1ModeError:
.12ff	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1301	20 27 15	jsr $1527		jsr	errorHandler
.1304					AMDOperandSize:
>1304	01 01 00 02					.byte 	1,1,0,2
>1308	01 01 02 02					.byte 	1,1,2,2
>130c	01 01 02 02					.byte 	1,1,2,2
>1310	01 01						.byte 	1,1
.1312					AMDOffsetFromBase:
>1312	00 04 08 0c					.byte 	0,4,8,12
>1316	10 14 18 1c					.byte	16,20,24,28
>131a	11 00 00 00					.byte 	17,0,0,0
>131e	00 00						.byte 	0,0
.1320					AssembleGroup2:
.1320	ad f6 0a	lda $0af6			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.1323	c9 08		cmp #$08			cmp 	#8
.1325	b0 18		bcs $133f			bcs 	_AG2Fail
.1327	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1329	ae f5 0a	ldx $0af5			ldx 	asmToken					; get token in X, then get the availability flags for it
.132c	bd a4 11	lda $11a4,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.132f					_AG2Shift:
.132f	4a		lsr a				lsr 	a
.1330	c6 2a		dec $2a				dec 	temp0
.1332	10 fb		bpl $132f			bpl 	_AG2Shift
.1334	90 09		bcc $133f			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.1336	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.1339	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.133c	4c ed 12	jmp $12ed			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.133f					_AG2Fail:
.133f	18		clc				clc
.1340	60		rts				rts
.1341					AssembleGroup3:
.1341	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.1344	4a		lsr a				lsr 	a
.1345	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.1347	90 21		bcc $136a			bcc 	_AG3Default
.1349	38		sec				sec	 								; calculate branch offset
.134a	a5 98		lda $98				lda		esInt0
.134c	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.134f	aa		tax				tax
.1350	a5 a0		lda $a0				lda		esInt1
.1352	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.1355	85 a0		sta $a0				sta 	esInt1
.1357	8a		txa				txa 								; add 126, now 128 too many.
.1358	18		clc				clc 								; we can use this to check the range
.1359	69 7e		adc #$7e			adc 	#126
.135b	85 98		sta $98				sta 	esInt0
.135d	90 02		bcc $1361			bcc 	_AG3NoCarry
.135f	e6 a0		inc $a0				inc 	esInt1
.1361					_AG3NoCarry:
.1361	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.1363	d0 0b		bne $1370			bne 	_AG3Range
.1365	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.1367	38		sec				sec
.1368	e9 80		sbc #$80			sbc 	#128
.136a					_AG3Default:
.136a	85 98		sta $98				sta 	esInt0
.136c					_AG3ExitOk:
.136c	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.136e	d0 07		bne $1377			bne 	AG4Write
.1370					_AG3Range:
.1370	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.1372	20 27 15	jsr $1527		jsr	errorHandler
.1375					AssembleGroup4:
.1375	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1377					AG4Write:
.1377	ad f7 0a	lda $0af7			lda 	asmBaseOpcode				; the opcode is the opcode base.
.137a	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.137d	38		sec				sec
.137e	60		rts				rts
.137f					AssembleSpecialCase:
.137f	a2 00		ldx #$00			ldx 	#0
.1381					_ASCScan:
.1381	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.1384	cd f5 0a	cmp $0af5			cmp 	asmToken
.1387	d0 08		bne $1391			bne 	_ASCNext
.1389	bd 53 12	lda $1253,x			lda 	AssemblerSpecialCases+1,x
.138c	cd f6 0a	cmp $0af6			cmp 	asmMode
.138f	f0 0a		beq $139b			beq 	_ASCFound
.1391					_ASCNext:
.1391	e8		inx				inx									; next entry
.1392	e8		inx				inx
.1393	e8		inx				inx
.1394	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; until table ends
.1397	d0 e8		bne $1381			bne 	_ASCScan
.1399	18		clc				clc
.139a	60		rts				rts
.139b					_ASCFound:
.139b	bd 54 12	lda $1254,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.139e	48		pha				pha
.139f	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.13a2	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13a5	aa		tax				tax
.13a6	68		pla				pla 								; opcode back
.13a7	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13aa	38		sec				sec
.13ab	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13ac					assemblerHandler:
.13ac	7c af 13	jmp ($13af,x)			jmp 	(assemblerVectors,x)
.13af					assemblerVectors:
>13af	b5 13					.word _DummyControlHandler ; index 0
>13b1	9f 11					.word AssembleOneInstruction ; index 2
>13b3	71 12					.word AssembleLabel        ; index 4
.13b5					_DummyControlHandler:
.13b5	60		rts			rts

;******  Return to file: basic.asm

.13b6					section_end_assembler:
.13b6					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13b6					X16SyncBreak:
.13b6	5a		phy				phy
.13b7	20 de ff	jsr $ffde			jsr 	KNLReadTimer
.13ba	ac e8 0b	ldy $0be8			ldy 	nextSyncTick 				; if NST = 0 then always sync
.13bd	a8		tay				tay 								; save tick in Y
.13be	38		sec				sec
.13bf	ed e8 0b	sbc $0be8			sbc 	nextSyncTick 				; calculate timer - next tick
.13c2	30 0c		bmi $13d0			bmi 	_X16NoSync 					; if -ve then no sync.
.13c4					_X16Sync:
.13c4	98		tya				tya 								; get current time back
.13c5	18		clc				clc 								; work out time of next tick.
.13c6	69 06		adc #$06			adc 	#6 							; at 60Hz that is six ticks.
.13c8	8d e8 0b	sta $0be8			sta 	nextSyncTick
.13cb	a9 fd		lda #$fd			lda 	#$FD 						; call the extension update code.
.13cd	20 74 18	jsr $1874		jsr	extensionHandler
.13d0					_X16NoSync:
.13d0	7a		ply				ply
.13d1	20 e1 ff	jsr $ffe1			jsr 	KNLCheckBreak
.13d4	f0 01		beq $13d7			beq 	_IsBreak
.13d6	60		rts				rts
.13d7					_IsBreak:
.13d7	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13d9	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13dc					ExternSave:
.13dc	5a		phy				phy
.13dd	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.13e0	20 bd ff	jsr $ffbd			jsr 	KNLFileSetName 				; set name
.13e3	a9 01		lda #$01			lda 	#1
.13e5	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13e7	a0 00		ldy #$00			ldy 	#0
.13e9	20 ba ff	jsr $ffba			jsr 	KNLFileSetLFS 				; set LFS
.13ec	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13ee	85 2a		sta $2a				sta 	temp0
.13f0	a5 a1		lda $a1				lda 	esInt1+1
.13f2	85 2b		sta $2b				sta 	temp0+1
.13f4	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13f6	a4 a2		ldy $a2				ldy 	esInt1+2
.13f8	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13fa	20 d8 ff	jsr $ffd8			jsr 	KNLFileSave 				; save
.13fd	b0 02		bcs $1401			bcs 	_ESSave
.13ff	7a		ply				ply
.1400	60		rts				rts
.1401					_ESSave:
.1401	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.1403	20 27 15	jsr $1527		jsr	errorHandler
.1406					ExternLoad:
.1406	5a		phy				phy
.1407	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.140a	20 bd ff	jsr $ffbd			jsr 	KNLFileSetName 				; set name
.140d	a9 01		lda #$01			lda 	#1
.140f	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1411	a0 00		ldy #$00			ldy 	#0
.1413	20 ba ff	jsr $ffba			jsr 	KNLFileSetLFS 				; set LFS
.1416	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1418	a4 a1		ldy $a1				ldy 	esInt1+1
.141a	a9 00		lda #$00			lda 	#0 							; load command
.141c	20 d5 ff	jsr $ffd5			jsr 	KNLFileLoad
.141f	b0 02		bcs $1423			bcs 	_ESLoad
.1421	7a		ply				ply
.1422	60		rts				rts
.1423					_ESLoad:
.1423	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1425	20 27 15	jsr $1527		jsr	errorHandler
.1428					ExternGetLength:
.1428	a5 98		lda $98				lda 	esInt0 						; length into A.
.142a	85 2a		sta $2a				sta 	temp0
.142c	a5 a0		lda $a0				lda 	esInt1
.142e	85 2b		sta $2b				sta 	temp0+1
.1430	a0 00		ldy #$00			ldy 	#0
.1432	b1 2a		lda ($2a),y			lda 	(temp0),y
.1434	a6 98		ldx $98				ldx 	esInt0 						; name string address into YX
.1436	a4 a0		ldy $a0				ldy 	esInt1
.1438	e8		inx				inx 								; advance over the length byte.
.1439	d0 01		bne $143c			bne 	_ESNoCarry
.143b	c8		iny				iny
.143c					_ESNoCarry:
.143c	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af8					bufferCount:
>0af8							.fill 	0
.0af8					bufferStorage:
>0af8							.fill 	MaxLineInputSize
.0be8					nextSyncTick:
>0be8							.fill 	0
.143d					IOControlHandler:
.143d	c9 00		cmp #$00			cmp 	#0
.143f	d0 15		bne $1456			bne		_CHExit
.1441	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1443	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1446	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1448	20 99 14	jsr $1499			jsr 	IOInk
.144b	a9 00		lda #$00			lda 	#0
.144d	8d e8 0b	sta $0be8			sta 	nextSyncTick
.1450	20 ad 14	jsr $14ad			jsr 	IOPaper
.1453	20 57 14	jsr $1457			jsr 	IOClearScreen
.1456					_CHExit:
.1456	60		rts				rts
.1457					IOClearScreen:
.1457	48		pha				pha
.1458	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.145a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.145d	68		pla				pla
.145e	60		rts				rts
.145f					IONewLine:
.145f	48		pha				pha
.1460	a9 0d		lda #$0d			lda 	#13
.1462	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1465	68		pla				pla
.1466	60		rts				rts
.1467					IOTab:
.1467	48		pha				pha
.1468	a9 20		lda #$20			lda 	#32
.146a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.146d	68		pla				pla
.146e	60		rts				rts
.146f					IOPrintAscii:
.146f					IOPrintChar:
.146f	aa		tax				tax 								; save in X so we can save Y
.1470	5a		phy				phy
.1471	8a		txa				txa
.1472	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1474	d0 02		bne $1478			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1476	a9 14		lda #$14			lda 	#$14
.1478					_IOPCNotBS:
.1478	20 d2 ff	jsr $ffd2			jsr 	KNLPrintChar 				; CBM OS Call.
.147b	7a		ply				ply
.147c	60		rts				rts
.147d					IOInkey:
.147d	5a		phy				phy
.147e	20 e4 ff	jsr $ffe4			jsr 	KNLCheckKeyboarBuffer
.1481	85 32		sta $32				sta 	tempShort
.1483	7a		ply				ply
.1484	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1486	f0 10		beq $1498			beq 	_IOIExit
.1488	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.148a	f0 0c		beq $1498			beq 	_IOIExit
.148c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.148e	f0 06		beq $1496			beq 	_IOIBackspace
.1490	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1492	90 e9		bcc $147d			bcc 	IOInkey
.1494	b0 02		bcs $1498			bcs 	_IOIExit
.1496					_IOIBackspace:
.1496	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1498					_IOIExit:
.1498	60		rts				rts
.1499					IOInk:
.1499	48		pha				pha
.149a	29 07		and #$07			and 	#7 							; 8 primaries
.149c	aa		tax				tax
.149d	bd a5 14	lda $14a5,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.14a0	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14a3	68		pla				pla
.14a4	60		rts				rts
.14a5					_IOColourTable:
>14a5	90						.byte 	$90 					; 0 Black
>14a6	96						.byte 	$96 					; 1 Red
>14a7	1e						.byte 	$1E 					; 2 Green
>14a8	9e						.byte 	$9E 					; 3 Yellow
>14a9	9a						.byte 	$9A 					; 4 Blue
>14aa	9c						.byte 	$9C 					; 5 Magenta
>14ab	9f						.byte 	$9F 					; 6 Cyan
>14ac	05						.byte 	$05 					; 7 White
.14ad					IOPaper:
.14ad	48		pha				pha
.14ae	48		pha				pha
.14af	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14b1	20 6f 14	jsr $146f			jsr 	IOPrintChar 			; and then swap them again.
.14b4	68		pla				pla
.14b5	20 99 14	jsr $1499			jsr 	IOInk
.14b8	a9 01		lda #$01			lda 	#1
.14ba	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14bd	68		pla				pla
.14be	60		rts				rts
.14bf					IOLocate:
.14bf	48		pha				pha
.14c0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14c2	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14c5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14c7	20 cd 14	jsr $14cd			jsr 	_IOLoc2
.14ca	7a		ply				ply
.14cb	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14cd					_IOLoc2:
.14cd	c0 00		cpy #$00			cpy 	#0
.14cf	f0 06		beq $14d7			beq 	_IOLocExit
.14d1	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14d4	88		dey				dey
.14d5	d0 f6		bne $14cd			bne 	_IOLoc2
.14d7					_IOLocExit:
.14d7	60		rts				rts
.14d8					IOInput:
.14d8	a9 00		lda #$00			lda 	#0
.14da	8d f8 0a	sta $0af8			sta 	bufferCount
.14dd					_IOILoop:
.14dd	20 cf ff	jsr $ffcf			jsr 	KNLInputLine
.14e0	c9 0d		cmp #$0d			cmp 	#13
.14e2	f0 10		beq $14f4			beq 	_IOIExit
.14e4	ae f8 0a	ldx $0af8			ldx 	bufferCount
.14e7	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14e9	f0 f2		beq $14dd			beq 	_IOILoop
.14eb	ee f8 0a	inc $0af8			inc 	bufferCount
.14ee	9d f9 0a	sta $0af9,x			sta 	bufferStorage+1,x
.14f1	4c dd 14	jmp $14dd			jmp 	_IOILoop
.14f4					_IOIExit:
.14f4	a9 f8		lda #$f8			lda 	#(bufferCount) & $FF
.14f6	85 2a		sta $2a				sta 	temp0
.14f8	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14fa	85 2b		sta $2b				sta 	1+(temp0)
.14fc	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14fd					IOReadTimer:
.14fd	20 de ff	jsr $ffde			jsr 	KNLReadTimer 				; reads timer into YXA so we want only YA
.1500	48		pha				pha
.1501	8a		txa				txa
.1502	a8		tay				tay
.1503	68		pla				pla
.1504	60		rts				rts

;******  Return to file: device/device.asm

.1505					deviceHandler:
.1505	7c 08 15	jmp ($1508,x)			jmp 	(deviceVectors,x)
.1508					deviceVectors:
>1508	3d 14					.word IOControlHandler     ; index 0
>150a	57 14					.word IOClearScreen        ; index 2
>150c	5f 14					.word IONewLine            ; index 4
>150e	99 14					.word IOInk                ; index 6
>1510	7d 14					.word IOInkey              ; index 8
>1512	d8 14					.word IOInput              ; index 10
>1514	06 14					.word ExternLoad           ; index 12
>1516	bf 14					.word IOLocate             ; index 14
>1518	ad 14					.word IOPaper              ; index 16
>151a	6f 14					.word IOPrintChar          ; index 18
>151c	6f 14					.word IOPrintAscii         ; index 20
>151e	dc 13					.word ExternSave           ; index 22
>1520	b6 13					.word X16SyncBreak         ; index 24
>1522	67 14					.word IOTab                ; index 26
>1524	fd 14					.word IOReadTimer          ; index 28
.1526					_DummyControlHandler:
.1526	60		rts			rts

;******  Return to file: basic.asm

.1527					section_end_device:
.1527					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1527					ErrorHandler:
.1527	da		phx				phx
.1528	a9 01		lda #$01			lda 	#1 							; red
.152a	a2 06		ldx #$06		ldx	#6
.152c	20 05 15	jsr $1505		jsr	deviceHandler
.152f	fa		plx				plx
.1530	a9 9b		lda #$9b			lda 	#(ErrorTextList) & $FF
.1532	85 2a		sta $2a				sta 	temp0
.1534	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1536	85 2b		sta $2b				sta 	1+(temp0)
.1538	ca		dex		_EHFind:dex									; errors start at 1
.1539	f0 10		beq $154b			beq 	_EHFound
.153b	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.153d	38		sec				sec
.153e	a5 2a		lda $2a				lda 	temp0
.1540	71 2a		adc ($2a),y			adc 	(temp0),y
.1542	85 2a		sta $2a				sta 	temp0
.1544	90 f2		bcc $1538			bcc 	_EHFind
.1546	e6 2b		inc $2b				inc 	temp0+1
.1548	4c 38 15	jmp $1538			jmp 	_EHFind
.154b					_EHFound:
.154b	20 5f 18	jsr $185f			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.154e	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1550	b1 28		lda ($28),y			lda 	(codePtr),y
.1552	f0 39		beq $158d			beq 	_EHNoLine
.1554	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1556	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1559	90 32		bcc $158d			bcc 	_EHNoLine
.155b	a9 97		lda #$97			lda 	#(EHAtMsg) & $FF
.155d	85 2a		sta $2a				sta 	temp0
.155f	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1561	85 2b		sta $2b				sta 	1+(temp0)
.1563	20 5f 18	jsr $185f			jsr 	EHPrintAscii
.1566	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1568	a2 00		ldx #$00			ldx 	#0
.156a	b1 28		lda ($28),y			lda 	(codePtr),y
.156c	95 98		sta $98,x			sta 	esInt0,x
.156e	c8		iny				iny
.156f	b1 28		lda ($28),y			lda 	(codePtr),y
.1571	95 a0		sta $a0,x			sta 	esInt1,x
.1573	a9 00		lda #$00			lda 	#0
.1575	95 a8		sta $a8,x			sta 	esInt2,x
.1577	95 b0		sta $b0,x			sta 	esInt3,x
.1579	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.157b	85 2a		sta $2a				sta 	temp0
.157d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.157f	85 2b		sta $2b				sta 	1+(temp0)
.1581	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1583	a9 00		lda #$00			lda 	#0							; stack position zero.
.1585	a2 12		ldx #$12		ldx	#18
.1587	20 24 40	jsr $4024		jsr	mainHandler
.158a	20 5f 18	jsr $185f			jsr 	EHPrintAscii
.158d					_EHNoLine:
.158d	a2 04		ldx #$04		ldx	#4
.158f	20 05 15	jsr $1505		jsr	deviceHandler
.1592	a2 04		ldx #$04		ldx	#4
.1594	20 c5 29	jsr $29c5		jsr	interactionHandler
.1597					EHAtMsg:
>1597	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.159b					ErrorTextList:
>159b	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>15a3	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15af	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15b7	45 72 72 6f 72
>15bc	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15c4	64 69 73 61 62 6c 65 64
>15cc	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15d4	6f 6e 20 66 61 69 6c 65 64
>15dd	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15e5	42 79 20 5a 65 72 6f
>15ec	04 53 74 6f 70				.text 4,"Stop"
>15f1	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15f9	73 6d 61 74 63 68
>15ff	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1607	20 56 61 6c 75 65
>160d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1615	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1623	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>162b	20 63 6f 6d 6d 61
>1631	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1639	20 72 65 66 65 72 65 6e 63 65
>1643	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>164b	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1659	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1661	74 6f 6f 20 6c 6f 6e 67
>1669	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1671	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>167e	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1686	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1693	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>169b	74 68 6f 75 74 20 46 4f 52
>16a4	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>16ac	74 68 6f 75 74 20 57 48 49 4c 45
>16b7	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16bf	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16cc	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16d4	54 20 69 6e 64 65 78
>16db	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16e3	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16f3	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16fb	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>170a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1712	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1722	63 65
>1724	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>172c	20 50 72 6f 63 65 64 75 72 65
>1736	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>173e	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>174e	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1756	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1764	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>176c	75 69 72 65 73 20 61 72 72 61 79
>1777	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>177f	61 79 20 69 6e 64 65 78
>1787	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>178f	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>179f	6e 64 69 63 65 73
>17a5	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17ad	64 61 74 61
>17b1	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17b9	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17c6	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17ce	69 6c 65 64
>17d2	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17da	69 6c 65 64
>17de	05 42 72 65 61 6b			.text 5,"Break"
>17e4	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17ec	6d 65 6d 6f 72 79
>17f2	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17fa	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>1809	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1811	72 61 6e 64 2f 4d 6f 64 65
>181a	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1822	6f 75 74 20 6f 66 20 72 61 6e 67 65
>182e	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1836	68 61 6e 67 65 64 20 76 61 6c 75 65
>1842	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>184a	74 65 20 53 65 6c 65 63 74 65 64
>1855	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>185d	65
>185e	00					.byte 0

;******  Return to file: error/errorhandler.asm

.185f					EHPrintAscii:
.185f	a0 00		ldy #$00			ldy 	#0
.1861	b1 2a		lda ($2a),y			lda 	(temp0),y
.1863	aa		tax				tax
.1864	f0 0d		beq $1873			beq 	_EHPExit
.1866					_EHPLoop:
.1866	c8		iny				iny
.1867	da		phx				phx
.1868	b1 2a		lda ($2a),y			lda 	(temp0),y
.186a	a2 14		ldx #$14		ldx	#20
.186c	20 05 15	jsr $1505		jsr	deviceHandler
.186f	fa		plx				plx
.1870	ca		dex				dex
.1871	d0 f3		bne $1866			bne 	_EHPLoop
.1873					_EHPExit:
.1873	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1874					section_end_error:
.1874					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1874					ExtensionHandler:
.1874	c9 fd		cmp #$fd			cmp 	#$FD 						; check for sync
.1876	f0 21		beq $1899			beq 	_ExtensionSync
.1878	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.187a	f0 16		beq $1892			beq 	_ExtensionForce
.187c	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.187e	d0 08		bne $1888			bne 	_ExtensionUnary 			; is passed in A.
.1880	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1882	c8		iny				iny
.1883	0a		asl a				asl 	a
.1884	aa		tax				tax
.1885	7c 90 18	jmp ($1890,x)			jmp 	(Group2Vectors-12,x)
.1888					_ExtensionUnary:
.1888	48		pha				pha 								; save stack pos in A
.1889	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.188b	c8		iny				iny
.188c	0a		asl a				asl 	a
.188d	aa		tax				tax
.188e	68		pla				pla 								; restore stack pos and call group3 command.
.188f	7c ac 18	jmp ($18ac,x)			jmp 	(Group3Vectors-12,x)
.1892					_ExtensionForce:
.1892	20 e0 1f	jsr $1fe0			jsr 	SoundReset 					; all sound off as not updated
.1895	20 9b 24	jsr $249b			jsr 	ForceMode0 					; switch to mode 0 perhaps
.1898	60		rts				rts
.1899					_ExtensionSync:
.1899	4c ca 20	jmp $20ca			jmp 	SoundInterrupt

;******  Processing file: extension/../generated/tokenvectors2.inc

.189c					Group2Vectors:
>189c	77 26					.word	Command_VPoke            ; $86 vpoke
>189e	7a 26					.word	Command_VDoke            ; $87 vdoke
>18a0	4f 26					.word	Command_VLoad            ; $88 vload
>18a2	ad 24					.word	CommandMode              ; $89 mode
>18a4	6b 25					.word	CommandPalette           ; $8a palette
>18a6	b3 21					.word	CommandSprite            ; $8b sprite
>18a8	ee 1d					.word	CommandClg               ; $8c clg
>18aa	f0 1a					.word	Command_Rect             ; $8d rect
>18ac	f8 1a					.word	Command_Frame            ; $8e frame
>18ae	a2 25					.word	Command_Draw             ; $8f draw
>18b0	dd 1a					.word	Command_Plot             ; $90 plot
>18b2	b7 19					.word	Command_Line             ; $91 line
>18b4	fe 22					.word	Command_Paint            ; $92 paint
>18b6	0f 20					.word	CommandSound             ; $93 sound

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18b8					Group3Vectors:
>18b8	c3 26					.word	Command_VPeek            ; $86 vpeek(
>18ba	c6 26					.word	Command_VDeek            ; $87 vdeek(
>18bc	46 24					.word	Sprite_GetX              ; $88 sprite.x(
>18be	49 24					.word	Sprite_GetY              ; $89 sprite.y(
>18c0	fb 20					.word	FunctionCollide          ; $8a hit(
>18c2	8d 1e					.word	Unary_JoyX               ; $8b joy.x(
>18c4	90 1e					.word	Unary_JoyY               ; $8c joy.y(
>18c6	c9 1e					.word	Unary_JButton            ; $8d joy.b(
>18c8	62 1e					.word	Unary_Clock              ; $8e clock(
>18ca	8f 1f					.word	Unary_Playing            ; $8f playing(

;******  Return to file: extension/extensionhandler.asm

.18cc					XEvaluateInteger:
.18cc	8a		txa				txa
.18cd	a2 0a		ldx #$0a		ldx	#10
.18cf	20 24 40	jsr $4024		jsr	mainHandler
.18d2	aa		tax				tax
.18d3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be8					gStartStorage:
.0be8					gCurrentXPos:
>0be8							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0bea					gCurrentYPos:
>0bea							.fill 	2
.0bec					gX1:
>0bec							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bee					gY1:
>0bee							.fill 	2
.0bf0					gX2:
>0bf0							.fill 	2
.0bf2					gY2:
>0bf2							.fill 	2
.0bf4					gError:
>0bf4							.fill 	2
.0bf6					g2Error:
>0bf6							.fill 	2
.0bf8					gdx:
>0bf8							.fill 	2
.0bfa					gdy:
>0bfa							.fill 	2
.0bfc					gWordHandler:
>0bfc							.fill 	2
.0bfe					gModifiers:
.0bfe					gdInk:
>0bfe							.fill 	1
.0bff					gdPaper:
>0bff							.fill 	1
.0c00					gdSize:
>0c00							.fill 	1
.0c01					gdImage:
>0c01							.fill 	1
.0c02					gdFlip:
>0c02							.fill 	1
.0c03					gEndStorage:
.0c03					gdXLimit:
>0c03							.fill 	2
.0c05					gdYLimit:
>0c05							.fill 	2
.0c07					gdText:
>0c07							.fill 	2
.18d4					GResetStorage:
.18d4	da		phx				phx
.18d5	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18d7	a9 00		lda #$00			lda 	#0
.18d9					_GRSLoop:
.18d9	9d e8 0b	sta $0be8,x			sta 	gStartStorage,x
.18dc	ca		dex				dex
.18dd	10 fa		bpl $18d9			bpl 	_GRSLoop
.18df	a9 01		lda #$01			lda 	#1
.18e1	8d fe 0b	sta $0bfe			sta 	gdInk
.18e4	8d 00 0c	sta $0c00			sta 	gdSize
.18e7	fa		plx				plx
.18e8	60		rts				rts
.18e9					GHandler:
.18e9	8e fd 0b	stx $0bfd			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18ec	8d fc 0b	sta $0bfc			sta 	gWordHandler
.18ef	a9 00		lda #$00			lda 	#0							; default no text.
.18f1	8d 08 0c	sta $0c08			sta 	gdText+1
.18f4	88		dey				dey 								; predecrement
.18f5					_GHLoopNext:
.18f5	c8		iny				iny									; advance one character
.18f6					_GHLoop:
.18f6	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18f8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18fa	f0 f9		beq $18f5			beq 	_GHLoopNext
.18fc	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18fe	f0 4c		beq $194c			beq 	_GHExit
.1900	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1902	f0 48		beq $194c			beq 	_GHExit
.1904	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.1906	f0 35		beq $193d			beq 	_GHCallHandler 				; update post & call the handler
.1908	c9 ce		cmp #$ce			cmp 	#TKW_TO
.190a	f0 31		beq $193d			beq 	_GHCallHandler
.190c	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.190e	f0 14		beq $1924			beq 	_GHCPairSkip
.1910	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.1912	f0 39		beq $194d			beq 	_GHText
.1914	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.1916					_GHCheckTokens:
.1916	b1 28		lda ($28),y			lda 	(codePtr),y
.1918	dd 62 19	cmp $1962,x			cmp 	_GHTokenTable,x
.191b	f0 0e		beq $192b			beq 	_GHFoundToken
.191d	e8		inx				inx
.191e	bd 62 19	lda $1962,x			lda 	_GHTokenTable,x
.1921	d0 f3		bne $1916			bne 	_GHCheckTokens
.1923	88		dey				dey
.1924					_GHCPairSkip:
.1924	c8		iny				iny
.1925					_GHCPair:
.1925	20 68 19	jsr $1968			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1928	4c f6 18	jmp $18f6			jmp 	_GHLoop
.192b					_GHFoundToken:
.192b	c8		iny				iny 								; skip token (INK/PAPER etc.)
.192c	da		phx				phx
.192d	a9 00		lda #$00			lda 	#0 							; evaluate byte
.192f	a2 0c		ldx #$0c		ldx	#12
.1931	20 24 40	jsr $4024		jsr	mainHandler
.1934	fa		plx				plx
.1935	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1937	9d fe 0b	sta $0bfe,x			sta 	gModifiers,x 				; update the modifiers
.193a	4c f6 18	jmp $18f6			jmp 	_GHLoop 					; and loop back
.193d					_GHCallHandler:
.193d	c8		iny				iny 								; consume AT or TO.
.193e	20 68 19	jsr $1968			jsr 	GHMakeCurrent 				; update the coordinates.
.1941	5a		phy				phy
.1942	20 49 19	jsr $1949			jsr 	_GHCallHandlerCode 			; call the handler code
.1945	7a		ply				ply
.1946	4c f6 18	jmp $18f6			jmp 	_GHLoop 					; and loop round.
.1949					_GHCallHandlerCode:
.1949	6c fc 0b	jmp ($0bfc)			jmp 	(gWordHandler)
.194c					_GHExit:
.194c	60		rts				rts
.194d					_GHText:
.194d	c8		iny				iny 								; skip token
.194e	a9 00		lda #$00			lda 	#0 							; get string.
.1950	a2 0e		ldx #$0e		ldx	#14
.1952	20 24 40	jsr $4024		jsr	mainHandler
.1955	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.1957	8d 07 0c	sta $0c07			sta 	gdText
.195a	a5 a0		lda $a0				lda 	esInt1
.195c	8d 08 0c	sta $0c08			sta 	gdText+1
.195f	4c f6 18	jmp $18f6			jmp 	_GHLoop
.1962					_GHTokenTable:
>1962	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1967	00						.byte 	0
.1968					GHMakeCurrent:
.1968	da		phx				phx
.1969	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.196b	20 7a 19	jsr $197a			jsr 	_GHMCDoIt
.196e	a2 02		ldx #$02		ldx	#2
.1970	20 24 40	jsr $4024		jsr	mainHandler
.1973	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1975	20 7a 19	jsr $197a			jsr 	_GHMCDoIt
.1978	fa		plx				plx
.1979	60		rts				rts
.197a					_GHMCDoIt:
.197a	bd e8 0b	lda $0be8,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.197d	9d ec 0b	sta $0bec,x			sta 	gX1,x
.1980	bd e9 0b	lda $0be9,x			lda 	gCurrentXPos+1,x
.1983	9d ed 0b	sta $0bed,x			sta 	gX1+1,x
.1986	da		phx				phx
.1987	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1989	a2 0a		ldx #$0a		ldx	#10
.198b	20 24 40	jsr $4024		jsr	mainHandler
.198e	fa		plx				plx
.198f	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1991	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1994	a5 a0		lda $a0				lda 	esInt1
.1996	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1999	b0 17		bcs $19b2			bcs 	_GMHCRange
.199b	a5 a8		lda $a8				lda 	esInt2
.199d	05 b0		ora $b0				ora 	esInt3
.199f	d0 11		bne $19b2			bne 	_GMHCRange
.19a1	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.19a3	9d e8 0b	sta $0be8,x			sta 	gCurrentXPos,x
.19a6	9d f0 0b	sta $0bf0,x			sta 	gX2,x
.19a9	a5 a0		lda $a0				lda 	esInt1
.19ab	9d e9 0b	sta $0be9,x			sta 	gCurrentXPos+1,x
.19ae	9d f1 0b	sta $0bf1,x			sta 	gX2+1,x
.19b1	60		rts				rts
.19b2					_GMHCRange:
.19b2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19b4	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c09					gdySign:
>0c09							.fill 	1
.19b7					Command_Line:
.19b7	a9 bf		lda #$bf			lda 	#LineHandler & $FF
.19b9	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.19bb	20 e9 18	jsr $18e9			jsr 	GHandler
.19be	60		rts				rts
.19bf					LineHandler:
.19bf	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19c1	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c3	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.19c6	f0 09		beq $19d1			beq 	_LHRectCode
.19c8	a2 02		ldx #$02			ldx 	#gY1-gX1
.19ca	a0 06		ldy #$06			ldy 	#gY2-gX1
.19cc	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.19cf	d0 03		bne $19d4			bne 	_LHLineDrawer
.19d1					_LHRectCode:
.19d1	4c 04 1b	jmp $1b04			jmp 	RectHandler
.19d4					_LHLineDrawer:
.19d4	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19d6	a0 04		ldy #$04			ldy 	#gX2-gX1
.19d8	20 88 1c	jsr $1c88			jsr 	CompareCoords
.19db	90 0a		bcc $19e7			bcc 	_LHNoSwap
.19dd	20 d0 1c	jsr $1cd0			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19e0	a2 02		ldx #$02			ldx 	#gY1-gX1
.19e2	a0 06		ldy #$06			ldy 	#gY2-gX1
.19e4	20 d0 1c	jsr $1cd0			jsr 	GSwapCoords
.19e7					_LHNoSwap:
.19e7	20 10 1a	jsr $1a10			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19ea	a0 00		ldy #$00			ldy 	#gX1-gX1
.19ec	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19ef	b0 15		bcs $1a06			bcs 	_LHExit 					; line off screen.
.19f1					_LHDrawLoop:
.19f1	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19f3	a0 04		ldy #$04			ldy 	#gX2-gX1
.19f5	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.19f8	d0 0d		bne $1a07			bne 	_LHNextPixel
.19fa	a2 06		ldx #$06			ldx 	#gY2-gX1
.19fc	a0 06		ldy #$06			ldy 	#gY2-gX1
.19fe	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.1a01	d0 04		bne $1a07			bne 	_LHNextPixel
.1a03	20 8c 1d	jsr $1d8c			jsr 	gdPlotInk 					; plot the last pixel.
.1a06					_LHExit:
.1a06	60		rts				rts
.1a07					_LHNextPixel:
.1a07	20 8c 1d	jsr $1d8c			jsr 	gdPlotInk 					; plot the pixel.
.1a0a	20 64 1a	jsr $1a64			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.1a0d	4c f1 19	jmp $19f1			jmp  	_LHDrawLoop 				; and loop back if okay
.1a10					BresenhamInitialise:
.1a10	38		sec				sec
.1a11	ad f0 0b	lda $0bf0			lda 	gX2
.1a14	ed ec 0b	sbc $0bec			sbc 	gX1
.1a17	8d f8 0b	sta $0bf8			sta 	gdX
.1a1a	ad f1 0b	lda $0bf1			lda 	gX2+1
.1a1d	ed ed 0b	sbc $0bed			sbc 	gX1+1
.1a20	8d f9 0b	sta $0bf9			sta 	gdX+1
.1a23	38		sec				sec
.1a24	ad ee 0b	lda $0bee			lda 	gY1
.1a27	ed f2 0b	sbc $0bf2			sbc 	gY2
.1a2a	8d fa 0b	sta $0bfa			sta 	gdy
.1a2d	ad ef 0b	lda $0bef			lda 	gY1+1
.1a30	ed f3 0b	sbc $0bf3			sbc 	gY2+1
.1a33	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a36	ad fb 0b	lda $0bfb			lda 	gdy+1 						; save sign of dy
.1a39	8d 09 0c	sta $0c09			sta 	gdysign
.1a3c	30 12		bmi $1a50			bmi 	_BINormal
.1a3e	38		sec				sec
.1a3f	a9 00		lda #$00			lda 	#0
.1a41	ed fa 0b	sbc $0bfa			sbc 	gdy
.1a44	8d fa 0b	sta $0bfa			sta 	gdy
.1a47	a9 00		lda #$00			lda 	#0
.1a49	ed fb 0b	sbc $0bfb			sbc 	gdy+1
.1a4c	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a4f	60		rts				rts
.1a50					_BINormal:
.1a50	18		clc				clc
.1a51	ad f8 0b	lda $0bf8			lda 	gdx
.1a54	6d fa 0b	adc $0bfa			adc 	gdy
.1a57	8d f4 0b	sta $0bf4			sta 	gError
.1a5a	ad f9 0b	lda $0bf9			lda 	gdx+1
.1a5d	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a60	8d f5 0b	sta $0bf5			sta 	gError+1
.1a63	60		rts				rts
.1a64					BresenhamIteration:
.1a64	ad f4 0b	lda $0bf4			lda 	gError
.1a67	0a		asl a				asl 	a
.1a68	8d f6 0b	sta $0bf6			sta 	g2Error
.1a6b	ad f5 0b	lda $0bf5			lda 	gError+1
.1a6e	2a		rol a				rol 	a
.1a6f	8d f7 0b	sta $0bf7			sta 	g2Error+1
.1a72	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a74	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a76	20 95 1c	jsr $1c95			jsr 	CompareCoordsSigned
.1a79	30 03		bmi $1a7e			bmi 	_BINoE2DY
.1a7b	20 8b 1a	jsr $1a8b			jsr 	BresenhamE2GEDY
.1a7e					_BINoE2DY:
.1a7e	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a80	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a82	20 95 1c	jsr $1c95			jsr 	CompareCoordsSigned
.1a85	30 03		bmi $1a8a			bmi 	_BINoDXE2
.1a87	20 aa 1a	jsr $1aaa			jsr 	BresenhamDXGEE2
.1a8a					_BINoDXE2:
.1a8a	60		rts				rts
.1a8b					BresenhamE2GEDY:
.1a8b	18		clc				clc
.1a8c	ad f4 0b	lda $0bf4			lda 	gError
.1a8f	6d fa 0b	adc $0bfa			adc 	gdy
.1a92	8d f4 0b	sta $0bf4			sta 	gError
.1a95	ad f5 0b	lda $0bf5			lda 	gError+1
.1a98	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a9b	8d f5 0b	sta $0bf5			sta 	gError+1
.1a9e	ee ec 0b	inc $0bec			inc 	gX1
.1aa1	d0 03		bne $1aa6			bne 	_BE2Skip
.1aa3	ee ed 0b	inc $0bed			inc 	gX1+1
.1aa6					_BE2Skip:
.1aa6	20 ed 1c	jsr $1ced			jsr 	gdMvRight
.1aa9	60		rts				rts
.1aaa					BresenhamDXGEE2:
.1aaa	18		clc				clc
.1aab	ad f4 0b	lda $0bf4			lda 	gError
.1aae	6d f8 0b	adc $0bf8			adc 	gdx
.1ab1	8d f4 0b	sta $0bf4			sta 	gError
.1ab4	ad f5 0b	lda $0bf5			lda 	gError+1
.1ab7	6d f9 0b	adc $0bf9			adc 	gdx+1
.1aba	8d f5 0b	sta $0bf5			sta 	gError+1
.1abd	ad 09 0c	lda $0c09			lda 	gdySign
.1ac0	10 0c		bpl $1ace			bpl 	_BEDXInvertY
.1ac2	ee ee 0b	inc $0bee			inc 	gY1
.1ac5	d0 03		bne $1aca			bne 	_BEDXSkip
.1ac7	ee ef 0b	inc $0bef			inc 	gY1+1
.1aca					_BEDXSkip:
.1aca	20 28 1d	jsr $1d28			jsr 	gdMvDown
.1acd	60		rts				rts
.1ace					_BEDXInvertY:
.1ace	ad ee 0b	lda $0bee			lda 	gY1
.1ad1	d0 03		bne $1ad6			bne 	_BEDXSkip2
.1ad3	ce ef 0b	dec $0bef			dec 	gY1+1
.1ad6					_BEDXSkip2:
.1ad6	ce ee 0b	dec $0bee			dec 	gY1
.1ad9	20 03 1d	jsr $1d03			jsr 	gdMvUp
.1adc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1add					Command_Plot:
.1add	a9 e5		lda #$e5			lda 	#PlotHandler & $FF
.1adf	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ae1	20 e9 18	jsr $18e9			jsr 	GHandler
.1ae4	60		rts				rts
.1ae5					PlotHandler:
.1ae5	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ae7	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1aea	b0 03		bcs $1aef			bcs 	_PHExit 					; off screen, return with CS.
.1aec	20 8c 1d	jsr $1d8c			jsr 	gdPlotInk 					; pixel in Ink.
.1aef	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c0a					frameFlag:
>0c0a							.fill 	1
.1af0					Command_Rect:
.1af0	a9 04		lda #$04			lda 	#RectHandler & $FF
.1af2	a2 1b		ldx #$1b			ldx 	#RectHandler >> 8
.1af4	20 e9 18	jsr $18e9			jsr 	GHandler
.1af7	60		rts				rts
.1af8					Command_Frame:
.1af8	a9 00		lda #$00			lda 	#FrameHandler & $FF
.1afa	a2 1b		ldx #$1b			ldx 	#FrameHandler >> 8
.1afc	20 e9 18	jsr $18e9			jsr 	GHandler
.1aff	60		rts				rts
.1b00					FrameHandler:
.1b00	a9 01		lda #$01			lda 	#1
.1b02	d0 02		bne $1b06			bne 	RectHandler+2
.1b04					RectHandler:
.1b04	a9 00		lda #$00			lda 	#0
.1b06	8d 0a 0c	sta $0c0a			sta 	frameFlag
.1b09	20 ac 1c	jsr $1cac			jsr 	BoxSort 					; sort so topleft/bottom right
.1b0c	20 35 1b	jsr $1b35			jsr 	DrawBoxPart 				; solid first line
.1b0f					_FHLoop:
.1b0f	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1b11	a0 06		ldy #$06			ldy 	#gY2-gX1
.1b13	20 88 1c	jsr $1c88			jsr 	CompareCoords
.1b16	b0 19		bcs $1b31			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1b18	ad 0a 0c	lda $0c0a			lda 	frameFlag 					; identify solid or frame ?
.1b1b	f0 06		beq $1b23			beq 	_FHIsSolidRect
.1b1d	20 4e 1b	jsr $1b4e			jsr 	DrawBoxEnds
.1b20	4c 26 1b	jmp $1b26			jmp 	_FHNext
.1b23					_FHIsSolidRect:
.1b23	20 35 1b	jsr $1b35			jsr 	DrawBoxPart
.1b26					_FHNext:
.1b26	ee ee 0b	inc $0bee			inc 	gY1 						; bump Y1 and loop back.
.1b29	d0 e4		bne $1b0f			bne 	_FHLoop
.1b2b	ee ef 0b	inc $0bef			inc 	gY1+1
.1b2e	4c 0f 1b	jmp $1b0f			jmp 	_FHLoop
.1b31					_FHLastLine:
.1b31	20 35 1b	jsr $1b35			jsr 	DrawBoxPart 				; solid last line whatever
.1b34					_FHExit:
.1b34	60		rts				rts
.1b35					DrawBoxPart:
.1b35	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b37	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b3a	38		sec				sec 								; calculate line length => temp0
.1b3b	ad f0 0b	lda $0bf0			lda 	gX2
.1b3e	ed ec 0b	sbc $0bec			sbc 	gX1
.1b41	48		pha				pha
.1b42	ad f1 0b	lda $0bf1			lda 	gX2+1
.1b45	ed ed 0b	sbc $0bed			sbc 	gx1+1
.1b48	aa		tax				tax
.1b49	68		pla				pla 								; line length in XA.
.1b4a	20 66 1b	jsr $1b66			jsr 	DrawHorizontalLine
.1b4d	60		rts				rts
.1b4e					DrawBoxEnds:
.1b4e	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b50	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b53	20 8c 1d	jsr $1d8c			jsr 	gdPlotInk 					; LH end.
.1b56	ad f0 0b	lda $0bf0			lda 	gX2 						; set position to X2,Y1
.1b59	ae f1 0b	ldx $0bf1			ldx 	gX2+1
.1b5c	20 39 1e	jsr $1e39			jsr 	gdSetX
.1b5f	20 4a 1d	jsr $1d4a			jsr		gdSetDrawPosition 			; update position.
.1b62	20 8c 1d	jsr $1d8c			jsr 	gdPlotInk 					; RH end.
.1b65	60		rts				rts
.1b66					DrawHorizontalLine:
.1b66	86 32		stx $32				stx 	tempShort
.1b68	aa		tax				tax
.1b69	a4 32		ldy $32				ldy 	tempShort
.1b6b	ad fe 0b	lda $0bfe			lda 	gdInk
.1b6e	4c 47 1e	jmp $1e47			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c0b					RenderFunction:
>0c0b							.fill 	2
.0c0d					RenderWidth:
>0c0d							.fill 	1
.0c0e					RenderHeight:
>0c0e							.fill 	1
.0c0f					RenderType:
>0c0f							.fill 	1
.0c10					RenderCache:
>0c10							.fill 	64
.1b71					ImageRenderer:
.1b71	8e 0c 0c	stx $0c0c			stx 	RenderFunction+1
.1b74	8d 0b 0c	sta $0c0b			sta 	RenderFunction
.1b77	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b79	20 5a 1c	jsr $1c5a			jsr 	CallRenderFunction
.1b7c	8d 0f 0c	sta $0c0f			sta 	RenderType 					; and save it.
.1b7f	8e 0d 0c	stx $0c0d			stx 	RenderWidth
.1b82	8c 0e 0c	sty $0c0e			sty 	RenderHeight
.1b85	8a		txa				txa 								; check X coordinate
.1b86	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b88	20 21 1c	jsr $1c21			jsr 	RenderCheckRange
.1b8b	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; check Y coordinate
.1b8e	a2 02		ldx #$02			ldx 	#2
.1b90	20 21 1c	jsr $1c21			jsr 	RenderCheckRange
.1b93	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b95					_IRLoop1:
.1b95	5a		phy				phy
.1b96	20 fd 1b	jsr $1bfd			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1b99	20 5a 1c	jsr $1c5a			jsr 	CallRenderFunction 			; fill the rendering cache.
.1b9c	7a		ply				ply
.1b9d	ae 00 0c	ldx $0c00			ldx 	gdSize 						; number of times to do the row.
.1ba0					_IRLoop2:
.1ba0	20 ad 1b	jsr $1bad			jsr 	RenderDrawRow 				; draw one row.
.1ba3	ca		dex				dex 								; scale # times.
.1ba4	d0 fa		bne $1ba0			bne 	_IRLoop2
.1ba6	c8		iny				iny 								; next vertical row
.1ba7	cc 0e 0c	cpy $0c0e			cpy 	RenderHeight 				; done the lot ?
.1baa	d0 e9		bne $1b95			bne 	_IRLoop1
.1bac	60		rts				rts
.1bad					RenderDrawRow:
.1bad	da		phx				phx
.1bae	5a		phy				phy
.1baf	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1bb1	20 72 1c	jsr $1c72			jsr 	SetupXY
.1bb4	7a		ply				ply
.1bb5	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1bb7					_RDRLoop1:
.1bb7	20 ca 1b	jsr $1bca			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1bba	e8		inx				inx
.1bbb	ec 0d 0c	cpx $0c0d			cpx 	RenderWidth 				; until done the whole lot.
.1bbe	d0 f7		bne $1bb7			bne 	_RDRLoop1
.1bc0	ee f2 0b	inc $0bf2			inc 	gY2 						; next line down
.1bc3	d0 03		bne $1bc8			bne 	_RDRNoCarry
.1bc5	ee f3 0b	inc $0bf3			inc 	gY2+1
.1bc8					_RDRNoCarry:
.1bc8	fa		plx				plx
.1bc9	60		rts				rts
.1bca					RenderDrawPixelSet:
.1bca	da		phx				phx
.1bcb	5a		phy				phy
.1bcc	20 fd 1b	jsr $1bfd			jsr 	RenderFlipXY 				; flip positions as required.
.1bcf	20 e7 1b	jsr $1be7			jsr 	RenderGetInk				; get colour to draw with.
.1bd2	ae 00 0c	ldx $0c00			ldx 	gdSize 						; X counts the size.
.1bd5					_RDPSLoop:
.1bd5	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bd7	f0 03		beq $1bdc			beq 	_RDPSNoDraw
.1bd9	20 8f 1d	jsr $1d8f			jsr 	gdPlotA 					; draw A otherwise
.1bdc					_RDPSNoDraw:
.1bdc	48		pha				pha 								; move right
.1bdd	20 ed 1c	jsr $1ced			jsr 	gdMvRight
.1be0	68		pla				pla
.1be1	ca		dex				dex
.1be2	d0 f1		bne $1bd5			bne 	_RDPSLoop 					; do it size times.
.1be4	7a		ply				ply
.1be5	fa		plx				plx
.1be6	60		rts				rts
.1be7					RenderGetInk:
.1be7	ad 0f 0c	lda $0c0f			lda 	RenderType 					; type, if 0 it's a bitmap
.1bea	f0 04		beq $1bf0			beq 	_RGIBitmap
.1bec	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bef	60		rts				rts
.1bf0					_RGIBitmap:
.1bf0	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bf3	f0 04		beq $1bf9			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bf5	ad fe 0b	lda $0bfe			lda 	gdInk
.1bf8	60		rts				rts
.1bf9					_RGIBPaper:
.1bf9	ad ff 0b	lda $0bff			lda 	gdPaper
.1bfc	60		rts				rts
.1bfd					RenderFlipXY:
.1bfd	ad 02 0c	lda $0c02			lda 	gdFlip 						; check any flip at all
.1c00	29 03		and #$03			and 	#3
.1c02	f0 1c		beq $1c20			beq 	_RFExit
.1c04	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1c05	90 09		bcc $1c10			bcc 	_RFNoHFlip
.1c07	ad 0d 0c	lda $0c0d			lda 	RenderWidth 				; X Flip
.1c0a	86 32		stx $32				stx 	tempShort
.1c0c	18		clc				clc
.1c0d	e5 32		sbc $32				sbc 	tempShort
.1c0f	aa		tax				tax
.1c10					_RFNoHFlip:
.1c10	ad 02 0c	lda $0c02			lda 	gdFlip
.1c13	29 02		and #$02			and 	#2 							; bit 1 check
.1c15	f0 09		beq $1c20			beq 	_RFExit
.1c17	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; Y Flip
.1c1a	84 32		sty $32				sty 	tempShort
.1c1c	18		clc				clc
.1c1d	e5 32		sbc $32				sbc 	tempShort
.1c1f	a8		tay				tay
.1c20					_RFExit:
.1c20	60		rts				rts
.1c21					RenderCheckRange:
.1c21	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1c23	ac 00 0c	ldy $0c00			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1c26	84 2a		sty $2a				sty 	temp0
.1c28	f0 2b		beq $1c55			beq 	_RCRValue
.1c2a	a9 00		lda #$00			lda 	#0 							; total
.1c2c					_RCRMultiply:
.1c2c	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c2e	90 05		bcc $1c35			bcc 	_RCRNoAdd 					; not adding this time.
.1c30	18		clc				clc
.1c31	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c33	b0 20		bcs $1c55			bcs 	_RCRValue 					; overflow
.1c35					_RCRNoAdd:
.1c35	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c37	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c39	d0 f1		bne $1c2c			bne 	_RCRMultiply
.1c3b	18		clc				clc 								; add to x2 or y2, store in temp0
.1c3c	7d f0 0b	adc $0bf0,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c3f	85 2a		sta $2a				sta 	temp0
.1c41	bd f1 0b	lda $0bf1,x			lda 	gX2+1,x
.1c44	69 00		adc #$00			adc 	#0
.1c46	85 2b		sta $2b				sta 	temp0+1
.1c48	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c4a	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1c4d	a5 2b		lda $2b				lda 	temp0+1
.1c4f	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1c52	b0 01		bcs $1c55			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c54	60		rts				rts
.1c55					_RCRValue:
.1c55	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c57	20 27 15	jsr $1527		jsr	errorHandler
.1c5a					CallRenderFunction:
.1c5a	6c 0b 0c	jmp ($0c0b)			jmp 	(RenderFunction)
.1c5d					TestImageAccess:
.1c5d	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c5f	f0 0a		beq $1c6b			beq 	_TIAGetInfo
.1c61	a0 3f		ldy #$3f			ldy 	#63
.1c63					_TIACreate:
.1c63	98		tya				tya
.1c64	99 10 0c	sta $0c10,y			sta 	RenderCache,y
.1c67	88		dey				dey
.1c68	10 f9		bpl $1c63			bpl 	_TIACreate
.1c6a	60		rts				rts
.1c6b					_TIAGetInfo:
.1c6b	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c6d	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c6f	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c71	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c72					SetupXY:
.1c72	b9 ec 0b	lda $0bec,y			lda 	gX1,y
.1c75	be ed 0b	ldx $0bed,y			ldx 	gX1+1,y
.1c78	20 39 1e	jsr $1e39			jsr 	gdSetX
.1c7b	b9 ee 0b	lda $0bee,y			lda 	gY1,y
.1c7e	be ef 0b	ldx $0bef,y			ldx 	gY1+1,y
.1c81	20 40 1e	jsr $1e40			jsr 	gdSetY
.1c84	20 4a 1d	jsr $1d4a			jsr 	gdSetDrawPosition
.1c87	60		rts				rts
.1c88					CompareCoords:
.1c88	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c8b	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c8e	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1c91	f9 ed 0b	sbc $0bed,y			sbc 	gX1+1,y
.1c94	60		rts				rts
.1c95					CompareCoordsSigned:
.1c95	20 88 1c	jsr $1c88			jsr 	CompareCoords
.1c98	50 02		bvc $1c9c			bvc 	_CCSExit
.1c9a	49 80		eor #$80			eor 	#$80
.1c9c					_CCSExit:
.1c9c	60		rts				rts
.1c9d					CompareCoordsEq:
.1c9d	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1ca0	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1ca3	d0 06		bne $1cab			bne 	_CCEExit
.1ca5	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1ca8	d9 ed 0b	cmp $0bed,y			cmp 	gX1+1,y
.1cab					_CCEExit:
.1cab	60		rts				rts
.1cac					BoxSort:
.1cac	a2 00		ldx #$00			ldx 	#gx1-gx1
.1cae	a0 04		ldy #$04			ldy 	#gx2-gx1
.1cb0	20 c1 1c	jsr $1cc1			jsr 	GCompareCoords
.1cb3	20 ce 1c	jsr $1cce			jsr 	GSortMinMaxCoords
.1cb6	a2 02		ldx #$02			ldx 	#gy1-gx1
.1cb8	a0 06		ldy #$06			ldy 	#gy2-gx1
.1cba	20 c1 1c	jsr $1cc1			jsr 	GCompareCoords
.1cbd	20 ce 1c	jsr $1cce			jsr 	GSortMinMaxCoords
.1cc0	60		rts				rts
.1cc1					GCompareCoords:
.1cc1	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1cc4	d9 ec 0b	cmp $0bec,y			cmp 	gx1,y
.1cc7	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1cca	f9 ed 0b	sbc $0bed,y			sbc 	gx1+1,y
.1ccd	60		rts				rts
.1cce					GSortMinMaxCoords:
.1cce	90 1c		bcc $1cec			bcc 	GSMMCExit
.1cd0					GSwapCoords:
.1cd0	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1cd3	48		pha				pha
.1cd4	b9 ec 0b	lda $0bec,y			lda 	gx1,y
.1cd7	9d ec 0b	sta $0bec,x			sta 	gx1,x
.1cda	68		pla				pla
.1cdb	99 ec 0b	sta $0bec,y			sta 	gx1,y
.1cde	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1ce1	48		pha				pha
.1ce2	b9 ed 0b	lda $0bed,y			lda 	gx1+1,y
.1ce5	9d ed 0b	sta $0bed,x			sta 	gx1+1,x
.1ce8	68		pla				pla
.1ce9	99 ed 0b	sta $0bed,y			sta 	gx1+1,y
.1cec					GSMMCExit:
.1cec	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1ced					gdMvRight:
.1ced	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; bump X16VeraAddLow
.1cf0	d0 08		bne $1cfa			bne 	_gdMR0
.1cf2	ee 21 9f	inc $9f21			inc 	X16VeraAddMed
.1cf5	d0 03		bne $1cfa			bne 	_gdMR0
.1cf7	ee 22 9f	inc $9f22			inc 	X16VeraAddHigh
.1cfa					_gdMR0:
.1cfa	ee 54 0c	inc $0c54			inc 	gdXPos
.1cfd	d0 03		bne $1d02			bne 	_gdMR1
.1cff	ee 55 0c	inc $0c55			inc 	gdXPos+1
.1d02					_gdMR1:
.1d02	60		rts				rts
.1d03					gdMvUp:
.1d03	ad 56 0c	lda $0c56			lda 	gdYPos 						; decrement Y Pos
.1d06	d0 03		bne $1d0b			bne 	_gdMU1
.1d08	ce 57 0c	dec $0c57			dec 	gdYPos+1
.1d0b	ce 56 0c	dec $0c56	_gdMU1:	dec 	gdYPos
.1d0e	38		sec				sec 								; adjust position by -320
.1d0f	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.1d12	e9 40		sbc #$40			sbc 	#GrWidth & $FF
.1d14	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d17	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.1d1a	e9 01		sbc #$01			sbc 	#GrWidth >> 8
.1d1c	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d1f	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh
.1d22	e9 00		sbc #$00			sbc 	#0
.1d24	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d27	60		rts				rts
.1d28					gdMvDown:
.1d28	ee 56 0c	inc $0c56			inc 	gdYPos 						; decrement Y Pos
.1d2b	d0 03		bne $1d30			bne 	_gdMU1
.1d2d	ee 57 0c	inc $0c57			inc 	gdYPos+1
.1d30					_gdMU1:
.1d30	18		clc				clc 								; adjust position by -320
.1d31	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.1d34	69 40		adc #$40			adc 	#GrWidth & $FF
.1d36	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d39	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.1d3c	69 01		adc #$01			adc 	#GrWidth >> 8
.1d3e	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d41	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh
.1d44	69 00		adc #$00			adc 	#0
.1d46	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d49	60		rts				rts
.1d4a					gdSetDrawPosition:
.1d4a	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d4c	85 2a		sta $2a				sta 	temp0
.1d4e	ad 56 0c	lda $0c56			lda 	gdYPos
.1d51	85 2b		sta $2b				sta 	temp0+1
.1d53	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d55	66 2a		ror $2a				ror 	temp0
.1d57	46 2b		lsr $2b				lsr 	temp0+1
.1d59	66 2a		ror $2a				ror 	temp0
.1d5b	ad 56 0c	lda $0c56			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d5e	18		clc				clc
.1d5f	65 2b		adc $2b				adc 	temp0+1
.1d61	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d63	18		clc				clc
.1d64	a5 2a		lda $2a				lda 	temp0
.1d66	6d 54 0c	adc $0c54			adc 	gdXPos
.1d69	85 2a		sta $2a				sta 	temp0
.1d6b	a5 2b		lda $2b				lda 	temp0+1
.1d6d	6d 55 0c	adc $0c55			adc 	gdXPos+1
.1d70	85 2b		sta $2b				sta 	temp0+1
.1d72	18		clc				clc
.1d73	ad 51 0c	lda $0c51			lda 	gdBitmapAddress
.1d76	65 2a		adc $2a				adc 	temp0
.1d78	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d7b	ad 52 0c	lda $0c52			lda 	gdBitmapAddress+1
.1d7e	65 2b		adc $2b				adc 	temp0+1
.1d80	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d83	ad 53 0c	lda $0c53			lda 	gdBitmapAddress+2
.1d86	69 00		adc #$00			adc 	#0
.1d88	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d8b	60		rts				rts
.1d8c					gdPlotInk:
.1d8c	ad fe 0b	lda $0bfe			lda 	gdInk
.1d8f					gdPlotA:
.1d8f	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1d92	60		rts				rts
.1d93					gdPlotPaper:
.1d93	ad ff 0b	lda $0bff			lda 	gdPaper
.1d96	c9 ff		cmp #$ff			cmp 	#$FF
.1d98	f0 03		beq $1d9d			beq 	_gdPPSkip
.1d9a	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1d9d					_gdPPSkip:
.1d9d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c50					gdEnabled:
>0c50							.fill 	1
.0c51					gdBitmapAddress:
>0c51							.fill 	3
.0c54					gdXPos:
>0c54							.fill 	2
.0c56					gdYPos:
>0c56							.fill 	2
.1d9e					gdModeChanged:
.1d9e	da		phx				phx
.1d9f	5a		phy				phy
.1da0	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1da2	8d 50 0c	sta $0c50			sta 	gdEnabled
.1da5	ad 2a 9f	lda $9f2a			lda 	X16VeraHScale 				; requires $40 for H/V Scale
.1da8	c9 40		cmp #$40			cmp 	#$40
.1daa	d0 1f		bne $1dcb			bne 	_gdExit
.1dac	ad 2b 9f	lda $9f2b			lda 	X16VeraVScale
.1daf	c9 40		cmp #$40			cmp 	#$40
.1db1	d0 18		bne $1dcb			bne 	_gdExit
.1db3	ad 29 9f	lda $9f29			lda 	X16VeraDCVideo 				; read DC_Video, see which layers are enabled.
.1db6	0a		asl a				asl 	a 							;
.1db7	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1db8	10 09		bpl $1dc3			bpl 	_gdNotLayer1
.1dba	48		pha				pha 								; save A
.1dbb	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1dbd	20 d1 1d	jsr $1dd1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dc0	68		pla				pla 								; restore A
.1dc1	b0 08		bcs $1dcb			bcs 	_gdExit 					; if successful then exit
.1dc3					_gdNotLayer1:
.1dc3	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1dc4	10 05		bpl $1dcb			bpl 	_gdExit 					; if not enabled, exit
.1dc6	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at X16VeraLayerConfig)
.1dc8	20 d1 1d	jsr $1dd1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dcb					_gdExit:
.1dcb	20 05 1e	jsr $1e05			jsr 	gdClearGraphics 			; clear graphics display.
.1dce	7a		ply				ply
.1dcf	fa		plx				plx
.1dd0	60		rts				rts
.1dd1					gdCheckBitmap:
.1dd1	bd 2d 9f	lda $9f2d,x			lda 	X16VeraLayerConfig,x 					; look at bitmap bit.
.1dd4	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1dd6	d0 14		bne $1dec			bne 	_gdCBFail
.1dd8	ee 50 0c	inc $0c50			inc 	gdEnabled 					; set the enabled flag to non zero.
.1ddb	bd 2f 9f	lda $9f2f,x			lda 	X16VeraLayerTileBase,x 					; this is the bitmap address / 2
.1dde	0a		asl a				asl 	a
.1ddf	8d 52 0c	sta $0c52			sta 	gdBitmapAddress+1
.1de2	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1de4	8d 53 0c	sta $0c53			sta 	gdBitmapAddress+2
.1de7	a9 00		lda #$00			lda 	#$00
.1de9	8d 51 0c	sta $0c51			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dec					_gdCBFail:
.1dec	18		clc				clc
.1ded	60		rts				rts
.1dee					CommandClg:
.1dee	b1 28		lda ($28),y			lda 	(codePtr),y
.1df0	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1df2	d0 0d		bne $1e01			bne 	_CCLClear
.1df4	c8		iny				iny
.1df5	a9 00		lda #$00			lda 	#0
.1df7	a2 0c		ldx #$0c		ldx	#12
.1df9	20 24 40	jsr $4024		jsr	mainHandler
.1dfc	a5 98		lda $98				lda 	esInt0
.1dfe	8d ff 0b	sta $0bff			sta 	gdPaper
.1e01					_CCLClear:
.1e01	20 05 1e	jsr $1e05			jsr 	gdClearGraphics
.1e04	60		rts				rts
.1e05					gdClearGraphics:
.1e05	da		phx				phx
.1e06	5a		phy				phy
.1e07	ad 50 0c	lda $0c50			lda 	gdEnabled 					; screen enabled
.1e0a	f0 2a		beq $1e36			beq 	_gdCGExit
.1e0c	a9 40		lda #$40			lda 	#(GrWidth) & $FF
.1e0e	8d 03 0c	sta $0c03			sta 	gdXLimit
.1e11	a9 01		lda #$01			lda 	#(GrWidth) >> 8
.1e13	8d 04 0c	sta $0c04			sta 	1+(gdXLimit)
.1e16	a9 c8		lda #$c8			lda 	#(GrHeight) & $FF
.1e18	8d 05 0c	sta $0c05			sta 	gdYLimit
.1e1b	a9 00		lda #$00			lda 	#(GrHeight) >> 8
.1e1d	8d 06 0c	sta $0c06			sta 	1+(gdYLimit)
.1e20	a9 00		lda #$00			lda 	#0 							; home cursor
.1e22	aa		tax				tax
.1e23	20 39 1e	jsr $1e39			jsr 	gdSetX
.1e26	20 40 1e	jsr $1e40			jsr 	gdSetY
.1e29	20 4a 1d	jsr $1d4a			jsr 	gdSetDrawPosition 			; set the draw position.
.1e2c	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e2e	a2 00		ldx #$00			ldx 	#0
.1e30	ad ff 0b	lda $0bff			lda 	gdPaper
.1e33	20 47 1e	jsr $1e47			jsr 	gdOptHorizontalWriter
.1e36					_gdCGExit:
.1e36	7a		ply				ply
.1e37	fa		plx				plx
.1e38	60		rts				rts
.1e39					gdSetX:
.1e39	8d 54 0c	sta $0c54			sta 	gdXPos
.1e3c	8e 55 0c	stx $0c55			stx 	gdXPos+1
.1e3f	60		rts				rts
.1e40					gdSetY:
.1e40	8d 56 0c	sta $0c56			sta 	gdYPos
.1e43	8e 57 0c	stx $0c57			stx 	gdYPos+1
.1e46	60		rts				rts
.1e47					gdOptHorizontalWriter:
.1e47	48		pha				pha
.1e48	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh 						; make it autoincrement.
.1e4b	09 10		ora #$10			ora 	#$10
.1e4d	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1e50	68		pla				pla
.1e51					_gdOLoop:
.1e51	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1e54	e0 00		cpx #$00			cpx 	#0
.1e56	d0 05		bne $1e5d			bne 	_gdNoBorrow
.1e58	c0 00		cpy #$00			cpy 	#0
.1e5a	f0 05		beq $1e61			beq 	_gdExit
.1e5c	88		dey				dey
.1e5d					_gdNoBorrow:
.1e5d	ca		dex				dex
.1e5e	4c 51 1e	jmp $1e51			jmp 	_gdOLoop
.1e61					_gdExit:
.1e61	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e62					Unary_Clock:
.1e62	a2 0c		ldx #$0c		ldx	#12
.1e64	20 24 40	jsr $4024		jsr	mainHandler
.1e67	48		pha				pha 								; save stack pos
.1e68	a2 04		ldx #$04		ldx	#4
.1e6a	20 24 40	jsr $4024		jsr	mainHandler
.1e6d	5a		phy				phy
.1e6e	20 50 ff	jsr $ff50			jsr 	X16KReadRTC
.1e71	7a		ply				ply
.1e72	68		pla				pla 								; restore, repush, put into X to read offset
.1e73	48		pha				pha
.1e74	aa		tax				tax
.1e75	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e77	c9 06		cmp #$06			cmp 	#6
.1e79	b0 0d		bcs $1e88			bcs 	_UCValue
.1e7b	aa		tax				tax 								; index in X and read RTC.
.1e7c	b5 02		lda $02,x			lda 	2,x
.1e7e	85 32		sta $32				sta 	tempshort
.1e80	68		pla				pla 								; restore number stack index.
.1e81	aa		tax				tax
.1e82	a5 32		lda $32				lda 	tempShort
.1e84	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e86	8a		txa				txa
.1e87	60		rts				rts
.1e88					_UCValue:
.1e88	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e8a	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e8d					Unary_JoyX:
.1e8d	38		sec				sec
.1e8e	b0 01		bcs $1e91			bcs 	JoystickRead
.1e90					Unary_JoyY:
.1e90	18		clc				clc
.1e91					JoystickRead:
.1e91	48		pha				pha 								; save stack position
.1e92	08		php				php 								; save test flag.
.1e93	a2 04		ldx #$04		ldx	#4
.1e95	20 24 40	jsr $4024		jsr	mainHandler
.1e98	20 ef 1e	jsr $1eef			jsr 	ReadJoystick 				; read it.
.1e9b	28		plp				plp
.1e9c	b0 02		bcs $1ea0			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e9e	4a		lsr a				lsr 	a
.1e9f	4a		lsr a				lsr 	a
.1ea0					_JRNoShift:
.1ea0	29 03		and #$03			and 	#3 							; isolate the test bits.
.1ea2	f0 0d		beq $1eb1			beq 	JoyReturnA 					; if nothing pressed, return A.
.1ea4	c9 03		cmp #$03			cmp 	#3
.1ea6	f0 07		beq $1eaf			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1ea8	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1ea9	b0 15		bcs $1ec0			bcs 	JoyReturn1
.1eab					JoyReturnTrue:
.1eab	a9 ff		lda #$ff			lda 	#$FF
.1ead	d0 02		bne $1eb1			bne 	JoyReturnA
.1eaf					JoyReturnFalse:
.1eaf	a9 00		lda #$00			lda 	#0
.1eb1					JoyReturnA:
.1eb1	85 32		sta $32				sta 	tempShort 					; return A
.1eb3	fa		plx				plx
.1eb4	a5 32		lda $32				lda 	tempShort
.1eb6	95 98		sta $98,x			sta 	esInt0,x
.1eb8					JoyReturn13:
.1eb8	95 a0		sta $a0,x			sta 	esInt1,x
.1eba	95 a8		sta $a8,x			sta 	esInt2,x
.1ebc	95 b0		sta $b0,x			sta 	esInt3,x
.1ebe	8a		txa				txa 								; return NSP in A
.1ebf	60		rts				rts
.1ec0					JoyReturn1:
.1ec0	fa		plx				plx
.1ec1	a9 01		lda #$01			lda 	#1
.1ec3	95 98		sta $98,x			sta 	esInt0,x
.1ec5	a9 00		lda #$00			lda 	#0
.1ec7	f0 ef		beq $1eb8			beq 	JoyReturn13
.1ec9					Unary_JButton:
.1ec9	48		pha				pha 								; save X on stack, put in X
.1eca	a2 0c		ldx #$0c		ldx	#12
.1ecc	20 24 40	jsr $4024		jsr	mainHandler
.1ecf	aa		tax				tax 								; get value to check, push on stack.
.1ed0	b5 98		lda $98,x			lda 	esInt0,x
.1ed2	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1ed4	b0 14		bcs $1eea			bcs 	_UJBadValue
.1ed6	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ed8	48		pha				pha 								; save that shift count on the stack.
.1ed9	a2 04		ldx #$04		ldx	#4
.1edb	20 24 40	jsr $4024		jsr	mainHandler
.1ede	fa		plx				plx
.1edf	20 ef 1e	jsr $1eef			jsr 	ReadJoystick 				; joystick read
.1ee2					_UJShift:
.1ee2	4a		lsr a				lsr 	a
.1ee3	ca		dex				dex
.1ee4	d0 fc		bne $1ee2			bne 	_UJShift
.1ee6	b0 c3		bcs $1eab			bcs 	JoyReturnTrue
.1ee8	90 c5		bcc $1eaf			bcc 	JoyReturnFalse
.1eea					_UJBadValue:
.1eea	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1eec	20 27 15	jsr $1527		jsr	errorHandler
.1eef					ReadJoystick:
.1eef	da		phx				phx
.1ef0	5a		phy				phy
.1ef1	a9 00		lda #$00			lda 	#0
.1ef3	20 56 ff	jsr $ff56			jsr 	X16KReadJoystick
.1ef6	c0 00		cpy #$00			cpy 	#0
.1ef8	d0 0f		bne $1f09			bne 	_RJError
.1efa	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1efc	d0 02		bne $1f00			bne 	_RJNoBug
.1efe	a9 ff		lda #$ff			lda 	#$FF
.1f00					_RJNoBug:
.1f00	85 32		sta $32				sta 	tempShort
.1f02	7a		ply				ply
.1f03	fa		plx				plx
.1f04	a5 32		lda $32				lda 	tempShort
.1f06	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1f08	60		rts				rts
.1f09					_RJError:
.1f09	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f0b	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndqueue.asm

.1f0e					SoundAddQueue:
.1f0e	86 2a		stx $2a				stx 	temp0 						; save XY in temp0
.1f10	84 2b		sty $2b				sty 	temp0+1
.1f12	a2 00		ldx #$00			ldx 	#0 							; look for empty spot.
.1f14					_SAQFind:
.1f14	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; check if first byte (time) zero means clear.
.1f17	f0 0e		beq $1f27			beq 	_SAQFound
.1f19	8a		txa				txa 								; forward 6
.1f1a	18		clc				clc
.1f1b	69 06		adc #$06			adc 	#6
.1f1d	aa		tax				tax
.1f1e	e0 60		cpx #$60			cpx 	#sndQueueSize*6 			; queue is full ?
.1f20	90 f2		bcc $1f14			bcc 	_SAQFind
.1f22	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f24	20 27 15	jsr $1527		jsr	errorHandler
.1f27					_SAQFound:
.1f27	a0 05		ldy #$05			ldy 	#5 							; get and save time
.1f29	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f2b	9d 71 0c	sta $0c71,x			sta 	sndQueue+0,x
.1f2e	88		dey				dey 								; get and save the channel.
.1f2f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f31	9d 72 0c	sta $0c72,x			sta 	sndQueue+1,x
.1f34	a0 00		ldy #$00			ldy 	#0
.1f36					_SAQCopy1:
.1f36	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy 4 bytes of PSG data in.
.1f38	9d 73 0c	sta $0c73,x			sta 	sndQueue+2,x
.1f3b	c8		iny				iny
.1f3c	e8		inx				inx
.1f3d	c0 04		cpy #$04			cpy 	#4
.1f3f	d0 f5		bne $1f36			bne		 _SAQCopy1
.1f41	60		rts				rts
.1f42					SoundCheckQueue:
.1f42	85 2a		sta $2a				sta 	temp0 						; save channel #
.1f44	da		phx				phx
.1f45	5a		phy				phy
.1f46	a6 2a		ldx $2a				ldx 	temp0 						; is the channel in use, if so we cannot play.
.1f48	bd 59 0c	lda $0c59,x			lda 	channelTime,x
.1f4b	d0 3f		bne $1f8c			bne 	_SCQExit
.1f4d	a2 00		ldx #$00			ldx 	#0 							; work through queue.
.1f4f					_SCQSearch:
.1f4f	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; reached the end, e.g. time = 0
.1f52	f0 38		beq $1f8c			beq 	_SCQExit
.1f54	bd 72 0c	lda $0c72,x			lda 	sndQueue+1,x 				; compare channel #
.1f57	c5 2a		cmp $2a				cmp 	temp0
.1f59	f0 08		beq $1f63			beq 	_SCQFound
.1f5b	8a		txa				txa
.1f5c	18		clc				clc
.1f5d	69 06		adc #$06			adc 	#6
.1f5f	8a		txa				txa
.1f60	4c 4f 1f	jmp $1f4f			jmp 	_SCQSearch
.1f63					_SCQFound:
.1f63	a4 2a		ldy $2a				ldy 	temp0 						; Y = channel #
.1f65	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; get time
.1f68	99 59 0c	sta $0c59,y			sta 	channelTime,y 				; write that in the time channel slot
.1f6b	ee 58 0c	inc $0c58			inc 	LiveChannels 				; one more playing.
.1f6e	da		phx				phx
.1f6f	a5 2a		lda $2a				lda 	temp0 						; get channel #
.1f71	20 ce 1f	jsr $1fce			jsr 	CSPointChannel  			; point VRAM pointer to it.
.1f74	a0 04		ldy #$04			ldy 	#4 							; counter
.1f76					_SCQCopy:
.1f76	bd 73 0c	lda $0c73,x			lda 	sndQueue+2,x 				; copy the sound production data to the PSG
.1f79	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1f7c	e8		inx				inx
.1f7d	88		dey				dey
.1f7e	d0 f6		bne $1f76			bne 	_SCQCopy
.1f80	fa		plx				plx
.1f81					_SCQDelete:
.1f81	bd 77 0c	lda $0c77,x			lda 	sndQueue+6,x 				; delete the queue entry
.1f84	9d 71 0c	sta $0c71,x			sta 	sndQueue,x
.1f87	e8		inx				inx
.1f88	e0 61		cpx #$61			cpx 	#sndQueueSize*6+1
.1f8a	d0 f5		bne $1f81			bne 	_SCQDelete
.1f8c					_SCQExit:
.1f8c	7a		ply				ply
.1f8d	fa		plx				plx
.1f8e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndunary.asm

.1f8f					Unary_Playing:
.1f8f	48		pha				pha 						; save stack position
.1f90	b1 28		lda ($28),y			lda 	(codePtr),y 		; check for playing()
.1f92	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f94	f0 2d		beq $1fc3			beq 	_UPCount
.1f96	68		pla				pla 						; get SP back.
.1f97	48		pha				pha
.1f98	a2 0c		ldx #$0c		ldx	#12
.1f9a	20 24 40	jsr $4024		jsr	mainHandler
.1f9d	a2 04		ldx #$04		ldx	#4
.1f9f	20 24 40	jsr $4024		jsr	mainHandler
.1fa2	fa		plx				plx
.1fa3	86 32		stx $32				stx 	tempShort 			; save X
.1fa5	b5 98		lda $98,x			lda 	esInt0,x 			; check level, must be < 16
.1fa7	c9 10		cmp #$10			cmp 	#16
.1fa9	b0 13		bcs $1fbe			bcs 	_UPValue
.1fab	aa		tax				tax 						; get the time
.1fac	bd 59 0c	lda $0c59,x			lda 	ChannelTime,x 		; 0 if zero, 255 if non-zero.
.1faf	f0 02		beq $1fb3			beq 	_UPZero
.1fb1	a9 ff		lda #$ff			lda 	#255
.1fb3					_UPZero:
.1fb3	a6 32		ldx $32				ldx 	tempShort 			; stack pointer back
.1fb5	95 98		sta $98,x			sta 	esInt0,x 			; return value
.1fb7					_UPSet13:
.1fb7	95 a0		sta $a0,x			sta 	esInt1,x
.1fb9	95 a8		sta $a8,x			sta 	esInt2,x
.1fbb	95 b0		sta $b0,x			sta 	esInt3,x
.1fbd	60		rts				rts
.1fbe					_UPValue:
.1fbe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fc0	20 27 15	jsr $1527		jsr	errorHandler
.1fc3					_UPCount:
.1fc3	c8		iny				iny 						; skip )
.1fc4	fa		plx				plx
.1fc5	ad 58 0c	lda $0c58			lda 	LiveChannels
.1fc8	95 98		sta $98,x			sta 	esInt0,x
.1fca	a9 00		lda #$00			lda 	#0
.1fcc	f0 e9		beq $1fb7			beq 	_UPSet13

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndutils.asm

.1fce					CSPointChannel:
.1fce	0a		asl a				asl 	a 							; 4 bytes / channel
.1fcf	0a		asl a				asl 	a
.1fd0	09 c0		ora #$c0			ora 	#X16VeraSound & $FF			; at $1F9C0
.1fd2	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1fd5	a9 f9		lda #$f9			lda 	#(X16VeraSound >> 8) & $FF
.1fd7	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1fda	a9 11		lda #$11			lda 	#(X16VeraSound >> 16) | $10
.1fdc	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1fdf	60		rts				rts
.1fe0					SoundReset:
.1fe0	a9 00		lda #$00			lda 	#0							; no channels playing
.1fe2	8d 58 0c	sta $0c58			sta 	LiveChannels
.1fe5	a2 0f		ldx #$0f			ldx 	#Channels-1
.1fe7					_SCClear:
.1fe7	9d 59 0c	sta $0c59,x			sta 	ChannelTime,x
.1fea	ca		dex				dex
.1feb	10 fa		bpl $1fe7			bpl 	_SCClear
.1fed	a2 61		ldx #$61			ldx 	#sndQueueSize*6+1 			; zero the sound queue.
.1fef					_SCClear2:
.1fef	9d 70 0c	sta $0c70,x			sta 	sndQueue-1,x
.1ff2	ca		dex				dex
.1ff3	d0 fa		bne $1fef			bne 	_SCClear2
.1ff5	a9 c0		lda #$c0			lda 	#X16VeraSound & $FF			; point VRAM data pointer to $1F9C0 increment
.1ff7	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1ffa	a9 f9		lda #$f9			lda 	#(X16VeraSound >> 8) & $FF
.1ffc	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1fff	a9 11		lda #$11			lda 	#(X16VeraSound >> 16) | $10
.2001	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2004					_SCClear3:
.2004	a9 00		lda #$00			lda 	#0
.2006	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2009	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.200c	d0 f6		bne $2004			bne 	_SCClear3
.200e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sound.asm

=16					Channels = 16 								; # of sound channels.
.0c58					LiveChannels:
>0c58							.fill 	1
.0c59					ChannelTime:
>0c59							.fill 	Channels 					; # of ticks until channels goes silent if non-zero
.0c69					sndPitch:
>0c69							.fill 	2
.0c6b					sndExtra:
>0c6b							.fill 	2
.0c6d					sndChannel:
>0c6d							.fill 	1
.0c6e					sndTime:
>0c6e							.fill 	1
.0c6f					sndType:
>0c6f							.fill 	1
.0c70					sndVolume:
>0c70							.fill 	1
=16					sndQueueSize = 16
.0c71					sndQueue:
>0c71							.fill	6*sndQueueSize+1 			; extra byte is so copy zero when deleting last element.
.200f					CommandSound:
.200f	a9 00		lda #$00			lda 	#0 							; clear the default sound options
.2011	8d 69 0c	sta $0c69			sta 	sndPitch
.2014	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.2017	8d 6f 0c	sta $0c6f			sta 	sndType
.201a	a9 ff		lda #$ff			lda 	#$FF 						; values are 255,63 are masked.
.201c	8d 6d 0c	sta $0c6d			sta 	sndChannel
.201f	8d 70 0c	sta $0c70			sta 	sndVolume
.2022	a9 05		lda #$05			lda 	#5 							; default time is 0.5s
.2024	8d 6e 0c	sta $0c6e			sta 	sndTime
.2027					_ComSoundLoop:
.2027	b1 28		lda ($28),y			lda 	(codePtr),y 				; next token
.2029	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line/colon do the sound
.202b	f0 55		beq $2082			beq 	_CSDoSound
.202d	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.202f	f0 51		beq $2082			beq 	_CSDoSound
.2031	c9 db		cmp #$db			cmp 	#TKW_AT 					; is it AT pitch ?
.2033	f0 29		beq $205e			beq 	_CSSetPitch
.2035	a2 03		ldx #$03			ldx 	#3 							; look up in the tokens table
.2037					_CSCheck:
.2037	dd 7e 20	cmp $207e,x			cmp 	_ComSoundTokens,x 			; if found token update value.
.203a	f0 10		beq $204c			beq 	_CSFoundToken
.203c	ca		dex				dex
.203d	10 f8		bpl $2037			bpl 	_CSCheck
.203f	c8		iny				iny
.2040	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR 					; was it sound CLEAR
.2042	d0 03		bne $2047			bne 	_CSSyntax
.2044	4c e0 1f	jmp $1fe0			jmp 	SoundReset
.2047					_CSSyntax:
.2047	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2049	20 27 15	jsr $1527		jsr	errorHandler
.204c					_CSFoundToken:
.204c	da		phx				phx
.204d	c8		iny				iny 								; skip it
.204e	a9 00		lda #$00			lda 	#0 							; get a small int
.2050	a2 0c		ldx #$0c		ldx	#12
.2052	20 24 40	jsr $4024		jsr	mainHandler
.2055	fa		plx				plx
.2056	a5 98		lda $98				lda 	esInt0 						; copy value to setup memory
.2058	9d 6d 0c	sta $0c6d,x			sta 	sndChannel,x
.205b	4c 27 20	jmp $2027			jmp 	_ComSoundLoop
.205e					_CSSetPitch:
.205e	c8		iny				iny 								; skip AT
.205f	a9 00		lda #$00			lda 	#0 							; get an integer.
.2061	a2 0a		ldx #$0a		ldx	#10
.2063	20 24 40	jsr $4024		jsr	mainHandler
.2066	a5 a8		lda $a8				lda 	esInt2 						; check range
.2068	05 b0		ora $b0				ora 	esInt3
.206a	d0 0d		bne $2079			bne 	_CSBadValue
.206c	a5 98		lda $98				lda 	esInt0	 					; copy into pitch and loop back
.206e	8d 69 0c	sta $0c69			sta 	sndPitch
.2071	a5 a0		lda $a0				lda 	esInt1
.2073	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.2076	4c 27 20	jmp $2027			jmp 	_ComSoundLoop
.2079					_CSBadValue:
.2079	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.207b	20 27 15	jsr $1527		jsr	errorHandler
.207e					_ComSoundTokens:
>207e	ce 9b ea cf					.byte 	TKW_TO,TKW_FOR,TKW_TYPE,TKW_STEP
.2082					_CSDoSound:
.2082	ae 6d 0c	ldx $0c6d			ldx 	sndChannel 					; if channel >= 16 look for channel unused.
.2085	e0 10		cpx #$10			cpx 	#16
.2087	90 0f		bcc $2098			bcc 	_CSHaveChannel
.2089	a2 0f		ldx #$0f			ldx 	#15
.208b					_CSFindChannel:
.208b	bd 59 0c	lda $0c59,x			lda 	channelTime,x 				; time is zero e.g. sound off.
.208e	f0 08		beq $2098			beq 	_CSHaveChannel
.2090	ca		dex				dex
.2091	10 f8		bpl $208b			bpl 	_CSFindChannel 				; try all of them
.2093	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.2095	20 27 15	jsr $1527		jsr	errorHandler
.2098					_CSHaveChannel:
.2098	8e 6d 0c	stx $0c6d			stx 	sndChannel 					; update channel.
.209b	ad 6e 0c	lda $0c6e			lda 	sndTime 					; get how long
.209e	f0 29		beq $20c9			beq 	_CSExit 					; if zero then exit
.20a0	ad 70 0c	lda $0c70			lda 	sndVolume 					; get volume, max out at 63.
.20a3	c9 40		cmp #$40			cmp 	#64
.20a5	90 02		bcc $20a9			bcc 	_CSHaveVolume
.20a7	a9 3f		lda #$3f			lda 	#63
.20a9					_CSHaveVolume:
.20a9	09 c0		ora #$c0			ora 	#$C0 						; both channels
.20ab	8d 6b 0c	sta $0c6b			sta 	sndExtra 					; write out.
.20ae	ad 6f 0c	lda $0c6f			lda 	sndType 					; get waveform (bits 0-1 Pulse, Sawtooth, Triangle Noise)
.20b1	6a		ror a				ror 	a 							; rotate into position 7,6
.20b2	6a		ror a				ror 	a
.20b3	6a		ror a				ror 	a
.20b4	29 c0		and #$c0			and 	#$C0 						; mask other bits
.20b6	09 3f		ora #$3f			ora 	#63 						; 50% duty cycle.
.20b8	8d 6c 0c	sta $0c6c			sta 	sndExtra+1
.20bb	5a		phy				phy
.20bc	da		phx				phx
.20bd	a2 69		ldx #$69			ldx 	#sndPitch & 255 			; XY = sound data
.20bf	a0 0c		ldy #$0c			ldy 	#sndPitch >> 8
.20c1	20 0e 1f	jsr $1f0e			jsr 	SoundAddQueue 				; add it to the queue.
.20c4	68		pla				pla 								; get channel #
.20c5	20 42 1f	jsr $1f42			jsr 	SoundCheckQueue 			; check if we can play this one now, e.g. the queue was empty.
.20c8	7a		ply				ply
.20c9					_CSExit:
.20c9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/soundsync.asm

.20ca					SoundInterrupt:
.20ca	ad 58 0c	lda $0c58			lda 	LiveChannels 		; anything playing ?
.20cd	f0 2b		beq $20fa			beq 	_SIExit
.20cf	a2 0f		ldx #$0f			ldx 	#15 				; check each channel ?
.20d1	bd 59 0c	lda $0c59,x	_SILoop:lda 	channelTime,x 		; time left ?
.20d4	f0 21		beq $20f7			beq 	_SINext 	 		; if zero not playing
.20d6	38		sec				sec 						; subtract one from time
.20d7	e9 01		sbc #$01			sbc 	#1
.20d9	9d 59 0c	sta $0c59,x			sta 	channelTime,x
.20dc	d0 19		bne $20f7			bne 	_SINext 			; if non zero, time for sound off.
.20de	ce 58 0c	dec $0c58			dec 	LiveChannels 		; one fewer channels.
.20e1	8a		txa				txa 						; point to sound PSG
.20e2	20 ce 1f	jsr $1fce			jsr 	CSPointChannel
.20e5	a9 00		lda #$00			lda 	#0 					; zero it all out
.20e7	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20ea	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20ed	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20f0	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20f3	8a		txa				txa 						; check the queue for this for more notes.
.20f4	20 42 1f	jsr $1f42			jsr 	SoundCheckQueue
.20f7	ca		dex		_SINext:dex
.20f8	10 d7		bpl $20d1			bpl 	_SILoop
.20fa					_SIExit:
.20fa	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0cd2					hitSprite1:
>0cd2							.fill 	1 							; this won't work ... if you nest HIT() which
.0cd3					hitSprite2:
>0cd3							.fill 	1
.0cd4					hitRange:
>0cd4							.fill 	1
.20fb					FunctionCollide:
.20fb	48		pha				pha 								; save and put index into X
.20fc	aa		tax				tax
.20fd	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.20ff	8d d4 0c	sta $0cd4			sta 	hitRange
.2102	20 a2 21	jsr $21a2			jsr 	_FCGetSpriteID
.2105	8d d2 0c	sta $0cd2			sta 	hitSprite1
.2108	da		phx				phx
.2109	a2 02		ldx #$02		ldx	#2
.210b	20 24 40	jsr $4024		jsr	mainHandler
.210e	fa		plx				plx
.210f	20 a2 21	jsr $21a2			jsr 	_FCGetSpriteID
.2112	8d d3 0c	sta $0cd3			sta 	hitSprite2
.2115	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.2117	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2119	f0 12		beq $212d			beq 	_FCParam2
.211b	da		phx				phx
.211c	a2 02		ldx #$02		ldx	#2
.211e	20 24 40	jsr $4024		jsr	mainHandler
.2121	68		pla				pla
.2122	a2 0c		ldx #$0c		ldx	#12
.2124	20 24 40	jsr $4024		jsr	mainHandler
.2127	aa		tax				tax
.2128	b5 98		lda $98,x			lda 	esInt0,x
.212a	8d d4 0c	sta $0cd4			sta 	hitRange
.212d					_FCParam2:
.212d	a2 04		ldx #$04		ldx	#4
.212f	20 24 40	jsr $4024		jsr	mainHandler
.2132	68		pla				pla 								; set X to point to the stack again.
.2133	48		pha				pha
.2134	aa		tax				tax
.2135	5a		phy				phy
.2136	18		clc				clc 								; do it with the horizontal values.
.2137	20 58 21	jsr $2158			jsr 	_FCCheck
.213a	90 0a		bcc $2146			bcc 	_FCFail
.213c	38		sec				sec 								; do it with the vertical values.
.213d	20 58 21	jsr $2158			jsr 	_FCCheck
.2140	90 04		bcc $2146			bcc 	_FCFail
.2142	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.2144	d0 02		bne $2148			bne 	_FCReturnA
.2146					_FCFail:
.2146	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.2148					_FCReturnA:
.2148	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.214a	7a		ply				ply
.214b	68		pla				pla 								; restore stack, return result and exit.
.214c	aa		tax				tax
.214d	a5 32		lda $32				lda 	tempShort
.214f	95 98		sta $98,x			sta 	esInt0,x
.2151	95 a0		sta $a0,x			sta 	esInt1,x
.2153	95 a8		sta $a8,x			sta 	esInt2,x
.2155	95 b0		sta $b0,x			sta 	esInt3,x
.2157	60		rts				rts
.2158					_FCCheck:
.2158	08		php				php 								; save the H/V flag twice
.2159	08		php				php
.215a	ad d2 0c	lda $0cd2			lda 	hitSprite1 					; select sprite 1 and read its location
.215d	20 e0 22	jsr $22e0			jsr 	SelectSpriteA 				; into X
.2160	28		plp				plp
.2161	20 04 24	jsr $2404			jsr 	SpriteReadCoordinate
.2164	ad d3 0c	lda $0cd3			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.2167	20 e0 22	jsr $22e0			jsr 	SelectSpriteA
.216a	e8		inx				inx
.216b	28		plp				plp
.216c	20 04 24	jsr $2404			jsr 	SpriteReadCoordinate
.216f	ca		dex				dex
.2170	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.2171	b5 98		lda $98,x			lda 	esInt0,x
.2173	f5 99		sbc $99,x			sbc 	esInt0+1,x
.2175	85 2a		sta $2a				sta 	temp0
.2177	b5 a0		lda $a0,x			lda 	esInt1,x
.2179	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.217b	85 2b		sta $2b				sta 	temp0+1
.217d	10 0d		bpl $218c			bpl 	_FCCIsPositive
.217f	38		sec				sec 								; if -ve calculate |difference|
.2180	a9 00		lda #$00			lda 	#0
.2182	e5 2a		sbc $2a				sbc 	temp0
.2184	85 2a		sta $2a				sta 	temp0
.2186	a9 00		lda #$00			lda 	#0
.2188	e5 2b		sbc $2b				sbc 	temp0+1
.218a	85 2b		sta $2b				sta 	temp0+1
.218c					_FCCIsPositive:
.218c	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.218e	d0 10		bne $21a0			bne 	_FCCFail
.2190	18		clc				clc 								; work out required min distance which is
.2191	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.2193	75 b1		adc $b1,x			adc 	esInt3+1,x
.2195	ac d4 0c	ldy $0cd4			ldy 	hitRange 					; get the hit range
.2198	f0 01		beq $219b			beq 	_FCCNoSetRange 				; override if non zero.
.219a	98		tya				tya
.219b					_FCCNoSetRange:
.219b	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.219d	f0 01		beq $21a0			beq 	_FCCFail
.219f	60		rts				rts
.21a0					_FCCFail:
.21a0	18		clc				clc
.21a1	60		rts				rts
.21a2					_FCGetSpriteID:
.21a2	8a		txa				txa
.21a3	a2 0c		ldx #$0c		ldx	#12
.21a5	20 24 40	jsr $4024		jsr	mainHandler
.21a8	aa		tax				tax
.21a9	b5 98		lda $98,x			lda 	esInt0,x
.21ab	30 01		bmi $21ae			bmi 	_FCGSValue
.21ad	60		rts				rts
.21ae					_FCGSValue:
.21ae	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.21b0	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0cd5					currSprite:
>0cd5							.fill 	2
.21b3					CommandSprite:
.21b3	20 b5 22	jsr $22b5			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.21b6	d0 0d		bne $21c5			bne 	_CSCheckClear
.21b8	ad 29 9f	lda $9f29			lda 	X16VeraDCVideo 				; sprite enable is bit 6.
.21bb	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.21bd	90 02		bcc $21c1			bcc 	_CSNotOn 					; if CS turn on, so set it
.21bf	09 40		ora #$40			ora 	#$40
.21c1					_CSNotOn:
.21c1	8d 29 9f	sta $9f29			sta 	X16VeraDCVideo 						; write it back in new state and exit
.21c4	60		rts				rts
.21c5					_CSCheckClear:
.21c5	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.21c7	8d d6 0c	sta $0cd6			sta 	currSprite+1
.21ca	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.21cc	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.21ce	d0 05		bne $21d5			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.21d0	20 c6 22	jsr $22c6			jsr 	CSClearSprites 				; clear all the sprites
.21d3	c8		iny				iny 								; consume CLEAR token and exit.
.21d4	60		rts				rts
.21d5					_CSCommandLoop:
.21d5	20 b5 22	jsr $22b5			jsr 	CSCheckOnOff 				; check sprite on/off
.21d8	f0 2c		beq $2206			beq 	_CSSetVisibility
.21da	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.21dc	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.21de	f0 25		beq $2205			beq 	_CSExit
.21e0	c8		iny				iny									; consume it
.21e1	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.21e3	f0 20		beq $2205			beq 	_CSExit
.21e5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.21e7	f0 ec		beq $21d5			beq 	_CSCommandLoop
.21e9	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.21eb	f0 69		beq $2256			beq 	_CSSetImage
.21ed	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.21ef	f0 2b		beq $221c			beq 	_CSSetFlip
.21f1	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.21f3	f0 46		beq $223b			beq 	_CSSetPos
.21f5	88		dey				dey 								; unpick DEY
.21f6	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.21f8	a2 0c		ldx #$0c		ldx	#12
.21fa	20 24 40	jsr $4024		jsr	mainHandler
.21fd	a5 98		lda $98				lda 	esInt0
.21ff	20 e0 22	jsr $22e0			jsr 	SelectSpriteA
.2202	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.2205					_CSExit:
.2205	60		rts				rts
.2206					_CSSetVisibility:
.2206	08		php				php 								; save carry
.2207	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.2209	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.220c	ad 23 9f	lda $9f23			lda 	X16VeraData0 						; read it.
.220f	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2211	28		plp				plp
.2212	90 02		bcc $2216			bcc 	_CSSetOff 					; check if carry was set
.2214	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2216					_CSSetOff:
.2216	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; update and loop back
.2219	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.221c					_CSSetFlip:
.221c	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.221e	a2 0c		ldx #$0c		ldx	#12
.2220	20 24 40	jsr $4024		jsr	mainHandler
.2223	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2225	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.2228	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.222a	29 03		and #$03			and 	#3
.222c	85 2a		sta $2a				sta 	temp0
.222e	ad 23 9f	lda $9f23			lda 	X16VeraData0 				; update the flip.
.2231	29 fc		and #$fc			and 	#$FC
.2233	05 2a		ora $2a				ora 	temp0
.2235	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2238	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.223b					_CSSetPos:
.223b	a9 00		lda #$00			lda 	#0 							; X now at level 0
.223d	a2 0a		ldx #$0a		ldx	#10
.223f	20 24 40	jsr $4024		jsr	mainHandler
.2242	a2 02		ldx #$02		ldx	#2
.2244	20 24 40	jsr $4024		jsr	mainHandler
.2247	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.2249	a2 0a		ldx #$0a		ldx	#10
.224b	20 24 40	jsr $4024		jsr	mainHandler
.224e	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2250	20 c2 23	jsr $23c2			jsr 	SpriteMove 					; move it.
.2253	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.2256					_CSSetImage:
.2256	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2258	a2 0c		ldx #$0c		ldx	#12
.225a	20 24 40	jsr $4024		jsr	mainHandler
.225d	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.225f	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.2262	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2264	bd 1d 0d	lda $0d1d,x			lda 	imageAddr32Low,x 			; copy low address in.
.2267	8d 23 9f	sta $9f23			sta 	X16VeraData0
.226a	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; bump to offset 1.
.226d	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2270	29 10		and #$10			and 	#$10
.2272	0a		asl a				asl 	a
.2273	0a		asl a				asl		a
.2274	0a		asl a				asl 	a 							; put into bit 7
.2275	1d 5d 0d	ora $0d5d,x			ora 	imageAddr32High,x 			; or high address with it.
.2278	8d 23 9f	sta $9f23			sta 	X16VeraData0 						; write the high byte.
.227b	a9 06		lda #$06			lda 	#6
.227d	20 9c 22	jsr $229c			jsr 	SpriteSetTarget 			; set sprite on.
.2280	ad 23 9f	lda $9f23			lda 	X16VeraData0
.2283	09 0c		ora #$0c			ora 	#$0C
.2285	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2288	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; point to byte 7 : height/width/palette offset
.228b	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get image info
.228e	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.228f	0a		asl a				asl 	a
.2290	0a		asl a				asl 	a
.2291	0a		asl a				asl 	a
.2292	b0 02		bcs $2296			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.2294	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.2296					_CSNoOffset:
.2296	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2299	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.229c					SpriteSetTarget:
.229c	0d d5 0c	ora $0cd5			ora 	currSprite
.229f	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.22a2	ad d6 0c	lda $0cd6			lda 	currSprite+1
.22a5	f0 09		beq $22b0			beq 	_SSTNoSet
.22a7	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.22aa	a9 01		lda #$01			lda 	#$01
.22ac	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.22af	60		rts				rts
.22b0					_SSTNoSet:
.22b0	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.22b2	20 27 15	jsr $1527		jsr	errorHandler
.22b5					CSCheckOnOff:
.22b5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.22b7	c8		iny				iny
.22b8	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.22ba	18		clc				clc
.22bb	f0 08		beq $22c5			beq 	_CSCOExit
.22bd	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.22bf	38		sec				sec 								; return NE if neither.
.22c0	f0 03		beq $22c5			beq 	_CSCOExit
.22c2	88		dey				dey 								; undo consume
.22c3	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.22c5					_CSCOExit:
.22c5	60		rts				rts
.22c6					CSClearSprites:
.22c6	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.22c8	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.22cb	a9 fc		lda #$fc			lda 	#$FC
.22cd	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.22d0	a9 00		lda #$00			lda 	#0
.22d2	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.22d5					_CSClear:
.22d5	a9 00		lda #$00			lda 	#0 							; set everything to $00
.22d7	8d 23 9f	sta $9f23			sta 	X16VeraData0
.22da	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.22dd	d0 f6		bne $22d5			bne 	_CSClear
.22df	60		rts				rts
.22e0					SelectSpriteA:
.22e0	85 2a		sta $2a				sta 	temp0
.22e2	a9 00		lda #$00			lda 	#0
.22e4	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.22e6	b0 11		bcs $22f9			bcs 	_CSBadValue 				; sprites only 0-127
.22e8	06 2a		asl $2a				asl 	temp0
.22ea	2a		rol a				rol 	a
.22eb	06 2a		asl $2a				asl 	temp0
.22ed	2a		rol a				rol 	a
.22ee	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.22f0	8d d6 0c	sta $0cd6			sta 	currSprite+1
.22f3	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.22f5	8d d5 0c	sta $0cd5			sta 	currSprite+0
.22f8	60		rts				rts
.22f9					_CSBadValue
.22f9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.22fb	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0cd7					srenderWidth:
>0cd7							.fill 	1
.22fe					Command_Paint:
.22fe	a9 06		lda #$06			lda 	#ImageHandler & $FF
.2300	a2 23		ldx #$23			ldx 	#ImageHandler >> 8
.2302	20 e9 18	jsr $18e9			jsr 	GHandler
.2305	60		rts				rts
.2306					ImageHandler:
.2306	a9 0d		lda #$0d			lda 	#SpriteImageAccess & $FF
.2308	a2 23		ldx #$23			ldx 	#SpriteImageAccess >> 8
.230a	4c 71 1b	jmp $1b71			jmp 	ImageRenderer
.230d					SpriteImageAccess:
.230d	c0 ff		cpy #$ff			cpy 	#255
.230f	d0 22		bne $2333			bne 	_SIAGetPixel
.2311	ae 01 0c	ldx $0c01			ldx 	gdImage 					; get the image #
.2314	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get the image information.
.2317	48		pha				pha
.2318	29 03		and #$03			and 	#3 							; LSB x 2 width
.231a	aa		tax				tax
.231b	bd 2f 23	lda $232f,x			lda 	_SIASizeTable,x
.231e	8d d7 0c	sta $0cd7			sta 	sRenderWidth 				; save rendering width.
.2321	aa		tax				tax
.2322	68		pla				pla 								; get back next 2 bits are height
.2323	4a		lsr a				lsr 	a
.2324	4a		lsr a				lsr 	a
.2325	29 03		and #$03			and 	#3
.2327	a8		tay				tay
.2328	b9 2f 23	lda $232f,y			lda 	_SIASizeTable,y
.232b	a8		tay				tay
.232c	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.232e	60		rts				rts
.232f					_SIASizeTable:
>232f	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.2333					_SIAGetPixel:
.2333	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.2335	a9 00		lda #$00			lda 	#0
.2337	85 2b		sta $2b				sta 	temp0+1
.2339	ac 01 0c	ldy $0c01			ldy 	gdImage 					; get image info into A
.233c	b9 dd 0c	lda $0cdd,y			lda 	imageInfo,y
.233f	48		pha				pha
.2340	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.2342	85 2c		sta $2c				sta 	temp1
.2344	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.2345	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.2347	18		clc				clc
.2348	69 03		adc #$03			adc 	#3
.234a	a8		tay				tay
.234b					_SIAMultiply:
.234b	06 2a		asl $2a				asl 	temp0
.234d	26 2b		rol $2b				rol 	temp0+1
.234f	88		dey				dey
.2350	d0 f9		bne $234b			bne 	_SIAMultiply
.2352	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.2354	d0 04		bne $235a			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.2356	46 2b		lsr $2b				lsr 	temp0+1
.2358	66 2a		ror $2a				ror 	temp0
.235a					_SIANoHalf:
.235a	ae 01 0c	ldx $0c01			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.235d	bd 1d 0d	lda $0d1d,x			lda 	imageAddr32Low,x
.2360	85 2e		sta $2e				sta 	temp2
.2362	bd 5d 0d	lda $0d5d,x			lda 	imageAddr32High,x
.2365	85 2f		sta $2f				sta 	temp2+1
.2367	a9 00		lda #$00			lda 	#0
.2369	85 30		sta $30				sta 	temp3
.236b	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.236d					_SIMult32:
.236d	06 2e		asl $2e				asl 	temp2
.236f	26 2f		rol $2f				rol 	temp2+1
.2371	26 30		rol $30				rol 	temp3
.2373	ca		dex				dex
.2374	d0 f7		bne $236d			bne 	_SIMult32
.2376	ee 25 9f	inc $9f25			inc 	X16VeraControl 				; select alternate data port
.2379	18		clc				clc
.237a	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.237c	65 2e		adc $2e				adc 	temp2
.237e	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.2381	a5 2b		lda $2b				lda 	temp0+1
.2383	65 2f		adc $2f				adc 	temp2+1
.2385	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.2388	a9 10		lda #$10			lda 	#$10
.238a	65 30		adc $30				adc 	temp3
.238c	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.238f	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.2391					_SIFillCacheLoop:
.2391	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.2393	d0 12		bne $23a7			bne 	_SI8Bit
.2395	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; get data
.2398	48		pha				pha 								; save it
.2399	4a		lsr a				lsr 	a 							; MSB first
.239a	4a		lsr a				lsr 	a
.239b	4a		lsr a				lsr 	a
.239c	4a		lsr a				lsr 	a
.239d	20 b7 23	jsr $23b7			jsr 	_SIWrite4Bit
.23a0	68		pla				pla
.23a1	20 b7 23	jsr $23b7			jsr 	_SIWrite4Bit
.23a4	4c ae 23	jmp $23ae			jmp 	_SIAdvance
.23a7					_SI8Bit:
.23a7	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; copy data into render cache
.23aa	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.23ad	e8		inx				inx
.23ae					_SIAdvance:
.23ae	ec d7 0c	cpx $0cd7			cpx 	sRenderWidth 				; filled the cache to required width ?
.23b1	d0 de		bne $2391			bne 	_SIFillCacheLoop
.23b3	ce 25 9f	dec $9f25			dec 	X16VeraControl 				; select original data port.
.23b6	60		rts				rts
.23b7					_SIWrite4Bit:
.23b7	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.23b9	f0 02		beq $23bd			beq 	_SIW4Skip
.23bb	09 f0		ora #$f0			ora 	#$F0
.23bd					_SIW4Skip:
.23bd	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.23c0	e8		inx				inx
.23c1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.23c2					SpriteMove:
.23c2	5a		phy				phy
.23c3	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.23c5	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.23c8	ad 23 9f	lda $9f23			lda 	X16VeraData0
.23cb	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.23cc	4a		lsr a				lsr 	a
.23cd	4a		lsr a				lsr 	a
.23ce	4a		lsr a				lsr 	a
.23cf	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.23d1	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.23d3	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.23d6	20 e4 23	jsr $23e4			jsr 	SMWritePosition 					; write X position out.
.23d9	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.23db	46 2a		lsr $2a				lsr 	temp0
.23dd	e8		inx				inx 										; get the y position
.23de	20 e4 23	jsr $23e4			jsr 	SMWritePosition 					; and write that out.
.23e1	ca		dex				dex 										; fix X and quit.
.23e2	7a		ply				ply
.23e3	60		rts				rts
.23e4					SMWritePosition:
.23e4	a5 2a		lda $2a				lda 	temp0 								; get dim size
.23e6	29 03		and #$03			and 	#3 									; in range into Y
.23e8	a8		tay				tay
.23e9	38		sec				sec
.23ea	b5 98		lda $98,x			lda 	esInt0,x
.23ec	f9 00 24	sbc $2400,y			sbc 	SMHalfSize,y
.23ef	8d 23 9f	sta $9f23			sta 	X16VeraData0
.23f2	ee 20 9f	inc $9f20			inc 	X16VeraAddLow
.23f5	b5 a0		lda $a0,x			lda 	esInt1,x
.23f7	e9 00		sbc #$00			sbc 	#0
.23f9	8d 23 9f	sta $9f23			sta 	X16VeraData0
.23fc	ee 20 9f	inc $9f20			inc 	X16VeraAddLow
.23ff	60		rts				rts
.2400					SMHalfSize:
>2400	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2404					SpriteReadCoordinate:
.2404	5a		phy				phy
.2405	08		php				php 										; save CTR on stack
.2406	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2408	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.240b	ad 23 9f	lda $9f23			lda 	X16VeraData0
.240e	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.240f	4a		lsr a				lsr 	a
.2410	4a		lsr a				lsr 	a
.2411	4a		lsr a				lsr 	a
.2412	28		plp				plp 										; restore CTS
.2413	08		php				php
.2414	90 02		bcc $2418			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2416	4a		lsr a				lsr 	a
.2417	4a		lsr a				lsr 	a
.2418					_SPRCNotY1:
.2418	29 03		and #$03			and 	#3 									; point into half width/height
.241a	a8		tay				tay
.241b	b9 00 24	lda $2400,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.241e	95 b0		sta $b0,x			sta 	esInt3,x
.2420	28		plp				plp 										; CS Y CC X
.2421	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2423	2a		rol a				rol 	a
.2424	2a		rol a				rol 	a
.2425	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2427	20 9c 22	jsr $229c			jsr 	SpriteSetTarget 					; set data pointer offset by that
.242a	18		clc				clc 										; read and unfix centre.
.242b	ad 23 9f	lda $9f23			lda 	X16VeraData0
.242e	75 b0		adc $b0,x			adc 	esInt3,x
.2430	95 98		sta $98,x			sta 	esInt0,x
.2432	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 						; do MSB
.2435	ad 23 9f	lda $9f23			lda 	X16VeraData0
.2438	69 00		adc #$00			adc 	#0
.243a	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.243c	c9 08		cmp #$08			cmp		#$08
.243e	90 02		bcc $2442			bcc 	_SPRCNoSX
.2440	09 f0		ora #$f0			ora 	#$F0
.2442					_SPRCNoSX:
.2442	95 a0		sta $a0,x			sta 	esInt1,x
.2444	7a		ply				ply
.2445	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2446					Sprite_GetX:
.2446	18		clc				clc
.2447	90 01		bcc $244a			bcc 	SpriteGetCode
.2449					Sprite_GetY:
.2449	38		sec				sec
.244a					SpriteGetCode:
.244a	08		php				php 								; CLC : X SEC: Y, save on stack.
.244b	48		pha				pha 								; save stack position
.244c	20 67 24	jsr $2467			jsr 	GetSpriteNumber 			; get # of sprite.
.244f	a2 04		ldx #$04		ldx	#4
.2451	20 24 40	jsr $4024		jsr	mainHandler
.2454	fa		plx				plx
.2455	28		plp				plp 								; which one ?
.2456	20 04 24	jsr $2404			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.2459	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.245b	29 80		and #$80			and 	#$80
.245d	f0 02		beq $2461			beq 	_SGXYPos
.245f	a9 ff		lda #$ff			lda 	#$FF
.2461					_SGXYPos:
.2461	95 a8		sta $a8,x			sta 	esInt2,x
.2463	95 b0		sta $b0,x			sta 	esInt3,x
.2465	8a		txa				txa 								; return NSP in A
.2466	60		rts				rts
.2467					GetSpriteNumber:
.2467	48		pha				pha
.2468	a2 0c		ldx #$0c		ldx	#12
.246a	20 24 40	jsr $4024		jsr	mainHandler
.246d	fa		plx				plx
.246e	b5 98		lda $98,x			lda 	esInt0,x
.2470	20 e0 22	jsr $22e0			jsr 	SelectSpriteA
.2473	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/imagedef.asm

.2474					Command_Image:
.2474	a9 00		lda #$00			lda 	#0 							; get a small int
.2476	a2 0c		ldx #$0c		ldx	#12
.2478	20 24 40	jsr $4024		jsr	mainHandler
.247b	5a		phy				phy
.247c	a5 98		lda $98				lda 	esInt0 						; get character #
.247e	a0 00		ldy #$00			ldy 	#0 							; offset 0
.2480	20 2e 26	jsr $262e			jsr 	PointVeraCharacterA 		; routine in textdraw that points to character A
.2483	7a		ply				ply
.2484					_CILoop:
.2484	b1 28		lda ($28),y			lda 	(codePtr),Y 				; followed by ,
.2486	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2488	d0 10		bne $249a			bne 	_CIExit 					; no, then done.
.248a	c8		iny				iny 								; skip comma
.248b	a9 00		lda #$00			lda 	#0 							; get a small int
.248d	a2 0c		ldx #$0c		ldx	#12
.248f	20 24 40	jsr $4024		jsr	mainHandler
.2492	a5 98		lda $98				lda 	esInt0
.2494	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; write to vera
.2497	4c 84 24	jmp $2484			jmp 	_CILoop
.249a					_CIExit:
.249a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0cd8					currentMode:
>0cd8							.fill 	4
.249b					ForceMode0:
.249b	a2 00		ldx #$00			ldx 	#0
.249d	86 98		stx $98				stx 	esInt0 						; in case we do it.
.249f					_FMCheck:
.249f	bd 33 25	lda $2533,x			lda 	CMModeList,x 				; do we need to switch ?
.24a2	dd d8 0c	cmp $0cd8,x			cmp 	currentMode,x
.24a5	d0 13		bne $24ba			bne 	CMSetMode 					; different so switch.
.24a7	e8		inx				inx
.24a8	e0 04		cpx #$04			cpx 	#4
.24aa	d0 f3		bne $249f			bne 	_FMCheck
.24ac	60		rts				rts
.24ad					CommandMode:
.24ad	a9 00		lda #$00			lda 	#0
.24af	a2 0a		ldx #$0a		ldx	#10
.24b1	20 24 40	jsr $4024		jsr	mainHandler
.24b4	a5 b0		lda $b0				lda 	esInt3
.24b6	29 70		and #$70			and 	#$70
.24b8	d0 06		bne $24c0			bne 	CMNoExpand
.24ba					CMSetMode:
.24ba	20 14 25	jsr $2514			jsr 	CMExpandMode
.24bd	4c d4 24	jmp $24d4			jmp 	CMUpdateMode
.24c0					CMNoExpand:
.24c0	a5 98		lda $98				lda 	esInt0
.24c2	8d d8 0c	sta $0cd8			sta 	currentMode
.24c5	a5 a0		lda $a0				lda 	esInt1
.24c7	8d d9 0c	sta $0cd9			sta 	currentMode+1
.24ca	a5 a8		lda $a8				lda 	esInt2
.24cc	8d da 0c	sta $0cda			sta 	currentMode+2
.24cf	a5 b0		lda $b0				lda 	esInt3
.24d1	8d db 0c	sta $0cdb			sta 	currentMode+3
.24d4					CMUpdateMode:
.24d4	a2 11		ldx #$11			ldx 	#$11
.24d6					_CMClear:
.24d6	a9 00		lda #$00			lda 	#0
.24d8	9d 29 9f	sta $9f29,x			sta 	X16VeraDCVideo,X
.24db	ca		dex				dex
.24dc	10 f8		bpl $24d6			bpl 	_CMClear
.24de	ad db 0c	lda $0cdb			lda 	currentMode+3 				; get current mode
.24e1	48		pha				pha 								; stack twice.
.24e2	48		pha				pha
.24e3	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.24e5	09 01		ora #$01			ora 	#$01 						; turn the output on.
.24e7	8d 29 9f	sta $9f29			sta 	X16VeraDCVideo 						; write to DC_VIDEO
.24ea	68		pla				pla 								; get back
.24eb	20 43 25	jsr $2543			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.24ee	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.24f1	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.24f2	4a		lsr a				lsr 	a
.24f3	4a		lsr a				lsr 	a
.24f4	20 43 25	jsr $2543			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.24f7	8d 2b 9f	sta $9f2b			sta 	X16VeraVScale
.24fa	a2 00		ldx #$00			ldx 	#0 							; this is offset from X16VeraLayerConfig to do L0
.24fc	ad d8 0c	lda $0cd8			lda 	currentMode					; get L0 config byte
.24ff	20 4e 25	jsr $254e			jsr 	CMDecodeLayer 				; and decode layer 0
.2502	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2504	ad d9 0c	lda $0cd9			lda 	currentMode+1
.2507	20 4e 25	jsr $254e			jsr 	CMDecodeLayer
.250a	20 9e 1d	jsr $1d9e			jsr 	gdModeChanged 				; check the bitmap status.
.250d	20 d4 18	jsr $18d4			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2510	20 e0 1f	jsr $1fe0			jsr 	SoundReset 					; Reset the sound channels.
.2513	60		rts				rts
.2514					CMExpandMode:
.2514	a5 98		lda $98				lda 	esInt0 						; get mode number
.2516	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2518	b0 14		bcs $252e			bcs 	_CMModeError
.251a	0a		asl a				asl 	a 							; x 4 into X
.251b	0a		asl a				asl 	a
.251c	aa		tax				tax
.251d	5a		phy				phy
.251e	a0 00		ldy #$00			ldy 	#0
.2520					_CMEMCopy:
.2520	bd 33 25	lda $2533,x			lda 	CMModeList,x
.2523	99 d8 0c	sta $0cd8,y			sta 	currentMode,y
.2526	e8		inx				inx
.2527	c8		iny				iny
.2528	c0 04		cpy #$04			cpy 	#4
.252a	d0 f4		bne $2520			bne 	_CMEMCopy
.252c	7a		ply				ply
.252d	60		rts				rts
.252e					_CMModeError:
.252e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2530	20 27 15	jsr $1527		jsr	errorHandler
.2533					CMModeList:
>2533	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2537	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>253b	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>253f	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2543					CMEndModeList:
.2543					CMToScale:
.2543	29 03		and #$03			and 	#3 							; lower 2 bits only
.2545	aa		tax				tax 								; put in X for counting
.2546	a9 00		lda #$00			lda 	#0 							; zero result
.2548	38		sec				sec 								; first time rotate CS in
.2549					_CMTSLoop:
.2549	6a		ror a				ror 	a
.254a	ca		dex				dex
.254b	10 fc		bpl $2549			bpl 	_CMTSLoop
.254d	60		rts				rts
.254e					CMDecodeLayer:
.254e	48		pha				pha 								; save it.
.254f	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2551	9d 2d 9f	sta $9f2d,x			sta 	X16VeraLayerConfig,X
.2554	68		pla				pla 								; get it back
.2555	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2557	f0 02		beq $255b			beq 	_CMDLNotSet
.2559	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.255b					_CMDLNotSet:
.255b	e0 00		cpx #$00			cpx 	#0
.255d	f0 06		beq $2565			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.255f	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2561	9d 2f 9f	sta $9f2f,x			sta 	X16VeraLayerTileBase,X
.2564	60		rts				rts
.2565					_CMDLayer0:
.2565	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2567	9d 2f 9f	sta $9f2f,x			sta 	X16VeraLayerTileBase,X
.256a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.256b					CommandPalette:
.256b	a9 00		lda #$00			lda 	#0
.256d	a2 0c		ldx #$0c		ldx	#12
.256f	20 24 40	jsr $4024		jsr	mainHandler
.2572	a2 02		ldx #$02		ldx	#2
.2574	20 24 40	jsr $4024		jsr	mainHandler
.2577	a9 01		lda #$01			lda 	#1
.2579	a2 08		ldx #$08		ldx	#8
.257b	20 24 40	jsr $4024		jsr	mainHandler
.257e	a5 98		lda $98				lda 	esInt0 					; get palette #
.2580	20 90 25	jsr $2590			jsr 	PointToPaletteA			; point to palette register
.2583	a5 99		lda $99				lda 	esInt0+1
.2585	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2588	a5 a1		lda $a1				lda 	esInt1+1
.258a	29 0f		and #$0f			and 	#$0F
.258c	8d 23 9f	sta $9f23			sta 	X16VeraData0
.258f	60		rts				rts
.2590					PointToPaletteA:
.2590	0a		asl a				asl 	a 							; x 2 -> LSB
.2591	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.2594	a9 00		lda #$00			lda 	#0 							; carry into A
.2596	2a		rol a				rol 	a
.2597	09 fa		ora #$fa			ora 	#(X16VeraPalette >> 8)&$FF	; make correct address
.2599	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.259c	a9 11		lda #$11			lda 	#(X16VeraPalette >> 16)|$10	; $01 and single step => X16VeraAddHigh
.259e	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.25a1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

.25a2					Command_Draw:
.25a2	a9 aa		lda #$aa			lda 	#TextHandler & $FF
.25a4	a2 25		ldx #$25			ldx 	#TextHandler >> 8
.25a6	20 e9 18	jsr $18e9			jsr 	GHandler
.25a9	60		rts				rts
.25aa					TextHandler:
.25aa	ad 08 0c	lda $0c08			lda 	gdText+1 					; do we have a string
.25ad	d0 1a		bne $25c9			bne 	_THHasString
.25af					_THCallRenderer:
.25af	da		phx				phx
.25b0	ad f2 0b	lda $0bf2			lda 	gy2
.25b3	48		pha				pha
.25b4	ad f3 0b	lda $0bf3			lda 	gy2+1
.25b7	48		pha				pha
.25b8	a9 fd		lda #$fd			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.25ba	a2 25		ldx #$25			ldx 	#BitmapTextAccess >> 8
.25bc	20 71 1b	jsr $1b71			jsr 	ImageRenderer
.25bf	68		pla				pla 								; restore y position and x register
.25c0	8d f3 0b	sta $0bf3			sta 	gy2+1
.25c3	68		pla				pla
.25c4	8d f2 0b	sta $0bf2			sta 	gy2
.25c7	fa		plx				plx
.25c8	60		rts				rts
.25c9					_THHasString:
.25c9	a2 00		ldx #$00			ldx 	#0 							; position in string
.25cb					_THStringLoop:
.25cb	ad 07 0c	lda $0c07			lda 	gdText 						; text => temp0
.25ce	85 2a		sta $2a				sta 	temp0
.25d0	ad 08 0c	lda $0c08			lda 	gdText+1
.25d3	85 2b		sta $2b				sta 	temp0+1
.25d5	8a		txa				txa 								; length = string length.
.25d6	a0 00		ldy #$00			ldy 	#0
.25d8	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.25da	f0 20		beq $25fc			beq 	_THExit 					; if so exit.
.25dc	e8		inx				inx 								; next character, put in Y
.25dd	8a		txa				txa
.25de	a8		tay				tay
.25df	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.25e1	8d 01 0c	sta $0c01			sta 	gdImage
.25e4	20 af 25	jsr $25af			jsr 	_THCallRenderer 			; render the text
.25e7	ad 00 0c	lda $0c00			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.25ea	0a		asl a				asl		a
.25eb	0a		asl a				asl 	a
.25ec	0a		asl a				asl 	a
.25ed	18		clc				clc
.25ee	6d f0 0b	adc $0bf0			adc 	gX2 						; add to horizontal position
.25f1	8d f0 0b	sta $0bf0			sta 	gx2
.25f4	90 d5		bcc $25cb			bcc 	_THStringLoop
.25f6	ee f1 0b	inc $0bf1			inc 	gx2+1
.25f9	4c cb 25	jmp $25cb			jmp 	_THStringLoop 				; do the whole lot.
.25fc					_THExit:
.25fc	60		rts				rts
.25fd					BitmapTextAccess:
.25fd	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.25ff	d0 07		bne $2608			bne 	_BTABitmap
.2601	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.2603	a2 08		ldx #$08			ldx 	#8
.2605	a0 08		ldy #$08			ldy 	#8
.2607	60		rts				rts
.2608					_BTABitmap:
.2608	ad 01 0c	lda $0c01			lda 	gdImage 					; Image => temp0:A
.260b	20 0f 26	jsr $260f			jsr 	GetRenderCharacterA
.260e	60		rts				rts
.260f					GetRenderCharacterA:
.260f	ee 25 9f	inc $9f25			inc 	X16VeraControl 				; alternate port set.
.2612	20 2e 26	jsr $262e			jsr 	PointVeraCharacterA
.2615	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; get bitmap
.2618	ce 25 9f	dec $9f25			dec 	X16VeraControl 				; original port set back
.261b	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.261d	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.261f					_BTADoCache:
.261f	a9 00		lda #$00			lda 	#0
.2621	46 2a		lsr $2a				lsr 	temp0
.2623	90 02		bcc $2627			bcc 	_BTANotSet
.2625	a9 ff		lda #$ff			lda 	#255
.2627					_BTANotSet:
.2627	9d 10 0c	sta $0c10,x			sta 	renderCache,x
.262a	ca		dex				dex
.262b	10 f2		bpl $261f			bpl 	_BTADoCache
.262d	60		rts				rts
.262e					PointVeraCharacterA:
.262e	85 2a		sta $2a				sta 	temp0
.2630	a9 00		lda #$00			lda 	#0
.2632	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.2634	2a		rol a				rol 	a
.2635	06 2a		asl $2a				asl 	temp0
.2637	2a		rol a				rol 	a
.2638	06 2a		asl $2a				asl 	temp0
.263a	2a		rol a				rol 	a
.263b	09 f8		ora #$f8			ora 	#(VeraDefaultFont >> 8)&$FF ; A now points into font table.
.263d	8d 21 9f	sta $9f21			sta 	X16VeraAddMed 				; set up address
.2640	a9 10		lda #$10			lda 	#$10+(VeraDefaultFont >> 16)
.2642	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2645	84 32		sty $32				sty 	tempShort
.2647	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.2649	05 32		ora $32				ora 	tempShort
.264b	8d 20 9f	sta $9f20			sta 	X16VeraAddLow 				; address set up.
.264e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.264f					Command_VLoad:
.264f	a9 00		lda #$00			lda 	#0 								; string which is the file name
.2651	a2 0e		ldx #$0e		ldx	#14
.2653	20 24 40	jsr $4024		jsr	mainHandler
.2656	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.2658	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.265a	95 98		sta $98,x			sta 	esInt0,x
.265c	a5 36		lda $36				lda 	lowMemory+1
.265e	95 a0		sta $a0,x			sta 	esInt1,x
.2660	a9 00		lda #$00			lda 	#0
.2662	95 a8		sta $a8,x			sta 	esInt2,x
.2664	95 b0		sta $b0,x			sta 	esInt3,x
.2666	a2 0c		ldx #$0c		ldx	#12
.2668	20 05 15	jsr $1505		jsr	deviceHandler
.266b	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.266d	85 2a		sta $2a				sta 	temp0
.266f	a5 a1		lda $a1				lda 	esInt1+1
.2671	85 2b		sta $2b				sta 	temp0+1
.2673	20 ee 26	jsr $26ee			jsr 	LoadVRAMFile 					; load the VRAM file in.
.2676	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2677					Command_VPoke:
.2677	38		sec				sec 						; one byte , CS
.2678	b0 01		bcs $267b			bcs 	CmdVideoWrite
.267a					Command_VDoke:
.267a	18		clc				clc 						; two bytes, CC
.267b					CmdVideoWrite:
.267b	08		php				php 						; save one or two btes
.267c	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.267e	a2 0a		ldx #$0a		ldx	#10
.2680	20 24 40	jsr $4024		jsr	mainHandler
.2683	a2 02		ldx #$02		ldx	#2
.2685	20 24 40	jsr $4024		jsr	mainHandler
.2688	a9 01		lda #$01			lda 	#1
.268a	a2 0a		ldx #$0a		ldx	#10
.268c	20 24 40	jsr $4024		jsr	mainHandler
.268f	a2 00		ldx #$00			ldx 	#0
.2691	20 a2 26	jsr $26a2			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2694	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2696	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2699	28		plp				plp 						; if it was Poke then exit
.269a	b0 05		bcs $26a1			bcs 	_CVWExit
.269c	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.269e	8d 23 9f	sta $9f23			sta 	X16VeraData0
.26a1					_CVWExit:
.26a1	60		rts				rts
.26a2					SetUpTOSVRamAddress:
.26a2	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.26a4	29 fe		and #$fe			and 	#$FE
.26a6	15 b0		ora $b0,x			ora 	esInt3,x
.26a8	d0 14		bne $26be			bne 	CVWValue
.26aa	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.26ac	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.26af	b5 a0		lda $a0,x			lda 	esInt1,x
.26b1	8d 21 9f	sta $9f21			sta	 	X16VeraAddMed
.26b4	b5 a8		lda $a8,x			lda 	esInt2,x
.26b6	29 01		and #$01			and 	#1
.26b8	09 10		ora #$10			ora 	#$10 				; step 1.
.26ba	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.26bd	60		rts				rts
.26be					CVWValue:
.26be	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.26c0	20 27 15	jsr $1527		jsr	errorHandler
.26c3					Command_VPeek:
.26c3	38		sec				sec 						; one byte , CS
.26c4	b0 01		bcs $26c7			bcs 	CmdVideoRead
.26c6					Command_VDeek:
.26c6	18		clc				clc 						; two bytes, CC
.26c7					CmdVideoRead:
.26c7	08		php				php 						; save action on stack.
.26c8	48		pha				pha 						; save stack position
.26c9	a2 0a		ldx #$0a		ldx	#10
.26cb	20 24 40	jsr $4024		jsr	mainHandler
.26ce	a2 04		ldx #$04		ldx	#4
.26d0	20 24 40	jsr $4024		jsr	mainHandler
.26d3	fa		plx				plx
.26d4	20 a2 26	jsr $26a2			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.26d7	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.26d9	95 a0		sta $a0,x			sta 	esInt1,x
.26db	95 a8		sta $a8,x			sta 	esInt2,x
.26dd	95 b0		sta $b0,x			sta 	esInt3,x
.26df	ad 23 9f	lda $9f23			lda 	X16VeraData0				; copy 1st byte
.26e2	95 98		sta $98,x			sta 	esInt0,x
.26e4	28		plp				plp 						; check if DOKE (carry was clear)
.26e5	b0 05		bcs $26ec			bcs 	_CVRExit
.26e7	ad 23 9f	lda $9f23			lda 	X16VeraData0 				; copy 2nd byte
.26ea	95 a0		sta $a0,x			sta 	esInt1,x
.26ec					_CVRExit:
.26ec	8a		txa				txa 						; return X position.
.26ed	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0cdc					compressMode:
>0cdc							.fill 	1
.0cdd					imageInfo:
>0cdd							.fill 	X16MaxImages
.0d1d					imageAddr32Low:
>0d1d							.fill  	X16MaxImages
.0d5d					imageAddr32High:
>0d5d							.fill  	X16MaxImages
.26ee					LoadVRAMFile:
.26ee	da		phx				phx
.26ef	5a		phy				phy
.26f0					_LVRLoop:
.26f0	20 ca 27	jsr $27ca			jsr 	LVFGet 						; get the next (never access direct)
.26f3	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.26f5	f0 42		beq $2739			beq 	_LVRExit
.26f7	b0 5a		bcs $2753			bcs 	_LVRLoad 					; load data in ?
.26f9	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.26fb	90 11		bcc $270e			bcc 	_LVRSetAddress
.26fd	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.26ff	f0 3b		beq $273c			beq 	_LVRSetPalette
.2701	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2703	90 2d		bcc $2732			bcc 	_LVRSetCompress
.2705	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2707	90 5e		bcc $2767			bcc 	_LVRSetSprite
.2709	a2 01		ldx #$01			ldx 	#ErrorID_missing
.270b	20 27 15	jsr $1527		jsr	errorHandler
.270e					_LVRSetAddress:
.270e	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2710	20 ca 27	jsr $27ca			jsr 	LVFGet
.2713	85 2c		sta $2c				sta 	temp1
.2715	a9 00		lda #$00			lda 	#0
.2717	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.2719	66 2c		ror $2c				ror 	temp1
.271b	6a		ror a				ror		a
.271c	46 2d		lsr $2d				lsr 	temp1+1
.271e	66 2c		ror $2c				ror 	temp1
.2720	6a		ror a				ror		a
.2721	8d 20 9f	sta $9f20			sta 	X16VeraAddLow 						; set write address with +1 increment
.2724	a5 2c		lda $2c				lda 	temp1
.2726	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.2729	a5 2d		lda $2d				lda 	temp1+1
.272b	09 10		ora #$10			ora 	#$10
.272d	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2730	d0 be		bne $26f0			bne 	_LVRLoop
.2732					_LVRSetCompress:
.2732	29 07		and #$07			and 	#7
.2734	8d dc 0c	sta $0cdc			sta 	compressMode
.2737	10 b7		bpl $26f0			bpl 	_LVRLoop
.2739					_LVRExit:
.2739	7a		ply				ply
.273a	fa		plx				plx
.273b	60		rts				rts
.273c					_LVRSetPalette:
.273c	20 ca 27	jsr $27ca			jsr 	LVFGet 						; get palette id.
.273f	20 90 25	jsr $2590			jsr 	PointToPaletteA 			; in palette.asm
.2742	20 ca 27	jsr $27ca			jsr 	LVFGet 						; copy 12 bit palette data in.
.2745	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2748	20 ca 27	jsr $27ca			jsr 	LVFGet
.274b	29 0f		and #$0f			and 	#$0F
.274d	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2750	4c f0 26	jmp $26f0			jmp 	_LVRLoop
.2753					_LVRLoad:
.2753	ae dc 0c	ldx $0cdc			ldx 	compressMode
.2756	d0 55		bne $27ad			bne 	_LVRNotMode0
.2758	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.275a					_LVRLCopyX:
.275a	aa		tax				tax
.275b					_LVRLCopy:
.275b	20 ca 27	jsr $27ca			jsr 	LVFGet 						; write to data.
.275e	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2761	ca		dex				dex
.2762	d0 f7		bne $275b			bne 	_LVRLCopy
.2764	4c f0 26	jmp $26f0			jmp 	_LVRLoop
.2767					_LVRSetSprite:
.2767	48		pha				pha 								; save on stack
.2768	20 ca 27	jsr $27ca			jsr 	LVFGet 						; get the sprite number into X
.276b	aa		tax				tax
.276c	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.276e	b0 38		bcs $27a8			bcs 	_LVRSSValue
.2770	68		pla				pla 								; restore the data held in the first byte
.2771	9d dd 0c	sta $0cdd,x			sta 	imageInfo,x 				; and write into the sprite image table.
.2774					_LVRAlignVRAM:
.2774	ad 20 9f	lda $9f20			lda 	X16VeraAddLow 						; check VRAM on 32 byte boundary
.2777	29 1f		and #$1f			and 	#$1F
.2779	f0 07		beq $2782			beq 	_LVRAligned
.277b	a9 00		lda #$00			lda 	#$00
.277d	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2780	f0 f2		beq $2774			beq 	_LVRAlignVRAM
.2782					_LVRAligned:
.2782	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh 						; put address/32 in sprite image table
.2785	4a		lsr a				lsr 	a 	 						; first halve into temp1
.2786	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.2789	6a		ror a				ror 	a
.278a	85 2d		sta $2d				sta 	temp1+1
.278c	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.278f	6a		ror a				ror 	a
.2790	85 2c		sta $2c				sta 	temp1
.2792	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2794					_LVRShift:
.2794	46 2d		lsr $2d				lsr 	temp1+1
.2796	66 2c		ror $2c				ror 	temp1
.2798	88		dey				dey
.2799	d0 f9		bne $2794			bne 	_LVRShift
.279b	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.279d	9d 5d 0d	sta $0d5d,x			sta 	imageAddr32High,x
.27a0	a5 2c		lda $2c				lda 	temp1
.27a2	9d 1d 0d	sta $0d1d,x			sta 	imageAddr32Low,x
.27a5	4c f0 26	jmp $26f0			jmp 	_LVRLoop
.27a8					_LVRSSValue:
.27a8	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.27aa	20 27 15	jsr $1527		jsr	errorHandler
.27ad					_LVRNotMode0:
.27ad	e0 01		cpx #$01			cpx 	#1
.27af	d0 15		bne $27c6			bne 	_LVRNotMode1
.27b1	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.27b3	c9 40		cmp #$40			cmp 	#$40
.27b5	90 a3		bcc $275a			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.27b7					_LVRRLEGroup:
.27b7	29 3f		and #$3f			and 	#$3F
.27b9	aa		tax				tax
.27ba	20 ca 27	jsr $27ca			jsr 	LVFGet
.27bd					_LVRLEGroupLoop:
.27bd	8d 23 9f	sta $9f23			sta 	X16VeraData0
.27c0	ca		dex				dex
.27c1	d0 fa		bne $27bd			bne 	_LVRLEGroupLoop
.27c3	4c f0 26	jmp $26f0			jmp 	_LVRLoop
.27c6					_LVRNotMode1:
>27c6	db						.byte 	$DB
.27c7	4c c6 27	jmp $27c6			jmp 	_LVRNotMode1
.27ca	84 32		sty $32		LVFGet:	sty 	tempShort
.27cc	a0 00		ldy #$00			ldy 	#0
.27ce	b1 2a		lda ($2a),y			lda 	(temp0),y
.27d0	a4 32		ldy $32				ldy	 	tempShort
.27d2	e6 2a		inc $2a				inc 	temp0
.27d4	d0 02		bne $27d8			bne 	_LVFGExit
.27d6	e6 2b		inc $2b				inc 	temp0+1
.27d8					_LVFGExit:
.27d8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.27d9					section_end_extension:
.27d9					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.27d9					floatingpointHandler:
.27d9	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.27db	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: basic.asm

.27de					section_end_floatingpoint:
.27de					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.27de					ColdStartEntry:
.27de	a2 ff		ldx #$ff			ldx 	#$FF
.27e0	9a		txs				txs
.27e1	20 6a 28	jsr $286a			jsr 	ForceStandardMode
.27e4	a2 02		ldx #$02		ldx	#2
.27e6	20 05 15	jsr $1505		jsr	deviceHandler
.27e9	a0 ff		ldy #$ff			ldy 	#255
.27eb					_CSBanner:
.27eb	c8		iny				iny
.27ec	b9 12 28	lda $2812,y			lda 	Intro,y
.27ef	f0 14		beq $2805			beq 	_CSStart
.27f1	c9 08		cmp #$08			cmp 	#8
.27f3	90 08		bcc $27fd			bcc 	_CSInk
.27f5	a2 14		ldx #$14		ldx	#20
.27f7	20 05 15	jsr $1505		jsr	deviceHandler
.27fa	4c eb 27	jmp $27eb			jmp 	_CSBanner
.27fd					_CSInk:
.27fd	a2 06		ldx #$06		ldx	#6
.27ff	20 05 15	jsr $1505		jsr	deviceHandler
.2802	4c eb 27	jmp $27eb			jmp 	_CSBanner
.2805					_CSStart:
.2805	a2 16		ldx #$16		ldx	#22
.2807	20 24 40	jsr $4024		jsr	mainHandler
.280a	a2 06		ldx #$06		ldx	#6
.280c	20 24 40	jsr $4024		jsr	mainHandler
.280f	4c 2a 29	jmp $292a			jmp 	WarmStartEntry
>2812	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>281a	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>282a	20 2a 2a 2a 0d 0d
>2830	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>2838	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>2848	32 30 32 31 0d 0d
>284e	02 42 61 73 69 63 20				.text 	2,"Basic "
>2855	30 2e 33 31					.text "0.31"
>2859	20 28						.text 	" ("
>285b	30 39 2d 41 70 72 2d 32				.text "09-Apr-2021"
>2863	30 32 31
>2866	29 0d 0d 00					.text 	")",13,13,0
.286a					ForceStandardMode:
.286a	a9 fe		lda #$fe			lda 	#$FE
.286c	20 74 18	jsr $1874		jsr	extensionHandler
.286f	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2870					DeleteLine:
.2870	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2873	85 2a		sta $2a				sta 	temp0
.2875	ad c9 0a	lda $0ac9			lda 	basePage+1
.2878	85 2b		sta $2b				sta 	temp0+1
.287a	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.287c	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.287e	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2880	d0 07		bne $2889			bne 	_DLNext
.2882	c8		iny				iny
.2883	a5 a0		lda $a0				lda 	esInt1
.2885	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2887	f0 06		beq $288f			beq 	_DLFound
.2889	20 ad 28	jsr $28ad	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.288c	d0 ec		bne $287a			bne 	_DLLoop
.288e	60		rts				rts
.288f					_DLFound:
.288f	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2891	b1 2a		lda ($2a),y			lda 	(temp0),y
.2893	a8		tay				tay 								; so we copy from (temp0),y
.2894	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2896					_DLCopyDown:
.2896	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2898	81 2a		sta ($2a,x)			sta 	(temp0,x)
.289a	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.289c	d0 02		bne $28a0			bne 	_DLNoCarry
.289e	e6 2b		inc $2b				inc 	temp0+1
.28a0					_DLNoCarry:
.28a0	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.28a2	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.28a4	d0 f0		bne $2896			bne 	_DLCopyDown
.28a6	a5 2b		lda $2b				lda 	temp0+1
.28a8	c5 36		cmp $36				cmp 	lowMemory+1
.28aa	d0 ea		bne $2896			bne 	_DLCopyDown
.28ac	60		rts				rts
.28ad					IAdvanceTemp0:
.28ad	84 32		sty $32				sty 	tempShort
.28af	18		clc				clc
.28b0	a0 00		ldy #$00			ldy 	#0 							; get offset
.28b2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.28b4	65 2a		adc $2a				adc 	temp0
.28b6	85 2a		sta $2a				sta 	temp0
.28b8	90 02		bcc $28bc			bcc 	_IATNoCarry
.28ba	e6 2b		inc $2b				inc 	temp0+1
.28bc					_IATNoCarry:
.28bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.28be	a4 32		ldy $32				ldy 	tempShort
.28c0	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.28c2	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.28c3					InsertLine:
.28c3	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.28c6	85 2a		sta $2a				sta 	temp0
.28c8	ad c9 0a	lda $0ac9			lda 	basePage+1
.28cb	85 2b		sta $2b				sta 	temp0+1
.28cd					_ILLoop:
.28cd	a0 01		ldy #$01			ldy 	#1
.28cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.28d1	c5 98		cmp $98				cmp 	esInt0
.28d3	c8		iny				iny
.28d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.28d6	e5 a0		sbc $a0				sbc 	esInt1
.28d8	b0 05		bcs $28df			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.28da	20 ad 28	jsr $28ad			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.28dd	d0 ee		bne $28cd			bne 	_ILLoop
.28df					_ILFound:
.28df	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.28e1	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.28e3	a5 36		lda $36				lda 	lowMemory+1
.28e5	85 2d		sta $2d				sta 	temp1+1
.28e7	ad da 0e	lda $0eda			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.28ea	18		clc				clc 								; add 3 for the line number and offset.
.28eb	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.28ed	a8		tay				tay
.28ee	a2 00		ldx #$00			ldx 	#0
.28f0	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.28f2	91 2c		sta ($2c),y			sta 	(temp1),y
.28f4	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.28f6	c5 2a		cmp $2a				cmp 	temp0
.28f8	d0 06		bne $2900			bne 	_ILMNext
.28fa	a5 2d		lda $2d				lda 	temp1+1
.28fc	c5 2b		cmp $2b				cmp 	temp0+1
.28fe	f0 0b		beq $290b			beq 	_ILMCopy
.2900					_ILMNext:
.2900	a5 2c		lda $2c				lda 	temp1
.2902	d0 02		bne $2906			bne 	_ILNoBorrow
.2904	c6 2d		dec $2d				dec 	temp1+1
.2906					_ILNoBorrow:
.2906	c6 2c		dec $2c				dec 	temp1
.2908	4c f0 28	jmp $28f0			jmp 	_ILMove 					; and go round again
.290b					_ILMCopy:
.290b	98		tya				tya 								; Y is the offset of the new line.
.290c	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.290e	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2910	a5 98		lda $98				lda 	esInt0
.2912	91 2a		sta ($2a),y			sta 	(temp0),y
.2914	c8		iny				iny
.2915	a5 a0		lda $a0				lda 	esInt1
.2917	91 2a		sta ($2a),y			sta 	(temp0),y
.2919	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.291b					_ILMCopy2:
.291b	b1 28		lda ($28),y			lda 	(codePtr),y
.291d	c8		iny				iny
.291e	c8		iny				iny
.291f	c8		iny				iny
.2920	91 2a		sta ($2a),y			sta 	(temp0),y
.2922	88		dey				dey
.2923	88		dey				dey
.2924	cc da 0e	cpy $0eda			cpy 	tokenBufferIndex
.2927	d0 f2		bne $291b			bne 	_ILMCopy2
.2929	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.292a					WarmStartEntry:
.292a	a2 ff		ldx #$ff			ldx 	#$FF
.292c	9a		txs				txs
.292d	20 6a 28	jsr $286a			jsr 	ForceStandardMode
.2930	a9 02		lda #$02			lda 	#2							; green text.
.2932	a2 06		ldx #$06		ldx	#6
.2934	20 05 15	jsr $1505		jsr	deviceHandler
.2937	a2 0a		ldx #$0a		ldx	#10
.2939	20 05 15	jsr $1505		jsr	deviceHandler
.293c	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.293e	85 28		sta $28				sta 	codePtr
.2940	a5 2b		lda $2b				lda 	temp0+1
.2942	85 29		sta $29				sta 	codePtr+1
.2944	a2 04		ldx #$04		ldx	#4
.2946	20 05 15	jsr $1505		jsr	deviceHandler
.2949	a2 08		ldx #$08		ldx	#8
.294b	20 57 4b	jsr $4b57		jsr	tokeniserHandler
.294e	c9 00		cmp #$00			cmp 	#0
.2950	f0 25		beq $2977			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2952	a9 d7		lda #$d7			lda 	#(tokenHeader) & $FF
.2954	85 28		sta $28				sta 	codePtr
.2956	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.2958	85 29		sta $29				sta 	1+(codePtr)
.295a	ad da 0d	lda $0dda			lda 	tokenBuffer 				; is it a blank line, go get another line.
.295d	c9 80		cmp #$80			cmp 	#$80
.295f	f0 c9		beq $292a			beq 	WarmStartEntry
.2961	29 c0		and #$c0			and 	#$C0						; does it start with a number
.2963	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.2965	f0 15		beq $297c			beq 	HasLineNumber
.2967	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2969	8d d7 0d	sta $0dd7			sta 	tokenHeader 				; fake program line.
.296c	8d d8 0d	sta $0dd8			sta 	tokenHeader+1
.296f	8d d9 0d	sta $0dd9			sta 	tokenHeader+2
.2972	a2 18		ldx #$18		ldx	#24
.2974	20 24 40	jsr $4024		jsr	mainHandler
.2977					WSEError:
.2977	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2979	20 27 15	jsr $1527		jsr	errorHandler
.297c					HasLineNumber:
.297c	a0 03		ldy #$03			ldy 	#3 							; get line number
.297e	a9 00		lda #$00			lda 	#0
.2980	a2 0a		ldx #$0a		ldx	#10
.2982	20 24 40	jsr $4024		jsr	mainHandler
.2985	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.2987	05 b0		ora $b0				ora 	esInt3
.2989	d0 ec		bne $2977			bne 	WSEError
.298b	98		tya				tya 								; make codePtr point to code after the line number.
.298c	18		clc				clc 								; by skipping over the tokenised number.
.298d	65 28		adc $28				adc 	codePtr
.298f	85 28		sta $28				sta 	codePtr
.2991	90 02		bcc $2995			bcc		_HLNNoCarry
.2993	e6 29		inc $29				inc 	codePtr+1
.2995					_HLNNoCarry:
.2995	98		tya				tya 								; subtract that offset from the code buffer index
.2996	38		sec				sec
.2997	49 ff		eor #$ff			eor 	#$FF
.2999	6d da 0e	adc $0eda			adc 	tokenBufferIndex
.299c	18		clc				clc 								; add space allowing for header & $80 trailer
.299d	69 04		adc #$04			adc 	#4
.299f	8d da 0e	sta $0eda			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.29a2	20 70 28	jsr $2870			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.29a5					_HLNNoDelete:
.29a5	ad da 0e	lda $0eda			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.29a8	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.29aa	f0 0c		beq $29b8			beq 	_HLMEditDone
.29ac	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.29ae	18		clc				clc 								; workspace (1k)
.29af	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.29b1	c5 34		cmp $34				cmp 	highMemory+1
.29b3	b0 0b		bcs $29c0			bcs 	_HLMMemory 					; nope, won't allowit.
.29b5	20 c3 28	jsr $28c3			jsr 	InsertLine 					; insert the line in
.29b8					_HLMEditDone:
.29b8	a2 06		ldx #$06		ldx	#6
.29ba	20 24 40	jsr $4024		jsr	mainHandler
.29bd	4c 2a 29	jmp $292a			jmp 	WarmStartEntry
.29c0					_HLMMemory:
.29c0	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.29c2	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.29c5					interactionHandler:
.29c5	7c c8 29	jmp ($29c8,x)			jmp 	(interactionVectors,x)
.29c8					interactionVectors:
>29c8	ce 29					.word _DummyControlHandler ; index 0
>29ca	de 27					.word ColdStartEntry       ; index 2
>29cc	2a 29					.word WarmStartEntry       ; index 4
.29ce					_DummyControlHandler:
.29ce	60		rts			rts

;******  Return to file: basic.asm

.29cf					section_end_interaction:
.29cf					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d9d					dataPtr:
>0d9d							.fill 	2
.0d9f					dataIndex:
>0d9f							.fill 	1
.29cf					CommandRead:
.29cf	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.29d1	20 f2 38	jsr $38f2			jsr 	EvaluateReference
.29d4	20 15 2a	jsr $2a15			jsr 	SwapDPCP 					; use the data pointer.
.29d7	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.29d9	c8		iny				iny
.29da	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.29dc	f0 07		beq $29e5			beq 	_CRInData
.29de	88		dey				dey
.29df	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.29e1	aa		tax				tax
.29e2	20 f2 30	jsr $30f2			jsr 	ScanForward
.29e5					_CRInData:
.29e5	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.29e7	20 9a 38	jsr $389a			jsr 	Evaluate
.29ea	ca		dex				dex 								; and write the value.
.29eb	20 5d 2c	jsr $2c5d			jsr 	WriteValue
.29ee	20 15 2a	jsr $2a15			jsr 	SwapDPCP 					; get the code pointer back.
.29f1	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.29f3	c8		iny				iny
.29f4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.29f6	f0 d7		beq $29cf			beq 	CommandRead
.29f8	88		dey				dey
.29f9	60		rts				rts
.29fa					CommandData:
.29fa	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.29fc	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.29fe	20 f2 30	jsr $30f2			jsr 	ScanForward
.2a01	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2a02	60		rts				rts
.2a03					CommandRestore:
.2a03	ad c8 0a	lda $0ac8			lda 	basePage
.2a06	8d 9d 0d	sta $0d9d			sta 	dataPtr
.2a09	ad c9 0a	lda $0ac9			lda 	basePage+1
.2a0c	8d 9e 0d	sta $0d9e			sta 	dataPtr+1
.2a0f	a9 03		lda #$03			lda 	#3
.2a11	8d 9f 0d	sta $0d9f			sta 	dataIndex
.2a14	60		rts				rts
.2a15					SwapDPCP:
.2a15	da		phx				phx
.2a16	98		tya				tya 								; swap Y, DataIndex
.2a17	ac 9f 0d	ldy $0d9f			ldy 	DataIndex
.2a1a	8d 9f 0d	sta $0d9f			sta 	DataIndex
.2a1d	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2a1f	ae 9d 0d	ldx $0d9d			ldx 	dataptr
.2a22	8d 9d 0d	sta $0d9d			sta 	dataPtr
.2a25	86 28		stx $28				stx 	codePtr
.2a27	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2a29	ae 9e 0d	ldx $0d9e			ldx 	dataptr+1
.2a2c	8d 9e 0d	sta $0d9e			sta 	dataPtr+1
.2a2f	86 29		stx $29				stx 	codePtr+1
.2a31	fa		plx				plx
.2a32	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.2a33					CommandGOSUB:
.2a33	20 b7 38	jsr $38b7			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2a36	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2a38	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2a3a	20 d1 3f	jsr $3fd1			jsr 	RSClaim
.2a3d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2a3f	20 fd 3f	jsr $3ffd			jsr 	RSSavePosition
.2a42	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.2a44	f0 1b		beq $2a61			beq 	GotoTOS 					; and do a GOTO there.
.2a46					CommandRETURN:
.2a46	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a48	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a4a	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2a4c	f0 05		beq $2a53			beq 	_isok
.2a4e	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2a50	20 27 15	jsr $1527		jsr	errorHandler
.2a53					_isok:
.2a53	a9 01		lda #$01			lda 	#1
.2a55	20 10 40	jsr $4010			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2a58	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2a5a	20 f3 3f	jsr $3ff3			jsr 	RSFree
.2a5d	60		rts				rts
.2a5e					CommandGOTO:
.2a5e	20 b7 38	jsr $38b7			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2a61					GotoTOS:
.2a61	20 db 33	jsr $33db			jsr 	ResetCodeAddress 			; simple search.
.2a64					_GotoSearch:
.2a64	a0 00		ldy #$00			ldy 	#0 							; get offset
.2a66	b1 28		lda ($28),y			lda 	(codePtr),y
.2a68	f0 21		beq $2a8b			beq 	_GotoError 					; not found.
.2a6a	c8		iny				iny									; check LSB match
.2a6b	b1 28		lda ($28),y			lda 	(codePtr),y
.2a6d	d5 98		cmp $98,x			cmp 	esInt0,x
.2a6f	d0 07		bne $2a78			bne 	_GotoNext
.2a71	c8		iny				iny
.2a72	b1 28		lda ($28),y			lda 	(codePtr),y
.2a74	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2a76	f0 10		beq $2a88			beq 	_GotoFound
.2a78					_GotoNext:
.2a78	a0 00		ldy #$00			ldy 	#0 							; go next line
.2a7a	b1 28		lda ($28),y			lda 	(codePtr),y
.2a7c	18		clc				clc
.2a7d	65 28		adc $28				adc 	codePtr
.2a7f	85 28		sta $28				sta 	codePtr
.2a81	90 e1		bcc $2a64			bcc 	_GotoSearch
.2a83	e6 29		inc $29				inc 	codePtr+1
.2a85	4c 64 2a	jmp $2a64			jmp 	_GotoSearch
.2a88					_GotoFound:
.2a88	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2a8a	60		rts				rts
.2a8b					_GotoError:
.2a8b	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2a8d	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0da0					InputBuffer:
>0da0							.fill 	MaxInputSize+1
.2a90					Command_Input:
.2a90	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2a92	c8		iny				iny
.2a93	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2a95	f0 f9		beq $2a90			beq 	Command_Input
.2a97	88		dey				dey 							; undo consume
.2a98	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2a9a	f0 52		beq $2aee			beq 	_CIExit 				; : or EOL, exit
.2a9c	c9 80		cmp #$80			cmp 	#TOK_EOL
.2a9e	f0 4e		beq $2aee			beq 	_CIExit
.2aa0	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2aa2	90 12		bcc $2ab6			bcc 	_CIVariable
.2aa4	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2aa6	d0 41		bne $2ae9			bne 	_CISyntax
.2aa8	a2 00		ldx #$00			ldx 	#0
.2aaa	20 ae 38	jsr $38ae			jsr 	EvaluateString 			; evaluate and print string
.2aad	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0
.2ab0	20 bd 2b	jsr $2bbd			jsr 	PrintString
.2ab3	4c 90 2a	jmp $2a90			jmp 	Command_Input
.2ab6					_CIVariable:
.2ab6	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2ab8	20 f2 38	jsr $38f2			jsr 	EvaluateReference  		; this is where its going
.2abb					_CIRetry:
.2abb	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2abd	a2 12		ldx #$12		ldx	#18
.2abf	20 05 15	jsr $1505		jsr	deviceHandler
.2ac2	5a		phy				phy
.2ac3	20 02 2b	jsr $2b02			jsr 	InputString 			; input a string (manually)
.2ac6	a2 01		ldx #$01			ldx 	#1
.2ac8	20 ef 2a	jsr $2aef			jsr 	BufferToStackX 			; make stack,x ref input string.
.2acb	a5 90		lda $90				lda 	esType 					; if target type numeric
.2acd	29 40		and #$40			and 	#$40 					; then convert to number
.2acf	d0 10		bne $2ae1			bne 	_CIWrite
.2ad1	a2 01		ldx #$01			ldx 	#1
.2ad3	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2ad6	a9 0a		lda #$0a			lda 	#10
.2ad8	20 ab 3d	jsr $3dab			jsr 	MInt32FromString 		; convert it back from a string.
.2adb	7a		ply				ply
.2adc	b0 03		bcs $2ae1			bcs 	_CIWrite 				; successfully converted.
.2ade	18		clc				clc 							; default fail FP conversion
.2adf	90 da		bcc $2abb			bcc		_CIRetry				; failed, try again.
.2ae1					_CIWrite:
.2ae1	a2 00		ldx #$00			ldx 	#0
.2ae3	20 5d 2c	jsr $2c5d			jsr 	WriteValue
.2ae6	4c 90 2a	jmp $2a90			jmp 	Command_Input
.2ae9					_CISyntax:
.2ae9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2aeb	20 27 15	jsr $1527		jsr	errorHandler
.2aee					_CIExit:
.2aee	60		rts				rts
.2aef					BufferToStackX:
.2aef	a9 a0		lda #$a0			lda 	#InputBuffer & $FF
.2af1	95 98		sta $98,x			sta 	esInt0,x
.2af3	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.2af5	95 a0		sta $a0,x			sta 	esInt1,x
.2af7	a9 00		lda #$00			lda 	#0
.2af9	95 a8		sta $a8,x			sta 	esInt2,x
.2afb	95 b0		sta $b0,x			sta 	esInt3,x
.2afd	a9 40		lda #$40			lda 	#$40
.2aff	95 90		sta $90,x			sta 	esType,x
.2b01	60		rts				rts
.2b02					InputString:
.2b02	a9 00		lda #$00			lda 	#0
.2b04	8d a0 0d	sta $0da0			sta 	InputBuffer
.2b07					_InputLoop:
.2b07	a2 18		ldx #$18		ldx	#24
.2b09	20 05 15	jsr $1505		jsr	deviceHandler
.2b0c	a2 08		ldx #$08		ldx	#8
.2b0e	20 05 15	jsr $1505		jsr	deviceHandler
.2b11	c9 00		cmp #$00			cmp 	#0
.2b13	f0 f2		beq $2b07			beq 	_InputLoop
.2b15	c9 08		cmp #$08			cmp 	#8
.2b17	f0 19		beq $2b32			beq 	_InputBackspace
.2b19	c9 0d		cmp #$0d			cmp 	#13
.2b1b	f0 21		beq $2b3e			beq 	_InputExit
.2b1d	ae a0 0d	ldx $0da0			ldx 	InputBuffer
.2b20	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2b22	f0 e3		beq $2b07			beq 	_InputLoop
.2b24	9d a1 0d	sta $0da1,x			sta 	InputBuffer+1,x 		; write char
.2b27	ee a0 0d	inc $0da0			inc 	InputBuffer 			; advance count.
.2b2a					_InputPrintLoop:
.2b2a	a2 12		ldx #$12		ldx	#18
.2b2c	20 05 15	jsr $1505		jsr	deviceHandler
.2b2f	4c 07 2b	jmp $2b07			jmp	 	_InputLoop
.2b32					_InputBackspace:
.2b32	ad a0 0d	lda $0da0			lda 	InputBuffer 			; at start
.2b35	f0 d0		beq $2b07			beq 	_InputLoop
.2b37	ce a0 0d	dec $0da0			dec 	InputBuffer
.2b3a	a9 08		lda #$08			lda 	#8
.2b3c	d0 ec		bne $2b2a			bne 	_InputPrintLoop
.2b3e					_InputExit:
.2b3e	a2 04		ldx #$04		ldx	#4
.2b40	20 05 15	jsr $1505		jsr	deviceHandler
.2b43	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0dc1					lastPrintToken:
>0dc1							.fill 	1
.2b44					Command_Print:
.2b44	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2b46	8d c1 0d	sta $0dc1			sta 	lastPrintToken
.2b49	88		dey				dey
.2b4a					_PrintLoopSkip:
.2b4a	c8		iny				iny
.2b4b					_PrintLoop:
.2b4b	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2b4d	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2b4f	f0 5b		beq $2bac			beq 	_PrintExit
.2b51	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2b53	f0 57		beq $2bac			beq 	_PrintExit
.2b55	8d c1 0d	sta $0dc1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2b58	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2b5a	f0 ee		beq $2b4a			beq 	_PrintLoopSkip
.2b5c	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2b5e	f0 3c		beq $2b9c			beq	 	_PrintNewLine
.2b60	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2b62	f0 40		beq $2ba4			beq 	_PrintTab
.2b64	20 98 38	jsr $3898			jsr 	EvaluateRoot 				; evaluate something at the root
.2b67	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2b69	85 2a		sta $2a				sta 	temp0
.2b6b	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2b6d	85 2b		sta $2b				sta 	1+(temp0)
.2b6f	a5 90		lda $90				lda 	esType 						; get type
.2b71	f0 15		beq $2b88			beq		_PrintInteger
.2b73	4a		lsr a				lsr 	a 							; check for floating point
.2b74	b0 08		bcs $2b7e			bcs 	_PrintFloat
.2b76					_PrintString:
.2b76	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2b78	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0
.2b7b	4c 96 2b	jmp $2b96			jmp 	_PrintTemp0 				; print no leading space.
.2b7e					_PrintFloat:
.2b7e	a9 00		lda #$00			lda 	#0 							; stack level.
.2b80	a2 16		ldx #$16		ldx	#22
.2b82	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.2b85	4c 8f 2b	jmp $2b8f			jmp 	_PrintSpaceTemp0
.2b88					_PrintInteger:
.2b88	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2b8a	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2b8c	20 90 3e	jsr $3e90			jsr 	MInt32ToString				; convert to text
.2b8f					_PrintSpaceTemp0:
.2b8f	a9 20		lda #$20			lda 	#32
.2b91	a2 12		ldx #$12		ldx	#18
.2b93	20 05 15	jsr $1505		jsr	deviceHandler
.2b96					_PrintTemp0:
.2b96	20 bd 2b	jsr $2bbd			jsr 	PrintString
.2b99	4c 4b 2b	jmp $2b4b			jmp 	_PrintLoop
.2b9c					_PrintNewLine:
.2b9c	a2 04		ldx #$04		ldx	#4
.2b9e	20 05 15	jsr $1505		jsr	deviceHandler
.2ba1	4c 4a 2b	jmp $2b4a			jmp 	_PrintLoopSkip
.2ba4					_PrintTab:
.2ba4	a2 1a		ldx #$1a		ldx	#26
.2ba6	20 05 15	jsr $1505		jsr	deviceHandler
.2ba9	4c 4a 2b	jmp $2b4a			jmp 	_PrintLoopSkip
.2bac					_PrintExit:
.2bac	ad c1 0d	lda $0dc1			lda		lastPrintToken 				; check last token
.2baf	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2bb1	f0 09		beq $2bbc			beq 	_PrintExit2
.2bb3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2bb5	f0 05		beq $2bbc			beq 	_PrintExit2
.2bb7	a2 04		ldx #$04		ldx	#4
.2bb9	20 05 15	jsr $1505		jsr	deviceHandler
.2bbc					_PrintExit2:
.2bbc	60		rts				rts
.2bbd					PrintString:
.2bbd	da		phx				phx
.2bbe	5a		phy				phy
.2bbf	a0 00		ldy #$00			ldy 	#0							; get length
.2bc1	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bc3	aa		tax				tax 								; into X
.2bc4	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2bc6	f0 0e		beq $2bd6			beq 	_PSExit
.2bc8	ca		dex				dex
.2bc9	da		phx				phx
.2bca	c8		iny				iny
.2bcb	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bcd	a2 12		ldx #$12		ldx	#18
.2bcf	20 05 15	jsr $1505		jsr	deviceHandler
.2bd2	fa		plx				plx
.2bd3	4c c4 2b	jmp $2bc4			jmp 	_PSLoop
.2bd6					_PSExit:
.2bd6	7a		ply				ply
.2bd7	fa		plx				plx
.2bd8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2bd9					Command_CLS:
.2bd9	a2 02		ldx #$02		ldx	#2
.2bdb	20 05 15	jsr $1505		jsr	deviceHandler
.2bde	60		rts				rts
.2bdf					Command_Ink:
.2bdf	a2 00		ldx #$00			ldx 	#0
.2be1	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger
.2be4	a2 06		ldx #$06		ldx	#6
.2be6	20 05 15	jsr $1505		jsr	deviceHandler
.2be9	60		rts				rts
.2bea					Command_Paper:
.2bea	a2 00		ldx #$00			ldx 	#0
.2bec	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger
.2bef	a2 10		ldx #$10		ldx	#16
.2bf1	20 05 15	jsr $1505		jsr	deviceHandler
.2bf4	60		rts				rts
.2bf5					Command_Locate:
.2bf5	a2 00		ldx #$00			ldx 	#0
.2bf7	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger
.2bfa	20 b6 3f	jsr $3fb6			jsr 	CheckComma
.2bfd	e8		inx				inx
.2bfe	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger
.2c01	5a		phy				phy
.2c02	a4 99		ldy $99				ldy 	esInt0+1
.2c04	a5 98		lda $98				lda 	esInt0
.2c06	a2 0e		ldx #$0e		ldx	#14
.2c08	20 05 15	jsr $1505		jsr	deviceHandler
.2c0b	7a		ply				ply
.2c0c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2c0d					Command_VDU:
.2c0d	20 b7 38	jsr $38b7			jsr 	EvaluateRootInteger 			; get integer at root.
.2c10	a5 98		lda $98				lda 	esInt0
.2c12	a2 12		ldx #$12		ldx	#18
.2c14	20 05 15	jsr $1505		jsr	deviceHandler
.2c17					_CVNext:
.2c17	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2c19	c8		iny				iny
.2c1a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2c1c	f0 ef		beq $2c0d			beq 	Command_VDU
.2c1e	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2c20	d0 0a		bne $2c2c			bne 	_CVExit
.2c22	a5 a0		lda $a0				lda 	esInt1
.2c24	a2 12		ldx #$12		ldx	#18
.2c26	20 05 15	jsr $1505		jsr	deviceHandler
.2c29	4c 17 2c	jmp $2c17			jmp 	_CVNext
.2c2c	88		dey		_CVExit:dey
.2c2d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2c2e					Command_Assert:
.2c2e	20 b7 38	jsr $38b7			jsr 	EvaluateRootInteger 		; what is being asserted.
.2c31	20 5f 3f	jsr $3f5f			jsr 	MInt32Zero 					; is it true ?
.2c34	f0 01		beq $2c37			beq 	_CAError
.2c36	60		rts				rts
.2c37					_CAError:
.2c37	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2c39	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2c3c					Command_Dim:
.2c3c	a2 04		ldx #$04		ldx	#4
.2c3e	20 16 4f	jsr $4f16		jsr	variableHandler
.2c41	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2c43	c8		iny				iny
.2c44	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2c46	f0 f4		beq $2c3c			beq 	Command_Dim
.2c48	88		dey				dey 								; unpick get
.2c49	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2c4a					CommandLet:
.2c4a	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2c4c	20 f2 38	jsr $38f2			jsr 	EvaluateReference
.2c4f	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2c51	20 9e 3f	jsr $3f9e			jsr 	CheckToken
.2c54	e8		inx				inx 								; do RHS
.2c55	20 9a 38	jsr $389a			jsr 	Evaluate 					; evaluate and dereference
.2c58	ca		dex				dex
.2c59	20 5d 2c	jsr $2c5d			jsr 	WriteValue 					; write it out
.2c5c	60		rts				rts
.2c5d					WriteValue:
.2c5d	5a		phy				phy
.2c5e	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2c61	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2c63	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2c65	29 40		and #$40			and 	#$40
.2c67	d0 4f		bne $2cb8			bne		_WVType
.2c69	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2c6b	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2c6d	29 40		and #$40			and 	#$40
.2c6f	d0 1f		bne $2c90			bne 	_WVCopyString
.2c71	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2c73	15 91		ora $91,x			ora 	esType+1,x
.2c75	4a		lsr a				lsr 	a
.2c76	90 22		bcc $2c9a			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2c78	b5 90		lda $90,x			lda 	esType,x
.2c7a	4a		lsr a				lsr 	a
.2c7b	90 3b		bcc $2cb8			bcc 	_WVType
.2c7d	e8		inx				inx 								; force the value being written to be a float.
.2c7e	20 fe 34	jsr $34fe			jsr 	BPMakeFloat
.2c81	ca		dex				dex
.2c82	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0 					; set Temp0 to write address
.2c85	e8		inx				inx
.2c86	8a		txa				txa
.2c87	a2 22		ldx #$22		ldx	#34
.2c89	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.2c8c	aa		tax				tax
.2c8d	4c b6 2c	jmp $2cb6			jmp 	_WVCopyExit
.2c90					_WVCopyString:
.2c90	8a		txa				txa
.2c91	a2 10		ldx #$10		ldx	#16
.2c93	20 cf 42	jsr $42cf		jsr	stringHandler
.2c96	aa		tax				tax
.2c97	4c b6 2c	jmp $2cb6			jmp 	_WVCopyExit
.2c9a					_WVCopyData4:
.2c9a	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2c9c	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2c9e	d0 10		bne $2cb0			bne 	_WVCopyData1
.2ca0	a0 03		ldy #$03			ldy 	#3
.2ca2	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2ca4	91 2a		sta ($2a),y			sta 	(temp0),y
.2ca6	88		dey				dey
.2ca7	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2ca9	91 2a		sta ($2a),y			sta 	(temp0),y
.2cab	88		dey				dey
.2cac	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2cae	91 2a		sta ($2a),y			sta 	(temp0),y
.2cb0					_WVCopyData1:
.2cb0	a0 00		ldy #$00			ldy 	#0
.2cb2	b5 99		lda $99,x			lda 	esInt0+1,x
.2cb4	91 2a		sta ($2a),y			sta 	(temp0),y
.2cb6					_WVCopyExit:
.2cb6	7a		ply				ply
.2cb7	60		rts				rts
.2cb8					_WVType:
.2cb8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2cba	20 27 15	jsr $1527		jsr	errorHandler
.2cbd					TOSToTemp0:
.2cbd	b5 98		lda $98,x			lda 	esInt0,x
.2cbf	85 2a		sta $2a				sta 	temp0
.2cc1	b5 a0		lda $a0,x			lda 	esInt1,x
.2cc3	85 2b		sta $2b				sta 	temp0+1
.2cc5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2cc6					Command_Poke:
.2cc6	a9 01		lda #$01			lda 	#1
.2cc8	d0 06		bne $2cd0			bne 	PokeGeneral
.2cca					Command_Doke:
.2cca	a9 02		lda #$02			lda 	#2
.2ccc	d0 02		bne $2cd0			bne 	PokeGeneral
.2cce					Command_Loke:
.2cce	a9 03		lda #$03			lda 	#3
.2cd0					PokeGeneral:
.2cd0	48		pha				pha 								; save id (PDL = 123)
.2cd1	20 b7 38	jsr $38b7			jsr 	EvaluateRootInteger 		; target address
.2cd4	20 b6 3f	jsr $3fb6			jsr	 	CheckComma
.2cd7	e8		inx				inx
.2cd8	20 b9 38	jsr $38b9			jsr 	EvaluateInteger 			; what value to POKE ?
.2cdb	ca		dex				dex
.2cdc	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0 					; temp0 points to the target address
.2cdf	84 32		sty $32				sty 	tempShort 					; save Y
.2ce1	68		pla				pla 								; get copy type (1-3) and dispatch
.2ce2	aa		tax				tax
.2ce3	ca		dex				dex
.2ce4	f0 14		beq $2cfa			beq 	_Poke1
.2ce6	ca		dex				dex
.2ce7	f0 0b		beq $2cf4			beq 	_Poke2
.2ce9	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2ceb	a5 b1		lda $b1				lda 	esInt3+1
.2ced	91 2a		sta ($2a),y			sta 	(temp0),y
.2cef	88		dey				dey
.2cf0	a5 a9		lda $a9				lda 	esInt2+1
.2cf2	91 2a		sta ($2a),y			sta 	(temp0),y
.2cf4					_Poke2:
.2cf4	a0 01		ldy #$01			ldy 	#1
.2cf6	a5 a1		lda $a1				lda 	esInt1+1
.2cf8	91 2a		sta ($2a),y			sta 	(temp0),y
.2cfa					_Poke1:
.2cfa	a0 00		ldy #$00			ldy 	#0
.2cfc	a5 99		lda $99				lda 	esInt0+1
.2cfe	91 2a		sta ($2a),y			sta 	(temp0),y
.2d00	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2d02	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2d03					Command_Rem:
.2d03					Command_Rem2:
.2d03	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2d05	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2d07	d0 06		bne $2d0f			bne 	_CRNotString
.2d09	c8		iny				iny
.2d0a	98		tya				tya
.2d0b	38		sec				sec
.2d0c	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2d0e	a8		tay				tay
.2d0f					_CRNotString:
.2d0f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2d10					CommandStop:
.2d10	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2d12	20 27 15	jsr $1527		jsr	errorHandler
.2d15					CommandEnd:
.2d15	4c 1f 40	jmp $401f			jmp 	WarmStart
.2d18					CommandXemu:
.2d18	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2d1b					AdvanceNextLine:
.2d1b	a0 00		ldy #$00			ldy 	#0 							; get offset
.2d1d	b1 28		lda ($28),y			lda 	(codePtr),y
.2d1f	18		clc				clc 								; add to codePtr
.2d20	65 28		adc $28				adc 	codePtr
.2d22	85 28		sta $28				sta 	codePtr
.2d24	90 02		bcc $2d28			bcc 	_ANLNoCarry
.2d26	e6 29		inc $29				inc 	codePtr+1
.2d28					_ANLNoCarry:
.2d28	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2d2a	f0 e9		beq $2d15			beq 	CommandEnd 					; execute END
.2d2c	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2d2e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2d2f					Command_FOR:
.2d2f	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2d31	a2 0b		ldx #$0b			ldx 	#11
.2d33	20 d1 3f	jsr $3fd1			jsr 	RSClaim
.2d36	20 4a 2c	jsr $2c4a			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2d39	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2d3b	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2d3d	d0 48		bne $2d87			bne 	_CFType
.2d3f	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2d41	20 9e 3f	jsr $3f9e			jsr 	CheckToken
.2d44	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2d46	20 b9 38	jsr $38b9			jsr 	EvaluateInteger				; get terminal value in stack 1
.2d49	5a		phy				phy
.2d4a	a0 04		ldy #$04			ldy 	#4
.2d4c	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2d4e	91 37		sta ($37),y			sta 	(rsPointer),y
.2d50	c8		iny				iny
.2d51	a5 a0		lda $a0				lda		esInt1
.2d53	91 37		sta ($37),y			sta 	(rsPointer),y
.2d55	c8		iny				iny
.2d56	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2d58	91 37		sta ($37),y			sta 	(rsPointer),y
.2d5a	c8		iny				iny
.2d5b	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2d5d	91 37		sta ($37),y			sta 	(rsPointer),y
.2d5f	c8		iny				iny
.2d60	a5 a1		lda $a1				lda		esInt1+1
.2d62	91 37		sta ($37),y			sta 	(rsPointer),y
.2d64	c8		iny				iny
.2d65	a5 a9		lda $a9				lda		esInt2+1
.2d67	91 37		sta ($37),y			sta 	(rsPointer),y
.2d69	c8		iny				iny
.2d6a	a5 b1		lda $b1				lda		esInt3+1
.2d6c	91 37		sta ($37),y			sta 	(rsPointer),y
.2d6e	7a		ply				ply
.2d6f	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2d71	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2d73	d0 0c		bne $2d81			bne 	_CFDone
.2d75	c8		iny				iny									; skip over step.
.2d76	20 b9 38	jsr $38b9			jsr 	EvaluateInteger 			; get step
.2d79	5a		phy				phy
.2d7a	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2d7c	a0 06		ldy #$06			ldy 	#6
.2d7e	91 37		sta ($37),y			sta 	(rsPointer),y
.2d80	7a		ply				ply
.2d81					_CFDone:
.2d81	a9 01		lda #$01			lda 	#1
.2d83	20 fd 3f	jsr $3ffd			jsr 	RSSavePosition 				; save position.
.2d86	60		rts				rts
.2d87					_CFType:
.2d87	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d89	20 27 15	jsr $1527		jsr	errorHandler
.2d8c					Command_NEXT:
.2d8c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d8e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d90	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2d92	f0 05		beq $2d99			beq 	_isok
.2d94	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2d96	20 27 15	jsr $1527		jsr	errorHandler
.2d99					_isok:
.2d99	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2d9b	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2d9d	b0 16		bcs $2db5			bcs 	_CNNoIndex
.2d9f	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2da1	20 f2 38	jsr $38f2			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2da4	5a		phy				phy
.2da5	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2da7	b1 37		lda ($37),y			lda 	(rsPointer),y
.2da9	d5 98		cmp $98,x			cmp 	esInt0,x
.2dab	d0 72		bne $2e1f			bne 	_CNBadIndex
.2dad	c8		iny				iny
.2dae	b1 37		lda ($37),y			lda 	(rsPointer),y
.2db0	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2db2	d0 6b		bne $2e1f			bne 	_CNBadIndex
.2db4	7a		ply				ply
.2db5					_CNNoIndex:
.2db5	5a		phy				phy
.2db6	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2db8	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dba	85 2a		sta $2a				sta 	temp0
.2dbc	c8		iny				iny
.2dbd	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dbf	85 2b		sta $2b				sta 	temp0+1
.2dc1	c8		iny				iny
.2dc2	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2dc4	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2dc6	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2dc8	10 01		bpl $2dcb			bpl 	_CNSignX
.2dca	ca		dex				dex  								; X = $FF
.2dcb					_CNSignX:
.2dcb	18		clc				clc 								; add to the LSB
.2dcc	a0 00		ldy #$00			ldy 	#0
.2dce	71 2a		adc ($2a),y			adc 	(temp0),y
.2dd0	91 2a		sta ($2a),y			sta 	(temp0),y
.2dd2					_CNPropogate:
.2dd2	c8		iny				iny  								; add the sign extended in X to the rest.
.2dd3	8a		txa				txa
.2dd4	71 2a		adc ($2a),y			adc 	(temp0),y
.2dd6	91 2a		sta ($2a),y			sta 	(temp0),y
.2dd8	c8		iny				iny
.2dd9	8a		txa				txa
.2dda	71 2a		adc ($2a),y			adc 	(temp0),y
.2ddc	91 2a		sta ($2a),y			sta 	(temp0),y
.2dde	c8		iny				iny
.2ddf	8a		txa				txa
.2de0	71 2a		adc ($2a),y			adc 	(temp0),y
.2de2	91 2a		sta ($2a),y			sta 	(temp0),y
.2de4	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2de5	a5 37		lda $37				lda 	rsPointer
.2de7	69 07		adc #$07			adc 	#7
.2de9	85 2c		sta $2c				sta 	temp1
.2deb	a9 00		lda #$00			lda 	#0
.2ded	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2def	a8		tay				tay 								; and clear the Y register again.
.2df0	65 38		adc $38				adc 	rsPointer+1
.2df2	85 2d		sta $2d				sta 	temp1+1
.2df4	38		sec				sec 								; calculate current - limit oring interim values.
.2df5	20 2b 2e	jsr $2e2b			jsr 	_CNCompare 					; each of these does a byte.
.2df8	20 2b 2e	jsr $2e2b			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2dfb	20 2b 2e	jsr $2e2b			jsr 	_CNCompare 					; and the carry of the subtraction.
.2dfe	20 2b 2e	jsr $2e2b			jsr 	_CNCompare
.2e01	50 02		bvc $2e05			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2e03	49 80		eor #$80			eor 	#$80
.2e05					_CNNoOverflow:
.2e05	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2e07	30 1b		bmi $2e24			bmi 	_CNCheckDownto
.2e09	c9 00		cmp #$00			cmp 	#0
.2e0b	30 0b		bmi $2e18			bmi 	_CNLoopRound 				; loop round if < =
.2e0d	a5 2e		lda $2e				lda 	temp2
.2e0f	f0 07		beq $2e18			beq 	_CNLoopRound
.2e11					_CNLoopExit:
.2e11	7a		ply				ply
.2e12	a9 0b		lda #$0b			lda 	#11
.2e14	20 f3 3f	jsr $3ff3			jsr 	RSFree
.2e17	60		rts				rts
.2e18					_CNLoopRound:
.2e18	7a		ply				ply
.2e19	a9 01		lda #$01			lda 	#1
.2e1b	20 10 40	jsr $4010			jsr 	RSLoadPosition				; go back to the loop top
.2e1e	60		rts				rts
.2e1f					_CNBadIndex:
.2e1f	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2e21	20 27 15	jsr $1527		jsr	errorHandler
.2e24					_CNCheckDownto:
.2e24	c9 00		cmp #$00			cmp 	#0
.2e26	10 f0		bpl $2e18			bpl 	_CNLoopRound
.2e28	4c 11 2e	jmp $2e11			jmp 	_CNLoopExit
.2e2b					_CNCompare:
.2e2b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2e2d	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2e2f	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2e31	85 2e		sta $2e				sta 	temp2
.2e33	c8		iny				iny
.2e34	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2e35					CommandIf:
.2e35	20 b7 38	jsr $38b7			jsr 	EvaluateRootInteger 		; get what's being tested.
.2e38	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2e3a	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2e3c	f0 04		beq $2e42			beq 	_IfSimple
.2e3e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2e40	d0 1b		bne $2e5d			bne 	_IfComplex
.2e42					_IfSimple:
.2e42	20 5f 3f	jsr $3f5f			jsr 	MInt32Zero					; check if TOS zero
.2e45	f0 10		beq $2e57			beq 	_IfEOL 						; go to next line.
.2e47	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2e49	c8		iny				iny
.2e4a	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2e4c	f0 0c		beq $2e5a			beq 	_IfGoto 					; do the Goto code
.2e4e	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2e50	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2e52	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2e54	f0 04		beq $2e5a			beq 	_IfGoto
.2e56	60		rts				rts 								; else continue on this line.
.2e57					_IfEOL:
.2e57	4c 1b 2d	jmp $2d1b			jmp 	AdvanceNextLine 			; go to next line
.2e5a					_IfGoto:
.2e5a	4c 5e 2a	jmp $2a5e			jmp 	CommandGoto
.2e5d					_IfComplex:
.2e5d	20 5f 3f	jsr $3f5f			jsr 	MInt32Zero 					; is it true ?
.2e60	f0 01		beq $2e63			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2e62	60		rts				rts 								; else continue.
.2e63					_IFSkip:
.2e63	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2e65	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2e67	4c f2 30	jmp $30f2			jmp		ScanForward
.2e6a					Command_ELSE:
.2e6a	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2e6c	8a		txa				txa
.2e6d	4c f2 30	jmp $30f2			jmp		ScanForward
.2e70					Command_ENDIF:
.2e70	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0dc2					storeSize:
>0dc2							.fill 	1
.2e71					CommandLocal:
.2e71	a2 00		ldx #$00			ldx 	#0
.2e73	20 8f 2e	jsr $2e8f			jsr 	LocaliseVariable 			; localise one.
.2e76					_CLCheckNext:
.2e76	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2e78	c8		iny				iny
.2e79	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2e7b	f0 06		beq $2e83			beq 	_CLAssignment
.2e7d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2e7f	f0 f0		beq $2e71			beq 	CommandLocal
.2e81	88		dey				dey
.2e82	60		rts				rts
.2e83					_CLAssignment:
.2e83	a2 01		ldx #$01			ldx 	#1
.2e85	20 9a 38	jsr $389a			jsr 	Evaluate 					; evaluate RHS
.2e88	ca		dex				dex
.2e89	20 5d 2c	jsr $2c5d			jsr 	WriteValue
.2e8c	4c 76 2e	jmp $2e76			jmp 	_CLCheckNext
.2e8f					LocaliseVariable:
.2e8f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2e91	c9 40		cmp #$40			cmp 	#$40
.2e93	b0 63		bcs $2ef8			bcs 	_LVSyntax
.2e95	8a		txa				txa 								; get the address of that variable.
.2e96	a2 02		ldx #$02		ldx	#2
.2e98	20 16 4f	jsr $4f16		jsr	variableHandler
.2e9b	aa		tax				tax
.2e9c	da		phx				phx
.2e9d	5a		phy				phy
.2e9e	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2ea1	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2ea3	0a		asl a				asl 	a
.2ea4	10 16		bpl $2ebc			bpl 	_LVPushNumber
.2ea6	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2ea8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2eaa	c8		iny				iny
.2eab	85 2c		sta $2c				sta 	temp1
.2ead	b1 2a		lda ($2a),y			lda 	(temp0),y
.2eaf	85 2d		sta $2d				sta 	temp1+1
.2eb1	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2eb3	b1 2c		lda ($2c),y			lda 	(temp1),y
.2eb5	aa		tax				tax 								; into X
.2eb6	e8		inx				inx 								; +1 for length.
.2eb7	a9 24		lda #$24			lda 	#markerString
.2eb9	4c d1 2e	jmp $2ed1			jmp 	_LVWriteFrame
.2ebc					_LVPushNumber:
.2ebc	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2ebe	85 2c		sta $2c				sta 	temp1
.2ec0	a5 2b		lda $2b				lda 	temp0+1
.2ec2	85 2d		sta $2d				sta 	temp1+1
.2ec4	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2ec6	4a		lsr a				lsr 	a
.2ec7	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2ec9	a2 04		ldx #$04			ldx 	#VarISize
.2ecb	90 04		bcc $2ed1			bcc 	_LVIsInteger
.2ecd	a9 23		lda #$23			lda 	#markerFloat
.2ecf	a2 06		ldx #$06			ldx 	#VarFSize
.2ed1					_LVIsInteger:
.2ed1					_LVWriteFrame:
.2ed1	8e c2 0d	stx $0dc2			stx 	storeSize 					; number of bytes to copy from (temp0)
.2ed4	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2ed5	e8		inx				inx
.2ed6	e8		inx				inx
.2ed7	20 d1 3f	jsr $3fd1			jsr 	RSClaim 					; create the stack frame.
.2eda	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2edc	a0 01		ldy #$01			ldy 	#1
.2ede	91 37		sta ($37),y			sta 	(rsPointer),y
.2ee0	c8		iny				iny
.2ee1	a5 2b		lda $2b				lda 	temp0+1
.2ee3	91 37		sta ($37),y			sta 	(rsPointer),y
.2ee5	a0 00		ldy #$00			ldy 	#0
.2ee7					_LVCopyData:
.2ee7	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2ee9	c8		iny				iny 								; write allowing for the header bit.
.2eea	c8		iny				iny
.2eeb	c8		iny				iny
.2eec	91 37		sta ($37),y			sta 	(rsPointer),y
.2eee	88		dey				dey
.2eef	88		dey				dey
.2ef0	ce c2 0d	dec $0dc2			dec 	storeSize 					; do it storesize times
.2ef3	d0 f2		bne $2ee7			bne 	_LVCopyData
.2ef5	7a		ply				ply
.2ef6	fa		plx				plx
.2ef7	60		rts				rts
.2ef8					_LVSyntax:
.2ef8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2efa	20 27 15	jsr $1527		jsr	errorHandler
.2efd					RestoreLocals:
.2efd	a2 00		ldx #$00			ldx 	#0
.2eff	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2f01	c9 40		cmp #$40			cmp	 	#64
.2f03	90 01		bcc $2f06			bcc 	_RLocal
.2f05	60		rts				rts
.2f06					_RLocal:
.2f06	da		phx				phx
.2f07	5a		phy				phy
.2f08	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2f0a	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f0c	85 2a		sta $2a				sta 	temp0
.2f0e	c8		iny				iny
.2f0f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f11	85 2b		sta $2b				sta 	temp0+1
.2f13	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2f15	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f17	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2f19	f0 25		beq $2f40			beq 	_RString
.2f1b	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2f1d	c9 25		cmp #$25			cmp 	#markerInt
.2f1f	f0 02		beq $2f23			beq 	_RIsInteger
.2f21	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2f23					_RIsInteger:
.2f23	da		phx				phx
.2f24	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2f26					_RCopyBack:
.2f26	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f28	88		dey				dey
.2f29	88		dey				dey
.2f2a	88		dey				dey
.2f2b	91 2a		sta ($2a),y			sta 	(temp0),y
.2f2d	c8		iny				iny
.2f2e	c8		iny				iny
.2f2f	c8		iny				iny
.2f30	c8		iny				iny
.2f31	ca		dex				dex
.2f32	d0 f2		bne $2f26			bne 	_RCopyBack
.2f34	68		pla				pla 								; get size add 3
.2f35	18		clc				clc
.2f36	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2f38					_RRestoreAAndLoop:
.2f38	20 f3 3f	jsr $3ff3			jsr 	RSFree
.2f3b	7a		ply				ply
.2f3c	fa		plx				plx
.2f3d	4c fd 2e	jmp $2efd			jmp 	RestoreLocals 				; go see if there are any more locals.
.2f40					_RString:
.2f40	a2 00		ldx #$00			ldx 	#0
.2f42	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2f44	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f46	95 98		sta $98,x			sta 	esInt0,x
.2f48	c8		iny				iny
.2f49	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f4b	95 a0		sta $a0,x			sta 	esInt1,x
.2f4d	18		clc				clc
.2f4e	a5 37		lda $37				lda 	rsPointer
.2f50	69 03		adc #$03			adc 	#3
.2f52	95 99		sta $99,x			sta 	esInt0+1,x
.2f54	a5 38		lda $38				lda 	rsPointer+1
.2f56	69 00		adc #$00			adc 	#0
.2f58	95 a1		sta $a1,x			sta 	esInt1+1,x
.2f5a	8a		txa				txa
.2f5b	a2 10		ldx #$10		ldx	#16
.2f5d	20 cf 42	jsr $42cf		jsr	stringHandler
.2f60	a0 03		ldy #$03			ldy 	#3 							; get string length
.2f62	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f64	18		clc				clc
.2f65	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2f67	4c 38 2f	jmp $2f38			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0dc3					paramCount:
>0dc3							.fill 	1
.2f6a					CallProc:
.2f6a	20 f2 2f	jsr $2ff2			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2f6d	48		pha				pha 								; save length on stack
.2f6e	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2f70	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2f72	48		pha				pha
.2f73	a5 2a		lda $2a				lda 	temp0
.2f75	48		pha				pha
.2f76	98		tya				tya 								; calculate Y + length
.2f77	18		clc				clc
.2f78	65 32		adc $32				adc 	tempShort
.2f7a	a8		tay				tay
.2f7b	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2f7d					_CallProcEvalParams:
.2f7d	e8		inx				inx
.2f7e	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2f80	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f82	f0 0b		beq $2f8f			beq 	_CPDoneParams
.2f84	20 9a 38	jsr $389a			jsr 	Evaluate 					; evaluate a parameter
.2f87	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2f89	c8		iny				iny
.2f8a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2f8c	f0 ef		beq $2f7d			beq 	_CallProcEvalParams
.2f8e	88		dey				dey 								; undo consumption.
.2f8f					_CPDoneParams:
.2f8f	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen 			; check closing parenthesis.
.2f92	8e c3 0d	stx $0dc3			stx 	paramCount 					; store parameter count+1
.2f95	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2f97	a9 50		lda #$50			lda 	#markerPROC
.2f99	20 d1 3f	jsr $3fd1			jsr 	RSClaim
.2f9c	a9 01		lda #$01			lda 	#1 							; store return address.
.2f9e	20 fd 3f	jsr $3ffd			jsr 	RSSavePosition
.2fa1	68		pla				pla 								; get the new code Ptr
.2fa2	85 28		sta $28				sta 	codePtr
.2fa4	68		pla				pla
.2fa5	85 29		sta $29				sta 	codePtr+1
.2fa7	68		pla				pla 								; length of name + 4 is the param start.
.2fa8	18		clc				clc
.2fa9	69 04		adc #$04			adc 	#4
.2fab	a8		tay				tay
.2fac	a2 ff		ldx #$ff			ldx 	#$FF
.2fae					_CPLoadParameters:
.2fae	e8		inx				inx 								; point to where the address should be loaded.
.2faf	ec c3 0d	cpx $0dc3			cpx 	paramCount 					; too many parameters in definition ?
.2fb2	f0 1e		beq $2fd2			beq 	_CPParamError
.2fb4	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2fb6	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2fb8	f0 0e		beq $2fc8			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2fba	20 8f 2e	jsr $2e8f			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2fbd	20 5d 2c	jsr $2c5d			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2fc0	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2fc2	c8		iny				iny
.2fc3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2fc5	f0 e7		beq $2fae			beq 	_CPLoadParameters
.2fc7	88		dey				dey 								; no, unconsume and check for )
.2fc8					_CPParamComplete:
.2fc8	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen 			; check )
.2fcb	e8		inx				inx 								; check right number of parameters have been consumed
.2fcc	ec c3 0d	cpx $0dc3			cpx 	paramCount
.2fcf	d0 01		bne $2fd2			bne 	_CPParamError
.2fd1	60		rts				rts
.2fd2					_CPParamError:
.2fd2	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2fd4	20 27 15	jsr $1527		jsr	errorHandler
.2fd7					ReturnProc:
.2fd7	20 fd 2e	jsr $2efd			jsr 	RestoreLocals 				; get the locals back.
.2fda	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2fdc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2fde	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2fe0	f0 05		beq $2fe7			beq 	_isok
.2fe2	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2fe4	20 27 15	jsr $1527		jsr	errorHandler
.2fe7					_isok:
.2fe7	a9 01		lda #$01			lda 	#1
.2fe9	20 10 40	jsr $4010			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2fec	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2fee	20 f3 3f	jsr $3ff3			jsr 	RSFree
.2ff1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0dc4					procList:
>0dc4							.fill 	2		 					; terminated by name high being zero.
.0dc6					yInLine:
>0dc6							.fill 	1
.2ff2					FindProcedure:
.2ff2	8c c6 0d	sty $0dc6			sty 	yInLine 					; save current position.
.2ff5	20 ac 30	jsr $30ac			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2ff8	85 2c		sta $2c				sta 	temp1
.2ffa	ad c4 0d	lda $0dc4			lda		procList 					; put procList address in temp2
.2ffd	85 2e		sta $2e				sta 	temp2
.2fff	ad c5 0d	lda $0dc5			lda 	procList+1
.3002	85 2f		sta $2f				sta 	temp2+1
.3004	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.3006					_FPLoop:
.3006	b1 2e		lda ($2e),y			lda 	(temp2),y
.3008	f0 4d		beq $3057			beq 	_FPError 					; if so, we don't know this procedure.
.300a	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.300c	c8		iny				iny
.300d	b1 2e		lda ($2e),y			lda 	(temp2),y
.300f	85 2a		sta $2a				sta 	temp0
.3011	c8		iny				iny
.3012	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.3014	c5 2c		cmp $2c				cmp 	temp1
.3016	d0 29		bne $3041			bne 	_FPNext 					; hash is different, go to next.
.3018	38		sec				sec
.3019	ad c6 0d	lda $0dc6			lda 	yInLine 					; position in line must be at least 4
.301c	e9 04		sbc #$04			sbc 	#4
.301e	18		clc				clc
.301f	65 28		adc $28				adc 	codePtr
.3021	85 30		sta $30				sta 	temp3
.3023	a5 29		lda $29				lda 	codePtr+1
.3025	69 00		adc #$00			adc 	#0
.3027	85 31		sta $31				sta 	temp3+1
.3029	5a		phy				phy
.302a	a0 04		ldy #$04			ldy 	#4
.302c					_FPCName:
.302c	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.302e	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3030	d0 0e		bne $3040			bne 	_FPpulYNext 				; if different go to next one.
.3032	c8		iny				iny
.3033	c9 3a		cmp #$3a			cmp 	#$3A
.3035	90 f5		bcc $302c			bcc 	_FPCName 					; compare the whole lot....
.3037	68		pla				pla 								; throw away the saved Y
.3038	98		tya				tya 								; length of name is Y-4
.3039	38		sec				sec
.303a	e9 04		sbc #$04			sbc 	#4
.303c	ac c6 0d	ldy $0dc6			ldy 	yInLine  					; get the original Y back
.303f	60		rts				rts
.3040					_FPpulYNext:
.3040	7a		ply				ply
.3041					_FPNext:
.3041	c8		iny				iny 								; next procedure record.
.3042	10 c2		bpl $3006			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.3044	98		tya				tya 								; subtract 128 from Y
.3045	38		sec				sec
.3046	e9 80		sbc #$80			sbc 	#128
.3048	a8		tay				tay
.3049	18		clc				clc 								; add 128 to temp2, so we can have more than
.304a	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.304c	69 80		adc #$80			adc 	#128
.304e	85 2e		sta $2e				sta 	temp2
.3050	90 b4		bcc $3006			bcc 	_FPLoop
.3052	e6 2f		inc $2f				inc 	temp2+1
.3054	4c 06 30	jmp $3006			jmp 	_FPLoop
.3057					_FPError:
.3057	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.3059	20 27 15	jsr $1527		jsr	errorHandler
.305c					ScanProc:
.305c	5a		phy				phy
.305d	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.305f	8d c4 0d	sta $0dc4			sta 	procList
.3062	a5 36		lda $36				lda 	lowMemory+1
.3064	8d c5 0d	sta $0dc5			sta 	procList+1
.3067	20 db 33	jsr $33db			jsr 	ResetCodeAddress 			; back to the start.
.306a					_ScanLoop:
.306a	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.306c	b1 28		lda ($28),y			lda 	(codePtr),y
.306e	f0 2a		beq $309a			beq 	_ScanExit
.3070	a0 03		ldy #$03			ldy 	#3							; get first token
.3072	b1 28		lda ($28),y			lda 	(codePtr),y
.3074	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.3076	d0 12		bne $308a			bne 	_ScanNext
.3078	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.307a	20 a1 30	jsr $30a1			jsr 	_ScanWrite
.307d	a5 28		lda $28				lda 	codePtr
.307f	20 a1 30	jsr $30a1			jsr 	_ScanWrite
.3082	a0 04		ldy #$04			ldy 	#4 							; start of name part
.3084	20 ac 30	jsr $30ac			jsr 	CalculateProcedureHash 		; calculate procedure hash
.3087	20 a1 30	jsr $30a1			jsr 	_ScanWrite					; and write that
.308a					_ScanNext:
.308a	18		clc				clc
.308b	a0 00		ldy #$00			ldy 	#0
.308d	b1 28		lda ($28),y			lda 	(codePtr),y
.308f	65 28		adc $28				adc 	codePtr
.3091	85 28		sta $28				sta 	codePtr
.3093	90 d5		bcc $306a			bcc 	_ScanLoop
.3095	e6 29		inc $29				inc 	codePtr+1
.3097	4c 6a 30	jmp $306a			jmp 	_ScanLoop
.309a					_ScanExit:
.309a	a9 00		lda #$00			lda 	#0 							; write ending zero.
.309c	20 a1 30	jsr $30a1			jsr 	_ScanWrite
.309f	7a		ply				ply
.30a0	60		rts				rts
.30a1					_ScanWrite:
.30a1	a0 00		ldy #$00			ldy 	#0
.30a3	91 35		sta ($35),y			sta 	(lowMemory),y
.30a5	e6 35		inc $35				inc 	lowMemory
.30a7	d0 02		bne $30ab			bne 	_SWNoCarry
.30a9	e6 36		inc $36				inc 	lowMemory+1
.30ab					_SWNoCarry:
.30ab	60		rts				rts
.30ac					CalculateProcedureHash:
.30ac	a9 00		lda #$00			lda 	#0 							; clear hash.
.30ae	85 2a		sta $2a				sta 	temp0
.30b0					_CPHLoop:
.30b0	18		clc				clc 								; add character and rotate and add carry back in
.30b1	b1 28		lda ($28),y			lda 	(codePtr),y
.30b3	65 2a		adc $2a				adc 	temp0
.30b5	6a		ror a				ror 	a
.30b6	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.30b8	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.30ba	b1 28		lda ($28),y			lda 	(codePtr),y
.30bc	c8		iny				iny 								; advance incase we go round again.
.30bd	c9 3a		cmp #$3a			cmp 	#$3A
.30bf	90 ef		bcc $30b0			bcc 	_CPHLoop
.30c1	a5 2a		lda $2a				lda 	temp0
.30c3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.30c4					Command_Repeat:
.30c4	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.30c6	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.30c8	20 d1 3f	jsr $3fd1			jsr 	RSClaim
.30cb	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.30cd	20 fd 3f	jsr $3ffd			jsr 	RSSavePosition
.30d0	60		rts				rts
.30d1					Command_Until:
.30d1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.30d3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.30d5	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.30d7	f0 05		beq $30de			beq 	_isok
.30d9	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.30db	20 27 15	jsr $1527		jsr	errorHandler
.30de					_isok:
.30de	20 b7 38	jsr $38b7			jsr 	EvaluateRootInteger 		; at the bottom.
.30e1	20 5f 3f	jsr $3f5f			jsr 	MInt32Zero					; check if TOS zero
.30e4	d0 06		bne $30ec			bne 	_CUExit
.30e6	a9 01		lda #$01			lda 	#1
.30e8	20 10 40	jsr $4010			jsr 	RSLoadPosition 				; reload the position from offset 1.
.30eb	60		rts				rts
.30ec					_CUExit:
.30ec	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.30ee	20 f3 3f	jsr $3ff3			jsr 	RSFree
.30f1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.30f2					ScanForward:
.30f2	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.30f4	86 2d		stx $2d				stx 	temp1+1
.30f6	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.30f8	85 2e		sta $2e				sta 	temp2
.30fa	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.30fc	c8		iny				iny
.30fd	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.30ff	d0 08		bne $3109			bne 	_SFNoCheck 					; if so, check token against entered values.
.3101	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.3103	f0 24		beq $3129			beq 	_SFExit 					; at the same strcture depth.
.3105	c5 2d		cmp $2d				cmp 	temp1+1
.3107	f0 20		beq $3129			beq 	_SFExit
.3109					_SFNoCheck:
.3109	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.310b	90 ed		bcc $30fa			bcc 	_SFLoop
.310d	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.310f	90 19		bcc $312a			bcc 	_SFSpecials
.3111	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.3113	90 e5		bcc $30fa			bcc 	_SFLoop
.3115	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.3117	b0 e1		bcs $30fa			bcs 	_SFLoop
.3119	aa		tax				tax  								; token in X, and look up the adjuster.
.311a	bd d5 37	lda $37d5,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.311d	38		sec				sec 								; convert to an offset ($FF,$01)
.311e	e9 81		sbc #$81			sbc 	#$81
.3120	18		clc				clc 								; add to depth
.3121	65 2e		adc $2e				adc 	temp2
.3123	85 2e		sta $2e				sta 	temp2
.3125	10 d3		bpl $30fa			bpl 	_SFLoop 					; +ve okay to continue
.3127	30 07		bmi $3130			bmi 	SFError 					; if gone -ve then we have a nesting error
.3129	60		rts		_SFExit:rts
.312a					_SFSpecials:
.312a	20 35 31	jsr $3135			jsr 	ScannerSkipSpecial
.312d	4c fa 30	jmp $30fa			jmp 	_SFLoop
.3130					SFError:
.3130	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.3132	20 27 15	jsr $1527		jsr	errorHandler
.3135					ScannerSkipSpecial:
.3135	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.3137	f0 10		beq $3149			beq 	_SFNextLine
.3139	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.313b	f0 2b		beq $3168			beq 	_SFFloatSkip
.313d	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.313f	f0 02		beq $3143			beq 	_SFSkipString
.3141	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.3142	60		rts				rts 								; token.
.3143					_SFSkipString:
.3143	98		tya				tya
.3144	38		sec				sec
.3145	71 28		adc ($28),y			adc 	(codePtr),y
.3147	a8		tay				tay
.3148	60		rts				rts
.3149					_SFNextLine:
.3149	a0 00		ldy #$00			ldy 	#0 							; get offset
.314b	b1 28		lda ($28),y			lda 	(codePtr),y
.314d	18		clc				clc 								; add to code pointer.
.314e	65 28		adc $28				adc 	codePtr
.3150	85 28		sta $28				sta 	codePtr
.3152	90 02		bcc $3156			bcc		_SFNLNoCarry
.3154	e6 29		inc $29				inc 	codePtr+1
.3156					_SFNLNoCarry:
.3156	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.3158	d0 0b		bne $3165			bne		_SFXNL 						; no go round again
.315a	a5 2c		lda $2c				lda 	temp1
.315c	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.315e	d0 d0		bne $3130			bne 	SFError 					; read uses this to search for data statements
.3160	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.3162	20 27 15	jsr $1527		jsr	errorHandler
.3165	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.3167	60		rts				rts
.3168					_SFFloatSkip:
.3168	98		tya				tya 								; skip over an embedded float.
.3169	18		clc				clc
.316a	69 05		adc #$05			adc 	#FloatEmbeddedSize
.316c	a8		tay				tay
.316d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.316e					Command_While:
.316e	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.3170	a2 04		ldx #$04			ldx 	#4
.3172	20 d1 3f	jsr $3fd1			jsr 	RSClaim 					; create on stack.
.3175	88		dey				dey
.3176	a9 01		lda #$01			lda 	#1
.3178	20 fd 3f	jsr $3ffd			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.317b	c8		iny				iny
.317c	20 b7 38	jsr $38b7			jsr 	EvaluateRootInteger			; get the conditional
.317f	20 5f 3f	jsr $3f5f			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.3182	f0 01		beq $3185			beq 	_CWFail
.3184	60		rts				rts
.3185					_CWFail:
.3185	a9 04		lda #$04			lda 	#4
.3187	20 f3 3f	jsr $3ff3			jsr 	RSFree 						; close the just opened position.
.318a	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.318c	aa		tax				tax
.318d	20 f2 30	jsr $30f2			jsr 	ScanForward
.3190	60		rts				rts
.3191					Command_Wend:
.3191	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3193	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.3195	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.3197	f0 05		beq $319e			beq 	_isok
.3199	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.319b	20 27 15	jsr $1527		jsr	errorHandler
.319e					_isok:
.319e	a9 01		lda #$01			lda 	#1
.31a0	20 10 40	jsr $4010			jsr 	RSLoadPosition				; go back until true
.31a3	a9 04		lda #$04			lda 	#4
.31a5	20 f3 3f	jsr $3ff3			jsr 	RSFree 						; close the loop
.31a8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.31a9					CommandClear:
.31a9					XCommandClear:
.31a9	5a		phy				phy
.31aa	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.31ad	85 33		sta $33				sta 	highMemory
.31af	ad cd 0a	lda $0acd			lda 	endMemory+1
.31b2	85 34		sta $34				sta 	highMemory+1
.31b4	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.31b7	85 2a		sta $2a				sta 	temp0
.31b9	ad c9 0a	lda $0ac9			lda 	basePage+1
.31bc	85 2b		sta $2b				sta 	temp0+1
.31be					_CCFindEnd:
.31be	a0 00		ldy #$00			ldy 	#0
.31c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.31c2	f0 0c		beq $31d0			beq 	_CCFoundEnd 				; offset zero is end.
.31c4	18		clc				clc
.31c5	65 2a		adc $2a				adc 	temp0 						; move to next line
.31c7	85 2a		sta $2a				sta 	temp0
.31c9	90 f3		bcc $31be			bcc 	_CCFindEnd
.31cb	e6 2b		inc $2b				inc 	temp0+1
.31cd	4c be 31	jmp $31be			jmp 	_CCFindEnd
.31d0					_CCFoundEnd:
.31d0	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.31d2	85 35		sta $35				sta 	lowMemory
.31d4	a5 2b		lda $2b				lda 	temp0+1
.31d6	85 36		sta $36				sta 	lowMemory+1
.31d8	18		clc				clc 								; put temp0+1 in endProgram
.31d9	a5 2a		lda $2a				lda 	temp0
.31db	69 01		adc #$01			adc 	#1
.31dd	8d ca 0a	sta $0aca			sta 	endProgram
.31e0	a5 2b		lda $2b				lda 	temp0+1
.31e2	69 00		adc #$00			adc 	#0
.31e4	8d cb 0a	sta $0acb			sta 	endProgram+1
.31e7	18		clc				clc 								; put a bit of space in.
.31e8	a5 35		lda $35				lda 	lowMemory
.31ea	69 04		adc #$04			adc 	#4
.31ec	85 35		sta $35				sta 	lowMemory
.31ee	90 02		bcc $31f2			bcc 	_CCNoCarry
.31f0	e6 36		inc $36				inc 	lowMemory+1
.31f2					_CCNoCarry:
.31f2	20 c3 3f	jsr $3fc3			jsr 	RSReset 					; reset the return stack.
.31f5	a2 06		ldx #$06		ldx	#6
.31f7	20 16 4f	jsr $4f16		jsr	variableHandler
.31fa	20 5c 30	jsr $305c			jsr 	ScanProc 					; scan for procedures
.31fd	20 03 2a	jsr $2a03			jsr 	CommandRestore 				; do a restore
.3200	7a		ply				ply
.3201	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0dc7					structIndent:
>0dc7							.fill 	1
.3202					CommandList:
.3202	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.3204	8e c7 0d	stx $0dc7			stx 	structIndent
.3207	20 38 3f	jsr $3f38			jsr 	MInt32False
.320a	e8		inx				inx
.320b	20 34 3f	jsr $3f34			jsr 	MInt32True
.320e	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.3210	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.3212	f0 15		beq $3229			beq 	_CLEndLine
.3214	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.3216	30 1b		bmi $3233			bmi 	_CLDoListing 				; do the whole lot.
.3218	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.321a	20 b9 38	jsr $38b9			jsr 	EvaluateInteger
.321d	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.321f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3221	f0 06		beq $3229			beq 	_CLEndLine
.3223	20 78 3e	jsr $3e78			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.3226	4c 33 32	jmp $3233			jmp 	_CLDoListing 				; own e.g. list 1100
.3229					_CLEndLine:
.3229	c8		iny				iny 								; skip comma
.322a	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.322c	30 05		bmi $3233			bmi 	_CLDoListing
.322e	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.3230	20 b9 38	jsr $38b9			jsr 	EvaluateInteger				; get end
.3233					_CLDoListing:
.3233	20 db 33	jsr $33db			jsr 	ResetCodeAddress 			; back to the start.
.3236					_CLCheckLoop:
.3236	a2 18		ldx #$18		ldx	#24
.3238	20 05 15	jsr $1505		jsr	deviceHandler
.323b	a0 00		ldy #$00			ldy 	#0							; check end.
.323d	b1 28		lda ($28),y			lda 	(codePtr),y
.323f	f0 41		beq $3282			beq 	_CLEnd
.3241	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3243	20 85 32	jsr $3285			jsr 	CLCompareLineTOS
.3246	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3248	f0 28		beq $3272			beq 	_CLNext
.324a	e8		inx				inx
.324b	20 85 32	jsr $3285			jsr 	CLCompareLineTOS 			; compare vs higher
.324e	c9 01		cmp #$01			cmp 	#1
.3250	f0 20		beq $3272			beq 	_CLNext
.3252	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.3254	20 a7 32	jsr $32a7			jsr 	CLStructureCheck
.3257	ad c7 0d	lda $0dc7			lda 	structIndent 				; indent level.
.325a	10 02		bpl $325e			bpl 	_CLPositive
.325c	a9 00		lda #$00			lda 	#0
.325e					_CLPositive:
.325e	a2 04		ldx #$04		ldx	#4
.3260	20 57 4b	jsr $4b57		jsr	tokeniserHandler
.3263	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.3265	20 a7 32	jsr $32a7			jsr 	CLStructureCheck
.3268	ad c7 0d	lda $0dc7			lda 	structIndent
.326b	10 05		bpl $3272			bpl 	_CLNext
.326d	a9 00		lda #$00			lda 	#0
.326f	8d c7 0d	sta $0dc7			sta 	structIndent
.3272					_CLNext:
.3272	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.3274	b1 28		lda ($28),y			lda 	(codePtr),y
.3276	18		clc				clc
.3277	65 28		adc $28				adc 	codePtr
.3279	85 28		sta $28				sta 	codePtr
.327b	90 b9		bcc $3236			bcc 	_CLCheckLoop
.327d	e6 29		inc $29				inc 	codePtr+1
.327f	4c 36 32	jmp $3236			jmp 	_CLCheckLoop
.3282					_CLEnd:
.3282	4c 1f 40	jmp $401f			jmp 	WarmStart 					; warm start after list.
.3285					CLCompareLineTOS:
.3285	a0 01		ldy #$01			ldy 	#1
.3287	b1 28		lda ($28),y			lda 	(codePtr),y
.3289	55 98		eor $98,x			eor 	esInt0,x
.328b	85 2a		sta $2a				sta 	temp0
.328d	c8		iny				iny
.328e	b1 28		lda ($28),y			lda 	(codePtr),y
.3290	55 a0		eor $a0,x			eor 	esInt1,x
.3292	05 2a		ora $2a				ora 	temp0
.3294	f0 10		beq $32a6			beq 	_CLCLTExit
.3296	88		dey				dey
.3297	b1 28		lda ($28),y			lda 	(codePtr),y
.3299	d5 98		cmp $98,x			cmp 	esInt0,x
.329b	c8		iny				iny
.329c	b1 28		lda ($28),y			lda 	(codePtr),y
.329e	f5 a0		sbc $a0,x			sbc 	esInt1,x
.32a0	a9 ff		lda #$ff			lda 	#255
.32a2	90 02		bcc $32a6			bcc 	_CLCLTExit
.32a4	a9 01		lda #$01			lda 	#1
.32a6					_CLCLTExit:
.32a6	60		rts				rts
.32a7					CLStructureCheck:
.32a7	85 2a		sta $2a				sta 	temp0
.32a9	a0 03		ldy #$03			ldy 	#3
.32ab					_CLSCLoop:
.32ab	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.32ad	c8		iny				iny
.32ae	c9 80		cmp #$80			cmp 	#$80
.32b0	90 f9		bcc $32ab			bcc 	_CLSCLoop 					; $00-$7F just step over.
.32b2	f0 28		beq $32dc			beq		_CLSCExit					; EOL return
.32b4	c9 86		cmp #$86			cmp 	#$86 						; special handler
.32b6	90 1e		bcc $32d6			bcc 	_CLSCSpecial
.32b8	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.32ba	90 ef		bcc $32ab			bcc 	_CLSCLoop
.32bc	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.32be	b0 eb		bcs $32ab			bcs 	_CLSCLoop
.32c0	aa		tax				tax 								; get adjustment
.32c1	bd d5 37	lda $37d5,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.32c4	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.32c6	d0 e3		bne $32ab			bne 	_CLSCLoop
.32c8	38		sec				sec
.32c9	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.32cb	0a		asl a				asl 	a 							; double indent step
.32cc	18		clc				clc
.32cd	6d c7 0d	adc $0dc7			adc 	structIndent 				; add to structure indent
.32d0	8d c7 0d	sta $0dc7			sta 	structIndent
.32d3	4c ab 32	jmp $32ab			jmp 	_CLSCLoop
.32d6					_CLSCSpecial:
.32d6	20 35 31	jsr $3135			jsr 	ScannerSkipSpecial
.32d9	4c ab 32	jmp $32ab			jmp 	_CLSCLoop
.32dc					_CLSCExit:
.32dc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.32dd					CommandLoad:
.32dd	20 05 33	jsr $3305			jsr 	CLSParameters 					; get parameters for load.
.32e0	08		php				php
.32e1	a2 0c		ldx #$0c		ldx	#12
.32e3	20 05 15	jsr $1505		jsr	deviceHandler
.32e6	28		plp				plp
.32e7	b0 08		bcs $32f1			bcs 	_CLExit 						; if CC then load a program, so warm start.
.32e9	20 a9 31	jsr $31a9			jsr 	CommandClear
.32ec	a2 04		ldx #$04		ldx	#4
.32ee	20 c5 29	jsr $29c5		jsr	interactionHandler
.32f1					_CLExit
.32f1	60		rts				rts
.32f2					CommandSave:
.32f2	20 05 33	jsr $3305			jsr 	CLSParameters					; get parameters for save
.32f5	90 08		bcc $32ff			bcc 	_CSNoOverrideAddress
.32f7	20 b6 3f	jsr $3fb6			jsr 	CheckComma 						; should be a comma.
.32fa	a2 02		ldx #$02			ldx 	#2
.32fc	20 b9 38	jsr $38b9			jsr 	EvaluateInteger 				; get save end address.
.32ff					_CSNoOverrideAddress:
.32ff	a2 16		ldx #$16		ldx	#22
.3301	20 05 15	jsr $1505		jsr	deviceHandler
.3304	60		rts				rts
.3305					CLSParameters:
.3305	a2 00		ldx #$00			ldx 	#0 								; string at +0
.3307	20 ae 38	jsr $38ae			jsr 	EvaluateString
.330a	e8		inx				inx 									; erase out +1 (start) +2 (end, for save)
.330b	20 38 3f	jsr $3f38			jsr 	MInt32False
.330e	e8		inx				inx
.330f	20 38 3f	jsr $3f38			jsr 	MInt32False
.3312	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.3315	85 99		sta $99				sta 	esInt0+1
.3317	ad c9 0a	lda $0ac9			lda 	basePage+1
.331a	85 a1		sta $a1				sta 	esInt1+1
.331c	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.331f	85 9a		sta $9a				sta 	esInt0+2
.3321	ad cb 0a	lda $0acb			lda 	endProgram+1
.3324	85 a2		sta $a2				sta 	esInt1+2
.3326	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.3328	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.332a	d0 08		bne $3334			bne 	_CLSDefault
.332c	c8		iny				iny 									; skip comma
.332d	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.332f	20 b9 38	jsr $38b9			jsr 	EvaluateInteger 				; the load or start save address
.3332	38		sec				sec 									; return CS indicating override
.3333	60		rts				rts
.3334					_CLSDefault:
.3334	18		clc				clc
.3335	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.3336					Command_New:
.3336					Command_XNew:
.3336	20 db 33	jsr $33db			jsr 	ResetCodeAddress 			; point to first line
.3339	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.333b	98		tya				tya
.333c	91 28		sta ($28),y			sta 	(codePtr),y
.333e	20 a9 31	jsr $31a9			jsr 	CommandClear 				; clear everything down.
.3341	4c 15 2d	jmp $2d15			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0dc8					breakCounter:
>0dc8								.fill 	1
.0dc9					breakIncrement:
>0dc9								.fill 	1
.3344					Command_Run:
.3344					XCommand_Run:
.3344	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.3346	9a		txs				txs
.3347	20 d5 33	jsr $33d5			jsr 	BreakOn 					; turn break on
.334a	20 a9 31	jsr $31a9			jsr 	CommandClear 				; clear everything.
.334d	20 db 33	jsr $33db			jsr 	ResetCodeAddress 			; back to the start.
.3350					Command_RunFrom:
.3350	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.3352					CRNextInstruction:
.3352	a9 00		lda #$00			lda 	#0
.3354	85 3a		sta $3a				sta 	softMemAlloc+1
.3356	ad c8 0d	lda $0dc8			lda 	breakCounter 				; check for break.
.3359	6d c9 0d	adc $0dc9			adc 	breakIncrement
.335c	8d c8 0d	sta $0dc8			sta 	breakCounter
.335f	90 05		bcc $3366			bcc 	_CRNoChecks
.3361	a2 18		ldx #$18		ldx	#24
.3363	20 05 15	jsr $1505		jsr	deviceHandler
.3366					_CRNoChecks
.3366	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.3368	10 1c		bpl $3386			bpl 	_CRNotToken
.336a	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.336c	b0 0c		bcs $337a			bcs 	_CRExecute
.336e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.3370	b0 55		bcs $33c7			bcs 	Unimplemented
.3372	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.3374	b0 04		bcs $337a			bcs 	_CRExecute
.3376	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.3378	b0 16		bcs $3390			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.337a					_CRExecute:
.337a	c8		iny				iny 								; consume it.
.337b	0a		asl a				asl 	a 							; double it, losing most significant bit.
.337c	aa		tax				tax
.337d	20 83 33	jsr $3383			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.3380	4c 52 33	jmp $3352			jmp 	CRNextInstruction
.3383					_CRRunRoutine:
.3383	7c ed 33	jmp ($33ed,x)			jmp 	(Group0Vectors,x)
.3386					_CRNotToken:
.3386	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.3388	b0 3d		bcs $33c7			bcs 	Unimplemented
.338a					_CRDefaultLet:
.338a	20 4a 2c	jsr $2c4a			jsr 	CommandLet 					; do the default, LET
.338d	4c 52 33	jmp $3352			jmp 	CRNextInstruction
.3390					_CRCheckIndirect:
.3390	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.3392	f0 0a		beq $339e			beq 	_CRAndCommand
.3394	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.3396	f0 f2		beq $338a			beq 	_CRDefaultLet
.3398	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.339a	f0 ee		beq $338a			beq 	_CRDefaultLet
.339c	d0 29		bne $33c7			bne 	Unimplemented
.339e					_CRAndCommand:
.339e	c8		iny				iny 								; skip over the AND token
.339f	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.33a1	20 bb 33	jsr $33bb			jsr 	CommandAssembler 			; do the assembler command
.33a4	4c 52 33	jmp $3352			jmp 	CRNextInstruction 			; and loop round.
.33a7					CommandShift1:
.33a7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.33a9	10 1c		bpl $33c7			bpl 	Unimplemented 				; we have an error as this should not happen.
.33ab	c8		iny				iny 								; advance over it.
.33ac	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.33ae	b0 0b		bcs $33bb			bcs 	CommandAssembler
.33b0	0a		asl a				asl 	a 							; double into X
.33b1	aa		tax				tax
.33b2	7c b7 34	jmp ($34b7,x)			jmp 	(Group1Vectors-12,x)
.33b5					CommandShift2:
.33b5	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.33b7	20 74 18	jsr $1874		jsr	extensionHandler
.33ba	60		rts				rts
.33bb					CommandAssembler:
.33bb	a2 02		ldx #$02		ldx	#2
.33bd	20 ac 13	jsr $13ac		jsr	assemblerHandler
.33c0	60		rts				rts
.33c1					CommandAssemblerLabel:
.33c1	a2 04		ldx #$04		ldx	#4
.33c3	20 ac 13	jsr $13ac		jsr	assemblerHandler
.33c6	60		rts				rts
.33c7					Unimplemented:
.33c7	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.33c9	20 27 15	jsr $1527		jsr	errorHandler
.33cc					CommandColon:
.33cc	60		rts				rts
.33cd					CommandBreak:
.33cd	20 b7 38	jsr $38b7			jsr 	EvaluateRootInteger
.33d0	20 5f 3f	jsr $3f5f			jsr 	MInt32Zero
.33d3	f0 02		beq $33d7			beq 	BreakOff
.33d5					BreakOn:
.33d5	a2 04		ldx #$04			ldx 	#4 							; checks 1 in 256/X instructions.
.33d7					BreakOff:
.33d7	8e c9 0d	stx $0dc9			stx 	breakIncrement
.33da	60		rts				rts
.33db					ResetCodeAddress:
.33db	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.33de	85 28		sta $28				sta 	codePtr
.33e0	ad c9 0a	lda $0ac9			lda 	basePage+1
.33e3	85 29		sta $29				sta 	codePtr+1
.33e5	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.33e7	60		rts				rts
.33e8					TKErr01:
.33e8					TKErr02:
.33e8					TKErr03:
.33e8					TKErr04:
.33e8					TKErr05:
.33e8					TKErr06:
.33e8					TKErr07:
.33e8					TKErr08:
.33e8					TKErr09:
.33e8					TKErr10:
.33e8					TKErr11:
.33e8					TKErr12:
.33e8					TKErr14:
.33e8					TKErr15:
.33e8					TKErr16:
.33e8					TKErr17:
.33e8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.33ea	20 27 15	jsr $1527		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.33ed					Group0Vectors:
>33ed	1b 2d					.word	AdvanceNextLine          ; $80 [[eol]]
>33ef	a7 33					.word	CommandShift1            ; $81 [[sh1]]
>33f1	b5 33					.word	CommandShift2            ; $82 [[sh2]]
>33f3	e8 33					.word	TKErr09                  ; $83 [[sh3]]
>33f5	e8 33					.word	TKErr10                  ; $84 [[fpc]]
>33f7	e8 33					.word	TKErr08                  ; $85 [[str]]
>33f9	a0 35					.word	AndHandler               ; $86 and
>33fb	8d 35					.word	OrHandler                ; $87 or
>33fd	7a 35					.word	XorHandler               ; $88 xor
>33ff	c2 36					.word	CompareGreaterEq         ; $89 >=
>3401	cc 36					.word	CompareLessEq            ; $8a <=
>3403	ae 36					.word	CompareGreater           ; $8b >
>3405	a4 36					.word	CompareLess              ; $8c <
>3407	9a 36					.word	CompareEquals            ; $8d =
>3409	b8 36					.word	CompareNotEquals         ; $8e <>
>340b	0b 35					.word	AddHandler               ; $8f +
>340d	2e 35					.word	SubHandler               ; $90 -
>340f	c6 35					.word	ShrHandler               ; $91 >>
>3411	b3 35					.word	ShlHandler               ; $92 <<
>3413	41 35					.word	MulHandler               ; $93 *
>3415	54 35					.word	DivHandler               ; $94 /
>3417	67 35					.word	ModHandler               ; $95 mod
>3419	ff 35					.word	PowerHandler             ; $96 ^
>341b	d9 35					.word	WordRefHandler           ; $97 !
>341d	ec 35					.word	ByteRefHandler           ; $98 ?
>341f	c4 30					.word	Command_Repeat           ; $99 repeat
>3421	6e 31					.word	Command_While            ; $9a while
>3423	2f 2d					.word	Command_FOR              ; $9b for
>3425	35 2e					.word	CommandIf                ; $9c if
>3427	e8 33					.word	TKErr04                  ; $9d defproc
>3429	d1 30					.word	Command_Until            ; $9e until
>342b	91 31					.word	Command_Wend             ; $9f wend
>342d	8c 2d					.word	Command_NEXT             ; $a0 next
>342f	e8 33					.word	TKErr06                  ; $a1 then
>3431	70 2e					.word	Command_ENDIF            ; $a2 endif
>3433	d7 2f					.word	ReturnProc               ; $a3 endproc
>3435	24 38					.word	UnaryParenthesis         ; $a4 (
>3437	fe 39					.word	UnaryLen                 ; $a5 len(
>3439	42 3a					.word	UnarySgn                 ; $a6 sgn(
>343b	2b 3a					.word	UnaryAbs                 ; $a7 abs(
>343d	9b 3a					.word	Unary_Random             ; $a8 random(
>343f	e5 3a					.word	Unary_Page               ; $a9 page
>3441	34 3f					.word	MInt32True               ; $aa true
>3443	38 3f					.word	MInt32False              ; $ab false
>3445	b0 3a					.word	Unary_Min                ; $ac min(
>3447	b4 3a					.word	Unary_Max                ; $ad max(
>3449	bb 3b					.word	UnarySys                 ; $ae sys(
>344b	66 3b					.word	UnaryTimer               ; $af timer(
>344d	80 39					.word	EventFunction            ; $b0 event(
>344f	8d 3b					.word	UnaryGet                 ; $b1 get(
>3451	7d 3b					.word	UnaryInkey               ; $b2 inkey(
>3453	36 3b					.word	UnaryAlloc               ; $b3 alloc(
>3455	f0 3b					.word	ExecChr                  ; $b4 chr$(
>3457	1c 3c					.word	ExecLeft                 ; $b5 left$(
>3459	39 3c					.word	ExecMid                  ; $b6 mid$(
>345b	61 3c					.word	ExecRight                ; $b7 right$(
>345d	05 39					.word	Event_Str                ; $b8 str$(
>345f	34 39					.word	UnaryVal                 ; $b9 val(
>3461	59 3a					.word	UnaryPeek                ; $ba peek(
>3463	5f 3a					.word	UnaryDeek                ; $bb deek(
>3465	65 3a					.word	UnaryLeek                ; $bc leek(
>3467	1c 3a					.word	UnaryAsc                 ; $bd asc(
>3469	10 3b					.word	UnaryIntToFloat          ; $be int(
>346b	23 3b					.word	UnaryFloatToInt          ; $bf float(
>346d	37 39					.word	UnaryIsVal               ; $c0 isval(
>346f	05 3c					.word	ExecUpper                ; $c1 upper$(
>3471	02 3c					.word	ExecLower                ; $c2 lower$(
>3473	f3 3a					.word	UnaryReference           ; $c3 @
>3475	09 3b					.word	UnaryComplement          ; $c4 ~
>3477	06 3b					.word	UnaryHexMarker           ; $c5 &
>3479	a6 3b					.word	UnaryGetString           ; $c6 get$(
>347b	ac 3b					.word	UnaryInkeyString         ; $c7 inkey$(
>347d	df 3b					.word	UnaryMem                 ; $c8 mem
>347f	e8 33					.word	TKErr01                  ; $c9 )
>3481	cc 33					.word	CommandColon             ; $ca :
>3483	e8 33					.word	TKErr02                  ; $cb ,
>3485	e8 33					.word	TKErr03                  ; $cc ;
>3487	03 2d					.word	Command_Rem2             ; $cd '
>3489	e8 33					.word	TKErr07                  ; $ce to
>348b	e8 33					.word	TKErr05                  ; $cf step
>348d	6a 2f					.word	CallProc                 ; $d0 proc
>348f	71 2e					.word	CommandLocal             ; $d1 local
>3491	3c 2c					.word	Command_Dim              ; $d2 dim
>3493	03 2d					.word	Command_Rem              ; $d3 rem
>3495	4a 2c					.word	CommandLet               ; $d4 let
>3497	90 2a					.word	Command_Input            ; $d5 input
>3499	6a 2e					.word	Command_ELSE             ; $d6 else
>349b	0d 2c					.word	Command_VDU              ; $d7 vdu
>349d	44 2b					.word	Command_Print            ; $d8 print
>349f	fa 29					.word	CommandData              ; $d9 data
>34a1	74 24					.word	Command_Image            ; $da image
>34a3	e8 33					.word	TKErr12                  ; $db at
>34a5	e8 33					.word	TKErr14                  ; $dc flip
>34a7	2e 2c					.word	Command_Assert           ; $dd assert
>34a9	c6 2c					.word	Command_Poke             ; $de poke
>34ab	ca 2c					.word	Command_Doke             ; $df doke
>34ad	ce 2c					.word	Command_Loke             ; $e0 loke
>34af	df 2b					.word	Command_Ink              ; $e1 ink
>34b1	ea 2b					.word	Command_Paper            ; $e2 paper
>34b3	d9 2b					.word	Command_CLS              ; $e3 cls
>34b5	f5 2b					.word	Command_Locate           ; $e4 locate
>34b7	c1 33					.word	CommandAssemblerLabel    ; $e5 .
>34b9	e8 33					.word	TKErr15                  ; $e6 from
>34bb	e8 33					.word	TKErr11                  ; $e7 #
>34bd	a9 31					.word	CommandClear             ; $e8 clear
>34bf	e8 33					.word	TKErr16                  ; $e9 text
>34c1	e8 33					.word	TKErr17                  ; $ea type

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.34c3					Group1Vectors:
>34c3	dd 32					.word	CommandLoad              ; $86 load
>34c5	f2 32					.word	CommandSave              ; $87 save
>34c7	02 32					.word	CommandList              ; $88 list
>34c9	36 33					.word	Command_New              ; $89 new
>34cb	cd 33					.word	CommandBreak             ; $8a break
>34cd	44 33					.word	Command_Run              ; $8b run
>34cf	cf 29					.word	CommandRead              ; $8c read
>34d1	03 2a					.word	CommandRestore           ; $8d restore
>34d3	15 2d					.word	CommandEnd               ; $8e end
>34d5	10 2d					.word	CommandStop              ; $8f stop
>34d7	18 2d					.word	CommandXemu              ; $90 xemu
>34d9	5e 2a					.word	CommandGOTO              ; $91 goto
>34db	33 2a					.word	CommandGOSUB             ; $92 gosub
>34dd	46 2a					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.34df					BinaryProcess:
.34df	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.34e1	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.34e3	0a		asl a				asl 	a
.34e4	30 0e		bmi $34f4			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.34e6	18		clc				clc 								; return CC for integer
.34e7	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.34e9	f0 08		beq $34f3			beq 	_BPExit 					; if both integer then return with CC.
.34eb	20 f9 34	jsr $34f9			jsr 	BPMakeBothFloat 			; make both float
.34ee	a9 01		lda #$01			lda 	#$01 						; set result type to float
.34f0	95 90		sta $90,x			sta 	esType,x
.34f2	38		sec				sec 								; and return with carry set.
.34f3					_BPExit:
.34f3	60		rts				rts
.34f4					_BPStringType:
.34f4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.34f6	20 27 15	jsr $1527		jsr	errorHandler
.34f9					BPMakeBothFloat:
.34f9	e8		inx				inx
.34fa	20 fe 34	jsr $34fe			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.34fd	ca		dex				dex
.34fe					BPMakeFloat:
.34fe	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.3500	4a		lsr a				lsr 	a
.3501	b0 07		bcs $350a			bcs 	_BPIsFloat 					; already a float if set.
.3503	8a		txa				txa
.3504	a2 1c		ldx #$1c		ldx	#28
.3506	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3509	aa		tax				tax
.350a					_BPIsFloat:
.350a	60		rts				rts
.350b					AddHandler:
.350b	20 dc 36	jsr $36dc			jsr 	DereferenceTwo 				; dereference top two on stack.
.350e	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.3510	35 91		and $91,x			and 	esType+1,x
.3512	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.3514	d0 10		bne $3526			bne 	_AHStringConcat				; concatenate strings.
.3516	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.3519	b0 03		bcs $351e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.351b	4c 1e 3e	jmp $3e1e			jmp 	MInt32Add 							; else do it as integer.
.351e					_IsFPOperation:
.351e	8a		txa				txa 								; call the relevant fp routine
.351f	a2 04		ldx #$04		ldx	#4
.3521	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3524	aa		tax				tax
.3525	60		rts				rts
.3526					_AHStringConcat:
.3526	8a		txa				txa 								; handled by the string module.
.3527	a2 06		ldx #$06		ldx	#6
.3529	20 cf 42	jsr $42cf		jsr	stringHandler
.352c	aa		tax				tax
.352d	60		rts				rts
.352e					SubHandler:
.352e	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.3531	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.3534	b0 03		bcs $3539			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3536	4c 38 3e	jmp $3e38			jmp 	MInt32Sub 							; else do it as integer.
.3539					_IsFPOperation:
.3539	8a		txa				txa 								; call the relevant fp routine
.353a	a2 12		ldx #$12		ldx	#18
.353c	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.353f	aa		tax				tax
.3540	60		rts				rts
.3541					MulHandler:
.3541	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.3544	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.3547	b0 03		bcs $354c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3549	4c 52 3e	jmp $3e52			jmp 	MInt32Multiply 							; else do it as integer.
.354c					_IsFPOperation:
.354c	8a		txa				txa 								; call the relevant fp routine
.354d	a2 0c		ldx #$0c		ldx	#12
.354f	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3552	aa		tax				tax
.3553	60		rts				rts
.3554					DivHandler:
.3554	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.3557	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.355a	b0 03		bcs $355f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.355c	4c 12 3d	jmp $3d12			jmp 	MInt32SDivide 							; else do it as integer.
.355f					_IsFPOperation:
.355f	8a		txa				txa 								; call the relevant fp routine
.3560	a2 08		ldx #$08		ldx	#8
.3562	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3565	aa		tax				tax
.3566	60		rts				rts
.3567					ModHandler:
.3567	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.356a	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.356d	b0 03		bcs $3572			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.356f	4c 90 3d	jmp $3d90			jmp 	MInt32Modulus 							; else do it as integer.
.3572					_IsFPOperation:
.3572	8a		txa				txa 								; call the relevant fp routine
.3573	a2 0a		ldx #$0a		ldx	#10
.3575	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3578	aa		tax				tax
.3579	60		rts				rts
.357a					XorHandler:
.357a	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.357d	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.3580	b0 03		bcs $3585			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3582	4c c4 3c	jmp $3cc4			jmp 	MInt32Xor 							; else do it as integer.
.3585					_IsFPOperation:
.3585	8a		txa				txa 								; call the relevant fp routine
.3586	a2 0a		ldx #$0a		ldx	#10
.3588	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.358b	aa		tax				tax
.358c	60		rts				rts
.358d					OrHandler:
.358d	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.3590	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.3593	b0 03		bcs $3598			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3595	4c ab 3c	jmp $3cab			jmp 	MInt32Or 							; else do it as integer.
.3598					_IsFPOperation:
.3598	8a		txa				txa 								; call the relevant fp routine
.3599	a2 0a		ldx #$0a		ldx	#10
.359b	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.359e	aa		tax				tax
.359f	60		rts				rts
.35a0					AndHandler:
.35a0	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.35a3	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.35a6	b0 03		bcs $35ab			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35a8	4c 92 3c	jmp $3c92			jmp 	MInt32And 							; else do it as integer.
.35ab					_IsFPOperation:
.35ab	8a		txa				txa 								; call the relevant fp routine
.35ac	a2 0a		ldx #$0a		ldx	#10
.35ae	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.35b1	aa		tax				tax
.35b2	60		rts				rts
.35b3					ShlHandler:
.35b3	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.35b6	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.35b9	b0 03		bcs $35be			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35bb	4c 34 36	jmp $3634			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.35be					_IsFPOperation:
.35be	8a		txa				txa 								; call the relevant fp routine
.35bf	a2 0a		ldx #$0a		ldx	#10
.35c1	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.35c4	aa		tax				tax
.35c5	60		rts				rts
.35c6					ShrHandler:
.35c6	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.35c9	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.35cc	b0 03		bcs $35d1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35ce	4c 37 36	jmp $3637			jmp 	MInt32ShiftRightX 							; else do it as integer.
.35d1					_IsFPOperation:
.35d1	8a		txa				txa 								; call the relevant fp routine
.35d2	a2 0a		ldx #$0a		ldx	#10
.35d4	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.35d7	aa		tax				tax
.35d8	60		rts				rts
.35d9					WordRefHandler:
.35d9	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.35dc	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.35df	b0 03		bcs $35e4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35e1	4c 26 36	jmp $3626			jmp 	MInt32WordIndirect 							; else do it as integer.
.35e4					_IsFPOperation:
.35e4	8a		txa				txa 								; call the relevant fp routine
.35e5	a2 0a		ldx #$0a		ldx	#10
.35e7	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.35ea	aa		tax				tax
.35eb	60		rts				rts
.35ec					ByteRefHandler:
.35ec	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.35ef	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.35f2	b0 03		bcs $35f7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35f4	4c 2a 36	jmp $362a			jmp 	MInt32ByteIndirect 							; else do it as integer.
.35f7					_IsFPOperation:
.35f7	8a		txa				txa 								; call the relevant fp routine
.35f8	a2 0a		ldx #$0a		ldx	#10
.35fa	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.35fd	aa		tax				tax
.35fe	60		rts				rts
.35ff					PowerHandler:
.35ff	20 dc 36	jsr $36dc			jsr 	DereferenceTwo
.3602	20 df 34	jsr $34df			jsr 	BinaryProcess 				; check to see if either is float
.3605	b0 03		bcs $360a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3607	4c 12 36	jmp $3612			jmp 	PowerInteger 							; else do it as integer.
.360a					_IsFPOperation:
.360a	8a		txa				txa 								; call the relevant fp routine
.360b	a2 18		ldx #$18		ldx	#24
.360d	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3610	aa		tax				tax
.3611	60		rts				rts
.3612					PowerInteger:
.3612	20 f9 34	jsr $34f9			jsr 	BPMakeBothFloat				; make them float.
.3615	8a		txa				txa
.3616	a2 18		ldx #$18		ldx	#24
.3618	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.361b	a2 14		ldx #$14		ldx	#20
.361d	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3620	aa		tax				tax
.3621	a9 00		lda #$00			lda 	#0 							; make type integer
.3623	95 90		sta $90,x			sta 	esType,x
.3625	60		rts				rts
.3626					Mint32WordIndirect:
.3626	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.3628	d0 02		bne $362c			bne 	Min32Indirect
.362a					Mint32ByteIndirect:
.362a	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.362c					Min32Indirect:
.362c	48		pha				pha 								; save the indirection
.362d	20 1e 3e	jsr $3e1e			jsr 	MInt32Add 					; add a!b a?b
.3630	68		pla				pla 								; and set the type to reference.
.3631	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.3633	60		rts				rts
.3634					Mint32ShiftLeftX:
.3634	18		clc				clc 								; CC shift left
.3635	90 01		bcc $3638			bcc 	Mint32Shift
.3637					Mint32ShiftRightX:
.3637	38		sec				sec 								; CS shift right
.3638					Mint32Shift:
.3638	08		php				php 								; save carry flag on stack.
.3639	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.363b	15 a9		ora $a9,x			ora 	esInt2+1,x
.363d	15 b1		ora $b1,x			ora 	esInt3+1,x
.363f	d0 1e		bne $365f			bne 	_MShiftZero
.3641	b5 99		lda $99,x			lda 	esInt0+1,x
.3643	c9 20		cmp #$20			cmp 	#32
.3645	b0 18		bcs $365f			bcs 	_MShiftZero
.3647					_MShiftLoop:
.3647	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3649	f0 12		beq $365d			beq 	_MShiftExit
.364b	d6 99		dec $99,x			dec 	esInt0+1,x
.364d	28		plp				plp 								; restore and save carry
.364e	08		php				php
.364f	90 06		bcc $3657			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3651	20 56 3f	jsr $3f56			jsr 	Mint32ShiftRight
.3654	4c 47 36	jmp $3647			jmp 	_MShiftLoop
.3657					_MShiftLeft:
.3657	20 4d 3f	jsr $3f4d			jsr 	Mint32ShiftLeft
.365a	4c 47 36	jmp $3647			jmp 	_MShiftLoop
.365d					_MShiftExit:
.365d	28		plp				plp	 								; throw saved carry and exit
.365e	60		rts				rts
.365f					_MShiftZero:
.365f	4c 38 3f	jmp $3f38			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.3662					PerformComparison:
.3662	20 dc 36	jsr $36dc			jsr 	DereferenceTwo 				; make both values.
.3665	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.3667	35 91		and $91,x			and 	esType+1,x
.3669	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.366a	30 1d		bmi $3689			bmi 	_PCIsString
.366c	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.366e	15 91		ora $91,x			ora 	esType+1,x
.3670	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3671	30 22		bmi $3695			bmi 	_PCError
.3673	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.3675	f0 0f		beq $3686			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3677	20 f9 34	jsr $34f9			jsr 	BPMakeBothFloat 			; make both float
.367a	8a		txa				txa
.367b	a2 06		ldx #$06		ldx	#6
.367d	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3680	86 32		stx $32				stx 	tempShort 					; save result
.3682	aa		tax				tax
.3683	a5 32		lda $32				lda 	tempShort
.3685	60		rts				rts
.3686					_PCIsInteger:
.3686	4c dd 3c	jmp $3cdd			jmp 	MInt32Compare
.3689					_PCIsString:
.3689	8a		txa				txa 								; A has SP
.368a	a2 0a		ldx #$0a		ldx	#10
.368c	20 cf 42	jsr $42cf		jsr	stringHandler
.368f	86 32		stx $32				stx 	tempShort 					; save result
.3691	aa		tax				tax 								; put SP back in X and get result.
.3692	a5 32		lda $32				lda 	tempShort
.3694	60		rts				rts
.3695					_PCError:
.3695	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3697	20 27 15	jsr $1527		jsr	errorHandler
.369a					CompareEquals:
.369a	20 62 36	jsr $3662			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.369d	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.369f	f0 35		beq $36d6			beq  	CompareTrue
.36a1	4c d9 36	jmp $36d9			jmp 	CompareFalse
.36a4					CompareLess:
.36a4	20 62 36	jsr $3662			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36a7	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.36a9	f0 2b		beq $36d6			beq  	CompareTrue
.36ab	4c d9 36	jmp $36d9			jmp 	CompareFalse
.36ae					CompareGreater:
.36ae	20 62 36	jsr $3662			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36b1	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.36b3	f0 21		beq $36d6			beq  	CompareTrue
.36b5	4c d9 36	jmp $36d9			jmp 	CompareFalse
.36b8					CompareNotEquals:
.36b8	20 62 36	jsr $3662			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36bb	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.36bd	d0 17		bne $36d6			bne  	CompareTrue
.36bf	4c d9 36	jmp $36d9			jmp 	CompareFalse
.36c2					CompareGreaterEq:
.36c2	20 62 36	jsr $3662			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36c5	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.36c7	d0 0d		bne $36d6			bne  	CompareTrue
.36c9	4c d9 36	jmp $36d9			jmp 	CompareFalse
.36cc					CompareLessEq:
.36cc	20 62 36	jsr $3662			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36cf	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.36d1	d0 03		bne $36d6			bne  	CompareTrue
.36d3	4c d9 36	jmp $36d9			jmp 	CompareFalse
.36d6					CompareTrue:
.36d6	4c 34 3f	jmp $3f34			jmp 	MInt32True
.36d9					CompareFalse:
.36d9	4c 38 3f	jmp $3f38			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.36dc					DereferenceTwo:
.36dc	e8		inx				inx
.36dd	20 e1 36	jsr $36e1			jsr 	DereferenceOne
.36e0	ca		dex				dex
.36e1					DereferenceOne:
.36e1	b5 90		lda $90,x			lda 	esType,x
.36e3	10 3b		bpl $3720			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.36e5	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.36e6	b0 39		bcs $3721			bcs 	_DRFloatDeReference
.36e8	5a		phy				phy
.36e9	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.36eb	85 2a		sta $2a				sta 	temp0
.36ed	b5 a0		lda $a0,x			lda 	esInt1,x
.36ef	85 2b		sta $2b				sta 	temp0+1
.36f1	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.36f3	95 a0		sta $a0,x			sta 	esInt1,x
.36f5	95 a8		sta $a8,x			sta 	esInt2,x
.36f7	95 b0		sta $b0,x			sta 	esInt3,x
.36f9	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.36fb	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.36fd	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.36fe	30 0d		bmi $370d			bmi 	_DeRefString 				; string, 2 bytes only
.3700	d0 11		bne $3713			bne 	_DeRefByte 					; byte 1 byte only
.3702					_DeRefLong:
.3702	a0 03		ldy #$03			ldy 	#3
.3704	b1 2a		lda ($2a),y			lda 	(temp0),y
.3706	95 b0		sta $b0,x			sta 	esInt3,x
.3708	88		dey				dey
.3709	b1 2a		lda ($2a),y			lda 	(temp0),y
.370b	95 a8		sta $a8,x			sta 	esInt2,x
.370d					_DeRefString:
.370d	a0 01		ldy #$01			ldy 	#1
.370f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3711	95 a0		sta $a0,x			sta 	esInt1,x
.3713					_DeRefByte:
.3713	a0 00		ldy #$00			ldy 	#0
.3715	b1 2a		lda ($2a),y			lda 	(temp0),y
.3717	95 98		sta $98,x			sta 	esInt0,x
.3719	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.371b	29 40		and #$40			and 	#$40
.371d	95 90		sta $90,x			sta 	esType,x
.371f	7a		ply				ply
.3720					_DRNotReference
.3720	60		rts				rts
.3721					_DRFloatDereference:
.3721	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0 					; address to deref in temp0
.3724	8a		txa				txa
.3725	a2 1e		ldx #$1e		ldx	#30
.3727	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.372a	aa		tax				tax
.372b	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.372d	95 90		sta $90,x			sta 	esType,x
.372f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.3730					EvaluateLevel:
.3730	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.3732	b0 1e		bcs $3752			bcs 	_ELStack
.3734	48		pha				pha 								; save precedence level.
.3735	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3737	95 98		sta $98,x			sta 	esInt0,x
.3739	95 a0		sta $a0,x			sta 	esInt1,x
.373b	95 a8		sta $a8,x			sta 	esInt2,x
.373d	95 b0		sta $b0,x			sta 	esInt3,x
.373f	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.3741	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.3743	30 26		bmi $376b			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.3745	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3746	30 0f		bmi $3757			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3748	8a		txa				txa 								; stack level in X
.3749	a2 02		ldx #$02		ldx	#2
.374b	20 16 4f	jsr $4f16		jsr	variableHandler
.374e	aa		tax				tax
.374f	4c 94 37	jmp $3794			jmp		_ELHasTerm
.3752					_ELStack:
.3752	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3754	20 27 15	jsr $1527		jsr	errorHandler
.3757					_ELIsConstant:
.3757	4a		lsr a				lsr 	a 							; get the value back
.3758	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.375a	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.375c					_ELCheckNext:
.375c	c8		iny				iny 								; look at next
.375d	b1 28		lda ($28),y			lda 	(codePtr),y
.375f	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.3761	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.3763	b0 2f		bcs $3794			bcs 	_ELHasTerm 					; done getting the constant.
.3765	20 2d 38	jsr $382d			jsr 	ELShiftByteIn 				; shift byte into position.
.3768	4c 5c 37	jmp $375c			jmp 	_ELCheckNext
.376b					_ELIsToken:
.376b	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.376d	f0 0f		beq $377e			beq 	_ELIsString
.376f	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3771	d0 5f		bne $37d2			bne 	_ELCheckUnary
.3773	8a		txa				txa 								; put X into A
.3774	c8		iny				iny 								; skip over the float marker
.3775	a2 1a		ldx #$1a		ldx	#26
.3777	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.377a	aa		tax				tax 								; restore X
.377b	4c 94 37	jmp $3794			jmp 	_ELHasTerm
.377e					_ELIsString:
.377e	98		tya				tya 								; address of string is codePtr+y+1
.377f	38		sec				sec
.3780	65 28		adc $28				adc 	codePtr
.3782	95 98		sta $98,x			sta 	esInt0,x
.3784	a5 29		lda $29				lda 	codePtr+1
.3786	69 00		adc #$00			adc 	#0
.3788	95 a0		sta $a0,x			sta 	esInt1,x
.378a	a9 40		lda #$40			lda 	#$40 						; set type to string value
.378c	95 90		sta $90,x			sta 	esType,x
.378e	c8		iny				iny 								; skip over string.
.378f	98		tya				tya
.3790	38		sec				sec									; +1 for the length itself.
.3791	71 28		adc ($28),y			adc 	(codePtr),y
.3793	a8		tay				tay 								; and fall through to term loop code.
.3794					_ELHasTerm:
.3794	b1 28		lda ($28),y			lda 	(codePtr),y
.3796	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3798	90 04		bcc $379e			bcc 	_ELPopExit
.379a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.379c	90 02		bcc $37a0			bcc 	_ELHasBinaryTerm
.379e					_ELPopExit:
.379e	68		pla				pla
.379f					_ELExit:
.379f	60		rts				rts
.37a0					_ELHasBinaryTerm:
.37a0	84 32		sty $32				sty 	tempShort 					; save position
.37a2	a8		tay				tay 								; use token as an index and get the precedence.
.37a3	b9 d5 37	lda $37d5,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.37a6	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.37a8	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.37aa	68		pla				pla 								; restore current level.
.37ab	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.37ad	b0 f0		bcs $379f			bcs 	_ELExit
.37af	48		pha				pha 								; save current level back on the stack.
.37b0	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.37b2	48		pha				pha
.37b3	c8		iny				iny
.37b4	e8		inx				inx 								; calculate the RHS at the operator precedence.
.37b5	a5 32		lda $32				lda 	tempShort
.37b7	20 30 37	jsr $3730			jsr 	EvaluateLevel
.37ba	ca		dex				dex
.37bb	68		pla				pla 								; get the operator back out.
.37bc					_ELExecuteA:
.37bc	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.37be	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.37bf	aa		tax				tax
.37c0	bd ed 33	lda $33ed,x			lda 	Group0Vectors,x
.37c3	85 2a		sta $2a				sta 	temp0
.37c5	bd ee 33	lda $33ee,x			lda 	Group0Vectors+1,x
.37c8	85 2b		sta $2b				sta 	temp0+1
.37ca	a6 32		ldx $32				ldx 	tempShort
.37cc	20 19 38	jsr $3819			jsr 	_ELCallTemp0
.37cf	4c 94 37	jmp $3794			jmp 	_ELHasTerm 					; and loop back round.
.37d2					_ELCheckUnary:
.37d2	c8		iny				iny 								; skip over token.
.37d3	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.37d5	f0 19		beq $37f0			beq 	_ELMinus
.37d7	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.37d9	f0 2c		beq $3807			beq 	_ELIndirect
.37db	c9 98		cmp #$98			cmp 	#TKW_QMARK
.37dd	f0 28		beq $3807			beq 	_ELIndirect
.37df	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.37e1	f0 39		beq $381c			beq 	_ELExtension
.37e3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.37e5	90 04		bcc $37eb			bcc 	_ELUSyntax
.37e7	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.37e9	90 d1		bcc $37bc			bcc 	_ELExecuteA 				; if so do that token.
.37eb					_ELUSyntax:
.37eb	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.37ed	20 27 15	jsr $1527		jsr	errorHandler
.37f0					_ELMinus:
.37f0	20 82 38	jsr $3882			jsr 	EvaluateNumericTerm 		; get a number to negate.
.37f3	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.37f5	f0 0a		beq $3801			beq 	_ELMinusInteger
.37f7	8a		txa				txa
.37f8	a2 0e		ldx #$0e		ldx	#14
.37fa	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.37fd	aa		tax				tax
.37fe	4c 94 37	jmp $3794			jmp 	_ELHasTerm
.3801					_ELMinusInteger:
.3801	20 f2 3e	jsr $3ef2			jsr 	MInt32Negate 				; do int negate
.3804	4c 94 37	jmp $3794			jmp 	_ELHasTerm
.3807					_ELIndirect:
.3807	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.3808	20 8b 38	jsr $388b			jsr 	EvaluateIntegerTerm 		; integer address
.380b	68		pla				pla
.380c	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.380e	f0 02		beq $3812			beq 	_ELHaveModifier
.3810	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.3812					_ELHaveModifier:
.3812	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.3814	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.3816	4c 94 37	jmp $3794			jmp 	_ELHasTerm
.3819					_ELCallTemp0:
.3819	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.381c					_ELExtension:
.381c	8a		txa				txa 								; stack pos in A
.381d	20 74 18	jsr $1874		jsr	extensionHandler
.3820	aa		tax				tax 								; restore stack
.3821	4c 94 37	jmp $3794			jmp 	_ELHasTerm
.3824					UnaryParenthesis:
.3824	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.3826	20 30 37	jsr $3730			jsr 	EvaluateLevel
.3829	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen 			; check for )
.382c	60		rts				rts
.382d					ELShiftByteIn:
.382d	48		pha				pha 								; save bits to shift in.
.382e	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.3830	48		pha				pha
.3831	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.3833	95 b0		sta $b0,x			sta 	esInt3,x
.3835	b5 a0		lda $a0,x			lda 	esInt1,x
.3837	95 a8		sta $a8,x			sta 	esInt2,x
.3839	b5 98		lda $98,x			lda 	esInt0,x
.383b	95 a0		sta $a0,x			sta 	esInt1,x
.383d	a9 00		lda #$00			lda 	#0
.383f	95 98		sta $98,x			sta 	esInt0,x
.3841	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.3842	29 03		and #$03			and 	#3 							; only want lower 2 bits
.3844	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3846					_ELShiftLoop:
.3846	4a		lsr a				lsr 	a
.3847	76 b0		ror $b0,x			ror 	esInt3,x
.3849	76 a8		ror $a8,x			ror 	esInt2,x
.384b	76 a0		ror $a0,x			ror 	esInt1,x
.384d	76 98		ror $98,x			ror 	esInt0,x
.384f	c9 01		cmp #$01			cmp 	#1
.3851	d0 f3		bne $3846			bne 	_ELShiftLoop
.3853	68		pla				pla 								; get original 6 bit value and OR in.
.3854	29 3f		and #$3f			and 	#$3F
.3856	15 98		ora $98,x			ora 	esInt0,x
.3858	95 98		sta $98,x			sta 	esInt0,x
.385a	60		rts				rts
.385b					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>385b	01					.byte	$01			; $86 and
>385c	01					.byte	$01			; $87 or
>385d	01					.byte	$01			; $88 xor
>385e	02					.byte	$02			; $89 >=
>385f	02					.byte	$02			; $8a <=
>3860	02					.byte	$02			; $8b >
>3861	02					.byte	$02			; $8c <
>3862	02					.byte	$02			; $8d =
>3863	02					.byte	$02			; $8e <>
>3864	03					.byte	$03			; $8f +
>3865	03					.byte	$03			; $90 -
>3866	04					.byte	$04			; $91 >>
>3867	04					.byte	$04			; $92 <<
>3868	04					.byte	$04			; $93 *
>3869	04					.byte	$04			; $94 /
>386a	04					.byte	$04			; $95 mod
>386b	05					.byte	$05			; $96 ^
>386c	06					.byte	$06			; $97 !
>386d	06					.byte	$06			; $98 ?
>386e	82					.byte	$82			; $99 repeat
>386f	82					.byte	$82			; $9a while
>3870	82					.byte	$82			; $9b for
>3871	82					.byte	$82			; $9c if
>3872	82					.byte	$82			; $9d defproc
>3873	80					.byte	$80			; $9e until
>3874	80					.byte	$80			; $9f wend
>3875	80					.byte	$80			; $a0 next
>3876	80					.byte	$80			; $a1 then
>3877	80					.byte	$80			; $a2 endif
>3878	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3879					EvaluateTerm:
.3879	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.387b	20 30 37	jsr $3730			jsr 	EvaluateLevel
.387e	20 e1 36	jsr $36e1			jsr 	DereferenceOne
.3881	60		rts				rts
.3882					EvaluateNumericTerm:
.3882	20 79 38	jsr $3879			jsr 	EvaluateTerm
.3885	b5 90		lda $90,x			lda 	esType,x
.3887	0a		asl a				asl 	a 							; see if it's a string.
.3888	30 09		bmi $3893			bmi 	ENTType
.388a	60		rts				rts
.388b					EvaluateIntegerTerm:
.388b	20 79 38	jsr $3879			jsr 	EvaluateTerm
.388e	b5 90		lda $90,x			lda 	esType,x
.3890	d0 01		bne $3893			bne 	ENTType
.3892	60		rts				rts
.3893					ENTType:
.3893	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3895	20 27 15	jsr $1527		jsr	errorHandler
.3898					EvaluateRoot:
.3898	a2 00		ldx #$00			ldx 	#0
.389a					Evaluate:
.389a	a9 00		lda #$00			lda 	#0
.389c	20 30 37	jsr $3730			jsr 	EvaluateLevel
.389f	20 e1 36	jsr $36e1			jsr 	DereferenceOne
.38a2	60		rts				rts
.38a3					EvaluateNumeric:
.38a3	20 9a 38	jsr $389a			jsr 	Evaluate
.38a6	b5 90		lda $90,x			lda 	esType,x
.38a8	0a		asl a				asl 	a 							; see if it's a string.
.38a9	30 e8		bmi $3893			bmi 	ENTType
.38ab	4a		lsr a				lsr 	a 							; shift float flag into carry.
.38ac	4a		lsr a				lsr 	a
.38ad	60		rts				rts
.38ae					EvaluateString:
.38ae	20 9a 38	jsr $389a			jsr 	Evaluate
.38b1	b5 90		lda $90,x			lda 	esType,x
.38b3	0a		asl a				asl 	a 							; see if it's a string.
.38b4	10 dd		bpl $3893			bpl 	ENTType
.38b6	60		rts				rts
.38b7					EvaluateRootInteger:
.38b7	a2 00		ldx #$00			ldx 	#0
.38b9					EvaluateInteger:
.38b9	20 9a 38	jsr $389a			jsr 	Evaluate
.38bc	b5 90		lda $90,x			lda 	esType,x
.38be	d0 d3		bne $3893			bne 	ENTType
.38c0	60		rts				rts
.38c1					EvaluateSmallInteger:
.38c1	20 b9 38	jsr $38b9			jsr 	EvaluateInteger
.38c4	b5 a0		lda $a0,x			lda 	esInt1,x
.38c6	15 a8		ora $a8,x			ora 	esInt2,x
.38c8	15 b0		ora $b0,x			ora 	esInt3,x
.38ca	d0 03		bne $38cf			bne 	_ESIValue
.38cc	b5 98		lda $98,x			lda 	esInt0,x
.38ce	60		rts				rts
.38cf					_ESIValue:
.38cf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.38d1	20 27 15	jsr $1527		jsr	errorHandler
.38d4					LinkEvaluate:
.38d4	aa		tax				tax
.38d5	20 9a 38	jsr $389a			jsr 	Evaluate
.38d8	8a		txa				txa
.38d9	60		rts				rts
.38da					LinkEvaluateTerm:
.38da	aa		tax				tax
.38db	20 79 38	jsr $3879			jsr 	EvaluateTerm
.38de	8a		txa				txa
.38df	60		rts				rts
.38e0					LinkEvaluateInteger:
.38e0	aa		tax				tax
.38e1	20 b9 38	jsr $38b9			jsr 	EvaluateInteger
.38e4	8a		txa				txa
.38e5	60		rts				rts
.38e6					LinkEvaluateString:
.38e6	aa		tax				tax
.38e7	20 ae 38	jsr $38ae			jsr 	EvaluateString
.38ea	8a		txa				txa
.38eb	60		rts				rts
.38ec					LinkEvaluateSmallInt:
.38ec	aa		tax				tax
.38ed	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger
.38f0	8a		txa				txa
.38f1	60		rts				rts
.38f2					EvaluateReference:
.38f2	ad 6c 38	lda $386c			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.38f5	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.38f6	e9 01		sbc #$01			sbc 	#1
.38f8	20 30 37	jsr $3730			jsr 	EvaluateLevel
.38fb	b5 90		lda $90,x			lda 	esType,x
.38fd	10 01		bpl $3900			bpl 	_ERFail
.38ff	60		rts				rts
.3900					_ERFail:
.3900	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.3902	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.3905					Event_Str:
.3905	20 a3 38	jsr $38a3			jsr 	EvaluateNumeric 			; get a number.
.3908	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.390a	d0 13		bne $391f			bne 	_ESFloat
.390c	20 5f 39	jsr $395f			jsr 	ConvertGetBase 				; get base, or default.
.390f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3911	85 2a		sta $2a				sta 	temp0
.3913	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3915	85 2b		sta $2b				sta 	1+(temp0)
.3917	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3919	20 90 3e	jsr $3e90			jsr 	MInt32ToString 				; convert to string.
.391c	4c 2c 39	jmp $392c			jmp 	_ESCloneExit 				; clone and exit.
.391f					_ESFloat:
.391f	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen 			; check closing )
.3922	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3925	8a		txa				txa
.3926	a2 16		ldx #$16		ldx	#22
.3928	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.392b	aa		tax				tax
.392c					_ESCloneExit:
.392c	8a		txa				txa
.392d	a2 04		ldx #$04		ldx	#4
.392f	20 cf 42	jsr $42cf		jsr	stringHandler
.3932	aa		tax				tax
.3933	60		rts				rts
.3934					UnaryVal:
.3934	38		sec				sec 								; Carry set to return value
.3935	b0 01		bcs $3938			bcs 	ValueMain
.3937					UnaryIsVal:
.3937	18		clc				clc									; Carry clear to return legitimacy
.3938					ValueMain:
.3938	08		php				php 								; save results (CS is value, CC is validation)
.3939	20 ae 38	jsr $38ae			jsr 	EvaluateString
.393c	20 5f 39	jsr $395f			jsr 	ConvertGetBase 				; get base, if any.
.393f	5a		phy				phy
.3940	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3943	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3945	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3947	20 ab 3d	jsr $3dab			jsr 	MInt32FromString 			; convert it back from a string.
.394a	b0 0b		bcs $3957			bcs 	_VMSuccess 					; successfully converted.
.394c	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.394e	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3950	f0 00		beq $3952			beq 	_VMFailed 	 				; so we failed.
.3952					_VMFailed:
.3952	7a		ply				ply
.3953	28		plp				plp
.3954	4c 38 3f	jmp $3f38			jmp 	MInt32False 				; return 0 whatever.
.3957					_VMSuccess:
.3957	7a		ply				ply
.3958	28		plp				plp 								; if CS the it was val() so we want the value.
.3959	b0 03		bcs $395e			bcs 	_VMExit
.395b	4c 34 3f	jmp $3f34			jmp 	MInt32True 					; otherwise return true as successful.
.395e					_VMExit:
.395e	60		rts				rts
.395f					ConvertGetBase:
.395f	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3961	95 99		sta $99,x			sta 	esInt0+1,x
.3963	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3965	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3967	d0 0e		bne $3977			bne 	_CGBDone 					; not found, should be )
.3969	e8		inx				inx 								; next level
.396a	c8		iny				iny 								; skip comma.
.396b	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger		; evaluate the base.
.396e	ca		dex				dex
.396f	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3971	90 08		bcc $397b			bcc 	_CGBValue 					; (it should work as high as 37)
.3973	c9 11		cmp #$11			cmp 	#17
.3975	b0 04		bcs $397b			bcs 	_CGBValue
.3977					_CGBDone:
.3977	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen
.397a	60		rts				rts
.397b					_CGBValue:
.397b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.397d	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.3980					EventFunction:
.3980	20 f2 38	jsr $38f2			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3983	b5 90		lda $90,x			lda 	esType,x
.3985	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3987	d0 56		bne $39df			bne 	_EFType
.3989	20 b6 3f	jsr $3fb6			jsr 	CheckComma
.398c	e8		inx				inx
.398d	20 b9 38	jsr $38b9			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.3990	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen 			; finish off with the right bracket
.3993	ca		dex				dex
.3994	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3996	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3998	15 a8		ora $a8,x			ora 	esInt2,x
.399a	15 b0		ora $b0,x			ora 	esInt3,x
.399c	d0 3c		bne $39da			bne 	_EFValue
.399e	5a		phy				phy
.399f	da		phx				phx
.39a0	a2 1c		ldx #$1c		ldx	#28
.39a2	20 05 15	jsr $1505		jsr	deviceHandler
.39a5	84 2d		sty $2d				sty 	temp1+1
.39a7	85 2c		sta $2c				sta 	temp1
.39a9	fa		plx				plx
.39aa	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.39ad	a0 03		ldy #$03			ldy 	#3							; if -ve
.39af	b1 2a		lda ($2a),y			lda 	(temp0),y
.39b1	30 22		bmi $39d5			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.39b3	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.39b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.39b7	c8		iny				iny
.39b8	11 2a		ora ($2a),y			ora 	(temp0),y
.39ba	f0 16		beq $39d2			beq 	_EFInitialise 				; if so, initialise the value but return false.
.39bc	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.39be	38		sec				sec
.39bf	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c1	e5 2c		sbc $2c				sbc 	temp1
.39c3	c8		iny				iny
.39c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c6	e5 2d		sbc $2d				sbc 	temp1+1
.39c8	10 0b		bpl $39d5			bpl 	_EFFail 					; if trigger >= timer then return False
.39ca	20 e4 39	jsr $39e4			jsr 	SetEventTimer 				; reset the timer for next time.
.39cd	20 34 3f	jsr $3f34			jsr	 	MInt32True 					; and treutn true as fired.
.39d0	7a		ply				ply
.39d1	60		rts				rts
.39d2					_EFInitialise:
.39d2	20 e4 39	jsr $39e4			jsr		SetEventTimer 				; set trigger time to time + elapsed
.39d5					_EFFail:
.39d5	7a		ply				ply
.39d6	20 38 3f	jsr $3f38			jsr 	MInt32False
.39d9	60		rts				rts
.39da					_EFValue:
.39da	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.39dc	20 27 15	jsr $1527		jsr	errorHandler
.39df					_EFType:
.39df	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.39e1	20 27 15	jsr $1527		jsr	errorHandler
.39e4					SetEventTimer:
.39e4	a0 00		ldy #$00			ldy 	#0
.39e6	18		clc				clc
.39e7	a5 2c		lda $2c				lda 	temp1
.39e9	75 99		adc $99,x			adc 	esInt0+1,x
.39eb	91 2a		sta ($2a),y			sta		(temp0),y
.39ed	c8		iny				iny
.39ee	a5 2d		lda $2d				lda 	temp1+1
.39f0	75 a1		adc $a1,x			adc 	esInt1+1,x
.39f2	91 2a		sta ($2a),y			sta		(temp0),y
.39f4	88		dey				dey
.39f5	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.39f7	d0 04		bne $39fd			bne 	_SETExit 					; zero means initialise.....
.39f9	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.39fb	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.39fd					_SETExit:
.39fd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.39fe					UnaryLen:
.39fe	20 0c 3a	jsr $3a0c			jsr 	ULStart
.3a01					ULFinish:
.3a01	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3a03	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3a05	20 47 3f	jsr $3f47			jsr 	MInt32Set8Bit 				; write it out.
.3a08	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen
.3a0b	60		rts				rts
.3a0c	20 ae 38	jsr $38ae	ULStart:jsr 	EvaluateString
.3a0f	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3a11	85 2a		sta $2a				sta 	temp0
.3a13	b5 a0		lda $a0,x			lda 	esInt1,x
.3a15	85 2b		sta $2b				sta 	temp0+1
.3a17	84 32		sty $32				sty 	tempShort 					; get length
.3a19	a0 00		ldy #$00			ldy 	#0
.3a1b	60		rts				rts
.3a1c					UnaryAsc:
.3a1c	20 0c 3a	jsr $3a0c			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3a1f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3a21	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3a22	c9 00		cmp #$00			cmp 	#0
.3a24	d0 db		bne $3a01			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3a26	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3a28	20 27 15	jsr $1527		jsr	errorHandler
.3a2b					UnaryAbs:
.3a2b	20 a3 38	jsr $38a3			jsr 	EvaluateNumeric 			; some numeric value
.3a2e	b0 07		bcs $3a37			bcs 	_UAFloat 					; CS then float, so use that function
.3a30	20 ed 3e	jsr $3eed			jsr 	MInt32Absolute 				; int version
.3a33	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen
.3a36	60		rts				rts
.3a37					_UAFloat:
.3a37	8a		txa				txa 								; float version
.3a38	a2 02		ldx #$02		ldx	#2
.3a3a	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3a3d	aa		tax				tax
.3a3e	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen
.3a41	60		rts				rts
.3a42					UnarySgn:
.3a42	20 a3 38	jsr $38a3			jsr 	EvaluateNumeric 			; same as above but sign of value
.3a45	b0 07		bcs $3a4e			bcs 	_USFloat
.3a47	20 25 3f	jsr $3f25			jsr 	MInt32Sign
.3a4a	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen
.3a4d	60		rts				rts
.3a4e					_USFloat:
.3a4e	8a		txa				txa
.3a4f	a2 10		ldx #$10		ldx	#16
.3a51	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3a54	aa		tax				tax
.3a55	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen
.3a58	60		rts				rts
.3a59					UnaryPeek:
.3a59	20 85 3a	jsr $3a85			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3a5c	4c 79 3a	jmp $3a79			jmp 	PDLByte0
.3a5f					UnaryDeek:
.3a5f	20 85 3a	jsr $3a85			jsr 	PDLCode
.3a62	4c 73 3a	jmp $3a73			jmp 	PDLByte1
.3a65					UnaryLeek:
.3a65	20 85 3a	jsr $3a85			jsr 	PDLCode
.3a68	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3a6a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a6c	95 b0		sta $b0,x			sta 	esInt3,x
.3a6e	88		dey				dey
.3a6f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a71	95 a8		sta $a8,x			sta 	esInt2,x
.3a73					PDLByte1:
.3a73	a0 01		ldy #$01			ldy 	#1
.3a75	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a77	95 a0		sta $a0,x			sta 	esInt1,x
.3a79					PDLByte0:
.3a79	a0 00		ldy #$00			ldy 	#0
.3a7b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a7d	95 98		sta $98,x			sta 	esInt0,x
.3a7f	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3a81	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen 			; check right and return
.3a84	60		rts				rts
.3a85					PDLCode:
.3a85	20 b9 38	jsr $38b9			jsr 	EvaluateInteger 			; some address
.3a88	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3a8a	85 2a		sta $2a				sta 	temp0
.3a8c	b5 a0		lda $a0,x			lda 	esInt1,x
.3a8e	85 2b		sta $2b				sta 	temp0+1
.3a90	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3a92	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3a94	95 a8		sta $a8,x			sta 	esInt2,x
.3a96	95 b0		sta $b0,x			sta 	esInt3,x
.3a98	84 32		sty $32				sty 	tempShort 					; save Y
.3a9a	60		rts				rts
.3a9b					Unary_Random:
.3a9b	20 68 3f	jsr $3f68			jsr 	MInt32Random 				; generate random number.
.3a9e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3aa0	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3aa2	f0 08		beq $3aac			beq 	_URExit
.3aa4	e8		inx				inx 								; load range 0..r-1 into +1
.3aa5	20 b9 38	jsr $38b9			jsr 	EvaluateInteger
.3aa8	ca		dex				dex
.3aa9	20 90 3d	jsr $3d90			jsr 	MInt32Modulus 				; calculate random % modulus
.3aac					_URExit:
.3aac	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen 			; check right and return
.3aaf	60		rts				rts
.3ab0					Unary_Min:
.3ab0	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3ab2	d0 02		bne $3ab6			bne 	UnaryMBody
.3ab4					Unary_Max:
.3ab4	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3ab6					UnaryMBody:
.3ab6	48		pha				pha 								; save comparator on stack, shows min or max
.3ab7	20 9a 38	jsr $389a			jsr 	Evaluate 					; get the first thing to check
.3aba					_UnaryMLoop:
.3aba	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3abc	c8		iny				iny
.3abd	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3abf	f0 09		beq $3aca			beq 	_UnaryMExit
.3ac1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3ac3	f0 07		beq $3acc			beq 	_UnaryMCompare
.3ac5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3ac7	20 27 15	jsr $1527		jsr	errorHandler
.3aca					_UnaryMExit:
.3aca	68		pla				pla 								; done so throw comparator and return.
.3acb	60		rts				rts
.3acc					_UnaryMCompare:
.3acc	e8		inx				inx 								; get the 2nd thing to evaluate
.3acd	20 9a 38	jsr $389a			jsr 	Evaluate
.3ad0	ca		dex				dex
.3ad1	20 62 36	jsr $3662			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3ad4	85 32		sta $32				sta 	tempShort 					; save result
.3ad6	68		pla				pla 								; get what we need
.3ad7	48		pha				pha
.3ad8	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3ada	d0 de		bne $3aba			bne 	_UnaryMLoop 				; no, try another value.
.3adc	20 38 3f	jsr $3f38			jsr 	MInt32False 				; promote 2nd to 1st.
.3adf	20 1e 3e	jsr $3e1e			jsr 	MInt32Add
.3ae2	4c ba 3a	jmp $3aba			jmp 	_UnaryMLoop
.3ae5					Unary_Page:
.3ae5	20 38 3f	jsr $3f38			jsr 	MInt32False 				; zero
.3ae8	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3aeb	95 98		sta $98,x			sta 	esInt0,x
.3aed	ad c9 0a	lda $0ac9			lda 	basePage+1
.3af0	95 a0		sta $a0,x			sta 	esInt1,x
.3af2	60		rts				rts
.3af3					UnaryReference:
.3af3	a9 0f		lda #$0f			lda 	#15
.3af5	20 30 37	jsr $3730			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3af8	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.3afa	10 05		bpl $3b01			bpl 	UType
.3afc	a9 00		lda #$00			lda 	#0 							; make it an integer
.3afe	95 90		sta $90,x			sta 	esType,x
.3b00	60		rts				rts
.3b01					UType:
.3b01	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3b03	20 27 15	jsr $1527		jsr	errorHandler
.3b06					UnaryHexMarker:
.3b06	4c 8b 38	jmp $388b			jmp 	EvaluateIntegerTerm
.3b09					UnaryComplement:
.3b09	20 8b 38	jsr $388b			jsr 	EvaluateIntegerTerm
.3b0c	20 0c 3f	jsr $3f0c			jsr 	MInt32Not
.3b0f	60		rts				rts
.3b10					UnaryIntToFloat:
.3b10	20 a3 38	jsr $38a3			jsr 	EvaluateNumeric				; some number
.3b13	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3b15	d0 0b		bne $3b22			bne 	_UIFExit
.3b17	8a		txa				txa 								; convert and set type
.3b18	a2 1c		ldx #$1c		ldx	#28
.3b1a	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3b1d	aa		tax				tax
.3b1e	a9 01		lda #$01			lda 	#1
.3b20	95 90		sta $90,x			sta 	esType,x
.3b22					_UIFExit:
.3b22	60		rts				rts
.3b23					UnaryFloatToInt:
.3b23	20 a3 38	jsr $38a3			jsr 	EvaluateNumeric 			; the number
.3b26	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3b28	f0 0b		beq $3b35			beq 	_UFIExit
.3b2a	8a		txa				txa 								; convert to int
.3b2b	a2 14		ldx #$14		ldx	#20
.3b2d	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.3b30	aa		tax				tax
.3b31	a9 00		lda #$00			lda 	#0 							; set type
.3b33	95 90		sta $90,x			sta 	esType,x
.3b35					_UFIExit:
.3b35	60		rts				rts
.3b36					UnaryAlloc:
.3b36	e8		inx				inx 								; evaluate memory required
.3b37	20 b9 38	jsr $38b9			jsr 	EvaluateInteger
.3b3a	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen
.3b3d	ca		dex				dex
.3b3e	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3b40	15 b1		ora $b1,x			ora 	esInt3+1,x
.3b42	d0 1d		bne $3b61			bne 	_UABadValue
.3b44	20 38 3f	jsr $3f38			jsr 	MInt32False					; zero return.
.3b47	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3b49	95 a0		sta $a0,x			sta 	esInt1,x
.3b4b	a5 35		lda $35				lda 	lowMemory
.3b4d	95 98		sta $98,x			sta 	esInt0,x
.3b4f	18		clc				clc 								; add alloc required.
.3b50	75 99		adc $99,x			adc 	esInt0+1,x
.3b52	85 35		sta $35				sta 	lowMemory
.3b54	a5 36		lda $36				lda 	lowMemory+1
.3b56	75 a1		adc $a1,x			adc 	esInt1+1,x
.3b58	85 36		sta $36				sta 	lowMemory+1
.3b5a	b0 05		bcs $3b61			bcs		_UABadValue 				; overflow definitely bad.
.3b5c	c5 34		cmp $34				cmp 	highMemory+1
.3b5e	b0 01		bcs $3b61			bcs 	_UABadValue 				; out of memory bad.
.3b60	60		rts				rts
.3b61					_UABadValue:
.3b61	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3b63	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3b66					UnaryTimer:
.3b66	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen 			; no parameters
.3b69	5a		phy				phy
.3b6a	20 5f 3f	jsr $3f5f			jsr 	MInt32Zero 					; zero result
.3b6d	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3b6f	a2 1c		ldx #$1c		ldx	#28
.3b71	20 05 15	jsr $1505		jsr	deviceHandler
.3b74	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3b76	95 98		sta $98,x			sta 	esInt0,x
.3b78	98		tya				tya
.3b79	95 a0		sta $a0,x			sta 	esInt1,x
.3b7b	7a		ply				ply
.3b7c	60		rts				rts
.3b7d					UnaryInkey:
.3b7d	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen
.3b80	86 2a		stx $2a				stx 	temp0
.3b82	a2 08		ldx #$08		ldx	#8
.3b84	20 05 15	jsr $1505		jsr	deviceHandler
.3b87	a6 2a		ldx $2a				ldx 	temp0
.3b89	20 47 3f	jsr $3f47			jsr 	MInt32Set8Bit
.3b8c	60		rts				rts
.3b8d					UnaryGet:
.3b8d	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen
.3b90	86 2a		stx $2a				stx 	temp0
.3b92					_UGLoop:
.3b92	a2 18		ldx #$18		ldx	#24
.3b94	20 05 15	jsr $1505		jsr	deviceHandler
.3b97	a2 08		ldx #$08		ldx	#8
.3b99	20 05 15	jsr $1505		jsr	deviceHandler
.3b9c	c9 00		cmp #$00			cmp 	#0
.3b9e	f0 f2		beq $3b92			beq 	_UGLoop
.3ba0	a6 2a		ldx $2a				ldx 	temp0
.3ba2	20 47 3f	jsr $3f47			jsr 	MInt32Set8Bit
.3ba5	60		rts				rts
.3ba6					UnaryGetString:
.3ba6	20 8d 3b	jsr $3b8d			jsr 	UnaryGet
.3ba9					UGSDoChr:
.3ba9	4c f6 3b	jmp $3bf6			jmp 	ChrCode
.3bac					UnaryInkeyString:
.3bac	20 7d 3b	jsr $3b7d			jsr 	UnaryInkey
.3baf	b5 98		lda $98,x			lda 	esInt0,x
.3bb1	d0 f6		bne $3ba9			bne 	UGSDoChr
.3bb3	8a		txa				txa
.3bb4	a2 08		ldx #$08		ldx	#8
.3bb6	20 cf 42	jsr $42cf		jsr	stringHandler
.3bb9	aa		tax				tax
.3bba	60		rts				rts
.3bbb					UnarySys:
.3bbb	20 b9 38	jsr $38b9			jsr 	EvaluateInteger 				; get the address
.3bbe	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen
.3bc1	20 bd 2c	jsr $2cbd			jsr 	TOSToTemp0 						; copy call address to temp0
.3bc4	da		phx				phx
.3bc5	5a		phy				phy
.3bc6	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3bc9	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3bcc	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3bcf	20 dc 3b	jsr $3bdc			jsr 	_CallTemp0
.3bd2	85 32		sta $32				sta 	tempShort 						; restore YX
.3bd4	7a		ply				ply
.3bd5	fa		plx				plx
.3bd6	a5 32		lda $32				lda 	tempShort
.3bd8	20 47 3f	jsr $3f47			jsr 	MInt32Set8Bit 					; return result.
.3bdb	60		rts				rts
.3bdc					_CallTemp0:
.3bdc	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3bdf					UnaryMem:
.3bdf	20 38 3f	jsr $3f38			jsr 	MInt32False 					; set to false (e.g. 0)
.3be2	38		sec				sec
.3be3	a5 33		lda $33				lda 	highMemory 						; calculate value
.3be5	e5 35		sbc $35				sbc 	lowMemory
.3be7	95 98		sta $98,x			sta 	esInt0,x
.3be9	a5 34		lda $34				lda 	highMemory+1
.3beb	e5 36		sbc $36				sbc 	lowMemory+1
.3bed	95 a0		sta $a0,x			sta 	esInt1,x
.3bef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3bf0					ExecChr:
.3bf0	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger		; character number 0-255
.3bf3	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen				; right bracket
.3bf6					ChrCode:
.3bf6	5a		phy				phy
.3bf7	8a		txa				txa 								; A = stack
.3bf8	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3bfa	a2 02		ldx #$02		ldx	#2
.3bfc	20 cf 42	jsr $42cf		jsr	stringHandler
.3bff	aa		tax				tax 								; X = stack
.3c00	7a		ply				ply
.3c01	60		rts				rts
.3c02					ExecLower:
.3c02	38		sec				sec 								; set carry is lower
.3c03	b0 01		bcs $3c06			bcs 	ExecUpperLower
.3c05					ExecUpper:
.3c05	18		clc				clc 								; clear carry is upper
.3c06					ExecUpperLower:
.3c06	08		php				php 								; save carry
.3c07	20 ae 38	jsr $38ae			jsr 	EvaluateString 				; string to stack,X
.3c0a	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen 			; check closing right bracket.
.3c0d	28		plp				plp 								; restore carry, save Y
.3c0e	5a		phy				phy
.3c0f	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3c11	2a		rol a				rol 	a
.3c12	a8		tay				tay 								; now in Y
.3c13	8a		txa				txa 								; do the substring and exit.
.3c14	a2 0c		ldx #$0c		ldx	#12
.3c16	20 cf 42	jsr $42cf		jsr	stringHandler
.3c19	aa		tax				tax
.3c1a	7a		ply				ply
.3c1b	60		rts				rts
.3c1c					ExecLeft:
.3c1c	20 ae 38	jsr $38ae			jsr 	EvaluateString 				; string to stack,X
.3c1f	20 b6 3f	jsr $3fb6			jsr 	CheckComma
.3c22	e8		inx				inx
.3c23	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3c25	20 47 3f	jsr $3f47			jsr 	MInt32Set8Bit
.3c28	e8		inx				inx
.3c29	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3c2c					ExecSubstring:
.3c2c	ca		dex				dex 								; fix up X
.3c2d	ca		dex				dex
.3c2e	20 a9 3f	jsr $3fa9			jsr 	CheckRightParen 			; check closing right bracket.
.3c31	8a		txa				txa 								; do the substring and exit.
.3c32	a2 0e		ldx #$0e		ldx	#14
.3c34	20 cf 42	jsr $42cf		jsr	stringHandler
.3c37	aa		tax				tax
.3c38	60		rts				rts
.3c39					ExecMid:
.3c39	20 ae 38	jsr $38ae			jsr 	EvaluateString 				; string to stack,X
.3c3c	20 b6 3f	jsr $3fb6			jsr 	CheckComma
.3c3f	e8		inx				inx
.3c40	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3c43	c9 00		cmp #$00			cmp 	#0
.3c45	f0 15		beq $3c5c			beq 	_EMValue
.3c47	e8		inx				inx
.3c48	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3c4a	20 47 3f	jsr $3f47			jsr 	MInt32Set8Bit
.3c4d	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3c4f	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3c51	f0 d9		beq $3c2c			beq 	ExecSubString
.3c53	20 b6 3f	jsr $3fb6			jsr 	CheckComma
.3c56	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3c59	4c 2c 3c	jmp $3c2c			jmp 	ExecSubString
.3c5c					_EMValue:
.3c5c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3c5e	20 27 15	jsr $1527		jsr	errorHandler
.3c61					ExecRight:
.3c61	20 ae 38	jsr $38ae			jsr 	EvaluateString 				; string to stack,X
.3c64	20 b6 3f	jsr $3fb6			jsr 	CheckComma
.3c67	e8		inx				inx
.3c68	20 c1 38	jsr $38c1			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3c6b	ca		dex				dex
.3c6c	5a		phy				phy
.3c6d	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3c6f	85 2a		sta $2a				sta 	temp0
.3c71	b5 a0		lda $a0,x			lda 	esInt1,x
.3c73	85 2b		sta $2b				sta 	temp0+1
.3c75	a0 00		ldy #$00			ldy 	#0 							; point to length
.3c77	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3c79	18		clc				clc 								; add 1.
.3c7a	69 01		adc #$01			adc 	#1
.3c7c	38		sec				sec
.3c7d	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3c7f	f0 02		beq $3c83			beq		_ERMake1 					; if zero, make it 1.
.3c81	b0 02		bcs $3c85			bcs		_EROkay
.3c83					_ERMake1:
.3c83	a9 01		lda #$01			lda 	#1 							; start position.
.3c85					_EROkay:
.3c85	e8		inx				inx 								; set start pos.
.3c86	95 98		sta $98,x			sta 	esInt0,x
.3c88	e8		inx				inx
.3c89	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3c8b	20 47 3f	jsr $3f47			jsr 	MInt32Set8Bit
.3c8e	7a		ply				ply
.3c8f	4c 2c 3c	jmp $3c2c			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3c92					MInt32And:
.3c92	b5 98		lda $98,x			lda 	esInt0,x
.3c94	35 99		and $99,x			and 	esInt0+1,x
.3c96	95 98		sta $98,x			sta 	esInt0,x
.3c98	b5 a0		lda $a0,x			lda 	esInt1,x
.3c9a	35 a1		and $a1,x			and 	esInt1+1,x
.3c9c	95 a0		sta $a0,x			sta 	esInt1,x
.3c9e	b5 a8		lda $a8,x			lda 	esInt2,x
.3ca0	35 a9		and $a9,x			and 	esInt2+1,x
.3ca2	95 a8		sta $a8,x			sta 	esInt2,x
.3ca4	b5 b0		lda $b0,x			lda 	esInt3,x
.3ca6	35 b1		and $b1,x			and 	esInt3+1,x
.3ca8	95 b0		sta $b0,x			sta 	esInt3,x
.3caa	60		rts				rts
.3cab					MInt32Or:
.3cab	b5 98		lda $98,x			lda 	esInt0,x
.3cad	15 99		ora $99,x			ora 	esInt0+1,x
.3caf	95 98		sta $98,x			sta 	esInt0,x
.3cb1	b5 a0		lda $a0,x			lda 	esInt1,x
.3cb3	15 a1		ora $a1,x			ora 	esInt1+1,x
.3cb5	95 a0		sta $a0,x			sta 	esInt1,x
.3cb7	b5 a8		lda $a8,x			lda 	esInt2,x
.3cb9	15 a9		ora $a9,x			ora 	esInt2+1,x
.3cbb	95 a8		sta $a8,x			sta 	esInt2,x
.3cbd	b5 b0		lda $b0,x			lda 	esInt3,x
.3cbf	15 b1		ora $b1,x			ora 	esInt3+1,x
.3cc1	95 b0		sta $b0,x			sta 	esInt3,x
.3cc3	60		rts				rts
.3cc4					MInt32Xor:
.3cc4	b5 98		lda $98,x			lda 	esInt0,x
.3cc6	55 99		eor $99,x			eor 	esInt0+1,x
.3cc8	95 98		sta $98,x			sta 	esInt0,x
.3cca	b5 a0		lda $a0,x			lda 	esInt1,x
.3ccc	55 a1		eor $a1,x			eor 	esInt1+1,x
.3cce	95 a0		sta $a0,x			sta 	esInt1,x
.3cd0	b5 a8		lda $a8,x			lda 	esInt2,x
.3cd2	55 a9		eor $a9,x			eor 	esInt2+1,x
.3cd4	95 a8		sta $a8,x			sta 	esInt2,x
.3cd6	b5 b0		lda $b0,x			lda 	esInt3,x
.3cd8	55 b1		eor $b1,x			eor 	esInt3+1,x
.3cda	95 b0		sta $b0,x			sta 	esInt3,x
.3cdc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3cdd					MInt32Compare:
.3cdd	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3cdf	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3ce1	d0 13		bne $3cf6			bne 	MInt32Compare2
.3ce3	b5 a0		lda $a0,x			lda 	esInt1,x
.3ce5	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3ce7	d0 0d		bne $3cf6			bne 	MInt32Compare2
.3ce9	b5 a8		lda $a8,x			lda 	esInt2,x
.3ceb	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3ced	d0 07		bne $3cf6			bne 	MInt32Compare2
.3cef	b5 b0		lda $b0,x			lda 	esInt3,x
.3cf1	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3cf3	d0 01		bne $3cf6			bne 	MInt32Compare2
.3cf5	60		rts				rts
.3cf6					MInt32Compare2:
.3cf6	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3cf8	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3cfa	b5 a0		lda $a0,x			lda		esInt1,x
.3cfc	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3cfe	b5 a8		lda $a8,x			lda		esInt2,x
.3d00	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d02	b5 b0		lda $b0,x			lda		esInt3,x
.3d04	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d06	50 02		bvc $3d0a			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3d08	49 80		eor #$80			eor 	#$80
.3d0a					_I32LNoOverflow
.3d0a	30 03		bmi $3d0f			bmi 	MInt32CLess					; if -ve then return $FF
.3d0c	a9 01		lda #$01			lda 	#$01						; else return $01
.3d0e	60		rts				rts
.3d0f					MInt32CLess:
.3d0f	a9 ff		lda #$ff			lda 	#$FF
.3d11	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3d12					MInt32SDivide:
.3d12	98		tya				tya  								; save Y, which is the count of negations
.3d13	48		pha				pha
.3d14	a0 00		ldy #$00			ldy 	#0 							; zero count
.3d16	20 2e 3d	jsr $3d2e			jsr 	_MInt32SRemSign 			; unsign TOS
.3d19	e8		inx				inx 								; unsign TOS+1
.3d1a	20 2e 3d	jsr $3d2e			jsr 	_MInt32SRemSign
.3d1d	ca		dex				dex
.3d1e	98		tya				tya 								; save sign count on stack
.3d1f	48		pha				pha
.3d20	20 37 3d	jsr $3d37			jsr 	MInt32UDivide 				; unsigned division
.3d23	68		pla				pla 								; get sign count back
.3d24	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3d26	f0 03		beq $3d2b			beq 	_I32SNoNeg
.3d28	20 f2 3e	jsr $3ef2			jsr 	MInt32Negate
.3d2b					_I32SNoNeg:
.3d2b	68		pla				pla 								; restoe Y and exit
.3d2c	a8		tay				tay
.3d2d	60		rts				rts
.3d2e					_MInt32SRemSign:
.3d2e	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3d30	10 04		bpl $3d36			bpl 	_MInt32SRSExit
.3d32	c8		iny				iny 								; increment the sign count
.3d33	20 f2 3e	jsr $3ef2			jsr 	MInt32Negate 				; negate the value.
.3d36					_MInt32SRSExit:
.3d36	60		rts				rts
.3d37					MInt32UDivide:
.3d37	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3d39	15 a1		ora $a1,x			ora 	esInt1+1,x
.3d3b	15 a2		ora $a2,x			ora 	esInt1+2,x
.3d3d	15 a3		ora $a3,x			ora 	esInt1+3,x
.3d3f	f0 4a		beq $3d8b			beq 	_MInt32DZero
.3d41	e8		inx				inx 								; clear A
.3d42	e8		inx				inx
.3d43	20 38 3f	jsr $3f38			jsr 	MInt32False
.3d46	ca		dex				dex
.3d47	ca		dex				dex
.3d48	98		tya				tya 								; save Y on the stack
.3d49	48		pha				pha
.3d4a	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3d4c					_MInt32UDLoop:
.3d4c	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3d4e	36 a0		rol $a0,x			rol 	esInt1,x
.3d50	36 a8		rol $a8,x			rol 	esInt2,x
.3d52	36 b0		rol $b0,x			rol 	esInt3,x
.3d54	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3d56	36 a2		rol $a2,x			rol 	esInt1+2,x
.3d58	36 aa		rol $aa,x			rol 	esInt2+2,x
.3d5a	36 b2		rol $b2,x			rol 	esInt3+2,x
.3d5c	38		sec				sec 								; calculate A-M saving result on the stack
.3d5d	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3d5f	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3d61	48		pha				pha
.3d62	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3d64	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3d66	48		pha				pha
.3d67	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3d69	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d6b	48		pha				pha
.3d6c	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3d6e	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d70	90 10		bcc $3d82			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3d72	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3d74	68		pla				pla
.3d75	95 aa		sta $aa,x			sta 	esInt2+2,x
.3d77	68		pla				pla
.3d78	95 a2		sta $a2,x			sta 	esInt1+2,x
.3d7a	68		pla				pla
.3d7b	95 9a		sta $9a,x			sta 	esInt0+2,x
.3d7d	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3d7f	4c 85 3d	jmp $3d85			jmp 	_MInt32Next 					; do the next iteration
.3d82					_MInt32NoSubtract:
.3d82	68		pla				pla
.3d83	68		pla				pla
.3d84	68		pla				pla
.3d85					_MInt32Next:
.3d85	88		dey				dey 								; do this 32 times.
.3d86	d0 c4		bne $3d4c			bne 	_MInt32UDLoop
.3d88	68		pla				pla 								; restore Y and exit
.3d89	a8		tay				tay
.3d8a	60		rts				rts
.3d8b					_MInt32DZero:
.3d8b	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3d8d	20 27 15	jsr $1527		jsr	errorHandler
.3d90					MInt32Modulus:
.3d90	20 37 3d	jsr $3d37			jsr 	MInt32UDivide 				; do the division.
.3d93	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3d95	95 b0		sta $b0,x			sta 	esInt3,x
.3d97	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3d99	95 a8		sta $a8,x			sta 	esInt2,x
.3d9b	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3d9d	95 a0		sta $a0,x			sta 	esInt1,x
.3d9f	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3da1	95 98		sta $98,x			sta 	esInt0,x
.3da3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0dca					fs32Length:
>0dca							.fill 	1
.3da4					LinkInt32FromString:
.3da4	aa		tax				tax
.3da5	98		tya				tya
.3da6	20 ab 3d	jsr $3dab			jsr 	MInt32FromString
.3da9	8a		txa				txa
.3daa	60		rts				rts
.3dab					MInt32FromString:
.3dab	85 32		sta $32				sta 	tempShort 					; save base
.3dad	5a		phy				phy
.3dae	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3db0	b1 2a		lda ($2a),y			lda 	(temp0),y
.3db2	8d ca 0d	sta $0dca			sta 	fs32Length
.3db5	f0 64		beq $3e1b			beq 	_I32FSFail2					; fail if length zero.
.3db7	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3db9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3dbb	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3dbd	d0 09		bne $3dc8			bne 	_I32FSNotNegative
.3dbf	ad ca 0d	lda $0dca			lda 	fs32Length 					; get length back.
.3dc2	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3dc4	f0 55		beq $3e1b			beq 	_I32FSFail2
.3dc6	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3dc8					_I32FSNotNegative:
.3dc8	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3dca	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3dcc	d0 02		bne $3dd0			bne 	_I32FSNN2
.3dce	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3dd0					_I32FSNN2:
.3dd0	48		pha				pha 								; save base + final sign on stack.
.3dd1	20 38 3f	jsr $3f38			jsr 	MInt32False 				; zero the return value.
.3dd4					_I32FSMainLoop:
.3dd4	68		pla				pla 								; get the base back into tempShort
.3dd5	48		pha				pha
.3dd6	29 7f		and #$7f			and 	#$7F
.3dd8	85 32		sta $32				sta 	tempShort
.3dda	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3ddc	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3dde	90 02		bcc $3de2			bcc 	_I32FSNotLC
.3de0	e9 20		sbc #$20			sbc 	#32
.3de2					_I32FSNotLC:
.3de2	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3de3	e9 30		sbc #$30			sbc 	#"0"
.3de5	90 33		bcc $3e1a			bcc 	_I32FSFail 					; nothing more to do.
.3de7	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3de9	90 06		bcc $3df1			bcc 	_I32FSValidate
.3deb	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3ded	90 2b		bcc $3e1a			bcc 	_I32FSFail
.3def	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3df1					_I32FSValidate:
.3df1	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3df3	b0 25		bcs $3e1a			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3df5	48		pha				pha 								; save the new digit value.
.3df6	e8		inx				inx 								; put base into next slot up on stack
.3df7	a5 32		lda $32				lda 	tempShort
.3df9	20 47 3f	jsr $3f47			jsr 	MInt32Set8Bit
.3dfc	ca		dex				dex
.3dfd	20 52 3e	jsr $3e52			jsr 	MInt32Multiply 				; multiply current by the base
.3e00	e8		inx				inx
.3e01	68		pla				pla  								; put additive into next slot
.3e02	20 47 3f	jsr $3f47			jsr 	MInt32Set8Bit
.3e05	ca		dex				dex
.3e06	20 1e 3e	jsr $3e1e			jsr 	MInt32Add 					; and add it
.3e09	c8		iny				iny 								; bump the character pointer
.3e0a	cc ca 0d	cpy $0dca			cpy 	fs32Length 					; until > length.
.3e0d	f0 c5		beq $3dd4			beq 	_I32FSMainLoop
.3e0f	90 c3		bcc $3dd4			bcc 	_I32FSMainLoop
.3e11					_I32FSDone:
.3e11	68		pla				pla 								; get base/final sign back
.3e12	10 03		bpl $3e17			bpl 	_I32FSNN3
.3e14	20 f2 3e	jsr $3ef2			jsr 	MInt32Negate 				; negate the result.
.3e17					_I32FSNN3:
.3e17	7a		ply				ply
.3e18	38		sec				sec
.3e19	60		rts				rts
.3e1a					_I32FSFail:
.3e1a	68		pla				pla
.3e1b					_I32FSFail2:
.3e1b	7a		ply				ply
.3e1c	18		clc				clc
.3e1d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3e1e					MInt32Add:
.3e1e	18		clc				clc
.3e1f	b5 98		lda $98,x			lda 	esInt0,x
.3e21	75 99		adc $99,x			adc 	esInt0+1,x
.3e23	95 98		sta $98,x			sta 	esInt0,x
.3e25	b5 a0		lda $a0,x			lda 	esInt1,x
.3e27	75 a1		adc $a1,x			adc 	esInt1+1,x
.3e29	95 a0		sta $a0,x			sta 	esInt1,x
.3e2b	b5 a8		lda $a8,x			lda 	esInt2,x
.3e2d	75 a9		adc $a9,x			adc 	esInt2+1,x
.3e2f	95 a8		sta $a8,x			sta 	esInt2,x
.3e31	b5 b0		lda $b0,x			lda 	esInt3,x
.3e33	75 b1		adc $b1,x			adc 	esInt3+1,x
.3e35	95 b0		sta $b0,x			sta 	esInt3,x
.3e37	60		rts				rts
.3e38					MInt32Sub:
.3e38	38		sec				sec
.3e39	b5 98		lda $98,x			lda 	esInt0,x
.3e3b	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3e3d	95 98		sta $98,x			sta 	esInt0,x
.3e3f	b5 a0		lda $a0,x			lda 	esInt1,x
.3e41	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3e43	95 a0		sta $a0,x			sta 	esInt1,x
.3e45	b5 a8		lda $a8,x			lda 	esInt2,x
.3e47	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3e49	95 a8		sta $a8,x			sta 	esInt2,x
.3e4b	b5 b0		lda $b0,x			lda 	esInt3,x
.3e4d	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3e4f	95 b0		sta $b0,x			sta 	esInt3,x
.3e51	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3e52					MInt32Multiply:
.3e52	e8		inx				inx 								; copy 2nd -> 3rd
.3e53	20 78 3e	jsr $3e78			jsr 	MInt32CopyUp
.3e56	ca		dex				dex
.3e57	20 78 3e	jsr $3e78			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3e5a	20 38 3f	jsr $3f38			jsr 	MInt32False 				; zero 1st.
.3e5d					_I32Loop:
.3e5d	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3e5f	29 01		and #$01			and 	#1
.3e61	f0 03		beq $3e66			beq 	_I32NoAdd 					; if set
.3e63	20 1e 3e	jsr $3e1e			jsr 	MInt32Add 					; add 2nd to 1st.
.3e66					_I32NoAdd:
.3e66	e8		inx				inx 								; shift 2nd left
.3e67	20 4d 3f	jsr $3f4d			jsr 	MInt32ShiftLeft
.3e6a	e8		inx				inx  								; shift 3rd right
.3e6b	20 56 3f	jsr $3f56			jsr 	MInt32ShiftRight
.3e6e	20 5f 3f	jsr $3f5f			jsr 	MInt32Zero 					; check if zero.
.3e71	08		php				php 								; save status bits
.3e72	ca		dex				dex 	 							; point back to 1st
.3e73	ca		dex				dex
.3e74	28		plp				plp 								; get status bits
.3e75	d0 e6		bne $3e5d			bne 	_I32Loop 					; if non-zero keep going.
.3e77	60		rts				rts
.3e78					MInt32CopyUp:
.3e78	b5 98		lda $98,x			lda 	esInt0,x
.3e7a	95 99		sta $99,x			sta 	esInt0+1,x
.3e7c	b5 a0		lda $a0,x			lda 	esInt1,x
.3e7e	95 a1		sta $a1,x			sta 	esInt1+1,x
.3e80	b5 a8		lda $a8,x			lda 	esInt2,x
.3e82	95 a9		sta $a9,x			sta 	esInt2+1,x
.3e84	b5 b0		lda $b0,x			lda 	esInt3,x
.3e86	95 b1		sta $b1,x			sta 	esInt3+1,x
.3e88	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0dcb					MCharCount:	.fill 	1						; count of converted characters
.3e89					MLInt32ToString:
.3e89	aa		tax				tax									; module passes stack in A, base in Y
.3e8a	98		tya				tya
.3e8b	20 90 3e	jsr $3e90			jsr 	MInt32ToString
.3e8e	8a		txa				txa
.3e8f	60		rts				rts
.3e90					MInt32ToString:
.3e90	48		pha				pha 								; save base
.3e91	85 32		sta $32				sta 	tempShort 					; save target base.
.3e93	a9 00		lda #$00			lda 	#0
.3e95	8d cb 0d	sta $0dcb			sta 	MCharCount 					; clear character count to 0
.3e98	5a		phy				phy
.3e99	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3e9b	10 10		bpl $3ead			bpl 	_I32TSUnsigned
.3e9d	48		pha				pha 								; save base on stack.
.3e9e	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3ea0	10 08		bpl $3eaa			bpl 	_I32TSNoFlip
.3ea2	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3ea4	20 df 3e	jsr $3edf			jsr 	MI32WriteCharacter
.3ea7	20 f2 3e	jsr $3ef2			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3eaa					_I32TSNoFlip:
.3eaa	68		pla				pla 								; get the base back
.3eab	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3ead					_I32TSUnsigned:
.3ead	20 ba 3e	jsr $3eba			jsr 	MI32DivideWrite 			; recursive code to output string.
.3eb0	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3eb2	ad cb 0d	lda $0dcb			lda 	MCharCount
.3eb5	91 2a		sta ($2a),y			sta 	(temp0),y
.3eb7	7a		ply				ply
.3eb8	68		pla				pla
.3eb9	60		rts				rts
.3eba					MI32DivideWrite:
.3eba	48		pha				pha 								; save the divisor/base
.3ebb	e8		inx				inx 								; write in the dividing position.
.3ebc	20 47 3f	jsr $3f47			jsr 	MInt32Set8Bit
.3ebf	ca		dex				dex
.3ec0	20 37 3d	jsr $3d37			jsr 	MInt32UDivide 				; divide number by base.
.3ec3	68		pla				pla 								; get the base into Y
.3ec4	a8		tay				tay
.3ec5	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3ec7	48		pha				pha
.3ec8	20 5f 3f	jsr $3f5f			jsr 	MInt32Zero 					; is the result zero ?
.3ecb	f0 04		beq $3ed1			beq 	_I32NoRecurse 				; if so, don't recurse.
.3ecd	98		tya				tya 								; put base into A
.3ece	20 ba 3e	jsr $3eba			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3ed1					_I32NoRecurse:
.3ed1	68		pla				pla 								; get the remainder back
.3ed2	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3ed4	90 02		bcc $3ed8			bcc 	_I32NotHex
.3ed6	69 06		adc #$06			adc 	#7-1
.3ed8					_I32NotHex:
.3ed8	18		clc				clc 								; make it ASCII
.3ed9	69 30		adc #$30			adc 	#48
.3edb	20 df 3e	jsr $3edf			jsr 	MI32WriteCharacter 			; write the character out
.3ede	60		rts				rts 								; and exit.
.3edf					MI32WriteCharacter:
.3edf	ee cb 0d	inc $0dcb			inc 	MCharCount 					; bump count (space for leading count)
.3ee2	ac cb 0d	ldy $0dcb			ldy 	MCharCount 					; get position
.3ee5	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3ee7	c8		iny				iny
.3ee8	a9 00		lda #$00			lda 	#0
.3eea	91 2a		sta ($2a),y			sta 	(temp0),y
.3eec	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0dcc					MSeed32:	.fill 	4							; random number seed.
.3eed					MInt32Absolute:
.3eed	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3eef	30 01		bmi $3ef2			bmi 	MInt32Negate
.3ef1	60		rts				rts
.3ef2					MInt32Negate:
.3ef2	38		sec				sec 								; subtract from zero.
.3ef3	a9 00		lda #$00			lda 	#0
.3ef5	f5 98		sbc $98,x			sbc 	esInt0,x
.3ef7	95 98		sta $98,x			sta 	esInt0,x
.3ef9	a9 00		lda #$00			lda 	#0
.3efb	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3efd	95 a0		sta $a0,x			sta 	esInt1,x
.3eff	a9 00		lda #$00			lda 	#0
.3f01	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3f03	95 a8		sta $a8,x			sta 	esInt2,x
.3f05	a9 00		lda #$00			lda 	#0
.3f07	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3f09	95 b0		sta $b0,x			sta 	esInt3,x
.3f0b	60		rts				rts
.3f0c					MInt32Not:
.3f0c	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3f0e	49 ff		eor #$ff			eor 	#$FF
.3f10	95 98		sta $98,x			sta 	esInt0,x
.3f12	b5 a0		lda $a0,x			lda 	esInt1,x
.3f14	49 ff		eor #$ff			eor 	#$FF
.3f16	95 a0		sta $a0,x			sta 	esInt1,x
.3f18	b5 a8		lda $a8,x			lda 	esInt2,x
.3f1a	49 ff		eor #$ff			eor 	#$FF
.3f1c	95 a8		sta $a8,x			sta 	esInt2,x
.3f1e	b5 b0		lda $b0,x			lda 	esInt3,x
.3f20	49 ff		eor #$ff			eor 	#$FF
.3f22	95 b0		sta $b0,x			sta 	esInt3,x
.3f24	60		rts				rts
.3f25					MInt32Sign:
.3f25	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3f27	30 0b		bmi $3f34			bmi 	MInt32True 					; if set return -1 (true)
.3f29	20 5f 3f	jsr $3f5f			jsr 	MInt32Zero 					; is it zero ?
.3f2c	f0 0a		beq $3f38			beq 	MInt32False 				; if zero return 0 (false)
.3f2e	20 38 3f	jsr $3f38			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3f31	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3f33	60		rts				rts
.3f34					MInt32True:
.3f34	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3f36	d0 02		bne $3f3a			bne 	MInt32WriteAll
.3f38					MInt32False:
.3f38	a9 00		lda #$00			lda 	#0
.3f3a					MInt32WriteAll:
.3f3a	95 98		sta $98,x			sta 	esInt0,x
.3f3c					MInt32Write123:
.3f3c	95 a0		sta $a0,x			sta 	esInt1,x
.3f3e	95 a8		sta $a8,x			sta 	esInt2,x
.3f40	95 b0		sta $b0,x			sta 	esInt3,x
.3f42	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3f44	95 90		sta $90,x			sta 	esType,x
.3f46	60		rts				rts
.3f47					MInt32Set8Bit:
.3f47	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3f49	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3f4b	f0 ef		beq $3f3c			beq		MInt32Write123
.3f4d					MInt32ShiftLeft:
.3f4d	16 98		asl $98,x			asl 	esInt0,x
.3f4f	36 a0		rol $a0,x			rol	 	esInt1,x
.3f51	36 a8		rol $a8,x			rol	 	esInt2,x
.3f53	36 b0		rol $b0,x			rol	 	esInt3,x
.3f55	60		rts				rts
.3f56					MInt32ShiftRight:
.3f56	56 b0		lsr $b0,x			lsr 	esInt3,x
.3f58	76 a8		ror $a8,x			ror 	esInt2,x
.3f5a	76 a0		ror $a0,x			ror 	esInt1,x
.3f5c	76 98		ror $98,x			ror 	esInt0,x
.3f5e	60		rts				rts
.3f5f					MInt32Zero:
.3f5f	b5 98		lda $98,x			lda 	esInt0,x
.3f61	15 a0		ora $a0,x			ora 	esInt1,x
.3f63	15 a8		ora $a8,x			ora 	esInt2,x
.3f65	15 b0		ora $b0,x			ora 	esInt3,x
.3f67	60		rts				rts
.3f68					MInt32Random:
.3f68	5a		phy				phy
.3f69	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3f6b	ad cc 0d	lda $0dcc			lda 	MSeed32+0 					; check the seed isn't zero
.3f6e	d0 03		bne $3f73			bne 	_Random1
.3f70	a8		tay				tay 								; if so do it 256 times
.3f71	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3f73					_Random1:
.3f73	0a		asl a				asl 	a
.3f74	2e cd 0d	rol $0dcd			rol 	MSeed32+1
.3f77	2e ce 0d	rol $0dce			rol 	MSeed32+2
.3f7a	2e cf 0d	rol $0dcf			rol 	MSeed32+3
.3f7d	90 02		bcc $3f81			bcc 	_Random2
.3f7f	49 c5		eor #$c5			eor 	#$C5
.3f81					_Random2:
.3f81	88		dey				dey
.3f82	d0 ef		bne $3f73			bne 	_Random1
.3f84	8d cc 0d	sta $0dcc			sta 	MSeed32+0 					; copy the seed in.
.3f87	95 98		sta $98,x			sta 	esInt0,x
.3f89	ad cd 0d	lda $0dcd			lda 	MSeed32+1
.3f8c	95 a0		sta $a0,x			sta 	esInt1,x
.3f8e	ad ce 0d	lda $0dce			lda 	MSeed32+2
.3f91	95 a8		sta $a8,x			sta 	esInt2,x
.3f93	ad cf 0d	lda $0dcf			lda 	MSeed32+3
.3f96	95 b0		sta $b0,x			sta 	esInt3,x
.3f98	7a		ply				ply
.3f99	a9 00		lda #$00			lda 	#0
.3f9b	95 90		sta $90,x			sta 	esType,x
.3f9d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3f9e					CheckToken:
.3f9e	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3fa0	d0 02		bne $3fa4			bne 	_CTError
.3fa2	c8		iny				iny
.3fa3	60		rts				rts
.3fa4					_CTError:
.3fa4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3fa6	20 27 15	jsr $1527		jsr	errorHandler
.3fa9					CheckRightParen:
.3fa9	b1 28		lda ($28),y			lda 	(codePtr),y
.3fab	c8		iny				iny
.3fac	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3fae	d0 01		bne $3fb1			bne 	_CRPError
.3fb0	60		rts				rts
.3fb1					_CRPError:
.3fb1	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3fb3	20 27 15	jsr $1527		jsr	errorHandler
.3fb6					CheckComma:
.3fb6	b1 28		lda ($28),y			lda 	(codePtr),y
.3fb8	c8		iny				iny
.3fb9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3fbb	d0 01		bne $3fbe			bne 	_CCError
.3fbd	60		rts				rts
.3fbe					_CCError:
.3fbe	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3fc0	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3fc3					RSReset:
.3fc3	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3fc5	85 37		sta $37				sta 	rsPointer
.3fc7	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3fc9	85 38		sta $38				sta 	1+(rsPointer)
.3fcb	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3fcd	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3fd0	60		rts				rts
.3fd1					RSClaim:
.3fd1	84 32		sty $32				sty 	tempShort 					; preserve Y
.3fd3	48		pha				pha 								; save marker on stack.
.3fd4	8a		txa				txa 								; get bytes required.
.3fd5	38		sec				sec
.3fd6	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3fd8	65 37		adc $37				adc 	rsPointer
.3fda	85 37		sta $37				sta 	rsPointer
.3fdc	a5 38		lda $38				lda 	rsPointer+1
.3fde	69 ff		adc #$ff			adc 	#$FF
.3fe0	85 38		sta $38				sta 	rsPointer+1
.3fe2	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3fe4	90 08		bcc $3fee			bcc 	_RSCOverflow
.3fe6	68		pla				pla 								; get marker back
.3fe7	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3fe9	91 37		sta ($37),y			sta 	(rsPointer),y
.3feb	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3fed	60		rts				rts
.3fee					_RSCOverflow:
.3fee	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3ff0	20 27 15	jsr $1527		jsr	errorHandler
.3ff3					RSFree:
.3ff3	18		clc				clc
.3ff4	65 37		adc $37				adc 	rsPointer
.3ff6	85 37		sta $37				sta 	rsPointer
.3ff8	90 02		bcc $3ffc			bcc 	_RSFExit
.3ffa	e6 38		inc $38				inc 	rsPointer+1
.3ffc					_RSFExit:
.3ffc	60		rts				rts
.3ffd					RSSavePosition:
.3ffd	84 32		sty $32				sty 	tempShort 					; save Y position
.3fff	a8		tay				tay 								; this is where we write it.
.4000	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.4002	91 37		sta ($37),y			sta 	(rsPointer),y
.4004	c8		iny				iny
.4005	a5 29		lda $29				lda 	codePtr+1
.4007	91 37		sta ($37),y			sta 	(rsPointer),y
.4009	c8		iny				iny
.400a	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.400c	91 37		sta ($37),y			sta 	(rsPointer),y
.400e	a8		tay				tay 								; fix Y back again to original value
.400f	60		rts				rts
.4010					RSLoadPosition:
.4010	a8		tay				tay
.4011	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.4013	85 28		sta $28				sta 	codePtr
.4015	c8		iny				iny
.4016	b1 37		lda ($37),y			lda 	(rsPointer),y
.4018	85 29		sta $29				sta 	codePtr+1
.401a	c8		iny				iny
.401b	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.401d	a8		tay				tay 								; to Y
.401e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.401f					WarmStart:
.401f	a2 04		ldx #$04		ldx	#4
.4021	20 c5 29	jsr $29c5		jsr	interactionHandler

;******  Return to file: main/main.asm

.4024					mainHandler:
.4024	7c 27 40	jmp ($4027,x)			jmp 	(mainVectors,x)
.4027					mainVectors:
>4027	43 40					.word _DummyControlHandler ; index 0
>4029	b6 3f					.word CheckComma           ; index 2
>402b	a9 3f					.word CheckRightParen      ; index 4
>402d	a9 31					.word XCommandClear        ; index 6
>402f	d4 38					.word LinkEvaluate         ; index 8
>4031	e0 38					.word LinkEvaluateInteger  ; index 10
>4033	ec 38					.word LinkEvaluateSmallInt ; index 12
>4035	e6 38					.word LinkEvaluateString   ; index 14
>4037	da 38					.word LinkEvaluateTerm     ; index 16
>4039	89 3e					.word MLInt32ToString      ; index 18
>403b	36 33					.word Command_XNew         ; index 20
>403d	44 33					.word XCommand_Run         ; index 22
>403f	50 33					.word Command_RunFrom      ; index 24
>4041	a4 3d					.word LinkInt32FromString  ; index 26
.4043					_DummyControlHandler:
.4043	60		rts			rts

;******  Return to file: basic.asm

.4044					section_end_main:
.4044					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.4044					StringChrs:
.4044	aa		tax				tax 								; set up stack
.4045	a9 02		lda #$02			lda 	#2
.4047	20 03 41	jsr $4103			jsr 	AllocateSoftString
.404a	98		tya				tya
.404b	20 27 41	jsr $4127			jsr 	WriteSoftString
.404e					StringUpdate:
.404e	20 5c 40	jsr $405c			jsr 	ReturnSoftString
.4051	8a		txa				txa
.4052	60		rts				rts
.4053					StringNull:
.4053	aa		tax				tax
.4054	a9 01		lda #$01			lda 	#1
.4056	20 03 41	jsr $4103			jsr 	AllocateSoftString
.4059	4c 4e 40	jmp $404e			jmp 	StringUpdate
.405c					ReturnSoftString:
.405c	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.405e	95 98		sta $98,x			sta 	esInt0,x
.4060	a5 3a		lda $3a				lda 	softMemAlloc+1
.4062	95 a0		sta $a0,x			sta 	esInt1,x
.4064	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.4066	95 a8		sta $a8,x			sta 	esInt2,x
.4068	95 b0		sta $b0,x			sta 	esInt3,x
.406a	a9 40		lda #$40			lda 	#$40 						; type string.
.406c	95 90		sta $90,x			sta 	esType,x
.406e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.406f					STRCompare:
.406f	48		pha				pha 								; save A
.4070	aa		tax				tax 								; put stack pos in X
.4071	5a		phy				phy
.4072	20 a5 40	jsr $40a5			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.4075	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.4077	b1 2a		lda ($2a),y			lda 	(temp0),y
.4079	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.407b	90 02		bcc $407f			bcc 	_SCNotSmaller
.407d	b1 2c		lda ($2c),y			lda 	(temp1),y
.407f					_SCNotSmaller:
.407f	aa		tax				tax 								; put that in X. We compare this many chars first.
.4080					_SCCompareLoop:
.4080	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.4082	f0 0c		beq $4090			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.4084	ca		dex				dex 								; decrement chars to compare.
.4085	c8		iny				iny 								; move to next character
.4086	38		sec				sec 								; calculate s1[y]-s2[y]
.4087	b1 2a		lda ($2a),y			lda 	(temp0),y
.4089	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.408b	d0 0a		bne $4097			bne 	_SCReturnResult 			; if different return sign of A
.408d	4c 80 40	jmp $4080			jmp 	_SCCompareLoop
.4090					_SCSameToEndShortest
.4090	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.4092	38		sec				sec
.4093	b1 2a		lda ($2a),y			lda 	(temp0),y
.4095	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.4097					_SCReturnResult:
.4097	08		php				php 								; set return to zero preserving PSW.
.4098	a2 00		ldx #$00			ldx 	#0
.409a	28		plp				plp
.409b	f0 05		beq $40a2			beq 	_SCExit 					; two values equal, then exit
.409d	ca		dex				dex 								; X = $FF
.409e	90 02		bcc $40a2			bcc 	_SCExit 					; if 1st < 2nd then -1
.40a0	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.40a2					_SCExit:
.40a2	7a		ply				ply
.40a3	68		pla				pla
.40a4	60		rts				rts
.40a5					CopyStringPair:
.40a5	b5 99		lda $99,x			lda 	esInt0+1,x
.40a7	85 2c		sta $2c				sta 	temp1
.40a9	b5 a1		lda $a1,x			lda 	esInt1+1,x
.40ab	85 2d		sta $2d				sta 	temp1+1
.40ad					CopyStringTop:
.40ad	b5 98		lda $98,x			lda 	esInt0,x
.40af	85 2a		sta $2a				sta 	temp0
.40b1	b5 a0		lda $a0,x			lda 	esInt1,x
.40b3	85 2b		sta $2b				sta 	temp0+1
.40b5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.40b6					StringConcat:
.40b6	aa		tax				tax									; stack pos in X
.40b7	5a		phy				phy
.40b8	20 a5 40	jsr $40a5			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.40bb	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.40bc	a0 00		ldy #$00			ldy 	#0
.40be	b1 2a		lda ($2a),y			lda 	(temp0),y
.40c0	71 2c		adc ($2c),y			adc 	(temp1),y
.40c2	b0 1b		bcs $40df			bcs 	_SCError 					; just too many characters here.
.40c4	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.40c6	b0 17		bcs $40df			bcs 	_SCError
.40c8	20 03 41	jsr $4103			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.40cb	20 fa 40	jsr $40fa			jsr 	CopySoftToStack 			; copy that to the stack.
.40ce	20 e4 40	jsr $40e4			jsr 	SCCopyTemp0 				; copy temp0
.40d1	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.40d3	85 2a		sta $2a				sta 	temp0
.40d5	a5 2d		lda $2d				lda 	temp1+1
.40d7	85 2b		sta $2b				sta 	temp0+1
.40d9	20 e4 40	jsr $40e4			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.40dc	7a		ply				ply
.40dd	8a		txa				txa 								; and A
.40de	60		rts				rts
.40df					_SCError:
.40df	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.40e1	20 27 15	jsr $1527		jsr	errorHandler
.40e4					SCCopyTemp0:
.40e4	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.40e6	b1 2a		lda ($2a),y			lda 	(temp0),y
.40e8	85 2e		sta $2e				sta 	temp2
.40ea					_SCCopyLoop:
.40ea	a5 2e		lda $2e				lda 	temp2 						; done the lot
.40ec	f0 0b		beq $40f9			beq 	_SCCopyExit
.40ee	c6 2e		dec $2e				dec 	temp2
.40f0	c8		iny				iny 								; get next char
.40f1	b1 2a		lda ($2a),y			lda 	(temp0),y
.40f3	20 27 41	jsr $4127			jsr 	WriteSoftString 			; write to soft string.
.40f6	4c ea 40	jmp $40ea			jmp 	_SCCopyLoop
.40f9					_SCCopyExit:
.40f9	60		rts				rts
.40fa					CopySoftToStack:
.40fa	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.40fc	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.40fe	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.4100	95 a0		sta $a0,x			sta 	esInt1,x
.4102	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.4103					AllocateSoftString:
.4103	85 32		sta $32				sta 	tempShort 					; save count
.4105	5a		phy				phy
.4106	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.4108	d0 09		bne $4113			bne 	_ASSDone
.410a	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.410c	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.410e	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.4110	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.4111	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.4113					_ASSDone:
.4113	38		sec				sec 								; allocate downwards enough memory
.4114	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.4116	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.4118	85 39		sta $39				sta 	softMemAlloc
.411a	a5 3a		lda $3a				lda 	softMemAlloc+1
.411c	e9 00		sbc #$00			sbc 	#0
.411e	85 3a		sta $3a				sta 	softMemAlloc+1
.4120	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.4122	a8		tay				tay
.4123	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4125	7a		ply				ply
.4126	60		rts				rts
.4127					WriteSoftString:
.4127	84 32		sty $32				sty 	tempShort 					; save Y
.4129	48		pha				pha 								; save character on stack
.412a	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.412c	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.412e	18		clc				clc
.412f	69 01		adc #$01			adc 	#1
.4131	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4133	a8		tay				tay 								; offset in Y
.4134	68		pla				pla 								; get char and write.
.4135	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4137	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.4139	60		rts				rts
.413a					StrClone:
.413a	aa		tax				tax 								; set up stack.
.413b	5a		phy				phy
.413c	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.413e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.4140	18		clc				clc
.4141	69 01		adc #$01			adc 	#1
.4143	20 03 41	jsr $4103			jsr 	AllocateSoftString 			; allocate soft memory
.4146	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.4148	95 98		sta $98,x			sta 	esInt0,x
.414a	a5 3a		lda $3a				lda 	softMemAlloc+1
.414c	95 a0		sta $a0,x			sta 	esInt1,x
.414e	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.4150	95 a8		sta $a8,x			sta 	esInt2,x
.4152	95 b0		sta $b0,x			sta 	esInt3,x
.4154	a9 40		lda #$40			lda 	#$40 						; set type to string.
.4156	95 90		sta $90,x			sta 	esType,x
.4158	20 e4 40	jsr $40e4			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.415b	7a		ply				ply
.415c	8a		txa				txa
.415d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.415e					CaseString:
.415e	48		pha				pha 								; save A and copy to X
.415f	aa		tax				tax
.4160	5a		phy				phy
.4161	20 ad 40	jsr $40ad			jsr 	CopyStringTop 				; target string -> temp0
.4164	a0 00		ldy #$00			ldy 	#0
.4166	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.4168	18		clc				clc
.4169	69 01		adc #$01			adc 	#1 							; one more for length byte
.416b	20 03 41	jsr $4103			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.416e	20 fa 40	jsr $40fa			jsr 	CopySoftToStack 			; copy that to the stack.
.4171	a0 00		ldy #$00			ldy 	#0
.4173	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.4175	aa		tax				tax
.4176					_CSCopy:
.4176	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.4178	f0 24		beq $419e			beq 	_CSExit
.417a	ca		dex				dex
.417b	c8		iny				iny
.417c	68		pla				pla 								; check direction
.417d	48		pha				pha
.417e	f0 0c		beq $418c			beq 	_CSUpper
.4180	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.4182	c9 41		cmp #$41			cmp 	#"A"
.4184	90 12		bcc $4198			bcc 	_CSWrite
.4186	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4188	b0 0e		bcs $4198			bcs 	_CSWrite
.418a	90 0a		bcc $4196			bcc 	_CSFlipWrite
.418c					_CSUpper:
.418c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.418e	c9 61		cmp #$61			cmp 	#"a"
.4190	90 06		bcc $4198			bcc 	_CSWrite
.4192	c9 7b		cmp #$7b			cmp 	#"z"+1
.4194	b0 02		bcs $4198			bcs 	_CSWrite
.4196					_CSFlipWrite:
.4196	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.4198					_CSWrite:
.4198	20 27 41	jsr $4127			jsr 	WriteSoftString 			; add to soft string.
.419b	4c 76 41	jmp $4176			jmp 	_CSCopy
.419e					_CSExit:
.419e	7a		ply				ply
.419f	68		pla				pla
.41a0	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.41a1					StringSubstring:
.41a1	48		pha				pha
.41a2	aa		tax				tax 								; access stack.
.41a3	5a		phy				phy
.41a4	20 ad 40	jsr $40ad			jsr 	CopyStringTop 				; point temp0 to the string.
.41a7	a0 00		ldy #$00			ldy 	#0 							; get length.
.41a9	b1 2a		lda ($2a),y			lda 	(temp0),Y
.41ab	85 2c		sta $2c				sta 	temp1
.41ad	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.41af	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.41b1	f0 02		beq $41b5			beq 	_SSBOkay
.41b3	b0 2a		bcs $41df			bcs 	_SSBReturnNull
.41b5					_SSBOkay:
.41b5	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.41b7	18		clc				clc
.41b8	69 01		adc #$01			adc 	#1
.41ba	38		sec				sec
.41bb	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.41bd	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.41bf	90 02		bcc $41c3			bcc		_SSBTrunc
.41c1	b5 9a		lda $9a,x			lda 	esInt0+2,x
.41c3					_SSBTrunc:
.41c3	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.41c5	18		clc				clc
.41c6	69 01		adc #$01			adc 	#1 							; add 1
.41c8	20 03 41	jsr $4103			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.41cb	20 fa 40	jsr $40fa			jsr 	CopySoftToStack 			; copy that to the stack.
.41ce	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.41d0					_SSBCopyLoop:
.41d0	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.41d2	f0 0e		beq $41e2			beq 	_SSBExit
.41d4	c6 2d		dec $2d				dec 	temp1+1
.41d6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.41d8	20 27 41	jsr $4127			jsr 	WriteSoftString
.41db	c8		iny				iny
.41dc	4c d0 41	jmp $41d0			jmp 	_SSBCopyLoop
.41df					_SSBReturnNull:
.41df	20 e5 41	jsr $41e5			jsr 	ReturnNull
.41e2					_SSBExit:
.41e2	7a		ply				ply
.41e3	68		pla				pla
.41e4	60		rts				rts
.41e5					ReturnNull:
.41e5	a9 00		lda #$00			lda 	#0 							; clear null string
.41e7	8d ce 0a	sta $0ace			sta 	NullString
.41ea	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.41ec	95 98		sta $98,x			sta 	esInt0,x
.41ee	a9 0a		lda #$0a			lda 	#NullString >> 8
.41f0	95 a0		sta $a0,x			sta 	esInt1,x
.41f2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0dd0					srcStrLen:
>0dd0							.fill 	1
.41f3					StringWrite:
.41f3	aa		tax				tax
.41f4	48		pha				pha
.41f5	5a		phy				phy
.41f6	20 1c 42	jsr $421c			jsr 	CheckOverwriteCurrent
.41f9	b0 0d		bcs $4208			bcs		_SWCopyCurrent
.41fb	20 5a 42	jsr $425a			jsr 	RequiresConcretion
.41fe	90 0e		bcc $420e			bcc 	_SWWriteReference
.4200	20 b9 42	jsr $42b9			jsr 	CheckSpecialConcretion
.4203	b0 09		bcs $420e			bcs 	_SWWriteReference
.4205	20 6e 42	jsr $426e			jsr 	AllocateHardMemory
.4208					_SWCopyCurrent:
.4208	20 9f 42	jsr $429f			jsr 	CopyStringToHardMemory
.420b	4c 19 42	jmp $4219			jmp 	_SWExit
.420e					_SWWriteReference
.420e	a0 00		ldy #$00			ldy 	#0
.4210	a5 2a		lda $2a				lda 	temp0
.4212	91 2c		sta ($2c),y			sta 	(temp1),y
.4214	c8		iny				iny
.4215	a5 2b		lda $2b				lda 	temp0+1
.4217	91 2c		sta ($2c),y			sta 	(temp1),y
.4219					_SWExit:
.4219	7a		ply				ply
.421a	68		pla				pla
.421b	60		rts				rts
.421c					CheckOverwriteCurrent:
.421c	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.421e	b5 a1		lda $a1,x			lda 	esInt1+1,x
.4220	85 2b		sta $2b				sta 	temp0+1
.4222	b5 99		lda $99,x			lda 	esInt0+1,x
.4224	85 2a		sta $2a				sta 	temp0
.4226	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.4228	8d d0 0d	sta $0dd0			sta 	srcStrLen
.422b	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.422d	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.422f	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4231	85 2d		sta $2d				sta 	temp1+1
.4233	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.4235	b1 2c		lda ($2c),y			lda 	(temp1),y
.4237	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.4239	90 1b		bcc $4256			bcc 	_COCFail 				; in hard memory.
.423b	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.423d	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.423f	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4241	85 2e		sta $2e				sta 	temp2
.4243	c8		iny				iny
.4244	b1 2c		lda ($2c),y			lda 	(temp1),y
.4246	e9 00		sbc #$00			sbc 	#0
.4248	85 2f		sta $2f				sta 	temp2+1
.424a	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.424c	b1 2e		lda ($2e),y			lda 	(temp2),y
.424e	38		sec				sec  							; maximum character capacity.
.424f	e9 02		sbc #$02			sbc 	#2
.4251	cd d0 0d	cmp $0dd0			cmp 	srcStrLen 				; if >= the required length
.4254	b0 02		bcs $4258			bcs 	_COCCanReuse
.4256					_COCFail:
.4256	18		clc				clc
.4257	60		rts				rts
.4258					_COCCanReuse:
.4258	38		sec				sec
.4259	60		rts				rts
.425a					RequiresConcretion:
.425a	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.425c	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.425e	b0 0a		bcs $426a			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.4260	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.4262	f0 08		beq $426c			beq 	_RCFail 				; if not, this cannot be soft memory.
.4264	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.4266	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.4268	90 02		bcc $426c			bcc 	_RCFail 				; so concreting
.426a					_RCSucceed:
.426a	38		sec				sec
.426b	60		rts				rts
.426c					_RCFail:
.426c	18		clc				clc
.426d	60		rts				rts
.426e					AllocateHardMemory:
.426e	5a		phy				phy
.426f	ad d0 0d	lda $0dd0			lda 	srcStrLen 				; characters in string
.4272	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.4274	b0 04		bcs $427a			bcs 	_AHMSetMax 				; max out that amount.
.4276	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.4278	90 02		bcc $427c			bcc 	_AHMIsOkay
.427a					_AHMSetMax:
.427a	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.427c					_AHMIsOkay:
.427c	48		pha				pha	 							; save size to be allocated
.427d	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.427f	38		sec				sec  							; and copy result to TOS as target address.
.4280	65 33		adc $33				adc 	highMemory
.4282	85 33		sta $33				sta 	highMemory
.4284	a5 34		lda $34				lda 	highMemory+1
.4286	69 ff		adc #$ff			adc 	#$FF
.4288	85 34		sta $34				sta 	highMemory+1
.428a	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.428c	68		pla				pla 							; get the total size of the storage block
.428d	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.428f	18		clc				clc
.4290	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.4292	69 01		adc #$01			adc 	#1
.4294	91 2c		sta ($2c),y			sta 	(temp1),y
.4296	a5 34		lda $34				lda 	highMemory+1
.4298	69 00		adc #$00			adc 	#0
.429a	c8		iny				iny
.429b	91 2c		sta ($2c),y			sta 	(temp1),y
.429d	7a		ply				ply
.429e	60		rts				rts
.429f					CopyStringToHardMemory:
.429f	5a		phy				phy
.42a0	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.42a2	b1 2c		lda ($2c),y			lda 	(temp1),y
.42a4	85 2e		sta $2e				sta 	temp2
.42a6	c8		iny				iny
.42a7	b1 2c		lda ($2c),y			lda 	(temp1),y
.42a9	85 2f		sta $2f				sta 	temp2+1
.42ab	ac d0 0d	ldy $0dd0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.42ae					_CSTHMLoop:
.42ae	b1 2a		lda ($2a),y			lda 	(temp0),y
.42b0	91 2e		sta ($2e),y			sta 	(temp2),y
.42b2	88		dey				dey
.42b3	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.42b5	d0 f7		bne $42ae			bne 	_CSTHMLoop
.42b7	7a		ply				ply
.42b8	60		rts				rts
.42b9					CheckSpecialConcretion:
.42b9	ad d0 0d	lda $0dd0			lda 	srcStrLen 				; check string is null e.g. length = 0
.42bc	f0 02		beq $42c0			beq 	_CSCNullString
.42be	18		clc				clc
.42bf	60		rts				rts
.42c0					_CSCNullString:
.42c0	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.42c2	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.42c5	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.42c7	85 2a		sta $2a				sta 	temp0
.42c9	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.42cb	85 2b		sta $2b				sta 	1+(temp0)
.42cd	38		sec				sec
.42ce	60		rts				rts

;******  Return to file: string/string.asm

.42cf					stringHandler:
.42cf	7c d2 42	jmp ($42d2,x)			jmp 	(stringVectors,x)
.42d2					stringVectors:
>42d2	e4 42					.word _DummyControlHandler ; index 0
>42d4	44 40					.word StringChrs           ; index 2
>42d6	3a 41					.word StrClone             ; index 4
>42d8	b6 40					.word StringConcat         ; index 6
>42da	53 40					.word StringNull           ; index 8
>42dc	6f 40					.word STRCompare           ; index 10
>42de	5e 41					.word CaseString           ; index 12
>42e0	a1 41					.word StringSubstring      ; index 14
>42e2	f3 41					.word StringWrite          ; index 16
.42e4					_DummyControlHandler:
.42e4	60		rts			rts

;******  Return to file: basic.asm

.42e5					section_end_string:
.42e5					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0dd1					deTokeniseVector:
>0dd1							.fill 	2
.0dd3					lastCharacterClass:
>0dd3							.fill 	1
.0dd4					indent:
>0dd4							.fill 	1
.42e5					ListLine:
.42e5	48		pha				pha								; enter here to list to console. sets the output vector
.42e6	a9 14		lda #$14			lda 	#(deTokenPrint) & $FF
.42e8	8d d1 0d	sta $0dd1			sta 	deTokeniseVector
.42eb	a9 44		lda #$44			lda 	#(deTokenPrint) >> 8
.42ed	8d d2 0d	sta $0dd2			sta 	1+(deTokeniseVector)
.42f0	68		pla				pla
.42f1					Detokenise:
.42f1	18		clc				clc 							; space required for line number.
.42f2	69 06		adc #$06			adc 	#6
.42f4	8d d4 0d	sta $0dd4			sta 	indent
.42f7	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.42f9	8d d3 0d	sta $0dd3			sta 	lastCharacterClass
.42fc	a2 02		ldx #$02			ldx 	#2
.42fe	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.4300	95 a8		sta $a8,x			sta 	esInt2,x
.4302	95 b0		sta $b0,x			sta 	esInt3,x
.4304	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.4306	b1 28		lda ($28),y			lda 	(codePtr),y
.4308	95 98		sta $98,x			sta 	esInt0,x
.430a	c8		iny				iny
.430b	b1 28		lda ($28),y			lda 	(codePtr),y
.430d	95 a0		sta $a0,x			sta 	esInt1,x
.430f	a9 84		lda #$84			lda 	#LTYLineNumber
.4311	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.4314	a9 0a		lda #$0a			lda 	#10 					; base 10
.4316	20 ba 43	jsr $43ba			jsr 	DTPrintInteger 			; print as integer.
.4319	a0 00		ldy #$00			ldy 	#0 						; get length
.431b	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.431d	aa		tax				tax
.431e					_DTPadOut:
.431e	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4320	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.4323	e8		inx				inx
.4324	ec d4 0d	cpx $0dd4			cpx 	indent
.4327	d0 f5		bne $431e			bne 	_DTPadOut
.4329	a0 03		ldy #$03			ldy 	#3 						; start position.
.432b					_DTListLoop:
.432b	b1 28		lda ($28),y			lda 	(codePtr),y
.432d	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.432f	f0 5c		beq $438d			beq 	_DTIsString
.4331	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.4333	f0 54		beq $4389			beq 	_DTIsFloat
.4335	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.4337	f0 16		beq $434f			beq 	_DTHexConstant
.4339	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.433b	d0 06		bne $4343			bne 	_DTNotEnd
.433d	a9 ff		lda #$ff			lda 	#255 					; print CR
.433f	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.4342	60		rts				rts
.4343					_DTNotEnd:
.4343	c9 00		cmp #$00			cmp 	#0
.4345	30 36		bmi $437d			bmi 	_DTIsToken
.4347	c9 40		cmp #$40			cmp 	#$40
.4349	90 38		bcc $4383			bcc 	_DTIsIdentifier
.434b	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.434d	d0 0d		bne $435c			bne 	_DTConstant
.434f					_DTHexConstant:
.434f	a9 26		lda #$26			lda 	#"&"
.4351	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.4354	c8		iny				iny
.4355	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.4357	20 30 44	jsr $4430			jsr 	DTSwitchMode
.435a	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.435c					_DTConstant:
.435c	48		pha				pha
.435d	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.435f	20 30 44	jsr $4430			jsr 	DTSwitchMode
.4362	a9 86		lda #$86			lda 	#LTYConstant
.4364	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.4367	a2 02		ldx #$02			ldx 	#2 						; get its value
.4369	8a		txa				txa
.436a	a2 10		ldx #$10		ldx	#16
.436c	20 24 40	jsr $4024		jsr	mainHandler
.436f	aa		tax				tax
.4370	68		pla				pla 							; get base back
.4371	85 32		sta $32				sta 	tempShort
.4373	5a		phy				phy
.4374	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.4376	20 ba 43	jsr $43ba			jsr 	DTPrintInteger
.4379	7a		ply				ply
.437a	4c 2b 43	jmp $432b			jmp 	_DTListLoop
.437d					_DTIsToken:
.437d	20 89 44	jsr $4489			jsr 	DTDecodeToken
.4380	4c 2b 43	jmp $432b			jmp 	_DTListLoop
.4383					_DTIsIdentifier:
.4383	20 42 44	jsr $4442			jsr 	DTIdentifier
.4386	4c 2b 43	jmp $432b			jmp 	_DTListLoop
.4389					_DTIsFloat:
>4389	db						.byte 	$DB
.438a	4c 89 43	jmp $4389			jmp 	_DTIsFloat
.438d					_DTIsString:
.438d	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.438f	20 30 44	jsr $4430			jsr 	DTSwitchMode
.4392	a9 81		lda #$81			lda 	#LTYString
.4394	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.4397	a9 22		lda #$22			lda 	#'"'						; open quote
.4399	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.439c	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.439e	8a		txa				txa
.439f	a2 10		ldx #$10		ldx	#16
.43a1	20 24 40	jsr $4024		jsr	mainHandler
.43a4	aa		tax				tax
.43a5	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.43a7	85 2a		sta $2a				sta 	temp0
.43a9	b5 a0		lda $a0,x			lda 	esInt1,x
.43ab	85 2b		sta $2b				sta 	temp0+1
.43ad	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.43af	20 cb 43	jsr $43cb			jsr 	DTPrintLengthPrefix
.43b2	a9 22		lda #$22			lda 	#'"'
.43b4	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.43b7	4c 2b 43	jmp $432b			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0dd5					tPrintCount:
>0dd5							.fill 	1
.43ba					DTPrintInteger:
.43ba	48		pha				pha									; save base
.43bb	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.43bd	85 2a		sta $2a				sta 	temp0
.43bf	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.43c1	85 2b		sta $2b				sta 	1+(temp0)
.43c3	7a		ply				ply
.43c4	8a		txa				txa
.43c5	a2 12		ldx #$12		ldx	#18
.43c7	20 24 40	jsr $4024		jsr	mainHandler
.43ca	aa		tax				tax 								; then drop through here.
.43cb					DTPrintLengthPrefix:
.43cb	aa		tax				tax 								; A = 0 = don't case convert.
.43cc	5a		phy				phy
.43cd	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.43cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.43d1	8d d5 0d	sta $0dd5			sta 	tPrintCount
.43d4	f0 1b		beq $43f1			beq 	_DTPLPExit 					; empty string
.43d6					_DTPLPLoop:
.43d6	c8		iny				iny 								; get next.
.43d7	b1 2a		lda ($2a),y			lda 	(temp0),y
.43d9	29 7f		and #$7f			and 	#$7F
.43db	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.43dd	f0 0a		beq $43e9			beq 	_DTPLPNoCase
.43df	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.43e1	90 06		bcc $43e9			bcc 	_DTPLPNoCase
.43e3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43e5	b0 02		bcs $43e9			bcs 	_DTPLPNoCase
.43e7	49 20		eor #$20			eor 	#"A"^"a"
.43e9					_DTPLPNoCase
.43e9	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter 		; call handler
.43ec	ce d5 0d	dec $0dd5			dec 	tPrintCount 				; do all the characters
.43ef	d0 e5		bne $43d6			bne 	_DTPLPLoop
.43f1					_DTPLPExit:
.43f1	7a		ply				ply
.43f2	60		rts				rts
.43f3					ListOutputCharacter:
.43f3	85 32		sta $32				sta 	tempShort
.43f5	48		pha				pha
.43f6	da		phx				phx
.43f7	5a		phy				phy
.43f8	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.43fa	c9 20		cmp #$20			cmp 	#32
.43fc	b0 0c		bcs $440a			bcs		_LOCHiBit
.43fe	09 40		ora #$40			ora 	#64 						; conversion
.4400	c9 40		cmp #$40			cmp 	#64							; make l/c
.4402	f0 06		beq $440a			beq 	_LOCHiBit
.4404	c9 5b		cmp #$5b			cmp 	#65+26
.4406	b0 02		bcs $440a			bcs 	_LOCHiBit
.4408	69 20		adc #$20			adc 	#32
.440a					_LOCHiBit:
.440a	20 11 44	jsr $4411			jsr 	_LOCCallVector				; call o/p handler routine
.440d	7a		ply				ply
.440e	fa		plx				plx
.440f	68		pla				pla
.4410					_LOCExit:
.4410	60		rts				rts
.4411					_LOCCallVector:
.4411	6c d1 0d	jmp ($0dd1)			jmp 	(deTokeniseVector)
.4414					deTokenPrint:
.4414	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.4416	30 06		bmi $441e			bmi 	_dtpInk
.4418	a2 14		ldx #$14		ldx	#20
.441a	20 05 15	jsr $1505		jsr	deviceHandler
.441d	60		rts				rts
.441e	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4420	f0 08		beq $442a			beq 	_dtpCR						; except $FF => CRLF
.4422	29 07		and #$07			and 	#7
.4424	a2 06		ldx #$06		ldx	#6
.4426	20 05 15	jsr $1505		jsr	deviceHandler
.4429	60		rts				rts
.442a					_dtpCR:
.442a	a2 04		ldx #$04		ldx	#4
.442c	20 05 15	jsr $1505		jsr	deviceHandler
.442f	60		rts				rts
.4430					DTSwitchMode:
.4430	cd d3 0d	cmp $0dd3			cmp 	LastCharacterClass 			; if changed, update character class
.4433	f0 04		beq $4439			beq 	_DTSMNoChange
.4435	8d d3 0d	sta $0dd3			sta 	LastCharacterClass
.4438					_DTSMExit:
.4438	60		rts				rts
.4439					_DTSMNoChange:
.4439	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.443b	f0 fb		beq $4438			beq 	_DTSMExit 					; need a space.
.443d	a9 20		lda #$20			lda 	#" "
.443f	4c f3 43	jmp $43f3			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4442					DTIdentifier:
.4442	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4444	20 30 44	jsr $4430			jsr 	DTSwitchMode
.4447	a9 87		lda #$87			lda 	#LTYIdentifier
.4449	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.444c					_DTILoop:
.444c	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.444e	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4450	d0 02		bne $4454			bne 	_DTINotUS
.4452	a9 5f		lda #$5f			lda 	#"_"
.4454					_DTINotUS:
.4454	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.4457	c8		iny				iny
.4458	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.445a	c9 3a		cmp #$3a			cmp 	#$3A
.445c	90 ee		bcc $444c			bcc 	_DTILoop
.445e	c8		iny				iny
.445f	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4461	f0 25		beq $4488			beq 	_DTIExit 					; no postfix.
.4463	48		pha				pha
.4464	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.4466	8d d3 0d	sta $0dd3			sta 	LastCharacterClass
.4469	a9 82		lda #$82			lda 	#LTYPunctuation
.446b	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.446e	68		pla				pla
.446f	c9 3b		cmp #$3b			cmp 	#$3B
.4471	f0 10		beq $4483			beq 	_DTIArray
.4473	4a		lsr a				lsr 	a 							; array flag in C
.4474	08		php				php
.4475	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.4477	f0 02		beq $447b			beq 	_DTIDollar
.4479	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.447b					_DTIDollar:
.447b	49 24		eor #$24			eor 	#"$"
.447d	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.4480	28		plp				plp
.4481	90 05		bcc $4488			bcc 	_DTIExit
.4483					_DTIArray:
.4483	a9 28		lda #$28			lda 	#"("
.4485	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.4488					_DTIExit:
.4488	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4489					DTDecodeToken:
.4489	a2 00		ldx #$00			ldx 	#0 							; table number to use
.448b	b1 28		lda ($28),y			lda 	(codePtr),y
.448d	c9 84		cmp #$84			cmp 	#$84
.448f	b0 05		bcs $4496			bcs 	_DTNotShift
.4491	29 03		and #$03			and 	#3 							; get the shift 1..3
.4493	0a		asl a				asl 	a 							; put 2 x in X
.4494	aa		tax				tax
.4495	c8		iny				iny
.4496					_DTNotShift:
.4496	bd 8c 47	lda $478c,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.4499	85 2a		sta $2a				sta 	temp0 						; point into temp0
.449b	bd 8d 47	lda $478d,x			lda 	TokenTableAddress+1,x
.449e	85 2b		sta $2b				sta 	temp0+1
.44a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.44a2	c8		iny				iny 								; consume it.
.44a3	aa		tax				tax
.44a4	5a		phy				phy
.44a5					_DTFindText:
.44a5	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.44a7	f0 11		beq $44ba			beq 	_DTFoundText
.44a9	ca		dex				dex
.44aa	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.44ac	38		sec				sec
.44ad	b1 2a		lda ($2a),y			lda 	(temp0),y
.44af	65 2a		adc $2a				adc 	temp0
.44b1	85 2a		sta $2a				sta 	temp0
.44b3	90 f0		bcc $44a5			bcc 	_DTFindText
.44b5	e6 2b		inc $2b				inc 	temp0+1
.44b7	4c a5 44	jmp $44a5			jmp 	_DTFindText
.44ba					_DTFoundText:
.44ba	a0 01		ldy #$01			ldy 	#1 							; get first character
.44bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.44be	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.44c0	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.44c2	90 11		bcc $44d5			bcc 	_DTIsPunctuation
.44c4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44c6	b0 0d		bcs $44d5			bcs 	_DTIsPunctuation
.44c8	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.44ca	20 30 44	jsr $4430			jsr 	DTSwitchMode
.44cd	a9 83		lda #$83			lda 	#LTYKeyword
.44cf	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.44d2	4c df 44	jmp $44df			jmp 	_DTPrint
.44d5					_DTIsPunctuation:
.44d5	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.44d7	20 30 44	jsr $4430			jsr 	DTSwitchMode
.44da	a9 82		lda #$82			lda 	#LTYPunctuation
.44dc	20 f3 43	jsr $43f3			jsr 	ListOutputCharacter
.44df					_DTPrint:
.44df	a9 01		lda #$01			lda 	#1 							; fix case.
.44e1	20 cb 43	jsr $43cb			jsr 	DTPrintLengthPrefix 		; print it out.
.44e4	a0 00		ldy #$00			ldy 	#0
.44e6	b1 2a		lda ($2a),y			lda 	(temp0),y
.44e8	a8		tay				tay
.44e9	b1 2a		lda ($2a),y			lda 	(temp0),y
.44eb	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.44ed	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.44ef	90 04		bcc $44f5			bcc 	_DTIsNowPunctuation
.44f1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44f3	90 05		bcc $44fa			bcc 	_DTPExit
.44f5					_DTIsNowPunctuation:
.44f5	a9 01		lda #$01			lda 	#1
.44f7	8d d3 0d	sta $0dd3			sta		LastCharacterClass
.44fa					_DTPExit:
.44fa	7a		ply				ply
.44fb	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0dd6					currentSet:
>0dd6							.fill 	1
.44fc					TokenSearch:
.44fc	da		phx				phx
.44fd	5a		phy				phy
.44fe	a9 00		lda #$00			lda 	#0
.4500	8d d6 0d	sta $0dd6			sta 	currentSet
.4503					_TSLoop:
.4503	ad d6 0d	lda $0dd6			lda 	currentSet 					; 2 x currentset in X
.4506	0a		asl a				asl 	a
.4507	aa		tax				tax
.4508	bd 8c 47	lda $478c,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.450b	85 2a		sta $2a				sta 	temp0
.450d	bd 8d 47	lda $478d,x			lda 	TokenTableAddress+1,x
.4510	85 2b		sta $2b				sta 	temp0+1
.4512	20 37 45	jsr $4537			jsr 	TokenSearchOne 				; search one table
.4515	b0 0d		bcs $4524			bcs 	_TSFound 					; found a token.
.4517	ee d6 0d	inc $0dd6			inc 	currentSet 					; next set
.451a	ad d6 0d	lda $0dd6			lda 	currentSet
.451d	c9 04		cmp #$04			cmp 	#4
.451f	d0 e2		bne $4503			bne 	_TSLoop 					; back if not done all four.
.4521	18		clc				clc 								; clear carry and exit
.4522	90 10		bcc $4534			bcc 	_TSExit
.4524					_TSFound:
.4524	48		pha				pha 								; save token
.4525	ad d6 0d	lda $0dd6			lda 	currentSet					; if set zero no shift
.4528	f0 05		beq $452f			beq 	_TSNoShift
.452a	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.452c	20 e8 45	jsr $45e8			jsr 	TokenWrite
.452f					_TSNoShift:
.452f	68		pla				pla 								; get token back
.4530	20 e8 45	jsr $45e8			jsr 	TokenWrite 					; write it
.4533	38		sec				sec 								; carry set indicating success
.4534					_TSExit:
.4534	7a		ply				ply
.4535	fa		plx				plx
.4536	60		rts				rts
.4537					TokenSearchOne:
.4537	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.4539					_TSOLoop:
.4539	a0 00		ldy #$00			ldy 	#0
.453b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.453d	f0 26		beq $4565			beq 	_TSOFail 					; if zero, end of table
.453f	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4542	f0 11		beq $4555			beq 	_TSOCheckText
.4544					_TSONext:
.4544	e8		inx				inx 								; bump token
.4545	a0 00		ldy #$00			ldy 	#0							; get length
.4547	b1 2a		lda ($2a),y			lda 	(temp0),y
.4549	38		sec				sec
.454a	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.454c	85 2a		sta $2a				sta 	temp0
.454e	90 e9		bcc $4539			bcc 	_TSOLoop
.4550	e6 2b		inc $2b				inc 	temp0+1
.4552	4c 39 45	jmp $4539			jmp 	_TSOLoop
.4555					_TSOCheckText:
.4555	a8		tay				tay 								; compare length downto 1.
.4556					_TSOCheckLoop:
.4556	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.4558	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.455b	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.455d	d0 e5		bne $4544			bne 	_TSONext 					; different goto next.
.455f	88		dey				dey 								; do all
.4560	d0 f4		bne $4556			bne 	_TSOCheckLoop
.4562	8a		txa				txa 								; return token in A and carry set
.4563	38		sec				sec
.4564	60		rts				rts
.4565					_TSOFail:
.4565	18		clc				clc
.4566	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.4567					TokTest:
.4567	a2 ff		ldx #$ff				ldx 	#$FF
.4569	9a		txs					txs
.456a	a9 87		lda #$87			lda 	#(TokenText1) & $FF
.456c	85 28		sta $28				sta 	codePtr
.456e	a9 45		lda #$45			lda 	#(TokenText1) >> 8
.4570	85 29		sta $29				sta 	1+(codePtr)
.4572	20 87 45	jsr $4587				jsr 	Tokenise
.4575	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.4577	bd 87 45	lda $4587,x	_TokCheck:	lda 	TokenBytes1,x
.457a	dd da 0d	cmp $0dda,x				cmp 	tokenBuffer,x
.457d	d0 fe		bne $457d	_TokFail:	bne 	_TokFail	 		; error.
.457f	e8		inx					inx
.4580	c9 80		cmp #$80				cmp 	#$80
.4582	d0 f3		bne $4577				bne 	_TokCheck
.4584	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.4587					TokenText1:
.4587					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0dd7					tokenHeader:
>0dd7							.fill 	3
.0dda					tokenBuffer:
>0dda							.fill 	256
.0eda					tokenBufferIndex:
>0eda							.fill 	1
.4587					Tokenise:
.4587	20 ff 45	jsr $45ff			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.458a					TokeniseASCIIZ:
.458a	20 10 46	jsr $4610			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.458d	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.458f	8d da 0e	sta $0eda			sta 	tokenBufferIndex
.4592	a8		tay				tay 								; start pointer
.4593	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.4595	8d da 0d	sta $0dda			sta 	tokenBuffer
.4598					_TokLoop:
.4598	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.459a	f0 46		beq $45e2			beq 	_TokExit 					; if zero, then exit.
.459c	c8		iny				iny 								; skip over spaces.
.459d	c9 20		cmp #$20			cmp 	#" "
.459f	f0 f7		beq $4598			beq 	_TokLoop
.45a1	88		dey				dey 								; point back to character.
.45a2	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.45a4	f0 18		beq $45be			beq 	_TokHexConst
.45a6	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.45a8	f0 23		beq $45cd			beq 	_TokQString
.45aa	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.45ac	b0 26		bcs $45d4			bcs 	_TokPunctuation
.45ae	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.45b0	b0 29		bcs $45db			bcs 	_TokIdentifier
.45b2	c9 3a		cmp #$3a			cmp 	#"9"+1
.45b4	b0 1e		bcs $45d4			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.45b6	c9 30		cmp #$30			cmp 	#"0"
.45b8	90 1a		bcc $45d4			bcc 	_TokPunctuation 			; < 0, punctuation.
.45ba	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.45bc	d0 08		bne $45c6			bne 	_TokConst
.45be					_TokHexConst:
.45be	c8		iny				iny									; consume token.
.45bf	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.45c1	20 e8 45	jsr $45e8			jsr 	TokenWrite
.45c4	a9 10		lda #$10			lda 	#16
.45c6					_TokConst:
.45c6	20 cc 46	jsr $46cc			jsr 	TokeniseInteger
.45c9	b0 cd		bcs $4598			bcs 	_TokLoop
.45cb	90 18		bcc $45e5			bcc 	_TokFail
.45cd					_TokQString:
.45cd	20 60 47	jsr $4760			jsr 	TokeniseString
.45d0	b0 c6		bcs $4598			bcs 	_TokLoop
.45d2	90 11		bcc $45e5			bcc 	_TokFail
.45d4					_TokPunctuation:
.45d4	20 3f 47	jsr $473f			jsr 	TokenisePunctuation
.45d7	b0 bf		bcs $4598			bcs 	_TokLoop
.45d9	90 0a		bcc $45e5			bcc 	_TokFail
.45db					_TokIdentifier:
.45db	20 3f 46	jsr $463f			jsr 	TokeniseIdentifier
.45de	b0 b8		bcs $4598			bcs 	_TokLoop
.45e0	90 03		bcc $45e5			bcc 	_TokFail
.45e2					_TokExit:
.45e2	a9 01		lda #$01			lda 	#1
.45e4	60		rts				rts
.45e5					_TokFail:
.45e5	a9 00		lda #$00			lda 	#0
.45e7	60		rts				rts
.45e8					TokenWrite:
.45e8	85 32		sta $32				sta 	tempShort 					; save XA
.45ea	48		pha				pha
.45eb	da		phx				phx
.45ec	a5 32		lda $32				lda 	tempShort
.45ee	ae da 0e	ldx $0eda			ldx 	tokenBufferIndex 			; geet index
.45f1	9d da 0d	sta $0dda,x			sta 	tokenBuffer,x 				; write byte to buffer
.45f4	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.45f6	9d db 0d	sta $0ddb,x			sta 	tokenBuffer+1,x
.45f9	ee da 0e	inc $0eda			inc 	tokenBufferIndex 			; bump index
.45fc	fa		plx				plx
.45fd	68		pla				pla
.45fe	60		rts				rts
.45ff					TokeniseMakeASCIIZ:
.45ff	a0 00		ldy #$00			ldy 	#0							; get length of string.
.4601	b1 28		lda ($28),y			lda 	(codePtr),y
.4603	a8		tay				tay
.4604	c8		iny				iny 								; +1, the NULL goes here.
.4605	a9 00		lda #$00			lda 	#0
.4607	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4609	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.460b	d0 02		bne $460f			bne 	_TMKAExit
.460d	e6 29		inc $29				inc 	codePtr+1
.460f					_TMKAExit:
.460f	60		rts				rts
.4610					TokeniseFixCase:
.4610	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4612	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.4614					_TFCFlipQ:
.4614	8a		txa				txa
.4615	49 01		eor #$01			eor 	#1
.4617	aa		tax				tax
.4618					_TFCLoop:
.4618	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.461a	f0 22		beq $463e			beq 	_TFCExit 					; if zero exit.
.461c	c9 20		cmp #$20			cmp 	#32 						; if control
.461e	90 1a		bcc $463a			bcc 	_TFCControl
.4620	c8		iny				iny 								; preconsume
.4621	c9 22		cmp #$22			cmp 	#'"'
.4623	f0 ef		beq $4614			beq 	_TFCFlipQ
.4625	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.4627	90 ef		bcc $4618			bcc 	_TFCLoop
.4629	c9 7b		cmp #$7b			cmp 	#"z"+1
.462b	b0 eb		bcs $4618			bcs 	_TFCLoop
.462d	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.462f	d0 e7		bne $4618			bne 	_TFCLoop
.4631	88		dey				dey
.4632	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4634					_TFCWrite:
.4634	91 28		sta ($28),y			sta 	(codePtr),y
.4636	c8		iny				iny
.4637	4c 18 46	jmp $4618			jmp 	_TFCLoop
.463a					_TFCControl:
.463a	a9 20		lda #$20			lda 	#" "
.463c	d0 f6		bne $4634			bne 	_TFCWrite
.463e					_TFCExit:
.463e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.463f					TokeniseIdentifier:
.463f	a2 00		ldx #$00			ldx 	#0
.4641					_TICopyID:
.4641	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4643	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.4645	f0 16		beq $465d			beq 	_TICopyUnderscore
.4647	c9 2e		cmp #$2e			cmp 	#"."
.4649	f0 14		beq $465f			beq 	_TICopyIn
.464b	c9 30		cmp #$30			cmp 	#"0"
.464d	90 1b		bcc $466a			bcc 	_TIEndCopy
.464f	c9 3a		cmp #$3a			cmp 	#"9"+1
.4651	90 0c		bcc $465f			bcc 	_TICopyIn
.4653	c9 41		cmp #$41			cmp 	#"A"
.4655	90 13		bcc $466a			bcc 	_TIEndCopy
.4657	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4659	b0 0f		bcs $466a			bcs		_TIEndCopy
.465b	90 02		bcc $465f			bcc 	_TICopyIn
.465d					_TICopyUnderScore:
.465d	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.465f					_TICopyIn:
.465f	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4660	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4663	8e cf 0a	stx $0acf			stx 	convertBuffer
.4666	c8		iny				iny 								; next character
.4667	4c 41 46	jmp $4641			jmp 	_TICopyID 					; loop round
.466a					_TIEndCopy:
.466a	a9 24		lda #$24			lda 	#"$"
.466c	20 bf 46	jsr $46bf			jsr 	TIDCheckCopy
.466f	a9 23		lda #$23			lda 	#"#"
.4671	20 bf 46	jsr $46bf			jsr 	TIDCheckCopy
.4674	a9 28		lda #$28			lda 	#"("
.4676	20 bf 46	jsr $46bf			jsr 	TIDCheckCopy
.4679	20 fc 44	jsr $44fc			jsr 	TokenSearch 				; is it a token
.467c	b0 3f		bcs $46bd			bcs 	_TIExit 					; if so, then exit.
.467e	5a		phy				phy
.467f	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4681	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.4684	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4687	c9 28		cmp #$28			cmp 	#"("
.4689	d0 02		bne $468d			bne 	_TINotArray
.468b	ca		dex				dex 								; yes, remove it and convert to array.
.468c	c8		iny				iny
.468d					_TINotArray:
.468d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4690	c9 24		cmp #$24			cmp 	#"$"
.4692	d0 03		bne $4697			bne 	_TINotString
.4694	ca		dex				dex
.4695	c8		iny				iny
.4696	c8		iny				iny
.4697					_TINotString:
.4697	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.469a	c9 23		cmp #$23			cmp 	#"#"
.469c	d0 05		bne $46a3			bne 	_TINotFloat
.469e	ca		dex				dex
.469f	c8		iny				iny
.46a0	c8		iny				iny
.46a1	c8		iny				iny
.46a2	c8		iny				iny
.46a3					_TINotFloat:
.46a3	e8		inx				inx 								; write end marker for identifier.
.46a4	98		tya				tya
.46a5	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46a8	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.46ab	a2 01		ldx #$01			ldx 	#1
.46ad					_TIOutput:
.46ad	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.46b0	29 3f		and #$3f			and 	#$3F
.46b2	48		pha				pha
.46b3	20 e8 45	jsr $45e8			jsr 	TokenWrite
.46b6	e8		inx				inx
.46b7	68		pla				pla
.46b8	c9 3a		cmp #$3a			cmp 	#$3A
.46ba	90 f1		bcc $46ad			bcc 	_TIOutput
.46bc	7a		ply				ply
.46bd					_TIExit:
.46bd	38		sec				sec 								; this can't fail.
.46be	60		rts				rts
.46bf					TIDCheckCopy:
.46bf	d1 28		cmp ($28),y			cmp 	(codePtr),y
.46c1	d0 08		bne $46cb			bne 	_TIDCCExit
.46c3	e8		inx				inx
.46c4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46c7	8e cf 0a	stx $0acf			stx 	convertBuffer
.46ca	c8		iny				iny
.46cb					_TIDCCExit:
.46cb	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.46cc					TokeniseInteger:
.46cc	85 2c		sta $2c				sta 	temp1 						; save base
.46ce	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.46d0	8e cf 0a	stx $0acf			stx 	convertBuffer
.46d3					_TIGetChars:
.46d3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.46d5	c9 30		cmp #$30			cmp 	#"0"
.46d7	90 1f		bcc $46f8			bcc 	_TIEndGet
.46d9	c9 3a		cmp #$3a			cmp 	#"9"+1
.46db	90 10		bcc $46ed			bcc 	_TIHaveChar
.46dd	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.46df	c9 0a		cmp #$0a			cmp 	#10
.46e1	f0 15		beq $46f8			beq 	_TIEndGet
.46e3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.46e5	c9 41		cmp #$41			cmp 	#"A"
.46e7	90 0f		bcc $46f8			bcc 	_TIEndGet
.46e9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.46eb	b0 0b		bcs $46f8			bcs 	_TIEndGet
.46ed					_TIHaveChar:
.46ed	e8		inx				inx 								; write into buffer.
.46ee	8e cf 0a	stx $0acf			stx 	convertBuffer
.46f1	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46f4	c8		iny				iny 								; next char
.46f5	4c d3 46	jmp $46d3			jmp 	_TIGetChars
.46f8					_TIEndGet:
.46f8	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.46fa	f0 1a		beq $4716			beq 	_TIFail
.46fc	5a		phy				phy
.46fd	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.46ff	85 2a		sta $2a				sta 	temp0
.4701	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4703	85 2b		sta $2b				sta 	1+(temp0)
.4705	a9 00		lda #$00			lda 	#0 							; stack level 0
.4707	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4709	a2 1a		ldx #$1a		ldx	#26
.470b	20 24 40	jsr $4024		jsr	mainHandler
.470e	7a		ply				ply
.470f	90 05		bcc $4716			bcc 	_TIFail 					; didn't convert.
.4711	20 18 47	jsr $4718			jsr 	TIRecursiveOut 				; recursive output ?
.4714	38		sec				sec
.4715	60		rts				rts
.4716					_TIFail:
.4716	18		clc				clc
.4717	60		rts				rts
.4718					TIRecursiveOut:
.4718	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.471a	29 3f		and #$3f			and 	#$3F
.471c	09 40		ora #$40			ora 	#$40
.471e	48		pha				pha
.471f	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.4721	29 c0		and #$c0			and 	#$C0
.4723	05 a0		ora $a0				ora 	esInt1
.4725	05 a8		ora $a8				ora 	esInt2
.4727	05 b0		ora $b0				ora 	esInt3
.4729	f0 10		beq $473b			beq 	_TIRONoRecursion
.472b	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.472d					_TIROShift:
.472d	46 b0		lsr $b0				lsr 	esInt3
.472f	66 a8		ror $a8				ror 	esInt2
.4731	66 a0		ror $a0				ror 	esInt1
.4733	66 98		ror $98				ror 	esInt0
.4735	ca		dex				dex
.4736	d0 f5		bne $472d			bne 	_TIROShift
.4738	20 18 47	jsr $4718			jsr 	TIRecursiveOut 				; call recursively
.473b					_TIRONoRecursion:
.473b	68		pla				pla 								; pull the old bit.
.473c	4c e8 45	jmp $45e8			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.473f					TokenisePunctuation:
.473f	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4741	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4744	c8		iny				iny
.4745	b1 28		lda ($28),y			lda 	(codePtr),y
.4747	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.474a	c8		iny				iny 								; Y is +2
.474b	a9 02		lda #$02			lda 	#2 							; 2 character string.
.474d	8d cf 0a	sta $0acf			sta 	convertBuffer
.4750	20 fc 44	jsr $44fc			jsr 	TokenSearch 				; search for that token.
.4753	b0 0a		bcs $475f			bcs 	_TIFound
.4755	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4758	88		dey				dey 								; Y is now +1
.4759	20 fc 44	jsr $44fc			jsr 	TokenSearch 				; search for that token.
.475c	b0 01		bcs $475f			bcs 	_TIFound
.475e	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.475f					_TIFound:
.475f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4760					TokeniseString:
.4760	c8		iny				iny 								; skip opening quote
.4761	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4763	84 2a		sty $2a				sty 	temp0 						; save start.
.4765					_TSGetLength:
.4765	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4767	f0 21		beq $478a			beq 	_TSFail						; end of line, fail
.4769	c8		iny				iny
.476a	e8		inx				inx
.476b	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.476d	d0 f6		bne $4765			bne 	_TSGetLength
.476f	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4771	20 e8 45	jsr $45e8			jsr 	TokenWrite
.4774	8a		txa				txa 								; output length
.4775	20 e8 45	jsr $45e8			jsr 	TokenWrite
.4778	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.477a	e0 00		cpx #$00			cpx 	#0 							; check ended
.477c	f0 09		beq $4787			beq 	_TSExit
.477e					_TSOutput:
.477e	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4780	20 e8 45	jsr $45e8			jsr 	TokenWrite
.4783	c8		iny				iny
.4784	ca		dex				dex
.4785	d0 f7		bne $477e			bne 	_TSOutput
.4787					_TSExit:
.4787	c8		iny				iny 								; skip ending quote
.4788	38		sec				sec 								; return CS.
.4789	60		rts				rts
.478a					_TSFail:
.478a	18		clc				clc
.478b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.478c					TokenTableAddress:
>478c	94 47						.word 	Group0Text
>478e	6c 49						.word 	Group1Text
>4790	b9 4a						.word 	Group2Text
>4792	0a 4b						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4794					Group0Text:
>4794	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4798	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>479b	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>479f	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>47a2	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>47a5	01 be					.byte $01,$be                          ; $8b >
>47a7	01 bc					.byte $01,$bc                          ; $8c <
>47a9	01 bd					.byte $01,$bd                          ; $8d =
>47ab	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>47ae	01 ab					.byte $01,$ab                          ; $8f +
>47b0	01 ad					.byte $01,$ad                          ; $90 -
>47b2	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>47b5	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>47b8	01 aa					.byte $01,$aa                          ; $93 *
>47ba	01 af					.byte $01,$af                          ; $94 /
>47bc	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>47c0	01 de					.byte $01,$de                          ; $96 ^
>47c2	01 a1					.byte $01,$a1                          ; $97 !
>47c4	01 bf					.byte $01,$bf                          ; $98 ?
>47c6	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>47cd	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>47d3	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>47d7	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>47da	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>47e2	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>47e8	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>47ed	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>47f2	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>47f7	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>47fd	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>4805	01 a8					.byte $01,$a8                          ; $a4 (
>4807	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>480c	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>4811	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4816	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>481e	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4823	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4828	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>482e	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4833	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4838	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>483d	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4844	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>484b	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4850	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4857	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>485e	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4864	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>486b	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4871	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4879	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>487f	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4884	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>488a	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4890	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4896	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>489b	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>48a0	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>48a7	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>48ae	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>48b6	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>48be	01 c0					.byte $01,$c0                          ; $c3 @
>48c0	01 fe					.byte $01,$fe                          ; $c4 ~
>48c2	01 a6					.byte $01,$a6                          ; $c5 &
>48c4	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>48ca	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>48d2	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>48d6	01 a9					.byte $01,$a9                          ; $c9 )
>48d8	01 ba					.byte $01,$ba                          ; $ca :
>48da	01 ac					.byte $01,$ac                          ; $cb ,
>48dc	01 bb					.byte $01,$bb                          ; $cc ;
>48de	01 a7					.byte $01,$a7                          ; $cd '
>48e0	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>48e3	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>48e8	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>48ed	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>48f3	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>48f7	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>48fb	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>48ff	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>4905	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>490a	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>490e	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4914	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4919	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>491f	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4922	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4927	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>492e	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4933	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4938	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>493d	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4941	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4947	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>494b	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4952	01 ae					.byte $01,$ae                          ; $e5 .
>4954	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>4959	01 a3					.byte $01,$a3                          ; $e7 #
>495b	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4961	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>4966	04 54 59 50 c5				.byte $04,$54,$59,$50,$c5              ; $ea type
>496b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.496c					Group1Text:
>496c	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4971	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4976	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>497b	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>497f	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4985	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4989	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>498e	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4996	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>499a	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>499f	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>49a4	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>49a9	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>49af	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>49b6	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>49ba	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>49c0	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>49c4	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>49c8	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>49cc	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>49d0	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>49d4	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>49d8	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>49dc	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>49e0	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>49e4	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>49e8	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>49ec	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>49f0	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>49f4	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>49f8	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>49fc	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4a00	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>4a04	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4a08	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4a0c	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4a10	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>4a14	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4a18	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4a1c	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4a20	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4a24	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4a28	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4a2c	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4a30	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4a34	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4a38	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4a3c	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4a40	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4a44	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4a48	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4a4c	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4a50	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4a54	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4a58	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4a5c	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4a60	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4a64	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4a68	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4a6c	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4a70	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4a74	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4a78	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4a7c	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4a80	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4a84	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4a88	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4a8c	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4a90	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4a94	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4a98	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4a9c	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4aa0	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4aa4	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4aa8	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4aac	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4ab0	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4ab4	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4ab8	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4ab9					Group2Text:
>4ab9	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4abf	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4ac5	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4acb	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4ad0	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4ad8	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4adf	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>4ae3	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>4ae8	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>4aee	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>4af3	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>4af8	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4afd	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>4b03	05 53 4f 55 4e c4			.byte $05,$53,$4f,$55,$4e,$c4          ; $93 sound
>4b09	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4b0a					Group3Text:
>4b0a	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4b11	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4b18	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4b20	58 a8
>4b22	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4b2a	59 a8
>4b2c	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4b31	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4b38	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4b3f	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4b46	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4b4d	08 50 4c 41 59 49 4e 47			.byte $08,$50,$4c,$41,$59,$49,$4e,$47,$a8 ; $8f playing(
>4b55	a8
>4b56	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4b57					tokeniserHandler:
.4b57	7c 5a 4b	jmp ($4b5a,x)			jmp 	(tokeniserVectors,x)
.4b5a					tokeniserVectors:
>4b5a	66 4b					.word _DummyControlHandler ; index 0
>4b5c	f1 42					.word Detokenise           ; index 2
>4b5e	e5 42					.word ListLine             ; index 4
>4b60	67 45					.word TokTest              ; index 6
>4b62	87 45					.word Tokenise             ; index 8
>4b64	8a 45					.word TokeniseASCIIZ       ; index 10
.4b66					_DummyControlHandler:
.4b66	60		rts			rts

;******  Return to file: basic.asm

.4b67					section_end_tokeniser:
.4b67					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4b67					AccessArray:
.4b67	da		phx				phx
.4b68	e8		inx				inx
.4b69	20 2d 4c	jsr $4c2d			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4b6c	fa		plx				plx
.4b6d	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4b6f	85 2a		sta $2a				sta 	temp0
.4b71	b5 a0		lda $a0,x			lda 	esInt1,x
.4b73	85 2b		sta $2b				sta 	temp0+1
.4b75	da		phx				phx
.4b76	5a		phy				phy
.4b77					_AAFollow:
.4b77	a0 00		ldy #$00			ldy 	#0
.4b79	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b7b	48		pha				pha
.4b7c	c8		iny				iny
.4b7d	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b7f	85 2b		sta $2b				sta 	temp0+1
.4b81	68		pla				pla
.4b82	85 2a		sta $2a				sta 	temp0
.4b84	e8		inx				inx 								; advance to next stack slot.
.4b85	a0 00		ldy #$00			ldy 	#0
.4b87	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4b89	d5 98		cmp $98,x			cmp 	esInt0,x
.4b8b	c8		iny				iny
.4b8c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4b8e	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4b90	29 7f		and #$7f			and 	#$7F
.4b92	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4b94	90 4e		bcc $4be4			bcc 	_AABadIndex 				; failed on index if max index < required.
.4b96	18		clc				clc
.4b97	a5 2a		lda $2a				lda 	temp0
.4b99	69 02		adc #$02			adc 	#2
.4b9b	85 2a		sta $2a				sta 	temp0
.4b9d	90 02		bcc $4ba1			bcc 	_AANoCarry
.4b9f	e6 2b		inc $2b				inc 	temp0+1
.4ba1					_AANoCarry:
.4ba1	b5 98		lda $98,x			lda 	esInt0,x
.4ba3	85 2e		sta $2e				sta 	temp2
.4ba5	b5 a0		lda $a0,x			lda 	esInt1,x
.4ba7	85 2f		sta $2f				sta 	temp2+1
.4ba9	ac dd 0e	ldy $0edd			ldy 	varType
.4bac	b9 87 4c	lda $4c87,y			lda 	CAActualSize-$3A,y
.4baf	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4bb1	30 02		bmi $4bb5			bmi 	_AANotPointer
.4bb3	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4bb5					_AANotPointer:
.4bb5	20 31 4d	jsr $4d31			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4bb8	18		clc				clc
.4bb9	a5 2a		lda $2a				lda 	temp0
.4bbb	65 2e		adc $2e				adc 	temp2
.4bbd	85 2a		sta $2a				sta 	temp0
.4bbf	a5 2b		lda $2b				lda 	temp0+1
.4bc1	65 2f		adc $2f				adc 	temp2+1
.4bc3	85 2b		sta $2b				sta 	temp0+1
.4bc5	b5 91		lda $91,x			lda 	esType+1,x
.4bc7	30 07		bmi $4bd0			bmi 	_AAUsedAllIndices
.4bc9	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4bcb	10 12		bpl $4bdf			bpl 	_AABadDepth 				; no, too many indexes.
.4bcd	4c 77 4b	jmp $4b77			jmp 	_AAFollow 					; otherwise follow them.
.4bd0					_AAUsedAllIndices:
.4bd0	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4bd2	30 0b		bmi $4bdf			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4bd4	7a		ply				ply
.4bd5	fa		plx				plx
.4bd6	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4bd8	95 98		sta $98,x			sta 	esInt0,x
.4bda	a5 2b		lda $2b				lda 	temp0+1
.4bdc	95 a0		sta $a0,x			sta 	esInt1,x
.4bde	60		rts				rts
.4bdf					_AABadDepth:
.4bdf	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4be1	20 27 15	jsr $1527		jsr	errorHandler
.4be4					_AABadIndex:
.4be4	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4be6	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0edb					elementSize:
>0edb							.fill	 1
.4be9					CreateArray:
.4be9	20 be 4d	jsr $4dbe			jsr 	AccessSetup 				; set up the basic stuff, hashtables and so on.
.4bec	ad dd 0e	lda $0edd			lda 	varType 					; is the variable type an array
.4bef	4a		lsr a				lsr 	a
.4bf0	90 36		bcc $4c28			bcc 	CANotArray 					; no, cause an error.
.4bf2	20 c0 4e	jsr $4ec0			jsr 	FindVariable 				; does the variable exist already
.4bf5	b0 2c		bcs $4c23			bcs 	CAFound 					; if so, error cannot redefine it.
.4bf7	20 f9 4d	jsr $4df9			jsr 	CreateVariable 				; create the variable entry.
.4bfa	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4bfc	48		pha				pha
.4bfd	a5 2b		lda $2b				lda 	temp0+1
.4bff	48		pha				pha
.4c00	a2 00		ldx #$00			ldx 	#0
.4c02	20 2d 4c	jsr $4c2d			jsr 	GetArrayDimensions 			; get the array dimensions
.4c05	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4c07	20 5d 4c	jsr $4c5d			jsr 	CreateArrayLevel 			; level to YA
.4c0a	aa		tax				tax 								; level now in YX
.4c0b	68		pla				pla 								; get address back to temp0 to write.
.4c0c	85 2b		sta $2b				sta 	temp0+1
.4c0e	68		pla				pla
.4c0f	85 2a		sta $2a				sta 	temp0
.4c11	98		tya				tya 								; write YX there (address in original record)
.4c12	a0 06		ldy #$06			ldy 	#6
.4c14	91 2a		sta ($2a),y			sta 	(temp0),y
.4c16	88		dey				dey
.4c17	8a		txa				txa
.4c18	91 2a		sta ($2a),y			sta 	(temp0),y
.4c1a	ac de 0e	ldy $0ede			ldy 	varEnd 						; restore Y and exit.
.4c1d	60		rts				rts
.4c1e					CASize:
.4c1e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4c20	20 27 15	jsr $1527		jsr	errorHandler
.4c23					CAFound:
.4c23	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4c25	20 27 15	jsr $1527		jsr	errorHandler
.4c28					CANotArray:
.4c28	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4c2a	20 27 15	jsr $1527		jsr	errorHandler
.4c2d					GetArrayDimensions:
.4c2d	ad dd 0e	lda $0edd			lda 	varType 					; push variable type on the stack.
.4c30	48		pha				pha
.4c31	ac de 0e	ldy $0ede			ldy 	varEnd
.4c34					_CAGetDimensions:
.4c34	8a		txa				txa 								; get the next level
.4c35	a2 0a		ldx #$0a		ldx	#10
.4c37	20 24 40	jsr $4024		jsr	mainHandler
.4c3a	aa		tax				tax
.4c3b	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4c3d	29 e0		and #$e0			and 	#$E0
.4c3f	15 a8		ora $a8,x			ora 	esInt2,x
.4c41	15 b0		ora $b0,x			ora 	esInt3,x
.4c43	d0 d9		bne $4c1e			bne 	CASize
.4c45	e8		inx				inx 								; next level.
.4c46	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4c48	c8		iny				iny
.4c49	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4c4b	f0 e7		beq $4c34			beq 	_CAGetDimensions
.4c4d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4c4f	d0 cd		bne $4c1e			bne 	CASize
.4c51	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4c53	95 90		sta $90,x			sta 	esType,x 					; dimensions there are, it marks the end.
.4c55	68		pla				pla 								; restore the variable type ($3A-$3F)
.4c56	8d dd 0e	sta $0edd			sta 	varType
.4c59	8c de 0e	sty $0ede			sty 	varEnd 						; save exit Y value, after dimensions
.4c5c	60		rts				rts
.4c5d					CreateArrayLevel:
.4c5d	ac dd 0e	ldy $0edd			ldy 	varType
.4c60	b9 87 4c	lda $4c87,y			lda 	CAActualSize-$3A,y 			; $3A is the first type marker.
.4c63	8d db 0e	sta $0edb			sta 	elementSize 				; get element size this level.
.4c66	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4c68	30 05		bmi $4c6f			bmi 	_CANotPointer 				; then its values, keep elementsize
.4c6a	a9 02		lda #$02			lda 	#2 							; use array of pointers, each element is 2.
.4c6c	8d db 0e	sta $0edb			sta 	elementSize
.4c6f					_CANotPointer:
.4c6f	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4c71	85 2a		sta $2a				sta 	temp0
.4c73	48		pha				pha
.4c74	a5 36		lda $36				lda 	lowMemory+1
.4c76	85 2b		sta $2b				sta 	temp0+1
.4c78	48		pha				pha
.4c79	20 fa 4c	jsr $4cfa			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4c7c	a0 00		ldy #$00			ldy 	#0
.4c7e	b5 98		lda $98,x			lda 	esInt0,x
.4c80	91 2a		sta ($2a),y			sta 	(temp0),y
.4c82	c8		iny				iny
.4c83	b5 a0		lda $a0,x			lda 	esInt1,x
.4c85	91 2a		sta ($2a),y			sta 	(temp0),y
.4c87	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4c89	30 06		bmi $4c91			bmi 	_CALNotLast
.4c8b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4c8d	09 80		ora #$80			ora 	#$80
.4c8f	91 2a		sta ($2a),y			sta 	(temp0),y
.4c91					_CALNotLast:
.4c91	a9 02		lda #$02			lda 	#2
.4c93	20 b7 4c	jsr $4cb7			jsr 	_CALAddTemp0
.4c96	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4c98	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4c9a	b5 a0		lda $a0,x			lda 	esInt1,x
.4c9c	95 b0		sta $b0,x			sta 	esInt3,x
.4c9e					_CALClear:
.4c9e	20 c7 4c	jsr $4cc7			jsr 	EraseOneElement
.4ca1	ad db 0e	lda $0edb			lda 	elementSize 				; move to next element
.4ca4	20 b7 4c	jsr $4cb7			jsr 	_CALAddTemp0
.4ca7	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4ca9	d0 02		bne $4cad			bne 	_CALNoBorrow
.4cab	d6 b0		dec $b0,x			dec 	esInt3,x
.4cad					_CALNoBorrow:
.4cad	d6 a8		dec $a8,x			dec 	esInt2,x
.4caf	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4cb1	10 eb		bpl $4c9e			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4cb3	68		pla				pla 								; restore the start of this into YA.
.4cb4	a8		tay				tay
.4cb5	68		pla				pla
.4cb6	60		rts				rts
.4cb7					_CALAddTemp0:
.4cb7	18		clc				clc
.4cb8	65 2a		adc $2a				adc 	temp0
.4cba	85 2a		sta $2a				sta 	temp0
.4cbc	90 02		bcc $4cc0			bcc 	_CALANoCarry
.4cbe	e6 2b		inc $2b				inc 	temp0+1
.4cc0					_CALANoCarry:
.4cc0	60		rts				rts
.4cc1					CAActualSize:
>4cc1	04 04						.byte 	VarISize,VarISize
>4cc3	02 02						.byte 	VarSSize,VarSSize
>4cc5	06 06						.byte 	VarFSize,VarFSize
.4cc7					EraseOneElement:
.4cc7	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4cc9	10 09		bpl $4cd4			bpl 	_EOESubArray
.4ccb	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4ccd	ad dd 0e	lda $0edd			lda 	varType
.4cd0	20 62 4e	jsr $4e62			jsr 	ZeroTemp0Y
.4cd3	60		rts				rts
.4cd4					_EOESubArray:
.4cd4	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4cd6	48		pha				pha
.4cd7	a5 2b		lda $2b				lda 	temp0+1
.4cd9	48		pha				pha
.4cda	ad db 0e	lda $0edb			lda 	elementSize 				; save element size
.4cdd	48		pha				pha
.4cde	e8		inx				inx 								; create at next level
.4cdf	20 5d 4c	jsr $4c5d			jsr 	CreateArrayLevel
.4ce2	ca		dex				dex
.4ce3	85 32		sta $32				sta 	tempShort 					; save A
.4ce5	68		pla				pla  								; restore element size.
.4ce6	8d db 0e	sta $0edb			sta 	elementSize
.4ce9	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4cea	85 2b		sta $2b				sta 	temp0+1
.4cec	68		pla				pla
.4ced	85 2a		sta $2a				sta 	temp0
.4cef	98		tya				tya 								; store Y/A there
.4cf0	a0 01		ldy #$01			ldy 	#1
.4cf2	91 2a		sta ($2a),y			sta 	(temp0),y
.4cf4	a5 32		lda $32				lda 	tempShort
.4cf6	88		dey				dey
.4cf7	91 2a		sta ($2a),y			sta 	(temp0),y
.4cf9	60		rts				rts
.4cfa					AllocateArraySpace:
.4cfa	18		clc				clc 								; element count + 1 => temp2.
.4cfb	b5 98		lda $98,x			lda 	esInt0,x
.4cfd	69 01		adc #$01			adc 	#1
.4cff	85 2e		sta $2e				sta 	temp2
.4d01	b5 a0		lda $a0,x			lda 	esInt1,x
.4d03	69 00		adc #$00			adc 	#0
.4d05	85 2f		sta $2f				sta 	temp2+1
.4d07	ad db 0e	lda $0edb			lda 	elementSize 				; bytes per element
.4d0a	20 31 4d	jsr $4d31			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4d0d	18		clc				clc 								; add 2 for 'max element' byte.
.4d0e	a5 2e		lda $2e				lda 	temp2
.4d10	69 02		adc #$02			adc 	#2
.4d12	85 2e		sta $2e				sta 	temp2
.4d14	90 02		bcc $4d18			bcc 	_AASNoCarry
.4d16	e6 2f		inc $2f				inc 	temp2+1
.4d18					_AASNoCarry:
.4d18	18		clc				clc 								; add to low memory, allocating space.
.4d19	a5 35		lda $35				lda 	lowMemory
.4d1b	65 2e		adc $2e				adc 	temp2
.4d1d	85 35		sta $35				sta 	lowMemory
.4d1f	a5 36		lda $36				lda 	lowMemory+1
.4d21	65 2f		adc $2f				adc 	temp2+1
.4d23	85 36		sta $36				sta 	lowMemory+1
.4d25	b0 05		bcs $4d2c			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4d27	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4d29	b0 01		bcs $4d2c			bcs 	_AASFail
.4d2b	60		rts				rts
.4d2c					_AASFail:
.4d2c	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4d2e	20 27 15	jsr $1527		jsr	errorHandler
.4d31					MultiplyTemp2ByA:
.4d31	48		pha				pha
.4d32	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4d34	85 30		sta $30				sta 	temp3
.4d36	a5 2f		lda $2f				lda 	temp2+1
.4d38	85 31		sta $31				sta 	temp3+1
.4d3a	68		pla				pla
.4d3b	06 2e		asl $2e				asl 	temp2 						; double it.
.4d3d	26 2f		rol $2f				rol 	temp2+1
.4d3f	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4d41	f0 15		beq $4d58			beq 	_MTBAExit
.4d43	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4d45	d0 0d		bne $4d54			bne 	_MTBANotFloat
.4d47	18		clc				clc 								; so this will make it x 3
.4d48	a5 2e		lda $2e				lda 	temp2
.4d4a	65 30		adc $30				adc 	temp3
.4d4c	85 2e		sta $2e				sta 	temp2
.4d4e	a5 2f		lda $2f				lda 	temp2+1
.4d50	65 31		adc $31				adc 	temp3+1
.4d52	85 2f		sta $2f				sta 	temp2+1
.4d54					_MTBANotFloat:
.4d54	06 2e		asl $2e				asl 	temp2 						; double it.
.4d56	26 2f		rol $2f				rol 	temp2+1
.4d58					_MTBAExit:
.4d58	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0edc					varHash:
>0edc							.fill	1
.0edd					varType:
>0edd							.fill 	1
.0ede					varEnd:
>0ede							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4d59					AccessVariable:
.4d59	aa		tax				tax 								; stack in X
.4d5a	c8		iny				iny									; look at second character
.4d5b	b1 28		lda ($28),y			lda 	(codePtr),y
.4d5d	88		dey				dey
.4d5e	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4d60	d0 15		bne $4d77			bne 	_AVLong 					; no, always use the hash tables.
.4d62	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4d64	38		sec				sec 	 							; make it 0-25
.4d65	e9 01		sbc #$01			sbc 	#1
.4d67	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4d68	0a		asl a				asl 	a
.4d69	95 98		sta $98,x			sta 	esInt0,x
.4d6b	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4d6d	95 a0		sta $a0,x			sta 	esInt1,x
.4d6f	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4d71	95 90		sta $90,x			sta 	esType,x
.4d73	c8		iny				iny 								; skip over the variable reference in the code.
.4d74	c8		iny				iny  								; (1 letter, 1 type)
.4d75	8a		txa				txa 								; stack in A to return.
.4d76	60		rts				rts
.4d77					_AVLong:
.4d77	da		phx				phx
.4d78	20 be 4d	jsr $4dbe			jsr 	AccessSetup 				; set up the basic information we need for later
.4d7b	20 c0 4e	jsr $4ec0			jsr 	FindVariable 				; does the variable exist already ?
.4d7e	b0 0e		bcs $4d8e			bcs 	_AVFound 					; yes, then its found
.4d80	ad dd 0e	lda $0edd			lda 	varType 					; otherwise, is the variable type an array
.4d83	4a		lsr a				lsr 	a
.4d84	90 05		bcc $4d8b			bcc 	_AVCanCreate 				; if not, we can autocreate
.4d86	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4d88	20 27 15	jsr $1527		jsr	errorHandler
.4d8b					_AVCanCreate:
.4d8b	20 f9 4d	jsr $4df9			jsr 	CreateVariable 				; variable does not exist, create it.
.4d8e					_AVFound:
.4d8e	fa		plx				plx
.4d8f	18		clc				clc 								; copy temp0 (variable record address)
.4d90	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4d92	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4d94	95 98		sta $98,x			sta 	esInt0,x
.4d96	a5 2b		lda $2b				lda 	temp0+1
.4d98	69 00		adc #$00			adc 	#0
.4d9a	95 a0		sta $a0,x			sta 	esInt1,x
.4d9c	a9 00		lda #$00			lda 	#0
.4d9e	95 a8		sta $a8,x			sta 	esInt2,x
.4da0	95 b0		sta $b0,x			sta 	esInt3,x
.4da2	ac dd 0e	ldy $0edd			ldy 	varType 					; get the type ID from the type.
.4da5	b9 7e 4d	lda $4d7e,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4da8	95 90		sta $90,x			sta 	esType,x
.4daa	ac de 0e	ldy $0ede			ldy 	varEnd 						; restore Y
.4dad	ad dd 0e	lda $0edd			lda 	VarType 					; get variable type, put LSB into C
.4db0	4a		lsr a				lsr 	a
.4db1	90 03		bcc $4db6			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4db3	20 67 4b	jsr $4b67			jsr 	AccessArray 				; array lookup. if LSB was set.
.4db6					_AVNotArray:
.4db6	8a		txa				txa 								; return stack in A and return
.4db7	60		rts				rts
.4db8					_AVTypeTable:
>4db8	80 80						.byte 	$80,$80						; integer
>4dba	c0 c0						.byte 	$C0,$C0 					; string
>4dbc	81 81						.byte 	$81,$81 					; float
.4dbe					AccessSetup:
.4dbe	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4dc0	8d dc 0e	sta $0edc			sta 	varHash
.4dc3	5a		phy				phy
.4dc4	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4dc6	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4dc8	b0 0b		bcs $4dd5			bcs 	_ASComplete
.4dca	18		clc				clc 								; add to the hash. Might improve this.
.4dcb	6d dc 0e	adc $0edc			adc 	varHash
.4dce	8d dc 0e	sta $0edc			sta 	varHash
.4dd1	c8		iny				iny 								; next character
.4dd2	4c c4 4d	jmp $4dc4			jmp 	_ASLoop
.4dd5					_ASComplete:
.4dd5	8d dd 0e	sta $0edd			sta 	varType 					; save variable type byte
.4dd8	c8		iny				iny
.4dd9	8c de 0e	sty $0ede			sty 	varEnd 						; save the ending position.
.4ddc	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4ddd	e9 3a		sbc #$3a			sbc 	#$3A
.4ddf	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4de0	0a		asl a				asl 	a
.4de1	0a		asl a				asl 	a
.4de2	0a		asl a				asl 	a 							; 2 bytes/word
.4de3	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4de5	ad dc 0e	lda $0edc			lda 	varHash 					; get hash
.4de8	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4dea	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4deb	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4ded	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4def	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4df1	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4df3	69 00		adc #$00			adc 	#0
.4df5	85 3c		sta $3c				sta 	hashList+1
.4df7	7a		ply				ply
.4df8	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4df9					CreateVariable:
.4df9	98		tya				tya 								; push Y on the stack twice.
.4dfa	48		pha				pha									; position in code of the new variable.
.4dfb	48		pha				pha
.4dfc	ae dd 0e	ldx $0edd			ldx 	varType 					; get var type 0-5 from the var type
.4dff	bd 22 4e	lda $4e22,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4e02	48		pha				pha 								; save length
.4e03	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4e05	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4e07	a5 36		lda $36				lda 	lowMemory+1
.4e09	85 2b		sta $2b				sta 	temp0+1
.4e0b	68		pla				pla 								; get length
.4e0c	18		clc				clc 								; add to low memory.
.4e0d	65 35		adc $35				adc 	lowMemory
.4e0f	85 35		sta $35				sta 	lowMemory
.4e11	90 08		bcc $4e1b			bcc 	_CVNoCarry
.4e13	e6 36		inc $36				inc 	lowMemory+1
.4e15	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4e17	c5 34		cmp $34				cmp 	highMemory+1
.4e19	b0 3c		bcs $4e57			bcs 	_CVMemory
.4e1b					_CVNoCarry:
.4e1b	ad dc 0e	lda $0edc			lda 	varHash 					; store hash at offset 4.
.4e1e	a0 04		ldy #$04			ldy 	#4
.4e20	91 2a		sta ($2a),y			sta 	(temp0),y
.4e22	68		pla				pla 								; offset, work out where the variable name is.
.4e23	18		clc				clc
.4e24	65 28		adc $28				adc 	codePtr
.4e26	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4e28	91 2a		sta ($2a),y			sta 	(temp0),y
.4e2a	a5 29		lda $29				lda 	codePtr+1
.4e2c	69 00		adc #$00			adc 	#0
.4e2e	c8		iny				iny
.4e2f	91 2a		sta ($2a),y			sta 	(temp0),y
.4e31	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4e34	b0 03		bcs $4e39			bcs 	_CVNotImmediate
.4e36	20 96 4e	jsr $4e96			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4e39					_CVNotImmediate:
.4e39	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4e3b	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4e3d	91 2a		sta ($2a),y			sta 	(temp0),y
.4e3f	c8		iny				iny
.4e40	b1 3b		lda ($3b),y			lda 	(hashList),y
.4e42	91 2a		sta ($2a),y			sta 	(temp0),y
.4e44	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4e46	91 3b		sta ($3b),y			sta 	(hashList),y
.4e48	88		dey				dey
.4e49	a5 2a		lda $2a				lda 	temp0
.4e4b	91 3b		sta ($3b),y			sta 	(hashList),y
.4e4d	ad dd 0e	lda $0edd			lda 	varType 					; type in A
.4e50	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4e52	20 62 4e	jsr $4e62			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4e55	7a		ply				ply
.4e56	60		rts				rts
.4e57					_CVMemory:
.4e57	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4e59	20 27 15	jsr $1527		jsr	errorHandler
>4e5c	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4e5e	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4e60	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4e62					ZeroTemp0Y:
.4e62	4a		lsr a				lsr 	a 							; bit 0 in carry
.4e63	0a		asl a				asl 	a
.4e64	b0 17		bcs $4e7d			bcs 	_ZTExit 					; we don't initialise arrays.
.4e66	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4e68	f0 14		beq $4e7e			beq 	_ZTWriteNullString 			; write "" string
.4e6a	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4e6c	f0 20		beq $4e8e			beq 	_ZTWriteFloat
.4e6e	5a		phy				phy
.4e6f	a9 00		lda #$00			lda 	#0
.4e71	91 2a		sta ($2a),y			sta 	(temp0),y
.4e73	c8		iny				iny
.4e74	91 2a		sta ($2a),y			sta 	(temp0),y
.4e76	c8		iny				iny
.4e77	91 2a		sta ($2a),y			sta 	(temp0),y
.4e79	c8		iny				iny
.4e7a	91 2a		sta ($2a),y			sta 	(temp0),y
.4e7c	7a		ply				ply
.4e7d					_ZTExit:
.4e7d	60		rts				rts
.4e7e					_ZTWriteNullString:
.4e7e	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4e80	8d ce 0a	sta $0ace			sta 	NullString
.4e83	a9 ce		lda #$ce			lda 	#NullString & $FF
.4e85	91 2a		sta ($2a),y			sta 	(temp0),y
.4e87	a9 0a		lda #$0a			lda 	#NullString >> 8
.4e89	c8		iny				iny
.4e8a	91 2a		sta ($2a),y			sta 	(temp0),y
.4e8c	88		dey				dey
.4e8d	60		rts				rts
.4e8e					_ZTWriteFloat:
.4e8e	da		phx				phx
.4e8f	a2 20		ldx #$20		ldx	#32
.4e91	20 d9 27	jsr $27d9		jsr	floatingpointHandler
.4e94	fa		plx				plx
.4e95	60		rts				rts
.4e96					CloneVariableName:
.4e96	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4e98	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e9a	85 2e		sta $2e				sta 	temp2
.4e9c	c8		iny				iny
.4e9d	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e9f	85 2f		sta $2f				sta 	temp2+1
.4ea1	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4ea3	91 2a		sta ($2a),y			sta 	(temp0),y
.4ea5	88		dey				dey
.4ea6	a5 35		lda $35				lda 	lowMemory
.4ea8	91 2a		sta ($2a),y			sta 	(temp0),y
.4eaa	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4eac					_CVNCopy:
.4eac	b1 2e		lda ($2e),y			lda		(temp2),y
.4eae	91 35		sta ($35),y			sta 	(lowMemory),y
.4eb0	c8		iny				iny
.4eb1	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4eb3	90 f7		bcc $4eac			bcc 	_CVNCopy
.4eb5	98		tya				tya 								; add Y to low memory
.4eb6	18		clc				clc
.4eb7	65 35		adc $35				adc 	lowMemory
.4eb9	85 35		sta $35				sta 	lowMemory
.4ebb	90 02		bcc $4ebf			bcc 	_CVNNoCarry
.4ebd	e6 36		inc $36				inc 	lowMemory+1
.4ebf					_CVNNoCarry:
.4ebf	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4ec0					FindVariable:
.4ec0	5a		phy				phy
.4ec1	98		tya				tya 								; point temp2 to the actual name
.4ec2	18		clc				clc 								; in memory of the variable being created
.4ec3	65 28		adc $28				adc 	codePtr
.4ec5	85 2e		sta $2e				sta 	temp2
.4ec7	a5 29		lda $29				lda 	codePtr+1
.4ec9	69 00		adc #$00			adc 	#0
.4ecb	85 2f		sta $2f				sta 	temp2+1
.4ecd	a0 00		ldy #$00			ldy 	#0
.4ecf	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4ed1	85 2a		sta $2a				sta 	temp0
.4ed3	a5 3c		lda $3c				lda 	hashList+1
.4ed5	85 2b		sta $2b				sta 	temp0+1
.4ed7	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4ed9	b1 2a		lda ($2a),y			lda 	(temp0),y
.4edb	f0 2b		beq $4f08			beq 	_FVFail
.4edd	aa		tax				tax
.4ede	88		dey				dey		 							; get LSB
.4edf	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ee1	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4ee3	86 2b		stx $2b				stx 	temp0+1
.4ee5	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4ee7	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ee9	cd dc 0e	cmp $0edc			cmp 	varHash
.4eec	d0 e9		bne $4ed7			bne 	_FVNext 					; if not, no point in checking the name.
.4eee	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4eef	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ef1	85 2d		sta $2d				sta 	temp1+1
.4ef3	88		dey				dey
.4ef4	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ef6	85 2c		sta $2c				sta 	temp1
.4ef8	a0 00		ldy #$00			ldy 	#0
.4efa					_FVCheck:
.4efa	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4efc	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4efe	d0 d7		bne $4ed7			bne 	_FVNext		 				; fail if different.
.4f00	c8		iny				iny
.4f01	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4f03	90 f5		bcc $4efa			bcc 	_FVCheck
.4f05	7a		ply				ply
.4f06	38		sec				sec
.4f07	60		rts				rts
.4f08					_FVFail:
.4f08	7a		ply				ply
.4f09	18		clc				clc
.4f0a	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4f0b					HashTableReset:
.4f0b	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4f0d	a9 00		lda #$00			lda 	#0
.4f0f					_HTRClear:
.4f0f	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4f12	ca		dex				dex
.4f13	d0 fa		bne $4f0f			bne 	_HTRClear
.4f15	60		rts				rts

;******  Return to file: variable/variable.asm

.4f16					variableHandler:
.4f16	7c 19 4f	jmp ($4f19,x)			jmp 	(variableVectors,x)
.4f19					variableVectors:
>4f19	21 4f					.word _DummyControlHandler ; index 0
>4f1b	59 4d					.word AccessVariable       ; index 2
>4f1d	e9 4b					.word CreateArray          ; index 4
>4f1f	0b 4f					.word HashTableReset       ; index 6
.4f21					_DummyControlHandler:
.4f21	60		rts			rts

;******  Return to file: basic.asm

.4f22					section_end_variable:
.4f22					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0edf					endStorage:
>4f22							.align 	256
.5000					programMemory:
>4fff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.5000					section_end_footer:

;******  End of listing
