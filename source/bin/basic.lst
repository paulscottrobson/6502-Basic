
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Tue Mar  9 16:22:39 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a2 04		ldx #$04		ldx	#4
.1005	20 aa 23	jsr $23aa		jsr	deviceHandler
.1008	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.100a	8d c8 0a	sta $0ac8			sta 	basePage
.100d	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100f	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1012	a9 00		lda #$00			lda 	#($9800) & $FF
.1014	8d ca 0a	sta $0aca			sta 	endMemory
.1017	a9 98		lda #$98			lda 	#($9800) >> 8
.1019	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.101c	4c e5 14	jmp $14e5			jmp 	Command_Run
.1028	4c c0 2b	jmp $2bc0			jmp 	TokTest
.33ab					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	18 01 00 ca 85 11 54 68			.byte 24,1,0,202,133,17,84,104,105,115,32,105,115,32,97,32,99,111,109,109,101,110,116,128,6,2,0,129,137,128,12,3,0,1,45,49,58,141,144,65,99,128,9,4,0,24,58,141,144,66,128,7,5,0,213,1,58,128,14,6,0,213,193,133,5,72,101,108,108,111,198,128,14,7,0,213,194,133,5,72,101,108,108,111,198,128,23,8,0,3,49,60,141,133,6,83,65,86,69,77,69,143,133,4,116,101,115,116,128,24,9,0,213,133,5,83,84,65,82,84,200,1,45,49,58,200,3,49,60,200,24,58,128,11,10,0,205,19,8,15,23,59,198,128,30,11,0,205,4,5,13,15,59,106,200,197,82,77,69,89,120,200,133,8,73,78,68,69,77,79,33,33,198,128,11,12,0,205,19,8,15,23,59,198,128,22,13,0,213,133,3,69,78,68,200,1,45,49,58,200,3,49,60,200,24,58,128,11,14,0,205,19,8,15,23,59,198,128,33,15,0,3,49,60,141,133,19,120,120,120,120,120,120,120,120,120,120,120,120,120,65,65,65,65,65,65,143,133,1,33,128,14,16,0,213,3,49,60,200,165,3,49,60,198,128,11,17,0,205,19,8,15,23,59,198,128,8,18,0,153,199,158,171,128,22,19,0,157,4,5,13,15,59,1,45,49,58,200,24,58,200,3,49,60,198,128,11,20,0,205,19,8,15,23,59,198,128,18,21,0,3,49,60,141,3,49,60,143,133,4,33,33,33,33,128,11,22,0,205,19,8,15,23,59,198,128,13,23,0,205,24,15,50,59,133,1,42,198,128,45,24,0,213,133,4,68,69,77,79,200,1,45,49,58,200,3,1,45,49,60,200,133,1,36,201,184,24,58,200,80,198,200,133,1,36,184,195,3,49,60,200,80,198,128,5,25,0,163,128,13,26,0,157,24,15,50,59,3,49,60,198,128,14,27,0,213,133,3,88,79,50,201,3,49,60,128,5,28,0,163,128,11,29,0,157,19,8,15,23,59,198,128,11,30,0,1,58,141,195,3,49,60,128,26,31,0,213,133,1,36,201,184,187,1,58,198,200,80,198,200,186,187,1,58,198,144,65,198,128,5,32,0,163,128,28,33,0,24,24,58,24,24,59,68,198,24,24,60,24,24,61,68,198,24,24,62,24,24,63,68,198,128,0
>5008	69 73 20 69 73 20 61 20 63 6f 6d 6d 65 6e 74 80
>5018	06 02 00 81 89 80 0c 03 00 01 2d 31 3a 8d 90 41
>5028	63 80 09 04 00 18 3a 8d 90 42 80 07 05 00 d5 01
>5038	3a 80 0e 06 00 d5 c1 85 05 48 65 6c 6c 6f c6 80
>5048	0e 07 00 d5 c2 85 05 48 65 6c 6c 6f c6 80 17 08
>5058	00 03 31 3c 8d 85 06 53 41 56 45 4d 45 8f 85 04
>5068	74 65 73 74 80 18 09 00 d5 85 05 53 54 41 52 54
>5078	c8 01 2d 31 3a c8 03 31 3c c8 18 3a 80 0b 0a 00
>5088	cd 13 08 0f 17 3b c6 80 1e 0b 00 cd 04 05 0d 0f
>5098	3b 6a c8 c5 52 4d 45 59 78 c8 85 08 49 4e 44 45
>50a8	4d 4f 21 21 c6 80 0b 0c 00 cd 13 08 0f 17 3b c6
>50b8	80 16 0d 00 d5 85 03 45 4e 44 c8 01 2d 31 3a c8
>50c8	03 31 3c c8 18 3a 80 0b 0e 00 cd 13 08 0f 17 3b
>50d8	c6 80 21 0f 00 03 31 3c 8d 85 13 78 78 78 78 78
>50e8	78 78 78 78 78 78 78 78 41 41 41 41 41 41 8f 85
>50f8	01 21 80 0e 10 00 d5 03 31 3c c8 a5 03 31 3c c6
>5108	80 0b 11 00 cd 13 08 0f 17 3b c6 80 08 12 00 99
>5118	c7 9e ab 80 16 13 00 9d 04 05 0d 0f 3b 01 2d 31
>5128	3a c8 18 3a c8 03 31 3c c6 80 0b 14 00 cd 13 08
>5138	0f 17 3b c6 80 12 15 00 03 31 3c 8d 03 31 3c 8f
>5148	85 04 21 21 21 21 80 0b 16 00 cd 13 08 0f 17 3b
>5158	c6 80 0d 17 00 cd 18 0f 32 3b 85 01 2a c6 80 2d
>5168	18 00 d5 85 04 44 45 4d 4f c8 01 2d 31 3a c8 03
>5178	01 2d 31 3c c8 85 01 24 c9 b8 18 3a c8 50 c6 c8
>5188	85 01 24 b8 c3 03 31 3c c8 50 c6 80 05 19 00 a3
>5198	80 0d 1a 00 9d 18 0f 32 3b 03 31 3c c6 80 0e 1b
>51a8	00 d5 85 03 58 4f 32 c9 03 31 3c 80 05 1c 00 a3
>51b8	80 0b 1d 00 9d 13 08 0f 17 3b c6 80 0b 1e 00 01
>51c8	3a 8d c3 03 31 3c 80 1a 1f 00 d5 85 01 24 c9 b8
>51d8	bb 01 3a c6 c8 50 c6 c8 ba bb 01 3a c6 90 41 c6
>51e8	80 05 20 00 a3 80 1c 21 00 18 18 3a 18 18 3b 44
>51f8	c6 18 18 3c 18 18 3d 44 c6 18 18 3e 18 18 3f 44
>5208	c6 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.102b					Command_Assert:
.102b	20 a8 1c	jsr $1ca8			jsr 	EvaluateRootInteger 		; what is being asserted.
.102e	20 33 22	jsr $2233			jsr 	MInt32Zero 					; is it true ?
.1031	f0 01		beq $1034			beq 	_CAError
.1033	60		rts				rts
.1034					_CAError:
.1034	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1036	20 c1 23	jsr $23c1		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1039					CommandClear:
.1039	98		tya				tya
.103a	48		pha				pha
.103b	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.103e	85 0d		sta $0d				sta 	highMemory
.1040	ad cb 0a	lda $0acb			lda 	endMemory+1
.1043	85 0e		sta $0e				sta 	highMemory+1
.1045	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1048	85 04		sta $04				sta 	temp0
.104a	ad c9 0a	lda $0ac9			lda 	basePage+1
.104d	85 05		sta $05				sta 	temp0+1
.104f					_CCFindEnd:
.104f	a0 00		ldy #$00			ldy 	#0
.1051	b1 04		lda ($04),y			lda 	(temp0),y
.1053	f0 0c		beq $1061			beq 	_CCFoundEnd 				; offset zero is end.
.1055	18		clc				clc
.1056	65 04		adc $04				adc 	temp0 						; move to next line
.1058	85 04		sta $04				sta 	temp0
.105a	90 f3		bcc $104f			bcc 	_CCFindEnd
.105c	e6 05		inc $05				inc 	temp0+1
.105e	4c 4f 10	jmp $104f			jmp 	_CCFindEnd
.1061					_CCFoundEnd:
.1061	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1063	85 0f		sta $0f				sta 	lowMemory
.1065	a5 05		lda $05				lda 	temp0+1
.1067	85 10		sta $10				sta 	lowMemory+1
.1069	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.106b	20 7f 10	jsr $107f			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.106e	20 99 22	jsr $2299			jsr 	RSReset 					; reset the return stack.
.1071	a2 04		ldx #$04		ldx	#4
.1073	20 a2 33	jsr $33a2		jsr	variableHandler
.1076	20 9a 16	jsr $169a			jsr 	ScanProc 					; scan for procedures
.1079	20 a6 14	jsr $14a6			jsr 	CommandRestore 				; do a restore
.107c	68		pla				pla
.107d	a8		tay				tay
.107e	60		rts				rts
.107f					AdvanceLowMemoryByte:
.107f	18		clc				clc
.1080	65 0f		adc $0f				adc 	lowMemory
.1082	85 0f		sta $0f				sta 	lowMemory
.1084	90 02		bcc $1088			bcc 	_ALMBExit
.1086	e6 10		inc $10				inc 	lowMemory+1
.1088					_ALMBExit:
.1088	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1089					Command_Dim:
.1089	a2 02		ldx #$02		ldx	#2
.108b	20 a2 33	jsr $33a2		jsr	variableHandler
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.1090	c8		iny				iny
.1091	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1093	f0 f4		beq $1089			beq 	Command_Dim
.1095	88		dey				dey 								; unpick get
.1096	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.33ab					Command_FOR:
.33ab	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.33ad	a2 0b		ldx #$0b			ldx 	#11
.33af	20 a7 22	jsr $22a7			jsr 	RSClaim
.33b2	20 84 11	jsr $1184			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.33b5	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.33b7	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.33b9	d0 4c		bne $3407			bne 	_CFType
.33bb	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.33bd	20 74 22	jsr $2274			jsr 	CheckToken
.33c0	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.33c2	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger				; get terminal value in stack 1
.33c5	98		tya				tya
.33c6	48		pha				pha
.33c7	a0 04		ldy #$04			ldy 	#4
.33c9	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.33cb	91 78		sta ($78),y			sta 	(rsPointer),y
.33cd	c8		iny				iny
.33ce	a5 50		lda $50				lda		esInt1
.33d0	91 78		sta ($78),y			sta 	(rsPointer),y
.33d2	c8		iny				iny
.33d3	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.33d5	91 78		sta ($78),y			sta 	(rsPointer),y
.33d7	c8		iny				iny
.33d8	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.33da	91 78		sta ($78),y			sta 	(rsPointer),y
.33dc	c8		iny				iny
.33dd	a5 51		lda $51				lda		esInt1+1
.33df	91 78		sta ($78),y			sta 	(rsPointer),y
.33e1	c8		iny				iny
.33e2	a5 59		lda $59				lda		esInt2+1
.33e4	91 78		sta ($78),y			sta 	(rsPointer),y
.33e6	c8		iny				iny
.33e7	a5 61		lda $61				lda		esInt3+1
.33e9	91 78		sta ($78),y			sta 	(rsPointer),y
.33eb	68		pla				pla
.33ec	a8		tay				tay
.33ed	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.33ef	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.33f1	d0 0e		bne $3401			bne 	_CFDone
.33f3	c8		iny				iny									; skip over step.
.33f4	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger 			; get step
.33f7	98		tya				tya
.33f8	48		pha				pha
.33f9	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.33fb	a0 06		ldy #$06			ldy 	#6
.33fd	91 78		sta ($78),y			sta 	(rsPointer),y
.33ff	68		pla				pla
.3400	a8		tay				tay
.3401					_CFDone:
.3401	a9 01		lda #$01			lda 	#1
.3403	20 d3 22	jsr $22d3			jsr 	RSSavePosition 				; save position.
.3406	60		rts				rts
.3407					_CFType:
.3407	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3409	20 c1 23	jsr $23c1		jsr	errorHandler
.340c					Command_NEXT:
.340c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.340e	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.3410	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.3412	f0 05		beq $3419			beq 	_isok
.3414	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.3416	20 c1 23	jsr $23c1		jsr	errorHandler
.3419					_isok:
.3419	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.341b	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.341d	b0 18		bcs $3437			bcs 	_CNNoIndex
.341f	a2 00		ldx #$00			ldx 	#0 							; start on stack
.3421	20 dd 1c	jsr $1cdd			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.3424	98		tya				tya
.3425	48		pha				pha
.3426	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.3428	b1 78		lda ($78),y			lda 	(rsPointer),y
.342a	d5 48		cmp $48,x			cmp 	esInt0,x
.342c	d0 76		bne $34a4			bne 	_CNBadIndex
.342e	c8		iny				iny
.342f	b1 78		lda ($78),y			lda 	(rsPointer),y
.3431	d5 50		cmp $50,x			cmp 	esInt1,x
.3433	d0 6f		bne $34a4			bne 	_CNBadIndex
.3435	68		pla				pla
.3436	a8		tay				tay
.3437					_CNNoIndex:
.3437	98		tya				tya
.3438	48		pha				pha
.3439	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.343b	b1 78		lda ($78),y			lda 	(rsPointer),y
.343d	85 04		sta $04				sta 	temp0
.343f	c8		iny				iny
.3440	b1 78		lda ($78),y			lda 	(rsPointer),y
.3442	85 05		sta $05				sta 	temp0+1
.3444	c8		iny				iny
.3445	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.3447	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.3449	85 09		sta $09				sta 	temp2+1 					; save for later.
.344b	10 01		bpl $344e			bpl 	_CNSignX
.344d	ca		dex				dex  								; X = $FF
.344e					_CNSignX:
.344e	18		clc				clc 								; add to the LSB
.344f	a0 00		ldy #$00			ldy 	#0
.3451	71 04		adc ($04),y			adc 	(temp0),y
.3453	91 04		sta ($04),y			sta 	(temp0),y
.3455					_CNPropogate:
.3455	c8		iny				iny  								; add the sign extended in X to the rest.
.3456	8a		txa				txa
.3457	71 04		adc ($04),y			adc 	(temp0),y
.3459	91 04		sta ($04),y			sta 	(temp0),y
.345b	c8		iny				iny
.345c	8a		txa				txa
.345d	71 04		adc ($04),y			adc 	(temp0),y
.345f	91 04		sta ($04),y			sta 	(temp0),y
.3461	c8		iny				iny
.3462	8a		txa				txa
.3463	71 04		adc ($04),y			adc 	(temp0),y
.3465	91 04		sta ($04),y			sta 	(temp0),y
.3467	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.3468	a5 78		lda $78				lda 	rsPointer
.346a	69 07		adc #$07			adc 	#7
.346c	85 06		sta $06				sta 	temp1
.346e	a9 00		lda #$00			lda 	#0
.3470	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.3472	a8		tay				tay 								; and clear the Y register again.
.3473	65 79		adc $79				adc 	rsPointer+1
.3475	85 07		sta $07				sta 	temp1+1
.3477	38		sec				sec 								; calculate current - limit oring interim values.
.3478	20 b0 34	jsr $34b0			jsr 	_CNCompare 					; each of these does a byte.
.347b	20 b0 34	jsr $34b0			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.347e	20 b0 34	jsr $34b0			jsr 	_CNCompare 					; and the carry of the subtraction.
.3481	20 b0 34	jsr $34b0			jsr 	_CNCompare
.3484	50 02		bvc $3488			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.3486	49 80		eor #$80			eor 	#$80
.3488					_CNNoOverflow:
.3488	a4 09		ldy $09				ldy 	temp2+1						; get step back
.348a	30 1d		bmi $34a9			bmi 	_CNCheckDownto
.348c	c9 00		cmp #$00			cmp 	#0
.348e	30 0c		bmi $349c			bmi 	_CNLoopRound 				; loop round if < =
.3490	a5 08		lda $08				lda 	temp2
.3492	f0 08		beq $349c			beq 	_CNLoopRound
.3494					_CNLoopExit:
.3494	68		pla				pla
.3495	a8		tay				tay
.3496	a9 0b		lda #$0b			lda 	#11
.3498	20 c9 22	jsr $22c9			jsr 	RSFree
.349b	60		rts				rts
.349c					_CNLoopRound:
.349c	68		pla				pla
.349d	a8		tay				tay
.349e	a9 01		lda #$01			lda 	#1
.34a0	20 e6 22	jsr $22e6			jsr 	RSLoadPosition				; go back to the loop top
.34a3	60		rts				rts
.34a4					_CNBadIndex:
.34a4	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.34a6	20 c1 23	jsr $23c1		jsr	errorHandler
.34a9					_CNCheckDownto:
.34a9	c9 00		cmp #$00			cmp 	#0
.34ab	10 ef		bpl $349c			bpl 	_CNLoopRound
.34ad	4c 94 34	jmp $3494			jmp 	_CNLoopExit
.34b0					_CNCompare:
.34b0	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.34b2	f1 06		sbc ($06),y			sbc 	(temp1),y
.34b4	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.34b6	85 08		sta $08				sta 	temp2
.34b8	c8		iny				iny
.34b9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1097					CommandIf:
.1097	20 a8 1c	jsr $1ca8			jsr 	EvaluateRootInteger 		; get what's being tested.
.109a	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.109c	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.109e	f0 04		beq $10a4			beq 	_IfSimple
.10a0	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.10a2	d0 1b		bne $10bf			bne 	_IfComplex
.10a4					_IfSimple:
.10a4	20 33 22	jsr $2233			jsr 	MInt32Zero					; check if TOS zero
.10a7	f0 10		beq $10b9			beq 	_IfEOL 						; go to next line.
.10a9	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.10ab	c8		iny				iny
.10ac	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.10ae	f0 0c		beq $10bc			beq 	_IfGoto 					; do the Goto code
.10b0	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.10b2	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10b4	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10b6	f0 04		beq $10bc			beq 	_IfGoto
.10b8	60		rts				rts 								; else continue on this line.
.10b9					_IfEOL:
.10b9	4c 0e 17	jmp $170e			jmp 	AdvanceNextLine 			; go to next line
.10bc					_IfGoto:
.10bc	4c 83 17	jmp $1783			jmp 	CommandGoto
.10bf					_IfComplex:
.10bf	20 33 22	jsr $2233			jsr 	MInt32Zero 					; is it true ?
.10c2	f0 01		beq $10c5			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10c4	60		rts				rts 								; else continue.
.10c5					_IFSkip:
.10c5	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10c7	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10c9	4c a5 35	jmp $35a5			jmp		ScanForward
.10cc					Command_ELSE:
.10cc	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ce	8a		txa				txa
.10cf	4c a5 35	jmp $35a5			jmp		ScanForward
.10d2					Command_ENDIF:
.10d2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0af0					InputBuffer:
>0af0							.fill 	MaxInputSize+1
.10d3					Command_Input:
.10d3	b1 02		lda ($02),y			lda 	(codePtr),y 			; see what's next.
.10d5	c8		iny				iny
.10d6	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.10d8	f0 f9		beq $10d3			beq 	Command_Input
.10da	88		dey				dey 							; undo consume
.10db	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.10dd	f0 54		beq $1133			beq 	_CIExit 				; : or EOL, exit
.10df	c9 80		cmp #$80			cmp 	#TOK_EOL
.10e1	f0 50		beq $1133			beq 	_CIExit
.10e3	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.10e5	90 12		bcc $10f9			bcc 	_CIVariable
.10e7	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.10e9	d0 43		bne $112e			bne 	_CISyntax
.10eb	a2 00		ldx #$00			ldx 	#0
.10ed	20 9f 1c	jsr $1c9f			jsr 	EvaluateString 			; evaluate and print string
.10f0	20 f9 11	jsr $11f9			jsr 	TOSToTemp0
.10f3	20 c8 13	jsr $13c8			jsr 	PrintString
.10f6	4c d3 10	jmp $10d3			jmp 	Command_Input
.10f9					_CIVariable:
.10f9	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.10fb	20 dd 1c	jsr $1cdd			jsr 	EvaluateReference
.10fe					_CIRetry:
.10fe	a9 3f		lda #$3f			lda 	#"?"
.1100	a2 0e		ldx #$0e		ldx	#14
.1102	20 aa 23	jsr $23aa		jsr	deviceHandler
.1105	98		tya				tya
.1106	48		pha				pha
.1107	20 47 11	jsr $1147			jsr 	InputString 			; input a string.
.110a	a2 01		ldx #$01			ldx 	#1
.110c	20 34 11	jsr $1134			jsr 	BufferToStackX 			; make stack,x ref input string.
.110f	a5 40		lda $40				lda 	esType 					; if target type numeric
.1111	29 40		and #$40			and 	#$40 					; then convert to number
.1113	d0 11		bne $1126			bne 	_CIWrite
.1115	a2 01		ldx #$01			ldx 	#1
.1117	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.111a	a9 0a		lda #$0a			lda 	#10
.111c	20 7a 20	jsr $207a			jsr 	MInt32FromString 		; convert it back from a string.
.111f	68		pla				pla
.1120	a8		tay				tay
.1121	b0 03		bcs $1126			bcs 	_CIWrite 				; successfully converted.
.1123	18		clc				clc 							; default fail FP conversion
.1124	90 d8		bcc $10fe			bcc		_CIRetry				; failed, try again.
.1126					_CIWrite:
.1126	a2 00		ldx #$00			ldx 	#0
.1128	20 97 11	jsr $1197			jsr 	WriteValue
.112b	4c d3 10	jmp $10d3			jmp 	Command_Input
.112e					_CISyntax:
.112e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1130	20 c1 23	jsr $23c1		jsr	errorHandler
.1133					_CIExit:
.1133	60		rts				rts
.1134					BufferToStackX:
.1134	a9 f0		lda #$f0			lda 	#InputBuffer & $FF
.1136	95 48		sta $48,x			sta 	esInt0,x
.1138	a9 0a		lda #$0a			lda 	#InputBuffer >> 8
.113a	95 50		sta $50,x			sta 	esInt1,x
.113c	a9 00		lda #$00			lda 	#0
.113e	95 58		sta $58,x			sta 	esInt2,x
.1140	95 60		sta $60,x			sta 	esInt3,x
.1142	a9 40		lda #$40			lda 	#$40
.1144	95 40		sta $40,x			sta 	esType,x
.1146	60		rts				rts
.1147					InputString:
.1147	a9 00		lda #$00			lda 	#0
.1149	8d f0 0a	sta $0af0			sta 	InputBuffer
.114c					_InputLoop:
.114c	a2 08		ldx #$08		ldx	#8
.114e	20 aa 23	jsr $23aa		jsr	deviceHandler
.1151	c9 00		cmp #$00			cmp 	#0
.1153	f0 f7		beq $114c			beq 	_InputLoop
.1155	c9 08		cmp #$08			cmp 	#8
.1157	f0 19		beq $1172			beq 	_InputBackspace
.1159	c9 0d		cmp #$0d			cmp 	#13
.115b	f0 21		beq $117e			beq 	_InputExit
.115d	ae f0 0a	ldx $0af0			ldx 	InputBuffer
.1160	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1162	f0 e8		beq $114c			beq 	_InputLoop
.1164	9d f1 0a	sta $0af1,x			sta 	InputBuffer+1,x 		; write char
.1167	ee f0 0a	inc $0af0			inc 	InputBuffer 			; advance count.
.116a					_InputPrintLoop:
.116a	a2 0e		ldx #$0e		ldx	#14
.116c	20 aa 23	jsr $23aa		jsr	deviceHandler
.116f	4c 4c 11	jmp $114c			jmp	 	_InputLoop
.1172					_InputBackspace:
.1172	ad f0 0a	lda $0af0			lda 	InputBuffer 			; at start
.1175	f0 d5		beq $114c			beq 	_InputLoop
.1177	ce f0 0a	dec $0af0			dec 	InputBuffer
.117a	a9 08		lda #$08			lda 	#8
.117c	d0 ec		bne $116a			bne 	_InputPrintLoop
.117e					_InputExit:
.117e	a2 02		ldx #$02		ldx	#2
.1180	20 aa 23	jsr $23aa		jsr	deviceHandler
.1183	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1184					CommandLet:
.1184	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1186	20 dd 1c	jsr $1cdd			jsr 	EvaluateReference
.1189	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.118b	20 74 22	jsr $2274			jsr 	CheckToken
.118e	e8		inx				inx 								; do RHS
.118f	20 8b 1c	jsr $1c8b			jsr 	Evaluate 					; evaluate and dereference
.1192	ca		dex				dex
.1193	20 97 11	jsr $1197			jsr 	WriteValue 					; write it out
.1196	60		rts				rts
.1197					WriteValue:
.1197	98		tya				tya
.1198	48		pha				pha
.1199	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.119c	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.119e	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.11a0	29 40		and #$40			and 	#$40
.11a2	d0 50		bne $11f4			bne		_WVType
.11a4	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.11a6	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.11a8	29 40		and #$40			and 	#$40
.11aa	d0 1f		bne $11cb			bne 	_WVCopyString
.11ac	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.11ae	15 41		ora $41,x			ora 	esType+1,x
.11b0	4a		lsr a				lsr 	a
.11b1	90 22		bcc $11d5			bcc 	_WVCopyData4 				; copy 4 data bytes.
.11b3	b5 40		lda $40,x			lda 	esType,x
.11b5	4a		lsr a				lsr 	a
.11b6	90 3c		bcc $11f4			bcc 	_WVType
.11b8	e8		inx				inx 								; force the value being written to be a float.
.11b9	20 f5 17	jsr $17f5			jsr 	BPMakeFloat
.11bc	ca		dex				dex
.11bd	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; set Temp0 to write address
.11c0	e8		inx				inx
.11c1	8a		txa				txa
.11c2	a2 20		ldx #$20		ldx	#32
.11c4	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.11c7	aa		tax				tax
.11c8	4c f1 11	jmp $11f1			jmp 	_WVCopyExit
.11cb					_WVCopyString:
.11cb	8a		txa				txa
.11cc	a2 0c		ldx #$0c		ldx	#12
.11ce	20 48 29	jsr $2948		jsr	stringHandler
.11d1	aa		tax				tax
.11d2	4c f1 11	jmp $11f1			jmp 	_WVCopyExit
.11d5					_WVCopyData4:
.11d5	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.11d7	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.11d9	d0 10		bne $11eb			bne 	_WVCopyData1
.11db	a0 03		ldy #$03			ldy 	#3
.11dd	b5 61		lda $61,x			lda 	esInt3+1,x
.11df	91 04		sta ($04),y			sta 	(temp0),y
.11e1	88		dey				dey
.11e2	b5 59		lda $59,x			lda 	esInt2+1,x
.11e4	91 04		sta ($04),y			sta 	(temp0),y
.11e6	88		dey				dey
.11e7	b5 51		lda $51,x			lda 	esInt1+1,x
.11e9	91 04		sta ($04),y			sta 	(temp0),y
.11eb					_WVCopyData1:
.11eb	a0 00		ldy #$00			ldy 	#0
.11ed	b5 49		lda $49,x			lda 	esInt0+1,x
.11ef	91 04		sta ($04),y			sta 	(temp0),y
.11f1					_WVCopyExit:
.11f1	68		pla				pla
.11f2	a8		tay				tay
.11f3	60		rts				rts
.11f4					_WVType:
.11f4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.11f6	20 c1 23	jsr $23c1		jsr	errorHandler
.11f9					TOSToTemp0:
.11f9	b5 48		lda $48,x			lda 	esInt0,x
.11fb	85 04		sta $04				sta 	temp0
.11fd	b5 50		lda $50,x			lda 	esInt1,x
.11ff	85 05		sta $05				sta 	temp0+1
.1201	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.34ba					CommandList:
.34ba	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1
.34bc	20 0c 22	jsr $220c			jsr 	MInt32False
.34bf	e8		inx				inx
.34c0	20 08 22	jsr $2208			jsr 	MInt32True
.34c3	b1 02		lda ($02),y			lda 	(codePtr),y
.34c5	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; list ,xxxx
.34c7	f0 4e		beq $3517			beq 	_CLEnd
.34c9	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.34cb	30 1b		bmi $34e8			bmi 	_CLDoListing
.34cd	a2 00		ldx #$00			ldx 	#0 							; get start
.34cf	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger
.34d2	b1 02		lda ($02),y			lda 	(codePtr),y 				; , follows
.34d4	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.34d6	f0 06		beq $34de			beq 	_CLEndLine
.34d8	20 4a 21	jsr $214a			jsr 	MInt32CopyUp 				; copy first to second
.34db	4c e8 34	jmp $34e8			jmp 	_CLDoListing
.34de					_CLEndLine:
.34de	c8		iny				iny 								; skip comma
.34df	b1 02		lda ($02),y			lda 	(codePtr),y  				; no number follows.
.34e1	30 05		bmi $34e8			bmi 	_CLDoListing
.34e3	a2 01		ldx #$01			ldx 	#1
.34e5	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger				; get end
.34e8					_CLDoListing:
.34e8	20 3f 15	jsr $153f			jsr 	ResetCodeAddress 			; back to the start.
.34eb					_CLCheckLoop:
.34eb	a0 00		ldy #$00			ldy 	#0							; check end.
.34ed	b1 02		lda ($02),y			lda 	(codePtr),y
.34ef	f0 26		beq $3517			beq 	_CLEnd
.34f1	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.34f3	20 1a 35	jsr $351a			jsr 	CLCompareLineTOS
.34f6	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.34f8	f0 0d		beq $3507			beq 	_CLNext
.34fa	e8		inx				inx
.34fb	20 1a 35	jsr $351a			jsr 	CLCompareLineTOS 			; compare vs higher
.34fe	c9 01		cmp #$01			cmp 	#1
.3500	f0 05		beq $3507			beq 	_CLNext
.3502	a2 02		ldx #$02		ldx	#2
.3504	20 e1 30	jsr $30e1		jsr	tokeniserHandler
.3507					_CLNext:
.3507	a0 00		ldy #$00			ldy 	#0
.3509	b1 02		lda ($02),y			lda 	(codePtr),y
.350b	18		clc				clc
.350c	65 02		adc $02				adc 	codePtr
.350e	85 02		sta $02				sta 	codePtr
.3510	90 d9		bcc $34eb			bcc 	_CLCheckLoop
.3512	e6 03		inc $03				inc 	codePtr+1
.3514	4c eb 34	jmp $34eb			jmp 	_CLCheckLoop
.3517					_CLEnd:
.3517	4c 17 35	jmp $3517			jmp 	_CLEnd
.351a					CLCompareLineTOS:
.351a	a0 01		ldy #$01			ldy 	#1
.351c	b1 02		lda ($02),y			lda 	(codePtr),y
.351e	55 48		eor $48,x			eor 	esInt0,x
.3520	85 04		sta $04				sta 	temp0
.3522	c8		iny				iny
.3523	b1 02		lda ($02),y			lda 	(codePtr),y
.3525	55 50		eor $50,x			eor 	esInt1,x
.3527	05 04		ora $04				ora 	temp0
.3529	f0 10		beq $353b			beq 	_CLCLTExit
.352b	88		dey				dey
.352c	b1 02		lda ($02),y			lda 	(codePtr),y
.352e	d5 48		cmp $48,x			cmp 	esInt0,x
.3530	c8		iny				iny
.3531	b1 02		lda ($02),y			lda 	(codePtr),y
.3533	f5 50		sbc $50,x			sbc 	esInt1,x
.3535	a9 ff		lda #$ff			lda 	#255
.3537	90 02		bcc $353b			bcc 	_CLCLTExit
.3539	a9 01		lda #$01			lda 	#1
.353b					_CLCLTExit:
.353b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0b11					storeSize:
>0b11							.fill 	1
.1202					CommandLocal:
.1202	a2 00		ldx #$00			ldx 	#0
.1204	20 20 12	jsr $1220			jsr 	LocaliseVariable 			; localise one.
.1207					_CLCheckNext:
.1207	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1209	c8		iny				iny
.120a	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.120c	f0 06		beq $1214			beq 	_CLAssignment
.120e	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1210	f0 f0		beq $1202			beq 	CommandLocal
.1212	88		dey				dey
.1213	60		rts				rts
.1214					_CLAssignment:
.1214	a2 01		ldx #$01			ldx 	#1
.1216	20 8b 1c	jsr $1c8b			jsr 	Evaluate 					; evaluate RHS
.1219	ca		dex				dex
.121a	20 97 11	jsr $1197			jsr 	WriteValue
.121d	4c 07 12	jmp $1207			jmp 	_CLCheckNext
.1220					LocaliseVariable:
.1220	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1222	c9 40		cmp #$40			cmp 	#$40
.1224	b0 67		bcs $128d			bcs 	_LVSyntax
.1226	8a		txa				txa 								; get the address of that variable.
.1227	a2 00		ldx #$00		ldx	#0
.1229	20 a2 33	jsr $33a2		jsr	variableHandler
.122c	aa		tax				tax
.122d	8a		txa				txa
.122e	48		pha				pha
.122f	98		tya				tya
.1230	48		pha				pha
.1231	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1234	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1236	0a		asl a				asl 	a
.1237	10 16		bpl $124f			bpl 	_LVPushNumber
.1239	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.123b	b1 04		lda ($04),y			lda 	(temp0),y
.123d	c8		iny				iny
.123e	85 06		sta $06				sta 	temp1
.1240	b1 04		lda ($04),y			lda 	(temp0),y
.1242	85 07		sta $07				sta 	temp1+1
.1244	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1246	b1 06		lda ($06),y			lda 	(temp1),y
.1248	aa		tax				tax 								; into X
.1249	e8		inx				inx 								; +1 for length.
.124a	a9 24		lda #$24			lda 	#markerString
.124c	4c 64 12	jmp $1264			jmp 	_LVWriteFrame
.124f					_LVPushNumber:
.124f	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1251	85 06		sta $06				sta 	temp1
.1253	a5 05		lda $05				lda 	temp0+1
.1255	85 07		sta $07				sta 	temp1+1
.1257	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1259	4a		lsr a				lsr 	a
.125a	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.125c	a2 04		ldx #$04			ldx 	#VarISize
.125e	90 04		bcc $1264			bcc 	_LVIsInteger
.1260	a9 23		lda #$23			lda 	#markerFloat
.1262	a2 06		ldx #$06			ldx 	#VarFSize
.1264					_LVIsInteger:
.1264					_LVWriteFrame:
.1264	8e 11 0b	stx $0b11			stx 	storeSize 					; number of bytes to copy from (temp0)
.1267	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1268	e8		inx				inx
.1269	e8		inx				inx
.126a	20 a7 22	jsr $22a7			jsr 	RSClaim 					; create the stack frame.
.126d	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.126f	a0 01		ldy #$01			ldy 	#1
.1271	91 78		sta ($78),y			sta 	(rsPointer),y
.1273	c8		iny				iny
.1274	a5 05		lda $05				lda 	temp0+1
.1276	91 78		sta ($78),y			sta 	(rsPointer),y
.1278	a0 00		ldy #$00			ldy 	#0
.127a					_LVCopyData:
.127a	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.127c	c8		iny				iny 								; write allowing for the header bit.
.127d	c8		iny				iny
.127e	c8		iny				iny
.127f	91 78		sta ($78),y			sta 	(rsPointer),y
.1281	88		dey				dey
.1282	88		dey				dey
.1283	ce 11 0b	dec $0b11			dec 	storeSize 					; do it storesize times
.1286	d0 f2		bne $127a			bne 	_LVCopyData
.1288	68		pla				pla
.1289	a8		tay				tay
.128a	68		pla				pla
.128b	aa		tax				tax
.128c	60		rts				rts
.128d					_LVSyntax:
.128d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.128f	20 c1 23	jsr $23c1		jsr	errorHandler
.1292					RestoreLocals:
.1292	a2 00		ldx #$00			ldx 	#0
.1294	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1296	c9 40		cmp #$40			cmp	 	#64
.1298	90 01		bcc $129b			bcc 	_RLocal
.129a	60		rts				rts
.129b					_RLocal:
.129b	8a		txa				txa
.129c	48		pha				pha
.129d	98		tya				tya
.129e	48		pha				pha
.129f	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.12a1	b1 78		lda ($78),y			lda 	(rsPointer),y
.12a3	85 04		sta $04				sta 	temp0
.12a5	c8		iny				iny
.12a6	b1 78		lda ($78),y			lda 	(rsPointer),y
.12a8	85 05		sta $05				sta 	temp0+1
.12aa	a0 00		ldy #$00			ldy 	#0 							; get type back.
.12ac	b1 78		lda ($78),y			lda 	(rsPointer),y
.12ae	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.12b0	f0 28		beq $12da			beq 	_RString
.12b2	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.12b4	c9 25		cmp #$25			cmp 	#markerInt
.12b6	f0 02		beq $12ba			beq 	_RIsInteger
.12b8	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.12ba					_RIsInteger:
.12ba	8a		txa				txa
.12bb	48		pha				pha
.12bc	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.12be					_RCopyBack:
.12be	b1 78		lda ($78),y			lda 	(rsPointer),y
.12c0	88		dey				dey
.12c1	88		dey				dey
.12c2	88		dey				dey
.12c3	91 04		sta ($04),y			sta 	(temp0),y
.12c5	c8		iny				iny
.12c6	c8		iny				iny
.12c7	c8		iny				iny
.12c8	c8		iny				iny
.12c9	ca		dex				dex
.12ca	d0 f2		bne $12be			bne 	_RCopyBack
.12cc	68		pla				pla 								; get size add 3
.12cd	18		clc				clc
.12ce	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.12d0					_RRestoreAAndLoop:
.12d0	20 c9 22	jsr $22c9			jsr 	RSFree
.12d3	68		pla				pla
.12d4	a8		tay				tay
.12d5	68		pla				pla
.12d6	aa		tax				tax
.12d7	4c 92 12	jmp $1292			jmp 	RestoreLocals 				; go see if there are any more locals.
.12da					_RString:
.12da	a2 00		ldx #$00			ldx 	#0
.12dc	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.12de	b1 78		lda ($78),y			lda 	(rsPointer),y
.12e0	95 48		sta $48,x			sta 	esInt0,x
.12e2	c8		iny				iny
.12e3	b1 78		lda ($78),y			lda 	(rsPointer),y
.12e5	95 50		sta $50,x			sta 	esInt1,x
.12e7	18		clc				clc
.12e8	a5 78		lda $78				lda 	rsPointer
.12ea	69 03		adc #$03			adc 	#3
.12ec	95 49		sta $49,x			sta 	esInt0+1,x
.12ee	a5 79		lda $79				lda 	rsPointer+1
.12f0	69 00		adc #$00			adc 	#0
.12f2	95 51		sta $51,x			sta 	esInt1+1,x
.12f4	8a		txa				txa
.12f5	a2 0c		ldx #$0c		ldx	#12
.12f7	20 48 29	jsr $2948		jsr	stringHandler
.12fa	a0 03		ldy #$03			ldy 	#3 							; get string length
.12fc	b1 78		lda ($78),y			lda 	(rsPointer),y
.12fe	18		clc				clc
.12ff	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1301	4c d0 12	jmp $12d0			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1304					Command_New:
.1304	20 3f 15	jsr $153f			jsr 	ResetCodeAddress 			; point to first line
.1307	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1309	98		tya				tya
.130a	91 02		sta ($02),y			sta 	(codePtr),y
.130c	20 39 10	jsr $1039			jsr 	CommandClear 				; clear everything down.
.130f	4c 0b 17	jmp $170b			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1312					Command_Poke:
.1312	a9 01		lda #$01			lda 	#1
.1314	d0 06		bne $131c			bne 	PokeGeneral
.1316					Command_Doke:
.1316	a9 02		lda #$02			lda 	#2
.1318	d0 02		bne $131c			bne 	PokeGeneral
.131a					Command_Loke:
.131a	a9 03		lda #$03			lda 	#3
.131c					PokeGeneral:
.131c	48		pha				pha 								; save id (PDL = 123)
.131d	20 a8 1c	jsr $1ca8			jsr 	EvaluateRootInteger 		; target address
.1320	20 8c 22	jsr $228c			jsr	 	CheckComma
.1323	e8		inx				inx
.1324	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger 			; what value to POKE ?
.1327	ca		dex				dex
.1328	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; temp0 points to the target address
.132b	84 0c		sty $0c				sty 	tempShort 					; save Y
.132d	68		pla				pla 								; get copy type (1-3) and dispatch
.132e	aa		tax				tax
.132f	ca		dex				dex
.1330	f0 14		beq $1346			beq 	_Poke1
.1332	ca		dex				dex
.1333	f0 0b		beq $1340			beq 	_Poke2
.1335	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1337	a5 61		lda $61				lda 	esInt3+1
.1339	91 04		sta ($04),y			sta 	(temp0),y
.133b	88		dey				dey
.133c	a5 59		lda $59				lda 	esInt2+1
.133e	91 04		sta ($04),y			sta 	(temp0),y
.1340					_Poke2:
.1340	a0 01		ldy #$01			ldy 	#1
.1342	a5 51		lda $51				lda 	esInt1+1
.1344	91 04		sta ($04),y			sta 	(temp0),y
.1346					_Poke1:
.1346	a0 00		ldy #$00			ldy 	#0
.1348	a5 49		lda $49				lda 	esInt0+1
.134a	91 04		sta ($04),y			sta 	(temp0),y
.134c	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.134e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0b12					lastPrintToken:
>0b12							.fill 	1
.134f					Command_Print:
.134f	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1351	8d 12 0b	sta $0b12			sta 	lastPrintToken
.1354	88		dey				dey
.1355					_PrintLoopSkip:
.1355	c8		iny				iny
.1356					_PrintLoop:
.1356	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1358	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.135a	f0 5b		beq $13b7			beq 	_PrintExit
.135c	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.135e	f0 57		beq $13b7			beq 	_PrintExit
.1360	8d 12 0b	sta $0b12			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1363	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1365	f0 ee		beq $1355			beq 	_PrintLoopSkip
.1367	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.1369	f0 3c		beq $13a7			beq	 	_PrintNewLine
.136b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.136d	f0 40		beq $13af			beq 	_PrintTab
.136f	20 89 1c	jsr $1c89			jsr 	EvaluateRoot 				; evaluate something at the root
.1372	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1374	85 04		sta $04				sta 	temp0
.1376	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1378	85 05		sta $05				sta 	1+(temp0)
.137a	a5 40		lda $40				lda 	esType 						; get type
.137c	f0 15		beq $1393			beq		_PrintInteger
.137e	4a		lsr a				lsr 	a 							; check for floating point
.137f	b0 08		bcs $1389			bcs 	_PrintFloat
.1381					_PrintString:
.1381	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1383	20 f9 11	jsr $11f9			jsr 	TOSToTemp0
.1386	4c a1 13	jmp $13a1			jmp 	_PrintTemp0 				; print no leading space.
.1389					_PrintFloat:
.1389	a9 00		lda #$00			lda 	#0 							; stack level.
.138b	a2 14		ldx #$14		ldx	#20
.138d	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1390	4c 9a 13	jmp $139a			jmp 	_PrintSpaceTemp0
.1393					_PrintInteger:
.1393	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1395	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1397	20 62 21	jsr $2162			jsr 	MInt32ToString				; convert to text
.139a					_PrintSpaceTemp0:
.139a	a9 20		lda #$20			lda 	#32
.139c	a2 0e		ldx #$0e		ldx	#14
.139e	20 aa 23	jsr $23aa		jsr	deviceHandler
.13a1					_PrintTemp0:
.13a1	20 c8 13	jsr $13c8			jsr 	PrintString
.13a4	4c 56 13	jmp $1356			jmp 	_PrintLoop
.13a7					_PrintNewLine:
.13a7	a2 02		ldx #$02		ldx	#2
.13a9	20 aa 23	jsr $23aa		jsr	deviceHandler
.13ac	4c 55 13	jmp $1355			jmp 	_PrintLoopSkip
.13af					_PrintTab:
.13af	a2 10		ldx #$10		ldx	#16
.13b1	20 aa 23	jsr $23aa		jsr	deviceHandler
.13b4	4c 55 13	jmp $1355			jmp 	_PrintLoopSkip
.13b7					_PrintExit:
.13b7	ad 12 0b	lda $0b12			lda		lastPrintToken 				; check last token
.13ba	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.13bc	f0 09		beq $13c7			beq 	_PrintExit2
.13be	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.13c0	f0 05		beq $13c7			beq 	_PrintExit2
.13c2	a2 02		ldx #$02		ldx	#2
.13c4	20 aa 23	jsr $23aa		jsr	deviceHandler
.13c7					_PrintExit2:
.13c7	60		rts				rts
.13c8					PrintString:
.13c8	8a		txa				txa
.13c9	48		pha				pha
.13ca	98		tya				tya
.13cb	48		pha				pha
.13cc	a0 00		ldy #$00			ldy 	#0							; get length
.13ce	b1 04		lda ($04),y			lda 	(temp0),y
.13d0	aa		tax				tax 								; into X
.13d1	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.13d3	f0 10		beq $13e5			beq 	_PSExit
.13d5	ca		dex				dex
.13d6	8a		txa				txa
.13d7	48		pha				pha
.13d8	c8		iny				iny
.13d9	b1 04		lda ($04),y			lda 	(temp0),y
.13db	a2 0e		ldx #$0e		ldx	#14
.13dd	20 aa 23	jsr $23aa		jsr	deviceHandler
.13e0	68		pla				pla
.13e1	aa		tax				tax
.13e2	4c d1 13	jmp $13d1			jmp 	_PSLoop
.13e5					_PSExit:
.13e5	68		pla				pla
.13e6	a8		tay				tay
.13e7	68		pla				pla
.13e8	aa		tax				tax
.13e9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0b13					paramCount:
>0b13							.fill 	1
.13ea					CallProc:
.13ea	20 2e 16	jsr $162e			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.13ed	48		pha				pha 								; save length on stack
.13ee	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.13f0	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.13f2	48		pha				pha
.13f3	a5 04		lda $04				lda 	temp0
.13f5	48		pha				pha
.13f6	98		tya				tya 								; calculate Y + length
.13f7	18		clc				clc
.13f8	65 0c		adc $0c				adc 	tempShort
.13fa	a8		tay				tay
.13fb	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.13fd					_CallProcEvalParams:
.13fd	e8		inx				inx
.13fe	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.1400	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1402	f0 0b		beq $140f			beq 	_CPDoneParams
.1404	20 8b 1c	jsr $1c8b			jsr 	Evaluate 					; evaluate a parameter
.1407	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1409	c8		iny				iny
.140a	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.140c	f0 ef		beq $13fd			beq 	_CallProcEvalParams
.140e	88		dey				dey 								; undo consumption.
.140f					_CPDoneParams:
.140f	20 7f 22	jsr $227f			jsr 	CheckRightParen 			; check closing parenthesis.
.1412	8e 13 0b	stx $0b13			stx 	paramCount 					; store parameter count+1
.1415	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1417	a9 50		lda #$50			lda 	#markerPROC
.1419	20 a7 22	jsr $22a7			jsr 	RSClaim
.141c	a9 01		lda #$01			lda 	#1 							; store return address.
.141e	20 d3 22	jsr $22d3			jsr 	RSSavePosition
.1421	68		pla				pla 								; get the new code Ptr
.1422	85 02		sta $02				sta 	codePtr
.1424	68		pla				pla
.1425	85 03		sta $03				sta 	codePtr+1
.1427	68		pla				pla 								; length of name + 4 is the param start.
.1428	18		clc				clc
.1429	69 04		adc #$04			adc 	#4
.142b	a8		tay				tay
.142c	a2 ff		ldx #$ff			ldx 	#$FF
.142e					_CPLoadParameters:
.142e	e8		inx				inx 								; point to where the address should be loaded.
.142f	ec 13 0b	cpx $0b13			cpx 	paramCount 					; too many parameters in definition ?
.1432	f0 1e		beq $1452			beq 	_CPParamError
.1434	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1436	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.1438	f0 0e		beq $1448			beq 	_CPParamComplete 			; done all the parameters
.143a	20 20 12	jsr $1220			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.143d	20 97 11	jsr $1197			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1440	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1442	c8		iny				iny
.1443	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1445	f0 e7		beq $142e			beq 	_CPLoadParameters
.1447	88		dey				dey 								; no, unconsume and check for )
.1448					_CPParamComplete:
.1448	20 7f 22	jsr $227f			jsr 	CheckRightParen 			; check )
.144b	e8		inx				inx 								; check right number of parameters
.144c	ec 13 0b	cpx $0b13			cpx 	paramCount
.144f	d0 01		bne $1452			bne 	_CPParamError
.1451	60		rts				rts
.1452					_CPParamError:
.1452	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1454	20 c1 23	jsr $23c1		jsr	errorHandler
.1457					ReturnProc:
.1457	20 92 12	jsr $1292			jsr 	RestoreLocals 				; get the locals back.
.145a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.145c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.145e	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1460	f0 05		beq $1467			beq 	_isok
.1462	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1464	20 c1 23	jsr $23c1		jsr	errorHandler
.1467					_isok:
.1467	a9 01		lda #$01			lda 	#1
.1469	20 e6 22	jsr $22e6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.146c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.146e	20 c9 22	jsr $22c9			jsr 	RSFree
.1471	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0b14					dataPtr:
>0b14							.fill 	2
.0b16					dataIndex:
>0b16							.fill 	1
.1472					CommandRead:
.1472	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1474	20 dd 1c	jsr $1cdd			jsr 	EvaluateReference
.1477	20 b8 14	jsr $14b8			jsr 	SwapDPCP 					; use the data pointer.
.147a	b1 02		lda ($02),y			lda 	(codePtr),y 				; see where it is.
.147c	c8		iny				iny
.147d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.147f	f0 07		beq $1488			beq 	_CRInData
.1481	88		dey				dey
.1482	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1484	aa		tax				tax
.1485	20 a5 35	jsr $35a5			jsr 	ScanForward
.1488					_CRInData:
.1488	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.148a	20 8b 1c	jsr $1c8b			jsr 	Evaluate
.148d	ca		dex				dex 								; and write the value.
.148e	20 97 11	jsr $1197			jsr 	WriteValue
.1491	20 b8 14	jsr $14b8			jsr 	SwapDPCP 					; get the code pointer back.
.1494	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1496	c8		iny				iny
.1497	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.1499	f0 d7		beq $1472			beq 	CommandRead
.149b	88		dey				dey
.149c	60		rts				rts
.149d					CommandData:
.149d	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.149f	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.14a1	20 a5 35	jsr $35a5			jsr 	ScanForward
.14a4	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.14a5	60		rts				rts
.14a6					CommandRestore:
.14a6	ad c8 0a	lda $0ac8			lda 	basePage
.14a9	8d 14 0b	sta $0b14			sta 	dataPtr
.14ac	ad c9 0a	lda $0ac9			lda 	basePage+1
.14af	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14b2	a9 03		lda #$03			lda 	#3
.14b4	8d 16 0b	sta $0b16			sta 	dataIndex
.14b7	60		rts				rts
.14b8					SwapDPCP:
.14b8	8a		txa				txa
.14b9	48		pha				pha
.14ba	98		tya				tya 								; swap Y, DataIndex
.14bb	ac 16 0b	ldy $0b16			ldy 	DataIndex
.14be	8d 16 0b	sta $0b16			sta 	DataIndex
.14c1	a5 02		lda $02				lda 	codePtr 					; swap code/dataptr low
.14c3	ae 14 0b	ldx $0b14			ldx 	dataptr
.14c6	8d 14 0b	sta $0b14			sta 	dataPtr
.14c9	86 02		stx $02				stx 	codePtr
.14cb	a5 03		lda $03				lda 	codePtr+1 					; swap code/dataptr high.
.14cd	ae 15 0b	ldx $0b15			ldx 	dataptr+1
.14d0	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14d3	86 03		stx $03				stx 	codePtr+1
.14d5	68		pla				pla
.14d6	aa		tax				tax
.14d7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.14d8					Command_Rem:
.14d8					Command_Rem2:
.14d8	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.14da	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.14dc	d0 06		bne $14e4			bne 	_CRNotString
.14de	c8		iny				iny
.14df	98		tya				tya
.14e0	38		sec				sec
.14e1	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.14e3	a8		tay				tay
.14e4					_CRNotString:
.14e4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.353c					Command_Repeat:
.353c	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.353e	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.3540	20 a7 22	jsr $22a7			jsr 	RSClaim
.3543	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.3545	20 d3 22	jsr $22d3			jsr 	RSSavePosition
.3548	60		rts				rts
.3549					Command_Until:
.3549	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.354b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.354d	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.354f	f0 05		beq $3556			beq 	_isok
.3551	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.3553	20 c1 23	jsr $23c1		jsr	errorHandler
.3556					_isok:
.3556	20 a8 1c	jsr $1ca8			jsr 	EvaluateRootInteger 		; at the bottom.
.3559	20 33 22	jsr $2233			jsr 	MInt32Zero					; check if TOS zero
.355c	d0 06		bne $3564			bne 	_CUExit
.355e	a9 01		lda #$01			lda 	#1
.3560	20 e6 22	jsr $22e6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.3563	60		rts				rts
.3564					_CUExit:
.3564	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.3566	20 c9 22	jsr $22c9			jsr 	RSFree
.3569	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.14e5					Command_Run:
.14e5	a2 ff		ldx #$ff			ldx 	#$FF
.14e7	9a		txs				txs
.14e8	20 39 10	jsr $1039			jsr 	CommandClear 				; clear everything.
.14eb	20 3f 15	jsr $153f			jsr 	ResetCodeAddress 			; back to the start.
.14ee	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.14f0					CRNextInstruction:
.14f0	64 7b		stz $7b				stz 	softMemAlloc+1
.14f2	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.14f4	10 1c		bpl $1512			bpl 	_CRNotToken
.14f6	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.14f8	b0 0c		bcs $1506			bcs 	_CRExecute
.14fa	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.14fc	b0 4e		bcs $154c			bcs 	Unimplemented
.14fe	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1500	b0 04		bcs $1506			bcs 	_CRExecute
.1502	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1504	b0 16		bcs $151c			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1506					_CRExecute:
.1506	c8		iny				iny 								; consume it.
.1507	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1508	aa		tax				tax
.1509	20 0f 15	jsr $150f			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.150c	4c f0 14	jmp $14f0			jmp 	CRNextInstruction
.150f					_CRRunRoutine:
.150f	7c 56 15	jmp ($1556,x)			jmp 	(Group0Vectors,x)
.1512					_CRNotToken:
.1512	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1514	b0 36		bcs $154c			bcs 	Unimplemented
.1516					_CRDefaultLet:
.1516	20 84 11	jsr $1184			jsr 	CommandLet 					; do the default, LET
.1519	4c f0 14	jmp $14f0			jmp 	CRNextInstruction
.151c					_CRCheckIndirect:
.151c	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.151e	f0 f6		beq $1516			beq 	_CRDefaultLet
.1520	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1522	f0 f2		beq $1516			beq 	_CRDefaultLet
.1524	d0 26		bne $154c			bne 	Unimplemented
.1526					CommandShift1:
.1526	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1528	10 22		bpl $154c			bpl 	Unimplemented 				; we have an error as this should not happen.
.152a	0a		asl a				asl 	a 							; double into X
.152b	aa		tax				tax
.152c	c8		iny				iny 								; advance over it.
.152d	20 33 15	jsr $1533			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1530	4c f0 14	jmp $14f0			jmp 	CRNextInstruction
.1533					_RunIt:
.1533	7c 0e 16	jmp ($160e,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1536					CommandShift2:
.1536	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1538	20 21 26	jsr $2621		jsr	extensionHandler
.153b	4c f0 14	jmp $14f0			jmp 	CRNextInstruction
.153e					CommandColon:
.153e	60		rts				rts
.153f					ResetCodeAddress:
.153f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1542	85 02		sta $02				sta 	codePtr
.1544	ad c9 0a	lda $0ac9			lda 	basePage+1
.1547	85 03		sta $03				sta 	codePtr+1
.1549	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.154b	60		rts				rts
.154c					Unimplemented:
.154c	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.154e	20 c1 23	jsr $23c1		jsr	errorHandler
.1551					TKErr01:
.1551					TKErr02:
.1551					TKErr03:
.1551					TKErr04:
.1551					TKErr05:
.1551					TKErr06:
.1551					TKErr07:
.1551					TKErr08:
.1551					TKErr09:
.1551					TKErr10:
.1551	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1553	20 c1 23	jsr $23c1		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1556					Group0Vectors:
>1556	0e 17					.word	AdvanceNextLine          ; $80 [[eol]]
>1558	26 15					.word	CommandShift1            ; $81 [[sh1]]
>155a	36 15					.word	CommandShift2            ; $82 [[sh2]]
>155c	51 15					.word	TKErr09                  ; $83 [[sh3]]
>155e	51 15					.word	TKErr10                  ; $84 [[fpc]]
>1560	51 15					.word	TKErr08                  ; $85 [[str]]
>1562	97 18					.word	AndHandler               ; $86 and
>1564	84 18					.word	OrHandler                ; $87 or
>1566	71 18					.word	XorHandler               ; $88 xor
>1568	b9 19					.word	CompareGreaterEq         ; $89 >=
>156a	c3 19					.word	CompareLessEq            ; $8a <=
>156c	a5 19					.word	CompareGreater           ; $8b >
>156e	9b 19					.word	CompareLess              ; $8c <
>1570	91 19					.word	CompareEquals            ; $8d =
>1572	af 19					.word	CompareNotEquals         ; $8e <>
>1574	02 18					.word	AddHandler               ; $8f +
>1576	25 18					.word	SubHandler               ; $90 -
>1578	bd 18					.word	ShrHandler               ; $91 >>
>157a	aa 18					.word	ShlHandler               ; $92 <<
>157c	38 18					.word	MulHandler               ; $93 *
>157e	4b 18					.word	DivHandler               ; $94 /
>1580	5e 18					.word	ModHandler               ; $95 mod
>1582	f6 18					.word	PowerHandler             ; $96 ^
>1584	d0 18					.word	WordRefHandler           ; $97 !
>1586	e3 18					.word	ByteRefHandler           ; $98 ?
>1588	3c 35					.word	Command_Repeat           ; $99 repeat
>158a	6a 35					.word	Command_While            ; $9a while
>158c	ab 33					.word	Command_FOR              ; $9b for
>158e	97 10					.word	CommandIf                ; $9c if
>1590	51 15					.word	TKErr04                  ; $9d defproc
>1592	49 35					.word	Command_Until            ; $9e until
>1594	8d 35					.word	Command_Wend             ; $9f wend
>1596	0c 34					.word	Command_NEXT             ; $a0 next
>1598	51 15					.word	TKErr06                  ; $a1 then
>159a	d2 10					.word	Command_ENDIF            ; $a2 endif
>159c	57 14					.word	ReturnProc               ; $a3 endproc
>159e	92 1b					.word	UnaryParenthesis         ; $a4 (
>15a0	f0 1c					.word	UnaryLen                 ; $a5 len(
>15a2	34 1d					.word	UnarySgn                 ; $a6 sgn(
>15a4	1d 1d					.word	UnaryAbs                 ; $a7 abs(
>15a6	8d 1d					.word	Unary_Random             ; $a8 random(
>15a8	d7 1d					.word	Unary_Page               ; $a9 page
>15aa	08 22					.word	MInt32True               ; $aa true
>15ac	0c 22					.word	MInt32False              ; $ab false
>15ae	a2 1d					.word	Unary_Min                ; $ac min(
>15b0	a6 1d					.word	Unary_Max                ; $ad max(
>15b2	91 1e					.word	UnarySys                 ; $ae sys(
>15b4	54 1e					.word	UnaryTimer               ; $af timer(
>15b6	e7 1b					.word	EventFunction            ; $b0 event(
>15b8	7d 1e					.word	UnaryGet                 ; $b1 get(
>15ba	6d 1e					.word	UnaryInkey               ; $b2 inkey(
>15bc	28 1e					.word	UnaryAlloc               ; $b3 alloc(
>15be	b9 1e					.word	ExecChr                  ; $b4 chr$(
>15c0	e9 1e					.word	ExecLeft                 ; $b5 left$(
>15c2	06 1f					.word	ExecMid                  ; $b6 mid$(
>15c4	2e 1f					.word	ExecRight                ; $b7 right$(
>15c6	d3 19					.word	Event_Str                ; $b8 str$(
>15c8	02 1a					.word	UnaryVal                 ; $b9 val(
>15ca	4b 1d					.word	UnaryPeek                ; $ba peek(
>15cc	51 1d					.word	UnaryDeek                ; $bb deek(
>15ce	57 1d					.word	UnaryLeek                ; $bc leek(
>15d0	0e 1d					.word	UnaryAsc                 ; $bd asc(
>15d2	02 1e					.word	UnaryIntToFloat          ; $be int(
>15d4	15 1e					.word	UnaryFloatToInt          ; $bf float(
>15d6	05 1a					.word	UnaryIsVal               ; $c0 isval(
>15d8	d0 1e					.word	ExecUpper                ; $c1 upper$(
>15da	cd 1e					.word	ExecLower                ; $c2 lower$(
>15dc	e5 1d					.word	UnaryReference           ; $c3 @
>15de	fb 1d					.word	UnaryComplement          ; $c4 ~
>15e0	f8 1d					.word	UnaryHexMarker           ; $c5 &
>15e2	51 15					.word	TKErr01                  ; $c6 )
>15e4	3e 15					.word	CommandColon             ; $c7 :
>15e6	51 15					.word	TKErr02                  ; $c8 ,
>15e8	51 15					.word	TKErr03                  ; $c9 ;
>15ea	d8 14					.word	Command_Rem2             ; $ca '
>15ec	51 15					.word	TKErr07                  ; $cb to
>15ee	51 15					.word	TKErr05                  ; $cc step
>15f0	ea 13					.word	CallProc                 ; $cd proc
>15f2	02 12					.word	CommandLocal             ; $ce local
>15f4	89 10					.word	Command_Dim              ; $cf dim
>15f6	d8 14					.word	Command_Rem              ; $d0 rem
>15f8	84 11					.word	CommandLet               ; $d1 let
>15fa	d3 10					.word	Command_Input            ; $d2 input
>15fc	cc 10					.word	Command_ELSE             ; $d3 else
>15fe	b5 17					.word	Command_VDU              ; $d4 vdu
>1600	4f 13					.word	Command_Print            ; $d5 print
>1602	83 17					.word	CommandGOTO              ; $d6 goto
>1604	58 17					.word	CommandGOSUB             ; $d7 gosub
>1606	6b 17					.word	CommandRETURN            ; $d8 return
>1608	9d 14					.word	CommandData              ; $d9 data
>160a	2b 10					.word	Command_Assert           ; $da assert
>160c	12 13					.word	Command_Poke             ; $db poke
>160e	16 13					.word	Command_Doke             ; $dc doke
>1610	1a 13					.word	Command_Loke             ; $dd loke
>1612	28 17					.word	Command_Ink              ; $de ink
>1614	33 17					.word	Command_Paper            ; $df paper
>1616	22 17					.word	Command_CLS              ; $e0 cls
>1618	3e 17					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.161a					Group1Vectors:
>161a	39 10					.word	CommandClear             ; $86 clear
>161c	4c 15					.word	Unimplemented            ; $87 load
>161e	4c 15					.word	Unimplemented            ; $88 save
>1620	ba 34					.word	CommandList              ; $89 list
>1622	04 13					.word	Command_New              ; $8a new
>1624	e5 14					.word	Command_Run              ; $8b run
>1626	72 14					.word	CommandRead              ; $8c read
>1628	a6 14					.word	CommandRestore           ; $8d restore
>162a	0b 17					.word	CommandEnd               ; $8e end
>162c	06 17					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0b17					procList:
>0b17							.fill 	2		 					; terminated by name high.
.0b19					yInLine:
>0b19							.fill 	1
.162e					FindProcedure:
.162e	8c 19 0b	sty $0b19			sty 	yInLine
.1631	20 ec 16	jsr $16ec			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1634	85 06		sta $06				sta 	temp1
.1636	ad 17 0b	lda $0b17			lda		procList 					; put procList address in temp2
.1639	85 08		sta $08				sta 	temp2
.163b	ad 18 0b	lda $0b18			lda 	procList+1
.163e	85 09		sta $09				sta 	temp2+1
.1640	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1642					_FPLoop:
.1642	b1 08		lda ($08),y			lda 	(temp2),y
.1644	f0 4f		beq $1695			beq 	_FPError 					; if so, we don't know this procedure.
.1646	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1648	c8		iny				iny
.1649	b1 08		lda ($08),y			lda 	(temp2),y
.164b	85 04		sta $04				sta 	temp0
.164d	c8		iny				iny
.164e	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1650	c5 06		cmp $06				cmp 	temp1
.1652	d0 2b		bne $167f			bne 	_FPNext 					; hash is different, go to next.
.1654	38		sec				sec
.1655	ad 19 0b	lda $0b19			lda 	yInLine 					; position in line must be at least 4
.1658	e9 04		sbc #$04			sbc 	#4
.165a	18		clc				clc
.165b	65 02		adc $02				adc 	codePtr
.165d	85 0a		sta $0a				sta 	temp3
.165f	a5 03		lda $03				lda 	codePtr+1
.1661	69 00		adc #$00			adc 	#0
.1663	85 0b		sta $0b				sta 	temp3+1
.1665	98		tya				tya
.1666	48		pha				pha
.1667	a0 04		ldy #$04			ldy 	#4
.1669					_FPCName:
.1669	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.166b	d1 04		cmp ($04),y			cmp 	(temp0),y
.166d	d0 0e		bne $167d			bne 	_FPpulYNext 				; if different go to next one.
.166f	c8		iny				iny
.1670	c9 3a		cmp #$3a			cmp 	#$3A
.1672	90 f5		bcc $1669			bcc 	_FPCName 					; compare the whole lot....
.1674	68		pla				pla 								; throw away the saved Y
.1675	98		tya				tya 								; length of name is Y-4
.1676	38		sec				sec
.1677	e9 04		sbc #$04			sbc 	#4
.1679	ac 19 0b	ldy $0b19			ldy 	yInLine  					; get the original Y back
.167c	60		rts				rts
.167d					_FPpulYNext:
.167d	68		pla				pla
.167e	a8		tay				tay
.167f					_FPNext:
.167f	c8		iny				iny 								; next procedure record.
.1680	10 c0		bpl $1642			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1682	98		tya				tya 								; subtract 128 from Y
.1683	38		sec				sec
.1684	e9 80		sbc #$80			sbc 	#128
.1686	a8		tay				tay
.1687	18		clc				clc 								; add 128 to temp2, so we can have more than
.1688	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.168a	69 80		adc #$80			adc 	#128
.168c	85 08		sta $08				sta 	temp2
.168e	90 b2		bcc $1642			bcc 	_FPLoop
.1690	e6 09		inc $09				inc 	temp2+1
.1692	4c 42 16	jmp $1642			jmp 	_FPLoop
.1695					_FPError:
.1695	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1697	20 c1 23	jsr $23c1		jsr	errorHandler
.169a					ScanProc:
.169a	98		tya				tya
.169b	48		pha				pha
.169c	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.169e	8d 17 0b	sta $0b17			sta 	procList
.16a1	a5 10		lda $10				lda 	lowMemory+1
.16a3	8d 18 0b	sta $0b18			sta 	procList+1
.16a6	20 3f 15	jsr $153f			jsr 	ResetCodeAddress 			; back to the start.
.16a9					_ScanLoop:
.16a9	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.16ab	b1 02		lda ($02),y			lda 	(codePtr),y
.16ad	f0 2a		beq $16d9			beq 	_ScanExit
.16af	a0 03		ldy #$03			ldy 	#3							; get first token
.16b1	b1 02		lda ($02),y			lda 	(codePtr),y
.16b3	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.16b5	d0 12		bne $16c9			bne 	_ScanNext
.16b7	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.16b9	20 e1 16	jsr $16e1			jsr 	_ScanWrite
.16bc	a5 02		lda $02				lda 	codePtr
.16be	20 e1 16	jsr $16e1			jsr 	_ScanWrite
.16c1	a0 04		ldy #$04			ldy 	#4 							; start of name part
.16c3	20 ec 16	jsr $16ec			jsr 	CalculateProcedureHash 		; calculate procedure hash
.16c6	20 e1 16	jsr $16e1			jsr 	_ScanWrite
.16c9					_ScanNext:
.16c9	18		clc				clc
.16ca	a0 00		ldy #$00			ldy 	#0
.16cc	b1 02		lda ($02),y			lda 	(codePtr),y
.16ce	65 02		adc $02				adc 	codePtr
.16d0	85 02		sta $02				sta 	codePtr
.16d2	90 d5		bcc $16a9			bcc 	_ScanLoop
.16d4	e6 03		inc $03				inc 	codePtr+1
.16d6	4c a9 16	jmp $16a9			jmp 	_ScanLoop
.16d9					_ScanExit:
.16d9	a9 00		lda #$00			lda 	#0 							; write ending zero.
.16db	20 e1 16	jsr $16e1			jsr 	_ScanWrite
.16de	68		pla				pla
.16df	a8		tay				tay
.16e0	60		rts				rts
.16e1					_ScanWrite:
.16e1	a0 00		ldy #$00			ldy 	#0
.16e3	91 0f		sta ($0f),y			sta 	(lowMemory),y
.16e5	e6 0f		inc $0f				inc 	lowMemory
.16e7	d0 02		bne $16eb			bne 	_SWNoCarry
.16e9	e6 10		inc $10				inc 	lowMemory+1
.16eb					_SWNoCarry:
.16eb	60		rts				rts
.16ec					CalculateProcedureHash:
.16ec	a9 00		lda #$00			lda 	#0 							; clear hash.
.16ee	85 04		sta $04				sta 	temp0
.16f0					_CPHLoop:
.16f0	18		clc				clc 								; add character and rotate and add carry back in
.16f1	b1 02		lda ($02),y			lda 	(codePtr),y
.16f3	65 04		adc $04				adc 	temp0
.16f5	6a		ror a				ror 	a
.16f6	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.16f8	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.16fa	b1 02		lda ($02),y			lda 	(codePtr),y
.16fc	c8		iny				iny 								; advance incase we go round again.
.16fd	c9 3a		cmp #$3a			cmp 	#$3A
.16ff	90 ef		bcc $16f0			bcc 	_CPHLoop
.1701	a5 04		lda $04				lda 	temp0
.1703	a9 aa		lda #$aa			lda 	#$AA
.1705	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1706					CommandStop:
.1706	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1708	20 c1 23	jsr $23c1		jsr	errorHandler
.170b					CommandEnd:
.170b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.170e					AdvanceNextLine:
.170e	a0 00		ldy #$00			ldy 	#0 							; get offset
.1710	b1 02		lda ($02),y			lda 	(codePtr),y
.1712	18		clc				clc 								; add to codePtr
.1713	65 02		adc $02				adc 	codePtr
.1715	85 02		sta $02				sta 	codePtr
.1717	90 02		bcc $171b			bcc 	_ANLNoCarry
.1719	e6 03		inc $03				inc 	codePtr+1
.171b					_ANLNoCarry:
.171b	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.171d	f0 ec		beq $170b			beq 	CommandEnd 					; execute END
.171f	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1721	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1722					Command_CLS:
.1722	a2 00		ldx #$00		ldx	#0
.1724	20 aa 23	jsr $23aa		jsr	deviceHandler
.1727	60		rts				rts
.1728					Command_Ink:
.1728	a2 00		ldx #$00			ldx 	#0
.172a	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger
.172d	a2 06		ldx #$06		ldx	#6
.172f	20 aa 23	jsr $23aa		jsr	deviceHandler
.1732	60		rts				rts
.1733					Command_Paper:
.1733	a2 00		ldx #$00			ldx 	#0
.1735	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger
.1738	a2 0c		ldx #$0c		ldx	#12
.173a	20 aa 23	jsr $23aa		jsr	deviceHandler
.173d	60		rts				rts
.173e					Command_Locate:
.173e	a2 00		ldx #$00			ldx 	#0
.1740	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger
.1743	20 8c 22	jsr $228c			jsr 	CheckComma
.1746	e8		inx				inx
.1747	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger
.174a	98		tya				tya
.174b	48		pha				pha
.174c	a4 49		ldy $49				ldy 	esInt0+1
.174e	a5 48		lda $48				lda 	esInt0
.1750	a2 0a		ldx #$0a		ldx	#10
.1752	20 aa 23	jsr $23aa		jsr	deviceHandler
.1755	68		pla				pla
.1756	a8		tay				tay
.1757	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1758					CommandGOSUB:
.1758	20 a8 1c	jsr $1ca8			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.175b	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.175d	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.175f	20 a7 22	jsr $22a7			jsr 	RSClaim
.1762	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1764	20 d3 22	jsr $22d3			jsr 	RSSavePosition
.1767	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1769	f0 1b		beq $1786			beq 	GotoTOS 					; and do a GOTO there.
.176b					CommandRETURN:
.176b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.176d	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.176f	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1771	f0 05		beq $1778			beq 	_isok
.1773	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1775	20 c1 23	jsr $23c1		jsr	errorHandler
.1778					_isok:
.1778	a9 01		lda #$01			lda 	#1
.177a	20 e6 22	jsr $22e6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.177d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.177f	20 c9 22	jsr $22c9			jsr 	RSFree
.1782	60		rts				rts
.1783					CommandGOTO:
.1783	20 a8 1c	jsr $1ca8			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1786					GotoTOS:
.1786	20 3f 15	jsr $153f			jsr 	ResetCodeAddress 			; simple search.
.1789					_GotoSearch:
.1789	a0 00		ldy #$00			ldy 	#0 							; get offset
.178b	b1 02		lda ($02),y			lda 	(codePtr),y
.178d	f0 21		beq $17b0			beq 	_GotoError 					; not found.
.178f	c8		iny				iny									; check LSB match
.1790	b1 02		lda ($02),y			lda 	(codePtr),y
.1792	d5 48		cmp $48,x			cmp 	esInt0,x
.1794	d0 07		bne $179d			bne 	_GotoNext
.1796	c8		iny				iny
.1797	b1 02		lda ($02),y			lda 	(codePtr),y
.1799	d5 50		cmp $50,x			cmp 	esInt1,x
.179b	f0 10		beq $17ad			beq 	_GotoFound
.179d					_GotoNext:
.179d	a0 00		ldy #$00			ldy 	#0 							; go next line
.179f	b1 02		lda ($02),y			lda 	(codePtr),y
.17a1	18		clc				clc
.17a2	65 02		adc $02				adc 	codePtr
.17a4	85 02		sta $02				sta 	codePtr
.17a6	90 e1		bcc $1789			bcc 	_GotoSearch
.17a8	e6 03		inc $03				inc 	codePtr+1
.17aa	4c 89 17	jmp $1789			jmp 	_GotoSearch
.17ad					_GotoFound:
.17ad	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.17af	60		rts				rts
.17b0					_GotoError:
.17b0	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.17b2	20 c1 23	jsr $23c1		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.17b5					Command_VDU:
.17b5	20 a8 1c	jsr $1ca8			jsr 	EvaluateRootInteger 			; get integer at root.
.17b8	a5 48		lda $48				lda 	esInt0
.17ba	a2 0e		ldx #$0e		ldx	#14
.17bc	20 aa 23	jsr $23aa		jsr	deviceHandler
.17bf					_CVNext:
.17bf	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.17c1	c8		iny				iny
.17c2	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.17c4	f0 ef		beq $17b5			beq 	Command_VDU
.17c6	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.17c8	d0 0a		bne $17d4			bne 	_CVExit
.17ca	a5 50		lda $50				lda 	esInt1
.17cc	a2 0e		ldx #$0e		ldx	#14
.17ce	20 aa 23	jsr $23aa		jsr	deviceHandler
.17d1	4c bf 17	jmp $17bf			jmp 	_CVNext
.17d4	88		dey		_CVExit:dey
.17d5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.356a					Command_While:
.356a	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.356c	a2 04		ldx #$04			ldx 	#4
.356e	20 a7 22	jsr $22a7			jsr 	RSClaim 					; create on stack.
.3571	88		dey				dey
.3572	a9 01		lda #$01			lda 	#1
.3574	20 d3 22	jsr $22d3			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.3577	c8		iny				iny
.3578	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger				; get the conditional
.357b	20 33 22	jsr $2233			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.357e	f0 01		beq $3581			beq 	_CWFail
.3580	60		rts				rts
.3581					_CWFail:
.3581	a9 04		lda #$04			lda 	#4
.3583	20 c9 22	jsr $22c9			jsr 	RSFree 						; close the just opened position.
.3586	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.3588	aa		tax				tax
.3589	20 a5 35	jsr $35a5			jsr 	ScanForward
.358c	60		rts				rts
.358d					Command_Wend:
.358d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.358f	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.3591	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.3593	f0 05		beq $359a			beq 	_isok
.3595	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.3597	20 c1 23	jsr $23c1		jsr	errorHandler
.359a					_isok:
.359a	a9 01		lda #$01			lda 	#1
.359c	20 e6 22	jsr $22e6			jsr 	RSLoadPosition				; go back until true
.359f	a9 04		lda #$04			lda 	#4
.35a1	20 c9 22	jsr $22c9			jsr 	RSFree 						; close the loop
.35a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.17d6					BinaryProcess:
.17d6	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.17d8	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.17da	0a		asl a				asl 	a
.17db	30 0e		bmi $17eb			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.17dd	18		clc				clc 								; return CC for integer
.17de	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.17e0	f0 08		beq $17ea			beq 	_BPExit 					; if both integer then return with CC.
.17e2	20 f0 17	jsr $17f0			jsr 	BPMakeBothFloat 			; make both float
.17e5	a9 01		lda #$01			lda 	#$01 						; set result type to float
.17e7	95 40		sta $40,x			sta 	esType,x
.17e9	38		sec				sec 								; and return with carry set.
.17ea					_BPExit:
.17ea	60		rts				rts
.17eb					_BPStringType:
.17eb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.17ed	20 c1 23	jsr $23c1		jsr	errorHandler
.17f0					BPMakeBothFloat:
.17f0	e8		inx				inx
.17f1	20 f5 17	jsr $17f5			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.17f4	ca		dex				dex
.17f5					BPMakeFloat:
.17f5	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.17f7	4a		lsr a				lsr 	a
.17f8	b0 07		bcs $1801			bcs 	_BPIsFloat 					; already a float if set.
.17fa	8a		txa				txa
.17fb	a2 1a		ldx #$1a		ldx	#26
.17fd	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1800	aa		tax				tax
.1801					_BPIsFloat:
.1801	60		rts				rts
.1802					AddHandler:
.1802	20 51 1a	jsr $1a51			jsr 	DereferenceTwo 				; dereference top two on stack.
.1805	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1807	35 41		and $41,x			and 	esType+1,x
.1809	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.180b	d0 10		bne $181d			bne 	_AHStringConcat				; concatenate strings.
.180d	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.1810	b0 03		bcs $1815			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1812	4c f0 20	jmp $20f0			jmp 	MInt32Add 							; else do it as integer.
.1815					_IsFPOperation:
.1815	8a		txa				txa 								; call the relevant fp routine
.1816	a2 02		ldx #$02		ldx	#2
.1818	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.181b	aa		tax				tax
.181c	60		rts				rts
.181d					_AHStringConcat:
.181d	8a		txa				txa 								; handled by the string module.
.181e	a2 04		ldx #$04		ldx	#4
.1820	20 48 29	jsr $2948		jsr	stringHandler
.1823	aa		tax				tax
.1824	60		rts				rts
.1825					SubHandler:
.1825	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.1828	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.182b	b0 03		bcs $1830			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.182d	4c 0a 21	jmp $210a			jmp 	MInt32Sub 							; else do it as integer.
.1830					_IsFPOperation:
.1830	8a		txa				txa 								; call the relevant fp routine
.1831	a2 10		ldx #$10		ldx	#16
.1833	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1836	aa		tax				tax
.1837	60		rts				rts
.1838					MulHandler:
.1838	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.183b	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.183e	b0 03		bcs $1843			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1840	4c 24 21	jmp $2124			jmp 	MInt32Multiply 							; else do it as integer.
.1843					_IsFPOperation:
.1843	8a		txa				txa 								; call the relevant fp routine
.1844	a2 0a		ldx #$0a		ldx	#10
.1846	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1849	aa		tax				tax
.184a	60		rts				rts
.184b					DivHandler:
.184b	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.184e	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.1851	b0 03		bcs $1856			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1853	4c e1 1f	jmp $1fe1			jmp 	MInt32SDivide 							; else do it as integer.
.1856					_IsFPOperation:
.1856	8a		txa				txa 								; call the relevant fp routine
.1857	a2 06		ldx #$06		ldx	#6
.1859	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.185c	aa		tax				tax
.185d	60		rts				rts
.185e					ModHandler:
.185e	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.1861	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.1864	b0 03		bcs $1869			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1866	4c 5f 20	jmp $205f			jmp 	MInt32Modulus 							; else do it as integer.
.1869					_IsFPOperation:
.1869	8a		txa				txa 								; call the relevant fp routine
.186a	a2 08		ldx #$08		ldx	#8
.186c	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.186f	aa		tax				tax
.1870	60		rts				rts
.1871					XorHandler:
.1871	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.1874	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.1877	b0 03		bcs $187c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1879	4c 93 1f	jmp $1f93			jmp 	MInt32Xor 							; else do it as integer.
.187c					_IsFPOperation:
.187c	8a		txa				txa 								; call the relevant fp routine
.187d	a2 08		ldx #$08		ldx	#8
.187f	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1882	aa		tax				tax
.1883	60		rts				rts
.1884					OrHandler:
.1884	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.1887	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.188a	b0 03		bcs $188f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.188c	4c 7a 1f	jmp $1f7a			jmp 	MInt32Or 							; else do it as integer.
.188f					_IsFPOperation:
.188f	8a		txa				txa 								; call the relevant fp routine
.1890	a2 08		ldx #$08		ldx	#8
.1892	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1895	aa		tax				tax
.1896	60		rts				rts
.1897					AndHandler:
.1897	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.189a	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.189d	b0 03		bcs $18a2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.189f	4c 61 1f	jmp $1f61			jmp 	MInt32And 							; else do it as integer.
.18a2					_IsFPOperation:
.18a2	8a		txa				txa 								; call the relevant fp routine
.18a3	a2 08		ldx #$08		ldx	#8
.18a5	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.18a8	aa		tax				tax
.18a9	60		rts				rts
.18aa					ShlHandler:
.18aa	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.18ad	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.18b0	b0 03		bcs $18b5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18b2	4c 2b 19	jmp $192b			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.18b5					_IsFPOperation:
.18b5	8a		txa				txa 								; call the relevant fp routine
.18b6	a2 08		ldx #$08		ldx	#8
.18b8	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.18bb	aa		tax				tax
.18bc	60		rts				rts
.18bd					ShrHandler:
.18bd	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.18c0	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.18c3	b0 03		bcs $18c8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18c5	4c 2e 19	jmp $192e			jmp 	MInt32ShiftRightX 							; else do it as integer.
.18c8					_IsFPOperation:
.18c8	8a		txa				txa 								; call the relevant fp routine
.18c9	a2 08		ldx #$08		ldx	#8
.18cb	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.18ce	aa		tax				tax
.18cf	60		rts				rts
.18d0					WordRefHandler:
.18d0	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.18d3	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.18d6	b0 03		bcs $18db			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18d8	4c 1d 19	jmp $191d			jmp 	MInt32WordIndirect 							; else do it as integer.
.18db					_IsFPOperation:
.18db	8a		txa				txa 								; call the relevant fp routine
.18dc	a2 08		ldx #$08		ldx	#8
.18de	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.18e1	aa		tax				tax
.18e2	60		rts				rts
.18e3					ByteRefHandler:
.18e3	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.18e6	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.18e9	b0 03		bcs $18ee			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18eb	4c 21 19	jmp $1921			jmp 	MInt32ByteIndirect 							; else do it as integer.
.18ee					_IsFPOperation:
.18ee	8a		txa				txa 								; call the relevant fp routine
.18ef	a2 08		ldx #$08		ldx	#8
.18f1	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.18f4	aa		tax				tax
.18f5	60		rts				rts
.18f6					PowerHandler:
.18f6	20 51 1a	jsr $1a51			jsr 	DereferenceTwo
.18f9	20 d6 17	jsr $17d6			jsr 	BinaryProcess 				; check to see if either is float
.18fc	b0 03		bcs $1901			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18fe	4c 09 19	jmp $1909			jmp 	PowerInteger 							; else do it as integer.
.1901					_IsFPOperation:
.1901	8a		txa				txa 								; call the relevant fp routine
.1902	a2 16		ldx #$16		ldx	#22
.1904	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1907	aa		tax				tax
.1908	60		rts				rts
.1909					PowerInteger:
.1909	20 f0 17	jsr $17f0			jsr 	BPMakeBothFloat				; make them float.
.190c	8a		txa				txa
.190d	a2 16		ldx #$16		ldx	#22
.190f	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1912	a2 12		ldx #$12		ldx	#18
.1914	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1917	aa		tax				tax
.1918	a9 00		lda #$00			lda 	#0 							; make type integer
.191a	95 40		sta $40,x			sta 	esType,x
.191c	60		rts				rts
.191d					Mint32WordIndirect:
.191d	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.191f	d0 02		bne $1923			bne 	Min32Indirect
.1921					Mint32ByteIndirect:
.1921	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.1923					Min32Indirect:
.1923	48		pha				pha 								; save the indirection
.1924	20 f0 20	jsr $20f0			jsr 	MInt32Add 					; add a!b a?b
.1927	68		pla				pla 								; and set the type to reference.
.1928	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.192a	60		rts				rts
.192b					Mint32ShiftLeftX:
.192b	18		clc				clc 								; CC shift left
.192c	90 01		bcc $192f			bcc 	Mint32Shift
.192e					Mint32ShiftRightX:
.192e	38		sec				sec 								; CS shift right
.192f					Mint32Shift:
.192f	08		php				php 								; save carry flag on stack.
.1930	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1932	15 59		ora $59,x			ora 	esInt2+1,x
.1934	15 61		ora $61,x			ora 	esInt3+1,x
.1936	d0 1e		bne $1956			bne 	_MShiftZero
.1938	b5 49		lda $49,x			lda 	esInt0+1,x
.193a	c9 20		cmp #$20			cmp 	#32
.193c	b0 18		bcs $1956			bcs 	_MShiftZero
.193e					_MShiftLoop:
.193e	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1940	f0 12		beq $1954			beq 	_MShiftExit
.1942	d6 49		dec $49,x			dec 	esInt0+1,x
.1944	28		plp				plp 								; restore and save carry
.1945	08		php				php
.1946	90 06		bcc $194e			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.1948	20 2a 22	jsr $222a			jsr 	Mint32ShiftRight
.194b	4c 3e 19	jmp $193e			jmp 	_MShiftLoop
.194e					_MShiftLeft:
.194e	20 21 22	jsr $2221			jsr 	Mint32ShiftLeft
.1951	4c 3e 19	jmp $193e			jmp 	_MShiftLoop
.1954					_MShiftExit:
.1954	28		plp				plp	 								; throw saved carry and exit
.1955	60		rts				rts
.1956					_MShiftZero:
.1956	4c 0c 22	jmp $220c			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.1959					PerformComparison:
.1959	20 51 1a	jsr $1a51			jsr 	DereferenceTwo 				; make both values.
.195c	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.195e	35 41		and $41,x			and 	esType+1,x
.1960	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.1961	30 1d		bmi $1980			bmi 	_PCIsString
.1963	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1965	15 41		ora $41,x			ora 	esType+1,x
.1967	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.1968	30 22		bmi $198c			bmi 	_PCError
.196a	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.196c	f0 0f		beq $197d			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.196e	20 f0 17	jsr $17f0			jsr 	BPMakeBothFloat 			; make both float
.1971	8a		txa				txa
.1972	a2 04		ldx #$04		ldx	#4
.1974	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1977	86 0c		stx $0c				stx 	tempShort 					; save result
.1979	aa		tax				tax
.197a	a5 0c		lda $0c				lda 	tempShort
.197c	60		rts				rts
.197d					_PCIsInteger:
.197d	4c ac 1f	jmp $1fac			jmp 	MInt32Compare
.1980					_PCIsString:
.1980	8a		txa				txa 								; A has SP
.1981	a2 06		ldx #$06		ldx	#6
.1983	20 48 29	jsr $2948		jsr	stringHandler
.1986	86 0c		stx $0c				stx 	tempShort 					; save result
.1988	aa		tax				tax 								; put SP back in X and get result.
.1989	a5 0c		lda $0c				lda 	tempShort
.198b	60		rts				rts
.198c					_PCError:
.198c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.198e	20 c1 23	jsr $23c1		jsr	errorHandler
.1991					CompareEquals:
.1991	20 59 19	jsr $1959			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.1994	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.1996	f0 35		beq $19cd			beq  	CompareTrue
.1998	4c d0 19	jmp $19d0			jmp 	CompareFalse
.199b					CompareLess:
.199b	20 59 19	jsr $1959			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.199e	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.19a0	f0 2b		beq $19cd			beq  	CompareTrue
.19a2	4c d0 19	jmp $19d0			jmp 	CompareFalse
.19a5					CompareGreater:
.19a5	20 59 19	jsr $1959			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19a8	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.19aa	f0 21		beq $19cd			beq  	CompareTrue
.19ac	4c d0 19	jmp $19d0			jmp 	CompareFalse
.19af					CompareNotEquals:
.19af	20 59 19	jsr $1959			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19b2	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.19b4	d0 17		bne $19cd			bne  	CompareTrue
.19b6	4c d0 19	jmp $19d0			jmp 	CompareFalse
.19b9					CompareGreaterEq:
.19b9	20 59 19	jsr $1959			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19bc	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.19be	d0 0d		bne $19cd			bne  	CompareTrue
.19c0	4c d0 19	jmp $19d0			jmp 	CompareFalse
.19c3					CompareLessEq:
.19c3	20 59 19	jsr $1959			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19c6	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.19c8	d0 03		bne $19cd			bne  	CompareTrue
.19ca	4c d0 19	jmp $19d0			jmp 	CompareFalse
.19cd					CompareTrue:
.19cd	4c 08 22	jmp $2208			jmp 	MInt32True
.19d0					CompareFalse:
.19d0	4c 0c 22	jmp $220c			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.19d3					Event_Str:
.19d3	20 94 1c	jsr $1c94			jsr 	EvaluateNumeric 			; get a number.
.19d6	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.19d8	d0 13		bne $19ed			bne 	_ESFloat
.19da	20 30 1a	jsr $1a30			jsr 	ConvertGetBase 				; get base, or default.
.19dd	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.19df	85 04		sta $04				sta 	temp0
.19e1	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.19e3	85 05		sta $05				sta 	1+(temp0)
.19e5	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.19e7	20 62 21	jsr $2162			jsr 	MInt32ToString 				; convert to string.
.19ea	4c fa 19	jmp $19fa			jmp 	_ESCloneExit 				; clone and exit.
.19ed					_ESFloat:
.19ed	20 7f 22	jsr $227f			jsr 	CheckRightParen 			; check closing )
.19f0	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.19f3	8a		txa				txa
.19f4	a2 14		ldx #$14		ldx	#20
.19f6	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.19f9	aa		tax				tax
.19fa					_ESCloneExit:
.19fa	8a		txa				txa
.19fb	a2 02		ldx #$02		ldx	#2
.19fd	20 48 29	jsr $2948		jsr	stringHandler
.1a00	aa		tax				tax
.1a01	60		rts				rts
.1a02					UnaryVal:
.1a02	38		sec				sec 								; Carry set to return value
.1a03	b0 01		bcs $1a06			bcs 	ValueMain
.1a05					UnaryIsVal:
.1a05	18		clc				clc									; Carry clear to return legitimacy
.1a06					ValueMain:
.1a06	08		php				php 								; save results (CS is value, CC is validation)
.1a07	20 9f 1c	jsr $1c9f			jsr 	EvaluateString
.1a0a	20 30 1a	jsr $1a30			jsr 	ConvertGetBase 				; get base, if any.
.1a0d	98		tya				tya
.1a0e	48		pha				pha
.1a0f	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1a12	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1a14	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1a16	20 7a 20	jsr $207a			jsr 	MInt32FromString 			; convert it back from a string.
.1a19	b0 0c		bcs $1a27			bcs 	_VMSuccess 					; successfully converted.
.1a1b	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1a1d	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1a1f	f0 00		beq $1a21			beq 	_VMFailed 	 				; so we failed.
.1a21					_VMFailed:
.1a21	68		pla				pla
.1a22	a8		tay				tay
.1a23	28		plp				plp
.1a24	4c 0c 22	jmp $220c			jmp 	MInt32False 				; return 0 whatever.
.1a27					_VMSuccess:
.1a27	68		pla				pla
.1a28	a8		tay				tay
.1a29	28		plp				plp 								; if CS the it was val() so we want the value.
.1a2a	b0 03		bcs $1a2f			bcs 	_VMExit
.1a2c	4c 08 22	jmp $2208			jmp 	MInt32True 					; otherwise return true as successful.
.1a2f					_VMExit:
.1a2f	60		rts				rts
.1a30					ConvertGetBase:
.1a30	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1a32	95 49		sta $49,x			sta 	esInt0+1,x
.1a34	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for ,base)
.1a36	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a38	d0 0e		bne $1a48			bne 	_CGBDone 					; not found, should be )
.1a3a	e8		inx				inx 								; next level
.1a3b	c8		iny				iny 								; skip comma.
.1a3c	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger		; evaluate the base.
.1a3f	ca		dex				dex
.1a40	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.1a42	90 08		bcc $1a4c			bcc 	_CGBValue 					; (it should work as high as 37)
.1a44	c9 11		cmp #$11			cmp 	#17
.1a46	b0 04		bcs $1a4c			bcs 	_CGBValue
.1a48					_CGBDone:
.1a48	20 7f 22	jsr $227f			jsr 	CheckRightParen
.1a4b	60		rts				rts
.1a4c					_CGBValue:
.1a4c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a4e	20 c1 23	jsr $23c1		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1a51					DereferenceTwo:
.1a51	e8		inx				inx
.1a52	20 56 1a	jsr $1a56			jsr 	DereferenceOne
.1a55	ca		dex				dex
.1a56					DereferenceOne:
.1a56	b5 40		lda $40,x			lda 	esType,x
.1a58	10 3d		bpl $1a97			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.1a5a	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1a5b	b0 3b		bcs $1a98			bcs 	_DRFloatDeReference
.1a5d	98		tya				tya
.1a5e	48		pha				pha
.1a5f	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1a61	85 04		sta $04				sta 	temp0
.1a63	b5 50		lda $50,x			lda 	esInt1,x
.1a65	85 05		sta $05				sta 	temp0+1
.1a67	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1a69	95 50		sta $50,x			sta 	esInt1,x
.1a6b	95 58		sta $58,x			sta 	esInt2,x
.1a6d	95 60		sta $60,x			sta 	esInt3,x
.1a6f	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1a71	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1a73	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1a74	30 0d		bmi $1a83			bmi 	_DeRefString 				; string, 2 bytes only
.1a76	d0 11		bne $1a89			bne 	_DeRefByte 					; byte 1 byte only
.1a78					_DeRefLong:
.1a78	a0 03		ldy #$03			ldy 	#3
.1a7a	b1 04		lda ($04),y			lda 	(temp0),y
.1a7c	95 60		sta $60,x			sta 	esInt3,x
.1a7e	88		dey				dey
.1a7f	b1 04		lda ($04),y			lda 	(temp0),y
.1a81	95 58		sta $58,x			sta 	esInt2,x
.1a83					_DeRefString:
.1a83	a0 01		ldy #$01			ldy 	#1
.1a85	b1 04		lda ($04),y			lda 	(temp0),y
.1a87	95 50		sta $50,x			sta 	esInt1,x
.1a89					_DeRefByte:
.1a89	a0 00		ldy #$00			ldy 	#0
.1a8b	b1 04		lda ($04),y			lda 	(temp0),y
.1a8d	95 48		sta $48,x			sta 	esInt0,x
.1a8f	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1a91	29 40		and #$40			and 	#$40
.1a93	95 40		sta $40,x			sta 	esType,x
.1a95	68		pla				pla
.1a96	a8		tay				tay
.1a97					_DRNotReference
.1a97	60		rts				rts
.1a98					_DRFloatDereference:
.1a98	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; address to deref in temp0
.1a9b	8a		txa				txa
.1a9c	a2 1c		ldx #$1c		ldx	#28
.1a9e	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1aa1	aa		tax				tax
.1aa2	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1aa4	95 40		sta $40,x			sta 	esType,x
.1aa6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1aa7					EvaluateLevel:
.1aa7	48		pha				pha 								; save precedence level.
.1aa8	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1aaa	95 48		sta $48,x			sta 	esInt0,x
.1aac	95 50		sta $50,x			sta 	esInt1,x
.1aae	95 58		sta $58,x			sta 	esInt2,x
.1ab0	95 60		sta $60,x			sta 	esInt3,x
.1ab2	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1ab4	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1ab6	30 21		bmi $1ad9			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1ab8	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1ab9	30 0a		bmi $1ac5			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1abb	8a		txa				txa 								; stack level in X
.1abc	a2 00		ldx #$00		ldx	#0
.1abe	20 a2 33	jsr $33a2		jsr	variableHandler
.1ac1	aa		tax				tax
.1ac2	4c 02 1b	jmp $1b02			jmp		_ELHasTerm
.1ac5					_ELIsConstant:
.1ac5	4a		lsr a				lsr 	a 							; get the value back
.1ac6	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1ac8	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1aca					_ELCheckNext:
.1aca	c8		iny				iny 								; look at next
.1acb	b1 02		lda ($02),y			lda 	(codePtr),y
.1acd	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1acf	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1ad1	b0 2f		bcs $1b02			bcs 	_ELHasTerm 					; done getting the constant.
.1ad3	20 9b 1b	jsr $1b9b			jsr 	ELShiftByteIn 				; shift byte into position.
.1ad6	4c ca 1a	jmp $1aca			jmp 	_ELCheckNext
.1ad9					_ELIsToken:
.1ad9	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1adb	f0 0f		beq $1aec			beq 	_ELIsString
.1add	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1adf	d0 5f		bne $1b40			bne 	_ELCheckUnary
.1ae1	8a		txa				txa 								; put X into A
.1ae2	c8		iny				iny 								; skip over the float marker
.1ae3	a2 18		ldx #$18		ldx	#24
.1ae5	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1ae8	aa		tax				tax 								; restore X
.1ae9	4c 02 1b	jmp $1b02			jmp 	_ELHasTerm
.1aec					_ELIsString:
.1aec	98		tya				tya 								; address of string is codePtr+y+1
.1aed	38		sec				sec
.1aee	65 02		adc $02				adc 	codePtr
.1af0	95 48		sta $48,x			sta 	esInt0,x
.1af2	a5 03		lda $03				lda 	codePtr+1
.1af4	69 00		adc #$00			adc 	#0
.1af6	95 50		sta $50,x			sta 	esInt1,x
.1af8	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1afa	95 40		sta $40,x			sta 	esType,x
.1afc	c8		iny				iny 								; skip over string.
.1afd	98		tya				tya
.1afe	38		sec				sec									; +1 for the length itself.
.1aff	71 02		adc ($02),y			adc 	(codePtr),y
.1b01	a8		tay				tay 								; and fall through to term loop code.
.1b02					_ELHasTerm:
.1b02	b1 02		lda ($02),y			lda 	(codePtr),y
.1b04	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1b06	90 04		bcc $1b0c			bcc 	_ELPopExit
.1b08	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1b0a	90 02		bcc $1b0e			bcc 	_ELHasBinaryTerm
.1b0c					_ELPopExit:
.1b0c	68		pla				pla
.1b0d					_ELExit:
.1b0d	60		rts				rts
.1b0e					_ELHasBinaryTerm:
.1b0e	84 0c		sty $0c				sty 	tempShort 					; save position
.1b10	a8		tay				tay 								; use token as an index and get the precedence.
.1b11	b9 43 1b	lda $1b43,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1b14	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1b16	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1b18	68		pla				pla 								; restore current level.
.1b19	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1b1b	b0 f0		bcs $1b0d			bcs 	_ELExit
.1b1d	48		pha				pha 								; save current level back on the stack.
.1b1e	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1b20	48		pha				pha
.1b21	c8		iny				iny
.1b22	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1b23	a5 0c		lda $0c				lda 	tempShort
.1b25	20 a7 1a	jsr $1aa7			jsr 	EvaluateLevel
.1b28	ca		dex				dex
.1b29	68		pla				pla 								; get the operator back out.
.1b2a					_ELExecuteA:
.1b2a	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1b2c	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1b2d	aa		tax				tax
.1b2e	bd 56 15	lda $1556,x			lda 	Group0Vectors,x
.1b31	85 04		sta $04				sta 	temp0
.1b33	bd 57 15	lda $1557,x			lda 	Group0Vectors+1,x
.1b36	85 05		sta $05				sta 	temp0+1
.1b38	a6 0c		ldx $0c				ldx 	tempShort
.1b3a	20 87 1b	jsr $1b87			jsr 	_ELCallTemp0
.1b3d	4c 02 1b	jmp $1b02			jmp 	_ELHasTerm 					; and loop back round.
.1b40					_ELCheckUnary:
.1b40	c8		iny				iny 								; skip over token.
.1b41	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1b43	f0 19		beq $1b5e			beq 	_ELMinus
.1b45	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1b47	f0 2c		beq $1b75			beq 	_ELIndirect
.1b49	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1b4b	f0 28		beq $1b75			beq 	_ELIndirect
.1b4d	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1b4f	f0 39		beq $1b8a			beq 	_ELExtension
.1b51	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1b53	90 04		bcc $1b59			bcc 	_ELUSyntax
.1b55	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1b57	90 d1		bcc $1b2a			bcc 	_ELExecuteA 				; if so do that token.
.1b59					_ELUSyntax:
.1b59	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b5b	20 c1 23	jsr $23c1		jsr	errorHandler
.1b5e					_ELMinus:
.1b5e	20 73 1c	jsr $1c73			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1b61	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1b63	f0 0a		beq $1b6f			beq 	_ELMinusInteger
.1b65	8a		txa				txa
.1b66	a2 0c		ldx #$0c		ldx	#12
.1b68	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1b6b	aa		tax				tax
.1b6c	4c 02 1b	jmp $1b02			jmp 	_ELHasTerm
.1b6f					_ELMinusInteger:
.1b6f	20 c6 21	jsr $21c6			jsr 	MInt32Negate 				; do int negate
.1b72	4c 02 1b	jmp $1b02			jmp 	_ELHasTerm
.1b75					_ELIndirect:
.1b75	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1b76	20 7c 1c	jsr $1c7c			jsr 	EvaluateIntegerTerm 		; integer address
.1b79	68		pla				pla
.1b7a	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1b7c	f0 02		beq $1b80			beq 	_ELHaveModifier
.1b7e	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1b80					_ELHaveModifier:
.1b80	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1b82	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.1b84	4c 02 1b	jmp $1b02			jmp 	_ELHasTerm
.1b87					_ELCallTemp0:
.1b87	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1b8a					_ELExtension:
.1b8a	8a		txa				txa 								; stack pos in A
.1b8b	20 21 26	jsr $2621		jsr	extensionHandler
.1b8e	aa		tax				tax 								; restore stack
.1b8f	4c 02 1b	jmp $1b02			jmp 	_ELHasTerm
.1b92					UnaryParenthesis:
.1b92	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1b94	20 a7 1a	jsr $1aa7			jsr 	EvaluateLevel
.1b97	20 7f 22	jsr $227f			jsr 	CheckRightParen 			; check for )
.1b9a	60		rts				rts
.1b9b					ELShiftByteIn:
.1b9b	48		pha				pha 								; save bits to shift in.
.1b9c	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1b9e	48		pha				pha
.1b9f	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1ba1	95 60		sta $60,x			sta 	esInt3,x
.1ba3	b5 50		lda $50,x			lda 	esInt1,x
.1ba5	95 58		sta $58,x			sta 	esInt2,x
.1ba7	b5 48		lda $48,x			lda 	esInt0,x
.1ba9	95 50		sta $50,x			sta 	esInt1,x
.1bab	a9 00		lda #$00			lda 	#0
.1bad	95 48		sta $48,x			sta 	esInt0,x
.1baf	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1bb0	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1bb2	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1bb4					_ELShiftLoop:
.1bb4	4a		lsr a				lsr 	a
.1bb5	76 60		ror $60,x			ror 	esInt3,x
.1bb7	76 58		ror $58,x			ror 	esInt2,x
.1bb9	76 50		ror $50,x			ror 	esInt1,x
.1bbb	76 48		ror $48,x			ror 	esInt0,x
.1bbd	c9 01		cmp #$01			cmp 	#1
.1bbf	d0 f3		bne $1bb4			bne 	_ELShiftLoop
.1bc1	68		pla				pla 								; get original 6 bit value and OR in.
.1bc2	29 3f		and #$3f			and 	#$3F
.1bc4	15 48		ora $48,x			ora 	esInt0,x
.1bc6	95 48		sta $48,x			sta 	esInt0,x
.1bc8	60		rts				rts
.1bc9					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1bc9	01					.byte	$01			; $86 and
>1bca	01					.byte	$01			; $87 or
>1bcb	01					.byte	$01			; $88 xor
>1bcc	02					.byte	$02			; $89 >=
>1bcd	02					.byte	$02			; $8a <=
>1bce	02					.byte	$02			; $8b >
>1bcf	02					.byte	$02			; $8c <
>1bd0	02					.byte	$02			; $8d =
>1bd1	02					.byte	$02			; $8e <>
>1bd2	03					.byte	$03			; $8f +
>1bd3	03					.byte	$03			; $90 -
>1bd4	04					.byte	$04			; $91 >>
>1bd5	04					.byte	$04			; $92 <<
>1bd6	04					.byte	$04			; $93 *
>1bd7	04					.byte	$04			; $94 /
>1bd8	04					.byte	$04			; $95 mod
>1bd9	05					.byte	$05			; $96 ^
>1bda	06					.byte	$06			; $97 !
>1bdb	06					.byte	$06			; $98 ?
>1bdc	82					.byte	$82			; $99 repeat
>1bdd	82					.byte	$82			; $9a while
>1bde	82					.byte	$82			; $9b for
>1bdf	82					.byte	$82			; $9c if
>1be0	82					.byte	$82			; $9d defproc
>1be1	80					.byte	$80			; $9e until
>1be2	80					.byte	$80			; $9f wend
>1be3	80					.byte	$80			; $a0 next
>1be4	80					.byte	$80			; $a1 then
>1be5	80					.byte	$80			; $a2 endif
>1be6	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1be7					EventFunction:
.1be7	20 dd 1c	jsr $1cdd			jsr 	EvaluateReference			; get the variable reference that tracks the event
.1bea	b5 40		lda $40,x			lda 	esType,x
.1bec	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.1bee	d0 5b		bne $1c4b			bne 	_EFType
.1bf0	20 8c 22	jsr $228c			jsr 	CheckComma
.1bf3	e8		inx				inx
.1bf4	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1bf7	20 7f 22	jsr $227f			jsr 	CheckRightParen 			; finish off with the right bracket
.1bfa	ca		dex				dex
.1bfb	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.1bfd	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.1bff	15 58		ora $58,x			ora 	esInt2,x
.1c01	15 60		ora $60,x			ora 	esInt3,x
.1c03	d0 41		bne $1c46			bne 	_EFValue
.1c05	98		tya				tya
.1c06	48		pha				pha
.1c07	8a		txa				txa
.1c08	48		pha				pha
.1c09	a2 12		ldx #$12		ldx	#18
.1c0b	20 aa 23	jsr $23aa		jsr	deviceHandler
.1c0e	84 07		sty $07				sty 	temp1+1
.1c10	85 06		sta $06				sta 	temp1
.1c12	68		pla				pla
.1c13	aa		tax				tax
.1c14	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.1c17	a0 03		ldy #$03			ldy 	#3							; if -ve
.1c19	b1 04		lda ($04),y			lda 	(temp0),y
.1c1b	30 23		bmi $1c40			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.1c1d	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1c1f	b1 04		lda ($04),y			lda 	(temp0),y
.1c21	c8		iny				iny
.1c22	11 04		ora ($04),y			ora 	(temp0),y
.1c24	f0 17		beq $1c3d			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1c26	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1c28	38		sec				sec
.1c29	b1 04		lda ($04),y			lda 	(temp0),y
.1c2b	e5 06		sbc $06				sbc 	temp1
.1c2d	c8		iny				iny
.1c2e	b1 04		lda ($04),y			lda 	(temp0),y
.1c30	e5 07		sbc $07				sbc 	temp1+1
.1c32	10 0c		bpl $1c40			bpl 	_EFFail 					; if trigger >= timer then return False
.1c34	20 50 1c	jsr $1c50			jsr 	SetEventTimer 				; reset the timer for next time.
.1c37	20 08 22	jsr $2208			jsr	 	MInt32True 					; and treutn true as fired.
.1c3a	68		pla				pla
.1c3b	a8		tay				tay
.1c3c	60		rts				rts
.1c3d					_EFInitialise:
.1c3d	20 50 1c	jsr $1c50			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1c40					_EFFail:
.1c40	68		pla				pla
.1c41	a8		tay				tay
.1c42	20 0c 22	jsr $220c			jsr 	MInt32False
.1c45	60		rts				rts
.1c46					_EFValue:
.1c46	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c48	20 c1 23	jsr $23c1		jsr	errorHandler
.1c4b					_EFType:
.1c4b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c4d	20 c1 23	jsr $23c1		jsr	errorHandler
.1c50					SetEventTimer:
.1c50	a0 00		ldy #$00			ldy 	#0
.1c52	18		clc				clc
.1c53	a5 06		lda $06				lda 	temp1
.1c55	75 49		adc $49,x			adc 	esInt0+1,x
.1c57	91 04		sta ($04),y			sta		(temp0),y
.1c59	c8		iny				iny
.1c5a	a5 07		lda $07				lda 	temp1+1
.1c5c	75 51		adc $51,x			adc 	esInt1+1,x
.1c5e	91 04		sta ($04),y			sta		(temp0),y
.1c60	88		dey				dey
.1c61	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1c63	d0 04		bne $1c69			bne 	_SETExit 					; zero means initialise.....
.1c65	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1c67	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1c69					_SETExit:
.1c69	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.1c6a					EvaluateTerm:
.1c6a	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.1c6c	20 a7 1a	jsr $1aa7			jsr 	EvaluateLevel
.1c6f	20 56 1a	jsr $1a56			jsr 	DereferenceOne
.1c72	60		rts				rts
.1c73					EvaluateNumericTerm:
.1c73	20 6a 1c	jsr $1c6a			jsr 	EvaluateTerm
.1c76	b5 40		lda $40,x			lda 	esType,x
.1c78	0a		asl a				asl 	a 							; see if it's a string.
.1c79	30 09		bmi $1c84			bmi 	ENTType
.1c7b	60		rts				rts
.1c7c					EvaluateIntegerTerm:
.1c7c	20 6a 1c	jsr $1c6a			jsr 	EvaluateTerm
.1c7f	b5 40		lda $40,x			lda 	esType,x
.1c81	d0 01		bne $1c84			bne 	ENTType
.1c83	60		rts				rts
.1c84					ENTType:
.1c84	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c86	20 c1 23	jsr $23c1		jsr	errorHandler
.1c89					EvaluateRoot:
.1c89	a2 00		ldx #$00			ldx 	#0
.1c8b					Evaluate:
.1c8b	a9 00		lda #$00			lda 	#0
.1c8d	20 a7 1a	jsr $1aa7			jsr 	EvaluateLevel
.1c90	20 56 1a	jsr $1a56			jsr 	DereferenceOne
.1c93	60		rts				rts
.1c94					EvaluateNumeric:
.1c94	20 8b 1c	jsr $1c8b			jsr 	Evaluate
.1c97	b5 40		lda $40,x			lda 	esType,x
.1c99	0a		asl a				asl 	a 							; see if it's a string.
.1c9a	30 e8		bmi $1c84			bmi 	ENTType
.1c9c	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1c9d	4a		lsr a				lsr 	a
.1c9e	60		rts				rts
.1c9f					EvaluateString:
.1c9f	20 8b 1c	jsr $1c8b			jsr 	Evaluate
.1ca2	b5 40		lda $40,x			lda 	esType,x
.1ca4	0a		asl a				asl 	a 							; see if it's a string.
.1ca5	10 dd		bpl $1c84			bpl 	ENTType
.1ca7	60		rts				rts
.1ca8					EvaluateRootInteger:
.1ca8	a2 00		ldx #$00			ldx 	#0
.1caa					EvaluateInteger:
.1caa	20 8b 1c	jsr $1c8b			jsr 	Evaluate
.1cad	b5 40		lda $40,x			lda 	esType,x
.1caf	d0 d3		bne $1c84			bne 	ENTType
.1cb1	60		rts				rts
.1cb2					EvaluateSmallInteger:
.1cb2	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger
.1cb5	b5 50		lda $50,x			lda 	esInt1,x
.1cb7	15 58		ora $58,x			ora 	esInt2,x
.1cb9	15 60		ora $60,x			ora 	esInt3,x
.1cbb	d0 03		bne $1cc0			bne 	_ESIValue
.1cbd	b5 48		lda $48,x			lda 	esInt0,x
.1cbf	60		rts				rts
.1cc0					_ESIValue:
.1cc0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cc2	20 c1 23	jsr $23c1		jsr	errorHandler
.1cc5					LinkEvaluate:
.1cc5	aa		tax				tax
.1cc6	20 8b 1c	jsr $1c8b			jsr 	Evaluate
.1cc9	8a		txa				txa
.1cca	60		rts				rts
.1ccb					LinkEvaluateTerm:
.1ccb	aa		tax				tax
.1ccc	20 6a 1c	jsr $1c6a			jsr 	EvaluateTerm
.1ccf	8a		txa				txa
.1cd0	60		rts				rts
.1cd1					LinkEvaluateInteger:
.1cd1	aa		tax				tax
.1cd2	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger
.1cd5	8a		txa				txa
.1cd6	60		rts				rts
.1cd7					LinkEvaluateSmallInt:
.1cd7	aa		tax				tax
.1cd8	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger
.1cdb	8a		txa				txa
.1cdc	60		rts				rts
.1cdd					EvaluateReference:
.1cdd	ad da 1b	lda $1bda			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1ce0	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1ce1	e9 01		sbc #$01			sbc 	#1
.1ce3	20 a7 1a	jsr $1aa7			jsr 	EvaluateLevel
.1ce6	b5 40		lda $40,x			lda 	esType,x
.1ce8	10 01		bpl $1ceb			bpl 	_ERFail
.1cea	60		rts				rts
.1ceb					_ERFail:
.1ceb	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1ced	20 c1 23	jsr $23c1		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1cf0					UnaryLen:
.1cf0	20 fe 1c	jsr $1cfe			jsr 	ULStart
.1cf3					ULFinish:
.1cf3	b1 04		lda ($04),y			lda 	(temp0),y 					; get length prefix
.1cf5	a4 0c		ldy $0c				ldy 	tempShort 					; get Y back
.1cf7	20 1b 22	jsr $221b			jsr 	MInt32Set8Bit 				; write it out.
.1cfa	20 7f 22	jsr $227f			jsr 	CheckRightParen
.1cfd	60		rts				rts
.1cfe	20 9f 1c	jsr $1c9f	ULStart:jsr 	EvaluateString
.1d01	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d03	85 04		sta $04				sta 	temp0
.1d05	b5 50		lda $50,x			lda 	esInt1,x
.1d07	85 05		sta $05				sta 	temp0+1
.1d09	84 0c		sty $0c				sty 	tempShort 					; get length
.1d0b	a0 00		ldy #$00			ldy 	#0
.1d0d	60		rts				rts
.1d0e					UnaryAsc:
.1d0e	20 fe 1c	jsr $1cfe			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1d11	b1 04		lda ($04),y			lda 	(temp0),y 					; read length
.1d13	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1d14	c9 00		cmp #$00			cmp 	#0
.1d16	d0 db		bne $1cf3			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.1d18	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d1a	20 c1 23	jsr $23c1		jsr	errorHandler
.1d1d					UnaryAbs:
.1d1d	20 94 1c	jsr $1c94			jsr 	EvaluateNumeric 			; some numeric value
.1d20	b0 07		bcs $1d29			bcs 	_UAFloat 					; CS then float, so use that function
.1d22	20 c1 21	jsr $21c1			jsr 	MInt32Absolute 				; int version
.1d25	20 7f 22	jsr $227f			jsr 	CheckRightParen
.1d28	60		rts				rts
.1d29					_UAFloat:
.1d29	8a		txa				txa 								; float version
.1d2a	a2 00		ldx #$00		ldx	#0
.1d2c	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1d2f	aa		tax				tax
.1d30	20 7f 22	jsr $227f			jsr 	CheckRightParen
.1d33	60		rts				rts
.1d34					UnarySgn:
.1d34	20 94 1c	jsr $1c94			jsr 	EvaluateNumeric 			; same as above but sign of value
.1d37	b0 07		bcs $1d40			bcs 	_USFloat
.1d39	20 f9 21	jsr $21f9			jsr 	MInt32Sign
.1d3c	20 7f 22	jsr $227f			jsr 	CheckRightParen
.1d3f	60		rts				rts
.1d40					_USFloat:
.1d40	8a		txa				txa
.1d41	a2 0e		ldx #$0e		ldx	#14
.1d43	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1d46	aa		tax				tax
.1d47	20 7f 22	jsr $227f			jsr 	CheckRightParen
.1d4a	60		rts				rts
.1d4b					UnaryPeek:
.1d4b	20 77 1d	jsr $1d77			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.1d4e	4c 6b 1d	jmp $1d6b			jmp 	PDLByte0
.1d51					UnaryDeek:
.1d51	20 77 1d	jsr $1d77			jsr 	PDLCode
.1d54	4c 65 1d	jmp $1d65			jmp 	PDLByte1
.1d57					UnaryLeek:
.1d57	20 77 1d	jsr $1d77			jsr 	PDLCode
.1d5a	a0 03		ldy #$03			ldy 	#3							; read 3-2
.1d5c	b1 04		lda ($04),y			lda 	(temp0),y
.1d5e	95 60		sta $60,x			sta 	esInt3,x
.1d60	88		dey				dey
.1d61	b1 04		lda ($04),y			lda 	(temp0),y
.1d63	95 58		sta $58,x			sta 	esInt2,x
.1d65					PDLByte1:
.1d65	a0 01		ldy #$01			ldy 	#1
.1d67	b1 04		lda ($04),y			lda 	(temp0),y
.1d69	95 50		sta $50,x			sta 	esInt1,x
.1d6b					PDLByte0:
.1d6b	a0 00		ldy #$00			ldy 	#0
.1d6d	b1 04		lda ($04),y			lda 	(temp0),y
.1d6f	95 48		sta $48,x			sta 	esInt0,x
.1d71	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1d73	20 7f 22	jsr $227f			jsr 	CheckRightParen 			; check right and return
.1d76	60		rts				rts
.1d77					PDLCode:
.1d77	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger 			; some address
.1d7a	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d7c	85 04		sta $04				sta 	temp0
.1d7e	b5 50		lda $50,x			lda 	esInt1,x
.1d80	85 05		sta $05				sta 	temp0+1
.1d82	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1d84	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.1d86	95 58		sta $58,x			sta 	esInt2,x
.1d88	95 60		sta $60,x			sta 	esInt3,x
.1d8a	84 0c		sty $0c				sty 	tempShort 					; save Y
.1d8c	60		rts				rts
.1d8d					Unary_Random:
.1d8d	20 3c 22	jsr $223c			jsr 	MInt32Random 				; generate random number.
.1d90	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1d92	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1d94	f0 08		beq $1d9e			beq 	_URExit
.1d96	e8		inx				inx 								; load range 0..r-1 into +1
.1d97	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger
.1d9a	ca		dex				dex
.1d9b	20 5f 20	jsr $205f			jsr 	MInt32Modulus 				; calculate random % modulus
.1d9e					_URExit:
.1d9e	20 7f 22	jsr $227f			jsr 	CheckRightParen 			; check right and return
.1da1	60		rts				rts
.1da2					Unary_Min:
.1da2	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1da4	d0 02		bne $1da8			bne 	UnaryMBody
.1da6					Unary_Max:
.1da6	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1da8					UnaryMBody:
.1da8	48		pha				pha 								; save comparator on stack, shows min or max
.1da9	20 8b 1c	jsr $1c8b			jsr 	Evaluate 					; get the first thing to check
.1dac					_UnaryMLoop:
.1dac	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1dae	c8		iny				iny
.1daf	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1db1	f0 09		beq $1dbc			beq 	_UnaryMExit
.1db3	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1db5	f0 07		beq $1dbe			beq 	_UnaryMCompare
.1db7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1db9	20 c1 23	jsr $23c1		jsr	errorHandler
.1dbc					_UnaryMExit:
.1dbc	68		pla				pla 								; done so throw comparator and return.
.1dbd	60		rts				rts
.1dbe					_UnaryMCompare:
.1dbe	e8		inx				inx 								; get the 2nd thing to evaluate
.1dbf	20 8b 1c	jsr $1c8b			jsr 	Evaluate
.1dc2	ca		dex				dex
.1dc3	20 59 19	jsr $1959			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1dc6	85 0c		sta $0c				sta 	tempShort 					; save result
.1dc8	68		pla				pla 								; get what we need
.1dc9	48		pha				pha
.1dca	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1dcc	d0 de		bne $1dac			bne 	_UnaryMLoop 				; no, try another value.
.1dce	20 0c 22	jsr $220c			jsr 	MInt32False 				; promote 2nd to 1st.
.1dd1	20 f0 20	jsr $20f0			jsr 	MInt32Add
.1dd4	4c ac 1d	jmp $1dac			jmp 	_UnaryMLoop
.1dd7					Unary_Page:
.1dd7	20 0c 22	jsr $220c			jsr 	MInt32False 				; zero
.1dda	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1ddd	95 48		sta $48,x			sta 	esInt0,x
.1ddf	ad c9 0a	lda $0ac9			lda 	basePage+1
.1de2	95 50		sta $50,x			sta 	esInt1,x
.1de4	60		rts				rts
.1de5					UnaryReference:
.1de5	a9 0f		lda #$0f			lda 	#15
.1de7	20 a7 1a	jsr $1aa7			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1dea	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1dec	10 05		bpl $1df3			bpl 	UType
.1dee	a9 00		lda #$00			lda 	#0 							; make it an integer
.1df0	95 40		sta $40,x			sta 	esType,x
.1df2	60		rts				rts
.1df3					UType:
.1df3	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1df5	20 c1 23	jsr $23c1		jsr	errorHandler
.1df8					UnaryHexMarker:
.1df8	4c 7c 1c	jmp $1c7c			jmp 	EvaluateIntegerTerm
.1dfb					UnaryComplement:
.1dfb	20 7c 1c	jsr $1c7c			jsr 	EvaluateIntegerTerm
.1dfe	20 e0 21	jsr $21e0			jsr 	MInt32Not
.1e01	60		rts				rts
.1e02					UnaryIntToFloat:
.1e02	20 94 1c	jsr $1c94			jsr 	EvaluateNumeric				; some number
.1e05	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.1e07	d0 0b		bne $1e14			bne 	_UIFExit
.1e09	8a		txa				txa 								; convert and set type
.1e0a	a2 1a		ldx #$1a		ldx	#26
.1e0c	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1e0f	aa		tax				tax
.1e10	a9 01		lda #$01			lda 	#1
.1e12	95 40		sta $40,x			sta 	esType,x
.1e14					_UIFExit:
.1e14	60		rts				rts
.1e15					UnaryFloatToInt:
.1e15	20 94 1c	jsr $1c94			jsr 	EvaluateNumeric 			; the number
.1e18	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.1e1a	f0 0b		beq $1e27			beq 	_UFIExit
.1e1c	8a		txa				txa 								; convert to int
.1e1d	a2 12		ldx #$12		ldx	#18
.1e1f	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.1e22	aa		tax				tax
.1e23	a9 00		lda #$00			lda 	#0 							; set type
.1e25	95 40		sta $40,x			sta 	esType,x
.1e27					_UFIExit:
.1e27	60		rts				rts
.1e28					UnaryAlloc:
.1e28	e8		inx				inx 								; evaluate memory required
.1e29	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger
.1e2c	20 7f 22	jsr $227f			jsr 	CheckRightParen
.1e2f	ca		dex				dex
.1e30	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1e32	15 61		ora $61,x			ora 	esInt3+1,x
.1e34	d0 19		bne $1e4f			bne 	_UABadValue
.1e36	20 0c 22	jsr $220c			jsr 	MInt32False					; zero return.
.1e39	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1e3b	95 50		sta $50,x			sta 	esInt1,x
.1e3d	a5 0f		lda $0f				lda 	lowMemory
.1e3f	95 48		sta $48,x			sta 	esInt0,x
.1e41	18		clc				clc 								; add alloc required.
.1e42	75 49		adc $49,x			adc 	esInt0+1,x
.1e44	85 0f		sta $0f				sta 	lowMemory
.1e46	a5 10		lda $10				lda 	lowMemory+1
.1e48	75 51		adc $51,x			adc 	esInt1+1,x
.1e4a	85 10		sta $10				sta 	lowMemory+1
.1e4c	b0 01		bcs $1e4f			bcs		_UABadValue 				; overflow definitely bad.
.1e4e	60		rts				rts
.1e4f					_UABadValue:
.1e4f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e51	20 c1 23	jsr $23c1		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1e54					UnaryTimer:
.1e54	20 7f 22	jsr $227f			jsr 	CheckRightParen 			; no parameters
.1e57	98		tya				tya
.1e58	48		pha				pha
.1e59	20 33 22	jsr $2233			jsr 	MInt32Zero 					; zero result
.1e5c	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1e5e	a2 12		ldx #$12		ldx	#18
.1e60	20 aa 23	jsr $23aa		jsr	deviceHandler
.1e63	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1e65	95 48		sta $48,x			sta 	esInt0,x
.1e67	98		tya				tya
.1e68	95 50		sta $50,x			sta 	esInt1,x
.1e6a	68		pla				pla
.1e6b	a8		tay				tay
.1e6c	60		rts				rts
.1e6d					UnaryInkey:
.1e6d	20 7f 22	jsr $227f			jsr 	CheckRightParen
.1e70	86 04		stx $04				stx 	temp0
.1e72	a2 08		ldx #$08		ldx	#8
.1e74	20 aa 23	jsr $23aa		jsr	deviceHandler
.1e77	a6 04		ldx $04				ldx 	temp0
.1e79	20 1b 22	jsr $221b			jsr 	MInt32Set8Bit
.1e7c	60		rts				rts
.1e7d					UnaryGet:
.1e7d	20 7f 22	jsr $227f			jsr 	CheckRightParen
.1e80	86 04		stx $04				stx 	temp0
.1e82					_UGLoop:
.1e82	a2 08		ldx #$08		ldx	#8
.1e84	20 aa 23	jsr $23aa		jsr	deviceHandler
.1e87	c9 00		cmp #$00			cmp 	#0
.1e89	f0 f7		beq $1e82			beq 	_UGLoop
.1e8b	a6 04		ldx $04				ldx 	temp0
.1e8d	20 1b 22	jsr $221b			jsr 	MInt32Set8Bit
.1e90	60		rts				rts
.1e91					UnarySys:
.1e91	20 aa 1c	jsr $1caa			jsr 	EvaluateInteger 				; get the address
.1e94	20 7f 22	jsr $227f			jsr 	CheckRightParen
.1e97	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 						; copy call address to temp0
.1e9a	8a		txa				txa
.1e9b	48		pha				pha
.1e9c	98		tya				tya
.1e9d	48		pha				pha
.1e9e	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1ea1	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1ea4	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1ea7	20 b6 1e	jsr $1eb6			jsr 	_CallTemp0
.1eaa	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1eac	68		pla				pla
.1ead	a8		tay				tay
.1eae	68		pla				pla
.1eaf	aa		tax				tax
.1eb0	a5 0c		lda $0c				lda 	tempShort
.1eb2	20 1b 22	jsr $221b			jsr 	MInt32Set8Bit 					; return result.
.1eb5	60		rts				rts
.1eb6					_CallTemp0:
.1eb6	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1eb9					ExecChr:
.1eb9	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger		; character number 0-255
.1ebc	20 7f 22	jsr $227f			jsr 	CheckRightParen				; right bracket
.1ebf	98		tya				tya
.1ec0	48		pha				pha
.1ec1	8a		txa				txa 								; A = stack
.1ec2	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1ec4	a2 00		ldx #$00		ldx	#0
.1ec6	20 48 29	jsr $2948		jsr	stringHandler
.1ec9	aa		tax				tax 								; X = stack
.1eca	68		pla				pla
.1ecb	a8		tay				tay
.1ecc	60		rts				rts
.1ecd					ExecLower:
.1ecd	38		sec				sec 								; set carry is lower
.1ece	b0 01		bcs $1ed1			bcs 	ExecUpperLower
.1ed0					ExecUpper:
.1ed0	18		clc				clc 								; clear carry is upper
.1ed1					ExecUpperLower:
.1ed1	08		php				php 								; save carry
.1ed2	20 9f 1c	jsr $1c9f			jsr 	EvaluateString 				; string to stack,X
.1ed5	20 7f 22	jsr $227f			jsr 	CheckRightParen 			; check closing right bracket.
.1ed8	28		plp				plp 								; restore carry, save Y
.1ed9	98		tya				tya
.1eda	48		pha				pha
.1edb	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1edd	2a		rol a				rol 	a
.1ede	a8		tay				tay 								; now in Y
.1edf	8a		txa				txa 								; do the substring and exit.
.1ee0	a2 08		ldx #$08		ldx	#8
.1ee2	20 48 29	jsr $2948		jsr	stringHandler
.1ee5	aa		tax				tax
.1ee6	68		pla				pla
.1ee7	a8		tay				tay
.1ee8	60		rts				rts
.1ee9					ExecLeft:
.1ee9	20 9f 1c	jsr $1c9f			jsr 	EvaluateString 				; string to stack,X
.1eec	20 8c 22	jsr $228c			jsr 	CheckComma
.1eef	e8		inx				inx
.1ef0	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1ef2	20 1b 22	jsr $221b			jsr 	MInt32Set8Bit
.1ef5	e8		inx				inx
.1ef6	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1ef9					ExecSubstring:
.1ef9	ca		dex				dex 								; fix up X
.1efa	ca		dex				dex
.1efb	20 7f 22	jsr $227f			jsr 	CheckRightParen 			; check closing right bracket.
.1efe	8a		txa				txa 								; do the substring and exit.
.1eff	a2 0a		ldx #$0a		ldx	#10
.1f01	20 48 29	jsr $2948		jsr	stringHandler
.1f04	aa		tax				tax
.1f05	60		rts				rts
.1f06					ExecMid:
.1f06	20 9f 1c	jsr $1c9f			jsr 	EvaluateString 				; string to stack,X
.1f09	20 8c 22	jsr $228c			jsr 	CheckComma
.1f0c	e8		inx				inx
.1f0d	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f10	c9 00		cmp #$00			cmp 	#0
.1f12	f0 15		beq $1f29			beq 	_EMValue
.1f14	e8		inx				inx
.1f15	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.1f17	20 1b 22	jsr $221b			jsr 	MInt32Set8Bit
.1f1a	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1f1c	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1f1e	f0 d9		beq $1ef9			beq 	ExecSubString
.1f20	20 8c 22	jsr $228c			jsr 	CheckComma
.1f23	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f26	4c f9 1e	jmp $1ef9			jmp 	ExecSubString
.1f29					_EMValue:
.1f29	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f2b	20 c1 23	jsr $23c1		jsr	errorHandler
.1f2e					ExecRight:
.1f2e	20 9f 1c	jsr $1c9f			jsr 	EvaluateString 				; string to stack,X
.1f31	20 8c 22	jsr $228c			jsr 	CheckComma
.1f34	e8		inx				inx
.1f35	20 b2 1c	jsr $1cb2			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1f38	ca		dex				dex
.1f39	98		tya				tya
.1f3a	48		pha				pha
.1f3b	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1f3d	85 04		sta $04				sta 	temp0
.1f3f	b5 50		lda $50,x			lda 	esInt1,x
.1f41	85 05		sta $05				sta 	temp0+1
.1f43	a0 00		ldy #$00			ldy 	#0 							; point to length
.1f45	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1f47	18		clc				clc 								; add 1.
.1f48	69 01		adc #$01			adc 	#1
.1f4a	38		sec				sec
.1f4b	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1f4d	f0 02		beq $1f51			beq		_ERMake1 					; if zero, make it 1.
.1f4f	b0 02		bcs $1f53			bcs		_EROkay
.1f51					_ERMake1:
.1f51	a9 01		lda #$01			lda 	#1 							; start position.
.1f53					_EROkay:
.1f53	e8		inx				inx 								; set start pos.
.1f54	95 48		sta $48,x			sta 	esInt0,x
.1f56	e8		inx				inx
.1f57	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1f59	20 1b 22	jsr $221b			jsr 	MInt32Set8Bit
.1f5c	68		pla				pla
.1f5d	a8		tay				tay
.1f5e	4c f9 1e	jmp $1ef9			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1f61					MInt32And:
.1f61	b5 48		lda $48,x			lda 	esInt0,x
.1f63	35 49		and $49,x			and 	esInt0+1,x
.1f65	95 48		sta $48,x			sta 	esInt0,x
.1f67	b5 50		lda $50,x			lda 	esInt1,x
.1f69	35 51		and $51,x			and 	esInt1+1,x
.1f6b	95 50		sta $50,x			sta 	esInt1,x
.1f6d	b5 58		lda $58,x			lda 	esInt2,x
.1f6f	35 59		and $59,x			and 	esInt2+1,x
.1f71	95 58		sta $58,x			sta 	esInt2,x
.1f73	b5 60		lda $60,x			lda 	esInt3,x
.1f75	35 61		and $61,x			and 	esInt3+1,x
.1f77	95 60		sta $60,x			sta 	esInt3,x
.1f79	60		rts				rts
.1f7a					MInt32Or:
.1f7a	b5 48		lda $48,x			lda 	esInt0,x
.1f7c	15 49		ora $49,x			ora 	esInt0+1,x
.1f7e	95 48		sta $48,x			sta 	esInt0,x
.1f80	b5 50		lda $50,x			lda 	esInt1,x
.1f82	15 51		ora $51,x			ora 	esInt1+1,x
.1f84	95 50		sta $50,x			sta 	esInt1,x
.1f86	b5 58		lda $58,x			lda 	esInt2,x
.1f88	15 59		ora $59,x			ora 	esInt2+1,x
.1f8a	95 58		sta $58,x			sta 	esInt2,x
.1f8c	b5 60		lda $60,x			lda 	esInt3,x
.1f8e	15 61		ora $61,x			ora 	esInt3+1,x
.1f90	95 60		sta $60,x			sta 	esInt3,x
.1f92	60		rts				rts
.1f93					MInt32Xor:
.1f93	b5 48		lda $48,x			lda 	esInt0,x
.1f95	55 49		eor $49,x			eor 	esInt0+1,x
.1f97	95 48		sta $48,x			sta 	esInt0,x
.1f99	b5 50		lda $50,x			lda 	esInt1,x
.1f9b	55 51		eor $51,x			eor 	esInt1+1,x
.1f9d	95 50		sta $50,x			sta 	esInt1,x
.1f9f	b5 58		lda $58,x			lda 	esInt2,x
.1fa1	55 59		eor $59,x			eor 	esInt2+1,x
.1fa3	95 58		sta $58,x			sta 	esInt2,x
.1fa5	b5 60		lda $60,x			lda 	esInt3,x
.1fa7	55 61		eor $61,x			eor 	esInt3+1,x
.1fa9	95 60		sta $60,x			sta 	esInt3,x
.1fab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1fac					MInt32Compare:
.1fac	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.1fae	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fb0	d0 13		bne $1fc5			bne 	MInt32Compare2
.1fb2	b5 50		lda $50,x			lda 	esInt1,x
.1fb4	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1fb6	d0 0d		bne $1fc5			bne 	MInt32Compare2
.1fb8	b5 58		lda $58,x			lda 	esInt2,x
.1fba	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1fbc	d0 07		bne $1fc5			bne 	MInt32Compare2
.1fbe	b5 60		lda $60,x			lda 	esInt3,x
.1fc0	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.1fc2	d0 01		bne $1fc5			bne 	MInt32Compare2
.1fc4	60		rts				rts
.1fc5					MInt32Compare2:
.1fc5	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1fc7	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fc9	b5 50		lda $50,x			lda		esInt1,x
.1fcb	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1fcd	b5 58		lda $58,x			lda		esInt2,x
.1fcf	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1fd1	b5 60		lda $60,x			lda		esInt3,x
.1fd3	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1fd5	50 02		bvc $1fd9			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.1fd7	49 80		eor #$80			eor 	#$80
.1fd9					_I32LNoOverflow
.1fd9	30 03		bmi $1fde			bmi 	MInt32CLess					; if -ve then return $FF
.1fdb	a9 01		lda #$01			lda 	#$01						; else return $01
.1fdd	60		rts				rts
.1fde					MInt32CLess:
.1fde	a9 ff		lda #$ff			lda 	#$FF
.1fe0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1fe1					MInt32SDivide:
.1fe1	98		tya				tya  								; save Y, which is the count of negations
.1fe2	48		pha				pha
.1fe3	a0 00		ldy #$00			ldy 	#0 							; zero count
.1fe5	20 fd 1f	jsr $1ffd			jsr 	_MInt32SRemSign 			; unsign TOS
.1fe8	e8		inx				inx 								; unsign TOS+1
.1fe9	20 fd 1f	jsr $1ffd			jsr 	_MInt32SRemSign
.1fec	ca		dex				dex
.1fed	98		tya				tya 								; save sign count on stack
.1fee	48		pha				pha
.1fef	20 06 20	jsr $2006			jsr 	MInt32UDivide 				; unsigned division
.1ff2	68		pla				pla 								; get sign count back
.1ff3	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1ff5	f0 03		beq $1ffa			beq 	_I32SNoNeg
.1ff7	20 c6 21	jsr $21c6			jsr 	MInt32Negate
.1ffa					_I32SNoNeg:
.1ffa	68		pla				pla 								; restoe Y and exit
.1ffb	a8		tay				tay
.1ffc	60		rts				rts
.1ffd					_MInt32SRemSign:
.1ffd	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1fff	10 04		bpl $2005			bpl 	_MInt32SRSExit
.2001	c8		iny				iny 								; increment the sign count
.2002	20 c6 21	jsr $21c6			jsr 	MInt32Negate 				; negate the value.
.2005					_MInt32SRSExit:
.2005	60		rts				rts
.2006					MInt32UDivide:
.2006	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2008	15 51		ora $51,x			ora 	esInt1+1,x
.200a	15 52		ora $52,x			ora 	esInt1+2,x
.200c	15 53		ora $53,x			ora 	esInt1+3,x
.200e	f0 4a		beq $205a			beq 	_MInt32DZero
.2010	e8		inx				inx 								; clear A
.2011	e8		inx				inx
.2012	20 0c 22	jsr $220c			jsr 	MInt32False
.2015	ca		dex				dex
.2016	ca		dex				dex
.2017	98		tya				tya 								; save Y on the stack
.2018	48		pha				pha
.2019	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.201b					_MInt32UDLoop:
.201b	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.201d	36 50		rol $50,x			rol 	esInt1,x
.201f	36 58		rol $58,x			rol 	esInt2,x
.2021	36 60		rol $60,x			rol 	esInt3,x
.2023	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2025	36 52		rol $52,x			rol 	esInt1+2,x
.2027	36 5a		rol $5a,x			rol 	esInt2+2,x
.2029	36 62		rol $62,x			rol 	esInt3+2,x
.202b	38		sec				sec 								; calculate A-M saving result on the stack
.202c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.202e	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2030	48		pha				pha
.2031	b5 52		lda $52,x			lda 	esInt1+2,x
.2033	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2035	48		pha				pha
.2036	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2038	f5 59		sbc $59,x			sbc 	esInt2+1,x
.203a	48		pha				pha
.203b	b5 62		lda $62,x			lda 	esInt3+2,x
.203d	f5 61		sbc $61,x			sbc 	esInt3+1,x
.203f	90 10		bcc $2051			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2041	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2043	68		pla				pla
.2044	95 5a		sta $5a,x			sta 	esInt2+2,x
.2046	68		pla				pla
.2047	95 52		sta $52,x			sta 	esInt1+2,x
.2049	68		pla				pla
.204a	95 4a		sta $4a,x			sta 	esInt0+2,x
.204c	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.204e	4c 54 20	jmp $2054			jmp 	_MInt32Next 					; do the next iteration
.2051					_MInt32NoSubtract:
.2051	68		pla				pla
.2052	68		pla				pla
.2053	68		pla				pla
.2054					_MInt32Next:
.2054	88		dey				dey 								; do this 32 times.
.2055	d0 c4		bne $201b			bne 	_MInt32UDLoop
.2057	68		pla				pla 								; restore Y and exit
.2058	a8		tay				tay
.2059	60		rts				rts
.205a					_MInt32DZero:
.205a	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.205c	20 c1 23	jsr $23c1		jsr	errorHandler
.205f					MInt32Modulus:
.205f	20 06 20	jsr $2006			jsr 	MInt32UDivide 				; do the division.
.2062	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2064	95 60		sta $60,x			sta 	esInt3,x
.2066	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2068	95 58		sta $58,x			sta 	esInt2,x
.206a	b5 52		lda $52,x			lda 	esInt1+2,x
.206c	95 50		sta $50,x			sta 	esInt1,x
.206e	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2070	95 48		sta $48,x			sta 	esInt0,x
.2072	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0b1a					fs32Length:
>0b1a							.fill 	1
.2073					LinkInt32FromString:
.2073	aa		tax				tax
.2074	98		tya				tya
.2075	20 7a 20	jsr $207a			jsr 	MInt32FromString
.2078	8a		txa				txa
.2079	60		rts				rts
.207a					MInt32FromString:
.207a	85 0c		sta $0c				sta 	tempShort 					; save base
.207c	98		tya				tya
.207d	48		pha				pha
.207e	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2080	b1 04		lda ($04),y			lda 	(temp0),y
.2082	8d 1a 0b	sta $0b1a			sta 	fs32Length
.2085	f0 65		beq $20ec			beq 	_I32FSFail2					; fail if length zero.
.2087	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2089	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.208b	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.208d	d0 09		bne $2098			bne 	_I32FSNotNegative
.208f	ad 1a 0b	lda $0b1a			lda 	fs32Length 					; get length back.
.2092	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2094	f0 56		beq $20ec			beq 	_I32FSFail2
.2096	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2098					_I32FSNotNegative:
.2098	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.209a	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.209c	d0 02		bne $20a0			bne 	_I32FSNN2
.209e	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.20a0					_I32FSNN2:
.20a0	48		pha				pha 								; save base + final sign on stack.
.20a1	20 0c 22	jsr $220c			jsr 	MInt32False 				; zero the return value.
.20a4					_I32FSMainLoop:
.20a4	68		pla				pla 								; get the base back into tempShort
.20a5	48		pha				pha
.20a6	29 7f		and #$7f			and 	#$7F
.20a8	85 0c		sta $0c				sta 	tempShort
.20aa	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.20ac	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.20ae	90 02		bcc $20b2			bcc 	_I32FSNotLC
.20b0	e9 20		sbc #$20			sbc 	#32
.20b2					_I32FSNotLC:
.20b2	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.20b3	e9 30		sbc #$30			sbc 	#"0"
.20b5	90 34		bcc $20eb			bcc 	_I32FSFail 					; nothing more to do.
.20b7	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.20b9	90 06		bcc $20c1			bcc 	_I32FSValidate
.20bb	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.20bd	90 2c		bcc $20eb			bcc 	_I32FSFail
.20bf	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.20c1					_I32FSValidate:
.20c1	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.20c3	b0 26		bcs $20eb			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.20c5	48		pha				pha 								; save the new digit value.
.20c6	e8		inx				inx 								; put base into next slot up on stack
.20c7	a5 0c		lda $0c				lda 	tempShort
.20c9	20 1b 22	jsr $221b			jsr 	MInt32Set8Bit
.20cc	ca		dex				dex
.20cd	20 24 21	jsr $2124			jsr 	MInt32Multiply 				; multiply current by the base
.20d0	e8		inx				inx
.20d1	68		pla				pla  								; put additive into next slot
.20d2	20 1b 22	jsr $221b			jsr 	MInt32Set8Bit
.20d5	ca		dex				dex
.20d6	20 f0 20	jsr $20f0			jsr 	MInt32Add 					; and add it
.20d9	c8		iny				iny 								; bump the character pointer
.20da	cc 1a 0b	cpy $0b1a			cpy 	fs32Length 					; until > length.
.20dd	f0 c5		beq $20a4			beq 	_I32FSMainLoop
.20df	90 c3		bcc $20a4			bcc 	_I32FSMainLoop
.20e1					_I32FSDone:
.20e1	68		pla				pla 								; get base/final sign back
.20e2	10 03		bpl $20e7			bpl 	_I32FSNN3
.20e4	20 c6 21	jsr $21c6			jsr 	MInt32Negate 				; negate the result.
.20e7					_I32FSNN3:
.20e7	68		pla				pla
.20e8	a8		tay				tay
.20e9	38		sec				sec
.20ea	60		rts				rts
.20eb					_I32FSFail:
.20eb	68		pla				pla
.20ec					_I32FSFail2:
.20ec	68		pla				pla
.20ed	a8		tay				tay
.20ee	18		clc				clc
.20ef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.20f0					MInt32Add:
.20f0	18		clc				clc
.20f1	b5 48		lda $48,x			lda 	esInt0,x
.20f3	75 49		adc $49,x			adc 	esInt0+1,x
.20f5	95 48		sta $48,x			sta 	esInt0,x
.20f7	b5 50		lda $50,x			lda 	esInt1,x
.20f9	75 51		adc $51,x			adc 	esInt1+1,x
.20fb	95 50		sta $50,x			sta 	esInt1,x
.20fd	b5 58		lda $58,x			lda 	esInt2,x
.20ff	75 59		adc $59,x			adc 	esInt2+1,x
.2101	95 58		sta $58,x			sta 	esInt2,x
.2103	b5 60		lda $60,x			lda 	esInt3,x
.2105	75 61		adc $61,x			adc 	esInt3+1,x
.2107	95 60		sta $60,x			sta 	esInt3,x
.2109	60		rts				rts
.210a					MInt32Sub:
.210a	38		sec				sec
.210b	b5 48		lda $48,x			lda 	esInt0,x
.210d	f5 49		sbc $49,x			sbc 	esInt0+1,x
.210f	95 48		sta $48,x			sta 	esInt0,x
.2111	b5 50		lda $50,x			lda 	esInt1,x
.2113	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2115	95 50		sta $50,x			sta 	esInt1,x
.2117	b5 58		lda $58,x			lda 	esInt2,x
.2119	f5 59		sbc $59,x			sbc 	esInt2+1,x
.211b	95 58		sta $58,x			sta 	esInt2,x
.211d	b5 60		lda $60,x			lda 	esInt3,x
.211f	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2121	95 60		sta $60,x			sta 	esInt3,x
.2123	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2124					MInt32Multiply:
.2124	e8		inx				inx 								; copy 2nd -> 3rd
.2125	20 4a 21	jsr $214a			jsr 	MInt32CopyUp
.2128	ca		dex				dex
.2129	20 4a 21	jsr $214a			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.212c	20 0c 22	jsr $220c			jsr 	MInt32False 				; zero 1st.
.212f					_I32Loop:
.212f	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2131	29 01		and #$01			and 	#1
.2133	f0 03		beq $2138			beq 	_I32NoAdd 					; if set
.2135	20 f0 20	jsr $20f0			jsr 	MInt32Add 					; add 2nd to 1st.
.2138					_I32NoAdd:
.2138	e8		inx				inx 								; shift 2nd left
.2139	20 21 22	jsr $2221			jsr 	MInt32ShiftLeft
.213c	e8		inx				inx  								; shift 3rd right
.213d	20 2a 22	jsr $222a			jsr 	MInt32ShiftRight
.2140	20 33 22	jsr $2233			jsr 	MInt32Zero 					; check if zero.
.2143	08		php				php 								; save status bits
.2144	ca		dex				dex 	 							; point back to 1st
.2145	ca		dex				dex
.2146	28		plp				plp 								; get status bits
.2147	d0 e6		bne $212f			bne 	_I32Loop 					; if non-zero keep going.
.2149	60		rts				rts
.214a					MInt32CopyUp:
.214a	b5 48		lda $48,x			lda 	esInt0,x
.214c	95 49		sta $49,x			sta 	esInt0+1,x
.214e	b5 50		lda $50,x			lda 	esInt1,x
.2150	95 51		sta $51,x			sta 	esInt1+1,x
.2152	b5 58		lda $58,x			lda 	esInt2,x
.2154	95 59		sta $59,x			sta 	esInt2+1,x
.2156	b5 60		lda $60,x			lda 	esInt3,x
.2158	95 61		sta $61,x			sta 	esInt3+1,x
.215a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0b1b					MCharCount:	.fill 	1						; count of converted characters
.215b					MLInt32ToString:
.215b	aa		tax				tax									; module passes stack in A, base in Y
.215c	98		tya				tya
.215d	20 62 21	jsr $2162			jsr 	MInt32ToString
.2160	8a		txa				txa
.2161	60		rts				rts
.2162					MInt32ToString:
.2162	48		pha				pha 								; save base
.2163	85 0c		sta $0c				sta 	tempShort 					; save target base.
.2165	a9 00		lda #$00			lda 	#0
.2167	8d 1b 0b	sta $0b1b			sta 	MCharCount 					; clear character count to 0
.216a	98		tya				tya
.216b	48		pha				pha
.216c	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.216e	10 10		bpl $2180			bpl 	_I32TSUnsigned
.2170	48		pha				pha 								; save base on stack.
.2171	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2173	10 08		bpl $217d			bpl 	_I32TSNoFlip
.2175	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2177	20 b3 21	jsr $21b3			jsr 	MI32WriteCharacter
.217a	20 c6 21	jsr $21c6			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.217d					_I32TSNoFlip:
.217d	68		pla				pla 								; get the base back
.217e	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2180					_I32TSUnsigned:
.2180	20 8e 21	jsr $218e			jsr 	MI32DivideWrite 			; recursive code to output string.
.2183	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2185	ad 1b 0b	lda $0b1b			lda 	MCharCount
.2188	91 04		sta ($04),y			sta 	(temp0),y
.218a	68		pla				pla
.218b	a8		tay				tay
.218c	68		pla				pla
.218d	60		rts				rts
.218e					MI32DivideWrite:
.218e	48		pha				pha 								; save the divisor/base
.218f	e8		inx				inx 								; write in the dividing position.
.2190	20 1b 22	jsr $221b			jsr 	MInt32Set8Bit
.2193	ca		dex				dex
.2194	20 06 20	jsr $2006			jsr 	MInt32UDivide 				; divide number by base.
.2197	68		pla				pla 								; get the base into Y
.2198	a8		tay				tay
.2199	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.219b	48		pha				pha
.219c	20 33 22	jsr $2233			jsr 	MInt32Zero 					; is the result zero ?
.219f	f0 04		beq $21a5			beq 	_I32NoRecurse 				; if so, don't recurse.
.21a1	98		tya				tya 								; put base into A
.21a2	20 8e 21	jsr $218e			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.21a5					_I32NoRecurse:
.21a5	68		pla				pla 								; get the remainder back
.21a6	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.21a8	90 02		bcc $21ac			bcc 	_I32NotHex
.21aa	69 06		adc #$06			adc 	#7-1
.21ac					_I32NotHex:
.21ac	18		clc				clc 								; make it ASCII
.21ad	69 30		adc #$30			adc 	#48
.21af	20 b3 21	jsr $21b3			jsr 	MI32WriteCharacter 			; write the character out
.21b2	60		rts				rts 								; and exit.
.21b3					MI32WriteCharacter:
.21b3	ee 1b 0b	inc $0b1b			inc 	MCharCount 					; bump count (space for leading count)
.21b6	ac 1b 0b	ldy $0b1b			ldy 	MCharCount 					; get position
.21b9	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.21bb	c8		iny				iny
.21bc	a9 00		lda #$00			lda 	#0
.21be	91 04		sta ($04),y			sta 	(temp0),y
.21c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0b1c					MSeed32:	.fill 	4							; random number seed.
.21c1					MInt32Absolute:
.21c1	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.21c3	30 01		bmi $21c6			bmi 	MInt32Negate
.21c5	60		rts				rts
.21c6					MInt32Negate:
.21c6	38		sec				sec 								; subtract from zero.
.21c7	a9 00		lda #$00			lda 	#0
.21c9	f5 48		sbc $48,x			sbc 	esInt0,x
.21cb	95 48		sta $48,x			sta 	esInt0,x
.21cd	a9 00		lda #$00			lda 	#0
.21cf	f5 50		sbc $50,x			sbc 	esInt1,x
.21d1	95 50		sta $50,x			sta 	esInt1,x
.21d3	a9 00		lda #$00			lda 	#0
.21d5	f5 58		sbc $58,x			sbc 	esInt2,x
.21d7	95 58		sta $58,x			sta 	esInt2,x
.21d9	a9 00		lda #$00			lda 	#0
.21db	f5 60		sbc $60,x			sbc 	esInt3,x
.21dd	95 60		sta $60,x			sta 	esInt3,x
.21df	60		rts				rts
.21e0					MInt32Not:
.21e0	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.21e2	49 ff		eor #$ff			eor 	#$FF
.21e4	95 48		sta $48,x			sta 	esInt0,x
.21e6	b5 50		lda $50,x			lda 	esInt1,x
.21e8	49 ff		eor #$ff			eor 	#$FF
.21ea	95 50		sta $50,x			sta 	esInt1,x
.21ec	b5 58		lda $58,x			lda 	esInt2,x
.21ee	49 ff		eor #$ff			eor 	#$FF
.21f0	95 58		sta $58,x			sta 	esInt2,x
.21f2	b5 60		lda $60,x			lda 	esInt3,x
.21f4	49 ff		eor #$ff			eor 	#$FF
.21f6	95 60		sta $60,x			sta 	esInt3,x
.21f8	60		rts				rts
.21f9					MInt32Sign:
.21f9	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.21fb	30 0b		bmi $2208			bmi 	MInt32True 					; if set return -1 (true)
.21fd	20 33 22	jsr $2233			jsr 	MInt32Zero 					; is it zero ?
.2200	f0 0a		beq $220c			beq 	MInt32False 				; if zero return 0 (false)
.2202	20 0c 22	jsr $220c			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2205	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2207	60		rts				rts
.2208					MInt32True:
.2208	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.220a	d0 02		bne $220e			bne 	MInt32WriteAll
.220c					MInt32False:
.220c	a9 00		lda #$00			lda 	#0
.220e					MInt32WriteAll:
.220e	95 48		sta $48,x			sta 	esInt0,x
.2210					MInt32Write123:
.2210	95 50		sta $50,x			sta 	esInt1,x
.2212	95 58		sta $58,x			sta 	esInt2,x
.2214	95 60		sta $60,x			sta 	esInt3,x
.2216	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2218	95 40		sta $40,x			sta 	esType,x
.221a	60		rts				rts
.221b					MInt32Set8Bit:
.221b	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.221d	a9 00		lda #$00			lda 	#0 							; a value 0-255
.221f	f0 ef		beq $2210			beq		MInt32Write123
.2221					MInt32ShiftLeft:
.2221	16 48		asl $48,x			asl 	esInt0,x
.2223	36 50		rol $50,x			rol	 	esInt1,x
.2225	36 58		rol $58,x			rol	 	esInt2,x
.2227	36 60		rol $60,x			rol	 	esInt3,x
.2229	60		rts				rts
.222a					MInt32ShiftRight:
.222a	56 60		lsr $60,x			lsr 	esInt3,x
.222c	76 58		ror $58,x			ror 	esInt2,x
.222e	76 50		ror $50,x			ror 	esInt1,x
.2230	76 48		ror $48,x			ror 	esInt0,x
.2232	60		rts				rts
.2233					MInt32Zero:
.2233	b5 48		lda $48,x			lda 	esInt0,x
.2235	15 50		ora $50,x			ora 	esInt1,x
.2237	15 58		ora $58,x			ora 	esInt2,x
.2239	15 60		ora $60,x			ora 	esInt3,x
.223b	60		rts				rts
.223c					MInt32Random:
.223c	98		tya				tya
.223d	48		pha				pha
.223e	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2240	ad 1c 0b	lda $0b1c			lda 	MSeed32+0 					; check the seed isn't zero
.2243	d0 03		bne $2248			bne 	_Random1
.2245	a8		tay				tay 								; if so do it 256 times
.2246	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2248					_Random1:
.2248	0a		asl a				asl 	a
.2249	2e 1d 0b	rol $0b1d			rol 	MSeed32+1
.224c	2e 1e 0b	rol $0b1e			rol 	MSeed32+2
.224f	2e 1f 0b	rol $0b1f			rol 	MSeed32+3
.2252	90 02		bcc $2256			bcc 	_Random2
.2254	49 c5		eor #$c5			eor 	#$C5
.2256					_Random2:
.2256	88		dey				dey
.2257	d0 ef		bne $2248			bne 	_Random1
.2259	8d 1c 0b	sta $0b1c			sta 	MSeed32+0 					; copy the seed in.
.225c	95 48		sta $48,x			sta 	esInt0,x
.225e	ad 1d 0b	lda $0b1d			lda 	MSeed32+1
.2261	95 50		sta $50,x			sta 	esInt1,x
.2263	ad 1e 0b	lda $0b1e			lda 	MSeed32+2
.2266	95 58		sta $58,x			sta 	esInt2,x
.2268	ad 1f 0b	lda $0b1f			lda 	MSeed32+3
.226b	95 60		sta $60,x			sta 	esInt3,x
.226d	68		pla				pla
.226e	a8		tay				tay
.226f	a9 00		lda #$00			lda 	#0
.2271	95 40		sta $40,x			sta 	esType,x
.2273	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2274					CheckToken:
.2274	d1 02		cmp ($02),y			cmp 	(codePtr),y
.2276	d0 02		bne $227a			bne 	_CTError
.2278	c8		iny				iny
.2279	60		rts				rts
.227a					_CTError:
.227a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.227c	20 c1 23	jsr $23c1		jsr	errorHandler
.227f					CheckRightParen:
.227f	b1 02		lda ($02),y			lda 	(codePtr),y
.2281	c8		iny				iny
.2282	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2284	d0 01		bne $2287			bne 	_CRPError
.2286	60		rts				rts
.2287					_CRPError:
.2287	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2289	20 c1 23	jsr $23c1		jsr	errorHandler
.228c					CheckComma:
.228c	b1 02		lda ($02),y			lda 	(codePtr),y
.228e	c8		iny				iny
.228f	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.2291	d0 01		bne $2294			bne 	_CCError
.2293	60		rts				rts
.2294					_CCError:
.2294	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2296	20 c1 23	jsr $23c1		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.35a5					ScanForward:
.35a5	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.35a7	86 07		stx $07				stx 	temp1+1
.35a9	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.35ab	85 08		sta $08				sta 	temp2
.35ad	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.35af	c8		iny				iny
.35b0	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.35b2	d0 08		bne $35bc			bne 	_SFNoCheck 					; if so, check token against entered values.
.35b4	c5 06		cmp $06				cmp 	temp1 						; if either matches, we've reached the token
.35b6	f0 24		beq $35dc			beq 	_SFExit 					; at the same strcture depth.
.35b8	c5 07		cmp $07				cmp 	temp1+1
.35ba	f0 20		beq $35dc			beq 	_SFExit
.35bc					_SFNoCheck:
.35bc	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.35be	90 ed		bcc $35ad			bcc 	_SFLoop
.35c0	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.35c2	90 19		bcc $35dd			bcc 	_SFSpecials
.35c4	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.35c6	90 e5		bcc $35ad			bcc 	_SFLoop
.35c8	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.35ca	b0 e1		bcs $35ad			bcs 	_SFLoop
.35cc	aa		tax				tax  								; token in X, and look up the adjuster.
.35cd	bd 43 1b	lda $1b43,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.35d0	38		sec				sec 								; convert to an offset ($FF,$01)
.35d1	e9 81		sbc #$81			sbc 	#$81
.35d3	18		clc				clc 								; add to depth
.35d4	65 08		adc $08				adc 	temp2
.35d6	85 08		sta $08				sta 	temp2
.35d8	10 d3		bpl $35ad			bpl 	_SFLoop 					; +ve okay to continue
.35da	30 35		bmi $3611			bmi 	_SFError 					; if gone -ve then we have a nesting error
.35dc	60		rts		_SFExit:rts
.35dd					_SFSpecials:
.35dd	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.35df	f0 14		beq $35f5			beq 	_SFNextLine
.35e1	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.35e3	f0 31		beq $3616			beq 	_SFFloatSkip
.35e5	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.35e7	f0 04		beq $35ed			beq 	_SFSkipString
.35e9	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.35ea	4c ad 35	jmp $35ad			jmp 	_SFLoop 					; token.
.35ed					_SFSkipString:
.35ed	98		tya				tya
.35ee	38		sec				sec
.35ef	71 02		adc ($02),y			adc 	(codePtr),y
.35f1	a8		tay				tay
.35f2	4c ad 35	jmp $35ad			jmp 	_SFLoop
.35f5					_SFNextLine:
.35f5	a0 00		ldy #$00			ldy 	#0 							; get offset
.35f7	b1 02		lda ($02),y			lda 	(codePtr),y
.35f9	18		clc				clc 								; add to code pointer.
.35fa	65 02		adc $02				adc 	codePtr
.35fc	85 02		sta $02				sta 	codePtr
.35fe	90 02		bcc $3602			bcc		_SFNLNoCarry
.3600	e6 03		inc $03				inc 	codePtr+1
.3602					_SFNLNoCarry:
.3602	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.3604	d0 a7		bne $35ad			bne		_SFLoop 					; no go round again
.3606	a5 06		lda $06				lda 	temp1
.3608	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.360a	d0 05		bne $3611			bne 	_SFError 					; read uses this to search for data statements
.360c	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.360e	20 c1 23	jsr $23c1		jsr	errorHandler
.3611					_SFError:
.3611	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.3613	20 c1 23	jsr $23c1		jsr	errorHandler
.3616					_SFFloatSkip:
.3616	4c 4c 15	jmp $154c			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2299					RSReset:
.2299	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.229b	85 78		sta $78				sta 	rsPointer
.229d	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.229f	85 79		sta $79				sta 	1+(rsPointer)
.22a1	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.22a3	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.22a6	60		rts				rts
.22a7					RSClaim:
.22a7	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.22a9	48		pha				pha 								; save marker on stack.
.22aa	8a		txa				txa 								; get bytes required.
.22ab	38		sec				sec
.22ac	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.22ae	65 78		adc $78				adc 	rsPointer
.22b0	85 78		sta $78				sta 	rsPointer
.22b2	a5 79		lda $79				lda 	rsPointer+1
.22b4	69 ff		adc #$ff			adc 	#$FF
.22b6	85 79		sta $79				sta 	rsPointer+1
.22b8	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.22ba	90 08		bcc $22c4			bcc 	_RSCOverflow
.22bc	68		pla				pla 								; get marker back
.22bd	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.22bf	91 78		sta ($78),y			sta 	(rsPointer),y
.22c1	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.22c3	60		rts				rts
.22c4					_RSCOverflow:
.22c4	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.22c6	20 c1 23	jsr $23c1		jsr	errorHandler
.22c9					RSFree:
.22c9	18		clc				clc
.22ca	65 78		adc $78				adc 	rsPointer
.22cc	85 78		sta $78				sta 	rsPointer
.22ce	90 02		bcc $22d2			bcc 	_RSFExit
.22d0	e6 79		inc $79				inc 	rsPointer+1
.22d2					_RSFExit:
.22d2	60		rts				rts
.22d3					RSSavePosition:
.22d3	84 0c		sty $0c				sty 	tempShort 					; save Y position
.22d5	a8		tay				tay 								; this is where we write it.
.22d6	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.22d8	91 78		sta ($78),y			sta 	(rsPointer),y
.22da	c8		iny				iny
.22db	a5 03		lda $03				lda 	codePtr+1
.22dd	91 78		sta ($78),y			sta 	(rsPointer),y
.22df	c8		iny				iny
.22e0	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.22e2	91 78		sta ($78),y			sta 	(rsPointer),y
.22e4	a8		tay				tay 								; fix Y back again to original value
.22e5	60		rts				rts
.22e6					RSLoadPosition:
.22e6	a8		tay				tay
.22e7	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.22e9	85 02		sta $02				sta 	codePtr
.22eb	c8		iny				iny
.22ec	b1 78		lda ($78),y			lda 	(rsPointer),y
.22ee	85 03		sta $03				sta 	codePtr+1
.22f0	c8		iny				iny
.22f1	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.22f3	a8		tay				tay 								; to Y
.22f4	60		rts				rts

;******  Return to file: main/main.asm

.22f5					mainHandler:
.22f5	7c f8 22	jmp ($22f8,x)			jmp 	(mainVectors,x)
.22f8					mainVectors:
>22f8	7f 22					.word CheckRightParen      ; index 0
>22fa	c5 1c					.word LinkEvaluate         ; index 2
>22fc	d1 1c					.word LinkEvaluateInteger  ; index 4
>22fe	d7 1c					.word LinkEvaluateSmallInt ; index 6
>2300	cb 1c					.word LinkEvaluateTerm     ; index 8
>2302	5b 21					.word MLInt32ToString      ; index 10
>2304	c8 13					.word PrintString          ; index 12
>2306	73 20					.word LinkInt32FromString  ; index 14

;******  Return to file: basic.asm

.2308					section_end_main:
.2308					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.2308					assemblerHandler:
.2308	7c 0b 23	jmp ($230b,x)			jmp 	(assemblerVectors,x)
.230b					assemblerVectors:

;******  Return to file: basic.asm

.230b					section_end_assembler:
.230b					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.230b					IOInitialise:
.230b	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.230d	20 36 23	jsr $2336			jsr 	IOPrintChar
.2310	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.2312	20 62 23	jsr $2362			jsr 	IOInk
.2315	a9 00		lda #$00			lda 	#0
.2317	20 76 23	jsr $2376			jsr 	IOPaper
.231a	20 1e 23	jsr $231e			jsr 	IOClearScreen
.231d	60		rts				rts
.231e					IOClearScreen:
.231e	48		pha				pha
.231f	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.2321	20 36 23	jsr $2336			jsr 	IOPrintChar
.2324	68		pla				pla
.2325	60		rts				rts
.2326					IONewLine:
.2326	48		pha				pha
.2327	a9 0d		lda #$0d			lda 	#13
.2329	20 36 23	jsr $2336			jsr 	IOPrintChar
.232c	68		pla				pla
.232d	60		rts				rts
.232e					IOTab:
.232e	48		pha				pha
.232f	a9 20		lda #$20			lda 	#32
.2331	20 36 23	jsr $2336			jsr 	IOPrintChar
.2334	68		pla				pla
.2335	60		rts				rts
.2336					IOPrintChar:
.2336	aa		tax				tax 								; save in X so we can save Y
.2337	5a		phy				phy
.2338	8a		txa				txa
.2339	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.233b	d0 02		bne $233f			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.233d	a9 14		lda #$14			lda 	#$14
.233f					_IOPCNotBS:
.233f	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.2342	7a		ply				ply
.2343	60		rts				rts
.2344					IOInkey:
.2344	98		tya				tya
.2345	48		pha				pha
.2346	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2349	85 0c		sta $0c				sta 	tempShort
.234b	68		pla				pla
.234c	a8		tay				tay
.234d	a5 0c		lda $0c				lda 	tempShort					; no key pressed.
.234f	f0 10		beq $2361			beq 	_IOIExit
.2351	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.2353	f0 0c		beq $2361			beq 	_IOIExit
.2355	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.2357	f0 06		beq $235f			beq 	_IOIBackspace
.2359	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.235b	90 e7		bcc $2344			bcc 	IOInkey
.235d	b0 02		bcs $2361			bcs 	_IOIExit
.235f					_IOIBackspace:
.235f	a9 08		lda #$08			lda 	#8 							; return chr(8)
.2361					_IOIExit:
.2361	60		rts				rts
.2362					IOInk:
.2362	48		pha				pha
.2363	29 07		and #$07			and 	#7 							; 8 primaries
.2365	aa		tax				tax
.2366	bd 6e 23	lda $236e,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.2369	20 36 23	jsr $2336			jsr 	IOPrintChar
.236c	68		pla				pla
.236d	60		rts				rts
.236e					_IOColourTable:
>236e	90						.byte 	$90 					; 0 Black
>236f	96						.byte 	$96 					; 1 Red
>2370	1e						.byte 	$1E 					; 2 Green
>2371	9e						.byte 	$9E 					; 3 Yellow
>2372	9a						.byte 	$9A 					; 4 Blue
>2373	9c						.byte 	$9C 					; 5 Magenta
>2374	9f						.byte 	$9F 					; 6 Cyan
>2375	05						.byte 	$05 					; 7 White
.2376					IOPaper:
.2376	48		pha				pha
.2377	48		pha				pha
.2378	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.237a	20 36 23	jsr $2336			jsr 	IOPrintChar 			; and then swap them again.
.237d	68		pla				pla
.237e	20 62 23	jsr $2362			jsr 	IOInk
.2381	a9 01		lda #$01			lda 	#1
.2383	20 36 23	jsr $2336			jsr 	IOPrintChar
.2386	68		pla				pla
.2387	60		rts				rts
.2388					IOLocate:
.2388	48		pha				pha
.2389	a9 13		lda #$13			lda 	#$13 					; home cursor code
.238b	20 36 23	jsr $2336			jsr 	IOPrintChar
.238e	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.2390	20 97 23	jsr $2397			jsr 	_IOLoc2
.2393	68		pla				pla
.2394	a8		tay				tay
.2395	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.2397					_IOLoc2:
.2397	c0 00		cpy #$00			cpy 	#0
.2399	f0 06		beq $23a1			beq 	_IOLocExit
.239b	20 36 23	jsr $2336			jsr 	IOPrintChar
.239e	88		dey				dey
.239f	d0 f6		bne $2397			bne 	_IOLoc2
.23a1					_IOLocExit:
.23a1	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.23a2					IOReadTimer:
.23a2	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.23a5	48		pha				pha
.23a6	8a		txa				txa
.23a7	a8		tay				tay
.23a8	68		pla				pla
.23a9	60		rts				rts

;******  Return to file: device/device.asm

.23aa					deviceHandler:
.23aa	7c ad 23	jmp ($23ad,x)			jmp 	(deviceVectors,x)
.23ad					deviceVectors:
>23ad	1e 23					.word IOClearScreen        ; index 0
>23af	26 23					.word IONewLine            ; index 2
>23b1	0b 23					.word IOInitialise         ; index 4
>23b3	62 23					.word IOInk                ; index 6
>23b5	44 23					.word IOInkey              ; index 8
>23b7	88 23					.word IOLocate             ; index 10
>23b9	76 23					.word IOPaper              ; index 12
>23bb	36 23					.word IOPrintChar          ; index 14
>23bd	2e 23					.word IOTab                ; index 16
>23bf	a2 23					.word IOReadTimer          ; index 18

;******  Return to file: basic.asm

.23c1					section_end_device:
.23c1					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.23c1					ErrorHandler:
.23c1	a9 24		lda #$24			lda 	#(ErrorTextList) & $FF
.23c3	85 04		sta $04				sta 	temp0
.23c5	a9 24		lda #$24			lda 	#(ErrorTextList) >> 8
.23c7	85 05		sta $05				sta 	1+(temp0)
.23c9	ca		dex		_EHFind:dex									; errors start at 1
.23ca	f0 10		beq $23dc			beq 	_EHFound
.23cc	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.23ce	38		sec				sec
.23cf	a5 04		lda $04				lda 	temp0
.23d1	71 04		adc ($04),y			adc 	(temp0),y
.23d3	85 04		sta $04				sta 	temp0
.23d5	90 f2		bcc $23c9			bcc 	_EHFind
.23d7	e6 05		inc $05				inc 	temp0+1
.23d9	4c c9 23	jmp $23c9			jmp 	_EHFind
.23dc					_EHFound:
.23dc	a2 0c		ldx #$0c		ldx	#12
.23de	20 f5 22	jsr $22f5		jsr	mainHandler
.23e1	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.23e3	b1 02		lda ($02),y			lda 	(codePtr),y
.23e5	f0 36		beq $241d			beq 	_EHNoLine
.23e7	a9 20		lda #$20			lda 	#(EHAtMsg) & $FF
.23e9	85 04		sta $04				sta 	temp0
.23eb	a9 24		lda #$24			lda 	#(EHAtMsg) >> 8
.23ed	85 05		sta $05				sta 	1+(temp0)
.23ef	a2 0c		ldx #$0c		ldx	#12
.23f1	20 f5 22	jsr $22f5		jsr	mainHandler
.23f4	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.23f6	a2 00		ldx #$00			ldx 	#0
.23f8	b1 02		lda ($02),y			lda 	(codePtr),y
.23fa	95 48		sta $48,x			sta 	esInt0,x
.23fc	c8		iny				iny
.23fd	b1 02		lda ($02),y			lda 	(codePtr),y
.23ff	95 50		sta $50,x			sta 	esInt1,x
.2401	a9 00		lda #$00			lda 	#0
.2403	95 58		sta $58,x			sta 	esInt2,x
.2405	95 60		sta $60,x			sta 	esInt3,x
.2407	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2409	85 04		sta $04				sta 	temp0
.240b	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.240d	85 05		sta $05				sta 	1+(temp0)
.240f	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.2411	a9 00		lda #$00			lda 	#0							; stack position zero.
.2413	a2 0a		ldx #$0a		ldx	#10
.2415	20 f5 22	jsr $22f5		jsr	mainHandler
.2418	a2 0c		ldx #$0c		ldx	#12
.241a	20 f5 22	jsr $22f5		jsr	mainHandler
.241d					_EHNoLine:
.241d	4c 1d 24	jmp $241d	_EHHalt:jmp 	_EHHalt
.2420					EHAtMsg:
>2420	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.2424					ErrorTextList:
>2424	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>242c	20 6e 6f 74 20 50 72 65 73 65 6e 74
>2438	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>2440	45 72 72 6f 72
>2445	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>244d	64 69 73 61 62 6c 65 64
>2455	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>245d	6f 6e 20 66 61 69 6c 65 64
>2466	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>246e	42 79 20 5a 65 72 6f
>2475	04 53 74 6f 70				.text 4,"Stop"
>247a	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>2482	73 6d 61 74 63 68
>2488	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>2490	20 56 61 6c 75 65
>2496	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>249e	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>24ac	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>24b4	20 63 6f 6d 6d 61
>24ba	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>24c2	20 72 65 66 65 72 65 6e 63 65
>24cc	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>24d4	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>24e2	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>24ea	74 6f 6f 20 6c 6f 6e 67 2e
>24f3	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>24fb	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>2508	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>2510	69 74 68 6f 75 74 20 52 45 50 45 41 54
>251d	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>2525	74 68 6f 75 74 20 46 4f 52
>252e	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>2536	74 68 6f 75 74 20 57 48 49 4c 45
>2541	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>2549	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>2556	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>255e	54 20 69 6e 64 65 78
>2565	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>256d	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>257d	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>2585	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>2594	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>259c	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>25ac	63 65 2e
>25af	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>25b7	20 50 72 6f 63 65 64 75 72 65
>25c1	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>25c9	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>25d9	2e
>25da	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>25e2	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>25f0	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>25f8	75 69 72 65 73 20 61 72 72 61 79
>2603	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>260b	61 79 20 69 6e 64 65 78 2e
>2614	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>261c	64 61 74 61
>2620	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2621					section_end_error:
.2621					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2621					ExtensionHandler:
.2621	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.2623	d0 08		bne $262d			bne 	_ExtensionUnary 			; is passed in A.
.2625	b1 02		lda ($02),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.2627	c8		iny				iny
.2628	0a		asl a				asl 	a
.2629	aa		tax				tax
.262a	7c 2b 26	jmp ($262b,x)			jmp 	(Group2Vectors-12,x)
.262d					_ExtensionUnary:
.262d	48		pha				pha 								; save stack pos in A
.262e	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token, double into X
.2630	c8		iny				iny
.2631	0a		asl a				asl 	a
.2632	aa		tax				tax
.2633	68		pla				pla 								; restore stack pos and call group3 command.
.2634	7c 2f 26	jmp ($262f,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.2637					Group2Vectors:
>2637	47 26					.word	Command_VPoke            ; $86 vpoke
>2639	4a 26					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.263b					Group3Vectors:
>263b	8b 26					.word	Command_VPeek            ; $86 vpeek(
>263d	8e 26					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.263f					XEvaluateInteger:
.263f	8a		txa				txa
.2640	a2 04		ldx #$04		ldx	#4
.2642	20 f5 22	jsr $22f5		jsr	mainHandler
.2645	aa		tax				tax
.2646	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.2647					Command_VPoke:
.2647	38		sec				sec 						; one byte , CS
.2648	b0 01		bcs $264b			bcs 	CmdVideoWrite
.264a					Command_VDoke:
.264a	18		clc				clc 						; two bytes, CC
.264b					CmdVideoWrite:
.264b	08		php				php 						; save one or two btes
.264c	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.264e	20 3f 26	jsr $263f			jsr 	XEvaluateInteger
.2651	20 8c 22	jsr $228c			jsr 	CheckComma
.2654	e8		inx				inx
.2655	20 3f 26	jsr $263f			jsr 	XEvaluateInteger
.2658	ca		dex				dex
.2659	20 6a 26	jsr $266a			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.265c	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.265e	8d 23 9f	sta $9f23			sta 	$9F23
.2661	28		plp				plp 						; if it was Poke then exit
.2662	b0 05		bcs $2669			bcs 	_CVWExit
.2664	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.2666	8d 23 9f	sta $9f23			sta 	$9F23
.2669					_CVWExit:
.2669	60		rts				rts
.266a					SetUpTOSVRamAddress:
.266a	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.266c	29 01		and #$01			and 	#1
.266e	15 60		ora $60,x			ora 	esInt3,x
.2670	d0 14		bne $2686			bne 	CVWValue
.2672	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.2674	8d 20 9f	sta $9f20			sta 	$9F20
.2677	b5 50		lda $50,x			lda 	esInt1,x
.2679	8d 21 9f	sta $9f21			sta	 	$9F21
.267c	b5 58		lda $58,x			lda 	esInt2,x
.267e	29 01		and #$01			and 	#1
.2680	09 10		ora #$10			ora 	#$10 				; step 1.
.2682	8d 22 9f	sta $9f22			sta 	$9F22
.2685	60		rts				rts
.2686					CVWValue:
.2686	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2688	20 c1 23	jsr $23c1		jsr	errorHandler
.268b					Command_VPeek:
.268b	38		sec				sec 						; one byte , CS
.268c	b0 01		bcs $268f			bcs 	CmdVideoRead
.268e					Command_VDeek:
.268e	18		clc				clc 						; two bytes, CC
.268f					CmdVideoRead:
.268f	08		php				php 						; save action on stack.
.2690	aa		tax				tax 						; save stack position
.2691	20 3f 26	jsr $263f			jsr 	XEvaluateInteger 	; address
.2694	20 7f 22	jsr $227f			jsr 	CheckRightParen 	; closing right bracket.
.2697	20 6a 26	jsr $266a			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.269a	20 0c 22	jsr $220c			jsr 	MInt32False 		; zero return.
.269d	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.26a0	95 48		sta $48,x			sta 	esInt0,x
.26a2	28		plp				plp 						; check if DOKE (carry was clear)
.26a3	b0 05		bcs $26aa			bcs 	_CVRExit
.26a5	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.26a8	95 50		sta $50,x			sta 	esInt1,x
.26aa					_CVRExit:
.26aa	8a		txa				txa 						; return X position.
.26ab	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.26ac					section_end_extension:
.26ac					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.26ac					floatingpointHandler:
.26ac	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.26ae	20 c1 23	jsr $23c1		jsr	errorHandler

;******  Return to file: basic.asm

.26b1					section_end_floatingpoint:
.26b1					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.26b1					interactionHandler:
.26b1	7c b4 26	jmp ($26b4,x)			jmp 	(interactionVectors,x)
.26b4					interactionVectors:

;******  Return to file: basic.asm

.26b4					section_end_interaction:
.26b4					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.26b4					StringChrs:
.26b4	aa		tax				tax 								; set up stack
.26b5	a9 02		lda #$02			lda 	#2
.26b7	20 6e 27	jsr $276e			jsr 	AllocateSoftString
.26ba	98		tya				tya
.26bb	20 94 27	jsr $2794			jsr 	WriteSoftString
.26be	20 c3 26	jsr $26c3			jsr 	ReturnSoftString
.26c1	8a		txa				txa
.26c2	60		rts				rts
.26c3					ReturnSoftString:
.26c3	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.26c5	95 48		sta $48,x			sta 	esInt0,x
.26c7	a5 7b		lda $7b				lda 	softMemAlloc+1
.26c9	95 50		sta $50,x			sta 	esInt1,x
.26cb	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.26cd	95 58		sta $58,x			sta 	esInt2,x
.26cf	95 60		sta $60,x			sta 	esInt3,x
.26d1	a9 40		lda #$40			lda 	#$40 						; type string.
.26d3	95 40		sta $40,x			sta 	esType,x
.26d5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.26d6					STRCompare:
.26d6	48		pha				pha 								; save A
.26d7	aa		tax				tax 								; put stack pos in X
.26d8	98		tya				tya
.26d9	48		pha				pha
.26da	20 0e 27	jsr $270e			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.26dd	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.26df	b1 04		lda ($04),y			lda 	(temp0),y
.26e1	d1 06		cmp ($06),y			cmp 	(temp1),y
.26e3	90 02		bcc $26e7			bcc 	_SCNotSmaller
.26e5	b1 06		lda ($06),y			lda 	(temp1),y
.26e7					_SCNotSmaller:
.26e7	aa		tax				tax 								; put that in X. We compare this many chars first.
.26e8					_SCCompareLoop:
.26e8	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.26ea	f0 0c		beq $26f8			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.26ec	ca		dex				dex 								; decrement chars to compare.
.26ed	c8		iny				iny 								; move to next character
.26ee	38		sec				sec 								; calculate s1[y]-s2[y]
.26ef	b1 04		lda ($04),y			lda 	(temp0),y
.26f1	f1 06		sbc ($06),y			sbc 	(temp1),y
.26f3	d0 0a		bne $26ff			bne 	_SCReturnResult 			; if different return sign of A
.26f5	4c e8 26	jmp $26e8			jmp 	_SCCompareLoop
.26f8					_SCSameToEndShortest
.26f8	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.26fa	38		sec				sec
.26fb	b1 04		lda ($04),y			lda 	(temp0),y
.26fd	f1 06		sbc ($06),y			sbc 	(temp1),y
.26ff					_SCReturnResult:
.26ff	08		php				php 								; set return to zero preserving PSW.
.2700	a2 00		ldx #$00			ldx 	#0
.2702	28		plp				plp
.2703	f0 05		beq $270a			beq 	_SCExit 					; two values equal, then exit
.2705	ca		dex				dex 								; X = $FF
.2706	90 02		bcc $270a			bcc 	_SCExit 					; if 1st < 2nd then -1
.2708	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.270a					_SCExit:
.270a	68		pla				pla
.270b	a8		tay				tay
.270c	68		pla				pla
.270d	60		rts				rts
.270e					CopyStringPair:
.270e	b5 49		lda $49,x			lda 	esInt0+1,x
.2710	85 06		sta $06				sta 	temp1
.2712	b5 51		lda $51,x			lda 	esInt1+1,x
.2714	85 07		sta $07				sta 	temp1+1
.2716					CopyStringTop:
.2716	b5 48		lda $48,x			lda 	esInt0,x
.2718	85 04		sta $04				sta 	temp0
.271a	b5 50		lda $50,x			lda 	esInt1,x
.271c	85 05		sta $05				sta 	temp0+1
.271e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.271f					StringConcat:
.271f	aa		tax				tax									; stack pos in X
.2720	98		tya				tya
.2721	48		pha				pha
.2722	20 0e 27	jsr $270e			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2725	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2726	a0 00		ldy #$00			ldy 	#0
.2728	b1 04		lda ($04),y			lda 	(temp0),y
.272a	71 06		adc ($06),y			adc 	(temp1),y
.272c	b0 1c		bcs $274a			bcs 	_SCError 					; just too many characters here.
.272e	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2730	b0 18		bcs $274a			bcs 	_SCError
.2732	20 6e 27	jsr $276e			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2735	20 65 27	jsr $2765			jsr 	CopySoftToStack 			; copy that to the stack.
.2738	20 4f 27	jsr $274f			jsr 	SCCopyTemp0 				; copy temp0
.273b	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.273d	85 04		sta $04				sta 	temp0
.273f	a5 07		lda $07				lda 	temp1+1
.2741	85 05		sta $05				sta 	temp0+1
.2743	20 4f 27	jsr $274f			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2746	68		pla				pla
.2747	a8		tay				tay
.2748	8a		txa				txa 								; and A
.2749	60		rts				rts
.274a					_SCError:
.274a	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.274c	20 c1 23	jsr $23c1		jsr	errorHandler
.274f					SCCopyTemp0:
.274f	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2751	b1 04		lda ($04),y			lda 	(temp0),y
.2753	85 08		sta $08				sta 	temp2
.2755					_SCCopyLoop:
.2755	a5 08		lda $08				lda 	temp2 						; done the lot
.2757	f0 0b		beq $2764			beq 	_SCCopyExit
.2759	c6 08		dec $08				dec 	temp2
.275b	c8		iny				iny 								; get next char
.275c	b1 04		lda ($04),y			lda 	(temp0),y
.275e	20 94 27	jsr $2794			jsr 	WriteSoftString 			; write to soft string.
.2761	4c 55 27	jmp $2755			jmp 	_SCCopyLoop
.2764					_SCCopyExit:
.2764	60		rts				rts
.2765					CopySoftToStack:
.2765	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2767	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2769	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.276b	95 50		sta $50,x			sta 	esInt1,x
.276d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.276e					AllocateSoftString:
.276e	85 0c		sta $0c				sta 	tempShort 					; save count
.2770	98		tya				tya
.2771	48		pha				pha
.2772	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2774	d0 09		bne $277f			bne 	_ASSDone
.2776	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.2778	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.277a	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.277c	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.277d	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.277f					_ASSDone:
.277f	38		sec				sec 								; allocate downwards enough memory
.2780	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2782	e5 0c		sbc $0c				sbc 	tempShort 					; the soft memory pointer
.2784	85 7a		sta $7a				sta 	softMemAlloc
.2786	a5 7b		lda $7b				lda 	softMemAlloc+1
.2788	e9 00		sbc #$00			sbc 	#0
.278a	85 7b		sta $7b				sta 	softMemAlloc+1
.278c	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.278e	a8		tay				tay
.278f	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2791	68		pla				pla
.2792	a8		tay				tay
.2793	60		rts				rts
.2794					WriteSoftString:
.2794	84 0c		sty $0c				sty 	tempShort 					; save Y
.2796	48		pha				pha 								; save character on stack
.2797	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2799	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.279b	18		clc				clc
.279c	69 01		adc #$01			adc 	#1
.279e	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.27a0	a8		tay				tay 								; offset in Y
.27a1	68		pla				pla 								; get char and write.
.27a2	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.27a4	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.27a6	60		rts				rts
.27a7					StrClone:
.27a7	aa		tax				tax 								; set up stack.
.27a8	98		tya				tya
.27a9	48		pha				pha
.27aa	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.27ac	b1 04		lda ($04),y			lda 	(temp0),y 					; this is the bytes required.
.27ae	18		clc				clc
.27af	69 01		adc #$01			adc 	#1
.27b1	20 6e 27	jsr $276e			jsr 	AllocateSoftString 			; allocate soft memory
.27b4	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.27b6	95 48		sta $48,x			sta 	esInt0,x
.27b8	a5 7b		lda $7b				lda 	softMemAlloc+1
.27ba	95 50		sta $50,x			sta 	esInt1,x
.27bc	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.27be	95 58		sta $58,x			sta 	esInt2,x
.27c0	95 60		sta $60,x			sta 	esInt3,x
.27c2	a9 40		lda #$40			lda 	#$40 						; set type to string.
.27c4	95 40		sta $40,x			sta 	esType,x
.27c6	20 4f 27	jsr $274f			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.27c9	68		pla				pla
.27ca	a8		tay				tay
.27cb	8a		txa				txa
.27cc	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.27cd					CaseString:
.27cd	48		pha				pha 								; save A and copy to X
.27ce	aa		tax				tax
.27cf	98		tya				tya
.27d0	48		pha				pha
.27d1	20 16 27	jsr $2716			jsr 	CopyStringTop 				; target string -> temp0
.27d4	a0 00		ldy #$00			ldy 	#0
.27d6	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.27d8	18		clc				clc
.27d9	69 01		adc #$01			adc 	#1 							; one more for length byte
.27db	20 6e 27	jsr $276e			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.27de	20 65 27	jsr $2765			jsr 	CopySoftToStack 			; copy that to the stack.
.27e1	a0 00		ldy #$00			ldy 	#0
.27e3	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.27e5	aa		tax				tax
.27e6					_CSCopy:
.27e6	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.27e8	f0 24		beq $280e			beq 	_CSExit
.27ea	ca		dex				dex
.27eb	c8		iny				iny
.27ec	68		pla				pla 								; check direction
.27ed	48		pha				pha
.27ee	f0 0c		beq $27fc			beq 	_CSUpper
.27f0	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.27f2	c9 41		cmp #$41			cmp 	#"A"
.27f4	90 12		bcc $2808			bcc 	_CSWrite
.27f6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.27f8	b0 0e		bcs $2808			bcs 	_CSWrite
.27fa	90 0a		bcc $2806			bcc 	_CSFlipWrite
.27fc					_CSUpper:
.27fc	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.27fe	c9 61		cmp #$61			cmp 	#"a"
.2800	90 06		bcc $2808			bcc 	_CSWrite
.2802	c9 7b		cmp #$7b			cmp 	#"z"+1
.2804	b0 02		bcs $2808			bcs 	_CSWrite
.2806					_CSFlipWrite:
.2806	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2808					_CSWrite:
.2808	20 94 27	jsr $2794			jsr 	WriteSoftString 			; add to soft string.
.280b	4c e6 27	jmp $27e6			jmp 	_CSCopy
.280e					_CSExit:
.280e	68		pla				pla
.280f	a8		tay				tay
.2810	68		pla				pla
.2811	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2812					StringSubstring:
.2812	48		pha				pha
.2813	aa		tax				tax 								; access stack.
.2814	98		tya				tya
.2815	48		pha				pha
.2816	20 16 27	jsr $2716			jsr 	CopyStringTop 				; point temp0 to the string.
.2819	a0 00		ldy #$00			ldy 	#0 							; get length.
.281b	b1 04		lda ($04),y			lda 	(temp0),Y
.281d	85 06		sta $06				sta 	temp1
.281f	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2821	c5 06		cmp $06				cmp 	temp1 						; return "" if > length.
.2823	f0 02		beq $2827			beq 	_SSBOkay
.2825	b0 2a		bcs $2851			bcs 	_SSBReturnNull
.2827					_SSBOkay:
.2827	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2829	18		clc				clc
.282a	69 01		adc #$01			adc 	#1
.282c	38		sec				sec
.282d	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.282f	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2831	90 02		bcc $2835			bcc		_SSBTrunc
.2833	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2835					_SSBTrunc:
.2835	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2837	18		clc				clc
.2838	69 01		adc #$01			adc 	#1 							; add 1
.283a	20 6e 27	jsr $276e			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.283d	20 65 27	jsr $2765			jsr 	CopySoftToStack 			; copy that to the stack.
.2840	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2842					_SSBCopyLoop:
.2842	a5 07		lda $07				lda 	temp1+1 					; done them all
.2844	f0 0e		beq $2854			beq 	_SSBExit
.2846	c6 07		dec $07				dec 	temp1+1
.2848	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.284a	20 94 27	jsr $2794			jsr 	WriteSoftString
.284d	c8		iny				iny
.284e	4c 42 28	jmp $2842			jmp 	_SSBCopyLoop
.2851					_SSBReturnNull:
.2851	20 58 28	jsr $2858			jsr 	ReturnNull
.2854					_SSBExit:
.2854	68		pla				pla
.2855	a8		tay				tay
.2856	68		pla				pla
.2857	60		rts				rts
.2858					ReturnNull:
.2858	a9 00		lda #$00			lda 	#0 							; clear null string
.285a	8d cc 0a	sta $0acc			sta 	NullString
.285d	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.285f	95 48		sta $48,x			sta 	esInt0,x
.2861	a9 0a		lda #$0a			lda 	#NullString >> 8
.2863	95 50		sta $50,x			sta 	esInt1,x
.2865	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0b20					srcStrLen:
>0b20							.fill 	1
.2866					StringWrite:
.2866	aa		tax				tax
.2867	48		pha				pha
.2868	98		tya				tya
.2869	48		pha				pha
.286a	20 91 28	jsr $2891			jsr 	CheckOverwriteCurrent
.286d	b0 0d		bcs $287c			bcs		_SWCopyCurrent
.286f	20 cf 28	jsr $28cf			jsr 	RequiresConcretion
.2872	90 0e		bcc $2882			bcc 	_SWWriteReference
.2874	20 32 29	jsr $2932			jsr 	CheckSpecialConcretion
.2877	b0 09		bcs $2882			bcs 	_SWWriteReference
.2879	20 e3 28	jsr $28e3			jsr 	AllocateHardMemory
.287c					_SWCopyCurrent:
.287c	20 16 29	jsr $2916			jsr 	CopyStringToHardMemory
.287f	4c 8d 28	jmp $288d			jmp 	_SWExit
.2882					_SWWriteReference
.2882	a0 00		ldy #$00			ldy 	#0
.2884	a5 04		lda $04				lda 	temp0
.2886	91 06		sta ($06),y			sta 	(temp1),y
.2888	c8		iny				iny
.2889	a5 05		lda $05				lda 	temp0+1
.288b	91 06		sta ($06),y			sta 	(temp1),y
.288d					_SWExit:
.288d	68		pla				pla
.288e	a8		tay				tay
.288f	68		pla				pla
.2890	60		rts				rts
.2891					CheckOverwriteCurrent:
.2891	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2893	b5 51		lda $51,x			lda 	esInt1+1,x
.2895	85 05		sta $05				sta 	temp0+1
.2897	b5 49		lda $49,x			lda 	esInt0+1,x
.2899	85 04		sta $04				sta 	temp0
.289b	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.289d	8d 20 0b	sta $0b20			sta 	srcStrLen
.28a0	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.28a2	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.28a4	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.28a6	85 07		sta $07				sta 	temp1+1
.28a8	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.28aa	b1 06		lda ($06),y			lda 	(temp1),y
.28ac	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.28ae	90 1b		bcc $28cb			bcc 	_COCFail 				; in hard memory.
.28b0	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.28b2	b1 06		lda ($06),y			lda 	(temp1),y
.28b4	e9 01		sbc #$01			sbc 	#1
.28b6	85 08		sta $08				sta 	temp2
.28b8	c8		iny				iny
.28b9	b1 06		lda ($06),y			lda 	(temp1),y
.28bb	e9 00		sbc #$00			sbc 	#0
.28bd	85 09		sta $09				sta 	temp2+1
.28bf	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.28c1	b1 08		lda ($08),y			lda 	(temp2),y
.28c3	38		sec				sec  							; maximum character capacity.
.28c4	e9 02		sbc #$02			sbc 	#2
.28c6	cd 20 0b	cmp $0b20			cmp 	srcStrLen 				; if >= the required length
.28c9	b0 02		bcs $28cd			bcs 	_COCCanReuse
.28cb					_COCFail:
.28cb	18		clc				clc
.28cc	60		rts				rts
.28cd					_COCCanReuse:
.28cd	38		sec				sec
.28ce	60		rts				rts
.28cf					RequiresConcretion:
.28cf	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.28d1	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.28d3	b0 0a		bcs $28df			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.28d5	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.28d7	f0 08		beq $28e1			beq 	_RCFail 				; if not, this cannot be soft memory.
.28d9	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.28db	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.28dd	90 02		bcc $28e1			bcc 	_RCFail 				; so concreting
.28df					_RCSucceed:
.28df	38		sec				sec
.28e0	60		rts				rts
.28e1					_RCFail:
.28e1	18		clc				clc
.28e2	60		rts				rts
.28e3					AllocateHardMemory:
.28e3	98		tya				tya
.28e4	48		pha				pha
.28e5	ad 20 0b	lda $0b20			lda 	srcStrLen 				; characters in string
.28e8	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.28ea	b0 04		bcs $28f0			bcs 	_AHMSetMax 				; max out that amount.
.28ec	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.28ee	90 02		bcc $28f2			bcc 	_AHMIsOkay
.28f0					_AHMSetMax:
.28f0	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.28f2					_AHMIsOkay:
.28f2	48		pha				pha
.28f3	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.28f5	38		sec				sec  							; and copy result to TOS as target address.
.28f6	65 0d		adc $0d				adc 	highMemory
.28f8	85 0d		sta $0d				sta 	highMemory
.28fa	a5 0e		lda $0e				lda 	highMemory+1
.28fc	69 ff		adc #$ff			adc 	#$FF
.28fe	85 0e		sta $0e				sta 	highMemory+1
.2900	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2902	68		pla				pla 							; get the total size of the storage block
.2903	91 0d		sta ($0d),y			sta 	(highMemory),y
.2905	18		clc				clc
.2906	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2908	69 01		adc #$01			adc 	#1
.290a	91 06		sta ($06),y			sta 	(temp1),y
.290c	a5 0e		lda $0e				lda 	highMemory+1
.290e	69 00		adc #$00			adc 	#0
.2910	c8		iny				iny
.2911	91 06		sta ($06),y			sta 	(temp1),y
.2913	68		pla				pla
.2914	a8		tay				tay
.2915	60		rts				rts
.2916					CopyStringToHardMemory:
.2916	98		tya				tya
.2917	48		pha				pha
.2918	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.291a	b1 06		lda ($06),y			lda 	(temp1),y
.291c	85 08		sta $08				sta 	temp2
.291e	c8		iny				iny
.291f	b1 06		lda ($06),y			lda 	(temp1),y
.2921	85 09		sta $09				sta 	temp2+1
.2923	ac 20 0b	ldy $0b20			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2926					_CSTHMLoop:
.2926	b1 04		lda ($04),y			lda 	(temp0),y
.2928	91 08		sta ($08),y			sta 	(temp2),y
.292a	88		dey				dey
.292b	c0 ff		cpy #$ff			cpy 	#$FF
.292d	d0 f7		bne $2926			bne 	_CSTHMLoop
.292f	68		pla				pla
.2930	a8		tay				tay
.2931	60		rts				rts
.2932					CheckSpecialConcretion:
.2932	ad 20 0b	lda $0b20			lda 	srcStrLen 				; check string is null.
.2935	f0 02		beq $2939			beq 	_CSCNullString
.2937	18		clc				clc
.2938	60		rts				rts
.2939					_CSCNullString:
.2939	a9 00		lda #$00			lda 	#0
.293b	8d cc 0a	sta $0acc			sta 	NullString
.293e	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.2940	85 04		sta $04				sta 	temp0
.2942	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2944	85 05		sta $05				sta 	1+(temp0)
.2946	38		sec				sec
.2947	60		rts				rts

;******  Return to file: string/string.asm

.2948					stringHandler:
.2948	7c 4b 29	jmp ($294b,x)			jmp 	(stringVectors,x)
.294b					stringVectors:
>294b	b4 26					.word StringChrs           ; index 0
>294d	a7 27					.word StrClone             ; index 2
>294f	1f 27					.word StringConcat         ; index 4
>2951	d6 26					.word STRCompare           ; index 6
>2953	cd 27					.word CaseString           ; index 8
>2955	12 28					.word StringSubstring      ; index 10
>2957	66 28					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2959					section_end_string:
.2959					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0b21					deTokeniseVector:
>0b21							.fill 	2
.0b23					lastCharacterClass:
>0b23							.fill 	1
.2959					ListLine:
.2959	a9 69		lda #$69			lda 	#(deTokenPrint) & $FF
.295b	8d 21 0b	sta $0b21			sta 	deTokeniseVector
.295e	a9 2a		lda #$2a			lda 	#(deTokenPrint) >> 8
.2960	8d 22 0b	sta $0b22			sta 	1+(deTokeniseVector)
.2963					Detokenise:
.2963	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.2965	8d 23 0b	sta $0b23			sta 	lastCharacterClass
.2968	a2 02		ldx #$02			ldx 	#2
.296a	20 0c 22	jsr $220c			jsr 	MInt32False
.296d	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.296f	b1 02		lda ($02),y			lda 	(codePtr),y
.2971	95 48		sta $48,x			sta 	esInt0,x
.2973	c8		iny				iny
.2974	b1 02		lda ($02),y			lda 	(codePtr),y
.2976	95 50		sta $50,x			sta 	esInt1,x
.2978	a9 84		lda #$84			lda 	#LTYLineNumber
.297a	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.297d	a9 0a		lda #$0a			lda 	#10 					; base 10
.297f	20 1b 2a	jsr $2a1b			jsr 	DTPrintInteger 			; print as integer.
.2982	a0 00		ldy #$00			ldy 	#0 						; get length
.2984	b1 04		lda ($04),y			lda 	(temp0),y 				; into X
.2986	aa		tax				tax
.2987					_DTPadOut:
.2987	a9 20		lda #$20			lda 	#" "
.2989	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.298c	e8		inx				inx
.298d	e0 06		cpx #$06			cpx 	#6
.298f	d0 f6		bne $2987			bne 	_DTPadOut
.2991	a0 03		ldy #$03			ldy 	#3 						; start position.
.2993					_DTListLoop
.2993	b1 02		lda ($02),y			lda 	(codePtr),y
.2995	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.2997	f0 58		beq $29f1			beq 	_DTIsString
.2999	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.299b	f0 7a		beq $2a17			beq 	_DTIsFloat
.299d	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.299f	f0 16		beq $29b7			beq 	_DTHexConstant
.29a1	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.29a3	d0 06		bne $29ab			bne 	_DTNotEnd
.29a5	a9 ff		lda #$ff			lda 	#255 					; print CR
.29a7	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.29aa	60		rts				rts
.29ab					_DTNotEnd:
.29ab	c9 00		cmp #$00			cmp 	#0
.29ad	30 36		bmi $29e5			bmi 	_DTIsToken
.29af	c9 40		cmp #$40			cmp 	#$40
.29b1	90 38		bcc $29eb			bcc 	_DTIsIdentifier
.29b3	a9 0a		lda #$0a			lda 	#10 					; this is the base
.29b5	d0 08		bne $29bf			bne 	_DTConstant
.29b7					_DTHexConstant:
.29b7	a9 26		lda #$26			lda 	#"&"
.29b9	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.29bc	c8		iny				iny
.29bd	a9 10		lda #$10			lda 	#16
.29bf					_DTConstant:
.29bf	48		pha				pha
.29c0	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.29c2	20 85 2a	jsr $2a85			jsr 	DTSwitchMode
.29c5	a9 86		lda #$86			lda 	#LTYConstant
.29c7	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.29ca	a2 02		ldx #$02			ldx 	#2
.29cc	8a		txa				txa
.29cd	a2 08		ldx #$08		ldx	#8
.29cf	20 f5 22	jsr $22f5		jsr	mainHandler
.29d2	aa		tax				tax
.29d3	20 f9 11	jsr $11f9			jsr 	TOSToTemp0
.29d6	68		pla				pla
.29d7	85 0c		sta $0c				sta 	tempShort
.29d9	98		tya				tya
.29da	48		pha				pha
.29db	a5 0c		lda $0c				lda 	tempShort
.29dd	20 1b 2a	jsr $2a1b			jsr 	DTPrintInteger
.29e0	68		pla				pla
.29e1	a8		tay				tay
.29e2	4c 93 29	jmp $2993			jmp 	_DTListLoop
.29e5					_DTIsToken:
.29e5	20 de 2a	jsr $2ade			jsr 	DTDecodeToken
.29e8	4c 93 29	jmp $2993			jmp 	_DTListLoop
.29eb					_DTIsIdentifier:
.29eb	20 97 2a	jsr $2a97			jsr 	DTIdentifier
.29ee	4c 93 29	jmp $2993			jmp 	_DTListLoop
.29f1					_DTIsString:
.29f1	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.29f3	20 85 2a	jsr $2a85			jsr 	DTSwitchMode
.29f6	a9 81		lda #$81			lda 	#LTYString
.29f8	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.29fb	a9 22		lda #$22			lda 	#'"'						; open quote
.29fd	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.2a00	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.2a02	8a		txa				txa
.2a03	a2 08		ldx #$08		ldx	#8
.2a05	20 f5 22	jsr $22f5		jsr	mainHandler
.2a08	aa		tax				tax
.2a09	20 f9 11	jsr $11f9			jsr 	TOSToTemp0
.2a0c	20 2d 2a	jsr $2a2d			jsr 	DTPrintLengthPrefix
.2a0f	a9 22		lda #$22			lda 	#'"'
.2a11	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.2a14	4c 93 29	jmp $2993			jmp 	_DTListLoop
.2a17					_DTIsFloat:
>2a17	db						.byte 	$DB
.2a18	4c 17 2a	jmp $2a17			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.2a1b					DTPrintInteger:
.2a1b	48		pha				pha
.2a1c	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2a1e	85 04		sta $04				sta 	temp0
.2a20	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2a22	85 05		sta $05				sta 	1+(temp0)
.2a24	68		pla				pla
.2a25	a8		tay				tay
.2a26	8a		txa				txa
.2a27	a2 0a		ldx #$0a		ldx	#10
.2a29	20 f5 22	jsr $22f5		jsr	mainHandler
.2a2c	aa		tax				tax
.2a2d					DTPrintLengthPrefix:
.2a2d	98		tya				tya
.2a2e	48		pha				pha
.2a2f	a0 00		ldy #$00			ldy 	#0
.2a31	b1 04		lda ($04),y			lda 	(temp0),y
.2a33	aa		tax				tax
.2a34	f0 0b		beq $2a41			beq 	_DTPLPExit
.2a36					_DTPLPLoop:
.2a36	c8		iny				iny
.2a37	b1 04		lda ($04),y			lda 	(temp0),y
.2a39	29 7f		and #$7f			and 	#$7F
.2a3b	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.2a3e	ca		dex				dex
.2a3f	d0 f5		bne $2a36			bne 	_DTPLPLoop
.2a41					_DTPLPExit:
.2a41	68		pla				pla
.2a42	a8		tay				tay
.2a43	60		rts				rts
.2a44					ListOutputCharacter:
.2a44	85 0c		sta $0c				sta 	tempShort
.2a46	48		pha				pha
.2a47	8a		txa				txa
.2a48	48		pha				pha
.2a49	98		tya				tya
.2a4a	48		pha				pha
.2a4b	a5 0c		lda $0c				lda 	tempShort
.2a4d	c9 20		cmp #$20			cmp 	#32
.2a4f	b0 0c		bcs $2a5d			bcs		_LOCHiBit
.2a51	09 40		ora #$40			ora 	#64
.2a53	c9 40		cmp #$40			cmp 	#64
.2a55	f0 06		beq $2a5d			beq 	_LOCHiBit
.2a57	c9 5b		cmp #$5b			cmp 	#65+26
.2a59	b0 02		bcs $2a5d			bcs 	_LOCHiBit
.2a5b	69 20		adc #$20			adc 	#32
.2a5d					_LOCHiBit:
.2a5d	20 66 2a	jsr $2a66			jsr 	_LOCCallVector
.2a60	68		pla				pla
.2a61	a8		tay				tay
.2a62	68		pla				pla
.2a63	aa		tax				tax
.2a64	68		pla				pla
.2a65					_LOCExit:
.2a65	60		rts				rts
.2a66					_LOCCallVector:
.2a66	6c 21 0b	jmp ($0b21)			jmp 	(deTokeniseVector)
.2a69					deTokenPrint:
.2a69	c9 00		cmp #$00			cmp 	#0
.2a6b	30 06		bmi $2a73			bmi 	_dtpInk
.2a6d	a2 0e		ldx #$0e		ldx	#14
.2a6f	20 aa 23	jsr $23aa		jsr	deviceHandler
.2a72	60		rts				rts
.2a73	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.2a75	f0 08		beq $2a7f			beq 	_dtpCR
.2a77	29 07		and #$07			and 	#7
.2a79	a2 06		ldx #$06		ldx	#6
.2a7b	20 aa 23	jsr $23aa		jsr	deviceHandler
.2a7e	60		rts				rts
.2a7f					_dtpCR:
.2a7f	a2 02		ldx #$02		ldx	#2
.2a81	20 aa 23	jsr $23aa		jsr	deviceHandler
.2a84	60		rts				rts
.2a85					DTSwitchMode:
.2a85	cd 23 0b	cmp $0b23			cmp 	LastCharacterClass
.2a88	f0 04		beq $2a8e			beq 	_DTSMNoChange
.2a8a	8d 23 0b	sta $0b23			sta 	LastCharacterClass
.2a8d					_DTSMExit:
.2a8d	60		rts				rts
.2a8e					_DTSMNoChange:
.2a8e	c9 01		cmp #$01			cmp 	#1
.2a90	f0 fb		beq $2a8d			beq 	_DTSMExit
.2a92	a9 20		lda #$20			lda 	#" "
.2a94	4c 44 2a	jmp $2a44			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.2a97					DTIdentifier:
.2a97	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2a99	20 85 2a	jsr $2a85			jsr 	DTSwitchMode
.2a9c	a9 87		lda #$87			lda 	#LTYIdentifier
.2a9e	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.2aa1					_DTILoop:
.2aa1	b1 02		lda ($02),y			lda 	(codePtr),y 				; output main bit of identifier.
.2aa3	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.2aa5	d0 02		bne $2aa9			bne 	_DTINotUS
.2aa7	a9 5f		lda #$5f			lda 	#"_"
.2aa9					_DTINotUS:
.2aa9	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.2aac	c8		iny				iny
.2aad	b1 02		lda ($02),y			lda 	(codePtr),y 				; until end identifier marker.
.2aaf	c9 3a		cmp #$3a			cmp 	#$3A
.2ab1	90 ee		bcc $2aa1			bcc 	_DTILoop
.2ab3	c8		iny				iny
.2ab4	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.2ab6	f0 25		beq $2add			beq 	_DTIExit 					; no postfix.
.2ab8	48		pha				pha
.2ab9	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.2abb	8d 23 0b	sta $0b23			sta 	LastCharacterClass
.2abe	a9 82		lda #$82			lda 	#LTYPunctuation
.2ac0	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.2ac3	68		pla				pla
.2ac4	c9 3b		cmp #$3b			cmp 	#$3B
.2ac6	f0 10		beq $2ad8			beq 	_DTIArray
.2ac8	4a		lsr a				lsr 	a 							; array flag in C
.2ac9	08		php				php
.2aca	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.2acc	f0 02		beq $2ad0			beq 	_DTIDollar
.2ace	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.2ad0					_DTIDollar:
.2ad0	49 24		eor #$24			eor 	#"$"
.2ad2	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.2ad5	28		plp				plp
.2ad6	90 05		bcc $2add			bcc 	_DTIExit
.2ad8					_DTIArray:
.2ad8	a9 28		lda #$28			lda 	#"("
.2ada	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.2add					_DTIExit:
.2add	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.2ade					DTDecodeToken:
.2ade	a2 00		ldx #$00			ldx 	#0 							; table number to use
.2ae0	b1 02		lda ($02),y			lda 	(codePtr),y
.2ae2	c9 84		cmp #$84			cmp 	#$84
.2ae4	b0 05		bcs $2aeb			bcs 	_DTNotShift
.2ae6	29 03		and #$03			and 	#3 							; get the shift 1..3
.2ae8	0a		asl a				asl 	a 							; put 2 x in X
.2ae9	aa		tax				tax
.2aea	c8		iny				iny
.2aeb					_DTNotShift:
.2aeb	bd d8 2e	lda $2ed8,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.2aee	85 04		sta $04				sta 	temp0 						; point into temp0
.2af0	bd d9 2e	lda $2ed9,x			lda 	TokenTableAddress+1,x
.2af3	85 05		sta $05				sta 	temp0+1
.2af5	b1 02		lda ($02),y			lda 	(codePtr),y 				; get the token value.
.2af7	c8		iny				iny 								; consume it.
.2af8	aa		tax				tax
.2af9	98		tya				tya
.2afa	48		pha				pha
.2afb					_DTFindText:
.2afb	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.2afd	f0 11		beq $2b10			beq 	_DTFoundText
.2aff	ca		dex				dex
.2b00	a0 00		ldy #$00			ldy 	#0
.2b02	38		sec				sec
.2b03	b1 04		lda ($04),y			lda 	(temp0),y
.2b05	65 04		adc $04				adc 	temp0
.2b07	85 04		sta $04				sta 	temp0
.2b09	90 f0		bcc $2afb			bcc 	_DTFindText
.2b0b	e6 05		inc $05				inc 	temp0+1
.2b0d	4c fb 2a	jmp $2afb			jmp 	_DTFindText
.2b10					_DTFoundText:
.2b10	a0 01		ldy #$01			ldy 	#1 							; get first character
.2b12	b1 04		lda ($04),y			lda 	(temp0),y
.2b14	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2b16	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.2b18	90 11		bcc $2b2b			bcc 	_DTIsPunctuation
.2b1a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2b1c	b0 0d		bcs $2b2b			bcs 	_DTIsPunctuation
.2b1e	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2b20	20 85 2a	jsr $2a85			jsr 	DTSwitchMode
.2b23	a9 83		lda #$83			lda 	#LTYKeyword
.2b25	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.2b28	4c 35 2b	jmp $2b35			jmp 	_DTPrint
.2b2b					_DTIsPunctuation:
.2b2b	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2b2d	20 85 2a	jsr $2a85			jsr 	DTSwitchMode
.2b30	a9 82		lda #$82			lda 	#LTYPunctuation
.2b32	20 44 2a	jsr $2a44			jsr 	ListOutputCharacter
.2b35					_DTPrint:
.2b35	20 2d 2a	jsr $2a2d			jsr 	DTPrintLengthPrefix 		; print it out.
.2b38	a0 00		ldy #$00			ldy 	#0 							; get last character
.2b3a	b1 04		lda ($04),y			lda 	(temp0),y
.2b3c	a8		tay				tay
.2b3d	b1 04		lda ($04),y			lda 	(temp0),y
.2b3f	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2b41	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.2b43	90 04		bcc $2b49			bcc 	_DTIsNowPunctuation
.2b45	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2b47	90 05		bcc $2b4e			bcc 	_DTPExit
.2b49					_DTIsNowPunctuation:
.2b49	a9 01		lda #$01			lda 	#1
.2b4b	8d 23 0b	sta $0b23			sta		LastCharacterClass
.2b4e					_DTPExit:
.2b4e	68		pla				pla
.2b4f	a8		tay				tay
.2b50	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0b24					currentSet:
>0b24							.fill 	1
.2b51					TokenSearch:
.2b51	8a		txa				txa
.2b52	48		pha				pha
.2b53	98		tya				tya
.2b54	48		pha				pha
.2b55	a9 00		lda #$00			lda 	#0
.2b57	8d 24 0b	sta $0b24			sta 	currentSet
.2b5a					_TSLoop:
.2b5a	ad 24 0b	lda $0b24			lda 	currentSet 					; 2 x currentset in X
.2b5d	0a		asl a				asl 	a
.2b5e	aa		tax				tax
.2b5f	bd d8 2e	lda $2ed8,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.2b62	85 04		sta $04				sta 	temp0
.2b64	bd d9 2e	lda $2ed9,x			lda 	TokenTableAddress+1,x
.2b67	85 05		sta $05				sta 	temp0+1
.2b69	20 90 2b	jsr $2b90			jsr 	TokenSearchOne 				; search one table
.2b6c	b0 0d		bcs $2b7b			bcs 	_TSFound 					; found a token.
.2b6e	ee 24 0b	inc $0b24			inc 	currentSet 					; next set
.2b71	ad 24 0b	lda $0b24			lda 	currentSet
.2b74	c9 04		cmp #$04			cmp 	#4
.2b76	d0 e2		bne $2b5a			bne 	_TSLoop 					; back if not done all four.
.2b78	18		clc				clc 								; clear carry and exit
.2b79	90 10		bcc $2b8b			bcc 	_TSExit
.2b7b					_TSFound:
.2b7b	48		pha				pha 								; save token
.2b7c	ad 24 0b	lda $0b24			lda 	currentSet					; if set zero no shift
.2b7f	f0 05		beq $2b86			beq 	_TSNoShift
.2b81	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.2b83	20 2e 2d	jsr $2d2e			jsr 	TokenWrite
.2b86					_TSNoShift:
.2b86	68		pla				pla 								; get token back
.2b87	20 2e 2d	jsr $2d2e			jsr 	TokenWrite 					; write it
.2b8a	38		sec				sec 								; carry set indicating success
.2b8b					_TSExit:
.2b8b	68		pla				pla
.2b8c	a8		tay				tay
.2b8d	68		pla				pla
.2b8e	aa		tax				tax
.2b8f	60		rts				rts
.2b90					TokenSearchOne:
.2b90	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.2b92					_TSOLoop:
.2b92	a0 00		ldy #$00			ldy 	#0
.2b94	b1 04		lda ($04),y			lda 	(temp0),y 					; get length of token
.2b96	f0 26		beq $2bbe			beq 	_TSOFail 					; if zero, end of table
.2b98	cd cd 0a	cmp $0acd			cmp 	convertBuffer 				; length is the same, compare the text matches.
.2b9b	f0 11		beq $2bae			beq 	_TSOCheckText
.2b9d					_TSONext:
.2b9d	e8		inx				inx 								; bump token
.2b9e	a0 00		ldy #$00			ldy 	#0							; get length
.2ba0	b1 04		lda ($04),y			lda 	(temp0),y
.2ba2	38		sec				sec
.2ba3	65 04		adc $04				adc 	temp0 						; add to temp0 + 1
.2ba5	85 04		sta $04				sta 	temp0
.2ba7	90 e9		bcc $2b92			bcc 	_TSOLoop
.2ba9	e6 05		inc $05				inc 	temp0+1
.2bab	4c 92 2b	jmp $2b92			jmp 	_TSOLoop
.2bae					_TSOCheckText:
.2bae	a8		tay				tay 								; compare length downto 1.
.2baf					_TSOCheckLoop:
.2baf	b1 04		lda ($04),y			lda 	(temp0),y 					; use EOR to compare
.2bb1	59 cd 0a	eor $0acd,y			eor 	convertBuffer,y
.2bb4	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.2bb6	d0 e5		bne $2b9d			bne 	_TSONext 					; different goto next.
.2bb8	88		dey				dey 								; do all
.2bb9	d0 f4		bne $2baf			bne 	_TSOCheckLoop
.2bbb	8a		txa				txa 								; return token in A and carry set
.2bbc	38		sec				sec
.2bbd	60		rts				rts
.2bbe					_TSOFail:
.2bbe	18		clc				clc
.2bbf	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.2bc0					TokTest:
.2bc0	a9 dd		lda #$dd			lda 	#(TokenText1) & $FF
.2bc2	85 02		sta $02				sta 	codePtr
.2bc4	a9 2b		lda #$2b			lda 	#(TokenText1) >> 8
.2bc6	85 03		sta $03				sta 	1+(codePtr)
.2bc8	20 d4 2c	jsr $2cd4				jsr 	Tokenise
.2bcb	a2 00		ldx #$00	TokStop:	ldx 	#0
.2bcd	bd 6f 2c	lda $2c6f,x	_TokCheck:	lda 	TokenBytes1,x
.2bd0	dd 25 0b	cmp $0b25,x				cmp 	tokenBuffer,x
.2bd3	d0 fe		bne $2bd3	_TokFail:	bne 	_TokFail
.2bd5	e8		inx					inx
.2bd6	c9 80		cmp #$80				cmp 	#$80
.2bd8	d0 f3		bne $2bcd				bne 	_TokCheck
.2bda	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.2bdd					TokenText1:
>2bdd	90 34 39 36 26 31 32 29			.byte	144,$34,$39,$36,$26,$31,$32,$29,$47,$4f,$53,$55,$42,$20,$32,$33,$32,$22,$6f,$73,$67,$22,$68,$63,$23,$28,$38,$32,$39,$20,$6a,$6e,$6e,$23,$37,$38,$37,$20,$6d,$64,$6d,$24,$28,$3e,$3d,$26,$32,$35,$63,$20,$34,$39,$20,$55,$50,$50,$45,$52,$24,$28,$26,$32,$38,$63,$20,$32,$38,$33,$22,$65,$6f,$22,$53,$54,$4f,$50,$26,$36,$33,$22,$68,$70,$64,$6d,$70,$22,$32,$33,$20,$33,$33,$32,$20,$65,$71,$67,$73,$6a,$24,$28,$22,$73,$72,$72,$6c,$61,$62,$22,$64,$6b,$6e,$75,$62,$61,$20,$61,$6d,$24,$22,$67,$75,$71,$22,$4d,$49,$44,$24,$28,$70,$6c,$23,$54,$49,$4d,$45,$52,$28,$26,$63,$66,$22,$6b,$6f,$6e,$22,$FF
>2be5	47 4f 53 55 42 20 32 33 32 22 6f 73 67 22 68 63
>2bf5	23 28 38 32 39 20 6a 6e 6e 23 37 38 37 20 6d 64
>2c05	6d 24 28 3e 3d 26 32 35 63 20 34 39 20 55 50 50
>2c15	45 52 24 28 26 32 38 63 20 32 38 33 22 65 6f 22
>2c25	53 54 4f 50 26 36 33 22 68 70 64 6d 70 22 32 33
>2c35	20 33 33 32 20 65 71 67 73 6a 24 28 22 73 72 72
>2c45	6c 61 62 22 64 6b 6e 75 62 61 20 61 6d 24 22 67
>2c55	75 71 22 4d 49 44 24 28 70 6c 23 54 49 4d 45 52
>2c65	28 26 63 66 22 6b 6f 6e 22 ff
.2c6f					TokenBytes1:
>2c6f	47 70 c5 52 c6 d7 43 68			.byte	$47,$70,$c5,$52,$c6,$d7,$43,$68,$85,$03,$6f,$73,$67,$08,$03,$3f,$4c,$7d,$0a,$0e,$0e,$3e,$4c,$53,$0d,$04,$0d,$3d,$89,$c5,$49,$5c,$71,$c1,$c5,$4a,$4c,$44,$5b,$85,$02,$65,$6f,$81,$8f,$c5,$41,$63,$85,$05,$68,$70,$64,$6d,$70,$57,$45,$4c,$05,$11,$07,$13,$0a,$3d,$85,$06,$73,$72,$72,$6c,$61,$62,$04,$0b,$0e,$15,$02,$01,$3a,$01,$0d,$3c,$85,$03,$67,$75,$71,$b6,$10,$0c,$3e,$af,$c5,$43,$4f,$85,$03,$6b,$6f,$6e,$80
>2c77	85 03 6f 73 67 08 03 3f 4c 7d 0a 0e 0e 3e 4c 53
>2c87	0d 04 0d 3d 89 c5 49 5c 71 c1 c5 4a 4c 44 5b 85
>2c97	02 65 6f 81 8f c5 41 63 85 05 68 70 64 6d 70 57
>2ca7	45 4c 05 11 07 13 0a 3d 85 06 73 72 72 6c 61 62
>2cb7	04 0b 0e 15 02 01 3a 01 0d 3c 85 03 67 75 71 b6
>2cc7	10 0c 3e af c5 43 4f 85 03 6b 6f 6e 80

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0b25					tokenBuffer:
>0b25							.fill 	256
.0c25					tokenBufferIndex:
>0c25							.fill 	1
.2cd4					Tokenise:
.2cd4	20 47 2d	jsr $2d47			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.2cd7					TokeniseASCIIZ:
.2cd7	20 58 2d	jsr $2d58			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.2cda	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.2cdc	8d 25 0c	sta $0c25			sta 	tokenBufferIndex
.2cdf	a8		tay				tay 								; start pointer
.2ce0					_TokLoop:
.2ce0	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next character
.2ce2	f0 46		beq $2d2a			beq 	_TokExit 					; if zero, then exit.
.2ce4	c8		iny				iny 								; skip over spaces.
.2ce5	c9 20		cmp #$20			cmp 	#" "
.2ce7	f0 f7		beq $2ce0			beq 	_TokLoop
.2ce9	88		dey				dey 								; point back to character.
.2cea	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.2cec	f0 18		beq $2d06			beq 	_TokHexConst
.2cee	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.2cf0	f0 23		beq $2d15			beq 	_TokQString
.2cf2	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.2cf4	b0 26		bcs $2d1c			bcs 	_TokPunctuation
.2cf6	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.2cf8	b0 29		bcs $2d23			bcs 	_TokIdentifier
.2cfa	c9 3a		cmp #$3a			cmp 	#"9"+1
.2cfc	b0 1e		bcs $2d1c			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.2cfe	c9 30		cmp #$30			cmp 	#"0"
.2d00	90 1a		bcc $2d1c			bcc 	_TokPunctuation 			; < 0, punctuation.
.2d02	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.2d04	d0 08		bne $2d0e			bne 	_TokConst
.2d06					_TokHexConst:
.2d06	c8		iny				iny									; consume token.
.2d07	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.2d09	20 2e 2d	jsr $2d2e			jsr 	TokenWrite
.2d0c	a9 10		lda #$10			lda 	#16
.2d0e					_TokConst:
.2d0e	20 16 2e	jsr $2e16			jsr 	TokeniseInteger
.2d11	b0 cd		bcs $2ce0			bcs 	_TokLoop
.2d13	90 17		bcc $2d2c			bcc 	_TokFail
.2d15					_TokQString:
.2d15	20 ac 2e	jsr $2eac			jsr 	TokeniseString
.2d18	b0 c6		bcs $2ce0			bcs 	_TokLoop
.2d1a	90 10		bcc $2d2c			bcc 	_TokFail
.2d1c					_TokPunctuation:
.2d1c	20 8b 2e	jsr $2e8b			jsr 	TokenisePunctuation
.2d1f	b0 bf		bcs $2ce0			bcs 	_TokLoop
.2d21	90 09		bcc $2d2c			bcc 	_TokFail
.2d23					_TokIdentifier:
.2d23	20 87 2d	jsr $2d87			jsr 	TokeniseIdentifier
.2d26	b0 b8		bcs $2ce0			bcs 	_TokLoop
.2d28	90 02		bcc $2d2c			bcc 	_TokFail
.2d2a					_TokExit:
.2d2a	38		sec				sec
.2d2b	60		rts				rts
.2d2c					_TokFail:
.2d2c	18		clc				clc
.2d2d	60		rts				rts
.2d2e					TokenWrite:
.2d2e	85 0c		sta $0c				sta 	tempShort 					; save XA
.2d30	48		pha				pha
.2d31	8a		txa				txa
.2d32	48		pha				pha
.2d33	a5 0c		lda $0c				lda 	tempShort
.2d35	ae 25 0c	ldx $0c25			ldx 	tokenBufferIndex 			; geet index
.2d38	9d 25 0b	sta $0b25,x			sta 	tokenBuffer,x 				; write byte to buffer
.2d3b	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.2d3d	9d 26 0b	sta $0b26,x			sta 	tokenBuffer+1,x
.2d40	ee 25 0c	inc $0c25			inc 	tokenBufferIndex 			; bump index
.2d43	68		pla				pla
.2d44	aa		tax				tax
.2d45	68		pla				pla
.2d46	60		rts				rts
.2d47					TokeniseMakeASCIIZ:
.2d47	a0 00		ldy #$00			ldy 	#0							; get length of string.
.2d49	b1 02		lda ($02),y			lda 	(codePtr),y
.2d4b	a8		tay				tay
.2d4c	c8		iny				iny 								; +1, the NULL goes here.
.2d4d	a9 00		lda #$00			lda 	#0
.2d4f	91 02		sta ($02),y			sta 	(codePtr),y 				; write the trailing NULL.
.2d51	e6 02		inc $02				inc 	codePtr 					; bump the pointer.
.2d53	d0 02		bne $2d57			bne 	_TMKAExit
.2d55	e6 03		inc $03				inc 	codePtr+1
.2d57					_TMKAExit:
.2d57	60		rts				rts
.2d58					TokeniseFixCase:
.2d58	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.2d5a	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.2d5c					_TFCFlipQ:
.2d5c	8a		txa				txa
.2d5d	49 01		eor #$01			eor 	#1
.2d5f	aa		tax				tax
.2d60					_TFCLoop:
.2d60	b1 02		lda ($02),y			lda 	(codePtr),y 				; get character
.2d62	f0 22		beq $2d86			beq 	_TFCExit 					; if zero exit.
.2d64	c9 20		cmp #$20			cmp 	#32 						; if control
.2d66	90 1a		bcc $2d82			bcc 	_TFCControl
.2d68	c8		iny				iny 								; preconsume
.2d69	c9 22		cmp #$22			cmp 	#'"'
.2d6b	f0 ef		beq $2d5c			beq 	_TFCFlipQ
.2d6d	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.2d6f	90 ef		bcc $2d60			bcc 	_TFCLoop
.2d71	c9 7b		cmp #$7b			cmp 	#"z"+1
.2d73	b0 eb		bcs $2d60			bcs 	_TFCLoop
.2d75	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.2d77	d0 e7		bne $2d60			bne 	_TFCLoop
.2d79	88		dey				dey
.2d7a	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.2d7c					_TFCWrite:
.2d7c	91 02		sta ($02),y			sta 	(codePtr),y
.2d7e	c8		iny				iny
.2d7f	4c 60 2d	jmp $2d60			jmp 	_TFCLoop
.2d82					_TFCControl:
.2d82	a9 20		lda #$20			lda 	#" "
.2d84	d0 f6		bne $2d7c			bne 	_TFCWrite
.2d86					_TFCExit:
.2d86	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.2d87					TokeniseIdentifier:
.2d87	a2 00		ldx #$00			ldx 	#0
.2d89					_TICopyID:
.2d89	b1 02		lda ($02),y			lda 	(codePtr),y					; get characters
.2d8b	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.2d8d	f0 16		beq $2da5			beq 	_TICopyUnderscore
.2d8f	c9 2e		cmp #$2e			cmp 	#"."
.2d91	f0 14		beq $2da7			beq 	_TICopyIn
.2d93	c9 30		cmp #$30			cmp 	#"0"
.2d95	90 1b		bcc $2db2			bcc 	_TIEndCopy
.2d97	c9 3a		cmp #$3a			cmp 	#"9"+1
.2d99	90 0c		bcc $2da7			bcc 	_TICopyIn
.2d9b	c9 41		cmp #$41			cmp 	#"A"
.2d9d	90 13		bcc $2db2			bcc 	_TIEndCopy
.2d9f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2da1	b0 0f		bcs $2db2			bcs		_TIEndCopy
.2da3	90 02		bcc $2da7			bcc 	_TICopyIn
.2da5					_TICopyUnderScore:
.2da5	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.2da7					_TICopyIn:
.2da7	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.2da8	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2dab	8e cd 0a	stx $0acd			stx 	convertBuffer
.2dae	c8		iny				iny 								; next character
.2daf	4c 89 2d	jmp $2d89			jmp 	_TICopyID 					; loop round
.2db2					_TIEndCopy:
.2db2	a9 24		lda #$24			lda 	#"$"
.2db4	20 09 2e	jsr $2e09			jsr 	TIDCheckCopy
.2db7	a9 23		lda #$23			lda 	#"#"
.2db9	20 09 2e	jsr $2e09			jsr 	TIDCheckCopy
.2dbc	a9 28		lda #$28			lda 	#"("
.2dbe	20 09 2e	jsr $2e09			jsr 	TIDCheckCopy
.2dc1	20 51 2b	jsr $2b51			jsr 	TokenSearch 				; is it a token
.2dc4	b0 41		bcs $2e07			bcs 	_TIExit 					; if so, then exit.
.2dc6	98		tya				tya
.2dc7	48		pha				pha
.2dc8	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.2dca	ae cd 0a	ldx $0acd			ldx 	convertBuffer 				; is last character (
.2dcd	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x
.2dd0	c9 28		cmp #$28			cmp 	#"("
.2dd2	d0 02		bne $2dd6			bne 	_TINotArray
.2dd4	ca		dex				dex 								; yes, remove it and convert to array.
.2dd5	c8		iny				iny
.2dd6					_TINotArray:
.2dd6	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x 			; check for $
.2dd9	c9 24		cmp #$24			cmp 	#"$"
.2ddb	d0 03		bne $2de0			bne 	_TINotString
.2ddd	ca		dex				dex
.2dde	c8		iny				iny
.2ddf	c8		iny				iny
.2de0					_TINotString:
.2de0	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x 			; check for #
.2de3	c9 23		cmp #$23			cmp 	#"#"
.2de5	d0 05		bne $2dec			bne 	_TINotFloat
.2de7	ca		dex				dex
.2de8	c8		iny				iny
.2de9	c8		iny				iny
.2dea	c8		iny				iny
.2deb	c8		iny				iny
.2dec					_TINotFloat:
.2dec	e8		inx				inx 								; write end marker for identifier.
.2ded	98		tya				tya
.2dee	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2df1	8e cd 0a	stx $0acd			stx 	convertBuffer 				; update length.
.2df4	a2 01		ldx #$01			ldx 	#1
.2df6					_TIOutput:
.2df6	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x
.2df9	29 3f		and #$3f			and 	#$3F
.2dfb	48		pha				pha
.2dfc	20 2e 2d	jsr $2d2e			jsr 	TokenWrite
.2dff	e8		inx				inx
.2e00	68		pla				pla
.2e01	c9 3a		cmp #$3a			cmp 	#$3A
.2e03	90 f1		bcc $2df6			bcc 	_TIOutput
.2e05	68		pla				pla
.2e06	a8		tay				tay
.2e07					_TIExit:
.2e07	38		sec				sec 								; this can't fail.
.2e08	60		rts				rts
.2e09					TIDCheckCopy:
.2e09	d1 02		cmp ($02),y			cmp 	(codePtr),y
.2e0b	d0 08		bne $2e15			bne 	_TIDCCExit
.2e0d	e8		inx				inx
.2e0e	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2e11	8e cd 0a	stx $0acd			stx 	convertBuffer
.2e14	c8		iny				iny
.2e15					_TIDCCExit:
.2e15	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.2e16					TokeniseInteger:
.2e16	85 06		sta $06				sta 	temp1 						; save base
.2e18	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.2e1a	8e cd 0a	stx $0acd			stx 	convertBuffer
.2e1d					_TIGetChars:
.2e1d	b1 02		lda ($02),y			lda 	(codePtr),y 				; check character is numeric
.2e1f	c9 30		cmp #$30			cmp 	#"0"
.2e21	90 1f		bcc $2e42			bcc 	_TIEndGet
.2e23	c9 3a		cmp #$3a			cmp 	#"9"+1
.2e25	90 10		bcc $2e37			bcc 	_TIHaveChar
.2e27	a5 06		lda $06				lda 	temp1 						; fail if not hex mode
.2e29	c9 0a		cmp #$0a			cmp 	#10
.2e2b	f0 15		beq $2e42			beq 	_TIEndGet
.2e2d	b1 02		lda ($02),y			lda 	(codePtr),y 				; check legitimate hex.
.2e2f	c9 41		cmp #$41			cmp 	#"A"
.2e31	90 0f		bcc $2e42			bcc 	_TIEndGet
.2e33	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2e35	b0 0b		bcs $2e42			bcs 	_TIEndGet
.2e37					_TIHaveChar:
.2e37	e8		inx				inx 								; write into buffer.
.2e38	8e cd 0a	stx $0acd			stx 	convertBuffer
.2e3b	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2e3e	c8		iny				iny 								; next char
.2e3f	4c 1d 2e	jmp $2e1d			jmp 	_TIGetChars
.2e42					_TIEndGet:
.2e42	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.2e44	f0 1c		beq $2e62			beq 	_TIFail
.2e46	98		tya				tya
.2e47	48		pha				pha
.2e48	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2e4a	85 04		sta $04				sta 	temp0
.2e4c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2e4e	85 05		sta $05				sta 	1+(temp0)
.2e50	a9 00		lda #$00			lda 	#0 							; stack 0
.2e52	a4 06		ldy $06				ldy 	temp1 						; base Y
.2e54	a2 0e		ldx #$0e		ldx	#14
.2e56	20 f5 22	jsr $22f5		jsr	mainHandler
.2e59	68		pla				pla
.2e5a	a8		tay				tay
.2e5b	90 05		bcc $2e62			bcc 	_TIFail 					; didn't convert.
.2e5d	20 64 2e	jsr $2e64			jsr 	TIRecursiveOut 				; recursive output ?
.2e60	38		sec				sec
.2e61	60		rts				rts
.2e62					_TIFail:
.2e62	18		clc				clc
.2e63	60		rts				rts
.2e64					TIRecursiveOut:
.2e64	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.2e66	29 3f		and #$3f			and 	#$3F
.2e68	09 40		ora #$40			ora 	#$40
.2e6a	48		pha				pha
.2e6b	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.2e6d	29 c0		and #$c0			and 	#$C0
.2e6f	05 50		ora $50				ora 	esInt1
.2e71	05 58		ora $58				ora 	esInt2
.2e73	05 60		ora $60				ora 	esInt3
.2e75	f0 10		beq $2e87			beq 	_TIRONoRecursion
.2e77	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.2e79					_TIROShift:
.2e79	46 60		lsr $60				lsr 	esInt3
.2e7b	66 58		ror $58				ror 	esInt2
.2e7d	66 50		ror $50				ror 	esInt1
.2e7f	66 48		ror $48				ror 	esInt0
.2e81	ca		dex				dex
.2e82	d0 f5		bne $2e79			bne 	_TIROShift
.2e84	20 64 2e	jsr $2e64			jsr 	TIRecursiveOut 				; call recursively
.2e87					_TIRONoRecursion:
.2e87	68		pla				pla 								; pull the old bit.
.2e88	4c 2e 2d	jmp $2d2e			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.2e8b					TokenisePunctuation:
.2e8b	b1 02		lda ($02),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.2e8d	8d ce 0a	sta $0ace			sta 	convertBuffer+1
.2e90	c8		iny				iny
.2e91	b1 02		lda ($02),y			lda 	(codePtr),y
.2e93	8d cf 0a	sta $0acf			sta 	convertBuffer+2
.2e96	c8		iny				iny 								; Y is +2
.2e97	a9 02		lda #$02			lda 	#2 							; 2 character string.
.2e99	8d cd 0a	sta $0acd			sta 	convertBuffer
.2e9c	20 51 2b	jsr $2b51			jsr 	TokenSearch 				; search for that token.
.2e9f	b0 0a		bcs $2eab			bcs 	_TIFound
.2ea1	ce cd 0a	dec $0acd			dec 	convertBuffer 				; make it a 1 character string
.2ea4	88		dey				dey 								; Y is now +1
.2ea5	20 51 2b	jsr $2b51			jsr 	TokenSearch 				; search for that token.
.2ea8	b0 01		bcs $2eab			bcs 	_TIFound
.2eaa	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.2eab					_TIFound:
.2eab	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.2eac					TokeniseString:
.2eac	c8		iny				iny 								; skip opening quote
.2ead	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.2eaf	84 04		sty $04				sty 	temp0 						; save start.
.2eb1					_TSGetLength:
.2eb1	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next
.2eb3	f0 21		beq $2ed6			beq 	_TSFail						; end of line, fail
.2eb5	c8		iny				iny
.2eb6	e8		inx				inx
.2eb7	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.2eb9	d0 f6		bne $2eb1			bne 	_TSGetLength
.2ebb	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.2ebd	20 2e 2d	jsr $2d2e			jsr 	TokenWrite
.2ec0	8a		txa				txa 								; output length
.2ec1	20 2e 2d	jsr $2d2e			jsr 	TokenWrite
.2ec4	a4 04		ldy $04				ldy 	temp0 						; get original position
.2ec6	e0 00		cpx #$00			cpx 	#0 							; check ended
.2ec8	f0 09		beq $2ed3			beq 	_TSExit
.2eca					_TSOutput:
.2eca	b1 02		lda ($02),y			lda 	(codePtr),y					; output character
.2ecc	20 2e 2d	jsr $2d2e			jsr 	TokenWrite
.2ecf	c8		iny				iny
.2ed0	ca		dex				dex
.2ed1	d0 f7		bne $2eca			bne 	_TSOutput
.2ed3					_TSExit:
.2ed3	c8		iny				iny 								; skip ending quote
.2ed4	38		sec				sec 								; return CS.
.2ed5	60		rts				rts
.2ed6					_TSFail:
.2ed6	18		clc				clc
.2ed7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.2ed8					TokenTableAddress:
>2ed8	e0 2e						.word 	Group0Text
>2eda	91 30						.word 	Group1Text
>2edc	c5 30						.word 	Group2Text
>2ede	d2 30						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.2ee0					Group0Text:
>2ee0	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>2ee4	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>2ee7	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>2eeb	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>2eee	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>2ef1	01 be					.byte $01,$be                          ; $8b >
>2ef3	01 bc					.byte $01,$bc                          ; $8c <
>2ef5	01 bd					.byte $01,$bd                          ; $8d =
>2ef7	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>2efa	01 ab					.byte $01,$ab                          ; $8f +
>2efc	01 ad					.byte $01,$ad                          ; $90 -
>2efe	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>2f01	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>2f04	01 aa					.byte $01,$aa                          ; $93 *
>2f06	01 af					.byte $01,$af                          ; $94 /
>2f08	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>2f0c	01 de					.byte $01,$de                          ; $96 ^
>2f0e	01 a1					.byte $01,$a1                          ; $97 !
>2f10	01 bf					.byte $01,$bf                          ; $98 ?
>2f12	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>2f19	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>2f1f	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>2f23	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>2f26	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>2f2e	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>2f34	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>2f39	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>2f3e	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>2f43	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>2f49	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>2f51	01 a8					.byte $01,$a8                          ; $a4 (
>2f53	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>2f58	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>2f5d	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>2f62	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>2f6a	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>2f6f	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>2f74	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>2f7a	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>2f7f	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>2f84	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>2f89	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>2f90	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>2f97	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>2f9c	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>2fa3	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>2faa	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>2fb0	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>2fb7	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>2fbd	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>2fc5	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>2fcb	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>2fd0	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>2fd6	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>2fdc	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>2fe2	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>2fe7	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>2fec	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>2ff3	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>2ffa	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3002	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>300a	01 c0					.byte $01,$c0                          ; $c3 @
>300c	01 fe					.byte $01,$fe                          ; $c4 ~
>300e	01 a6					.byte $01,$a6                          ; $c5 &
>3010	01 a9					.byte $01,$a9                          ; $c6 )
>3012	01 ba					.byte $01,$ba                          ; $c7 :
>3014	01 ac					.byte $01,$ac                          ; $c8 ,
>3016	01 bb					.byte $01,$bb                          ; $c9 ;
>3018	01 a7					.byte $01,$a7                          ; $ca '
>301a	02 54 cf				.byte $02,$54,$cf                      ; $cb to
>301d	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cc step
>3022	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $cd proc
>3027	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $ce local
>302d	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $cf dim
>3031	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d0 rem
>3035	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d1 let
>3039	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d2 input
>303f	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d3 else
>3044	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d4 vdu
>3048	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d5 print
>304e	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d6 goto
>3053	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $d7 gosub
>3059	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $d8 return
>3060	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3065	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $da assert
>306c	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $db poke
>3071	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $dc doke
>3076	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $dd loke
>307b	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $de ink
>307f	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $df paper
>3085	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e0 cls
>3089	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e1 locate
>3090	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3091					Group1Text:
>3091	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3097	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>309c	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>30a1	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>30a6	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>30aa	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>30ae	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>30b3	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>30bb	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>30bf	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>30c4	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.30c5					Group2Text:
>30c5	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>30cb	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>30d1	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.30d2					Group3Text:
>30d2	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>30d9	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>30e0	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.30e1					tokeniserHandler:
.30e1	7c e4 30	jmp ($30e4,x)			jmp 	(tokeniserVectors,x)
.30e4					tokeniserVectors:
>30e4	63 29					.word Detokenise           ; index 0
>30e6	59 29					.word ListLine             ; index 2

;******  Return to file: basic.asm

.30e8					section_end_tokeniser:
.30e8					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0c26					varHash:
>0c26							.fill	1
.0c27					varType:
>0c27							.fill 	1
.0c28					varEnd:
>0c28							.fill 	1
.007c					hashList:
>007c							.fill 	2
.30e8					AccessVariable:
.30e8	aa		tax				tax 								; stack in X
.30e9	c8		iny				iny
.30ea	b1 02		lda ($02),y			lda 	(codePtr),y
.30ec	88		dey				dey
.30ed	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.30ef	d0 15		bne $3106			bne 	_AVLong
.30f1	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.30f3	38		sec				sec 	 							; make it 0-25
.30f4	e9 01		sbc #$01			sbc 	#1
.30f6	0a		asl a				asl 	a 							; x 4 is LSB of address
.30f7	0a		asl a				asl 	a
.30f8	95 48		sta $48,x			sta 	esInt0,x
.30fa	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.30fc	95 50		sta $50,x			sta 	esInt1,x
.30fe	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.3100	95 40		sta $40,x			sta 	esType,x
.3102	c8		iny				iny 								; skip over the variable reference in the code.
.3103	c8		iny				iny
.3104	8a		txa				txa 								; stack in A to return.
.3105	60		rts				rts
.3106					_AVLong:
.3106	8a		txa				txa
.3107	48		pha				pha
.3108	20 4f 31	jsr $314f			jsr 	AccessSetup 				; set up the basic stuff.
.310b	20 49 33	jsr $3349			jsr 	FindVariable 				; does the variable exist already
.310e	b0 0e		bcs $311e			bcs 	_AVFound
.3110	ad 27 0c	lda $0c27			lda 	varType 					; is the variable type an array
.3113	4a		lsr a				lsr 	a
.3114	90 05		bcc $311b			bcc 	_AVCanCreate
.3116	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3118	20 c1 23	jsr $23c1		jsr	errorHandler
.311b					_AVCanCreate:
.311b	20 02 32	jsr $3202			jsr 	CreateVariable 				; no, create it.
.311e					_AVFound:
.311e	68		pla				pla
.311f	aa		tax				tax
.3120	18		clc				clc 								; copy temp0 (variable record address)
.3121	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.3123	69 05		adc #$05			adc 	#5
.3125	95 48		sta $48,x			sta 	esInt0,x
.3127	a5 05		lda $05				lda 	temp0+1
.3129	69 00		adc #$00			adc 	#0
.312b	95 50		sta $50,x			sta 	esInt1,x
.312d	a9 00		lda #$00			lda 	#0
.312f	95 58		sta $58,x			sta 	esInt2,x
.3131	95 60		sta $60,x			sta 	esInt3,x
.3133	ac 27 0c	ldy $0c27			ldy 	varType 					; get the type ID from the type.
.3136	b9 0f 31	lda $310f,y			lda 	_AVTypeTable-$3A,y
.3139	95 40		sta $40,x			sta 	esType,x
.313b	ac 28 0c	ldy $0c28			ldy 	varEnd 						; restore Y
.313e	ad 27 0c	lda $0c27			lda 	VarType 					; get variable type, put LSB into C
.3141	4a		lsr a				lsr 	a
.3142	90 03		bcc $3147			bcc 	_AVNotArray
.3144	20 8c 31	jsr $318c			jsr 	AccessArray 				; array lookup. if LSB was set.
.3147					_AVNotArray:
.3147	8a		txa				txa 								; return stack in A and return
.3148	60		rts				rts
.3149					_AVTypeTable:
>3149	80 80						.byte 	$80,$80						; integer
>314b	c0 c0						.byte 	$C0,$C0 					; string
>314d	81 81						.byte 	$81,$81 					; float
.314f					AccessSetup:
.314f	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3151	8d 26 0c	sta $0c26			sta 	varHash
.3154	98		tya				tya
.3155	48		pha				pha
.3156	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3158	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.315a	b0 0b		bcs $3167			bcs 	_ASComplete
.315c	18		clc				clc 								; add to the hash. Might improve this.
.315d	6d 26 0c	adc $0c26			adc 	varHash
.3160	8d 26 0c	sta $0c26			sta 	varHash
.3163	c8		iny				iny 								; next character
.3164	4c 56 31	jmp $3156			jmp 	_ASLoop
.3167					_ASComplete:
.3167	8d 27 0c	sta $0c27			sta 	varType 					; save variable type byte
.316a	c8		iny				iny
.316b	8c 28 0c	sty $0c28			sty 	varEnd 						; save the ending position.
.316e	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.316f	e9 3a		sbc #$3a			sbc 	#$3A
.3171	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3172	0a		asl a				asl 	a
.3173	0a		asl a				asl 	a
.3174	0a		asl a				asl 	a 							; 2 bytes/word
.3175	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.3177	ad 26 0c	lda $0c26			lda 	varHash 					; get hash
.317a	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.317c	0a		asl a				asl  	a 							; x 2 (for word) and CC
.317d	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.317f	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3181	85 7c		sta $7c				sta 	hashList
.3183	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3185	69 00		adc #$00			adc 	#0
.3187	85 7d		sta $7d				sta 	hashList+1
.3189	68		pla				pla
.318a	a8		tay				tay
.318b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.318c					AccessArray:
.318c	e8		inx				inx
.318d	8a		txa				txa
.318e	a2 04		ldx #$04		ldx	#4
.3190	20 f5 22	jsr $22f5		jsr	mainHandler
.3193	aa		tax				tax
.3194	ca		dex				dex
.3195	a2 00		ldx #$00		ldx	#0
.3197	20 f5 22	jsr $22f5		jsr	mainHandler
.319a	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.319c	15 59		ora $59,x			ora 	esInt2+1,x
.319e	d0 33		bne $31d3			bne 	_AABadIndex
.31a0	98		tya				tya
.31a1	48		pha				pha
.31a2	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.31a4	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.31a6	b5 50		lda $50,x			lda 	esInt1,x
.31a8	85 05		sta $05				sta 	temp0+1
.31aa	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.31ac	b5 49		lda $49,x			lda 	esInt0+1,x
.31ae	d1 04		cmp ($04),y			cmp 	(temp0),y
.31b0	c8		iny				iny
.31b1	b5 51		lda $51,x			lda 	esInt1+1,x
.31b3	f1 04		sbc ($04),y			sbc 	(temp0),y
.31b5	b0 1c		bcs $31d3			bcs 	_AABadIndex 				; if >= then fail.
.31b7	e8		inx				inx 								; point to index
.31b8	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.31ba	b1 04		lda ($04),y			lda 	(temp0),y
.31bc	20 d8 31	jsr $31d8			jsr 	MultiplyTOSByA 				; specialist multiplier.
.31bf	ca		dex				dex
.31c0	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.31c2	18		clc				clc
.31c3	b5 49		lda $49,x			lda 	esInt0+1,x
.31c5	71 04		adc ($04),y			adc 	(temp0),y
.31c7	95 48		sta $48,x			sta 	esInt0,x
.31c9	b5 51		lda $51,x			lda 	esInt1+1,x
.31cb	c8		iny				iny
.31cc	71 04		adc ($04),y			adc 	(temp0),y
.31ce	95 50		sta $50,x			sta 	esInt1,x
.31d0	68		pla				pla
.31d1	a8		tay				tay
.31d2	60		rts				rts
.31d3					_AABadIndex:
.31d3	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.31d5	20 c1 23	jsr $23c1		jsr	errorHandler
.31d8					MultiplyTOSByA:
.31d8	48		pha				pha
.31d9	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.31db	85 06		sta $06				sta 	temp1
.31dd	b5 50		lda $50,x			lda 	esInt1,x
.31df	85 07		sta $07				sta 	temp1+1
.31e1	68		pla				pla
.31e2	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.31e4	36 50		rol $50,x			rol 	esInt1,x
.31e6	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.31e8	f0 17		beq $3201			beq 	_MTBAExit
.31ea	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.31ec	d0 0f		bne $31fd			bne 	_MTBANotFloat
.31ee	48		pha				pha
.31ef	18		clc				clc 								; so this will make it x 3
.31f0	b5 48		lda $48,x			lda 	esInt0,x
.31f2	65 06		adc $06				adc 	temp1
.31f4	95 48		sta $48,x			sta 	esInt0,x
.31f6	b5 50		lda $50,x			lda 	esInt1,x
.31f8	65 07		adc $07				adc 	temp1+1
.31fa	95 50		sta $50,x			sta 	esInt1,x
.31fc	68		pla				pla
.31fd					_MTBANotFloat:
.31fd	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.31ff	36 50		rol $50,x			rol 	esInt1,x
.3201					_MTBAExit:
.3201	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3202					CreateVariable:
.3202	98		tya				tya 								; push Y on the stack twice.
.3203	48		pha				pha
.3204	48		pha				pha
.3205	ae 27 0c	ldx $0c27			ldx 	varType 					; get var type 0-5
.3208	bd 19 32	lda $3219,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.320b	48		pha				pha 								; save length
.320c	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.320e	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.3210	a5 10		lda $10				lda 	lowMemory+1
.3212	85 05		sta $05				sta 	temp0+1
.3214	68		pla				pla 								; get length
.3215	18		clc				clc 								; add to low memory.
.3216	65 0f		adc $0f				adc 	lowMemory
.3218	85 0f		sta $0f				sta 	lowMemory
.321a	90 02		bcc $321e			bcc 	_CVNoCarry
.321c	e6 10		inc $10				inc 	lowMemory+1
.321e					_CVNoCarry:
.321e	ad 26 0c	lda $0c26			lda 	varHash 					; store hash at offset 4.
.3221	a0 04		ldy #$04			ldy 	#4
.3223	91 04		sta ($04),y			sta 	(temp0),y
.3225	68		pla				pla 								; offset, work out where the variable name is.
.3226	18		clc				clc
.3227	65 02		adc $02				adc 	codePtr
.3229	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.322b	91 04		sta ($04),y			sta 	(temp0),y
.322d	a5 03		lda $03				lda 	codePtr+1
.322f	69 00		adc #$00			adc 	#0
.3231	c8		iny				iny
.3232	91 04		sta ($04),y			sta 	(temp0),y
.3234	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3236	b1 7c		lda ($7c),y			lda 	(hashList),y
.3238	91 04		sta ($04),y			sta 	(temp0),y
.323a	c8		iny				iny
.323b	b1 7c		lda ($7c),y			lda 	(hashList),y
.323d	91 04		sta ($04),y			sta 	(temp0),y
.323f	a5 05		lda $05				lda 	temp0+1 					; set new link
.3241	91 7c		sta ($7c),y			sta 	(hashList),y
.3243	88		dey				dey
.3244	a5 04		lda $04				lda 	temp0
.3246	91 7c		sta ($7c),y			sta 	(hashList),y
.3248	ad 27 0c	lda $0c27			lda 	varType 					; type in A
.324b	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.324d	20 59 32	jsr $3259			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3250	68		pla				pla
.3251	a8		tay				tay
.3252	60		rts				rts
>3253	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3255	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3257	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3259					ZeroTemp0Y:
.3259	4a		lsr a				lsr 	a 							; bit 0 in carry
.325a	0a		asl a				asl 	a
.325b	b0 19		bcs $3276			bcs 	_ZTExit 					; we don't initialise arrays.
.325d	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.325f	f0 16		beq $3277			beq 	_ZTWriteNullString 			; write "" string
.3261	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3263	f0 22		beq $3287			beq 	_ZTWriteFloat
.3265	98		tya				tya
.3266	48		pha				pha
.3267	a9 00		lda #$00			lda 	#0
.3269	91 04		sta ($04),y			sta 	(temp0),y
.326b	c8		iny				iny
.326c	91 04		sta ($04),y			sta 	(temp0),y
.326e	c8		iny				iny
.326f	91 04		sta ($04),y			sta 	(temp0),y
.3271	c8		iny				iny
.3272	91 04		sta ($04),y			sta 	(temp0),y
.3274	68		pla				pla
.3275	a8		tay				tay
.3276					_ZTExit:
.3276	60		rts				rts
.3277					_ZTWriteNullString:
.3277	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3279	8d cc 0a	sta $0acc			sta 	NullString
.327c	a9 cc		lda #$cc			lda 	#NullString & $FF
.327e	91 04		sta ($04),y			sta 	(temp0),y
.3280	a9 0a		lda #$0a			lda 	#NullString >> 8
.3282	c8		iny				iny
.3283	91 04		sta ($04),y			sta 	(temp0),y
.3285	88		dey				dey
.3286	60		rts				rts
.3287					_ZTWriteFloat:
.3287	8a		txa				txa
.3288	48		pha				pha
.3289	a2 1e		ldx #$1e		ldx	#30
.328b	20 ac 26	jsr $26ac		jsr	floatingpointHandler
.328e	68		pla				pla
.328f	aa		tax				tax
.3290	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3291					CreateArray:
.3291	20 4f 31	jsr $314f			jsr 	AccessSetup 				; set up the basic stuff.
.3294	ad 27 0c	lda $0c27			lda 	varType 					; is the variable type an array
.3297	4a		lsr a				lsr 	a
.3298	90 3f		bcc $32d9			bcc 	_CANotArray 				; no, cause an error.
.329a	20 49 33	jsr $3349			jsr 	FindVariable 				; does the variable exist already
.329d	b0 35		bcs $32d4			bcs 	_CAFound 					; cannot redefine it.
.329f	20 02 32	jsr $3202			jsr 	CreateVariable 				; create the variable entry.
.32a2	ac 28 0c	ldy $0c28			ldy 	varEnd 						; point Y to the end of the variable entry.
.32a5	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.32a7	48		pha				pha
.32a8	a5 05		lda $05				lda 	temp0+1
.32aa	48		pha				pha
.32ab	ad 27 0c	lda $0c27			lda 	varType 					; push variable type on the stack.
.32ae	48		pha				pha
.32af	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.32b1	a2 04		ldx #$04		ldx	#4
.32b3	20 f5 22	jsr $22f5		jsr	mainHandler
.32b6	a2 00		ldx #$00		ldx	#0
.32b8	20 f5 22	jsr $22f5		jsr	mainHandler
.32bb	68		pla				pla 		 						; restore type and position.
.32bc	8d 27 0c	sta $0c27			sta 	varType
.32bf	68		pla				pla
.32c0	85 05		sta $05				sta 	temp0+1
.32c2	68		pla				pla
.32c3	85 04		sta $04				sta 	temp0
.32c5	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.32c7	29 e0		and #$e0			and 	#$E0
.32c9	05 58		ora $58				ora 	esInt2
.32cb	05 60		ora $60				ora 	esInt3
.32cd	f0 0f		beq $32de			beq 	_CASizeOk
.32cf					_CASize:
.32cf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.32d1	20 c1 23	jsr $23c1		jsr	errorHandler
.32d4					_CAFound:
.32d4	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.32d6	20 c1 23	jsr $23c1		jsr	errorHandler
.32d9					_CANotArray:
.32d9	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.32db	20 c1 23	jsr $23c1		jsr	errorHandler
.32de					_CASizeOk:
.32de	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.32e0	d0 02		bne $32e4			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.32e2	e6 49		inc $49				inc 	esInt0+1
.32e4					_CANoCarry:
.32e4	98		tya				tya
.32e5	48		pha				pha
.32e6	a0 05		ldy #$05			ldy 	#5
.32e8	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.32ea	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.32ec	c8		iny				iny
.32ed	a5 10		lda $10				lda 	lowMemory+1
.32ef	91 04		sta ($04),y			sta 	(temp0),y
.32f1	c8		iny				iny
.32f2	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.32f4	91 04		sta ($04),y			sta 	(temp0),y
.32f6	c8		iny				iny
.32f7	a5 50		lda $50				lda 	esInt1
.32f9	91 04		sta ($04),y			sta 	(temp0),y
.32fb	c8		iny				iny
.32fc	ae 27 0c	ldx $0c27			ldx 	varType 					; get the length per element
.32ff	bd 07 33	lda $3307,x			lda 	_CAActualSize-$3A-1,x
.3302	91 04		sta ($04),y			sta 	(temp0),y
.3304	aa		tax				tax 								; save size in X
.3305	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.3307	85 04		sta $04				sta 	temp0
.3309	a5 10		lda $10				lda 	lowMemory+1
.330b	85 05		sta $05				sta 	temp0+1
.330d	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.330f	85 06		sta $06				sta 	temp1
.3311	85 07		sta $07				sta 	temp1+1
.3313					_CAInitialiseArray:
.3313	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3315	ad 27 0c	lda $0c27			lda 	varType 					; base type of array in A.
.3318	29 fe		and #$fe			and 	#$FE
.331a	20 59 32	jsr $3259			jsr 	ZeroTemp0Y
.331d	8a		txa				txa 								; add X to temp0, also updating lowMemory
.331e	18		clc				clc
.331f	65 04		adc $04				adc 	temp0
.3321	85 04		sta $04				sta 	temp0
.3323	85 0f		sta $0f				sta 	lowMemory
.3325	a5 05		lda $05				lda 	temp0+1
.3327	69 00		adc #$00			adc 	#0
.3329	85 05		sta $05				sta 	temp0+1
.332b	85 10		sta $10				sta 	lowMemory+1
.332d	e6 06		inc $06				inc 	temp1 						; bump the counter.
.332f	d0 02		bne $3333			bne 	_CAIANoCarry
.3331	e6 07		inc $07				inc 	temp1+1
.3333					_CAIANoCarry:
.3333	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3335	c5 06		cmp $06				cmp 	temp1
.3337	d0 da		bne $3313			bne 	_CAInitialiseArray
.3339	a5 50		lda $50				lda 	esInt1
.333b	c5 07		cmp $07				cmp 	temp1+1
.333d	d0 d4		bne $3313			bne 	_CAInitialiseArray
.333f	68		pla				pla
.3340	a8		tay				tay
.3341	60		rts				rts
.3342					_CAActualSize:
>3342	04 00						.byte 	VarISize,0
>3344	02 00						.byte 	VarSSize,0
>3346	06 00						.byte 	VarFSize,0
>3348	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3349					FindVariable:
.3349	98		tya				tya
.334a	48		pha				pha
.334b	98		tya				tya 								; point temp2 to the actual name.
.334c	18		clc				clc
.334d	65 02		adc $02				adc 	codePtr
.334f	85 08		sta $08				sta 	temp2
.3351	a5 03		lda $03				lda 	codePtr+1
.3353	69 00		adc #$00			adc 	#0
.3355	85 09		sta $09				sta 	temp2+1
.3357	a0 00		ldy #$00			ldy 	#0
.3359	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.335b	85 04		sta $04				sta 	temp0
.335d	a5 7d		lda $7d				lda 	hashList+1
.335f	85 05		sta $05				sta 	temp0+1
.3361	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3363	b1 04		lda ($04),y			lda 	(temp0),y
.3365	f0 2c		beq $3393			beq 	_FVFail
.3367	aa		tax				tax
.3368	88		dey				dey		 							; get LSB
.3369	b1 04		lda ($04),y			lda 	(temp0),y
.336b	85 04		sta $04				sta 	temp0 						; update pointer.
.336d	86 05		stx $05				stx 	temp0+1
.336f	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3371	b1 04		lda ($04),y			lda 	(temp0),y
.3373	cd 26 0c	cmp $0c26			cmp 	varHash
.3376	d0 e9		bne $3361			bne 	_FVNext 					; if not, no point in checking the name.
.3378	88		dey				dey 								; copy name pointer to temp1.
.3379	b1 04		lda ($04),y			lda 	(temp0),y
.337b	85 07		sta $07				sta 	temp1+1
.337d	88		dey				dey
.337e	b1 04		lda ($04),y			lda 	(temp0),y
.3380	85 06		sta $06				sta 	temp1
.3382	a0 00		ldy #$00			ldy 	#0
.3384					_FVCheck:
.3384	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.3386	d1 08		cmp ($08),y			cmp 	(temp2),y
.3388	d0 d7		bne $3361			bne 	_FVNext		 				; fail if different.
.338a	c8		iny				iny
.338b	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.338d	90 f5		bcc $3384			bcc 	_FVCheck
.338f	68		pla				pla
.3390	a8		tay				tay
.3391	38		sec				sec
.3392	60		rts				rts
.3393					_FVFail:
.3393	68		pla				pla
.3394	a8		tay				tay
.3395	18		clc				clc
.3396	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3397					HashTableReset:
.3397	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.3399	a9 00		lda #$00			lda 	#0
.339b					_HTRClear:
.339b	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.339e	ca		dex				dex
.339f	d0 fa		bne $339b			bne 	_HTRClear
.33a1	60		rts				rts

;******  Return to file: variable/variable.asm

.33a2					variableHandler:
.33a2	7c a5 33	jmp ($33a5,x)			jmp 	(variableVectors,x)
.33a5					variableVectors:
>33a5	e8 30					.word AccessVariable       ; index 0
>33a7	91 32					.word CreateArray          ; index 2
>33a9	97 33					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.33ab					section_end_variable:

;******  End of listing
