
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Thu Apr 08 14:16:37 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=1					cputype = 1
=1					autorun = 1
=0					coldstartnew = 0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35
.0af2					jumpVector:
>0af2							.fill 	2

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$ea					TKW_TYPE                     = $ea ; type
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$93					TKW_SOUND                    = $93 ; sound
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(
=$8f					TKW_PLAYINGLPAREN            = $8f ; playing(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	72 45						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4e		lda #$4e			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 ab 27	jsr $27ab		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 ac 13	jsr $13ac		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 e7 14	jsr $14e7		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 ab 27	jsr $27ab		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 b5 40	jsr $40b5		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 3d 49	jsr $493d		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 fc 4c	jsr $4cfc		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 3d 49	jsr $493d		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first character into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit 					; e.g. "INX"
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ? so it is lda (something
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A on its own. This is for ASL A
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it - this should be $3A
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1 (it may of course be absolute)
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing 				; get ,X or ,Y if present
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit 					; neither present
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX 					; decide if ,X or ,Y
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 0a 3e	jsr $3e0a		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 09 15	jsr $1509		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 0a 3e	jsr $3e0a		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X) so get the ending and error on anything else.
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 0a 3e	jsr $3e0a		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma (e.g. ,X ,Y)
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af4					finalOpcode:
>0af4							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f4 0a	sta $0af4			sta 	finalOpcode					; save opcode.
.1113	5a		phy				phy
.1114	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O (e.g. what do we display/check.)
.1117	29 02		and #$02			and 	#2
.1119	f0 2b		beq $1146			beq 	_ASMWNoEcho 				; if bit 2 zero then don't echo.
.111b	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111e	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1121	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1124	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1127	ad f4 0a	lda $0af4			lda 	finalOpcode 				; write opcode
.112a	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.112d	e0 00		cpx #$00			cpx 	#0
.112f	f0 0e		beq $113f			beq 	_ASMWEchoExit
.1131	a5 98		lda $98				lda 	esInt0
.1133	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.1136	e0 01		cpx #$01			cpx 	#1
.1138	f0 05		beq $113f			beq 	_ASMWEchoExit
.113a	a5 a0		lda $a0				lda 	esInt1
.113c	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.113f					_ASMWEchoExit:
.113f	da		phx				phx
.1140	a2 06		ldx #$06		ldx	#6
.1142	20 e7 14	jsr $14e7		jsr	deviceHandler
.1145	fa		plx				plx
.1146					_ASMWNoEcho:
.1146	ad f4 0a	lda $0af4			lda 	finalOpcode 				; opcode
.1149	20 60 11	jsr $1160			jsr 	AsmWriteByte
.114c	e0 00		cpx #$00			cpx 	#0	 						; exit if no operands
.114e	f0 0e		beq $115e			beq 	_ASMWExit
.1150	a5 98		lda $98				lda 	esInt0	 					; low byte
.1152	20 60 11	jsr $1160			jsr 	AsmWriteByte
.1155	e0 01		cpx #$01			cpx 	#1
.1157	f0 05		beq $115e			beq 	_ASMWExit
.1159	a5 a0		lda $a0				lda 	esInt1 						; high byte
.115b	20 60 11	jsr $1160			jsr 	AsmWriteByte
.115e					_ASMWExit:
.115e	7a		ply				ply
.115f	60		rts				rts
.1160					AsmWriteByte:
.1160	a0 00		ldy #$00			ldy 	#0
.1162	48		pha				pha
.1163	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1166	85 2a		sta $2a				sta 	temp0
.1168	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116b	85 2b		sta $2b				sta 	temp0+1
.116d	68		pla				pla 								; write out the byte.
.116e	91 2a		sta ($2a),y			sta 	(temp0),y
.1170	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1173	d0 03		bne $1178			bne 	_AWBNoCarry
.1175	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1178					_AWBNoCarry:
.1178	60		rts				rts
.1179					AWIWriteHexSpace:
.1179	48		pha				pha
.117a	a9 20		lda #$20			lda 	#" "
.117c	20 93 11	jsr $1193			jsr 	AWIPrintChar
.117f	68		pla				pla
.1180					AWIWriteHex:
.1180	48		pha				pha
.1181	4a		lsr a				lsr 	a
.1182	4a		lsr a				lsr 	a
.1183	4a		lsr a				lsr 	a
.1184	4a		lsr a				lsr 	a
.1185	20 89 11	jsr $1189			jsr 	AWIPrintNibble
.1188	68		pla				pla
.1189					AWIPrintNibble:
.1189	29 0f		and #$0f			and 	#15
.118b	c9 0a		cmp #$0a			cmp 	#10
.118d	90 02		bcc $1191			bcc 	_AWIPNDigit
.118f	69 06		adc #$06			adc 	#6
.1191					_AWIPNDigit:
.1191	69 30		adc #$30			adc 	#48
.1193					AWIPrintChar:
.1193	85 32		sta $32				sta 	tempShort
.1195	da		phx				phx
.1196	a5 32		lda $32				lda 	tempShort
.1198	a2 16		ldx #$16		ldx	#22
.119a	20 e7 14	jsr $14e7		jsr	deviceHandler
.119d	fa		plx				plx
.119e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af5					asmToken:
>0af5							.fill 	1
.0af6					asmMode:
>0af6							.fill 	1 							; esInt0/1
.0af7					asmBaseOpcode:
>0af7							.fill 	1
.119f					AssembleOneInstruction:
.119f	8d f5 0a	sta $0af5			sta 	asmToken 					; save the token
.11a2	aa		tax				tax
.11a3	bd 6c 11	lda $116c,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11a6	8d f7 0a	sta $0af7			sta 	asmBaseOpcode
.11a9	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11ac	8d f6 0a	sta $0af6			sta 	asmMode
.11af	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b1	d0 05		bne $11b8			bne 	_AOIThreeBytes 				; if so, we have to use three byte, can't try zp before abs
.11b3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11b6	b0 10		bcs $11c8			bcs 	_AOISuccess 				; worked ok.
.11b8					_AOIThreeBytes:
.11b8	ae f6 0a	ldx $0af6			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11bb	bd f2 11	lda $11f2,x			lda 	AbsoluteVersionTable,x
.11be	30 09		bmi $11c9			bmi 	_AOIError					; not possible, no equivalent.
.11c0	8d f6 0a	sta $0af6			sta 	asmMode
.11c3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11c6	90 01		bcc $11c9			bcc 	_AOIError 					; didn't work.
.11c8					_AOISuccess:
.11c8	60		rts				rts
.11c9					_AOIError:
.11c9	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11cb	20 09 15	jsr $1509		jsr	errorHandler
.11ce					AssembleAttempt:
.11ce	20 d7 11	jsr $11d7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d1	b0 03		bcs $11d6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d3	20 7f 13	jsr $137f			jsr 	AssembleSpecialCase
.11d6					_AAExit:
.11d6	60		rts				rts
.11d7					_AADispatch:
.11d7	ad f5 0a	lda $0af5			lda 	asmToken
.11da	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11dc	b0 11		bcs $11ef			bcs 	_AAGroup4
.11de	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e0	b0 0a		bcs $11ec			bcs 	_AAGroup3
.11e2	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11e4	b0 03		bcs $11e9			bcs 	_AAGroup2
.11e6	4c c5 12	jmp $12c5			jmp 	AssembleGroup1
.11e9					_AAGroup2:
.11e9	4c 20 13	jmp $1320			jmp 	AssembleGroup2
.11ec					_AAGroup3:
.11ec	4c 41 13	jmp $1341			jmp 	AssembleGroup3
.11ef					_AAGroup4:
.11ef	4c 75 13	jmp $1375			jmp 	AssembleGroup4
.11f2					AbsoluteVersionTable:
>11f2	ff						.byte	$FF 			; fail AMD_IMM
>11f3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11f4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11f5	ff						.byte	$FF 			; fail AMD_ABS
>11f6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11f7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11f8	ff						.byte	$FF 			; fail AMD_ABSY
>11f9	ff						.byte	$FF 			; fail AMD_ABSX
>11fa	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11fb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11fc	ff						.byte	$FF 			; fail AMD_ABSIND
>11fd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11fe	ff						.byte	$FF 			; fail AMD_REL
>11ff	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1200					OpcodeTable:
>1200	01					.byte	$01			; $94 ora
>1201	21					.byte	$21			; $95 (and)
>1202	41					.byte	$41			; $96 eor
>1203	61					.byte	$61			; $97 adc
>1204	81					.byte	$81			; $98 sta
>1205	a1					.byte	$a1			; $99 lda
>1206	c1					.byte	$c1			; $9a cmp
>1207	e1					.byte	$e1			; $9b sbc
>1208	02					.byte	$02			; $9c asl
>1209	22					.byte	$22			; $9d rol
>120a	42					.byte	$42			; $9e lsr
>120b	62					.byte	$62			; $9f ror
>120c	82					.byte	$82			; $a0 stx
>120d	a2					.byte	$a2			; $a1 ldx
>120e	c2					.byte	$c2			; $a2 dec
>120f	e2					.byte	$e2			; $a3 inc
>1210	60					.byte	$60			; $a4 stz
>1211	20					.byte	$20			; $a5 bit
>1212	80					.byte	$80			; $a6 sty
>1213	a0					.byte	$a0			; $a7 ldy
>1214	c0					.byte	$c0			; $a8 cpy
>1215	e0					.byte	$e0			; $a9 cpx
>1216	00					.byte	$00			; $aa tsb
>1217	10					.byte	$10			; $ab trb
>1218	14					.byte	$14			; $ac jsr
>1219	40					.byte	$40			; $ad jmp
>121a	10					.byte	$10			; $ae bpl
>121b	30					.byte	$30			; $af bmi
>121c	50					.byte	$50			; $b0 bvc
>121d	70					.byte	$70			; $b1 bvs
>121e	90					.byte	$90			; $b2 bcc
>121f	b0					.byte	$b0			; $b3 bcs
>1220	d0					.byte	$d0			; $b4 bne
>1221	f0					.byte	$f0			; $b5 beq
>1222	80					.byte	$80			; $b6 bra
>1223	00					.byte	$00			; $b7 brk
>1224	08					.byte	$08			; $b8 php
>1225	18					.byte	$18			; $b9 clc
>1226	28					.byte	$28			; $ba plp
>1227	38					.byte	$38			; $bb sec
>1228	40					.byte	$40			; $bc rti
>1229	48					.byte	$48			; $bd pha
>122a	58					.byte	$58			; $be cli
>122b	5a					.byte	$5a			; $bf phy
>122c	60					.byte	$60			; $c0 rts
>122d	68					.byte	$68			; $c1 pla
>122e	78					.byte	$78			; $c2 sei
>122f	7a					.byte	$7a			; $c3 ply
>1230	88					.byte	$88			; $c4 dey
>1231	8a					.byte	$8a			; $c5 txa
>1232	98					.byte	$98			; $c6 tya
>1233	9a					.byte	$9a			; $c7 txs
>1234	a8					.byte	$a8			; $c8 tay
>1235	aa					.byte	$aa			; $c9 tax
>1236	b8					.byte	$b8			; $ca clv
>1237	ba					.byte	$ba			; $cb tsx
>1238	c8					.byte	$c8			; $cc iny
>1239	ca					.byte	$ca			; $cd dex
>123a	d8					.byte	$d8			; $ce cld
>123b	da					.byte	$da			; $cf phx
>123c	e8					.byte	$e8			; $d0 inx
>123d	ea					.byte	$ea			; $d1 nop
>123e	f8					.byte	$f8			; $d2 sed
>123f	fa					.byte	$fa			; $d3 plx
.1240					Group2OpcodeAvailability:
>1240	ae					.byte	$ae			; $9c asl $02
>1241	ae					.byte	$ae			; $9d rol $22
>1242	ae					.byte	$ae			; $9e lsr $42
>1243	ae					.byte	$ae			; $9f ror $62
>1244	0a					.byte	$0a			; $a0 stx $82
>1245	0b					.byte	$0b			; $a1 ldx $a2
>1246	aa					.byte	$aa			; $a2 dec $c2
>1247	aa					.byte	$aa			; $a3 inc $e2
>1248	22					.byte	$22			; $a4 stz $60
>1249	aa					.byte	$aa			; $a5 bit $20
>124a	2a					.byte	$2a			; $a6 sty $80
>124b	ab					.byte	$ab			; $a7 ldy $a0
>124c	2b					.byte	$2b			; $a8 cpy $c0
>124d	0b					.byte	$0b			; $a9 cpx $e0
>124e	0a					.byte	$0a			; $aa tsb $00
>124f	0a					.byte	$0a			; $ab trb $10
>1250	08					.byte	$08			; $ac jsr $14
>1251	08					.byte	$08			; $ad jmp $40
.1252					AssemblerSpecialCases:
>1252	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>1255	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>1258	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>125b	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>125e	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1261	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>1264	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>1267	a5 00 89				.byte	$a5,0,$89		; bit #
>126a	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>126d	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1270	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1271					AssembleLabel:
.1271	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1273	c9 3a		cmp #$3a			cmp 	#$3A 						; e.g. it isn't just '.'
.1275	b0 49		bcs $12c0			bcs 	_ALSyntax
.1277	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.1279	a2 02		ldx #$02		ldx	#2
.127b	20 fc 4c	jsr $4cfc		jsr	variableHandler
.127e	a5 90		lda $90				lda 	esType 						; check integer reference
.1280	c9 80		cmp #$80			cmp 	#$80
.1282	d0 3c		bne $12c0			bne 	_ALSyntax
.1284	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.1286	85 2a		sta $2a				sta 	temp0
.1288	a5 a0		lda $a0				lda 	esInt1
.128a	85 2b		sta $2b				sta 	temp0+1
.128c	5a		phy				phy
.128d	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2 ?
.1290	4a		lsr a				lsr 	a
.1291	90 11		bcc $12a4			bcc 	_ALWrite
.1293	a0 00		ldy #$00			ldy 	#0
.1295	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.1298	d1 2a		cmp ($2a),y			cmp 	(temp0),y 					; labels cannot change value, usually means address mode has changed.
.129a	d0 1f		bne $12bb			bne 	_ALChanged
.129c	c8		iny				iny
.129d	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a2	d0 17		bne $12bb			bne 	_ALChanged
.12a4					_ALWrite:
.12a4	a0 00		ldy #$00			ldy 	#0
.12a6	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12a9	91 2a		sta ($2a),y			sta 	(temp0),y
.12ab	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12ae	c8		iny				iny
.12af	91 2a		sta ($2a),y			sta 	(temp0),y
.12b1	a9 00		lda #$00			lda 	#0
.12b3	c8		iny				iny
.12b4	91 2a		sta ($2a),y			sta 	(temp0),y
.12b6	c8		iny				iny
.12b7	91 2a		sta ($2a),y			sta 	(temp0),y
.12b9	7a		ply				ply
.12ba	60		rts				rts
.12bb					_ALChanged:
.12bb	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12bd	20 09 15	jsr $1509		jsr	errorHandler
.12c0					_ALSyntax:
.12c0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12c2	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12c5					AssembleGroup1:
.12c5	ad f5 0a	lda $0af5			lda 	asmToken 					; firstly, we throw out STA immediate
.12c8	c9 98		cmp #$98			cmp 	#TKW_STA
.12ca	d0 07		bne $12d3			bne 	_AG1NotStoreImm
.12cc	ad f6 0a	lda $0af6			lda 	asmMode
.12cf	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d1	f0 2c		beq $12ff			beq 	AG1ModeError
.12d3					_AG1NotStoreImm:
.12d3	ae f6 0a	ldx $0af6			ldx 	asmMode						; get mode into X.
.12d6	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12d9	48		pha				pha
.12da	f0 23		beq $12ff			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12dc	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12de	d0 02		bne $12e2			bne 	_AG1NotImmediate
.12e0	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12e2					_AG1NotImmediate:
.12e2	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12e4	d0 02		bne $12e8			bne 	_AG1NotZX
.12e6	a2 00		ldx #$00			ldx 	#0
.12e8					_AG1NotZX:
.12e8	68		pla				pla 								; restore length
.12e9	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12eb	b0 10		bcs $12fd			bcs 	AG1Fail
.12ed					AG1ReturnValue:
.12ed	85 32		sta $32				sta 	tempShort 					; save size of operand
.12ef	18		clc				clc
.12f0	bd 12 13	lda $1312,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12f3	6d f7 0a	adc $0af7			adc 	asmBaseOpcode 				; add the base opcode.
.12f6	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12f8	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.12fb	38		sec				sec
.12fc	60		rts				rts
.12fd					AG1Fail:
.12fd	18		clc				clc
.12fe	60		rts				rts
.12ff					AG1ModeError:
.12ff	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1301	20 09 15	jsr $1509		jsr	errorHandler
.1304					AMDOperandSize:
>1304	01 01 00 02					.byte 	1,1,0,2
>1308	01 01 02 02					.byte 	1,1,2,2
>130c	01 01 02 02					.byte 	1,1,2,2
>1310	01 01						.byte 	1,1
.1312					AMDOffsetFromBase:
>1312	00 04 08 0c					.byte 	0,4,8,12
>1316	10 14 18 1c					.byte	16,20,24,28
>131a	11 00 00 00					.byte 	17,0,0,0
>131e	00 00						.byte 	0,0
.1320					AssembleGroup2:
.1320	ad f6 0a	lda $0af6			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.1323	c9 08		cmp #$08			cmp 	#8
.1325	b0 18		bcs $133f			bcs 	_AG2Fail
.1327	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1329	ae f5 0a	ldx $0af5			ldx 	asmToken					; get token in X, then get the availability flags for it
.132c	bd a4 11	lda $11a4,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.132f					_AG2Shift:
.132f	4a		lsr a				lsr 	a
.1330	c6 2a		dec $2a				dec 	temp0
.1332	10 fb		bpl $132f			bpl 	_AG2Shift
.1334	90 09		bcc $133f			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.1336	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.1339	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.133c	4c ed 12	jmp $12ed			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.133f					_AG2Fail:
.133f	18		clc				clc
.1340	60		rts				rts
.1341					AssembleGroup3:
.1341	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.1344	4a		lsr a				lsr 	a
.1345	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.1347	90 21		bcc $136a			bcc 	_AG3Default
.1349	38		sec				sec	 								; calculate branch offset
.134a	a5 98		lda $98				lda		esInt0
.134c	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.134f	aa		tax				tax
.1350	a5 a0		lda $a0				lda		esInt1
.1352	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.1355	85 a0		sta $a0				sta 	esInt1
.1357	8a		txa				txa 								; add 126, now 128 too many.
.1358	18		clc				clc 								; we can use this to check the range
.1359	69 7e		adc #$7e			adc 	#126
.135b	85 98		sta $98				sta 	esInt0
.135d	90 02		bcc $1361			bcc 	_AG3NoCarry
.135f	e6 a0		inc $a0				inc 	esInt1
.1361					_AG3NoCarry:
.1361	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.1363	d0 0b		bne $1370			bne 	_AG3Range
.1365	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.1367	38		sec				sec
.1368	e9 80		sbc #$80			sbc 	#128
.136a					_AG3Default:
.136a	85 98		sta $98				sta 	esInt0
.136c					_AG3ExitOk:
.136c	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.136e	d0 07		bne $1377			bne 	AG4Write
.1370					_AG3Range:
.1370	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.1372	20 09 15	jsr $1509		jsr	errorHandler
.1375					AssembleGroup4:
.1375	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1377					AG4Write:
.1377	ad f7 0a	lda $0af7			lda 	asmBaseOpcode				; the opcode is the opcode base.
.137a	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.137d	38		sec				sec
.137e	60		rts				rts
.137f					AssembleSpecialCase:
.137f	a2 00		ldx #$00			ldx 	#0
.1381					_ASCScan:
.1381	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.1384	cd f5 0a	cmp $0af5			cmp 	asmToken
.1387	d0 08		bne $1391			bne 	_ASCNext
.1389	bd 53 12	lda $1253,x			lda 	AssemblerSpecialCases+1,x
.138c	cd f6 0a	cmp $0af6			cmp 	asmMode
.138f	f0 0a		beq $139b			beq 	_ASCFound
.1391					_ASCNext:
.1391	e8		inx				inx									; next entry
.1392	e8		inx				inx
.1393	e8		inx				inx
.1394	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; until table ends
.1397	d0 e8		bne $1381			bne 	_ASCScan
.1399	18		clc				clc
.139a	60		rts				rts
.139b					_ASCFound:
.139b	bd 54 12	lda $1254,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.139e	48		pha				pha
.139f	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.13a2	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13a5	aa		tax				tax
.13a6	68		pla				pla 								; opcode back
.13a7	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13aa	38		sec				sec
.13ab	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13ac					assemblerHandler:
.13ac	7c af 13	jmp ($13af,x)			jmp 	(assemblerVectors,x)
.13af					assemblerVectors:
>13af	b5 13					.word _DummyControlHandler ; index 0
>13b1	9f 11					.word AssembleOneInstruction ; index 2
>13b3	71 12					.word AssembleLabel        ; index 4
.13b5					_DummyControlHandler:
.13b5	60		rts			rts

;******  Return to file: basic.asm

.13b6					section_end_assembler:
.13b6					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13b6					X16Break:
.13b6	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13b9	f0 01		beq $13bc			beq 	_IsBreak
.13bb	60		rts				rts
.13bc					_IsBreak:
.13bc	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13be	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c1					ExternSave:
.13c1	5a		phy				phy
.13c2	20 0d 14	jsr $140d			jsr 	ExternGetLength 			; get length of file into A name YX
.13c5	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13c8	a9 01		lda #$01			lda 	#1
.13ca	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13cc	a0 00		ldy #$00			ldy 	#0
.13ce	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13d1	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13d3	85 2a		sta $2a				sta 	temp0
.13d5	a5 a1		lda $a1				lda 	esInt1+1
.13d7	85 2b		sta $2b				sta 	temp0+1
.13d9	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13db	a4 a2		ldy $a2				ldy 	esInt1+2
.13dd	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13df	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13e2	b0 02		bcs $13e6			bcs 	_ESSave
.13e4	7a		ply				ply
.13e5	60		rts				rts
.13e6					_ESSave:
.13e6	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13e8	20 09 15	jsr $1509		jsr	errorHandler
.13eb					ExternLoad:
.13eb	5a		phy				phy
.13ec	20 0d 14	jsr $140d			jsr 	ExternGetLength 			; get length of file into A name YX
.13ef	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13f2	a9 01		lda #$01			lda 	#1
.13f4	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13f6	a0 00		ldy #$00			ldy 	#0
.13f8	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13fb	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.13fd	a4 a1		ldy $a1				ldy 	esInt1+1
.13ff	a9 00		lda #$00			lda 	#0 							; load command
.1401	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1404	b0 02		bcs $1408			bcs 	_ESLoad
.1406	7a		ply				ply
.1407	60		rts				rts
.1408					_ESLoad:
.1408	a2 20		ldx #$20			ldx 	#ErrorID_Load
.140a	20 09 15	jsr $1509		jsr	errorHandler
.140d					ExternGetLength:
.140d	a5 98		lda $98				lda 	esInt0 						; length into A.
.140f	85 2a		sta $2a				sta 	temp0
.1411	a5 a0		lda $a0				lda 	esInt1
.1413	85 2b		sta $2b				sta 	temp0+1
.1415	a0 00		ldy #$00			ldy 	#0
.1417	b1 2a		lda ($2a),y			lda 	(temp0),y
.1419	a6 98		ldx $98				ldx 	esInt0 						; name string address into YX
.141b	a4 a0		ldy $a0				ldy 	esInt1
.141d	e8		inx				inx 								; advance over the length byte.
.141e	d0 01		bne $1421			bne 	_ESNoCarry
.1420	c8		iny				iny
.1421					_ESNoCarry:
.1421	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af8					bufferCount:
>0af8							.fill 	0
.0af8					bufferStorage:
>0af8							.fill 	MaxLineInputSize
.1422					IOControlHandler:
.1422	c9 00		cmp #$00			cmp 	#0
.1424	d0 12		bne $1438			bne		_CHExit
.1426	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1428	20 51 14	jsr $1451			jsr 	IOPrintChar
.142b	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.142d	20 7b 14	jsr $147b			jsr 	IOInk
.1430	a9 00		lda #$00			lda 	#0
.1432	20 8f 14	jsr $148f			jsr 	IOPaper
.1435	20 39 14	jsr $1439			jsr 	IOClearScreen
.1438					_CHExit:
.1438	60		rts				rts
.1439					IOClearScreen:
.1439	48		pha				pha
.143a	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.143c	20 51 14	jsr $1451			jsr 	IOPrintChar
.143f	68		pla				pla
.1440	60		rts				rts
.1441					IONewLine:
.1441	48		pha				pha
.1442	a9 0d		lda #$0d			lda 	#13
.1444	20 51 14	jsr $1451			jsr 	IOPrintChar
.1447	68		pla				pla
.1448	60		rts				rts
.1449					IOTab:
.1449	48		pha				pha
.144a	a9 20		lda #$20			lda 	#32
.144c	20 51 14	jsr $1451			jsr 	IOPrintChar
.144f	68		pla				pla
.1450	60		rts				rts
.1451					IOPrintAscii:
.1451					IOPrintChar:
.1451	aa		tax				tax 								; save in X so we can save Y
.1452	5a		phy				phy
.1453	8a		txa				txa
.1454	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1456	d0 02		bne $145a			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1458	a9 14		lda #$14			lda 	#$14
.145a					_IOPCNotBS:
.145a	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.145d	7a		ply				ply
.145e	60		rts				rts
.145f					IOInkey:
.145f	5a		phy				phy
.1460	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1463	85 32		sta $32				sta 	tempShort
.1465	7a		ply				ply
.1466	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1468	f0 10		beq $147a			beq 	_IOIExit
.146a	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.146c	f0 0c		beq $147a			beq 	_IOIExit
.146e	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1470	f0 06		beq $1478			beq 	_IOIBackspace
.1472	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1474	90 e9		bcc $145f			bcc 	IOInkey
.1476	b0 02		bcs $147a			bcs 	_IOIExit
.1478					_IOIBackspace:
.1478	a9 08		lda #$08			lda 	#8 							; return chr(8)
.147a					_IOIExit:
.147a	60		rts				rts
.147b					IOInk:
.147b	48		pha				pha
.147c	29 07		and #$07			and 	#7 							; 8 primaries
.147e	aa		tax				tax
.147f	bd 87 14	lda $1487,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1482	20 51 14	jsr $1451			jsr 	IOPrintChar
.1485	68		pla				pla
.1486	60		rts				rts
.1487					_IOColourTable:
>1487	90						.byte 	$90 					; 0 Black
>1488	96						.byte 	$96 					; 1 Red
>1489	1e						.byte 	$1E 					; 2 Green
>148a	9e						.byte 	$9E 					; 3 Yellow
>148b	9a						.byte 	$9A 					; 4 Blue
>148c	9c						.byte 	$9C 					; 5 Magenta
>148d	9f						.byte 	$9F 					; 6 Cyan
>148e	05						.byte 	$05 					; 7 White
.148f					IOPaper:
.148f	48		pha				pha
.1490	48		pha				pha
.1491	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.1493	20 51 14	jsr $1451			jsr 	IOPrintChar 			; and then swap them again.
.1496	68		pla				pla
.1497	20 7b 14	jsr $147b			jsr 	IOInk
.149a	a9 01		lda #$01			lda 	#1
.149c	20 51 14	jsr $1451			jsr 	IOPrintChar
.149f	68		pla				pla
.14a0	60		rts				rts
.14a1					IOLocate:
.14a1	48		pha				pha
.14a2	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14a4	20 51 14	jsr $1451			jsr 	IOPrintChar
.14a7	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14a9	20 af 14	jsr $14af			jsr 	_IOLoc2
.14ac	7a		ply				ply
.14ad	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14af					_IOLoc2:
.14af	c0 00		cpy #$00			cpy 	#0
.14b1	f0 06		beq $14b9			beq 	_IOLocExit
.14b3	20 51 14	jsr $1451			jsr 	IOPrintChar
.14b6	88		dey				dey
.14b7	d0 f6		bne $14af			bne 	_IOLoc2
.14b9					_IOLocExit:
.14b9	60		rts				rts
.14ba					IOInput:
.14ba	a9 00		lda #$00			lda 	#0
.14bc	8d f8 0a	sta $0af8			sta 	bufferCount
.14bf					_IOILoop:
.14bf	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14c2	c9 0d		cmp #$0d			cmp 	#13
.14c4	f0 10		beq $14d6			beq 	_IOIExit
.14c6	ae f8 0a	ldx $0af8			ldx 	bufferCount
.14c9	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14cb	f0 f2		beq $14bf			beq 	_IOILoop
.14cd	ee f8 0a	inc $0af8			inc 	bufferCount
.14d0	9d f9 0a	sta $0af9,x			sta 	bufferStorage+1,x
.14d3	4c bf 14	jmp $14bf			jmp 	_IOILoop
.14d6					_IOIExit:
.14d6	a9 f8		lda #$f8			lda 	#(bufferCount) & $FF
.14d8	85 2a		sta $2a				sta 	temp0
.14da	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14dc	85 2b		sta $2b				sta 	1+(temp0)
.14de	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14df					IOReadTimer:
.14df	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14e2	48		pha				pha
.14e3	8a		txa				txa
.14e4	a8		tay				tay
.14e5	68		pla				pla
.14e6	60		rts				rts

;******  Return to file: device/device.asm

.14e7					deviceHandler:
.14e7	7c ea 14	jmp ($14ea,x)			jmp 	(deviceVectors,x)
.14ea					deviceVectors:
>14ea	22 14					.word IOControlHandler     ; index 0
>14ec	b6 13					.word X16Break             ; index 2
>14ee	39 14					.word IOClearScreen        ; index 4
>14f0	41 14					.word IONewLine            ; index 6
>14f2	7b 14					.word IOInk                ; index 8
>14f4	5f 14					.word IOInkey              ; index 10
>14f6	ba 14					.word IOInput              ; index 12
>14f8	eb 13					.word ExternLoad           ; index 14
>14fa	a1 14					.word IOLocate             ; index 16
>14fc	8f 14					.word IOPaper              ; index 18
>14fe	51 14					.word IOPrintChar          ; index 20
>1500	51 14					.word IOPrintAscii         ; index 22
>1502	c1 13					.word ExternSave           ; index 24
>1504	49 14					.word IOTab                ; index 26
>1506	df 14					.word IOReadTimer          ; index 28
.1508					_DummyControlHandler:
.1508	60		rts			rts

;******  Return to file: basic.asm

.1509					section_end_device:
.1509					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1509					ErrorHandler:
.1509	da		phx				phx
.150a	a9 01		lda #$01			lda 	#1 							; red
.150c	a2 08		ldx #$08		ldx	#8
.150e	20 e7 14	jsr $14e7		jsr	deviceHandler
.1511	fa		plx				plx
.1512	a9 7d		lda #$7d			lda 	#(ErrorTextList) & $FF
.1514	85 2a		sta $2a				sta 	temp0
.1516	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1518	85 2b		sta $2b				sta 	1+(temp0)
.151a	ca		dex		_EHFind:dex									; errors start at 1
.151b	f0 10		beq $152d			beq 	_EHFound
.151d	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.151f	38		sec				sec
.1520	a5 2a		lda $2a				lda 	temp0
.1522	71 2a		adc ($2a),y			adc 	(temp0),y
.1524	85 2a		sta $2a				sta 	temp0
.1526	90 f2		bcc $151a			bcc 	_EHFind
.1528	e6 2b		inc $2b				inc 	temp0+1
.152a	4c 1a 15	jmp $151a			jmp 	_EHFind
.152d					_EHFound:
.152d	20 41 18	jsr $1841			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1530	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1532	b1 28		lda ($28),y			lda 	(codePtr),y
.1534	f0 39		beq $156f			beq 	_EHNoLine
.1536	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1538	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.153b	90 32		bcc $156f			bcc 	_EHNoLine
.153d	a9 79		lda #$79			lda 	#(EHAtMsg) & $FF
.153f	85 2a		sta $2a				sta 	temp0
.1541	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1543	85 2b		sta $2b				sta 	1+(temp0)
.1545	20 41 18	jsr $1841			jsr 	EHPrintAscii
.1548	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.154a	a2 00		ldx #$00			ldx 	#0
.154c	b1 28		lda ($28),y			lda 	(codePtr),y
.154e	95 98		sta $98,x			sta 	esInt0,x
.1550	c8		iny				iny
.1551	b1 28		lda ($28),y			lda 	(codePtr),y
.1553	95 a0		sta $a0,x			sta 	esInt1,x
.1555	a9 00		lda #$00			lda 	#0
.1557	95 a8		sta $a8,x			sta 	esInt2,x
.1559	95 b0		sta $b0,x			sta 	esInt3,x
.155b	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.155d	85 2a		sta $2a				sta 	temp0
.155f	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1561	85 2b		sta $2b				sta 	1+(temp0)
.1563	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1565	a9 00		lda #$00			lda 	#0							; stack position zero.
.1567	a2 12		ldx #$12		ldx	#18
.1569	20 0a 3e	jsr $3e0a		jsr	mainHandler
.156c	20 41 18	jsr $1841			jsr 	EHPrintAscii
.156f					_EHNoLine:
.156f	a2 06		ldx #$06		ldx	#6
.1571	20 e7 14	jsr $14e7		jsr	deviceHandler
.1574	a2 04		ldx #$04		ldx	#4
.1576	20 ab 27	jsr $27ab		jsr	interactionHandler
.1579					EHAtMsg:
>1579	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.157d					ErrorTextList:
>157d	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1585	20 6e 6f 74 20 50 72 65 73 65 6e 74
>1591	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1599	45 72 72 6f 72
>159e	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15a6	64 69 73 61 62 6c 65 64
>15ae	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15b6	6f 6e 20 66 61 69 6c 65 64
>15bf	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15c7	42 79 20 5a 65 72 6f
>15ce	04 53 74 6f 70				.text 4,"Stop"
>15d3	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15db	73 6d 61 74 63 68
>15e1	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15e9	20 56 61 6c 75 65
>15ef	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15f7	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1605	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>160d	20 63 6f 6d 6d 61
>1613	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>161b	20 72 65 66 65 72 65 6e 63 65
>1625	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>162d	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>163b	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1643	74 6f 6f 20 6c 6f 6e 67
>164b	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1653	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1660	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1668	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1675	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>167d	74 68 6f 75 74 20 46 4f 52
>1686	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>168e	74 68 6f 75 74 20 57 48 49 4c 45
>1699	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16a1	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16ae	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16b6	54 20 69 6e 64 65 78
>16bd	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16c5	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16d5	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16dd	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16ec	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16f4	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1704	63 65
>1706	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>170e	20 50 72 6f 63 65 64 75 72 65
>1718	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1720	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1730	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1738	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1746	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>174e	75 69 72 65 73 20 61 72 72 61 79
>1759	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1761	61 79 20 69 6e 64 65 78
>1769	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1771	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1781	6e 64 69 63 65 73
>1787	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>178f	64 61 74 61
>1793	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>179b	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17a8	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17b0	69 6c 65 64
>17b4	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17bc	69 6c 65 64
>17c0	05 42 72 65 61 6b			.text 5,"Break"
>17c6	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17ce	6d 65 6d 6f 72 79
>17d4	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17dc	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17eb	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17f3	72 61 6e 64 2f 4d 6f 64 65
>17fc	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1804	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1810	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1818	68 61 6e 67 65 64 20 76 61 6c 75 65
>1824	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>182c	74 65 20 53 65 6c 65 63 74 65 64
>1837	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>183f	65
>1840	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1841					EHPrintAscii:
.1841	a0 00		ldy #$00			ldy 	#0
.1843	b1 2a		lda ($2a),y			lda 	(temp0),y
.1845	aa		tax				tax
.1846	f0 0d		beq $1855			beq 	_EHPExit
.1848					_EHPLoop:
.1848	c8		iny				iny
.1849	da		phx				phx
.184a	b1 2a		lda ($2a),y			lda 	(temp0),y
.184c	a2 16		ldx #$16		ldx	#22
.184e	20 e7 14	jsr $14e7		jsr	deviceHandler
.1851	fa		plx				plx
.1852	ca		dex				dex
.1853	d0 f3		bne $1848			bne 	_EHPLoop
.1855					_EHPExit:
.1855	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1856					section_end_error:
.1856					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1856					ExtensionHandler:
.1856	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1858	f0 16		beq $1870			beq 	_ExtensionForce
.185a	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.185c	d0 08		bne $1866			bne 	_ExtensionUnary 			; is passed in A.
.185e	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1860	c8		iny				iny
.1861	0a		asl a				asl 	a
.1862	aa		tax				tax
.1863	7c 67 18	jmp ($1867,x)			jmp 	(Group2Vectors-12,x)
.1866					_ExtensionUnary:
.1866	48		pha				pha 								; save stack pos in A
.1867	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1869	c8		iny				iny
.186a	0a		asl a				asl 	a
.186b	aa		tax				tax
.186c	68		pla				pla 								; restore stack pos and call group3 command.
.186d	7c 83 18	jmp ($1883,x)			jmp 	(Group3Vectors-12,x)
.1870					_ExtensionForce:
.1870	4c 85 22	jmp $2285			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1873					Group2Vectors:
>1873	5d 24					.word	Command_VPoke            ; $86 vpoke
>1875	60 24					.word	Command_VDoke            ; $87 vdoke
>1877	35 24					.word	Command_VLoad            ; $88 vload
>1879	97 22					.word	CommandMode              ; $89 mode
>187b	55 23					.word	CommandPalette           ; $8a palette
>187d	c4 1f					.word	CommandSprite            ; $8b sprite
>187f	c5 1d					.word	CommandClg               ; $8c clg
>1881	c7 1a					.word	Command_Rect             ; $8d rect
>1883	cf 1a					.word	Command_Frame            ; $8e frame
>1885	8c 23					.word	Command_Draw             ; $8f draw
>1887	b4 1a					.word	Command_Plot             ; $90 plot
>1889	8e 19					.word	Command_Line             ; $91 line
>188b	0f 21					.word	Command_Paint            ; $92 paint
>188d	ad 31					.word	Unimplemented            ; $93 sound

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.188f					Group3Vectors:
>188f	a9 24					.word	Command_VPeek            ; $86 vpeek(
>1891	ac 24					.word	Command_VDeek            ; $87 vdeek(
>1893	57 22					.word	Sprite_GetX              ; $88 sprite.x(
>1895	5a 22					.word	Sprite_GetY              ; $89 sprite.y(
>1897	0c 1f					.word	FunctionCollide          ; $8a hit(
>1899	64 1e					.word	Unary_JoyX               ; $8b joy.x(
>189b	67 1e					.word	Unary_JoyY               ; $8c joy.y(
>189d	a0 1e					.word	Unary_JButton            ; $8d joy.b(
>189f	39 1e					.word	Unary_Clock              ; $8e clock(
>18a1	ad 31					.word	Unimplemented            ; $8f playing(

;******  Return to file: extension/extensionhandler.asm

.18a3					XEvaluateInteger:
.18a3	8a		txa				txa
.18a4	a2 0a		ldx #$0a		ldx	#10
.18a6	20 0a 3e	jsr $3e0a		jsr	mainHandler
.18a9	aa		tax				tax
.18aa	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be8					gStartStorage:
.0be8					gCurrentXPos:
>0be8							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0bea					gCurrentYPos:
>0bea							.fill 	2
.0bec					gX1:
>0bec							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bee					gY1:
>0bee							.fill 	2
.0bf0					gX2:
>0bf0							.fill 	2
.0bf2					gY2:
>0bf2							.fill 	2
.0bf4					gError:
>0bf4							.fill 	2
.0bf6					g2Error:
>0bf6							.fill 	2
.0bf8					gdx:
>0bf8							.fill 	2
.0bfa					gdy:
>0bfa							.fill 	2
.0bfc					gWordHandler:
>0bfc							.fill 	2
.0bfe					gModifiers:
.0bfe					gdInk:
>0bfe							.fill 	1
.0bff					gdPaper:
>0bff							.fill 	1
.0c00					gdSize:
>0c00							.fill 	1
.0c01					gdImage:
>0c01							.fill 	1
.0c02					gdFlip:
>0c02							.fill 	1
.0c03					gEndStorage:
.0c03					gdXLimit:
>0c03							.fill 	2
.0c05					gdYLimit:
>0c05							.fill 	2
.0c07					gdText:
>0c07							.fill 	2
.18ab					GResetStorage:
.18ab	da		phx				phx
.18ac	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18ae	a9 00		lda #$00			lda 	#0
.18b0					_GRSLoop:
.18b0	9d e8 0b	sta $0be8,x			sta 	gStartStorage,x
.18b3	ca		dex				dex
.18b4	10 fa		bpl $18b0			bpl 	_GRSLoop
.18b6	a9 01		lda #$01			lda 	#1
.18b8	8d fe 0b	sta $0bfe			sta 	gdInk
.18bb	8d 00 0c	sta $0c00			sta 	gdSize
.18be	fa		plx				plx
.18bf	60		rts				rts
.18c0					GHandler:
.18c0	8e fd 0b	stx $0bfd			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18c3	8d fc 0b	sta $0bfc			sta 	gWordHandler
.18c6	a9 00		lda #$00			lda 	#0							; default no text.
.18c8	8d 08 0c	sta $0c08			sta 	gdText+1
.18cb	88		dey				dey 								; predecrement
.18cc					_GHLoopNext:
.18cc	c8		iny				iny									; advance one character
.18cd					_GHLoop:
.18cd	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18cf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d1	f0 f9		beq $18cc			beq 	_GHLoopNext
.18d3	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18d5	f0 4c		beq $1923			beq 	_GHExit
.18d7	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18d9	f0 48		beq $1923			beq 	_GHExit
.18db	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18dd	f0 35		beq $1914			beq 	_GHCallHandler 				; update post & call the handler
.18df	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e1	f0 31		beq $1914			beq 	_GHCallHandler
.18e3	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18e5	f0 14		beq $18fb			beq 	_GHCPairSkip
.18e7	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.18e9	f0 39		beq $1924			beq 	_GHText
.18eb	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18ed					_GHCheckTokens:
.18ed	b1 28		lda ($28),y			lda 	(codePtr),y
.18ef	dd 39 19	cmp $1939,x			cmp 	_GHTokenTable,x
.18f2	f0 0e		beq $1902			beq 	_GHFoundToken
.18f4	e8		inx				inx
.18f5	bd 39 19	lda $1939,x			lda 	_GHTokenTable,x
.18f8	d0 f3		bne $18ed			bne 	_GHCheckTokens
.18fa	88		dey				dey
.18fb					_GHCPairSkip:
.18fb	c8		iny				iny
.18fc					_GHCPair:
.18fc	20 3f 19	jsr $193f			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.18ff	4c cd 18	jmp $18cd			jmp 	_GHLoop
.1902					_GHFoundToken:
.1902	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1903	da		phx				phx
.1904	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1906	a2 0c		ldx #$0c		ldx	#12
.1908	20 0a 3e	jsr $3e0a		jsr	mainHandler
.190b	fa		plx				plx
.190c	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.190e	9d fe 0b	sta $0bfe,x			sta 	gModifiers,x 				; update the modifiers
.1911	4c cd 18	jmp $18cd			jmp 	_GHLoop 					; and loop back
.1914					_GHCallHandler:
.1914	c8		iny				iny 								; consume AT or TO.
.1915	20 3f 19	jsr $193f			jsr 	GHMakeCurrent 				; update the coordinates.
.1918	5a		phy				phy
.1919	20 20 19	jsr $1920			jsr 	_GHCallHandlerCode 			; call the handler code
.191c	7a		ply				ply
.191d	4c cd 18	jmp $18cd			jmp 	_GHLoop 					; and loop round.
.1920					_GHCallHandlerCode:
.1920	6c fc 0b	jmp ($0bfc)			jmp 	(gWordHandler)
.1923					_GHExit:
.1923	60		rts				rts
.1924					_GHText:
.1924	c8		iny				iny 								; skip token
.1925	a9 00		lda #$00			lda 	#0 							; get string.
.1927	a2 0e		ldx #$0e		ldx	#14
.1929	20 0a 3e	jsr $3e0a		jsr	mainHandler
.192c	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.192e	8d 07 0c	sta $0c07			sta 	gdText
.1931	a5 a0		lda $a0				lda 	esInt1
.1933	8d 08 0c	sta $0c08			sta 	gdText+1
.1936	4c cd 18	jmp $18cd			jmp 	_GHLoop
.1939					_GHTokenTable:
>1939	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>193e	00						.byte 	0
.193f					GHMakeCurrent:
.193f	da		phx				phx
.1940	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1942	20 51 19	jsr $1951			jsr 	_GHMCDoIt
.1945	a2 02		ldx #$02		ldx	#2
.1947	20 0a 3e	jsr $3e0a		jsr	mainHandler
.194a	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.194c	20 51 19	jsr $1951			jsr 	_GHMCDoIt
.194f	fa		plx				plx
.1950	60		rts				rts
.1951					_GHMCDoIt:
.1951	bd e8 0b	lda $0be8,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1954	9d ec 0b	sta $0bec,x			sta 	gX1,x
.1957	bd e9 0b	lda $0be9,x			lda 	gCurrentXPos+1,x
.195a	9d ed 0b	sta $0bed,x			sta 	gX1+1,x
.195d	da		phx				phx
.195e	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1960	a2 0a		ldx #$0a		ldx	#10
.1962	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1965	fa		plx				plx
.1966	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1968	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.196b	a5 a0		lda $a0				lda 	esInt1
.196d	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1970	b0 17		bcs $1989			bcs 	_GMHCRange
.1972	a5 a8		lda $a8				lda 	esInt2
.1974	05 b0		ora $b0				ora 	esInt3
.1976	d0 11		bne $1989			bne 	_GMHCRange
.1978	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.197a	9d e8 0b	sta $0be8,x			sta 	gCurrentXPos,x
.197d	9d f0 0b	sta $0bf0,x			sta 	gX2,x
.1980	a5 a0		lda $a0				lda 	esInt1
.1982	9d e9 0b	sta $0be9,x			sta 	gCurrentXPos+1,x
.1985	9d f1 0b	sta $0bf1,x			sta 	gX2+1,x
.1988	60		rts				rts
.1989					_GMHCRange:
.1989	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.198b	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c09					gdySign:
>0c09							.fill 	1
.198e					Command_Line:
.198e	a9 96		lda #$96			lda 	#LineHandler & $FF
.1990	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.1992	20 c0 18	jsr $18c0			jsr 	GHandler
.1995	60		rts				rts
.1996					LineHandler:
.1996	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.1998	a0 04		ldy #$04			ldy 	#gX2-gX1
.199a	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.199d	f0 09		beq $19a8			beq 	_LHRectCode
.199f	a2 02		ldx #$02			ldx 	#gY1-gX1
.19a1	a0 06		ldy #$06			ldy 	#gY2-gX1
.19a3	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.19a6	d0 03		bne $19ab			bne 	_LHLineDrawer
.19a8					_LHRectCode:
.19a8	4c db 1a	jmp $1adb			jmp 	RectHandler
.19ab					_LHLineDrawer:
.19ab	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19ad	a0 04		ldy #$04			ldy 	#gX2-gX1
.19af	20 5f 1c	jsr $1c5f			jsr 	CompareCoords
.19b2	90 0a		bcc $19be			bcc 	_LHNoSwap
.19b4	20 a7 1c	jsr $1ca7			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19b7	a2 02		ldx #$02			ldx 	#gY1-gX1
.19b9	a0 06		ldy #$06			ldy 	#gY2-gX1
.19bb	20 a7 1c	jsr $1ca7			jsr 	GSwapCoords
.19be					_LHNoSwap:
.19be	20 e7 19	jsr $19e7			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19c1	a0 00		ldy #$00			ldy 	#gX1-gX1
.19c3	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19c6	b0 15		bcs $19dd			bcs 	_LHExit 					; line off screen.
.19c8					_LHDrawLoop:
.19c8	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19ca	a0 04		ldy #$04			ldy 	#gX2-gX1
.19cc	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.19cf	d0 0d		bne $19de			bne 	_LHNextPixel
.19d1	a2 06		ldx #$06			ldx 	#gY2-gX1
.19d3	a0 06		ldy #$06			ldy 	#gY2-gX1
.19d5	20 74 1c	jsr $1c74			jsr 	CompareCoordsEq
.19d8	d0 04		bne $19de			bne 	_LHNextPixel
.19da	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; plot the last pixel.
.19dd					_LHExit:
.19dd	60		rts				rts
.19de					_LHNextPixel:
.19de	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; plot the pixel.
.19e1	20 3b 1a	jsr $1a3b			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19e4	4c c8 19	jmp $19c8			jmp  	_LHDrawLoop 				; and loop back if okay
.19e7					BresenhamInitialise:
.19e7	38		sec				sec
.19e8	ad f0 0b	lda $0bf0			lda 	gX2
.19eb	ed ec 0b	sbc $0bec			sbc 	gX1
.19ee	8d f8 0b	sta $0bf8			sta 	gdX
.19f1	ad f1 0b	lda $0bf1			lda 	gX2+1
.19f4	ed ed 0b	sbc $0bed			sbc 	gX1+1
.19f7	8d f9 0b	sta $0bf9			sta 	gdX+1
.19fa	38		sec				sec
.19fb	ad ee 0b	lda $0bee			lda 	gY1
.19fe	ed f2 0b	sbc $0bf2			sbc 	gY2
.1a01	8d fa 0b	sta $0bfa			sta 	gdy
.1a04	ad ef 0b	lda $0bef			lda 	gY1+1
.1a07	ed f3 0b	sbc $0bf3			sbc 	gY2+1
.1a0a	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a0d	ad fb 0b	lda $0bfb			lda 	gdy+1 						; save sign of dy
.1a10	8d 09 0c	sta $0c09			sta 	gdysign
.1a13	30 12		bmi $1a27			bmi 	_BINormal
.1a15	38		sec				sec
.1a16	a9 00		lda #$00			lda 	#0
.1a18	ed fa 0b	sbc $0bfa			sbc 	gdy
.1a1b	8d fa 0b	sta $0bfa			sta 	gdy
.1a1e	a9 00		lda #$00			lda 	#0
.1a20	ed fb 0b	sbc $0bfb			sbc 	gdy+1
.1a23	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a26	60		rts				rts
.1a27					_BINormal:
.1a27	18		clc				clc
.1a28	ad f8 0b	lda $0bf8			lda 	gdx
.1a2b	6d fa 0b	adc $0bfa			adc 	gdy
.1a2e	8d f4 0b	sta $0bf4			sta 	gError
.1a31	ad f9 0b	lda $0bf9			lda 	gdx+1
.1a34	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a37	8d f5 0b	sta $0bf5			sta 	gError+1
.1a3a	60		rts				rts
.1a3b					BresenhamIteration:
.1a3b	ad f4 0b	lda $0bf4			lda 	gError
.1a3e	0a		asl a				asl 	a
.1a3f	8d f6 0b	sta $0bf6			sta 	g2Error
.1a42	ad f5 0b	lda $0bf5			lda 	gError+1
.1a45	2a		rol a				rol 	a
.1a46	8d f7 0b	sta $0bf7			sta 	g2Error+1
.1a49	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a4b	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a4d	20 6c 1c	jsr $1c6c			jsr 	CompareCoordsSigned
.1a50	30 03		bmi $1a55			bmi 	_BINoE2DY
.1a52	20 62 1a	jsr $1a62			jsr 	BresenhamE2GEDY
.1a55					_BINoE2DY:
.1a55	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a57	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a59	20 6c 1c	jsr $1c6c			jsr 	CompareCoordsSigned
.1a5c	30 03		bmi $1a61			bmi 	_BINoDXE2
.1a5e	20 81 1a	jsr $1a81			jsr 	BresenhamDXGEE2
.1a61					_BINoDXE2:
.1a61	60		rts				rts
.1a62					BresenhamE2GEDY:
.1a62	18		clc				clc
.1a63	ad f4 0b	lda $0bf4			lda 	gError
.1a66	6d fa 0b	adc $0bfa			adc 	gdy
.1a69	8d f4 0b	sta $0bf4			sta 	gError
.1a6c	ad f5 0b	lda $0bf5			lda 	gError+1
.1a6f	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a72	8d f5 0b	sta $0bf5			sta 	gError+1
.1a75	ee ec 0b	inc $0bec			inc 	gX1
.1a78	d0 03		bne $1a7d			bne 	_BE2Skip
.1a7a	ee ed 0b	inc $0bed			inc 	gX1+1
.1a7d					_BE2Skip:
.1a7d	20 c4 1c	jsr $1cc4			jsr 	gdMvRight
.1a80	60		rts				rts
.1a81					BresenhamDXGEE2:
.1a81	18		clc				clc
.1a82	ad f4 0b	lda $0bf4			lda 	gError
.1a85	6d f8 0b	adc $0bf8			adc 	gdx
.1a88	8d f4 0b	sta $0bf4			sta 	gError
.1a8b	ad f5 0b	lda $0bf5			lda 	gError+1
.1a8e	6d f9 0b	adc $0bf9			adc 	gdx+1
.1a91	8d f5 0b	sta $0bf5			sta 	gError+1
.1a94	ad 09 0c	lda $0c09			lda 	gdySign
.1a97	10 0c		bpl $1aa5			bpl 	_BEDXInvertY
.1a99	ee ee 0b	inc $0bee			inc 	gY1
.1a9c	d0 03		bne $1aa1			bne 	_BEDXSkip
.1a9e	ee ef 0b	inc $0bef			inc 	gY1+1
.1aa1					_BEDXSkip:
.1aa1	20 ff 1c	jsr $1cff			jsr 	gdMvDown
.1aa4	60		rts				rts
.1aa5					_BEDXInvertY:
.1aa5	ad ee 0b	lda $0bee			lda 	gY1
.1aa8	d0 03		bne $1aad			bne 	_BEDXSkip2
.1aaa	ce ef 0b	dec $0bef			dec 	gY1+1
.1aad					_BEDXSkip2:
.1aad	ce ee 0b	dec $0bee			dec 	gY1
.1ab0	20 da 1c	jsr $1cda			jsr 	gdMvUp
.1ab3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1ab4					Command_Plot:
.1ab4	a9 bc		lda #$bc			lda 	#PlotHandler & $FF
.1ab6	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ab8	20 c0 18	jsr $18c0			jsr 	GHandler
.1abb	60		rts				rts
.1abc					PlotHandler:
.1abc	a0 04		ldy #$04			ldy 	#gX2-gX1
.1abe	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1ac1	b0 03		bcs $1ac6			bcs 	_PHExit 					; off screen, return with CS.
.1ac3	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; pixel in Ink.
.1ac6	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c0a					frameFlag:
>0c0a							.fill 	1
.1ac7					Command_Rect:
.1ac7	a9 db		lda #$db			lda 	#RectHandler & $FF
.1ac9	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1acb	20 c0 18	jsr $18c0			jsr 	GHandler
.1ace	60		rts				rts
.1acf					Command_Frame:
.1acf	a9 d7		lda #$d7			lda 	#FrameHandler & $FF
.1ad1	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1ad3	20 c0 18	jsr $18c0			jsr 	GHandler
.1ad6	60		rts				rts
.1ad7					FrameHandler:
.1ad7	a9 01		lda #$01			lda 	#1
.1ad9	d0 02		bne $1add			bne 	RectHandler+2
.1adb					RectHandler:
.1adb	a9 00		lda #$00			lda 	#0
.1add	8d 0a 0c	sta $0c0a			sta 	frameFlag
.1ae0	20 83 1c	jsr $1c83			jsr 	BoxSort 					; sort so topleft/bottom right
.1ae3	20 0c 1b	jsr $1b0c			jsr 	DrawBoxPart 				; solid first line
.1ae6					_FHLoop:
.1ae6	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1ae8	a0 06		ldy #$06			ldy 	#gY2-gX1
.1aea	20 5f 1c	jsr $1c5f			jsr 	CompareCoords
.1aed	b0 19		bcs $1b08			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1aef	ad 0a 0c	lda $0c0a			lda 	frameFlag 					; identify solid or frame ?
.1af2	f0 06		beq $1afa			beq 	_FHIsSolidRect
.1af4	20 25 1b	jsr $1b25			jsr 	DrawBoxEnds
.1af7	4c fd 1a	jmp $1afd			jmp 	_FHNext
.1afa					_FHIsSolidRect:
.1afa	20 0c 1b	jsr $1b0c			jsr 	DrawBoxPart
.1afd					_FHNext:
.1afd	ee ee 0b	inc $0bee			inc 	gY1 						; bump Y1 and loop back.
.1b00	d0 e4		bne $1ae6			bne 	_FHLoop
.1b02	ee ef 0b	inc $0bef			inc 	gY1+1
.1b05	4c e6 1a	jmp $1ae6			jmp 	_FHLoop
.1b08					_FHLastLine:
.1b08	20 0c 1b	jsr $1b0c			jsr 	DrawBoxPart 				; solid last line whatever
.1b0b					_FHExit:
.1b0b	60		rts				rts
.1b0c					DrawBoxPart:
.1b0c	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b0e	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b11	38		sec				sec 								; calculate line length => temp0
.1b12	ad f0 0b	lda $0bf0			lda 	gX2
.1b15	ed ec 0b	sbc $0bec			sbc 	gX1
.1b18	48		pha				pha
.1b19	ad f1 0b	lda $0bf1			lda 	gX2+1
.1b1c	ed ed 0b	sbc $0bed			sbc 	gx1+1
.1b1f	aa		tax				tax
.1b20	68		pla				pla 								; line length in XA.
.1b21	20 3d 1b	jsr $1b3d			jsr 	DrawHorizontalLine
.1b24	60		rts				rts
.1b25					DrawBoxEnds:
.1b25	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b27	20 49 1c	jsr $1c49			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b2a	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; LH end.
.1b2d	ad f0 0b	lda $0bf0			lda 	gX2 						; set position to X2,Y1
.1b30	ae f1 0b	ldx $0bf1			ldx 	gX2+1
.1b33	20 10 1e	jsr $1e10			jsr 	gdSetX
.1b36	20 21 1d	jsr $1d21			jsr		gdSetDrawPosition 			; update position.
.1b39	20 63 1d	jsr $1d63			jsr 	gdPlotInk 					; RH end.
.1b3c	60		rts				rts
.1b3d					DrawHorizontalLine:
.1b3d	86 32		stx $32				stx 	tempShort
.1b3f	aa		tax				tax
.1b40	a4 32		ldy $32				ldy 	tempShort
.1b42	ad fe 0b	lda $0bfe			lda 	gdInk
.1b45	4c 1e 1e	jmp $1e1e			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c0b					RenderFunction:
>0c0b							.fill 	2
.0c0d					RenderWidth:
>0c0d							.fill 	1
.0c0e					RenderHeight:
>0c0e							.fill 	1
.0c0f					RenderType:
>0c0f							.fill 	1
.0c10					RenderCache:
>0c10							.fill 	64
.1b48					ImageRenderer:
.1b48	8e 0c 0c	stx $0c0c			stx 	RenderFunction+1
.1b4b	8d 0b 0c	sta $0c0b			sta 	RenderFunction
.1b4e	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b50	20 31 1c	jsr $1c31			jsr 	CallRenderFunction
.1b53	8d 0f 0c	sta $0c0f			sta 	RenderType 					; and save it.
.1b56	8e 0d 0c	stx $0c0d			stx 	RenderWidth
.1b59	8c 0e 0c	sty $0c0e			sty 	RenderHeight
.1b5c	8a		txa				txa 								; check X coordinate
.1b5d	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b5f	20 f8 1b	jsr $1bf8			jsr 	RenderCheckRange
.1b62	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; check Y coordinate
.1b65	a2 02		ldx #$02			ldx 	#2
.1b67	20 f8 1b	jsr $1bf8			jsr 	RenderCheckRange
.1b6a	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b6c					_IRLoop1:
.1b6c	5a		phy				phy
.1b6d	20 d4 1b	jsr $1bd4			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1b70	20 31 1c	jsr $1c31			jsr 	CallRenderFunction 			; fill the rendering cache.
.1b73	7a		ply				ply
.1b74	ae 00 0c	ldx $0c00			ldx 	gdSize 						; number of times to do the row.
.1b77					_IRLoop2:
.1b77	20 84 1b	jsr $1b84			jsr 	RenderDrawRow 				; draw one row.
.1b7a	ca		dex				dex 								; scale # times.
.1b7b	d0 fa		bne $1b77			bne 	_IRLoop2
.1b7d	c8		iny				iny 								; next vertical row
.1b7e	cc 0e 0c	cpy $0c0e			cpy 	RenderHeight 				; done the lot ?
.1b81	d0 e9		bne $1b6c			bne 	_IRLoop1
.1b83	60		rts				rts
.1b84					RenderDrawRow:
.1b84	da		phx				phx
.1b85	5a		phy				phy
.1b86	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1b88	20 49 1c	jsr $1c49			jsr 	SetupXY
.1b8b	7a		ply				ply
.1b8c	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1b8e					_RDRLoop1:
.1b8e	20 a1 1b	jsr $1ba1			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1b91	e8		inx				inx
.1b92	ec 0d 0c	cpx $0c0d			cpx 	RenderWidth 				; until done the whole lot.
.1b95	d0 f7		bne $1b8e			bne 	_RDRLoop1
.1b97	ee f2 0b	inc $0bf2			inc 	gY2 						; next line down
.1b9a	d0 03		bne $1b9f			bne 	_RDRNoCarry
.1b9c	ee f3 0b	inc $0bf3			inc 	gY2+1
.1b9f					_RDRNoCarry:
.1b9f	fa		plx				plx
.1ba0	60		rts				rts
.1ba1					RenderDrawPixelSet:
.1ba1	da		phx				phx
.1ba2	5a		phy				phy
.1ba3	20 d4 1b	jsr $1bd4			jsr 	RenderFlipXY 				; flip positions as required.
.1ba6	20 be 1b	jsr $1bbe			jsr 	RenderGetInk				; get colour to draw with.
.1ba9	ae 00 0c	ldx $0c00			ldx 	gdSize 						; X counts the size.
.1bac					_RDPSLoop:
.1bac	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bae	f0 03		beq $1bb3			beq 	_RDPSNoDraw
.1bb0	20 66 1d	jsr $1d66			jsr 	gdPlotA 					; draw A otherwise
.1bb3					_RDPSNoDraw:
.1bb3	48		pha				pha 								; move right
.1bb4	20 c4 1c	jsr $1cc4			jsr 	gdMvRight
.1bb7	68		pla				pla
.1bb8	ca		dex				dex
.1bb9	d0 f1		bne $1bac			bne 	_RDPSLoop 					; do it size times.
.1bbb	7a		ply				ply
.1bbc	fa		plx				plx
.1bbd	60		rts				rts
.1bbe					RenderGetInk:
.1bbe	ad 0f 0c	lda $0c0f			lda 	RenderType 					; type, if 0 it's a bitmap
.1bc1	f0 04		beq $1bc7			beq 	_RGIBitmap
.1bc3	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bc6	60		rts				rts
.1bc7					_RGIBitmap:
.1bc7	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bca	f0 04		beq $1bd0			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bcc	ad fe 0b	lda $0bfe			lda 	gdInk
.1bcf	60		rts				rts
.1bd0					_RGIBPaper:
.1bd0	ad ff 0b	lda $0bff			lda 	gdPaper
.1bd3	60		rts				rts
.1bd4					RenderFlipXY:
.1bd4	ad 02 0c	lda $0c02			lda 	gdFlip 						; check any flip at all
.1bd7	29 03		and #$03			and 	#3
.1bd9	f0 1c		beq $1bf7			beq 	_RFExit
.1bdb	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1bdc	90 09		bcc $1be7			bcc 	_RFNoHFlip
.1bde	ad 0d 0c	lda $0c0d			lda 	RenderWidth 				; X Flip
.1be1	86 32		stx $32				stx 	tempShort
.1be3	18		clc				clc
.1be4	e5 32		sbc $32				sbc 	tempShort
.1be6	aa		tax				tax
.1be7					_RFNoHFlip:
.1be7	ad 02 0c	lda $0c02			lda 	gdFlip
.1bea	29 02		and #$02			and 	#2 							; bit 1 check
.1bec	f0 09		beq $1bf7			beq 	_RFExit
.1bee	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; Y Flip
.1bf1	84 32		sty $32				sty 	tempShort
.1bf3	18		clc				clc
.1bf4	e5 32		sbc $32				sbc 	tempShort
.1bf6	a8		tay				tay
.1bf7					_RFExit:
.1bf7	60		rts				rts
.1bf8					RenderCheckRange:
.1bf8	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1bfa	ac 00 0c	ldy $0c00			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1bfd	84 2a		sty $2a				sty 	temp0
.1bff	f0 2b		beq $1c2c			beq 	_RCRValue
.1c01	a9 00		lda #$00			lda 	#0 							; total
.1c03					_RCRMultiply:
.1c03	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c05	90 05		bcc $1c0c			bcc 	_RCRNoAdd 					; not adding this time.
.1c07	18		clc				clc
.1c08	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c0a	b0 20		bcs $1c2c			bcs 	_RCRValue 					; overflow
.1c0c					_RCRNoAdd:
.1c0c	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c0e	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c10	d0 f1		bne $1c03			bne 	_RCRMultiply
.1c12	18		clc				clc 								; add to x2 or y2, store in temp0
.1c13	7d f0 0b	adc $0bf0,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c16	85 2a		sta $2a				sta 	temp0
.1c18	bd f1 0b	lda $0bf1,x			lda 	gX2+1,x
.1c1b	69 00		adc #$00			adc 	#0
.1c1d	85 2b		sta $2b				sta 	temp0+1
.1c1f	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c21	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1c24	a5 2b		lda $2b				lda 	temp0+1
.1c26	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1c29	b0 01		bcs $1c2c			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c2b	60		rts				rts
.1c2c					_RCRValue:
.1c2c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c2e	20 09 15	jsr $1509		jsr	errorHandler
.1c31					CallRenderFunction:
.1c31	6c 0b 0c	jmp ($0c0b)			jmp 	(RenderFunction)
.1c34					TestImageAccess:
.1c34	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c36	f0 0a		beq $1c42			beq 	_TIAGetInfo
.1c38	a0 3f		ldy #$3f			ldy 	#63
.1c3a					_TIACreate:
.1c3a	98		tya				tya
.1c3b	99 10 0c	sta $0c10,y			sta 	RenderCache,y
.1c3e	88		dey				dey
.1c3f	10 f9		bpl $1c3a			bpl 	_TIACreate
.1c41	60		rts				rts
.1c42					_TIAGetInfo:
.1c42	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c44	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c46	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c48	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c49					SetupXY:
.1c49	b9 ec 0b	lda $0bec,y			lda 	gX1,y
.1c4c	be ed 0b	ldx $0bed,y			ldx 	gX1+1,y
.1c4f	20 10 1e	jsr $1e10			jsr 	gdSetX
.1c52	b9 ee 0b	lda $0bee,y			lda 	gY1,y
.1c55	be ef 0b	ldx $0bef,y			ldx 	gY1+1,y
.1c58	20 17 1e	jsr $1e17			jsr 	gdSetY
.1c5b	20 21 1d	jsr $1d21			jsr 	gdSetDrawPosition
.1c5e	60		rts				rts
.1c5f					CompareCoords:
.1c5f	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c62	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c65	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1c68	f9 ed 0b	sbc $0bed,y			sbc 	gX1+1,y
.1c6b	60		rts				rts
.1c6c					CompareCoordsSigned:
.1c6c	20 5f 1c	jsr $1c5f			jsr 	CompareCoords
.1c6f	50 02		bvc $1c73			bvc 	_CCSExit
.1c71	49 80		eor #$80			eor 	#$80
.1c73					_CCSExit:
.1c73	60		rts				rts
.1c74					CompareCoordsEq:
.1c74	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c77	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c7a	d0 06		bne $1c82			bne 	_CCEExit
.1c7c	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1c7f	d9 ed 0b	cmp $0bed,y			cmp 	gX1+1,y
.1c82					_CCEExit:
.1c82	60		rts				rts
.1c83					BoxSort:
.1c83	a2 00		ldx #$00			ldx 	#gx1-gx1
.1c85	a0 04		ldy #$04			ldy 	#gx2-gx1
.1c87	20 98 1c	jsr $1c98			jsr 	GCompareCoords
.1c8a	20 a5 1c	jsr $1ca5			jsr 	GSortMinMaxCoords
.1c8d	a2 02		ldx #$02			ldx 	#gy1-gx1
.1c8f	a0 06		ldy #$06			ldy 	#gy2-gx1
.1c91	20 98 1c	jsr $1c98			jsr 	GCompareCoords
.1c94	20 a5 1c	jsr $1ca5			jsr 	GSortMinMaxCoords
.1c97	60		rts				rts
.1c98					GCompareCoords:
.1c98	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1c9b	d9 ec 0b	cmp $0bec,y			cmp 	gx1,y
.1c9e	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1ca1	f9 ed 0b	sbc $0bed,y			sbc 	gx1+1,y
.1ca4	60		rts				rts
.1ca5					GSortMinMaxCoords:
.1ca5	90 1c		bcc $1cc3			bcc 	GSMMCExit
.1ca7					GSwapCoords:
.1ca7	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1caa	48		pha				pha
.1cab	b9 ec 0b	lda $0bec,y			lda 	gx1,y
.1cae	9d ec 0b	sta $0bec,x			sta 	gx1,x
.1cb1	68		pla				pla
.1cb2	99 ec 0b	sta $0bec,y			sta 	gx1,y
.1cb5	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1cb8	48		pha				pha
.1cb9	b9 ed 0b	lda $0bed,y			lda 	gx1+1,y
.1cbc	9d ed 0b	sta $0bed,x			sta 	gx1+1,x
.1cbf	68		pla				pla
.1cc0	99 ed 0b	sta $0bed,y			sta 	gx1+1,y
.1cc3					GSMMCExit:
.1cc3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1cc4					gdMvRight:
.1cc4	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1cc7	d0 08		bne $1cd1			bne 	_gdMR0
.1cc9	ee 21 9f	inc $9f21			inc 	$9F21
.1ccc	d0 03		bne $1cd1			bne 	_gdMR0
.1cce	ee 22 9f	inc $9f22			inc 	$9F22
.1cd1					_gdMR0:
.1cd1	ee 54 0c	inc $0c54			inc 	gdXPos
.1cd4	d0 03		bne $1cd9			bne 	_gdMR1
.1cd6	ee 55 0c	inc $0c55			inc 	gdXPos+1
.1cd9					_gdMR1:
.1cd9	60		rts				rts
.1cda					gdMvUp:
.1cda	ad 56 0c	lda $0c56			lda 	gdYPos 						; decrement Y Pos
.1cdd	d0 03		bne $1ce2			bne 	_gdMU1
.1cdf	ce 57 0c	dec $0c57			dec 	gdYPos+1
.1ce2	ce 56 0c	dec $0c56	_gdMU1:	dec 	gdYPos
.1ce5	38		sec				sec 								; adjust position by -320
.1ce6	ad 20 9f	lda $9f20			lda 	$9F20
.1ce9	e9 40		sbc #$40			sbc 	#64
.1ceb	8d 20 9f	sta $9f20			sta 	$9F20
.1cee	ad 21 9f	lda $9f21			lda 	$9F21
.1cf1	e9 01		sbc #$01			sbc 	#1
.1cf3	8d 21 9f	sta $9f21			sta 	$9F21
.1cf6	ad 22 9f	lda $9f22			lda 	$9F22
.1cf9	e9 00		sbc #$00			sbc 	#0
.1cfb	8d 22 9f	sta $9f22			sta 	$9F22
.1cfe	60		rts				rts
.1cff					gdMvDown:
.1cff	ee 56 0c	inc $0c56			inc 	gdYPos 						; decrement Y Pos
.1d02	d0 03		bne $1d07			bne 	_gdMU1
.1d04	ee 57 0c	inc $0c57			inc 	gdYPos+1
.1d07					_gdMU1:
.1d07	18		clc				clc 								; adjust position by -320
.1d08	ad 20 9f	lda $9f20			lda 	$9F20
.1d0b	69 40		adc #$40			adc 	#64
.1d0d	8d 20 9f	sta $9f20			sta 	$9F20
.1d10	ad 21 9f	lda $9f21			lda 	$9F21
.1d13	69 01		adc #$01			adc 	#1
.1d15	8d 21 9f	sta $9f21			sta 	$9F21
.1d18	ad 22 9f	lda $9f22			lda 	$9F22
.1d1b	69 00		adc #$00			adc 	#0
.1d1d	8d 22 9f	sta $9f22			sta 	$9F22
.1d20	60		rts				rts
.1d21					gdSetDrawPosition:
.1d21	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d23	85 2a		sta $2a				sta 	temp0
.1d25	ad 56 0c	lda $0c56			lda 	gdYPos
.1d28	85 2b		sta $2b				sta 	temp0+1
.1d2a	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d2c	66 2a		ror $2a				ror 	temp0
.1d2e	46 2b		lsr $2b				lsr 	temp0+1
.1d30	66 2a		ror $2a				ror 	temp0
.1d32	ad 56 0c	lda $0c56			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d35	18		clc				clc
.1d36	65 2b		adc $2b				adc 	temp0+1
.1d38	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d3a	18		clc				clc
.1d3b	a5 2a		lda $2a				lda 	temp0
.1d3d	6d 54 0c	adc $0c54			adc 	gdXPos
.1d40	85 2a		sta $2a				sta 	temp0
.1d42	a5 2b		lda $2b				lda 	temp0+1
.1d44	6d 55 0c	adc $0c55			adc 	gdXPos+1
.1d47	85 2b		sta $2b				sta 	temp0+1
.1d49	18		clc				clc
.1d4a	ad 51 0c	lda $0c51			lda 	gdBitmapAddress
.1d4d	65 2a		adc $2a				adc 	temp0
.1d4f	8d 20 9f	sta $9f20			sta 	$9F20
.1d52	ad 52 0c	lda $0c52			lda 	gdBitmapAddress+1
.1d55	65 2b		adc $2b				adc 	temp0+1
.1d57	8d 21 9f	sta $9f21			sta 	$9F21
.1d5a	ad 53 0c	lda $0c53			lda 	gdBitmapAddress+2
.1d5d	69 00		adc #$00			adc 	#0
.1d5f	8d 22 9f	sta $9f22			sta 	$9F22
.1d62	60		rts				rts
.1d63					gdPlotInk:
.1d63	ad fe 0b	lda $0bfe			lda 	gdInk
.1d66					gdPlotA:
.1d66	8d 23 9f	sta $9f23			sta 	$9F23
.1d69	60		rts				rts
.1d6a					gdPlotPaper:
.1d6a	ad ff 0b	lda $0bff			lda 	gdPaper
.1d6d	c9 ff		cmp #$ff			cmp 	#$FF
.1d6f	f0 03		beq $1d74			beq 	_gdPPSkip
.1d71	8d 23 9f	sta $9f23			sta 	$9F23
.1d74					_gdPPSkip:
.1d74	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c50					gdEnabled:
>0c50							.fill 	1
.0c51					gdBitmapAddress:
>0c51							.fill 	3
.0c54					gdXPos:
>0c54							.fill 	2
.0c56					gdYPos:
>0c56							.fill 	2
.1d75					gdModeChanged:
.1d75	da		phx				phx
.1d76	5a		phy				phy
.1d77	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d79	8d 50 0c	sta $0c50			sta 	gdEnabled
.1d7c	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1d7f	c9 40		cmp #$40			cmp 	#$40
.1d81	d0 1f		bne $1da2			bne 	_gdExit
.1d83	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1d86	c9 40		cmp #$40			cmp 	#$40
.1d88	d0 18		bne $1da2			bne 	_gdExit
.1d8a	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1d8d	0a		asl a				asl 	a 							;
.1d8e	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1d8f	10 09		bpl $1d9a			bpl 	_gdNotLayer1
.1d91	48		pha				pha 								; save A
.1d92	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1d94	20 a8 1d	jsr $1da8			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d97	68		pla				pla 								; restore A
.1d98	b0 08		bcs $1da2			bcs 	_gdExit 					; if successful then exit
.1d9a					_gdNotLayer1:
.1d9a	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1d9b	10 05		bpl $1da2			bpl 	_gdExit 					; if not enabled, exit
.1d9d	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1d9f	20 a8 1d	jsr $1da8			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1da2					_gdExit:
.1da2	20 dc 1d	jsr $1ddc			jsr 	gdClearGraphics 			; clear graphics display.
.1da5	7a		ply				ply
.1da6	fa		plx				plx
.1da7	60		rts				rts
.1da8					gdCheckBitmap:
.1da8	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1dab	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1dad	d0 14		bne $1dc3			bne 	_gdCBFail
.1daf	ee 50 0c	inc $0c50			inc 	gdEnabled 					; set the enabled flag to non zero.
.1db2	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1db5	0a		asl a				asl 	a
.1db6	8d 52 0c	sta $0c52			sta 	gdBitmapAddress+1
.1db9	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1dbb	8d 53 0c	sta $0c53			sta 	gdBitmapAddress+2
.1dbe	a9 00		lda #$00			lda 	#$00
.1dc0	8d 51 0c	sta $0c51			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dc3					_gdCBFail:
.1dc3	18		clc				clc
.1dc4	60		rts				rts
.1dc5					CommandClg:
.1dc5	b1 28		lda ($28),y			lda 	(codePtr),y
.1dc7	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1dc9	d0 0d		bne $1dd8			bne 	_CCLClear
.1dcb	c8		iny				iny
.1dcc	a9 00		lda #$00			lda 	#0
.1dce	a2 0c		ldx #$0c		ldx	#12
.1dd0	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1dd3	a5 98		lda $98				lda 	esInt0
.1dd5	8d ff 0b	sta $0bff			sta 	gdPaper
.1dd8					_CCLClear:
.1dd8	20 dc 1d	jsr $1ddc			jsr 	gdClearGraphics
.1ddb	60		rts				rts
.1ddc					gdClearGraphics:
.1ddc	da		phx				phx
.1ddd	5a		phy				phy
.1dde	ad 50 0c	lda $0c50			lda 	gdEnabled 					; screen enabled
.1de1	f0 2a		beq $1e0d			beq 	_gdCGExit
.1de3	a9 40		lda #$40			lda 	#(320) & $FF
.1de5	8d 03 0c	sta $0c03			sta 	gdXLimit
.1de8	a9 01		lda #$01			lda 	#(320) >> 8
.1dea	8d 04 0c	sta $0c04			sta 	1+(gdXLimit)
.1ded	a9 c8		lda #$c8			lda 	#(200) & $FF
.1def	8d 05 0c	sta $0c05			sta 	gdYLimit
.1df2	a9 00		lda #$00			lda 	#(200) >> 8
.1df4	8d 06 0c	sta $0c06			sta 	1+(gdYLimit)
.1df7	a9 00		lda #$00			lda 	#0 							; home cursor
.1df9	aa		tax				tax
.1dfa	20 10 1e	jsr $1e10			jsr 	gdSetX
.1dfd	20 17 1e	jsr $1e17			jsr 	gdSetY
.1e00	20 21 1d	jsr $1d21			jsr 	gdSetDrawPosition 			; set the draw position.
.1e03	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e05	a2 00		ldx #$00			ldx 	#0
.1e07	ad ff 0b	lda $0bff			lda 	gdPaper
.1e0a	20 1e 1e	jsr $1e1e			jsr 	gdOptHorizontalWriter
.1e0d					_gdCGExit:
.1e0d	7a		ply				ply
.1e0e	fa		plx				plx
.1e0f	60		rts				rts
.1e10					gdSetX:
.1e10	8d 54 0c	sta $0c54			sta 	gdXPos
.1e13	8e 55 0c	stx $0c55			stx 	gdXPos+1
.1e16	60		rts				rts
.1e17					gdSetY:
.1e17	8d 56 0c	sta $0c56			sta 	gdYPos
.1e1a	8e 57 0c	stx $0c57			stx 	gdYPos+1
.1e1d	60		rts				rts
.1e1e					gdOptHorizontalWriter:
.1e1e	48		pha				pha
.1e1f	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e22	09 10		ora #$10			ora 	#$10
.1e24	8d 22 9f	sta $9f22			sta 	$9F22
.1e27	68		pla				pla
.1e28					_gdOLoop:
.1e28	8d 23 9f	sta $9f23			sta 	$9F23
.1e2b	e0 00		cpx #$00			cpx 	#0
.1e2d	d0 05		bne $1e34			bne 	_gdNoBorrow
.1e2f	c0 00		cpy #$00			cpy 	#0
.1e31	f0 05		beq $1e38			beq 	_gdExit
.1e33	88		dey				dey
.1e34					_gdNoBorrow:
.1e34	ca		dex				dex
.1e35	4c 28 1e	jmp $1e28			jmp 	_gdOLoop
.1e38					_gdExit:
.1e38	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e39					Unary_Clock:
.1e39	a2 0c		ldx #$0c		ldx	#12
.1e3b	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1e3e	48		pha				pha 								; save stack pos
.1e3f	a2 04		ldx #$04		ldx	#4
.1e41	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1e44	5a		phy				phy
.1e45	20 50 ff	jsr $ff50			jsr 	$FF50
.1e48	7a		ply				ply
.1e49	68		pla				pla 								; restore, repush, put into X to read offset
.1e4a	48		pha				pha
.1e4b	aa		tax				tax
.1e4c	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e4e	c9 06		cmp #$06			cmp 	#6
.1e50	b0 0d		bcs $1e5f			bcs 	_UCValue
.1e52	aa		tax				tax 								; index in X and read RTC.
.1e53	b5 02		lda $02,x			lda 	2,x
.1e55	85 32		sta $32				sta 	tempshort
.1e57	68		pla				pla 								; restore number stack index.
.1e58	aa		tax				tax
.1e59	a5 32		lda $32				lda 	tempShort
.1e5b	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e5d	8a		txa				txa
.1e5e	60		rts				rts
.1e5f					_UCValue:
.1e5f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e61	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e64					Unary_JoyX:
.1e64	38		sec				sec
.1e65	b0 01		bcs $1e68			bcs 	JoystickRead
.1e67					Unary_JoyY:
.1e67	18		clc				clc
.1e68					JoystickRead:
.1e68	48		pha				pha 								; save stack position
.1e69	08		php				php 								; save test flag.
.1e6a	a2 04		ldx #$04		ldx	#4
.1e6c	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1e6f	20 c6 1e	jsr $1ec6			jsr 	ReadJoystick 				; read it.
.1e72	28		plp				plp
.1e73	b0 02		bcs $1e77			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e75	4a		lsr a				lsr 	a
.1e76	4a		lsr a				lsr 	a
.1e77					_JRNoShift:
.1e77	29 03		and #$03			and 	#3 							; isolate the test bits.
.1e79	f0 0d		beq $1e88			beq 	JoyReturnA 					; if nothing pressed, return A.
.1e7b	c9 03		cmp #$03			cmp 	#3
.1e7d	f0 07		beq $1e86			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1e7f	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1e80	b0 15		bcs $1e97			bcs 	JoyReturn1
.1e82					JoyReturnTrue:
.1e82	a9 ff		lda #$ff			lda 	#$FF
.1e84	d0 02		bne $1e88			bne 	JoyReturnA
.1e86					JoyReturnFalse:
.1e86	a9 00		lda #$00			lda 	#0
.1e88					JoyReturnA:
.1e88	85 32		sta $32				sta 	tempShort 					; return A
.1e8a	fa		plx				plx
.1e8b	a5 32		lda $32				lda 	tempShort
.1e8d	95 98		sta $98,x			sta 	esInt0,x
.1e8f					JoyReturn13:
.1e8f	95 a0		sta $a0,x			sta 	esInt1,x
.1e91	95 a8		sta $a8,x			sta 	esInt2,x
.1e93	95 b0		sta $b0,x			sta 	esInt3,x
.1e95	8a		txa				txa 								; return NSP in A
.1e96	60		rts				rts
.1e97					JoyReturn1:
.1e97	fa		plx				plx
.1e98	a9 01		lda #$01			lda 	#1
.1e9a	95 98		sta $98,x			sta 	esInt0,x
.1e9c	a9 00		lda #$00			lda 	#0
.1e9e	f0 ef		beq $1e8f			beq 	JoyReturn13
.1ea0					Unary_JButton:
.1ea0	48		pha				pha 								; save X on stack, put in X
.1ea1	a2 0c		ldx #$0c		ldx	#12
.1ea3	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1ea6	aa		tax				tax 								; get value to check, push on stack.
.1ea7	b5 98		lda $98,x			lda 	esInt0,x
.1ea9	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1eab	b0 14		bcs $1ec1			bcs 	_UJBadValue
.1ead	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1eaf	48		pha				pha 								; save that shift count on the stack.
.1eb0	a2 04		ldx #$04		ldx	#4
.1eb2	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1eb5	fa		plx				plx
.1eb6	20 c6 1e	jsr $1ec6			jsr 	ReadJoystick 				; joystick read
.1eb9					_UJShift:
.1eb9	4a		lsr a				lsr 	a
.1eba	ca		dex				dex
.1ebb	d0 fc		bne $1eb9			bne 	_UJShift
.1ebd	b0 c3		bcs $1e82			bcs 	JoyReturnTrue
.1ebf	90 c5		bcc $1e86			bcc 	JoyReturnFalse
.1ec1					_UJBadValue:
.1ec1	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ec3	20 09 15	jsr $1509		jsr	errorHandler
.1ec6					ReadJoystick:
.1ec6	da		phx				phx
.1ec7	5a		phy				phy
.1ec8	a9 00		lda #$00			lda 	#0
.1eca	20 56 ff	jsr $ff56			jsr 	$FF56
.1ecd	c0 00		cpy #$00			cpy 	#0
.1ecf	d0 0f		bne $1ee0			bne 	_RJError
.1ed1	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1ed3	d0 02		bne $1ed7			bne 	_RJNoBug
.1ed5	a9 ff		lda #$ff			lda 	#$FF
.1ed7					_RJNoBug:
.1ed7	85 32		sta $32				sta 	tempShort
.1ed9	7a		ply				ply
.1eda	fa		plx				plx
.1edb	a5 32		lda $32				lda 	tempShort
.1edd	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1edf	60		rts				rts
.1ee0					_RJError:
.1ee0	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ee2	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sound.asm

=16					Channels = 16 								; # of sound channels.
.0c58					LiveChannels:
>0c58							.fill 	1
.0c59					ChannelTime:
>0c59							.fill 	Channels 					; # of ticks until channels goes silent if non-zero
.1ee5					SoundReset:
.1ee5	a9 00		lda #$00			lda 	#0							; no channels playing
.1ee7	8d 58 0c	sta $0c58			sta 	LiveChannels
.1eea	a2 0f		ldx #$0f			ldx 	#Channels-1
.1eec					_SCClear:
.1eec	9d 59 0c	sta $0c59,x			sta 	ChannelTime,x
.1eef	ca		dex				dex
.1ef0	10 fa		bpl $1eec			bpl 	_SCClear
.1ef2	a9 c0		lda #$c0			lda 	#$C0 						; point VRAM data pointer to $1F9C0 increment
.1ef4	8d 20 9f	sta $9f20			sta 	$9F20
.1ef7	a9 f9		lda #$f9			lda 	#$F9
.1ef9	8d 21 9f	sta $9f21			sta 	$9F21
.1efc	a9 11		lda #$11			lda 	#$11
.1efe	8d 22 9f	sta $9f22			sta 	$9F22
.1f01					_SCClear2:
.1f01	a9 00		lda #$00			lda 	#0
.1f03	8d 23 9f	sta $9f23			sta 	$9F23
.1f06	ad 20 9f	lda $9f20			lda 	$9F20
.1f09	d0 f6		bne $1f01			bne 	_SCClear2
.1f0b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c69					hitSprite1:
>0c69							.fill 	1 							; this won't work ... if you nest HIT() which
.0c6a					hitSprite2:
>0c6a							.fill 	1
.0c6b					hitRange:
>0c6b							.fill 	1
.1f0c					FunctionCollide:
.1f0c	48		pha				pha 								; save and put index into X
.1f0d	aa		tax				tax
.1f0e	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1f10	8d 6b 0c	sta $0c6b			sta 	hitRange
.1f13	20 b3 1f	jsr $1fb3			jsr 	_FCGetSpriteID
.1f16	8d 69 0c	sta $0c69			sta 	hitSprite1
.1f19	da		phx				phx
.1f1a	a2 02		ldx #$02		ldx	#2
.1f1c	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1f1f	fa		plx				plx
.1f20	20 b3 1f	jsr $1fb3			jsr 	_FCGetSpriteID
.1f23	8d 6a 0c	sta $0c6a			sta 	hitSprite2
.1f26	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1f28	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f2a	f0 12		beq $1f3e			beq 	_FCParam2
.1f2c	da		phx				phx
.1f2d	a2 02		ldx #$02		ldx	#2
.1f2f	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1f32	68		pla				pla
.1f33	a2 0c		ldx #$0c		ldx	#12
.1f35	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1f38	aa		tax				tax
.1f39	b5 98		lda $98,x			lda 	esInt0,x
.1f3b	8d 6b 0c	sta $0c6b			sta 	hitRange
.1f3e					_FCParam2:
.1f3e	a2 04		ldx #$04		ldx	#4
.1f40	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1f43	68		pla				pla 								; set X to point to the stack again.
.1f44	48		pha				pha
.1f45	aa		tax				tax
.1f46	5a		phy				phy
.1f47	18		clc				clc 								; do it with the horizontal values.
.1f48	20 69 1f	jsr $1f69			jsr 	_FCCheck
.1f4b	90 0a		bcc $1f57			bcc 	_FCFail
.1f4d	38		sec				sec 								; do it with the vertical values.
.1f4e	20 69 1f	jsr $1f69			jsr 	_FCCheck
.1f51	90 04		bcc $1f57			bcc 	_FCFail
.1f53	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1f55	d0 02		bne $1f59			bne 	_FCReturnA
.1f57					_FCFail:
.1f57	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1f59					_FCReturnA:
.1f59	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1f5b	7a		ply				ply
.1f5c	68		pla				pla 								; restore stack, return result and exit.
.1f5d	aa		tax				tax
.1f5e	a5 32		lda $32				lda 	tempShort
.1f60	95 98		sta $98,x			sta 	esInt0,x
.1f62	95 a0		sta $a0,x			sta 	esInt1,x
.1f64	95 a8		sta $a8,x			sta 	esInt2,x
.1f66	95 b0		sta $b0,x			sta 	esInt3,x
.1f68	60		rts				rts
.1f69					_FCCheck:
.1f69	08		php				php 								; save the H/V flag twice
.1f6a	08		php				php
.1f6b	ad 69 0c	lda $0c69			lda 	hitSprite1 					; select sprite 1 and read its location
.1f6e	20 f1 20	jsr $20f1			jsr 	SelectSpriteA 				; into X
.1f71	28		plp				plp
.1f72	20 15 22	jsr $2215			jsr 	SpriteReadCoordinate
.1f75	ad 6a 0c	lda $0c6a			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1f78	20 f1 20	jsr $20f1			jsr 	SelectSpriteA
.1f7b	e8		inx				inx
.1f7c	28		plp				plp
.1f7d	20 15 22	jsr $2215			jsr 	SpriteReadCoordinate
.1f80	ca		dex				dex
.1f81	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1f82	b5 98		lda $98,x			lda 	esInt0,x
.1f84	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1f86	85 2a		sta $2a				sta 	temp0
.1f88	b5 a0		lda $a0,x			lda 	esInt1,x
.1f8a	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1f8c	85 2b		sta $2b				sta 	temp0+1
.1f8e	10 0d		bpl $1f9d			bpl 	_FCCIsPositive
.1f90	38		sec				sec 								; if -ve calculate |difference|
.1f91	a9 00		lda #$00			lda 	#0
.1f93	e5 2a		sbc $2a				sbc 	temp0
.1f95	85 2a		sta $2a				sta 	temp0
.1f97	a9 00		lda #$00			lda 	#0
.1f99	e5 2b		sbc $2b				sbc 	temp0+1
.1f9b	85 2b		sta $2b				sta 	temp0+1
.1f9d					_FCCIsPositive:
.1f9d	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1f9f	d0 10		bne $1fb1			bne 	_FCCFail
.1fa1	18		clc				clc 								; work out required min distance which is
.1fa2	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1fa4	75 b1		adc $b1,x			adc 	esInt3+1,x
.1fa6	ac 6b 0c	ldy $0c6b			ldy 	hitRange 					; get the hit range
.1fa9	f0 01		beq $1fac			beq 	_FCCNoSetRange 				; override if non zero.
.1fab	98		tya				tya
.1fac					_FCCNoSetRange:
.1fac	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1fae	f0 01		beq $1fb1			beq 	_FCCFail
.1fb0	60		rts				rts
.1fb1					_FCCFail:
.1fb1	18		clc				clc
.1fb2	60		rts				rts
.1fb3					_FCGetSpriteID:
.1fb3	8a		txa				txa
.1fb4	a2 0c		ldx #$0c		ldx	#12
.1fb6	20 0a 3e	jsr $3e0a		jsr	mainHandler
.1fb9	aa		tax				tax
.1fba	b5 98		lda $98,x			lda 	esInt0,x
.1fbc	30 01		bmi $1fbf			bmi 	_FCGSValue
.1fbe	60		rts				rts
.1fbf					_FCGSValue:
.1fbf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fc1	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c6c					currSprite:
>0c6c							.fill 	2
.1fc4					CommandSprite:
.1fc4	20 c6 20	jsr $20c6			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1fc7	d0 0d		bne $1fd6			bne 	_CSCheckClear
.1fc9	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1fcc	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1fce	90 02		bcc $1fd2			bcc 	_CSNotOn 					; if CS turn on, so set it
.1fd0	09 40		ora #$40			ora 	#$40
.1fd2					_CSNotOn:
.1fd2	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1fd5	60		rts				rts
.1fd6					_CSCheckClear:
.1fd6	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1fd8	8d 6d 0c	sta $0c6d			sta 	currSprite+1
.1fdb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1fdd	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1fdf	d0 05		bne $1fe6			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1fe1	20 d7 20	jsr $20d7			jsr 	CSClearSprites 				; clear all the sprites
.1fe4	c8		iny				iny 								; consume CLEAR token and exit.
.1fe5	60		rts				rts
.1fe6					_CSCommandLoop:
.1fe6	20 c6 20	jsr $20c6			jsr 	CSCheckOnOff 				; check sprite on/off
.1fe9	f0 2c		beq $2017			beq 	_CSSetVisibility
.1feb	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1fed	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1fef	f0 25		beq $2016			beq 	_CSExit
.1ff1	c8		iny				iny									; consume it
.1ff2	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1ff4	f0 20		beq $2016			beq 	_CSExit
.1ff6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1ff8	f0 ec		beq $1fe6			beq 	_CSCommandLoop
.1ffa	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1ffc	f0 69		beq $2067			beq 	_CSSetImage
.1ffe	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.2000	f0 2b		beq $202d			beq 	_CSSetFlip
.2002	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.2004	f0 46		beq $204c			beq 	_CSSetPos
.2006	88		dey				dey 								; unpick DEY
.2007	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.2009	a2 0c		ldx #$0c		ldx	#12
.200b	20 0a 3e	jsr $3e0a		jsr	mainHandler
.200e	a5 98		lda $98				lda 	esInt0
.2010	20 f1 20	jsr $20f1			jsr 	SelectSpriteA
.2013	4c e6 1f	jmp $1fe6			jmp 	_CSCommandLoop
.2016					_CSExit:
.2016	60		rts				rts
.2017					_CSSetVisibility:
.2017	08		php				php 								; save carry
.2018	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.201a	20 ad 20	jsr $20ad			jsr 	SpriteSetTarget
.201d	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2020	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2022	28		plp				plp
.2023	90 02		bcc $2027			bcc 	_CSSetOff 					; check if carry was set
.2025	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2027					_CSSetOff:
.2027	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.202a	4c e6 1f	jmp $1fe6			jmp 	_CSCommandLoop
.202d					_CSSetFlip:
.202d	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.202f	a2 0c		ldx #$0c		ldx	#12
.2031	20 0a 3e	jsr $3e0a		jsr	mainHandler
.2034	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2036	20 ad 20	jsr $20ad			jsr 	SpriteSetTarget
.2039	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.203b	29 03		and #$03			and 	#3
.203d	85 2a		sta $2a				sta 	temp0
.203f	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.2042	29 fc		and #$fc			and 	#$FC
.2044	05 2a		ora $2a				ora 	temp0
.2046	8d 23 9f	sta $9f23			sta 	$9F23
.2049	4c e6 1f	jmp $1fe6			jmp 	_CSCommandLoop
.204c					_CSSetPos:
.204c	a9 00		lda #$00			lda 	#0 							; X now at level 0
.204e	a2 0a		ldx #$0a		ldx	#10
.2050	20 0a 3e	jsr $3e0a		jsr	mainHandler
.2053	a2 02		ldx #$02		ldx	#2
.2055	20 0a 3e	jsr $3e0a		jsr	mainHandler
.2058	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.205a	a2 0a		ldx #$0a		ldx	#10
.205c	20 0a 3e	jsr $3e0a		jsr	mainHandler
.205f	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2061	20 d3 21	jsr $21d3			jsr 	SpriteMove 					; move it.
.2064	4c e6 1f	jmp $1fe6			jmp 	_CSCommandLoop
.2067					_CSSetImage:
.2067	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2069	a2 0c		ldx #$0c		ldx	#12
.206b	20 0a 3e	jsr $3e0a		jsr	mainHandler
.206e	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.2070	20 ad 20	jsr $20ad			jsr 	SpriteSetTarget
.2073	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2075	bd b4 0c	lda $0cb4,x			lda 	imageAddr32Low,x 			; copy low address in.
.2078	8d 23 9f	sta $9f23			sta 	$9F23
.207b	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.207e	bd 74 0c	lda $0c74,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2081	29 10		and #$10			and 	#$10
.2083	0a		asl a				asl 	a
.2084	0a		asl a				asl		a
.2085	0a		asl a				asl 	a 							; put into bit 7
.2086	1d f4 0c	ora $0cf4,x			ora 	imageAddr32High,x 			; or high address with it.
.2089	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.208c	a9 06		lda #$06			lda 	#6
.208e	20 ad 20	jsr $20ad			jsr 	SpriteSetTarget 			; set sprite on.
.2091	ad 23 9f	lda $9f23			lda 	$9F23
.2094	09 0c		ora #$0c			ora 	#$0C
.2096	8d 23 9f	sta $9f23			sta 	$9F23
.2099	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.209c	bd 74 0c	lda $0c74,x			lda 	imageInfo,x 				; get image info
.209f	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.20a0	0a		asl a				asl 	a
.20a1	0a		asl a				asl 	a
.20a2	0a		asl a				asl 	a
.20a3	b0 02		bcs $20a7			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.20a5	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.20a7					_CSNoOffset:
.20a7	8d 23 9f	sta $9f23			sta 	$9F23
.20aa	4c e6 1f	jmp $1fe6			jmp 	_CSCommandLoop
.20ad					SpriteSetTarget:
.20ad	0d 6c 0c	ora $0c6c			ora 	currSprite
.20b0	8d 20 9f	sta $9f20			sta 	$9F20
.20b3	ad 6d 0c	lda $0c6d			lda 	currSprite+1
.20b6	f0 09		beq $20c1			beq 	_SSTNoSet
.20b8	8d 21 9f	sta $9f21			sta 	$9F21
.20bb	a9 01		lda #$01			lda 	#$01
.20bd	8d 22 9f	sta $9f22			sta 	$9F22
.20c0	60		rts				rts
.20c1					_SSTNoSet:
.20c1	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.20c3	20 09 15	jsr $1509		jsr	errorHandler
.20c6					CSCheckOnOff:
.20c6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.20c8	c8		iny				iny
.20c9	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.20cb	18		clc				clc
.20cc	f0 08		beq $20d6			beq 	_CSCOExit
.20ce	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.20d0	38		sec				sec 								; return NE if neither.
.20d1	f0 03		beq $20d6			beq 	_CSCOExit
.20d3	88		dey				dey 								; undo consume
.20d4	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.20d6					_CSCOExit:
.20d6	60		rts				rts
.20d7					CSClearSprites:
.20d7	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.20d9	8d 22 9f	sta $9f22			sta 	$9F22
.20dc	a9 fc		lda #$fc			lda 	#$FC
.20de	8d 21 9f	sta $9f21			sta 	$9F21
.20e1	a9 00		lda #$00			lda 	#0
.20e3	8d 20 9f	sta $9f20			sta 	$9F20
.20e6					_CSClear:
.20e6	a9 00		lda #$00			lda 	#0 							; set everything to $00
.20e8	8d 23 9f	sta $9f23			sta 	$9F23
.20eb	ad 21 9f	lda $9f21			lda 	$9F21
.20ee	d0 f6		bne $20e6			bne 	_CSClear
.20f0	60		rts				rts
.20f1					SelectSpriteA:
.20f1	85 2a		sta $2a				sta 	temp0
.20f3	a9 00		lda #$00			lda 	#0
.20f5	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.20f7	b0 11		bcs $210a			bcs 	_CSBadValue 				; sprites only 0-127
.20f9	06 2a		asl $2a				asl 	temp0
.20fb	2a		rol a				rol 	a
.20fc	06 2a		asl $2a				asl 	temp0
.20fe	2a		rol a				rol 	a
.20ff	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.2101	8d 6d 0c	sta $0c6d			sta 	currSprite+1
.2104	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.2106	8d 6c 0c	sta $0c6c			sta 	currSprite+0
.2109	60		rts				rts
.210a					_CSBadValue
.210a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.210c	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0c6e					srenderWidth:
>0c6e							.fill 	1
.210f					Command_Paint:
.210f	a9 17		lda #$17			lda 	#ImageHandler & $FF
.2111	a2 21		ldx #$21			ldx 	#ImageHandler >> 8
.2113	20 c0 18	jsr $18c0			jsr 	GHandler
.2116	60		rts				rts
.2117					ImageHandler:
.2117	a9 1e		lda #$1e			lda 	#SpriteImageAccess & $FF
.2119	a2 21		ldx #$21			ldx 	#SpriteImageAccess >> 8
.211b	4c 48 1b	jmp $1b48			jmp 	ImageRenderer
.211e					SpriteImageAccess:
.211e	c0 ff		cpy #$ff			cpy 	#255
.2120	d0 22		bne $2144			bne 	_SIAGetPixel
.2122	ae 01 0c	ldx $0c01			ldx 	gdImage 					; get the image #
.2125	bd 74 0c	lda $0c74,x			lda 	imageInfo,x 				; get the image information.
.2128	48		pha				pha
.2129	29 03		and #$03			and 	#3 							; LSB x 2 width
.212b	aa		tax				tax
.212c	bd 40 21	lda $2140,x			lda 	_SIASizeTable,x
.212f	8d 6e 0c	sta $0c6e			sta 	sRenderWidth 				; save rendering width.
.2132	aa		tax				tax
.2133	68		pla				pla 								; get back next 2 bits are height
.2134	4a		lsr a				lsr 	a
.2135	4a		lsr a				lsr 	a
.2136	29 03		and #$03			and 	#3
.2138	a8		tay				tay
.2139	b9 40 21	lda $2140,y			lda 	_SIASizeTable,y
.213c	a8		tay				tay
.213d	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.213f	60		rts				rts
.2140					_SIASizeTable:
>2140	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.2144					_SIAGetPixel:
.2144	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.2146	a9 00		lda #$00			lda 	#0
.2148	85 2b		sta $2b				sta 	temp0+1
.214a	ac 01 0c	ldy $0c01			ldy 	gdImage 					; get image info into A
.214d	b9 74 0c	lda $0c74,y			lda 	imageInfo,y
.2150	48		pha				pha
.2151	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.2153	85 2c		sta $2c				sta 	temp1
.2155	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.2156	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.2158	18		clc				clc
.2159	69 03		adc #$03			adc 	#3
.215b	a8		tay				tay
.215c					_SIAMultiply:
.215c	06 2a		asl $2a				asl 	temp0
.215e	26 2b		rol $2b				rol 	temp0+1
.2160	88		dey				dey
.2161	d0 f9		bne $215c			bne 	_SIAMultiply
.2163	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.2165	d0 04		bne $216b			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.2167	46 2b		lsr $2b				lsr 	temp0+1
.2169	66 2a		ror $2a				ror 	temp0
.216b					_SIANoHalf:
.216b	ae 01 0c	ldx $0c01			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.216e	bd b4 0c	lda $0cb4,x			lda 	imageAddr32Low,x
.2171	85 2e		sta $2e				sta 	temp2
.2173	bd f4 0c	lda $0cf4,x			lda 	imageAddr32High,x
.2176	85 2f		sta $2f				sta 	temp2+1
.2178	a9 00		lda #$00			lda 	#0
.217a	85 30		sta $30				sta 	temp3
.217c	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.217e					_SIMult32:
.217e	06 2e		asl $2e				asl 	temp2
.2180	26 2f		rol $2f				rol 	temp2+1
.2182	26 30		rol $30				rol 	temp3
.2184	ca		dex				dex
.2185	d0 f7		bne $217e			bne 	_SIMult32
.2187	ee 25 9f	inc $9f25			inc 	$9F25 						; select alternate data port
.218a	18		clc				clc
.218b	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.218d	65 2e		adc $2e				adc 	temp2
.218f	8d 20 9f	sta $9f20			sta 	$9F20
.2192	a5 2b		lda $2b				lda 	temp0+1
.2194	65 2f		adc $2f				adc 	temp2+1
.2196	8d 21 9f	sta $9f21			sta 	$9F21
.2199	a9 10		lda #$10			lda 	#$10
.219b	65 30		adc $30				adc 	temp3
.219d	8d 22 9f	sta $9f22			sta 	$9F22
.21a0	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.21a2					_SIFillCacheLoop:
.21a2	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.21a4	d0 12		bne $21b8			bne 	_SI8Bit
.21a6	ad 24 9f	lda $9f24			lda 	$9F24 						; get data
.21a9	48		pha				pha 								; save it
.21aa	4a		lsr a				lsr 	a 							; MSB first
.21ab	4a		lsr a				lsr 	a
.21ac	4a		lsr a				lsr 	a
.21ad	4a		lsr a				lsr 	a
.21ae	20 c8 21	jsr $21c8			jsr 	_SIWrite4Bit
.21b1	68		pla				pla
.21b2	20 c8 21	jsr $21c8			jsr 	_SIWrite4Bit
.21b5	4c bf 21	jmp $21bf			jmp 	_SIAdvance
.21b8					_SI8Bit:
.21b8	ad 24 9f	lda $9f24			lda 	$9F24 						; copy data into render cache
.21bb	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.21be	e8		inx				inx
.21bf					_SIAdvance:
.21bf	ec 6e 0c	cpx $0c6e			cpx 	sRenderWidth 				; filled the cache to required width ?
.21c2	d0 de		bne $21a2			bne 	_SIFillCacheLoop
.21c4	ce 25 9f	dec $9f25			dec 	$9F25 						; select original data port.
.21c7	60		rts				rts
.21c8					_SIWrite4Bit:
.21c8	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.21ca	f0 02		beq $21ce			beq 	_SIW4Skip
.21cc	09 f0		ora #$f0			ora 	#$F0
.21ce					_SIW4Skip:
.21ce	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.21d1	e8		inx				inx
.21d2	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.21d3					SpriteMove:
.21d3	5a		phy				phy
.21d4	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.21d6	20 ad 20	jsr $20ad			jsr 	SpriteSetTarget
.21d9	ad 23 9f	lda $9f23			lda 	$9F23
.21dc	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.21dd	4a		lsr a				lsr 	a
.21de	4a		lsr a				lsr 	a
.21df	4a		lsr a				lsr 	a
.21e0	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.21e2	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.21e4	20 ad 20	jsr $20ad			jsr 	SpriteSetTarget
.21e7	20 f5 21	jsr $21f5			jsr 	SMWritePosition 					; write X position out.
.21ea	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.21ec	46 2a		lsr $2a				lsr 	temp0
.21ee	e8		inx				inx 										; get the y position
.21ef	20 f5 21	jsr $21f5			jsr 	SMWritePosition 					; and write that out.
.21f2	ca		dex				dex 										; fix X and quit.
.21f3	7a		ply				ply
.21f4	60		rts				rts
.21f5					SMWritePosition:
.21f5	a5 2a		lda $2a				lda 	temp0 								; get dim size
.21f7	29 03		and #$03			and 	#3 									; in range into Y
.21f9	a8		tay				tay
.21fa	38		sec				sec
.21fb	b5 98		lda $98,x			lda 	esInt0,x
.21fd	f9 11 22	sbc $2211,y			sbc 	SMHalfSize,y
.2200	8d 23 9f	sta $9f23			sta 	$9F23
.2203	ee 20 9f	inc $9f20			inc 	$9F20
.2206	b5 a0		lda $a0,x			lda 	esInt1,x
.2208	e9 00		sbc #$00			sbc 	#0
.220a	8d 23 9f	sta $9f23			sta 	$9F23
.220d	ee 20 9f	inc $9f20			inc 	$9F20
.2210	60		rts				rts
.2211					SMHalfSize:
>2211	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2215					SpriteReadCoordinate:
.2215	5a		phy				phy
.2216	08		php				php 										; save CTR on stack
.2217	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2219	20 ad 20	jsr $20ad			jsr 	SpriteSetTarget
.221c	ad 23 9f	lda $9f23			lda 	$9F23
.221f	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2220	4a		lsr a				lsr 	a
.2221	4a		lsr a				lsr 	a
.2222	4a		lsr a				lsr 	a
.2223	28		plp				plp 										; restore CTS
.2224	08		php				php
.2225	90 02		bcc $2229			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2227	4a		lsr a				lsr 	a
.2228	4a		lsr a				lsr 	a
.2229					_SPRCNotY1:
.2229	29 03		and #$03			and 	#3 									; point into half width/height
.222b	a8		tay				tay
.222c	b9 11 22	lda $2211,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.222f	95 b0		sta $b0,x			sta 	esInt3,x
.2231	28		plp				plp 										; CS Y CC X
.2232	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2234	2a		rol a				rol 	a
.2235	2a		rol a				rol 	a
.2236	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2238	20 ad 20	jsr $20ad			jsr 	SpriteSetTarget 					; set data pointer offset by that
.223b	18		clc				clc 										; read and unfix centre.
.223c	ad 23 9f	lda $9f23			lda 	$9F23
.223f	75 b0		adc $b0,x			adc 	esInt3,x
.2241	95 98		sta $98,x			sta 	esInt0,x
.2243	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.2246	ad 23 9f	lda $9f23			lda 	$9F23
.2249	69 00		adc #$00			adc 	#0
.224b	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.224d	c9 08		cmp #$08			cmp		#$08
.224f	90 02		bcc $2253			bcc 	_SPRCNoSX
.2251	09 f0		ora #$f0			ora 	#$F0
.2253					_SPRCNoSX:
.2253	95 a0		sta $a0,x			sta 	esInt1,x
.2255	7a		ply				ply
.2256	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2257					Sprite_GetX:
.2257	18		clc				clc
.2258	90 01		bcc $225b			bcc 	SpriteGetCode
.225a					Sprite_GetY:
.225a	38		sec				sec
.225b					SpriteGetCode:
.225b	08		php				php 								; CLC : X SEC: Y, save on stack.
.225c	48		pha				pha 								; save stack position
.225d	20 78 22	jsr $2278			jsr 	GetSpriteNumber 			; get # of sprite.
.2260	a2 04		ldx #$04		ldx	#4
.2262	20 0a 3e	jsr $3e0a		jsr	mainHandler
.2265	fa		plx				plx
.2266	28		plp				plp 								; which one ?
.2267	20 15 22	jsr $2215			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.226a	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.226c	29 80		and #$80			and 	#$80
.226e	f0 02		beq $2272			beq 	_SGXYPos
.2270	a9 ff		lda #$ff			lda 	#$FF
.2272					_SGXYPos:
.2272	95 a8		sta $a8,x			sta 	esInt2,x
.2274	95 b0		sta $b0,x			sta 	esInt3,x
.2276	8a		txa				txa 								; return NSP in A
.2277	60		rts				rts
.2278					GetSpriteNumber:
.2278	48		pha				pha
.2279	a2 0c		ldx #$0c		ldx	#12
.227b	20 0a 3e	jsr $3e0a		jsr	mainHandler
.227e	fa		plx				plx
.227f	b5 98		lda $98,x			lda 	esInt0,x
.2281	20 f1 20	jsr $20f1			jsr 	SelectSpriteA
.2284	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c6f					currentMode:
>0c6f							.fill 	4
.2285					ForceMode0:
.2285	a2 00		ldx #$00			ldx 	#0
.2287	86 98		stx $98				stx 	esInt0 						; in case we do it.
.2289					_FMCheck:
.2289	bd 1d 23	lda $231d,x			lda 	CMModeList,x 				; do we need to switch ?
.228c	dd 6f 0c	cmp $0c6f,x			cmp 	currentMode,x
.228f	d0 13		bne $22a4			bne 	CMSetMode 					; different so switch.
.2291	e8		inx				inx
.2292	e0 04		cpx #$04			cpx 	#4
.2294	d0 f3		bne $2289			bne 	_FMCheck
.2296	60		rts				rts
.2297					CommandMode:
.2297	a9 00		lda #$00			lda 	#0
.2299	a2 0a		ldx #$0a		ldx	#10
.229b	20 0a 3e	jsr $3e0a		jsr	mainHandler
.229e	a5 b0		lda $b0				lda 	esInt3
.22a0	29 70		and #$70			and 	#$70
.22a2	d0 06		bne $22aa			bne 	CMNoExpand
.22a4					CMSetMode:
.22a4	20 fe 22	jsr $22fe			jsr 	CMExpandMode
.22a7	4c be 22	jmp $22be			jmp 	CMUpdateMode
.22aa					CMNoExpand:
.22aa	a5 98		lda $98				lda 	esInt0
.22ac	8d 6f 0c	sta $0c6f			sta 	currentMode
.22af	a5 a0		lda $a0				lda 	esInt1
.22b1	8d 70 0c	sta $0c70			sta 	currentMode+1
.22b4	a5 a8		lda $a8				lda 	esInt2
.22b6	8d 71 0c	sta $0c71			sta 	currentMode+2
.22b9	a5 b0		lda $b0				lda 	esInt3
.22bb	8d 72 0c	sta $0c72			sta 	currentMode+3
.22be					CMUpdateMode:
.22be	a2 11		ldx #$11			ldx 	#$11
.22c0					_CMClear:
.22c0	a9 00		lda #$00			lda 	#0
.22c2	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.22c5	ca		dex				dex
.22c6	10 f8		bpl $22c0			bpl 	_CMClear
.22c8	ad 72 0c	lda $0c72			lda 	currentMode+3 				; get current mode
.22cb	48		pha				pha 								; stack twice.
.22cc	48		pha				pha
.22cd	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.22cf	09 01		ora #$01			ora 	#$01 						; turn the output on.
.22d1	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.22d4	68		pla				pla 								; get back
.22d5	20 2d 23	jsr $232d			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22d8	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.22db	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.22dc	4a		lsr a				lsr 	a
.22dd	4a		lsr a				lsr 	a
.22de	20 2d 23	jsr $232d			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22e1	8d 2b 9f	sta $9f2b			sta 	$9F2B
.22e4	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.22e6	ad 6f 0c	lda $0c6f			lda 	currentMode					; get L0 config byte
.22e9	20 38 23	jsr $2338			jsr 	CMDecodeLayer 				; and decode layer 0
.22ec	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.22ee	ad 70 0c	lda $0c70			lda 	currentMode+1
.22f1	20 38 23	jsr $2338			jsr 	CMDecodeLayer
.22f4	20 75 1d	jsr $1d75			jsr 	gdModeChanged 				; check the bitmap status.
.22f7	20 ab 18	jsr $18ab			jsr 	GResetStorage 				; reset the graphics drawing storage.
.22fa	20 e5 1e	jsr $1ee5			jsr 	SoundReset 					; Reset the sound channels.
.22fd	60		rts				rts
.22fe					CMExpandMode:
.22fe	a5 98		lda $98				lda 	esInt0 						; get mode number
.2300	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2302	b0 14		bcs $2318			bcs 	_CMModeError
.2304	0a		asl a				asl 	a 							; x 4 into X
.2305	0a		asl a				asl 	a
.2306	aa		tax				tax
.2307	5a		phy				phy
.2308	a0 00		ldy #$00			ldy 	#0
.230a					_CMEMCopy:
.230a	bd 1d 23	lda $231d,x			lda 	CMModeList,x
.230d	99 6f 0c	sta $0c6f,y			sta 	currentMode,y
.2310	e8		inx				inx
.2311	c8		iny				iny
.2312	c0 04		cpy #$04			cpy 	#4
.2314	d0 f4		bne $230a			bne 	_CMEMCopy
.2316	7a		ply				ply
.2317	60		rts				rts
.2318					_CMModeError:
.2318	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.231a	20 09 15	jsr $1509		jsr	errorHandler
.231d					CMModeList:
>231d	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2321	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2325	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>2329	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.232d					CMEndModeList:
.232d					CMToScale:
.232d	29 03		and #$03			and 	#3 							; lower 2 bits only
.232f	aa		tax				tax 								; put in X for counting
.2330	a9 00		lda #$00			lda 	#0 							; zero result
.2332	38		sec				sec 								; first time rotate CS in
.2333					_CMTSLoop:
.2333	6a		ror a				ror 	a
.2334	ca		dex				dex
.2335	10 fc		bpl $2333			bpl 	_CMTSLoop
.2337	60		rts				rts
.2338					CMDecodeLayer:
.2338	48		pha				pha 								; save it.
.2339	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.233b	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.233e	68		pla				pla 								; get it back
.233f	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2341	f0 02		beq $2345			beq 	_CMDLNotSet
.2343	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2345					_CMDLNotSet:
.2345	e0 00		cpx #$00			cpx 	#0
.2347	f0 06		beq $234f			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.2349	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.234b	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.234e	60		rts				rts
.234f					_CMDLayer0:
.234f	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2351	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2354	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.2355					CommandPalette:
.2355	a9 00		lda #$00			lda 	#0
.2357	a2 0c		ldx #$0c		ldx	#12
.2359	20 0a 3e	jsr $3e0a		jsr	mainHandler
.235c	a2 02		ldx #$02		ldx	#2
.235e	20 0a 3e	jsr $3e0a		jsr	mainHandler
.2361	a9 01		lda #$01			lda 	#1
.2363	a2 08		ldx #$08		ldx	#8
.2365	20 0a 3e	jsr $3e0a		jsr	mainHandler
.2368	a5 98		lda $98				lda 	esInt0 					; get palette #
.236a	20 7a 23	jsr $237a			jsr 	PointToPaletteA			; point to palette register
.236d	a5 99		lda $99				lda 	esInt0+1
.236f	8d 23 9f	sta $9f23			sta 	$9F23
.2372	a5 a1		lda $a1				lda 	esInt1+1
.2374	29 0f		and #$0f			and 	#$0F
.2376	8d 23 9f	sta $9f23			sta 	$9F23
.2379	60		rts				rts
.237a					PointToPaletteA:
.237a	0a		asl a				asl 	a 							; x 2 -> LSB
.237b	8d 20 9f	sta $9f20			sta 	$9F20
.237e	a9 00		lda #$00			lda 	#0 							; carry into A
.2380	2a		rol a				rol 	a
.2381	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.2383	8d 21 9f	sta $9f21			sta 	$9F21
.2386	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.2388	8d 22 9f	sta $9f22			sta 	$9F22
.238b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

=$f800					DefaultFont = $F800
.238c					Command_Draw:
.238c	a9 94		lda #$94			lda 	#TextHandler & $FF
.238e	a2 23		ldx #$23			ldx 	#TextHandler >> 8
.2390	20 c0 18	jsr $18c0			jsr 	GHandler
.2393	60		rts				rts
.2394					TextHandler:
.2394	ad 08 0c	lda $0c08			lda 	gdText+1 					; do we have a string
.2397	d0 1a		bne $23b3			bne 	_THHasString
.2399					_THCallRenderer:
.2399	da		phx				phx
.239a	ad f2 0b	lda $0bf2			lda 	gy2
.239d	48		pha				pha
.239e	ad f3 0b	lda $0bf3			lda 	gy2+1
.23a1	48		pha				pha
.23a2	a9 e7		lda #$e7			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.23a4	a2 23		ldx #$23			ldx 	#BitmapTextAccess >> 8
.23a6	20 48 1b	jsr $1b48			jsr 	ImageRenderer
.23a9	68		pla				pla 								; restore y position and x register
.23aa	8d f3 0b	sta $0bf3			sta 	gy2+1
.23ad	68		pla				pla
.23ae	8d f2 0b	sta $0bf2			sta 	gy2
.23b1	fa		plx				plx
.23b2	60		rts				rts
.23b3					_THHasString:
.23b3	a2 00		ldx #$00			ldx 	#0 							; position in string
.23b5					_THStringLoop:
.23b5	ad 07 0c	lda $0c07			lda 	gdText 						; text => temp0
.23b8	85 2a		sta $2a				sta 	temp0
.23ba	ad 08 0c	lda $0c08			lda 	gdText+1
.23bd	85 2b		sta $2b				sta 	temp0+1
.23bf	8a		txa				txa 								; length = string length.
.23c0	a0 00		ldy #$00			ldy 	#0
.23c2	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23c4	f0 20		beq $23e6			beq 	_THExit 					; if so exit.
.23c6	e8		inx				inx 								; next character, put in Y
.23c7	8a		txa				txa
.23c8	a8		tay				tay
.23c9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.23cb	8d 01 0c	sta $0c01			sta 	gdImage
.23ce	20 99 23	jsr $2399			jsr 	_THCallRenderer 			; render the text
.23d1	ad 00 0c	lda $0c00			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.23d4	0a		asl a				asl		a
.23d5	0a		asl a				asl 	a
.23d6	0a		asl a				asl 	a
.23d7	18		clc				clc
.23d8	6d f0 0b	adc $0bf0			adc 	gX2 						; add to horizontal position
.23db	8d f0 0b	sta $0bf0			sta 	gx2
.23de	90 d5		bcc $23b5			bcc 	_THStringLoop
.23e0	ee f1 0b	inc $0bf1			inc 	gx2+1
.23e3	4c b5 23	jmp $23b5			jmp 	_THStringLoop 				; do the whole lot.
.23e6					_THExit:
.23e6	60		rts				rts
.23e7					BitmapTextAccess:
.23e7	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.23e9	d0 07		bne $23f2			bne 	_BTABitmap
.23eb	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.23ed	a2 08		ldx #$08			ldx 	#8
.23ef	a0 08		ldy #$08			ldy 	#8
.23f1	60		rts				rts
.23f2					_BTABitmap:
.23f2	ad 01 0c	lda $0c01			lda 	gdImage 					; Image => temp0:A
.23f5	20 f9 23	jsr $23f9			jsr 	DrawCharacterA
.23f8	60		rts				rts
.23f9					DrawCharacterA:
.23f9	85 2a		sta $2a				sta 	temp0
.23fb	a9 00		lda #$00			lda 	#0
.23fd	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.23ff	2a		rol a				rol 	a
.2400	06 2a		asl $2a				asl 	temp0
.2402	2a		rol a				rol 	a
.2403	06 2a		asl $2a				asl 	temp0
.2405	2a		rol a				rol 	a
.2406	09 f8		ora #$f8			ora 	#DefaultFont >> 8 			; A now points into font table.
.2408	ee 25 9f	inc $9f25			inc 	$9F25 						; alternate port set.
.240b	8d 21 9f	sta $9f21			sta 	$9F21 						; set up address
.240e	a9 10		lda #$10			lda 	#$10
.2410	8d 22 9f	sta $9f22			sta 	$9F22
.2413	84 32		sty $32				sty 	tempShort
.2415	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.2417	05 32		ora $32				ora 	tempShort
.2419	8d 20 9f	sta $9f20			sta 	$9F20 						; address set up.
.241c	ad 24 9f	lda $9f24			lda 	$9F24 						; get bitmap
.241f	ce 25 9f	dec $9f25			dec 	$9F25 						; original port set back
.2422	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.2424	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.2426					_BTADoCache:
.2426	a9 00		lda #$00			lda 	#0
.2428	46 2a		lsr $2a				lsr 	temp0
.242a	90 02		bcc $242e			bcc 	_BTANotSet
.242c	a9 ff		lda #$ff			lda 	#255
.242e					_BTANotSet:
.242e	9d 10 0c	sta $0c10,x			sta 	renderCache,x
.2431	ca		dex				dex
.2432	10 f2		bpl $2426			bpl 	_BTADoCache
.2434	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.2435					Command_VLoad:
.2435	a9 00		lda #$00			lda 	#0 								; string which is the file name
.2437	a2 0e		ldx #$0e		ldx	#14
.2439	20 0a 3e	jsr $3e0a		jsr	mainHandler
.243c	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.243e	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.2440	95 98		sta $98,x			sta 	esInt0,x
.2442	a5 36		lda $36				lda 	lowMemory+1
.2444	95 a0		sta $a0,x			sta 	esInt1,x
.2446	a9 00		lda #$00			lda 	#0
.2448	95 a8		sta $a8,x			sta 	esInt2,x
.244a	95 b0		sta $b0,x			sta 	esInt3,x
.244c	a2 0e		ldx #$0e		ldx	#14
.244e	20 e7 14	jsr $14e7		jsr	deviceHandler
.2451	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.2453	85 2a		sta $2a				sta 	temp0
.2455	a5 a1		lda $a1				lda 	esInt1+1
.2457	85 2b		sta $2b				sta 	temp0+1
.2459	20 d4 24	jsr $24d4			jsr 	LoadVRAMFile 					; load the VRAM file in.
.245c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.245d					Command_VPoke:
.245d	38		sec				sec 						; one byte , CS
.245e	b0 01		bcs $2461			bcs 	CmdVideoWrite
.2460					Command_VDoke:
.2460	18		clc				clc 						; two bytes, CC
.2461					CmdVideoWrite:
.2461	08		php				php 						; save one or two btes
.2462	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.2464	a2 0a		ldx #$0a		ldx	#10
.2466	20 0a 3e	jsr $3e0a		jsr	mainHandler
.2469	a2 02		ldx #$02		ldx	#2
.246b	20 0a 3e	jsr $3e0a		jsr	mainHandler
.246e	a9 01		lda #$01			lda 	#1
.2470	a2 0a		ldx #$0a		ldx	#10
.2472	20 0a 3e	jsr $3e0a		jsr	mainHandler
.2475	a2 00		ldx #$00			ldx 	#0
.2477	20 88 24	jsr $2488			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.247a	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.247c	8d 23 9f	sta $9f23			sta 	$9F23
.247f	28		plp				plp 						; if it was Poke then exit
.2480	b0 05		bcs $2487			bcs 	_CVWExit
.2482	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2484	8d 23 9f	sta $9f23			sta 	$9F23
.2487					_CVWExit:
.2487	60		rts				rts
.2488					SetUpTOSVRamAddress:
.2488	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.248a	29 fe		and #$fe			and 	#$FE
.248c	15 b0		ora $b0,x			ora 	esInt3,x
.248e	d0 14		bne $24a4			bne 	CVWValue
.2490	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.2492	8d 20 9f	sta $9f20			sta 	$9F20
.2495	b5 a0		lda $a0,x			lda 	esInt1,x
.2497	8d 21 9f	sta $9f21			sta	 	$9F21
.249a	b5 a8		lda $a8,x			lda 	esInt2,x
.249c	29 01		and #$01			and 	#1
.249e	09 10		ora #$10			ora 	#$10 				; step 1.
.24a0	8d 22 9f	sta $9f22			sta 	$9F22
.24a3	60		rts				rts
.24a4					CVWValue:
.24a4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.24a6	20 09 15	jsr $1509		jsr	errorHandler
.24a9					Command_VPeek:
.24a9	38		sec				sec 						; one byte , CS
.24aa	b0 01		bcs $24ad			bcs 	CmdVideoRead
.24ac					Command_VDeek:
.24ac	18		clc				clc 						; two bytes, CC
.24ad					CmdVideoRead:
.24ad	08		php				php 						; save action on stack.
.24ae	48		pha				pha 						; save stack position
.24af	a2 0a		ldx #$0a		ldx	#10
.24b1	20 0a 3e	jsr $3e0a		jsr	mainHandler
.24b4	a2 04		ldx #$04		ldx	#4
.24b6	20 0a 3e	jsr $3e0a		jsr	mainHandler
.24b9	fa		plx				plx
.24ba	20 88 24	jsr $2488			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.24bd	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.24bf	95 a0		sta $a0,x			sta 	esInt1,x
.24c1	95 a8		sta $a8,x			sta 	esInt2,x
.24c3	95 b0		sta $b0,x			sta 	esInt3,x
.24c5	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.24c8	95 98		sta $98,x			sta 	esInt0,x
.24ca	28		plp				plp 						; check if DOKE (carry was clear)
.24cb	b0 05		bcs $24d2			bcs 	_CVRExit
.24cd	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.24d0	95 a0		sta $a0,x			sta 	esInt1,x
.24d2					_CVRExit:
.24d2	8a		txa				txa 						; return X position.
.24d3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c73					compressMode:
>0c73							.fill 	1
.0c74					imageInfo:
>0c74							.fill 	X16MaxImages
.0cb4					imageAddr32Low:
>0cb4							.fill  	X16MaxImages
.0cf4					imageAddr32High:
>0cf4							.fill  	X16MaxImages
.24d4					LoadVRAMFile:
.24d4	da		phx				phx
.24d5	5a		phy				phy
.24d6					_LVRLoop:
.24d6	20 b0 25	jsr $25b0			jsr 	LVFGet 						; get the next (never access direct)
.24d9	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.24db	f0 42		beq $251f			beq 	_LVRExit
.24dd	b0 5a		bcs $2539			bcs 	_LVRLoad 					; load data in ?
.24df	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.24e1	90 11		bcc $24f4			bcc 	_LVRSetAddress
.24e3	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.24e5	f0 3b		beq $2522			beq 	_LVRSetPalette
.24e7	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.24e9	90 2d		bcc $2518			bcc 	_LVRSetCompress
.24eb	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.24ed	90 5e		bcc $254d			bcc 	_LVRSetSprite
.24ef	a2 01		ldx #$01			ldx 	#ErrorID_missing
.24f1	20 09 15	jsr $1509		jsr	errorHandler
.24f4					_LVRSetAddress:
.24f4	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.24f6	20 b0 25	jsr $25b0			jsr 	LVFGet
.24f9	85 2c		sta $2c				sta 	temp1
.24fb	a9 00		lda #$00			lda 	#0
.24fd	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.24ff	66 2c		ror $2c				ror 	temp1
.2501	6a		ror a				ror		a
.2502	46 2d		lsr $2d				lsr 	temp1+1
.2504	66 2c		ror $2c				ror 	temp1
.2506	6a		ror a				ror		a
.2507	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.250a	a5 2c		lda $2c				lda 	temp1
.250c	8d 21 9f	sta $9f21			sta 	$9F21
.250f	a5 2d		lda $2d				lda 	temp1+1
.2511	09 10		ora #$10			ora 	#$10
.2513	8d 22 9f	sta $9f22			sta 	$9F22
.2516	d0 be		bne $24d6			bne 	_LVRLoop
.2518					_LVRSetCompress:
.2518	29 07		and #$07			and 	#7
.251a	8d 73 0c	sta $0c73			sta 	compressMode
.251d	10 b7		bpl $24d6			bpl 	_LVRLoop
.251f					_LVRExit:
.251f	7a		ply				ply
.2520	fa		plx				plx
.2521	60		rts				rts
.2522					_LVRSetPalette:
.2522	20 b0 25	jsr $25b0			jsr 	LVFGet 						; get palette id.
.2525	20 7a 23	jsr $237a			jsr 	PointToPaletteA 			; in palette.asm
.2528	20 b0 25	jsr $25b0			jsr 	LVFGet 						; copy 12 bit palette data in.
.252b	8d 23 9f	sta $9f23			sta 	$9F23
.252e	20 b0 25	jsr $25b0			jsr 	LVFGet
.2531	29 0f		and #$0f			and 	#$0F
.2533	8d 23 9f	sta $9f23			sta 	$9F23
.2536	4c d6 24	jmp $24d6			jmp 	_LVRLoop
.2539					_LVRLoad:
.2539	ae 73 0c	ldx $0c73			ldx 	compressMode
.253c	d0 55		bne $2593			bne 	_LVRNotMode0
.253e	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.2540					_LVRLCopyX:
.2540	aa		tax				tax
.2541					_LVRLCopy:
.2541	20 b0 25	jsr $25b0			jsr 	LVFGet 						; write to data.
.2544	8d 23 9f	sta $9f23			sta 	$9F23
.2547	ca		dex				dex
.2548	d0 f7		bne $2541			bne 	_LVRLCopy
.254a	4c d6 24	jmp $24d6			jmp 	_LVRLoop
.254d					_LVRSetSprite:
.254d	48		pha				pha 								; save on stack
.254e	20 b0 25	jsr $25b0			jsr 	LVFGet 						; get the sprite number into X
.2551	aa		tax				tax
.2552	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.2554	b0 38		bcs $258e			bcs 	_LVRSSValue
.2556	68		pla				pla 								; restore the data held in the first byte
.2557	9d 74 0c	sta $0c74,x			sta 	imageInfo,x 				; and write into the sprite image table.
.255a					_LVRAlignVRAM:
.255a	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.255d	29 1f		and #$1f			and 	#$1F
.255f	f0 07		beq $2568			beq 	_LVRAligned
.2561	a9 00		lda #$00			lda 	#$00
.2563	8d 23 9f	sta $9f23			sta 	$9F23
.2566	f0 f2		beq $255a			beq 	_LVRAlignVRAM
.2568					_LVRAligned:
.2568	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.256b	4a		lsr a				lsr 	a 	 						; first halve into temp1
.256c	ad 21 9f	lda $9f21			lda 	$9F21
.256f	6a		ror a				ror 	a
.2570	85 2d		sta $2d				sta 	temp1+1
.2572	ad 20 9f	lda $9f20			lda 	$9F20
.2575	6a		ror a				ror 	a
.2576	85 2c		sta $2c				sta 	temp1
.2578	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.257a					_LVRShift:
.257a	46 2d		lsr $2d				lsr 	temp1+1
.257c	66 2c		ror $2c				ror 	temp1
.257e	88		dey				dey
.257f	d0 f9		bne $257a			bne 	_LVRShift
.2581	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.2583	9d f4 0c	sta $0cf4,x			sta 	imageAddr32High,x
.2586	a5 2c		lda $2c				lda 	temp1
.2588	9d b4 0c	sta $0cb4,x			sta 	imageAddr32Low,x
.258b	4c d6 24	jmp $24d6			jmp 	_LVRLoop
.258e					_LVRSSValue:
.258e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2590	20 09 15	jsr $1509		jsr	errorHandler
.2593					_LVRNotMode0:
.2593	e0 01		cpx #$01			cpx 	#1
.2595	d0 15		bne $25ac			bne 	_LVRNotMode1
.2597	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.2599	c9 40		cmp #$40			cmp 	#$40
.259b	90 a3		bcc $2540			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.259d					_LVRRLEGroup:
.259d	29 3f		and #$3f			and 	#$3F
.259f	aa		tax				tax
.25a0	20 b0 25	jsr $25b0			jsr 	LVFGet
.25a3					_LVRLEGroupLoop:
.25a3	8d 23 9f	sta $9f23			sta 	$9F23
.25a6	ca		dex				dex
.25a7	d0 fa		bne $25a3			bne 	_LVRLEGroupLoop
.25a9	4c d6 24	jmp $24d6			jmp 	_LVRLoop
.25ac					_LVRNotMode1:
>25ac	db						.byte 	$DB
.25ad	4c ac 25	jmp $25ac			jmp 	_LVRNotMode1
.25b0	84 32		sty $32		LVFGet:	sty 	tempShort
.25b2	a0 00		ldy #$00			ldy 	#0
.25b4	b1 2a		lda ($2a),y			lda 	(temp0),y
.25b6	a4 32		ldy $32				ldy	 	tempShort
.25b8	e6 2a		inc $2a				inc 	temp0
.25ba	d0 02		bne $25be			bne 	_LVFGExit
.25bc	e6 2b		inc $2b				inc 	temp0+1
.25be					_LVFGExit:
.25be	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.25bf					section_end_extension:
.25bf					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.25bf					floatingpointHandler:
.25bf	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.25c1	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: basic.asm

.25c4					section_end_floatingpoint:
.25c4					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.25c4					ColdStartEntry:
.25c4	a2 ff		ldx #$ff			ldx 	#$FF
.25c6	9a		txs				txs
.25c7	20 50 26	jsr $2650			jsr 	ForceStandardMode
.25ca	a2 04		ldx #$04		ldx	#4
.25cc	20 e7 14	jsr $14e7		jsr	deviceHandler
.25cf	a0 ff		ldy #$ff			ldy 	#255
.25d1					_CSBanner:
.25d1	c8		iny				iny
.25d2	b9 f8 25	lda $25f8,y			lda 	Intro,y
.25d5	f0 14		beq $25eb			beq 	_CSStart
.25d7	c9 08		cmp #$08			cmp 	#8
.25d9	90 08		bcc $25e3			bcc 	_CSInk
.25db	a2 16		ldx #$16		ldx	#22
.25dd	20 e7 14	jsr $14e7		jsr	deviceHandler
.25e0	4c d1 25	jmp $25d1			jmp 	_CSBanner
.25e3					_CSInk:
.25e3	a2 08		ldx #$08		ldx	#8
.25e5	20 e7 14	jsr $14e7		jsr	deviceHandler
.25e8	4c d1 25	jmp $25d1			jmp 	_CSBanner
.25eb					_CSStart:
.25eb	a2 16		ldx #$16		ldx	#22
.25ed	20 0a 3e	jsr $3e0a		jsr	mainHandler
.25f0	a2 06		ldx #$06		ldx	#6
.25f2	20 0a 3e	jsr $3e0a		jsr	mainHandler
.25f5	4c 10 27	jmp $2710			jmp 	WarmStartEntry
>25f8	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2600	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2610	20 2a 2a 2a 0d 0d
>2616	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>261e	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>262e	32 30 32 31 0d 0d
>2634	02 42 61 73 69 63 20				.text 	2,"Basic "
>263b	30 2e 32 31					.text "0.21"
>263f	20 28						.text 	" ("
>2641	30 35 2d 41 70 72 2d 32				.text "05-Apr-2021"
>2649	30 32 31
>264c	29 0d 0d 00					.text 	")",13,13,0
.2650					ForceStandardMode:
.2650	a9 fe		lda #$fe			lda 	#$FE
.2652	20 56 18	jsr $1856		jsr	extensionHandler
.2655	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2656					DeleteLine:
.2656	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2659	85 2a		sta $2a				sta 	temp0
.265b	ad c9 0a	lda $0ac9			lda 	basePage+1
.265e	85 2b		sta $2b				sta 	temp0+1
.2660	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.2662	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.2664	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2666	d0 07		bne $266f			bne 	_DLNext
.2668	c8		iny				iny
.2669	a5 a0		lda $a0				lda 	esInt1
.266b	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.266d	f0 06		beq $2675			beq 	_DLFound
.266f	20 93 26	jsr $2693	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2672	d0 ec		bne $2660			bne 	_DLLoop
.2674	60		rts				rts
.2675					_DLFound:
.2675	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2677	b1 2a		lda ($2a),y			lda 	(temp0),y
.2679	a8		tay				tay 								; so we copy from (temp0),y
.267a	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.267c					_DLCopyDown:
.267c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.267e	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2680	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.2682	d0 02		bne $2686			bne 	_DLNoCarry
.2684	e6 2b		inc $2b				inc 	temp0+1
.2686					_DLNoCarry:
.2686	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.2688	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.268a	d0 f0		bne $267c			bne 	_DLCopyDown
.268c	a5 2b		lda $2b				lda 	temp0+1
.268e	c5 36		cmp $36				cmp 	lowMemory+1
.2690	d0 ea		bne $267c			bne 	_DLCopyDown
.2692	60		rts				rts
.2693					IAdvanceTemp0:
.2693	84 32		sty $32				sty 	tempShort
.2695	18		clc				clc
.2696	a0 00		ldy #$00			ldy 	#0 							; get offset
.2698	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.269a	65 2a		adc $2a				adc 	temp0
.269c	85 2a		sta $2a				sta 	temp0
.269e	90 02		bcc $26a2			bcc 	_IATNoCarry
.26a0	e6 2b		inc $2b				inc 	temp0+1
.26a2					_IATNoCarry:
.26a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.26a4	a4 32		ldy $32				ldy 	tempShort
.26a6	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.26a8	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.26a9					InsertLine:
.26a9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.26ac	85 2a		sta $2a				sta 	temp0
.26ae	ad c9 0a	lda $0ac9			lda 	basePage+1
.26b1	85 2b		sta $2b				sta 	temp0+1
.26b3					_ILLoop:
.26b3	a0 01		ldy #$01			ldy 	#1
.26b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.26b7	c5 98		cmp $98				cmp 	esInt0
.26b9	c8		iny				iny
.26ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.26bc	e5 a0		sbc $a0				sbc 	esInt1
.26be	b0 05		bcs $26c5			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.26c0	20 93 26	jsr $2693			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.26c3	d0 ee		bne $26b3			bne 	_ILLoop
.26c5					_ILFound:
.26c5	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.26c7	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.26c9	a5 36		lda $36				lda 	lowMemory+1
.26cb	85 2d		sta $2d				sta 	temp1+1
.26cd	ad 71 0e	lda $0e71			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.26d0	18		clc				clc 								; add 3 for the line number and offset.
.26d1	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.26d3	a8		tay				tay
.26d4	a2 00		ldx #$00			ldx 	#0
.26d6	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.26d8	91 2c		sta ($2c),y			sta 	(temp1),y
.26da	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.26dc	c5 2a		cmp $2a				cmp 	temp0
.26de	d0 06		bne $26e6			bne 	_ILMNext
.26e0	a5 2d		lda $2d				lda 	temp1+1
.26e2	c5 2b		cmp $2b				cmp 	temp0+1
.26e4	f0 0b		beq $26f1			beq 	_ILMCopy
.26e6					_ILMNext:
.26e6	a5 2c		lda $2c				lda 	temp1
.26e8	d0 02		bne $26ec			bne 	_ILNoBorrow
.26ea	c6 2d		dec $2d				dec 	temp1+1
.26ec					_ILNoBorrow:
.26ec	c6 2c		dec $2c				dec 	temp1
.26ee	4c d6 26	jmp $26d6			jmp 	_ILMove 					; and go round again
.26f1					_ILMCopy:
.26f1	98		tya				tya 								; Y is the offset of the new line.
.26f2	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.26f4	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.26f6	a5 98		lda $98				lda 	esInt0
.26f8	91 2a		sta ($2a),y			sta 	(temp0),y
.26fa	c8		iny				iny
.26fb	a5 a0		lda $a0				lda 	esInt1
.26fd	91 2a		sta ($2a),y			sta 	(temp0),y
.26ff	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2701					_ILMCopy2:
.2701	b1 28		lda ($28),y			lda 	(codePtr),y
.2703	c8		iny				iny
.2704	c8		iny				iny
.2705	c8		iny				iny
.2706	91 2a		sta ($2a),y			sta 	(temp0),y
.2708	88		dey				dey
.2709	88		dey				dey
.270a	cc 71 0e	cpy $0e71			cpy 	tokenBufferIndex
.270d	d0 f2		bne $2701			bne 	_ILMCopy2
.270f	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2710					WarmStartEntry:
.2710	a2 ff		ldx #$ff			ldx 	#$FF
.2712	9a		txs				txs
.2713	20 50 26	jsr $2650			jsr 	ForceStandardMode
.2716	a9 02		lda #$02			lda 	#2							; green text.
.2718	a2 08		ldx #$08		ldx	#8
.271a	20 e7 14	jsr $14e7		jsr	deviceHandler
.271d	a2 0c		ldx #$0c		ldx	#12
.271f	20 e7 14	jsr $14e7		jsr	deviceHandler
.2722	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.2724	85 28		sta $28				sta 	codePtr
.2726	a5 2b		lda $2b				lda 	temp0+1
.2728	85 29		sta $29				sta 	codePtr+1
.272a	a2 06		ldx #$06		ldx	#6
.272c	20 e7 14	jsr $14e7		jsr	deviceHandler
.272f	a2 08		ldx #$08		ldx	#8
.2731	20 3d 49	jsr $493d		jsr	tokeniserHandler
.2734	c9 00		cmp #$00			cmp 	#0
.2736	f0 25		beq $275d			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2738	a9 6e		lda #$6e			lda 	#(tokenHeader) & $FF
.273a	85 28		sta $28				sta 	codePtr
.273c	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.273e	85 29		sta $29				sta 	1+(codePtr)
.2740	ad 71 0d	lda $0d71			lda 	tokenBuffer 				; is it a blank line, go get another line.
.2743	c9 80		cmp #$80			cmp 	#$80
.2745	f0 c9		beq $2710			beq 	WarmStartEntry
.2747	29 c0		and #$c0			and 	#$C0						; does it start with a number
.2749	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.274b	f0 15		beq $2762			beq 	HasLineNumber
.274d	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.274f	8d 6e 0d	sta $0d6e			sta 	tokenHeader 				; fake program line.
.2752	8d 6f 0d	sta $0d6f			sta 	tokenHeader+1
.2755	8d 70 0d	sta $0d70			sta 	tokenHeader+2
.2758	a2 18		ldx #$18		ldx	#24
.275a	20 0a 3e	jsr $3e0a		jsr	mainHandler
.275d					WSEError:
.275d	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.275f	20 09 15	jsr $1509		jsr	errorHandler
.2762					HasLineNumber:
.2762	a0 03		ldy #$03			ldy 	#3 							; get line number
.2764	a9 00		lda #$00			lda 	#0
.2766	a2 0a		ldx #$0a		ldx	#10
.2768	20 0a 3e	jsr $3e0a		jsr	mainHandler
.276b	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.276d	05 b0		ora $b0				ora 	esInt3
.276f	d0 ec		bne $275d			bne 	WSEError
.2771	98		tya				tya 								; make codePtr point to code after the line number.
.2772	18		clc				clc 								; by skipping over the tokenised number.
.2773	65 28		adc $28				adc 	codePtr
.2775	85 28		sta $28				sta 	codePtr
.2777	90 02		bcc $277b			bcc		_HLNNoCarry
.2779	e6 29		inc $29				inc 	codePtr+1
.277b					_HLNNoCarry:
.277b	98		tya				tya 								; subtract that offset from the code buffer index
.277c	38		sec				sec
.277d	49 ff		eor #$ff			eor 	#$FF
.277f	6d 71 0e	adc $0e71			adc 	tokenBufferIndex
.2782	18		clc				clc 								; add space allowing for header & $80 trailer
.2783	69 04		adc #$04			adc 	#4
.2785	8d 71 0e	sta $0e71			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2788	20 56 26	jsr $2656			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.278b					_HLNNoDelete:
.278b	ad 71 0e	lda $0e71			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.278e	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2790	f0 0c		beq $279e			beq 	_HLMEditDone
.2792	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.2794	18		clc				clc 								; workspace (1k)
.2795	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.2797	c5 34		cmp $34				cmp 	highMemory+1
.2799	b0 0b		bcs $27a6			bcs 	_HLMMemory 					; nope, won't allowit.
.279b	20 a9 26	jsr $26a9			jsr 	InsertLine 					; insert the line in
.279e					_HLMEditDone:
.279e	a2 06		ldx #$06		ldx	#6
.27a0	20 0a 3e	jsr $3e0a		jsr	mainHandler
.27a3	4c 10 27	jmp $2710			jmp 	WarmStartEntry
.27a6					_HLMMemory:
.27a6	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.27a8	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.27ab					interactionHandler:
.27ab	7c ae 27	jmp ($27ae,x)			jmp 	(interactionVectors,x)
.27ae					interactionVectors:
>27ae	b4 27					.word _DummyControlHandler ; index 0
>27b0	c4 25					.word ColdStartEntry       ; index 2
>27b2	10 27					.word WarmStartEntry       ; index 4
.27b4					_DummyControlHandler:
.27b4	60		rts			rts

;******  Return to file: basic.asm

.27b5					section_end_interaction:
.27b5					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d34					dataPtr:
>0d34							.fill 	2
.0d36					dataIndex:
>0d36							.fill 	1
.27b5					CommandRead:
.27b5	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.27b7	20 d8 36	jsr $36d8			jsr 	EvaluateReference
.27ba	20 fb 27	jsr $27fb			jsr 	SwapDPCP 					; use the data pointer.
.27bd	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.27bf	c8		iny				iny
.27c0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.27c2	f0 07		beq $27cb			beq 	_CRInData
.27c4	88		dey				dey
.27c5	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.27c7	aa		tax				tax
.27c8	20 d8 2e	jsr $2ed8			jsr 	ScanForward
.27cb					_CRInData:
.27cb	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.27cd	20 80 36	jsr $3680			jsr 	Evaluate
.27d0	ca		dex				dex 								; and write the value.
.27d1	20 43 2a	jsr $2a43			jsr 	WriteValue
.27d4	20 fb 27	jsr $27fb			jsr 	SwapDPCP 					; get the code pointer back.
.27d7	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.27d9	c8		iny				iny
.27da	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.27dc	f0 d7		beq $27b5			beq 	CommandRead
.27de	88		dey				dey
.27df	60		rts				rts
.27e0					CommandData:
.27e0	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.27e2	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.27e4	20 d8 2e	jsr $2ed8			jsr 	ScanForward
.27e7	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.27e8	60		rts				rts
.27e9					CommandRestore:
.27e9	ad c8 0a	lda $0ac8			lda 	basePage
.27ec	8d 34 0d	sta $0d34			sta 	dataPtr
.27ef	ad c9 0a	lda $0ac9			lda 	basePage+1
.27f2	8d 35 0d	sta $0d35			sta 	dataPtr+1
.27f5	a9 03		lda #$03			lda 	#3
.27f7	8d 36 0d	sta $0d36			sta 	dataIndex
.27fa	60		rts				rts
.27fb					SwapDPCP:
.27fb	da		phx				phx
.27fc	98		tya				tya 								; swap Y, DataIndex
.27fd	ac 36 0d	ldy $0d36			ldy 	DataIndex
.2800	8d 36 0d	sta $0d36			sta 	DataIndex
.2803	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2805	ae 34 0d	ldx $0d34			ldx 	dataptr
.2808	8d 34 0d	sta $0d34			sta 	dataPtr
.280b	86 28		stx $28				stx 	codePtr
.280d	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.280f	ae 35 0d	ldx $0d35			ldx 	dataptr+1
.2812	8d 35 0d	sta $0d35			sta 	dataPtr+1
.2815	86 29		stx $29				stx 	codePtr+1
.2817	fa		plx				plx
.2818	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.2819					CommandGOSUB:
.2819	20 9d 36	jsr $369d			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.281c	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.281e	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2820	20 b7 3d	jsr $3db7			jsr 	RSClaim
.2823	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2825	20 e3 3d	jsr $3de3			jsr 	RSSavePosition
.2828	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.282a	f0 1b		beq $2847			beq 	GotoTOS 					; and do a GOTO there.
.282c					CommandRETURN:
.282c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.282e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2830	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2832	f0 05		beq $2839			beq 	_isok
.2834	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2836	20 09 15	jsr $1509		jsr	errorHandler
.2839					_isok:
.2839	a9 01		lda #$01			lda 	#1
.283b	20 f6 3d	jsr $3df6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.283e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2840	20 d9 3d	jsr $3dd9			jsr 	RSFree
.2843	60		rts				rts
.2844					CommandGOTO:
.2844	20 9d 36	jsr $369d			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2847					GotoTOS:
.2847	20 c1 31	jsr $31c1			jsr 	ResetCodeAddress 			; simple search.
.284a					_GotoSearch:
.284a	a0 00		ldy #$00			ldy 	#0 							; get offset
.284c	b1 28		lda ($28),y			lda 	(codePtr),y
.284e	f0 21		beq $2871			beq 	_GotoError 					; not found.
.2850	c8		iny				iny									; check LSB match
.2851	b1 28		lda ($28),y			lda 	(codePtr),y
.2853	d5 98		cmp $98,x			cmp 	esInt0,x
.2855	d0 07		bne $285e			bne 	_GotoNext
.2857	c8		iny				iny
.2858	b1 28		lda ($28),y			lda 	(codePtr),y
.285a	d5 a0		cmp $a0,x			cmp 	esInt1,x
.285c	f0 10		beq $286e			beq 	_GotoFound
.285e					_GotoNext:
.285e	a0 00		ldy #$00			ldy 	#0 							; go next line
.2860	b1 28		lda ($28),y			lda 	(codePtr),y
.2862	18		clc				clc
.2863	65 28		adc $28				adc 	codePtr
.2865	85 28		sta $28				sta 	codePtr
.2867	90 e1		bcc $284a			bcc 	_GotoSearch
.2869	e6 29		inc $29				inc 	codePtr+1
.286b	4c 4a 28	jmp $284a			jmp 	_GotoSearch
.286e					_GotoFound:
.286e	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2870	60		rts				rts
.2871					_GotoError:
.2871	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2873	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0d37					InputBuffer:
>0d37							.fill 	MaxInputSize+1
.2876					Command_Input:
.2876	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2878	c8		iny				iny
.2879	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.287b	f0 f9		beq $2876			beq 	Command_Input
.287d	88		dey				dey 							; undo consume
.287e	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2880	f0 52		beq $28d4			beq 	_CIExit 				; : or EOL, exit
.2882	c9 80		cmp #$80			cmp 	#TOK_EOL
.2884	f0 4e		beq $28d4			beq 	_CIExit
.2886	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2888	90 12		bcc $289c			bcc 	_CIVariable
.288a	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.288c	d0 41		bne $28cf			bne 	_CISyntax
.288e	a2 00		ldx #$00			ldx 	#0
.2890	20 94 36	jsr $3694			jsr 	EvaluateString 			; evaluate and print string
.2893	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0
.2896	20 a3 29	jsr $29a3			jsr 	PrintString
.2899	4c 76 28	jmp $2876			jmp 	Command_Input
.289c					_CIVariable:
.289c	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.289e	20 d8 36	jsr $36d8			jsr 	EvaluateReference  		; this is where its going
.28a1					_CIRetry:
.28a1	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.28a3	a2 14		ldx #$14		ldx	#20
.28a5	20 e7 14	jsr $14e7		jsr	deviceHandler
.28a8	5a		phy				phy
.28a9	20 e8 28	jsr $28e8			jsr 	InputString 			; input a string (manually)
.28ac	a2 01		ldx #$01			ldx 	#1
.28ae	20 d5 28	jsr $28d5			jsr 	BufferToStackX 			; make stack,x ref input string.
.28b1	a5 90		lda $90				lda 	esType 					; if target type numeric
.28b3	29 40		and #$40			and 	#$40 					; then convert to number
.28b5	d0 10		bne $28c7			bne 	_CIWrite
.28b7	a2 01		ldx #$01			ldx 	#1
.28b9	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.28bc	a9 0a		lda #$0a			lda 	#10
.28be	20 91 3b	jsr $3b91			jsr 	MInt32FromString 		; convert it back from a string.
.28c1	7a		ply				ply
.28c2	b0 03		bcs $28c7			bcs 	_CIWrite 				; successfully converted.
.28c4	18		clc				clc 							; default fail FP conversion
.28c5	90 da		bcc $28a1			bcc		_CIRetry				; failed, try again.
.28c7					_CIWrite:
.28c7	a2 00		ldx #$00			ldx 	#0
.28c9	20 43 2a	jsr $2a43			jsr 	WriteValue
.28cc	4c 76 28	jmp $2876			jmp 	Command_Input
.28cf					_CISyntax:
.28cf	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.28d1	20 09 15	jsr $1509		jsr	errorHandler
.28d4					_CIExit:
.28d4	60		rts				rts
.28d5					BufferToStackX:
.28d5	a9 37		lda #$37			lda 	#InputBuffer & $FF
.28d7	95 98		sta $98,x			sta 	esInt0,x
.28d9	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.28db	95 a0		sta $a0,x			sta 	esInt1,x
.28dd	a9 00		lda #$00			lda 	#0
.28df	95 a8		sta $a8,x			sta 	esInt2,x
.28e1	95 b0		sta $b0,x			sta 	esInt3,x
.28e3	a9 40		lda #$40			lda 	#$40
.28e5	95 90		sta $90,x			sta 	esType,x
.28e7	60		rts				rts
.28e8					InputString:
.28e8	a9 00		lda #$00			lda 	#0
.28ea	8d 37 0d	sta $0d37			sta 	InputBuffer
.28ed					_InputLoop:
.28ed	a2 02		ldx #$02		ldx	#2
.28ef	20 e7 14	jsr $14e7		jsr	deviceHandler
.28f2	a2 0a		ldx #$0a		ldx	#10
.28f4	20 e7 14	jsr $14e7		jsr	deviceHandler
.28f7	c9 00		cmp #$00			cmp 	#0
.28f9	f0 f2		beq $28ed			beq 	_InputLoop
.28fb	c9 08		cmp #$08			cmp 	#8
.28fd	f0 19		beq $2918			beq 	_InputBackspace
.28ff	c9 0d		cmp #$0d			cmp 	#13
.2901	f0 21		beq $2924			beq 	_InputExit
.2903	ae 37 0d	ldx $0d37			ldx 	InputBuffer
.2906	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2908	f0 e3		beq $28ed			beq 	_InputLoop
.290a	9d 38 0d	sta $0d38,x			sta 	InputBuffer+1,x 		; write char
.290d	ee 37 0d	inc $0d37			inc 	InputBuffer 			; advance count.
.2910					_InputPrintLoop:
.2910	a2 14		ldx #$14		ldx	#20
.2912	20 e7 14	jsr $14e7		jsr	deviceHandler
.2915	4c ed 28	jmp $28ed			jmp	 	_InputLoop
.2918					_InputBackspace:
.2918	ad 37 0d	lda $0d37			lda 	InputBuffer 			; at start
.291b	f0 d0		beq $28ed			beq 	_InputLoop
.291d	ce 37 0d	dec $0d37			dec 	InputBuffer
.2920	a9 08		lda #$08			lda 	#8
.2922	d0 ec		bne $2910			bne 	_InputPrintLoop
.2924					_InputExit:
.2924	a2 06		ldx #$06		ldx	#6
.2926	20 e7 14	jsr $14e7		jsr	deviceHandler
.2929	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d58					lastPrintToken:
>0d58							.fill 	1
.292a					Command_Print:
.292a	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.292c	8d 58 0d	sta $0d58			sta 	lastPrintToken
.292f	88		dey				dey
.2930					_PrintLoopSkip:
.2930	c8		iny				iny
.2931					_PrintLoop:
.2931	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2933	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2935	f0 5b		beq $2992			beq 	_PrintExit
.2937	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2939	f0 57		beq $2992			beq 	_PrintExit
.293b	8d 58 0d	sta $0d58			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.293e	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2940	f0 ee		beq $2930			beq 	_PrintLoopSkip
.2942	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2944	f0 3c		beq $2982			beq	 	_PrintNewLine
.2946	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2948	f0 40		beq $298a			beq 	_PrintTab
.294a	20 7e 36	jsr $367e			jsr 	EvaluateRoot 				; evaluate something at the root
.294d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.294f	85 2a		sta $2a				sta 	temp0
.2951	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2953	85 2b		sta $2b				sta 	1+(temp0)
.2955	a5 90		lda $90				lda 	esType 						; get type
.2957	f0 15		beq $296e			beq		_PrintInteger
.2959	4a		lsr a				lsr 	a 							; check for floating point
.295a	b0 08		bcs $2964			bcs 	_PrintFloat
.295c					_PrintString:
.295c	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.295e	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0
.2961	4c 7c 29	jmp $297c			jmp 	_PrintTemp0 				; print no leading space.
.2964					_PrintFloat:
.2964	a9 00		lda #$00			lda 	#0 							; stack level.
.2966	a2 16		ldx #$16		ldx	#22
.2968	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.296b	4c 75 29	jmp $2975			jmp 	_PrintSpaceTemp0
.296e					_PrintInteger:
.296e	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2970	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2972	20 76 3c	jsr $3c76			jsr 	MInt32ToString				; convert to text
.2975					_PrintSpaceTemp0:
.2975	a9 20		lda #$20			lda 	#32
.2977	a2 14		ldx #$14		ldx	#20
.2979	20 e7 14	jsr $14e7		jsr	deviceHandler
.297c					_PrintTemp0:
.297c	20 a3 29	jsr $29a3			jsr 	PrintString
.297f	4c 31 29	jmp $2931			jmp 	_PrintLoop
.2982					_PrintNewLine:
.2982	a2 06		ldx #$06		ldx	#6
.2984	20 e7 14	jsr $14e7		jsr	deviceHandler
.2987	4c 30 29	jmp $2930			jmp 	_PrintLoopSkip
.298a					_PrintTab:
.298a	a2 1a		ldx #$1a		ldx	#26
.298c	20 e7 14	jsr $14e7		jsr	deviceHandler
.298f	4c 30 29	jmp $2930			jmp 	_PrintLoopSkip
.2992					_PrintExit:
.2992	ad 58 0d	lda $0d58			lda		lastPrintToken 				; check last token
.2995	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2997	f0 09		beq $29a2			beq 	_PrintExit2
.2999	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.299b	f0 05		beq $29a2			beq 	_PrintExit2
.299d	a2 06		ldx #$06		ldx	#6
.299f	20 e7 14	jsr $14e7		jsr	deviceHandler
.29a2					_PrintExit2:
.29a2	60		rts				rts
.29a3					PrintString:
.29a3	da		phx				phx
.29a4	5a		phy				phy
.29a5	a0 00		ldy #$00			ldy 	#0							; get length
.29a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.29a9	aa		tax				tax 								; into X
.29aa	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.29ac	f0 0e		beq $29bc			beq 	_PSExit
.29ae	ca		dex				dex
.29af	da		phx				phx
.29b0	c8		iny				iny
.29b1	b1 2a		lda ($2a),y			lda 	(temp0),y
.29b3	a2 14		ldx #$14		ldx	#20
.29b5	20 e7 14	jsr $14e7		jsr	deviceHandler
.29b8	fa		plx				plx
.29b9	4c aa 29	jmp $29aa			jmp 	_PSLoop
.29bc					_PSExit:
.29bc	7a		ply				ply
.29bd	fa		plx				plx
.29be	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.29bf					Command_CLS:
.29bf	a2 04		ldx #$04		ldx	#4
.29c1	20 e7 14	jsr $14e7		jsr	deviceHandler
.29c4	60		rts				rts
.29c5					Command_Ink:
.29c5	a2 00		ldx #$00			ldx 	#0
.29c7	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger
.29ca	a2 08		ldx #$08		ldx	#8
.29cc	20 e7 14	jsr $14e7		jsr	deviceHandler
.29cf	60		rts				rts
.29d0					Command_Paper:
.29d0	a2 00		ldx #$00			ldx 	#0
.29d2	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger
.29d5	a2 12		ldx #$12		ldx	#18
.29d7	20 e7 14	jsr $14e7		jsr	deviceHandler
.29da	60		rts				rts
.29db					Command_Locate:
.29db	a2 00		ldx #$00			ldx 	#0
.29dd	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger
.29e0	20 9c 3d	jsr $3d9c			jsr 	CheckComma
.29e3	e8		inx				inx
.29e4	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger
.29e7	5a		phy				phy
.29e8	a4 99		ldy $99				ldy 	esInt0+1
.29ea	a5 98		lda $98				lda 	esInt0
.29ec	a2 10		ldx #$10		ldx	#16
.29ee	20 e7 14	jsr $14e7		jsr	deviceHandler
.29f1	7a		ply				ply
.29f2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.29f3					Command_VDU:
.29f3	20 9d 36	jsr $369d			jsr 	EvaluateRootInteger 			; get integer at root.
.29f6	a5 98		lda $98				lda 	esInt0
.29f8	a2 14		ldx #$14		ldx	#20
.29fa	20 e7 14	jsr $14e7		jsr	deviceHandler
.29fd					_CVNext:
.29fd	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.29ff	c8		iny				iny
.2a00	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2a02	f0 ef		beq $29f3			beq 	Command_VDU
.2a04	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2a06	d0 0a		bne $2a12			bne 	_CVExit
.2a08	a5 a0		lda $a0				lda 	esInt1
.2a0a	a2 14		ldx #$14		ldx	#20
.2a0c	20 e7 14	jsr $14e7		jsr	deviceHandler
.2a0f	4c fd 29	jmp $29fd			jmp 	_CVNext
.2a12	88		dey		_CVExit:dey
.2a13	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2a14					Command_Assert:
.2a14	20 9d 36	jsr $369d			jsr 	EvaluateRootInteger 		; what is being asserted.
.2a17	20 45 3d	jsr $3d45			jsr 	MInt32Zero 					; is it true ?
.2a1a	f0 01		beq $2a1d			beq 	_CAError
.2a1c	60		rts				rts
.2a1d					_CAError:
.2a1d	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2a1f	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2a22					Command_Dim:
.2a22	a2 04		ldx #$04		ldx	#4
.2a24	20 fc 4c	jsr $4cfc		jsr	variableHandler
.2a27	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2a29	c8		iny				iny
.2a2a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2a2c	f0 f4		beq $2a22			beq 	Command_Dim
.2a2e	88		dey				dey 								; unpick get
.2a2f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2a30					CommandLet:
.2a30	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2a32	20 d8 36	jsr $36d8			jsr 	EvaluateReference
.2a35	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2a37	20 84 3d	jsr $3d84			jsr 	CheckToken
.2a3a	e8		inx				inx 								; do RHS
.2a3b	20 80 36	jsr $3680			jsr 	Evaluate 					; evaluate and dereference
.2a3e	ca		dex				dex
.2a3f	20 43 2a	jsr $2a43			jsr 	WriteValue 					; write it out
.2a42	60		rts				rts
.2a43					WriteValue:
.2a43	5a		phy				phy
.2a44	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2a47	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2a49	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2a4b	29 40		and #$40			and 	#$40
.2a4d	d0 4f		bne $2a9e			bne		_WVType
.2a4f	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2a51	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2a53	29 40		and #$40			and 	#$40
.2a55	d0 1f		bne $2a76			bne 	_WVCopyString
.2a57	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2a59	15 91		ora $91,x			ora 	esType+1,x
.2a5b	4a		lsr a				lsr 	a
.2a5c	90 22		bcc $2a80			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2a5e	b5 90		lda $90,x			lda 	esType,x
.2a60	4a		lsr a				lsr 	a
.2a61	90 3b		bcc $2a9e			bcc 	_WVType
.2a63	e8		inx				inx 								; force the value being written to be a float.
.2a64	20 e4 32	jsr $32e4			jsr 	BPMakeFloat
.2a67	ca		dex				dex
.2a68	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0 					; set Temp0 to write address
.2a6b	e8		inx				inx
.2a6c	8a		txa				txa
.2a6d	a2 22		ldx #$22		ldx	#34
.2a6f	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.2a72	aa		tax				tax
.2a73	4c 9c 2a	jmp $2a9c			jmp 	_WVCopyExit
.2a76					_WVCopyString:
.2a76	8a		txa				txa
.2a77	a2 10		ldx #$10		ldx	#16
.2a79	20 b5 40	jsr $40b5		jsr	stringHandler
.2a7c	aa		tax				tax
.2a7d	4c 9c 2a	jmp $2a9c			jmp 	_WVCopyExit
.2a80					_WVCopyData4:
.2a80	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2a82	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2a84	d0 10		bne $2a96			bne 	_WVCopyData1
.2a86	a0 03		ldy #$03			ldy 	#3
.2a88	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2a8a	91 2a		sta ($2a),y			sta 	(temp0),y
.2a8c	88		dey				dey
.2a8d	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2a8f	91 2a		sta ($2a),y			sta 	(temp0),y
.2a91	88		dey				dey
.2a92	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2a94	91 2a		sta ($2a),y			sta 	(temp0),y
.2a96					_WVCopyData1:
.2a96	a0 00		ldy #$00			ldy 	#0
.2a98	b5 99		lda $99,x			lda 	esInt0+1,x
.2a9a	91 2a		sta ($2a),y			sta 	(temp0),y
.2a9c					_WVCopyExit:
.2a9c	7a		ply				ply
.2a9d	60		rts				rts
.2a9e					_WVType:
.2a9e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2aa0	20 09 15	jsr $1509		jsr	errorHandler
.2aa3					TOSToTemp0:
.2aa3	b5 98		lda $98,x			lda 	esInt0,x
.2aa5	85 2a		sta $2a				sta 	temp0
.2aa7	b5 a0		lda $a0,x			lda 	esInt1,x
.2aa9	85 2b		sta $2b				sta 	temp0+1
.2aab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2aac					Command_Poke:
.2aac	a9 01		lda #$01			lda 	#1
.2aae	d0 06		bne $2ab6			bne 	PokeGeneral
.2ab0					Command_Doke:
.2ab0	a9 02		lda #$02			lda 	#2
.2ab2	d0 02		bne $2ab6			bne 	PokeGeneral
.2ab4					Command_Loke:
.2ab4	a9 03		lda #$03			lda 	#3
.2ab6					PokeGeneral:
.2ab6	48		pha				pha 								; save id (PDL = 123)
.2ab7	20 9d 36	jsr $369d			jsr 	EvaluateRootInteger 		; target address
.2aba	20 9c 3d	jsr $3d9c			jsr	 	CheckComma
.2abd	e8		inx				inx
.2abe	20 9f 36	jsr $369f			jsr 	EvaluateInteger 			; what value to POKE ?
.2ac1	ca		dex				dex
.2ac2	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0 					; temp0 points to the target address
.2ac5	84 32		sty $32				sty 	tempShort 					; save Y
.2ac7	68		pla				pla 								; get copy type (1-3) and dispatch
.2ac8	aa		tax				tax
.2ac9	ca		dex				dex
.2aca	f0 14		beq $2ae0			beq 	_Poke1
.2acc	ca		dex				dex
.2acd	f0 0b		beq $2ada			beq 	_Poke2
.2acf	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2ad1	a5 b1		lda $b1				lda 	esInt3+1
.2ad3	91 2a		sta ($2a),y			sta 	(temp0),y
.2ad5	88		dey				dey
.2ad6	a5 a9		lda $a9				lda 	esInt2+1
.2ad8	91 2a		sta ($2a),y			sta 	(temp0),y
.2ada					_Poke2:
.2ada	a0 01		ldy #$01			ldy 	#1
.2adc	a5 a1		lda $a1				lda 	esInt1+1
.2ade	91 2a		sta ($2a),y			sta 	(temp0),y
.2ae0					_Poke1:
.2ae0	a0 00		ldy #$00			ldy 	#0
.2ae2	a5 99		lda $99				lda 	esInt0+1
.2ae4	91 2a		sta ($2a),y			sta 	(temp0),y
.2ae6	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2ae8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2ae9					Command_Rem:
.2ae9					Command_Rem2:
.2ae9	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2aeb	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2aed	d0 06		bne $2af5			bne 	_CRNotString
.2aef	c8		iny				iny
.2af0	98		tya				tya
.2af1	38		sec				sec
.2af2	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2af4	a8		tay				tay
.2af5					_CRNotString:
.2af5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2af6					CommandStop:
.2af6	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2af8	20 09 15	jsr $1509		jsr	errorHandler
.2afb					CommandEnd:
.2afb	4c 05 3e	jmp $3e05			jmp 	WarmStart
.2afe					CommandXemu:
.2afe	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2b01					AdvanceNextLine:
.2b01	a0 00		ldy #$00			ldy 	#0 							; get offset
.2b03	b1 28		lda ($28),y			lda 	(codePtr),y
.2b05	18		clc				clc 								; add to codePtr
.2b06	65 28		adc $28				adc 	codePtr
.2b08	85 28		sta $28				sta 	codePtr
.2b0a	90 02		bcc $2b0e			bcc 	_ANLNoCarry
.2b0c	e6 29		inc $29				inc 	codePtr+1
.2b0e					_ANLNoCarry:
.2b0e	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2b10	f0 e9		beq $2afb			beq 	CommandEnd 					; execute END
.2b12	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2b14	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2b15					Command_FOR:
.2b15	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2b17	a2 0b		ldx #$0b			ldx 	#11
.2b19	20 b7 3d	jsr $3db7			jsr 	RSClaim
.2b1c	20 30 2a	jsr $2a30			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2b1f	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2b21	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2b23	d0 48		bne $2b6d			bne 	_CFType
.2b25	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2b27	20 84 3d	jsr $3d84			jsr 	CheckToken
.2b2a	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2b2c	20 9f 36	jsr $369f			jsr 	EvaluateInteger				; get terminal value in stack 1
.2b2f	5a		phy				phy
.2b30	a0 04		ldy #$04			ldy 	#4
.2b32	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2b34	91 37		sta ($37),y			sta 	(rsPointer),y
.2b36	c8		iny				iny
.2b37	a5 a0		lda $a0				lda		esInt1
.2b39	91 37		sta ($37),y			sta 	(rsPointer),y
.2b3b	c8		iny				iny
.2b3c	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2b3e	91 37		sta ($37),y			sta 	(rsPointer),y
.2b40	c8		iny				iny
.2b41	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2b43	91 37		sta ($37),y			sta 	(rsPointer),y
.2b45	c8		iny				iny
.2b46	a5 a1		lda $a1				lda		esInt1+1
.2b48	91 37		sta ($37),y			sta 	(rsPointer),y
.2b4a	c8		iny				iny
.2b4b	a5 a9		lda $a9				lda		esInt2+1
.2b4d	91 37		sta ($37),y			sta 	(rsPointer),y
.2b4f	c8		iny				iny
.2b50	a5 b1		lda $b1				lda		esInt3+1
.2b52	91 37		sta ($37),y			sta 	(rsPointer),y
.2b54	7a		ply				ply
.2b55	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2b57	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2b59	d0 0c		bne $2b67			bne 	_CFDone
.2b5b	c8		iny				iny									; skip over step.
.2b5c	20 9f 36	jsr $369f			jsr 	EvaluateInteger 			; get step
.2b5f	5a		phy				phy
.2b60	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2b62	a0 06		ldy #$06			ldy 	#6
.2b64	91 37		sta ($37),y			sta 	(rsPointer),y
.2b66	7a		ply				ply
.2b67					_CFDone:
.2b67	a9 01		lda #$01			lda 	#1
.2b69	20 e3 3d	jsr $3de3			jsr 	RSSavePosition 				; save position.
.2b6c	60		rts				rts
.2b6d					_CFType:
.2b6d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b6f	20 09 15	jsr $1509		jsr	errorHandler
.2b72					Command_NEXT:
.2b72	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b74	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2b76	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2b78	f0 05		beq $2b7f			beq 	_isok
.2b7a	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2b7c	20 09 15	jsr $1509		jsr	errorHandler
.2b7f					_isok:
.2b7f	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2b81	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2b83	b0 16		bcs $2b9b			bcs 	_CNNoIndex
.2b85	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2b87	20 d8 36	jsr $36d8			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2b8a	5a		phy				phy
.2b8b	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2b8d	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b8f	d5 98		cmp $98,x			cmp 	esInt0,x
.2b91	d0 72		bne $2c05			bne 	_CNBadIndex
.2b93	c8		iny				iny
.2b94	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b96	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2b98	d0 6b		bne $2c05			bne 	_CNBadIndex
.2b9a	7a		ply				ply
.2b9b					_CNNoIndex:
.2b9b	5a		phy				phy
.2b9c	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2b9e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ba0	85 2a		sta $2a				sta 	temp0
.2ba2	c8		iny				iny
.2ba3	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ba5	85 2b		sta $2b				sta 	temp0+1
.2ba7	c8		iny				iny
.2ba8	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2baa	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2bac	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2bae	10 01		bpl $2bb1			bpl 	_CNSignX
.2bb0	ca		dex				dex  								; X = $FF
.2bb1					_CNSignX:
.2bb1	18		clc				clc 								; add to the LSB
.2bb2	a0 00		ldy #$00			ldy 	#0
.2bb4	71 2a		adc ($2a),y			adc 	(temp0),y
.2bb6	91 2a		sta ($2a),y			sta 	(temp0),y
.2bb8					_CNPropogate:
.2bb8	c8		iny				iny  								; add the sign extended in X to the rest.
.2bb9	8a		txa				txa
.2bba	71 2a		adc ($2a),y			adc 	(temp0),y
.2bbc	91 2a		sta ($2a),y			sta 	(temp0),y
.2bbe	c8		iny				iny
.2bbf	8a		txa				txa
.2bc0	71 2a		adc ($2a),y			adc 	(temp0),y
.2bc2	91 2a		sta ($2a),y			sta 	(temp0),y
.2bc4	c8		iny				iny
.2bc5	8a		txa				txa
.2bc6	71 2a		adc ($2a),y			adc 	(temp0),y
.2bc8	91 2a		sta ($2a),y			sta 	(temp0),y
.2bca	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2bcb	a5 37		lda $37				lda 	rsPointer
.2bcd	69 07		adc #$07			adc 	#7
.2bcf	85 2c		sta $2c				sta 	temp1
.2bd1	a9 00		lda #$00			lda 	#0
.2bd3	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2bd5	a8		tay				tay 								; and clear the Y register again.
.2bd6	65 38		adc $38				adc 	rsPointer+1
.2bd8	85 2d		sta $2d				sta 	temp1+1
.2bda	38		sec				sec 								; calculate current - limit oring interim values.
.2bdb	20 11 2c	jsr $2c11			jsr 	_CNCompare 					; each of these does a byte.
.2bde	20 11 2c	jsr $2c11			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2be1	20 11 2c	jsr $2c11			jsr 	_CNCompare 					; and the carry of the subtraction.
.2be4	20 11 2c	jsr $2c11			jsr 	_CNCompare
.2be7	50 02		bvc $2beb			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2be9	49 80		eor #$80			eor 	#$80
.2beb					_CNNoOverflow:
.2beb	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2bed	30 1b		bmi $2c0a			bmi 	_CNCheckDownto
.2bef	c9 00		cmp #$00			cmp 	#0
.2bf1	30 0b		bmi $2bfe			bmi 	_CNLoopRound 				; loop round if < =
.2bf3	a5 2e		lda $2e				lda 	temp2
.2bf5	f0 07		beq $2bfe			beq 	_CNLoopRound
.2bf7					_CNLoopExit:
.2bf7	7a		ply				ply
.2bf8	a9 0b		lda #$0b			lda 	#11
.2bfa	20 d9 3d	jsr $3dd9			jsr 	RSFree
.2bfd	60		rts				rts
.2bfe					_CNLoopRound:
.2bfe	7a		ply				ply
.2bff	a9 01		lda #$01			lda 	#1
.2c01	20 f6 3d	jsr $3df6			jsr 	RSLoadPosition				; go back to the loop top
.2c04	60		rts				rts
.2c05					_CNBadIndex:
.2c05	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2c07	20 09 15	jsr $1509		jsr	errorHandler
.2c0a					_CNCheckDownto:
.2c0a	c9 00		cmp #$00			cmp 	#0
.2c0c	10 f0		bpl $2bfe			bpl 	_CNLoopRound
.2c0e	4c f7 2b	jmp $2bf7			jmp 	_CNLoopExit
.2c11					_CNCompare:
.2c11	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2c13	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2c15	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2c17	85 2e		sta $2e				sta 	temp2
.2c19	c8		iny				iny
.2c1a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2c1b					CommandIf:
.2c1b	20 9d 36	jsr $369d			jsr 	EvaluateRootInteger 		; get what's being tested.
.2c1e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2c20	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2c22	f0 04		beq $2c28			beq 	_IfSimple
.2c24	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2c26	d0 1b		bne $2c43			bne 	_IfComplex
.2c28					_IfSimple:
.2c28	20 45 3d	jsr $3d45			jsr 	MInt32Zero					; check if TOS zero
.2c2b	f0 10		beq $2c3d			beq 	_IfEOL 						; go to next line.
.2c2d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2c2f	c8		iny				iny
.2c30	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2c32	f0 0c		beq $2c40			beq 	_IfGoto 					; do the Goto code
.2c34	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2c36	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2c38	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2c3a	f0 04		beq $2c40			beq 	_IfGoto
.2c3c	60		rts				rts 								; else continue on this line.
.2c3d					_IfEOL:
.2c3d	4c 01 2b	jmp $2b01			jmp 	AdvanceNextLine 			; go to next line
.2c40					_IfGoto:
.2c40	4c 44 28	jmp $2844			jmp 	CommandGoto
.2c43					_IfComplex:
.2c43	20 45 3d	jsr $3d45			jsr 	MInt32Zero 					; is it true ?
.2c46	f0 01		beq $2c49			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2c48	60		rts				rts 								; else continue.
.2c49					_IFSkip:
.2c49	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2c4b	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2c4d	4c d8 2e	jmp $2ed8			jmp		ScanForward
.2c50					Command_ELSE:
.2c50	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2c52	8a		txa				txa
.2c53	4c d8 2e	jmp $2ed8			jmp		ScanForward
.2c56					Command_ENDIF:
.2c56	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d59					storeSize:
>0d59							.fill 	1
.2c57					CommandLocal:
.2c57	a2 00		ldx #$00			ldx 	#0
.2c59	20 75 2c	jsr $2c75			jsr 	LocaliseVariable 			; localise one.
.2c5c					_CLCheckNext:
.2c5c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2c5e	c8		iny				iny
.2c5f	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2c61	f0 06		beq $2c69			beq 	_CLAssignment
.2c63	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2c65	f0 f0		beq $2c57			beq 	CommandLocal
.2c67	88		dey				dey
.2c68	60		rts				rts
.2c69					_CLAssignment:
.2c69	a2 01		ldx #$01			ldx 	#1
.2c6b	20 80 36	jsr $3680			jsr 	Evaluate 					; evaluate RHS
.2c6e	ca		dex				dex
.2c6f	20 43 2a	jsr $2a43			jsr 	WriteValue
.2c72	4c 5c 2c	jmp $2c5c			jmp 	_CLCheckNext
.2c75					LocaliseVariable:
.2c75	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2c77	c9 40		cmp #$40			cmp 	#$40
.2c79	b0 63		bcs $2cde			bcs 	_LVSyntax
.2c7b	8a		txa				txa 								; get the address of that variable.
.2c7c	a2 02		ldx #$02		ldx	#2
.2c7e	20 fc 4c	jsr $4cfc		jsr	variableHandler
.2c81	aa		tax				tax
.2c82	da		phx				phx
.2c83	5a		phy				phy
.2c84	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2c87	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2c89	0a		asl a				asl 	a
.2c8a	10 16		bpl $2ca2			bpl 	_LVPushNumber
.2c8c	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2c8e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c90	c8		iny				iny
.2c91	85 2c		sta $2c				sta 	temp1
.2c93	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c95	85 2d		sta $2d				sta 	temp1+1
.2c97	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2c99	b1 2c		lda ($2c),y			lda 	(temp1),y
.2c9b	aa		tax				tax 								; into X
.2c9c	e8		inx				inx 								; +1 for length.
.2c9d	a9 24		lda #$24			lda 	#markerString
.2c9f	4c b7 2c	jmp $2cb7			jmp 	_LVWriteFrame
.2ca2					_LVPushNumber:
.2ca2	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2ca4	85 2c		sta $2c				sta 	temp1
.2ca6	a5 2b		lda $2b				lda 	temp0+1
.2ca8	85 2d		sta $2d				sta 	temp1+1
.2caa	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2cac	4a		lsr a				lsr 	a
.2cad	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2caf	a2 04		ldx #$04			ldx 	#VarISize
.2cb1	90 04		bcc $2cb7			bcc 	_LVIsInteger
.2cb3	a9 23		lda #$23			lda 	#markerFloat
.2cb5	a2 06		ldx #$06			ldx 	#VarFSize
.2cb7					_LVIsInteger:
.2cb7					_LVWriteFrame:
.2cb7	8e 59 0d	stx $0d59			stx 	storeSize 					; number of bytes to copy from (temp0)
.2cba	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2cbb	e8		inx				inx
.2cbc	e8		inx				inx
.2cbd	20 b7 3d	jsr $3db7			jsr 	RSClaim 					; create the stack frame.
.2cc0	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2cc2	a0 01		ldy #$01			ldy 	#1
.2cc4	91 37		sta ($37),y			sta 	(rsPointer),y
.2cc6	c8		iny				iny
.2cc7	a5 2b		lda $2b				lda 	temp0+1
.2cc9	91 37		sta ($37),y			sta 	(rsPointer),y
.2ccb	a0 00		ldy #$00			ldy 	#0
.2ccd					_LVCopyData:
.2ccd	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2ccf	c8		iny				iny 								; write allowing for the header bit.
.2cd0	c8		iny				iny
.2cd1	c8		iny				iny
.2cd2	91 37		sta ($37),y			sta 	(rsPointer),y
.2cd4	88		dey				dey
.2cd5	88		dey				dey
.2cd6	ce 59 0d	dec $0d59			dec 	storeSize 					; do it storesize times
.2cd9	d0 f2		bne $2ccd			bne 	_LVCopyData
.2cdb	7a		ply				ply
.2cdc	fa		plx				plx
.2cdd	60		rts				rts
.2cde					_LVSyntax:
.2cde	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ce0	20 09 15	jsr $1509		jsr	errorHandler
.2ce3					RestoreLocals:
.2ce3	a2 00		ldx #$00			ldx 	#0
.2ce5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ce7	c9 40		cmp #$40			cmp	 	#64
.2ce9	90 01		bcc $2cec			bcc 	_RLocal
.2ceb	60		rts				rts
.2cec					_RLocal:
.2cec	da		phx				phx
.2ced	5a		phy				phy
.2cee	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2cf0	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cf2	85 2a		sta $2a				sta 	temp0
.2cf4	c8		iny				iny
.2cf5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cf7	85 2b		sta $2b				sta 	temp0+1
.2cf9	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2cfb	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cfd	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2cff	f0 25		beq $2d26			beq 	_RString
.2d01	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2d03	c9 25		cmp #$25			cmp 	#markerInt
.2d05	f0 02		beq $2d09			beq 	_RIsInteger
.2d07	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2d09					_RIsInteger:
.2d09	da		phx				phx
.2d0a	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2d0c					_RCopyBack:
.2d0c	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d0e	88		dey				dey
.2d0f	88		dey				dey
.2d10	88		dey				dey
.2d11	91 2a		sta ($2a),y			sta 	(temp0),y
.2d13	c8		iny				iny
.2d14	c8		iny				iny
.2d15	c8		iny				iny
.2d16	c8		iny				iny
.2d17	ca		dex				dex
.2d18	d0 f2		bne $2d0c			bne 	_RCopyBack
.2d1a	68		pla				pla 								; get size add 3
.2d1b	18		clc				clc
.2d1c	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2d1e					_RRestoreAAndLoop:
.2d1e	20 d9 3d	jsr $3dd9			jsr 	RSFree
.2d21	7a		ply				ply
.2d22	fa		plx				plx
.2d23	4c e3 2c	jmp $2ce3			jmp 	RestoreLocals 				; go see if there are any more locals.
.2d26					_RString:
.2d26	a2 00		ldx #$00			ldx 	#0
.2d28	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2d2a	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d2c	95 98		sta $98,x			sta 	esInt0,x
.2d2e	c8		iny				iny
.2d2f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d31	95 a0		sta $a0,x			sta 	esInt1,x
.2d33	18		clc				clc
.2d34	a5 37		lda $37				lda 	rsPointer
.2d36	69 03		adc #$03			adc 	#3
.2d38	95 99		sta $99,x			sta 	esInt0+1,x
.2d3a	a5 38		lda $38				lda 	rsPointer+1
.2d3c	69 00		adc #$00			adc 	#0
.2d3e	95 a1		sta $a1,x			sta 	esInt1+1,x
.2d40	8a		txa				txa
.2d41	a2 10		ldx #$10		ldx	#16
.2d43	20 b5 40	jsr $40b5		jsr	stringHandler
.2d46	a0 03		ldy #$03			ldy 	#3 							; get string length
.2d48	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d4a	18		clc				clc
.2d4b	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2d4d	4c 1e 2d	jmp $2d1e			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d5a					paramCount:
>0d5a							.fill 	1
.2d50					CallProc:
.2d50	20 d8 2d	jsr $2dd8			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2d53	48		pha				pha 								; save length on stack
.2d54	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2d56	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2d58	48		pha				pha
.2d59	a5 2a		lda $2a				lda 	temp0
.2d5b	48		pha				pha
.2d5c	98		tya				tya 								; calculate Y + length
.2d5d	18		clc				clc
.2d5e	65 32		adc $32				adc 	tempShort
.2d60	a8		tay				tay
.2d61	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2d63					_CallProcEvalParams:
.2d63	e8		inx				inx
.2d64	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2d66	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2d68	f0 0b		beq $2d75			beq 	_CPDoneParams
.2d6a	20 80 36	jsr $3680			jsr 	Evaluate 					; evaluate a parameter
.2d6d	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2d6f	c8		iny				iny
.2d70	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2d72	f0 ef		beq $2d63			beq 	_CallProcEvalParams
.2d74	88		dey				dey 								; undo consumption.
.2d75					_CPDoneParams:
.2d75	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen 			; check closing parenthesis.
.2d78	8e 5a 0d	stx $0d5a			stx 	paramCount 					; store parameter count+1
.2d7b	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2d7d	a9 50		lda #$50			lda 	#markerPROC
.2d7f	20 b7 3d	jsr $3db7			jsr 	RSClaim
.2d82	a9 01		lda #$01			lda 	#1 							; store return address.
.2d84	20 e3 3d	jsr $3de3			jsr 	RSSavePosition
.2d87	68		pla				pla 								; get the new code Ptr
.2d88	85 28		sta $28				sta 	codePtr
.2d8a	68		pla				pla
.2d8b	85 29		sta $29				sta 	codePtr+1
.2d8d	68		pla				pla 								; length of name + 4 is the param start.
.2d8e	18		clc				clc
.2d8f	69 04		adc #$04			adc 	#4
.2d91	a8		tay				tay
.2d92	a2 ff		ldx #$ff			ldx 	#$FF
.2d94					_CPLoadParameters:
.2d94	e8		inx				inx 								; point to where the address should be loaded.
.2d95	ec 5a 0d	cpx $0d5a			cpx 	paramCount 					; too many parameters in definition ?
.2d98	f0 1e		beq $2db8			beq 	_CPParamError
.2d9a	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2d9c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2d9e	f0 0e		beq $2dae			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2da0	20 75 2c	jsr $2c75			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2da3	20 43 2a	jsr $2a43			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2da6	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2da8	c8		iny				iny
.2da9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2dab	f0 e7		beq $2d94			beq 	_CPLoadParameters
.2dad	88		dey				dey 								; no, unconsume and check for )
.2dae					_CPParamComplete:
.2dae	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen 			; check )
.2db1	e8		inx				inx 								; check right number of parameters have been consumed
.2db2	ec 5a 0d	cpx $0d5a			cpx 	paramCount
.2db5	d0 01		bne $2db8			bne 	_CPParamError
.2db7	60		rts				rts
.2db8					_CPParamError:
.2db8	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2dba	20 09 15	jsr $1509		jsr	errorHandler
.2dbd					ReturnProc:
.2dbd	20 e3 2c	jsr $2ce3			jsr 	RestoreLocals 				; get the locals back.
.2dc0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2dc2	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2dc4	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2dc6	f0 05		beq $2dcd			beq 	_isok
.2dc8	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2dca	20 09 15	jsr $1509		jsr	errorHandler
.2dcd					_isok:
.2dcd	a9 01		lda #$01			lda 	#1
.2dcf	20 f6 3d	jsr $3df6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2dd2	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2dd4	20 d9 3d	jsr $3dd9			jsr 	RSFree
.2dd7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d5b					procList:
>0d5b							.fill 	2		 					; terminated by name high being zero.
.0d5d					yInLine:
>0d5d							.fill 	1
.2dd8					FindProcedure:
.2dd8	8c 5d 0d	sty $0d5d			sty 	yInLine 					; save current position.
.2ddb	20 92 2e	jsr $2e92			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2dde	85 2c		sta $2c				sta 	temp1
.2de0	ad 5b 0d	lda $0d5b			lda		procList 					; put procList address in temp2
.2de3	85 2e		sta $2e				sta 	temp2
.2de5	ad 5c 0d	lda $0d5c			lda 	procList+1
.2de8	85 2f		sta $2f				sta 	temp2+1
.2dea	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2dec					_FPLoop:
.2dec	b1 2e		lda ($2e),y			lda 	(temp2),y
.2dee	f0 4d		beq $2e3d			beq 	_FPError 					; if so, we don't know this procedure.
.2df0	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2df2	c8		iny				iny
.2df3	b1 2e		lda ($2e),y			lda 	(temp2),y
.2df5	85 2a		sta $2a				sta 	temp0
.2df7	c8		iny				iny
.2df8	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2dfa	c5 2c		cmp $2c				cmp 	temp1
.2dfc	d0 29		bne $2e27			bne 	_FPNext 					; hash is different, go to next.
.2dfe	38		sec				sec
.2dff	ad 5d 0d	lda $0d5d			lda 	yInLine 					; position in line must be at least 4
.2e02	e9 04		sbc #$04			sbc 	#4
.2e04	18		clc				clc
.2e05	65 28		adc $28				adc 	codePtr
.2e07	85 30		sta $30				sta 	temp3
.2e09	a5 29		lda $29				lda 	codePtr+1
.2e0b	69 00		adc #$00			adc 	#0
.2e0d	85 31		sta $31				sta 	temp3+1
.2e0f	5a		phy				phy
.2e10	a0 04		ldy #$04			ldy 	#4
.2e12					_FPCName:
.2e12	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2e14	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2e16	d0 0e		bne $2e26			bne 	_FPpulYNext 				; if different go to next one.
.2e18	c8		iny				iny
.2e19	c9 3a		cmp #$3a			cmp 	#$3A
.2e1b	90 f5		bcc $2e12			bcc 	_FPCName 					; compare the whole lot....
.2e1d	68		pla				pla 								; throw away the saved Y
.2e1e	98		tya				tya 								; length of name is Y-4
.2e1f	38		sec				sec
.2e20	e9 04		sbc #$04			sbc 	#4
.2e22	ac 5d 0d	ldy $0d5d			ldy 	yInLine  					; get the original Y back
.2e25	60		rts				rts
.2e26					_FPpulYNext:
.2e26	7a		ply				ply
.2e27					_FPNext:
.2e27	c8		iny				iny 								; next procedure record.
.2e28	10 c2		bpl $2dec			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2e2a	98		tya				tya 								; subtract 128 from Y
.2e2b	38		sec				sec
.2e2c	e9 80		sbc #$80			sbc 	#128
.2e2e	a8		tay				tay
.2e2f	18		clc				clc 								; add 128 to temp2, so we can have more than
.2e30	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2e32	69 80		adc #$80			adc 	#128
.2e34	85 2e		sta $2e				sta 	temp2
.2e36	90 b4		bcc $2dec			bcc 	_FPLoop
.2e38	e6 2f		inc $2f				inc 	temp2+1
.2e3a	4c ec 2d	jmp $2dec			jmp 	_FPLoop
.2e3d					_FPError:
.2e3d	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2e3f	20 09 15	jsr $1509		jsr	errorHandler
.2e42					ScanProc:
.2e42	5a		phy				phy
.2e43	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2e45	8d 5b 0d	sta $0d5b			sta 	procList
.2e48	a5 36		lda $36				lda 	lowMemory+1
.2e4a	8d 5c 0d	sta $0d5c			sta 	procList+1
.2e4d	20 c1 31	jsr $31c1			jsr 	ResetCodeAddress 			; back to the start.
.2e50					_ScanLoop:
.2e50	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2e52	b1 28		lda ($28),y			lda 	(codePtr),y
.2e54	f0 2a		beq $2e80			beq 	_ScanExit
.2e56	a0 03		ldy #$03			ldy 	#3							; get first token
.2e58	b1 28		lda ($28),y			lda 	(codePtr),y
.2e5a	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2e5c	d0 12		bne $2e70			bne 	_ScanNext
.2e5e	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2e60	20 87 2e	jsr $2e87			jsr 	_ScanWrite
.2e63	a5 28		lda $28				lda 	codePtr
.2e65	20 87 2e	jsr $2e87			jsr 	_ScanWrite
.2e68	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2e6a	20 92 2e	jsr $2e92			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2e6d	20 87 2e	jsr $2e87			jsr 	_ScanWrite					; and write that
.2e70					_ScanNext:
.2e70	18		clc				clc
.2e71	a0 00		ldy #$00			ldy 	#0
.2e73	b1 28		lda ($28),y			lda 	(codePtr),y
.2e75	65 28		adc $28				adc 	codePtr
.2e77	85 28		sta $28				sta 	codePtr
.2e79	90 d5		bcc $2e50			bcc 	_ScanLoop
.2e7b	e6 29		inc $29				inc 	codePtr+1
.2e7d	4c 50 2e	jmp $2e50			jmp 	_ScanLoop
.2e80					_ScanExit:
.2e80	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2e82	20 87 2e	jsr $2e87			jsr 	_ScanWrite
.2e85	7a		ply				ply
.2e86	60		rts				rts
.2e87					_ScanWrite:
.2e87	a0 00		ldy #$00			ldy 	#0
.2e89	91 35		sta ($35),y			sta 	(lowMemory),y
.2e8b	e6 35		inc $35				inc 	lowMemory
.2e8d	d0 02		bne $2e91			bne 	_SWNoCarry
.2e8f	e6 36		inc $36				inc 	lowMemory+1
.2e91					_SWNoCarry:
.2e91	60		rts				rts
.2e92					CalculateProcedureHash:
.2e92	a9 00		lda #$00			lda 	#0 							; clear hash.
.2e94	85 2a		sta $2a				sta 	temp0
.2e96					_CPHLoop:
.2e96	18		clc				clc 								; add character and rotate and add carry back in
.2e97	b1 28		lda ($28),y			lda 	(codePtr),y
.2e99	65 2a		adc $2a				adc 	temp0
.2e9b	6a		ror a				ror 	a
.2e9c	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2e9e	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2ea0	b1 28		lda ($28),y			lda 	(codePtr),y
.2ea2	c8		iny				iny 								; advance incase we go round again.
.2ea3	c9 3a		cmp #$3a			cmp 	#$3A
.2ea5	90 ef		bcc $2e96			bcc 	_CPHLoop
.2ea7	a5 2a		lda $2a				lda 	temp0
.2ea9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2eaa					Command_Repeat:
.2eaa	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2eac	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2eae	20 b7 3d	jsr $3db7			jsr 	RSClaim
.2eb1	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2eb3	20 e3 3d	jsr $3de3			jsr 	RSSavePosition
.2eb6	60		rts				rts
.2eb7					Command_Until:
.2eb7	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2eb9	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ebb	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2ebd	f0 05		beq $2ec4			beq 	_isok
.2ebf	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2ec1	20 09 15	jsr $1509		jsr	errorHandler
.2ec4					_isok:
.2ec4	20 9d 36	jsr $369d			jsr 	EvaluateRootInteger 		; at the bottom.
.2ec7	20 45 3d	jsr $3d45			jsr 	MInt32Zero					; check if TOS zero
.2eca	d0 06		bne $2ed2			bne 	_CUExit
.2ecc	a9 01		lda #$01			lda 	#1
.2ece	20 f6 3d	jsr $3df6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2ed1	60		rts				rts
.2ed2					_CUExit:
.2ed2	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2ed4	20 d9 3d	jsr $3dd9			jsr 	RSFree
.2ed7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2ed8					ScanForward:
.2ed8	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2eda	86 2d		stx $2d				stx 	temp1+1
.2edc	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2ede	85 2e		sta $2e				sta 	temp2
.2ee0	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2ee2	c8		iny				iny
.2ee3	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2ee5	d0 08		bne $2eef			bne 	_SFNoCheck 					; if so, check token against entered values.
.2ee7	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2ee9	f0 24		beq $2f0f			beq 	_SFExit 					; at the same strcture depth.
.2eeb	c5 2d		cmp $2d				cmp 	temp1+1
.2eed	f0 20		beq $2f0f			beq 	_SFExit
.2eef					_SFNoCheck:
.2eef	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2ef1	90 ed		bcc $2ee0			bcc 	_SFLoop
.2ef3	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2ef5	90 19		bcc $2f10			bcc 	_SFSpecials
.2ef7	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2ef9	90 e5		bcc $2ee0			bcc 	_SFLoop
.2efb	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2efd	b0 e1		bcs $2ee0			bcs 	_SFLoop
.2eff	aa		tax				tax  								; token in X, and look up the adjuster.
.2f00	bd bb 35	lda $35bb,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2f03	38		sec				sec 								; convert to an offset ($FF,$01)
.2f04	e9 81		sbc #$81			sbc 	#$81
.2f06	18		clc				clc 								; add to depth
.2f07	65 2e		adc $2e				adc 	temp2
.2f09	85 2e		sta $2e				sta 	temp2
.2f0b	10 d3		bpl $2ee0			bpl 	_SFLoop 					; +ve okay to continue
.2f0d	30 07		bmi $2f16			bmi 	SFError 					; if gone -ve then we have a nesting error
.2f0f	60		rts		_SFExit:rts
.2f10					_SFSpecials:
.2f10	20 1b 2f	jsr $2f1b			jsr 	ScannerSkipSpecial
.2f13	4c e0 2e	jmp $2ee0			jmp 	_SFLoop
.2f16					SFError:
.2f16	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2f18	20 09 15	jsr $1509		jsr	errorHandler
.2f1b					ScannerSkipSpecial:
.2f1b	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2f1d	f0 10		beq $2f2f			beq 	_SFNextLine
.2f1f	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2f21	f0 2b		beq $2f4e			beq 	_SFFloatSkip
.2f23	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2f25	f0 02		beq $2f29			beq 	_SFSkipString
.2f27	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2f28	60		rts				rts 								; token.
.2f29					_SFSkipString:
.2f29	98		tya				tya
.2f2a	38		sec				sec
.2f2b	71 28		adc ($28),y			adc 	(codePtr),y
.2f2d	a8		tay				tay
.2f2e	60		rts				rts
.2f2f					_SFNextLine:
.2f2f	a0 00		ldy #$00			ldy 	#0 							; get offset
.2f31	b1 28		lda ($28),y			lda 	(codePtr),y
.2f33	18		clc				clc 								; add to code pointer.
.2f34	65 28		adc $28				adc 	codePtr
.2f36	85 28		sta $28				sta 	codePtr
.2f38	90 02		bcc $2f3c			bcc		_SFNLNoCarry
.2f3a	e6 29		inc $29				inc 	codePtr+1
.2f3c					_SFNLNoCarry:
.2f3c	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2f3e	d0 0b		bne $2f4b			bne		_SFXNL 						; no go round again
.2f40	a5 2c		lda $2c				lda 	temp1
.2f42	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2f44	d0 d0		bne $2f16			bne 	SFError 					; read uses this to search for data statements
.2f46	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2f48	20 09 15	jsr $1509		jsr	errorHandler
.2f4b	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2f4d	60		rts				rts
.2f4e					_SFFloatSkip:
.2f4e	98		tya				tya 								; skip over an embedded float.
.2f4f	18		clc				clc
.2f50	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2f52	a8		tay				tay
.2f53	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2f54					Command_While:
.2f54	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2f56	a2 04		ldx #$04			ldx 	#4
.2f58	20 b7 3d	jsr $3db7			jsr 	RSClaim 					; create on stack.
.2f5b	88		dey				dey
.2f5c	a9 01		lda #$01			lda 	#1
.2f5e	20 e3 3d	jsr $3de3			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2f61	c8		iny				iny
.2f62	20 9d 36	jsr $369d			jsr 	EvaluateRootInteger			; get the conditional
.2f65	20 45 3d	jsr $3d45			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2f68	f0 01		beq $2f6b			beq 	_CWFail
.2f6a	60		rts				rts
.2f6b					_CWFail:
.2f6b	a9 04		lda #$04			lda 	#4
.2f6d	20 d9 3d	jsr $3dd9			jsr 	RSFree 						; close the just opened position.
.2f70	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2f72	aa		tax				tax
.2f73	20 d8 2e	jsr $2ed8			jsr 	ScanForward
.2f76	60		rts				rts
.2f77					Command_Wend:
.2f77	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2f79	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2f7b	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2f7d	f0 05		beq $2f84			beq 	_isok
.2f7f	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2f81	20 09 15	jsr $1509		jsr	errorHandler
.2f84					_isok:
.2f84	a9 01		lda #$01			lda 	#1
.2f86	20 f6 3d	jsr $3df6			jsr 	RSLoadPosition				; go back until true
.2f89	a9 04		lda #$04			lda 	#4
.2f8b	20 d9 3d	jsr $3dd9			jsr 	RSFree 						; close the loop
.2f8e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2f8f					CommandClear:
.2f8f					XCommandClear:
.2f8f	5a		phy				phy
.2f90	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2f93	85 33		sta $33				sta 	highMemory
.2f95	ad cd 0a	lda $0acd			lda 	endMemory+1
.2f98	85 34		sta $34				sta 	highMemory+1
.2f9a	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2f9d	85 2a		sta $2a				sta 	temp0
.2f9f	ad c9 0a	lda $0ac9			lda 	basePage+1
.2fa2	85 2b		sta $2b				sta 	temp0+1
.2fa4					_CCFindEnd:
.2fa4	a0 00		ldy #$00			ldy 	#0
.2fa6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fa8	f0 0c		beq $2fb6			beq 	_CCFoundEnd 				; offset zero is end.
.2faa	18		clc				clc
.2fab	65 2a		adc $2a				adc 	temp0 						; move to next line
.2fad	85 2a		sta $2a				sta 	temp0
.2faf	90 f3		bcc $2fa4			bcc 	_CCFindEnd
.2fb1	e6 2b		inc $2b				inc 	temp0+1
.2fb3	4c a4 2f	jmp $2fa4			jmp 	_CCFindEnd
.2fb6					_CCFoundEnd:
.2fb6	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2fb8	85 35		sta $35				sta 	lowMemory
.2fba	a5 2b		lda $2b				lda 	temp0+1
.2fbc	85 36		sta $36				sta 	lowMemory+1
.2fbe	18		clc				clc 								; put temp0+1 in endProgram
.2fbf	a5 2a		lda $2a				lda 	temp0
.2fc1	69 01		adc #$01			adc 	#1
.2fc3	8d ca 0a	sta $0aca			sta 	endProgram
.2fc6	a5 2b		lda $2b				lda 	temp0+1
.2fc8	69 00		adc #$00			adc 	#0
.2fca	8d cb 0a	sta $0acb			sta 	endProgram+1
.2fcd	18		clc				clc 								; put a bit of space in.
.2fce	a5 35		lda $35				lda 	lowMemory
.2fd0	69 04		adc #$04			adc 	#4
.2fd2	85 35		sta $35				sta 	lowMemory
.2fd4	90 02		bcc $2fd8			bcc 	_CCNoCarry
.2fd6	e6 36		inc $36				inc 	lowMemory+1
.2fd8					_CCNoCarry:
.2fd8	20 a9 3d	jsr $3da9			jsr 	RSReset 					; reset the return stack.
.2fdb	a2 06		ldx #$06		ldx	#6
.2fdd	20 fc 4c	jsr $4cfc		jsr	variableHandler
.2fe0	20 42 2e	jsr $2e42			jsr 	ScanProc 					; scan for procedures
.2fe3	20 e9 27	jsr $27e9			jsr 	CommandRestore 				; do a restore
.2fe6	7a		ply				ply
.2fe7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d5e					structIndent:
>0d5e							.fill 	1
.2fe8					CommandList:
.2fe8	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2fea	8e 5e 0d	stx $0d5e			stx 	structIndent
.2fed	20 1e 3d	jsr $3d1e			jsr 	MInt32False
.2ff0	e8		inx				inx
.2ff1	20 1a 3d	jsr $3d1a			jsr 	MInt32True
.2ff4	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2ff6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2ff8	f0 15		beq $300f			beq 	_CLEndLine
.2ffa	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2ffc	30 1b		bmi $3019			bmi 	_CLDoListing 				; do the whole lot.
.2ffe	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.3000	20 9f 36	jsr $369f			jsr 	EvaluateInteger
.3003	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.3005	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3007	f0 06		beq $300f			beq 	_CLEndLine
.3009	20 5e 3c	jsr $3c5e			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.300c	4c 19 30	jmp $3019			jmp 	_CLDoListing 				; own e.g. list 1100
.300f					_CLEndLine:
.300f	c8		iny				iny 								; skip comma
.3010	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.3012	30 05		bmi $3019			bmi 	_CLDoListing
.3014	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.3016	20 9f 36	jsr $369f			jsr 	EvaluateInteger				; get end
.3019					_CLDoListing:
.3019	20 c1 31	jsr $31c1			jsr 	ResetCodeAddress 			; back to the start.
.301c					_CLCheckLoop:
.301c	a2 02		ldx #$02		ldx	#2
.301e	20 e7 14	jsr $14e7		jsr	deviceHandler
.3021	a0 00		ldy #$00			ldy 	#0							; check end.
.3023	b1 28		lda ($28),y			lda 	(codePtr),y
.3025	f0 41		beq $3068			beq 	_CLEnd
.3027	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3029	20 6b 30	jsr $306b			jsr 	CLCompareLineTOS
.302c	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.302e	f0 28		beq $3058			beq 	_CLNext
.3030	e8		inx				inx
.3031	20 6b 30	jsr $306b			jsr 	CLCompareLineTOS 			; compare vs higher
.3034	c9 01		cmp #$01			cmp 	#1
.3036	f0 20		beq $3058			beq 	_CLNext
.3038	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.303a	20 8d 30	jsr $308d			jsr 	CLStructureCheck
.303d	ad 5e 0d	lda $0d5e			lda 	structIndent 				; indent level.
.3040	10 02		bpl $3044			bpl 	_CLPositive
.3042	a9 00		lda #$00			lda 	#0
.3044					_CLPositive:
.3044	a2 04		ldx #$04		ldx	#4
.3046	20 3d 49	jsr $493d		jsr	tokeniserHandler
.3049	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.304b	20 8d 30	jsr $308d			jsr 	CLStructureCheck
.304e	ad 5e 0d	lda $0d5e			lda 	structIndent
.3051	10 05		bpl $3058			bpl 	_CLNext
.3053	a9 00		lda #$00			lda 	#0
.3055	8d 5e 0d	sta $0d5e			sta 	structIndent
.3058					_CLNext:
.3058	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.305a	b1 28		lda ($28),y			lda 	(codePtr),y
.305c	18		clc				clc
.305d	65 28		adc $28				adc 	codePtr
.305f	85 28		sta $28				sta 	codePtr
.3061	90 b9		bcc $301c			bcc 	_CLCheckLoop
.3063	e6 29		inc $29				inc 	codePtr+1
.3065	4c 1c 30	jmp $301c			jmp 	_CLCheckLoop
.3068					_CLEnd:
.3068	4c 05 3e	jmp $3e05			jmp 	WarmStart 					; warm start after list.
.306b					CLCompareLineTOS:
.306b	a0 01		ldy #$01			ldy 	#1
.306d	b1 28		lda ($28),y			lda 	(codePtr),y
.306f	55 98		eor $98,x			eor 	esInt0,x
.3071	85 2a		sta $2a				sta 	temp0
.3073	c8		iny				iny
.3074	b1 28		lda ($28),y			lda 	(codePtr),y
.3076	55 a0		eor $a0,x			eor 	esInt1,x
.3078	05 2a		ora $2a				ora 	temp0
.307a	f0 10		beq $308c			beq 	_CLCLTExit
.307c	88		dey				dey
.307d	b1 28		lda ($28),y			lda 	(codePtr),y
.307f	d5 98		cmp $98,x			cmp 	esInt0,x
.3081	c8		iny				iny
.3082	b1 28		lda ($28),y			lda 	(codePtr),y
.3084	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3086	a9 ff		lda #$ff			lda 	#255
.3088	90 02		bcc $308c			bcc 	_CLCLTExit
.308a	a9 01		lda #$01			lda 	#1
.308c					_CLCLTExit:
.308c	60		rts				rts
.308d					CLStructureCheck:
.308d	85 2a		sta $2a				sta 	temp0
.308f	a0 03		ldy #$03			ldy 	#3
.3091					_CLSCLoop:
.3091	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.3093	c8		iny				iny
.3094	c9 80		cmp #$80			cmp 	#$80
.3096	90 f9		bcc $3091			bcc 	_CLSCLoop 					; $00-$7F just step over.
.3098	f0 28		beq $30c2			beq		_CLSCExit					; EOL return
.309a	c9 86		cmp #$86			cmp 	#$86 						; special handler
.309c	90 1e		bcc $30bc			bcc 	_CLSCSpecial
.309e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.30a0	90 ef		bcc $3091			bcc 	_CLSCLoop
.30a2	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.30a4	b0 eb		bcs $3091			bcs 	_CLSCLoop
.30a6	aa		tax				tax 								; get adjustment
.30a7	bd bb 35	lda $35bb,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.30aa	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.30ac	d0 e3		bne $3091			bne 	_CLSCLoop
.30ae	38		sec				sec
.30af	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.30b1	0a		asl a				asl 	a 							; double indent step
.30b2	18		clc				clc
.30b3	6d 5e 0d	adc $0d5e			adc 	structIndent 				; add to structure indent
.30b6	8d 5e 0d	sta $0d5e			sta 	structIndent
.30b9	4c 91 30	jmp $3091			jmp 	_CLSCLoop
.30bc					_CLSCSpecial:
.30bc	20 1b 2f	jsr $2f1b			jsr 	ScannerSkipSpecial
.30bf	4c 91 30	jmp $3091			jmp 	_CLSCLoop
.30c2					_CLSCExit:
.30c2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.30c3					CommandLoad:
.30c3	20 eb 30	jsr $30eb			jsr 	CLSParameters 					; get parameters for load.
.30c6	08		php				php
.30c7	a2 0e		ldx #$0e		ldx	#14
.30c9	20 e7 14	jsr $14e7		jsr	deviceHandler
.30cc	28		plp				plp
.30cd	b0 08		bcs $30d7			bcs 	_CLExit 						; if CC then load a program, so warm start.
.30cf	20 8f 2f	jsr $2f8f			jsr 	CommandClear
.30d2	a2 04		ldx #$04		ldx	#4
.30d4	20 ab 27	jsr $27ab		jsr	interactionHandler
.30d7					_CLExit
.30d7	60		rts				rts
.30d8					CommandSave:
.30d8	20 eb 30	jsr $30eb			jsr 	CLSParameters					; get parameters for save
.30db	90 08		bcc $30e5			bcc 	_CSNoOverrideAddress
.30dd	20 9c 3d	jsr $3d9c			jsr 	CheckComma 						; should be a comma.
.30e0	a2 02		ldx #$02			ldx 	#2
.30e2	20 9f 36	jsr $369f			jsr 	EvaluateInteger 				; get save end address.
.30e5					_CSNoOverrideAddress:
.30e5	a2 18		ldx #$18		ldx	#24
.30e7	20 e7 14	jsr $14e7		jsr	deviceHandler
.30ea	60		rts				rts
.30eb					CLSParameters:
.30eb	a2 00		ldx #$00			ldx 	#0 								; string at +0
.30ed	20 94 36	jsr $3694			jsr 	EvaluateString
.30f0	e8		inx				inx 									; erase out +1 (start) +2 (end, for save)
.30f1	20 1e 3d	jsr $3d1e			jsr 	MInt32False
.30f4	e8		inx				inx
.30f5	20 1e 3d	jsr $3d1e			jsr 	MInt32False
.30f8	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.30fb	85 99		sta $99				sta 	esInt0+1
.30fd	ad c9 0a	lda $0ac9			lda 	basePage+1
.3100	85 a1		sta $a1				sta 	esInt1+1
.3102	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.3105	85 9a		sta $9a				sta 	esInt0+2
.3107	ad cb 0a	lda $0acb			lda 	endProgram+1
.310a	85 a2		sta $a2				sta 	esInt1+2
.310c	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.310e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3110	d0 08		bne $311a			bne 	_CLSDefault
.3112	c8		iny				iny 									; skip comma
.3113	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.3115	20 9f 36	jsr $369f			jsr 	EvaluateInteger 				; the load or start save address
.3118	38		sec				sec 									; return CS indicating override
.3119	60		rts				rts
.311a					_CLSDefault:
.311a	18		clc				clc
.311b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.311c					Command_New:
.311c					Command_XNew:
.311c	20 c1 31	jsr $31c1			jsr 	ResetCodeAddress 			; point to first line
.311f	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.3121	98		tya				tya
.3122	91 28		sta ($28),y			sta 	(codePtr),y
.3124	20 8f 2f	jsr $2f8f			jsr 	CommandClear 				; clear everything down.
.3127	4c fb 2a	jmp $2afb			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d5f					breakCounter:
>0d5f								.fill 	1
.0d60					breakIncrement:
>0d60								.fill 	1
.312a					Command_Run:
.312a					XCommand_Run:
.312a	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.312c	9a		txs				txs
.312d	20 bb 31	jsr $31bb			jsr 	BreakOn 					; turn break on
.3130	20 8f 2f	jsr $2f8f			jsr 	CommandClear 				; clear everything.
.3133	20 c1 31	jsr $31c1			jsr 	ResetCodeAddress 			; back to the start.
.3136					Command_RunFrom:
.3136	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.3138					CRNextInstruction:
.3138	a9 00		lda #$00			lda 	#0
.313a	85 3a		sta $3a				sta 	softMemAlloc+1
.313c	ad 5f 0d	lda $0d5f			lda 	breakCounter 				; check for break.
.313f	6d 60 0d	adc $0d60			adc 	breakIncrement
.3142	8d 5f 0d	sta $0d5f			sta 	breakCounter
.3145	90 05		bcc $314c			bcc 	_CRNoChecks
.3147	a2 02		ldx #$02		ldx	#2
.3149	20 e7 14	jsr $14e7		jsr	deviceHandler
.314c					_CRNoChecks
.314c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.314e	10 1c		bpl $316c			bpl 	_CRNotToken
.3150	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.3152	b0 0c		bcs $3160			bcs 	_CRExecute
.3154	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.3156	b0 55		bcs $31ad			bcs 	Unimplemented
.3158	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.315a	b0 04		bcs $3160			bcs 	_CRExecute
.315c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.315e	b0 16		bcs $3176			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.3160					_CRExecute:
.3160	c8		iny				iny 								; consume it.
.3161	0a		asl a				asl 	a 							; double it, losing most significant bit.
.3162	aa		tax				tax
.3163	20 69 31	jsr $3169			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.3166	4c 38 31	jmp $3138			jmp 	CRNextInstruction
.3169					_CRRunRoutine:
.3169	7c d3 31	jmp ($31d3,x)			jmp 	(Group0Vectors,x)
.316c					_CRNotToken:
.316c	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.316e	b0 3d		bcs $31ad			bcs 	Unimplemented
.3170					_CRDefaultLet:
.3170	20 30 2a	jsr $2a30			jsr 	CommandLet 					; do the default, LET
.3173	4c 38 31	jmp $3138			jmp 	CRNextInstruction
.3176					_CRCheckIndirect:
.3176	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.3178	f0 0a		beq $3184			beq 	_CRAndCommand
.317a	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.317c	f0 f2		beq $3170			beq 	_CRDefaultLet
.317e	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.3180	f0 ee		beq $3170			beq 	_CRDefaultLet
.3182	d0 29		bne $31ad			bne 	Unimplemented
.3184					_CRAndCommand:
.3184	c8		iny				iny 								; skip over the AND token
.3185	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.3187	20 a1 31	jsr $31a1			jsr 	CommandAssembler 			; do the assembler command
.318a	4c 38 31	jmp $3138			jmp 	CRNextInstruction 			; and loop round.
.318d					CommandShift1:
.318d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.318f	10 1c		bpl $31ad			bpl 	Unimplemented 				; we have an error as this should not happen.
.3191	c8		iny				iny 								; advance over it.
.3192	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.3194	b0 0b		bcs $31a1			bcs 	CommandAssembler
.3196	0a		asl a				asl 	a 							; double into X
.3197	aa		tax				tax
.3198	7c 9d 32	jmp ($329d,x)			jmp 	(Group1Vectors-12,x)
.319b					CommandShift2:
.319b	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.319d	20 56 18	jsr $1856		jsr	extensionHandler
.31a0	60		rts				rts
.31a1					CommandAssembler:
.31a1	a2 02		ldx #$02		ldx	#2
.31a3	20 ac 13	jsr $13ac		jsr	assemblerHandler
.31a6	60		rts				rts
.31a7					CommandAssemblerLabel:
.31a7	a2 04		ldx #$04		ldx	#4
.31a9	20 ac 13	jsr $13ac		jsr	assemblerHandler
.31ac	60		rts				rts
.31ad					Unimplemented:
.31ad	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.31af	20 09 15	jsr $1509		jsr	errorHandler
.31b2					CommandColon:
.31b2	60		rts				rts
.31b3					CommandBreak:
.31b3	20 9d 36	jsr $369d			jsr 	EvaluateRootInteger
.31b6	20 45 3d	jsr $3d45			jsr 	MInt32Zero
.31b9	f0 02		beq $31bd			beq 	BreakOff
.31bb					BreakOn:
.31bb	a2 08		ldx #$08			ldx 	#8
.31bd					BreakOff:
.31bd	8e 60 0d	stx $0d60			stx 	breakIncrement
.31c0	60		rts				rts
.31c1					ResetCodeAddress:
.31c1	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.31c4	85 28		sta $28				sta 	codePtr
.31c6	ad c9 0a	lda $0ac9			lda 	basePage+1
.31c9	85 29		sta $29				sta 	codePtr+1
.31cb	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.31cd	60		rts				rts
.31ce					TKErr01:
.31ce					TKErr02:
.31ce					TKErr03:
.31ce					TKErr04:
.31ce					TKErr05:
.31ce					TKErr06:
.31ce					TKErr07:
.31ce					TKErr08:
.31ce					TKErr09:
.31ce					TKErr10:
.31ce					TKErr11:
.31ce					TKErr12:
.31ce					TKErr13:
.31ce					TKErr14:
.31ce					TKErr15:
.31ce					TKErr16:
.31ce	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.31d0	20 09 15	jsr $1509		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.31d3					Group0Vectors:
>31d3	01 2b					.word	AdvanceNextLine          ; $80 [[eol]]
>31d5	8d 31					.word	CommandShift1            ; $81 [[sh1]]
>31d7	9b 31					.word	CommandShift2            ; $82 [[sh2]]
>31d9	ce 31					.word	TKErr09                  ; $83 [[sh3]]
>31db	ce 31					.word	TKErr10                  ; $84 [[fpc]]
>31dd	ce 31					.word	TKErr08                  ; $85 [[str]]
>31df	86 33					.word	AndHandler               ; $86 and
>31e1	73 33					.word	OrHandler                ; $87 or
>31e3	60 33					.word	XorHandler               ; $88 xor
>31e5	a8 34					.word	CompareGreaterEq         ; $89 >=
>31e7	b2 34					.word	CompareLessEq            ; $8a <=
>31e9	94 34					.word	CompareGreater           ; $8b >
>31eb	8a 34					.word	CompareLess              ; $8c <
>31ed	80 34					.word	CompareEquals            ; $8d =
>31ef	9e 34					.word	CompareNotEquals         ; $8e <>
>31f1	f1 32					.word	AddHandler               ; $8f +
>31f3	14 33					.word	SubHandler               ; $90 -
>31f5	ac 33					.word	ShrHandler               ; $91 >>
>31f7	99 33					.word	ShlHandler               ; $92 <<
>31f9	27 33					.word	MulHandler               ; $93 *
>31fb	3a 33					.word	DivHandler               ; $94 /
>31fd	4d 33					.word	ModHandler               ; $95 mod
>31ff	e5 33					.word	PowerHandler             ; $96 ^
>3201	bf 33					.word	WordRefHandler           ; $97 !
>3203	d2 33					.word	ByteRefHandler           ; $98 ?
>3205	aa 2e					.word	Command_Repeat           ; $99 repeat
>3207	54 2f					.word	Command_While            ; $9a while
>3209	15 2b					.word	Command_FOR              ; $9b for
>320b	1b 2c					.word	CommandIf                ; $9c if
>320d	ce 31					.word	TKErr04                  ; $9d defproc
>320f	b7 2e					.word	Command_Until            ; $9e until
>3211	77 2f					.word	Command_Wend             ; $9f wend
>3213	72 2b					.word	Command_NEXT             ; $a0 next
>3215	ce 31					.word	TKErr06                  ; $a1 then
>3217	56 2c					.word	Command_ENDIF            ; $a2 endif
>3219	bd 2d					.word	ReturnProc               ; $a3 endproc
>321b	0a 36					.word	UnaryParenthesis         ; $a4 (
>321d	e4 37					.word	UnaryLen                 ; $a5 len(
>321f	28 38					.word	UnarySgn                 ; $a6 sgn(
>3221	11 38					.word	UnaryAbs                 ; $a7 abs(
>3223	81 38					.word	Unary_Random             ; $a8 random(
>3225	cb 38					.word	Unary_Page               ; $a9 page
>3227	1a 3d					.word	MInt32True               ; $aa true
>3229	1e 3d					.word	MInt32False              ; $ab false
>322b	96 38					.word	Unary_Min                ; $ac min(
>322d	9a 38					.word	Unary_Max                ; $ad max(
>322f	a1 39					.word	UnarySys                 ; $ae sys(
>3231	4c 39					.word	UnaryTimer               ; $af timer(
>3233	66 37					.word	EventFunction            ; $b0 event(
>3235	73 39					.word	UnaryGet                 ; $b1 get(
>3237	63 39					.word	UnaryInkey               ; $b2 inkey(
>3239	1c 39					.word	UnaryAlloc               ; $b3 alloc(
>323b	d6 39					.word	ExecChr                  ; $b4 chr$(
>323d	02 3a					.word	ExecLeft                 ; $b5 left$(
>323f	1f 3a					.word	ExecMid                  ; $b6 mid$(
>3241	47 3a					.word	ExecRight                ; $b7 right$(
>3243	eb 36					.word	Event_Str                ; $b8 str$(
>3245	1a 37					.word	UnaryVal                 ; $b9 val(
>3247	3f 38					.word	UnaryPeek                ; $ba peek(
>3249	45 38					.word	UnaryDeek                ; $bb deek(
>324b	4b 38					.word	UnaryLeek                ; $bc leek(
>324d	02 38					.word	UnaryAsc                 ; $bd asc(
>324f	f6 38					.word	UnaryIntToFloat          ; $be int(
>3251	09 39					.word	UnaryFloatToInt          ; $bf float(
>3253	1d 37					.word	UnaryIsVal               ; $c0 isval(
>3255	eb 39					.word	ExecUpper                ; $c1 upper$(
>3257	e8 39					.word	ExecLower                ; $c2 lower$(
>3259	d9 38					.word	UnaryReference           ; $c3 @
>325b	ef 38					.word	UnaryComplement          ; $c4 ~
>325d	ec 38					.word	UnaryHexMarker           ; $c5 &
>325f	8c 39					.word	UnaryGetString           ; $c6 get$(
>3261	92 39					.word	UnaryInkeyString         ; $c7 inkey$(
>3263	c5 39					.word	UnaryMem                 ; $c8 mem
>3265	ce 31					.word	TKErr01                  ; $c9 )
>3267	b2 31					.word	CommandColon             ; $ca :
>3269	ce 31					.word	TKErr02                  ; $cb ,
>326b	ce 31					.word	TKErr03                  ; $cc ;
>326d	e9 2a					.word	Command_Rem2             ; $cd '
>326f	ce 31					.word	TKErr07                  ; $ce to
>3271	ce 31					.word	TKErr05                  ; $cf step
>3273	50 2d					.word	CallProc                 ; $d0 proc
>3275	57 2c					.word	CommandLocal             ; $d1 local
>3277	22 2a					.word	Command_Dim              ; $d2 dim
>3279	e9 2a					.word	Command_Rem              ; $d3 rem
>327b	30 2a					.word	CommandLet               ; $d4 let
>327d	76 28					.word	Command_Input            ; $d5 input
>327f	50 2c					.word	Command_ELSE             ; $d6 else
>3281	f3 29					.word	Command_VDU              ; $d7 vdu
>3283	2a 29					.word	Command_Print            ; $d8 print
>3285	e0 27					.word	CommandData              ; $d9 data
>3287	ce 31					.word	TKErr13                  ; $da image
>3289	ce 31					.word	TKErr12                  ; $db at
>328b	ce 31					.word	TKErr14                  ; $dc flip
>328d	14 2a					.word	Command_Assert           ; $dd assert
>328f	ac 2a					.word	Command_Poke             ; $de poke
>3291	b0 2a					.word	Command_Doke             ; $df doke
>3293	b4 2a					.word	Command_Loke             ; $e0 loke
>3295	c5 29					.word	Command_Ink              ; $e1 ink
>3297	d0 29					.word	Command_Paper            ; $e2 paper
>3299	bf 29					.word	Command_CLS              ; $e3 cls
>329b	db 29					.word	Command_Locate           ; $e4 locate
>329d	a7 31					.word	CommandAssemblerLabel    ; $e5 .
>329f	ce 31					.word	TKErr15                  ; $e6 from
>32a1	ce 31					.word	TKErr11                  ; $e7 #
>32a3	8f 2f					.word	CommandClear             ; $e8 clear
>32a5	ce 31					.word	TKErr16                  ; $e9 text
>32a7	ad 31					.word	Unimplemented            ; $ea type

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.32a9					Group1Vectors:
>32a9	c3 30					.word	CommandLoad              ; $86 load
>32ab	d8 30					.word	CommandSave              ; $87 save
>32ad	e8 2f					.word	CommandList              ; $88 list
>32af	1c 31					.word	Command_New              ; $89 new
>32b1	b3 31					.word	CommandBreak             ; $8a break
>32b3	2a 31					.word	Command_Run              ; $8b run
>32b5	b5 27					.word	CommandRead              ; $8c read
>32b7	e9 27					.word	CommandRestore           ; $8d restore
>32b9	fb 2a					.word	CommandEnd               ; $8e end
>32bb	f6 2a					.word	CommandStop              ; $8f stop
>32bd	fe 2a					.word	CommandXemu              ; $90 xemu
>32bf	44 28					.word	CommandGOTO              ; $91 goto
>32c1	19 28					.word	CommandGOSUB             ; $92 gosub
>32c3	2c 28					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.32c5					BinaryProcess:
.32c5	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.32c7	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.32c9	0a		asl a				asl 	a
.32ca	30 0e		bmi $32da			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.32cc	18		clc				clc 								; return CC for integer
.32cd	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.32cf	f0 08		beq $32d9			beq 	_BPExit 					; if both integer then return with CC.
.32d1	20 df 32	jsr $32df			jsr 	BPMakeBothFloat 			; make both float
.32d4	a9 01		lda #$01			lda 	#$01 						; set result type to float
.32d6	95 90		sta $90,x			sta 	esType,x
.32d8	38		sec				sec 								; and return with carry set.
.32d9					_BPExit:
.32d9	60		rts				rts
.32da					_BPStringType:
.32da	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.32dc	20 09 15	jsr $1509		jsr	errorHandler
.32df					BPMakeBothFloat:
.32df	e8		inx				inx
.32e0	20 e4 32	jsr $32e4			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.32e3	ca		dex				dex
.32e4					BPMakeFloat:
.32e4	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.32e6	4a		lsr a				lsr 	a
.32e7	b0 07		bcs $32f0			bcs 	_BPIsFloat 					; already a float if set.
.32e9	8a		txa				txa
.32ea	a2 1c		ldx #$1c		ldx	#28
.32ec	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.32ef	aa		tax				tax
.32f0					_BPIsFloat:
.32f0	60		rts				rts
.32f1					AddHandler:
.32f1	20 c2 34	jsr $34c2			jsr 	DereferenceTwo 				; dereference top two on stack.
.32f4	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.32f6	35 91		and $91,x			and 	esType+1,x
.32f8	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.32fa	d0 10		bne $330c			bne 	_AHStringConcat				; concatenate strings.
.32fc	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.32ff	b0 03		bcs $3304			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3301	4c 04 3c	jmp $3c04			jmp 	MInt32Add 							; else do it as integer.
.3304					_IsFPOperation:
.3304	8a		txa				txa 								; call the relevant fp routine
.3305	a2 04		ldx #$04		ldx	#4
.3307	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.330a	aa		tax				tax
.330b	60		rts				rts
.330c					_AHStringConcat:
.330c	8a		txa				txa 								; handled by the string module.
.330d	a2 06		ldx #$06		ldx	#6
.330f	20 b5 40	jsr $40b5		jsr	stringHandler
.3312	aa		tax				tax
.3313	60		rts				rts
.3314					SubHandler:
.3314	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.3317	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.331a	b0 03		bcs $331f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.331c	4c 1e 3c	jmp $3c1e			jmp 	MInt32Sub 							; else do it as integer.
.331f					_IsFPOperation:
.331f	8a		txa				txa 								; call the relevant fp routine
.3320	a2 12		ldx #$12		ldx	#18
.3322	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3325	aa		tax				tax
.3326	60		rts				rts
.3327					MulHandler:
.3327	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.332a	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.332d	b0 03		bcs $3332			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.332f	4c 38 3c	jmp $3c38			jmp 	MInt32Multiply 							; else do it as integer.
.3332					_IsFPOperation:
.3332	8a		txa				txa 								; call the relevant fp routine
.3333	a2 0c		ldx #$0c		ldx	#12
.3335	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3338	aa		tax				tax
.3339	60		rts				rts
.333a					DivHandler:
.333a	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.333d	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.3340	b0 03		bcs $3345			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3342	4c f8 3a	jmp $3af8			jmp 	MInt32SDivide 							; else do it as integer.
.3345					_IsFPOperation:
.3345	8a		txa				txa 								; call the relevant fp routine
.3346	a2 08		ldx #$08		ldx	#8
.3348	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.334b	aa		tax				tax
.334c	60		rts				rts
.334d					ModHandler:
.334d	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.3350	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.3353	b0 03		bcs $3358			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3355	4c 76 3b	jmp $3b76			jmp 	MInt32Modulus 							; else do it as integer.
.3358					_IsFPOperation:
.3358	8a		txa				txa 								; call the relevant fp routine
.3359	a2 0a		ldx #$0a		ldx	#10
.335b	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.335e	aa		tax				tax
.335f	60		rts				rts
.3360					XorHandler:
.3360	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.3363	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.3366	b0 03		bcs $336b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3368	4c aa 3a	jmp $3aaa			jmp 	MInt32Xor 							; else do it as integer.
.336b					_IsFPOperation:
.336b	8a		txa				txa 								; call the relevant fp routine
.336c	a2 0a		ldx #$0a		ldx	#10
.336e	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3371	aa		tax				tax
.3372	60		rts				rts
.3373					OrHandler:
.3373	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.3376	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.3379	b0 03		bcs $337e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.337b	4c 91 3a	jmp $3a91			jmp 	MInt32Or 							; else do it as integer.
.337e					_IsFPOperation:
.337e	8a		txa				txa 								; call the relevant fp routine
.337f	a2 0a		ldx #$0a		ldx	#10
.3381	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3384	aa		tax				tax
.3385	60		rts				rts
.3386					AndHandler:
.3386	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.3389	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.338c	b0 03		bcs $3391			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.338e	4c 78 3a	jmp $3a78			jmp 	MInt32And 							; else do it as integer.
.3391					_IsFPOperation:
.3391	8a		txa				txa 								; call the relevant fp routine
.3392	a2 0a		ldx #$0a		ldx	#10
.3394	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3397	aa		tax				tax
.3398	60		rts				rts
.3399					ShlHandler:
.3399	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.339c	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.339f	b0 03		bcs $33a4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33a1	4c 1a 34	jmp $341a			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.33a4					_IsFPOperation:
.33a4	8a		txa				txa 								; call the relevant fp routine
.33a5	a2 0a		ldx #$0a		ldx	#10
.33a7	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.33aa	aa		tax				tax
.33ab	60		rts				rts
.33ac					ShrHandler:
.33ac	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.33af	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.33b2	b0 03		bcs $33b7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33b4	4c 1d 34	jmp $341d			jmp 	MInt32ShiftRightX 							; else do it as integer.
.33b7					_IsFPOperation:
.33b7	8a		txa				txa 								; call the relevant fp routine
.33b8	a2 0a		ldx #$0a		ldx	#10
.33ba	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.33bd	aa		tax				tax
.33be	60		rts				rts
.33bf					WordRefHandler:
.33bf	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.33c2	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.33c5	b0 03		bcs $33ca			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33c7	4c 0c 34	jmp $340c			jmp 	MInt32WordIndirect 							; else do it as integer.
.33ca					_IsFPOperation:
.33ca	8a		txa				txa 								; call the relevant fp routine
.33cb	a2 0a		ldx #$0a		ldx	#10
.33cd	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.33d0	aa		tax				tax
.33d1	60		rts				rts
.33d2					ByteRefHandler:
.33d2	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.33d5	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.33d8	b0 03		bcs $33dd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33da	4c 10 34	jmp $3410			jmp 	MInt32ByteIndirect 							; else do it as integer.
.33dd					_IsFPOperation:
.33dd	8a		txa				txa 								; call the relevant fp routine
.33de	a2 0a		ldx #$0a		ldx	#10
.33e0	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.33e3	aa		tax				tax
.33e4	60		rts				rts
.33e5					PowerHandler:
.33e5	20 c2 34	jsr $34c2			jsr 	DereferenceTwo
.33e8	20 c5 32	jsr $32c5			jsr 	BinaryProcess 				; check to see if either is float
.33eb	b0 03		bcs $33f0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33ed	4c f8 33	jmp $33f8			jmp 	PowerInteger 							; else do it as integer.
.33f0					_IsFPOperation:
.33f0	8a		txa				txa 								; call the relevant fp routine
.33f1	a2 18		ldx #$18		ldx	#24
.33f3	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.33f6	aa		tax				tax
.33f7	60		rts				rts
.33f8					PowerInteger:
.33f8	20 df 32	jsr $32df			jsr 	BPMakeBothFloat				; make them float.
.33fb	8a		txa				txa
.33fc	a2 18		ldx #$18		ldx	#24
.33fe	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3401	a2 14		ldx #$14		ldx	#20
.3403	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3406	aa		tax				tax
.3407	a9 00		lda #$00			lda 	#0 							; make type integer
.3409	95 90		sta $90,x			sta 	esType,x
.340b	60		rts				rts
.340c					Mint32WordIndirect:
.340c	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.340e	d0 02		bne $3412			bne 	Min32Indirect
.3410					Mint32ByteIndirect:
.3410	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.3412					Min32Indirect:
.3412	48		pha				pha 								; save the indirection
.3413	20 04 3c	jsr $3c04			jsr 	MInt32Add 					; add a!b a?b
.3416	68		pla				pla 								; and set the type to reference.
.3417	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.3419	60		rts				rts
.341a					Mint32ShiftLeftX:
.341a	18		clc				clc 								; CC shift left
.341b	90 01		bcc $341e			bcc 	Mint32Shift
.341d					Mint32ShiftRightX:
.341d	38		sec				sec 								; CS shift right
.341e					Mint32Shift:
.341e	08		php				php 								; save carry flag on stack.
.341f	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3421	15 a9		ora $a9,x			ora 	esInt2+1,x
.3423	15 b1		ora $b1,x			ora 	esInt3+1,x
.3425	d0 1e		bne $3445			bne 	_MShiftZero
.3427	b5 99		lda $99,x			lda 	esInt0+1,x
.3429	c9 20		cmp #$20			cmp 	#32
.342b	b0 18		bcs $3445			bcs 	_MShiftZero
.342d					_MShiftLoop:
.342d	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.342f	f0 12		beq $3443			beq 	_MShiftExit
.3431	d6 99		dec $99,x			dec 	esInt0+1,x
.3433	28		plp				plp 								; restore and save carry
.3434	08		php				php
.3435	90 06		bcc $343d			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3437	20 3c 3d	jsr $3d3c			jsr 	Mint32ShiftRight
.343a	4c 2d 34	jmp $342d			jmp 	_MShiftLoop
.343d					_MShiftLeft:
.343d	20 33 3d	jsr $3d33			jsr 	Mint32ShiftLeft
.3440	4c 2d 34	jmp $342d			jmp 	_MShiftLoop
.3443					_MShiftExit:
.3443	28		plp				plp	 								; throw saved carry and exit
.3444	60		rts				rts
.3445					_MShiftZero:
.3445	4c 1e 3d	jmp $3d1e			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.3448					PerformComparison:
.3448	20 c2 34	jsr $34c2			jsr 	DereferenceTwo 				; make both values.
.344b	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.344d	35 91		and $91,x			and 	esType+1,x
.344f	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3450	30 1d		bmi $346f			bmi 	_PCIsString
.3452	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.3454	15 91		ora $91,x			ora 	esType+1,x
.3456	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3457	30 22		bmi $347b			bmi 	_PCError
.3459	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.345b	f0 0f		beq $346c			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.345d	20 df 32	jsr $32df			jsr 	BPMakeBothFloat 			; make both float
.3460	8a		txa				txa
.3461	a2 06		ldx #$06		ldx	#6
.3463	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3466	86 32		stx $32				stx 	tempShort 					; save result
.3468	aa		tax				tax
.3469	a5 32		lda $32				lda 	tempShort
.346b	60		rts				rts
.346c					_PCIsInteger:
.346c	4c c3 3a	jmp $3ac3			jmp 	MInt32Compare
.346f					_PCIsString:
.346f	8a		txa				txa 								; A has SP
.3470	a2 0a		ldx #$0a		ldx	#10
.3472	20 b5 40	jsr $40b5		jsr	stringHandler
.3475	86 32		stx $32				stx 	tempShort 					; save result
.3477	aa		tax				tax 								; put SP back in X and get result.
.3478	a5 32		lda $32				lda 	tempShort
.347a	60		rts				rts
.347b					_PCError:
.347b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.347d	20 09 15	jsr $1509		jsr	errorHandler
.3480					CompareEquals:
.3480	20 48 34	jsr $3448			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3483	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3485	f0 35		beq $34bc			beq  	CompareTrue
.3487	4c bf 34	jmp $34bf			jmp 	CompareFalse
.348a					CompareLess:
.348a	20 48 34	jsr $3448			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.348d	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.348f	f0 2b		beq $34bc			beq  	CompareTrue
.3491	4c bf 34	jmp $34bf			jmp 	CompareFalse
.3494					CompareGreater:
.3494	20 48 34	jsr $3448			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3497	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3499	f0 21		beq $34bc			beq  	CompareTrue
.349b	4c bf 34	jmp $34bf			jmp 	CompareFalse
.349e					CompareNotEquals:
.349e	20 48 34	jsr $3448			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34a1	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.34a3	d0 17		bne $34bc			bne  	CompareTrue
.34a5	4c bf 34	jmp $34bf			jmp 	CompareFalse
.34a8					CompareGreaterEq:
.34a8	20 48 34	jsr $3448			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34ab	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.34ad	d0 0d		bne $34bc			bne  	CompareTrue
.34af	4c bf 34	jmp $34bf			jmp 	CompareFalse
.34b2					CompareLessEq:
.34b2	20 48 34	jsr $3448			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34b5	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.34b7	d0 03		bne $34bc			bne  	CompareTrue
.34b9	4c bf 34	jmp $34bf			jmp 	CompareFalse
.34bc					CompareTrue:
.34bc	4c 1a 3d	jmp $3d1a			jmp 	MInt32True
.34bf					CompareFalse:
.34bf	4c 1e 3d	jmp $3d1e			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.34c2					DereferenceTwo:
.34c2	e8		inx				inx
.34c3	20 c7 34	jsr $34c7			jsr 	DereferenceOne
.34c6	ca		dex				dex
.34c7					DereferenceOne:
.34c7	b5 90		lda $90,x			lda 	esType,x
.34c9	10 3b		bpl $3506			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.34cb	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.34cc	b0 39		bcs $3507			bcs 	_DRFloatDeReference
.34ce	5a		phy				phy
.34cf	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.34d1	85 2a		sta $2a				sta 	temp0
.34d3	b5 a0		lda $a0,x			lda 	esInt1,x
.34d5	85 2b		sta $2b				sta 	temp0+1
.34d7	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.34d9	95 a0		sta $a0,x			sta 	esInt1,x
.34db	95 a8		sta $a8,x			sta 	esInt2,x
.34dd	95 b0		sta $b0,x			sta 	esInt3,x
.34df	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.34e1	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.34e3	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.34e4	30 0d		bmi $34f3			bmi 	_DeRefString 				; string, 2 bytes only
.34e6	d0 11		bne $34f9			bne 	_DeRefByte 					; byte 1 byte only
.34e8					_DeRefLong:
.34e8	a0 03		ldy #$03			ldy 	#3
.34ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.34ec	95 b0		sta $b0,x			sta 	esInt3,x
.34ee	88		dey				dey
.34ef	b1 2a		lda ($2a),y			lda 	(temp0),y
.34f1	95 a8		sta $a8,x			sta 	esInt2,x
.34f3					_DeRefString:
.34f3	a0 01		ldy #$01			ldy 	#1
.34f5	b1 2a		lda ($2a),y			lda 	(temp0),y
.34f7	95 a0		sta $a0,x			sta 	esInt1,x
.34f9					_DeRefByte:
.34f9	a0 00		ldy #$00			ldy 	#0
.34fb	b1 2a		lda ($2a),y			lda 	(temp0),y
.34fd	95 98		sta $98,x			sta 	esInt0,x
.34ff	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.3501	29 40		and #$40			and 	#$40
.3503	95 90		sta $90,x			sta 	esType,x
.3505	7a		ply				ply
.3506					_DRNotReference
.3506	60		rts				rts
.3507					_DRFloatDereference:
.3507	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0 					; address to deref in temp0
.350a	8a		txa				txa
.350b	a2 1e		ldx #$1e		ldx	#30
.350d	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3510	aa		tax				tax
.3511	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.3513	95 90		sta $90,x			sta 	esType,x
.3515	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.3516					EvaluateLevel:
.3516	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.3518	b0 1e		bcs $3538			bcs 	_ELStack
.351a	48		pha				pha 								; save precedence level.
.351b	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.351d	95 98		sta $98,x			sta 	esInt0,x
.351f	95 a0		sta $a0,x			sta 	esInt1,x
.3521	95 a8		sta $a8,x			sta 	esInt2,x
.3523	95 b0		sta $b0,x			sta 	esInt3,x
.3525	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.3527	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.3529	30 26		bmi $3551			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.352b	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.352c	30 0f		bmi $353d			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.352e	8a		txa				txa 								; stack level in X
.352f	a2 02		ldx #$02		ldx	#2
.3531	20 fc 4c	jsr $4cfc		jsr	variableHandler
.3534	aa		tax				tax
.3535	4c 7a 35	jmp $357a			jmp		_ELHasTerm
.3538					_ELStack:
.3538	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.353a	20 09 15	jsr $1509		jsr	errorHandler
.353d					_ELIsConstant:
.353d	4a		lsr a				lsr 	a 							; get the value back
.353e	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3540	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.3542					_ELCheckNext:
.3542	c8		iny				iny 								; look at next
.3543	b1 28		lda ($28),y			lda 	(codePtr),y
.3545	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.3547	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.3549	b0 2f		bcs $357a			bcs 	_ELHasTerm 					; done getting the constant.
.354b	20 13 36	jsr $3613			jsr 	ELShiftByteIn 				; shift byte into position.
.354e	4c 42 35	jmp $3542			jmp 	_ELCheckNext
.3551					_ELIsToken:
.3551	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3553	f0 0f		beq $3564			beq 	_ELIsString
.3555	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3557	d0 5f		bne $35b8			bne 	_ELCheckUnary
.3559	8a		txa				txa 								; put X into A
.355a	c8		iny				iny 								; skip over the float marker
.355b	a2 1a		ldx #$1a		ldx	#26
.355d	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3560	aa		tax				tax 								; restore X
.3561	4c 7a 35	jmp $357a			jmp 	_ELHasTerm
.3564					_ELIsString:
.3564	98		tya				tya 								; address of string is codePtr+y+1
.3565	38		sec				sec
.3566	65 28		adc $28				adc 	codePtr
.3568	95 98		sta $98,x			sta 	esInt0,x
.356a	a5 29		lda $29				lda 	codePtr+1
.356c	69 00		adc #$00			adc 	#0
.356e	95 a0		sta $a0,x			sta 	esInt1,x
.3570	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3572	95 90		sta $90,x			sta 	esType,x
.3574	c8		iny				iny 								; skip over string.
.3575	98		tya				tya
.3576	38		sec				sec									; +1 for the length itself.
.3577	71 28		adc ($28),y			adc 	(codePtr),y
.3579	a8		tay				tay 								; and fall through to term loop code.
.357a					_ELHasTerm:
.357a	b1 28		lda ($28),y			lda 	(codePtr),y
.357c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.357e	90 04		bcc $3584			bcc 	_ELPopExit
.3580	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3582	90 02		bcc $3586			bcc 	_ELHasBinaryTerm
.3584					_ELPopExit:
.3584	68		pla				pla
.3585					_ELExit:
.3585	60		rts				rts
.3586					_ELHasBinaryTerm:
.3586	84 32		sty $32				sty 	tempShort 					; save position
.3588	a8		tay				tay 								; use token as an index and get the precedence.
.3589	b9 bb 35	lda $35bb,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.358c	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.358e	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.3590	68		pla				pla 								; restore current level.
.3591	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3593	b0 f0		bcs $3585			bcs 	_ELExit
.3595	48		pha				pha 								; save current level back on the stack.
.3596	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.3598	48		pha				pha
.3599	c8		iny				iny
.359a	e8		inx				inx 								; calculate the RHS at the operator precedence.
.359b	a5 32		lda $32				lda 	tempShort
.359d	20 16 35	jsr $3516			jsr 	EvaluateLevel
.35a0	ca		dex				dex
.35a1	68		pla				pla 								; get the operator back out.
.35a2					_ELExecuteA:
.35a2	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.35a4	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.35a5	aa		tax				tax
.35a6	bd d3 31	lda $31d3,x			lda 	Group0Vectors,x
.35a9	85 2a		sta $2a				sta 	temp0
.35ab	bd d4 31	lda $31d4,x			lda 	Group0Vectors+1,x
.35ae	85 2b		sta $2b				sta 	temp0+1
.35b0	a6 32		ldx $32				ldx 	tempShort
.35b2	20 ff 35	jsr $35ff			jsr 	_ELCallTemp0
.35b5	4c 7a 35	jmp $357a			jmp 	_ELHasTerm 					; and loop back round.
.35b8					_ELCheckUnary:
.35b8	c8		iny				iny 								; skip over token.
.35b9	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.35bb	f0 19		beq $35d6			beq 	_ELMinus
.35bd	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.35bf	f0 2c		beq $35ed			beq 	_ELIndirect
.35c1	c9 98		cmp #$98			cmp 	#TKW_QMARK
.35c3	f0 28		beq $35ed			beq 	_ELIndirect
.35c5	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.35c7	f0 39		beq $3602			beq 	_ELExtension
.35c9	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.35cb	90 04		bcc $35d1			bcc 	_ELUSyntax
.35cd	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.35cf	90 d1		bcc $35a2			bcc 	_ELExecuteA 				; if so do that token.
.35d1					_ELUSyntax:
.35d1	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.35d3	20 09 15	jsr $1509		jsr	errorHandler
.35d6					_ELMinus:
.35d6	20 68 36	jsr $3668			jsr 	EvaluateNumericTerm 		; get a number to negate.
.35d9	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.35db	f0 0a		beq $35e7			beq 	_ELMinusInteger
.35dd	8a		txa				txa
.35de	a2 0e		ldx #$0e		ldx	#14
.35e0	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.35e3	aa		tax				tax
.35e4	4c 7a 35	jmp $357a			jmp 	_ELHasTerm
.35e7					_ELMinusInteger:
.35e7	20 d8 3c	jsr $3cd8			jsr 	MInt32Negate 				; do int negate
.35ea	4c 7a 35	jmp $357a			jmp 	_ELHasTerm
.35ed					_ELIndirect:
.35ed	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.35ee	20 71 36	jsr $3671			jsr 	EvaluateIntegerTerm 		; integer address
.35f1	68		pla				pla
.35f2	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.35f4	f0 02		beq $35f8			beq 	_ELHaveModifier
.35f6	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.35f8					_ELHaveModifier:
.35f8	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.35fa	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.35fc	4c 7a 35	jmp $357a			jmp 	_ELHasTerm
.35ff					_ELCallTemp0:
.35ff	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3602					_ELExtension:
.3602	8a		txa				txa 								; stack pos in A
.3603	20 56 18	jsr $1856		jsr	extensionHandler
.3606	aa		tax				tax 								; restore stack
.3607	4c 7a 35	jmp $357a			jmp 	_ELHasTerm
.360a					UnaryParenthesis:
.360a	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.360c	20 16 35	jsr $3516			jsr 	EvaluateLevel
.360f	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen 			; check for )
.3612	60		rts				rts
.3613					ELShiftByteIn:
.3613	48		pha				pha 								; save bits to shift in.
.3614	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.3616	48		pha				pha
.3617	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.3619	95 b0		sta $b0,x			sta 	esInt3,x
.361b	b5 a0		lda $a0,x			lda 	esInt1,x
.361d	95 a8		sta $a8,x			sta 	esInt2,x
.361f	b5 98		lda $98,x			lda 	esInt0,x
.3621	95 a0		sta $a0,x			sta 	esInt1,x
.3623	a9 00		lda #$00			lda 	#0
.3625	95 98		sta $98,x			sta 	esInt0,x
.3627	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.3628	29 03		and #$03			and 	#3 							; only want lower 2 bits
.362a	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.362c					_ELShiftLoop:
.362c	4a		lsr a				lsr 	a
.362d	76 b0		ror $b0,x			ror 	esInt3,x
.362f	76 a8		ror $a8,x			ror 	esInt2,x
.3631	76 a0		ror $a0,x			ror 	esInt1,x
.3633	76 98		ror $98,x			ror 	esInt0,x
.3635	c9 01		cmp #$01			cmp 	#1
.3637	d0 f3		bne $362c			bne 	_ELShiftLoop
.3639	68		pla				pla 								; get original 6 bit value and OR in.
.363a	29 3f		and #$3f			and 	#$3F
.363c	15 98		ora $98,x			ora 	esInt0,x
.363e	95 98		sta $98,x			sta 	esInt0,x
.3640	60		rts				rts
.3641					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3641	01					.byte	$01			; $86 and
>3642	01					.byte	$01			; $87 or
>3643	01					.byte	$01			; $88 xor
>3644	02					.byte	$02			; $89 >=
>3645	02					.byte	$02			; $8a <=
>3646	02					.byte	$02			; $8b >
>3647	02					.byte	$02			; $8c <
>3648	02					.byte	$02			; $8d =
>3649	02					.byte	$02			; $8e <>
>364a	03					.byte	$03			; $8f +
>364b	03					.byte	$03			; $90 -
>364c	04					.byte	$04			; $91 >>
>364d	04					.byte	$04			; $92 <<
>364e	04					.byte	$04			; $93 *
>364f	04					.byte	$04			; $94 /
>3650	04					.byte	$04			; $95 mod
>3651	05					.byte	$05			; $96 ^
>3652	06					.byte	$06			; $97 !
>3653	06					.byte	$06			; $98 ?
>3654	82					.byte	$82			; $99 repeat
>3655	82					.byte	$82			; $9a while
>3656	82					.byte	$82			; $9b for
>3657	82					.byte	$82			; $9c if
>3658	82					.byte	$82			; $9d defproc
>3659	80					.byte	$80			; $9e until
>365a	80					.byte	$80			; $9f wend
>365b	80					.byte	$80			; $a0 next
>365c	80					.byte	$80			; $a1 then
>365d	80					.byte	$80			; $a2 endif
>365e	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.365f					EvaluateTerm:
.365f	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.3661	20 16 35	jsr $3516			jsr 	EvaluateLevel
.3664	20 c7 34	jsr $34c7			jsr 	DereferenceOne
.3667	60		rts				rts
.3668					EvaluateNumericTerm:
.3668	20 5f 36	jsr $365f			jsr 	EvaluateTerm
.366b	b5 90		lda $90,x			lda 	esType,x
.366d	0a		asl a				asl 	a 							; see if it's a string.
.366e	30 09		bmi $3679			bmi 	ENTType
.3670	60		rts				rts
.3671					EvaluateIntegerTerm:
.3671	20 5f 36	jsr $365f			jsr 	EvaluateTerm
.3674	b5 90		lda $90,x			lda 	esType,x
.3676	d0 01		bne $3679			bne 	ENTType
.3678	60		rts				rts
.3679					ENTType:
.3679	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.367b	20 09 15	jsr $1509		jsr	errorHandler
.367e					EvaluateRoot:
.367e	a2 00		ldx #$00			ldx 	#0
.3680					Evaluate:
.3680	a9 00		lda #$00			lda 	#0
.3682	20 16 35	jsr $3516			jsr 	EvaluateLevel
.3685	20 c7 34	jsr $34c7			jsr 	DereferenceOne
.3688	60		rts				rts
.3689					EvaluateNumeric:
.3689	20 80 36	jsr $3680			jsr 	Evaluate
.368c	b5 90		lda $90,x			lda 	esType,x
.368e	0a		asl a				asl 	a 							; see if it's a string.
.368f	30 e8		bmi $3679			bmi 	ENTType
.3691	4a		lsr a				lsr 	a 							; shift float flag into carry.
.3692	4a		lsr a				lsr 	a
.3693	60		rts				rts
.3694					EvaluateString:
.3694	20 80 36	jsr $3680			jsr 	Evaluate
.3697	b5 90		lda $90,x			lda 	esType,x
.3699	0a		asl a				asl 	a 							; see if it's a string.
.369a	10 dd		bpl $3679			bpl 	ENTType
.369c	60		rts				rts
.369d					EvaluateRootInteger:
.369d	a2 00		ldx #$00			ldx 	#0
.369f					EvaluateInteger:
.369f	20 80 36	jsr $3680			jsr 	Evaluate
.36a2	b5 90		lda $90,x			lda 	esType,x
.36a4	d0 d3		bne $3679			bne 	ENTType
.36a6	60		rts				rts
.36a7					EvaluateSmallInteger:
.36a7	20 9f 36	jsr $369f			jsr 	EvaluateInteger
.36aa	b5 a0		lda $a0,x			lda 	esInt1,x
.36ac	15 a8		ora $a8,x			ora 	esInt2,x
.36ae	15 b0		ora $b0,x			ora 	esInt3,x
.36b0	d0 03		bne $36b5			bne 	_ESIValue
.36b2	b5 98		lda $98,x			lda 	esInt0,x
.36b4	60		rts				rts
.36b5					_ESIValue:
.36b5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.36b7	20 09 15	jsr $1509		jsr	errorHandler
.36ba					LinkEvaluate:
.36ba	aa		tax				tax
.36bb	20 80 36	jsr $3680			jsr 	Evaluate
.36be	8a		txa				txa
.36bf	60		rts				rts
.36c0					LinkEvaluateTerm:
.36c0	aa		tax				tax
.36c1	20 5f 36	jsr $365f			jsr 	EvaluateTerm
.36c4	8a		txa				txa
.36c5	60		rts				rts
.36c6					LinkEvaluateInteger:
.36c6	aa		tax				tax
.36c7	20 9f 36	jsr $369f			jsr 	EvaluateInteger
.36ca	8a		txa				txa
.36cb	60		rts				rts
.36cc					LinkEvaluateString:
.36cc	aa		tax				tax
.36cd	20 94 36	jsr $3694			jsr 	EvaluateString
.36d0	8a		txa				txa
.36d1	60		rts				rts
.36d2					LinkEvaluateSmallInt:
.36d2	aa		tax				tax
.36d3	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger
.36d6	8a		txa				txa
.36d7	60		rts				rts
.36d8					EvaluateReference:
.36d8	ad 52 36	lda $3652			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.36db	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.36dc	e9 01		sbc #$01			sbc 	#1
.36de	20 16 35	jsr $3516			jsr 	EvaluateLevel
.36e1	b5 90		lda $90,x			lda 	esType,x
.36e3	10 01		bpl $36e6			bpl 	_ERFail
.36e5	60		rts				rts
.36e6					_ERFail:
.36e6	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.36e8	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.36eb					Event_Str:
.36eb	20 89 36	jsr $3689			jsr 	EvaluateNumeric 			; get a number.
.36ee	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.36f0	d0 13		bne $3705			bne 	_ESFloat
.36f2	20 45 37	jsr $3745			jsr 	ConvertGetBase 				; get base, or default.
.36f5	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.36f7	85 2a		sta $2a				sta 	temp0
.36f9	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.36fb	85 2b		sta $2b				sta 	1+(temp0)
.36fd	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.36ff	20 76 3c	jsr $3c76			jsr 	MInt32ToString 				; convert to string.
.3702	4c 12 37	jmp $3712			jmp 	_ESCloneExit 				; clone and exit.
.3705					_ESFloat:
.3705	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen 			; check closing )
.3708	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.370b	8a		txa				txa
.370c	a2 16		ldx #$16		ldx	#22
.370e	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3711	aa		tax				tax
.3712					_ESCloneExit:
.3712	8a		txa				txa
.3713	a2 04		ldx #$04		ldx	#4
.3715	20 b5 40	jsr $40b5		jsr	stringHandler
.3718	aa		tax				tax
.3719	60		rts				rts
.371a					UnaryVal:
.371a	38		sec				sec 								; Carry set to return value
.371b	b0 01		bcs $371e			bcs 	ValueMain
.371d					UnaryIsVal:
.371d	18		clc				clc									; Carry clear to return legitimacy
.371e					ValueMain:
.371e	08		php				php 								; save results (CS is value, CC is validation)
.371f	20 94 36	jsr $3694			jsr 	EvaluateString
.3722	20 45 37	jsr $3745			jsr 	ConvertGetBase 				; get base, if any.
.3725	5a		phy				phy
.3726	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3729	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.372b	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.372d	20 91 3b	jsr $3b91			jsr 	MInt32FromString 			; convert it back from a string.
.3730	b0 0b		bcs $373d			bcs 	_VMSuccess 					; successfully converted.
.3732	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.3734	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3736	f0 00		beq $3738			beq 	_VMFailed 	 				; so we failed.
.3738					_VMFailed:
.3738	7a		ply				ply
.3739	28		plp				plp
.373a	4c 1e 3d	jmp $3d1e			jmp 	MInt32False 				; return 0 whatever.
.373d					_VMSuccess:
.373d	7a		ply				ply
.373e	28		plp				plp 								; if CS the it was val() so we want the value.
.373f	b0 03		bcs $3744			bcs 	_VMExit
.3741	4c 1a 3d	jmp $3d1a			jmp 	MInt32True 					; otherwise return true as successful.
.3744					_VMExit:
.3744	60		rts				rts
.3745					ConvertGetBase:
.3745	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3747	95 99		sta $99,x			sta 	esInt0+1,x
.3749	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.374b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.374d	d0 0e		bne $375d			bne 	_CGBDone 					; not found, should be )
.374f	e8		inx				inx 								; next level
.3750	c8		iny				iny 								; skip comma.
.3751	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger		; evaluate the base.
.3754	ca		dex				dex
.3755	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3757	90 08		bcc $3761			bcc 	_CGBValue 					; (it should work as high as 37)
.3759	c9 11		cmp #$11			cmp 	#17
.375b	b0 04		bcs $3761			bcs 	_CGBValue
.375d					_CGBDone:
.375d	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen
.3760	60		rts				rts
.3761					_CGBValue:
.3761	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3763	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.3766					EventFunction:
.3766	20 d8 36	jsr $36d8			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3769	b5 90		lda $90,x			lda 	esType,x
.376b	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.376d	d0 56		bne $37c5			bne 	_EFType
.376f	20 9c 3d	jsr $3d9c			jsr 	CheckComma
.3772	e8		inx				inx
.3773	20 9f 36	jsr $369f			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.3776	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen 			; finish off with the right bracket
.3779	ca		dex				dex
.377a	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.377c	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.377e	15 a8		ora $a8,x			ora 	esInt2,x
.3780	15 b0		ora $b0,x			ora 	esInt3,x
.3782	d0 3c		bne $37c0			bne 	_EFValue
.3784	5a		phy				phy
.3785	da		phx				phx
.3786	a2 1c		ldx #$1c		ldx	#28
.3788	20 e7 14	jsr $14e7		jsr	deviceHandler
.378b	84 2d		sty $2d				sty 	temp1+1
.378d	85 2c		sta $2c				sta 	temp1
.378f	fa		plx				plx
.3790	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.3793	a0 03		ldy #$03			ldy 	#3							; if -ve
.3795	b1 2a		lda ($2a),y			lda 	(temp0),y
.3797	30 22		bmi $37bb			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3799	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.379b	b1 2a		lda ($2a),y			lda 	(temp0),y
.379d	c8		iny				iny
.379e	11 2a		ora ($2a),y			ora 	(temp0),y
.37a0	f0 16		beq $37b8			beq 	_EFInitialise 				; if so, initialise the value but return false.
.37a2	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.37a4	38		sec				sec
.37a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.37a7	e5 2c		sbc $2c				sbc 	temp1
.37a9	c8		iny				iny
.37aa	b1 2a		lda ($2a),y			lda 	(temp0),y
.37ac	e5 2d		sbc $2d				sbc 	temp1+1
.37ae	10 0b		bpl $37bb			bpl 	_EFFail 					; if trigger >= timer then return False
.37b0	20 ca 37	jsr $37ca			jsr 	SetEventTimer 				; reset the timer for next time.
.37b3	20 1a 3d	jsr $3d1a			jsr	 	MInt32True 					; and treutn true as fired.
.37b6	7a		ply				ply
.37b7	60		rts				rts
.37b8					_EFInitialise:
.37b8	20 ca 37	jsr $37ca			jsr		SetEventTimer 				; set trigger time to time + elapsed
.37bb					_EFFail:
.37bb	7a		ply				ply
.37bc	20 1e 3d	jsr $3d1e			jsr 	MInt32False
.37bf	60		rts				rts
.37c0					_EFValue:
.37c0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.37c2	20 09 15	jsr $1509		jsr	errorHandler
.37c5					_EFType:
.37c5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.37c7	20 09 15	jsr $1509		jsr	errorHandler
.37ca					SetEventTimer:
.37ca	a0 00		ldy #$00			ldy 	#0
.37cc	18		clc				clc
.37cd	a5 2c		lda $2c				lda 	temp1
.37cf	75 99		adc $99,x			adc 	esInt0+1,x
.37d1	91 2a		sta ($2a),y			sta		(temp0),y
.37d3	c8		iny				iny
.37d4	a5 2d		lda $2d				lda 	temp1+1
.37d6	75 a1		adc $a1,x			adc 	esInt1+1,x
.37d8	91 2a		sta ($2a),y			sta		(temp0),y
.37da	88		dey				dey
.37db	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.37dd	d0 04		bne $37e3			bne 	_SETExit 					; zero means initialise.....
.37df	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.37e1	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.37e3					_SETExit:
.37e3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.37e4					UnaryLen:
.37e4	20 f2 37	jsr $37f2			jsr 	ULStart
.37e7					ULFinish:
.37e7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.37e9	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.37eb	20 2d 3d	jsr $3d2d			jsr 	MInt32Set8Bit 				; write it out.
.37ee	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen
.37f1	60		rts				rts
.37f2	20 94 36	jsr $3694	ULStart:jsr 	EvaluateString
.37f5	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.37f7	85 2a		sta $2a				sta 	temp0
.37f9	b5 a0		lda $a0,x			lda 	esInt1,x
.37fb	85 2b		sta $2b				sta 	temp0+1
.37fd	84 32		sty $32				sty 	tempShort 					; get length
.37ff	a0 00		ldy #$00			ldy 	#0
.3801	60		rts				rts
.3802					UnaryAsc:
.3802	20 f2 37	jsr $37f2			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3805	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3807	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3808	c9 00		cmp #$00			cmp 	#0
.380a	d0 db		bne $37e7			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.380c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.380e	20 09 15	jsr $1509		jsr	errorHandler
.3811					UnaryAbs:
.3811	20 89 36	jsr $3689			jsr 	EvaluateNumeric 			; some numeric value
.3814	b0 07		bcs $381d			bcs 	_UAFloat 					; CS then float, so use that function
.3816	20 d3 3c	jsr $3cd3			jsr 	MInt32Absolute 				; int version
.3819	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen
.381c	60		rts				rts
.381d					_UAFloat:
.381d	8a		txa				txa 								; float version
.381e	a2 02		ldx #$02		ldx	#2
.3820	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3823	aa		tax				tax
.3824	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen
.3827	60		rts				rts
.3828					UnarySgn:
.3828	20 89 36	jsr $3689			jsr 	EvaluateNumeric 			; same as above but sign of value
.382b	b0 07		bcs $3834			bcs 	_USFloat
.382d	20 0b 3d	jsr $3d0b			jsr 	MInt32Sign
.3830	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen
.3833	60		rts				rts
.3834					_USFloat:
.3834	8a		txa				txa
.3835	a2 10		ldx #$10		ldx	#16
.3837	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.383a	aa		tax				tax
.383b	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen
.383e	60		rts				rts
.383f					UnaryPeek:
.383f	20 6b 38	jsr $386b			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3842	4c 5f 38	jmp $385f			jmp 	PDLByte0
.3845					UnaryDeek:
.3845	20 6b 38	jsr $386b			jsr 	PDLCode
.3848	4c 59 38	jmp $3859			jmp 	PDLByte1
.384b					UnaryLeek:
.384b	20 6b 38	jsr $386b			jsr 	PDLCode
.384e	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3850	b1 2a		lda ($2a),y			lda 	(temp0),y
.3852	95 b0		sta $b0,x			sta 	esInt3,x
.3854	88		dey				dey
.3855	b1 2a		lda ($2a),y			lda 	(temp0),y
.3857	95 a8		sta $a8,x			sta 	esInt2,x
.3859					PDLByte1:
.3859	a0 01		ldy #$01			ldy 	#1
.385b	b1 2a		lda ($2a),y			lda 	(temp0),y
.385d	95 a0		sta $a0,x			sta 	esInt1,x
.385f					PDLByte0:
.385f	a0 00		ldy #$00			ldy 	#0
.3861	b1 2a		lda ($2a),y			lda 	(temp0),y
.3863	95 98		sta $98,x			sta 	esInt0,x
.3865	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3867	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen 			; check right and return
.386a	60		rts				rts
.386b					PDLCode:
.386b	20 9f 36	jsr $369f			jsr 	EvaluateInteger 			; some address
.386e	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3870	85 2a		sta $2a				sta 	temp0
.3872	b5 a0		lda $a0,x			lda 	esInt1,x
.3874	85 2b		sta $2b				sta 	temp0+1
.3876	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3878	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.387a	95 a8		sta $a8,x			sta 	esInt2,x
.387c	95 b0		sta $b0,x			sta 	esInt3,x
.387e	84 32		sty $32				sty 	tempShort 					; save Y
.3880	60		rts				rts
.3881					Unary_Random:
.3881	20 4e 3d	jsr $3d4e			jsr 	MInt32Random 				; generate random number.
.3884	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3886	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3888	f0 08		beq $3892			beq 	_URExit
.388a	e8		inx				inx 								; load range 0..r-1 into +1
.388b	20 9f 36	jsr $369f			jsr 	EvaluateInteger
.388e	ca		dex				dex
.388f	20 76 3b	jsr $3b76			jsr 	MInt32Modulus 				; calculate random % modulus
.3892					_URExit:
.3892	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen 			; check right and return
.3895	60		rts				rts
.3896					Unary_Min:
.3896	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3898	d0 02		bne $389c			bne 	UnaryMBody
.389a					Unary_Max:
.389a	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.389c					UnaryMBody:
.389c	48		pha				pha 								; save comparator on stack, shows min or max
.389d	20 80 36	jsr $3680			jsr 	Evaluate 					; get the first thing to check
.38a0					_UnaryMLoop:
.38a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.38a2	c8		iny				iny
.38a3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.38a5	f0 09		beq $38b0			beq 	_UnaryMExit
.38a7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.38a9	f0 07		beq $38b2			beq 	_UnaryMCompare
.38ab	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.38ad	20 09 15	jsr $1509		jsr	errorHandler
.38b0					_UnaryMExit:
.38b0	68		pla				pla 								; done so throw comparator and return.
.38b1	60		rts				rts
.38b2					_UnaryMCompare:
.38b2	e8		inx				inx 								; get the 2nd thing to evaluate
.38b3	20 80 36	jsr $3680			jsr 	Evaluate
.38b6	ca		dex				dex
.38b7	20 48 34	jsr $3448			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.38ba	85 32		sta $32				sta 	tempShort 					; save result
.38bc	68		pla				pla 								; get what we need
.38bd	48		pha				pha
.38be	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.38c0	d0 de		bne $38a0			bne 	_UnaryMLoop 				; no, try another value.
.38c2	20 1e 3d	jsr $3d1e			jsr 	MInt32False 				; promote 2nd to 1st.
.38c5	20 04 3c	jsr $3c04			jsr 	MInt32Add
.38c8	4c a0 38	jmp $38a0			jmp 	_UnaryMLoop
.38cb					Unary_Page:
.38cb	20 1e 3d	jsr $3d1e			jsr 	MInt32False 				; zero
.38ce	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.38d1	95 98		sta $98,x			sta 	esInt0,x
.38d3	ad c9 0a	lda $0ac9			lda 	basePage+1
.38d6	95 a0		sta $a0,x			sta 	esInt1,x
.38d8	60		rts				rts
.38d9					UnaryReference:
.38d9	a9 0f		lda #$0f			lda 	#15
.38db	20 16 35	jsr $3516			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.38de	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.38e0	10 05		bpl $38e7			bpl 	UType
.38e2	a9 00		lda #$00			lda 	#0 							; make it an integer
.38e4	95 90		sta $90,x			sta 	esType,x
.38e6	60		rts				rts
.38e7					UType:
.38e7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.38e9	20 09 15	jsr $1509		jsr	errorHandler
.38ec					UnaryHexMarker:
.38ec	4c 71 36	jmp $3671			jmp 	EvaluateIntegerTerm
.38ef					UnaryComplement:
.38ef	20 71 36	jsr $3671			jsr 	EvaluateIntegerTerm
.38f2	20 f2 3c	jsr $3cf2			jsr 	MInt32Not
.38f5	60		rts				rts
.38f6					UnaryIntToFloat:
.38f6	20 89 36	jsr $3689			jsr 	EvaluateNumeric				; some number
.38f9	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.38fb	d0 0b		bne $3908			bne 	_UIFExit
.38fd	8a		txa				txa 								; convert and set type
.38fe	a2 1c		ldx #$1c		ldx	#28
.3900	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3903	aa		tax				tax
.3904	a9 01		lda #$01			lda 	#1
.3906	95 90		sta $90,x			sta 	esType,x
.3908					_UIFExit:
.3908	60		rts				rts
.3909					UnaryFloatToInt:
.3909	20 89 36	jsr $3689			jsr 	EvaluateNumeric 			; the number
.390c	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.390e	f0 0b		beq $391b			beq 	_UFIExit
.3910	8a		txa				txa 								; convert to int
.3911	a2 14		ldx #$14		ldx	#20
.3913	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.3916	aa		tax				tax
.3917	a9 00		lda #$00			lda 	#0 							; set type
.3919	95 90		sta $90,x			sta 	esType,x
.391b					_UFIExit:
.391b	60		rts				rts
.391c					UnaryAlloc:
.391c	e8		inx				inx 								; evaluate memory required
.391d	20 9f 36	jsr $369f			jsr 	EvaluateInteger
.3920	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen
.3923	ca		dex				dex
.3924	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3926	15 b1		ora $b1,x			ora 	esInt3+1,x
.3928	d0 1d		bne $3947			bne 	_UABadValue
.392a	20 1e 3d	jsr $3d1e			jsr 	MInt32False					; zero return.
.392d	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.392f	95 a0		sta $a0,x			sta 	esInt1,x
.3931	a5 35		lda $35				lda 	lowMemory
.3933	95 98		sta $98,x			sta 	esInt0,x
.3935	18		clc				clc 								; add alloc required.
.3936	75 99		adc $99,x			adc 	esInt0+1,x
.3938	85 35		sta $35				sta 	lowMemory
.393a	a5 36		lda $36				lda 	lowMemory+1
.393c	75 a1		adc $a1,x			adc 	esInt1+1,x
.393e	85 36		sta $36				sta 	lowMemory+1
.3940	b0 05		bcs $3947			bcs		_UABadValue 				; overflow definitely bad.
.3942	c5 34		cmp $34				cmp 	highMemory+1
.3944	b0 01		bcs $3947			bcs 	_UABadValue 				; out of memory bad.
.3946	60		rts				rts
.3947					_UABadValue:
.3947	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3949	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.394c					UnaryTimer:
.394c	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen 			; no parameters
.394f	5a		phy				phy
.3950	20 45 3d	jsr $3d45			jsr 	MInt32Zero 					; zero result
.3953	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3955	a2 1c		ldx #$1c		ldx	#28
.3957	20 e7 14	jsr $14e7		jsr	deviceHandler
.395a	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.395c	95 98		sta $98,x			sta 	esInt0,x
.395e	98		tya				tya
.395f	95 a0		sta $a0,x			sta 	esInt1,x
.3961	7a		ply				ply
.3962	60		rts				rts
.3963					UnaryInkey:
.3963	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen
.3966	86 2a		stx $2a				stx 	temp0
.3968	a2 0a		ldx #$0a		ldx	#10
.396a	20 e7 14	jsr $14e7		jsr	deviceHandler
.396d	a6 2a		ldx $2a				ldx 	temp0
.396f	20 2d 3d	jsr $3d2d			jsr 	MInt32Set8Bit
.3972	60		rts				rts
.3973					UnaryGet:
.3973	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen
.3976	86 2a		stx $2a				stx 	temp0
.3978					_UGLoop:
.3978	a2 02		ldx #$02		ldx	#2
.397a	20 e7 14	jsr $14e7		jsr	deviceHandler
.397d	a2 0a		ldx #$0a		ldx	#10
.397f	20 e7 14	jsr $14e7		jsr	deviceHandler
.3982	c9 00		cmp #$00			cmp 	#0
.3984	f0 f2		beq $3978			beq 	_UGLoop
.3986	a6 2a		ldx $2a				ldx 	temp0
.3988	20 2d 3d	jsr $3d2d			jsr 	MInt32Set8Bit
.398b	60		rts				rts
.398c					UnaryGetString:
.398c	20 73 39	jsr $3973			jsr 	UnaryGet
.398f					UGSDoChr:
.398f	4c dc 39	jmp $39dc			jmp 	ChrCode
.3992					UnaryInkeyString:
.3992	20 63 39	jsr $3963			jsr 	UnaryInkey
.3995	b5 98		lda $98,x			lda 	esInt0,x
.3997	d0 f6		bne $398f			bne 	UGSDoChr
.3999	8a		txa				txa
.399a	a2 08		ldx #$08		ldx	#8
.399c	20 b5 40	jsr $40b5		jsr	stringHandler
.399f	aa		tax				tax
.39a0	60		rts				rts
.39a1					UnarySys:
.39a1	20 9f 36	jsr $369f			jsr 	EvaluateInteger 				; get the address
.39a4	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen
.39a7	20 a3 2a	jsr $2aa3			jsr 	TOSToTemp0 						; copy call address to temp0
.39aa	da		phx				phx
.39ab	5a		phy				phy
.39ac	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.39af	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.39b2	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.39b5	20 c2 39	jsr $39c2			jsr 	_CallTemp0
.39b8	85 32		sta $32				sta 	tempShort 						; restore YX
.39ba	7a		ply				ply
.39bb	fa		plx				plx
.39bc	a5 32		lda $32				lda 	tempShort
.39be	20 2d 3d	jsr $3d2d			jsr 	MInt32Set8Bit 					; return result.
.39c1	60		rts				rts
.39c2					_CallTemp0:
.39c2	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.39c5					UnaryMem:
.39c5	20 1e 3d	jsr $3d1e			jsr 	MInt32False 					; set to false (e.g. 0)
.39c8	38		sec				sec
.39c9	a5 33		lda $33				lda 	highMemory 						; calculate value
.39cb	e5 35		sbc $35				sbc 	lowMemory
.39cd	95 98		sta $98,x			sta 	esInt0,x
.39cf	a5 34		lda $34				lda 	highMemory+1
.39d1	e5 36		sbc $36				sbc 	lowMemory+1
.39d3	95 a0		sta $a0,x			sta 	esInt1,x
.39d5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.39d6					ExecChr:
.39d6	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger		; character number 0-255
.39d9	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen				; right bracket
.39dc					ChrCode:
.39dc	5a		phy				phy
.39dd	8a		txa				txa 								; A = stack
.39de	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.39e0	a2 02		ldx #$02		ldx	#2
.39e2	20 b5 40	jsr $40b5		jsr	stringHandler
.39e5	aa		tax				tax 								; X = stack
.39e6	7a		ply				ply
.39e7	60		rts				rts
.39e8					ExecLower:
.39e8	38		sec				sec 								; set carry is lower
.39e9	b0 01		bcs $39ec			bcs 	ExecUpperLower
.39eb					ExecUpper:
.39eb	18		clc				clc 								; clear carry is upper
.39ec					ExecUpperLower:
.39ec	08		php				php 								; save carry
.39ed	20 94 36	jsr $3694			jsr 	EvaluateString 				; string to stack,X
.39f0	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen 			; check closing right bracket.
.39f3	28		plp				plp 								; restore carry, save Y
.39f4	5a		phy				phy
.39f5	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.39f7	2a		rol a				rol 	a
.39f8	a8		tay				tay 								; now in Y
.39f9	8a		txa				txa 								; do the substring and exit.
.39fa	a2 0c		ldx #$0c		ldx	#12
.39fc	20 b5 40	jsr $40b5		jsr	stringHandler
.39ff	aa		tax				tax
.3a00	7a		ply				ply
.3a01	60		rts				rts
.3a02					ExecLeft:
.3a02	20 94 36	jsr $3694			jsr 	EvaluateString 				; string to stack,X
.3a05	20 9c 3d	jsr $3d9c			jsr 	CheckComma
.3a08	e8		inx				inx
.3a09	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3a0b	20 2d 3d	jsr $3d2d			jsr 	MInt32Set8Bit
.3a0e	e8		inx				inx
.3a0f	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3a12					ExecSubstring:
.3a12	ca		dex				dex 								; fix up X
.3a13	ca		dex				dex
.3a14	20 8f 3d	jsr $3d8f			jsr 	CheckRightParen 			; check closing right bracket.
.3a17	8a		txa				txa 								; do the substring and exit.
.3a18	a2 0e		ldx #$0e		ldx	#14
.3a1a	20 b5 40	jsr $40b5		jsr	stringHandler
.3a1d	aa		tax				tax
.3a1e	60		rts				rts
.3a1f					ExecMid:
.3a1f	20 94 36	jsr $3694			jsr 	EvaluateString 				; string to stack,X
.3a22	20 9c 3d	jsr $3d9c			jsr 	CheckComma
.3a25	e8		inx				inx
.3a26	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3a29	c9 00		cmp #$00			cmp 	#0
.3a2b	f0 15		beq $3a42			beq 	_EMValue
.3a2d	e8		inx				inx
.3a2e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3a30	20 2d 3d	jsr $3d2d			jsr 	MInt32Set8Bit
.3a33	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3a35	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3a37	f0 d9		beq $3a12			beq 	ExecSubString
.3a39	20 9c 3d	jsr $3d9c			jsr 	CheckComma
.3a3c	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3a3f	4c 12 3a	jmp $3a12			jmp 	ExecSubString
.3a42					_EMValue:
.3a42	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3a44	20 09 15	jsr $1509		jsr	errorHandler
.3a47					ExecRight:
.3a47	20 94 36	jsr $3694			jsr 	EvaluateString 				; string to stack,X
.3a4a	20 9c 3d	jsr $3d9c			jsr 	CheckComma
.3a4d	e8		inx				inx
.3a4e	20 a7 36	jsr $36a7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3a51	ca		dex				dex
.3a52	5a		phy				phy
.3a53	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3a55	85 2a		sta $2a				sta 	temp0
.3a57	b5 a0		lda $a0,x			lda 	esInt1,x
.3a59	85 2b		sta $2b				sta 	temp0+1
.3a5b	a0 00		ldy #$00			ldy 	#0 							; point to length
.3a5d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3a5f	18		clc				clc 								; add 1.
.3a60	69 01		adc #$01			adc 	#1
.3a62	38		sec				sec
.3a63	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3a65	f0 02		beq $3a69			beq		_ERMake1 					; if zero, make it 1.
.3a67	b0 02		bcs $3a6b			bcs		_EROkay
.3a69					_ERMake1:
.3a69	a9 01		lda #$01			lda 	#1 							; start position.
.3a6b					_EROkay:
.3a6b	e8		inx				inx 								; set start pos.
.3a6c	95 98		sta $98,x			sta 	esInt0,x
.3a6e	e8		inx				inx
.3a6f	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3a71	20 2d 3d	jsr $3d2d			jsr 	MInt32Set8Bit
.3a74	7a		ply				ply
.3a75	4c 12 3a	jmp $3a12			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3a78					MInt32And:
.3a78	b5 98		lda $98,x			lda 	esInt0,x
.3a7a	35 99		and $99,x			and 	esInt0+1,x
.3a7c	95 98		sta $98,x			sta 	esInt0,x
.3a7e	b5 a0		lda $a0,x			lda 	esInt1,x
.3a80	35 a1		and $a1,x			and 	esInt1+1,x
.3a82	95 a0		sta $a0,x			sta 	esInt1,x
.3a84	b5 a8		lda $a8,x			lda 	esInt2,x
.3a86	35 a9		and $a9,x			and 	esInt2+1,x
.3a88	95 a8		sta $a8,x			sta 	esInt2,x
.3a8a	b5 b0		lda $b0,x			lda 	esInt3,x
.3a8c	35 b1		and $b1,x			and 	esInt3+1,x
.3a8e	95 b0		sta $b0,x			sta 	esInt3,x
.3a90	60		rts				rts
.3a91					MInt32Or:
.3a91	b5 98		lda $98,x			lda 	esInt0,x
.3a93	15 99		ora $99,x			ora 	esInt0+1,x
.3a95	95 98		sta $98,x			sta 	esInt0,x
.3a97	b5 a0		lda $a0,x			lda 	esInt1,x
.3a99	15 a1		ora $a1,x			ora 	esInt1+1,x
.3a9b	95 a0		sta $a0,x			sta 	esInt1,x
.3a9d	b5 a8		lda $a8,x			lda 	esInt2,x
.3a9f	15 a9		ora $a9,x			ora 	esInt2+1,x
.3aa1	95 a8		sta $a8,x			sta 	esInt2,x
.3aa3	b5 b0		lda $b0,x			lda 	esInt3,x
.3aa5	15 b1		ora $b1,x			ora 	esInt3+1,x
.3aa7	95 b0		sta $b0,x			sta 	esInt3,x
.3aa9	60		rts				rts
.3aaa					MInt32Xor:
.3aaa	b5 98		lda $98,x			lda 	esInt0,x
.3aac	55 99		eor $99,x			eor 	esInt0+1,x
.3aae	95 98		sta $98,x			sta 	esInt0,x
.3ab0	b5 a0		lda $a0,x			lda 	esInt1,x
.3ab2	55 a1		eor $a1,x			eor 	esInt1+1,x
.3ab4	95 a0		sta $a0,x			sta 	esInt1,x
.3ab6	b5 a8		lda $a8,x			lda 	esInt2,x
.3ab8	55 a9		eor $a9,x			eor 	esInt2+1,x
.3aba	95 a8		sta $a8,x			sta 	esInt2,x
.3abc	b5 b0		lda $b0,x			lda 	esInt3,x
.3abe	55 b1		eor $b1,x			eor 	esInt3+1,x
.3ac0	95 b0		sta $b0,x			sta 	esInt3,x
.3ac2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3ac3					MInt32Compare:
.3ac3	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3ac5	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3ac7	d0 13		bne $3adc			bne 	MInt32Compare2
.3ac9	b5 a0		lda $a0,x			lda 	esInt1,x
.3acb	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3acd	d0 0d		bne $3adc			bne 	MInt32Compare2
.3acf	b5 a8		lda $a8,x			lda 	esInt2,x
.3ad1	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3ad3	d0 07		bne $3adc			bne 	MInt32Compare2
.3ad5	b5 b0		lda $b0,x			lda 	esInt3,x
.3ad7	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3ad9	d0 01		bne $3adc			bne 	MInt32Compare2
.3adb	60		rts				rts
.3adc					MInt32Compare2:
.3adc	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3ade	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3ae0	b5 a0		lda $a0,x			lda		esInt1,x
.3ae2	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3ae4	b5 a8		lda $a8,x			lda		esInt2,x
.3ae6	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3ae8	b5 b0		lda $b0,x			lda		esInt3,x
.3aea	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3aec	50 02		bvc $3af0			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3aee	49 80		eor #$80			eor 	#$80
.3af0					_I32LNoOverflow
.3af0	30 03		bmi $3af5			bmi 	MInt32CLess					; if -ve then return $FF
.3af2	a9 01		lda #$01			lda 	#$01						; else return $01
.3af4	60		rts				rts
.3af5					MInt32CLess:
.3af5	a9 ff		lda #$ff			lda 	#$FF
.3af7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3af8					MInt32SDivide:
.3af8	98		tya				tya  								; save Y, which is the count of negations
.3af9	48		pha				pha
.3afa	a0 00		ldy #$00			ldy 	#0 							; zero count
.3afc	20 14 3b	jsr $3b14			jsr 	_MInt32SRemSign 			; unsign TOS
.3aff	e8		inx				inx 								; unsign TOS+1
.3b00	20 14 3b	jsr $3b14			jsr 	_MInt32SRemSign
.3b03	ca		dex				dex
.3b04	98		tya				tya 								; save sign count on stack
.3b05	48		pha				pha
.3b06	20 1d 3b	jsr $3b1d			jsr 	MInt32UDivide 				; unsigned division
.3b09	68		pla				pla 								; get sign count back
.3b0a	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3b0c	f0 03		beq $3b11			beq 	_I32SNoNeg
.3b0e	20 d8 3c	jsr $3cd8			jsr 	MInt32Negate
.3b11					_I32SNoNeg:
.3b11	68		pla				pla 								; restoe Y and exit
.3b12	a8		tay				tay
.3b13	60		rts				rts
.3b14					_MInt32SRemSign:
.3b14	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3b16	10 04		bpl $3b1c			bpl 	_MInt32SRSExit
.3b18	c8		iny				iny 								; increment the sign count
.3b19	20 d8 3c	jsr $3cd8			jsr 	MInt32Negate 				; negate the value.
.3b1c					_MInt32SRSExit:
.3b1c	60		rts				rts
.3b1d					MInt32UDivide:
.3b1d	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3b1f	15 a1		ora $a1,x			ora 	esInt1+1,x
.3b21	15 a2		ora $a2,x			ora 	esInt1+2,x
.3b23	15 a3		ora $a3,x			ora 	esInt1+3,x
.3b25	f0 4a		beq $3b71			beq 	_MInt32DZero
.3b27	e8		inx				inx 								; clear A
.3b28	e8		inx				inx
.3b29	20 1e 3d	jsr $3d1e			jsr 	MInt32False
.3b2c	ca		dex				dex
.3b2d	ca		dex				dex
.3b2e	98		tya				tya 								; save Y on the stack
.3b2f	48		pha				pha
.3b30	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3b32					_MInt32UDLoop:
.3b32	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3b34	36 a0		rol $a0,x			rol 	esInt1,x
.3b36	36 a8		rol $a8,x			rol 	esInt2,x
.3b38	36 b0		rol $b0,x			rol 	esInt3,x
.3b3a	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3b3c	36 a2		rol $a2,x			rol 	esInt1+2,x
.3b3e	36 aa		rol $aa,x			rol 	esInt2+2,x
.3b40	36 b2		rol $b2,x			rol 	esInt3+2,x
.3b42	38		sec				sec 								; calculate A-M saving result on the stack
.3b43	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3b45	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3b47	48		pha				pha
.3b48	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3b4a	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3b4c	48		pha				pha
.3b4d	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3b4f	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3b51	48		pha				pha
.3b52	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3b54	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3b56	90 10		bcc $3b68			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3b58	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3b5a	68		pla				pla
.3b5b	95 aa		sta $aa,x			sta 	esInt2+2,x
.3b5d	68		pla				pla
.3b5e	95 a2		sta $a2,x			sta 	esInt1+2,x
.3b60	68		pla				pla
.3b61	95 9a		sta $9a,x			sta 	esInt0+2,x
.3b63	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3b65	4c 6b 3b	jmp $3b6b			jmp 	_MInt32Next 					; do the next iteration
.3b68					_MInt32NoSubtract:
.3b68	68		pla				pla
.3b69	68		pla				pla
.3b6a	68		pla				pla
.3b6b					_MInt32Next:
.3b6b	88		dey				dey 								; do this 32 times.
.3b6c	d0 c4		bne $3b32			bne 	_MInt32UDLoop
.3b6e	68		pla				pla 								; restore Y and exit
.3b6f	a8		tay				tay
.3b70	60		rts				rts
.3b71					_MInt32DZero:
.3b71	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3b73	20 09 15	jsr $1509		jsr	errorHandler
.3b76					MInt32Modulus:
.3b76	20 1d 3b	jsr $3b1d			jsr 	MInt32UDivide 				; do the division.
.3b79	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3b7b	95 b0		sta $b0,x			sta 	esInt3,x
.3b7d	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3b7f	95 a8		sta $a8,x			sta 	esInt2,x
.3b81	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3b83	95 a0		sta $a0,x			sta 	esInt1,x
.3b85	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3b87	95 98		sta $98,x			sta 	esInt0,x
.3b89	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d61					fs32Length:
>0d61							.fill 	1
.3b8a					LinkInt32FromString:
.3b8a	aa		tax				tax
.3b8b	98		tya				tya
.3b8c	20 91 3b	jsr $3b91			jsr 	MInt32FromString
.3b8f	8a		txa				txa
.3b90	60		rts				rts
.3b91					MInt32FromString:
.3b91	85 32		sta $32				sta 	tempShort 					; save base
.3b93	5a		phy				phy
.3b94	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3b96	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b98	8d 61 0d	sta $0d61			sta 	fs32Length
.3b9b	f0 64		beq $3c01			beq 	_I32FSFail2					; fail if length zero.
.3b9d	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3b9f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3ba1	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3ba3	d0 09		bne $3bae			bne 	_I32FSNotNegative
.3ba5	ad 61 0d	lda $0d61			lda 	fs32Length 					; get length back.
.3ba8	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3baa	f0 55		beq $3c01			beq 	_I32FSFail2
.3bac	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3bae					_I32FSNotNegative:
.3bae	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3bb0	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3bb2	d0 02		bne $3bb6			bne 	_I32FSNN2
.3bb4	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3bb6					_I32FSNN2:
.3bb6	48		pha				pha 								; save base + final sign on stack.
.3bb7	20 1e 3d	jsr $3d1e			jsr 	MInt32False 				; zero the return value.
.3bba					_I32FSMainLoop:
.3bba	68		pla				pla 								; get the base back into tempShort
.3bbb	48		pha				pha
.3bbc	29 7f		and #$7f			and 	#$7F
.3bbe	85 32		sta $32				sta 	tempShort
.3bc0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3bc2	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3bc4	90 02		bcc $3bc8			bcc 	_I32FSNotLC
.3bc6	e9 20		sbc #$20			sbc 	#32
.3bc8					_I32FSNotLC:
.3bc8	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3bc9	e9 30		sbc #$30			sbc 	#"0"
.3bcb	90 33		bcc $3c00			bcc 	_I32FSFail 					; nothing more to do.
.3bcd	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3bcf	90 06		bcc $3bd7			bcc 	_I32FSValidate
.3bd1	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3bd3	90 2b		bcc $3c00			bcc 	_I32FSFail
.3bd5	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3bd7					_I32FSValidate:
.3bd7	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3bd9	b0 25		bcs $3c00			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3bdb	48		pha				pha 								; save the new digit value.
.3bdc	e8		inx				inx 								; put base into next slot up on stack
.3bdd	a5 32		lda $32				lda 	tempShort
.3bdf	20 2d 3d	jsr $3d2d			jsr 	MInt32Set8Bit
.3be2	ca		dex				dex
.3be3	20 38 3c	jsr $3c38			jsr 	MInt32Multiply 				; multiply current by the base
.3be6	e8		inx				inx
.3be7	68		pla				pla  								; put additive into next slot
.3be8	20 2d 3d	jsr $3d2d			jsr 	MInt32Set8Bit
.3beb	ca		dex				dex
.3bec	20 04 3c	jsr $3c04			jsr 	MInt32Add 					; and add it
.3bef	c8		iny				iny 								; bump the character pointer
.3bf0	cc 61 0d	cpy $0d61			cpy 	fs32Length 					; until > length.
.3bf3	f0 c5		beq $3bba			beq 	_I32FSMainLoop
.3bf5	90 c3		bcc $3bba			bcc 	_I32FSMainLoop
.3bf7					_I32FSDone:
.3bf7	68		pla				pla 								; get base/final sign back
.3bf8	10 03		bpl $3bfd			bpl 	_I32FSNN3
.3bfa	20 d8 3c	jsr $3cd8			jsr 	MInt32Negate 				; negate the result.
.3bfd					_I32FSNN3:
.3bfd	7a		ply				ply
.3bfe	38		sec				sec
.3bff	60		rts				rts
.3c00					_I32FSFail:
.3c00	68		pla				pla
.3c01					_I32FSFail2:
.3c01	7a		ply				ply
.3c02	18		clc				clc
.3c03	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3c04					MInt32Add:
.3c04	18		clc				clc
.3c05	b5 98		lda $98,x			lda 	esInt0,x
.3c07	75 99		adc $99,x			adc 	esInt0+1,x
.3c09	95 98		sta $98,x			sta 	esInt0,x
.3c0b	b5 a0		lda $a0,x			lda 	esInt1,x
.3c0d	75 a1		adc $a1,x			adc 	esInt1+1,x
.3c0f	95 a0		sta $a0,x			sta 	esInt1,x
.3c11	b5 a8		lda $a8,x			lda 	esInt2,x
.3c13	75 a9		adc $a9,x			adc 	esInt2+1,x
.3c15	95 a8		sta $a8,x			sta 	esInt2,x
.3c17	b5 b0		lda $b0,x			lda 	esInt3,x
.3c19	75 b1		adc $b1,x			adc 	esInt3+1,x
.3c1b	95 b0		sta $b0,x			sta 	esInt3,x
.3c1d	60		rts				rts
.3c1e					MInt32Sub:
.3c1e	38		sec				sec
.3c1f	b5 98		lda $98,x			lda 	esInt0,x
.3c21	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3c23	95 98		sta $98,x			sta 	esInt0,x
.3c25	b5 a0		lda $a0,x			lda 	esInt1,x
.3c27	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3c29	95 a0		sta $a0,x			sta 	esInt1,x
.3c2b	b5 a8		lda $a8,x			lda 	esInt2,x
.3c2d	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3c2f	95 a8		sta $a8,x			sta 	esInt2,x
.3c31	b5 b0		lda $b0,x			lda 	esInt3,x
.3c33	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3c35	95 b0		sta $b0,x			sta 	esInt3,x
.3c37	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3c38					MInt32Multiply:
.3c38	e8		inx				inx 								; copy 2nd -> 3rd
.3c39	20 5e 3c	jsr $3c5e			jsr 	MInt32CopyUp
.3c3c	ca		dex				dex
.3c3d	20 5e 3c	jsr $3c5e			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3c40	20 1e 3d	jsr $3d1e			jsr 	MInt32False 				; zero 1st.
.3c43					_I32Loop:
.3c43	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3c45	29 01		and #$01			and 	#1
.3c47	f0 03		beq $3c4c			beq 	_I32NoAdd 					; if set
.3c49	20 04 3c	jsr $3c04			jsr 	MInt32Add 					; add 2nd to 1st.
.3c4c					_I32NoAdd:
.3c4c	e8		inx				inx 								; shift 2nd left
.3c4d	20 33 3d	jsr $3d33			jsr 	MInt32ShiftLeft
.3c50	e8		inx				inx  								; shift 3rd right
.3c51	20 3c 3d	jsr $3d3c			jsr 	MInt32ShiftRight
.3c54	20 45 3d	jsr $3d45			jsr 	MInt32Zero 					; check if zero.
.3c57	08		php				php 								; save status bits
.3c58	ca		dex				dex 	 							; point back to 1st
.3c59	ca		dex				dex
.3c5a	28		plp				plp 								; get status bits
.3c5b	d0 e6		bne $3c43			bne 	_I32Loop 					; if non-zero keep going.
.3c5d	60		rts				rts
.3c5e					MInt32CopyUp:
.3c5e	b5 98		lda $98,x			lda 	esInt0,x
.3c60	95 99		sta $99,x			sta 	esInt0+1,x
.3c62	b5 a0		lda $a0,x			lda 	esInt1,x
.3c64	95 a1		sta $a1,x			sta 	esInt1+1,x
.3c66	b5 a8		lda $a8,x			lda 	esInt2,x
.3c68	95 a9		sta $a9,x			sta 	esInt2+1,x
.3c6a	b5 b0		lda $b0,x			lda 	esInt3,x
.3c6c	95 b1		sta $b1,x			sta 	esInt3+1,x
.3c6e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d62					MCharCount:	.fill 	1						; count of converted characters
.3c6f					MLInt32ToString:
.3c6f	aa		tax				tax									; module passes stack in A, base in Y
.3c70	98		tya				tya
.3c71	20 76 3c	jsr $3c76			jsr 	MInt32ToString
.3c74	8a		txa				txa
.3c75	60		rts				rts
.3c76					MInt32ToString:
.3c76	48		pha				pha 								; save base
.3c77	85 32		sta $32				sta 	tempShort 					; save target base.
.3c79	a9 00		lda #$00			lda 	#0
.3c7b	8d 62 0d	sta $0d62			sta 	MCharCount 					; clear character count to 0
.3c7e	5a		phy				phy
.3c7f	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3c81	10 10		bpl $3c93			bpl 	_I32TSUnsigned
.3c83	48		pha				pha 								; save base on stack.
.3c84	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3c86	10 08		bpl $3c90			bpl 	_I32TSNoFlip
.3c88	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3c8a	20 c5 3c	jsr $3cc5			jsr 	MI32WriteCharacter
.3c8d	20 d8 3c	jsr $3cd8			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3c90					_I32TSNoFlip:
.3c90	68		pla				pla 								; get the base back
.3c91	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3c93					_I32TSUnsigned:
.3c93	20 a0 3c	jsr $3ca0			jsr 	MI32DivideWrite 			; recursive code to output string.
.3c96	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3c98	ad 62 0d	lda $0d62			lda 	MCharCount
.3c9b	91 2a		sta ($2a),y			sta 	(temp0),y
.3c9d	7a		ply				ply
.3c9e	68		pla				pla
.3c9f	60		rts				rts
.3ca0					MI32DivideWrite:
.3ca0	48		pha				pha 								; save the divisor/base
.3ca1	e8		inx				inx 								; write in the dividing position.
.3ca2	20 2d 3d	jsr $3d2d			jsr 	MInt32Set8Bit
.3ca5	ca		dex				dex
.3ca6	20 1d 3b	jsr $3b1d			jsr 	MInt32UDivide 				; divide number by base.
.3ca9	68		pla				pla 								; get the base into Y
.3caa	a8		tay				tay
.3cab	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3cad	48		pha				pha
.3cae	20 45 3d	jsr $3d45			jsr 	MInt32Zero 					; is the result zero ?
.3cb1	f0 04		beq $3cb7			beq 	_I32NoRecurse 				; if so, don't recurse.
.3cb3	98		tya				tya 								; put base into A
.3cb4	20 a0 3c	jsr $3ca0			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3cb7					_I32NoRecurse:
.3cb7	68		pla				pla 								; get the remainder back
.3cb8	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3cba	90 02		bcc $3cbe			bcc 	_I32NotHex
.3cbc	69 06		adc #$06			adc 	#7-1
.3cbe					_I32NotHex:
.3cbe	18		clc				clc 								; make it ASCII
.3cbf	69 30		adc #$30			adc 	#48
.3cc1	20 c5 3c	jsr $3cc5			jsr 	MI32WriteCharacter 			; write the character out
.3cc4	60		rts				rts 								; and exit.
.3cc5					MI32WriteCharacter:
.3cc5	ee 62 0d	inc $0d62			inc 	MCharCount 					; bump count (space for leading count)
.3cc8	ac 62 0d	ldy $0d62			ldy 	MCharCount 					; get position
.3ccb	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3ccd	c8		iny				iny
.3cce	a9 00		lda #$00			lda 	#0
.3cd0	91 2a		sta ($2a),y			sta 	(temp0),y
.3cd2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d63					MSeed32:	.fill 	4							; random number seed.
.3cd3					MInt32Absolute:
.3cd3	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3cd5	30 01		bmi $3cd8			bmi 	MInt32Negate
.3cd7	60		rts				rts
.3cd8					MInt32Negate:
.3cd8	38		sec				sec 								; subtract from zero.
.3cd9	a9 00		lda #$00			lda 	#0
.3cdb	f5 98		sbc $98,x			sbc 	esInt0,x
.3cdd	95 98		sta $98,x			sta 	esInt0,x
.3cdf	a9 00		lda #$00			lda 	#0
.3ce1	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3ce3	95 a0		sta $a0,x			sta 	esInt1,x
.3ce5	a9 00		lda #$00			lda 	#0
.3ce7	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3ce9	95 a8		sta $a8,x			sta 	esInt2,x
.3ceb	a9 00		lda #$00			lda 	#0
.3ced	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3cef	95 b0		sta $b0,x			sta 	esInt3,x
.3cf1	60		rts				rts
.3cf2					MInt32Not:
.3cf2	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3cf4	49 ff		eor #$ff			eor 	#$FF
.3cf6	95 98		sta $98,x			sta 	esInt0,x
.3cf8	b5 a0		lda $a0,x			lda 	esInt1,x
.3cfa	49 ff		eor #$ff			eor 	#$FF
.3cfc	95 a0		sta $a0,x			sta 	esInt1,x
.3cfe	b5 a8		lda $a8,x			lda 	esInt2,x
.3d00	49 ff		eor #$ff			eor 	#$FF
.3d02	95 a8		sta $a8,x			sta 	esInt2,x
.3d04	b5 b0		lda $b0,x			lda 	esInt3,x
.3d06	49 ff		eor #$ff			eor 	#$FF
.3d08	95 b0		sta $b0,x			sta 	esInt3,x
.3d0a	60		rts				rts
.3d0b					MInt32Sign:
.3d0b	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3d0d	30 0b		bmi $3d1a			bmi 	MInt32True 					; if set return -1 (true)
.3d0f	20 45 3d	jsr $3d45			jsr 	MInt32Zero 					; is it zero ?
.3d12	f0 0a		beq $3d1e			beq 	MInt32False 				; if zero return 0 (false)
.3d14	20 1e 3d	jsr $3d1e			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3d17	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3d19	60		rts				rts
.3d1a					MInt32True:
.3d1a	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3d1c	d0 02		bne $3d20			bne 	MInt32WriteAll
.3d1e					MInt32False:
.3d1e	a9 00		lda #$00			lda 	#0
.3d20					MInt32WriteAll:
.3d20	95 98		sta $98,x			sta 	esInt0,x
.3d22					MInt32Write123:
.3d22	95 a0		sta $a0,x			sta 	esInt1,x
.3d24	95 a8		sta $a8,x			sta 	esInt2,x
.3d26	95 b0		sta $b0,x			sta 	esInt3,x
.3d28	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3d2a	95 90		sta $90,x			sta 	esType,x
.3d2c	60		rts				rts
.3d2d					MInt32Set8Bit:
.3d2d	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3d2f	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3d31	f0 ef		beq $3d22			beq		MInt32Write123
.3d33					MInt32ShiftLeft:
.3d33	16 98		asl $98,x			asl 	esInt0,x
.3d35	36 a0		rol $a0,x			rol	 	esInt1,x
.3d37	36 a8		rol $a8,x			rol	 	esInt2,x
.3d39	36 b0		rol $b0,x			rol	 	esInt3,x
.3d3b	60		rts				rts
.3d3c					MInt32ShiftRight:
.3d3c	56 b0		lsr $b0,x			lsr 	esInt3,x
.3d3e	76 a8		ror $a8,x			ror 	esInt2,x
.3d40	76 a0		ror $a0,x			ror 	esInt1,x
.3d42	76 98		ror $98,x			ror 	esInt0,x
.3d44	60		rts				rts
.3d45					MInt32Zero:
.3d45	b5 98		lda $98,x			lda 	esInt0,x
.3d47	15 a0		ora $a0,x			ora 	esInt1,x
.3d49	15 a8		ora $a8,x			ora 	esInt2,x
.3d4b	15 b0		ora $b0,x			ora 	esInt3,x
.3d4d	60		rts				rts
.3d4e					MInt32Random:
.3d4e	5a		phy				phy
.3d4f	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3d51	ad 63 0d	lda $0d63			lda 	MSeed32+0 					; check the seed isn't zero
.3d54	d0 03		bne $3d59			bne 	_Random1
.3d56	a8		tay				tay 								; if so do it 256 times
.3d57	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3d59					_Random1:
.3d59	0a		asl a				asl 	a
.3d5a	2e 64 0d	rol $0d64			rol 	MSeed32+1
.3d5d	2e 65 0d	rol $0d65			rol 	MSeed32+2
.3d60	2e 66 0d	rol $0d66			rol 	MSeed32+3
.3d63	90 02		bcc $3d67			bcc 	_Random2
.3d65	49 c5		eor #$c5			eor 	#$C5
.3d67					_Random2:
.3d67	88		dey				dey
.3d68	d0 ef		bne $3d59			bne 	_Random1
.3d6a	8d 63 0d	sta $0d63			sta 	MSeed32+0 					; copy the seed in.
.3d6d	95 98		sta $98,x			sta 	esInt0,x
.3d6f	ad 64 0d	lda $0d64			lda 	MSeed32+1
.3d72	95 a0		sta $a0,x			sta 	esInt1,x
.3d74	ad 65 0d	lda $0d65			lda 	MSeed32+2
.3d77	95 a8		sta $a8,x			sta 	esInt2,x
.3d79	ad 66 0d	lda $0d66			lda 	MSeed32+3
.3d7c	95 b0		sta $b0,x			sta 	esInt3,x
.3d7e	7a		ply				ply
.3d7f	a9 00		lda #$00			lda 	#0
.3d81	95 90		sta $90,x			sta 	esType,x
.3d83	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3d84					CheckToken:
.3d84	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3d86	d0 02		bne $3d8a			bne 	_CTError
.3d88	c8		iny				iny
.3d89	60		rts				rts
.3d8a					_CTError:
.3d8a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3d8c	20 09 15	jsr $1509		jsr	errorHandler
.3d8f					CheckRightParen:
.3d8f	b1 28		lda ($28),y			lda 	(codePtr),y
.3d91	c8		iny				iny
.3d92	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3d94	d0 01		bne $3d97			bne 	_CRPError
.3d96	60		rts				rts
.3d97					_CRPError:
.3d97	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3d99	20 09 15	jsr $1509		jsr	errorHandler
.3d9c					CheckComma:
.3d9c	b1 28		lda ($28),y			lda 	(codePtr),y
.3d9e	c8		iny				iny
.3d9f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3da1	d0 01		bne $3da4			bne 	_CCError
.3da3	60		rts				rts
.3da4					_CCError:
.3da4	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3da6	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3da9					RSReset:
.3da9	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3dab	85 37		sta $37				sta 	rsPointer
.3dad	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3daf	85 38		sta $38				sta 	1+(rsPointer)
.3db1	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3db3	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3db6	60		rts				rts
.3db7					RSClaim:
.3db7	84 32		sty $32				sty 	tempShort 					; preserve Y
.3db9	48		pha				pha 								; save marker on stack.
.3dba	8a		txa				txa 								; get bytes required.
.3dbb	38		sec				sec
.3dbc	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3dbe	65 37		adc $37				adc 	rsPointer
.3dc0	85 37		sta $37				sta 	rsPointer
.3dc2	a5 38		lda $38				lda 	rsPointer+1
.3dc4	69 ff		adc #$ff			adc 	#$FF
.3dc6	85 38		sta $38				sta 	rsPointer+1
.3dc8	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3dca	90 08		bcc $3dd4			bcc 	_RSCOverflow
.3dcc	68		pla				pla 								; get marker back
.3dcd	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3dcf	91 37		sta ($37),y			sta 	(rsPointer),y
.3dd1	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3dd3	60		rts				rts
.3dd4					_RSCOverflow:
.3dd4	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3dd6	20 09 15	jsr $1509		jsr	errorHandler
.3dd9					RSFree:
.3dd9	18		clc				clc
.3dda	65 37		adc $37				adc 	rsPointer
.3ddc	85 37		sta $37				sta 	rsPointer
.3dde	90 02		bcc $3de2			bcc 	_RSFExit
.3de0	e6 38		inc $38				inc 	rsPointer+1
.3de2					_RSFExit:
.3de2	60		rts				rts
.3de3					RSSavePosition:
.3de3	84 32		sty $32				sty 	tempShort 					; save Y position
.3de5	a8		tay				tay 								; this is where we write it.
.3de6	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3de8	91 37		sta ($37),y			sta 	(rsPointer),y
.3dea	c8		iny				iny
.3deb	a5 29		lda $29				lda 	codePtr+1
.3ded	91 37		sta ($37),y			sta 	(rsPointer),y
.3def	c8		iny				iny
.3df0	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3df2	91 37		sta ($37),y			sta 	(rsPointer),y
.3df4	a8		tay				tay 								; fix Y back again to original value
.3df5	60		rts				rts
.3df6					RSLoadPosition:
.3df6	a8		tay				tay
.3df7	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3df9	85 28		sta $28				sta 	codePtr
.3dfb	c8		iny				iny
.3dfc	b1 37		lda ($37),y			lda 	(rsPointer),y
.3dfe	85 29		sta $29				sta 	codePtr+1
.3e00	c8		iny				iny
.3e01	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3e03	a8		tay				tay 								; to Y
.3e04	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3e05					WarmStart:
.3e05	a2 04		ldx #$04		ldx	#4
.3e07	20 ab 27	jsr $27ab		jsr	interactionHandler

;******  Return to file: main/main.asm

.3e0a					mainHandler:
.3e0a	7c 0d 3e	jmp ($3e0d,x)			jmp 	(mainVectors,x)
.3e0d					mainVectors:
>3e0d	29 3e					.word _DummyControlHandler ; index 0
>3e0f	9c 3d					.word CheckComma           ; index 2
>3e11	8f 3d					.word CheckRightParen      ; index 4
>3e13	8f 2f					.word XCommandClear        ; index 6
>3e15	ba 36					.word LinkEvaluate         ; index 8
>3e17	c6 36					.word LinkEvaluateInteger  ; index 10
>3e19	d2 36					.word LinkEvaluateSmallInt ; index 12
>3e1b	cc 36					.word LinkEvaluateString   ; index 14
>3e1d	c0 36					.word LinkEvaluateTerm     ; index 16
>3e1f	6f 3c					.word MLInt32ToString      ; index 18
>3e21	1c 31					.word Command_XNew         ; index 20
>3e23	2a 31					.word XCommand_Run         ; index 22
>3e25	36 31					.word Command_RunFrom      ; index 24
>3e27	8a 3b					.word LinkInt32FromString  ; index 26
.3e29					_DummyControlHandler:
.3e29	60		rts			rts

;******  Return to file: basic.asm

.3e2a					section_end_main:
.3e2a					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3e2a					StringChrs:
.3e2a	aa		tax				tax 								; set up stack
.3e2b	a9 02		lda #$02			lda 	#2
.3e2d	20 e9 3e	jsr $3ee9			jsr 	AllocateSoftString
.3e30	98		tya				tya
.3e31	20 0d 3f	jsr $3f0d			jsr 	WriteSoftString
.3e34					StringUpdate:
.3e34	20 42 3e	jsr $3e42			jsr 	ReturnSoftString
.3e37	8a		txa				txa
.3e38	60		rts				rts
.3e39					StringNull:
.3e39	aa		tax				tax
.3e3a	a9 01		lda #$01			lda 	#1
.3e3c	20 e9 3e	jsr $3ee9			jsr 	AllocateSoftString
.3e3f	4c 34 3e	jmp $3e34			jmp 	StringUpdate
.3e42					ReturnSoftString:
.3e42	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3e44	95 98		sta $98,x			sta 	esInt0,x
.3e46	a5 3a		lda $3a				lda 	softMemAlloc+1
.3e48	95 a0		sta $a0,x			sta 	esInt1,x
.3e4a	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3e4c	95 a8		sta $a8,x			sta 	esInt2,x
.3e4e	95 b0		sta $b0,x			sta 	esInt3,x
.3e50	a9 40		lda #$40			lda 	#$40 						; type string.
.3e52	95 90		sta $90,x			sta 	esType,x
.3e54	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3e55					STRCompare:
.3e55	48		pha				pha 								; save A
.3e56	aa		tax				tax 								; put stack pos in X
.3e57	5a		phy				phy
.3e58	20 8b 3e	jsr $3e8b			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3e5b	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3e5d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e5f	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3e61	90 02		bcc $3e65			bcc 	_SCNotSmaller
.3e63	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e65					_SCNotSmaller:
.3e65	aa		tax				tax 								; put that in X. We compare this many chars first.
.3e66					_SCCompareLoop:
.3e66	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3e68	f0 0c		beq $3e76			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3e6a	ca		dex				dex 								; decrement chars to compare.
.3e6b	c8		iny				iny 								; move to next character
.3e6c	38		sec				sec 								; calculate s1[y]-s2[y]
.3e6d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e6f	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3e71	d0 0a		bne $3e7d			bne 	_SCReturnResult 			; if different return sign of A
.3e73	4c 66 3e	jmp $3e66			jmp 	_SCCompareLoop
.3e76					_SCSameToEndShortest
.3e76	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3e78	38		sec				sec
.3e79	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e7b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3e7d					_SCReturnResult:
.3e7d	08		php				php 								; set return to zero preserving PSW.
.3e7e	a2 00		ldx #$00			ldx 	#0
.3e80	28		plp				plp
.3e81	f0 05		beq $3e88			beq 	_SCExit 					; two values equal, then exit
.3e83	ca		dex				dex 								; X = $FF
.3e84	90 02		bcc $3e88			bcc 	_SCExit 					; if 1st < 2nd then -1
.3e86	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3e88					_SCExit:
.3e88	7a		ply				ply
.3e89	68		pla				pla
.3e8a	60		rts				rts
.3e8b					CopyStringPair:
.3e8b	b5 99		lda $99,x			lda 	esInt0+1,x
.3e8d	85 2c		sta $2c				sta 	temp1
.3e8f	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3e91	85 2d		sta $2d				sta 	temp1+1
.3e93					CopyStringTop:
.3e93	b5 98		lda $98,x			lda 	esInt0,x
.3e95	85 2a		sta $2a				sta 	temp0
.3e97	b5 a0		lda $a0,x			lda 	esInt1,x
.3e99	85 2b		sta $2b				sta 	temp0+1
.3e9b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3e9c					StringConcat:
.3e9c	aa		tax				tax									; stack pos in X
.3e9d	5a		phy				phy
.3e9e	20 8b 3e	jsr $3e8b			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3ea1	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3ea2	a0 00		ldy #$00			ldy 	#0
.3ea4	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ea6	71 2c		adc ($2c),y			adc 	(temp1),y
.3ea8	b0 1b		bcs $3ec5			bcs 	_SCError 					; just too many characters here.
.3eaa	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3eac	b0 17		bcs $3ec5			bcs 	_SCError
.3eae	20 e9 3e	jsr $3ee9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3eb1	20 e0 3e	jsr $3ee0			jsr 	CopySoftToStack 			; copy that to the stack.
.3eb4	20 ca 3e	jsr $3eca			jsr 	SCCopyTemp0 				; copy temp0
.3eb7	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3eb9	85 2a		sta $2a				sta 	temp0
.3ebb	a5 2d		lda $2d				lda 	temp1+1
.3ebd	85 2b		sta $2b				sta 	temp0+1
.3ebf	20 ca 3e	jsr $3eca			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3ec2	7a		ply				ply
.3ec3	8a		txa				txa 								; and A
.3ec4	60		rts				rts
.3ec5					_SCError:
.3ec5	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3ec7	20 09 15	jsr $1509		jsr	errorHandler
.3eca					SCCopyTemp0:
.3eca	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3ecc	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ece	85 2e		sta $2e				sta 	temp2
.3ed0					_SCCopyLoop:
.3ed0	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3ed2	f0 0b		beq $3edf			beq 	_SCCopyExit
.3ed4	c6 2e		dec $2e				dec 	temp2
.3ed6	c8		iny				iny 								; get next char
.3ed7	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ed9	20 0d 3f	jsr $3f0d			jsr 	WriteSoftString 			; write to soft string.
.3edc	4c d0 3e	jmp $3ed0			jmp 	_SCCopyLoop
.3edf					_SCCopyExit:
.3edf	60		rts				rts
.3ee0					CopySoftToStack:
.3ee0	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3ee2	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3ee4	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3ee6	95 a0		sta $a0,x			sta 	esInt1,x
.3ee8	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3ee9					AllocateSoftString:
.3ee9	85 32		sta $32				sta 	tempShort 					; save count
.3eeb	5a		phy				phy
.3eec	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3eee	d0 09		bne $3ef9			bne 	_ASSDone
.3ef0	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3ef2	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3ef4	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3ef6	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3ef7	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3ef9					_ASSDone:
.3ef9	38		sec				sec 								; allocate downwards enough memory
.3efa	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3efc	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3efe	85 39		sta $39				sta 	softMemAlloc
.3f00	a5 3a		lda $3a				lda 	softMemAlloc+1
.3f02	e9 00		sbc #$00			sbc 	#0
.3f04	85 3a		sta $3a				sta 	softMemAlloc+1
.3f06	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3f08	a8		tay				tay
.3f09	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f0b	7a		ply				ply
.3f0c	60		rts				rts
.3f0d					WriteSoftString:
.3f0d	84 32		sty $32				sty 	tempShort 					; save Y
.3f0f	48		pha				pha 								; save character on stack
.3f10	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3f12	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3f14	18		clc				clc
.3f15	69 01		adc #$01			adc 	#1
.3f17	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f19	a8		tay				tay 								; offset in Y
.3f1a	68		pla				pla 								; get char and write.
.3f1b	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f1d	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3f1f	60		rts				rts
.3f20					StrClone:
.3f20	aa		tax				tax 								; set up stack.
.3f21	5a		phy				phy
.3f22	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3f24	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3f26	18		clc				clc
.3f27	69 01		adc #$01			adc 	#1
.3f29	20 e9 3e	jsr $3ee9			jsr 	AllocateSoftString 			; allocate soft memory
.3f2c	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3f2e	95 98		sta $98,x			sta 	esInt0,x
.3f30	a5 3a		lda $3a				lda 	softMemAlloc+1
.3f32	95 a0		sta $a0,x			sta 	esInt1,x
.3f34	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3f36	95 a8		sta $a8,x			sta 	esInt2,x
.3f38	95 b0		sta $b0,x			sta 	esInt3,x
.3f3a	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3f3c	95 90		sta $90,x			sta 	esType,x
.3f3e	20 ca 3e	jsr $3eca			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3f41	7a		ply				ply
.3f42	8a		txa				txa
.3f43	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3f44					CaseString:
.3f44	48		pha				pha 								; save A and copy to X
.3f45	aa		tax				tax
.3f46	5a		phy				phy
.3f47	20 93 3e	jsr $3e93			jsr 	CopyStringTop 				; target string -> temp0
.3f4a	a0 00		ldy #$00			ldy 	#0
.3f4c	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3f4e	18		clc				clc
.3f4f	69 01		adc #$01			adc 	#1 							; one more for length byte
.3f51	20 e9 3e	jsr $3ee9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3f54	20 e0 3e	jsr $3ee0			jsr 	CopySoftToStack 			; copy that to the stack.
.3f57	a0 00		ldy #$00			ldy 	#0
.3f59	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3f5b	aa		tax				tax
.3f5c					_CSCopy:
.3f5c	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3f5e	f0 24		beq $3f84			beq 	_CSExit
.3f60	ca		dex				dex
.3f61	c8		iny				iny
.3f62	68		pla				pla 								; check direction
.3f63	48		pha				pha
.3f64	f0 0c		beq $3f72			beq 	_CSUpper
.3f66	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3f68	c9 41		cmp #$41			cmp 	#"A"
.3f6a	90 12		bcc $3f7e			bcc 	_CSWrite
.3f6c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3f6e	b0 0e		bcs $3f7e			bcs 	_CSWrite
.3f70	90 0a		bcc $3f7c			bcc 	_CSFlipWrite
.3f72					_CSUpper:
.3f72	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3f74	c9 61		cmp #$61			cmp 	#"a"
.3f76	90 06		bcc $3f7e			bcc 	_CSWrite
.3f78	c9 7b		cmp #$7b			cmp 	#"z"+1
.3f7a	b0 02		bcs $3f7e			bcs 	_CSWrite
.3f7c					_CSFlipWrite:
.3f7c	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3f7e					_CSWrite:
.3f7e	20 0d 3f	jsr $3f0d			jsr 	WriteSoftString 			; add to soft string.
.3f81	4c 5c 3f	jmp $3f5c			jmp 	_CSCopy
.3f84					_CSExit:
.3f84	7a		ply				ply
.3f85	68		pla				pla
.3f86	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3f87					StringSubstring:
.3f87	48		pha				pha
.3f88	aa		tax				tax 								; access stack.
.3f89	5a		phy				phy
.3f8a	20 93 3e	jsr $3e93			jsr 	CopyStringTop 				; point temp0 to the string.
.3f8d	a0 00		ldy #$00			ldy 	#0 							; get length.
.3f8f	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3f91	85 2c		sta $2c				sta 	temp1
.3f93	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3f95	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3f97	f0 02		beq $3f9b			beq 	_SSBOkay
.3f99	b0 2a		bcs $3fc5			bcs 	_SSBReturnNull
.3f9b					_SSBOkay:
.3f9b	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3f9d	18		clc				clc
.3f9e	69 01		adc #$01			adc 	#1
.3fa0	38		sec				sec
.3fa1	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3fa3	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3fa5	90 02		bcc $3fa9			bcc		_SSBTrunc
.3fa7	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3fa9					_SSBTrunc:
.3fa9	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3fab	18		clc				clc
.3fac	69 01		adc #$01			adc 	#1 							; add 1
.3fae	20 e9 3e	jsr $3ee9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3fb1	20 e0 3e	jsr $3ee0			jsr 	CopySoftToStack 			; copy that to the stack.
.3fb4	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3fb6					_SSBCopyLoop:
.3fb6	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3fb8	f0 0e		beq $3fc8			beq 	_SSBExit
.3fba	c6 2d		dec $2d				dec 	temp1+1
.3fbc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3fbe	20 0d 3f	jsr $3f0d			jsr 	WriteSoftString
.3fc1	c8		iny				iny
.3fc2	4c b6 3f	jmp $3fb6			jmp 	_SSBCopyLoop
.3fc5					_SSBReturnNull:
.3fc5	20 cb 3f	jsr $3fcb			jsr 	ReturnNull
.3fc8					_SSBExit:
.3fc8	7a		ply				ply
.3fc9	68		pla				pla
.3fca	60		rts				rts
.3fcb					ReturnNull:
.3fcb	a9 00		lda #$00			lda 	#0 							; clear null string
.3fcd	8d ce 0a	sta $0ace			sta 	NullString
.3fd0	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3fd2	95 98		sta $98,x			sta 	esInt0,x
.3fd4	a9 0a		lda #$0a			lda 	#NullString >> 8
.3fd6	95 a0		sta $a0,x			sta 	esInt1,x
.3fd8	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d67					srcStrLen:
>0d67							.fill 	1
.3fd9					StringWrite:
.3fd9	aa		tax				tax
.3fda	48		pha				pha
.3fdb	5a		phy				phy
.3fdc	20 02 40	jsr $4002			jsr 	CheckOverwriteCurrent
.3fdf	b0 0d		bcs $3fee			bcs		_SWCopyCurrent
.3fe1	20 40 40	jsr $4040			jsr 	RequiresConcretion
.3fe4	90 0e		bcc $3ff4			bcc 	_SWWriteReference
.3fe6	20 9f 40	jsr $409f			jsr 	CheckSpecialConcretion
.3fe9	b0 09		bcs $3ff4			bcs 	_SWWriteReference
.3feb	20 54 40	jsr $4054			jsr 	AllocateHardMemory
.3fee					_SWCopyCurrent:
.3fee	20 85 40	jsr $4085			jsr 	CopyStringToHardMemory
.3ff1	4c ff 3f	jmp $3fff			jmp 	_SWExit
.3ff4					_SWWriteReference
.3ff4	a0 00		ldy #$00			ldy 	#0
.3ff6	a5 2a		lda $2a				lda 	temp0
.3ff8	91 2c		sta ($2c),y			sta 	(temp1),y
.3ffa	c8		iny				iny
.3ffb	a5 2b		lda $2b				lda 	temp0+1
.3ffd	91 2c		sta ($2c),y			sta 	(temp1),y
.3fff					_SWExit:
.3fff	7a		ply				ply
.4000	68		pla				pla
.4001	60		rts				rts
.4002					CheckOverwriteCurrent:
.4002	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.4004	b5 a1		lda $a1,x			lda 	esInt1+1,x
.4006	85 2b		sta $2b				sta 	temp0+1
.4008	b5 99		lda $99,x			lda 	esInt0+1,x
.400a	85 2a		sta $2a				sta 	temp0
.400c	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.400e	8d 67 0d	sta $0d67			sta 	srcStrLen
.4011	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.4013	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.4015	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4017	85 2d		sta $2d				sta 	temp1+1
.4019	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.401b	b1 2c		lda ($2c),y			lda 	(temp1),y
.401d	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.401f	90 1b		bcc $403c			bcc 	_COCFail 				; in hard memory.
.4021	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.4023	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.4025	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4027	85 2e		sta $2e				sta 	temp2
.4029	c8		iny				iny
.402a	b1 2c		lda ($2c),y			lda 	(temp1),y
.402c	e9 00		sbc #$00			sbc 	#0
.402e	85 2f		sta $2f				sta 	temp2+1
.4030	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.4032	b1 2e		lda ($2e),y			lda 	(temp2),y
.4034	38		sec				sec  							; maximum character capacity.
.4035	e9 02		sbc #$02			sbc 	#2
.4037	cd 67 0d	cmp $0d67			cmp 	srcStrLen 				; if >= the required length
.403a	b0 02		bcs $403e			bcs 	_COCCanReuse
.403c					_COCFail:
.403c	18		clc				clc
.403d	60		rts				rts
.403e					_COCCanReuse:
.403e	38		sec				sec
.403f	60		rts				rts
.4040					RequiresConcretion:
.4040	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.4042	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.4044	b0 0a		bcs $4050			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.4046	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.4048	f0 08		beq $4052			beq 	_RCFail 				; if not, this cannot be soft memory.
.404a	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.404c	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.404e	90 02		bcc $4052			bcc 	_RCFail 				; so concreting
.4050					_RCSucceed:
.4050	38		sec				sec
.4051	60		rts				rts
.4052					_RCFail:
.4052	18		clc				clc
.4053	60		rts				rts
.4054					AllocateHardMemory:
.4054	5a		phy				phy
.4055	ad 67 0d	lda $0d67			lda 	srcStrLen 				; characters in string
.4058	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.405a	b0 04		bcs $4060			bcs 	_AHMSetMax 				; max out that amount.
.405c	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.405e	90 02		bcc $4062			bcc 	_AHMIsOkay
.4060					_AHMSetMax:
.4060	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.4062					_AHMIsOkay:
.4062	48		pha				pha	 							; save size to be allocated
.4063	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.4065	38		sec				sec  							; and copy result to TOS as target address.
.4066	65 33		adc $33				adc 	highMemory
.4068	85 33		sta $33				sta 	highMemory
.406a	a5 34		lda $34				lda 	highMemory+1
.406c	69 ff		adc #$ff			adc 	#$FF
.406e	85 34		sta $34				sta 	highMemory+1
.4070	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.4072	68		pla				pla 							; get the total size of the storage block
.4073	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.4075	18		clc				clc
.4076	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.4078	69 01		adc #$01			adc 	#1
.407a	91 2c		sta ($2c),y			sta 	(temp1),y
.407c	a5 34		lda $34				lda 	highMemory+1
.407e	69 00		adc #$00			adc 	#0
.4080	c8		iny				iny
.4081	91 2c		sta ($2c),y			sta 	(temp1),y
.4083	7a		ply				ply
.4084	60		rts				rts
.4085					CopyStringToHardMemory:
.4085	5a		phy				phy
.4086	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.4088	b1 2c		lda ($2c),y			lda 	(temp1),y
.408a	85 2e		sta $2e				sta 	temp2
.408c	c8		iny				iny
.408d	b1 2c		lda ($2c),y			lda 	(temp1),y
.408f	85 2f		sta $2f				sta 	temp2+1
.4091	ac 67 0d	ldy $0d67			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.4094					_CSTHMLoop:
.4094	b1 2a		lda ($2a),y			lda 	(temp0),y
.4096	91 2e		sta ($2e),y			sta 	(temp2),y
.4098	88		dey				dey
.4099	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.409b	d0 f7		bne $4094			bne 	_CSTHMLoop
.409d	7a		ply				ply
.409e	60		rts				rts
.409f					CheckSpecialConcretion:
.409f	ad 67 0d	lda $0d67			lda 	srcStrLen 				; check string is null e.g. length = 0
.40a2	f0 02		beq $40a6			beq 	_CSCNullString
.40a4	18		clc				clc
.40a5	60		rts				rts
.40a6					_CSCNullString:
.40a6	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.40a8	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.40ab	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.40ad	85 2a		sta $2a				sta 	temp0
.40af	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.40b1	85 2b		sta $2b				sta 	1+(temp0)
.40b3	38		sec				sec
.40b4	60		rts				rts

;******  Return to file: string/string.asm

.40b5					stringHandler:
.40b5	7c b8 40	jmp ($40b8,x)			jmp 	(stringVectors,x)
.40b8					stringVectors:
>40b8	ca 40					.word _DummyControlHandler ; index 0
>40ba	2a 3e					.word StringChrs           ; index 2
>40bc	20 3f					.word StrClone             ; index 4
>40be	9c 3e					.word StringConcat         ; index 6
>40c0	39 3e					.word StringNull           ; index 8
>40c2	55 3e					.word STRCompare           ; index 10
>40c4	44 3f					.word CaseString           ; index 12
>40c6	87 3f					.word StringSubstring      ; index 14
>40c8	d9 3f					.word StringWrite          ; index 16
.40ca					_DummyControlHandler:
.40ca	60		rts			rts

;******  Return to file: basic.asm

.40cb					section_end_string:
.40cb					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d68					deTokeniseVector:
>0d68							.fill 	2
.0d6a					lastCharacterClass:
>0d6a							.fill 	1
.0d6b					indent:
>0d6b							.fill 	1
.40cb					ListLine:
.40cb	48		pha				pha								; enter here to list to console. sets the output vector
.40cc	a9 fa		lda #$fa			lda 	#(deTokenPrint) & $FF
.40ce	8d 68 0d	sta $0d68			sta 	deTokeniseVector
.40d1	a9 41		lda #$41			lda 	#(deTokenPrint) >> 8
.40d3	8d 69 0d	sta $0d69			sta 	1+(deTokeniseVector)
.40d6	68		pla				pla
.40d7					Detokenise:
.40d7	18		clc				clc 							; space required for line number.
.40d8	69 06		adc #$06			adc 	#6
.40da	8d 6b 0d	sta $0d6b			sta 	indent
.40dd	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.40df	8d 6a 0d	sta $0d6a			sta 	lastCharacterClass
.40e2	a2 02		ldx #$02			ldx 	#2
.40e4	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.40e6	95 a8		sta $a8,x			sta 	esInt2,x
.40e8	95 b0		sta $b0,x			sta 	esInt3,x
.40ea	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.40ec	b1 28		lda ($28),y			lda 	(codePtr),y
.40ee	95 98		sta $98,x			sta 	esInt0,x
.40f0	c8		iny				iny
.40f1	b1 28		lda ($28),y			lda 	(codePtr),y
.40f3	95 a0		sta $a0,x			sta 	esInt1,x
.40f5	a9 84		lda #$84			lda 	#LTYLineNumber
.40f7	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.40fa	a9 0a		lda #$0a			lda 	#10 					; base 10
.40fc	20 a0 41	jsr $41a0			jsr 	DTPrintInteger 			; print as integer.
.40ff	a0 00		ldy #$00			ldy 	#0 						; get length
.4101	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.4103	aa		tax				tax
.4104					_DTPadOut:
.4104	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4106	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.4109	e8		inx				inx
.410a	ec 6b 0d	cpx $0d6b			cpx 	indent
.410d	d0 f5		bne $4104			bne 	_DTPadOut
.410f	a0 03		ldy #$03			ldy 	#3 						; start position.
.4111					_DTListLoop:
.4111	b1 28		lda ($28),y			lda 	(codePtr),y
.4113	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.4115	f0 5c		beq $4173			beq 	_DTIsString
.4117	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.4119	f0 54		beq $416f			beq 	_DTIsFloat
.411b	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.411d	f0 16		beq $4135			beq 	_DTHexConstant
.411f	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.4121	d0 06		bne $4129			bne 	_DTNotEnd
.4123	a9 ff		lda #$ff			lda 	#255 					; print CR
.4125	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.4128	60		rts				rts
.4129					_DTNotEnd:
.4129	c9 00		cmp #$00			cmp 	#0
.412b	30 36		bmi $4163			bmi 	_DTIsToken
.412d	c9 40		cmp #$40			cmp 	#$40
.412f	90 38		bcc $4169			bcc 	_DTIsIdentifier
.4131	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.4133	d0 0d		bne $4142			bne 	_DTConstant
.4135					_DTHexConstant:
.4135	a9 26		lda #$26			lda 	#"&"
.4137	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.413a	c8		iny				iny
.413b	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.413d	20 16 42	jsr $4216			jsr 	DTSwitchMode
.4140	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.4142					_DTConstant:
.4142	48		pha				pha
.4143	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.4145	20 16 42	jsr $4216			jsr 	DTSwitchMode
.4148	a9 86		lda #$86			lda 	#LTYConstant
.414a	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.414d	a2 02		ldx #$02			ldx 	#2 						; get its value
.414f	8a		txa				txa
.4150	a2 10		ldx #$10		ldx	#16
.4152	20 0a 3e	jsr $3e0a		jsr	mainHandler
.4155	aa		tax				tax
.4156	68		pla				pla 							; get base back
.4157	85 32		sta $32				sta 	tempShort
.4159	5a		phy				phy
.415a	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.415c	20 a0 41	jsr $41a0			jsr 	DTPrintInteger
.415f	7a		ply				ply
.4160	4c 11 41	jmp $4111			jmp 	_DTListLoop
.4163					_DTIsToken:
.4163	20 6f 42	jsr $426f			jsr 	DTDecodeToken
.4166	4c 11 41	jmp $4111			jmp 	_DTListLoop
.4169					_DTIsIdentifier:
.4169	20 28 42	jsr $4228			jsr 	DTIdentifier
.416c	4c 11 41	jmp $4111			jmp 	_DTListLoop
.416f					_DTIsFloat:
>416f	db						.byte 	$DB
.4170	4c 6f 41	jmp $416f			jmp 	_DTIsFloat
.4173					_DTIsString:
.4173	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4175	20 16 42	jsr $4216			jsr 	DTSwitchMode
.4178	a9 81		lda #$81			lda 	#LTYString
.417a	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.417d	a9 22		lda #$22			lda 	#'"'						; open quote
.417f	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.4182	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.4184	8a		txa				txa
.4185	a2 10		ldx #$10		ldx	#16
.4187	20 0a 3e	jsr $3e0a		jsr	mainHandler
.418a	aa		tax				tax
.418b	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.418d	85 2a		sta $2a				sta 	temp0
.418f	b5 a0		lda $a0,x			lda 	esInt1,x
.4191	85 2b		sta $2b				sta 	temp0+1
.4193	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.4195	20 b1 41	jsr $41b1			jsr 	DTPrintLengthPrefix
.4198	a9 22		lda #$22			lda 	#'"'
.419a	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.419d	4c 11 41	jmp $4111			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d6c					tPrintCount:
>0d6c							.fill 	1
.41a0					DTPrintInteger:
.41a0	48		pha				pha									; save base
.41a1	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.41a3	85 2a		sta $2a				sta 	temp0
.41a5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.41a7	85 2b		sta $2b				sta 	1+(temp0)
.41a9	7a		ply				ply
.41aa	8a		txa				txa
.41ab	a2 12		ldx #$12		ldx	#18
.41ad	20 0a 3e	jsr $3e0a		jsr	mainHandler
.41b0	aa		tax				tax 								; then drop through here.
.41b1					DTPrintLengthPrefix:
.41b1	aa		tax				tax 								; A = 0 = don't case convert.
.41b2	5a		phy				phy
.41b3	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.41b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.41b7	8d 6c 0d	sta $0d6c			sta 	tPrintCount
.41ba	f0 1b		beq $41d7			beq 	_DTPLPExit 					; empty string
.41bc					_DTPLPLoop:
.41bc	c8		iny				iny 								; get next.
.41bd	b1 2a		lda ($2a),y			lda 	(temp0),y
.41bf	29 7f		and #$7f			and 	#$7F
.41c1	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.41c3	f0 0a		beq $41cf			beq 	_DTPLPNoCase
.41c5	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.41c7	90 06		bcc $41cf			bcc 	_DTPLPNoCase
.41c9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.41cb	b0 02		bcs $41cf			bcs 	_DTPLPNoCase
.41cd	49 20		eor #$20			eor 	#"A"^"a"
.41cf					_DTPLPNoCase
.41cf	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter 		; call handler
.41d2	ce 6c 0d	dec $0d6c			dec 	tPrintCount 				; do all the characters
.41d5	d0 e5		bne $41bc			bne 	_DTPLPLoop
.41d7					_DTPLPExit:
.41d7	7a		ply				ply
.41d8	60		rts				rts
.41d9					ListOutputCharacter:
.41d9	85 32		sta $32				sta 	tempShort
.41db	48		pha				pha
.41dc	da		phx				phx
.41dd	5a		phy				phy
.41de	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.41e0	c9 20		cmp #$20			cmp 	#32
.41e2	b0 0c		bcs $41f0			bcs		_LOCHiBit
.41e4	09 40		ora #$40			ora 	#64 						; conversion
.41e6	c9 40		cmp #$40			cmp 	#64							; make l/c
.41e8	f0 06		beq $41f0			beq 	_LOCHiBit
.41ea	c9 5b		cmp #$5b			cmp 	#65+26
.41ec	b0 02		bcs $41f0			bcs 	_LOCHiBit
.41ee	69 20		adc #$20			adc 	#32
.41f0					_LOCHiBit:
.41f0	20 f7 41	jsr $41f7			jsr 	_LOCCallVector				; call o/p handler routine
.41f3	7a		ply				ply
.41f4	fa		plx				plx
.41f5	68		pla				pla
.41f6					_LOCExit:
.41f6	60		rts				rts
.41f7					_LOCCallVector:
.41f7	6c 68 0d	jmp ($0d68)			jmp 	(deTokeniseVector)
.41fa					deTokenPrint:
.41fa	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.41fc	30 06		bmi $4204			bmi 	_dtpInk
.41fe	a2 16		ldx #$16		ldx	#22
.4200	20 e7 14	jsr $14e7		jsr	deviceHandler
.4203	60		rts				rts
.4204	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4206	f0 08		beq $4210			beq 	_dtpCR						; except $FF => CRLF
.4208	29 07		and #$07			and 	#7
.420a	a2 08		ldx #$08		ldx	#8
.420c	20 e7 14	jsr $14e7		jsr	deviceHandler
.420f	60		rts				rts
.4210					_dtpCR:
.4210	a2 06		ldx #$06		ldx	#6
.4212	20 e7 14	jsr $14e7		jsr	deviceHandler
.4215	60		rts				rts
.4216					DTSwitchMode:
.4216	cd 6a 0d	cmp $0d6a			cmp 	LastCharacterClass 			; if changed, update character class
.4219	f0 04		beq $421f			beq 	_DTSMNoChange
.421b	8d 6a 0d	sta $0d6a			sta 	LastCharacterClass
.421e					_DTSMExit:
.421e	60		rts				rts
.421f					_DTSMNoChange:
.421f	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.4221	f0 fb		beq $421e			beq 	_DTSMExit 					; need a space.
.4223	a9 20		lda #$20			lda 	#" "
.4225	4c d9 41	jmp $41d9			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4228					DTIdentifier:
.4228	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.422a	20 16 42	jsr $4216			jsr 	DTSwitchMode
.422d	a9 87		lda #$87			lda 	#LTYIdentifier
.422f	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.4232					_DTILoop:
.4232	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.4234	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4236	d0 02		bne $423a			bne 	_DTINotUS
.4238	a9 5f		lda #$5f			lda 	#"_"
.423a					_DTINotUS:
.423a	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.423d	c8		iny				iny
.423e	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.4240	c9 3a		cmp #$3a			cmp 	#$3A
.4242	90 ee		bcc $4232			bcc 	_DTILoop
.4244	c8		iny				iny
.4245	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4247	f0 25		beq $426e			beq 	_DTIExit 					; no postfix.
.4249	48		pha				pha
.424a	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.424c	8d 6a 0d	sta $0d6a			sta 	LastCharacterClass
.424f	a9 82		lda #$82			lda 	#LTYPunctuation
.4251	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.4254	68		pla				pla
.4255	c9 3b		cmp #$3b			cmp 	#$3B
.4257	f0 10		beq $4269			beq 	_DTIArray
.4259	4a		lsr a				lsr 	a 							; array flag in C
.425a	08		php				php
.425b	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.425d	f0 02		beq $4261			beq 	_DTIDollar
.425f	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.4261					_DTIDollar:
.4261	49 24		eor #$24			eor 	#"$"
.4263	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.4266	28		plp				plp
.4267	90 05		bcc $426e			bcc 	_DTIExit
.4269					_DTIArray:
.4269	a9 28		lda #$28			lda 	#"("
.426b	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.426e					_DTIExit:
.426e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.426f					DTDecodeToken:
.426f	a2 00		ldx #$00			ldx 	#0 							; table number to use
.4271	b1 28		lda ($28),y			lda 	(codePtr),y
.4273	c9 84		cmp #$84			cmp 	#$84
.4275	b0 05		bcs $427c			bcs 	_DTNotShift
.4277	29 03		and #$03			and 	#3 							; get the shift 1..3
.4279	0a		asl a				asl 	a 							; put 2 x in X
.427a	aa		tax				tax
.427b	c8		iny				iny
.427c					_DTNotShift:
.427c	bd 72 45	lda $4572,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.427f	85 2a		sta $2a				sta 	temp0 						; point into temp0
.4281	bd 73 45	lda $4573,x			lda 	TokenTableAddress+1,x
.4284	85 2b		sta $2b				sta 	temp0+1
.4286	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.4288	c8		iny				iny 								; consume it.
.4289	aa		tax				tax
.428a	5a		phy				phy
.428b					_DTFindText:
.428b	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.428d	f0 11		beq $42a0			beq 	_DTFoundText
.428f	ca		dex				dex
.4290	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.4292	38		sec				sec
.4293	b1 2a		lda ($2a),y			lda 	(temp0),y
.4295	65 2a		adc $2a				adc 	temp0
.4297	85 2a		sta $2a				sta 	temp0
.4299	90 f0		bcc $428b			bcc 	_DTFindText
.429b	e6 2b		inc $2b				inc 	temp0+1
.429d	4c 8b 42	jmp $428b			jmp 	_DTFindText
.42a0					_DTFoundText:
.42a0	a0 01		ldy #$01			ldy 	#1 							; get first character
.42a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.42a4	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.42a6	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.42a8	90 11		bcc $42bb			bcc 	_DTIsPunctuation
.42aa	c9 5b		cmp #$5b			cmp 	#"Z"+1
.42ac	b0 0d		bcs $42bb			bcs 	_DTIsPunctuation
.42ae	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.42b0	20 16 42	jsr $4216			jsr 	DTSwitchMode
.42b3	a9 83		lda #$83			lda 	#LTYKeyword
.42b5	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.42b8	4c c5 42	jmp $42c5			jmp 	_DTPrint
.42bb					_DTIsPunctuation:
.42bb	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.42bd	20 16 42	jsr $4216			jsr 	DTSwitchMode
.42c0	a9 82		lda #$82			lda 	#LTYPunctuation
.42c2	20 d9 41	jsr $41d9			jsr 	ListOutputCharacter
.42c5					_DTPrint:
.42c5	a9 01		lda #$01			lda 	#1 							; fix case.
.42c7	20 b1 41	jsr $41b1			jsr 	DTPrintLengthPrefix 		; print it out.
.42ca	a0 00		ldy #$00			ldy 	#0
.42cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.42ce	a8		tay				tay
.42cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.42d1	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.42d3	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.42d5	90 04		bcc $42db			bcc 	_DTIsNowPunctuation
.42d7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.42d9	90 05		bcc $42e0			bcc 	_DTPExit
.42db					_DTIsNowPunctuation:
.42db	a9 01		lda #$01			lda 	#1
.42dd	8d 6a 0d	sta $0d6a			sta		LastCharacterClass
.42e0					_DTPExit:
.42e0	7a		ply				ply
.42e1	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d6d					currentSet:
>0d6d							.fill 	1
.42e2					TokenSearch:
.42e2	da		phx				phx
.42e3	5a		phy				phy
.42e4	a9 00		lda #$00			lda 	#0
.42e6	8d 6d 0d	sta $0d6d			sta 	currentSet
.42e9					_TSLoop:
.42e9	ad 6d 0d	lda $0d6d			lda 	currentSet 					; 2 x currentset in X
.42ec	0a		asl a				asl 	a
.42ed	aa		tax				tax
.42ee	bd 72 45	lda $4572,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.42f1	85 2a		sta $2a				sta 	temp0
.42f3	bd 73 45	lda $4573,x			lda 	TokenTableAddress+1,x
.42f6	85 2b		sta $2b				sta 	temp0+1
.42f8	20 1d 43	jsr $431d			jsr 	TokenSearchOne 				; search one table
.42fb	b0 0d		bcs $430a			bcs 	_TSFound 					; found a token.
.42fd	ee 6d 0d	inc $0d6d			inc 	currentSet 					; next set
.4300	ad 6d 0d	lda $0d6d			lda 	currentSet
.4303	c9 04		cmp #$04			cmp 	#4
.4305	d0 e2		bne $42e9			bne 	_TSLoop 					; back if not done all four.
.4307	18		clc				clc 								; clear carry and exit
.4308	90 10		bcc $431a			bcc 	_TSExit
.430a					_TSFound:
.430a	48		pha				pha 								; save token
.430b	ad 6d 0d	lda $0d6d			lda 	currentSet					; if set zero no shift
.430e	f0 05		beq $4315			beq 	_TSNoShift
.4310	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.4312	20 ce 43	jsr $43ce			jsr 	TokenWrite
.4315					_TSNoShift:
.4315	68		pla				pla 								; get token back
.4316	20 ce 43	jsr $43ce			jsr 	TokenWrite 					; write it
.4319	38		sec				sec 								; carry set indicating success
.431a					_TSExit:
.431a	7a		ply				ply
.431b	fa		plx				plx
.431c	60		rts				rts
.431d					TokenSearchOne:
.431d	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.431f					_TSOLoop:
.431f	a0 00		ldy #$00			ldy 	#0
.4321	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4323	f0 26		beq $434b			beq 	_TSOFail 					; if zero, end of table
.4325	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4328	f0 11		beq $433b			beq 	_TSOCheckText
.432a					_TSONext:
.432a	e8		inx				inx 								; bump token
.432b	a0 00		ldy #$00			ldy 	#0							; get length
.432d	b1 2a		lda ($2a),y			lda 	(temp0),y
.432f	38		sec				sec
.4330	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4332	85 2a		sta $2a				sta 	temp0
.4334	90 e9		bcc $431f			bcc 	_TSOLoop
.4336	e6 2b		inc $2b				inc 	temp0+1
.4338	4c 1f 43	jmp $431f			jmp 	_TSOLoop
.433b					_TSOCheckText:
.433b	a8		tay				tay 								; compare length downto 1.
.433c					_TSOCheckLoop:
.433c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.433e	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4341	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4343	d0 e5		bne $432a			bne 	_TSONext 					; different goto next.
.4345	88		dey				dey 								; do all
.4346	d0 f4		bne $433c			bne 	_TSOCheckLoop
.4348	8a		txa				txa 								; return token in A and carry set
.4349	38		sec				sec
.434a	60		rts				rts
.434b					_TSOFail:
.434b	18		clc				clc
.434c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.434d					TokTest:
.434d	a2 ff		ldx #$ff				ldx 	#$FF
.434f	9a		txs					txs
.4350	a9 6d		lda #$6d			lda 	#(TokenText1) & $FF
.4352	85 28		sta $28				sta 	codePtr
.4354	a9 43		lda #$43			lda 	#(TokenText1) >> 8
.4356	85 29		sta $29				sta 	1+(codePtr)
.4358	20 6d 43	jsr $436d				jsr 	Tokenise
.435b	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.435d	bd 6d 43	lda $436d,x	_TokCheck:	lda 	TokenBytes1,x
.4360	dd 71 0d	cmp $0d71,x				cmp 	tokenBuffer,x
.4363	d0 fe		bne $4363	_TokFail:	bne 	_TokFail	 		; error.
.4365	e8		inx					inx
.4366	c9 80		cmp #$80				cmp 	#$80
.4368	d0 f3		bne $435d				bne 	_TokCheck
.436a	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.436d					TokenText1:
.436d					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d6e					tokenHeader:
>0d6e							.fill 	3
.0d71					tokenBuffer:
>0d71							.fill 	256
.0e71					tokenBufferIndex:
>0e71							.fill 	1
.436d					Tokenise:
.436d	20 e5 43	jsr $43e5			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.4370					TokeniseASCIIZ:
.4370	20 f6 43	jsr $43f6			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4373	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4375	8d 71 0e	sta $0e71			sta 	tokenBufferIndex
.4378	a8		tay				tay 								; start pointer
.4379	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.437b	8d 71 0d	sta $0d71			sta 	tokenBuffer
.437e					_TokLoop:
.437e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4380	f0 46		beq $43c8			beq 	_TokExit 					; if zero, then exit.
.4382	c8		iny				iny 								; skip over spaces.
.4383	c9 20		cmp #$20			cmp 	#" "
.4385	f0 f7		beq $437e			beq 	_TokLoop
.4387	88		dey				dey 								; point back to character.
.4388	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.438a	f0 18		beq $43a4			beq 	_TokHexConst
.438c	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.438e	f0 23		beq $43b3			beq 	_TokQString
.4390	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.4392	b0 26		bcs $43ba			bcs 	_TokPunctuation
.4394	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.4396	b0 29		bcs $43c1			bcs 	_TokIdentifier
.4398	c9 3a		cmp #$3a			cmp 	#"9"+1
.439a	b0 1e		bcs $43ba			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.439c	c9 30		cmp #$30			cmp 	#"0"
.439e	90 1a		bcc $43ba			bcc 	_TokPunctuation 			; < 0, punctuation.
.43a0	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.43a2	d0 08		bne $43ac			bne 	_TokConst
.43a4					_TokHexConst:
.43a4	c8		iny				iny									; consume token.
.43a5	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.43a7	20 ce 43	jsr $43ce			jsr 	TokenWrite
.43aa	a9 10		lda #$10			lda 	#16
.43ac					_TokConst:
.43ac	20 b2 44	jsr $44b2			jsr 	TokeniseInteger
.43af	b0 cd		bcs $437e			bcs 	_TokLoop
.43b1	90 18		bcc $43cb			bcc 	_TokFail
.43b3					_TokQString:
.43b3	20 46 45	jsr $4546			jsr 	TokeniseString
.43b6	b0 c6		bcs $437e			bcs 	_TokLoop
.43b8	90 11		bcc $43cb			bcc 	_TokFail
.43ba					_TokPunctuation:
.43ba	20 25 45	jsr $4525			jsr 	TokenisePunctuation
.43bd	b0 bf		bcs $437e			bcs 	_TokLoop
.43bf	90 0a		bcc $43cb			bcc 	_TokFail
.43c1					_TokIdentifier:
.43c1	20 25 44	jsr $4425			jsr 	TokeniseIdentifier
.43c4	b0 b8		bcs $437e			bcs 	_TokLoop
.43c6	90 03		bcc $43cb			bcc 	_TokFail
.43c8					_TokExit:
.43c8	a9 01		lda #$01			lda 	#1
.43ca	60		rts				rts
.43cb					_TokFail:
.43cb	a9 00		lda #$00			lda 	#0
.43cd	60		rts				rts
.43ce					TokenWrite:
.43ce	85 32		sta $32				sta 	tempShort 					; save XA
.43d0	48		pha				pha
.43d1	da		phx				phx
.43d2	a5 32		lda $32				lda 	tempShort
.43d4	ae 71 0e	ldx $0e71			ldx 	tokenBufferIndex 			; geet index
.43d7	9d 71 0d	sta $0d71,x			sta 	tokenBuffer,x 				; write byte to buffer
.43da	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.43dc	9d 72 0d	sta $0d72,x			sta 	tokenBuffer+1,x
.43df	ee 71 0e	inc $0e71			inc 	tokenBufferIndex 			; bump index
.43e2	fa		plx				plx
.43e3	68		pla				pla
.43e4	60		rts				rts
.43e5					TokeniseMakeASCIIZ:
.43e5	a0 00		ldy #$00			ldy 	#0							; get length of string.
.43e7	b1 28		lda ($28),y			lda 	(codePtr),y
.43e9	a8		tay				tay
.43ea	c8		iny				iny 								; +1, the NULL goes here.
.43eb	a9 00		lda #$00			lda 	#0
.43ed	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.43ef	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.43f1	d0 02		bne $43f5			bne 	_TMKAExit
.43f3	e6 29		inc $29				inc 	codePtr+1
.43f5					_TMKAExit:
.43f5	60		rts				rts
.43f6					TokeniseFixCase:
.43f6	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.43f8	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.43fa					_TFCFlipQ:
.43fa	8a		txa				txa
.43fb	49 01		eor #$01			eor 	#1
.43fd	aa		tax				tax
.43fe					_TFCLoop:
.43fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4400	f0 22		beq $4424			beq 	_TFCExit 					; if zero exit.
.4402	c9 20		cmp #$20			cmp 	#32 						; if control
.4404	90 1a		bcc $4420			bcc 	_TFCControl
.4406	c8		iny				iny 								; preconsume
.4407	c9 22		cmp #$22			cmp 	#'"'
.4409	f0 ef		beq $43fa			beq 	_TFCFlipQ
.440b	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.440d	90 ef		bcc $43fe			bcc 	_TFCLoop
.440f	c9 7b		cmp #$7b			cmp 	#"z"+1
.4411	b0 eb		bcs $43fe			bcs 	_TFCLoop
.4413	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4415	d0 e7		bne $43fe			bne 	_TFCLoop
.4417	88		dey				dey
.4418	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.441a					_TFCWrite:
.441a	91 28		sta ($28),y			sta 	(codePtr),y
.441c	c8		iny				iny
.441d	4c fe 43	jmp $43fe			jmp 	_TFCLoop
.4420					_TFCControl:
.4420	a9 20		lda #$20			lda 	#" "
.4422	d0 f6		bne $441a			bne 	_TFCWrite
.4424					_TFCExit:
.4424	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4425					TokeniseIdentifier:
.4425	a2 00		ldx #$00			ldx 	#0
.4427					_TICopyID:
.4427	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4429	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.442b	f0 16		beq $4443			beq 	_TICopyUnderscore
.442d	c9 2e		cmp #$2e			cmp 	#"."
.442f	f0 14		beq $4445			beq 	_TICopyIn
.4431	c9 30		cmp #$30			cmp 	#"0"
.4433	90 1b		bcc $4450			bcc 	_TIEndCopy
.4435	c9 3a		cmp #$3a			cmp 	#"9"+1
.4437	90 0c		bcc $4445			bcc 	_TICopyIn
.4439	c9 41		cmp #$41			cmp 	#"A"
.443b	90 13		bcc $4450			bcc 	_TIEndCopy
.443d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.443f	b0 0f		bcs $4450			bcs		_TIEndCopy
.4441	90 02		bcc $4445			bcc 	_TICopyIn
.4443					_TICopyUnderScore:
.4443	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4445					_TICopyIn:
.4445	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4446	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4449	8e cf 0a	stx $0acf			stx 	convertBuffer
.444c	c8		iny				iny 								; next character
.444d	4c 27 44	jmp $4427			jmp 	_TICopyID 					; loop round
.4450					_TIEndCopy:
.4450	a9 24		lda #$24			lda 	#"$"
.4452	20 a5 44	jsr $44a5			jsr 	TIDCheckCopy
.4455	a9 23		lda #$23			lda 	#"#"
.4457	20 a5 44	jsr $44a5			jsr 	TIDCheckCopy
.445a	a9 28		lda #$28			lda 	#"("
.445c	20 a5 44	jsr $44a5			jsr 	TIDCheckCopy
.445f	20 e2 42	jsr $42e2			jsr 	TokenSearch 				; is it a token
.4462	b0 3f		bcs $44a3			bcs 	_TIExit 					; if so, then exit.
.4464	5a		phy				phy
.4465	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4467	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.446a	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.446d	c9 28		cmp #$28			cmp 	#"("
.446f	d0 02		bne $4473			bne 	_TINotArray
.4471	ca		dex				dex 								; yes, remove it and convert to array.
.4472	c8		iny				iny
.4473					_TINotArray:
.4473	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4476	c9 24		cmp #$24			cmp 	#"$"
.4478	d0 03		bne $447d			bne 	_TINotString
.447a	ca		dex				dex
.447b	c8		iny				iny
.447c	c8		iny				iny
.447d					_TINotString:
.447d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4480	c9 23		cmp #$23			cmp 	#"#"
.4482	d0 05		bne $4489			bne 	_TINotFloat
.4484	ca		dex				dex
.4485	c8		iny				iny
.4486	c8		iny				iny
.4487	c8		iny				iny
.4488	c8		iny				iny
.4489					_TINotFloat:
.4489	e8		inx				inx 								; write end marker for identifier.
.448a	98		tya				tya
.448b	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.448e	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.4491	a2 01		ldx #$01			ldx 	#1
.4493					_TIOutput:
.4493	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4496	29 3f		and #$3f			and 	#$3F
.4498	48		pha				pha
.4499	20 ce 43	jsr $43ce			jsr 	TokenWrite
.449c	e8		inx				inx
.449d	68		pla				pla
.449e	c9 3a		cmp #$3a			cmp 	#$3A
.44a0	90 f1		bcc $4493			bcc 	_TIOutput
.44a2	7a		ply				ply
.44a3					_TIExit:
.44a3	38		sec				sec 								; this can't fail.
.44a4	60		rts				rts
.44a5					TIDCheckCopy:
.44a5	d1 28		cmp ($28),y			cmp 	(codePtr),y
.44a7	d0 08		bne $44b1			bne 	_TIDCCExit
.44a9	e8		inx				inx
.44aa	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.44ad	8e cf 0a	stx $0acf			stx 	convertBuffer
.44b0	c8		iny				iny
.44b1					_TIDCCExit:
.44b1	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.44b2					TokeniseInteger:
.44b2	85 2c		sta $2c				sta 	temp1 						; save base
.44b4	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.44b6	8e cf 0a	stx $0acf			stx 	convertBuffer
.44b9					_TIGetChars:
.44b9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.44bb	c9 30		cmp #$30			cmp 	#"0"
.44bd	90 1f		bcc $44de			bcc 	_TIEndGet
.44bf	c9 3a		cmp #$3a			cmp 	#"9"+1
.44c1	90 10		bcc $44d3			bcc 	_TIHaveChar
.44c3	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.44c5	c9 0a		cmp #$0a			cmp 	#10
.44c7	f0 15		beq $44de			beq 	_TIEndGet
.44c9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.44cb	c9 41		cmp #$41			cmp 	#"A"
.44cd	90 0f		bcc $44de			bcc 	_TIEndGet
.44cf	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44d1	b0 0b		bcs $44de			bcs 	_TIEndGet
.44d3					_TIHaveChar:
.44d3	e8		inx				inx 								; write into buffer.
.44d4	8e cf 0a	stx $0acf			stx 	convertBuffer
.44d7	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.44da	c8		iny				iny 								; next char
.44db	4c b9 44	jmp $44b9			jmp 	_TIGetChars
.44de					_TIEndGet:
.44de	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.44e0	f0 1a		beq $44fc			beq 	_TIFail
.44e2	5a		phy				phy
.44e3	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.44e5	85 2a		sta $2a				sta 	temp0
.44e7	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.44e9	85 2b		sta $2b				sta 	1+(temp0)
.44eb	a9 00		lda #$00			lda 	#0 							; stack level 0
.44ed	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.44ef	a2 1a		ldx #$1a		ldx	#26
.44f1	20 0a 3e	jsr $3e0a		jsr	mainHandler
.44f4	7a		ply				ply
.44f5	90 05		bcc $44fc			bcc 	_TIFail 					; didn't convert.
.44f7	20 fe 44	jsr $44fe			jsr 	TIRecursiveOut 				; recursive output ?
.44fa	38		sec				sec
.44fb	60		rts				rts
.44fc					_TIFail:
.44fc	18		clc				clc
.44fd	60		rts				rts
.44fe					TIRecursiveOut:
.44fe	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4500	29 3f		and #$3f			and 	#$3F
.4502	09 40		ora #$40			ora 	#$40
.4504	48		pha				pha
.4505	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.4507	29 c0		and #$c0			and 	#$C0
.4509	05 a0		ora $a0				ora 	esInt1
.450b	05 a8		ora $a8				ora 	esInt2
.450d	05 b0		ora $b0				ora 	esInt3
.450f	f0 10		beq $4521			beq 	_TIRONoRecursion
.4511	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4513					_TIROShift:
.4513	46 b0		lsr $b0				lsr 	esInt3
.4515	66 a8		ror $a8				ror 	esInt2
.4517	66 a0		ror $a0				ror 	esInt1
.4519	66 98		ror $98				ror 	esInt0
.451b	ca		dex				dex
.451c	d0 f5		bne $4513			bne 	_TIROShift
.451e	20 fe 44	jsr $44fe			jsr 	TIRecursiveOut 				; call recursively
.4521					_TIRONoRecursion:
.4521	68		pla				pla 								; pull the old bit.
.4522	4c ce 43	jmp $43ce			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4525					TokenisePunctuation:
.4525	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4527	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.452a	c8		iny				iny
.452b	b1 28		lda ($28),y			lda 	(codePtr),y
.452d	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4530	c8		iny				iny 								; Y is +2
.4531	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4533	8d cf 0a	sta $0acf			sta 	convertBuffer
.4536	20 e2 42	jsr $42e2			jsr 	TokenSearch 				; search for that token.
.4539	b0 0a		bcs $4545			bcs 	_TIFound
.453b	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.453e	88		dey				dey 								; Y is now +1
.453f	20 e2 42	jsr $42e2			jsr 	TokenSearch 				; search for that token.
.4542	b0 01		bcs $4545			bcs 	_TIFound
.4544	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4545					_TIFound:
.4545	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4546					TokeniseString:
.4546	c8		iny				iny 								; skip opening quote
.4547	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4549	84 2a		sty $2a				sty 	temp0 						; save start.
.454b					_TSGetLength:
.454b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.454d	f0 21		beq $4570			beq 	_TSFail						; end of line, fail
.454f	c8		iny				iny
.4550	e8		inx				inx
.4551	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4553	d0 f6		bne $454b			bne 	_TSGetLength
.4555	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4557	20 ce 43	jsr $43ce			jsr 	TokenWrite
.455a	8a		txa				txa 								; output length
.455b	20 ce 43	jsr $43ce			jsr 	TokenWrite
.455e	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4560	e0 00		cpx #$00			cpx 	#0 							; check ended
.4562	f0 09		beq $456d			beq 	_TSExit
.4564					_TSOutput:
.4564	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4566	20 ce 43	jsr $43ce			jsr 	TokenWrite
.4569	c8		iny				iny
.456a	ca		dex				dex
.456b	d0 f7		bne $4564			bne 	_TSOutput
.456d					_TSExit:
.456d	c8		iny				iny 								; skip ending quote
.456e	38		sec				sec 								; return CS.
.456f	60		rts				rts
.4570					_TSFail:
.4570	18		clc				clc
.4571	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4572					TokenTableAddress:
>4572	7a 45						.word 	Group0Text
>4574	52 47						.word 	Group1Text
>4576	9f 48						.word 	Group2Text
>4578	f0 48						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.457a					Group0Text:
>457a	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>457e	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4581	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>4585	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>4588	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>458b	01 be					.byte $01,$be                          ; $8b >
>458d	01 bc					.byte $01,$bc                          ; $8c <
>458f	01 bd					.byte $01,$bd                          ; $8d =
>4591	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>4594	01 ab					.byte $01,$ab                          ; $8f +
>4596	01 ad					.byte $01,$ad                          ; $90 -
>4598	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>459b	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>459e	01 aa					.byte $01,$aa                          ; $93 *
>45a0	01 af					.byte $01,$af                          ; $94 /
>45a2	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>45a6	01 de					.byte $01,$de                          ; $96 ^
>45a8	01 a1					.byte $01,$a1                          ; $97 !
>45aa	01 bf					.byte $01,$bf                          ; $98 ?
>45ac	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>45b3	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>45b9	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>45bd	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>45c0	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>45c8	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>45ce	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>45d3	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>45d8	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>45dd	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>45e3	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>45eb	01 a8					.byte $01,$a8                          ; $a4 (
>45ed	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>45f2	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>45f7	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>45fc	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>4604	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4609	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>460e	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4614	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4619	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>461e	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4623	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>462a	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4631	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4636	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>463d	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4644	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>464a	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4651	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4657	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>465f	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4665	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>466a	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4670	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4676	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>467c	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4681	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>4686	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>468d	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>4694	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>469c	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>46a4	01 c0					.byte $01,$c0                          ; $c3 @
>46a6	01 fe					.byte $01,$fe                          ; $c4 ~
>46a8	01 a6					.byte $01,$a6                          ; $c5 &
>46aa	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>46b0	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>46b8	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>46bc	01 a9					.byte $01,$a9                          ; $c9 )
>46be	01 ba					.byte $01,$ba                          ; $ca :
>46c0	01 ac					.byte $01,$ac                          ; $cb ,
>46c2	01 bb					.byte $01,$bb                          ; $cc ;
>46c4	01 a7					.byte $01,$a7                          ; $cd '
>46c6	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>46c9	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>46ce	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>46d3	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>46d9	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>46dd	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>46e1	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>46e5	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>46eb	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>46f0	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>46f4	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>46fa	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>46ff	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4705	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4708	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>470d	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4714	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4719	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>471e	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4723	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4727	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>472d	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4731	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4738	01 ae					.byte $01,$ae                          ; $e5 .
>473a	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>473f	01 a3					.byte $01,$a3                          ; $e7 #
>4741	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4747	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>474c	04 54 59 50 c5				.byte $04,$54,$59,$50,$c5              ; $ea type
>4751	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4752					Group1Text:
>4752	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4757	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>475c	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4761	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4765	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>476b	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>476f	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4774	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>477c	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4780	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4785	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>478a	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>478f	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4795	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>479c	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>47a0	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>47a6	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>47aa	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>47ae	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>47b2	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>47b6	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>47ba	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>47be	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>47c2	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>47c6	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>47ca	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>47ce	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>47d2	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>47d6	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>47da	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>47de	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>47e2	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>47e6	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>47ea	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>47ee	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>47f2	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>47f6	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>47fa	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>47fe	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4802	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4806	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>480a	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>480e	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4812	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4816	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>481a	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>481e	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4822	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4826	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>482a	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>482e	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4832	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4836	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>483a	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>483e	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4842	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4846	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>484a	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>484e	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4852	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4856	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>485a	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>485e	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4862	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4866	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>486a	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>486e	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4872	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4876	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>487a	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>487e	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4882	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4886	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>488a	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>488e	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4892	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4896	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>489a	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>489e	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.489f					Group2Text:
>489f	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>48a5	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>48ab	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>48b1	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>48b6	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>48be	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>48c5	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>48c9	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>48ce	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>48d4	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>48d9	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>48de	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>48e3	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>48e9	05 53 4f 55 4e c4			.byte $05,$53,$4f,$55,$4e,$c4          ; $93 sound
>48ef	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.48f0					Group3Text:
>48f0	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>48f7	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>48fe	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4906	58 a8
>4908	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4910	59 a8
>4912	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4917	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>491e	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4925	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>492c	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4933	08 50 4c 41 59 49 4e 47			.byte $08,$50,$4c,$41,$59,$49,$4e,$47,$a8 ; $8f playing(
>493b	a8
>493c	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.493d					tokeniserHandler:
.493d	7c 40 49	jmp ($4940,x)			jmp 	(tokeniserVectors,x)
.4940					tokeniserVectors:
>4940	4c 49					.word _DummyControlHandler ; index 0
>4942	d7 40					.word Detokenise           ; index 2
>4944	cb 40					.word ListLine             ; index 4
>4946	4d 43					.word TokTest              ; index 6
>4948	6d 43					.word Tokenise             ; index 8
>494a	70 43					.word TokeniseASCIIZ       ; index 10
.494c					_DummyControlHandler:
.494c	60		rts			rts

;******  Return to file: basic.asm

.494d					section_end_tokeniser:
.494d					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.494d					AccessArray:
.494d	da		phx				phx
.494e	e8		inx				inx
.494f	20 13 4a	jsr $4a13			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4952	fa		plx				plx
.4953	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4955	85 2a		sta $2a				sta 	temp0
.4957	b5 a0		lda $a0,x			lda 	esInt1,x
.4959	85 2b		sta $2b				sta 	temp0+1
.495b	da		phx				phx
.495c	5a		phy				phy
.495d					_AAFollow:
.495d	a0 00		ldy #$00			ldy 	#0
.495f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4961	48		pha				pha
.4962	c8		iny				iny
.4963	b1 2a		lda ($2a),y			lda 	(temp0),y
.4965	85 2b		sta $2b				sta 	temp0+1
.4967	68		pla				pla
.4968	85 2a		sta $2a				sta 	temp0
.496a	e8		inx				inx 								; advance to next stack slot.
.496b	a0 00		ldy #$00			ldy 	#0
.496d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.496f	d5 98		cmp $98,x			cmp 	esInt0,x
.4971	c8		iny				iny
.4972	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4974	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4976	29 7f		and #$7f			and 	#$7F
.4978	f5 a0		sbc $a0,x			sbc 	esInt1,x
.497a	90 4e		bcc $49ca			bcc 	_AABadIndex 				; failed on index if max index < required.
.497c	18		clc				clc
.497d	a5 2a		lda $2a				lda 	temp0
.497f	69 02		adc #$02			adc 	#2
.4981	85 2a		sta $2a				sta 	temp0
.4983	90 02		bcc $4987			bcc 	_AANoCarry
.4985	e6 2b		inc $2b				inc 	temp0+1
.4987					_AANoCarry:
.4987	b5 98		lda $98,x			lda 	esInt0,x
.4989	85 2e		sta $2e				sta 	temp2
.498b	b5 a0		lda $a0,x			lda 	esInt1,x
.498d	85 2f		sta $2f				sta 	temp2+1
.498f	ac 74 0e	ldy $0e74			ldy 	varType
.4992	b9 6d 4a	lda $4a6d,y			lda 	CAActualSize-$3A,y
.4995	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4997	30 02		bmi $499b			bmi 	_AANotPointer
.4999	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.499b					_AANotPointer:
.499b	20 17 4b	jsr $4b17			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.499e	18		clc				clc
.499f	a5 2a		lda $2a				lda 	temp0
.49a1	65 2e		adc $2e				adc 	temp2
.49a3	85 2a		sta $2a				sta 	temp0
.49a5	a5 2b		lda $2b				lda 	temp0+1
.49a7	65 2f		adc $2f				adc 	temp2+1
.49a9	85 2b		sta $2b				sta 	temp0+1
.49ab	b5 91		lda $91,x			lda 	esType+1,x
.49ad	30 07		bmi $49b6			bmi 	_AAUsedAllIndices
.49af	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.49b1	10 12		bpl $49c5			bpl 	_AABadDepth 				; no, too many indexes.
.49b3	4c 5d 49	jmp $495d			jmp 	_AAFollow 					; otherwise follow them.
.49b6					_AAUsedAllIndices:
.49b6	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.49b8	30 0b		bmi $49c5			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.49ba	7a		ply				ply
.49bb	fa		plx				plx
.49bc	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.49be	95 98		sta $98,x			sta 	esInt0,x
.49c0	a5 2b		lda $2b				lda 	temp0+1
.49c2	95 a0		sta $a0,x			sta 	esInt1,x
.49c4	60		rts				rts
.49c5					_AABadDepth:
.49c5	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.49c7	20 09 15	jsr $1509		jsr	errorHandler
.49ca					_AABadIndex:
.49ca	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.49cc	20 09 15	jsr $1509		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e72					elementSize:
>0e72							.fill	 1
.49cf					CreateArray:
.49cf	20 a4 4b	jsr $4ba4			jsr 	AccessSetup 				; set up the basic stuff, hashtables and so on.
.49d2	ad 74 0e	lda $0e74			lda 	varType 					; is the variable type an array
.49d5	4a		lsr a				lsr 	a
.49d6	90 36		bcc $4a0e			bcc 	CANotArray 					; no, cause an error.
.49d8	20 a6 4c	jsr $4ca6			jsr 	FindVariable 				; does the variable exist already
.49db	b0 2c		bcs $4a09			bcs 	CAFound 					; if so, error cannot redefine it.
.49dd	20 df 4b	jsr $4bdf			jsr 	CreateVariable 				; create the variable entry.
.49e0	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.49e2	48		pha				pha
.49e3	a5 2b		lda $2b				lda 	temp0+1
.49e5	48		pha				pha
.49e6	a2 00		ldx #$00			ldx 	#0
.49e8	20 13 4a	jsr $4a13			jsr 	GetArrayDimensions 			; get the array dimensions
.49eb	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.49ed	20 43 4a	jsr $4a43			jsr 	CreateArrayLevel 			; level to YA
.49f0	aa		tax				tax 								; level now in YX
.49f1	68		pla				pla 								; get address back to temp0 to write.
.49f2	85 2b		sta $2b				sta 	temp0+1
.49f4	68		pla				pla
.49f5	85 2a		sta $2a				sta 	temp0
.49f7	98		tya				tya 								; write YX there (address in original record)
.49f8	a0 06		ldy #$06			ldy 	#6
.49fa	91 2a		sta ($2a),y			sta 	(temp0),y
.49fc	88		dey				dey
.49fd	8a		txa				txa
.49fe	91 2a		sta ($2a),y			sta 	(temp0),y
.4a00	ac 75 0e	ldy $0e75			ldy 	varEnd 						; restore Y and exit.
.4a03	60		rts				rts
.4a04					CASize:
.4a04	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4a06	20 09 15	jsr $1509		jsr	errorHandler
.4a09					CAFound:
.4a09	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4a0b	20 09 15	jsr $1509		jsr	errorHandler
.4a0e					CANotArray:
.4a0e	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4a10	20 09 15	jsr $1509		jsr	errorHandler
.4a13					GetArrayDimensions:
.4a13	ad 74 0e	lda $0e74			lda 	varType 					; push variable type on the stack.
.4a16	48		pha				pha
.4a17	ac 75 0e	ldy $0e75			ldy 	varEnd
.4a1a					_CAGetDimensions:
.4a1a	8a		txa				txa 								; get the next level
.4a1b	a2 0a		ldx #$0a		ldx	#10
.4a1d	20 0a 3e	jsr $3e0a		jsr	mainHandler
.4a20	aa		tax				tax
.4a21	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4a23	29 e0		and #$e0			and 	#$E0
.4a25	15 a8		ora $a8,x			ora 	esInt2,x
.4a27	15 b0		ora $b0,x			ora 	esInt3,x
.4a29	d0 d9		bne $4a04			bne 	CASize
.4a2b	e8		inx				inx 								; next level.
.4a2c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4a2e	c8		iny				iny
.4a2f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4a31	f0 e7		beq $4a1a			beq 	_CAGetDimensions
.4a33	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4a35	d0 cd		bne $4a04			bne 	CASize
.4a37	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4a39	95 90		sta $90,x			sta 	esType,x 					; dimensions there are, it marks the end.
.4a3b	68		pla				pla 								; restore the variable type ($3A-$3F)
.4a3c	8d 74 0e	sta $0e74			sta 	varType
.4a3f	8c 75 0e	sty $0e75			sty 	varEnd 						; save exit Y value, after dimensions
.4a42	60		rts				rts
.4a43					CreateArrayLevel:
.4a43	ac 74 0e	ldy $0e74			ldy 	varType
.4a46	b9 6d 4a	lda $4a6d,y			lda 	CAActualSize-$3A,y 			; $3A is the first type marker.
.4a49	8d 72 0e	sta $0e72			sta 	elementSize 				; get element size this level.
.4a4c	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4a4e	30 05		bmi $4a55			bmi 	_CANotPointer 				; then its values, keep elementsize
.4a50	a9 02		lda #$02			lda 	#2 							; use array of pointers, each element is 2.
.4a52	8d 72 0e	sta $0e72			sta 	elementSize
.4a55					_CANotPointer:
.4a55	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4a57	85 2a		sta $2a				sta 	temp0
.4a59	48		pha				pha
.4a5a	a5 36		lda $36				lda 	lowMemory+1
.4a5c	85 2b		sta $2b				sta 	temp0+1
.4a5e	48		pha				pha
.4a5f	20 e0 4a	jsr $4ae0			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4a62	a0 00		ldy #$00			ldy 	#0
.4a64	b5 98		lda $98,x			lda 	esInt0,x
.4a66	91 2a		sta ($2a),y			sta 	(temp0),y
.4a68	c8		iny				iny
.4a69	b5 a0		lda $a0,x			lda 	esInt1,x
.4a6b	91 2a		sta ($2a),y			sta 	(temp0),y
.4a6d	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4a6f	30 06		bmi $4a77			bmi 	_CALNotLast
.4a71	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4a73	09 80		ora #$80			ora 	#$80
.4a75	91 2a		sta ($2a),y			sta 	(temp0),y
.4a77					_CALNotLast:
.4a77	a9 02		lda #$02			lda 	#2
.4a79	20 9d 4a	jsr $4a9d			jsr 	_CALAddTemp0
.4a7c	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4a7e	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4a80	b5 a0		lda $a0,x			lda 	esInt1,x
.4a82	95 b0		sta $b0,x			sta 	esInt3,x
.4a84					_CALClear:
.4a84	20 ad 4a	jsr $4aad			jsr 	EraseOneElement
.4a87	ad 72 0e	lda $0e72			lda 	elementSize 				; move to next element
.4a8a	20 9d 4a	jsr $4a9d			jsr 	_CALAddTemp0
.4a8d	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4a8f	d0 02		bne $4a93			bne 	_CALNoBorrow
.4a91	d6 b0		dec $b0,x			dec 	esInt3,x
.4a93					_CALNoBorrow:
.4a93	d6 a8		dec $a8,x			dec 	esInt2,x
.4a95	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4a97	10 eb		bpl $4a84			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4a99	68		pla				pla 								; restore the start of this into YA.
.4a9a	a8		tay				tay
.4a9b	68		pla				pla
.4a9c	60		rts				rts
.4a9d					_CALAddTemp0:
.4a9d	18		clc				clc
.4a9e	65 2a		adc $2a				adc 	temp0
.4aa0	85 2a		sta $2a				sta 	temp0
.4aa2	90 02		bcc $4aa6			bcc 	_CALANoCarry
.4aa4	e6 2b		inc $2b				inc 	temp0+1
.4aa6					_CALANoCarry:
.4aa6	60		rts				rts
.4aa7					CAActualSize:
>4aa7	04 04						.byte 	VarISize,VarISize
>4aa9	02 02						.byte 	VarSSize,VarSSize
>4aab	06 06						.byte 	VarFSize,VarFSize
.4aad					EraseOneElement:
.4aad	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4aaf	10 09		bpl $4aba			bpl 	_EOESubArray
.4ab1	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4ab3	ad 74 0e	lda $0e74			lda 	varType
.4ab6	20 48 4c	jsr $4c48			jsr 	ZeroTemp0Y
.4ab9	60		rts				rts
.4aba					_EOESubArray:
.4aba	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4abc	48		pha				pha
.4abd	a5 2b		lda $2b				lda 	temp0+1
.4abf	48		pha				pha
.4ac0	ad 72 0e	lda $0e72			lda 	elementSize 				; save element size
.4ac3	48		pha				pha
.4ac4	e8		inx				inx 								; create at next level
.4ac5	20 43 4a	jsr $4a43			jsr 	CreateArrayLevel
.4ac8	ca		dex				dex
.4ac9	85 32		sta $32				sta 	tempShort 					; save A
.4acb	68		pla				pla  								; restore element size.
.4acc	8d 72 0e	sta $0e72			sta 	elementSize
.4acf	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4ad0	85 2b		sta $2b				sta 	temp0+1
.4ad2	68		pla				pla
.4ad3	85 2a		sta $2a				sta 	temp0
.4ad5	98		tya				tya 								; store Y/A there
.4ad6	a0 01		ldy #$01			ldy 	#1
.4ad8	91 2a		sta ($2a),y			sta 	(temp0),y
.4ada	a5 32		lda $32				lda 	tempShort
.4adc	88		dey				dey
.4add	91 2a		sta ($2a),y			sta 	(temp0),y
.4adf	60		rts				rts
.4ae0					AllocateArraySpace:
.4ae0	18		clc				clc 								; element count + 1 => temp2.
.4ae1	b5 98		lda $98,x			lda 	esInt0,x
.4ae3	69 01		adc #$01			adc 	#1
.4ae5	85 2e		sta $2e				sta 	temp2
.4ae7	b5 a0		lda $a0,x			lda 	esInt1,x
.4ae9	69 00		adc #$00			adc 	#0
.4aeb	85 2f		sta $2f				sta 	temp2+1
.4aed	ad 72 0e	lda $0e72			lda 	elementSize 				; bytes per element
.4af0	20 17 4b	jsr $4b17			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4af3	18		clc				clc 								; add 2 for 'max element' byte.
.4af4	a5 2e		lda $2e				lda 	temp2
.4af6	69 02		adc #$02			adc 	#2
.4af8	85 2e		sta $2e				sta 	temp2
.4afa	90 02		bcc $4afe			bcc 	_AASNoCarry
.4afc	e6 2f		inc $2f				inc 	temp2+1
.4afe					_AASNoCarry:
.4afe	18		clc				clc 								; add to low memory, allocating space.
.4aff	a5 35		lda $35				lda 	lowMemory
.4b01	65 2e		adc $2e				adc 	temp2
.4b03	85 35		sta $35				sta 	lowMemory
.4b05	a5 36		lda $36				lda 	lowMemory+1
.4b07	65 2f		adc $2f				adc 	temp2+1
.4b09	85 36		sta $36				sta 	lowMemory+1
.4b0b	b0 05		bcs $4b12			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4b0d	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4b0f	b0 01		bcs $4b12			bcs 	_AASFail
.4b11	60		rts				rts
.4b12					_AASFail:
.4b12	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4b14	20 09 15	jsr $1509		jsr	errorHandler
.4b17					MultiplyTemp2ByA:
.4b17	48		pha				pha
.4b18	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4b1a	85 30		sta $30				sta 	temp3
.4b1c	a5 2f		lda $2f				lda 	temp2+1
.4b1e	85 31		sta $31				sta 	temp3+1
.4b20	68		pla				pla
.4b21	06 2e		asl $2e				asl 	temp2 						; double it.
.4b23	26 2f		rol $2f				rol 	temp2+1
.4b25	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4b27	f0 15		beq $4b3e			beq 	_MTBAExit
.4b29	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4b2b	d0 0d		bne $4b3a			bne 	_MTBANotFloat
.4b2d	18		clc				clc 								; so this will make it x 3
.4b2e	a5 2e		lda $2e				lda 	temp2
.4b30	65 30		adc $30				adc 	temp3
.4b32	85 2e		sta $2e				sta 	temp2
.4b34	a5 2f		lda $2f				lda 	temp2+1
.4b36	65 31		adc $31				adc 	temp3+1
.4b38	85 2f		sta $2f				sta 	temp2+1
.4b3a					_MTBANotFloat:
.4b3a	06 2e		asl $2e				asl 	temp2 						; double it.
.4b3c	26 2f		rol $2f				rol 	temp2+1
.4b3e					_MTBAExit:
.4b3e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e73					varHash:
>0e73							.fill	1
.0e74					varType:
>0e74							.fill 	1
.0e75					varEnd:
>0e75							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4b3f					AccessVariable:
.4b3f	aa		tax				tax 								; stack in X
.4b40	c8		iny				iny									; look at second character
.4b41	b1 28		lda ($28),y			lda 	(codePtr),y
.4b43	88		dey				dey
.4b44	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4b46	d0 15		bne $4b5d			bne 	_AVLong 					; no, always use the hash tables.
.4b48	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4b4a	38		sec				sec 	 							; make it 0-25
.4b4b	e9 01		sbc #$01			sbc 	#1
.4b4d	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4b4e	0a		asl a				asl 	a
.4b4f	95 98		sta $98,x			sta 	esInt0,x
.4b51	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4b53	95 a0		sta $a0,x			sta 	esInt1,x
.4b55	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4b57	95 90		sta $90,x			sta 	esType,x
.4b59	c8		iny				iny 								; skip over the variable reference in the code.
.4b5a	c8		iny				iny  								; (1 letter, 1 type)
.4b5b	8a		txa				txa 								; stack in A to return.
.4b5c	60		rts				rts
.4b5d					_AVLong:
.4b5d	da		phx				phx
.4b5e	20 a4 4b	jsr $4ba4			jsr 	AccessSetup 				; set up the basic information we need for later
.4b61	20 a6 4c	jsr $4ca6			jsr 	FindVariable 				; does the variable exist already ?
.4b64	b0 0e		bcs $4b74			bcs 	_AVFound 					; yes, then its found
.4b66	ad 74 0e	lda $0e74			lda 	varType 					; otherwise, is the variable type an array
.4b69	4a		lsr a				lsr 	a
.4b6a	90 05		bcc $4b71			bcc 	_AVCanCreate 				; if not, we can autocreate
.4b6c	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4b6e	20 09 15	jsr $1509		jsr	errorHandler
.4b71					_AVCanCreate:
.4b71	20 df 4b	jsr $4bdf			jsr 	CreateVariable 				; variable does not exist, create it.
.4b74					_AVFound:
.4b74	fa		plx				plx
.4b75	18		clc				clc 								; copy temp0 (variable record address)
.4b76	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4b78	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4b7a	95 98		sta $98,x			sta 	esInt0,x
.4b7c	a5 2b		lda $2b				lda 	temp0+1
.4b7e	69 00		adc #$00			adc 	#0
.4b80	95 a0		sta $a0,x			sta 	esInt1,x
.4b82	a9 00		lda #$00			lda 	#0
.4b84	95 a8		sta $a8,x			sta 	esInt2,x
.4b86	95 b0		sta $b0,x			sta 	esInt3,x
.4b88	ac 74 0e	ldy $0e74			ldy 	varType 					; get the type ID from the type.
.4b8b	b9 64 4b	lda $4b64,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4b8e	95 90		sta $90,x			sta 	esType,x
.4b90	ac 75 0e	ldy $0e75			ldy 	varEnd 						; restore Y
.4b93	ad 74 0e	lda $0e74			lda 	VarType 					; get variable type, put LSB into C
.4b96	4a		lsr a				lsr 	a
.4b97	90 03		bcc $4b9c			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4b99	20 4d 49	jsr $494d			jsr 	AccessArray 				; array lookup. if LSB was set.
.4b9c					_AVNotArray:
.4b9c	8a		txa				txa 								; return stack in A and return
.4b9d	60		rts				rts
.4b9e					_AVTypeTable:
>4b9e	80 80						.byte 	$80,$80						; integer
>4ba0	c0 c0						.byte 	$C0,$C0 					; string
>4ba2	81 81						.byte 	$81,$81 					; float
.4ba4					AccessSetup:
.4ba4	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4ba6	8d 73 0e	sta $0e73			sta 	varHash
.4ba9	5a		phy				phy
.4baa	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4bac	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4bae	b0 0b		bcs $4bbb			bcs 	_ASComplete
.4bb0	18		clc				clc 								; add to the hash. Might improve this.
.4bb1	6d 73 0e	adc $0e73			adc 	varHash
.4bb4	8d 73 0e	sta $0e73			sta 	varHash
.4bb7	c8		iny				iny 								; next character
.4bb8	4c aa 4b	jmp $4baa			jmp 	_ASLoop
.4bbb					_ASComplete:
.4bbb	8d 74 0e	sta $0e74			sta 	varType 					; save variable type byte
.4bbe	c8		iny				iny
.4bbf	8c 75 0e	sty $0e75			sty 	varEnd 						; save the ending position.
.4bc2	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4bc3	e9 3a		sbc #$3a			sbc 	#$3A
.4bc5	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4bc6	0a		asl a				asl 	a
.4bc7	0a		asl a				asl 	a
.4bc8	0a		asl a				asl 	a 							; 2 bytes/word
.4bc9	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4bcb	ad 73 0e	lda $0e73			lda 	varHash 					; get hash
.4bce	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4bd0	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4bd1	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4bd3	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4bd5	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4bd7	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4bd9	69 00		adc #$00			adc 	#0
.4bdb	85 3c		sta $3c				sta 	hashList+1
.4bdd	7a		ply				ply
.4bde	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4bdf					CreateVariable:
.4bdf	98		tya				tya 								; push Y on the stack twice.
.4be0	48		pha				pha									; position in code of the new variable.
.4be1	48		pha				pha
.4be2	ae 74 0e	ldx $0e74			ldx 	varType 					; get var type 0-5 from the var type
.4be5	bd 08 4c	lda $4c08,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4be8	48		pha				pha 								; save length
.4be9	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4beb	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4bed	a5 36		lda $36				lda 	lowMemory+1
.4bef	85 2b		sta $2b				sta 	temp0+1
.4bf1	68		pla				pla 								; get length
.4bf2	18		clc				clc 								; add to low memory.
.4bf3	65 35		adc $35				adc 	lowMemory
.4bf5	85 35		sta $35				sta 	lowMemory
.4bf7	90 08		bcc $4c01			bcc 	_CVNoCarry
.4bf9	e6 36		inc $36				inc 	lowMemory+1
.4bfb	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4bfd	c5 34		cmp $34				cmp 	highMemory+1
.4bff	b0 3c		bcs $4c3d			bcs 	_CVMemory
.4c01					_CVNoCarry:
.4c01	ad 73 0e	lda $0e73			lda 	varHash 					; store hash at offset 4.
.4c04	a0 04		ldy #$04			ldy 	#4
.4c06	91 2a		sta ($2a),y			sta 	(temp0),y
.4c08	68		pla				pla 								; offset, work out where the variable name is.
.4c09	18		clc				clc
.4c0a	65 28		adc $28				adc 	codePtr
.4c0c	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4c0e	91 2a		sta ($2a),y			sta 	(temp0),y
.4c10	a5 29		lda $29				lda 	codePtr+1
.4c12	69 00		adc #$00			adc 	#0
.4c14	c8		iny				iny
.4c15	91 2a		sta ($2a),y			sta 	(temp0),y
.4c17	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4c1a	b0 03		bcs $4c1f			bcs 	_CVNotImmediate
.4c1c	20 7c 4c	jsr $4c7c			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4c1f					_CVNotImmediate:
.4c1f	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4c21	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4c23	91 2a		sta ($2a),y			sta 	(temp0),y
.4c25	c8		iny				iny
.4c26	b1 3b		lda ($3b),y			lda 	(hashList),y
.4c28	91 2a		sta ($2a),y			sta 	(temp0),y
.4c2a	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4c2c	91 3b		sta ($3b),y			sta 	(hashList),y
.4c2e	88		dey				dey
.4c2f	a5 2a		lda $2a				lda 	temp0
.4c31	91 3b		sta ($3b),y			sta 	(hashList),y
.4c33	ad 74 0e	lda $0e74			lda 	varType 					; type in A
.4c36	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4c38	20 48 4c	jsr $4c48			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4c3b	7a		ply				ply
.4c3c	60		rts				rts
.4c3d					_CVMemory:
.4c3d	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4c3f	20 09 15	jsr $1509		jsr	errorHandler
>4c42	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4c44	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4c46	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4c48					ZeroTemp0Y:
.4c48	4a		lsr a				lsr 	a 							; bit 0 in carry
.4c49	0a		asl a				asl 	a
.4c4a	b0 17		bcs $4c63			bcs 	_ZTExit 					; we don't initialise arrays.
.4c4c	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4c4e	f0 14		beq $4c64			beq 	_ZTWriteNullString 			; write "" string
.4c50	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4c52	f0 20		beq $4c74			beq 	_ZTWriteFloat
.4c54	5a		phy				phy
.4c55	a9 00		lda #$00			lda 	#0
.4c57	91 2a		sta ($2a),y			sta 	(temp0),y
.4c59	c8		iny				iny
.4c5a	91 2a		sta ($2a),y			sta 	(temp0),y
.4c5c	c8		iny				iny
.4c5d	91 2a		sta ($2a),y			sta 	(temp0),y
.4c5f	c8		iny				iny
.4c60	91 2a		sta ($2a),y			sta 	(temp0),y
.4c62	7a		ply				ply
.4c63					_ZTExit:
.4c63	60		rts				rts
.4c64					_ZTWriteNullString:
.4c64	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4c66	8d ce 0a	sta $0ace			sta 	NullString
.4c69	a9 ce		lda #$ce			lda 	#NullString & $FF
.4c6b	91 2a		sta ($2a),y			sta 	(temp0),y
.4c6d	a9 0a		lda #$0a			lda 	#NullString >> 8
.4c6f	c8		iny				iny
.4c70	91 2a		sta ($2a),y			sta 	(temp0),y
.4c72	88		dey				dey
.4c73	60		rts				rts
.4c74					_ZTWriteFloat:
.4c74	da		phx				phx
.4c75	a2 20		ldx #$20		ldx	#32
.4c77	20 bf 25	jsr $25bf		jsr	floatingpointHandler
.4c7a	fa		plx				plx
.4c7b	60		rts				rts
.4c7c					CloneVariableName:
.4c7c	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4c7e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c80	85 2e		sta $2e				sta 	temp2
.4c82	c8		iny				iny
.4c83	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c85	85 2f		sta $2f				sta 	temp2+1
.4c87	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4c89	91 2a		sta ($2a),y			sta 	(temp0),y
.4c8b	88		dey				dey
.4c8c	a5 35		lda $35				lda 	lowMemory
.4c8e	91 2a		sta ($2a),y			sta 	(temp0),y
.4c90	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4c92					_CVNCopy:
.4c92	b1 2e		lda ($2e),y			lda		(temp2),y
.4c94	91 35		sta ($35),y			sta 	(lowMemory),y
.4c96	c8		iny				iny
.4c97	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4c99	90 f7		bcc $4c92			bcc 	_CVNCopy
.4c9b	98		tya				tya 								; add Y to low memory
.4c9c	18		clc				clc
.4c9d	65 35		adc $35				adc 	lowMemory
.4c9f	85 35		sta $35				sta 	lowMemory
.4ca1	90 02		bcc $4ca5			bcc 	_CVNNoCarry
.4ca3	e6 36		inc $36				inc 	lowMemory+1
.4ca5					_CVNNoCarry:
.4ca5	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4ca6					FindVariable:
.4ca6	5a		phy				phy
.4ca7	98		tya				tya 								; point temp2 to the actual name
.4ca8	18		clc				clc 								; in memory of the variable being created
.4ca9	65 28		adc $28				adc 	codePtr
.4cab	85 2e		sta $2e				sta 	temp2
.4cad	a5 29		lda $29				lda 	codePtr+1
.4caf	69 00		adc #$00			adc 	#0
.4cb1	85 2f		sta $2f				sta 	temp2+1
.4cb3	a0 00		ldy #$00			ldy 	#0
.4cb5	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4cb7	85 2a		sta $2a				sta 	temp0
.4cb9	a5 3c		lda $3c				lda 	hashList+1
.4cbb	85 2b		sta $2b				sta 	temp0+1
.4cbd	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4cbf	b1 2a		lda ($2a),y			lda 	(temp0),y
.4cc1	f0 2b		beq $4cee			beq 	_FVFail
.4cc3	aa		tax				tax
.4cc4	88		dey				dey		 							; get LSB
.4cc5	b1 2a		lda ($2a),y			lda 	(temp0),y
.4cc7	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4cc9	86 2b		stx $2b				stx 	temp0+1
.4ccb	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4ccd	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ccf	cd 73 0e	cmp $0e73			cmp 	varHash
.4cd2	d0 e9		bne $4cbd			bne 	_FVNext 					; if not, no point in checking the name.
.4cd4	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4cd5	b1 2a		lda ($2a),y			lda 	(temp0),y
.4cd7	85 2d		sta $2d				sta 	temp1+1
.4cd9	88		dey				dey
.4cda	b1 2a		lda ($2a),y			lda 	(temp0),y
.4cdc	85 2c		sta $2c				sta 	temp1
.4cde	a0 00		ldy #$00			ldy 	#0
.4ce0					_FVCheck:
.4ce0	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4ce2	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4ce4	d0 d7		bne $4cbd			bne 	_FVNext		 				; fail if different.
.4ce6	c8		iny				iny
.4ce7	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4ce9	90 f5		bcc $4ce0			bcc 	_FVCheck
.4ceb	7a		ply				ply
.4cec	38		sec				sec
.4ced	60		rts				rts
.4cee					_FVFail:
.4cee	7a		ply				ply
.4cef	18		clc				clc
.4cf0	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4cf1					HashTableReset:
.4cf1	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4cf3	a9 00		lda #$00			lda 	#0
.4cf5					_HTRClear:
.4cf5	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4cf8	ca		dex				dex
.4cf9	d0 fa		bne $4cf5			bne 	_HTRClear
.4cfb	60		rts				rts

;******  Return to file: variable/variable.asm

.4cfc					variableHandler:
.4cfc	7c ff 4c	jmp ($4cff,x)			jmp 	(variableVectors,x)
.4cff					variableVectors:
>4cff	07 4d					.word _DummyControlHandler ; index 0
>4d01	3f 4b					.word AccessVariable       ; index 2
>4d03	cf 49					.word CreateArray          ; index 4
>4d05	f1 4c					.word HashTableReset       ; index 6
.4d07					_DummyControlHandler:
.4d07	60		rts			rts

;******  Return to file: basic.asm

.4d08					section_end_variable:
.4d08					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e76					endStorage:
>4d08							.align 	256
.4e00					programMemory:
>4dff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4e00					section_end_footer:

;******  End of listing
