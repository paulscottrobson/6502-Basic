
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Fri Mar 19 17:52:18 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	15 3a						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 42		lda #$42			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 bf 14	jsr $14bf		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 06 1c	jsr $1c06		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 54 3d	jsr $3d54		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	8a		txa				txa
.1030	95 50		sta $50,x			sta 	esInt0,x
.1032	95 58		sta $58,x			sta 	esInt1,x
.1034	95 60		sta $60,x			sta 	esInt2,x
.1036	95 68		sta $68,x			sta 	esInt3,x
.1038	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.103a	aa		tax				tax
.103b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.103d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.103f	f0 41		beq $1082			beq 	_AGOExit
.1041	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1043	f0 3d		beq $1082			beq 	_AGOExit
.1045	c8		iny				iny 								; consume the token
.1046	a9 00		lda #$00			lda 	#AMD_IMM
.1048	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.104a	f0 2d		beq $1079			beq		_AGOEvalExit 				; with an operand.
.104c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.104e	f0 40		beq $1090			beq 	_AGOIndirect
.1050	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1052	d0 0b		bne $105f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1054	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1056	c8		iny				iny
.1057	aa		tax				tax
.1058	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.105a	e0 3a		cpx #$3a			cpx 	#$3A
.105c	f0 24		beq $1082			beq 	_AGOExit
.105e	88		dey				dey 								; unpick 2 iny
.105f					_AGOZeroPage1:
.105f	88		dey				dey
.1060	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1062	a2 08		ldx #$08		ldx	#8
.1064	20 91 32	jsr $3291		jsr	mainHandler
.1067	20 bf 10	jsr $10bf			jsr 	AsmGetIndexing
.106a	a9 01		lda #$01			lda 	#AMD_ZERO
.106c	90 14		bcc $1082			bcc 	_AGOExit
.106e	a9 05		lda #$05			lda 	#AMD_ZEROX
.1070	e0 00		cpx #$00			cpx 	#0
.1072	f0 0e		beq $1082			beq 	_AGOExit
.1074	a9 09		lda #$09			lda 	#AMD_ZEROY
.1076	4c 82 10	jmp $1082			jmp 	_AGOExit
.1079					_AGOEvalExit:
.1079	48		pha				pha
.107a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.107c	a2 08		ldx #$08		ldx	#8
.107e	20 91 32	jsr $3291		jsr	mainHandler
.1081	68		pla				pla
.1082					_AGOExit:
.1082	48		pha				pha 								; save the mode
.1083	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.1085	05 68		ora $68				ora 	esInt3
.1087	d0 02		bne $108b			bne 	_AGOValue
.1089	68		pla				pla
.108a	60		rts				rts
.108b					_AGOValue:
.108b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.108d	20 e0 14	jsr $14e0		jsr	errorHandler
.1090					_AGOIndirect:
.1090	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1092	a2 08		ldx #$08		ldx	#8
.1094	20 91 32	jsr $3291		jsr	mainHandler
.1097	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1099	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.109b	f0 11		beq $10ae			beq 	_AGOIndIndY
.109d	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; must be ,X)
.10a0	90 39		bcc $10db			bcc 	AGISyntax
.10a2	e0 00		cpx #$00			cpx 	#0
.10a4	d0 35		bne $10db			bne 	AGISyntax
.10a6	a2 02		ldx #$02		ldx	#2
.10a8	20 91 32	jsr $3291		jsr	mainHandler
.10ab	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10ad	60		rts				rts
.10ae					_AGOIndIndY:
.10ae	c8		iny				iny
.10af	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; get indexing if any
.10b2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10b4	90 cc		bcc $1082			bcc 	_AGOExit 					; none then exit
.10b6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b8	f0 21		beq $10db			beq 	AGISyntax
.10ba	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10bc	4c 82 10	jmp $1082			jmp 	_AGOExit
.10bf					AsmGetIndexing:
.10bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10c1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10c3	18		clc				clc
.10c4	d0 14		bne $10da			bne 	_AGIExit 					; no comma, return with CC
.10c6	c8		iny				iny 								; get what SHOULD be X or Y
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c9	38		sec				sec 								; subtract 6 bit ASCII of X
.10ca	e9 18		sbc #$18			sbc 	#"X" & $3F
.10cc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10ce	b0 0b		bcs $10db			bcs 	AGISyntax
.10d0	aa		tax				tax 								; put in index
.10d1	c8		iny				iny 								; get what follows that, should be the $3A marker
.10d2	b1 28		lda ($28),y			lda 	(codePtr),y
.10d4	c8		iny				iny
.10d5	c9 3a		cmp #$3a			cmp 	#$3A
.10d7	d0 02		bne $10db			bne 	AGISyntax
.10d9	38		sec				sec 								; return CS and index mode in X
.10da					_AGIExit:
.10da	60		rts				rts
.10db					AGISyntax:
.10db	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10dd	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10e0					AsmWriteInstruction:
.10e0	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10e3	98		tya				tya
.10e4	48		pha				pha
.10e5	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e8	29 02		and #$02			and 	#2
.10ea	f0 2d		beq $1119			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10ec	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10ef	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f2	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10f5	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f8	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10fb	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.10fe	e0 00		cpx #$00			cpx 	#0
.1100	f0 0e		beq $1110			beq 	_ASMWEchoExit
.1102	a5 50		lda $50				lda 	esInt0
.1104	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1107	e0 01		cpx #$01			cpx 	#1
.1109	f0 05		beq $1110			beq 	_ASMWEchoExit
.110b	a5 58		lda $58				lda 	esInt1
.110d	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1110					_ASMWEchoExit:
.1110	8a		txa				txa
.1111	48		pha				pha
.1112	a2 04		ldx #$04		ldx	#4
.1114	20 bf 14	jsr $14bf		jsr	deviceHandler
.1117	68		pla				pla
.1118	aa		tax				tax
.1119					_ASMWNoEcho:
.1119	ad f2 0a	lda $0af2			lda 	finalOpcode
.111c	20 34 11	jsr $1134			jsr 	AsmWriteByte
.111f	e0 00		cpx #$00			cpx 	#0
.1121	f0 0e		beq $1131			beq 	_ASMWExit
.1123	a5 50		lda $50				lda 	esInt0
.1125	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1128	e0 01		cpx #$01			cpx 	#1
.112a	f0 05		beq $1131			beq 	_ASMWExit
.112c	a5 58		lda $58				lda 	esInt1
.112e	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1131					_ASMWExit:
.1131	68		pla				pla
.1132	a8		tay				tay
.1133	60		rts				rts
.1134					AsmWriteByte:
.1134	a0 00		ldy #$00			ldy 	#0
.1136	48		pha				pha
.1137	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.113a	85 2a		sta $2a				sta 	temp0
.113c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.113f	85 2b		sta $2b				sta 	temp0+1
.1141	68		pla				pla 								; write out the byte.
.1142	91 2a		sta ($2a),y			sta 	(temp0),y
.1144	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1147	d0 03		bne $114c			bne 	_AWBNoCarry
.1149	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.114c					_AWBNoCarry:
.114c	60		rts				rts
.114d					AWIWriteHexSpace:
.114d	48		pha				pha
.114e	a9 20		lda #$20			lda 	#" "
.1150	20 67 11	jsr $1167			jsr 	AWIPrintChar
.1153	68		pla				pla
.1154					AWIWriteHex:
.1154	48		pha				pha
.1155	4a		lsr a				lsr 	a
.1156	4a		lsr a				lsr 	a
.1157	4a		lsr a				lsr 	a
.1158	4a		lsr a				lsr 	a
.1159	20 5d 11	jsr $115d			jsr 	AWIPrintNibble
.115c	68		pla				pla
.115d					AWIPrintNibble:
.115d	29 0f		and #$0f			and 	#15
.115f	c9 0a		cmp #$0a			cmp 	#10
.1161	90 02		bcc $1165			bcc 	_AWIPNDigit
.1163	69 06		adc #$06			adc 	#6
.1165					_AWIPNDigit:
.1165	69 30		adc #$30			adc 	#48
.1167					AWIPrintChar:
.1167	85 32		sta $32				sta 	tempShort
.1169	8a		txa				txa
.116a	48		pha				pha
.116b	a5 32		lda $32				lda 	tempShort
.116d	a2 16		ldx #$16		ldx	#22
.116f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1172	68		pla				pla
.1173	aa		tax				tax
.1174	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.1175					AssembleOneInstruction:
.1175	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1178	aa		tax				tax
.1179	bd 45 11	lda $1145,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.117c	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.117f	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.1182	8d f4 0a	sta $0af4			sta 	asmMode
.1185	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.1187	d0 05		bne $118e			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1189	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.118c	b0 10		bcs $119e			bcs 	_AOISuccess 				; worked ok.
.118e					_AOIThreeBytes:
.118e	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.1191	bd c8 11	lda $11c8,x			lda 	AbsoluteVersionTable,x
.1194	30 09		bmi $119f			bmi 	_AOIError					; not possible, no equivalent.
.1196	8d f4 0a	sta $0af4			sta 	asmMode
.1199	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.119c	90 01		bcc $119f			bcc 	_AOIError 					; didn't work.
.119e					_AOISuccess:
.119e	60		rts				rts
.119f					_AOIError:
.119f	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11a1	20 e0 14	jsr $14e0		jsr	errorHandler
.11a4					AssembleAttempt:
.11a4	20 ad 11	jsr $11ad			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a7	b0 03		bcs $11ac			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a9	20 57 13	jsr $1357			jsr 	AssembleSpecialCase
.11ac					_AAExit:
.11ac	60		rts				rts
.11ad					_AADispatch:
.11ad	ad f3 0a	lda $0af3			lda 	asmToken
.11b0	c9 b4		cmp #$b4			cmp 	#TKA_GROUP4
.11b2	b0 11		bcs $11c5			bcs 	_AAGroup4
.11b4	c9 ab		cmp #$ab			cmp 	#TKA_GROUP3
.11b6	b0 0a		bcs $11c2			bcs 	_AAGroup3
.11b8	c9 99		cmp #$99			cmp 	#TKA_GROUP2
.11ba	b0 03		bcs $11bf			bcs 	_AAGroup2
.11bc	4c 9d 12	jmp $129d			jmp 	AssembleGroup1
.11bf					_AAGroup2:
.11bf	4c f8 12	jmp $12f8			jmp 	AssembleGroup2
.11c2					_AAGroup3:
.11c2	4c 19 13	jmp $1319			jmp 	AssembleGroup3
.11c5					_AAGroup4:
.11c5	4c 4d 13	jmp $134d			jmp 	AssembleGroup4
.11c8					AbsoluteVersionTable:
>11c8	ff						.byte	$FF 			; fail AMD_IMM
>11c9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11ca	ff						.byte	$FF 			; fail AMD_ACCIMP
>11cb	ff						.byte	$FF 			; fail AMD_ABS
>11cc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11cd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11ce	ff						.byte	$FF 			; fail AMD_ABSY
>11cf	ff						.byte	$FF 			; fail AMD_ABSX
>11d0	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11d1	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11d2	ff						.byte	$FF 			; fail AMD_ABSIND
>11d3	ff						.byte	$FF 			; fail AMD_ABSINDX
>11d4	ff						.byte	$FF 			; fail AMD_REL
>11d5	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d6					OpcodeTable:
>11d6	01					.byte	$01			; $91 ora
>11d7	21					.byte	$21			; $92 (and)
>11d8	41					.byte	$41			; $93 eor
>11d9	61					.byte	$61			; $94 adc
>11da	81					.byte	$81			; $95 sta
>11db	a1					.byte	$a1			; $96 lda
>11dc	c1					.byte	$c1			; $97 cmp
>11dd	e1					.byte	$e1			; $98 sbc
>11de	02					.byte	$02			; $99 asl
>11df	22					.byte	$22			; $9a rol
>11e0	42					.byte	$42			; $9b lsr
>11e1	62					.byte	$62			; $9c ror
>11e2	82					.byte	$82			; $9d stx
>11e3	a2					.byte	$a2			; $9e ldx
>11e4	c2					.byte	$c2			; $9f dec
>11e5	e2					.byte	$e2			; $a0 inc
>11e6	60					.byte	$60			; $a1 stz
>11e7	20					.byte	$20			; $a2 bit
>11e8	80					.byte	$80			; $a3 sty
>11e9	a0					.byte	$a0			; $a4 ldy
>11ea	c0					.byte	$c0			; $a5 cpy
>11eb	e0					.byte	$e0			; $a6 cpx
>11ec	00					.byte	$00			; $a7 tsb
>11ed	10					.byte	$10			; $a8 trb
>11ee	14					.byte	$14			; $a9 jsr
>11ef	40					.byte	$40			; $aa jmp
>11f0	10					.byte	$10			; $ab bpl
>11f1	30					.byte	$30			; $ac bmi
>11f2	50					.byte	$50			; $ad bvc
>11f3	70					.byte	$70			; $ae bvs
>11f4	90					.byte	$90			; $af bcc
>11f5	b0					.byte	$b0			; $b0 bcs
>11f6	d0					.byte	$d0			; $b1 bne
>11f7	f0					.byte	$f0			; $b2 beq
>11f8	80					.byte	$80			; $b3 bra
>11f9	00					.byte	$00			; $b4 brk
>11fa	08					.byte	$08			; $b5 php
>11fb	18					.byte	$18			; $b6 clc
>11fc	28					.byte	$28			; $b7 plp
>11fd	38					.byte	$38			; $b8 sec
>11fe	40					.byte	$40			; $b9 rti
>11ff	48					.byte	$48			; $ba pha
>1200	58					.byte	$58			; $bb cli
>1201	5a					.byte	$5a			; $bc phy
>1202	60					.byte	$60			; $bd rts
>1203	68					.byte	$68			; $be pla
>1204	78					.byte	$78			; $bf sei
>1205	7a					.byte	$7a			; $c0 ply
>1206	88					.byte	$88			; $c1 dey
>1207	8a					.byte	$8a			; $c2 txa
>1208	98					.byte	$98			; $c3 tya
>1209	9a					.byte	$9a			; $c4 txs
>120a	a8					.byte	$a8			; $c5 tay
>120b	aa					.byte	$aa			; $c6 tax
>120c	b8					.byte	$b8			; $c7 clv
>120d	ba					.byte	$ba			; $c8 tsx
>120e	c8					.byte	$c8			; $c9 iny
>120f	ca					.byte	$ca			; $ca dex
>1210	d8					.byte	$d8			; $cb cld
>1211	da					.byte	$da			; $cc phx
>1212	e8					.byte	$e8			; $cd inx
>1213	ea					.byte	$ea			; $ce nop
>1214	f8					.byte	$f8			; $cf sed
>1215	fa					.byte	$fa			; $d0 plx
.1216					Group2OpcodeAvailability:
>1216	ae					.byte	$ae			; $99 asl $02
>1217	ae					.byte	$ae			; $9a rol $22
>1218	ae					.byte	$ae			; $9b lsr $42
>1219	ae					.byte	$ae			; $9c ror $62
>121a	0a					.byte	$0a			; $9d stx $82
>121b	0b					.byte	$0b			; $9e ldx $a2
>121c	aa					.byte	$aa			; $9f dec $c2
>121d	aa					.byte	$aa			; $a0 inc $e2
>121e	22					.byte	$22			; $a1 stz $60
>121f	aa					.byte	$aa			; $a2 bit $20
>1220	2a					.byte	$2a			; $a3 sty $80
>1221	ab					.byte	$ab			; $a4 ldy $a0
>1222	2b					.byte	$2b			; $a5 cpy $c0
>1223	0b					.byte	$0b			; $a6 cpx $e0
>1224	0a					.byte	$0a			; $a7 tsb $00
>1225	0a					.byte	$0a			; $a8 trb $10
>1226	08					.byte	$08			; $a9 jsr $14
>1227	08					.byte	$08			; $aa jmp $40
.1228					AssemblerSpecialCases:
>1228	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>122b	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>122e	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>1231	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>1234	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1237	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>123a	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>123d	a2 00 89				.byte	$a2,0,$89		; bit #
>1240	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>1243	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1246	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1247					AssembleLabel:
.1247	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1249	c9 3a		cmp #$3a			cmp 	#$3A
.124b	b0 4b		bcs $1298			bcs 	_ALSyntax
.124d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.124f	a2 00		ldx #$00		ldx	#0
.1251	20 22 41	jsr $4122		jsr	variableHandler
.1254	a5 48		lda $48				lda 	esType 						; check integer reference
.1256	c9 80		cmp #$80			cmp 	#$80
.1258	d0 3e		bne $1298			bne 	_ALSyntax
.125a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.125c	85 2a		sta $2a				sta 	temp0
.125e	a5 58		lda $58				lda 	esInt1
.1260	85 2b		sta $2b				sta 	temp0+1
.1262	98		tya				tya
.1263	48		pha				pha
.1264	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1267	4a		lsr a				lsr 	a
.1268	90 11		bcc $127b			bcc 	_ALWrite
.126a	a0 00		ldy #$00			ldy 	#0
.126c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.126f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1271	d0 20		bne $1293			bne 	_ALChanged
.1273	c8		iny				iny
.1274	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1277	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1279	d0 18		bne $1293			bne 	_ALChanged
.127b					_ALWrite:
.127b	a0 00		ldy #$00			ldy 	#0
.127d	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.1280	91 2a		sta ($2a),y			sta 	(temp0),y
.1282	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1285	c8		iny				iny
.1286	91 2a		sta ($2a),y			sta 	(temp0),y
.1288	a9 00		lda #$00			lda 	#0
.128a	c8		iny				iny
.128b	91 2a		sta ($2a),y			sta 	(temp0),y
.128d	c8		iny				iny
.128e	91 2a		sta ($2a),y			sta 	(temp0),y
.1290	68		pla				pla
.1291	a8		tay				tay
.1292	60		rts				rts
.1293					_ALChanged:
.1293	a2 26		ldx #$26			ldx 	#ErrorID_Label
.1295	20 e0 14	jsr $14e0		jsr	errorHandler
.1298					_ALSyntax:
.1298	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.129a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.129d					AssembleGroup1:
.129d	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12a0	c9 95		cmp #$95			cmp 	#TKW_STA
.12a2	d0 07		bne $12ab			bne 	_AG1NotStoreImm
.12a4	ad f4 0a	lda $0af4			lda 	asmMode
.12a7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12a9	f0 2c		beq $12d7			beq 	AG1ModeError
.12ab					_AG1NotStoreImm:
.12ab	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12ae	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12b1	48		pha				pha
.12b2	f0 23		beq $12d7			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12b4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12b6	d0 02		bne $12ba			bne 	_AG1NotImmediate
.12b8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ba					_AG1NotImmediate:
.12ba	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12bc	d0 02		bne $12c0			bne 	_AG1NotZX
.12be	a2 00		ldx #$00			ldx 	#0
.12c0					_AG1NotZX:
.12c0	68		pla				pla 								; restore length
.12c1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12c3	b0 10		bcs $12d5			bcs 	AG1Fail
.12c5					AG1ReturnValue:
.12c5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12c7	18		clc				clc
.12c8	bd ea 12	lda $12ea,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12cb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12ce	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12d0	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.12d3	38		sec				sec
.12d4	60		rts				rts
.12d5					AG1Fail:
.12d5	18		clc				clc
.12d6	60		rts				rts
.12d7					AG1ModeError:
.12d7	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.12d9	20 e0 14	jsr $14e0		jsr	errorHandler
.12dc					AMDOperandSize:
>12dc	01 01 00 02					.byte 	1,1,0,2
>12e0	01 01 02 02					.byte 	1,1,2,2
>12e4	01 01 02 02					.byte 	1,1,2,2
>12e8	01 01						.byte 	1,1
.12ea					AMDOffsetFromBase:
>12ea	00 04 08 0c					.byte 	0,4,8,12
>12ee	10 14 18 1c					.byte	16,20,24,28
>12f2	11 00 00 00					.byte 	17,0,0,0
>12f6	00 00						.byte 	0,0
.12f8					AssembleGroup2:
.12f8	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.12fb	c9 08		cmp #$08			cmp 	#8
.12fd	b0 18		bcs $1317			bcs 	_AG2Fail
.12ff	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1301	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1304	bd 7d 11	lda $117d,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1307					_AG2Shift:
.1307	4a		lsr a				lsr 	a
.1308	c6 2a		dec $2a				dec 	temp0
.130a	10 fb		bpl $1307			bpl 	_AG2Shift
.130c	90 09		bcc $1317			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.130e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1311	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1314	4c c5 12	jmp $12c5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1317					_AG2Fail:
.1317	18		clc				clc
.1318	60		rts				rts
.1319					AssembleGroup3:
.1319	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.131c	4a		lsr a				lsr 	a
.131d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.131f	90 21		bcc $1342			bcc 	_AG3Default
.1321	38		sec				sec	 								; calculate branch offset
.1322	a5 50		lda $50				lda		esInt0
.1324	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1327	aa		tax				tax
.1328	a5 58		lda $58				lda		esInt1
.132a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.132d	85 58		sta $58				sta 	esInt1
.132f	8a		txa				txa 								; add 126, now 128 too many.
.1330	18		clc				clc 								; we can use this to check the range
.1331	69 7e		adc #$7e			adc 	#126
.1333	85 50		sta $50				sta 	esInt0
.1335	90 02		bcc $1339			bcc 	_AG3NoCarry
.1337	e6 58		inc $58				inc 	esInt1
.1339					_AG3NoCarry:
.1339	a5 58		lda $58				lda 	esInt1 						; check in range.
.133b	d0 0b		bne $1348			bne 	_AG3Range
.133d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.133f	38		sec				sec
.1340	e9 80		sbc #$80			sbc 	#128
.1342					_AG3Default:
.1342	85 50		sta $50				sta 	esInt0
.1344					_AG3ExitOk:
.1344	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1346	d0 07		bne $134f			bne 	AG4Write
.1348					_AG3Range:
.1348	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.134a	20 e0 14	jsr $14e0		jsr	errorHandler
.134d					AssembleGroup4:
.134d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.134f					AG4Write:
.134f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1352	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1355	38		sec				sec
.1356	60		rts				rts
.1357					AssembleSpecialCase:
.1357	a2 00		ldx #$00			ldx 	#0
.1359					_ASCScan:
.1359	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.135c	cd f3 0a	cmp $0af3			cmp 	asmToken
.135f	d0 08		bne $1369			bne 	_ASCNext
.1361	bd 29 12	lda $1229,x			lda 	AssemblerSpecialCases+1,x
.1364	cd f4 0a	cmp $0af4			cmp 	asmMode
.1367	f0 0a		beq $1373			beq 	_ASCFound
.1369					_ASCNext:
.1369	e8		inx				inx									; next entry
.136a	e8		inx				inx
.136b	e8		inx				inx
.136c	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; until table ends
.136f	d0 e8		bne $1359			bne 	_ASCScan
.1371	18		clc				clc
.1372	60		rts				rts
.1373					_ASCFound:
.1373	bd 2a 12	lda $122a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.1376	48		pha				pha
.1377	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.137a	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.137d	aa		tax				tax
.137e	68		pla				pla 								; opcode back
.137f	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1382	38		sec				sec
.1383	60		rts				rts

;******  Return to file: assembler/assembler.asm

.1384					assemblerHandler:
.1384	7c 87 13	jmp ($1387,x)			jmp 	(assemblerVectors,x)
.1387					assemblerVectors:
>1387	75 11					.word AssembleOneInstruction ; index 0
>1389	47 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.138b					section_end_assembler:
.138b					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.138b					X16Break:
.138b	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.138e	f0 01		beq $1391			beq 	_IsBreak
.1390	60		rts				rts
.1391					_IsBreak:
.1391	a2 21		ldx #$21			ldx 	#ErrorID_Break
.1393	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1396					ExternSave:
.1396	98		tya				tya
.1397	48		pha				pha
.1398	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.139b	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.139e	a9 01		lda #$01			lda 	#1
.13a0	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13a2	a0 00		ldy #$00			ldy 	#0
.13a4	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13a7	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13a9	85 2a		sta $2a				sta 	temp0
.13ab	a5 59		lda $59				lda 	esInt1+1
.13ad	85 2b		sta $2b				sta 	temp0+1
.13af	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13b1	a4 5a		ldy $5a				ldy 	esInt1+2
.13b3	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13b5	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13b8	b0 03		bcs $13bd			bcs 	_ESSave
.13ba	68		pla				pla
.13bb	a8		tay				tay
.13bc	60		rts				rts
.13bd					_ESSave:
.13bd	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13bf	20 e0 14	jsr $14e0		jsr	errorHandler
.13c2					ExternLoad:
.13c2	98		tya				tya
.13c3	48		pha				pha
.13c4	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.13c7	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13ca	a9 01		lda #$01			lda 	#1
.13cc	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13ce	a0 00		ldy #$00			ldy 	#0
.13d0	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13d3	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.13d5	a4 59		ldy $59				ldy 	esInt1+1
.13d7	a9 00		lda #$00			lda 	#0 							; load command
.13d9	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13dc	b0 03		bcs $13e1			bcs 	_ESLoad
.13de	68		pla				pla
.13df	a8		tay				tay
.13e0	60		rts				rts
.13e1					_ESLoad:
.13e1	a2 20		ldx #$20			ldx 	#ErrorID_Load
.13e3	20 e0 14	jsr $14e0		jsr	errorHandler
.13e6					ExternGetLength:
.13e6	a5 50		lda $50				lda 	esInt0 						; length into A.
.13e8	85 2a		sta $2a				sta 	temp0
.13ea	a5 58		lda $58				lda 	esInt1
.13ec	85 2b		sta $2b				sta 	temp0+1
.13ee	a0 00		ldy #$00			ldy 	#0
.13f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.13f2	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.13f4	a4 58		ldy $58				ldy 	esInt1
.13f6	e8		inx				inx 								; advance over the length pointer.
.13f7	d0 01		bne $13fa			bne 	_ESNoCarry
.13f9	c8		iny				iny
.13fa					_ESNoCarry:
.13fa	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.13fb					IOInitialise:
.13fb	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.13fd	20 26 14	jsr $1426			jsr 	IOPrintChar
.1400	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1402	20 52 14	jsr $1452			jsr 	IOInk
.1405	a9 00		lda #$00			lda 	#0
.1407	20 66 14	jsr $1466			jsr 	IOPaper
.140a	20 0e 14	jsr $140e			jsr 	IOClearScreen
.140d	60		rts				rts
.140e					IOClearScreen:
.140e	48		pha				pha
.140f	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1411	20 26 14	jsr $1426			jsr 	IOPrintChar
.1414	68		pla				pla
.1415	60		rts				rts
.1416					IONewLine:
.1416	48		pha				pha
.1417	a9 0d		lda #$0d			lda 	#13
.1419	20 26 14	jsr $1426			jsr 	IOPrintChar
.141c	68		pla				pla
.141d	60		rts				rts
.141e					IOTab:
.141e	48		pha				pha
.141f	a9 20		lda #$20			lda 	#32
.1421	20 26 14	jsr $1426			jsr 	IOPrintChar
.1424	68		pla				pla
.1425	60		rts				rts
.1426					IOPrintAscii:
.1426					IOPrintChar:
.1426	aa		tax				tax 								; save in X so we can save Y
.1427	5a		phy				phy
.1428	8a		txa				txa
.1429	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.142b	d0 02		bne $142f			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.142d	a9 14		lda #$14			lda 	#$14
.142f					_IOPCNotBS:
.142f	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1432	7a		ply				ply
.1433	60		rts				rts
.1434					IOInkey:
.1434	98		tya				tya
.1435	48		pha				pha
.1436	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1439	85 32		sta $32				sta 	tempShort
.143b	68		pla				pla
.143c	a8		tay				tay
.143d	a5 32		lda $32				lda 	tempShort					; no key pressed.
.143f	f0 10		beq $1451			beq 	_IOIExit
.1441	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.1443	f0 0c		beq $1451			beq 	_IOIExit
.1445	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1447	f0 06		beq $144f			beq 	_IOIBackspace
.1449	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.144b	90 e7		bcc $1434			bcc 	IOInkey
.144d	b0 02		bcs $1451			bcs 	_IOIExit
.144f					_IOIBackspace:
.144f	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1451					_IOIExit:
.1451	60		rts				rts
.1452					IOInk:
.1452	48		pha				pha
.1453	29 07		and #$07			and 	#7 							; 8 primaries
.1455	aa		tax				tax
.1456	bd 5e 14	lda $145e,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1459	20 26 14	jsr $1426			jsr 	IOPrintChar
.145c	68		pla				pla
.145d	60		rts				rts
.145e					_IOColourTable:
>145e	90						.byte 	$90 					; 0 Black
>145f	96						.byte 	$96 					; 1 Red
>1460	1e						.byte 	$1E 					; 2 Green
>1461	9e						.byte 	$9E 					; 3 Yellow
>1462	9a						.byte 	$9A 					; 4 Blue
>1463	9c						.byte 	$9C 					; 5 Magenta
>1464	9f						.byte 	$9F 					; 6 Cyan
>1465	05						.byte 	$05 					; 7 White
.1466					IOPaper:
.1466	48		pha				pha
.1467	48		pha				pha
.1468	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.146a	20 26 14	jsr $1426			jsr 	IOPrintChar 			; and then swap them again.
.146d	68		pla				pla
.146e	20 52 14	jsr $1452			jsr 	IOInk
.1471	a9 01		lda #$01			lda 	#1
.1473	20 26 14	jsr $1426			jsr 	IOPrintChar
.1476	68		pla				pla
.1477	60		rts				rts
.1478					IOLocate:
.1478	48		pha				pha
.1479	a9 13		lda #$13			lda 	#$13 					; home cursor code
.147b	20 26 14	jsr $1426			jsr 	IOPrintChar
.147e	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1480	20 87 14	jsr $1487			jsr 	_IOLoc2
.1483	68		pla				pla
.1484	a8		tay				tay
.1485	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1487					_IOLoc2:
.1487	c0 00		cpy #$00			cpy 	#0
.1489	f0 06		beq $1491			beq 	_IOLocExit
.148b	20 26 14	jsr $1426			jsr 	IOPrintChar
.148e	88		dey				dey
.148f	d0 f6		bne $1487			bne 	_IOLoc2
.1491					_IOLocExit:
.1491	60		rts				rts
.1492					IOInput:
.1492	a9 00		lda #$00			lda 	#0
.1494	8d f6 0a	sta $0af6			sta 	bufferCount
.1497					_IOILoop:
.1497	20 cf ff	jsr $ffcf			jsr 	$FFCF
.149a	c9 0d		cmp #$0d			cmp 	#13
.149c	f0 10		beq $14ae			beq 	_IOIExit
.149e	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14a1	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14a3	f0 f2		beq $1497			beq 	_IOILoop
.14a5	ee f6 0a	inc $0af6			inc 	bufferCount
.14a8	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14ab	4c 97 14	jmp $1497			jmp 	_IOILoop
.14ae					_IOIExit:
.14ae	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14b0	85 2a		sta $2a				sta 	temp0
.14b2	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14b4	85 2b		sta $2b				sta 	1+(temp0)
.14b6	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14b7					IOReadTimer:
.14b7	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14ba	48		pha				pha
.14bb	8a		txa				txa
.14bc	a8		tay				tay
.14bd	68		pla				pla
.14be	60		rts				rts

;******  Return to file: device/device.asm

.14bf					deviceHandler:
.14bf	7c c2 14	jmp ($14c2,x)			jmp 	(deviceVectors,x)
.14c2					deviceVectors:
>14c2	8b 13					.word X16Break             ; index 0
>14c4	0e 14					.word IOClearScreen        ; index 2
>14c6	16 14					.word IONewLine            ; index 4
>14c8	fb 13					.word IOInitialise         ; index 6
>14ca	52 14					.word IOInk                ; index 8
>14cc	34 14					.word IOInkey              ; index 10
>14ce	92 14					.word IOInput              ; index 12
>14d0	c2 13					.word ExternLoad           ; index 14
>14d2	78 14					.word IOLocate             ; index 16
>14d4	66 14					.word IOPaper              ; index 18
>14d6	26 14					.word IOPrintChar          ; index 20
>14d8	26 14					.word IOPrintAscii         ; index 22
>14da	96 13					.word ExternSave           ; index 24
>14dc	1e 14					.word IOTab                ; index 26
>14de	b7 14					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.14e0					section_end_device:
.14e0					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.14e0					ErrorHandler:
.14e0	8a		txa				txa
.14e1	48		pha				pha
.14e2	a9 01		lda #$01			lda 	#1 							; red
.14e4	a2 08		ldx #$08		ldx	#8
.14e6	20 bf 14	jsr $14bf		jsr	deviceHandler
.14e9	68		pla				pla
.14ea	aa		tax				tax
.14eb	a9 56		lda #$56			lda 	#(ErrorTextList) & $FF
.14ed	85 2a		sta $2a				sta 	temp0
.14ef	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.14f1	85 2b		sta $2b				sta 	1+(temp0)
.14f3	ca		dex		_EHFind:dex									; errors start at 1
.14f4	f0 10		beq $1506			beq 	_EHFound
.14f6	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.14f8	38		sec				sec
.14f9	a5 2a		lda $2a				lda 	temp0
.14fb	71 2a		adc ($2a),y			adc 	(temp0),y
.14fd	85 2a		sta $2a				sta 	temp0
.14ff	90 f2		bcc $14f3			bcc 	_EHFind
.1501	e6 2b		inc $2b				inc 	temp0+1
.1503	4c f3 14	jmp $14f3			jmp 	_EHFind
.1506					_EHFound:
.1506	20 fe 17	jsr $17fe			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1509	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.150b	b1 28		lda ($28),y			lda 	(codePtr),y
.150d	f0 39		beq $1548			beq 	_EHNoLine
.150f	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1511	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1514	90 32		bcc $1548			bcc 	_EHNoLine
.1516	a9 52		lda #$52			lda 	#(EHAtMsg) & $FF
.1518	85 2a		sta $2a				sta 	temp0
.151a	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.151c	85 2b		sta $2b				sta 	1+(temp0)
.151e	20 fe 17	jsr $17fe			jsr 	EHPrintAscii
.1521	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1523	a2 00		ldx #$00			ldx 	#0
.1525	b1 28		lda ($28),y			lda 	(codePtr),y
.1527	95 50		sta $50,x			sta 	esInt0,x
.1529	c8		iny				iny
.152a	b1 28		lda ($28),y			lda 	(codePtr),y
.152c	95 58		sta $58,x			sta 	esInt1,x
.152e	a9 00		lda #$00			lda 	#0
.1530	95 60		sta $60,x			sta 	esInt2,x
.1532	95 68		sta $68,x			sta 	esInt3,x
.1534	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1536	85 2a		sta $2a				sta 	temp0
.1538	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.153a	85 2b		sta $2b				sta 	1+(temp0)
.153c	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.153e	a9 00		lda #$00			lda 	#0							; stack position zero.
.1540	a2 0e		ldx #$0e		ldx	#14
.1542	20 91 32	jsr $3291		jsr	mainHandler
.1545	20 fe 17	jsr $17fe			jsr 	EHPrintAscii
.1548					_EHNoLine:
.1548	a2 04		ldx #$04		ldx	#4
.154a	20 bf 14	jsr $14bf		jsr	deviceHandler
.154d	a2 02		ldx #$02		ldx	#2
.154f	20 06 1c	jsr $1c06		jsr	interactionHandler
.1552					EHAtMsg:
>1552	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.1556					ErrorTextList:
>1556	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>155e	20 6e 6f 74 20 50 72 65 73 65 6e 74
>156a	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1572	45 72 72 6f 72
>1577	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>157f	64 69 73 61 62 6c 65 64
>1587	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>158f	6f 6e 20 66 61 69 6c 65 64
>1598	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15a0	42 79 20 5a 65 72 6f
>15a7	04 53 74 6f 70				.text 4,"Stop"
>15ac	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15b4	73 6d 61 74 63 68
>15ba	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15c2	20 56 61 6c 75 65
>15c8	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15d0	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>15de	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>15e6	20 63 6f 6d 6d 61
>15ec	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>15f4	20 72 65 66 65 72 65 6e 63 65
>15fe	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>1606	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1614	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>161c	74 6f 6f 20 6c 6f 6e 67
>1624	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>162c	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1639	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1641	69 74 68 6f 75 74 20 52 45 50 45 41 54
>164e	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1656	74 68 6f 75 74 20 46 4f 52
>165f	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1667	74 68 6f 75 74 20 57 48 49 4c 45
>1672	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>167a	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1687	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>168f	54 20 69 6e 64 65 78
>1696	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>169e	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16ae	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16b6	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16c5	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16cd	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>16dd	63 65
>16df	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>16e7	20 50 72 6f 63 65 64 75 72 65
>16f1	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>16f9	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1709	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1711	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>171f	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>1727	75 69 72 65 73 20 61 72 72 61 79
>1732	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>173a	61 79 20 69 6e 64 65 78
>1742	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>174a	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>175a	6e 64 69 63 65 73
>1760	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>1768	64 61 74 61
>176c	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>1774	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1781	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1789	69 6c 65 64
>178d	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1795	69 6c 65 64
>1799	05 42 72 65 61 6b			.text 5,"Break"
>179f	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17a7	6d 65 6d 6f 72 79
>17ad	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17b5	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17c4	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17cc	72 61 6e 64 2f 4d 6f 64 65
>17d5	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>17dd	6f 75 74 20 6f 66 20 72 61 6e 67 65
>17e9	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>17f1	68 61 6e 67 65 64 20 76 61 6c 75 65
>17fd	00					.byte 0

;******  Return to file: error/errorhandler.asm

.17fe					EHPrintAscii:
.17fe	a0 00		ldy #$00			ldy 	#0
.1800	b1 2a		lda ($2a),y			lda 	(temp0),y
.1802	aa		tax				tax
.1803	f0 0f		beq $1814			beq 	_EHPExit
.1805					_EHPLoop:
.1805	c8		iny				iny
.1806	8a		txa				txa
.1807	48		pha				pha
.1808	b1 2a		lda ($2a),y			lda 	(temp0),y
.180a	a2 16		ldx #$16		ldx	#22
.180c	20 bf 14	jsr $14bf		jsr	deviceHandler
.180f	68		pla				pla
.1810	aa		tax				tax
.1811	ca		dex				dex
.1812	d0 f1		bne $1805			bne 	_EHPLoop
.1814					_EHPExit:
.1814	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1815					section_end_error:
.1815					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1815					ExtensionHandler:
.1815	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1817	f0 16		beq $182f			beq 	_ExtensionForce
.1819	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.181b	d0 08		bne $1825			bne 	_ExtensionUnary 			; is passed in A.
.181d	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.181f	c8		iny				iny
.1820	0a		asl a				asl 	a
.1821	aa		tax				tax
.1822	7c 26 18	jmp ($1826,x)			jmp 	(Group2Vectors-12,x)
.1825					_ExtensionUnary:
.1825	48		pha				pha 								; save stack pos in A
.1826	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1828	c8		iny				iny
.1829	0a		asl a				asl 	a
.182a	aa		tax				tax
.182b	68		pla				pla 								; restore stack pos and call group3 command.
.182c	7c 30 18	jmp ($1830,x)			jmp 	(Group3Vectors-12,X)
.182f					_ExtensionForce:
.182f	4c 48 18	jmp $1848			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1832					Group2Vectors:
>1832	5d 19					.word	Command_VPoke            ; $86 vpoke
>1834	60 19					.word	Command_VDoke            ; $87 vdoke
>1836	3a 19					.word	Command_VLoad            ; $88 vload
>1838	5a 18					.word	CommandMode              ; $89 mode
>183a	03 19					.word	CommandPalette           ; $8a palette

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.183c					Group3Vectors:
>183c	a1 19					.word	Command_VPeek            ; $86 vpeek(
>183e	a4 19					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1840					XEvaluateInteger:
.1840	8a		txa				txa
.1841	a2 08		ldx #$08		ldx	#8
.1843	20 91 32	jsr $3291		jsr	mainHandler
.1846	aa		tax				tax
.1847	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.1848					ForceMode0:
.1848	a2 00		ldx #$00			ldx 	#0
.184a	86 50		stx $50				stx 	esInt0 						; in case we do it.
.184c					_FMCheck:
.184c	bd d7 18	lda $18d7,x			lda 	CMModeList,x 				; do we need to switch ?
.184f	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.1852	d0 11		bne $1865			bne 	CMSetMode 					; different so switch.
.1854	e8		inx				inx
.1855	e0 04		cpx #$04			cpx 	#4
.1857	d0 f3		bne $184c			bne 	_FMCheck
.1859	60		rts				rts
.185a					CommandMode:
.185a	a2 00		ldx #$00			ldx 	#0
.185c	20 40 18	jsr $1840			jsr 	XEvaluateInteger
.185f	a5 68		lda $68				lda 	esInt3
.1861	29 70		and #$70			and 	#$70
.1863	d0 06		bne $186b			bne 	CMNoExpand
.1865					CMSetMode:
.1865	20 b6 18	jsr $18b6			jsr 	CMExpandMode
.1868	4c 7f 18	jmp $187f			jmp 	CMUpdateMode
.186b					CMNoExpand:
.186b	a5 50		lda $50				lda 	esInt0
.186d	8d e6 0b	sta $0be6			sta 	currentMode
.1870	a5 58		lda $58				lda 	esInt1
.1872	8d e7 0b	sta $0be7			sta 	currentMode+1
.1875	a5 60		lda $60				lda 	esInt2
.1877	8d e8 0b	sta $0be8			sta 	currentMode+2
.187a	a5 68		lda $68				lda 	esInt3
.187c	8d e9 0b	sta $0be9			sta 	currentMode+3
.187f					CMUpdateMode:
.187f	a2 11		ldx #$11			ldx 	#$11
.1881					_CMClear:
.1881	a9 00		lda #$00			lda 	#0
.1883	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1886	ca		dex				dex
.1887	10 f8		bpl $1881			bpl 	_CMClear
.1889	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.188c	48		pha				pha 								; stack twice.
.188d	48		pha				pha
.188e	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1890	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1892	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1895	68		pla				pla 								; get back
.1896	20 db 18	jsr $18db			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1899	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.189c	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.189d	4a		lsr a				lsr 	a
.189e	4a		lsr a				lsr 	a
.189f	20 db 18	jsr $18db			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18a2	8d 2b 9f	sta $9f2b			sta 	$9F2B
.18a5	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.18a7	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18aa	20 e6 18	jsr $18e6			jsr 	CMDecodeLayer 				; and decode layer 0
.18ad	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18af	ad e7 0b	lda $0be7			lda 	currentMode+1
.18b2	20 e6 18	jsr $18e6			jsr 	CMDecodeLayer
.18b5	60		rts				rts
.18b6					CMExpandMode:
.18b6	a5 50		lda $50				lda 	esInt0 						; get mode number
.18b8	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.18ba	b0 16		bcs $18d2			bcs 	_CMModeError
.18bc	0a		asl a				asl 	a 							; x 4 into X
.18bd	0a		asl a				asl 	a
.18be	aa		tax				tax
.18bf	98		tya				tya
.18c0	48		pha				pha
.18c1	a0 00		ldy #$00			ldy 	#0
.18c3					_CMEMCopy:
.18c3	bd d7 18	lda $18d7,x			lda 	CMModeList,x
.18c6	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.18c9	e8		inx				inx
.18ca	c8		iny				iny
.18cb	c0 04		cpy #$04			cpy 	#4
.18cd	d0 f4		bne $18c3			bne 	_CMEMCopy
.18cf	68		pla				pla
.18d0	a8		tay				tay
.18d1	60		rts				rts
.18d2					_CMModeError:
.18d2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18d4	20 e0 14	jsr $14e0		jsr	errorHandler
.18d7					CMModeList:
>18d7	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.18db					CMEndModeList:
.18db					CMToScale:
.18db	29 03		and #$03			and 	#3 							; lower 2 bits only
.18dd	aa		tax				tax 								; put in X for counting
.18de	a9 00		lda #$00			lda 	#0 							; zero result
.18e0	38		sec				sec 								; first time rotate CS in
.18e1					_CMTSLoop:
.18e1	6a		ror a				ror 	a
.18e2	ca		dex				dex
.18e3	10 fc		bpl $18e1			bpl 	_CMTSLoop
.18e5	60		rts				rts
.18e6					CMDecodeLayer:
.18e6	48		pha				pha 								; save it.
.18e7	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.18e9	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.18ec	68		pla				pla 								; get it back
.18ed	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.18ef	f0 02		beq $18f3			beq 	_CMDLNotSet
.18f1	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.18f3					_CMDLNotSet:
.18f3	e0 00		cpx #$00			cpx 	#0
.18f5	f0 06		beq $18fd			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.18f7	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.18f9	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.18fc	60		rts				rts
.18fd					_CMDLayer0:
.18fd	09 80		ora #$80			ora 	#$80 						; tile base is $80
.18ff	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1902	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/palette.asm

.1903					CommandPalette:
.1903	a9 00		lda #$00			lda 	#0
.1905	a2 0a		ldx #$0a		ldx	#10
.1907	20 91 32	jsr $3291		jsr	mainHandler
.190a	a2 00		ldx #$00		ldx	#0
.190c	20 91 32	jsr $3291		jsr	mainHandler
.190f	a9 01		lda #$01			lda 	#1
.1911	a2 06		ldx #$06		ldx	#6
.1913	20 91 32	jsr $3291		jsr	mainHandler
.1916	a5 50		lda $50				lda 	esInt0 					; get palette #
.1918	20 28 19	jsr $1928			jsr 	PointToPaletteA			; point to palette register
.191b	a5 51		lda $51				lda 	esInt0+1
.191d	8d 23 9f	sta $9f23			sta 	$9F23
.1920	a5 59		lda $59				lda 	esInt1+1
.1922	29 0f		and #$0f			and 	#$0F
.1924	8d 23 9f	sta $9f23			sta 	$9F23
.1927	60		rts				rts
.1928					PointToPaletteA:
.1928	0a		asl a				asl 	a 							; x 2 -> LSB
.1929	8d 20 9f	sta $9f20			sta 	$9F20
.192c	a9 00		lda #$00			lda 	#0 							; carry into A
.192e	2a		rol a				rol 	a
.192f	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1931	8d 21 9f	sta $9f21			sta 	$9F21
.1934	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1936	8d 22 9f	sta $9f22			sta 	$9F22
.1939	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.193a					Command_VLoad:
.193a	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.193c	20 06 2b	jsr $2b06			jsr 	EvaluateString
.193f	e8		inx				inx
.1940	20 a3 31	jsr $31a3			jsr 	MInt32False
.1943	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1945	95 50		sta $50,x			sta 	esInt0,x
.1947	a5 36		lda $36				lda 	lowMemory+1
.1949	95 58		sta $58,x			sta 	esInt1,x
.194b	ca		dex				dex
.194c	a2 0e		ldx #$0e		ldx	#14
.194e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1951	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1953	85 2a		sta $2a				sta 	temp0
.1955	a5 59		lda $59				lda 	esInt1+1
.1957	85 2b		sta $2b				sta 	temp0+1
.1959	20 c2 19	jsr $19c2			jsr 	LoadVRAMFile 					; load the VRAM file in.
.195c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.195d					Command_VPoke:
.195d	38		sec				sec 						; one byte , CS
.195e	b0 01		bcs $1961			bcs 	CmdVideoWrite
.1960					Command_VDoke:
.1960	18		clc				clc 						; two bytes, CC
.1961					CmdVideoWrite:
.1961	08		php				php 						; save one or two btes
.1962	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1964	20 40 18	jsr $1840			jsr 	XEvaluateInteger
.1967	20 23 32	jsr $3223			jsr 	CheckComma
.196a	e8		inx				inx
.196b	20 40 18	jsr $1840			jsr 	XEvaluateInteger
.196e	ca		dex				dex
.196f	20 80 19	jsr $1980			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1972	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1974	8d 23 9f	sta $9f23			sta 	$9F23
.1977	28		plp				plp 						; if it was Poke then exit
.1978	b0 05		bcs $197f			bcs 	_CVWExit
.197a	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.197c	8d 23 9f	sta $9f23			sta 	$9F23
.197f					_CVWExit:
.197f	60		rts				rts
.1980					SetUpTOSVRamAddress:
.1980	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1982	29 fe		and #$fe			and 	#$FE
.1984	15 68		ora $68,x			ora 	esInt3,x
.1986	d0 14		bne $199c			bne 	CVWValue
.1988	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.198a	8d 20 9f	sta $9f20			sta 	$9F20
.198d	b5 58		lda $58,x			lda 	esInt1,x
.198f	8d 21 9f	sta $9f21			sta	 	$9F21
.1992	b5 60		lda $60,x			lda 	esInt2,x
.1994	29 01		and #$01			and 	#1
.1996	09 10		ora #$10			ora 	#$10 				; step 1.
.1998	8d 22 9f	sta $9f22			sta 	$9F22
.199b	60		rts				rts
.199c					CVWValue:
.199c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.199e	20 e0 14	jsr $14e0		jsr	errorHandler
.19a1					Command_VPeek:
.19a1	38		sec				sec 						; one byte , CS
.19a2	b0 01		bcs $19a5			bcs 	CmdVideoRead
.19a4					Command_VDeek:
.19a4	18		clc				clc 						; two bytes, CC
.19a5					CmdVideoRead:
.19a5	08		php				php 						; save action on stack.
.19a6	aa		tax				tax 						; save stack position
.19a7	20 40 18	jsr $1840			jsr 	XEvaluateInteger 	; address
.19aa	20 16 32	jsr $3216			jsr 	CheckRightParen 	; closing right bracket.
.19ad	20 80 19	jsr $1980			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.19b0	20 a3 31	jsr $31a3			jsr 	MInt32False 		; zero return.
.19b3	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.19b6	95 50		sta $50,x			sta 	esInt0,x
.19b8	28		plp				plp 						; check if DOKE (carry was clear)
.19b9	b0 05		bcs $19c0			bcs 	_CVRExit
.19bb	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.19be	95 58		sta $58,x			sta 	esInt1,x
.19c0					_CVRExit:
.19c0	8a		txa				txa 						; return X position.
.19c1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bea					compressMode:
>0bea							.fill 	1
.19c2					LoadVRAMFile:
.19c2					_LVRLoop:
.19c2	20 12 1a	jsr $1a12			jsr 	LVFGet 						; get the next (never access direct)
.19c5	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.19c7	f0 3a		beq $1a03			beq 	_LVRExit
.19c9	b0 39		bcs $1a04			bcs 	_LVRLoad 					; load data in ?
.19cb	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.19cd	90 09		bcc $19d8			bcc 	_LVRSetAddress
.19cf	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.19d1	90 29		bcc $19fc			bcc 	_LVRSetCompress
.19d3	a2 01		ldx #$01			ldx 	#ErrorID_missing
.19d5	20 e0 14	jsr $14e0		jsr	errorHandler
.19d8					_LVRSetAddress:
.19d8	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.19da	20 12 1a	jsr $1a12			jsr 	LVFGet
.19dd	85 2c		sta $2c				sta 	temp1
.19df	a9 00		lda #$00			lda 	#0
.19e1	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.19e3	66 2c		ror $2c				ror 	temp1
.19e5	6a		ror a				ror		a
.19e6	46 2d		lsr $2d				lsr 	temp1+1
.19e8	66 2c		ror $2c				ror 	temp1
.19ea	6a		ror a				ror		a
.19eb	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.19ee	a5 2c		lda $2c				lda 	temp1
.19f0	8d 21 9f	sta $9f21			sta 	$9F21
.19f3	a5 2d		lda $2d				lda 	temp1+1
.19f5	09 10		ora #$10			ora 	#$10
.19f7	8d 22 9f	sta $9f22			sta 	$9F22
.19fa	d0 c6		bne $19c2			bne 	_LVRLoop
.19fc					_LVRSetCompress:
.19fc	29 07		and #$07			and 	#7
.19fe	8d ea 0b	sta $0bea			sta 	compressMode
.1a01	10 bf		bpl $19c2			bpl 	_LVRLoop
.1a03					_LVRExit:
.1a03	60		rts				rts
.1a04					_LVRLoad:
.1a04	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1a06	aa		tax				tax
.1a07					_LVRLCopy:
.1a07	20 12 1a	jsr $1a12			jsr 	LVFGet 						; write to data.
.1a0a	8d 23 9f	sta $9f23			sta 	$9F23
.1a0d	ca		dex				dex
.1a0e	d0 f7		bne $1a07			bne 	_LVRLCopy
.1a10	f0 b0		beq $19c2			beq 	_LVRLoop
.1a12	84 32		sty $32		LVFGet:	sty 	tempShort
.1a14	a0 00		ldy #$00			ldy 	#0
.1a16	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a18	a4 32		ldy $32				ldy	 	tempShort
.1a1a	e6 2a		inc $2a				inc 	temp0
.1a1c	d0 02		bne $1a20			bne 	_LVFGExit
.1a1e	e6 2b		inc $2b				inc 	temp0+1
.1a20					_LVFGExit:
.1a20	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1a21					section_end_extension:
.1a21					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1a21					floatingpointHandler:
.1a21	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1a23	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: basic.asm

.1a26					section_end_floatingpoint:
.1a26					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1a26					ColdStartEntry:
.1a26	a2 ff		ldx #$ff			ldx 	#$FF
.1a28	9a		txs				txs
.1a29	a2 02		ldx #$02		ldx	#2
.1a2b	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a2e	a0 ff		ldy #$ff			ldy 	#255
.1a30					_CSBanner:
.1a30	c8		iny				iny
.1a31	b9 57 1a	lda $1a57,y			lda 	Intro,y
.1a34	f0 14		beq $1a4a			beq 	_CSStart
.1a36	c9 08		cmp #$08			cmp 	#8
.1a38	90 08		bcc $1a42			bcc 	_CSInk
.1a3a	a2 16		ldx #$16		ldx	#22
.1a3c	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a3f	4c 30 1a	jmp $1a30			jmp 	_CSBanner
.1a42					_CSInk:
.1a42	a2 08		ldx #$08		ldx	#8
.1a44	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a47	4c 30 1a	jmp $1a30			jmp 	_CSBanner
.1a4a					_CSStart:
.1a4a	a2 12		ldx #$12		ldx	#18
.1a4c	20 91 32	jsr $3291		jsr	mainHandler
.1a4f	a2 04		ldx #$04		ldx	#4
.1a51	20 91 32	jsr $3291		jsr	mainHandler
.1a54	4c 69 1b	jmp $1b69			jmp 	WarmStartEntry
>1a57	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1a5f	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1a6f	20 2a 2a 2a 0d 0d
>1a75	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1a7d	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1a8d	32 30 32 31 0d 0d
>1a93	02 42 61 73 69 63 20				.text 	2,"Basic "
>1a9a	30 2e 31 37					.text "0.17"
>1a9e	20 28						.text 	" ("
>1aa0	31 38 2d 4d 61 72 2d 32				.text "18-Mar-2021"
>1aa8	30 32 31
>1aab	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1aaf					DeleteLine:
.1aaf	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1ab2	85 2a		sta $2a				sta 	temp0
.1ab4	ad c9 0a	lda $0ac9			lda 	basePage+1
.1ab7	85 2b		sta $2b				sta 	temp0+1
.1ab9	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1abb	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1abd	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1abf	d0 07		bne $1ac8			bne 	_DLNext
.1ac1	c8		iny				iny
.1ac2	a5 58		lda $58				lda 	esInt1
.1ac4	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1ac6	f0 06		beq $1ace			beq 	_DLFound
.1ac8	20 ec 1a	jsr $1aec	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1acb	d0 ec		bne $1ab9			bne 	_DLLoop
.1acd	60		rts				rts
.1ace					_DLFound:
.1ace	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1ad0	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ad2	a8		tay				tay 								; so we copy from (temp0),y
.1ad3	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1ad5					_DLCopyDown:
.1ad5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1ad7	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1ad9	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1adb	d0 02		bne $1adf			bne 	_DLNoCarry
.1add	e6 2b		inc $2b				inc 	temp0+1
.1adf					_DLNoCarry:
.1adf	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1ae1	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1ae3	d0 f0		bne $1ad5			bne 	_DLCopyDown
.1ae5	a5 2b		lda $2b				lda 	temp0+1
.1ae7	c5 36		cmp $36				cmp 	lowMemory+1
.1ae9	d0 ea		bne $1ad5			bne 	_DLCopyDown
.1aeb	60		rts				rts
.1aec					IAdvanceTemp0:
.1aec	84 32		sty $32				sty 	tempShort
.1aee	18		clc				clc
.1aef	a0 00		ldy #$00			ldy 	#0 							; get offset
.1af1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1af3	65 2a		adc $2a				adc 	temp0
.1af5	85 2a		sta $2a				sta 	temp0
.1af7	90 02		bcc $1afb			bcc 	_IATNoCarry
.1af9	e6 2b		inc $2b				inc 	temp0+1
.1afb					_IATNoCarry:
.1afb	b1 2a		lda ($2a),y			lda 	(temp0),y
.1afd	a4 32		ldy $32				ldy 	tempShort
.1aff	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1b01	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1b02					InsertLine:
.1b02	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1b05	85 2a		sta $2a				sta 	temp0
.1b07	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b0a	85 2b		sta $2b				sta 	temp0+1
.1b0c					_ILLoop:
.1b0c	a0 01		ldy #$01			ldy 	#1
.1b0e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b10	c5 50		cmp $50				cmp 	esInt0
.1b12	c8		iny				iny
.1b13	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b15	e5 58		sbc $58				sbc 	esInt1
.1b17	b0 05		bcs $1b1e			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1b19	20 ec 1a	jsr $1aec			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1b1c	d0 ee		bne $1b0c			bne 	_ILLoop
.1b1e					_ILFound:
.1b1e	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1b20	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1b22	a5 36		lda $36				lda 	lowMemory+1
.1b24	85 2d		sta $2d				sta 	temp1+1
.1b26	ad 28 0d	lda $0d28			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1b29	18		clc				clc 								; add 3 for the line number and offset.
.1b2a	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1b2c	a8		tay				tay
.1b2d	a2 00		ldx #$00			ldx 	#0
.1b2f	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1b31	91 2c		sta ($2c),y			sta 	(temp1),y
.1b33	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1b35	c5 2a		cmp $2a				cmp 	temp0
.1b37	d0 06		bne $1b3f			bne 	_ILMNext
.1b39	a5 2d		lda $2d				lda 	temp1+1
.1b3b	c5 2b		cmp $2b				cmp 	temp0+1
.1b3d	f0 0b		beq $1b4a			beq 	_ILMCopy
.1b3f					_ILMNext:
.1b3f	a5 2c		lda $2c				lda 	temp1
.1b41	d0 02		bne $1b45			bne 	_ILNoBorrow
.1b43	c6 2d		dec $2d				dec 	temp1+1
.1b45					_ILNoBorrow:
.1b45	c6 2c		dec $2c				dec 	temp1
.1b47	4c 2f 1b	jmp $1b2f			jmp 	_ILMove 					; and go round again
.1b4a					_ILMCopy:
.1b4a	98		tya				tya 								; Y is the offset of the new line.
.1b4b	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1b4d	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1b4f	a5 50		lda $50				lda 	esInt0
.1b51	91 2a		sta ($2a),y			sta 	(temp0),y
.1b53	c8		iny				iny
.1b54	a5 58		lda $58				lda 	esInt1
.1b56	91 2a		sta ($2a),y			sta 	(temp0),y
.1b58	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1b5a					_ILMCopy2:
.1b5a	b1 28		lda ($28),y			lda 	(codePtr),y
.1b5c	c8		iny				iny
.1b5d	c8		iny				iny
.1b5e	c8		iny				iny
.1b5f	91 2a		sta ($2a),y			sta 	(temp0),y
.1b61	88		dey				dey
.1b62	88		dey				dey
.1b63	cc 28 0d	cpy $0d28			cpy 	tokenBufferIndex
.1b66	d0 f2		bne $1b5a			bne 	_ILMCopy2
.1b68	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1b69					WarmStartEntry:
.1b69	a2 ff		ldx #$ff			ldx 	#$FF
.1b6b	9a		txs				txs
.1b6c	a9 fe		lda #$fe			lda 	#$FE
.1b6e	20 15 18	jsr $1815		jsr	extensionHandler
.1b71	a9 02		lda #$02			lda 	#2							; green text.
.1b73	a2 08		ldx #$08		ldx	#8
.1b75	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b78	a2 0c		ldx #$0c		ldx	#12
.1b7a	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b7d	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1b7f	85 28		sta $28				sta 	codePtr
.1b81	a5 2b		lda $2b				lda 	temp0+1
.1b83	85 29		sta $29				sta 	codePtr+1
.1b85	a2 04		ldx #$04		ldx	#4
.1b87	20 bf 14	jsr $14bf		jsr	deviceHandler
.1b8a	a2 06		ldx #$06		ldx	#6
.1b8c	20 54 3d	jsr $3d54		jsr	tokeniserHandler
.1b8f	c9 00		cmp #$00			cmp 	#0
.1b91	f0 25		beq $1bb8			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1b93	a9 25		lda #$25			lda 	#(tokenHeader) & $FF
.1b95	85 28		sta $28				sta 	codePtr
.1b97	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1b99	85 29		sta $29				sta 	1+(codePtr)
.1b9b	ad 28 0c	lda $0c28			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1b9e	c9 80		cmp #$80			cmp 	#$80
.1ba0	f0 c7		beq $1b69			beq 	WarmStartEntry
.1ba2	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1ba4	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1ba6	f0 15		beq $1bbd			beq 	HasLineNumber
.1ba8	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1baa	8d 25 0c	sta $0c25			sta 	tokenHeader 				; fake program line.
.1bad	8d 26 0c	sta $0c26			sta 	tokenHeader+1
.1bb0	8d 27 0c	sta $0c27			sta 	tokenHeader+2
.1bb3	a2 14		ldx #$14		ldx	#20
.1bb5	20 91 32	jsr $3291		jsr	mainHandler
.1bb8					WSEError:
.1bb8	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1bba	20 e0 14	jsr $14e0		jsr	errorHandler
.1bbd					HasLineNumber:
.1bbd	a0 03		ldy #$03			ldy 	#3 							; get line number
.1bbf	a9 00		lda #$00			lda 	#0
.1bc1	a2 08		ldx #$08		ldx	#8
.1bc3	20 91 32	jsr $3291		jsr	mainHandler
.1bc6	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1bc8	05 68		ora $68				ora 	esInt3
.1bca	d0 ec		bne $1bb8			bne 	WSEError
.1bcc	98		tya				tya 								; make codePtr point to code after the line number.
.1bcd	18		clc				clc 								; by skipping over the tokenised number.
.1bce	65 28		adc $28				adc 	codePtr
.1bd0	85 28		sta $28				sta 	codePtr
.1bd2	90 02		bcc $1bd6			bcc		_HLNNoCarry
.1bd4	e6 29		inc $29				inc 	codePtr+1
.1bd6					_HLNNoCarry:
.1bd6	98		tya				tya 								; subtract that offset from the code buffer index
.1bd7	38		sec				sec
.1bd8	49 ff		eor #$ff			eor 	#$FF
.1bda	6d 28 0d	adc $0d28			adc 	tokenBufferIndex
.1bdd	18		clc				clc 								; add space allowing for header & $80 trailer
.1bde	69 04		adc #$04			adc 	#4
.1be0	8d 28 0d	sta $0d28			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1be3	20 af 1a	jsr $1aaf			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1be6					_HLNNoDelete:
.1be6	ad 28 0d	lda $0d28			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1be9	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1beb	f0 0c		beq $1bf9			beq 	_HLMEditDone
.1bed	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1bef	18		clc				clc 								; workspace (1k)
.1bf0	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1bf2	c5 34		cmp $34				cmp 	highMemory+1
.1bf4	b0 0b		bcs $1c01			bcs 	_HLMMemory 					; nope, won't allowit.
.1bf6	20 02 1b	jsr $1b02			jsr 	InsertLine 					; insert the line in
.1bf9					_HLMEditDone:
.1bf9	a2 04		ldx #$04		ldx	#4
.1bfb	20 91 32	jsr $3291		jsr	mainHandler
.1bfe	4c 69 1b	jmp $1b69			jmp 	WarmStartEntry
.1c01					_HLMMemory:
.1c01	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1c03	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1c06					interactionHandler:
.1c06	7c 09 1c	jmp ($1c09,x)			jmp 	(interactionVectors,x)
.1c09					interactionVectors:
>1c09	26 1a					.word ColdStartEntry       ; index 0
>1c0b	69 1b					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1c0d					section_end_interaction:
.1c0d					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0beb					dataPtr:
>0beb							.fill 	2
.0bed					dataIndex:
>0bed							.fill 	1
.1c0d					CommandRead:
.1c0d	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1c0f	20 44 2b	jsr $2b44			jsr 	EvaluateReference
.1c12	20 53 1c	jsr $1c53			jsr 	SwapDPCP 					; use the data pointer.
.1c15	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1c17	c8		iny				iny
.1c18	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1c1a	f0 07		beq $1c23			beq 	_CRInData
.1c1c	88		dey				dey
.1c1d	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1c1f	aa		tax				tax
.1c20	20 54 23	jsr $2354			jsr 	ScanForward
.1c23					_CRInData:
.1c23	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1c25	20 f2 2a	jsr $2af2			jsr 	Evaluate
.1c28	ca		dex				dex 								; and write the value.
.1c29	20 a7 1e	jsr $1ea7			jsr 	WriteValue
.1c2c	20 53 1c	jsr $1c53			jsr 	SwapDPCP 					; get the code pointer back.
.1c2f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1c31	c8		iny				iny
.1c32	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1c34	f0 d7		beq $1c0d			beq 	CommandRead
.1c36	88		dey				dey
.1c37	60		rts				rts
.1c38					CommandData:
.1c38	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1c3a	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1c3c	20 54 23	jsr $2354			jsr 	ScanForward
.1c3f	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1c40	60		rts				rts
.1c41					CommandRestore:
.1c41	ad c8 0a	lda $0ac8			lda 	basePage
.1c44	8d eb 0b	sta $0beb			sta 	dataPtr
.1c47	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c4a	8d ec 0b	sta $0bec			sta 	dataPtr+1
.1c4d	a9 03		lda #$03			lda 	#3
.1c4f	8d ed 0b	sta $0bed			sta 	dataIndex
.1c52	60		rts				rts
.1c53					SwapDPCP:
.1c53	8a		txa				txa
.1c54	48		pha				pha
.1c55	98		tya				tya 								; swap Y, DataIndex
.1c56	ac ed 0b	ldy $0bed			ldy 	DataIndex
.1c59	8d ed 0b	sta $0bed			sta 	DataIndex
.1c5c	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1c5e	ae eb 0b	ldx $0beb			ldx 	dataptr
.1c61	8d eb 0b	sta $0beb			sta 	dataPtr
.1c64	86 28		stx $28				stx 	codePtr
.1c66	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1c68	ae ec 0b	ldx $0bec			ldx 	dataptr+1
.1c6b	8d ec 0b	sta $0bec			sta 	dataPtr+1
.1c6e	86 29		stx $29				stx 	codePtr+1
.1c70	68		pla				pla
.1c71	aa		tax				tax
.1c72	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1c73					CommandGOSUB:
.1c73	20 0f 2b	jsr $2b0f			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1c76	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1c78	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1c7a	20 3e 32	jsr $323e			jsr 	RSClaim
.1c7d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1c7f	20 6a 32	jsr $326a			jsr 	RSSavePosition
.1c82	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1c84	f0 1b		beq $1ca1			beq 	GotoTOS 					; and do a GOTO there.
.1c86					CommandRETURN:
.1c86	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1c88	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1c8a	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1c8c	f0 05		beq $1c93			beq 	_isok
.1c8e	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1c90	20 e0 14	jsr $14e0		jsr	errorHandler
.1c93					_isok:
.1c93	a9 01		lda #$01			lda 	#1
.1c95	20 7d 32	jsr $327d			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1c98	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1c9a	20 60 32	jsr $3260			jsr 	RSFree
.1c9d	60		rts				rts
.1c9e					CommandGOTO:
.1c9e	20 0f 2b	jsr $2b0f			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1ca1					GotoTOS:
.1ca1	20 38 26	jsr $2638			jsr 	ResetCodeAddress 			; simple search.
.1ca4					_GotoSearch:
.1ca4	a0 00		ldy #$00			ldy 	#0 							; get offset
.1ca6	b1 28		lda ($28),y			lda 	(codePtr),y
.1ca8	f0 21		beq $1ccb			beq 	_GotoError 					; not found.
.1caa	c8		iny				iny									; check LSB match
.1cab	b1 28		lda ($28),y			lda 	(codePtr),y
.1cad	d5 50		cmp $50,x			cmp 	esInt0,x
.1caf	d0 07		bne $1cb8			bne 	_GotoNext
.1cb1	c8		iny				iny
.1cb2	b1 28		lda ($28),y			lda 	(codePtr),y
.1cb4	d5 58		cmp $58,x			cmp 	esInt1,x
.1cb6	f0 10		beq $1cc8			beq 	_GotoFound
.1cb8					_GotoNext:
.1cb8	a0 00		ldy #$00			ldy 	#0 							; go next line
.1cba	b1 28		lda ($28),y			lda 	(codePtr),y
.1cbc	18		clc				clc
.1cbd	65 28		adc $28				adc 	codePtr
.1cbf	85 28		sta $28				sta 	codePtr
.1cc1	90 e1		bcc $1ca4			bcc 	_GotoSearch
.1cc3	e6 29		inc $29				inc 	codePtr+1
.1cc5	4c a4 1c	jmp $1ca4			jmp 	_GotoSearch
.1cc8					_GotoFound:
.1cc8	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1cca	60		rts				rts
.1ccb					_GotoError:
.1ccb	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1ccd	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0bee					InputBuffer:
>0bee							.fill 	MaxInputSize+1
.1cd0					Command_Input:
.1cd0	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1cd2	c8		iny				iny
.1cd3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1cd5	f0 f9		beq $1cd0			beq 	Command_Input
.1cd7	88		dey				dey 							; undo consume
.1cd8	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1cda	f0 54		beq $1d30			beq 	_CIExit 				; : or EOL, exit
.1cdc	c9 80		cmp #$80			cmp 	#TOK_EOL
.1cde	f0 50		beq $1d30			beq 	_CIExit
.1ce0	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1ce2	90 12		bcc $1cf6			bcc 	_CIVariable
.1ce4	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1ce6	d0 43		bne $1d2b			bne 	_CISyntax
.1ce8	a2 00		ldx #$00			ldx 	#0
.1cea	20 06 2b	jsr $2b06			jsr 	EvaluateString 			; evaluate and print string
.1ced	20 09 1f	jsr $1f09			jsr 	TOSToTemp0
.1cf0	20 ff 1d	jsr $1dff			jsr 	PrintString
.1cf3	4c d0 1c	jmp $1cd0			jmp 	Command_Input
.1cf6					_CIVariable:
.1cf6	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1cf8	20 44 2b	jsr $2b44			jsr 	EvaluateReference  		; this is where its going
.1cfb					_CIRetry:
.1cfb	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1cfd	a2 14		ldx #$14		ldx	#20
.1cff	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d02	98		tya				tya
.1d03	48		pha				pha
.1d04	20 44 1d	jsr $1d44			jsr 	InputString 			; input a string (manually)
.1d07	a2 01		ldx #$01			ldx 	#1
.1d09	20 31 1d	jsr $1d31			jsr 	BufferToStackX 			; make stack,x ref input string.
.1d0c	a5 48		lda $48				lda 	esType 					; if target type numeric
.1d0e	29 40		and #$40			and 	#$40 					; then convert to number
.1d10	d0 11		bne $1d23			bne 	_CIWrite
.1d12	a2 01		ldx #$01			ldx 	#1
.1d14	20 09 1f	jsr $1f09			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1d17	a9 0a		lda #$0a			lda 	#10
.1d19	20 11 30	jsr $3011			jsr 	MInt32FromString 		; convert it back from a string.
.1d1c	68		pla				pla
.1d1d	a8		tay				tay
.1d1e	b0 03		bcs $1d23			bcs 	_CIWrite 				; successfully converted.
.1d20	18		clc				clc 							; default fail FP conversion
.1d21	90 d8		bcc $1cfb			bcc		_CIRetry				; failed, try again.
.1d23					_CIWrite:
.1d23	a2 00		ldx #$00			ldx 	#0
.1d25	20 a7 1e	jsr $1ea7			jsr 	WriteValue
.1d28	4c d0 1c	jmp $1cd0			jmp 	Command_Input
.1d2b					_CISyntax:
.1d2b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d2d	20 e0 14	jsr $14e0		jsr	errorHandler
.1d30					_CIExit:
.1d30	60		rts				rts
.1d31					BufferToStackX:
.1d31	a9 ee		lda #$ee			lda 	#InputBuffer & $FF
.1d33	95 50		sta $50,x			sta 	esInt0,x
.1d35	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1d37	95 58		sta $58,x			sta 	esInt1,x
.1d39	a9 00		lda #$00			lda 	#0
.1d3b	95 60		sta $60,x			sta 	esInt2,x
.1d3d	95 68		sta $68,x			sta 	esInt3,x
.1d3f	a9 40		lda #$40			lda 	#$40
.1d41	95 48		sta $48,x			sta 	esType,x
.1d43	60		rts				rts
.1d44					InputString:
.1d44	a9 00		lda #$00			lda 	#0
.1d46	8d ee 0b	sta $0bee			sta 	InputBuffer
.1d49					_InputLoop:
.1d49	a2 00		ldx #$00		ldx	#0
.1d4b	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d4e	a2 0a		ldx #$0a		ldx	#10
.1d50	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d53	c9 00		cmp #$00			cmp 	#0
.1d55	f0 f2		beq $1d49			beq 	_InputLoop
.1d57	c9 08		cmp #$08			cmp 	#8
.1d59	f0 19		beq $1d74			beq 	_InputBackspace
.1d5b	c9 0d		cmp #$0d			cmp 	#13
.1d5d	f0 21		beq $1d80			beq 	_InputExit
.1d5f	ae ee 0b	ldx $0bee			ldx 	InputBuffer
.1d62	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1d64	f0 e3		beq $1d49			beq 	_InputLoop
.1d66	9d ef 0b	sta $0bef,x			sta 	InputBuffer+1,x 		; write char
.1d69	ee ee 0b	inc $0bee			inc 	InputBuffer 			; advance count.
.1d6c					_InputPrintLoop:
.1d6c	a2 14		ldx #$14		ldx	#20
.1d6e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d71	4c 49 1d	jmp $1d49			jmp	 	_InputLoop
.1d74					_InputBackspace:
.1d74	ad ee 0b	lda $0bee			lda 	InputBuffer 			; at start
.1d77	f0 d0		beq $1d49			beq 	_InputLoop
.1d79	ce ee 0b	dec $0bee			dec 	InputBuffer
.1d7c	a9 08		lda #$08			lda 	#8
.1d7e	d0 ec		bne $1d6c			bne 	_InputPrintLoop
.1d80					_InputExit:
.1d80	a2 04		ldx #$04		ldx	#4
.1d82	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d85	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0c0f					lastPrintToken:
>0c0f							.fill 	1
.1d86					Command_Print:
.1d86	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1d88	8d 0f 0c	sta $0c0f			sta 	lastPrintToken
.1d8b	88		dey				dey
.1d8c					_PrintLoopSkip:
.1d8c	c8		iny				iny
.1d8d					_PrintLoop:
.1d8d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1d8f	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1d91	f0 5b		beq $1dee			beq 	_PrintExit
.1d93	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1d95	f0 57		beq $1dee			beq 	_PrintExit
.1d97	8d 0f 0c	sta $0c0f			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1d9a	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1d9c	f0 ee		beq $1d8c			beq 	_PrintLoopSkip
.1d9e	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1da0	f0 3c		beq $1dde			beq	 	_PrintNewLine
.1da2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1da4	f0 40		beq $1de6			beq 	_PrintTab
.1da6	20 f0 2a	jsr $2af0			jsr 	EvaluateRoot 				; evaluate something at the root
.1da9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1dab	85 2a		sta $2a				sta 	temp0
.1dad	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1daf	85 2b		sta $2b				sta 	1+(temp0)
.1db1	a5 48		lda $48				lda 	esType 						; get type
.1db3	f0 15		beq $1dca			beq		_PrintInteger
.1db5	4a		lsr a				lsr 	a 							; check for floating point
.1db6	b0 08		bcs $1dc0			bcs 	_PrintFloat
.1db8					_PrintString:
.1db8	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1dba	20 09 1f	jsr $1f09			jsr 	TOSToTemp0
.1dbd	4c d8 1d	jmp $1dd8			jmp 	_PrintTemp0 				; print no leading space.
.1dc0					_PrintFloat:
.1dc0	a9 00		lda #$00			lda 	#0 							; stack level.
.1dc2	a2 14		ldx #$14		ldx	#20
.1dc4	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.1dc7	4c d1 1d	jmp $1dd1			jmp 	_PrintSpaceTemp0
.1dca					_PrintInteger:
.1dca	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1dcc	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1dce	20 f9 30	jsr $30f9			jsr 	MInt32ToString				; convert to text
.1dd1					_PrintSpaceTemp0:
.1dd1	a9 20		lda #$20			lda 	#32
.1dd3	a2 14		ldx #$14		ldx	#20
.1dd5	20 bf 14	jsr $14bf		jsr	deviceHandler
.1dd8					_PrintTemp0:
.1dd8	20 ff 1d	jsr $1dff			jsr 	PrintString
.1ddb	4c 8d 1d	jmp $1d8d			jmp 	_PrintLoop
.1dde					_PrintNewLine:
.1dde	a2 04		ldx #$04		ldx	#4
.1de0	20 bf 14	jsr $14bf		jsr	deviceHandler
.1de3	4c 8c 1d	jmp $1d8c			jmp 	_PrintLoopSkip
.1de6					_PrintTab:
.1de6	a2 1a		ldx #$1a		ldx	#26
.1de8	20 bf 14	jsr $14bf		jsr	deviceHandler
.1deb	4c 8c 1d	jmp $1d8c			jmp 	_PrintLoopSkip
.1dee					_PrintExit:
.1dee	ad 0f 0c	lda $0c0f			lda		lastPrintToken 				; check last token
.1df1	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1df3	f0 09		beq $1dfe			beq 	_PrintExit2
.1df5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1df7	f0 05		beq $1dfe			beq 	_PrintExit2
.1df9	a2 04		ldx #$04		ldx	#4
.1dfb	20 bf 14	jsr $14bf		jsr	deviceHandler
.1dfe					_PrintExit2:
.1dfe	60		rts				rts
.1dff					PrintString:
.1dff	8a		txa				txa
.1e00	48		pha				pha
.1e01	98		tya				tya
.1e02	48		pha				pha
.1e03	a0 00		ldy #$00			ldy 	#0							; get length
.1e05	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e07	aa		tax				tax 								; into X
.1e08	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1e0a	f0 10		beq $1e1c			beq 	_PSExit
.1e0c	ca		dex				dex
.1e0d	8a		txa				txa
.1e0e	48		pha				pha
.1e0f	c8		iny				iny
.1e10	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e12	a2 14		ldx #$14		ldx	#20
.1e14	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e17	68		pla				pla
.1e18	aa		tax				tax
.1e19	4c 08 1e	jmp $1e08			jmp 	_PSLoop
.1e1c					_PSExit:
.1e1c	68		pla				pla
.1e1d	a8		tay				tay
.1e1e	68		pla				pla
.1e1f	aa		tax				tax
.1e20	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.1e21					Command_CLS:
.1e21	a2 02		ldx #$02		ldx	#2
.1e23	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e26	60		rts				rts
.1e27					Command_Ink:
.1e27	a2 00		ldx #$00			ldx 	#0
.1e29	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger
.1e2c	a2 08		ldx #$08		ldx	#8
.1e2e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e31	60		rts				rts
.1e32					Command_Paper:
.1e32	a2 00		ldx #$00			ldx 	#0
.1e34	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger
.1e37	a2 12		ldx #$12		ldx	#18
.1e39	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e3c	60		rts				rts
.1e3d					Command_Locate:
.1e3d	a2 00		ldx #$00			ldx 	#0
.1e3f	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger
.1e42	20 23 32	jsr $3223			jsr 	CheckComma
.1e45	e8		inx				inx
.1e46	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger
.1e49	98		tya				tya
.1e4a	48		pha				pha
.1e4b	a4 51		ldy $51				ldy 	esInt0+1
.1e4d	a5 50		lda $50				lda 	esInt0
.1e4f	a2 10		ldx #$10		ldx	#16
.1e51	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e54	68		pla				pla
.1e55	a8		tay				tay
.1e56	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.1e57					Command_VDU:
.1e57	20 0f 2b	jsr $2b0f			jsr 	EvaluateRootInteger 			; get integer at root.
.1e5a	a5 50		lda $50				lda 	esInt0
.1e5c	a2 14		ldx #$14		ldx	#20
.1e5e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e61					_CVNext:
.1e61	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.1e63	c8		iny				iny
.1e64	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.1e66	f0 ef		beq $1e57			beq 	Command_VDU
.1e68	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1e6a	d0 0a		bne $1e76			bne 	_CVExit
.1e6c	a5 58		lda $58				lda 	esInt1
.1e6e	a2 14		ldx #$14		ldx	#20
.1e70	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e73	4c 61 1e	jmp $1e61			jmp 	_CVNext
.1e76	88		dey		_CVExit:dey
.1e77	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.1e78					Command_Assert:
.1e78	20 0f 2b	jsr $2b0f			jsr 	EvaluateRootInteger 		; what is being asserted.
.1e7b	20 ca 31	jsr $31ca			jsr 	MInt32Zero 					; is it true ?
.1e7e	f0 01		beq $1e81			beq 	_CAError
.1e80	60		rts				rts
.1e81					_CAError:
.1e81	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1e83	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.1e86					Command_Dim:
.1e86	a2 02		ldx #$02		ldx	#2
.1e88	20 22 41	jsr $4122		jsr	variableHandler
.1e8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1e8d	c8		iny				iny
.1e8e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1e90	f0 f4		beq $1e86			beq 	Command_Dim
.1e92	88		dey				dey 								; unpick get
.1e93	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.1e94					CommandLet:
.1e94	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1e96	20 44 2b	jsr $2b44			jsr 	EvaluateReference
.1e99	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1e9b	20 0b 32	jsr $320b			jsr 	CheckToken
.1e9e	e8		inx				inx 								; do RHS
.1e9f	20 f2 2a	jsr $2af2			jsr 	Evaluate 					; evaluate and dereference
.1ea2	ca		dex				dex
.1ea3	20 a7 1e	jsr $1ea7			jsr 	WriteValue 					; write it out
.1ea6	60		rts				rts
.1ea7					WriteValue:
.1ea7	98		tya				tya
.1ea8	48		pha				pha
.1ea9	20 09 1f	jsr $1f09			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1eac	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.1eae	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.1eb0	29 40		and #$40			and 	#$40
.1eb2	d0 50		bne $1f04			bne		_WVType
.1eb4	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1eb6	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.1eb8	29 40		and #$40			and 	#$40
.1eba	d0 1f		bne $1edb			bne 	_WVCopyString
.1ebc	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.1ebe	15 49		ora $49,x			ora 	esType+1,x
.1ec0	4a		lsr a				lsr 	a
.1ec1	90 22		bcc $1ee5			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1ec3	b5 48		lda $48,x			lda 	esType,x
.1ec5	4a		lsr a				lsr 	a
.1ec6	90 3c		bcc $1f04			bcc 	_WVType
.1ec8	e8		inx				inx 								; force the value being written to be a float.
.1ec9	20 54 27	jsr $2754			jsr 	BPMakeFloat
.1ecc	ca		dex				dex
.1ecd	20 09 1f	jsr $1f09			jsr 	TOSToTemp0 					; set Temp0 to write address
.1ed0	e8		inx				inx
.1ed1	8a		txa				txa
.1ed2	a2 20		ldx #$20		ldx	#32
.1ed4	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.1ed7	aa		tax				tax
.1ed8	4c 01 1f	jmp $1f01			jmp 	_WVCopyExit
.1edb					_WVCopyString:
.1edb	8a		txa				txa
.1edc	a2 0e		ldx #$0e		ldx	#14
.1ede	20 49 35	jsr $3549		jsr	stringHandler
.1ee1	aa		tax				tax
.1ee2	4c 01 1f	jmp $1f01			jmp 	_WVCopyExit
.1ee5					_WVCopyData4:
.1ee5	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.1ee7	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1ee9	d0 10		bne $1efb			bne 	_WVCopyData1
.1eeb	a0 03		ldy #$03			ldy 	#3
.1eed	b5 69		lda $69,x			lda 	esInt3+1,x
.1eef	91 2a		sta ($2a),y			sta 	(temp0),y
.1ef1	88		dey				dey
.1ef2	b5 61		lda $61,x			lda 	esInt2+1,x
.1ef4	91 2a		sta ($2a),y			sta 	(temp0),y
.1ef6	88		dey				dey
.1ef7	b5 59		lda $59,x			lda 	esInt1+1,x
.1ef9	91 2a		sta ($2a),y			sta 	(temp0),y
.1efb					_WVCopyData1:
.1efb	a0 00		ldy #$00			ldy 	#0
.1efd	b5 51		lda $51,x			lda 	esInt0+1,x
.1eff	91 2a		sta ($2a),y			sta 	(temp0),y
.1f01					_WVCopyExit:
.1f01	68		pla				pla
.1f02	a8		tay				tay
.1f03	60		rts				rts
.1f04					_WVType:
.1f04	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1f06	20 e0 14	jsr $14e0		jsr	errorHandler
.1f09					TOSToTemp0:
.1f09	b5 50		lda $50,x			lda 	esInt0,x
.1f0b	85 2a		sta $2a				sta 	temp0
.1f0d	b5 58		lda $58,x			lda 	esInt1,x
.1f0f	85 2b		sta $2b				sta 	temp0+1
.1f11	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.1f12					Command_Poke:
.1f12	a9 01		lda #$01			lda 	#1
.1f14	d0 06		bne $1f1c			bne 	PokeGeneral
.1f16					Command_Doke:
.1f16	a9 02		lda #$02			lda 	#2
.1f18	d0 02		bne $1f1c			bne 	PokeGeneral
.1f1a					Command_Loke:
.1f1a	a9 03		lda #$03			lda 	#3
.1f1c					PokeGeneral:
.1f1c	48		pha				pha 								; save id (PDL = 123)
.1f1d	20 0f 2b	jsr $2b0f			jsr 	EvaluateRootInteger 		; target address
.1f20	20 23 32	jsr $3223			jsr	 	CheckComma
.1f23	e8		inx				inx
.1f24	20 11 2b	jsr $2b11			jsr 	EvaluateInteger 			; what value to POKE ?
.1f27	ca		dex				dex
.1f28	20 09 1f	jsr $1f09			jsr 	TOSToTemp0 					; temp0 points to the target address
.1f2b	84 32		sty $32				sty 	tempShort 					; save Y
.1f2d	68		pla				pla 								; get copy type (1-3) and dispatch
.1f2e	aa		tax				tax
.1f2f	ca		dex				dex
.1f30	f0 14		beq $1f46			beq 	_Poke1
.1f32	ca		dex				dex
.1f33	f0 0b		beq $1f40			beq 	_Poke2
.1f35	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1f37	a5 69		lda $69				lda 	esInt3+1
.1f39	91 2a		sta ($2a),y			sta 	(temp0),y
.1f3b	88		dey				dey
.1f3c	a5 61		lda $61				lda 	esInt2+1
.1f3e	91 2a		sta ($2a),y			sta 	(temp0),y
.1f40					_Poke2:
.1f40	a0 01		ldy #$01			ldy 	#1
.1f42	a5 59		lda $59				lda 	esInt1+1
.1f44	91 2a		sta ($2a),y			sta 	(temp0),y
.1f46					_Poke1:
.1f46	a0 00		ldy #$00			ldy 	#0
.1f48	a5 51		lda $51				lda 	esInt0+1
.1f4a	91 2a		sta ($2a),y			sta 	(temp0),y
.1f4c	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1f4e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.1f4f					Command_Rem:
.1f4f					Command_Rem2:
.1f4f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1f51	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1f53	d0 06		bne $1f5b			bne 	_CRNotString
.1f55	c8		iny				iny
.1f56	98		tya				tya
.1f57	38		sec				sec
.1f58	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1f5a	a8		tay				tay
.1f5b					_CRNotString:
.1f5b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.1f5c					CommandStop:
.1f5c	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1f5e	20 e0 14	jsr $14e0		jsr	errorHandler
.1f61					CommandEnd:
.1f61	4c 8c 32	jmp $328c			jmp 	WarmStart
.1f64					CommandXemu:
.1f64	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1f67					AdvanceNextLine:
.1f67	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f69	b1 28		lda ($28),y			lda 	(codePtr),y
.1f6b	18		clc				clc 								; add to codePtr
.1f6c	65 28		adc $28				adc 	codePtr
.1f6e	85 28		sta $28				sta 	codePtr
.1f70	90 02		bcc $1f74			bcc 	_ANLNoCarry
.1f72	e6 29		inc $29				inc 	codePtr+1
.1f74					_ANLNoCarry:
.1f74	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1f76	f0 e9		beq $1f61			beq 	CommandEnd 					; execute END
.1f78	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1f7a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.1f7b					Command_FOR:
.1f7b	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1f7d	a2 0b		ldx #$0b			ldx 	#11
.1f7f	20 3e 32	jsr $323e			jsr 	RSClaim
.1f82	20 94 1e	jsr $1e94			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1f85	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.1f87	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1f89	d0 4c		bne $1fd7			bne 	_CFType
.1f8b	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1f8d	20 0b 32	jsr $320b			jsr 	CheckToken
.1f90	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1f92	20 11 2b	jsr $2b11			jsr 	EvaluateInteger				; get terminal value in stack 1
.1f95	98		tya				tya
.1f96	48		pha				pha
.1f97	a0 04		ldy #$04			ldy 	#4
.1f99	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1f9b	91 37		sta ($37),y			sta 	(rsPointer),y
.1f9d	c8		iny				iny
.1f9e	a5 58		lda $58				lda		esInt1
.1fa0	91 37		sta ($37),y			sta 	(rsPointer),y
.1fa2	c8		iny				iny
.1fa3	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1fa5	91 37		sta ($37),y			sta 	(rsPointer),y
.1fa7	c8		iny				iny
.1fa8	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.1faa	91 37		sta ($37),y			sta 	(rsPointer),y
.1fac	c8		iny				iny
.1fad	a5 59		lda $59				lda		esInt1+1
.1faf	91 37		sta ($37),y			sta 	(rsPointer),y
.1fb1	c8		iny				iny
.1fb2	a5 61		lda $61				lda		esInt2+1
.1fb4	91 37		sta ($37),y			sta 	(rsPointer),y
.1fb6	c8		iny				iny
.1fb7	a5 69		lda $69				lda		esInt3+1
.1fb9	91 37		sta ($37),y			sta 	(rsPointer),y
.1fbb	68		pla				pla
.1fbc	a8		tay				tay
.1fbd	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1fbf	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1fc1	d0 0e		bne $1fd1			bne 	_CFDone
.1fc3	c8		iny				iny									; skip over step.
.1fc4	20 11 2b	jsr $2b11			jsr 	EvaluateInteger 			; get step
.1fc7	98		tya				tya
.1fc8	48		pha				pha
.1fc9	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1fcb	a0 06		ldy #$06			ldy 	#6
.1fcd	91 37		sta ($37),y			sta 	(rsPointer),y
.1fcf	68		pla				pla
.1fd0	a8		tay				tay
.1fd1					_CFDone:
.1fd1	a9 01		lda #$01			lda 	#1
.1fd3	20 6a 32	jsr $326a			jsr 	RSSavePosition 				; save position.
.1fd6	60		rts				rts
.1fd7					_CFType:
.1fd7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1fd9	20 e0 14	jsr $14e0		jsr	errorHandler
.1fdc					Command_NEXT:
.1fdc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1fde	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1fe0	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1fe2	f0 05		beq $1fe9			beq 	_isok
.1fe4	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1fe6	20 e0 14	jsr $14e0		jsr	errorHandler
.1fe9					_isok:
.1fe9	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1feb	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1fed	b0 18		bcs $2007			bcs 	_CNNoIndex
.1fef	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1ff1	20 44 2b	jsr $2b44			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1ff4	98		tya				tya
.1ff5	48		pha				pha
.1ff6	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1ff8	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ffa	d5 50		cmp $50,x			cmp 	esInt0,x
.1ffc	d0 76		bne $2074			bne 	_CNBadIndex
.1ffe	c8		iny				iny
.1fff	b1 37		lda ($37),y			lda 	(rsPointer),y
.2001	d5 58		cmp $58,x			cmp 	esInt1,x
.2003	d0 6f		bne $2074			bne 	_CNBadIndex
.2005	68		pla				pla
.2006	a8		tay				tay
.2007					_CNNoIndex:
.2007	98		tya				tya
.2008	48		pha				pha
.2009	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.200b	b1 37		lda ($37),y			lda 	(rsPointer),y
.200d	85 2a		sta $2a				sta 	temp0
.200f	c8		iny				iny
.2010	b1 37		lda ($37),y			lda 	(rsPointer),y
.2012	85 2b		sta $2b				sta 	temp0+1
.2014	c8		iny				iny
.2015	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2017	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2019	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.201b	10 01		bpl $201e			bpl 	_CNSignX
.201d	ca		dex				dex  								; X = $FF
.201e					_CNSignX:
.201e	18		clc				clc 								; add to the LSB
.201f	a0 00		ldy #$00			ldy 	#0
.2021	71 2a		adc ($2a),y			adc 	(temp0),y
.2023	91 2a		sta ($2a),y			sta 	(temp0),y
.2025					_CNPropogate:
.2025	c8		iny				iny  								; add the sign extended in X to the rest.
.2026	8a		txa				txa
.2027	71 2a		adc ($2a),y			adc 	(temp0),y
.2029	91 2a		sta ($2a),y			sta 	(temp0),y
.202b	c8		iny				iny
.202c	8a		txa				txa
.202d	71 2a		adc ($2a),y			adc 	(temp0),y
.202f	91 2a		sta ($2a),y			sta 	(temp0),y
.2031	c8		iny				iny
.2032	8a		txa				txa
.2033	71 2a		adc ($2a),y			adc 	(temp0),y
.2035	91 2a		sta ($2a),y			sta 	(temp0),y
.2037	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2038	a5 37		lda $37				lda 	rsPointer
.203a	69 07		adc #$07			adc 	#7
.203c	85 2c		sta $2c				sta 	temp1
.203e	a9 00		lda #$00			lda 	#0
.2040	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2042	a8		tay				tay 								; and clear the Y register again.
.2043	65 38		adc $38				adc 	rsPointer+1
.2045	85 2d		sta $2d				sta 	temp1+1
.2047	38		sec				sec 								; calculate current - limit oring interim values.
.2048	20 80 20	jsr $2080			jsr 	_CNCompare 					; each of these does a byte.
.204b	20 80 20	jsr $2080			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.204e	20 80 20	jsr $2080			jsr 	_CNCompare 					; and the carry of the subtraction.
.2051	20 80 20	jsr $2080			jsr 	_CNCompare
.2054	50 02		bvc $2058			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2056	49 80		eor #$80			eor 	#$80
.2058					_CNNoOverflow:
.2058	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.205a	30 1d		bmi $2079			bmi 	_CNCheckDownto
.205c	c9 00		cmp #$00			cmp 	#0
.205e	30 0c		bmi $206c			bmi 	_CNLoopRound 				; loop round if < =
.2060	a5 2e		lda $2e				lda 	temp2
.2062	f0 08		beq $206c			beq 	_CNLoopRound
.2064					_CNLoopExit:
.2064	68		pla				pla
.2065	a8		tay				tay
.2066	a9 0b		lda #$0b			lda 	#11
.2068	20 60 32	jsr $3260			jsr 	RSFree
.206b	60		rts				rts
.206c					_CNLoopRound:
.206c	68		pla				pla
.206d	a8		tay				tay
.206e	a9 01		lda #$01			lda 	#1
.2070	20 7d 32	jsr $327d			jsr 	RSLoadPosition				; go back to the loop top
.2073	60		rts				rts
.2074					_CNBadIndex:
.2074	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2076	20 e0 14	jsr $14e0		jsr	errorHandler
.2079					_CNCheckDownto:
.2079	c9 00		cmp #$00			cmp 	#0
.207b	10 ef		bpl $206c			bpl 	_CNLoopRound
.207d	4c 64 20	jmp $2064			jmp 	_CNLoopExit
.2080					_CNCompare:
.2080	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2082	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2084	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2086	85 2e		sta $2e				sta 	temp2
.2088	c8		iny				iny
.2089	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.208a					CommandIf:
.208a	20 0f 2b	jsr $2b0f			jsr 	EvaluateRootInteger 		; get what's being tested.
.208d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.208f	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.2091	f0 04		beq $2097			beq 	_IfSimple
.2093	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2095	d0 1b		bne $20b2			bne 	_IfComplex
.2097					_IfSimple:
.2097	20 ca 31	jsr $31ca			jsr 	MInt32Zero					; check if TOS zero
.209a	f0 10		beq $20ac			beq 	_IfEOL 						; go to next line.
.209c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.209e	c8		iny				iny
.209f	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.20a1	f0 0c		beq $20af			beq 	_IfGoto 					; do the Goto code
.20a3	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.20a5	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.20a7	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.20a9	f0 04		beq $20af			beq 	_IfGoto
.20ab	60		rts				rts 								; else continue on this line.
.20ac					_IfEOL:
.20ac	4c 67 1f	jmp $1f67			jmp 	AdvanceNextLine 			; go to next line
.20af					_IfGoto:
.20af	4c 9e 1c	jmp $1c9e			jmp 	CommandGoto
.20b2					_IfComplex:
.20b2	20 ca 31	jsr $31ca			jsr 	MInt32Zero 					; is it true ?
.20b5	f0 01		beq $20b8			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.20b7	60		rts				rts 								; else continue.
.20b8					_IFSkip:
.20b8	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.20ba	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.20bc	4c 54 23	jmp $2354			jmp		ScanForward
.20bf					Command_ELSE:
.20bf	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.20c1	8a		txa				txa
.20c2	4c 54 23	jmp $2354			jmp		ScanForward
.20c5					Command_ENDIF:
.20c5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0c10					storeSize:
>0c10							.fill 	1
.20c6					CommandLocal:
.20c6	a2 00		ldx #$00			ldx 	#0
.20c8	20 e4 20	jsr $20e4			jsr 	LocaliseVariable 			; localise one.
.20cb					_CLCheckNext:
.20cb	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.20cd	c8		iny				iny
.20ce	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.20d0	f0 06		beq $20d8			beq 	_CLAssignment
.20d2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.20d4	f0 f0		beq $20c6			beq 	CommandLocal
.20d6	88		dey				dey
.20d7	60		rts				rts
.20d8					_CLAssignment:
.20d8	a2 01		ldx #$01			ldx 	#1
.20da	20 f2 2a	jsr $2af2			jsr 	Evaluate 					; evaluate RHS
.20dd	ca		dex				dex
.20de	20 a7 1e	jsr $1ea7			jsr 	WriteValue
.20e1	4c cb 20	jmp $20cb			jmp 	_CLCheckNext
.20e4					LocaliseVariable:
.20e4	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.20e6	c9 40		cmp #$40			cmp 	#$40
.20e8	b0 67		bcs $2151			bcs 	_LVSyntax
.20ea	8a		txa				txa 								; get the address of that variable.
.20eb	a2 00		ldx #$00		ldx	#0
.20ed	20 22 41	jsr $4122		jsr	variableHandler
.20f0	aa		tax				tax
.20f1	8a		txa				txa
.20f2	48		pha				pha
.20f3	98		tya				tya
.20f4	48		pha				pha
.20f5	20 09 1f	jsr $1f09			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.20f8	b5 48		lda $48,x			lda 	esType,x 					; get the type
.20fa	0a		asl a				asl 	a
.20fb	10 16		bpl $2113			bpl 	_LVPushNumber
.20fd	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.20ff	b1 2a		lda ($2a),y			lda 	(temp0),y
.2101	c8		iny				iny
.2102	85 2c		sta $2c				sta 	temp1
.2104	b1 2a		lda ($2a),y			lda 	(temp0),y
.2106	85 2d		sta $2d				sta 	temp1+1
.2108	a0 00		ldy #$00			ldy 	#0 	 						; get length
.210a	b1 2c		lda ($2c),y			lda 	(temp1),y
.210c	aa		tax				tax 								; into X
.210d	e8		inx				inx 								; +1 for length.
.210e	a9 24		lda #$24			lda 	#markerString
.2110	4c 28 21	jmp $2128			jmp 	_LVWriteFrame
.2113					_LVPushNumber:
.2113	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2115	85 2c		sta $2c				sta 	temp1
.2117	a5 2b		lda $2b				lda 	temp0+1
.2119	85 2d		sta $2d				sta 	temp1+1
.211b	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.211d	4a		lsr a				lsr 	a
.211e	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2120	a2 04		ldx #$04			ldx 	#VarISize
.2122	90 04		bcc $2128			bcc 	_LVIsInteger
.2124	a9 23		lda #$23			lda 	#markerFloat
.2126	a2 06		ldx #$06			ldx 	#VarFSize
.2128					_LVIsInteger:
.2128					_LVWriteFrame:
.2128	8e 10 0c	stx $0c10			stx 	storeSize 					; number of bytes to copy from (temp0)
.212b	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.212c	e8		inx				inx
.212d	e8		inx				inx
.212e	20 3e 32	jsr $323e			jsr 	RSClaim 					; create the stack frame.
.2131	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2133	a0 01		ldy #$01			ldy 	#1
.2135	91 37		sta ($37),y			sta 	(rsPointer),y
.2137	c8		iny				iny
.2138	a5 2b		lda $2b				lda 	temp0+1
.213a	91 37		sta ($37),y			sta 	(rsPointer),y
.213c	a0 00		ldy #$00			ldy 	#0
.213e					_LVCopyData:
.213e	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2140	c8		iny				iny 								; write allowing for the header bit.
.2141	c8		iny				iny
.2142	c8		iny				iny
.2143	91 37		sta ($37),y			sta 	(rsPointer),y
.2145	88		dey				dey
.2146	88		dey				dey
.2147	ce 10 0c	dec $0c10			dec 	storeSize 					; do it storesize times
.214a	d0 f2		bne $213e			bne 	_LVCopyData
.214c	68		pla				pla
.214d	a8		tay				tay
.214e	68		pla				pla
.214f	aa		tax				tax
.2150	60		rts				rts
.2151					_LVSyntax:
.2151	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2153	20 e0 14	jsr $14e0		jsr	errorHandler
.2156					RestoreLocals:
.2156	a2 00		ldx #$00			ldx 	#0
.2158	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.215a	c9 40		cmp #$40			cmp	 	#64
.215c	90 01		bcc $215f			bcc 	_RLocal
.215e	60		rts				rts
.215f					_RLocal:
.215f	8a		txa				txa
.2160	48		pha				pha
.2161	98		tya				tya
.2162	48		pha				pha
.2163	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2165	b1 37		lda ($37),y			lda 	(rsPointer),y
.2167	85 2a		sta $2a				sta 	temp0
.2169	c8		iny				iny
.216a	b1 37		lda ($37),y			lda 	(rsPointer),y
.216c	85 2b		sta $2b				sta 	temp0+1
.216e	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2170	b1 37		lda ($37),y			lda 	(rsPointer),y
.2172	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2174	f0 28		beq $219e			beq 	_RString
.2176	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2178	c9 25		cmp #$25			cmp 	#markerInt
.217a	f0 02		beq $217e			beq 	_RIsInteger
.217c	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.217e					_RIsInteger:
.217e	8a		txa				txa
.217f	48		pha				pha
.2180	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2182					_RCopyBack:
.2182	b1 37		lda ($37),y			lda 	(rsPointer),y
.2184	88		dey				dey
.2185	88		dey				dey
.2186	88		dey				dey
.2187	91 2a		sta ($2a),y			sta 	(temp0),y
.2189	c8		iny				iny
.218a	c8		iny				iny
.218b	c8		iny				iny
.218c	c8		iny				iny
.218d	ca		dex				dex
.218e	d0 f2		bne $2182			bne 	_RCopyBack
.2190	68		pla				pla 								; get size add 3
.2191	18		clc				clc
.2192	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2194					_RRestoreAAndLoop:
.2194	20 60 32	jsr $3260			jsr 	RSFree
.2197	68		pla				pla
.2198	a8		tay				tay
.2199	68		pla				pla
.219a	aa		tax				tax
.219b	4c 56 21	jmp $2156			jmp 	RestoreLocals 				; go see if there are any more locals.
.219e					_RString:
.219e	a2 00		ldx #$00			ldx 	#0
.21a0	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.21a2	b1 37		lda ($37),y			lda 	(rsPointer),y
.21a4	95 50		sta $50,x			sta 	esInt0,x
.21a6	c8		iny				iny
.21a7	b1 37		lda ($37),y			lda 	(rsPointer),y
.21a9	95 58		sta $58,x			sta 	esInt1,x
.21ab	18		clc				clc
.21ac	a5 37		lda $37				lda 	rsPointer
.21ae	69 03		adc #$03			adc 	#3
.21b0	95 51		sta $51,x			sta 	esInt0+1,x
.21b2	a5 38		lda $38				lda 	rsPointer+1
.21b4	69 00		adc #$00			adc 	#0
.21b6	95 59		sta $59,x			sta 	esInt1+1,x
.21b8	8a		txa				txa
.21b9	a2 0e		ldx #$0e		ldx	#14
.21bb	20 49 35	jsr $3549		jsr	stringHandler
.21be	a0 03		ldy #$03			ldy 	#3 							; get string length
.21c0	b1 37		lda ($37),y			lda 	(rsPointer),y
.21c2	18		clc				clc
.21c3	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.21c5	4c 94 21	jmp $2194			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0c11					paramCount:
>0c11							.fill 	1
.21c8					CallProc:
.21c8	20 50 22	jsr $2250			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.21cb	48		pha				pha 								; save length on stack
.21cc	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.21ce	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.21d0	48		pha				pha
.21d1	a5 2a		lda $2a				lda 	temp0
.21d3	48		pha				pha
.21d4	98		tya				tya 								; calculate Y + length
.21d5	18		clc				clc
.21d6	65 32		adc $32				adc 	tempShort
.21d8	a8		tay				tay
.21d9	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.21db					_CallProcEvalParams:
.21db	e8		inx				inx
.21dc	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.21de	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.21e0	f0 0b		beq $21ed			beq 	_CPDoneParams
.21e2	20 f2 2a	jsr $2af2			jsr 	Evaluate 					; evaluate a parameter
.21e5	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.21e7	c8		iny				iny
.21e8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.21ea	f0 ef		beq $21db			beq 	_CallProcEvalParams
.21ec	88		dey				dey 								; undo consumption.
.21ed					_CPDoneParams:
.21ed	20 16 32	jsr $3216			jsr 	CheckRightParen 			; check closing parenthesis.
.21f0	8e 11 0c	stx $0c11			stx 	paramCount 					; store parameter count+1
.21f3	a2 04		ldx #$04			ldx 	#4							; make space on stack
.21f5	a9 50		lda #$50			lda 	#markerPROC
.21f7	20 3e 32	jsr $323e			jsr 	RSClaim
.21fa	a9 01		lda #$01			lda 	#1 							; store return address.
.21fc	20 6a 32	jsr $326a			jsr 	RSSavePosition
.21ff	68		pla				pla 								; get the new code Ptr
.2200	85 28		sta $28				sta 	codePtr
.2202	68		pla				pla
.2203	85 29		sta $29				sta 	codePtr+1
.2205	68		pla				pla 								; length of name + 4 is the param start.
.2206	18		clc				clc
.2207	69 04		adc #$04			adc 	#4
.2209	a8		tay				tay
.220a	a2 ff		ldx #$ff			ldx 	#$FF
.220c					_CPLoadParameters:
.220c	e8		inx				inx 								; point to where the address should be loaded.
.220d	ec 11 0c	cpx $0c11			cpx 	paramCount 					; too many parameters in definition ?
.2210	f0 1e		beq $2230			beq 	_CPParamError
.2212	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2214	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2216	f0 0e		beq $2226			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2218	20 e4 20	jsr $20e4			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.221b	20 a7 1e	jsr $1ea7			jsr 	WriteValue 					; copy the evaluated parameter into there.
.221e	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2220	c8		iny				iny
.2221	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2223	f0 e7		beq $220c			beq 	_CPLoadParameters
.2225	88		dey				dey 								; no, unconsume and check for )
.2226					_CPParamComplete:
.2226	20 16 32	jsr $3216			jsr 	CheckRightParen 			; check )
.2229	e8		inx				inx 								; check right number of parameters have been consumed
.222a	ec 11 0c	cpx $0c11			cpx 	paramCount
.222d	d0 01		bne $2230			bne 	_CPParamError
.222f	60		rts				rts
.2230					_CPParamError:
.2230	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2232	20 e0 14	jsr $14e0		jsr	errorHandler
.2235					ReturnProc:
.2235	20 56 21	jsr $2156			jsr 	RestoreLocals 				; get the locals back.
.2238	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.223a	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.223c	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.223e	f0 05		beq $2245			beq 	_isok
.2240	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2242	20 e0 14	jsr $14e0		jsr	errorHandler
.2245					_isok:
.2245	a9 01		lda #$01			lda 	#1
.2247	20 7d 32	jsr $327d			jsr 	RSLoadPosition 				; reload the position from offset 1.
.224a	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.224c	20 60 32	jsr $3260			jsr 	RSFree
.224f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0c12					procList:
>0c12							.fill 	2		 					; terminated by name high being zero.
.0c14					yInLine:
>0c14							.fill 	1
.2250					FindProcedure:
.2250	8c 14 0c	sty $0c14			sty 	yInLine 					; save current position.
.2253	20 0e 23	jsr $230e			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2256	85 2c		sta $2c				sta 	temp1
.2258	ad 12 0c	lda $0c12			lda		procList 					; put procList address in temp2
.225b	85 2e		sta $2e				sta 	temp2
.225d	ad 13 0c	lda $0c13			lda 	procList+1
.2260	85 2f		sta $2f				sta 	temp2+1
.2262	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2264					_FPLoop:
.2264	b1 2e		lda ($2e),y			lda 	(temp2),y
.2266	f0 4f		beq $22b7			beq 	_FPError 					; if so, we don't know this procedure.
.2268	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.226a	c8		iny				iny
.226b	b1 2e		lda ($2e),y			lda 	(temp2),y
.226d	85 2a		sta $2a				sta 	temp0
.226f	c8		iny				iny
.2270	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2272	c5 2c		cmp $2c				cmp 	temp1
.2274	d0 2b		bne $22a1			bne 	_FPNext 					; hash is different, go to next.
.2276	38		sec				sec
.2277	ad 14 0c	lda $0c14			lda 	yInLine 					; position in line must be at least 4
.227a	e9 04		sbc #$04			sbc 	#4
.227c	18		clc				clc
.227d	65 28		adc $28				adc 	codePtr
.227f	85 30		sta $30				sta 	temp3
.2281	a5 29		lda $29				lda 	codePtr+1
.2283	69 00		adc #$00			adc 	#0
.2285	85 31		sta $31				sta 	temp3+1
.2287	98		tya				tya
.2288	48		pha				pha
.2289	a0 04		ldy #$04			ldy 	#4
.228b					_FPCName:
.228b	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.228d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.228f	d0 0e		bne $229f			bne 	_FPpulYNext 				; if different go to next one.
.2291	c8		iny				iny
.2292	c9 3a		cmp #$3a			cmp 	#$3A
.2294	90 f5		bcc $228b			bcc 	_FPCName 					; compare the whole lot....
.2296	68		pla				pla 								; throw away the saved Y
.2297	98		tya				tya 								; length of name is Y-4
.2298	38		sec				sec
.2299	e9 04		sbc #$04			sbc 	#4
.229b	ac 14 0c	ldy $0c14			ldy 	yInLine  					; get the original Y back
.229e	60		rts				rts
.229f					_FPpulYNext:
.229f	68		pla				pla
.22a0	a8		tay				tay
.22a1					_FPNext:
.22a1	c8		iny				iny 								; next procedure record.
.22a2	10 c0		bpl $2264			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.22a4	98		tya				tya 								; subtract 128 from Y
.22a5	38		sec				sec
.22a6	e9 80		sbc #$80			sbc 	#128
.22a8	a8		tay				tay
.22a9	18		clc				clc 								; add 128 to temp2, so we can have more than
.22aa	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.22ac	69 80		adc #$80			adc 	#128
.22ae	85 2e		sta $2e				sta 	temp2
.22b0	90 b2		bcc $2264			bcc 	_FPLoop
.22b2	e6 2f		inc $2f				inc 	temp2+1
.22b4	4c 64 22	jmp $2264			jmp 	_FPLoop
.22b7					_FPError:
.22b7	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.22b9	20 e0 14	jsr $14e0		jsr	errorHandler
.22bc					ScanProc:
.22bc	98		tya				tya
.22bd	48		pha				pha
.22be	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.22c0	8d 12 0c	sta $0c12			sta 	procList
.22c3	a5 36		lda $36				lda 	lowMemory+1
.22c5	8d 13 0c	sta $0c13			sta 	procList+1
.22c8	20 38 26	jsr $2638			jsr 	ResetCodeAddress 			; back to the start.
.22cb					_ScanLoop:
.22cb	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.22cd	b1 28		lda ($28),y			lda 	(codePtr),y
.22cf	f0 2a		beq $22fb			beq 	_ScanExit
.22d1	a0 03		ldy #$03			ldy 	#3							; get first token
.22d3	b1 28		lda ($28),y			lda 	(codePtr),y
.22d5	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.22d7	d0 12		bne $22eb			bne 	_ScanNext
.22d9	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.22db	20 03 23	jsr $2303			jsr 	_ScanWrite
.22de	a5 28		lda $28				lda 	codePtr
.22e0	20 03 23	jsr $2303			jsr 	_ScanWrite
.22e3	a0 04		ldy #$04			ldy 	#4 							; start of name part
.22e5	20 0e 23	jsr $230e			jsr 	CalculateProcedureHash 		; calculate procedure hash
.22e8	20 03 23	jsr $2303			jsr 	_ScanWrite					; and write that
.22eb					_ScanNext:
.22eb	18		clc				clc
.22ec	a0 00		ldy #$00			ldy 	#0
.22ee	b1 28		lda ($28),y			lda 	(codePtr),y
.22f0	65 28		adc $28				adc 	codePtr
.22f2	85 28		sta $28				sta 	codePtr
.22f4	90 d5		bcc $22cb			bcc 	_ScanLoop
.22f6	e6 29		inc $29				inc 	codePtr+1
.22f8	4c cb 22	jmp $22cb			jmp 	_ScanLoop
.22fb					_ScanExit:
.22fb	a9 00		lda #$00			lda 	#0 							; write ending zero.
.22fd	20 03 23	jsr $2303			jsr 	_ScanWrite
.2300	68		pla				pla
.2301	a8		tay				tay
.2302	60		rts				rts
.2303					_ScanWrite:
.2303	a0 00		ldy #$00			ldy 	#0
.2305	91 35		sta ($35),y			sta 	(lowMemory),y
.2307	e6 35		inc $35				inc 	lowMemory
.2309	d0 02		bne $230d			bne 	_SWNoCarry
.230b	e6 36		inc $36				inc 	lowMemory+1
.230d					_SWNoCarry:
.230d	60		rts				rts
.230e					CalculateProcedureHash:
.230e	a9 00		lda #$00			lda 	#0 							; clear hash.
.2310	85 2a		sta $2a				sta 	temp0
.2312					_CPHLoop:
.2312	18		clc				clc 								; add character and rotate and add carry back in
.2313	b1 28		lda ($28),y			lda 	(codePtr),y
.2315	65 2a		adc $2a				adc 	temp0
.2317	6a		ror a				ror 	a
.2318	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.231a	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.231c	b1 28		lda ($28),y			lda 	(codePtr),y
.231e	c8		iny				iny 								; advance incase we go round again.
.231f	c9 3a		cmp #$3a			cmp 	#$3A
.2321	90 ef		bcc $2312			bcc 	_CPHLoop
.2323	a5 2a		lda $2a				lda 	temp0
.2325	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2326					Command_Repeat:
.2326	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2328	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.232a	20 3e 32	jsr $323e			jsr 	RSClaim
.232d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.232f	20 6a 32	jsr $326a			jsr 	RSSavePosition
.2332	60		rts				rts
.2333					Command_Until:
.2333	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2335	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2337	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2339	f0 05		beq $2340			beq 	_isok
.233b	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.233d	20 e0 14	jsr $14e0		jsr	errorHandler
.2340					_isok:
.2340	20 0f 2b	jsr $2b0f			jsr 	EvaluateRootInteger 		; at the bottom.
.2343	20 ca 31	jsr $31ca			jsr 	MInt32Zero					; check if TOS zero
.2346	d0 06		bne $234e			bne 	_CUExit
.2348	a9 01		lda #$01			lda 	#1
.234a	20 7d 32	jsr $327d			jsr 	RSLoadPosition 				; reload the position from offset 1.
.234d	60		rts				rts
.234e					_CUExit:
.234e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2350	20 60 32	jsr $3260			jsr 	RSFree
.2353	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2354					ScanForward:
.2354	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2356	86 2d		stx $2d				stx 	temp1+1
.2358	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.235a	85 2e		sta $2e				sta 	temp2
.235c	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.235e	c8		iny				iny
.235f	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2361	d0 08		bne $236b			bne 	_SFNoCheck 					; if so, check token against entered values.
.2363	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2365	f0 24		beq $238b			beq 	_SFExit 					; at the same strcture depth.
.2367	c5 2d		cmp $2d				cmp 	temp1+1
.2369	f0 20		beq $238b			beq 	_SFExit
.236b					_SFNoCheck:
.236b	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.236d	90 ed		bcc $235c			bcc 	_SFLoop
.236f	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2371	90 19		bcc $238c			bcc 	_SFSpecials
.2373	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2375	90 e5		bcc $235c			bcc 	_SFLoop
.2377	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2379	b0 e1		bcs $235c			bcs 	_SFLoop
.237b	aa		tax				tax  								; token in X, and look up the adjuster.
.237c	bd 2d 2a	lda $2a2d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.237f	38		sec				sec 								; convert to an offset ($FF,$01)
.2380	e9 81		sbc #$81			sbc 	#$81
.2382	18		clc				clc 								; add to depth
.2383	65 2e		adc $2e				adc 	temp2
.2385	85 2e		sta $2e				sta 	temp2
.2387	10 d3		bpl $235c			bpl 	_SFLoop 					; +ve okay to continue
.2389	30 07		bmi $2392			bmi 	SFError 					; if gone -ve then we have a nesting error
.238b	60		rts		_SFExit:rts
.238c					_SFSpecials:
.238c	20 97 23	jsr $2397			jsr 	ScannerSkipSpecial
.238f	4c 5c 23	jmp $235c			jmp 	_SFLoop
.2392					SFError:
.2392	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2394	20 e0 14	jsr $14e0		jsr	errorHandler
.2397					ScannerSkipSpecial:
.2397	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2399	f0 10		beq $23ab			beq 	_SFNextLine
.239b	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.239d	f0 2b		beq $23ca			beq 	_SFFloatSkip
.239f	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.23a1	f0 02		beq $23a5			beq 	_SFSkipString
.23a3	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.23a4	60		rts				rts 								; token.
.23a5					_SFSkipString:
.23a5	98		tya				tya
.23a6	38		sec				sec
.23a7	71 28		adc ($28),y			adc 	(codePtr),y
.23a9	a8		tay				tay
.23aa	60		rts				rts
.23ab					_SFNextLine:
.23ab	a0 00		ldy #$00			ldy 	#0 							; get offset
.23ad	b1 28		lda ($28),y			lda 	(codePtr),y
.23af	18		clc				clc 								; add to code pointer.
.23b0	65 28		adc $28				adc 	codePtr
.23b2	85 28		sta $28				sta 	codePtr
.23b4	90 02		bcc $23b8			bcc		_SFNLNoCarry
.23b6	e6 29		inc $29				inc 	codePtr+1
.23b8					_SFNLNoCarry:
.23b8	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.23ba	d0 0b		bne $23c7			bne		_SFXNL 						; no go round again
.23bc	a5 2c		lda $2c				lda 	temp1
.23be	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.23c0	d0 d0		bne $2392			bne 	SFError 					; read uses this to search for data statements
.23c2	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.23c4	20 e0 14	jsr $14e0		jsr	errorHandler
.23c7	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.23c9	60		rts				rts
.23ca					_SFFloatSkip:
.23ca	98		tya				tya 								; skip over an embedded float.
.23cb	18		clc				clc
.23cc	69 05		adc #$05			adc 	#FloatEmbeddedSize
.23ce	a8		tay				tay
.23cf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.23d0					Command_While:
.23d0	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.23d2	a2 04		ldx #$04			ldx 	#4
.23d4	20 3e 32	jsr $323e			jsr 	RSClaim 					; create on stack.
.23d7	88		dey				dey
.23d8	a9 01		lda #$01			lda 	#1
.23da	20 6a 32	jsr $326a			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.23dd	c8		iny				iny
.23de	20 11 2b	jsr $2b11			jsr 	EvaluateInteger				; get the conditional
.23e1	20 ca 31	jsr $31ca			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.23e4	f0 01		beq $23e7			beq 	_CWFail
.23e6	60		rts				rts
.23e7					_CWFail:
.23e7	a9 04		lda #$04			lda 	#4
.23e9	20 60 32	jsr $3260			jsr 	RSFree 						; close the just opened position.
.23ec	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.23ee	aa		tax				tax
.23ef	20 54 23	jsr $2354			jsr 	ScanForward
.23f2	60		rts				rts
.23f3					Command_Wend:
.23f3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.23f5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23f7	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.23f9	f0 05		beq $2400			beq 	_isok
.23fb	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.23fd	20 e0 14	jsr $14e0		jsr	errorHandler
.2400					_isok:
.2400	a9 01		lda #$01			lda 	#1
.2402	20 7d 32	jsr $327d			jsr 	RSLoadPosition				; go back until true
.2405	a9 04		lda #$04			lda 	#4
.2407	20 60 32	jsr $3260			jsr 	RSFree 						; close the loop
.240a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.240b					CommandClear:
.240b					XCommandClear:
.240b	98		tya				tya
.240c	48		pha				pha
.240d	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2410	85 33		sta $33				sta 	highMemory
.2412	ad cd 0a	lda $0acd			lda 	endMemory+1
.2415	85 34		sta $34				sta 	highMemory+1
.2417	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.241a	85 2a		sta $2a				sta 	temp0
.241c	ad c9 0a	lda $0ac9			lda 	basePage+1
.241f	85 2b		sta $2b				sta 	temp0+1
.2421					_CCFindEnd:
.2421	a0 00		ldy #$00			ldy 	#0
.2423	b1 2a		lda ($2a),y			lda 	(temp0),y
.2425	f0 0c		beq $2433			beq 	_CCFoundEnd 				; offset zero is end.
.2427	18		clc				clc
.2428	65 2a		adc $2a				adc 	temp0 						; move to next line
.242a	85 2a		sta $2a				sta 	temp0
.242c	90 f3		bcc $2421			bcc 	_CCFindEnd
.242e	e6 2b		inc $2b				inc 	temp0+1
.2430	4c 21 24	jmp $2421			jmp 	_CCFindEnd
.2433					_CCFoundEnd:
.2433	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2435	85 35		sta $35				sta 	lowMemory
.2437	a5 2b		lda $2b				lda 	temp0+1
.2439	85 36		sta $36				sta 	lowMemory+1
.243b	18		clc				clc 								; put temp0+1 in endProgram
.243c	a5 2a		lda $2a				lda 	temp0
.243e	69 01		adc #$01			adc 	#1
.2440	8d ca 0a	sta $0aca			sta 	endProgram
.2443	a5 2b		lda $2b				lda 	temp0+1
.2445	69 00		adc #$00			adc 	#0
.2447	8d cb 0a	sta $0acb			sta 	endProgram+1
.244a	18		clc				clc 								; put a bit of space in.
.244b	a5 35		lda $35				lda 	lowMemory
.244d	69 04		adc #$04			adc 	#4
.244f	85 35		sta $35				sta 	lowMemory
.2451	90 02		bcc $2455			bcc 	_CCNoCarry
.2453	e6 36		inc $36				inc 	lowMemory+1
.2455					_CCNoCarry:
.2455	20 30 32	jsr $3230			jsr 	RSReset 					; reset the return stack.
.2458	a2 04		ldx #$04		ldx	#4
.245a	20 22 41	jsr $4122		jsr	variableHandler
.245d	20 bc 22	jsr $22bc			jsr 	ScanProc 					; scan for procedures
.2460	20 41 1c	jsr $1c41			jsr 	CommandRestore 				; do a restore
.2463	68		pla				pla
.2464	a8		tay				tay
.2465	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0c15					structIndent:
>0c15							.fill 	1
.2466					CommandList:
.2466	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2468	8e 15 0c	stx $0c15			stx 	structIndent
.246b	20 a3 31	jsr $31a3			jsr 	MInt32False
.246e	e8		inx				inx
.246f	20 9f 31	jsr $319f			jsr 	MInt32True
.2472	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2474	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2476	f0 15		beq $248d			beq 	_CLEndLine
.2478	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.247a	30 1b		bmi $2497			bmi 	_CLDoListing 				; do the whole lot.
.247c	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.247e	20 11 2b	jsr $2b11			jsr 	EvaluateInteger
.2481	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2483	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2485	f0 06		beq $248d			beq 	_CLEndLine
.2487	20 e1 30	jsr $30e1			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.248a	4c 97 24	jmp $2497			jmp 	_CLDoListing 				; own e.g. list 1100
.248d					_CLEndLine:
.248d	c8		iny				iny 								; skip comma
.248e	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2490	30 05		bmi $2497			bmi 	_CLDoListing
.2492	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2494	20 11 2b	jsr $2b11			jsr 	EvaluateInteger				; get end
.2497					_CLDoListing:
.2497	20 38 26	jsr $2638			jsr 	ResetCodeAddress 			; back to the start.
.249a					_CLCheckLoop:
.249a	a2 00		ldx #$00		ldx	#0
.249c	20 bf 14	jsr $14bf		jsr	deviceHandler
.249f	a0 00		ldy #$00			ldy 	#0							; check end.
.24a1	b1 28		lda ($28),y			lda 	(codePtr),y
.24a3	f0 41		beq $24e6			beq 	_CLEnd
.24a5	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.24a7	20 e9 24	jsr $24e9			jsr 	CLCompareLineTOS
.24aa	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.24ac	f0 28		beq $24d6			beq 	_CLNext
.24ae	e8		inx				inx
.24af	20 e9 24	jsr $24e9			jsr 	CLCompareLineTOS 			; compare vs higher
.24b2	c9 01		cmp #$01			cmp 	#1
.24b4	f0 20		beq $24d6			beq 	_CLNext
.24b6	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.24b8	20 0b 25	jsr $250b			jsr 	CLStructureCheck
.24bb	ad 15 0c	lda $0c15			lda 	structIndent 				; indent level.
.24be	10 02		bpl $24c2			bpl 	_CLPositive
.24c0	a9 00		lda #$00			lda 	#0
.24c2					_CLPositive:
.24c2	a2 02		ldx #$02		ldx	#2
.24c4	20 54 3d	jsr $3d54		jsr	tokeniserHandler
.24c7	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.24c9	20 0b 25	jsr $250b			jsr 	CLStructureCheck
.24cc	ad 15 0c	lda $0c15			lda 	structIndent
.24cf	10 05		bpl $24d6			bpl 	_CLNext
.24d1	a9 00		lda #$00			lda 	#0
.24d3	8d 15 0c	sta $0c15			sta 	structIndent
.24d6					_CLNext:
.24d6	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.24d8	b1 28		lda ($28),y			lda 	(codePtr),y
.24da	18		clc				clc
.24db	65 28		adc $28				adc 	codePtr
.24dd	85 28		sta $28				sta 	codePtr
.24df	90 b9		bcc $249a			bcc 	_CLCheckLoop
.24e1	e6 29		inc $29				inc 	codePtr+1
.24e3	4c 9a 24	jmp $249a			jmp 	_CLCheckLoop
.24e6					_CLEnd:
.24e6	4c 8c 32	jmp $328c			jmp 	WarmStart 					; warm start after list.
.24e9					CLCompareLineTOS:
.24e9	a0 01		ldy #$01			ldy 	#1
.24eb	b1 28		lda ($28),y			lda 	(codePtr),y
.24ed	55 50		eor $50,x			eor 	esInt0,x
.24ef	85 2a		sta $2a				sta 	temp0
.24f1	c8		iny				iny
.24f2	b1 28		lda ($28),y			lda 	(codePtr),y
.24f4	55 58		eor $58,x			eor 	esInt1,x
.24f6	05 2a		ora $2a				ora 	temp0
.24f8	f0 10		beq $250a			beq 	_CLCLTExit
.24fa	88		dey				dey
.24fb	b1 28		lda ($28),y			lda 	(codePtr),y
.24fd	d5 50		cmp $50,x			cmp 	esInt0,x
.24ff	c8		iny				iny
.2500	b1 28		lda ($28),y			lda 	(codePtr),y
.2502	f5 58		sbc $58,x			sbc 	esInt1,x
.2504	a9 ff		lda #$ff			lda 	#255
.2506	90 02		bcc $250a			bcc 	_CLCLTExit
.2508	a9 01		lda #$01			lda 	#1
.250a					_CLCLTExit:
.250a	60		rts				rts
.250b					CLStructureCheck:
.250b	85 2a		sta $2a				sta 	temp0
.250d	a0 03		ldy #$03			ldy 	#3
.250f					_CLSCLoop:
.250f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2511	c8		iny				iny
.2512	c9 80		cmp #$80			cmp 	#$80
.2514	90 f9		bcc $250f			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2516	f0 28		beq $2540			beq		_CLSCExit					; EOL return
.2518	c9 86		cmp #$86			cmp 	#$86 						; special handler
.251a	90 1e		bcc $253a			bcc 	_CLSCSpecial
.251c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.251e	90 ef		bcc $250f			bcc 	_CLSCLoop
.2520	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2522	b0 eb		bcs $250f			bcs 	_CLSCLoop
.2524	aa		tax				tax 								; get adjustment
.2525	bd 2d 2a	lda $2a2d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2528	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.252a	d0 e3		bne $250f			bne 	_CLSCLoop
.252c	38		sec				sec
.252d	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.252f	0a		asl a				asl 	a 							; double indent step
.2530	18		clc				clc
.2531	6d 15 0c	adc $0c15			adc 	structIndent 				; add to structure indent
.2534	8d 15 0c	sta $0c15			sta 	structIndent
.2537	4c 0f 25	jmp $250f			jmp 	_CLSCLoop
.253a					_CLSCSpecial:
.253a	20 97 23	jsr $2397			jsr 	ScannerSkipSpecial
.253d	4c 0f 25	jmp $250f			jmp 	_CLSCLoop
.2540					_CLSCExit:
.2540	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2541					CommandLoad:
.2541	20 69 25	jsr $2569			jsr 	CLSParameters 					; get parameters for load.
.2544	08		php				php
.2545	a2 0e		ldx #$0e		ldx	#14
.2547	20 bf 14	jsr $14bf		jsr	deviceHandler
.254a	28		plp				plp
.254b	b0 08		bcs $2555			bcs 	_CLExit 						; if CC then load a program, so warm start.
.254d	20 0b 24	jsr $240b			jsr 	CommandClear
.2550	a2 02		ldx #$02		ldx	#2
.2552	20 06 1c	jsr $1c06		jsr	interactionHandler
.2555					_CLExit
.2555	60		rts				rts
.2556					CommandSave:
.2556	20 69 25	jsr $2569			jsr 	CLSParameters					; get parameters for save
.2559	90 08		bcc $2563			bcc 	_CSNoOverrideAddress
.255b	20 23 32	jsr $3223			jsr 	CheckComma 						; should be a comma.
.255e	a2 02		ldx #$02			ldx 	#2
.2560	20 11 2b	jsr $2b11			jsr 	EvaluateInteger 				; get save end address.
.2563					_CSNoOverrideAddress:
.2563	a2 18		ldx #$18		ldx	#24
.2565	20 bf 14	jsr $14bf		jsr	deviceHandler
.2568	60		rts				rts
.2569					CLSParameters:
.2569	a2 00		ldx #$00			ldx 	#0 								; string
.256b	20 06 2b	jsr $2b06			jsr 	EvaluateString
.256e	e8		inx				inx 									; erase out +1 +2
.256f	20 a3 31	jsr $31a3			jsr 	MInt32False
.2572	e8		inx				inx
.2573	20 a3 31	jsr $31a3			jsr 	MInt32False
.2576	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2579	85 51		sta $51				sta 	esInt0+1
.257b	ad c9 0a	lda $0ac9			lda 	basePage+1
.257e	85 59		sta $59				sta 	esInt1+1
.2580	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2583	85 52		sta $52				sta 	esInt0+2
.2585	ad cb 0a	lda $0acb			lda 	endProgram+1
.2588	85 5a		sta $5a				sta 	esInt1+2
.258a	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.258c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.258e	d0 08		bne $2598			bne 	_CLSDefault
.2590	c8		iny				iny 									; skip comma
.2591	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2593	20 11 2b	jsr $2b11			jsr 	EvaluateInteger
.2596	38		sec				sec
.2597	60		rts				rts
.2598					_CLSDefault:
.2598	18		clc				clc
.2599	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.259a					Command_New:
.259a					Command_XNew:
.259a	20 38 26	jsr $2638			jsr 	ResetCodeAddress 			; point to first line
.259d	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.259f	98		tya				tya
.25a0	91 28		sta ($28),y			sta 	(codePtr),y
.25a2	20 0b 24	jsr $240b			jsr 	CommandClear 				; clear everything down.
.25a5	4c 61 1f	jmp $1f61			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0c16					breakCounter:
>0c16								.fill 	1
.0c17					breakIncrement:
>0c17								.fill 	1
.25a8					Command_Run:
.25a8					XCommand_Run:
.25a8	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.25aa	9a		txs				txs
.25ab	20 32 26	jsr $2632			jsr 	BreakOn 					; turn break on
.25ae	20 0b 24	jsr $240b			jsr 	CommandClear 				; clear everything.
.25b1	20 38 26	jsr $2638			jsr 	ResetCodeAddress 			; back to the start.
.25b4					Command_RunFrom:
.25b4	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.25b6					CRNextInstruction:
.25b6	64 3a		stz $3a				stz 	softMemAlloc+1
.25b8	ad 16 0c	lda $0c16			lda 	breakCounter 				; check for break.
.25bb	6d 17 0c	adc $0c17			adc 	breakIncrement
.25be	8d 16 0c	sta $0c16			sta 	breakCounter
.25c1	90 05		bcc $25c8			bcc 	_CRNoChecks
.25c3	a2 00		ldx #$00		ldx	#0
.25c5	20 bf 14	jsr $14bf		jsr	deviceHandler
.25c8					_CRNoChecks
.25c8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.25ca	10 1c		bpl $25e8			bpl 	_CRNotToken
.25cc	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.25ce	b0 0c		bcs $25dc			bcs 	_CRExecute
.25d0	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.25d2	b0 71		bcs $2645			bcs 	Unimplemented
.25d4	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.25d6	b0 04		bcs $25dc			bcs 	_CRExecute
.25d8	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.25da	b0 16		bcs $25f2			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.25dc					_CRExecute:
.25dc	c8		iny				iny 								; consume it.
.25dd	0a		asl a				asl 	a 							; double it, losing most significant bit.
.25de	aa		tax				tax
.25df	20 e5 25	jsr $25e5			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.25e2	4c b6 25	jmp $25b6			jmp 	CRNextInstruction
.25e5					_CRRunRoutine:
.25e5	7c 4f 26	jmp ($264f,x)			jmp 	(Group0Vectors,x)
.25e8					_CRNotToken:
.25e8	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.25ea	b0 59		bcs $2645			bcs 	Unimplemented
.25ec					_CRDefaultLet:
.25ec	20 94 1e	jsr $1e94			jsr 	CommandLet 					; do the default, LET
.25ef	4c b6 25	jmp $25b6			jmp 	CRNextInstruction
.25f2					_CRCheckIndirect:
.25f2	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.25f4	f0 0a		beq $2600			beq 	_CRAndCommand
.25f6	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.25f8	f0 f2		beq $25ec			beq 	_CRDefaultLet
.25fa	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.25fc	f0 ee		beq $25ec			beq 	_CRDefaultLet
.25fe	d0 45		bne $2645			bne 	Unimplemented
.2600					_CRAndCommand:
.2600	c8		iny				iny 								; skip over the AND token
.2601	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2603	20 1d 26	jsr $261d			jsr 	CommandAssembler 			; do the assembler command
.2606	4c b6 25	jmp $25b6			jmp 	CRNextInstruction 			; and loop round.
.2609					CommandShift1:
.2609	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.260b	10 38		bpl $2645			bpl 	Unimplemented 				; we have an error as this should not happen.
.260d	c8		iny				iny 								; advance over it.
.260e	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2610	b0 0b		bcs $261d			bcs 	CommandAssembler
.2612	0a		asl a				asl 	a 							; double into X
.2613	aa		tax				tax
.2614	7c 13 27	jmp ($2713,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2617					CommandShift2:
.2617	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2619	20 15 18	jsr $1815		jsr	extensionHandler
.261c	60		rts				rts
.261d					CommandAssembler:
.261d	a2 00		ldx #$00		ldx	#0
.261f	20 84 13	jsr $1384		jsr	assemblerHandler
.2622	60		rts				rts
.2623					CommandAssemblerLabel:
.2623	a2 02		ldx #$02		ldx	#2
.2625	20 84 13	jsr $1384		jsr	assemblerHandler
.2628	60		rts				rts
.2629					CommandColon:
.2629	60		rts				rts
.262a					CommandBreak:
.262a	20 0f 2b	jsr $2b0f			jsr 	EvaluateRootInteger
.262d	20 ca 31	jsr $31ca			jsr 	MInt32Zero
.2630	f0 02		beq $2634			beq 	BreakOff
.2632					BreakOn:
.2632	a2 08		ldx #$08			ldx 	#8
.2634					BreakOff:
.2634	8e 17 0c	stx $0c17			stx 	breakIncrement
.2637	60		rts				rts
.2638					ResetCodeAddress:
.2638	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.263b	85 28		sta $28				sta 	codePtr
.263d	ad c9 0a	lda $0ac9			lda 	basePage+1
.2640	85 29		sta $29				sta 	codePtr+1
.2642	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2644	60		rts				rts
.2645					Unimplemented:
.2645	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2647	20 e0 14	jsr $14e0		jsr	errorHandler
.264a					TKErr01:
.264a					TKErr02:
.264a					TKErr03:
.264a					TKErr04:
.264a					TKErr05:
.264a					TKErr06:
.264a					TKErr07:
.264a					TKErr08:
.264a					TKErr09:
.264a					TKErr10:
.264a					TKErr11:
.264a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.264c	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.264f					Group0Vectors:
>264f	67 1f					.word	AdvanceNextLine          ; $80 [[eol]]
>2651	09 26					.word	CommandShift1            ; $81 [[sh1]]
>2653	17 26					.word	CommandShift2            ; $82 [[sh2]]
>2655	4a 26					.word	TKErr09                  ; $83 [[sh3]]
>2657	4a 26					.word	TKErr10                  ; $84 [[fpc]]
>2659	4a 26					.word	TKErr08                  ; $85 [[str]]
>265b	f6 27					.word	AndHandler               ; $86 and
>265d	e3 27					.word	OrHandler                ; $87 or
>265f	d0 27					.word	XorHandler               ; $88 xor
>2661	18 29					.word	CompareGreaterEq         ; $89 >=
>2663	22 29					.word	CompareLessEq            ; $8a <=
>2665	04 29					.word	CompareGreater           ; $8b >
>2667	fa 28					.word	CompareLess              ; $8c <
>2669	f0 28					.word	CompareEquals            ; $8d =
>266b	0e 29					.word	CompareNotEquals         ; $8e <>
>266d	61 27					.word	AddHandler               ; $8f +
>266f	84 27					.word	SubHandler               ; $90 -
>2671	1c 28					.word	ShrHandler               ; $91 >>
>2673	09 28					.word	ShlHandler               ; $92 <<
>2675	97 27					.word	MulHandler               ; $93 *
>2677	aa 27					.word	DivHandler               ; $94 /
>2679	bd 27					.word	ModHandler               ; $95 mod
>267b	55 28					.word	PowerHandler             ; $96 ^
>267d	2f 28					.word	WordRefHandler           ; $97 !
>267f	42 28					.word	ByteRefHandler           ; $98 ?
>2681	26 23					.word	Command_Repeat           ; $99 repeat
>2683	d0 23					.word	Command_While            ; $9a while
>2685	7b 1f					.word	Command_FOR              ; $9b for
>2687	8a 20					.word	CommandIf                ; $9c if
>2689	4a 26					.word	TKErr04                  ; $9d defproc
>268b	33 23					.word	Command_Until            ; $9e until
>268d	f3 23					.word	Command_Wend             ; $9f wend
>268f	dc 1f					.word	Command_NEXT             ; $a0 next
>2691	4a 26					.word	TKErr06                  ; $a1 then
>2693	c5 20					.word	Command_ENDIF            ; $a2 endif
>2695	35 22					.word	ReturnProc               ; $a3 endproc
>2697	7c 2a					.word	UnaryParenthesis         ; $a4 (
>2699	58 2c					.word	UnaryLen                 ; $a5 len(
>269b	9c 2c					.word	UnarySgn                 ; $a6 sgn(
>269d	85 2c					.word	UnaryAbs                 ; $a7 abs(
>269f	f5 2c					.word	Unary_Random             ; $a8 random(
>26a1	3f 2d					.word	Unary_Page               ; $a9 page
>26a3	9f 31					.word	MInt32True               ; $aa true
>26a5	a3 31					.word	MInt32False              ; $ab false
>26a7	0a 2d					.word	Unary_Min                ; $ac min(
>26a9	0e 2d					.word	Unary_Max                ; $ad max(
>26ab	17 2e					.word	UnarySys                 ; $ae sys(
>26ad	c0 2d					.word	UnaryTimer               ; $af timer(
>26af	d5 2b					.word	EventFunction            ; $b0 event(
>26b1	e9 2d					.word	UnaryGet                 ; $b1 get(
>26b3	d9 2d					.word	UnaryInkey               ; $b2 inkey(
>26b5	90 2d					.word	UnaryAlloc               ; $b3 alloc(
>26b7	50 2e					.word	ExecChr                  ; $b4 chr$(
>26b9	80 2e					.word	ExecLeft                 ; $b5 left$(
>26bb	9d 2e					.word	ExecMid                  ; $b6 mid$(
>26bd	c5 2e					.word	ExecRight                ; $b7 right$(
>26bf	57 2b					.word	Event_Str                ; $b8 str$(
>26c1	86 2b					.word	UnaryVal                 ; $b9 val(
>26c3	b3 2c					.word	UnaryPeek                ; $ba peek(
>26c5	b9 2c					.word	UnaryDeek                ; $bb deek(
>26c7	bf 2c					.word	UnaryLeek                ; $bc leek(
>26c9	76 2c					.word	UnaryAsc                 ; $bd asc(
>26cb	6a 2d					.word	UnaryIntToFloat          ; $be int(
>26cd	7d 2d					.word	UnaryFloatToInt          ; $bf float(
>26cf	89 2b					.word	UnaryIsVal               ; $c0 isval(
>26d1	67 2e					.word	ExecUpper                ; $c1 upper$(
>26d3	64 2e					.word	ExecLower                ; $c2 lower$(
>26d5	4d 2d					.word	UnaryReference           ; $c3 @
>26d7	63 2d					.word	UnaryComplement          ; $c4 ~
>26d9	60 2d					.word	UnaryHexMarker           ; $c5 &
>26db	02 2e					.word	UnaryGetString           ; $c6 get$(
>26dd	08 2e					.word	UnaryInkeyString         ; $c7 inkey$(
>26df	3f 2e					.word	UnaryMem                 ; $c8 mem
>26e1	4a 26					.word	TKErr01                  ; $c9 )
>26e3	29 26					.word	CommandColon             ; $ca :
>26e5	4a 26					.word	TKErr02                  ; $cb ,
>26e7	4a 26					.word	TKErr03                  ; $cc ;
>26e9	4f 1f					.word	Command_Rem2             ; $cd '
>26eb	4a 26					.word	TKErr07                  ; $ce to
>26ed	4a 26					.word	TKErr05                  ; $cf step
>26ef	c8 21					.word	CallProc                 ; $d0 proc
>26f1	c6 20					.word	CommandLocal             ; $d1 local
>26f3	86 1e					.word	Command_Dim              ; $d2 dim
>26f5	4f 1f					.word	Command_Rem              ; $d3 rem
>26f7	94 1e					.word	CommandLet               ; $d4 let
>26f9	d0 1c					.word	Command_Input            ; $d5 input
>26fb	bf 20					.word	Command_ELSE             ; $d6 else
>26fd	57 1e					.word	Command_VDU              ; $d7 vdu
>26ff	86 1d					.word	Command_Print            ; $d8 print
>2701	9e 1c					.word	CommandGOTO              ; $d9 goto
>2703	73 1c					.word	CommandGOSUB             ; $da gosub
>2705	86 1c					.word	CommandRETURN            ; $db return
>2707	38 1c					.word	CommandData              ; $dc data
>2709	78 1e					.word	Command_Assert           ; $dd assert
>270b	12 1f					.word	Command_Poke             ; $de poke
>270d	16 1f					.word	Command_Doke             ; $df doke
>270f	1a 1f					.word	Command_Loke             ; $e0 loke
>2711	27 1e					.word	Command_Ink              ; $e1 ink
>2713	32 1e					.word	Command_Paper            ; $e2 paper
>2715	21 1e					.word	Command_CLS              ; $e3 cls
>2717	3d 1e					.word	Command_Locate           ; $e4 locate
>2719	2a 26					.word	CommandBreak             ; $e5 break
>271b	23 26					.word	CommandAssemblerLabel    ; $e6 .
>271d	4a 26					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.271f					Group1Vectors:
>271f	0b 24					.word	CommandClear             ; $86 clear
>2721	41 25					.word	CommandLoad              ; $87 load
>2723	56 25					.word	CommandSave              ; $88 save
>2725	66 24					.word	CommandList              ; $89 list
>2727	9a 25					.word	Command_New              ; $8a new
>2729	a8 25					.word	Command_Run              ; $8b run
>272b	0d 1c					.word	CommandRead              ; $8c read
>272d	41 1c					.word	CommandRestore           ; $8d restore
>272f	61 1f					.word	CommandEnd               ; $8e end
>2731	5c 1f					.word	CommandStop              ; $8f stop
>2733	64 1f					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2735					BinaryProcess:
.2735	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2737	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2739	0a		asl a				asl 	a
.273a	30 0e		bmi $274a			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.273c	18		clc				clc 								; return CC for integer
.273d	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.273f	f0 08		beq $2749			beq 	_BPExit 					; if both integer then return with CC.
.2741	20 4f 27	jsr $274f			jsr 	BPMakeBothFloat 			; make both float
.2744	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2746	95 48		sta $48,x			sta 	esType,x
.2748	38		sec				sec 								; and return with carry set.
.2749					_BPExit:
.2749	60		rts				rts
.274a					_BPStringType:
.274a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.274c	20 e0 14	jsr $14e0		jsr	errorHandler
.274f					BPMakeBothFloat:
.274f	e8		inx				inx
.2750	20 54 27	jsr $2754			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2753	ca		dex				dex
.2754					BPMakeFloat:
.2754	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.2756	4a		lsr a				lsr 	a
.2757	b0 07		bcs $2760			bcs 	_BPIsFloat 					; already a float if set.
.2759	8a		txa				txa
.275a	a2 1a		ldx #$1a		ldx	#26
.275c	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.275f	aa		tax				tax
.2760					_BPIsFloat:
.2760	60		rts				rts
.2761					AddHandler:
.2761	20 32 29	jsr $2932			jsr 	DereferenceTwo 				; dereference top two on stack.
.2764	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.2766	35 49		and $49,x			and 	esType+1,x
.2768	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.276a	d0 10		bne $277c			bne 	_AHStringConcat				; concatenate strings.
.276c	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.276f	b0 03		bcs $2774			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2771	4c 87 30	jmp $3087			jmp 	MInt32Add 							; else do it as integer.
.2774					_IsFPOperation:
.2774	8a		txa				txa 								; call the relevant fp routine
.2775	a2 02		ldx #$02		ldx	#2
.2777	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.277a	aa		tax				tax
.277b	60		rts				rts
.277c					_AHStringConcat:
.277c	8a		txa				txa 								; handled by the string module.
.277d	a2 04		ldx #$04		ldx	#4
.277f	20 49 35	jsr $3549		jsr	stringHandler
.2782	aa		tax				tax
.2783	60		rts				rts
.2784					SubHandler:
.2784	20 32 29	jsr $2932			jsr 	DereferenceTwo
.2787	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.278a	b0 03		bcs $278f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.278c	4c a1 30	jmp $30a1			jmp 	MInt32Sub 							; else do it as integer.
.278f					_IsFPOperation:
.278f	8a		txa				txa 								; call the relevant fp routine
.2790	a2 10		ldx #$10		ldx	#16
.2792	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2795	aa		tax				tax
.2796	60		rts				rts
.2797					MulHandler:
.2797	20 32 29	jsr $2932			jsr 	DereferenceTwo
.279a	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.279d	b0 03		bcs $27a2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.279f	4c bb 30	jmp $30bb			jmp 	MInt32Multiply 							; else do it as integer.
.27a2					_IsFPOperation:
.27a2	8a		txa				txa 								; call the relevant fp routine
.27a3	a2 0a		ldx #$0a		ldx	#10
.27a5	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.27a8	aa		tax				tax
.27a9	60		rts				rts
.27aa					DivHandler:
.27aa	20 32 29	jsr $2932			jsr 	DereferenceTwo
.27ad	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.27b0	b0 03		bcs $27b5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27b2	4c 78 2f	jmp $2f78			jmp 	MInt32SDivide 							; else do it as integer.
.27b5					_IsFPOperation:
.27b5	8a		txa				txa 								; call the relevant fp routine
.27b6	a2 06		ldx #$06		ldx	#6
.27b8	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.27bb	aa		tax				tax
.27bc	60		rts				rts
.27bd					ModHandler:
.27bd	20 32 29	jsr $2932			jsr 	DereferenceTwo
.27c0	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.27c3	b0 03		bcs $27c8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27c5	4c f6 2f	jmp $2ff6			jmp 	MInt32Modulus 							; else do it as integer.
.27c8					_IsFPOperation:
.27c8	8a		txa				txa 								; call the relevant fp routine
.27c9	a2 08		ldx #$08		ldx	#8
.27cb	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.27ce	aa		tax				tax
.27cf	60		rts				rts
.27d0					XorHandler:
.27d0	20 32 29	jsr $2932			jsr 	DereferenceTwo
.27d3	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.27d6	b0 03		bcs $27db			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27d8	4c 2a 2f	jmp $2f2a			jmp 	MInt32Xor 							; else do it as integer.
.27db					_IsFPOperation:
.27db	8a		txa				txa 								; call the relevant fp routine
.27dc	a2 08		ldx #$08		ldx	#8
.27de	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.27e1	aa		tax				tax
.27e2	60		rts				rts
.27e3					OrHandler:
.27e3	20 32 29	jsr $2932			jsr 	DereferenceTwo
.27e6	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.27e9	b0 03		bcs $27ee			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27eb	4c 11 2f	jmp $2f11			jmp 	MInt32Or 							; else do it as integer.
.27ee					_IsFPOperation:
.27ee	8a		txa				txa 								; call the relevant fp routine
.27ef	a2 08		ldx #$08		ldx	#8
.27f1	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.27f4	aa		tax				tax
.27f5	60		rts				rts
.27f6					AndHandler:
.27f6	20 32 29	jsr $2932			jsr 	DereferenceTwo
.27f9	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.27fc	b0 03		bcs $2801			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.27fe	4c f8 2e	jmp $2ef8			jmp 	MInt32And 							; else do it as integer.
.2801					_IsFPOperation:
.2801	8a		txa				txa 								; call the relevant fp routine
.2802	a2 08		ldx #$08		ldx	#8
.2804	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2807	aa		tax				tax
.2808	60		rts				rts
.2809					ShlHandler:
.2809	20 32 29	jsr $2932			jsr 	DereferenceTwo
.280c	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.280f	b0 03		bcs $2814			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2811	4c 8a 28	jmp $288a			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2814					_IsFPOperation:
.2814	8a		txa				txa 								; call the relevant fp routine
.2815	a2 08		ldx #$08		ldx	#8
.2817	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.281a	aa		tax				tax
.281b	60		rts				rts
.281c					ShrHandler:
.281c	20 32 29	jsr $2932			jsr 	DereferenceTwo
.281f	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.2822	b0 03		bcs $2827			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2824	4c 8d 28	jmp $288d			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2827					_IsFPOperation:
.2827	8a		txa				txa 								; call the relevant fp routine
.2828	a2 08		ldx #$08		ldx	#8
.282a	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.282d	aa		tax				tax
.282e	60		rts				rts
.282f					WordRefHandler:
.282f	20 32 29	jsr $2932			jsr 	DereferenceTwo
.2832	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.2835	b0 03		bcs $283a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2837	4c 7c 28	jmp $287c			jmp 	MInt32WordIndirect 							; else do it as integer.
.283a					_IsFPOperation:
.283a	8a		txa				txa 								; call the relevant fp routine
.283b	a2 08		ldx #$08		ldx	#8
.283d	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2840	aa		tax				tax
.2841	60		rts				rts
.2842					ByteRefHandler:
.2842	20 32 29	jsr $2932			jsr 	DereferenceTwo
.2845	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.2848	b0 03		bcs $284d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.284a	4c 80 28	jmp $2880			jmp 	MInt32ByteIndirect 							; else do it as integer.
.284d					_IsFPOperation:
.284d	8a		txa				txa 								; call the relevant fp routine
.284e	a2 08		ldx #$08		ldx	#8
.2850	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2853	aa		tax				tax
.2854	60		rts				rts
.2855					PowerHandler:
.2855	20 32 29	jsr $2932			jsr 	DereferenceTwo
.2858	20 35 27	jsr $2735			jsr 	BinaryProcess 				; check to see if either is float
.285b	b0 03		bcs $2860			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.285d	4c 68 28	jmp $2868			jmp 	PowerInteger 							; else do it as integer.
.2860					_IsFPOperation:
.2860	8a		txa				txa 								; call the relevant fp routine
.2861	a2 16		ldx #$16		ldx	#22
.2863	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2866	aa		tax				tax
.2867	60		rts				rts
.2868					PowerInteger:
.2868	20 4f 27	jsr $274f			jsr 	BPMakeBothFloat				; make them float.
.286b	8a		txa				txa
.286c	a2 16		ldx #$16		ldx	#22
.286e	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2871	a2 12		ldx #$12		ldx	#18
.2873	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2876	aa		tax				tax
.2877	a9 00		lda #$00			lda 	#0 							; make type integer
.2879	95 48		sta $48,x			sta 	esType,x
.287b	60		rts				rts
.287c					Mint32WordIndirect:
.287c	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.287e	d0 02		bne $2882			bne 	Min32Indirect
.2880					Mint32ByteIndirect:
.2880	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2882					Min32Indirect:
.2882	48		pha				pha 								; save the indirection
.2883	20 87 30	jsr $3087			jsr 	MInt32Add 					; add a!b a?b
.2886	68		pla				pla 								; and set the type to reference.
.2887	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2889	60		rts				rts
.288a					Mint32ShiftLeftX:
.288a	18		clc				clc 								; CC shift left
.288b	90 01		bcc $288e			bcc 	Mint32Shift
.288d					Mint32ShiftRightX:
.288d	38		sec				sec 								; CS shift right
.288e					Mint32Shift:
.288e	08		php				php 								; save carry flag on stack.
.288f	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2891	15 61		ora $61,x			ora 	esInt2+1,x
.2893	15 69		ora $69,x			ora 	esInt3+1,x
.2895	d0 1e		bne $28b5			bne 	_MShiftZero
.2897	b5 51		lda $51,x			lda 	esInt0+1,x
.2899	c9 20		cmp #$20			cmp 	#32
.289b	b0 18		bcs $28b5			bcs 	_MShiftZero
.289d					_MShiftLoop:
.289d	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.289f	f0 12		beq $28b3			beq 	_MShiftExit
.28a1	d6 51		dec $51,x			dec 	esInt0+1,x
.28a3	28		plp				plp 								; restore and save carry
.28a4	08		php				php
.28a5	90 06		bcc $28ad			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.28a7	20 c1 31	jsr $31c1			jsr 	Mint32ShiftRight
.28aa	4c 9d 28	jmp $289d			jmp 	_MShiftLoop
.28ad					_MShiftLeft:
.28ad	20 b8 31	jsr $31b8			jsr 	Mint32ShiftLeft
.28b0	4c 9d 28	jmp $289d			jmp 	_MShiftLoop
.28b3					_MShiftExit:
.28b3	28		plp				plp	 								; throw saved carry and exit
.28b4	60		rts				rts
.28b5					_MShiftZero:
.28b5	4c a3 31	jmp $31a3			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.28b8					PerformComparison:
.28b8	20 32 29	jsr $2932			jsr 	DereferenceTwo 				; make both values.
.28bb	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.28bd	35 49		and $49,x			and 	esType+1,x
.28bf	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.28c0	30 1d		bmi $28df			bmi 	_PCIsString
.28c2	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.28c4	15 49		ora $49,x			ora 	esType+1,x
.28c6	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.28c7	30 22		bmi $28eb			bmi 	_PCError
.28c9	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.28cb	f0 0f		beq $28dc			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.28cd	20 4f 27	jsr $274f			jsr 	BPMakeBothFloat 			; make both float
.28d0	8a		txa				txa
.28d1	a2 04		ldx #$04		ldx	#4
.28d3	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.28d6	86 32		stx $32				stx 	tempShort 					; save result
.28d8	aa		tax				tax
.28d9	a5 32		lda $32				lda 	tempShort
.28db	60		rts				rts
.28dc					_PCIsInteger:
.28dc	4c 43 2f	jmp $2f43			jmp 	MInt32Compare
.28df					_PCIsString:
.28df	8a		txa				txa 								; A has SP
.28e0	a2 08		ldx #$08		ldx	#8
.28e2	20 49 35	jsr $3549		jsr	stringHandler
.28e5	86 32		stx $32				stx 	tempShort 					; save result
.28e7	aa		tax				tax 								; put SP back in X and get result.
.28e8	a5 32		lda $32				lda 	tempShort
.28ea	60		rts				rts
.28eb					_PCError:
.28eb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.28ed	20 e0 14	jsr $14e0		jsr	errorHandler
.28f0					CompareEquals:
.28f0	20 b8 28	jsr $28b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28f3	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.28f5	f0 35		beq $292c			beq  	CompareTrue
.28f7	4c 2f 29	jmp $292f			jmp 	CompareFalse
.28fa					CompareLess:
.28fa	20 b8 28	jsr $28b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.28fd	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.28ff	f0 2b		beq $292c			beq  	CompareTrue
.2901	4c 2f 29	jmp $292f			jmp 	CompareFalse
.2904					CompareGreater:
.2904	20 b8 28	jsr $28b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2907	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2909	f0 21		beq $292c			beq  	CompareTrue
.290b	4c 2f 29	jmp $292f			jmp 	CompareFalse
.290e					CompareNotEquals:
.290e	20 b8 28	jsr $28b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2911	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2913	d0 17		bne $292c			bne  	CompareTrue
.2915	4c 2f 29	jmp $292f			jmp 	CompareFalse
.2918					CompareGreaterEq:
.2918	20 b8 28	jsr $28b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.291b	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.291d	d0 0d		bne $292c			bne  	CompareTrue
.291f	4c 2f 29	jmp $292f			jmp 	CompareFalse
.2922					CompareLessEq:
.2922	20 b8 28	jsr $28b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2925	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2927	d0 03		bne $292c			bne  	CompareTrue
.2929	4c 2f 29	jmp $292f			jmp 	CompareFalse
.292c					CompareTrue:
.292c	4c 9f 31	jmp $319f			jmp 	MInt32True
.292f					CompareFalse:
.292f	4c a3 31	jmp $31a3			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2932					DereferenceTwo:
.2932	e8		inx				inx
.2933	20 37 29	jsr $2937			jsr 	DereferenceOne
.2936	ca		dex				dex
.2937					DereferenceOne:
.2937	b5 48		lda $48,x			lda 	esType,x
.2939	10 3d		bpl $2978			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.293b	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.293c	b0 3b		bcs $2979			bcs 	_DRFloatDeReference
.293e	98		tya				tya
.293f	48		pha				pha
.2940	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2942	85 2a		sta $2a				sta 	temp0
.2944	b5 58		lda $58,x			lda 	esInt1,x
.2946	85 2b		sta $2b				sta 	temp0+1
.2948	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.294a	95 58		sta $58,x			sta 	esInt1,x
.294c	95 60		sta $60,x			sta 	esInt2,x
.294e	95 68		sta $68,x			sta 	esInt3,x
.2950	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2952	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2954	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2955	30 0d		bmi $2964			bmi 	_DeRefString 				; string, 2 bytes only
.2957	d0 11		bne $296a			bne 	_DeRefByte 					; byte 1 byte only
.2959					_DeRefLong:
.2959	a0 03		ldy #$03			ldy 	#3
.295b	b1 2a		lda ($2a),y			lda 	(temp0),y
.295d	95 68		sta $68,x			sta 	esInt3,x
.295f	88		dey				dey
.2960	b1 2a		lda ($2a),y			lda 	(temp0),y
.2962	95 60		sta $60,x			sta 	esInt2,x
.2964					_DeRefString:
.2964	a0 01		ldy #$01			ldy 	#1
.2966	b1 2a		lda ($2a),y			lda 	(temp0),y
.2968	95 58		sta $58,x			sta 	esInt1,x
.296a					_DeRefByte:
.296a	a0 00		ldy #$00			ldy 	#0
.296c	b1 2a		lda ($2a),y			lda 	(temp0),y
.296e	95 50		sta $50,x			sta 	esInt0,x
.2970	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2972	29 40		and #$40			and 	#$40
.2974	95 48		sta $48,x			sta 	esType,x
.2976	68		pla				pla
.2977	a8		tay				tay
.2978					_DRNotReference
.2978	60		rts				rts
.2979					_DRFloatDereference:
.2979	20 09 1f	jsr $1f09			jsr 	TOSToTemp0 					; address to deref in temp0
.297c	8a		txa				txa
.297d	a2 1c		ldx #$1c		ldx	#28
.297f	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2982	aa		tax				tax
.2983	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2985	95 48		sta $48,x			sta 	esType,x
.2987	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2988					EvaluateLevel:
.2988	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.298a	b0 1e		bcs $29aa			bcs 	_ELStack
.298c	48		pha				pha 								; save precedence level.
.298d	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.298f	95 50		sta $50,x			sta 	esInt0,x
.2991	95 58		sta $58,x			sta 	esInt1,x
.2993	95 60		sta $60,x			sta 	esInt2,x
.2995	95 68		sta $68,x			sta 	esInt3,x
.2997	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2999	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.299b	30 26		bmi $29c3			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.299d	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.299e	30 0f		bmi $29af			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.29a0	8a		txa				txa 								; stack level in X
.29a1	a2 00		ldx #$00		ldx	#0
.29a3	20 22 41	jsr $4122		jsr	variableHandler
.29a6	aa		tax				tax
.29a7	4c ec 29	jmp $29ec			jmp		_ELHasTerm
.29aa					_ELStack:
.29aa	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.29ac	20 e0 14	jsr $14e0		jsr	errorHandler
.29af					_ELIsConstant:
.29af	4a		lsr a				lsr 	a 							; get the value back
.29b0	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.29b2	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.29b4					_ELCheckNext:
.29b4	c8		iny				iny 								; look at next
.29b5	b1 28		lda ($28),y			lda 	(codePtr),y
.29b7	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.29b9	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.29bb	b0 2f		bcs $29ec			bcs 	_ELHasTerm 					; done getting the constant.
.29bd	20 85 2a	jsr $2a85			jsr 	ELShiftByteIn 				; shift byte into position.
.29c0	4c b4 29	jmp $29b4			jmp 	_ELCheckNext
.29c3					_ELIsToken:
.29c3	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.29c5	f0 0f		beq $29d6			beq 	_ELIsString
.29c7	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.29c9	d0 5f		bne $2a2a			bne 	_ELCheckUnary
.29cb	8a		txa				txa 								; put X into A
.29cc	c8		iny				iny 								; skip over the float marker
.29cd	a2 18		ldx #$18		ldx	#24
.29cf	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.29d2	aa		tax				tax 								; restore X
.29d3	4c ec 29	jmp $29ec			jmp 	_ELHasTerm
.29d6					_ELIsString:
.29d6	98		tya				tya 								; address of string is codePtr+y+1
.29d7	38		sec				sec
.29d8	65 28		adc $28				adc 	codePtr
.29da	95 50		sta $50,x			sta 	esInt0,x
.29dc	a5 29		lda $29				lda 	codePtr+1
.29de	69 00		adc #$00			adc 	#0
.29e0	95 58		sta $58,x			sta 	esInt1,x
.29e2	a9 40		lda #$40			lda 	#$40 						; set type to string value
.29e4	95 48		sta $48,x			sta 	esType,x
.29e6	c8		iny				iny 								; skip over string.
.29e7	98		tya				tya
.29e8	38		sec				sec									; +1 for the length itself.
.29e9	71 28		adc ($28),y			adc 	(codePtr),y
.29eb	a8		tay				tay 								; and fall through to term loop code.
.29ec					_ELHasTerm:
.29ec	b1 28		lda ($28),y			lda 	(codePtr),y
.29ee	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.29f0	90 04		bcc $29f6			bcc 	_ELPopExit
.29f2	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.29f4	90 02		bcc $29f8			bcc 	_ELHasBinaryTerm
.29f6					_ELPopExit:
.29f6	68		pla				pla
.29f7					_ELExit:
.29f7	60		rts				rts
.29f8					_ELHasBinaryTerm:
.29f8	84 32		sty $32				sty 	tempShort 					; save position
.29fa	a8		tay				tay 								; use token as an index and get the precedence.
.29fb	b9 2d 2a	lda $2a2d,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.29fe	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2a00	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2a02	68		pla				pla 								; restore current level.
.2a03	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2a05	b0 f0		bcs $29f7			bcs 	_ELExit
.2a07	48		pha				pha 								; save current level back on the stack.
.2a08	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2a0a	48		pha				pha
.2a0b	c8		iny				iny
.2a0c	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2a0d	a5 32		lda $32				lda 	tempShort
.2a0f	20 88 29	jsr $2988			jsr 	EvaluateLevel
.2a12	ca		dex				dex
.2a13	68		pla				pla 								; get the operator back out.
.2a14					_ELExecuteA:
.2a14	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2a16	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2a17	aa		tax				tax
.2a18	bd 4f 26	lda $264f,x			lda 	Group0Vectors,x
.2a1b	85 2a		sta $2a				sta 	temp0
.2a1d	bd 50 26	lda $2650,x			lda 	Group0Vectors+1,x
.2a20	85 2b		sta $2b				sta 	temp0+1
.2a22	a6 32		ldx $32				ldx 	tempShort
.2a24	20 71 2a	jsr $2a71			jsr 	_ELCallTemp0
.2a27	4c ec 29	jmp $29ec			jmp 	_ELHasTerm 					; and loop back round.
.2a2a					_ELCheckUnary:
.2a2a	c8		iny				iny 								; skip over token.
.2a2b	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2a2d	f0 19		beq $2a48			beq 	_ELMinus
.2a2f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2a31	f0 2c		beq $2a5f			beq 	_ELIndirect
.2a33	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2a35	f0 28		beq $2a5f			beq 	_ELIndirect
.2a37	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2a39	f0 39		beq $2a74			beq 	_ELExtension
.2a3b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2a3d	90 04		bcc $2a43			bcc 	_ELUSyntax
.2a3f	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2a41	90 d1		bcc $2a14			bcc 	_ELExecuteA 				; if so do that token.
.2a43					_ELUSyntax:
.2a43	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a45	20 e0 14	jsr $14e0		jsr	errorHandler
.2a48					_ELMinus:
.2a48	20 da 2a	jsr $2ada			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2a4b	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2a4d	f0 0a		beq $2a59			beq 	_ELMinusInteger
.2a4f	8a		txa				txa
.2a50	a2 0c		ldx #$0c		ldx	#12
.2a52	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2a55	aa		tax				tax
.2a56	4c ec 29	jmp $29ec			jmp 	_ELHasTerm
.2a59					_ELMinusInteger:
.2a59	20 5d 31	jsr $315d			jsr 	MInt32Negate 				; do int negate
.2a5c	4c ec 29	jmp $29ec			jmp 	_ELHasTerm
.2a5f					_ELIndirect:
.2a5f	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2a60	20 e3 2a	jsr $2ae3			jsr 	EvaluateIntegerTerm 		; integer address
.2a63	68		pla				pla
.2a64	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2a66	f0 02		beq $2a6a			beq 	_ELHaveModifier
.2a68	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2a6a					_ELHaveModifier:
.2a6a	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2a6c	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2a6e	4c ec 29	jmp $29ec			jmp 	_ELHasTerm
.2a71					_ELCallTemp0:
.2a71	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2a74					_ELExtension:
.2a74	8a		txa				txa 								; stack pos in A
.2a75	20 15 18	jsr $1815		jsr	extensionHandler
.2a78	aa		tax				tax 								; restore stack
.2a79	4c ec 29	jmp $29ec			jmp 	_ELHasTerm
.2a7c					UnaryParenthesis:
.2a7c	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2a7e	20 88 29	jsr $2988			jsr 	EvaluateLevel
.2a81	20 16 32	jsr $3216			jsr 	CheckRightParen 			; check for )
.2a84	60		rts				rts
.2a85					ELShiftByteIn:
.2a85	48		pha				pha 								; save bits to shift in.
.2a86	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2a88	48		pha				pha
.2a89	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2a8b	95 68		sta $68,x			sta 	esInt3,x
.2a8d	b5 58		lda $58,x			lda 	esInt1,x
.2a8f	95 60		sta $60,x			sta 	esInt2,x
.2a91	b5 50		lda $50,x			lda 	esInt0,x
.2a93	95 58		sta $58,x			sta 	esInt1,x
.2a95	a9 00		lda #$00			lda 	#0
.2a97	95 50		sta $50,x			sta 	esInt0,x
.2a99	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2a9a	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2a9c	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2a9e					_ELShiftLoop:
.2a9e	4a		lsr a				lsr 	a
.2a9f	76 68		ror $68,x			ror 	esInt3,x
.2aa1	76 60		ror $60,x			ror 	esInt2,x
.2aa3	76 58		ror $58,x			ror 	esInt1,x
.2aa5	76 50		ror $50,x			ror 	esInt0,x
.2aa7	c9 01		cmp #$01			cmp 	#1
.2aa9	d0 f3		bne $2a9e			bne 	_ELShiftLoop
.2aab	68		pla				pla 								; get original 6 bit value and OR in.
.2aac	29 3f		and #$3f			and 	#$3F
.2aae	15 50		ora $50,x			ora 	esInt0,x
.2ab0	95 50		sta $50,x			sta 	esInt0,x
.2ab2	60		rts				rts
.2ab3					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2ab3	01					.byte	$01			; $86 and
>2ab4	01					.byte	$01			; $87 or
>2ab5	01					.byte	$01			; $88 xor
>2ab6	02					.byte	$02			; $89 >=
>2ab7	02					.byte	$02			; $8a <=
>2ab8	02					.byte	$02			; $8b >
>2ab9	02					.byte	$02			; $8c <
>2aba	02					.byte	$02			; $8d =
>2abb	02					.byte	$02			; $8e <>
>2abc	03					.byte	$03			; $8f +
>2abd	03					.byte	$03			; $90 -
>2abe	04					.byte	$04			; $91 >>
>2abf	04					.byte	$04			; $92 <<
>2ac0	04					.byte	$04			; $93 *
>2ac1	04					.byte	$04			; $94 /
>2ac2	04					.byte	$04			; $95 mod
>2ac3	05					.byte	$05			; $96 ^
>2ac4	06					.byte	$06			; $97 !
>2ac5	06					.byte	$06			; $98 ?
>2ac6	82					.byte	$82			; $99 repeat
>2ac7	82					.byte	$82			; $9a while
>2ac8	82					.byte	$82			; $9b for
>2ac9	82					.byte	$82			; $9c if
>2aca	82					.byte	$82			; $9d defproc
>2acb	80					.byte	$80			; $9e until
>2acc	80					.byte	$80			; $9f wend
>2acd	80					.byte	$80			; $a0 next
>2ace	80					.byte	$80			; $a1 then
>2acf	80					.byte	$80			; $a2 endif
>2ad0	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2ad1					EvaluateTerm:
.2ad1	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2ad3	20 88 29	jsr $2988			jsr 	EvaluateLevel
.2ad6	20 37 29	jsr $2937			jsr 	DereferenceOne
.2ad9	60		rts				rts
.2ada					EvaluateNumericTerm:
.2ada	20 d1 2a	jsr $2ad1			jsr 	EvaluateTerm
.2add	b5 48		lda $48,x			lda 	esType,x
.2adf	0a		asl a				asl 	a 							; see if it's a string.
.2ae0	30 09		bmi $2aeb			bmi 	ENTType
.2ae2	60		rts				rts
.2ae3					EvaluateIntegerTerm:
.2ae3	20 d1 2a	jsr $2ad1			jsr 	EvaluateTerm
.2ae6	b5 48		lda $48,x			lda 	esType,x
.2ae8	d0 01		bne $2aeb			bne 	ENTType
.2aea	60		rts				rts
.2aeb					ENTType:
.2aeb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2aed	20 e0 14	jsr $14e0		jsr	errorHandler
.2af0					EvaluateRoot:
.2af0	a2 00		ldx #$00			ldx 	#0
.2af2					Evaluate:
.2af2	a9 00		lda #$00			lda 	#0
.2af4	20 88 29	jsr $2988			jsr 	EvaluateLevel
.2af7	20 37 29	jsr $2937			jsr 	DereferenceOne
.2afa	60		rts				rts
.2afb					EvaluateNumeric:
.2afb	20 f2 2a	jsr $2af2			jsr 	Evaluate
.2afe	b5 48		lda $48,x			lda 	esType,x
.2b00	0a		asl a				asl 	a 							; see if it's a string.
.2b01	30 e8		bmi $2aeb			bmi 	ENTType
.2b03	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2b04	4a		lsr a				lsr 	a
.2b05	60		rts				rts
.2b06					EvaluateString:
.2b06	20 f2 2a	jsr $2af2			jsr 	Evaluate
.2b09	b5 48		lda $48,x			lda 	esType,x
.2b0b	0a		asl a				asl 	a 							; see if it's a string.
.2b0c	10 dd		bpl $2aeb			bpl 	ENTType
.2b0e	60		rts				rts
.2b0f					EvaluateRootInteger:
.2b0f	a2 00		ldx #$00			ldx 	#0
.2b11					EvaluateInteger:
.2b11	20 f2 2a	jsr $2af2			jsr 	Evaluate
.2b14	b5 48		lda $48,x			lda 	esType,x
.2b16	d0 d3		bne $2aeb			bne 	ENTType
.2b18	60		rts				rts
.2b19					EvaluateSmallInteger:
.2b19	20 11 2b	jsr $2b11			jsr 	EvaluateInteger
.2b1c	b5 58		lda $58,x			lda 	esInt1,x
.2b1e	15 60		ora $60,x			ora 	esInt2,x
.2b20	15 68		ora $68,x			ora 	esInt3,x
.2b22	d0 03		bne $2b27			bne 	_ESIValue
.2b24	b5 50		lda $50,x			lda 	esInt0,x
.2b26	60		rts				rts
.2b27					_ESIValue:
.2b27	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2b29	20 e0 14	jsr $14e0		jsr	errorHandler
.2b2c					LinkEvaluate:
.2b2c	aa		tax				tax
.2b2d	20 f2 2a	jsr $2af2			jsr 	Evaluate
.2b30	8a		txa				txa
.2b31	60		rts				rts
.2b32					LinkEvaluateTerm:
.2b32	aa		tax				tax
.2b33	20 d1 2a	jsr $2ad1			jsr 	EvaluateTerm
.2b36	8a		txa				txa
.2b37	60		rts				rts
.2b38					LinkEvaluateInteger:
.2b38	aa		tax				tax
.2b39	20 11 2b	jsr $2b11			jsr 	EvaluateInteger
.2b3c	8a		txa				txa
.2b3d	60		rts				rts
.2b3e					LinkEvaluateSmallInt:
.2b3e	aa		tax				tax
.2b3f	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger
.2b42	8a		txa				txa
.2b43	60		rts				rts
.2b44					EvaluateReference:
.2b44	ad c4 2a	lda $2ac4			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2b47	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2b48	e9 01		sbc #$01			sbc 	#1
.2b4a	20 88 29	jsr $2988			jsr 	EvaluateLevel
.2b4d	b5 48		lda $48,x			lda 	esType,x
.2b4f	10 01		bpl $2b52			bpl 	_ERFail
.2b51	60		rts				rts
.2b52					_ERFail:
.2b52	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2b54	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2b57					Event_Str:
.2b57	20 fb 2a	jsr $2afb			jsr 	EvaluateNumeric 			; get a number.
.2b5a	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2b5c	d0 13		bne $2b71			bne 	_ESFloat
.2b5e	20 b4 2b	jsr $2bb4			jsr 	ConvertGetBase 				; get base, or default.
.2b61	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2b63	85 2a		sta $2a				sta 	temp0
.2b65	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2b67	85 2b		sta $2b				sta 	1+(temp0)
.2b69	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2b6b	20 f9 30	jsr $30f9			jsr 	MInt32ToString 				; convert to string.
.2b6e	4c 7e 2b	jmp $2b7e			jmp 	_ESCloneExit 				; clone and exit.
.2b71					_ESFloat:
.2b71	20 16 32	jsr $3216			jsr 	CheckRightParen 			; check closing )
.2b74	20 09 1f	jsr $1f09			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2b77	8a		txa				txa
.2b78	a2 14		ldx #$14		ldx	#20
.2b7a	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2b7d	aa		tax				tax
.2b7e					_ESCloneExit:
.2b7e	8a		txa				txa
.2b7f	a2 02		ldx #$02		ldx	#2
.2b81	20 49 35	jsr $3549		jsr	stringHandler
.2b84	aa		tax				tax
.2b85	60		rts				rts
.2b86					UnaryVal:
.2b86	38		sec				sec 								; Carry set to return value
.2b87	b0 01		bcs $2b8a			bcs 	ValueMain
.2b89					UnaryIsVal:
.2b89	18		clc				clc									; Carry clear to return legitimacy
.2b8a					ValueMain:
.2b8a	08		php				php 								; save results (CS is value, CC is validation)
.2b8b	20 06 2b	jsr $2b06			jsr 	EvaluateString
.2b8e	20 b4 2b	jsr $2bb4			jsr 	ConvertGetBase 				; get base, if any.
.2b91	98		tya				tya
.2b92	48		pha				pha
.2b93	20 09 1f	jsr $1f09			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2b96	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2b98	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2b9a	20 11 30	jsr $3011			jsr 	MInt32FromString 			; convert it back from a string.
.2b9d	b0 0c		bcs $2bab			bcs 	_VMSuccess 					; successfully converted.
.2b9f	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2ba1	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2ba3	f0 00		beq $2ba5			beq 	_VMFailed 	 				; so we failed.
.2ba5					_VMFailed:
.2ba5	68		pla				pla
.2ba6	a8		tay				tay
.2ba7	28		plp				plp
.2ba8	4c a3 31	jmp $31a3			jmp 	MInt32False 				; return 0 whatever.
.2bab					_VMSuccess:
.2bab	68		pla				pla
.2bac	a8		tay				tay
.2bad	28		plp				plp 								; if CS the it was val() so we want the value.
.2bae	b0 03		bcs $2bb3			bcs 	_VMExit
.2bb0	4c 9f 31	jmp $319f			jmp 	MInt32True 					; otherwise return true as successful.
.2bb3					_VMExit:
.2bb3	60		rts				rts
.2bb4					ConvertGetBase:
.2bb4	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2bb6	95 51		sta $51,x			sta 	esInt0+1,x
.2bb8	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2bba	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2bbc	d0 0e		bne $2bcc			bne 	_CGBDone 					; not found, should be )
.2bbe	e8		inx				inx 								; next level
.2bbf	c8		iny				iny 								; skip comma.
.2bc0	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger		; evaluate the base.
.2bc3	ca		dex				dex
.2bc4	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2bc6	90 08		bcc $2bd0			bcc 	_CGBValue 					; (it should work as high as 37)
.2bc8	c9 11		cmp #$11			cmp 	#17
.2bca	b0 04		bcs $2bd0			bcs 	_CGBValue
.2bcc					_CGBDone:
.2bcc	20 16 32	jsr $3216			jsr 	CheckRightParen
.2bcf	60		rts				rts
.2bd0					_CGBValue:
.2bd0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2bd2	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2bd5					EventFunction:
.2bd5	20 44 2b	jsr $2b44			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2bd8	b5 48		lda $48,x			lda 	esType,x
.2bda	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2bdc	d0 5b		bne $2c39			bne 	_EFType
.2bde	20 23 32	jsr $3223			jsr 	CheckComma
.2be1	e8		inx				inx
.2be2	20 11 2b	jsr $2b11			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2be5	20 16 32	jsr $3216			jsr 	CheckRightParen 			; finish off with the right bracket
.2be8	ca		dex				dex
.2be9	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2beb	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2bed	15 60		ora $60,x			ora 	esInt2,x
.2bef	15 68		ora $68,x			ora 	esInt3,x
.2bf1	d0 41		bne $2c34			bne 	_EFValue
.2bf3	98		tya				tya
.2bf4	48		pha				pha
.2bf5	8a		txa				txa
.2bf6	48		pha				pha
.2bf7	a2 1c		ldx #$1c		ldx	#28
.2bf9	20 bf 14	jsr $14bf		jsr	deviceHandler
.2bfc	84 2d		sty $2d				sty 	temp1+1
.2bfe	85 2c		sta $2c				sta 	temp1
.2c00	68		pla				pla
.2c01	aa		tax				tax
.2c02	20 09 1f	jsr $1f09			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2c05	a0 03		ldy #$03			ldy 	#3							; if -ve
.2c07	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c09	30 23		bmi $2c2e			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2c0b	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2c0d	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c0f	c8		iny				iny
.2c10	11 2a		ora ($2a),y			ora 	(temp0),y
.2c12	f0 17		beq $2c2b			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2c14	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2c16	38		sec				sec
.2c17	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c19	e5 2c		sbc $2c				sbc 	temp1
.2c1b	c8		iny				iny
.2c1c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c1e	e5 2d		sbc $2d				sbc 	temp1+1
.2c20	10 0c		bpl $2c2e			bpl 	_EFFail 					; if trigger >= timer then return False
.2c22	20 3e 2c	jsr $2c3e			jsr 	SetEventTimer 				; reset the timer for next time.
.2c25	20 9f 31	jsr $319f			jsr	 	MInt32True 					; and treutn true as fired.
.2c28	68		pla				pla
.2c29	a8		tay				tay
.2c2a	60		rts				rts
.2c2b					_EFInitialise:
.2c2b	20 3e 2c	jsr $2c3e			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2c2e					_EFFail:
.2c2e	68		pla				pla
.2c2f	a8		tay				tay
.2c30	20 a3 31	jsr $31a3			jsr 	MInt32False
.2c33	60		rts				rts
.2c34					_EFValue:
.2c34	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2c36	20 e0 14	jsr $14e0		jsr	errorHandler
.2c39					_EFType:
.2c39	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c3b	20 e0 14	jsr $14e0		jsr	errorHandler
.2c3e					SetEventTimer:
.2c3e	a0 00		ldy #$00			ldy 	#0
.2c40	18		clc				clc
.2c41	a5 2c		lda $2c				lda 	temp1
.2c43	75 51		adc $51,x			adc 	esInt0+1,x
.2c45	91 2a		sta ($2a),y			sta		(temp0),y
.2c47	c8		iny				iny
.2c48	a5 2d		lda $2d				lda 	temp1+1
.2c4a	75 59		adc $59,x			adc 	esInt1+1,x
.2c4c	91 2a		sta ($2a),y			sta		(temp0),y
.2c4e	88		dey				dey
.2c4f	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2c51	d0 04		bne $2c57			bne 	_SETExit 					; zero means initialise.....
.2c53	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2c55	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2c57					_SETExit:
.2c57	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2c58					UnaryLen:
.2c58	20 66 2c	jsr $2c66			jsr 	ULStart
.2c5b					ULFinish:
.2c5b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2c5d	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2c5f	20 b2 31	jsr $31b2			jsr 	MInt32Set8Bit 				; write it out.
.2c62	20 16 32	jsr $3216			jsr 	CheckRightParen
.2c65	60		rts				rts
.2c66	20 06 2b	jsr $2b06	ULStart:jsr 	EvaluateString
.2c69	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2c6b	85 2a		sta $2a				sta 	temp0
.2c6d	b5 58		lda $58,x			lda 	esInt1,x
.2c6f	85 2b		sta $2b				sta 	temp0+1
.2c71	84 32		sty $32				sty 	tempShort 					; get length
.2c73	a0 00		ldy #$00			ldy 	#0
.2c75	60		rts				rts
.2c76					UnaryAsc:
.2c76	20 66 2c	jsr $2c66			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2c79	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2c7b	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2c7c	c9 00		cmp #$00			cmp 	#0
.2c7e	d0 db		bne $2c5b			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2c80	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2c82	20 e0 14	jsr $14e0		jsr	errorHandler
.2c85					UnaryAbs:
.2c85	20 fb 2a	jsr $2afb			jsr 	EvaluateNumeric 			; some numeric value
.2c88	b0 07		bcs $2c91			bcs 	_UAFloat 					; CS then float, so use that function
.2c8a	20 58 31	jsr $3158			jsr 	MInt32Absolute 				; int version
.2c8d	20 16 32	jsr $3216			jsr 	CheckRightParen
.2c90	60		rts				rts
.2c91					_UAFloat:
.2c91	8a		txa				txa 								; float version
.2c92	a2 00		ldx #$00		ldx	#0
.2c94	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2c97	aa		tax				tax
.2c98	20 16 32	jsr $3216			jsr 	CheckRightParen
.2c9b	60		rts				rts
.2c9c					UnarySgn:
.2c9c	20 fb 2a	jsr $2afb			jsr 	EvaluateNumeric 			; same as above but sign of value
.2c9f	b0 07		bcs $2ca8			bcs 	_USFloat
.2ca1	20 90 31	jsr $3190			jsr 	MInt32Sign
.2ca4	20 16 32	jsr $3216			jsr 	CheckRightParen
.2ca7	60		rts				rts
.2ca8					_USFloat:
.2ca8	8a		txa				txa
.2ca9	a2 0e		ldx #$0e		ldx	#14
.2cab	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2cae	aa		tax				tax
.2caf	20 16 32	jsr $3216			jsr 	CheckRightParen
.2cb2	60		rts				rts
.2cb3					UnaryPeek:
.2cb3	20 df 2c	jsr $2cdf			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2cb6	4c d3 2c	jmp $2cd3			jmp 	PDLByte0
.2cb9					UnaryDeek:
.2cb9	20 df 2c	jsr $2cdf			jsr 	PDLCode
.2cbc	4c cd 2c	jmp $2ccd			jmp 	PDLByte1
.2cbf					UnaryLeek:
.2cbf	20 df 2c	jsr $2cdf			jsr 	PDLCode
.2cc2	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2cc4	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cc6	95 68		sta $68,x			sta 	esInt3,x
.2cc8	88		dey				dey
.2cc9	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ccb	95 60		sta $60,x			sta 	esInt2,x
.2ccd					PDLByte1:
.2ccd	a0 01		ldy #$01			ldy 	#1
.2ccf	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cd1	95 58		sta $58,x			sta 	esInt1,x
.2cd3					PDLByte0:
.2cd3	a0 00		ldy #$00			ldy 	#0
.2cd5	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cd7	95 50		sta $50,x			sta 	esInt0,x
.2cd9	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2cdb	20 16 32	jsr $3216			jsr 	CheckRightParen 			; check right and return
.2cde	60		rts				rts
.2cdf					PDLCode:
.2cdf	20 11 2b	jsr $2b11			jsr 	EvaluateInteger 			; some address
.2ce2	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2ce4	85 2a		sta $2a				sta 	temp0
.2ce6	b5 58		lda $58,x			lda 	esInt1,x
.2ce8	85 2b		sta $2b				sta 	temp0+1
.2cea	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2cec	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2cee	95 60		sta $60,x			sta 	esInt2,x
.2cf0	95 68		sta $68,x			sta 	esInt3,x
.2cf2	84 32		sty $32				sty 	tempShort 					; save Y
.2cf4	60		rts				rts
.2cf5					Unary_Random:
.2cf5	20 d3 31	jsr $31d3			jsr 	MInt32Random 				; generate random number.
.2cf8	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2cfa	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2cfc	f0 08		beq $2d06			beq 	_URExit
.2cfe	e8		inx				inx 								; load range 0..r-1 into +1
.2cff	20 11 2b	jsr $2b11			jsr 	EvaluateInteger
.2d02	ca		dex				dex
.2d03	20 f6 2f	jsr $2ff6			jsr 	MInt32Modulus 				; calculate random % modulus
.2d06					_URExit:
.2d06	20 16 32	jsr $3216			jsr 	CheckRightParen 			; check right and return
.2d09	60		rts				rts
.2d0a					Unary_Min:
.2d0a	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2d0c	d0 02		bne $2d10			bne 	UnaryMBody
.2d0e					Unary_Max:
.2d0e	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2d10					UnaryMBody:
.2d10	48		pha				pha 								; save comparator on stack, shows min or max
.2d11	20 f2 2a	jsr $2af2			jsr 	Evaluate 					; get the first thing to check
.2d14					_UnaryMLoop:
.2d14	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2d16	c8		iny				iny
.2d17	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2d19	f0 09		beq $2d24			beq 	_UnaryMExit
.2d1b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2d1d	f0 07		beq $2d26			beq 	_UnaryMCompare
.2d1f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2d21	20 e0 14	jsr $14e0		jsr	errorHandler
.2d24					_UnaryMExit:
.2d24	68		pla				pla 								; done so throw comparator and return.
.2d25	60		rts				rts
.2d26					_UnaryMCompare:
.2d26	e8		inx				inx 								; get the 2nd thing to evaluate
.2d27	20 f2 2a	jsr $2af2			jsr 	Evaluate
.2d2a	ca		dex				dex
.2d2b	20 b8 28	jsr $28b8			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2d2e	85 32		sta $32				sta 	tempShort 					; save result
.2d30	68		pla				pla 								; get what we need
.2d31	48		pha				pha
.2d32	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2d34	d0 de		bne $2d14			bne 	_UnaryMLoop 				; no, try another value.
.2d36	20 a3 31	jsr $31a3			jsr 	MInt32False 				; promote 2nd to 1st.
.2d39	20 87 30	jsr $3087			jsr 	MInt32Add
.2d3c	4c 14 2d	jmp $2d14			jmp 	_UnaryMLoop
.2d3f					Unary_Page:
.2d3f	20 a3 31	jsr $31a3			jsr 	MInt32False 				; zero
.2d42	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2d45	95 50		sta $50,x			sta 	esInt0,x
.2d47	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d4a	95 58		sta $58,x			sta 	esInt1,x
.2d4c	60		rts				rts
.2d4d					UnaryReference:
.2d4d	a9 0f		lda #$0f			lda 	#15
.2d4f	20 88 29	jsr $2988			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2d52	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2d54	10 05		bpl $2d5b			bpl 	UType
.2d56	a9 00		lda #$00			lda 	#0 							; make it an integer
.2d58	95 48		sta $48,x			sta 	esType,x
.2d5a	60		rts				rts
.2d5b					UType:
.2d5b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d5d	20 e0 14	jsr $14e0		jsr	errorHandler
.2d60					UnaryHexMarker:
.2d60	4c e3 2a	jmp $2ae3			jmp 	EvaluateIntegerTerm
.2d63					UnaryComplement:
.2d63	20 e3 2a	jsr $2ae3			jsr 	EvaluateIntegerTerm
.2d66	20 77 31	jsr $3177			jsr 	MInt32Not
.2d69	60		rts				rts
.2d6a					UnaryIntToFloat:
.2d6a	20 fb 2a	jsr $2afb			jsr 	EvaluateNumeric				; some number
.2d6d	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2d6f	d0 0b		bne $2d7c			bne 	_UIFExit
.2d71	8a		txa				txa 								; convert and set type
.2d72	a2 1a		ldx #$1a		ldx	#26
.2d74	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2d77	aa		tax				tax
.2d78	a9 01		lda #$01			lda 	#1
.2d7a	95 48		sta $48,x			sta 	esType,x
.2d7c					_UIFExit:
.2d7c	60		rts				rts
.2d7d					UnaryFloatToInt:
.2d7d	20 fb 2a	jsr $2afb			jsr 	EvaluateNumeric 			; the number
.2d80	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2d82	f0 0b		beq $2d8f			beq 	_UFIExit
.2d84	8a		txa				txa 								; convert to int
.2d85	a2 12		ldx #$12		ldx	#18
.2d87	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.2d8a	aa		tax				tax
.2d8b	a9 00		lda #$00			lda 	#0 							; set type
.2d8d	95 48		sta $48,x			sta 	esType,x
.2d8f					_UFIExit:
.2d8f	60		rts				rts
.2d90					UnaryAlloc:
.2d90	e8		inx				inx 								; evaluate memory required
.2d91	20 11 2b	jsr $2b11			jsr 	EvaluateInteger
.2d94	20 16 32	jsr $3216			jsr 	CheckRightParen
.2d97	ca		dex				dex
.2d98	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2d9a	15 69		ora $69,x			ora 	esInt3+1,x
.2d9c	d0 1d		bne $2dbb			bne 	_UABadValue
.2d9e	20 a3 31	jsr $31a3			jsr 	MInt32False					; zero return.
.2da1	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2da3	95 58		sta $58,x			sta 	esInt1,x
.2da5	a5 35		lda $35				lda 	lowMemory
.2da7	95 50		sta $50,x			sta 	esInt0,x
.2da9	18		clc				clc 								; add alloc required.
.2daa	75 51		adc $51,x			adc 	esInt0+1,x
.2dac	85 35		sta $35				sta 	lowMemory
.2dae	a5 36		lda $36				lda 	lowMemory+1
.2db0	75 59		adc $59,x			adc 	esInt1+1,x
.2db2	85 36		sta $36				sta 	lowMemory+1
.2db4	b0 05		bcs $2dbb			bcs		_UABadValue 				; overflow definitely bad.
.2db6	c5 34		cmp $34				cmp 	highMemory+1
.2db8	b0 01		bcs $2dbb			bcs 	_UABadValue 				; out of memory bad.
.2dba	60		rts				rts
.2dbb					_UABadValue:
.2dbb	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2dbd	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.2dc0					UnaryTimer:
.2dc0	20 16 32	jsr $3216			jsr 	CheckRightParen 			; no parameters
.2dc3	98		tya				tya
.2dc4	48		pha				pha
.2dc5	20 ca 31	jsr $31ca			jsr 	MInt32Zero 					; zero result
.2dc8	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2dca	a2 1c		ldx #$1c		ldx	#28
.2dcc	20 bf 14	jsr $14bf		jsr	deviceHandler
.2dcf	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2dd1	95 50		sta $50,x			sta 	esInt0,x
.2dd3	98		tya				tya
.2dd4	95 58		sta $58,x			sta 	esInt1,x
.2dd6	68		pla				pla
.2dd7	a8		tay				tay
.2dd8	60		rts				rts
.2dd9					UnaryInkey:
.2dd9	20 16 32	jsr $3216			jsr 	CheckRightParen
.2ddc	86 2a		stx $2a				stx 	temp0
.2dde	a2 0a		ldx #$0a		ldx	#10
.2de0	20 bf 14	jsr $14bf		jsr	deviceHandler
.2de3	a6 2a		ldx $2a				ldx 	temp0
.2de5	20 b2 31	jsr $31b2			jsr 	MInt32Set8Bit
.2de8	60		rts				rts
.2de9					UnaryGet:
.2de9	20 16 32	jsr $3216			jsr 	CheckRightParen
.2dec	86 2a		stx $2a				stx 	temp0
.2dee					_UGLoop:
.2dee	a2 00		ldx #$00		ldx	#0
.2df0	20 bf 14	jsr $14bf		jsr	deviceHandler
.2df3	a2 0a		ldx #$0a		ldx	#10
.2df5	20 bf 14	jsr $14bf		jsr	deviceHandler
.2df8	c9 00		cmp #$00			cmp 	#0
.2dfa	f0 f2		beq $2dee			beq 	_UGLoop
.2dfc	a6 2a		ldx $2a				ldx 	temp0
.2dfe	20 b2 31	jsr $31b2			jsr 	MInt32Set8Bit
.2e01	60		rts				rts
.2e02					UnaryGetString:
.2e02	20 e9 2d	jsr $2de9			jsr 	UnaryGet
.2e05					UGSDoChr:
.2e05	4c 56 2e	jmp $2e56			jmp 	ChrCode
.2e08					UnaryInkeyString:
.2e08	20 d9 2d	jsr $2dd9			jsr 	UnaryInkey
.2e0b	b5 50		lda $50,x			lda 	esInt0,x
.2e0d	d0 f6		bne $2e05			bne 	UGSDoChr
.2e0f	8a		txa				txa
.2e10	a2 06		ldx #$06		ldx	#6
.2e12	20 49 35	jsr $3549		jsr	stringHandler
.2e15	aa		tax				tax
.2e16	60		rts				rts
.2e17					UnarySys:
.2e17	20 11 2b	jsr $2b11			jsr 	EvaluateInteger 				; get the address
.2e1a	20 16 32	jsr $3216			jsr 	CheckRightParen
.2e1d	20 09 1f	jsr $1f09			jsr 	TOSToTemp0 						; copy call address to temp0
.2e20	8a		txa				txa
.2e21	48		pha				pha
.2e22	98		tya				tya
.2e23	48		pha				pha
.2e24	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2e27	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2e2a	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2e2d	20 3c 2e	jsr $2e3c			jsr 	_CallTemp0
.2e30	85 32		sta $32				sta 	tempShort 						; restore YX
.2e32	68		pla				pla
.2e33	a8		tay				tay
.2e34	68		pla				pla
.2e35	aa		tax				tax
.2e36	a5 32		lda $32				lda 	tempShort
.2e38	20 b2 31	jsr $31b2			jsr 	MInt32Set8Bit 					; return result.
.2e3b	60		rts				rts
.2e3c					_CallTemp0:
.2e3c	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2e3f					UnaryMem:
.2e3f	20 a3 31	jsr $31a3			jsr 	MInt32False 					; set to false (e.g. 0)
.2e42	38		sec				sec
.2e43	a5 33		lda $33				lda 	highMemory 						; calculate value
.2e45	e5 35		sbc $35				sbc 	lowMemory
.2e47	95 50		sta $50,x			sta 	esInt0,x
.2e49	a5 34		lda $34				lda 	highMemory+1
.2e4b	e5 36		sbc $36				sbc 	lowMemory+1
.2e4d	95 58		sta $58,x			sta 	esInt1,x
.2e4f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.2e50					ExecChr:
.2e50	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger		; character number 0-255
.2e53	20 16 32	jsr $3216			jsr 	CheckRightParen				; right bracket
.2e56					ChrCode:
.2e56	98		tya				tya
.2e57	48		pha				pha
.2e58	8a		txa				txa 								; A = stack
.2e59	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.2e5b	a2 00		ldx #$00		ldx	#0
.2e5d	20 49 35	jsr $3549		jsr	stringHandler
.2e60	aa		tax				tax 								; X = stack
.2e61	68		pla				pla
.2e62	a8		tay				tay
.2e63	60		rts				rts
.2e64					ExecLower:
.2e64	38		sec				sec 								; set carry is lower
.2e65	b0 01		bcs $2e68			bcs 	ExecUpperLower
.2e67					ExecUpper:
.2e67	18		clc				clc 								; clear carry is upper
.2e68					ExecUpperLower:
.2e68	08		php				php 								; save carry
.2e69	20 06 2b	jsr $2b06			jsr 	EvaluateString 				; string to stack,X
.2e6c	20 16 32	jsr $3216			jsr 	CheckRightParen 			; check closing right bracket.
.2e6f	28		plp				plp 								; restore carry, save Y
.2e70	98		tya				tya
.2e71	48		pha				pha
.2e72	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2e74	2a		rol a				rol 	a
.2e75	a8		tay				tay 								; now in Y
.2e76	8a		txa				txa 								; do the substring and exit.
.2e77	a2 0a		ldx #$0a		ldx	#10
.2e79	20 49 35	jsr $3549		jsr	stringHandler
.2e7c	aa		tax				tax
.2e7d	68		pla				pla
.2e7e	a8		tay				tay
.2e7f	60		rts				rts
.2e80					ExecLeft:
.2e80	20 06 2b	jsr $2b06			jsr 	EvaluateString 				; string to stack,X
.2e83	20 23 32	jsr $3223			jsr 	CheckComma
.2e86	e8		inx				inx
.2e87	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2e89	20 b2 31	jsr $31b2			jsr 	MInt32Set8Bit
.2e8c	e8		inx				inx
.2e8d	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2e90					ExecSubstring:
.2e90	ca		dex				dex 								; fix up X
.2e91	ca		dex				dex
.2e92	20 16 32	jsr $3216			jsr 	CheckRightParen 			; check closing right bracket.
.2e95	8a		txa				txa 								; do the substring and exit.
.2e96	a2 0c		ldx #$0c		ldx	#12
.2e98	20 49 35	jsr $3549		jsr	stringHandler
.2e9b	aa		tax				tax
.2e9c	60		rts				rts
.2e9d					ExecMid:
.2e9d	20 06 2b	jsr $2b06			jsr 	EvaluateString 				; string to stack,X
.2ea0	20 23 32	jsr $3223			jsr 	CheckComma
.2ea3	e8		inx				inx
.2ea4	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2ea7	c9 00		cmp #$00			cmp 	#0
.2ea9	f0 15		beq $2ec0			beq 	_EMValue
.2eab	e8		inx				inx
.2eac	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2eae	20 b2 31	jsr $31b2			jsr 	MInt32Set8Bit
.2eb1	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2eb3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2eb5	f0 d9		beq $2e90			beq 	ExecSubString
.2eb7	20 23 32	jsr $3223			jsr 	CheckComma
.2eba	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2ebd	4c 90 2e	jmp $2e90			jmp 	ExecSubString
.2ec0					_EMValue:
.2ec0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ec2	20 e0 14	jsr $14e0		jsr	errorHandler
.2ec5					ExecRight:
.2ec5	20 06 2b	jsr $2b06			jsr 	EvaluateString 				; string to stack,X
.2ec8	20 23 32	jsr $3223			jsr 	CheckComma
.2ecb	e8		inx				inx
.2ecc	20 19 2b	jsr $2b19			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2ecf	ca		dex				dex
.2ed0	98		tya				tya
.2ed1	48		pha				pha
.2ed2	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2ed4	85 2a		sta $2a				sta 	temp0
.2ed6	b5 58		lda $58,x			lda 	esInt1,x
.2ed8	85 2b		sta $2b				sta 	temp0+1
.2eda	a0 00		ldy #$00			ldy 	#0 							; point to length
.2edc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2ede	18		clc				clc 								; add 1.
.2edf	69 01		adc #$01			adc 	#1
.2ee1	38		sec				sec
.2ee2	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.2ee4	f0 02		beq $2ee8			beq		_ERMake1 					; if zero, make it 1.
.2ee6	b0 02		bcs $2eea			bcs		_EROkay
.2ee8					_ERMake1:
.2ee8	a9 01		lda #$01			lda 	#1 							; start position.
.2eea					_EROkay:
.2eea	e8		inx				inx 								; set start pos.
.2eeb	95 50		sta $50,x			sta 	esInt0,x
.2eed	e8		inx				inx
.2eee	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2ef0	20 b2 31	jsr $31b2			jsr 	MInt32Set8Bit
.2ef3	68		pla				pla
.2ef4	a8		tay				tay
.2ef5	4c 90 2e	jmp $2e90			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2ef8					MInt32And:
.2ef8	b5 50		lda $50,x			lda 	esInt0,x
.2efa	35 51		and $51,x			and 	esInt0+1,x
.2efc	95 50		sta $50,x			sta 	esInt0,x
.2efe	b5 58		lda $58,x			lda 	esInt1,x
.2f00	35 59		and $59,x			and 	esInt1+1,x
.2f02	95 58		sta $58,x			sta 	esInt1,x
.2f04	b5 60		lda $60,x			lda 	esInt2,x
.2f06	35 61		and $61,x			and 	esInt2+1,x
.2f08	95 60		sta $60,x			sta 	esInt2,x
.2f0a	b5 68		lda $68,x			lda 	esInt3,x
.2f0c	35 69		and $69,x			and 	esInt3+1,x
.2f0e	95 68		sta $68,x			sta 	esInt3,x
.2f10	60		rts				rts
.2f11					MInt32Or:
.2f11	b5 50		lda $50,x			lda 	esInt0,x
.2f13	15 51		ora $51,x			ora 	esInt0+1,x
.2f15	95 50		sta $50,x			sta 	esInt0,x
.2f17	b5 58		lda $58,x			lda 	esInt1,x
.2f19	15 59		ora $59,x			ora 	esInt1+1,x
.2f1b	95 58		sta $58,x			sta 	esInt1,x
.2f1d	b5 60		lda $60,x			lda 	esInt2,x
.2f1f	15 61		ora $61,x			ora 	esInt2+1,x
.2f21	95 60		sta $60,x			sta 	esInt2,x
.2f23	b5 68		lda $68,x			lda 	esInt3,x
.2f25	15 69		ora $69,x			ora 	esInt3+1,x
.2f27	95 68		sta $68,x			sta 	esInt3,x
.2f29	60		rts				rts
.2f2a					MInt32Xor:
.2f2a	b5 50		lda $50,x			lda 	esInt0,x
.2f2c	55 51		eor $51,x			eor 	esInt0+1,x
.2f2e	95 50		sta $50,x			sta 	esInt0,x
.2f30	b5 58		lda $58,x			lda 	esInt1,x
.2f32	55 59		eor $59,x			eor 	esInt1+1,x
.2f34	95 58		sta $58,x			sta 	esInt1,x
.2f36	b5 60		lda $60,x			lda 	esInt2,x
.2f38	55 61		eor $61,x			eor 	esInt2+1,x
.2f3a	95 60		sta $60,x			sta 	esInt2,x
.2f3c	b5 68		lda $68,x			lda 	esInt3,x
.2f3e	55 69		eor $69,x			eor 	esInt3+1,x
.2f40	95 68		sta $68,x			sta 	esInt3,x
.2f42	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2f43					MInt32Compare:
.2f43	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.2f45	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2f47	d0 13		bne $2f5c			bne 	MInt32Compare2
.2f49	b5 58		lda $58,x			lda 	esInt1,x
.2f4b	d5 59		cmp $59,x			cmp 	esInt1+1,x
.2f4d	d0 0d		bne $2f5c			bne 	MInt32Compare2
.2f4f	b5 60		lda $60,x			lda 	esInt2,x
.2f51	d5 61		cmp $61,x			cmp 	esInt2+1,x
.2f53	d0 07		bne $2f5c			bne 	MInt32Compare2
.2f55	b5 68		lda $68,x			lda 	esInt3,x
.2f57	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2f59	d0 01		bne $2f5c			bne 	MInt32Compare2
.2f5b	60		rts				rts
.2f5c					MInt32Compare2:
.2f5c	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2f5e	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2f60	b5 58		lda $58,x			lda		esInt1,x
.2f62	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2f64	b5 60		lda $60,x			lda		esInt2,x
.2f66	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2f68	b5 68		lda $68,x			lda		esInt3,x
.2f6a	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2f6c	50 02		bvc $2f70			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2f6e	49 80		eor #$80			eor 	#$80
.2f70					_I32LNoOverflow
.2f70	30 03		bmi $2f75			bmi 	MInt32CLess					; if -ve then return $FF
.2f72	a9 01		lda #$01			lda 	#$01						; else return $01
.2f74	60		rts				rts
.2f75					MInt32CLess:
.2f75	a9 ff		lda #$ff			lda 	#$FF
.2f77	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2f78					MInt32SDivide:
.2f78	98		tya				tya  								; save Y, which is the count of negations
.2f79	48		pha				pha
.2f7a	a0 00		ldy #$00			ldy 	#0 							; zero count
.2f7c	20 94 2f	jsr $2f94			jsr 	_MInt32SRemSign 			; unsign TOS
.2f7f	e8		inx				inx 								; unsign TOS+1
.2f80	20 94 2f	jsr $2f94			jsr 	_MInt32SRemSign
.2f83	ca		dex				dex
.2f84	98		tya				tya 								; save sign count on stack
.2f85	48		pha				pha
.2f86	20 9d 2f	jsr $2f9d			jsr 	MInt32UDivide 				; unsigned division
.2f89	68		pla				pla 								; get sign count back
.2f8a	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2f8c	f0 03		beq $2f91			beq 	_I32SNoNeg
.2f8e	20 5d 31	jsr $315d			jsr 	MInt32Negate
.2f91					_I32SNoNeg:
.2f91	68		pla				pla 								; restoe Y and exit
.2f92	a8		tay				tay
.2f93	60		rts				rts
.2f94					_MInt32SRemSign:
.2f94	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.2f96	10 04		bpl $2f9c			bpl 	_MInt32SRSExit
.2f98	c8		iny				iny 								; increment the sign count
.2f99	20 5d 31	jsr $315d			jsr 	MInt32Negate 				; negate the value.
.2f9c					_MInt32SRSExit:
.2f9c	60		rts				rts
.2f9d					MInt32UDivide:
.2f9d	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.2f9f	15 59		ora $59,x			ora 	esInt1+1,x
.2fa1	15 5a		ora $5a,x			ora 	esInt1+2,x
.2fa3	15 5b		ora $5b,x			ora 	esInt1+3,x
.2fa5	f0 4a		beq $2ff1			beq 	_MInt32DZero
.2fa7	e8		inx				inx 								; clear A
.2fa8	e8		inx				inx
.2fa9	20 a3 31	jsr $31a3			jsr 	MInt32False
.2fac	ca		dex				dex
.2fad	ca		dex				dex
.2fae	98		tya				tya 								; save Y on the stack
.2faf	48		pha				pha
.2fb0	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2fb2					_MInt32UDLoop:
.2fb2	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.2fb4	36 58		rol $58,x			rol 	esInt1,x
.2fb6	36 60		rol $60,x			rol 	esInt2,x
.2fb8	36 68		rol $68,x			rol 	esInt3,x
.2fba	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.2fbc	36 5a		rol $5a,x			rol 	esInt1+2,x
.2fbe	36 62		rol $62,x			rol 	esInt2+2,x
.2fc0	36 6a		rol $6a,x			rol 	esInt3+2,x
.2fc2	38		sec				sec 								; calculate A-M saving result on the stack
.2fc3	b5 52		lda $52,x			lda 	esInt0+2,x
.2fc5	f5 51		sbc $51,x			sbc 	esInt0+1,x
.2fc7	48		pha				pha
.2fc8	b5 5a		lda $5a,x			lda 	esInt1+2,x
.2fca	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2fcc	48		pha				pha
.2fcd	b5 62		lda $62,x			lda 	esInt2+2,x
.2fcf	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2fd1	48		pha				pha
.2fd2	b5 6a		lda $6a,x			lda 	esInt3+2,x
.2fd4	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2fd6	90 10		bcc $2fe8			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2fd8	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.2fda	68		pla				pla
.2fdb	95 62		sta $62,x			sta 	esInt2+2,x
.2fdd	68		pla				pla
.2fde	95 5a		sta $5a,x			sta 	esInt1+2,x
.2fe0	68		pla				pla
.2fe1	95 52		sta $52,x			sta 	esInt0+2,x
.2fe3	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2fe5	4c eb 2f	jmp $2feb			jmp 	_MInt32Next 					; do the next iteration
.2fe8					_MInt32NoSubtract:
.2fe8	68		pla				pla
.2fe9	68		pla				pla
.2fea	68		pla				pla
.2feb					_MInt32Next:
.2feb	88		dey				dey 								; do this 32 times.
.2fec	d0 c4		bne $2fb2			bne 	_MInt32UDLoop
.2fee	68		pla				pla 								; restore Y and exit
.2fef	a8		tay				tay
.2ff0	60		rts				rts
.2ff1					_MInt32DZero:
.2ff1	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2ff3	20 e0 14	jsr $14e0		jsr	errorHandler
.2ff6					MInt32Modulus:
.2ff6	20 9d 2f	jsr $2f9d			jsr 	MInt32UDivide 				; do the division.
.2ff9	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2ffb	95 68		sta $68,x			sta 	esInt3,x
.2ffd	b5 62		lda $62,x			lda 	esInt2+2,x
.2fff	95 60		sta $60,x			sta 	esInt2,x
.3001	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3003	95 58		sta $58,x			sta 	esInt1,x
.3005	b5 52		lda $52,x			lda 	esInt0+2,x
.3007	95 50		sta $50,x			sta 	esInt0,x
.3009	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c18					fs32Length:
>0c18							.fill 	1
.300a					LinkInt32FromString:
.300a	aa		tax				tax
.300b	98		tya				tya
.300c	20 11 30	jsr $3011			jsr 	MInt32FromString
.300f	8a		txa				txa
.3010	60		rts				rts
.3011					MInt32FromString:
.3011	85 32		sta $32				sta 	tempShort 					; save base
.3013	98		tya				tya
.3014	48		pha				pha
.3015	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3017	b1 2a		lda ($2a),y			lda 	(temp0),y
.3019	8d 18 0c	sta $0c18			sta 	fs32Length
.301c	f0 65		beq $3083			beq 	_I32FSFail2					; fail if length zero.
.301e	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3020	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3022	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3024	d0 09		bne $302f			bne 	_I32FSNotNegative
.3026	ad 18 0c	lda $0c18			lda 	fs32Length 					; get length back.
.3029	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.302b	f0 56		beq $3083			beq 	_I32FSFail2
.302d	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.302f					_I32FSNotNegative:
.302f	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3031	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3033	d0 02		bne $3037			bne 	_I32FSNN2
.3035	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3037					_I32FSNN2:
.3037	48		pha				pha 								; save base + final sign on stack.
.3038	20 a3 31	jsr $31a3			jsr 	MInt32False 				; zero the return value.
.303b					_I32FSMainLoop:
.303b	68		pla				pla 								; get the base back into tempShort
.303c	48		pha				pha
.303d	29 7f		and #$7f			and 	#$7F
.303f	85 32		sta $32				sta 	tempShort
.3041	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3043	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3045	90 02		bcc $3049			bcc 	_I32FSNotLC
.3047	e9 20		sbc #$20			sbc 	#32
.3049					_I32FSNotLC:
.3049	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.304a	e9 30		sbc #$30			sbc 	#"0"
.304c	90 34		bcc $3082			bcc 	_I32FSFail 					; nothing more to do.
.304e	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3050	90 06		bcc $3058			bcc 	_I32FSValidate
.3052	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3054	90 2c		bcc $3082			bcc 	_I32FSFail
.3056	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3058					_I32FSValidate:
.3058	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.305a	b0 26		bcs $3082			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.305c	48		pha				pha 								; save the new digit value.
.305d	e8		inx				inx 								; put base into next slot up on stack
.305e	a5 32		lda $32				lda 	tempShort
.3060	20 b2 31	jsr $31b2			jsr 	MInt32Set8Bit
.3063	ca		dex				dex
.3064	20 bb 30	jsr $30bb			jsr 	MInt32Multiply 				; multiply current by the base
.3067	e8		inx				inx
.3068	68		pla				pla  								; put additive into next slot
.3069	20 b2 31	jsr $31b2			jsr 	MInt32Set8Bit
.306c	ca		dex				dex
.306d	20 87 30	jsr $3087			jsr 	MInt32Add 					; and add it
.3070	c8		iny				iny 								; bump the character pointer
.3071	cc 18 0c	cpy $0c18			cpy 	fs32Length 					; until > length.
.3074	f0 c5		beq $303b			beq 	_I32FSMainLoop
.3076	90 c3		bcc $303b			bcc 	_I32FSMainLoop
.3078					_I32FSDone:
.3078	68		pla				pla 								; get base/final sign back
.3079	10 03		bpl $307e			bpl 	_I32FSNN3
.307b	20 5d 31	jsr $315d			jsr 	MInt32Negate 				; negate the result.
.307e					_I32FSNN3:
.307e	68		pla				pla
.307f	a8		tay				tay
.3080	38		sec				sec
.3081	60		rts				rts
.3082					_I32FSFail:
.3082	68		pla				pla
.3083					_I32FSFail2:
.3083	68		pla				pla
.3084	a8		tay				tay
.3085	18		clc				clc
.3086	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3087					MInt32Add:
.3087	18		clc				clc
.3088	b5 50		lda $50,x			lda 	esInt0,x
.308a	75 51		adc $51,x			adc 	esInt0+1,x
.308c	95 50		sta $50,x			sta 	esInt0,x
.308e	b5 58		lda $58,x			lda 	esInt1,x
.3090	75 59		adc $59,x			adc 	esInt1+1,x
.3092	95 58		sta $58,x			sta 	esInt1,x
.3094	b5 60		lda $60,x			lda 	esInt2,x
.3096	75 61		adc $61,x			adc 	esInt2+1,x
.3098	95 60		sta $60,x			sta 	esInt2,x
.309a	b5 68		lda $68,x			lda 	esInt3,x
.309c	75 69		adc $69,x			adc 	esInt3+1,x
.309e	95 68		sta $68,x			sta 	esInt3,x
.30a0	60		rts				rts
.30a1					MInt32Sub:
.30a1	38		sec				sec
.30a2	b5 50		lda $50,x			lda 	esInt0,x
.30a4	f5 51		sbc $51,x			sbc 	esInt0+1,x
.30a6	95 50		sta $50,x			sta 	esInt0,x
.30a8	b5 58		lda $58,x			lda 	esInt1,x
.30aa	f5 59		sbc $59,x			sbc 	esInt1+1,x
.30ac	95 58		sta $58,x			sta 	esInt1,x
.30ae	b5 60		lda $60,x			lda 	esInt2,x
.30b0	f5 61		sbc $61,x			sbc 	esInt2+1,x
.30b2	95 60		sta $60,x			sta 	esInt2,x
.30b4	b5 68		lda $68,x			lda 	esInt3,x
.30b6	f5 69		sbc $69,x			sbc 	esInt3+1,x
.30b8	95 68		sta $68,x			sta 	esInt3,x
.30ba	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.30bb					MInt32Multiply:
.30bb	e8		inx				inx 								; copy 2nd -> 3rd
.30bc	20 e1 30	jsr $30e1			jsr 	MInt32CopyUp
.30bf	ca		dex				dex
.30c0	20 e1 30	jsr $30e1			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.30c3	20 a3 31	jsr $31a3			jsr 	MInt32False 				; zero 1st.
.30c6					_I32Loop:
.30c6	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.30c8	29 01		and #$01			and 	#1
.30ca	f0 03		beq $30cf			beq 	_I32NoAdd 					; if set
.30cc	20 87 30	jsr $3087			jsr 	MInt32Add 					; add 2nd to 1st.
.30cf					_I32NoAdd:
.30cf	e8		inx				inx 								; shift 2nd left
.30d0	20 b8 31	jsr $31b8			jsr 	MInt32ShiftLeft
.30d3	e8		inx				inx  								; shift 3rd right
.30d4	20 c1 31	jsr $31c1			jsr 	MInt32ShiftRight
.30d7	20 ca 31	jsr $31ca			jsr 	MInt32Zero 					; check if zero.
.30da	08		php				php 								; save status bits
.30db	ca		dex				dex 	 							; point back to 1st
.30dc	ca		dex				dex
.30dd	28		plp				plp 								; get status bits
.30de	d0 e6		bne $30c6			bne 	_I32Loop 					; if non-zero keep going.
.30e0	60		rts				rts
.30e1					MInt32CopyUp:
.30e1	b5 50		lda $50,x			lda 	esInt0,x
.30e3	95 51		sta $51,x			sta 	esInt0+1,x
.30e5	b5 58		lda $58,x			lda 	esInt1,x
.30e7	95 59		sta $59,x			sta 	esInt1+1,x
.30e9	b5 60		lda $60,x			lda 	esInt2,x
.30eb	95 61		sta $61,x			sta 	esInt2+1,x
.30ed	b5 68		lda $68,x			lda 	esInt3,x
.30ef	95 69		sta $69,x			sta 	esInt3+1,x
.30f1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c19					MCharCount:	.fill 	1						; count of converted characters
.30f2					MLInt32ToString:
.30f2	aa		tax				tax									; module passes stack in A, base in Y
.30f3	98		tya				tya
.30f4	20 f9 30	jsr $30f9			jsr 	MInt32ToString
.30f7	8a		txa				txa
.30f8	60		rts				rts
.30f9					MInt32ToString:
.30f9	48		pha				pha 								; save base
.30fa	85 32		sta $32				sta 	tempShort 					; save target base.
.30fc	a9 00		lda #$00			lda 	#0
.30fe	8d 19 0c	sta $0c19			sta 	MCharCount 					; clear character count to 0
.3101	98		tya				tya
.3102	48		pha				pha
.3103	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3105	10 10		bpl $3117			bpl 	_I32TSUnsigned
.3107	48		pha				pha 								; save base on stack.
.3108	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.310a	10 08		bpl $3114			bpl 	_I32TSNoFlip
.310c	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.310e	20 4a 31	jsr $314a			jsr 	MI32WriteCharacter
.3111	20 5d 31	jsr $315d			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3114					_I32TSNoFlip:
.3114	68		pla				pla 								; get the base back
.3115	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3117					_I32TSUnsigned:
.3117	20 25 31	jsr $3125			jsr 	MI32DivideWrite 			; recursive code to output string.
.311a	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.311c	ad 19 0c	lda $0c19			lda 	MCharCount
.311f	91 2a		sta ($2a),y			sta 	(temp0),y
.3121	68		pla				pla
.3122	a8		tay				tay
.3123	68		pla				pla
.3124	60		rts				rts
.3125					MI32DivideWrite:
.3125	48		pha				pha 								; save the divisor/base
.3126	e8		inx				inx 								; write in the dividing position.
.3127	20 b2 31	jsr $31b2			jsr 	MInt32Set8Bit
.312a	ca		dex				dex
.312b	20 9d 2f	jsr $2f9d			jsr 	MInt32UDivide 				; divide number by base.
.312e	68		pla				pla 								; get the base into Y
.312f	a8		tay				tay
.3130	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3132	48		pha				pha
.3133	20 ca 31	jsr $31ca			jsr 	MInt32Zero 					; is the result zero ?
.3136	f0 04		beq $313c			beq 	_I32NoRecurse 				; if so, don't recurse.
.3138	98		tya				tya 								; put base into A
.3139	20 25 31	jsr $3125			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.313c					_I32NoRecurse:
.313c	68		pla				pla 								; get the remainder back
.313d	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.313f	90 02		bcc $3143			bcc 	_I32NotHex
.3141	69 06		adc #$06			adc 	#7-1
.3143					_I32NotHex:
.3143	18		clc				clc 								; make it ASCII
.3144	69 30		adc #$30			adc 	#48
.3146	20 4a 31	jsr $314a			jsr 	MI32WriteCharacter 			; write the character out
.3149	60		rts				rts 								; and exit.
.314a					MI32WriteCharacter:
.314a	ee 19 0c	inc $0c19			inc 	MCharCount 					; bump count (space for leading count)
.314d	ac 19 0c	ldy $0c19			ldy 	MCharCount 					; get position
.3150	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3152	c8		iny				iny
.3153	a9 00		lda #$00			lda 	#0
.3155	91 2a		sta ($2a),y			sta 	(temp0),y
.3157	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c1a					MSeed32:	.fill 	4							; random number seed.
.3158					MInt32Absolute:
.3158	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.315a	30 01		bmi $315d			bmi 	MInt32Negate
.315c	60		rts				rts
.315d					MInt32Negate:
.315d	38		sec				sec 								; subtract from zero.
.315e	a9 00		lda #$00			lda 	#0
.3160	f5 50		sbc $50,x			sbc 	esInt0,x
.3162	95 50		sta $50,x			sta 	esInt0,x
.3164	a9 00		lda #$00			lda 	#0
.3166	f5 58		sbc $58,x			sbc 	esInt1,x
.3168	95 58		sta $58,x			sta 	esInt1,x
.316a	a9 00		lda #$00			lda 	#0
.316c	f5 60		sbc $60,x			sbc 	esInt2,x
.316e	95 60		sta $60,x			sta 	esInt2,x
.3170	a9 00		lda #$00			lda 	#0
.3172	f5 68		sbc $68,x			sbc 	esInt3,x
.3174	95 68		sta $68,x			sta 	esInt3,x
.3176	60		rts				rts
.3177					MInt32Not:
.3177	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.3179	49 ff		eor #$ff			eor 	#$FF
.317b	95 50		sta $50,x			sta 	esInt0,x
.317d	b5 58		lda $58,x			lda 	esInt1,x
.317f	49 ff		eor #$ff			eor 	#$FF
.3181	95 58		sta $58,x			sta 	esInt1,x
.3183	b5 60		lda $60,x			lda 	esInt2,x
.3185	49 ff		eor #$ff			eor 	#$FF
.3187	95 60		sta $60,x			sta 	esInt2,x
.3189	b5 68		lda $68,x			lda 	esInt3,x
.318b	49 ff		eor #$ff			eor 	#$FF
.318d	95 68		sta $68,x			sta 	esInt3,x
.318f	60		rts				rts
.3190					MInt32Sign:
.3190	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.3192	30 0b		bmi $319f			bmi 	MInt32True 					; if set return -1 (true)
.3194	20 ca 31	jsr $31ca			jsr 	MInt32Zero 					; is it zero ?
.3197	f0 0a		beq $31a3			beq 	MInt32False 				; if zero return 0 (false)
.3199	20 a3 31	jsr $31a3			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.319c	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.319e	60		rts				rts
.319f					MInt32True:
.319f	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.31a1	d0 02		bne $31a5			bne 	MInt32WriteAll
.31a3					MInt32False:
.31a3	a9 00		lda #$00			lda 	#0
.31a5					MInt32WriteAll:
.31a5	95 50		sta $50,x			sta 	esInt0,x
.31a7					MInt32Write123:
.31a7	95 58		sta $58,x			sta 	esInt1,x
.31a9	95 60		sta $60,x			sta 	esInt2,x
.31ab	95 68		sta $68,x			sta 	esInt3,x
.31ad	a9 00		lda #$00			lda 	#$00						; and make it an integer
.31af	95 48		sta $48,x			sta 	esType,x
.31b1	60		rts				rts
.31b2					MInt32Set8Bit:
.31b2	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.31b4	a9 00		lda #$00			lda 	#0 							; a value 0-255
.31b6	f0 ef		beq $31a7			beq		MInt32Write123
.31b8					MInt32ShiftLeft:
.31b8	16 50		asl $50,x			asl 	esInt0,x
.31ba	36 58		rol $58,x			rol	 	esInt1,x
.31bc	36 60		rol $60,x			rol	 	esInt2,x
.31be	36 68		rol $68,x			rol	 	esInt3,x
.31c0	60		rts				rts
.31c1					MInt32ShiftRight:
.31c1	56 68		lsr $68,x			lsr 	esInt3,x
.31c3	76 60		ror $60,x			ror 	esInt2,x
.31c5	76 58		ror $58,x			ror 	esInt1,x
.31c7	76 50		ror $50,x			ror 	esInt0,x
.31c9	60		rts				rts
.31ca					MInt32Zero:
.31ca	b5 50		lda $50,x			lda 	esInt0,x
.31cc	15 58		ora $58,x			ora 	esInt1,x
.31ce	15 60		ora $60,x			ora 	esInt2,x
.31d0	15 68		ora $68,x			ora 	esInt3,x
.31d2	60		rts				rts
.31d3					MInt32Random:
.31d3	98		tya				tya
.31d4	48		pha				pha
.31d5	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.31d7	ad 1a 0c	lda $0c1a			lda 	MSeed32+0 					; check the seed isn't zero
.31da	d0 03		bne $31df			bne 	_Random1
.31dc	a8		tay				tay 								; if so do it 256 times
.31dd	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.31df					_Random1:
.31df	0a		asl a				asl 	a
.31e0	2e 1b 0c	rol $0c1b			rol 	MSeed32+1
.31e3	2e 1c 0c	rol $0c1c			rol 	MSeed32+2
.31e6	2e 1d 0c	rol $0c1d			rol 	MSeed32+3
.31e9	90 02		bcc $31ed			bcc 	_Random2
.31eb	49 c5		eor #$c5			eor 	#$C5
.31ed					_Random2:
.31ed	88		dey				dey
.31ee	d0 ef		bne $31df			bne 	_Random1
.31f0	8d 1a 0c	sta $0c1a			sta 	MSeed32+0 					; copy the seed in.
.31f3	95 50		sta $50,x			sta 	esInt0,x
.31f5	ad 1b 0c	lda $0c1b			lda 	MSeed32+1
.31f8	95 58		sta $58,x			sta 	esInt1,x
.31fa	ad 1c 0c	lda $0c1c			lda 	MSeed32+2
.31fd	95 60		sta $60,x			sta 	esInt2,x
.31ff	ad 1d 0c	lda $0c1d			lda 	MSeed32+3
.3202	95 68		sta $68,x			sta 	esInt3,x
.3204	68		pla				pla
.3205	a8		tay				tay
.3206	a9 00		lda #$00			lda 	#0
.3208	95 48		sta $48,x			sta 	esType,x
.320a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.320b					CheckToken:
.320b	d1 28		cmp ($28),y			cmp 	(codePtr),y
.320d	d0 02		bne $3211			bne 	_CTError
.320f	c8		iny				iny
.3210	60		rts				rts
.3211					_CTError:
.3211	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3213	20 e0 14	jsr $14e0		jsr	errorHandler
.3216					CheckRightParen:
.3216	b1 28		lda ($28),y			lda 	(codePtr),y
.3218	c8		iny				iny
.3219	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.321b	d0 01		bne $321e			bne 	_CRPError
.321d	60		rts				rts
.321e					_CRPError:
.321e	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3220	20 e0 14	jsr $14e0		jsr	errorHandler
.3223					CheckComma:
.3223	b1 28		lda ($28),y			lda 	(codePtr),y
.3225	c8		iny				iny
.3226	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3228	d0 01		bne $322b			bne 	_CCError
.322a	60		rts				rts
.322b					_CCError:
.322b	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.322d	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3230					RSReset:
.3230	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3232	85 37		sta $37				sta 	rsPointer
.3234	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3236	85 38		sta $38				sta 	1+(rsPointer)
.3238	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.323a	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.323d	60		rts				rts
.323e					RSClaim:
.323e	84 32		sty $32				sty 	tempShort 					; preserve Y
.3240	48		pha				pha 								; save marker on stack.
.3241	8a		txa				txa 								; get bytes required.
.3242	38		sec				sec
.3243	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3245	65 37		adc $37				adc 	rsPointer
.3247	85 37		sta $37				sta 	rsPointer
.3249	a5 38		lda $38				lda 	rsPointer+1
.324b	69 ff		adc #$ff			adc 	#$FF
.324d	85 38		sta $38				sta 	rsPointer+1
.324f	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3251	90 08		bcc $325b			bcc 	_RSCOverflow
.3253	68		pla				pla 								; get marker back
.3254	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3256	91 37		sta ($37),y			sta 	(rsPointer),y
.3258	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.325a	60		rts				rts
.325b					_RSCOverflow:
.325b	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.325d	20 e0 14	jsr $14e0		jsr	errorHandler
.3260					RSFree:
.3260	18		clc				clc
.3261	65 37		adc $37				adc 	rsPointer
.3263	85 37		sta $37				sta 	rsPointer
.3265	90 02		bcc $3269			bcc 	_RSFExit
.3267	e6 38		inc $38				inc 	rsPointer+1
.3269					_RSFExit:
.3269	60		rts				rts
.326a					RSSavePosition:
.326a	84 32		sty $32				sty 	tempShort 					; save Y position
.326c	a8		tay				tay 								; this is where we write it.
.326d	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.326f	91 37		sta ($37),y			sta 	(rsPointer),y
.3271	c8		iny				iny
.3272	a5 29		lda $29				lda 	codePtr+1
.3274	91 37		sta ($37),y			sta 	(rsPointer),y
.3276	c8		iny				iny
.3277	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3279	91 37		sta ($37),y			sta 	(rsPointer),y
.327b	a8		tay				tay 								; fix Y back again to original value
.327c	60		rts				rts
.327d					RSLoadPosition:
.327d	a8		tay				tay
.327e	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3280	85 28		sta $28				sta 	codePtr
.3282	c8		iny				iny
.3283	b1 37		lda ($37),y			lda 	(rsPointer),y
.3285	85 29		sta $29				sta 	codePtr+1
.3287	c8		iny				iny
.3288	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.328a	a8		tay				tay 								; to Y
.328b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.328c					WarmStart:
.328c	a2 02		ldx #$02		ldx	#2
.328e	20 06 1c	jsr $1c06		jsr	interactionHandler

;******  Return to file: main/main.asm

.3291					mainHandler:
.3291	7c 94 32	jmp ($3294,x)			jmp 	(mainVectors,x)
.3294					mainVectors:
>3294	23 32					.word CheckComma           ; index 0
>3296	16 32					.word CheckRightParen      ; index 2
>3298	0b 24					.word XCommandClear        ; index 4
>329a	2c 2b					.word LinkEvaluate         ; index 6
>329c	38 2b					.word LinkEvaluateInteger  ; index 8
>329e	3e 2b					.word LinkEvaluateSmallInt ; index 10
>32a0	32 2b					.word LinkEvaluateTerm     ; index 12
>32a2	f2 30					.word MLInt32ToString      ; index 14
>32a4	9a 25					.word Command_XNew         ; index 16
>32a6	a8 25					.word XCommand_Run         ; index 18
>32a8	b4 25					.word Command_RunFrom      ; index 20
>32aa	0a 30					.word LinkInt32FromString  ; index 22

;******  Return to file: basic.asm

.32ac					section_end_main:
.32ac					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.32ac					StringChrs:
.32ac	aa		tax				tax 								; set up stack
.32ad	a9 02		lda #$02			lda 	#2
.32af	20 6f 33	jsr $336f			jsr 	AllocateSoftString
.32b2	98		tya				tya
.32b3	20 95 33	jsr $3395			jsr 	WriteSoftString
.32b6					StringUpdate:
.32b6	20 c4 32	jsr $32c4			jsr 	ReturnSoftString
.32b9	8a		txa				txa
.32ba	60		rts				rts
.32bb					StringNull:
.32bb	aa		tax				tax
.32bc	a9 01		lda #$01			lda 	#1
.32be	20 6f 33	jsr $336f			jsr 	AllocateSoftString
.32c1	4c b6 32	jmp $32b6			jmp 	StringUpdate
.32c4					ReturnSoftString:
.32c4	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.32c6	95 50		sta $50,x			sta 	esInt0,x
.32c8	a5 3a		lda $3a				lda 	softMemAlloc+1
.32ca	95 58		sta $58,x			sta 	esInt1,x
.32cc	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.32ce	95 60		sta $60,x			sta 	esInt2,x
.32d0	95 68		sta $68,x			sta 	esInt3,x
.32d2	a9 40		lda #$40			lda 	#$40 						; type string.
.32d4	95 48		sta $48,x			sta 	esType,x
.32d6	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.32d7					STRCompare:
.32d7	48		pha				pha 								; save A
.32d8	aa		tax				tax 								; put stack pos in X
.32d9	98		tya				tya
.32da	48		pha				pha
.32db	20 0f 33	jsr $330f			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.32de	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.32e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.32e2	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.32e4	90 02		bcc $32e8			bcc 	_SCNotSmaller
.32e6	b1 2c		lda ($2c),y			lda 	(temp1),y
.32e8					_SCNotSmaller:
.32e8	aa		tax				tax 								; put that in X. We compare this many chars first.
.32e9					_SCCompareLoop:
.32e9	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.32eb	f0 0c		beq $32f9			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.32ed	ca		dex				dex 								; decrement chars to compare.
.32ee	c8		iny				iny 								; move to next character
.32ef	38		sec				sec 								; calculate s1[y]-s2[y]
.32f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.32f2	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.32f4	d0 0a		bne $3300			bne 	_SCReturnResult 			; if different return sign of A
.32f6	4c e9 32	jmp $32e9			jmp 	_SCCompareLoop
.32f9					_SCSameToEndShortest
.32f9	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.32fb	38		sec				sec
.32fc	b1 2a		lda ($2a),y			lda 	(temp0),y
.32fe	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3300					_SCReturnResult:
.3300	08		php				php 								; set return to zero preserving PSW.
.3301	a2 00		ldx #$00			ldx 	#0
.3303	28		plp				plp
.3304	f0 05		beq $330b			beq 	_SCExit 					; two values equal, then exit
.3306	ca		dex				dex 								; X = $FF
.3307	90 02		bcc $330b			bcc 	_SCExit 					; if 1st < 2nd then -1
.3309	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.330b					_SCExit:
.330b	68		pla				pla
.330c	a8		tay				tay
.330d	68		pla				pla
.330e	60		rts				rts
.330f					CopyStringPair:
.330f	b5 51		lda $51,x			lda 	esInt0+1,x
.3311	85 2c		sta $2c				sta 	temp1
.3313	b5 59		lda $59,x			lda 	esInt1+1,x
.3315	85 2d		sta $2d				sta 	temp1+1
.3317					CopyStringTop:
.3317	b5 50		lda $50,x			lda 	esInt0,x
.3319	85 2a		sta $2a				sta 	temp0
.331b	b5 58		lda $58,x			lda 	esInt1,x
.331d	85 2b		sta $2b				sta 	temp0+1
.331f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3320					StringConcat:
.3320	aa		tax				tax									; stack pos in X
.3321	98		tya				tya
.3322	48		pha				pha
.3323	20 0f 33	jsr $330f			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3326	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3327	a0 00		ldy #$00			ldy 	#0
.3329	b1 2a		lda ($2a),y			lda 	(temp0),y
.332b	71 2c		adc ($2c),y			adc 	(temp1),y
.332d	b0 1c		bcs $334b			bcs 	_SCError 					; just too many characters here.
.332f	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3331	b0 18		bcs $334b			bcs 	_SCError
.3333	20 6f 33	jsr $336f			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3336	20 66 33	jsr $3366			jsr 	CopySoftToStack 			; copy that to the stack.
.3339	20 50 33	jsr $3350			jsr 	SCCopyTemp0 				; copy temp0
.333c	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.333e	85 2a		sta $2a				sta 	temp0
.3340	a5 2d		lda $2d				lda 	temp1+1
.3342	85 2b		sta $2b				sta 	temp0+1
.3344	20 50 33	jsr $3350			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3347	68		pla				pla
.3348	a8		tay				tay
.3349	8a		txa				txa 								; and A
.334a	60		rts				rts
.334b					_SCError:
.334b	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.334d	20 e0 14	jsr $14e0		jsr	errorHandler
.3350					SCCopyTemp0:
.3350	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3352	b1 2a		lda ($2a),y			lda 	(temp0),y
.3354	85 2e		sta $2e				sta 	temp2
.3356					_SCCopyLoop:
.3356	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3358	f0 0b		beq $3365			beq 	_SCCopyExit
.335a	c6 2e		dec $2e				dec 	temp2
.335c	c8		iny				iny 								; get next char
.335d	b1 2a		lda ($2a),y			lda 	(temp0),y
.335f	20 95 33	jsr $3395			jsr 	WriteSoftString 			; write to soft string.
.3362	4c 56 33	jmp $3356			jmp 	_SCCopyLoop
.3365					_SCCopyExit:
.3365	60		rts				rts
.3366					CopySoftToStack:
.3366	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3368	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.336a	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.336c	95 58		sta $58,x			sta 	esInt1,x
.336e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.336f					AllocateSoftString:
.336f	85 32		sta $32				sta 	tempShort 					; save count
.3371	98		tya				tya
.3372	48		pha				pha
.3373	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3375	d0 09		bne $3380			bne 	_ASSDone
.3377	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3379	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.337b	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.337d	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.337e	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3380					_ASSDone:
.3380	38		sec				sec 								; allocate downwards enough memory
.3381	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3383	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3385	85 39		sta $39				sta 	softMemAlloc
.3387	a5 3a		lda $3a				lda 	softMemAlloc+1
.3389	e9 00		sbc #$00			sbc 	#0
.338b	85 3a		sta $3a				sta 	softMemAlloc+1
.338d	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.338f	a8		tay				tay
.3390	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3392	68		pla				pla
.3393	a8		tay				tay
.3394	60		rts				rts
.3395					WriteSoftString:
.3395	84 32		sty $32				sty 	tempShort 					; save Y
.3397	48		pha				pha 								; save character on stack
.3398	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.339a	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.339c	18		clc				clc
.339d	69 01		adc #$01			adc 	#1
.339f	91 39		sta ($39),y			sta 	(softMemAlloc),y
.33a1	a8		tay				tay 								; offset in Y
.33a2	68		pla				pla 								; get char and write.
.33a3	91 39		sta ($39),y			sta 	(softMemAlloc),y
.33a5	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.33a7	60		rts				rts
.33a8					StrClone:
.33a8	aa		tax				tax 								; set up stack.
.33a9	98		tya				tya
.33aa	48		pha				pha
.33ab	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.33ad	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.33af	18		clc				clc
.33b0	69 01		adc #$01			adc 	#1
.33b2	20 6f 33	jsr $336f			jsr 	AllocateSoftString 			; allocate soft memory
.33b5	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.33b7	95 50		sta $50,x			sta 	esInt0,x
.33b9	a5 3a		lda $3a				lda 	softMemAlloc+1
.33bb	95 58		sta $58,x			sta 	esInt1,x
.33bd	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.33bf	95 60		sta $60,x			sta 	esInt2,x
.33c1	95 68		sta $68,x			sta 	esInt3,x
.33c3	a9 40		lda #$40			lda 	#$40 						; set type to string.
.33c5	95 48		sta $48,x			sta 	esType,x
.33c7	20 50 33	jsr $3350			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.33ca	68		pla				pla
.33cb	a8		tay				tay
.33cc	8a		txa				txa
.33cd	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.33ce					CaseString:
.33ce	48		pha				pha 								; save A and copy to X
.33cf	aa		tax				tax
.33d0	98		tya				tya
.33d1	48		pha				pha
.33d2	20 17 33	jsr $3317			jsr 	CopyStringTop 				; target string -> temp0
.33d5	a0 00		ldy #$00			ldy 	#0
.33d7	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.33d9	18		clc				clc
.33da	69 01		adc #$01			adc 	#1 							; one more for length byte
.33dc	20 6f 33	jsr $336f			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.33df	20 66 33	jsr $3366			jsr 	CopySoftToStack 			; copy that to the stack.
.33e2	a0 00		ldy #$00			ldy 	#0
.33e4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.33e6	aa		tax				tax
.33e7					_CSCopy:
.33e7	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.33e9	f0 24		beq $340f			beq 	_CSExit
.33eb	ca		dex				dex
.33ec	c8		iny				iny
.33ed	68		pla				pla 								; check direction
.33ee	48		pha				pha
.33ef	f0 0c		beq $33fd			beq 	_CSUpper
.33f1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.33f3	c9 41		cmp #$41			cmp 	#"A"
.33f5	90 12		bcc $3409			bcc 	_CSWrite
.33f7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.33f9	b0 0e		bcs $3409			bcs 	_CSWrite
.33fb	90 0a		bcc $3407			bcc 	_CSFlipWrite
.33fd					_CSUpper:
.33fd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.33ff	c9 61		cmp #$61			cmp 	#"a"
.3401	90 06		bcc $3409			bcc 	_CSWrite
.3403	c9 7b		cmp #$7b			cmp 	#"z"+1
.3405	b0 02		bcs $3409			bcs 	_CSWrite
.3407					_CSFlipWrite:
.3407	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3409					_CSWrite:
.3409	20 95 33	jsr $3395			jsr 	WriteSoftString 			; add to soft string.
.340c	4c e7 33	jmp $33e7			jmp 	_CSCopy
.340f					_CSExit:
.340f	68		pla				pla
.3410	a8		tay				tay
.3411	68		pla				pla
.3412	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3413					StringSubstring:
.3413	48		pha				pha
.3414	aa		tax				tax 								; access stack.
.3415	98		tya				tya
.3416	48		pha				pha
.3417	20 17 33	jsr $3317			jsr 	CopyStringTop 				; point temp0 to the string.
.341a	a0 00		ldy #$00			ldy 	#0 							; get length.
.341c	b1 2a		lda ($2a),y			lda 	(temp0),Y
.341e	85 2c		sta $2c				sta 	temp1
.3420	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.3422	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3424	f0 02		beq $3428			beq 	_SSBOkay
.3426	b0 2a		bcs $3452			bcs 	_SSBReturnNull
.3428					_SSBOkay:
.3428	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.342a	18		clc				clc
.342b	69 01		adc #$01			adc 	#1
.342d	38		sec				sec
.342e	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3430	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.3432	90 02		bcc $3436			bcc		_SSBTrunc
.3434	b5 52		lda $52,x			lda 	esInt0+2,x
.3436					_SSBTrunc:
.3436	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3438	18		clc				clc
.3439	69 01		adc #$01			adc 	#1 							; add 1
.343b	20 6f 33	jsr $336f			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.343e	20 66 33	jsr $3366			jsr 	CopySoftToStack 			; copy that to the stack.
.3441	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3443					_SSBCopyLoop:
.3443	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3445	f0 0e		beq $3455			beq 	_SSBExit
.3447	c6 2d		dec $2d				dec 	temp1+1
.3449	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.344b	20 95 33	jsr $3395			jsr 	WriteSoftString
.344e	c8		iny				iny
.344f	4c 43 34	jmp $3443			jmp 	_SSBCopyLoop
.3452					_SSBReturnNull:
.3452	20 59 34	jsr $3459			jsr 	ReturnNull
.3455					_SSBExit:
.3455	68		pla				pla
.3456	a8		tay				tay
.3457	68		pla				pla
.3458	60		rts				rts
.3459					ReturnNull:
.3459	a9 00		lda #$00			lda 	#0 							; clear null string
.345b	8d ce 0a	sta $0ace			sta 	NullString
.345e	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3460	95 50		sta $50,x			sta 	esInt0,x
.3462	a9 0a		lda #$0a			lda 	#NullString >> 8
.3464	95 58		sta $58,x			sta 	esInt1,x
.3466	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0c1e					srcStrLen:
>0c1e							.fill 	1
.3467					StringWrite:
.3467	aa		tax				tax
.3468	48		pha				pha
.3469	98		tya				tya
.346a	48		pha				pha
.346b	20 92 34	jsr $3492			jsr 	CheckOverwriteCurrent
.346e	b0 0d		bcs $347d			bcs		_SWCopyCurrent
.3470	20 d0 34	jsr $34d0			jsr 	RequiresConcretion
.3473	90 0e		bcc $3483			bcc 	_SWWriteReference
.3475	20 33 35	jsr $3533			jsr 	CheckSpecialConcretion
.3478	b0 09		bcs $3483			bcs 	_SWWriteReference
.347a	20 e4 34	jsr $34e4			jsr 	AllocateHardMemory
.347d					_SWCopyCurrent:
.347d	20 17 35	jsr $3517			jsr 	CopyStringToHardMemory
.3480	4c 8e 34	jmp $348e			jmp 	_SWExit
.3483					_SWWriteReference
.3483	a0 00		ldy #$00			ldy 	#0
.3485	a5 2a		lda $2a				lda 	temp0
.3487	91 2c		sta ($2c),y			sta 	(temp1),y
.3489	c8		iny				iny
.348a	a5 2b		lda $2b				lda 	temp0+1
.348c	91 2c		sta ($2c),y			sta 	(temp1),y
.348e					_SWExit:
.348e	68		pla				pla
.348f	a8		tay				tay
.3490	68		pla				pla
.3491	60		rts				rts
.3492					CheckOverwriteCurrent:
.3492	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3494	b5 59		lda $59,x			lda 	esInt1+1,x
.3496	85 2b		sta $2b				sta 	temp0+1
.3498	b5 51		lda $51,x			lda 	esInt0+1,x
.349a	85 2a		sta $2a				sta 	temp0
.349c	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.349e	8d 1e 0c	sta $0c1e			sta 	srcStrLen
.34a1	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.34a3	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.34a5	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.34a7	85 2d		sta $2d				sta 	temp1+1
.34a9	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.34ab	b1 2c		lda ($2c),y			lda 	(temp1),y
.34ad	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.34af	90 1b		bcc $34cc			bcc 	_COCFail 				; in hard memory.
.34b1	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.34b3	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.34b5	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.34b7	85 2e		sta $2e				sta 	temp2
.34b9	c8		iny				iny
.34ba	b1 2c		lda ($2c),y			lda 	(temp1),y
.34bc	e9 00		sbc #$00			sbc 	#0
.34be	85 2f		sta $2f				sta 	temp2+1
.34c0	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.34c2	b1 2e		lda ($2e),y			lda 	(temp2),y
.34c4	38		sec				sec  							; maximum character capacity.
.34c5	e9 02		sbc #$02			sbc 	#2
.34c7	cd 1e 0c	cmp $0c1e			cmp 	srcStrLen 				; if >= the required length
.34ca	b0 02		bcs $34ce			bcs 	_COCCanReuse
.34cc					_COCFail:
.34cc	18		clc				clc
.34cd	60		rts				rts
.34ce					_COCCanReuse:
.34ce	38		sec				sec
.34cf	60		rts				rts
.34d0					RequiresConcretion:
.34d0	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.34d2	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.34d4	b0 0a		bcs $34e0			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.34d6	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.34d8	f0 08		beq $34e2			beq 	_RCFail 				; if not, this cannot be soft memory.
.34da	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.34dc	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.34de	90 02		bcc $34e2			bcc 	_RCFail 				; so concreting
.34e0					_RCSucceed:
.34e0	38		sec				sec
.34e1	60		rts				rts
.34e2					_RCFail:
.34e2	18		clc				clc
.34e3	60		rts				rts
.34e4					AllocateHardMemory:
.34e4	98		tya				tya
.34e5	48		pha				pha
.34e6	ad 1e 0c	lda $0c1e			lda 	srcStrLen 				; characters in string
.34e9	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.34eb	b0 04		bcs $34f1			bcs 	_AHMSetMax 				; max out that amount.
.34ed	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.34ef	90 02		bcc $34f3			bcc 	_AHMIsOkay
.34f1					_AHMSetMax:
.34f1	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.34f3					_AHMIsOkay:
.34f3	48		pha				pha	 							; save size to be allocated
.34f4	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.34f6	38		sec				sec  							; and copy result to TOS as target address.
.34f7	65 33		adc $33				adc 	highMemory
.34f9	85 33		sta $33				sta 	highMemory
.34fb	a5 34		lda $34				lda 	highMemory+1
.34fd	69 ff		adc #$ff			adc 	#$FF
.34ff	85 34		sta $34				sta 	highMemory+1
.3501	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3503	68		pla				pla 							; get the total size of the storage block
.3504	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3506	18		clc				clc
.3507	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3509	69 01		adc #$01			adc 	#1
.350b	91 2c		sta ($2c),y			sta 	(temp1),y
.350d	a5 34		lda $34				lda 	highMemory+1
.350f	69 00		adc #$00			adc 	#0
.3511	c8		iny				iny
.3512	91 2c		sta ($2c),y			sta 	(temp1),y
.3514	68		pla				pla
.3515	a8		tay				tay
.3516	60		rts				rts
.3517					CopyStringToHardMemory:
.3517	98		tya				tya
.3518	48		pha				pha
.3519	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.351b	b1 2c		lda ($2c),y			lda 	(temp1),y
.351d	85 2e		sta $2e				sta 	temp2
.351f	c8		iny				iny
.3520	b1 2c		lda ($2c),y			lda 	(temp1),y
.3522	85 2f		sta $2f				sta 	temp2+1
.3524	ac 1e 0c	ldy $0c1e			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3527					_CSTHMLoop:
.3527	b1 2a		lda ($2a),y			lda 	(temp0),y
.3529	91 2e		sta ($2e),y			sta 	(temp2),y
.352b	88		dey				dey
.352c	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.352e	d0 f7		bne $3527			bne 	_CSTHMLoop
.3530	68		pla				pla
.3531	a8		tay				tay
.3532	60		rts				rts
.3533					CheckSpecialConcretion:
.3533	ad 1e 0c	lda $0c1e			lda 	srcStrLen 				; check string is null e.g. length = 0
.3536	f0 02		beq $353a			beq 	_CSCNullString
.3538	18		clc				clc
.3539	60		rts				rts
.353a					_CSCNullString:
.353a	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.353c	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.353f	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3541	85 2a		sta $2a				sta 	temp0
.3543	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3545	85 2b		sta $2b				sta 	1+(temp0)
.3547	38		sec				sec
.3548	60		rts				rts

;******  Return to file: string/string.asm

.3549					stringHandler:
.3549	7c 4c 35	jmp ($354c,x)			jmp 	(stringVectors,x)
.354c					stringVectors:
>354c	ac 32					.word StringChrs           ; index 0
>354e	a8 33					.word StrClone             ; index 2
>3550	20 33					.word StringConcat         ; index 4
>3552	bb 32					.word StringNull           ; index 6
>3554	d7 32					.word STRCompare           ; index 8
>3556	ce 33					.word CaseString           ; index 10
>3558	13 34					.word StringSubstring      ; index 12
>355a	67 34					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.355c					section_end_string:
.355c					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1f					deTokeniseVector:
>0c1f							.fill 	2
.0c21					lastCharacterClass:
>0c21							.fill 	1
.0c22					indent:
>0c22							.fill 	1
.355c					ListLine:
.355c	48		pha				pha								; enter here to list to console. sets the output vector
.355d	a9 91		lda #$91			lda 	#(deTokenPrint) & $FF
.355f	8d 1f 0c	sta $0c1f			sta 	deTokeniseVector
.3562	a9 36		lda #$36			lda 	#(deTokenPrint) >> 8
.3564	8d 20 0c	sta $0c20			sta 	1+(deTokeniseVector)
.3567	68		pla				pla
.3568					Detokenise:
.3568	18		clc				clc 							; space required for line number.
.3569	69 06		adc #$06			adc 	#6
.356b	8d 22 0c	sta $0c22			sta 	indent
.356e	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3570	8d 21 0c	sta $0c21			sta 	lastCharacterClass
.3573	a2 02		ldx #$02			ldx 	#2
.3575	20 a3 31	jsr $31a3			jsr 	MInt32False
.3578	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.357a	b1 28		lda ($28),y			lda 	(codePtr),y
.357c	95 50		sta $50,x			sta 	esInt0,x
.357e	c8		iny				iny
.357f	b1 28		lda ($28),y			lda 	(codePtr),y
.3581	95 58		sta $58,x			sta 	esInt1,x
.3583	a9 84		lda #$84			lda 	#LTYLineNumber
.3585	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.3588	a9 0a		lda #$0a			lda 	#10 					; base 10
.358a	20 30 36	jsr $3630			jsr 	DTPrintInteger 			; print as integer.
.358d	a0 00		ldy #$00			ldy 	#0 						; get length
.358f	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3591	aa		tax				tax
.3592					_DTPadOut:
.3592	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3594	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.3597	e8		inx				inx
.3598	ec 22 0c	cpx $0c22			cpx 	indent
.359b	d0 f5		bne $3592			bne 	_DTPadOut
.359d	a0 03		ldy #$03			ldy 	#3 						; start position.
.359f					_DTListLoop
.359f	b1 28		lda ($28),y			lda 	(codePtr),y
.35a1	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.35a3	f0 5e		beq $3603			beq 	_DTIsString
.35a5	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.35a7	f0 56		beq $35ff			beq 	_DTIsFloat
.35a9	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.35ab	f0 16		beq $35c3			beq 	_DTHexConstant
.35ad	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.35af	d0 06		bne $35b7			bne 	_DTNotEnd
.35b1	a9 ff		lda #$ff			lda 	#255 					; print CR
.35b3	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.35b6	60		rts				rts
.35b7					_DTNotEnd:
.35b7	c9 00		cmp #$00			cmp 	#0
.35b9	30 38		bmi $35f3			bmi 	_DTIsToken
.35bb	c9 40		cmp #$40			cmp 	#$40
.35bd	90 3a		bcc $35f9			bcc 	_DTIsIdentifier
.35bf	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.35c1	d0 0d		bne $35d0			bne 	_DTConstant
.35c3					_DTHexConstant:
.35c3	a9 26		lda #$26			lda 	#"&"
.35c5	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.35c8	c8		iny				iny
.35c9	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.35cb	20 ad 36	jsr $36ad			jsr 	DTSwitchMode
.35ce	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.35d0					_DTConstant:
.35d0	48		pha				pha
.35d1	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.35d3	20 ad 36	jsr $36ad			jsr 	DTSwitchMode
.35d6	a9 86		lda #$86			lda 	#LTYConstant
.35d8	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.35db	a2 02		ldx #$02			ldx 	#2 						; get its value
.35dd	8a		txa				txa
.35de	a2 0c		ldx #$0c		ldx	#12
.35e0	20 91 32	jsr $3291		jsr	mainHandler
.35e3	aa		tax				tax
.35e4	68		pla				pla 							; get base back
.35e5	85 32		sta $32				sta 	tempShort
.35e7	98		tya				tya
.35e8	48		pha				pha
.35e9	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.35eb	20 30 36	jsr $3630			jsr 	DTPrintInteger
.35ee	68		pla				pla
.35ef	a8		tay				tay
.35f0	4c 9f 35	jmp $359f			jmp 	_DTListLoop
.35f3					_DTIsToken:
.35f3	20 06 37	jsr $3706			jsr 	DTDecodeToken
.35f6	4c 9f 35	jmp $359f			jmp 	_DTListLoop
.35f9					_DTIsIdentifier:
.35f9	20 bf 36	jsr $36bf			jsr 	DTIdentifier
.35fc	4c 9f 35	jmp $359f			jmp 	_DTListLoop
.35ff					_DTIsFloat:
>35ff	db						.byte 	$DB
.3600	4c ff 35	jmp $35ff			jmp 	_DTIsFloat
.3603					_DTIsString:
.3603	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3605	20 ad 36	jsr $36ad			jsr 	DTSwitchMode
.3608	a9 81		lda #$81			lda 	#LTYString
.360a	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.360d	a9 22		lda #$22			lda 	#'"'						; open quote
.360f	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.3612	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3614	8a		txa				txa
.3615	a2 0c		ldx #$0c		ldx	#12
.3617	20 91 32	jsr $3291		jsr	mainHandler
.361a	aa		tax				tax
.361b	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.361d	85 2a		sta $2a				sta 	temp0
.361f	b5 58		lda $58,x			lda 	esInt1,x
.3621	85 2b		sta $2b				sta 	temp0+1
.3623	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3625	20 42 36	jsr $3642			jsr 	DTPrintLengthPrefix
.3628	a9 22		lda #$22			lda 	#'"'
.362a	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.362d	4c 9f 35	jmp $359f			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c23					tPrintCount:
>0c23							.fill 	1
.3630					DTPrintInteger:
.3630	48		pha				pha									; save base
.3631	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3633	85 2a		sta $2a				sta 	temp0
.3635	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3637	85 2b		sta $2b				sta 	1+(temp0)
.3639	68		pla				pla
.363a	a8		tay				tay
.363b	8a		txa				txa
.363c	a2 0e		ldx #$0e		ldx	#14
.363e	20 91 32	jsr $3291		jsr	mainHandler
.3641	aa		tax				tax 								; then drop through here.
.3642					DTPrintLengthPrefix:
.3642	aa		tax				tax 								; A = 0 = don't case convert.
.3643	98		tya				tya
.3644	48		pha				pha
.3645	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3647	b1 2a		lda ($2a),y			lda 	(temp0),y
.3649	8d 23 0c	sta $0c23			sta 	tPrintCount
.364c	f0 1b		beq $3669			beq 	_DTPLPExit 					; empty string
.364e					_DTPLPLoop:
.364e	c8		iny				iny 								; get next.
.364f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3651	29 7f		and #$7f			and 	#$7F
.3653	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3655	f0 0a		beq $3661			beq 	_DTPLPNoCase
.3657	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3659	90 06		bcc $3661			bcc 	_DTPLPNoCase
.365b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.365d	b0 02		bcs $3661			bcs 	_DTPLPNoCase
.365f	49 20		eor #$20			eor 	#"A"^"a"
.3661					_DTPLPNoCase
.3661	20 6c 36	jsr $366c			jsr 	ListOutputCharacter 		; call handler
.3664	ce 23 0c	dec $0c23			dec 	tPrintCount 				; do all the characters
.3667	d0 e5		bne $364e			bne 	_DTPLPLoop
.3669					_DTPLPExit:
.3669	68		pla				pla
.366a	a8		tay				tay
.366b	60		rts				rts
.366c					ListOutputCharacter:
.366c	85 32		sta $32				sta 	tempShort
.366e	48		pha				pha
.366f	8a		txa				txa
.3670	48		pha				pha
.3671	98		tya				tya
.3672	48		pha				pha
.3673	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3675	c9 20		cmp #$20			cmp 	#32
.3677	b0 0c		bcs $3685			bcs		_LOCHiBit
.3679	09 40		ora #$40			ora 	#64 						; conversion
.367b	c9 40		cmp #$40			cmp 	#64							; make l/c
.367d	f0 06		beq $3685			beq 	_LOCHiBit
.367f	c9 5b		cmp #$5b			cmp 	#65+26
.3681	b0 02		bcs $3685			bcs 	_LOCHiBit
.3683	69 20		adc #$20			adc 	#32
.3685					_LOCHiBit:
.3685	20 8e 36	jsr $368e			jsr 	_LOCCallVector				; call o/p handler routine
.3688	68		pla				pla
.3689	a8		tay				tay
.368a	68		pla				pla
.368b	aa		tax				tax
.368c	68		pla				pla
.368d					_LOCExit:
.368d	60		rts				rts
.368e					_LOCCallVector:
.368e	6c 1f 0c	jmp ($0c1f)			jmp 	(deTokeniseVector)
.3691					deTokenPrint:
.3691	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3693	30 06		bmi $369b			bmi 	_dtpInk
.3695	a2 16		ldx #$16		ldx	#22
.3697	20 bf 14	jsr $14bf		jsr	deviceHandler
.369a	60		rts				rts
.369b	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.369d	f0 08		beq $36a7			beq 	_dtpCR						; except $FF => CRLF
.369f	29 07		and #$07			and 	#7
.36a1	a2 08		ldx #$08		ldx	#8
.36a3	20 bf 14	jsr $14bf		jsr	deviceHandler
.36a6	60		rts				rts
.36a7					_dtpCR:
.36a7	a2 04		ldx #$04		ldx	#4
.36a9	20 bf 14	jsr $14bf		jsr	deviceHandler
.36ac	60		rts				rts
.36ad					DTSwitchMode:
.36ad	cd 21 0c	cmp $0c21			cmp 	LastCharacterClass 			; if changed, update character class
.36b0	f0 04		beq $36b6			beq 	_DTSMNoChange
.36b2	8d 21 0c	sta $0c21			sta 	LastCharacterClass
.36b5					_DTSMExit:
.36b5	60		rts				rts
.36b6					_DTSMNoChange:
.36b6	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.36b8	f0 fb		beq $36b5			beq 	_DTSMExit 					; need a space.
.36ba	a9 20		lda #$20			lda 	#" "
.36bc	4c 6c 36	jmp $366c			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.36bf					DTIdentifier:
.36bf	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.36c1	20 ad 36	jsr $36ad			jsr 	DTSwitchMode
.36c4	a9 87		lda #$87			lda 	#LTYIdentifier
.36c6	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.36c9					_DTILoop:
.36c9	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.36cb	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.36cd	d0 02		bne $36d1			bne 	_DTINotUS
.36cf	a9 5f		lda #$5f			lda 	#"_"
.36d1					_DTINotUS:
.36d1	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.36d4	c8		iny				iny
.36d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.36d7	c9 3a		cmp #$3a			cmp 	#$3A
.36d9	90 ee		bcc $36c9			bcc 	_DTILoop
.36db	c8		iny				iny
.36dc	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.36de	f0 25		beq $3705			beq 	_DTIExit 					; no postfix.
.36e0	48		pha				pha
.36e1	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.36e3	8d 21 0c	sta $0c21			sta 	LastCharacterClass
.36e6	a9 82		lda #$82			lda 	#LTYPunctuation
.36e8	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.36eb	68		pla				pla
.36ec	c9 3b		cmp #$3b			cmp 	#$3B
.36ee	f0 10		beq $3700			beq 	_DTIArray
.36f0	4a		lsr a				lsr 	a 							; array flag in C
.36f1	08		php				php
.36f2	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.36f4	f0 02		beq $36f8			beq 	_DTIDollar
.36f6	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.36f8					_DTIDollar:
.36f8	49 24		eor #$24			eor 	#"$"
.36fa	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.36fd	28		plp				plp
.36fe	90 05		bcc $3705			bcc 	_DTIExit
.3700					_DTIArray:
.3700	a9 28		lda #$28			lda 	#"("
.3702	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.3705					_DTIExit:
.3705	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3706					DTDecodeToken:
.3706	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3708	b1 28		lda ($28),y			lda 	(codePtr),y
.370a	c9 84		cmp #$84			cmp 	#$84
.370c	b0 05		bcs $3713			bcs 	_DTNotShift
.370e	29 03		and #$03			and 	#3 							; get the shift 1..3
.3710	0a		asl a				asl 	a 							; put 2 x in X
.3711	aa		tax				tax
.3712	c8		iny				iny
.3713					_DTNotShift:
.3713	bd 15 3a	lda $3a15,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3716	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3718	bd 16 3a	lda $3a16,x			lda 	TokenTableAddress+1,x
.371b	85 2b		sta $2b				sta 	temp0+1
.371d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.371f	c8		iny				iny 								; consume it.
.3720	aa		tax				tax
.3721	98		tya				tya
.3722	48		pha				pha
.3723					_DTFindText:
.3723	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3725	f0 11		beq $3738			beq 	_DTFoundText
.3727	ca		dex				dex
.3728	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.372a	38		sec				sec
.372b	b1 2a		lda ($2a),y			lda 	(temp0),y
.372d	65 2a		adc $2a				adc 	temp0
.372f	85 2a		sta $2a				sta 	temp0
.3731	90 f0		bcc $3723			bcc 	_DTFindText
.3733	e6 2b		inc $2b				inc 	temp0+1
.3735	4c 23 37	jmp $3723			jmp 	_DTFindText
.3738					_DTFoundText:
.3738	a0 01		ldy #$01			ldy 	#1 							; get first character
.373a	b1 2a		lda ($2a),y			lda 	(temp0),y
.373c	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.373e	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3740	90 11		bcc $3753			bcc 	_DTIsPunctuation
.3742	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3744	b0 0d		bcs $3753			bcs 	_DTIsPunctuation
.3746	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3748	20 ad 36	jsr $36ad			jsr 	DTSwitchMode
.374b	a9 83		lda #$83			lda 	#LTYKeyword
.374d	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.3750	4c 5d 37	jmp $375d			jmp 	_DTPrint
.3753					_DTIsPunctuation:
.3753	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3755	20 ad 36	jsr $36ad			jsr 	DTSwitchMode
.3758	a9 82		lda #$82			lda 	#LTYPunctuation
.375a	20 6c 36	jsr $366c			jsr 	ListOutputCharacter
.375d					_DTPrint:
.375d	a9 01		lda #$01			lda 	#1 							; fix case.
.375f	20 42 36	jsr $3642			jsr 	DTPrintLengthPrefix 		; print it out.
.3762	a0 00		ldy #$00			ldy 	#0
.3764	b1 2a		lda ($2a),y			lda 	(temp0),y
.3766	a8		tay				tay
.3767	b1 2a		lda ($2a),y			lda 	(temp0),y
.3769	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.376b	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.376d	90 04		bcc $3773			bcc 	_DTIsNowPunctuation
.376f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3771	90 05		bcc $3778			bcc 	_DTPExit
.3773					_DTIsNowPunctuation:
.3773	a9 01		lda #$01			lda 	#1
.3775	8d 21 0c	sta $0c21			sta		LastCharacterClass
.3778					_DTPExit:
.3778	68		pla				pla
.3779	a8		tay				tay
.377a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c24					currentSet:
>0c24							.fill 	1
.377b					TokenSearch:
.377b	8a		txa				txa
.377c	48		pha				pha
.377d	98		tya				tya
.377e	48		pha				pha
.377f	a9 00		lda #$00			lda 	#0
.3781	8d 24 0c	sta $0c24			sta 	currentSet
.3784					_TSLoop:
.3784	ad 24 0c	lda $0c24			lda 	currentSet 					; 2 x currentset in X
.3787	0a		asl a				asl 	a
.3788	aa		tax				tax
.3789	bd 15 3a	lda $3a15,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.378c	85 2a		sta $2a				sta 	temp0
.378e	bd 16 3a	lda $3a16,x			lda 	TokenTableAddress+1,x
.3791	85 2b		sta $2b				sta 	temp0+1
.3793	20 ba 37	jsr $37ba			jsr 	TokenSearchOne 				; search one table
.3796	b0 0d		bcs $37a5			bcs 	_TSFound 					; found a token.
.3798	ee 24 0c	inc $0c24			inc 	currentSet 					; next set
.379b	ad 24 0c	lda $0c24			lda 	currentSet
.379e	c9 04		cmp #$04			cmp 	#4
.37a0	d0 e2		bne $3784			bne 	_TSLoop 					; back if not done all four.
.37a2	18		clc				clc 								; clear carry and exit
.37a3	90 10		bcc $37b5			bcc 	_TSExit
.37a5					_TSFound:
.37a5	48		pha				pha 								; save token
.37a6	ad 24 0c	lda $0c24			lda 	currentSet					; if set zero no shift
.37a9	f0 05		beq $37b0			beq 	_TSNoShift
.37ab	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.37ad	20 6b 38	jsr $386b			jsr 	TokenWrite
.37b0					_TSNoShift:
.37b0	68		pla				pla 								; get token back
.37b1	20 6b 38	jsr $386b			jsr 	TokenWrite 					; write it
.37b4	38		sec				sec 								; carry set indicating success
.37b5					_TSExit:
.37b5	68		pla				pla
.37b6	a8		tay				tay
.37b7	68		pla				pla
.37b8	aa		tax				tax
.37b9	60		rts				rts
.37ba					TokenSearchOne:
.37ba	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.37bc					_TSOLoop:
.37bc	a0 00		ldy #$00			ldy 	#0
.37be	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.37c0	f0 26		beq $37e8			beq 	_TSOFail 					; if zero, end of table
.37c2	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.37c5	f0 11		beq $37d8			beq 	_TSOCheckText
.37c7					_TSONext:
.37c7	e8		inx				inx 								; bump token
.37c8	a0 00		ldy #$00			ldy 	#0							; get length
.37ca	b1 2a		lda ($2a),y			lda 	(temp0),y
.37cc	38		sec				sec
.37cd	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.37cf	85 2a		sta $2a				sta 	temp0
.37d1	90 e9		bcc $37bc			bcc 	_TSOLoop
.37d3	e6 2b		inc $2b				inc 	temp0+1
.37d5	4c bc 37	jmp $37bc			jmp 	_TSOLoop
.37d8					_TSOCheckText:
.37d8	a8		tay				tay 								; compare length downto 1.
.37d9					_TSOCheckLoop:
.37d9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.37db	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.37de	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.37e0	d0 e5		bne $37c7			bne 	_TSONext 					; different goto next.
.37e2	88		dey				dey 								; do all
.37e3	d0 f4		bne $37d9			bne 	_TSOCheckLoop
.37e5	8a		txa				txa 								; return token in A and carry set
.37e6	38		sec				sec
.37e7	60		rts				rts
.37e8					_TSOFail:
.37e8	18		clc				clc
.37e9	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.37ea					TokTest:
.37ea	a2 ff		ldx #$ff				ldx 	#$FF
.37ec	9a		txs					txs
.37ed	a9 0a		lda #$0a			lda 	#(TokenText1) & $FF
.37ef	85 28		sta $28				sta 	codePtr
.37f1	a9 38		lda #$38			lda 	#(TokenText1) >> 8
.37f3	85 29		sta $29				sta 	1+(codePtr)
.37f5	20 0a 38	jsr $380a				jsr 	Tokenise
.37f8	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.37fa	bd 0a 38	lda $380a,x	_TokCheck:	lda 	TokenBytes1,x
.37fd	dd 28 0c	cmp $0c28,x				cmp 	tokenBuffer,x
.3800	d0 fe		bne $3800	_TokFail:	bne 	_TokFail	 		; error.
.3802	e8		inx					inx
.3803	c9 80		cmp #$80				cmp 	#$80
.3805	d0 f3		bne $37fa				bne 	_TokCheck
.3807	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.380a					TokenText1:
.380a					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c25					tokenHeader:
>0c25							.fill 	3
.0c28					tokenBuffer:
>0c28							.fill 	256
.0d28					tokenBufferIndex:
>0d28							.fill 	1
.380a					Tokenise:
.380a	20 84 38	jsr $3884			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.380d					TokeniseASCIIZ:
.380d	20 95 38	jsr $3895			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3810	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3812	8d 28 0d	sta $0d28			sta 	tokenBufferIndex
.3815	a8		tay				tay 								; start pointer
.3816	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3818	8d 28 0c	sta $0c28			sta 	tokenBuffer
.381b					_TokLoop:
.381b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.381d	f0 46		beq $3865			beq 	_TokExit 					; if zero, then exit.
.381f	c8		iny				iny 								; skip over spaces.
.3820	c9 20		cmp #$20			cmp 	#" "
.3822	f0 f7		beq $381b			beq 	_TokLoop
.3824	88		dey				dey 								; point back to character.
.3825	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3827	f0 18		beq $3841			beq 	_TokHexConst
.3829	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.382b	f0 23		beq $3850			beq 	_TokQString
.382d	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.382f	b0 26		bcs $3857			bcs 	_TokPunctuation
.3831	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3833	b0 29		bcs $385e			bcs 	_TokIdentifier
.3835	c9 3a		cmp #$3a			cmp 	#"9"+1
.3837	b0 1e		bcs $3857			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3839	c9 30		cmp #$30			cmp 	#"0"
.383b	90 1a		bcc $3857			bcc 	_TokPunctuation 			; < 0, punctuation.
.383d	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.383f	d0 08		bne $3849			bne 	_TokConst
.3841					_TokHexConst:
.3841	c8		iny				iny									; consume token.
.3842	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3844	20 6b 38	jsr $386b			jsr 	TokenWrite
.3847	a9 10		lda #$10			lda 	#16
.3849					_TokConst:
.3849	20 53 39	jsr $3953			jsr 	TokeniseInteger
.384c	b0 cd		bcs $381b			bcs 	_TokLoop
.384e	90 18		bcc $3868			bcc 	_TokFail
.3850					_TokQString:
.3850	20 e9 39	jsr $39e9			jsr 	TokeniseString
.3853	b0 c6		bcs $381b			bcs 	_TokLoop
.3855	90 11		bcc $3868			bcc 	_TokFail
.3857					_TokPunctuation:
.3857	20 c8 39	jsr $39c8			jsr 	TokenisePunctuation
.385a	b0 bf		bcs $381b			bcs 	_TokLoop
.385c	90 0a		bcc $3868			bcc 	_TokFail
.385e					_TokIdentifier:
.385e	20 c4 38	jsr $38c4			jsr 	TokeniseIdentifier
.3861	b0 b8		bcs $381b			bcs 	_TokLoop
.3863	90 03		bcc $3868			bcc 	_TokFail
.3865					_TokExit:
.3865	a9 01		lda #$01			lda 	#1
.3867	60		rts				rts
.3868					_TokFail:
.3868	a9 00		lda #$00			lda 	#0
.386a	60		rts				rts
.386b					TokenWrite:
.386b	85 32		sta $32				sta 	tempShort 					; save XA
.386d	48		pha				pha
.386e	8a		txa				txa
.386f	48		pha				pha
.3870	a5 32		lda $32				lda 	tempShort
.3872	ae 28 0d	ldx $0d28			ldx 	tokenBufferIndex 			; geet index
.3875	9d 28 0c	sta $0c28,x			sta 	tokenBuffer,x 				; write byte to buffer
.3878	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.387a	9d 29 0c	sta $0c29,x			sta 	tokenBuffer+1,x
.387d	ee 28 0d	inc $0d28			inc 	tokenBufferIndex 			; bump index
.3880	68		pla				pla
.3881	aa		tax				tax
.3882	68		pla				pla
.3883	60		rts				rts
.3884					TokeniseMakeASCIIZ:
.3884	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3886	b1 28		lda ($28),y			lda 	(codePtr),y
.3888	a8		tay				tay
.3889	c8		iny				iny 								; +1, the NULL goes here.
.388a	a9 00		lda #$00			lda 	#0
.388c	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.388e	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3890	d0 02		bne $3894			bne 	_TMKAExit
.3892	e6 29		inc $29				inc 	codePtr+1
.3894					_TMKAExit:
.3894	60		rts				rts
.3895					TokeniseFixCase:
.3895	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3897	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3899					_TFCFlipQ:
.3899	8a		txa				txa
.389a	49 01		eor #$01			eor 	#1
.389c	aa		tax				tax
.389d					_TFCLoop:
.389d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.389f	f0 22		beq $38c3			beq 	_TFCExit 					; if zero exit.
.38a1	c9 20		cmp #$20			cmp 	#32 						; if control
.38a3	90 1a		bcc $38bf			bcc 	_TFCControl
.38a5	c8		iny				iny 								; preconsume
.38a6	c9 22		cmp #$22			cmp 	#'"'
.38a8	f0 ef		beq $3899			beq 	_TFCFlipQ
.38aa	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.38ac	90 ef		bcc $389d			bcc 	_TFCLoop
.38ae	c9 7b		cmp #$7b			cmp 	#"z"+1
.38b0	b0 eb		bcs $389d			bcs 	_TFCLoop
.38b2	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.38b4	d0 e7		bne $389d			bne 	_TFCLoop
.38b6	88		dey				dey
.38b7	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.38b9					_TFCWrite:
.38b9	91 28		sta ($28),y			sta 	(codePtr),y
.38bb	c8		iny				iny
.38bc	4c 9d 38	jmp $389d			jmp 	_TFCLoop
.38bf					_TFCControl:
.38bf	a9 20		lda #$20			lda 	#" "
.38c1	d0 f6		bne $38b9			bne 	_TFCWrite
.38c3					_TFCExit:
.38c3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.38c4					TokeniseIdentifier:
.38c4	a2 00		ldx #$00			ldx 	#0
.38c6					_TICopyID:
.38c6	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.38c8	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.38ca	f0 16		beq $38e2			beq 	_TICopyUnderscore
.38cc	c9 2e		cmp #$2e			cmp 	#"."
.38ce	f0 14		beq $38e4			beq 	_TICopyIn
.38d0	c9 30		cmp #$30			cmp 	#"0"
.38d2	90 1b		bcc $38ef			bcc 	_TIEndCopy
.38d4	c9 3a		cmp #$3a			cmp 	#"9"+1
.38d6	90 0c		bcc $38e4			bcc 	_TICopyIn
.38d8	c9 41		cmp #$41			cmp 	#"A"
.38da	90 13		bcc $38ef			bcc 	_TIEndCopy
.38dc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.38de	b0 0f		bcs $38ef			bcs		_TIEndCopy
.38e0	90 02		bcc $38e4			bcc 	_TICopyIn
.38e2					_TICopyUnderScore:
.38e2	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.38e4					_TICopyIn:
.38e4	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.38e5	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.38e8	8e cf 0a	stx $0acf			stx 	convertBuffer
.38eb	c8		iny				iny 								; next character
.38ec	4c c6 38	jmp $38c6			jmp 	_TICopyID 					; loop round
.38ef					_TIEndCopy:
.38ef	a9 24		lda #$24			lda 	#"$"
.38f1	20 46 39	jsr $3946			jsr 	TIDCheckCopy
.38f4	a9 23		lda #$23			lda 	#"#"
.38f6	20 46 39	jsr $3946			jsr 	TIDCheckCopy
.38f9	a9 28		lda #$28			lda 	#"("
.38fb	20 46 39	jsr $3946			jsr 	TIDCheckCopy
.38fe	20 7b 37	jsr $377b			jsr 	TokenSearch 				; is it a token
.3901	b0 41		bcs $3944			bcs 	_TIExit 					; if so, then exit.
.3903	98		tya				tya
.3904	48		pha				pha
.3905	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3907	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.390a	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.390d	c9 28		cmp #$28			cmp 	#"("
.390f	d0 02		bne $3913			bne 	_TINotArray
.3911	ca		dex				dex 								; yes, remove it and convert to array.
.3912	c8		iny				iny
.3913					_TINotArray:
.3913	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3916	c9 24		cmp #$24			cmp 	#"$"
.3918	d0 03		bne $391d			bne 	_TINotString
.391a	ca		dex				dex
.391b	c8		iny				iny
.391c	c8		iny				iny
.391d					_TINotString:
.391d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3920	c9 23		cmp #$23			cmp 	#"#"
.3922	d0 05		bne $3929			bne 	_TINotFloat
.3924	ca		dex				dex
.3925	c8		iny				iny
.3926	c8		iny				iny
.3927	c8		iny				iny
.3928	c8		iny				iny
.3929					_TINotFloat:
.3929	e8		inx				inx 								; write end marker for identifier.
.392a	98		tya				tya
.392b	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.392e	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3931	a2 01		ldx #$01			ldx 	#1
.3933					_TIOutput:
.3933	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3936	29 3f		and #$3f			and 	#$3F
.3938	48		pha				pha
.3939	20 6b 38	jsr $386b			jsr 	TokenWrite
.393c	e8		inx				inx
.393d	68		pla				pla
.393e	c9 3a		cmp #$3a			cmp 	#$3A
.3940	90 f1		bcc $3933			bcc 	_TIOutput
.3942	68		pla				pla
.3943	a8		tay				tay
.3944					_TIExit:
.3944	38		sec				sec 								; this can't fail.
.3945	60		rts				rts
.3946					TIDCheckCopy:
.3946	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3948	d0 08		bne $3952			bne 	_TIDCCExit
.394a	e8		inx				inx
.394b	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.394e	8e cf 0a	stx $0acf			stx 	convertBuffer
.3951	c8		iny				iny
.3952					_TIDCCExit:
.3952	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3953					TokeniseInteger:
.3953	85 2c		sta $2c				sta 	temp1 						; save base
.3955	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3957	8e cf 0a	stx $0acf			stx 	convertBuffer
.395a					_TIGetChars:
.395a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.395c	c9 30		cmp #$30			cmp 	#"0"
.395e	90 1f		bcc $397f			bcc 	_TIEndGet
.3960	c9 3a		cmp #$3a			cmp 	#"9"+1
.3962	90 10		bcc $3974			bcc 	_TIHaveChar
.3964	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3966	c9 0a		cmp #$0a			cmp 	#10
.3968	f0 15		beq $397f			beq 	_TIEndGet
.396a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.396c	c9 41		cmp #$41			cmp 	#"A"
.396e	90 0f		bcc $397f			bcc 	_TIEndGet
.3970	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3972	b0 0b		bcs $397f			bcs 	_TIEndGet
.3974					_TIHaveChar:
.3974	e8		inx				inx 								; write into buffer.
.3975	8e cf 0a	stx $0acf			stx 	convertBuffer
.3978	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.397b	c8		iny				iny 								; next char
.397c	4c 5a 39	jmp $395a			jmp 	_TIGetChars
.397f					_TIEndGet:
.397f	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3981	f0 1c		beq $399f			beq 	_TIFail
.3983	98		tya				tya
.3984	48		pha				pha
.3985	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3987	85 2a		sta $2a				sta 	temp0
.3989	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.398b	85 2b		sta $2b				sta 	1+(temp0)
.398d	a9 00		lda #$00			lda 	#0 							; stack level 0
.398f	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3991	a2 16		ldx #$16		ldx	#22
.3993	20 91 32	jsr $3291		jsr	mainHandler
.3996	68		pla				pla
.3997	a8		tay				tay
.3998	90 05		bcc $399f			bcc 	_TIFail 					; didn't convert.
.399a	20 a1 39	jsr $39a1			jsr 	TIRecursiveOut 				; recursive output ?
.399d	38		sec				sec
.399e	60		rts				rts
.399f					_TIFail:
.399f	18		clc				clc
.39a0	60		rts				rts
.39a1					TIRecursiveOut:
.39a1	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.39a3	29 3f		and #$3f			and 	#$3F
.39a5	09 40		ora #$40			ora 	#$40
.39a7	48		pha				pha
.39a8	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.39aa	29 c0		and #$c0			and 	#$C0
.39ac	05 58		ora $58				ora 	esInt1
.39ae	05 60		ora $60				ora 	esInt2
.39b0	05 68		ora $68				ora 	esInt3
.39b2	f0 10		beq $39c4			beq 	_TIRONoRecursion
.39b4	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.39b6					_TIROShift:
.39b6	46 68		lsr $68				lsr 	esInt3
.39b8	66 60		ror $60				ror 	esInt2
.39ba	66 58		ror $58				ror 	esInt1
.39bc	66 50		ror $50				ror 	esInt0
.39be	ca		dex				dex
.39bf	d0 f5		bne $39b6			bne 	_TIROShift
.39c1	20 a1 39	jsr $39a1			jsr 	TIRecursiveOut 				; call recursively
.39c4					_TIRONoRecursion:
.39c4	68		pla				pla 								; pull the old bit.
.39c5	4c 6b 38	jmp $386b			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.39c8					TokenisePunctuation:
.39c8	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.39ca	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.39cd	c8		iny				iny
.39ce	b1 28		lda ($28),y			lda 	(codePtr),y
.39d0	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.39d3	c8		iny				iny 								; Y is +2
.39d4	a9 02		lda #$02			lda 	#2 							; 2 character string.
.39d6	8d cf 0a	sta $0acf			sta 	convertBuffer
.39d9	20 7b 37	jsr $377b			jsr 	TokenSearch 				; search for that token.
.39dc	b0 0a		bcs $39e8			bcs 	_TIFound
.39de	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.39e1	88		dey				dey 								; Y is now +1
.39e2	20 7b 37	jsr $377b			jsr 	TokenSearch 				; search for that token.
.39e5	b0 01		bcs $39e8			bcs 	_TIFound
.39e7	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.39e8					_TIFound:
.39e8	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.39e9					TokeniseString:
.39e9	c8		iny				iny 								; skip opening quote
.39ea	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.39ec	84 2a		sty $2a				sty 	temp0 						; save start.
.39ee					_TSGetLength:
.39ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.39f0	f0 21		beq $3a13			beq 	_TSFail						; end of line, fail
.39f2	c8		iny				iny
.39f3	e8		inx				inx
.39f4	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.39f6	d0 f6		bne $39ee			bne 	_TSGetLength
.39f8	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.39fa	20 6b 38	jsr $386b			jsr 	TokenWrite
.39fd	8a		txa				txa 								; output length
.39fe	20 6b 38	jsr $386b			jsr 	TokenWrite
.3a01	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3a03	e0 00		cpx #$00			cpx 	#0 							; check ended
.3a05	f0 09		beq $3a10			beq 	_TSExit
.3a07					_TSOutput:
.3a07	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3a09	20 6b 38	jsr $386b			jsr 	TokenWrite
.3a0c	c8		iny				iny
.3a0d	ca		dex				dex
.3a0e	d0 f7		bne $3a07			bne 	_TSOutput
.3a10					_TSExit:
.3a10	c8		iny				iny 								; skip ending quote
.3a11	38		sec				sec 								; return CS.
.3a12	60		rts				rts
.3a13					_TSFail:
.3a13	18		clc				clc
.3a14	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3a15					TokenTableAddress:
>3a15	1d 3a						.word 	Group0Text
>3a17	ea 3b						.word 	Group1Text
>3a19	25 3d						.word 	Group2Text
>3a1b	45 3d						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3a1d					Group0Text:
>3a1d	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3a21	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3a24	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3a28	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3a2b	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3a2e	01 be					.byte $01,$be                          ; $8b >
>3a30	01 bc					.byte $01,$bc                          ; $8c <
>3a32	01 bd					.byte $01,$bd                          ; $8d =
>3a34	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3a37	01 ab					.byte $01,$ab                          ; $8f +
>3a39	01 ad					.byte $01,$ad                          ; $90 -
>3a3b	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3a3e	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3a41	01 aa					.byte $01,$aa                          ; $93 *
>3a43	01 af					.byte $01,$af                          ; $94 /
>3a45	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3a49	01 de					.byte $01,$de                          ; $96 ^
>3a4b	01 a1					.byte $01,$a1                          ; $97 !
>3a4d	01 bf					.byte $01,$bf                          ; $98 ?
>3a4f	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3a56	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3a5c	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3a60	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3a63	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3a6b	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3a71	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3a76	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3a7b	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3a80	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3a86	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3a8e	01 a8					.byte $01,$a8                          ; $a4 (
>3a90	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3a95	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3a9a	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3a9f	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3aa7	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3aac	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3ab1	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3ab7	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3abc	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3ac1	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3ac6	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3acd	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3ad4	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3ad9	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3ae0	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3ae7	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3aed	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3af4	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3afa	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3b02	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3b08	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3b0d	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3b13	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3b19	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3b1f	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3b24	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3b29	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3b30	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3b37	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3b3f	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3b47	01 c0					.byte $01,$c0                          ; $c3 @
>3b49	01 fe					.byte $01,$fe                          ; $c4 ~
>3b4b	01 a6					.byte $01,$a6                          ; $c5 &
>3b4d	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3b53	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3b5b	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3b5f	01 a9					.byte $01,$a9                          ; $c9 )
>3b61	01 ba					.byte $01,$ba                          ; $ca :
>3b63	01 ac					.byte $01,$ac                          ; $cb ,
>3b65	01 bb					.byte $01,$bb                          ; $cc ;
>3b67	01 a7					.byte $01,$a7                          ; $cd '
>3b69	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3b6c	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3b71	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3b76	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3b7c	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3b80	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3b84	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3b88	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3b8e	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3b93	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3b97	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3b9d	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>3ba2	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3ba8	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>3baf	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3bb4	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3bbb	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3bc0	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3bc5	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3bca	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3bce	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3bd4	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3bd8	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3bdf	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3be5	01 ae					.byte $01,$ae                          ; $e6 .
>3be7	01 a3					.byte $01,$a3                          ; $e7 #
>3be9	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3bea					Group1Text:
>3bea	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3bf0	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3bf5	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3bfa	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3bff	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3c03	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3c07	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3c0c	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3c14	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3c18	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3c1d	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3c22	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3c26	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>3c2c	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>3c30	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>3c34	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>3c38	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>3c3c	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>3c40	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>3c44	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>3c48	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>3c4c	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>3c50	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>3c54	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>3c58	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>3c5c	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>3c60	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>3c64	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>3c68	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>3c6c	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>3c70	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>3c74	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>3c78	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>3c7c	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>3c80	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>3c84	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>3c88	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>3c8c	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3c90	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3c94	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3c98	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>3c9c	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3ca0	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3ca4	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3ca8	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>3cac	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3cb0	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3cb4	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3cb8	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>3cbc	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3cc0	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3cc4	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3cc8	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>3ccc	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3cd0	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3cd4	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3cd8	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3cdc	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3ce0	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3ce4	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3ce8	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3cec	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3cf0	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3cf4	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3cf8	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3cfc	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3d00	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3d04	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3d08	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3d0c	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3d10	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3d14	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3d18	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3d1c	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3d20	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3d24	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3d25					Group2Text:
>3d25	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3d2b	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3d31	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3d37	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3d3c	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>3d44	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3d45					Group3Text:
>3d45	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3d4c	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3d53	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3d54					tokeniserHandler:
.3d54	7c 57 3d	jmp ($3d57,x)			jmp 	(tokeniserVectors,x)
.3d57					tokeniserVectors:
>3d57	68 35					.word Detokenise           ; index 0
>3d59	5c 35					.word ListLine             ; index 2
>3d5b	ea 37					.word TokTest              ; index 4
>3d5d	0a 38					.word Tokenise             ; index 6
>3d5f	0d 38					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3d61					section_end_tokeniser:
.3d61					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3d61					AccessArray:
.3d61	8a		txa				txa
.3d62	48		pha				pha
.3d63	e8		inx				inx
.3d64	20 2d 3e	jsr $3e2d			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.3d67	68		pla				pla
.3d68	aa		tax				tax
.3d69	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.3d6b	85 2a		sta $2a				sta 	temp0
.3d6d	b5 58		lda $58,x			lda 	esInt1,x
.3d6f	85 2b		sta $2b				sta 	temp0+1
.3d71	8a		txa				txa
.3d72	48		pha				pha
.3d73	98		tya				tya
.3d74	48		pha				pha
.3d75					_AAFollow:
.3d75	a0 00		ldy #$00			ldy 	#0
.3d77	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d79	48		pha				pha
.3d7a	c8		iny				iny
.3d7b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d7d	85 2b		sta $2b				sta 	temp0+1
.3d7f	68		pla				pla
.3d80	85 2a		sta $2a				sta 	temp0
.3d82	e8		inx				inx 								; advance to next stack slot.
.3d83	a0 00		ldy #$00			ldy 	#0
.3d85	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.3d87	d5 50		cmp $50,x			cmp 	esInt0,x
.3d89	c8		iny				iny
.3d8a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.3d8c	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.3d8e	29 7f		and #$7f			and 	#$7F
.3d90	f5 58		sbc $58,x			sbc 	esInt1,x
.3d92	90 50		bcc $3de4			bcc 	_AABadIndex 				; failed on index if max index < required.
.3d94	18		clc				clc
.3d95	a5 2a		lda $2a				lda 	temp0
.3d97	69 02		adc #$02			adc 	#2
.3d99	85 2a		sta $2a				sta 	temp0
.3d9b	90 02		bcc $3d9f			bcc 	_AANoCarry
.3d9d	e6 2b		inc $2b				inc 	temp0+1
.3d9f					_AANoCarry:
.3d9f	b5 50		lda $50,x			lda 	esInt0,x
.3da1	85 2e		sta $2e				sta 	temp2
.3da3	b5 58		lda $58,x			lda 	esInt1,x
.3da5	85 2f		sta $2f				sta 	temp2+1
.3da7	ac 2b 0d	ldy $0d2b			ldy 	varType
.3daa	b9 87 3e	lda $3e87,y			lda 	CAActualSize-$3A,y
.3dad	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3daf	30 02		bmi $3db3			bmi 	_AANotPointer
.3db1	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3db3					_AANotPointer:
.3db3	20 31 3f	jsr $3f31			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.3db6	18		clc				clc
.3db7	a5 2a		lda $2a				lda 	temp0
.3db9	65 2e		adc $2e				adc 	temp2
.3dbb	85 2a		sta $2a				sta 	temp0
.3dbd	a5 2b		lda $2b				lda 	temp0+1
.3dbf	65 2f		adc $2f				adc 	temp2+1
.3dc1	85 2b		sta $2b				sta 	temp0+1
.3dc3	b5 49		lda $49,x			lda 	esType+1,x
.3dc5	30 07		bmi $3dce			bmi 	_AAUsedAllIndices
.3dc7	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.3dc9	10 14		bpl $3ddf			bpl 	_AABadDepth 				; no, too many indexes.
.3dcb	4c 75 3d	jmp $3d75			jmp 	_AAFollow 					; otherwise follow them.
.3dce					_AAUsedAllIndices:
.3dce	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.3dd0	30 0d		bmi $3ddf			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.3dd2	68		pla				pla
.3dd3	a8		tay				tay
.3dd4	68		pla				pla
.3dd5	aa		tax				tax
.3dd6	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.3dd8	95 50		sta $50,x			sta 	esInt0,x
.3dda	a5 2b		lda $2b				lda 	temp0+1
.3ddc	95 58		sta $58,x			sta 	esInt1,x
.3dde	60		rts				rts
.3ddf					_AABadDepth:
.3ddf	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.3de1	20 e0 14	jsr $14e0		jsr	errorHandler
.3de4					_AABadIndex:
.3de4	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3de6	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0d29					elementSize:
>0d29							.fill	 1
.3de9					CreateArray:
.3de9	20 c0 3f	jsr $3fc0			jsr 	AccessSetup 				; set up the basic stuff.
.3dec	ad 2b 0d	lda $0d2b			lda 	varType 					; is the variable type an array
.3def	4a		lsr a				lsr 	a
.3df0	90 36		bcc $3e28			bcc 	CANotArray 					; no, cause an error.
.3df2	20 c9 40	jsr $40c9			jsr 	FindVariable 				; does the variable exist already
.3df5	b0 2c		bcs $3e23			bcs 	CAFound 					; cannot redefine it.
.3df7	20 fd 3f	jsr $3ffd			jsr 	CreateVariable 				; create the variable entry.
.3dfa	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3dfc	48		pha				pha
.3dfd	a5 2b		lda $2b				lda 	temp0+1
.3dff	48		pha				pha
.3e00	a2 00		ldx #$00			ldx 	#0
.3e02	20 2d 3e	jsr $3e2d			jsr 	GetArrayDimensions 			; get the array dimensions
.3e05	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.3e07	20 5d 3e	jsr $3e5d			jsr 	CreateArrayLevel 			; level to YA
.3e0a	aa		tax				tax 								; level now in YX
.3e0b	68		pla				pla 								; get address back to temp0 to write.
.3e0c	85 2b		sta $2b				sta 	temp0+1
.3e0e	68		pla				pla
.3e0f	85 2a		sta $2a				sta 	temp0
.3e11	98		tya				tya 								; write YX there.
.3e12	a0 06		ldy #$06			ldy 	#6
.3e14	91 2a		sta ($2a),y			sta 	(temp0),y
.3e16	88		dey				dey
.3e17	8a		txa				txa
.3e18	91 2a		sta ($2a),y			sta 	(temp0),y
.3e1a	ac 2c 0d	ldy $0d2c			ldy 	varEnd 						; restore Y and exit.
.3e1d	60		rts				rts
.3e1e					CASize:
.3e1e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3e20	20 e0 14	jsr $14e0		jsr	errorHandler
.3e23					CAFound:
.3e23	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3e25	20 e0 14	jsr $14e0		jsr	errorHandler
.3e28					CANotArray:
.3e28	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3e2a	20 e0 14	jsr $14e0		jsr	errorHandler
.3e2d					GetArrayDimensions:
.3e2d	ad 2b 0d	lda $0d2b			lda 	varType 					; push variable type on the stack.
.3e30	48		pha				pha
.3e31	ac 2c 0d	ldy $0d2c			ldy 	varEnd
.3e34					_CAGetDimensions:
.3e34	8a		txa				txa 								; get the next level
.3e35	a2 08		ldx #$08		ldx	#8
.3e37	20 91 32	jsr $3291		jsr	mainHandler
.3e3a	aa		tax				tax
.3e3b	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.3e3d	29 e0		and #$e0			and 	#$E0
.3e3f	15 60		ora $60,x			ora 	esInt2,x
.3e41	15 68		ora $68,x			ora 	esInt3,x
.3e43	d0 d9		bne $3e1e			bne 	CASize
.3e45	e8		inx				inx 								; next level.
.3e46	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.3e48	c8		iny				iny
.3e49	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.3e4b	f0 e7		beq $3e34			beq 	_CAGetDimensions
.3e4d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.3e4f	d0 cd		bne $3e1e			bne 	CASize
.3e51	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.3e53	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.3e55	68		pla				pla 								; restore the variable type ($3A-$3F)
.3e56	8d 2b 0d	sta $0d2b			sta 	varType
.3e59	8c 2c 0d	sty $0d2c			sty 	varEnd 						; save exit Y value, after dimensions
.3e5c	60		rts				rts
.3e5d					CreateArrayLevel:
.3e5d	ac 2b 0d	ldy $0d2b			ldy 	varType
.3e60	b9 87 3e	lda $3e87,y			lda 	CAActualSize-$3A,y
.3e63	8d 29 0d	sta $0d29			sta 	elementSize 				; get element size this level.
.3e66	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3e68	30 05		bmi $3e6f			bmi 	_CANotPointer
.3e6a	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3e6c	8d 29 0d	sta $0d29			sta 	elementSize
.3e6f					_CANotPointer:
.3e6f	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.3e71	85 2a		sta $2a				sta 	temp0
.3e73	48		pha				pha
.3e74	a5 36		lda $36				lda 	lowMemory+1
.3e76	85 2b		sta $2b				sta 	temp0+1
.3e78	48		pha				pha
.3e79	20 fa 3e	jsr $3efa			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.3e7c	a0 00		ldy #$00			ldy 	#0
.3e7e	b5 50		lda $50,x			lda 	esInt0,x
.3e80	91 2a		sta ($2a),y			sta 	(temp0),y
.3e82	c8		iny				iny
.3e83	b5 58		lda $58,x			lda 	esInt1,x
.3e85	91 2a		sta ($2a),y			sta 	(temp0),y
.3e87	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.3e89	30 06		bmi $3e91			bmi 	_CALNotLast
.3e8b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.3e8d	09 80		ora #$80			ora 	#$80
.3e8f	91 2a		sta ($2a),y			sta 	(temp0),y
.3e91					_CALNotLast:
.3e91	a9 02		lda #$02			lda 	#2
.3e93	20 b7 3e	jsr $3eb7			jsr 	_CALAddTemp0
.3e96	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.3e98	95 60		sta $60,x			sta 	esInt2,x 					; count.
.3e9a	b5 58		lda $58,x			lda 	esInt1,x
.3e9c	95 68		sta $68,x			sta 	esInt3,x
.3e9e					_CALClear:
.3e9e	20 c7 3e	jsr $3ec7			jsr 	EraseOneElement
.3ea1	ad 29 0d	lda $0d29			lda 	elementSize 				; move to next element
.3ea4	20 b7 3e	jsr $3eb7			jsr 	_CALAddTemp0
.3ea7	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.3ea9	d0 02		bne $3ead			bne 	_CALNoBorrow
.3eab	d6 68		dec $68,x			dec 	esInt3,x
.3ead					_CALNoBorrow:
.3ead	d6 60		dec $60,x			dec 	esInt2,x
.3eaf	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.3eb1	10 eb		bpl $3e9e			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.3eb3	68		pla				pla 								; restore the start of this into YA.
.3eb4	a8		tay				tay
.3eb5	68		pla				pla
.3eb6	60		rts				rts
.3eb7					_CALAddTemp0:
.3eb7	18		clc				clc
.3eb8	65 2a		adc $2a				adc 	temp0
.3eba	85 2a		sta $2a				sta 	temp0
.3ebc	90 02		bcc $3ec0			bcc 	_CALANoCarry
.3ebe	e6 2b		inc $2b				inc 	temp0+1
.3ec0					_CALANoCarry:
.3ec0	60		rts				rts
.3ec1					CAActualSize:
>3ec1	04 04						.byte 	VarISize,VarISize
>3ec3	02 02						.byte 	VarSSize,VarSSize
>3ec5	06 06						.byte 	VarFSize,VarFSize
.3ec7					EraseOneElement:
.3ec7	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.3ec9	10 09		bpl $3ed4			bpl 	_EOESubArray
.3ecb	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.3ecd	ad 2b 0d	lda $0d2b			lda 	varType
.3ed0	20 67 40	jsr $4067			jsr 	ZeroTemp0Y
.3ed3	60		rts				rts
.3ed4					_EOESubArray:
.3ed4	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.3ed6	48		pha				pha
.3ed7	a5 2b		lda $2b				lda 	temp0+1
.3ed9	48		pha				pha
.3eda	ad 29 0d	lda $0d29			lda 	elementSize 				; save element size
.3edd	48		pha				pha
.3ede	e8		inx				inx 								; create at next level
.3edf	20 5d 3e	jsr $3e5d			jsr 	CreateArrayLevel
.3ee2	ca		dex				dex
.3ee3	85 32		sta $32				sta 	tempShort 					; save A
.3ee5	68		pla				pla  								; restore element size.
.3ee6	8d 29 0d	sta $0d29			sta 	elementSize
.3ee9	68		pla				pla 								; restore temp0, which is where this new array level goes.
.3eea	85 2b		sta $2b				sta 	temp0+1
.3eec	68		pla				pla
.3eed	85 2a		sta $2a				sta 	temp0
.3eef	98		tya				tya 								; store Y/A there
.3ef0	a0 01		ldy #$01			ldy 	#1
.3ef2	91 2a		sta ($2a),y			sta 	(temp0),y
.3ef4	a5 32		lda $32				lda 	tempShort
.3ef6	88		dey				dey
.3ef7	91 2a		sta ($2a),y			sta 	(temp0),y
.3ef9	60		rts				rts
.3efa					AllocateArraySpace:
.3efa	18		clc				clc 								; element count + 1 => temp2.
.3efb	b5 50		lda $50,x			lda 	esInt0,x
.3efd	69 01		adc #$01			adc 	#1
.3eff	85 2e		sta $2e				sta 	temp2
.3f01	b5 58		lda $58,x			lda 	esInt1,x
.3f03	69 00		adc #$00			adc 	#0
.3f05	85 2f		sta $2f				sta 	temp2+1
.3f07	ad 29 0d	lda $0d29			lda 	elementSize 				; bytes per element
.3f0a	20 31 3f	jsr $3f31			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.3f0d	18		clc				clc 								; add 2 for 'max element' byte.
.3f0e	a5 2e		lda $2e				lda 	temp2
.3f10	69 02		adc #$02			adc 	#2
.3f12	85 2e		sta $2e				sta 	temp2
.3f14	90 02		bcc $3f18			bcc 	_AASNoCarry
.3f16	e6 2f		inc $2f				inc 	temp2+1
.3f18					_AASNoCarry:
.3f18	18		clc				clc 								; add to low memory, allocating space.
.3f19	a5 35		lda $35				lda 	lowMemory
.3f1b	65 2e		adc $2e				adc 	temp2
.3f1d	85 35		sta $35				sta 	lowMemory
.3f1f	a5 36		lda $36				lda 	lowMemory+1
.3f21	65 2f		adc $2f				adc 	temp2+1
.3f23	85 36		sta $36				sta 	lowMemory+1
.3f25	b0 05		bcs $3f2c			bcs 	_AASFail 					; out of memory as adding causes wrapround
.3f27	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.3f29	b0 01		bcs $3f2c			bcs 	_AASFail
.3f2b	60		rts				rts
.3f2c					_AASFail:
.3f2c	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3f2e	20 e0 14	jsr $14e0		jsr	errorHandler
.3f31					MultiplyTemp2ByA:
.3f31	48		pha				pha
.3f32	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.3f34	85 30		sta $30				sta 	temp3
.3f36	a5 2f		lda $2f				lda 	temp2+1
.3f38	85 31		sta $31				sta 	temp3+1
.3f3a	68		pla				pla
.3f3b	06 2e		asl $2e				asl 	temp2 						; double it.
.3f3d	26 2f		rol $2f				rol 	temp2+1
.3f3f	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3f41	f0 15		beq $3f58			beq 	_MTBAExit
.3f43	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.3f45	d0 0d		bne $3f54			bne 	_MTBANotFloat
.3f47	18		clc				clc 								; so this will make it x 3
.3f48	a5 2e		lda $2e				lda 	temp2
.3f4a	65 30		adc $30				adc 	temp3
.3f4c	85 2e		sta $2e				sta 	temp2
.3f4e	a5 2f		lda $2f				lda 	temp2+1
.3f50	65 31		adc $31				adc 	temp3+1
.3f52	85 2f		sta $2f				sta 	temp2+1
.3f54					_MTBANotFloat:
.3f54	06 2e		asl $2e				asl 	temp2 						; double it.
.3f56	26 2f		rol $2f				rol 	temp2+1
.3f58					_MTBAExit:
.3f58	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0d2a					varHash:
>0d2a							.fill	1
.0d2b					varType:
>0d2b							.fill 	1
.0d2c					varEnd:
>0d2c							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3f59					AccessVariable:
.3f59	aa		tax				tax 								; stack in X
.3f5a	c8		iny				iny									; look at second character
.3f5b	b1 28		lda ($28),y			lda 	(codePtr),y
.3f5d	88		dey				dey
.3f5e	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3f60	d0 15		bne $3f77			bne 	_AVLong 					; no, always use the hash tables.
.3f62	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3f64	38		sec				sec 	 							; make it 0-25
.3f65	e9 01		sbc #$01			sbc 	#1
.3f67	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3f68	0a		asl a				asl 	a
.3f69	95 50		sta $50,x			sta 	esInt0,x
.3f6b	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3f6d	95 58		sta $58,x			sta 	esInt1,x
.3f6f	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3f71	95 48		sta $48,x			sta 	esType,x
.3f73	c8		iny				iny 								; skip over the variable reference in the code.
.3f74	c8		iny				iny  								; (1 letter, 1 type)
.3f75	8a		txa				txa 								; stack in A to return.
.3f76	60		rts				rts
.3f77					_AVLong:
.3f77	8a		txa				txa
.3f78	48		pha				pha
.3f79	20 c0 3f	jsr $3fc0			jsr 	AccessSetup 				; set up the basic information we need for later
.3f7c	20 c9 40	jsr $40c9			jsr 	FindVariable 				; does the variable exist already ?
.3f7f	b0 0e		bcs $3f8f			bcs 	_AVFound 					; yes, then its found
.3f81	ad 2b 0d	lda $0d2b			lda 	varType 					; otherwise, is the variable type an array
.3f84	4a		lsr a				lsr 	a
.3f85	90 05		bcc $3f8c			bcc 	_AVCanCreate 				; if not, we can autocreate
.3f87	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3f89	20 e0 14	jsr $14e0		jsr	errorHandler
.3f8c					_AVCanCreate:
.3f8c	20 fd 3f	jsr $3ffd			jsr 	CreateVariable 				; variable does not exist, create it.
.3f8f					_AVFound:
.3f8f	68		pla				pla
.3f90	aa		tax				tax
.3f91	18		clc				clc 								; copy temp0 (variable record address)
.3f92	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3f94	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3f96	95 50		sta $50,x			sta 	esInt0,x
.3f98	a5 2b		lda $2b				lda 	temp0+1
.3f9a	69 00		adc #$00			adc 	#0
.3f9c	95 58		sta $58,x			sta 	esInt1,x
.3f9e	a9 00		lda #$00			lda 	#0
.3fa0	95 60		sta $60,x			sta 	esInt2,x
.3fa2	95 68		sta $68,x			sta 	esInt3,x
.3fa4	ac 2b 0d	ldy $0d2b			ldy 	varType 					; get the type ID from the type.
.3fa7	b9 80 3f	lda $3f80,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3faa	95 48		sta $48,x			sta 	esType,x
.3fac	ac 2c 0d	ldy $0d2c			ldy 	varEnd 						; restore Y
.3faf	ad 2b 0d	lda $0d2b			lda 	VarType 					; get variable type, put LSB into C
.3fb2	4a		lsr a				lsr 	a
.3fb3	90 03		bcc $3fb8			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3fb5	20 61 3d	jsr $3d61			jsr 	AccessArray 				; array lookup. if LSB was set.
.3fb8					_AVNotArray:
.3fb8	8a		txa				txa 								; return stack in A and return
.3fb9	60		rts				rts
.3fba					_AVTypeTable:
>3fba	80 80						.byte 	$80,$80						; integer
>3fbc	c0 c0						.byte 	$C0,$C0 					; string
>3fbe	81 81						.byte 	$81,$81 					; float
.3fc0					AccessSetup:
.3fc0	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3fc2	8d 2a 0d	sta $0d2a			sta 	varHash
.3fc5	98		tya				tya
.3fc6	48		pha				pha
.3fc7	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3fc9	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3fcb	b0 0b		bcs $3fd8			bcs 	_ASComplete
.3fcd	18		clc				clc 								; add to the hash. Might improve this.
.3fce	6d 2a 0d	adc $0d2a			adc 	varHash
.3fd1	8d 2a 0d	sta $0d2a			sta 	varHash
.3fd4	c8		iny				iny 								; next character
.3fd5	4c c7 3f	jmp $3fc7			jmp 	_ASLoop
.3fd8					_ASComplete:
.3fd8	8d 2b 0d	sta $0d2b			sta 	varType 					; save variable type byte
.3fdb	c8		iny				iny
.3fdc	8c 2c 0d	sty $0d2c			sty 	varEnd 						; save the ending position.
.3fdf	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3fe0	e9 3a		sbc #$3a			sbc 	#$3A
.3fe2	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3fe3	0a		asl a				asl 	a
.3fe4	0a		asl a				asl 	a
.3fe5	0a		asl a				asl 	a 							; 2 bytes/word
.3fe6	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3fe8	ad 2a 0d	lda $0d2a			lda 	varHash 					; get hash
.3feb	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3fed	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3fee	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3ff0	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3ff2	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3ff4	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3ff6	69 00		adc #$00			adc 	#0
.3ff8	85 3c		sta $3c				sta 	hashList+1
.3ffa	68		pla				pla
.3ffb	a8		tay				tay
.3ffc	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.3ffd					CreateVariable:
.3ffd	98		tya				tya 								; push Y on the stack twice.
.3ffe	48		pha				pha									; position in code of the new variable.
.3fff	48		pha				pha
.4000	ae 2b 0d	ldx $0d2b			ldx 	varType 					; get var type 0-5 from the var type
.4003	bd 27 40	lda $4027,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4006	48		pha				pha 								; save length
.4007	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4009	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.400b	a5 36		lda $36				lda 	lowMemory+1
.400d	85 2b		sta $2b				sta 	temp0+1
.400f	68		pla				pla 								; get length
.4010	18		clc				clc 								; add to low memory.
.4011	65 35		adc $35				adc 	lowMemory
.4013	85 35		sta $35				sta 	lowMemory
.4015	90 08		bcc $401f			bcc 	_CVNoCarry
.4017	e6 36		inc $36				inc 	lowMemory+1
.4019	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.401b	c5 34		cmp $34				cmp 	highMemory+1
.401d	b0 3d		bcs $405c			bcs 	_CVMemory
.401f					_CVNoCarry:
.401f	ad 2a 0d	lda $0d2a			lda 	varHash 					; store hash at offset 4.
.4022	a0 04		ldy #$04			ldy 	#4
.4024	91 2a		sta ($2a),y			sta 	(temp0),y
.4026	68		pla				pla 								; offset, work out where the variable name is.
.4027	18		clc				clc
.4028	65 28		adc $28				adc 	codePtr
.402a	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.402c	91 2a		sta ($2a),y			sta 	(temp0),y
.402e	a5 29		lda $29				lda 	codePtr+1
.4030	69 00		adc #$00			adc 	#0
.4032	c8		iny				iny
.4033	91 2a		sta ($2a),y			sta 	(temp0),y
.4035	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4038	b0 03		bcs $403d			bcs 	_CVNotImmediate
.403a	20 9f 40	jsr $409f			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.403d					_CVNotImmediate:
.403d	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.403f	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4041	91 2a		sta ($2a),y			sta 	(temp0),y
.4043	c8		iny				iny
.4044	b1 3b		lda ($3b),y			lda 	(hashList),y
.4046	91 2a		sta ($2a),y			sta 	(temp0),y
.4048	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.404a	91 3b		sta ($3b),y			sta 	(hashList),y
.404c	88		dey				dey
.404d	a5 2a		lda $2a				lda 	temp0
.404f	91 3b		sta ($3b),y			sta 	(hashList),y
.4051	ad 2b 0d	lda $0d2b			lda 	varType 					; type in A
.4054	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4056	20 67 40	jsr $4067			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4059	68		pla				pla
.405a	a8		tay				tay
.405b	60		rts				rts
.405c					_CVMemory:
.405c	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.405e	20 e0 14	jsr $14e0		jsr	errorHandler
>4061	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4063	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4065	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4067					ZeroTemp0Y:
.4067	4a		lsr a				lsr 	a 							; bit 0 in carry
.4068	0a		asl a				asl 	a
.4069	b0 19		bcs $4084			bcs 	_ZTExit 					; we don't initialise arrays.
.406b	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.406d	f0 16		beq $4085			beq 	_ZTWriteNullString 			; write "" string
.406f	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4071	f0 22		beq $4095			beq 	_ZTWriteFloat
.4073	98		tya				tya
.4074	48		pha				pha
.4075	a9 00		lda #$00			lda 	#0
.4077	91 2a		sta ($2a),y			sta 	(temp0),y
.4079	c8		iny				iny
.407a	91 2a		sta ($2a),y			sta 	(temp0),y
.407c	c8		iny				iny
.407d	91 2a		sta ($2a),y			sta 	(temp0),y
.407f	c8		iny				iny
.4080	91 2a		sta ($2a),y			sta 	(temp0),y
.4082	68		pla				pla
.4083	a8		tay				tay
.4084					_ZTExit:
.4084	60		rts				rts
.4085					_ZTWriteNullString:
.4085	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4087	8d ce 0a	sta $0ace			sta 	NullString
.408a	a9 ce		lda #$ce			lda 	#NullString & $FF
.408c	91 2a		sta ($2a),y			sta 	(temp0),y
.408e	a9 0a		lda #$0a			lda 	#NullString >> 8
.4090	c8		iny				iny
.4091	91 2a		sta ($2a),y			sta 	(temp0),y
.4093	88		dey				dey
.4094	60		rts				rts
.4095					_ZTWriteFloat:
.4095	8a		txa				txa
.4096	48		pha				pha
.4097	a2 1e		ldx #$1e		ldx	#30
.4099	20 21 1a	jsr $1a21		jsr	floatingpointHandler
.409c	68		pla				pla
.409d	aa		tax				tax
.409e	60		rts				rts
.409f					CloneVariableName:
.409f	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.40a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.40a3	85 2e		sta $2e				sta 	temp2
.40a5	c8		iny				iny
.40a6	b1 2a		lda ($2a),y			lda 	(temp0),y
.40a8	85 2f		sta $2f				sta 	temp2+1
.40aa	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.40ac	91 2a		sta ($2a),y			sta 	(temp0),y
.40ae	88		dey				dey
.40af	a5 35		lda $35				lda 	lowMemory
.40b1	91 2a		sta ($2a),y			sta 	(temp0),y
.40b3	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.40b5					_CVNCopy:
.40b5	b1 2e		lda ($2e),y			lda		(temp2),y
.40b7	91 35		sta ($35),y			sta 	(lowMemory),y
.40b9	c8		iny				iny
.40ba	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.40bc	90 f7		bcc $40b5			bcc 	_CVNCopy
.40be	98		tya				tya 								; add Y to low memory
.40bf	18		clc				clc
.40c0	65 35		adc $35				adc 	lowMemory
.40c2	85 35		sta $35				sta 	lowMemory
.40c4	90 02		bcc $40c8			bcc 	_CVNNoCarry
.40c6	e6 36		inc $36				inc 	lowMemory+1
.40c8					_CVNNoCarry:
.40c8	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.40c9					FindVariable:
.40c9	98		tya				tya
.40ca	48		pha				pha
.40cb	98		tya				tya 								; point temp2 to the actual name
.40cc	18		clc				clc 								; in memory of the variable being created
.40cd	65 28		adc $28				adc 	codePtr
.40cf	85 2e		sta $2e				sta 	temp2
.40d1	a5 29		lda $29				lda 	codePtr+1
.40d3	69 00		adc #$00			adc 	#0
.40d5	85 2f		sta $2f				sta 	temp2+1
.40d7	a0 00		ldy #$00			ldy 	#0
.40d9	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.40db	85 2a		sta $2a				sta 	temp0
.40dd	a5 3c		lda $3c				lda 	hashList+1
.40df	85 2b		sta $2b				sta 	temp0+1
.40e1	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.40e3	b1 2a		lda ($2a),y			lda 	(temp0),y
.40e5	f0 2c		beq $4113			beq 	_FVFail
.40e7	aa		tax				tax
.40e8	88		dey				dey		 							; get LSB
.40e9	b1 2a		lda ($2a),y			lda 	(temp0),y
.40eb	85 2a		sta $2a				sta 	temp0 						; update pointer.
.40ed	86 2b		stx $2b				stx 	temp0+1
.40ef	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.40f1	b1 2a		lda ($2a),y			lda 	(temp0),y
.40f3	cd 2a 0d	cmp $0d2a			cmp 	varHash
.40f6	d0 e9		bne $40e1			bne 	_FVNext 					; if not, no point in checking the name.
.40f8	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.40f9	b1 2a		lda ($2a),y			lda 	(temp0),y
.40fb	85 2d		sta $2d				sta 	temp1+1
.40fd	88		dey				dey
.40fe	b1 2a		lda ($2a),y			lda 	(temp0),y
.4100	85 2c		sta $2c				sta 	temp1
.4102	a0 00		ldy #$00			ldy 	#0
.4104					_FVCheck:
.4104	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4106	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4108	d0 d7		bne $40e1			bne 	_FVNext		 				; fail if different.
.410a	c8		iny				iny
.410b	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.410d	90 f5		bcc $4104			bcc 	_FVCheck
.410f	68		pla				pla
.4110	a8		tay				tay
.4111	38		sec				sec
.4112	60		rts				rts
.4113					_FVFail:
.4113	68		pla				pla
.4114	a8		tay				tay
.4115	18		clc				clc
.4116	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4117					HashTableReset:
.4117	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4119	a9 00		lda #$00			lda 	#0
.411b					_HTRClear:
.411b	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.411e	ca		dex				dex
.411f	d0 fa		bne $411b			bne 	_HTRClear
.4121	60		rts				rts

;******  Return to file: variable/variable.asm

.4122					variableHandler:
.4122	7c 25 41	jmp ($4125,x)			jmp 	(variableVectors,x)
.4125					variableVectors:
>4125	59 3f					.word AccessVariable       ; index 0
>4127	e9 3d					.word CreateArray          ; index 2
>4129	17 41					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.412b					section_end_variable:
.412b					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d2d					endStorage:
>412b							.align 	256
.4200					programMemory:
>41ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4200					section_end_footer:

;******  End of listing
