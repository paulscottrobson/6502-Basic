
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Sun Mar 14 17:56:30 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$40					StackAddress = $40
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0078					endOfStack:
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_CODE                     = $91 ; code
=$92					TKW_PASS                     = $92 ; pass
=$93					TKW_ORA                      = $93 ; ora
=$94					TKW_LPARENANDRPAREN          = $94 ; (and)
=$95					TKW_EOR                      = $95 ; eor
=$96					TKW_ADC                      = $96 ; adc
=$97					TKW_STA                      = $97 ; sta
=$98					TKW_LDA                      = $98 ; lda
=$99					TKW_CMP                      = $99 ; cmp
=$9a					TKW_SBC                      = $9a ; sbc
=$9b					TKW_ASL                      = $9b ; asl
=$9c					TKW_ROL                      = $9c ; rol
=$9d					TKW_LSR                      = $9d ; lsr
=$9e					TKW_ROR                      = $9e ; ror
=$9f					TKW_STX                      = $9f ; stx
=$a0					TKW_LDX                      = $a0 ; ldx
=$a1					TKW_DEC                      = $a1 ; dec
=$a2					TKW_INC                      = $a2 ; inc
=$a3					TKW_STZ                      = $a3 ; stz
=$a4					TKW_BIT                      = $a4 ; bit
=$a5					TKW_STY                      = $a5 ; sty
=$a6					TKW_LDY                      = $a6 ; ldy
=$a7					TKW_CPY                      = $a7 ; cpy
=$a8					TKW_CPX                      = $a8 ; cpx
=$a9					TKW_TSB                      = $a9 ; tsb
=$aa					TKW_TRB                      = $aa ; trb
=$ab					TKW_JSR                      = $ab ; jsr
=$ac					TKW_JMP                      = $ac ; jmp
=$ad					TKW_BPL                      = $ad ; bpl
=$ae					TKW_BMI                      = $ae ; bmi
=$af					TKW_BVC                      = $af ; bvc
=$b0					TKW_BVS                      = $b0 ; bvs
=$b1					TKW_BCC                      = $b1 ; bcc
=$b2					TKW_BCS                      = $b2 ; bcs
=$b3					TKW_BNE                      = $b3 ; bne
=$b4					TKW_BEQ                      = $b4 ; beq
=$b5					TKW_BRA                      = $b5 ; bra
=$b6					TKW_BRK                      = $b6 ; brk
=$b7					TKW_PHP                      = $b7 ; php
=$b8					TKW_CLC                      = $b8 ; clc
=$b9					TKW_PLP                      = $b9 ; plp
=$ba					TKW_SEC                      = $ba ; sec
=$bb					TKW_RTI                      = $bb ; rti
=$bc					TKW_PHA                      = $bc ; pha
=$bd					TKW_CLI                      = $bd ; cli
=$be					TKW_PHY                      = $be ; phy
=$bf					TKW_RTS                      = $bf ; rts
=$c0					TKW_PLA                      = $c0 ; pla
=$c1					TKW_SEI                      = $c1 ; sei
=$c2					TKW_PLY                      = $c2 ; ply
=$c3					TKW_DEY                      = $c3 ; dey
=$c4					TKW_TXA                      = $c4 ; txa
=$c5					TKW_TYA                      = $c5 ; tya
=$c6					TKW_TXS                      = $c6 ; txs
=$c7					TKW_TAY                      = $c7 ; tay
=$c8					TKW_TAX                      = $c8 ; tax
=$c9					TKW_CLV                      = $c9 ; clv
=$ca					TKW_TSX                      = $ca ; tsx
=$cb					TKW_INY                      = $cb ; iny
=$cc					TKW_DEX                      = $cc ; dex
=$cd					TKW_CLD                      = $cd ; cld
=$ce					TKW_PHX                      = $ce ; phx
=$cf					TKW_INX                      = $cf ; inx
=$d0					TKW_NOP                      = $d0 ; nop
=$d1					TKW_SED                      = $d1 ; sed
=$d2					TKW_PLX                      = $d2 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$93					TKA_GROUP1 = $93
=$9b					TKA_GROUP2 = $9b
=$ad					TKA_GROUP3 = $ad
=$b6					TKA_GROUP4 = $b6
=$d3					TKA_END4 = $d3

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	71 35						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 3c		lda #$3c			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 6d 11	jsr $116d		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 6b 17	jsr $176b		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 ab 38	jsr $38ab		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.102d					AssembleOneInstruction:
>102d	db						.byte 	$DB
.102e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.102f					AssembleLabel:
>102f	db						.byte 	$DB
.1030	ea		nop				nop
.1031	60		rts				rts

;******  Return to file: assembler/assembler.asm

.1032					assemblerHandler:
.1032	7c 35 10	jmp ($1035,x)			jmp 	(assemblerVectors,x)
.1035					assemblerVectors:
>1035	2d 10					.word AssembleOneInstruction ; index 0
>1037	2f 10					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.1039					section_end_assembler:
.1039					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.1039					X16Break:
.1039	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.103c	f0 01		beq $103f			beq 	_IsBreak
.103e	60		rts				rts
.103f					_IsBreak:
.103f	a2 20		ldx #$20			ldx 	#ErrorID_Break
.1041	20 8e 11	jsr $118e		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1044					ExternSave:
.1044	98		tya				tya
.1045	48		pha				pha
.1046	20 94 10	jsr $1094			jsr 	ExternGetLength 			; get length of file into A name YX
.1049	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.104c	a9 01		lda #$01			lda 	#1
.104e	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1050	a0 00		ldy #$00			ldy 	#0
.1052	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1055	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.1057	85 2a		sta $2a				sta 	temp0
.1059	a5 51		lda $51				lda 	esInt1+1
.105b	85 2b		sta $2b				sta 	temp0+1
.105d	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.105f	a4 52		ldy $52				ldy 	esInt1+2
.1061	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.1063	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.1066	b0 03		bcs $106b			bcs 	_ESSave
.1068	68		pla				pla
.1069	a8		tay				tay
.106a	60		rts				rts
.106b					_ESSave:
.106b	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.106d	20 8e 11	jsr $118e		jsr	errorHandler
.1070					ExternLoad:
.1070	98		tya				tya
.1071	48		pha				pha
.1072	20 94 10	jsr $1094			jsr 	ExternGetLength 			; get length of file into A name YX
.1075	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1078	a9 01		lda #$01			lda 	#1
.107a	a2 08		ldx #$08			ldx 	#8	 						; device #8
.107c	a0 00		ldy #$00			ldy 	#0
.107e	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1081	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.1083	a4 51		ldy $51				ldy 	esInt1+1
.1085	a9 00		lda #$00			lda 	#0 							; load command
.1087	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.108a	b0 03		bcs $108f			bcs 	_ESLoad
.108c	68		pla				pla
.108d	a8		tay				tay
.108e	60		rts				rts
.108f					_ESLoad:
.108f	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.1091	20 8e 11	jsr $118e		jsr	errorHandler
.1094					ExternGetLength:
.1094	a5 48		lda $48				lda 	esInt0 						; length into A.
.1096	85 2a		sta $2a				sta 	temp0
.1098	a5 50		lda $50				lda 	esInt1
.109a	85 2b		sta $2b				sta 	temp0+1
.109c	a0 00		ldy #$00			ldy 	#0
.109e	b1 2a		lda ($2a),y			lda 	(temp0),y
.10a0	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.10a2	a4 50		ldy $50				ldy 	esInt1
.10a4	e8		inx				inx 								; advance over the length pointer.
.10a5	d0 01		bne $10a8			bne 	_ESNoCarry
.10a7	c8		iny				iny
.10a8					_ESNoCarry:
.10a8	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af2					bufferCount:
>0af2							.fill 	0
.0af2					bufferStorage:
>0af2							.fill 	MaxLineInputSize
.10a9					IOInitialise:
.10a9	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.10ab	20 d4 10	jsr $10d4			jsr 	IOPrintChar
.10ae	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.10b0	20 00 11	jsr $1100			jsr 	IOInk
.10b3	a9 00		lda #$00			lda 	#0
.10b5	20 14 11	jsr $1114			jsr 	IOPaper
.10b8	20 bc 10	jsr $10bc			jsr 	IOClearScreen
.10bb	60		rts				rts
.10bc					IOClearScreen:
.10bc	48		pha				pha
.10bd	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.10bf	20 d4 10	jsr $10d4			jsr 	IOPrintChar
.10c2	68		pla				pla
.10c3	60		rts				rts
.10c4					IONewLine:
.10c4	48		pha				pha
.10c5	a9 0d		lda #$0d			lda 	#13
.10c7	20 d4 10	jsr $10d4			jsr 	IOPrintChar
.10ca	68		pla				pla
.10cb	60		rts				rts
.10cc					IOTab:
.10cc	48		pha				pha
.10cd	a9 20		lda #$20			lda 	#32
.10cf	20 d4 10	jsr $10d4			jsr 	IOPrintChar
.10d2	68		pla				pla
.10d3	60		rts				rts
.10d4					IOPrintAscii:
.10d4					IOPrintChar:
.10d4	aa		tax				tax 								; save in X so we can save Y
.10d5	5a		phy				phy
.10d6	8a		txa				txa
.10d7	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.10d9	d0 02		bne $10dd			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.10db	a9 14		lda #$14			lda 	#$14
.10dd					_IOPCNotBS:
.10dd	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.10e0	7a		ply				ply
.10e1	60		rts				rts
.10e2					IOInkey:
.10e2	98		tya				tya
.10e3	48		pha				pha
.10e4	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.10e7	85 32		sta $32				sta 	tempShort
.10e9	68		pla				pla
.10ea	a8		tay				tay
.10eb	a5 32		lda $32				lda 	tempShort					; no key pressed.
.10ed	f0 10		beq $10ff			beq 	_IOIExit
.10ef	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.10f1	f0 0c		beq $10ff			beq 	_IOIExit
.10f3	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.10f5	f0 06		beq $10fd			beq 	_IOIBackspace
.10f7	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.10f9	90 e7		bcc $10e2			bcc 	IOInkey
.10fb	b0 02		bcs $10ff			bcs 	_IOIExit
.10fd					_IOIBackspace:
.10fd	a9 08		lda #$08			lda 	#8 							; return chr(8)
.10ff					_IOIExit:
.10ff	60		rts				rts
.1100					IOInk:
.1100	48		pha				pha
.1101	29 07		and #$07			and 	#7 							; 8 primaries
.1103	aa		tax				tax
.1104	bd 0c 11	lda $110c,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1107	20 d4 10	jsr $10d4			jsr 	IOPrintChar
.110a	68		pla				pla
.110b	60		rts				rts
.110c					_IOColourTable:
>110c	90						.byte 	$90 					; 0 Black
>110d	96						.byte 	$96 					; 1 Red
>110e	1e						.byte 	$1E 					; 2 Green
>110f	9e						.byte 	$9E 					; 3 Yellow
>1110	9a						.byte 	$9A 					; 4 Blue
>1111	9c						.byte 	$9C 					; 5 Magenta
>1112	9f						.byte 	$9F 					; 6 Cyan
>1113	05						.byte 	$05 					; 7 White
.1114					IOPaper:
.1114	48		pha				pha
.1115	48		pha				pha
.1116	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.1118	20 d4 10	jsr $10d4			jsr 	IOPrintChar 			; and then swap them again.
.111b	68		pla				pla
.111c	20 00 11	jsr $1100			jsr 	IOInk
.111f	a9 01		lda #$01			lda 	#1
.1121	20 d4 10	jsr $10d4			jsr 	IOPrintChar
.1124	68		pla				pla
.1125	60		rts				rts
.1126					IOLocate:
.1126	48		pha				pha
.1127	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1129	20 d4 10	jsr $10d4			jsr 	IOPrintChar
.112c	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.112e	20 35 11	jsr $1135			jsr 	_IOLoc2
.1131	68		pla				pla
.1132	a8		tay				tay
.1133	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1135					_IOLoc2:
.1135	c0 00		cpy #$00			cpy 	#0
.1137	f0 06		beq $113f			beq 	_IOLocExit
.1139	20 d4 10	jsr $10d4			jsr 	IOPrintChar
.113c	88		dey				dey
.113d	d0 f6		bne $1135			bne 	_IOLoc2
.113f					_IOLocExit:
.113f	60		rts				rts
.1140					IOInput:
.1140	a9 00		lda #$00			lda 	#0
.1142	8d f2 0a	sta $0af2			sta 	bufferCount
.1145					_IOILoop:
.1145	20 cf ff	jsr $ffcf			jsr 	$FFCF
.1148	c9 0d		cmp #$0d			cmp 	#13
.114a	f0 10		beq $115c			beq 	_IOIExit
.114c	ae f2 0a	ldx $0af2			ldx 	bufferCount
.114f	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.1151	f0 f2		beq $1145			beq 	_IOILoop
.1153	ee f2 0a	inc $0af2			inc 	bufferCount
.1156	9d f3 0a	sta $0af3,x			sta 	bufferStorage+1,x
.1159	4c 45 11	jmp $1145			jmp 	_IOILoop
.115c					_IOIExit:
.115c	a9 f2		lda #$f2			lda 	#(bufferCount) & $FF
.115e	85 2a		sta $2a				sta 	temp0
.1160	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.1162	85 2b		sta $2b				sta 	1+(temp0)
.1164	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.1165					IOReadTimer:
.1165	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.1168	48		pha				pha
.1169	8a		txa				txa
.116a	a8		tay				tay
.116b	68		pla				pla
.116c	60		rts				rts

;******  Return to file: device/device.asm

.116d					deviceHandler:
.116d	7c 70 11	jmp ($1170,x)			jmp 	(deviceVectors,x)
.1170					deviceVectors:
>1170	39 10					.word X16Break             ; index 0
>1172	bc 10					.word IOClearScreen        ; index 2
>1174	c4 10					.word IONewLine            ; index 4
>1176	a9 10					.word IOInitialise         ; index 6
>1178	00 11					.word IOInk                ; index 8
>117a	e2 10					.word IOInkey              ; index 10
>117c	40 11					.word IOInput              ; index 12
>117e	70 10					.word ExternLoad           ; index 14
>1180	26 11					.word IOLocate             ; index 16
>1182	14 11					.word IOPaper              ; index 18
>1184	d4 10					.word IOPrintChar          ; index 20
>1186	d4 10					.word IOPrintAscii         ; index 22
>1188	44 10					.word ExternSave           ; index 24
>118a	cc 10					.word IOTab                ; index 26
>118c	65 11					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.118e					section_end_device:
.118e					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.118e					ErrorHandler:
.118e	8a		txa				txa
.118f	48		pha				pha
.1190	a9 01		lda #$01			lda 	#1 							; red
.1192	a2 08		ldx #$08		ldx	#8
.1194	20 6d 11	jsr $116d		jsr	deviceHandler
.1197	68		pla				pla
.1198	aa		tax				tax
.1199	a9 04		lda #$04			lda 	#(ErrorTextList) & $FF
.119b	85 2a		sta $2a				sta 	temp0
.119d	a9 12		lda #$12			lda 	#(ErrorTextList) >> 8
.119f	85 2b		sta $2b				sta 	1+(temp0)
.11a1	ca		dex		_EHFind:dex									; errors start at 1
.11a2	f0 10		beq $11b4			beq 	_EHFound
.11a4	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.11a6	38		sec				sec
.11a7	a5 2a		lda $2a				lda 	temp0
.11a9	71 2a		adc ($2a),y			adc 	(temp0),y
.11ab	85 2a		sta $2a				sta 	temp0
.11ad	90 f2		bcc $11a1			bcc 	_EHFind
.11af	e6 2b		inc $2b				inc 	temp0+1
.11b1	4c a1 11	jmp $11a1			jmp 	_EHFind
.11b4					_EHFound:
.11b4	20 55 14	jsr $1455			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.11b7	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.11b9	b1 28		lda ($28),y			lda 	(codePtr),y
.11bb	f0 39		beq $11f6			beq 	_EHNoLine
.11bd	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.11bf	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.11c2	90 32		bcc $11f6			bcc 	_EHNoLine
.11c4	a9 00		lda #$00			lda 	#(EHAtMsg) & $FF
.11c6	85 2a		sta $2a				sta 	temp0
.11c8	a9 12		lda #$12			lda 	#(EHAtMsg) >> 8
.11ca	85 2b		sta $2b				sta 	1+(temp0)
.11cc	20 55 14	jsr $1455			jsr 	EHPrintAscii
.11cf	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.11d1	a2 00		ldx #$00			ldx 	#0
.11d3	b1 28		lda ($28),y			lda 	(codePtr),y
.11d5	95 48		sta $48,x			sta 	esInt0,x
.11d7	c8		iny				iny
.11d8	b1 28		lda ($28),y			lda 	(codePtr),y
.11da	95 50		sta $50,x			sta 	esInt1,x
.11dc	a9 00		lda #$00			lda 	#0
.11de	95 58		sta $58,x			sta 	esInt2,x
.11e0	95 60		sta $60,x			sta 	esInt3,x
.11e2	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.11e4	85 2a		sta $2a				sta 	temp0
.11e6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11e8	85 2b		sta $2b				sta 	1+(temp0)
.11ea	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.11ec	a9 00		lda #$00			lda 	#0							; stack position zero.
.11ee	a2 0c		ldx #$0c		ldx	#12
.11f0	20 f8 2d	jsr $2df8		jsr	mainHandler
.11f3	20 55 14	jsr $1455			jsr 	EHPrintAscii
.11f6					_EHNoLine:
.11f6	a2 04		ldx #$04		ldx	#4
.11f8	20 6d 11	jsr $116d		jsr	deviceHandler
.11fb	a2 02		ldx #$02		ldx	#2
.11fd	20 6b 17	jsr $176b		jsr	interactionHandler
.1200					EHAtMsg:
>1200	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.1204					ErrorTextList:
>1204	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>120c	20 6e 6f 74 20 50 72 65 73 65 6e 74
>1218	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1220	45 72 72 6f 72
>1225	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>122d	64 69 73 61 62 6c 65 64
>1235	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>123d	6f 6e 20 66 61 69 6c 65 64
>1246	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>124e	42 79 20 5a 65 72 6f
>1255	04 53 74 6f 70				.text 4,"Stop"
>125a	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>1262	73 6d 61 74 63 68
>1268	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1270	20 56 61 6c 75 65
>1276	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>127e	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>128c	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>1294	20 63 6f 6d 6d 61
>129a	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>12a2	20 72 65 66 65 72 65 6e 63 65
>12ac	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>12b4	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>12c2	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>12ca	74 6f 6f 20 6c 6f 6e 67
>12d2	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>12da	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>12e7	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>12ef	69 74 68 6f 75 74 20 52 45 50 45 41 54
>12fc	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1304	74 68 6f 75 74 20 46 4f 52
>130d	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1315	74 68 6f 75 74 20 57 48 49 4c 45
>1320	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>1328	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1335	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>133d	54 20 69 6e 64 65 78
>1344	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>134c	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>135c	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>1364	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>1373	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>137b	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>138b	63 65
>138d	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>1395	20 50 72 6f 63 65 64 75 72 65
>139f	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>13a7	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>13b7	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>13bf	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>13cd	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>13d5	75 69 72 65 73 20 61 72 72 61 79
>13e0	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>13e8	61 79 20 69 6e 64 65 78
>13f0	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>13f8	64 61 74 61
>13fc	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>1404	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1411	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1419	69 6c 65 64
>141d	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1425	69 6c 65 64
>1429	05 42 72 65 61 6b			.text 5,"Break"
>142f	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>1437	6d 65 6d 6f 72 79
>143d	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>1445	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>1454	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1455					EHPrintAscii:
.1455	a0 00		ldy #$00			ldy 	#0
.1457	b1 2a		lda ($2a),y			lda 	(temp0),y
.1459	aa		tax				tax
.145a	f0 0f		beq $146b			beq 	_EHPExit
.145c					_EHPLoop:
.145c	c8		iny				iny
.145d	8a		txa				txa
.145e	48		pha				pha
.145f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1461	a2 16		ldx #$16		ldx	#22
.1463	20 6d 11	jsr $116d		jsr	deviceHandler
.1466	68		pla				pla
.1467	aa		tax				tax
.1468	ca		dex				dex
.1469	d0 f1		bne $145c			bne 	_EHPLoop
.146b					_EHPExit:
.146b	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.146c					section_end_error:
.146c					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.146c					ExtensionHandler:
.146c	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.146e	d0 08		bne $1478			bne 	_ExtensionUnary 			; is passed in A.
.1470	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1472	c8		iny				iny
.1473	0a		asl a				asl 	a
.1474	aa		tax				tax
.1475	7c 76 14	jmp ($1476,x)			jmp 	(Group2Vectors-12,x)
.1478					_ExtensionUnary:
.1478	48		pha				pha 								; save stack pos in A
.1479	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.147b	c8		iny				iny
.147c	0a		asl a				asl 	a
.147d	aa		tax				tax
.147e	68		pla				pla 								; restore stack pos and call group3 command.
.147f	7c 7c 14	jmp ($147c,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1482					Group2Vectors:
>1482	b7 14					.word	Command_VPoke            ; $86 vpoke
>1484	ba 14					.word	Command_VDoke            ; $87 vdoke
>1486	94 14					.word	Command_VLoad            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1488					Group3Vectors:
>1488	fb 14					.word	Command_VPeek            ; $86 vpeek(
>148a	fe 14					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.148c					XEvaluateInteger:
.148c	8a		txa				txa
.148d	a2 06		ldx #$06		ldx	#6
.148f	20 f8 2d	jsr $2df8		jsr	mainHandler
.1492	aa		tax				tax
.1493	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.1494					Command_VLoad:
.1494	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.1496	20 f2 26	jsr $26f2			jsr 	EvaluateString
.1499	e8		inx				inx
.149a	20 8e 2c	jsr $2c8e			jsr 	MInt32False
.149d	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.149f	95 48		sta $48,x			sta 	esInt0,x
.14a1	a5 36		lda $36				lda 	lowMemory+1
.14a3	95 50		sta $50,x			sta 	esInt1,x
.14a5	ca		dex				dex
.14a6	a2 0e		ldx #$0e		ldx	#14
.14a8	20 6d 11	jsr $116d		jsr	deviceHandler
.14ab	a5 49		lda $49				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.14ad	85 2a		sta $2a				sta 	temp0
.14af	a5 51		lda $51				lda 	esInt1+1
.14b1	85 2b		sta $2b				sta 	temp0+1
.14b3	20 1c 15	jsr $151c			jsr 	LoadVRAMFile 					; load the VRAM file in.
.14b6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.14b7					Command_VPoke:
.14b7	38		sec				sec 						; one byte , CS
.14b8	b0 01		bcs $14bb			bcs 	CmdVideoWrite
.14ba					Command_VDoke:
.14ba	18		clc				clc 						; two bytes, CC
.14bb					CmdVideoWrite:
.14bb	08		php				php 						; save one or two btes
.14bc	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.14be	20 8c 14	jsr $148c			jsr 	XEvaluateInteger
.14c1	20 0e 2d	jsr $2d0e			jsr 	CheckComma
.14c4	e8		inx				inx
.14c5	20 8c 14	jsr $148c			jsr 	XEvaluateInteger
.14c8	ca		dex				dex
.14c9	20 da 14	jsr $14da			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.14cc	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.14ce	8d 23 9f	sta $9f23			sta 	$9F23
.14d1	28		plp				plp 						; if it was Poke then exit
.14d2	b0 05		bcs $14d9			bcs 	_CVWExit
.14d4	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.14d6	8d 23 9f	sta $9f23			sta 	$9F23
.14d9					_CVWExit:
.14d9	60		rts				rts
.14da					SetUpTOSVRamAddress:
.14da	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.14dc	29 01		and #$01			and 	#1
.14de	15 60		ora $60,x			ora 	esInt3,x
.14e0	d0 14		bne $14f6			bne 	CVWValue
.14e2	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.14e4	8d 20 9f	sta $9f20			sta 	$9F20
.14e7	b5 50		lda $50,x			lda 	esInt1,x
.14e9	8d 21 9f	sta $9f21			sta	 	$9F21
.14ec	b5 58		lda $58,x			lda 	esInt2,x
.14ee	29 01		and #$01			and 	#1
.14f0	09 10		ora #$10			ora 	#$10 				; step 1.
.14f2	8d 22 9f	sta $9f22			sta 	$9F22
.14f5	60		rts				rts
.14f6					CVWValue:
.14f6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.14f8	20 8e 11	jsr $118e		jsr	errorHandler
.14fb					Command_VPeek:
.14fb	38		sec				sec 						; one byte , CS
.14fc	b0 01		bcs $14ff			bcs 	CmdVideoRead
.14fe					Command_VDeek:
.14fe	18		clc				clc 						; two bytes, CC
.14ff					CmdVideoRead:
.14ff	08		php				php 						; save action on stack.
.1500	aa		tax				tax 						; save stack position
.1501	20 8c 14	jsr $148c			jsr 	XEvaluateInteger 	; address
.1504	20 01 2d	jsr $2d01			jsr 	CheckRightParen 	; closing right bracket.
.1507	20 da 14	jsr $14da			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.150a	20 8e 2c	jsr $2c8e			jsr 	MInt32False 		; zero return.
.150d	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1510	95 48		sta $48,x			sta 	esInt0,x
.1512	28		plp				plp 						; check if DOKE (carry was clear)
.1513	b0 05		bcs $151a			bcs 	_CVRExit
.1515	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1518	95 50		sta $50,x			sta 	esInt1,x
.151a					_CVRExit:
.151a	8a		txa				txa 						; return X position.
.151b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0be2					compressMode:
>0be2							.fill 	1
.151c					LoadVRAMFile:
.151c	a9 00		lda #$00			lda 	#0 							; defaults
.151e	8d 20 9f	sta $9f20			sta 	$9F20
.1521	8d 21 9f	sta $9f21			sta 	$9F21
.1524	8d e2 0b	sta $0be2			sta 	compressMode
.1527	a9 10		lda #$10			lda 	#$10
.1529	8d 22 9f	sta $9f22			sta 	$9F22
.152c					_LVRLoop:
.152c	20 7c 15	jsr $157c			jsr 	LVFGet 						; get the next (never access direct)
.152f	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1531	f0 3a		beq $156d			beq 	_LVRExit
.1533	b0 39		bcs $156e			bcs 	_LVRLoad 					; load data in ?
.1535	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1537	90 09		bcc $1542			bcc 	_LVRSetAddress
.1539	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.153b	90 29		bcc $1566			bcc 	_LVRSetCompress
.153d	a2 01		ldx #$01			ldx 	#ErrorID_missing
.153f	20 8e 11	jsr $118e		jsr	errorHandler
.1542					_LVRSetAddress:
.1542	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1544	20 7c 15	jsr $157c			jsr 	LVFGet
.1547	85 2c		sta $2c				sta 	temp1
.1549	a9 00		lda #$00			lda 	#0
.154b	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.154d	66 2c		ror $2c				ror 	temp1
.154f	6a		ror a				ror		a
.1550	46 2d		lsr $2d				lsr 	temp1+1
.1552	66 2c		ror $2c				ror 	temp1
.1554	6a		ror a				ror		a
.1555	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1558	a5 2c		lda $2c				lda 	temp1
.155a	8d 21 9f	sta $9f21			sta 	$9F21
.155d	a5 2d		lda $2d				lda 	temp1+1
.155f	09 10		ora #$10			ora 	#$10
.1561	8d 22 9f	sta $9f22			sta 	$9F22
.1564	d0 c6		bne $152c			bne 	_LVRLoop
.1566					_LVRSetCompress:
.1566	29 07		and #$07			and 	#7
.1568	8d e2 0b	sta $0be2			sta 	compressMode
.156b	10 bf		bpl $152c			bpl 	_LVRLoop
.156d					_LVRExit:
.156d	60		rts				rts
.156e					_LVRLoad:
.156e	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1570	aa		tax				tax
.1571					_LVRLCopy:
.1571	20 7c 15	jsr $157c			jsr 	LVFGet 						; write to data.
.1574	8d 23 9f	sta $9f23			sta 	$9F23
.1577	ca		dex				dex
.1578	d0 f7		bne $1571			bne 	_LVRLCopy
.157a	f0 b0		beq $152c			beq 	_LVRLoop
.157c	84 32		sty $32		LVFGet:	sty 	tempShort
.157e	a0 00		ldy #$00			ldy 	#0
.1580	b1 2a		lda ($2a),y			lda 	(temp0),y
.1582	a4 32		ldy $32				ldy	 	tempShort
.1584	e6 2a		inc $2a				inc 	temp0
.1586	d0 02		bne $158a			bne 	_LVFGExit
.1588	e6 2b		inc $2b				inc 	temp0+1
.158a					_LVFGExit:
.158a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.158b					section_end_extension:
.158b					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.158b					floatingpointHandler:
.158b	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.158d	20 8e 11	jsr $118e		jsr	errorHandler

;******  Return to file: basic.asm

.1590					section_end_floatingpoint:
.1590					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1590					ColdStartEntry:
.1590	a2 ff		ldx #$ff			ldx 	#$FF
.1592	9a		txs				txs
.1593	a2 02		ldx #$02		ldx	#2
.1595	20 6d 11	jsr $116d		jsr	deviceHandler
.1598	a0 ff		ldy #$ff			ldy 	#255
.159a					_CSBanner:
.159a	c8		iny				iny
.159b	b9 c1 15	lda $15c1,y			lda 	Intro,y
.159e	f0 14		beq $15b4			beq 	_CSStart
.15a0	c9 08		cmp #$08			cmp 	#8
.15a2	90 08		bcc $15ac			bcc 	_CSInk
.15a4	a2 16		ldx #$16		ldx	#22
.15a6	20 6d 11	jsr $116d		jsr	deviceHandler
.15a9	4c 9a 15	jmp $159a			jmp 	_CSBanner
.15ac					_CSInk:
.15ac	a2 08		ldx #$08		ldx	#8
.15ae	20 6d 11	jsr $116d		jsr	deviceHandler
.15b1	4c 9a 15	jmp $159a			jmp 	_CSBanner
.15b4					_CSStart:
.15b4	a2 10		ldx #$10		ldx	#16
.15b6	20 f8 2d	jsr $2df8		jsr	mainHandler
.15b9	a2 02		ldx #$02		ldx	#2
.15bb	20 f8 2d	jsr $2df8		jsr	mainHandler
.15be	4c d5 16	jmp $16d5			jmp 	WarmStartEntry
>15c1	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>15c9	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>15d9	20 2a 2a 2a 0d 0d
>15df	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>15e7	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>15f7	32 30 32 31 0d 0d
>15fd	02 42 61 73 69 63 20				.text 	2,"Basic "
>1604	30 2e 31 35					.text "0.15"
>1608	20 28						.text 	" ("
>160a	31 33 2d 4d 61 72 2d 32				.text "13-Mar-21"
>1612	31
>1613	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1617					DeleteLine:
.1617	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.161a	85 2a		sta $2a				sta 	temp0
.161c	ad c9 0a	lda $0ac9			lda 	basePage+1
.161f	85 2b		sta $2b				sta 	temp0+1
.1621	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1623	a5 48		lda $48				lda 	esInt0
.1625	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1627	d0 07		bne $1630			bne 	_DLNext
.1629	c8		iny				iny
.162a	a5 50		lda $50				lda 	esInt1
.162c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.162e	f0 0a		beq $163a			beq 	_DLFound
.1630	20 58 16	jsr $1658	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1633	d0 ec		bne $1621			bne 	_DLLoop
.1635	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.1637	b1 2a		lda ($2a),y			lda 	(temp0),y
.1639	60		rts				rts
.163a					_DLFound:
.163a	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.163c	b1 2a		lda ($2a),y			lda 	(temp0),y
.163e	a8		tay				tay
.163f	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1641					_DLCopyDown:
.1641	b1 2a		lda ($2a),y			lda 	(temp0),y
.1643	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1645	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1647	d0 02		bne $164b			bne 	_DLNoCarry
.1649	e6 2b		inc $2b				inc 	temp0+1
.164b					_DLNoCarry:
.164b	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.164d	c5 35		cmp $35				cmp 	lowMemory
.164f	d0 f0		bne $1641			bne 	_DLCopyDown
.1651	a5 2b		lda $2b				lda 	temp0+1
.1653	c5 36		cmp $36				cmp 	lowMemory+1
.1655	d0 ea		bne $1641			bne 	_DLCopyDown
.1657	60		rts				rts
.1658					IAdvanceTemp0:
.1658	84 32		sty $32				sty 	tempShort
.165a	18		clc				clc
.165b	a0 00		ldy #$00			ldy 	#0
.165d	b1 2a		lda ($2a),y			lda 	(temp0),y
.165f	65 2a		adc $2a				adc 	temp0
.1661	85 2a		sta $2a				sta 	temp0
.1663	90 02		bcc $1667			bcc 	_IATNoCarry
.1665	e6 2b		inc $2b				inc 	temp0+1
.1667					_IATNoCarry:
.1667	b1 2a		lda ($2a),y			lda 	(temp0),y
.1669	a4 32		ldy $32				ldy 	tempShort
.166b	c9 00		cmp #$00			cmp		#0
.166d	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.166e					InsertLine:
.166e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1671	85 2a		sta $2a				sta 	temp0
.1673	ad c9 0a	lda $0ac9			lda 	basePage+1
.1676	85 2b		sta $2b				sta 	temp0+1
.1678					_ILLoop:
.1678	a0 01		ldy #$01			ldy 	#1
.167a	b1 2a		lda ($2a),y			lda 	(temp0),y
.167c	c5 48		cmp $48				cmp 	esInt0
.167e	c8		iny				iny
.167f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1681	e5 50		sbc $50				sbc 	esInt1
.1683	b0 05		bcs $168a			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1685	20 58 16	jsr $1658			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1688	d0 ee		bne $1678			bne 	_ILLoop
.168a					_ILFound:
.168a	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.168c	85 2c		sta $2c				sta 	temp1
.168e	a5 36		lda $36				lda 	lowMemory+1
.1690	85 2d		sta $2d				sta 	temp1+1
.1692	ad 20 0d	lda $0d20			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1695	18		clc				clc
.1696	69 03		adc #$03			adc 	#3
.1698	a8		tay				tay
.1699	a2 00		ldx #$00			ldx 	#0
.169b	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.169d	91 2c		sta ($2c),y			sta 	(temp1),y
.169f	a5 2c		lda $2c				lda 	temp1
.16a1	c5 2a		cmp $2a				cmp 	temp0
.16a3	d0 06		bne $16ab			bne 	_ILMNext
.16a5	a5 2d		lda $2d				lda 	temp1+1
.16a7	c5 2b		cmp $2b				cmp 	temp0+1
.16a9	f0 0b		beq $16b6			beq 	_ILMCopy
.16ab					_ILMNext:
.16ab	a5 2c		lda $2c				lda 	temp1
.16ad	d0 02		bne $16b1			bne 	_ILNoBorrow
.16af	c6 2d		dec $2d				dec 	temp1+1
.16b1					_ILNoBorrow:
.16b1	c6 2c		dec $2c				dec 	temp1
.16b3	4c 9b 16	jmp $169b			jmp 	_ILMove
.16b6					_ILMCopy:
.16b6	98		tya				tya 								; Y is the offset of the new line.
.16b7	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.16b9	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.16bb	a5 48		lda $48				lda 	esInt0
.16bd	91 2a		sta ($2a),y			sta 	(temp0),y
.16bf	c8		iny				iny
.16c0	a5 50		lda $50				lda 	esInt1
.16c2	91 2a		sta ($2a),y			sta 	(temp0),y
.16c4	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.16c6					_ILMCopy2:
.16c6	b1 28		lda ($28),y			lda 	(codePtr),y
.16c8	c8		iny				iny
.16c9	c8		iny				iny
.16ca	c8		iny				iny
.16cb	91 2a		sta ($2a),y			sta 	(temp0),y
.16cd	88		dey				dey
.16ce	88		dey				dey
.16cf	cc 20 0d	cpy $0d20			cpy 	tokenBufferIndex
.16d2	d0 f2		bne $16c6			bne 	_ILMCopy2
.16d4	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.16d5					WarmStartEntry:
.16d5	a2 ff		ldx #$ff			ldx 	#$FF
.16d7	9a		txs				txs
.16d8	a9 02		lda #$02			lda 	#2							; green text.
.16da	a2 08		ldx #$08		ldx	#8
.16dc	20 6d 11	jsr $116d		jsr	deviceHandler
.16df	a2 0c		ldx #$0c		ldx	#12
.16e1	20 6d 11	jsr $116d		jsr	deviceHandler
.16e4	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.16e6	85 28		sta $28				sta 	codePtr
.16e8	a5 2b		lda $2b				lda 	temp0+1
.16ea	85 29		sta $29				sta 	codePtr+1
.16ec	a2 04		ldx #$04		ldx	#4
.16ee	20 6d 11	jsr $116d		jsr	deviceHandler
.16f1	a2 06		ldx #$06		ldx	#6
.16f3	20 ab 38	jsr $38ab		jsr	tokeniserHandler
.16f6	90 25		bcc $171d			bcc 	WSEError 					; failed.
.16f8	a9 1d		lda #$1d			lda 	#(tokenHeader) & $FF
.16fa	85 28		sta $28				sta 	codePtr
.16fc	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.16fe	85 29		sta $29				sta 	1+(codePtr)
.1700	ad 20 0c	lda $0c20			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1703	c9 80		cmp #$80			cmp 	#$80
.1705	f0 ce		beq $16d5			beq 	WarmStartEntry
.1707	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1709	c9 40		cmp #$40			cmp 	#$40
.170b	f0 15		beq $1722			beq 	HasLineNumber
.170d	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.170f	8d 1d 0c	sta $0c1d			sta 	tokenHeader 				; fake program line.
.1712	8d 1e 0c	sta $0c1e			sta 	tokenHeader+1
.1715	8d 1f 0c	sta $0c1f			sta 	tokenHeader+2
.1718	a2 12		ldx #$12		ldx	#18
.171a	20 f8 2d	jsr $2df8		jsr	mainHandler
.171d					WSEError:
.171d	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.171f	20 8e 11	jsr $118e		jsr	errorHandler
.1722					HasLineNumber:
.1722	a0 03		ldy #$03			ldy 	#3 							; get line number
.1724	a9 00		lda #$00			lda 	#0
.1726	a2 06		ldx #$06		ldx	#6
.1728	20 f8 2d	jsr $2df8		jsr	mainHandler
.172b	a5 58		lda $58				lda 	esInt2		 				; check in range.
.172d	05 60		ora $60				ora 	esInt3
.172f	d0 ec		bne $171d			bne 	WSEError
.1731	98		tya				tya 								; make codePtr point to code after the line number.
.1732	18		clc				clc
.1733	65 28		adc $28				adc 	codePtr
.1735	85 28		sta $28				sta 	codePtr
.1737	90 02		bcc $173b			bcc		_HLNNoCarry
.1739	e6 29		inc $29				inc 	codePtr+1
.173b					_HLNNoCarry:
.173b	98		tya				tya 								; subtract that offset from the code buffer index
.173c	38		sec				sec
.173d	49 ff		eor #$ff			eor 	#$FF
.173f	6d 20 0d	adc $0d20			adc 	tokenBufferIndex
.1742	18		clc				clc 								; add space allowing for header & $80 trailer
.1743	69 04		adc #$04			adc 	#4
.1745	8d 20 0d	sta $0d20			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1748	20 17 16	jsr $1617			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.174b					_HLNNoDelete:
.174b	ad 20 0d	lda $0d20			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.174e	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1750	f0 0c		beq $175e			beq 	_HLMEditDone
.1752	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1754	18		clc				clc 								; workspace (1k)
.1755	69 04		adc #$04			adc 	#4
.1757	c5 34		cmp $34				cmp 	highMemory+1
.1759	b0 0b		bcs $1766			bcs 	_HLMMemory
.175b	20 6e 16	jsr $166e			jsr 	InsertLine 					; insert the line in
.175e					_HLMEditDone:
.175e	a2 02		ldx #$02		ldx	#2
.1760	20 f8 2d	jsr $2df8		jsr	mainHandler
.1763	4c d5 16	jmp $16d5			jmp 	WarmStartEntry
.1766					_HLMMemory:
.1766	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.1768	20 8e 11	jsr $118e		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.176b					interactionHandler:
.176b	7c 6e 17	jmp ($176e,x)			jmp 	(interactionVectors,x)
.176e					interactionVectors:
>176e	90 15					.word ColdStartEntry       ; index 0
>1770	d5 16					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1772					section_end_interaction:
.1772					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1772					Command_Assert:
.1772	20 fb 26	jsr $26fb			jsr 	EvaluateRootInteger 		; what is being asserted.
.1775	20 b5 2c	jsr $2cb5			jsr 	MInt32Zero 					; is it true ?
.1778	f0 01		beq $177b			beq 	_CAError
.177a	60		rts				rts
.177b					_CAError:
.177b	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.177d	20 8e 11	jsr $118e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1780					CommandClear:
.1780					XCommandClear:
.1780	98		tya				tya
.1781	48		pha				pha
.1782	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.1785	85 33		sta $33				sta 	highMemory
.1787	ad cd 0a	lda $0acd			lda 	endMemory+1
.178a	85 34		sta $34				sta 	highMemory+1
.178c	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.178f	85 2a		sta $2a				sta 	temp0
.1791	ad c9 0a	lda $0ac9			lda 	basePage+1
.1794	85 2b		sta $2b				sta 	temp0+1
.1796					_CCFindEnd:
.1796	a0 00		ldy #$00			ldy 	#0
.1798	b1 2a		lda ($2a),y			lda 	(temp0),y
.179a	f0 0c		beq $17a8			beq 	_CCFoundEnd 				; offset zero is end.
.179c	18		clc				clc
.179d	65 2a		adc $2a				adc 	temp0 						; move to next line
.179f	85 2a		sta $2a				sta 	temp0
.17a1	90 f3		bcc $1796			bcc 	_CCFindEnd
.17a3	e6 2b		inc $2b				inc 	temp0+1
.17a5	4c 96 17	jmp $1796			jmp 	_CCFindEnd
.17a8					_CCFoundEnd:
.17a8	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.17aa	85 35		sta $35				sta 	lowMemory
.17ac	a5 2b		lda $2b				lda 	temp0+1
.17ae	85 36		sta $36				sta 	lowMemory+1
.17b0	18		clc				clc 								; put temp0+1 in endProgram
.17b1	a5 2a		lda $2a				lda 	temp0
.17b3	69 01		adc #$01			adc 	#1
.17b5	8d ca 0a	sta $0aca			sta 	endProgram
.17b8	a5 2b		lda $2b				lda 	temp0+1
.17ba	69 00		adc #$00			adc 	#0
.17bc	8d cb 0a	sta $0acb			sta 	endProgram+1
.17bf	18		clc				clc 								; put a bit of space in.
.17c0	a5 35		lda $35				lda 	lowMemory
.17c2	69 04		adc #$04			adc 	#4
.17c4	85 35		sta $35				sta 	lowMemory
.17c6	90 02		bcc $17ca			bcc 	_CCNoCarry
.17c8	e6 36		inc $36				inc 	lowMemory+1
.17ca					_CCNoCarry:
.17ca	20 97 2d	jsr $2d97			jsr 	RSReset 					; reset the return stack.
.17cd	a2 04		ldx #$04		ldx	#4
.17cf	20 ba 3b	jsr $3bba		jsr	variableHandler
.17d2	20 a8 20	jsr $20a8			jsr 	ScanProc 					; scan for procedures
.17d5	20 40 1e	jsr $1e40			jsr 	CommandRestore 				; do a restore
.17d8	68		pla				pla
.17d9	a8		tay				tay
.17da	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.17db					Command_Dim:
.17db	a2 02		ldx #$02		ldx	#2
.17dd	20 ba 3b	jsr $3bba		jsr	variableHandler
.17e0	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.17e2	c8		iny				iny
.17e3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.17e5	f0 f4		beq $17db			beq 	Command_Dim
.17e7	88		dey				dey 								; unpick get
.17e8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.17e9					Command_FOR:
.17e9	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.17eb	a2 0b		ldx #$0b			ldx 	#11
.17ed	20 a5 2d	jsr $2da5			jsr 	RSClaim
.17f0	20 ea 19	jsr $19ea			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.17f3	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.17f5	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.17f7	d0 4c		bne $1845			bne 	_CFType
.17f9	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.17fb	20 f6 2c	jsr $2cf6			jsr 	CheckToken
.17fe	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1800	20 fd 26	jsr $26fd			jsr 	EvaluateInteger				; get terminal value in stack 1
.1803	98		tya				tya
.1804	48		pha				pha
.1805	a0 04		ldy #$04			ldy 	#4
.1807	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1809	91 37		sta ($37),y			sta 	(rsPointer),y
.180b	c8		iny				iny
.180c	a5 50		lda $50				lda		esInt1
.180e	91 37		sta ($37),y			sta 	(rsPointer),y
.1810	c8		iny				iny
.1811	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1813	91 37		sta ($37),y			sta 	(rsPointer),y
.1815	c8		iny				iny
.1816	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1818	91 37		sta ($37),y			sta 	(rsPointer),y
.181a	c8		iny				iny
.181b	a5 51		lda $51				lda		esInt1+1
.181d	91 37		sta ($37),y			sta 	(rsPointer),y
.181f	c8		iny				iny
.1820	a5 59		lda $59				lda		esInt2+1
.1822	91 37		sta ($37),y			sta 	(rsPointer),y
.1824	c8		iny				iny
.1825	a5 61		lda $61				lda		esInt3+1
.1827	91 37		sta ($37),y			sta 	(rsPointer),y
.1829	68		pla				pla
.182a	a8		tay				tay
.182b	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.182d	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.182f	d0 0e		bne $183f			bne 	_CFDone
.1831	c8		iny				iny									; skip over step.
.1832	20 fd 26	jsr $26fd			jsr 	EvaluateInteger 			; get step
.1835	98		tya				tya
.1836	48		pha				pha
.1837	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1839	a0 06		ldy #$06			ldy 	#6
.183b	91 37		sta ($37),y			sta 	(rsPointer),y
.183d	68		pla				pla
.183e	a8		tay				tay
.183f					_CFDone:
.183f	a9 01		lda #$01			lda 	#1
.1841	20 d1 2d	jsr $2dd1			jsr 	RSSavePosition 				; save position.
.1844	60		rts				rts
.1845					_CFType:
.1845	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1847	20 8e 11	jsr $118e		jsr	errorHandler
.184a					Command_NEXT:
.184a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.184c	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.184e	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1850	f0 05		beq $1857			beq 	_isok
.1852	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1854	20 8e 11	jsr $118e		jsr	errorHandler
.1857					_isok:
.1857	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1859	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.185b	b0 18		bcs $1875			bcs 	_CNNoIndex
.185d	a2 00		ldx #$00			ldx 	#0 							; start on stack
.185f	20 30 27	jsr $2730			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1862	98		tya				tya
.1863	48		pha				pha
.1864	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1866	b1 37		lda ($37),y			lda 	(rsPointer),y
.1868	d5 48		cmp $48,x			cmp 	esInt0,x
.186a	d0 76		bne $18e2			bne 	_CNBadIndex
.186c	c8		iny				iny
.186d	b1 37		lda ($37),y			lda 	(rsPointer),y
.186f	d5 50		cmp $50,x			cmp 	esInt1,x
.1871	d0 6f		bne $18e2			bne 	_CNBadIndex
.1873	68		pla				pla
.1874	a8		tay				tay
.1875					_CNNoIndex:
.1875	98		tya				tya
.1876	48		pha				pha
.1877	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1879	b1 37		lda ($37),y			lda 	(rsPointer),y
.187b	85 2a		sta $2a				sta 	temp0
.187d	c8		iny				iny
.187e	b1 37		lda ($37),y			lda 	(rsPointer),y
.1880	85 2b		sta $2b				sta 	temp0+1
.1882	c8		iny				iny
.1883	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1885	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.1887	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1889	10 01		bpl $188c			bpl 	_CNSignX
.188b	ca		dex				dex  								; X = $FF
.188c					_CNSignX:
.188c	18		clc				clc 								; add to the LSB
.188d	a0 00		ldy #$00			ldy 	#0
.188f	71 2a		adc ($2a),y			adc 	(temp0),y
.1891	91 2a		sta ($2a),y			sta 	(temp0),y
.1893					_CNPropogate:
.1893	c8		iny				iny  								; add the sign extended in X to the rest.
.1894	8a		txa				txa
.1895	71 2a		adc ($2a),y			adc 	(temp0),y
.1897	91 2a		sta ($2a),y			sta 	(temp0),y
.1899	c8		iny				iny
.189a	8a		txa				txa
.189b	71 2a		adc ($2a),y			adc 	(temp0),y
.189d	91 2a		sta ($2a),y			sta 	(temp0),y
.189f	c8		iny				iny
.18a0	8a		txa				txa
.18a1	71 2a		adc ($2a),y			adc 	(temp0),y
.18a3	91 2a		sta ($2a),y			sta 	(temp0),y
.18a5	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.18a6	a5 37		lda $37				lda 	rsPointer
.18a8	69 07		adc #$07			adc 	#7
.18aa	85 2c		sta $2c				sta 	temp1
.18ac	a9 00		lda #$00			lda 	#0
.18ae	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.18b0	a8		tay				tay 								; and clear the Y register again.
.18b1	65 38		adc $38				adc 	rsPointer+1
.18b3	85 2d		sta $2d				sta 	temp1+1
.18b5	38		sec				sec 								; calculate current - limit oring interim values.
.18b6	20 ee 18	jsr $18ee			jsr 	_CNCompare 					; each of these does a byte.
.18b9	20 ee 18	jsr $18ee			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.18bc	20 ee 18	jsr $18ee			jsr 	_CNCompare 					; and the carry of the subtraction.
.18bf	20 ee 18	jsr $18ee			jsr 	_CNCompare
.18c2	50 02		bvc $18c6			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.18c4	49 80		eor #$80			eor 	#$80
.18c6					_CNNoOverflow:
.18c6	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.18c8	30 1d		bmi $18e7			bmi 	_CNCheckDownto
.18ca	c9 00		cmp #$00			cmp 	#0
.18cc	30 0c		bmi $18da			bmi 	_CNLoopRound 				; loop round if < =
.18ce	a5 2e		lda $2e				lda 	temp2
.18d0	f0 08		beq $18da			beq 	_CNLoopRound
.18d2					_CNLoopExit:
.18d2	68		pla				pla
.18d3	a8		tay				tay
.18d4	a9 0b		lda #$0b			lda 	#11
.18d6	20 c7 2d	jsr $2dc7			jsr 	RSFree
.18d9	60		rts				rts
.18da					_CNLoopRound:
.18da	68		pla				pla
.18db	a8		tay				tay
.18dc	a9 01		lda #$01			lda 	#1
.18de	20 e4 2d	jsr $2de4			jsr 	RSLoadPosition				; go back to the loop top
.18e1	60		rts				rts
.18e2					_CNBadIndex:
.18e2	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.18e4	20 8e 11	jsr $118e		jsr	errorHandler
.18e7					_CNCheckDownto:
.18e7	c9 00		cmp #$00			cmp 	#0
.18e9	10 ef		bpl $18da			bpl 	_CNLoopRound
.18eb	4c d2 18	jmp $18d2			jmp 	_CNLoopExit
.18ee					_CNCompare:
.18ee	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.18f0	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.18f2	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.18f4	85 2e		sta $2e				sta 	temp2
.18f6	c8		iny				iny
.18f7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.18f8					CommandIf:
.18f8	20 fb 26	jsr $26fb			jsr 	EvaluateRootInteger 		; get what's being tested.
.18fb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.18fd	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.18ff	f0 04		beq $1905			beq 	_IfSimple
.1901	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1903	d0 1b		bne $1920			bne 	_IfComplex
.1905					_IfSimple:
.1905	20 b5 2c	jsr $2cb5			jsr 	MInt32Zero					; check if TOS zero
.1908	f0 10		beq $191a			beq 	_IfEOL 						; go to next line.
.190a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.190c	c8		iny				iny
.190d	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.190f	f0 0c		beq $191d			beq 	_IfGoto 					; do the Goto code
.1911	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1913	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1915	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1917	f0 04		beq $191d			beq 	_IfGoto
.1919	60		rts				rts 								; else continue on this line.
.191a					_IfEOL:
.191a	4c 1d 21	jmp $211d			jmp 	AdvanceNextLine 			; go to next line
.191d					_IfGoto:
.191d	4c 92 21	jmp $2192			jmp 	CommandGoto
.1920					_IfComplex:
.1920	20 b5 2c	jsr $2cb5			jsr 	MInt32Zero 					; is it true ?
.1923	f0 01		beq $1926			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1925	60		rts				rts 								; else continue.
.1926					_IFSkip:
.1926	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1928	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.192a	4c 1b 2d	jmp $2d1b			jmp		ScanForward
.192d					Command_ELSE:
.192d	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.192f	8a		txa				txa
.1930	4c 1b 2d	jmp $2d1b			jmp		ScanForward
.1933					Command_ENDIF:
.1933	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be3					InputBuffer:
>0be3							.fill 	MaxInputSize+1
.1934					Command_Input:
.1934	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1936	c8		iny				iny
.1937	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1939	f0 f9		beq $1934			beq 	Command_Input
.193b	88		dey				dey 							; undo consume
.193c	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.193e	f0 54		beq $1994			beq 	_CIExit 				; : or EOL, exit
.1940	c9 80		cmp #$80			cmp 	#TOK_EOL
.1942	f0 50		beq $1994			beq 	_CIExit
.1944	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1946	90 12		bcc $195a			bcc 	_CIVariable
.1948	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.194a	d0 43		bne $198f			bne 	_CISyntax
.194c	a2 00		ldx #$00			ldx 	#0
.194e	20 f2 26	jsr $26f2			jsr 	EvaluateString 			; evaluate and print string
.1951	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0
.1954	20 62 1d	jsr $1d62			jsr 	PrintString
.1957	4c 34 19	jmp $1934			jmp 	Command_Input
.195a					_CIVariable:
.195a	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.195c	20 30 27	jsr $2730			jsr 	EvaluateReference  		; this is where its going
.195f					_CIRetry:
.195f	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1961	a2 14		ldx #$14		ldx	#20
.1963	20 6d 11	jsr $116d		jsr	deviceHandler
.1966	98		tya				tya
.1967	48		pha				pha
.1968	20 a8 19	jsr $19a8			jsr 	InputString 			; input a string (manually)
.196b	a2 01		ldx #$01			ldx 	#1
.196d	20 95 19	jsr $1995			jsr 	BufferToStackX 			; make stack,x ref input string.
.1970	a5 40		lda $40				lda 	esType 					; if target type numeric
.1972	29 40		and #$40			and 	#$40 					; then convert to number
.1974	d0 11		bne $1987			bne 	_CIWrite
.1976	a2 01		ldx #$01			ldx 	#1
.1978	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.197b	a9 0a		lda #$0a			lda 	#10
.197d	20 fc 2a	jsr $2afc			jsr 	MInt32FromString 		; convert it back from a string.
.1980	68		pla				pla
.1981	a8		tay				tay
.1982	b0 03		bcs $1987			bcs 	_CIWrite 				; successfully converted.
.1984	18		clc				clc 							; default fail FP conversion
.1985	90 d8		bcc $195f			bcc		_CIRetry				; failed, try again.
.1987					_CIWrite:
.1987	a2 00		ldx #$00			ldx 	#0
.1989	20 fd 19	jsr $19fd			jsr 	WriteValue
.198c	4c 34 19	jmp $1934			jmp 	Command_Input
.198f					_CISyntax:
.198f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1991	20 8e 11	jsr $118e		jsr	errorHandler
.1994					_CIExit:
.1994	60		rts				rts
.1995					BufferToStackX:
.1995	a9 e3		lda #$e3			lda 	#InputBuffer & $FF
.1997	95 48		sta $48,x			sta 	esInt0,x
.1999	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.199b	95 50		sta $50,x			sta 	esInt1,x
.199d	a9 00		lda #$00			lda 	#0
.199f	95 58		sta $58,x			sta 	esInt2,x
.19a1	95 60		sta $60,x			sta 	esInt3,x
.19a3	a9 40		lda #$40			lda 	#$40
.19a5	95 40		sta $40,x			sta 	esType,x
.19a7	60		rts				rts
.19a8					InputString:
.19a8	a9 00		lda #$00			lda 	#0
.19aa	8d e3 0b	sta $0be3			sta 	InputBuffer
.19ad					_InputLoop:
.19ad	a2 00		ldx #$00		ldx	#0
.19af	20 6d 11	jsr $116d		jsr	deviceHandler
.19b2	a2 0a		ldx #$0a		ldx	#10
.19b4	20 6d 11	jsr $116d		jsr	deviceHandler
.19b7	c9 00		cmp #$00			cmp 	#0
.19b9	f0 f2		beq $19ad			beq 	_InputLoop
.19bb	c9 08		cmp #$08			cmp 	#8
.19bd	f0 19		beq $19d8			beq 	_InputBackspace
.19bf	c9 0d		cmp #$0d			cmp 	#13
.19c1	f0 21		beq $19e4			beq 	_InputExit
.19c3	ae e3 0b	ldx $0be3			ldx 	InputBuffer
.19c6	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.19c8	f0 e3		beq $19ad			beq 	_InputLoop
.19ca	9d e4 0b	sta $0be4,x			sta 	InputBuffer+1,x 		; write char
.19cd	ee e3 0b	inc $0be3			inc 	InputBuffer 			; advance count.
.19d0					_InputPrintLoop:
.19d0	a2 14		ldx #$14		ldx	#20
.19d2	20 6d 11	jsr $116d		jsr	deviceHandler
.19d5	4c ad 19	jmp $19ad			jmp	 	_InputLoop
.19d8					_InputBackspace:
.19d8	ad e3 0b	lda $0be3			lda 	InputBuffer 			; at start
.19db	f0 d0		beq $19ad			beq 	_InputLoop
.19dd	ce e3 0b	dec $0be3			dec 	InputBuffer
.19e0	a9 08		lda #$08			lda 	#8
.19e2	d0 ec		bne $19d0			bne 	_InputPrintLoop
.19e4					_InputExit:
.19e4	a2 04		ldx #$04		ldx	#4
.19e6	20 6d 11	jsr $116d		jsr	deviceHandler
.19e9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.19ea					CommandLet:
.19ea	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.19ec	20 30 27	jsr $2730			jsr 	EvaluateReference
.19ef	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.19f1	20 f6 2c	jsr $2cf6			jsr 	CheckToken
.19f4	e8		inx				inx 								; do RHS
.19f5	20 de 26	jsr $26de			jsr 	Evaluate 					; evaluate and dereference
.19f8	ca		dex				dex
.19f9	20 fd 19	jsr $19fd			jsr 	WriteValue 					; write it out
.19fc	60		rts				rts
.19fd					WriteValue:
.19fd	98		tya				tya
.19fe	48		pha				pha
.19ff	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1a02	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1a04	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1a06	29 40		and #$40			and 	#$40
.1a08	d0 50		bne $1a5a			bne		_WVType
.1a0a	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1a0c	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1a0e	29 40		and #$40			and 	#$40
.1a10	d0 1f		bne $1a31			bne 	_WVCopyString
.1a12	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1a14	15 41		ora $41,x			ora 	esType+1,x
.1a16	4a		lsr a				lsr 	a
.1a17	90 22		bcc $1a3b			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1a19	b5 40		lda $40,x			lda 	esType,x
.1a1b	4a		lsr a				lsr 	a
.1a1c	90 3c		bcc $1a5a			bcc 	_WVType
.1a1e	e8		inx				inx 								; force the value being written to be a float.
.1a1f	20 3f 22	jsr $223f			jsr 	BPMakeFloat
.1a22	ca		dex				dex
.1a23	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0 					; set Temp0 to write address
.1a26	e8		inx				inx
.1a27	8a		txa				txa
.1a28	a2 20		ldx #$20		ldx	#32
.1a2a	20 8b 15	jsr $158b		jsr	floatingpointHandler
.1a2d	aa		tax				tax
.1a2e	4c 57 1a	jmp $1a57			jmp 	_WVCopyExit
.1a31					_WVCopyString:
.1a31	8a		txa				txa
.1a32	a2 0e		ldx #$0e		ldx	#14
.1a34	20 ae 30	jsr $30ae		jsr	stringHandler
.1a37	aa		tax				tax
.1a38	4c 57 1a	jmp $1a57			jmp 	_WVCopyExit
.1a3b					_WVCopyData4:
.1a3b	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1a3d	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1a3f	d0 10		bne $1a51			bne 	_WVCopyData1
.1a41	a0 03		ldy #$03			ldy 	#3
.1a43	b5 61		lda $61,x			lda 	esInt3+1,x
.1a45	91 2a		sta ($2a),y			sta 	(temp0),y
.1a47	88		dey				dey
.1a48	b5 59		lda $59,x			lda 	esInt2+1,x
.1a4a	91 2a		sta ($2a),y			sta 	(temp0),y
.1a4c	88		dey				dey
.1a4d	b5 51		lda $51,x			lda 	esInt1+1,x
.1a4f	91 2a		sta ($2a),y			sta 	(temp0),y
.1a51					_WVCopyData1:
.1a51	a0 00		ldy #$00			ldy 	#0
.1a53	b5 49		lda $49,x			lda 	esInt0+1,x
.1a55	91 2a		sta ($2a),y			sta 	(temp0),y
.1a57					_WVCopyExit:
.1a57	68		pla				pla
.1a58	a8		tay				tay
.1a59	60		rts				rts
.1a5a					_WVType:
.1a5a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a5c	20 8e 11	jsr $118e		jsr	errorHandler
.1a5f					TOSToTemp0:
.1a5f	b5 48		lda $48,x			lda 	esInt0,x
.1a61	85 2a		sta $2a				sta 	temp0
.1a63	b5 50		lda $50,x			lda 	esInt1,x
.1a65	85 2b		sta $2b				sta 	temp0+1
.1a67	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.0c04					structIndent:
>0c04							.fill 	1
.1a68					CommandList:
.1a68	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.1a6a	8e 04 0c	stx $0c04			stx 	structIndent
.1a6d	20 8e 2c	jsr $2c8e			jsr 	MInt32False
.1a70	e8		inx				inx
.1a71	20 8a 2c	jsr $2c8a			jsr 	MInt32True
.1a74	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.1a76	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.1a78	f0 15		beq $1a8f			beq 	_CLEndLine
.1a7a	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.1a7c	30 1b		bmi $1a99			bmi 	_CLDoListing 				; do the whole lot.
.1a7e	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.1a80	20 fd 26	jsr $26fd			jsr 	EvaluateInteger
.1a83	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.1a85	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1a87	f0 06		beq $1a8f			beq 	_CLEndLine
.1a89	20 cc 2b	jsr $2bcc			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.1a8c	4c 99 1a	jmp $1a99			jmp 	_CLDoListing 				; own e.g. list 1100
.1a8f					_CLEndLine:
.1a8f	c8		iny				iny 								; skip comma
.1a90	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.1a92	30 05		bmi $1a99			bmi 	_CLDoListing
.1a94	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.1a96	20 fd 26	jsr $26fd			jsr 	EvaluateInteger				; get end
.1a99					_CLDoListing:
.1a99	20 3d 1f	jsr $1f3d			jsr 	ResetCodeAddress 			; back to the start.
.1a9c					_CLCheckLoop:
.1a9c	a2 00		ldx #$00		ldx	#0
.1a9e	20 6d 11	jsr $116d		jsr	deviceHandler
.1aa1	a0 00		ldy #$00			ldy 	#0							; check end.
.1aa3	b1 28		lda ($28),y			lda 	(codePtr),y
.1aa5	f0 41		beq $1ae8			beq 	_CLEnd
.1aa7	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.1aa9	20 eb 1a	jsr $1aeb			jsr 	CLCompareLineTOS
.1aac	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.1aae	f0 28		beq $1ad8			beq 	_CLNext
.1ab0	e8		inx				inx
.1ab1	20 eb 1a	jsr $1aeb			jsr 	CLCompareLineTOS 			; compare vs higher
.1ab4	c9 01		cmp #$01			cmp 	#1
.1ab6	f0 20		beq $1ad8			beq 	_CLNext
.1ab8	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.1aba	20 0d 1b	jsr $1b0d			jsr 	CLStructureCheck
.1abd	ad 04 0c	lda $0c04			lda 	structIndent 				; indent level.
.1ac0	10 02		bpl $1ac4			bpl 	_CLPositive
.1ac2	a9 00		lda #$00			lda 	#0
.1ac4					_CLPositive:
.1ac4	a2 02		ldx #$02		ldx	#2
.1ac6	20 ab 38	jsr $38ab		jsr	tokeniserHandler
.1ac9	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.1acb	20 0d 1b	jsr $1b0d			jsr 	CLStructureCheck
.1ace	ad 04 0c	lda $0c04			lda 	structIndent
.1ad1	10 05		bpl $1ad8			bpl 	_CLNext
.1ad3	a9 00		lda #$00			lda 	#0
.1ad5	8d 04 0c	sta $0c04			sta 	structIndent
.1ad8					_CLNext:
.1ad8	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.1ada	b1 28		lda ($28),y			lda 	(codePtr),y
.1adc	18		clc				clc
.1add	65 28		adc $28				adc 	codePtr
.1adf	85 28		sta $28				sta 	codePtr
.1ae1	90 b9		bcc $1a9c			bcc 	_CLCheckLoop
.1ae3	e6 29		inc $29				inc 	codePtr+1
.1ae5	4c 9c 1a	jmp $1a9c			jmp 	_CLCheckLoop
.1ae8					_CLEnd:
.1ae8	4c f3 2d	jmp $2df3			jmp 	WarmStart 					; warm start after list.
.1aeb					CLCompareLineTOS:
.1aeb	a0 01		ldy #$01			ldy 	#1
.1aed	b1 28		lda ($28),y			lda 	(codePtr),y
.1aef	55 48		eor $48,x			eor 	esInt0,x
.1af1	85 2a		sta $2a				sta 	temp0
.1af3	c8		iny				iny
.1af4	b1 28		lda ($28),y			lda 	(codePtr),y
.1af6	55 50		eor $50,x			eor 	esInt1,x
.1af8	05 2a		ora $2a				ora 	temp0
.1afa	f0 10		beq $1b0c			beq 	_CLCLTExit
.1afc	88		dey				dey
.1afd	b1 28		lda ($28),y			lda 	(codePtr),y
.1aff	d5 48		cmp $48,x			cmp 	esInt0,x
.1b01	c8		iny				iny
.1b02	b1 28		lda ($28),y			lda 	(codePtr),y
.1b04	f5 50		sbc $50,x			sbc 	esInt1,x
.1b06	a9 ff		lda #$ff			lda 	#255
.1b08	90 02		bcc $1b0c			bcc 	_CLCLTExit
.1b0a	a9 01		lda #$01			lda 	#1
.1b0c					_CLCLTExit:
.1b0c	60		rts				rts
.1b0d					CLStructureCheck:
.1b0d	85 2a		sta $2a				sta 	temp0
.1b0f	a0 03		ldy #$03			ldy 	#3
.1b11					_CLSCLoop:
.1b11	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.1b13	c8		iny				iny
.1b14	c9 80		cmp #$80			cmp 	#$80
.1b16	90 f9		bcc $1b11			bcc 	_CLSCLoop 					; $00-$7F just step over.
.1b18	f0 28		beq $1b42			beq		_CLSCExit					; EOL return
.1b1a	c9 86		cmp #$86			cmp 	#$86 						; special handler
.1b1c	90 1e		bcc $1b3c			bcc 	_CLSCSpecial
.1b1e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.1b20	90 ef		bcc $1b11			bcc 	_CLSCLoop
.1b22	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.1b24	b0 eb		bcs $1b11			bcs 	_CLSCLoop
.1b26	aa		tax				tax 								; get adjustment
.1b27	bd 96 25	lda $2596,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.1b2a	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.1b2c	d0 e3		bne $1b11			bne 	_CLSCLoop
.1b2e	38		sec				sec
.1b2f	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.1b31	0a		asl a				asl 	a 							; double indent step
.1b32	18		clc				clc
.1b33	6d 04 0c	adc $0c04			adc 	structIndent 				; add to structure indent
.1b36	8d 04 0c	sta $0c04			sta 	structIndent
.1b39	4c 11 1b	jmp $1b11			jmp 	_CLSCLoop
.1b3c					_CLSCSpecial:
.1b3c	20 5e 2d	jsr $2d5e			jsr 	ScannerSkipSpecial
.1b3f	4c 11 1b	jmp $1b11			jmp 	_CLSCLoop
.1b42					_CLSCExit:
.1b42	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1b43					CommandLoad:
.1b43	20 6b 1b	jsr $1b6b			jsr 	CLSParameters 					; get parameters for load.
.1b46	08		php				php
.1b47	a2 0e		ldx #$0e		ldx	#14
.1b49	20 6d 11	jsr $116d		jsr	deviceHandler
.1b4c	28		plp				plp
.1b4d	b0 08		bcs $1b57			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1b4f	20 80 17	jsr $1780			jsr 	CommandClear
.1b52	a2 02		ldx #$02		ldx	#2
.1b54	20 6b 17	jsr $176b		jsr	interactionHandler
.1b57					_CLExit
.1b57	60		rts				rts
.1b58					CommandSave:
.1b58	20 6b 1b	jsr $1b6b			jsr 	CLSParameters					; get parameters for save
.1b5b	90 08		bcc $1b65			bcc 	_CSNoOverrideAddress
.1b5d	20 0e 2d	jsr $2d0e			jsr 	CheckComma 						; should be a comma.
.1b60	a2 02		ldx #$02			ldx 	#2
.1b62	20 fd 26	jsr $26fd			jsr 	EvaluateInteger 				; get save end address.
.1b65					_CSNoOverrideAddress:
.1b65	a2 18		ldx #$18		ldx	#24
.1b67	20 6d 11	jsr $116d		jsr	deviceHandler
.1b6a	60		rts				rts
.1b6b					CLSParameters:
.1b6b	a2 00		ldx #$00			ldx 	#0 								; string
.1b6d	20 f2 26	jsr $26f2			jsr 	EvaluateString
.1b70	e8		inx				inx 									; erase out +1 +2
.1b71	20 8e 2c	jsr $2c8e			jsr 	MInt32False
.1b74	e8		inx				inx
.1b75	20 8e 2c	jsr $2c8e			jsr 	MInt32False
.1b78	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1b7b	85 49		sta $49				sta 	esInt0+1
.1b7d	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b80	85 51		sta $51				sta 	esInt1+1
.1b82	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1b85	85 4a		sta $4a				sta 	esInt0+2
.1b87	ad cb 0a	lda $0acb			lda 	endProgram+1
.1b8a	85 52		sta $52				sta 	esInt1+2
.1b8c	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1b8e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1b90	d0 08		bne $1b9a			bne 	_CLSDefault
.1b92	c8		iny				iny 									; skip comma
.1b93	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1b95	20 fd 26	jsr $26fd			jsr 	EvaluateInteger
.1b98	38		sec				sec
.1b99	60		rts				rts
.1b9a					_CLSDefault:
.1b9a	18		clc				clc
.1b9b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c05					storeSize:
>0c05							.fill 	1
.1b9c					CommandLocal:
.1b9c	a2 00		ldx #$00			ldx 	#0
.1b9e	20 ba 1b	jsr $1bba			jsr 	LocaliseVariable 			; localise one.
.1ba1					_CLCheckNext:
.1ba1	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1ba3	c8		iny				iny
.1ba4	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1ba6	f0 06		beq $1bae			beq 	_CLAssignment
.1ba8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1baa	f0 f0		beq $1b9c			beq 	CommandLocal
.1bac	88		dey				dey
.1bad	60		rts				rts
.1bae					_CLAssignment:
.1bae	a2 01		ldx #$01			ldx 	#1
.1bb0	20 de 26	jsr $26de			jsr 	Evaluate 					; evaluate RHS
.1bb3	ca		dex				dex
.1bb4	20 fd 19	jsr $19fd			jsr 	WriteValue
.1bb7	4c a1 1b	jmp $1ba1			jmp 	_CLCheckNext
.1bba					LocaliseVariable:
.1bba	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1bbc	c9 40		cmp #$40			cmp 	#$40
.1bbe	b0 67		bcs $1c27			bcs 	_LVSyntax
.1bc0	8a		txa				txa 								; get the address of that variable.
.1bc1	a2 00		ldx #$00		ldx	#0
.1bc3	20 ba 3b	jsr $3bba		jsr	variableHandler
.1bc6	aa		tax				tax
.1bc7	8a		txa				txa
.1bc8	48		pha				pha
.1bc9	98		tya				tya
.1bca	48		pha				pha
.1bcb	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1bce	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1bd0	0a		asl a				asl 	a
.1bd1	10 16		bpl $1be9			bpl 	_LVPushNumber
.1bd3	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1bd5	b1 2a		lda ($2a),y			lda 	(temp0),y
.1bd7	c8		iny				iny
.1bd8	85 2c		sta $2c				sta 	temp1
.1bda	b1 2a		lda ($2a),y			lda 	(temp0),y
.1bdc	85 2d		sta $2d				sta 	temp1+1
.1bde	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1be0	b1 2c		lda ($2c),y			lda 	(temp1),y
.1be2	aa		tax				tax 								; into X
.1be3	e8		inx				inx 								; +1 for length.
.1be4	a9 24		lda #$24			lda 	#markerString
.1be6	4c fe 1b	jmp $1bfe			jmp 	_LVWriteFrame
.1be9					_LVPushNumber:
.1be9	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1beb	85 2c		sta $2c				sta 	temp1
.1bed	a5 2b		lda $2b				lda 	temp0+1
.1bef	85 2d		sta $2d				sta 	temp1+1
.1bf1	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1bf3	4a		lsr a				lsr 	a
.1bf4	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1bf6	a2 04		ldx #$04			ldx 	#VarISize
.1bf8	90 04		bcc $1bfe			bcc 	_LVIsInteger
.1bfa	a9 23		lda #$23			lda 	#markerFloat
.1bfc	a2 06		ldx #$06			ldx 	#VarFSize
.1bfe					_LVIsInteger:
.1bfe					_LVWriteFrame:
.1bfe	8e 05 0c	stx $0c05			stx 	storeSize 					; number of bytes to copy from (temp0)
.1c01	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1c02	e8		inx				inx
.1c03	e8		inx				inx
.1c04	20 a5 2d	jsr $2da5			jsr 	RSClaim 					; create the stack frame.
.1c07	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1c09	a0 01		ldy #$01			ldy 	#1
.1c0b	91 37		sta ($37),y			sta 	(rsPointer),y
.1c0d	c8		iny				iny
.1c0e	a5 2b		lda $2b				lda 	temp0+1
.1c10	91 37		sta ($37),y			sta 	(rsPointer),y
.1c12	a0 00		ldy #$00			ldy 	#0
.1c14					_LVCopyData:
.1c14	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1c16	c8		iny				iny 								; write allowing for the header bit.
.1c17	c8		iny				iny
.1c18	c8		iny				iny
.1c19	91 37		sta ($37),y			sta 	(rsPointer),y
.1c1b	88		dey				dey
.1c1c	88		dey				dey
.1c1d	ce 05 0c	dec $0c05			dec 	storeSize 					; do it storesize times
.1c20	d0 f2		bne $1c14			bne 	_LVCopyData
.1c22	68		pla				pla
.1c23	a8		tay				tay
.1c24	68		pla				pla
.1c25	aa		tax				tax
.1c26	60		rts				rts
.1c27					_LVSyntax:
.1c27	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c29	20 8e 11	jsr $118e		jsr	errorHandler
.1c2c					RestoreLocals:
.1c2c	a2 00		ldx #$00			ldx 	#0
.1c2e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1c30	c9 40		cmp #$40			cmp	 	#64
.1c32	90 01		bcc $1c35			bcc 	_RLocal
.1c34	60		rts				rts
.1c35					_RLocal:
.1c35	8a		txa				txa
.1c36	48		pha				pha
.1c37	98		tya				tya
.1c38	48		pha				pha
.1c39	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1c3b	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c3d	85 2a		sta $2a				sta 	temp0
.1c3f	c8		iny				iny
.1c40	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c42	85 2b		sta $2b				sta 	temp0+1
.1c44	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1c46	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c48	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1c4a	f0 28		beq $1c74			beq 	_RString
.1c4c	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1c4e	c9 25		cmp #$25			cmp 	#markerInt
.1c50	f0 02		beq $1c54			beq 	_RIsInteger
.1c52	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1c54					_RIsInteger:
.1c54	8a		txa				txa
.1c55	48		pha				pha
.1c56	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1c58					_RCopyBack:
.1c58	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c5a	88		dey				dey
.1c5b	88		dey				dey
.1c5c	88		dey				dey
.1c5d	91 2a		sta ($2a),y			sta 	(temp0),y
.1c5f	c8		iny				iny
.1c60	c8		iny				iny
.1c61	c8		iny				iny
.1c62	c8		iny				iny
.1c63	ca		dex				dex
.1c64	d0 f2		bne $1c58			bne 	_RCopyBack
.1c66	68		pla				pla 								; get size add 3
.1c67	18		clc				clc
.1c68	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1c6a					_RRestoreAAndLoop:
.1c6a	20 c7 2d	jsr $2dc7			jsr 	RSFree
.1c6d	68		pla				pla
.1c6e	a8		tay				tay
.1c6f	68		pla				pla
.1c70	aa		tax				tax
.1c71	4c 2c 1c	jmp $1c2c			jmp 	RestoreLocals 				; go see if there are any more locals.
.1c74					_RString:
.1c74	a2 00		ldx #$00			ldx 	#0
.1c76	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1c78	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c7a	95 48		sta $48,x			sta 	esInt0,x
.1c7c	c8		iny				iny
.1c7d	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c7f	95 50		sta $50,x			sta 	esInt1,x
.1c81	18		clc				clc
.1c82	a5 37		lda $37				lda 	rsPointer
.1c84	69 03		adc #$03			adc 	#3
.1c86	95 49		sta $49,x			sta 	esInt0+1,x
.1c88	a5 38		lda $38				lda 	rsPointer+1
.1c8a	69 00		adc #$00			adc 	#0
.1c8c	95 51		sta $51,x			sta 	esInt1+1,x
.1c8e	8a		txa				txa
.1c8f	a2 0e		ldx #$0e		ldx	#14
.1c91	20 ae 30	jsr $30ae		jsr	stringHandler
.1c94	a0 03		ldy #$03			ldy 	#3 							; get string length
.1c96	b1 37		lda ($37),y			lda 	(rsPointer),y
.1c98	18		clc				clc
.1c99	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1c9b	4c 6a 1c	jmp $1c6a			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1c9e					Command_New:
.1c9e					Command_XNew:
.1c9e	20 3d 1f	jsr $1f3d			jsr 	ResetCodeAddress 			; point to first line
.1ca1	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1ca3	98		tya				tya
.1ca4	91 28		sta ($28),y			sta 	(codePtr),y
.1ca6	20 80 17	jsr $1780			jsr 	CommandClear 				; clear everything down.
.1ca9	4c 17 21	jmp $2117			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1cac					Command_Poke:
.1cac	a9 01		lda #$01			lda 	#1
.1cae	d0 06		bne $1cb6			bne 	PokeGeneral
.1cb0					Command_Doke:
.1cb0	a9 02		lda #$02			lda 	#2
.1cb2	d0 02		bne $1cb6			bne 	PokeGeneral
.1cb4					Command_Loke:
.1cb4	a9 03		lda #$03			lda 	#3
.1cb6					PokeGeneral:
.1cb6	48		pha				pha 								; save id (PDL = 123)
.1cb7	20 fb 26	jsr $26fb			jsr 	EvaluateRootInteger 		; target address
.1cba	20 0e 2d	jsr $2d0e			jsr	 	CheckComma
.1cbd	e8		inx				inx
.1cbe	20 fd 26	jsr $26fd			jsr 	EvaluateInteger 			; what value to POKE ?
.1cc1	ca		dex				dex
.1cc2	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0 					; temp0 points to the target address
.1cc5	84 32		sty $32				sty 	tempShort 					; save Y
.1cc7	68		pla				pla 								; get copy type (1-3) and dispatch
.1cc8	aa		tax				tax
.1cc9	ca		dex				dex
.1cca	f0 14		beq $1ce0			beq 	_Poke1
.1ccc	ca		dex				dex
.1ccd	f0 0b		beq $1cda			beq 	_Poke2
.1ccf	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1cd1	a5 61		lda $61				lda 	esInt3+1
.1cd3	91 2a		sta ($2a),y			sta 	(temp0),y
.1cd5	88		dey				dey
.1cd6	a5 59		lda $59				lda 	esInt2+1
.1cd8	91 2a		sta ($2a),y			sta 	(temp0),y
.1cda					_Poke2:
.1cda	a0 01		ldy #$01			ldy 	#1
.1cdc	a5 51		lda $51				lda 	esInt1+1
.1cde	91 2a		sta ($2a),y			sta 	(temp0),y
.1ce0					_Poke1:
.1ce0	a0 00		ldy #$00			ldy 	#0
.1ce2	a5 49		lda $49				lda 	esInt0+1
.1ce4	91 2a		sta ($2a),y			sta 	(temp0),y
.1ce6	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1ce8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c06					lastPrintToken:
>0c06							.fill 	1
.1ce9					Command_Print:
.1ce9	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1ceb	8d 06 0c	sta $0c06			sta 	lastPrintToken
.1cee	88		dey				dey
.1cef					_PrintLoopSkip:
.1cef	c8		iny				iny
.1cf0					_PrintLoop:
.1cf0	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1cf2	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1cf4	f0 5b		beq $1d51			beq 	_PrintExit
.1cf6	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1cf8	f0 57		beq $1d51			beq 	_PrintExit
.1cfa	8d 06 0c	sta $0c06			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1cfd	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1cff	f0 ee		beq $1cef			beq 	_PrintLoopSkip
.1d01	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1d03	f0 3c		beq $1d41			beq	 	_PrintNewLine
.1d05	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1d07	f0 40		beq $1d49			beq 	_PrintTab
.1d09	20 dc 26	jsr $26dc			jsr 	EvaluateRoot 				; evaluate something at the root
.1d0c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1d0e	85 2a		sta $2a				sta 	temp0
.1d10	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1d12	85 2b		sta $2b				sta 	1+(temp0)
.1d14	a5 40		lda $40				lda 	esType 						; get type
.1d16	f0 15		beq $1d2d			beq		_PrintInteger
.1d18	4a		lsr a				lsr 	a 							; check for floating point
.1d19	b0 08		bcs $1d23			bcs 	_PrintFloat
.1d1b					_PrintString:
.1d1b	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1d1d	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0
.1d20	4c 3b 1d	jmp $1d3b			jmp 	_PrintTemp0 				; print no leading space.
.1d23					_PrintFloat:
.1d23	a9 00		lda #$00			lda 	#0 							; stack level.
.1d25	a2 14		ldx #$14		ldx	#20
.1d27	20 8b 15	jsr $158b		jsr	floatingpointHandler
.1d2a	4c 34 1d	jmp $1d34			jmp 	_PrintSpaceTemp0
.1d2d					_PrintInteger:
.1d2d	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1d2f	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1d31	20 e4 2b	jsr $2be4			jsr 	MInt32ToString				; convert to text
.1d34					_PrintSpaceTemp0:
.1d34	a9 20		lda #$20			lda 	#32
.1d36	a2 14		ldx #$14		ldx	#20
.1d38	20 6d 11	jsr $116d		jsr	deviceHandler
.1d3b					_PrintTemp0:
.1d3b	20 62 1d	jsr $1d62			jsr 	PrintString
.1d3e	4c f0 1c	jmp $1cf0			jmp 	_PrintLoop
.1d41					_PrintNewLine:
.1d41	a2 04		ldx #$04		ldx	#4
.1d43	20 6d 11	jsr $116d		jsr	deviceHandler
.1d46	4c ef 1c	jmp $1cef			jmp 	_PrintLoopSkip
.1d49					_PrintTab:
.1d49	a2 1a		ldx #$1a		ldx	#26
.1d4b	20 6d 11	jsr $116d		jsr	deviceHandler
.1d4e	4c ef 1c	jmp $1cef			jmp 	_PrintLoopSkip
.1d51					_PrintExit:
.1d51	ad 06 0c	lda $0c06			lda		lastPrintToken 				; check last token
.1d54	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1d56	f0 09		beq $1d61			beq 	_PrintExit2
.1d58	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1d5a	f0 05		beq $1d61			beq 	_PrintExit2
.1d5c	a2 04		ldx #$04		ldx	#4
.1d5e	20 6d 11	jsr $116d		jsr	deviceHandler
.1d61					_PrintExit2:
.1d61	60		rts				rts
.1d62					PrintString:
.1d62	8a		txa				txa
.1d63	48		pha				pha
.1d64	98		tya				tya
.1d65	48		pha				pha
.1d66	a0 00		ldy #$00			ldy 	#0							; get length
.1d68	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d6a	aa		tax				tax 								; into X
.1d6b	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1d6d	f0 10		beq $1d7f			beq 	_PSExit
.1d6f	ca		dex				dex
.1d70	8a		txa				txa
.1d71	48		pha				pha
.1d72	c8		iny				iny
.1d73	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d75	a2 14		ldx #$14		ldx	#20
.1d77	20 6d 11	jsr $116d		jsr	deviceHandler
.1d7a	68		pla				pla
.1d7b	aa		tax				tax
.1d7c	4c 6b 1d	jmp $1d6b			jmp 	_PSLoop
.1d7f					_PSExit:
.1d7f	68		pla				pla
.1d80	a8		tay				tay
.1d81	68		pla				pla
.1d82	aa		tax				tax
.1d83	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c07					paramCount:
>0c07							.fill 	1
.1d84					CallProc:
.1d84	20 3c 20	jsr $203c			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1d87	48		pha				pha 								; save length on stack
.1d88	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1d8a	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1d8c	48		pha				pha
.1d8d	a5 2a		lda $2a				lda 	temp0
.1d8f	48		pha				pha
.1d90	98		tya				tya 								; calculate Y + length
.1d91	18		clc				clc
.1d92	65 32		adc $32				adc 	tempShort
.1d94	a8		tay				tay
.1d95	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1d97					_CallProcEvalParams:
.1d97	e8		inx				inx
.1d98	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.1d9a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1d9c	f0 0b		beq $1da9			beq 	_CPDoneParams
.1d9e	20 de 26	jsr $26de			jsr 	Evaluate 					; evaluate a parameter
.1da1	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1da3	c8		iny				iny
.1da4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1da6	f0 ef		beq $1d97			beq 	_CallProcEvalParams
.1da8	88		dey				dey 								; undo consumption.
.1da9					_CPDoneParams:
.1da9	20 01 2d	jsr $2d01			jsr 	CheckRightParen 			; check closing parenthesis.
.1dac	8e 07 0c	stx $0c07			stx 	paramCount 					; store parameter count+1
.1daf	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1db1	a9 50		lda #$50			lda 	#markerPROC
.1db3	20 a5 2d	jsr $2da5			jsr 	RSClaim
.1db6	a9 01		lda #$01			lda 	#1 							; store return address.
.1db8	20 d1 2d	jsr $2dd1			jsr 	RSSavePosition
.1dbb	68		pla				pla 								; get the new code Ptr
.1dbc	85 28		sta $28				sta 	codePtr
.1dbe	68		pla				pla
.1dbf	85 29		sta $29				sta 	codePtr+1
.1dc1	68		pla				pla 								; length of name + 4 is the param start.
.1dc2	18		clc				clc
.1dc3	69 04		adc #$04			adc 	#4
.1dc5	a8		tay				tay
.1dc6	a2 ff		ldx #$ff			ldx 	#$FF
.1dc8					_CPLoadParameters:
.1dc8	e8		inx				inx 								; point to where the address should be loaded.
.1dc9	ec 07 0c	cpx $0c07			cpx 	paramCount 					; too many parameters in definition ?
.1dcc	f0 1e		beq $1dec			beq 	_CPParamError
.1dce	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.1dd0	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.1dd2	f0 0e		beq $1de2			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.1dd4	20 ba 1b	jsr $1bba			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1dd7	20 fd 19	jsr $19fd			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1dda	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.1ddc	c8		iny				iny
.1ddd	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1ddf	f0 e7		beq $1dc8			beq 	_CPLoadParameters
.1de1	88		dey				dey 								; no, unconsume and check for )
.1de2					_CPParamComplete:
.1de2	20 01 2d	jsr $2d01			jsr 	CheckRightParen 			; check )
.1de5	e8		inx				inx 								; check right number of parameters have been consumed
.1de6	ec 07 0c	cpx $0c07			cpx 	paramCount
.1de9	d0 01		bne $1dec			bne 	_CPParamError
.1deb	60		rts				rts
.1dec					_CPParamError:
.1dec	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1dee	20 8e 11	jsr $118e		jsr	errorHandler
.1df1					ReturnProc:
.1df1	20 2c 1c	jsr $1c2c			jsr 	RestoreLocals 				; get the locals back.
.1df4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1df6	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1df8	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1dfa	f0 05		beq $1e01			beq 	_isok
.1dfc	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1dfe	20 8e 11	jsr $118e		jsr	errorHandler
.1e01					_isok:
.1e01	a9 01		lda #$01			lda 	#1
.1e03	20 e4 2d	jsr $2de4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1e06	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1e08	20 c7 2d	jsr $2dc7			jsr 	RSFree
.1e0b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c08					dataPtr:
>0c08							.fill 	2
.0c0a					dataIndex:
>0c0a							.fill 	1
.1e0c					CommandRead:
.1e0c	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1e0e	20 30 27	jsr $2730			jsr 	EvaluateReference
.1e11	20 52 1e	jsr $1e52			jsr 	SwapDPCP 					; use the data pointer.
.1e14	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1e16	c8		iny				iny
.1e17	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1e19	f0 07		beq $1e22			beq 	_CRInData
.1e1b	88		dey				dey
.1e1c	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1e1e	aa		tax				tax
.1e1f	20 1b 2d	jsr $2d1b			jsr 	ScanForward
.1e22					_CRInData:
.1e22	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1e24	20 de 26	jsr $26de			jsr 	Evaluate
.1e27	ca		dex				dex 								; and write the value.
.1e28	20 fd 19	jsr $19fd			jsr 	WriteValue
.1e2b	20 52 1e	jsr $1e52			jsr 	SwapDPCP 					; get the code pointer back.
.1e2e	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1e30	c8		iny				iny
.1e31	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1e33	f0 d7		beq $1e0c			beq 	CommandRead
.1e35	88		dey				dey
.1e36	60		rts				rts
.1e37					CommandData:
.1e37	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1e39	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1e3b	20 1b 2d	jsr $2d1b			jsr 	ScanForward
.1e3e	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1e3f	60		rts				rts
.1e40					CommandRestore:
.1e40	ad c8 0a	lda $0ac8			lda 	basePage
.1e43	8d 08 0c	sta $0c08			sta 	dataPtr
.1e46	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e49	8d 09 0c	sta $0c09			sta 	dataPtr+1
.1e4c	a9 03		lda #$03			lda 	#3
.1e4e	8d 0a 0c	sta $0c0a			sta 	dataIndex
.1e51	60		rts				rts
.1e52					SwapDPCP:
.1e52	8a		txa				txa
.1e53	48		pha				pha
.1e54	98		tya				tya 								; swap Y, DataIndex
.1e55	ac 0a 0c	ldy $0c0a			ldy 	DataIndex
.1e58	8d 0a 0c	sta $0c0a			sta 	DataIndex
.1e5b	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1e5d	ae 08 0c	ldx $0c08			ldx 	dataptr
.1e60	8d 08 0c	sta $0c08			sta 	dataPtr
.1e63	86 28		stx $28				stx 	codePtr
.1e65	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1e67	ae 09 0c	ldx $0c09			ldx 	dataptr+1
.1e6a	8d 09 0c	sta $0c09			sta 	dataPtr+1
.1e6d	86 29		stx $29				stx 	codePtr+1
.1e6f	68		pla				pla
.1e70	aa		tax				tax
.1e71	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1e72					Command_Rem:
.1e72					Command_Rem2:
.1e72	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1e74	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1e76	d0 06		bne $1e7e			bne 	_CRNotString
.1e78	c8		iny				iny
.1e79	98		tya				tya
.1e7a	38		sec				sec
.1e7b	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1e7d	a8		tay				tay
.1e7e					_CRNotString:
.1e7e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.1e7f					Command_Repeat:
.1e7f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1e81	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1e83	20 a5 2d	jsr $2da5			jsr 	RSClaim
.1e86	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1e88	20 d1 2d	jsr $2dd1			jsr 	RSSavePosition
.1e8b	60		rts				rts
.1e8c					Command_Until:
.1e8c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1e8e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1e90	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1e92	f0 05		beq $1e99			beq 	_isok
.1e94	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.1e96	20 8e 11	jsr $118e		jsr	errorHandler
.1e99					_isok:
.1e99	20 fb 26	jsr $26fb			jsr 	EvaluateRootInteger 		; at the bottom.
.1e9c	20 b5 2c	jsr $2cb5			jsr 	MInt32Zero					; check if TOS zero
.1e9f	d0 06		bne $1ea7			bne 	_CUExit
.1ea1	a9 01		lda #$01			lda 	#1
.1ea3	20 e4 2d	jsr $2de4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1ea6	60		rts				rts
.1ea7					_CUExit:
.1ea7	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1ea9	20 c7 2d	jsr $2dc7			jsr 	RSFree
.1eac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c0b					breakCounter:
>0c0b								.fill 	1
.0c0c					breakIncrement:
>0c0c								.fill 	1
.1ead					Command_Run:
.1ead					XCommand_Run:
.1ead	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.1eaf	9a		txs				txs
.1eb0	20 37 1f	jsr $1f37			jsr 	BreakOn 					; turn break on
.1eb3	20 80 17	jsr $1780			jsr 	CommandClear 				; clear everything.
.1eb6	20 3d 1f	jsr $1f3d			jsr 	ResetCodeAddress 			; back to the start.
.1eb9					Command_RunFrom:
.1eb9	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1ebb					CRNextInstruction:
.1ebb	64 3a		stz $3a				stz 	softMemAlloc+1
.1ebd	ad 0b 0c	lda $0c0b			lda 	breakCounter 				; check for break.
.1ec0	6d 0c 0c	adc $0c0c			adc 	breakIncrement
.1ec3	8d 0b 0c	sta $0c0b			sta 	breakCounter
.1ec6	90 05		bcc $1ecd			bcc 	_CRNoChecks
.1ec8	a2 00		ldx #$00		ldx	#0
.1eca	20 6d 11	jsr $116d		jsr	deviceHandler
.1ecd					_CRNoChecks
.1ecd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.1ecf	10 1c		bpl $1eed			bpl 	_CRNotToken
.1ed1	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1ed3	b0 0c		bcs $1ee1			bcs 	_CRExecute
.1ed5	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1ed7	b0 71		bcs $1f4a			bcs 	Unimplemented
.1ed9	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1edb	b0 04		bcs $1ee1			bcs 	_CRExecute
.1edd	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1edf	b0 16		bcs $1ef7			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.1ee1					_CRExecute:
.1ee1	c8		iny				iny 								; consume it.
.1ee2	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1ee3	aa		tax				tax
.1ee4	20 ea 1e	jsr $1eea			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1ee7	4c bb 1e	jmp $1ebb			jmp 	CRNextInstruction
.1eea					_CRRunRoutine:
.1eea	7c 54 1f	jmp ($1f54,x)			jmp 	(Group0Vectors,x)
.1eed					_CRNotToken:
.1eed	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1eef	b0 59		bcs $1f4a			bcs 	Unimplemented
.1ef1					_CRDefaultLet:
.1ef1	20 ea 19	jsr $19ea			jsr 	CommandLet 					; do the default, LET
.1ef4	4c bb 1e	jmp $1ebb			jmp 	CRNextInstruction
.1ef7					_CRCheckIndirect:
.1ef7	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.1ef9	f0 0a		beq $1f05			beq 	_CRAndCommand
.1efb	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1efd	f0 f2		beq $1ef1			beq 	_CRDefaultLet
.1eff	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1f01	f0 ee		beq $1ef1			beq 	_CRDefaultLet
.1f03	d0 45		bne $1f4a			bne 	Unimplemented
.1f05					_CRAndCommand:
.1f05	c8		iny				iny 								; skip over the AND token
.1f06	a9 94		lda #$94			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.1f08	20 22 1f	jsr $1f22			jsr 	CommandAssembler 			; do the assembler command
.1f0b	4c bb 1e	jmp $1ebb			jmp 	CRNextInstruction 			; and loop round.
.1f0e					CommandShift1:
.1f0e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.1f10	10 38		bpl $1f4a			bpl 	Unimplemented 				; we have an error as this should not happen.
.1f12	c8		iny				iny 								; advance over it.
.1f13	c9 93		cmp #$93			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.1f15	b0 0b		bcs $1f22			bcs 	CommandAssembler
.1f17	0a		asl a				asl 	a 							; double into X
.1f18	aa		tax				tax
.1f19	7c 16 20	jmp ($2016,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1f1c					CommandShift2:
.1f1c	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1f1e	20 6c 14	jsr $146c		jsr	extensionHandler
.1f21	60		rts				rts
.1f22					CommandAssembler:
.1f22	a2 00		ldx #$00		ldx	#0
.1f24	20 32 10	jsr $1032		jsr	assemblerHandler
.1f27	60		rts				rts
.1f28					CommandAssemblerLabel:
.1f28	a2 02		ldx #$02		ldx	#2
.1f2a	20 32 10	jsr $1032		jsr	assemblerHandler
.1f2d	60		rts				rts
.1f2e					CommandColon:
.1f2e	60		rts				rts
.1f2f					CommandBreak:
.1f2f	20 fb 26	jsr $26fb			jsr 	EvaluateRootInteger
.1f32	20 b5 2c	jsr $2cb5			jsr 	MInt32Zero
.1f35	f0 02		beq $1f39			beq 	BreakOff
.1f37					BreakOn:
.1f37	a2 08		ldx #$08			ldx 	#8
.1f39					BreakOff:
.1f39	8e 0c 0c	stx $0c0c			stx 	breakIncrement
.1f3c	60		rts				rts
.1f3d					ResetCodeAddress:
.1f3d	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1f40	85 28		sta $28				sta 	codePtr
.1f42	ad c9 0a	lda $0ac9			lda 	basePage+1
.1f45	85 29		sta $29				sta 	codePtr+1
.1f47	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1f49	60		rts				rts
.1f4a					Unimplemented:
.1f4a	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1f4c	20 8e 11	jsr $118e		jsr	errorHandler
.1f4f					TKErr01:
.1f4f					TKErr02:
.1f4f					TKErr03:
.1f4f					TKErr04:
.1f4f					TKErr05:
.1f4f					TKErr06:
.1f4f					TKErr07:
.1f4f					TKErr08:
.1f4f					TKErr09:
.1f4f					TKErr10:
.1f4f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1f51	20 8e 11	jsr $118e		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1f54					Group0Vectors:
>1f54	1d 21					.word	AdvanceNextLine          ; $80 [[eol]]
>1f56	0e 1f					.word	CommandShift1            ; $81 [[sh1]]
>1f58	1c 1f					.word	CommandShift2            ; $82 [[sh2]]
>1f5a	4f 1f					.word	TKErr09                  ; $83 [[sh3]]
>1f5c	4f 1f					.word	TKErr10                  ; $84 [[fpc]]
>1f5e	4f 1f					.word	TKErr08                  ; $85 [[str]]
>1f60	e1 22					.word	AndHandler               ; $86 and
>1f62	ce 22					.word	OrHandler                ; $87 or
>1f64	bb 22					.word	XorHandler               ; $88 xor
>1f66	03 24					.word	CompareGreaterEq         ; $89 >=
>1f68	0d 24					.word	CompareLessEq            ; $8a <=
>1f6a	ef 23					.word	CompareGreater           ; $8b >
>1f6c	e5 23					.word	CompareLess              ; $8c <
>1f6e	db 23					.word	CompareEquals            ; $8d =
>1f70	f9 23					.word	CompareNotEquals         ; $8e <>
>1f72	4c 22					.word	AddHandler               ; $8f +
>1f74	6f 22					.word	SubHandler               ; $90 -
>1f76	07 23					.word	ShrHandler               ; $91 >>
>1f78	f4 22					.word	ShlHandler               ; $92 <<
>1f7a	82 22					.word	MulHandler               ; $93 *
>1f7c	95 22					.word	DivHandler               ; $94 /
>1f7e	a8 22					.word	ModHandler               ; $95 mod
>1f80	40 23					.word	PowerHandler             ; $96 ^
>1f82	1a 23					.word	WordRefHandler           ; $97 !
>1f84	2d 23					.word	ByteRefHandler           ; $98 ?
>1f86	7f 1e					.word	Command_Repeat           ; $99 repeat
>1f88	e5 21					.word	Command_While            ; $9a while
>1f8a	e9 17					.word	Command_FOR              ; $9b for
>1f8c	f8 18					.word	CommandIf                ; $9c if
>1f8e	4f 1f					.word	TKErr04                  ; $9d defproc
>1f90	8c 1e					.word	Command_Until            ; $9e until
>1f92	08 22					.word	Command_Wend             ; $9f wend
>1f94	4a 18					.word	Command_NEXT             ; $a0 next
>1f96	4f 1f					.word	TKErr06                  ; $a1 then
>1f98	33 19					.word	Command_ENDIF            ; $a2 endif
>1f9a	f1 1d					.word	ReturnProc               ; $a3 endproc
>1f9c	e5 25					.word	UnaryParenthesis         ; $a4 (
>1f9e	43 27					.word	UnaryLen                 ; $a5 len(
>1fa0	87 27					.word	UnarySgn                 ; $a6 sgn(
>1fa2	70 27					.word	UnaryAbs                 ; $a7 abs(
>1fa4	e0 27					.word	Unary_Random             ; $a8 random(
>1fa6	2a 28					.word	Unary_Page               ; $a9 page
>1fa8	8a 2c					.word	MInt32True               ; $aa true
>1faa	8e 2c					.word	MInt32False              ; $ab false
>1fac	f5 27					.word	Unary_Min                ; $ac min(
>1fae	f9 27					.word	Unary_Max                ; $ad max(
>1fb0	02 29					.word	UnarySys                 ; $ae sys(
>1fb2	ab 28					.word	UnaryTimer               ; $af timer(
>1fb4	3a 26					.word	EventFunction            ; $b0 event(
>1fb6	d4 28					.word	UnaryGet                 ; $b1 get(
>1fb8	c4 28					.word	UnaryInkey               ; $b2 inkey(
>1fba	7b 28					.word	UnaryAlloc               ; $b3 alloc(
>1fbc	3b 29					.word	ExecChr                  ; $b4 chr$(
>1fbe	6b 29					.word	ExecLeft                 ; $b5 left$(
>1fc0	88 29					.word	ExecMid                  ; $b6 mid$(
>1fc2	b0 29					.word	ExecRight                ; $b7 right$(
>1fc4	1d 24					.word	Event_Str                ; $b8 str$(
>1fc6	4c 24					.word	UnaryVal                 ; $b9 val(
>1fc8	9e 27					.word	UnaryPeek                ; $ba peek(
>1fca	a4 27					.word	UnaryDeek                ; $bb deek(
>1fcc	aa 27					.word	UnaryLeek                ; $bc leek(
>1fce	61 27					.word	UnaryAsc                 ; $bd asc(
>1fd0	55 28					.word	UnaryIntToFloat          ; $be int(
>1fd2	68 28					.word	UnaryFloatToInt          ; $bf float(
>1fd4	4f 24					.word	UnaryIsVal               ; $c0 isval(
>1fd6	52 29					.word	ExecUpper                ; $c1 upper$(
>1fd8	4f 29					.word	ExecLower                ; $c2 lower$(
>1fda	38 28					.word	UnaryReference           ; $c3 @
>1fdc	4e 28					.word	UnaryComplement          ; $c4 ~
>1fde	4b 28					.word	UnaryHexMarker           ; $c5 &
>1fe0	ed 28					.word	UnaryGetString           ; $c6 get$(
>1fe2	f3 28					.word	UnaryInkeyString         ; $c7 inkey$(
>1fe4	2a 29					.word	UnaryMem                 ; $c8 mem
>1fe6	4f 1f					.word	TKErr01                  ; $c9 )
>1fe8	2e 1f					.word	CommandColon             ; $ca :
>1fea	4f 1f					.word	TKErr02                  ; $cb ,
>1fec	4f 1f					.word	TKErr03                  ; $cc ;
>1fee	72 1e					.word	Command_Rem2             ; $cd '
>1ff0	4f 1f					.word	TKErr07                  ; $ce to
>1ff2	4f 1f					.word	TKErr05                  ; $cf step
>1ff4	84 1d					.word	CallProc                 ; $d0 proc
>1ff6	9c 1b					.word	CommandLocal             ; $d1 local
>1ff8	db 17					.word	Command_Dim              ; $d2 dim
>1ffa	72 1e					.word	Command_Rem              ; $d3 rem
>1ffc	ea 19					.word	CommandLet               ; $d4 let
>1ffe	34 19					.word	Command_Input            ; $d5 input
>2000	2d 19					.word	Command_ELSE             ; $d6 else
>2002	c4 21					.word	Command_VDU              ; $d7 vdu
>2004	e9 1c					.word	Command_Print            ; $d8 print
>2006	92 21					.word	CommandGOTO              ; $d9 goto
>2008	67 21					.word	CommandGOSUB             ; $da gosub
>200a	7a 21					.word	CommandRETURN            ; $db return
>200c	37 1e					.word	CommandData              ; $dc data
>200e	72 17					.word	Command_Assert           ; $dd assert
>2010	ac 1c					.word	Command_Poke             ; $de poke
>2012	b0 1c					.word	Command_Doke             ; $df doke
>2014	b4 1c					.word	Command_Loke             ; $e0 loke
>2016	37 21					.word	Command_Ink              ; $e1 ink
>2018	42 21					.word	Command_Paper            ; $e2 paper
>201a	31 21					.word	Command_CLS              ; $e3 cls
>201c	4d 21					.word	Command_Locate           ; $e4 locate
>201e	2f 1f					.word	CommandBreak             ; $e5 break
>2020	28 1f					.word	CommandAssemblerLabel    ; $e6 .

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.2022					Group1Vectors:
>2022	80 17					.word	CommandClear             ; $86 clear
>2024	43 1b					.word	CommandLoad              ; $87 load
>2026	58 1b					.word	CommandSave              ; $88 save
>2028	68 1a					.word	CommandList              ; $89 list
>202a	9e 1c					.word	Command_New              ; $8a new
>202c	ad 1e					.word	Command_Run              ; $8b run
>202e	0c 1e					.word	CommandRead              ; $8c read
>2030	40 1e					.word	CommandRestore           ; $8d restore
>2032	17 21					.word	CommandEnd               ; $8e end
>2034	12 21					.word	CommandStop              ; $8f stop
>2036	1a 21					.word	CommandXemu              ; $90 xemu
>2038	4a 1f					.word	Unimplemented            ; $91 code
>203a	4a 1f					.word	Unimplemented            ; $92 pass

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c0d					procList:
>0c0d							.fill 	2		 					; terminated by name high being zero.
.0c0f					yInLine:
>0c0f							.fill 	1
.203c					FindProcedure:
.203c	8c 0f 0c	sty $0c0f			sty 	yInLine 					; save current position.
.203f	20 fa 20	jsr $20fa			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2042	85 2c		sta $2c				sta 	temp1
.2044	ad 0d 0c	lda $0c0d			lda		procList 					; put procList address in temp2
.2047	85 2e		sta $2e				sta 	temp2
.2049	ad 0e 0c	lda $0c0e			lda 	procList+1
.204c	85 2f		sta $2f				sta 	temp2+1
.204e	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2050					_FPLoop:
.2050	b1 2e		lda ($2e),y			lda 	(temp2),y
.2052	f0 4f		beq $20a3			beq 	_FPError 					; if so, we don't know this procedure.
.2054	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2056	c8		iny				iny
.2057	b1 2e		lda ($2e),y			lda 	(temp2),y
.2059	85 2a		sta $2a				sta 	temp0
.205b	c8		iny				iny
.205c	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.205e	c5 2c		cmp $2c				cmp 	temp1
.2060	d0 2b		bne $208d			bne 	_FPNext 					; hash is different, go to next.
.2062	38		sec				sec
.2063	ad 0f 0c	lda $0c0f			lda 	yInLine 					; position in line must be at least 4
.2066	e9 04		sbc #$04			sbc 	#4
.2068	18		clc				clc
.2069	65 28		adc $28				adc 	codePtr
.206b	85 30		sta $30				sta 	temp3
.206d	a5 29		lda $29				lda 	codePtr+1
.206f	69 00		adc #$00			adc 	#0
.2071	85 31		sta $31				sta 	temp3+1
.2073	98		tya				tya
.2074	48		pha				pha
.2075	a0 04		ldy #$04			ldy 	#4
.2077					_FPCName:
.2077	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2079	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.207b	d0 0e		bne $208b			bne 	_FPpulYNext 				; if different go to next one.
.207d	c8		iny				iny
.207e	c9 3a		cmp #$3a			cmp 	#$3A
.2080	90 f5		bcc $2077			bcc 	_FPCName 					; compare the whole lot....
.2082	68		pla				pla 								; throw away the saved Y
.2083	98		tya				tya 								; length of name is Y-4
.2084	38		sec				sec
.2085	e9 04		sbc #$04			sbc 	#4
.2087	ac 0f 0c	ldy $0c0f			ldy 	yInLine  					; get the original Y back
.208a	60		rts				rts
.208b					_FPpulYNext:
.208b	68		pla				pla
.208c	a8		tay				tay
.208d					_FPNext:
.208d	c8		iny				iny 								; next procedure record.
.208e	10 c0		bpl $2050			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2090	98		tya				tya 								; subtract 128 from Y
.2091	38		sec				sec
.2092	e9 80		sbc #$80			sbc 	#128
.2094	a8		tay				tay
.2095	18		clc				clc 								; add 128 to temp2, so we can have more than
.2096	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2098	69 80		adc #$80			adc 	#128
.209a	85 2e		sta $2e				sta 	temp2
.209c	90 b2		bcc $2050			bcc 	_FPLoop
.209e	e6 2f		inc $2f				inc 	temp2+1
.20a0	4c 50 20	jmp $2050			jmp 	_FPLoop
.20a3					_FPError:
.20a3	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.20a5	20 8e 11	jsr $118e		jsr	errorHandler
.20a8					ScanProc:
.20a8	98		tya				tya
.20a9	48		pha				pha
.20aa	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.20ac	8d 0d 0c	sta $0c0d			sta 	procList
.20af	a5 36		lda $36				lda 	lowMemory+1
.20b1	8d 0e 0c	sta $0c0e			sta 	procList+1
.20b4	20 3d 1f	jsr $1f3d			jsr 	ResetCodeAddress 			; back to the start.
.20b7					_ScanLoop:
.20b7	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.20b9	b1 28		lda ($28),y			lda 	(codePtr),y
.20bb	f0 2a		beq $20e7			beq 	_ScanExit
.20bd	a0 03		ldy #$03			ldy 	#3							; get first token
.20bf	b1 28		lda ($28),y			lda 	(codePtr),y
.20c1	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.20c3	d0 12		bne $20d7			bne 	_ScanNext
.20c5	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.20c7	20 ef 20	jsr $20ef			jsr 	_ScanWrite
.20ca	a5 28		lda $28				lda 	codePtr
.20cc	20 ef 20	jsr $20ef			jsr 	_ScanWrite
.20cf	a0 04		ldy #$04			ldy 	#4 							; start of name part
.20d1	20 fa 20	jsr $20fa			jsr 	CalculateProcedureHash 		; calculate procedure hash
.20d4	20 ef 20	jsr $20ef			jsr 	_ScanWrite					; and write that
.20d7					_ScanNext:
.20d7	18		clc				clc
.20d8	a0 00		ldy #$00			ldy 	#0
.20da	b1 28		lda ($28),y			lda 	(codePtr),y
.20dc	65 28		adc $28				adc 	codePtr
.20de	85 28		sta $28				sta 	codePtr
.20e0	90 d5		bcc $20b7			bcc 	_ScanLoop
.20e2	e6 29		inc $29				inc 	codePtr+1
.20e4	4c b7 20	jmp $20b7			jmp 	_ScanLoop
.20e7					_ScanExit:
.20e7	a9 00		lda #$00			lda 	#0 							; write ending zero.
.20e9	20 ef 20	jsr $20ef			jsr 	_ScanWrite
.20ec	68		pla				pla
.20ed	a8		tay				tay
.20ee	60		rts				rts
.20ef					_ScanWrite:
.20ef	a0 00		ldy #$00			ldy 	#0
.20f1	91 35		sta ($35),y			sta 	(lowMemory),y
.20f3	e6 35		inc $35				inc 	lowMemory
.20f5	d0 02		bne $20f9			bne 	_SWNoCarry
.20f7	e6 36		inc $36				inc 	lowMemory+1
.20f9					_SWNoCarry:
.20f9	60		rts				rts
.20fa					CalculateProcedureHash:
.20fa	a9 00		lda #$00			lda 	#0 							; clear hash.
.20fc	85 2a		sta $2a				sta 	temp0
.20fe					_CPHLoop:
.20fe	18		clc				clc 								; add character and rotate and add carry back in
.20ff	b1 28		lda ($28),y			lda 	(codePtr),y
.2101	65 2a		adc $2a				adc 	temp0
.2103	6a		ror a				ror 	a
.2104	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2106	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2108	b1 28		lda ($28),y			lda 	(codePtr),y
.210a	c8		iny				iny 								; advance incase we go round again.
.210b	c9 3a		cmp #$3a			cmp 	#$3A
.210d	90 ef		bcc $20fe			bcc 	_CPHLoop
.210f	a5 2a		lda $2a				lda 	temp0
.2111	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.2112					CommandStop:
.2112	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2114	20 8e 11	jsr $118e		jsr	errorHandler
.2117					CommandEnd:
.2117	4c f3 2d	jmp $2df3			jmp 	WarmStart
.211a					CommandXemu:
.211a	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.211d					AdvanceNextLine:
.211d	a0 00		ldy #$00			ldy 	#0 							; get offset
.211f	b1 28		lda ($28),y			lda 	(codePtr),y
.2121	18		clc				clc 								; add to codePtr
.2122	65 28		adc $28				adc 	codePtr
.2124	85 28		sta $28				sta 	codePtr
.2126	90 02		bcc $212a			bcc 	_ANLNoCarry
.2128	e6 29		inc $29				inc 	codePtr+1
.212a					_ANLNoCarry:
.212a	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.212c	f0 e9		beq $2117			beq 	CommandEnd 					; execute END
.212e	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2130	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.2131					Command_CLS:
.2131	a2 02		ldx #$02		ldx	#2
.2133	20 6d 11	jsr $116d		jsr	deviceHandler
.2136	60		rts				rts
.2137					Command_Ink:
.2137	a2 00		ldx #$00			ldx 	#0
.2139	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger
.213c	a2 08		ldx #$08		ldx	#8
.213e	20 6d 11	jsr $116d		jsr	deviceHandler
.2141	60		rts				rts
.2142					Command_Paper:
.2142	a2 00		ldx #$00			ldx 	#0
.2144	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger
.2147	a2 12		ldx #$12		ldx	#18
.2149	20 6d 11	jsr $116d		jsr	deviceHandler
.214c	60		rts				rts
.214d					Command_Locate:
.214d	a2 00		ldx #$00			ldx 	#0
.214f	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger
.2152	20 0e 2d	jsr $2d0e			jsr 	CheckComma
.2155	e8		inx				inx
.2156	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger
.2159	98		tya				tya
.215a	48		pha				pha
.215b	a4 49		ldy $49				ldy 	esInt0+1
.215d	a5 48		lda $48				lda 	esInt0
.215f	a2 10		ldx #$10		ldx	#16
.2161	20 6d 11	jsr $116d		jsr	deviceHandler
.2164	68		pla				pla
.2165	a8		tay				tay
.2166	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.2167					CommandGOSUB:
.2167	20 fb 26	jsr $26fb			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.216a	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.216c	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.216e	20 a5 2d	jsr $2da5			jsr 	RSClaim
.2171	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2173	20 d1 2d	jsr $2dd1			jsr 	RSSavePosition
.2176	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.2178	f0 1b		beq $2195			beq 	GotoTOS 					; and do a GOTO there.
.217a					CommandRETURN:
.217a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.217c	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.217e	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2180	f0 05		beq $2187			beq 	_isok
.2182	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2184	20 8e 11	jsr $118e		jsr	errorHandler
.2187					_isok:
.2187	a9 01		lda #$01			lda 	#1
.2189	20 e4 2d	jsr $2de4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.218c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.218e	20 c7 2d	jsr $2dc7			jsr 	RSFree
.2191	60		rts				rts
.2192					CommandGOTO:
.2192	20 fb 26	jsr $26fb			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2195					GotoTOS:
.2195	20 3d 1f	jsr $1f3d			jsr 	ResetCodeAddress 			; simple search.
.2198					_GotoSearch:
.2198	a0 00		ldy #$00			ldy 	#0 							; get offset
.219a	b1 28		lda ($28),y			lda 	(codePtr),y
.219c	f0 21		beq $21bf			beq 	_GotoError 					; not found.
.219e	c8		iny				iny									; check LSB match
.219f	b1 28		lda ($28),y			lda 	(codePtr),y
.21a1	d5 48		cmp $48,x			cmp 	esInt0,x
.21a3	d0 07		bne $21ac			bne 	_GotoNext
.21a5	c8		iny				iny
.21a6	b1 28		lda ($28),y			lda 	(codePtr),y
.21a8	d5 50		cmp $50,x			cmp 	esInt1,x
.21aa	f0 10		beq $21bc			beq 	_GotoFound
.21ac					_GotoNext:
.21ac	a0 00		ldy #$00			ldy 	#0 							; go next line
.21ae	b1 28		lda ($28),y			lda 	(codePtr),y
.21b0	18		clc				clc
.21b1	65 28		adc $28				adc 	codePtr
.21b3	85 28		sta $28				sta 	codePtr
.21b5	90 e1		bcc $2198			bcc 	_GotoSearch
.21b7	e6 29		inc $29				inc 	codePtr+1
.21b9	4c 98 21	jmp $2198			jmp 	_GotoSearch
.21bc					_GotoFound:
.21bc	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.21be	60		rts				rts
.21bf					_GotoError:
.21bf	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.21c1	20 8e 11	jsr $118e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.21c4					Command_VDU:
.21c4	20 fb 26	jsr $26fb			jsr 	EvaluateRootInteger 			; get integer at root.
.21c7	a5 48		lda $48				lda 	esInt0
.21c9	a2 14		ldx #$14		ldx	#20
.21cb	20 6d 11	jsr $116d		jsr	deviceHandler
.21ce					_CVNext:
.21ce	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.21d0	c8		iny				iny
.21d1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.21d3	f0 ef		beq $21c4			beq 	Command_VDU
.21d5	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.21d7	d0 0a		bne $21e3			bne 	_CVExit
.21d9	a5 50		lda $50				lda 	esInt1
.21db	a2 14		ldx #$14		ldx	#20
.21dd	20 6d 11	jsr $116d		jsr	deviceHandler
.21e0	4c ce 21	jmp $21ce			jmp 	_CVNext
.21e3	88		dey		_CVExit:dey
.21e4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.21e5					Command_While:
.21e5	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.21e7	a2 04		ldx #$04			ldx 	#4
.21e9	20 a5 2d	jsr $2da5			jsr 	RSClaim 					; create on stack.
.21ec	88		dey				dey
.21ed	a9 01		lda #$01			lda 	#1
.21ef	20 d1 2d	jsr $2dd1			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.21f2	c8		iny				iny
.21f3	20 fd 26	jsr $26fd			jsr 	EvaluateInteger				; get the conditional
.21f6	20 b5 2c	jsr $2cb5			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.21f9	f0 01		beq $21fc			beq 	_CWFail
.21fb	60		rts				rts
.21fc					_CWFail:
.21fc	a9 04		lda #$04			lda 	#4
.21fe	20 c7 2d	jsr $2dc7			jsr 	RSFree 						; close the just opened position.
.2201	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2203	aa		tax				tax
.2204	20 1b 2d	jsr $2d1b			jsr 	ScanForward
.2207	60		rts				rts
.2208					Command_Wend:
.2208	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.220a	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.220c	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.220e	f0 05		beq $2215			beq 	_isok
.2210	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2212	20 8e 11	jsr $118e		jsr	errorHandler
.2215					_isok:
.2215	a9 01		lda #$01			lda 	#1
.2217	20 e4 2d	jsr $2de4			jsr 	RSLoadPosition				; go back until true
.221a	a9 04		lda #$04			lda 	#4
.221c	20 c7 2d	jsr $2dc7			jsr 	RSFree 						; close the loop
.221f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.2220					BinaryProcess:
.2220	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2222	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.2224	0a		asl a				asl 	a
.2225	30 0e		bmi $2235			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2227	18		clc				clc 								; return CC for integer
.2228	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.222a	f0 08		beq $2234			beq 	_BPExit 					; if both integer then return with CC.
.222c	20 3a 22	jsr $223a			jsr 	BPMakeBothFloat 			; make both float
.222f	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2231	95 40		sta $40,x			sta 	esType,x
.2233	38		sec				sec 								; and return with carry set.
.2234					_BPExit:
.2234	60		rts				rts
.2235					_BPStringType:
.2235	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2237	20 8e 11	jsr $118e		jsr	errorHandler
.223a					BPMakeBothFloat:
.223a	e8		inx				inx
.223b	20 3f 22	jsr $223f			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.223e	ca		dex				dex
.223f					BPMakeFloat:
.223f	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.2241	4a		lsr a				lsr 	a
.2242	b0 07		bcs $224b			bcs 	_BPIsFloat 					; already a float if set.
.2244	8a		txa				txa
.2245	a2 1a		ldx #$1a		ldx	#26
.2247	20 8b 15	jsr $158b		jsr	floatingpointHandler
.224a	aa		tax				tax
.224b					_BPIsFloat:
.224b	60		rts				rts
.224c					AddHandler:
.224c	20 9b 24	jsr $249b			jsr 	DereferenceTwo 				; dereference top two on stack.
.224f	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.2251	35 41		and $41,x			and 	esType+1,x
.2253	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2255	d0 10		bne $2267			bne 	_AHStringConcat				; concatenate strings.
.2257	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.225a	b0 03		bcs $225f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.225c	4c 72 2b	jmp $2b72			jmp 	MInt32Add 							; else do it as integer.
.225f					_IsFPOperation:
.225f	8a		txa				txa 								; call the relevant fp routine
.2260	a2 02		ldx #$02		ldx	#2
.2262	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2265	aa		tax				tax
.2266	60		rts				rts
.2267					_AHStringConcat:
.2267	8a		txa				txa 								; handled by the string module.
.2268	a2 04		ldx #$04		ldx	#4
.226a	20 ae 30	jsr $30ae		jsr	stringHandler
.226d	aa		tax				tax
.226e	60		rts				rts
.226f					SubHandler:
.226f	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.2272	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.2275	b0 03		bcs $227a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2277	4c 8c 2b	jmp $2b8c			jmp 	MInt32Sub 							; else do it as integer.
.227a					_IsFPOperation:
.227a	8a		txa				txa 								; call the relevant fp routine
.227b	a2 10		ldx #$10		ldx	#16
.227d	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2280	aa		tax				tax
.2281	60		rts				rts
.2282					MulHandler:
.2282	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.2285	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.2288	b0 03		bcs $228d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.228a	4c a6 2b	jmp $2ba6			jmp 	MInt32Multiply 							; else do it as integer.
.228d					_IsFPOperation:
.228d	8a		txa				txa 								; call the relevant fp routine
.228e	a2 0a		ldx #$0a		ldx	#10
.2290	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2293	aa		tax				tax
.2294	60		rts				rts
.2295					DivHandler:
.2295	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.2298	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.229b	b0 03		bcs $22a0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.229d	4c 63 2a	jmp $2a63			jmp 	MInt32SDivide 							; else do it as integer.
.22a0					_IsFPOperation:
.22a0	8a		txa				txa 								; call the relevant fp routine
.22a1	a2 06		ldx #$06		ldx	#6
.22a3	20 8b 15	jsr $158b		jsr	floatingpointHandler
.22a6	aa		tax				tax
.22a7	60		rts				rts
.22a8					ModHandler:
.22a8	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.22ab	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.22ae	b0 03		bcs $22b3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.22b0	4c e1 2a	jmp $2ae1			jmp 	MInt32Modulus 							; else do it as integer.
.22b3					_IsFPOperation:
.22b3	8a		txa				txa 								; call the relevant fp routine
.22b4	a2 08		ldx #$08		ldx	#8
.22b6	20 8b 15	jsr $158b		jsr	floatingpointHandler
.22b9	aa		tax				tax
.22ba	60		rts				rts
.22bb					XorHandler:
.22bb	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.22be	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.22c1	b0 03		bcs $22c6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.22c3	4c 15 2a	jmp $2a15			jmp 	MInt32Xor 							; else do it as integer.
.22c6					_IsFPOperation:
.22c6	8a		txa				txa 								; call the relevant fp routine
.22c7	a2 08		ldx #$08		ldx	#8
.22c9	20 8b 15	jsr $158b		jsr	floatingpointHandler
.22cc	aa		tax				tax
.22cd	60		rts				rts
.22ce					OrHandler:
.22ce	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.22d1	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.22d4	b0 03		bcs $22d9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.22d6	4c fc 29	jmp $29fc			jmp 	MInt32Or 							; else do it as integer.
.22d9					_IsFPOperation:
.22d9	8a		txa				txa 								; call the relevant fp routine
.22da	a2 08		ldx #$08		ldx	#8
.22dc	20 8b 15	jsr $158b		jsr	floatingpointHandler
.22df	aa		tax				tax
.22e0	60		rts				rts
.22e1					AndHandler:
.22e1	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.22e4	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.22e7	b0 03		bcs $22ec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.22e9	4c e3 29	jmp $29e3			jmp 	MInt32And 							; else do it as integer.
.22ec					_IsFPOperation:
.22ec	8a		txa				txa 								; call the relevant fp routine
.22ed	a2 08		ldx #$08		ldx	#8
.22ef	20 8b 15	jsr $158b		jsr	floatingpointHandler
.22f2	aa		tax				tax
.22f3	60		rts				rts
.22f4					ShlHandler:
.22f4	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.22f7	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.22fa	b0 03		bcs $22ff			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.22fc	4c 75 23	jmp $2375			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.22ff					_IsFPOperation:
.22ff	8a		txa				txa 								; call the relevant fp routine
.2300	a2 08		ldx #$08		ldx	#8
.2302	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2305	aa		tax				tax
.2306	60		rts				rts
.2307					ShrHandler:
.2307	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.230a	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.230d	b0 03		bcs $2312			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.230f	4c 78 23	jmp $2378			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2312					_IsFPOperation:
.2312	8a		txa				txa 								; call the relevant fp routine
.2313	a2 08		ldx #$08		ldx	#8
.2315	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2318	aa		tax				tax
.2319	60		rts				rts
.231a					WordRefHandler:
.231a	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.231d	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.2320	b0 03		bcs $2325			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2322	4c 67 23	jmp $2367			jmp 	MInt32WordIndirect 							; else do it as integer.
.2325					_IsFPOperation:
.2325	8a		txa				txa 								; call the relevant fp routine
.2326	a2 08		ldx #$08		ldx	#8
.2328	20 8b 15	jsr $158b		jsr	floatingpointHandler
.232b	aa		tax				tax
.232c	60		rts				rts
.232d					ByteRefHandler:
.232d	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.2330	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.2333	b0 03		bcs $2338			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2335	4c 6b 23	jmp $236b			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2338					_IsFPOperation:
.2338	8a		txa				txa 								; call the relevant fp routine
.2339	a2 08		ldx #$08		ldx	#8
.233b	20 8b 15	jsr $158b		jsr	floatingpointHandler
.233e	aa		tax				tax
.233f	60		rts				rts
.2340					PowerHandler:
.2340	20 9b 24	jsr $249b			jsr 	DereferenceTwo
.2343	20 20 22	jsr $2220			jsr 	BinaryProcess 				; check to see if either is float
.2346	b0 03		bcs $234b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2348	4c 53 23	jmp $2353			jmp 	PowerInteger 							; else do it as integer.
.234b					_IsFPOperation:
.234b	8a		txa				txa 								; call the relevant fp routine
.234c	a2 16		ldx #$16		ldx	#22
.234e	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2351	aa		tax				tax
.2352	60		rts				rts
.2353					PowerInteger:
.2353	20 3a 22	jsr $223a			jsr 	BPMakeBothFloat				; make them float.
.2356	8a		txa				txa
.2357	a2 16		ldx #$16		ldx	#22
.2359	20 8b 15	jsr $158b		jsr	floatingpointHandler
.235c	a2 12		ldx #$12		ldx	#18
.235e	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2361	aa		tax				tax
.2362	a9 00		lda #$00			lda 	#0 							; make type integer
.2364	95 40		sta $40,x			sta 	esType,x
.2366	60		rts				rts
.2367					Mint32WordIndirect:
.2367	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2369	d0 02		bne $236d			bne 	Min32Indirect
.236b					Mint32ByteIndirect:
.236b	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.236d					Min32Indirect:
.236d	48		pha				pha 								; save the indirection
.236e	20 72 2b	jsr $2b72			jsr 	MInt32Add 					; add a!b a?b
.2371	68		pla				pla 								; and set the type to reference.
.2372	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2374	60		rts				rts
.2375					Mint32ShiftLeftX:
.2375	18		clc				clc 								; CC shift left
.2376	90 01		bcc $2379			bcc 	Mint32Shift
.2378					Mint32ShiftRightX:
.2378	38		sec				sec 								; CS shift right
.2379					Mint32Shift:
.2379	08		php				php 								; save carry flag on stack.
.237a	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.237c	15 59		ora $59,x			ora 	esInt2+1,x
.237e	15 61		ora $61,x			ora 	esInt3+1,x
.2380	d0 1e		bne $23a0			bne 	_MShiftZero
.2382	b5 49		lda $49,x			lda 	esInt0+1,x
.2384	c9 20		cmp #$20			cmp 	#32
.2386	b0 18		bcs $23a0			bcs 	_MShiftZero
.2388					_MShiftLoop:
.2388	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.238a	f0 12		beq $239e			beq 	_MShiftExit
.238c	d6 49		dec $49,x			dec 	esInt0+1,x
.238e	28		plp				plp 								; restore and save carry
.238f	08		php				php
.2390	90 06		bcc $2398			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2392	20 ac 2c	jsr $2cac			jsr 	Mint32ShiftRight
.2395	4c 88 23	jmp $2388			jmp 	_MShiftLoop
.2398					_MShiftLeft:
.2398	20 a3 2c	jsr $2ca3			jsr 	Mint32ShiftLeft
.239b	4c 88 23	jmp $2388			jmp 	_MShiftLoop
.239e					_MShiftExit:
.239e	28		plp				plp	 								; throw saved carry and exit
.239f	60		rts				rts
.23a0					_MShiftZero:
.23a0	4c 8e 2c	jmp $2c8e			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.23a3					PerformComparison:
.23a3	20 9b 24	jsr $249b			jsr 	DereferenceTwo 				; make both values.
.23a6	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.23a8	35 41		and $41,x			and 	esType+1,x
.23aa	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.23ab	30 1d		bmi $23ca			bmi 	_PCIsString
.23ad	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.23af	15 41		ora $41,x			ora 	esType+1,x
.23b1	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.23b2	30 22		bmi $23d6			bmi 	_PCError
.23b4	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.23b6	f0 0f		beq $23c7			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.23b8	20 3a 22	jsr $223a			jsr 	BPMakeBothFloat 			; make both float
.23bb	8a		txa				txa
.23bc	a2 04		ldx #$04		ldx	#4
.23be	20 8b 15	jsr $158b		jsr	floatingpointHandler
.23c1	86 32		stx $32				stx 	tempShort 					; save result
.23c3	aa		tax				tax
.23c4	a5 32		lda $32				lda 	tempShort
.23c6	60		rts				rts
.23c7					_PCIsInteger:
.23c7	4c 2e 2a	jmp $2a2e			jmp 	MInt32Compare
.23ca					_PCIsString:
.23ca	8a		txa				txa 								; A has SP
.23cb	a2 08		ldx #$08		ldx	#8
.23cd	20 ae 30	jsr $30ae		jsr	stringHandler
.23d0	86 32		stx $32				stx 	tempShort 					; save result
.23d2	aa		tax				tax 								; put SP back in X and get result.
.23d3	a5 32		lda $32				lda 	tempShort
.23d5	60		rts				rts
.23d6					_PCError:
.23d6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.23d8	20 8e 11	jsr $118e		jsr	errorHandler
.23db					CompareEquals:
.23db	20 a3 23	jsr $23a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.23de	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.23e0	f0 35		beq $2417			beq  	CompareTrue
.23e2	4c 1a 24	jmp $241a			jmp 	CompareFalse
.23e5					CompareLess:
.23e5	20 a3 23	jsr $23a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.23e8	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.23ea	f0 2b		beq $2417			beq  	CompareTrue
.23ec	4c 1a 24	jmp $241a			jmp 	CompareFalse
.23ef					CompareGreater:
.23ef	20 a3 23	jsr $23a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.23f2	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.23f4	f0 21		beq $2417			beq  	CompareTrue
.23f6	4c 1a 24	jmp $241a			jmp 	CompareFalse
.23f9					CompareNotEquals:
.23f9	20 a3 23	jsr $23a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.23fc	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.23fe	d0 17		bne $2417			bne  	CompareTrue
.2400	4c 1a 24	jmp $241a			jmp 	CompareFalse
.2403					CompareGreaterEq:
.2403	20 a3 23	jsr $23a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2406	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2408	d0 0d		bne $2417			bne  	CompareTrue
.240a	4c 1a 24	jmp $241a			jmp 	CompareFalse
.240d					CompareLessEq:
.240d	20 a3 23	jsr $23a3			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2410	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2412	d0 03		bne $2417			bne  	CompareTrue
.2414	4c 1a 24	jmp $241a			jmp 	CompareFalse
.2417					CompareTrue:
.2417	4c 8a 2c	jmp $2c8a			jmp 	MInt32True
.241a					CompareFalse:
.241a	4c 8e 2c	jmp $2c8e			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.241d					Event_Str:
.241d	20 e7 26	jsr $26e7			jsr 	EvaluateNumeric 			; get a number.
.2420	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.2422	d0 13		bne $2437			bne 	_ESFloat
.2424	20 7a 24	jsr $247a			jsr 	ConvertGetBase 				; get base, or default.
.2427	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2429	85 2a		sta $2a				sta 	temp0
.242b	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.242d	85 2b		sta $2b				sta 	1+(temp0)
.242f	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2431	20 e4 2b	jsr $2be4			jsr 	MInt32ToString 				; convert to string.
.2434	4c 44 24	jmp $2444			jmp 	_ESCloneExit 				; clone and exit.
.2437					_ESFloat:
.2437	20 01 2d	jsr $2d01			jsr 	CheckRightParen 			; check closing )
.243a	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.243d	8a		txa				txa
.243e	a2 14		ldx #$14		ldx	#20
.2440	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2443	aa		tax				tax
.2444					_ESCloneExit:
.2444	8a		txa				txa
.2445	a2 02		ldx #$02		ldx	#2
.2447	20 ae 30	jsr $30ae		jsr	stringHandler
.244a	aa		tax				tax
.244b	60		rts				rts
.244c					UnaryVal:
.244c	38		sec				sec 								; Carry set to return value
.244d	b0 01		bcs $2450			bcs 	ValueMain
.244f					UnaryIsVal:
.244f	18		clc				clc									; Carry clear to return legitimacy
.2450					ValueMain:
.2450	08		php				php 								; save results (CS is value, CC is validation)
.2451	20 f2 26	jsr $26f2			jsr 	EvaluateString
.2454	20 7a 24	jsr $247a			jsr 	ConvertGetBase 				; get base, if any.
.2457	98		tya				tya
.2458	48		pha				pha
.2459	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.245c	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.245e	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2460	20 fc 2a	jsr $2afc			jsr 	MInt32FromString 			; convert it back from a string.
.2463	b0 0c		bcs $2471			bcs 	_VMSuccess 					; successfully converted.
.2465	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.2467	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2469	f0 00		beq $246b			beq 	_VMFailed 	 				; so we failed.
.246b					_VMFailed:
.246b	68		pla				pla
.246c	a8		tay				tay
.246d	28		plp				plp
.246e	4c 8e 2c	jmp $2c8e			jmp 	MInt32False 				; return 0 whatever.
.2471					_VMSuccess:
.2471	68		pla				pla
.2472	a8		tay				tay
.2473	28		plp				plp 								; if CS the it was val() so we want the value.
.2474	b0 03		bcs $2479			bcs 	_VMExit
.2476	4c 8a 2c	jmp $2c8a			jmp 	MInt32True 					; otherwise return true as successful.
.2479					_VMExit:
.2479	60		rts				rts
.247a					ConvertGetBase:
.247a	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.247c	95 49		sta $49,x			sta 	esInt0+1,x
.247e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2480	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2482	d0 0e		bne $2492			bne 	_CGBDone 					; not found, should be )
.2484	e8		inx				inx 								; next level
.2485	c8		iny				iny 								; skip comma.
.2486	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger		; evaluate the base.
.2489	ca		dex				dex
.248a	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.248c	90 08		bcc $2496			bcc 	_CGBValue 					; (it should work as high as 37)
.248e	c9 11		cmp #$11			cmp 	#17
.2490	b0 04		bcs $2496			bcs 	_CGBValue
.2492					_CGBDone:
.2492	20 01 2d	jsr $2d01			jsr 	CheckRightParen
.2495	60		rts				rts
.2496					_CGBValue:
.2496	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2498	20 8e 11	jsr $118e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.249b					DereferenceTwo:
.249b	e8		inx				inx
.249c	20 a0 24	jsr $24a0			jsr 	DereferenceOne
.249f	ca		dex				dex
.24a0					DereferenceOne:
.24a0	b5 40		lda $40,x			lda 	esType,x
.24a2	10 3d		bpl $24e1			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.24a4	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.24a5	b0 3b		bcs $24e2			bcs 	_DRFloatDeReference
.24a7	98		tya				tya
.24a8	48		pha				pha
.24a9	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.24ab	85 2a		sta $2a				sta 	temp0
.24ad	b5 50		lda $50,x			lda 	esInt1,x
.24af	85 2b		sta $2b				sta 	temp0+1
.24b1	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.24b3	95 50		sta $50,x			sta 	esInt1,x
.24b5	95 58		sta $58,x			sta 	esInt2,x
.24b7	95 60		sta $60,x			sta 	esInt3,x
.24b9	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.24bb	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.24bd	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.24be	30 0d		bmi $24cd			bmi 	_DeRefString 				; string, 2 bytes only
.24c0	d0 11		bne $24d3			bne 	_DeRefByte 					; byte 1 byte only
.24c2					_DeRefLong:
.24c2	a0 03		ldy #$03			ldy 	#3
.24c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.24c6	95 60		sta $60,x			sta 	esInt3,x
.24c8	88		dey				dey
.24c9	b1 2a		lda ($2a),y			lda 	(temp0),y
.24cb	95 58		sta $58,x			sta 	esInt2,x
.24cd					_DeRefString:
.24cd	a0 01		ldy #$01			ldy 	#1
.24cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.24d1	95 50		sta $50,x			sta 	esInt1,x
.24d3					_DeRefByte:
.24d3	a0 00		ldy #$00			ldy 	#0
.24d5	b1 2a		lda ($2a),y			lda 	(temp0),y
.24d7	95 48		sta $48,x			sta 	esInt0,x
.24d9	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.24db	29 40		and #$40			and 	#$40
.24dd	95 40		sta $40,x			sta 	esType,x
.24df	68		pla				pla
.24e0	a8		tay				tay
.24e1					_DRNotReference
.24e1	60		rts				rts
.24e2					_DRFloatDereference:
.24e2	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0 					; address to deref in temp0
.24e5	8a		txa				txa
.24e6	a2 1c		ldx #$1c		ldx	#28
.24e8	20 8b 15	jsr $158b		jsr	floatingpointHandler
.24eb	aa		tax				tax
.24ec	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.24ee	95 40		sta $40,x			sta 	esType,x
.24f0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.24f1					EvaluateLevel:
.24f1	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.24f3	b0 1e		bcs $2513			bcs 	_ELStack
.24f5	48		pha				pha 								; save precedence level.
.24f6	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.24f8	95 48		sta $48,x			sta 	esInt0,x
.24fa	95 50		sta $50,x			sta 	esInt1,x
.24fc	95 58		sta $58,x			sta 	esInt2,x
.24fe	95 60		sta $60,x			sta 	esInt3,x
.2500	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.2502	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2504	30 26		bmi $252c			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2506	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2507	30 0f		bmi $2518			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2509	8a		txa				txa 								; stack level in X
.250a	a2 00		ldx #$00		ldx	#0
.250c	20 ba 3b	jsr $3bba		jsr	variableHandler
.250f	aa		tax				tax
.2510	4c 55 25	jmp $2555			jmp		_ELHasTerm
.2513					_ELStack:
.2513	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.2515	20 8e 11	jsr $118e		jsr	errorHandler
.2518					_ELIsConstant:
.2518	4a		lsr a				lsr 	a 							; get the value back
.2519	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.251b	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.251d					_ELCheckNext:
.251d	c8		iny				iny 								; look at next
.251e	b1 28		lda ($28),y			lda 	(codePtr),y
.2520	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2522	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2524	b0 2f		bcs $2555			bcs 	_ELHasTerm 					; done getting the constant.
.2526	20 ee 25	jsr $25ee			jsr 	ELShiftByteIn 				; shift byte into position.
.2529	4c 1d 25	jmp $251d			jmp 	_ELCheckNext
.252c					_ELIsToken:
.252c	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.252e	f0 0f		beq $253f			beq 	_ELIsString
.2530	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2532	d0 5f		bne $2593			bne 	_ELCheckUnary
.2534	8a		txa				txa 								; put X into A
.2535	c8		iny				iny 								; skip over the float marker
.2536	a2 18		ldx #$18		ldx	#24
.2538	20 8b 15	jsr $158b		jsr	floatingpointHandler
.253b	aa		tax				tax 								; restore X
.253c	4c 55 25	jmp $2555			jmp 	_ELHasTerm
.253f					_ELIsString:
.253f	98		tya				tya 								; address of string is codePtr+y+1
.2540	38		sec				sec
.2541	65 28		adc $28				adc 	codePtr
.2543	95 48		sta $48,x			sta 	esInt0,x
.2545	a5 29		lda $29				lda 	codePtr+1
.2547	69 00		adc #$00			adc 	#0
.2549	95 50		sta $50,x			sta 	esInt1,x
.254b	a9 40		lda #$40			lda 	#$40 						; set type to string value
.254d	95 40		sta $40,x			sta 	esType,x
.254f	c8		iny				iny 								; skip over string.
.2550	98		tya				tya
.2551	38		sec				sec									; +1 for the length itself.
.2552	71 28		adc ($28),y			adc 	(codePtr),y
.2554	a8		tay				tay 								; and fall through to term loop code.
.2555					_ELHasTerm:
.2555	b1 28		lda ($28),y			lda 	(codePtr),y
.2557	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2559	90 04		bcc $255f			bcc 	_ELPopExit
.255b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.255d	90 02		bcc $2561			bcc 	_ELHasBinaryTerm
.255f					_ELPopExit:
.255f	68		pla				pla
.2560					_ELExit:
.2560	60		rts				rts
.2561					_ELHasBinaryTerm:
.2561	84 32		sty $32				sty 	tempShort 					; save position
.2563	a8		tay				tay 								; use token as an index and get the precedence.
.2564	b9 96 25	lda $2596,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2567	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2569	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.256b	68		pla				pla 								; restore current level.
.256c	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.256e	b0 f0		bcs $2560			bcs 	_ELExit
.2570	48		pha				pha 								; save current level back on the stack.
.2571	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2573	48		pha				pha
.2574	c8		iny				iny
.2575	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2576	a5 32		lda $32				lda 	tempShort
.2578	20 f1 24	jsr $24f1			jsr 	EvaluateLevel
.257b	ca		dex				dex
.257c	68		pla				pla 								; get the operator back out.
.257d					_ELExecuteA:
.257d	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.257f	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2580	aa		tax				tax
.2581	bd 54 1f	lda $1f54,x			lda 	Group0Vectors,x
.2584	85 2a		sta $2a				sta 	temp0
.2586	bd 55 1f	lda $1f55,x			lda 	Group0Vectors+1,x
.2589	85 2b		sta $2b				sta 	temp0+1
.258b	a6 32		ldx $32				ldx 	tempShort
.258d	20 da 25	jsr $25da			jsr 	_ELCallTemp0
.2590	4c 55 25	jmp $2555			jmp 	_ELHasTerm 					; and loop back round.
.2593					_ELCheckUnary:
.2593	c8		iny				iny 								; skip over token.
.2594	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2596	f0 19		beq $25b1			beq 	_ELMinus
.2598	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.259a	f0 2c		beq $25c8			beq 	_ELIndirect
.259c	c9 98		cmp #$98			cmp 	#TKW_QMARK
.259e	f0 28		beq $25c8			beq 	_ELIndirect
.25a0	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.25a2	f0 39		beq $25dd			beq 	_ELExtension
.25a4	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.25a6	90 04		bcc $25ac			bcc 	_ELUSyntax
.25a8	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.25aa	90 d1		bcc $257d			bcc 	_ELExecuteA 				; if so do that token.
.25ac					_ELUSyntax:
.25ac	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.25ae	20 8e 11	jsr $118e		jsr	errorHandler
.25b1					_ELMinus:
.25b1	20 c6 26	jsr $26c6			jsr 	EvaluateNumericTerm 		; get a number to negate.
.25b4	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.25b6	f0 0a		beq $25c2			beq 	_ELMinusInteger
.25b8	8a		txa				txa
.25b9	a2 0c		ldx #$0c		ldx	#12
.25bb	20 8b 15	jsr $158b		jsr	floatingpointHandler
.25be	aa		tax				tax
.25bf	4c 55 25	jmp $2555			jmp 	_ELHasTerm
.25c2					_ELMinusInteger:
.25c2	20 48 2c	jsr $2c48			jsr 	MInt32Negate 				; do int negate
.25c5	4c 55 25	jmp $2555			jmp 	_ELHasTerm
.25c8					_ELIndirect:
.25c8	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.25c9	20 cf 26	jsr $26cf			jsr 	EvaluateIntegerTerm 		; integer address
.25cc	68		pla				pla
.25cd	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.25cf	f0 02		beq $25d3			beq 	_ELHaveModifier
.25d1	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.25d3					_ELHaveModifier:
.25d3	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.25d5	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.25d7	4c 55 25	jmp $2555			jmp 	_ELHasTerm
.25da					_ELCallTemp0:
.25da	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.25dd					_ELExtension:
.25dd	8a		txa				txa 								; stack pos in A
.25de	20 6c 14	jsr $146c		jsr	extensionHandler
.25e1	aa		tax				tax 								; restore stack
.25e2	4c 55 25	jmp $2555			jmp 	_ELHasTerm
.25e5					UnaryParenthesis:
.25e5	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.25e7	20 f1 24	jsr $24f1			jsr 	EvaluateLevel
.25ea	20 01 2d	jsr $2d01			jsr 	CheckRightParen 			; check for )
.25ed	60		rts				rts
.25ee					ELShiftByteIn:
.25ee	48		pha				pha 								; save bits to shift in.
.25ef	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.25f1	48		pha				pha
.25f2	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.25f4	95 60		sta $60,x			sta 	esInt3,x
.25f6	b5 50		lda $50,x			lda 	esInt1,x
.25f8	95 58		sta $58,x			sta 	esInt2,x
.25fa	b5 48		lda $48,x			lda 	esInt0,x
.25fc	95 50		sta $50,x			sta 	esInt1,x
.25fe	a9 00		lda #$00			lda 	#0
.2600	95 48		sta $48,x			sta 	esInt0,x
.2602	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2603	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2605	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2607					_ELShiftLoop:
.2607	4a		lsr a				lsr 	a
.2608	76 60		ror $60,x			ror 	esInt3,x
.260a	76 58		ror $58,x			ror 	esInt2,x
.260c	76 50		ror $50,x			ror 	esInt1,x
.260e	76 48		ror $48,x			ror 	esInt0,x
.2610	c9 01		cmp #$01			cmp 	#1
.2612	d0 f3		bne $2607			bne 	_ELShiftLoop
.2614	68		pla				pla 								; get original 6 bit value and OR in.
.2615	29 3f		and #$3f			and 	#$3F
.2617	15 48		ora $48,x			ora 	esInt0,x
.2619	95 48		sta $48,x			sta 	esInt0,x
.261b	60		rts				rts
.261c					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>261c	01					.byte	$01			; $86 and
>261d	01					.byte	$01			; $87 or
>261e	01					.byte	$01			; $88 xor
>261f	02					.byte	$02			; $89 >=
>2620	02					.byte	$02			; $8a <=
>2621	02					.byte	$02			; $8b >
>2622	02					.byte	$02			; $8c <
>2623	02					.byte	$02			; $8d =
>2624	02					.byte	$02			; $8e <>
>2625	03					.byte	$03			; $8f +
>2626	03					.byte	$03			; $90 -
>2627	04					.byte	$04			; $91 >>
>2628	04					.byte	$04			; $92 <<
>2629	04					.byte	$04			; $93 *
>262a	04					.byte	$04			; $94 /
>262b	04					.byte	$04			; $95 mod
>262c	05					.byte	$05			; $96 ^
>262d	06					.byte	$06			; $97 !
>262e	06					.byte	$06			; $98 ?
>262f	82					.byte	$82			; $99 repeat
>2630	82					.byte	$82			; $9a while
>2631	82					.byte	$82			; $9b for
>2632	82					.byte	$82			; $9c if
>2633	82					.byte	$82			; $9d defproc
>2634	80					.byte	$80			; $9e until
>2635	80					.byte	$80			; $9f wend
>2636	80					.byte	$80			; $a0 next
>2637	80					.byte	$80			; $a1 then
>2638	80					.byte	$80			; $a2 endif
>2639	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.263a					EventFunction:
.263a	20 30 27	jsr $2730			jsr 	EvaluateReference			; get the variable reference that tracks the event
.263d	b5 40		lda $40,x			lda 	esType,x
.263f	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2641	d0 5b		bne $269e			bne 	_EFType
.2643	20 0e 2d	jsr $2d0e			jsr 	CheckComma
.2646	e8		inx				inx
.2647	20 fd 26	jsr $26fd			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.264a	20 01 2d	jsr $2d01			jsr 	CheckRightParen 			; finish off with the right bracket
.264d	ca		dex				dex
.264e	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2650	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2652	15 58		ora $58,x			ora 	esInt2,x
.2654	15 60		ora $60,x			ora 	esInt3,x
.2656	d0 41		bne $2699			bne 	_EFValue
.2658	98		tya				tya
.2659	48		pha				pha
.265a	8a		txa				txa
.265b	48		pha				pha
.265c	a2 1c		ldx #$1c		ldx	#28
.265e	20 6d 11	jsr $116d		jsr	deviceHandler
.2661	84 2d		sty $2d				sty 	temp1+1
.2663	85 2c		sta $2c				sta 	temp1
.2665	68		pla				pla
.2666	aa		tax				tax
.2667	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.266a	a0 03		ldy #$03			ldy 	#3							; if -ve
.266c	b1 2a		lda ($2a),y			lda 	(temp0),y
.266e	30 23		bmi $2693			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2670	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2672	b1 2a		lda ($2a),y			lda 	(temp0),y
.2674	c8		iny				iny
.2675	11 2a		ora ($2a),y			ora 	(temp0),y
.2677	f0 17		beq $2690			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2679	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.267b	38		sec				sec
.267c	b1 2a		lda ($2a),y			lda 	(temp0),y
.267e	e5 2c		sbc $2c				sbc 	temp1
.2680	c8		iny				iny
.2681	b1 2a		lda ($2a),y			lda 	(temp0),y
.2683	e5 2d		sbc $2d				sbc 	temp1+1
.2685	10 0c		bpl $2693			bpl 	_EFFail 					; if trigger >= timer then return False
.2687	20 a3 26	jsr $26a3			jsr 	SetEventTimer 				; reset the timer for next time.
.268a	20 8a 2c	jsr $2c8a			jsr	 	MInt32True 					; and treutn true as fired.
.268d	68		pla				pla
.268e	a8		tay				tay
.268f	60		rts				rts
.2690					_EFInitialise:
.2690	20 a3 26	jsr $26a3			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2693					_EFFail:
.2693	68		pla				pla
.2694	a8		tay				tay
.2695	20 8e 2c	jsr $2c8e			jsr 	MInt32False
.2698	60		rts				rts
.2699					_EFValue:
.2699	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.269b	20 8e 11	jsr $118e		jsr	errorHandler
.269e					_EFType:
.269e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.26a0	20 8e 11	jsr $118e		jsr	errorHandler
.26a3					SetEventTimer:
.26a3	a0 00		ldy #$00			ldy 	#0
.26a5	18		clc				clc
.26a6	a5 2c		lda $2c				lda 	temp1
.26a8	75 49		adc $49,x			adc 	esInt0+1,x
.26aa	91 2a		sta ($2a),y			sta		(temp0),y
.26ac	c8		iny				iny
.26ad	a5 2d		lda $2d				lda 	temp1+1
.26af	75 51		adc $51,x			adc 	esInt1+1,x
.26b1	91 2a		sta ($2a),y			sta		(temp0),y
.26b3	88		dey				dey
.26b4	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.26b6	d0 04		bne $26bc			bne 	_SETExit 					; zero means initialise.....
.26b8	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.26ba	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.26bc					_SETExit:
.26bc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.26bd					EvaluateTerm:
.26bd	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.26bf	20 f1 24	jsr $24f1			jsr 	EvaluateLevel
.26c2	20 a0 24	jsr $24a0			jsr 	DereferenceOne
.26c5	60		rts				rts
.26c6					EvaluateNumericTerm:
.26c6	20 bd 26	jsr $26bd			jsr 	EvaluateTerm
.26c9	b5 40		lda $40,x			lda 	esType,x
.26cb	0a		asl a				asl 	a 							; see if it's a string.
.26cc	30 09		bmi $26d7			bmi 	ENTType
.26ce	60		rts				rts
.26cf					EvaluateIntegerTerm:
.26cf	20 bd 26	jsr $26bd			jsr 	EvaluateTerm
.26d2	b5 40		lda $40,x			lda 	esType,x
.26d4	d0 01		bne $26d7			bne 	ENTType
.26d6	60		rts				rts
.26d7					ENTType:
.26d7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.26d9	20 8e 11	jsr $118e		jsr	errorHandler
.26dc					EvaluateRoot:
.26dc	a2 00		ldx #$00			ldx 	#0
.26de					Evaluate:
.26de	a9 00		lda #$00			lda 	#0
.26e0	20 f1 24	jsr $24f1			jsr 	EvaluateLevel
.26e3	20 a0 24	jsr $24a0			jsr 	DereferenceOne
.26e6	60		rts				rts
.26e7					EvaluateNumeric:
.26e7	20 de 26	jsr $26de			jsr 	Evaluate
.26ea	b5 40		lda $40,x			lda 	esType,x
.26ec	0a		asl a				asl 	a 							; see if it's a string.
.26ed	30 e8		bmi $26d7			bmi 	ENTType
.26ef	4a		lsr a				lsr 	a 							; shift float flag into carry.
.26f0	4a		lsr a				lsr 	a
.26f1	60		rts				rts
.26f2					EvaluateString:
.26f2	20 de 26	jsr $26de			jsr 	Evaluate
.26f5	b5 40		lda $40,x			lda 	esType,x
.26f7	0a		asl a				asl 	a 							; see if it's a string.
.26f8	10 dd		bpl $26d7			bpl 	ENTType
.26fa	60		rts				rts
.26fb					EvaluateRootInteger:
.26fb	a2 00		ldx #$00			ldx 	#0
.26fd					EvaluateInteger:
.26fd	20 de 26	jsr $26de			jsr 	Evaluate
.2700	b5 40		lda $40,x			lda 	esType,x
.2702	d0 d3		bne $26d7			bne 	ENTType
.2704	60		rts				rts
.2705					EvaluateSmallInteger:
.2705	20 fd 26	jsr $26fd			jsr 	EvaluateInteger
.2708	b5 50		lda $50,x			lda 	esInt1,x
.270a	15 58		ora $58,x			ora 	esInt2,x
.270c	15 60		ora $60,x			ora 	esInt3,x
.270e	d0 03		bne $2713			bne 	_ESIValue
.2710	b5 48		lda $48,x			lda 	esInt0,x
.2712	60		rts				rts
.2713					_ESIValue:
.2713	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2715	20 8e 11	jsr $118e		jsr	errorHandler
.2718					LinkEvaluate:
.2718	aa		tax				tax
.2719	20 de 26	jsr $26de			jsr 	Evaluate
.271c	8a		txa				txa
.271d	60		rts				rts
.271e					LinkEvaluateTerm:
.271e	aa		tax				tax
.271f	20 bd 26	jsr $26bd			jsr 	EvaluateTerm
.2722	8a		txa				txa
.2723	60		rts				rts
.2724					LinkEvaluateInteger:
.2724	aa		tax				tax
.2725	20 fd 26	jsr $26fd			jsr 	EvaluateInteger
.2728	8a		txa				txa
.2729	60		rts				rts
.272a					LinkEvaluateSmallInt:
.272a	aa		tax				tax
.272b	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger
.272e	8a		txa				txa
.272f	60		rts				rts
.2730					EvaluateReference:
.2730	ad 2d 26	lda $262d			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2733	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2734	e9 01		sbc #$01			sbc 	#1
.2736	20 f1 24	jsr $24f1			jsr 	EvaluateLevel
.2739	b5 40		lda $40,x			lda 	esType,x
.273b	10 01		bpl $273e			bpl 	_ERFail
.273d	60		rts				rts
.273e					_ERFail:
.273e	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2740	20 8e 11	jsr $118e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2743					UnaryLen:
.2743	20 51 27	jsr $2751			jsr 	ULStart
.2746					ULFinish:
.2746	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2748	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.274a	20 9d 2c	jsr $2c9d			jsr 	MInt32Set8Bit 				; write it out.
.274d	20 01 2d	jsr $2d01			jsr 	CheckRightParen
.2750	60		rts				rts
.2751	20 f2 26	jsr $26f2	ULStart:jsr 	EvaluateString
.2754	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2756	85 2a		sta $2a				sta 	temp0
.2758	b5 50		lda $50,x			lda 	esInt1,x
.275a	85 2b		sta $2b				sta 	temp0+1
.275c	84 32		sty $32				sty 	tempShort 					; get length
.275e	a0 00		ldy #$00			ldy 	#0
.2760	60		rts				rts
.2761					UnaryAsc:
.2761	20 51 27	jsr $2751			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2764	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2766	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2767	c9 00		cmp #$00			cmp 	#0
.2769	d0 db		bne $2746			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.276b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.276d	20 8e 11	jsr $118e		jsr	errorHandler
.2770					UnaryAbs:
.2770	20 e7 26	jsr $26e7			jsr 	EvaluateNumeric 			; some numeric value
.2773	b0 07		bcs $277c			bcs 	_UAFloat 					; CS then float, so use that function
.2775	20 43 2c	jsr $2c43			jsr 	MInt32Absolute 				; int version
.2778	20 01 2d	jsr $2d01			jsr 	CheckRightParen
.277b	60		rts				rts
.277c					_UAFloat:
.277c	8a		txa				txa 								; float version
.277d	a2 00		ldx #$00		ldx	#0
.277f	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2782	aa		tax				tax
.2783	20 01 2d	jsr $2d01			jsr 	CheckRightParen
.2786	60		rts				rts
.2787					UnarySgn:
.2787	20 e7 26	jsr $26e7			jsr 	EvaluateNumeric 			; same as above but sign of value
.278a	b0 07		bcs $2793			bcs 	_USFloat
.278c	20 7b 2c	jsr $2c7b			jsr 	MInt32Sign
.278f	20 01 2d	jsr $2d01			jsr 	CheckRightParen
.2792	60		rts				rts
.2793					_USFloat:
.2793	8a		txa				txa
.2794	a2 0e		ldx #$0e		ldx	#14
.2796	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2799	aa		tax				tax
.279a	20 01 2d	jsr $2d01			jsr 	CheckRightParen
.279d	60		rts				rts
.279e					UnaryPeek:
.279e	20 ca 27	jsr $27ca			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.27a1	4c be 27	jmp $27be			jmp 	PDLByte0
.27a4					UnaryDeek:
.27a4	20 ca 27	jsr $27ca			jsr 	PDLCode
.27a7	4c b8 27	jmp $27b8			jmp 	PDLByte1
.27aa					UnaryLeek:
.27aa	20 ca 27	jsr $27ca			jsr 	PDLCode
.27ad	a0 03		ldy #$03			ldy 	#3							; read 3-2
.27af	b1 2a		lda ($2a),y			lda 	(temp0),y
.27b1	95 60		sta $60,x			sta 	esInt3,x
.27b3	88		dey				dey
.27b4	b1 2a		lda ($2a),y			lda 	(temp0),y
.27b6	95 58		sta $58,x			sta 	esInt2,x
.27b8					PDLByte1:
.27b8	a0 01		ldy #$01			ldy 	#1
.27ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.27bc	95 50		sta $50,x			sta 	esInt1,x
.27be					PDLByte0:
.27be	a0 00		ldy #$00			ldy 	#0
.27c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.27c2	95 48		sta $48,x			sta 	esInt0,x
.27c4	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.27c6	20 01 2d	jsr $2d01			jsr 	CheckRightParen 			; check right and return
.27c9	60		rts				rts
.27ca					PDLCode:
.27ca	20 fd 26	jsr $26fd			jsr 	EvaluateInteger 			; some address
.27cd	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.27cf	85 2a		sta $2a				sta 	temp0
.27d1	b5 50		lda $50,x			lda 	esInt1,x
.27d3	85 2b		sta $2b				sta 	temp0+1
.27d5	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.27d7	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.27d9	95 58		sta $58,x			sta 	esInt2,x
.27db	95 60		sta $60,x			sta 	esInt3,x
.27dd	84 32		sty $32				sty 	tempShort 					; save Y
.27df	60		rts				rts
.27e0					Unary_Random:
.27e0	20 be 2c	jsr $2cbe			jsr 	MInt32Random 				; generate random number.
.27e3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.27e5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.27e7	f0 08		beq $27f1			beq 	_URExit
.27e9	e8		inx				inx 								; load range 0..r-1 into +1
.27ea	20 fd 26	jsr $26fd			jsr 	EvaluateInteger
.27ed	ca		dex				dex
.27ee	20 e1 2a	jsr $2ae1			jsr 	MInt32Modulus 				; calculate random % modulus
.27f1					_URExit:
.27f1	20 01 2d	jsr $2d01			jsr 	CheckRightParen 			; check right and return
.27f4	60		rts				rts
.27f5					Unary_Min:
.27f5	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.27f7	d0 02		bne $27fb			bne 	UnaryMBody
.27f9					Unary_Max:
.27f9	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.27fb					UnaryMBody:
.27fb	48		pha				pha 								; save comparator on stack, shows min or max
.27fc	20 de 26	jsr $26de			jsr 	Evaluate 					; get the first thing to check
.27ff					_UnaryMLoop:
.27ff	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2801	c8		iny				iny
.2802	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2804	f0 09		beq $280f			beq 	_UnaryMExit
.2806	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2808	f0 07		beq $2811			beq 	_UnaryMCompare
.280a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.280c	20 8e 11	jsr $118e		jsr	errorHandler
.280f					_UnaryMExit:
.280f	68		pla				pla 								; done so throw comparator and return.
.2810	60		rts				rts
.2811					_UnaryMCompare:
.2811	e8		inx				inx 								; get the 2nd thing to evaluate
.2812	20 de 26	jsr $26de			jsr 	Evaluate
.2815	ca		dex				dex
.2816	20 a3 23	jsr $23a3			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2819	85 32		sta $32				sta 	tempShort 					; save result
.281b	68		pla				pla 								; get what we need
.281c	48		pha				pha
.281d	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.281f	d0 de		bne $27ff			bne 	_UnaryMLoop 				; no, try another value.
.2821	20 8e 2c	jsr $2c8e			jsr 	MInt32False 				; promote 2nd to 1st.
.2824	20 72 2b	jsr $2b72			jsr 	MInt32Add
.2827	4c ff 27	jmp $27ff			jmp 	_UnaryMLoop
.282a					Unary_Page:
.282a	20 8e 2c	jsr $2c8e			jsr 	MInt32False 				; zero
.282d	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2830	95 48		sta $48,x			sta 	esInt0,x
.2832	ad c9 0a	lda $0ac9			lda 	basePage+1
.2835	95 50		sta $50,x			sta 	esInt1,x
.2837	60		rts				rts
.2838					UnaryReference:
.2838	a9 0f		lda #$0f			lda 	#15
.283a	20 f1 24	jsr $24f1			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.283d	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.283f	10 05		bpl $2846			bpl 	UType
.2841	a9 00		lda #$00			lda 	#0 							; make it an integer
.2843	95 40		sta $40,x			sta 	esType,x
.2845	60		rts				rts
.2846					UType:
.2846	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2848	20 8e 11	jsr $118e		jsr	errorHandler
.284b					UnaryHexMarker:
.284b	4c cf 26	jmp $26cf			jmp 	EvaluateIntegerTerm
.284e					UnaryComplement:
.284e	20 cf 26	jsr $26cf			jsr 	EvaluateIntegerTerm
.2851	20 62 2c	jsr $2c62			jsr 	MInt32Not
.2854	60		rts				rts
.2855					UnaryIntToFloat:
.2855	20 e7 26	jsr $26e7			jsr 	EvaluateNumeric				; some number
.2858	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.285a	d0 0b		bne $2867			bne 	_UIFExit
.285c	8a		txa				txa 								; convert and set type
.285d	a2 1a		ldx #$1a		ldx	#26
.285f	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2862	aa		tax				tax
.2863	a9 01		lda #$01			lda 	#1
.2865	95 40		sta $40,x			sta 	esType,x
.2867					_UIFExit:
.2867	60		rts				rts
.2868					UnaryFloatToInt:
.2868	20 e7 26	jsr $26e7			jsr 	EvaluateNumeric 			; the number
.286b	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.286d	f0 0b		beq $287a			beq 	_UFIExit
.286f	8a		txa				txa 								; convert to int
.2870	a2 12		ldx #$12		ldx	#18
.2872	20 8b 15	jsr $158b		jsr	floatingpointHandler
.2875	aa		tax				tax
.2876	a9 00		lda #$00			lda 	#0 							; set type
.2878	95 40		sta $40,x			sta 	esType,x
.287a					_UFIExit:
.287a	60		rts				rts
.287b					UnaryAlloc:
.287b	e8		inx				inx 								; evaluate memory required
.287c	20 fd 26	jsr $26fd			jsr 	EvaluateInteger
.287f	20 01 2d	jsr $2d01			jsr 	CheckRightParen
.2882	ca		dex				dex
.2883	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2885	15 61		ora $61,x			ora 	esInt3+1,x
.2887	d0 1d		bne $28a6			bne 	_UABadValue
.2889	20 8e 2c	jsr $2c8e			jsr 	MInt32False					; zero return.
.288c	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.288e	95 50		sta $50,x			sta 	esInt1,x
.2890	a5 35		lda $35				lda 	lowMemory
.2892	95 48		sta $48,x			sta 	esInt0,x
.2894	18		clc				clc 								; add alloc required.
.2895	75 49		adc $49,x			adc 	esInt0+1,x
.2897	85 35		sta $35				sta 	lowMemory
.2899	a5 36		lda $36				lda 	lowMemory+1
.289b	75 51		adc $51,x			adc 	esInt1+1,x
.289d	85 36		sta $36				sta 	lowMemory+1
.289f	b0 05		bcs $28a6			bcs		_UABadValue 				; overflow definitely bad.
.28a1	c5 34		cmp $34				cmp 	highMemory+1
.28a3	b0 01		bcs $28a6			bcs 	_UABadValue 				; out of memory bad.
.28a5	60		rts				rts
.28a6					_UABadValue:
.28a6	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.28a8	20 8e 11	jsr $118e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.28ab					UnaryTimer:
.28ab	20 01 2d	jsr $2d01			jsr 	CheckRightParen 			; no parameters
.28ae	98		tya				tya
.28af	48		pha				pha
.28b0	20 b5 2c	jsr $2cb5			jsr 	MInt32Zero 					; zero result
.28b3	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.28b5	a2 1c		ldx #$1c		ldx	#28
.28b7	20 6d 11	jsr $116d		jsr	deviceHandler
.28ba	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.28bc	95 48		sta $48,x			sta 	esInt0,x
.28be	98		tya				tya
.28bf	95 50		sta $50,x			sta 	esInt1,x
.28c1	68		pla				pla
.28c2	a8		tay				tay
.28c3	60		rts				rts
.28c4					UnaryInkey:
.28c4	20 01 2d	jsr $2d01			jsr 	CheckRightParen
.28c7	86 2a		stx $2a				stx 	temp0
.28c9	a2 0a		ldx #$0a		ldx	#10
.28cb	20 6d 11	jsr $116d		jsr	deviceHandler
.28ce	a6 2a		ldx $2a				ldx 	temp0
.28d0	20 9d 2c	jsr $2c9d			jsr 	MInt32Set8Bit
.28d3	60		rts				rts
.28d4					UnaryGet:
.28d4	20 01 2d	jsr $2d01			jsr 	CheckRightParen
.28d7	86 2a		stx $2a				stx 	temp0
.28d9					_UGLoop:
.28d9	a2 00		ldx #$00		ldx	#0
.28db	20 6d 11	jsr $116d		jsr	deviceHandler
.28de	a2 0a		ldx #$0a		ldx	#10
.28e0	20 6d 11	jsr $116d		jsr	deviceHandler
.28e3	c9 00		cmp #$00			cmp 	#0
.28e5	f0 f2		beq $28d9			beq 	_UGLoop
.28e7	a6 2a		ldx $2a				ldx 	temp0
.28e9	20 9d 2c	jsr $2c9d			jsr 	MInt32Set8Bit
.28ec	60		rts				rts
.28ed					UnaryGetString:
.28ed	20 d4 28	jsr $28d4			jsr 	UnaryGet
.28f0					UGSDoChr:
.28f0	4c 41 29	jmp $2941			jmp 	ChrCode
.28f3					UnaryInkeyString:
.28f3	20 c4 28	jsr $28c4			jsr 	UnaryInkey
.28f6	b5 48		lda $48,x			lda 	esInt0,x
.28f8	d0 f6		bne $28f0			bne 	UGSDoChr
.28fa	8a		txa				txa
.28fb	a2 06		ldx #$06		ldx	#6
.28fd	20 ae 30	jsr $30ae		jsr	stringHandler
.2900	aa		tax				tax
.2901	60		rts				rts
.2902					UnarySys:
.2902	20 fd 26	jsr $26fd			jsr 	EvaluateInteger 				; get the address
.2905	20 01 2d	jsr $2d01			jsr 	CheckRightParen
.2908	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0 						; copy call address to temp0
.290b	8a		txa				txa
.290c	48		pha				pha
.290d	98		tya				tya
.290e	48		pha				pha
.290f	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2912	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2915	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2918	20 27 29	jsr $2927			jsr 	_CallTemp0
.291b	85 32		sta $32				sta 	tempShort 						; restore YX
.291d	68		pla				pla
.291e	a8		tay				tay
.291f	68		pla				pla
.2920	aa		tax				tax
.2921	a5 32		lda $32				lda 	tempShort
.2923	20 9d 2c	jsr $2c9d			jsr 	MInt32Set8Bit 					; return result.
.2926	60		rts				rts
.2927					_CallTemp0:
.2927	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.292a					UnaryMem:
.292a	20 8e 2c	jsr $2c8e			jsr 	MInt32False 					; set to false (e.g. 0)
.292d	38		sec				sec
.292e	a5 33		lda $33				lda 	highMemory 						; calculate value
.2930	e5 35		sbc $35				sbc 	lowMemory
.2932	95 48		sta $48,x			sta 	esInt0,x
.2934	a5 34		lda $34				lda 	highMemory+1
.2936	e5 36		sbc $36				sbc 	lowMemory+1
.2938	95 50		sta $50,x			sta 	esInt1,x
.293a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.293b					ExecChr:
.293b	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger		; character number 0-255
.293e	20 01 2d	jsr $2d01			jsr 	CheckRightParen				; right bracket
.2941					ChrCode:
.2941	98		tya				tya
.2942	48		pha				pha
.2943	8a		txa				txa 								; A = stack
.2944	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.2946	a2 00		ldx #$00		ldx	#0
.2948	20 ae 30	jsr $30ae		jsr	stringHandler
.294b	aa		tax				tax 								; X = stack
.294c	68		pla				pla
.294d	a8		tay				tay
.294e	60		rts				rts
.294f					ExecLower:
.294f	38		sec				sec 								; set carry is lower
.2950	b0 01		bcs $2953			bcs 	ExecUpperLower
.2952					ExecUpper:
.2952	18		clc				clc 								; clear carry is upper
.2953					ExecUpperLower:
.2953	08		php				php 								; save carry
.2954	20 f2 26	jsr $26f2			jsr 	EvaluateString 				; string to stack,X
.2957	20 01 2d	jsr $2d01			jsr 	CheckRightParen 			; check closing right bracket.
.295a	28		plp				plp 								; restore carry, save Y
.295b	98		tya				tya
.295c	48		pha				pha
.295d	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.295f	2a		rol a				rol 	a
.2960	a8		tay				tay 								; now in Y
.2961	8a		txa				txa 								; do the substring and exit.
.2962	a2 0a		ldx #$0a		ldx	#10
.2964	20 ae 30	jsr $30ae		jsr	stringHandler
.2967	aa		tax				tax
.2968	68		pla				pla
.2969	a8		tay				tay
.296a	60		rts				rts
.296b					ExecLeft:
.296b	20 f2 26	jsr $26f2			jsr 	EvaluateString 				; string to stack,X
.296e	20 0e 2d	jsr $2d0e			jsr 	CheckComma
.2971	e8		inx				inx
.2972	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2974	20 9d 2c	jsr $2c9d			jsr 	MInt32Set8Bit
.2977	e8		inx				inx
.2978	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.297b					ExecSubstring:
.297b	ca		dex				dex 								; fix up X
.297c	ca		dex				dex
.297d	20 01 2d	jsr $2d01			jsr 	CheckRightParen 			; check closing right bracket.
.2980	8a		txa				txa 								; do the substring and exit.
.2981	a2 0c		ldx #$0c		ldx	#12
.2983	20 ae 30	jsr $30ae		jsr	stringHandler
.2986	aa		tax				tax
.2987	60		rts				rts
.2988					ExecMid:
.2988	20 f2 26	jsr $26f2			jsr 	EvaluateString 				; string to stack,X
.298b	20 0e 2d	jsr $2d0e			jsr 	CheckComma
.298e	e8		inx				inx
.298f	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2992	c9 00		cmp #$00			cmp 	#0
.2994	f0 15		beq $29ab			beq 	_EMValue
.2996	e8		inx				inx
.2997	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2999	20 9d 2c	jsr $2c9d			jsr 	MInt32Set8Bit
.299c	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.299e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.29a0	f0 d9		beq $297b			beq 	ExecSubString
.29a2	20 0e 2d	jsr $2d0e			jsr 	CheckComma
.29a5	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.29a8	4c 7b 29	jmp $297b			jmp 	ExecSubString
.29ab					_EMValue:
.29ab	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.29ad	20 8e 11	jsr $118e		jsr	errorHandler
.29b0					ExecRight:
.29b0	20 f2 26	jsr $26f2			jsr 	EvaluateString 				; string to stack,X
.29b3	20 0e 2d	jsr $2d0e			jsr 	CheckComma
.29b6	e8		inx				inx
.29b7	20 05 27	jsr $2705			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.29ba	ca		dex				dex
.29bb	98		tya				tya
.29bc	48		pha				pha
.29bd	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.29bf	85 2a		sta $2a				sta 	temp0
.29c1	b5 50		lda $50,x			lda 	esInt1,x
.29c3	85 2b		sta $2b				sta 	temp0+1
.29c5	a0 00		ldy #$00			ldy 	#0 							; point to length
.29c7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.29c9	18		clc				clc 								; add 1.
.29ca	69 01		adc #$01			adc 	#1
.29cc	38		sec				sec
.29cd	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.29cf	f0 02		beq $29d3			beq		_ERMake1 					; if zero, make it 1.
.29d1	b0 02		bcs $29d5			bcs		_EROkay
.29d3					_ERMake1:
.29d3	a9 01		lda #$01			lda 	#1 							; start position.
.29d5					_EROkay:
.29d5	e8		inx				inx 								; set start pos.
.29d6	95 48		sta $48,x			sta 	esInt0,x
.29d8	e8		inx				inx
.29d9	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.29db	20 9d 2c	jsr $2c9d			jsr 	MInt32Set8Bit
.29de	68		pla				pla
.29df	a8		tay				tay
.29e0	4c 7b 29	jmp $297b			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.29e3					MInt32And:
.29e3	b5 48		lda $48,x			lda 	esInt0,x
.29e5	35 49		and $49,x			and 	esInt0+1,x
.29e7	95 48		sta $48,x			sta 	esInt0,x
.29e9	b5 50		lda $50,x			lda 	esInt1,x
.29eb	35 51		and $51,x			and 	esInt1+1,x
.29ed	95 50		sta $50,x			sta 	esInt1,x
.29ef	b5 58		lda $58,x			lda 	esInt2,x
.29f1	35 59		and $59,x			and 	esInt2+1,x
.29f3	95 58		sta $58,x			sta 	esInt2,x
.29f5	b5 60		lda $60,x			lda 	esInt3,x
.29f7	35 61		and $61,x			and 	esInt3+1,x
.29f9	95 60		sta $60,x			sta 	esInt3,x
.29fb	60		rts				rts
.29fc					MInt32Or:
.29fc	b5 48		lda $48,x			lda 	esInt0,x
.29fe	15 49		ora $49,x			ora 	esInt0+1,x
.2a00	95 48		sta $48,x			sta 	esInt0,x
.2a02	b5 50		lda $50,x			lda 	esInt1,x
.2a04	15 51		ora $51,x			ora 	esInt1+1,x
.2a06	95 50		sta $50,x			sta 	esInt1,x
.2a08	b5 58		lda $58,x			lda 	esInt2,x
.2a0a	15 59		ora $59,x			ora 	esInt2+1,x
.2a0c	95 58		sta $58,x			sta 	esInt2,x
.2a0e	b5 60		lda $60,x			lda 	esInt3,x
.2a10	15 61		ora $61,x			ora 	esInt3+1,x
.2a12	95 60		sta $60,x			sta 	esInt3,x
.2a14	60		rts				rts
.2a15					MInt32Xor:
.2a15	b5 48		lda $48,x			lda 	esInt0,x
.2a17	55 49		eor $49,x			eor 	esInt0+1,x
.2a19	95 48		sta $48,x			sta 	esInt0,x
.2a1b	b5 50		lda $50,x			lda 	esInt1,x
.2a1d	55 51		eor $51,x			eor 	esInt1+1,x
.2a1f	95 50		sta $50,x			sta 	esInt1,x
.2a21	b5 58		lda $58,x			lda 	esInt2,x
.2a23	55 59		eor $59,x			eor 	esInt2+1,x
.2a25	95 58		sta $58,x			sta 	esInt2,x
.2a27	b5 60		lda $60,x			lda 	esInt3,x
.2a29	55 61		eor $61,x			eor 	esInt3+1,x
.2a2b	95 60		sta $60,x			sta 	esInt3,x
.2a2d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2a2e					MInt32Compare:
.2a2e	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2a30	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2a32	d0 13		bne $2a47			bne 	MInt32Compare2
.2a34	b5 50		lda $50,x			lda 	esInt1,x
.2a36	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2a38	d0 0d		bne $2a47			bne 	MInt32Compare2
.2a3a	b5 58		lda $58,x			lda 	esInt2,x
.2a3c	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2a3e	d0 07		bne $2a47			bne 	MInt32Compare2
.2a40	b5 60		lda $60,x			lda 	esInt3,x
.2a42	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2a44	d0 01		bne $2a47			bne 	MInt32Compare2
.2a46	60		rts				rts
.2a47					MInt32Compare2:
.2a47	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2a49	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2a4b	b5 50		lda $50,x			lda		esInt1,x
.2a4d	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2a4f	b5 58		lda $58,x			lda		esInt2,x
.2a51	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2a53	b5 60		lda $60,x			lda		esInt3,x
.2a55	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2a57	50 02		bvc $2a5b			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2a59	49 80		eor #$80			eor 	#$80
.2a5b					_I32LNoOverflow
.2a5b	30 03		bmi $2a60			bmi 	MInt32CLess					; if -ve then return $FF
.2a5d	a9 01		lda #$01			lda 	#$01						; else return $01
.2a5f	60		rts				rts
.2a60					MInt32CLess:
.2a60	a9 ff		lda #$ff			lda 	#$FF
.2a62	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2a63					MInt32SDivide:
.2a63	98		tya				tya  								; save Y, which is the count of negations
.2a64	48		pha				pha
.2a65	a0 00		ldy #$00			ldy 	#0 							; zero count
.2a67	20 7f 2a	jsr $2a7f			jsr 	_MInt32SRemSign 			; unsign TOS
.2a6a	e8		inx				inx 								; unsign TOS+1
.2a6b	20 7f 2a	jsr $2a7f			jsr 	_MInt32SRemSign
.2a6e	ca		dex				dex
.2a6f	98		tya				tya 								; save sign count on stack
.2a70	48		pha				pha
.2a71	20 88 2a	jsr $2a88			jsr 	MInt32UDivide 				; unsigned division
.2a74	68		pla				pla 								; get sign count back
.2a75	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2a77	f0 03		beq $2a7c			beq 	_I32SNoNeg
.2a79	20 48 2c	jsr $2c48			jsr 	MInt32Negate
.2a7c					_I32SNoNeg:
.2a7c	68		pla				pla 								; restoe Y and exit
.2a7d	a8		tay				tay
.2a7e	60		rts				rts
.2a7f					_MInt32SRemSign:
.2a7f	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2a81	10 04		bpl $2a87			bpl 	_MInt32SRSExit
.2a83	c8		iny				iny 								; increment the sign count
.2a84	20 48 2c	jsr $2c48			jsr 	MInt32Negate 				; negate the value.
.2a87					_MInt32SRSExit:
.2a87	60		rts				rts
.2a88					MInt32UDivide:
.2a88	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2a8a	15 51		ora $51,x			ora 	esInt1+1,x
.2a8c	15 52		ora $52,x			ora 	esInt1+2,x
.2a8e	15 53		ora $53,x			ora 	esInt1+3,x
.2a90	f0 4a		beq $2adc			beq 	_MInt32DZero
.2a92	e8		inx				inx 								; clear A
.2a93	e8		inx				inx
.2a94	20 8e 2c	jsr $2c8e			jsr 	MInt32False
.2a97	ca		dex				dex
.2a98	ca		dex				dex
.2a99	98		tya				tya 								; save Y on the stack
.2a9a	48		pha				pha
.2a9b	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2a9d					_MInt32UDLoop:
.2a9d	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2a9f	36 50		rol $50,x			rol 	esInt1,x
.2aa1	36 58		rol $58,x			rol 	esInt2,x
.2aa3	36 60		rol $60,x			rol 	esInt3,x
.2aa5	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2aa7	36 52		rol $52,x			rol 	esInt1+2,x
.2aa9	36 5a		rol $5a,x			rol 	esInt2+2,x
.2aab	36 62		rol $62,x			rol 	esInt3+2,x
.2aad	38		sec				sec 								; calculate A-M saving result on the stack
.2aae	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2ab0	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2ab2	48		pha				pha
.2ab3	b5 52		lda $52,x			lda 	esInt1+2,x
.2ab5	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2ab7	48		pha				pha
.2ab8	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2aba	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2abc	48		pha				pha
.2abd	b5 62		lda $62,x			lda 	esInt3+2,x
.2abf	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2ac1	90 10		bcc $2ad3			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2ac3	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2ac5	68		pla				pla
.2ac6	95 5a		sta $5a,x			sta 	esInt2+2,x
.2ac8	68		pla				pla
.2ac9	95 52		sta $52,x			sta 	esInt1+2,x
.2acb	68		pla				pla
.2acc	95 4a		sta $4a,x			sta 	esInt0+2,x
.2ace	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2ad0	4c d6 2a	jmp $2ad6			jmp 	_MInt32Next 					; do the next iteration
.2ad3					_MInt32NoSubtract:
.2ad3	68		pla				pla
.2ad4	68		pla				pla
.2ad5	68		pla				pla
.2ad6					_MInt32Next:
.2ad6	88		dey				dey 								; do this 32 times.
.2ad7	d0 c4		bne $2a9d			bne 	_MInt32UDLoop
.2ad9	68		pla				pla 								; restore Y and exit
.2ada	a8		tay				tay
.2adb	60		rts				rts
.2adc					_MInt32DZero:
.2adc	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2ade	20 8e 11	jsr $118e		jsr	errorHandler
.2ae1					MInt32Modulus:
.2ae1	20 88 2a	jsr $2a88			jsr 	MInt32UDivide 				; do the division.
.2ae4	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2ae6	95 60		sta $60,x			sta 	esInt3,x
.2ae8	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2aea	95 58		sta $58,x			sta 	esInt2,x
.2aec	b5 52		lda $52,x			lda 	esInt1+2,x
.2aee	95 50		sta $50,x			sta 	esInt1,x
.2af0	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2af2	95 48		sta $48,x			sta 	esInt0,x
.2af4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c10					fs32Length:
>0c10							.fill 	1
.2af5					LinkInt32FromString:
.2af5	aa		tax				tax
.2af6	98		tya				tya
.2af7	20 fc 2a	jsr $2afc			jsr 	MInt32FromString
.2afa	8a		txa				txa
.2afb	60		rts				rts
.2afc					MInt32FromString:
.2afc	85 32		sta $32				sta 	tempShort 					; save base
.2afe	98		tya				tya
.2aff	48		pha				pha
.2b00	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2b02	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b04	8d 10 0c	sta $0c10			sta 	fs32Length
.2b07	f0 65		beq $2b6e			beq 	_I32FSFail2					; fail if length zero.
.2b09	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2b0b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2b0d	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2b0f	d0 09		bne $2b1a			bne 	_I32FSNotNegative
.2b11	ad 10 0c	lda $0c10			lda 	fs32Length 					; get length back.
.2b14	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2b16	f0 56		beq $2b6e			beq 	_I32FSFail2
.2b18	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2b1a					_I32FSNotNegative:
.2b1a	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2b1c	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2b1e	d0 02		bne $2b22			bne 	_I32FSNN2
.2b20	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2b22					_I32FSNN2:
.2b22	48		pha				pha 								; save base + final sign on stack.
.2b23	20 8e 2c	jsr $2c8e			jsr 	MInt32False 				; zero the return value.
.2b26					_I32FSMainLoop:
.2b26	68		pla				pla 								; get the base back into tempShort
.2b27	48		pha				pha
.2b28	29 7f		and #$7f			and 	#$7F
.2b2a	85 32		sta $32				sta 	tempShort
.2b2c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2b2e	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2b30	90 02		bcc $2b34			bcc 	_I32FSNotLC
.2b32	e9 20		sbc #$20			sbc 	#32
.2b34					_I32FSNotLC:
.2b34	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2b35	e9 30		sbc #$30			sbc 	#"0"
.2b37	90 34		bcc $2b6d			bcc 	_I32FSFail 					; nothing more to do.
.2b39	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2b3b	90 06		bcc $2b43			bcc 	_I32FSValidate
.2b3d	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2b3f	90 2c		bcc $2b6d			bcc 	_I32FSFail
.2b41	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2b43					_I32FSValidate:
.2b43	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2b45	b0 26		bcs $2b6d			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2b47	48		pha				pha 								; save the new digit value.
.2b48	e8		inx				inx 								; put base into next slot up on stack
.2b49	a5 32		lda $32				lda 	tempShort
.2b4b	20 9d 2c	jsr $2c9d			jsr 	MInt32Set8Bit
.2b4e	ca		dex				dex
.2b4f	20 a6 2b	jsr $2ba6			jsr 	MInt32Multiply 				; multiply current by the base
.2b52	e8		inx				inx
.2b53	68		pla				pla  								; put additive into next slot
.2b54	20 9d 2c	jsr $2c9d			jsr 	MInt32Set8Bit
.2b57	ca		dex				dex
.2b58	20 72 2b	jsr $2b72			jsr 	MInt32Add 					; and add it
.2b5b	c8		iny				iny 								; bump the character pointer
.2b5c	cc 10 0c	cpy $0c10			cpy 	fs32Length 					; until > length.
.2b5f	f0 c5		beq $2b26			beq 	_I32FSMainLoop
.2b61	90 c3		bcc $2b26			bcc 	_I32FSMainLoop
.2b63					_I32FSDone:
.2b63	68		pla				pla 								; get base/final sign back
.2b64	10 03		bpl $2b69			bpl 	_I32FSNN3
.2b66	20 48 2c	jsr $2c48			jsr 	MInt32Negate 				; negate the result.
.2b69					_I32FSNN3:
.2b69	68		pla				pla
.2b6a	a8		tay				tay
.2b6b	38		sec				sec
.2b6c	60		rts				rts
.2b6d					_I32FSFail:
.2b6d	68		pla				pla
.2b6e					_I32FSFail2:
.2b6e	68		pla				pla
.2b6f	a8		tay				tay
.2b70	18		clc				clc
.2b71	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2b72					MInt32Add:
.2b72	18		clc				clc
.2b73	b5 48		lda $48,x			lda 	esInt0,x
.2b75	75 49		adc $49,x			adc 	esInt0+1,x
.2b77	95 48		sta $48,x			sta 	esInt0,x
.2b79	b5 50		lda $50,x			lda 	esInt1,x
.2b7b	75 51		adc $51,x			adc 	esInt1+1,x
.2b7d	95 50		sta $50,x			sta 	esInt1,x
.2b7f	b5 58		lda $58,x			lda 	esInt2,x
.2b81	75 59		adc $59,x			adc 	esInt2+1,x
.2b83	95 58		sta $58,x			sta 	esInt2,x
.2b85	b5 60		lda $60,x			lda 	esInt3,x
.2b87	75 61		adc $61,x			adc 	esInt3+1,x
.2b89	95 60		sta $60,x			sta 	esInt3,x
.2b8b	60		rts				rts
.2b8c					MInt32Sub:
.2b8c	38		sec				sec
.2b8d	b5 48		lda $48,x			lda 	esInt0,x
.2b8f	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2b91	95 48		sta $48,x			sta 	esInt0,x
.2b93	b5 50		lda $50,x			lda 	esInt1,x
.2b95	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2b97	95 50		sta $50,x			sta 	esInt1,x
.2b99	b5 58		lda $58,x			lda 	esInt2,x
.2b9b	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2b9d	95 58		sta $58,x			sta 	esInt2,x
.2b9f	b5 60		lda $60,x			lda 	esInt3,x
.2ba1	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2ba3	95 60		sta $60,x			sta 	esInt3,x
.2ba5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2ba6					MInt32Multiply:
.2ba6	e8		inx				inx 								; copy 2nd -> 3rd
.2ba7	20 cc 2b	jsr $2bcc			jsr 	MInt32CopyUp
.2baa	ca		dex				dex
.2bab	20 cc 2b	jsr $2bcc			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2bae	20 8e 2c	jsr $2c8e			jsr 	MInt32False 				; zero 1st.
.2bb1					_I32Loop:
.2bb1	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2bb3	29 01		and #$01			and 	#1
.2bb5	f0 03		beq $2bba			beq 	_I32NoAdd 					; if set
.2bb7	20 72 2b	jsr $2b72			jsr 	MInt32Add 					; add 2nd to 1st.
.2bba					_I32NoAdd:
.2bba	e8		inx				inx 								; shift 2nd left
.2bbb	20 a3 2c	jsr $2ca3			jsr 	MInt32ShiftLeft
.2bbe	e8		inx				inx  								; shift 3rd right
.2bbf	20 ac 2c	jsr $2cac			jsr 	MInt32ShiftRight
.2bc2	20 b5 2c	jsr $2cb5			jsr 	MInt32Zero 					; check if zero.
.2bc5	08		php				php 								; save status bits
.2bc6	ca		dex				dex 	 							; point back to 1st
.2bc7	ca		dex				dex
.2bc8	28		plp				plp 								; get status bits
.2bc9	d0 e6		bne $2bb1			bne 	_I32Loop 					; if non-zero keep going.
.2bcb	60		rts				rts
.2bcc					MInt32CopyUp:
.2bcc	b5 48		lda $48,x			lda 	esInt0,x
.2bce	95 49		sta $49,x			sta 	esInt0+1,x
.2bd0	b5 50		lda $50,x			lda 	esInt1,x
.2bd2	95 51		sta $51,x			sta 	esInt1+1,x
.2bd4	b5 58		lda $58,x			lda 	esInt2,x
.2bd6	95 59		sta $59,x			sta 	esInt2+1,x
.2bd8	b5 60		lda $60,x			lda 	esInt3,x
.2bda	95 61		sta $61,x			sta 	esInt3+1,x
.2bdc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c11					MCharCount:	.fill 	1						; count of converted characters
.2bdd					MLInt32ToString:
.2bdd	aa		tax				tax									; module passes stack in A, base in Y
.2bde	98		tya				tya
.2bdf	20 e4 2b	jsr $2be4			jsr 	MInt32ToString
.2be2	8a		txa				txa
.2be3	60		rts				rts
.2be4					MInt32ToString:
.2be4	48		pha				pha 								; save base
.2be5	85 32		sta $32				sta 	tempShort 					; save target base.
.2be7	a9 00		lda #$00			lda 	#0
.2be9	8d 11 0c	sta $0c11			sta 	MCharCount 					; clear character count to 0
.2bec	98		tya				tya
.2bed	48		pha				pha
.2bee	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2bf0	10 10		bpl $2c02			bpl 	_I32TSUnsigned
.2bf2	48		pha				pha 								; save base on stack.
.2bf3	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2bf5	10 08		bpl $2bff			bpl 	_I32TSNoFlip
.2bf7	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2bf9	20 35 2c	jsr $2c35			jsr 	MI32WriteCharacter
.2bfc	20 48 2c	jsr $2c48			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2bff					_I32TSNoFlip:
.2bff	68		pla				pla 								; get the base back
.2c00	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2c02					_I32TSUnsigned:
.2c02	20 10 2c	jsr $2c10			jsr 	MI32DivideWrite 			; recursive code to output string.
.2c05	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2c07	ad 11 0c	lda $0c11			lda 	MCharCount
.2c0a	91 2a		sta ($2a),y			sta 	(temp0),y
.2c0c	68		pla				pla
.2c0d	a8		tay				tay
.2c0e	68		pla				pla
.2c0f	60		rts				rts
.2c10					MI32DivideWrite:
.2c10	48		pha				pha 								; save the divisor/base
.2c11	e8		inx				inx 								; write in the dividing position.
.2c12	20 9d 2c	jsr $2c9d			jsr 	MInt32Set8Bit
.2c15	ca		dex				dex
.2c16	20 88 2a	jsr $2a88			jsr 	MInt32UDivide 				; divide number by base.
.2c19	68		pla				pla 								; get the base into Y
.2c1a	a8		tay				tay
.2c1b	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2c1d	48		pha				pha
.2c1e	20 b5 2c	jsr $2cb5			jsr 	MInt32Zero 					; is the result zero ?
.2c21	f0 04		beq $2c27			beq 	_I32NoRecurse 				; if so, don't recurse.
.2c23	98		tya				tya 								; put base into A
.2c24	20 10 2c	jsr $2c10			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2c27					_I32NoRecurse:
.2c27	68		pla				pla 								; get the remainder back
.2c28	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2c2a	90 02		bcc $2c2e			bcc 	_I32NotHex
.2c2c	69 06		adc #$06			adc 	#7-1
.2c2e					_I32NotHex:
.2c2e	18		clc				clc 								; make it ASCII
.2c2f	69 30		adc #$30			adc 	#48
.2c31	20 35 2c	jsr $2c35			jsr 	MI32WriteCharacter 			; write the character out
.2c34	60		rts				rts 								; and exit.
.2c35					MI32WriteCharacter:
.2c35	ee 11 0c	inc $0c11			inc 	MCharCount 					; bump count (space for leading count)
.2c38	ac 11 0c	ldy $0c11			ldy 	MCharCount 					; get position
.2c3b	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2c3d	c8		iny				iny
.2c3e	a9 00		lda #$00			lda 	#0
.2c40	91 2a		sta ($2a),y			sta 	(temp0),y
.2c42	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c12					MSeed32:	.fill 	4							; random number seed.
.2c43					MInt32Absolute:
.2c43	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2c45	30 01		bmi $2c48			bmi 	MInt32Negate
.2c47	60		rts				rts
.2c48					MInt32Negate:
.2c48	38		sec				sec 								; subtract from zero.
.2c49	a9 00		lda #$00			lda 	#0
.2c4b	f5 48		sbc $48,x			sbc 	esInt0,x
.2c4d	95 48		sta $48,x			sta 	esInt0,x
.2c4f	a9 00		lda #$00			lda 	#0
.2c51	f5 50		sbc $50,x			sbc 	esInt1,x
.2c53	95 50		sta $50,x			sta 	esInt1,x
.2c55	a9 00		lda #$00			lda 	#0
.2c57	f5 58		sbc $58,x			sbc 	esInt2,x
.2c59	95 58		sta $58,x			sta 	esInt2,x
.2c5b	a9 00		lda #$00			lda 	#0
.2c5d	f5 60		sbc $60,x			sbc 	esInt3,x
.2c5f	95 60		sta $60,x			sta 	esInt3,x
.2c61	60		rts				rts
.2c62					MInt32Not:
.2c62	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2c64	49 ff		eor #$ff			eor 	#$FF
.2c66	95 48		sta $48,x			sta 	esInt0,x
.2c68	b5 50		lda $50,x			lda 	esInt1,x
.2c6a	49 ff		eor #$ff			eor 	#$FF
.2c6c	95 50		sta $50,x			sta 	esInt1,x
.2c6e	b5 58		lda $58,x			lda 	esInt2,x
.2c70	49 ff		eor #$ff			eor 	#$FF
.2c72	95 58		sta $58,x			sta 	esInt2,x
.2c74	b5 60		lda $60,x			lda 	esInt3,x
.2c76	49 ff		eor #$ff			eor 	#$FF
.2c78	95 60		sta $60,x			sta 	esInt3,x
.2c7a	60		rts				rts
.2c7b					MInt32Sign:
.2c7b	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2c7d	30 0b		bmi $2c8a			bmi 	MInt32True 					; if set return -1 (true)
.2c7f	20 b5 2c	jsr $2cb5			jsr 	MInt32Zero 					; is it zero ?
.2c82	f0 0a		beq $2c8e			beq 	MInt32False 				; if zero return 0 (false)
.2c84	20 8e 2c	jsr $2c8e			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2c87	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2c89	60		rts				rts
.2c8a					MInt32True:
.2c8a	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2c8c	d0 02		bne $2c90			bne 	MInt32WriteAll
.2c8e					MInt32False:
.2c8e	a9 00		lda #$00			lda 	#0
.2c90					MInt32WriteAll:
.2c90	95 48		sta $48,x			sta 	esInt0,x
.2c92					MInt32Write123:
.2c92	95 50		sta $50,x			sta 	esInt1,x
.2c94	95 58		sta $58,x			sta 	esInt2,x
.2c96	95 60		sta $60,x			sta 	esInt3,x
.2c98	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2c9a	95 40		sta $40,x			sta 	esType,x
.2c9c	60		rts				rts
.2c9d					MInt32Set8Bit:
.2c9d	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2c9f	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2ca1	f0 ef		beq $2c92			beq		MInt32Write123
.2ca3					MInt32ShiftLeft:
.2ca3	16 48		asl $48,x			asl 	esInt0,x
.2ca5	36 50		rol $50,x			rol	 	esInt1,x
.2ca7	36 58		rol $58,x			rol	 	esInt2,x
.2ca9	36 60		rol $60,x			rol	 	esInt3,x
.2cab	60		rts				rts
.2cac					MInt32ShiftRight:
.2cac	56 60		lsr $60,x			lsr 	esInt3,x
.2cae	76 58		ror $58,x			ror 	esInt2,x
.2cb0	76 50		ror $50,x			ror 	esInt1,x
.2cb2	76 48		ror $48,x			ror 	esInt0,x
.2cb4	60		rts				rts
.2cb5					MInt32Zero:
.2cb5	b5 48		lda $48,x			lda 	esInt0,x
.2cb7	15 50		ora $50,x			ora 	esInt1,x
.2cb9	15 58		ora $58,x			ora 	esInt2,x
.2cbb	15 60		ora $60,x			ora 	esInt3,x
.2cbd	60		rts				rts
.2cbe					MInt32Random:
.2cbe	98		tya				tya
.2cbf	48		pha				pha
.2cc0	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2cc2	ad 12 0c	lda $0c12			lda 	MSeed32+0 					; check the seed isn't zero
.2cc5	d0 03		bne $2cca			bne 	_Random1
.2cc7	a8		tay				tay 								; if so do it 256 times
.2cc8	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2cca					_Random1:
.2cca	0a		asl a				asl 	a
.2ccb	2e 13 0c	rol $0c13			rol 	MSeed32+1
.2cce	2e 14 0c	rol $0c14			rol 	MSeed32+2
.2cd1	2e 15 0c	rol $0c15			rol 	MSeed32+3
.2cd4	90 02		bcc $2cd8			bcc 	_Random2
.2cd6	49 c5		eor #$c5			eor 	#$C5
.2cd8					_Random2:
.2cd8	88		dey				dey
.2cd9	d0 ef		bne $2cca			bne 	_Random1
.2cdb	8d 12 0c	sta $0c12			sta 	MSeed32+0 					; copy the seed in.
.2cde	95 48		sta $48,x			sta 	esInt0,x
.2ce0	ad 13 0c	lda $0c13			lda 	MSeed32+1
.2ce3	95 50		sta $50,x			sta 	esInt1,x
.2ce5	ad 14 0c	lda $0c14			lda 	MSeed32+2
.2ce8	95 58		sta $58,x			sta 	esInt2,x
.2cea	ad 15 0c	lda $0c15			lda 	MSeed32+3
.2ced	95 60		sta $60,x			sta 	esInt3,x
.2cef	68		pla				pla
.2cf0	a8		tay				tay
.2cf1	a9 00		lda #$00			lda 	#0
.2cf3	95 40		sta $40,x			sta 	esType,x
.2cf5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2cf6					CheckToken:
.2cf6	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2cf8	d0 02		bne $2cfc			bne 	_CTError
.2cfa	c8		iny				iny
.2cfb	60		rts				rts
.2cfc					_CTError:
.2cfc	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2cfe	20 8e 11	jsr $118e		jsr	errorHandler
.2d01					CheckRightParen:
.2d01	b1 28		lda ($28),y			lda 	(codePtr),y
.2d03	c8		iny				iny
.2d04	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2d06	d0 01		bne $2d09			bne 	_CRPError
.2d08	60		rts				rts
.2d09					_CRPError:
.2d09	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2d0b	20 8e 11	jsr $118e		jsr	errorHandler
.2d0e					CheckComma:
.2d0e	b1 28		lda ($28),y			lda 	(codePtr),y
.2d10	c8		iny				iny
.2d11	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2d13	d0 01		bne $2d16			bne 	_CCError
.2d15	60		rts				rts
.2d16					_CCError:
.2d16	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2d18	20 8e 11	jsr $118e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2d1b					ScanForward:
.2d1b	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2d1d	86 2d		stx $2d				stx 	temp1+1
.2d1f	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2d21	85 2e		sta $2e				sta 	temp2
.2d23	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2d25	c8		iny				iny
.2d26	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2d28	d0 08		bne $2d32			bne 	_SFNoCheck 					; if so, check token against entered values.
.2d2a	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2d2c	f0 24		beq $2d52			beq 	_SFExit 					; at the same strcture depth.
.2d2e	c5 2d		cmp $2d				cmp 	temp1+1
.2d30	f0 20		beq $2d52			beq 	_SFExit
.2d32					_SFNoCheck:
.2d32	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2d34	90 ed		bcc $2d23			bcc 	_SFLoop
.2d36	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2d38	90 19		bcc $2d53			bcc 	_SFSpecials
.2d3a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2d3c	90 e5		bcc $2d23			bcc 	_SFLoop
.2d3e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2d40	b0 e1		bcs $2d23			bcs 	_SFLoop
.2d42	aa		tax				tax  								; token in X, and look up the adjuster.
.2d43	bd 96 25	lda $2596,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2d46	38		sec				sec 								; convert to an offset ($FF,$01)
.2d47	e9 81		sbc #$81			sbc 	#$81
.2d49	18		clc				clc 								; add to depth
.2d4a	65 2e		adc $2e				adc 	temp2
.2d4c	85 2e		sta $2e				sta 	temp2
.2d4e	10 d3		bpl $2d23			bpl 	_SFLoop 					; +ve okay to continue
.2d50	30 07		bmi $2d59			bmi 	SFError 					; if gone -ve then we have a nesting error
.2d52	60		rts		_SFExit:rts
.2d53					_SFSpecials:
.2d53	20 5e 2d	jsr $2d5e			jsr 	ScannerSkipSpecial
.2d56	4c 23 2d	jmp $2d23			jmp 	_SFLoop
.2d59					SFError:
.2d59	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2d5b	20 8e 11	jsr $118e		jsr	errorHandler
.2d5e					ScannerSkipSpecial:
.2d5e	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2d60	f0 10		beq $2d72			beq 	_SFNextLine
.2d62	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2d64	f0 2b		beq $2d91			beq 	_SFFloatSkip
.2d66	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2d68	f0 02		beq $2d6c			beq 	_SFSkipString
.2d6a	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2d6b	60		rts				rts 								; token.
.2d6c					_SFSkipString:
.2d6c	98		tya				tya
.2d6d	38		sec				sec
.2d6e	71 28		adc ($28),y			adc 	(codePtr),y
.2d70	a8		tay				tay
.2d71	60		rts				rts
.2d72					_SFNextLine:
.2d72	a0 00		ldy #$00			ldy 	#0 							; get offset
.2d74	b1 28		lda ($28),y			lda 	(codePtr),y
.2d76	18		clc				clc 								; add to code pointer.
.2d77	65 28		adc $28				adc 	codePtr
.2d79	85 28		sta $28				sta 	codePtr
.2d7b	90 02		bcc $2d7f			bcc		_SFNLNoCarry
.2d7d	e6 29		inc $29				inc 	codePtr+1
.2d7f					_SFNLNoCarry:
.2d7f	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2d81	d0 0b		bne $2d8e			bne		_SFXNL 						; no go round again
.2d83	a5 2c		lda $2c				lda 	temp1
.2d85	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.2d87	d0 d0		bne $2d59			bne 	SFError 					; read uses this to search for data statements
.2d89	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2d8b	20 8e 11	jsr $118e		jsr	errorHandler
.2d8e	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2d90	60		rts				rts
.2d91					_SFFloatSkip:
.2d91	98		tya				tya 								; skip over an embedded float.
.2d92	18		clc				clc
.2d93	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2d95	a8		tay				tay
.2d96	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.2d97					RSReset:
.2d97	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2d99	85 37		sta $37				sta 	rsPointer
.2d9b	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2d9d	85 38		sta $38				sta 	1+(rsPointer)
.2d9f	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2da1	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2da4	60		rts				rts
.2da5					RSClaim:
.2da5	84 32		sty $32				sty 	tempShort 					; preserve Y
.2da7	48		pha				pha 								; save marker on stack.
.2da8	8a		txa				txa 								; get bytes required.
.2da9	38		sec				sec
.2daa	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2dac	65 37		adc $37				adc 	rsPointer
.2dae	85 37		sta $37				sta 	rsPointer
.2db0	a5 38		lda $38				lda 	rsPointer+1
.2db2	69 ff		adc #$ff			adc 	#$FF
.2db4	85 38		sta $38				sta 	rsPointer+1
.2db6	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2db8	90 08		bcc $2dc2			bcc 	_RSCOverflow
.2dba	68		pla				pla 								; get marker back
.2dbb	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2dbd	91 37		sta ($37),y			sta 	(rsPointer),y
.2dbf	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2dc1	60		rts				rts
.2dc2					_RSCOverflow:
.2dc2	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2dc4	20 8e 11	jsr $118e		jsr	errorHandler
.2dc7					RSFree:
.2dc7	18		clc				clc
.2dc8	65 37		adc $37				adc 	rsPointer
.2dca	85 37		sta $37				sta 	rsPointer
.2dcc	90 02		bcc $2dd0			bcc 	_RSFExit
.2dce	e6 38		inc $38				inc 	rsPointer+1
.2dd0					_RSFExit:
.2dd0	60		rts				rts
.2dd1					RSSavePosition:
.2dd1	84 32		sty $32				sty 	tempShort 					; save Y position
.2dd3	a8		tay				tay 								; this is where we write it.
.2dd4	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2dd6	91 37		sta ($37),y			sta 	(rsPointer),y
.2dd8	c8		iny				iny
.2dd9	a5 29		lda $29				lda 	codePtr+1
.2ddb	91 37		sta ($37),y			sta 	(rsPointer),y
.2ddd	c8		iny				iny
.2dde	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.2de0	91 37		sta ($37),y			sta 	(rsPointer),y
.2de2	a8		tay				tay 								; fix Y back again to original value
.2de3	60		rts				rts
.2de4					RSLoadPosition:
.2de4	a8		tay				tay
.2de5	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.2de7	85 28		sta $28				sta 	codePtr
.2de9	c8		iny				iny
.2dea	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dec	85 29		sta $29				sta 	codePtr+1
.2dee	c8		iny				iny
.2def	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.2df1	a8		tay				tay 								; to Y
.2df2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.2df3					WarmStart:
.2df3	a2 02		ldx #$02		ldx	#2
.2df5	20 6b 17	jsr $176b		jsr	interactionHandler

;******  Return to file: main/main.asm

.2df8					mainHandler:
.2df8	7c fb 2d	jmp ($2dfb,x)			jmp 	(mainVectors,x)
.2dfb					mainVectors:
>2dfb	01 2d					.word CheckRightParen      ; index 0
>2dfd	80 17					.word XCommandClear        ; index 2
>2dff	18 27					.word LinkEvaluate         ; index 4
>2e01	24 27					.word LinkEvaluateInteger  ; index 6
>2e03	2a 27					.word LinkEvaluateSmallInt ; index 8
>2e05	1e 27					.word LinkEvaluateTerm     ; index 10
>2e07	dd 2b					.word MLInt32ToString      ; index 12
>2e09	9e 1c					.word Command_XNew         ; index 14
>2e0b	ad 1e					.word XCommand_Run         ; index 16
>2e0d	b9 1e					.word Command_RunFrom      ; index 18
>2e0f	f5 2a					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.2e11					section_end_main:
.2e11					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2e11					StringChrs:
.2e11	aa		tax				tax 								; set up stack
.2e12	a9 02		lda #$02			lda 	#2
.2e14	20 d4 2e	jsr $2ed4			jsr 	AllocateSoftString
.2e17	98		tya				tya
.2e18	20 fa 2e	jsr $2efa			jsr 	WriteSoftString
.2e1b					StringUpdate:
.2e1b	20 29 2e	jsr $2e29			jsr 	ReturnSoftString
.2e1e	8a		txa				txa
.2e1f	60		rts				rts
.2e20					StringNull:
.2e20	aa		tax				tax
.2e21	a9 01		lda #$01			lda 	#1
.2e23	20 d4 2e	jsr $2ed4			jsr 	AllocateSoftString
.2e26	4c 1b 2e	jmp $2e1b			jmp 	StringUpdate
.2e29					ReturnSoftString:
.2e29	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.2e2b	95 48		sta $48,x			sta 	esInt0,x
.2e2d	a5 3a		lda $3a				lda 	softMemAlloc+1
.2e2f	95 50		sta $50,x			sta 	esInt1,x
.2e31	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.2e33	95 58		sta $58,x			sta 	esInt2,x
.2e35	95 60		sta $60,x			sta 	esInt3,x
.2e37	a9 40		lda #$40			lda 	#$40 						; type string.
.2e39	95 40		sta $40,x			sta 	esType,x
.2e3b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2e3c					STRCompare:
.2e3c	48		pha				pha 								; save A
.2e3d	aa		tax				tax 								; put stack pos in X
.2e3e	98		tya				tya
.2e3f	48		pha				pha
.2e40	20 74 2e	jsr $2e74			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.2e43	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2e45	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e47	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.2e49	90 02		bcc $2e4d			bcc 	_SCNotSmaller
.2e4b	b1 2c		lda ($2c),y			lda 	(temp1),y
.2e4d					_SCNotSmaller:
.2e4d	aa		tax				tax 								; put that in X. We compare this many chars first.
.2e4e					_SCCompareLoop:
.2e4e	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2e50	f0 0c		beq $2e5e			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2e52	ca		dex				dex 								; decrement chars to compare.
.2e53	c8		iny				iny 								; move to next character
.2e54	38		sec				sec 								; calculate s1[y]-s2[y]
.2e55	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e57	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2e59	d0 0a		bne $2e65			bne 	_SCReturnResult 			; if different return sign of A
.2e5b	4c 4e 2e	jmp $2e4e			jmp 	_SCCompareLoop
.2e5e					_SCSameToEndShortest
.2e5e	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2e60	38		sec				sec
.2e61	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e63	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2e65					_SCReturnResult:
.2e65	08		php				php 								; set return to zero preserving PSW.
.2e66	a2 00		ldx #$00			ldx 	#0
.2e68	28		plp				plp
.2e69	f0 05		beq $2e70			beq 	_SCExit 					; two values equal, then exit
.2e6b	ca		dex				dex 								; X = $FF
.2e6c	90 02		bcc $2e70			bcc 	_SCExit 					; if 1st < 2nd then -1
.2e6e	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2e70					_SCExit:
.2e70	68		pla				pla
.2e71	a8		tay				tay
.2e72	68		pla				pla
.2e73	60		rts				rts
.2e74					CopyStringPair:
.2e74	b5 49		lda $49,x			lda 	esInt0+1,x
.2e76	85 2c		sta $2c				sta 	temp1
.2e78	b5 51		lda $51,x			lda 	esInt1+1,x
.2e7a	85 2d		sta $2d				sta 	temp1+1
.2e7c					CopyStringTop:
.2e7c	b5 48		lda $48,x			lda 	esInt0,x
.2e7e	85 2a		sta $2a				sta 	temp0
.2e80	b5 50		lda $50,x			lda 	esInt1,x
.2e82	85 2b		sta $2b				sta 	temp0+1
.2e84	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2e85					StringConcat:
.2e85	aa		tax				tax									; stack pos in X
.2e86	98		tya				tya
.2e87	48		pha				pha
.2e88	20 74 2e	jsr $2e74			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2e8b	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2e8c	a0 00		ldy #$00			ldy 	#0
.2e8e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e90	71 2c		adc ($2c),y			adc 	(temp1),y
.2e92	b0 1c		bcs $2eb0			bcs 	_SCError 					; just too many characters here.
.2e94	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2e96	b0 18		bcs $2eb0			bcs 	_SCError
.2e98	20 d4 2e	jsr $2ed4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2e9b	20 cb 2e	jsr $2ecb			jsr 	CopySoftToStack 			; copy that to the stack.
.2e9e	20 b5 2e	jsr $2eb5			jsr 	SCCopyTemp0 				; copy temp0
.2ea1	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.2ea3	85 2a		sta $2a				sta 	temp0
.2ea5	a5 2d		lda $2d				lda 	temp1+1
.2ea7	85 2b		sta $2b				sta 	temp0+1
.2ea9	20 b5 2e	jsr $2eb5			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2eac	68		pla				pla
.2ead	a8		tay				tay
.2eae	8a		txa				txa 								; and A
.2eaf	60		rts				rts
.2eb0					_SCError:
.2eb0	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2eb2	20 8e 11	jsr $118e		jsr	errorHandler
.2eb5					SCCopyTemp0:
.2eb5	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2eb7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2eb9	85 2e		sta $2e				sta 	temp2
.2ebb					_SCCopyLoop:
.2ebb	a5 2e		lda $2e				lda 	temp2 						; done the lot
.2ebd	f0 0b		beq $2eca			beq 	_SCCopyExit
.2ebf	c6 2e		dec $2e				dec 	temp2
.2ec1	c8		iny				iny 								; get next char
.2ec2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ec4	20 fa 2e	jsr $2efa			jsr 	WriteSoftString 			; write to soft string.
.2ec7	4c bb 2e	jmp $2ebb			jmp 	_SCCopyLoop
.2eca					_SCCopyExit:
.2eca	60		rts				rts
.2ecb					CopySoftToStack:
.2ecb	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2ecd	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2ecf	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.2ed1	95 50		sta $50,x			sta 	esInt1,x
.2ed3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2ed4					AllocateSoftString:
.2ed4	85 32		sta $32				sta 	tempShort 					; save count
.2ed6	98		tya				tya
.2ed7	48		pha				pha
.2ed8	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2eda	d0 09		bne $2ee5			bne 	_ASSDone
.2edc	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.2ede	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2ee0	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2ee2	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2ee3	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.2ee5					_ASSDone:
.2ee5	38		sec				sec 								; allocate downwards enough memory
.2ee6	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2ee8	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.2eea	85 39		sta $39				sta 	softMemAlloc
.2eec	a5 3a		lda $3a				lda 	softMemAlloc+1
.2eee	e9 00		sbc #$00			sbc 	#0
.2ef0	85 3a		sta $3a				sta 	softMemAlloc+1
.2ef2	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2ef4	a8		tay				tay
.2ef5	91 39		sta ($39),y			sta 	(softMemAlloc),y
.2ef7	68		pla				pla
.2ef8	a8		tay				tay
.2ef9	60		rts				rts
.2efa					WriteSoftString:
.2efa	84 32		sty $32				sty 	tempShort 					; save Y
.2efc	48		pha				pha 								; save character on stack
.2efd	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2eff	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.2f01	18		clc				clc
.2f02	69 01		adc #$01			adc 	#1
.2f04	91 39		sta ($39),y			sta 	(softMemAlloc),y
.2f06	a8		tay				tay 								; offset in Y
.2f07	68		pla				pla 								; get char and write.
.2f08	91 39		sta ($39),y			sta 	(softMemAlloc),y
.2f0a	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.2f0c	60		rts				rts
.2f0d					StrClone:
.2f0d	aa		tax				tax 								; set up stack.
.2f0e	98		tya				tya
.2f0f	48		pha				pha
.2f10	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2f12	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.2f14	18		clc				clc
.2f15	69 01		adc #$01			adc 	#1
.2f17	20 d4 2e	jsr $2ed4			jsr 	AllocateSoftString 			; allocate soft memory
.2f1a	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.2f1c	95 48		sta $48,x			sta 	esInt0,x
.2f1e	a5 3a		lda $3a				lda 	softMemAlloc+1
.2f20	95 50		sta $50,x			sta 	esInt1,x
.2f22	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2f24	95 58		sta $58,x			sta 	esInt2,x
.2f26	95 60		sta $60,x			sta 	esInt3,x
.2f28	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2f2a	95 40		sta $40,x			sta 	esType,x
.2f2c	20 b5 2e	jsr $2eb5			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2f2f	68		pla				pla
.2f30	a8		tay				tay
.2f31	8a		txa				txa
.2f32	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2f33					CaseString:
.2f33	48		pha				pha 								; save A and copy to X
.2f34	aa		tax				tax
.2f35	98		tya				tya
.2f36	48		pha				pha
.2f37	20 7c 2e	jsr $2e7c			jsr 	CopyStringTop 				; target string -> temp0
.2f3a	a0 00		ldy #$00			ldy 	#0
.2f3c	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.2f3e	18		clc				clc
.2f3f	69 01		adc #$01			adc 	#1 							; one more for length byte
.2f41	20 d4 2e	jsr $2ed4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2f44	20 cb 2e	jsr $2ecb			jsr 	CopySoftToStack 			; copy that to the stack.
.2f47	a0 00		ldy #$00			ldy 	#0
.2f49	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.2f4b	aa		tax				tax
.2f4c					_CSCopy:
.2f4c	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2f4e	f0 24		beq $2f74			beq 	_CSExit
.2f50	ca		dex				dex
.2f51	c8		iny				iny
.2f52	68		pla				pla 								; check direction
.2f53	48		pha				pha
.2f54	f0 0c		beq $2f62			beq 	_CSUpper
.2f56	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.2f58	c9 41		cmp #$41			cmp 	#"A"
.2f5a	90 12		bcc $2f6e			bcc 	_CSWrite
.2f5c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2f5e	b0 0e		bcs $2f6e			bcs 	_CSWrite
.2f60	90 0a		bcc $2f6c			bcc 	_CSFlipWrite
.2f62					_CSUpper:
.2f62	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.2f64	c9 61		cmp #$61			cmp 	#"a"
.2f66	90 06		bcc $2f6e			bcc 	_CSWrite
.2f68	c9 7b		cmp #$7b			cmp 	#"z"+1
.2f6a	b0 02		bcs $2f6e			bcs 	_CSWrite
.2f6c					_CSFlipWrite:
.2f6c	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2f6e					_CSWrite:
.2f6e	20 fa 2e	jsr $2efa			jsr 	WriteSoftString 			; add to soft string.
.2f71	4c 4c 2f	jmp $2f4c			jmp 	_CSCopy
.2f74					_CSExit:
.2f74	68		pla				pla
.2f75	a8		tay				tay
.2f76	68		pla				pla
.2f77	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2f78					StringSubstring:
.2f78	48		pha				pha
.2f79	aa		tax				tax 								; access stack.
.2f7a	98		tya				tya
.2f7b	48		pha				pha
.2f7c	20 7c 2e	jsr $2e7c			jsr 	CopyStringTop 				; point temp0 to the string.
.2f7f	a0 00		ldy #$00			ldy 	#0 							; get length.
.2f81	b1 2a		lda ($2a),y			lda 	(temp0),Y
.2f83	85 2c		sta $2c				sta 	temp1
.2f85	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2f87	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.2f89	f0 02		beq $2f8d			beq 	_SSBOkay
.2f8b	b0 2a		bcs $2fb7			bcs 	_SSBReturnNull
.2f8d					_SSBOkay:
.2f8d	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.2f8f	18		clc				clc
.2f90	69 01		adc #$01			adc 	#1
.2f92	38		sec				sec
.2f93	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2f95	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2f97	90 02		bcc $2f9b			bcc		_SSBTrunc
.2f99	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2f9b					_SSBTrunc:
.2f9b	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.2f9d	18		clc				clc
.2f9e	69 01		adc #$01			adc 	#1 							; add 1
.2fa0	20 d4 2e	jsr $2ed4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2fa3	20 cb 2e	jsr $2ecb			jsr 	CopySoftToStack 			; copy that to the stack.
.2fa6	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2fa8					_SSBCopyLoop:
.2fa8	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.2faa	f0 0e		beq $2fba			beq 	_SSBExit
.2fac	c6 2d		dec $2d				dec 	temp1+1
.2fae	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.2fb0	20 fa 2e	jsr $2efa			jsr 	WriteSoftString
.2fb3	c8		iny				iny
.2fb4	4c a8 2f	jmp $2fa8			jmp 	_SSBCopyLoop
.2fb7					_SSBReturnNull:
.2fb7	20 be 2f	jsr $2fbe			jsr 	ReturnNull
.2fba					_SSBExit:
.2fba	68		pla				pla
.2fbb	a8		tay				tay
.2fbc	68		pla				pla
.2fbd	60		rts				rts
.2fbe					ReturnNull:
.2fbe	a9 00		lda #$00			lda 	#0 							; clear null string
.2fc0	8d ce 0a	sta $0ace			sta 	NullString
.2fc3	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.2fc5	95 48		sta $48,x			sta 	esInt0,x
.2fc7	a9 0a		lda #$0a			lda 	#NullString >> 8
.2fc9	95 50		sta $50,x			sta 	esInt1,x
.2fcb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c16					srcStrLen:
>0c16							.fill 	1
.2fcc					StringWrite:
.2fcc	aa		tax				tax
.2fcd	48		pha				pha
.2fce	98		tya				tya
.2fcf	48		pha				pha
.2fd0	20 f7 2f	jsr $2ff7			jsr 	CheckOverwriteCurrent
.2fd3	b0 0d		bcs $2fe2			bcs		_SWCopyCurrent
.2fd5	20 35 30	jsr $3035			jsr 	RequiresConcretion
.2fd8	90 0e		bcc $2fe8			bcc 	_SWWriteReference
.2fda	20 98 30	jsr $3098			jsr 	CheckSpecialConcretion
.2fdd	b0 09		bcs $2fe8			bcs 	_SWWriteReference
.2fdf	20 49 30	jsr $3049			jsr 	AllocateHardMemory
.2fe2					_SWCopyCurrent:
.2fe2	20 7c 30	jsr $307c			jsr 	CopyStringToHardMemory
.2fe5	4c f3 2f	jmp $2ff3			jmp 	_SWExit
.2fe8					_SWWriteReference
.2fe8	a0 00		ldy #$00			ldy 	#0
.2fea	a5 2a		lda $2a				lda 	temp0
.2fec	91 2c		sta ($2c),y			sta 	(temp1),y
.2fee	c8		iny				iny
.2fef	a5 2b		lda $2b				lda 	temp0+1
.2ff1	91 2c		sta ($2c),y			sta 	(temp1),y
.2ff3					_SWExit:
.2ff3	68		pla				pla
.2ff4	a8		tay				tay
.2ff5	68		pla				pla
.2ff6	60		rts				rts
.2ff7					CheckOverwriteCurrent:
.2ff7	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2ff9	b5 51		lda $51,x			lda 	esInt1+1,x
.2ffb	85 2b		sta $2b				sta 	temp0+1
.2ffd	b5 49		lda $49,x			lda 	esInt0+1,x
.2fff	85 2a		sta $2a				sta 	temp0
.3001	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3003	8d 16 0c	sta $0c16			sta 	srcStrLen
.3006	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3008	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.300a	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.300c	85 2d		sta $2d				sta 	temp1+1
.300e	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3010	b1 2c		lda ($2c),y			lda 	(temp1),y
.3012	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3014	90 1b		bcc $3031			bcc 	_COCFail 				; in hard memory.
.3016	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3018	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.301a	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.301c	85 2e		sta $2e				sta 	temp2
.301e	c8		iny				iny
.301f	b1 2c		lda ($2c),y			lda 	(temp1),y
.3021	e9 00		sbc #$00			sbc 	#0
.3023	85 2f		sta $2f				sta 	temp2+1
.3025	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3027	b1 2e		lda ($2e),y			lda 	(temp2),y
.3029	38		sec				sec  							; maximum character capacity.
.302a	e9 02		sbc #$02			sbc 	#2
.302c	cd 16 0c	cmp $0c16			cmp 	srcStrLen 				; if >= the required length
.302f	b0 02		bcs $3033			bcs 	_COCCanReuse
.3031					_COCFail:
.3031	18		clc				clc
.3032	60		rts				rts
.3033					_COCCanReuse:
.3033	38		sec				sec
.3034	60		rts				rts
.3035					RequiresConcretion:
.3035	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3037	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3039	b0 0a		bcs $3045			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.303b	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.303d	f0 08		beq $3047			beq 	_RCFail 				; if not, this cannot be soft memory.
.303f	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3041	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3043	90 02		bcc $3047			bcc 	_RCFail 				; so concreting
.3045					_RCSucceed:
.3045	38		sec				sec
.3046	60		rts				rts
.3047					_RCFail:
.3047	18		clc				clc
.3048	60		rts				rts
.3049					AllocateHardMemory:
.3049	98		tya				tya
.304a	48		pha				pha
.304b	ad 16 0c	lda $0c16			lda 	srcStrLen 				; characters in string
.304e	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3050	b0 04		bcs $3056			bcs 	_AHMSetMax 				; max out that amount.
.3052	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3054	90 02		bcc $3058			bcc 	_AHMIsOkay
.3056					_AHMSetMax:
.3056	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3058					_AHMIsOkay:
.3058	48		pha				pha	 							; save size to be allocated
.3059	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.305b	38		sec				sec  							; and copy result to TOS as target address.
.305c	65 33		adc $33				adc 	highMemory
.305e	85 33		sta $33				sta 	highMemory
.3060	a5 34		lda $34				lda 	highMemory+1
.3062	69 ff		adc #$ff			adc 	#$FF
.3064	85 34		sta $34				sta 	highMemory+1
.3066	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3068	68		pla				pla 							; get the total size of the storage block
.3069	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.306b	18		clc				clc
.306c	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.306e	69 01		adc #$01			adc 	#1
.3070	91 2c		sta ($2c),y			sta 	(temp1),y
.3072	a5 34		lda $34				lda 	highMemory+1
.3074	69 00		adc #$00			adc 	#0
.3076	c8		iny				iny
.3077	91 2c		sta ($2c),y			sta 	(temp1),y
.3079	68		pla				pla
.307a	a8		tay				tay
.307b	60		rts				rts
.307c					CopyStringToHardMemory:
.307c	98		tya				tya
.307d	48		pha				pha
.307e	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3080	b1 2c		lda ($2c),y			lda 	(temp1),y
.3082	85 2e		sta $2e				sta 	temp2
.3084	c8		iny				iny
.3085	b1 2c		lda ($2c),y			lda 	(temp1),y
.3087	85 2f		sta $2f				sta 	temp2+1
.3089	ac 16 0c	ldy $0c16			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.308c					_CSTHMLoop:
.308c	b1 2a		lda ($2a),y			lda 	(temp0),y
.308e	91 2e		sta ($2e),y			sta 	(temp2),y
.3090	88		dey				dey
.3091	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3093	d0 f7		bne $308c			bne 	_CSTHMLoop
.3095	68		pla				pla
.3096	a8		tay				tay
.3097	60		rts				rts
.3098					CheckSpecialConcretion:
.3098	ad 16 0c	lda $0c16			lda 	srcStrLen 				; check string is null e.g. length = 0
.309b	f0 02		beq $309f			beq 	_CSCNullString
.309d	18		clc				clc
.309e	60		rts				rts
.309f					_CSCNullString:
.309f	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.30a1	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.30a4	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.30a6	85 2a		sta $2a				sta 	temp0
.30a8	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.30aa	85 2b		sta $2b				sta 	1+(temp0)
.30ac	38		sec				sec
.30ad	60		rts				rts

;******  Return to file: string/string.asm

.30ae					stringHandler:
.30ae	7c b1 30	jmp ($30b1,x)			jmp 	(stringVectors,x)
.30b1					stringVectors:
>30b1	11 2e					.word StringChrs           ; index 0
>30b3	0d 2f					.word StrClone             ; index 2
>30b5	85 2e					.word StringConcat         ; index 4
>30b7	20 2e					.word StringNull           ; index 6
>30b9	3c 2e					.word STRCompare           ; index 8
>30bb	33 2f					.word CaseString           ; index 10
>30bd	78 2f					.word StringSubstring      ; index 12
>30bf	cc 2f					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.30c1					section_end_string:
.30c1					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c17					deTokeniseVector:
>0c17							.fill 	2
.0c19					lastCharacterClass:
>0c19							.fill 	1
.0c1a					indent:
>0c1a							.fill 	1
.30c1					ListLine:
.30c1	48		pha				pha
.30c2	a9 ef		lda #$ef			lda 	#(deTokenPrint) & $FF
.30c4	8d 17 0c	sta $0c17			sta 	deTokeniseVector
.30c7	a9 31		lda #$31			lda 	#(deTokenPrint) >> 8
.30c9	8d 18 0c	sta $0c18			sta 	1+(deTokeniseVector)
.30cc	68		pla				pla
.30cd					Detokenise:
.30cd	18		clc				clc
.30ce	69 06		adc #$06			adc 	#6
.30d0	8d 1a 0c	sta $0c1a			sta 	indent
.30d3	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.30d5	8d 19 0c	sta $0c19			sta 	lastCharacterClass
.30d8	a2 02		ldx #$02			ldx 	#2
.30da	20 8e 2c	jsr $2c8e			jsr 	MInt32False
.30dd	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.30df	b1 28		lda ($28),y			lda 	(codePtr),y
.30e1	95 48		sta $48,x			sta 	esInt0,x
.30e3	c8		iny				iny
.30e4	b1 28		lda ($28),y			lda 	(codePtr),y
.30e6	95 50		sta $50,x			sta 	esInt1,x
.30e8	a9 84		lda #$84			lda 	#LTYLineNumber
.30ea	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.30ed	a9 0a		lda #$0a			lda 	#10 					; base 10
.30ef	20 8e 31	jsr $318e			jsr 	DTPrintInteger 			; print as integer.
.30f2	a0 00		ldy #$00			ldy 	#0 						; get length
.30f4	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.30f6	aa		tax				tax
.30f7					_DTPadOut:
.30f7	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.30f9	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.30fc	e8		inx				inx
.30fd	ec 1a 0c	cpx $0c1a			cpx 	indent
.3100	d0 f5		bne $30f7			bne 	_DTPadOut
.3102	a0 03		ldy #$03			ldy 	#3 						; start position.
.3104					_DTListLoop
.3104	b1 28		lda ($28),y			lda 	(codePtr),y
.3106	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3108	f0 58		beq $3162			beq 	_DTIsString
.310a	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.310c	f0 7c		beq $318a			beq 	_DTIsFloat
.310e	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3110	f0 16		beq $3128			beq 	_DTHexConstant
.3112	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3114	d0 06		bne $311c			bne 	_DTNotEnd
.3116	a9 ff		lda #$ff			lda 	#255 					; print CR
.3118	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.311b	60		rts				rts
.311c					_DTNotEnd:
.311c	c9 00		cmp #$00			cmp 	#0
.311e	30 36		bmi $3156			bmi 	_DTIsToken
.3120	c9 40		cmp #$40			cmp 	#$40
.3122	90 38		bcc $315c			bcc 	_DTIsIdentifier
.3124	a9 0a		lda #$0a			lda 	#10 					; this is the base
.3126	d0 08		bne $3130			bne 	_DTConstant
.3128					_DTHexConstant:
.3128	a9 26		lda #$26			lda 	#"&"
.312a	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.312d	c8		iny				iny
.312e	a9 10		lda #$10			lda 	#16
.3130					_DTConstant:
.3130	48		pha				pha
.3131	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.3133	20 0b 32	jsr $320b			jsr 	DTSwitchMode
.3136	a9 86		lda #$86			lda 	#LTYConstant
.3138	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.313b	a2 02		ldx #$02			ldx 	#2
.313d	8a		txa				txa
.313e	a2 0a		ldx #$0a		ldx	#10
.3140	20 f8 2d	jsr $2df8		jsr	mainHandler
.3143	aa		tax				tax
.3144	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0
.3147	68		pla				pla
.3148	85 32		sta $32				sta 	tempShort
.314a	98		tya				tya
.314b	48		pha				pha
.314c	a5 32		lda $32				lda 	tempShort
.314e	20 8e 31	jsr $318e			jsr 	DTPrintInteger
.3151	68		pla				pla
.3152	a8		tay				tay
.3153	4c 04 31	jmp $3104			jmp 	_DTListLoop
.3156					_DTIsToken:
.3156	20 64 32	jsr $3264			jsr 	DTDecodeToken
.3159	4c 04 31	jmp $3104			jmp 	_DTListLoop
.315c					_DTIsIdentifier:
.315c	20 1d 32	jsr $321d			jsr 	DTIdentifier
.315f	4c 04 31	jmp $3104			jmp 	_DTListLoop
.3162					_DTIsString:
.3162	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3164	20 0b 32	jsr $320b			jsr 	DTSwitchMode
.3167	a9 81		lda #$81			lda 	#LTYString
.3169	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.316c	a9 22		lda #$22			lda 	#'"'						; open quote
.316e	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.3171	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3173	8a		txa				txa
.3174	a2 0a		ldx #$0a		ldx	#10
.3176	20 f8 2d	jsr $2df8		jsr	mainHandler
.3179	aa		tax				tax
.317a	20 5f 1a	jsr $1a5f			jsr 	TOSToTemp0
.317d	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.317f	20 a0 31	jsr $31a0			jsr 	DTPrintLengthPrefix
.3182	a9 22		lda #$22			lda 	#'"'
.3184	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.3187	4c 04 31	jmp $3104			jmp 	_DTListLoop
.318a					_DTIsFloat:
>318a	db						.byte 	$DB
.318b	4c 8a 31	jmp $318a			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1b					tPrintCount:
>0c1b							.fill 	1
.318e					DTPrintInteger:
.318e	48		pha				pha
.318f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3191	85 2a		sta $2a				sta 	temp0
.3193	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3195	85 2b		sta $2b				sta 	1+(temp0)
.3197	68		pla				pla
.3198	a8		tay				tay
.3199	8a		txa				txa
.319a	a2 0c		ldx #$0c		ldx	#12
.319c	20 f8 2d	jsr $2df8		jsr	mainHandler
.319f	aa		tax				tax
.31a0					DTPrintLengthPrefix:
.31a0	aa		tax				tax
.31a1	98		tya				tya
.31a2	48		pha				pha
.31a3	a0 00		ldy #$00			ldy 	#0
.31a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.31a7	8d 1b 0c	sta $0c1b			sta 	tPrintCount
.31aa	f0 1b		beq $31c7			beq 	_DTPLPExit
.31ac					_DTPLPLoop:
.31ac	c8		iny				iny
.31ad	b1 2a		lda ($2a),y			lda 	(temp0),y
.31af	29 7f		and #$7f			and 	#$7F
.31b1	e0 00		cpx #$00			cpx 	#0
.31b3	f0 0a		beq $31bf			beq 	_DTPLPNoCase
.31b5	c9 41		cmp #$41			cmp 	#"A"
.31b7	90 06		bcc $31bf			bcc 	_DTPLPNoCase
.31b9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.31bb	b0 02		bcs $31bf			bcs 	_DTPLPNoCase
.31bd	49 20		eor #$20			eor 	#"A"^"a"
.31bf					_DTPLPNoCase
.31bf	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.31c2	ce 1b 0c	dec $0c1b			dec 	tPrintCount
.31c5	d0 e5		bne $31ac			bne 	_DTPLPLoop
.31c7					_DTPLPExit:
.31c7	68		pla				pla
.31c8	a8		tay				tay
.31c9	60		rts				rts
.31ca					ListOutputCharacter:
.31ca	85 32		sta $32				sta 	tempShort
.31cc	48		pha				pha
.31cd	8a		txa				txa
.31ce	48		pha				pha
.31cf	98		tya				tya
.31d0	48		pha				pha
.31d1	a5 32		lda $32				lda 	tempShort
.31d3	c9 20		cmp #$20			cmp 	#32
.31d5	b0 0c		bcs $31e3			bcs		_LOCHiBit
.31d7	09 40		ora #$40			ora 	#64
.31d9	c9 40		cmp #$40			cmp 	#64
.31db	f0 06		beq $31e3			beq 	_LOCHiBit
.31dd	c9 5b		cmp #$5b			cmp 	#65+26
.31df	b0 02		bcs $31e3			bcs 	_LOCHiBit
.31e1	69 20		adc #$20			adc 	#32
.31e3					_LOCHiBit:
.31e3	20 ec 31	jsr $31ec			jsr 	_LOCCallVector
.31e6	68		pla				pla
.31e7	a8		tay				tay
.31e8	68		pla				pla
.31e9	aa		tax				tax
.31ea	68		pla				pla
.31eb					_LOCExit:
.31eb	60		rts				rts
.31ec					_LOCCallVector:
.31ec	6c 17 0c	jmp ($0c17)			jmp 	(deTokeniseVector)
.31ef					deTokenPrint:
.31ef	c9 00		cmp #$00			cmp 	#0
.31f1	30 06		bmi $31f9			bmi 	_dtpInk
.31f3	a2 16		ldx #$16		ldx	#22
.31f5	20 6d 11	jsr $116d		jsr	deviceHandler
.31f8	60		rts				rts
.31f9	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.31fb	f0 08		beq $3205			beq 	_dtpCR
.31fd	29 07		and #$07			and 	#7
.31ff	a2 08		ldx #$08		ldx	#8
.3201	20 6d 11	jsr $116d		jsr	deviceHandler
.3204	60		rts				rts
.3205					_dtpCR:
.3205	a2 04		ldx #$04		ldx	#4
.3207	20 6d 11	jsr $116d		jsr	deviceHandler
.320a	60		rts				rts
.320b					DTSwitchMode:
.320b	cd 19 0c	cmp $0c19			cmp 	LastCharacterClass
.320e	f0 04		beq $3214			beq 	_DTSMNoChange
.3210	8d 19 0c	sta $0c19			sta 	LastCharacterClass
.3213					_DTSMExit:
.3213	60		rts				rts
.3214					_DTSMNoChange:
.3214	c9 01		cmp #$01			cmp 	#1
.3216	f0 fb		beq $3213			beq 	_DTSMExit
.3218	a9 20		lda #$20			lda 	#" "
.321a	4c ca 31	jmp $31ca			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.321d					DTIdentifier:
.321d	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.321f	20 0b 32	jsr $320b			jsr 	DTSwitchMode
.3222	a9 87		lda #$87			lda 	#LTYIdentifier
.3224	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.3227					_DTILoop:
.3227	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3229	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.322b	d0 02		bne $322f			bne 	_DTINotUS
.322d	a9 5f		lda #$5f			lda 	#"_"
.322f					_DTINotUS:
.322f	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.3232	c8		iny				iny
.3233	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3235	c9 3a		cmp #$3a			cmp 	#$3A
.3237	90 ee		bcc $3227			bcc 	_DTILoop
.3239	c8		iny				iny
.323a	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.323c	f0 25		beq $3263			beq 	_DTIExit 					; no postfix.
.323e	48		pha				pha
.323f	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3241	8d 19 0c	sta $0c19			sta 	LastCharacterClass
.3244	a9 82		lda #$82			lda 	#LTYPunctuation
.3246	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.3249	68		pla				pla
.324a	c9 3b		cmp #$3b			cmp 	#$3B
.324c	f0 10		beq $325e			beq 	_DTIArray
.324e	4a		lsr a				lsr 	a 							; array flag in C
.324f	08		php				php
.3250	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3252	f0 02		beq $3256			beq 	_DTIDollar
.3254	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3256					_DTIDollar:
.3256	49 24		eor #$24			eor 	#"$"
.3258	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.325b	28		plp				plp
.325c	90 05		bcc $3263			bcc 	_DTIExit
.325e					_DTIArray:
.325e	a9 28		lda #$28			lda 	#"("
.3260	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.3263					_DTIExit:
.3263	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3264					DTDecodeToken:
.3264	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3266	b1 28		lda ($28),y			lda 	(codePtr),y
.3268	c9 84		cmp #$84			cmp 	#$84
.326a	b0 05		bcs $3271			bcs 	_DTNotShift
.326c	29 03		and #$03			and 	#3 							; get the shift 1..3
.326e	0a		asl a				asl 	a 							; put 2 x in X
.326f	aa		tax				tax
.3270	c8		iny				iny
.3271					_DTNotShift:
.3271	bd 71 35	lda $3571,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3274	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3276	bd 72 35	lda $3572,x			lda 	TokenTableAddress+1,x
.3279	85 2b		sta $2b				sta 	temp0+1
.327b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.327d	c8		iny				iny 								; consume it.
.327e	aa		tax				tax
.327f	98		tya				tya
.3280	48		pha				pha
.3281					_DTFindText:
.3281	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3283	f0 11		beq $3296			beq 	_DTFoundText
.3285	ca		dex				dex
.3286	a0 00		ldy #$00			ldy 	#0
.3288	38		sec				sec
.3289	b1 2a		lda ($2a),y			lda 	(temp0),y
.328b	65 2a		adc $2a				adc 	temp0
.328d	85 2a		sta $2a				sta 	temp0
.328f	90 f0		bcc $3281			bcc 	_DTFindText
.3291	e6 2b		inc $2b				inc 	temp0+1
.3293	4c 81 32	jmp $3281			jmp 	_DTFindText
.3296					_DTFoundText:
.3296	a0 01		ldy #$01			ldy 	#1 							; get first character
.3298	b1 2a		lda ($2a),y			lda 	(temp0),y
.329a	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.329c	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.329e	90 11		bcc $32b1			bcc 	_DTIsPunctuation
.32a0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32a2	b0 0d		bcs $32b1			bcs 	_DTIsPunctuation
.32a4	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.32a6	20 0b 32	jsr $320b			jsr 	DTSwitchMode
.32a9	a9 83		lda #$83			lda 	#LTYKeyword
.32ab	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.32ae	4c bb 32	jmp $32bb			jmp 	_DTPrint
.32b1					_DTIsPunctuation:
.32b1	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.32b3	20 0b 32	jsr $320b			jsr 	DTSwitchMode
.32b6	a9 82		lda #$82			lda 	#LTYPunctuation
.32b8	20 ca 31	jsr $31ca			jsr 	ListOutputCharacter
.32bb					_DTPrint:
.32bb	a9 01		lda #$01			lda 	#1 							; fix case.
.32bd	20 a0 31	jsr $31a0			jsr 	DTPrintLengthPrefix 		; print it out.
.32c0	a0 00		ldy #$00			ldy 	#0
.32c2	b1 2a		lda ($2a),y			lda 	(temp0),y
.32c4	a8		tay				tay
.32c5	b1 2a		lda ($2a),y			lda 	(temp0),y
.32c7	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.32c9	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.32cb	90 04		bcc $32d1			bcc 	_DTIsNowPunctuation
.32cd	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32cf	90 05		bcc $32d6			bcc 	_DTPExit
.32d1					_DTIsNowPunctuation:
.32d1	a9 01		lda #$01			lda 	#1
.32d3	8d 19 0c	sta $0c19			sta		LastCharacterClass
.32d6					_DTPExit:
.32d6	68		pla				pla
.32d7	a8		tay				tay
.32d8	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c1c					currentSet:
>0c1c							.fill 	1
.32d9					TokenSearch:
.32d9	8a		txa				txa
.32da	48		pha				pha
.32db	98		tya				tya
.32dc	48		pha				pha
.32dd	a9 00		lda #$00			lda 	#0
.32df	8d 1c 0c	sta $0c1c			sta 	currentSet
.32e2					_TSLoop:
.32e2	ad 1c 0c	lda $0c1c			lda 	currentSet 					; 2 x currentset in X
.32e5	0a		asl a				asl 	a
.32e6	aa		tax				tax
.32e7	bd 71 35	lda $3571,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.32ea	85 2a		sta $2a				sta 	temp0
.32ec	bd 72 35	lda $3572,x			lda 	TokenTableAddress+1,x
.32ef	85 2b		sta $2b				sta 	temp0+1
.32f1	20 18 33	jsr $3318			jsr 	TokenSearchOne 				; search one table
.32f4	b0 0d		bcs $3303			bcs 	_TSFound 					; found a token.
.32f6	ee 1c 0c	inc $0c1c			inc 	currentSet 					; next set
.32f9	ad 1c 0c	lda $0c1c			lda 	currentSet
.32fc	c9 04		cmp #$04			cmp 	#4
.32fe	d0 e2		bne $32e2			bne 	_TSLoop 					; back if not done all four.
.3300	18		clc				clc 								; clear carry and exit
.3301	90 10		bcc $3313			bcc 	_TSExit
.3303					_TSFound:
.3303	48		pha				pha 								; save token
.3304	ad 1c 0c	lda $0c1c			lda 	currentSet					; if set zero no shift
.3307	f0 05		beq $330e			beq 	_TSNoShift
.3309	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.330b	20 c7 33	jsr $33c7			jsr 	TokenWrite
.330e					_TSNoShift:
.330e	68		pla				pla 								; get token back
.330f	20 c7 33	jsr $33c7			jsr 	TokenWrite 					; write it
.3312	38		sec				sec 								; carry set indicating success
.3313					_TSExit:
.3313	68		pla				pla
.3314	a8		tay				tay
.3315	68		pla				pla
.3316	aa		tax				tax
.3317	60		rts				rts
.3318					TokenSearchOne:
.3318	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.331a					_TSOLoop:
.331a	a0 00		ldy #$00			ldy 	#0
.331c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.331e	f0 26		beq $3346			beq 	_TSOFail 					; if zero, end of table
.3320	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3323	f0 11		beq $3336			beq 	_TSOCheckText
.3325					_TSONext:
.3325	e8		inx				inx 								; bump token
.3326	a0 00		ldy #$00			ldy 	#0							; get length
.3328	b1 2a		lda ($2a),y			lda 	(temp0),y
.332a	38		sec				sec
.332b	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.332d	85 2a		sta $2a				sta 	temp0
.332f	90 e9		bcc $331a			bcc 	_TSOLoop
.3331	e6 2b		inc $2b				inc 	temp0+1
.3333	4c 1a 33	jmp $331a			jmp 	_TSOLoop
.3336					_TSOCheckText:
.3336	a8		tay				tay 								; compare length downto 1.
.3337					_TSOCheckLoop:
.3337	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3339	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.333c	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.333e	d0 e5		bne $3325			bne 	_TSONext 					; different goto next.
.3340	88		dey				dey 								; do all
.3341	d0 f4		bne $3337			bne 	_TSOCheckLoop
.3343	8a		txa				txa 								; return token in A and carry set
.3344	38		sec				sec
.3345	60		rts				rts
.3346					_TSOFail:
.3346	18		clc				clc
.3347	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3348					TokTest:
.3348	a2 ff		ldx #$ff				ldx 	#$FF
.334a	9a		txs					txs
.334b	a9 68		lda #$68			lda 	#(TokenText1) & $FF
.334d	85 28		sta $28				sta 	codePtr
.334f	a9 33		lda #$33			lda 	#(TokenText1) >> 8
.3351	85 29		sta $29				sta 	1+(codePtr)
.3353	20 68 33	jsr $3368				jsr 	Tokenise
.3356	a2 00		ldx #$00	TokStop:	ldx 	#0
.3358	bd 68 33	lda $3368,x	_TokCheck:	lda 	TokenBytes1,x
.335b	dd 20 0c	cmp $0c20,x				cmp 	tokenBuffer,x
.335e	d0 fe		bne $335e	_TokFail:	bne 	_TokFail
.3360	e8		inx					inx
.3361	c9 80		cmp #$80				cmp 	#$80
.3363	d0 f3		bne $3358				bne 	_TokCheck
.3365	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3368					TokenText1:
.3368					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c1d					tokenHeader:
>0c1d							.fill 	3
.0c20					tokenBuffer:
>0c20							.fill 	256
.0d20					tokenBufferIndex:
>0d20							.fill 	1
.3368					Tokenise:
.3368	20 e0 33	jsr $33e0			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.336b					TokeniseASCIIZ:
.336b	20 f1 33	jsr $33f1			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.336e	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3370	8d 20 0d	sta $0d20			sta 	tokenBufferIndex
.3373	a8		tay				tay 								; start pointer
.3374	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3376	8d 20 0c	sta $0c20			sta 	tokenBuffer
.3379					_TokLoop:
.3379	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.337b	f0 46		beq $33c3			beq 	_TokExit 					; if zero, then exit.
.337d	c8		iny				iny 								; skip over spaces.
.337e	c9 20		cmp #$20			cmp 	#" "
.3380	f0 f7		beq $3379			beq 	_TokLoop
.3382	88		dey				dey 								; point back to character.
.3383	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3385	f0 18		beq $339f			beq 	_TokHexConst
.3387	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3389	f0 23		beq $33ae			beq 	_TokQString
.338b	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.338d	b0 26		bcs $33b5			bcs 	_TokPunctuation
.338f	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3391	b0 29		bcs $33bc			bcs 	_TokIdentifier
.3393	c9 3a		cmp #$3a			cmp 	#"9"+1
.3395	b0 1e		bcs $33b5			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3397	c9 30		cmp #$30			cmp 	#"0"
.3399	90 1a		bcc $33b5			bcc 	_TokPunctuation 			; < 0, punctuation.
.339b	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.339d	d0 08		bne $33a7			bne 	_TokConst
.339f					_TokHexConst:
.339f	c8		iny				iny									; consume token.
.33a0	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.33a2	20 c7 33	jsr $33c7			jsr 	TokenWrite
.33a5	a9 10		lda #$10			lda 	#16
.33a7					_TokConst:
.33a7	20 af 34	jsr $34af			jsr 	TokeniseInteger
.33aa	b0 cd		bcs $3379			bcs 	_TokLoop
.33ac	90 17		bcc $33c5			bcc 	_TokFail
.33ae					_TokQString:
.33ae	20 45 35	jsr $3545			jsr 	TokeniseString
.33b1	b0 c6		bcs $3379			bcs 	_TokLoop
.33b3	90 10		bcc $33c5			bcc 	_TokFail
.33b5					_TokPunctuation:
.33b5	20 24 35	jsr $3524			jsr 	TokenisePunctuation
.33b8	b0 bf		bcs $3379			bcs 	_TokLoop
.33ba	90 09		bcc $33c5			bcc 	_TokFail
.33bc					_TokIdentifier:
.33bc	20 20 34	jsr $3420			jsr 	TokeniseIdentifier
.33bf	b0 b8		bcs $3379			bcs 	_TokLoop
.33c1	90 02		bcc $33c5			bcc 	_TokFail
.33c3					_TokExit:
.33c3	38		sec				sec
.33c4	60		rts				rts
.33c5					_TokFail:
.33c5	18		clc				clc
.33c6	60		rts				rts
.33c7					TokenWrite:
.33c7	85 32		sta $32				sta 	tempShort 					; save XA
.33c9	48		pha				pha
.33ca	8a		txa				txa
.33cb	48		pha				pha
.33cc	a5 32		lda $32				lda 	tempShort
.33ce	ae 20 0d	ldx $0d20			ldx 	tokenBufferIndex 			; geet index
.33d1	9d 20 0c	sta $0c20,x			sta 	tokenBuffer,x 				; write byte to buffer
.33d4	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.33d6	9d 21 0c	sta $0c21,x			sta 	tokenBuffer+1,x
.33d9	ee 20 0d	inc $0d20			inc 	tokenBufferIndex 			; bump index
.33dc	68		pla				pla
.33dd	aa		tax				tax
.33de	68		pla				pla
.33df	60		rts				rts
.33e0					TokeniseMakeASCIIZ:
.33e0	a0 00		ldy #$00			ldy 	#0							; get length of string.
.33e2	b1 28		lda ($28),y			lda 	(codePtr),y
.33e4	a8		tay				tay
.33e5	c8		iny				iny 								; +1, the NULL goes here.
.33e6	a9 00		lda #$00			lda 	#0
.33e8	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.33ea	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.33ec	d0 02		bne $33f0			bne 	_TMKAExit
.33ee	e6 29		inc $29				inc 	codePtr+1
.33f0					_TMKAExit:
.33f0	60		rts				rts
.33f1					TokeniseFixCase:
.33f1	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.33f3	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.33f5					_TFCFlipQ:
.33f5	8a		txa				txa
.33f6	49 01		eor #$01			eor 	#1
.33f8	aa		tax				tax
.33f9					_TFCLoop:
.33f9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.33fb	f0 22		beq $341f			beq 	_TFCExit 					; if zero exit.
.33fd	c9 20		cmp #$20			cmp 	#32 						; if control
.33ff	90 1a		bcc $341b			bcc 	_TFCControl
.3401	c8		iny				iny 								; preconsume
.3402	c9 22		cmp #$22			cmp 	#'"'
.3404	f0 ef		beq $33f5			beq 	_TFCFlipQ
.3406	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3408	90 ef		bcc $33f9			bcc 	_TFCLoop
.340a	c9 7b		cmp #$7b			cmp 	#"z"+1
.340c	b0 eb		bcs $33f9			bcs 	_TFCLoop
.340e	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3410	d0 e7		bne $33f9			bne 	_TFCLoop
.3412	88		dey				dey
.3413	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3415					_TFCWrite:
.3415	91 28		sta ($28),y			sta 	(codePtr),y
.3417	c8		iny				iny
.3418	4c f9 33	jmp $33f9			jmp 	_TFCLoop
.341b					_TFCControl:
.341b	a9 20		lda #$20			lda 	#" "
.341d	d0 f6		bne $3415			bne 	_TFCWrite
.341f					_TFCExit:
.341f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3420					TokeniseIdentifier:
.3420	a2 00		ldx #$00			ldx 	#0
.3422					_TICopyID:
.3422	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3424	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3426	f0 16		beq $343e			beq 	_TICopyUnderscore
.3428	c9 2e		cmp #$2e			cmp 	#"."
.342a	f0 14		beq $3440			beq 	_TICopyIn
.342c	c9 30		cmp #$30			cmp 	#"0"
.342e	90 1b		bcc $344b			bcc 	_TIEndCopy
.3430	c9 3a		cmp #$3a			cmp 	#"9"+1
.3432	90 0c		bcc $3440			bcc 	_TICopyIn
.3434	c9 41		cmp #$41			cmp 	#"A"
.3436	90 13		bcc $344b			bcc 	_TIEndCopy
.3438	c9 5b		cmp #$5b			cmp 	#"Z"+1
.343a	b0 0f		bcs $344b			bcs		_TIEndCopy
.343c	90 02		bcc $3440			bcc 	_TICopyIn
.343e					_TICopyUnderScore:
.343e	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3440					_TICopyIn:
.3440	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3441	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3444	8e cf 0a	stx $0acf			stx 	convertBuffer
.3447	c8		iny				iny 								; next character
.3448	4c 22 34	jmp $3422			jmp 	_TICopyID 					; loop round
.344b					_TIEndCopy:
.344b	a9 24		lda #$24			lda 	#"$"
.344d	20 a2 34	jsr $34a2			jsr 	TIDCheckCopy
.3450	a9 23		lda #$23			lda 	#"#"
.3452	20 a2 34	jsr $34a2			jsr 	TIDCheckCopy
.3455	a9 28		lda #$28			lda 	#"("
.3457	20 a2 34	jsr $34a2			jsr 	TIDCheckCopy
.345a	20 d9 32	jsr $32d9			jsr 	TokenSearch 				; is it a token
.345d	b0 41		bcs $34a0			bcs 	_TIExit 					; if so, then exit.
.345f	98		tya				tya
.3460	48		pha				pha
.3461	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3463	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3466	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3469	c9 28		cmp #$28			cmp 	#"("
.346b	d0 02		bne $346f			bne 	_TINotArray
.346d	ca		dex				dex 								; yes, remove it and convert to array.
.346e	c8		iny				iny
.346f					_TINotArray:
.346f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3472	c9 24		cmp #$24			cmp 	#"$"
.3474	d0 03		bne $3479			bne 	_TINotString
.3476	ca		dex				dex
.3477	c8		iny				iny
.3478	c8		iny				iny
.3479					_TINotString:
.3479	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.347c	c9 23		cmp #$23			cmp 	#"#"
.347e	d0 05		bne $3485			bne 	_TINotFloat
.3480	ca		dex				dex
.3481	c8		iny				iny
.3482	c8		iny				iny
.3483	c8		iny				iny
.3484	c8		iny				iny
.3485					_TINotFloat:
.3485	e8		inx				inx 								; write end marker for identifier.
.3486	98		tya				tya
.3487	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.348a	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.348d	a2 01		ldx #$01			ldx 	#1
.348f					_TIOutput:
.348f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3492	29 3f		and #$3f			and 	#$3F
.3494	48		pha				pha
.3495	20 c7 33	jsr $33c7			jsr 	TokenWrite
.3498	e8		inx				inx
.3499	68		pla				pla
.349a	c9 3a		cmp #$3a			cmp 	#$3A
.349c	90 f1		bcc $348f			bcc 	_TIOutput
.349e	68		pla				pla
.349f	a8		tay				tay
.34a0					_TIExit:
.34a0	38		sec				sec 								; this can't fail.
.34a1	60		rts				rts
.34a2					TIDCheckCopy:
.34a2	d1 28		cmp ($28),y			cmp 	(codePtr),y
.34a4	d0 08		bne $34ae			bne 	_TIDCCExit
.34a6	e8		inx				inx
.34a7	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.34aa	8e cf 0a	stx $0acf			stx 	convertBuffer
.34ad	c8		iny				iny
.34ae					_TIDCCExit:
.34ae	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.34af					TokeniseInteger:
.34af	85 2c		sta $2c				sta 	temp1 						; save base
.34b1	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.34b3	8e cf 0a	stx $0acf			stx 	convertBuffer
.34b6					_TIGetChars:
.34b6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.34b8	c9 30		cmp #$30			cmp 	#"0"
.34ba	90 1f		bcc $34db			bcc 	_TIEndGet
.34bc	c9 3a		cmp #$3a			cmp 	#"9"+1
.34be	90 10		bcc $34d0			bcc 	_TIHaveChar
.34c0	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.34c2	c9 0a		cmp #$0a			cmp 	#10
.34c4	f0 15		beq $34db			beq 	_TIEndGet
.34c6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.34c8	c9 41		cmp #$41			cmp 	#"A"
.34ca	90 0f		bcc $34db			bcc 	_TIEndGet
.34cc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.34ce	b0 0b		bcs $34db			bcs 	_TIEndGet
.34d0					_TIHaveChar:
.34d0	e8		inx				inx 								; write into buffer.
.34d1	8e cf 0a	stx $0acf			stx 	convertBuffer
.34d4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.34d7	c8		iny				iny 								; next char
.34d8	4c b6 34	jmp $34b6			jmp 	_TIGetChars
.34db					_TIEndGet:
.34db	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.34dd	f0 1c		beq $34fb			beq 	_TIFail
.34df	98		tya				tya
.34e0	48		pha				pha
.34e1	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.34e3	85 2a		sta $2a				sta 	temp0
.34e5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.34e7	85 2b		sta $2b				sta 	1+(temp0)
.34e9	a9 00		lda #$00			lda 	#0 							; stack 0
.34eb	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.34ed	a2 14		ldx #$14		ldx	#20
.34ef	20 f8 2d	jsr $2df8		jsr	mainHandler
.34f2	68		pla				pla
.34f3	a8		tay				tay
.34f4	90 05		bcc $34fb			bcc 	_TIFail 					; didn't convert.
.34f6	20 fd 34	jsr $34fd			jsr 	TIRecursiveOut 				; recursive output ?
.34f9	38		sec				sec
.34fa	60		rts				rts
.34fb					_TIFail:
.34fb	18		clc				clc
.34fc	60		rts				rts
.34fd					TIRecursiveOut:
.34fd	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.34ff	29 3f		and #$3f			and 	#$3F
.3501	09 40		ora #$40			ora 	#$40
.3503	48		pha				pha
.3504	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.3506	29 c0		and #$c0			and 	#$C0
.3508	05 50		ora $50				ora 	esInt1
.350a	05 58		ora $58				ora 	esInt2
.350c	05 60		ora $60				ora 	esInt3
.350e	f0 10		beq $3520			beq 	_TIRONoRecursion
.3510	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3512					_TIROShift:
.3512	46 60		lsr $60				lsr 	esInt3
.3514	66 58		ror $58				ror 	esInt2
.3516	66 50		ror $50				ror 	esInt1
.3518	66 48		ror $48				ror 	esInt0
.351a	ca		dex				dex
.351b	d0 f5		bne $3512			bne 	_TIROShift
.351d	20 fd 34	jsr $34fd			jsr 	TIRecursiveOut 				; call recursively
.3520					_TIRONoRecursion:
.3520	68		pla				pla 								; pull the old bit.
.3521	4c c7 33	jmp $33c7			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3524					TokenisePunctuation:
.3524	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3526	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3529	c8		iny				iny
.352a	b1 28		lda ($28),y			lda 	(codePtr),y
.352c	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.352f	c8		iny				iny 								; Y is +2
.3530	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3532	8d cf 0a	sta $0acf			sta 	convertBuffer
.3535	20 d9 32	jsr $32d9			jsr 	TokenSearch 				; search for that token.
.3538	b0 0a		bcs $3544			bcs 	_TIFound
.353a	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.353d	88		dey				dey 								; Y is now +1
.353e	20 d9 32	jsr $32d9			jsr 	TokenSearch 				; search for that token.
.3541	b0 01		bcs $3544			bcs 	_TIFound
.3543	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3544					_TIFound:
.3544	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3545					TokeniseString:
.3545	c8		iny				iny 								; skip opening quote
.3546	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3548	84 2a		sty $2a				sty 	temp0 						; save start.
.354a					_TSGetLength:
.354a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.354c	f0 21		beq $356f			beq 	_TSFail						; end of line, fail
.354e	c8		iny				iny
.354f	e8		inx				inx
.3550	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3552	d0 f6		bne $354a			bne 	_TSGetLength
.3554	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3556	20 c7 33	jsr $33c7			jsr 	TokenWrite
.3559	8a		txa				txa 								; output length
.355a	20 c7 33	jsr $33c7			jsr 	TokenWrite
.355d	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.355f	e0 00		cpx #$00			cpx 	#0 							; check ended
.3561	f0 09		beq $356c			beq 	_TSExit
.3563					_TSOutput:
.3563	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3565	20 c7 33	jsr $33c7			jsr 	TokenWrite
.3568	c8		iny				iny
.3569	ca		dex				dex
.356a	d0 f7		bne $3563			bne 	_TSOutput
.356c					_TSExit:
.356c	c8		iny				iny 								; skip ending quote
.356d	38		sec				sec 								; return CS.
.356e	60		rts				rts
.356f					_TSFail:
.356f	18		clc				clc
.3570	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3571					TokenTableAddress:
>3571	79 35						.word 	Group0Text
>3573	44 37						.word 	Group1Text
>3575	89 38						.word 	Group2Text
>3577	9c 38						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3579					Group0Text:
>3579	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>357d	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3580	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3584	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3587	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>358a	01 be					.byte $01,$be                          ; $8b >
>358c	01 bc					.byte $01,$bc                          ; $8c <
>358e	01 bd					.byte $01,$bd                          ; $8d =
>3590	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3593	01 ab					.byte $01,$ab                          ; $8f +
>3595	01 ad					.byte $01,$ad                          ; $90 -
>3597	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>359a	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>359d	01 aa					.byte $01,$aa                          ; $93 *
>359f	01 af					.byte $01,$af                          ; $94 /
>35a1	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>35a5	01 de					.byte $01,$de                          ; $96 ^
>35a7	01 a1					.byte $01,$a1                          ; $97 !
>35a9	01 bf					.byte $01,$bf                          ; $98 ?
>35ab	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>35b2	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>35b8	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>35bc	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>35bf	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>35c7	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>35cd	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>35d2	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>35d7	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>35dc	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>35e2	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>35ea	01 a8					.byte $01,$a8                          ; $a4 (
>35ec	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>35f1	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>35f6	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>35fb	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3603	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3608	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>360d	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3613	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3618	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>361d	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3622	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3629	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3630	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3635	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>363c	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3643	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3649	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3650	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3656	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>365e	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3664	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3669	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>366f	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3675	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>367b	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3680	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3685	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>368c	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3693	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>369b	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>36a3	01 c0					.byte $01,$c0                          ; $c3 @
>36a5	01 fe					.byte $01,$fe                          ; $c4 ~
>36a7	01 a6					.byte $01,$a6                          ; $c5 &
>36a9	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>36af	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>36b7	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>36bb	01 a9					.byte $01,$a9                          ; $c9 )
>36bd	01 ba					.byte $01,$ba                          ; $ca :
>36bf	01 ac					.byte $01,$ac                          ; $cb ,
>36c1	01 bb					.byte $01,$bb                          ; $cc ;
>36c3	01 a7					.byte $01,$a7                          ; $cd '
>36c5	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>36c8	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>36cd	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>36d2	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>36d8	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>36dc	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>36e0	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>36e4	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>36ea	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>36ef	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>36f3	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>36f9	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>36fe	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3704	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>370b	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3710	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3717	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>371c	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3721	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3726	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>372a	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3730	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3734	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>373b	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3741	01 ae					.byte $01,$ae                          ; $e6 .
>3743	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3744					Group1Text:
>3744	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>374a	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>374f	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3754	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3759	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>375d	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3761	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3766	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>376e	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3772	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3777	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>377c	04 43 4f 44 c5				.byte $04,$43,$4f,$44,$c5              ; $91 code
>3781	04 50 41 53 d3				.byte $04,$50,$41,$53,$d3              ; $92 pass
>3786	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $93 ora
>378a	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $94 (and)
>3790	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $95 eor
>3794	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $96 adc
>3798	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $97 sta
>379c	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $98 lda
>37a0	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $99 cmp
>37a4	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9a sbc
>37a8	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9b asl
>37ac	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9c rol
>37b0	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9d lsr
>37b4	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9e ror
>37b8	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9f stx
>37bc	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a0 ldx
>37c0	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a1 dec
>37c4	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a2 inc
>37c8	03 53 54 da				.byte $03,$53,$54,$da                  ; $a3 stz
>37cc	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a4 bit
>37d0	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a5 sty
>37d4	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a6 ldy
>37d8	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a7 cpy
>37dc	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a8 cpx
>37e0	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a9 tsb
>37e4	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $aa trb
>37e8	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ab jsr
>37ec	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ac jmp
>37f0	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ad bpl
>37f4	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ae bmi
>37f8	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $af bvc
>37fc	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b0 bvs
>3800	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b1 bcc
>3804	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b2 bcs
>3808	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b3 bne
>380c	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b4 beq
>3810	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b5 bra
>3814	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b6 brk
>3818	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b7 php
>381c	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b8 clc
>3820	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b9 plp
>3824	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $ba sec
>3828	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bb rti
>382c	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bc pha
>3830	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bd cli
>3834	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $be phy
>3838	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bf rts
>383c	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c0 pla
>3840	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c1 sei
>3844	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c2 ply
>3848	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c3 dey
>384c	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c4 txa
>3850	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c5 tya
>3854	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c6 txs
>3858	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c7 tay
>385c	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c8 tax
>3860	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c9 clv
>3864	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $ca tsx
>3868	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cb iny
>386c	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cc dex
>3870	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cd cld
>3874	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $ce phx
>3878	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cf inx
>387c	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d0 nop
>3880	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d1 sed
>3884	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d2 plx
>3888	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3889					Group2Text:
>3889	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>388f	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3895	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>389b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.389c					Group3Text:
>389c	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>38a3	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>38aa	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.38ab					tokeniserHandler:
.38ab	7c ae 38	jmp ($38ae,x)			jmp 	(tokeniserVectors,x)
.38ae					tokeniserVectors:
>38ae	cd 30					.word Detokenise           ; index 0
>38b0	c1 30					.word ListLine             ; index 2
>38b2	48 33					.word TokTest              ; index 4
>38b4	68 33					.word Tokenise             ; index 6
>38b6	6b 33					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.38b8					section_end_tokeniser:
.38b8					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d21					varHash:
>0d21							.fill	1
.0d22					varType:
>0d22							.fill 	1
.0d23					varEnd:
>0d23							.fill 	1
.003b					hashList:
>003b							.fill 	2
.38b8					AccessVariable:
.38b8	aa		tax				tax 								; stack in X
.38b9	c8		iny				iny									; look at second character
.38ba	b1 28		lda ($28),y			lda 	(codePtr),y
.38bc	88		dey				dey
.38bd	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.38bf	d0 15		bne $38d6			bne 	_AVLong 					; no, always use the hash tables.
.38c1	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.38c3	38		sec				sec 	 							; make it 0-25
.38c4	e9 01		sbc #$01			sbc 	#1
.38c6	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.38c7	0a		asl a				asl 	a
.38c8	95 48		sta $48,x			sta 	esInt0,x
.38ca	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.38cc	95 50		sta $50,x			sta 	esInt1,x
.38ce	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.38d0	95 40		sta $40,x			sta 	esType,x
.38d2	c8		iny				iny 								; skip over the variable reference in the code.
.38d3	c8		iny				iny  								; (1 letter, 1 type)
.38d4	8a		txa				txa 								; stack in A to return.
.38d5	60		rts				rts
.38d6					_AVLong:
.38d6	8a		txa				txa
.38d7	48		pha				pha
.38d8	20 1f 39	jsr $391f			jsr 	AccessSetup 				; set up the basic information we need for later
.38db	20 61 3b	jsr $3b61			jsr 	FindVariable 				; does the variable exist already ?
.38de	b0 0e		bcs $38ee			bcs 	_AVFound 					; yes, then its found
.38e0	ad 22 0d	lda $0d22			lda 	varType 					; otherwise, is the variable type an array
.38e3	4a		lsr a				lsr 	a
.38e4	90 05		bcc $38eb			bcc 	_AVCanCreate 				; if not, we can autocreate
.38e6	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.38e8	20 8e 11	jsr $118e		jsr	errorHandler
.38eb					_AVCanCreate:
.38eb	20 d4 39	jsr $39d4			jsr 	CreateVariable 				; variable does not exist, create it.
.38ee					_AVFound:
.38ee	68		pla				pla
.38ef	aa		tax				tax
.38f0	18		clc				clc 								; copy temp0 (variable record address)
.38f1	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.38f3	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.38f5	95 48		sta $48,x			sta 	esInt0,x
.38f7	a5 2b		lda $2b				lda 	temp0+1
.38f9	69 00		adc #$00			adc 	#0
.38fb	95 50		sta $50,x			sta 	esInt1,x
.38fd	a9 00		lda #$00			lda 	#0
.38ff	95 58		sta $58,x			sta 	esInt2,x
.3901	95 60		sta $60,x			sta 	esInt3,x
.3903	ac 22 0d	ldy $0d22			ldy 	varType 					; get the type ID from the type.
.3906	b9 df 38	lda $38df,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3909	95 40		sta $40,x			sta 	esType,x
.390b	ac 23 0d	ldy $0d23			ldy 	varEnd 						; restore Y
.390e	ad 22 0d	lda $0d22			lda 	VarType 					; get variable type, put LSB into C
.3911	4a		lsr a				lsr 	a
.3912	90 03		bcc $3917			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3914	20 5c 39	jsr $395c			jsr 	AccessArray 				; array lookup. if LSB was set.
.3917					_AVNotArray:
.3917	8a		txa				txa 								; return stack in A and return
.3918	60		rts				rts
.3919					_AVTypeTable:
>3919	80 80						.byte 	$80,$80						; integer
>391b	c0 c0						.byte 	$C0,$C0 					; string
>391d	81 81						.byte 	$81,$81 					; float
.391f					AccessSetup:
.391f	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3921	8d 21 0d	sta $0d21			sta 	varHash
.3924	98		tya				tya
.3925	48		pha				pha
.3926	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3928	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.392a	b0 0b		bcs $3937			bcs 	_ASComplete
.392c	18		clc				clc 								; add to the hash. Might improve this.
.392d	6d 21 0d	adc $0d21			adc 	varHash
.3930	8d 21 0d	sta $0d21			sta 	varHash
.3933	c8		iny				iny 								; next character
.3934	4c 26 39	jmp $3926			jmp 	_ASLoop
.3937					_ASComplete:
.3937	8d 22 0d	sta $0d22			sta 	varType 					; save variable type byte
.393a	c8		iny				iny
.393b	8c 23 0d	sty $0d23			sty 	varEnd 						; save the ending position.
.393e	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.393f	e9 3a		sbc #$3a			sbc 	#$3A
.3941	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3942	0a		asl a				asl 	a
.3943	0a		asl a				asl 	a
.3944	0a		asl a				asl 	a 							; 2 bytes/word
.3945	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3947	ad 21 0d	lda $0d21			lda 	varHash 					; get hash
.394a	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.394c	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.394d	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.394f	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3951	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3953	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3955	69 00		adc #$00			adc 	#0
.3957	85 3c		sta $3c				sta 	hashList+1
.3959	68		pla				pla
.395a	a8		tay				tay
.395b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.395c					AccessArray:
.395c	e8		inx				inx
.395d	8a		txa				txa
.395e	a2 06		ldx #$06		ldx	#6
.3960	20 f8 2d	jsr $2df8		jsr	mainHandler
.3963	48		pha				pha
.3964	a2 00		ldx #$00		ldx	#0
.3966	20 f8 2d	jsr $2df8		jsr	mainHandler
.3969	68		pla				pla
.396a	aa		tax				tax
.396b	ca		dex				dex
.396c	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.396e	15 59		ora $59,x			ora 	esInt2+1,x
.3970	d0 33		bne $39a5			bne 	_AABadIndex
.3972	98		tya				tya
.3973	48		pha				pha
.3974	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.3976	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3978	b5 50		lda $50,x			lda 	esInt1,x
.397a	85 2b		sta $2b				sta 	temp0+1
.397c	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.397e	b5 49		lda $49,x			lda 	esInt0+1,x
.3980	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3982	c8		iny				iny
.3983	b5 51		lda $51,x			lda 	esInt1+1,x
.3985	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.3987	b0 1c		bcs $39a5			bcs 	_AABadIndex 				; if >= then fail.
.3989	e8		inx				inx 								; point to index
.398a	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.398c	b1 2a		lda ($2a),y			lda 	(temp0),y
.398e	20 aa 39	jsr $39aa			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3991	ca		dex				dex
.3992	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3994	18		clc				clc
.3995	b5 49		lda $49,x			lda 	esInt0+1,x
.3997	71 2a		adc ($2a),y			adc 	(temp0),y
.3999	95 48		sta $48,x			sta 	esInt0,x
.399b	b5 51		lda $51,x			lda 	esInt1+1,x
.399d	c8		iny				iny
.399e	71 2a		adc ($2a),y			adc 	(temp0),y
.39a0	95 50		sta $50,x			sta 	esInt1,x
.39a2	68		pla				pla
.39a3	a8		tay				tay
.39a4	60		rts				rts
.39a5					_AABadIndex:
.39a5	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.39a7	20 8e 11	jsr $118e		jsr	errorHandler
.39aa					MultiplyTOSByA:
.39aa	48		pha				pha
.39ab	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.39ad	85 2c		sta $2c				sta 	temp1
.39af	b5 50		lda $50,x			lda 	esInt1,x
.39b1	85 2d		sta $2d				sta 	temp1+1
.39b3	68		pla				pla
.39b4	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.39b6	36 50		rol $50,x			rol 	esInt1,x
.39b8	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.39ba	f0 17		beq $39d3			beq 	_MTBAExit
.39bc	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.39be	d0 0f		bne $39cf			bne 	_MTBANotFloat
.39c0	48		pha				pha
.39c1	18		clc				clc 								; so this will make it x 3
.39c2	b5 48		lda $48,x			lda 	esInt0,x
.39c4	65 2c		adc $2c				adc 	temp1
.39c6	95 48		sta $48,x			sta 	esInt0,x
.39c8	b5 50		lda $50,x			lda 	esInt1,x
.39ca	65 2d		adc $2d				adc 	temp1+1
.39cc	95 50		sta $50,x			sta 	esInt1,x
.39ce	68		pla				pla
.39cf					_MTBANotFloat:
.39cf	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.39d1	36 50		rol $50,x			rol 	esInt1,x
.39d3					_MTBAExit:
.39d3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.39d4					CreateVariable:
.39d4	98		tya				tya 								; push Y on the stack twice.
.39d5	48		pha				pha									; position in code of the new variable.
.39d6	48		pha				pha
.39d7	ae 22 0d	ldx $0d22			ldx 	varType 					; get var type 0-5 from the var type
.39da	bd fe 39	lda $39fe,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.39dd	48		pha				pha 								; save length
.39de	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.39e0	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.39e2	a5 36		lda $36				lda 	lowMemory+1
.39e4	85 2b		sta $2b				sta 	temp0+1
.39e6	68		pla				pla 								; get length
.39e7	18		clc				clc 								; add to low memory.
.39e8	65 35		adc $35				adc 	lowMemory
.39ea	85 35		sta $35				sta 	lowMemory
.39ec	90 08		bcc $39f6			bcc 	_CVNoCarry
.39ee	e6 36		inc $36				inc 	lowMemory+1
.39f0	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.39f2	c5 34		cmp $34				cmp 	highMemory+1
.39f4	b0 3d		bcs $3a33			bcs 	_CVMemory
.39f6					_CVNoCarry:
.39f6	ad 21 0d	lda $0d21			lda 	varHash 					; store hash at offset 4.
.39f9	a0 04		ldy #$04			ldy 	#4
.39fb	91 2a		sta ($2a),y			sta 	(temp0),y
.39fd	68		pla				pla 								; offset, work out where the variable name is.
.39fe	18		clc				clc
.39ff	65 28		adc $28				adc 	codePtr
.3a01	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3a03	91 2a		sta ($2a),y			sta 	(temp0),y
.3a05	a5 29		lda $29				lda 	codePtr+1
.3a07	69 00		adc #$00			adc 	#0
.3a09	c8		iny				iny
.3a0a	91 2a		sta ($2a),y			sta 	(temp0),y
.3a0c	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3a0f	b0 03		bcs $3a14			bcs 	_CVNotImmediate
.3a11	20 76 3a	jsr $3a76			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3a14					_CVNotImmediate:
.3a14	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3a16	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3a18	91 2a		sta ($2a),y			sta 	(temp0),y
.3a1a	c8		iny				iny
.3a1b	b1 3b		lda ($3b),y			lda 	(hashList),y
.3a1d	91 2a		sta ($2a),y			sta 	(temp0),y
.3a1f	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3a21	91 3b		sta ($3b),y			sta 	(hashList),y
.3a23	88		dey				dey
.3a24	a5 2a		lda $2a				lda 	temp0
.3a26	91 3b		sta ($3b),y			sta 	(hashList),y
.3a28	ad 22 0d	lda $0d22			lda 	varType 					; type in A
.3a2b	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3a2d	20 3e 3a	jsr $3a3e			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3a30	68		pla				pla
.3a31	a8		tay				tay
.3a32	60		rts				rts
.3a33					_CVMemory:
.3a33	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3a35	20 8e 11	jsr $118e		jsr	errorHandler
>3a38	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3a3a	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3a3c	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3a3e					ZeroTemp0Y:
.3a3e	4a		lsr a				lsr 	a 							; bit 0 in carry
.3a3f	0a		asl a				asl 	a
.3a40	b0 19		bcs $3a5b			bcs 	_ZTExit 					; we don't initialise arrays.
.3a42	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3a44	f0 16		beq $3a5c			beq 	_ZTWriteNullString 			; write "" string
.3a46	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3a48	f0 22		beq $3a6c			beq 	_ZTWriteFloat
.3a4a	98		tya				tya
.3a4b	48		pha				pha
.3a4c	a9 00		lda #$00			lda 	#0
.3a4e	91 2a		sta ($2a),y			sta 	(temp0),y
.3a50	c8		iny				iny
.3a51	91 2a		sta ($2a),y			sta 	(temp0),y
.3a53	c8		iny				iny
.3a54	91 2a		sta ($2a),y			sta 	(temp0),y
.3a56	c8		iny				iny
.3a57	91 2a		sta ($2a),y			sta 	(temp0),y
.3a59	68		pla				pla
.3a5a	a8		tay				tay
.3a5b					_ZTExit:
.3a5b	60		rts				rts
.3a5c					_ZTWriteNullString:
.3a5c	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3a5e	8d ce 0a	sta $0ace			sta 	NullString
.3a61	a9 ce		lda #$ce			lda 	#NullString & $FF
.3a63	91 2a		sta ($2a),y			sta 	(temp0),y
.3a65	a9 0a		lda #$0a			lda 	#NullString >> 8
.3a67	c8		iny				iny
.3a68	91 2a		sta ($2a),y			sta 	(temp0),y
.3a6a	88		dey				dey
.3a6b	60		rts				rts
.3a6c					_ZTWriteFloat:
.3a6c	8a		txa				txa
.3a6d	48		pha				pha
.3a6e	a2 1e		ldx #$1e		ldx	#30
.3a70	20 8b 15	jsr $158b		jsr	floatingpointHandler
.3a73	68		pla				pla
.3a74	aa		tax				tax
.3a75	60		rts				rts
.3a76					CloneVariableName:
.3a76	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3a78	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a7a	85 2e		sta $2e				sta 	temp2
.3a7c	c8		iny				iny
.3a7d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a7f	85 2f		sta $2f				sta 	temp2+1
.3a81	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3a83	91 2a		sta ($2a),y			sta 	(temp0),y
.3a85	88		dey				dey
.3a86	a5 35		lda $35				lda 	lowMemory
.3a88	91 2a		sta ($2a),y			sta 	(temp0),y
.3a8a	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3a8c					_CVNCopy:
.3a8c	b1 2e		lda ($2e),y			lda		(temp2),y
.3a8e	91 35		sta ($35),y			sta 	(lowMemory),y
.3a90	c8		iny				iny
.3a91	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3a93	90 f7		bcc $3a8c			bcc 	_CVNCopy
.3a95	98		tya				tya 								; add Y to low memory
.3a96	18		clc				clc
.3a97	65 35		adc $35				adc 	lowMemory
.3a99	85 35		sta $35				sta 	lowMemory
.3a9b	90 02		bcc $3a9f			bcc 	_CVNNoCarry
.3a9d	e6 36		inc $36				inc 	lowMemory+1
.3a9f					_CVNNoCarry:
.3a9f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3aa0					CreateArray:
.3aa0	20 1f 39	jsr $391f			jsr 	AccessSetup 				; set up the basic stuff.
.3aa3	ad 22 0d	lda $0d22			lda 	varType 					; is the variable type an array
.3aa6	4a		lsr a				lsr 	a
.3aa7	90 3f		bcc $3ae8			bcc 	_CANotArray 				; no, cause an error.
.3aa9	20 61 3b	jsr $3b61			jsr 	FindVariable 				; does the variable exist already
.3aac	b0 35		bcs $3ae3			bcs 	_CAFound 					; cannot redefine it.
.3aae	20 d4 39	jsr $39d4			jsr 	CreateVariable 				; create the variable entry.
.3ab1	ac 23 0d	ldy $0d23			ldy 	varEnd 						; point Y to the end of the variable entry.
.3ab4	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3ab6	48		pha				pha
.3ab7	a5 2b		lda $2b				lda 	temp0+1
.3ab9	48		pha				pha
.3aba	ad 22 0d	lda $0d22			lda 	varType 					; push variable type on the stack.
.3abd	48		pha				pha
.3abe	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3ac0	a2 06		ldx #$06		ldx	#6
.3ac2	20 f8 2d	jsr $2df8		jsr	mainHandler
.3ac5	a2 00		ldx #$00		ldx	#0
.3ac7	20 f8 2d	jsr $2df8		jsr	mainHandler
.3aca	68		pla				pla 		 						; restore type and position.
.3acb	8d 22 0d	sta $0d22			sta 	varType
.3ace	68		pla				pla
.3acf	85 2b		sta $2b				sta 	temp0+1
.3ad1	68		pla				pla
.3ad2	85 2a		sta $2a				sta 	temp0
.3ad4	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3ad6	29 e0		and #$e0			and 	#$E0
.3ad8	05 58		ora $58				ora 	esInt2
.3ada	05 60		ora $60				ora 	esInt3
.3adc	f0 0f		beq $3aed			beq 	_CASizeOk
.3ade					_CASize:
.3ade	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3ae0	20 8e 11	jsr $118e		jsr	errorHandler
.3ae3					_CAFound:
.3ae3	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3ae5	20 8e 11	jsr $118e		jsr	errorHandler
.3ae8					_CANotArray:
.3ae8	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3aea	20 8e 11	jsr $118e		jsr	errorHandler
.3aed					_CASizeOk:
.3aed	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3aef	d0 02		bne $3af3			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3af1	e6 49		inc $49				inc 	esInt0+1
.3af3					_CANoCarry:
.3af3	98		tya				tya
.3af4	48		pha				pha
.3af5	a0 05		ldy #$05			ldy 	#5
.3af7	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.3af9	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3afb	c8		iny				iny
.3afc	a5 36		lda $36				lda 	lowMemory+1
.3afe	91 2a		sta ($2a),y			sta 	(temp0),y
.3b00	c8		iny				iny
.3b01	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3b03	91 2a		sta ($2a),y			sta 	(temp0),y
.3b05	c8		iny				iny
.3b06	a5 50		lda $50				lda 	esInt1
.3b08	91 2a		sta ($2a),y			sta 	(temp0),y
.3b0a	c8		iny				iny
.3b0b	ae 22 0d	ldx $0d22			ldx 	varType 					; get the length per element
.3b0e	bd 1a 3b	lda $3b1a,x			lda 	_CAActualSize-$3A-1,x
.3b11	91 2a		sta ($2a),y			sta 	(temp0),y
.3b13	aa		tax				tax 								; save size in X
.3b14	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3b16	85 2a		sta $2a				sta 	temp0
.3b18	a5 36		lda $36				lda 	lowMemory+1
.3b1a	85 2b		sta $2b				sta 	temp0+1
.3b1c	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3b1e	85 2c		sta $2c				sta 	temp1
.3b20	85 2d		sta $2d				sta 	temp1+1
.3b22					_CAInitialiseArray:
.3b22	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3b24	ad 22 0d	lda $0d22			lda 	varType 					; base type of array in A.
.3b27	29 fe		and #$fe			and 	#$FE
.3b29	20 3e 3a	jsr $3a3e			jsr 	ZeroTemp0Y
.3b2c	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3b2d	18		clc				clc
.3b2e	65 2a		adc $2a				adc 	temp0
.3b30	85 2a		sta $2a				sta 	temp0
.3b32	85 35		sta $35				sta 	lowMemory
.3b34	a5 2b		lda $2b				lda 	temp0+1
.3b36	69 00		adc #$00			adc 	#0
.3b38	85 2b		sta $2b				sta 	temp0+1
.3b3a	85 36		sta $36				sta 	lowMemory+1
.3b3c	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.3b3e	b0 1c		bcs $3b5c			bcs 	_CAMemory
.3b40	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3b42	d0 02		bne $3b46			bne 	_CAIANoCarry
.3b44	e6 2d		inc $2d				inc 	temp1+1
.3b46					_CAIANoCarry:
.3b46	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3b48	c5 2c		cmp $2c				cmp 	temp1
.3b4a	d0 d6		bne $3b22			bne 	_CAInitialiseArray
.3b4c	a5 50		lda $50				lda 	esInt1
.3b4e	c5 2d		cmp $2d				cmp 	temp1+1
.3b50	d0 d0		bne $3b22			bne 	_CAInitialiseArray
.3b52	68		pla				pla
.3b53	a8		tay				tay
.3b54	60		rts				rts
.3b55					_CAActualSize:
>3b55	04 00						.byte 	VarISize,0
>3b57	02 00						.byte 	VarSSize,0
>3b59	06 00						.byte 	VarFSize,0
>3b5b	db						.byte 	$DB
.3b5c					_CAMemory:
.3b5c	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3b5e	20 8e 11	jsr $118e		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3b61					FindVariable:
.3b61	98		tya				tya
.3b62	48		pha				pha
.3b63	98		tya				tya 								; point temp2 to the actual name
.3b64	18		clc				clc 								; in memory of the variable being created
.3b65	65 28		adc $28				adc 	codePtr
.3b67	85 2e		sta $2e				sta 	temp2
.3b69	a5 29		lda $29				lda 	codePtr+1
.3b6b	69 00		adc #$00			adc 	#0
.3b6d	85 2f		sta $2f				sta 	temp2+1
.3b6f	a0 00		ldy #$00			ldy 	#0
.3b71	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.3b73	85 2a		sta $2a				sta 	temp0
.3b75	a5 3c		lda $3c				lda 	hashList+1
.3b77	85 2b		sta $2b				sta 	temp0+1
.3b79	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3b7b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b7d	f0 2c		beq $3bab			beq 	_FVFail
.3b7f	aa		tax				tax
.3b80	88		dey				dey		 							; get LSB
.3b81	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b83	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3b85	86 2b		stx $2b				stx 	temp0+1
.3b87	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3b89	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b8b	cd 21 0d	cmp $0d21			cmp 	varHash
.3b8e	d0 e9		bne $3b79			bne 	_FVNext 					; if not, no point in checking the name.
.3b90	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3b91	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b93	85 2d		sta $2d				sta 	temp1+1
.3b95	88		dey				dey
.3b96	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b98	85 2c		sta $2c				sta 	temp1
.3b9a	a0 00		ldy #$00			ldy 	#0
.3b9c					_FVCheck:
.3b9c	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3b9e	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3ba0	d0 d7		bne $3b79			bne 	_FVNext		 				; fail if different.
.3ba2	c8		iny				iny
.3ba3	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3ba5	90 f5		bcc $3b9c			bcc 	_FVCheck
.3ba7	68		pla				pla
.3ba8	a8		tay				tay
.3ba9	38		sec				sec
.3baa	60		rts				rts
.3bab					_FVFail:
.3bab	68		pla				pla
.3bac	a8		tay				tay
.3bad	18		clc				clc
.3bae	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3baf					HashTableReset:
.3baf	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3bb1	a9 00		lda #$00			lda 	#0
.3bb3					_HTRClear:
.3bb3	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3bb6	ca		dex				dex
.3bb7	d0 fa		bne $3bb3			bne 	_HTRClear
.3bb9	60		rts				rts

;******  Return to file: variable/variable.asm

.3bba					variableHandler:
.3bba	7c bd 3b	jmp ($3bbd,x)			jmp 	(variableVectors,x)
.3bbd					variableVectors:
>3bbd	b8 38					.word AccessVariable       ; index 0
>3bbf	a0 3a					.word CreateArray          ; index 2
>3bc1	af 3b					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3bc3					section_end_variable:
.3bc3					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d24					endStorage:
>3bc3							.align 	256
.3c00					programMemory:
>3bff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3c00					section_end_footer:

;******  End of listing
