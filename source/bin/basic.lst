
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Mar 29 03:59:28 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	24 3d						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 45		lda #$45			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 fb 1e	jsr $1efb		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 fb 1e	jsr $1efb		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 95 35	jsr $3595		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 52 38	jsr $3852		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 91 40	jsr $4091		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 62 44	jsr $4462		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 91 40	jsr $4091		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 95 35	jsr $3595		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 95 35	jsr $3595		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 95 35	jsr $3595		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 95 35	jsr $3595		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 62 44	jsr $4462		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 49 18	jsr $1849			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 95 35	jsr $3595		jsr	mainHandler
.157d	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 fb 1e	jsr $1efb		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1849					EHPrintAscii:
.1849	a0 00		ldy #$00			ldy 	#0
.184b	b1 2a		lda ($2a),y			lda 	(temp0),y
.184d	aa		tax				tax
.184e	f0 0f		beq $185f			beq 	_EHPExit
.1850					_EHPLoop:
.1850	c8		iny				iny
.1851	8a		txa				txa
.1852	48		pha				pha
.1853	b1 2a		lda ($2a),y			lda 	(temp0),y
.1855	a2 16		ldx #$16		ldx	#22
.1857	20 f6 14	jsr $14f6		jsr	deviceHandler
.185a	68		pla				pla
.185b	aa		tax				tax
.185c	ca		dex				dex
.185d	d0 f1		bne $1850			bne 	_EHPLoop
.185f					_EHPExit:
.185f	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1860					section_end_error:
.1860					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1860					ExtensionHandler:
.1860	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1862	f0 16		beq $187a			beq 	_ExtensionForce
.1864	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1866	d0 08		bne $1870			bne 	_ExtensionUnary 			; is passed in A.
.1868	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.186a	c8		iny				iny
.186b	0a		asl a				asl 	a
.186c	aa		tax				tax
.186d	7c 71 18	jmp ($1871,x)			jmp 	(Group2Vectors-12,x)
.1870					_ExtensionUnary:
.1870	48		pha				pha 								; save stack pos in A
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	68		pla				pla 								; restore stack pos and call group3 command.
.1877	7c 7d 18	jmp ($187d,x)			jmp 	(Group3Vectors-12,X)
.187a					_ExtensionForce:
.187a	4c 8c 1a	jmp $1a8c			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.187d					Group2Vectors:
>187d	a8 1b					.word	Command_VPoke            ; $86 vpoke
>187f	ab 1b					.word	Command_VDoke            ; $87 vdoke
>1881	80 1b					.word	Command_VLoad            ; $88 vload
>1883	9e 1a					.word	CommandMode              ; $89 mode
>1885	49 1b					.word	CommandPalette           ; $8a palette
>1887	9b 18					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1889					Group3Vectors:
>1889	f4 1b					.word	Command_VPeek            ; $86 vpeek(
>188b	f7 1b					.word	Command_VDeek            ; $87 vdeek(
>188d	62 1a					.word	Sprite_GetX              ; $88 sprite.x(
>188f	65 1a					.word	Sprite_GetY              ; $89 sprite.y(
>1891	3d 29					.word	Unimplemented            ; $8a hit(

;******  Return to file: extension/extensionhandler.asm

.1893					XEvaluateInteger:
.1893	8a		txa				txa
.1894	a2 0a		ldx #$0a		ldx	#10
.1896	20 95 35	jsr $3595		jsr	mainHandler
.1899	aa		tax				tax
.189a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0be6					currSprite:
>0be6							.fill 	2
.189b					CommandSprite:
.189b	20 9d 19	jsr $199d			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.189e	d0 0d		bne $18ad			bne 	_CSCheckClear
.18a0	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.18a3	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.18a5	90 02		bcc $18a9			bcc 	_CSNotOn 					; if CS turn on, so set it
.18a7	09 40		ora #$40			ora 	#$40
.18a9					_CSNotOn:
.18a9	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.18ac	60		rts				rts
.18ad					_CSCheckClear:
.18ad	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.18af	8d e7 0b	sta $0be7			sta 	currSprite+1
.18b2	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.18b4	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.18b6	d0 05		bne $18bd			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.18b8	20 ae 19	jsr $19ae			jsr 	CSClearSprites 				; clear all the sprites
.18bb	c8		iny				iny 								; consume CLEAR token and exit.
.18bc	60		rts				rts
.18bd					_CSCommandLoop:
.18bd	20 9d 19	jsr $199d			jsr 	CSCheckOnOff 				; check sprite on/off
.18c0	f0 2c		beq $18ee			beq 	_CSSetVisibility
.18c2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.18c4	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.18c6	f0 25		beq $18ed			beq 	_CSExit
.18c8	c8		iny				iny									; consume it
.18c9	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.18cb	f0 20		beq $18ed			beq 	_CSExit
.18cd	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.18cf	f0 ec		beq $18bd			beq 	_CSCommandLoop
.18d1	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.18d3	f0 69		beq $193e			beq 	_CSSetImage
.18d5	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.18d7	f0 2b		beq $1904			beq 	_CSSetFlip
.18d9	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.18db	f0 46		beq $1923			beq 	_CSSetPos
.18dd	88		dey				dey 								; unpick DEY
.18de	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.18e0	a2 0c		ldx #$0c		ldx	#12
.18e2	20 95 35	jsr $3595		jsr	mainHandler
.18e5	a5 50		lda $50				lda 	esInt0
.18e7	20 c8 19	jsr $19c8			jsr 	SelectSpriteA
.18ea	4c bd 18	jmp $18bd			jmp 	_CSCommandLoop
.18ed					_CSExit:
.18ed	60		rts				rts
.18ee					_CSSetVisibility:
.18ee	08		php				php 								; save carry
.18ef	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.18f1	20 84 19	jsr $1984			jsr 	SpriteSetTarget
.18f4	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.18f7	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.18f9	28		plp				plp
.18fa	90 02		bcc $18fe			bcc 	_CSSetOff 					; check if carry was set
.18fc	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.18fe					_CSSetOff:
.18fe	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1901	4c bd 18	jmp $18bd			jmp 	_CSCommandLoop
.1904					_CSSetFlip:
.1904	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1906	a2 0c		ldx #$0c		ldx	#12
.1908	20 95 35	jsr $3595		jsr	mainHandler
.190b	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.190d	20 84 19	jsr $1984			jsr 	SpriteSetTarget
.1910	a5 50		lda $50				lda 	esInt0 						; flip value & 3 => temp0
.1912	29 03		and #$03			and 	#3
.1914	85 2a		sta $2a				sta 	temp0
.1916	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1919	29 fc		and #$fc			and 	#$FC
.191b	05 2a		ora $2a				ora 	temp0
.191d	8d 23 9f	sta $9f23			sta 	$9F23
.1920	4c bd 18	jmp $18bd			jmp 	_CSCommandLoop
.1923					_CSSetPos:
.1923	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1925	a2 0a		ldx #$0a		ldx	#10
.1927	20 95 35	jsr $3595		jsr	mainHandler
.192a	a2 02		ldx #$02		ldx	#2
.192c	20 95 35	jsr $3595		jsr	mainHandler
.192f	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1931	a2 0a		ldx #$0a		ldx	#10
.1933	20 95 35	jsr $3595		jsr	mainHandler
.1936	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1938	20 e6 19	jsr $19e6			jsr 	SpriteMove 					; move it.
.193b	4c bd 18	jmp $18bd			jmp 	_CSCommandLoop
.193e					_CSSetImage:
.193e	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1940	a2 0c		ldx #$0c		ldx	#12
.1942	20 95 35	jsr $3595		jsr	mainHandler
.1945	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1947	20 84 19	jsr $1984			jsr 	SpriteSetTarget
.194a	a6 50		ldx $50				ldx 	esInt0 						; get image # into X
.194c	bd 2d 0c	lda $0c2d,x			lda 	imageAddr2Low,x 			; copy low address in.
.194f	8d 23 9f	sta $9f23			sta 	$9F23
.1952	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1955	bd ed 0b	lda $0bed,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1958	29 10		and #$10			and 	#$10
.195a	0a		asl a				asl 	a
.195b	0a		asl a				asl		a
.195c	0a		asl a				asl 	a 							; put into bit 7
.195d	1d 6d 0c	ora $0c6d,x			ora 	imageAddr2High,x 			; or high address with it.
.1960	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1963	a9 06		lda #$06			lda 	#6
.1965	20 84 19	jsr $1984			jsr 	SpriteSetTarget 			; set sprite on.
.1968	ad 23 9f	lda $9f23			lda 	$9F23
.196b	09 0c		ora #$0c			ora 	#$0C
.196d	8d 23 9f	sta $9f23			sta 	$9F23
.1970	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1973	bd ed 0b	lda $0bed,x			lda 	imageInfo,x 				; get image info
.1976	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1977	0a		asl a				asl 	a
.1978	0a		asl a				asl 	a
.1979	0a		asl a				asl 	a
.197a	b0 02		bcs $197e			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.197c	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.197e					_CSNoOffset:
.197e	8d 23 9f	sta $9f23			sta 	$9F23
.1981	4c bd 18	jmp $18bd			jmp 	_CSCommandLoop
.1984					SpriteSetTarget:
.1984	0d e6 0b	ora $0be6			ora 	currSprite
.1987	8d 20 9f	sta $9f20			sta 	$9F20
.198a	ad e7 0b	lda $0be7			lda 	currSprite+1
.198d	f0 09		beq $1998			beq 	_SSTNoSet
.198f	8d 21 9f	sta $9f21			sta 	$9F21
.1992	a9 01		lda #$01			lda 	#$01
.1994	8d 22 9f	sta $9f22			sta 	$9F22
.1997	60		rts				rts
.1998					_SSTNoSet:
.1998	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.199a	20 18 15	jsr $1518		jsr	errorHandler
.199d					CSCheckOnOff:
.199d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.199f	c8		iny				iny
.19a0	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.19a2	18		clc				clc
.19a3	f0 08		beq $19ad			beq 	_CSCOExit
.19a5	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.19a7	38		sec				sec 								; return NE if neither.
.19a8	f0 03		beq $19ad			beq 	_CSCOExit
.19aa	88		dey				dey 								; undo consume
.19ab	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.19ad					_CSCOExit:
.19ad	60		rts				rts
.19ae					CSClearSprites:
.19ae	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.19b0	8d 22 9f	sta $9f22			sta 	$9F22
.19b3	a9 fc		lda #$fc			lda 	#$FC
.19b5	8d 21 9f	sta $9f21			sta 	$9F21
.19b8	a9 00		lda #$00			lda 	#0
.19ba	8d 20 9f	sta $9f20			sta 	$9F20
.19bd					_CSClear:
.19bd	a9 00		lda #$00			lda 	#0 							; set everything to $00
.19bf	8d 23 9f	sta $9f23			sta 	$9F23
.19c2	ad 21 9f	lda $9f21			lda 	$9F21
.19c5	d0 f6		bne $19bd			bne 	_CSClear
.19c7	60		rts				rts
.19c8					SelectSpriteA:
.19c8	85 2a		sta $2a				sta 	temp0
.19ca	a9 00		lda #$00			lda 	#0
.19cc	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.19ce	b0 11		bcs $19e1			bcs 	_CSBadValue 				; sprites only 0-127
.19d0	06 2a		asl $2a				asl 	temp0
.19d2	2a		rol a				rol 	a
.19d3	06 2a		asl $2a				asl 	temp0
.19d5	2a		rol a				rol 	a
.19d6	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.19d8	8d e7 0b	sta $0be7			sta 	currSprite+1
.19db	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.19dd	8d e6 0b	sta $0be6			sta 	currSprite+0
.19e0	60		rts				rts
.19e1					_CSBadValue
.19e1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19e3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.19e6					SpriteMove:
.19e6	98		tya				tya
.19e7	48		pha				pha
.19e8	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.19ea	20 84 19	jsr $1984			jsr 	SpriteSetTarget
.19ed	ad 23 9f	lda $9f23			lda 	$9F23
.19f0	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.19f1	4a		lsr a				lsr 	a
.19f2	4a		lsr a				lsr 	a
.19f3	4a		lsr a				lsr 	a
.19f4	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.19f6	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.19f8	20 84 19	jsr $1984			jsr 	SpriteSetTarget
.19fb	20 0a 1a	jsr $1a0a			jsr 	SMWritePosition 					; write X position out.
.19fe	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1a00	46 2a		lsr $2a				lsr 	temp0
.1a02	e8		inx				inx 										; get the y position
.1a03	20 0a 1a	jsr $1a0a			jsr 	SMWritePosition 					; and write that out.
.1a06	ca		dex				dex 										; fix X and quit.
.1a07	68		pla				pla
.1a08	a8		tay				tay
.1a09	60		rts				rts
.1a0a					SMWritePosition:
.1a0a	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1a0c	29 03		and #$03			and 	#3 									; in range into Y
.1a0e	a8		tay				tay
.1a0f	38		sec				sec
.1a10	b5 50		lda $50,x			lda 	esInt0,x
.1a12	f9 26 1a	sbc $1a26,y			sbc 	SMHalfSize,y
.1a15	8d 23 9f	sta $9f23			sta 	$9F23
.1a18	ee 20 9f	inc $9f20			inc 	$9F20
.1a1b	b5 58		lda $58,x			lda 	esInt1,x
.1a1d	e9 00		sbc #$00			sbc 	#0
.1a1f	8d 23 9f	sta $9f23			sta 	$9F23
.1a22	ee 20 9f	inc $9f20			inc 	$9F20
.1a25	60		rts				rts
.1a26					SMHalfSize:
>1a26	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.1a2a					SpriteReadCoordinate:
.1a2a	98		tya				tya
.1a2b	48		pha				pha
.1a2c	08		php				php 										; save CTR on stack
.1a2d	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1a2f	20 84 19	jsr $1984			jsr 	SpriteSetTarget
.1a32	ad 23 9f	lda $9f23			lda 	$9F23
.1a35	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1a36	4a		lsr a				lsr 	a
.1a37	4a		lsr a				lsr 	a
.1a38	4a		lsr a				lsr 	a
.1a39	28		plp				plp 										; restore CTS
.1a3a	08		php				php
.1a3b	90 02		bcc $1a3f			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.1a3d	4a		lsr a				lsr 	a
.1a3e	4a		lsr a				lsr 	a
.1a3f					_SPRCNotY1:
.1a3f	29 03		and #$03			and 	#3 									; point into half width/height
.1a41	a8		tay				tay
.1a42	28		plp				plp 										; CS Y CC X
.1a43	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.1a45	2a		rol a				rol 	a
.1a46	2a		rol a				rol 	a
.1a47	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.1a49	20 84 19	jsr $1984			jsr 	SpriteSetTarget 					; set data pointer offset by that
.1a4c	18		clc				clc 										; read and unfix centre.
.1a4d	ad 23 9f	lda $9f23			lda 	$9F23
.1a50	79 26 1a	adc $1a26,y			adc 	SMHalfSize,y
.1a53	95 50		sta $50,x			sta 	esInt0,x
.1a55	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.1a58	ad 23 9f	lda $9f23			lda 	$9F23
.1a5b	69 00		adc #$00			adc 	#0
.1a5d	95 58		sta $58,x			sta 	esInt1,x
.1a5f	68		pla				pla
.1a60	a8		tay				tay
.1a61	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.1a62					Sprite_GetX:
.1a62	18		clc				clc
.1a63	90 01		bcc $1a66			bcc 	SpriteGetCode
.1a65					Sprite_GetY:
.1a65	38		sec				sec
.1a66					SpriteGetCode:
.1a66	08		php				php 								; CLC : X SEC: Y, save on stack.
.1a67	48		pha				pha 								; save stack position
.1a68	20 7e 1a	jsr $1a7e			jsr 	GetSpriteNumber 			; get # of sprite.
.1a6b	a2 04		ldx #$04		ldx	#4
.1a6d	20 95 35	jsr $3595		jsr	mainHandler
.1a70	68		pla				pla
.1a71	aa		tax				tax
.1a72	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.1a74	95 60		sta $60,x			sta 	esInt2,x
.1a76	95 68		sta $68,x			sta 	esInt3,x
.1a78	28		plp				plp 								; which one ?
.1a79	20 2a 1a	jsr $1a2a			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.1a7c	8a		txa				txa 								; return NSP in A
.1a7d	60		rts				rts
.1a7e					GetSpriteNumber:
.1a7e	48		pha				pha
.1a7f	a2 0c		ldx #$0c		ldx	#12
.1a81	20 95 35	jsr $3595		jsr	mainHandler
.1a84	68		pla				pla
.1a85	aa		tax				tax
.1a86	b5 50		lda $50,x			lda 	esInt0,x
.1a88	20 c8 19	jsr $19c8			jsr 	SelectSpriteA
.1a8b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0be8					currentMode:
>0be8							.fill 	4
.1a8c					ForceMode0:
.1a8c	a2 00		ldx #$00			ldx 	#0
.1a8e	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1a90					_FMCheck:
.1a90	bd 1d 1b	lda $1b1d,x			lda 	CMModeList,x 				; do we need to switch ?
.1a93	dd e8 0b	cmp $0be8,x			cmp 	currentMode,x
.1a96	d0 13		bne $1aab			bne 	CMSetMode 					; different so switch.
.1a98	e8		inx				inx
.1a99	e0 04		cpx #$04			cpx 	#4
.1a9b	d0 f3		bne $1a90			bne 	_FMCheck
.1a9d	60		rts				rts
.1a9e					CommandMode:
.1a9e	a9 00		lda #$00			lda 	#0
.1aa0	a2 0a		ldx #$0a		ldx	#10
.1aa2	20 95 35	jsr $3595		jsr	mainHandler
.1aa5	a5 68		lda $68				lda 	esInt3
.1aa7	29 70		and #$70			and 	#$70
.1aa9	d0 06		bne $1ab1			bne 	CMNoExpand
.1aab					CMSetMode:
.1aab	20 fc 1a	jsr $1afc			jsr 	CMExpandMode
.1aae	4c c5 1a	jmp $1ac5			jmp 	CMUpdateMode
.1ab1					CMNoExpand:
.1ab1	a5 50		lda $50				lda 	esInt0
.1ab3	8d e8 0b	sta $0be8			sta 	currentMode
.1ab6	a5 58		lda $58				lda 	esInt1
.1ab8	8d e9 0b	sta $0be9			sta 	currentMode+1
.1abb	a5 60		lda $60				lda 	esInt2
.1abd	8d ea 0b	sta $0bea			sta 	currentMode+2
.1ac0	a5 68		lda $68				lda 	esInt3
.1ac2	8d eb 0b	sta $0beb			sta 	currentMode+3
.1ac5					CMUpdateMode:
.1ac5	a2 11		ldx #$11			ldx 	#$11
.1ac7					_CMClear:
.1ac7	a9 00		lda #$00			lda 	#0
.1ac9	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1acc	ca		dex				dex
.1acd	10 f8		bpl $1ac7			bpl 	_CMClear
.1acf	ad eb 0b	lda $0beb			lda 	currentMode+3 				; get current mode
.1ad2	48		pha				pha 								; stack twice.
.1ad3	48		pha				pha
.1ad4	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1ad6	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1ad8	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1adb	68		pla				pla 								; get back
.1adc	20 21 1b	jsr $1b21			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1adf	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.1ae2	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.1ae3	4a		lsr a				lsr 	a
.1ae4	4a		lsr a				lsr 	a
.1ae5	20 21 1b	jsr $1b21			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1ae8	8d 2b 9f	sta $9f2b			sta 	$9F2B
.1aeb	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.1aed	ad e8 0b	lda $0be8			lda 	currentMode					; get L0 config byte
.1af0	20 2c 1b	jsr $1b2c			jsr 	CMDecodeLayer 				; and decode layer 0
.1af3	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.1af5	ad e9 0b	lda $0be9			lda 	currentMode+1
.1af8	20 2c 1b	jsr $1b2c			jsr 	CMDecodeLayer
.1afb	60		rts				rts
.1afc					CMExpandMode:
.1afc	a5 50		lda $50				lda 	esInt0 						; get mode number
.1afe	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.1b00	b0 16		bcs $1b18			bcs 	_CMModeError
.1b02	0a		asl a				asl 	a 							; x 4 into X
.1b03	0a		asl a				asl 	a
.1b04	aa		tax				tax
.1b05	98		tya				tya
.1b06	48		pha				pha
.1b07	a0 00		ldy #$00			ldy 	#0
.1b09					_CMEMCopy:
.1b09	bd 1d 1b	lda $1b1d,x			lda 	CMModeList,x
.1b0c	99 e8 0b	sta $0be8,y			sta 	currentMode,y
.1b0f	e8		inx				inx
.1b10	c8		iny				iny
.1b11	c0 04		cpy #$04			cpy 	#4
.1b13	d0 f4		bne $1b09			bne 	_CMEMCopy
.1b15	68		pla				pla
.1b16	a8		tay				tay
.1b17	60		rts				rts
.1b18					_CMModeError:
.1b18	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b1a	20 18 15	jsr $1518		jsr	errorHandler
.1b1d					CMModeList:
>1b1d	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.1b21					CMEndModeList:
.1b21					CMToScale:
.1b21	29 03		and #$03			and 	#3 							; lower 2 bits only
.1b23	aa		tax				tax 								; put in X for counting
.1b24	a9 00		lda #$00			lda 	#0 							; zero result
.1b26	38		sec				sec 								; first time rotate CS in
.1b27					_CMTSLoop:
.1b27	6a		ror a				ror 	a
.1b28	ca		dex				dex
.1b29	10 fc		bpl $1b27			bpl 	_CMTSLoop
.1b2b	60		rts				rts
.1b2c					CMDecodeLayer:
.1b2c	48		pha				pha 								; save it.
.1b2d	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1b2f	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1b32	68		pla				pla 								; get it back
.1b33	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.1b35	f0 02		beq $1b39			beq 	_CMDLNotSet
.1b37	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1b39					_CMDLNotSet:
.1b39	e0 00		cpx #$00			cpx 	#0
.1b3b	f0 06		beq $1b43			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1b3d	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1b3f	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1b42	60		rts				rts
.1b43					_CMDLayer0:
.1b43	09 80		ora #$80			ora 	#$80 						; tile base is $80
.1b45	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1b48	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.1b49					CommandPalette:
.1b49	a9 00		lda #$00			lda 	#0
.1b4b	a2 0c		ldx #$0c		ldx	#12
.1b4d	20 95 35	jsr $3595		jsr	mainHandler
.1b50	a2 02		ldx #$02		ldx	#2
.1b52	20 95 35	jsr $3595		jsr	mainHandler
.1b55	a9 01		lda #$01			lda 	#1
.1b57	a2 08		ldx #$08		ldx	#8
.1b59	20 95 35	jsr $3595		jsr	mainHandler
.1b5c	a5 50		lda $50				lda 	esInt0 					; get palette #
.1b5e	20 6e 1b	jsr $1b6e			jsr 	PointToPaletteA			; point to palette register
.1b61	a5 51		lda $51				lda 	esInt0+1
.1b63	8d 23 9f	sta $9f23			sta 	$9F23
.1b66	a5 59		lda $59				lda 	esInt1+1
.1b68	29 0f		and #$0f			and 	#$0F
.1b6a	8d 23 9f	sta $9f23			sta 	$9F23
.1b6d	60		rts				rts
.1b6e					PointToPaletteA:
.1b6e	0a		asl a				asl 	a 							; x 2 -> LSB
.1b6f	8d 20 9f	sta $9f20			sta 	$9F20
.1b72	a9 00		lda #$00			lda 	#0 							; carry into A
.1b74	2a		rol a				rol 	a
.1b75	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1b77	8d 21 9f	sta $9f21			sta 	$9F21
.1b7a	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1b7c	8d 22 9f	sta $9f22			sta 	$9F22
.1b7f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.1b80					Command_VLoad:
.1b80	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1b82	a2 0e		ldx #$0e		ldx	#14
.1b84	20 95 35	jsr $3595		jsr	mainHandler
.1b87	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1b89	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1b8b	95 50		sta $50,x			sta 	esInt0,x
.1b8d	a5 36		lda $36				lda 	lowMemory+1
.1b8f	95 58		sta $58,x			sta 	esInt1,x
.1b91	a9 00		lda #$00			lda 	#0
.1b93	95 60		sta $60,x			sta 	esInt2,x
.1b95	95 68		sta $68,x			sta 	esInt3,x
.1b97	a2 0e		ldx #$0e		ldx	#14
.1b99	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b9c	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1b9e	85 2a		sta $2a				sta 	temp0
.1ba0	a5 59		lda $59				lda 	esInt1+1
.1ba2	85 2b		sta $2b				sta 	temp0+1
.1ba4	20 20 1c	jsr $1c20			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1ba7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.1ba8					Command_VPoke:
.1ba8	38		sec				sec 						; one byte , CS
.1ba9	b0 01		bcs $1bac			bcs 	CmdVideoWrite
.1bab					Command_VDoke:
.1bab	18		clc				clc 						; two bytes, CC
.1bac					CmdVideoWrite:
.1bac	08		php				php 						; save one or two btes
.1bad	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1baf	a2 0a		ldx #$0a		ldx	#10
.1bb1	20 95 35	jsr $3595		jsr	mainHandler
.1bb4	a2 02		ldx #$02		ldx	#2
.1bb6	20 95 35	jsr $3595		jsr	mainHandler
.1bb9	a9 01		lda #$01			lda 	#1
.1bbb	a2 0a		ldx #$0a		ldx	#10
.1bbd	20 95 35	jsr $3595		jsr	mainHandler
.1bc0	a2 00		ldx #$00			ldx 	#0
.1bc2	20 d3 1b	jsr $1bd3			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1bc5	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1bc7	8d 23 9f	sta $9f23			sta 	$9F23
.1bca	28		plp				plp 						; if it was Poke then exit
.1bcb	b0 05		bcs $1bd2			bcs 	_CVWExit
.1bcd	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1bcf	8d 23 9f	sta $9f23			sta 	$9F23
.1bd2					_CVWExit:
.1bd2	60		rts				rts
.1bd3					SetUpTOSVRamAddress:
.1bd3	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1bd5	29 fe		and #$fe			and 	#$FE
.1bd7	15 68		ora $68,x			ora 	esInt3,x
.1bd9	d0 14		bne $1bef			bne 	CVWValue
.1bdb	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1bdd	8d 20 9f	sta $9f20			sta 	$9F20
.1be0	b5 58		lda $58,x			lda 	esInt1,x
.1be2	8d 21 9f	sta $9f21			sta	 	$9F21
.1be5	b5 60		lda $60,x			lda 	esInt2,x
.1be7	29 01		and #$01			and 	#1
.1be9	09 10		ora #$10			ora 	#$10 				; step 1.
.1beb	8d 22 9f	sta $9f22			sta 	$9F22
.1bee	60		rts				rts
.1bef					CVWValue:
.1bef	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1bf1	20 18 15	jsr $1518		jsr	errorHandler
.1bf4					Command_VPeek:
.1bf4	38		sec				sec 						; one byte , CS
.1bf5	b0 01		bcs $1bf8			bcs 	CmdVideoRead
.1bf7					Command_VDeek:
.1bf7	18		clc				clc 						; two bytes, CC
.1bf8					CmdVideoRead:
.1bf8	08		php				php 						; save action on stack.
.1bf9	48		pha				pha 						; save stack position
.1bfa	a2 0a		ldx #$0a		ldx	#10
.1bfc	20 95 35	jsr $3595		jsr	mainHandler
.1bff	a2 04		ldx #$04		ldx	#4
.1c01	20 95 35	jsr $3595		jsr	mainHandler
.1c04	68		pla				pla
.1c05	aa		tax				tax
.1c06	20 d3 1b	jsr $1bd3			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1c09	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1c0b	95 58		sta $58,x			sta 	esInt1,x
.1c0d	95 60		sta $60,x			sta 	esInt2,x
.1c0f	95 68		sta $68,x			sta 	esInt3,x
.1c11	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1c14	95 50		sta $50,x			sta 	esInt0,x
.1c16	28		plp				plp 						; check if DOKE (carry was clear)
.1c17	b0 05		bcs $1c1e			bcs 	_CVRExit
.1c19	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1c1c	95 58		sta $58,x			sta 	esInt1,x
.1c1e					_CVRExit:
.1c1e	8a		txa				txa 						; return X position.
.1c1f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0bec					compressMode:
>0bec							.fill 	1
.0bed					imageInfo:
>0bed							.fill 	X16MaxImages
.0c2d					imageAddr2Low:
>0c2d							.fill  	X16MaxImages
.0c6d					imageAddr2High:
>0c6d							.fill  	X16MaxImages
.1c20					LoadVRAMFile:
.1c20	8a		txa				txa
.1c21	48		pha				pha
.1c22	98		tya				tya
.1c23	48		pha				pha
.1c24					_LVRLoop:
.1c24	20 00 1d	jsr $1d00			jsr 	LVFGet 						; get the next (never access direct)
.1c27	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1c29	f0 42		beq $1c6d			beq 	_LVRExit
.1c2b	b0 5c		bcs $1c89			bcs 	_LVRLoad 					; load data in ?
.1c2d	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1c2f	90 11		bcc $1c42			bcc 	_LVRSetAddress
.1c31	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.1c33	f0 3d		beq $1c72			beq 	_LVRSetPalette
.1c35	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1c37	90 2d		bcc $1c66			bcc 	_LVRSetCompress
.1c39	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1c3b	90 60		bcc $1c9d			bcc 	_LVRSetSprite
.1c3d	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1c3f	20 18 15	jsr $1518		jsr	errorHandler
.1c42					_LVRSetAddress:
.1c42	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1c44	20 00 1d	jsr $1d00			jsr 	LVFGet
.1c47	85 2c		sta $2c				sta 	temp1
.1c49	a9 00		lda #$00			lda 	#0
.1c4b	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1c4d	66 2c		ror $2c				ror 	temp1
.1c4f	6a		ror a				ror		a
.1c50	46 2d		lsr $2d				lsr 	temp1+1
.1c52	66 2c		ror $2c				ror 	temp1
.1c54	6a		ror a				ror		a
.1c55	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1c58	a5 2c		lda $2c				lda 	temp1
.1c5a	8d 21 9f	sta $9f21			sta 	$9F21
.1c5d	a5 2d		lda $2d				lda 	temp1+1
.1c5f	09 10		ora #$10			ora 	#$10
.1c61	8d 22 9f	sta $9f22			sta 	$9F22
.1c64	d0 be		bne $1c24			bne 	_LVRLoop
.1c66					_LVRSetCompress:
.1c66	29 07		and #$07			and 	#7
.1c68	8d ec 0b	sta $0bec			sta 	compressMode
.1c6b	10 b7		bpl $1c24			bpl 	_LVRLoop
.1c6d					_LVRExit:
.1c6d	68		pla				pla
.1c6e	a8		tay				tay
.1c6f	68		pla				pla
.1c70	aa		tax				tax
.1c71	60		rts				rts
.1c72					_LVRSetPalette:
.1c72	20 00 1d	jsr $1d00			jsr 	LVFGet 						; get palette id.
.1c75	20 6e 1b	jsr $1b6e			jsr 	PointToPaletteA 			; in palette.asm
.1c78	20 00 1d	jsr $1d00			jsr 	LVFGet 						; copy 12 bit palette data in.
.1c7b	8d 23 9f	sta $9f23			sta 	$9F23
.1c7e	20 00 1d	jsr $1d00			jsr 	LVFGet
.1c81	29 0f		and #$0f			and 	#$0F
.1c83	8d 23 9f	sta $9f23			sta 	$9F23
.1c86	4c 24 1c	jmp $1c24			jmp 	_LVRLoop
.1c89					_LVRLoad:
.1c89	ae ec 0b	ldx $0bec			ldx 	compressMode
.1c8c	d0 55		bne $1ce3			bne 	_LVRNotMode0
.1c8e	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1c90					_LVRLCopyX:
.1c90	aa		tax				tax
.1c91					_LVRLCopy:
.1c91	20 00 1d	jsr $1d00			jsr 	LVFGet 						; write to data.
.1c94	8d 23 9f	sta $9f23			sta 	$9F23
.1c97	ca		dex				dex
.1c98	d0 f7		bne $1c91			bne 	_LVRLCopy
.1c9a	4c 24 1c	jmp $1c24			jmp 	_LVRLoop
.1c9d					_LVRSetSprite:
.1c9d	48		pha				pha 								; save on stack
.1c9e	20 00 1d	jsr $1d00			jsr 	LVFGet 						; get the sprite number into X
.1ca1	aa		tax				tax
.1ca2	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1ca4	b0 38		bcs $1cde			bcs 	_LVRSSValue
.1ca6	68		pla				pla 								; restore the data held in the first byte
.1ca7	9d ed 0b	sta $0bed,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1caa					_LVRAlignVRAM:
.1caa	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1cad	29 1f		and #$1f			and 	#$1F
.1caf	f0 07		beq $1cb8			beq 	_LVRAligned
.1cb1	a9 00		lda #$00			lda 	#$00
.1cb3	8d 23 9f	sta $9f23			sta 	$9F23
.1cb6	f0 f2		beq $1caa			beq 	_LVRAlignVRAM
.1cb8					_LVRAligned:
.1cb8	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1cbb	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1cbc	ad 21 9f	lda $9f21			lda 	$9F21
.1cbf	6a		ror a				ror 	a
.1cc0	85 2d		sta $2d				sta 	temp1+1
.1cc2	ad 20 9f	lda $9f20			lda 	$9F20
.1cc5	6a		ror a				ror 	a
.1cc6	85 2c		sta $2c				sta 	temp1
.1cc8	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1cca					_LVRShift:
.1cca	46 2d		lsr $2d				lsr 	temp1+1
.1ccc	66 2c		ror $2c				ror 	temp1
.1cce	88		dey				dey
.1ccf	d0 f9		bne $1cca			bne 	_LVRShift
.1cd1	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1cd3	9d 6d 0c	sta $0c6d,x			sta 	imageAddr2High,x
.1cd6	a5 2c		lda $2c				lda 	temp1
.1cd8	9d 2d 0c	sta $0c2d,x			sta 	imageAddr2Low,x
.1cdb	4c 24 1c	jmp $1c24			jmp 	_LVRLoop
.1cde					_LVRSSValue:
.1cde	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ce0	20 18 15	jsr $1518		jsr	errorHandler
.1ce3					_LVRNotMode0:
.1ce3	e0 01		cpx #$01			cpx 	#1
.1ce5	d0 15		bne $1cfc			bne 	_LVRNotMode1
.1ce7	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.1ce9	c9 40		cmp #$40			cmp 	#$40
.1ceb	90 a3		bcc $1c90			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.1ced					_LVRRLEGroup:
.1ced	29 3f		and #$3f			and 	#$3F
.1cef	aa		tax				tax
.1cf0	20 00 1d	jsr $1d00			jsr 	LVFGet
.1cf3					_LVRLEGroupLoop:
.1cf3	8d 23 9f	sta $9f23			sta 	$9F23
.1cf6	ca		dex				dex
.1cf7	d0 fa		bne $1cf3			bne 	_LVRLEGroupLoop
.1cf9	4c 24 1c	jmp $1c24			jmp 	_LVRLoop
.1cfc					_LVRNotMode1:
>1cfc	db						.byte 	$DB
.1cfd	4c fc 1c	jmp $1cfc			jmp 	_LVRNotMode1
.1d00	84 32		sty $32		LVFGet:	sty 	tempShort
.1d02	a0 00		ldy #$00			ldy 	#0
.1d04	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d06	a4 32		ldy $32				ldy	 	tempShort
.1d08	e6 2a		inc $2a				inc 	temp0
.1d0a	d0 02		bne $1d0e			bne 	_LVFGExit
.1d0c	e6 2b		inc $2b				inc 	temp0+1
.1d0e					_LVFGExit:
.1d0e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1d0f					section_end_extension:
.1d0f					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1d0f					floatingpointHandler:
.1d0f	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1d11	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1d14					section_end_floatingpoint:
.1d14					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1d14					ColdStartEntry:
.1d14	a2 ff		ldx #$ff			ldx 	#$FF
.1d16	9a		txs				txs
.1d17	20 a0 1d	jsr $1da0			jsr 	ForceStandardMode
.1d1a	a2 04		ldx #$04		ldx	#4
.1d1c	20 f6 14	jsr $14f6		jsr	deviceHandler
.1d1f	a0 ff		ldy #$ff			ldy 	#255
.1d21					_CSBanner:
.1d21	c8		iny				iny
.1d22	b9 48 1d	lda $1d48,y			lda 	Intro,y
.1d25	f0 14		beq $1d3b			beq 	_CSStart
.1d27	c9 08		cmp #$08			cmp 	#8
.1d29	90 08		bcc $1d33			bcc 	_CSInk
.1d2b	a2 16		ldx #$16		ldx	#22
.1d2d	20 f6 14	jsr $14f6		jsr	deviceHandler
.1d30	4c 21 1d	jmp $1d21			jmp 	_CSBanner
.1d33					_CSInk:
.1d33	a2 08		ldx #$08		ldx	#8
.1d35	20 f6 14	jsr $14f6		jsr	deviceHandler
.1d38	4c 21 1d	jmp $1d21			jmp 	_CSBanner
.1d3b					_CSStart:
.1d3b	a2 16		ldx #$16		ldx	#22
.1d3d	20 95 35	jsr $3595		jsr	mainHandler
.1d40	a2 06		ldx #$06		ldx	#6
.1d42	20 95 35	jsr $3595		jsr	mainHandler
.1d45	4c 60 1e	jmp $1e60			jmp 	WarmStartEntry
>1d48	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1d50	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1d60	20 2a 2a 2a 0d 0d
>1d66	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1d6e	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1d7e	32 30 32 31 0d 0d
>1d84	02 42 61 73 69 63 20				.text 	2,"Basic "
>1d8b	30 2e 31 39					.text "0.19"
>1d8f	20 28						.text 	" ("
>1d91	32 38 2d 4d 61 72 2d 32				.text "28-Mar-2021"
>1d99	30 32 31
>1d9c	29 0d 0d 00					.text 	")",13,13,0
.1da0					ForceStandardMode:
.1da0	a9 fe		lda #$fe			lda 	#$FE
.1da2	20 60 18	jsr $1860		jsr	extensionHandler
.1da5	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1da6					DeleteLine:
.1da6	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1da9	85 2a		sta $2a				sta 	temp0
.1dab	ad c9 0a	lda $0ac9			lda 	basePage+1
.1dae	85 2b		sta $2b				sta 	temp0+1
.1db0	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1db2	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1db4	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1db6	d0 07		bne $1dbf			bne 	_DLNext
.1db8	c8		iny				iny
.1db9	a5 58		lda $58				lda 	esInt1
.1dbb	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1dbd	f0 06		beq $1dc5			beq 	_DLFound
.1dbf	20 e3 1d	jsr $1de3	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1dc2	d0 ec		bne $1db0			bne 	_DLLoop
.1dc4	60		rts				rts
.1dc5					_DLFound:
.1dc5	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1dc7	b1 2a		lda ($2a),y			lda 	(temp0),y
.1dc9	a8		tay				tay 								; so we copy from (temp0),y
.1dca	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1dcc					_DLCopyDown:
.1dcc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1dce	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1dd0	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1dd2	d0 02		bne $1dd6			bne 	_DLNoCarry
.1dd4	e6 2b		inc $2b				inc 	temp0+1
.1dd6					_DLNoCarry:
.1dd6	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1dd8	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1dda	d0 f0		bne $1dcc			bne 	_DLCopyDown
.1ddc	a5 2b		lda $2b				lda 	temp0+1
.1dde	c5 36		cmp $36				cmp 	lowMemory+1
.1de0	d0 ea		bne $1dcc			bne 	_DLCopyDown
.1de2	60		rts				rts
.1de3					IAdvanceTemp0:
.1de3	84 32		sty $32				sty 	tempShort
.1de5	18		clc				clc
.1de6	a0 00		ldy #$00			ldy 	#0 							; get offset
.1de8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1dea	65 2a		adc $2a				adc 	temp0
.1dec	85 2a		sta $2a				sta 	temp0
.1dee	90 02		bcc $1df2			bcc 	_IATNoCarry
.1df0	e6 2b		inc $2b				inc 	temp0+1
.1df2					_IATNoCarry:
.1df2	b1 2a		lda ($2a),y			lda 	(temp0),y
.1df4	a4 32		ldy $32				ldy 	tempShort
.1df6	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1df8	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1df9					InsertLine:
.1df9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1dfc	85 2a		sta $2a				sta 	temp0
.1dfe	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e01	85 2b		sta $2b				sta 	temp0+1
.1e03					_ILLoop:
.1e03	a0 01		ldy #$01			ldy 	#1
.1e05	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e07	c5 50		cmp $50				cmp 	esInt0
.1e09	c8		iny				iny
.1e0a	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e0c	e5 58		sbc $58				sbc 	esInt1
.1e0e	b0 05		bcs $1e15			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1e10	20 e3 1d	jsr $1de3			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1e13	d0 ee		bne $1e03			bne 	_ILLoop
.1e15					_ILFound:
.1e15	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1e17	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1e19	a5 36		lda $36				lda 	lowMemory+1
.1e1b	85 2d		sta $2d				sta 	temp1+1
.1e1d	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1e20	18		clc				clc 								; add 3 for the line number and offset.
.1e21	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1e23	a8		tay				tay
.1e24	a2 00		ldx #$00			ldx 	#0
.1e26	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1e28	91 2c		sta ($2c),y			sta 	(temp1),y
.1e2a	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1e2c	c5 2a		cmp $2a				cmp 	temp0
.1e2e	d0 06		bne $1e36			bne 	_ILMNext
.1e30	a5 2d		lda $2d				lda 	temp1+1
.1e32	c5 2b		cmp $2b				cmp 	temp0+1
.1e34	f0 0b		beq $1e41			beq 	_ILMCopy
.1e36					_ILMNext:
.1e36	a5 2c		lda $2c				lda 	temp1
.1e38	d0 02		bne $1e3c			bne 	_ILNoBorrow
.1e3a	c6 2d		dec $2d				dec 	temp1+1
.1e3c					_ILNoBorrow:
.1e3c	c6 2c		dec $2c				dec 	temp1
.1e3e	4c 26 1e	jmp $1e26			jmp 	_ILMove 					; and go round again
.1e41					_ILMCopy:
.1e41	98		tya				tya 								; Y is the offset of the new line.
.1e42	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1e44	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1e46	a5 50		lda $50				lda 	esInt0
.1e48	91 2a		sta ($2a),y			sta 	(temp0),y
.1e4a	c8		iny				iny
.1e4b	a5 58		lda $58				lda 	esInt1
.1e4d	91 2a		sta ($2a),y			sta 	(temp0),y
.1e4f	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1e51					_ILMCopy2:
.1e51	b1 28		lda ($28),y			lda 	(codePtr),y
.1e53	c8		iny				iny
.1e54	c8		iny				iny
.1e55	c8		iny				iny
.1e56	91 2a		sta ($2a),y			sta 	(temp0),y
.1e58	88		dey				dey
.1e59	88		dey				dey
.1e5a	cc ea 0d	cpy $0dea			cpy 	tokenBufferIndex
.1e5d	d0 f2		bne $1e51			bne 	_ILMCopy2
.1e5f	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1e60					WarmStartEntry:
.1e60	a2 ff		ldx #$ff			ldx 	#$FF
.1e62	9a		txs				txs
.1e63	20 a0 1d	jsr $1da0			jsr 	ForceStandardMode
.1e66	a9 02		lda #$02			lda 	#2							; green text.
.1e68	a2 08		ldx #$08		ldx	#8
.1e6a	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e6d	a2 0c		ldx #$0c		ldx	#12
.1e6f	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e72	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1e74	85 28		sta $28				sta 	codePtr
.1e76	a5 2b		lda $2b				lda 	temp0+1
.1e78	85 29		sta $29				sta 	codePtr+1
.1e7a	a2 06		ldx #$06		ldx	#6
.1e7c	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e7f	a2 08		ldx #$08		ldx	#8
.1e81	20 91 40	jsr $4091		jsr	tokeniserHandler
.1e84	c9 00		cmp #$00			cmp 	#0
.1e86	f0 25		beq $1ead			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1e88	a9 e7		lda #$e7			lda 	#(tokenHeader) & $FF
.1e8a	85 28		sta $28				sta 	codePtr
.1e8c	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1e8e	85 29		sta $29				sta 	1+(codePtr)
.1e90	ad ea 0c	lda $0cea			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1e93	c9 80		cmp #$80			cmp 	#$80
.1e95	f0 c9		beq $1e60			beq 	WarmStartEntry
.1e97	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1e99	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1e9b	f0 15		beq $1eb2			beq 	HasLineNumber
.1e9d	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1e9f	8d e7 0c	sta $0ce7			sta 	tokenHeader 				; fake program line.
.1ea2	8d e8 0c	sta $0ce8			sta 	tokenHeader+1
.1ea5	8d e9 0c	sta $0ce9			sta 	tokenHeader+2
.1ea8	a2 18		ldx #$18		ldx	#24
.1eaa	20 95 35	jsr $3595		jsr	mainHandler
.1ead					WSEError:
.1ead	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1eaf	20 18 15	jsr $1518		jsr	errorHandler
.1eb2					HasLineNumber:
.1eb2	a0 03		ldy #$03			ldy 	#3 							; get line number
.1eb4	a9 00		lda #$00			lda 	#0
.1eb6	a2 0a		ldx #$0a		ldx	#10
.1eb8	20 95 35	jsr $3595		jsr	mainHandler
.1ebb	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1ebd	05 68		ora $68				ora 	esInt3
.1ebf	d0 ec		bne $1ead			bne 	WSEError
.1ec1	98		tya				tya 								; make codePtr point to code after the line number.
.1ec2	18		clc				clc 								; by skipping over the tokenised number.
.1ec3	65 28		adc $28				adc 	codePtr
.1ec5	85 28		sta $28				sta 	codePtr
.1ec7	90 02		bcc $1ecb			bcc		_HLNNoCarry
.1ec9	e6 29		inc $29				inc 	codePtr+1
.1ecb					_HLNNoCarry:
.1ecb	98		tya				tya 								; subtract that offset from the code buffer index
.1ecc	38		sec				sec
.1ecd	49 ff		eor #$ff			eor 	#$FF
.1ecf	6d ea 0d	adc $0dea			adc 	tokenBufferIndex
.1ed2	18		clc				clc 								; add space allowing for header & $80 trailer
.1ed3	69 04		adc #$04			adc 	#4
.1ed5	8d ea 0d	sta $0dea			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1ed8	20 a6 1d	jsr $1da6			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1edb					_HLNNoDelete:
.1edb	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1ede	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1ee0	f0 0c		beq $1eee			beq 	_HLMEditDone
.1ee2	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1ee4	18		clc				clc 								; workspace (1k)
.1ee5	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1ee7	c5 34		cmp $34				cmp 	highMemory+1
.1ee9	b0 0b		bcs $1ef6			bcs 	_HLMMemory 					; nope, won't allowit.
.1eeb	20 f9 1d	jsr $1df9			jsr 	InsertLine 					; insert the line in
.1eee					_HLMEditDone:
.1eee	a2 06		ldx #$06		ldx	#6
.1ef0	20 95 35	jsr $3595		jsr	mainHandler
.1ef3	4c 60 1e	jmp $1e60			jmp 	WarmStartEntry
.1ef6					_HLMMemory:
.1ef6	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1ef8	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1efb					interactionHandler:
.1efb	7c fe 1e	jmp ($1efe,x)			jmp 	(interactionVectors,x)
.1efe					interactionVectors:
>1efe	04 1f					.word _DummyControlHandler ; index 0
>1f00	14 1d					.word ColdStartEntry       ; index 2
>1f02	60 1e					.word WarmStartEntry       ; index 4
.1f04					_DummyControlHandler:
.1f04	60		rts			rts

;******  Return to file: basic.asm

.1f05					section_end_interaction:
.1f05					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cad					dataPtr:
>0cad							.fill 	2
.0caf					dataIndex:
>0caf							.fill 	1
.1f05					CommandRead:
.1f05	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1f07	20 48 2e	jsr $2e48			jsr 	EvaluateReference
.1f0a	20 4b 1f	jsr $1f4b			jsr 	SwapDPCP 					; use the data pointer.
.1f0d	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1f0f	c8		iny				iny
.1f10	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1f12	f0 07		beq $1f1b			beq 	_CRInData
.1f14	88		dey				dey
.1f15	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1f17	aa		tax				tax
.1f18	20 4c 26	jsr $264c			jsr 	ScanForward
.1f1b					_CRInData:
.1f1b	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1f1d	20 f0 2d	jsr $2df0			jsr 	Evaluate
.1f20	ca		dex				dex 								; and write the value.
.1f21	20 9f 21	jsr $219f			jsr 	WriteValue
.1f24	20 4b 1f	jsr $1f4b			jsr 	SwapDPCP 					; get the code pointer back.
.1f27	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1f29	c8		iny				iny
.1f2a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1f2c	f0 d7		beq $1f05			beq 	CommandRead
.1f2e	88		dey				dey
.1f2f	60		rts				rts
.1f30					CommandData:
.1f30	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1f32	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1f34	20 4c 26	jsr $264c			jsr 	ScanForward
.1f37	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1f38	60		rts				rts
.1f39					CommandRestore:
.1f39	ad c8 0a	lda $0ac8			lda 	basePage
.1f3c	8d ad 0c	sta $0cad			sta 	dataPtr
.1f3f	ad c9 0a	lda $0ac9			lda 	basePage+1
.1f42	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1f45	a9 03		lda #$03			lda 	#3
.1f47	8d af 0c	sta $0caf			sta 	dataIndex
.1f4a	60		rts				rts
.1f4b					SwapDPCP:
.1f4b	8a		txa				txa
.1f4c	48		pha				pha
.1f4d	98		tya				tya 								; swap Y, DataIndex
.1f4e	ac af 0c	ldy $0caf			ldy 	DataIndex
.1f51	8d af 0c	sta $0caf			sta 	DataIndex
.1f54	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1f56	ae ad 0c	ldx $0cad			ldx 	dataptr
.1f59	8d ad 0c	sta $0cad			sta 	dataPtr
.1f5c	86 28		stx $28				stx 	codePtr
.1f5e	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1f60	ae ae 0c	ldx $0cae			ldx 	dataptr+1
.1f63	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1f66	86 29		stx $29				stx 	codePtr+1
.1f68	68		pla				pla
.1f69	aa		tax				tax
.1f6a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1f6b					CommandGOSUB:
.1f6b	20 0d 2e	jsr $2e0d			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1f6e	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1f70	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1f72	20 42 35	jsr $3542			jsr 	RSClaim
.1f75	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1f77	20 6e 35	jsr $356e			jsr 	RSSavePosition
.1f7a	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1f7c	f0 1b		beq $1f99			beq 	GotoTOS 					; and do a GOTO there.
.1f7e					CommandRETURN:
.1f7e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1f80	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1f82	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1f84	f0 05		beq $1f8b			beq 	_isok
.1f86	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1f88	20 18 15	jsr $1518		jsr	errorHandler
.1f8b					_isok:
.1f8b	a9 01		lda #$01			lda 	#1
.1f8d	20 81 35	jsr $3581			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1f90	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1f92	20 64 35	jsr $3564			jsr 	RSFree
.1f95	60		rts				rts
.1f96					CommandGOTO:
.1f96	20 0d 2e	jsr $2e0d			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1f99					GotoTOS:
.1f99	20 30 29	jsr $2930			jsr 	ResetCodeAddress 			; simple search.
.1f9c					_GotoSearch:
.1f9c	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f9e	b1 28		lda ($28),y			lda 	(codePtr),y
.1fa0	f0 21		beq $1fc3			beq 	_GotoError 					; not found.
.1fa2	c8		iny				iny									; check LSB match
.1fa3	b1 28		lda ($28),y			lda 	(codePtr),y
.1fa5	d5 50		cmp $50,x			cmp 	esInt0,x
.1fa7	d0 07		bne $1fb0			bne 	_GotoNext
.1fa9	c8		iny				iny
.1faa	b1 28		lda ($28),y			lda 	(codePtr),y
.1fac	d5 58		cmp $58,x			cmp 	esInt1,x
.1fae	f0 10		beq $1fc0			beq 	_GotoFound
.1fb0					_GotoNext:
.1fb0	a0 00		ldy #$00			ldy 	#0 							; go next line
.1fb2	b1 28		lda ($28),y			lda 	(codePtr),y
.1fb4	18		clc				clc
.1fb5	65 28		adc $28				adc 	codePtr
.1fb7	85 28		sta $28				sta 	codePtr
.1fb9	90 e1		bcc $1f9c			bcc 	_GotoSearch
.1fbb	e6 29		inc $29				inc 	codePtr+1
.1fbd	4c 9c 1f	jmp $1f9c			jmp 	_GotoSearch
.1fc0					_GotoFound:
.1fc0	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1fc2	60		rts				rts
.1fc3					_GotoError:
.1fc3	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1fc5	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb0					InputBuffer:
>0cb0							.fill 	MaxInputSize+1
.1fc8					Command_Input:
.1fc8	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1fca	c8		iny				iny
.1fcb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1fcd	f0 f9		beq $1fc8			beq 	Command_Input
.1fcf	88		dey				dey 							; undo consume
.1fd0	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1fd2	f0 54		beq $2028			beq 	_CIExit 				; : or EOL, exit
.1fd4	c9 80		cmp #$80			cmp 	#TOK_EOL
.1fd6	f0 50		beq $2028			beq 	_CIExit
.1fd8	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1fda	90 12		bcc $1fee			bcc 	_CIVariable
.1fdc	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1fde	d0 43		bne $2023			bne 	_CISyntax
.1fe0	a2 00		ldx #$00			ldx 	#0
.1fe2	20 04 2e	jsr $2e04			jsr 	EvaluateString 			; evaluate and print string
.1fe5	20 01 22	jsr $2201			jsr 	TOSToTemp0
.1fe8	20 f7 20	jsr $20f7			jsr 	PrintString
.1feb	4c c8 1f	jmp $1fc8			jmp 	Command_Input
.1fee					_CIVariable:
.1fee	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1ff0	20 48 2e	jsr $2e48			jsr 	EvaluateReference  		; this is where its going
.1ff3					_CIRetry:
.1ff3	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1ff5	a2 14		ldx #$14		ldx	#20
.1ff7	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ffa	98		tya				tya
.1ffb	48		pha				pha
.1ffc	20 3c 20	jsr $203c			jsr 	InputString 			; input a string (manually)
.1fff	a2 01		ldx #$01			ldx 	#1
.2001	20 29 20	jsr $2029			jsr 	BufferToStackX 			; make stack,x ref input string.
.2004	a5 48		lda $48				lda 	esType 					; if target type numeric
.2006	29 40		and #$40			and 	#$40 					; then convert to number
.2008	d0 11		bne $201b			bne 	_CIWrite
.200a	a2 01		ldx #$01			ldx 	#1
.200c	20 01 22	jsr $2201			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.200f	a9 0a		lda #$0a			lda 	#10
.2011	20 15 33	jsr $3315			jsr 	MInt32FromString 		; convert it back from a string.
.2014	68		pla				pla
.2015	a8		tay				tay
.2016	b0 03		bcs $201b			bcs 	_CIWrite 				; successfully converted.
.2018	18		clc				clc 							; default fail FP conversion
.2019	90 d8		bcc $1ff3			bcc		_CIRetry				; failed, try again.
.201b					_CIWrite:
.201b	a2 00		ldx #$00			ldx 	#0
.201d	20 9f 21	jsr $219f			jsr 	WriteValue
.2020	4c c8 1f	jmp $1fc8			jmp 	Command_Input
.2023					_CISyntax:
.2023	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2025	20 18 15	jsr $1518		jsr	errorHandler
.2028					_CIExit:
.2028	60		rts				rts
.2029					BufferToStackX:
.2029	a9 b0		lda #$b0			lda 	#InputBuffer & $FF
.202b	95 50		sta $50,x			sta 	esInt0,x
.202d	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.202f	95 58		sta $58,x			sta 	esInt1,x
.2031	a9 00		lda #$00			lda 	#0
.2033	95 60		sta $60,x			sta 	esInt2,x
.2035	95 68		sta $68,x			sta 	esInt3,x
.2037	a9 40		lda #$40			lda 	#$40
.2039	95 48		sta $48,x			sta 	esType,x
.203b	60		rts				rts
.203c					InputString:
.203c	a9 00		lda #$00			lda 	#0
.203e	8d b0 0c	sta $0cb0			sta 	InputBuffer
.2041					_InputLoop:
.2041	a2 02		ldx #$02		ldx	#2
.2043	20 f6 14	jsr $14f6		jsr	deviceHandler
.2046	a2 0a		ldx #$0a		ldx	#10
.2048	20 f6 14	jsr $14f6		jsr	deviceHandler
.204b	c9 00		cmp #$00			cmp 	#0
.204d	f0 f2		beq $2041			beq 	_InputLoop
.204f	c9 08		cmp #$08			cmp 	#8
.2051	f0 19		beq $206c			beq 	_InputBackspace
.2053	c9 0d		cmp #$0d			cmp 	#13
.2055	f0 21		beq $2078			beq 	_InputExit
.2057	ae b0 0c	ldx $0cb0			ldx 	InputBuffer
.205a	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.205c	f0 e3		beq $2041			beq 	_InputLoop
.205e	9d b1 0c	sta $0cb1,x			sta 	InputBuffer+1,x 		; write char
.2061	ee b0 0c	inc $0cb0			inc 	InputBuffer 			; advance count.
.2064					_InputPrintLoop:
.2064	a2 14		ldx #$14		ldx	#20
.2066	20 f6 14	jsr $14f6		jsr	deviceHandler
.2069	4c 41 20	jmp $2041			jmp	 	_InputLoop
.206c					_InputBackspace:
.206c	ad b0 0c	lda $0cb0			lda 	InputBuffer 			; at start
.206f	f0 d0		beq $2041			beq 	_InputLoop
.2071	ce b0 0c	dec $0cb0			dec 	InputBuffer
.2074	a9 08		lda #$08			lda 	#8
.2076	d0 ec		bne $2064			bne 	_InputPrintLoop
.2078					_InputExit:
.2078	a2 06		ldx #$06		ldx	#6
.207a	20 f6 14	jsr $14f6		jsr	deviceHandler
.207d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd1					lastPrintToken:
>0cd1							.fill 	1
.207e					Command_Print:
.207e	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2080	8d d1 0c	sta $0cd1			sta 	lastPrintToken
.2083	88		dey				dey
.2084					_PrintLoopSkip:
.2084	c8		iny				iny
.2085					_PrintLoop:
.2085	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2087	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2089	f0 5b		beq $20e6			beq 	_PrintExit
.208b	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.208d	f0 57		beq $20e6			beq 	_PrintExit
.208f	8d d1 0c	sta $0cd1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2092	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2094	f0 ee		beq $2084			beq 	_PrintLoopSkip
.2096	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2098	f0 3c		beq $20d6			beq	 	_PrintNewLine
.209a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.209c	f0 40		beq $20de			beq 	_PrintTab
.209e	20 ee 2d	jsr $2dee			jsr 	EvaluateRoot 				; evaluate something at the root
.20a1	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.20a3	85 2a		sta $2a				sta 	temp0
.20a5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.20a7	85 2b		sta $2b				sta 	1+(temp0)
.20a9	a5 48		lda $48				lda 	esType 						; get type
.20ab	f0 15		beq $20c2			beq		_PrintInteger
.20ad	4a		lsr a				lsr 	a 							; check for floating point
.20ae	b0 08		bcs $20b8			bcs 	_PrintFloat
.20b0					_PrintString:
.20b0	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.20b2	20 01 22	jsr $2201			jsr 	TOSToTemp0
.20b5	4c d0 20	jmp $20d0			jmp 	_PrintTemp0 				; print no leading space.
.20b8					_PrintFloat:
.20b8	a9 00		lda #$00			lda 	#0 							; stack level.
.20ba	a2 16		ldx #$16		ldx	#22
.20bc	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.20bf	4c c9 20	jmp $20c9			jmp 	_PrintSpaceTemp0
.20c2					_PrintInteger:
.20c2	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.20c4	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.20c6	20 fd 33	jsr $33fd			jsr 	MInt32ToString				; convert to text
.20c9					_PrintSpaceTemp0:
.20c9	a9 20		lda #$20			lda 	#32
.20cb	a2 14		ldx #$14		ldx	#20
.20cd	20 f6 14	jsr $14f6		jsr	deviceHandler
.20d0					_PrintTemp0:
.20d0	20 f7 20	jsr $20f7			jsr 	PrintString
.20d3	4c 85 20	jmp $2085			jmp 	_PrintLoop
.20d6					_PrintNewLine:
.20d6	a2 06		ldx #$06		ldx	#6
.20d8	20 f6 14	jsr $14f6		jsr	deviceHandler
.20db	4c 84 20	jmp $2084			jmp 	_PrintLoopSkip
.20de					_PrintTab:
.20de	a2 1a		ldx #$1a		ldx	#26
.20e0	20 f6 14	jsr $14f6		jsr	deviceHandler
.20e3	4c 84 20	jmp $2084			jmp 	_PrintLoopSkip
.20e6					_PrintExit:
.20e6	ad d1 0c	lda $0cd1			lda		lastPrintToken 				; check last token
.20e9	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.20eb	f0 09		beq $20f6			beq 	_PrintExit2
.20ed	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.20ef	f0 05		beq $20f6			beq 	_PrintExit2
.20f1	a2 06		ldx #$06		ldx	#6
.20f3	20 f6 14	jsr $14f6		jsr	deviceHandler
.20f6					_PrintExit2:
.20f6	60		rts				rts
.20f7					PrintString:
.20f7	8a		txa				txa
.20f8	48		pha				pha
.20f9	98		tya				tya
.20fa	48		pha				pha
.20fb	a0 00		ldy #$00			ldy 	#0							; get length
.20fd	b1 2a		lda ($2a),y			lda 	(temp0),y
.20ff	aa		tax				tax 								; into X
.2100	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2102	f0 10		beq $2114			beq 	_PSExit
.2104	ca		dex				dex
.2105	8a		txa				txa
.2106	48		pha				pha
.2107	c8		iny				iny
.2108	b1 2a		lda ($2a),y			lda 	(temp0),y
.210a	a2 14		ldx #$14		ldx	#20
.210c	20 f6 14	jsr $14f6		jsr	deviceHandler
.210f	68		pla				pla
.2110	aa		tax				tax
.2111	4c 00 21	jmp $2100			jmp 	_PSLoop
.2114					_PSExit:
.2114	68		pla				pla
.2115	a8		tay				tay
.2116	68		pla				pla
.2117	aa		tax				tax
.2118	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2119					Command_CLS:
.2119	a2 04		ldx #$04		ldx	#4
.211b	20 f6 14	jsr $14f6		jsr	deviceHandler
.211e	60		rts				rts
.211f					Command_Ink:
.211f	a2 00		ldx #$00			ldx 	#0
.2121	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger
.2124	a2 08		ldx #$08		ldx	#8
.2126	20 f6 14	jsr $14f6		jsr	deviceHandler
.2129	60		rts				rts
.212a					Command_Paper:
.212a	a2 00		ldx #$00			ldx 	#0
.212c	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger
.212f	a2 12		ldx #$12		ldx	#18
.2131	20 f6 14	jsr $14f6		jsr	deviceHandler
.2134	60		rts				rts
.2135					Command_Locate:
.2135	a2 00		ldx #$00			ldx 	#0
.2137	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger
.213a	20 27 35	jsr $3527			jsr 	CheckComma
.213d	e8		inx				inx
.213e	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger
.2141	98		tya				tya
.2142	48		pha				pha
.2143	a4 51		ldy $51				ldy 	esInt0+1
.2145	a5 50		lda $50				lda 	esInt0
.2147	a2 10		ldx #$10		ldx	#16
.2149	20 f6 14	jsr $14f6		jsr	deviceHandler
.214c	68		pla				pla
.214d	a8		tay				tay
.214e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.214f					Command_VDU:
.214f	20 0d 2e	jsr $2e0d			jsr 	EvaluateRootInteger 			; get integer at root.
.2152	a5 50		lda $50				lda 	esInt0
.2154	a2 14		ldx #$14		ldx	#20
.2156	20 f6 14	jsr $14f6		jsr	deviceHandler
.2159					_CVNext:
.2159	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.215b	c8		iny				iny
.215c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.215e	f0 ef		beq $214f			beq 	Command_VDU
.2160	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2162	d0 0a		bne $216e			bne 	_CVExit
.2164	a5 58		lda $58				lda 	esInt1
.2166	a2 14		ldx #$14		ldx	#20
.2168	20 f6 14	jsr $14f6		jsr	deviceHandler
.216b	4c 59 21	jmp $2159			jmp 	_CVNext
.216e	88		dey		_CVExit:dey
.216f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2170					Command_Assert:
.2170	20 0d 2e	jsr $2e0d			jsr 	EvaluateRootInteger 		; what is being asserted.
.2173	20 ce 34	jsr $34ce			jsr 	MInt32Zero 					; is it true ?
.2176	f0 01		beq $2179			beq 	_CAError
.2178	60		rts				rts
.2179					_CAError:
.2179	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.217b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.217e					Command_Dim:
.217e	a2 04		ldx #$04		ldx	#4
.2180	20 62 44	jsr $4462		jsr	variableHandler
.2183	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2185	c8		iny				iny
.2186	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2188	f0 f4		beq $217e			beq 	Command_Dim
.218a	88		dey				dey 								; unpick get
.218b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.218c					CommandLet:
.218c	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.218e	20 48 2e	jsr $2e48			jsr 	EvaluateReference
.2191	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2193	20 0f 35	jsr $350f			jsr 	CheckToken
.2196	e8		inx				inx 								; do RHS
.2197	20 f0 2d	jsr $2df0			jsr 	Evaluate 					; evaluate and dereference
.219a	ca		dex				dex
.219b	20 9f 21	jsr $219f			jsr 	WriteValue 					; write it out
.219e	60		rts				rts
.219f					WriteValue:
.219f	98		tya				tya
.21a0	48		pha				pha
.21a1	20 01 22	jsr $2201			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.21a4	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.21a6	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.21a8	29 40		and #$40			and 	#$40
.21aa	d0 50		bne $21fc			bne		_WVType
.21ac	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.21ae	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.21b0	29 40		and #$40			and 	#$40
.21b2	d0 1f		bne $21d3			bne 	_WVCopyString
.21b4	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.21b6	15 49		ora $49,x			ora 	esType+1,x
.21b8	4a		lsr a				lsr 	a
.21b9	90 22		bcc $21dd			bcc 	_WVCopyData4 				; copy 4 data bytes.
.21bb	b5 48		lda $48,x			lda 	esType,x
.21bd	4a		lsr a				lsr 	a
.21be	90 3c		bcc $21fc			bcc 	_WVType
.21c0	e8		inx				inx 								; force the value being written to be a float.
.21c1	20 52 2a	jsr $2a52			jsr 	BPMakeFloat
.21c4	ca		dex				dex
.21c5	20 01 22	jsr $2201			jsr 	TOSToTemp0 					; set Temp0 to write address
.21c8	e8		inx				inx
.21c9	8a		txa				txa
.21ca	a2 22		ldx #$22		ldx	#34
.21cc	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.21cf	aa		tax				tax
.21d0	4c f9 21	jmp $21f9			jmp 	_WVCopyExit
.21d3					_WVCopyString:
.21d3	8a		txa				txa
.21d4	a2 10		ldx #$10		ldx	#16
.21d6	20 52 38	jsr $3852		jsr	stringHandler
.21d9	aa		tax				tax
.21da	4c f9 21	jmp $21f9			jmp 	_WVCopyExit
.21dd					_WVCopyData4:
.21dd	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.21df	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.21e1	d0 10		bne $21f3			bne 	_WVCopyData1
.21e3	a0 03		ldy #$03			ldy 	#3
.21e5	b5 69		lda $69,x			lda 	esInt3+1,x
.21e7	91 2a		sta ($2a),y			sta 	(temp0),y
.21e9	88		dey				dey
.21ea	b5 61		lda $61,x			lda 	esInt2+1,x
.21ec	91 2a		sta ($2a),y			sta 	(temp0),y
.21ee	88		dey				dey
.21ef	b5 59		lda $59,x			lda 	esInt1+1,x
.21f1	91 2a		sta ($2a),y			sta 	(temp0),y
.21f3					_WVCopyData1:
.21f3	a0 00		ldy #$00			ldy 	#0
.21f5	b5 51		lda $51,x			lda 	esInt0+1,x
.21f7	91 2a		sta ($2a),y			sta 	(temp0),y
.21f9					_WVCopyExit:
.21f9	68		pla				pla
.21fa	a8		tay				tay
.21fb	60		rts				rts
.21fc					_WVType:
.21fc	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.21fe	20 18 15	jsr $1518		jsr	errorHandler
.2201					TOSToTemp0:
.2201	b5 50		lda $50,x			lda 	esInt0,x
.2203	85 2a		sta $2a				sta 	temp0
.2205	b5 58		lda $58,x			lda 	esInt1,x
.2207	85 2b		sta $2b				sta 	temp0+1
.2209	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.220a					Command_Poke:
.220a	a9 01		lda #$01			lda 	#1
.220c	d0 06		bne $2214			bne 	PokeGeneral
.220e					Command_Doke:
.220e	a9 02		lda #$02			lda 	#2
.2210	d0 02		bne $2214			bne 	PokeGeneral
.2212					Command_Loke:
.2212	a9 03		lda #$03			lda 	#3
.2214					PokeGeneral:
.2214	48		pha				pha 								; save id (PDL = 123)
.2215	20 0d 2e	jsr $2e0d			jsr 	EvaluateRootInteger 		; target address
.2218	20 27 35	jsr $3527			jsr	 	CheckComma
.221b	e8		inx				inx
.221c	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger 			; what value to POKE ?
.221f	ca		dex				dex
.2220	20 01 22	jsr $2201			jsr 	TOSToTemp0 					; temp0 points to the target address
.2223	84 32		sty $32				sty 	tempShort 					; save Y
.2225	68		pla				pla 								; get copy type (1-3) and dispatch
.2226	aa		tax				tax
.2227	ca		dex				dex
.2228	f0 14		beq $223e			beq 	_Poke1
.222a	ca		dex				dex
.222b	f0 0b		beq $2238			beq 	_Poke2
.222d	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.222f	a5 69		lda $69				lda 	esInt3+1
.2231	91 2a		sta ($2a),y			sta 	(temp0),y
.2233	88		dey				dey
.2234	a5 61		lda $61				lda 	esInt2+1
.2236	91 2a		sta ($2a),y			sta 	(temp0),y
.2238					_Poke2:
.2238	a0 01		ldy #$01			ldy 	#1
.223a	a5 59		lda $59				lda 	esInt1+1
.223c	91 2a		sta ($2a),y			sta 	(temp0),y
.223e					_Poke1:
.223e	a0 00		ldy #$00			ldy 	#0
.2240	a5 51		lda $51				lda 	esInt0+1
.2242	91 2a		sta ($2a),y			sta 	(temp0),y
.2244	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2246	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2247					Command_Rem:
.2247					Command_Rem2:
.2247	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2249	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.224b	d0 06		bne $2253			bne 	_CRNotString
.224d	c8		iny				iny
.224e	98		tya				tya
.224f	38		sec				sec
.2250	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2252	a8		tay				tay
.2253					_CRNotString:
.2253	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2254					CommandStop:
.2254	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2256	20 18 15	jsr $1518		jsr	errorHandler
.2259					CommandEnd:
.2259	4c 90 35	jmp $3590			jmp 	WarmStart
.225c					CommandXemu:
.225c	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.225f					AdvanceNextLine:
.225f	a0 00		ldy #$00			ldy 	#0 							; get offset
.2261	b1 28		lda ($28),y			lda 	(codePtr),y
.2263	18		clc				clc 								; add to codePtr
.2264	65 28		adc $28				adc 	codePtr
.2266	85 28		sta $28				sta 	codePtr
.2268	90 02		bcc $226c			bcc 	_ANLNoCarry
.226a	e6 29		inc $29				inc 	codePtr+1
.226c					_ANLNoCarry:
.226c	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.226e	f0 e9		beq $2259			beq 	CommandEnd 					; execute END
.2270	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2272	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2273					Command_FOR:
.2273	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2275	a2 0b		ldx #$0b			ldx 	#11
.2277	20 42 35	jsr $3542			jsr 	RSClaim
.227a	20 8c 21	jsr $218c			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.227d	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.227f	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2281	d0 4c		bne $22cf			bne 	_CFType
.2283	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2285	20 0f 35	jsr $350f			jsr 	CheckToken
.2288	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.228a	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger				; get terminal value in stack 1
.228d	98		tya				tya
.228e	48		pha				pha
.228f	a0 04		ldy #$04			ldy 	#4
.2291	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2293	91 37		sta ($37),y			sta 	(rsPointer),y
.2295	c8		iny				iny
.2296	a5 58		lda $58				lda		esInt1
.2298	91 37		sta ($37),y			sta 	(rsPointer),y
.229a	c8		iny				iny
.229b	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.229d	91 37		sta ($37),y			sta 	(rsPointer),y
.229f	c8		iny				iny
.22a0	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.22a2	91 37		sta ($37),y			sta 	(rsPointer),y
.22a4	c8		iny				iny
.22a5	a5 59		lda $59				lda		esInt1+1
.22a7	91 37		sta ($37),y			sta 	(rsPointer),y
.22a9	c8		iny				iny
.22aa	a5 61		lda $61				lda		esInt2+1
.22ac	91 37		sta ($37),y			sta 	(rsPointer),y
.22ae	c8		iny				iny
.22af	a5 69		lda $69				lda		esInt3+1
.22b1	91 37		sta ($37),y			sta 	(rsPointer),y
.22b3	68		pla				pla
.22b4	a8		tay				tay
.22b5	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.22b7	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.22b9	d0 0e		bne $22c9			bne 	_CFDone
.22bb	c8		iny				iny									; skip over step.
.22bc	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger 			; get step
.22bf	98		tya				tya
.22c0	48		pha				pha
.22c1	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.22c3	a0 06		ldy #$06			ldy 	#6
.22c5	91 37		sta ($37),y			sta 	(rsPointer),y
.22c7	68		pla				pla
.22c8	a8		tay				tay
.22c9					_CFDone:
.22c9	a9 01		lda #$01			lda 	#1
.22cb	20 6e 35	jsr $356e			jsr 	RSSavePosition 				; save position.
.22ce	60		rts				rts
.22cf					_CFType:
.22cf	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.22d1	20 18 15	jsr $1518		jsr	errorHandler
.22d4					Command_NEXT:
.22d4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.22d6	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.22d8	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.22da	f0 05		beq $22e1			beq 	_isok
.22dc	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.22de	20 18 15	jsr $1518		jsr	errorHandler
.22e1					_isok:
.22e1	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.22e3	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.22e5	b0 18		bcs $22ff			bcs 	_CNNoIndex
.22e7	a2 00		ldx #$00			ldx 	#0 							; start on stack
.22e9	20 48 2e	jsr $2e48			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.22ec	98		tya				tya
.22ed	48		pha				pha
.22ee	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.22f0	b1 37		lda ($37),y			lda 	(rsPointer),y
.22f2	d5 50		cmp $50,x			cmp 	esInt0,x
.22f4	d0 76		bne $236c			bne 	_CNBadIndex
.22f6	c8		iny				iny
.22f7	b1 37		lda ($37),y			lda 	(rsPointer),y
.22f9	d5 58		cmp $58,x			cmp 	esInt1,x
.22fb	d0 6f		bne $236c			bne 	_CNBadIndex
.22fd	68		pla				pla
.22fe	a8		tay				tay
.22ff					_CNNoIndex:
.22ff	98		tya				tya
.2300	48		pha				pha
.2301	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2303	b1 37		lda ($37),y			lda 	(rsPointer),y
.2305	85 2a		sta $2a				sta 	temp0
.2307	c8		iny				iny
.2308	b1 37		lda ($37),y			lda 	(rsPointer),y
.230a	85 2b		sta $2b				sta 	temp0+1
.230c	c8		iny				iny
.230d	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.230f	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2311	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2313	10 01		bpl $2316			bpl 	_CNSignX
.2315	ca		dex				dex  								; X = $FF
.2316					_CNSignX:
.2316	18		clc				clc 								; add to the LSB
.2317	a0 00		ldy #$00			ldy 	#0
.2319	71 2a		adc ($2a),y			adc 	(temp0),y
.231b	91 2a		sta ($2a),y			sta 	(temp0),y
.231d					_CNPropogate:
.231d	c8		iny				iny  								; add the sign extended in X to the rest.
.231e	8a		txa				txa
.231f	71 2a		adc ($2a),y			adc 	(temp0),y
.2321	91 2a		sta ($2a),y			sta 	(temp0),y
.2323	c8		iny				iny
.2324	8a		txa				txa
.2325	71 2a		adc ($2a),y			adc 	(temp0),y
.2327	91 2a		sta ($2a),y			sta 	(temp0),y
.2329	c8		iny				iny
.232a	8a		txa				txa
.232b	71 2a		adc ($2a),y			adc 	(temp0),y
.232d	91 2a		sta ($2a),y			sta 	(temp0),y
.232f	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2330	a5 37		lda $37				lda 	rsPointer
.2332	69 07		adc #$07			adc 	#7
.2334	85 2c		sta $2c				sta 	temp1
.2336	a9 00		lda #$00			lda 	#0
.2338	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.233a	a8		tay				tay 								; and clear the Y register again.
.233b	65 38		adc $38				adc 	rsPointer+1
.233d	85 2d		sta $2d				sta 	temp1+1
.233f	38		sec				sec 								; calculate current - limit oring interim values.
.2340	20 78 23	jsr $2378			jsr 	_CNCompare 					; each of these does a byte.
.2343	20 78 23	jsr $2378			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2346	20 78 23	jsr $2378			jsr 	_CNCompare 					; and the carry of the subtraction.
.2349	20 78 23	jsr $2378			jsr 	_CNCompare
.234c	50 02		bvc $2350			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.234e	49 80		eor #$80			eor 	#$80
.2350					_CNNoOverflow:
.2350	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2352	30 1d		bmi $2371			bmi 	_CNCheckDownto
.2354	c9 00		cmp #$00			cmp 	#0
.2356	30 0c		bmi $2364			bmi 	_CNLoopRound 				; loop round if < =
.2358	a5 2e		lda $2e				lda 	temp2
.235a	f0 08		beq $2364			beq 	_CNLoopRound
.235c					_CNLoopExit:
.235c	68		pla				pla
.235d	a8		tay				tay
.235e	a9 0b		lda #$0b			lda 	#11
.2360	20 64 35	jsr $3564			jsr 	RSFree
.2363	60		rts				rts
.2364					_CNLoopRound:
.2364	68		pla				pla
.2365	a8		tay				tay
.2366	a9 01		lda #$01			lda 	#1
.2368	20 81 35	jsr $3581			jsr 	RSLoadPosition				; go back to the loop top
.236b	60		rts				rts
.236c					_CNBadIndex:
.236c	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.236e	20 18 15	jsr $1518		jsr	errorHandler
.2371					_CNCheckDownto:
.2371	c9 00		cmp #$00			cmp 	#0
.2373	10 ef		bpl $2364			bpl 	_CNLoopRound
.2375	4c 5c 23	jmp $235c			jmp 	_CNLoopExit
.2378					_CNCompare:
.2378	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.237a	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.237c	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.237e	85 2e		sta $2e				sta 	temp2
.2380	c8		iny				iny
.2381	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2382					CommandIf:
.2382	20 0d 2e	jsr $2e0d			jsr 	EvaluateRootInteger 		; get what's being tested.
.2385	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2387	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2389	f0 04		beq $238f			beq 	_IfSimple
.238b	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.238d	d0 1b		bne $23aa			bne 	_IfComplex
.238f					_IfSimple:
.238f	20 ce 34	jsr $34ce			jsr 	MInt32Zero					; check if TOS zero
.2392	f0 10		beq $23a4			beq 	_IfEOL 						; go to next line.
.2394	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2396	c8		iny				iny
.2397	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2399	f0 0c		beq $23a7			beq 	_IfGoto 					; do the Goto code
.239b	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.239d	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.239f	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.23a1	f0 04		beq $23a7			beq 	_IfGoto
.23a3	60		rts				rts 								; else continue on this line.
.23a4					_IfEOL:
.23a4	4c 5f 22	jmp $225f			jmp 	AdvanceNextLine 			; go to next line
.23a7					_IfGoto:
.23a7	4c 96 1f	jmp $1f96			jmp 	CommandGoto
.23aa					_IfComplex:
.23aa	20 ce 34	jsr $34ce			jsr 	MInt32Zero 					; is it true ?
.23ad	f0 01		beq $23b0			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.23af	60		rts				rts 								; else continue.
.23b0					_IFSkip:
.23b0	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.23b2	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.23b4	4c 4c 26	jmp $264c			jmp		ScanForward
.23b7					Command_ELSE:
.23b7	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.23b9	8a		txa				txa
.23ba	4c 4c 26	jmp $264c			jmp		ScanForward
.23bd					Command_ENDIF:
.23bd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd2					storeSize:
>0cd2							.fill 	1
.23be					CommandLocal:
.23be	a2 00		ldx #$00			ldx 	#0
.23c0	20 dc 23	jsr $23dc			jsr 	LocaliseVariable 			; localise one.
.23c3					_CLCheckNext:
.23c3	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.23c5	c8		iny				iny
.23c6	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.23c8	f0 06		beq $23d0			beq 	_CLAssignment
.23ca	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.23cc	f0 f0		beq $23be			beq 	CommandLocal
.23ce	88		dey				dey
.23cf	60		rts				rts
.23d0					_CLAssignment:
.23d0	a2 01		ldx #$01			ldx 	#1
.23d2	20 f0 2d	jsr $2df0			jsr 	Evaluate 					; evaluate RHS
.23d5	ca		dex				dex
.23d6	20 9f 21	jsr $219f			jsr 	WriteValue
.23d9	4c c3 23	jmp $23c3			jmp 	_CLCheckNext
.23dc					LocaliseVariable:
.23dc	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.23de	c9 40		cmp #$40			cmp 	#$40
.23e0	b0 67		bcs $2449			bcs 	_LVSyntax
.23e2	8a		txa				txa 								; get the address of that variable.
.23e3	a2 02		ldx #$02		ldx	#2
.23e5	20 62 44	jsr $4462		jsr	variableHandler
.23e8	aa		tax				tax
.23e9	8a		txa				txa
.23ea	48		pha				pha
.23eb	98		tya				tya
.23ec	48		pha				pha
.23ed	20 01 22	jsr $2201			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.23f0	b5 48		lda $48,x			lda 	esType,x 					; get the type
.23f2	0a		asl a				asl 	a
.23f3	10 16		bpl $240b			bpl 	_LVPushNumber
.23f5	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.23f7	b1 2a		lda ($2a),y			lda 	(temp0),y
.23f9	c8		iny				iny
.23fa	85 2c		sta $2c				sta 	temp1
.23fc	b1 2a		lda ($2a),y			lda 	(temp0),y
.23fe	85 2d		sta $2d				sta 	temp1+1
.2400	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2402	b1 2c		lda ($2c),y			lda 	(temp1),y
.2404	aa		tax				tax 								; into X
.2405	e8		inx				inx 								; +1 for length.
.2406	a9 24		lda #$24			lda 	#markerString
.2408	4c 20 24	jmp $2420			jmp 	_LVWriteFrame
.240b					_LVPushNumber:
.240b	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.240d	85 2c		sta $2c				sta 	temp1
.240f	a5 2b		lda $2b				lda 	temp0+1
.2411	85 2d		sta $2d				sta 	temp1+1
.2413	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.2415	4a		lsr a				lsr 	a
.2416	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2418	a2 04		ldx #$04			ldx 	#VarISize
.241a	90 04		bcc $2420			bcc 	_LVIsInteger
.241c	a9 23		lda #$23			lda 	#markerFloat
.241e	a2 06		ldx #$06			ldx 	#VarFSize
.2420					_LVIsInteger:
.2420					_LVWriteFrame:
.2420	8e d2 0c	stx $0cd2			stx 	storeSize 					; number of bytes to copy from (temp0)
.2423	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2424	e8		inx				inx
.2425	e8		inx				inx
.2426	20 42 35	jsr $3542			jsr 	RSClaim 					; create the stack frame.
.2429	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.242b	a0 01		ldy #$01			ldy 	#1
.242d	91 37		sta ($37),y			sta 	(rsPointer),y
.242f	c8		iny				iny
.2430	a5 2b		lda $2b				lda 	temp0+1
.2432	91 37		sta ($37),y			sta 	(rsPointer),y
.2434	a0 00		ldy #$00			ldy 	#0
.2436					_LVCopyData:
.2436	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2438	c8		iny				iny 								; write allowing for the header bit.
.2439	c8		iny				iny
.243a	c8		iny				iny
.243b	91 37		sta ($37),y			sta 	(rsPointer),y
.243d	88		dey				dey
.243e	88		dey				dey
.243f	ce d2 0c	dec $0cd2			dec 	storeSize 					; do it storesize times
.2442	d0 f2		bne $2436			bne 	_LVCopyData
.2444	68		pla				pla
.2445	a8		tay				tay
.2446	68		pla				pla
.2447	aa		tax				tax
.2448	60		rts				rts
.2449					_LVSyntax:
.2449	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.244b	20 18 15	jsr $1518		jsr	errorHandler
.244e					RestoreLocals:
.244e	a2 00		ldx #$00			ldx 	#0
.2450	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2452	c9 40		cmp #$40			cmp	 	#64
.2454	90 01		bcc $2457			bcc 	_RLocal
.2456	60		rts				rts
.2457					_RLocal:
.2457	8a		txa				txa
.2458	48		pha				pha
.2459	98		tya				tya
.245a	48		pha				pha
.245b	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.245d	b1 37		lda ($37),y			lda 	(rsPointer),y
.245f	85 2a		sta $2a				sta 	temp0
.2461	c8		iny				iny
.2462	b1 37		lda ($37),y			lda 	(rsPointer),y
.2464	85 2b		sta $2b				sta 	temp0+1
.2466	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2468	b1 37		lda ($37),y			lda 	(rsPointer),y
.246a	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.246c	f0 28		beq $2496			beq 	_RString
.246e	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2470	c9 25		cmp #$25			cmp 	#markerInt
.2472	f0 02		beq $2476			beq 	_RIsInteger
.2474	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2476					_RIsInteger:
.2476	8a		txa				txa
.2477	48		pha				pha
.2478	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.247a					_RCopyBack:
.247a	b1 37		lda ($37),y			lda 	(rsPointer),y
.247c	88		dey				dey
.247d	88		dey				dey
.247e	88		dey				dey
.247f	91 2a		sta ($2a),y			sta 	(temp0),y
.2481	c8		iny				iny
.2482	c8		iny				iny
.2483	c8		iny				iny
.2484	c8		iny				iny
.2485	ca		dex				dex
.2486	d0 f2		bne $247a			bne 	_RCopyBack
.2488	68		pla				pla 								; get size add 3
.2489	18		clc				clc
.248a	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.248c					_RRestoreAAndLoop:
.248c	20 64 35	jsr $3564			jsr 	RSFree
.248f	68		pla				pla
.2490	a8		tay				tay
.2491	68		pla				pla
.2492	aa		tax				tax
.2493	4c 4e 24	jmp $244e			jmp 	RestoreLocals 				; go see if there are any more locals.
.2496					_RString:
.2496	a2 00		ldx #$00			ldx 	#0
.2498	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.249a	b1 37		lda ($37),y			lda 	(rsPointer),y
.249c	95 50		sta $50,x			sta 	esInt0,x
.249e	c8		iny				iny
.249f	b1 37		lda ($37),y			lda 	(rsPointer),y
.24a1	95 58		sta $58,x			sta 	esInt1,x
.24a3	18		clc				clc
.24a4	a5 37		lda $37				lda 	rsPointer
.24a6	69 03		adc #$03			adc 	#3
.24a8	95 51		sta $51,x			sta 	esInt0+1,x
.24aa	a5 38		lda $38				lda 	rsPointer+1
.24ac	69 00		adc #$00			adc 	#0
.24ae	95 59		sta $59,x			sta 	esInt1+1,x
.24b0	8a		txa				txa
.24b1	a2 10		ldx #$10		ldx	#16
.24b3	20 52 38	jsr $3852		jsr	stringHandler
.24b6	a0 03		ldy #$03			ldy 	#3 							; get string length
.24b8	b1 37		lda ($37),y			lda 	(rsPointer),y
.24ba	18		clc				clc
.24bb	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.24bd	4c 8c 24	jmp $248c			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd3					paramCount:
>0cd3							.fill 	1
.24c0					CallProc:
.24c0	20 48 25	jsr $2548			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.24c3	48		pha				pha 								; save length on stack
.24c4	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.24c6	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.24c8	48		pha				pha
.24c9	a5 2a		lda $2a				lda 	temp0
.24cb	48		pha				pha
.24cc	98		tya				tya 								; calculate Y + length
.24cd	18		clc				clc
.24ce	65 32		adc $32				adc 	tempShort
.24d0	a8		tay				tay
.24d1	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.24d3					_CallProcEvalParams:
.24d3	e8		inx				inx
.24d4	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.24d6	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.24d8	f0 0b		beq $24e5			beq 	_CPDoneParams
.24da	20 f0 2d	jsr $2df0			jsr 	Evaluate 					; evaluate a parameter
.24dd	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.24df	c8		iny				iny
.24e0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.24e2	f0 ef		beq $24d3			beq 	_CallProcEvalParams
.24e4	88		dey				dey 								; undo consumption.
.24e5					_CPDoneParams:
.24e5	20 1a 35	jsr $351a			jsr 	CheckRightParen 			; check closing parenthesis.
.24e8	8e d3 0c	stx $0cd3			stx 	paramCount 					; store parameter count+1
.24eb	a2 04		ldx #$04			ldx 	#4							; make space on stack
.24ed	a9 50		lda #$50			lda 	#markerPROC
.24ef	20 42 35	jsr $3542			jsr 	RSClaim
.24f2	a9 01		lda #$01			lda 	#1 							; store return address.
.24f4	20 6e 35	jsr $356e			jsr 	RSSavePosition
.24f7	68		pla				pla 								; get the new code Ptr
.24f8	85 28		sta $28				sta 	codePtr
.24fa	68		pla				pla
.24fb	85 29		sta $29				sta 	codePtr+1
.24fd	68		pla				pla 								; length of name + 4 is the param start.
.24fe	18		clc				clc
.24ff	69 04		adc #$04			adc 	#4
.2501	a8		tay				tay
.2502	a2 ff		ldx #$ff			ldx 	#$FF
.2504					_CPLoadParameters:
.2504	e8		inx				inx 								; point to where the address should be loaded.
.2505	ec d3 0c	cpx $0cd3			cpx 	paramCount 					; too many parameters in definition ?
.2508	f0 1e		beq $2528			beq 	_CPParamError
.250a	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.250c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.250e	f0 0e		beq $251e			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2510	20 dc 23	jsr $23dc			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2513	20 9f 21	jsr $219f			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2516	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2518	c8		iny				iny
.2519	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.251b	f0 e7		beq $2504			beq 	_CPLoadParameters
.251d	88		dey				dey 								; no, unconsume and check for )
.251e					_CPParamComplete:
.251e	20 1a 35	jsr $351a			jsr 	CheckRightParen 			; check )
.2521	e8		inx				inx 								; check right number of parameters have been consumed
.2522	ec d3 0c	cpx $0cd3			cpx 	paramCount
.2525	d0 01		bne $2528			bne 	_CPParamError
.2527	60		rts				rts
.2528					_CPParamError:
.2528	a2 18		ldx #$18			ldx 	#ErrorID_Params
.252a	20 18 15	jsr $1518		jsr	errorHandler
.252d					ReturnProc:
.252d	20 4e 24	jsr $244e			jsr 	RestoreLocals 				; get the locals back.
.2530	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2532	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2534	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2536	f0 05		beq $253d			beq 	_isok
.2538	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.253a	20 18 15	jsr $1518		jsr	errorHandler
.253d					_isok:
.253d	a9 01		lda #$01			lda 	#1
.253f	20 81 35	jsr $3581			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2542	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2544	20 64 35	jsr $3564			jsr 	RSFree
.2547	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd4					procList:
>0cd4							.fill 	2		 					; terminated by name high being zero.
.0cd6					yInLine:
>0cd6							.fill 	1
.2548					FindProcedure:
.2548	8c d6 0c	sty $0cd6			sty 	yInLine 					; save current position.
.254b	20 06 26	jsr $2606			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.254e	85 2c		sta $2c				sta 	temp1
.2550	ad d4 0c	lda $0cd4			lda		procList 					; put procList address in temp2
.2553	85 2e		sta $2e				sta 	temp2
.2555	ad d5 0c	lda $0cd5			lda 	procList+1
.2558	85 2f		sta $2f				sta 	temp2+1
.255a	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.255c					_FPLoop:
.255c	b1 2e		lda ($2e),y			lda 	(temp2),y
.255e	f0 4f		beq $25af			beq 	_FPError 					; if so, we don't know this procedure.
.2560	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2562	c8		iny				iny
.2563	b1 2e		lda ($2e),y			lda 	(temp2),y
.2565	85 2a		sta $2a				sta 	temp0
.2567	c8		iny				iny
.2568	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.256a	c5 2c		cmp $2c				cmp 	temp1
.256c	d0 2b		bne $2599			bne 	_FPNext 					; hash is different, go to next.
.256e	38		sec				sec
.256f	ad d6 0c	lda $0cd6			lda 	yInLine 					; position in line must be at least 4
.2572	e9 04		sbc #$04			sbc 	#4
.2574	18		clc				clc
.2575	65 28		adc $28				adc 	codePtr
.2577	85 30		sta $30				sta 	temp3
.2579	a5 29		lda $29				lda 	codePtr+1
.257b	69 00		adc #$00			adc 	#0
.257d	85 31		sta $31				sta 	temp3+1
.257f	98		tya				tya
.2580	48		pha				pha
.2581	a0 04		ldy #$04			ldy 	#4
.2583					_FPCName:
.2583	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2585	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2587	d0 0e		bne $2597			bne 	_FPpulYNext 				; if different go to next one.
.2589	c8		iny				iny
.258a	c9 3a		cmp #$3a			cmp 	#$3A
.258c	90 f5		bcc $2583			bcc 	_FPCName 					; compare the whole lot....
.258e	68		pla				pla 								; throw away the saved Y
.258f	98		tya				tya 								; length of name is Y-4
.2590	38		sec				sec
.2591	e9 04		sbc #$04			sbc 	#4
.2593	ac d6 0c	ldy $0cd6			ldy 	yInLine  					; get the original Y back
.2596	60		rts				rts
.2597					_FPpulYNext:
.2597	68		pla				pla
.2598	a8		tay				tay
.2599					_FPNext:
.2599	c8		iny				iny 								; next procedure record.
.259a	10 c0		bpl $255c			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.259c	98		tya				tya 								; subtract 128 from Y
.259d	38		sec				sec
.259e	e9 80		sbc #$80			sbc 	#128
.25a0	a8		tay				tay
.25a1	18		clc				clc 								; add 128 to temp2, so we can have more than
.25a2	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.25a4	69 80		adc #$80			adc 	#128
.25a6	85 2e		sta $2e				sta 	temp2
.25a8	90 b2		bcc $255c			bcc 	_FPLoop
.25aa	e6 2f		inc $2f				inc 	temp2+1
.25ac	4c 5c 25	jmp $255c			jmp 	_FPLoop
.25af					_FPError:
.25af	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.25b1	20 18 15	jsr $1518		jsr	errorHandler
.25b4					ScanProc:
.25b4	98		tya				tya
.25b5	48		pha				pha
.25b6	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.25b8	8d d4 0c	sta $0cd4			sta 	procList
.25bb	a5 36		lda $36				lda 	lowMemory+1
.25bd	8d d5 0c	sta $0cd5			sta 	procList+1
.25c0	20 30 29	jsr $2930			jsr 	ResetCodeAddress 			; back to the start.
.25c3					_ScanLoop:
.25c3	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.25c5	b1 28		lda ($28),y			lda 	(codePtr),y
.25c7	f0 2a		beq $25f3			beq 	_ScanExit
.25c9	a0 03		ldy #$03			ldy 	#3							; get first token
.25cb	b1 28		lda ($28),y			lda 	(codePtr),y
.25cd	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.25cf	d0 12		bne $25e3			bne 	_ScanNext
.25d1	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.25d3	20 fb 25	jsr $25fb			jsr 	_ScanWrite
.25d6	a5 28		lda $28				lda 	codePtr
.25d8	20 fb 25	jsr $25fb			jsr 	_ScanWrite
.25db	a0 04		ldy #$04			ldy 	#4 							; start of name part
.25dd	20 06 26	jsr $2606			jsr 	CalculateProcedureHash 		; calculate procedure hash
.25e0	20 fb 25	jsr $25fb			jsr 	_ScanWrite					; and write that
.25e3					_ScanNext:
.25e3	18		clc				clc
.25e4	a0 00		ldy #$00			ldy 	#0
.25e6	b1 28		lda ($28),y			lda 	(codePtr),y
.25e8	65 28		adc $28				adc 	codePtr
.25ea	85 28		sta $28				sta 	codePtr
.25ec	90 d5		bcc $25c3			bcc 	_ScanLoop
.25ee	e6 29		inc $29				inc 	codePtr+1
.25f0	4c c3 25	jmp $25c3			jmp 	_ScanLoop
.25f3					_ScanExit:
.25f3	a9 00		lda #$00			lda 	#0 							; write ending zero.
.25f5	20 fb 25	jsr $25fb			jsr 	_ScanWrite
.25f8	68		pla				pla
.25f9	a8		tay				tay
.25fa	60		rts				rts
.25fb					_ScanWrite:
.25fb	a0 00		ldy #$00			ldy 	#0
.25fd	91 35		sta ($35),y			sta 	(lowMemory),y
.25ff	e6 35		inc $35				inc 	lowMemory
.2601	d0 02		bne $2605			bne 	_SWNoCarry
.2603	e6 36		inc $36				inc 	lowMemory+1
.2605					_SWNoCarry:
.2605	60		rts				rts
.2606					CalculateProcedureHash:
.2606	a9 00		lda #$00			lda 	#0 							; clear hash.
.2608	85 2a		sta $2a				sta 	temp0
.260a					_CPHLoop:
.260a	18		clc				clc 								; add character and rotate and add carry back in
.260b	b1 28		lda ($28),y			lda 	(codePtr),y
.260d	65 2a		adc $2a				adc 	temp0
.260f	6a		ror a				ror 	a
.2610	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2612	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2614	b1 28		lda ($28),y			lda 	(codePtr),y
.2616	c8		iny				iny 								; advance incase we go round again.
.2617	c9 3a		cmp #$3a			cmp 	#$3A
.2619	90 ef		bcc $260a			bcc 	_CPHLoop
.261b	a5 2a		lda $2a				lda 	temp0
.261d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.261e					Command_Repeat:
.261e	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2620	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2622	20 42 35	jsr $3542			jsr 	RSClaim
.2625	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2627	20 6e 35	jsr $356e			jsr 	RSSavePosition
.262a	60		rts				rts
.262b					Command_Until:
.262b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.262d	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.262f	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2631	f0 05		beq $2638			beq 	_isok
.2633	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2635	20 18 15	jsr $1518		jsr	errorHandler
.2638					_isok:
.2638	20 0d 2e	jsr $2e0d			jsr 	EvaluateRootInteger 		; at the bottom.
.263b	20 ce 34	jsr $34ce			jsr 	MInt32Zero					; check if TOS zero
.263e	d0 06		bne $2646			bne 	_CUExit
.2640	a9 01		lda #$01			lda 	#1
.2642	20 81 35	jsr $3581			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2645	60		rts				rts
.2646					_CUExit:
.2646	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2648	20 64 35	jsr $3564			jsr 	RSFree
.264b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.264c					ScanForward:
.264c	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.264e	86 2d		stx $2d				stx 	temp1+1
.2650	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2652	85 2e		sta $2e				sta 	temp2
.2654	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2656	c8		iny				iny
.2657	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2659	d0 08		bne $2663			bne 	_SFNoCheck 					; if so, check token against entered values.
.265b	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.265d	f0 24		beq $2683			beq 	_SFExit 					; at the same strcture depth.
.265f	c5 2d		cmp $2d				cmp 	temp1+1
.2661	f0 20		beq $2683			beq 	_SFExit
.2663					_SFNoCheck:
.2663	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2665	90 ed		bcc $2654			bcc 	_SFLoop
.2667	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2669	90 19		bcc $2684			bcc 	_SFSpecials
.266b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.266d	90 e5		bcc $2654			bcc 	_SFLoop
.266f	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2671	b0 e1		bcs $2654			bcs 	_SFLoop
.2673	aa		tax				tax  								; token in X, and look up the adjuster.
.2674	bd 2b 2d	lda $2d2b,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2677	38		sec				sec 								; convert to an offset ($FF,$01)
.2678	e9 81		sbc #$81			sbc 	#$81
.267a	18		clc				clc 								; add to depth
.267b	65 2e		adc $2e				adc 	temp2
.267d	85 2e		sta $2e				sta 	temp2
.267f	10 d3		bpl $2654			bpl 	_SFLoop 					; +ve okay to continue
.2681	30 07		bmi $268a			bmi 	SFError 					; if gone -ve then we have a nesting error
.2683	60		rts		_SFExit:rts
.2684					_SFSpecials:
.2684	20 8f 26	jsr $268f			jsr 	ScannerSkipSpecial
.2687	4c 54 26	jmp $2654			jmp 	_SFLoop
.268a					SFError:
.268a	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.268c	20 18 15	jsr $1518		jsr	errorHandler
.268f					ScannerSkipSpecial:
.268f	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2691	f0 10		beq $26a3			beq 	_SFNextLine
.2693	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2695	f0 2b		beq $26c2			beq 	_SFFloatSkip
.2697	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2699	f0 02		beq $269d			beq 	_SFSkipString
.269b	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.269c	60		rts				rts 								; token.
.269d					_SFSkipString:
.269d	98		tya				tya
.269e	38		sec				sec
.269f	71 28		adc ($28),y			adc 	(codePtr),y
.26a1	a8		tay				tay
.26a2	60		rts				rts
.26a3					_SFNextLine:
.26a3	a0 00		ldy #$00			ldy 	#0 							; get offset
.26a5	b1 28		lda ($28),y			lda 	(codePtr),y
.26a7	18		clc				clc 								; add to code pointer.
.26a8	65 28		adc $28				adc 	codePtr
.26aa	85 28		sta $28				sta 	codePtr
.26ac	90 02		bcc $26b0			bcc		_SFNLNoCarry
.26ae	e6 29		inc $29				inc 	codePtr+1
.26b0					_SFNLNoCarry:
.26b0	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.26b2	d0 0b		bne $26bf			bne		_SFXNL 						; no go round again
.26b4	a5 2c		lda $2c				lda 	temp1
.26b6	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.26b8	d0 d0		bne $268a			bne 	SFError 					; read uses this to search for data statements
.26ba	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.26bc	20 18 15	jsr $1518		jsr	errorHandler
.26bf	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.26c1	60		rts				rts
.26c2					_SFFloatSkip:
.26c2	98		tya				tya 								; skip over an embedded float.
.26c3	18		clc				clc
.26c4	69 05		adc #$05			adc 	#FloatEmbeddedSize
.26c6	a8		tay				tay
.26c7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.26c8					Command_While:
.26c8	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.26ca	a2 04		ldx #$04			ldx 	#4
.26cc	20 42 35	jsr $3542			jsr 	RSClaim 					; create on stack.
.26cf	88		dey				dey
.26d0	a9 01		lda #$01			lda 	#1
.26d2	20 6e 35	jsr $356e			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.26d5	c8		iny				iny
.26d6	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger				; get the conditional
.26d9	20 ce 34	jsr $34ce			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.26dc	f0 01		beq $26df			beq 	_CWFail
.26de	60		rts				rts
.26df					_CWFail:
.26df	a9 04		lda #$04			lda 	#4
.26e1	20 64 35	jsr $3564			jsr 	RSFree 						; close the just opened position.
.26e4	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.26e6	aa		tax				tax
.26e7	20 4c 26	jsr $264c			jsr 	ScanForward
.26ea	60		rts				rts
.26eb					Command_Wend:
.26eb	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26ed	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.26ef	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.26f1	f0 05		beq $26f8			beq 	_isok
.26f3	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.26f5	20 18 15	jsr $1518		jsr	errorHandler
.26f8					_isok:
.26f8	a9 01		lda #$01			lda 	#1
.26fa	20 81 35	jsr $3581			jsr 	RSLoadPosition				; go back until true
.26fd	a9 04		lda #$04			lda 	#4
.26ff	20 64 35	jsr $3564			jsr 	RSFree 						; close the loop
.2702	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2703					CommandClear:
.2703					XCommandClear:
.2703	98		tya				tya
.2704	48		pha				pha
.2705	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2708	85 33		sta $33				sta 	highMemory
.270a	ad cd 0a	lda $0acd			lda 	endMemory+1
.270d	85 34		sta $34				sta 	highMemory+1
.270f	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2712	85 2a		sta $2a				sta 	temp0
.2714	ad c9 0a	lda $0ac9			lda 	basePage+1
.2717	85 2b		sta $2b				sta 	temp0+1
.2719					_CCFindEnd:
.2719	a0 00		ldy #$00			ldy 	#0
.271b	b1 2a		lda ($2a),y			lda 	(temp0),y
.271d	f0 0c		beq $272b			beq 	_CCFoundEnd 				; offset zero is end.
.271f	18		clc				clc
.2720	65 2a		adc $2a				adc 	temp0 						; move to next line
.2722	85 2a		sta $2a				sta 	temp0
.2724	90 f3		bcc $2719			bcc 	_CCFindEnd
.2726	e6 2b		inc $2b				inc 	temp0+1
.2728	4c 19 27	jmp $2719			jmp 	_CCFindEnd
.272b					_CCFoundEnd:
.272b	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.272d	85 35		sta $35				sta 	lowMemory
.272f	a5 2b		lda $2b				lda 	temp0+1
.2731	85 36		sta $36				sta 	lowMemory+1
.2733	18		clc				clc 								; put temp0+1 in endProgram
.2734	a5 2a		lda $2a				lda 	temp0
.2736	69 01		adc #$01			adc 	#1
.2738	8d ca 0a	sta $0aca			sta 	endProgram
.273b	a5 2b		lda $2b				lda 	temp0+1
.273d	69 00		adc #$00			adc 	#0
.273f	8d cb 0a	sta $0acb			sta 	endProgram+1
.2742	18		clc				clc 								; put a bit of space in.
.2743	a5 35		lda $35				lda 	lowMemory
.2745	69 04		adc #$04			adc 	#4
.2747	85 35		sta $35				sta 	lowMemory
.2749	90 02		bcc $274d			bcc 	_CCNoCarry
.274b	e6 36		inc $36				inc 	lowMemory+1
.274d					_CCNoCarry:
.274d	20 34 35	jsr $3534			jsr 	RSReset 					; reset the return stack.
.2750	a2 06		ldx #$06		ldx	#6
.2752	20 62 44	jsr $4462		jsr	variableHandler
.2755	20 b4 25	jsr $25b4			jsr 	ScanProc 					; scan for procedures
.2758	20 39 1f	jsr $1f39			jsr 	CommandRestore 				; do a restore
.275b	68		pla				pla
.275c	a8		tay				tay
.275d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cd7					structIndent:
>0cd7							.fill 	1
.275e					CommandList:
.275e	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2760	8e d7 0c	stx $0cd7			stx 	structIndent
.2763	20 a7 34	jsr $34a7			jsr 	MInt32False
.2766	e8		inx				inx
.2767	20 a3 34	jsr $34a3			jsr 	MInt32True
.276a	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.276c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.276e	f0 15		beq $2785			beq 	_CLEndLine
.2770	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2772	30 1b		bmi $278f			bmi 	_CLDoListing 				; do the whole lot.
.2774	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2776	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger
.2779	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.277b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.277d	f0 06		beq $2785			beq 	_CLEndLine
.277f	20 e5 33	jsr $33e5			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2782	4c 8f 27	jmp $278f			jmp 	_CLDoListing 				; own e.g. list 1100
.2785					_CLEndLine:
.2785	c8		iny				iny 								; skip comma
.2786	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2788	30 05		bmi $278f			bmi 	_CLDoListing
.278a	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.278c	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger				; get end
.278f					_CLDoListing:
.278f	20 30 29	jsr $2930			jsr 	ResetCodeAddress 			; back to the start.
.2792					_CLCheckLoop:
.2792	a2 02		ldx #$02		ldx	#2
.2794	20 f6 14	jsr $14f6		jsr	deviceHandler
.2797	a0 00		ldy #$00			ldy 	#0							; check end.
.2799	b1 28		lda ($28),y			lda 	(codePtr),y
.279b	f0 41		beq $27de			beq 	_CLEnd
.279d	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.279f	20 e1 27	jsr $27e1			jsr 	CLCompareLineTOS
.27a2	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.27a4	f0 28		beq $27ce			beq 	_CLNext
.27a6	e8		inx				inx
.27a7	20 e1 27	jsr $27e1			jsr 	CLCompareLineTOS 			; compare vs higher
.27aa	c9 01		cmp #$01			cmp 	#1
.27ac	f0 20		beq $27ce			beq 	_CLNext
.27ae	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.27b0	20 03 28	jsr $2803			jsr 	CLStructureCheck
.27b3	ad d7 0c	lda $0cd7			lda 	structIndent 				; indent level.
.27b6	10 02		bpl $27ba			bpl 	_CLPositive
.27b8	a9 00		lda #$00			lda 	#0
.27ba					_CLPositive:
.27ba	a2 04		ldx #$04		ldx	#4
.27bc	20 91 40	jsr $4091		jsr	tokeniserHandler
.27bf	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.27c1	20 03 28	jsr $2803			jsr 	CLStructureCheck
.27c4	ad d7 0c	lda $0cd7			lda 	structIndent
.27c7	10 05		bpl $27ce			bpl 	_CLNext
.27c9	a9 00		lda #$00			lda 	#0
.27cb	8d d7 0c	sta $0cd7			sta 	structIndent
.27ce					_CLNext:
.27ce	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.27d0	b1 28		lda ($28),y			lda 	(codePtr),y
.27d2	18		clc				clc
.27d3	65 28		adc $28				adc 	codePtr
.27d5	85 28		sta $28				sta 	codePtr
.27d7	90 b9		bcc $2792			bcc 	_CLCheckLoop
.27d9	e6 29		inc $29				inc 	codePtr+1
.27db	4c 92 27	jmp $2792			jmp 	_CLCheckLoop
.27de					_CLEnd:
.27de	4c 90 35	jmp $3590			jmp 	WarmStart 					; warm start after list.
.27e1					CLCompareLineTOS:
.27e1	a0 01		ldy #$01			ldy 	#1
.27e3	b1 28		lda ($28),y			lda 	(codePtr),y
.27e5	55 50		eor $50,x			eor 	esInt0,x
.27e7	85 2a		sta $2a				sta 	temp0
.27e9	c8		iny				iny
.27ea	b1 28		lda ($28),y			lda 	(codePtr),y
.27ec	55 58		eor $58,x			eor 	esInt1,x
.27ee	05 2a		ora $2a				ora 	temp0
.27f0	f0 10		beq $2802			beq 	_CLCLTExit
.27f2	88		dey				dey
.27f3	b1 28		lda ($28),y			lda 	(codePtr),y
.27f5	d5 50		cmp $50,x			cmp 	esInt0,x
.27f7	c8		iny				iny
.27f8	b1 28		lda ($28),y			lda 	(codePtr),y
.27fa	f5 58		sbc $58,x			sbc 	esInt1,x
.27fc	a9 ff		lda #$ff			lda 	#255
.27fe	90 02		bcc $2802			bcc 	_CLCLTExit
.2800	a9 01		lda #$01			lda 	#1
.2802					_CLCLTExit:
.2802	60		rts				rts
.2803					CLStructureCheck:
.2803	85 2a		sta $2a				sta 	temp0
.2805	a0 03		ldy #$03			ldy 	#3
.2807					_CLSCLoop:
.2807	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2809	c8		iny				iny
.280a	c9 80		cmp #$80			cmp 	#$80
.280c	90 f9		bcc $2807			bcc 	_CLSCLoop 					; $00-$7F just step over.
.280e	f0 28		beq $2838			beq		_CLSCExit					; EOL return
.2810	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2812	90 1e		bcc $2832			bcc 	_CLSCSpecial
.2814	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2816	90 ef		bcc $2807			bcc 	_CLSCLoop
.2818	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.281a	b0 eb		bcs $2807			bcs 	_CLSCLoop
.281c	aa		tax				tax 								; get adjustment
.281d	bd 2b 2d	lda $2d2b,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2820	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2822	d0 e3		bne $2807			bne 	_CLSCLoop
.2824	38		sec				sec
.2825	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2827	0a		asl a				asl 	a 							; double indent step
.2828	18		clc				clc
.2829	6d d7 0c	adc $0cd7			adc 	structIndent 				; add to structure indent
.282c	8d d7 0c	sta $0cd7			sta 	structIndent
.282f	4c 07 28	jmp $2807			jmp 	_CLSCLoop
.2832					_CLSCSpecial:
.2832	20 8f 26	jsr $268f			jsr 	ScannerSkipSpecial
.2835	4c 07 28	jmp $2807			jmp 	_CLSCLoop
.2838					_CLSCExit:
.2838	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2839					CommandLoad:
.2839	20 61 28	jsr $2861			jsr 	CLSParameters 					; get parameters for load.
.283c	08		php				php
.283d	a2 0e		ldx #$0e		ldx	#14
.283f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2842	28		plp				plp
.2843	b0 08		bcs $284d			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2845	20 03 27	jsr $2703			jsr 	CommandClear
.2848	a2 04		ldx #$04		ldx	#4
.284a	20 fb 1e	jsr $1efb		jsr	interactionHandler
.284d					_CLExit
.284d	60		rts				rts
.284e					CommandSave:
.284e	20 61 28	jsr $2861			jsr 	CLSParameters					; get parameters for save
.2851	90 08		bcc $285b			bcc 	_CSNoOverrideAddress
.2853	20 27 35	jsr $3527			jsr 	CheckComma 						; should be a comma.
.2856	a2 02		ldx #$02			ldx 	#2
.2858	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger 				; get save end address.
.285b					_CSNoOverrideAddress:
.285b	a2 18		ldx #$18		ldx	#24
.285d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2860	60		rts				rts
.2861					CLSParameters:
.2861	a2 00		ldx #$00			ldx 	#0 								; string
.2863	20 04 2e	jsr $2e04			jsr 	EvaluateString
.2866	e8		inx				inx 									; erase out +1 +2
.2867	20 a7 34	jsr $34a7			jsr 	MInt32False
.286a	e8		inx				inx
.286b	20 a7 34	jsr $34a7			jsr 	MInt32False
.286e	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2871	85 51		sta $51				sta 	esInt0+1
.2873	ad c9 0a	lda $0ac9			lda 	basePage+1
.2876	85 59		sta $59				sta 	esInt1+1
.2878	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.287b	85 52		sta $52				sta 	esInt0+2
.287d	ad cb 0a	lda $0acb			lda 	endProgram+1
.2880	85 5a		sta $5a				sta 	esInt1+2
.2882	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2884	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2886	d0 08		bne $2890			bne 	_CLSDefault
.2888	c8		iny				iny 									; skip comma
.2889	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.288b	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger
.288e	38		sec				sec
.288f	60		rts				rts
.2890					_CLSDefault:
.2890	18		clc				clc
.2891	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2892					Command_New:
.2892					Command_XNew:
.2892	20 30 29	jsr $2930			jsr 	ResetCodeAddress 			; point to first line
.2895	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2897	98		tya				tya
.2898	91 28		sta ($28),y			sta 	(codePtr),y
.289a	20 03 27	jsr $2703			jsr 	CommandClear 				; clear everything down.
.289d	4c 59 22	jmp $2259			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cd8					breakCounter:
>0cd8								.fill 	1
.0cd9					breakIncrement:
>0cd9								.fill 	1
.28a0					Command_Run:
.28a0					XCommand_Run:
.28a0	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.28a2	9a		txs				txs
.28a3	20 2a 29	jsr $292a			jsr 	BreakOn 					; turn break on
.28a6	20 03 27	jsr $2703			jsr 	CommandClear 				; clear everything.
.28a9	20 30 29	jsr $2930			jsr 	ResetCodeAddress 			; back to the start.
.28ac					Command_RunFrom:
.28ac	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.28ae					CRNextInstruction:
.28ae	64 3a		stz $3a				stz 	softMemAlloc+1
.28b0	ad d8 0c	lda $0cd8			lda 	breakCounter 				; check for break.
.28b3	6d d9 0c	adc $0cd9			adc 	breakIncrement
.28b6	8d d8 0c	sta $0cd8			sta 	breakCounter
.28b9	90 05		bcc $28c0			bcc 	_CRNoChecks
.28bb	a2 02		ldx #$02		ldx	#2
.28bd	20 f6 14	jsr $14f6		jsr	deviceHandler
.28c0					_CRNoChecks
.28c0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.28c2	10 1c		bpl $28e0			bpl 	_CRNotToken
.28c4	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.28c6	b0 0c		bcs $28d4			bcs 	_CRExecute
.28c8	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.28ca	b0 71		bcs $293d			bcs 	Unimplemented
.28cc	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.28ce	b0 04		bcs $28d4			bcs 	_CRExecute
.28d0	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.28d2	b0 16		bcs $28ea			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.28d4					_CRExecute:
.28d4	c8		iny				iny 								; consume it.
.28d5	0a		asl a				asl 	a 							; double it, losing most significant bit.
.28d6	aa		tax				tax
.28d7	20 dd 28	jsr $28dd			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.28da	4c ae 28	jmp $28ae			jmp 	CRNextInstruction
.28dd					_CRRunRoutine:
.28dd	7c 47 29	jmp ($2947,x)			jmp 	(Group0Vectors,x)
.28e0					_CRNotToken:
.28e0	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.28e2	b0 59		bcs $293d			bcs 	Unimplemented
.28e4					_CRDefaultLet:
.28e4	20 8c 21	jsr $218c			jsr 	CommandLet 					; do the default, LET
.28e7	4c ae 28	jmp $28ae			jmp 	CRNextInstruction
.28ea					_CRCheckIndirect:
.28ea	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.28ec	f0 0a		beq $28f8			beq 	_CRAndCommand
.28ee	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.28f0	f0 f2		beq $28e4			beq 	_CRDefaultLet
.28f2	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.28f4	f0 ee		beq $28e4			beq 	_CRDefaultLet
.28f6	d0 45		bne $293d			bne 	Unimplemented
.28f8					_CRAndCommand:
.28f8	c8		iny				iny 								; skip over the AND token
.28f9	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.28fb	20 15 29	jsr $2915			jsr 	CommandAssembler 			; do the assembler command
.28fe	4c ae 28	jmp $28ae			jmp 	CRNextInstruction 			; and loop round.
.2901					CommandShift1:
.2901	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2903	10 38		bpl $293d			bpl 	Unimplemented 				; we have an error as this should not happen.
.2905	c8		iny				iny 								; advance over it.
.2906	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2908	b0 0b		bcs $2915			bcs 	CommandAssembler
.290a	0a		asl a				asl 	a 							; double into X
.290b	aa		tax				tax
.290c	7c 0b 2a	jmp ($2a0b,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.290f					CommandShift2:
.290f	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2911	20 60 18	jsr $1860		jsr	extensionHandler
.2914	60		rts				rts
.2915					CommandAssembler:
.2915	a2 02		ldx #$02		ldx	#2
.2917	20 b4 13	jsr $13b4		jsr	assemblerHandler
.291a	60		rts				rts
.291b					CommandAssemblerLabel:
.291b	a2 04		ldx #$04		ldx	#4
.291d	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2920	60		rts				rts
.2921					CommandColon:
.2921	60		rts				rts
.2922					CommandBreak:
.2922	20 0d 2e	jsr $2e0d			jsr 	EvaluateRootInteger
.2925	20 ce 34	jsr $34ce			jsr 	MInt32Zero
.2928	f0 02		beq $292c			beq 	BreakOff
.292a					BreakOn:
.292a	a2 08		ldx #$08			ldx 	#8
.292c					BreakOff:
.292c	8e d9 0c	stx $0cd9			stx 	breakIncrement
.292f	60		rts				rts
.2930					ResetCodeAddress:
.2930	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2933	85 28		sta $28				sta 	codePtr
.2935	ad c9 0a	lda $0ac9			lda 	basePage+1
.2938	85 29		sta $29				sta 	codePtr+1
.293a	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.293c	60		rts				rts
.293d					Unimplemented:
.293d	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.293f	20 18 15	jsr $1518		jsr	errorHandler
.2942					TKErr01:
.2942					TKErr02:
.2942					TKErr03:
.2942					TKErr04:
.2942					TKErr05:
.2942					TKErr06:
.2942					TKErr07:
.2942					TKErr08:
.2942					TKErr09:
.2942					TKErr10:
.2942					TKErr11:
.2942					TKErr12:
.2942					TKErr13:
.2942					TKErr14:
.2942	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2944	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2947					Group0Vectors:
>2947	5f 22					.word	AdvanceNextLine          ; $80 [[eol]]
>2949	01 29					.word	CommandShift1            ; $81 [[sh1]]
>294b	0f 29					.word	CommandShift2            ; $82 [[sh2]]
>294d	42 29					.word	TKErr09                  ; $83 [[sh3]]
>294f	42 29					.word	TKErr10                  ; $84 [[fpc]]
>2951	42 29					.word	TKErr08                  ; $85 [[str]]
>2953	f4 2a					.word	AndHandler               ; $86 and
>2955	e1 2a					.word	OrHandler                ; $87 or
>2957	ce 2a					.word	XorHandler               ; $88 xor
>2959	16 2c					.word	CompareGreaterEq         ; $89 >=
>295b	20 2c					.word	CompareLessEq            ; $8a <=
>295d	02 2c					.word	CompareGreater           ; $8b >
>295f	f8 2b					.word	CompareLess              ; $8c <
>2961	ee 2b					.word	CompareEquals            ; $8d =
>2963	0c 2c					.word	CompareNotEquals         ; $8e <>
>2965	5f 2a					.word	AddHandler               ; $8f +
>2967	82 2a					.word	SubHandler               ; $90 -
>2969	1a 2b					.word	ShrHandler               ; $91 >>
>296b	07 2b					.word	ShlHandler               ; $92 <<
>296d	95 2a					.word	MulHandler               ; $93 *
>296f	a8 2a					.word	DivHandler               ; $94 /
>2971	bb 2a					.word	ModHandler               ; $95 mod
>2973	53 2b					.word	PowerHandler             ; $96 ^
>2975	2d 2b					.word	WordRefHandler           ; $97 !
>2977	40 2b					.word	ByteRefHandler           ; $98 ?
>2979	1e 26					.word	Command_Repeat           ; $99 repeat
>297b	c8 26					.word	Command_While            ; $9a while
>297d	73 22					.word	Command_FOR              ; $9b for
>297f	82 23					.word	CommandIf                ; $9c if
>2981	42 29					.word	TKErr04                  ; $9d defproc
>2983	2b 26					.word	Command_Until            ; $9e until
>2985	eb 26					.word	Command_Wend             ; $9f wend
>2987	d4 22					.word	Command_NEXT             ; $a0 next
>2989	42 29					.word	TKErr06                  ; $a1 then
>298b	bd 23					.word	Command_ENDIF            ; $a2 endif
>298d	2d 25					.word	ReturnProc               ; $a3 endproc
>298f	7a 2d					.word	UnaryParenthesis         ; $a4 (
>2991	5c 2f					.word	UnaryLen                 ; $a5 len(
>2993	a0 2f					.word	UnarySgn                 ; $a6 sgn(
>2995	89 2f					.word	UnaryAbs                 ; $a7 abs(
>2997	f9 2f					.word	Unary_Random             ; $a8 random(
>2999	43 30					.word	Unary_Page               ; $a9 page
>299b	a3 34					.word	MInt32True               ; $aa true
>299d	a7 34					.word	MInt32False              ; $ab false
>299f	0e 30					.word	Unary_Min                ; $ac min(
>29a1	12 30					.word	Unary_Max                ; $ad max(
>29a3	1b 31					.word	UnarySys                 ; $ae sys(
>29a5	c4 30					.word	UnaryTimer               ; $af timer(
>29a7	d9 2e					.word	EventFunction            ; $b0 event(
>29a9	ed 30					.word	UnaryGet                 ; $b1 get(
>29ab	dd 30					.word	UnaryInkey               ; $b2 inkey(
>29ad	94 30					.word	UnaryAlloc               ; $b3 alloc(
>29af	54 31					.word	ExecChr                  ; $b4 chr$(
>29b1	84 31					.word	ExecLeft                 ; $b5 left$(
>29b3	a1 31					.word	ExecMid                  ; $b6 mid$(
>29b5	c9 31					.word	ExecRight                ; $b7 right$(
>29b7	5b 2e					.word	Event_Str                ; $b8 str$(
>29b9	8a 2e					.word	UnaryVal                 ; $b9 val(
>29bb	b7 2f					.word	UnaryPeek                ; $ba peek(
>29bd	bd 2f					.word	UnaryDeek                ; $bb deek(
>29bf	c3 2f					.word	UnaryLeek                ; $bc leek(
>29c1	7a 2f					.word	UnaryAsc                 ; $bd asc(
>29c3	6e 30					.word	UnaryIntToFloat          ; $be int(
>29c5	81 30					.word	UnaryFloatToInt          ; $bf float(
>29c7	8d 2e					.word	UnaryIsVal               ; $c0 isval(
>29c9	6b 31					.word	ExecUpper                ; $c1 upper$(
>29cb	68 31					.word	ExecLower                ; $c2 lower$(
>29cd	51 30					.word	UnaryReference           ; $c3 @
>29cf	67 30					.word	UnaryComplement          ; $c4 ~
>29d1	64 30					.word	UnaryHexMarker           ; $c5 &
>29d3	06 31					.word	UnaryGetString           ; $c6 get$(
>29d5	0c 31					.word	UnaryInkeyString         ; $c7 inkey$(
>29d7	43 31					.word	UnaryMem                 ; $c8 mem
>29d9	42 29					.word	TKErr01                  ; $c9 )
>29db	21 29					.word	CommandColon             ; $ca :
>29dd	42 29					.word	TKErr02                  ; $cb ,
>29df	42 29					.word	TKErr03                  ; $cc ;
>29e1	47 22					.word	Command_Rem2             ; $cd '
>29e3	42 29					.word	TKErr07                  ; $ce to
>29e5	42 29					.word	TKErr05                  ; $cf step
>29e7	c0 24					.word	CallProc                 ; $d0 proc
>29e9	be 23					.word	CommandLocal             ; $d1 local
>29eb	7e 21					.word	Command_Dim              ; $d2 dim
>29ed	47 22					.word	Command_Rem              ; $d3 rem
>29ef	8c 21					.word	CommandLet               ; $d4 let
>29f1	c8 1f					.word	Command_Input            ; $d5 input
>29f3	b7 23					.word	Command_ELSE             ; $d6 else
>29f5	4f 21					.word	Command_VDU              ; $d7 vdu
>29f7	7e 20					.word	Command_Print            ; $d8 print
>29f9	30 1f					.word	CommandData              ; $d9 data
>29fb	42 29					.word	TKErr13                  ; $da image
>29fd	42 29					.word	TKErr12                  ; $db at
>29ff	42 29					.word	TKErr14                  ; $dc flip
>2a01	70 21					.word	Command_Assert           ; $dd assert
>2a03	0a 22					.word	Command_Poke             ; $de poke
>2a05	0e 22					.word	Command_Doke             ; $df doke
>2a07	12 22					.word	Command_Loke             ; $e0 loke
>2a09	1f 21					.word	Command_Ink              ; $e1 ink
>2a0b	2a 21					.word	Command_Paper            ; $e2 paper
>2a0d	19 21					.word	Command_CLS              ; $e3 cls
>2a0f	35 21					.word	Command_Locate           ; $e4 locate
>2a11	1b 29					.word	CommandAssemblerLabel    ; $e5 .
>2a13	42 29					.word	TKErr11                  ; $e6 #
>2a15	03 27					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2a17					Group1Vectors:
>2a17	39 28					.word	CommandLoad              ; $86 load
>2a19	4e 28					.word	CommandSave              ; $87 save
>2a1b	5e 27					.word	CommandList              ; $88 list
>2a1d	92 28					.word	Command_New              ; $89 new
>2a1f	22 29					.word	CommandBreak             ; $8a break
>2a21	a0 28					.word	Command_Run              ; $8b run
>2a23	05 1f					.word	CommandRead              ; $8c read
>2a25	39 1f					.word	CommandRestore           ; $8d restore
>2a27	59 22					.word	CommandEnd               ; $8e end
>2a29	54 22					.word	CommandStop              ; $8f stop
>2a2b	5c 22					.word	CommandXemu              ; $90 xemu
>2a2d	96 1f					.word	CommandGOTO              ; $91 goto
>2a2f	6b 1f					.word	CommandGOSUB             ; $92 gosub
>2a31	7e 1f					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2a33					BinaryProcess:
.2a33	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2a35	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2a37	0a		asl a				asl 	a
.2a38	30 0e		bmi $2a48			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2a3a	18		clc				clc 								; return CC for integer
.2a3b	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2a3d	f0 08		beq $2a47			beq 	_BPExit 					; if both integer then return with CC.
.2a3f	20 4d 2a	jsr $2a4d			jsr 	BPMakeBothFloat 			; make both float
.2a42	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2a44	95 48		sta $48,x			sta 	esType,x
.2a46	38		sec				sec 								; and return with carry set.
.2a47					_BPExit:
.2a47	60		rts				rts
.2a48					_BPStringType:
.2a48	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a4a	20 18 15	jsr $1518		jsr	errorHandler
.2a4d					BPMakeBothFloat:
.2a4d	e8		inx				inx
.2a4e	20 52 2a	jsr $2a52			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2a51	ca		dex				dex
.2a52					BPMakeFloat:
.2a52	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.2a54	4a		lsr a				lsr 	a
.2a55	b0 07		bcs $2a5e			bcs 	_BPIsFloat 					; already a float if set.
.2a57	8a		txa				txa
.2a58	a2 1c		ldx #$1c		ldx	#28
.2a5a	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2a5d	aa		tax				tax
.2a5e					_BPIsFloat:
.2a5e	60		rts				rts
.2a5f					AddHandler:
.2a5f	20 30 2c	jsr $2c30			jsr 	DereferenceTwo 				; dereference top two on stack.
.2a62	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.2a64	35 49		and $49,x			and 	esType+1,x
.2a66	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2a68	d0 10		bne $2a7a			bne 	_AHStringConcat				; concatenate strings.
.2a6a	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2a6d	b0 03		bcs $2a72			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a6f	4c 8b 33	jmp $338b			jmp 	MInt32Add 							; else do it as integer.
.2a72					_IsFPOperation:
.2a72	8a		txa				txa 								; call the relevant fp routine
.2a73	a2 04		ldx #$04		ldx	#4
.2a75	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2a78	aa		tax				tax
.2a79	60		rts				rts
.2a7a					_AHStringConcat:
.2a7a	8a		txa				txa 								; handled by the string module.
.2a7b	a2 06		ldx #$06		ldx	#6
.2a7d	20 52 38	jsr $3852		jsr	stringHandler
.2a80	aa		tax				tax
.2a81	60		rts				rts
.2a82					SubHandler:
.2a82	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2a85	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2a88	b0 03		bcs $2a8d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a8a	4c a5 33	jmp $33a5			jmp 	MInt32Sub 							; else do it as integer.
.2a8d					_IsFPOperation:
.2a8d	8a		txa				txa 								; call the relevant fp routine
.2a8e	a2 12		ldx #$12		ldx	#18
.2a90	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2a93	aa		tax				tax
.2a94	60		rts				rts
.2a95					MulHandler:
.2a95	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2a98	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2a9b	b0 03		bcs $2aa0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a9d	4c bf 33	jmp $33bf			jmp 	MInt32Multiply 							; else do it as integer.
.2aa0					_IsFPOperation:
.2aa0	8a		txa				txa 								; call the relevant fp routine
.2aa1	a2 0c		ldx #$0c		ldx	#12
.2aa3	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2aa6	aa		tax				tax
.2aa7	60		rts				rts
.2aa8					DivHandler:
.2aa8	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2aab	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2aae	b0 03		bcs $2ab3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ab0	4c 7c 32	jmp $327c			jmp 	MInt32SDivide 							; else do it as integer.
.2ab3					_IsFPOperation:
.2ab3	8a		txa				txa 								; call the relevant fp routine
.2ab4	a2 08		ldx #$08		ldx	#8
.2ab6	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2ab9	aa		tax				tax
.2aba	60		rts				rts
.2abb					ModHandler:
.2abb	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2abe	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2ac1	b0 03		bcs $2ac6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ac3	4c fa 32	jmp $32fa			jmp 	MInt32Modulus 							; else do it as integer.
.2ac6					_IsFPOperation:
.2ac6	8a		txa				txa 								; call the relevant fp routine
.2ac7	a2 0a		ldx #$0a		ldx	#10
.2ac9	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2acc	aa		tax				tax
.2acd	60		rts				rts
.2ace					XorHandler:
.2ace	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2ad1	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2ad4	b0 03		bcs $2ad9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ad6	4c 2e 32	jmp $322e			jmp 	MInt32Xor 							; else do it as integer.
.2ad9					_IsFPOperation:
.2ad9	8a		txa				txa 								; call the relevant fp routine
.2ada	a2 0a		ldx #$0a		ldx	#10
.2adc	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2adf	aa		tax				tax
.2ae0	60		rts				rts
.2ae1					OrHandler:
.2ae1	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2ae4	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2ae7	b0 03		bcs $2aec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ae9	4c 15 32	jmp $3215			jmp 	MInt32Or 							; else do it as integer.
.2aec					_IsFPOperation:
.2aec	8a		txa				txa 								; call the relevant fp routine
.2aed	a2 0a		ldx #$0a		ldx	#10
.2aef	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2af2	aa		tax				tax
.2af3	60		rts				rts
.2af4					AndHandler:
.2af4	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2af7	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2afa	b0 03		bcs $2aff			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2afc	4c fc 31	jmp $31fc			jmp 	MInt32And 							; else do it as integer.
.2aff					_IsFPOperation:
.2aff	8a		txa				txa 								; call the relevant fp routine
.2b00	a2 0a		ldx #$0a		ldx	#10
.2b02	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2b05	aa		tax				tax
.2b06	60		rts				rts
.2b07					ShlHandler:
.2b07	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2b0a	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2b0d	b0 03		bcs $2b12			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b0f	4c 88 2b	jmp $2b88			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2b12					_IsFPOperation:
.2b12	8a		txa				txa 								; call the relevant fp routine
.2b13	a2 0a		ldx #$0a		ldx	#10
.2b15	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2b18	aa		tax				tax
.2b19	60		rts				rts
.2b1a					ShrHandler:
.2b1a	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2b1d	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2b20	b0 03		bcs $2b25			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b22	4c 8b 2b	jmp $2b8b			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2b25					_IsFPOperation:
.2b25	8a		txa				txa 								; call the relevant fp routine
.2b26	a2 0a		ldx #$0a		ldx	#10
.2b28	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2b2b	aa		tax				tax
.2b2c	60		rts				rts
.2b2d					WordRefHandler:
.2b2d	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2b30	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2b33	b0 03		bcs $2b38			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b35	4c 7a 2b	jmp $2b7a			jmp 	MInt32WordIndirect 							; else do it as integer.
.2b38					_IsFPOperation:
.2b38	8a		txa				txa 								; call the relevant fp routine
.2b39	a2 0a		ldx #$0a		ldx	#10
.2b3b	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2b3e	aa		tax				tax
.2b3f	60		rts				rts
.2b40					ByteRefHandler:
.2b40	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2b43	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2b46	b0 03		bcs $2b4b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b48	4c 7e 2b	jmp $2b7e			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2b4b					_IsFPOperation:
.2b4b	8a		txa				txa 								; call the relevant fp routine
.2b4c	a2 0a		ldx #$0a		ldx	#10
.2b4e	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2b51	aa		tax				tax
.2b52	60		rts				rts
.2b53					PowerHandler:
.2b53	20 30 2c	jsr $2c30			jsr 	DereferenceTwo
.2b56	20 33 2a	jsr $2a33			jsr 	BinaryProcess 				; check to see if either is float
.2b59	b0 03		bcs $2b5e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2b5b	4c 66 2b	jmp $2b66			jmp 	PowerInteger 							; else do it as integer.
.2b5e					_IsFPOperation:
.2b5e	8a		txa				txa 								; call the relevant fp routine
.2b5f	a2 18		ldx #$18		ldx	#24
.2b61	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2b64	aa		tax				tax
.2b65	60		rts				rts
.2b66					PowerInteger:
.2b66	20 4d 2a	jsr $2a4d			jsr 	BPMakeBothFloat				; make them float.
.2b69	8a		txa				txa
.2b6a	a2 18		ldx #$18		ldx	#24
.2b6c	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2b6f	a2 14		ldx #$14		ldx	#20
.2b71	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2b74	aa		tax				tax
.2b75	a9 00		lda #$00			lda 	#0 							; make type integer
.2b77	95 48		sta $48,x			sta 	esType,x
.2b79	60		rts				rts
.2b7a					Mint32WordIndirect:
.2b7a	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2b7c	d0 02		bne $2b80			bne 	Min32Indirect
.2b7e					Mint32ByteIndirect:
.2b7e	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2b80					Min32Indirect:
.2b80	48		pha				pha 								; save the indirection
.2b81	20 8b 33	jsr $338b			jsr 	MInt32Add 					; add a!b a?b
.2b84	68		pla				pla 								; and set the type to reference.
.2b85	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2b87	60		rts				rts
.2b88					Mint32ShiftLeftX:
.2b88	18		clc				clc 								; CC shift left
.2b89	90 01		bcc $2b8c			bcc 	Mint32Shift
.2b8b					Mint32ShiftRightX:
.2b8b	38		sec				sec 								; CS shift right
.2b8c					Mint32Shift:
.2b8c	08		php				php 								; save carry flag on stack.
.2b8d	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2b8f	15 61		ora $61,x			ora 	esInt2+1,x
.2b91	15 69		ora $69,x			ora 	esInt3+1,x
.2b93	d0 1e		bne $2bb3			bne 	_MShiftZero
.2b95	b5 51		lda $51,x			lda 	esInt0+1,x
.2b97	c9 20		cmp #$20			cmp 	#32
.2b99	b0 18		bcs $2bb3			bcs 	_MShiftZero
.2b9b					_MShiftLoop:
.2b9b	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2b9d	f0 12		beq $2bb1			beq 	_MShiftExit
.2b9f	d6 51		dec $51,x			dec 	esInt0+1,x
.2ba1	28		plp				plp 								; restore and save carry
.2ba2	08		php				php
.2ba3	90 06		bcc $2bab			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2ba5	20 c5 34	jsr $34c5			jsr 	Mint32ShiftRight
.2ba8	4c 9b 2b	jmp $2b9b			jmp 	_MShiftLoop
.2bab					_MShiftLeft:
.2bab	20 bc 34	jsr $34bc			jsr 	Mint32ShiftLeft
.2bae	4c 9b 2b	jmp $2b9b			jmp 	_MShiftLoop
.2bb1					_MShiftExit:
.2bb1	28		plp				plp	 								; throw saved carry and exit
.2bb2	60		rts				rts
.2bb3					_MShiftZero:
.2bb3	4c a7 34	jmp $34a7			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2bb6					PerformComparison:
.2bb6	20 30 2c	jsr $2c30			jsr 	DereferenceTwo 				; make both values.
.2bb9	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2bbb	35 49		and $49,x			and 	esType+1,x
.2bbd	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2bbe	30 1d		bmi $2bdd			bmi 	_PCIsString
.2bc0	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.2bc2	15 49		ora $49,x			ora 	esType+1,x
.2bc4	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2bc5	30 22		bmi $2be9			bmi 	_PCError
.2bc7	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2bc9	f0 0f		beq $2bda			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2bcb	20 4d 2a	jsr $2a4d			jsr 	BPMakeBothFloat 			; make both float
.2bce	8a		txa				txa
.2bcf	a2 06		ldx #$06		ldx	#6
.2bd1	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2bd4	86 32		stx $32				stx 	tempShort 					; save result
.2bd6	aa		tax				tax
.2bd7	a5 32		lda $32				lda 	tempShort
.2bd9	60		rts				rts
.2bda					_PCIsInteger:
.2bda	4c 47 32	jmp $3247			jmp 	MInt32Compare
.2bdd					_PCIsString:
.2bdd	8a		txa				txa 								; A has SP
.2bde	a2 0a		ldx #$0a		ldx	#10
.2be0	20 52 38	jsr $3852		jsr	stringHandler
.2be3	86 32		stx $32				stx 	tempShort 					; save result
.2be5	aa		tax				tax 								; put SP back in X and get result.
.2be6	a5 32		lda $32				lda 	tempShort
.2be8	60		rts				rts
.2be9					_PCError:
.2be9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2beb	20 18 15	jsr $1518		jsr	errorHandler
.2bee					CompareEquals:
.2bee	20 b6 2b	jsr $2bb6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2bf1	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2bf3	f0 35		beq $2c2a			beq  	CompareTrue
.2bf5	4c 2d 2c	jmp $2c2d			jmp 	CompareFalse
.2bf8					CompareLess:
.2bf8	20 b6 2b	jsr $2bb6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2bfb	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2bfd	f0 2b		beq $2c2a			beq  	CompareTrue
.2bff	4c 2d 2c	jmp $2c2d			jmp 	CompareFalse
.2c02					CompareGreater:
.2c02	20 b6 2b	jsr $2bb6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2c05	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2c07	f0 21		beq $2c2a			beq  	CompareTrue
.2c09	4c 2d 2c	jmp $2c2d			jmp 	CompareFalse
.2c0c					CompareNotEquals:
.2c0c	20 b6 2b	jsr $2bb6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2c0f	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2c11	d0 17		bne $2c2a			bne  	CompareTrue
.2c13	4c 2d 2c	jmp $2c2d			jmp 	CompareFalse
.2c16					CompareGreaterEq:
.2c16	20 b6 2b	jsr $2bb6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2c19	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2c1b	d0 0d		bne $2c2a			bne  	CompareTrue
.2c1d	4c 2d 2c	jmp $2c2d			jmp 	CompareFalse
.2c20					CompareLessEq:
.2c20	20 b6 2b	jsr $2bb6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2c23	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2c25	d0 03		bne $2c2a			bne  	CompareTrue
.2c27	4c 2d 2c	jmp $2c2d			jmp 	CompareFalse
.2c2a					CompareTrue:
.2c2a	4c a3 34	jmp $34a3			jmp 	MInt32True
.2c2d					CompareFalse:
.2c2d	4c a7 34	jmp $34a7			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2c30					DereferenceTwo:
.2c30	e8		inx				inx
.2c31	20 35 2c	jsr $2c35			jsr 	DereferenceOne
.2c34	ca		dex				dex
.2c35					DereferenceOne:
.2c35	b5 48		lda $48,x			lda 	esType,x
.2c37	10 3d		bpl $2c76			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2c39	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2c3a	b0 3b		bcs $2c77			bcs 	_DRFloatDeReference
.2c3c	98		tya				tya
.2c3d	48		pha				pha
.2c3e	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2c40	85 2a		sta $2a				sta 	temp0
.2c42	b5 58		lda $58,x			lda 	esInt1,x
.2c44	85 2b		sta $2b				sta 	temp0+1
.2c46	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2c48	95 58		sta $58,x			sta 	esInt1,x
.2c4a	95 60		sta $60,x			sta 	esInt2,x
.2c4c	95 68		sta $68,x			sta 	esInt3,x
.2c4e	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2c50	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2c52	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2c53	30 0d		bmi $2c62			bmi 	_DeRefString 				; string, 2 bytes only
.2c55	d0 11		bne $2c68			bne 	_DeRefByte 					; byte 1 byte only
.2c57					_DeRefLong:
.2c57	a0 03		ldy #$03			ldy 	#3
.2c59	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c5b	95 68		sta $68,x			sta 	esInt3,x
.2c5d	88		dey				dey
.2c5e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c60	95 60		sta $60,x			sta 	esInt2,x
.2c62					_DeRefString:
.2c62	a0 01		ldy #$01			ldy 	#1
.2c64	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c66	95 58		sta $58,x			sta 	esInt1,x
.2c68					_DeRefByte:
.2c68	a0 00		ldy #$00			ldy 	#0
.2c6a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c6c	95 50		sta $50,x			sta 	esInt0,x
.2c6e	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2c70	29 40		and #$40			and 	#$40
.2c72	95 48		sta $48,x			sta 	esType,x
.2c74	68		pla				pla
.2c75	a8		tay				tay
.2c76					_DRNotReference
.2c76	60		rts				rts
.2c77					_DRFloatDereference:
.2c77	20 01 22	jsr $2201			jsr 	TOSToTemp0 					; address to deref in temp0
.2c7a	8a		txa				txa
.2c7b	a2 1e		ldx #$1e		ldx	#30
.2c7d	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2c80	aa		tax				tax
.2c81	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2c83	95 48		sta $48,x			sta 	esType,x
.2c85	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2c86					EvaluateLevel:
.2c86	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2c88	b0 1e		bcs $2ca8			bcs 	_ELStack
.2c8a	48		pha				pha 								; save precedence level.
.2c8b	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2c8d	95 50		sta $50,x			sta 	esInt0,x
.2c8f	95 58		sta $58,x			sta 	esInt1,x
.2c91	95 60		sta $60,x			sta 	esInt2,x
.2c93	95 68		sta $68,x			sta 	esInt3,x
.2c95	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2c97	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2c99	30 26		bmi $2cc1			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2c9b	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2c9c	30 0f		bmi $2cad			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2c9e	8a		txa				txa 								; stack level in X
.2c9f	a2 02		ldx #$02		ldx	#2
.2ca1	20 62 44	jsr $4462		jsr	variableHandler
.2ca4	aa		tax				tax
.2ca5	4c ea 2c	jmp $2cea			jmp		_ELHasTerm
.2ca8					_ELStack:
.2ca8	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2caa	20 18 15	jsr $1518		jsr	errorHandler
.2cad					_ELIsConstant:
.2cad	4a		lsr a				lsr 	a 							; get the value back
.2cae	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2cb0	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2cb2					_ELCheckNext:
.2cb2	c8		iny				iny 								; look at next
.2cb3	b1 28		lda ($28),y			lda 	(codePtr),y
.2cb5	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2cb7	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2cb9	b0 2f		bcs $2cea			bcs 	_ELHasTerm 					; done getting the constant.
.2cbb	20 83 2d	jsr $2d83			jsr 	ELShiftByteIn 				; shift byte into position.
.2cbe	4c b2 2c	jmp $2cb2			jmp 	_ELCheckNext
.2cc1					_ELIsToken:
.2cc1	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2cc3	f0 0f		beq $2cd4			beq 	_ELIsString
.2cc5	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2cc7	d0 5f		bne $2d28			bne 	_ELCheckUnary
.2cc9	8a		txa				txa 								; put X into A
.2cca	c8		iny				iny 								; skip over the float marker
.2ccb	a2 1a		ldx #$1a		ldx	#26
.2ccd	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2cd0	aa		tax				tax 								; restore X
.2cd1	4c ea 2c	jmp $2cea			jmp 	_ELHasTerm
.2cd4					_ELIsString:
.2cd4	98		tya				tya 								; address of string is codePtr+y+1
.2cd5	38		sec				sec
.2cd6	65 28		adc $28				adc 	codePtr
.2cd8	95 50		sta $50,x			sta 	esInt0,x
.2cda	a5 29		lda $29				lda 	codePtr+1
.2cdc	69 00		adc #$00			adc 	#0
.2cde	95 58		sta $58,x			sta 	esInt1,x
.2ce0	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2ce2	95 48		sta $48,x			sta 	esType,x
.2ce4	c8		iny				iny 								; skip over string.
.2ce5	98		tya				tya
.2ce6	38		sec				sec									; +1 for the length itself.
.2ce7	71 28		adc ($28),y			adc 	(codePtr),y
.2ce9	a8		tay				tay 								; and fall through to term loop code.
.2cea					_ELHasTerm:
.2cea	b1 28		lda ($28),y			lda 	(codePtr),y
.2cec	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2cee	90 04		bcc $2cf4			bcc 	_ELPopExit
.2cf0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2cf2	90 02		bcc $2cf6			bcc 	_ELHasBinaryTerm
.2cf4					_ELPopExit:
.2cf4	68		pla				pla
.2cf5					_ELExit:
.2cf5	60		rts				rts
.2cf6					_ELHasBinaryTerm:
.2cf6	84 32		sty $32				sty 	tempShort 					; save position
.2cf8	a8		tay				tay 								; use token as an index and get the precedence.
.2cf9	b9 2b 2d	lda $2d2b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2cfc	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2cfe	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2d00	68		pla				pla 								; restore current level.
.2d01	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2d03	b0 f0		bcs $2cf5			bcs 	_ELExit
.2d05	48		pha				pha 								; save current level back on the stack.
.2d06	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2d08	48		pha				pha
.2d09	c8		iny				iny
.2d0a	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2d0b	a5 32		lda $32				lda 	tempShort
.2d0d	20 86 2c	jsr $2c86			jsr 	EvaluateLevel
.2d10	ca		dex				dex
.2d11	68		pla				pla 								; get the operator back out.
.2d12					_ELExecuteA:
.2d12	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2d14	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2d15	aa		tax				tax
.2d16	bd 47 29	lda $2947,x			lda 	Group0Vectors,x
.2d19	85 2a		sta $2a				sta 	temp0
.2d1b	bd 48 29	lda $2948,x			lda 	Group0Vectors+1,x
.2d1e	85 2b		sta $2b				sta 	temp0+1
.2d20	a6 32		ldx $32				ldx 	tempShort
.2d22	20 6f 2d	jsr $2d6f			jsr 	_ELCallTemp0
.2d25	4c ea 2c	jmp $2cea			jmp 	_ELHasTerm 					; and loop back round.
.2d28					_ELCheckUnary:
.2d28	c8		iny				iny 								; skip over token.
.2d29	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2d2b	f0 19		beq $2d46			beq 	_ELMinus
.2d2d	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2d2f	f0 2c		beq $2d5d			beq 	_ELIndirect
.2d31	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2d33	f0 28		beq $2d5d			beq 	_ELIndirect
.2d35	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2d37	f0 39		beq $2d72			beq 	_ELExtension
.2d39	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2d3b	90 04		bcc $2d41			bcc 	_ELUSyntax
.2d3d	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2d3f	90 d1		bcc $2d12			bcc 	_ELExecuteA 				; if so do that token.
.2d41					_ELUSyntax:
.2d41	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2d43	20 18 15	jsr $1518		jsr	errorHandler
.2d46					_ELMinus:
.2d46	20 d8 2d	jsr $2dd8			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2d49	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2d4b	f0 0a		beq $2d57			beq 	_ELMinusInteger
.2d4d	8a		txa				txa
.2d4e	a2 0e		ldx #$0e		ldx	#14
.2d50	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2d53	aa		tax				tax
.2d54	4c ea 2c	jmp $2cea			jmp 	_ELHasTerm
.2d57					_ELMinusInteger:
.2d57	20 61 34	jsr $3461			jsr 	MInt32Negate 				; do int negate
.2d5a	4c ea 2c	jmp $2cea			jmp 	_ELHasTerm
.2d5d					_ELIndirect:
.2d5d	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2d5e	20 e1 2d	jsr $2de1			jsr 	EvaluateIntegerTerm 		; integer address
.2d61	68		pla				pla
.2d62	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2d64	f0 02		beq $2d68			beq 	_ELHaveModifier
.2d66	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2d68					_ELHaveModifier:
.2d68	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2d6a	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2d6c	4c ea 2c	jmp $2cea			jmp 	_ELHasTerm
.2d6f					_ELCallTemp0:
.2d6f	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2d72					_ELExtension:
.2d72	8a		txa				txa 								; stack pos in A
.2d73	20 60 18	jsr $1860		jsr	extensionHandler
.2d76	aa		tax				tax 								; restore stack
.2d77	4c ea 2c	jmp $2cea			jmp 	_ELHasTerm
.2d7a					UnaryParenthesis:
.2d7a	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2d7c	20 86 2c	jsr $2c86			jsr 	EvaluateLevel
.2d7f	20 1a 35	jsr $351a			jsr 	CheckRightParen 			; check for )
.2d82	60		rts				rts
.2d83					ELShiftByteIn:
.2d83	48		pha				pha 								; save bits to shift in.
.2d84	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2d86	48		pha				pha
.2d87	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2d89	95 68		sta $68,x			sta 	esInt3,x
.2d8b	b5 58		lda $58,x			lda 	esInt1,x
.2d8d	95 60		sta $60,x			sta 	esInt2,x
.2d8f	b5 50		lda $50,x			lda 	esInt0,x
.2d91	95 58		sta $58,x			sta 	esInt1,x
.2d93	a9 00		lda #$00			lda 	#0
.2d95	95 50		sta $50,x			sta 	esInt0,x
.2d97	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2d98	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2d9a	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2d9c					_ELShiftLoop:
.2d9c	4a		lsr a				lsr 	a
.2d9d	76 68		ror $68,x			ror 	esInt3,x
.2d9f	76 60		ror $60,x			ror 	esInt2,x
.2da1	76 58		ror $58,x			ror 	esInt1,x
.2da3	76 50		ror $50,x			ror 	esInt0,x
.2da5	c9 01		cmp #$01			cmp 	#1
.2da7	d0 f3		bne $2d9c			bne 	_ELShiftLoop
.2da9	68		pla				pla 								; get original 6 bit value and OR in.
.2daa	29 3f		and #$3f			and 	#$3F
.2dac	15 50		ora $50,x			ora 	esInt0,x
.2dae	95 50		sta $50,x			sta 	esInt0,x
.2db0	60		rts				rts
.2db1					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2db1	01					.byte	$01			; $86 and
>2db2	01					.byte	$01			; $87 or
>2db3	01					.byte	$01			; $88 xor
>2db4	02					.byte	$02			; $89 >=
>2db5	02					.byte	$02			; $8a <=
>2db6	02					.byte	$02			; $8b >
>2db7	02					.byte	$02			; $8c <
>2db8	02					.byte	$02			; $8d =
>2db9	02					.byte	$02			; $8e <>
>2dba	03					.byte	$03			; $8f +
>2dbb	03					.byte	$03			; $90 -
>2dbc	04					.byte	$04			; $91 >>
>2dbd	04					.byte	$04			; $92 <<
>2dbe	04					.byte	$04			; $93 *
>2dbf	04					.byte	$04			; $94 /
>2dc0	04					.byte	$04			; $95 mod
>2dc1	05					.byte	$05			; $96 ^
>2dc2	06					.byte	$06			; $97 !
>2dc3	06					.byte	$06			; $98 ?
>2dc4	82					.byte	$82			; $99 repeat
>2dc5	82					.byte	$82			; $9a while
>2dc6	82					.byte	$82			; $9b for
>2dc7	82					.byte	$82			; $9c if
>2dc8	82					.byte	$82			; $9d defproc
>2dc9	80					.byte	$80			; $9e until
>2dca	80					.byte	$80			; $9f wend
>2dcb	80					.byte	$80			; $a0 next
>2dcc	80					.byte	$80			; $a1 then
>2dcd	80					.byte	$80			; $a2 endif
>2dce	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2dcf					EvaluateTerm:
.2dcf	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2dd1	20 86 2c	jsr $2c86			jsr 	EvaluateLevel
.2dd4	20 35 2c	jsr $2c35			jsr 	DereferenceOne
.2dd7	60		rts				rts
.2dd8					EvaluateNumericTerm:
.2dd8	20 cf 2d	jsr $2dcf			jsr 	EvaluateTerm
.2ddb	b5 48		lda $48,x			lda 	esType,x
.2ddd	0a		asl a				asl 	a 							; see if it's a string.
.2dde	30 09		bmi $2de9			bmi 	ENTType
.2de0	60		rts				rts
.2de1					EvaluateIntegerTerm:
.2de1	20 cf 2d	jsr $2dcf			jsr 	EvaluateTerm
.2de4	b5 48		lda $48,x			lda 	esType,x
.2de6	d0 01		bne $2de9			bne 	ENTType
.2de8	60		rts				rts
.2de9					ENTType:
.2de9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2deb	20 18 15	jsr $1518		jsr	errorHandler
.2dee					EvaluateRoot:
.2dee	a2 00		ldx #$00			ldx 	#0
.2df0					Evaluate:
.2df0	a9 00		lda #$00			lda 	#0
.2df2	20 86 2c	jsr $2c86			jsr 	EvaluateLevel
.2df5	20 35 2c	jsr $2c35			jsr 	DereferenceOne
.2df8	60		rts				rts
.2df9					EvaluateNumeric:
.2df9	20 f0 2d	jsr $2df0			jsr 	Evaluate
.2dfc	b5 48		lda $48,x			lda 	esType,x
.2dfe	0a		asl a				asl 	a 							; see if it's a string.
.2dff	30 e8		bmi $2de9			bmi 	ENTType
.2e01	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2e02	4a		lsr a				lsr 	a
.2e03	60		rts				rts
.2e04					EvaluateString:
.2e04	20 f0 2d	jsr $2df0			jsr 	Evaluate
.2e07	b5 48		lda $48,x			lda 	esType,x
.2e09	0a		asl a				asl 	a 							; see if it's a string.
.2e0a	10 dd		bpl $2de9			bpl 	ENTType
.2e0c	60		rts				rts
.2e0d					EvaluateRootInteger:
.2e0d	a2 00		ldx #$00			ldx 	#0
.2e0f					EvaluateInteger:
.2e0f	20 f0 2d	jsr $2df0			jsr 	Evaluate
.2e12	b5 48		lda $48,x			lda 	esType,x
.2e14	d0 d3		bne $2de9			bne 	ENTType
.2e16	60		rts				rts
.2e17					EvaluateSmallInteger:
.2e17	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger
.2e1a	b5 58		lda $58,x			lda 	esInt1,x
.2e1c	15 60		ora $60,x			ora 	esInt2,x
.2e1e	15 68		ora $68,x			ora 	esInt3,x
.2e20	d0 03		bne $2e25			bne 	_ESIValue
.2e22	b5 50		lda $50,x			lda 	esInt0,x
.2e24	60		rts				rts
.2e25					_ESIValue:
.2e25	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2e27	20 18 15	jsr $1518		jsr	errorHandler
.2e2a					LinkEvaluate:
.2e2a	aa		tax				tax
.2e2b	20 f0 2d	jsr $2df0			jsr 	Evaluate
.2e2e	8a		txa				txa
.2e2f	60		rts				rts
.2e30					LinkEvaluateTerm:
.2e30	aa		tax				tax
.2e31	20 cf 2d	jsr $2dcf			jsr 	EvaluateTerm
.2e34	8a		txa				txa
.2e35	60		rts				rts
.2e36					LinkEvaluateInteger:
.2e36	aa		tax				tax
.2e37	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger
.2e3a	8a		txa				txa
.2e3b	60		rts				rts
.2e3c					LinkEvaluateString:
.2e3c	aa		tax				tax
.2e3d	20 04 2e	jsr $2e04			jsr 	EvaluateString
.2e40	8a		txa				txa
.2e41	60		rts				rts
.2e42					LinkEvaluateSmallInt:
.2e42	aa		tax				tax
.2e43	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger
.2e46	8a		txa				txa
.2e47	60		rts				rts
.2e48					EvaluateReference:
.2e48	ad c2 2d	lda $2dc2			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2e4b	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2e4c	e9 01		sbc #$01			sbc 	#1
.2e4e	20 86 2c	jsr $2c86			jsr 	EvaluateLevel
.2e51	b5 48		lda $48,x			lda 	esType,x
.2e53	10 01		bpl $2e56			bpl 	_ERFail
.2e55	60		rts				rts
.2e56					_ERFail:
.2e56	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2e58	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2e5b					Event_Str:
.2e5b	20 f9 2d	jsr $2df9			jsr 	EvaluateNumeric 			; get a number.
.2e5e	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2e60	d0 13		bne $2e75			bne 	_ESFloat
.2e62	20 b8 2e	jsr $2eb8			jsr 	ConvertGetBase 				; get base, or default.
.2e65	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2e67	85 2a		sta $2a				sta 	temp0
.2e69	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2e6b	85 2b		sta $2b				sta 	1+(temp0)
.2e6d	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2e6f	20 fd 33	jsr $33fd			jsr 	MInt32ToString 				; convert to string.
.2e72	4c 82 2e	jmp $2e82			jmp 	_ESCloneExit 				; clone and exit.
.2e75					_ESFloat:
.2e75	20 1a 35	jsr $351a			jsr 	CheckRightParen 			; check closing )
.2e78	20 01 22	jsr $2201			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2e7b	8a		txa				txa
.2e7c	a2 16		ldx #$16		ldx	#22
.2e7e	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2e81	aa		tax				tax
.2e82					_ESCloneExit:
.2e82	8a		txa				txa
.2e83	a2 04		ldx #$04		ldx	#4
.2e85	20 52 38	jsr $3852		jsr	stringHandler
.2e88	aa		tax				tax
.2e89	60		rts				rts
.2e8a					UnaryVal:
.2e8a	38		sec				sec 								; Carry set to return value
.2e8b	b0 01		bcs $2e8e			bcs 	ValueMain
.2e8d					UnaryIsVal:
.2e8d	18		clc				clc									; Carry clear to return legitimacy
.2e8e					ValueMain:
.2e8e	08		php				php 								; save results (CS is value, CC is validation)
.2e8f	20 04 2e	jsr $2e04			jsr 	EvaluateString
.2e92	20 b8 2e	jsr $2eb8			jsr 	ConvertGetBase 				; get base, if any.
.2e95	98		tya				tya
.2e96	48		pha				pha
.2e97	20 01 22	jsr $2201			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2e9a	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2e9c	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2e9e	20 15 33	jsr $3315			jsr 	MInt32FromString 			; convert it back from a string.
.2ea1	b0 0c		bcs $2eaf			bcs 	_VMSuccess 					; successfully converted.
.2ea3	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2ea5	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2ea7	f0 00		beq $2ea9			beq 	_VMFailed 	 				; so we failed.
.2ea9					_VMFailed:
.2ea9	68		pla				pla
.2eaa	a8		tay				tay
.2eab	28		plp				plp
.2eac	4c a7 34	jmp $34a7			jmp 	MInt32False 				; return 0 whatever.
.2eaf					_VMSuccess:
.2eaf	68		pla				pla
.2eb0	a8		tay				tay
.2eb1	28		plp				plp 								; if CS the it was val() so we want the value.
.2eb2	b0 03		bcs $2eb7			bcs 	_VMExit
.2eb4	4c a3 34	jmp $34a3			jmp 	MInt32True 					; otherwise return true as successful.
.2eb7					_VMExit:
.2eb7	60		rts				rts
.2eb8					ConvertGetBase:
.2eb8	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2eba	95 51		sta $51,x			sta 	esInt0+1,x
.2ebc	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2ebe	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2ec0	d0 0e		bne $2ed0			bne 	_CGBDone 					; not found, should be )
.2ec2	e8		inx				inx 								; next level
.2ec3	c8		iny				iny 								; skip comma.
.2ec4	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger		; evaluate the base.
.2ec7	ca		dex				dex
.2ec8	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2eca	90 08		bcc $2ed4			bcc 	_CGBValue 					; (it should work as high as 37)
.2ecc	c9 11		cmp #$11			cmp 	#17
.2ece	b0 04		bcs $2ed4			bcs 	_CGBValue
.2ed0					_CGBDone:
.2ed0	20 1a 35	jsr $351a			jsr 	CheckRightParen
.2ed3	60		rts				rts
.2ed4					_CGBValue:
.2ed4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ed6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2ed9					EventFunction:
.2ed9	20 48 2e	jsr $2e48			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2edc	b5 48		lda $48,x			lda 	esType,x
.2ede	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2ee0	d0 5b		bne $2f3d			bne 	_EFType
.2ee2	20 27 35	jsr $3527			jsr 	CheckComma
.2ee5	e8		inx				inx
.2ee6	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2ee9	20 1a 35	jsr $351a			jsr 	CheckRightParen 			; finish off with the right bracket
.2eec	ca		dex				dex
.2eed	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2eef	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2ef1	15 60		ora $60,x			ora 	esInt2,x
.2ef3	15 68		ora $68,x			ora 	esInt3,x
.2ef5	d0 41		bne $2f38			bne 	_EFValue
.2ef7	98		tya				tya
.2ef8	48		pha				pha
.2ef9	8a		txa				txa
.2efa	48		pha				pha
.2efb	a2 1c		ldx #$1c		ldx	#28
.2efd	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f00	84 2d		sty $2d				sty 	temp1+1
.2f02	85 2c		sta $2c				sta 	temp1
.2f04	68		pla				pla
.2f05	aa		tax				tax
.2f06	20 01 22	jsr $2201			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2f09	a0 03		ldy #$03			ldy 	#3							; if -ve
.2f0b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f0d	30 23		bmi $2f32			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2f0f	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2f11	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f13	c8		iny				iny
.2f14	11 2a		ora ($2a),y			ora 	(temp0),y
.2f16	f0 17		beq $2f2f			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2f18	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2f1a	38		sec				sec
.2f1b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f1d	e5 2c		sbc $2c				sbc 	temp1
.2f1f	c8		iny				iny
.2f20	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f22	e5 2d		sbc $2d				sbc 	temp1+1
.2f24	10 0c		bpl $2f32			bpl 	_EFFail 					; if trigger >= timer then return False
.2f26	20 42 2f	jsr $2f42			jsr 	SetEventTimer 				; reset the timer for next time.
.2f29	20 a3 34	jsr $34a3			jsr	 	MInt32True 					; and treutn true as fired.
.2f2c	68		pla				pla
.2f2d	a8		tay				tay
.2f2e	60		rts				rts
.2f2f					_EFInitialise:
.2f2f	20 42 2f	jsr $2f42			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2f32					_EFFail:
.2f32	68		pla				pla
.2f33	a8		tay				tay
.2f34	20 a7 34	jsr $34a7			jsr 	MInt32False
.2f37	60		rts				rts
.2f38					_EFValue:
.2f38	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2f3a	20 18 15	jsr $1518		jsr	errorHandler
.2f3d					_EFType:
.2f3d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2f3f	20 18 15	jsr $1518		jsr	errorHandler
.2f42					SetEventTimer:
.2f42	a0 00		ldy #$00			ldy 	#0
.2f44	18		clc				clc
.2f45	a5 2c		lda $2c				lda 	temp1
.2f47	75 51		adc $51,x			adc 	esInt0+1,x
.2f49	91 2a		sta ($2a),y			sta		(temp0),y
.2f4b	c8		iny				iny
.2f4c	a5 2d		lda $2d				lda 	temp1+1
.2f4e	75 59		adc $59,x			adc 	esInt1+1,x
.2f50	91 2a		sta ($2a),y			sta		(temp0),y
.2f52	88		dey				dey
.2f53	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2f55	d0 04		bne $2f5b			bne 	_SETExit 					; zero means initialise.....
.2f57	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2f59	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2f5b					_SETExit:
.2f5b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2f5c					UnaryLen:
.2f5c	20 6a 2f	jsr $2f6a			jsr 	ULStart
.2f5f					ULFinish:
.2f5f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2f61	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2f63	20 b6 34	jsr $34b6			jsr 	MInt32Set8Bit 				; write it out.
.2f66	20 1a 35	jsr $351a			jsr 	CheckRightParen
.2f69	60		rts				rts
.2f6a	20 04 2e	jsr $2e04	ULStart:jsr 	EvaluateString
.2f6d	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2f6f	85 2a		sta $2a				sta 	temp0
.2f71	b5 58		lda $58,x			lda 	esInt1,x
.2f73	85 2b		sta $2b				sta 	temp0+1
.2f75	84 32		sty $32				sty 	tempShort 					; get length
.2f77	a0 00		ldy #$00			ldy 	#0
.2f79	60		rts				rts
.2f7a					UnaryAsc:
.2f7a	20 6a 2f	jsr $2f6a			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2f7d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2f7f	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2f80	c9 00		cmp #$00			cmp 	#0
.2f82	d0 db		bne $2f5f			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2f84	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2f86	20 18 15	jsr $1518		jsr	errorHandler
.2f89					UnaryAbs:
.2f89	20 f9 2d	jsr $2df9			jsr 	EvaluateNumeric 			; some numeric value
.2f8c	b0 07		bcs $2f95			bcs 	_UAFloat 					; CS then float, so use that function
.2f8e	20 5c 34	jsr $345c			jsr 	MInt32Absolute 				; int version
.2f91	20 1a 35	jsr $351a			jsr 	CheckRightParen
.2f94	60		rts				rts
.2f95					_UAFloat:
.2f95	8a		txa				txa 								; float version
.2f96	a2 02		ldx #$02		ldx	#2
.2f98	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2f9b	aa		tax				tax
.2f9c	20 1a 35	jsr $351a			jsr 	CheckRightParen
.2f9f	60		rts				rts
.2fa0					UnarySgn:
.2fa0	20 f9 2d	jsr $2df9			jsr 	EvaluateNumeric 			; same as above but sign of value
.2fa3	b0 07		bcs $2fac			bcs 	_USFloat
.2fa5	20 94 34	jsr $3494			jsr 	MInt32Sign
.2fa8	20 1a 35	jsr $351a			jsr 	CheckRightParen
.2fab	60		rts				rts
.2fac					_USFloat:
.2fac	8a		txa				txa
.2fad	a2 10		ldx #$10		ldx	#16
.2faf	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.2fb2	aa		tax				tax
.2fb3	20 1a 35	jsr $351a			jsr 	CheckRightParen
.2fb6	60		rts				rts
.2fb7					UnaryPeek:
.2fb7	20 e3 2f	jsr $2fe3			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2fba	4c d7 2f	jmp $2fd7			jmp 	PDLByte0
.2fbd					UnaryDeek:
.2fbd	20 e3 2f	jsr $2fe3			jsr 	PDLCode
.2fc0	4c d1 2f	jmp $2fd1			jmp 	PDLByte1
.2fc3					UnaryLeek:
.2fc3	20 e3 2f	jsr $2fe3			jsr 	PDLCode
.2fc6	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2fc8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fca	95 68		sta $68,x			sta 	esInt3,x
.2fcc	88		dey				dey
.2fcd	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fcf	95 60		sta $60,x			sta 	esInt2,x
.2fd1					PDLByte1:
.2fd1	a0 01		ldy #$01			ldy 	#1
.2fd3	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fd5	95 58		sta $58,x			sta 	esInt1,x
.2fd7					PDLByte0:
.2fd7	a0 00		ldy #$00			ldy 	#0
.2fd9	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fdb	95 50		sta $50,x			sta 	esInt0,x
.2fdd	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2fdf	20 1a 35	jsr $351a			jsr 	CheckRightParen 			; check right and return
.2fe2	60		rts				rts
.2fe3					PDLCode:
.2fe3	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger 			; some address
.2fe6	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2fe8	85 2a		sta $2a				sta 	temp0
.2fea	b5 58		lda $58,x			lda 	esInt1,x
.2fec	85 2b		sta $2b				sta 	temp0+1
.2fee	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2ff0	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2ff2	95 60		sta $60,x			sta 	esInt2,x
.2ff4	95 68		sta $68,x			sta 	esInt3,x
.2ff6	84 32		sty $32				sty 	tempShort 					; save Y
.2ff8	60		rts				rts
.2ff9					Unary_Random:
.2ff9	20 d7 34	jsr $34d7			jsr 	MInt32Random 				; generate random number.
.2ffc	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2ffe	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3000	f0 08		beq $300a			beq 	_URExit
.3002	e8		inx				inx 								; load range 0..r-1 into +1
.3003	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger
.3006	ca		dex				dex
.3007	20 fa 32	jsr $32fa			jsr 	MInt32Modulus 				; calculate random % modulus
.300a					_URExit:
.300a	20 1a 35	jsr $351a			jsr 	CheckRightParen 			; check right and return
.300d	60		rts				rts
.300e					Unary_Min:
.300e	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3010	d0 02		bne $3014			bne 	UnaryMBody
.3012					Unary_Max:
.3012	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3014					UnaryMBody:
.3014	48		pha				pha 								; save comparator on stack, shows min or max
.3015	20 f0 2d	jsr $2df0			jsr 	Evaluate 					; get the first thing to check
.3018					_UnaryMLoop:
.3018	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.301a	c8		iny				iny
.301b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.301d	f0 09		beq $3028			beq 	_UnaryMExit
.301f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3021	f0 07		beq $302a			beq 	_UnaryMCompare
.3023	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3025	20 18 15	jsr $1518		jsr	errorHandler
.3028					_UnaryMExit:
.3028	68		pla				pla 								; done so throw comparator and return.
.3029	60		rts				rts
.302a					_UnaryMCompare:
.302a	e8		inx				inx 								; get the 2nd thing to evaluate
.302b	20 f0 2d	jsr $2df0			jsr 	Evaluate
.302e	ca		dex				dex
.302f	20 b6 2b	jsr $2bb6			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3032	85 32		sta $32				sta 	tempShort 					; save result
.3034	68		pla				pla 								; get what we need
.3035	48		pha				pha
.3036	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3038	d0 de		bne $3018			bne 	_UnaryMLoop 				; no, try another value.
.303a	20 a7 34	jsr $34a7			jsr 	MInt32False 				; promote 2nd to 1st.
.303d	20 8b 33	jsr $338b			jsr 	MInt32Add
.3040	4c 18 30	jmp $3018			jmp 	_UnaryMLoop
.3043					Unary_Page:
.3043	20 a7 34	jsr $34a7			jsr 	MInt32False 				; zero
.3046	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3049	95 50		sta $50,x			sta 	esInt0,x
.304b	ad c9 0a	lda $0ac9			lda 	basePage+1
.304e	95 58		sta $58,x			sta 	esInt1,x
.3050	60		rts				rts
.3051					UnaryReference:
.3051	a9 0f		lda #$0f			lda 	#15
.3053	20 86 2c	jsr $2c86			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3056	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.3058	10 05		bpl $305f			bpl 	UType
.305a	a9 00		lda #$00			lda 	#0 							; make it an integer
.305c	95 48		sta $48,x			sta 	esType,x
.305e	60		rts				rts
.305f					UType:
.305f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3061	20 18 15	jsr $1518		jsr	errorHandler
.3064					UnaryHexMarker:
.3064	4c e1 2d	jmp $2de1			jmp 	EvaluateIntegerTerm
.3067					UnaryComplement:
.3067	20 e1 2d	jsr $2de1			jsr 	EvaluateIntegerTerm
.306a	20 7b 34	jsr $347b			jsr 	MInt32Not
.306d	60		rts				rts
.306e					UnaryIntToFloat:
.306e	20 f9 2d	jsr $2df9			jsr 	EvaluateNumeric				; some number
.3071	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.3073	d0 0b		bne $3080			bne 	_UIFExit
.3075	8a		txa				txa 								; convert and set type
.3076	a2 1c		ldx #$1c		ldx	#28
.3078	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.307b	aa		tax				tax
.307c	a9 01		lda #$01			lda 	#1
.307e	95 48		sta $48,x			sta 	esType,x
.3080					_UIFExit:
.3080	60		rts				rts
.3081					UnaryFloatToInt:
.3081	20 f9 2d	jsr $2df9			jsr 	EvaluateNumeric 			; the number
.3084	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.3086	f0 0b		beq $3093			beq 	_UFIExit
.3088	8a		txa				txa 								; convert to int
.3089	a2 14		ldx #$14		ldx	#20
.308b	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.308e	aa		tax				tax
.308f	a9 00		lda #$00			lda 	#0 							; set type
.3091	95 48		sta $48,x			sta 	esType,x
.3093					_UFIExit:
.3093	60		rts				rts
.3094					UnaryAlloc:
.3094	e8		inx				inx 								; evaluate memory required
.3095	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger
.3098	20 1a 35	jsr $351a			jsr 	CheckRightParen
.309b	ca		dex				dex
.309c	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.309e	15 69		ora $69,x			ora 	esInt3+1,x
.30a0	d0 1d		bne $30bf			bne 	_UABadValue
.30a2	20 a7 34	jsr $34a7			jsr 	MInt32False					; zero return.
.30a5	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.30a7	95 58		sta $58,x			sta 	esInt1,x
.30a9	a5 35		lda $35				lda 	lowMemory
.30ab	95 50		sta $50,x			sta 	esInt0,x
.30ad	18		clc				clc 								; add alloc required.
.30ae	75 51		adc $51,x			adc 	esInt0+1,x
.30b0	85 35		sta $35				sta 	lowMemory
.30b2	a5 36		lda $36				lda 	lowMemory+1
.30b4	75 59		adc $59,x			adc 	esInt1+1,x
.30b6	85 36		sta $36				sta 	lowMemory+1
.30b8	b0 05		bcs $30bf			bcs		_UABadValue 				; overflow definitely bad.
.30ba	c5 34		cmp $34				cmp 	highMemory+1
.30bc	b0 01		bcs $30bf			bcs 	_UABadValue 				; out of memory bad.
.30be	60		rts				rts
.30bf					_UABadValue:
.30bf	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.30c1	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.30c4					UnaryTimer:
.30c4	20 1a 35	jsr $351a			jsr 	CheckRightParen 			; no parameters
.30c7	98		tya				tya
.30c8	48		pha				pha
.30c9	20 ce 34	jsr $34ce			jsr 	MInt32Zero 					; zero result
.30cc	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.30ce	a2 1c		ldx #$1c		ldx	#28
.30d0	20 f6 14	jsr $14f6		jsr	deviceHandler
.30d3	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.30d5	95 50		sta $50,x			sta 	esInt0,x
.30d7	98		tya				tya
.30d8	95 58		sta $58,x			sta 	esInt1,x
.30da	68		pla				pla
.30db	a8		tay				tay
.30dc	60		rts				rts
.30dd					UnaryInkey:
.30dd	20 1a 35	jsr $351a			jsr 	CheckRightParen
.30e0	86 2a		stx $2a				stx 	temp0
.30e2	a2 0a		ldx #$0a		ldx	#10
.30e4	20 f6 14	jsr $14f6		jsr	deviceHandler
.30e7	a6 2a		ldx $2a				ldx 	temp0
.30e9	20 b6 34	jsr $34b6			jsr 	MInt32Set8Bit
.30ec	60		rts				rts
.30ed					UnaryGet:
.30ed	20 1a 35	jsr $351a			jsr 	CheckRightParen
.30f0	86 2a		stx $2a				stx 	temp0
.30f2					_UGLoop:
.30f2	a2 02		ldx #$02		ldx	#2
.30f4	20 f6 14	jsr $14f6		jsr	deviceHandler
.30f7	a2 0a		ldx #$0a		ldx	#10
.30f9	20 f6 14	jsr $14f6		jsr	deviceHandler
.30fc	c9 00		cmp #$00			cmp 	#0
.30fe	f0 f2		beq $30f2			beq 	_UGLoop
.3100	a6 2a		ldx $2a				ldx 	temp0
.3102	20 b6 34	jsr $34b6			jsr 	MInt32Set8Bit
.3105	60		rts				rts
.3106					UnaryGetString:
.3106	20 ed 30	jsr $30ed			jsr 	UnaryGet
.3109					UGSDoChr:
.3109	4c 5a 31	jmp $315a			jmp 	ChrCode
.310c					UnaryInkeyString:
.310c	20 dd 30	jsr $30dd			jsr 	UnaryInkey
.310f	b5 50		lda $50,x			lda 	esInt0,x
.3111	d0 f6		bne $3109			bne 	UGSDoChr
.3113	8a		txa				txa
.3114	a2 08		ldx #$08		ldx	#8
.3116	20 52 38	jsr $3852		jsr	stringHandler
.3119	aa		tax				tax
.311a	60		rts				rts
.311b					UnarySys:
.311b	20 0f 2e	jsr $2e0f			jsr 	EvaluateInteger 				; get the address
.311e	20 1a 35	jsr $351a			jsr 	CheckRightParen
.3121	20 01 22	jsr $2201			jsr 	TOSToTemp0 						; copy call address to temp0
.3124	8a		txa				txa
.3125	48		pha				pha
.3126	98		tya				tya
.3127	48		pha				pha
.3128	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.312b	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.312e	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3131	20 40 31	jsr $3140			jsr 	_CallTemp0
.3134	85 32		sta $32				sta 	tempShort 						; restore YX
.3136	68		pla				pla
.3137	a8		tay				tay
.3138	68		pla				pla
.3139	aa		tax				tax
.313a	a5 32		lda $32				lda 	tempShort
.313c	20 b6 34	jsr $34b6			jsr 	MInt32Set8Bit 					; return result.
.313f	60		rts				rts
.3140					_CallTemp0:
.3140	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3143					UnaryMem:
.3143	20 a7 34	jsr $34a7			jsr 	MInt32False 					; set to false (e.g. 0)
.3146	38		sec				sec
.3147	a5 33		lda $33				lda 	highMemory 						; calculate value
.3149	e5 35		sbc $35				sbc 	lowMemory
.314b	95 50		sta $50,x			sta 	esInt0,x
.314d	a5 34		lda $34				lda 	highMemory+1
.314f	e5 36		sbc $36				sbc 	lowMemory+1
.3151	95 58		sta $58,x			sta 	esInt1,x
.3153	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3154					ExecChr:
.3154	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger		; character number 0-255
.3157	20 1a 35	jsr $351a			jsr 	CheckRightParen				; right bracket
.315a					ChrCode:
.315a	98		tya				tya
.315b	48		pha				pha
.315c	8a		txa				txa 								; A = stack
.315d	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.315f	a2 02		ldx #$02		ldx	#2
.3161	20 52 38	jsr $3852		jsr	stringHandler
.3164	aa		tax				tax 								; X = stack
.3165	68		pla				pla
.3166	a8		tay				tay
.3167	60		rts				rts
.3168					ExecLower:
.3168	38		sec				sec 								; set carry is lower
.3169	b0 01		bcs $316c			bcs 	ExecUpperLower
.316b					ExecUpper:
.316b	18		clc				clc 								; clear carry is upper
.316c					ExecUpperLower:
.316c	08		php				php 								; save carry
.316d	20 04 2e	jsr $2e04			jsr 	EvaluateString 				; string to stack,X
.3170	20 1a 35	jsr $351a			jsr 	CheckRightParen 			; check closing right bracket.
.3173	28		plp				plp 								; restore carry, save Y
.3174	98		tya				tya
.3175	48		pha				pha
.3176	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3178	2a		rol a				rol 	a
.3179	a8		tay				tay 								; now in Y
.317a	8a		txa				txa 								; do the substring and exit.
.317b	a2 0c		ldx #$0c		ldx	#12
.317d	20 52 38	jsr $3852		jsr	stringHandler
.3180	aa		tax				tax
.3181	68		pla				pla
.3182	a8		tay				tay
.3183	60		rts				rts
.3184					ExecLeft:
.3184	20 04 2e	jsr $2e04			jsr 	EvaluateString 				; string to stack,X
.3187	20 27 35	jsr $3527			jsr 	CheckComma
.318a	e8		inx				inx
.318b	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.318d	20 b6 34	jsr $34b6			jsr 	MInt32Set8Bit
.3190	e8		inx				inx
.3191	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3194					ExecSubstring:
.3194	ca		dex				dex 								; fix up X
.3195	ca		dex				dex
.3196	20 1a 35	jsr $351a			jsr 	CheckRightParen 			; check closing right bracket.
.3199	8a		txa				txa 								; do the substring and exit.
.319a	a2 0e		ldx #$0e		ldx	#14
.319c	20 52 38	jsr $3852		jsr	stringHandler
.319f	aa		tax				tax
.31a0	60		rts				rts
.31a1					ExecMid:
.31a1	20 04 2e	jsr $2e04			jsr 	EvaluateString 				; string to stack,X
.31a4	20 27 35	jsr $3527			jsr 	CheckComma
.31a7	e8		inx				inx
.31a8	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.31ab	c9 00		cmp #$00			cmp 	#0
.31ad	f0 15		beq $31c4			beq 	_EMValue
.31af	e8		inx				inx
.31b0	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.31b2	20 b6 34	jsr $34b6			jsr 	MInt32Set8Bit
.31b5	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.31b7	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.31b9	f0 d9		beq $3194			beq 	ExecSubString
.31bb	20 27 35	jsr $3527			jsr 	CheckComma
.31be	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.31c1	4c 94 31	jmp $3194			jmp 	ExecSubString
.31c4					_EMValue:
.31c4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.31c6	20 18 15	jsr $1518		jsr	errorHandler
.31c9					ExecRight:
.31c9	20 04 2e	jsr $2e04			jsr 	EvaluateString 				; string to stack,X
.31cc	20 27 35	jsr $3527			jsr 	CheckComma
.31cf	e8		inx				inx
.31d0	20 17 2e	jsr $2e17			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.31d3	ca		dex				dex
.31d4	98		tya				tya
.31d5	48		pha				pha
.31d6	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.31d8	85 2a		sta $2a				sta 	temp0
.31da	b5 58		lda $58,x			lda 	esInt1,x
.31dc	85 2b		sta $2b				sta 	temp0+1
.31de	a0 00		ldy #$00			ldy 	#0 							; point to length
.31e0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.31e2	18		clc				clc 								; add 1.
.31e3	69 01		adc #$01			adc 	#1
.31e5	38		sec				sec
.31e6	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.31e8	f0 02		beq $31ec			beq		_ERMake1 					; if zero, make it 1.
.31ea	b0 02		bcs $31ee			bcs		_EROkay
.31ec					_ERMake1:
.31ec	a9 01		lda #$01			lda 	#1 							; start position.
.31ee					_EROkay:
.31ee	e8		inx				inx 								; set start pos.
.31ef	95 50		sta $50,x			sta 	esInt0,x
.31f1	e8		inx				inx
.31f2	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.31f4	20 b6 34	jsr $34b6			jsr 	MInt32Set8Bit
.31f7	68		pla				pla
.31f8	a8		tay				tay
.31f9	4c 94 31	jmp $3194			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.31fc					MInt32And:
.31fc	b5 50		lda $50,x			lda 	esInt0,x
.31fe	35 51		and $51,x			and 	esInt0+1,x
.3200	95 50		sta $50,x			sta 	esInt0,x
.3202	b5 58		lda $58,x			lda 	esInt1,x
.3204	35 59		and $59,x			and 	esInt1+1,x
.3206	95 58		sta $58,x			sta 	esInt1,x
.3208	b5 60		lda $60,x			lda 	esInt2,x
.320a	35 61		and $61,x			and 	esInt2+1,x
.320c	95 60		sta $60,x			sta 	esInt2,x
.320e	b5 68		lda $68,x			lda 	esInt3,x
.3210	35 69		and $69,x			and 	esInt3+1,x
.3212	95 68		sta $68,x			sta 	esInt3,x
.3214	60		rts				rts
.3215					MInt32Or:
.3215	b5 50		lda $50,x			lda 	esInt0,x
.3217	15 51		ora $51,x			ora 	esInt0+1,x
.3219	95 50		sta $50,x			sta 	esInt0,x
.321b	b5 58		lda $58,x			lda 	esInt1,x
.321d	15 59		ora $59,x			ora 	esInt1+1,x
.321f	95 58		sta $58,x			sta 	esInt1,x
.3221	b5 60		lda $60,x			lda 	esInt2,x
.3223	15 61		ora $61,x			ora 	esInt2+1,x
.3225	95 60		sta $60,x			sta 	esInt2,x
.3227	b5 68		lda $68,x			lda 	esInt3,x
.3229	15 69		ora $69,x			ora 	esInt3+1,x
.322b	95 68		sta $68,x			sta 	esInt3,x
.322d	60		rts				rts
.322e					MInt32Xor:
.322e	b5 50		lda $50,x			lda 	esInt0,x
.3230	55 51		eor $51,x			eor 	esInt0+1,x
.3232	95 50		sta $50,x			sta 	esInt0,x
.3234	b5 58		lda $58,x			lda 	esInt1,x
.3236	55 59		eor $59,x			eor 	esInt1+1,x
.3238	95 58		sta $58,x			sta 	esInt1,x
.323a	b5 60		lda $60,x			lda 	esInt2,x
.323c	55 61		eor $61,x			eor 	esInt2+1,x
.323e	95 60		sta $60,x			sta 	esInt2,x
.3240	b5 68		lda $68,x			lda 	esInt3,x
.3242	55 69		eor $69,x			eor 	esInt3+1,x
.3244	95 68		sta $68,x			sta 	esInt3,x
.3246	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3247					MInt32Compare:
.3247	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.3249	d5 51		cmp $51,x			cmp 	esInt0+1,x
.324b	d0 13		bne $3260			bne 	MInt32Compare2
.324d	b5 58		lda $58,x			lda 	esInt1,x
.324f	d5 59		cmp $59,x			cmp 	esInt1+1,x
.3251	d0 0d		bne $3260			bne 	MInt32Compare2
.3253	b5 60		lda $60,x			lda 	esInt2,x
.3255	d5 61		cmp $61,x			cmp 	esInt2+1,x
.3257	d0 07		bne $3260			bne 	MInt32Compare2
.3259	b5 68		lda $68,x			lda 	esInt3,x
.325b	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.325d	d0 01		bne $3260			bne 	MInt32Compare2
.325f	60		rts				rts
.3260					MInt32Compare2:
.3260	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3262	d5 51		cmp $51,x			cmp 	esInt0+1,x
.3264	b5 58		lda $58,x			lda		esInt1,x
.3266	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3268	b5 60		lda $60,x			lda		esInt2,x
.326a	f5 61		sbc $61,x			sbc 	esInt2+1,x
.326c	b5 68		lda $68,x			lda		esInt3,x
.326e	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3270	50 02		bvc $3274			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3272	49 80		eor #$80			eor 	#$80
.3274					_I32LNoOverflow
.3274	30 03		bmi $3279			bmi 	MInt32CLess					; if -ve then return $FF
.3276	a9 01		lda #$01			lda 	#$01						; else return $01
.3278	60		rts				rts
.3279					MInt32CLess:
.3279	a9 ff		lda #$ff			lda 	#$FF
.327b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.327c					MInt32SDivide:
.327c	98		tya				tya  								; save Y, which is the count of negations
.327d	48		pha				pha
.327e	a0 00		ldy #$00			ldy 	#0 							; zero count
.3280	20 98 32	jsr $3298			jsr 	_MInt32SRemSign 			; unsign TOS
.3283	e8		inx				inx 								; unsign TOS+1
.3284	20 98 32	jsr $3298			jsr 	_MInt32SRemSign
.3287	ca		dex				dex
.3288	98		tya				tya 								; save sign count on stack
.3289	48		pha				pha
.328a	20 a1 32	jsr $32a1			jsr 	MInt32UDivide 				; unsigned division
.328d	68		pla				pla 								; get sign count back
.328e	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3290	f0 03		beq $3295			beq 	_I32SNoNeg
.3292	20 61 34	jsr $3461			jsr 	MInt32Negate
.3295					_I32SNoNeg:
.3295	68		pla				pla 								; restoe Y and exit
.3296	a8		tay				tay
.3297	60		rts				rts
.3298					_MInt32SRemSign:
.3298	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.329a	10 04		bpl $32a0			bpl 	_MInt32SRSExit
.329c	c8		iny				iny 								; increment the sign count
.329d	20 61 34	jsr $3461			jsr 	MInt32Negate 				; negate the value.
.32a0					_MInt32SRSExit:
.32a0	60		rts				rts
.32a1					MInt32UDivide:
.32a1	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.32a3	15 59		ora $59,x			ora 	esInt1+1,x
.32a5	15 5a		ora $5a,x			ora 	esInt1+2,x
.32a7	15 5b		ora $5b,x			ora 	esInt1+3,x
.32a9	f0 4a		beq $32f5			beq 	_MInt32DZero
.32ab	e8		inx				inx 								; clear A
.32ac	e8		inx				inx
.32ad	20 a7 34	jsr $34a7			jsr 	MInt32False
.32b0	ca		dex				dex
.32b1	ca		dex				dex
.32b2	98		tya				tya 								; save Y on the stack
.32b3	48		pha				pha
.32b4	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.32b6					_MInt32UDLoop:
.32b6	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.32b8	36 58		rol $58,x			rol 	esInt1,x
.32ba	36 60		rol $60,x			rol 	esInt2,x
.32bc	36 68		rol $68,x			rol 	esInt3,x
.32be	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.32c0	36 5a		rol $5a,x			rol 	esInt1+2,x
.32c2	36 62		rol $62,x			rol 	esInt2+2,x
.32c4	36 6a		rol $6a,x			rol 	esInt3+2,x
.32c6	38		sec				sec 								; calculate A-M saving result on the stack
.32c7	b5 52		lda $52,x			lda 	esInt0+2,x
.32c9	f5 51		sbc $51,x			sbc 	esInt0+1,x
.32cb	48		pha				pha
.32cc	b5 5a		lda $5a,x			lda 	esInt1+2,x
.32ce	f5 59		sbc $59,x			sbc 	esInt1+1,x
.32d0	48		pha				pha
.32d1	b5 62		lda $62,x			lda 	esInt2+2,x
.32d3	f5 61		sbc $61,x			sbc 	esInt2+1,x
.32d5	48		pha				pha
.32d6	b5 6a		lda $6a,x			lda 	esInt3+2,x
.32d8	f5 69		sbc $69,x			sbc 	esInt3+1,x
.32da	90 10		bcc $32ec			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.32dc	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.32de	68		pla				pla
.32df	95 62		sta $62,x			sta 	esInt2+2,x
.32e1	68		pla				pla
.32e2	95 5a		sta $5a,x			sta 	esInt1+2,x
.32e4	68		pla				pla
.32e5	95 52		sta $52,x			sta 	esInt0+2,x
.32e7	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.32e9	4c ef 32	jmp $32ef			jmp 	_MInt32Next 					; do the next iteration
.32ec					_MInt32NoSubtract:
.32ec	68		pla				pla
.32ed	68		pla				pla
.32ee	68		pla				pla
.32ef					_MInt32Next:
.32ef	88		dey				dey 								; do this 32 times.
.32f0	d0 c4		bne $32b6			bne 	_MInt32UDLoop
.32f2	68		pla				pla 								; restore Y and exit
.32f3	a8		tay				tay
.32f4	60		rts				rts
.32f5					_MInt32DZero:
.32f5	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.32f7	20 18 15	jsr $1518		jsr	errorHandler
.32fa					MInt32Modulus:
.32fa	20 a1 32	jsr $32a1			jsr 	MInt32UDivide 				; do the division.
.32fd	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.32ff	95 68		sta $68,x			sta 	esInt3,x
.3301	b5 62		lda $62,x			lda 	esInt2+2,x
.3303	95 60		sta $60,x			sta 	esInt2,x
.3305	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3307	95 58		sta $58,x			sta 	esInt1,x
.3309	b5 52		lda $52,x			lda 	esInt0+2,x
.330b	95 50		sta $50,x			sta 	esInt0,x
.330d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cda					fs32Length:
>0cda							.fill 	1
.330e					LinkInt32FromString:
.330e	aa		tax				tax
.330f	98		tya				tya
.3310	20 15 33	jsr $3315			jsr 	MInt32FromString
.3313	8a		txa				txa
.3314	60		rts				rts
.3315					MInt32FromString:
.3315	85 32		sta $32				sta 	tempShort 					; save base
.3317	98		tya				tya
.3318	48		pha				pha
.3319	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.331b	b1 2a		lda ($2a),y			lda 	(temp0),y
.331d	8d da 0c	sta $0cda			sta 	fs32Length
.3320	f0 65		beq $3387			beq 	_I32FSFail2					; fail if length zero.
.3322	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3324	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3326	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3328	d0 09		bne $3333			bne 	_I32FSNotNegative
.332a	ad da 0c	lda $0cda			lda 	fs32Length 					; get length back.
.332d	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.332f	f0 56		beq $3387			beq 	_I32FSFail2
.3331	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3333					_I32FSNotNegative:
.3333	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3335	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3337	d0 02		bne $333b			bne 	_I32FSNN2
.3339	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.333b					_I32FSNN2:
.333b	48		pha				pha 								; save base + final sign on stack.
.333c	20 a7 34	jsr $34a7			jsr 	MInt32False 				; zero the return value.
.333f					_I32FSMainLoop:
.333f	68		pla				pla 								; get the base back into tempShort
.3340	48		pha				pha
.3341	29 7f		and #$7f			and 	#$7F
.3343	85 32		sta $32				sta 	tempShort
.3345	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3347	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3349	90 02		bcc $334d			bcc 	_I32FSNotLC
.334b	e9 20		sbc #$20			sbc 	#32
.334d					_I32FSNotLC:
.334d	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.334e	e9 30		sbc #$30			sbc 	#"0"
.3350	90 34		bcc $3386			bcc 	_I32FSFail 					; nothing more to do.
.3352	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3354	90 06		bcc $335c			bcc 	_I32FSValidate
.3356	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3358	90 2c		bcc $3386			bcc 	_I32FSFail
.335a	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.335c					_I32FSValidate:
.335c	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.335e	b0 26		bcs $3386			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3360	48		pha				pha 								; save the new digit value.
.3361	e8		inx				inx 								; put base into next slot up on stack
.3362	a5 32		lda $32				lda 	tempShort
.3364	20 b6 34	jsr $34b6			jsr 	MInt32Set8Bit
.3367	ca		dex				dex
.3368	20 bf 33	jsr $33bf			jsr 	MInt32Multiply 				; multiply current by the base
.336b	e8		inx				inx
.336c	68		pla				pla  								; put additive into next slot
.336d	20 b6 34	jsr $34b6			jsr 	MInt32Set8Bit
.3370	ca		dex				dex
.3371	20 8b 33	jsr $338b			jsr 	MInt32Add 					; and add it
.3374	c8		iny				iny 								; bump the character pointer
.3375	cc da 0c	cpy $0cda			cpy 	fs32Length 					; until > length.
.3378	f0 c5		beq $333f			beq 	_I32FSMainLoop
.337a	90 c3		bcc $333f			bcc 	_I32FSMainLoop
.337c					_I32FSDone:
.337c	68		pla				pla 								; get base/final sign back
.337d	10 03		bpl $3382			bpl 	_I32FSNN3
.337f	20 61 34	jsr $3461			jsr 	MInt32Negate 				; negate the result.
.3382					_I32FSNN3:
.3382	68		pla				pla
.3383	a8		tay				tay
.3384	38		sec				sec
.3385	60		rts				rts
.3386					_I32FSFail:
.3386	68		pla				pla
.3387					_I32FSFail2:
.3387	68		pla				pla
.3388	a8		tay				tay
.3389	18		clc				clc
.338a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.338b					MInt32Add:
.338b	18		clc				clc
.338c	b5 50		lda $50,x			lda 	esInt0,x
.338e	75 51		adc $51,x			adc 	esInt0+1,x
.3390	95 50		sta $50,x			sta 	esInt0,x
.3392	b5 58		lda $58,x			lda 	esInt1,x
.3394	75 59		adc $59,x			adc 	esInt1+1,x
.3396	95 58		sta $58,x			sta 	esInt1,x
.3398	b5 60		lda $60,x			lda 	esInt2,x
.339a	75 61		adc $61,x			adc 	esInt2+1,x
.339c	95 60		sta $60,x			sta 	esInt2,x
.339e	b5 68		lda $68,x			lda 	esInt3,x
.33a0	75 69		adc $69,x			adc 	esInt3+1,x
.33a2	95 68		sta $68,x			sta 	esInt3,x
.33a4	60		rts				rts
.33a5					MInt32Sub:
.33a5	38		sec				sec
.33a6	b5 50		lda $50,x			lda 	esInt0,x
.33a8	f5 51		sbc $51,x			sbc 	esInt0+1,x
.33aa	95 50		sta $50,x			sta 	esInt0,x
.33ac	b5 58		lda $58,x			lda 	esInt1,x
.33ae	f5 59		sbc $59,x			sbc 	esInt1+1,x
.33b0	95 58		sta $58,x			sta 	esInt1,x
.33b2	b5 60		lda $60,x			lda 	esInt2,x
.33b4	f5 61		sbc $61,x			sbc 	esInt2+1,x
.33b6	95 60		sta $60,x			sta 	esInt2,x
.33b8	b5 68		lda $68,x			lda 	esInt3,x
.33ba	f5 69		sbc $69,x			sbc 	esInt3+1,x
.33bc	95 68		sta $68,x			sta 	esInt3,x
.33be	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.33bf					MInt32Multiply:
.33bf	e8		inx				inx 								; copy 2nd -> 3rd
.33c0	20 e5 33	jsr $33e5			jsr 	MInt32CopyUp
.33c3	ca		dex				dex
.33c4	20 e5 33	jsr $33e5			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.33c7	20 a7 34	jsr $34a7			jsr 	MInt32False 				; zero 1st.
.33ca					_I32Loop:
.33ca	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.33cc	29 01		and #$01			and 	#1
.33ce	f0 03		beq $33d3			beq 	_I32NoAdd 					; if set
.33d0	20 8b 33	jsr $338b			jsr 	MInt32Add 					; add 2nd to 1st.
.33d3					_I32NoAdd:
.33d3	e8		inx				inx 								; shift 2nd left
.33d4	20 bc 34	jsr $34bc			jsr 	MInt32ShiftLeft
.33d7	e8		inx				inx  								; shift 3rd right
.33d8	20 c5 34	jsr $34c5			jsr 	MInt32ShiftRight
.33db	20 ce 34	jsr $34ce			jsr 	MInt32Zero 					; check if zero.
.33de	08		php				php 								; save status bits
.33df	ca		dex				dex 	 							; point back to 1st
.33e0	ca		dex				dex
.33e1	28		plp				plp 								; get status bits
.33e2	d0 e6		bne $33ca			bne 	_I32Loop 					; if non-zero keep going.
.33e4	60		rts				rts
.33e5					MInt32CopyUp:
.33e5	b5 50		lda $50,x			lda 	esInt0,x
.33e7	95 51		sta $51,x			sta 	esInt0+1,x
.33e9	b5 58		lda $58,x			lda 	esInt1,x
.33eb	95 59		sta $59,x			sta 	esInt1+1,x
.33ed	b5 60		lda $60,x			lda 	esInt2,x
.33ef	95 61		sta $61,x			sta 	esInt2+1,x
.33f1	b5 68		lda $68,x			lda 	esInt3,x
.33f3	95 69		sta $69,x			sta 	esInt3+1,x
.33f5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cdb					MCharCount:	.fill 	1						; count of converted characters
.33f6					MLInt32ToString:
.33f6	aa		tax				tax									; module passes stack in A, base in Y
.33f7	98		tya				tya
.33f8	20 fd 33	jsr $33fd			jsr 	MInt32ToString
.33fb	8a		txa				txa
.33fc	60		rts				rts
.33fd					MInt32ToString:
.33fd	48		pha				pha 								; save base
.33fe	85 32		sta $32				sta 	tempShort 					; save target base.
.3400	a9 00		lda #$00			lda 	#0
.3402	8d db 0c	sta $0cdb			sta 	MCharCount 					; clear character count to 0
.3405	98		tya				tya
.3406	48		pha				pha
.3407	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3409	10 10		bpl $341b			bpl 	_I32TSUnsigned
.340b	48		pha				pha 								; save base on stack.
.340c	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.340e	10 08		bpl $3418			bpl 	_I32TSNoFlip
.3410	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3412	20 4e 34	jsr $344e			jsr 	MI32WriteCharacter
.3415	20 61 34	jsr $3461			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3418					_I32TSNoFlip:
.3418	68		pla				pla 								; get the base back
.3419	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.341b					_I32TSUnsigned:
.341b	20 29 34	jsr $3429			jsr 	MI32DivideWrite 			; recursive code to output string.
.341e	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3420	ad db 0c	lda $0cdb			lda 	MCharCount
.3423	91 2a		sta ($2a),y			sta 	(temp0),y
.3425	68		pla				pla
.3426	a8		tay				tay
.3427	68		pla				pla
.3428	60		rts				rts
.3429					MI32DivideWrite:
.3429	48		pha				pha 								; save the divisor/base
.342a	e8		inx				inx 								; write in the dividing position.
.342b	20 b6 34	jsr $34b6			jsr 	MInt32Set8Bit
.342e	ca		dex				dex
.342f	20 a1 32	jsr $32a1			jsr 	MInt32UDivide 				; divide number by base.
.3432	68		pla				pla 								; get the base into Y
.3433	a8		tay				tay
.3434	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3436	48		pha				pha
.3437	20 ce 34	jsr $34ce			jsr 	MInt32Zero 					; is the result zero ?
.343a	f0 04		beq $3440			beq 	_I32NoRecurse 				; if so, don't recurse.
.343c	98		tya				tya 								; put base into A
.343d	20 29 34	jsr $3429			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3440					_I32NoRecurse:
.3440	68		pla				pla 								; get the remainder back
.3441	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3443	90 02		bcc $3447			bcc 	_I32NotHex
.3445	69 06		adc #$06			adc 	#7-1
.3447					_I32NotHex:
.3447	18		clc				clc 								; make it ASCII
.3448	69 30		adc #$30			adc 	#48
.344a	20 4e 34	jsr $344e			jsr 	MI32WriteCharacter 			; write the character out
.344d	60		rts				rts 								; and exit.
.344e					MI32WriteCharacter:
.344e	ee db 0c	inc $0cdb			inc 	MCharCount 					; bump count (space for leading count)
.3451	ac db 0c	ldy $0cdb			ldy 	MCharCount 					; get position
.3454	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3456	c8		iny				iny
.3457	a9 00		lda #$00			lda 	#0
.3459	91 2a		sta ($2a),y			sta 	(temp0),y
.345b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdc					MSeed32:	.fill 	4							; random number seed.
.345c					MInt32Absolute:
.345c	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.345e	30 01		bmi $3461			bmi 	MInt32Negate
.3460	60		rts				rts
.3461					MInt32Negate:
.3461	38		sec				sec 								; subtract from zero.
.3462	a9 00		lda #$00			lda 	#0
.3464	f5 50		sbc $50,x			sbc 	esInt0,x
.3466	95 50		sta $50,x			sta 	esInt0,x
.3468	a9 00		lda #$00			lda 	#0
.346a	f5 58		sbc $58,x			sbc 	esInt1,x
.346c	95 58		sta $58,x			sta 	esInt1,x
.346e	a9 00		lda #$00			lda 	#0
.3470	f5 60		sbc $60,x			sbc 	esInt2,x
.3472	95 60		sta $60,x			sta 	esInt2,x
.3474	a9 00		lda #$00			lda 	#0
.3476	f5 68		sbc $68,x			sbc 	esInt3,x
.3478	95 68		sta $68,x			sta 	esInt3,x
.347a	60		rts				rts
.347b					MInt32Not:
.347b	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.347d	49 ff		eor #$ff			eor 	#$FF
.347f	95 50		sta $50,x			sta 	esInt0,x
.3481	b5 58		lda $58,x			lda 	esInt1,x
.3483	49 ff		eor #$ff			eor 	#$FF
.3485	95 58		sta $58,x			sta 	esInt1,x
.3487	b5 60		lda $60,x			lda 	esInt2,x
.3489	49 ff		eor #$ff			eor 	#$FF
.348b	95 60		sta $60,x			sta 	esInt2,x
.348d	b5 68		lda $68,x			lda 	esInt3,x
.348f	49 ff		eor #$ff			eor 	#$FF
.3491	95 68		sta $68,x			sta 	esInt3,x
.3493	60		rts				rts
.3494					MInt32Sign:
.3494	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.3496	30 0b		bmi $34a3			bmi 	MInt32True 					; if set return -1 (true)
.3498	20 ce 34	jsr $34ce			jsr 	MInt32Zero 					; is it zero ?
.349b	f0 0a		beq $34a7			beq 	MInt32False 				; if zero return 0 (false)
.349d	20 a7 34	jsr $34a7			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.34a0	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.34a2	60		rts				rts
.34a3					MInt32True:
.34a3	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.34a5	d0 02		bne $34a9			bne 	MInt32WriteAll
.34a7					MInt32False:
.34a7	a9 00		lda #$00			lda 	#0
.34a9					MInt32WriteAll:
.34a9	95 50		sta $50,x			sta 	esInt0,x
.34ab					MInt32Write123:
.34ab	95 58		sta $58,x			sta 	esInt1,x
.34ad	95 60		sta $60,x			sta 	esInt2,x
.34af	95 68		sta $68,x			sta 	esInt3,x
.34b1	a9 00		lda #$00			lda 	#$00						; and make it an integer
.34b3	95 48		sta $48,x			sta 	esType,x
.34b5	60		rts				rts
.34b6					MInt32Set8Bit:
.34b6	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.34b8	a9 00		lda #$00			lda 	#0 							; a value 0-255
.34ba	f0 ef		beq $34ab			beq		MInt32Write123
.34bc					MInt32ShiftLeft:
.34bc	16 50		asl $50,x			asl 	esInt0,x
.34be	36 58		rol $58,x			rol	 	esInt1,x
.34c0	36 60		rol $60,x			rol	 	esInt2,x
.34c2	36 68		rol $68,x			rol	 	esInt3,x
.34c4	60		rts				rts
.34c5					MInt32ShiftRight:
.34c5	56 68		lsr $68,x			lsr 	esInt3,x
.34c7	76 60		ror $60,x			ror 	esInt2,x
.34c9	76 58		ror $58,x			ror 	esInt1,x
.34cb	76 50		ror $50,x			ror 	esInt0,x
.34cd	60		rts				rts
.34ce					MInt32Zero:
.34ce	b5 50		lda $50,x			lda 	esInt0,x
.34d0	15 58		ora $58,x			ora 	esInt1,x
.34d2	15 60		ora $60,x			ora 	esInt2,x
.34d4	15 68		ora $68,x			ora 	esInt3,x
.34d6	60		rts				rts
.34d7					MInt32Random:
.34d7	98		tya				tya
.34d8	48		pha				pha
.34d9	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.34db	ad dc 0c	lda $0cdc			lda 	MSeed32+0 					; check the seed isn't zero
.34de	d0 03		bne $34e3			bne 	_Random1
.34e0	a8		tay				tay 								; if so do it 256 times
.34e1	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.34e3					_Random1:
.34e3	0a		asl a				asl 	a
.34e4	2e dd 0c	rol $0cdd			rol 	MSeed32+1
.34e7	2e de 0c	rol $0cde			rol 	MSeed32+2
.34ea	2e df 0c	rol $0cdf			rol 	MSeed32+3
.34ed	90 02		bcc $34f1			bcc 	_Random2
.34ef	49 c5		eor #$c5			eor 	#$C5
.34f1					_Random2:
.34f1	88		dey				dey
.34f2	d0 ef		bne $34e3			bne 	_Random1
.34f4	8d dc 0c	sta $0cdc			sta 	MSeed32+0 					; copy the seed in.
.34f7	95 50		sta $50,x			sta 	esInt0,x
.34f9	ad dd 0c	lda $0cdd			lda 	MSeed32+1
.34fc	95 58		sta $58,x			sta 	esInt1,x
.34fe	ad de 0c	lda $0cde			lda 	MSeed32+2
.3501	95 60		sta $60,x			sta 	esInt2,x
.3503	ad df 0c	lda $0cdf			lda 	MSeed32+3
.3506	95 68		sta $68,x			sta 	esInt3,x
.3508	68		pla				pla
.3509	a8		tay				tay
.350a	a9 00		lda #$00			lda 	#0
.350c	95 48		sta $48,x			sta 	esType,x
.350e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.350f					CheckToken:
.350f	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3511	d0 02		bne $3515			bne 	_CTError
.3513	c8		iny				iny
.3514	60		rts				rts
.3515					_CTError:
.3515	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3517	20 18 15	jsr $1518		jsr	errorHandler
.351a					CheckRightParen:
.351a	b1 28		lda ($28),y			lda 	(codePtr),y
.351c	c8		iny				iny
.351d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.351f	d0 01		bne $3522			bne 	_CRPError
.3521	60		rts				rts
.3522					_CRPError:
.3522	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3524	20 18 15	jsr $1518		jsr	errorHandler
.3527					CheckComma:
.3527	b1 28		lda ($28),y			lda 	(codePtr),y
.3529	c8		iny				iny
.352a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.352c	d0 01		bne $352f			bne 	_CCError
.352e	60		rts				rts
.352f					_CCError:
.352f	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3531	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3534					RSReset:
.3534	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3536	85 37		sta $37				sta 	rsPointer
.3538	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.353a	85 38		sta $38				sta 	1+(rsPointer)
.353c	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.353e	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3541	60		rts				rts
.3542					RSClaim:
.3542	84 32		sty $32				sty 	tempShort 					; preserve Y
.3544	48		pha				pha 								; save marker on stack.
.3545	8a		txa				txa 								; get bytes required.
.3546	38		sec				sec
.3547	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3549	65 37		adc $37				adc 	rsPointer
.354b	85 37		sta $37				sta 	rsPointer
.354d	a5 38		lda $38				lda 	rsPointer+1
.354f	69 ff		adc #$ff			adc 	#$FF
.3551	85 38		sta $38				sta 	rsPointer+1
.3553	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3555	90 08		bcc $355f			bcc 	_RSCOverflow
.3557	68		pla				pla 								; get marker back
.3558	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.355a	91 37		sta ($37),y			sta 	(rsPointer),y
.355c	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.355e	60		rts				rts
.355f					_RSCOverflow:
.355f	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3561	20 18 15	jsr $1518		jsr	errorHandler
.3564					RSFree:
.3564	18		clc				clc
.3565	65 37		adc $37				adc 	rsPointer
.3567	85 37		sta $37				sta 	rsPointer
.3569	90 02		bcc $356d			bcc 	_RSFExit
.356b	e6 38		inc $38				inc 	rsPointer+1
.356d					_RSFExit:
.356d	60		rts				rts
.356e					RSSavePosition:
.356e	84 32		sty $32				sty 	tempShort 					; save Y position
.3570	a8		tay				tay 								; this is where we write it.
.3571	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3573	91 37		sta ($37),y			sta 	(rsPointer),y
.3575	c8		iny				iny
.3576	a5 29		lda $29				lda 	codePtr+1
.3578	91 37		sta ($37),y			sta 	(rsPointer),y
.357a	c8		iny				iny
.357b	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.357d	91 37		sta ($37),y			sta 	(rsPointer),y
.357f	a8		tay				tay 								; fix Y back again to original value
.3580	60		rts				rts
.3581					RSLoadPosition:
.3581	a8		tay				tay
.3582	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3584	85 28		sta $28				sta 	codePtr
.3586	c8		iny				iny
.3587	b1 37		lda ($37),y			lda 	(rsPointer),y
.3589	85 29		sta $29				sta 	codePtr+1
.358b	c8		iny				iny
.358c	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.358e	a8		tay				tay 								; to Y
.358f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3590					WarmStart:
.3590	a2 04		ldx #$04		ldx	#4
.3592	20 fb 1e	jsr $1efb		jsr	interactionHandler

;******  Return to file: main/main.asm

.3595					mainHandler:
.3595	7c 98 35	jmp ($3598,x)			jmp 	(mainVectors,x)
.3598					mainVectors:
>3598	b4 35					.word _DummyControlHandler ; index 0
>359a	27 35					.word CheckComma           ; index 2
>359c	1a 35					.word CheckRightParen      ; index 4
>359e	03 27					.word XCommandClear        ; index 6
>35a0	2a 2e					.word LinkEvaluate         ; index 8
>35a2	36 2e					.word LinkEvaluateInteger  ; index 10
>35a4	42 2e					.word LinkEvaluateSmallInt ; index 12
>35a6	3c 2e					.word LinkEvaluateString   ; index 14
>35a8	30 2e					.word LinkEvaluateTerm     ; index 16
>35aa	f6 33					.word MLInt32ToString      ; index 18
>35ac	92 28					.word Command_XNew         ; index 20
>35ae	a0 28					.word XCommand_Run         ; index 22
>35b0	ac 28					.word Command_RunFrom      ; index 24
>35b2	0e 33					.word LinkInt32FromString  ; index 26
.35b4					_DummyControlHandler:
.35b4	60		rts			rts

;******  Return to file: basic.asm

.35b5					section_end_main:
.35b5					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.35b5					StringChrs:
.35b5	aa		tax				tax 								; set up stack
.35b6	a9 02		lda #$02			lda 	#2
.35b8	20 78 36	jsr $3678			jsr 	AllocateSoftString
.35bb	98		tya				tya
.35bc	20 9e 36	jsr $369e			jsr 	WriteSoftString
.35bf					StringUpdate:
.35bf	20 cd 35	jsr $35cd			jsr 	ReturnSoftString
.35c2	8a		txa				txa
.35c3	60		rts				rts
.35c4					StringNull:
.35c4	aa		tax				tax
.35c5	a9 01		lda #$01			lda 	#1
.35c7	20 78 36	jsr $3678			jsr 	AllocateSoftString
.35ca	4c bf 35	jmp $35bf			jmp 	StringUpdate
.35cd					ReturnSoftString:
.35cd	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.35cf	95 50		sta $50,x			sta 	esInt0,x
.35d1	a5 3a		lda $3a				lda 	softMemAlloc+1
.35d3	95 58		sta $58,x			sta 	esInt1,x
.35d5	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.35d7	95 60		sta $60,x			sta 	esInt2,x
.35d9	95 68		sta $68,x			sta 	esInt3,x
.35db	a9 40		lda #$40			lda 	#$40 						; type string.
.35dd	95 48		sta $48,x			sta 	esType,x
.35df	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.35e0					STRCompare:
.35e0	48		pha				pha 								; save A
.35e1	aa		tax				tax 								; put stack pos in X
.35e2	98		tya				tya
.35e3	48		pha				pha
.35e4	20 18 36	jsr $3618			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.35e7	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.35e9	b1 2a		lda ($2a),y			lda 	(temp0),y
.35eb	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.35ed	90 02		bcc $35f1			bcc 	_SCNotSmaller
.35ef	b1 2c		lda ($2c),y			lda 	(temp1),y
.35f1					_SCNotSmaller:
.35f1	aa		tax				tax 								; put that in X. We compare this many chars first.
.35f2					_SCCompareLoop:
.35f2	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.35f4	f0 0c		beq $3602			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.35f6	ca		dex				dex 								; decrement chars to compare.
.35f7	c8		iny				iny 								; move to next character
.35f8	38		sec				sec 								; calculate s1[y]-s2[y]
.35f9	b1 2a		lda ($2a),y			lda 	(temp0),y
.35fb	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.35fd	d0 0a		bne $3609			bne 	_SCReturnResult 			; if different return sign of A
.35ff	4c f2 35	jmp $35f2			jmp 	_SCCompareLoop
.3602					_SCSameToEndShortest
.3602	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3604	38		sec				sec
.3605	b1 2a		lda ($2a),y			lda 	(temp0),y
.3607	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3609					_SCReturnResult:
.3609	08		php				php 								; set return to zero preserving PSW.
.360a	a2 00		ldx #$00			ldx 	#0
.360c	28		plp				plp
.360d	f0 05		beq $3614			beq 	_SCExit 					; two values equal, then exit
.360f	ca		dex				dex 								; X = $FF
.3610	90 02		bcc $3614			bcc 	_SCExit 					; if 1st < 2nd then -1
.3612	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3614					_SCExit:
.3614	68		pla				pla
.3615	a8		tay				tay
.3616	68		pla				pla
.3617	60		rts				rts
.3618					CopyStringPair:
.3618	b5 51		lda $51,x			lda 	esInt0+1,x
.361a	85 2c		sta $2c				sta 	temp1
.361c	b5 59		lda $59,x			lda 	esInt1+1,x
.361e	85 2d		sta $2d				sta 	temp1+1
.3620					CopyStringTop:
.3620	b5 50		lda $50,x			lda 	esInt0,x
.3622	85 2a		sta $2a				sta 	temp0
.3624	b5 58		lda $58,x			lda 	esInt1,x
.3626	85 2b		sta $2b				sta 	temp0+1
.3628	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3629					StringConcat:
.3629	aa		tax				tax									; stack pos in X
.362a	98		tya				tya
.362b	48		pha				pha
.362c	20 18 36	jsr $3618			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.362f	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3630	a0 00		ldy #$00			ldy 	#0
.3632	b1 2a		lda ($2a),y			lda 	(temp0),y
.3634	71 2c		adc ($2c),y			adc 	(temp1),y
.3636	b0 1c		bcs $3654			bcs 	_SCError 					; just too many characters here.
.3638	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.363a	b0 18		bcs $3654			bcs 	_SCError
.363c	20 78 36	jsr $3678			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.363f	20 6f 36	jsr $366f			jsr 	CopySoftToStack 			; copy that to the stack.
.3642	20 59 36	jsr $3659			jsr 	SCCopyTemp0 				; copy temp0
.3645	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3647	85 2a		sta $2a				sta 	temp0
.3649	a5 2d		lda $2d				lda 	temp1+1
.364b	85 2b		sta $2b				sta 	temp0+1
.364d	20 59 36	jsr $3659			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3650	68		pla				pla
.3651	a8		tay				tay
.3652	8a		txa				txa 								; and A
.3653	60		rts				rts
.3654					_SCError:
.3654	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3656	20 18 15	jsr $1518		jsr	errorHandler
.3659					SCCopyTemp0:
.3659	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.365b	b1 2a		lda ($2a),y			lda 	(temp0),y
.365d	85 2e		sta $2e				sta 	temp2
.365f					_SCCopyLoop:
.365f	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3661	f0 0b		beq $366e			beq 	_SCCopyExit
.3663	c6 2e		dec $2e				dec 	temp2
.3665	c8		iny				iny 								; get next char
.3666	b1 2a		lda ($2a),y			lda 	(temp0),y
.3668	20 9e 36	jsr $369e			jsr 	WriteSoftString 			; write to soft string.
.366b	4c 5f 36	jmp $365f			jmp 	_SCCopyLoop
.366e					_SCCopyExit:
.366e	60		rts				rts
.366f					CopySoftToStack:
.366f	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3671	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.3673	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3675	95 58		sta $58,x			sta 	esInt1,x
.3677	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3678					AllocateSoftString:
.3678	85 32		sta $32				sta 	tempShort 					; save count
.367a	98		tya				tya
.367b	48		pha				pha
.367c	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.367e	d0 09		bne $3689			bne 	_ASSDone
.3680	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3682	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3684	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3686	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3687	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3689					_ASSDone:
.3689	38		sec				sec 								; allocate downwards enough memory
.368a	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.368c	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.368e	85 39		sta $39				sta 	softMemAlloc
.3690	a5 3a		lda $3a				lda 	softMemAlloc+1
.3692	e9 00		sbc #$00			sbc 	#0
.3694	85 3a		sta $3a				sta 	softMemAlloc+1
.3696	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3698	a8		tay				tay
.3699	91 39		sta ($39),y			sta 	(softMemAlloc),y
.369b	68		pla				pla
.369c	a8		tay				tay
.369d	60		rts				rts
.369e					WriteSoftString:
.369e	84 32		sty $32				sty 	tempShort 					; save Y
.36a0	48		pha				pha 								; save character on stack
.36a1	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.36a3	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.36a5	18		clc				clc
.36a6	69 01		adc #$01			adc 	#1
.36a8	91 39		sta ($39),y			sta 	(softMemAlloc),y
.36aa	a8		tay				tay 								; offset in Y
.36ab	68		pla				pla 								; get char and write.
.36ac	91 39		sta ($39),y			sta 	(softMemAlloc),y
.36ae	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.36b0	60		rts				rts
.36b1					StrClone:
.36b1	aa		tax				tax 								; set up stack.
.36b2	98		tya				tya
.36b3	48		pha				pha
.36b4	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.36b6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.36b8	18		clc				clc
.36b9	69 01		adc #$01			adc 	#1
.36bb	20 78 36	jsr $3678			jsr 	AllocateSoftString 			; allocate soft memory
.36be	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.36c0	95 50		sta $50,x			sta 	esInt0,x
.36c2	a5 3a		lda $3a				lda 	softMemAlloc+1
.36c4	95 58		sta $58,x			sta 	esInt1,x
.36c6	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.36c8	95 60		sta $60,x			sta 	esInt2,x
.36ca	95 68		sta $68,x			sta 	esInt3,x
.36cc	a9 40		lda #$40			lda 	#$40 						; set type to string.
.36ce	95 48		sta $48,x			sta 	esType,x
.36d0	20 59 36	jsr $3659			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.36d3	68		pla				pla
.36d4	a8		tay				tay
.36d5	8a		txa				txa
.36d6	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.36d7					CaseString:
.36d7	48		pha				pha 								; save A and copy to X
.36d8	aa		tax				tax
.36d9	98		tya				tya
.36da	48		pha				pha
.36db	20 20 36	jsr $3620			jsr 	CopyStringTop 				; target string -> temp0
.36de	a0 00		ldy #$00			ldy 	#0
.36e0	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.36e2	18		clc				clc
.36e3	69 01		adc #$01			adc 	#1 							; one more for length byte
.36e5	20 78 36	jsr $3678			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.36e8	20 6f 36	jsr $366f			jsr 	CopySoftToStack 			; copy that to the stack.
.36eb	a0 00		ldy #$00			ldy 	#0
.36ed	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.36ef	aa		tax				tax
.36f0					_CSCopy:
.36f0	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.36f2	f0 24		beq $3718			beq 	_CSExit
.36f4	ca		dex				dex
.36f5	c8		iny				iny
.36f6	68		pla				pla 								; check direction
.36f7	48		pha				pha
.36f8	f0 0c		beq $3706			beq 	_CSUpper
.36fa	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.36fc	c9 41		cmp #$41			cmp 	#"A"
.36fe	90 12		bcc $3712			bcc 	_CSWrite
.3700	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3702	b0 0e		bcs $3712			bcs 	_CSWrite
.3704	90 0a		bcc $3710			bcc 	_CSFlipWrite
.3706					_CSUpper:
.3706	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3708	c9 61		cmp #$61			cmp 	#"a"
.370a	90 06		bcc $3712			bcc 	_CSWrite
.370c	c9 7b		cmp #$7b			cmp 	#"z"+1
.370e	b0 02		bcs $3712			bcs 	_CSWrite
.3710					_CSFlipWrite:
.3710	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3712					_CSWrite:
.3712	20 9e 36	jsr $369e			jsr 	WriteSoftString 			; add to soft string.
.3715	4c f0 36	jmp $36f0			jmp 	_CSCopy
.3718					_CSExit:
.3718	68		pla				pla
.3719	a8		tay				tay
.371a	68		pla				pla
.371b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.371c					StringSubstring:
.371c	48		pha				pha
.371d	aa		tax				tax 								; access stack.
.371e	98		tya				tya
.371f	48		pha				pha
.3720	20 20 36	jsr $3620			jsr 	CopyStringTop 				; point temp0 to the string.
.3723	a0 00		ldy #$00			ldy 	#0 							; get length.
.3725	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3727	85 2c		sta $2c				sta 	temp1
.3729	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.372b	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.372d	f0 02		beq $3731			beq 	_SSBOkay
.372f	b0 2a		bcs $375b			bcs 	_SSBReturnNull
.3731					_SSBOkay:
.3731	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3733	18		clc				clc
.3734	69 01		adc #$01			adc 	#1
.3736	38		sec				sec
.3737	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3739	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.373b	90 02		bcc $373f			bcc		_SSBTrunc
.373d	b5 52		lda $52,x			lda 	esInt0+2,x
.373f					_SSBTrunc:
.373f	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3741	18		clc				clc
.3742	69 01		adc #$01			adc 	#1 							; add 1
.3744	20 78 36	jsr $3678			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3747	20 6f 36	jsr $366f			jsr 	CopySoftToStack 			; copy that to the stack.
.374a	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.374c					_SSBCopyLoop:
.374c	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.374e	f0 0e		beq $375e			beq 	_SSBExit
.3750	c6 2d		dec $2d				dec 	temp1+1
.3752	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3754	20 9e 36	jsr $369e			jsr 	WriteSoftString
.3757	c8		iny				iny
.3758	4c 4c 37	jmp $374c			jmp 	_SSBCopyLoop
.375b					_SSBReturnNull:
.375b	20 62 37	jsr $3762			jsr 	ReturnNull
.375e					_SSBExit:
.375e	68		pla				pla
.375f	a8		tay				tay
.3760	68		pla				pla
.3761	60		rts				rts
.3762					ReturnNull:
.3762	a9 00		lda #$00			lda 	#0 							; clear null string
.3764	8d ce 0a	sta $0ace			sta 	NullString
.3767	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3769	95 50		sta $50,x			sta 	esInt0,x
.376b	a9 0a		lda #$0a			lda 	#NullString >> 8
.376d	95 58		sta $58,x			sta 	esInt1,x
.376f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce0					srcStrLen:
>0ce0							.fill 	1
.3770					StringWrite:
.3770	aa		tax				tax
.3771	48		pha				pha
.3772	98		tya				tya
.3773	48		pha				pha
.3774	20 9b 37	jsr $379b			jsr 	CheckOverwriteCurrent
.3777	b0 0d		bcs $3786			bcs		_SWCopyCurrent
.3779	20 d9 37	jsr $37d9			jsr 	RequiresConcretion
.377c	90 0e		bcc $378c			bcc 	_SWWriteReference
.377e	20 3c 38	jsr $383c			jsr 	CheckSpecialConcretion
.3781	b0 09		bcs $378c			bcs 	_SWWriteReference
.3783	20 ed 37	jsr $37ed			jsr 	AllocateHardMemory
.3786					_SWCopyCurrent:
.3786	20 20 38	jsr $3820			jsr 	CopyStringToHardMemory
.3789	4c 97 37	jmp $3797			jmp 	_SWExit
.378c					_SWWriteReference
.378c	a0 00		ldy #$00			ldy 	#0
.378e	a5 2a		lda $2a				lda 	temp0
.3790	91 2c		sta ($2c),y			sta 	(temp1),y
.3792	c8		iny				iny
.3793	a5 2b		lda $2b				lda 	temp0+1
.3795	91 2c		sta ($2c),y			sta 	(temp1),y
.3797					_SWExit:
.3797	68		pla				pla
.3798	a8		tay				tay
.3799	68		pla				pla
.379a	60		rts				rts
.379b					CheckOverwriteCurrent:
.379b	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.379d	b5 59		lda $59,x			lda 	esInt1+1,x
.379f	85 2b		sta $2b				sta 	temp0+1
.37a1	b5 51		lda $51,x			lda 	esInt0+1,x
.37a3	85 2a		sta $2a				sta 	temp0
.37a5	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.37a7	8d e0 0c	sta $0ce0			sta 	srcStrLen
.37aa	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.37ac	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.37ae	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.37b0	85 2d		sta $2d				sta 	temp1+1
.37b2	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.37b4	b1 2c		lda ($2c),y			lda 	(temp1),y
.37b6	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.37b8	90 1b		bcc $37d5			bcc 	_COCFail 				; in hard memory.
.37ba	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.37bc	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.37be	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.37c0	85 2e		sta $2e				sta 	temp2
.37c2	c8		iny				iny
.37c3	b1 2c		lda ($2c),y			lda 	(temp1),y
.37c5	e9 00		sbc #$00			sbc 	#0
.37c7	85 2f		sta $2f				sta 	temp2+1
.37c9	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.37cb	b1 2e		lda ($2e),y			lda 	(temp2),y
.37cd	38		sec				sec  							; maximum character capacity.
.37ce	e9 02		sbc #$02			sbc 	#2
.37d0	cd e0 0c	cmp $0ce0			cmp 	srcStrLen 				; if >= the required length
.37d3	b0 02		bcs $37d7			bcs 	_COCCanReuse
.37d5					_COCFail:
.37d5	18		clc				clc
.37d6	60		rts				rts
.37d7					_COCCanReuse:
.37d7	38		sec				sec
.37d8	60		rts				rts
.37d9					RequiresConcretion:
.37d9	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.37db	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.37dd	b0 0a		bcs $37e9			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.37df	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.37e1	f0 08		beq $37eb			beq 	_RCFail 				; if not, this cannot be soft memory.
.37e3	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.37e5	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.37e7	90 02		bcc $37eb			bcc 	_RCFail 				; so concreting
.37e9					_RCSucceed:
.37e9	38		sec				sec
.37ea	60		rts				rts
.37eb					_RCFail:
.37eb	18		clc				clc
.37ec	60		rts				rts
.37ed					AllocateHardMemory:
.37ed	98		tya				tya
.37ee	48		pha				pha
.37ef	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; characters in string
.37f2	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.37f4	b0 04		bcs $37fa			bcs 	_AHMSetMax 				; max out that amount.
.37f6	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.37f8	90 02		bcc $37fc			bcc 	_AHMIsOkay
.37fa					_AHMSetMax:
.37fa	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.37fc					_AHMIsOkay:
.37fc	48		pha				pha	 							; save size to be allocated
.37fd	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.37ff	38		sec				sec  							; and copy result to TOS as target address.
.3800	65 33		adc $33				adc 	highMemory
.3802	85 33		sta $33				sta 	highMemory
.3804	a5 34		lda $34				lda 	highMemory+1
.3806	69 ff		adc #$ff			adc 	#$FF
.3808	85 34		sta $34				sta 	highMemory+1
.380a	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.380c	68		pla				pla 							; get the total size of the storage block
.380d	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.380f	18		clc				clc
.3810	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3812	69 01		adc #$01			adc 	#1
.3814	91 2c		sta ($2c),y			sta 	(temp1),y
.3816	a5 34		lda $34				lda 	highMemory+1
.3818	69 00		adc #$00			adc 	#0
.381a	c8		iny				iny
.381b	91 2c		sta ($2c),y			sta 	(temp1),y
.381d	68		pla				pla
.381e	a8		tay				tay
.381f	60		rts				rts
.3820					CopyStringToHardMemory:
.3820	98		tya				tya
.3821	48		pha				pha
.3822	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3824	b1 2c		lda ($2c),y			lda 	(temp1),y
.3826	85 2e		sta $2e				sta 	temp2
.3828	c8		iny				iny
.3829	b1 2c		lda ($2c),y			lda 	(temp1),y
.382b	85 2f		sta $2f				sta 	temp2+1
.382d	ac e0 0c	ldy $0ce0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3830					_CSTHMLoop:
.3830	b1 2a		lda ($2a),y			lda 	(temp0),y
.3832	91 2e		sta ($2e),y			sta 	(temp2),y
.3834	88		dey				dey
.3835	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3837	d0 f7		bne $3830			bne 	_CSTHMLoop
.3839	68		pla				pla
.383a	a8		tay				tay
.383b	60		rts				rts
.383c					CheckSpecialConcretion:
.383c	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; check string is null e.g. length = 0
.383f	f0 02		beq $3843			beq 	_CSCNullString
.3841	18		clc				clc
.3842	60		rts				rts
.3843					_CSCNullString:
.3843	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3845	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3848	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.384a	85 2a		sta $2a				sta 	temp0
.384c	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.384e	85 2b		sta $2b				sta 	1+(temp0)
.3850	38		sec				sec
.3851	60		rts				rts

;******  Return to file: string/string.asm

.3852					stringHandler:
.3852	7c 55 38	jmp ($3855,x)			jmp 	(stringVectors,x)
.3855					stringVectors:
>3855	67 38					.word _DummyControlHandler ; index 0
>3857	b5 35					.word StringChrs           ; index 2
>3859	b1 36					.word StrClone             ; index 4
>385b	29 36					.word StringConcat         ; index 6
>385d	c4 35					.word StringNull           ; index 8
>385f	e0 35					.word STRCompare           ; index 10
>3861	d7 36					.word CaseString           ; index 12
>3863	1c 37					.word StringSubstring      ; index 14
>3865	70 37					.word StringWrite          ; index 16
.3867					_DummyControlHandler:
.3867	60		rts			rts

;******  Return to file: basic.asm

.3868					section_end_string:
.3868					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce1					deTokeniseVector:
>0ce1							.fill 	2
.0ce3					lastCharacterClass:
>0ce3							.fill 	1
.0ce4					indent:
>0ce4							.fill 	1
.3868					ListLine:
.3868	48		pha				pha								; enter here to list to console. sets the output vector
.3869	a9 a0		lda #$a0			lda 	#(deTokenPrint) & $FF
.386b	8d e1 0c	sta $0ce1			sta 	deTokeniseVector
.386e	a9 39		lda #$39			lda 	#(deTokenPrint) >> 8
.3870	8d e2 0c	sta $0ce2			sta 	1+(deTokeniseVector)
.3873	68		pla				pla
.3874					Detokenise:
.3874	18		clc				clc 							; space required for line number.
.3875	69 06		adc #$06			adc 	#6
.3877	8d e4 0c	sta $0ce4			sta 	indent
.387a	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.387c	8d e3 0c	sta $0ce3			sta 	lastCharacterClass
.387f	a2 02		ldx #$02			ldx 	#2
.3881	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3883	95 60		sta $60,x			sta 	esInt2,x
.3885	95 68		sta $68,x			sta 	esInt3,x
.3887	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3889	b1 28		lda ($28),y			lda 	(codePtr),y
.388b	95 50		sta $50,x			sta 	esInt0,x
.388d	c8		iny				iny
.388e	b1 28		lda ($28),y			lda 	(codePtr),y
.3890	95 58		sta $58,x			sta 	esInt1,x
.3892	a9 84		lda #$84			lda 	#LTYLineNumber
.3894	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.3897	a9 0a		lda #$0a			lda 	#10 					; base 10
.3899	20 3f 39	jsr $393f			jsr 	DTPrintInteger 			; print as integer.
.389c	a0 00		ldy #$00			ldy 	#0 						; get length
.389e	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.38a0	aa		tax				tax
.38a1					_DTPadOut:
.38a1	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.38a3	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.38a6	e8		inx				inx
.38a7	ec e4 0c	cpx $0ce4			cpx 	indent
.38aa	d0 f5		bne $38a1			bne 	_DTPadOut
.38ac	a0 03		ldy #$03			ldy 	#3 						; start position.
.38ae					_DTListLoop:
.38ae	b1 28		lda ($28),y			lda 	(codePtr),y
.38b0	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.38b2	f0 5e		beq $3912			beq 	_DTIsString
.38b4	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.38b6	f0 56		beq $390e			beq 	_DTIsFloat
.38b8	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.38ba	f0 16		beq $38d2			beq 	_DTHexConstant
.38bc	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.38be	d0 06		bne $38c6			bne 	_DTNotEnd
.38c0	a9 ff		lda #$ff			lda 	#255 					; print CR
.38c2	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.38c5	60		rts				rts
.38c6					_DTNotEnd:
.38c6	c9 00		cmp #$00			cmp 	#0
.38c8	30 38		bmi $3902			bmi 	_DTIsToken
.38ca	c9 40		cmp #$40			cmp 	#$40
.38cc	90 3a		bcc $3908			bcc 	_DTIsIdentifier
.38ce	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.38d0	d0 0d		bne $38df			bne 	_DTConstant
.38d2					_DTHexConstant:
.38d2	a9 26		lda #$26			lda 	#"&"
.38d4	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.38d7	c8		iny				iny
.38d8	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.38da	20 bc 39	jsr $39bc			jsr 	DTSwitchMode
.38dd	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.38df					_DTConstant:
.38df	48		pha				pha
.38e0	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.38e2	20 bc 39	jsr $39bc			jsr 	DTSwitchMode
.38e5	a9 86		lda #$86			lda 	#LTYConstant
.38e7	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.38ea	a2 02		ldx #$02			ldx 	#2 						; get its value
.38ec	8a		txa				txa
.38ed	a2 10		ldx #$10		ldx	#16
.38ef	20 95 35	jsr $3595		jsr	mainHandler
.38f2	aa		tax				tax
.38f3	68		pla				pla 							; get base back
.38f4	85 32		sta $32				sta 	tempShort
.38f6	98		tya				tya
.38f7	48		pha				pha
.38f8	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.38fa	20 3f 39	jsr $393f			jsr 	DTPrintInteger
.38fd	68		pla				pla
.38fe	a8		tay				tay
.38ff	4c ae 38	jmp $38ae			jmp 	_DTListLoop
.3902					_DTIsToken:
.3902	20 15 3a	jsr $3a15			jsr 	DTDecodeToken
.3905	4c ae 38	jmp $38ae			jmp 	_DTListLoop
.3908					_DTIsIdentifier:
.3908	20 ce 39	jsr $39ce			jsr 	DTIdentifier
.390b	4c ae 38	jmp $38ae			jmp 	_DTListLoop
.390e					_DTIsFloat:
>390e	db						.byte 	$DB
.390f	4c 0e 39	jmp $390e			jmp 	_DTIsFloat
.3912					_DTIsString:
.3912	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3914	20 bc 39	jsr $39bc			jsr 	DTSwitchMode
.3917	a9 81		lda #$81			lda 	#LTYString
.3919	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.391c	a9 22		lda #$22			lda 	#'"'						; open quote
.391e	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.3921	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3923	8a		txa				txa
.3924	a2 10		ldx #$10		ldx	#16
.3926	20 95 35	jsr $3595		jsr	mainHandler
.3929	aa		tax				tax
.392a	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.392c	85 2a		sta $2a				sta 	temp0
.392e	b5 58		lda $58,x			lda 	esInt1,x
.3930	85 2b		sta $2b				sta 	temp0+1
.3932	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3934	20 51 39	jsr $3951			jsr 	DTPrintLengthPrefix
.3937	a9 22		lda #$22			lda 	#'"'
.3939	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.393c	4c ae 38	jmp $38ae			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce5					tPrintCount:
>0ce5							.fill 	1
.393f					DTPrintInteger:
.393f	48		pha				pha									; save base
.3940	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3942	85 2a		sta $2a				sta 	temp0
.3944	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3946	85 2b		sta $2b				sta 	1+(temp0)
.3948	68		pla				pla
.3949	a8		tay				tay
.394a	8a		txa				txa
.394b	a2 12		ldx #$12		ldx	#18
.394d	20 95 35	jsr $3595		jsr	mainHandler
.3950	aa		tax				tax 								; then drop through here.
.3951					DTPrintLengthPrefix:
.3951	aa		tax				tax 								; A = 0 = don't case convert.
.3952	98		tya				tya
.3953	48		pha				pha
.3954	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3956	b1 2a		lda ($2a),y			lda 	(temp0),y
.3958	8d e5 0c	sta $0ce5			sta 	tPrintCount
.395b	f0 1b		beq $3978			beq 	_DTPLPExit 					; empty string
.395d					_DTPLPLoop:
.395d	c8		iny				iny 								; get next.
.395e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3960	29 7f		and #$7f			and 	#$7F
.3962	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3964	f0 0a		beq $3970			beq 	_DTPLPNoCase
.3966	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3968	90 06		bcc $3970			bcc 	_DTPLPNoCase
.396a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.396c	b0 02		bcs $3970			bcs 	_DTPLPNoCase
.396e	49 20		eor #$20			eor 	#"A"^"a"
.3970					_DTPLPNoCase
.3970	20 7b 39	jsr $397b			jsr 	ListOutputCharacter 		; call handler
.3973	ce e5 0c	dec $0ce5			dec 	tPrintCount 				; do all the characters
.3976	d0 e5		bne $395d			bne 	_DTPLPLoop
.3978					_DTPLPExit:
.3978	68		pla				pla
.3979	a8		tay				tay
.397a	60		rts				rts
.397b					ListOutputCharacter:
.397b	85 32		sta $32				sta 	tempShort
.397d	48		pha				pha
.397e	8a		txa				txa
.397f	48		pha				pha
.3980	98		tya				tya
.3981	48		pha				pha
.3982	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3984	c9 20		cmp #$20			cmp 	#32
.3986	b0 0c		bcs $3994			bcs		_LOCHiBit
.3988	09 40		ora #$40			ora 	#64 						; conversion
.398a	c9 40		cmp #$40			cmp 	#64							; make l/c
.398c	f0 06		beq $3994			beq 	_LOCHiBit
.398e	c9 5b		cmp #$5b			cmp 	#65+26
.3990	b0 02		bcs $3994			bcs 	_LOCHiBit
.3992	69 20		adc #$20			adc 	#32
.3994					_LOCHiBit:
.3994	20 9d 39	jsr $399d			jsr 	_LOCCallVector				; call o/p handler routine
.3997	68		pla				pla
.3998	a8		tay				tay
.3999	68		pla				pla
.399a	aa		tax				tax
.399b	68		pla				pla
.399c					_LOCExit:
.399c	60		rts				rts
.399d					_LOCCallVector:
.399d	6c e1 0c	jmp ($0ce1)			jmp 	(deTokeniseVector)
.39a0					deTokenPrint:
.39a0	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.39a2	30 06		bmi $39aa			bmi 	_dtpInk
.39a4	a2 16		ldx #$16		ldx	#22
.39a6	20 f6 14	jsr $14f6		jsr	deviceHandler
.39a9	60		rts				rts
.39aa	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.39ac	f0 08		beq $39b6			beq 	_dtpCR						; except $FF => CRLF
.39ae	29 07		and #$07			and 	#7
.39b0	a2 08		ldx #$08		ldx	#8
.39b2	20 f6 14	jsr $14f6		jsr	deviceHandler
.39b5	60		rts				rts
.39b6					_dtpCR:
.39b6	a2 06		ldx #$06		ldx	#6
.39b8	20 f6 14	jsr $14f6		jsr	deviceHandler
.39bb	60		rts				rts
.39bc					DTSwitchMode:
.39bc	cd e3 0c	cmp $0ce3			cmp 	LastCharacterClass 			; if changed, update character class
.39bf	f0 04		beq $39c5			beq 	_DTSMNoChange
.39c1	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.39c4					_DTSMExit:
.39c4	60		rts				rts
.39c5					_DTSMNoChange:
.39c5	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.39c7	f0 fb		beq $39c4			beq 	_DTSMExit 					; need a space.
.39c9	a9 20		lda #$20			lda 	#" "
.39cb	4c 7b 39	jmp $397b			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.39ce					DTIdentifier:
.39ce	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.39d0	20 bc 39	jsr $39bc			jsr 	DTSwitchMode
.39d3	a9 87		lda #$87			lda 	#LTYIdentifier
.39d5	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.39d8					_DTILoop:
.39d8	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.39da	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.39dc	d0 02		bne $39e0			bne 	_DTINotUS
.39de	a9 5f		lda #$5f			lda 	#"_"
.39e0					_DTINotUS:
.39e0	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.39e3	c8		iny				iny
.39e4	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.39e6	c9 3a		cmp #$3a			cmp 	#$3A
.39e8	90 ee		bcc $39d8			bcc 	_DTILoop
.39ea	c8		iny				iny
.39eb	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.39ed	f0 25		beq $3a14			beq 	_DTIExit 					; no postfix.
.39ef	48		pha				pha
.39f0	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.39f2	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.39f5	a9 82		lda #$82			lda 	#LTYPunctuation
.39f7	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.39fa	68		pla				pla
.39fb	c9 3b		cmp #$3b			cmp 	#$3B
.39fd	f0 10		beq $3a0f			beq 	_DTIArray
.39ff	4a		lsr a				lsr 	a 							; array flag in C
.3a00	08		php				php
.3a01	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3a03	f0 02		beq $3a07			beq 	_DTIDollar
.3a05	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3a07					_DTIDollar:
.3a07	49 24		eor #$24			eor 	#"$"
.3a09	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.3a0c	28		plp				plp
.3a0d	90 05		bcc $3a14			bcc 	_DTIExit
.3a0f					_DTIArray:
.3a0f	a9 28		lda #$28			lda 	#"("
.3a11	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.3a14					_DTIExit:
.3a14	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3a15					DTDecodeToken:
.3a15	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3a17	b1 28		lda ($28),y			lda 	(codePtr),y
.3a19	c9 84		cmp #$84			cmp 	#$84
.3a1b	b0 05		bcs $3a22			bcs 	_DTNotShift
.3a1d	29 03		and #$03			and 	#3 							; get the shift 1..3
.3a1f	0a		asl a				asl 	a 							; put 2 x in X
.3a20	aa		tax				tax
.3a21	c8		iny				iny
.3a22					_DTNotShift:
.3a22	bd 24 3d	lda $3d24,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3a25	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3a27	bd 25 3d	lda $3d25,x			lda 	TokenTableAddress+1,x
.3a2a	85 2b		sta $2b				sta 	temp0+1
.3a2c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3a2e	c8		iny				iny 								; consume it.
.3a2f	aa		tax				tax
.3a30	98		tya				tya
.3a31	48		pha				pha
.3a32					_DTFindText:
.3a32	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3a34	f0 11		beq $3a47			beq 	_DTFoundText
.3a36	ca		dex				dex
.3a37	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3a39	38		sec				sec
.3a3a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a3c	65 2a		adc $2a				adc 	temp0
.3a3e	85 2a		sta $2a				sta 	temp0
.3a40	90 f0		bcc $3a32			bcc 	_DTFindText
.3a42	e6 2b		inc $2b				inc 	temp0+1
.3a44	4c 32 3a	jmp $3a32			jmp 	_DTFindText
.3a47					_DTFoundText:
.3a47	a0 01		ldy #$01			ldy 	#1 							; get first character
.3a49	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a4b	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3a4d	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3a4f	90 11		bcc $3a62			bcc 	_DTIsPunctuation
.3a51	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a53	b0 0d		bcs $3a62			bcs 	_DTIsPunctuation
.3a55	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3a57	20 bc 39	jsr $39bc			jsr 	DTSwitchMode
.3a5a	a9 83		lda #$83			lda 	#LTYKeyword
.3a5c	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.3a5f	4c 6c 3a	jmp $3a6c			jmp 	_DTPrint
.3a62					_DTIsPunctuation:
.3a62	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3a64	20 bc 39	jsr $39bc			jsr 	DTSwitchMode
.3a67	a9 82		lda #$82			lda 	#LTYPunctuation
.3a69	20 7b 39	jsr $397b			jsr 	ListOutputCharacter
.3a6c					_DTPrint:
.3a6c	a9 01		lda #$01			lda 	#1 							; fix case.
.3a6e	20 51 39	jsr $3951			jsr 	DTPrintLengthPrefix 		; print it out.
.3a71	a0 00		ldy #$00			ldy 	#0
.3a73	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a75	a8		tay				tay
.3a76	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a78	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3a7a	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3a7c	90 04		bcc $3a82			bcc 	_DTIsNowPunctuation
.3a7e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a80	90 05		bcc $3a87			bcc 	_DTPExit
.3a82					_DTIsNowPunctuation:
.3a82	a9 01		lda #$01			lda 	#1
.3a84	8d e3 0c	sta $0ce3			sta		LastCharacterClass
.3a87					_DTPExit:
.3a87	68		pla				pla
.3a88	a8		tay				tay
.3a89	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce6					currentSet:
>0ce6							.fill 	1
.3a8a					TokenSearch:
.3a8a	8a		txa				txa
.3a8b	48		pha				pha
.3a8c	98		tya				tya
.3a8d	48		pha				pha
.3a8e	a9 00		lda #$00			lda 	#0
.3a90	8d e6 0c	sta $0ce6			sta 	currentSet
.3a93					_TSLoop:
.3a93	ad e6 0c	lda $0ce6			lda 	currentSet 					; 2 x currentset in X
.3a96	0a		asl a				asl 	a
.3a97	aa		tax				tax
.3a98	bd 24 3d	lda $3d24,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3a9b	85 2a		sta $2a				sta 	temp0
.3a9d	bd 25 3d	lda $3d25,x			lda 	TokenTableAddress+1,x
.3aa0	85 2b		sta $2b				sta 	temp0+1
.3aa2	20 c9 3a	jsr $3ac9			jsr 	TokenSearchOne 				; search one table
.3aa5	b0 0d		bcs $3ab4			bcs 	_TSFound 					; found a token.
.3aa7	ee e6 0c	inc $0ce6			inc 	currentSet 					; next set
.3aaa	ad e6 0c	lda $0ce6			lda 	currentSet
.3aad	c9 04		cmp #$04			cmp 	#4
.3aaf	d0 e2		bne $3a93			bne 	_TSLoop 					; back if not done all four.
.3ab1	18		clc				clc 								; clear carry and exit
.3ab2	90 10		bcc $3ac4			bcc 	_TSExit
.3ab4					_TSFound:
.3ab4	48		pha				pha 								; save token
.3ab5	ad e6 0c	lda $0ce6			lda 	currentSet					; if set zero no shift
.3ab8	f0 05		beq $3abf			beq 	_TSNoShift
.3aba	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3abc	20 7a 3b	jsr $3b7a			jsr 	TokenWrite
.3abf					_TSNoShift:
.3abf	68		pla				pla 								; get token back
.3ac0	20 7a 3b	jsr $3b7a			jsr 	TokenWrite 					; write it
.3ac3	38		sec				sec 								; carry set indicating success
.3ac4					_TSExit:
.3ac4	68		pla				pla
.3ac5	a8		tay				tay
.3ac6	68		pla				pla
.3ac7	aa		tax				tax
.3ac8	60		rts				rts
.3ac9					TokenSearchOne:
.3ac9	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3acb					_TSOLoop:
.3acb	a0 00		ldy #$00			ldy 	#0
.3acd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3acf	f0 26		beq $3af7			beq 	_TSOFail 					; if zero, end of table
.3ad1	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3ad4	f0 11		beq $3ae7			beq 	_TSOCheckText
.3ad6					_TSONext:
.3ad6	e8		inx				inx 								; bump token
.3ad7	a0 00		ldy #$00			ldy 	#0							; get length
.3ad9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3adb	38		sec				sec
.3adc	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3ade	85 2a		sta $2a				sta 	temp0
.3ae0	90 e9		bcc $3acb			bcc 	_TSOLoop
.3ae2	e6 2b		inc $2b				inc 	temp0+1
.3ae4	4c cb 3a	jmp $3acb			jmp 	_TSOLoop
.3ae7					_TSOCheckText:
.3ae7	a8		tay				tay 								; compare length downto 1.
.3ae8					_TSOCheckLoop:
.3ae8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3aea	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3aed	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3aef	d0 e5		bne $3ad6			bne 	_TSONext 					; different goto next.
.3af1	88		dey				dey 								; do all
.3af2	d0 f4		bne $3ae8			bne 	_TSOCheckLoop
.3af4	8a		txa				txa 								; return token in A and carry set
.3af5	38		sec				sec
.3af6	60		rts				rts
.3af7					_TSOFail:
.3af7	18		clc				clc
.3af8	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3af9					TokTest:
.3af9	a2 ff		ldx #$ff				ldx 	#$FF
.3afb	9a		txs					txs
.3afc	a9 19		lda #$19			lda 	#(TokenText1) & $FF
.3afe	85 28		sta $28				sta 	codePtr
.3b00	a9 3b		lda #$3b			lda 	#(TokenText1) >> 8
.3b02	85 29		sta $29				sta 	1+(codePtr)
.3b04	20 19 3b	jsr $3b19				jsr 	Tokenise
.3b07	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3b09	bd 19 3b	lda $3b19,x	_TokCheck:	lda 	TokenBytes1,x
.3b0c	dd ea 0c	cmp $0cea,x				cmp 	tokenBuffer,x
.3b0f	d0 fe		bne $3b0f	_TokFail:	bne 	_TokFail	 		; error.
.3b11	e8		inx					inx
.3b12	c9 80		cmp #$80				cmp 	#$80
.3b14	d0 f3		bne $3b09				bne 	_TokCheck
.3b16	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3b19					TokenText1:
.3b19					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0ce7					tokenHeader:
>0ce7							.fill 	3
.0cea					tokenBuffer:
>0cea							.fill 	256
.0dea					tokenBufferIndex:
>0dea							.fill 	1
.3b19					Tokenise:
.3b19	20 93 3b	jsr $3b93			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3b1c					TokeniseASCIIZ:
.3b1c	20 a4 3b	jsr $3ba4			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3b1f	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3b21	8d ea 0d	sta $0dea			sta 	tokenBufferIndex
.3b24	a8		tay				tay 								; start pointer
.3b25	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3b27	8d ea 0c	sta $0cea			sta 	tokenBuffer
.3b2a					_TokLoop:
.3b2a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3b2c	f0 46		beq $3b74			beq 	_TokExit 					; if zero, then exit.
.3b2e	c8		iny				iny 								; skip over spaces.
.3b2f	c9 20		cmp #$20			cmp 	#" "
.3b31	f0 f7		beq $3b2a			beq 	_TokLoop
.3b33	88		dey				dey 								; point back to character.
.3b34	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3b36	f0 18		beq $3b50			beq 	_TokHexConst
.3b38	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3b3a	f0 23		beq $3b5f			beq 	_TokQString
.3b3c	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3b3e	b0 26		bcs $3b66			bcs 	_TokPunctuation
.3b40	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3b42	b0 29		bcs $3b6d			bcs 	_TokIdentifier
.3b44	c9 3a		cmp #$3a			cmp 	#"9"+1
.3b46	b0 1e		bcs $3b66			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3b48	c9 30		cmp #$30			cmp 	#"0"
.3b4a	90 1a		bcc $3b66			bcc 	_TokPunctuation 			; < 0, punctuation.
.3b4c	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3b4e	d0 08		bne $3b58			bne 	_TokConst
.3b50					_TokHexConst:
.3b50	c8		iny				iny									; consume token.
.3b51	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3b53	20 7a 3b	jsr $3b7a			jsr 	TokenWrite
.3b56	a9 10		lda #$10			lda 	#16
.3b58					_TokConst:
.3b58	20 62 3c	jsr $3c62			jsr 	TokeniseInteger
.3b5b	b0 cd		bcs $3b2a			bcs 	_TokLoop
.3b5d	90 18		bcc $3b77			bcc 	_TokFail
.3b5f					_TokQString:
.3b5f	20 f8 3c	jsr $3cf8			jsr 	TokeniseString
.3b62	b0 c6		bcs $3b2a			bcs 	_TokLoop
.3b64	90 11		bcc $3b77			bcc 	_TokFail
.3b66					_TokPunctuation:
.3b66	20 d7 3c	jsr $3cd7			jsr 	TokenisePunctuation
.3b69	b0 bf		bcs $3b2a			bcs 	_TokLoop
.3b6b	90 0a		bcc $3b77			bcc 	_TokFail
.3b6d					_TokIdentifier:
.3b6d	20 d3 3b	jsr $3bd3			jsr 	TokeniseIdentifier
.3b70	b0 b8		bcs $3b2a			bcs 	_TokLoop
.3b72	90 03		bcc $3b77			bcc 	_TokFail
.3b74					_TokExit:
.3b74	a9 01		lda #$01			lda 	#1
.3b76	60		rts				rts
.3b77					_TokFail:
.3b77	a9 00		lda #$00			lda 	#0
.3b79	60		rts				rts
.3b7a					TokenWrite:
.3b7a	85 32		sta $32				sta 	tempShort 					; save XA
.3b7c	48		pha				pha
.3b7d	8a		txa				txa
.3b7e	48		pha				pha
.3b7f	a5 32		lda $32				lda 	tempShort
.3b81	ae ea 0d	ldx $0dea			ldx 	tokenBufferIndex 			; geet index
.3b84	9d ea 0c	sta $0cea,x			sta 	tokenBuffer,x 				; write byte to buffer
.3b87	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3b89	9d eb 0c	sta $0ceb,x			sta 	tokenBuffer+1,x
.3b8c	ee ea 0d	inc $0dea			inc 	tokenBufferIndex 			; bump index
.3b8f	68		pla				pla
.3b90	aa		tax				tax
.3b91	68		pla				pla
.3b92	60		rts				rts
.3b93					TokeniseMakeASCIIZ:
.3b93	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3b95	b1 28		lda ($28),y			lda 	(codePtr),y
.3b97	a8		tay				tay
.3b98	c8		iny				iny 								; +1, the NULL goes here.
.3b99	a9 00		lda #$00			lda 	#0
.3b9b	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3b9d	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3b9f	d0 02		bne $3ba3			bne 	_TMKAExit
.3ba1	e6 29		inc $29				inc 	codePtr+1
.3ba3					_TMKAExit:
.3ba3	60		rts				rts
.3ba4					TokeniseFixCase:
.3ba4	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3ba6	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3ba8					_TFCFlipQ:
.3ba8	8a		txa				txa
.3ba9	49 01		eor #$01			eor 	#1
.3bab	aa		tax				tax
.3bac					_TFCLoop:
.3bac	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3bae	f0 22		beq $3bd2			beq 	_TFCExit 					; if zero exit.
.3bb0	c9 20		cmp #$20			cmp 	#32 						; if control
.3bb2	90 1a		bcc $3bce			bcc 	_TFCControl
.3bb4	c8		iny				iny 								; preconsume
.3bb5	c9 22		cmp #$22			cmp 	#'"'
.3bb7	f0 ef		beq $3ba8			beq 	_TFCFlipQ
.3bb9	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3bbb	90 ef		bcc $3bac			bcc 	_TFCLoop
.3bbd	c9 7b		cmp #$7b			cmp 	#"z"+1
.3bbf	b0 eb		bcs $3bac			bcs 	_TFCLoop
.3bc1	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3bc3	d0 e7		bne $3bac			bne 	_TFCLoop
.3bc5	88		dey				dey
.3bc6	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3bc8					_TFCWrite:
.3bc8	91 28		sta ($28),y			sta 	(codePtr),y
.3bca	c8		iny				iny
.3bcb	4c ac 3b	jmp $3bac			jmp 	_TFCLoop
.3bce					_TFCControl:
.3bce	a9 20		lda #$20			lda 	#" "
.3bd0	d0 f6		bne $3bc8			bne 	_TFCWrite
.3bd2					_TFCExit:
.3bd2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3bd3					TokeniseIdentifier:
.3bd3	a2 00		ldx #$00			ldx 	#0
.3bd5					_TICopyID:
.3bd5	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3bd7	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3bd9	f0 16		beq $3bf1			beq 	_TICopyUnderscore
.3bdb	c9 2e		cmp #$2e			cmp 	#"."
.3bdd	f0 14		beq $3bf3			beq 	_TICopyIn
.3bdf	c9 30		cmp #$30			cmp 	#"0"
.3be1	90 1b		bcc $3bfe			bcc 	_TIEndCopy
.3be3	c9 3a		cmp #$3a			cmp 	#"9"+1
.3be5	90 0c		bcc $3bf3			bcc 	_TICopyIn
.3be7	c9 41		cmp #$41			cmp 	#"A"
.3be9	90 13		bcc $3bfe			bcc 	_TIEndCopy
.3beb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3bed	b0 0f		bcs $3bfe			bcs		_TIEndCopy
.3bef	90 02		bcc $3bf3			bcc 	_TICopyIn
.3bf1					_TICopyUnderScore:
.3bf1	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3bf3					_TICopyIn:
.3bf3	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3bf4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3bf7	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bfa	c8		iny				iny 								; next character
.3bfb	4c d5 3b	jmp $3bd5			jmp 	_TICopyID 					; loop round
.3bfe					_TIEndCopy:
.3bfe	a9 24		lda #$24			lda 	#"$"
.3c00	20 55 3c	jsr $3c55			jsr 	TIDCheckCopy
.3c03	a9 23		lda #$23			lda 	#"#"
.3c05	20 55 3c	jsr $3c55			jsr 	TIDCheckCopy
.3c08	a9 28		lda #$28			lda 	#"("
.3c0a	20 55 3c	jsr $3c55			jsr 	TIDCheckCopy
.3c0d	20 8a 3a	jsr $3a8a			jsr 	TokenSearch 				; is it a token
.3c10	b0 41		bcs $3c53			bcs 	_TIExit 					; if so, then exit.
.3c12	98		tya				tya
.3c13	48		pha				pha
.3c14	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3c16	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3c19	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3c1c	c9 28		cmp #$28			cmp 	#"("
.3c1e	d0 02		bne $3c22			bne 	_TINotArray
.3c20	ca		dex				dex 								; yes, remove it and convert to array.
.3c21	c8		iny				iny
.3c22					_TINotArray:
.3c22	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3c25	c9 24		cmp #$24			cmp 	#"$"
.3c27	d0 03		bne $3c2c			bne 	_TINotString
.3c29	ca		dex				dex
.3c2a	c8		iny				iny
.3c2b	c8		iny				iny
.3c2c					_TINotString:
.3c2c	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3c2f	c9 23		cmp #$23			cmp 	#"#"
.3c31	d0 05		bne $3c38			bne 	_TINotFloat
.3c33	ca		dex				dex
.3c34	c8		iny				iny
.3c35	c8		iny				iny
.3c36	c8		iny				iny
.3c37	c8		iny				iny
.3c38					_TINotFloat:
.3c38	e8		inx				inx 								; write end marker for identifier.
.3c39	98		tya				tya
.3c3a	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3c3d	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3c40	a2 01		ldx #$01			ldx 	#1
.3c42					_TIOutput:
.3c42	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3c45	29 3f		and #$3f			and 	#$3F
.3c47	48		pha				pha
.3c48	20 7a 3b	jsr $3b7a			jsr 	TokenWrite
.3c4b	e8		inx				inx
.3c4c	68		pla				pla
.3c4d	c9 3a		cmp #$3a			cmp 	#$3A
.3c4f	90 f1		bcc $3c42			bcc 	_TIOutput
.3c51	68		pla				pla
.3c52	a8		tay				tay
.3c53					_TIExit:
.3c53	38		sec				sec 								; this can't fail.
.3c54	60		rts				rts
.3c55					TIDCheckCopy:
.3c55	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3c57	d0 08		bne $3c61			bne 	_TIDCCExit
.3c59	e8		inx				inx
.3c5a	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3c5d	8e cf 0a	stx $0acf			stx 	convertBuffer
.3c60	c8		iny				iny
.3c61					_TIDCCExit:
.3c61	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3c62					TokeniseInteger:
.3c62	85 2c		sta $2c				sta 	temp1 						; save base
.3c64	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3c66	8e cf 0a	stx $0acf			stx 	convertBuffer
.3c69					_TIGetChars:
.3c69	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3c6b	c9 30		cmp #$30			cmp 	#"0"
.3c6d	90 1f		bcc $3c8e			bcc 	_TIEndGet
.3c6f	c9 3a		cmp #$3a			cmp 	#"9"+1
.3c71	90 10		bcc $3c83			bcc 	_TIHaveChar
.3c73	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3c75	c9 0a		cmp #$0a			cmp 	#10
.3c77	f0 15		beq $3c8e			beq 	_TIEndGet
.3c79	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3c7b	c9 41		cmp #$41			cmp 	#"A"
.3c7d	90 0f		bcc $3c8e			bcc 	_TIEndGet
.3c7f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3c81	b0 0b		bcs $3c8e			bcs 	_TIEndGet
.3c83					_TIHaveChar:
.3c83	e8		inx				inx 								; write into buffer.
.3c84	8e cf 0a	stx $0acf			stx 	convertBuffer
.3c87	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3c8a	c8		iny				iny 								; next char
.3c8b	4c 69 3c	jmp $3c69			jmp 	_TIGetChars
.3c8e					_TIEndGet:
.3c8e	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3c90	f0 1c		beq $3cae			beq 	_TIFail
.3c92	98		tya				tya
.3c93	48		pha				pha
.3c94	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3c96	85 2a		sta $2a				sta 	temp0
.3c98	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3c9a	85 2b		sta $2b				sta 	1+(temp0)
.3c9c	a9 00		lda #$00			lda 	#0 							; stack level 0
.3c9e	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3ca0	a2 1a		ldx #$1a		ldx	#26
.3ca2	20 95 35	jsr $3595		jsr	mainHandler
.3ca5	68		pla				pla
.3ca6	a8		tay				tay
.3ca7	90 05		bcc $3cae			bcc 	_TIFail 					; didn't convert.
.3ca9	20 b0 3c	jsr $3cb0			jsr 	TIRecursiveOut 				; recursive output ?
.3cac	38		sec				sec
.3cad	60		rts				rts
.3cae					_TIFail:
.3cae	18		clc				clc
.3caf	60		rts				rts
.3cb0					TIRecursiveOut:
.3cb0	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3cb2	29 3f		and #$3f			and 	#$3F
.3cb4	09 40		ora #$40			ora 	#$40
.3cb6	48		pha				pha
.3cb7	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3cb9	29 c0		and #$c0			and 	#$C0
.3cbb	05 58		ora $58				ora 	esInt1
.3cbd	05 60		ora $60				ora 	esInt2
.3cbf	05 68		ora $68				ora 	esInt3
.3cc1	f0 10		beq $3cd3			beq 	_TIRONoRecursion
.3cc3	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3cc5					_TIROShift:
.3cc5	46 68		lsr $68				lsr 	esInt3
.3cc7	66 60		ror $60				ror 	esInt2
.3cc9	66 58		ror $58				ror 	esInt1
.3ccb	66 50		ror $50				ror 	esInt0
.3ccd	ca		dex				dex
.3cce	d0 f5		bne $3cc5			bne 	_TIROShift
.3cd0	20 b0 3c	jsr $3cb0			jsr 	TIRecursiveOut 				; call recursively
.3cd3					_TIRONoRecursion:
.3cd3	68		pla				pla 								; pull the old bit.
.3cd4	4c 7a 3b	jmp $3b7a			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3cd7					TokenisePunctuation:
.3cd7	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3cd9	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3cdc	c8		iny				iny
.3cdd	b1 28		lda ($28),y			lda 	(codePtr),y
.3cdf	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3ce2	c8		iny				iny 								; Y is +2
.3ce3	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3ce5	8d cf 0a	sta $0acf			sta 	convertBuffer
.3ce8	20 8a 3a	jsr $3a8a			jsr 	TokenSearch 				; search for that token.
.3ceb	b0 0a		bcs $3cf7			bcs 	_TIFound
.3ced	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3cf0	88		dey				dey 								; Y is now +1
.3cf1	20 8a 3a	jsr $3a8a			jsr 	TokenSearch 				; search for that token.
.3cf4	b0 01		bcs $3cf7			bcs 	_TIFound
.3cf6	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3cf7					_TIFound:
.3cf7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3cf8					TokeniseString:
.3cf8	c8		iny				iny 								; skip opening quote
.3cf9	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3cfb	84 2a		sty $2a				sty 	temp0 						; save start.
.3cfd					_TSGetLength:
.3cfd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3cff	f0 21		beq $3d22			beq 	_TSFail						; end of line, fail
.3d01	c8		iny				iny
.3d02	e8		inx				inx
.3d03	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3d05	d0 f6		bne $3cfd			bne 	_TSGetLength
.3d07	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3d09	20 7a 3b	jsr $3b7a			jsr 	TokenWrite
.3d0c	8a		txa				txa 								; output length
.3d0d	20 7a 3b	jsr $3b7a			jsr 	TokenWrite
.3d10	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3d12	e0 00		cpx #$00			cpx 	#0 							; check ended
.3d14	f0 09		beq $3d1f			beq 	_TSExit
.3d16					_TSOutput:
.3d16	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3d18	20 7a 3b	jsr $3b7a			jsr 	TokenWrite
.3d1b	c8		iny				iny
.3d1c	ca		dex				dex
.3d1d	d0 f7		bne $3d16			bne 	_TSOutput
.3d1f					_TSExit:
.3d1f	c8		iny				iny 								; skip ending quote
.3d20	38		sec				sec 								; return CS.
.3d21	60		rts				rts
.3d22					_TSFail:
.3d22	18		clc				clc
.3d23	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3d24					TokenTableAddress:
>3d24	2c 3d						.word 	Group0Text
>3d26	f5 3e						.word 	Group1Text
>3d28	42 40						.word 	Group2Text
>3d2a	69 40						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3d2c					Group0Text:
>3d2c	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3d30	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3d33	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3d37	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3d3a	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3d3d	01 be					.byte $01,$be                          ; $8b >
>3d3f	01 bc					.byte $01,$bc                          ; $8c <
>3d41	01 bd					.byte $01,$bd                          ; $8d =
>3d43	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3d46	01 ab					.byte $01,$ab                          ; $8f +
>3d48	01 ad					.byte $01,$ad                          ; $90 -
>3d4a	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3d4d	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3d50	01 aa					.byte $01,$aa                          ; $93 *
>3d52	01 af					.byte $01,$af                          ; $94 /
>3d54	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3d58	01 de					.byte $01,$de                          ; $96 ^
>3d5a	01 a1					.byte $01,$a1                          ; $97 !
>3d5c	01 bf					.byte $01,$bf                          ; $98 ?
>3d5e	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3d65	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3d6b	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3d6f	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3d72	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3d7a	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3d80	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3d85	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3d8a	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3d8f	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3d95	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3d9d	01 a8					.byte $01,$a8                          ; $a4 (
>3d9f	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3da4	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3da9	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3dae	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3db6	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3dbb	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3dc0	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3dc6	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3dcb	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3dd0	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3dd5	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3ddc	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3de3	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3de8	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3def	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3df6	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3dfc	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3e03	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3e09	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3e11	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3e17	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3e1c	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3e22	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3e28	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3e2e	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3e33	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3e38	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3e3f	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3e46	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3e4e	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3e56	01 c0					.byte $01,$c0                          ; $c3 @
>3e58	01 fe					.byte $01,$fe                          ; $c4 ~
>3e5a	01 a6					.byte $01,$a6                          ; $c5 &
>3e5c	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3e62	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3e6a	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3e6e	01 a9					.byte $01,$a9                          ; $c9 )
>3e70	01 ba					.byte $01,$ba                          ; $ca :
>3e72	01 ac					.byte $01,$ac                          ; $cb ,
>3e74	01 bb					.byte $01,$bb                          ; $cc ;
>3e76	01 a7					.byte $01,$a7                          ; $cd '
>3e78	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3e7b	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3e80	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3e85	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3e8b	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3e8f	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3e93	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3e97	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3e9d	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3ea2	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3ea6	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3eac	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3eb1	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3eb7	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3eba	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3ebf	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3ec6	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3ecb	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3ed0	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3ed5	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3ed9	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3edf	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3ee3	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3eea	01 ae					.byte $01,$ae                          ; $e5 .
>3eec	01 a3					.byte $01,$a3                          ; $e6 #
>3eee	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>3ef4	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3ef5					Group1Text:
>3ef5	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>3efa	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>3eff	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>3f04	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>3f08	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>3f0e	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3f12	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3f17	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3f1f	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3f23	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3f28	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3f2d	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>3f32	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>3f38	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>3f3f	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>3f43	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>3f49	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>3f4d	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>3f51	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>3f55	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>3f59	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>3f5d	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>3f61	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>3f65	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>3f69	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>3f6d	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>3f71	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>3f75	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>3f79	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>3f7d	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>3f81	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>3f85	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>3f89	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>3f8d	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>3f91	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>3f95	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>3f99	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>3f9d	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>3fa1	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>3fa5	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>3fa9	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>3fad	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>3fb1	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>3fb5	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>3fb9	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>3fbd	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>3fc1	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>3fc5	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>3fc9	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>3fcd	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>3fd1	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>3fd5	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>3fd9	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>3fdd	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>3fe1	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>3fe5	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>3fe9	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>3fed	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>3ff1	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>3ff5	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>3ff9	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>3ffd	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4001	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4005	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4009	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>400d	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4011	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4015	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4019	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>401d	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4021	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4025	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4029	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>402d	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4031	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4035	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4039	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>403d	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4041	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4042					Group2Text:
>4042	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4048	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>404e	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4054	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4059	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4061	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4068	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4069					Group3Text:
>4069	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4070	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4077	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>407f	58 a8
>4081	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4089	59 a8
>408b	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4090	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4091					tokeniserHandler:
.4091	7c 94 40	jmp ($4094,x)			jmp 	(tokeniserVectors,x)
.4094					tokeniserVectors:
>4094	a0 40					.word _DummyControlHandler ; index 0
>4096	74 38					.word Detokenise           ; index 2
>4098	68 38					.word ListLine             ; index 4
>409a	f9 3a					.word TokTest              ; index 6
>409c	19 3b					.word Tokenise             ; index 8
>409e	1c 3b					.word TokeniseASCIIZ       ; index 10
.40a0					_DummyControlHandler:
.40a0	60		rts			rts

;******  Return to file: basic.asm

.40a1					section_end_tokeniser:
.40a1					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.40a1					AccessArray:
.40a1	8a		txa				txa
.40a2	48		pha				pha
.40a3	e8		inx				inx
.40a4	20 6d 41	jsr $416d			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.40a7	68		pla				pla
.40a8	aa		tax				tax
.40a9	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.40ab	85 2a		sta $2a				sta 	temp0
.40ad	b5 58		lda $58,x			lda 	esInt1,x
.40af	85 2b		sta $2b				sta 	temp0+1
.40b1	8a		txa				txa
.40b2	48		pha				pha
.40b3	98		tya				tya
.40b4	48		pha				pha
.40b5					_AAFollow:
.40b5	a0 00		ldy #$00			ldy 	#0
.40b7	b1 2a		lda ($2a),y			lda 	(temp0),y
.40b9	48		pha				pha
.40ba	c8		iny				iny
.40bb	b1 2a		lda ($2a),y			lda 	(temp0),y
.40bd	85 2b		sta $2b				sta 	temp0+1
.40bf	68		pla				pla
.40c0	85 2a		sta $2a				sta 	temp0
.40c2	e8		inx				inx 								; advance to next stack slot.
.40c3	a0 00		ldy #$00			ldy 	#0
.40c5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.40c7	d5 50		cmp $50,x			cmp 	esInt0,x
.40c9	c8		iny				iny
.40ca	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.40cc	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.40ce	29 7f		and #$7f			and 	#$7F
.40d0	f5 58		sbc $58,x			sbc 	esInt1,x
.40d2	90 50		bcc $4124			bcc 	_AABadIndex 				; failed on index if max index < required.
.40d4	18		clc				clc
.40d5	a5 2a		lda $2a				lda 	temp0
.40d7	69 02		adc #$02			adc 	#2
.40d9	85 2a		sta $2a				sta 	temp0
.40db	90 02		bcc $40df			bcc 	_AANoCarry
.40dd	e6 2b		inc $2b				inc 	temp0+1
.40df					_AANoCarry:
.40df	b5 50		lda $50,x			lda 	esInt0,x
.40e1	85 2e		sta $2e				sta 	temp2
.40e3	b5 58		lda $58,x			lda 	esInt1,x
.40e5	85 2f		sta $2f				sta 	temp2+1
.40e7	ac ed 0d	ldy $0ded			ldy 	varType
.40ea	b9 c7 41	lda $41c7,y			lda 	CAActualSize-$3A,y
.40ed	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.40ef	30 02		bmi $40f3			bmi 	_AANotPointer
.40f1	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.40f3					_AANotPointer:
.40f3	20 71 42	jsr $4271			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.40f6	18		clc				clc
.40f7	a5 2a		lda $2a				lda 	temp0
.40f9	65 2e		adc $2e				adc 	temp2
.40fb	85 2a		sta $2a				sta 	temp0
.40fd	a5 2b		lda $2b				lda 	temp0+1
.40ff	65 2f		adc $2f				adc 	temp2+1
.4101	85 2b		sta $2b				sta 	temp0+1
.4103	b5 49		lda $49,x			lda 	esType+1,x
.4105	30 07		bmi $410e			bmi 	_AAUsedAllIndices
.4107	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4109	10 14		bpl $411f			bpl 	_AABadDepth 				; no, too many indexes.
.410b	4c b5 40	jmp $40b5			jmp 	_AAFollow 					; otherwise follow them.
.410e					_AAUsedAllIndices:
.410e	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4110	30 0d		bmi $411f			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4112	68		pla				pla
.4113	a8		tay				tay
.4114	68		pla				pla
.4115	aa		tax				tax
.4116	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4118	95 50		sta $50,x			sta 	esInt0,x
.411a	a5 2b		lda $2b				lda 	temp0+1
.411c	95 58		sta $58,x			sta 	esInt1,x
.411e	60		rts				rts
.411f					_AABadDepth:
.411f	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4121	20 18 15	jsr $1518		jsr	errorHandler
.4124					_AABadIndex:
.4124	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4126	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0deb					elementSize:
>0deb							.fill	 1
.4129					CreateArray:
.4129	20 00 43	jsr $4300			jsr 	AccessSetup 				; set up the basic stuff.
.412c	ad ed 0d	lda $0ded			lda 	varType 					; is the variable type an array
.412f	4a		lsr a				lsr 	a
.4130	90 36		bcc $4168			bcc 	CANotArray 					; no, cause an error.
.4132	20 09 44	jsr $4409			jsr 	FindVariable 				; does the variable exist already
.4135	b0 2c		bcs $4163			bcs 	CAFound 					; cannot redefine it.
.4137	20 3d 43	jsr $433d			jsr 	CreateVariable 				; create the variable entry.
.413a	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.413c	48		pha				pha
.413d	a5 2b		lda $2b				lda 	temp0+1
.413f	48		pha				pha
.4140	a2 00		ldx #$00			ldx 	#0
.4142	20 6d 41	jsr $416d			jsr 	GetArrayDimensions 			; get the array dimensions
.4145	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4147	20 9d 41	jsr $419d			jsr 	CreateArrayLevel 			; level to YA
.414a	aa		tax				tax 								; level now in YX
.414b	68		pla				pla 								; get address back to temp0 to write.
.414c	85 2b		sta $2b				sta 	temp0+1
.414e	68		pla				pla
.414f	85 2a		sta $2a				sta 	temp0
.4151	98		tya				tya 								; write YX there.
.4152	a0 06		ldy #$06			ldy 	#6
.4154	91 2a		sta ($2a),y			sta 	(temp0),y
.4156	88		dey				dey
.4157	8a		txa				txa
.4158	91 2a		sta ($2a),y			sta 	(temp0),y
.415a	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y and exit.
.415d	60		rts				rts
.415e					CASize:
.415e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4160	20 18 15	jsr $1518		jsr	errorHandler
.4163					CAFound:
.4163	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4165	20 18 15	jsr $1518		jsr	errorHandler
.4168					CANotArray:
.4168	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.416a	20 18 15	jsr $1518		jsr	errorHandler
.416d					GetArrayDimensions:
.416d	ad ed 0d	lda $0ded			lda 	varType 					; push variable type on the stack.
.4170	48		pha				pha
.4171	ac ee 0d	ldy $0dee			ldy 	varEnd
.4174					_CAGetDimensions:
.4174	8a		txa				txa 								; get the next level
.4175	a2 0a		ldx #$0a		ldx	#10
.4177	20 95 35	jsr $3595		jsr	mainHandler
.417a	aa		tax				tax
.417b	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.417d	29 e0		and #$e0			and 	#$E0
.417f	15 60		ora $60,x			ora 	esInt2,x
.4181	15 68		ora $68,x			ora 	esInt3,x
.4183	d0 d9		bne $415e			bne 	CASize
.4185	e8		inx				inx 								; next level.
.4186	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4188	c8		iny				iny
.4189	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.418b	f0 e7		beq $4174			beq 	_CAGetDimensions
.418d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.418f	d0 cd		bne $415e			bne 	CASize
.4191	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4193	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.4195	68		pla				pla 								; restore the variable type ($3A-$3F)
.4196	8d ed 0d	sta $0ded			sta 	varType
.4199	8c ee 0d	sty $0dee			sty 	varEnd 						; save exit Y value, after dimensions
.419c	60		rts				rts
.419d					CreateArrayLevel:
.419d	ac ed 0d	ldy $0ded			ldy 	varType
.41a0	b9 c7 41	lda $41c7,y			lda 	CAActualSize-$3A,y
.41a3	8d eb 0d	sta $0deb			sta 	elementSize 				; get element size this level.
.41a6	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.41a8	30 05		bmi $41af			bmi 	_CANotPointer
.41aa	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.41ac	8d eb 0d	sta $0deb			sta 	elementSize
.41af					_CANotPointer:
.41af	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.41b1	85 2a		sta $2a				sta 	temp0
.41b3	48		pha				pha
.41b4	a5 36		lda $36				lda 	lowMemory+1
.41b6	85 2b		sta $2b				sta 	temp0+1
.41b8	48		pha				pha
.41b9	20 3a 42	jsr $423a			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.41bc	a0 00		ldy #$00			ldy 	#0
.41be	b5 50		lda $50,x			lda 	esInt0,x
.41c0	91 2a		sta ($2a),y			sta 	(temp0),y
.41c2	c8		iny				iny
.41c3	b5 58		lda $58,x			lda 	esInt1,x
.41c5	91 2a		sta ($2a),y			sta 	(temp0),y
.41c7	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.41c9	30 06		bmi $41d1			bmi 	_CALNotLast
.41cb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.41cd	09 80		ora #$80			ora 	#$80
.41cf	91 2a		sta ($2a),y			sta 	(temp0),y
.41d1					_CALNotLast:
.41d1	a9 02		lda #$02			lda 	#2
.41d3	20 f7 41	jsr $41f7			jsr 	_CALAddTemp0
.41d6	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.41d8	95 60		sta $60,x			sta 	esInt2,x 					; count.
.41da	b5 58		lda $58,x			lda 	esInt1,x
.41dc	95 68		sta $68,x			sta 	esInt3,x
.41de					_CALClear:
.41de	20 07 42	jsr $4207			jsr 	EraseOneElement
.41e1	ad eb 0d	lda $0deb			lda 	elementSize 				; move to next element
.41e4	20 f7 41	jsr $41f7			jsr 	_CALAddTemp0
.41e7	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.41e9	d0 02		bne $41ed			bne 	_CALNoBorrow
.41eb	d6 68		dec $68,x			dec 	esInt3,x
.41ed					_CALNoBorrow:
.41ed	d6 60		dec $60,x			dec 	esInt2,x
.41ef	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.41f1	10 eb		bpl $41de			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.41f3	68		pla				pla 								; restore the start of this into YA.
.41f4	a8		tay				tay
.41f5	68		pla				pla
.41f6	60		rts				rts
.41f7					_CALAddTemp0:
.41f7	18		clc				clc
.41f8	65 2a		adc $2a				adc 	temp0
.41fa	85 2a		sta $2a				sta 	temp0
.41fc	90 02		bcc $4200			bcc 	_CALANoCarry
.41fe	e6 2b		inc $2b				inc 	temp0+1
.4200					_CALANoCarry:
.4200	60		rts				rts
.4201					CAActualSize:
>4201	04 04						.byte 	VarISize,VarISize
>4203	02 02						.byte 	VarSSize,VarSSize
>4205	06 06						.byte 	VarFSize,VarFSize
.4207					EraseOneElement:
.4207	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.4209	10 09		bpl $4214			bpl 	_EOESubArray
.420b	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.420d	ad ed 0d	lda $0ded			lda 	varType
.4210	20 a7 43	jsr $43a7			jsr 	ZeroTemp0Y
.4213	60		rts				rts
.4214					_EOESubArray:
.4214	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4216	48		pha				pha
.4217	a5 2b		lda $2b				lda 	temp0+1
.4219	48		pha				pha
.421a	ad eb 0d	lda $0deb			lda 	elementSize 				; save element size
.421d	48		pha				pha
.421e	e8		inx				inx 								; create at next level
.421f	20 9d 41	jsr $419d			jsr 	CreateArrayLevel
.4222	ca		dex				dex
.4223	85 32		sta $32				sta 	tempShort 					; save A
.4225	68		pla				pla  								; restore element size.
.4226	8d eb 0d	sta $0deb			sta 	elementSize
.4229	68		pla				pla 								; restore temp0, which is where this new array level goes.
.422a	85 2b		sta $2b				sta 	temp0+1
.422c	68		pla				pla
.422d	85 2a		sta $2a				sta 	temp0
.422f	98		tya				tya 								; store Y/A there
.4230	a0 01		ldy #$01			ldy 	#1
.4232	91 2a		sta ($2a),y			sta 	(temp0),y
.4234	a5 32		lda $32				lda 	tempShort
.4236	88		dey				dey
.4237	91 2a		sta ($2a),y			sta 	(temp0),y
.4239	60		rts				rts
.423a					AllocateArraySpace:
.423a	18		clc				clc 								; element count + 1 => temp2.
.423b	b5 50		lda $50,x			lda 	esInt0,x
.423d	69 01		adc #$01			adc 	#1
.423f	85 2e		sta $2e				sta 	temp2
.4241	b5 58		lda $58,x			lda 	esInt1,x
.4243	69 00		adc #$00			adc 	#0
.4245	85 2f		sta $2f				sta 	temp2+1
.4247	ad eb 0d	lda $0deb			lda 	elementSize 				; bytes per element
.424a	20 71 42	jsr $4271			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.424d	18		clc				clc 								; add 2 for 'max element' byte.
.424e	a5 2e		lda $2e				lda 	temp2
.4250	69 02		adc #$02			adc 	#2
.4252	85 2e		sta $2e				sta 	temp2
.4254	90 02		bcc $4258			bcc 	_AASNoCarry
.4256	e6 2f		inc $2f				inc 	temp2+1
.4258					_AASNoCarry:
.4258	18		clc				clc 								; add to low memory, allocating space.
.4259	a5 35		lda $35				lda 	lowMemory
.425b	65 2e		adc $2e				adc 	temp2
.425d	85 35		sta $35				sta 	lowMemory
.425f	a5 36		lda $36				lda 	lowMemory+1
.4261	65 2f		adc $2f				adc 	temp2+1
.4263	85 36		sta $36				sta 	lowMemory+1
.4265	b0 05		bcs $426c			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4267	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4269	b0 01		bcs $426c			bcs 	_AASFail
.426b	60		rts				rts
.426c					_AASFail:
.426c	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.426e	20 18 15	jsr $1518		jsr	errorHandler
.4271					MultiplyTemp2ByA:
.4271	48		pha				pha
.4272	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4274	85 30		sta $30				sta 	temp3
.4276	a5 2f		lda $2f				lda 	temp2+1
.4278	85 31		sta $31				sta 	temp3+1
.427a	68		pla				pla
.427b	06 2e		asl $2e				asl 	temp2 						; double it.
.427d	26 2f		rol $2f				rol 	temp2+1
.427f	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4281	f0 15		beq $4298			beq 	_MTBAExit
.4283	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4285	d0 0d		bne $4294			bne 	_MTBANotFloat
.4287	18		clc				clc 								; so this will make it x 3
.4288	a5 2e		lda $2e				lda 	temp2
.428a	65 30		adc $30				adc 	temp3
.428c	85 2e		sta $2e				sta 	temp2
.428e	a5 2f		lda $2f				lda 	temp2+1
.4290	65 31		adc $31				adc 	temp3+1
.4292	85 2f		sta $2f				sta 	temp2+1
.4294					_MTBANotFloat:
.4294	06 2e		asl $2e				asl 	temp2 						; double it.
.4296	26 2f		rol $2f				rol 	temp2+1
.4298					_MTBAExit:
.4298	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0dec					varHash:
>0dec							.fill	1
.0ded					varType:
>0ded							.fill 	1
.0dee					varEnd:
>0dee							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4299					AccessVariable:
.4299	aa		tax				tax 								; stack in X
.429a	c8		iny				iny									; look at second character
.429b	b1 28		lda ($28),y			lda 	(codePtr),y
.429d	88		dey				dey
.429e	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.42a0	d0 15		bne $42b7			bne 	_AVLong 					; no, always use the hash tables.
.42a2	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.42a4	38		sec				sec 	 							; make it 0-25
.42a5	e9 01		sbc #$01			sbc 	#1
.42a7	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.42a8	0a		asl a				asl 	a
.42a9	95 50		sta $50,x			sta 	esInt0,x
.42ab	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.42ad	95 58		sta $58,x			sta 	esInt1,x
.42af	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.42b1	95 48		sta $48,x			sta 	esType,x
.42b3	c8		iny				iny 								; skip over the variable reference in the code.
.42b4	c8		iny				iny  								; (1 letter, 1 type)
.42b5	8a		txa				txa 								; stack in A to return.
.42b6	60		rts				rts
.42b7					_AVLong:
.42b7	8a		txa				txa
.42b8	48		pha				pha
.42b9	20 00 43	jsr $4300			jsr 	AccessSetup 				; set up the basic information we need for later
.42bc	20 09 44	jsr $4409			jsr 	FindVariable 				; does the variable exist already ?
.42bf	b0 0e		bcs $42cf			bcs 	_AVFound 					; yes, then its found
.42c1	ad ed 0d	lda $0ded			lda 	varType 					; otherwise, is the variable type an array
.42c4	4a		lsr a				lsr 	a
.42c5	90 05		bcc $42cc			bcc 	_AVCanCreate 				; if not, we can autocreate
.42c7	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.42c9	20 18 15	jsr $1518		jsr	errorHandler
.42cc					_AVCanCreate:
.42cc	20 3d 43	jsr $433d			jsr 	CreateVariable 				; variable does not exist, create it.
.42cf					_AVFound:
.42cf	68		pla				pla
.42d0	aa		tax				tax
.42d1	18		clc				clc 								; copy temp0 (variable record address)
.42d2	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.42d4	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.42d6	95 50		sta $50,x			sta 	esInt0,x
.42d8	a5 2b		lda $2b				lda 	temp0+1
.42da	69 00		adc #$00			adc 	#0
.42dc	95 58		sta $58,x			sta 	esInt1,x
.42de	a9 00		lda #$00			lda 	#0
.42e0	95 60		sta $60,x			sta 	esInt2,x
.42e2	95 68		sta $68,x			sta 	esInt3,x
.42e4	ac ed 0d	ldy $0ded			ldy 	varType 					; get the type ID from the type.
.42e7	b9 c0 42	lda $42c0,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.42ea	95 48		sta $48,x			sta 	esType,x
.42ec	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y
.42ef	ad ed 0d	lda $0ded			lda 	VarType 					; get variable type, put LSB into C
.42f2	4a		lsr a				lsr 	a
.42f3	90 03		bcc $42f8			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.42f5	20 a1 40	jsr $40a1			jsr 	AccessArray 				; array lookup. if LSB was set.
.42f8					_AVNotArray:
.42f8	8a		txa				txa 								; return stack in A and return
.42f9	60		rts				rts
.42fa					_AVTypeTable:
>42fa	80 80						.byte 	$80,$80						; integer
>42fc	c0 c0						.byte 	$C0,$C0 					; string
>42fe	81 81						.byte 	$81,$81 					; float
.4300					AccessSetup:
.4300	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4302	8d ec 0d	sta $0dec			sta 	varHash
.4305	98		tya				tya
.4306	48		pha				pha
.4307	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4309	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.430b	b0 0b		bcs $4318			bcs 	_ASComplete
.430d	18		clc				clc 								; add to the hash. Might improve this.
.430e	6d ec 0d	adc $0dec			adc 	varHash
.4311	8d ec 0d	sta $0dec			sta 	varHash
.4314	c8		iny				iny 								; next character
.4315	4c 07 43	jmp $4307			jmp 	_ASLoop
.4318					_ASComplete:
.4318	8d ed 0d	sta $0ded			sta 	varType 					; save variable type byte
.431b	c8		iny				iny
.431c	8c ee 0d	sty $0dee			sty 	varEnd 						; save the ending position.
.431f	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4320	e9 3a		sbc #$3a			sbc 	#$3A
.4322	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4323	0a		asl a				asl 	a
.4324	0a		asl a				asl 	a
.4325	0a		asl a				asl 	a 							; 2 bytes/word
.4326	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4328	ad ec 0d	lda $0dec			lda 	varHash 					; get hash
.432b	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.432d	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.432e	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4330	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4332	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4334	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4336	69 00		adc #$00			adc 	#0
.4338	85 3c		sta $3c				sta 	hashList+1
.433a	68		pla				pla
.433b	a8		tay				tay
.433c	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.433d					CreateVariable:
.433d	98		tya				tya 								; push Y on the stack twice.
.433e	48		pha				pha									; position in code of the new variable.
.433f	48		pha				pha
.4340	ae ed 0d	ldx $0ded			ldx 	varType 					; get var type 0-5 from the var type
.4343	bd 67 43	lda $4367,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4346	48		pha				pha 								; save length
.4347	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4349	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.434b	a5 36		lda $36				lda 	lowMemory+1
.434d	85 2b		sta $2b				sta 	temp0+1
.434f	68		pla				pla 								; get length
.4350	18		clc				clc 								; add to low memory.
.4351	65 35		adc $35				adc 	lowMemory
.4353	85 35		sta $35				sta 	lowMemory
.4355	90 08		bcc $435f			bcc 	_CVNoCarry
.4357	e6 36		inc $36				inc 	lowMemory+1
.4359	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.435b	c5 34		cmp $34				cmp 	highMemory+1
.435d	b0 3d		bcs $439c			bcs 	_CVMemory
.435f					_CVNoCarry:
.435f	ad ec 0d	lda $0dec			lda 	varHash 					; store hash at offset 4.
.4362	a0 04		ldy #$04			ldy 	#4
.4364	91 2a		sta ($2a),y			sta 	(temp0),y
.4366	68		pla				pla 								; offset, work out where the variable name is.
.4367	18		clc				clc
.4368	65 28		adc $28				adc 	codePtr
.436a	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.436c	91 2a		sta ($2a),y			sta 	(temp0),y
.436e	a5 29		lda $29				lda 	codePtr+1
.4370	69 00		adc #$00			adc 	#0
.4372	c8		iny				iny
.4373	91 2a		sta ($2a),y			sta 	(temp0),y
.4375	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4378	b0 03		bcs $437d			bcs 	_CVNotImmediate
.437a	20 df 43	jsr $43df			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.437d					_CVNotImmediate:
.437d	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.437f	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4381	91 2a		sta ($2a),y			sta 	(temp0),y
.4383	c8		iny				iny
.4384	b1 3b		lda ($3b),y			lda 	(hashList),y
.4386	91 2a		sta ($2a),y			sta 	(temp0),y
.4388	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.438a	91 3b		sta ($3b),y			sta 	(hashList),y
.438c	88		dey				dey
.438d	a5 2a		lda $2a				lda 	temp0
.438f	91 3b		sta ($3b),y			sta 	(hashList),y
.4391	ad ed 0d	lda $0ded			lda 	varType 					; type in A
.4394	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4396	20 a7 43	jsr $43a7			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4399	68		pla				pla
.439a	a8		tay				tay
.439b	60		rts				rts
.439c					_CVMemory:
.439c	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.439e	20 18 15	jsr $1518		jsr	errorHandler
>43a1	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>43a3	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>43a5	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.43a7					ZeroTemp0Y:
.43a7	4a		lsr a				lsr 	a 							; bit 0 in carry
.43a8	0a		asl a				asl 	a
.43a9	b0 19		bcs $43c4			bcs 	_ZTExit 					; we don't initialise arrays.
.43ab	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.43ad	f0 16		beq $43c5			beq 	_ZTWriteNullString 			; write "" string
.43af	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.43b1	f0 22		beq $43d5			beq 	_ZTWriteFloat
.43b3	98		tya				tya
.43b4	48		pha				pha
.43b5	a9 00		lda #$00			lda 	#0
.43b7	91 2a		sta ($2a),y			sta 	(temp0),y
.43b9	c8		iny				iny
.43ba	91 2a		sta ($2a),y			sta 	(temp0),y
.43bc	c8		iny				iny
.43bd	91 2a		sta ($2a),y			sta 	(temp0),y
.43bf	c8		iny				iny
.43c0	91 2a		sta ($2a),y			sta 	(temp0),y
.43c2	68		pla				pla
.43c3	a8		tay				tay
.43c4					_ZTExit:
.43c4	60		rts				rts
.43c5					_ZTWriteNullString:
.43c5	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.43c7	8d ce 0a	sta $0ace			sta 	NullString
.43ca	a9 ce		lda #$ce			lda 	#NullString & $FF
.43cc	91 2a		sta ($2a),y			sta 	(temp0),y
.43ce	a9 0a		lda #$0a			lda 	#NullString >> 8
.43d0	c8		iny				iny
.43d1	91 2a		sta ($2a),y			sta 	(temp0),y
.43d3	88		dey				dey
.43d4	60		rts				rts
.43d5					_ZTWriteFloat:
.43d5	8a		txa				txa
.43d6	48		pha				pha
.43d7	a2 20		ldx #$20		ldx	#32
.43d9	20 0f 1d	jsr $1d0f		jsr	floatingpointHandler
.43dc	68		pla				pla
.43dd	aa		tax				tax
.43de	60		rts				rts
.43df					CloneVariableName:
.43df	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.43e1	b1 2a		lda ($2a),y			lda 	(temp0),y
.43e3	85 2e		sta $2e				sta 	temp2
.43e5	c8		iny				iny
.43e6	b1 2a		lda ($2a),y			lda 	(temp0),y
.43e8	85 2f		sta $2f				sta 	temp2+1
.43ea	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.43ec	91 2a		sta ($2a),y			sta 	(temp0),y
.43ee	88		dey				dey
.43ef	a5 35		lda $35				lda 	lowMemory
.43f1	91 2a		sta ($2a),y			sta 	(temp0),y
.43f3	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.43f5					_CVNCopy:
.43f5	b1 2e		lda ($2e),y			lda		(temp2),y
.43f7	91 35		sta ($35),y			sta 	(lowMemory),y
.43f9	c8		iny				iny
.43fa	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.43fc	90 f7		bcc $43f5			bcc 	_CVNCopy
.43fe	98		tya				tya 								; add Y to low memory
.43ff	18		clc				clc
.4400	65 35		adc $35				adc 	lowMemory
.4402	85 35		sta $35				sta 	lowMemory
.4404	90 02		bcc $4408			bcc 	_CVNNoCarry
.4406	e6 36		inc $36				inc 	lowMemory+1
.4408					_CVNNoCarry:
.4408	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4409					FindVariable:
.4409	98		tya				tya
.440a	48		pha				pha
.440b	98		tya				tya 								; point temp2 to the actual name
.440c	18		clc				clc 								; in memory of the variable being created
.440d	65 28		adc $28				adc 	codePtr
.440f	85 2e		sta $2e				sta 	temp2
.4411	a5 29		lda $29				lda 	codePtr+1
.4413	69 00		adc #$00			adc 	#0
.4415	85 2f		sta $2f				sta 	temp2+1
.4417	a0 00		ldy #$00			ldy 	#0
.4419	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.441b	85 2a		sta $2a				sta 	temp0
.441d	a5 3c		lda $3c				lda 	hashList+1
.441f	85 2b		sta $2b				sta 	temp0+1
.4421	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4423	b1 2a		lda ($2a),y			lda 	(temp0),y
.4425	f0 2c		beq $4453			beq 	_FVFail
.4427	aa		tax				tax
.4428	88		dey				dey		 							; get LSB
.4429	b1 2a		lda ($2a),y			lda 	(temp0),y
.442b	85 2a		sta $2a				sta 	temp0 						; update pointer.
.442d	86 2b		stx $2b				stx 	temp0+1
.442f	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4431	b1 2a		lda ($2a),y			lda 	(temp0),y
.4433	cd ec 0d	cmp $0dec			cmp 	varHash
.4436	d0 e9		bne $4421			bne 	_FVNext 					; if not, no point in checking the name.
.4438	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4439	b1 2a		lda ($2a),y			lda 	(temp0),y
.443b	85 2d		sta $2d				sta 	temp1+1
.443d	88		dey				dey
.443e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4440	85 2c		sta $2c				sta 	temp1
.4442	a0 00		ldy #$00			ldy 	#0
.4444					_FVCheck:
.4444	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4446	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4448	d0 d7		bne $4421			bne 	_FVNext		 				; fail if different.
.444a	c8		iny				iny
.444b	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.444d	90 f5		bcc $4444			bcc 	_FVCheck
.444f	68		pla				pla
.4450	a8		tay				tay
.4451	38		sec				sec
.4452	60		rts				rts
.4453					_FVFail:
.4453	68		pla				pla
.4454	a8		tay				tay
.4455	18		clc				clc
.4456	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4457					HashTableReset:
.4457	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4459	a9 00		lda #$00			lda 	#0
.445b					_HTRClear:
.445b	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.445e	ca		dex				dex
.445f	d0 fa		bne $445b			bne 	_HTRClear
.4461	60		rts				rts

;******  Return to file: variable/variable.asm

.4462					variableHandler:
.4462	7c 65 44	jmp ($4465,x)			jmp 	(variableVectors,x)
.4465					variableVectors:
>4465	6d 44					.word _DummyControlHandler ; index 0
>4467	99 42					.word AccessVariable       ; index 2
>4469	29 41					.word CreateArray          ; index 4
>446b	57 44					.word HashTableReset       ; index 6
.446d					_DummyControlHandler:
.446d	60		rts			rts

;******  Return to file: basic.asm

.446e					section_end_variable:
.446e					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0def					endStorage:
>446e							.align 	256
.4500					programMemory:
>44ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4500					section_end_footer:

;******  End of listing
