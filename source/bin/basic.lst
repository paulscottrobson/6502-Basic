
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Thu Apr 01 09:51:55 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_TEXT                     = $90 ; text
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	9e 41						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4a		lda #$4a			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 73 23	jsr $2373		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 73 23	jsr $2373		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 cc 3c	jsr $3ccc		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 45 45	jsr $4545		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 16 49	jsr $4916		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 45 45	jsr $4545		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 0f 3a	jsr $3a0f		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 0f 3a	jsr $3a0f		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 0f 3a	jsr $3a0f		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 16 49	jsr $4916		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 0f 3a	jsr $3a0f		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 73 23	jsr $2373		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 90 18	jmp ($1890,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c ee 1e	jmp $1eee			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	20 20					.word	Command_VPoke            ; $86 vpoke
>1888	23 20					.word	Command_VDoke            ; $87 vdoke
>188a	f8 1f					.word	Command_VLoad            ; $88 vload
>188c	00 1f					.word	CommandMode              ; $89 mode
>188e	c1 1f					.word	CommandPalette           ; $8a palette
>1890	eb 1c					.word	CommandSprite            ; $8b sprite
>1892	bd 1f					.word	CommandClg               ; $8c clg
>1894	a0 19					.word	Command_Rect             ; $8d rect
>1896	b5 2d					.word	Unimplemented            ; $8e frame
>1898	b5 2d					.word	Unimplemented            ; $8f draw
>189a	b5 2d					.word	Unimplemented            ; $90 text

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.189c					Group3Vectors:
>189c	6c 20					.word	Command_VPeek            ; $86 vpeek(
>189e	6f 20					.word	Command_VDeek            ; $87 vdeek(
>18a0	be 1e					.word	Sprite_GetX              ; $88 sprite.x(
>18a2	c1 1e					.word	Sprite_GetY              ; $89 sprite.y(
>18a4	2e 1c					.word	FunctionCollide          ; $8a hit(
>18a6	a6 1b					.word	Unary_JoyX               ; $8b joy.x(
>18a8	a9 1b					.word	Unary_JoyY               ; $8c joy.y(
>18aa	e4 1b					.word	Unary_JButton            ; $8d joy.b(
>18ac	79 1b					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18ae					XEvaluateInteger:
.18ae	8a		txa				txa
.18af	a2 0a		ldx #$0a		ldx	#10
.18b1	20 0f 3a	jsr $3a0f		jsr	mainHandler
.18b4	aa		tax				tax
.18b5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gModifiers:
.0bf2					gInk:
>0bf2							.fill 	1
.0bf3					gPaper:
>0bf3							.fill 	1
.0bf4					gSize:
>0bf4							.fill 	1
.0bf5					gImage:
>0bf5							.fill 	1
.0bf6					gFlip:
>0bf6							.fill 	1
.0bf7					gWordHandler:
>0bf7							.fill 	2
.0bf9					gEndStorage:
.18b6					GResetStorage:
.18b6	8a		txa				txa
.18b7	48		pha				pha
.18b8	a2 12		ldx #$12			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18ba	a9 00		lda #$00			lda 	#0
.18bc					_GRSLoop:
.18bc	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18bf	ca		dex				dex
.18c0	10 fa		bpl $18bc			bpl 	_GRSLoop
.18c2	ee f2 0b	inc $0bf2			inc 	gInk 						; make ink 1.
.18c5	68		pla				pla
.18c6	aa		tax				tax
.18c7	60		rts				rts
.18c8					GHandler:
.18c8	8e f8 0b	stx $0bf8			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18cb	8d f7 0b	sta $0bf7			sta 	gWordHandler
.18ce	88		dey				dey 								; predecrement
.18cf					_GHLoopNext:
.18cf	c8		iny				iny									; advance one character
.18d0					_GHLoop:
.18d0	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18d2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d4	f0 f9		beq $18cf			beq 	_GHLoopNext
.18d6	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18d8	f0 4c		beq $1926			beq 	_GHExit
.18da	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18dc	f0 48		beq $1926			beq 	_GHExit
.18de	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e0	f0 33		beq $1915			beq 	_GHCallHandler 				; update post & call the handler
.18e2	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e4	f0 2f		beq $1915			beq 	_GHCallHandler
.18e6	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18e8	f0 10		beq $18fa			beq 	_GHCPairSkip
.18ea	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18ec					_GHCheckTokens:
.18ec	b1 28		lda ($28),y			lda 	(codePtr),y
.18ee	dd 27 19	cmp $1927,x			cmp 	_GHTokenTable,x
.18f1	f0 0e		beq $1901			beq 	_GHFoundToken
.18f3	e8		inx				inx
.18f4	bd 27 19	lda $1927,x			lda 	_GHTokenTable,x
.18f7	d0 f3		bne $18ec			bne 	_GHCheckTokens
.18f9	88		dey				dey
.18fa					_GHCPairSkip:
.18fa	c8		iny				iny
.18fb					_GHCPair:
.18fb	20 2d 19	jsr $192d			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.18fe	4c d0 18	jmp $18d0			jmp 	_GHLoop
.1901					_GHFoundToken:
.1901	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1902	8a		txa				txa
.1903	48		pha				pha
.1904	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1906	a2 0c		ldx #$0c		ldx	#12
.1908	20 0f 3a	jsr $3a0f		jsr	mainHandler
.190b	68		pla				pla
.190c	aa		tax				tax
.190d	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.190f	9d f2 0b	sta $0bf2,x			sta 	gModifiers,x 				; update the modifiers
.1912	4c d0 18	jmp $18d0			jmp 	_GHLoop 					; and loop back
.1915					_GHCallHandler:
.1915	c8		iny				iny 								; consume AT or TO.
.1916	20 2d 19	jsr $192d			jsr 	GHMakeCurrent 				; update the coordinates.
.1919	98		tya				tya
.191a	48		pha				pha
.191b	20 23 19	jsr $1923			jsr 	_GHCallHandlerCode 			; call the handler code
.191e	68		pla				pla
.191f	a8		tay				tay
.1920	4c d0 18	jmp $18d0			jmp 	_GHLoop 					; and loop round.
.1923					_GHCallHandlerCode:
.1923	6c f7 0b	jmp ($0bf7)			jmp 	(gWordHandler)
.1926					_GHExit:
.1926	60		rts				rts
.1927					_GHTokenTable:
>1927	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>192c	00						.byte 	0
.192d					GHMakeCurrent:
.192d	8a		txa				txa
.192e	48		pha				pha
.192f	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1931	20 41 19	jsr $1941			jsr 	_GHMCDoIt
.1934	a2 02		ldx #$02		ldx	#2
.1936	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1939	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.193b	20 41 19	jsr $1941			jsr 	_GHMCDoIt
.193e	68		pla				pla
.193f	aa		tax				tax
.1940	60		rts				rts
.1941					_GHMCDoIt:
.1941	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1944	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1947	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.194a	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.194d	8a		txa				txa
.194e	48		pha				pha
.194f	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1951	a2 0a		ldx #$0a		ldx	#10
.1953	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1956	68		pla				pla
.1957	aa		tax				tax
.1958	a5 98		lda $98				lda 	esInt0
.195a	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.195d	9d ee 0b	sta $0bee,x			sta 	gX2,x
.1960	a5 a0		lda $a0				lda 	esInt1
.1962	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1965	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.1968	a5 a8		lda $a8				lda 	esInt2 						; check reasonable range.
.196a	05 b0		ora $b0				ora 	esInt3
.196c	d0 01		bne $196f			bne 	_GMHCRange
.196e	60		rts				rts
.196f					_GMHCRange:
.196f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1971	20 18 15	jsr $1518		jsr	errorHandler
.1974					GCompareCoords:
.1974	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1977	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.197a	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.197d	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1980	60		rts				rts
.1981					GSortMinMaxCoords:
.1981	90 1c		bcc $199f			bcc 	GSMMCExit
.1983	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1986	48		pha				pha
.1987	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.198a	9d ea 0b	sta $0bea,x			sta 	gx1,x
.198d	68		pla				pla
.198e	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1991	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1994	48		pha				pha
.1995	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1998	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.199b	68		pla				pla
.199c	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.199f					GSMMCExit:
.199f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.19a0					Command_Rect:
.19a0	a9 b3		lda #$b3			lda 	#RectHandler & $FF
.19a2	a2 19		ldx #$19			ldx 	#RectHandler >> 8
.19a4	20 c8 18	jsr $18c8			jsr 	GHandler
>19a7	db						.byte 	$DB
.19a8	60		rts				rts
.19a9					Command_Frame:
.19a9	a9 b2		lda #$b2			lda 	#FrameHandler & $FF
.19ab	a2 19		ldx #$19			ldx 	#FrameHandler >> 8
.19ad	20 c8 18	jsr $18c8			jsr 	GHandler
>19b0	db						.byte 	$DB
.19b1	60		rts				rts
.19b2					FrameHandler:
.19b2	ea		nop				nop
.19b3					RectHandler:
.19b3	20 b8 19	jsr $19b8			jsr 	BoxSort
>19b6	db						.byte 	$DB
.19b7	60		rts				rts
.19b8					BoxSort:
.19b8	a2 00		ldx #$00			ldx 	#gx1-gx1
.19ba	a0 04		ldy #$04			ldy 	#gx2-gx1
.19bc	20 74 19	jsr $1974			jsr 	GCompareCoords
.19bf	20 81 19	jsr $1981			jsr 	GSortMinMaxCoords
.19c2	a2 02		ldx #$02			ldx 	#gy1-gx1
.19c4	a0 06		ldy #$06			ldy 	#gy2-gx1
.19c6	20 74 19	jsr $1974			jsr 	GCompareCoords
.19c9	20 81 19	jsr $1981			jsr 	GSortMinMaxCoords
.19cc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.19cd					gdMvRight:
.19cd	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.19d0	d0 08		bne $19da			bne 	_gdMR0
.19d2	ee 21 9f	inc $9f21			inc 	$9F21
.19d5	d0 03		bne $19da			bne 	_gdMR0
.19d7	ee 22 9f	inc $9f22			inc 	$9F22
.19da					_gdMR0:
.19da	ee ff 0b	inc $0bff			inc 	gdXPos
.19dd	d0 03		bne $19e2			bne 	_gdMR1
.19df	ee 00 0c	inc $0c00			inc 	gdXPos+1
.19e2					_gdMR1:
.19e2	ad 00 0c	lda $0c00			lda 	gdXPos+1		 			; check MSB
.19e5	f0 0d		beq $19f4			beq 	gdMOffScreen
.19e7	c9 02		cmp #$02			cmp 	#2
.19e9	b0 07		bcs $19f2			bcs 	gdmOnScreen
.19eb	ad ff 0b	lda $0bff			lda 	gdXPos 						; $01xx check < $140
.19ee	c9 40		cmp #$40			cmp 	#$40
.19f0	b0 02		bcs $19f4			bcs 	gdmOffScreen
.19f2					gdmOnScreen:
.19f2	18		clc				clc
.19f3	60		rts				rts
.19f4					gdmOffScreen:
.19f4	38		sec				sec
.19f5	60		rts				rts
.19f6					gdMvUp:
.19f6	ad 01 0c	lda $0c01			lda 	gdYPos 						; decrement Y Pos
.19f9	d0 03		bne $19fe			bne 	_gdMU1
.19fb	ce 02 0c	dec $0c02			dec 	gdYPos+1
.19fe	ce 01 0c	dec $0c01	_gdMU1:	dec 	gdYPos
.1a01	38		sec				sec 								; adjust position by -320
.1a02	ad 20 9f	lda $9f20			lda 	$9F20
.1a05	e9 40		sbc #$40			sbc 	#64
.1a07	8d 20 9f	sta $9f20			sta 	$9F20
.1a0a	ad 21 9f	lda $9f21			lda 	$9F21
.1a0d	e9 01		sbc #$01			sbc 	#1
.1a0f	8d 21 9f	sta $9f21			sta 	$9F21
.1a12	ad 22 9f	lda $9f22			lda 	$9F22
.1a15	e9 00		sbc #$00			sbc 	#0
.1a17	8d 22 9f	sta $9f22			sta 	$9F22
.1a1a	4c 3e 1a	jmp $1a3e			jmp 	gdCheckYRange
.1a1d					gdMvDown:
.1a1d	ee 01 0c	inc $0c01			inc 	gdYPos 						; decrement Y Pos
.1a20	d0 03		bne $1a25			bne 	_gdMU1
.1a22	ee 02 0c	inc $0c02			inc 	gdYPos+1
.1a25					_gdMU1:
.1a25	18		clc				clc 								; adjust position by -320
.1a26	ad 20 9f	lda $9f20			lda 	$9F20
.1a29	69 40		adc #$40			adc 	#64
.1a2b	8d 20 9f	sta $9f20			sta 	$9F20
.1a2e	ad 21 9f	lda $9f21			lda 	$9F21
.1a31	69 01		adc #$01			adc 	#1
.1a33	8d 21 9f	sta $9f21			sta 	$9F21
.1a36	ad 22 9f	lda $9f22			lda 	$9F22
.1a39	69 00		adc #$00			adc 	#0
.1a3b	8d 22 9f	sta $9f22			sta 	$9F22
.1a3e					gdCheckYRange:
.1a3e	ad 02 0c	lda $0c02			lda 	gdYPos+1
.1a41	d0 b1		bne $19f4			bne 	gdmOffScreen
.1a43	ad 01 0c	lda $0c01			lda 	gdYPos
.1a46	c9 c8		cmp #$c8			cmp 	#200
.1a48	b0 aa		bcs $19f4			bcs 	gdmOffScreen
.1a4a	90 a6		bcc $19f2			bcc 	gdmOnScreen
.1a4c					gdUpdatePixelOffset:
.1a4c	ad 00 0c	lda $0c00			lda 	gdXPos+1 					; check X < 320 ($140)
.1a4f	f0 0b		beq $1a5c			beq 	_gdUPOCheckY
.1a51	c9 02		cmp #$02			cmp 	#2
.1a53	b0 13		bcs $1a68			bcs 	_gdUPOBad
.1a55	ad ff 0b	lda $0bff			lda 	gdXPos
.1a58	c9 40		cmp #$40			cmp 	#$40
.1a5a	b0 0c		bcs $1a68			bcs 	_gdUPOBad
.1a5c					_gdUPOCheckY:
.1a5c	ad 02 0c	lda $0c02			lda 	gdYPos+1 					; check Y < 200
.1a5f	d0 0e		bne $1a6f			bne 	_gdUPOCalculate
.1a61	ad 01 0c	lda $0c01			lda 	gdYPos
.1a64	c9 c8		cmp #$c8			cmp 	#200
.1a66	90 07		bcc $1a6f			bcc 	_gdUPOCalculate
.1a68					_gdUPOBad:
.1a68	a9 00		lda #$00			lda 	#0
.1a6a	8d 03 0c	sta $0c03			sta 	gdIsPosOkay
.1a6d	38		sec				sec
.1a6e	60		rts				rts
.1a6f					_gdUPOCalculate:
.1a6f	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1a71	85 2a		sta $2a				sta 	temp0
.1a73	ad 01 0c	lda $0c01			lda 	gdYPos
.1a76	85 2b		sta $2b				sta 	temp0+1
.1a78	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1a7a	66 2a		ror $2a				ror 	temp0
.1a7c	46 2b		lsr $2b				lsr 	temp0+1
.1a7e	66 2a		ror $2a				ror 	temp0
.1a80	ad 01 0c	lda $0c01			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1a83	18		clc				clc
.1a84	65 2b		adc $2b				adc 	temp0+1
.1a86	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1a88	18		clc				clc
.1a89	a5 2a		lda $2a				lda 	temp0
.1a8b	6d ff 0b	adc $0bff			adc 	gdXPos
.1a8e	8d fd 0b	sta $0bfd			sta 	gdPixelOffset
.1a91	a5 2b		lda $2b				lda 	temp0+1
.1a93	6d 00 0c	adc $0c00			adc 	gdXPos+1
.1a96	8d fe 0b	sta $0bfe			sta 	gdPixelOffset+1
.1a99	a9 01		lda #$01			lda 	#1 							; it's legitimate.
.1a9b	8d 03 0c	sta $0c03			sta 	gdIsPosOkay
.1a9e	20 a3 1a	jsr $1aa3			jsr 	gdCopyPosition 				; copy position over
.1aa1	18		clc				clc
.1aa2	60		rts				rts
.1aa3					gdCopyPosition:
.1aa3	48		pha				pha
.1aa4	18		clc				clc
.1aa5	ad fa 0b	lda $0bfa			lda 	gdBitmapAddress
.1aa8	6d fd 0b	adc $0bfd			adc 	gdPixelOffset
.1aab	8d 20 9f	sta $9f20			sta 	$9F20
.1aae	ad fb 0b	lda $0bfb			lda 	gdBitmapAddress+1
.1ab1	6d fe 0b	adc $0bfe			adc 	gdPixelOffset+1
.1ab4	8d 21 9f	sta $9f21			sta 	$9F21
.1ab7	ad fc 0b	lda $0bfc			lda 	gdBitmapAddress+2
.1aba	69 00		adc #$00			adc 	#0
.1abc	8d 22 9f	sta $9f22			sta 	$9F22
.1abf	68		pla				pla
.1ac0	60		rts				rts
.1ac1					gdPlotInk:
.1ac1	ad 04 0c	lda $0c04			lda 	gdInk
.1ac4	8d 23 9f	sta $9f23			sta 	$9F23
.1ac7	60		rts				rts
.1ac8					gdPlotPaper:
.1ac8	ad 05 0c	lda $0c05			lda 	gdPaper
.1acb	c9 ff		cmp #$ff			cmp 	#$FF
.1acd	f0 03		beq $1ad2			beq 	_gdPPSkip
.1acf	8d 23 9f	sta $9f23			sta 	$9F23
.1ad2					_gdPPSkip:
.1ad2	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0bf9					gdEnabled:
>0bf9							.fill 	1
.0bfa					gdBitmapAddress:
>0bfa							.fill 	3
.0bfd					gdPixelOffset:
>0bfd							.fill 	2
.0bff					gdXPos:
>0bff							.fill 	2
.0c01					gdYPos:
>0c01							.fill 	2
.0c03					gdIsPosOkay:
>0c03							.fill 	1
.0c04					gdInk:
>0c04							.fill 	1
.0c05					gdPaper:
>0c05							.fill 	1
.1ad3					gdModeChanged:
.1ad3	8a		txa				txa
.1ad4	48		pha				pha
.1ad5	98		tya				tya
.1ad6	48		pha				pha
.1ad7	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1ad9	8d f9 0b	sta $0bf9			sta 	gdEnabled
.1adc	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1adf	c9 40		cmp #$40			cmp 	#$40
.1ae1	d0 1f		bne $1b02			bne 	_gdExit
.1ae3	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1ae6	c9 40		cmp #$40			cmp 	#$40
.1ae8	d0 18		bne $1b02			bne 	_gdExit
.1aea	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1aed	0a		asl a				asl 	a 							;
.1aee	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1aef	10 09		bpl $1afa			bpl 	_gdNotLayer1
.1af1	48		pha				pha 								; save A
.1af2	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1af4	20 0a 1b	jsr $1b0a			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1af7	68		pla				pla 								; restore A
.1af8	b0 08		bcs $1b02			bcs 	_gdExit 					; if successful then exit
.1afa					_gdNotLayer1:
.1afa	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1afb	10 05		bpl $1b02			bpl 	_gdExit 					; if not enabled, exit
.1afd	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1aff	20 0a 1b	jsr $1b0a			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1b02					_gdExit:
.1b02	20 27 1b	jsr $1b27			jsr 	gdClearGraphics 			; clear graphics display.
.1b05	68		pla				pla
.1b06	a8		tay				tay
.1b07	68		pla				pla
.1b08	aa		tax				tax
.1b09	60		rts				rts
.1b0a					gdCheckBitmap:
.1b0a	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1b0d	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1b0f	d0 14		bne $1b25			bne 	_gdCBFail
.1b11	ee f9 0b	inc $0bf9			inc 	gdEnabled 					; set the enabled flag to non zero.
.1b14	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1b17	0a		asl a				asl 	a
.1b18	8d fb 0b	sta $0bfb			sta 	gdBitmapAddress+1
.1b1b	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1b1d	8d fc 0b	sta $0bfc			sta 	gdBitmapAddress+2
.1b20	a9 00		lda #$00			lda 	#$00
.1b22	8d fa 0b	sta $0bfa			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1b25					_gdCBFail:
.1b25	18		clc				clc
.1b26	60		rts				rts
.1b27					gdClearGraphics:
.1b27	8a		txa				txa
.1b28	48		pha				pha
.1b29	98		tya				tya
.1b2a	48		pha				pha
.1b2b	ad f9 0b	lda $0bf9			lda 	gdEnabled 					; screen enabled
.1b2e	f0 2e		beq $1b5e			beq 	_gdCGExit
.1b30	a9 00		lda #$00			lda 	#0 							; reset position
.1b32	8d 03 0c	sta $0c03			sta 	gdIsPosOkay 				; not legal position
.1b35	8d fd 0b	sta $0bfd			sta 	gdPixelOffset 				; zero pixel offset.
.1b38	8d fe 0b	sta $0bfe			sta 	gdPixelOffset+1
.1b3b	8d 05 0c	sta $0c05			sta 	gdPaper 					; paper black
.1b3e	20 a3 1a	jsr $1aa3			jsr 	gdCopyPosition
.1b41	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1b44	09 10		ora #$10			ora 	#$10
.1b46	8d 22 9f	sta $9f22			sta 	$9F22
.1b49	a9 01		lda #$01			lda 	#1 							; ink white
.1b4b	8d 04 0c	sta $0c04			sta 	gdInk
.1b4e	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1b50	a2 00		ldx #$00			ldx 	#0
.1b52	ad 05 0c	lda $0c05			lda 	gdPaper
.1b55					_gdCGLoop1:
.1b55	8d 23 9f	sta $9f23			sta 	$9F23
.1b58	ca		dex				dex
.1b59	d0 fa		bne $1b55			bne 	_gdCGLoop1
.1b5b	88		dey				dey
.1b5c	d0 f7		bne $1b55			bne 	_gdCGLoop1
.1b5e					_gdCGExit:
.1b5e	68		pla				pla
.1b5f	a8		tay				tay
.1b60	68		pla				pla
.1b61	aa		tax				tax
.1b62	60		rts				rts
.1b63					gdSetInk:
.1b63	8d 04 0c	sta $0c04			sta 	gdInk
.1b66	60		rts				rts
.1b67					gdSetPaper:
.1b67	8d 05 0c	sta $0c05			sta 	gdPaper
.1b6a	60		rts				rts
.1b6b					gdSetX:
.1b6b	8d ff 0b	sta $0bff			sta 	gdXPos
.1b6e	8e 00 0c	stx $0c00			stx 	gdXPos+1
.1b71	60		rts				rts
.1b72					gdSetY:
.1b72	8d 01 0c	sta $0c01			sta 	gdYPos
.1b75	8e 02 0c	stx $0c02			stx 	gdYPos+1
.1b78	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1b79					Unary_Clock:
.1b79	a2 0c		ldx #$0c		ldx	#12
.1b7b	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1b7e	48		pha				pha 								; save stack pos
.1b7f	a2 04		ldx #$04		ldx	#4
.1b81	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1b84	98		tya				tya
.1b85	48		pha				pha
.1b86	20 50 ff	jsr $ff50			jsr 	$FF50
.1b89	68		pla				pla
.1b8a	a8		tay				tay
.1b8b	68		pla				pla 								; restore, repush, put into X to read offset
.1b8c	48		pha				pha
.1b8d	aa		tax				tax
.1b8e	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1b90	c9 06		cmp #$06			cmp 	#6
.1b92	b0 0d		bcs $1ba1			bcs 	_UCValue
.1b94	aa		tax				tax 								; index in X and read RTC.
.1b95	b5 02		lda $02,x			lda 	2,x
.1b97	85 32		sta $32				sta 	tempshort
.1b99	68		pla				pla 								; restore number stack index.
.1b9a	aa		tax				tax
.1b9b	a5 32		lda $32				lda 	tempShort
.1b9d	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1b9f	8a		txa				txa
.1ba0	60		rts				rts
.1ba1					_UCValue:
.1ba1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ba3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1ba6					Unary_JoyX:
.1ba6	38		sec				sec
.1ba7	b0 01		bcs $1baa			bcs 	JoystickRead
.1ba9					Unary_JoyY:
.1ba9	18		clc				clc
.1baa					JoystickRead:
.1baa	48		pha				pha 								; save stack position
.1bab	08		php				php 								; save test flag.
.1bac	a2 04		ldx #$04		ldx	#4
.1bae	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1bb1	20 0b 1c	jsr $1c0b			jsr 	ReadJoystick 				; read it.
.1bb4	28		plp				plp
.1bb5	b0 02		bcs $1bb9			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1bb7	4a		lsr a				lsr 	a
.1bb8	4a		lsr a				lsr 	a
.1bb9					_JRNoShift:
.1bb9	29 03		and #$03			and 	#3 							; isolate the test bits.
.1bbb	f0 0d		beq $1bca			beq 	JoyReturnA 					; if nothing pressed, return A.
.1bbd	c9 03		cmp #$03			cmp 	#3
.1bbf	f0 07		beq $1bc8			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1bc1	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1bc2	b0 16		bcs $1bda			bcs 	JoyReturn1
.1bc4					JoyReturnTrue:
.1bc4	a9 ff		lda #$ff			lda 	#$FF
.1bc6	d0 02		bne $1bca			bne 	JoyReturnA
.1bc8					JoyReturnFalse:
.1bc8	a9 00		lda #$00			lda 	#0
.1bca					JoyReturnA:
.1bca	85 32		sta $32				sta 	tempShort 					; return A
.1bcc	68		pla				pla
.1bcd	aa		tax				tax
.1bce	a5 32		lda $32				lda 	tempShort
.1bd0	95 98		sta $98,x			sta 	esInt0,x
.1bd2					JoyReturn13:
.1bd2	95 a0		sta $a0,x			sta 	esInt1,x
.1bd4	95 a8		sta $a8,x			sta 	esInt2,x
.1bd6	95 b0		sta $b0,x			sta 	esInt3,x
.1bd8	8a		txa				txa 								; return NSP in A
.1bd9	60		rts				rts
.1bda					JoyReturn1:
.1bda	68		pla				pla
.1bdb	aa		tax				tax
.1bdc	a9 01		lda #$01			lda 	#1
.1bde	95 98		sta $98,x			sta 	esInt0,x
.1be0	a9 00		lda #$00			lda 	#0
.1be2	f0 ee		beq $1bd2			beq 	JoyReturn13
.1be4					Unary_JButton:
.1be4	48		pha				pha 								; save X on stack, put in X
.1be5	a2 0c		ldx #$0c		ldx	#12
.1be7	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1bea	aa		tax				tax 								; get value to check, push on stack.
.1beb	b5 98		lda $98,x			lda 	esInt0,x
.1bed	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1bef	b0 15		bcs $1c06			bcs 	_UJBadValue
.1bf1	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1bf3	48		pha				pha 								; save that shift count on the stack.
.1bf4	a2 04		ldx #$04		ldx	#4
.1bf6	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1bf9	68		pla				pla
.1bfa	aa		tax				tax
.1bfb	20 0b 1c	jsr $1c0b			jsr 	ReadJoystick 				; joystick read
.1bfe					_UJShift:
.1bfe	4a		lsr a				lsr 	a
.1bff	ca		dex				dex
.1c00	d0 fc		bne $1bfe			bne 	_UJShift
.1c02	b0 c0		bcs $1bc4			bcs 	JoyReturnTrue
.1c04	90 c2		bcc $1bc8			bcc 	JoyReturnFalse
.1c06					_UJBadValue:
.1c06	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1c08	20 18 15	jsr $1518		jsr	errorHandler
.1c0b					ReadJoystick:
.1c0b	8a		txa				txa
.1c0c	48		pha				pha
.1c0d	98		tya				tya
.1c0e	48		pha				pha
.1c0f	a9 00		lda #$00			lda 	#0
.1c11	20 56 ff	jsr $ff56			jsr 	$FF56
.1c14	c0 00		cpy #$00			cpy 	#0
.1c16	d0 11		bne $1c29			bne 	_RJError
.1c18	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1c1a	d0 02		bne $1c1e			bne 	_RJNoBug
.1c1c	a9 ff		lda #$ff			lda 	#$FF
.1c1e					_RJNoBug:
.1c1e	85 32		sta $32				sta 	tempShort
.1c20	68		pla				pla
.1c21	a8		tay				tay
.1c22	68		pla				pla
.1c23	aa		tax				tax
.1c24	a5 32		lda $32				lda 	tempShort
.1c26	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1c28	60		rts				rts
.1c29					_RJError:
.1c29	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1c2b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c06					hitSprite1:
>0c06							.fill 	1 							; this won't work ... if you nest HIT() which
.0c07					hitSprite2:
>0c07							.fill 	1
.0c08					hitRange:
>0c08							.fill 	1
.1c2e					FunctionCollide:
.1c2e	48		pha				pha 								; save and put index into X
.1c2f	aa		tax				tax
.1c30	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1c32	8d 08 0c	sta $0c08			sta 	hitRange
.1c35	20 da 1c	jsr $1cda			jsr 	_FCGetSpriteID
.1c38	8d 06 0c	sta $0c06			sta 	hitSprite1
.1c3b	8a		txa				txa
.1c3c	48		pha				pha
.1c3d	a2 02		ldx #$02		ldx	#2
.1c3f	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1c42	68		pla				pla
.1c43	aa		tax				tax
.1c44	20 da 1c	jsr $1cda			jsr 	_FCGetSpriteID
.1c47	8d 07 0c	sta $0c07			sta 	hitSprite2
.1c4a	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1c4c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1c4e	f0 13		beq $1c63			beq 	_FCParam2
.1c50	8a		txa				txa
.1c51	48		pha				pha
.1c52	a2 02		ldx #$02		ldx	#2
.1c54	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1c57	68		pla				pla
.1c58	a2 0c		ldx #$0c		ldx	#12
.1c5a	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1c5d	aa		tax				tax
.1c5e	b5 98		lda $98,x			lda 	esInt0,x
.1c60	8d 08 0c	sta $0c08			sta 	hitRange
.1c63					_FCParam2:
.1c63	a2 04		ldx #$04		ldx	#4
.1c65	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1c68	68		pla				pla 								; set X to point to the stack again.
.1c69	48		pha				pha
.1c6a	aa		tax				tax
.1c6b	98		tya				tya
.1c6c	48		pha				pha
.1c6d	18		clc				clc 								; do it with the horizontal values.
.1c6e	20 90 1c	jsr $1c90			jsr 	_FCCheck
.1c71	90 0a		bcc $1c7d			bcc 	_FCFail
.1c73	38		sec				sec 								; do it with the vertical values.
.1c74	20 90 1c	jsr $1c90			jsr 	_FCCheck
.1c77	90 04		bcc $1c7d			bcc 	_FCFail
.1c79	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1c7b	d0 02		bne $1c7f			bne 	_FCReturnA
.1c7d					_FCFail:
.1c7d	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1c7f					_FCReturnA:
.1c7f	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1c81	68		pla				pla
.1c82	a8		tay				tay
.1c83	68		pla				pla 								; restore stack, return result and exit.
.1c84	aa		tax				tax
.1c85	a5 32		lda $32				lda 	tempShort
.1c87	95 98		sta $98,x			sta 	esInt0,x
.1c89	95 a0		sta $a0,x			sta 	esInt1,x
.1c8b	95 a8		sta $a8,x			sta 	esInt2,x
.1c8d	95 b0		sta $b0,x			sta 	esInt3,x
.1c8f	60		rts				rts
.1c90					_FCCheck:
.1c90	08		php				php 								; save the H/V flag twice
.1c91	08		php				php
.1c92	ad 06 0c	lda $0c06			lda 	hitSprite1 					; select sprite 1 and read its location
.1c95	20 18 1e	jsr $1e18			jsr 	SelectSpriteA 				; into X
.1c98	28		plp				plp
.1c99	20 7a 1e	jsr $1e7a			jsr 	SpriteReadCoordinate
.1c9c	ad 07 0c	lda $0c07			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1c9f	20 18 1e	jsr $1e18			jsr 	SelectSpriteA
.1ca2	e8		inx				inx
.1ca3	28		plp				plp
.1ca4	20 7a 1e	jsr $1e7a			jsr 	SpriteReadCoordinate
.1ca7	ca		dex				dex
.1ca8	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1ca9	b5 98		lda $98,x			lda 	esInt0,x
.1cab	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1cad	85 2a		sta $2a				sta 	temp0
.1caf	b5 a0		lda $a0,x			lda 	esInt1,x
.1cb1	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1cb3	85 2b		sta $2b				sta 	temp0+1
.1cb5	10 0d		bpl $1cc4			bpl 	_FCCIsPositive
.1cb7	38		sec				sec 								; if -ve calculate |difference|
.1cb8	a9 00		lda #$00			lda 	#0
.1cba	e5 2a		sbc $2a				sbc 	temp0
.1cbc	85 2a		sta $2a				sta 	temp0
.1cbe	a9 00		lda #$00			lda 	#0
.1cc0	e5 2b		sbc $2b				sbc 	temp0+1
.1cc2	85 2b		sta $2b				sta 	temp0+1
.1cc4					_FCCIsPositive:
.1cc4	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1cc6	d0 10		bne $1cd8			bne 	_FCCFail
.1cc8	18		clc				clc 								; work out required min distance which is
.1cc9	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1ccb	75 b1		adc $b1,x			adc 	esInt3+1,x
.1ccd	ac 08 0c	ldy $0c08			ldy 	hitRange 					; get the hit range
.1cd0	f0 01		beq $1cd3			beq 	_FCCNoSetRange 				; override if non zero.
.1cd2	98		tya				tya
.1cd3					_FCCNoSetRange:
.1cd3	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1cd5	f0 01		beq $1cd8			beq 	_FCCFail
.1cd7	60		rts				rts
.1cd8					_FCCFail:
.1cd8	18		clc				clc
.1cd9	60		rts				rts
.1cda					_FCGetSpriteID:
.1cda	8a		txa				txa
.1cdb	a2 0c		ldx #$0c		ldx	#12
.1cdd	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1ce0	aa		tax				tax
.1ce1	b5 98		lda $98,x			lda 	esInt0,x
.1ce3	30 01		bmi $1ce6			bmi 	_FCGSValue
.1ce5	60		rts				rts
.1ce6					_FCGSValue:
.1ce6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ce8	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c09					currSprite:
>0c09							.fill 	2
.1ceb					CommandSprite:
.1ceb	20 ed 1d	jsr $1ded			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1cee	d0 0d		bne $1cfd			bne 	_CSCheckClear
.1cf0	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1cf3	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1cf5	90 02		bcc $1cf9			bcc 	_CSNotOn 					; if CS turn on, so set it
.1cf7	09 40		ora #$40			ora 	#$40
.1cf9					_CSNotOn:
.1cf9	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1cfc	60		rts				rts
.1cfd					_CSCheckClear:
.1cfd	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1cff	8d 0a 0c	sta $0c0a			sta 	currSprite+1
.1d02	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1d04	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1d06	d0 05		bne $1d0d			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1d08	20 fe 1d	jsr $1dfe			jsr 	CSClearSprites 				; clear all the sprites
.1d0b	c8		iny				iny 								; consume CLEAR token and exit.
.1d0c	60		rts				rts
.1d0d					_CSCommandLoop:
.1d0d	20 ed 1d	jsr $1ded			jsr 	CSCheckOnOff 				; check sprite on/off
.1d10	f0 2c		beq $1d3e			beq 	_CSSetVisibility
.1d12	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1d14	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1d16	f0 25		beq $1d3d			beq 	_CSExit
.1d18	c8		iny				iny									; consume it
.1d19	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1d1b	f0 20		beq $1d3d			beq 	_CSExit
.1d1d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1d1f	f0 ec		beq $1d0d			beq 	_CSCommandLoop
.1d21	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1d23	f0 69		beq $1d8e			beq 	_CSSetImage
.1d25	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1d27	f0 2b		beq $1d54			beq 	_CSSetFlip
.1d29	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1d2b	f0 46		beq $1d73			beq 	_CSSetPos
.1d2d	88		dey				dey 								; unpick DEY
.1d2e	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1d30	a2 0c		ldx #$0c		ldx	#12
.1d32	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1d35	a5 98		lda $98				lda 	esInt0
.1d37	20 18 1e	jsr $1e18			jsr 	SelectSpriteA
.1d3a	4c 0d 1d	jmp $1d0d			jmp 	_CSCommandLoop
.1d3d					_CSExit:
.1d3d	60		rts				rts
.1d3e					_CSSetVisibility:
.1d3e	08		php				php 								; save carry
.1d3f	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1d41	20 d4 1d	jsr $1dd4			jsr 	SpriteSetTarget
.1d44	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1d47	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1d49	28		plp				plp
.1d4a	90 02		bcc $1d4e			bcc 	_CSSetOff 					; check if carry was set
.1d4c	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1d4e					_CSSetOff:
.1d4e	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1d51	4c 0d 1d	jmp $1d0d			jmp 	_CSCommandLoop
.1d54					_CSSetFlip:
.1d54	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1d56	a2 0c		ldx #$0c		ldx	#12
.1d58	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1d5b	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1d5d	20 d4 1d	jsr $1dd4			jsr 	SpriteSetTarget
.1d60	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.1d62	29 03		and #$03			and 	#3
.1d64	85 2a		sta $2a				sta 	temp0
.1d66	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1d69	29 fc		and #$fc			and 	#$FC
.1d6b	05 2a		ora $2a				ora 	temp0
.1d6d	8d 23 9f	sta $9f23			sta 	$9F23
.1d70	4c 0d 1d	jmp $1d0d			jmp 	_CSCommandLoop
.1d73					_CSSetPos:
.1d73	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1d75	a2 0a		ldx #$0a		ldx	#10
.1d77	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1d7a	a2 02		ldx #$02		ldx	#2
.1d7c	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1d7f	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1d81	a2 0a		ldx #$0a		ldx	#10
.1d83	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1d86	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1d88	20 36 1e	jsr $1e36			jsr 	SpriteMove 					; move it.
.1d8b	4c 0d 1d	jmp $1d0d			jmp 	_CSCommandLoop
.1d8e					_CSSetImage:
.1d8e	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1d90	a2 0c		ldx #$0c		ldx	#12
.1d92	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1d95	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1d97	20 d4 1d	jsr $1dd4			jsr 	SpriteSetTarget
.1d9a	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.1d9c	bd 50 0c	lda $0c50,x			lda 	imageAddr2Low,x 			; copy low address in.
.1d9f	8d 23 9f	sta $9f23			sta 	$9F23
.1da2	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1da5	bd 10 0c	lda $0c10,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1da8	29 10		and #$10			and 	#$10
.1daa	0a		asl a				asl 	a
.1dab	0a		asl a				asl		a
.1dac	0a		asl a				asl 	a 							; put into bit 7
.1dad	1d 90 0c	ora $0c90,x			ora 	imageAddr2High,x 			; or high address with it.
.1db0	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1db3	a9 06		lda #$06			lda 	#6
.1db5	20 d4 1d	jsr $1dd4			jsr 	SpriteSetTarget 			; set sprite on.
.1db8	ad 23 9f	lda $9f23			lda 	$9F23
.1dbb	09 0c		ora #$0c			ora 	#$0C
.1dbd	8d 23 9f	sta $9f23			sta 	$9F23
.1dc0	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1dc3	bd 10 0c	lda $0c10,x			lda 	imageInfo,x 				; get image info
.1dc6	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1dc7	0a		asl a				asl 	a
.1dc8	0a		asl a				asl 	a
.1dc9	0a		asl a				asl 	a
.1dca	b0 02		bcs $1dce			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1dcc	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1dce					_CSNoOffset:
.1dce	8d 23 9f	sta $9f23			sta 	$9F23
.1dd1	4c 0d 1d	jmp $1d0d			jmp 	_CSCommandLoop
.1dd4					SpriteSetTarget:
.1dd4	0d 09 0c	ora $0c09			ora 	currSprite
.1dd7	8d 20 9f	sta $9f20			sta 	$9F20
.1dda	ad 0a 0c	lda $0c0a			lda 	currSprite+1
.1ddd	f0 09		beq $1de8			beq 	_SSTNoSet
.1ddf	8d 21 9f	sta $9f21			sta 	$9F21
.1de2	a9 01		lda #$01			lda 	#$01
.1de4	8d 22 9f	sta $9f22			sta 	$9F22
.1de7	60		rts				rts
.1de8					_SSTNoSet:
.1de8	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1dea	20 18 15	jsr $1518		jsr	errorHandler
.1ded					CSCheckOnOff:
.1ded	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1def	c8		iny				iny
.1df0	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1df2	18		clc				clc
.1df3	f0 08		beq $1dfd			beq 	_CSCOExit
.1df5	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1df7	38		sec				sec 								; return NE if neither.
.1df8	f0 03		beq $1dfd			beq 	_CSCOExit
.1dfa	88		dey				dey 								; undo consume
.1dfb	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1dfd					_CSCOExit:
.1dfd	60		rts				rts
.1dfe					CSClearSprites:
.1dfe	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1e00	8d 22 9f	sta $9f22			sta 	$9F22
.1e03	a9 fc		lda #$fc			lda 	#$FC
.1e05	8d 21 9f	sta $9f21			sta 	$9F21
.1e08	a9 00		lda #$00			lda 	#0
.1e0a	8d 20 9f	sta $9f20			sta 	$9F20
.1e0d					_CSClear:
.1e0d	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1e0f	8d 23 9f	sta $9f23			sta 	$9F23
.1e12	ad 21 9f	lda $9f21			lda 	$9F21
.1e15	d0 f6		bne $1e0d			bne 	_CSClear
.1e17	60		rts				rts
.1e18					SelectSpriteA:
.1e18	85 2a		sta $2a				sta 	temp0
.1e1a	a9 00		lda #$00			lda 	#0
.1e1c	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1e1e	b0 11		bcs $1e31			bcs 	_CSBadValue 				; sprites only 0-127
.1e20	06 2a		asl $2a				asl 	temp0
.1e22	2a		rol a				rol 	a
.1e23	06 2a		asl $2a				asl 	temp0
.1e25	2a		rol a				rol 	a
.1e26	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.1e28	8d 0a 0c	sta $0c0a			sta 	currSprite+1
.1e2b	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.1e2d	8d 09 0c	sta $0c09			sta 	currSprite+0
.1e30	60		rts				rts
.1e31					_CSBadValue
.1e31	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e33	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.1e36					SpriteMove:
.1e36	98		tya				tya
.1e37	48		pha				pha
.1e38	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1e3a	20 d4 1d	jsr $1dd4			jsr 	SpriteSetTarget
.1e3d	ad 23 9f	lda $9f23			lda 	$9F23
.1e40	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1e41	4a		lsr a				lsr 	a
.1e42	4a		lsr a				lsr 	a
.1e43	4a		lsr a				lsr 	a
.1e44	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1e46	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1e48	20 d4 1d	jsr $1dd4			jsr 	SpriteSetTarget
.1e4b	20 5a 1e	jsr $1e5a			jsr 	SMWritePosition 					; write X position out.
.1e4e	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1e50	46 2a		lsr $2a				lsr 	temp0
.1e52	e8		inx				inx 										; get the y position
.1e53	20 5a 1e	jsr $1e5a			jsr 	SMWritePosition 					; and write that out.
.1e56	ca		dex				dex 										; fix X and quit.
.1e57	68		pla				pla
.1e58	a8		tay				tay
.1e59	60		rts				rts
.1e5a					SMWritePosition:
.1e5a	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1e5c	29 03		and #$03			and 	#3 									; in range into Y
.1e5e	a8		tay				tay
.1e5f	38		sec				sec
.1e60	b5 98		lda $98,x			lda 	esInt0,x
.1e62	f9 76 1e	sbc $1e76,y			sbc 	SMHalfSize,y
.1e65	8d 23 9f	sta $9f23			sta 	$9F23
.1e68	ee 20 9f	inc $9f20			inc 	$9F20
.1e6b	b5 a0		lda $a0,x			lda 	esInt1,x
.1e6d	e9 00		sbc #$00			sbc 	#0
.1e6f	8d 23 9f	sta $9f23			sta 	$9F23
.1e72	ee 20 9f	inc $9f20			inc 	$9F20
.1e75	60		rts				rts
.1e76					SMHalfSize:
>1e76	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.1e7a					SpriteReadCoordinate:
.1e7a	98		tya				tya
.1e7b	48		pha				pha
.1e7c	08		php				php 										; save CTR on stack
.1e7d	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1e7f	20 d4 1d	jsr $1dd4			jsr 	SpriteSetTarget
.1e82	ad 23 9f	lda $9f23			lda 	$9F23
.1e85	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1e86	4a		lsr a				lsr 	a
.1e87	4a		lsr a				lsr 	a
.1e88	4a		lsr a				lsr 	a
.1e89	28		plp				plp 										; restore CTS
.1e8a	08		php				php
.1e8b	90 02		bcc $1e8f			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.1e8d	4a		lsr a				lsr 	a
.1e8e	4a		lsr a				lsr 	a
.1e8f					_SPRCNotY1:
.1e8f	29 03		and #$03			and 	#3 									; point into half width/height
.1e91	a8		tay				tay
.1e92	b9 76 1e	lda $1e76,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.1e95	95 b0		sta $b0,x			sta 	esInt3,x
.1e97	28		plp				plp 										; CS Y CC X
.1e98	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.1e9a	2a		rol a				rol 	a
.1e9b	2a		rol a				rol 	a
.1e9c	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.1e9e	20 d4 1d	jsr $1dd4			jsr 	SpriteSetTarget 					; set data pointer offset by that
.1ea1	18		clc				clc 										; read and unfix centre.
.1ea2	ad 23 9f	lda $9f23			lda 	$9F23
.1ea5	75 b0		adc $b0,x			adc 	esInt3,x
.1ea7	95 98		sta $98,x			sta 	esInt0,x
.1ea9	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.1eac	ad 23 9f	lda $9f23			lda 	$9F23
.1eaf	69 00		adc #$00			adc 	#0
.1eb1	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.1eb3	c9 08		cmp #$08			cmp		#$08
.1eb5	90 02		bcc $1eb9			bcc 	_SPRCNoSX
.1eb7	09 f0		ora #$f0			ora 	#$F0
.1eb9					_SPRCNoSX:
.1eb9	95 a0		sta $a0,x			sta 	esInt1,x
.1ebb	68		pla				pla
.1ebc	a8		tay				tay
.1ebd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.1ebe					Sprite_GetX:
.1ebe	18		clc				clc
.1ebf	90 01		bcc $1ec2			bcc 	SpriteGetCode
.1ec1					Sprite_GetY:
.1ec1	38		sec				sec
.1ec2					SpriteGetCode:
.1ec2	08		php				php 								; CLC : X SEC: Y, save on stack.
.1ec3	48		pha				pha 								; save stack position
.1ec4	20 e0 1e	jsr $1ee0			jsr 	GetSpriteNumber 			; get # of sprite.
.1ec7	a2 04		ldx #$04		ldx	#4
.1ec9	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1ecc	68		pla				pla
.1ecd	aa		tax				tax
.1ece	28		plp				plp 								; which one ?
.1ecf	20 7a 1e	jsr $1e7a			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.1ed2	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.1ed4	29 80		and #$80			and 	#$80
.1ed6	f0 02		beq $1eda			beq 	_SGXYPos
.1ed8	a9 ff		lda #$ff			lda 	#$FF
.1eda					_SGXYPos:
.1eda	95 a8		sta $a8,x			sta 	esInt2,x
.1edc	95 b0		sta $b0,x			sta 	esInt3,x
.1ede	8a		txa				txa 								; return NSP in A
.1edf	60		rts				rts
.1ee0					GetSpriteNumber:
.1ee0	48		pha				pha
.1ee1	a2 0c		ldx #$0c		ldx	#12
.1ee3	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1ee6	68		pla				pla
.1ee7	aa		tax				tax
.1ee8	b5 98		lda $98,x			lda 	esInt0,x
.1eea	20 18 1e	jsr $1e18			jsr 	SelectSpriteA
.1eed	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c0b					currentMode:
>0c0b							.fill 	4
.1eee					ForceMode0:
.1eee	a2 00		ldx #$00			ldx 	#0
.1ef0	86 98		stx $98				stx 	esInt0 						; in case we do it.
.1ef2					_FMCheck:
.1ef2	bd 85 1f	lda $1f85,x			lda 	CMModeList,x 				; do we need to switch ?
.1ef5	dd 0b 0c	cmp $0c0b,x			cmp 	currentMode,x
.1ef8	d0 13		bne $1f0d			bne 	CMSetMode 					; different so switch.
.1efa	e8		inx				inx
.1efb	e0 04		cpx #$04			cpx 	#4
.1efd	d0 f3		bne $1ef2			bne 	_FMCheck
.1eff	60		rts				rts
.1f00					CommandMode:
.1f00	a9 00		lda #$00			lda 	#0
.1f02	a2 0a		ldx #$0a		ldx	#10
.1f04	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1f07	a5 b0		lda $b0				lda 	esInt3
.1f09	29 70		and #$70			and 	#$70
.1f0b	d0 06		bne $1f13			bne 	CMNoExpand
.1f0d					CMSetMode:
.1f0d	20 64 1f	jsr $1f64			jsr 	CMExpandMode
.1f10	4c 27 1f	jmp $1f27			jmp 	CMUpdateMode
.1f13					CMNoExpand:
.1f13	a5 98		lda $98				lda 	esInt0
.1f15	8d 0b 0c	sta $0c0b			sta 	currentMode
.1f18	a5 a0		lda $a0				lda 	esInt1
.1f1a	8d 0c 0c	sta $0c0c			sta 	currentMode+1
.1f1d	a5 a8		lda $a8				lda 	esInt2
.1f1f	8d 0d 0c	sta $0c0d			sta 	currentMode+2
.1f22	a5 b0		lda $b0				lda 	esInt3
.1f24	8d 0e 0c	sta $0c0e			sta 	currentMode+3
.1f27					CMUpdateMode:
.1f27	a2 11		ldx #$11			ldx 	#$11
.1f29					_CMClear:
.1f29	a9 00		lda #$00			lda 	#0
.1f2b	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.1f2e	ca		dex				dex
.1f2f	10 f8		bpl $1f29			bpl 	_CMClear
.1f31	ad 0e 0c	lda $0c0e			lda 	currentMode+3 				; get current mode
.1f34	48		pha				pha 								; stack twice.
.1f35	48		pha				pha
.1f36	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.1f38	09 01		ora #$01			ora 	#$01 						; turn the output on.
.1f3a	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.1f3d	68		pla				pla 								; get back
.1f3e	20 95 1f	jsr $1f95			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1f41	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.1f44	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.1f45	4a		lsr a				lsr 	a
.1f46	4a		lsr a				lsr 	a
.1f47	20 95 1f	jsr $1f95			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.1f4a	8d 2b 9f	sta $9f2b			sta 	$9F2B
.1f4d	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.1f4f	ad 0b 0c	lda $0c0b			lda 	currentMode					; get L0 config byte
.1f52	20 a0 1f	jsr $1fa0			jsr 	CMDecodeLayer 				; and decode layer 0
.1f55	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.1f57	ad 0c 0c	lda $0c0c			lda 	currentMode+1
.1f5a	20 a0 1f	jsr $1fa0			jsr 	CMDecodeLayer
.1f5d	20 d3 1a	jsr $1ad3			jsr 	gdModeChanged 				; check the bitmap status.
.1f60	20 b6 18	jsr $18b6			jsr 	GResetStorage 				; reset the graphics drawing storage.
.1f63	60		rts				rts
.1f64					CMExpandMode:
.1f64	a5 98		lda $98				lda 	esInt0 						; get mode number
.1f66	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.1f68	b0 16		bcs $1f80			bcs 	_CMModeError
.1f6a	0a		asl a				asl 	a 							; x 4 into X
.1f6b	0a		asl a				asl 	a
.1f6c	aa		tax				tax
.1f6d	98		tya				tya
.1f6e	48		pha				pha
.1f6f	a0 00		ldy #$00			ldy 	#0
.1f71					_CMEMCopy:
.1f71	bd 85 1f	lda $1f85,x			lda 	CMModeList,x
.1f74	99 0b 0c	sta $0c0b,y			sta 	currentMode,y
.1f77	e8		inx				inx
.1f78	c8		iny				iny
.1f79	c0 04		cpy #$04			cpy 	#4
.1f7b	d0 f4		bne $1f71			bne 	_CMEMCopy
.1f7d	68		pla				pla
.1f7e	a8		tay				tay
.1f7f	60		rts				rts
.1f80					_CMModeError:
.1f80	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f82	20 18 15	jsr $1518		jsr	errorHandler
.1f85					CMModeList:
>1f85	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>1f89	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>1f8d	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>1f91	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.1f95					CMEndModeList:
.1f95					CMToScale:
.1f95	29 03		and #$03			and 	#3 							; lower 2 bits only
.1f97	aa		tax				tax 								; put in X for counting
.1f98	a9 00		lda #$00			lda 	#0 							; zero result
.1f9a	38		sec				sec 								; first time rotate CS in
.1f9b					_CMTSLoop:
.1f9b	6a		ror a				ror 	a
.1f9c	ca		dex				dex
.1f9d	10 fc		bpl $1f9b			bpl 	_CMTSLoop
.1f9f	60		rts				rts
.1fa0					CMDecodeLayer:
.1fa0	48		pha				pha 								; save it.
.1fa1	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1fa3	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1fa6	68		pla				pla 								; get it back
.1fa7	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.1fa9	f0 02		beq $1fad			beq 	_CMDLNotSet
.1fab	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1fad					_CMDLNotSet:
.1fad	e0 00		cpx #$00			cpx 	#0
.1faf	f0 06		beq $1fb7			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1fb1	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1fb3	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1fb6	60		rts				rts
.1fb7					_CMDLayer0:
.1fb7	09 80		ora #$80			ora 	#$80 						; tile base is $80
.1fb9	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1fbc	60		rts				rts
.1fbd					CommandClg:
.1fbd	20 27 1b	jsr $1b27			jsr 	gdClearGraphics
.1fc0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.1fc1					CommandPalette:
.1fc1	a9 00		lda #$00			lda 	#0
.1fc3	a2 0c		ldx #$0c		ldx	#12
.1fc5	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1fc8	a2 02		ldx #$02		ldx	#2
.1fca	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1fcd	a9 01		lda #$01			lda 	#1
.1fcf	a2 08		ldx #$08		ldx	#8
.1fd1	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1fd4	a5 98		lda $98				lda 	esInt0 					; get palette #
.1fd6	20 e6 1f	jsr $1fe6			jsr 	PointToPaletteA			; point to palette register
.1fd9	a5 99		lda $99				lda 	esInt0+1
.1fdb	8d 23 9f	sta $9f23			sta 	$9F23
.1fde	a5 a1		lda $a1				lda 	esInt1+1
.1fe0	29 0f		and #$0f			and 	#$0F
.1fe2	8d 23 9f	sta $9f23			sta 	$9F23
.1fe5	60		rts				rts
.1fe6					PointToPaletteA:
.1fe6	0a		asl a				asl 	a 							; x 2 -> LSB
.1fe7	8d 20 9f	sta $9f20			sta 	$9F20
.1fea	a9 00		lda #$00			lda 	#0 							; carry into A
.1fec	2a		rol a				rol 	a
.1fed	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1fef	8d 21 9f	sta $9f21			sta 	$9F21
.1ff2	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1ff4	8d 22 9f	sta $9f22			sta 	$9F22
.1ff7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.1ff8					Command_VLoad:
.1ff8	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1ffa	a2 0e		ldx #$0e		ldx	#14
.1ffc	20 0f 3a	jsr $3a0f		jsr	mainHandler
.1fff	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.2001	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.2003	95 98		sta $98,x			sta 	esInt0,x
.2005	a5 36		lda $36				lda 	lowMemory+1
.2007	95 a0		sta $a0,x			sta 	esInt1,x
.2009	a9 00		lda #$00			lda 	#0
.200b	95 a8		sta $a8,x			sta 	esInt2,x
.200d	95 b0		sta $b0,x			sta 	esInt3,x
.200f	a2 0e		ldx #$0e		ldx	#14
.2011	20 f6 14	jsr $14f6		jsr	deviceHandler
.2014	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.2016	85 2a		sta $2a				sta 	temp0
.2018	a5 a1		lda $a1				lda 	esInt1+1
.201a	85 2b		sta $2b				sta 	temp0+1
.201c	20 98 20	jsr $2098			jsr 	LoadVRAMFile 					; load the VRAM file in.
.201f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2020					Command_VPoke:
.2020	38		sec				sec 						; one byte , CS
.2021	b0 01		bcs $2024			bcs 	CmdVideoWrite
.2023					Command_VDoke:
.2023	18		clc				clc 						; two bytes, CC
.2024					CmdVideoWrite:
.2024	08		php				php 						; save one or two btes
.2025	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.2027	a2 0a		ldx #$0a		ldx	#10
.2029	20 0f 3a	jsr $3a0f		jsr	mainHandler
.202c	a2 02		ldx #$02		ldx	#2
.202e	20 0f 3a	jsr $3a0f		jsr	mainHandler
.2031	a9 01		lda #$01			lda 	#1
.2033	a2 0a		ldx #$0a		ldx	#10
.2035	20 0f 3a	jsr $3a0f		jsr	mainHandler
.2038	a2 00		ldx #$00			ldx 	#0
.203a	20 4b 20	jsr $204b			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.203d	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.203f	8d 23 9f	sta $9f23			sta 	$9F23
.2042	28		plp				plp 						; if it was Poke then exit
.2043	b0 05		bcs $204a			bcs 	_CVWExit
.2045	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2047	8d 23 9f	sta $9f23			sta 	$9F23
.204a					_CVWExit:
.204a	60		rts				rts
.204b					SetUpTOSVRamAddress:
.204b	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.204d	29 fe		and #$fe			and 	#$FE
.204f	15 b0		ora $b0,x			ora 	esInt3,x
.2051	d0 14		bne $2067			bne 	CVWValue
.2053	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.2055	8d 20 9f	sta $9f20			sta 	$9F20
.2058	b5 a0		lda $a0,x			lda 	esInt1,x
.205a	8d 21 9f	sta $9f21			sta	 	$9F21
.205d	b5 a8		lda $a8,x			lda 	esInt2,x
.205f	29 01		and #$01			and 	#1
.2061	09 10		ora #$10			ora 	#$10 				; step 1.
.2063	8d 22 9f	sta $9f22			sta 	$9F22
.2066	60		rts				rts
.2067					CVWValue:
.2067	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2069	20 18 15	jsr $1518		jsr	errorHandler
.206c					Command_VPeek:
.206c	38		sec				sec 						; one byte , CS
.206d	b0 01		bcs $2070			bcs 	CmdVideoRead
.206f					Command_VDeek:
.206f	18		clc				clc 						; two bytes, CC
.2070					CmdVideoRead:
.2070	08		php				php 						; save action on stack.
.2071	48		pha				pha 						; save stack position
.2072	a2 0a		ldx #$0a		ldx	#10
.2074	20 0f 3a	jsr $3a0f		jsr	mainHandler
.2077	a2 04		ldx #$04		ldx	#4
.2079	20 0f 3a	jsr $3a0f		jsr	mainHandler
.207c	68		pla				pla
.207d	aa		tax				tax
.207e	20 4b 20	jsr $204b			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2081	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.2083	95 a0		sta $a0,x			sta 	esInt1,x
.2085	95 a8		sta $a8,x			sta 	esInt2,x
.2087	95 b0		sta $b0,x			sta 	esInt3,x
.2089	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.208c	95 98		sta $98,x			sta 	esInt0,x
.208e	28		plp				plp 						; check if DOKE (carry was clear)
.208f	b0 05		bcs $2096			bcs 	_CVRExit
.2091	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2094	95 a0		sta $a0,x			sta 	esInt1,x
.2096					_CVRExit:
.2096	8a		txa				txa 						; return X position.
.2097	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c0f					compressMode:
>0c0f							.fill 	1
.0c10					imageInfo:
>0c10							.fill 	X16MaxImages
.0c50					imageAddr2Low:
>0c50							.fill  	X16MaxImages
.0c90					imageAddr2High:
>0c90							.fill  	X16MaxImages
.2098					LoadVRAMFile:
.2098	8a		txa				txa
.2099	48		pha				pha
.209a	98		tya				tya
.209b	48		pha				pha
.209c					_LVRLoop:
.209c	20 78 21	jsr $2178			jsr 	LVFGet 						; get the next (never access direct)
.209f	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.20a1	f0 42		beq $20e5			beq 	_LVRExit
.20a3	b0 5c		bcs $2101			bcs 	_LVRLoad 					; load data in ?
.20a5	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.20a7	90 11		bcc $20ba			bcc 	_LVRSetAddress
.20a9	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.20ab	f0 3d		beq $20ea			beq 	_LVRSetPalette
.20ad	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.20af	90 2d		bcc $20de			bcc 	_LVRSetCompress
.20b1	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.20b3	90 60		bcc $2115			bcc 	_LVRSetSprite
.20b5	a2 01		ldx #$01			ldx 	#ErrorID_missing
.20b7	20 18 15	jsr $1518		jsr	errorHandler
.20ba					_LVRSetAddress:
.20ba	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.20bc	20 78 21	jsr $2178			jsr 	LVFGet
.20bf	85 2c		sta $2c				sta 	temp1
.20c1	a9 00		lda #$00			lda 	#0
.20c3	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.20c5	66 2c		ror $2c				ror 	temp1
.20c7	6a		ror a				ror		a
.20c8	46 2d		lsr $2d				lsr 	temp1+1
.20ca	66 2c		ror $2c				ror 	temp1
.20cc	6a		ror a				ror		a
.20cd	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.20d0	a5 2c		lda $2c				lda 	temp1
.20d2	8d 21 9f	sta $9f21			sta 	$9F21
.20d5	a5 2d		lda $2d				lda 	temp1+1
.20d7	09 10		ora #$10			ora 	#$10
.20d9	8d 22 9f	sta $9f22			sta 	$9F22
.20dc	d0 be		bne $209c			bne 	_LVRLoop
.20de					_LVRSetCompress:
.20de	29 07		and #$07			and 	#7
.20e0	8d 0f 0c	sta $0c0f			sta 	compressMode
.20e3	10 b7		bpl $209c			bpl 	_LVRLoop
.20e5					_LVRExit:
.20e5	68		pla				pla
.20e6	a8		tay				tay
.20e7	68		pla				pla
.20e8	aa		tax				tax
.20e9	60		rts				rts
.20ea					_LVRSetPalette:
.20ea	20 78 21	jsr $2178			jsr 	LVFGet 						; get palette id.
.20ed	20 e6 1f	jsr $1fe6			jsr 	PointToPaletteA 			; in palette.asm
.20f0	20 78 21	jsr $2178			jsr 	LVFGet 						; copy 12 bit palette data in.
.20f3	8d 23 9f	sta $9f23			sta 	$9F23
.20f6	20 78 21	jsr $2178			jsr 	LVFGet
.20f9	29 0f		and #$0f			and 	#$0F
.20fb	8d 23 9f	sta $9f23			sta 	$9F23
.20fe	4c 9c 20	jmp $209c			jmp 	_LVRLoop
.2101					_LVRLoad:
.2101	ae 0f 0c	ldx $0c0f			ldx 	compressMode
.2104	d0 55		bne $215b			bne 	_LVRNotMode0
.2106	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.2108					_LVRLCopyX:
.2108	aa		tax				tax
.2109					_LVRLCopy:
.2109	20 78 21	jsr $2178			jsr 	LVFGet 						; write to data.
.210c	8d 23 9f	sta $9f23			sta 	$9F23
.210f	ca		dex				dex
.2110	d0 f7		bne $2109			bne 	_LVRLCopy
.2112	4c 9c 20	jmp $209c			jmp 	_LVRLoop
.2115					_LVRSetSprite:
.2115	48		pha				pha 								; save on stack
.2116	20 78 21	jsr $2178			jsr 	LVFGet 						; get the sprite number into X
.2119	aa		tax				tax
.211a	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.211c	b0 38		bcs $2156			bcs 	_LVRSSValue
.211e	68		pla				pla 								; restore the data held in the first byte
.211f	9d 10 0c	sta $0c10,x			sta 	imageInfo,x 				; and write into the sprite image table.
.2122					_LVRAlignVRAM:
.2122	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.2125	29 1f		and #$1f			and 	#$1F
.2127	f0 07		beq $2130			beq 	_LVRAligned
.2129	a9 00		lda #$00			lda 	#$00
.212b	8d 23 9f	sta $9f23			sta 	$9F23
.212e	f0 f2		beq $2122			beq 	_LVRAlignVRAM
.2130					_LVRAligned:
.2130	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.2133	4a		lsr a				lsr 	a 	 						; first halve into temp1
.2134	ad 21 9f	lda $9f21			lda 	$9F21
.2137	6a		ror a				ror 	a
.2138	85 2d		sta $2d				sta 	temp1+1
.213a	ad 20 9f	lda $9f20			lda 	$9F20
.213d	6a		ror a				ror 	a
.213e	85 2c		sta $2c				sta 	temp1
.2140	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2142					_LVRShift:
.2142	46 2d		lsr $2d				lsr 	temp1+1
.2144	66 2c		ror $2c				ror 	temp1
.2146	88		dey				dey
.2147	d0 f9		bne $2142			bne 	_LVRShift
.2149	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.214b	9d 90 0c	sta $0c90,x			sta 	imageAddr2High,x
.214e	a5 2c		lda $2c				lda 	temp1
.2150	9d 50 0c	sta $0c50,x			sta 	imageAddr2Low,x
.2153	4c 9c 20	jmp $209c			jmp 	_LVRLoop
.2156					_LVRSSValue:
.2156	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2158	20 18 15	jsr $1518		jsr	errorHandler
.215b					_LVRNotMode0:
.215b	e0 01		cpx #$01			cpx 	#1
.215d	d0 15		bne $2174			bne 	_LVRNotMode1
.215f	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.2161	c9 40		cmp #$40			cmp 	#$40
.2163	90 a3		bcc $2108			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.2165					_LVRRLEGroup:
.2165	29 3f		and #$3f			and 	#$3F
.2167	aa		tax				tax
.2168	20 78 21	jsr $2178			jsr 	LVFGet
.216b					_LVRLEGroupLoop:
.216b	8d 23 9f	sta $9f23			sta 	$9F23
.216e	ca		dex				dex
.216f	d0 fa		bne $216b			bne 	_LVRLEGroupLoop
.2171	4c 9c 20	jmp $209c			jmp 	_LVRLoop
.2174					_LVRNotMode1:
>2174	db						.byte 	$DB
.2175	4c 74 21	jmp $2174			jmp 	_LVRNotMode1
.2178	84 32		sty $32		LVFGet:	sty 	tempShort
.217a	a0 00		ldy #$00			ldy 	#0
.217c	b1 2a		lda ($2a),y			lda 	(temp0),y
.217e	a4 32		ldy $32				ldy	 	tempShort
.2180	e6 2a		inc $2a				inc 	temp0
.2182	d0 02		bne $2186			bne 	_LVFGExit
.2184	e6 2b		inc $2b				inc 	temp0+1
.2186					_LVFGExit:
.2186	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2187					section_end_extension:
.2187					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2187					floatingpointHandler:
.2187	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2189	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.218c					section_end_floatingpoint:
.218c					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.218c					ColdStartEntry:
.218c	a2 ff		ldx #$ff			ldx 	#$FF
.218e	9a		txs				txs
.218f	20 18 22	jsr $2218			jsr 	ForceStandardMode
.2192	a2 04		ldx #$04		ldx	#4
.2194	20 f6 14	jsr $14f6		jsr	deviceHandler
.2197	a0 ff		ldy #$ff			ldy 	#255
.2199					_CSBanner:
.2199	c8		iny				iny
.219a	b9 c0 21	lda $21c0,y			lda 	Intro,y
.219d	f0 14		beq $21b3			beq 	_CSStart
.219f	c9 08		cmp #$08			cmp 	#8
.21a1	90 08		bcc $21ab			bcc 	_CSInk
.21a3	a2 16		ldx #$16		ldx	#22
.21a5	20 f6 14	jsr $14f6		jsr	deviceHandler
.21a8	4c 99 21	jmp $2199			jmp 	_CSBanner
.21ab					_CSInk:
.21ab	a2 08		ldx #$08		ldx	#8
.21ad	20 f6 14	jsr $14f6		jsr	deviceHandler
.21b0	4c 99 21	jmp $2199			jmp 	_CSBanner
.21b3					_CSStart:
.21b3	a2 16		ldx #$16		ldx	#22
.21b5	20 0f 3a	jsr $3a0f		jsr	mainHandler
.21b8	a2 06		ldx #$06		ldx	#6
.21ba	20 0f 3a	jsr $3a0f		jsr	mainHandler
.21bd	4c d8 22	jmp $22d8			jmp 	WarmStartEntry
>21c0	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>21c8	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>21d8	20 2a 2a 2a 0d 0d
>21de	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>21e6	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>21f6	32 30 32 31 0d 0d
>21fc	02 42 61 73 69 63 20				.text 	2,"Basic "
>2203	30 2e 32 30					.text "0.20"
>2207	20 28						.text 	" ("
>2209	33 30 2d 4d 61 72 2d 32				.text "30-Mar-2021"
>2211	30 32 31
>2214	29 0d 0d 00					.text 	")",13,13,0
.2218					ForceStandardMode:
.2218	a9 fe		lda #$fe			lda 	#$FE
.221a	20 69 18	jsr $1869		jsr	extensionHandler
.221d	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.221e					DeleteLine:
.221e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2221	85 2a		sta $2a				sta 	temp0
.2223	ad c9 0a	lda $0ac9			lda 	basePage+1
.2226	85 2b		sta $2b				sta 	temp0+1
.2228	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.222a	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.222c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.222e	d0 07		bne $2237			bne 	_DLNext
.2230	c8		iny				iny
.2231	a5 a0		lda $a0				lda 	esInt1
.2233	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2235	f0 06		beq $223d			beq 	_DLFound
.2237	20 5b 22	jsr $225b	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.223a	d0 ec		bne $2228			bne 	_DLLoop
.223c	60		rts				rts
.223d					_DLFound:
.223d	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.223f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2241	a8		tay				tay 								; so we copy from (temp0),y
.2242	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2244					_DLCopyDown:
.2244	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2246	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2248	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.224a	d0 02		bne $224e			bne 	_DLNoCarry
.224c	e6 2b		inc $2b				inc 	temp0+1
.224e					_DLNoCarry:
.224e	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.2250	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.2252	d0 f0		bne $2244			bne 	_DLCopyDown
.2254	a5 2b		lda $2b				lda 	temp0+1
.2256	c5 36		cmp $36				cmp 	lowMemory+1
.2258	d0 ea		bne $2244			bne 	_DLCopyDown
.225a	60		rts				rts
.225b					IAdvanceTemp0:
.225b	84 32		sty $32				sty 	tempShort
.225d	18		clc				clc
.225e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2260	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.2262	65 2a		adc $2a				adc 	temp0
.2264	85 2a		sta $2a				sta 	temp0
.2266	90 02		bcc $226a			bcc 	_IATNoCarry
.2268	e6 2b		inc $2b				inc 	temp0+1
.226a					_IATNoCarry:
.226a	b1 2a		lda ($2a),y			lda 	(temp0),y
.226c	a4 32		ldy $32				ldy 	tempShort
.226e	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.2270	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.2271					InsertLine:
.2271	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2274	85 2a		sta $2a				sta 	temp0
.2276	ad c9 0a	lda $0ac9			lda 	basePage+1
.2279	85 2b		sta $2b				sta 	temp0+1
.227b					_ILLoop:
.227b	a0 01		ldy #$01			ldy 	#1
.227d	b1 2a		lda ($2a),y			lda 	(temp0),y
.227f	c5 98		cmp $98				cmp 	esInt0
.2281	c8		iny				iny
.2282	b1 2a		lda ($2a),y			lda 	(temp0),y
.2284	e5 a0		sbc $a0				sbc 	esInt1
.2286	b0 05		bcs $228d			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2288	20 5b 22	jsr $225b			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.228b	d0 ee		bne $227b			bne 	_ILLoop
.228d					_ILFound:
.228d	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.228f	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.2291	a5 36		lda $36				lda 	lowMemory+1
.2293	85 2d		sta $2d				sta 	temp1+1
.2295	ad 0d 0e	lda $0e0d			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2298	18		clc				clc 								; add 3 for the line number and offset.
.2299	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.229b	a8		tay				tay
.229c	a2 00		ldx #$00			ldx 	#0
.229e	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.22a0	91 2c		sta ($2c),y			sta 	(temp1),y
.22a2	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.22a4	c5 2a		cmp $2a				cmp 	temp0
.22a6	d0 06		bne $22ae			bne 	_ILMNext
.22a8	a5 2d		lda $2d				lda 	temp1+1
.22aa	c5 2b		cmp $2b				cmp 	temp0+1
.22ac	f0 0b		beq $22b9			beq 	_ILMCopy
.22ae					_ILMNext:
.22ae	a5 2c		lda $2c				lda 	temp1
.22b0	d0 02		bne $22b4			bne 	_ILNoBorrow
.22b2	c6 2d		dec $2d				dec 	temp1+1
.22b4					_ILNoBorrow:
.22b4	c6 2c		dec $2c				dec 	temp1
.22b6	4c 9e 22	jmp $229e			jmp 	_ILMove 					; and go round again
.22b9					_ILMCopy:
.22b9	98		tya				tya 								; Y is the offset of the new line.
.22ba	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.22bc	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.22be	a5 98		lda $98				lda 	esInt0
.22c0	91 2a		sta ($2a),y			sta 	(temp0),y
.22c2	c8		iny				iny
.22c3	a5 a0		lda $a0				lda 	esInt1
.22c5	91 2a		sta ($2a),y			sta 	(temp0),y
.22c7	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.22c9					_ILMCopy2:
.22c9	b1 28		lda ($28),y			lda 	(codePtr),y
.22cb	c8		iny				iny
.22cc	c8		iny				iny
.22cd	c8		iny				iny
.22ce	91 2a		sta ($2a),y			sta 	(temp0),y
.22d0	88		dey				dey
.22d1	88		dey				dey
.22d2	cc 0d 0e	cpy $0e0d			cpy 	tokenBufferIndex
.22d5	d0 f2		bne $22c9			bne 	_ILMCopy2
.22d7	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.22d8					WarmStartEntry:
.22d8	a2 ff		ldx #$ff			ldx 	#$FF
.22da	9a		txs				txs
.22db	20 18 22	jsr $2218			jsr 	ForceStandardMode
.22de	a9 02		lda #$02			lda 	#2							; green text.
.22e0	a2 08		ldx #$08		ldx	#8
.22e2	20 f6 14	jsr $14f6		jsr	deviceHandler
.22e5	a2 0c		ldx #$0c		ldx	#12
.22e7	20 f6 14	jsr $14f6		jsr	deviceHandler
.22ea	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.22ec	85 28		sta $28				sta 	codePtr
.22ee	a5 2b		lda $2b				lda 	temp0+1
.22f0	85 29		sta $29				sta 	codePtr+1
.22f2	a2 06		ldx #$06		ldx	#6
.22f4	20 f6 14	jsr $14f6		jsr	deviceHandler
.22f7	a2 08		ldx #$08		ldx	#8
.22f9	20 45 45	jsr $4545		jsr	tokeniserHandler
.22fc	c9 00		cmp #$00			cmp 	#0
.22fe	f0 25		beq $2325			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2300	a9 0a		lda #$0a			lda 	#(tokenHeader) & $FF
.2302	85 28		sta $28				sta 	codePtr
.2304	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.2306	85 29		sta $29				sta 	1+(codePtr)
.2308	ad 0d 0d	lda $0d0d			lda 	tokenBuffer 				; is it a blank line, go get another line.
.230b	c9 80		cmp #$80			cmp 	#$80
.230d	f0 c9		beq $22d8			beq 	WarmStartEntry
.230f	29 c0		and #$c0			and 	#$C0						; does it start with a number
.2311	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.2313	f0 15		beq $232a			beq 	HasLineNumber
.2315	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2317	8d 0a 0d	sta $0d0a			sta 	tokenHeader 				; fake program line.
.231a	8d 0b 0d	sta $0d0b			sta 	tokenHeader+1
.231d	8d 0c 0d	sta $0d0c			sta 	tokenHeader+2
.2320	a2 18		ldx #$18		ldx	#24
.2322	20 0f 3a	jsr $3a0f		jsr	mainHandler
.2325					WSEError:
.2325	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2327	20 18 15	jsr $1518		jsr	errorHandler
.232a					HasLineNumber:
.232a	a0 03		ldy #$03			ldy 	#3 							; get line number
.232c	a9 00		lda #$00			lda 	#0
.232e	a2 0a		ldx #$0a		ldx	#10
.2330	20 0f 3a	jsr $3a0f		jsr	mainHandler
.2333	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.2335	05 b0		ora $b0				ora 	esInt3
.2337	d0 ec		bne $2325			bne 	WSEError
.2339	98		tya				tya 								; make codePtr point to code after the line number.
.233a	18		clc				clc 								; by skipping over the tokenised number.
.233b	65 28		adc $28				adc 	codePtr
.233d	85 28		sta $28				sta 	codePtr
.233f	90 02		bcc $2343			bcc		_HLNNoCarry
.2341	e6 29		inc $29				inc 	codePtr+1
.2343					_HLNNoCarry:
.2343	98		tya				tya 								; subtract that offset from the code buffer index
.2344	38		sec				sec
.2345	49 ff		eor #$ff			eor 	#$FF
.2347	6d 0d 0e	adc $0e0d			adc 	tokenBufferIndex
.234a	18		clc				clc 								; add space allowing for header & $80 trailer
.234b	69 04		adc #$04			adc 	#4
.234d	8d 0d 0e	sta $0e0d			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2350	20 1e 22	jsr $221e			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.2353					_HLNNoDelete:
.2353	ad 0d 0e	lda $0e0d			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2356	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2358	f0 0c		beq $2366			beq 	_HLMEditDone
.235a	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.235c	18		clc				clc 								; workspace (1k)
.235d	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.235f	c5 34		cmp $34				cmp 	highMemory+1
.2361	b0 0b		bcs $236e			bcs 	_HLMMemory 					; nope, won't allowit.
.2363	20 71 22	jsr $2271			jsr 	InsertLine 					; insert the line in
.2366					_HLMEditDone:
.2366	a2 06		ldx #$06		ldx	#6
.2368	20 0f 3a	jsr $3a0f		jsr	mainHandler
.236b	4c d8 22	jmp $22d8			jmp 	WarmStartEntry
.236e					_HLMMemory:
.236e	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2370	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2373					interactionHandler:
.2373	7c 76 23	jmp ($2376,x)			jmp 	(interactionVectors,x)
.2376					interactionVectors:
>2376	7c 23					.word _DummyControlHandler ; index 0
>2378	8c 21					.word ColdStartEntry       ; index 2
>237a	d8 22					.word WarmStartEntry       ; index 4
.237c					_DummyControlHandler:
.237c	60		rts			rts

;******  Return to file: basic.asm

.237d					section_end_interaction:
.237d					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cd0					dataPtr:
>0cd0							.fill 	2
.0cd2					dataIndex:
>0cd2							.fill 	1
.237d					CommandRead:
.237d	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.237f	20 c2 32	jsr $32c2			jsr 	EvaluateReference
.2382	20 c3 23	jsr $23c3			jsr 	SwapDPCP 					; use the data pointer.
.2385	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2387	c8		iny				iny
.2388	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.238a	f0 07		beq $2393			beq 	_CRInData
.238c	88		dey				dey
.238d	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.238f	aa		tax				tax
.2390	20 c4 2a	jsr $2ac4			jsr 	ScanForward
.2393					_CRInData:
.2393	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2395	20 6a 32	jsr $326a			jsr 	Evaluate
.2398	ca		dex				dex 								; and write the value.
.2399	20 17 26	jsr $2617			jsr 	WriteValue
.239c	20 c3 23	jsr $23c3			jsr 	SwapDPCP 					; get the code pointer back.
.239f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.23a1	c8		iny				iny
.23a2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.23a4	f0 d7		beq $237d			beq 	CommandRead
.23a6	88		dey				dey
.23a7	60		rts				rts
.23a8					CommandData:
.23a8	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.23aa	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.23ac	20 c4 2a	jsr $2ac4			jsr 	ScanForward
.23af	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.23b0	60		rts				rts
.23b1					CommandRestore:
.23b1	ad c8 0a	lda $0ac8			lda 	basePage
.23b4	8d d0 0c	sta $0cd0			sta 	dataPtr
.23b7	ad c9 0a	lda $0ac9			lda 	basePage+1
.23ba	8d d1 0c	sta $0cd1			sta 	dataPtr+1
.23bd	a9 03		lda #$03			lda 	#3
.23bf	8d d2 0c	sta $0cd2			sta 	dataIndex
.23c2	60		rts				rts
.23c3					SwapDPCP:
.23c3	8a		txa				txa
.23c4	48		pha				pha
.23c5	98		tya				tya 								; swap Y, DataIndex
.23c6	ac d2 0c	ldy $0cd2			ldy 	DataIndex
.23c9	8d d2 0c	sta $0cd2			sta 	DataIndex
.23cc	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.23ce	ae d0 0c	ldx $0cd0			ldx 	dataptr
.23d1	8d d0 0c	sta $0cd0			sta 	dataPtr
.23d4	86 28		stx $28				stx 	codePtr
.23d6	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.23d8	ae d1 0c	ldx $0cd1			ldx 	dataptr+1
.23db	8d d1 0c	sta $0cd1			sta 	dataPtr+1
.23de	86 29		stx $29				stx 	codePtr+1
.23e0	68		pla				pla
.23e1	aa		tax				tax
.23e2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.23e3					CommandGOSUB:
.23e3	20 87 32	jsr $3287			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.23e6	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.23e8	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.23ea	20 bc 39	jsr $39bc			jsr 	RSClaim
.23ed	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.23ef	20 e8 39	jsr $39e8			jsr 	RSSavePosition
.23f2	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.23f4	f0 1b		beq $2411			beq 	GotoTOS 					; and do a GOTO there.
.23f6					CommandRETURN:
.23f6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.23f8	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23fa	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.23fc	f0 05		beq $2403			beq 	_isok
.23fe	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2400	20 18 15	jsr $1518		jsr	errorHandler
.2403					_isok:
.2403	a9 01		lda #$01			lda 	#1
.2405	20 fb 39	jsr $39fb			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2408	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.240a	20 de 39	jsr $39de			jsr 	RSFree
.240d	60		rts				rts
.240e					CommandGOTO:
.240e	20 87 32	jsr $3287			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2411					GotoTOS:
.2411	20 a8 2d	jsr $2da8			jsr 	ResetCodeAddress 			; simple search.
.2414					_GotoSearch:
.2414	a0 00		ldy #$00			ldy 	#0 							; get offset
.2416	b1 28		lda ($28),y			lda 	(codePtr),y
.2418	f0 21		beq $243b			beq 	_GotoError 					; not found.
.241a	c8		iny				iny									; check LSB match
.241b	b1 28		lda ($28),y			lda 	(codePtr),y
.241d	d5 98		cmp $98,x			cmp 	esInt0,x
.241f	d0 07		bne $2428			bne 	_GotoNext
.2421	c8		iny				iny
.2422	b1 28		lda ($28),y			lda 	(codePtr),y
.2424	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2426	f0 10		beq $2438			beq 	_GotoFound
.2428					_GotoNext:
.2428	a0 00		ldy #$00			ldy 	#0 							; go next line
.242a	b1 28		lda ($28),y			lda 	(codePtr),y
.242c	18		clc				clc
.242d	65 28		adc $28				adc 	codePtr
.242f	85 28		sta $28				sta 	codePtr
.2431	90 e1		bcc $2414			bcc 	_GotoSearch
.2433	e6 29		inc $29				inc 	codePtr+1
.2435	4c 14 24	jmp $2414			jmp 	_GotoSearch
.2438					_GotoFound:
.2438	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.243a	60		rts				rts
.243b					_GotoError:
.243b	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.243d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cd3					InputBuffer:
>0cd3							.fill 	MaxInputSize+1
.2440					Command_Input:
.2440	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2442	c8		iny				iny
.2443	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2445	f0 f9		beq $2440			beq 	Command_Input
.2447	88		dey				dey 							; undo consume
.2448	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.244a	f0 54		beq $24a0			beq 	_CIExit 				; : or EOL, exit
.244c	c9 80		cmp #$80			cmp 	#TOK_EOL
.244e	f0 50		beq $24a0			beq 	_CIExit
.2450	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2452	90 12		bcc $2466			bcc 	_CIVariable
.2454	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2456	d0 43		bne $249b			bne 	_CISyntax
.2458	a2 00		ldx #$00			ldx 	#0
.245a	20 7e 32	jsr $327e			jsr 	EvaluateString 			; evaluate and print string
.245d	20 79 26	jsr $2679			jsr 	TOSToTemp0
.2460	20 6f 25	jsr $256f			jsr 	PrintString
.2463	4c 40 24	jmp $2440			jmp 	Command_Input
.2466					_CIVariable:
.2466	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2468	20 c2 32	jsr $32c2			jsr 	EvaluateReference  		; this is where its going
.246b					_CIRetry:
.246b	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.246d	a2 14		ldx #$14		ldx	#20
.246f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2472	98		tya				tya
.2473	48		pha				pha
.2474	20 b4 24	jsr $24b4			jsr 	InputString 			; input a string (manually)
.2477	a2 01		ldx #$01			ldx 	#1
.2479	20 a1 24	jsr $24a1			jsr 	BufferToStackX 			; make stack,x ref input string.
.247c	a5 90		lda $90				lda 	esType 					; if target type numeric
.247e	29 40		and #$40			and 	#$40 					; then convert to number
.2480	d0 11		bne $2493			bne 	_CIWrite
.2482	a2 01		ldx #$01			ldx 	#1
.2484	20 79 26	jsr $2679			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2487	a9 0a		lda #$0a			lda 	#10
.2489	20 8f 37	jsr $378f			jsr 	MInt32FromString 		; convert it back from a string.
.248c	68		pla				pla
.248d	a8		tay				tay
.248e	b0 03		bcs $2493			bcs 	_CIWrite 				; successfully converted.
.2490	18		clc				clc 							; default fail FP conversion
.2491	90 d8		bcc $246b			bcc		_CIRetry				; failed, try again.
.2493					_CIWrite:
.2493	a2 00		ldx #$00			ldx 	#0
.2495	20 17 26	jsr $2617			jsr 	WriteValue
.2498	4c 40 24	jmp $2440			jmp 	Command_Input
.249b					_CISyntax:
.249b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.249d	20 18 15	jsr $1518		jsr	errorHandler
.24a0					_CIExit:
.24a0	60		rts				rts
.24a1					BufferToStackX:
.24a1	a9 d3		lda #$d3			lda 	#InputBuffer & $FF
.24a3	95 98		sta $98,x			sta 	esInt0,x
.24a5	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.24a7	95 a0		sta $a0,x			sta 	esInt1,x
.24a9	a9 00		lda #$00			lda 	#0
.24ab	95 a8		sta $a8,x			sta 	esInt2,x
.24ad	95 b0		sta $b0,x			sta 	esInt3,x
.24af	a9 40		lda #$40			lda 	#$40
.24b1	95 90		sta $90,x			sta 	esType,x
.24b3	60		rts				rts
.24b4					InputString:
.24b4	a9 00		lda #$00			lda 	#0
.24b6	8d d3 0c	sta $0cd3			sta 	InputBuffer
.24b9					_InputLoop:
.24b9	a2 02		ldx #$02		ldx	#2
.24bb	20 f6 14	jsr $14f6		jsr	deviceHandler
.24be	a2 0a		ldx #$0a		ldx	#10
.24c0	20 f6 14	jsr $14f6		jsr	deviceHandler
.24c3	c9 00		cmp #$00			cmp 	#0
.24c5	f0 f2		beq $24b9			beq 	_InputLoop
.24c7	c9 08		cmp #$08			cmp 	#8
.24c9	f0 19		beq $24e4			beq 	_InputBackspace
.24cb	c9 0d		cmp #$0d			cmp 	#13
.24cd	f0 21		beq $24f0			beq 	_InputExit
.24cf	ae d3 0c	ldx $0cd3			ldx 	InputBuffer
.24d2	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.24d4	f0 e3		beq $24b9			beq 	_InputLoop
.24d6	9d d4 0c	sta $0cd4,x			sta 	InputBuffer+1,x 		; write char
.24d9	ee d3 0c	inc $0cd3			inc 	InputBuffer 			; advance count.
.24dc					_InputPrintLoop:
.24dc	a2 14		ldx #$14		ldx	#20
.24de	20 f6 14	jsr $14f6		jsr	deviceHandler
.24e1	4c b9 24	jmp $24b9			jmp	 	_InputLoop
.24e4					_InputBackspace:
.24e4	ad d3 0c	lda $0cd3			lda 	InputBuffer 			; at start
.24e7	f0 d0		beq $24b9			beq 	_InputLoop
.24e9	ce d3 0c	dec $0cd3			dec 	InputBuffer
.24ec	a9 08		lda #$08			lda 	#8
.24ee	d0 ec		bne $24dc			bne 	_InputPrintLoop
.24f0					_InputExit:
.24f0	a2 06		ldx #$06		ldx	#6
.24f2	20 f6 14	jsr $14f6		jsr	deviceHandler
.24f5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cf4					lastPrintToken:
>0cf4							.fill 	1
.24f6					Command_Print:
.24f6	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.24f8	8d f4 0c	sta $0cf4			sta 	lastPrintToken
.24fb	88		dey				dey
.24fc					_PrintLoopSkip:
.24fc	c8		iny				iny
.24fd					_PrintLoop:
.24fd	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.24ff	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2501	f0 5b		beq $255e			beq 	_PrintExit
.2503	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2505	f0 57		beq $255e			beq 	_PrintExit
.2507	8d f4 0c	sta $0cf4			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.250a	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.250c	f0 ee		beq $24fc			beq 	_PrintLoopSkip
.250e	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2510	f0 3c		beq $254e			beq	 	_PrintNewLine
.2512	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2514	f0 40		beq $2556			beq 	_PrintTab
.2516	20 68 32	jsr $3268			jsr 	EvaluateRoot 				; evaluate something at the root
.2519	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.251b	85 2a		sta $2a				sta 	temp0
.251d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.251f	85 2b		sta $2b				sta 	1+(temp0)
.2521	a5 90		lda $90				lda 	esType 						; get type
.2523	f0 15		beq $253a			beq		_PrintInteger
.2525	4a		lsr a				lsr 	a 							; check for floating point
.2526	b0 08		bcs $2530			bcs 	_PrintFloat
.2528					_PrintString:
.2528	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.252a	20 79 26	jsr $2679			jsr 	TOSToTemp0
.252d	4c 48 25	jmp $2548			jmp 	_PrintTemp0 				; print no leading space.
.2530					_PrintFloat:
.2530	a9 00		lda #$00			lda 	#0 							; stack level.
.2532	a2 16		ldx #$16		ldx	#22
.2534	20 87 21	jsr $2187		jsr	floatingpointHandler
.2537	4c 41 25	jmp $2541			jmp 	_PrintSpaceTemp0
.253a					_PrintInteger:
.253a	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.253c	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.253e	20 77 38	jsr $3877			jsr 	MInt32ToString				; convert to text
.2541					_PrintSpaceTemp0:
.2541	a9 20		lda #$20			lda 	#32
.2543	a2 14		ldx #$14		ldx	#20
.2545	20 f6 14	jsr $14f6		jsr	deviceHandler
.2548					_PrintTemp0:
.2548	20 6f 25	jsr $256f			jsr 	PrintString
.254b	4c fd 24	jmp $24fd			jmp 	_PrintLoop
.254e					_PrintNewLine:
.254e	a2 06		ldx #$06		ldx	#6
.2550	20 f6 14	jsr $14f6		jsr	deviceHandler
.2553	4c fc 24	jmp $24fc			jmp 	_PrintLoopSkip
.2556					_PrintTab:
.2556	a2 1a		ldx #$1a		ldx	#26
.2558	20 f6 14	jsr $14f6		jsr	deviceHandler
.255b	4c fc 24	jmp $24fc			jmp 	_PrintLoopSkip
.255e					_PrintExit:
.255e	ad f4 0c	lda $0cf4			lda		lastPrintToken 				; check last token
.2561	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2563	f0 09		beq $256e			beq 	_PrintExit2
.2565	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2567	f0 05		beq $256e			beq 	_PrintExit2
.2569	a2 06		ldx #$06		ldx	#6
.256b	20 f6 14	jsr $14f6		jsr	deviceHandler
.256e					_PrintExit2:
.256e	60		rts				rts
.256f					PrintString:
.256f	8a		txa				txa
.2570	48		pha				pha
.2571	98		tya				tya
.2572	48		pha				pha
.2573	a0 00		ldy #$00			ldy 	#0							; get length
.2575	b1 2a		lda ($2a),y			lda 	(temp0),y
.2577	aa		tax				tax 								; into X
.2578	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.257a	f0 10		beq $258c			beq 	_PSExit
.257c	ca		dex				dex
.257d	8a		txa				txa
.257e	48		pha				pha
.257f	c8		iny				iny
.2580	b1 2a		lda ($2a),y			lda 	(temp0),y
.2582	a2 14		ldx #$14		ldx	#20
.2584	20 f6 14	jsr $14f6		jsr	deviceHandler
.2587	68		pla				pla
.2588	aa		tax				tax
.2589	4c 78 25	jmp $2578			jmp 	_PSLoop
.258c					_PSExit:
.258c	68		pla				pla
.258d	a8		tay				tay
.258e	68		pla				pla
.258f	aa		tax				tax
.2590	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2591					Command_CLS:
.2591	a2 04		ldx #$04		ldx	#4
.2593	20 f6 14	jsr $14f6		jsr	deviceHandler
.2596	60		rts				rts
.2597					Command_Ink:
.2597	a2 00		ldx #$00			ldx 	#0
.2599	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger
.259c	a2 08		ldx #$08		ldx	#8
.259e	20 f6 14	jsr $14f6		jsr	deviceHandler
.25a1	60		rts				rts
.25a2					Command_Paper:
.25a2	a2 00		ldx #$00			ldx 	#0
.25a4	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger
.25a7	a2 12		ldx #$12		ldx	#18
.25a9	20 f6 14	jsr $14f6		jsr	deviceHandler
.25ac	60		rts				rts
.25ad					Command_Locate:
.25ad	a2 00		ldx #$00			ldx 	#0
.25af	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger
.25b2	20 a1 39	jsr $39a1			jsr 	CheckComma
.25b5	e8		inx				inx
.25b6	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger
.25b9	98		tya				tya
.25ba	48		pha				pha
.25bb	a4 99		ldy $99				ldy 	esInt0+1
.25bd	a5 98		lda $98				lda 	esInt0
.25bf	a2 10		ldx #$10		ldx	#16
.25c1	20 f6 14	jsr $14f6		jsr	deviceHandler
.25c4	68		pla				pla
.25c5	a8		tay				tay
.25c6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.25c7					Command_VDU:
.25c7	20 87 32	jsr $3287			jsr 	EvaluateRootInteger 			; get integer at root.
.25ca	a5 98		lda $98				lda 	esInt0
.25cc	a2 14		ldx #$14		ldx	#20
.25ce	20 f6 14	jsr $14f6		jsr	deviceHandler
.25d1					_CVNext:
.25d1	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.25d3	c8		iny				iny
.25d4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.25d6	f0 ef		beq $25c7			beq 	Command_VDU
.25d8	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.25da	d0 0a		bne $25e6			bne 	_CVExit
.25dc	a5 a0		lda $a0				lda 	esInt1
.25de	a2 14		ldx #$14		ldx	#20
.25e0	20 f6 14	jsr $14f6		jsr	deviceHandler
.25e3	4c d1 25	jmp $25d1			jmp 	_CVNext
.25e6	88		dey		_CVExit:dey
.25e7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.25e8					Command_Assert:
.25e8	20 87 32	jsr $3287			jsr 	EvaluateRootInteger 		; what is being asserted.
.25eb	20 48 39	jsr $3948			jsr 	MInt32Zero 					; is it true ?
.25ee	f0 01		beq $25f1			beq 	_CAError
.25f0	60		rts				rts
.25f1					_CAError:
.25f1	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.25f3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.25f6					Command_Dim:
.25f6	a2 04		ldx #$04		ldx	#4
.25f8	20 16 49	jsr $4916		jsr	variableHandler
.25fb	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.25fd	c8		iny				iny
.25fe	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2600	f0 f4		beq $25f6			beq 	Command_Dim
.2602	88		dey				dey 								; unpick get
.2603	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2604					CommandLet:
.2604	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2606	20 c2 32	jsr $32c2			jsr 	EvaluateReference
.2609	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.260b	20 89 39	jsr $3989			jsr 	CheckToken
.260e	e8		inx				inx 								; do RHS
.260f	20 6a 32	jsr $326a			jsr 	Evaluate 					; evaluate and dereference
.2612	ca		dex				dex
.2613	20 17 26	jsr $2617			jsr 	WriteValue 					; write it out
.2616	60		rts				rts
.2617					WriteValue:
.2617	98		tya				tya
.2618	48		pha				pha
.2619	20 79 26	jsr $2679			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.261c	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.261e	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2620	29 40		and #$40			and 	#$40
.2622	d0 50		bne $2674			bne		_WVType
.2624	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2626	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2628	29 40		and #$40			and 	#$40
.262a	d0 1f		bne $264b			bne 	_WVCopyString
.262c	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.262e	15 91		ora $91,x			ora 	esType+1,x
.2630	4a		lsr a				lsr 	a
.2631	90 22		bcc $2655			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2633	b5 90		lda $90,x			lda 	esType,x
.2635	4a		lsr a				lsr 	a
.2636	90 3c		bcc $2674			bcc 	_WVType
.2638	e8		inx				inx 								; force the value being written to be a float.
.2639	20 cc 2e	jsr $2ecc			jsr 	BPMakeFloat
.263c	ca		dex				dex
.263d	20 79 26	jsr $2679			jsr 	TOSToTemp0 					; set Temp0 to write address
.2640	e8		inx				inx
.2641	8a		txa				txa
.2642	a2 22		ldx #$22		ldx	#34
.2644	20 87 21	jsr $2187		jsr	floatingpointHandler
.2647	aa		tax				tax
.2648	4c 71 26	jmp $2671			jmp 	_WVCopyExit
.264b					_WVCopyString:
.264b	8a		txa				txa
.264c	a2 10		ldx #$10		ldx	#16
.264e	20 cc 3c	jsr $3ccc		jsr	stringHandler
.2651	aa		tax				tax
.2652	4c 71 26	jmp $2671			jmp 	_WVCopyExit
.2655					_WVCopyData4:
.2655	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2657	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2659	d0 10		bne $266b			bne 	_WVCopyData1
.265b	a0 03		ldy #$03			ldy 	#3
.265d	b5 b1		lda $b1,x			lda 	esInt3+1,x
.265f	91 2a		sta ($2a),y			sta 	(temp0),y
.2661	88		dey				dey
.2662	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2664	91 2a		sta ($2a),y			sta 	(temp0),y
.2666	88		dey				dey
.2667	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2669	91 2a		sta ($2a),y			sta 	(temp0),y
.266b					_WVCopyData1:
.266b	a0 00		ldy #$00			ldy 	#0
.266d	b5 99		lda $99,x			lda 	esInt0+1,x
.266f	91 2a		sta ($2a),y			sta 	(temp0),y
.2671					_WVCopyExit:
.2671	68		pla				pla
.2672	a8		tay				tay
.2673	60		rts				rts
.2674					_WVType:
.2674	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2676	20 18 15	jsr $1518		jsr	errorHandler
.2679					TOSToTemp0:
.2679	b5 98		lda $98,x			lda 	esInt0,x
.267b	85 2a		sta $2a				sta 	temp0
.267d	b5 a0		lda $a0,x			lda 	esInt1,x
.267f	85 2b		sta $2b				sta 	temp0+1
.2681	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2682					Command_Poke:
.2682	a9 01		lda #$01			lda 	#1
.2684	d0 06		bne $268c			bne 	PokeGeneral
.2686					Command_Doke:
.2686	a9 02		lda #$02			lda 	#2
.2688	d0 02		bne $268c			bne 	PokeGeneral
.268a					Command_Loke:
.268a	a9 03		lda #$03			lda 	#3
.268c					PokeGeneral:
.268c	48		pha				pha 								; save id (PDL = 123)
.268d	20 87 32	jsr $3287			jsr 	EvaluateRootInteger 		; target address
.2690	20 a1 39	jsr $39a1			jsr	 	CheckComma
.2693	e8		inx				inx
.2694	20 89 32	jsr $3289			jsr 	EvaluateInteger 			; what value to POKE ?
.2697	ca		dex				dex
.2698	20 79 26	jsr $2679			jsr 	TOSToTemp0 					; temp0 points to the target address
.269b	84 32		sty $32				sty 	tempShort 					; save Y
.269d	68		pla				pla 								; get copy type (1-3) and dispatch
.269e	aa		tax				tax
.269f	ca		dex				dex
.26a0	f0 14		beq $26b6			beq 	_Poke1
.26a2	ca		dex				dex
.26a3	f0 0b		beq $26b0			beq 	_Poke2
.26a5	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.26a7	a5 b1		lda $b1				lda 	esInt3+1
.26a9	91 2a		sta ($2a),y			sta 	(temp0),y
.26ab	88		dey				dey
.26ac	a5 a9		lda $a9				lda 	esInt2+1
.26ae	91 2a		sta ($2a),y			sta 	(temp0),y
.26b0					_Poke2:
.26b0	a0 01		ldy #$01			ldy 	#1
.26b2	a5 a1		lda $a1				lda 	esInt1+1
.26b4	91 2a		sta ($2a),y			sta 	(temp0),y
.26b6					_Poke1:
.26b6	a0 00		ldy #$00			ldy 	#0
.26b8	a5 99		lda $99				lda 	esInt0+1
.26ba	91 2a		sta ($2a),y			sta 	(temp0),y
.26bc	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.26be	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.26bf					Command_Rem:
.26bf					Command_Rem2:
.26bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.26c1	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.26c3	d0 06		bne $26cb			bne 	_CRNotString
.26c5	c8		iny				iny
.26c6	98		tya				tya
.26c7	38		sec				sec
.26c8	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.26ca	a8		tay				tay
.26cb					_CRNotString:
.26cb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.26cc					CommandStop:
.26cc	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.26ce	20 18 15	jsr $1518		jsr	errorHandler
.26d1					CommandEnd:
.26d1	4c 0a 3a	jmp $3a0a			jmp 	WarmStart
.26d4					CommandXemu:
.26d4	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.26d7					AdvanceNextLine:
.26d7	a0 00		ldy #$00			ldy 	#0 							; get offset
.26d9	b1 28		lda ($28),y			lda 	(codePtr),y
.26db	18		clc				clc 								; add to codePtr
.26dc	65 28		adc $28				adc 	codePtr
.26de	85 28		sta $28				sta 	codePtr
.26e0	90 02		bcc $26e4			bcc 	_ANLNoCarry
.26e2	e6 29		inc $29				inc 	codePtr+1
.26e4					_ANLNoCarry:
.26e4	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.26e6	f0 e9		beq $26d1			beq 	CommandEnd 					; execute END
.26e8	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.26ea	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.26eb					Command_FOR:
.26eb	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.26ed	a2 0b		ldx #$0b			ldx 	#11
.26ef	20 bc 39	jsr $39bc			jsr 	RSClaim
.26f2	20 04 26	jsr $2604			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.26f5	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.26f7	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.26f9	d0 4c		bne $2747			bne 	_CFType
.26fb	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.26fd	20 89 39	jsr $3989			jsr 	CheckToken
.2700	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2702	20 89 32	jsr $3289			jsr 	EvaluateInteger				; get terminal value in stack 1
.2705	98		tya				tya
.2706	48		pha				pha
.2707	a0 04		ldy #$04			ldy 	#4
.2709	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.270b	91 37		sta ($37),y			sta 	(rsPointer),y
.270d	c8		iny				iny
.270e	a5 a0		lda $a0				lda		esInt1
.2710	91 37		sta ($37),y			sta 	(rsPointer),y
.2712	c8		iny				iny
.2713	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2715	91 37		sta ($37),y			sta 	(rsPointer),y
.2717	c8		iny				iny
.2718	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.271a	91 37		sta ($37),y			sta 	(rsPointer),y
.271c	c8		iny				iny
.271d	a5 a1		lda $a1				lda		esInt1+1
.271f	91 37		sta ($37),y			sta 	(rsPointer),y
.2721	c8		iny				iny
.2722	a5 a9		lda $a9				lda		esInt2+1
.2724	91 37		sta ($37),y			sta 	(rsPointer),y
.2726	c8		iny				iny
.2727	a5 b1		lda $b1				lda		esInt3+1
.2729	91 37		sta ($37),y			sta 	(rsPointer),y
.272b	68		pla				pla
.272c	a8		tay				tay
.272d	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.272f	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2731	d0 0e		bne $2741			bne 	_CFDone
.2733	c8		iny				iny									; skip over step.
.2734	20 89 32	jsr $3289			jsr 	EvaluateInteger 			; get step
.2737	98		tya				tya
.2738	48		pha				pha
.2739	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.273b	a0 06		ldy #$06			ldy 	#6
.273d	91 37		sta ($37),y			sta 	(rsPointer),y
.273f	68		pla				pla
.2740	a8		tay				tay
.2741					_CFDone:
.2741	a9 01		lda #$01			lda 	#1
.2743	20 e8 39	jsr $39e8			jsr 	RSSavePosition 				; save position.
.2746	60		rts				rts
.2747					_CFType:
.2747	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2749	20 18 15	jsr $1518		jsr	errorHandler
.274c					Command_NEXT:
.274c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.274e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2750	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2752	f0 05		beq $2759			beq 	_isok
.2754	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2756	20 18 15	jsr $1518		jsr	errorHandler
.2759					_isok:
.2759	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.275b	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.275d	b0 18		bcs $2777			bcs 	_CNNoIndex
.275f	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2761	20 c2 32	jsr $32c2			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2764	98		tya				tya
.2765	48		pha				pha
.2766	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2768	b1 37		lda ($37),y			lda 	(rsPointer),y
.276a	d5 98		cmp $98,x			cmp 	esInt0,x
.276c	d0 76		bne $27e4			bne 	_CNBadIndex
.276e	c8		iny				iny
.276f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2771	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2773	d0 6f		bne $27e4			bne 	_CNBadIndex
.2775	68		pla				pla
.2776	a8		tay				tay
.2777					_CNNoIndex:
.2777	98		tya				tya
.2778	48		pha				pha
.2779	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.277b	b1 37		lda ($37),y			lda 	(rsPointer),y
.277d	85 2a		sta $2a				sta 	temp0
.277f	c8		iny				iny
.2780	b1 37		lda ($37),y			lda 	(rsPointer),y
.2782	85 2b		sta $2b				sta 	temp0+1
.2784	c8		iny				iny
.2785	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2787	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2789	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.278b	10 01		bpl $278e			bpl 	_CNSignX
.278d	ca		dex				dex  								; X = $FF
.278e					_CNSignX:
.278e	18		clc				clc 								; add to the LSB
.278f	a0 00		ldy #$00			ldy 	#0
.2791	71 2a		adc ($2a),y			adc 	(temp0),y
.2793	91 2a		sta ($2a),y			sta 	(temp0),y
.2795					_CNPropogate:
.2795	c8		iny				iny  								; add the sign extended in X to the rest.
.2796	8a		txa				txa
.2797	71 2a		adc ($2a),y			adc 	(temp0),y
.2799	91 2a		sta ($2a),y			sta 	(temp0),y
.279b	c8		iny				iny
.279c	8a		txa				txa
.279d	71 2a		adc ($2a),y			adc 	(temp0),y
.279f	91 2a		sta ($2a),y			sta 	(temp0),y
.27a1	c8		iny				iny
.27a2	8a		txa				txa
.27a3	71 2a		adc ($2a),y			adc 	(temp0),y
.27a5	91 2a		sta ($2a),y			sta 	(temp0),y
.27a7	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.27a8	a5 37		lda $37				lda 	rsPointer
.27aa	69 07		adc #$07			adc 	#7
.27ac	85 2c		sta $2c				sta 	temp1
.27ae	a9 00		lda #$00			lda 	#0
.27b0	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.27b2	a8		tay				tay 								; and clear the Y register again.
.27b3	65 38		adc $38				adc 	rsPointer+1
.27b5	85 2d		sta $2d				sta 	temp1+1
.27b7	38		sec				sec 								; calculate current - limit oring interim values.
.27b8	20 f0 27	jsr $27f0			jsr 	_CNCompare 					; each of these does a byte.
.27bb	20 f0 27	jsr $27f0			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.27be	20 f0 27	jsr $27f0			jsr 	_CNCompare 					; and the carry of the subtraction.
.27c1	20 f0 27	jsr $27f0			jsr 	_CNCompare
.27c4	50 02		bvc $27c8			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.27c6	49 80		eor #$80			eor 	#$80
.27c8					_CNNoOverflow:
.27c8	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.27ca	30 1d		bmi $27e9			bmi 	_CNCheckDownto
.27cc	c9 00		cmp #$00			cmp 	#0
.27ce	30 0c		bmi $27dc			bmi 	_CNLoopRound 				; loop round if < =
.27d0	a5 2e		lda $2e				lda 	temp2
.27d2	f0 08		beq $27dc			beq 	_CNLoopRound
.27d4					_CNLoopExit:
.27d4	68		pla				pla
.27d5	a8		tay				tay
.27d6	a9 0b		lda #$0b			lda 	#11
.27d8	20 de 39	jsr $39de			jsr 	RSFree
.27db	60		rts				rts
.27dc					_CNLoopRound:
.27dc	68		pla				pla
.27dd	a8		tay				tay
.27de	a9 01		lda #$01			lda 	#1
.27e0	20 fb 39	jsr $39fb			jsr 	RSLoadPosition				; go back to the loop top
.27e3	60		rts				rts
.27e4					_CNBadIndex:
.27e4	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.27e6	20 18 15	jsr $1518		jsr	errorHandler
.27e9					_CNCheckDownto:
.27e9	c9 00		cmp #$00			cmp 	#0
.27eb	10 ef		bpl $27dc			bpl 	_CNLoopRound
.27ed	4c d4 27	jmp $27d4			jmp 	_CNLoopExit
.27f0					_CNCompare:
.27f0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.27f2	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.27f4	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.27f6	85 2e		sta $2e				sta 	temp2
.27f8	c8		iny				iny
.27f9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.27fa					CommandIf:
.27fa	20 87 32	jsr $3287			jsr 	EvaluateRootInteger 		; get what's being tested.
.27fd	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.27ff	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2801	f0 04		beq $2807			beq 	_IfSimple
.2803	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2805	d0 1b		bne $2822			bne 	_IfComplex
.2807					_IfSimple:
.2807	20 48 39	jsr $3948			jsr 	MInt32Zero					; check if TOS zero
.280a	f0 10		beq $281c			beq 	_IfEOL 						; go to next line.
.280c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.280e	c8		iny				iny
.280f	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2811	f0 0c		beq $281f			beq 	_IfGoto 					; do the Goto code
.2813	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2815	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2817	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2819	f0 04		beq $281f			beq 	_IfGoto
.281b	60		rts				rts 								; else continue on this line.
.281c					_IfEOL:
.281c	4c d7 26	jmp $26d7			jmp 	AdvanceNextLine 			; go to next line
.281f					_IfGoto:
.281f	4c 0e 24	jmp $240e			jmp 	CommandGoto
.2822					_IfComplex:
.2822	20 48 39	jsr $3948			jsr 	MInt32Zero 					; is it true ?
.2825	f0 01		beq $2828			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2827	60		rts				rts 								; else continue.
.2828					_IFSkip:
.2828	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.282a	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.282c	4c c4 2a	jmp $2ac4			jmp		ScanForward
.282f					Command_ELSE:
.282f	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2831	8a		txa				txa
.2832	4c c4 2a	jmp $2ac4			jmp		ScanForward
.2835					Command_ENDIF:
.2835	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cf5					storeSize:
>0cf5							.fill 	1
.2836					CommandLocal:
.2836	a2 00		ldx #$00			ldx 	#0
.2838	20 54 28	jsr $2854			jsr 	LocaliseVariable 			; localise one.
.283b					_CLCheckNext:
.283b	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.283d	c8		iny				iny
.283e	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2840	f0 06		beq $2848			beq 	_CLAssignment
.2842	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2844	f0 f0		beq $2836			beq 	CommandLocal
.2846	88		dey				dey
.2847	60		rts				rts
.2848					_CLAssignment:
.2848	a2 01		ldx #$01			ldx 	#1
.284a	20 6a 32	jsr $326a			jsr 	Evaluate 					; evaluate RHS
.284d	ca		dex				dex
.284e	20 17 26	jsr $2617			jsr 	WriteValue
.2851	4c 3b 28	jmp $283b			jmp 	_CLCheckNext
.2854					LocaliseVariable:
.2854	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2856	c9 40		cmp #$40			cmp 	#$40
.2858	b0 67		bcs $28c1			bcs 	_LVSyntax
.285a	8a		txa				txa 								; get the address of that variable.
.285b	a2 02		ldx #$02		ldx	#2
.285d	20 16 49	jsr $4916		jsr	variableHandler
.2860	aa		tax				tax
.2861	8a		txa				txa
.2862	48		pha				pha
.2863	98		tya				tya
.2864	48		pha				pha
.2865	20 79 26	jsr $2679			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2868	b5 90		lda $90,x			lda 	esType,x 					; get the type
.286a	0a		asl a				asl 	a
.286b	10 16		bpl $2883			bpl 	_LVPushNumber
.286d	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.286f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2871	c8		iny				iny
.2872	85 2c		sta $2c				sta 	temp1
.2874	b1 2a		lda ($2a),y			lda 	(temp0),y
.2876	85 2d		sta $2d				sta 	temp1+1
.2878	a0 00		ldy #$00			ldy 	#0 	 						; get length
.287a	b1 2c		lda ($2c),y			lda 	(temp1),y
.287c	aa		tax				tax 								; into X
.287d	e8		inx				inx 								; +1 for length.
.287e	a9 24		lda #$24			lda 	#markerString
.2880	4c 98 28	jmp $2898			jmp 	_LVWriteFrame
.2883					_LVPushNumber:
.2883	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2885	85 2c		sta $2c				sta 	temp1
.2887	a5 2b		lda $2b				lda 	temp0+1
.2889	85 2d		sta $2d				sta 	temp1+1
.288b	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.288d	4a		lsr a				lsr 	a
.288e	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2890	a2 04		ldx #$04			ldx 	#VarISize
.2892	90 04		bcc $2898			bcc 	_LVIsInteger
.2894	a9 23		lda #$23			lda 	#markerFloat
.2896	a2 06		ldx #$06			ldx 	#VarFSize
.2898					_LVIsInteger:
.2898					_LVWriteFrame:
.2898	8e f5 0c	stx $0cf5			stx 	storeSize 					; number of bytes to copy from (temp0)
.289b	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.289c	e8		inx				inx
.289d	e8		inx				inx
.289e	20 bc 39	jsr $39bc			jsr 	RSClaim 					; create the stack frame.
.28a1	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.28a3	a0 01		ldy #$01			ldy 	#1
.28a5	91 37		sta ($37),y			sta 	(rsPointer),y
.28a7	c8		iny				iny
.28a8	a5 2b		lda $2b				lda 	temp0+1
.28aa	91 37		sta ($37),y			sta 	(rsPointer),y
.28ac	a0 00		ldy #$00			ldy 	#0
.28ae					_LVCopyData:
.28ae	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.28b0	c8		iny				iny 								; write allowing for the header bit.
.28b1	c8		iny				iny
.28b2	c8		iny				iny
.28b3	91 37		sta ($37),y			sta 	(rsPointer),y
.28b5	88		dey				dey
.28b6	88		dey				dey
.28b7	ce f5 0c	dec $0cf5			dec 	storeSize 					; do it storesize times
.28ba	d0 f2		bne $28ae			bne 	_LVCopyData
.28bc	68		pla				pla
.28bd	a8		tay				tay
.28be	68		pla				pla
.28bf	aa		tax				tax
.28c0	60		rts				rts
.28c1					_LVSyntax:
.28c1	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.28c3	20 18 15	jsr $1518		jsr	errorHandler
.28c6					RestoreLocals:
.28c6	a2 00		ldx #$00			ldx 	#0
.28c8	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.28ca	c9 40		cmp #$40			cmp	 	#64
.28cc	90 01		bcc $28cf			bcc 	_RLocal
.28ce	60		rts				rts
.28cf					_RLocal:
.28cf	8a		txa				txa
.28d0	48		pha				pha
.28d1	98		tya				tya
.28d2	48		pha				pha
.28d3	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.28d5	b1 37		lda ($37),y			lda 	(rsPointer),y
.28d7	85 2a		sta $2a				sta 	temp0
.28d9	c8		iny				iny
.28da	b1 37		lda ($37),y			lda 	(rsPointer),y
.28dc	85 2b		sta $2b				sta 	temp0+1
.28de	a0 00		ldy #$00			ldy 	#0 							; get type back.
.28e0	b1 37		lda ($37),y			lda 	(rsPointer),y
.28e2	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.28e4	f0 28		beq $290e			beq 	_RString
.28e6	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.28e8	c9 25		cmp #$25			cmp 	#markerInt
.28ea	f0 02		beq $28ee			beq 	_RIsInteger
.28ec	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.28ee					_RIsInteger:
.28ee	8a		txa				txa
.28ef	48		pha				pha
.28f0	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.28f2					_RCopyBack:
.28f2	b1 37		lda ($37),y			lda 	(rsPointer),y
.28f4	88		dey				dey
.28f5	88		dey				dey
.28f6	88		dey				dey
.28f7	91 2a		sta ($2a),y			sta 	(temp0),y
.28f9	c8		iny				iny
.28fa	c8		iny				iny
.28fb	c8		iny				iny
.28fc	c8		iny				iny
.28fd	ca		dex				dex
.28fe	d0 f2		bne $28f2			bne 	_RCopyBack
.2900	68		pla				pla 								; get size add 3
.2901	18		clc				clc
.2902	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2904					_RRestoreAAndLoop:
.2904	20 de 39	jsr $39de			jsr 	RSFree
.2907	68		pla				pla
.2908	a8		tay				tay
.2909	68		pla				pla
.290a	aa		tax				tax
.290b	4c c6 28	jmp $28c6			jmp 	RestoreLocals 				; go see if there are any more locals.
.290e					_RString:
.290e	a2 00		ldx #$00			ldx 	#0
.2910	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2912	b1 37		lda ($37),y			lda 	(rsPointer),y
.2914	95 98		sta $98,x			sta 	esInt0,x
.2916	c8		iny				iny
.2917	b1 37		lda ($37),y			lda 	(rsPointer),y
.2919	95 a0		sta $a0,x			sta 	esInt1,x
.291b	18		clc				clc
.291c	a5 37		lda $37				lda 	rsPointer
.291e	69 03		adc #$03			adc 	#3
.2920	95 99		sta $99,x			sta 	esInt0+1,x
.2922	a5 38		lda $38				lda 	rsPointer+1
.2924	69 00		adc #$00			adc 	#0
.2926	95 a1		sta $a1,x			sta 	esInt1+1,x
.2928	8a		txa				txa
.2929	a2 10		ldx #$10		ldx	#16
.292b	20 cc 3c	jsr $3ccc		jsr	stringHandler
.292e	a0 03		ldy #$03			ldy 	#3 							; get string length
.2930	b1 37		lda ($37),y			lda 	(rsPointer),y
.2932	18		clc				clc
.2933	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2935	4c 04 29	jmp $2904			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cf6					paramCount:
>0cf6							.fill 	1
.2938					CallProc:
.2938	20 c0 29	jsr $29c0			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.293b	48		pha				pha 								; save length on stack
.293c	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.293e	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2940	48		pha				pha
.2941	a5 2a		lda $2a				lda 	temp0
.2943	48		pha				pha
.2944	98		tya				tya 								; calculate Y + length
.2945	18		clc				clc
.2946	65 32		adc $32				adc 	tempShort
.2948	a8		tay				tay
.2949	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.294b					_CallProcEvalParams:
.294b	e8		inx				inx
.294c	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.294e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2950	f0 0b		beq $295d			beq 	_CPDoneParams
.2952	20 6a 32	jsr $326a			jsr 	Evaluate 					; evaluate a parameter
.2955	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2957	c8		iny				iny
.2958	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.295a	f0 ef		beq $294b			beq 	_CallProcEvalParams
.295c	88		dey				dey 								; undo consumption.
.295d					_CPDoneParams:
.295d	20 94 39	jsr $3994			jsr 	CheckRightParen 			; check closing parenthesis.
.2960	8e f6 0c	stx $0cf6			stx 	paramCount 					; store parameter count+1
.2963	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2965	a9 50		lda #$50			lda 	#markerPROC
.2967	20 bc 39	jsr $39bc			jsr 	RSClaim
.296a	a9 01		lda #$01			lda 	#1 							; store return address.
.296c	20 e8 39	jsr $39e8			jsr 	RSSavePosition
.296f	68		pla				pla 								; get the new code Ptr
.2970	85 28		sta $28				sta 	codePtr
.2972	68		pla				pla
.2973	85 29		sta $29				sta 	codePtr+1
.2975	68		pla				pla 								; length of name + 4 is the param start.
.2976	18		clc				clc
.2977	69 04		adc #$04			adc 	#4
.2979	a8		tay				tay
.297a	a2 ff		ldx #$ff			ldx 	#$FF
.297c					_CPLoadParameters:
.297c	e8		inx				inx 								; point to where the address should be loaded.
.297d	ec f6 0c	cpx $0cf6			cpx 	paramCount 					; too many parameters in definition ?
.2980	f0 1e		beq $29a0			beq 	_CPParamError
.2982	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2984	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2986	f0 0e		beq $2996			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2988	20 54 28	jsr $2854			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.298b	20 17 26	jsr $2617			jsr 	WriteValue 					; copy the evaluated parameter into there.
.298e	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2990	c8		iny				iny
.2991	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2993	f0 e7		beq $297c			beq 	_CPLoadParameters
.2995	88		dey				dey 								; no, unconsume and check for )
.2996					_CPParamComplete:
.2996	20 94 39	jsr $3994			jsr 	CheckRightParen 			; check )
.2999	e8		inx				inx 								; check right number of parameters have been consumed
.299a	ec f6 0c	cpx $0cf6			cpx 	paramCount
.299d	d0 01		bne $29a0			bne 	_CPParamError
.299f	60		rts				rts
.29a0					_CPParamError:
.29a0	a2 18		ldx #$18			ldx 	#ErrorID_Params
.29a2	20 18 15	jsr $1518		jsr	errorHandler
.29a5					ReturnProc:
.29a5	20 c6 28	jsr $28c6			jsr 	RestoreLocals 				; get the locals back.
.29a8	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.29aa	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.29ac	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.29ae	f0 05		beq $29b5			beq 	_isok
.29b0	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.29b2	20 18 15	jsr $1518		jsr	errorHandler
.29b5					_isok:
.29b5	a9 01		lda #$01			lda 	#1
.29b7	20 fb 39	jsr $39fb			jsr 	RSLoadPosition 				; reload the position from offset 1.
.29ba	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.29bc	20 de 39	jsr $39de			jsr 	RSFree
.29bf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cf7					procList:
>0cf7							.fill 	2		 					; terminated by name high being zero.
.0cf9					yInLine:
>0cf9							.fill 	1
.29c0					FindProcedure:
.29c0	8c f9 0c	sty $0cf9			sty 	yInLine 					; save current position.
.29c3	20 7e 2a	jsr $2a7e			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.29c6	85 2c		sta $2c				sta 	temp1
.29c8	ad f7 0c	lda $0cf7			lda		procList 					; put procList address in temp2
.29cb	85 2e		sta $2e				sta 	temp2
.29cd	ad f8 0c	lda $0cf8			lda 	procList+1
.29d0	85 2f		sta $2f				sta 	temp2+1
.29d2	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.29d4					_FPLoop:
.29d4	b1 2e		lda ($2e),y			lda 	(temp2),y
.29d6	f0 4f		beq $2a27			beq 	_FPError 					; if so, we don't know this procedure.
.29d8	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.29da	c8		iny				iny
.29db	b1 2e		lda ($2e),y			lda 	(temp2),y
.29dd	85 2a		sta $2a				sta 	temp0
.29df	c8		iny				iny
.29e0	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.29e2	c5 2c		cmp $2c				cmp 	temp1
.29e4	d0 2b		bne $2a11			bne 	_FPNext 					; hash is different, go to next.
.29e6	38		sec				sec
.29e7	ad f9 0c	lda $0cf9			lda 	yInLine 					; position in line must be at least 4
.29ea	e9 04		sbc #$04			sbc 	#4
.29ec	18		clc				clc
.29ed	65 28		adc $28				adc 	codePtr
.29ef	85 30		sta $30				sta 	temp3
.29f1	a5 29		lda $29				lda 	codePtr+1
.29f3	69 00		adc #$00			adc 	#0
.29f5	85 31		sta $31				sta 	temp3+1
.29f7	98		tya				tya
.29f8	48		pha				pha
.29f9	a0 04		ldy #$04			ldy 	#4
.29fb					_FPCName:
.29fb	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.29fd	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.29ff	d0 0e		bne $2a0f			bne 	_FPpulYNext 				; if different go to next one.
.2a01	c8		iny				iny
.2a02	c9 3a		cmp #$3a			cmp 	#$3A
.2a04	90 f5		bcc $29fb			bcc 	_FPCName 					; compare the whole lot....
.2a06	68		pla				pla 								; throw away the saved Y
.2a07	98		tya				tya 								; length of name is Y-4
.2a08	38		sec				sec
.2a09	e9 04		sbc #$04			sbc 	#4
.2a0b	ac f9 0c	ldy $0cf9			ldy 	yInLine  					; get the original Y back
.2a0e	60		rts				rts
.2a0f					_FPpulYNext:
.2a0f	68		pla				pla
.2a10	a8		tay				tay
.2a11					_FPNext:
.2a11	c8		iny				iny 								; next procedure record.
.2a12	10 c0		bpl $29d4			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2a14	98		tya				tya 								; subtract 128 from Y
.2a15	38		sec				sec
.2a16	e9 80		sbc #$80			sbc 	#128
.2a18	a8		tay				tay
.2a19	18		clc				clc 								; add 128 to temp2, so we can have more than
.2a1a	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2a1c	69 80		adc #$80			adc 	#128
.2a1e	85 2e		sta $2e				sta 	temp2
.2a20	90 b2		bcc $29d4			bcc 	_FPLoop
.2a22	e6 2f		inc $2f				inc 	temp2+1
.2a24	4c d4 29	jmp $29d4			jmp 	_FPLoop
.2a27					_FPError:
.2a27	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2a29	20 18 15	jsr $1518		jsr	errorHandler
.2a2c					ScanProc:
.2a2c	98		tya				tya
.2a2d	48		pha				pha
.2a2e	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2a30	8d f7 0c	sta $0cf7			sta 	procList
.2a33	a5 36		lda $36				lda 	lowMemory+1
.2a35	8d f8 0c	sta $0cf8			sta 	procList+1
.2a38	20 a8 2d	jsr $2da8			jsr 	ResetCodeAddress 			; back to the start.
.2a3b					_ScanLoop:
.2a3b	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2a3d	b1 28		lda ($28),y			lda 	(codePtr),y
.2a3f	f0 2a		beq $2a6b			beq 	_ScanExit
.2a41	a0 03		ldy #$03			ldy 	#3							; get first token
.2a43	b1 28		lda ($28),y			lda 	(codePtr),y
.2a45	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2a47	d0 12		bne $2a5b			bne 	_ScanNext
.2a49	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2a4b	20 73 2a	jsr $2a73			jsr 	_ScanWrite
.2a4e	a5 28		lda $28				lda 	codePtr
.2a50	20 73 2a	jsr $2a73			jsr 	_ScanWrite
.2a53	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2a55	20 7e 2a	jsr $2a7e			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2a58	20 73 2a	jsr $2a73			jsr 	_ScanWrite					; and write that
.2a5b					_ScanNext:
.2a5b	18		clc				clc
.2a5c	a0 00		ldy #$00			ldy 	#0
.2a5e	b1 28		lda ($28),y			lda 	(codePtr),y
.2a60	65 28		adc $28				adc 	codePtr
.2a62	85 28		sta $28				sta 	codePtr
.2a64	90 d5		bcc $2a3b			bcc 	_ScanLoop
.2a66	e6 29		inc $29				inc 	codePtr+1
.2a68	4c 3b 2a	jmp $2a3b			jmp 	_ScanLoop
.2a6b					_ScanExit:
.2a6b	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2a6d	20 73 2a	jsr $2a73			jsr 	_ScanWrite
.2a70	68		pla				pla
.2a71	a8		tay				tay
.2a72	60		rts				rts
.2a73					_ScanWrite:
.2a73	a0 00		ldy #$00			ldy 	#0
.2a75	91 35		sta ($35),y			sta 	(lowMemory),y
.2a77	e6 35		inc $35				inc 	lowMemory
.2a79	d0 02		bne $2a7d			bne 	_SWNoCarry
.2a7b	e6 36		inc $36				inc 	lowMemory+1
.2a7d					_SWNoCarry:
.2a7d	60		rts				rts
.2a7e					CalculateProcedureHash:
.2a7e	a9 00		lda #$00			lda 	#0 							; clear hash.
.2a80	85 2a		sta $2a				sta 	temp0
.2a82					_CPHLoop:
.2a82	18		clc				clc 								; add character and rotate and add carry back in
.2a83	b1 28		lda ($28),y			lda 	(codePtr),y
.2a85	65 2a		adc $2a				adc 	temp0
.2a87	6a		ror a				ror 	a
.2a88	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2a8a	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2a8c	b1 28		lda ($28),y			lda 	(codePtr),y
.2a8e	c8		iny				iny 								; advance incase we go round again.
.2a8f	c9 3a		cmp #$3a			cmp 	#$3A
.2a91	90 ef		bcc $2a82			bcc 	_CPHLoop
.2a93	a5 2a		lda $2a				lda 	temp0
.2a95	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2a96					Command_Repeat:
.2a96	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2a98	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2a9a	20 bc 39	jsr $39bc			jsr 	RSClaim
.2a9d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2a9f	20 e8 39	jsr $39e8			jsr 	RSSavePosition
.2aa2	60		rts				rts
.2aa3					Command_Until:
.2aa3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2aa5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2aa7	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2aa9	f0 05		beq $2ab0			beq 	_isok
.2aab	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2aad	20 18 15	jsr $1518		jsr	errorHandler
.2ab0					_isok:
.2ab0	20 87 32	jsr $3287			jsr 	EvaluateRootInteger 		; at the bottom.
.2ab3	20 48 39	jsr $3948			jsr 	MInt32Zero					; check if TOS zero
.2ab6	d0 06		bne $2abe			bne 	_CUExit
.2ab8	a9 01		lda #$01			lda 	#1
.2aba	20 fb 39	jsr $39fb			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2abd	60		rts				rts
.2abe					_CUExit:
.2abe	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2ac0	20 de 39	jsr $39de			jsr 	RSFree
.2ac3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2ac4					ScanForward:
.2ac4	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2ac6	86 2d		stx $2d				stx 	temp1+1
.2ac8	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2aca	85 2e		sta $2e				sta 	temp2
.2acc	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2ace	c8		iny				iny
.2acf	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2ad1	d0 08		bne $2adb			bne 	_SFNoCheck 					; if so, check token against entered values.
.2ad3	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2ad5	f0 24		beq $2afb			beq 	_SFExit 					; at the same strcture depth.
.2ad7	c5 2d		cmp $2d				cmp 	temp1+1
.2ad9	f0 20		beq $2afb			beq 	_SFExit
.2adb					_SFNoCheck:
.2adb	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2add	90 ed		bcc $2acc			bcc 	_SFLoop
.2adf	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2ae1	90 19		bcc $2afc			bcc 	_SFSpecials
.2ae3	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2ae5	90 e5		bcc $2acc			bcc 	_SFLoop
.2ae7	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2ae9	b0 e1		bcs $2acc			bcs 	_SFLoop
.2aeb	aa		tax				tax  								; token in X, and look up the adjuster.
.2aec	bd a5 31	lda $31a5,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2aef	38		sec				sec 								; convert to an offset ($FF,$01)
.2af0	e9 81		sbc #$81			sbc 	#$81
.2af2	18		clc				clc 								; add to depth
.2af3	65 2e		adc $2e				adc 	temp2
.2af5	85 2e		sta $2e				sta 	temp2
.2af7	10 d3		bpl $2acc			bpl 	_SFLoop 					; +ve okay to continue
.2af9	30 07		bmi $2b02			bmi 	SFError 					; if gone -ve then we have a nesting error
.2afb	60		rts		_SFExit:rts
.2afc					_SFSpecials:
.2afc	20 07 2b	jsr $2b07			jsr 	ScannerSkipSpecial
.2aff	4c cc 2a	jmp $2acc			jmp 	_SFLoop
.2b02					SFError:
.2b02	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2b04	20 18 15	jsr $1518		jsr	errorHandler
.2b07					ScannerSkipSpecial:
.2b07	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2b09	f0 10		beq $2b1b			beq 	_SFNextLine
.2b0b	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2b0d	f0 2b		beq $2b3a			beq 	_SFFloatSkip
.2b0f	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2b11	f0 02		beq $2b15			beq 	_SFSkipString
.2b13	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2b14	60		rts				rts 								; token.
.2b15					_SFSkipString:
.2b15	98		tya				tya
.2b16	38		sec				sec
.2b17	71 28		adc ($28),y			adc 	(codePtr),y
.2b19	a8		tay				tay
.2b1a	60		rts				rts
.2b1b					_SFNextLine:
.2b1b	a0 00		ldy #$00			ldy 	#0 							; get offset
.2b1d	b1 28		lda ($28),y			lda 	(codePtr),y
.2b1f	18		clc				clc 								; add to code pointer.
.2b20	65 28		adc $28				adc 	codePtr
.2b22	85 28		sta $28				sta 	codePtr
.2b24	90 02		bcc $2b28			bcc		_SFNLNoCarry
.2b26	e6 29		inc $29				inc 	codePtr+1
.2b28					_SFNLNoCarry:
.2b28	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2b2a	d0 0b		bne $2b37			bne		_SFXNL 						; no go round again
.2b2c	a5 2c		lda $2c				lda 	temp1
.2b2e	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2b30	d0 d0		bne $2b02			bne 	SFError 					; read uses this to search for data statements
.2b32	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2b34	20 18 15	jsr $1518		jsr	errorHandler
.2b37	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2b39	60		rts				rts
.2b3a					_SFFloatSkip:
.2b3a	98		tya				tya 								; skip over an embedded float.
.2b3b	18		clc				clc
.2b3c	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2b3e	a8		tay				tay
.2b3f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2b40					Command_While:
.2b40	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2b42	a2 04		ldx #$04			ldx 	#4
.2b44	20 bc 39	jsr $39bc			jsr 	RSClaim 					; create on stack.
.2b47	88		dey				dey
.2b48	a9 01		lda #$01			lda 	#1
.2b4a	20 e8 39	jsr $39e8			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2b4d	c8		iny				iny
.2b4e	20 87 32	jsr $3287			jsr 	EvaluateRootInteger			; get the conditional
.2b51	20 48 39	jsr $3948			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2b54	f0 01		beq $2b57			beq 	_CWFail
.2b56	60		rts				rts
.2b57					_CWFail:
.2b57	a9 04		lda #$04			lda 	#4
.2b59	20 de 39	jsr $39de			jsr 	RSFree 						; close the just opened position.
.2b5c	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2b5e	aa		tax				tax
.2b5f	20 c4 2a	jsr $2ac4			jsr 	ScanForward
.2b62	60		rts				rts
.2b63					Command_Wend:
.2b63	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b65	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2b67	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2b69	f0 05		beq $2b70			beq 	_isok
.2b6b	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2b6d	20 18 15	jsr $1518		jsr	errorHandler
.2b70					_isok:
.2b70	a9 01		lda #$01			lda 	#1
.2b72	20 fb 39	jsr $39fb			jsr 	RSLoadPosition				; go back until true
.2b75	a9 04		lda #$04			lda 	#4
.2b77	20 de 39	jsr $39de			jsr 	RSFree 						; close the loop
.2b7a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2b7b					CommandClear:
.2b7b					XCommandClear:
.2b7b	98		tya				tya
.2b7c	48		pha				pha
.2b7d	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2b80	85 33		sta $33				sta 	highMemory
.2b82	ad cd 0a	lda $0acd			lda 	endMemory+1
.2b85	85 34		sta $34				sta 	highMemory+1
.2b87	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2b8a	85 2a		sta $2a				sta 	temp0
.2b8c	ad c9 0a	lda $0ac9			lda 	basePage+1
.2b8f	85 2b		sta $2b				sta 	temp0+1
.2b91					_CCFindEnd:
.2b91	a0 00		ldy #$00			ldy 	#0
.2b93	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b95	f0 0c		beq $2ba3			beq 	_CCFoundEnd 				; offset zero is end.
.2b97	18		clc				clc
.2b98	65 2a		adc $2a				adc 	temp0 						; move to next line
.2b9a	85 2a		sta $2a				sta 	temp0
.2b9c	90 f3		bcc $2b91			bcc 	_CCFindEnd
.2b9e	e6 2b		inc $2b				inc 	temp0+1
.2ba0	4c 91 2b	jmp $2b91			jmp 	_CCFindEnd
.2ba3					_CCFoundEnd:
.2ba3	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2ba5	85 35		sta $35				sta 	lowMemory
.2ba7	a5 2b		lda $2b				lda 	temp0+1
.2ba9	85 36		sta $36				sta 	lowMemory+1
.2bab	18		clc				clc 								; put temp0+1 in endProgram
.2bac	a5 2a		lda $2a				lda 	temp0
.2bae	69 01		adc #$01			adc 	#1
.2bb0	8d ca 0a	sta $0aca			sta 	endProgram
.2bb3	a5 2b		lda $2b				lda 	temp0+1
.2bb5	69 00		adc #$00			adc 	#0
.2bb7	8d cb 0a	sta $0acb			sta 	endProgram+1
.2bba	18		clc				clc 								; put a bit of space in.
.2bbb	a5 35		lda $35				lda 	lowMemory
.2bbd	69 04		adc #$04			adc 	#4
.2bbf	85 35		sta $35				sta 	lowMemory
.2bc1	90 02		bcc $2bc5			bcc 	_CCNoCarry
.2bc3	e6 36		inc $36				inc 	lowMemory+1
.2bc5					_CCNoCarry:
.2bc5	20 ae 39	jsr $39ae			jsr 	RSReset 					; reset the return stack.
.2bc8	a2 06		ldx #$06		ldx	#6
.2bca	20 16 49	jsr $4916		jsr	variableHandler
.2bcd	20 2c 2a	jsr $2a2c			jsr 	ScanProc 					; scan for procedures
.2bd0	20 b1 23	jsr $23b1			jsr 	CommandRestore 				; do a restore
.2bd3	68		pla				pla
.2bd4	a8		tay				tay
.2bd5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cfa					structIndent:
>0cfa							.fill 	1
.2bd6					CommandList:
.2bd6	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2bd8	8e fa 0c	stx $0cfa			stx 	structIndent
.2bdb	20 21 39	jsr $3921			jsr 	MInt32False
.2bde	e8		inx				inx
.2bdf	20 1d 39	jsr $391d			jsr 	MInt32True
.2be2	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2be4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2be6	f0 15		beq $2bfd			beq 	_CLEndLine
.2be8	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2bea	30 1b		bmi $2c07			bmi 	_CLDoListing 				; do the whole lot.
.2bec	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2bee	20 89 32	jsr $3289			jsr 	EvaluateInteger
.2bf1	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2bf3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2bf5	f0 06		beq $2bfd			beq 	_CLEndLine
.2bf7	20 5f 38	jsr $385f			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2bfa	4c 07 2c	jmp $2c07			jmp 	_CLDoListing 				; own e.g. list 1100
.2bfd					_CLEndLine:
.2bfd	c8		iny				iny 								; skip comma
.2bfe	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2c00	30 05		bmi $2c07			bmi 	_CLDoListing
.2c02	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2c04	20 89 32	jsr $3289			jsr 	EvaluateInteger				; get end
.2c07					_CLDoListing:
.2c07	20 a8 2d	jsr $2da8			jsr 	ResetCodeAddress 			; back to the start.
.2c0a					_CLCheckLoop:
.2c0a	a2 02		ldx #$02		ldx	#2
.2c0c	20 f6 14	jsr $14f6		jsr	deviceHandler
.2c0f	a0 00		ldy #$00			ldy 	#0							; check end.
.2c11	b1 28		lda ($28),y			lda 	(codePtr),y
.2c13	f0 41		beq $2c56			beq 	_CLEnd
.2c15	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2c17	20 59 2c	jsr $2c59			jsr 	CLCompareLineTOS
.2c1a	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2c1c	f0 28		beq $2c46			beq 	_CLNext
.2c1e	e8		inx				inx
.2c1f	20 59 2c	jsr $2c59			jsr 	CLCompareLineTOS 			; compare vs higher
.2c22	c9 01		cmp #$01			cmp 	#1
.2c24	f0 20		beq $2c46			beq 	_CLNext
.2c26	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2c28	20 7b 2c	jsr $2c7b			jsr 	CLStructureCheck
.2c2b	ad fa 0c	lda $0cfa			lda 	structIndent 				; indent level.
.2c2e	10 02		bpl $2c32			bpl 	_CLPositive
.2c30	a9 00		lda #$00			lda 	#0
.2c32					_CLPositive:
.2c32	a2 04		ldx #$04		ldx	#4
.2c34	20 45 45	jsr $4545		jsr	tokeniserHandler
.2c37	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2c39	20 7b 2c	jsr $2c7b			jsr 	CLStructureCheck
.2c3c	ad fa 0c	lda $0cfa			lda 	structIndent
.2c3f	10 05		bpl $2c46			bpl 	_CLNext
.2c41	a9 00		lda #$00			lda 	#0
.2c43	8d fa 0c	sta $0cfa			sta 	structIndent
.2c46					_CLNext:
.2c46	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2c48	b1 28		lda ($28),y			lda 	(codePtr),y
.2c4a	18		clc				clc
.2c4b	65 28		adc $28				adc 	codePtr
.2c4d	85 28		sta $28				sta 	codePtr
.2c4f	90 b9		bcc $2c0a			bcc 	_CLCheckLoop
.2c51	e6 29		inc $29				inc 	codePtr+1
.2c53	4c 0a 2c	jmp $2c0a			jmp 	_CLCheckLoop
.2c56					_CLEnd:
.2c56	4c 0a 3a	jmp $3a0a			jmp 	WarmStart 					; warm start after list.
.2c59					CLCompareLineTOS:
.2c59	a0 01		ldy #$01			ldy 	#1
.2c5b	b1 28		lda ($28),y			lda 	(codePtr),y
.2c5d	55 98		eor $98,x			eor 	esInt0,x
.2c5f	85 2a		sta $2a				sta 	temp0
.2c61	c8		iny				iny
.2c62	b1 28		lda ($28),y			lda 	(codePtr),y
.2c64	55 a0		eor $a0,x			eor 	esInt1,x
.2c66	05 2a		ora $2a				ora 	temp0
.2c68	f0 10		beq $2c7a			beq 	_CLCLTExit
.2c6a	88		dey				dey
.2c6b	b1 28		lda ($28),y			lda 	(codePtr),y
.2c6d	d5 98		cmp $98,x			cmp 	esInt0,x
.2c6f	c8		iny				iny
.2c70	b1 28		lda ($28),y			lda 	(codePtr),y
.2c72	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2c74	a9 ff		lda #$ff			lda 	#255
.2c76	90 02		bcc $2c7a			bcc 	_CLCLTExit
.2c78	a9 01		lda #$01			lda 	#1
.2c7a					_CLCLTExit:
.2c7a	60		rts				rts
.2c7b					CLStructureCheck:
.2c7b	85 2a		sta $2a				sta 	temp0
.2c7d	a0 03		ldy #$03			ldy 	#3
.2c7f					_CLSCLoop:
.2c7f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2c81	c8		iny				iny
.2c82	c9 80		cmp #$80			cmp 	#$80
.2c84	90 f9		bcc $2c7f			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2c86	f0 28		beq $2cb0			beq		_CLSCExit					; EOL return
.2c88	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2c8a	90 1e		bcc $2caa			bcc 	_CLSCSpecial
.2c8c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2c8e	90 ef		bcc $2c7f			bcc 	_CLSCLoop
.2c90	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2c92	b0 eb		bcs $2c7f			bcs 	_CLSCLoop
.2c94	aa		tax				tax 								; get adjustment
.2c95	bd a5 31	lda $31a5,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2c98	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2c9a	d0 e3		bne $2c7f			bne 	_CLSCLoop
.2c9c	38		sec				sec
.2c9d	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2c9f	0a		asl a				asl 	a 							; double indent step
.2ca0	18		clc				clc
.2ca1	6d fa 0c	adc $0cfa			adc 	structIndent 				; add to structure indent
.2ca4	8d fa 0c	sta $0cfa			sta 	structIndent
.2ca7	4c 7f 2c	jmp $2c7f			jmp 	_CLSCLoop
.2caa					_CLSCSpecial:
.2caa	20 07 2b	jsr $2b07			jsr 	ScannerSkipSpecial
.2cad	4c 7f 2c	jmp $2c7f			jmp 	_CLSCLoop
.2cb0					_CLSCExit:
.2cb0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2cb1					CommandLoad:
.2cb1	20 d9 2c	jsr $2cd9			jsr 	CLSParameters 					; get parameters for load.
.2cb4	08		php				php
.2cb5	a2 0e		ldx #$0e		ldx	#14
.2cb7	20 f6 14	jsr $14f6		jsr	deviceHandler
.2cba	28		plp				plp
.2cbb	b0 08		bcs $2cc5			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2cbd	20 7b 2b	jsr $2b7b			jsr 	CommandClear
.2cc0	a2 04		ldx #$04		ldx	#4
.2cc2	20 73 23	jsr $2373		jsr	interactionHandler
.2cc5					_CLExit
.2cc5	60		rts				rts
.2cc6					CommandSave:
.2cc6	20 d9 2c	jsr $2cd9			jsr 	CLSParameters					; get parameters for save
.2cc9	90 08		bcc $2cd3			bcc 	_CSNoOverrideAddress
.2ccb	20 a1 39	jsr $39a1			jsr 	CheckComma 						; should be a comma.
.2cce	a2 02		ldx #$02			ldx 	#2
.2cd0	20 89 32	jsr $3289			jsr 	EvaluateInteger 				; get save end address.
.2cd3					_CSNoOverrideAddress:
.2cd3	a2 18		ldx #$18		ldx	#24
.2cd5	20 f6 14	jsr $14f6		jsr	deviceHandler
.2cd8	60		rts				rts
.2cd9					CLSParameters:
.2cd9	a2 00		ldx #$00			ldx 	#0 								; string
.2cdb	20 7e 32	jsr $327e			jsr 	EvaluateString
.2cde	e8		inx				inx 									; erase out +1 +2
.2cdf	20 21 39	jsr $3921			jsr 	MInt32False
.2ce2	e8		inx				inx
.2ce3	20 21 39	jsr $3921			jsr 	MInt32False
.2ce6	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2ce9	85 99		sta $99				sta 	esInt0+1
.2ceb	ad c9 0a	lda $0ac9			lda 	basePage+1
.2cee	85 a1		sta $a1				sta 	esInt1+1
.2cf0	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2cf3	85 9a		sta $9a				sta 	esInt0+2
.2cf5	ad cb 0a	lda $0acb			lda 	endProgram+1
.2cf8	85 a2		sta $a2				sta 	esInt1+2
.2cfa	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2cfc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2cfe	d0 08		bne $2d08			bne 	_CLSDefault
.2d00	c8		iny				iny 									; skip comma
.2d01	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2d03	20 89 32	jsr $3289			jsr 	EvaluateInteger
.2d06	38		sec				sec
.2d07	60		rts				rts
.2d08					_CLSDefault:
.2d08	18		clc				clc
.2d09	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2d0a					Command_New:
.2d0a					Command_XNew:
.2d0a	20 a8 2d	jsr $2da8			jsr 	ResetCodeAddress 			; point to first line
.2d0d	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2d0f	98		tya				tya
.2d10	91 28		sta ($28),y			sta 	(codePtr),y
.2d12	20 7b 2b	jsr $2b7b			jsr 	CommandClear 				; clear everything down.
.2d15	4c d1 26	jmp $26d1			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cfb					breakCounter:
>0cfb								.fill 	1
.0cfc					breakIncrement:
>0cfc								.fill 	1
.2d18					Command_Run:
.2d18					XCommand_Run:
.2d18	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2d1a	9a		txs				txs
.2d1b	20 a2 2d	jsr $2da2			jsr 	BreakOn 					; turn break on
.2d1e	20 7b 2b	jsr $2b7b			jsr 	CommandClear 				; clear everything.
.2d21	20 a8 2d	jsr $2da8			jsr 	ResetCodeAddress 			; back to the start.
.2d24					Command_RunFrom:
.2d24	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2d26					CRNextInstruction:
.2d26	64 3a		stz $3a				stz 	softMemAlloc+1
.2d28	ad fb 0c	lda $0cfb			lda 	breakCounter 				; check for break.
.2d2b	6d fc 0c	adc $0cfc			adc 	breakIncrement
.2d2e	8d fb 0c	sta $0cfb			sta 	breakCounter
.2d31	90 05		bcc $2d38			bcc 	_CRNoChecks
.2d33	a2 02		ldx #$02		ldx	#2
.2d35	20 f6 14	jsr $14f6		jsr	deviceHandler
.2d38					_CRNoChecks
.2d38	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2d3a	10 1c		bpl $2d58			bpl 	_CRNotToken
.2d3c	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2d3e	b0 0c		bcs $2d4c			bcs 	_CRExecute
.2d40	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2d42	b0 71		bcs $2db5			bcs 	Unimplemented
.2d44	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2d46	b0 04		bcs $2d4c			bcs 	_CRExecute
.2d48	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2d4a	b0 16		bcs $2d62			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2d4c					_CRExecute:
.2d4c	c8		iny				iny 								; consume it.
.2d4d	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2d4e	aa		tax				tax
.2d4f	20 55 2d	jsr $2d55			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2d52	4c 26 2d	jmp $2d26			jmp 	CRNextInstruction
.2d55					_CRRunRoutine:
.2d55	7c bf 2d	jmp ($2dbf,x)			jmp 	(Group0Vectors,x)
.2d58					_CRNotToken:
.2d58	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2d5a	b0 59		bcs $2db5			bcs 	Unimplemented
.2d5c					_CRDefaultLet:
.2d5c	20 04 26	jsr $2604			jsr 	CommandLet 					; do the default, LET
.2d5f	4c 26 2d	jmp $2d26			jmp 	CRNextInstruction
.2d62					_CRCheckIndirect:
.2d62	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2d64	f0 0a		beq $2d70			beq 	_CRAndCommand
.2d66	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2d68	f0 f2		beq $2d5c			beq 	_CRDefaultLet
.2d6a	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2d6c	f0 ee		beq $2d5c			beq 	_CRDefaultLet
.2d6e	d0 45		bne $2db5			bne 	Unimplemented
.2d70					_CRAndCommand:
.2d70	c8		iny				iny 								; skip over the AND token
.2d71	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2d73	20 8d 2d	jsr $2d8d			jsr 	CommandAssembler 			; do the assembler command
.2d76	4c 26 2d	jmp $2d26			jmp 	CRNextInstruction 			; and loop round.
.2d79					CommandShift1:
.2d79	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2d7b	10 38		bpl $2db5			bpl 	Unimplemented 				; we have an error as this should not happen.
.2d7d	c8		iny				iny 								; advance over it.
.2d7e	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2d80	b0 0b		bcs $2d8d			bcs 	CommandAssembler
.2d82	0a		asl a				asl 	a 							; double into X
.2d83	aa		tax				tax
.2d84	7c 85 2e	jmp ($2e85,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2d87					CommandShift2:
.2d87	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2d89	20 69 18	jsr $1869		jsr	extensionHandler
.2d8c	60		rts				rts
.2d8d					CommandAssembler:
.2d8d	a2 02		ldx #$02		ldx	#2
.2d8f	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2d92	60		rts				rts
.2d93					CommandAssemblerLabel:
.2d93	a2 04		ldx #$04		ldx	#4
.2d95	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2d98	60		rts				rts
.2d99					CommandColon:
.2d99	60		rts				rts
.2d9a					CommandBreak:
.2d9a	20 87 32	jsr $3287			jsr 	EvaluateRootInteger
.2d9d	20 48 39	jsr $3948			jsr 	MInt32Zero
.2da0	f0 02		beq $2da4			beq 	BreakOff
.2da2					BreakOn:
.2da2	a2 08		ldx #$08			ldx 	#8
.2da4					BreakOff:
.2da4	8e fc 0c	stx $0cfc			stx 	breakIncrement
.2da7	60		rts				rts
.2da8					ResetCodeAddress:
.2da8	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2dab	85 28		sta $28				sta 	codePtr
.2dad	ad c9 0a	lda $0ac9			lda 	basePage+1
.2db0	85 29		sta $29				sta 	codePtr+1
.2db2	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2db4	60		rts				rts
.2db5					Unimplemented:
.2db5	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2db7	20 18 15	jsr $1518		jsr	errorHandler
.2dba					TKErr01:
.2dba					TKErr02:
.2dba					TKErr03:
.2dba					TKErr04:
.2dba					TKErr05:
.2dba					TKErr06:
.2dba					TKErr07:
.2dba					TKErr08:
.2dba					TKErr09:
.2dba					TKErr10:
.2dba					TKErr11:
.2dba					TKErr12:
.2dba					TKErr13:
.2dba					TKErr14:
.2dba	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2dbc	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2dbf					Group0Vectors:
>2dbf	d7 26					.word	AdvanceNextLine          ; $80 [[eol]]
>2dc1	79 2d					.word	CommandShift1            ; $81 [[sh1]]
>2dc3	87 2d					.word	CommandShift2            ; $82 [[sh2]]
>2dc5	ba 2d					.word	TKErr09                  ; $83 [[sh3]]
>2dc7	ba 2d					.word	TKErr10                  ; $84 [[fpc]]
>2dc9	ba 2d					.word	TKErr08                  ; $85 [[str]]
>2dcb	6e 2f					.word	AndHandler               ; $86 and
>2dcd	5b 2f					.word	OrHandler                ; $87 or
>2dcf	48 2f					.word	XorHandler               ; $88 xor
>2dd1	90 30					.word	CompareGreaterEq         ; $89 >=
>2dd3	9a 30					.word	CompareLessEq            ; $8a <=
>2dd5	7c 30					.word	CompareGreater           ; $8b >
>2dd7	72 30					.word	CompareLess              ; $8c <
>2dd9	68 30					.word	CompareEquals            ; $8d =
>2ddb	86 30					.word	CompareNotEquals         ; $8e <>
>2ddd	d9 2e					.word	AddHandler               ; $8f +
>2ddf	fc 2e					.word	SubHandler               ; $90 -
>2de1	94 2f					.word	ShrHandler               ; $91 >>
>2de3	81 2f					.word	ShlHandler               ; $92 <<
>2de5	0f 2f					.word	MulHandler               ; $93 *
>2de7	22 2f					.word	DivHandler               ; $94 /
>2de9	35 2f					.word	ModHandler               ; $95 mod
>2deb	cd 2f					.word	PowerHandler             ; $96 ^
>2ded	a7 2f					.word	WordRefHandler           ; $97 !
>2def	ba 2f					.word	ByteRefHandler           ; $98 ?
>2df1	96 2a					.word	Command_Repeat           ; $99 repeat
>2df3	40 2b					.word	Command_While            ; $9a while
>2df5	eb 26					.word	Command_FOR              ; $9b for
>2df7	fa 27					.word	CommandIf                ; $9c if
>2df9	ba 2d					.word	TKErr04                  ; $9d defproc
>2dfb	a3 2a					.word	Command_Until            ; $9e until
>2dfd	63 2b					.word	Command_Wend             ; $9f wend
>2dff	4c 27					.word	Command_NEXT             ; $a0 next
>2e01	ba 2d					.word	TKErr06                  ; $a1 then
>2e03	35 28					.word	Command_ENDIF            ; $a2 endif
>2e05	a5 29					.word	ReturnProc               ; $a3 endproc
>2e07	f4 31					.word	UnaryParenthesis         ; $a4 (
>2e09	d6 33					.word	UnaryLen                 ; $a5 len(
>2e0b	1a 34					.word	UnarySgn                 ; $a6 sgn(
>2e0d	03 34					.word	UnaryAbs                 ; $a7 abs(
>2e0f	73 34					.word	Unary_Random             ; $a8 random(
>2e11	bd 34					.word	Unary_Page               ; $a9 page
>2e13	1d 39					.word	MInt32True               ; $aa true
>2e15	21 39					.word	MInt32False              ; $ab false
>2e17	88 34					.word	Unary_Min                ; $ac min(
>2e19	8c 34					.word	Unary_Max                ; $ad max(
>2e1b	95 35					.word	UnarySys                 ; $ae sys(
>2e1d	3e 35					.word	UnaryTimer               ; $af timer(
>2e1f	53 33					.word	EventFunction            ; $b0 event(
>2e21	67 35					.word	UnaryGet                 ; $b1 get(
>2e23	57 35					.word	UnaryInkey               ; $b2 inkey(
>2e25	0e 35					.word	UnaryAlloc               ; $b3 alloc(
>2e27	ce 35					.word	ExecChr                  ; $b4 chr$(
>2e29	fe 35					.word	ExecLeft                 ; $b5 left$(
>2e2b	1b 36					.word	ExecMid                  ; $b6 mid$(
>2e2d	43 36					.word	ExecRight                ; $b7 right$(
>2e2f	d5 32					.word	Event_Str                ; $b8 str$(
>2e31	04 33					.word	UnaryVal                 ; $b9 val(
>2e33	31 34					.word	UnaryPeek                ; $ba peek(
>2e35	37 34					.word	UnaryDeek                ; $bb deek(
>2e37	3d 34					.word	UnaryLeek                ; $bc leek(
>2e39	f4 33					.word	UnaryAsc                 ; $bd asc(
>2e3b	e8 34					.word	UnaryIntToFloat          ; $be int(
>2e3d	fb 34					.word	UnaryFloatToInt          ; $bf float(
>2e3f	07 33					.word	UnaryIsVal               ; $c0 isval(
>2e41	e5 35					.word	ExecUpper                ; $c1 upper$(
>2e43	e2 35					.word	ExecLower                ; $c2 lower$(
>2e45	cb 34					.word	UnaryReference           ; $c3 @
>2e47	e1 34					.word	UnaryComplement          ; $c4 ~
>2e49	de 34					.word	UnaryHexMarker           ; $c5 &
>2e4b	80 35					.word	UnaryGetString           ; $c6 get$(
>2e4d	86 35					.word	UnaryInkeyString         ; $c7 inkey$(
>2e4f	bd 35					.word	UnaryMem                 ; $c8 mem
>2e51	ba 2d					.word	TKErr01                  ; $c9 )
>2e53	99 2d					.word	CommandColon             ; $ca :
>2e55	ba 2d					.word	TKErr02                  ; $cb ,
>2e57	ba 2d					.word	TKErr03                  ; $cc ;
>2e59	bf 26					.word	Command_Rem2             ; $cd '
>2e5b	ba 2d					.word	TKErr07                  ; $ce to
>2e5d	ba 2d					.word	TKErr05                  ; $cf step
>2e5f	38 29					.word	CallProc                 ; $d0 proc
>2e61	36 28					.word	CommandLocal             ; $d1 local
>2e63	f6 25					.word	Command_Dim              ; $d2 dim
>2e65	bf 26					.word	Command_Rem              ; $d3 rem
>2e67	04 26					.word	CommandLet               ; $d4 let
>2e69	40 24					.word	Command_Input            ; $d5 input
>2e6b	2f 28					.word	Command_ELSE             ; $d6 else
>2e6d	c7 25					.word	Command_VDU              ; $d7 vdu
>2e6f	f6 24					.word	Command_Print            ; $d8 print
>2e71	a8 23					.word	CommandData              ; $d9 data
>2e73	ba 2d					.word	TKErr13                  ; $da image
>2e75	ba 2d					.word	TKErr12                  ; $db at
>2e77	ba 2d					.word	TKErr14                  ; $dc flip
>2e79	e8 25					.word	Command_Assert           ; $dd assert
>2e7b	82 26					.word	Command_Poke             ; $de poke
>2e7d	86 26					.word	Command_Doke             ; $df doke
>2e7f	8a 26					.word	Command_Loke             ; $e0 loke
>2e81	97 25					.word	Command_Ink              ; $e1 ink
>2e83	a2 25					.word	Command_Paper            ; $e2 paper
>2e85	91 25					.word	Command_CLS              ; $e3 cls
>2e87	ad 25					.word	Command_Locate           ; $e4 locate
>2e89	93 2d					.word	CommandAssemblerLabel    ; $e5 .
>2e8b	b5 2d					.word	Unimplemented            ; $e6 from
>2e8d	ba 2d					.word	TKErr11                  ; $e7 #
>2e8f	7b 2b					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.2e91					Group1Vectors:
>2e91	b1 2c					.word	CommandLoad              ; $86 load
>2e93	c6 2c					.word	CommandSave              ; $87 save
>2e95	d6 2b					.word	CommandList              ; $88 list
>2e97	0a 2d					.word	Command_New              ; $89 new
>2e99	9a 2d					.word	CommandBreak             ; $8a break
>2e9b	18 2d					.word	Command_Run              ; $8b run
>2e9d	7d 23					.word	CommandRead              ; $8c read
>2e9f	b1 23					.word	CommandRestore           ; $8d restore
>2ea1	d1 26					.word	CommandEnd               ; $8e end
>2ea3	cc 26					.word	CommandStop              ; $8f stop
>2ea5	d4 26					.word	CommandXemu              ; $90 xemu
>2ea7	0e 24					.word	CommandGOTO              ; $91 goto
>2ea9	e3 23					.word	CommandGOSUB             ; $92 gosub
>2eab	f6 23					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2ead					BinaryProcess:
.2ead	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2eaf	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.2eb1	0a		asl a				asl 	a
.2eb2	30 0e		bmi $2ec2			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2eb4	18		clc				clc 								; return CC for integer
.2eb5	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2eb7	f0 08		beq $2ec1			beq 	_BPExit 					; if both integer then return with CC.
.2eb9	20 c7 2e	jsr $2ec7			jsr 	BPMakeBothFloat 			; make both float
.2ebc	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2ebe	95 90		sta $90,x			sta 	esType,x
.2ec0	38		sec				sec 								; and return with carry set.
.2ec1					_BPExit:
.2ec1	60		rts				rts
.2ec2					_BPStringType:
.2ec2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ec4	20 18 15	jsr $1518		jsr	errorHandler
.2ec7					BPMakeBothFloat:
.2ec7	e8		inx				inx
.2ec8	20 cc 2e	jsr $2ecc			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2ecb	ca		dex				dex
.2ecc					BPMakeFloat:
.2ecc	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.2ece	4a		lsr a				lsr 	a
.2ecf	b0 07		bcs $2ed8			bcs 	_BPIsFloat 					; already a float if set.
.2ed1	8a		txa				txa
.2ed2	a2 1c		ldx #$1c		ldx	#28
.2ed4	20 87 21	jsr $2187		jsr	floatingpointHandler
.2ed7	aa		tax				tax
.2ed8					_BPIsFloat:
.2ed8	60		rts				rts
.2ed9					AddHandler:
.2ed9	20 aa 30	jsr $30aa			jsr 	DereferenceTwo 				; dereference top two on stack.
.2edc	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.2ede	35 91		and $91,x			and 	esType+1,x
.2ee0	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2ee2	d0 10		bne $2ef4			bne 	_AHStringConcat				; concatenate strings.
.2ee4	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2ee7	b0 03		bcs $2eec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ee9	4c 05 38	jmp $3805			jmp 	MInt32Add 							; else do it as integer.
.2eec					_IsFPOperation:
.2eec	8a		txa				txa 								; call the relevant fp routine
.2eed	a2 04		ldx #$04		ldx	#4
.2eef	20 87 21	jsr $2187		jsr	floatingpointHandler
.2ef2	aa		tax				tax
.2ef3	60		rts				rts
.2ef4					_AHStringConcat:
.2ef4	8a		txa				txa 								; handled by the string module.
.2ef5	a2 06		ldx #$06		ldx	#6
.2ef7	20 cc 3c	jsr $3ccc		jsr	stringHandler
.2efa	aa		tax				tax
.2efb	60		rts				rts
.2efc					SubHandler:
.2efc	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2eff	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2f02	b0 03		bcs $2f07			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f04	4c 1f 38	jmp $381f			jmp 	MInt32Sub 							; else do it as integer.
.2f07					_IsFPOperation:
.2f07	8a		txa				txa 								; call the relevant fp routine
.2f08	a2 12		ldx #$12		ldx	#18
.2f0a	20 87 21	jsr $2187		jsr	floatingpointHandler
.2f0d	aa		tax				tax
.2f0e	60		rts				rts
.2f0f					MulHandler:
.2f0f	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2f12	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2f15	b0 03		bcs $2f1a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f17	4c 39 38	jmp $3839			jmp 	MInt32Multiply 							; else do it as integer.
.2f1a					_IsFPOperation:
.2f1a	8a		txa				txa 								; call the relevant fp routine
.2f1b	a2 0c		ldx #$0c		ldx	#12
.2f1d	20 87 21	jsr $2187		jsr	floatingpointHandler
.2f20	aa		tax				tax
.2f21	60		rts				rts
.2f22					DivHandler:
.2f22	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2f25	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2f28	b0 03		bcs $2f2d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f2a	4c f6 36	jmp $36f6			jmp 	MInt32SDivide 							; else do it as integer.
.2f2d					_IsFPOperation:
.2f2d	8a		txa				txa 								; call the relevant fp routine
.2f2e	a2 08		ldx #$08		ldx	#8
.2f30	20 87 21	jsr $2187		jsr	floatingpointHandler
.2f33	aa		tax				tax
.2f34	60		rts				rts
.2f35					ModHandler:
.2f35	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2f38	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2f3b	b0 03		bcs $2f40			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f3d	4c 74 37	jmp $3774			jmp 	MInt32Modulus 							; else do it as integer.
.2f40					_IsFPOperation:
.2f40	8a		txa				txa 								; call the relevant fp routine
.2f41	a2 0a		ldx #$0a		ldx	#10
.2f43	20 87 21	jsr $2187		jsr	floatingpointHandler
.2f46	aa		tax				tax
.2f47	60		rts				rts
.2f48					XorHandler:
.2f48	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2f4b	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2f4e	b0 03		bcs $2f53			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f50	4c a8 36	jmp $36a8			jmp 	MInt32Xor 							; else do it as integer.
.2f53					_IsFPOperation:
.2f53	8a		txa				txa 								; call the relevant fp routine
.2f54	a2 0a		ldx #$0a		ldx	#10
.2f56	20 87 21	jsr $2187		jsr	floatingpointHandler
.2f59	aa		tax				tax
.2f5a	60		rts				rts
.2f5b					OrHandler:
.2f5b	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2f5e	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2f61	b0 03		bcs $2f66			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f63	4c 8f 36	jmp $368f			jmp 	MInt32Or 							; else do it as integer.
.2f66					_IsFPOperation:
.2f66	8a		txa				txa 								; call the relevant fp routine
.2f67	a2 0a		ldx #$0a		ldx	#10
.2f69	20 87 21	jsr $2187		jsr	floatingpointHandler
.2f6c	aa		tax				tax
.2f6d	60		rts				rts
.2f6e					AndHandler:
.2f6e	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2f71	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2f74	b0 03		bcs $2f79			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f76	4c 76 36	jmp $3676			jmp 	MInt32And 							; else do it as integer.
.2f79					_IsFPOperation:
.2f79	8a		txa				txa 								; call the relevant fp routine
.2f7a	a2 0a		ldx #$0a		ldx	#10
.2f7c	20 87 21	jsr $2187		jsr	floatingpointHandler
.2f7f	aa		tax				tax
.2f80	60		rts				rts
.2f81					ShlHandler:
.2f81	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2f84	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2f87	b0 03		bcs $2f8c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f89	4c 02 30	jmp $3002			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2f8c					_IsFPOperation:
.2f8c	8a		txa				txa 								; call the relevant fp routine
.2f8d	a2 0a		ldx #$0a		ldx	#10
.2f8f	20 87 21	jsr $2187		jsr	floatingpointHandler
.2f92	aa		tax				tax
.2f93	60		rts				rts
.2f94					ShrHandler:
.2f94	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2f97	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2f9a	b0 03		bcs $2f9f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2f9c	4c 05 30	jmp $3005			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2f9f					_IsFPOperation:
.2f9f	8a		txa				txa 								; call the relevant fp routine
.2fa0	a2 0a		ldx #$0a		ldx	#10
.2fa2	20 87 21	jsr $2187		jsr	floatingpointHandler
.2fa5	aa		tax				tax
.2fa6	60		rts				rts
.2fa7					WordRefHandler:
.2fa7	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2faa	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2fad	b0 03		bcs $2fb2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2faf	4c f4 2f	jmp $2ff4			jmp 	MInt32WordIndirect 							; else do it as integer.
.2fb2					_IsFPOperation:
.2fb2	8a		txa				txa 								; call the relevant fp routine
.2fb3	a2 0a		ldx #$0a		ldx	#10
.2fb5	20 87 21	jsr $2187		jsr	floatingpointHandler
.2fb8	aa		tax				tax
.2fb9	60		rts				rts
.2fba					ByteRefHandler:
.2fba	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2fbd	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2fc0	b0 03		bcs $2fc5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2fc2	4c f8 2f	jmp $2ff8			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2fc5					_IsFPOperation:
.2fc5	8a		txa				txa 								; call the relevant fp routine
.2fc6	a2 0a		ldx #$0a		ldx	#10
.2fc8	20 87 21	jsr $2187		jsr	floatingpointHandler
.2fcb	aa		tax				tax
.2fcc	60		rts				rts
.2fcd					PowerHandler:
.2fcd	20 aa 30	jsr $30aa			jsr 	DereferenceTwo
.2fd0	20 ad 2e	jsr $2ead			jsr 	BinaryProcess 				; check to see if either is float
.2fd3	b0 03		bcs $2fd8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2fd5	4c e0 2f	jmp $2fe0			jmp 	PowerInteger 							; else do it as integer.
.2fd8					_IsFPOperation:
.2fd8	8a		txa				txa 								; call the relevant fp routine
.2fd9	a2 18		ldx #$18		ldx	#24
.2fdb	20 87 21	jsr $2187		jsr	floatingpointHandler
.2fde	aa		tax				tax
.2fdf	60		rts				rts
.2fe0					PowerInteger:
.2fe0	20 c7 2e	jsr $2ec7			jsr 	BPMakeBothFloat				; make them float.
.2fe3	8a		txa				txa
.2fe4	a2 18		ldx #$18		ldx	#24
.2fe6	20 87 21	jsr $2187		jsr	floatingpointHandler
.2fe9	a2 14		ldx #$14		ldx	#20
.2feb	20 87 21	jsr $2187		jsr	floatingpointHandler
.2fee	aa		tax				tax
.2fef	a9 00		lda #$00			lda 	#0 							; make type integer
.2ff1	95 90		sta $90,x			sta 	esType,x
.2ff3	60		rts				rts
.2ff4					Mint32WordIndirect:
.2ff4	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2ff6	d0 02		bne $2ffa			bne 	Min32Indirect
.2ff8					Mint32ByteIndirect:
.2ff8	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2ffa					Min32Indirect:
.2ffa	48		pha				pha 								; save the indirection
.2ffb	20 05 38	jsr $3805			jsr 	MInt32Add 					; add a!b a?b
.2ffe	68		pla				pla 								; and set the type to reference.
.2fff	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.3001	60		rts				rts
.3002					Mint32ShiftLeftX:
.3002	18		clc				clc 								; CC shift left
.3003	90 01		bcc $3006			bcc 	Mint32Shift
.3005					Mint32ShiftRightX:
.3005	38		sec				sec 								; CS shift right
.3006					Mint32Shift:
.3006	08		php				php 								; save carry flag on stack.
.3007	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3009	15 a9		ora $a9,x			ora 	esInt2+1,x
.300b	15 b1		ora $b1,x			ora 	esInt3+1,x
.300d	d0 1e		bne $302d			bne 	_MShiftZero
.300f	b5 99		lda $99,x			lda 	esInt0+1,x
.3011	c9 20		cmp #$20			cmp 	#32
.3013	b0 18		bcs $302d			bcs 	_MShiftZero
.3015					_MShiftLoop:
.3015	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3017	f0 12		beq $302b			beq 	_MShiftExit
.3019	d6 99		dec $99,x			dec 	esInt0+1,x
.301b	28		plp				plp 								; restore and save carry
.301c	08		php				php
.301d	90 06		bcc $3025			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.301f	20 3f 39	jsr $393f			jsr 	Mint32ShiftRight
.3022	4c 15 30	jmp $3015			jmp 	_MShiftLoop
.3025					_MShiftLeft:
.3025	20 36 39	jsr $3936			jsr 	Mint32ShiftLeft
.3028	4c 15 30	jmp $3015			jmp 	_MShiftLoop
.302b					_MShiftExit:
.302b	28		plp				plp	 								; throw saved carry and exit
.302c	60		rts				rts
.302d					_MShiftZero:
.302d	4c 21 39	jmp $3921			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.3030					PerformComparison:
.3030	20 aa 30	jsr $30aa			jsr 	DereferenceTwo 				; make both values.
.3033	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.3035	35 91		and $91,x			and 	esType+1,x
.3037	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3038	30 1d		bmi $3057			bmi 	_PCIsString
.303a	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.303c	15 91		ora $91,x			ora 	esType+1,x
.303e	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.303f	30 22		bmi $3063			bmi 	_PCError
.3041	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.3043	f0 0f		beq $3054			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3045	20 c7 2e	jsr $2ec7			jsr 	BPMakeBothFloat 			; make both float
.3048	8a		txa				txa
.3049	a2 06		ldx #$06		ldx	#6
.304b	20 87 21	jsr $2187		jsr	floatingpointHandler
.304e	86 32		stx $32				stx 	tempShort 					; save result
.3050	aa		tax				tax
.3051	a5 32		lda $32				lda 	tempShort
.3053	60		rts				rts
.3054					_PCIsInteger:
.3054	4c c1 36	jmp $36c1			jmp 	MInt32Compare
.3057					_PCIsString:
.3057	8a		txa				txa 								; A has SP
.3058	a2 0a		ldx #$0a		ldx	#10
.305a	20 cc 3c	jsr $3ccc		jsr	stringHandler
.305d	86 32		stx $32				stx 	tempShort 					; save result
.305f	aa		tax				tax 								; put SP back in X and get result.
.3060	a5 32		lda $32				lda 	tempShort
.3062	60		rts				rts
.3063					_PCError:
.3063	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3065	20 18 15	jsr $1518		jsr	errorHandler
.3068					CompareEquals:
.3068	20 30 30	jsr $3030			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.306b	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.306d	f0 35		beq $30a4			beq  	CompareTrue
.306f	4c a7 30	jmp $30a7			jmp 	CompareFalse
.3072					CompareLess:
.3072	20 30 30	jsr $3030			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3075	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3077	f0 2b		beq $30a4			beq  	CompareTrue
.3079	4c a7 30	jmp $30a7			jmp 	CompareFalse
.307c					CompareGreater:
.307c	20 30 30	jsr $3030			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.307f	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3081	f0 21		beq $30a4			beq  	CompareTrue
.3083	4c a7 30	jmp $30a7			jmp 	CompareFalse
.3086					CompareNotEquals:
.3086	20 30 30	jsr $3030			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3089	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.308b	d0 17		bne $30a4			bne  	CompareTrue
.308d	4c a7 30	jmp $30a7			jmp 	CompareFalse
.3090					CompareGreaterEq:
.3090	20 30 30	jsr $3030			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3093	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3095	d0 0d		bne $30a4			bne  	CompareTrue
.3097	4c a7 30	jmp $30a7			jmp 	CompareFalse
.309a					CompareLessEq:
.309a	20 30 30	jsr $3030			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.309d	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.309f	d0 03		bne $30a4			bne  	CompareTrue
.30a1	4c a7 30	jmp $30a7			jmp 	CompareFalse
.30a4					CompareTrue:
.30a4	4c 1d 39	jmp $391d			jmp 	MInt32True
.30a7					CompareFalse:
.30a7	4c 21 39	jmp $3921			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.30aa					DereferenceTwo:
.30aa	e8		inx				inx
.30ab	20 af 30	jsr $30af			jsr 	DereferenceOne
.30ae	ca		dex				dex
.30af					DereferenceOne:
.30af	b5 90		lda $90,x			lda 	esType,x
.30b1	10 3d		bpl $30f0			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.30b3	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.30b4	b0 3b		bcs $30f1			bcs 	_DRFloatDeReference
.30b6	98		tya				tya
.30b7	48		pha				pha
.30b8	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.30ba	85 2a		sta $2a				sta 	temp0
.30bc	b5 a0		lda $a0,x			lda 	esInt1,x
.30be	85 2b		sta $2b				sta 	temp0+1
.30c0	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.30c2	95 a0		sta $a0,x			sta 	esInt1,x
.30c4	95 a8		sta $a8,x			sta 	esInt2,x
.30c6	95 b0		sta $b0,x			sta 	esInt3,x
.30c8	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.30ca	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.30cc	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.30cd	30 0d		bmi $30dc			bmi 	_DeRefString 				; string, 2 bytes only
.30cf	d0 11		bne $30e2			bne 	_DeRefByte 					; byte 1 byte only
.30d1					_DeRefLong:
.30d1	a0 03		ldy #$03			ldy 	#3
.30d3	b1 2a		lda ($2a),y			lda 	(temp0),y
.30d5	95 b0		sta $b0,x			sta 	esInt3,x
.30d7	88		dey				dey
.30d8	b1 2a		lda ($2a),y			lda 	(temp0),y
.30da	95 a8		sta $a8,x			sta 	esInt2,x
.30dc					_DeRefString:
.30dc	a0 01		ldy #$01			ldy 	#1
.30de	b1 2a		lda ($2a),y			lda 	(temp0),y
.30e0	95 a0		sta $a0,x			sta 	esInt1,x
.30e2					_DeRefByte:
.30e2	a0 00		ldy #$00			ldy 	#0
.30e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.30e6	95 98		sta $98,x			sta 	esInt0,x
.30e8	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.30ea	29 40		and #$40			and 	#$40
.30ec	95 90		sta $90,x			sta 	esType,x
.30ee	68		pla				pla
.30ef	a8		tay				tay
.30f0					_DRNotReference
.30f0	60		rts				rts
.30f1					_DRFloatDereference:
.30f1	20 79 26	jsr $2679			jsr 	TOSToTemp0 					; address to deref in temp0
.30f4	8a		txa				txa
.30f5	a2 1e		ldx #$1e		ldx	#30
.30f7	20 87 21	jsr $2187		jsr	floatingpointHandler
.30fa	aa		tax				tax
.30fb	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.30fd	95 90		sta $90,x			sta 	esType,x
.30ff	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.3100					EvaluateLevel:
.3100	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.3102	b0 1e		bcs $3122			bcs 	_ELStack
.3104	48		pha				pha 								; save precedence level.
.3105	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3107	95 98		sta $98,x			sta 	esInt0,x
.3109	95 a0		sta $a0,x			sta 	esInt1,x
.310b	95 a8		sta $a8,x			sta 	esInt2,x
.310d	95 b0		sta $b0,x			sta 	esInt3,x
.310f	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.3111	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.3113	30 26		bmi $313b			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.3115	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3116	30 0f		bmi $3127			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3118	8a		txa				txa 								; stack level in X
.3119	a2 02		ldx #$02		ldx	#2
.311b	20 16 49	jsr $4916		jsr	variableHandler
.311e	aa		tax				tax
.311f	4c 64 31	jmp $3164			jmp		_ELHasTerm
.3122					_ELStack:
.3122	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3124	20 18 15	jsr $1518		jsr	errorHandler
.3127					_ELIsConstant:
.3127	4a		lsr a				lsr 	a 							; get the value back
.3128	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.312a	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.312c					_ELCheckNext:
.312c	c8		iny				iny 								; look at next
.312d	b1 28		lda ($28),y			lda 	(codePtr),y
.312f	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.3131	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.3133	b0 2f		bcs $3164			bcs 	_ELHasTerm 					; done getting the constant.
.3135	20 fd 31	jsr $31fd			jsr 	ELShiftByteIn 				; shift byte into position.
.3138	4c 2c 31	jmp $312c			jmp 	_ELCheckNext
.313b					_ELIsToken:
.313b	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.313d	f0 0f		beq $314e			beq 	_ELIsString
.313f	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3141	d0 5f		bne $31a2			bne 	_ELCheckUnary
.3143	8a		txa				txa 								; put X into A
.3144	c8		iny				iny 								; skip over the float marker
.3145	a2 1a		ldx #$1a		ldx	#26
.3147	20 87 21	jsr $2187		jsr	floatingpointHandler
.314a	aa		tax				tax 								; restore X
.314b	4c 64 31	jmp $3164			jmp 	_ELHasTerm
.314e					_ELIsString:
.314e	98		tya				tya 								; address of string is codePtr+y+1
.314f	38		sec				sec
.3150	65 28		adc $28				adc 	codePtr
.3152	95 98		sta $98,x			sta 	esInt0,x
.3154	a5 29		lda $29				lda 	codePtr+1
.3156	69 00		adc #$00			adc 	#0
.3158	95 a0		sta $a0,x			sta 	esInt1,x
.315a	a9 40		lda #$40			lda 	#$40 						; set type to string value
.315c	95 90		sta $90,x			sta 	esType,x
.315e	c8		iny				iny 								; skip over string.
.315f	98		tya				tya
.3160	38		sec				sec									; +1 for the length itself.
.3161	71 28		adc ($28),y			adc 	(codePtr),y
.3163	a8		tay				tay 								; and fall through to term loop code.
.3164					_ELHasTerm:
.3164	b1 28		lda ($28),y			lda 	(codePtr),y
.3166	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3168	90 04		bcc $316e			bcc 	_ELPopExit
.316a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.316c	90 02		bcc $3170			bcc 	_ELHasBinaryTerm
.316e					_ELPopExit:
.316e	68		pla				pla
.316f					_ELExit:
.316f	60		rts				rts
.3170					_ELHasBinaryTerm:
.3170	84 32		sty $32				sty 	tempShort 					; save position
.3172	a8		tay				tay 								; use token as an index and get the precedence.
.3173	b9 a5 31	lda $31a5,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3176	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3178	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.317a	68		pla				pla 								; restore current level.
.317b	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.317d	b0 f0		bcs $316f			bcs 	_ELExit
.317f	48		pha				pha 								; save current level back on the stack.
.3180	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.3182	48		pha				pha
.3183	c8		iny				iny
.3184	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3185	a5 32		lda $32				lda 	tempShort
.3187	20 00 31	jsr $3100			jsr 	EvaluateLevel
.318a	ca		dex				dex
.318b	68		pla				pla 								; get the operator back out.
.318c					_ELExecuteA:
.318c	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.318e	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.318f	aa		tax				tax
.3190	bd bf 2d	lda $2dbf,x			lda 	Group0Vectors,x
.3193	85 2a		sta $2a				sta 	temp0
.3195	bd c0 2d	lda $2dc0,x			lda 	Group0Vectors+1,x
.3198	85 2b		sta $2b				sta 	temp0+1
.319a	a6 32		ldx $32				ldx 	tempShort
.319c	20 e9 31	jsr $31e9			jsr 	_ELCallTemp0
.319f	4c 64 31	jmp $3164			jmp 	_ELHasTerm 					; and loop back round.
.31a2					_ELCheckUnary:
.31a2	c8		iny				iny 								; skip over token.
.31a3	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.31a5	f0 19		beq $31c0			beq 	_ELMinus
.31a7	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.31a9	f0 2c		beq $31d7			beq 	_ELIndirect
.31ab	c9 98		cmp #$98			cmp 	#TKW_QMARK
.31ad	f0 28		beq $31d7			beq 	_ELIndirect
.31af	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.31b1	f0 39		beq $31ec			beq 	_ELExtension
.31b3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.31b5	90 04		bcc $31bb			bcc 	_ELUSyntax
.31b7	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.31b9	90 d1		bcc $318c			bcc 	_ELExecuteA 				; if so do that token.
.31bb					_ELUSyntax:
.31bb	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.31bd	20 18 15	jsr $1518		jsr	errorHandler
.31c0					_ELMinus:
.31c0	20 52 32	jsr $3252			jsr 	EvaluateNumericTerm 		; get a number to negate.
.31c3	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.31c5	f0 0a		beq $31d1			beq 	_ELMinusInteger
.31c7	8a		txa				txa
.31c8	a2 0e		ldx #$0e		ldx	#14
.31ca	20 87 21	jsr $2187		jsr	floatingpointHandler
.31cd	aa		tax				tax
.31ce	4c 64 31	jmp $3164			jmp 	_ELHasTerm
.31d1					_ELMinusInteger:
.31d1	20 db 38	jsr $38db			jsr 	MInt32Negate 				; do int negate
.31d4	4c 64 31	jmp $3164			jmp 	_ELHasTerm
.31d7					_ELIndirect:
.31d7	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.31d8	20 5b 32	jsr $325b			jsr 	EvaluateIntegerTerm 		; integer address
.31db	68		pla				pla
.31dc	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.31de	f0 02		beq $31e2			beq 	_ELHaveModifier
.31e0	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.31e2					_ELHaveModifier:
.31e2	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.31e4	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.31e6	4c 64 31	jmp $3164			jmp 	_ELHasTerm
.31e9					_ELCallTemp0:
.31e9	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.31ec					_ELExtension:
.31ec	8a		txa				txa 								; stack pos in A
.31ed	20 69 18	jsr $1869		jsr	extensionHandler
.31f0	aa		tax				tax 								; restore stack
.31f1	4c 64 31	jmp $3164			jmp 	_ELHasTerm
.31f4					UnaryParenthesis:
.31f4	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.31f6	20 00 31	jsr $3100			jsr 	EvaluateLevel
.31f9	20 94 39	jsr $3994			jsr 	CheckRightParen 			; check for )
.31fc	60		rts				rts
.31fd					ELShiftByteIn:
.31fd	48		pha				pha 								; save bits to shift in.
.31fe	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.3200	48		pha				pha
.3201	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.3203	95 b0		sta $b0,x			sta 	esInt3,x
.3205	b5 a0		lda $a0,x			lda 	esInt1,x
.3207	95 a8		sta $a8,x			sta 	esInt2,x
.3209	b5 98		lda $98,x			lda 	esInt0,x
.320b	95 a0		sta $a0,x			sta 	esInt1,x
.320d	a9 00		lda #$00			lda 	#0
.320f	95 98		sta $98,x			sta 	esInt0,x
.3211	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.3212	29 03		and #$03			and 	#3 							; only want lower 2 bits
.3214	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3216					_ELShiftLoop:
.3216	4a		lsr a				lsr 	a
.3217	76 b0		ror $b0,x			ror 	esInt3,x
.3219	76 a8		ror $a8,x			ror 	esInt2,x
.321b	76 a0		ror $a0,x			ror 	esInt1,x
.321d	76 98		ror $98,x			ror 	esInt0,x
.321f	c9 01		cmp #$01			cmp 	#1
.3221	d0 f3		bne $3216			bne 	_ELShiftLoop
.3223	68		pla				pla 								; get original 6 bit value and OR in.
.3224	29 3f		and #$3f			and 	#$3F
.3226	15 98		ora $98,x			ora 	esInt0,x
.3228	95 98		sta $98,x			sta 	esInt0,x
.322a	60		rts				rts
.322b					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>322b	01					.byte	$01			; $86 and
>322c	01					.byte	$01			; $87 or
>322d	01					.byte	$01			; $88 xor
>322e	02					.byte	$02			; $89 >=
>322f	02					.byte	$02			; $8a <=
>3230	02					.byte	$02			; $8b >
>3231	02					.byte	$02			; $8c <
>3232	02					.byte	$02			; $8d =
>3233	02					.byte	$02			; $8e <>
>3234	03					.byte	$03			; $8f +
>3235	03					.byte	$03			; $90 -
>3236	04					.byte	$04			; $91 >>
>3237	04					.byte	$04			; $92 <<
>3238	04					.byte	$04			; $93 *
>3239	04					.byte	$04			; $94 /
>323a	04					.byte	$04			; $95 mod
>323b	05					.byte	$05			; $96 ^
>323c	06					.byte	$06			; $97 !
>323d	06					.byte	$06			; $98 ?
>323e	82					.byte	$82			; $99 repeat
>323f	82					.byte	$82			; $9a while
>3240	82					.byte	$82			; $9b for
>3241	82					.byte	$82			; $9c if
>3242	82					.byte	$82			; $9d defproc
>3243	80					.byte	$80			; $9e until
>3244	80					.byte	$80			; $9f wend
>3245	80					.byte	$80			; $a0 next
>3246	80					.byte	$80			; $a1 then
>3247	80					.byte	$80			; $a2 endif
>3248	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3249					EvaluateTerm:
.3249	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.324b	20 00 31	jsr $3100			jsr 	EvaluateLevel
.324e	20 af 30	jsr $30af			jsr 	DereferenceOne
.3251	60		rts				rts
.3252					EvaluateNumericTerm:
.3252	20 49 32	jsr $3249			jsr 	EvaluateTerm
.3255	b5 90		lda $90,x			lda 	esType,x
.3257	0a		asl a				asl 	a 							; see if it's a string.
.3258	30 09		bmi $3263			bmi 	ENTType
.325a	60		rts				rts
.325b					EvaluateIntegerTerm:
.325b	20 49 32	jsr $3249			jsr 	EvaluateTerm
.325e	b5 90		lda $90,x			lda 	esType,x
.3260	d0 01		bne $3263			bne 	ENTType
.3262	60		rts				rts
.3263					ENTType:
.3263	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3265	20 18 15	jsr $1518		jsr	errorHandler
.3268					EvaluateRoot:
.3268	a2 00		ldx #$00			ldx 	#0
.326a					Evaluate:
.326a	a9 00		lda #$00			lda 	#0
.326c	20 00 31	jsr $3100			jsr 	EvaluateLevel
.326f	20 af 30	jsr $30af			jsr 	DereferenceOne
.3272	60		rts				rts
.3273					EvaluateNumeric:
.3273	20 6a 32	jsr $326a			jsr 	Evaluate
.3276	b5 90		lda $90,x			lda 	esType,x
.3278	0a		asl a				asl 	a 							; see if it's a string.
.3279	30 e8		bmi $3263			bmi 	ENTType
.327b	4a		lsr a				lsr 	a 							; shift float flag into carry.
.327c	4a		lsr a				lsr 	a
.327d	60		rts				rts
.327e					EvaluateString:
.327e	20 6a 32	jsr $326a			jsr 	Evaluate
.3281	b5 90		lda $90,x			lda 	esType,x
.3283	0a		asl a				asl 	a 							; see if it's a string.
.3284	10 dd		bpl $3263			bpl 	ENTType
.3286	60		rts				rts
.3287					EvaluateRootInteger:
.3287	a2 00		ldx #$00			ldx 	#0
.3289					EvaluateInteger:
.3289	20 6a 32	jsr $326a			jsr 	Evaluate
.328c	b5 90		lda $90,x			lda 	esType,x
.328e	d0 d3		bne $3263			bne 	ENTType
.3290	60		rts				rts
.3291					EvaluateSmallInteger:
.3291	20 89 32	jsr $3289			jsr 	EvaluateInteger
.3294	b5 a0		lda $a0,x			lda 	esInt1,x
.3296	15 a8		ora $a8,x			ora 	esInt2,x
.3298	15 b0		ora $b0,x			ora 	esInt3,x
.329a	d0 03		bne $329f			bne 	_ESIValue
.329c	b5 98		lda $98,x			lda 	esInt0,x
.329e	60		rts				rts
.329f					_ESIValue:
.329f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.32a1	20 18 15	jsr $1518		jsr	errorHandler
.32a4					LinkEvaluate:
.32a4	aa		tax				tax
.32a5	20 6a 32	jsr $326a			jsr 	Evaluate
.32a8	8a		txa				txa
.32a9	60		rts				rts
.32aa					LinkEvaluateTerm:
.32aa	aa		tax				tax
.32ab	20 49 32	jsr $3249			jsr 	EvaluateTerm
.32ae	8a		txa				txa
.32af	60		rts				rts
.32b0					LinkEvaluateInteger:
.32b0	aa		tax				tax
.32b1	20 89 32	jsr $3289			jsr 	EvaluateInteger
.32b4	8a		txa				txa
.32b5	60		rts				rts
.32b6					LinkEvaluateString:
.32b6	aa		tax				tax
.32b7	20 7e 32	jsr $327e			jsr 	EvaluateString
.32ba	8a		txa				txa
.32bb	60		rts				rts
.32bc					LinkEvaluateSmallInt:
.32bc	aa		tax				tax
.32bd	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger
.32c0	8a		txa				txa
.32c1	60		rts				rts
.32c2					EvaluateReference:
.32c2	ad 3c 32	lda $323c			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.32c5	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.32c6	e9 01		sbc #$01			sbc 	#1
.32c8	20 00 31	jsr $3100			jsr 	EvaluateLevel
.32cb	b5 90		lda $90,x			lda 	esType,x
.32cd	10 01		bpl $32d0			bpl 	_ERFail
.32cf	60		rts				rts
.32d0					_ERFail:
.32d0	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.32d2	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.32d5					Event_Str:
.32d5	20 73 32	jsr $3273			jsr 	EvaluateNumeric 			; get a number.
.32d8	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.32da	d0 13		bne $32ef			bne 	_ESFloat
.32dc	20 32 33	jsr $3332			jsr 	ConvertGetBase 				; get base, or default.
.32df	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.32e1	85 2a		sta $2a				sta 	temp0
.32e3	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.32e5	85 2b		sta $2b				sta 	1+(temp0)
.32e7	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.32e9	20 77 38	jsr $3877			jsr 	MInt32ToString 				; convert to string.
.32ec	4c fc 32	jmp $32fc			jmp 	_ESCloneExit 				; clone and exit.
.32ef					_ESFloat:
.32ef	20 94 39	jsr $3994			jsr 	CheckRightParen 			; check closing )
.32f2	20 79 26	jsr $2679			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.32f5	8a		txa				txa
.32f6	a2 16		ldx #$16		ldx	#22
.32f8	20 87 21	jsr $2187		jsr	floatingpointHandler
.32fb	aa		tax				tax
.32fc					_ESCloneExit:
.32fc	8a		txa				txa
.32fd	a2 04		ldx #$04		ldx	#4
.32ff	20 cc 3c	jsr $3ccc		jsr	stringHandler
.3302	aa		tax				tax
.3303	60		rts				rts
.3304					UnaryVal:
.3304	38		sec				sec 								; Carry set to return value
.3305	b0 01		bcs $3308			bcs 	ValueMain
.3307					UnaryIsVal:
.3307	18		clc				clc									; Carry clear to return legitimacy
.3308					ValueMain:
.3308	08		php				php 								; save results (CS is value, CC is validation)
.3309	20 7e 32	jsr $327e			jsr 	EvaluateString
.330c	20 32 33	jsr $3332			jsr 	ConvertGetBase 				; get base, if any.
.330f	98		tya				tya
.3310	48		pha				pha
.3311	20 79 26	jsr $2679			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3314	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3316	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3318	20 8f 37	jsr $378f			jsr 	MInt32FromString 			; convert it back from a string.
.331b	b0 0c		bcs $3329			bcs 	_VMSuccess 					; successfully converted.
.331d	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.331f	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3321	f0 00		beq $3323			beq 	_VMFailed 	 				; so we failed.
.3323					_VMFailed:
.3323	68		pla				pla
.3324	a8		tay				tay
.3325	28		plp				plp
.3326	4c 21 39	jmp $3921			jmp 	MInt32False 				; return 0 whatever.
.3329					_VMSuccess:
.3329	68		pla				pla
.332a	a8		tay				tay
.332b	28		plp				plp 								; if CS the it was val() so we want the value.
.332c	b0 03		bcs $3331			bcs 	_VMExit
.332e	4c 1d 39	jmp $391d			jmp 	MInt32True 					; otherwise return true as successful.
.3331					_VMExit:
.3331	60		rts				rts
.3332					ConvertGetBase:
.3332	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3334	95 99		sta $99,x			sta 	esInt0+1,x
.3336	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3338	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.333a	d0 0e		bne $334a			bne 	_CGBDone 					; not found, should be )
.333c	e8		inx				inx 								; next level
.333d	c8		iny				iny 								; skip comma.
.333e	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger		; evaluate the base.
.3341	ca		dex				dex
.3342	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3344	90 08		bcc $334e			bcc 	_CGBValue 					; (it should work as high as 37)
.3346	c9 11		cmp #$11			cmp 	#17
.3348	b0 04		bcs $334e			bcs 	_CGBValue
.334a					_CGBDone:
.334a	20 94 39	jsr $3994			jsr 	CheckRightParen
.334d	60		rts				rts
.334e					_CGBValue:
.334e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3350	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.3353					EventFunction:
.3353	20 c2 32	jsr $32c2			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3356	b5 90		lda $90,x			lda 	esType,x
.3358	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.335a	d0 5b		bne $33b7			bne 	_EFType
.335c	20 a1 39	jsr $39a1			jsr 	CheckComma
.335f	e8		inx				inx
.3360	20 89 32	jsr $3289			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.3363	20 94 39	jsr $3994			jsr 	CheckRightParen 			; finish off with the right bracket
.3366	ca		dex				dex
.3367	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3369	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.336b	15 a8		ora $a8,x			ora 	esInt2,x
.336d	15 b0		ora $b0,x			ora 	esInt3,x
.336f	d0 41		bne $33b2			bne 	_EFValue
.3371	98		tya				tya
.3372	48		pha				pha
.3373	8a		txa				txa
.3374	48		pha				pha
.3375	a2 1c		ldx #$1c		ldx	#28
.3377	20 f6 14	jsr $14f6		jsr	deviceHandler
.337a	84 2d		sty $2d				sty 	temp1+1
.337c	85 2c		sta $2c				sta 	temp1
.337e	68		pla				pla
.337f	aa		tax				tax
.3380	20 79 26	jsr $2679			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.3383	a0 03		ldy #$03			ldy 	#3							; if -ve
.3385	b1 2a		lda ($2a),y			lda 	(temp0),y
.3387	30 23		bmi $33ac			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3389	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.338b	b1 2a		lda ($2a),y			lda 	(temp0),y
.338d	c8		iny				iny
.338e	11 2a		ora ($2a),y			ora 	(temp0),y
.3390	f0 17		beq $33a9			beq 	_EFInitialise 				; if so, initialise the value but return false.
.3392	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.3394	38		sec				sec
.3395	b1 2a		lda ($2a),y			lda 	(temp0),y
.3397	e5 2c		sbc $2c				sbc 	temp1
.3399	c8		iny				iny
.339a	b1 2a		lda ($2a),y			lda 	(temp0),y
.339c	e5 2d		sbc $2d				sbc 	temp1+1
.339e	10 0c		bpl $33ac			bpl 	_EFFail 					; if trigger >= timer then return False
.33a0	20 bc 33	jsr $33bc			jsr 	SetEventTimer 				; reset the timer for next time.
.33a3	20 1d 39	jsr $391d			jsr	 	MInt32True 					; and treutn true as fired.
.33a6	68		pla				pla
.33a7	a8		tay				tay
.33a8	60		rts				rts
.33a9					_EFInitialise:
.33a9	20 bc 33	jsr $33bc			jsr		SetEventTimer 				; set trigger time to time + elapsed
.33ac					_EFFail:
.33ac	68		pla				pla
.33ad	a8		tay				tay
.33ae	20 21 39	jsr $3921			jsr 	MInt32False
.33b1	60		rts				rts
.33b2					_EFValue:
.33b2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.33b4	20 18 15	jsr $1518		jsr	errorHandler
.33b7					_EFType:
.33b7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.33b9	20 18 15	jsr $1518		jsr	errorHandler
.33bc					SetEventTimer:
.33bc	a0 00		ldy #$00			ldy 	#0
.33be	18		clc				clc
.33bf	a5 2c		lda $2c				lda 	temp1
.33c1	75 99		adc $99,x			adc 	esInt0+1,x
.33c3	91 2a		sta ($2a),y			sta		(temp0),y
.33c5	c8		iny				iny
.33c6	a5 2d		lda $2d				lda 	temp1+1
.33c8	75 a1		adc $a1,x			adc 	esInt1+1,x
.33ca	91 2a		sta ($2a),y			sta		(temp0),y
.33cc	88		dey				dey
.33cd	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.33cf	d0 04		bne $33d5			bne 	_SETExit 					; zero means initialise.....
.33d1	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.33d3	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.33d5					_SETExit:
.33d5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.33d6					UnaryLen:
.33d6	20 e4 33	jsr $33e4			jsr 	ULStart
.33d9					ULFinish:
.33d9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.33db	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.33dd	20 30 39	jsr $3930			jsr 	MInt32Set8Bit 				; write it out.
.33e0	20 94 39	jsr $3994			jsr 	CheckRightParen
.33e3	60		rts				rts
.33e4	20 7e 32	jsr $327e	ULStart:jsr 	EvaluateString
.33e7	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.33e9	85 2a		sta $2a				sta 	temp0
.33eb	b5 a0		lda $a0,x			lda 	esInt1,x
.33ed	85 2b		sta $2b				sta 	temp0+1
.33ef	84 32		sty $32				sty 	tempShort 					; get length
.33f1	a0 00		ldy #$00			ldy 	#0
.33f3	60		rts				rts
.33f4					UnaryAsc:
.33f4	20 e4 33	jsr $33e4			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.33f7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.33f9	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.33fa	c9 00		cmp #$00			cmp 	#0
.33fc	d0 db		bne $33d9			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.33fe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3400	20 18 15	jsr $1518		jsr	errorHandler
.3403					UnaryAbs:
.3403	20 73 32	jsr $3273			jsr 	EvaluateNumeric 			; some numeric value
.3406	b0 07		bcs $340f			bcs 	_UAFloat 					; CS then float, so use that function
.3408	20 d6 38	jsr $38d6			jsr 	MInt32Absolute 				; int version
.340b	20 94 39	jsr $3994			jsr 	CheckRightParen
.340e	60		rts				rts
.340f					_UAFloat:
.340f	8a		txa				txa 								; float version
.3410	a2 02		ldx #$02		ldx	#2
.3412	20 87 21	jsr $2187		jsr	floatingpointHandler
.3415	aa		tax				tax
.3416	20 94 39	jsr $3994			jsr 	CheckRightParen
.3419	60		rts				rts
.341a					UnarySgn:
.341a	20 73 32	jsr $3273			jsr 	EvaluateNumeric 			; same as above but sign of value
.341d	b0 07		bcs $3426			bcs 	_USFloat
.341f	20 0e 39	jsr $390e			jsr 	MInt32Sign
.3422	20 94 39	jsr $3994			jsr 	CheckRightParen
.3425	60		rts				rts
.3426					_USFloat:
.3426	8a		txa				txa
.3427	a2 10		ldx #$10		ldx	#16
.3429	20 87 21	jsr $2187		jsr	floatingpointHandler
.342c	aa		tax				tax
.342d	20 94 39	jsr $3994			jsr 	CheckRightParen
.3430	60		rts				rts
.3431					UnaryPeek:
.3431	20 5d 34	jsr $345d			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3434	4c 51 34	jmp $3451			jmp 	PDLByte0
.3437					UnaryDeek:
.3437	20 5d 34	jsr $345d			jsr 	PDLCode
.343a	4c 4b 34	jmp $344b			jmp 	PDLByte1
.343d					UnaryLeek:
.343d	20 5d 34	jsr $345d			jsr 	PDLCode
.3440	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3442	b1 2a		lda ($2a),y			lda 	(temp0),y
.3444	95 b0		sta $b0,x			sta 	esInt3,x
.3446	88		dey				dey
.3447	b1 2a		lda ($2a),y			lda 	(temp0),y
.3449	95 a8		sta $a8,x			sta 	esInt2,x
.344b					PDLByte1:
.344b	a0 01		ldy #$01			ldy 	#1
.344d	b1 2a		lda ($2a),y			lda 	(temp0),y
.344f	95 a0		sta $a0,x			sta 	esInt1,x
.3451					PDLByte0:
.3451	a0 00		ldy #$00			ldy 	#0
.3453	b1 2a		lda ($2a),y			lda 	(temp0),y
.3455	95 98		sta $98,x			sta 	esInt0,x
.3457	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3459	20 94 39	jsr $3994			jsr 	CheckRightParen 			; check right and return
.345c	60		rts				rts
.345d					PDLCode:
.345d	20 89 32	jsr $3289			jsr 	EvaluateInteger 			; some address
.3460	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3462	85 2a		sta $2a				sta 	temp0
.3464	b5 a0		lda $a0,x			lda 	esInt1,x
.3466	85 2b		sta $2b				sta 	temp0+1
.3468	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.346a	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.346c	95 a8		sta $a8,x			sta 	esInt2,x
.346e	95 b0		sta $b0,x			sta 	esInt3,x
.3470	84 32		sty $32				sty 	tempShort 					; save Y
.3472	60		rts				rts
.3473					Unary_Random:
.3473	20 51 39	jsr $3951			jsr 	MInt32Random 				; generate random number.
.3476	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3478	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.347a	f0 08		beq $3484			beq 	_URExit
.347c	e8		inx				inx 								; load range 0..r-1 into +1
.347d	20 89 32	jsr $3289			jsr 	EvaluateInteger
.3480	ca		dex				dex
.3481	20 74 37	jsr $3774			jsr 	MInt32Modulus 				; calculate random % modulus
.3484					_URExit:
.3484	20 94 39	jsr $3994			jsr 	CheckRightParen 			; check right and return
.3487	60		rts				rts
.3488					Unary_Min:
.3488	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.348a	d0 02		bne $348e			bne 	UnaryMBody
.348c					Unary_Max:
.348c	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.348e					UnaryMBody:
.348e	48		pha				pha 								; save comparator on stack, shows min or max
.348f	20 6a 32	jsr $326a			jsr 	Evaluate 					; get the first thing to check
.3492					_UnaryMLoop:
.3492	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3494	c8		iny				iny
.3495	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3497	f0 09		beq $34a2			beq 	_UnaryMExit
.3499	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.349b	f0 07		beq $34a4			beq 	_UnaryMCompare
.349d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.349f	20 18 15	jsr $1518		jsr	errorHandler
.34a2					_UnaryMExit:
.34a2	68		pla				pla 								; done so throw comparator and return.
.34a3	60		rts				rts
.34a4					_UnaryMCompare:
.34a4	e8		inx				inx 								; get the 2nd thing to evaluate
.34a5	20 6a 32	jsr $326a			jsr 	Evaluate
.34a8	ca		dex				dex
.34a9	20 30 30	jsr $3030			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.34ac	85 32		sta $32				sta 	tempShort 					; save result
.34ae	68		pla				pla 								; get what we need
.34af	48		pha				pha
.34b0	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.34b2	d0 de		bne $3492			bne 	_UnaryMLoop 				; no, try another value.
.34b4	20 21 39	jsr $3921			jsr 	MInt32False 				; promote 2nd to 1st.
.34b7	20 05 38	jsr $3805			jsr 	MInt32Add
.34ba	4c 92 34	jmp $3492			jmp 	_UnaryMLoop
.34bd					Unary_Page:
.34bd	20 21 39	jsr $3921			jsr 	MInt32False 				; zero
.34c0	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.34c3	95 98		sta $98,x			sta 	esInt0,x
.34c5	ad c9 0a	lda $0ac9			lda 	basePage+1
.34c8	95 a0		sta $a0,x			sta 	esInt1,x
.34ca	60		rts				rts
.34cb					UnaryReference:
.34cb	a9 0f		lda #$0f			lda 	#15
.34cd	20 00 31	jsr $3100			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.34d0	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.34d2	10 05		bpl $34d9			bpl 	UType
.34d4	a9 00		lda #$00			lda 	#0 							; make it an integer
.34d6	95 90		sta $90,x			sta 	esType,x
.34d8	60		rts				rts
.34d9					UType:
.34d9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.34db	20 18 15	jsr $1518		jsr	errorHandler
.34de					UnaryHexMarker:
.34de	4c 5b 32	jmp $325b			jmp 	EvaluateIntegerTerm
.34e1					UnaryComplement:
.34e1	20 5b 32	jsr $325b			jsr 	EvaluateIntegerTerm
.34e4	20 f5 38	jsr $38f5			jsr 	MInt32Not
.34e7	60		rts				rts
.34e8					UnaryIntToFloat:
.34e8	20 73 32	jsr $3273			jsr 	EvaluateNumeric				; some number
.34eb	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.34ed	d0 0b		bne $34fa			bne 	_UIFExit
.34ef	8a		txa				txa 								; convert and set type
.34f0	a2 1c		ldx #$1c		ldx	#28
.34f2	20 87 21	jsr $2187		jsr	floatingpointHandler
.34f5	aa		tax				tax
.34f6	a9 01		lda #$01			lda 	#1
.34f8	95 90		sta $90,x			sta 	esType,x
.34fa					_UIFExit:
.34fa	60		rts				rts
.34fb					UnaryFloatToInt:
.34fb	20 73 32	jsr $3273			jsr 	EvaluateNumeric 			; the number
.34fe	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3500	f0 0b		beq $350d			beq 	_UFIExit
.3502	8a		txa				txa 								; convert to int
.3503	a2 14		ldx #$14		ldx	#20
.3505	20 87 21	jsr $2187		jsr	floatingpointHandler
.3508	aa		tax				tax
.3509	a9 00		lda #$00			lda 	#0 							; set type
.350b	95 90		sta $90,x			sta 	esType,x
.350d					_UFIExit:
.350d	60		rts				rts
.350e					UnaryAlloc:
.350e	e8		inx				inx 								; evaluate memory required
.350f	20 89 32	jsr $3289			jsr 	EvaluateInteger
.3512	20 94 39	jsr $3994			jsr 	CheckRightParen
.3515	ca		dex				dex
.3516	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3518	15 b1		ora $b1,x			ora 	esInt3+1,x
.351a	d0 1d		bne $3539			bne 	_UABadValue
.351c	20 21 39	jsr $3921			jsr 	MInt32False					; zero return.
.351f	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3521	95 a0		sta $a0,x			sta 	esInt1,x
.3523	a5 35		lda $35				lda 	lowMemory
.3525	95 98		sta $98,x			sta 	esInt0,x
.3527	18		clc				clc 								; add alloc required.
.3528	75 99		adc $99,x			adc 	esInt0+1,x
.352a	85 35		sta $35				sta 	lowMemory
.352c	a5 36		lda $36				lda 	lowMemory+1
.352e	75 a1		adc $a1,x			adc 	esInt1+1,x
.3530	85 36		sta $36				sta 	lowMemory+1
.3532	b0 05		bcs $3539			bcs		_UABadValue 				; overflow definitely bad.
.3534	c5 34		cmp $34				cmp 	highMemory+1
.3536	b0 01		bcs $3539			bcs 	_UABadValue 				; out of memory bad.
.3538	60		rts				rts
.3539					_UABadValue:
.3539	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.353b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.353e					UnaryTimer:
.353e	20 94 39	jsr $3994			jsr 	CheckRightParen 			; no parameters
.3541	98		tya				tya
.3542	48		pha				pha
.3543	20 48 39	jsr $3948			jsr 	MInt32Zero 					; zero result
.3546	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3548	a2 1c		ldx #$1c		ldx	#28
.354a	20 f6 14	jsr $14f6		jsr	deviceHandler
.354d	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.354f	95 98		sta $98,x			sta 	esInt0,x
.3551	98		tya				tya
.3552	95 a0		sta $a0,x			sta 	esInt1,x
.3554	68		pla				pla
.3555	a8		tay				tay
.3556	60		rts				rts
.3557					UnaryInkey:
.3557	20 94 39	jsr $3994			jsr 	CheckRightParen
.355a	86 2a		stx $2a				stx 	temp0
.355c	a2 0a		ldx #$0a		ldx	#10
.355e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3561	a6 2a		ldx $2a				ldx 	temp0
.3563	20 30 39	jsr $3930			jsr 	MInt32Set8Bit
.3566	60		rts				rts
.3567					UnaryGet:
.3567	20 94 39	jsr $3994			jsr 	CheckRightParen
.356a	86 2a		stx $2a				stx 	temp0
.356c					_UGLoop:
.356c	a2 02		ldx #$02		ldx	#2
.356e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3571	a2 0a		ldx #$0a		ldx	#10
.3573	20 f6 14	jsr $14f6		jsr	deviceHandler
.3576	c9 00		cmp #$00			cmp 	#0
.3578	f0 f2		beq $356c			beq 	_UGLoop
.357a	a6 2a		ldx $2a				ldx 	temp0
.357c	20 30 39	jsr $3930			jsr 	MInt32Set8Bit
.357f	60		rts				rts
.3580					UnaryGetString:
.3580	20 67 35	jsr $3567			jsr 	UnaryGet
.3583					UGSDoChr:
.3583	4c d4 35	jmp $35d4			jmp 	ChrCode
.3586					UnaryInkeyString:
.3586	20 57 35	jsr $3557			jsr 	UnaryInkey
.3589	b5 98		lda $98,x			lda 	esInt0,x
.358b	d0 f6		bne $3583			bne 	UGSDoChr
.358d	8a		txa				txa
.358e	a2 08		ldx #$08		ldx	#8
.3590	20 cc 3c	jsr $3ccc		jsr	stringHandler
.3593	aa		tax				tax
.3594	60		rts				rts
.3595					UnarySys:
.3595	20 89 32	jsr $3289			jsr 	EvaluateInteger 				; get the address
.3598	20 94 39	jsr $3994			jsr 	CheckRightParen
.359b	20 79 26	jsr $2679			jsr 	TOSToTemp0 						; copy call address to temp0
.359e	8a		txa				txa
.359f	48		pha				pha
.35a0	98		tya				tya
.35a1	48		pha				pha
.35a2	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.35a5	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.35a8	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.35ab	20 ba 35	jsr $35ba			jsr 	_CallTemp0
.35ae	85 32		sta $32				sta 	tempShort 						; restore YX
.35b0	68		pla				pla
.35b1	a8		tay				tay
.35b2	68		pla				pla
.35b3	aa		tax				tax
.35b4	a5 32		lda $32				lda 	tempShort
.35b6	20 30 39	jsr $3930			jsr 	MInt32Set8Bit 					; return result.
.35b9	60		rts				rts
.35ba					_CallTemp0:
.35ba	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.35bd					UnaryMem:
.35bd	20 21 39	jsr $3921			jsr 	MInt32False 					; set to false (e.g. 0)
.35c0	38		sec				sec
.35c1	a5 33		lda $33				lda 	highMemory 						; calculate value
.35c3	e5 35		sbc $35				sbc 	lowMemory
.35c5	95 98		sta $98,x			sta 	esInt0,x
.35c7	a5 34		lda $34				lda 	highMemory+1
.35c9	e5 36		sbc $36				sbc 	lowMemory+1
.35cb	95 a0		sta $a0,x			sta 	esInt1,x
.35cd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.35ce					ExecChr:
.35ce	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger		; character number 0-255
.35d1	20 94 39	jsr $3994			jsr 	CheckRightParen				; right bracket
.35d4					ChrCode:
.35d4	98		tya				tya
.35d5	48		pha				pha
.35d6	8a		txa				txa 								; A = stack
.35d7	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.35d9	a2 02		ldx #$02		ldx	#2
.35db	20 cc 3c	jsr $3ccc		jsr	stringHandler
.35de	aa		tax				tax 								; X = stack
.35df	68		pla				pla
.35e0	a8		tay				tay
.35e1	60		rts				rts
.35e2					ExecLower:
.35e2	38		sec				sec 								; set carry is lower
.35e3	b0 01		bcs $35e6			bcs 	ExecUpperLower
.35e5					ExecUpper:
.35e5	18		clc				clc 								; clear carry is upper
.35e6					ExecUpperLower:
.35e6	08		php				php 								; save carry
.35e7	20 7e 32	jsr $327e			jsr 	EvaluateString 				; string to stack,X
.35ea	20 94 39	jsr $3994			jsr 	CheckRightParen 			; check closing right bracket.
.35ed	28		plp				plp 								; restore carry, save Y
.35ee	98		tya				tya
.35ef	48		pha				pha
.35f0	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.35f2	2a		rol a				rol 	a
.35f3	a8		tay				tay 								; now in Y
.35f4	8a		txa				txa 								; do the substring and exit.
.35f5	a2 0c		ldx #$0c		ldx	#12
.35f7	20 cc 3c	jsr $3ccc		jsr	stringHandler
.35fa	aa		tax				tax
.35fb	68		pla				pla
.35fc	a8		tay				tay
.35fd	60		rts				rts
.35fe					ExecLeft:
.35fe	20 7e 32	jsr $327e			jsr 	EvaluateString 				; string to stack,X
.3601	20 a1 39	jsr $39a1			jsr 	CheckComma
.3604	e8		inx				inx
.3605	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3607	20 30 39	jsr $3930			jsr 	MInt32Set8Bit
.360a	e8		inx				inx
.360b	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.360e					ExecSubstring:
.360e	ca		dex				dex 								; fix up X
.360f	ca		dex				dex
.3610	20 94 39	jsr $3994			jsr 	CheckRightParen 			; check closing right bracket.
.3613	8a		txa				txa 								; do the substring and exit.
.3614	a2 0e		ldx #$0e		ldx	#14
.3616	20 cc 3c	jsr $3ccc		jsr	stringHandler
.3619	aa		tax				tax
.361a	60		rts				rts
.361b					ExecMid:
.361b	20 7e 32	jsr $327e			jsr 	EvaluateString 				; string to stack,X
.361e	20 a1 39	jsr $39a1			jsr 	CheckComma
.3621	e8		inx				inx
.3622	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3625	c9 00		cmp #$00			cmp 	#0
.3627	f0 15		beq $363e			beq 	_EMValue
.3629	e8		inx				inx
.362a	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.362c	20 30 39	jsr $3930			jsr 	MInt32Set8Bit
.362f	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3631	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3633	f0 d9		beq $360e			beq 	ExecSubString
.3635	20 a1 39	jsr $39a1			jsr 	CheckComma
.3638	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.363b	4c 0e 36	jmp $360e			jmp 	ExecSubString
.363e					_EMValue:
.363e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3640	20 18 15	jsr $1518		jsr	errorHandler
.3643					ExecRight:
.3643	20 7e 32	jsr $327e			jsr 	EvaluateString 				; string to stack,X
.3646	20 a1 39	jsr $39a1			jsr 	CheckComma
.3649	e8		inx				inx
.364a	20 91 32	jsr $3291			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.364d	ca		dex				dex
.364e	98		tya				tya
.364f	48		pha				pha
.3650	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3652	85 2a		sta $2a				sta 	temp0
.3654	b5 a0		lda $a0,x			lda 	esInt1,x
.3656	85 2b		sta $2b				sta 	temp0+1
.3658	a0 00		ldy #$00			ldy 	#0 							; point to length
.365a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.365c	18		clc				clc 								; add 1.
.365d	69 01		adc #$01			adc 	#1
.365f	38		sec				sec
.3660	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3662	f0 02		beq $3666			beq		_ERMake1 					; if zero, make it 1.
.3664	b0 02		bcs $3668			bcs		_EROkay
.3666					_ERMake1:
.3666	a9 01		lda #$01			lda 	#1 							; start position.
.3668					_EROkay:
.3668	e8		inx				inx 								; set start pos.
.3669	95 98		sta $98,x			sta 	esInt0,x
.366b	e8		inx				inx
.366c	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.366e	20 30 39	jsr $3930			jsr 	MInt32Set8Bit
.3671	68		pla				pla
.3672	a8		tay				tay
.3673	4c 0e 36	jmp $360e			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3676					MInt32And:
.3676	b5 98		lda $98,x			lda 	esInt0,x
.3678	35 99		and $99,x			and 	esInt0+1,x
.367a	95 98		sta $98,x			sta 	esInt0,x
.367c	b5 a0		lda $a0,x			lda 	esInt1,x
.367e	35 a1		and $a1,x			and 	esInt1+1,x
.3680	95 a0		sta $a0,x			sta 	esInt1,x
.3682	b5 a8		lda $a8,x			lda 	esInt2,x
.3684	35 a9		and $a9,x			and 	esInt2+1,x
.3686	95 a8		sta $a8,x			sta 	esInt2,x
.3688	b5 b0		lda $b0,x			lda 	esInt3,x
.368a	35 b1		and $b1,x			and 	esInt3+1,x
.368c	95 b0		sta $b0,x			sta 	esInt3,x
.368e	60		rts				rts
.368f					MInt32Or:
.368f	b5 98		lda $98,x			lda 	esInt0,x
.3691	15 99		ora $99,x			ora 	esInt0+1,x
.3693	95 98		sta $98,x			sta 	esInt0,x
.3695	b5 a0		lda $a0,x			lda 	esInt1,x
.3697	15 a1		ora $a1,x			ora 	esInt1+1,x
.3699	95 a0		sta $a0,x			sta 	esInt1,x
.369b	b5 a8		lda $a8,x			lda 	esInt2,x
.369d	15 a9		ora $a9,x			ora 	esInt2+1,x
.369f	95 a8		sta $a8,x			sta 	esInt2,x
.36a1	b5 b0		lda $b0,x			lda 	esInt3,x
.36a3	15 b1		ora $b1,x			ora 	esInt3+1,x
.36a5	95 b0		sta $b0,x			sta 	esInt3,x
.36a7	60		rts				rts
.36a8					MInt32Xor:
.36a8	b5 98		lda $98,x			lda 	esInt0,x
.36aa	55 99		eor $99,x			eor 	esInt0+1,x
.36ac	95 98		sta $98,x			sta 	esInt0,x
.36ae	b5 a0		lda $a0,x			lda 	esInt1,x
.36b0	55 a1		eor $a1,x			eor 	esInt1+1,x
.36b2	95 a0		sta $a0,x			sta 	esInt1,x
.36b4	b5 a8		lda $a8,x			lda 	esInt2,x
.36b6	55 a9		eor $a9,x			eor 	esInt2+1,x
.36b8	95 a8		sta $a8,x			sta 	esInt2,x
.36ba	b5 b0		lda $b0,x			lda 	esInt3,x
.36bc	55 b1		eor $b1,x			eor 	esInt3+1,x
.36be	95 b0		sta $b0,x			sta 	esInt3,x
.36c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.36c1					MInt32Compare:
.36c1	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.36c3	d5 99		cmp $99,x			cmp 	esInt0+1,x
.36c5	d0 13		bne $36da			bne 	MInt32Compare2
.36c7	b5 a0		lda $a0,x			lda 	esInt1,x
.36c9	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.36cb	d0 0d		bne $36da			bne 	MInt32Compare2
.36cd	b5 a8		lda $a8,x			lda 	esInt2,x
.36cf	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.36d1	d0 07		bne $36da			bne 	MInt32Compare2
.36d3	b5 b0		lda $b0,x			lda 	esInt3,x
.36d5	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.36d7	d0 01		bne $36da			bne 	MInt32Compare2
.36d9	60		rts				rts
.36da					MInt32Compare2:
.36da	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.36dc	d5 99		cmp $99,x			cmp 	esInt0+1,x
.36de	b5 a0		lda $a0,x			lda		esInt1,x
.36e0	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.36e2	b5 a8		lda $a8,x			lda		esInt2,x
.36e4	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.36e6	b5 b0		lda $b0,x			lda		esInt3,x
.36e8	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.36ea	50 02		bvc $36ee			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.36ec	49 80		eor #$80			eor 	#$80
.36ee					_I32LNoOverflow
.36ee	30 03		bmi $36f3			bmi 	MInt32CLess					; if -ve then return $FF
.36f0	a9 01		lda #$01			lda 	#$01						; else return $01
.36f2	60		rts				rts
.36f3					MInt32CLess:
.36f3	a9 ff		lda #$ff			lda 	#$FF
.36f5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.36f6					MInt32SDivide:
.36f6	98		tya				tya  								; save Y, which is the count of negations
.36f7	48		pha				pha
.36f8	a0 00		ldy #$00			ldy 	#0 							; zero count
.36fa	20 12 37	jsr $3712			jsr 	_MInt32SRemSign 			; unsign TOS
.36fd	e8		inx				inx 								; unsign TOS+1
.36fe	20 12 37	jsr $3712			jsr 	_MInt32SRemSign
.3701	ca		dex				dex
.3702	98		tya				tya 								; save sign count on stack
.3703	48		pha				pha
.3704	20 1b 37	jsr $371b			jsr 	MInt32UDivide 				; unsigned division
.3707	68		pla				pla 								; get sign count back
.3708	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.370a	f0 03		beq $370f			beq 	_I32SNoNeg
.370c	20 db 38	jsr $38db			jsr 	MInt32Negate
.370f					_I32SNoNeg:
.370f	68		pla				pla 								; restoe Y and exit
.3710	a8		tay				tay
.3711	60		rts				rts
.3712					_MInt32SRemSign:
.3712	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3714	10 04		bpl $371a			bpl 	_MInt32SRSExit
.3716	c8		iny				iny 								; increment the sign count
.3717	20 db 38	jsr $38db			jsr 	MInt32Negate 				; negate the value.
.371a					_MInt32SRSExit:
.371a	60		rts				rts
.371b					MInt32UDivide:
.371b	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.371d	15 a1		ora $a1,x			ora 	esInt1+1,x
.371f	15 a2		ora $a2,x			ora 	esInt1+2,x
.3721	15 a3		ora $a3,x			ora 	esInt1+3,x
.3723	f0 4a		beq $376f			beq 	_MInt32DZero
.3725	e8		inx				inx 								; clear A
.3726	e8		inx				inx
.3727	20 21 39	jsr $3921			jsr 	MInt32False
.372a	ca		dex				dex
.372b	ca		dex				dex
.372c	98		tya				tya 								; save Y on the stack
.372d	48		pha				pha
.372e	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3730					_MInt32UDLoop:
.3730	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3732	36 a0		rol $a0,x			rol 	esInt1,x
.3734	36 a8		rol $a8,x			rol 	esInt2,x
.3736	36 b0		rol $b0,x			rol 	esInt3,x
.3738	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.373a	36 a2		rol $a2,x			rol 	esInt1+2,x
.373c	36 aa		rol $aa,x			rol 	esInt2+2,x
.373e	36 b2		rol $b2,x			rol 	esInt3+2,x
.3740	38		sec				sec 								; calculate A-M saving result on the stack
.3741	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3743	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3745	48		pha				pha
.3746	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3748	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.374a	48		pha				pha
.374b	b5 aa		lda $aa,x			lda 	esInt2+2,x
.374d	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.374f	48		pha				pha
.3750	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3752	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3754	90 10		bcc $3766			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3756	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3758	68		pla				pla
.3759	95 aa		sta $aa,x			sta 	esInt2+2,x
.375b	68		pla				pla
.375c	95 a2		sta $a2,x			sta 	esInt1+2,x
.375e	68		pla				pla
.375f	95 9a		sta $9a,x			sta 	esInt0+2,x
.3761	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3763	4c 69 37	jmp $3769			jmp 	_MInt32Next 					; do the next iteration
.3766					_MInt32NoSubtract:
.3766	68		pla				pla
.3767	68		pla				pla
.3768	68		pla				pla
.3769					_MInt32Next:
.3769	88		dey				dey 								; do this 32 times.
.376a	d0 c4		bne $3730			bne 	_MInt32UDLoop
.376c	68		pla				pla 								; restore Y and exit
.376d	a8		tay				tay
.376e	60		rts				rts
.376f					_MInt32DZero:
.376f	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3771	20 18 15	jsr $1518		jsr	errorHandler
.3774					MInt32Modulus:
.3774	20 1b 37	jsr $371b			jsr 	MInt32UDivide 				; do the division.
.3777	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3779	95 b0		sta $b0,x			sta 	esInt3,x
.377b	b5 aa		lda $aa,x			lda 	esInt2+2,x
.377d	95 a8		sta $a8,x			sta 	esInt2,x
.377f	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3781	95 a0		sta $a0,x			sta 	esInt1,x
.3783	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3785	95 98		sta $98,x			sta 	esInt0,x
.3787	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cfd					fs32Length:
>0cfd							.fill 	1
.3788					LinkInt32FromString:
.3788	aa		tax				tax
.3789	98		tya				tya
.378a	20 8f 37	jsr $378f			jsr 	MInt32FromString
.378d	8a		txa				txa
.378e	60		rts				rts
.378f					MInt32FromString:
.378f	85 32		sta $32				sta 	tempShort 					; save base
.3791	98		tya				tya
.3792	48		pha				pha
.3793	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3795	b1 2a		lda ($2a),y			lda 	(temp0),y
.3797	8d fd 0c	sta $0cfd			sta 	fs32Length
.379a	f0 65		beq $3801			beq 	_I32FSFail2					; fail if length zero.
.379c	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.379e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.37a0	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.37a2	d0 09		bne $37ad			bne 	_I32FSNotNegative
.37a4	ad fd 0c	lda $0cfd			lda 	fs32Length 					; get length back.
.37a7	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.37a9	f0 56		beq $3801			beq 	_I32FSFail2
.37ab	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.37ad					_I32FSNotNegative:
.37ad	a5 32		lda $32				lda 	tempShort 					; get the base back.
.37af	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.37b1	d0 02		bne $37b5			bne 	_I32FSNN2
.37b3	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.37b5					_I32FSNN2:
.37b5	48		pha				pha 								; save base + final sign on stack.
.37b6	20 21 39	jsr $3921			jsr 	MInt32False 				; zero the return value.
.37b9					_I32FSMainLoop:
.37b9	68		pla				pla 								; get the base back into tempShort
.37ba	48		pha				pha
.37bb	29 7f		and #$7f			and 	#$7F
.37bd	85 32		sta $32				sta 	tempShort
.37bf	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.37c1	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.37c3	90 02		bcc $37c7			bcc 	_I32FSNotLC
.37c5	e9 20		sbc #$20			sbc 	#32
.37c7					_I32FSNotLC:
.37c7	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.37c8	e9 30		sbc #$30			sbc 	#"0"
.37ca	90 34		bcc $3800			bcc 	_I32FSFail 					; nothing more to do.
.37cc	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.37ce	90 06		bcc $37d6			bcc 	_I32FSValidate
.37d0	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.37d2	90 2c		bcc $3800			bcc 	_I32FSFail
.37d4	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.37d6					_I32FSValidate:
.37d6	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.37d8	b0 26		bcs $3800			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.37da	48		pha				pha 								; save the new digit value.
.37db	e8		inx				inx 								; put base into next slot up on stack
.37dc	a5 32		lda $32				lda 	tempShort
.37de	20 30 39	jsr $3930			jsr 	MInt32Set8Bit
.37e1	ca		dex				dex
.37e2	20 39 38	jsr $3839			jsr 	MInt32Multiply 				; multiply current by the base
.37e5	e8		inx				inx
.37e6	68		pla				pla  								; put additive into next slot
.37e7	20 30 39	jsr $3930			jsr 	MInt32Set8Bit
.37ea	ca		dex				dex
.37eb	20 05 38	jsr $3805			jsr 	MInt32Add 					; and add it
.37ee	c8		iny				iny 								; bump the character pointer
.37ef	cc fd 0c	cpy $0cfd			cpy 	fs32Length 					; until > length.
.37f2	f0 c5		beq $37b9			beq 	_I32FSMainLoop
.37f4	90 c3		bcc $37b9			bcc 	_I32FSMainLoop
.37f6					_I32FSDone:
.37f6	68		pla				pla 								; get base/final sign back
.37f7	10 03		bpl $37fc			bpl 	_I32FSNN3
.37f9	20 db 38	jsr $38db			jsr 	MInt32Negate 				; negate the result.
.37fc					_I32FSNN3:
.37fc	68		pla				pla
.37fd	a8		tay				tay
.37fe	38		sec				sec
.37ff	60		rts				rts
.3800					_I32FSFail:
.3800	68		pla				pla
.3801					_I32FSFail2:
.3801	68		pla				pla
.3802	a8		tay				tay
.3803	18		clc				clc
.3804	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3805					MInt32Add:
.3805	18		clc				clc
.3806	b5 98		lda $98,x			lda 	esInt0,x
.3808	75 99		adc $99,x			adc 	esInt0+1,x
.380a	95 98		sta $98,x			sta 	esInt0,x
.380c	b5 a0		lda $a0,x			lda 	esInt1,x
.380e	75 a1		adc $a1,x			adc 	esInt1+1,x
.3810	95 a0		sta $a0,x			sta 	esInt1,x
.3812	b5 a8		lda $a8,x			lda 	esInt2,x
.3814	75 a9		adc $a9,x			adc 	esInt2+1,x
.3816	95 a8		sta $a8,x			sta 	esInt2,x
.3818	b5 b0		lda $b0,x			lda 	esInt3,x
.381a	75 b1		adc $b1,x			adc 	esInt3+1,x
.381c	95 b0		sta $b0,x			sta 	esInt3,x
.381e	60		rts				rts
.381f					MInt32Sub:
.381f	38		sec				sec
.3820	b5 98		lda $98,x			lda 	esInt0,x
.3822	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3824	95 98		sta $98,x			sta 	esInt0,x
.3826	b5 a0		lda $a0,x			lda 	esInt1,x
.3828	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.382a	95 a0		sta $a0,x			sta 	esInt1,x
.382c	b5 a8		lda $a8,x			lda 	esInt2,x
.382e	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3830	95 a8		sta $a8,x			sta 	esInt2,x
.3832	b5 b0		lda $b0,x			lda 	esInt3,x
.3834	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3836	95 b0		sta $b0,x			sta 	esInt3,x
.3838	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3839					MInt32Multiply:
.3839	e8		inx				inx 								; copy 2nd -> 3rd
.383a	20 5f 38	jsr $385f			jsr 	MInt32CopyUp
.383d	ca		dex				dex
.383e	20 5f 38	jsr $385f			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3841	20 21 39	jsr $3921			jsr 	MInt32False 				; zero 1st.
.3844					_I32Loop:
.3844	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3846	29 01		and #$01			and 	#1
.3848	f0 03		beq $384d			beq 	_I32NoAdd 					; if set
.384a	20 05 38	jsr $3805			jsr 	MInt32Add 					; add 2nd to 1st.
.384d					_I32NoAdd:
.384d	e8		inx				inx 								; shift 2nd left
.384e	20 36 39	jsr $3936			jsr 	MInt32ShiftLeft
.3851	e8		inx				inx  								; shift 3rd right
.3852	20 3f 39	jsr $393f			jsr 	MInt32ShiftRight
.3855	20 48 39	jsr $3948			jsr 	MInt32Zero 					; check if zero.
.3858	08		php				php 								; save status bits
.3859	ca		dex				dex 	 							; point back to 1st
.385a	ca		dex				dex
.385b	28		plp				plp 								; get status bits
.385c	d0 e6		bne $3844			bne 	_I32Loop 					; if non-zero keep going.
.385e	60		rts				rts
.385f					MInt32CopyUp:
.385f	b5 98		lda $98,x			lda 	esInt0,x
.3861	95 99		sta $99,x			sta 	esInt0+1,x
.3863	b5 a0		lda $a0,x			lda 	esInt1,x
.3865	95 a1		sta $a1,x			sta 	esInt1+1,x
.3867	b5 a8		lda $a8,x			lda 	esInt2,x
.3869	95 a9		sta $a9,x			sta 	esInt2+1,x
.386b	b5 b0		lda $b0,x			lda 	esInt3,x
.386d	95 b1		sta $b1,x			sta 	esInt3+1,x
.386f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cfe					MCharCount:	.fill 	1						; count of converted characters
.3870					MLInt32ToString:
.3870	aa		tax				tax									; module passes stack in A, base in Y
.3871	98		tya				tya
.3872	20 77 38	jsr $3877			jsr 	MInt32ToString
.3875	8a		txa				txa
.3876	60		rts				rts
.3877					MInt32ToString:
.3877	48		pha				pha 								; save base
.3878	85 32		sta $32				sta 	tempShort 					; save target base.
.387a	a9 00		lda #$00			lda 	#0
.387c	8d fe 0c	sta $0cfe			sta 	MCharCount 					; clear character count to 0
.387f	98		tya				tya
.3880	48		pha				pha
.3881	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3883	10 10		bpl $3895			bpl 	_I32TSUnsigned
.3885	48		pha				pha 								; save base on stack.
.3886	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3888	10 08		bpl $3892			bpl 	_I32TSNoFlip
.388a	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.388c	20 c8 38	jsr $38c8			jsr 	MI32WriteCharacter
.388f	20 db 38	jsr $38db			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3892					_I32TSNoFlip:
.3892	68		pla				pla 								; get the base back
.3893	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3895					_I32TSUnsigned:
.3895	20 a3 38	jsr $38a3			jsr 	MI32DivideWrite 			; recursive code to output string.
.3898	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.389a	ad fe 0c	lda $0cfe			lda 	MCharCount
.389d	91 2a		sta ($2a),y			sta 	(temp0),y
.389f	68		pla				pla
.38a0	a8		tay				tay
.38a1	68		pla				pla
.38a2	60		rts				rts
.38a3					MI32DivideWrite:
.38a3	48		pha				pha 								; save the divisor/base
.38a4	e8		inx				inx 								; write in the dividing position.
.38a5	20 30 39	jsr $3930			jsr 	MInt32Set8Bit
.38a8	ca		dex				dex
.38a9	20 1b 37	jsr $371b			jsr 	MInt32UDivide 				; divide number by base.
.38ac	68		pla				pla 								; get the base into Y
.38ad	a8		tay				tay
.38ae	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.38b0	48		pha				pha
.38b1	20 48 39	jsr $3948			jsr 	MInt32Zero 					; is the result zero ?
.38b4	f0 04		beq $38ba			beq 	_I32NoRecurse 				; if so, don't recurse.
.38b6	98		tya				tya 								; put base into A
.38b7	20 a3 38	jsr $38a3			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.38ba					_I32NoRecurse:
.38ba	68		pla				pla 								; get the remainder back
.38bb	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.38bd	90 02		bcc $38c1			bcc 	_I32NotHex
.38bf	69 06		adc #$06			adc 	#7-1
.38c1					_I32NotHex:
.38c1	18		clc				clc 								; make it ASCII
.38c2	69 30		adc #$30			adc 	#48
.38c4	20 c8 38	jsr $38c8			jsr 	MI32WriteCharacter 			; write the character out
.38c7	60		rts				rts 								; and exit.
.38c8					MI32WriteCharacter:
.38c8	ee fe 0c	inc $0cfe			inc 	MCharCount 					; bump count (space for leading count)
.38cb	ac fe 0c	ldy $0cfe			ldy 	MCharCount 					; get position
.38ce	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.38d0	c8		iny				iny
.38d1	a9 00		lda #$00			lda 	#0
.38d3	91 2a		sta ($2a),y			sta 	(temp0),y
.38d5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cff					MSeed32:	.fill 	4							; random number seed.
.38d6					MInt32Absolute:
.38d6	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.38d8	30 01		bmi $38db			bmi 	MInt32Negate
.38da	60		rts				rts
.38db					MInt32Negate:
.38db	38		sec				sec 								; subtract from zero.
.38dc	a9 00		lda #$00			lda 	#0
.38de	f5 98		sbc $98,x			sbc 	esInt0,x
.38e0	95 98		sta $98,x			sta 	esInt0,x
.38e2	a9 00		lda #$00			lda 	#0
.38e4	f5 a0		sbc $a0,x			sbc 	esInt1,x
.38e6	95 a0		sta $a0,x			sta 	esInt1,x
.38e8	a9 00		lda #$00			lda 	#0
.38ea	f5 a8		sbc $a8,x			sbc 	esInt2,x
.38ec	95 a8		sta $a8,x			sta 	esInt2,x
.38ee	a9 00		lda #$00			lda 	#0
.38f0	f5 b0		sbc $b0,x			sbc 	esInt3,x
.38f2	95 b0		sta $b0,x			sta 	esInt3,x
.38f4	60		rts				rts
.38f5					MInt32Not:
.38f5	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.38f7	49 ff		eor #$ff			eor 	#$FF
.38f9	95 98		sta $98,x			sta 	esInt0,x
.38fb	b5 a0		lda $a0,x			lda 	esInt1,x
.38fd	49 ff		eor #$ff			eor 	#$FF
.38ff	95 a0		sta $a0,x			sta 	esInt1,x
.3901	b5 a8		lda $a8,x			lda 	esInt2,x
.3903	49 ff		eor #$ff			eor 	#$FF
.3905	95 a8		sta $a8,x			sta 	esInt2,x
.3907	b5 b0		lda $b0,x			lda 	esInt3,x
.3909	49 ff		eor #$ff			eor 	#$FF
.390b	95 b0		sta $b0,x			sta 	esInt3,x
.390d	60		rts				rts
.390e					MInt32Sign:
.390e	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3910	30 0b		bmi $391d			bmi 	MInt32True 					; if set return -1 (true)
.3912	20 48 39	jsr $3948			jsr 	MInt32Zero 					; is it zero ?
.3915	f0 0a		beq $3921			beq 	MInt32False 				; if zero return 0 (false)
.3917	20 21 39	jsr $3921			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.391a	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.391c	60		rts				rts
.391d					MInt32True:
.391d	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.391f	d0 02		bne $3923			bne 	MInt32WriteAll
.3921					MInt32False:
.3921	a9 00		lda #$00			lda 	#0
.3923					MInt32WriteAll:
.3923	95 98		sta $98,x			sta 	esInt0,x
.3925					MInt32Write123:
.3925	95 a0		sta $a0,x			sta 	esInt1,x
.3927	95 a8		sta $a8,x			sta 	esInt2,x
.3929	95 b0		sta $b0,x			sta 	esInt3,x
.392b	a9 00		lda #$00			lda 	#$00						; and make it an integer
.392d	95 90		sta $90,x			sta 	esType,x
.392f	60		rts				rts
.3930					MInt32Set8Bit:
.3930	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3932	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3934	f0 ef		beq $3925			beq		MInt32Write123
.3936					MInt32ShiftLeft:
.3936	16 98		asl $98,x			asl 	esInt0,x
.3938	36 a0		rol $a0,x			rol	 	esInt1,x
.393a	36 a8		rol $a8,x			rol	 	esInt2,x
.393c	36 b0		rol $b0,x			rol	 	esInt3,x
.393e	60		rts				rts
.393f					MInt32ShiftRight:
.393f	56 b0		lsr $b0,x			lsr 	esInt3,x
.3941	76 a8		ror $a8,x			ror 	esInt2,x
.3943	76 a0		ror $a0,x			ror 	esInt1,x
.3945	76 98		ror $98,x			ror 	esInt0,x
.3947	60		rts				rts
.3948					MInt32Zero:
.3948	b5 98		lda $98,x			lda 	esInt0,x
.394a	15 a0		ora $a0,x			ora 	esInt1,x
.394c	15 a8		ora $a8,x			ora 	esInt2,x
.394e	15 b0		ora $b0,x			ora 	esInt3,x
.3950	60		rts				rts
.3951					MInt32Random:
.3951	98		tya				tya
.3952	48		pha				pha
.3953	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3955	ad ff 0c	lda $0cff			lda 	MSeed32+0 					; check the seed isn't zero
.3958	d0 03		bne $395d			bne 	_Random1
.395a	a8		tay				tay 								; if so do it 256 times
.395b	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.395d					_Random1:
.395d	0a		asl a				asl 	a
.395e	2e 00 0d	rol $0d00			rol 	MSeed32+1
.3961	2e 01 0d	rol $0d01			rol 	MSeed32+2
.3964	2e 02 0d	rol $0d02			rol 	MSeed32+3
.3967	90 02		bcc $396b			bcc 	_Random2
.3969	49 c5		eor #$c5			eor 	#$C5
.396b					_Random2:
.396b	88		dey				dey
.396c	d0 ef		bne $395d			bne 	_Random1
.396e	8d ff 0c	sta $0cff			sta 	MSeed32+0 					; copy the seed in.
.3971	95 98		sta $98,x			sta 	esInt0,x
.3973	ad 00 0d	lda $0d00			lda 	MSeed32+1
.3976	95 a0		sta $a0,x			sta 	esInt1,x
.3978	ad 01 0d	lda $0d01			lda 	MSeed32+2
.397b	95 a8		sta $a8,x			sta 	esInt2,x
.397d	ad 02 0d	lda $0d02			lda 	MSeed32+3
.3980	95 b0		sta $b0,x			sta 	esInt3,x
.3982	68		pla				pla
.3983	a8		tay				tay
.3984	a9 00		lda #$00			lda 	#0
.3986	95 90		sta $90,x			sta 	esType,x
.3988	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3989					CheckToken:
.3989	d1 28		cmp ($28),y			cmp 	(codePtr),y
.398b	d0 02		bne $398f			bne 	_CTError
.398d	c8		iny				iny
.398e	60		rts				rts
.398f					_CTError:
.398f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3991	20 18 15	jsr $1518		jsr	errorHandler
.3994					CheckRightParen:
.3994	b1 28		lda ($28),y			lda 	(codePtr),y
.3996	c8		iny				iny
.3997	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3999	d0 01		bne $399c			bne 	_CRPError
.399b	60		rts				rts
.399c					_CRPError:
.399c	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.399e	20 18 15	jsr $1518		jsr	errorHandler
.39a1					CheckComma:
.39a1	b1 28		lda ($28),y			lda 	(codePtr),y
.39a3	c8		iny				iny
.39a4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.39a6	d0 01		bne $39a9			bne 	_CCError
.39a8	60		rts				rts
.39a9					_CCError:
.39a9	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.39ab	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.39ae					RSReset:
.39ae	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.39b0	85 37		sta $37				sta 	rsPointer
.39b2	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.39b4	85 38		sta $38				sta 	1+(rsPointer)
.39b6	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.39b8	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.39bb	60		rts				rts
.39bc					RSClaim:
.39bc	84 32		sty $32				sty 	tempShort 					; preserve Y
.39be	48		pha				pha 								; save marker on stack.
.39bf	8a		txa				txa 								; get bytes required.
.39c0	38		sec				sec
.39c1	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.39c3	65 37		adc $37				adc 	rsPointer
.39c5	85 37		sta $37				sta 	rsPointer
.39c7	a5 38		lda $38				lda 	rsPointer+1
.39c9	69 ff		adc #$ff			adc 	#$FF
.39cb	85 38		sta $38				sta 	rsPointer+1
.39cd	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.39cf	90 08		bcc $39d9			bcc 	_RSCOverflow
.39d1	68		pla				pla 								; get marker back
.39d2	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.39d4	91 37		sta ($37),y			sta 	(rsPointer),y
.39d6	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.39d8	60		rts				rts
.39d9					_RSCOverflow:
.39d9	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.39db	20 18 15	jsr $1518		jsr	errorHandler
.39de					RSFree:
.39de	18		clc				clc
.39df	65 37		adc $37				adc 	rsPointer
.39e1	85 37		sta $37				sta 	rsPointer
.39e3	90 02		bcc $39e7			bcc 	_RSFExit
.39e5	e6 38		inc $38				inc 	rsPointer+1
.39e7					_RSFExit:
.39e7	60		rts				rts
.39e8					RSSavePosition:
.39e8	84 32		sty $32				sty 	tempShort 					; save Y position
.39ea	a8		tay				tay 								; this is where we write it.
.39eb	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.39ed	91 37		sta ($37),y			sta 	(rsPointer),y
.39ef	c8		iny				iny
.39f0	a5 29		lda $29				lda 	codePtr+1
.39f2	91 37		sta ($37),y			sta 	(rsPointer),y
.39f4	c8		iny				iny
.39f5	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.39f7	91 37		sta ($37),y			sta 	(rsPointer),y
.39f9	a8		tay				tay 								; fix Y back again to original value
.39fa	60		rts				rts
.39fb					RSLoadPosition:
.39fb	a8		tay				tay
.39fc	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.39fe	85 28		sta $28				sta 	codePtr
.3a00	c8		iny				iny
.3a01	b1 37		lda ($37),y			lda 	(rsPointer),y
.3a03	85 29		sta $29				sta 	codePtr+1
.3a05	c8		iny				iny
.3a06	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3a08	a8		tay				tay 								; to Y
.3a09	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3a0a					WarmStart:
.3a0a	a2 04		ldx #$04		ldx	#4
.3a0c	20 73 23	jsr $2373		jsr	interactionHandler

;******  Return to file: main/main.asm

.3a0f					mainHandler:
.3a0f	7c 12 3a	jmp ($3a12,x)			jmp 	(mainVectors,x)
.3a12					mainVectors:
>3a12	2e 3a					.word _DummyControlHandler ; index 0
>3a14	a1 39					.word CheckComma           ; index 2
>3a16	94 39					.word CheckRightParen      ; index 4
>3a18	7b 2b					.word XCommandClear        ; index 6
>3a1a	a4 32					.word LinkEvaluate         ; index 8
>3a1c	b0 32					.word LinkEvaluateInteger  ; index 10
>3a1e	bc 32					.word LinkEvaluateSmallInt ; index 12
>3a20	b6 32					.word LinkEvaluateString   ; index 14
>3a22	aa 32					.word LinkEvaluateTerm     ; index 16
>3a24	70 38					.word MLInt32ToString      ; index 18
>3a26	0a 2d					.word Command_XNew         ; index 20
>3a28	18 2d					.word XCommand_Run         ; index 22
>3a2a	24 2d					.word Command_RunFrom      ; index 24
>3a2c	88 37					.word LinkInt32FromString  ; index 26
.3a2e					_DummyControlHandler:
.3a2e	60		rts			rts

;******  Return to file: basic.asm

.3a2f					section_end_main:
.3a2f					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3a2f					StringChrs:
.3a2f	aa		tax				tax 								; set up stack
.3a30	a9 02		lda #$02			lda 	#2
.3a32	20 f2 3a	jsr $3af2			jsr 	AllocateSoftString
.3a35	98		tya				tya
.3a36	20 18 3b	jsr $3b18			jsr 	WriteSoftString
.3a39					StringUpdate:
.3a39	20 47 3a	jsr $3a47			jsr 	ReturnSoftString
.3a3c	8a		txa				txa
.3a3d	60		rts				rts
.3a3e					StringNull:
.3a3e	aa		tax				tax
.3a3f	a9 01		lda #$01			lda 	#1
.3a41	20 f2 3a	jsr $3af2			jsr 	AllocateSoftString
.3a44	4c 39 3a	jmp $3a39			jmp 	StringUpdate
.3a47					ReturnSoftString:
.3a47	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3a49	95 98		sta $98,x			sta 	esInt0,x
.3a4b	a5 3a		lda $3a				lda 	softMemAlloc+1
.3a4d	95 a0		sta $a0,x			sta 	esInt1,x
.3a4f	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3a51	95 a8		sta $a8,x			sta 	esInt2,x
.3a53	95 b0		sta $b0,x			sta 	esInt3,x
.3a55	a9 40		lda #$40			lda 	#$40 						; type string.
.3a57	95 90		sta $90,x			sta 	esType,x
.3a59	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3a5a					STRCompare:
.3a5a	48		pha				pha 								; save A
.3a5b	aa		tax				tax 								; put stack pos in X
.3a5c	98		tya				tya
.3a5d	48		pha				pha
.3a5e	20 92 3a	jsr $3a92			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3a61	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3a63	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a65	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3a67	90 02		bcc $3a6b			bcc 	_SCNotSmaller
.3a69	b1 2c		lda ($2c),y			lda 	(temp1),y
.3a6b					_SCNotSmaller:
.3a6b	aa		tax				tax 								; put that in X. We compare this many chars first.
.3a6c					_SCCompareLoop:
.3a6c	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3a6e	f0 0c		beq $3a7c			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3a70	ca		dex				dex 								; decrement chars to compare.
.3a71	c8		iny				iny 								; move to next character
.3a72	38		sec				sec 								; calculate s1[y]-s2[y]
.3a73	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a75	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3a77	d0 0a		bne $3a83			bne 	_SCReturnResult 			; if different return sign of A
.3a79	4c 6c 3a	jmp $3a6c			jmp 	_SCCompareLoop
.3a7c					_SCSameToEndShortest
.3a7c	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3a7e	38		sec				sec
.3a7f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a81	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3a83					_SCReturnResult:
.3a83	08		php				php 								; set return to zero preserving PSW.
.3a84	a2 00		ldx #$00			ldx 	#0
.3a86	28		plp				plp
.3a87	f0 05		beq $3a8e			beq 	_SCExit 					; two values equal, then exit
.3a89	ca		dex				dex 								; X = $FF
.3a8a	90 02		bcc $3a8e			bcc 	_SCExit 					; if 1st < 2nd then -1
.3a8c	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3a8e					_SCExit:
.3a8e	68		pla				pla
.3a8f	a8		tay				tay
.3a90	68		pla				pla
.3a91	60		rts				rts
.3a92					CopyStringPair:
.3a92	b5 99		lda $99,x			lda 	esInt0+1,x
.3a94	85 2c		sta $2c				sta 	temp1
.3a96	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3a98	85 2d		sta $2d				sta 	temp1+1
.3a9a					CopyStringTop:
.3a9a	b5 98		lda $98,x			lda 	esInt0,x
.3a9c	85 2a		sta $2a				sta 	temp0
.3a9e	b5 a0		lda $a0,x			lda 	esInt1,x
.3aa0	85 2b		sta $2b				sta 	temp0+1
.3aa2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3aa3					StringConcat:
.3aa3	aa		tax				tax									; stack pos in X
.3aa4	98		tya				tya
.3aa5	48		pha				pha
.3aa6	20 92 3a	jsr $3a92			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3aa9	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3aaa	a0 00		ldy #$00			ldy 	#0
.3aac	b1 2a		lda ($2a),y			lda 	(temp0),y
.3aae	71 2c		adc ($2c),y			adc 	(temp1),y
.3ab0	b0 1c		bcs $3ace			bcs 	_SCError 					; just too many characters here.
.3ab2	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3ab4	b0 18		bcs $3ace			bcs 	_SCError
.3ab6	20 f2 3a	jsr $3af2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3ab9	20 e9 3a	jsr $3ae9			jsr 	CopySoftToStack 			; copy that to the stack.
.3abc	20 d3 3a	jsr $3ad3			jsr 	SCCopyTemp0 				; copy temp0
.3abf	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3ac1	85 2a		sta $2a				sta 	temp0
.3ac3	a5 2d		lda $2d				lda 	temp1+1
.3ac5	85 2b		sta $2b				sta 	temp0+1
.3ac7	20 d3 3a	jsr $3ad3			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3aca	68		pla				pla
.3acb	a8		tay				tay
.3acc	8a		txa				txa 								; and A
.3acd	60		rts				rts
.3ace					_SCError:
.3ace	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3ad0	20 18 15	jsr $1518		jsr	errorHandler
.3ad3					SCCopyTemp0:
.3ad3	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3ad5	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ad7	85 2e		sta $2e				sta 	temp2
.3ad9					_SCCopyLoop:
.3ad9	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3adb	f0 0b		beq $3ae8			beq 	_SCCopyExit
.3add	c6 2e		dec $2e				dec 	temp2
.3adf	c8		iny				iny 								; get next char
.3ae0	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ae2	20 18 3b	jsr $3b18			jsr 	WriteSoftString 			; write to soft string.
.3ae5	4c d9 3a	jmp $3ad9			jmp 	_SCCopyLoop
.3ae8					_SCCopyExit:
.3ae8	60		rts				rts
.3ae9					CopySoftToStack:
.3ae9	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3aeb	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3aed	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3aef	95 a0		sta $a0,x			sta 	esInt1,x
.3af1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3af2					AllocateSoftString:
.3af2	85 32		sta $32				sta 	tempShort 					; save count
.3af4	98		tya				tya
.3af5	48		pha				pha
.3af6	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3af8	d0 09		bne $3b03			bne 	_ASSDone
.3afa	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3afc	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3afe	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3b00	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3b01	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3b03					_ASSDone:
.3b03	38		sec				sec 								; allocate downwards enough memory
.3b04	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3b06	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3b08	85 39		sta $39				sta 	softMemAlloc
.3b0a	a5 3a		lda $3a				lda 	softMemAlloc+1
.3b0c	e9 00		sbc #$00			sbc 	#0
.3b0e	85 3a		sta $3a				sta 	softMemAlloc+1
.3b10	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3b12	a8		tay				tay
.3b13	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3b15	68		pla				pla
.3b16	a8		tay				tay
.3b17	60		rts				rts
.3b18					WriteSoftString:
.3b18	84 32		sty $32				sty 	tempShort 					; save Y
.3b1a	48		pha				pha 								; save character on stack
.3b1b	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3b1d	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3b1f	18		clc				clc
.3b20	69 01		adc #$01			adc 	#1
.3b22	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3b24	a8		tay				tay 								; offset in Y
.3b25	68		pla				pla 								; get char and write.
.3b26	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3b28	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3b2a	60		rts				rts
.3b2b					StrClone:
.3b2b	aa		tax				tax 								; set up stack.
.3b2c	98		tya				tya
.3b2d	48		pha				pha
.3b2e	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3b30	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3b32	18		clc				clc
.3b33	69 01		adc #$01			adc 	#1
.3b35	20 f2 3a	jsr $3af2			jsr 	AllocateSoftString 			; allocate soft memory
.3b38	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3b3a	95 98		sta $98,x			sta 	esInt0,x
.3b3c	a5 3a		lda $3a				lda 	softMemAlloc+1
.3b3e	95 a0		sta $a0,x			sta 	esInt1,x
.3b40	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3b42	95 a8		sta $a8,x			sta 	esInt2,x
.3b44	95 b0		sta $b0,x			sta 	esInt3,x
.3b46	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3b48	95 90		sta $90,x			sta 	esType,x
.3b4a	20 d3 3a	jsr $3ad3			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3b4d	68		pla				pla
.3b4e	a8		tay				tay
.3b4f	8a		txa				txa
.3b50	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3b51					CaseString:
.3b51	48		pha				pha 								; save A and copy to X
.3b52	aa		tax				tax
.3b53	98		tya				tya
.3b54	48		pha				pha
.3b55	20 9a 3a	jsr $3a9a			jsr 	CopyStringTop 				; target string -> temp0
.3b58	a0 00		ldy #$00			ldy 	#0
.3b5a	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3b5c	18		clc				clc
.3b5d	69 01		adc #$01			adc 	#1 							; one more for length byte
.3b5f	20 f2 3a	jsr $3af2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3b62	20 e9 3a	jsr $3ae9			jsr 	CopySoftToStack 			; copy that to the stack.
.3b65	a0 00		ldy #$00			ldy 	#0
.3b67	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3b69	aa		tax				tax
.3b6a					_CSCopy:
.3b6a	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3b6c	f0 24		beq $3b92			beq 	_CSExit
.3b6e	ca		dex				dex
.3b6f	c8		iny				iny
.3b70	68		pla				pla 								; check direction
.3b71	48		pha				pha
.3b72	f0 0c		beq $3b80			beq 	_CSUpper
.3b74	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3b76	c9 41		cmp #$41			cmp 	#"A"
.3b78	90 12		bcc $3b8c			bcc 	_CSWrite
.3b7a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b7c	b0 0e		bcs $3b8c			bcs 	_CSWrite
.3b7e	90 0a		bcc $3b8a			bcc 	_CSFlipWrite
.3b80					_CSUpper:
.3b80	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3b82	c9 61		cmp #$61			cmp 	#"a"
.3b84	90 06		bcc $3b8c			bcc 	_CSWrite
.3b86	c9 7b		cmp #$7b			cmp 	#"z"+1
.3b88	b0 02		bcs $3b8c			bcs 	_CSWrite
.3b8a					_CSFlipWrite:
.3b8a	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3b8c					_CSWrite:
.3b8c	20 18 3b	jsr $3b18			jsr 	WriteSoftString 			; add to soft string.
.3b8f	4c 6a 3b	jmp $3b6a			jmp 	_CSCopy
.3b92					_CSExit:
.3b92	68		pla				pla
.3b93	a8		tay				tay
.3b94	68		pla				pla
.3b95	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3b96					StringSubstring:
.3b96	48		pha				pha
.3b97	aa		tax				tax 								; access stack.
.3b98	98		tya				tya
.3b99	48		pha				pha
.3b9a	20 9a 3a	jsr $3a9a			jsr 	CopyStringTop 				; point temp0 to the string.
.3b9d	a0 00		ldy #$00			ldy 	#0 							; get length.
.3b9f	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3ba1	85 2c		sta $2c				sta 	temp1
.3ba3	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3ba5	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3ba7	f0 02		beq $3bab			beq 	_SSBOkay
.3ba9	b0 2a		bcs $3bd5			bcs 	_SSBReturnNull
.3bab					_SSBOkay:
.3bab	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3bad	18		clc				clc
.3bae	69 01		adc #$01			adc 	#1
.3bb0	38		sec				sec
.3bb1	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3bb3	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3bb5	90 02		bcc $3bb9			bcc		_SSBTrunc
.3bb7	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3bb9					_SSBTrunc:
.3bb9	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3bbb	18		clc				clc
.3bbc	69 01		adc #$01			adc 	#1 							; add 1
.3bbe	20 f2 3a	jsr $3af2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3bc1	20 e9 3a	jsr $3ae9			jsr 	CopySoftToStack 			; copy that to the stack.
.3bc4	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3bc6					_SSBCopyLoop:
.3bc6	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3bc8	f0 0e		beq $3bd8			beq 	_SSBExit
.3bca	c6 2d		dec $2d				dec 	temp1+1
.3bcc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3bce	20 18 3b	jsr $3b18			jsr 	WriteSoftString
.3bd1	c8		iny				iny
.3bd2	4c c6 3b	jmp $3bc6			jmp 	_SSBCopyLoop
.3bd5					_SSBReturnNull:
.3bd5	20 dc 3b	jsr $3bdc			jsr 	ReturnNull
.3bd8					_SSBExit:
.3bd8	68		pla				pla
.3bd9	a8		tay				tay
.3bda	68		pla				pla
.3bdb	60		rts				rts
.3bdc					ReturnNull:
.3bdc	a9 00		lda #$00			lda 	#0 							; clear null string
.3bde	8d ce 0a	sta $0ace			sta 	NullString
.3be1	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3be3	95 98		sta $98,x			sta 	esInt0,x
.3be5	a9 0a		lda #$0a			lda 	#NullString >> 8
.3be7	95 a0		sta $a0,x			sta 	esInt1,x
.3be9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d03					srcStrLen:
>0d03							.fill 	1
.3bea					StringWrite:
.3bea	aa		tax				tax
.3beb	48		pha				pha
.3bec	98		tya				tya
.3bed	48		pha				pha
.3bee	20 15 3c	jsr $3c15			jsr 	CheckOverwriteCurrent
.3bf1	b0 0d		bcs $3c00			bcs		_SWCopyCurrent
.3bf3	20 53 3c	jsr $3c53			jsr 	RequiresConcretion
.3bf6	90 0e		bcc $3c06			bcc 	_SWWriteReference
.3bf8	20 b6 3c	jsr $3cb6			jsr 	CheckSpecialConcretion
.3bfb	b0 09		bcs $3c06			bcs 	_SWWriteReference
.3bfd	20 67 3c	jsr $3c67			jsr 	AllocateHardMemory
.3c00					_SWCopyCurrent:
.3c00	20 9a 3c	jsr $3c9a			jsr 	CopyStringToHardMemory
.3c03	4c 11 3c	jmp $3c11			jmp 	_SWExit
.3c06					_SWWriteReference
.3c06	a0 00		ldy #$00			ldy 	#0
.3c08	a5 2a		lda $2a				lda 	temp0
.3c0a	91 2c		sta ($2c),y			sta 	(temp1),y
.3c0c	c8		iny				iny
.3c0d	a5 2b		lda $2b				lda 	temp0+1
.3c0f	91 2c		sta ($2c),y			sta 	(temp1),y
.3c11					_SWExit:
.3c11	68		pla				pla
.3c12	a8		tay				tay
.3c13	68		pla				pla
.3c14	60		rts				rts
.3c15					CheckOverwriteCurrent:
.3c15	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3c17	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3c19	85 2b		sta $2b				sta 	temp0+1
.3c1b	b5 99		lda $99,x			lda 	esInt0+1,x
.3c1d	85 2a		sta $2a				sta 	temp0
.3c1f	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3c21	8d 03 0d	sta $0d03			sta 	srcStrLen
.3c24	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3c26	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3c28	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3c2a	85 2d		sta $2d				sta 	temp1+1
.3c2c	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3c2e	b1 2c		lda ($2c),y			lda 	(temp1),y
.3c30	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3c32	90 1b		bcc $3c4f			bcc 	_COCFail 				; in hard memory.
.3c34	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3c36	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3c38	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3c3a	85 2e		sta $2e				sta 	temp2
.3c3c	c8		iny				iny
.3c3d	b1 2c		lda ($2c),y			lda 	(temp1),y
.3c3f	e9 00		sbc #$00			sbc 	#0
.3c41	85 2f		sta $2f				sta 	temp2+1
.3c43	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3c45	b1 2e		lda ($2e),y			lda 	(temp2),y
.3c47	38		sec				sec  							; maximum character capacity.
.3c48	e9 02		sbc #$02			sbc 	#2
.3c4a	cd 03 0d	cmp $0d03			cmp 	srcStrLen 				; if >= the required length
.3c4d	b0 02		bcs $3c51			bcs 	_COCCanReuse
.3c4f					_COCFail:
.3c4f	18		clc				clc
.3c50	60		rts				rts
.3c51					_COCCanReuse:
.3c51	38		sec				sec
.3c52	60		rts				rts
.3c53					RequiresConcretion:
.3c53	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3c55	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3c57	b0 0a		bcs $3c63			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3c59	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3c5b	f0 08		beq $3c65			beq 	_RCFail 				; if not, this cannot be soft memory.
.3c5d	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3c5f	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3c61	90 02		bcc $3c65			bcc 	_RCFail 				; so concreting
.3c63					_RCSucceed:
.3c63	38		sec				sec
.3c64	60		rts				rts
.3c65					_RCFail:
.3c65	18		clc				clc
.3c66	60		rts				rts
.3c67					AllocateHardMemory:
.3c67	98		tya				tya
.3c68	48		pha				pha
.3c69	ad 03 0d	lda $0d03			lda 	srcStrLen 				; characters in string
.3c6c	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3c6e	b0 04		bcs $3c74			bcs 	_AHMSetMax 				; max out that amount.
.3c70	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3c72	90 02		bcc $3c76			bcc 	_AHMIsOkay
.3c74					_AHMSetMax:
.3c74	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3c76					_AHMIsOkay:
.3c76	48		pha				pha	 							; save size to be allocated
.3c77	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3c79	38		sec				sec  							; and copy result to TOS as target address.
.3c7a	65 33		adc $33				adc 	highMemory
.3c7c	85 33		sta $33				sta 	highMemory
.3c7e	a5 34		lda $34				lda 	highMemory+1
.3c80	69 ff		adc #$ff			adc 	#$FF
.3c82	85 34		sta $34				sta 	highMemory+1
.3c84	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3c86	68		pla				pla 							; get the total size of the storage block
.3c87	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3c89	18		clc				clc
.3c8a	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3c8c	69 01		adc #$01			adc 	#1
.3c8e	91 2c		sta ($2c),y			sta 	(temp1),y
.3c90	a5 34		lda $34				lda 	highMemory+1
.3c92	69 00		adc #$00			adc 	#0
.3c94	c8		iny				iny
.3c95	91 2c		sta ($2c),y			sta 	(temp1),y
.3c97	68		pla				pla
.3c98	a8		tay				tay
.3c99	60		rts				rts
.3c9a					CopyStringToHardMemory:
.3c9a	98		tya				tya
.3c9b	48		pha				pha
.3c9c	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3c9e	b1 2c		lda ($2c),y			lda 	(temp1),y
.3ca0	85 2e		sta $2e				sta 	temp2
.3ca2	c8		iny				iny
.3ca3	b1 2c		lda ($2c),y			lda 	(temp1),y
.3ca5	85 2f		sta $2f				sta 	temp2+1
.3ca7	ac 03 0d	ldy $0d03			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3caa					_CSTHMLoop:
.3caa	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cac	91 2e		sta ($2e),y			sta 	(temp2),y
.3cae	88		dey				dey
.3caf	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3cb1	d0 f7		bne $3caa			bne 	_CSTHMLoop
.3cb3	68		pla				pla
.3cb4	a8		tay				tay
.3cb5	60		rts				rts
.3cb6					CheckSpecialConcretion:
.3cb6	ad 03 0d	lda $0d03			lda 	srcStrLen 				; check string is null e.g. length = 0
.3cb9	f0 02		beq $3cbd			beq 	_CSCNullString
.3cbb	18		clc				clc
.3cbc	60		rts				rts
.3cbd					_CSCNullString:
.3cbd	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3cbf	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3cc2	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3cc4	85 2a		sta $2a				sta 	temp0
.3cc6	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3cc8	85 2b		sta $2b				sta 	1+(temp0)
.3cca	38		sec				sec
.3ccb	60		rts				rts

;******  Return to file: string/string.asm

.3ccc					stringHandler:
.3ccc	7c cf 3c	jmp ($3ccf,x)			jmp 	(stringVectors,x)
.3ccf					stringVectors:
>3ccf	e1 3c					.word _DummyControlHandler ; index 0
>3cd1	2f 3a					.word StringChrs           ; index 2
>3cd3	2b 3b					.word StrClone             ; index 4
>3cd5	a3 3a					.word StringConcat         ; index 6
>3cd7	3e 3a					.word StringNull           ; index 8
>3cd9	5a 3a					.word STRCompare           ; index 10
>3cdb	51 3b					.word CaseString           ; index 12
>3cdd	96 3b					.word StringSubstring      ; index 14
>3cdf	ea 3b					.word StringWrite          ; index 16
.3ce1					_DummyControlHandler:
.3ce1	60		rts			rts

;******  Return to file: basic.asm

.3ce2					section_end_string:
.3ce2					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d04					deTokeniseVector:
>0d04							.fill 	2
.0d06					lastCharacterClass:
>0d06							.fill 	1
.0d07					indent:
>0d07							.fill 	1
.3ce2					ListLine:
.3ce2	48		pha				pha								; enter here to list to console. sets the output vector
.3ce3	a9 1a		lda #$1a			lda 	#(deTokenPrint) & $FF
.3ce5	8d 04 0d	sta $0d04			sta 	deTokeniseVector
.3ce8	a9 3e		lda #$3e			lda 	#(deTokenPrint) >> 8
.3cea	8d 05 0d	sta $0d05			sta 	1+(deTokeniseVector)
.3ced	68		pla				pla
.3cee					Detokenise:
.3cee	18		clc				clc 							; space required for line number.
.3cef	69 06		adc #$06			adc 	#6
.3cf1	8d 07 0d	sta $0d07			sta 	indent
.3cf4	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3cf6	8d 06 0d	sta $0d06			sta 	lastCharacterClass
.3cf9	a2 02		ldx #$02			ldx 	#2
.3cfb	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3cfd	95 a8		sta $a8,x			sta 	esInt2,x
.3cff	95 b0		sta $b0,x			sta 	esInt3,x
.3d01	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3d03	b1 28		lda ($28),y			lda 	(codePtr),y
.3d05	95 98		sta $98,x			sta 	esInt0,x
.3d07	c8		iny				iny
.3d08	b1 28		lda ($28),y			lda 	(codePtr),y
.3d0a	95 a0		sta $a0,x			sta 	esInt1,x
.3d0c	a9 84		lda #$84			lda 	#LTYLineNumber
.3d0e	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3d11	a9 0a		lda #$0a			lda 	#10 					; base 10
.3d13	20 b9 3d	jsr $3db9			jsr 	DTPrintInteger 			; print as integer.
.3d16	a0 00		ldy #$00			ldy 	#0 						; get length
.3d18	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3d1a	aa		tax				tax
.3d1b					_DTPadOut:
.3d1b	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3d1d	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3d20	e8		inx				inx
.3d21	ec 07 0d	cpx $0d07			cpx 	indent
.3d24	d0 f5		bne $3d1b			bne 	_DTPadOut
.3d26	a0 03		ldy #$03			ldy 	#3 						; start position.
.3d28					_DTListLoop:
.3d28	b1 28		lda ($28),y			lda 	(codePtr),y
.3d2a	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3d2c	f0 5e		beq $3d8c			beq 	_DTIsString
.3d2e	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3d30	f0 56		beq $3d88			beq 	_DTIsFloat
.3d32	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3d34	f0 16		beq $3d4c			beq 	_DTHexConstant
.3d36	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3d38	d0 06		bne $3d40			bne 	_DTNotEnd
.3d3a	a9 ff		lda #$ff			lda 	#255 					; print CR
.3d3c	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3d3f	60		rts				rts
.3d40					_DTNotEnd:
.3d40	c9 00		cmp #$00			cmp 	#0
.3d42	30 38		bmi $3d7c			bmi 	_DTIsToken
.3d44	c9 40		cmp #$40			cmp 	#$40
.3d46	90 3a		bcc $3d82			bcc 	_DTIsIdentifier
.3d48	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3d4a	d0 0d		bne $3d59			bne 	_DTConstant
.3d4c					_DTHexConstant:
.3d4c	a9 26		lda #$26			lda 	#"&"
.3d4e	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3d51	c8		iny				iny
.3d52	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3d54	20 36 3e	jsr $3e36			jsr 	DTSwitchMode
.3d57	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3d59					_DTConstant:
.3d59	48		pha				pha
.3d5a	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3d5c	20 36 3e	jsr $3e36			jsr 	DTSwitchMode
.3d5f	a9 86		lda #$86			lda 	#LTYConstant
.3d61	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3d64	a2 02		ldx #$02			ldx 	#2 						; get its value
.3d66	8a		txa				txa
.3d67	a2 10		ldx #$10		ldx	#16
.3d69	20 0f 3a	jsr $3a0f		jsr	mainHandler
.3d6c	aa		tax				tax
.3d6d	68		pla				pla 							; get base back
.3d6e	85 32		sta $32				sta 	tempShort
.3d70	98		tya				tya
.3d71	48		pha				pha
.3d72	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3d74	20 b9 3d	jsr $3db9			jsr 	DTPrintInteger
.3d77	68		pla				pla
.3d78	a8		tay				tay
.3d79	4c 28 3d	jmp $3d28			jmp 	_DTListLoop
.3d7c					_DTIsToken:
.3d7c	20 8f 3e	jsr $3e8f			jsr 	DTDecodeToken
.3d7f	4c 28 3d	jmp $3d28			jmp 	_DTListLoop
.3d82					_DTIsIdentifier:
.3d82	20 48 3e	jsr $3e48			jsr 	DTIdentifier
.3d85	4c 28 3d	jmp $3d28			jmp 	_DTListLoop
.3d88					_DTIsFloat:
>3d88	db						.byte 	$DB
.3d89	4c 88 3d	jmp $3d88			jmp 	_DTIsFloat
.3d8c					_DTIsString:
.3d8c	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3d8e	20 36 3e	jsr $3e36			jsr 	DTSwitchMode
.3d91	a9 81		lda #$81			lda 	#LTYString
.3d93	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3d96	a9 22		lda #$22			lda 	#'"'						; open quote
.3d98	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3d9b	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3d9d	8a		txa				txa
.3d9e	a2 10		ldx #$10		ldx	#16
.3da0	20 0f 3a	jsr $3a0f		jsr	mainHandler
.3da3	aa		tax				tax
.3da4	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.3da6	85 2a		sta $2a				sta 	temp0
.3da8	b5 a0		lda $a0,x			lda 	esInt1,x
.3daa	85 2b		sta $2b				sta 	temp0+1
.3dac	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3dae	20 cb 3d	jsr $3dcb			jsr 	DTPrintLengthPrefix
.3db1	a9 22		lda #$22			lda 	#'"'
.3db3	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3db6	4c 28 3d	jmp $3d28			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d08					tPrintCount:
>0d08							.fill 	1
.3db9					DTPrintInteger:
.3db9	48		pha				pha									; save base
.3dba	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3dbc	85 2a		sta $2a				sta 	temp0
.3dbe	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3dc0	85 2b		sta $2b				sta 	1+(temp0)
.3dc2	68		pla				pla
.3dc3	a8		tay				tay
.3dc4	8a		txa				txa
.3dc5	a2 12		ldx #$12		ldx	#18
.3dc7	20 0f 3a	jsr $3a0f		jsr	mainHandler
.3dca	aa		tax				tax 								; then drop through here.
.3dcb					DTPrintLengthPrefix:
.3dcb	aa		tax				tax 								; A = 0 = don't case convert.
.3dcc	98		tya				tya
.3dcd	48		pha				pha
.3dce	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3dd0	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dd2	8d 08 0d	sta $0d08			sta 	tPrintCount
.3dd5	f0 1b		beq $3df2			beq 	_DTPLPExit 					; empty string
.3dd7					_DTPLPLoop:
.3dd7	c8		iny				iny 								; get next.
.3dd8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dda	29 7f		and #$7f			and 	#$7F
.3ddc	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3dde	f0 0a		beq $3dea			beq 	_DTPLPNoCase
.3de0	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3de2	90 06		bcc $3dea			bcc 	_DTPLPNoCase
.3de4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3de6	b0 02		bcs $3dea			bcs 	_DTPLPNoCase
.3de8	49 20		eor #$20			eor 	#"A"^"a"
.3dea					_DTPLPNoCase
.3dea	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter 		; call handler
.3ded	ce 08 0d	dec $0d08			dec 	tPrintCount 				; do all the characters
.3df0	d0 e5		bne $3dd7			bne 	_DTPLPLoop
.3df2					_DTPLPExit:
.3df2	68		pla				pla
.3df3	a8		tay				tay
.3df4	60		rts				rts
.3df5					ListOutputCharacter:
.3df5	85 32		sta $32				sta 	tempShort
.3df7	48		pha				pha
.3df8	8a		txa				txa
.3df9	48		pha				pha
.3dfa	98		tya				tya
.3dfb	48		pha				pha
.3dfc	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3dfe	c9 20		cmp #$20			cmp 	#32
.3e00	b0 0c		bcs $3e0e			bcs		_LOCHiBit
.3e02	09 40		ora #$40			ora 	#64 						; conversion
.3e04	c9 40		cmp #$40			cmp 	#64							; make l/c
.3e06	f0 06		beq $3e0e			beq 	_LOCHiBit
.3e08	c9 5b		cmp #$5b			cmp 	#65+26
.3e0a	b0 02		bcs $3e0e			bcs 	_LOCHiBit
.3e0c	69 20		adc #$20			adc 	#32
.3e0e					_LOCHiBit:
.3e0e	20 17 3e	jsr $3e17			jsr 	_LOCCallVector				; call o/p handler routine
.3e11	68		pla				pla
.3e12	a8		tay				tay
.3e13	68		pla				pla
.3e14	aa		tax				tax
.3e15	68		pla				pla
.3e16					_LOCExit:
.3e16	60		rts				rts
.3e17					_LOCCallVector:
.3e17	6c 04 0d	jmp ($0d04)			jmp 	(deTokeniseVector)
.3e1a					deTokenPrint:
.3e1a	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3e1c	30 06		bmi $3e24			bmi 	_dtpInk
.3e1e	a2 16		ldx #$16		ldx	#22
.3e20	20 f6 14	jsr $14f6		jsr	deviceHandler
.3e23	60		rts				rts
.3e24	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3e26	f0 08		beq $3e30			beq 	_dtpCR						; except $FF => CRLF
.3e28	29 07		and #$07			and 	#7
.3e2a	a2 08		ldx #$08		ldx	#8
.3e2c	20 f6 14	jsr $14f6		jsr	deviceHandler
.3e2f	60		rts				rts
.3e30					_dtpCR:
.3e30	a2 06		ldx #$06		ldx	#6
.3e32	20 f6 14	jsr $14f6		jsr	deviceHandler
.3e35	60		rts				rts
.3e36					DTSwitchMode:
.3e36	cd 06 0d	cmp $0d06			cmp 	LastCharacterClass 			; if changed, update character class
.3e39	f0 04		beq $3e3f			beq 	_DTSMNoChange
.3e3b	8d 06 0d	sta $0d06			sta 	LastCharacterClass
.3e3e					_DTSMExit:
.3e3e	60		rts				rts
.3e3f					_DTSMNoChange:
.3e3f	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3e41	f0 fb		beq $3e3e			beq 	_DTSMExit 					; need a space.
.3e43	a9 20		lda #$20			lda 	#" "
.3e45	4c f5 3d	jmp $3df5			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3e48					DTIdentifier:
.3e48	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3e4a	20 36 3e	jsr $3e36			jsr 	DTSwitchMode
.3e4d	a9 87		lda #$87			lda 	#LTYIdentifier
.3e4f	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3e52					_DTILoop:
.3e52	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3e54	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3e56	d0 02		bne $3e5a			bne 	_DTINotUS
.3e58	a9 5f		lda #$5f			lda 	#"_"
.3e5a					_DTINotUS:
.3e5a	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3e5d	c8		iny				iny
.3e5e	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3e60	c9 3a		cmp #$3a			cmp 	#$3A
.3e62	90 ee		bcc $3e52			bcc 	_DTILoop
.3e64	c8		iny				iny
.3e65	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3e67	f0 25		beq $3e8e			beq 	_DTIExit 					; no postfix.
.3e69	48		pha				pha
.3e6a	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3e6c	8d 06 0d	sta $0d06			sta 	LastCharacterClass
.3e6f	a9 82		lda #$82			lda 	#LTYPunctuation
.3e71	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3e74	68		pla				pla
.3e75	c9 3b		cmp #$3b			cmp 	#$3B
.3e77	f0 10		beq $3e89			beq 	_DTIArray
.3e79	4a		lsr a				lsr 	a 							; array flag in C
.3e7a	08		php				php
.3e7b	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3e7d	f0 02		beq $3e81			beq 	_DTIDollar
.3e7f	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3e81					_DTIDollar:
.3e81	49 24		eor #$24			eor 	#"$"
.3e83	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3e86	28		plp				plp
.3e87	90 05		bcc $3e8e			bcc 	_DTIExit
.3e89					_DTIArray:
.3e89	a9 28		lda #$28			lda 	#"("
.3e8b	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3e8e					_DTIExit:
.3e8e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3e8f					DTDecodeToken:
.3e8f	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3e91	b1 28		lda ($28),y			lda 	(codePtr),y
.3e93	c9 84		cmp #$84			cmp 	#$84
.3e95	b0 05		bcs $3e9c			bcs 	_DTNotShift
.3e97	29 03		and #$03			and 	#3 							; get the shift 1..3
.3e99	0a		asl a				asl 	a 							; put 2 x in X
.3e9a	aa		tax				tax
.3e9b	c8		iny				iny
.3e9c					_DTNotShift:
.3e9c	bd 9e 41	lda $419e,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3e9f	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3ea1	bd 9f 41	lda $419f,x			lda 	TokenTableAddress+1,x
.3ea4	85 2b		sta $2b				sta 	temp0+1
.3ea6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3ea8	c8		iny				iny 								; consume it.
.3ea9	aa		tax				tax
.3eaa	98		tya				tya
.3eab	48		pha				pha
.3eac					_DTFindText:
.3eac	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3eae	f0 11		beq $3ec1			beq 	_DTFoundText
.3eb0	ca		dex				dex
.3eb1	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3eb3	38		sec				sec
.3eb4	b1 2a		lda ($2a),y			lda 	(temp0),y
.3eb6	65 2a		adc $2a				adc 	temp0
.3eb8	85 2a		sta $2a				sta 	temp0
.3eba	90 f0		bcc $3eac			bcc 	_DTFindText
.3ebc	e6 2b		inc $2b				inc 	temp0+1
.3ebe	4c ac 3e	jmp $3eac			jmp 	_DTFindText
.3ec1					_DTFoundText:
.3ec1	a0 01		ldy #$01			ldy 	#1 							; get first character
.3ec3	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ec5	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3ec7	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3ec9	90 11		bcc $3edc			bcc 	_DTIsPunctuation
.3ecb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3ecd	b0 0d		bcs $3edc			bcs 	_DTIsPunctuation
.3ecf	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3ed1	20 36 3e	jsr $3e36			jsr 	DTSwitchMode
.3ed4	a9 83		lda #$83			lda 	#LTYKeyword
.3ed6	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3ed9	4c e6 3e	jmp $3ee6			jmp 	_DTPrint
.3edc					_DTIsPunctuation:
.3edc	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3ede	20 36 3e	jsr $3e36			jsr 	DTSwitchMode
.3ee1	a9 82		lda #$82			lda 	#LTYPunctuation
.3ee3	20 f5 3d	jsr $3df5			jsr 	ListOutputCharacter
.3ee6					_DTPrint:
.3ee6	a9 01		lda #$01			lda 	#1 							; fix case.
.3ee8	20 cb 3d	jsr $3dcb			jsr 	DTPrintLengthPrefix 		; print it out.
.3eeb	a0 00		ldy #$00			ldy 	#0
.3eed	b1 2a		lda ($2a),y			lda 	(temp0),y
.3eef	a8		tay				tay
.3ef0	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ef2	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3ef4	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3ef6	90 04		bcc $3efc			bcc 	_DTIsNowPunctuation
.3ef8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3efa	90 05		bcc $3f01			bcc 	_DTPExit
.3efc					_DTIsNowPunctuation:
.3efc	a9 01		lda #$01			lda 	#1
.3efe	8d 06 0d	sta $0d06			sta		LastCharacterClass
.3f01					_DTPExit:
.3f01	68		pla				pla
.3f02	a8		tay				tay
.3f03	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d09					currentSet:
>0d09							.fill 	1
.3f04					TokenSearch:
.3f04	8a		txa				txa
.3f05	48		pha				pha
.3f06	98		tya				tya
.3f07	48		pha				pha
.3f08	a9 00		lda #$00			lda 	#0
.3f0a	8d 09 0d	sta $0d09			sta 	currentSet
.3f0d					_TSLoop:
.3f0d	ad 09 0d	lda $0d09			lda 	currentSet 					; 2 x currentset in X
.3f10	0a		asl a				asl 	a
.3f11	aa		tax				tax
.3f12	bd 9e 41	lda $419e,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3f15	85 2a		sta $2a				sta 	temp0
.3f17	bd 9f 41	lda $419f,x			lda 	TokenTableAddress+1,x
.3f1a	85 2b		sta $2b				sta 	temp0+1
.3f1c	20 43 3f	jsr $3f43			jsr 	TokenSearchOne 				; search one table
.3f1f	b0 0d		bcs $3f2e			bcs 	_TSFound 					; found a token.
.3f21	ee 09 0d	inc $0d09			inc 	currentSet 					; next set
.3f24	ad 09 0d	lda $0d09			lda 	currentSet
.3f27	c9 04		cmp #$04			cmp 	#4
.3f29	d0 e2		bne $3f0d			bne 	_TSLoop 					; back if not done all four.
.3f2b	18		clc				clc 								; clear carry and exit
.3f2c	90 10		bcc $3f3e			bcc 	_TSExit
.3f2e					_TSFound:
.3f2e	48		pha				pha 								; save token
.3f2f	ad 09 0d	lda $0d09			lda 	currentSet					; if set zero no shift
.3f32	f0 05		beq $3f39			beq 	_TSNoShift
.3f34	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3f36	20 f4 3f	jsr $3ff4			jsr 	TokenWrite
.3f39					_TSNoShift:
.3f39	68		pla				pla 								; get token back
.3f3a	20 f4 3f	jsr $3ff4			jsr 	TokenWrite 					; write it
.3f3d	38		sec				sec 								; carry set indicating success
.3f3e					_TSExit:
.3f3e	68		pla				pla
.3f3f	a8		tay				tay
.3f40	68		pla				pla
.3f41	aa		tax				tax
.3f42	60		rts				rts
.3f43					TokenSearchOne:
.3f43	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3f45					_TSOLoop:
.3f45	a0 00		ldy #$00			ldy 	#0
.3f47	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3f49	f0 26		beq $3f71			beq 	_TSOFail 					; if zero, end of table
.3f4b	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3f4e	f0 11		beq $3f61			beq 	_TSOCheckText
.3f50					_TSONext:
.3f50	e8		inx				inx 								; bump token
.3f51	a0 00		ldy #$00			ldy 	#0							; get length
.3f53	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f55	38		sec				sec
.3f56	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3f58	85 2a		sta $2a				sta 	temp0
.3f5a	90 e9		bcc $3f45			bcc 	_TSOLoop
.3f5c	e6 2b		inc $2b				inc 	temp0+1
.3f5e	4c 45 3f	jmp $3f45			jmp 	_TSOLoop
.3f61					_TSOCheckText:
.3f61	a8		tay				tay 								; compare length downto 1.
.3f62					_TSOCheckLoop:
.3f62	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3f64	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3f67	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3f69	d0 e5		bne $3f50			bne 	_TSONext 					; different goto next.
.3f6b	88		dey				dey 								; do all
.3f6c	d0 f4		bne $3f62			bne 	_TSOCheckLoop
.3f6e	8a		txa				txa 								; return token in A and carry set
.3f6f	38		sec				sec
.3f70	60		rts				rts
.3f71					_TSOFail:
.3f71	18		clc				clc
.3f72	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3f73					TokTest:
.3f73	a2 ff		ldx #$ff				ldx 	#$FF
.3f75	9a		txs					txs
.3f76	a9 93		lda #$93			lda 	#(TokenText1) & $FF
.3f78	85 28		sta $28				sta 	codePtr
.3f7a	a9 3f		lda #$3f			lda 	#(TokenText1) >> 8
.3f7c	85 29		sta $29				sta 	1+(codePtr)
.3f7e	20 93 3f	jsr $3f93				jsr 	Tokenise
.3f81	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3f83	bd 93 3f	lda $3f93,x	_TokCheck:	lda 	TokenBytes1,x
.3f86	dd 0d 0d	cmp $0d0d,x				cmp 	tokenBuffer,x
.3f89	d0 fe		bne $3f89	_TokFail:	bne 	_TokFail	 		; error.
.3f8b	e8		inx					inx
.3f8c	c9 80		cmp #$80				cmp 	#$80
.3f8e	d0 f3		bne $3f83				bne 	_TokCheck
.3f90	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3f93					TokenText1:
.3f93					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d0a					tokenHeader:
>0d0a							.fill 	3
.0d0d					tokenBuffer:
>0d0d							.fill 	256
.0e0d					tokenBufferIndex:
>0e0d							.fill 	1
.3f93					Tokenise:
.3f93	20 0d 40	jsr $400d			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3f96					TokeniseASCIIZ:
.3f96	20 1e 40	jsr $401e			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3f99	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3f9b	8d 0d 0e	sta $0e0d			sta 	tokenBufferIndex
.3f9e	a8		tay				tay 								; start pointer
.3f9f	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3fa1	8d 0d 0d	sta $0d0d			sta 	tokenBuffer
.3fa4					_TokLoop:
.3fa4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3fa6	f0 46		beq $3fee			beq 	_TokExit 					; if zero, then exit.
.3fa8	c8		iny				iny 								; skip over spaces.
.3fa9	c9 20		cmp #$20			cmp 	#" "
.3fab	f0 f7		beq $3fa4			beq 	_TokLoop
.3fad	88		dey				dey 								; point back to character.
.3fae	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3fb0	f0 18		beq $3fca			beq 	_TokHexConst
.3fb2	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3fb4	f0 23		beq $3fd9			beq 	_TokQString
.3fb6	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3fb8	b0 26		bcs $3fe0			bcs 	_TokPunctuation
.3fba	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3fbc	b0 29		bcs $3fe7			bcs 	_TokIdentifier
.3fbe	c9 3a		cmp #$3a			cmp 	#"9"+1
.3fc0	b0 1e		bcs $3fe0			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3fc2	c9 30		cmp #$30			cmp 	#"0"
.3fc4	90 1a		bcc $3fe0			bcc 	_TokPunctuation 			; < 0, punctuation.
.3fc6	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3fc8	d0 08		bne $3fd2			bne 	_TokConst
.3fca					_TokHexConst:
.3fca	c8		iny				iny									; consume token.
.3fcb	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3fcd	20 f4 3f	jsr $3ff4			jsr 	TokenWrite
.3fd0	a9 10		lda #$10			lda 	#16
.3fd2					_TokConst:
.3fd2	20 dc 40	jsr $40dc			jsr 	TokeniseInteger
.3fd5	b0 cd		bcs $3fa4			bcs 	_TokLoop
.3fd7	90 18		bcc $3ff1			bcc 	_TokFail
.3fd9					_TokQString:
.3fd9	20 72 41	jsr $4172			jsr 	TokeniseString
.3fdc	b0 c6		bcs $3fa4			bcs 	_TokLoop
.3fde	90 11		bcc $3ff1			bcc 	_TokFail
.3fe0					_TokPunctuation:
.3fe0	20 51 41	jsr $4151			jsr 	TokenisePunctuation
.3fe3	b0 bf		bcs $3fa4			bcs 	_TokLoop
.3fe5	90 0a		bcc $3ff1			bcc 	_TokFail
.3fe7					_TokIdentifier:
.3fe7	20 4d 40	jsr $404d			jsr 	TokeniseIdentifier
.3fea	b0 b8		bcs $3fa4			bcs 	_TokLoop
.3fec	90 03		bcc $3ff1			bcc 	_TokFail
.3fee					_TokExit:
.3fee	a9 01		lda #$01			lda 	#1
.3ff0	60		rts				rts
.3ff1					_TokFail:
.3ff1	a9 00		lda #$00			lda 	#0
.3ff3	60		rts				rts
.3ff4					TokenWrite:
.3ff4	85 32		sta $32				sta 	tempShort 					; save XA
.3ff6	48		pha				pha
.3ff7	8a		txa				txa
.3ff8	48		pha				pha
.3ff9	a5 32		lda $32				lda 	tempShort
.3ffb	ae 0d 0e	ldx $0e0d			ldx 	tokenBufferIndex 			; geet index
.3ffe	9d 0d 0d	sta $0d0d,x			sta 	tokenBuffer,x 				; write byte to buffer
.4001	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.4003	9d 0e 0d	sta $0d0e,x			sta 	tokenBuffer+1,x
.4006	ee 0d 0e	inc $0e0d			inc 	tokenBufferIndex 			; bump index
.4009	68		pla				pla
.400a	aa		tax				tax
.400b	68		pla				pla
.400c	60		rts				rts
.400d					TokeniseMakeASCIIZ:
.400d	a0 00		ldy #$00			ldy 	#0							; get length of string.
.400f	b1 28		lda ($28),y			lda 	(codePtr),y
.4011	a8		tay				tay
.4012	c8		iny				iny 								; +1, the NULL goes here.
.4013	a9 00		lda #$00			lda 	#0
.4015	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4017	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4019	d0 02		bne $401d			bne 	_TMKAExit
.401b	e6 29		inc $29				inc 	codePtr+1
.401d					_TMKAExit:
.401d	60		rts				rts
.401e					TokeniseFixCase:
.401e	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4020	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.4022					_TFCFlipQ:
.4022	8a		txa				txa
.4023	49 01		eor #$01			eor 	#1
.4025	aa		tax				tax
.4026					_TFCLoop:
.4026	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4028	f0 22		beq $404c			beq 	_TFCExit 					; if zero exit.
.402a	c9 20		cmp #$20			cmp 	#32 						; if control
.402c	90 1a		bcc $4048			bcc 	_TFCControl
.402e	c8		iny				iny 								; preconsume
.402f	c9 22		cmp #$22			cmp 	#'"'
.4031	f0 ef		beq $4022			beq 	_TFCFlipQ
.4033	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.4035	90 ef		bcc $4026			bcc 	_TFCLoop
.4037	c9 7b		cmp #$7b			cmp 	#"z"+1
.4039	b0 eb		bcs $4026			bcs 	_TFCLoop
.403b	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.403d	d0 e7		bne $4026			bne 	_TFCLoop
.403f	88		dey				dey
.4040	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4042					_TFCWrite:
.4042	91 28		sta ($28),y			sta 	(codePtr),y
.4044	c8		iny				iny
.4045	4c 26 40	jmp $4026			jmp 	_TFCLoop
.4048					_TFCControl:
.4048	a9 20		lda #$20			lda 	#" "
.404a	d0 f6		bne $4042			bne 	_TFCWrite
.404c					_TFCExit:
.404c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.404d					TokeniseIdentifier:
.404d	a2 00		ldx #$00			ldx 	#0
.404f					_TICopyID:
.404f	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4051	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.4053	f0 16		beq $406b			beq 	_TICopyUnderscore
.4055	c9 2e		cmp #$2e			cmp 	#"."
.4057	f0 14		beq $406d			beq 	_TICopyIn
.4059	c9 30		cmp #$30			cmp 	#"0"
.405b	90 1b		bcc $4078			bcc 	_TIEndCopy
.405d	c9 3a		cmp #$3a			cmp 	#"9"+1
.405f	90 0c		bcc $406d			bcc 	_TICopyIn
.4061	c9 41		cmp #$41			cmp 	#"A"
.4063	90 13		bcc $4078			bcc 	_TIEndCopy
.4065	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4067	b0 0f		bcs $4078			bcs		_TIEndCopy
.4069	90 02		bcc $406d			bcc 	_TICopyIn
.406b					_TICopyUnderScore:
.406b	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.406d					_TICopyIn:
.406d	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.406e	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4071	8e cf 0a	stx $0acf			stx 	convertBuffer
.4074	c8		iny				iny 								; next character
.4075	4c 4f 40	jmp $404f			jmp 	_TICopyID 					; loop round
.4078					_TIEndCopy:
.4078	a9 24		lda #$24			lda 	#"$"
.407a	20 cf 40	jsr $40cf			jsr 	TIDCheckCopy
.407d	a9 23		lda #$23			lda 	#"#"
.407f	20 cf 40	jsr $40cf			jsr 	TIDCheckCopy
.4082	a9 28		lda #$28			lda 	#"("
.4084	20 cf 40	jsr $40cf			jsr 	TIDCheckCopy
.4087	20 04 3f	jsr $3f04			jsr 	TokenSearch 				; is it a token
.408a	b0 41		bcs $40cd			bcs 	_TIExit 					; if so, then exit.
.408c	98		tya				tya
.408d	48		pha				pha
.408e	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4090	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.4093	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4096	c9 28		cmp #$28			cmp 	#"("
.4098	d0 02		bne $409c			bne 	_TINotArray
.409a	ca		dex				dex 								; yes, remove it and convert to array.
.409b	c8		iny				iny
.409c					_TINotArray:
.409c	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.409f	c9 24		cmp #$24			cmp 	#"$"
.40a1	d0 03		bne $40a6			bne 	_TINotString
.40a3	ca		dex				dex
.40a4	c8		iny				iny
.40a5	c8		iny				iny
.40a6					_TINotString:
.40a6	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.40a9	c9 23		cmp #$23			cmp 	#"#"
.40ab	d0 05		bne $40b2			bne 	_TINotFloat
.40ad	ca		dex				dex
.40ae	c8		iny				iny
.40af	c8		iny				iny
.40b0	c8		iny				iny
.40b1	c8		iny				iny
.40b2					_TINotFloat:
.40b2	e8		inx				inx 								; write end marker for identifier.
.40b3	98		tya				tya
.40b4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.40b7	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.40ba	a2 01		ldx #$01			ldx 	#1
.40bc					_TIOutput:
.40bc	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.40bf	29 3f		and #$3f			and 	#$3F
.40c1	48		pha				pha
.40c2	20 f4 3f	jsr $3ff4			jsr 	TokenWrite
.40c5	e8		inx				inx
.40c6	68		pla				pla
.40c7	c9 3a		cmp #$3a			cmp 	#$3A
.40c9	90 f1		bcc $40bc			bcc 	_TIOutput
.40cb	68		pla				pla
.40cc	a8		tay				tay
.40cd					_TIExit:
.40cd	38		sec				sec 								; this can't fail.
.40ce	60		rts				rts
.40cf					TIDCheckCopy:
.40cf	d1 28		cmp ($28),y			cmp 	(codePtr),y
.40d1	d0 08		bne $40db			bne 	_TIDCCExit
.40d3	e8		inx				inx
.40d4	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.40d7	8e cf 0a	stx $0acf			stx 	convertBuffer
.40da	c8		iny				iny
.40db					_TIDCCExit:
.40db	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.40dc					TokeniseInteger:
.40dc	85 2c		sta $2c				sta 	temp1 						; save base
.40de	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.40e0	8e cf 0a	stx $0acf			stx 	convertBuffer
.40e3					_TIGetChars:
.40e3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.40e5	c9 30		cmp #$30			cmp 	#"0"
.40e7	90 1f		bcc $4108			bcc 	_TIEndGet
.40e9	c9 3a		cmp #$3a			cmp 	#"9"+1
.40eb	90 10		bcc $40fd			bcc 	_TIHaveChar
.40ed	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.40ef	c9 0a		cmp #$0a			cmp 	#10
.40f1	f0 15		beq $4108			beq 	_TIEndGet
.40f3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.40f5	c9 41		cmp #$41			cmp 	#"A"
.40f7	90 0f		bcc $4108			bcc 	_TIEndGet
.40f9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40fb	b0 0b		bcs $4108			bcs 	_TIEndGet
.40fd					_TIHaveChar:
.40fd	e8		inx				inx 								; write into buffer.
.40fe	8e cf 0a	stx $0acf			stx 	convertBuffer
.4101	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4104	c8		iny				iny 								; next char
.4105	4c e3 40	jmp $40e3			jmp 	_TIGetChars
.4108					_TIEndGet:
.4108	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.410a	f0 1c		beq $4128			beq 	_TIFail
.410c	98		tya				tya
.410d	48		pha				pha
.410e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4110	85 2a		sta $2a				sta 	temp0
.4112	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4114	85 2b		sta $2b				sta 	1+(temp0)
.4116	a9 00		lda #$00			lda 	#0 							; stack level 0
.4118	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.411a	a2 1a		ldx #$1a		ldx	#26
.411c	20 0f 3a	jsr $3a0f		jsr	mainHandler
.411f	68		pla				pla
.4120	a8		tay				tay
.4121	90 05		bcc $4128			bcc 	_TIFail 					; didn't convert.
.4123	20 2a 41	jsr $412a			jsr 	TIRecursiveOut 				; recursive output ?
.4126	38		sec				sec
.4127	60		rts				rts
.4128					_TIFail:
.4128	18		clc				clc
.4129	60		rts				rts
.412a					TIRecursiveOut:
.412a	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.412c	29 3f		and #$3f			and 	#$3F
.412e	09 40		ora #$40			ora 	#$40
.4130	48		pha				pha
.4131	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.4133	29 c0		and #$c0			and 	#$C0
.4135	05 a0		ora $a0				ora 	esInt1
.4137	05 a8		ora $a8				ora 	esInt2
.4139	05 b0		ora $b0				ora 	esInt3
.413b	f0 10		beq $414d			beq 	_TIRONoRecursion
.413d	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.413f					_TIROShift:
.413f	46 b0		lsr $b0				lsr 	esInt3
.4141	66 a8		ror $a8				ror 	esInt2
.4143	66 a0		ror $a0				ror 	esInt1
.4145	66 98		ror $98				ror 	esInt0
.4147	ca		dex				dex
.4148	d0 f5		bne $413f			bne 	_TIROShift
.414a	20 2a 41	jsr $412a			jsr 	TIRecursiveOut 				; call recursively
.414d					_TIRONoRecursion:
.414d	68		pla				pla 								; pull the old bit.
.414e	4c f4 3f	jmp $3ff4			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4151					TokenisePunctuation:
.4151	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4153	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4156	c8		iny				iny
.4157	b1 28		lda ($28),y			lda 	(codePtr),y
.4159	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.415c	c8		iny				iny 								; Y is +2
.415d	a9 02		lda #$02			lda 	#2 							; 2 character string.
.415f	8d cf 0a	sta $0acf			sta 	convertBuffer
.4162	20 04 3f	jsr $3f04			jsr 	TokenSearch 				; search for that token.
.4165	b0 0a		bcs $4171			bcs 	_TIFound
.4167	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.416a	88		dey				dey 								; Y is now +1
.416b	20 04 3f	jsr $3f04			jsr 	TokenSearch 				; search for that token.
.416e	b0 01		bcs $4171			bcs 	_TIFound
.4170	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4171					_TIFound:
.4171	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4172					TokeniseString:
.4172	c8		iny				iny 								; skip opening quote
.4173	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4175	84 2a		sty $2a				sty 	temp0 						; save start.
.4177					_TSGetLength:
.4177	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4179	f0 21		beq $419c			beq 	_TSFail						; end of line, fail
.417b	c8		iny				iny
.417c	e8		inx				inx
.417d	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.417f	d0 f6		bne $4177			bne 	_TSGetLength
.4181	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4183	20 f4 3f	jsr $3ff4			jsr 	TokenWrite
.4186	8a		txa				txa 								; output length
.4187	20 f4 3f	jsr $3ff4			jsr 	TokenWrite
.418a	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.418c	e0 00		cpx #$00			cpx 	#0 							; check ended
.418e	f0 09		beq $4199			beq 	_TSExit
.4190					_TSOutput:
.4190	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4192	20 f4 3f	jsr $3ff4			jsr 	TokenWrite
.4195	c8		iny				iny
.4196	ca		dex				dex
.4197	d0 f7		bne $4190			bne 	_TSOutput
.4199					_TSExit:
.4199	c8		iny				iny 								; skip ending quote
.419a	38		sec				sec 								; return CS.
.419b	60		rts				rts
.419c					_TSFail:
.419c	18		clc				clc
.419d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.419e					TokenTableAddress:
>419e	a6 41						.word 	Group0Text
>41a0	74 43						.word 	Group1Text
>41a2	c1 44						.word 	Group2Text
>41a4	01 45						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.41a6					Group0Text:
>41a6	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>41aa	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>41ad	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>41b1	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>41b4	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>41b7	01 be					.byte $01,$be                          ; $8b >
>41b9	01 bc					.byte $01,$bc                          ; $8c <
>41bb	01 bd					.byte $01,$bd                          ; $8d =
>41bd	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>41c0	01 ab					.byte $01,$ab                          ; $8f +
>41c2	01 ad					.byte $01,$ad                          ; $90 -
>41c4	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>41c7	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>41ca	01 aa					.byte $01,$aa                          ; $93 *
>41cc	01 af					.byte $01,$af                          ; $94 /
>41ce	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>41d2	01 de					.byte $01,$de                          ; $96 ^
>41d4	01 a1					.byte $01,$a1                          ; $97 !
>41d6	01 bf					.byte $01,$bf                          ; $98 ?
>41d8	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>41df	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>41e5	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>41e9	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>41ec	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>41f4	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>41fa	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>41ff	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>4204	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>4209	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>420f	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>4217	01 a8					.byte $01,$a8                          ; $a4 (
>4219	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>421e	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>4223	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4228	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>4230	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4235	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>423a	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4240	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4245	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>424a	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>424f	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4256	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>425d	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4262	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4269	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4270	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4276	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>427d	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4283	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>428b	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4291	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4296	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>429c	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>42a2	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>42a8	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>42ad	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>42b2	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>42b9	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>42c0	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>42c8	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>42d0	01 c0					.byte $01,$c0                          ; $c3 @
>42d2	01 fe					.byte $01,$fe                          ; $c4 ~
>42d4	01 a6					.byte $01,$a6                          ; $c5 &
>42d6	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>42dc	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>42e4	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>42e8	01 a9					.byte $01,$a9                          ; $c9 )
>42ea	01 ba					.byte $01,$ba                          ; $ca :
>42ec	01 ac					.byte $01,$ac                          ; $cb ,
>42ee	01 bb					.byte $01,$bb                          ; $cc ;
>42f0	01 a7					.byte $01,$a7                          ; $cd '
>42f2	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>42f5	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>42fa	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>42ff	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>4305	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4309	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>430d	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>4311	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>4317	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>431c	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4320	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4326	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>432b	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4331	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4334	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4339	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4340	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4345	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>434a	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>434f	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4353	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4359	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>435d	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4364	01 ae					.byte $01,$ae                          ; $e5 .
>4366	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>436b	01 a3					.byte $01,$a3                          ; $e7 #
>436d	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4373	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4374					Group1Text:
>4374	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4379	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>437e	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4383	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4387	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>438d	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4391	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4396	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>439e	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>43a2	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>43a7	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>43ac	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>43b1	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>43b7	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>43be	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>43c2	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>43c8	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>43cc	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>43d0	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>43d4	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>43d8	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>43dc	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>43e0	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>43e4	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>43e8	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>43ec	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>43f0	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>43f4	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>43f8	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>43fc	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>4400	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4404	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4408	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>440c	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4410	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4414	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4418	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>441c	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4420	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4424	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4428	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>442c	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4430	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4434	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4438	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>443c	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4440	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4444	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4448	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>444c	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4450	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4454	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4458	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>445c	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4460	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4464	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4468	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>446c	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4470	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4474	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4478	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>447c	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4480	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4484	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4488	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>448c	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4490	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4494	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4498	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>449c	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>44a0	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>44a4	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>44a8	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>44ac	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>44b0	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>44b4	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>44b8	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>44bc	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>44c0	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.44c1					Group2Text:
>44c1	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>44c7	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>44cd	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>44d3	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>44d8	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>44e0	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>44e7	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>44eb	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>44f0	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>44f6	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>44fb	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $90 text
>4500	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4501					Group3Text:
>4501	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4508	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>450f	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4517	58 a8
>4519	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4521	59 a8
>4523	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4528	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>452f	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4536	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>453d	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4544	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4545					tokeniserHandler:
.4545	7c 48 45	jmp ($4548,x)			jmp 	(tokeniserVectors,x)
.4548					tokeniserVectors:
>4548	54 45					.word _DummyControlHandler ; index 0
>454a	ee 3c					.word Detokenise           ; index 2
>454c	e2 3c					.word ListLine             ; index 4
>454e	73 3f					.word TokTest              ; index 6
>4550	93 3f					.word Tokenise             ; index 8
>4552	96 3f					.word TokeniseASCIIZ       ; index 10
.4554					_DummyControlHandler:
.4554	60		rts			rts

;******  Return to file: basic.asm

.4555					section_end_tokeniser:
.4555					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4555					AccessArray:
.4555	8a		txa				txa
.4556	48		pha				pha
.4557	e8		inx				inx
.4558	20 21 46	jsr $4621			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.455b	68		pla				pla
.455c	aa		tax				tax
.455d	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.455f	85 2a		sta $2a				sta 	temp0
.4561	b5 a0		lda $a0,x			lda 	esInt1,x
.4563	85 2b		sta $2b				sta 	temp0+1
.4565	8a		txa				txa
.4566	48		pha				pha
.4567	98		tya				tya
.4568	48		pha				pha
.4569					_AAFollow:
.4569	a0 00		ldy #$00			ldy 	#0
.456b	b1 2a		lda ($2a),y			lda 	(temp0),y
.456d	48		pha				pha
.456e	c8		iny				iny
.456f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4571	85 2b		sta $2b				sta 	temp0+1
.4573	68		pla				pla
.4574	85 2a		sta $2a				sta 	temp0
.4576	e8		inx				inx 								; advance to next stack slot.
.4577	a0 00		ldy #$00			ldy 	#0
.4579	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.457b	d5 98		cmp $98,x			cmp 	esInt0,x
.457d	c8		iny				iny
.457e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4580	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4582	29 7f		and #$7f			and 	#$7F
.4584	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4586	90 50		bcc $45d8			bcc 	_AABadIndex 				; failed on index if max index < required.
.4588	18		clc				clc
.4589	a5 2a		lda $2a				lda 	temp0
.458b	69 02		adc #$02			adc 	#2
.458d	85 2a		sta $2a				sta 	temp0
.458f	90 02		bcc $4593			bcc 	_AANoCarry
.4591	e6 2b		inc $2b				inc 	temp0+1
.4593					_AANoCarry:
.4593	b5 98		lda $98,x			lda 	esInt0,x
.4595	85 2e		sta $2e				sta 	temp2
.4597	b5 a0		lda $a0,x			lda 	esInt1,x
.4599	85 2f		sta $2f				sta 	temp2+1
.459b	ac 10 0e	ldy $0e10			ldy 	varType
.459e	b9 7b 46	lda $467b,y			lda 	CAActualSize-$3A,y
.45a1	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.45a3	30 02		bmi $45a7			bmi 	_AANotPointer
.45a5	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.45a7					_AANotPointer:
.45a7	20 25 47	jsr $4725			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.45aa	18		clc				clc
.45ab	a5 2a		lda $2a				lda 	temp0
.45ad	65 2e		adc $2e				adc 	temp2
.45af	85 2a		sta $2a				sta 	temp0
.45b1	a5 2b		lda $2b				lda 	temp0+1
.45b3	65 2f		adc $2f				adc 	temp2+1
.45b5	85 2b		sta $2b				sta 	temp0+1
.45b7	b5 91		lda $91,x			lda 	esType+1,x
.45b9	30 07		bmi $45c2			bmi 	_AAUsedAllIndices
.45bb	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.45bd	10 14		bpl $45d3			bpl 	_AABadDepth 				; no, too many indexes.
.45bf	4c 69 45	jmp $4569			jmp 	_AAFollow 					; otherwise follow them.
.45c2					_AAUsedAllIndices:
.45c2	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.45c4	30 0d		bmi $45d3			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.45c6	68		pla				pla
.45c7	a8		tay				tay
.45c8	68		pla				pla
.45c9	aa		tax				tax
.45ca	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.45cc	95 98		sta $98,x			sta 	esInt0,x
.45ce	a5 2b		lda $2b				lda 	temp0+1
.45d0	95 a0		sta $a0,x			sta 	esInt1,x
.45d2	60		rts				rts
.45d3					_AABadDepth:
.45d3	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.45d5	20 18 15	jsr $1518		jsr	errorHandler
.45d8					_AABadIndex:
.45d8	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.45da	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e0e					elementSize:
>0e0e							.fill	 1
.45dd					CreateArray:
.45dd	20 b4 47	jsr $47b4			jsr 	AccessSetup 				; set up the basic stuff.
.45e0	ad 10 0e	lda $0e10			lda 	varType 					; is the variable type an array
.45e3	4a		lsr a				lsr 	a
.45e4	90 36		bcc $461c			bcc 	CANotArray 					; no, cause an error.
.45e6	20 bd 48	jsr $48bd			jsr 	FindVariable 				; does the variable exist already
.45e9	b0 2c		bcs $4617			bcs 	CAFound 					; cannot redefine it.
.45eb	20 f1 47	jsr $47f1			jsr 	CreateVariable 				; create the variable entry.
.45ee	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.45f0	48		pha				pha
.45f1	a5 2b		lda $2b				lda 	temp0+1
.45f3	48		pha				pha
.45f4	a2 00		ldx #$00			ldx 	#0
.45f6	20 21 46	jsr $4621			jsr 	GetArrayDimensions 			; get the array dimensions
.45f9	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.45fb	20 51 46	jsr $4651			jsr 	CreateArrayLevel 			; level to YA
.45fe	aa		tax				tax 								; level now in YX
.45ff	68		pla				pla 								; get address back to temp0 to write.
.4600	85 2b		sta $2b				sta 	temp0+1
.4602	68		pla				pla
.4603	85 2a		sta $2a				sta 	temp0
.4605	98		tya				tya 								; write YX there.
.4606	a0 06		ldy #$06			ldy 	#6
.4608	91 2a		sta ($2a),y			sta 	(temp0),y
.460a	88		dey				dey
.460b	8a		txa				txa
.460c	91 2a		sta ($2a),y			sta 	(temp0),y
.460e	ac 11 0e	ldy $0e11			ldy 	varEnd 						; restore Y and exit.
.4611	60		rts				rts
.4612					CASize:
.4612	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4614	20 18 15	jsr $1518		jsr	errorHandler
.4617					CAFound:
.4617	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4619	20 18 15	jsr $1518		jsr	errorHandler
.461c					CANotArray:
.461c	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.461e	20 18 15	jsr $1518		jsr	errorHandler
.4621					GetArrayDimensions:
.4621	ad 10 0e	lda $0e10			lda 	varType 					; push variable type on the stack.
.4624	48		pha				pha
.4625	ac 11 0e	ldy $0e11			ldy 	varEnd
.4628					_CAGetDimensions:
.4628	8a		txa				txa 								; get the next level
.4629	a2 0a		ldx #$0a		ldx	#10
.462b	20 0f 3a	jsr $3a0f		jsr	mainHandler
.462e	aa		tax				tax
.462f	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4631	29 e0		and #$e0			and 	#$E0
.4633	15 a8		ora $a8,x			ora 	esInt2,x
.4635	15 b0		ora $b0,x			ora 	esInt3,x
.4637	d0 d9		bne $4612			bne 	CASize
.4639	e8		inx				inx 								; next level.
.463a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.463c	c8		iny				iny
.463d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.463f	f0 e7		beq $4628			beq 	_CAGetDimensions
.4641	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4643	d0 cd		bne $4612			bne 	CASize
.4645	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4647	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.4649	68		pla				pla 								; restore the variable type ($3A-$3F)
.464a	8d 10 0e	sta $0e10			sta 	varType
.464d	8c 11 0e	sty $0e11			sty 	varEnd 						; save exit Y value, after dimensions
.4650	60		rts				rts
.4651					CreateArrayLevel:
.4651	ac 10 0e	ldy $0e10			ldy 	varType
.4654	b9 7b 46	lda $467b,y			lda 	CAActualSize-$3A,y
.4657	8d 0e 0e	sta $0e0e			sta 	elementSize 				; get element size this level.
.465a	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.465c	30 05		bmi $4663			bmi 	_CANotPointer
.465e	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4660	8d 0e 0e	sta $0e0e			sta 	elementSize
.4663					_CANotPointer:
.4663	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4665	85 2a		sta $2a				sta 	temp0
.4667	48		pha				pha
.4668	a5 36		lda $36				lda 	lowMemory+1
.466a	85 2b		sta $2b				sta 	temp0+1
.466c	48		pha				pha
.466d	20 ee 46	jsr $46ee			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4670	a0 00		ldy #$00			ldy 	#0
.4672	b5 98		lda $98,x			lda 	esInt0,x
.4674	91 2a		sta ($2a),y			sta 	(temp0),y
.4676	c8		iny				iny
.4677	b5 a0		lda $a0,x			lda 	esInt1,x
.4679	91 2a		sta ($2a),y			sta 	(temp0),y
.467b	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.467d	30 06		bmi $4685			bmi 	_CALNotLast
.467f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4681	09 80		ora #$80			ora 	#$80
.4683	91 2a		sta ($2a),y			sta 	(temp0),y
.4685					_CALNotLast:
.4685	a9 02		lda #$02			lda 	#2
.4687	20 ab 46	jsr $46ab			jsr 	_CALAddTemp0
.468a	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.468c	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.468e	b5 a0		lda $a0,x			lda 	esInt1,x
.4690	95 b0		sta $b0,x			sta 	esInt3,x
.4692					_CALClear:
.4692	20 bb 46	jsr $46bb			jsr 	EraseOneElement
.4695	ad 0e 0e	lda $0e0e			lda 	elementSize 				; move to next element
.4698	20 ab 46	jsr $46ab			jsr 	_CALAddTemp0
.469b	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.469d	d0 02		bne $46a1			bne 	_CALNoBorrow
.469f	d6 b0		dec $b0,x			dec 	esInt3,x
.46a1					_CALNoBorrow:
.46a1	d6 a8		dec $a8,x			dec 	esInt2,x
.46a3	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.46a5	10 eb		bpl $4692			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.46a7	68		pla				pla 								; restore the start of this into YA.
.46a8	a8		tay				tay
.46a9	68		pla				pla
.46aa	60		rts				rts
.46ab					_CALAddTemp0:
.46ab	18		clc				clc
.46ac	65 2a		adc $2a				adc 	temp0
.46ae	85 2a		sta $2a				sta 	temp0
.46b0	90 02		bcc $46b4			bcc 	_CALANoCarry
.46b2	e6 2b		inc $2b				inc 	temp0+1
.46b4					_CALANoCarry:
.46b4	60		rts				rts
.46b5					CAActualSize:
>46b5	04 04						.byte 	VarISize,VarISize
>46b7	02 02						.byte 	VarSSize,VarSSize
>46b9	06 06						.byte 	VarFSize,VarFSize
.46bb					EraseOneElement:
.46bb	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.46bd	10 09		bpl $46c8			bpl 	_EOESubArray
.46bf	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.46c1	ad 10 0e	lda $0e10			lda 	varType
.46c4	20 5b 48	jsr $485b			jsr 	ZeroTemp0Y
.46c7	60		rts				rts
.46c8					_EOESubArray:
.46c8	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.46ca	48		pha				pha
.46cb	a5 2b		lda $2b				lda 	temp0+1
.46cd	48		pha				pha
.46ce	ad 0e 0e	lda $0e0e			lda 	elementSize 				; save element size
.46d1	48		pha				pha
.46d2	e8		inx				inx 								; create at next level
.46d3	20 51 46	jsr $4651			jsr 	CreateArrayLevel
.46d6	ca		dex				dex
.46d7	85 32		sta $32				sta 	tempShort 					; save A
.46d9	68		pla				pla  								; restore element size.
.46da	8d 0e 0e	sta $0e0e			sta 	elementSize
.46dd	68		pla				pla 								; restore temp0, which is where this new array level goes.
.46de	85 2b		sta $2b				sta 	temp0+1
.46e0	68		pla				pla
.46e1	85 2a		sta $2a				sta 	temp0
.46e3	98		tya				tya 								; store Y/A there
.46e4	a0 01		ldy #$01			ldy 	#1
.46e6	91 2a		sta ($2a),y			sta 	(temp0),y
.46e8	a5 32		lda $32				lda 	tempShort
.46ea	88		dey				dey
.46eb	91 2a		sta ($2a),y			sta 	(temp0),y
.46ed	60		rts				rts
.46ee					AllocateArraySpace:
.46ee	18		clc				clc 								; element count + 1 => temp2.
.46ef	b5 98		lda $98,x			lda 	esInt0,x
.46f1	69 01		adc #$01			adc 	#1
.46f3	85 2e		sta $2e				sta 	temp2
.46f5	b5 a0		lda $a0,x			lda 	esInt1,x
.46f7	69 00		adc #$00			adc 	#0
.46f9	85 2f		sta $2f				sta 	temp2+1
.46fb	ad 0e 0e	lda $0e0e			lda 	elementSize 				; bytes per element
.46fe	20 25 47	jsr $4725			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4701	18		clc				clc 								; add 2 for 'max element' byte.
.4702	a5 2e		lda $2e				lda 	temp2
.4704	69 02		adc #$02			adc 	#2
.4706	85 2e		sta $2e				sta 	temp2
.4708	90 02		bcc $470c			bcc 	_AASNoCarry
.470a	e6 2f		inc $2f				inc 	temp2+1
.470c					_AASNoCarry:
.470c	18		clc				clc 								; add to low memory, allocating space.
.470d	a5 35		lda $35				lda 	lowMemory
.470f	65 2e		adc $2e				adc 	temp2
.4711	85 35		sta $35				sta 	lowMemory
.4713	a5 36		lda $36				lda 	lowMemory+1
.4715	65 2f		adc $2f				adc 	temp2+1
.4717	85 36		sta $36				sta 	lowMemory+1
.4719	b0 05		bcs $4720			bcs 	_AASFail 					; out of memory as adding causes wrapround
.471b	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.471d	b0 01		bcs $4720			bcs 	_AASFail
.471f	60		rts				rts
.4720					_AASFail:
.4720	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4722	20 18 15	jsr $1518		jsr	errorHandler
.4725					MultiplyTemp2ByA:
.4725	48		pha				pha
.4726	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4728	85 30		sta $30				sta 	temp3
.472a	a5 2f		lda $2f				lda 	temp2+1
.472c	85 31		sta $31				sta 	temp3+1
.472e	68		pla				pla
.472f	06 2e		asl $2e				asl 	temp2 						; double it.
.4731	26 2f		rol $2f				rol 	temp2+1
.4733	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4735	f0 15		beq $474c			beq 	_MTBAExit
.4737	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4739	d0 0d		bne $4748			bne 	_MTBANotFloat
.473b	18		clc				clc 								; so this will make it x 3
.473c	a5 2e		lda $2e				lda 	temp2
.473e	65 30		adc $30				adc 	temp3
.4740	85 2e		sta $2e				sta 	temp2
.4742	a5 2f		lda $2f				lda 	temp2+1
.4744	65 31		adc $31				adc 	temp3+1
.4746	85 2f		sta $2f				sta 	temp2+1
.4748					_MTBANotFloat:
.4748	06 2e		asl $2e				asl 	temp2 						; double it.
.474a	26 2f		rol $2f				rol 	temp2+1
.474c					_MTBAExit:
.474c	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e0f					varHash:
>0e0f							.fill	1
.0e10					varType:
>0e10							.fill 	1
.0e11					varEnd:
>0e11							.fill 	1
.003b					hashList:
>003b							.fill 	2
.474d					AccessVariable:
.474d	aa		tax				tax 								; stack in X
.474e	c8		iny				iny									; look at second character
.474f	b1 28		lda ($28),y			lda 	(codePtr),y
.4751	88		dey				dey
.4752	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4754	d0 15		bne $476b			bne 	_AVLong 					; no, always use the hash tables.
.4756	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4758	38		sec				sec 	 							; make it 0-25
.4759	e9 01		sbc #$01			sbc 	#1
.475b	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.475c	0a		asl a				asl 	a
.475d	95 98		sta $98,x			sta 	esInt0,x
.475f	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4761	95 a0		sta $a0,x			sta 	esInt1,x
.4763	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4765	95 90		sta $90,x			sta 	esType,x
.4767	c8		iny				iny 								; skip over the variable reference in the code.
.4768	c8		iny				iny  								; (1 letter, 1 type)
.4769	8a		txa				txa 								; stack in A to return.
.476a	60		rts				rts
.476b					_AVLong:
.476b	8a		txa				txa
.476c	48		pha				pha
.476d	20 b4 47	jsr $47b4			jsr 	AccessSetup 				; set up the basic information we need for later
.4770	20 bd 48	jsr $48bd			jsr 	FindVariable 				; does the variable exist already ?
.4773	b0 0e		bcs $4783			bcs 	_AVFound 					; yes, then its found
.4775	ad 10 0e	lda $0e10			lda 	varType 					; otherwise, is the variable type an array
.4778	4a		lsr a				lsr 	a
.4779	90 05		bcc $4780			bcc 	_AVCanCreate 				; if not, we can autocreate
.477b	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.477d	20 18 15	jsr $1518		jsr	errorHandler
.4780					_AVCanCreate:
.4780	20 f1 47	jsr $47f1			jsr 	CreateVariable 				; variable does not exist, create it.
.4783					_AVFound:
.4783	68		pla				pla
.4784	aa		tax				tax
.4785	18		clc				clc 								; copy temp0 (variable record address)
.4786	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4788	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.478a	95 98		sta $98,x			sta 	esInt0,x
.478c	a5 2b		lda $2b				lda 	temp0+1
.478e	69 00		adc #$00			adc 	#0
.4790	95 a0		sta $a0,x			sta 	esInt1,x
.4792	a9 00		lda #$00			lda 	#0
.4794	95 a8		sta $a8,x			sta 	esInt2,x
.4796	95 b0		sta $b0,x			sta 	esInt3,x
.4798	ac 10 0e	ldy $0e10			ldy 	varType 					; get the type ID from the type.
.479b	b9 74 47	lda $4774,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.479e	95 90		sta $90,x			sta 	esType,x
.47a0	ac 11 0e	ldy $0e11			ldy 	varEnd 						; restore Y
.47a3	ad 10 0e	lda $0e10			lda 	VarType 					; get variable type, put LSB into C
.47a6	4a		lsr a				lsr 	a
.47a7	90 03		bcc $47ac			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.47a9	20 55 45	jsr $4555			jsr 	AccessArray 				; array lookup. if LSB was set.
.47ac					_AVNotArray:
.47ac	8a		txa				txa 								; return stack in A and return
.47ad	60		rts				rts
.47ae					_AVTypeTable:
>47ae	80 80						.byte 	$80,$80						; integer
>47b0	c0 c0						.byte 	$C0,$C0 					; string
>47b2	81 81						.byte 	$81,$81 					; float
.47b4					AccessSetup:
.47b4	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.47b6	8d 0f 0e	sta $0e0f			sta 	varHash
.47b9	98		tya				tya
.47ba	48		pha				pha
.47bb	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.47bd	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.47bf	b0 0b		bcs $47cc			bcs 	_ASComplete
.47c1	18		clc				clc 								; add to the hash. Might improve this.
.47c2	6d 0f 0e	adc $0e0f			adc 	varHash
.47c5	8d 0f 0e	sta $0e0f			sta 	varHash
.47c8	c8		iny				iny 								; next character
.47c9	4c bb 47	jmp $47bb			jmp 	_ASLoop
.47cc					_ASComplete:
.47cc	8d 10 0e	sta $0e10			sta 	varType 					; save variable type byte
.47cf	c8		iny				iny
.47d0	8c 11 0e	sty $0e11			sty 	varEnd 						; save the ending position.
.47d3	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.47d4	e9 3a		sbc #$3a			sbc 	#$3A
.47d6	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.47d7	0a		asl a				asl 	a
.47d8	0a		asl a				asl 	a
.47d9	0a		asl a				asl 	a 							; 2 bytes/word
.47da	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.47dc	ad 0f 0e	lda $0e0f			lda 	varHash 					; get hash
.47df	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.47e1	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.47e2	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.47e4	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.47e6	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.47e8	a9 0a		lda #$0a			lda 	#hashTables >> 8
.47ea	69 00		adc #$00			adc 	#0
.47ec	85 3c		sta $3c				sta 	hashList+1
.47ee	68		pla				pla
.47ef	a8		tay				tay
.47f0	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.47f1					CreateVariable:
.47f1	98		tya				tya 								; push Y on the stack twice.
.47f2	48		pha				pha									; position in code of the new variable.
.47f3	48		pha				pha
.47f4	ae 10 0e	ldx $0e10			ldx 	varType 					; get var type 0-5 from the var type
.47f7	bd 1b 48	lda $481b,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.47fa	48		pha				pha 								; save length
.47fb	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.47fd	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.47ff	a5 36		lda $36				lda 	lowMemory+1
.4801	85 2b		sta $2b				sta 	temp0+1
.4803	68		pla				pla 								; get length
.4804	18		clc				clc 								; add to low memory.
.4805	65 35		adc $35				adc 	lowMemory
.4807	85 35		sta $35				sta 	lowMemory
.4809	90 08		bcc $4813			bcc 	_CVNoCarry
.480b	e6 36		inc $36				inc 	lowMemory+1
.480d	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.480f	c5 34		cmp $34				cmp 	highMemory+1
.4811	b0 3d		bcs $4850			bcs 	_CVMemory
.4813					_CVNoCarry:
.4813	ad 0f 0e	lda $0e0f			lda 	varHash 					; store hash at offset 4.
.4816	a0 04		ldy #$04			ldy 	#4
.4818	91 2a		sta ($2a),y			sta 	(temp0),y
.481a	68		pla				pla 								; offset, work out where the variable name is.
.481b	18		clc				clc
.481c	65 28		adc $28				adc 	codePtr
.481e	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4820	91 2a		sta ($2a),y			sta 	(temp0),y
.4822	a5 29		lda $29				lda 	codePtr+1
.4824	69 00		adc #$00			adc 	#0
.4826	c8		iny				iny
.4827	91 2a		sta ($2a),y			sta 	(temp0),y
.4829	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.482c	b0 03		bcs $4831			bcs 	_CVNotImmediate
.482e	20 93 48	jsr $4893			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4831					_CVNotImmediate:
.4831	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4833	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4835	91 2a		sta ($2a),y			sta 	(temp0),y
.4837	c8		iny				iny
.4838	b1 3b		lda ($3b),y			lda 	(hashList),y
.483a	91 2a		sta ($2a),y			sta 	(temp0),y
.483c	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.483e	91 3b		sta ($3b),y			sta 	(hashList),y
.4840	88		dey				dey
.4841	a5 2a		lda $2a				lda 	temp0
.4843	91 3b		sta ($3b),y			sta 	(hashList),y
.4845	ad 10 0e	lda $0e10			lda 	varType 					; type in A
.4848	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.484a	20 5b 48	jsr $485b			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.484d	68		pla				pla
.484e	a8		tay				tay
.484f	60		rts				rts
.4850					_CVMemory:
.4850	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4852	20 18 15	jsr $1518		jsr	errorHandler
>4855	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4857	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4859	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.485b					ZeroTemp0Y:
.485b	4a		lsr a				lsr 	a 							; bit 0 in carry
.485c	0a		asl a				asl 	a
.485d	b0 19		bcs $4878			bcs 	_ZTExit 					; we don't initialise arrays.
.485f	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4861	f0 16		beq $4879			beq 	_ZTWriteNullString 			; write "" string
.4863	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4865	f0 22		beq $4889			beq 	_ZTWriteFloat
.4867	98		tya				tya
.4868	48		pha				pha
.4869	a9 00		lda #$00			lda 	#0
.486b	91 2a		sta ($2a),y			sta 	(temp0),y
.486d	c8		iny				iny
.486e	91 2a		sta ($2a),y			sta 	(temp0),y
.4870	c8		iny				iny
.4871	91 2a		sta ($2a),y			sta 	(temp0),y
.4873	c8		iny				iny
.4874	91 2a		sta ($2a),y			sta 	(temp0),y
.4876	68		pla				pla
.4877	a8		tay				tay
.4878					_ZTExit:
.4878	60		rts				rts
.4879					_ZTWriteNullString:
.4879	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.487b	8d ce 0a	sta $0ace			sta 	NullString
.487e	a9 ce		lda #$ce			lda 	#NullString & $FF
.4880	91 2a		sta ($2a),y			sta 	(temp0),y
.4882	a9 0a		lda #$0a			lda 	#NullString >> 8
.4884	c8		iny				iny
.4885	91 2a		sta ($2a),y			sta 	(temp0),y
.4887	88		dey				dey
.4888	60		rts				rts
.4889					_ZTWriteFloat:
.4889	8a		txa				txa
.488a	48		pha				pha
.488b	a2 20		ldx #$20		ldx	#32
.488d	20 87 21	jsr $2187		jsr	floatingpointHandler
.4890	68		pla				pla
.4891	aa		tax				tax
.4892	60		rts				rts
.4893					CloneVariableName:
.4893	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4895	b1 2a		lda ($2a),y			lda 	(temp0),y
.4897	85 2e		sta $2e				sta 	temp2
.4899	c8		iny				iny
.489a	b1 2a		lda ($2a),y			lda 	(temp0),y
.489c	85 2f		sta $2f				sta 	temp2+1
.489e	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.48a0	91 2a		sta ($2a),y			sta 	(temp0),y
.48a2	88		dey				dey
.48a3	a5 35		lda $35				lda 	lowMemory
.48a5	91 2a		sta ($2a),y			sta 	(temp0),y
.48a7	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.48a9					_CVNCopy:
.48a9	b1 2e		lda ($2e),y			lda		(temp2),y
.48ab	91 35		sta ($35),y			sta 	(lowMemory),y
.48ad	c8		iny				iny
.48ae	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.48b0	90 f7		bcc $48a9			bcc 	_CVNCopy
.48b2	98		tya				tya 								; add Y to low memory
.48b3	18		clc				clc
.48b4	65 35		adc $35				adc 	lowMemory
.48b6	85 35		sta $35				sta 	lowMemory
.48b8	90 02		bcc $48bc			bcc 	_CVNNoCarry
.48ba	e6 36		inc $36				inc 	lowMemory+1
.48bc					_CVNNoCarry:
.48bc	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.48bd					FindVariable:
.48bd	98		tya				tya
.48be	48		pha				pha
.48bf	98		tya				tya 								; point temp2 to the actual name
.48c0	18		clc				clc 								; in memory of the variable being created
.48c1	65 28		adc $28				adc 	codePtr
.48c3	85 2e		sta $2e				sta 	temp2
.48c5	a5 29		lda $29				lda 	codePtr+1
.48c7	69 00		adc #$00			adc 	#0
.48c9	85 2f		sta $2f				sta 	temp2+1
.48cb	a0 00		ldy #$00			ldy 	#0
.48cd	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.48cf	85 2a		sta $2a				sta 	temp0
.48d1	a5 3c		lda $3c				lda 	hashList+1
.48d3	85 2b		sta $2b				sta 	temp0+1
.48d5	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.48d7	b1 2a		lda ($2a),y			lda 	(temp0),y
.48d9	f0 2c		beq $4907			beq 	_FVFail
.48db	aa		tax				tax
.48dc	88		dey				dey		 							; get LSB
.48dd	b1 2a		lda ($2a),y			lda 	(temp0),y
.48df	85 2a		sta $2a				sta 	temp0 						; update pointer.
.48e1	86 2b		stx $2b				stx 	temp0+1
.48e3	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.48e5	b1 2a		lda ($2a),y			lda 	(temp0),y
.48e7	cd 0f 0e	cmp $0e0f			cmp 	varHash
.48ea	d0 e9		bne $48d5			bne 	_FVNext 					; if not, no point in checking the name.
.48ec	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.48ed	b1 2a		lda ($2a),y			lda 	(temp0),y
.48ef	85 2d		sta $2d				sta 	temp1+1
.48f1	88		dey				dey
.48f2	b1 2a		lda ($2a),y			lda 	(temp0),y
.48f4	85 2c		sta $2c				sta 	temp1
.48f6	a0 00		ldy #$00			ldy 	#0
.48f8					_FVCheck:
.48f8	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.48fa	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.48fc	d0 d7		bne $48d5			bne 	_FVNext		 				; fail if different.
.48fe	c8		iny				iny
.48ff	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4901	90 f5		bcc $48f8			bcc 	_FVCheck
.4903	68		pla				pla
.4904	a8		tay				tay
.4905	38		sec				sec
.4906	60		rts				rts
.4907					_FVFail:
.4907	68		pla				pla
.4908	a8		tay				tay
.4909	18		clc				clc
.490a	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.490b					HashTableReset:
.490b	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.490d	a9 00		lda #$00			lda 	#0
.490f					_HTRClear:
.490f	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4912	ca		dex				dex
.4913	d0 fa		bne $490f			bne 	_HTRClear
.4915	60		rts				rts

;******  Return to file: variable/variable.asm

.4916					variableHandler:
.4916	7c 19 49	jmp ($4919,x)			jmp 	(variableVectors,x)
.4919					variableVectors:
>4919	21 49					.word _DummyControlHandler ; index 0
>491b	4d 47					.word AccessVariable       ; index 2
>491d	dd 45					.word CreateArray          ; index 4
>491f	0b 49					.word HashTableReset       ; index 6
.4921					_DummyControlHandler:
.4921	60		rts			rts

;******  Return to file: basic.asm

.4922					section_end_variable:
.4922					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e12					endStorage:
>4922							.align 	256
.4a00					programMemory:
>49ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4a00					section_end_footer:

;******  End of listing
