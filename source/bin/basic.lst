
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Tue Mar  2 04:12:34 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					highMemory:
>0acc							.fill 	2
.0ace					lowMemory:
>0ace							.fill 	2
.0ad0					convertBuffer:
>0ad0							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_BadIndex = 18 ; Bad NEXT index
=19					ErrorID_Struct = 19 ; Structures nested wrong
=20					ErrorID_NoAuto = 20 ; Cannot create variable
=21					ErrorID_RetStack = 21 ; Return stack out of space.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc


;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 1d 12	jmp $121d			jmp 	Command_Run
.20b9					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	06 0a 00 81 8e 80 00			.byte 6,10,0,129,142,128,0

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 6f 17	jsr $176f			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 00 1d	jsr $1d00			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 07 1e	jsr $1e07			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	8d cc 0a	sta $0acc			sta 	highMemory
.1030	ad cb 0a	lda $0acb			lda 	endMemory+1
.1033	8d cd 0a	sta $0acd			sta 	highMemory+1
.1036	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1039	85 04		sta $04				sta 	temp0
.103b	ad c9 0a	lda $0ac9			lda 	basePage+1
.103e	85 05		sta $05				sta 	temp0+1
.1040					_CCFindEnd:
.1040	a0 00		ldy #$00			ldy 	#0
.1042	b1 04		lda ($04),y			lda 	(temp0),y
.1044	f0 0c		beq $1052			beq 	_CCFoundEnd 				; offset zero is end.
.1046	18		clc				clc
.1047	65 04		adc $04				adc 	temp0 						; move to next line
.1049	85 04		sta $04				sta 	temp0
.104b	90 f3		bcc $1040			bcc 	_CCFindEnd
.104d	e6 05		inc $05				inc 	temp0+1
.104f	4c 40 10	jmp $1040			jmp 	_CCFindEnd
.1052					_CCFoundEnd:
.1052	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1054	8d ce 0a	sta $0ace			sta 	lowMemory
.1057	a5 05		lda $05				lda 	temp0+1
.1059	8d cf 0a	sta $0acf			sta 	lowMemory+1
.105c	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105e	20 6c 10	jsr $106c			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1061	20 66 1d	jsr $1d66			jsr 	RSReset 					; reset the return stack.
.1064	a2 02		ldx #$02		ldx	#2
.1066	20 b2 20	jsr $20b2		jsr	variableHandler
.1069	68		pla				pla
.106a	a8		tay				tay
.106b	60		rts				rts
.106c					AdvanceLowMemoryByte:
.106c	18		clc				clc
.106d	6d ce 0a	adc $0ace			adc 	lowMemory
.1070	8d ce 0a	sta $0ace			sta 	lowMemory
.1073	90 03		bcc $1078			bcc 	_ALMBExit
.1075	ee cf 0a	inc $0acf			inc 	lowMemory+1
.1078					_ALMBExit:
.1078	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.20b9					Command_FOR:
.20b9	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.20bb	a2 0b		ldx #$0b			ldx 	#11
.20bd	20 74 1d	jsr $1d74			jsr 	RSClaim
.20c0	20 b5 10	jsr $10b5			jsr 	CommandLET 					; do the same as LET.
.20c3	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.20c5	c9 80		cmp #$80			cmp 	#$80
.20c7	d0 4c		bne $2115			bne 	_CFType
.20c9	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.20cb	20 41 1d	jsr $1d41			jsr 	CheckToken
.20ce	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.20d0	20 71 17	jsr $1771			jsr 	EvaluateInteger				; get terminal value in stack 1
.20d3	98		tya				tya
.20d4	48		pha				pha
.20d5	a0 04		ldy #$04			ldy 	#4
.20d7	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.20d9	91 78		sta ($78),y			sta 	(rsPointer),y
.20db	c8		iny				iny
.20dc	a5 50		lda $50				lda		esInt1
.20de	91 78		sta ($78),y			sta 	(rsPointer),y
.20e0	c8		iny				iny
.20e1	a9 01		lda #$01			lda 	#1  						; the default step in 6
.20e3	91 78		sta ($78),y			sta 	(rsPointer),y
.20e5	c8		iny				iny
.20e6	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.20e8	91 78		sta ($78),y			sta 	(rsPointer),y
.20ea	c8		iny				iny
.20eb	a5 51		lda $51				lda		esInt1+1
.20ed	91 78		sta ($78),y			sta 	(rsPointer),y
.20ef	c8		iny				iny
.20f0	a5 59		lda $59				lda		esInt2+1
.20f2	91 78		sta ($78),y			sta 	(rsPointer),y
.20f4	c8		iny				iny
.20f5	a5 61		lda $61				lda		esInt3+1
.20f7	91 78		sta ($78),y			sta 	(rsPointer),y
.20f9	68		pla				pla
.20fa	a8		tay				tay
.20fb	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.20fd	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.20ff	d0 0e		bne $210f			bne 	_CFDone
.2101	c8		iny				iny									; skip over step.
.2102	20 71 17	jsr $1771			jsr 	EvaluateInteger 			; get step
.2105	98		tya				tya
.2106	48		pha				pha
.2107	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2109	a0 06		ldy #$06			ldy 	#6
.210b	91 78		sta ($78),y			sta 	(rsPointer),y
.210d	68		pla				pla
.210e	a8		tay				tay
.210f					_CFDone:
.210f	a9 01		lda #$01			lda 	#1
.2111	20 a0 1d	jsr $1da0			jsr 	RSSavePosition 				; save position.
.2114	60		rts				rts
.2115					_CFType:
.2115	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2117	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.211a					Command_NEXT:
.211a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.211c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.211e	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2120	f0 05		beq $2127			beq 	_isok
.2122	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2124	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.2127					_isok:
.2127	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2129	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.212b	b0 18		bcs $2145			bcs 	_CNNoIndex
.212d	a2 00		ldx #$00			ldx 	#0 							; start on stack
.212f	20 9e 17	jsr $179e			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2132	98		tya				tya
.2133	48		pha				pha
.2134	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2136	b1 78		lda ($78),y			lda 	(rsPointer),y
.2138	d5 48		cmp $48,x			cmp 	esInt0,x
.213a	d0 76		bne $21b2			bne 	_CNBadIndex
.213c	c8		iny				iny
.213d	b1 78		lda ($78),y			lda 	(rsPointer),y
.213f	d5 50		cmp $50,x			cmp 	esInt1,x
.2141	d0 6f		bne $21b2			bne 	_CNBadIndex
.2143	68		pla				pla
.2144	a8		tay				tay
.2145					_CNNoIndex:
.2145	98		tya				tya
.2146	48		pha				pha
.2147	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2149	b1 78		lda ($78),y			lda 	(rsPointer),y
.214b	85 04		sta $04				sta 	temp0
.214d	c8		iny				iny
.214e	b1 78		lda ($78),y			lda 	(rsPointer),y
.2150	85 05		sta $05				sta 	temp0+1
.2152	c8		iny				iny
.2153	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2155	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2157	85 09		sta $09				sta 	temp2+1 					; save for later.
.2159	10 01		bpl $215c			bpl 	_CNSignX
.215b	ca		dex				dex  								; X = $FF
.215c					_CNSignX:
.215c	18		clc				clc 								; add to the LSB
.215d	a0 00		ldy #$00			ldy 	#0
.215f	71 04		adc ($04),y			adc 	(temp0),y
.2161	91 04		sta ($04),y			sta 	(temp0),y
.2163					_CNPropogate:
.2163	c8		iny				iny  								; add the sign extended in X to the rest.
.2164	8a		txa				txa
.2165	71 04		adc ($04),y			adc 	(temp0),y
.2167	91 04		sta ($04),y			sta 	(temp0),y
.2169	c8		iny				iny
.216a	8a		txa				txa
.216b	71 04		adc ($04),y			adc 	(temp0),y
.216d	91 04		sta ($04),y			sta 	(temp0),y
.216f	c8		iny				iny
.2170	8a		txa				txa
.2171	71 04		adc ($04),y			adc 	(temp0),y
.2173	91 04		sta ($04),y			sta 	(temp0),y
.2175	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2176	a5 78		lda $78				lda 	rsPointer
.2178	69 07		adc #$07			adc 	#7
.217a	85 06		sta $06				sta 	temp1
.217c	a9 00		lda #$00			lda 	#0
.217e	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2180	a8		tay				tay 								; and clear the Y register again.
.2181	65 79		adc $79				adc 	rsPointer+1
.2183	85 07		sta $07				sta 	temp1+1
.2185	38		sec				sec 								; calculate current - limit oring interim values.
.2186	20 be 21	jsr $21be			jsr 	_CNCompare
.2189	20 be 21	jsr $21be			jsr 	_CNCompare
.218c	20 be 21	jsr $21be			jsr 	_CNCompare
.218f	20 be 21	jsr $21be			jsr 	_CNCompare
.2192	50 02		bvc $2196			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2194	49 80		eor #$80			eor 	#$80
.2196					_CNNoOverflow:
.2196	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2198	30 1d		bmi $21b7			bmi 	_CNCheckDownto
.219a	c9 00		cmp #$00			cmp 	#0
.219c	30 0c		bmi $21aa			bmi 	_CNLoopRound 				; loop round if < =
.219e	a5 08		lda $08				lda 	temp2
.21a0	f0 08		beq $21aa			beq 	_CNLoopRound
.21a2					_CNLoopExit:
.21a2	68		pla				pla
.21a3	a8		tay				tay
.21a4	a9 0b		lda #$0b			lda 	#11
.21a6	20 96 1d	jsr $1d96			jsr 	RSFree
.21a9	60		rts				rts
.21aa					_CNLoopRound:
.21aa	68		pla				pla
.21ab	a8		tay				tay
.21ac	a9 01		lda #$01			lda 	#1
.21ae	20 b3 1d	jsr $1db3			jsr 	RSLoadPosition				; go back to the loop top
.21b1	60		rts				rts
.21b2					_CNBadIndex:
.21b2	a2 12		ldx #$12			ldx 	#ErrorID_BadIndex
.21b4	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.21b7					_CNCheckDownto:
.21b7	c9 00		cmp #$00			cmp 	#0
.21b9	10 ef		bpl $21aa			bpl 	_CNLoopRound
.21bb	4c a2 21	jmp $21a2			jmp 	_CNLoopExit
.21be					_CNCompare:
.21be	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.21c0	f1 06		sbc ($06),y			sbc 	(temp1),y
.21c2	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.21c4	85 08		sta $08				sta 	temp2
.21c6	c8		iny				iny
.21c7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1079					CommandIf:
.1079	20 6f 17	jsr $176f			jsr 	EvaluateRootInteger 		; if what ?
.107c	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107e	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.1080	f0 04		beq $1086			beq 	_IfSimple
.1082	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1084	d0 1b		bne $10a1			bne 	_IfComplex
.1086					_IfSimple:
.1086	20 00 1d	jsr $1d00			jsr 	MInt32Zero					; check if TOS zero
.1089	f0 10		beq $109b			beq 	_IfEOL 						; go to next line.
.108b	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.108d	c8		iny				iny
.108e	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1090	f0 0c		beq $109e			beq 	_IfGoto 					; do the Goto code
.1092	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1094	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1096	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1098	f0 04		beq $109e			beq 	_IfGoto
.109a	60		rts				rts 								; else continue on this line.
.109b					_IfEOL:
.109b	4c 6c 13	jmp $136c			jmp 	AdvanceNextLine 			; go to next line
.109e					_IfGoto:
.109e	4c ab 13	jmp $13ab			jmp 	CommandGoto
.10a1					_IfComplex:
.10a1	20 00 1d	jsr $1d00			jsr 	MInt32Zero 					; is it true ?
.10a4	f0 01		beq $10a7			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a6	60		rts				rts 								; else continue.
.10a7					_IFSkip:
.10a7	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a9	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ab	4c 31 22	jmp $2231			jmp		ScanForward
.10ae					Command_ELSE:
.10ae	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10b0	8a		txa				txa
.10b1	4c 31 22	jmp $2231			jmp		ScanForward
.10b4					Command_ENDIF:
.10b4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b5					CommandLet:
.10b5	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b7	20 9e 17	jsr $179e			jsr 	EvaluateReference
.10ba	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10bc	20 41 1d	jsr $1d41			jsr 	CheckToken
.10bf	e8		inx				inx 								; do RHS
.10c0	20 52 17	jsr $1752			jsr 	Evaluate 					; evaluate and derefernce
.10c3	ca		dex				dex
.10c4	20 c8 10	jsr $10c8			jsr 	WriteValue 					; write it out
.10c7	60		rts				rts
.10c8					WriteValue:
.10c8	98		tya				tya
.10c9	48		pha				pha
.10ca	20 21 11	jsr $1121			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10cd	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cf	55 41		eor $41,x			eor 	esType+1,x
.10d1	29 40		and #$40			and 	#$40
.10d3	d0 47		bne $111c			bne		_WVType
.10d5	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d7	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d9	29 40		and #$40			and 	#$40
.10db	d0 30		bne $110d			bne 	_WVCopyData2
.10dd	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10df	15 41		ora $41,x			ora 	esType+1,x
.10e1	4a		lsr a				lsr 	a
.10e2	90 18		bcc $10fc			bcc 	_WVCopyData4
.10e4	b5 40		lda $40,x			lda 	esType,x
.10e6	4a		lsr a				lsr 	a
.10e7	90 33		bcc $111c			bcc 	_WVType
.10e9	e8		inx				inx 								; force the value being written to be a float.
.10ea	20 1d 14	jsr $141d			jsr 	BPMakeFloat
.10ed	ca		dex				dex
.10ee	20 21 11	jsr $1121			jsr 	TOSToTemp0 					; set Temp0 to write address
.10f1	e8		inx				inx
.10f2	8a		txa				txa
.10f3	a2 1e		ldx #$1e		ldx	#30
.10f5	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.10f8	aa		tax				tax
.10f9	4c 19 11	jmp $1119			jmp 	_WVCopyExit
.10fc					_WVCopyData4:
.10fc	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.10fe	29 20		and #$20			and 	#$20
.1100	d0 11		bne $1113			bne 	_WVCopyData1
.1102	a0 03		ldy #$03			ldy 	#3
.1104	b5 61		lda $61,x			lda 	esInt3+1,x
.1106	91 04		sta ($04),y			sta 	(temp0),y
.1108	88		dey				dey
.1109	b5 59		lda $59,x			lda 	esInt2+1,x
.110b	91 04		sta ($04),y			sta 	(temp0),y
.110d					_WVCopyData2:
.110d	a0 01		ldy #$01			ldy 	#1
.110f	b5 51		lda $51,x			lda 	esInt1+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113					_WVCopyData1:
.1113	a0 00		ldy #$00			ldy 	#0
.1115	b5 49		lda $49,x			lda 	esInt0+1,x
.1117	91 04		sta ($04),y			sta 	(temp0),y
.1119					_WVCopyExit:
.1119	68		pla				pla
.111a	a8		tay				tay
.111b	60		rts				rts
.111c					_WVType:
.111c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.111e	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1121					TOSToTemp0:
.1121	b5 48		lda $48,x			lda 	esInt0,x
.1123	85 04		sta $04				sta 	temp0
.1125	b5 50		lda $50,x			lda 	esInt1,x
.1127	85 05		sta $05				sta 	temp0+1
.1129	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.112a					Command_New:
.112a	20 7f 12	jsr $127f			jsr 	ResetCodeAddress 			; point to first line
.112d	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.112f	98		tya				tya
.1130	91 02		sta ($02),y			sta 	(codePtr),y
.1132	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.1135	4c 69 13	jmp $1369			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1138					Command_Poke:
.1138	a9 01		lda #$01			lda 	#1
.113a	d0 06		bne $1142			bne 	PokeGeneral
.113c					Command_Doke:
.113c	a9 02		lda #$02			lda 	#2
.113e	d0 02		bne $1142			bne 	PokeGeneral
.1140					Command_Loke:
.1140	a9 03		lda #$03			lda 	#3
.1142					PokeGeneral:
.1142	48		pha				pha 								; save size
.1143	20 6f 17	jsr $176f			jsr 	EvaluateRootInteger 		; target address
.1146	20 59 1d	jsr $1d59			jsr	 	CheckComma
.1149	e8		inx				inx
.114a	20 71 17	jsr $1771			jsr 	EvaluateInteger 			; what value to POKE ?
.114d	ca		dex				dex
.114e	20 21 11	jsr $1121			jsr 	TOSToTemp0 					; temp0 points to the target address
.1151	84 0a		sty $0a				sty 	tempShort 					; save Y
.1153	68		pla				pla 								; get copy type and dispatch
.1154	aa		tax				tax
.1155	ca		dex				dex
.1156	f0 14		beq $116c			beq 	_Poke1
.1158	ca		dex				dex
.1159	f0 0b		beq $1166			beq 	_Poke2
.115b	a0 03		ldy #$03			ldy 	#3
.115d	a5 61		lda $61				lda 	esInt3+1
.115f	91 04		sta ($04),y			sta 	(temp0),y
.1161	88		dey				dey
.1162	a5 59		lda $59				lda 	esInt2+1
.1164	91 04		sta ($04),y			sta 	(temp0),y
.1166					_Poke2:
.1166	a0 01		ldy #$01			ldy 	#1
.1168	a5 51		lda $51				lda 	esInt1+1
.116a	91 04		sta ($04),y			sta 	(temp0),y
.116c					_Poke1:
.116c	a0 00		ldy #$00			ldy 	#0
.116e	a5 49		lda $49				lda 	esInt0+1
.1170	91 04		sta ($04),y			sta 	(temp0),y
.1172	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1174	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af3					lastPrintToken:
>0af3							.fill 	1
.1175					Command_Print:
.1175	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1177	8d f3 0a	sta $0af3			sta 	lastPrintToken
.117a	88		dey				dey
.117b					_PrintLoopSkip:
.117b	c8		iny				iny
.117c					_PrintLoop:
.117c	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.117e	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1180	f0 5b		beq $11dd			beq 	_PrintExit
.1182	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.1184	f0 57		beq $11dd			beq 	_PrintExit
.1186	8d f3 0a	sta $0af3			sta 	lastPrintToken 				; update LPT
.1189	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.118b	f0 ee		beq $117b			beq 	_PrintLoopSkip
.118d	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.118f	f0 3c		beq $11cd			beq	 	_PrintNewLine
.1191	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.1193	f0 40		beq $11d5			beq 	_PrintTab
.1195	20 50 17	jsr $1750			jsr 	EvaluateRoot 				; evaluate something at the root
.1198	a9 d0		lda #$d0			lda 	#(convertBuffer) & $FF
.119a	85 04		sta $04				sta 	temp0
.119c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.119e	85 05		sta $05				sta 	1+(temp0)
.11a0	a5 40		lda $40				lda 	esType 						; get type
.11a2	f0 15		beq $11b9			beq		_PrintInteger
.11a4	4a		lsr a				lsr 	a 							; check for floating point
.11a5	b0 08		bcs $11af			bcs 	_PrintFloat
.11a7					_PrintString:
.11a7	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.11a9	20 21 11	jsr $1121			jsr 	TOSToTemp0
.11ac	4c c7 11	jmp $11c7			jmp 	_PrintTemp0 				; print no leading space.
.11af					_PrintFloat:
.11af	a9 00		lda #$00			lda 	#0 							; stack level.
.11b1	a2 14		ldx #$14		ldx	#20
.11b3	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.11b6	4c c0 11	jmp $11c0			jmp 	_PrintSpaceTemp0
.11b9					_PrintInteger:
.11b9	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11bb	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11bd	20 2f 1c	jsr $1c2f			jsr 	MInt32ToString				; convert to text
.11c0					_PrintSpaceTemp0:
.11c0	a9 20		lda #$20			lda 	#32
.11c2	a2 04		ldx #$04		ldx	#4
.11c4	20 fa 1d	jsr $1dfa		jsr	deviceHandler
.11c7					_PrintTemp0:
.11c7	20 ee 11	jsr $11ee			jsr 	PrintString
.11ca	4c 7c 11	jmp $117c			jmp 	_PrintLoop
.11cd					_PrintNewLine:
.11cd	a2 00		ldx #$00		ldx	#0
.11cf	20 fa 1d	jsr $1dfa		jsr	deviceHandler
.11d2	4c 7b 11	jmp $117b			jmp 	_PrintLoopSkip
.11d5					_PrintTab:
.11d5	a2 06		ldx #$06		ldx	#6
.11d7	20 fa 1d	jsr $1dfa		jsr	deviceHandler
.11da	4c 7b 11	jmp $117b			jmp 	_PrintLoopSkip
.11dd					_PrintExit:
.11dd	ad f3 0a	lda $0af3			lda		lastPrintToken 				; check last token
.11e0	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11e2	f0 09		beq $11ed			beq 	_PrintExit2
.11e4	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.11e6	f0 05		beq $11ed			beq 	_PrintExit2
.11e8	a2 00		ldx #$00		ldx	#0
.11ea	20 fa 1d	jsr $1dfa		jsr	deviceHandler
.11ed					_PrintExit2:
.11ed	60		rts				rts
.11ee					PrintString:
.11ee	8a		txa				txa
.11ef	48		pha				pha
.11f0	98		tya				tya
.11f1	48		pha				pha
.11f2	a0 00		ldy #$00			ldy 	#0							; get length
.11f4	b1 04		lda ($04),y			lda 	(temp0),y
.11f6	aa		tax				tax 								; into X
.11f7	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.11f9	f0 10		beq $120b			beq 	_PSExit
.11fb	ca		dex				dex
.11fc	8a		txa				txa
.11fd	48		pha				pha
.11fe	c8		iny				iny
.11ff	b1 04		lda ($04),y			lda 	(temp0),y
.1201	a2 04		ldx #$04		ldx	#4
.1203	20 fa 1d	jsr $1dfa		jsr	deviceHandler
.1206	68		pla				pla
.1207	aa		tax				tax
.1208	4c f7 11	jmp $11f7			jmp 	_PSLoop
.120b					_PSExit:
.120b	68		pla				pla
.120c	a8		tay				tay
.120d	68		pla				pla
.120e	aa		tax				tax
.120f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1210					Command_Rem:
.1210					Command_Rem2:
.1210	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1212	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1214	d0 06		bne $121c			bne 	_CRNotString
.1216	c8		iny				iny
.1217	98		tya				tya
.1218	38		sec				sec
.1219	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.121b	a8		tay				tay
.121c					_CRNotString:
.121c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.21c8					Command_Repeat:
.21c8	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.21ca	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.21cc	20 74 1d	jsr $1d74			jsr 	RSClaim
.21cf	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.21d1	20 a0 1d	jsr $1da0			jsr 	RSSavePosition
.21d4	60		rts				rts
.21d5					Command_Until:
.21d5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.21d7	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.21d9	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.21db	f0 05		beq $21e2			beq 	_isok
.21dd	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.21df	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.21e2					_isok:
.21e2	20 6f 17	jsr $176f			jsr 	EvaluateRootInteger 		; at the bottom.
.21e5	20 00 1d	jsr $1d00			jsr 	MInt32Zero					; check if TOS zero
.21e8	d0 06		bne $21f0			bne 	_CUExit
.21ea	a9 01		lda #$01			lda 	#1
.21ec	20 b3 1d	jsr $1db3			jsr 	RSLoadPosition 				; reload the position from offset 1.
.21ef	60		rts				rts
.21f0					_CUExit:
.21f0	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.21f2	20 96 1d	jsr $1d96			jsr 	RSFree
.21f5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.121d					Command_Run:
.121d	a2 ff		ldx #$ff			ldx 	#$FF
.121f	9a		txs				txs
.1220	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.1223	20 7f 12	jsr $127f			jsr 	ResetCodeAddress
.1226	a0 03		ldy #$03			ldy 	#3
.1228					CRNextInstruction:
.1228	64 7b		stz $7b				stz 	softMemAlloc+1
.122a	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.122c	10 1c		bpl $124a			bpl 	_CRNotToken
.122e	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1230	b0 0c		bcs $123e			bcs 	_CRExecute
.1232	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1234	b0 56		bcs $128c			bcs 	Unimplemented
.1236	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1238	b0 04		bcs $123e			bcs 	_CRExecute
.123a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.123c	b0 16		bcs $1254			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.123e					_CRExecute:
.123e	c8		iny				iny 								; consume it.
.123f	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1240	aa		tax				tax
.1241	20 47 12	jsr $1247			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1244	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.1247					_CRRunRoutine:
.1247	7c 96 12	jmp ($1296,x)			jmp 	(Group0Vectors,x)
.124a					_CRNotToken:
.124a	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.124c	b0 3e		bcs $128c			bcs 	Unimplemented
.124e					_CRDefaultLet:
.124e	20 b5 10	jsr $10b5			jsr 	CommandLet 					; do the default, LET
.1251	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.1254					_CRCheckIndirect:
.1254	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1256	f0 f6		beq $124e			beq 	_CRDefaultLet
.1258	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.125a	f0 f2		beq $124e			beq 	_CRDefaultLet
.125c	d0 2e		bne $128c			bne 	Unimplemented
.125e					CommandShift1:
.125e	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1260	10 2a		bpl $128c			bpl 	Unimplemented 				; we have an error as this should not happen.
.1262	0a		asl a				asl 	a 							; double into X
.1263	aa		tax				tax
.1264	c8		iny				iny 								; advance over it.
.1265	20 6b 12	jsr $126b			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1268	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.126b					_RunIt:
.126b	7c 42 13	jmp ($1342,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.126e					CommandShift2:
.126e	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1270	10 1a		bpl $128c			bpl 	Unimplemented 				; we have an error as this should not happen.
.1272	0a		asl a				asl 	a 							; double into X
.1273	aa		tax				tax
.1274	c8		iny				iny 								; advance over it.
.1275	20 7b 12	jsr $127b			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1278	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.127b					_RunIt:
.127b	7c 56 13	jmp ($1356,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.127e					CommandColon:
.127e	60		rts				rts
.127f					ResetCodeAddress:
.127f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1282	85 02		sta $02				sta 	codePtr
.1284	ad c9 0a	lda $0ac9			lda 	basePage+1
.1287	85 03		sta $03				sta 	codePtr+1
.1289	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.128b	60		rts				rts
.128c					Unimplemented:
.128c	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.128e	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1291					TKErr01:
.1291					TKErr02:
.1291					TKErr03:
.1291					TKErr04:
.1291					TKErr05:
.1291					TKErr06:
.1291					TKErr07:
.1291					TKErr08:
.1291	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1293	20 07 1e	jsr $1e07			jsr 	ErrorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1296					Group0Vectors:
>1296	6c 13					.word	AdvanceNextLine          ; $80 [[eol]]
>1298	5e 12					.word	CommandShift1            ; $81 [[sh1]]
>129a	6e 12					.word	CommandShift2            ; $82 [[sh2]]
>129c	8c 12					.word	Unimplemented            ; $83 [[sh3]]
>129e	8c 12					.word	Unimplemented            ; $84 [[fpc]]
>12a0	91 12					.word	TKErr08                  ; $85 [[str]]
>12a2	bf 14					.word	AndHandler               ; $86 and
>12a4	ac 14					.word	OrHandler                ; $87 or
>12a6	99 14					.word	XorHandler               ; $88 xor
>12a8	e1 15					.word	CompareGreaterEq         ; $89 >=
>12aa	eb 15					.word	CompareLessEq            ; $8a <=
>12ac	cd 15					.word	CompareGreater           ; $8b >
>12ae	c3 15					.word	CompareLess              ; $8c <
>12b0	b9 15					.word	CompareEquals            ; $8d =
>12b2	d7 15					.word	CompareNotEquals         ; $8e <>
>12b4	2a 14					.word	AddHandler               ; $8f +
>12b6	4d 14					.word	SubHandler               ; $90 -
>12b8	e5 14					.word	ShrHandler               ; $91 >>
>12ba	d2 14					.word	ShlHandler               ; $92 <<
>12bc	60 14					.word	MulHandler               ; $93 *
>12be	73 14					.word	DivHandler               ; $94 /
>12c0	86 14					.word	ModHandler               ; $95 mod
>12c2	1e 15					.word	PowerHandler             ; $96 ^
>12c4	f8 14					.word	WordRefHandler           ; $97 !
>12c6	0b 15					.word	ByteRefHandler           ; $98 ?
>12c8	c8 21					.word	Command_Repeat           ; $99 repeat
>12ca	f6 21					.word	Command_While            ; $9a while
>12cc	b9 20					.word	Command_FOR              ; $9b for
>12ce	79 10					.word	CommandIf                ; $9c if
>12d0	91 12					.word	TKErr04                  ; $9d defproc
>12d2	d5 21					.word	Command_Until            ; $9e until
>12d4	19 22					.word	Command_Wend             ; $9f wend
>12d6	1a 21					.word	Command_NEXT             ; $a0 next
>12d8	91 12					.word	TKErr06                  ; $a1 then
>12da	b4 10					.word	Command_ENDIF            ; $a2 endif
>12dc	8c 12					.word	Unimplemented            ; $a3 endproc
>12de	28 17					.word	UnaryParenthesis         ; $a4 (
>12e0	fd 17					.word	UnaryLen                 ; $a5 len(
>12e2	41 18					.word	UnarySgn                 ; $a6 sgn(
>12e4	2a 18					.word	UnaryAbs                 ; $a7 abs(
>12e6	9a 18					.word	Unary_Random             ; $a8 random(
>12e8	e4 18					.word	Unary_Page               ; $a9 page
>12ea	d5 1c					.word	MInt32True               ; $aa true
>12ec	d9 1c					.word	MInt32False              ; $ab false
>12ee	af 18					.word	Unary_Min                ; $ac min(
>12f0	b3 18					.word	Unary_Max                ; $ad max(
>12f2	9e 19					.word	UnarySys                 ; $ae sys(
>12f4	62 19					.word	UnaryTimer               ; $af timer(
>12f6	8c 12					.word	Unimplemented            ; $b0 event(
>12f8	8a 19					.word	UnaryGet                 ; $b1 get(
>12fa	7a 19					.word	UnaryInkey               ; $b2 inkey(
>12fc	31 19					.word	UnaryAlloc               ; $b3 alloc(
>12fe	c6 19					.word	ExecChr                  ; $b4 chr$(
>1300	da 19					.word	ExecLeft                 ; $b5 left$(
>1302	f7 19					.word	ExecMid                  ; $b6 mid$(
>1304	1f 1a					.word	ExecRight                ; $b7 right$(
>1306	8c 12					.word	Unimplemented            ; $b8 str$(
>1308	8c 12					.word	Unimplemented            ; $b9 val(
>130a	58 18					.word	UnaryPeek                ; $ba peek(
>130c	5e 18					.word	UnaryDeek                ; $bb deek(
>130e	64 18					.word	UnaryLeek                ; $bc leek(
>1310	1b 18					.word	UnaryAsc                 ; $bd asc(
>1312	0f 19					.word	UnaryIntToFloat          ; $be int(
>1314	22 19					.word	UnaryFloatToInt          ; $bf float(
>1316	8c 12					.word	Unimplemented            ; $c0 isval(
>1318	f2 18					.word	UnaryReference           ; $c1 @
>131a	08 19					.word	UnaryComplement          ; $c2 ~
>131c	05 19					.word	UnaryHexMarker           ; $c3 &
>131e	91 12					.word	TKErr01                  ; $c4 )
>1320	7e 12					.word	CommandColon             ; $c5 :
>1322	91 12					.word	TKErr02                  ; $c6 ,
>1324	91 12					.word	TKErr03                  ; $c7 ;
>1326	10 12					.word	Command_Rem2             ; $c8 '
>1328	91 12					.word	TKErr07                  ; $c9 to
>132a	91 12					.word	TKErr05                  ; $ca step
>132c	8c 12					.word	Unimplemented            ; $cb proc
>132e	8c 12					.word	Unimplemented            ; $cc local
>1330	8c 12					.word	Unimplemented            ; $cd dim
>1332	10 12					.word	Command_Rem              ; $ce rem
>1334	b5 10					.word	CommandLet               ; $cf let
>1336	8c 12					.word	Unimplemented            ; $d0 input
>1338	ae 10					.word	Command_ELSE             ; $d1 else
>133a	dd 13					.word	Command_VDU              ; $d2 vdu
>133c	75 11					.word	Command_Print            ; $d3 print
>133e	ab 13					.word	CommandGOTO              ; $d4 goto
>1340	80 13					.word	CommandGOSUB             ; $d5 gosub
>1342	93 13					.word	CommandRETURN            ; $d6 return
>1344	8c 12					.word	Unimplemented            ; $d7 data
>1346	1a 10					.word	Command_Assert           ; $d8 assert
>1348	38 11					.word	Command_Poke             ; $d9 poke
>134a	3c 11					.word	Command_Doke             ; $da doke
>134c	40 11					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.134e					Group1Vectors:
>134e	28 10					.word	CommandClear             ; $86 clear
>1350	8c 12					.word	Unimplemented            ; $87 load
>1352	8c 12					.word	Unimplemented            ; $88 save
>1354	8c 12					.word	Unimplemented            ; $89 list
>1356	2a 11					.word	Command_New              ; $8a new
>1358	1d 12					.word	Command_Run              ; $8b run
>135a	8c 12					.word	Unimplemented            ; $8c read
>135c	8c 12					.word	Unimplemented            ; $8d restore
>135e	69 13					.word	CommandEnd               ; $8e end
>1360	64 13					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors2.inc

.1362					Group2Vectors:
>1362	8c 12					.word	Unimplemented            ; $86 vpoke

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1364					CommandStop:
.1364	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1366	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1369					CommandEnd:
.1369	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.136c					AdvanceNextLine:
.136c	a0 00		ldy #$00			ldy 	#0 							; get offset
.136e	b1 02		lda ($02),y			lda 	(codePtr),y
.1370	18		clc				clc 								; add to codePtr
.1371	65 02		adc $02				adc 	codePtr
.1373	85 02		sta $02				sta 	codePtr
.1375	90 02		bcc $1379			bcc 	_ANLNoCarry
.1377	e6 03		inc $03				inc 	codePtr+1
.1379					_ANLNoCarry:
.1379	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.137b	f0 ec		beq $1369			beq 	CommandEnd 					; execute END
.137d	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.137f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1380					CommandGOSUB:
.1380	20 6f 17	jsr $176f			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1383	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1385	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1387	20 74 1d	jsr $1d74			jsr 	RSClaim
.138a	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.138c	20 a0 1d	jsr $1da0			jsr 	RSSavePosition
.138f	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1391	f0 1b		beq $13ae			beq 	GotoTOS 					; and do a GOTO there.
.1393					CommandRETURN:
.1393	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1395	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1397	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1399	f0 05		beq $13a0			beq 	_isok
.139b	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.139d	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.13a0					_isok:
.13a0	a9 01		lda #$01			lda 	#1
.13a2	20 b3 1d	jsr $1db3			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13a5	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13a7	20 96 1d	jsr $1d96			jsr 	RSFree
.13aa	60		rts				rts
.13ab					CommandGOTO:
.13ab	20 6f 17	jsr $176f			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.13ae					GotoTOS:
.13ae	20 7f 12	jsr $127f			jsr 	ResetCodeAddress 			; simple search.
.13b1					_GotoSearch:
.13b1	a0 00		ldy #$00			ldy 	#0 							; get offset
.13b3	b1 02		lda ($02),y			lda 	(codePtr),y
.13b5	f0 21		beq $13d8			beq 	_GotoError 					; not found.
.13b7	c8		iny				iny									; check LSB match
.13b8	b1 02		lda ($02),y			lda 	(codePtr),y
.13ba	d5 48		cmp $48,x			cmp 	esInt0,x
.13bc	d0 07		bne $13c5			bne 	_GotoNext
.13be	c8		iny				iny
.13bf	b1 02		lda ($02),y			lda 	(codePtr),y
.13c1	d5 50		cmp $50,x			cmp 	esInt1,x
.13c3	f0 10		beq $13d5			beq 	_GotoFound
.13c5					_GotoNext:
.13c5	a0 00		ldy #$00			ldy 	#0 							; go next line
.13c7	b1 02		lda ($02),y			lda 	(codePtr),y
.13c9	18		clc				clc
.13ca	65 02		adc $02				adc 	codePtr
.13cc	85 02		sta $02				sta 	codePtr
.13ce	90 e1		bcc $13b1			bcc 	_GotoSearch
.13d0	e6 03		inc $03				inc 	codePtr+1
.13d2	4c b1 13	jmp $13b1			jmp 	_GotoSearch
.13d5					_GotoFound:
.13d5	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.13d7	60		rts				rts
.13d8					_GotoError:
.13d8	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.13da	20 07 1e	jsr $1e07			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.13dd					Command_VDU:
.13dd	20 6f 17	jsr $176f			jsr 	EvaluateRootInteger 			; get integer at root.
.13e0	a5 48		lda $48				lda 	esInt0
.13e2	a2 04		ldx #$04		ldx	#4
.13e4	20 fa 1d	jsr $1dfa		jsr	deviceHandler
.13e7					_CVNext:
.13e7	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.13e9	c8		iny				iny
.13ea	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.13ec	f0 ef		beq $13dd			beq 	Command_VDU
.13ee	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.13f0	d0 0a		bne $13fc			bne 	_CVExit
.13f2	a5 50		lda $50				lda 	esInt1
.13f4	a2 04		ldx #$04		ldx	#4
.13f6	20 fa 1d	jsr $1dfa		jsr	deviceHandler
.13f9	4c e7 13	jmp $13e7			jmp 	_CVNext
.13fc	88		dey		_CVExit:dey
.13fd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.21f6					Command_While:
.21f6	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.21f8	a2 04		ldx #$04			ldx 	#4
.21fa	20 74 1d	jsr $1d74			jsr 	RSClaim 					; create on stack.
.21fd	88		dey				dey
.21fe	a9 01		lda #$01			lda 	#1
.2200	20 a0 1d	jsr $1da0			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2203	c8		iny				iny
.2204	20 71 17	jsr $1771			jsr 	EvaluateInteger				; get the conditional
.2207	20 00 1d	jsr $1d00			jsr 	MInt32Zero 	 				; if zero, skip forward.
.220a	f0 01		beq $220d			beq 	_CWFail
.220c	60		rts				rts
.220d					_CWFail:
.220d	a9 04		lda #$04			lda 	#4
.220f	20 96 1d	jsr $1d96			jsr 	RSFree 						; close the just opened position.
.2212	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2214	aa		tax				tax
.2215	20 31 22	jsr $2231			jsr 	ScanForward
.2218	60		rts				rts
.2219					Command_Wend:
.2219	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.221b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.221d	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.221f	f0 05		beq $2226			beq 	_isok
.2221	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2223	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.2226					_isok:
.2226	a9 01		lda #$01			lda 	#1
.2228	20 b3 1d	jsr $1db3			jsr 	RSLoadPosition				; go back until true
.222b	a9 04		lda #$04			lda 	#4
.222d	20 96 1d	jsr $1d96			jsr 	RSFree 						; close the loop
.2230	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.13fe					BinaryProcess:
.13fe	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1400	15 41		ora $41,x			ora 	esType+1,x
.1402	0a		asl a				asl 	a
.1403	30 0e		bmi $1413			bmi 	_BPStringType 				; if one is set, then string type.
.1405	18		clc				clc 								; return CC for integer
.1406	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1408	f0 08		beq $1412			beq 	_BPExit 					; if both integer then return with CC.
.140a	20 18 14	jsr $1418			jsr 	BPMakeBothFloat 			; make both float
.140d	a9 01		lda #$01			lda 	#$01 						; set result type to float
.140f	95 40		sta $40,x			sta 	esType,x
.1411	38		sec				sec 								; and return with carry set.
.1412					_BPExit:
.1412	60		rts				rts
.1413					_BPStringType:
.1413	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1415	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1418					BPMakeBothFloat:
.1418	e8		inx				inx
.1419	20 1d 14	jsr $141d			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.141c	ca		dex				dex
.141d					BPMakeFloat:
.141d	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.141f	4a		lsr a				lsr 	a
.1420	b0 07		bcs $1429			bcs 	_BPIsFloat
.1422	8a		txa				txa
.1423	a2 1a		ldx #$1a		ldx	#26
.1425	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.1428	aa		tax				tax
.1429					_BPIsFloat:
.1429	60		rts				rts
.142a					AddHandler:
.142a	20 fb 15	jsr $15fb			jsr 	DereferenceTwo 				; dereference top two on stack.
.142d	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.142f	35 41		and $41,x			and 	esType+1,x
.1431	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1433	d0 10		bne $1445			bne 	_AHStringConcat				; concatenate strings.
.1435	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.1438	b0 03		bcs $143d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.143a	4c c4 1b	jmp $1bc4			jmp 	MInt32Add 							; else do it as integer.
.143d					_IsFPOperation:
.143d	8a		txa				txa 								; call the relevant fp routine
.143e	a2 02		ldx #$02		ldx	#2
.1440	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.1443	aa		tax				tax
.1444	60		rts				rts
.1445					_AHStringConcat:
.1445	8a		txa				txa
.1446	a2 02		ldx #$02		ldx	#2
.1448	20 5b 1f	jsr $1f5b		jsr	stringHandler
.144b	aa		tax				tax
.144c	60		rts				rts
.144d					SubHandler:
.144d	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.1450	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.1453	b0 03		bcs $1458			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1455	4c de 1b	jmp $1bde			jmp 	MInt32Sub 							; else do it as integer.
.1458					_IsFPOperation:
.1458	8a		txa				txa 								; call the relevant fp routine
.1459	a2 10		ldx #$10		ldx	#16
.145b	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.145e	aa		tax				tax
.145f	60		rts				rts
.1460					MulHandler:
.1460	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.1463	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.1466	b0 03		bcs $146b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1468	4c f8 1b	jmp $1bf8			jmp 	MInt32Multiply 							; else do it as integer.
.146b					_IsFPOperation:
.146b	8a		txa				txa 								; call the relevant fp routine
.146c	a2 0a		ldx #$0a		ldx	#10
.146e	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.1471	aa		tax				tax
.1472	60		rts				rts
.1473					DivHandler:
.1473	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.1476	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.1479	b0 03		bcs $147e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.147b	4c d2 1a	jmp $1ad2			jmp 	MInt32SDivide 							; else do it as integer.
.147e					_IsFPOperation:
.147e	8a		txa				txa 								; call the relevant fp routine
.147f	a2 06		ldx #$06		ldx	#6
.1481	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.1484	aa		tax				tax
.1485	60		rts				rts
.1486					ModHandler:
.1486	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.1489	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.148c	b0 03		bcs $1491			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.148e	4c 50 1b	jmp $1b50			jmp 	MInt32Modulus 							; else do it as integer.
.1491					_IsFPOperation:
.1491	8a		txa				txa 								; call the relevant fp routine
.1492	a2 08		ldx #$08		ldx	#8
.1494	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.1497	aa		tax				tax
.1498	60		rts				rts
.1499					XorHandler:
.1499	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.149c	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.149f	b0 03		bcs $14a4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14a1	4c 84 1a	jmp $1a84			jmp 	MInt32Xor 							; else do it as integer.
.14a4					_IsFPOperation:
.14a4	8a		txa				txa 								; call the relevant fp routine
.14a5	a2 08		ldx #$08		ldx	#8
.14a7	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.14aa	aa		tax				tax
.14ab	60		rts				rts
.14ac					OrHandler:
.14ac	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.14af	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.14b2	b0 03		bcs $14b7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14b4	4c 6b 1a	jmp $1a6b			jmp 	MInt32Or 							; else do it as integer.
.14b7					_IsFPOperation:
.14b7	8a		txa				txa 								; call the relevant fp routine
.14b8	a2 08		ldx #$08		ldx	#8
.14ba	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.14bd	aa		tax				tax
.14be	60		rts				rts
.14bf					AndHandler:
.14bf	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.14c2	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.14c5	b0 03		bcs $14ca			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14c7	4c 52 1a	jmp $1a52			jmp 	MInt32And 							; else do it as integer.
.14ca					_IsFPOperation:
.14ca	8a		txa				txa 								; call the relevant fp routine
.14cb	a2 08		ldx #$08		ldx	#8
.14cd	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.14d0	aa		tax				tax
.14d1	60		rts				rts
.14d2					ShlHandler:
.14d2	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.14d5	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.14d8	b0 03		bcs $14dd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14da	4c 53 15	jmp $1553			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.14dd					_IsFPOperation:
.14dd	8a		txa				txa 								; call the relevant fp routine
.14de	a2 08		ldx #$08		ldx	#8
.14e0	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.14e3	aa		tax				tax
.14e4	60		rts				rts
.14e5					ShrHandler:
.14e5	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.14e8	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.14eb	b0 03		bcs $14f0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14ed	4c 56 15	jmp $1556			jmp 	MInt32ShiftRightX 							; else do it as integer.
.14f0					_IsFPOperation:
.14f0	8a		txa				txa 								; call the relevant fp routine
.14f1	a2 08		ldx #$08		ldx	#8
.14f3	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.14f6	aa		tax				tax
.14f7	60		rts				rts
.14f8					WordRefHandler:
.14f8	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.14fb	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.14fe	b0 03		bcs $1503			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1500	4c 45 15	jmp $1545			jmp 	MInt32WordIndirect 							; else do it as integer.
.1503					_IsFPOperation:
.1503	8a		txa				txa 								; call the relevant fp routine
.1504	a2 08		ldx #$08		ldx	#8
.1506	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.1509	aa		tax				tax
.150a	60		rts				rts
.150b					ByteRefHandler:
.150b	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.150e	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.1511	b0 03		bcs $1516			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1513	4c 49 15	jmp $1549			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1516					_IsFPOperation:
.1516	8a		txa				txa 								; call the relevant fp routine
.1517	a2 08		ldx #$08		ldx	#8
.1519	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.151c	aa		tax				tax
.151d	60		rts				rts
.151e					PowerHandler:
.151e	20 fb 15	jsr $15fb			jsr 	DereferenceTwo
.1521	20 fe 13	jsr $13fe			jsr 	BinaryProcess 				; check to see if either is float
.1524	b0 03		bcs $1529			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1526	4c 31 15	jmp $1531			jmp 	PowerInteger 							; else do it as integer.
.1529					_IsFPOperation:
.1529	8a		txa				txa 								; call the relevant fp routine
.152a	a2 16		ldx #$16		ldx	#22
.152c	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.152f	aa		tax				tax
.1530	60		rts				rts
.1531					PowerInteger:
.1531	20 18 14	jsr $1418			jsr 	BPMakeBothFloat				; make them float.
.1534	8a		txa				txa
.1535	a2 16		ldx #$16		ldx	#22
.1537	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.153a	a2 12		ldx #$12		ldx	#18
.153c	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.153f	aa		tax				tax
.1540	a9 00		lda #$00			lda 	#0 							; make type integer
.1542	95 40		sta $40,x			sta 	esType,x
.1544	60		rts				rts
.1545					Mint32WordIndirect:
.1545	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1547	d0 02		bne $154b			bne 	Min32Indirect
.1549					Mint32ByteIndirect:
.1549	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.154b					Min32Indirect:
.154b	48		pha				pha 								; save the indirection
.154c	20 c4 1b	jsr $1bc4			jsr 	MInt32Add 					; add a!b a?b
.154f	68		pla				pla 								; and set the type to reference.
.1550	95 40		sta $40,x			sta 	esType,x
.1552	60		rts				rts
.1553					Mint32ShiftLeftX:
.1553	18		clc				clc
.1554	90 01		bcc $1557			bcc 	Mint32Shift
.1556					Mint32ShiftRightX:
.1556	38		sec				sec
.1557					Mint32Shift:
.1557	08		php				php 								; save carry flag on stack.
.1558	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.155a	15 59		ora $59,x			ora 	esInt2+1,x
.155c	15 61		ora $61,x			ora 	esInt3+1,x
.155e	d0 1e		bne $157e			bne 	_MShiftZero
.1560	b5 49		lda $49,x			lda 	esInt0+1,x
.1562	c9 20		cmp #$20			cmp 	#32
.1564	b0 18		bcs $157e			bcs 	_MShiftZero
.1566					_MShiftLoop:
.1566	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1568	f0 12		beq $157c			beq 	_MShiftExit
.156a	d6 49		dec $49,x			dec 	esInt0+1,x
.156c	28		plp				plp 								; restore and save carry
.156d	08		php				php
.156e	90 06		bcc $1576			bcc 	_MShiftLeft
.1570	20 f7 1c	jsr $1cf7			jsr 	Mint32ShiftRight
.1573	4c 66 15	jmp $1566			jmp 	_MShiftLoop
.1576					_MShiftLeft:
.1576	20 ee 1c	jsr $1cee			jsr 	Mint32ShiftLeft
.1579	4c 66 15	jmp $1566			jmp 	_MShiftLoop
.157c					_MShiftExit:
.157c	28		plp				plp	 								; throw saved carry and exit
.157d	60		rts				rts
.157e					_MShiftZero:
.157e	4c d9 1c	jmp $1cd9			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.1581					PerformComparison:
.1581	20 fb 15	jsr $15fb			jsr 	DereferenceTwo 				; make both values.
.1584	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1586	35 41		and $41,x			and 	esType+1,x
.1588	0a		asl a				asl 	a
.1589	30 1d		bmi $15a8			bmi 	_PCIsString
.158b	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.158d	15 41		ora $41,x			ora 	esType+1,x
.158f	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1590	30 22		bmi $15b4			bmi 	_PCError
.1592	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1594	f0 0f		beq $15a5			beq 	_PCIsInteger 				; if not two integers
.1596	20 18 14	jsr $1418			jsr 	BPMakeBothFloat 			; make both float
.1599	8a		txa				txa
.159a	a2 04		ldx #$04		ldx	#4
.159c	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.159f	86 0a		stx $0a				stx 	tempShort 					; save result
.15a1	aa		tax				tax
.15a2	a5 0a		lda $0a				lda 	tempShort
.15a4	60		rts				rts
.15a5					_PCIsInteger:
.15a5	4c 9d 1a	jmp $1a9d			jmp 	MInt32Compare
.15a8					_PCIsString:
.15a8	8a		txa				txa 								; A has SP
.15a9	a2 04		ldx #$04		ldx	#4
.15ab	20 5b 1f	jsr $1f5b		jsr	stringHandler
.15ae	86 0a		stx $0a				stx 	tempShort 					; save result
.15b0	aa		tax				tax 								; put SP back in X and get result.
.15b1	a5 0a		lda $0a				lda 	tempShort
.15b3	60		rts				rts
.15b4					_PCError:
.15b4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.15b6	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.15b9					CompareEquals:
.15b9	20 81 15	jsr $1581			jsr 	PerformComparison
.15bc	c9 00		cmp #$00			cmp 	#$00
.15be	f0 35		beq $15f5			beq  	CompareTrue
.15c0	4c f8 15	jmp $15f8			jmp 	CompareFalse
.15c3					CompareLess:
.15c3	20 81 15	jsr $1581			jsr 	PerformComparison
.15c6	c9 ff		cmp #$ff			cmp 	#$FF
.15c8	f0 2b		beq $15f5			beq  	CompareTrue
.15ca	4c f8 15	jmp $15f8			jmp 	CompareFalse
.15cd					CompareGreater:
.15cd	20 81 15	jsr $1581			jsr 	PerformComparison
.15d0	c9 01		cmp #$01			cmp 	#$01
.15d2	f0 21		beq $15f5			beq  	CompareTrue
.15d4	4c f8 15	jmp $15f8			jmp 	CompareFalse
.15d7					CompareNotEquals:
.15d7	20 81 15	jsr $1581			jsr 	PerformComparison
.15da	c9 00		cmp #$00			cmp 	#$00
.15dc	d0 17		bne $15f5			bne  	CompareTrue
.15de	4c f8 15	jmp $15f8			jmp 	CompareFalse
.15e1					CompareGreaterEq:
.15e1	20 81 15	jsr $1581			jsr 	PerformComparison
.15e4	c9 ff		cmp #$ff			cmp 	#$FF
.15e6	d0 0d		bne $15f5			bne  	CompareTrue
.15e8	4c f8 15	jmp $15f8			jmp 	CompareFalse
.15eb					CompareLessEq:
.15eb	20 81 15	jsr $1581			jsr 	PerformComparison
.15ee	c9 01		cmp #$01			cmp 	#$01
.15f0	d0 03		bne $15f5			bne  	CompareTrue
.15f2	4c f8 15	jmp $15f8			jmp 	CompareFalse
.15f5					CompareTrue:
.15f5	4c d5 1c	jmp $1cd5			jmp 	MInt32True
.15f8					CompareFalse:
.15f8	4c d9 1c	jmp $1cd9			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.15fb					DereferenceTwo:
.15fb	e8		inx				inx
.15fc	20 00 16	jsr $1600			jsr 	DereferenceOne
.15ff	ca		dex				dex
.1600					DereferenceOne:
.1600	b5 40		lda $40,x			lda 	esType,x
.1602	10 3d		bpl $1641			bpl 	_DRNotReference 			; is it a reference ?
.1604	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1605	b0 3b		bcs $1642			bcs 	_DRFloatDeReference
.1607	98		tya				tya
.1608	48		pha				pha
.1609	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.160b	85 04		sta $04				sta 	temp0
.160d	b5 50		lda $50,x			lda 	esInt1,x
.160f	85 05		sta $05				sta 	temp0+1
.1611	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1613	95 50		sta $50,x			sta 	esInt1,x
.1615	95 58		sta $58,x			sta 	esInt2,x
.1617	95 60		sta $60,x			sta 	esInt3,x
.1619	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.161b	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.161d	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.161e	30 0d		bmi $162d			bmi 	_DeRefString 				; string, 2 bytes only
.1620	d0 11		bne $1633			bne 	_DeRefByte 					; byte 1 byte only
.1622					_DeRefLong:
.1622	a0 03		ldy #$03			ldy 	#3
.1624	b1 04		lda ($04),y			lda 	(temp0),y
.1626	95 60		sta $60,x			sta 	esInt3,x
.1628	88		dey				dey
.1629	b1 04		lda ($04),y			lda 	(temp0),y
.162b	95 58		sta $58,x			sta 	esInt2,x
.162d					_DeRefString:
.162d	a0 01		ldy #$01			ldy 	#1
.162f	b1 04		lda ($04),y			lda 	(temp0),y
.1631	95 50		sta $50,x			sta 	esInt1,x
.1633					_DeRefByte:
.1633	a0 00		ldy #$00			ldy 	#0
.1635	b1 04		lda ($04),y			lda 	(temp0),y
.1637	95 48		sta $48,x			sta 	esInt0,x
.1639	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.163b	29 40		and #$40			and 	#$40
.163d	95 40		sta $40,x			sta 	esType,x
.163f	68		pla				pla
.1640	a8		tay				tay
.1641					_DRNotReference
.1641	60		rts				rts
.1642					_DRFloatDereference:
.1642	8a		txa				txa
.1643							floatingpoint_deref
.1643	aa		tax				tax
.1644	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1646	95 40		sta $40,x			sta 	esType,x
.1648	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1649					EvaluateLevel:
.1649	48		pha				pha 								; save precedence level.
.164a	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.164c	95 48		sta $48,x			sta 	esInt0,x
.164e	95 50		sta $50,x			sta 	esInt1,x
.1650	95 58		sta $58,x			sta 	esInt2,x
.1652	95 60		sta $60,x			sta 	esInt3,x
.1654	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1656	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1658	30 21		bmi $167b			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.165a	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.165b	30 0a		bmi $1667			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.165d	8a		txa				txa 								; stack level in X
.165e	a2 00		ldx #$00		ldx	#0
.1660	20 b2 20	jsr $20b2		jsr	variableHandler
.1663	aa		tax				tax
.1664	4c a4 16	jmp $16a4			jmp		_ELHasTerm
.1667					_ELIsConstant:
.1667	4a		lsr a				lsr 	a 							; get the value back
.1668	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.166a	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.166c					_ELCheckNext:
.166c	c8		iny				iny 								; look at next
.166d	b1 02		lda ($02),y			lda 	(codePtr),y
.166f	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1671	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1673	b0 2f		bcs $16a4			bcs 	_ELHasTerm 					; done getting the constant.
.1675	20 b1 17	jsr $17b1			jsr 	ELShiftByteIn 				; shift byte into position.
.1678	4c 6c 16	jmp $166c			jmp 	_ELCheckNext
.167b					_ELIsToken:
.167b	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.167d	f0 0f		beq $168e			beq 	_ELIsString
.167f	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1681	d0 5f		bne $16e2			bne 	_ELCheckUnary
.1683	8a		txa				txa 								; put X into A
.1684	c8		iny				iny 								; skip over the float marker
.1685	a2 18		ldx #$18		ldx	#24
.1687	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.168a	aa		tax				tax 								; restore X
.168b	4c a4 16	jmp $16a4			jmp 	_ELHasTerm
.168e					_ELIsString:
.168e	98		tya				tya 								; address of string is codePtr+y+1
.168f	38		sec				sec
.1690	65 02		adc $02				adc 	codePtr
.1692	95 48		sta $48,x			sta 	esInt0,x
.1694	a5 03		lda $03				lda 	codePtr+1
.1696	69 00		adc #$00			adc 	#0
.1698	95 50		sta $50,x			sta 	esInt1,x
.169a	a9 40		lda #$40			lda 	#$40 						; set type to string value
.169c	95 40		sta $40,x			sta 	esType,x
.169e	c8		iny				iny 								; skip over string.
.169f	98		tya				tya
.16a0	38		sec				sec									; +1 for the length itself.
.16a1	71 02		adc ($02),y			adc 	(codePtr),y
.16a3	a8		tay				tay 								; and fall through to term loop code.
.16a4					_ELHasTerm:
.16a4	b1 02		lda ($02),y			lda 	(codePtr),y
.16a6	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.16a8	90 04		bcc $16ae			bcc 	_ELPopExit
.16aa	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.16ac	90 02		bcc $16b0			bcc 	_ELHasBinaryTerm
.16ae					_ELPopExit:
.16ae	68		pla				pla
.16af					_ELExit:
.16af	60		rts				rts
.16b0					_ELHasBinaryTerm:
.16b0	84 0a		sty $0a				sty 	tempShort 					; save position
.16b2	a8		tay				tay 								; use token as an index and get the precedence.
.16b3	b9 59 17	lda $1759,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.16b6	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.16b8	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.16ba	68		pla				pla 								; restore current level.
.16bb	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.16bd	b0 f0		bcs $16af			bcs 	_ELExit
.16bf	48		pha				pha 								; save current level back on the stack.
.16c0	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.16c2	48		pha				pha
.16c3	c8		iny				iny
.16c4	e8		inx				inx 								; calculate the RHS at the operator precedence.
.16c5	a5 0a		lda $0a				lda 	tempShort
.16c7	20 49 16	jsr $1649			jsr 	EvaluateLevel
.16ca	ca		dex				dex
.16cb	68		pla				pla 								; get the operator back out.
.16cc					_ELExecuteA:
.16cc	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.16ce	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.16cf	aa		tax				tax
.16d0	bd 96 12	lda $1296,x			lda 	Group0Vectors,x
.16d3	85 04		sta $04				sta 	temp0
.16d5	bd 97 12	lda $1297,x			lda 	Group0Vectors+1,x
.16d8	85 05		sta $05				sta 	temp0+1
.16da	a6 0a		ldx $0a				ldx 	tempShort
.16dc	20 25 17	jsr $1725			jsr 	_ELCallTemp0
.16df	4c a4 16	jmp $16a4			jmp 	_ELHasTerm 					; and loop back round.
.16e2					_ELCheckUnary:
.16e2	c8		iny				iny 								; skip over token.
.16e3	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.16e5	f0 15		beq $16fc			beq 	_ELMinus
.16e7	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.16e9	f0 28		beq $1713			beq 	_ELIndirect
.16eb	c9 98		cmp #$98			cmp 	#TKW_QMARK
.16ed	f0 24		beq $1713			beq 	_ELIndirect
.16ef	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.16f1	90 04		bcc $16f7			bcc 	_ELUSyntax
.16f3	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.16f5	90 d5		bcc $16cc			bcc 	_ELExecuteA 				; if so do that token.
.16f7					_ELUSyntax:
.16f7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.16f9	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.16fc					_ELMinus:
.16fc	20 3a 17	jsr $173a			jsr 	EvaluateNumericTerm 		; get a number to negate.
.16ff	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1701	f0 0a		beq $170d			beq 	_ELMinusInteger
.1703	8a		txa				txa
.1704	a2 0c		ldx #$0c		ldx	#12
.1706	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.1709	aa		tax				tax
.170a	4c a4 16	jmp $16a4			jmp 	_ELHasTerm
.170d					_ELMinusInteger:
.170d	20 93 1c	jsr $1c93			jsr 	MInt32Negate 				; do int negate
.1710	4c a4 16	jmp $16a4			jmp 	_ELHasTerm
.1713					_ELIndirect:
.1713	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1714	20 43 17	jsr $1743			jsr 	EvaluateIntegerTerm 		; integer address
.1717	68		pla				pla
.1718	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.171a	f0 02		beq $171e			beq 	_ELHaveModifier
.171c	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.171e					_ELHaveModifier:
.171e	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1720	95 40		sta $40,x			sta 	esType,x
.1722	4c a4 16	jmp $16a4			jmp 	_ELHasTerm
.1725					_ELCallTemp0:
.1725	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1728					UnaryParenthesis:
.1728	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.172a	20 49 16	jsr $1649			jsr 	EvaluateLevel
.172d	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen 			; check for )
.1730	60		rts				rts
.1731					EvaluateTerm:
.1731	a9 0f		lda #$0f			lda 	#15
.1733	20 49 16	jsr $1649			jsr 	EvaluateLevel
.1736	20 00 16	jsr $1600			jsr 	DereferenceOne
.1739	60		rts				rts
.173a					EvaluateNumericTerm:
.173a	20 31 17	jsr $1731			jsr 	EvaluateTerm
.173d	b5 40		lda $40,x			lda 	esType,x
.173f	0a		asl a				asl 	a 							; see if it's a string.
.1740	30 09		bmi $174b			bmi 	ENTType
.1742	60		rts				rts
.1743					EvaluateIntegerTerm:
.1743	20 31 17	jsr $1731			jsr 	EvaluateTerm
.1746	b5 40		lda $40,x			lda 	esType,x
.1748	d0 01		bne $174b			bne 	ENTType
.174a	60		rts				rts
.174b					ENTType:
.174b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.174d	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1750					EvaluateRoot:
.1750	a2 00		ldx #$00			ldx 	#0
.1752					Evaluate:
.1752	a9 00		lda #$00			lda 	#0
.1754	20 49 16	jsr $1649			jsr 	EvaluateLevel
.1757	20 00 16	jsr $1600			jsr 	DereferenceOne
.175a	60		rts				rts
.175b					EvaluateNumeric:
.175b	20 52 17	jsr $1752			jsr 	Evaluate
.175e	b5 40		lda $40,x			lda 	esType,x
.1760	0a		asl a				asl 	a 							; see if it's a string.
.1761	30 e8		bmi $174b			bmi 	ENTType
.1763	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1764	4a		lsr a				lsr 	a
.1765	60		rts				rts
.1766					EvaluateString:
.1766	20 52 17	jsr $1752			jsr 	Evaluate
.1769	b5 40		lda $40,x			lda 	esType,x
.176b	0a		asl a				asl 	a 							; see if it's a string.
.176c	10 dd		bpl $174b			bpl 	ENTType
.176e	60		rts				rts
.176f					EvaluateRootInteger:
.176f	a2 00		ldx #$00			ldx 	#0
.1771					EvaluateInteger:
.1771	20 52 17	jsr $1752			jsr 	Evaluate
.1774	b5 40		lda $40,x			lda 	esType,x
.1776	d0 d3		bne $174b			bne 	ENTType
.1778	60		rts				rts
.1779					EvaluateSmallInteger:
.1779	20 71 17	jsr $1771			jsr 	EvaluateInteger
.177c	b5 50		lda $50,x			lda 	esInt1,x
.177e	15 58		ora $58,x			ora 	esInt2,x
.1780	15 60		ora $60,x			ora 	esInt3,x
.1782	d0 03		bne $1787			bne 	_ESIValue
.1784	b5 48		lda $48,x			lda 	esInt0,x
.1786	60		rts				rts
.1787					_ESIValue:
.1787	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1789	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.178c					LinkEvaluate:
.178c	aa		tax				tax
.178d	20 52 17	jsr $1752			jsr 	Evaluate
.1790	8a		txa				txa
.1791	60		rts				rts
.1792					LinkEvaluateInteger:
.1792	aa		tax				tax
.1793	20 71 17	jsr $1771			jsr 	EvaluateInteger
.1796	8a		txa				txa
.1797	60		rts				rts
.1798					LinkEvaluateSmallInt:
.1798	aa		tax				tax
.1799	20 79 17	jsr $1779			jsr 	EvaluateSmallInteger
.179c	8a		txa				txa
.179d	60		rts				rts
.179e					EvaluateReference:
.179e	ad f0 17	lda $17f0			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.17a1	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.17a2	e9 01		sbc #$01			sbc 	#1
.17a4	20 49 16	jsr $1649			jsr 	EvaluateLevel
.17a7	b5 40		lda $40,x			lda 	esType,x
.17a9	10 01		bpl $17ac			bpl 	_ERFail
.17ab	60		rts				rts
.17ac					_ERFail:
.17ac	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.17ae	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.17b1					ELShiftByteIn:
.17b1	48		pha				pha 								; save bits to shift in.
.17b2	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.17b4	48		pha				pha
.17b5	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.17b7	95 60		sta $60,x			sta 	esInt3,x
.17b9	b5 50		lda $50,x			lda 	esInt1,x
.17bb	95 58		sta $58,x			sta 	esInt2,x
.17bd	b5 48		lda $48,x			lda 	esInt0,x
.17bf	95 50		sta $50,x			sta 	esInt1,x
.17c1	a9 00		lda #$00			lda 	#0
.17c3	95 48		sta $48,x			sta 	esInt0,x
.17c5	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.17c6	29 03		and #$03			and 	#3 							; only want lower 2 bits
.17c8	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.17ca					_ELShiftLoop:
.17ca	4a		lsr a				lsr 	a
.17cb	76 60		ror $60,x			ror 	esInt3,x
.17cd	76 58		ror $58,x			ror 	esInt2,x
.17cf	76 50		ror $50,x			ror 	esInt1,x
.17d1	76 48		ror $48,x			ror 	esInt0,x
.17d3	c9 01		cmp #$01			cmp 	#1
.17d5	d0 f3		bne $17ca			bne 	_ELShiftLoop
.17d7	68		pla				pla 								; get original 6 bit value and OR in.
.17d8	29 3f		and #$3f			and 	#$3F
.17da	15 48		ora $48,x			ora 	esInt0,x
.17dc	95 48		sta $48,x			sta 	esInt0,x
.17de	60		rts				rts
.17df					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>17df	01					.byte	$01			; $86 and
>17e0	01					.byte	$01			; $87 or
>17e1	01					.byte	$01			; $88 xor
>17e2	02					.byte	$02			; $89 >=
>17e3	02					.byte	$02			; $8a <=
>17e4	02					.byte	$02			; $8b >
>17e5	02					.byte	$02			; $8c <
>17e6	02					.byte	$02			; $8d =
>17e7	02					.byte	$02			; $8e <>
>17e8	03					.byte	$03			; $8f +
>17e9	03					.byte	$03			; $90 -
>17ea	04					.byte	$04			; $91 >>
>17eb	04					.byte	$04			; $92 <<
>17ec	04					.byte	$04			; $93 *
>17ed	04					.byte	$04			; $94 /
>17ee	04					.byte	$04			; $95 mod
>17ef	05					.byte	$05			; $96 ^
>17f0	06					.byte	$06			; $97 !
>17f1	06					.byte	$06			; $98 ?
>17f2	82					.byte	$82			; $99 repeat
>17f3	82					.byte	$82			; $9a while
>17f4	82					.byte	$82			; $9b for
>17f5	82					.byte	$82			; $9c if
>17f6	82					.byte	$82			; $9d defproc
>17f7	80					.byte	$80			; $9e until
>17f8	80					.byte	$80			; $9f wend
>17f9	80					.byte	$80			; $a0 next
>17fa	80					.byte	$80			; $a1 then
>17fb	80					.byte	$80			; $a2 endif
>17fc	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.17fd					UnaryLen:
.17fd	20 0b 18	jsr $180b			jsr 	ULStart
.1800					ULFinish:
.1800	b1 04		lda ($04),y			lda 	(temp0),y
.1802	a4 0a		ldy $0a				ldy 	tempShort
.1804	20 e8 1c	jsr $1ce8			jsr 	MInt32Set8Bit
.1807	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen
.180a	60		rts				rts
.180b	20 66 17	jsr $1766	ULStart:jsr 	EvaluateString
.180e	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1810	85 04		sta $04				sta 	temp0
.1812	b5 50		lda $50,x			lda 	esInt1,x
.1814	85 05		sta $05				sta 	temp0+1
.1816	84 0a		sty $0a				sty 	tempShort 					; get length
.1818	a0 00		ldy #$00			ldy 	#0
.181a	60		rts				rts
.181b					UnaryAsc:
.181b	20 0b 18	jsr $180b			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.181e	b1 04		lda ($04),y			lda 	(temp0),y
.1820	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1821	c9 00		cmp #$00			cmp 	#0
.1823	d0 db		bne $1800			bne 	ULFinish
.1825	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1827	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.182a					UnaryAbs:
.182a	20 5b 17	jsr $175b			jsr 	EvaluateNumeric
.182d	b0 07		bcs $1836			bcs 	_UAFloat
.182f	20 8e 1c	jsr $1c8e			jsr 	MInt32Absolute
.1832	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen
.1835	60		rts				rts
.1836					_UAFloat:
.1836	8a		txa				txa
.1837	a2 00		ldx #$00		ldx	#0
.1839	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.183c	aa		tax				tax
.183d	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen
.1840	60		rts				rts
.1841					UnarySgn:
.1841	20 5b 17	jsr $175b			jsr 	EvaluateNumeric
.1844	b0 07		bcs $184d			bcs 	_USFloat
.1846	20 c6 1c	jsr $1cc6			jsr 	MInt32Sign
.1849	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen
.184c	60		rts				rts
.184d					_USFloat:
.184d	8a		txa				txa
.184e	a2 0e		ldx #$0e		ldx	#14
.1850	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.1853	aa		tax				tax
.1854	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen
.1857	60		rts				rts
.1858					UnaryPeek:
.1858	20 84 18	jsr $1884			jsr 	PDLCode
.185b	4c 78 18	jmp $1878			jmp 	PDLByte0
.185e					UnaryDeek:
.185e	20 84 18	jsr $1884			jsr 	PDLCode
.1861	4c 72 18	jmp $1872			jmp 	PDLByte1
.1864					UnaryLeek:
.1864	20 84 18	jsr $1884			jsr 	PDLCode
.1867	a0 03		ldy #$03			ldy 	#3
.1869	b1 04		lda ($04),y			lda 	(temp0),y
.186b	95 60		sta $60,x			sta 	esInt3,x
.186d	88		dey				dey
.186e	b1 04		lda ($04),y			lda 	(temp0),y
.1870	95 58		sta $58,x			sta 	esInt2,x
.1872					PDLByte1:
.1872	a0 01		ldy #$01			ldy 	#1
.1874	b1 04		lda ($04),y			lda 	(temp0),y
.1876	95 50		sta $50,x			sta 	esInt1,x
.1878					PDLByte0:
.1878	a0 00		ldy #$00			ldy 	#0
.187a	b1 04		lda ($04),y			lda 	(temp0),y
.187c	95 48		sta $48,x			sta 	esInt0,x
.187e	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1880	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen 			; check right and return
.1883	60		rts				rts
.1884					PDLCode:
.1884	20 71 17	jsr $1771			jsr 	EvaluateInteger
.1887	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1889	85 04		sta $04				sta 	temp0
.188b	b5 50		lda $50,x			lda 	esInt1,x
.188d	85 05		sta $05				sta 	temp0+1
.188f	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1891	95 50		sta $50,x			sta 	esInt1,x
.1893	95 58		sta $58,x			sta 	esInt2,x
.1895	95 60		sta $60,x			sta 	esInt3,x
.1897	84 0a		sty $0a				sty 	tempShort 					; save Y
.1899	60		rts				rts
.189a					Unary_Random:
.189a	20 09 1d	jsr $1d09			jsr 	MInt32Random 				; generate random number.
.189d	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.189f	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.18a1	f0 08		beq $18ab			beq 	_URExit
.18a3	e8		inx				inx 								; load range 0..r-1 into +1
.18a4	20 71 17	jsr $1771			jsr 	EvaluateInteger
.18a7	ca		dex				dex
.18a8	20 50 1b	jsr $1b50			jsr 	MInt32Modulus 				; calculate random % modulus
.18ab					_URExit:
.18ab	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen 			; check right and return
.18ae	60		rts				rts
.18af					Unary_Min:
.18af	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.18b1	d0 02		bne $18b5			bne 	UnaryMBody
.18b3					Unary_Max:
.18b3	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.18b5					UnaryMBody:
.18b5	48		pha				pha 								; save comparator on stack.
.18b6	20 52 17	jsr $1752			jsr 	Evaluate 					; get the first thing to check
.18b9					_UnaryMLoop:
.18b9	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.18bb	c8		iny				iny
.18bc	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.18be	f0 09		beq $18c9			beq 	_UnaryMExit
.18c0	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.18c2	f0 07		beq $18cb			beq 	_UnaryMCompare
.18c4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18c6	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.18c9					_UnaryMExit:
.18c9	68		pla				pla 								; throw comparator and return.
.18ca	60		rts				rts
.18cb					_UnaryMCompare:
.18cb	e8		inx				inx 								; get the 2nd thing to evaluate
.18cc	20 52 17	jsr $1752			jsr 	Evaluate
.18cf	ca		dex				dex
.18d0	20 81 15	jsr $1581			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.18d3	85 0a		sta $0a				sta 	tempShort 					; save result
.18d5	68		pla				pla 								; get what we need
.18d6	48		pha				pha
.18d7	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.18d9	d0 de		bne $18b9			bne 	_UnaryMLoop 				; no, try another value.
.18db	20 d9 1c	jsr $1cd9			jsr 	MInt32False 				; promote 2nd to 1st.
.18de	20 c4 1b	jsr $1bc4			jsr 	MInt32Add
.18e1	4c b9 18	jmp $18b9			jmp 	_UnaryMLoop
.18e4					Unary_Page:
.18e4	20 d9 1c	jsr $1cd9			jsr 	MInt32False 				; zero
.18e7	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.18ea	95 48		sta $48,x			sta 	esInt0,x
.18ec	ad c9 0a	lda $0ac9			lda 	basePage+1
.18ef	95 50		sta $50,x			sta 	esInt1,x
.18f1	60		rts				rts
.18f2					UnaryReference:
.18f2	a9 0f		lda #$0f			lda 	#15
.18f4	20 49 16	jsr $1649			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.18f7	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.18f9	10 05		bpl $1900			bpl 	UType
.18fb	a9 00		lda #$00			lda 	#0 							; make it an integer
.18fd	95 40		sta $40,x			sta 	esType,x
.18ff	60		rts				rts
.1900					UType:
.1900	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1902	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1905					UnaryHexMarker:
.1905	4c 43 17	jmp $1743			jmp 	EvaluateIntegerTerm
.1908					UnaryComplement:
.1908	20 43 17	jsr $1743			jsr 	EvaluateIntegerTerm
.190b	20 ad 1c	jsr $1cad			jsr 	MInt32Not
.190e	60		rts				rts
.190f					UnaryIntToFloat:
.190f	20 5b 17	jsr $175b			jsr 	EvaluateNumeric
.1912	b5 40		lda $40,x			lda 	esType,x
.1914	d0 0b		bne $1921			bne 	_UIFExit
.1916	8a		txa				txa
.1917	a2 1a		ldx #$1a		ldx	#26
.1919	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.191c	aa		tax				tax
.191d	a9 01		lda #$01			lda 	#1
.191f	95 40		sta $40,x			sta 	esType,x
.1921					_UIFExit:
.1921	60		rts				rts
.1922					UnaryFloatToInt:
.1922	20 5b 17	jsr $175b			jsr 	EvaluateNumeric
.1925	b5 40		lda $40,x			lda 	esType,x
.1927	f0 07		beq $1930			beq 	_UFIExit
.1929	8a		txa				txa
.192a	a2 12		ldx #$12		ldx	#18
.192c	20 0e 1e	jsr $1e0e		jsr	floatingpointHandler
.192f	aa		tax				tax
.1930					_UFIExit:
.1930	60		rts				rts
.1931					UnaryAlloc:
.1931	e8		inx				inx 								; evaluate memory required
.1932	20 71 17	jsr $1771			jsr 	EvaluateInteger
.1935	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen
.1938	ca		dex				dex
.1939	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.193b	15 61		ora $61,x			ora 	esInt3+1,x
.193d	d0 1e		bne $195d			bne 	_UABadValue
.193f	20 d9 1c	jsr $1cd9			jsr 	MInt32False					; zero return.
.1942	ad cf 0a	lda $0acf			lda 	lowMemory+1 				; copy low memory in
.1945	95 50		sta $50,x			sta 	esInt1,x
.1947	ad ce 0a	lda $0ace			lda 	lowMemory
.194a	95 48		sta $48,x			sta 	esInt0,x
.194c	18		clc				clc 								; add alloc required.
.194d	75 49		adc $49,x			adc 	esInt0+1,x
.194f	8d ce 0a	sta $0ace			sta 	lowMemory
.1952	ad cf 0a	lda $0acf			lda 	lowMemory+1
.1955	75 51		adc $51,x			adc 	esInt1+1,x
.1957	8d cf 0a	sta $0acf			sta 	lowMemory+1
.195a	b0 01		bcs $195d			bcs		_UABadValue 				; overflow definitely bad.
.195c	60		rts				rts
.195d					_UABadValue:
.195d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.195f	20 07 1e	jsr $1e07			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1962					UnaryTimer:
.1962	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen
.1965	98		tya				tya
.1966	48		pha				pha
.1967	20 00 1d	jsr $1d00			jsr 	MInt32Zero 					; zero result
.196a	86 04		stx $04				stx 	temp0 						; returning in YA so can't use pshx
.196c	a2 08		ldx #$08		ldx	#8
.196e	20 fa 1d	jsr $1dfa		jsr	deviceHandler
.1971	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1973	95 48		sta $48,x			sta 	esInt0,x
.1975	94 50		sty $50,x			sty 	esInt1,x
.1977	68		pla				pla
.1978	a8		tay				tay
.1979	60		rts				rts
.197a					UnaryInkey:
.197a	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen
.197d	86 04		stx $04				stx 	temp0
.197f	a2 02		ldx #$02		ldx	#2
.1981	20 fa 1d	jsr $1dfa		jsr	deviceHandler
.1984	a6 04		ldx $04				ldx 	temp0
.1986	20 e8 1c	jsr $1ce8			jsr 	MInt32Set8Bit
.1989	60		rts				rts
.198a					UnaryGet:
.198a	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen
.198d	86 04		stx $04				stx 	temp0
.198f					_UGLoop:
.198f	a2 02		ldx #$02		ldx	#2
.1991	20 fa 1d	jsr $1dfa		jsr	deviceHandler
.1994	c9 00		cmp #$00			cmp 	#0
.1996	f0 f7		beq $198f			beq 	_UGLoop
.1998	a6 04		ldx $04				ldx 	temp0
.199a	20 e8 1c	jsr $1ce8			jsr 	MInt32Set8Bit
.199d	60		rts				rts
.199e					UnarySys:
.199e	20 71 17	jsr $1771			jsr 	EvaluateInteger 				; get the address
.19a1	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen
.19a4	20 21 11	jsr $1121			jsr 	TOSToTemp0 						; copy to temp0
.19a7	8a		txa				txa
.19a8	48		pha				pha
.19a9	98		tya				tya
.19aa	48		pha				pha
.19ab	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.19ae	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.19b1	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.19b4	20 c3 19	jsr $19c3			jsr 	_CallTemp0
.19b7	85 0a		sta $0a				sta 	tempShort 						; restore YX
.19b9	68		pla				pla
.19ba	a8		tay				tay
.19bb	68		pla				pla
.19bc	aa		tax				tax
.19bd	a5 0a		lda $0a				lda 	tempShort
.19bf	20 e8 1c	jsr $1ce8			jsr 	MInt32Set8Bit 					; return result.
.19c2	60		rts				rts
.19c3					_CallTemp0:
.19c3	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.19c6					ExecChr:
.19c6	20 79 17	jsr $1779			jsr 	EvaluateSmallInteger		; character number
.19c9	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen				; right bracket
.19cc	98		tya				tya
.19cd	48		pha				pha
.19ce	8a		txa				txa 								; A = stack
.19cf	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.19d1	a2 00		ldx #$00		ldx	#0
.19d3	20 5b 1f	jsr $1f5b		jsr	stringHandler
.19d6	aa		tax				tax 								; X = stack
.19d7	68		pla				pla
.19d8	a8		tay				tay
.19d9	60		rts				rts
.19da					ExecLeft:
.19da	20 66 17	jsr $1766			jsr 	EvaluateString 				; string to stack,X
.19dd	20 59 1d	jsr $1d59			jsr 	CheckComma
.19e0	e8		inx				inx
.19e1	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.19e3	20 e8 1c	jsr $1ce8			jsr 	MInt32Set8Bit
.19e6	e8		inx				inx
.19e7	20 79 17	jsr $1779			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.19ea					ExecSubstring:
.19ea	ca		dex				dex 								; fix up X
.19eb	ca		dex				dex
.19ec	20 4c 1d	jsr $1d4c			jsr 	CheckRightParen 			; check closing right bracket.
.19ef	8a		txa				txa 								; do the substring and exit.
.19f0	a2 06		ldx #$06		ldx	#6
.19f2	20 5b 1f	jsr $1f5b		jsr	stringHandler
.19f5	aa		tax				tax
.19f6	60		rts				rts
.19f7					ExecMid:
.19f7	20 66 17	jsr $1766			jsr 	EvaluateString 				; string to stack,X
.19fa	20 59 1d	jsr $1d59			jsr 	CheckComma
.19fd	e8		inx				inx
.19fe	20 79 17	jsr $1779			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1a01	c9 00		cmp #$00			cmp 	#0
.1a03	f0 15		beq $1a1a			beq 	_EMValue
.1a05	e8		inx				inx
.1a06	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1a08	20 e8 1c	jsr $1ce8			jsr 	MInt32Set8Bit
.1a0b	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1a0d	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1a0f	f0 d9		beq $19ea			beq 	ExecSubString
.1a11	20 59 1d	jsr $1d59			jsr 	CheckComma
.1a14	20 79 17	jsr $1779			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1a17	4c ea 19	jmp $19ea			jmp 	ExecSubString
.1a1a					_EMValue:
.1a1a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a1c	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1a1f					ExecRight:
.1a1f	20 66 17	jsr $1766			jsr 	EvaluateString 				; string to stack,X
.1a22	20 59 1d	jsr $1d59			jsr 	CheckComma
.1a25	e8		inx				inx
.1a26	20 79 17	jsr $1779			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1a29	ca		dex				dex
.1a2a	98		tya				tya
.1a2b	48		pha				pha
.1a2c	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1a2e	85 04		sta $04				sta 	temp0
.1a30	b5 50		lda $50,x			lda 	esInt1,x
.1a32	85 05		sta $05				sta 	temp0+1
.1a34	a0 00		ldy #$00			ldy 	#0 							; point to length
.1a36	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1a38	18		clc				clc 								; add 1.
.1a39	69 01		adc #$01			adc 	#1
.1a3b	38		sec				sec
.1a3c	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1a3e	f0 02		beq $1a42			beq		_ERMake1 					; if zero, make it 1.
.1a40	b0 02		bcs $1a44			bcs		_EROkay
.1a42					_ERMake1:
.1a42	a9 01		lda #$01			lda 	#1 							; start position.
.1a44					_EROkay:
.1a44	e8		inx				inx 								; set start pos.
.1a45	95 48		sta $48,x			sta 	esInt0,x
.1a47	e8		inx				inx
.1a48	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1a4a	20 e8 1c	jsr $1ce8			jsr 	MInt32Set8Bit
.1a4d	68		pla				pla
.1a4e	a8		tay				tay
.1a4f	4c ea 19	jmp $19ea			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1a52					MInt32And:
.1a52	b5 48		lda $48,x			lda 	esInt0,x
.1a54	35 49		and $49,x			and 	esInt0+1,x
.1a56	95 48		sta $48,x			sta 	esInt0,x
.1a58	b5 50		lda $50,x			lda 	esInt1,x
.1a5a	35 51		and $51,x			and 	esInt1+1,x
.1a5c	95 50		sta $50,x			sta 	esInt1,x
.1a5e	b5 58		lda $58,x			lda 	esInt2,x
.1a60	35 59		and $59,x			and 	esInt2+1,x
.1a62	95 58		sta $58,x			sta 	esInt2,x
.1a64	b5 60		lda $60,x			lda 	esInt3,x
.1a66	35 61		and $61,x			and 	esInt3+1,x
.1a68	95 60		sta $60,x			sta 	esInt3,x
.1a6a	60		rts				rts
.1a6b					MInt32Or:
.1a6b	b5 48		lda $48,x			lda 	esInt0,x
.1a6d	15 49		ora $49,x			ora 	esInt0+1,x
.1a6f	95 48		sta $48,x			sta 	esInt0,x
.1a71	b5 50		lda $50,x			lda 	esInt1,x
.1a73	15 51		ora $51,x			ora 	esInt1+1,x
.1a75	95 50		sta $50,x			sta 	esInt1,x
.1a77	b5 58		lda $58,x			lda 	esInt2,x
.1a79	15 59		ora $59,x			ora 	esInt2+1,x
.1a7b	95 58		sta $58,x			sta 	esInt2,x
.1a7d	b5 60		lda $60,x			lda 	esInt3,x
.1a7f	15 61		ora $61,x			ora 	esInt3+1,x
.1a81	95 60		sta $60,x			sta 	esInt3,x
.1a83	60		rts				rts
.1a84					MInt32Xor:
.1a84	b5 48		lda $48,x			lda 	esInt0,x
.1a86	55 49		eor $49,x			eor 	esInt0+1,x
.1a88	95 48		sta $48,x			sta 	esInt0,x
.1a8a	b5 50		lda $50,x			lda 	esInt1,x
.1a8c	55 51		eor $51,x			eor 	esInt1+1,x
.1a8e	95 50		sta $50,x			sta 	esInt1,x
.1a90	b5 58		lda $58,x			lda 	esInt2,x
.1a92	55 59		eor $59,x			eor 	esInt2+1,x
.1a94	95 58		sta $58,x			sta 	esInt2,x
.1a96	b5 60		lda $60,x			lda 	esInt3,x
.1a98	55 61		eor $61,x			eor 	esInt3+1,x
.1a9a	95 60		sta $60,x			sta 	esInt3,x
.1a9c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1a9d					MInt32Compare:
.1a9d	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1a9f	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1aa1	d0 13		bne $1ab6			bne 	MInt32Compare2
.1aa3	b5 50		lda $50,x			lda 	esInt1,x
.1aa5	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1aa7	d0 0d		bne $1ab6			bne 	MInt32Compare2
.1aa9	b5 58		lda $58,x			lda 	esInt2,x
.1aab	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1aad	d0 07		bne $1ab6			bne 	MInt32Compare2
.1aaf	b5 60		lda $60,x			lda 	esInt3,x
.1ab1	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1ab3	d0 01		bne $1ab6			bne 	MInt32Compare2
.1ab5	60		rts				rts
.1ab6					MInt32Compare2:
.1ab6	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1ab8	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1aba	b5 50		lda $50,x			lda		esInt1,x
.1abc	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1abe	b5 58		lda $58,x			lda		esInt2,x
.1ac0	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1ac2	b5 60		lda $60,x			lda		esInt3,x
.1ac4	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1ac6	50 02		bvc $1aca			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1ac8	49 80		eor #$80			eor 	#$80
.1aca					_I32LNoOverflow
.1aca	30 03		bmi $1acf			bmi 	MInt32CLess					; if -ve then return $FF
.1acc	a9 01		lda #$01			lda 	#$01						; else return $01
.1ace	60		rts				rts
.1acf					MInt32CLess:
.1acf	a9 ff		lda #$ff			lda 	#$FF
.1ad1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1ad2					MInt32SDivide:
.1ad2	98		tya				tya  								; save Y, which is the count of negations
.1ad3	48		pha				pha
.1ad4	a0 00		ldy #$00			ldy 	#0 							; zero count
.1ad6	20 ee 1a	jsr $1aee			jsr 	_MInt32SRemSign 			; unsign TOS
.1ad9	e8		inx				inx 								; unsign TOS+1
.1ada	20 ee 1a	jsr $1aee			jsr 	_MInt32SRemSign
.1add	ca		dex				dex
.1ade	98		tya				tya 								; save sign count on stack
.1adf	48		pha				pha
.1ae0	20 f7 1a	jsr $1af7			jsr 	MInt32UDivide 				; unsigned division
.1ae3	68		pla				pla 								; get sign count back
.1ae4	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1ae6	f0 03		beq $1aeb			beq 	_I32SNoNeg
.1ae8	20 93 1c	jsr $1c93			jsr 	MInt32Negate
.1aeb					_I32SNoNeg:
.1aeb	68		pla				pla 								; restoe Y and exit
.1aec	a8		tay				tay
.1aed	60		rts				rts
.1aee					_MInt32SRemSign:
.1aee	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1af0	10 04		bpl $1af6			bpl 	_MInt32SRSExit
.1af2	c8		iny				iny 								; increment the sign count
.1af3	20 93 1c	jsr $1c93			jsr 	MInt32Negate 				; negate the value.
.1af6					_MInt32SRSExit:
.1af6	60		rts				rts
.1af7					MInt32UDivide:
.1af7	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1af9	15 51		ora $51,x			ora 	esInt1+1,x
.1afb	15 52		ora $52,x			ora 	esInt1+2,x
.1afd	15 53		ora $53,x			ora 	esInt1+3,x
.1aff	f0 4a		beq $1b4b			beq 	_MInt32DZero
.1b01	e8		inx				inx 								; clear A
.1b02	e8		inx				inx
.1b03	20 d9 1c	jsr $1cd9			jsr 	MInt32False
.1b06	ca		dex				dex
.1b07	ca		dex				dex
.1b08	98		tya				tya 								; save Y on the stack
.1b09	48		pha				pha
.1b0a	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1b0c					_MInt32UDLoop:
.1b0c	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1b0e	36 50		rol $50,x			rol 	esInt1,x
.1b10	36 58		rol $58,x			rol 	esInt2,x
.1b12	36 60		rol $60,x			rol 	esInt3,x
.1b14	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1b16	36 52		rol $52,x			rol 	esInt1+2,x
.1b18	36 5a		rol $5a,x			rol 	esInt2+2,x
.1b1a	36 62		rol $62,x			rol 	esInt3+2,x
.1b1c	38		sec				sec 								; calculate A-M saving result on the stack
.1b1d	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1b1f	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1b21	48		pha				pha
.1b22	b5 52		lda $52,x			lda 	esInt1+2,x
.1b24	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1b26	48		pha				pha
.1b27	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1b29	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1b2b	48		pha				pha
.1b2c	b5 62		lda $62,x			lda 	esInt3+2,x
.1b2e	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1b30	90 10		bcc $1b42			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1b32	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1b34	68		pla				pla
.1b35	95 5a		sta $5a,x			sta 	esInt2+2,x
.1b37	68		pla				pla
.1b38	95 52		sta $52,x			sta 	esInt1+2,x
.1b3a	68		pla				pla
.1b3b	95 4a		sta $4a,x			sta 	esInt0+2,x
.1b3d	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1b3f	4c 45 1b	jmp $1b45			jmp 	_MInt32Next 					; do the next iteration
.1b42					_MInt32NoSubtract:
.1b42	68		pla				pla
.1b43	68		pla				pla
.1b44	68		pla				pla
.1b45					_MInt32Next:
.1b45	88		dey				dey 								; do this 32 times.
.1b46	d0 c4		bne $1b0c			bne 	_MInt32UDLoop
.1b48	68		pla				pla 								; restore Y and exit
.1b49	a8		tay				tay
.1b4a	60		rts				rts
.1b4b					_MInt32DZero:
.1b4b	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1b4d	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1b50					MInt32Modulus:
.1b50	20 f7 1a	jsr $1af7			jsr 	MInt32UDivide 				; do the division.
.1b53	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1b55	95 60		sta $60,x			sta 	esInt3,x
.1b57	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1b59	95 58		sta $58,x			sta 	esInt2,x
.1b5b	b5 52		lda $52,x			lda 	esInt1+2,x
.1b5d	95 50		sta $50,x			sta 	esInt1,x
.1b5f	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1b61	95 48		sta $48,x			sta 	esInt0,x
.1b63	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.1b64					MInt32FromString:
.1b64	85 0a		sta $0a				sta 	tempShort 					; save base
.1b66	98		tya				tya
.1b67	48		pha				pha
.1b68	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1b6a	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1b6c	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1b6e	d0 01		bne $1b71			bne 	_I32FSNotNegative
.1b70	c8		iny				iny 								; if so consume it.
.1b71					_I32FSNotNegative:
.1b71	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1b73	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1b75	f0 02		beq $1b79			beq 	_I32FSNN2
.1b77	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1b79					_I32FSNN2:
.1b79	48		pha				pha 								; save base + final sign on stack.
.1b7a	20 d9 1c	jsr $1cd9			jsr 	MInt32False 					; zero the return value.
.1b7d					I32FSMainLoop:
.1b7d	68		pla				pla 								; get the base back into tempshort
.1b7e	48		pha				pha
.1b7f	29 7f		and #$7f			and 	#$7F
.1b81	85 0a		sta $0a				sta 	tempShort
.1b83	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1b85	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1b87	90 02		bcc $1b8b			bcc 	_I32FSNotLC
.1b89	e9 20		sbc #$20			sbc 	#32
.1b8b					_I32FSNotLC:
.1b8b	38		sec				sec 								; subtract 48 (ASCII "0")
.1b8c	e9 30		sbc #$30			sbc 	#"0"
.1b8e	90 26		bcc $1bb6			bcc 	_I32FSDone 					; nothing more to do.
.1b90	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1b92	90 06		bcc $1b9a			bcc 	_I32FSValidate
.1b94	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1b96	90 1e		bcc $1bb6			bcc 	_I32FSDone
.1b98	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1b9a					_I32FSValidate:
.1b9a	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1b9c	b0 18		bcs $1bb6			bcs 	_I32FSDone 					; sorry, too large for this base.
.1b9e	48		pha				pha 								; save the new digit value.
.1b9f	e8		inx				inx 								; put base into next slot.
.1ba0	a5 0a		lda $0a				lda 	tempShort
.1ba2	20 e8 1c	jsr $1ce8			jsr 	MInt32Set8Bit
.1ba5	ca		dex				dex
.1ba6	20 f8 1b	jsr $1bf8			jsr 	MInt32Multiply 				; multiply current by the base
.1ba9	e8		inx				inx
.1baa	68		pla				pla  								; put additive into next slot
.1bab	20 e8 1c	jsr $1ce8			jsr 	MInt32Set8Bit
.1bae	ca		dex				dex
.1baf	20 c4 1b	jsr $1bc4			jsr 	MInt32Add 					; and add it
.1bb2	c8		iny				iny 								; look at next character
.1bb3	4c 7d 1b	jmp $1b7d			jmp 	I32FSMainLoop 				; and go round again.
.1bb6					_I32FSDone:
.1bb6	68		pla				pla 								; get base/final sign back
.1bb7	10 04		bpl $1bbd			bpl 	_I32FSNN3
.1bb9	88		dey				dey 								; one fewer character to allow for the - prefix.
.1bba	20 93 1c	jsr $1c93			jsr 	MInt32Negate 				; negate the result.
.1bbd					_I32FSNN3:
.1bbd	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1bbf	68		pla				pla
.1bc0	a8		tay				tay
.1bc1	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1bc3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1bc4					MInt32Add:
.1bc4	18		clc				clc
.1bc5	b5 48		lda $48,x			lda 	esInt0,x
.1bc7	75 49		adc $49,x			adc 	esInt0+1,x
.1bc9	95 48		sta $48,x			sta 	esInt0,x
.1bcb	b5 50		lda $50,x			lda 	esInt1,x
.1bcd	75 51		adc $51,x			adc 	esInt1+1,x
.1bcf	95 50		sta $50,x			sta 	esInt1,x
.1bd1	b5 58		lda $58,x			lda 	esInt2,x
.1bd3	75 59		adc $59,x			adc 	esInt2+1,x
.1bd5	95 58		sta $58,x			sta 	esInt2,x
.1bd7	b5 60		lda $60,x			lda 	esInt3,x
.1bd9	75 61		adc $61,x			adc 	esInt3+1,x
.1bdb	95 60		sta $60,x			sta 	esInt3,x
.1bdd	60		rts				rts
.1bde					MInt32Sub:
.1bde	38		sec				sec
.1bdf	b5 48		lda $48,x			lda 	esInt0,x
.1be1	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1be3	95 48		sta $48,x			sta 	esInt0,x
.1be5	b5 50		lda $50,x			lda 	esInt1,x
.1be7	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1be9	95 50		sta $50,x			sta 	esInt1,x
.1beb	b5 58		lda $58,x			lda 	esInt2,x
.1bed	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1bef	95 58		sta $58,x			sta 	esInt2,x
.1bf1	b5 60		lda $60,x			lda 	esInt3,x
.1bf3	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1bf5	95 60		sta $60,x			sta 	esInt3,x
.1bf7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1bf8					MInt32Multiply:
.1bf8	e8		inx				inx 								; copy 2nd -> 3rd
.1bf9	20 1e 1c	jsr $1c1e			jsr 	MInt32CopyUp
.1bfc	ca		dex				dex
.1bfd	20 1e 1c	jsr $1c1e			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1c00	20 d9 1c	jsr $1cd9			jsr 	MInt32False 					; zero 1st.
.1c03					_I32Loop:
.1c03	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1c05	29 01		and #$01			and 	#1
.1c07	f0 03		beq $1c0c			beq 	_I32NoAdd 					; if set
.1c09	20 c4 1b	jsr $1bc4			jsr 	MInt32Add 					; add 2nd to 1st.
.1c0c					_I32NoAdd:
.1c0c	e8		inx				inx 								; shift 2nd left
.1c0d	20 ee 1c	jsr $1cee			jsr 	MInt32ShiftLeft
.1c10	e8		inx				inx  								; shift 3rd right
.1c11	20 f7 1c	jsr $1cf7			jsr 	MInt32ShiftRight
.1c14	20 00 1d	jsr $1d00			jsr 	MInt32Zero 					; check if zero.
.1c17	08		php				php 								; save status bits
.1c18	ca		dex				dex 	 							; point back to 1st
.1c19	ca		dex				dex
.1c1a	28		plp				plp 								; get status bits
.1c1b	d0 e6		bne $1c03			bne 	_I32Loop 					; if non-zero keep going.
.1c1d	60		rts				rts
.1c1e					MInt32CopyUp:
.1c1e	b5 48		lda $48,x			lda 	esInt0,x
.1c20	95 49		sta $49,x			sta 	esInt0+1,x
.1c22	b5 50		lda $50,x			lda 	esInt1,x
.1c24	95 51		sta $51,x			sta 	esInt1+1,x
.1c26	b5 58		lda $58,x			lda 	esInt2,x
.1c28	95 59		sta $59,x			sta 	esInt2+1,x
.1c2a	b5 60		lda $60,x			lda 	esInt3,x
.1c2c	95 61		sta $61,x			sta 	esInt3+1,x
.1c2e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af4					MCharCount:	.fill 	1						; count of converted characters
.1c2f					MInt32ToString:
.1c2f	48		pha				pha 								; save base
.1c30	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1c32	a9 00		lda #$00			lda 	#0
.1c34	8d f4 0a	sta $0af4			sta 	MCharCount 					; clear character count to 0
.1c37	98		tya				tya
.1c38	48		pha				pha
.1c39	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1c3b	10 10		bpl $1c4d			bpl 	_I32TSUnsigned
.1c3d	48		pha				pha 								; save base on stack.
.1c3e	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1c40	10 08		bpl $1c4a			bpl 	_I32TSNoFlip
.1c42	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1c44	20 80 1c	jsr $1c80			jsr 	MI32WriteCharacter
.1c47	20 93 1c	jsr $1c93			jsr 	MInt32Negate 				; negate the value.
.1c4a					_I32TSNoFlip:
.1c4a	68		pla				pla 								; get the base back
.1c4b	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1c4d					_I32TSUnsigned:
.1c4d	20 5b 1c	jsr $1c5b			jsr 	MI32DivideWrite 			; recursive code to output string.
.1c50	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1c52	ad f4 0a	lda $0af4			lda 	MCharCount
.1c55	91 04		sta ($04),y			sta 	(temp0),y
.1c57	68		pla				pla
.1c58	a8		tay				tay
.1c59	68		pla				pla
.1c5a	60		rts				rts
.1c5b					MI32DivideWrite:
.1c5b	48		pha				pha 								; save the divisor/base
.1c5c	e8		inx				inx 								; write in the dividing position.
.1c5d	20 e8 1c	jsr $1ce8			jsr 	MInt32Set8Bit
.1c60	ca		dex				dex
.1c61	20 f7 1a	jsr $1af7			jsr 	MInt32UDivide 				; divide number by base.
.1c64	68		pla				pla 								; get the base into Y
.1c65	a8		tay				tay
.1c66	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1c68	48		pha				pha
.1c69	20 00 1d	jsr $1d00			jsr 	MInt32Zero 					; is the result zero ?
.1c6c	f0 04		beq $1c72			beq 	_I32NoRecurse 				; if so, don't recurse.
.1c6e	98		tya				tya 								; put base into A
.1c6f	20 5b 1c	jsr $1c5b			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1c72					_I32NoRecurse:
.1c72	68		pla				pla 								; get the remainder back
.1c73	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1c75	90 02		bcc $1c79			bcc 	_I32NotHex
.1c77	69 06		adc #$06			adc 	#7-1
.1c79					_I32NotHex:
.1c79	18		clc				clc 								; make it ASCII
.1c7a	69 30		adc #$30			adc 	#48
.1c7c	20 80 1c	jsr $1c80			jsr 	MI32WriteCharacter 			; write the character out
.1c7f	60		rts				rts 								; and exit.
.1c80					MI32WriteCharacter:
.1c80	ee f4 0a	inc $0af4			inc 	MCharCount 					; bump count (space for leading count)
.1c83	ac f4 0a	ldy $0af4			ldy 	MCharCount 					; get position
.1c86	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1c88	c8		iny				iny
.1c89	a9 00		lda #$00			lda 	#0
.1c8b	91 04		sta ($04),y			sta 	(temp0),y
.1c8d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af5					MSeed32:	.fill 	4							; random number seed.
.1c8e					MInt32Absolute:
.1c8e	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1c90	30 01		bmi $1c93			bmi 	MInt32Negate
.1c92	60		rts				rts
.1c93					MInt32Negate:
.1c93	38		sec				sec
.1c94	a9 00		lda #$00			lda 	#0
.1c96	f5 48		sbc $48,x			sbc 	esInt0,x
.1c98	95 48		sta $48,x			sta 	esInt0,x
.1c9a	a9 00		lda #$00			lda 	#0
.1c9c	f5 50		sbc $50,x			sbc 	esInt1,x
.1c9e	95 50		sta $50,x			sta 	esInt1,x
.1ca0	a9 00		lda #$00			lda 	#0
.1ca2	f5 58		sbc $58,x			sbc 	esInt2,x
.1ca4	95 58		sta $58,x			sta 	esInt2,x
.1ca6	a9 00		lda #$00			lda 	#0
.1ca8	f5 60		sbc $60,x			sbc 	esInt3,x
.1caa	95 60		sta $60,x			sta 	esInt3,x
.1cac	60		rts				rts
.1cad					MInt32Not:
.1cad	b5 48		lda $48,x			lda 	esInt0,x
.1caf	49 ff		eor #$ff			eor 	#$FF
.1cb1	95 48		sta $48,x			sta 	esInt0,x
.1cb3	b5 50		lda $50,x			lda 	esInt1,x
.1cb5	49 ff		eor #$ff			eor 	#$FF
.1cb7	95 50		sta $50,x			sta 	esInt1,x
.1cb9	b5 58		lda $58,x			lda 	esInt2,x
.1cbb	49 ff		eor #$ff			eor 	#$FF
.1cbd	95 58		sta $58,x			sta 	esInt2,x
.1cbf	b5 60		lda $60,x			lda 	esInt3,x
.1cc1	49 ff		eor #$ff			eor 	#$FF
.1cc3	95 60		sta $60,x			sta 	esInt3,x
.1cc5	60		rts				rts
.1cc6					MInt32Sign:
.1cc6	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1cc8	30 0b		bmi $1cd5			bmi 	MInt32True 					; if set return -1 (true)
.1cca	20 00 1d	jsr $1d00			jsr 	MInt32Zero 					; is it zero ?
.1ccd	f0 0a		beq $1cd9			beq 	MInt32False 					; if zero return 0 (false)
.1ccf	20 d9 1c	jsr $1cd9			jsr 	MInt32False 					; > 0 return 1
.1cd2	f6 48		inc $48,x			inc 	esInt0,x
.1cd4	60		rts				rts
.1cd5					MInt32True:
.1cd5	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1cd7	d0 02		bne $1cdb			bne 	MInt32WriteAll
.1cd9					MInt32False:
.1cd9	a9 00		lda #$00			lda 	#0
.1cdb					MInt32WriteAll:
.1cdb	95 48		sta $48,x			sta 	esInt0,x
.1cdd					MInt32Write123:
.1cdd	95 50		sta $50,x			sta 	esInt1,x
.1cdf	95 58		sta $58,x			sta 	esInt2,x
.1ce1	95 60		sta $60,x			sta 	esInt3,x
.1ce3	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1ce5	95 40		sta $40,x			sta 	esType,x
.1ce7	60		rts				rts
.1ce8					MInt32Set8Bit:
.1ce8	95 48		sta $48,x			sta 	esInt0,x
.1cea	a9 00		lda #$00			lda 	#0
.1cec	f0 ef		beq $1cdd			beq		MInt32Write123
.1cee					MInt32ShiftLeft:
.1cee	16 48		asl $48,x			asl 	esInt0,x
.1cf0	36 50		rol $50,x			rol	 	esInt1,x
.1cf2	36 58		rol $58,x			rol	 	esInt2,x
.1cf4	36 60		rol $60,x			rol	 	esInt3,x
.1cf6	60		rts				rts
.1cf7					MInt32ShiftRight:
.1cf7	56 60		lsr $60,x			lsr 	esInt3,x
.1cf9	76 58		ror $58,x			ror 	esInt2,x
.1cfb	76 50		ror $50,x			ror 	esInt1,x
.1cfd	76 48		ror $48,x			ror 	esInt0,x
.1cff	60		rts				rts
.1d00					MInt32Zero:
.1d00	b5 48		lda $48,x			lda 	esInt0,x
.1d02	15 50		ora $50,x			ora 	esInt1,x
.1d04	15 58		ora $58,x			ora 	esInt2,x
.1d06	15 60		ora $60,x			ora 	esInt3,x
.1d08	60		rts				rts
.1d09					MInt32Random:
.1d09	98		tya				tya
.1d0a	48		pha				pha
.1d0b	a0 07		ldy #$07			ldy 	#7
.1d0d	ad f5 0a	lda $0af5			lda 	MSeed32+0
.1d10	d0 03		bne $1d15			bne 	_Random1
.1d12	a8		tay				tay
.1d13	a9 aa		lda #$aa			lda		#$AA
.1d15					_Random1:
.1d15	0a		asl a				asl 	a
.1d16	2e f6 0a	rol $0af6			rol 	MSeed32+1
.1d19	2e f7 0a	rol $0af7			rol 	MSeed32+2
.1d1c	2e f8 0a	rol $0af8			rol 	MSeed32+3
.1d1f	90 02		bcc $1d23			bcc 	_Random2
.1d21	49 c5		eor #$c5			eor 	#$C5
.1d23					_Random2:
.1d23	88		dey				dey
.1d24	d0 ef		bne $1d15			bne 	_Random1
.1d26	8d f5 0a	sta $0af5			sta 	MSeed32+0
.1d29	95 48		sta $48,x			sta 	esInt0,x
.1d2b	ad f6 0a	lda $0af6			lda 	MSeed32+1
.1d2e	95 50		sta $50,x			sta 	esInt1,x
.1d30	ad f7 0a	lda $0af7			lda 	MSeed32+2
.1d33	95 58		sta $58,x			sta 	esInt2,x
.1d35	ad f8 0a	lda $0af8			lda 	MSeed32+3
.1d38	95 60		sta $60,x			sta 	esInt3,x
.1d3a	68		pla				pla
.1d3b	a8		tay				tay
.1d3c	a9 00		lda #$00			lda 	#0
.1d3e	95 40		sta $40,x			sta 	esType,x
.1d40	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.1d41					CheckToken:
.1d41	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1d43	d0 02		bne $1d47			bne 	_CTError
.1d45	c8		iny				iny
.1d46	60		rts				rts
.1d47					_CTError:
.1d47	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d49	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1d4c					CheckRightParen:
.1d4c	b1 02		lda ($02),y			lda 	(codePtr),y
.1d4e	c8		iny				iny
.1d4f	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1d51	d0 01		bne $1d54			bne 	_CRPError
.1d53	60		rts				rts
.1d54					_CRPError:
.1d54	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.1d56	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1d59					CheckComma:
.1d59	b1 02		lda ($02),y			lda 	(codePtr),y
.1d5b	c8		iny				iny
.1d5c	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1d5e	d0 01		bne $1d61			bne 	_CCError
.1d60	60		rts				rts
.1d61					_CCError:
.1d61	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.1d63	20 07 1e	jsr $1e07			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2231					ScanForward:
.2231	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2233	86 07		stx $07				stx 	temp1+1
.2235	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2237	85 08		sta $08				sta 	temp2
.2239	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.223b	c8		iny				iny
.223c	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.223e	d0 08		bne $2248			bne 	_SFNoCheck 					; if so, check token against entered values.
.2240	c5 06		cmp $06				cmp 	temp1
.2242	f0 24		beq $2268			beq 	_SFExit
.2244	c5 07		cmp $07				cmp 	temp1+1
.2246	f0 20		beq $2268			beq 	_SFExit
.2248					_SFNoCheck:
.2248	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.224a	90 ed		bcc $2239			bcc 	_SFLoop
.224c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.224e	90 19		bcc $2269			bcc 	_SFSpecials
.2250	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2252	90 e5		bcc $2239			bcc 	_SFLoop
.2254	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2256	b0 e1		bcs $2239			bcs 	_SFLoop
.2258	aa		tax				tax  								; token in X, and look up the adjuster.
.2259	bd 59 17	lda $1759,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.225c	38		sec				sec 								; convert to an offset
.225d	e9 81		sbc #$81			sbc 	#$81
.225f	18		clc				clc 								; add to depth
.2260	65 08		adc $08				adc 	temp2
.2262	85 08		sta $08				sta 	temp2
.2264	10 d3		bpl $2239			bpl 	_SFLoop 					; +ve okay to continue
.2266	30 2a		bmi $2292			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2268	60		rts		_SFExit:rts
.2269					_SFSpecials:
.2269	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.226b	f0 14		beq $2281			beq 	_SFNextLine
.226d	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.226f	f0 26		beq $2297			beq 	_SFFloatSkip
.2271	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2273	f0 04		beq $2279			beq 	_SFSkipString
.2275	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2276	4c 39 22	jmp $2239			jmp 	_SFLoop 					; token.
.2279					_SFSkipString:
.2279	98		tya				tya
.227a	38		sec				sec
.227b	71 02		adc ($02),y			adc 	(codePtr),y
.227d	a8		tay				tay
.227e	4c 39 22	jmp $2239			jmp 	_SFLoop
.2281					_SFNextLine:
.2281	a0 00		ldy #$00			ldy 	#0 							; get offset
.2283	b1 02		lda ($02),y			lda 	(codePtr),y
.2285	18		clc				clc 								; add to code pointer.
.2286	65 02		adc $02				adc 	codePtr
.2288	85 02		sta $02				sta 	codePtr
.228a	90 02		bcc $228e			bcc		_SFNLNoCarry
.228c	e6 03		inc $03				inc 	codePtr+1
.228e					_SFNLNoCarry:
.228e	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2290	d0 a7		bne $2239			bne		_SFLoop 					; no go round again
.2292					_SFError:
.2292	a2 13		ldx #$13			ldx 	#ErrorID_Struct
.2294	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.2297					_SFFloatSkip:
.2297	4c 8c 12	jmp $128c			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.1d66					RSReset:
.1d66	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.1d68	85 78		sta $78				sta 	rsPointer
.1d6a	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.1d6c	85 79		sta $79				sta 	1+(rsPointer)
.1d6e	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1d70	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.1d73	60		rts				rts
.1d74					RSClaim:
.1d74	84 0a		sty $0a				sty 	tempShort 					; preserve Y
.1d76	48		pha				pha 								; save marker on stack.
.1d77	8a		txa				txa 								; get bytes required.
.1d78	38		sec				sec
.1d79	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1d7b	65 78		adc $78				adc 	rsPointer
.1d7d	85 78		sta $78				sta 	rsPointer
.1d7f	a5 79		lda $79				lda 	rsPointer+1
.1d81	69 ff		adc #$ff			adc 	#$FF
.1d83	85 79		sta $79				sta 	rsPointer+1
.1d85	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.1d87	90 08		bcc $1d91			bcc 	_RSCOverflow
.1d89	68		pla				pla 								; get marker back
.1d8a	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1d8c	91 78		sta ($78),y			sta 	(rsPointer),y
.1d8e	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1d90	60		rts				rts
.1d91					_RSCOverflow:
.1d91	a2 15		ldx #$15			ldx 	#ErrorID_RetStack
.1d93	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1d96					RSFree:
.1d96	18		clc				clc
.1d97	65 78		adc $78				adc 	rsPointer
.1d99	85 78		sta $78				sta 	rsPointer
.1d9b	90 02		bcc $1d9f			bcc 	_RSFExit
.1d9d	e6 79		inc $79				inc 	rsPointer+1
.1d9f					_RSFExit:
.1d9f	60		rts				rts
.1da0					RSSavePosition:
.1da0	84 0a		sty $0a				sty 	tempShort 					; save Y position
.1da2	a8		tay				tay 								; this is where we write it.
.1da3	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1da5	91 78		sta ($78),y			sta 	(rsPointer),y
.1da7	c8		iny				iny
.1da8	a5 03		lda $03				lda 	codePtr+1
.1daa	91 78		sta ($78),y			sta 	(rsPointer),y
.1dac	c8		iny				iny
.1dad	a5 0a		lda $0a				lda 	tempShort 					; write the Y position out.
.1daf	91 78		sta ($78),y			sta 	(rsPointer),y
.1db1	a8		tay				tay 								; fix Y back again to original value
.1db2	60		rts				rts
.1db3					RSLoadPosition:
.1db3	a8		tay				tay
.1db4	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1db6	85 02		sta $02				sta 	codePtr
.1db8	c8		iny				iny
.1db9	b1 78		lda ($78),y			lda 	(rsPointer),y
.1dbb	85 03		sta $03				sta 	codePtr+1
.1dbd	c8		iny				iny
.1dbe	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1dc0	a8		tay				tay 								; to Y
.1dc1	60		rts				rts

;******  Return to file: main/main.asm

.1dc2					mainHandler:
.1dc2	7c c5 1d	jmp ($1dc5,x)			jmp 	(mainVectors,x)
.1dc5					mainVectors:
>1dc5	8c 17					.word LinkEvaluate         ; index 0
>1dc7	92 17					.word LinkEvaluateInteger  ; index 2
>1dc9	98 17					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.asm

.1dcb					assemblerHandler:
.1dcb	7c ce 1d	jmp ($1dce,x)			jmp 	(assemblerVectors,x)
.1dce					assemblerVectors:

;******  Return to file: basic.asm


;******  Processing file: device/device.asm


;******  Processing file: device/x16/x16io.asm

.1dce					IONewLine:
.1dce	48		pha				pha
.1dcf	a9 0d		lda #$0d			lda 	#13
.1dd1	20 de 1d	jsr $1dde			jsr 	IOPrintChar
.1dd4	68		pla				pla
.1dd5	60		rts				rts
.1dd6					IOTab:
.1dd6	48		pha				pha
.1dd7	a9 20		lda #$20			lda 	#32
.1dd9	20 de 1d	jsr $1dde			jsr 	IOPrintChar
.1ddc	68		pla				pla
.1ddd	60		rts				rts
.1dde					IOPrintChar:
.1dde	aa		tax				tax
.1ddf	5a		phy				phy
.1de0	8a		txa				txa
.1de1	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1de4	7a		ply				ply
.1de5	60		rts				rts
.1de6					IOInkey:
.1de6	98		tya				tya
.1de7	48		pha				pha
.1de8	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1deb	85 0a		sta $0a				sta 	tempShort
.1ded	68		pla				pla
.1dee	a8		tay				tay
.1def	a5 0a		lda $0a				lda 	tempShort
.1df1	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/x16/x16timer.asm

.1df2					IOReadTimer:
.1df2	20 de ff	jsr $ffde			jsr 	$FFDE
.1df5	48		pha				pha
.1df6	8a		txa				txa
.1df7	a8		tay				tay
.1df8	68		pla				pla
.1df9	60		rts				rts

;******  Return to file: device/device.asm

.1dfa					deviceHandler:
.1dfa	7c fd 1d	jmp ($1dfd,x)			jmp 	(deviceVectors,x)
.1dfd					deviceVectors:
>1dfd	ce 1d					.word IONewLine            ; index 0
>1dff	e6 1d					.word IOInkey              ; index 2
>1e01	de 1d					.word IOPrintChar          ; index 4
>1e03	d6 1d					.word IOTab                ; index 6
>1e05	f2 1d					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm


;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1e07					ErrorHandler:
.1e07	a9 ee		lda #$ee			lda 	#$EE
.1e09	a8		tay				tay
>1e0a	db						.byte 	$DB
.1e0b	4c 0b 1e	jmp $1e0b	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.asm

.1e0e					floatingpointHandler:
.1e0e	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1e10	20 07 1e	jsr $1e07			jsr 	ErrorHandler

;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.asm

.1e13					interactionHandler:
.1e13	7c 16 1e	jmp ($1e16,x)			jmp 	(interactionVectors,x)
.1e16					interactionVectors:

;******  Return to file: basic.asm


;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.1e16					StringChrs:
.1e16	aa		tax				tax 								; set up stack
.1e17	a9 02		lda #$02			lda 	#2
.1e19	20 cc 1e	jsr $1ecc			jsr 	AllocateSoftString
.1e1c	98		tya				tya
.1e1d	20 f4 1e	jsr $1ef4			jsr 	WriteSoftString
.1e20	20 25 1e	jsr $1e25			jsr 	ReturnSoftString
.1e23	8a		txa				txa
.1e24	60		rts				rts
.1e25					ReturnSoftString:
.1e25	a5 7a		lda $7a				lda 	softMemAlloc
.1e27	95 48		sta $48,x			sta 	esInt0,x
.1e29	a5 7b		lda $7b				lda 	softMemAlloc+1
.1e2b	95 50		sta $50,x			sta 	esInt1,x
.1e2d	a9 00		lda #$00			lda 	#0
.1e2f	95 58		sta $58,x			sta 	esInt2,x
.1e31	95 60		sta $60,x			sta 	esInt3,x
.1e33	a9 40		lda #$40			lda 	#$40
.1e35	95 40		sta $40,x			sta 	esType,x
.1e37	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.1e38					STRCompare:
.1e38	48		pha				pha 								; save A
.1e39	aa		tax				tax 								; put stack pos in X
.1e3a	98		tya				tya
.1e3b	48		pha				pha
.1e3c	20 70 1e	jsr $1e70			jsr 	CopyStringPair
.1e3f	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1e41	b1 04		lda ($04),y			lda 	(temp0),y
.1e43	d1 06		cmp ($06),y			cmp 	(temp1),y
.1e45	90 02		bcc $1e49			bcc 	_SCNotSmaller
.1e47	b1 06		lda ($06),y			lda 	(temp1),y
.1e49					_SCNotSmaller:
.1e49	aa		tax				tax 								; put that in X. We compare this many chars first.
.1e4a					_SCCompareLoop:
.1e4a	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1e4c	f0 0c		beq $1e5a			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1e4e	ca		dex				dex 								; decrement chars to compare.
.1e4f	c8		iny				iny 								; move to next character
.1e50	38		sec				sec 								; calculate s1[y]-s2[y]
.1e51	b1 04		lda ($04),y			lda 	(temp0),y
.1e53	f1 06		sbc ($06),y			sbc 	(temp1),y
.1e55	d0 0a		bne $1e61			bne 	_SCReturnResult 			; if different return sign of A
.1e57	4c 4a 1e	jmp $1e4a			jmp 	_SCCompareLoop
.1e5a					_SCSameToEndShortest
.1e5a	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1e5c	38		sec				sec
.1e5d	b1 04		lda ($04),y			lda 	(temp0),y
.1e5f	f1 06		sbc ($06),y			sbc 	(temp1),y
.1e61					_SCReturnResult:
.1e61	08		php				php 								; set return to zero preserving PSW.
.1e62	a2 00		ldx #$00			ldx 	#0
.1e64	28		plp				plp
.1e65	f0 05		beq $1e6c			beq 	_SCExit 					; two values equal, then exit
.1e67	ca		dex				dex 								; X = $FF
.1e68	90 02		bcc $1e6c			bcc 	_SCExit 					; if 1st < 2nd then -1
.1e6a	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1e6c					_SCExit:
.1e6c	68		pla				pla
.1e6d	a8		tay				tay
.1e6e	68		pla				pla
.1e6f	60		rts				rts
.1e70					CopyStringPair:
.1e70	b5 49		lda $49,x			lda 	esInt0+1,x
.1e72	85 06		sta $06				sta 	temp1
.1e74	b5 51		lda $51,x			lda 	esInt1+1,x
.1e76	85 07		sta $07				sta 	temp1+1
.1e78					CopyStringTop:
.1e78	b5 48		lda $48,x			lda 	esInt0,x
.1e7a	85 04		sta $04				sta 	temp0
.1e7c	b5 50		lda $50,x			lda 	esInt1,x
.1e7e	85 05		sta $05				sta 	temp0+1
.1e80	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.1e81					StringConcat:
.1e81	aa		tax				tax									; stack pos in X
.1e82	98		tya				tya
.1e83	48		pha				pha
.1e84	20 70 1e	jsr $1e70			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1e87	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1e88	a0 00		ldy #$00			ldy 	#0
.1e8a	b1 04		lda ($04),y			lda 	(temp0),y
.1e8c	71 06		adc ($06),y			adc 	(temp1),y
.1e8e	b0 18		bcs $1ea8			bcs 	_SCError 					; just too many characters here.
.1e90	20 cc 1e	jsr $1ecc			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1e93	20 c3 1e	jsr $1ec3			jsr 	CopySoftToStack 			; copy that to the stack.
.1e96	20 ad 1e	jsr $1ead			jsr 	_SCCopyTemp0 				; copy temp0
.1e99	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1e9b	85 04		sta $04				sta 	temp0
.1e9d	a5 07		lda $07				lda 	temp1+1
.1e9f	85 05		sta $05				sta 	temp0+1
.1ea1	20 ad 1e	jsr $1ead			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1ea4	68		pla				pla
.1ea5	a8		tay				tay
.1ea6	8a		txa				txa 								; and A
.1ea7	60		rts				rts
.1ea8					_SCError:
.1ea8	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.1eaa	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1ead					_SCCopyTemp0:
.1ead	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1eaf	b1 04		lda ($04),y			lda 	(temp0),y
.1eb1	85 08		sta $08				sta 	temp2
.1eb3					_SCCopyLoop:
.1eb3	a5 08		lda $08				lda 	temp2 						; done the lot
.1eb5	f0 0b		beq $1ec2			beq 	_SCCopyExit
.1eb7	c6 08		dec $08				dec 	temp2
.1eb9	c8		iny				iny 								; get next char
.1eba	b1 04		lda ($04),y			lda 	(temp0),y
.1ebc	20 f4 1e	jsr $1ef4			jsr 	WriteSoftString 			; write to soft string.
.1ebf	4c b3 1e	jmp $1eb3			jmp 	_SCCopyLoop
.1ec2					_SCCopyExit:
.1ec2	60		rts				rts
.1ec3					CopySoftToStack:
.1ec3	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1ec5	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1ec7	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.1ec9	95 50		sta $50,x			sta 	esInt1,x
.1ecb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1ecc					AllocateSoftString:
.1ecc	85 0a		sta $0a				sta 	tempShort 					; save count
.1ece	98		tya				tya
.1ecf	48		pha				pha
.1ed0	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1ed2	d0 0b		bne $1edf			bne 	_ASSDone
.1ed4	ad cc 0a	lda $0acc			lda 	highMemory 					; reset the soft memory alloc pointer.
.1ed7	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1ed9	ac cd 0a	ldy $0acd			ldy 	highMemory+1 				; but it needs to be reset before each command.
.1edc	88		dey				dey
.1edd	84 7b		sty $7b				sty 	softMemAlloc+1
.1edf					_ASSDone:
.1edf	38		sec				sec 								; allocate downwards enough memory
.1ee0	a5 7a		lda $7a				lda 	softMemAlloc
.1ee2	e5 0a		sbc $0a				sbc 	tempShort
.1ee4	85 7a		sta $7a				sta 	softMemAlloc
.1ee6	a5 7b		lda $7b				lda 	softMemAlloc+1
.1ee8	e9 00		sbc #$00			sbc 	#0
.1eea	85 7b		sta $7b				sta 	softMemAlloc+1
.1eec	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1eee	a8		tay				tay
.1eef	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1ef1	68		pla				pla
.1ef2	a8		tay				tay
.1ef3	60		rts				rts
.1ef4					WriteSoftString:
.1ef4	84 0a		sty $0a				sty 	tempShort 					; save Y
.1ef6	48		pha				pha
.1ef7	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1ef9	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.1efb	18		clc				clc
.1efc	69 01		adc #$01			adc 	#1
.1efe	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1f00	a8		tay				tay 								; pointer in Y
.1f01	68		pla				pla 								; get char and write.
.1f02	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1f04	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1f06	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.0af9					NullString:
>0af9							.fill 	1							; don't waste memory concreting null strings.
.1f07					StringSubstring:
.1f07	48		pha				pha
.1f08	aa		tax				tax 								; access stack.
.1f09	98		tya				tya
.1f0a	48		pha				pha
.1f0b	20 78 1e	jsr $1e78			jsr 	CopyStringTop 				; point temp0 to the string.
.1f0e	a0 00		ldy #$00			ldy 	#0 							; get length.
.1f10	b1 04		lda ($04),y			lda 	(temp0),Y
.1f12	85 06		sta $06				sta 	temp1
.1f14	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.1f16	c5 06		cmp $06				cmp 	temp1 						;
.1f18	f0 02		beq $1f1c			beq 	_SSBOkay
.1f1a	b0 2a		bcs $1f46			bcs 	_SSBReturnNull
.1f1c					_SSBOkay:
.1f1c	a5 06		lda $06				lda 	temp1 						; get the total length +1
.1f1e	18		clc				clc
.1f1f	69 01		adc #$01			adc 	#1
.1f21	38		sec				sec
.1f22	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.1f24	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.1f26	90 02		bcc $1f2a			bcc		_SSBTrunc
.1f28	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1f2a					_SSBTrunc:
.1f2a	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.1f2c	18		clc				clc
.1f2d	69 01		adc #$01			adc 	#1 							; add 1
.1f2f	20 cc 1e	jsr $1ecc			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1f32	20 c3 1e	jsr $1ec3			jsr 	CopySoftToStack 			; copy that to the stack.
.1f35	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.1f37					_SSBCopyLoop:
.1f37	a5 07		lda $07				lda 	temp1+1 					; done them all
.1f39	f0 0e		beq $1f49			beq 	_SSBExit
.1f3b	c6 07		dec $07				dec 	temp1+1
.1f3d	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.1f3f	20 f4 1e	jsr $1ef4			jsr 	WriteSoftString
.1f42	c8		iny				iny
.1f43	4c 37 1f	jmp $1f37			jmp 	_SSBCopyLoop
.1f46					_SSBReturnNull:
.1f46	20 4d 1f	jsr $1f4d			jsr 	ReturnNull
.1f49					_SSBExit:
.1f49	68		pla				pla
.1f4a	a8		tay				tay
.1f4b	68		pla				pla
.1f4c	60		rts				rts
.1f4d					ReturnNull:
.1f4d	a9 00		lda #$00			lda 	#0 							; clear null string
.1f4f	8d f9 0a	sta $0af9			sta 	NullString
.1f52	a9 f9		lda #$f9			lda 	#NullString & $FF 			; set a pointer to it
.1f54	95 48		sta $48,x			sta 	esInt0,x
.1f56	a9 0a		lda #$0a			lda 	#NullString >> 8
.1f58	95 50		sta $50,x			sta 	esInt1,x
.1f5a	60		rts				rts

;******  Return to file: string/string.asm

.1f5b					stringHandler:
.1f5b	7c 5e 1f	jmp ($1f5e,x)			jmp 	(stringVectors,x)
.1f5e					stringVectors:
>1f5e	16 1e					.word StringChrs           ; index 0
>1f60	81 1e					.word StringConcat         ; index 2
>1f62	38 1e					.word STRCompare           ; index 4
>1f64	07 1f					.word StringSubstring      ; index 6

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.asm

.1f66					tokeniserHandler:
.1f66	7c 69 1f	jmp ($1f69,x)			jmp 	(tokeniserVectors,x)
.1f69					tokeniserVectors:

;******  Return to file: basic.asm


;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afa					varHash:
>0afa							.fill	1
.0afb					varType:
>0afb							.fill 	1
.0afc					varEnd:
>0afc							.fill 	1
.007c					hashList:
>007c							.fill 	2
.1f69					AccessVariable:
.1f69	aa		tax				tax 								; stack in X
.1f6a	c8		iny				iny
.1f6b	b1 02		lda ($02),y			lda 	(codePtr),y
.1f6d	88		dey				dey
.1f6e	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1f70	d0 15		bne $1f87			bne 	_AVLong
.1f72	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1f74	38		sec				sec 	 							; make it 0-25
.1f75	e9 01		sbc #$01			sbc 	#1
.1f77	0a		asl a				asl 	a 							; x 4 is LSB of address
.1f78	0a		asl a				asl 	a
.1f79	95 48		sta $48,x			sta 	esInt0,x
.1f7b	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.1f7d	95 50		sta $50,x			sta 	esInt1,x
.1f7f	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1f81	95 40		sta $40,x			sta 	esType,x
.1f83	c8		iny				iny 								; skip over the variable reference in the code.
.1f84	c8		iny				iny
.1f85	8a		txa				txa 								; stack in A to return.
.1f86	60		rts				rts
.1f87					_AVLong:
.1f87	8a		txa				txa
.1f88	48		pha				pha
.1f89	20 c7 1f	jsr $1fc7			jsr 	AccessSetup 				; set up the basic stuff.
.1f8c	20 59 20	jsr $2059			jsr 	FindVariable 				; does the variable exist already
.1f8f	b0 0e		bcs $1f9f			bcs 	_AVFound
.1f91	ad fb 0a	lda $0afb			lda 	varType 					; is the variable type an array
.1f94	4a		lsr a				lsr 	a
.1f95	90 05		bcc $1f9c			bcc 	_AVCanCreate
.1f97	a2 14		ldx #$14			ldx 	#ErrorID_noauto
.1f99	20 07 1e	jsr $1e07			jsr 	ErrorHandler
.1f9c					_AVCanCreate:
.1f9c	20 06 20	jsr $2006			jsr 	CreateVariable 				; no, create it.
.1f9f					_AVFound:
.1f9f	68		pla				pla
.1fa0	aa		tax				tax
.1fa1	18		clc				clc 								; copy temp0 (variable record address)
.1fa2	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.1fa4	69 05		adc #$05			adc 	#5
.1fa6	95 48		sta $48,x			sta 	esInt0,x
.1fa8	a5 05		lda $05				lda 	temp0+1
.1faa	69 00		adc #$00			adc 	#0
.1fac	95 50		sta $50,x			sta 	esInt1,x
.1fae	a9 00		lda #$00			lda 	#0
.1fb0	95 58		sta $58,x			sta 	esInt2,x
.1fb2	95 60		sta $60,x			sta 	esInt3,x
.1fb4	ac fb 0a	ldy $0afb			ldy 	varType 					; get the type ID from the type.
.1fb7	b9 87 1f	lda $1f87,y			lda 	_AVTypeTable-$3A,y
.1fba	95 40		sta $40,x			sta 	esType,x
.1fbc	ac fc 0a	ldy $0afc			ldy 	varEnd 						; restore Y
.1fbf	8a		txa				txa 								; return stack in A and return
.1fc0	60		rts				rts
.1fc1					_AVTypeTable:
>1fc1	80 80						.byte 	$80,$80						; integer
>1fc3	c0 c0						.byte 	$C0,$C0 					; string
>1fc5	81 81						.byte 	$81,$81 					; float
.1fc7					AccessSetup:
.1fc7	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.1fc9	8d fa 0a	sta $0afa			sta 	varHash
.1fcc	98		tya				tya
.1fcd	48		pha				pha
.1fce	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.1fd0	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.1fd2	b0 0d		bcs $1fe1			bcs 	_ASComplete
.1fd4	18		clc				clc 								; add to the hash. Might improve this.
.1fd5	6d fa 0a	adc $0afa			adc 	varHash
.1fd8	a9 00		lda #$00			lda 	#0
.1fda	8d fa 0a	sta $0afa			sta 	varHash
.1fdd	c8		iny				iny 								; next character
.1fde	4c ce 1f	jmp $1fce			jmp 	_ASLoop
.1fe1					_ASComplete:
.1fe1	8d fb 0a	sta $0afb			sta 	varType 					; save variable type byte
.1fe4	c8		iny				iny
.1fe5	8c fc 0a	sty $0afc			sty 	varEnd 						; save the ending position.
.1fe8	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.1fe9	e9 3a		sbc #$3a			sbc 	#$3A
.1feb	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.1fec	0a		asl a				asl 	a
.1fed	0a		asl a				asl 	a
.1fee	0a		asl a				asl 	a 							; 2 bytes/word
.1fef	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.1ff1	ad fa 0a	lda $0afa			lda 	varHash 					; get hash
.1ff4	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.1ff6	0a		asl a				asl  	a 							; x 2 (for word) and CC
.1ff7	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.1ff9	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.1ffb	85 7c		sta $7c				sta 	hashList
.1ffd	a9 0a		lda #$0a			lda 	#hashTables >> 8
.1fff	69 00		adc #$00			adc 	#0
.2001	85 7d		sta $7d				sta 	hashList+1
.2003	68		pla				pla
.2004	a8		tay				tay
.2005	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2006					CreateVariable:
.2006	98		tya				tya 								; push Y on the stack twice.
.2007	48		pha				pha
.2008	48		pha				pha
.2009	ae fb 0a	ldx $0afb			ldx 	varType 					; get var type 0-5
.200c	bd 19 20	lda $2019,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.200f	48		pha				pha 								; save length
.2010	a8		tay				tay 								; put into Y.
.2011	ad ce 0a	lda $0ace			lda 	lowMemory 					; set low Memory ptr to temp0
.2014	85 04		sta $04				sta 	temp0
.2016	ad cf 0a	lda $0acf			lda 	lowMemory+1
.2019	85 05		sta $05				sta 	temp0+1
.201b	68		pla				pla 								; get length
.201c	20 6c 10	jsr $106c			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.201f					_CVClear:
.201f	88		dey				dey
.2020	a9 00		lda #$00			lda 	#0
.2022	91 04		sta ($04),y			sta 	(temp0),y
.2024	c0 04		cpy #$04			cpy 	#4
.2026	d0 f7		bne $201f			bne 	_CVClear
.2028	ad fa 0a	lda $0afa			lda 	varHash 					; store hash at offset 4.
.202b	91 04		sta ($04),y			sta 	(temp0),y
.202d	68		pla				pla 								; offset, work out where the variable name is.
.202e	18		clc				clc
.202f	65 02		adc $02				adc 	codePtr
.2031	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2033	91 04		sta ($04),y			sta 	(temp0),y
.2035	a5 03		lda $03				lda 	codePtr+1
.2037	69 00		adc #$00			adc 	#0
.2039	c8		iny				iny
.203a	91 04		sta ($04),y			sta 	(temp0),y
.203c	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.203e	b1 7c		lda ($7c),y			lda 	(hashList),y
.2040	91 04		sta ($04),y			sta 	(temp0),y
.2042	c8		iny				iny
.2043	b1 7c		lda ($7c),y			lda 	(hashList),y
.2045	91 04		sta ($04),y			sta 	(temp0),y
.2047	a5 05		lda $05				lda 	temp0+1 					; set new link
.2049	91 7c		sta ($7c),y			sta 	(hashList),y
.204b	88		dey				dey
.204c	a5 04		lda $04				lda 	temp0
.204e	91 7c		sta ($7c),y			sta 	(hashList),y
.2050	68		pla				pla
.2051	a8		tay				tay
.2052	60		rts				rts
>2053	09 09				_CVSize:.byte 	5+4,5+4 					; <storage for integer>
>2055	07 07						.byte 	5+2,5+2 					; <storage for string>
>2057	0b 0b						.byte 	5+6,5+6 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2059					FindVariable:
.2059	98		tya				tya
.205a	48		pha				pha
.205b	98		tya				tya 								; point temp2 to the actual name.
.205c	18		clc				clc
.205d	65 02		adc $02				adc 	codePtr
.205f	85 08		sta $08				sta 	temp2
.2061	a5 03		lda $03				lda 	codePtr+1
.2063	69 00		adc #$00			adc 	#0
.2065	85 09		sta $09				sta 	temp2+1
.2067	a0 00		ldy #$00			ldy 	#0
.2069	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.206b	85 04		sta $04				sta 	temp0
.206d	a5 7d		lda $7d				lda 	hashList+1
.206f	85 05		sta $05				sta 	temp0+1
.2071	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2073	b1 04		lda ($04),y			lda 	(temp0),y
.2075	f0 2c		beq $20a3			beq 	_FVFail
.2077	aa		tax				tax
.2078	88		dey				dey		 							; get LSB
.2079	b1 04		lda ($04),y			lda 	(temp0),y
.207b	85 04		sta $04				sta 	temp0 						; update pointer.
.207d	86 05		stx $05				stx 	temp0+1
.207f	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2081	b1 04		lda ($04),y			lda 	(temp0),y
.2083	cd fa 0a	cmp $0afa			cmp 	varHash
.2086	d0 e9		bne $2071			bne 	_FVNext 					; if not, no point in checking the name.
.2088	88		dey				dey 								; copy name pointer to temp1.
.2089	b1 04		lda ($04),y			lda 	(temp0),y
.208b	85 07		sta $07				sta 	temp1+1
.208d	88		dey				dey
.208e	b1 04		lda ($04),y			lda 	(temp0),y
.2090	85 06		sta $06				sta 	temp1
.2092	a0 00		ldy #$00			ldy 	#0
.2094					_FVCheck:
.2094	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2096	d1 08		cmp ($08),y			cmp 	(temp2),y
.2098	d0 d7		bne $2071			bne 	_FVNext		 				; fail if different.
.209a	c8		iny				iny
.209b	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.209d	90 f5		bcc $2094			bcc 	_FVCheck
.209f	68		pla				pla
.20a0	a8		tay				tay
.20a1	38		sec				sec
.20a2	60		rts				rts
.20a3					_FVFail:
.20a3	68		pla				pla
.20a4	a8		tay				tay
.20a5	18		clc				clc
.20a6	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.20a7					HashTableReset:
.20a7	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.20a9	a9 00		lda #$00			lda 	#0
.20ab					_HTRClear:
.20ab	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.20ae	ca		dex				dex
.20af	d0 fa		bne $20ab			bne 	_HTRClear
.20b1	60		rts				rts

;******  Return to file: variable/variable.asm

.20b2					variableHandler:
.20b2	7c b5 20	jmp ($20b5,x)			jmp 	(variableVectors,x)
.20b5					variableVectors:
>20b5	69 1f					.word AccessVariable       ; index 0
>20b7	a7 20					.word HashTableReset       ; index 2

;******  Return to file: basic.asm


;******  End of listing
