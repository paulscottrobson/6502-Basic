
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Tue Mar 16 14:53:04 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$40					StackAddress = $40
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0078					endOfStack:
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex
=35					ErrorID_Assembler = 35 ; Bad Operand/Mode
=36					ErrorID_Branch = 36 ; Branch out of range
=37					ErrorID_Label = 37 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	e6 38						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 b9 14	jsr $14b9		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 e2 1a	jsr $1ae2		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 18 3c	jsr $3c18		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	20 03 30	jsr $3003			jsr 	MInt32False
.1032	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.1034	aa		tax				tax
.1035	a9 02		lda #$02			lda 	#AMD_ACCIMP
.1037	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.1039	f0 41		beq $107c			beq 	_AGOExit
.103b	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.103d	f0 3d		beq $107c			beq 	_AGOExit
.103f	c8		iny				iny 								; consume the token
.1040	a9 00		lda #$00			lda 	#AMD_IMM
.1042	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.1044	f0 2d		beq $1073			beq		_AGOEvalExit 				; with an operand.
.1046	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.1048	f0 40		beq $108a			beq 	_AGOIndirect
.104a	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.104c	d0 0b		bne $1059			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.104e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1050	c8		iny				iny
.1051	aa		tax				tax
.1052	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.1054	e0 3a		cpx #$3a			cpx 	#$3A
.1056	f0 24		beq $107c			beq 	_AGOExit
.1058	88		dey				dey 								; unpick 2 iny
.1059					_AGOZeroPage1:
.1059	88		dey				dey
.105a	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.105c	a2 06		ldx #$06		ldx	#6
.105e	20 6d 31	jsr $316d		jsr	mainHandler
.1061	20 b9 10	jsr $10b9			jsr 	AsmGetIndexing
.1064	a9 01		lda #$01			lda 	#AMD_ZERO
.1066	90 14		bcc $107c			bcc 	_AGOExit
.1068	a9 05		lda #$05			lda 	#AMD_ZEROX
.106a	e0 00		cpx #$00			cpx 	#0
.106c	f0 0e		beq $107c			beq 	_AGOExit
.106e	a9 09		lda #$09			lda 	#AMD_ZEROY
.1070	4c 7c 10	jmp $107c			jmp 	_AGOExit
.1073					_AGOEvalExit:
.1073	48		pha				pha
.1074	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1076	a2 06		ldx #$06		ldx	#6
.1078	20 6d 31	jsr $316d		jsr	mainHandler
.107b	68		pla				pla
.107c					_AGOExit:
.107c	48		pha				pha 								; save the mode
.107d	a5 58		lda $58				lda 	esInt2 						; check the operand is zero.
.107f	05 60		ora $60				ora 	esInt3
.1081	d0 02		bne $1085			bne 	_AGOValue
.1083	68		pla				pla
.1084	60		rts				rts
.1085					_AGOValue:
.1085	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1087	20 da 14	jsr $14da		jsr	errorHandler
.108a					_AGOIndirect:
.108a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.108c	a2 06		ldx #$06		ldx	#6
.108e	20 6d 31	jsr $316d		jsr	mainHandler
.1091	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1093	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1095	f0 11		beq $10a8			beq 	_AGOIndIndY
.1097	20 b9 10	jsr $10b9			jsr 	ASMGetIndexing 				; must be ,X)
.109a	90 39		bcc $10d5			bcc 	AGISyntax
.109c	e0 00		cpx #$00			cpx 	#0
.109e	d0 35		bne $10d5			bne 	AGISyntax
.10a0	a2 00		ldx #$00		ldx	#0
.10a2	20 6d 31	jsr $316d		jsr	mainHandler
.10a5	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10a7	60		rts				rts
.10a8					_AGOIndIndY:
.10a8	c8		iny				iny
.10a9	20 b9 10	jsr $10b9			jsr 	ASMGetIndexing 				; get indexing if any
.10ac	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10ae	90 cc		bcc $107c			bcc 	_AGOExit 					; none then exit
.10b0	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b2	f0 21		beq $10d5			beq 	AGISyntax
.10b4	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10b6	4c 7c 10	jmp $107c			jmp 	_AGOExit
.10b9					AsmGetIndexing:
.10b9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10bd	18		clc				clc
.10be	d0 14		bne $10d4			bne 	_AGIExit 					; no comma, return with CC
.10c0	c8		iny				iny 								; get what SHOULD be X or Y
.10c1	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c3	38		sec				sec 								; subtract 6 bit ASCII of X
.10c4	e9 18		sbc #$18			sbc 	#"X" & $3F
.10c6	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10c8	b0 0b		bcs $10d5			bcs 	AGISyntax
.10ca	aa		tax				tax 								; put in index
.10cb	c8		iny				iny 								; get what follows that, should be the $3A marker
.10cc	b1 28		lda ($28),y			lda 	(codePtr),y
.10ce	c8		iny				iny
.10cf	c9 3a		cmp #$3a			cmp 	#$3A
.10d1	d0 02		bne $10d5			bne 	AGISyntax
.10d3	38		sec				sec 								; return CS and index mode in X
.10d4					_AGIExit:
.10d4	60		rts				rts
.10d5					AGISyntax:
.10d5	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10d7	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10da					AsmWriteInstruction:
.10da	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10dd	98		tya				tya
.10de	48		pha				pha
.10df	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e2	29 02		and #$02			and 	#2
.10e4	f0 2d		beq $1113			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10e6	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10e9	20 4e 11	jsr $114e			jsr 	AWIWriteHex
.10ec	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10ef	20 4e 11	jsr $114e			jsr 	AWIWriteHex
.10f2	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10f5	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.10f8	e0 00		cpx #$00			cpx 	#0
.10fa	f0 0e		beq $110a			beq 	_ASMWEchoExit
.10fc	a5 48		lda $48				lda 	esInt0
.10fe	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.1101	e0 01		cpx #$01			cpx 	#1
.1103	f0 05		beq $110a			beq 	_ASMWEchoExit
.1105	a5 50		lda $50				lda 	esInt1
.1107	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.110a					_ASMWEchoExit:
.110a	8a		txa				txa
.110b	48		pha				pha
.110c	a2 04		ldx #$04		ldx	#4
.110e	20 b9 14	jsr $14b9		jsr	deviceHandler
.1111	68		pla				pla
.1112	aa		tax				tax
.1113					_ASMWNoEcho:
.1113	ad f2 0a	lda $0af2			lda 	finalOpcode
.1116	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.1119	e0 00		cpx #$00			cpx 	#0
.111b	f0 0e		beq $112b			beq 	_ASMWExit
.111d	a5 48		lda $48				lda 	esInt0
.111f	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.1122	e0 01		cpx #$01			cpx 	#1
.1124	f0 05		beq $112b			beq 	_ASMWExit
.1126	a5 50		lda $50				lda 	esInt1
.1128	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.112b					_ASMWExit:
.112b	68		pla				pla
.112c	a8		tay				tay
.112d	60		rts				rts
.112e					AsmWriteByte:
.112e	a0 00		ldy #$00			ldy 	#0
.1130	48		pha				pha
.1131	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1134	85 2a		sta $2a				sta 	temp0
.1136	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1139	85 2b		sta $2b				sta 	temp0+1
.113b	68		pla				pla 								; write out the byte.
.113c	91 2a		sta ($2a),y			sta 	(temp0),y
.113e	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1141	d0 03		bne $1146			bne 	_AWBNoCarry
.1143	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1146					_AWBNoCarry:
.1146	60		rts				rts
.1147					AWIWriteHexSpace:
.1147	48		pha				pha
.1148	a9 20		lda #$20			lda 	#" "
.114a	20 61 11	jsr $1161			jsr 	AWIPrintChar
.114d	68		pla				pla
.114e					AWIWriteHex:
.114e	48		pha				pha
.114f	4a		lsr a				lsr 	a
.1150	4a		lsr a				lsr 	a
.1151	4a		lsr a				lsr 	a
.1152	4a		lsr a				lsr 	a
.1153	20 57 11	jsr $1157			jsr 	AWIPrintNibble
.1156	68		pla				pla
.1157					AWIPrintNibble:
.1157	29 0f		and #$0f			and 	#15
.1159	c9 0a		cmp #$0a			cmp 	#10
.115b	90 02		bcc $115f			bcc 	_AWIPNDigit
.115d	69 06		adc #$06			adc 	#6
.115f					_AWIPNDigit:
.115f	69 30		adc #$30			adc 	#48
.1161					AWIPrintChar:
.1161	85 32		sta $32				sta 	tempShort
.1163	8a		txa				txa
.1164	48		pha				pha
.1165	a5 32		lda $32				lda 	tempShort
.1167	a2 16		ldx #$16		ldx	#22
.1169	20 b9 14	jsr $14b9		jsr	deviceHandler
.116c	68		pla				pla
.116d	aa		tax				tax
.116e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.116f					AssembleOneInstruction:
.116f	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1172	aa		tax				tax
.1173	bd 3f 11	lda $113f,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.1176	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.1179	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.117c	8d f4 0a	sta $0af4			sta 	asmMode
.117f	a5 50		lda $50				lda 	esInt1 						; check if this is a three byte operand.
.1181	d0 05		bne $1188			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1183	20 9e 11	jsr $119e			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.1186	b0 10		bcs $1198			bcs 	_AOISuccess 				; worked ok.
.1188					_AOIThreeBytes:
.1188	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.118b	bd c2 11	lda $11c2,x			lda 	AbsoluteVersionTable,x
.118e	30 09		bmi $1199			bmi 	_AOIError					; not possible, no equivalent.
.1190	8d f4 0a	sta $0af4			sta 	asmMode
.1193	20 9e 11	jsr $119e			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.1196	90 01		bcc $1199			bcc 	_AOIError 					; didn't work.
.1198					_AOISuccess:
.1198	60		rts				rts
.1199					_AOIError:
.1199	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.119b	20 da 14	jsr $14da		jsr	errorHandler
.119e					AssembleAttempt:
.119e	20 a7 11	jsr $11a7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a1	b0 03		bcs $11a6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a3	20 51 13	jsr $1351			jsr 	AssembleSpecialCase
.11a6					_AAExit:
.11a6	60		rts				rts
.11a7					_AADispatch:
.11a7	ad f3 0a	lda $0af3			lda 	asmToken
.11aa	c9 b4		cmp #$b4			cmp 	#TKA_GROUP4
.11ac	b0 11		bcs $11bf			bcs 	_AAGroup4
.11ae	c9 ab		cmp #$ab			cmp 	#TKA_GROUP3
.11b0	b0 0a		bcs $11bc			bcs 	_AAGroup3
.11b2	c9 99		cmp #$99			cmp 	#TKA_GROUP2
.11b4	b0 03		bcs $11b9			bcs 	_AAGroup2
.11b6	4c 97 12	jmp $1297			jmp 	AssembleGroup1
.11b9					_AAGroup2:
.11b9	4c f2 12	jmp $12f2			jmp 	AssembleGroup2
.11bc					_AAGroup3:
.11bc	4c 13 13	jmp $1313			jmp 	AssembleGroup3
.11bf					_AAGroup4:
.11bf	4c 47 13	jmp $1347			jmp 	AssembleGroup4
.11c2					AbsoluteVersionTable:
>11c2	ff						.byte	$FF 			; fail AMD_IMM
>11c3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11c4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11c5	ff						.byte	$FF 			; fail AMD_ABS
>11c6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11c7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11c8	ff						.byte	$FF 			; fail AMD_ABSY
>11c9	ff						.byte	$FF 			; fail AMD_ABSX
>11ca	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11cb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11cc	ff						.byte	$FF 			; fail AMD_ABSIND
>11cd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11ce	ff						.byte	$FF 			; fail AMD_REL
>11cf	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d0					OpcodeTable:
>11d0	01					.byte	$01			; $91 ora
>11d1	21					.byte	$21			; $92 (and)
>11d2	41					.byte	$41			; $93 eor
>11d3	61					.byte	$61			; $94 adc
>11d4	81					.byte	$81			; $95 sta
>11d5	a1					.byte	$a1			; $96 lda
>11d6	c1					.byte	$c1			; $97 cmp
>11d7	e1					.byte	$e1			; $98 sbc
>11d8	02					.byte	$02			; $99 asl
>11d9	22					.byte	$22			; $9a rol
>11da	42					.byte	$42			; $9b lsr
>11db	62					.byte	$62			; $9c ror
>11dc	82					.byte	$82			; $9d stx
>11dd	a2					.byte	$a2			; $9e ldx
>11de	c2					.byte	$c2			; $9f dec
>11df	e2					.byte	$e2			; $a0 inc
>11e0	60					.byte	$60			; $a1 stz
>11e1	20					.byte	$20			; $a2 bit
>11e2	80					.byte	$80			; $a3 sty
>11e3	a0					.byte	$a0			; $a4 ldy
>11e4	c0					.byte	$c0			; $a5 cpy
>11e5	e0					.byte	$e0			; $a6 cpx
>11e6	00					.byte	$00			; $a7 tsb
>11e7	10					.byte	$10			; $a8 trb
>11e8	14					.byte	$14			; $a9 jsr
>11e9	40					.byte	$40			; $aa jmp
>11ea	10					.byte	$10			; $ab bpl
>11eb	30					.byte	$30			; $ac bmi
>11ec	50					.byte	$50			; $ad bvc
>11ed	70					.byte	$70			; $ae bvs
>11ee	90					.byte	$90			; $af bcc
>11ef	b0					.byte	$b0			; $b0 bcs
>11f0	d0					.byte	$d0			; $b1 bne
>11f1	f0					.byte	$f0			; $b2 beq
>11f2	80					.byte	$80			; $b3 bra
>11f3	00					.byte	$00			; $b4 brk
>11f4	08					.byte	$08			; $b5 php
>11f5	18					.byte	$18			; $b6 clc
>11f6	28					.byte	$28			; $b7 plp
>11f7	38					.byte	$38			; $b8 sec
>11f8	40					.byte	$40			; $b9 rti
>11f9	48					.byte	$48			; $ba pha
>11fa	58					.byte	$58			; $bb cli
>11fb	5a					.byte	$5a			; $bc phy
>11fc	60					.byte	$60			; $bd rts
>11fd	68					.byte	$68			; $be pla
>11fe	78					.byte	$78			; $bf sei
>11ff	7a					.byte	$7a			; $c0 ply
>1200	88					.byte	$88			; $c1 dey
>1201	8a					.byte	$8a			; $c2 txa
>1202	98					.byte	$98			; $c3 tya
>1203	9a					.byte	$9a			; $c4 txs
>1204	a8					.byte	$a8			; $c5 tay
>1205	aa					.byte	$aa			; $c6 tax
>1206	b8					.byte	$b8			; $c7 clv
>1207	ba					.byte	$ba			; $c8 tsx
>1208	c8					.byte	$c8			; $c9 iny
>1209	ca					.byte	$ca			; $ca dex
>120a	d8					.byte	$d8			; $cb cld
>120b	da					.byte	$da			; $cc phx
>120c	e8					.byte	$e8			; $cd inx
>120d	ea					.byte	$ea			; $ce nop
>120e	f8					.byte	$f8			; $cf sed
>120f	fa					.byte	$fa			; $d0 plx
.1210					Group2OpcodeAvailability:
>1210	ae					.byte	$ae			; $99 asl $02
>1211	ae					.byte	$ae			; $9a rol $22
>1212	ae					.byte	$ae			; $9b lsr $42
>1213	ae					.byte	$ae			; $9c ror $62
>1214	0a					.byte	$0a			; $9d stx $82
>1215	0b					.byte	$0b			; $9e ldx $a2
>1216	aa					.byte	$aa			; $9f dec $c2
>1217	aa					.byte	$aa			; $a0 inc $e2
>1218	22					.byte	$22			; $a1 stz $60
>1219	aa					.byte	$aa			; $a2 bit $20
>121a	2a					.byte	$2a			; $a3 sty $80
>121b	ab					.byte	$ab			; $a4 ldy $a0
>121c	2b					.byte	$2b			; $a5 cpy $c0
>121d	0b					.byte	$0b			; $a6 cpx $e0
>121e	0a					.byte	$0a			; $a7 tsb $00
>121f	0a					.byte	$0a			; $a8 trb $10
>1220	08					.byte	$08			; $a9 jsr $14
>1221	08					.byte	$08			; $aa jmp $40
.1222					AssemblerSpecialCases:
>1222	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>1225	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>1228	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>122b	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>122e	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1231	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>1234	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>1237	a2 00 89				.byte	$a2,0,$89		; bit #
>123a	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>123d	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1240	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1241					AssembleLabel:
.1241	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1243	c9 3a		cmp #$3a			cmp 	#$3A
.1245	b0 4b		bcs $1292			bcs 	_ALSyntax
.1247	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.1249	a2 00		ldx #$00		ldx	#0
.124b	20 27 3f	jsr $3f27		jsr	variableHandler
.124e	a5 40		lda $40				lda 	esType 						; check integer reference
.1250	c9 80		cmp #$80			cmp 	#$80
.1252	d0 3e		bne $1292			bne 	_ALSyntax
.1254	a5 48		lda $48				lda 	esInt0 						; copy that reference address to temp0
.1256	85 2a		sta $2a				sta 	temp0
.1258	a5 50		lda $50				lda 	esInt1
.125a	85 2b		sta $2b				sta 	temp0+1
.125c	98		tya				tya
.125d	48		pha				pha
.125e	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1261	4a		lsr a				lsr 	a
.1262	90 11		bcc $1275			bcc 	_ALWrite
.1264	a0 00		ldy #$00			ldy 	#0
.1266	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.1269	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.126b	d0 20		bne $128d			bne 	_ALChanged
.126d	c8		iny				iny
.126e	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1271	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1273	d0 18		bne $128d			bne 	_ALChanged
.1275					_ALWrite:
.1275	a0 00		ldy #$00			ldy 	#0
.1277	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.127a	91 2a		sta ($2a),y			sta 	(temp0),y
.127c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.127f	c8		iny				iny
.1280	91 2a		sta ($2a),y			sta 	(temp0),y
.1282	a9 00		lda #$00			lda 	#0
.1284	c8		iny				iny
.1285	91 2a		sta ($2a),y			sta 	(temp0),y
.1287	c8		iny				iny
.1288	91 2a		sta ($2a),y			sta 	(temp0),y
.128a	68		pla				pla
.128b	a8		tay				tay
.128c	60		rts				rts
.128d					_ALChanged:
.128d	a2 25		ldx #$25			ldx 	#ErrorID_Label
.128f	20 da 14	jsr $14da		jsr	errorHandler
.1292					_ALSyntax:
.1292	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1294	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.1297					AssembleGroup1:
.1297	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.129a	c9 95		cmp #$95			cmp 	#TKW_STA
.129c	d0 07		bne $12a5			bne 	_AG1NotStoreImm
.129e	ad f4 0a	lda $0af4			lda 	asmMode
.12a1	c9 00		cmp #$00			cmp 	#AMD_IMM
.12a3	f0 2c		beq $12d1			beq 	AG1ModeError
.12a5					_AG1NotStoreImm:
.12a5	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12a8	bd d6 12	lda $12d6,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12ab	48		pha				pha
.12ac	f0 23		beq $12d1			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12ae	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12b0	d0 02		bne $12b4			bne 	_AG1NotImmediate
.12b2	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12b4					_AG1NotImmediate:
.12b4	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12b6	d0 02		bne $12ba			bne 	_AG1NotZX
.12b8	a2 00		ldx #$00			ldx 	#0
.12ba					_AG1NotZX:
.12ba	68		pla				pla 								; restore length
.12bb	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12bd	b0 10		bcs $12cf			bcs 	AG1Fail
.12bf					AG1ReturnValue:
.12bf	85 32		sta $32				sta 	tempShort 					; save size of operand
.12c1	18		clc				clc
.12c2	bd e4 12	lda $12e4,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12c5	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12c8	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12ca	20 da 10	jsr $10da			jsr 	AsmWriteInstruction 		; output instruction.
.12cd	38		sec				sec
.12ce	60		rts				rts
.12cf					AG1Fail:
.12cf	18		clc				clc
.12d0	60		rts				rts
.12d1					AG1ModeError:
.12d1	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.12d3	20 da 14	jsr $14da		jsr	errorHandler
.12d6					AMDOperandSize:
>12d6	01 01 00 02					.byte 	1,1,0,2
>12da	01 01 02 02					.byte 	1,1,2,2
>12de	01 01 02 02					.byte 	1,1,2,2
>12e2	01 01						.byte 	1,1
.12e4					AMDOffsetFromBase:
>12e4	00 04 08 0c					.byte 	0,4,8,12
>12e8	10 14 18 1c					.byte	16,20,24,28
>12ec	11 00 00 00					.byte 	17,0,0,0
>12f0	00 00						.byte 	0,0
.12f2					AssembleGroup2:
.12f2	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.12f5	c9 08		cmp #$08			cmp 	#8
.12f7	b0 18		bcs $1311			bcs 	_AG2Fail
.12f9	85 2a		sta $2a				sta 	temp0 						; save in temp9
.12fb	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.12fe	bd 77 11	lda $1177,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1301					_AG2Shift:
.1301	4a		lsr a				lsr 	a
.1302	c6 2a		dec $2a				dec 	temp0
.1304	10 fb		bpl $1301			bpl 	_AG2Shift
.1306	90 09		bcc $1311			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.1308	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.130b	bd d6 12	lda $12d6,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.130e	4c bf 12	jmp $12bf			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1311					_AG2Fail:
.1311	18		clc				clc
.1312	60		rts				rts
.1313					AssembleGroup3:
.1313	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.1316	4a		lsr a				lsr 	a
.1317	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.1319	90 21		bcc $133c			bcc 	_AG3Default
.131b	38		sec				sec	 								; calculate branch offset
.131c	a5 48		lda $48				lda		esInt0
.131e	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1321	aa		tax				tax
.1322	a5 50		lda $50				lda		esInt1
.1324	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.1327	85 50		sta $50				sta 	esInt1
.1329	8a		txa				txa 								; add 126, now 128 too many.
.132a	18		clc				clc 								; we can use this to check the range
.132b	69 7e		adc #$7e			adc 	#126
.132d	85 48		sta $48				sta 	esInt0
.132f	90 02		bcc $1333			bcc 	_AG3NoCarry
.1331	e6 50		inc $50				inc 	esInt1
.1333					_AG3NoCarry:
.1333	a5 50		lda $50				lda 	esInt1 						; check in range.
.1335	d0 0b		bne $1342			bne 	_AG3Range
.1337	a5 48		lda $48				lda 	esInt0 						; fix up branch distance
.1339	38		sec				sec
.133a	e9 80		sbc #$80			sbc 	#128
.133c					_AG3Default:
.133c	85 48		sta $48				sta 	esInt0
.133e					_AG3ExitOk:
.133e	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1340	d0 07		bne $1349			bne 	AG4Write
.1342					_AG3Range:
.1342	a2 24		ldx #$24			ldx 	#ErrorID_Branch
.1344	20 da 14	jsr $14da		jsr	errorHandler
.1347					AssembleGroup4:
.1347	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1349					AG4Write:
.1349	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.134c	20 da 10	jsr $10da			jsr 	AsmWriteInstruction 		; output instruction.
.134f	38		sec				sec
.1350	60		rts				rts
.1351					AssembleSpecialCase:
.1351	a2 00		ldx #$00			ldx 	#0
.1353					_ASCScan:
.1353	bd 22 12	lda $1222,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.1356	cd f3 0a	cmp $0af3			cmp 	asmToken
.1359	d0 08		bne $1363			bne 	_ASCNext
.135b	bd 23 12	lda $1223,x			lda 	AssemblerSpecialCases+1,x
.135e	cd f4 0a	cmp $0af4			cmp 	asmMode
.1361	f0 0a		beq $136d			beq 	_ASCFound
.1363					_ASCNext:
.1363	e8		inx				inx									; next entry
.1364	e8		inx				inx
.1365	e8		inx				inx
.1366	bd 22 12	lda $1222,x			lda 	AssemblerSpecialCases,x 	; until table ends
.1369	d0 e8		bne $1353			bne 	_ASCScan
.136b	18		clc				clc
.136c	60		rts				rts
.136d					_ASCFound:
.136d	bd 24 12	lda $1224,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.1370	48		pha				pha
.1371	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1374	bd d6 12	lda $12d6,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.1377	aa		tax				tax
.1378	68		pla				pla 								; opcode back
.1379	20 da 10	jsr $10da			jsr 	AsmWriteInstruction 		; output instruction.
.137c	38		sec				sec
.137d	60		rts				rts

;******  Return to file: assembler/assembler.asm

.137e					assemblerHandler:
.137e	7c 81 13	jmp ($1381,x)			jmp 	(assemblerVectors,x)
.1381					assemblerVectors:
>1381	6f 11					.word AssembleOneInstruction ; index 0
>1383	41 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.1385					section_end_assembler:
.1385					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.1385					X16Break:
.1385	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.1388	f0 01		beq $138b			beq 	_IsBreak
.138a	60		rts				rts
.138b					_IsBreak:
.138b	a2 20		ldx #$20			ldx 	#ErrorID_Break
.138d	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1390					ExternSave:
.1390	98		tya				tya
.1391	48		pha				pha
.1392	20 e0 13	jsr $13e0			jsr 	ExternGetLength 			; get length of file into A name YX
.1395	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1398	a9 01		lda #$01			lda 	#1
.139a	a2 08		ldx #$08			ldx 	#8	 						; device #8
.139c	a0 00		ldy #$00			ldy 	#0
.139e	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13a1	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.13a3	85 2a		sta $2a				sta 	temp0
.13a5	a5 51		lda $51				lda 	esInt1+1
.13a7	85 2b		sta $2b				sta 	temp0+1
.13a9	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.13ab	a4 52		ldy $52				ldy 	esInt1+2
.13ad	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13af	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13b2	b0 03		bcs $13b7			bcs 	_ESSave
.13b4	68		pla				pla
.13b5	a8		tay				tay
.13b6	60		rts				rts
.13b7					_ESSave:
.13b7	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.13b9	20 da 14	jsr $14da		jsr	errorHandler
.13bc					ExternLoad:
.13bc	98		tya				tya
.13bd	48		pha				pha
.13be	20 e0 13	jsr $13e0			jsr 	ExternGetLength 			; get length of file into A name YX
.13c1	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13c4	a9 01		lda #$01			lda 	#1
.13c6	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13c8	a0 00		ldy #$00			ldy 	#0
.13ca	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13cd	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.13cf	a4 51		ldy $51				ldy 	esInt1+1
.13d1	a9 00		lda #$00			lda 	#0 							; load command
.13d3	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13d6	b0 03		bcs $13db			bcs 	_ESLoad
.13d8	68		pla				pla
.13d9	a8		tay				tay
.13da	60		rts				rts
.13db					_ESLoad:
.13db	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.13dd	20 da 14	jsr $14da		jsr	errorHandler
.13e0					ExternGetLength:
.13e0	a5 48		lda $48				lda 	esInt0 						; length into A.
.13e2	85 2a		sta $2a				sta 	temp0
.13e4	a5 50		lda $50				lda 	esInt1
.13e6	85 2b		sta $2b				sta 	temp0+1
.13e8	a0 00		ldy #$00			ldy 	#0
.13ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.13ec	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.13ee	a4 50		ldy $50				ldy 	esInt1
.13f0	e8		inx				inx 								; advance over the length pointer.
.13f1	d0 01		bne $13f4			bne 	_ESNoCarry
.13f3	c8		iny				iny
.13f4					_ESNoCarry:
.13f4	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.13f5					IOInitialise:
.13f5	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.13f7	20 20 14	jsr $1420			jsr 	IOPrintChar
.13fa	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.13fc	20 4c 14	jsr $144c			jsr 	IOInk
.13ff	a9 00		lda #$00			lda 	#0
.1401	20 60 14	jsr $1460			jsr 	IOPaper
.1404	20 08 14	jsr $1408			jsr 	IOClearScreen
.1407	60		rts				rts
.1408					IOClearScreen:
.1408	48		pha				pha
.1409	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.140b	20 20 14	jsr $1420			jsr 	IOPrintChar
.140e	68		pla				pla
.140f	60		rts				rts
.1410					IONewLine:
.1410	48		pha				pha
.1411	a9 0d		lda #$0d			lda 	#13
.1413	20 20 14	jsr $1420			jsr 	IOPrintChar
.1416	68		pla				pla
.1417	60		rts				rts
.1418					IOTab:
.1418	48		pha				pha
.1419	a9 20		lda #$20			lda 	#32
.141b	20 20 14	jsr $1420			jsr 	IOPrintChar
.141e	68		pla				pla
.141f	60		rts				rts
.1420					IOPrintAscii:
.1420					IOPrintChar:
.1420	aa		tax				tax 								; save in X so we can save Y
.1421	5a		phy				phy
.1422	8a		txa				txa
.1423	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1425	d0 02		bne $1429			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1427	a9 14		lda #$14			lda 	#$14
.1429					_IOPCNotBS:
.1429	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.142c	7a		ply				ply
.142d	60		rts				rts
.142e					IOInkey:
.142e	98		tya				tya
.142f	48		pha				pha
.1430	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1433	85 32		sta $32				sta 	tempShort
.1435	68		pla				pla
.1436	a8		tay				tay
.1437	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1439	f0 10		beq $144b			beq 	_IOIExit
.143b	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.143d	f0 0c		beq $144b			beq 	_IOIExit
.143f	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1441	f0 06		beq $1449			beq 	_IOIBackspace
.1443	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1445	90 e7		bcc $142e			bcc 	IOInkey
.1447	b0 02		bcs $144b			bcs 	_IOIExit
.1449					_IOIBackspace:
.1449	a9 08		lda #$08			lda 	#8 							; return chr(8)
.144b					_IOIExit:
.144b	60		rts				rts
.144c					IOInk:
.144c	48		pha				pha
.144d	29 07		and #$07			and 	#7 							; 8 primaries
.144f	aa		tax				tax
.1450	bd 58 14	lda $1458,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1453	20 20 14	jsr $1420			jsr 	IOPrintChar
.1456	68		pla				pla
.1457	60		rts				rts
.1458					_IOColourTable:
>1458	90						.byte 	$90 					; 0 Black
>1459	96						.byte 	$96 					; 1 Red
>145a	1e						.byte 	$1E 					; 2 Green
>145b	9e						.byte 	$9E 					; 3 Yellow
>145c	9a						.byte 	$9A 					; 4 Blue
>145d	9c						.byte 	$9C 					; 5 Magenta
>145e	9f						.byte 	$9F 					; 6 Cyan
>145f	05						.byte 	$05 					; 7 White
.1460					IOPaper:
.1460	48		pha				pha
.1461	48		pha				pha
.1462	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.1464	20 20 14	jsr $1420			jsr 	IOPrintChar 			; and then swap them again.
.1467	68		pla				pla
.1468	20 4c 14	jsr $144c			jsr 	IOInk
.146b	a9 01		lda #$01			lda 	#1
.146d	20 20 14	jsr $1420			jsr 	IOPrintChar
.1470	68		pla				pla
.1471	60		rts				rts
.1472					IOLocate:
.1472	48		pha				pha
.1473	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1475	20 20 14	jsr $1420			jsr 	IOPrintChar
.1478	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.147a	20 81 14	jsr $1481			jsr 	_IOLoc2
.147d	68		pla				pla
.147e	a8		tay				tay
.147f	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1481					_IOLoc2:
.1481	c0 00		cpy #$00			cpy 	#0
.1483	f0 06		beq $148b			beq 	_IOLocExit
.1485	20 20 14	jsr $1420			jsr 	IOPrintChar
.1488	88		dey				dey
.1489	d0 f6		bne $1481			bne 	_IOLoc2
.148b					_IOLocExit:
.148b	60		rts				rts
.148c					IOInput:
.148c	a9 00		lda #$00			lda 	#0
.148e	8d f6 0a	sta $0af6			sta 	bufferCount
.1491					_IOILoop:
.1491	20 cf ff	jsr $ffcf			jsr 	$FFCF
.1494	c9 0d		cmp #$0d			cmp 	#13
.1496	f0 10		beq $14a8			beq 	_IOIExit
.1498	ae f6 0a	ldx $0af6			ldx 	bufferCount
.149b	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.149d	f0 f2		beq $1491			beq 	_IOILoop
.149f	ee f6 0a	inc $0af6			inc 	bufferCount
.14a2	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14a5	4c 91 14	jmp $1491			jmp 	_IOILoop
.14a8					_IOIExit:
.14a8	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14aa	85 2a		sta $2a				sta 	temp0
.14ac	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14ae	85 2b		sta $2b				sta 	1+(temp0)
.14b0	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14b1					IOReadTimer:
.14b1	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14b4	48		pha				pha
.14b5	8a		txa				txa
.14b6	a8		tay				tay
.14b7	68		pla				pla
.14b8	60		rts				rts

;******  Return to file: device/device.asm

.14b9					deviceHandler:
.14b9	7c bc 14	jmp ($14bc,x)			jmp 	(deviceVectors,x)
.14bc					deviceVectors:
>14bc	85 13					.word X16Break             ; index 0
>14be	08 14					.word IOClearScreen        ; index 2
>14c0	10 14					.word IONewLine            ; index 4
>14c2	f5 13					.word IOInitialise         ; index 6
>14c4	4c 14					.word IOInk                ; index 8
>14c6	2e 14					.word IOInkey              ; index 10
>14c8	8c 14					.word IOInput              ; index 12
>14ca	bc 13					.word ExternLoad           ; index 14
>14cc	72 14					.word IOLocate             ; index 16
>14ce	60 14					.word IOPaper              ; index 18
>14d0	20 14					.word IOPrintChar          ; index 20
>14d2	20 14					.word IOPrintAscii         ; index 22
>14d4	90 13					.word ExternSave           ; index 24
>14d6	18 14					.word IOTab                ; index 26
>14d8	b1 14					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.14da					section_end_device:
.14da					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.14da					ErrorHandler:
.14da	8a		txa				txa
.14db	48		pha				pha
.14dc	a9 01		lda #$01			lda 	#1 							; red
.14de	a2 08		ldx #$08		ldx	#8
.14e0	20 b9 14	jsr $14b9		jsr	deviceHandler
.14e3	68		pla				pla
.14e4	aa		tax				tax
.14e5	a9 50		lda #$50			lda 	#(ErrorTextList) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	ca		dex		_EHFind:dex									; errors start at 1
.14ee	f0 10		beq $1500			beq 	_EHFound
.14f0	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.14f2	38		sec				sec
.14f3	a5 2a		lda $2a				lda 	temp0
.14f5	71 2a		adc ($2a),y			adc 	(temp0),y
.14f7	85 2a		sta $2a				sta 	temp0
.14f9	90 f2		bcc $14ed			bcc 	_EHFind
.14fb	e6 2b		inc $2b				inc 	temp0+1
.14fd	4c ed 14	jmp $14ed			jmp 	_EHFind
.1500					_EHFound:
.1500	20 da 17	jsr $17da			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1503	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1505	b1 28		lda ($28),y			lda 	(codePtr),y
.1507	f0 39		beq $1542			beq 	_EHNoLine
.1509	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.150b	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.150e	90 32		bcc $1542			bcc 	_EHNoLine
.1510	a9 4c		lda #$4c			lda 	#(EHAtMsg) & $FF
.1512	85 2a		sta $2a				sta 	temp0
.1514	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1516	85 2b		sta $2b				sta 	1+(temp0)
.1518	20 da 17	jsr $17da			jsr 	EHPrintAscii
.151b	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.151d	a2 00		ldx #$00			ldx 	#0
.151f	b1 28		lda ($28),y			lda 	(codePtr),y
.1521	95 48		sta $48,x			sta 	esInt0,x
.1523	c8		iny				iny
.1524	b1 28		lda ($28),y			lda 	(codePtr),y
.1526	95 50		sta $50,x			sta 	esInt1,x
.1528	a9 00		lda #$00			lda 	#0
.152a	95 58		sta $58,x			sta 	esInt2,x
.152c	95 60		sta $60,x			sta 	esInt3,x
.152e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1530	85 2a		sta $2a				sta 	temp0
.1532	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1534	85 2b		sta $2b				sta 	1+(temp0)
.1536	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1538	a9 00		lda #$00			lda 	#0							; stack position zero.
.153a	a2 0c		ldx #$0c		ldx	#12
.153c	20 6d 31	jsr $316d		jsr	mainHandler
.153f	20 da 17	jsr $17da			jsr 	EHPrintAscii
.1542					_EHNoLine:
.1542	a2 04		ldx #$04		ldx	#4
.1544	20 b9 14	jsr $14b9		jsr	deviceHandler
.1547	a2 02		ldx #$02		ldx	#2
.1549	20 e2 1a	jsr $1ae2		jsr	interactionHandler
.154c					EHAtMsg:
>154c	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.1550					ErrorTextList:
>1550	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1558	20 6e 6f 74 20 50 72 65 73 65 6e 74
>1564	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>156c	45 72 72 6f 72
>1571	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>1579	64 69 73 61 62 6c 65 64
>1581	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>1589	6f 6e 20 66 61 69 6c 65 64
>1592	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>159a	42 79 20 5a 65 72 6f
>15a1	04 53 74 6f 70				.text 4,"Stop"
>15a6	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ae	73 6d 61 74 63 68
>15b4	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15bc	20 56 61 6c 75 65
>15c2	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15ca	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>15d8	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>15e0	20 63 6f 6d 6d 61
>15e6	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>15ee	20 72 65 66 65 72 65 6e 63 65
>15f8	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>1600	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>160e	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1616	74 6f 6f 20 6c 6f 6e 67
>161e	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1626	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1633	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>163b	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1648	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1650	74 68 6f 75 74 20 46 4f 52
>1659	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1661	74 68 6f 75 74 20 57 48 49 4c 45
>166c	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>1674	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1681	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>1689	54 20 69 6e 64 65 78
>1690	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>1698	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16a8	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16b0	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16bf	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16c7	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>16d7	63 65
>16d9	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>16e1	20 50 72 6f 63 65 64 75 72 65
>16eb	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>16f3	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1703	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>170b	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1719	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>1721	75 69 72 65 73 20 61 72 72 61 79
>172c	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1734	61 79 20 69 6e 64 65 78
>173c	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>1744	64 61 74 61
>1748	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>1750	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>175d	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1765	69 6c 65 64
>1769	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1771	69 6c 65 64
>1775	05 42 72 65 61 6b			.text 5,"Break"
>177b	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>1783	6d 65 6d 6f 72 79
>1789	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>1791	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17a0	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17a8	72 61 6e 64 2f 4d 6f 64 65
>17b1	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>17b9	6f 75 74 20 6f 66 20 72 61 6e 67 65
>17c5	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>17cd	68 61 6e 67 65 64 20 76 61 6c 75 65
>17d9	00					.byte 0

;******  Return to file: error/errorhandler.asm

.17da					EHPrintAscii:
.17da	a0 00		ldy #$00			ldy 	#0
.17dc	b1 2a		lda ($2a),y			lda 	(temp0),y
.17de	aa		tax				tax
.17df	f0 0f		beq $17f0			beq 	_EHPExit
.17e1					_EHPLoop:
.17e1	c8		iny				iny
.17e2	8a		txa				txa
.17e3	48		pha				pha
.17e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.17e6	a2 16		ldx #$16		ldx	#22
.17e8	20 b9 14	jsr $14b9		jsr	deviceHandler
.17eb	68		pla				pla
.17ec	aa		tax				tax
.17ed	ca		dex				dex
.17ee	d0 f1		bne $17e1			bne 	_EHPLoop
.17f0					_EHPExit:
.17f0	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.17f1					section_end_error:
.17f1					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.17f1					ExtensionHandler:
.17f1	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.17f3	d0 08		bne $17fd			bne 	_ExtensionUnary 			; is passed in A.
.17f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.17f7	c8		iny				iny
.17f8	0a		asl a				asl 	a
.17f9	aa		tax				tax
.17fa	7c fb 17	jmp ($17fb,x)			jmp 	(Group2Vectors-12,x)
.17fd					_ExtensionUnary:
.17fd	48		pha				pha 								; save stack pos in A
.17fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1800	c8		iny				iny
.1801	0a		asl a				asl 	a
.1802	aa		tax				tax
.1803	68		pla				pla 								; restore stack pos and call group3 command.
.1804	7c 01 18	jmp ($1801,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1807					Group2Vectors:
>1807	3c 18					.word	Command_VPoke            ; $86 vpoke
>1809	3f 18					.word	Command_VDoke            ; $87 vdoke
>180b	19 18					.word	Command_VLoad            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.180d					Group3Vectors:
>180d	80 18					.word	Command_VPeek            ; $86 vpeek(
>180f	83 18					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1811					XEvaluateInteger:
.1811	8a		txa				txa
.1812	a2 06		ldx #$06		ldx	#6
.1814	20 6d 31	jsr $316d		jsr	mainHandler
.1817	aa		tax				tax
.1818	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.1819					Command_VLoad:
.1819	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.181b	20 67 2a	jsr $2a67			jsr 	EvaluateString
.181e	e8		inx				inx
.181f	20 03 30	jsr $3003			jsr 	MInt32False
.1822	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1824	95 48		sta $48,x			sta 	esInt0,x
.1826	a5 36		lda $36				lda 	lowMemory+1
.1828	95 50		sta $50,x			sta 	esInt1,x
.182a	ca		dex				dex
.182b	a2 0e		ldx #$0e		ldx	#14
.182d	20 b9 14	jsr $14b9		jsr	deviceHandler
.1830	a5 49		lda $49				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1832	85 2a		sta $2a				sta 	temp0
.1834	a5 51		lda $51				lda 	esInt1+1
.1836	85 2b		sta $2b				sta 	temp0+1
.1838	20 a1 18	jsr $18a1			jsr 	LoadVRAMFile 					; load the VRAM file in.
.183b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.183c					Command_VPoke:
.183c	38		sec				sec 						; one byte , CS
.183d	b0 01		bcs $1840			bcs 	CmdVideoWrite
.183f					Command_VDoke:
.183f	18		clc				clc 						; two bytes, CC
.1840					CmdVideoWrite:
.1840	08		php				php 						; save one or two btes
.1841	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1843	20 11 18	jsr $1811			jsr 	XEvaluateInteger
.1846	20 83 30	jsr $3083			jsr 	CheckComma
.1849	e8		inx				inx
.184a	20 11 18	jsr $1811			jsr 	XEvaluateInteger
.184d	ca		dex				dex
.184e	20 5f 18	jsr $185f			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1851	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.1853	8d 23 9f	sta $9f23			sta 	$9F23
.1856	28		plp				plp 						; if it was Poke then exit
.1857	b0 05		bcs $185e			bcs 	_CVWExit
.1859	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.185b	8d 23 9f	sta $9f23			sta 	$9F23
.185e					_CVWExit:
.185e	60		rts				rts
.185f					SetUpTOSVRamAddress:
.185f	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1861	29 01		and #$01			and 	#1
.1863	15 60		ora $60,x			ora 	esInt3,x
.1865	d0 14		bne $187b			bne 	CVWValue
.1867	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.1869	8d 20 9f	sta $9f20			sta 	$9F20
.186c	b5 50		lda $50,x			lda 	esInt1,x
.186e	8d 21 9f	sta $9f21			sta	 	$9F21
.1871	b5 58		lda $58,x			lda 	esInt2,x
.1873	29 01		and #$01			and 	#1
.1875	09 10		ora #$10			ora 	#$10 				; step 1.
.1877	8d 22 9f	sta $9f22			sta 	$9F22
.187a	60		rts				rts
.187b					CVWValue:
.187b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.187d	20 da 14	jsr $14da		jsr	errorHandler
.1880					Command_VPeek:
.1880	38		sec				sec 						; one byte , CS
.1881	b0 01		bcs $1884			bcs 	CmdVideoRead
.1883					Command_VDeek:
.1883	18		clc				clc 						; two bytes, CC
.1884					CmdVideoRead:
.1884	08		php				php 						; save action on stack.
.1885	aa		tax				tax 						; save stack position
.1886	20 11 18	jsr $1811			jsr 	XEvaluateInteger 	; address
.1889	20 76 30	jsr $3076			jsr 	CheckRightParen 	; closing right bracket.
.188c	20 5f 18	jsr $185f			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.188f	20 03 30	jsr $3003			jsr 	MInt32False 		; zero return.
.1892	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1895	95 48		sta $48,x			sta 	esInt0,x
.1897	28		plp				plp 						; check if DOKE (carry was clear)
.1898	b0 05		bcs $189f			bcs 	_CVRExit
.189a	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.189d	95 50		sta $50,x			sta 	esInt1,x
.189f					_CVRExit:
.189f	8a		txa				txa 						; return X position.
.18a0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0be6					compressMode:
>0be6							.fill 	1
.18a1					LoadVRAMFile:
.18a1					_LVRLoop:
.18a1	20 f1 18	jsr $18f1			jsr 	LVFGet 						; get the next (never access direct)
.18a4	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.18a6	f0 3a		beq $18e2			beq 	_LVRExit
.18a8	b0 39		bcs $18e3			bcs 	_LVRLoad 					; load data in ?
.18aa	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.18ac	90 09		bcc $18b7			bcc 	_LVRSetAddress
.18ae	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.18b0	90 29		bcc $18db			bcc 	_LVRSetCompress
.18b2	a2 01		ldx #$01			ldx 	#ErrorID_missing
.18b4	20 da 14	jsr $14da		jsr	errorHandler
.18b7					_LVRSetAddress:
.18b7	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.18b9	20 f1 18	jsr $18f1			jsr 	LVFGet
.18bc	85 2c		sta $2c				sta 	temp1
.18be	a9 00		lda #$00			lda 	#0
.18c0	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.18c2	66 2c		ror $2c				ror 	temp1
.18c4	6a		ror a				ror		a
.18c5	46 2d		lsr $2d				lsr 	temp1+1
.18c7	66 2c		ror $2c				ror 	temp1
.18c9	6a		ror a				ror		a
.18ca	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.18cd	a5 2c		lda $2c				lda 	temp1
.18cf	8d 21 9f	sta $9f21			sta 	$9F21
.18d2	a5 2d		lda $2d				lda 	temp1+1
.18d4	09 10		ora #$10			ora 	#$10
.18d6	8d 22 9f	sta $9f22			sta 	$9F22
.18d9	d0 c6		bne $18a1			bne 	_LVRLoop
.18db					_LVRSetCompress:
.18db	29 07		and #$07			and 	#7
.18dd	8d e6 0b	sta $0be6			sta 	compressMode
.18e0	10 bf		bpl $18a1			bpl 	_LVRLoop
.18e2					_LVRExit:
.18e2	60		rts				rts
.18e3					_LVRLoad:
.18e3	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.18e5	aa		tax				tax
.18e6					_LVRLCopy:
.18e6	20 f1 18	jsr $18f1			jsr 	LVFGet 						; write to data.
.18e9	8d 23 9f	sta $9f23			sta 	$9F23
.18ec	ca		dex				dex
.18ed	d0 f7		bne $18e6			bne 	_LVRLCopy
.18ef	f0 b0		beq $18a1			beq 	_LVRLoop
.18f1	84 32		sty $32		LVFGet:	sty 	tempShort
.18f3	a0 00		ldy #$00			ldy 	#0
.18f5	b1 2a		lda ($2a),y			lda 	(temp0),y
.18f7	a4 32		ldy $32				ldy	 	tempShort
.18f9	e6 2a		inc $2a				inc 	temp0
.18fb	d0 02		bne $18ff			bne 	_LVFGExit
.18fd	e6 2b		inc $2b				inc 	temp0+1
.18ff					_LVFGExit:
.18ff	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1900					section_end_extension:
.1900					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1900					floatingpointHandler:
.1900	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1902	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: basic.asm

.1905					section_end_floatingpoint:
.1905					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1905					ColdStartEntry:
.1905	a2 ff		ldx #$ff			ldx 	#$FF
.1907	9a		txs				txs
.1908	a2 02		ldx #$02		ldx	#2
.190a	20 b9 14	jsr $14b9		jsr	deviceHandler
.190d	a0 ff		ldy #$ff			ldy 	#255
.190f					_CSBanner:
.190f	c8		iny				iny
.1910	b9 36 19	lda $1936,y			lda 	Intro,y
.1913	f0 14		beq $1929			beq 	_CSStart
.1915	c9 08		cmp #$08			cmp 	#8
.1917	90 08		bcc $1921			bcc 	_CSInk
.1919	a2 16		ldx #$16		ldx	#22
.191b	20 b9 14	jsr $14b9		jsr	deviceHandler
.191e	4c 0f 19	jmp $190f			jmp 	_CSBanner
.1921					_CSInk:
.1921	a2 08		ldx #$08		ldx	#8
.1923	20 b9 14	jsr $14b9		jsr	deviceHandler
.1926	4c 0f 19	jmp $190f			jmp 	_CSBanner
.1929					_CSStart:
.1929	a2 10		ldx #$10		ldx	#16
.192b	20 6d 31	jsr $316d		jsr	mainHandler
.192e	a2 02		ldx #$02		ldx	#2
.1930	20 6d 31	jsr $316d		jsr	mainHandler
.1933	4c 4c 1a	jmp $1a4c			jmp 	WarmStartEntry
>1936	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>193e	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>194e	20 2a 2a 2a 0d 0d
>1954	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>195c	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>196c	32 30 32 31 0d 0d
>1972	02 42 61 73 69 63 20				.text 	2,"Basic "
>1979	30 2e 31 36					.text "0.16"
>197d	20 28						.text 	" ("
>197f	31 36 2d 4d 61 72 2d 32				.text "16-Mar-2021"
>1987	30 32 31
>198a	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.198e					DeleteLine:
.198e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1991	85 2a		sta $2a				sta 	temp0
.1993	ad c9 0a	lda $0ac9			lda 	basePage+1
.1996	85 2b		sta $2b				sta 	temp0+1
.1998	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.199a	a5 48		lda $48				lda 	esInt0
.199c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.199e	d0 07		bne $19a7			bne 	_DLNext
.19a0	c8		iny				iny
.19a1	a5 50		lda $50				lda 	esInt1
.19a3	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.19a5	f0 0a		beq $19b1			beq 	_DLFound
.19a7	20 cf 19	jsr $19cf	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.19aa	d0 ec		bne $1998			bne 	_DLLoop
.19ac	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.19ae	b1 2a		lda ($2a),y			lda 	(temp0),y
.19b0	60		rts				rts
.19b1					_DLFound:
.19b1	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.19b3	b1 2a		lda ($2a),y			lda 	(temp0),y
.19b5	a8		tay				tay
.19b6	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.19b8					_DLCopyDown:
.19b8	b1 2a		lda ($2a),y			lda 	(temp0),y
.19ba	81 2a		sta ($2a,x)			sta 	(temp0,x)
.19bc	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.19be	d0 02		bne $19c2			bne 	_DLNoCarry
.19c0	e6 2b		inc $2b				inc 	temp0+1
.19c2					_DLNoCarry:
.19c2	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.19c4	c5 35		cmp $35				cmp 	lowMemory
.19c6	d0 f0		bne $19b8			bne 	_DLCopyDown
.19c8	a5 2b		lda $2b				lda 	temp0+1
.19ca	c5 36		cmp $36				cmp 	lowMemory+1
.19cc	d0 ea		bne $19b8			bne 	_DLCopyDown
.19ce	60		rts				rts
.19cf					IAdvanceTemp0:
.19cf	84 32		sty $32				sty 	tempShort
.19d1	18		clc				clc
.19d2	a0 00		ldy #$00			ldy 	#0
.19d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.19d6	65 2a		adc $2a				adc 	temp0
.19d8	85 2a		sta $2a				sta 	temp0
.19da	90 02		bcc $19de			bcc 	_IATNoCarry
.19dc	e6 2b		inc $2b				inc 	temp0+1
.19de					_IATNoCarry:
.19de	b1 2a		lda ($2a),y			lda 	(temp0),y
.19e0	a4 32		ldy $32				ldy 	tempShort
.19e2	c9 00		cmp #$00			cmp		#0
.19e4	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.19e5					InsertLine:
.19e5	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.19e8	85 2a		sta $2a				sta 	temp0
.19ea	ad c9 0a	lda $0ac9			lda 	basePage+1
.19ed	85 2b		sta $2b				sta 	temp0+1
.19ef					_ILLoop:
.19ef	a0 01		ldy #$01			ldy 	#1
.19f1	b1 2a		lda ($2a),y			lda 	(temp0),y
.19f3	c5 48		cmp $48				cmp 	esInt0
.19f5	c8		iny				iny
.19f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.19f8	e5 50		sbc $50				sbc 	esInt1
.19fa	b0 05		bcs $1a01			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.19fc	20 cf 19	jsr $19cf			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.19ff	d0 ee		bne $19ef			bne 	_ILLoop
.1a01					_ILFound:
.1a01	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1a03	85 2c		sta $2c				sta 	temp1
.1a05	a5 36		lda $36				lda 	lowMemory+1
.1a07	85 2d		sta $2d				sta 	temp1+1
.1a09	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1a0c	18		clc				clc
.1a0d	69 03		adc #$03			adc 	#3
.1a0f	a8		tay				tay
.1a10	a2 00		ldx #$00			ldx 	#0
.1a12	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.1a14	91 2c		sta ($2c),y			sta 	(temp1),y
.1a16	a5 2c		lda $2c				lda 	temp1
.1a18	c5 2a		cmp $2a				cmp 	temp0
.1a1a	d0 06		bne $1a22			bne 	_ILMNext
.1a1c	a5 2d		lda $2d				lda 	temp1+1
.1a1e	c5 2b		cmp $2b				cmp 	temp0+1
.1a20	f0 0b		beq $1a2d			beq 	_ILMCopy
.1a22					_ILMNext:
.1a22	a5 2c		lda $2c				lda 	temp1
.1a24	d0 02		bne $1a28			bne 	_ILNoBorrow
.1a26	c6 2d		dec $2d				dec 	temp1+1
.1a28					_ILNoBorrow:
.1a28	c6 2c		dec $2c				dec 	temp1
.1a2a	4c 12 1a	jmp $1a12			jmp 	_ILMove
.1a2d					_ILMCopy:
.1a2d	98		tya				tya 								; Y is the offset of the new line.
.1a2e	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1a30	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1a32	a5 48		lda $48				lda 	esInt0
.1a34	91 2a		sta ($2a),y			sta 	(temp0),y
.1a36	c8		iny				iny
.1a37	a5 50		lda $50				lda 	esInt1
.1a39	91 2a		sta ($2a),y			sta 	(temp0),y
.1a3b	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1a3d					_ILMCopy2:
.1a3d	b1 28		lda ($28),y			lda 	(codePtr),y
.1a3f	c8		iny				iny
.1a40	c8		iny				iny
.1a41	c8		iny				iny
.1a42	91 2a		sta ($2a),y			sta 	(temp0),y
.1a44	88		dey				dey
.1a45	88		dey				dey
.1a46	cc 24 0d	cpy $0d24			cpy 	tokenBufferIndex
.1a49	d0 f2		bne $1a3d			bne 	_ILMCopy2
.1a4b	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1a4c					WarmStartEntry:
.1a4c	a2 ff		ldx #$ff			ldx 	#$FF
.1a4e	9a		txs				txs
.1a4f	a9 02		lda #$02			lda 	#2							; green text.
.1a51	a2 08		ldx #$08		ldx	#8
.1a53	20 b9 14	jsr $14b9		jsr	deviceHandler
.1a56	a2 0c		ldx #$0c		ldx	#12
.1a58	20 b9 14	jsr $14b9		jsr	deviceHandler
.1a5b	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1a5d	85 28		sta $28				sta 	codePtr
.1a5f	a5 2b		lda $2b				lda 	temp0+1
.1a61	85 29		sta $29				sta 	codePtr+1
.1a63	a2 04		ldx #$04		ldx	#4
.1a65	20 b9 14	jsr $14b9		jsr	deviceHandler
.1a68	a2 06		ldx #$06		ldx	#6
.1a6a	20 18 3c	jsr $3c18		jsr	tokeniserHandler
.1a6d	90 25		bcc $1a94			bcc 	WSEError 					; failed.
.1a6f	a9 21		lda #$21			lda 	#(tokenHeader) & $FF
.1a71	85 28		sta $28				sta 	codePtr
.1a73	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1a75	85 29		sta $29				sta 	1+(codePtr)
.1a77	ad 24 0c	lda $0c24			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1a7a	c9 80		cmp #$80			cmp 	#$80
.1a7c	f0 ce		beq $1a4c			beq 	WarmStartEntry
.1a7e	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1a80	c9 40		cmp #$40			cmp 	#$40
.1a82	f0 15		beq $1a99			beq 	HasLineNumber
.1a84	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1a86	8d 21 0c	sta $0c21			sta 	tokenHeader 				; fake program line.
.1a89	8d 22 0c	sta $0c22			sta 	tokenHeader+1
.1a8c	8d 23 0c	sta $0c23			sta 	tokenHeader+2
.1a8f	a2 12		ldx #$12		ldx	#18
.1a91	20 6d 31	jsr $316d		jsr	mainHandler
.1a94					WSEError:
.1a94	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1a96	20 da 14	jsr $14da		jsr	errorHandler
.1a99					HasLineNumber:
.1a99	a0 03		ldy #$03			ldy 	#3 							; get line number
.1a9b	a9 00		lda #$00			lda 	#0
.1a9d	a2 06		ldx #$06		ldx	#6
.1a9f	20 6d 31	jsr $316d		jsr	mainHandler
.1aa2	a5 58		lda $58				lda 	esInt2		 				; check in range.
.1aa4	05 60		ora $60				ora 	esInt3
.1aa6	d0 ec		bne $1a94			bne 	WSEError
.1aa8	98		tya				tya 								; make codePtr point to code after the line number.
.1aa9	18		clc				clc
.1aaa	65 28		adc $28				adc 	codePtr
.1aac	85 28		sta $28				sta 	codePtr
.1aae	90 02		bcc $1ab2			bcc		_HLNNoCarry
.1ab0	e6 29		inc $29				inc 	codePtr+1
.1ab2					_HLNNoCarry:
.1ab2	98		tya				tya 								; subtract that offset from the code buffer index
.1ab3	38		sec				sec
.1ab4	49 ff		eor #$ff			eor 	#$FF
.1ab6	6d 24 0d	adc $0d24			adc 	tokenBufferIndex
.1ab9	18		clc				clc 								; add space allowing for header & $80 trailer
.1aba	69 04		adc #$04			adc 	#4
.1abc	8d 24 0d	sta $0d24			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1abf	20 8e 19	jsr $198e			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1ac2					_HLNNoDelete:
.1ac2	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1ac5	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1ac7	f0 0c		beq $1ad5			beq 	_HLMEditDone
.1ac9	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1acb	18		clc				clc 								; workspace (1k)
.1acc	69 04		adc #$04			adc 	#4
.1ace	c5 34		cmp $34				cmp 	highMemory+1
.1ad0	b0 0b		bcs $1add			bcs 	_HLMMemory
.1ad2	20 e5 19	jsr $19e5			jsr 	InsertLine 					; insert the line in
.1ad5					_HLMEditDone:
.1ad5	a2 02		ldx #$02		ldx	#2
.1ad7	20 6d 31	jsr $316d		jsr	mainHandler
.1ada	4c 4c 1a	jmp $1a4c			jmp 	WarmStartEntry
.1add					_HLMMemory:
.1add	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.1adf	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1ae2					interactionHandler:
.1ae2	7c e5 1a	jmp ($1ae5,x)			jmp 	(interactionVectors,x)
.1ae5					interactionVectors:
>1ae5	05 19					.word ColdStartEntry       ; index 0
>1ae7	4c 1a					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1ae9					section_end_interaction:
.1ae9					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1ae9					Command_Assert:
.1ae9	20 70 2a	jsr $2a70			jsr 	EvaluateRootInteger 		; what is being asserted.
.1aec	20 2a 30	jsr $302a			jsr 	MInt32Zero 					; is it true ?
.1aef	f0 01		beq $1af2			beq 	_CAError
.1af1	60		rts				rts
.1af2					_CAError:
.1af2	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1af4	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1af7					CommandClear:
.1af7					XCommandClear:
.1af7	98		tya				tya
.1af8	48		pha				pha
.1af9	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.1afc	85 33		sta $33				sta 	highMemory
.1afe	ad cd 0a	lda $0acd			lda 	endMemory+1
.1b01	85 34		sta $34				sta 	highMemory+1
.1b03	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1b06	85 2a		sta $2a				sta 	temp0
.1b08	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b0b	85 2b		sta $2b				sta 	temp0+1
.1b0d					_CCFindEnd:
.1b0d	a0 00		ldy #$00			ldy 	#0
.1b0f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b11	f0 0c		beq $1b1f			beq 	_CCFoundEnd 				; offset zero is end.
.1b13	18		clc				clc
.1b14	65 2a		adc $2a				adc 	temp0 						; move to next line
.1b16	85 2a		sta $2a				sta 	temp0
.1b18	90 f3		bcc $1b0d			bcc 	_CCFindEnd
.1b1a	e6 2b		inc $2b				inc 	temp0+1
.1b1c	4c 0d 1b	jmp $1b0d			jmp 	_CCFindEnd
.1b1f					_CCFoundEnd:
.1b1f	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.1b21	85 35		sta $35				sta 	lowMemory
.1b23	a5 2b		lda $2b				lda 	temp0+1
.1b25	85 36		sta $36				sta 	lowMemory+1
.1b27	18		clc				clc 								; put temp0+1 in endProgram
.1b28	a5 2a		lda $2a				lda 	temp0
.1b2a	69 01		adc #$01			adc 	#1
.1b2c	8d ca 0a	sta $0aca			sta 	endProgram
.1b2f	a5 2b		lda $2b				lda 	temp0+1
.1b31	69 00		adc #$00			adc 	#0
.1b33	8d cb 0a	sta $0acb			sta 	endProgram+1
.1b36	18		clc				clc 								; put a bit of space in.
.1b37	a5 35		lda $35				lda 	lowMemory
.1b39	69 04		adc #$04			adc 	#4
.1b3b	85 35		sta $35				sta 	lowMemory
.1b3d	90 02		bcc $1b41			bcc 	_CCNoCarry
.1b3f	e6 36		inc $36				inc 	lowMemory+1
.1b41					_CCNoCarry:
.1b41	20 0c 31	jsr $310c			jsr 	RSReset 					; reset the return stack.
.1b44	a2 04		ldx #$04		ldx	#4
.1b46	20 27 3f	jsr $3f27		jsr	variableHandler
.1b49	20 1d 24	jsr $241d			jsr 	ScanProc 					; scan for procedures
.1b4c	20 b7 21	jsr $21b7			jsr 	CommandRestore 				; do a restore
.1b4f	68		pla				pla
.1b50	a8		tay				tay
.1b51	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1b52					Command_Dim:
.1b52	a2 02		ldx #$02		ldx	#2
.1b54	20 27 3f	jsr $3f27		jsr	variableHandler
.1b57	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1b59	c8		iny				iny
.1b5a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1b5c	f0 f4		beq $1b52			beq 	Command_Dim
.1b5e	88		dey				dey 								; unpick get
.1b5f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.1b60					Command_FOR:
.1b60	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1b62	a2 0b		ldx #$0b			ldx 	#11
.1b64	20 1a 31	jsr $311a			jsr 	RSClaim
.1b67	20 61 1d	jsr $1d61			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1b6a	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1b6c	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1b6e	d0 4c		bne $1bbc			bne 	_CFType
.1b70	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1b72	20 6b 30	jsr $306b			jsr 	CheckToken
.1b75	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1b77	20 72 2a	jsr $2a72			jsr 	EvaluateInteger				; get terminal value in stack 1
.1b7a	98		tya				tya
.1b7b	48		pha				pha
.1b7c	a0 04		ldy #$04			ldy 	#4
.1b7e	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1b80	91 37		sta ($37),y			sta 	(rsPointer),y
.1b82	c8		iny				iny
.1b83	a5 50		lda $50				lda		esInt1
.1b85	91 37		sta ($37),y			sta 	(rsPointer),y
.1b87	c8		iny				iny
.1b88	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1b8a	91 37		sta ($37),y			sta 	(rsPointer),y
.1b8c	c8		iny				iny
.1b8d	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1b8f	91 37		sta ($37),y			sta 	(rsPointer),y
.1b91	c8		iny				iny
.1b92	a5 51		lda $51				lda		esInt1+1
.1b94	91 37		sta ($37),y			sta 	(rsPointer),y
.1b96	c8		iny				iny
.1b97	a5 59		lda $59				lda		esInt2+1
.1b99	91 37		sta ($37),y			sta 	(rsPointer),y
.1b9b	c8		iny				iny
.1b9c	a5 61		lda $61				lda		esInt3+1
.1b9e	91 37		sta ($37),y			sta 	(rsPointer),y
.1ba0	68		pla				pla
.1ba1	a8		tay				tay
.1ba2	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1ba4	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1ba6	d0 0e		bne $1bb6			bne 	_CFDone
.1ba8	c8		iny				iny									; skip over step.
.1ba9	20 72 2a	jsr $2a72			jsr 	EvaluateInteger 			; get step
.1bac	98		tya				tya
.1bad	48		pha				pha
.1bae	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1bb0	a0 06		ldy #$06			ldy 	#6
.1bb2	91 37		sta ($37),y			sta 	(rsPointer),y
.1bb4	68		pla				pla
.1bb5	a8		tay				tay
.1bb6					_CFDone:
.1bb6	a9 01		lda #$01			lda 	#1
.1bb8	20 46 31	jsr $3146			jsr 	RSSavePosition 				; save position.
.1bbb	60		rts				rts
.1bbc					_CFType:
.1bbc	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1bbe	20 da 14	jsr $14da		jsr	errorHandler
.1bc1					Command_NEXT:
.1bc1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1bc3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1bc5	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1bc7	f0 05		beq $1bce			beq 	_isok
.1bc9	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1bcb	20 da 14	jsr $14da		jsr	errorHandler
.1bce					_isok:
.1bce	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1bd0	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1bd2	b0 18		bcs $1bec			bcs 	_CNNoIndex
.1bd4	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1bd6	20 a5 2a	jsr $2aa5			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1bd9	98		tya				tya
.1bda	48		pha				pha
.1bdb	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1bdd	b1 37		lda ($37),y			lda 	(rsPointer),y
.1bdf	d5 48		cmp $48,x			cmp 	esInt0,x
.1be1	d0 76		bne $1c59			bne 	_CNBadIndex
.1be3	c8		iny				iny
.1be4	b1 37		lda ($37),y			lda 	(rsPointer),y
.1be6	d5 50		cmp $50,x			cmp 	esInt1,x
.1be8	d0 6f		bne $1c59			bne 	_CNBadIndex
.1bea	68		pla				pla
.1beb	a8		tay				tay
.1bec					_CNNoIndex:
.1bec	98		tya				tya
.1bed	48		pha				pha
.1bee	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1bf0	b1 37		lda ($37),y			lda 	(rsPointer),y
.1bf2	85 2a		sta $2a				sta 	temp0
.1bf4	c8		iny				iny
.1bf5	b1 37		lda ($37),y			lda 	(rsPointer),y
.1bf7	85 2b		sta $2b				sta 	temp0+1
.1bf9	c8		iny				iny
.1bfa	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1bfc	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.1bfe	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1c00	10 01		bpl $1c03			bpl 	_CNSignX
.1c02	ca		dex				dex  								; X = $FF
.1c03					_CNSignX:
.1c03	18		clc				clc 								; add to the LSB
.1c04	a0 00		ldy #$00			ldy 	#0
.1c06	71 2a		adc ($2a),y			adc 	(temp0),y
.1c08	91 2a		sta ($2a),y			sta 	(temp0),y
.1c0a					_CNPropogate:
.1c0a	c8		iny				iny  								; add the sign extended in X to the rest.
.1c0b	8a		txa				txa
.1c0c	71 2a		adc ($2a),y			adc 	(temp0),y
.1c0e	91 2a		sta ($2a),y			sta 	(temp0),y
.1c10	c8		iny				iny
.1c11	8a		txa				txa
.1c12	71 2a		adc ($2a),y			adc 	(temp0),y
.1c14	91 2a		sta ($2a),y			sta 	(temp0),y
.1c16	c8		iny				iny
.1c17	8a		txa				txa
.1c18	71 2a		adc ($2a),y			adc 	(temp0),y
.1c1a	91 2a		sta ($2a),y			sta 	(temp0),y
.1c1c	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1c1d	a5 37		lda $37				lda 	rsPointer
.1c1f	69 07		adc #$07			adc 	#7
.1c21	85 2c		sta $2c				sta 	temp1
.1c23	a9 00		lda #$00			lda 	#0
.1c25	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1c27	a8		tay				tay 								; and clear the Y register again.
.1c28	65 38		adc $38				adc 	rsPointer+1
.1c2a	85 2d		sta $2d				sta 	temp1+1
.1c2c	38		sec				sec 								; calculate current - limit oring interim values.
.1c2d	20 65 1c	jsr $1c65			jsr 	_CNCompare 					; each of these does a byte.
.1c30	20 65 1c	jsr $1c65			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.1c33	20 65 1c	jsr $1c65			jsr 	_CNCompare 					; and the carry of the subtraction.
.1c36	20 65 1c	jsr $1c65			jsr 	_CNCompare
.1c39	50 02		bvc $1c3d			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1c3b	49 80		eor #$80			eor 	#$80
.1c3d					_CNNoOverflow:
.1c3d	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.1c3f	30 1d		bmi $1c5e			bmi 	_CNCheckDownto
.1c41	c9 00		cmp #$00			cmp 	#0
.1c43	30 0c		bmi $1c51			bmi 	_CNLoopRound 				; loop round if < =
.1c45	a5 2e		lda $2e				lda 	temp2
.1c47	f0 08		beq $1c51			beq 	_CNLoopRound
.1c49					_CNLoopExit:
.1c49	68		pla				pla
.1c4a	a8		tay				tay
.1c4b	a9 0b		lda #$0b			lda 	#11
.1c4d	20 3c 31	jsr $313c			jsr 	RSFree
.1c50	60		rts				rts
.1c51					_CNLoopRound:
.1c51	68		pla				pla
.1c52	a8		tay				tay
.1c53	a9 01		lda #$01			lda 	#1
.1c55	20 59 31	jsr $3159			jsr 	RSLoadPosition				; go back to the loop top
.1c58	60		rts				rts
.1c59					_CNBadIndex:
.1c59	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.1c5b	20 da 14	jsr $14da		jsr	errorHandler
.1c5e					_CNCheckDownto:
.1c5e	c9 00		cmp #$00			cmp 	#0
.1c60	10 ef		bpl $1c51			bpl 	_CNLoopRound
.1c62	4c 49 1c	jmp $1c49			jmp 	_CNLoopExit
.1c65					_CNCompare:
.1c65	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1c67	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1c69	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1c6b	85 2e		sta $2e				sta 	temp2
.1c6d	c8		iny				iny
.1c6e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1c6f					CommandIf:
.1c6f	20 70 2a	jsr $2a70			jsr 	EvaluateRootInteger 		; get what's being tested.
.1c72	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1c74	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.1c76	f0 04		beq $1c7c			beq 	_IfSimple
.1c78	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1c7a	d0 1b		bne $1c97			bne 	_IfComplex
.1c7c					_IfSimple:
.1c7c	20 2a 30	jsr $302a			jsr 	MInt32Zero					; check if TOS zero
.1c7f	f0 10		beq $1c91			beq 	_IfEOL 						; go to next line.
.1c81	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1c83	c8		iny				iny
.1c84	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1c86	f0 0c		beq $1c94			beq 	_IfGoto 					; do the Goto code
.1c88	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1c8a	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1c8c	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1c8e	f0 04		beq $1c94			beq 	_IfGoto
.1c90	60		rts				rts 								; else continue on this line.
.1c91					_IfEOL:
.1c91	4c 92 24	jmp $2492			jmp 	AdvanceNextLine 			; go to next line
.1c94					_IfGoto:
.1c94	4c 07 25	jmp $2507			jmp 	CommandGoto
.1c97					_IfComplex:
.1c97	20 2a 30	jsr $302a			jsr 	MInt32Zero 					; is it true ?
.1c9a	f0 01		beq $1c9d			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1c9c	60		rts				rts 								; else continue.
.1c9d					_IFSkip:
.1c9d	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1c9f	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1ca1	4c 90 30	jmp $3090			jmp		ScanForward
.1ca4					Command_ELSE:
.1ca4	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1ca6	8a		txa				txa
.1ca7	4c 90 30	jmp $3090			jmp		ScanForward
.1caa					Command_ENDIF:
.1caa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be7					InputBuffer:
>0be7							.fill 	MaxInputSize+1
.1cab					Command_Input:
.1cab	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1cad	c8		iny				iny
.1cae	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1cb0	f0 f9		beq $1cab			beq 	Command_Input
.1cb2	88		dey				dey 							; undo consume
.1cb3	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1cb5	f0 54		beq $1d0b			beq 	_CIExit 				; : or EOL, exit
.1cb7	c9 80		cmp #$80			cmp 	#TOK_EOL
.1cb9	f0 50		beq $1d0b			beq 	_CIExit
.1cbb	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1cbd	90 12		bcc $1cd1			bcc 	_CIVariable
.1cbf	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1cc1	d0 43		bne $1d06			bne 	_CISyntax
.1cc3	a2 00		ldx #$00			ldx 	#0
.1cc5	20 67 2a	jsr $2a67			jsr 	EvaluateString 			; evaluate and print string
.1cc8	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0
.1ccb	20 d9 20	jsr $20d9			jsr 	PrintString
.1cce	4c ab 1c	jmp $1cab			jmp 	Command_Input
.1cd1					_CIVariable:
.1cd1	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1cd3	20 a5 2a	jsr $2aa5			jsr 	EvaluateReference  		; this is where its going
.1cd6					_CIRetry:
.1cd6	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1cd8	a2 14		ldx #$14		ldx	#20
.1cda	20 b9 14	jsr $14b9		jsr	deviceHandler
.1cdd	98		tya				tya
.1cde	48		pha				pha
.1cdf	20 1f 1d	jsr $1d1f			jsr 	InputString 			; input a string (manually)
.1ce2	a2 01		ldx #$01			ldx 	#1
.1ce4	20 0c 1d	jsr $1d0c			jsr 	BufferToStackX 			; make stack,x ref input string.
.1ce7	a5 40		lda $40				lda 	esType 					; if target type numeric
.1ce9	29 40		and #$40			and 	#$40 					; then convert to number
.1ceb	d0 11		bne $1cfe			bne 	_CIWrite
.1ced	a2 01		ldx #$01			ldx 	#1
.1cef	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1cf2	a9 0a		lda #$0a			lda 	#10
.1cf4	20 71 2e	jsr $2e71			jsr 	MInt32FromString 		; convert it back from a string.
.1cf7	68		pla				pla
.1cf8	a8		tay				tay
.1cf9	b0 03		bcs $1cfe			bcs 	_CIWrite 				; successfully converted.
.1cfb	18		clc				clc 							; default fail FP conversion
.1cfc	90 d8		bcc $1cd6			bcc		_CIRetry				; failed, try again.
.1cfe					_CIWrite:
.1cfe	a2 00		ldx #$00			ldx 	#0
.1d00	20 74 1d	jsr $1d74			jsr 	WriteValue
.1d03	4c ab 1c	jmp $1cab			jmp 	Command_Input
.1d06					_CISyntax:
.1d06	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d08	20 da 14	jsr $14da		jsr	errorHandler
.1d0b					_CIExit:
.1d0b	60		rts				rts
.1d0c					BufferToStackX:
.1d0c	a9 e7		lda #$e7			lda 	#InputBuffer & $FF
.1d0e	95 48		sta $48,x			sta 	esInt0,x
.1d10	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1d12	95 50		sta $50,x			sta 	esInt1,x
.1d14	a9 00		lda #$00			lda 	#0
.1d16	95 58		sta $58,x			sta 	esInt2,x
.1d18	95 60		sta $60,x			sta 	esInt3,x
.1d1a	a9 40		lda #$40			lda 	#$40
.1d1c	95 40		sta $40,x			sta 	esType,x
.1d1e	60		rts				rts
.1d1f					InputString:
.1d1f	a9 00		lda #$00			lda 	#0
.1d21	8d e7 0b	sta $0be7			sta 	InputBuffer
.1d24					_InputLoop:
.1d24	a2 00		ldx #$00		ldx	#0
.1d26	20 b9 14	jsr $14b9		jsr	deviceHandler
.1d29	a2 0a		ldx #$0a		ldx	#10
.1d2b	20 b9 14	jsr $14b9		jsr	deviceHandler
.1d2e	c9 00		cmp #$00			cmp 	#0
.1d30	f0 f2		beq $1d24			beq 	_InputLoop
.1d32	c9 08		cmp #$08			cmp 	#8
.1d34	f0 19		beq $1d4f			beq 	_InputBackspace
.1d36	c9 0d		cmp #$0d			cmp 	#13
.1d38	f0 21		beq $1d5b			beq 	_InputExit
.1d3a	ae e7 0b	ldx $0be7			ldx 	InputBuffer
.1d3d	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1d3f	f0 e3		beq $1d24			beq 	_InputLoop
.1d41	9d e8 0b	sta $0be8,x			sta 	InputBuffer+1,x 		; write char
.1d44	ee e7 0b	inc $0be7			inc 	InputBuffer 			; advance count.
.1d47					_InputPrintLoop:
.1d47	a2 14		ldx #$14		ldx	#20
.1d49	20 b9 14	jsr $14b9		jsr	deviceHandler
.1d4c	4c 24 1d	jmp $1d24			jmp	 	_InputLoop
.1d4f					_InputBackspace:
.1d4f	ad e7 0b	lda $0be7			lda 	InputBuffer 			; at start
.1d52	f0 d0		beq $1d24			beq 	_InputLoop
.1d54	ce e7 0b	dec $0be7			dec 	InputBuffer
.1d57	a9 08		lda #$08			lda 	#8
.1d59	d0 ec		bne $1d47			bne 	_InputPrintLoop
.1d5b					_InputExit:
.1d5b	a2 04		ldx #$04		ldx	#4
.1d5d	20 b9 14	jsr $14b9		jsr	deviceHandler
.1d60	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1d61					CommandLet:
.1d61	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1d63	20 a5 2a	jsr $2aa5			jsr 	EvaluateReference
.1d66	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1d68	20 6b 30	jsr $306b			jsr 	CheckToken
.1d6b	e8		inx				inx 								; do RHS
.1d6c	20 53 2a	jsr $2a53			jsr 	Evaluate 					; evaluate and dereference
.1d6f	ca		dex				dex
.1d70	20 74 1d	jsr $1d74			jsr 	WriteValue 					; write it out
.1d73	60		rts				rts
.1d74					WriteValue:
.1d74	98		tya				tya
.1d75	48		pha				pha
.1d76	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1d79	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1d7b	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1d7d	29 40		and #$40			and 	#$40
.1d7f	d0 50		bne $1dd1			bne		_WVType
.1d81	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1d83	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1d85	29 40		and #$40			and 	#$40
.1d87	d0 1f		bne $1da8			bne 	_WVCopyString
.1d89	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1d8b	15 41		ora $41,x			ora 	esType+1,x
.1d8d	4a		lsr a				lsr 	a
.1d8e	90 22		bcc $1db2			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1d90	b5 40		lda $40,x			lda 	esType,x
.1d92	4a		lsr a				lsr 	a
.1d93	90 3c		bcc $1dd1			bcc 	_WVType
.1d95	e8		inx				inx 								; force the value being written to be a float.
.1d96	20 b4 25	jsr $25b4			jsr 	BPMakeFloat
.1d99	ca		dex				dex
.1d9a	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0 					; set Temp0 to write address
.1d9d	e8		inx				inx
.1d9e	8a		txa				txa
.1d9f	a2 20		ldx #$20		ldx	#32
.1da1	20 00 19	jsr $1900		jsr	floatingpointHandler
.1da4	aa		tax				tax
.1da5	4c ce 1d	jmp $1dce			jmp 	_WVCopyExit
.1da8					_WVCopyString:
.1da8	8a		txa				txa
.1da9	a2 0e		ldx #$0e		ldx	#14
.1dab	20 23 34	jsr $3423		jsr	stringHandler
.1dae	aa		tax				tax
.1daf	4c ce 1d	jmp $1dce			jmp 	_WVCopyExit
.1db2					_WVCopyData4:
.1db2	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1db4	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1db6	d0 10		bne $1dc8			bne 	_WVCopyData1
.1db8	a0 03		ldy #$03			ldy 	#3
.1dba	b5 61		lda $61,x			lda 	esInt3+1,x
.1dbc	91 2a		sta ($2a),y			sta 	(temp0),y
.1dbe	88		dey				dey
.1dbf	b5 59		lda $59,x			lda 	esInt2+1,x
.1dc1	91 2a		sta ($2a),y			sta 	(temp0),y
.1dc3	88		dey				dey
.1dc4	b5 51		lda $51,x			lda 	esInt1+1,x
.1dc6	91 2a		sta ($2a),y			sta 	(temp0),y
.1dc8					_WVCopyData1:
.1dc8	a0 00		ldy #$00			ldy 	#0
.1dca	b5 49		lda $49,x			lda 	esInt0+1,x
.1dcc	91 2a		sta ($2a),y			sta 	(temp0),y
.1dce					_WVCopyExit:
.1dce	68		pla				pla
.1dcf	a8		tay				tay
.1dd0	60		rts				rts
.1dd1					_WVType:
.1dd1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1dd3	20 da 14	jsr $14da		jsr	errorHandler
.1dd6					TOSToTemp0:
.1dd6	b5 48		lda $48,x			lda 	esInt0,x
.1dd8	85 2a		sta $2a				sta 	temp0
.1dda	b5 50		lda $50,x			lda 	esInt1,x
.1ddc	85 2b		sta $2b				sta 	temp0+1
.1dde	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.0c08					structIndent:
>0c08							.fill 	1
.1ddf					CommandList:
.1ddf	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.1de1	8e 08 0c	stx $0c08			stx 	structIndent
.1de4	20 03 30	jsr $3003			jsr 	MInt32False
.1de7	e8		inx				inx
.1de8	20 ff 2f	jsr $2fff			jsr 	MInt32True
.1deb	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.1ded	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.1def	f0 15		beq $1e06			beq 	_CLEndLine
.1df1	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.1df3	30 1b		bmi $1e10			bmi 	_CLDoListing 				; do the whole lot.
.1df5	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.1df7	20 72 2a	jsr $2a72			jsr 	EvaluateInteger
.1dfa	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.1dfc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1dfe	f0 06		beq $1e06			beq 	_CLEndLine
.1e00	20 41 2f	jsr $2f41			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.1e03	4c 10 1e	jmp $1e10			jmp 	_CLDoListing 				; own e.g. list 1100
.1e06					_CLEndLine:
.1e06	c8		iny				iny 								; skip comma
.1e07	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.1e09	30 05		bmi $1e10			bmi 	_CLDoListing
.1e0b	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.1e0d	20 72 2a	jsr $2a72			jsr 	EvaluateInteger				; get end
.1e10					_CLDoListing:
.1e10	20 b4 22	jsr $22b4			jsr 	ResetCodeAddress 			; back to the start.
.1e13					_CLCheckLoop:
.1e13	a2 00		ldx #$00		ldx	#0
.1e15	20 b9 14	jsr $14b9		jsr	deviceHandler
.1e18	a0 00		ldy #$00			ldy 	#0							; check end.
.1e1a	b1 28		lda ($28),y			lda 	(codePtr),y
.1e1c	f0 41		beq $1e5f			beq 	_CLEnd
.1e1e	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.1e20	20 62 1e	jsr $1e62			jsr 	CLCompareLineTOS
.1e23	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.1e25	f0 28		beq $1e4f			beq 	_CLNext
.1e27	e8		inx				inx
.1e28	20 62 1e	jsr $1e62			jsr 	CLCompareLineTOS 			; compare vs higher
.1e2b	c9 01		cmp #$01			cmp 	#1
.1e2d	f0 20		beq $1e4f			beq 	_CLNext
.1e2f	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.1e31	20 84 1e	jsr $1e84			jsr 	CLStructureCheck
.1e34	ad 08 0c	lda $0c08			lda 	structIndent 				; indent level.
.1e37	10 02		bpl $1e3b			bpl 	_CLPositive
.1e39	a9 00		lda #$00			lda 	#0
.1e3b					_CLPositive:
.1e3b	a2 02		ldx #$02		ldx	#2
.1e3d	20 18 3c	jsr $3c18		jsr	tokeniserHandler
.1e40	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.1e42	20 84 1e	jsr $1e84			jsr 	CLStructureCheck
.1e45	ad 08 0c	lda $0c08			lda 	structIndent
.1e48	10 05		bpl $1e4f			bpl 	_CLNext
.1e4a	a9 00		lda #$00			lda 	#0
.1e4c	8d 08 0c	sta $0c08			sta 	structIndent
.1e4f					_CLNext:
.1e4f	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.1e51	b1 28		lda ($28),y			lda 	(codePtr),y
.1e53	18		clc				clc
.1e54	65 28		adc $28				adc 	codePtr
.1e56	85 28		sta $28				sta 	codePtr
.1e58	90 b9		bcc $1e13			bcc 	_CLCheckLoop
.1e5a	e6 29		inc $29				inc 	codePtr+1
.1e5c	4c 13 1e	jmp $1e13			jmp 	_CLCheckLoop
.1e5f					_CLEnd:
.1e5f	4c 68 31	jmp $3168			jmp 	WarmStart 					; warm start after list.
.1e62					CLCompareLineTOS:
.1e62	a0 01		ldy #$01			ldy 	#1
.1e64	b1 28		lda ($28),y			lda 	(codePtr),y
.1e66	55 48		eor $48,x			eor 	esInt0,x
.1e68	85 2a		sta $2a				sta 	temp0
.1e6a	c8		iny				iny
.1e6b	b1 28		lda ($28),y			lda 	(codePtr),y
.1e6d	55 50		eor $50,x			eor 	esInt1,x
.1e6f	05 2a		ora $2a				ora 	temp0
.1e71	f0 10		beq $1e83			beq 	_CLCLTExit
.1e73	88		dey				dey
.1e74	b1 28		lda ($28),y			lda 	(codePtr),y
.1e76	d5 48		cmp $48,x			cmp 	esInt0,x
.1e78	c8		iny				iny
.1e79	b1 28		lda ($28),y			lda 	(codePtr),y
.1e7b	f5 50		sbc $50,x			sbc 	esInt1,x
.1e7d	a9 ff		lda #$ff			lda 	#255
.1e7f	90 02		bcc $1e83			bcc 	_CLCLTExit
.1e81	a9 01		lda #$01			lda 	#1
.1e83					_CLCLTExit:
.1e83	60		rts				rts
.1e84					CLStructureCheck:
.1e84	85 2a		sta $2a				sta 	temp0
.1e86	a0 03		ldy #$03			ldy 	#3
.1e88					_CLSCLoop:
.1e88	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.1e8a	c8		iny				iny
.1e8b	c9 80		cmp #$80			cmp 	#$80
.1e8d	90 f9		bcc $1e88			bcc 	_CLSCLoop 					; $00-$7F just step over.
.1e8f	f0 28		beq $1eb9			beq		_CLSCExit					; EOL return
.1e91	c9 86		cmp #$86			cmp 	#$86 						; special handler
.1e93	90 1e		bcc $1eb3			bcc 	_CLSCSpecial
.1e95	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.1e97	90 ef		bcc $1e88			bcc 	_CLSCLoop
.1e99	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.1e9b	b0 eb		bcs $1e88			bcs 	_CLSCLoop
.1e9d	aa		tax				tax 								; get adjustment
.1e9e	bd 0b 29	lda $290b,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.1ea1	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.1ea3	d0 e3		bne $1e88			bne 	_CLSCLoop
.1ea5	38		sec				sec
.1ea6	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.1ea8	0a		asl a				asl 	a 							; double indent step
.1ea9	18		clc				clc
.1eaa	6d 08 0c	adc $0c08			adc 	structIndent 				; add to structure indent
.1ead	8d 08 0c	sta $0c08			sta 	structIndent
.1eb0	4c 88 1e	jmp $1e88			jmp 	_CLSCLoop
.1eb3					_CLSCSpecial:
.1eb3	20 d3 30	jsr $30d3			jsr 	ScannerSkipSpecial
.1eb6	4c 88 1e	jmp $1e88			jmp 	_CLSCLoop
.1eb9					_CLSCExit:
.1eb9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1eba					CommandLoad:
.1eba	20 e2 1e	jsr $1ee2			jsr 	CLSParameters 					; get parameters for load.
.1ebd	08		php				php
.1ebe	a2 0e		ldx #$0e		ldx	#14
.1ec0	20 b9 14	jsr $14b9		jsr	deviceHandler
.1ec3	28		plp				plp
.1ec4	b0 08		bcs $1ece			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1ec6	20 f7 1a	jsr $1af7			jsr 	CommandClear
.1ec9	a2 02		ldx #$02		ldx	#2
.1ecb	20 e2 1a	jsr $1ae2		jsr	interactionHandler
.1ece					_CLExit
.1ece	60		rts				rts
.1ecf					CommandSave:
.1ecf	20 e2 1e	jsr $1ee2			jsr 	CLSParameters					; get parameters for save
.1ed2	90 08		bcc $1edc			bcc 	_CSNoOverrideAddress
.1ed4	20 83 30	jsr $3083			jsr 	CheckComma 						; should be a comma.
.1ed7	a2 02		ldx #$02			ldx 	#2
.1ed9	20 72 2a	jsr $2a72			jsr 	EvaluateInteger 				; get save end address.
.1edc					_CSNoOverrideAddress:
.1edc	a2 18		ldx #$18		ldx	#24
.1ede	20 b9 14	jsr $14b9		jsr	deviceHandler
.1ee1	60		rts				rts
.1ee2					CLSParameters:
.1ee2	a2 00		ldx #$00			ldx 	#0 								; string
.1ee4	20 67 2a	jsr $2a67			jsr 	EvaluateString
.1ee7	e8		inx				inx 									; erase out +1 +2
.1ee8	20 03 30	jsr $3003			jsr 	MInt32False
.1eeb	e8		inx				inx
.1eec	20 03 30	jsr $3003			jsr 	MInt32False
.1eef	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1ef2	85 49		sta $49				sta 	esInt0+1
.1ef4	ad c9 0a	lda $0ac9			lda 	basePage+1
.1ef7	85 51		sta $51				sta 	esInt1+1
.1ef9	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1efc	85 4a		sta $4a				sta 	esInt0+2
.1efe	ad cb 0a	lda $0acb			lda 	endProgram+1
.1f01	85 52		sta $52				sta 	esInt1+2
.1f03	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1f05	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1f07	d0 08		bne $1f11			bne 	_CLSDefault
.1f09	c8		iny				iny 									; skip comma
.1f0a	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1f0c	20 72 2a	jsr $2a72			jsr 	EvaluateInteger
.1f0f	38		sec				sec
.1f10	60		rts				rts
.1f11					_CLSDefault:
.1f11	18		clc				clc
.1f12	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c09					storeSize:
>0c09							.fill 	1
.1f13					CommandLocal:
.1f13	a2 00		ldx #$00			ldx 	#0
.1f15	20 31 1f	jsr $1f31			jsr 	LocaliseVariable 			; localise one.
.1f18					_CLCheckNext:
.1f18	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1f1a	c8		iny				iny
.1f1b	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1f1d	f0 06		beq $1f25			beq 	_CLAssignment
.1f1f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1f21	f0 f0		beq $1f13			beq 	CommandLocal
.1f23	88		dey				dey
.1f24	60		rts				rts
.1f25					_CLAssignment:
.1f25	a2 01		ldx #$01			ldx 	#1
.1f27	20 53 2a	jsr $2a53			jsr 	Evaluate 					; evaluate RHS
.1f2a	ca		dex				dex
.1f2b	20 74 1d	jsr $1d74			jsr 	WriteValue
.1f2e	4c 18 1f	jmp $1f18			jmp 	_CLCheckNext
.1f31					LocaliseVariable:
.1f31	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1f33	c9 40		cmp #$40			cmp 	#$40
.1f35	b0 67		bcs $1f9e			bcs 	_LVSyntax
.1f37	8a		txa				txa 								; get the address of that variable.
.1f38	a2 00		ldx #$00		ldx	#0
.1f3a	20 27 3f	jsr $3f27		jsr	variableHandler
.1f3d	aa		tax				tax
.1f3e	8a		txa				txa
.1f3f	48		pha				pha
.1f40	98		tya				tya
.1f41	48		pha				pha
.1f42	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1f45	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1f47	0a		asl a				asl 	a
.1f48	10 16		bpl $1f60			bpl 	_LVPushNumber
.1f4a	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1f4c	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f4e	c8		iny				iny
.1f4f	85 2c		sta $2c				sta 	temp1
.1f51	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f53	85 2d		sta $2d				sta 	temp1+1
.1f55	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1f57	b1 2c		lda ($2c),y			lda 	(temp1),y
.1f59	aa		tax				tax 								; into X
.1f5a	e8		inx				inx 								; +1 for length.
.1f5b	a9 24		lda #$24			lda 	#markerString
.1f5d	4c 75 1f	jmp $1f75			jmp 	_LVWriteFrame
.1f60					_LVPushNumber:
.1f60	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1f62	85 2c		sta $2c				sta 	temp1
.1f64	a5 2b		lda $2b				lda 	temp0+1
.1f66	85 2d		sta $2d				sta 	temp1+1
.1f68	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1f6a	4a		lsr a				lsr 	a
.1f6b	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1f6d	a2 04		ldx #$04			ldx 	#VarISize
.1f6f	90 04		bcc $1f75			bcc 	_LVIsInteger
.1f71	a9 23		lda #$23			lda 	#markerFloat
.1f73	a2 06		ldx #$06			ldx 	#VarFSize
.1f75					_LVIsInteger:
.1f75					_LVWriteFrame:
.1f75	8e 09 0c	stx $0c09			stx 	storeSize 					; number of bytes to copy from (temp0)
.1f78	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1f79	e8		inx				inx
.1f7a	e8		inx				inx
.1f7b	20 1a 31	jsr $311a			jsr 	RSClaim 					; create the stack frame.
.1f7e	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1f80	a0 01		ldy #$01			ldy 	#1
.1f82	91 37		sta ($37),y			sta 	(rsPointer),y
.1f84	c8		iny				iny
.1f85	a5 2b		lda $2b				lda 	temp0+1
.1f87	91 37		sta ($37),y			sta 	(rsPointer),y
.1f89	a0 00		ldy #$00			ldy 	#0
.1f8b					_LVCopyData:
.1f8b	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1f8d	c8		iny				iny 								; write allowing for the header bit.
.1f8e	c8		iny				iny
.1f8f	c8		iny				iny
.1f90	91 37		sta ($37),y			sta 	(rsPointer),y
.1f92	88		dey				dey
.1f93	88		dey				dey
.1f94	ce 09 0c	dec $0c09			dec 	storeSize 					; do it storesize times
.1f97	d0 f2		bne $1f8b			bne 	_LVCopyData
.1f99	68		pla				pla
.1f9a	a8		tay				tay
.1f9b	68		pla				pla
.1f9c	aa		tax				tax
.1f9d	60		rts				rts
.1f9e					_LVSyntax:
.1f9e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1fa0	20 da 14	jsr $14da		jsr	errorHandler
.1fa3					RestoreLocals:
.1fa3	a2 00		ldx #$00			ldx 	#0
.1fa5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1fa7	c9 40		cmp #$40			cmp	 	#64
.1fa9	90 01		bcc $1fac			bcc 	_RLocal
.1fab	60		rts				rts
.1fac					_RLocal:
.1fac	8a		txa				txa
.1fad	48		pha				pha
.1fae	98		tya				tya
.1faf	48		pha				pha
.1fb0	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1fb2	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fb4	85 2a		sta $2a				sta 	temp0
.1fb6	c8		iny				iny
.1fb7	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fb9	85 2b		sta $2b				sta 	temp0+1
.1fbb	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1fbd	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fbf	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1fc1	f0 28		beq $1feb			beq 	_RString
.1fc3	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1fc5	c9 25		cmp #$25			cmp 	#markerInt
.1fc7	f0 02		beq $1fcb			beq 	_RIsInteger
.1fc9	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1fcb					_RIsInteger:
.1fcb	8a		txa				txa
.1fcc	48		pha				pha
.1fcd	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1fcf					_RCopyBack:
.1fcf	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fd1	88		dey				dey
.1fd2	88		dey				dey
.1fd3	88		dey				dey
.1fd4	91 2a		sta ($2a),y			sta 	(temp0),y
.1fd6	c8		iny				iny
.1fd7	c8		iny				iny
.1fd8	c8		iny				iny
.1fd9	c8		iny				iny
.1fda	ca		dex				dex
.1fdb	d0 f2		bne $1fcf			bne 	_RCopyBack
.1fdd	68		pla				pla 								; get size add 3
.1fde	18		clc				clc
.1fdf	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1fe1					_RRestoreAAndLoop:
.1fe1	20 3c 31	jsr $313c			jsr 	RSFree
.1fe4	68		pla				pla
.1fe5	a8		tay				tay
.1fe6	68		pla				pla
.1fe7	aa		tax				tax
.1fe8	4c a3 1f	jmp $1fa3			jmp 	RestoreLocals 				; go see if there are any more locals.
.1feb					_RString:
.1feb	a2 00		ldx #$00			ldx 	#0
.1fed	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1fef	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ff1	95 48		sta $48,x			sta 	esInt0,x
.1ff3	c8		iny				iny
.1ff4	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ff6	95 50		sta $50,x			sta 	esInt1,x
.1ff8	18		clc				clc
.1ff9	a5 37		lda $37				lda 	rsPointer
.1ffb	69 03		adc #$03			adc 	#3
.1ffd	95 49		sta $49,x			sta 	esInt0+1,x
.1fff	a5 38		lda $38				lda 	rsPointer+1
.2001	69 00		adc #$00			adc 	#0
.2003	95 51		sta $51,x			sta 	esInt1+1,x
.2005	8a		txa				txa
.2006	a2 0e		ldx #$0e		ldx	#14
.2008	20 23 34	jsr $3423		jsr	stringHandler
.200b	a0 03		ldy #$03			ldy 	#3 							; get string length
.200d	b1 37		lda ($37),y			lda 	(rsPointer),y
.200f	18		clc				clc
.2010	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2012	4c e1 1f	jmp $1fe1			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.2015					Command_New:
.2015					Command_XNew:
.2015	20 b4 22	jsr $22b4			jsr 	ResetCodeAddress 			; point to first line
.2018	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.201a	98		tya				tya
.201b	91 28		sta ($28),y			sta 	(codePtr),y
.201d	20 f7 1a	jsr $1af7			jsr 	CommandClear 				; clear everything down.
.2020	4c 8c 24	jmp $248c			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.2023					Command_Poke:
.2023	a9 01		lda #$01			lda 	#1
.2025	d0 06		bne $202d			bne 	PokeGeneral
.2027					Command_Doke:
.2027	a9 02		lda #$02			lda 	#2
.2029	d0 02		bne $202d			bne 	PokeGeneral
.202b					Command_Loke:
.202b	a9 03		lda #$03			lda 	#3
.202d					PokeGeneral:
.202d	48		pha				pha 								; save id (PDL = 123)
.202e	20 70 2a	jsr $2a70			jsr 	EvaluateRootInteger 		; target address
.2031	20 83 30	jsr $3083			jsr	 	CheckComma
.2034	e8		inx				inx
.2035	20 72 2a	jsr $2a72			jsr 	EvaluateInteger 			; what value to POKE ?
.2038	ca		dex				dex
.2039	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0 					; temp0 points to the target address
.203c	84 32		sty $32				sty 	tempShort 					; save Y
.203e	68		pla				pla 								; get copy type (1-3) and dispatch
.203f	aa		tax				tax
.2040	ca		dex				dex
.2041	f0 14		beq $2057			beq 	_Poke1
.2043	ca		dex				dex
.2044	f0 0b		beq $2051			beq 	_Poke2
.2046	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2048	a5 61		lda $61				lda 	esInt3+1
.204a	91 2a		sta ($2a),y			sta 	(temp0),y
.204c	88		dey				dey
.204d	a5 59		lda $59				lda 	esInt2+1
.204f	91 2a		sta ($2a),y			sta 	(temp0),y
.2051					_Poke2:
.2051	a0 01		ldy #$01			ldy 	#1
.2053	a5 51		lda $51				lda 	esInt1+1
.2055	91 2a		sta ($2a),y			sta 	(temp0),y
.2057					_Poke1:
.2057	a0 00		ldy #$00			ldy 	#0
.2059	a5 49		lda $49				lda 	esInt0+1
.205b	91 2a		sta ($2a),y			sta 	(temp0),y
.205d	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.205f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c0a					lastPrintToken:
>0c0a							.fill 	1
.2060					Command_Print:
.2060	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2062	8d 0a 0c	sta $0c0a			sta 	lastPrintToken
.2065	88		dey				dey
.2066					_PrintLoopSkip:
.2066	c8		iny				iny
.2067					_PrintLoop:
.2067	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2069	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.206b	f0 5b		beq $20c8			beq 	_PrintExit
.206d	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.206f	f0 57		beq $20c8			beq 	_PrintExit
.2071	8d 0a 0c	sta $0c0a			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2074	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2076	f0 ee		beq $2066			beq 	_PrintLoopSkip
.2078	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.207a	f0 3c		beq $20b8			beq	 	_PrintNewLine
.207c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.207e	f0 40		beq $20c0			beq 	_PrintTab
.2080	20 51 2a	jsr $2a51			jsr 	EvaluateRoot 				; evaluate something at the root
.2083	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2085	85 2a		sta $2a				sta 	temp0
.2087	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2089	85 2b		sta $2b				sta 	1+(temp0)
.208b	a5 40		lda $40				lda 	esType 						; get type
.208d	f0 15		beq $20a4			beq		_PrintInteger
.208f	4a		lsr a				lsr 	a 							; check for floating point
.2090	b0 08		bcs $209a			bcs 	_PrintFloat
.2092					_PrintString:
.2092	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2094	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0
.2097	4c b2 20	jmp $20b2			jmp 	_PrintTemp0 				; print no leading space.
.209a					_PrintFloat:
.209a	a9 00		lda #$00			lda 	#0 							; stack level.
.209c	a2 14		ldx #$14		ldx	#20
.209e	20 00 19	jsr $1900		jsr	floatingpointHandler
.20a1	4c ab 20	jmp $20ab			jmp 	_PrintSpaceTemp0
.20a4					_PrintInteger:
.20a4	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.20a6	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.20a8	20 59 2f	jsr $2f59			jsr 	MInt32ToString				; convert to text
.20ab					_PrintSpaceTemp0:
.20ab	a9 20		lda #$20			lda 	#32
.20ad	a2 14		ldx #$14		ldx	#20
.20af	20 b9 14	jsr $14b9		jsr	deviceHandler
.20b2					_PrintTemp0:
.20b2	20 d9 20	jsr $20d9			jsr 	PrintString
.20b5	4c 67 20	jmp $2067			jmp 	_PrintLoop
.20b8					_PrintNewLine:
.20b8	a2 04		ldx #$04		ldx	#4
.20ba	20 b9 14	jsr $14b9		jsr	deviceHandler
.20bd	4c 66 20	jmp $2066			jmp 	_PrintLoopSkip
.20c0					_PrintTab:
.20c0	a2 1a		ldx #$1a		ldx	#26
.20c2	20 b9 14	jsr $14b9		jsr	deviceHandler
.20c5	4c 66 20	jmp $2066			jmp 	_PrintLoopSkip
.20c8					_PrintExit:
.20c8	ad 0a 0c	lda $0c0a			lda		lastPrintToken 				; check last token
.20cb	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.20cd	f0 09		beq $20d8			beq 	_PrintExit2
.20cf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.20d1	f0 05		beq $20d8			beq 	_PrintExit2
.20d3	a2 04		ldx #$04		ldx	#4
.20d5	20 b9 14	jsr $14b9		jsr	deviceHandler
.20d8					_PrintExit2:
.20d8	60		rts				rts
.20d9					PrintString:
.20d9	8a		txa				txa
.20da	48		pha				pha
.20db	98		tya				tya
.20dc	48		pha				pha
.20dd	a0 00		ldy #$00			ldy 	#0							; get length
.20df	b1 2a		lda ($2a),y			lda 	(temp0),y
.20e1	aa		tax				tax 								; into X
.20e2	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.20e4	f0 10		beq $20f6			beq 	_PSExit
.20e6	ca		dex				dex
.20e7	8a		txa				txa
.20e8	48		pha				pha
.20e9	c8		iny				iny
.20ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.20ec	a2 14		ldx #$14		ldx	#20
.20ee	20 b9 14	jsr $14b9		jsr	deviceHandler
.20f1	68		pla				pla
.20f2	aa		tax				tax
.20f3	4c e2 20	jmp $20e2			jmp 	_PSLoop
.20f6					_PSExit:
.20f6	68		pla				pla
.20f7	a8		tay				tay
.20f8	68		pla				pla
.20f9	aa		tax				tax
.20fa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c0b					paramCount:
>0c0b							.fill 	1
.20fb					CallProc:
.20fb	20 b1 23	jsr $23b1			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.20fe	48		pha				pha 								; save length on stack
.20ff	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2101	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2103	48		pha				pha
.2104	a5 2a		lda $2a				lda 	temp0
.2106	48		pha				pha
.2107	98		tya				tya 								; calculate Y + length
.2108	18		clc				clc
.2109	65 32		adc $32				adc 	tempShort
.210b	a8		tay				tay
.210c	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.210e					_CallProcEvalParams:
.210e	e8		inx				inx
.210f	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2111	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2113	f0 0b		beq $2120			beq 	_CPDoneParams
.2115	20 53 2a	jsr $2a53			jsr 	Evaluate 					; evaluate a parameter
.2118	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.211a	c8		iny				iny
.211b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.211d	f0 ef		beq $210e			beq 	_CallProcEvalParams
.211f	88		dey				dey 								; undo consumption.
.2120					_CPDoneParams:
.2120	20 76 30	jsr $3076			jsr 	CheckRightParen 			; check closing parenthesis.
.2123	8e 0b 0c	stx $0c0b			stx 	paramCount 					; store parameter count+1
.2126	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2128	a9 50		lda #$50			lda 	#markerPROC
.212a	20 1a 31	jsr $311a			jsr 	RSClaim
.212d	a9 01		lda #$01			lda 	#1 							; store return address.
.212f	20 46 31	jsr $3146			jsr 	RSSavePosition
.2132	68		pla				pla 								; get the new code Ptr
.2133	85 28		sta $28				sta 	codePtr
.2135	68		pla				pla
.2136	85 29		sta $29				sta 	codePtr+1
.2138	68		pla				pla 								; length of name + 4 is the param start.
.2139	18		clc				clc
.213a	69 04		adc #$04			adc 	#4
.213c	a8		tay				tay
.213d	a2 ff		ldx #$ff			ldx 	#$FF
.213f					_CPLoadParameters:
.213f	e8		inx				inx 								; point to where the address should be loaded.
.2140	ec 0b 0c	cpx $0c0b			cpx 	paramCount 					; too many parameters in definition ?
.2143	f0 1e		beq $2163			beq 	_CPParamError
.2145	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2147	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2149	f0 0e		beq $2159			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.214b	20 31 1f	jsr $1f31			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.214e	20 74 1d	jsr $1d74			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2151	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2153	c8		iny				iny
.2154	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2156	f0 e7		beq $213f			beq 	_CPLoadParameters
.2158	88		dey				dey 								; no, unconsume and check for )
.2159					_CPParamComplete:
.2159	20 76 30	jsr $3076			jsr 	CheckRightParen 			; check )
.215c	e8		inx				inx 								; check right number of parameters have been consumed
.215d	ec 0b 0c	cpx $0c0b			cpx 	paramCount
.2160	d0 01		bne $2163			bne 	_CPParamError
.2162	60		rts				rts
.2163					_CPParamError:
.2163	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2165	20 da 14	jsr $14da		jsr	errorHandler
.2168					ReturnProc:
.2168	20 a3 1f	jsr $1fa3			jsr 	RestoreLocals 				; get the locals back.
.216b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.216d	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.216f	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2171	f0 05		beq $2178			beq 	_isok
.2173	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2175	20 da 14	jsr $14da		jsr	errorHandler
.2178					_isok:
.2178	a9 01		lda #$01			lda 	#1
.217a	20 59 31	jsr $3159			jsr 	RSLoadPosition 				; reload the position from offset 1.
.217d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.217f	20 3c 31	jsr $313c			jsr 	RSFree
.2182	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c0c					dataPtr:
>0c0c							.fill 	2
.0c0e					dataIndex:
>0c0e							.fill 	1
.2183					CommandRead:
.2183	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2185	20 a5 2a	jsr $2aa5			jsr 	EvaluateReference
.2188	20 c9 21	jsr $21c9			jsr 	SwapDPCP 					; use the data pointer.
.218b	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.218d	c8		iny				iny
.218e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2190	f0 07		beq $2199			beq 	_CRInData
.2192	88		dey				dey
.2193	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2195	aa		tax				tax
.2196	20 90 30	jsr $3090			jsr 	ScanForward
.2199					_CRInData:
.2199	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.219b	20 53 2a	jsr $2a53			jsr 	Evaluate
.219e	ca		dex				dex 								; and write the value.
.219f	20 74 1d	jsr $1d74			jsr 	WriteValue
.21a2	20 c9 21	jsr $21c9			jsr 	SwapDPCP 					; get the code pointer back.
.21a5	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.21a7	c8		iny				iny
.21a8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.21aa	f0 d7		beq $2183			beq 	CommandRead
.21ac	88		dey				dey
.21ad	60		rts				rts
.21ae					CommandData:
.21ae	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.21b0	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.21b2	20 90 30	jsr $3090			jsr 	ScanForward
.21b5	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.21b6	60		rts				rts
.21b7					CommandRestore:
.21b7	ad c8 0a	lda $0ac8			lda 	basePage
.21ba	8d 0c 0c	sta $0c0c			sta 	dataPtr
.21bd	ad c9 0a	lda $0ac9			lda 	basePage+1
.21c0	8d 0d 0c	sta $0c0d			sta 	dataPtr+1
.21c3	a9 03		lda #$03			lda 	#3
.21c5	8d 0e 0c	sta $0c0e			sta 	dataIndex
.21c8	60		rts				rts
.21c9					SwapDPCP:
.21c9	8a		txa				txa
.21ca	48		pha				pha
.21cb	98		tya				tya 								; swap Y, DataIndex
.21cc	ac 0e 0c	ldy $0c0e			ldy 	DataIndex
.21cf	8d 0e 0c	sta $0c0e			sta 	DataIndex
.21d2	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.21d4	ae 0c 0c	ldx $0c0c			ldx 	dataptr
.21d7	8d 0c 0c	sta $0c0c			sta 	dataPtr
.21da	86 28		stx $28				stx 	codePtr
.21dc	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.21de	ae 0d 0c	ldx $0c0d			ldx 	dataptr+1
.21e1	8d 0d 0c	sta $0c0d			sta 	dataPtr+1
.21e4	86 29		stx $29				stx 	codePtr+1
.21e6	68		pla				pla
.21e7	aa		tax				tax
.21e8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.21e9					Command_Rem:
.21e9					Command_Rem2:
.21e9	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.21eb	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.21ed	d0 06		bne $21f5			bne 	_CRNotString
.21ef	c8		iny				iny
.21f0	98		tya				tya
.21f1	38		sec				sec
.21f2	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.21f4	a8		tay				tay
.21f5					_CRNotString:
.21f5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.21f6					Command_Repeat:
.21f6	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.21f8	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.21fa	20 1a 31	jsr $311a			jsr 	RSClaim
.21fd	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.21ff	20 46 31	jsr $3146			jsr 	RSSavePosition
.2202	60		rts				rts
.2203					Command_Until:
.2203	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2205	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2207	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2209	f0 05		beq $2210			beq 	_isok
.220b	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.220d	20 da 14	jsr $14da		jsr	errorHandler
.2210					_isok:
.2210	20 70 2a	jsr $2a70			jsr 	EvaluateRootInteger 		; at the bottom.
.2213	20 2a 30	jsr $302a			jsr 	MInt32Zero					; check if TOS zero
.2216	d0 06		bne $221e			bne 	_CUExit
.2218	a9 01		lda #$01			lda 	#1
.221a	20 59 31	jsr $3159			jsr 	RSLoadPosition 				; reload the position from offset 1.
.221d	60		rts				rts
.221e					_CUExit:
.221e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2220	20 3c 31	jsr $313c			jsr 	RSFree
.2223	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c0f					breakCounter:
>0c0f								.fill 	1
.0c10					breakIncrement:
>0c10								.fill 	1
.2224					Command_Run:
.2224					XCommand_Run:
.2224	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2226	9a		txs				txs
.2227	20 ae 22	jsr $22ae			jsr 	BreakOn 					; turn break on
.222a	20 f7 1a	jsr $1af7			jsr 	CommandClear 				; clear everything.
.222d	20 b4 22	jsr $22b4			jsr 	ResetCodeAddress 			; back to the start.
.2230					Command_RunFrom:
.2230	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2232					CRNextInstruction:
.2232	64 3a		stz $3a				stz 	softMemAlloc+1
.2234	ad 0f 0c	lda $0c0f			lda 	breakCounter 				; check for break.
.2237	6d 10 0c	adc $0c10			adc 	breakIncrement
.223a	8d 0f 0c	sta $0c0f			sta 	breakCounter
.223d	90 05		bcc $2244			bcc 	_CRNoChecks
.223f	a2 00		ldx #$00		ldx	#0
.2241	20 b9 14	jsr $14b9		jsr	deviceHandler
.2244					_CRNoChecks
.2244	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2246	10 1c		bpl $2264			bpl 	_CRNotToken
.2248	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.224a	b0 0c		bcs $2258			bcs 	_CRExecute
.224c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.224e	b0 71		bcs $22c1			bcs 	Unimplemented
.2250	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2252	b0 04		bcs $2258			bcs 	_CRExecute
.2254	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2256	b0 16		bcs $226e			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2258					_CRExecute:
.2258	c8		iny				iny 								; consume it.
.2259	0a		asl a				asl 	a 							; double it, losing most significant bit.
.225a	aa		tax				tax
.225b	20 61 22	jsr $2261			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.225e	4c 32 22	jmp $2232			jmp 	CRNextInstruction
.2261					_CRRunRoutine:
.2261	7c cb 22	jmp ($22cb,x)			jmp 	(Group0Vectors,x)
.2264					_CRNotToken:
.2264	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2266	b0 59		bcs $22c1			bcs 	Unimplemented
.2268					_CRDefaultLet:
.2268	20 61 1d	jsr $1d61			jsr 	CommandLet 					; do the default, LET
.226b	4c 32 22	jmp $2232			jmp 	CRNextInstruction
.226e					_CRCheckIndirect:
.226e	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2270	f0 0a		beq $227c			beq 	_CRAndCommand
.2272	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2274	f0 f2		beq $2268			beq 	_CRDefaultLet
.2276	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2278	f0 ee		beq $2268			beq 	_CRDefaultLet
.227a	d0 45		bne $22c1			bne 	Unimplemented
.227c					_CRAndCommand:
.227c	c8		iny				iny 								; skip over the AND token
.227d	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.227f	20 99 22	jsr $2299			jsr 	CommandAssembler 			; do the assembler command
.2282	4c 32 22	jmp $2232			jmp 	CRNextInstruction 			; and loop round.
.2285					CommandShift1:
.2285	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2287	10 38		bpl $22c1			bpl 	Unimplemented 				; we have an error as this should not happen.
.2289	c8		iny				iny 								; advance over it.
.228a	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.228c	b0 0b		bcs $2299			bcs 	CommandAssembler
.228e	0a		asl a				asl 	a 							; double into X
.228f	aa		tax				tax
.2290	7c 8f 23	jmp ($238f,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2293					CommandShift2:
.2293	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2295	20 f1 17	jsr $17f1		jsr	extensionHandler
.2298	60		rts				rts
.2299					CommandAssembler:
.2299	a2 00		ldx #$00		ldx	#0
.229b	20 7e 13	jsr $137e		jsr	assemblerHandler
.229e	60		rts				rts
.229f					CommandAssemblerLabel:
.229f	a2 02		ldx #$02		ldx	#2
.22a1	20 7e 13	jsr $137e		jsr	assemblerHandler
.22a4	60		rts				rts
.22a5					CommandColon:
.22a5	60		rts				rts
.22a6					CommandBreak:
.22a6	20 70 2a	jsr $2a70			jsr 	EvaluateRootInteger
.22a9	20 2a 30	jsr $302a			jsr 	MInt32Zero
.22ac	f0 02		beq $22b0			beq 	BreakOff
.22ae					BreakOn:
.22ae	a2 08		ldx #$08			ldx 	#8
.22b0					BreakOff:
.22b0	8e 10 0c	stx $0c10			stx 	breakIncrement
.22b3	60		rts				rts
.22b4					ResetCodeAddress:
.22b4	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.22b7	85 28		sta $28				sta 	codePtr
.22b9	ad c9 0a	lda $0ac9			lda 	basePage+1
.22bc	85 29		sta $29				sta 	codePtr+1
.22be	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.22c0	60		rts				rts
.22c1					Unimplemented:
.22c1	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.22c3	20 da 14	jsr $14da		jsr	errorHandler
.22c6					TKErr01:
.22c6					TKErr02:
.22c6					TKErr03:
.22c6					TKErr04:
.22c6					TKErr05:
.22c6					TKErr06:
.22c6					TKErr07:
.22c6					TKErr08:
.22c6					TKErr09:
.22c6					TKErr10:
.22c6					TKErr11:
.22c6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.22c8	20 da 14	jsr $14da		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.22cb					Group0Vectors:
>22cb	92 24					.word	AdvanceNextLine          ; $80 [[eol]]
>22cd	85 22					.word	CommandShift1            ; $81 [[sh1]]
>22cf	93 22					.word	CommandShift2            ; $82 [[sh2]]
>22d1	c6 22					.word	TKErr09                  ; $83 [[sh3]]
>22d3	c6 22					.word	TKErr10                  ; $84 [[fpc]]
>22d5	c6 22					.word	TKErr08                  ; $85 [[str]]
>22d7	56 26					.word	AndHandler               ; $86 and
>22d9	43 26					.word	OrHandler                ; $87 or
>22db	30 26					.word	XorHandler               ; $88 xor
>22dd	78 27					.word	CompareGreaterEq         ; $89 >=
>22df	82 27					.word	CompareLessEq            ; $8a <=
>22e1	64 27					.word	CompareGreater           ; $8b >
>22e3	5a 27					.word	CompareLess              ; $8c <
>22e5	50 27					.word	CompareEquals            ; $8d =
>22e7	6e 27					.word	CompareNotEquals         ; $8e <>
>22e9	c1 25					.word	AddHandler               ; $8f +
>22eb	e4 25					.word	SubHandler               ; $90 -
>22ed	7c 26					.word	ShrHandler               ; $91 >>
>22ef	69 26					.word	ShlHandler               ; $92 <<
>22f1	f7 25					.word	MulHandler               ; $93 *
>22f3	0a 26					.word	DivHandler               ; $94 /
>22f5	1d 26					.word	ModHandler               ; $95 mod
>22f7	b5 26					.word	PowerHandler             ; $96 ^
>22f9	8f 26					.word	WordRefHandler           ; $97 !
>22fb	a2 26					.word	ByteRefHandler           ; $98 ?
>22fd	f6 21					.word	Command_Repeat           ; $99 repeat
>22ff	5a 25					.word	Command_While            ; $9a while
>2301	60 1b					.word	Command_FOR              ; $9b for
>2303	6f 1c					.word	CommandIf                ; $9c if
>2305	c6 22					.word	TKErr04                  ; $9d defproc
>2307	03 22					.word	Command_Until            ; $9e until
>2309	7d 25					.word	Command_Wend             ; $9f wend
>230b	c1 1b					.word	Command_NEXT             ; $a0 next
>230d	c6 22					.word	TKErr06                  ; $a1 then
>230f	aa 1c					.word	Command_ENDIF            ; $a2 endif
>2311	68 21					.word	ReturnProc               ; $a3 endproc
>2313	5a 29					.word	UnaryParenthesis         ; $a4 (
>2315	b8 2a					.word	UnaryLen                 ; $a5 len(
>2317	fc 2a					.word	UnarySgn                 ; $a6 sgn(
>2319	e5 2a					.word	UnaryAbs                 ; $a7 abs(
>231b	55 2b					.word	Unary_Random             ; $a8 random(
>231d	9f 2b					.word	Unary_Page               ; $a9 page
>231f	ff 2f					.word	MInt32True               ; $aa true
>2321	03 30					.word	MInt32False              ; $ab false
>2323	6a 2b					.word	Unary_Min                ; $ac min(
>2325	6e 2b					.word	Unary_Max                ; $ad max(
>2327	77 2c					.word	UnarySys                 ; $ae sys(
>2329	20 2c					.word	UnaryTimer               ; $af timer(
>232b	af 29					.word	EventFunction            ; $b0 event(
>232d	49 2c					.word	UnaryGet                 ; $b1 get(
>232f	39 2c					.word	UnaryInkey               ; $b2 inkey(
>2331	f0 2b					.word	UnaryAlloc               ; $b3 alloc(
>2333	b0 2c					.word	ExecChr                  ; $b4 chr$(
>2335	e0 2c					.word	ExecLeft                 ; $b5 left$(
>2337	fd 2c					.word	ExecMid                  ; $b6 mid$(
>2339	25 2d					.word	ExecRight                ; $b7 right$(
>233b	92 27					.word	Event_Str                ; $b8 str$(
>233d	c1 27					.word	UnaryVal                 ; $b9 val(
>233f	13 2b					.word	UnaryPeek                ; $ba peek(
>2341	19 2b					.word	UnaryDeek                ; $bb deek(
>2343	1f 2b					.word	UnaryLeek                ; $bc leek(
>2345	d6 2a					.word	UnaryAsc                 ; $bd asc(
>2347	ca 2b					.word	UnaryIntToFloat          ; $be int(
>2349	dd 2b					.word	UnaryFloatToInt          ; $bf float(
>234b	c4 27					.word	UnaryIsVal               ; $c0 isval(
>234d	c7 2c					.word	ExecUpper                ; $c1 upper$(
>234f	c4 2c					.word	ExecLower                ; $c2 lower$(
>2351	ad 2b					.word	UnaryReference           ; $c3 @
>2353	c3 2b					.word	UnaryComplement          ; $c4 ~
>2355	c0 2b					.word	UnaryHexMarker           ; $c5 &
>2357	62 2c					.word	UnaryGetString           ; $c6 get$(
>2359	68 2c					.word	UnaryInkeyString         ; $c7 inkey$(
>235b	9f 2c					.word	UnaryMem                 ; $c8 mem
>235d	c6 22					.word	TKErr01                  ; $c9 )
>235f	a5 22					.word	CommandColon             ; $ca :
>2361	c6 22					.word	TKErr02                  ; $cb ,
>2363	c6 22					.word	TKErr03                  ; $cc ;
>2365	e9 21					.word	Command_Rem2             ; $cd '
>2367	c6 22					.word	TKErr07                  ; $ce to
>2369	c6 22					.word	TKErr05                  ; $cf step
>236b	fb 20					.word	CallProc                 ; $d0 proc
>236d	13 1f					.word	CommandLocal             ; $d1 local
>236f	52 1b					.word	Command_Dim              ; $d2 dim
>2371	e9 21					.word	Command_Rem              ; $d3 rem
>2373	61 1d					.word	CommandLet               ; $d4 let
>2375	ab 1c					.word	Command_Input            ; $d5 input
>2377	a4 1c					.word	Command_ELSE             ; $d6 else
>2379	39 25					.word	Command_VDU              ; $d7 vdu
>237b	60 20					.word	Command_Print            ; $d8 print
>237d	07 25					.word	CommandGOTO              ; $d9 goto
>237f	dc 24					.word	CommandGOSUB             ; $da gosub
>2381	ef 24					.word	CommandRETURN            ; $db return
>2383	ae 21					.word	CommandData              ; $dc data
>2385	e9 1a					.word	Command_Assert           ; $dd assert
>2387	23 20					.word	Command_Poke             ; $de poke
>2389	27 20					.word	Command_Doke             ; $df doke
>238b	2b 20					.word	Command_Loke             ; $e0 loke
>238d	ac 24					.word	Command_Ink              ; $e1 ink
>238f	b7 24					.word	Command_Paper            ; $e2 paper
>2391	a6 24					.word	Command_CLS              ; $e3 cls
>2393	c2 24					.word	Command_Locate           ; $e4 locate
>2395	a6 22					.word	CommandBreak             ; $e5 break
>2397	9f 22					.word	CommandAssemblerLabel    ; $e6 .
>2399	c6 22					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.239b					Group1Vectors:
>239b	f7 1a					.word	CommandClear             ; $86 clear
>239d	ba 1e					.word	CommandLoad              ; $87 load
>239f	cf 1e					.word	CommandSave              ; $88 save
>23a1	df 1d					.word	CommandList              ; $89 list
>23a3	15 20					.word	Command_New              ; $8a new
>23a5	24 22					.word	Command_Run              ; $8b run
>23a7	83 21					.word	CommandRead              ; $8c read
>23a9	b7 21					.word	CommandRestore           ; $8d restore
>23ab	8c 24					.word	CommandEnd               ; $8e end
>23ad	87 24					.word	CommandStop              ; $8f stop
>23af	8f 24					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c11					procList:
>0c11							.fill 	2		 					; terminated by name high being zero.
.0c13					yInLine:
>0c13							.fill 	1
.23b1					FindProcedure:
.23b1	8c 13 0c	sty $0c13			sty 	yInLine 					; save current position.
.23b4	20 6f 24	jsr $246f			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.23b7	85 2c		sta $2c				sta 	temp1
.23b9	ad 11 0c	lda $0c11			lda		procList 					; put procList address in temp2
.23bc	85 2e		sta $2e				sta 	temp2
.23be	ad 12 0c	lda $0c12			lda 	procList+1
.23c1	85 2f		sta $2f				sta 	temp2+1
.23c3	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.23c5					_FPLoop:
.23c5	b1 2e		lda ($2e),y			lda 	(temp2),y
.23c7	f0 4f		beq $2418			beq 	_FPError 					; if so, we don't know this procedure.
.23c9	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.23cb	c8		iny				iny
.23cc	b1 2e		lda ($2e),y			lda 	(temp2),y
.23ce	85 2a		sta $2a				sta 	temp0
.23d0	c8		iny				iny
.23d1	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.23d3	c5 2c		cmp $2c				cmp 	temp1
.23d5	d0 2b		bne $2402			bne 	_FPNext 					; hash is different, go to next.
.23d7	38		sec				sec
.23d8	ad 13 0c	lda $0c13			lda 	yInLine 					; position in line must be at least 4
.23db	e9 04		sbc #$04			sbc 	#4
.23dd	18		clc				clc
.23de	65 28		adc $28				adc 	codePtr
.23e0	85 30		sta $30				sta 	temp3
.23e2	a5 29		lda $29				lda 	codePtr+1
.23e4	69 00		adc #$00			adc 	#0
.23e6	85 31		sta $31				sta 	temp3+1
.23e8	98		tya				tya
.23e9	48		pha				pha
.23ea	a0 04		ldy #$04			ldy 	#4
.23ec					_FPCName:
.23ec	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.23ee	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23f0	d0 0e		bne $2400			bne 	_FPpulYNext 				; if different go to next one.
.23f2	c8		iny				iny
.23f3	c9 3a		cmp #$3a			cmp 	#$3A
.23f5	90 f5		bcc $23ec			bcc 	_FPCName 					; compare the whole lot....
.23f7	68		pla				pla 								; throw away the saved Y
.23f8	98		tya				tya 								; length of name is Y-4
.23f9	38		sec				sec
.23fa	e9 04		sbc #$04			sbc 	#4
.23fc	ac 13 0c	ldy $0c13			ldy 	yInLine  					; get the original Y back
.23ff	60		rts				rts
.2400					_FPpulYNext:
.2400	68		pla				pla
.2401	a8		tay				tay
.2402					_FPNext:
.2402	c8		iny				iny 								; next procedure record.
.2403	10 c0		bpl $23c5			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2405	98		tya				tya 								; subtract 128 from Y
.2406	38		sec				sec
.2407	e9 80		sbc #$80			sbc 	#128
.2409	a8		tay				tay
.240a	18		clc				clc 								; add 128 to temp2, so we can have more than
.240b	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.240d	69 80		adc #$80			adc 	#128
.240f	85 2e		sta $2e				sta 	temp2
.2411	90 b2		bcc $23c5			bcc 	_FPLoop
.2413	e6 2f		inc $2f				inc 	temp2+1
.2415	4c c5 23	jmp $23c5			jmp 	_FPLoop
.2418					_FPError:
.2418	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.241a	20 da 14	jsr $14da		jsr	errorHandler
.241d					ScanProc:
.241d	98		tya				tya
.241e	48		pha				pha
.241f	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2421	8d 11 0c	sta $0c11			sta 	procList
.2424	a5 36		lda $36				lda 	lowMemory+1
.2426	8d 12 0c	sta $0c12			sta 	procList+1
.2429	20 b4 22	jsr $22b4			jsr 	ResetCodeAddress 			; back to the start.
.242c					_ScanLoop:
.242c	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.242e	b1 28		lda ($28),y			lda 	(codePtr),y
.2430	f0 2a		beq $245c			beq 	_ScanExit
.2432	a0 03		ldy #$03			ldy 	#3							; get first token
.2434	b1 28		lda ($28),y			lda 	(codePtr),y
.2436	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2438	d0 12		bne $244c			bne 	_ScanNext
.243a	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.243c	20 64 24	jsr $2464			jsr 	_ScanWrite
.243f	a5 28		lda $28				lda 	codePtr
.2441	20 64 24	jsr $2464			jsr 	_ScanWrite
.2444	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2446	20 6f 24	jsr $246f			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2449	20 64 24	jsr $2464			jsr 	_ScanWrite					; and write that
.244c					_ScanNext:
.244c	18		clc				clc
.244d	a0 00		ldy #$00			ldy 	#0
.244f	b1 28		lda ($28),y			lda 	(codePtr),y
.2451	65 28		adc $28				adc 	codePtr
.2453	85 28		sta $28				sta 	codePtr
.2455	90 d5		bcc $242c			bcc 	_ScanLoop
.2457	e6 29		inc $29				inc 	codePtr+1
.2459	4c 2c 24	jmp $242c			jmp 	_ScanLoop
.245c					_ScanExit:
.245c	a9 00		lda #$00			lda 	#0 							; write ending zero.
.245e	20 64 24	jsr $2464			jsr 	_ScanWrite
.2461	68		pla				pla
.2462	a8		tay				tay
.2463	60		rts				rts
.2464					_ScanWrite:
.2464	a0 00		ldy #$00			ldy 	#0
.2466	91 35		sta ($35),y			sta 	(lowMemory),y
.2468	e6 35		inc $35				inc 	lowMemory
.246a	d0 02		bne $246e			bne 	_SWNoCarry
.246c	e6 36		inc $36				inc 	lowMemory+1
.246e					_SWNoCarry:
.246e	60		rts				rts
.246f					CalculateProcedureHash:
.246f	a9 00		lda #$00			lda 	#0 							; clear hash.
.2471	85 2a		sta $2a				sta 	temp0
.2473					_CPHLoop:
.2473	18		clc				clc 								; add character and rotate and add carry back in
.2474	b1 28		lda ($28),y			lda 	(codePtr),y
.2476	65 2a		adc $2a				adc 	temp0
.2478	6a		ror a				ror 	a
.2479	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.247b	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.247d	b1 28		lda ($28),y			lda 	(codePtr),y
.247f	c8		iny				iny 								; advance incase we go round again.
.2480	c9 3a		cmp #$3a			cmp 	#$3A
.2482	90 ef		bcc $2473			bcc 	_CPHLoop
.2484	a5 2a		lda $2a				lda 	temp0
.2486	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.2487					CommandStop:
.2487	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2489	20 da 14	jsr $14da		jsr	errorHandler
.248c					CommandEnd:
.248c	4c 68 31	jmp $3168			jmp 	WarmStart
.248f					CommandXemu:
.248f	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2492					AdvanceNextLine:
.2492	a0 00		ldy #$00			ldy 	#0 							; get offset
.2494	b1 28		lda ($28),y			lda 	(codePtr),y
.2496	18		clc				clc 								; add to codePtr
.2497	65 28		adc $28				adc 	codePtr
.2499	85 28		sta $28				sta 	codePtr
.249b	90 02		bcc $249f			bcc 	_ANLNoCarry
.249d	e6 29		inc $29				inc 	codePtr+1
.249f					_ANLNoCarry:
.249f	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.24a1	f0 e9		beq $248c			beq 	CommandEnd 					; execute END
.24a3	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.24a5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.24a6					Command_CLS:
.24a6	a2 02		ldx #$02		ldx	#2
.24a8	20 b9 14	jsr $14b9		jsr	deviceHandler
.24ab	60		rts				rts
.24ac					Command_Ink:
.24ac	a2 00		ldx #$00			ldx 	#0
.24ae	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger
.24b1	a2 08		ldx #$08		ldx	#8
.24b3	20 b9 14	jsr $14b9		jsr	deviceHandler
.24b6	60		rts				rts
.24b7					Command_Paper:
.24b7	a2 00		ldx #$00			ldx 	#0
.24b9	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger
.24bc	a2 12		ldx #$12		ldx	#18
.24be	20 b9 14	jsr $14b9		jsr	deviceHandler
.24c1	60		rts				rts
.24c2					Command_Locate:
.24c2	a2 00		ldx #$00			ldx 	#0
.24c4	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger
.24c7	20 83 30	jsr $3083			jsr 	CheckComma
.24ca	e8		inx				inx
.24cb	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger
.24ce	98		tya				tya
.24cf	48		pha				pha
.24d0	a4 49		ldy $49				ldy 	esInt0+1
.24d2	a5 48		lda $48				lda 	esInt0
.24d4	a2 10		ldx #$10		ldx	#16
.24d6	20 b9 14	jsr $14b9		jsr	deviceHandler
.24d9	68		pla				pla
.24da	a8		tay				tay
.24db	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.24dc					CommandGOSUB:
.24dc	20 70 2a	jsr $2a70			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.24df	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.24e1	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.24e3	20 1a 31	jsr $311a			jsr 	RSClaim
.24e6	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.24e8	20 46 31	jsr $3146			jsr 	RSSavePosition
.24eb	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.24ed	f0 1b		beq $250a			beq 	GotoTOS 					; and do a GOTO there.
.24ef					CommandRETURN:
.24ef	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.24f1	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.24f3	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.24f5	f0 05		beq $24fc			beq 	_isok
.24f7	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.24f9	20 da 14	jsr $14da		jsr	errorHandler
.24fc					_isok:
.24fc	a9 01		lda #$01			lda 	#1
.24fe	20 59 31	jsr $3159			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2501	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2503	20 3c 31	jsr $313c			jsr 	RSFree
.2506	60		rts				rts
.2507					CommandGOTO:
.2507	20 70 2a	jsr $2a70			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.250a					GotoTOS:
.250a	20 b4 22	jsr $22b4			jsr 	ResetCodeAddress 			; simple search.
.250d					_GotoSearch:
.250d	a0 00		ldy #$00			ldy 	#0 							; get offset
.250f	b1 28		lda ($28),y			lda 	(codePtr),y
.2511	f0 21		beq $2534			beq 	_GotoError 					; not found.
.2513	c8		iny				iny									; check LSB match
.2514	b1 28		lda ($28),y			lda 	(codePtr),y
.2516	d5 48		cmp $48,x			cmp 	esInt0,x
.2518	d0 07		bne $2521			bne 	_GotoNext
.251a	c8		iny				iny
.251b	b1 28		lda ($28),y			lda 	(codePtr),y
.251d	d5 50		cmp $50,x			cmp 	esInt1,x
.251f	f0 10		beq $2531			beq 	_GotoFound
.2521					_GotoNext:
.2521	a0 00		ldy #$00			ldy 	#0 							; go next line
.2523	b1 28		lda ($28),y			lda 	(codePtr),y
.2525	18		clc				clc
.2526	65 28		adc $28				adc 	codePtr
.2528	85 28		sta $28				sta 	codePtr
.252a	90 e1		bcc $250d			bcc 	_GotoSearch
.252c	e6 29		inc $29				inc 	codePtr+1
.252e	4c 0d 25	jmp $250d			jmp 	_GotoSearch
.2531					_GotoFound:
.2531	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2533	60		rts				rts
.2534					_GotoError:
.2534	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2536	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.2539					Command_VDU:
.2539	20 70 2a	jsr $2a70			jsr 	EvaluateRootInteger 			; get integer at root.
.253c	a5 48		lda $48				lda 	esInt0
.253e	a2 14		ldx #$14		ldx	#20
.2540	20 b9 14	jsr $14b9		jsr	deviceHandler
.2543					_CVNext:
.2543	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2545	c8		iny				iny
.2546	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2548	f0 ef		beq $2539			beq 	Command_VDU
.254a	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.254c	d0 0a		bne $2558			bne 	_CVExit
.254e	a5 50		lda $50				lda 	esInt1
.2550	a2 14		ldx #$14		ldx	#20
.2552	20 b9 14	jsr $14b9		jsr	deviceHandler
.2555	4c 43 25	jmp $2543			jmp 	_CVNext
.2558	88		dey		_CVExit:dey
.2559	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.255a					Command_While:
.255a	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.255c	a2 04		ldx #$04			ldx 	#4
.255e	20 1a 31	jsr $311a			jsr 	RSClaim 					; create on stack.
.2561	88		dey				dey
.2562	a9 01		lda #$01			lda 	#1
.2564	20 46 31	jsr $3146			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2567	c8		iny				iny
.2568	20 72 2a	jsr $2a72			jsr 	EvaluateInteger				; get the conditional
.256b	20 2a 30	jsr $302a			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.256e	f0 01		beq $2571			beq 	_CWFail
.2570	60		rts				rts
.2571					_CWFail:
.2571	a9 04		lda #$04			lda 	#4
.2573	20 3c 31	jsr $313c			jsr 	RSFree 						; close the just opened position.
.2576	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2578	aa		tax				tax
.2579	20 90 30	jsr $3090			jsr 	ScanForward
.257c	60		rts				rts
.257d					Command_Wend:
.257d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.257f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2581	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2583	f0 05		beq $258a			beq 	_isok
.2585	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2587	20 da 14	jsr $14da		jsr	errorHandler
.258a					_isok:
.258a	a9 01		lda #$01			lda 	#1
.258c	20 59 31	jsr $3159			jsr 	RSLoadPosition				; go back until true
.258f	a9 04		lda #$04			lda 	#4
.2591	20 3c 31	jsr $313c			jsr 	RSFree 						; close the loop
.2594	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.2595					BinaryProcess:
.2595	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2597	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.2599	0a		asl a				asl 	a
.259a	30 0e		bmi $25aa			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.259c	18		clc				clc 								; return CC for integer
.259d	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.259f	f0 08		beq $25a9			beq 	_BPExit 					; if both integer then return with CC.
.25a1	20 af 25	jsr $25af			jsr 	BPMakeBothFloat 			; make both float
.25a4	a9 01		lda #$01			lda 	#$01 						; set result type to float
.25a6	95 40		sta $40,x			sta 	esType,x
.25a8	38		sec				sec 								; and return with carry set.
.25a9					_BPExit:
.25a9	60		rts				rts
.25aa					_BPStringType:
.25aa	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.25ac	20 da 14	jsr $14da		jsr	errorHandler
.25af					BPMakeBothFloat:
.25af	e8		inx				inx
.25b0	20 b4 25	jsr $25b4			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.25b3	ca		dex				dex
.25b4					BPMakeFloat:
.25b4	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.25b6	4a		lsr a				lsr 	a
.25b7	b0 07		bcs $25c0			bcs 	_BPIsFloat 					; already a float if set.
.25b9	8a		txa				txa
.25ba	a2 1a		ldx #$1a		ldx	#26
.25bc	20 00 19	jsr $1900		jsr	floatingpointHandler
.25bf	aa		tax				tax
.25c0					_BPIsFloat:
.25c0	60		rts				rts
.25c1					AddHandler:
.25c1	20 10 28	jsr $2810			jsr 	DereferenceTwo 				; dereference top two on stack.
.25c4	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.25c6	35 41		and $41,x			and 	esType+1,x
.25c8	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.25ca	d0 10		bne $25dc			bne 	_AHStringConcat				; concatenate strings.
.25cc	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.25cf	b0 03		bcs $25d4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25d1	4c e7 2e	jmp $2ee7			jmp 	MInt32Add 							; else do it as integer.
.25d4					_IsFPOperation:
.25d4	8a		txa				txa 								; call the relevant fp routine
.25d5	a2 02		ldx #$02		ldx	#2
.25d7	20 00 19	jsr $1900		jsr	floatingpointHandler
.25da	aa		tax				tax
.25db	60		rts				rts
.25dc					_AHStringConcat:
.25dc	8a		txa				txa 								; handled by the string module.
.25dd	a2 04		ldx #$04		ldx	#4
.25df	20 23 34	jsr $3423		jsr	stringHandler
.25e2	aa		tax				tax
.25e3	60		rts				rts
.25e4					SubHandler:
.25e4	20 10 28	jsr $2810			jsr 	DereferenceTwo
.25e7	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.25ea	b0 03		bcs $25ef			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25ec	4c 01 2f	jmp $2f01			jmp 	MInt32Sub 							; else do it as integer.
.25ef					_IsFPOperation:
.25ef	8a		txa				txa 								; call the relevant fp routine
.25f0	a2 10		ldx #$10		ldx	#16
.25f2	20 00 19	jsr $1900		jsr	floatingpointHandler
.25f5	aa		tax				tax
.25f6	60		rts				rts
.25f7					MulHandler:
.25f7	20 10 28	jsr $2810			jsr 	DereferenceTwo
.25fa	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.25fd	b0 03		bcs $2602			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25ff	4c 1b 2f	jmp $2f1b			jmp 	MInt32Multiply 							; else do it as integer.
.2602					_IsFPOperation:
.2602	8a		txa				txa 								; call the relevant fp routine
.2603	a2 0a		ldx #$0a		ldx	#10
.2605	20 00 19	jsr $1900		jsr	floatingpointHandler
.2608	aa		tax				tax
.2609	60		rts				rts
.260a					DivHandler:
.260a	20 10 28	jsr $2810			jsr 	DereferenceTwo
.260d	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.2610	b0 03		bcs $2615			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2612	4c d8 2d	jmp $2dd8			jmp 	MInt32SDivide 							; else do it as integer.
.2615					_IsFPOperation:
.2615	8a		txa				txa 								; call the relevant fp routine
.2616	a2 06		ldx #$06		ldx	#6
.2618	20 00 19	jsr $1900		jsr	floatingpointHandler
.261b	aa		tax				tax
.261c	60		rts				rts
.261d					ModHandler:
.261d	20 10 28	jsr $2810			jsr 	DereferenceTwo
.2620	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.2623	b0 03		bcs $2628			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2625	4c 56 2e	jmp $2e56			jmp 	MInt32Modulus 							; else do it as integer.
.2628					_IsFPOperation:
.2628	8a		txa				txa 								; call the relevant fp routine
.2629	a2 08		ldx #$08		ldx	#8
.262b	20 00 19	jsr $1900		jsr	floatingpointHandler
.262e	aa		tax				tax
.262f	60		rts				rts
.2630					XorHandler:
.2630	20 10 28	jsr $2810			jsr 	DereferenceTwo
.2633	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.2636	b0 03		bcs $263b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2638	4c 8a 2d	jmp $2d8a			jmp 	MInt32Xor 							; else do it as integer.
.263b					_IsFPOperation:
.263b	8a		txa				txa 								; call the relevant fp routine
.263c	a2 08		ldx #$08		ldx	#8
.263e	20 00 19	jsr $1900		jsr	floatingpointHandler
.2641	aa		tax				tax
.2642	60		rts				rts
.2643					OrHandler:
.2643	20 10 28	jsr $2810			jsr 	DereferenceTwo
.2646	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.2649	b0 03		bcs $264e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.264b	4c 71 2d	jmp $2d71			jmp 	MInt32Or 							; else do it as integer.
.264e					_IsFPOperation:
.264e	8a		txa				txa 								; call the relevant fp routine
.264f	a2 08		ldx #$08		ldx	#8
.2651	20 00 19	jsr $1900		jsr	floatingpointHandler
.2654	aa		tax				tax
.2655	60		rts				rts
.2656					AndHandler:
.2656	20 10 28	jsr $2810			jsr 	DereferenceTwo
.2659	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.265c	b0 03		bcs $2661			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.265e	4c 58 2d	jmp $2d58			jmp 	MInt32And 							; else do it as integer.
.2661					_IsFPOperation:
.2661	8a		txa				txa 								; call the relevant fp routine
.2662	a2 08		ldx #$08		ldx	#8
.2664	20 00 19	jsr $1900		jsr	floatingpointHandler
.2667	aa		tax				tax
.2668	60		rts				rts
.2669					ShlHandler:
.2669	20 10 28	jsr $2810			jsr 	DereferenceTwo
.266c	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.266f	b0 03		bcs $2674			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2671	4c ea 26	jmp $26ea			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2674					_IsFPOperation:
.2674	8a		txa				txa 								; call the relevant fp routine
.2675	a2 08		ldx #$08		ldx	#8
.2677	20 00 19	jsr $1900		jsr	floatingpointHandler
.267a	aa		tax				tax
.267b	60		rts				rts
.267c					ShrHandler:
.267c	20 10 28	jsr $2810			jsr 	DereferenceTwo
.267f	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.2682	b0 03		bcs $2687			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2684	4c ed 26	jmp $26ed			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2687					_IsFPOperation:
.2687	8a		txa				txa 								; call the relevant fp routine
.2688	a2 08		ldx #$08		ldx	#8
.268a	20 00 19	jsr $1900		jsr	floatingpointHandler
.268d	aa		tax				tax
.268e	60		rts				rts
.268f					WordRefHandler:
.268f	20 10 28	jsr $2810			jsr 	DereferenceTwo
.2692	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.2695	b0 03		bcs $269a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2697	4c dc 26	jmp $26dc			jmp 	MInt32WordIndirect 							; else do it as integer.
.269a					_IsFPOperation:
.269a	8a		txa				txa 								; call the relevant fp routine
.269b	a2 08		ldx #$08		ldx	#8
.269d	20 00 19	jsr $1900		jsr	floatingpointHandler
.26a0	aa		tax				tax
.26a1	60		rts				rts
.26a2					ByteRefHandler:
.26a2	20 10 28	jsr $2810			jsr 	DereferenceTwo
.26a5	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.26a8	b0 03		bcs $26ad			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26aa	4c e0 26	jmp $26e0			jmp 	MInt32ByteIndirect 							; else do it as integer.
.26ad					_IsFPOperation:
.26ad	8a		txa				txa 								; call the relevant fp routine
.26ae	a2 08		ldx #$08		ldx	#8
.26b0	20 00 19	jsr $1900		jsr	floatingpointHandler
.26b3	aa		tax				tax
.26b4	60		rts				rts
.26b5					PowerHandler:
.26b5	20 10 28	jsr $2810			jsr 	DereferenceTwo
.26b8	20 95 25	jsr $2595			jsr 	BinaryProcess 				; check to see if either is float
.26bb	b0 03		bcs $26c0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26bd	4c c8 26	jmp $26c8			jmp 	PowerInteger 							; else do it as integer.
.26c0					_IsFPOperation:
.26c0	8a		txa				txa 								; call the relevant fp routine
.26c1	a2 16		ldx #$16		ldx	#22
.26c3	20 00 19	jsr $1900		jsr	floatingpointHandler
.26c6	aa		tax				tax
.26c7	60		rts				rts
.26c8					PowerInteger:
.26c8	20 af 25	jsr $25af			jsr 	BPMakeBothFloat				; make them float.
.26cb	8a		txa				txa
.26cc	a2 16		ldx #$16		ldx	#22
.26ce	20 00 19	jsr $1900		jsr	floatingpointHandler
.26d1	a2 12		ldx #$12		ldx	#18
.26d3	20 00 19	jsr $1900		jsr	floatingpointHandler
.26d6	aa		tax				tax
.26d7	a9 00		lda #$00			lda 	#0 							; make type integer
.26d9	95 40		sta $40,x			sta 	esType,x
.26db	60		rts				rts
.26dc					Mint32WordIndirect:
.26dc	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.26de	d0 02		bne $26e2			bne 	Min32Indirect
.26e0					Mint32ByteIndirect:
.26e0	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.26e2					Min32Indirect:
.26e2	48		pha				pha 								; save the indirection
.26e3	20 e7 2e	jsr $2ee7			jsr 	MInt32Add 					; add a!b a?b
.26e6	68		pla				pla 								; and set the type to reference.
.26e7	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.26e9	60		rts				rts
.26ea					Mint32ShiftLeftX:
.26ea	18		clc				clc 								; CC shift left
.26eb	90 01		bcc $26ee			bcc 	Mint32Shift
.26ed					Mint32ShiftRightX:
.26ed	38		sec				sec 								; CS shift right
.26ee					Mint32Shift:
.26ee	08		php				php 								; save carry flag on stack.
.26ef	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.26f1	15 59		ora $59,x			ora 	esInt2+1,x
.26f3	15 61		ora $61,x			ora 	esInt3+1,x
.26f5	d0 1e		bne $2715			bne 	_MShiftZero
.26f7	b5 49		lda $49,x			lda 	esInt0+1,x
.26f9	c9 20		cmp #$20			cmp 	#32
.26fb	b0 18		bcs $2715			bcs 	_MShiftZero
.26fd					_MShiftLoop:
.26fd	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.26ff	f0 12		beq $2713			beq 	_MShiftExit
.2701	d6 49		dec $49,x			dec 	esInt0+1,x
.2703	28		plp				plp 								; restore and save carry
.2704	08		php				php
.2705	90 06		bcc $270d			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2707	20 21 30	jsr $3021			jsr 	Mint32ShiftRight
.270a	4c fd 26	jmp $26fd			jmp 	_MShiftLoop
.270d					_MShiftLeft:
.270d	20 18 30	jsr $3018			jsr 	Mint32ShiftLeft
.2710	4c fd 26	jmp $26fd			jmp 	_MShiftLoop
.2713					_MShiftExit:
.2713	28		plp				plp	 								; throw saved carry and exit
.2714	60		rts				rts
.2715					_MShiftZero:
.2715	4c 03 30	jmp $3003			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.2718					PerformComparison:
.2718	20 10 28	jsr $2810			jsr 	DereferenceTwo 				; make both values.
.271b	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.271d	35 41		and $41,x			and 	esType+1,x
.271f	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2720	30 1d		bmi $273f			bmi 	_PCIsString
.2722	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.2724	15 41		ora $41,x			ora 	esType+1,x
.2726	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2727	30 22		bmi $274b			bmi 	_PCError
.2729	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.272b	f0 0f		beq $273c			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.272d	20 af 25	jsr $25af			jsr 	BPMakeBothFloat 			; make both float
.2730	8a		txa				txa
.2731	a2 04		ldx #$04		ldx	#4
.2733	20 00 19	jsr $1900		jsr	floatingpointHandler
.2736	86 32		stx $32				stx 	tempShort 					; save result
.2738	aa		tax				tax
.2739	a5 32		lda $32				lda 	tempShort
.273b	60		rts				rts
.273c					_PCIsInteger:
.273c	4c a3 2d	jmp $2da3			jmp 	MInt32Compare
.273f					_PCIsString:
.273f	8a		txa				txa 								; A has SP
.2740	a2 08		ldx #$08		ldx	#8
.2742	20 23 34	jsr $3423		jsr	stringHandler
.2745	86 32		stx $32				stx 	tempShort 					; save result
.2747	aa		tax				tax 								; put SP back in X and get result.
.2748	a5 32		lda $32				lda 	tempShort
.274a	60		rts				rts
.274b					_PCError:
.274b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.274d	20 da 14	jsr $14da		jsr	errorHandler
.2750					CompareEquals:
.2750	20 18 27	jsr $2718			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2753	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2755	f0 35		beq $278c			beq  	CompareTrue
.2757	4c 8f 27	jmp $278f			jmp 	CompareFalse
.275a					CompareLess:
.275a	20 18 27	jsr $2718			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.275d	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.275f	f0 2b		beq $278c			beq  	CompareTrue
.2761	4c 8f 27	jmp $278f			jmp 	CompareFalse
.2764					CompareGreater:
.2764	20 18 27	jsr $2718			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2767	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2769	f0 21		beq $278c			beq  	CompareTrue
.276b	4c 8f 27	jmp $278f			jmp 	CompareFalse
.276e					CompareNotEquals:
.276e	20 18 27	jsr $2718			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2771	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2773	d0 17		bne $278c			bne  	CompareTrue
.2775	4c 8f 27	jmp $278f			jmp 	CompareFalse
.2778					CompareGreaterEq:
.2778	20 18 27	jsr $2718			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.277b	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.277d	d0 0d		bne $278c			bne  	CompareTrue
.277f	4c 8f 27	jmp $278f			jmp 	CompareFalse
.2782					CompareLessEq:
.2782	20 18 27	jsr $2718			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2785	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2787	d0 03		bne $278c			bne  	CompareTrue
.2789	4c 8f 27	jmp $278f			jmp 	CompareFalse
.278c					CompareTrue:
.278c	4c ff 2f	jmp $2fff			jmp 	MInt32True
.278f					CompareFalse:
.278f	4c 03 30	jmp $3003			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.2792					Event_Str:
.2792	20 5c 2a	jsr $2a5c			jsr 	EvaluateNumeric 			; get a number.
.2795	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.2797	d0 13		bne $27ac			bne 	_ESFloat
.2799	20 ef 27	jsr $27ef			jsr 	ConvertGetBase 				; get base, or default.
.279c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.279e	85 2a		sta $2a				sta 	temp0
.27a0	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.27a2	85 2b		sta $2b				sta 	1+(temp0)
.27a4	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.27a6	20 59 2f	jsr $2f59			jsr 	MInt32ToString 				; convert to string.
.27a9	4c b9 27	jmp $27b9			jmp 	_ESCloneExit 				; clone and exit.
.27ac					_ESFloat:
.27ac	20 76 30	jsr $3076			jsr 	CheckRightParen 			; check closing )
.27af	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.27b2	8a		txa				txa
.27b3	a2 14		ldx #$14		ldx	#20
.27b5	20 00 19	jsr $1900		jsr	floatingpointHandler
.27b8	aa		tax				tax
.27b9					_ESCloneExit:
.27b9	8a		txa				txa
.27ba	a2 02		ldx #$02		ldx	#2
.27bc	20 23 34	jsr $3423		jsr	stringHandler
.27bf	aa		tax				tax
.27c0	60		rts				rts
.27c1					UnaryVal:
.27c1	38		sec				sec 								; Carry set to return value
.27c2	b0 01		bcs $27c5			bcs 	ValueMain
.27c4					UnaryIsVal:
.27c4	18		clc				clc									; Carry clear to return legitimacy
.27c5					ValueMain:
.27c5	08		php				php 								; save results (CS is value, CC is validation)
.27c6	20 67 2a	jsr $2a67			jsr 	EvaluateString
.27c9	20 ef 27	jsr $27ef			jsr 	ConvertGetBase 				; get base, if any.
.27cc	98		tya				tya
.27cd	48		pha				pha
.27ce	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.27d1	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.27d3	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.27d5	20 71 2e	jsr $2e71			jsr 	MInt32FromString 			; convert it back from a string.
.27d8	b0 0c		bcs $27e6			bcs 	_VMSuccess 					; successfully converted.
.27da	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.27dc	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.27de	f0 00		beq $27e0			beq 	_VMFailed 	 				; so we failed.
.27e0					_VMFailed:
.27e0	68		pla				pla
.27e1	a8		tay				tay
.27e2	28		plp				plp
.27e3	4c 03 30	jmp $3003			jmp 	MInt32False 				; return 0 whatever.
.27e6					_VMSuccess:
.27e6	68		pla				pla
.27e7	a8		tay				tay
.27e8	28		plp				plp 								; if CS the it was val() so we want the value.
.27e9	b0 03		bcs $27ee			bcs 	_VMExit
.27eb	4c ff 2f	jmp $2fff			jmp 	MInt32True 					; otherwise return true as successful.
.27ee					_VMExit:
.27ee	60		rts				rts
.27ef					ConvertGetBase:
.27ef	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.27f1	95 49		sta $49,x			sta 	esInt0+1,x
.27f3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.27f5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.27f7	d0 0e		bne $2807			bne 	_CGBDone 					; not found, should be )
.27f9	e8		inx				inx 								; next level
.27fa	c8		iny				iny 								; skip comma.
.27fb	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger		; evaluate the base.
.27fe	ca		dex				dex
.27ff	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2801	90 08		bcc $280b			bcc 	_CGBValue 					; (it should work as high as 37)
.2803	c9 11		cmp #$11			cmp 	#17
.2805	b0 04		bcs $280b			bcs 	_CGBValue
.2807					_CGBDone:
.2807	20 76 30	jsr $3076			jsr 	CheckRightParen
.280a	60		rts				rts
.280b					_CGBValue:
.280b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.280d	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2810					DereferenceTwo:
.2810	e8		inx				inx
.2811	20 15 28	jsr $2815			jsr 	DereferenceOne
.2814	ca		dex				dex
.2815					DereferenceOne:
.2815	b5 40		lda $40,x			lda 	esType,x
.2817	10 3d		bpl $2856			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2819	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.281a	b0 3b		bcs $2857			bcs 	_DRFloatDeReference
.281c	98		tya				tya
.281d	48		pha				pha
.281e	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.2820	85 2a		sta $2a				sta 	temp0
.2822	b5 50		lda $50,x			lda 	esInt1,x
.2824	85 2b		sta $2b				sta 	temp0+1
.2826	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2828	95 50		sta $50,x			sta 	esInt1,x
.282a	95 58		sta $58,x			sta 	esInt2,x
.282c	95 60		sta $60,x			sta 	esInt3,x
.282e	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.2830	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2832	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2833	30 0d		bmi $2842			bmi 	_DeRefString 				; string, 2 bytes only
.2835	d0 11		bne $2848			bne 	_DeRefByte 					; byte 1 byte only
.2837					_DeRefLong:
.2837	a0 03		ldy #$03			ldy 	#3
.2839	b1 2a		lda ($2a),y			lda 	(temp0),y
.283b	95 60		sta $60,x			sta 	esInt3,x
.283d	88		dey				dey
.283e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2840	95 58		sta $58,x			sta 	esInt2,x
.2842					_DeRefString:
.2842	a0 01		ldy #$01			ldy 	#1
.2844	b1 2a		lda ($2a),y			lda 	(temp0),y
.2846	95 50		sta $50,x			sta 	esInt1,x
.2848					_DeRefByte:
.2848	a0 00		ldy #$00			ldy 	#0
.284a	b1 2a		lda ($2a),y			lda 	(temp0),y
.284c	95 48		sta $48,x			sta 	esInt0,x
.284e	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.2850	29 40		and #$40			and 	#$40
.2852	95 40		sta $40,x			sta 	esType,x
.2854	68		pla				pla
.2855	a8		tay				tay
.2856					_DRNotReference
.2856	60		rts				rts
.2857					_DRFloatDereference:
.2857	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0 					; address to deref in temp0
.285a	8a		txa				txa
.285b	a2 1c		ldx #$1c		ldx	#28
.285d	20 00 19	jsr $1900		jsr	floatingpointHandler
.2860	aa		tax				tax
.2861	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2863	95 40		sta $40,x			sta 	esType,x
.2865	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2866					EvaluateLevel:
.2866	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2868	b0 1e		bcs $2888			bcs 	_ELStack
.286a	48		pha				pha 								; save precedence level.
.286b	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.286d	95 48		sta $48,x			sta 	esInt0,x
.286f	95 50		sta $50,x			sta 	esInt1,x
.2871	95 58		sta $58,x			sta 	esInt2,x
.2873	95 60		sta $60,x			sta 	esInt3,x
.2875	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.2877	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2879	30 26		bmi $28a1			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.287b	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.287c	30 0f		bmi $288d			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.287e	8a		txa				txa 								; stack level in X
.287f	a2 00		ldx #$00		ldx	#0
.2881	20 27 3f	jsr $3f27		jsr	variableHandler
.2884	aa		tax				tax
.2885	4c ca 28	jmp $28ca			jmp		_ELHasTerm
.2888					_ELStack:
.2888	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.288a	20 da 14	jsr $14da		jsr	errorHandler
.288d					_ELIsConstant:
.288d	4a		lsr a				lsr 	a 							; get the value back
.288e	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2890	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.2892					_ELCheckNext:
.2892	c8		iny				iny 								; look at next
.2893	b1 28		lda ($28),y			lda 	(codePtr),y
.2895	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2897	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2899	b0 2f		bcs $28ca			bcs 	_ELHasTerm 					; done getting the constant.
.289b	20 63 29	jsr $2963			jsr 	ELShiftByteIn 				; shift byte into position.
.289e	4c 92 28	jmp $2892			jmp 	_ELCheckNext
.28a1					_ELIsToken:
.28a1	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.28a3	f0 0f		beq $28b4			beq 	_ELIsString
.28a5	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.28a7	d0 5f		bne $2908			bne 	_ELCheckUnary
.28a9	8a		txa				txa 								; put X into A
.28aa	c8		iny				iny 								; skip over the float marker
.28ab	a2 18		ldx #$18		ldx	#24
.28ad	20 00 19	jsr $1900		jsr	floatingpointHandler
.28b0	aa		tax				tax 								; restore X
.28b1	4c ca 28	jmp $28ca			jmp 	_ELHasTerm
.28b4					_ELIsString:
.28b4	98		tya				tya 								; address of string is codePtr+y+1
.28b5	38		sec				sec
.28b6	65 28		adc $28				adc 	codePtr
.28b8	95 48		sta $48,x			sta 	esInt0,x
.28ba	a5 29		lda $29				lda 	codePtr+1
.28bc	69 00		adc #$00			adc 	#0
.28be	95 50		sta $50,x			sta 	esInt1,x
.28c0	a9 40		lda #$40			lda 	#$40 						; set type to string value
.28c2	95 40		sta $40,x			sta 	esType,x
.28c4	c8		iny				iny 								; skip over string.
.28c5	98		tya				tya
.28c6	38		sec				sec									; +1 for the length itself.
.28c7	71 28		adc ($28),y			adc 	(codePtr),y
.28c9	a8		tay				tay 								; and fall through to term loop code.
.28ca					_ELHasTerm:
.28ca	b1 28		lda ($28),y			lda 	(codePtr),y
.28cc	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.28ce	90 04		bcc $28d4			bcc 	_ELPopExit
.28d0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.28d2	90 02		bcc $28d6			bcc 	_ELHasBinaryTerm
.28d4					_ELPopExit:
.28d4	68		pla				pla
.28d5					_ELExit:
.28d5	60		rts				rts
.28d6					_ELHasBinaryTerm:
.28d6	84 32		sty $32				sty 	tempShort 					; save position
.28d8	a8		tay				tay 								; use token as an index and get the precedence.
.28d9	b9 0b 29	lda $290b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.28dc	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.28de	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.28e0	68		pla				pla 								; restore current level.
.28e1	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.28e3	b0 f0		bcs $28d5			bcs 	_ELExit
.28e5	48		pha				pha 								; save current level back on the stack.
.28e6	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.28e8	48		pha				pha
.28e9	c8		iny				iny
.28ea	e8		inx				inx 								; calculate the RHS at the operator precedence.
.28eb	a5 32		lda $32				lda 	tempShort
.28ed	20 66 28	jsr $2866			jsr 	EvaluateLevel
.28f0	ca		dex				dex
.28f1	68		pla				pla 								; get the operator back out.
.28f2					_ELExecuteA:
.28f2	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.28f4	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.28f5	aa		tax				tax
.28f6	bd cb 22	lda $22cb,x			lda 	Group0Vectors,x
.28f9	85 2a		sta $2a				sta 	temp0
.28fb	bd cc 22	lda $22cc,x			lda 	Group0Vectors+1,x
.28fe	85 2b		sta $2b				sta 	temp0+1
.2900	a6 32		ldx $32				ldx 	tempShort
.2902	20 4f 29	jsr $294f			jsr 	_ELCallTemp0
.2905	4c ca 28	jmp $28ca			jmp 	_ELHasTerm 					; and loop back round.
.2908					_ELCheckUnary:
.2908	c8		iny				iny 								; skip over token.
.2909	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.290b	f0 19		beq $2926			beq 	_ELMinus
.290d	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.290f	f0 2c		beq $293d			beq 	_ELIndirect
.2911	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2913	f0 28		beq $293d			beq 	_ELIndirect
.2915	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2917	f0 39		beq $2952			beq 	_ELExtension
.2919	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.291b	90 04		bcc $2921			bcc 	_ELUSyntax
.291d	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.291f	90 d1		bcc $28f2			bcc 	_ELExecuteA 				; if so do that token.
.2921					_ELUSyntax:
.2921	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2923	20 da 14	jsr $14da		jsr	errorHandler
.2926					_ELMinus:
.2926	20 3b 2a	jsr $2a3b			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2929	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.292b	f0 0a		beq $2937			beq 	_ELMinusInteger
.292d	8a		txa				txa
.292e	a2 0c		ldx #$0c		ldx	#12
.2930	20 00 19	jsr $1900		jsr	floatingpointHandler
.2933	aa		tax				tax
.2934	4c ca 28	jmp $28ca			jmp 	_ELHasTerm
.2937					_ELMinusInteger:
.2937	20 bd 2f	jsr $2fbd			jsr 	MInt32Negate 				; do int negate
.293a	4c ca 28	jmp $28ca			jmp 	_ELHasTerm
.293d					_ELIndirect:
.293d	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.293e	20 44 2a	jsr $2a44			jsr 	EvaluateIntegerTerm 		; integer address
.2941	68		pla				pla
.2942	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2944	f0 02		beq $2948			beq 	_ELHaveModifier
.2946	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2948					_ELHaveModifier:
.2948	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.294a	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.294c	4c ca 28	jmp $28ca			jmp 	_ELHasTerm
.294f					_ELCallTemp0:
.294f	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2952					_ELExtension:
.2952	8a		txa				txa 								; stack pos in A
.2953	20 f1 17	jsr $17f1		jsr	extensionHandler
.2956	aa		tax				tax 								; restore stack
.2957	4c ca 28	jmp $28ca			jmp 	_ELHasTerm
.295a					UnaryParenthesis:
.295a	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.295c	20 66 28	jsr $2866			jsr 	EvaluateLevel
.295f	20 76 30	jsr $3076			jsr 	CheckRightParen 			; check for )
.2962	60		rts				rts
.2963					ELShiftByteIn:
.2963	48		pha				pha 								; save bits to shift in.
.2964	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.2966	48		pha				pha
.2967	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.2969	95 60		sta $60,x			sta 	esInt3,x
.296b	b5 50		lda $50,x			lda 	esInt1,x
.296d	95 58		sta $58,x			sta 	esInt2,x
.296f	b5 48		lda $48,x			lda 	esInt0,x
.2971	95 50		sta $50,x			sta 	esInt1,x
.2973	a9 00		lda #$00			lda 	#0
.2975	95 48		sta $48,x			sta 	esInt0,x
.2977	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2978	29 03		and #$03			and 	#3 							; only want lower 2 bits
.297a	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.297c					_ELShiftLoop:
.297c	4a		lsr a				lsr 	a
.297d	76 60		ror $60,x			ror 	esInt3,x
.297f	76 58		ror $58,x			ror 	esInt2,x
.2981	76 50		ror $50,x			ror 	esInt1,x
.2983	76 48		ror $48,x			ror 	esInt0,x
.2985	c9 01		cmp #$01			cmp 	#1
.2987	d0 f3		bne $297c			bne 	_ELShiftLoop
.2989	68		pla				pla 								; get original 6 bit value and OR in.
.298a	29 3f		and #$3f			and 	#$3F
.298c	15 48		ora $48,x			ora 	esInt0,x
.298e	95 48		sta $48,x			sta 	esInt0,x
.2990	60		rts				rts
.2991					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2991	01					.byte	$01			; $86 and
>2992	01					.byte	$01			; $87 or
>2993	01					.byte	$01			; $88 xor
>2994	02					.byte	$02			; $89 >=
>2995	02					.byte	$02			; $8a <=
>2996	02					.byte	$02			; $8b >
>2997	02					.byte	$02			; $8c <
>2998	02					.byte	$02			; $8d =
>2999	02					.byte	$02			; $8e <>
>299a	03					.byte	$03			; $8f +
>299b	03					.byte	$03			; $90 -
>299c	04					.byte	$04			; $91 >>
>299d	04					.byte	$04			; $92 <<
>299e	04					.byte	$04			; $93 *
>299f	04					.byte	$04			; $94 /
>29a0	04					.byte	$04			; $95 mod
>29a1	05					.byte	$05			; $96 ^
>29a2	06					.byte	$06			; $97 !
>29a3	06					.byte	$06			; $98 ?
>29a4	82					.byte	$82			; $99 repeat
>29a5	82					.byte	$82			; $9a while
>29a6	82					.byte	$82			; $9b for
>29a7	82					.byte	$82			; $9c if
>29a8	82					.byte	$82			; $9d defproc
>29a9	80					.byte	$80			; $9e until
>29aa	80					.byte	$80			; $9f wend
>29ab	80					.byte	$80			; $a0 next
>29ac	80					.byte	$80			; $a1 then
>29ad	80					.byte	$80			; $a2 endif
>29ae	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.29af					EventFunction:
.29af	20 a5 2a	jsr $2aa5			jsr 	EvaluateReference			; get the variable reference that tracks the event
.29b2	b5 40		lda $40,x			lda 	esType,x
.29b4	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.29b6	d0 5b		bne $2a13			bne 	_EFType
.29b8	20 83 30	jsr $3083			jsr 	CheckComma
.29bb	e8		inx				inx
.29bc	20 72 2a	jsr $2a72			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.29bf	20 76 30	jsr $3076			jsr 	CheckRightParen 			; finish off with the right bracket
.29c2	ca		dex				dex
.29c3	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.29c5	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.29c7	15 58		ora $58,x			ora 	esInt2,x
.29c9	15 60		ora $60,x			ora 	esInt3,x
.29cb	d0 41		bne $2a0e			bne 	_EFValue
.29cd	98		tya				tya
.29ce	48		pha				pha
.29cf	8a		txa				txa
.29d0	48		pha				pha
.29d1	a2 1c		ldx #$1c		ldx	#28
.29d3	20 b9 14	jsr $14b9		jsr	deviceHandler
.29d6	84 2d		sty $2d				sty 	temp1+1
.29d8	85 2c		sta $2c				sta 	temp1
.29da	68		pla				pla
.29db	aa		tax				tax
.29dc	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.29df	a0 03		ldy #$03			ldy 	#3							; if -ve
.29e1	b1 2a		lda ($2a),y			lda 	(temp0),y
.29e3	30 23		bmi $2a08			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.29e5	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.29e7	b1 2a		lda ($2a),y			lda 	(temp0),y
.29e9	c8		iny				iny
.29ea	11 2a		ora ($2a),y			ora 	(temp0),y
.29ec	f0 17		beq $2a05			beq 	_EFInitialise 				; if so, initialise the value but return false.
.29ee	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.29f0	38		sec				sec
.29f1	b1 2a		lda ($2a),y			lda 	(temp0),y
.29f3	e5 2c		sbc $2c				sbc 	temp1
.29f5	c8		iny				iny
.29f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.29f8	e5 2d		sbc $2d				sbc 	temp1+1
.29fa	10 0c		bpl $2a08			bpl 	_EFFail 					; if trigger >= timer then return False
.29fc	20 18 2a	jsr $2a18			jsr 	SetEventTimer 				; reset the timer for next time.
.29ff	20 ff 2f	jsr $2fff			jsr	 	MInt32True 					; and treutn true as fired.
.2a02	68		pla				pla
.2a03	a8		tay				tay
.2a04	60		rts				rts
.2a05					_EFInitialise:
.2a05	20 18 2a	jsr $2a18			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2a08					_EFFail:
.2a08	68		pla				pla
.2a09	a8		tay				tay
.2a0a	20 03 30	jsr $3003			jsr 	MInt32False
.2a0d	60		rts				rts
.2a0e					_EFValue:
.2a0e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2a10	20 da 14	jsr $14da		jsr	errorHandler
.2a13					_EFType:
.2a13	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a15	20 da 14	jsr $14da		jsr	errorHandler
.2a18					SetEventTimer:
.2a18	a0 00		ldy #$00			ldy 	#0
.2a1a	18		clc				clc
.2a1b	a5 2c		lda $2c				lda 	temp1
.2a1d	75 49		adc $49,x			adc 	esInt0+1,x
.2a1f	91 2a		sta ($2a),y			sta		(temp0),y
.2a21	c8		iny				iny
.2a22	a5 2d		lda $2d				lda 	temp1+1
.2a24	75 51		adc $51,x			adc 	esInt1+1,x
.2a26	91 2a		sta ($2a),y			sta		(temp0),y
.2a28	88		dey				dey
.2a29	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2a2b	d0 04		bne $2a31			bne 	_SETExit 					; zero means initialise.....
.2a2d	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2a2f	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2a31					_SETExit:
.2a31	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2a32					EvaluateTerm:
.2a32	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2a34	20 66 28	jsr $2866			jsr 	EvaluateLevel
.2a37	20 15 28	jsr $2815			jsr 	DereferenceOne
.2a3a	60		rts				rts
.2a3b					EvaluateNumericTerm:
.2a3b	20 32 2a	jsr $2a32			jsr 	EvaluateTerm
.2a3e	b5 40		lda $40,x			lda 	esType,x
.2a40	0a		asl a				asl 	a 							; see if it's a string.
.2a41	30 09		bmi $2a4c			bmi 	ENTType
.2a43	60		rts				rts
.2a44					EvaluateIntegerTerm:
.2a44	20 32 2a	jsr $2a32			jsr 	EvaluateTerm
.2a47	b5 40		lda $40,x			lda 	esType,x
.2a49	d0 01		bne $2a4c			bne 	ENTType
.2a4b	60		rts				rts
.2a4c					ENTType:
.2a4c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a4e	20 da 14	jsr $14da		jsr	errorHandler
.2a51					EvaluateRoot:
.2a51	a2 00		ldx #$00			ldx 	#0
.2a53					Evaluate:
.2a53	a9 00		lda #$00			lda 	#0
.2a55	20 66 28	jsr $2866			jsr 	EvaluateLevel
.2a58	20 15 28	jsr $2815			jsr 	DereferenceOne
.2a5b	60		rts				rts
.2a5c					EvaluateNumeric:
.2a5c	20 53 2a	jsr $2a53			jsr 	Evaluate
.2a5f	b5 40		lda $40,x			lda 	esType,x
.2a61	0a		asl a				asl 	a 							; see if it's a string.
.2a62	30 e8		bmi $2a4c			bmi 	ENTType
.2a64	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2a65	4a		lsr a				lsr 	a
.2a66	60		rts				rts
.2a67					EvaluateString:
.2a67	20 53 2a	jsr $2a53			jsr 	Evaluate
.2a6a	b5 40		lda $40,x			lda 	esType,x
.2a6c	0a		asl a				asl 	a 							; see if it's a string.
.2a6d	10 dd		bpl $2a4c			bpl 	ENTType
.2a6f	60		rts				rts
.2a70					EvaluateRootInteger:
.2a70	a2 00		ldx #$00			ldx 	#0
.2a72					EvaluateInteger:
.2a72	20 53 2a	jsr $2a53			jsr 	Evaluate
.2a75	b5 40		lda $40,x			lda 	esType,x
.2a77	d0 d3		bne $2a4c			bne 	ENTType
.2a79	60		rts				rts
.2a7a					EvaluateSmallInteger:
.2a7a	20 72 2a	jsr $2a72			jsr 	EvaluateInteger
.2a7d	b5 50		lda $50,x			lda 	esInt1,x
.2a7f	15 58		ora $58,x			ora 	esInt2,x
.2a81	15 60		ora $60,x			ora 	esInt3,x
.2a83	d0 03		bne $2a88			bne 	_ESIValue
.2a85	b5 48		lda $48,x			lda 	esInt0,x
.2a87	60		rts				rts
.2a88					_ESIValue:
.2a88	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2a8a	20 da 14	jsr $14da		jsr	errorHandler
.2a8d					LinkEvaluate:
.2a8d	aa		tax				tax
.2a8e	20 53 2a	jsr $2a53			jsr 	Evaluate
.2a91	8a		txa				txa
.2a92	60		rts				rts
.2a93					LinkEvaluateTerm:
.2a93	aa		tax				tax
.2a94	20 32 2a	jsr $2a32			jsr 	EvaluateTerm
.2a97	8a		txa				txa
.2a98	60		rts				rts
.2a99					LinkEvaluateInteger:
.2a99	aa		tax				tax
.2a9a	20 72 2a	jsr $2a72			jsr 	EvaluateInteger
.2a9d	8a		txa				txa
.2a9e	60		rts				rts
.2a9f					LinkEvaluateSmallInt:
.2a9f	aa		tax				tax
.2aa0	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger
.2aa3	8a		txa				txa
.2aa4	60		rts				rts
.2aa5					EvaluateReference:
.2aa5	ad a2 29	lda $29a2			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2aa8	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2aa9	e9 01		sbc #$01			sbc 	#1
.2aab	20 66 28	jsr $2866			jsr 	EvaluateLevel
.2aae	b5 40		lda $40,x			lda 	esType,x
.2ab0	10 01		bpl $2ab3			bpl 	_ERFail
.2ab2	60		rts				rts
.2ab3					_ERFail:
.2ab3	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2ab5	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2ab8					UnaryLen:
.2ab8	20 c6 2a	jsr $2ac6			jsr 	ULStart
.2abb					ULFinish:
.2abb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2abd	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2abf	20 12 30	jsr $3012			jsr 	MInt32Set8Bit 				; write it out.
.2ac2	20 76 30	jsr $3076			jsr 	CheckRightParen
.2ac5	60		rts				rts
.2ac6	20 67 2a	jsr $2a67	ULStart:jsr 	EvaluateString
.2ac9	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2acb	85 2a		sta $2a				sta 	temp0
.2acd	b5 50		lda $50,x			lda 	esInt1,x
.2acf	85 2b		sta $2b				sta 	temp0+1
.2ad1	84 32		sty $32				sty 	tempShort 					; get length
.2ad3	a0 00		ldy #$00			ldy 	#0
.2ad5	60		rts				rts
.2ad6					UnaryAsc:
.2ad6	20 c6 2a	jsr $2ac6			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2ad9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2adb	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2adc	c9 00		cmp #$00			cmp 	#0
.2ade	d0 db		bne $2abb			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2ae0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ae2	20 da 14	jsr $14da		jsr	errorHandler
.2ae5					UnaryAbs:
.2ae5	20 5c 2a	jsr $2a5c			jsr 	EvaluateNumeric 			; some numeric value
.2ae8	b0 07		bcs $2af1			bcs 	_UAFloat 					; CS then float, so use that function
.2aea	20 b8 2f	jsr $2fb8			jsr 	MInt32Absolute 				; int version
.2aed	20 76 30	jsr $3076			jsr 	CheckRightParen
.2af0	60		rts				rts
.2af1					_UAFloat:
.2af1	8a		txa				txa 								; float version
.2af2	a2 00		ldx #$00		ldx	#0
.2af4	20 00 19	jsr $1900		jsr	floatingpointHandler
.2af7	aa		tax				tax
.2af8	20 76 30	jsr $3076			jsr 	CheckRightParen
.2afb	60		rts				rts
.2afc					UnarySgn:
.2afc	20 5c 2a	jsr $2a5c			jsr 	EvaluateNumeric 			; same as above but sign of value
.2aff	b0 07		bcs $2b08			bcs 	_USFloat
.2b01	20 f0 2f	jsr $2ff0			jsr 	MInt32Sign
.2b04	20 76 30	jsr $3076			jsr 	CheckRightParen
.2b07	60		rts				rts
.2b08					_USFloat:
.2b08	8a		txa				txa
.2b09	a2 0e		ldx #$0e		ldx	#14
.2b0b	20 00 19	jsr $1900		jsr	floatingpointHandler
.2b0e	aa		tax				tax
.2b0f	20 76 30	jsr $3076			jsr 	CheckRightParen
.2b12	60		rts				rts
.2b13					UnaryPeek:
.2b13	20 3f 2b	jsr $2b3f			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2b16	4c 33 2b	jmp $2b33			jmp 	PDLByte0
.2b19					UnaryDeek:
.2b19	20 3f 2b	jsr $2b3f			jsr 	PDLCode
.2b1c	4c 2d 2b	jmp $2b2d			jmp 	PDLByte1
.2b1f					UnaryLeek:
.2b1f	20 3f 2b	jsr $2b3f			jsr 	PDLCode
.2b22	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2b24	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b26	95 60		sta $60,x			sta 	esInt3,x
.2b28	88		dey				dey
.2b29	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b2b	95 58		sta $58,x			sta 	esInt2,x
.2b2d					PDLByte1:
.2b2d	a0 01		ldy #$01			ldy 	#1
.2b2f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b31	95 50		sta $50,x			sta 	esInt1,x
.2b33					PDLByte0:
.2b33	a0 00		ldy #$00			ldy 	#0
.2b35	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b37	95 48		sta $48,x			sta 	esInt0,x
.2b39	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2b3b	20 76 30	jsr $3076			jsr 	CheckRightParen 			; check right and return
.2b3e	60		rts				rts
.2b3f					PDLCode:
.2b3f	20 72 2a	jsr $2a72			jsr 	EvaluateInteger 			; some address
.2b42	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2b44	85 2a		sta $2a				sta 	temp0
.2b46	b5 50		lda $50,x			lda 	esInt1,x
.2b48	85 2b		sta $2b				sta 	temp0+1
.2b4a	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2b4c	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2b4e	95 58		sta $58,x			sta 	esInt2,x
.2b50	95 60		sta $60,x			sta 	esInt3,x
.2b52	84 32		sty $32				sty 	tempShort 					; save Y
.2b54	60		rts				rts
.2b55					Unary_Random:
.2b55	20 33 30	jsr $3033			jsr 	MInt32Random 				; generate random number.
.2b58	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2b5a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b5c	f0 08		beq $2b66			beq 	_URExit
.2b5e	e8		inx				inx 								; load range 0..r-1 into +1
.2b5f	20 72 2a	jsr $2a72			jsr 	EvaluateInteger
.2b62	ca		dex				dex
.2b63	20 56 2e	jsr $2e56			jsr 	MInt32Modulus 				; calculate random % modulus
.2b66					_URExit:
.2b66	20 76 30	jsr $3076			jsr 	CheckRightParen 			; check right and return
.2b69	60		rts				rts
.2b6a					Unary_Min:
.2b6a	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2b6c	d0 02		bne $2b70			bne 	UnaryMBody
.2b6e					Unary_Max:
.2b6e	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2b70					UnaryMBody:
.2b70	48		pha				pha 								; save comparator on stack, shows min or max
.2b71	20 53 2a	jsr $2a53			jsr 	Evaluate 					; get the first thing to check
.2b74					_UnaryMLoop:
.2b74	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2b76	c8		iny				iny
.2b77	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b79	f0 09		beq $2b84			beq 	_UnaryMExit
.2b7b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2b7d	f0 07		beq $2b86			beq 	_UnaryMCompare
.2b7f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2b81	20 da 14	jsr $14da		jsr	errorHandler
.2b84					_UnaryMExit:
.2b84	68		pla				pla 								; done so throw comparator and return.
.2b85	60		rts				rts
.2b86					_UnaryMCompare:
.2b86	e8		inx				inx 								; get the 2nd thing to evaluate
.2b87	20 53 2a	jsr $2a53			jsr 	Evaluate
.2b8a	ca		dex				dex
.2b8b	20 18 27	jsr $2718			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2b8e	85 32		sta $32				sta 	tempShort 					; save result
.2b90	68		pla				pla 								; get what we need
.2b91	48		pha				pha
.2b92	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2b94	d0 de		bne $2b74			bne 	_UnaryMLoop 				; no, try another value.
.2b96	20 03 30	jsr $3003			jsr 	MInt32False 				; promote 2nd to 1st.
.2b99	20 e7 2e	jsr $2ee7			jsr 	MInt32Add
.2b9c	4c 74 2b	jmp $2b74			jmp 	_UnaryMLoop
.2b9f					Unary_Page:
.2b9f	20 03 30	jsr $3003			jsr 	MInt32False 				; zero
.2ba2	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2ba5	95 48		sta $48,x			sta 	esInt0,x
.2ba7	ad c9 0a	lda $0ac9			lda 	basePage+1
.2baa	95 50		sta $50,x			sta 	esInt1,x
.2bac	60		rts				rts
.2bad					UnaryReference:
.2bad	a9 0f		lda #$0f			lda 	#15
.2baf	20 66 28	jsr $2866			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2bb2	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2bb4	10 05		bpl $2bbb			bpl 	UType
.2bb6	a9 00		lda #$00			lda 	#0 							; make it an integer
.2bb8	95 40		sta $40,x			sta 	esType,x
.2bba	60		rts				rts
.2bbb					UType:
.2bbb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2bbd	20 da 14	jsr $14da		jsr	errorHandler
.2bc0					UnaryHexMarker:
.2bc0	4c 44 2a	jmp $2a44			jmp 	EvaluateIntegerTerm
.2bc3					UnaryComplement:
.2bc3	20 44 2a	jsr $2a44			jsr 	EvaluateIntegerTerm
.2bc6	20 d7 2f	jsr $2fd7			jsr 	MInt32Not
.2bc9	60		rts				rts
.2bca					UnaryIntToFloat:
.2bca	20 5c 2a	jsr $2a5c			jsr 	EvaluateNumeric				; some number
.2bcd	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.2bcf	d0 0b		bne $2bdc			bne 	_UIFExit
.2bd1	8a		txa				txa 								; convert and set type
.2bd2	a2 1a		ldx #$1a		ldx	#26
.2bd4	20 00 19	jsr $1900		jsr	floatingpointHandler
.2bd7	aa		tax				tax
.2bd8	a9 01		lda #$01			lda 	#1
.2bda	95 40		sta $40,x			sta 	esType,x
.2bdc					_UIFExit:
.2bdc	60		rts				rts
.2bdd					UnaryFloatToInt:
.2bdd	20 5c 2a	jsr $2a5c			jsr 	EvaluateNumeric 			; the number
.2be0	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2be2	f0 0b		beq $2bef			beq 	_UFIExit
.2be4	8a		txa				txa 								; convert to int
.2be5	a2 12		ldx #$12		ldx	#18
.2be7	20 00 19	jsr $1900		jsr	floatingpointHandler
.2bea	aa		tax				tax
.2beb	a9 00		lda #$00			lda 	#0 							; set type
.2bed	95 40		sta $40,x			sta 	esType,x
.2bef					_UFIExit:
.2bef	60		rts				rts
.2bf0					UnaryAlloc:
.2bf0	e8		inx				inx 								; evaluate memory required
.2bf1	20 72 2a	jsr $2a72			jsr 	EvaluateInteger
.2bf4	20 76 30	jsr $3076			jsr 	CheckRightParen
.2bf7	ca		dex				dex
.2bf8	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2bfa	15 61		ora $61,x			ora 	esInt3+1,x
.2bfc	d0 1d		bne $2c1b			bne 	_UABadValue
.2bfe	20 03 30	jsr $3003			jsr 	MInt32False					; zero return.
.2c01	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2c03	95 50		sta $50,x			sta 	esInt1,x
.2c05	a5 35		lda $35				lda 	lowMemory
.2c07	95 48		sta $48,x			sta 	esInt0,x
.2c09	18		clc				clc 								; add alloc required.
.2c0a	75 49		adc $49,x			adc 	esInt0+1,x
.2c0c	85 35		sta $35				sta 	lowMemory
.2c0e	a5 36		lda $36				lda 	lowMemory+1
.2c10	75 51		adc $51,x			adc 	esInt1+1,x
.2c12	85 36		sta $36				sta 	lowMemory+1
.2c14	b0 05		bcs $2c1b			bcs		_UABadValue 				; overflow definitely bad.
.2c16	c5 34		cmp $34				cmp 	highMemory+1
.2c18	b0 01		bcs $2c1b			bcs 	_UABadValue 				; out of memory bad.
.2c1a	60		rts				rts
.2c1b					_UABadValue:
.2c1b	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.2c1d	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.2c20					UnaryTimer:
.2c20	20 76 30	jsr $3076			jsr 	CheckRightParen 			; no parameters
.2c23	98		tya				tya
.2c24	48		pha				pha
.2c25	20 2a 30	jsr $302a			jsr 	MInt32Zero 					; zero result
.2c28	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2c2a	a2 1c		ldx #$1c		ldx	#28
.2c2c	20 b9 14	jsr $14b9		jsr	deviceHandler
.2c2f	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2c31	95 48		sta $48,x			sta 	esInt0,x
.2c33	98		tya				tya
.2c34	95 50		sta $50,x			sta 	esInt1,x
.2c36	68		pla				pla
.2c37	a8		tay				tay
.2c38	60		rts				rts
.2c39					UnaryInkey:
.2c39	20 76 30	jsr $3076			jsr 	CheckRightParen
.2c3c	86 2a		stx $2a				stx 	temp0
.2c3e	a2 0a		ldx #$0a		ldx	#10
.2c40	20 b9 14	jsr $14b9		jsr	deviceHandler
.2c43	a6 2a		ldx $2a				ldx 	temp0
.2c45	20 12 30	jsr $3012			jsr 	MInt32Set8Bit
.2c48	60		rts				rts
.2c49					UnaryGet:
.2c49	20 76 30	jsr $3076			jsr 	CheckRightParen
.2c4c	86 2a		stx $2a				stx 	temp0
.2c4e					_UGLoop:
.2c4e	a2 00		ldx #$00		ldx	#0
.2c50	20 b9 14	jsr $14b9		jsr	deviceHandler
.2c53	a2 0a		ldx #$0a		ldx	#10
.2c55	20 b9 14	jsr $14b9		jsr	deviceHandler
.2c58	c9 00		cmp #$00			cmp 	#0
.2c5a	f0 f2		beq $2c4e			beq 	_UGLoop
.2c5c	a6 2a		ldx $2a				ldx 	temp0
.2c5e	20 12 30	jsr $3012			jsr 	MInt32Set8Bit
.2c61	60		rts				rts
.2c62					UnaryGetString:
.2c62	20 49 2c	jsr $2c49			jsr 	UnaryGet
.2c65					UGSDoChr:
.2c65	4c b6 2c	jmp $2cb6			jmp 	ChrCode
.2c68					UnaryInkeyString:
.2c68	20 39 2c	jsr $2c39			jsr 	UnaryInkey
.2c6b	b5 48		lda $48,x			lda 	esInt0,x
.2c6d	d0 f6		bne $2c65			bne 	UGSDoChr
.2c6f	8a		txa				txa
.2c70	a2 06		ldx #$06		ldx	#6
.2c72	20 23 34	jsr $3423		jsr	stringHandler
.2c75	aa		tax				tax
.2c76	60		rts				rts
.2c77					UnarySys:
.2c77	20 72 2a	jsr $2a72			jsr 	EvaluateInteger 				; get the address
.2c7a	20 76 30	jsr $3076			jsr 	CheckRightParen
.2c7d	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0 						; copy call address to temp0
.2c80	8a		txa				txa
.2c81	48		pha				pha
.2c82	98		tya				tya
.2c83	48		pha				pha
.2c84	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2c87	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2c8a	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2c8d	20 9c 2c	jsr $2c9c			jsr 	_CallTemp0
.2c90	85 32		sta $32				sta 	tempShort 						; restore YX
.2c92	68		pla				pla
.2c93	a8		tay				tay
.2c94	68		pla				pla
.2c95	aa		tax				tax
.2c96	a5 32		lda $32				lda 	tempShort
.2c98	20 12 30	jsr $3012			jsr 	MInt32Set8Bit 					; return result.
.2c9b	60		rts				rts
.2c9c					_CallTemp0:
.2c9c	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2c9f					UnaryMem:
.2c9f	20 03 30	jsr $3003			jsr 	MInt32False 					; set to false (e.g. 0)
.2ca2	38		sec				sec
.2ca3	a5 33		lda $33				lda 	highMemory 						; calculate value
.2ca5	e5 35		sbc $35				sbc 	lowMemory
.2ca7	95 48		sta $48,x			sta 	esInt0,x
.2ca9	a5 34		lda $34				lda 	highMemory+1
.2cab	e5 36		sbc $36				sbc 	lowMemory+1
.2cad	95 50		sta $50,x			sta 	esInt1,x
.2caf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.2cb0					ExecChr:
.2cb0	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger		; character number 0-255
.2cb3	20 76 30	jsr $3076			jsr 	CheckRightParen				; right bracket
.2cb6					ChrCode:
.2cb6	98		tya				tya
.2cb7	48		pha				pha
.2cb8	8a		txa				txa 								; A = stack
.2cb9	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.2cbb	a2 00		ldx #$00		ldx	#0
.2cbd	20 23 34	jsr $3423		jsr	stringHandler
.2cc0	aa		tax				tax 								; X = stack
.2cc1	68		pla				pla
.2cc2	a8		tay				tay
.2cc3	60		rts				rts
.2cc4					ExecLower:
.2cc4	38		sec				sec 								; set carry is lower
.2cc5	b0 01		bcs $2cc8			bcs 	ExecUpperLower
.2cc7					ExecUpper:
.2cc7	18		clc				clc 								; clear carry is upper
.2cc8					ExecUpperLower:
.2cc8	08		php				php 								; save carry
.2cc9	20 67 2a	jsr $2a67			jsr 	EvaluateString 				; string to stack,X
.2ccc	20 76 30	jsr $3076			jsr 	CheckRightParen 			; check closing right bracket.
.2ccf	28		plp				plp 								; restore carry, save Y
.2cd0	98		tya				tya
.2cd1	48		pha				pha
.2cd2	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2cd4	2a		rol a				rol 	a
.2cd5	a8		tay				tay 								; now in Y
.2cd6	8a		txa				txa 								; do the substring and exit.
.2cd7	a2 0a		ldx #$0a		ldx	#10
.2cd9	20 23 34	jsr $3423		jsr	stringHandler
.2cdc	aa		tax				tax
.2cdd	68		pla				pla
.2cde	a8		tay				tay
.2cdf	60		rts				rts
.2ce0					ExecLeft:
.2ce0	20 67 2a	jsr $2a67			jsr 	EvaluateString 				; string to stack,X
.2ce3	20 83 30	jsr $3083			jsr 	CheckComma
.2ce6	e8		inx				inx
.2ce7	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2ce9	20 12 30	jsr $3012			jsr 	MInt32Set8Bit
.2cec	e8		inx				inx
.2ced	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2cf0					ExecSubstring:
.2cf0	ca		dex				dex 								; fix up X
.2cf1	ca		dex				dex
.2cf2	20 76 30	jsr $3076			jsr 	CheckRightParen 			; check closing right bracket.
.2cf5	8a		txa				txa 								; do the substring and exit.
.2cf6	a2 0c		ldx #$0c		ldx	#12
.2cf8	20 23 34	jsr $3423		jsr	stringHandler
.2cfb	aa		tax				tax
.2cfc	60		rts				rts
.2cfd					ExecMid:
.2cfd	20 67 2a	jsr $2a67			jsr 	EvaluateString 				; string to stack,X
.2d00	20 83 30	jsr $3083			jsr 	CheckComma
.2d03	e8		inx				inx
.2d04	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2d07	c9 00		cmp #$00			cmp 	#0
.2d09	f0 15		beq $2d20			beq 	_EMValue
.2d0b	e8		inx				inx
.2d0c	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2d0e	20 12 30	jsr $3012			jsr 	MInt32Set8Bit
.2d11	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2d13	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2d15	f0 d9		beq $2cf0			beq 	ExecSubString
.2d17	20 83 30	jsr $3083			jsr 	CheckComma
.2d1a	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2d1d	4c f0 2c	jmp $2cf0			jmp 	ExecSubString
.2d20					_EMValue:
.2d20	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2d22	20 da 14	jsr $14da		jsr	errorHandler
.2d25					ExecRight:
.2d25	20 67 2a	jsr $2a67			jsr 	EvaluateString 				; string to stack,X
.2d28	20 83 30	jsr $3083			jsr 	CheckComma
.2d2b	e8		inx				inx
.2d2c	20 7a 2a	jsr $2a7a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2d2f	ca		dex				dex
.2d30	98		tya				tya
.2d31	48		pha				pha
.2d32	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2d34	85 2a		sta $2a				sta 	temp0
.2d36	b5 50		lda $50,x			lda 	esInt1,x
.2d38	85 2b		sta $2b				sta 	temp0+1
.2d3a	a0 00		ldy #$00			ldy 	#0 							; point to length
.2d3c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2d3e	18		clc				clc 								; add 1.
.2d3f	69 01		adc #$01			adc 	#1
.2d41	38		sec				sec
.2d42	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2d44	f0 02		beq $2d48			beq		_ERMake1 					; if zero, make it 1.
.2d46	b0 02		bcs $2d4a			bcs		_EROkay
.2d48					_ERMake1:
.2d48	a9 01		lda #$01			lda 	#1 							; start position.
.2d4a					_EROkay:
.2d4a	e8		inx				inx 								; set start pos.
.2d4b	95 48		sta $48,x			sta 	esInt0,x
.2d4d	e8		inx				inx
.2d4e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2d50	20 12 30	jsr $3012			jsr 	MInt32Set8Bit
.2d53	68		pla				pla
.2d54	a8		tay				tay
.2d55	4c f0 2c	jmp $2cf0			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2d58					MInt32And:
.2d58	b5 48		lda $48,x			lda 	esInt0,x
.2d5a	35 49		and $49,x			and 	esInt0+1,x
.2d5c	95 48		sta $48,x			sta 	esInt0,x
.2d5e	b5 50		lda $50,x			lda 	esInt1,x
.2d60	35 51		and $51,x			and 	esInt1+1,x
.2d62	95 50		sta $50,x			sta 	esInt1,x
.2d64	b5 58		lda $58,x			lda 	esInt2,x
.2d66	35 59		and $59,x			and 	esInt2+1,x
.2d68	95 58		sta $58,x			sta 	esInt2,x
.2d6a	b5 60		lda $60,x			lda 	esInt3,x
.2d6c	35 61		and $61,x			and 	esInt3+1,x
.2d6e	95 60		sta $60,x			sta 	esInt3,x
.2d70	60		rts				rts
.2d71					MInt32Or:
.2d71	b5 48		lda $48,x			lda 	esInt0,x
.2d73	15 49		ora $49,x			ora 	esInt0+1,x
.2d75	95 48		sta $48,x			sta 	esInt0,x
.2d77	b5 50		lda $50,x			lda 	esInt1,x
.2d79	15 51		ora $51,x			ora 	esInt1+1,x
.2d7b	95 50		sta $50,x			sta 	esInt1,x
.2d7d	b5 58		lda $58,x			lda 	esInt2,x
.2d7f	15 59		ora $59,x			ora 	esInt2+1,x
.2d81	95 58		sta $58,x			sta 	esInt2,x
.2d83	b5 60		lda $60,x			lda 	esInt3,x
.2d85	15 61		ora $61,x			ora 	esInt3+1,x
.2d87	95 60		sta $60,x			sta 	esInt3,x
.2d89	60		rts				rts
.2d8a					MInt32Xor:
.2d8a	b5 48		lda $48,x			lda 	esInt0,x
.2d8c	55 49		eor $49,x			eor 	esInt0+1,x
.2d8e	95 48		sta $48,x			sta 	esInt0,x
.2d90	b5 50		lda $50,x			lda 	esInt1,x
.2d92	55 51		eor $51,x			eor 	esInt1+1,x
.2d94	95 50		sta $50,x			sta 	esInt1,x
.2d96	b5 58		lda $58,x			lda 	esInt2,x
.2d98	55 59		eor $59,x			eor 	esInt2+1,x
.2d9a	95 58		sta $58,x			sta 	esInt2,x
.2d9c	b5 60		lda $60,x			lda 	esInt3,x
.2d9e	55 61		eor $61,x			eor 	esInt3+1,x
.2da0	95 60		sta $60,x			sta 	esInt3,x
.2da2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2da3					MInt32Compare:
.2da3	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2da5	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2da7	d0 13		bne $2dbc			bne 	MInt32Compare2
.2da9	b5 50		lda $50,x			lda 	esInt1,x
.2dab	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2dad	d0 0d		bne $2dbc			bne 	MInt32Compare2
.2daf	b5 58		lda $58,x			lda 	esInt2,x
.2db1	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2db3	d0 07		bne $2dbc			bne 	MInt32Compare2
.2db5	b5 60		lda $60,x			lda 	esInt3,x
.2db7	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2db9	d0 01		bne $2dbc			bne 	MInt32Compare2
.2dbb	60		rts				rts
.2dbc					MInt32Compare2:
.2dbc	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2dbe	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2dc0	b5 50		lda $50,x			lda		esInt1,x
.2dc2	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2dc4	b5 58		lda $58,x			lda		esInt2,x
.2dc6	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2dc8	b5 60		lda $60,x			lda		esInt3,x
.2dca	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2dcc	50 02		bvc $2dd0			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2dce	49 80		eor #$80			eor 	#$80
.2dd0					_I32LNoOverflow
.2dd0	30 03		bmi $2dd5			bmi 	MInt32CLess					; if -ve then return $FF
.2dd2	a9 01		lda #$01			lda 	#$01						; else return $01
.2dd4	60		rts				rts
.2dd5					MInt32CLess:
.2dd5	a9 ff		lda #$ff			lda 	#$FF
.2dd7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2dd8					MInt32SDivide:
.2dd8	98		tya				tya  								; save Y, which is the count of negations
.2dd9	48		pha				pha
.2dda	a0 00		ldy #$00			ldy 	#0 							; zero count
.2ddc	20 f4 2d	jsr $2df4			jsr 	_MInt32SRemSign 			; unsign TOS
.2ddf	e8		inx				inx 								; unsign TOS+1
.2de0	20 f4 2d	jsr $2df4			jsr 	_MInt32SRemSign
.2de3	ca		dex				dex
.2de4	98		tya				tya 								; save sign count on stack
.2de5	48		pha				pha
.2de6	20 fd 2d	jsr $2dfd			jsr 	MInt32UDivide 				; unsigned division
.2de9	68		pla				pla 								; get sign count back
.2dea	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2dec	f0 03		beq $2df1			beq 	_I32SNoNeg
.2dee	20 bd 2f	jsr $2fbd			jsr 	MInt32Negate
.2df1					_I32SNoNeg:
.2df1	68		pla				pla 								; restoe Y and exit
.2df2	a8		tay				tay
.2df3	60		rts				rts
.2df4					_MInt32SRemSign:
.2df4	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2df6	10 04		bpl $2dfc			bpl 	_MInt32SRSExit
.2df8	c8		iny				iny 								; increment the sign count
.2df9	20 bd 2f	jsr $2fbd			jsr 	MInt32Negate 				; negate the value.
.2dfc					_MInt32SRSExit:
.2dfc	60		rts				rts
.2dfd					MInt32UDivide:
.2dfd	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2dff	15 51		ora $51,x			ora 	esInt1+1,x
.2e01	15 52		ora $52,x			ora 	esInt1+2,x
.2e03	15 53		ora $53,x			ora 	esInt1+3,x
.2e05	f0 4a		beq $2e51			beq 	_MInt32DZero
.2e07	e8		inx				inx 								; clear A
.2e08	e8		inx				inx
.2e09	20 03 30	jsr $3003			jsr 	MInt32False
.2e0c	ca		dex				dex
.2e0d	ca		dex				dex
.2e0e	98		tya				tya 								; save Y on the stack
.2e0f	48		pha				pha
.2e10	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2e12					_MInt32UDLoop:
.2e12	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2e14	36 50		rol $50,x			rol 	esInt1,x
.2e16	36 58		rol $58,x			rol 	esInt2,x
.2e18	36 60		rol $60,x			rol 	esInt3,x
.2e1a	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2e1c	36 52		rol $52,x			rol 	esInt1+2,x
.2e1e	36 5a		rol $5a,x			rol 	esInt2+2,x
.2e20	36 62		rol $62,x			rol 	esInt3+2,x
.2e22	38		sec				sec 								; calculate A-M saving result on the stack
.2e23	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2e25	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2e27	48		pha				pha
.2e28	b5 52		lda $52,x			lda 	esInt1+2,x
.2e2a	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2e2c	48		pha				pha
.2e2d	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2e2f	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2e31	48		pha				pha
.2e32	b5 62		lda $62,x			lda 	esInt3+2,x
.2e34	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2e36	90 10		bcc $2e48			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2e38	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2e3a	68		pla				pla
.2e3b	95 5a		sta $5a,x			sta 	esInt2+2,x
.2e3d	68		pla				pla
.2e3e	95 52		sta $52,x			sta 	esInt1+2,x
.2e40	68		pla				pla
.2e41	95 4a		sta $4a,x			sta 	esInt0+2,x
.2e43	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2e45	4c 4b 2e	jmp $2e4b			jmp 	_MInt32Next 					; do the next iteration
.2e48					_MInt32NoSubtract:
.2e48	68		pla				pla
.2e49	68		pla				pla
.2e4a	68		pla				pla
.2e4b					_MInt32Next:
.2e4b	88		dey				dey 								; do this 32 times.
.2e4c	d0 c4		bne $2e12			bne 	_MInt32UDLoop
.2e4e	68		pla				pla 								; restore Y and exit
.2e4f	a8		tay				tay
.2e50	60		rts				rts
.2e51					_MInt32DZero:
.2e51	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2e53	20 da 14	jsr $14da		jsr	errorHandler
.2e56					MInt32Modulus:
.2e56	20 fd 2d	jsr $2dfd			jsr 	MInt32UDivide 				; do the division.
.2e59	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2e5b	95 60		sta $60,x			sta 	esInt3,x
.2e5d	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2e5f	95 58		sta $58,x			sta 	esInt2,x
.2e61	b5 52		lda $52,x			lda 	esInt1+2,x
.2e63	95 50		sta $50,x			sta 	esInt1,x
.2e65	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2e67	95 48		sta $48,x			sta 	esInt0,x
.2e69	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c14					fs32Length:
>0c14							.fill 	1
.2e6a					LinkInt32FromString:
.2e6a	aa		tax				tax
.2e6b	98		tya				tya
.2e6c	20 71 2e	jsr $2e71			jsr 	MInt32FromString
.2e6f	8a		txa				txa
.2e70	60		rts				rts
.2e71					MInt32FromString:
.2e71	85 32		sta $32				sta 	tempShort 					; save base
.2e73	98		tya				tya
.2e74	48		pha				pha
.2e75	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2e77	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e79	8d 14 0c	sta $0c14			sta 	fs32Length
.2e7c	f0 65		beq $2ee3			beq 	_I32FSFail2					; fail if length zero.
.2e7e	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2e80	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2e82	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2e84	d0 09		bne $2e8f			bne 	_I32FSNotNegative
.2e86	ad 14 0c	lda $0c14			lda 	fs32Length 					; get length back.
.2e89	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2e8b	f0 56		beq $2ee3			beq 	_I32FSFail2
.2e8d	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2e8f					_I32FSNotNegative:
.2e8f	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2e91	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2e93	d0 02		bne $2e97			bne 	_I32FSNN2
.2e95	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2e97					_I32FSNN2:
.2e97	48		pha				pha 								; save base + final sign on stack.
.2e98	20 03 30	jsr $3003			jsr 	MInt32False 				; zero the return value.
.2e9b					_I32FSMainLoop:
.2e9b	68		pla				pla 								; get the base back into tempShort
.2e9c	48		pha				pha
.2e9d	29 7f		and #$7f			and 	#$7F
.2e9f	85 32		sta $32				sta 	tempShort
.2ea1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2ea3	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2ea5	90 02		bcc $2ea9			bcc 	_I32FSNotLC
.2ea7	e9 20		sbc #$20			sbc 	#32
.2ea9					_I32FSNotLC:
.2ea9	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2eaa	e9 30		sbc #$30			sbc 	#"0"
.2eac	90 34		bcc $2ee2			bcc 	_I32FSFail 					; nothing more to do.
.2eae	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2eb0	90 06		bcc $2eb8			bcc 	_I32FSValidate
.2eb2	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2eb4	90 2c		bcc $2ee2			bcc 	_I32FSFail
.2eb6	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2eb8					_I32FSValidate:
.2eb8	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2eba	b0 26		bcs $2ee2			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2ebc	48		pha				pha 								; save the new digit value.
.2ebd	e8		inx				inx 								; put base into next slot up on stack
.2ebe	a5 32		lda $32				lda 	tempShort
.2ec0	20 12 30	jsr $3012			jsr 	MInt32Set8Bit
.2ec3	ca		dex				dex
.2ec4	20 1b 2f	jsr $2f1b			jsr 	MInt32Multiply 				; multiply current by the base
.2ec7	e8		inx				inx
.2ec8	68		pla				pla  								; put additive into next slot
.2ec9	20 12 30	jsr $3012			jsr 	MInt32Set8Bit
.2ecc	ca		dex				dex
.2ecd	20 e7 2e	jsr $2ee7			jsr 	MInt32Add 					; and add it
.2ed0	c8		iny				iny 								; bump the character pointer
.2ed1	cc 14 0c	cpy $0c14			cpy 	fs32Length 					; until > length.
.2ed4	f0 c5		beq $2e9b			beq 	_I32FSMainLoop
.2ed6	90 c3		bcc $2e9b			bcc 	_I32FSMainLoop
.2ed8					_I32FSDone:
.2ed8	68		pla				pla 								; get base/final sign back
.2ed9	10 03		bpl $2ede			bpl 	_I32FSNN3
.2edb	20 bd 2f	jsr $2fbd			jsr 	MInt32Negate 				; negate the result.
.2ede					_I32FSNN3:
.2ede	68		pla				pla
.2edf	a8		tay				tay
.2ee0	38		sec				sec
.2ee1	60		rts				rts
.2ee2					_I32FSFail:
.2ee2	68		pla				pla
.2ee3					_I32FSFail2:
.2ee3	68		pla				pla
.2ee4	a8		tay				tay
.2ee5	18		clc				clc
.2ee6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2ee7					MInt32Add:
.2ee7	18		clc				clc
.2ee8	b5 48		lda $48,x			lda 	esInt0,x
.2eea	75 49		adc $49,x			adc 	esInt0+1,x
.2eec	95 48		sta $48,x			sta 	esInt0,x
.2eee	b5 50		lda $50,x			lda 	esInt1,x
.2ef0	75 51		adc $51,x			adc 	esInt1+1,x
.2ef2	95 50		sta $50,x			sta 	esInt1,x
.2ef4	b5 58		lda $58,x			lda 	esInt2,x
.2ef6	75 59		adc $59,x			adc 	esInt2+1,x
.2ef8	95 58		sta $58,x			sta 	esInt2,x
.2efa	b5 60		lda $60,x			lda 	esInt3,x
.2efc	75 61		adc $61,x			adc 	esInt3+1,x
.2efe	95 60		sta $60,x			sta 	esInt3,x
.2f00	60		rts				rts
.2f01					MInt32Sub:
.2f01	38		sec				sec
.2f02	b5 48		lda $48,x			lda 	esInt0,x
.2f04	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2f06	95 48		sta $48,x			sta 	esInt0,x
.2f08	b5 50		lda $50,x			lda 	esInt1,x
.2f0a	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2f0c	95 50		sta $50,x			sta 	esInt1,x
.2f0e	b5 58		lda $58,x			lda 	esInt2,x
.2f10	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2f12	95 58		sta $58,x			sta 	esInt2,x
.2f14	b5 60		lda $60,x			lda 	esInt3,x
.2f16	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2f18	95 60		sta $60,x			sta 	esInt3,x
.2f1a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2f1b					MInt32Multiply:
.2f1b	e8		inx				inx 								; copy 2nd -> 3rd
.2f1c	20 41 2f	jsr $2f41			jsr 	MInt32CopyUp
.2f1f	ca		dex				dex
.2f20	20 41 2f	jsr $2f41			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2f23	20 03 30	jsr $3003			jsr 	MInt32False 				; zero 1st.
.2f26					_I32Loop:
.2f26	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2f28	29 01		and #$01			and 	#1
.2f2a	f0 03		beq $2f2f			beq 	_I32NoAdd 					; if set
.2f2c	20 e7 2e	jsr $2ee7			jsr 	MInt32Add 					; add 2nd to 1st.
.2f2f					_I32NoAdd:
.2f2f	e8		inx				inx 								; shift 2nd left
.2f30	20 18 30	jsr $3018			jsr 	MInt32ShiftLeft
.2f33	e8		inx				inx  								; shift 3rd right
.2f34	20 21 30	jsr $3021			jsr 	MInt32ShiftRight
.2f37	20 2a 30	jsr $302a			jsr 	MInt32Zero 					; check if zero.
.2f3a	08		php				php 								; save status bits
.2f3b	ca		dex				dex 	 							; point back to 1st
.2f3c	ca		dex				dex
.2f3d	28		plp				plp 								; get status bits
.2f3e	d0 e6		bne $2f26			bne 	_I32Loop 					; if non-zero keep going.
.2f40	60		rts				rts
.2f41					MInt32CopyUp:
.2f41	b5 48		lda $48,x			lda 	esInt0,x
.2f43	95 49		sta $49,x			sta 	esInt0+1,x
.2f45	b5 50		lda $50,x			lda 	esInt1,x
.2f47	95 51		sta $51,x			sta 	esInt1+1,x
.2f49	b5 58		lda $58,x			lda 	esInt2,x
.2f4b	95 59		sta $59,x			sta 	esInt2+1,x
.2f4d	b5 60		lda $60,x			lda 	esInt3,x
.2f4f	95 61		sta $61,x			sta 	esInt3+1,x
.2f51	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c15					MCharCount:	.fill 	1						; count of converted characters
.2f52					MLInt32ToString:
.2f52	aa		tax				tax									; module passes stack in A, base in Y
.2f53	98		tya				tya
.2f54	20 59 2f	jsr $2f59			jsr 	MInt32ToString
.2f57	8a		txa				txa
.2f58	60		rts				rts
.2f59					MInt32ToString:
.2f59	48		pha				pha 								; save base
.2f5a	85 32		sta $32				sta 	tempShort 					; save target base.
.2f5c	a9 00		lda #$00			lda 	#0
.2f5e	8d 15 0c	sta $0c15			sta 	MCharCount 					; clear character count to 0
.2f61	98		tya				tya
.2f62	48		pha				pha
.2f63	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2f65	10 10		bpl $2f77			bpl 	_I32TSUnsigned
.2f67	48		pha				pha 								; save base on stack.
.2f68	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2f6a	10 08		bpl $2f74			bpl 	_I32TSNoFlip
.2f6c	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2f6e	20 aa 2f	jsr $2faa			jsr 	MI32WriteCharacter
.2f71	20 bd 2f	jsr $2fbd			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2f74					_I32TSNoFlip:
.2f74	68		pla				pla 								; get the base back
.2f75	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2f77					_I32TSUnsigned:
.2f77	20 85 2f	jsr $2f85			jsr 	MI32DivideWrite 			; recursive code to output string.
.2f7a	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2f7c	ad 15 0c	lda $0c15			lda 	MCharCount
.2f7f	91 2a		sta ($2a),y			sta 	(temp0),y
.2f81	68		pla				pla
.2f82	a8		tay				tay
.2f83	68		pla				pla
.2f84	60		rts				rts
.2f85					MI32DivideWrite:
.2f85	48		pha				pha 								; save the divisor/base
.2f86	e8		inx				inx 								; write in the dividing position.
.2f87	20 12 30	jsr $3012			jsr 	MInt32Set8Bit
.2f8a	ca		dex				dex
.2f8b	20 fd 2d	jsr $2dfd			jsr 	MInt32UDivide 				; divide number by base.
.2f8e	68		pla				pla 								; get the base into Y
.2f8f	a8		tay				tay
.2f90	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2f92	48		pha				pha
.2f93	20 2a 30	jsr $302a			jsr 	MInt32Zero 					; is the result zero ?
.2f96	f0 04		beq $2f9c			beq 	_I32NoRecurse 				; if so, don't recurse.
.2f98	98		tya				tya 								; put base into A
.2f99	20 85 2f	jsr $2f85			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2f9c					_I32NoRecurse:
.2f9c	68		pla				pla 								; get the remainder back
.2f9d	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2f9f	90 02		bcc $2fa3			bcc 	_I32NotHex
.2fa1	69 06		adc #$06			adc 	#7-1
.2fa3					_I32NotHex:
.2fa3	18		clc				clc 								; make it ASCII
.2fa4	69 30		adc #$30			adc 	#48
.2fa6	20 aa 2f	jsr $2faa			jsr 	MI32WriteCharacter 			; write the character out
.2fa9	60		rts				rts 								; and exit.
.2faa					MI32WriteCharacter:
.2faa	ee 15 0c	inc $0c15			inc 	MCharCount 					; bump count (space for leading count)
.2fad	ac 15 0c	ldy $0c15			ldy 	MCharCount 					; get position
.2fb0	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2fb2	c8		iny				iny
.2fb3	a9 00		lda #$00			lda 	#0
.2fb5	91 2a		sta ($2a),y			sta 	(temp0),y
.2fb7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c16					MSeed32:	.fill 	4							; random number seed.
.2fb8					MInt32Absolute:
.2fb8	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2fba	30 01		bmi $2fbd			bmi 	MInt32Negate
.2fbc	60		rts				rts
.2fbd					MInt32Negate:
.2fbd	38		sec				sec 								; subtract from zero.
.2fbe	a9 00		lda #$00			lda 	#0
.2fc0	f5 48		sbc $48,x			sbc 	esInt0,x
.2fc2	95 48		sta $48,x			sta 	esInt0,x
.2fc4	a9 00		lda #$00			lda 	#0
.2fc6	f5 50		sbc $50,x			sbc 	esInt1,x
.2fc8	95 50		sta $50,x			sta 	esInt1,x
.2fca	a9 00		lda #$00			lda 	#0
.2fcc	f5 58		sbc $58,x			sbc 	esInt2,x
.2fce	95 58		sta $58,x			sta 	esInt2,x
.2fd0	a9 00		lda #$00			lda 	#0
.2fd2	f5 60		sbc $60,x			sbc 	esInt3,x
.2fd4	95 60		sta $60,x			sta 	esInt3,x
.2fd6	60		rts				rts
.2fd7					MInt32Not:
.2fd7	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2fd9	49 ff		eor #$ff			eor 	#$FF
.2fdb	95 48		sta $48,x			sta 	esInt0,x
.2fdd	b5 50		lda $50,x			lda 	esInt1,x
.2fdf	49 ff		eor #$ff			eor 	#$FF
.2fe1	95 50		sta $50,x			sta 	esInt1,x
.2fe3	b5 58		lda $58,x			lda 	esInt2,x
.2fe5	49 ff		eor #$ff			eor 	#$FF
.2fe7	95 58		sta $58,x			sta 	esInt2,x
.2fe9	b5 60		lda $60,x			lda 	esInt3,x
.2feb	49 ff		eor #$ff			eor 	#$FF
.2fed	95 60		sta $60,x			sta 	esInt3,x
.2fef	60		rts				rts
.2ff0					MInt32Sign:
.2ff0	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2ff2	30 0b		bmi $2fff			bmi 	MInt32True 					; if set return -1 (true)
.2ff4	20 2a 30	jsr $302a			jsr 	MInt32Zero 					; is it zero ?
.2ff7	f0 0a		beq $3003			beq 	MInt32False 				; if zero return 0 (false)
.2ff9	20 03 30	jsr $3003			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2ffc	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2ffe	60		rts				rts
.2fff					MInt32True:
.2fff	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3001	d0 02		bne $3005			bne 	MInt32WriteAll
.3003					MInt32False:
.3003	a9 00		lda #$00			lda 	#0
.3005					MInt32WriteAll:
.3005	95 48		sta $48,x			sta 	esInt0,x
.3007					MInt32Write123:
.3007	95 50		sta $50,x			sta 	esInt1,x
.3009	95 58		sta $58,x			sta 	esInt2,x
.300b	95 60		sta $60,x			sta 	esInt3,x
.300d	a9 00		lda #$00			lda 	#$00						; and make it an integer
.300f	95 40		sta $40,x			sta 	esType,x
.3011	60		rts				rts
.3012					MInt32Set8Bit:
.3012	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.3014	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3016	f0 ef		beq $3007			beq		MInt32Write123
.3018					MInt32ShiftLeft:
.3018	16 48		asl $48,x			asl 	esInt0,x
.301a	36 50		rol $50,x			rol	 	esInt1,x
.301c	36 58		rol $58,x			rol	 	esInt2,x
.301e	36 60		rol $60,x			rol	 	esInt3,x
.3020	60		rts				rts
.3021					MInt32ShiftRight:
.3021	56 60		lsr $60,x			lsr 	esInt3,x
.3023	76 58		ror $58,x			ror 	esInt2,x
.3025	76 50		ror $50,x			ror 	esInt1,x
.3027	76 48		ror $48,x			ror 	esInt0,x
.3029	60		rts				rts
.302a					MInt32Zero:
.302a	b5 48		lda $48,x			lda 	esInt0,x
.302c	15 50		ora $50,x			ora 	esInt1,x
.302e	15 58		ora $58,x			ora 	esInt2,x
.3030	15 60		ora $60,x			ora 	esInt3,x
.3032	60		rts				rts
.3033					MInt32Random:
.3033	98		tya				tya
.3034	48		pha				pha
.3035	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3037	ad 16 0c	lda $0c16			lda 	MSeed32+0 					; check the seed isn't zero
.303a	d0 03		bne $303f			bne 	_Random1
.303c	a8		tay				tay 								; if so do it 256 times
.303d	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.303f					_Random1:
.303f	0a		asl a				asl 	a
.3040	2e 17 0c	rol $0c17			rol 	MSeed32+1
.3043	2e 18 0c	rol $0c18			rol 	MSeed32+2
.3046	2e 19 0c	rol $0c19			rol 	MSeed32+3
.3049	90 02		bcc $304d			bcc 	_Random2
.304b	49 c5		eor #$c5			eor 	#$C5
.304d					_Random2:
.304d	88		dey				dey
.304e	d0 ef		bne $303f			bne 	_Random1
.3050	8d 16 0c	sta $0c16			sta 	MSeed32+0 					; copy the seed in.
.3053	95 48		sta $48,x			sta 	esInt0,x
.3055	ad 17 0c	lda $0c17			lda 	MSeed32+1
.3058	95 50		sta $50,x			sta 	esInt1,x
.305a	ad 18 0c	lda $0c18			lda 	MSeed32+2
.305d	95 58		sta $58,x			sta 	esInt2,x
.305f	ad 19 0c	lda $0c19			lda 	MSeed32+3
.3062	95 60		sta $60,x			sta 	esInt3,x
.3064	68		pla				pla
.3065	a8		tay				tay
.3066	a9 00		lda #$00			lda 	#0
.3068	95 40		sta $40,x			sta 	esType,x
.306a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.306b					CheckToken:
.306b	d1 28		cmp ($28),y			cmp 	(codePtr),y
.306d	d0 02		bne $3071			bne 	_CTError
.306f	c8		iny				iny
.3070	60		rts				rts
.3071					_CTError:
.3071	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3073	20 da 14	jsr $14da		jsr	errorHandler
.3076					CheckRightParen:
.3076	b1 28		lda ($28),y			lda 	(codePtr),y
.3078	c8		iny				iny
.3079	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.307b	d0 01		bne $307e			bne 	_CRPError
.307d	60		rts				rts
.307e					_CRPError:
.307e	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3080	20 da 14	jsr $14da		jsr	errorHandler
.3083					CheckComma:
.3083	b1 28		lda ($28),y			lda 	(codePtr),y
.3085	c8		iny				iny
.3086	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3088	d0 01		bne $308b			bne 	_CCError
.308a	60		rts				rts
.308b					_CCError:
.308b	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.308d	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.3090					ScanForward:
.3090	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.3092	86 2d		stx $2d				stx 	temp1+1
.3094	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.3096	85 2e		sta $2e				sta 	temp2
.3098	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.309a	c8		iny				iny
.309b	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.309d	d0 08		bne $30a7			bne 	_SFNoCheck 					; if so, check token against entered values.
.309f	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.30a1	f0 24		beq $30c7			beq 	_SFExit 					; at the same strcture depth.
.30a3	c5 2d		cmp $2d				cmp 	temp1+1
.30a5	f0 20		beq $30c7			beq 	_SFExit
.30a7					_SFNoCheck:
.30a7	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.30a9	90 ed		bcc $3098			bcc 	_SFLoop
.30ab	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.30ad	90 19		bcc $30c8			bcc 	_SFSpecials
.30af	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.30b1	90 e5		bcc $3098			bcc 	_SFLoop
.30b3	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.30b5	b0 e1		bcs $3098			bcs 	_SFLoop
.30b7	aa		tax				tax  								; token in X, and look up the adjuster.
.30b8	bd 0b 29	lda $290b,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.30bb	38		sec				sec 								; convert to an offset ($FF,$01)
.30bc	e9 81		sbc #$81			sbc 	#$81
.30be	18		clc				clc 								; add to depth
.30bf	65 2e		adc $2e				adc 	temp2
.30c1	85 2e		sta $2e				sta 	temp2
.30c3	10 d3		bpl $3098			bpl 	_SFLoop 					; +ve okay to continue
.30c5	30 07		bmi $30ce			bmi 	SFError 					; if gone -ve then we have a nesting error
.30c7	60		rts		_SFExit:rts
.30c8					_SFSpecials:
.30c8	20 d3 30	jsr $30d3			jsr 	ScannerSkipSpecial
.30cb	4c 98 30	jmp $3098			jmp 	_SFLoop
.30ce					SFError:
.30ce	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.30d0	20 da 14	jsr $14da		jsr	errorHandler
.30d3					ScannerSkipSpecial:
.30d3	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.30d5	f0 10		beq $30e7			beq 	_SFNextLine
.30d7	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.30d9	f0 2b		beq $3106			beq 	_SFFloatSkip
.30db	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.30dd	f0 02		beq $30e1			beq 	_SFSkipString
.30df	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.30e0	60		rts				rts 								; token.
.30e1					_SFSkipString:
.30e1	98		tya				tya
.30e2	38		sec				sec
.30e3	71 28		adc ($28),y			adc 	(codePtr),y
.30e5	a8		tay				tay
.30e6	60		rts				rts
.30e7					_SFNextLine:
.30e7	a0 00		ldy #$00			ldy 	#0 							; get offset
.30e9	b1 28		lda ($28),y			lda 	(codePtr),y
.30eb	18		clc				clc 								; add to code pointer.
.30ec	65 28		adc $28				adc 	codePtr
.30ee	85 28		sta $28				sta 	codePtr
.30f0	90 02		bcc $30f4			bcc		_SFNLNoCarry
.30f2	e6 29		inc $29				inc 	codePtr+1
.30f4					_SFNLNoCarry:
.30f4	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.30f6	d0 0b		bne $3103			bne		_SFXNL 						; no go round again
.30f8	a5 2c		lda $2c				lda 	temp1
.30fa	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.30fc	d0 d0		bne $30ce			bne 	SFError 					; read uses this to search for data statements
.30fe	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.3100	20 da 14	jsr $14da		jsr	errorHandler
.3103	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.3105	60		rts				rts
.3106					_SFFloatSkip:
.3106	98		tya				tya 								; skip over an embedded float.
.3107	18		clc				clc
.3108	69 05		adc #$05			adc 	#FloatEmbeddedSize
.310a	a8		tay				tay
.310b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.310c					RSReset:
.310c	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.310e	85 37		sta $37				sta 	rsPointer
.3110	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3112	85 38		sta $38				sta 	1+(rsPointer)
.3114	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3116	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3119	60		rts				rts
.311a					RSClaim:
.311a	84 32		sty $32				sty 	tempShort 					; preserve Y
.311c	48		pha				pha 								; save marker on stack.
.311d	8a		txa				txa 								; get bytes required.
.311e	38		sec				sec
.311f	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3121	65 37		adc $37				adc 	rsPointer
.3123	85 37		sta $37				sta 	rsPointer
.3125	a5 38		lda $38				lda 	rsPointer+1
.3127	69 ff		adc #$ff			adc 	#$FF
.3129	85 38		sta $38				sta 	rsPointer+1
.312b	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.312d	90 08		bcc $3137			bcc 	_RSCOverflow
.312f	68		pla				pla 								; get marker back
.3130	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3132	91 37		sta ($37),y			sta 	(rsPointer),y
.3134	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3136	60		rts				rts
.3137					_RSCOverflow:
.3137	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3139	20 da 14	jsr $14da		jsr	errorHandler
.313c					RSFree:
.313c	18		clc				clc
.313d	65 37		adc $37				adc 	rsPointer
.313f	85 37		sta $37				sta 	rsPointer
.3141	90 02		bcc $3145			bcc 	_RSFExit
.3143	e6 38		inc $38				inc 	rsPointer+1
.3145					_RSFExit:
.3145	60		rts				rts
.3146					RSSavePosition:
.3146	84 32		sty $32				sty 	tempShort 					; save Y position
.3148	a8		tay				tay 								; this is where we write it.
.3149	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.314b	91 37		sta ($37),y			sta 	(rsPointer),y
.314d	c8		iny				iny
.314e	a5 29		lda $29				lda 	codePtr+1
.3150	91 37		sta ($37),y			sta 	(rsPointer),y
.3152	c8		iny				iny
.3153	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3155	91 37		sta ($37),y			sta 	(rsPointer),y
.3157	a8		tay				tay 								; fix Y back again to original value
.3158	60		rts				rts
.3159					RSLoadPosition:
.3159	a8		tay				tay
.315a	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.315c	85 28		sta $28				sta 	codePtr
.315e	c8		iny				iny
.315f	b1 37		lda ($37),y			lda 	(rsPointer),y
.3161	85 29		sta $29				sta 	codePtr+1
.3163	c8		iny				iny
.3164	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3166	a8		tay				tay 								; to Y
.3167	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3168					WarmStart:
.3168	a2 02		ldx #$02		ldx	#2
.316a	20 e2 1a	jsr $1ae2		jsr	interactionHandler

;******  Return to file: main/main.asm

.316d					mainHandler:
.316d	7c 70 31	jmp ($3170,x)			jmp 	(mainVectors,x)
.3170					mainVectors:
>3170	76 30					.word CheckRightParen      ; index 0
>3172	f7 1a					.word XCommandClear        ; index 2
>3174	8d 2a					.word LinkEvaluate         ; index 4
>3176	99 2a					.word LinkEvaluateInteger  ; index 6
>3178	9f 2a					.word LinkEvaluateSmallInt ; index 8
>317a	93 2a					.word LinkEvaluateTerm     ; index 10
>317c	52 2f					.word MLInt32ToString      ; index 12
>317e	15 20					.word Command_XNew         ; index 14
>3180	24 22					.word XCommand_Run         ; index 16
>3182	30 22					.word Command_RunFrom      ; index 18
>3184	6a 2e					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.3186					section_end_main:
.3186					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.3186					StringChrs:
.3186	aa		tax				tax 								; set up stack
.3187	a9 02		lda #$02			lda 	#2
.3189	20 49 32	jsr $3249			jsr 	AllocateSoftString
.318c	98		tya				tya
.318d	20 6f 32	jsr $326f			jsr 	WriteSoftString
.3190					StringUpdate:
.3190	20 9e 31	jsr $319e			jsr 	ReturnSoftString
.3193	8a		txa				txa
.3194	60		rts				rts
.3195					StringNull:
.3195	aa		tax				tax
.3196	a9 01		lda #$01			lda 	#1
.3198	20 49 32	jsr $3249			jsr 	AllocateSoftString
.319b	4c 90 31	jmp $3190			jmp 	StringUpdate
.319e					ReturnSoftString:
.319e	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.31a0	95 48		sta $48,x			sta 	esInt0,x
.31a2	a5 3a		lda $3a				lda 	softMemAlloc+1
.31a4	95 50		sta $50,x			sta 	esInt1,x
.31a6	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.31a8	95 58		sta $58,x			sta 	esInt2,x
.31aa	95 60		sta $60,x			sta 	esInt3,x
.31ac	a9 40		lda #$40			lda 	#$40 						; type string.
.31ae	95 40		sta $40,x			sta 	esType,x
.31b0	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.31b1					STRCompare:
.31b1	48		pha				pha 								; save A
.31b2	aa		tax				tax 								; put stack pos in X
.31b3	98		tya				tya
.31b4	48		pha				pha
.31b5	20 e9 31	jsr $31e9			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.31b8	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.31ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.31bc	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.31be	90 02		bcc $31c2			bcc 	_SCNotSmaller
.31c0	b1 2c		lda ($2c),y			lda 	(temp1),y
.31c2					_SCNotSmaller:
.31c2	aa		tax				tax 								; put that in X. We compare this many chars first.
.31c3					_SCCompareLoop:
.31c3	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.31c5	f0 0c		beq $31d3			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.31c7	ca		dex				dex 								; decrement chars to compare.
.31c8	c8		iny				iny 								; move to next character
.31c9	38		sec				sec 								; calculate s1[y]-s2[y]
.31ca	b1 2a		lda ($2a),y			lda 	(temp0),y
.31cc	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.31ce	d0 0a		bne $31da			bne 	_SCReturnResult 			; if different return sign of A
.31d0	4c c3 31	jmp $31c3			jmp 	_SCCompareLoop
.31d3					_SCSameToEndShortest
.31d3	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.31d5	38		sec				sec
.31d6	b1 2a		lda ($2a),y			lda 	(temp0),y
.31d8	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.31da					_SCReturnResult:
.31da	08		php				php 								; set return to zero preserving PSW.
.31db	a2 00		ldx #$00			ldx 	#0
.31dd	28		plp				plp
.31de	f0 05		beq $31e5			beq 	_SCExit 					; two values equal, then exit
.31e0	ca		dex				dex 								; X = $FF
.31e1	90 02		bcc $31e5			bcc 	_SCExit 					; if 1st < 2nd then -1
.31e3	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.31e5					_SCExit:
.31e5	68		pla				pla
.31e6	a8		tay				tay
.31e7	68		pla				pla
.31e8	60		rts				rts
.31e9					CopyStringPair:
.31e9	b5 49		lda $49,x			lda 	esInt0+1,x
.31eb	85 2c		sta $2c				sta 	temp1
.31ed	b5 51		lda $51,x			lda 	esInt1+1,x
.31ef	85 2d		sta $2d				sta 	temp1+1
.31f1					CopyStringTop:
.31f1	b5 48		lda $48,x			lda 	esInt0,x
.31f3	85 2a		sta $2a				sta 	temp0
.31f5	b5 50		lda $50,x			lda 	esInt1,x
.31f7	85 2b		sta $2b				sta 	temp0+1
.31f9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.31fa					StringConcat:
.31fa	aa		tax				tax									; stack pos in X
.31fb	98		tya				tya
.31fc	48		pha				pha
.31fd	20 e9 31	jsr $31e9			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3200	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3201	a0 00		ldy #$00			ldy 	#0
.3203	b1 2a		lda ($2a),y			lda 	(temp0),y
.3205	71 2c		adc ($2c),y			adc 	(temp1),y
.3207	b0 1c		bcs $3225			bcs 	_SCError 					; just too many characters here.
.3209	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.320b	b0 18		bcs $3225			bcs 	_SCError
.320d	20 49 32	jsr $3249			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3210	20 40 32	jsr $3240			jsr 	CopySoftToStack 			; copy that to the stack.
.3213	20 2a 32	jsr $322a			jsr 	SCCopyTemp0 				; copy temp0
.3216	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3218	85 2a		sta $2a				sta 	temp0
.321a	a5 2d		lda $2d				lda 	temp1+1
.321c	85 2b		sta $2b				sta 	temp0+1
.321e	20 2a 32	jsr $322a			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3221	68		pla				pla
.3222	a8		tay				tay
.3223	8a		txa				txa 								; and A
.3224	60		rts				rts
.3225					_SCError:
.3225	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3227	20 da 14	jsr $14da		jsr	errorHandler
.322a					SCCopyTemp0:
.322a	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.322c	b1 2a		lda ($2a),y			lda 	(temp0),y
.322e	85 2e		sta $2e				sta 	temp2
.3230					_SCCopyLoop:
.3230	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3232	f0 0b		beq $323f			beq 	_SCCopyExit
.3234	c6 2e		dec $2e				dec 	temp2
.3236	c8		iny				iny 								; get next char
.3237	b1 2a		lda ($2a),y			lda 	(temp0),y
.3239	20 6f 32	jsr $326f			jsr 	WriteSoftString 			; write to soft string.
.323c	4c 30 32	jmp $3230			jmp 	_SCCopyLoop
.323f					_SCCopyExit:
.323f	60		rts				rts
.3240					CopySoftToStack:
.3240	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3242	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.3244	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3246	95 50		sta $50,x			sta 	esInt1,x
.3248	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3249					AllocateSoftString:
.3249	85 32		sta $32				sta 	tempShort 					; save count
.324b	98		tya				tya
.324c	48		pha				pha
.324d	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.324f	d0 09		bne $325a			bne 	_ASSDone
.3251	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3253	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3255	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3257	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3258	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.325a					_ASSDone:
.325a	38		sec				sec 								; allocate downwards enough memory
.325b	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.325d	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.325f	85 39		sta $39				sta 	softMemAlloc
.3261	a5 3a		lda $3a				lda 	softMemAlloc+1
.3263	e9 00		sbc #$00			sbc 	#0
.3265	85 3a		sta $3a				sta 	softMemAlloc+1
.3267	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3269	a8		tay				tay
.326a	91 39		sta ($39),y			sta 	(softMemAlloc),y
.326c	68		pla				pla
.326d	a8		tay				tay
.326e	60		rts				rts
.326f					WriteSoftString:
.326f	84 32		sty $32				sty 	tempShort 					; save Y
.3271	48		pha				pha 								; save character on stack
.3272	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3274	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3276	18		clc				clc
.3277	69 01		adc #$01			adc 	#1
.3279	91 39		sta ($39),y			sta 	(softMemAlloc),y
.327b	a8		tay				tay 								; offset in Y
.327c	68		pla				pla 								; get char and write.
.327d	91 39		sta ($39),y			sta 	(softMemAlloc),y
.327f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3281	60		rts				rts
.3282					StrClone:
.3282	aa		tax				tax 								; set up stack.
.3283	98		tya				tya
.3284	48		pha				pha
.3285	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3287	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3289	18		clc				clc
.328a	69 01		adc #$01			adc 	#1
.328c	20 49 32	jsr $3249			jsr 	AllocateSoftString 			; allocate soft memory
.328f	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3291	95 48		sta $48,x			sta 	esInt0,x
.3293	a5 3a		lda $3a				lda 	softMemAlloc+1
.3295	95 50		sta $50,x			sta 	esInt1,x
.3297	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3299	95 58		sta $58,x			sta 	esInt2,x
.329b	95 60		sta $60,x			sta 	esInt3,x
.329d	a9 40		lda #$40			lda 	#$40 						; set type to string.
.329f	95 40		sta $40,x			sta 	esType,x
.32a1	20 2a 32	jsr $322a			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.32a4	68		pla				pla
.32a5	a8		tay				tay
.32a6	8a		txa				txa
.32a7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.32a8					CaseString:
.32a8	48		pha				pha 								; save A and copy to X
.32a9	aa		tax				tax
.32aa	98		tya				tya
.32ab	48		pha				pha
.32ac	20 f1 31	jsr $31f1			jsr 	CopyStringTop 				; target string -> temp0
.32af	a0 00		ldy #$00			ldy 	#0
.32b1	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.32b3	18		clc				clc
.32b4	69 01		adc #$01			adc 	#1 							; one more for length byte
.32b6	20 49 32	jsr $3249			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.32b9	20 40 32	jsr $3240			jsr 	CopySoftToStack 			; copy that to the stack.
.32bc	a0 00		ldy #$00			ldy 	#0
.32be	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.32c0	aa		tax				tax
.32c1					_CSCopy:
.32c1	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.32c3	f0 24		beq $32e9			beq 	_CSExit
.32c5	ca		dex				dex
.32c6	c8		iny				iny
.32c7	68		pla				pla 								; check direction
.32c8	48		pha				pha
.32c9	f0 0c		beq $32d7			beq 	_CSUpper
.32cb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.32cd	c9 41		cmp #$41			cmp 	#"A"
.32cf	90 12		bcc $32e3			bcc 	_CSWrite
.32d1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32d3	b0 0e		bcs $32e3			bcs 	_CSWrite
.32d5	90 0a		bcc $32e1			bcc 	_CSFlipWrite
.32d7					_CSUpper:
.32d7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.32d9	c9 61		cmp #$61			cmp 	#"a"
.32db	90 06		bcc $32e3			bcc 	_CSWrite
.32dd	c9 7b		cmp #$7b			cmp 	#"z"+1
.32df	b0 02		bcs $32e3			bcs 	_CSWrite
.32e1					_CSFlipWrite:
.32e1	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.32e3					_CSWrite:
.32e3	20 6f 32	jsr $326f			jsr 	WriteSoftString 			; add to soft string.
.32e6	4c c1 32	jmp $32c1			jmp 	_CSCopy
.32e9					_CSExit:
.32e9	68		pla				pla
.32ea	a8		tay				tay
.32eb	68		pla				pla
.32ec	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.32ed					StringSubstring:
.32ed	48		pha				pha
.32ee	aa		tax				tax 								; access stack.
.32ef	98		tya				tya
.32f0	48		pha				pha
.32f1	20 f1 31	jsr $31f1			jsr 	CopyStringTop 				; point temp0 to the string.
.32f4	a0 00		ldy #$00			ldy 	#0 							; get length.
.32f6	b1 2a		lda ($2a),y			lda 	(temp0),Y
.32f8	85 2c		sta $2c				sta 	temp1
.32fa	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.32fc	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.32fe	f0 02		beq $3302			beq 	_SSBOkay
.3300	b0 2a		bcs $332c			bcs 	_SSBReturnNull
.3302					_SSBOkay:
.3302	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3304	18		clc				clc
.3305	69 01		adc #$01			adc 	#1
.3307	38		sec				sec
.3308	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.330a	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.330c	90 02		bcc $3310			bcc		_SSBTrunc
.330e	b5 4a		lda $4a,x			lda 	esInt0+2,x
.3310					_SSBTrunc:
.3310	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3312	18		clc				clc
.3313	69 01		adc #$01			adc 	#1 							; add 1
.3315	20 49 32	jsr $3249			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3318	20 40 32	jsr $3240			jsr 	CopySoftToStack 			; copy that to the stack.
.331b	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.331d					_SSBCopyLoop:
.331d	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.331f	f0 0e		beq $332f			beq 	_SSBExit
.3321	c6 2d		dec $2d				dec 	temp1+1
.3323	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3325	20 6f 32	jsr $326f			jsr 	WriteSoftString
.3328	c8		iny				iny
.3329	4c 1d 33	jmp $331d			jmp 	_SSBCopyLoop
.332c					_SSBReturnNull:
.332c	20 33 33	jsr $3333			jsr 	ReturnNull
.332f					_SSBExit:
.332f	68		pla				pla
.3330	a8		tay				tay
.3331	68		pla				pla
.3332	60		rts				rts
.3333					ReturnNull:
.3333	a9 00		lda #$00			lda 	#0 							; clear null string
.3335	8d ce 0a	sta $0ace			sta 	NullString
.3338	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.333a	95 48		sta $48,x			sta 	esInt0,x
.333c	a9 0a		lda #$0a			lda 	#NullString >> 8
.333e	95 50		sta $50,x			sta 	esInt1,x
.3340	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c1a					srcStrLen:
>0c1a							.fill 	1
.3341					StringWrite:
.3341	aa		tax				tax
.3342	48		pha				pha
.3343	98		tya				tya
.3344	48		pha				pha
.3345	20 6c 33	jsr $336c			jsr 	CheckOverwriteCurrent
.3348	b0 0d		bcs $3357			bcs		_SWCopyCurrent
.334a	20 aa 33	jsr $33aa			jsr 	RequiresConcretion
.334d	90 0e		bcc $335d			bcc 	_SWWriteReference
.334f	20 0d 34	jsr $340d			jsr 	CheckSpecialConcretion
.3352	b0 09		bcs $335d			bcs 	_SWWriteReference
.3354	20 be 33	jsr $33be			jsr 	AllocateHardMemory
.3357					_SWCopyCurrent:
.3357	20 f1 33	jsr $33f1			jsr 	CopyStringToHardMemory
.335a	4c 68 33	jmp $3368			jmp 	_SWExit
.335d					_SWWriteReference
.335d	a0 00		ldy #$00			ldy 	#0
.335f	a5 2a		lda $2a				lda 	temp0
.3361	91 2c		sta ($2c),y			sta 	(temp1),y
.3363	c8		iny				iny
.3364	a5 2b		lda $2b				lda 	temp0+1
.3366	91 2c		sta ($2c),y			sta 	(temp1),y
.3368					_SWExit:
.3368	68		pla				pla
.3369	a8		tay				tay
.336a	68		pla				pla
.336b	60		rts				rts
.336c					CheckOverwriteCurrent:
.336c	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.336e	b5 51		lda $51,x			lda 	esInt1+1,x
.3370	85 2b		sta $2b				sta 	temp0+1
.3372	b5 49		lda $49,x			lda 	esInt0+1,x
.3374	85 2a		sta $2a				sta 	temp0
.3376	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3378	8d 1a 0c	sta $0c1a			sta 	srcStrLen
.337b	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.337d	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.337f	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.3381	85 2d		sta $2d				sta 	temp1+1
.3383	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3385	b1 2c		lda ($2c),y			lda 	(temp1),y
.3387	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3389	90 1b		bcc $33a6			bcc 	_COCFail 				; in hard memory.
.338b	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.338d	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.338f	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3391	85 2e		sta $2e				sta 	temp2
.3393	c8		iny				iny
.3394	b1 2c		lda ($2c),y			lda 	(temp1),y
.3396	e9 00		sbc #$00			sbc 	#0
.3398	85 2f		sta $2f				sta 	temp2+1
.339a	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.339c	b1 2e		lda ($2e),y			lda 	(temp2),y
.339e	38		sec				sec  							; maximum character capacity.
.339f	e9 02		sbc #$02			sbc 	#2
.33a1	cd 1a 0c	cmp $0c1a			cmp 	srcStrLen 				; if >= the required length
.33a4	b0 02		bcs $33a8			bcs 	_COCCanReuse
.33a6					_COCFail:
.33a6	18		clc				clc
.33a7	60		rts				rts
.33a8					_COCCanReuse:
.33a8	38		sec				sec
.33a9	60		rts				rts
.33aa					RequiresConcretion:
.33aa	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.33ac	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.33ae	b0 0a		bcs $33ba			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.33b0	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.33b2	f0 08		beq $33bc			beq 	_RCFail 				; if not, this cannot be soft memory.
.33b4	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.33b6	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.33b8	90 02		bcc $33bc			bcc 	_RCFail 				; so concreting
.33ba					_RCSucceed:
.33ba	38		sec				sec
.33bb	60		rts				rts
.33bc					_RCFail:
.33bc	18		clc				clc
.33bd	60		rts				rts
.33be					AllocateHardMemory:
.33be	98		tya				tya
.33bf	48		pha				pha
.33c0	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; characters in string
.33c3	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.33c5	b0 04		bcs $33cb			bcs 	_AHMSetMax 				; max out that amount.
.33c7	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.33c9	90 02		bcc $33cd			bcc 	_AHMIsOkay
.33cb					_AHMSetMax:
.33cb	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.33cd					_AHMIsOkay:
.33cd	48		pha				pha	 							; save size to be allocated
.33ce	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.33d0	38		sec				sec  							; and copy result to TOS as target address.
.33d1	65 33		adc $33				adc 	highMemory
.33d3	85 33		sta $33				sta 	highMemory
.33d5	a5 34		lda $34				lda 	highMemory+1
.33d7	69 ff		adc #$ff			adc 	#$FF
.33d9	85 34		sta $34				sta 	highMemory+1
.33db	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.33dd	68		pla				pla 							; get the total size of the storage block
.33de	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.33e0	18		clc				clc
.33e1	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.33e3	69 01		adc #$01			adc 	#1
.33e5	91 2c		sta ($2c),y			sta 	(temp1),y
.33e7	a5 34		lda $34				lda 	highMemory+1
.33e9	69 00		adc #$00			adc 	#0
.33eb	c8		iny				iny
.33ec	91 2c		sta ($2c),y			sta 	(temp1),y
.33ee	68		pla				pla
.33ef	a8		tay				tay
.33f0	60		rts				rts
.33f1					CopyStringToHardMemory:
.33f1	98		tya				tya
.33f2	48		pha				pha
.33f3	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.33f5	b1 2c		lda ($2c),y			lda 	(temp1),y
.33f7	85 2e		sta $2e				sta 	temp2
.33f9	c8		iny				iny
.33fa	b1 2c		lda ($2c),y			lda 	(temp1),y
.33fc	85 2f		sta $2f				sta 	temp2+1
.33fe	ac 1a 0c	ldy $0c1a			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3401					_CSTHMLoop:
.3401	b1 2a		lda ($2a),y			lda 	(temp0),y
.3403	91 2e		sta ($2e),y			sta 	(temp2),y
.3405	88		dey				dey
.3406	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3408	d0 f7		bne $3401			bne 	_CSTHMLoop
.340a	68		pla				pla
.340b	a8		tay				tay
.340c	60		rts				rts
.340d					CheckSpecialConcretion:
.340d	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; check string is null e.g. length = 0
.3410	f0 02		beq $3414			beq 	_CSCNullString
.3412	18		clc				clc
.3413	60		rts				rts
.3414					_CSCNullString:
.3414	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3416	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3419	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.341b	85 2a		sta $2a				sta 	temp0
.341d	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.341f	85 2b		sta $2b				sta 	1+(temp0)
.3421	38		sec				sec
.3422	60		rts				rts

;******  Return to file: string/string.asm

.3423					stringHandler:
.3423	7c 26 34	jmp ($3426,x)			jmp 	(stringVectors,x)
.3426					stringVectors:
>3426	86 31					.word StringChrs           ; index 0
>3428	82 32					.word StrClone             ; index 2
>342a	fa 31					.word StringConcat         ; index 4
>342c	95 31					.word StringNull           ; index 6
>342e	b1 31					.word STRCompare           ; index 8
>3430	a8 32					.word CaseString           ; index 10
>3432	ed 32					.word StringSubstring      ; index 12
>3434	41 33					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.3436					section_end_string:
.3436					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1b					deTokeniseVector:
>0c1b							.fill 	2
.0c1d					lastCharacterClass:
>0c1d							.fill 	1
.0c1e					indent:
>0c1e							.fill 	1
.3436					ListLine:
.3436	48		pha				pha
.3437	a9 64		lda #$64			lda 	#(deTokenPrint) & $FF
.3439	8d 1b 0c	sta $0c1b			sta 	deTokeniseVector
.343c	a9 35		lda #$35			lda 	#(deTokenPrint) >> 8
.343e	8d 1c 0c	sta $0c1c			sta 	1+(deTokeniseVector)
.3441	68		pla				pla
.3442					Detokenise:
.3442	18		clc				clc
.3443	69 06		adc #$06			adc 	#6
.3445	8d 1e 0c	sta $0c1e			sta 	indent
.3448	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.344a	8d 1d 0c	sta $0c1d			sta 	lastCharacterClass
.344d	a2 02		ldx #$02			ldx 	#2
.344f	20 03 30	jsr $3003			jsr 	MInt32False
.3452	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.3454	b1 28		lda ($28),y			lda 	(codePtr),y
.3456	95 48		sta $48,x			sta 	esInt0,x
.3458	c8		iny				iny
.3459	b1 28		lda ($28),y			lda 	(codePtr),y
.345b	95 50		sta $50,x			sta 	esInt1,x
.345d	a9 84		lda #$84			lda 	#LTYLineNumber
.345f	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.3462	a9 0a		lda #$0a			lda 	#10 					; base 10
.3464	20 03 35	jsr $3503			jsr 	DTPrintInteger 			; print as integer.
.3467	a0 00		ldy #$00			ldy 	#0 						; get length
.3469	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.346b	aa		tax				tax
.346c					_DTPadOut:
.346c	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.346e	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.3471	e8		inx				inx
.3472	ec 1e 0c	cpx $0c1e			cpx 	indent
.3475	d0 f5		bne $346c			bne 	_DTPadOut
.3477	a0 03		ldy #$03			ldy 	#3 						; start position.
.3479					_DTListLoop
.3479	b1 28		lda ($28),y			lda 	(codePtr),y
.347b	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.347d	f0 58		beq $34d7			beq 	_DTIsString
.347f	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3481	f0 7c		beq $34ff			beq 	_DTIsFloat
.3483	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3485	f0 16		beq $349d			beq 	_DTHexConstant
.3487	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3489	d0 06		bne $3491			bne 	_DTNotEnd
.348b	a9 ff		lda #$ff			lda 	#255 					; print CR
.348d	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.3490	60		rts				rts
.3491					_DTNotEnd:
.3491	c9 00		cmp #$00			cmp 	#0
.3493	30 36		bmi $34cb			bmi 	_DTIsToken
.3495	c9 40		cmp #$40			cmp 	#$40
.3497	90 38		bcc $34d1			bcc 	_DTIsIdentifier
.3499	a9 0a		lda #$0a			lda 	#10 					; this is the base
.349b	d0 08		bne $34a5			bne 	_DTConstant
.349d					_DTHexConstant:
.349d	a9 26		lda #$26			lda 	#"&"
.349f	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.34a2	c8		iny				iny
.34a3	a9 10		lda #$10			lda 	#16
.34a5					_DTConstant:
.34a5	48		pha				pha
.34a6	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.34a8	20 80 35	jsr $3580			jsr 	DTSwitchMode
.34ab	a9 86		lda #$86			lda 	#LTYConstant
.34ad	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.34b0	a2 02		ldx #$02			ldx 	#2
.34b2	8a		txa				txa
.34b3	a2 0a		ldx #$0a		ldx	#10
.34b5	20 6d 31	jsr $316d		jsr	mainHandler
.34b8	aa		tax				tax
.34b9	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0
.34bc	68		pla				pla
.34bd	85 32		sta $32				sta 	tempShort
.34bf	98		tya				tya
.34c0	48		pha				pha
.34c1	a5 32		lda $32				lda 	tempShort
.34c3	20 03 35	jsr $3503			jsr 	DTPrintInteger
.34c6	68		pla				pla
.34c7	a8		tay				tay
.34c8	4c 79 34	jmp $3479			jmp 	_DTListLoop
.34cb					_DTIsToken:
.34cb	20 d9 35	jsr $35d9			jsr 	DTDecodeToken
.34ce	4c 79 34	jmp $3479			jmp 	_DTListLoop
.34d1					_DTIsIdentifier:
.34d1	20 92 35	jsr $3592			jsr 	DTIdentifier
.34d4	4c 79 34	jmp $3479			jmp 	_DTListLoop
.34d7					_DTIsString:
.34d7	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.34d9	20 80 35	jsr $3580			jsr 	DTSwitchMode
.34dc	a9 81		lda #$81			lda 	#LTYString
.34de	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.34e1	a9 22		lda #$22			lda 	#'"'						; open quote
.34e3	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.34e6	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.34e8	8a		txa				txa
.34e9	a2 0a		ldx #$0a		ldx	#10
.34eb	20 6d 31	jsr $316d		jsr	mainHandler
.34ee	aa		tax				tax
.34ef	20 d6 1d	jsr $1dd6			jsr 	TOSToTemp0
.34f2	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.34f4	20 15 35	jsr $3515			jsr 	DTPrintLengthPrefix
.34f7	a9 22		lda #$22			lda 	#'"'
.34f9	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.34fc	4c 79 34	jmp $3479			jmp 	_DTListLoop
.34ff					_DTIsFloat:
>34ff	db						.byte 	$DB
.3500	4c ff 34	jmp $34ff			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1f					tPrintCount:
>0c1f							.fill 	1
.3503					DTPrintInteger:
.3503	48		pha				pha
.3504	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3506	85 2a		sta $2a				sta 	temp0
.3508	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.350a	85 2b		sta $2b				sta 	1+(temp0)
.350c	68		pla				pla
.350d	a8		tay				tay
.350e	8a		txa				txa
.350f	a2 0c		ldx #$0c		ldx	#12
.3511	20 6d 31	jsr $316d		jsr	mainHandler
.3514	aa		tax				tax
.3515					DTPrintLengthPrefix:
.3515	aa		tax				tax
.3516	98		tya				tya
.3517	48		pha				pha
.3518	a0 00		ldy #$00			ldy 	#0
.351a	b1 2a		lda ($2a),y			lda 	(temp0),y
.351c	8d 1f 0c	sta $0c1f			sta 	tPrintCount
.351f	f0 1b		beq $353c			beq 	_DTPLPExit
.3521					_DTPLPLoop:
.3521	c8		iny				iny
.3522	b1 2a		lda ($2a),y			lda 	(temp0),y
.3524	29 7f		and #$7f			and 	#$7F
.3526	e0 00		cpx #$00			cpx 	#0
.3528	f0 0a		beq $3534			beq 	_DTPLPNoCase
.352a	c9 41		cmp #$41			cmp 	#"A"
.352c	90 06		bcc $3534			bcc 	_DTPLPNoCase
.352e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3530	b0 02		bcs $3534			bcs 	_DTPLPNoCase
.3532	49 20		eor #$20			eor 	#"A"^"a"
.3534					_DTPLPNoCase
.3534	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.3537	ce 1f 0c	dec $0c1f			dec 	tPrintCount
.353a	d0 e5		bne $3521			bne 	_DTPLPLoop
.353c					_DTPLPExit:
.353c	68		pla				pla
.353d	a8		tay				tay
.353e	60		rts				rts
.353f					ListOutputCharacter:
.353f	85 32		sta $32				sta 	tempShort
.3541	48		pha				pha
.3542	8a		txa				txa
.3543	48		pha				pha
.3544	98		tya				tya
.3545	48		pha				pha
.3546	a5 32		lda $32				lda 	tempShort
.3548	c9 20		cmp #$20			cmp 	#32
.354a	b0 0c		bcs $3558			bcs		_LOCHiBit
.354c	09 40		ora #$40			ora 	#64
.354e	c9 40		cmp #$40			cmp 	#64
.3550	f0 06		beq $3558			beq 	_LOCHiBit
.3552	c9 5b		cmp #$5b			cmp 	#65+26
.3554	b0 02		bcs $3558			bcs 	_LOCHiBit
.3556	69 20		adc #$20			adc 	#32
.3558					_LOCHiBit:
.3558	20 61 35	jsr $3561			jsr 	_LOCCallVector
.355b	68		pla				pla
.355c	a8		tay				tay
.355d	68		pla				pla
.355e	aa		tax				tax
.355f	68		pla				pla
.3560					_LOCExit:
.3560	60		rts				rts
.3561					_LOCCallVector:
.3561	6c 1b 0c	jmp ($0c1b)			jmp 	(deTokeniseVector)
.3564					deTokenPrint:
.3564	c9 00		cmp #$00			cmp 	#0
.3566	30 06		bmi $356e			bmi 	_dtpInk
.3568	a2 16		ldx #$16		ldx	#22
.356a	20 b9 14	jsr $14b9		jsr	deviceHandler
.356d	60		rts				rts
.356e	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.3570	f0 08		beq $357a			beq 	_dtpCR
.3572	29 07		and #$07			and 	#7
.3574	a2 08		ldx #$08		ldx	#8
.3576	20 b9 14	jsr $14b9		jsr	deviceHandler
.3579	60		rts				rts
.357a					_dtpCR:
.357a	a2 04		ldx #$04		ldx	#4
.357c	20 b9 14	jsr $14b9		jsr	deviceHandler
.357f	60		rts				rts
.3580					DTSwitchMode:
.3580	cd 1d 0c	cmp $0c1d			cmp 	LastCharacterClass
.3583	f0 04		beq $3589			beq 	_DTSMNoChange
.3585	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.3588					_DTSMExit:
.3588	60		rts				rts
.3589					_DTSMNoChange:
.3589	c9 01		cmp #$01			cmp 	#1
.358b	f0 fb		beq $3588			beq 	_DTSMExit
.358d	a9 20		lda #$20			lda 	#" "
.358f	4c 3f 35	jmp $353f			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3592					DTIdentifier:
.3592	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3594	20 80 35	jsr $3580			jsr 	DTSwitchMode
.3597	a9 87		lda #$87			lda 	#LTYIdentifier
.3599	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.359c					_DTILoop:
.359c	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.359e	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.35a0	d0 02		bne $35a4			bne 	_DTINotUS
.35a2	a9 5f		lda #$5f			lda 	#"_"
.35a4					_DTINotUS:
.35a4	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.35a7	c8		iny				iny
.35a8	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.35aa	c9 3a		cmp #$3a			cmp 	#$3A
.35ac	90 ee		bcc $359c			bcc 	_DTILoop
.35ae	c8		iny				iny
.35af	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.35b1	f0 25		beq $35d8			beq 	_DTIExit 					; no postfix.
.35b3	48		pha				pha
.35b4	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.35b6	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.35b9	a9 82		lda #$82			lda 	#LTYPunctuation
.35bb	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.35be	68		pla				pla
.35bf	c9 3b		cmp #$3b			cmp 	#$3B
.35c1	f0 10		beq $35d3			beq 	_DTIArray
.35c3	4a		lsr a				lsr 	a 							; array flag in C
.35c4	08		php				php
.35c5	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.35c7	f0 02		beq $35cb			beq 	_DTIDollar
.35c9	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.35cb					_DTIDollar:
.35cb	49 24		eor #$24			eor 	#"$"
.35cd	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.35d0	28		plp				plp
.35d1	90 05		bcc $35d8			bcc 	_DTIExit
.35d3					_DTIArray:
.35d3	a9 28		lda #$28			lda 	#"("
.35d5	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.35d8					_DTIExit:
.35d8	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.35d9					DTDecodeToken:
.35d9	a2 00		ldx #$00			ldx 	#0 							; table number to use
.35db	b1 28		lda ($28),y			lda 	(codePtr),y
.35dd	c9 84		cmp #$84			cmp 	#$84
.35df	b0 05		bcs $35e6			bcs 	_DTNotShift
.35e1	29 03		and #$03			and 	#3 							; get the shift 1..3
.35e3	0a		asl a				asl 	a 							; put 2 x in X
.35e4	aa		tax				tax
.35e5	c8		iny				iny
.35e6					_DTNotShift:
.35e6	bd e6 38	lda $38e6,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.35e9	85 2a		sta $2a				sta 	temp0 						; point into temp0
.35eb	bd e7 38	lda $38e7,x			lda 	TokenTableAddress+1,x
.35ee	85 2b		sta $2b				sta 	temp0+1
.35f0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.35f2	c8		iny				iny 								; consume it.
.35f3	aa		tax				tax
.35f4	98		tya				tya
.35f5	48		pha				pha
.35f6					_DTFindText:
.35f6	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.35f8	f0 11		beq $360b			beq 	_DTFoundText
.35fa	ca		dex				dex
.35fb	a0 00		ldy #$00			ldy 	#0
.35fd	38		sec				sec
.35fe	b1 2a		lda ($2a),y			lda 	(temp0),y
.3600	65 2a		adc $2a				adc 	temp0
.3602	85 2a		sta $2a				sta 	temp0
.3604	90 f0		bcc $35f6			bcc 	_DTFindText
.3606	e6 2b		inc $2b				inc 	temp0+1
.3608	4c f6 35	jmp $35f6			jmp 	_DTFindText
.360b					_DTFoundText:
.360b	a0 01		ldy #$01			ldy 	#1 							; get first character
.360d	b1 2a		lda ($2a),y			lda 	(temp0),y
.360f	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3611	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3613	90 11		bcc $3626			bcc 	_DTIsPunctuation
.3615	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3617	b0 0d		bcs $3626			bcs 	_DTIsPunctuation
.3619	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.361b	20 80 35	jsr $3580			jsr 	DTSwitchMode
.361e	a9 83		lda #$83			lda 	#LTYKeyword
.3620	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.3623	4c 30 36	jmp $3630			jmp 	_DTPrint
.3626					_DTIsPunctuation:
.3626	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3628	20 80 35	jsr $3580			jsr 	DTSwitchMode
.362b	a9 82		lda #$82			lda 	#LTYPunctuation
.362d	20 3f 35	jsr $353f			jsr 	ListOutputCharacter
.3630					_DTPrint:
.3630	a9 01		lda #$01			lda 	#1 							; fix case.
.3632	20 15 35	jsr $3515			jsr 	DTPrintLengthPrefix 		; print it out.
.3635	a0 00		ldy #$00			ldy 	#0
.3637	b1 2a		lda ($2a),y			lda 	(temp0),y
.3639	a8		tay				tay
.363a	b1 2a		lda ($2a),y			lda 	(temp0),y
.363c	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.363e	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3640	90 04		bcc $3646			bcc 	_DTIsNowPunctuation
.3642	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3644	90 05		bcc $364b			bcc 	_DTPExit
.3646					_DTIsNowPunctuation:
.3646	a9 01		lda #$01			lda 	#1
.3648	8d 1d 0c	sta $0c1d			sta		LastCharacterClass
.364b					_DTPExit:
.364b	68		pla				pla
.364c	a8		tay				tay
.364d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c20					currentSet:
>0c20							.fill 	1
.364e					TokenSearch:
.364e	8a		txa				txa
.364f	48		pha				pha
.3650	98		tya				tya
.3651	48		pha				pha
.3652	a9 00		lda #$00			lda 	#0
.3654	8d 20 0c	sta $0c20			sta 	currentSet
.3657					_TSLoop:
.3657	ad 20 0c	lda $0c20			lda 	currentSet 					; 2 x currentset in X
.365a	0a		asl a				asl 	a
.365b	aa		tax				tax
.365c	bd e6 38	lda $38e6,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.365f	85 2a		sta $2a				sta 	temp0
.3661	bd e7 38	lda $38e7,x			lda 	TokenTableAddress+1,x
.3664	85 2b		sta $2b				sta 	temp0+1
.3666	20 8d 36	jsr $368d			jsr 	TokenSearchOne 				; search one table
.3669	b0 0d		bcs $3678			bcs 	_TSFound 					; found a token.
.366b	ee 20 0c	inc $0c20			inc 	currentSet 					; next set
.366e	ad 20 0c	lda $0c20			lda 	currentSet
.3671	c9 04		cmp #$04			cmp 	#4
.3673	d0 e2		bne $3657			bne 	_TSLoop 					; back if not done all four.
.3675	18		clc				clc 								; clear carry and exit
.3676	90 10		bcc $3688			bcc 	_TSExit
.3678					_TSFound:
.3678	48		pha				pha 								; save token
.3679	ad 20 0c	lda $0c20			lda 	currentSet					; if set zero no shift
.367c	f0 05		beq $3683			beq 	_TSNoShift
.367e	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3680	20 3c 37	jsr $373c			jsr 	TokenWrite
.3683					_TSNoShift:
.3683	68		pla				pla 								; get token back
.3684	20 3c 37	jsr $373c			jsr 	TokenWrite 					; write it
.3687	38		sec				sec 								; carry set indicating success
.3688					_TSExit:
.3688	68		pla				pla
.3689	a8		tay				tay
.368a	68		pla				pla
.368b	aa		tax				tax
.368c	60		rts				rts
.368d					TokenSearchOne:
.368d	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.368f					_TSOLoop:
.368f	a0 00		ldy #$00			ldy 	#0
.3691	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3693	f0 26		beq $36bb			beq 	_TSOFail 					; if zero, end of table
.3695	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3698	f0 11		beq $36ab			beq 	_TSOCheckText
.369a					_TSONext:
.369a	e8		inx				inx 								; bump token
.369b	a0 00		ldy #$00			ldy 	#0							; get length
.369d	b1 2a		lda ($2a),y			lda 	(temp0),y
.369f	38		sec				sec
.36a0	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.36a2	85 2a		sta $2a				sta 	temp0
.36a4	90 e9		bcc $368f			bcc 	_TSOLoop
.36a6	e6 2b		inc $2b				inc 	temp0+1
.36a8	4c 8f 36	jmp $368f			jmp 	_TSOLoop
.36ab					_TSOCheckText:
.36ab	a8		tay				tay 								; compare length downto 1.
.36ac					_TSOCheckLoop:
.36ac	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.36ae	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.36b1	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.36b3	d0 e5		bne $369a			bne 	_TSONext 					; different goto next.
.36b5	88		dey				dey 								; do all
.36b6	d0 f4		bne $36ac			bne 	_TSOCheckLoop
.36b8	8a		txa				txa 								; return token in A and carry set
.36b9	38		sec				sec
.36ba	60		rts				rts
.36bb					_TSOFail:
.36bb	18		clc				clc
.36bc	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.36bd					TokTest:
.36bd	a2 ff		ldx #$ff				ldx 	#$FF
.36bf	9a		txs					txs
.36c0	a9 dd		lda #$dd			lda 	#(TokenText1) & $FF
.36c2	85 28		sta $28				sta 	codePtr
.36c4	a9 36		lda #$36			lda 	#(TokenText1) >> 8
.36c6	85 29		sta $29				sta 	1+(codePtr)
.36c8	20 dd 36	jsr $36dd				jsr 	Tokenise
.36cb	a2 00		ldx #$00	TokStop:	ldx 	#0
.36cd	bd dd 36	lda $36dd,x	_TokCheck:	lda 	TokenBytes1,x
.36d0	dd 24 0c	cmp $0c24,x				cmp 	tokenBuffer,x
.36d3	d0 fe		bne $36d3	_TokFail:	bne 	_TokFail
.36d5	e8		inx					inx
.36d6	c9 80		cmp #$80				cmp 	#$80
.36d8	d0 f3		bne $36cd				bne 	_TokCheck
.36da	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.36dd					TokenText1:
.36dd					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c21					tokenHeader:
>0c21							.fill 	3
.0c24					tokenBuffer:
>0c24							.fill 	256
.0d24					tokenBufferIndex:
>0d24							.fill 	1
.36dd					Tokenise:
.36dd	20 55 37	jsr $3755			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.36e0					TokeniseASCIIZ:
.36e0	20 66 37	jsr $3766			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.36e3	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.36e5	8d 24 0d	sta $0d24			sta 	tokenBufferIndex
.36e8	a8		tay				tay 								; start pointer
.36e9	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.36eb	8d 24 0c	sta $0c24			sta 	tokenBuffer
.36ee					_TokLoop:
.36ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.36f0	f0 46		beq $3738			beq 	_TokExit 					; if zero, then exit.
.36f2	c8		iny				iny 								; skip over spaces.
.36f3	c9 20		cmp #$20			cmp 	#" "
.36f5	f0 f7		beq $36ee			beq 	_TokLoop
.36f7	88		dey				dey 								; point back to character.
.36f8	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.36fa	f0 18		beq $3714			beq 	_TokHexConst
.36fc	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.36fe	f0 23		beq $3723			beq 	_TokQString
.3700	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3702	b0 26		bcs $372a			bcs 	_TokPunctuation
.3704	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3706	b0 29		bcs $3731			bcs 	_TokIdentifier
.3708	c9 3a		cmp #$3a			cmp 	#"9"+1
.370a	b0 1e		bcs $372a			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.370c	c9 30		cmp #$30			cmp 	#"0"
.370e	90 1a		bcc $372a			bcc 	_TokPunctuation 			; < 0, punctuation.
.3710	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3712	d0 08		bne $371c			bne 	_TokConst
.3714					_TokHexConst:
.3714	c8		iny				iny									; consume token.
.3715	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3717	20 3c 37	jsr $373c			jsr 	TokenWrite
.371a	a9 10		lda #$10			lda 	#16
.371c					_TokConst:
.371c	20 24 38	jsr $3824			jsr 	TokeniseInteger
.371f	b0 cd		bcs $36ee			bcs 	_TokLoop
.3721	90 17		bcc $373a			bcc 	_TokFail
.3723					_TokQString:
.3723	20 ba 38	jsr $38ba			jsr 	TokeniseString
.3726	b0 c6		bcs $36ee			bcs 	_TokLoop
.3728	90 10		bcc $373a			bcc 	_TokFail
.372a					_TokPunctuation:
.372a	20 99 38	jsr $3899			jsr 	TokenisePunctuation
.372d	b0 bf		bcs $36ee			bcs 	_TokLoop
.372f	90 09		bcc $373a			bcc 	_TokFail
.3731					_TokIdentifier:
.3731	20 95 37	jsr $3795			jsr 	TokeniseIdentifier
.3734	b0 b8		bcs $36ee			bcs 	_TokLoop
.3736	90 02		bcc $373a			bcc 	_TokFail
.3738					_TokExit:
.3738	38		sec				sec
.3739	60		rts				rts
.373a					_TokFail:
.373a	18		clc				clc
.373b	60		rts				rts
.373c					TokenWrite:
.373c	85 32		sta $32				sta 	tempShort 					; save XA
.373e	48		pha				pha
.373f	8a		txa				txa
.3740	48		pha				pha
.3741	a5 32		lda $32				lda 	tempShort
.3743	ae 24 0d	ldx $0d24			ldx 	tokenBufferIndex 			; geet index
.3746	9d 24 0c	sta $0c24,x			sta 	tokenBuffer,x 				; write byte to buffer
.3749	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.374b	9d 25 0c	sta $0c25,x			sta 	tokenBuffer+1,x
.374e	ee 24 0d	inc $0d24			inc 	tokenBufferIndex 			; bump index
.3751	68		pla				pla
.3752	aa		tax				tax
.3753	68		pla				pla
.3754	60		rts				rts
.3755					TokeniseMakeASCIIZ:
.3755	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3757	b1 28		lda ($28),y			lda 	(codePtr),y
.3759	a8		tay				tay
.375a	c8		iny				iny 								; +1, the NULL goes here.
.375b	a9 00		lda #$00			lda 	#0
.375d	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.375f	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3761	d0 02		bne $3765			bne 	_TMKAExit
.3763	e6 29		inc $29				inc 	codePtr+1
.3765					_TMKAExit:
.3765	60		rts				rts
.3766					TokeniseFixCase:
.3766	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3768	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.376a					_TFCFlipQ:
.376a	8a		txa				txa
.376b	49 01		eor #$01			eor 	#1
.376d	aa		tax				tax
.376e					_TFCLoop:
.376e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3770	f0 22		beq $3794			beq 	_TFCExit 					; if zero exit.
.3772	c9 20		cmp #$20			cmp 	#32 						; if control
.3774	90 1a		bcc $3790			bcc 	_TFCControl
.3776	c8		iny				iny 								; preconsume
.3777	c9 22		cmp #$22			cmp 	#'"'
.3779	f0 ef		beq $376a			beq 	_TFCFlipQ
.377b	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.377d	90 ef		bcc $376e			bcc 	_TFCLoop
.377f	c9 7b		cmp #$7b			cmp 	#"z"+1
.3781	b0 eb		bcs $376e			bcs 	_TFCLoop
.3783	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3785	d0 e7		bne $376e			bne 	_TFCLoop
.3787	88		dey				dey
.3788	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.378a					_TFCWrite:
.378a	91 28		sta ($28),y			sta 	(codePtr),y
.378c	c8		iny				iny
.378d	4c 6e 37	jmp $376e			jmp 	_TFCLoop
.3790					_TFCControl:
.3790	a9 20		lda #$20			lda 	#" "
.3792	d0 f6		bne $378a			bne 	_TFCWrite
.3794					_TFCExit:
.3794	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3795					TokeniseIdentifier:
.3795	a2 00		ldx #$00			ldx 	#0
.3797					_TICopyID:
.3797	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3799	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.379b	f0 16		beq $37b3			beq 	_TICopyUnderscore
.379d	c9 2e		cmp #$2e			cmp 	#"."
.379f	f0 14		beq $37b5			beq 	_TICopyIn
.37a1	c9 30		cmp #$30			cmp 	#"0"
.37a3	90 1b		bcc $37c0			bcc 	_TIEndCopy
.37a5	c9 3a		cmp #$3a			cmp 	#"9"+1
.37a7	90 0c		bcc $37b5			bcc 	_TICopyIn
.37a9	c9 41		cmp #$41			cmp 	#"A"
.37ab	90 13		bcc $37c0			bcc 	_TIEndCopy
.37ad	c9 5b		cmp #$5b			cmp 	#"Z"+1
.37af	b0 0f		bcs $37c0			bcs		_TIEndCopy
.37b1	90 02		bcc $37b5			bcc 	_TICopyIn
.37b3					_TICopyUnderScore:
.37b3	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.37b5					_TICopyIn:
.37b5	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.37b6	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.37b9	8e cf 0a	stx $0acf			stx 	convertBuffer
.37bc	c8		iny				iny 								; next character
.37bd	4c 97 37	jmp $3797			jmp 	_TICopyID 					; loop round
.37c0					_TIEndCopy:
.37c0	a9 24		lda #$24			lda 	#"$"
.37c2	20 17 38	jsr $3817			jsr 	TIDCheckCopy
.37c5	a9 23		lda #$23			lda 	#"#"
.37c7	20 17 38	jsr $3817			jsr 	TIDCheckCopy
.37ca	a9 28		lda #$28			lda 	#"("
.37cc	20 17 38	jsr $3817			jsr 	TIDCheckCopy
.37cf	20 4e 36	jsr $364e			jsr 	TokenSearch 				; is it a token
.37d2	b0 41		bcs $3815			bcs 	_TIExit 					; if so, then exit.
.37d4	98		tya				tya
.37d5	48		pha				pha
.37d6	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.37d8	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.37db	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.37de	c9 28		cmp #$28			cmp 	#"("
.37e0	d0 02		bne $37e4			bne 	_TINotArray
.37e2	ca		dex				dex 								; yes, remove it and convert to array.
.37e3	c8		iny				iny
.37e4					_TINotArray:
.37e4	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.37e7	c9 24		cmp #$24			cmp 	#"$"
.37e9	d0 03		bne $37ee			bne 	_TINotString
.37eb	ca		dex				dex
.37ec	c8		iny				iny
.37ed	c8		iny				iny
.37ee					_TINotString:
.37ee	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.37f1	c9 23		cmp #$23			cmp 	#"#"
.37f3	d0 05		bne $37fa			bne 	_TINotFloat
.37f5	ca		dex				dex
.37f6	c8		iny				iny
.37f7	c8		iny				iny
.37f8	c8		iny				iny
.37f9	c8		iny				iny
.37fa					_TINotFloat:
.37fa	e8		inx				inx 								; write end marker for identifier.
.37fb	98		tya				tya
.37fc	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.37ff	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3802	a2 01		ldx #$01			ldx 	#1
.3804					_TIOutput:
.3804	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3807	29 3f		and #$3f			and 	#$3F
.3809	48		pha				pha
.380a	20 3c 37	jsr $373c			jsr 	TokenWrite
.380d	e8		inx				inx
.380e	68		pla				pla
.380f	c9 3a		cmp #$3a			cmp 	#$3A
.3811	90 f1		bcc $3804			bcc 	_TIOutput
.3813	68		pla				pla
.3814	a8		tay				tay
.3815					_TIExit:
.3815	38		sec				sec 								; this can't fail.
.3816	60		rts				rts
.3817					TIDCheckCopy:
.3817	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3819	d0 08		bne $3823			bne 	_TIDCCExit
.381b	e8		inx				inx
.381c	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.381f	8e cf 0a	stx $0acf			stx 	convertBuffer
.3822	c8		iny				iny
.3823					_TIDCCExit:
.3823	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3824					TokeniseInteger:
.3824	85 2c		sta $2c				sta 	temp1 						; save base
.3826	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3828	8e cf 0a	stx $0acf			stx 	convertBuffer
.382b					_TIGetChars:
.382b	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.382d	c9 30		cmp #$30			cmp 	#"0"
.382f	90 1f		bcc $3850			bcc 	_TIEndGet
.3831	c9 3a		cmp #$3a			cmp 	#"9"+1
.3833	90 10		bcc $3845			bcc 	_TIHaveChar
.3835	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3837	c9 0a		cmp #$0a			cmp 	#10
.3839	f0 15		beq $3850			beq 	_TIEndGet
.383b	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.383d	c9 41		cmp #$41			cmp 	#"A"
.383f	90 0f		bcc $3850			bcc 	_TIEndGet
.3841	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3843	b0 0b		bcs $3850			bcs 	_TIEndGet
.3845					_TIHaveChar:
.3845	e8		inx				inx 								; write into buffer.
.3846	8e cf 0a	stx $0acf			stx 	convertBuffer
.3849	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.384c	c8		iny				iny 								; next char
.384d	4c 2b 38	jmp $382b			jmp 	_TIGetChars
.3850					_TIEndGet:
.3850	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3852	f0 1c		beq $3870			beq 	_TIFail
.3854	98		tya				tya
.3855	48		pha				pha
.3856	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3858	85 2a		sta $2a				sta 	temp0
.385a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.385c	85 2b		sta $2b				sta 	1+(temp0)
.385e	a9 00		lda #$00			lda 	#0 							; stack 0
.3860	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3862	a2 14		ldx #$14		ldx	#20
.3864	20 6d 31	jsr $316d		jsr	mainHandler
.3867	68		pla				pla
.3868	a8		tay				tay
.3869	90 05		bcc $3870			bcc 	_TIFail 					; didn't convert.
.386b	20 72 38	jsr $3872			jsr 	TIRecursiveOut 				; recursive output ?
.386e	38		sec				sec
.386f	60		rts				rts
.3870					_TIFail:
.3870	18		clc				clc
.3871	60		rts				rts
.3872					TIRecursiveOut:
.3872	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.3874	29 3f		and #$3f			and 	#$3F
.3876	09 40		ora #$40			ora 	#$40
.3878	48		pha				pha
.3879	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.387b	29 c0		and #$c0			and 	#$C0
.387d	05 50		ora $50				ora 	esInt1
.387f	05 58		ora $58				ora 	esInt2
.3881	05 60		ora $60				ora 	esInt3
.3883	f0 10		beq $3895			beq 	_TIRONoRecursion
.3885	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3887					_TIROShift:
.3887	46 60		lsr $60				lsr 	esInt3
.3889	66 58		ror $58				ror 	esInt2
.388b	66 50		ror $50				ror 	esInt1
.388d	66 48		ror $48				ror 	esInt0
.388f	ca		dex				dex
.3890	d0 f5		bne $3887			bne 	_TIROShift
.3892	20 72 38	jsr $3872			jsr 	TIRecursiveOut 				; call recursively
.3895					_TIRONoRecursion:
.3895	68		pla				pla 								; pull the old bit.
.3896	4c 3c 37	jmp $373c			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3899					TokenisePunctuation:
.3899	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.389b	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.389e	c8		iny				iny
.389f	b1 28		lda ($28),y			lda 	(codePtr),y
.38a1	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.38a4	c8		iny				iny 								; Y is +2
.38a5	a9 02		lda #$02			lda 	#2 							; 2 character string.
.38a7	8d cf 0a	sta $0acf			sta 	convertBuffer
.38aa	20 4e 36	jsr $364e			jsr 	TokenSearch 				; search for that token.
.38ad	b0 0a		bcs $38b9			bcs 	_TIFound
.38af	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.38b2	88		dey				dey 								; Y is now +1
.38b3	20 4e 36	jsr $364e			jsr 	TokenSearch 				; search for that token.
.38b6	b0 01		bcs $38b9			bcs 	_TIFound
.38b8	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.38b9					_TIFound:
.38b9	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.38ba					TokeniseString:
.38ba	c8		iny				iny 								; skip opening quote
.38bb	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.38bd	84 2a		sty $2a				sty 	temp0 						; save start.
.38bf					_TSGetLength:
.38bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.38c1	f0 21		beq $38e4			beq 	_TSFail						; end of line, fail
.38c3	c8		iny				iny
.38c4	e8		inx				inx
.38c5	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.38c7	d0 f6		bne $38bf			bne 	_TSGetLength
.38c9	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.38cb	20 3c 37	jsr $373c			jsr 	TokenWrite
.38ce	8a		txa				txa 								; output length
.38cf	20 3c 37	jsr $373c			jsr 	TokenWrite
.38d2	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.38d4	e0 00		cpx #$00			cpx 	#0 							; check ended
.38d6	f0 09		beq $38e1			beq 	_TSExit
.38d8					_TSOutput:
.38d8	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.38da	20 3c 37	jsr $373c			jsr 	TokenWrite
.38dd	c8		iny				iny
.38de	ca		dex				dex
.38df	d0 f7		bne $38d8			bne 	_TSOutput
.38e1					_TSExit:
.38e1	c8		iny				iny 								; skip ending quote
.38e2	38		sec				sec 								; return CS.
.38e3	60		rts				rts
.38e4					_TSFail:
.38e4	18		clc				clc
.38e5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.38e6					TokenTableAddress:
>38e6	ee 38						.word 	Group0Text
>38e8	bb 3a						.word 	Group1Text
>38ea	f6 3b						.word 	Group2Text
>38ec	09 3c						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.38ee					Group0Text:
>38ee	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>38f2	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>38f5	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>38f9	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>38fc	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>38ff	01 be					.byte $01,$be                          ; $8b >
>3901	01 bc					.byte $01,$bc                          ; $8c <
>3903	01 bd					.byte $01,$bd                          ; $8d =
>3905	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3908	01 ab					.byte $01,$ab                          ; $8f +
>390a	01 ad					.byte $01,$ad                          ; $90 -
>390c	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>390f	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3912	01 aa					.byte $01,$aa                          ; $93 *
>3914	01 af					.byte $01,$af                          ; $94 /
>3916	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>391a	01 de					.byte $01,$de                          ; $96 ^
>391c	01 a1					.byte $01,$a1                          ; $97 !
>391e	01 bf					.byte $01,$bf                          ; $98 ?
>3920	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3927	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>392d	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3931	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3934	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>393c	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3942	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3947	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>394c	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3951	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3957	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>395f	01 a8					.byte $01,$a8                          ; $a4 (
>3961	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3966	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>396b	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3970	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3978	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>397d	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3982	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3988	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>398d	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3992	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3997	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>399e	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>39a5	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>39aa	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>39b1	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>39b8	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>39be	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>39c5	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>39cb	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>39d3	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>39d9	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>39de	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>39e4	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>39ea	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>39f0	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>39f5	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>39fa	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3a01	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3a08	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3a10	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3a18	01 c0					.byte $01,$c0                          ; $c3 @
>3a1a	01 fe					.byte $01,$fe                          ; $c4 ~
>3a1c	01 a6					.byte $01,$a6                          ; $c5 &
>3a1e	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3a24	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3a2c	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3a30	01 a9					.byte $01,$a9                          ; $c9 )
>3a32	01 ba					.byte $01,$ba                          ; $ca :
>3a34	01 ac					.byte $01,$ac                          ; $cb ,
>3a36	01 bb					.byte $01,$bb                          ; $cc ;
>3a38	01 a7					.byte $01,$a7                          ; $cd '
>3a3a	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3a3d	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3a42	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3a47	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3a4d	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3a51	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3a55	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3a59	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3a5f	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3a64	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3a68	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3a6e	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>3a73	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3a79	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>3a80	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3a85	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3a8c	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3a91	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3a96	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3a9b	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3a9f	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3aa5	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3aa9	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3ab0	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3ab6	01 ae					.byte $01,$ae                          ; $e6 .
>3ab8	01 a3					.byte $01,$a3                          ; $e7 #
>3aba	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3abb					Group1Text:
>3abb	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3ac1	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3ac6	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3acb	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3ad0	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3ad4	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3ad8	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3add	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3ae5	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3ae9	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3aee	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3af3	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3af7	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>3afd	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>3b01	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>3b05	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>3b09	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>3b0d	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>3b11	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>3b15	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>3b19	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>3b1d	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>3b21	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>3b25	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>3b29	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>3b2d	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>3b31	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>3b35	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>3b39	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>3b3d	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>3b41	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>3b45	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>3b49	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>3b4d	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>3b51	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>3b55	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>3b59	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>3b5d	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3b61	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3b65	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3b69	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>3b6d	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3b71	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3b75	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3b79	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>3b7d	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3b81	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3b85	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3b89	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>3b8d	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3b91	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3b95	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3b99	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>3b9d	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3ba1	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3ba5	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3ba9	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3bad	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3bb1	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3bb5	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3bb9	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3bbd	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3bc1	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3bc5	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3bc9	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3bcd	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3bd1	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3bd5	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3bd9	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3bdd	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3be1	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3be5	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3be9	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3bed	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3bf1	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3bf5	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3bf6					Group2Text:
>3bf6	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3bfc	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3c02	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3c08	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3c09					Group3Text:
>3c09	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3c10	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3c17	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3c18					tokeniserHandler:
.3c18	7c 1b 3c	jmp ($3c1b,x)			jmp 	(tokeniserVectors,x)
.3c1b					tokeniserVectors:
>3c1b	42 34					.word Detokenise           ; index 0
>3c1d	36 34					.word ListLine             ; index 2
>3c1f	bd 36					.word TokTest              ; index 4
>3c21	dd 36					.word Tokenise             ; index 6
>3c23	e0 36					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3c25					section_end_tokeniser:
.3c25					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d25					varHash:
>0d25							.fill	1
.0d26					varType:
>0d26							.fill 	1
.0d27					varEnd:
>0d27							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3c25					AccessVariable:
.3c25	aa		tax				tax 								; stack in X
.3c26	c8		iny				iny									; look at second character
.3c27	b1 28		lda ($28),y			lda 	(codePtr),y
.3c29	88		dey				dey
.3c2a	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3c2c	d0 15		bne $3c43			bne 	_AVLong 					; no, always use the hash tables.
.3c2e	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3c30	38		sec				sec 	 							; make it 0-25
.3c31	e9 01		sbc #$01			sbc 	#1
.3c33	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3c34	0a		asl a				asl 	a
.3c35	95 48		sta $48,x			sta 	esInt0,x
.3c37	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3c39	95 50		sta $50,x			sta 	esInt1,x
.3c3b	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3c3d	95 40		sta $40,x			sta 	esType,x
.3c3f	c8		iny				iny 								; skip over the variable reference in the code.
.3c40	c8		iny				iny  								; (1 letter, 1 type)
.3c41	8a		txa				txa 								; stack in A to return.
.3c42	60		rts				rts
.3c43					_AVLong:
.3c43	8a		txa				txa
.3c44	48		pha				pha
.3c45	20 8c 3c	jsr $3c8c			jsr 	AccessSetup 				; set up the basic information we need for later
.3c48	20 ce 3e	jsr $3ece			jsr 	FindVariable 				; does the variable exist already ?
.3c4b	b0 0e		bcs $3c5b			bcs 	_AVFound 					; yes, then its found
.3c4d	ad 26 0d	lda $0d26			lda 	varType 					; otherwise, is the variable type an array
.3c50	4a		lsr a				lsr 	a
.3c51	90 05		bcc $3c58			bcc 	_AVCanCreate 				; if not, we can autocreate
.3c53	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3c55	20 da 14	jsr $14da		jsr	errorHandler
.3c58					_AVCanCreate:
.3c58	20 41 3d	jsr $3d41			jsr 	CreateVariable 				; variable does not exist, create it.
.3c5b					_AVFound:
.3c5b	68		pla				pla
.3c5c	aa		tax				tax
.3c5d	18		clc				clc 								; copy temp0 (variable record address)
.3c5e	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3c60	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3c62	95 48		sta $48,x			sta 	esInt0,x
.3c64	a5 2b		lda $2b				lda 	temp0+1
.3c66	69 00		adc #$00			adc 	#0
.3c68	95 50		sta $50,x			sta 	esInt1,x
.3c6a	a9 00		lda #$00			lda 	#0
.3c6c	95 58		sta $58,x			sta 	esInt2,x
.3c6e	95 60		sta $60,x			sta 	esInt3,x
.3c70	ac 26 0d	ldy $0d26			ldy 	varType 					; get the type ID from the type.
.3c73	b9 4c 3c	lda $3c4c,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3c76	95 40		sta $40,x			sta 	esType,x
.3c78	ac 27 0d	ldy $0d27			ldy 	varEnd 						; restore Y
.3c7b	ad 26 0d	lda $0d26			lda 	VarType 					; get variable type, put LSB into C
.3c7e	4a		lsr a				lsr 	a
.3c7f	90 03		bcc $3c84			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3c81	20 c9 3c	jsr $3cc9			jsr 	AccessArray 				; array lookup. if LSB was set.
.3c84					_AVNotArray:
.3c84	8a		txa				txa 								; return stack in A and return
.3c85	60		rts				rts
.3c86					_AVTypeTable:
>3c86	80 80						.byte 	$80,$80						; integer
>3c88	c0 c0						.byte 	$C0,$C0 					; string
>3c8a	81 81						.byte 	$81,$81 					; float
.3c8c					AccessSetup:
.3c8c	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3c8e	8d 25 0d	sta $0d25			sta 	varHash
.3c91	98		tya				tya
.3c92	48		pha				pha
.3c93	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3c95	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3c97	b0 0b		bcs $3ca4			bcs 	_ASComplete
.3c99	18		clc				clc 								; add to the hash. Might improve this.
.3c9a	6d 25 0d	adc $0d25			adc 	varHash
.3c9d	8d 25 0d	sta $0d25			sta 	varHash
.3ca0	c8		iny				iny 								; next character
.3ca1	4c 93 3c	jmp $3c93			jmp 	_ASLoop
.3ca4					_ASComplete:
.3ca4	8d 26 0d	sta $0d26			sta 	varType 					; save variable type byte
.3ca7	c8		iny				iny
.3ca8	8c 27 0d	sty $0d27			sty 	varEnd 						; save the ending position.
.3cab	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3cac	e9 3a		sbc #$3a			sbc 	#$3A
.3cae	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3caf	0a		asl a				asl 	a
.3cb0	0a		asl a				asl 	a
.3cb1	0a		asl a				asl 	a 							; 2 bytes/word
.3cb2	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3cb4	ad 25 0d	lda $0d25			lda 	varHash 					; get hash
.3cb7	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3cb9	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3cba	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3cbc	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3cbe	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3cc0	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3cc2	69 00		adc #$00			adc 	#0
.3cc4	85 3c		sta $3c				sta 	hashList+1
.3cc6	68		pla				pla
.3cc7	a8		tay				tay
.3cc8	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3cc9					AccessArray:
.3cc9	e8		inx				inx
.3cca	8a		txa				txa
.3ccb	a2 06		ldx #$06		ldx	#6
.3ccd	20 6d 31	jsr $316d		jsr	mainHandler
.3cd0	48		pha				pha
.3cd1	a2 00		ldx #$00		ldx	#0
.3cd3	20 6d 31	jsr $316d		jsr	mainHandler
.3cd6	68		pla				pla
.3cd7	aa		tax				tax
.3cd8	ca		dex				dex
.3cd9	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.3cdb	15 59		ora $59,x			ora 	esInt2+1,x
.3cdd	d0 33		bne $3d12			bne 	_AABadIndex
.3cdf	98		tya				tya
.3ce0	48		pha				pha
.3ce1	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.3ce3	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3ce5	b5 50		lda $50,x			lda 	esInt1,x
.3ce7	85 2b		sta $2b				sta 	temp0+1
.3ce9	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3ceb	b5 49		lda $49,x			lda 	esInt0+1,x
.3ced	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3cef	c8		iny				iny
.3cf0	b5 51		lda $51,x			lda 	esInt1+1,x
.3cf2	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.3cf4	b0 1c		bcs $3d12			bcs 	_AABadIndex 				; if >= then fail.
.3cf6	e8		inx				inx 								; point to index
.3cf7	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3cf9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cfb	20 17 3d	jsr $3d17			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3cfe	ca		dex				dex
.3cff	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3d01	18		clc				clc
.3d02	b5 49		lda $49,x			lda 	esInt0+1,x
.3d04	71 2a		adc ($2a),y			adc 	(temp0),y
.3d06	95 48		sta $48,x			sta 	esInt0,x
.3d08	b5 51		lda $51,x			lda 	esInt1+1,x
.3d0a	c8		iny				iny
.3d0b	71 2a		adc ($2a),y			adc 	(temp0),y
.3d0d	95 50		sta $50,x			sta 	esInt1,x
.3d0f	68		pla				pla
.3d10	a8		tay				tay
.3d11	60		rts				rts
.3d12					_AABadIndex:
.3d12	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3d14	20 da 14	jsr $14da		jsr	errorHandler
.3d17					MultiplyTOSByA:
.3d17	48		pha				pha
.3d18	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3d1a	85 2c		sta $2c				sta 	temp1
.3d1c	b5 50		lda $50,x			lda 	esInt1,x
.3d1e	85 2d		sta $2d				sta 	temp1+1
.3d20	68		pla				pla
.3d21	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3d23	36 50		rol $50,x			rol 	esInt1,x
.3d25	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3d27	f0 17		beq $3d40			beq 	_MTBAExit
.3d29	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.3d2b	d0 0f		bne $3d3c			bne 	_MTBANotFloat
.3d2d	48		pha				pha
.3d2e	18		clc				clc 								; so this will make it x 3
.3d2f	b5 48		lda $48,x			lda 	esInt0,x
.3d31	65 2c		adc $2c				adc 	temp1
.3d33	95 48		sta $48,x			sta 	esInt0,x
.3d35	b5 50		lda $50,x			lda 	esInt1,x
.3d37	65 2d		adc $2d				adc 	temp1+1
.3d39	95 50		sta $50,x			sta 	esInt1,x
.3d3b	68		pla				pla
.3d3c					_MTBANotFloat:
.3d3c	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3d3e	36 50		rol $50,x			rol 	esInt1,x
.3d40					_MTBAExit:
.3d40	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3d41					CreateVariable:
.3d41	98		tya				tya 								; push Y on the stack twice.
.3d42	48		pha				pha									; position in code of the new variable.
.3d43	48		pha				pha
.3d44	ae 26 0d	ldx $0d26			ldx 	varType 					; get var type 0-5 from the var type
.3d47	bd 6b 3d	lda $3d6b,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3d4a	48		pha				pha 								; save length
.3d4b	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3d4d	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3d4f	a5 36		lda $36				lda 	lowMemory+1
.3d51	85 2b		sta $2b				sta 	temp0+1
.3d53	68		pla				pla 								; get length
.3d54	18		clc				clc 								; add to low memory.
.3d55	65 35		adc $35				adc 	lowMemory
.3d57	85 35		sta $35				sta 	lowMemory
.3d59	90 08		bcc $3d63			bcc 	_CVNoCarry
.3d5b	e6 36		inc $36				inc 	lowMemory+1
.3d5d	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3d5f	c5 34		cmp $34				cmp 	highMemory+1
.3d61	b0 3d		bcs $3da0			bcs 	_CVMemory
.3d63					_CVNoCarry:
.3d63	ad 25 0d	lda $0d25			lda 	varHash 					; store hash at offset 4.
.3d66	a0 04		ldy #$04			ldy 	#4
.3d68	91 2a		sta ($2a),y			sta 	(temp0),y
.3d6a	68		pla				pla 								; offset, work out where the variable name is.
.3d6b	18		clc				clc
.3d6c	65 28		adc $28				adc 	codePtr
.3d6e	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3d70	91 2a		sta ($2a),y			sta 	(temp0),y
.3d72	a5 29		lda $29				lda 	codePtr+1
.3d74	69 00		adc #$00			adc 	#0
.3d76	c8		iny				iny
.3d77	91 2a		sta ($2a),y			sta 	(temp0),y
.3d79	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3d7c	b0 03		bcs $3d81			bcs 	_CVNotImmediate
.3d7e	20 e3 3d	jsr $3de3			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3d81					_CVNotImmediate:
.3d81	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3d83	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3d85	91 2a		sta ($2a),y			sta 	(temp0),y
.3d87	c8		iny				iny
.3d88	b1 3b		lda ($3b),y			lda 	(hashList),y
.3d8a	91 2a		sta ($2a),y			sta 	(temp0),y
.3d8c	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3d8e	91 3b		sta ($3b),y			sta 	(hashList),y
.3d90	88		dey				dey
.3d91	a5 2a		lda $2a				lda 	temp0
.3d93	91 3b		sta ($3b),y			sta 	(hashList),y
.3d95	ad 26 0d	lda $0d26			lda 	varType 					; type in A
.3d98	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3d9a	20 ab 3d	jsr $3dab			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3d9d	68		pla				pla
.3d9e	a8		tay				tay
.3d9f	60		rts				rts
.3da0					_CVMemory:
.3da0	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3da2	20 da 14	jsr $14da		jsr	errorHandler
>3da5	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3da7	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3da9	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3dab					ZeroTemp0Y:
.3dab	4a		lsr a				lsr 	a 							; bit 0 in carry
.3dac	0a		asl a				asl 	a
.3dad	b0 19		bcs $3dc8			bcs 	_ZTExit 					; we don't initialise arrays.
.3daf	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3db1	f0 16		beq $3dc9			beq 	_ZTWriteNullString 			; write "" string
.3db3	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3db5	f0 22		beq $3dd9			beq 	_ZTWriteFloat
.3db7	98		tya				tya
.3db8	48		pha				pha
.3db9	a9 00		lda #$00			lda 	#0
.3dbb	91 2a		sta ($2a),y			sta 	(temp0),y
.3dbd	c8		iny				iny
.3dbe	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc0	c8		iny				iny
.3dc1	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc3	c8		iny				iny
.3dc4	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc6	68		pla				pla
.3dc7	a8		tay				tay
.3dc8					_ZTExit:
.3dc8	60		rts				rts
.3dc9					_ZTWriteNullString:
.3dc9	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3dcb	8d ce 0a	sta $0ace			sta 	NullString
.3dce	a9 ce		lda #$ce			lda 	#NullString & $FF
.3dd0	91 2a		sta ($2a),y			sta 	(temp0),y
.3dd2	a9 0a		lda #$0a			lda 	#NullString >> 8
.3dd4	c8		iny				iny
.3dd5	91 2a		sta ($2a),y			sta 	(temp0),y
.3dd7	88		dey				dey
.3dd8	60		rts				rts
.3dd9					_ZTWriteFloat:
.3dd9	8a		txa				txa
.3dda	48		pha				pha
.3ddb	a2 1e		ldx #$1e		ldx	#30
.3ddd	20 00 19	jsr $1900		jsr	floatingpointHandler
.3de0	68		pla				pla
.3de1	aa		tax				tax
.3de2	60		rts				rts
.3de3					CloneVariableName:
.3de3	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3de5	b1 2a		lda ($2a),y			lda 	(temp0),y
.3de7	85 2e		sta $2e				sta 	temp2
.3de9	c8		iny				iny
.3dea	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dec	85 2f		sta $2f				sta 	temp2+1
.3dee	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3df0	91 2a		sta ($2a),y			sta 	(temp0),y
.3df2	88		dey				dey
.3df3	a5 35		lda $35				lda 	lowMemory
.3df5	91 2a		sta ($2a),y			sta 	(temp0),y
.3df7	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3df9					_CVNCopy:
.3df9	b1 2e		lda ($2e),y			lda		(temp2),y
.3dfb	91 35		sta ($35),y			sta 	(lowMemory),y
.3dfd	c8		iny				iny
.3dfe	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3e00	90 f7		bcc $3df9			bcc 	_CVNCopy
.3e02	98		tya				tya 								; add Y to low memory
.3e03	18		clc				clc
.3e04	65 35		adc $35				adc 	lowMemory
.3e06	85 35		sta $35				sta 	lowMemory
.3e08	90 02		bcc $3e0c			bcc 	_CVNNoCarry
.3e0a	e6 36		inc $36				inc 	lowMemory+1
.3e0c					_CVNNoCarry:
.3e0c	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3e0d					CreateArray:
.3e0d	20 8c 3c	jsr $3c8c			jsr 	AccessSetup 				; set up the basic stuff.
.3e10	ad 26 0d	lda $0d26			lda 	varType 					; is the variable type an array
.3e13	4a		lsr a				lsr 	a
.3e14	90 3f		bcc $3e55			bcc 	_CANotArray 				; no, cause an error.
.3e16	20 ce 3e	jsr $3ece			jsr 	FindVariable 				; does the variable exist already
.3e19	b0 35		bcs $3e50			bcs 	_CAFound 					; cannot redefine it.
.3e1b	20 41 3d	jsr $3d41			jsr 	CreateVariable 				; create the variable entry.
.3e1e	ac 27 0d	ldy $0d27			ldy 	varEnd 						; point Y to the end of the variable entry.
.3e21	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3e23	48		pha				pha
.3e24	a5 2b		lda $2b				lda 	temp0+1
.3e26	48		pha				pha
.3e27	ad 26 0d	lda $0d26			lda 	varType 					; push variable type on the stack.
.3e2a	48		pha				pha
.3e2b	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3e2d	a2 06		ldx #$06		ldx	#6
.3e2f	20 6d 31	jsr $316d		jsr	mainHandler
.3e32	a2 00		ldx #$00		ldx	#0
.3e34	20 6d 31	jsr $316d		jsr	mainHandler
.3e37	68		pla				pla 		 						; restore type and position.
.3e38	8d 26 0d	sta $0d26			sta 	varType
.3e3b	68		pla				pla
.3e3c	85 2b		sta $2b				sta 	temp0+1
.3e3e	68		pla				pla
.3e3f	85 2a		sta $2a				sta 	temp0
.3e41	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3e43	29 e0		and #$e0			and 	#$E0
.3e45	05 58		ora $58				ora 	esInt2
.3e47	05 60		ora $60				ora 	esInt3
.3e49	f0 0f		beq $3e5a			beq 	_CASizeOk
.3e4b					_CASize:
.3e4b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3e4d	20 da 14	jsr $14da		jsr	errorHandler
.3e50					_CAFound:
.3e50	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3e52	20 da 14	jsr $14da		jsr	errorHandler
.3e55					_CANotArray:
.3e55	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3e57	20 da 14	jsr $14da		jsr	errorHandler
.3e5a					_CASizeOk:
.3e5a	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3e5c	d0 02		bne $3e60			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3e5e	e6 49		inc $49				inc 	esInt0+1
.3e60					_CANoCarry:
.3e60	98		tya				tya
.3e61	48		pha				pha
.3e62	a0 05		ldy #$05			ldy 	#5
.3e64	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.3e66	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3e68	c8		iny				iny
.3e69	a5 36		lda $36				lda 	lowMemory+1
.3e6b	91 2a		sta ($2a),y			sta 	(temp0),y
.3e6d	c8		iny				iny
.3e6e	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3e70	91 2a		sta ($2a),y			sta 	(temp0),y
.3e72	c8		iny				iny
.3e73	a5 50		lda $50				lda 	esInt1
.3e75	91 2a		sta ($2a),y			sta 	(temp0),y
.3e77	c8		iny				iny
.3e78	ae 26 0d	ldx $0d26			ldx 	varType 					; get the length per element
.3e7b	bd 87 3e	lda $3e87,x			lda 	_CAActualSize-$3A-1,x
.3e7e	91 2a		sta ($2a),y			sta 	(temp0),y
.3e80	aa		tax				tax 								; save size in X
.3e81	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3e83	85 2a		sta $2a				sta 	temp0
.3e85	a5 36		lda $36				lda 	lowMemory+1
.3e87	85 2b		sta $2b				sta 	temp0+1
.3e89	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3e8b	85 2c		sta $2c				sta 	temp1
.3e8d	85 2d		sta $2d				sta 	temp1+1
.3e8f					_CAInitialiseArray:
.3e8f	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3e91	ad 26 0d	lda $0d26			lda 	varType 					; base type of array in A.
.3e94	29 fe		and #$fe			and 	#$FE
.3e96	20 ab 3d	jsr $3dab			jsr 	ZeroTemp0Y
.3e99	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3e9a	18		clc				clc
.3e9b	65 2a		adc $2a				adc 	temp0
.3e9d	85 2a		sta $2a				sta 	temp0
.3e9f	85 35		sta $35				sta 	lowMemory
.3ea1	a5 2b		lda $2b				lda 	temp0+1
.3ea3	69 00		adc #$00			adc 	#0
.3ea5	85 2b		sta $2b				sta 	temp0+1
.3ea7	85 36		sta $36				sta 	lowMemory+1
.3ea9	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.3eab	b0 1c		bcs $3ec9			bcs 	_CAMemory
.3ead	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3eaf	d0 02		bne $3eb3			bne 	_CAIANoCarry
.3eb1	e6 2d		inc $2d				inc 	temp1+1
.3eb3					_CAIANoCarry:
.3eb3	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3eb5	c5 2c		cmp $2c				cmp 	temp1
.3eb7	d0 d6		bne $3e8f			bne 	_CAInitialiseArray
.3eb9	a5 50		lda $50				lda 	esInt1
.3ebb	c5 2d		cmp $2d				cmp 	temp1+1
.3ebd	d0 d0		bne $3e8f			bne 	_CAInitialiseArray
.3ebf	68		pla				pla
.3ec0	a8		tay				tay
.3ec1	60		rts				rts
.3ec2					_CAActualSize:
>3ec2	04 00						.byte 	VarISize,0
>3ec4	02 00						.byte 	VarSSize,0
>3ec6	06 00						.byte 	VarFSize,0
>3ec8	db						.byte 	$DB
.3ec9					_CAMemory:
.3ec9	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3ecb	20 da 14	jsr $14da		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3ece					FindVariable:
.3ece	98		tya				tya
.3ecf	48		pha				pha
.3ed0	98		tya				tya 								; point temp2 to the actual name
.3ed1	18		clc				clc 								; in memory of the variable being created
.3ed2	65 28		adc $28				adc 	codePtr
.3ed4	85 2e		sta $2e				sta 	temp2
.3ed6	a5 29		lda $29				lda 	codePtr+1
.3ed8	69 00		adc #$00			adc 	#0
.3eda	85 2f		sta $2f				sta 	temp2+1
.3edc	a0 00		ldy #$00			ldy 	#0
.3ede	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.3ee0	85 2a		sta $2a				sta 	temp0
.3ee2	a5 3c		lda $3c				lda 	hashList+1
.3ee4	85 2b		sta $2b				sta 	temp0+1
.3ee6	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3ee8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3eea	f0 2c		beq $3f18			beq 	_FVFail
.3eec	aa		tax				tax
.3eed	88		dey				dey		 							; get LSB
.3eee	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ef0	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3ef2	86 2b		stx $2b				stx 	temp0+1
.3ef4	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3ef6	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ef8	cd 25 0d	cmp $0d25			cmp 	varHash
.3efb	d0 e9		bne $3ee6			bne 	_FVNext 					; if not, no point in checking the name.
.3efd	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3efe	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f00	85 2d		sta $2d				sta 	temp1+1
.3f02	88		dey				dey
.3f03	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f05	85 2c		sta $2c				sta 	temp1
.3f07	a0 00		ldy #$00			ldy 	#0
.3f09					_FVCheck:
.3f09	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3f0b	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3f0d	d0 d7		bne $3ee6			bne 	_FVNext		 				; fail if different.
.3f0f	c8		iny				iny
.3f10	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3f12	90 f5		bcc $3f09			bcc 	_FVCheck
.3f14	68		pla				pla
.3f15	a8		tay				tay
.3f16	38		sec				sec
.3f17	60		rts				rts
.3f18					_FVFail:
.3f18	68		pla				pla
.3f19	a8		tay				tay
.3f1a	18		clc				clc
.3f1b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3f1c					HashTableReset:
.3f1c	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3f1e	a9 00		lda #$00			lda 	#0
.3f20					_HTRClear:
.3f20	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3f23	ca		dex				dex
.3f24	d0 fa		bne $3f20			bne 	_HTRClear
.3f26	60		rts				rts

;******  Return to file: variable/variable.asm

.3f27					variableHandler:
.3f27	7c 2a 3f	jmp ($3f2a,x)			jmp 	(variableVectors,x)
.3f2a					variableVectors:
>3f2a	25 3c					.word AccessVariable       ; index 0
>3f2c	0d 3e					.word CreateArray          ; index 2
>3f2e	1c 3f					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3f30					section_end_variable:
.3f30					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d28					endStorage:
>3f30							.align 	256
.4000					programMemory:
>3fff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4000					section_end_footer:

;******  End of listing
