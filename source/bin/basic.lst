
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Apr  5 21:51:16 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=0					cputype = 0
=1					autorun=1
=0					coldstartnew=0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	f8 45						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4e		lda #$4e			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 c9 27	jsr $27c9		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 c9 27	jsr $27c9		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 69 3e	jsr $3e69		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 26 41	jsr $4126		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 af 49	jsr $49af		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 80 4d	jsr $4d80		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 af 49	jsr $49af		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 69 3e	jsr $3e69		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 69 3e	jsr $3e69		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 69 3e	jsr $3e69		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 69 3e	jsr $3e69		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 80 4d	jsr $4d80		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 69 3e	jsr $3e69		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 c9 27	jsr $27c9		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 94 18	jmp ($1894,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c 9d 22	jmp $229d			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	76 24					.word	Command_VPoke            ; $86 vpoke
>1888	79 24					.word	Command_VDoke            ; $87 vdoke
>188a	4e 24					.word	Command_VLoad            ; $88 vload
>188c	af 22					.word	CommandMode              ; $89 mode
>188e	6c 23					.word	CommandPalette           ; $8a palette
>1890	d6 1f					.word	CommandSprite            ; $8b sprite
>1892	ec 1d					.word	CommandClg               ; $8c clg
>1894	e0 1a					.word	Command_Rect             ; $8d rect
>1896	e8 1a					.word	Command_Frame            ; $8e frame
>1898	a3 23					.word	Command_Draw             ; $8f draw
>189a	cd 1a					.word	Command_Plot             ; $90 plot
>189c	a7 19					.word	Command_Line             ; $91 line
>189e	21 21					.word	Command_Paint            ; $92 paint

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a0					Group3Vectors:
>18a0	c2 24					.word	Command_VPeek            ; $86 vpeek(
>18a2	c5 24					.word	Command_VDeek            ; $87 vdeek(
>18a4	6d 22					.word	Sprite_GetX              ; $88 sprite.x(
>18a6	70 22					.word	Sprite_GetY              ; $89 sprite.y(
>18a8	19 1f					.word	FunctionCollide          ; $8a hit(
>18aa	91 1e					.word	Unary_JoyX               ; $8b joy.x(
>18ac	94 1e					.word	Unary_JoyY               ; $8c joy.y(
>18ae	cf 1e					.word	Unary_JButton            ; $8d joy.b(
>18b0	64 1e					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b2					XEvaluateInteger:
.18b2	8a		txa				txa
.18b3	a2 0a		ldx #$0a		ldx	#10
.18b5	20 69 3e	jsr $3e69		jsr	mainHandler
.18b8	aa		tax				tax
.18b9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gModifiers:
.0bfc					gdInk:
>0bfc							.fill 	1
.0bfd					gdPaper:
>0bfd							.fill 	1
.0bfe					gdSize:
>0bfe							.fill 	1
.0bff					gdImage:
>0bff							.fill 	1
.0c00					gdFlip:
>0c00							.fill 	1
.0c01					gdXLimit:
>0c01							.fill 	2
.0c03					gdYLimit:
>0c03							.fill 	2
.0c05					gdText:
>0c05							.fill 	2
.0c07					gEndStorage:
.18ba					GResetStorage:
.18ba	8a		txa				txa
.18bb	48		pha				pha
.18bc	a2 20		ldx #$20			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18be	a9 00		lda #$00			lda 	#0
.18c0					_GRSLoop:
.18c0	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c3	ca		dex				dex
.18c4	10 fa		bpl $18c0			bpl 	_GRSLoop
.18c6	a9 01		lda #$01			lda 	#1
.18c8	8d fc 0b	sta $0bfc			sta 	gdInk
.18cb	8d fe 0b	sta $0bfe			sta 	gdSize
.18ce	68		pla				pla
.18cf	aa		tax				tax
.18d0	60		rts				rts
.18d1					GHandler:
.18d1	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18d4	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18d7	a9 00		lda #$00			lda 	#0							; default no text.
.18d9	8d 06 0c	sta $0c06			sta 	gdText+1
.18dc	88		dey				dey 								; predecrement
.18dd					_GHLoopNext:
.18dd	c8		iny				iny									; advance one character
.18de					_GHLoop:
.18de	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18e0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18e2	f0 f9		beq $18dd			beq 	_GHLoopNext
.18e4	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18e6	f0 50		beq $1938			beq 	_GHExit
.18e8	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18ea	f0 4c		beq $1938			beq 	_GHExit
.18ec	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18ee	f0 37		beq $1927			beq 	_GHCallHandler 				; update post & call the handler
.18f0	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18f2	f0 33		beq $1927			beq 	_GHCallHandler
.18f4	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18f6	f0 14		beq $190c			beq 	_GHCPairSkip
.18f8	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.18fa	f0 3d		beq $1939			beq 	_GHText
.18fc	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18fe					_GHCheckTokens:
.18fe	b1 28		lda ($28),y			lda 	(codePtr),y
.1900	dd 4e 19	cmp $194e,x			cmp 	_GHTokenTable,x
.1903	f0 0e		beq $1913			beq 	_GHFoundToken
.1905	e8		inx				inx
.1906	bd 4e 19	lda $194e,x			lda 	_GHTokenTable,x
.1909	d0 f3		bne $18fe			bne 	_GHCheckTokens
.190b	88		dey				dey
.190c					_GHCPairSkip:
.190c	c8		iny				iny
.190d					_GHCPair:
.190d	20 54 19	jsr $1954			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1910	4c de 18	jmp $18de			jmp 	_GHLoop
.1913					_GHFoundToken:
.1913	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1914	8a		txa				txa
.1915	48		pha				pha
.1916	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1918	a2 0c		ldx #$0c		ldx	#12
.191a	20 69 3e	jsr $3e69		jsr	mainHandler
.191d	68		pla				pla
.191e	aa		tax				tax
.191f	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1921	9d fc 0b	sta $0bfc,x			sta 	gModifiers,x 				; update the modifiers
.1924	4c de 18	jmp $18de			jmp 	_GHLoop 					; and loop back
.1927					_GHCallHandler:
.1927	c8		iny				iny 								; consume AT or TO.
.1928	20 54 19	jsr $1954			jsr 	GHMakeCurrent 				; update the coordinates.
.192b	98		tya				tya
.192c	48		pha				pha
.192d	20 35 19	jsr $1935			jsr 	_GHCallHandlerCode 			; call the handler code
.1930	68		pla				pla
.1931	a8		tay				tay
.1932	4c de 18	jmp $18de			jmp 	_GHLoop 					; and loop round.
.1935					_GHCallHandlerCode:
.1935	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.1938					_GHExit:
.1938	60		rts				rts
.1939					_GHText:
.1939	c8		iny				iny 								; skip token
.193a	a9 00		lda #$00			lda 	#0 							; get string.
.193c	a2 0e		ldx #$0e		ldx	#14
.193e	20 69 3e	jsr $3e69		jsr	mainHandler
.1941	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.1943	8d 05 0c	sta $0c05			sta 	gdText
.1946	a5 a0		lda $a0				lda 	esInt1
.1948	8d 06 0c	sta $0c06			sta 	gdText+1
.194b	4c de 18	jmp $18de			jmp 	_GHLoop
.194e					_GHTokenTable:
>194e	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1953	00						.byte 	0
.1954					GHMakeCurrent:
.1954	8a		txa				txa
.1955	48		pha				pha
.1956	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1958	20 68 19	jsr $1968			jsr 	_GHMCDoIt
.195b	a2 02		ldx #$02		ldx	#2
.195d	20 69 3e	jsr $3e69		jsr	mainHandler
.1960	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1962	20 68 19	jsr $1968			jsr 	_GHMCDoIt
.1965	68		pla				pla
.1966	aa		tax				tax
.1967	60		rts				rts
.1968					_GHMCDoIt:
.1968	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.196b	9d ea 0b	sta $0bea,x			sta 	gX1,x
.196e	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.1971	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.1974	8a		txa				txa
.1975	48		pha				pha
.1976	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1978	a2 0a		ldx #$0a		ldx	#10
.197a	20 69 3e	jsr $3e69		jsr	mainHandler
.197d	68		pla				pla
.197e	aa		tax				tax
.197f	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1981	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1984	a5 a0		lda $a0				lda 	esInt1
.1986	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.1989	b0 17		bcs $19a2			bcs 	_GMHCRange
.198b	a5 a8		lda $a8				lda 	esInt2
.198d	05 b0		ora $b0				ora 	esInt3
.198f	d0 11		bne $19a2			bne 	_GMHCRange
.1991	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.1993	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.1996	9d ee 0b	sta $0bee,x			sta 	gX2,x
.1999	a5 a0		lda $a0				lda 	esInt1
.199b	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.199e	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.19a1	60		rts				rts
.19a2					_GMHCRange:
.19a2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19a4	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c07					gdySign:
>0c07							.fill 	1
.19a7					Command_Line:
.19a7	a9 af		lda #$af			lda 	#LineHandler & $FF
.19a9	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.19ab	20 d1 18	jsr $18d1			jsr 	GHandler
.19ae	60		rts				rts
.19af					LineHandler:
.19af	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19b1	a0 04		ldy #$04			ldy 	#gX2-gX1
.19b3	20 97 1c	jsr $1c97			jsr 	CompareCoordsEq
.19b6	f0 09		beq $19c1			beq 	_LHRectCode
.19b8	a2 02		ldx #$02			ldx 	#gY1-gX1
.19ba	a0 06		ldy #$06			ldy 	#gY2-gX1
.19bc	20 97 1c	jsr $1c97			jsr 	CompareCoordsEq
.19bf	d0 03		bne $19c4			bne 	_LHLineDrawer
.19c1					_LHRectCode:
.19c1	4c f4 1a	jmp $1af4			jmp 	RectHandler
.19c4					_LHLineDrawer:
.19c4	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19c6	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c8	20 82 1c	jsr $1c82			jsr 	CompareCoords
.19cb	90 0a		bcc $19d7			bcc 	_LHNoSwap
.19cd	20 ca 1c	jsr $1cca			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19d0	a2 02		ldx #$02			ldx 	#gY1-gX1
.19d2	a0 06		ldy #$06			ldy 	#gY2-gX1
.19d4	20 ca 1c	jsr $1cca			jsr 	GSwapCoords
.19d7					_LHNoSwap:
.19d7	20 00 1a	jsr $1a00			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19da	a0 00		ldy #$00			ldy 	#gX1-gX1
.19dc	20 6c 1c	jsr $1c6c			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19df	b0 15		bcs $19f6			bcs 	_LHExit 					; line off screen.
.19e1					_LHDrawLoop:
.19e1	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19e3	a0 04		ldy #$04			ldy 	#gX2-gX1
.19e5	20 97 1c	jsr $1c97			jsr 	CompareCoordsEq
.19e8	d0 0d		bne $19f7			bne 	_LHNextPixel
.19ea	a2 06		ldx #$06			ldx 	#gY2-gX1
.19ec	a0 06		ldy #$06			ldy 	#gY2-gX1
.19ee	20 97 1c	jsr $1c97			jsr 	CompareCoordsEq
.19f1	d0 04		bne $19f7			bne 	_LHNextPixel
.19f3	20 86 1d	jsr $1d86			jsr 	gdPlotInk 					; plot the last pixel.
.19f6					_LHExit:
.19f6	60		rts				rts
.19f7					_LHNextPixel:
.19f7	20 86 1d	jsr $1d86			jsr 	gdPlotInk 					; plot the pixel.
.19fa	20 54 1a	jsr $1a54			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19fd	4c e1 19	jmp $19e1			jmp  	_LHDrawLoop 				; and loop back if okay
.1a00					BresenhamInitialise:
.1a00	38		sec				sec
.1a01	ad ee 0b	lda $0bee			lda 	gX2
.1a04	ed ea 0b	sbc $0bea			sbc 	gX1
.1a07	8d f6 0b	sta $0bf6			sta 	gdX
.1a0a	ad ef 0b	lda $0bef			lda 	gX2+1
.1a0d	ed eb 0b	sbc $0beb			sbc 	gX1+1
.1a10	8d f7 0b	sta $0bf7			sta 	gdX+1
.1a13	38		sec				sec
.1a14	ad ec 0b	lda $0bec			lda 	gY1
.1a17	ed f0 0b	sbc $0bf0			sbc 	gY2
.1a1a	8d f8 0b	sta $0bf8			sta 	gdy
.1a1d	ad ed 0b	lda $0bed			lda 	gY1+1
.1a20	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.1a23	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a26	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a29	8d 07 0c	sta $0c07			sta 	gdysign
.1a2c	30 12		bmi $1a40			bmi 	_BINormal
.1a2e	38		sec				sec
.1a2f	a9 00		lda #$00			lda 	#0
.1a31	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a34	8d f8 0b	sta $0bf8			sta 	gdy
.1a37	a9 00		lda #$00			lda 	#0
.1a39	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a3c	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a3f	60		rts				rts
.1a40					_BINormal:
.1a40	18		clc				clc
.1a41	ad f6 0b	lda $0bf6			lda 	gdx
.1a44	6d f8 0b	adc $0bf8			adc 	gdy
.1a47	8d f2 0b	sta $0bf2			sta 	gError
.1a4a	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a4d	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a50	8d f3 0b	sta $0bf3			sta 	gError+1
.1a53	60		rts				rts
.1a54					BresenhamIteration:
.1a54	ad f2 0b	lda $0bf2			lda 	gError
.1a57	0a		asl a				asl 	a
.1a58	8d f4 0b	sta $0bf4			sta 	g2Error
.1a5b	ad f3 0b	lda $0bf3			lda 	gError+1
.1a5e	2a		rol a				rol 	a
.1a5f	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a62	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a64	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a66	20 8f 1c	jsr $1c8f			jsr 	CompareCoordsSigned
.1a69	30 03		bmi $1a6e			bmi 	_BINoE2DY
.1a6b	20 7b 1a	jsr $1a7b			jsr 	BresenhamE2GEDY
.1a6e					_BINoE2DY:
.1a6e	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a70	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a72	20 8f 1c	jsr $1c8f			jsr 	CompareCoordsSigned
.1a75	30 03		bmi $1a7a			bmi 	_BINoDXE2
.1a77	20 9a 1a	jsr $1a9a			jsr 	BresenhamDXGEE2
.1a7a					_BINoDXE2:
.1a7a	60		rts				rts
.1a7b					BresenhamE2GEDY:
.1a7b	18		clc				clc
.1a7c	ad f2 0b	lda $0bf2			lda 	gError
.1a7f	6d f8 0b	adc $0bf8			adc 	gdy
.1a82	8d f2 0b	sta $0bf2			sta 	gError
.1a85	ad f3 0b	lda $0bf3			lda 	gError+1
.1a88	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a8b	8d f3 0b	sta $0bf3			sta 	gError+1
.1a8e	ee ea 0b	inc $0bea			inc 	gX1
.1a91	d0 03		bne $1a96			bne 	_BE2Skip
.1a93	ee eb 0b	inc $0beb			inc 	gX1+1
.1a96					_BE2Skip:
.1a96	20 e7 1c	jsr $1ce7			jsr 	gdMvRight
.1a99	60		rts				rts
.1a9a					BresenhamDXGEE2:
.1a9a	18		clc				clc
.1a9b	ad f2 0b	lda $0bf2			lda 	gError
.1a9e	6d f6 0b	adc $0bf6			adc 	gdx
.1aa1	8d f2 0b	sta $0bf2			sta 	gError
.1aa4	ad f3 0b	lda $0bf3			lda 	gError+1
.1aa7	6d f7 0b	adc $0bf7			adc 	gdx+1
.1aaa	8d f3 0b	sta $0bf3			sta 	gError+1
.1aad	ad 07 0c	lda $0c07			lda 	gdySign
.1ab0	10 0c		bpl $1abe			bpl 	_BEDXInvertY
.1ab2	ee ec 0b	inc $0bec			inc 	gY1
.1ab5	d0 03		bne $1aba			bne 	_BEDXSkip
.1ab7	ee ed 0b	inc $0bed			inc 	gY1+1
.1aba					_BEDXSkip:
.1aba	20 22 1d	jsr $1d22			jsr 	gdMvDown
.1abd	60		rts				rts
.1abe					_BEDXInvertY:
.1abe	ad ec 0b	lda $0bec			lda 	gY1
.1ac1	d0 03		bne $1ac6			bne 	_BEDXSkip2
.1ac3	ce ed 0b	dec $0bed			dec 	gY1+1
.1ac6					_BEDXSkip2:
.1ac6	ce ec 0b	dec $0bec			dec 	gY1
.1ac9	20 fd 1c	jsr $1cfd			jsr 	gdMvUp
.1acc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1acd					Command_Plot:
.1acd	a9 d5		lda #$d5			lda 	#PlotHandler & $FF
.1acf	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ad1	20 d1 18	jsr $18d1			jsr 	GHandler
.1ad4	60		rts				rts
.1ad5					PlotHandler:
.1ad5	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ad7	20 6c 1c	jsr $1c6c			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1ada	b0 03		bcs $1adf			bcs 	_PHExit 					; off screen, return with CS.
.1adc	20 86 1d	jsr $1d86			jsr 	gdPlotInk 					; pixel in Ink.
.1adf	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c08					frameFlag:
>0c08							.fill 	1
.1ae0					Command_Rect:
.1ae0	a9 f4		lda #$f4			lda 	#RectHandler & $FF
.1ae2	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1ae4	20 d1 18	jsr $18d1			jsr 	GHandler
.1ae7	60		rts				rts
.1ae8					Command_Frame:
.1ae8	a9 f0		lda #$f0			lda 	#FrameHandler & $FF
.1aea	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1aec	20 d1 18	jsr $18d1			jsr 	GHandler
.1aef	60		rts				rts
.1af0					FrameHandler:
.1af0	a9 01		lda #$01			lda 	#1
.1af2	d0 02		bne $1af6			bne 	RectHandler+2
.1af4					RectHandler:
.1af4	a9 00		lda #$00			lda 	#0
.1af6	8d 08 0c	sta $0c08			sta 	frameFlag
.1af9	20 a6 1c	jsr $1ca6			jsr 	BoxSort 					; sort so topleft/bottom right
.1afc	20 25 1b	jsr $1b25			jsr 	DrawBoxPart 				; solid first line
.1aff					_FHLoop:
.1aff	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1b01	a0 06		ldy #$06			ldy 	#gY2-gX1
.1b03	20 82 1c	jsr $1c82			jsr 	CompareCoords
.1b06	b0 19		bcs $1b21			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1b08	ad 08 0c	lda $0c08			lda 	frameFlag 					; identify solid or frame ?
.1b0b	f0 06		beq $1b13			beq 	_FHIsSolidRect
.1b0d	20 3e 1b	jsr $1b3e			jsr 	DrawBoxEnds
.1b10	4c 16 1b	jmp $1b16			jmp 	_FHNext
.1b13					_FHIsSolidRect:
.1b13	20 25 1b	jsr $1b25			jsr 	DrawBoxPart
.1b16					_FHNext:
.1b16	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1b19	d0 e4		bne $1aff			bne 	_FHLoop
.1b1b	ee ed 0b	inc $0bed			inc 	gY1+1
.1b1e	4c ff 1a	jmp $1aff			jmp 	_FHLoop
.1b21					_FHLastLine:
.1b21	20 25 1b	jsr $1b25			jsr 	DrawBoxPart 				; solid last line whatever
.1b24					_FHExit:
.1b24	60		rts				rts
.1b25					DrawBoxPart:
.1b25	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b27	20 6c 1c	jsr $1c6c			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b2a	38		sec				sec 								; calculate line length => temp0
.1b2b	ad ee 0b	lda $0bee			lda 	gX2
.1b2e	ed ea 0b	sbc $0bea			sbc 	gX1
.1b31	48		pha				pha
.1b32	ad ef 0b	lda $0bef			lda 	gX2+1
.1b35	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b38	aa		tax				tax
.1b39	68		pla				pla 								; line length in XA.
.1b3a	20 56 1b	jsr $1b56			jsr 	DrawHorizontalLine
.1b3d	60		rts				rts
.1b3e					DrawBoxEnds:
.1b3e	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b40	20 6c 1c	jsr $1c6c			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b43	20 86 1d	jsr $1d86			jsr 	gdPlotInk 					; LH end.
.1b46	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b49	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b4c	20 3b 1e	jsr $1e3b			jsr 	gdSetX
.1b4f	20 44 1d	jsr $1d44			jsr		gdSetDrawPosition 			; update position.
.1b52	20 86 1d	jsr $1d86			jsr 	gdPlotInk 					; RH end.
.1b55	60		rts				rts
.1b56					DrawHorizontalLine:
.1b56	86 32		stx $32				stx 	tempShort
.1b58	aa		tax				tax
.1b59	a4 32		ldy $32				ldy 	tempShort
.1b5b	ad fc 0b	lda $0bfc			lda 	gdInk
.1b5e	4c 49 1e	jmp $1e49			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c09					RenderFunction:
>0c09							.fill 	2
.0c0b					RenderWidth:
>0c0b							.fill 	1
.0c0c					RenderHeight:
>0c0c							.fill 	1
.0c0d					RenderType:
>0c0d							.fill 	1
.0c0e					RenderCache:
>0c0e							.fill 	64
.1b61					ImageRenderer:
.1b61	8e 0a 0c	stx $0c0a			stx 	RenderFunction+1
.1b64	8d 09 0c	sta $0c09			sta 	RenderFunction
.1b67	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b69	20 54 1c	jsr $1c54			jsr 	CallRenderFunction
.1b6c	8d 0d 0c	sta $0c0d			sta 	RenderType 					; and save it.
.1b6f	8e 0b 0c	stx $0c0b			stx 	RenderWidth
.1b72	8c 0c 0c	sty $0c0c			sty 	RenderHeight
.1b75	8a		txa				txa 								; check X coordinate
.1b76	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b78	20 1b 1c	jsr $1c1b			jsr 	RenderCheckRange
.1b7b	ad 0c 0c	lda $0c0c			lda 	RenderHeight 				; check Y coordinate
.1b7e	a2 02		ldx #$02			ldx 	#2
.1b80	20 1b 1c	jsr $1c1b			jsr 	RenderCheckRange
.1b83	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b85					_IRLoop1:
.1b85	98		tya				tya
.1b86	48		pha				pha
.1b87	20 f7 1b	jsr $1bf7			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1b8a	20 54 1c	jsr $1c54			jsr 	CallRenderFunction 			; fill the rendering cache.
.1b8d	68		pla				pla
.1b8e	a8		tay				tay
.1b8f	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; number of times to do the row.
.1b92					_IRLoop2:
.1b92	20 9f 1b	jsr $1b9f			jsr 	RenderDrawRow 				; draw one row.
.1b95	ca		dex				dex 								; scale # times.
.1b96	d0 fa		bne $1b92			bne 	_IRLoop2
.1b98	c8		iny				iny 								; next vertical row
.1b99	cc 0c 0c	cpy $0c0c			cpy 	RenderHeight 				; done the lot ?
.1b9c	d0 e7		bne $1b85			bne 	_IRLoop1
.1b9e	60		rts				rts
.1b9f					RenderDrawRow:
.1b9f	8a		txa				txa
.1ba0	48		pha				pha
.1ba1	98		tya				tya
.1ba2	48		pha				pha
.1ba3	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1ba5	20 6c 1c	jsr $1c6c			jsr 	SetupXY
.1ba8	68		pla				pla
.1ba9	a8		tay				tay
.1baa	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1bac					_RDRLoop1:
.1bac	20 c0 1b	jsr $1bc0			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1baf	e8		inx				inx
.1bb0	ec 0b 0c	cpx $0c0b			cpx 	RenderWidth 				; until done the whole lot.
.1bb3	d0 f7		bne $1bac			bne 	_RDRLoop1
.1bb5	ee f0 0b	inc $0bf0			inc 	gY2 						; next line down
.1bb8	d0 03		bne $1bbd			bne 	_RDRNoCarry
.1bba	ee f1 0b	inc $0bf1			inc 	gY2+1
.1bbd					_RDRNoCarry:
.1bbd	68		pla				pla
.1bbe	aa		tax				tax
.1bbf	60		rts				rts
.1bc0					RenderDrawPixelSet:
.1bc0	8a		txa				txa
.1bc1	48		pha				pha
.1bc2	98		tya				tya
.1bc3	48		pha				pha
.1bc4	20 f7 1b	jsr $1bf7			jsr 	RenderFlipXY 				; flip positions as required.
.1bc7	20 e1 1b	jsr $1be1			jsr 	RenderGetInk				; get colour to draw with.
.1bca	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; X counts the size.
.1bcd					_RDPSLoop:
.1bcd	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bcf	f0 03		beq $1bd4			beq 	_RDPSNoDraw
.1bd1	20 89 1d	jsr $1d89			jsr 	gdPlotA 					; draw A otherwise
.1bd4					_RDPSNoDraw:
.1bd4	48		pha				pha 								; move right
.1bd5	20 e7 1c	jsr $1ce7			jsr 	gdMvRight
.1bd8	68		pla				pla
.1bd9	ca		dex				dex
.1bda	d0 f1		bne $1bcd			bne 	_RDPSLoop 					; do it size times.
.1bdc	68		pla				pla
.1bdd	a8		tay				tay
.1bde	68		pla				pla
.1bdf	aa		tax				tax
.1be0	60		rts				rts
.1be1					RenderGetInk:
.1be1	ad 0d 0c	lda $0c0d			lda 	RenderType 					; type, if 0 it's a bitmap
.1be4	f0 04		beq $1bea			beq 	_RGIBitmap
.1be6	bd 0e 0c	lda $0c0e,x			lda 	RenderCache,x 				; read from the cache.
.1be9	60		rts				rts
.1bea					_RGIBitmap:
.1bea	bd 0e 0c	lda $0c0e,x			lda 	RenderCache,x 				; read from the cache.
.1bed	f0 04		beq $1bf3			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bef	ad fc 0b	lda $0bfc			lda 	gdInk
.1bf2	60		rts				rts
.1bf3					_RGIBPaper:
.1bf3	ad fd 0b	lda $0bfd			lda 	gdPaper
.1bf6	60		rts				rts
.1bf7					RenderFlipXY:
.1bf7	ad 00 0c	lda $0c00			lda 	gdFlip 						; check any flip at all
.1bfa	29 03		and #$03			and 	#3
.1bfc	f0 1c		beq $1c1a			beq 	_RFExit
.1bfe	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1bff	90 09		bcc $1c0a			bcc 	_RFNoHFlip
.1c01	ad 0b 0c	lda $0c0b			lda 	RenderWidth 				; X Flip
.1c04	86 32		stx $32				stx 	tempShort
.1c06	18		clc				clc
.1c07	e5 32		sbc $32				sbc 	tempShort
.1c09	aa		tax				tax
.1c0a					_RFNoHFlip:
.1c0a	ad 00 0c	lda $0c00			lda 	gdFlip
.1c0d	29 02		and #$02			and 	#2 							; bit 1 check
.1c0f	f0 09		beq $1c1a			beq 	_RFExit
.1c11	ad 0c 0c	lda $0c0c			lda 	RenderHeight 				; Y Flip
.1c14	84 32		sty $32				sty 	tempShort
.1c16	18		clc				clc
.1c17	e5 32		sbc $32				sbc 	tempShort
.1c19	a8		tay				tay
.1c1a					_RFExit:
.1c1a	60		rts				rts
.1c1b					RenderCheckRange:
.1c1b	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1c1d	ac fe 0b	ldy $0bfe			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1c20	84 2a		sty $2a				sty 	temp0
.1c22	f0 2b		beq $1c4f			beq 	_RCRValue
.1c24	a9 00		lda #$00			lda 	#0 							; total
.1c26					_RCRMultiply:
.1c26	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c28	90 05		bcc $1c2f			bcc 	_RCRNoAdd 					; not adding this time.
.1c2a	18		clc				clc
.1c2b	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c2d	b0 20		bcs $1c4f			bcs 	_RCRValue 					; overflow
.1c2f					_RCRNoAdd:
.1c2f	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c31	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c33	d0 f1		bne $1c26			bne 	_RCRMultiply
.1c35	18		clc				clc 								; add to x2 or y2, store in temp0
.1c36	7d ee 0b	adc $0bee,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c39	85 2a		sta $2a				sta 	temp0
.1c3b	bd ef 0b	lda $0bef,x			lda 	gX2+1,x
.1c3e	69 00		adc #$00			adc 	#0
.1c40	85 2b		sta $2b				sta 	temp0+1
.1c42	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c44	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1c47	a5 2b		lda $2b				lda 	temp0+1
.1c49	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.1c4c	b0 01		bcs $1c4f			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c4e	60		rts				rts
.1c4f					_RCRValue:
.1c4f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c51	20 18 15	jsr $1518		jsr	errorHandler
.1c54					CallRenderFunction:
.1c54	6c 09 0c	jmp ($0c09)			jmp 	(RenderFunction)
.1c57					TestImageAccess:
.1c57	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c59	f0 0a		beq $1c65			beq 	_TIAGetInfo
.1c5b	a0 3f		ldy #$3f			ldy 	#63
.1c5d					_TIACreate:
.1c5d	98		tya				tya
.1c5e	99 0e 0c	sta $0c0e,y			sta 	RenderCache,y
.1c61	88		dey				dey
.1c62	10 f9		bpl $1c5d			bpl 	_TIACreate
.1c64	60		rts				rts
.1c65					_TIAGetInfo:
.1c65	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c67	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c69	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c6b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c6c					SetupXY:
.1c6c	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1c6f	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1c72	20 3b 1e	jsr $1e3b			jsr 	gdSetX
.1c75	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1c78	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1c7b	20 42 1e	jsr $1e42			jsr 	gdSetY
.1c7e	20 44 1d	jsr $1d44			jsr 	gdSetDrawPosition
.1c81	60		rts				rts
.1c82					CompareCoords:
.1c82	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c85	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c88	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c8b	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1c8e	60		rts				rts
.1c8f					CompareCoordsSigned:
.1c8f	20 82 1c	jsr $1c82			jsr 	CompareCoords
.1c92	50 02		bvc $1c96			bvc 	_CCSExit
.1c94	49 80		eor #$80			eor 	#$80
.1c96					_CCSExit:
.1c96	60		rts				rts
.1c97					CompareCoordsEq:
.1c97	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c9a	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c9d	d0 06		bne $1ca5			bne 	_CCEExit
.1c9f	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1ca2	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1ca5					_CCEExit:
.1ca5	60		rts				rts
.1ca6					BoxSort:
.1ca6	a2 00		ldx #$00			ldx 	#gx1-gx1
.1ca8	a0 04		ldy #$04			ldy 	#gx2-gx1
.1caa	20 bb 1c	jsr $1cbb			jsr 	GCompareCoords
.1cad	20 c8 1c	jsr $1cc8			jsr 	GSortMinMaxCoords
.1cb0	a2 02		ldx #$02			ldx 	#gy1-gx1
.1cb2	a0 06		ldy #$06			ldy 	#gy2-gx1
.1cb4	20 bb 1c	jsr $1cbb			jsr 	GCompareCoords
.1cb7	20 c8 1c	jsr $1cc8			jsr 	GSortMinMaxCoords
.1cba	60		rts				rts
.1cbb					GCompareCoords:
.1cbb	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1cbe	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1cc1	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1cc4	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1cc7	60		rts				rts
.1cc8					GSortMinMaxCoords:
.1cc8	90 1c		bcc $1ce6			bcc 	GSMMCExit
.1cca					GSwapCoords:
.1cca	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1ccd	48		pha				pha
.1cce	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1cd1	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1cd4	68		pla				pla
.1cd5	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1cd8	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1cdb	48		pha				pha
.1cdc	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1cdf	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1ce2	68		pla				pla
.1ce3	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1ce6					GSMMCExit:
.1ce6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1ce7					gdMvRight:
.1ce7	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1cea	d0 08		bne $1cf4			bne 	_gdMR0
.1cec	ee 21 9f	inc $9f21			inc 	$9F21
.1cef	d0 03		bne $1cf4			bne 	_gdMR0
.1cf1	ee 22 9f	inc $9f22			inc 	$9F22
.1cf4					_gdMR0:
.1cf4	ee 52 0c	inc $0c52			inc 	gdXPos
.1cf7	d0 03		bne $1cfc			bne 	_gdMR1
.1cf9	ee 53 0c	inc $0c53			inc 	gdXPos+1
.1cfc					_gdMR1:
.1cfc	60		rts				rts
.1cfd					gdMvUp:
.1cfd	ad 54 0c	lda $0c54			lda 	gdYPos 						; decrement Y Pos
.1d00	d0 03		bne $1d05			bne 	_gdMU1
.1d02	ce 55 0c	dec $0c55			dec 	gdYPos+1
.1d05	ce 54 0c	dec $0c54	_gdMU1:	dec 	gdYPos
.1d08	38		sec				sec 								; adjust position by -320
.1d09	ad 20 9f	lda $9f20			lda 	$9F20
.1d0c	e9 40		sbc #$40			sbc 	#64
.1d0e	8d 20 9f	sta $9f20			sta 	$9F20
.1d11	ad 21 9f	lda $9f21			lda 	$9F21
.1d14	e9 01		sbc #$01			sbc 	#1
.1d16	8d 21 9f	sta $9f21			sta 	$9F21
.1d19	ad 22 9f	lda $9f22			lda 	$9F22
.1d1c	e9 00		sbc #$00			sbc 	#0
.1d1e	8d 22 9f	sta $9f22			sta 	$9F22
.1d21	60		rts				rts
.1d22					gdMvDown:
.1d22	ee 54 0c	inc $0c54			inc 	gdYPos 						; decrement Y Pos
.1d25	d0 03		bne $1d2a			bne 	_gdMU1
.1d27	ee 55 0c	inc $0c55			inc 	gdYPos+1
.1d2a					_gdMU1:
.1d2a	18		clc				clc 								; adjust position by -320
.1d2b	ad 20 9f	lda $9f20			lda 	$9F20
.1d2e	69 40		adc #$40			adc 	#64
.1d30	8d 20 9f	sta $9f20			sta 	$9F20
.1d33	ad 21 9f	lda $9f21			lda 	$9F21
.1d36	69 01		adc #$01			adc 	#1
.1d38	8d 21 9f	sta $9f21			sta 	$9F21
.1d3b	ad 22 9f	lda $9f22			lda 	$9F22
.1d3e	69 00		adc #$00			adc 	#0
.1d40	8d 22 9f	sta $9f22			sta 	$9F22
.1d43	60		rts				rts
.1d44					gdSetDrawPosition:
.1d44	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d46	85 2a		sta $2a				sta 	temp0
.1d48	ad 54 0c	lda $0c54			lda 	gdYPos
.1d4b	85 2b		sta $2b				sta 	temp0+1
.1d4d	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d4f	66 2a		ror $2a				ror 	temp0
.1d51	46 2b		lsr $2b				lsr 	temp0+1
.1d53	66 2a		ror $2a				ror 	temp0
.1d55	ad 54 0c	lda $0c54			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d58	18		clc				clc
.1d59	65 2b		adc $2b				adc 	temp0+1
.1d5b	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d5d	18		clc				clc
.1d5e	a5 2a		lda $2a				lda 	temp0
.1d60	6d 52 0c	adc $0c52			adc 	gdXPos
.1d63	85 2a		sta $2a				sta 	temp0
.1d65	a5 2b		lda $2b				lda 	temp0+1
.1d67	6d 53 0c	adc $0c53			adc 	gdXPos+1
.1d6a	85 2b		sta $2b				sta 	temp0+1
.1d6c	18		clc				clc
.1d6d	ad 4f 0c	lda $0c4f			lda 	gdBitmapAddress
.1d70	65 2a		adc $2a				adc 	temp0
.1d72	8d 20 9f	sta $9f20			sta 	$9F20
.1d75	ad 50 0c	lda $0c50			lda 	gdBitmapAddress+1
.1d78	65 2b		adc $2b				adc 	temp0+1
.1d7a	8d 21 9f	sta $9f21			sta 	$9F21
.1d7d	ad 51 0c	lda $0c51			lda 	gdBitmapAddress+2
.1d80	69 00		adc #$00			adc 	#0
.1d82	8d 22 9f	sta $9f22			sta 	$9F22
.1d85	60		rts				rts
.1d86					gdPlotInk:
.1d86	ad fc 0b	lda $0bfc			lda 	gdInk
.1d89					gdPlotA:
.1d89	8d 23 9f	sta $9f23			sta 	$9F23
.1d8c	60		rts				rts
.1d8d					gdPlotPaper:
.1d8d	ad fd 0b	lda $0bfd			lda 	gdPaper
.1d90	c9 ff		cmp #$ff			cmp 	#$FF
.1d92	f0 03		beq $1d97			beq 	_gdPPSkip
.1d94	8d 23 9f	sta $9f23			sta 	$9F23
.1d97					_gdPPSkip:
.1d97	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c4e					gdEnabled:
>0c4e							.fill 	1
.0c4f					gdBitmapAddress:
>0c4f							.fill 	3
.0c52					gdXPos:
>0c52							.fill 	2
.0c54					gdYPos:
>0c54							.fill 	2
.1d98					gdModeChanged:
.1d98	8a		txa				txa
.1d99	48		pha				pha
.1d9a	98		tya				tya
.1d9b	48		pha				pha
.1d9c	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d9e	8d 4e 0c	sta $0c4e			sta 	gdEnabled
.1da1	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1da4	c9 40		cmp #$40			cmp 	#$40
.1da6	d0 1f		bne $1dc7			bne 	_gdExit
.1da8	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1dab	c9 40		cmp #$40			cmp 	#$40
.1dad	d0 18		bne $1dc7			bne 	_gdExit
.1daf	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1db2	0a		asl a				asl 	a 							;
.1db3	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1db4	10 09		bpl $1dbf			bpl 	_gdNotLayer1
.1db6	48		pha				pha 								; save A
.1db7	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1db9	20 cf 1d	jsr $1dcf			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dbc	68		pla				pla 								; restore A
.1dbd	b0 08		bcs $1dc7			bcs 	_gdExit 					; if successful then exit
.1dbf					_gdNotLayer1:
.1dbf	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1dc0	10 05		bpl $1dc7			bpl 	_gdExit 					; if not enabled, exit
.1dc2	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1dc4	20 cf 1d	jsr $1dcf			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dc7					_gdExit:
.1dc7	20 03 1e	jsr $1e03			jsr 	gdClearGraphics 			; clear graphics display.
.1dca	68		pla				pla
.1dcb	a8		tay				tay
.1dcc	68		pla				pla
.1dcd	aa		tax				tax
.1dce	60		rts				rts
.1dcf					gdCheckBitmap:
.1dcf	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1dd2	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1dd4	d0 14		bne $1dea			bne 	_gdCBFail
.1dd6	ee 4e 0c	inc $0c4e			inc 	gdEnabled 					; set the enabled flag to non zero.
.1dd9	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1ddc	0a		asl a				asl 	a
.1ddd	8d 50 0c	sta $0c50			sta 	gdBitmapAddress+1
.1de0	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1de2	8d 51 0c	sta $0c51			sta 	gdBitmapAddress+2
.1de5	a9 00		lda #$00			lda 	#$00
.1de7	8d 4f 0c	sta $0c4f			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dea					_gdCBFail:
.1dea	18		clc				clc
.1deb	60		rts				rts
.1dec					CommandClg:
.1dec	b1 28		lda ($28),y			lda 	(codePtr),y
.1dee	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1df0	d0 0d		bne $1dff			bne 	_CCLClear
.1df2	c8		iny				iny
.1df3	a9 00		lda #$00			lda 	#0
.1df5	a2 0c		ldx #$0c		ldx	#12
.1df7	20 69 3e	jsr $3e69		jsr	mainHandler
.1dfa	a5 98		lda $98				lda 	esInt0
.1dfc	8d fd 0b	sta $0bfd			sta 	gdPaper
.1dff					_CCLClear:
.1dff	20 03 1e	jsr $1e03			jsr 	gdClearGraphics
.1e02	60		rts				rts
.1e03					gdClearGraphics:
.1e03	8a		txa				txa
.1e04	48		pha				pha
.1e05	98		tya				tya
.1e06	48		pha				pha
.1e07	ad 4e 0c	lda $0c4e			lda 	gdEnabled 					; screen enabled
.1e0a	f0 2a		beq $1e36			beq 	_gdCGExit
.1e0c	a9 00		lda #$00			lda 	#0 							; home cursor
.1e0e	aa		tax				tax
.1e0f	20 3b 1e	jsr $1e3b			jsr 	gdSetX
.1e12	20 42 1e	jsr $1e42			jsr 	gdSetY
.1e15	20 44 1d	jsr $1d44			jsr 	gdSetDrawPosition 			; set the draw position.
.1e18	a9 40		lda #$40			lda 	#(320) & $FF
.1e1a	8d 01 0c	sta $0c01			sta 	gdXLimit
.1e1d	a9 01		lda #$01			lda 	#(320) >> 8
.1e1f	8d 02 0c	sta $0c02			sta 	1+(gdXLimit)
.1e22	a9 c8		lda #$c8			lda 	#(200) & $FF
.1e24	8d 03 0c	sta $0c03			sta 	gdYLimit
.1e27	a9 00		lda #$00			lda 	#(200) >> 8
.1e29	8d 04 0c	sta $0c04			sta 	1+(gdYLimit)
.1e2c	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e2e	a2 00		ldx #$00			ldx 	#0
.1e30	ad fd 0b	lda $0bfd			lda 	gdPaper
.1e33	20 49 1e	jsr $1e49			jsr 	gdOptHorizontalWriter
.1e36					_gdCGExit:
.1e36	68		pla				pla
.1e37	a8		tay				tay
.1e38	68		pla				pla
.1e39	aa		tax				tax
.1e3a	60		rts				rts
.1e3b					gdSetX:
.1e3b	8d 52 0c	sta $0c52			sta 	gdXPos
.1e3e	8e 53 0c	stx $0c53			stx 	gdXPos+1
.1e41	60		rts				rts
.1e42					gdSetY:
.1e42	8d 54 0c	sta $0c54			sta 	gdYPos
.1e45	8e 55 0c	stx $0c55			stx 	gdYPos+1
.1e48	60		rts				rts
.1e49					gdOptHorizontalWriter:
.1e49	48		pha				pha
.1e4a	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e4d	09 10		ora #$10			ora 	#$10
.1e4f	8d 22 9f	sta $9f22			sta 	$9F22
.1e52	68		pla				pla
.1e53					_gdOLoop:
.1e53	8d 23 9f	sta $9f23			sta 	$9F23
.1e56	e0 00		cpx #$00			cpx 	#0
.1e58	d0 05		bne $1e5f			bne 	_gdNoBorrow
.1e5a	c0 00		cpy #$00			cpy 	#0
.1e5c	f0 05		beq $1e63			beq 	_gdExit
.1e5e	88		dey				dey
.1e5f					_gdNoBorrow:
.1e5f	ca		dex				dex
.1e60	4c 53 1e	jmp $1e53			jmp 	_gdOLoop
.1e63					_gdExit:
.1e63	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e64					Unary_Clock:
.1e64	a2 0c		ldx #$0c		ldx	#12
.1e66	20 69 3e	jsr $3e69		jsr	mainHandler
.1e69	48		pha				pha 								; save stack pos
.1e6a	a2 04		ldx #$04		ldx	#4
.1e6c	20 69 3e	jsr $3e69		jsr	mainHandler
.1e6f	98		tya				tya
.1e70	48		pha				pha
.1e71	20 50 ff	jsr $ff50			jsr 	$FF50
.1e74	68		pla				pla
.1e75	a8		tay				tay
.1e76	68		pla				pla 								; restore, repush, put into X to read offset
.1e77	48		pha				pha
.1e78	aa		tax				tax
.1e79	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e7b	c9 06		cmp #$06			cmp 	#6
.1e7d	b0 0d		bcs $1e8c			bcs 	_UCValue
.1e7f	aa		tax				tax 								; index in X and read RTC.
.1e80	b5 02		lda $02,x			lda 	2,x
.1e82	85 32		sta $32				sta 	tempshort
.1e84	68		pla				pla 								; restore number stack index.
.1e85	aa		tax				tax
.1e86	a5 32		lda $32				lda 	tempShort
.1e88	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e8a	8a		txa				txa
.1e8b	60		rts				rts
.1e8c					_UCValue:
.1e8c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e8e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e91					Unary_JoyX:
.1e91	38		sec				sec
.1e92	b0 01		bcs $1e95			bcs 	JoystickRead
.1e94					Unary_JoyY:
.1e94	18		clc				clc
.1e95					JoystickRead:
.1e95	48		pha				pha 								; save stack position
.1e96	08		php				php 								; save test flag.
.1e97	a2 04		ldx #$04		ldx	#4
.1e99	20 69 3e	jsr $3e69		jsr	mainHandler
.1e9c	20 f6 1e	jsr $1ef6			jsr 	ReadJoystick 				; read it.
.1e9f	28		plp				plp
.1ea0	b0 02		bcs $1ea4			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1ea2	4a		lsr a				lsr 	a
.1ea3	4a		lsr a				lsr 	a
.1ea4					_JRNoShift:
.1ea4	29 03		and #$03			and 	#3 							; isolate the test bits.
.1ea6	f0 0d		beq $1eb5			beq 	JoyReturnA 					; if nothing pressed, return A.
.1ea8	c9 03		cmp #$03			cmp 	#3
.1eaa	f0 07		beq $1eb3			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1eac	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1ead	b0 16		bcs $1ec5			bcs 	JoyReturn1
.1eaf					JoyReturnTrue:
.1eaf	a9 ff		lda #$ff			lda 	#$FF
.1eb1	d0 02		bne $1eb5			bne 	JoyReturnA
.1eb3					JoyReturnFalse:
.1eb3	a9 00		lda #$00			lda 	#0
.1eb5					JoyReturnA:
.1eb5	85 32		sta $32				sta 	tempShort 					; return A
.1eb7	68		pla				pla
.1eb8	aa		tax				tax
.1eb9	a5 32		lda $32				lda 	tempShort
.1ebb	95 98		sta $98,x			sta 	esInt0,x
.1ebd					JoyReturn13:
.1ebd	95 a0		sta $a0,x			sta 	esInt1,x
.1ebf	95 a8		sta $a8,x			sta 	esInt2,x
.1ec1	95 b0		sta $b0,x			sta 	esInt3,x
.1ec3	8a		txa				txa 								; return NSP in A
.1ec4	60		rts				rts
.1ec5					JoyReturn1:
.1ec5	68		pla				pla
.1ec6	aa		tax				tax
.1ec7	a9 01		lda #$01			lda 	#1
.1ec9	95 98		sta $98,x			sta 	esInt0,x
.1ecb	a9 00		lda #$00			lda 	#0
.1ecd	f0 ee		beq $1ebd			beq 	JoyReturn13
.1ecf					Unary_JButton:
.1ecf	48		pha				pha 								; save X on stack, put in X
.1ed0	a2 0c		ldx #$0c		ldx	#12
.1ed2	20 69 3e	jsr $3e69		jsr	mainHandler
.1ed5	aa		tax				tax 								; get value to check, push on stack.
.1ed6	b5 98		lda $98,x			lda 	esInt0,x
.1ed8	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1eda	b0 15		bcs $1ef1			bcs 	_UJBadValue
.1edc	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ede	48		pha				pha 								; save that shift count on the stack.
.1edf	a2 04		ldx #$04		ldx	#4
.1ee1	20 69 3e	jsr $3e69		jsr	mainHandler
.1ee4	68		pla				pla
.1ee5	aa		tax				tax
.1ee6	20 f6 1e	jsr $1ef6			jsr 	ReadJoystick 				; joystick read
.1ee9					_UJShift:
.1ee9	4a		lsr a				lsr 	a
.1eea	ca		dex				dex
.1eeb	d0 fc		bne $1ee9			bne 	_UJShift
.1eed	b0 c0		bcs $1eaf			bcs 	JoyReturnTrue
.1eef	90 c2		bcc $1eb3			bcc 	JoyReturnFalse
.1ef1					_UJBadValue:
.1ef1	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ef3	20 18 15	jsr $1518		jsr	errorHandler
.1ef6					ReadJoystick:
.1ef6	8a		txa				txa
.1ef7	48		pha				pha
.1ef8	98		tya				tya
.1ef9	48		pha				pha
.1efa	a9 00		lda #$00			lda 	#0
.1efc	20 56 ff	jsr $ff56			jsr 	$FF56
.1eff	c0 00		cpy #$00			cpy 	#0
.1f01	d0 11		bne $1f14			bne 	_RJError
.1f03	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1f05	d0 02		bne $1f09			bne 	_RJNoBug
.1f07	a9 ff		lda #$ff			lda 	#$FF
.1f09					_RJNoBug:
.1f09	85 32		sta $32				sta 	tempShort
.1f0b	68		pla				pla
.1f0c	a8		tay				tay
.1f0d	68		pla				pla
.1f0e	aa		tax				tax
.1f0f	a5 32		lda $32				lda 	tempShort
.1f11	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1f13	60		rts				rts
.1f14					_RJError:
.1f14	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f16	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c56					hitSprite1:
>0c56							.fill 	1 							; this won't work ... if you nest HIT() which
.0c57					hitSprite2:
>0c57							.fill 	1
.0c58					hitRange:
>0c58							.fill 	1
.1f19					FunctionCollide:
.1f19	48		pha				pha 								; save and put index into X
.1f1a	aa		tax				tax
.1f1b	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1f1d	8d 58 0c	sta $0c58			sta 	hitRange
.1f20	20 c5 1f	jsr $1fc5			jsr 	_FCGetSpriteID
.1f23	8d 56 0c	sta $0c56			sta 	hitSprite1
.1f26	8a		txa				txa
.1f27	48		pha				pha
.1f28	a2 02		ldx #$02		ldx	#2
.1f2a	20 69 3e	jsr $3e69		jsr	mainHandler
.1f2d	68		pla				pla
.1f2e	aa		tax				tax
.1f2f	20 c5 1f	jsr $1fc5			jsr 	_FCGetSpriteID
.1f32	8d 57 0c	sta $0c57			sta 	hitSprite2
.1f35	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1f37	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f39	f0 13		beq $1f4e			beq 	_FCParam2
.1f3b	8a		txa				txa
.1f3c	48		pha				pha
.1f3d	a2 02		ldx #$02		ldx	#2
.1f3f	20 69 3e	jsr $3e69		jsr	mainHandler
.1f42	68		pla				pla
.1f43	a2 0c		ldx #$0c		ldx	#12
.1f45	20 69 3e	jsr $3e69		jsr	mainHandler
.1f48	aa		tax				tax
.1f49	b5 98		lda $98,x			lda 	esInt0,x
.1f4b	8d 58 0c	sta $0c58			sta 	hitRange
.1f4e					_FCParam2:
.1f4e	a2 04		ldx #$04		ldx	#4
.1f50	20 69 3e	jsr $3e69		jsr	mainHandler
.1f53	68		pla				pla 								; set X to point to the stack again.
.1f54	48		pha				pha
.1f55	aa		tax				tax
.1f56	98		tya				tya
.1f57	48		pha				pha
.1f58	18		clc				clc 								; do it with the horizontal values.
.1f59	20 7b 1f	jsr $1f7b			jsr 	_FCCheck
.1f5c	90 0a		bcc $1f68			bcc 	_FCFail
.1f5e	38		sec				sec 								; do it with the vertical values.
.1f5f	20 7b 1f	jsr $1f7b			jsr 	_FCCheck
.1f62	90 04		bcc $1f68			bcc 	_FCFail
.1f64	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1f66	d0 02		bne $1f6a			bne 	_FCReturnA
.1f68					_FCFail:
.1f68	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1f6a					_FCReturnA:
.1f6a	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1f6c	68		pla				pla
.1f6d	a8		tay				tay
.1f6e	68		pla				pla 								; restore stack, return result and exit.
.1f6f	aa		tax				tax
.1f70	a5 32		lda $32				lda 	tempShort
.1f72	95 98		sta $98,x			sta 	esInt0,x
.1f74	95 a0		sta $a0,x			sta 	esInt1,x
.1f76	95 a8		sta $a8,x			sta 	esInt2,x
.1f78	95 b0		sta $b0,x			sta 	esInt3,x
.1f7a	60		rts				rts
.1f7b					_FCCheck:
.1f7b	08		php				php 								; save the H/V flag twice
.1f7c	08		php				php
.1f7d	ad 56 0c	lda $0c56			lda 	hitSprite1 					; select sprite 1 and read its location
.1f80	20 03 21	jsr $2103			jsr 	SelectSpriteA 				; into X
.1f83	28		plp				plp
.1f84	20 29 22	jsr $2229			jsr 	SpriteReadCoordinate
.1f87	ad 57 0c	lda $0c57			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1f8a	20 03 21	jsr $2103			jsr 	SelectSpriteA
.1f8d	e8		inx				inx
.1f8e	28		plp				plp
.1f8f	20 29 22	jsr $2229			jsr 	SpriteReadCoordinate
.1f92	ca		dex				dex
.1f93	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1f94	b5 98		lda $98,x			lda 	esInt0,x
.1f96	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1f98	85 2a		sta $2a				sta 	temp0
.1f9a	b5 a0		lda $a0,x			lda 	esInt1,x
.1f9c	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1f9e	85 2b		sta $2b				sta 	temp0+1
.1fa0	10 0d		bpl $1faf			bpl 	_FCCIsPositive
.1fa2	38		sec				sec 								; if -ve calculate |difference|
.1fa3	a9 00		lda #$00			lda 	#0
.1fa5	e5 2a		sbc $2a				sbc 	temp0
.1fa7	85 2a		sta $2a				sta 	temp0
.1fa9	a9 00		lda #$00			lda 	#0
.1fab	e5 2b		sbc $2b				sbc 	temp0+1
.1fad	85 2b		sta $2b				sta 	temp0+1
.1faf					_FCCIsPositive:
.1faf	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1fb1	d0 10		bne $1fc3			bne 	_FCCFail
.1fb3	18		clc				clc 								; work out required min distance which is
.1fb4	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1fb6	75 b1		adc $b1,x			adc 	esInt3+1,x
.1fb8	ac 58 0c	ldy $0c58			ldy 	hitRange 					; get the hit range
.1fbb	f0 01		beq $1fbe			beq 	_FCCNoSetRange 				; override if non zero.
.1fbd	98		tya				tya
.1fbe					_FCCNoSetRange:
.1fbe	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1fc0	f0 01		beq $1fc3			beq 	_FCCFail
.1fc2	60		rts				rts
.1fc3					_FCCFail:
.1fc3	18		clc				clc
.1fc4	60		rts				rts
.1fc5					_FCGetSpriteID:
.1fc5	8a		txa				txa
.1fc6	a2 0c		ldx #$0c		ldx	#12
.1fc8	20 69 3e	jsr $3e69		jsr	mainHandler
.1fcb	aa		tax				tax
.1fcc	b5 98		lda $98,x			lda 	esInt0,x
.1fce	30 01		bmi $1fd1			bmi 	_FCGSValue
.1fd0	60		rts				rts
.1fd1					_FCGSValue:
.1fd1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fd3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c59					currSprite:
>0c59							.fill 	2
.1fd6					CommandSprite:
.1fd6	20 d8 20	jsr $20d8			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1fd9	d0 0d		bne $1fe8			bne 	_CSCheckClear
.1fdb	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1fde	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1fe0	90 02		bcc $1fe4			bcc 	_CSNotOn 					; if CS turn on, so set it
.1fe2	09 40		ora #$40			ora 	#$40
.1fe4					_CSNotOn:
.1fe4	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1fe7	60		rts				rts
.1fe8					_CSCheckClear:
.1fe8	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1fea	8d 5a 0c	sta $0c5a			sta 	currSprite+1
.1fed	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1fef	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1ff1	d0 05		bne $1ff8			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1ff3	20 e9 20	jsr $20e9			jsr 	CSClearSprites 				; clear all the sprites
.1ff6	c8		iny				iny 								; consume CLEAR token and exit.
.1ff7	60		rts				rts
.1ff8					_CSCommandLoop:
.1ff8	20 d8 20	jsr $20d8			jsr 	CSCheckOnOff 				; check sprite on/off
.1ffb	f0 2c		beq $2029			beq 	_CSSetVisibility
.1ffd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1fff	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.2001	f0 25		beq $2028			beq 	_CSExit
.2003	c8		iny				iny									; consume it
.2004	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.2006	f0 20		beq $2028			beq 	_CSExit
.2008	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.200a	f0 ec		beq $1ff8			beq 	_CSCommandLoop
.200c	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.200e	f0 69		beq $2079			beq 	_CSSetImage
.2010	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.2012	f0 2b		beq $203f			beq 	_CSSetFlip
.2014	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.2016	f0 46		beq $205e			beq 	_CSSetPos
.2018	88		dey				dey 								; unpick DEY
.2019	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.201b	a2 0c		ldx #$0c		ldx	#12
.201d	20 69 3e	jsr $3e69		jsr	mainHandler
.2020	a5 98		lda $98				lda 	esInt0
.2022	20 03 21	jsr $2103			jsr 	SelectSpriteA
.2025	4c f8 1f	jmp $1ff8			jmp 	_CSCommandLoop
.2028					_CSExit:
.2028	60		rts				rts
.2029					_CSSetVisibility:
.2029	08		php				php 								; save carry
.202a	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.202c	20 bf 20	jsr $20bf			jsr 	SpriteSetTarget
.202f	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2032	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2034	28		plp				plp
.2035	90 02		bcc $2039			bcc 	_CSSetOff 					; check if carry was set
.2037	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2039					_CSSetOff:
.2039	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.203c	4c f8 1f	jmp $1ff8			jmp 	_CSCommandLoop
.203f					_CSSetFlip:
.203f	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2041	a2 0c		ldx #$0c		ldx	#12
.2043	20 69 3e	jsr $3e69		jsr	mainHandler
.2046	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2048	20 bf 20	jsr $20bf			jsr 	SpriteSetTarget
.204b	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.204d	29 03		and #$03			and 	#3
.204f	85 2a		sta $2a				sta 	temp0
.2051	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.2054	29 fc		and #$fc			and 	#$FC
.2056	05 2a		ora $2a				ora 	temp0
.2058	8d 23 9f	sta $9f23			sta 	$9F23
.205b	4c f8 1f	jmp $1ff8			jmp 	_CSCommandLoop
.205e					_CSSetPos:
.205e	a9 00		lda #$00			lda 	#0 							; X now at level 0
.2060	a2 0a		ldx #$0a		ldx	#10
.2062	20 69 3e	jsr $3e69		jsr	mainHandler
.2065	a2 02		ldx #$02		ldx	#2
.2067	20 69 3e	jsr $3e69		jsr	mainHandler
.206a	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.206c	a2 0a		ldx #$0a		ldx	#10
.206e	20 69 3e	jsr $3e69		jsr	mainHandler
.2071	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2073	20 e5 21	jsr $21e5			jsr 	SpriteMove 					; move it.
.2076	4c f8 1f	jmp $1ff8			jmp 	_CSCommandLoop
.2079					_CSSetImage:
.2079	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.207b	a2 0c		ldx #$0c		ldx	#12
.207d	20 69 3e	jsr $3e69		jsr	mainHandler
.2080	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.2082	20 bf 20	jsr $20bf			jsr 	SpriteSetTarget
.2085	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2087	bd a1 0c	lda $0ca1,x			lda 	imageAddr32Low,x 			; copy low address in.
.208a	8d 23 9f	sta $9f23			sta 	$9F23
.208d	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.2090	bd 61 0c	lda $0c61,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2093	29 10		and #$10			and 	#$10
.2095	0a		asl a				asl 	a
.2096	0a		asl a				asl		a
.2097	0a		asl a				asl 	a 							; put into bit 7
.2098	1d e1 0c	ora $0ce1,x			ora 	imageAddr32High,x 			; or high address with it.
.209b	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.209e	a9 06		lda #$06			lda 	#6
.20a0	20 bf 20	jsr $20bf			jsr 	SpriteSetTarget 			; set sprite on.
.20a3	ad 23 9f	lda $9f23			lda 	$9F23
.20a6	09 0c		ora #$0c			ora 	#$0C
.20a8	8d 23 9f	sta $9f23			sta 	$9F23
.20ab	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.20ae	bd 61 0c	lda $0c61,x			lda 	imageInfo,x 				; get image info
.20b1	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.20b2	0a		asl a				asl 	a
.20b3	0a		asl a				asl 	a
.20b4	0a		asl a				asl 	a
.20b5	b0 02		bcs $20b9			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.20b7	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.20b9					_CSNoOffset:
.20b9	8d 23 9f	sta $9f23			sta 	$9F23
.20bc	4c f8 1f	jmp $1ff8			jmp 	_CSCommandLoop
.20bf					SpriteSetTarget:
.20bf	0d 59 0c	ora $0c59			ora 	currSprite
.20c2	8d 20 9f	sta $9f20			sta 	$9F20
.20c5	ad 5a 0c	lda $0c5a			lda 	currSprite+1
.20c8	f0 09		beq $20d3			beq 	_SSTNoSet
.20ca	8d 21 9f	sta $9f21			sta 	$9F21
.20cd	a9 01		lda #$01			lda 	#$01
.20cf	8d 22 9f	sta $9f22			sta 	$9F22
.20d2	60		rts				rts
.20d3					_SSTNoSet:
.20d3	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.20d5	20 18 15	jsr $1518		jsr	errorHandler
.20d8					CSCheckOnOff:
.20d8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.20da	c8		iny				iny
.20db	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.20dd	18		clc				clc
.20de	f0 08		beq $20e8			beq 	_CSCOExit
.20e0	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.20e2	38		sec				sec 								; return NE if neither.
.20e3	f0 03		beq $20e8			beq 	_CSCOExit
.20e5	88		dey				dey 								; undo consume
.20e6	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.20e8					_CSCOExit:
.20e8	60		rts				rts
.20e9					CSClearSprites:
.20e9	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.20eb	8d 22 9f	sta $9f22			sta 	$9F22
.20ee	a9 fc		lda #$fc			lda 	#$FC
.20f0	8d 21 9f	sta $9f21			sta 	$9F21
.20f3	a9 00		lda #$00			lda 	#0
.20f5	8d 20 9f	sta $9f20			sta 	$9F20
.20f8					_CSClear:
.20f8	a9 00		lda #$00			lda 	#0 							; set everything to $00
.20fa	8d 23 9f	sta $9f23			sta 	$9F23
.20fd	ad 21 9f	lda $9f21			lda 	$9F21
.2100	d0 f6		bne $20f8			bne 	_CSClear
.2102	60		rts				rts
.2103					SelectSpriteA:
.2103	85 2a		sta $2a				sta 	temp0
.2105	a9 00		lda #$00			lda 	#0
.2107	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.2109	b0 11		bcs $211c			bcs 	_CSBadValue 				; sprites only 0-127
.210b	06 2a		asl $2a				asl 	temp0
.210d	2a		rol a				rol 	a
.210e	06 2a		asl $2a				asl 	temp0
.2110	2a		rol a				rol 	a
.2111	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.2113	8d 5a 0c	sta $0c5a			sta 	currSprite+1
.2116	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.2118	8d 59 0c	sta $0c59			sta 	currSprite+0
.211b	60		rts				rts
.211c					_CSBadValue
.211c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.211e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0c5b					srenderWidth:
>0c5b							.fill 	1
.2121					Command_Paint:
.2121	a9 29		lda #$29			lda 	#ImageHandler & $FF
.2123	a2 21		ldx #$21			ldx 	#ImageHandler >> 8
.2125	20 d1 18	jsr $18d1			jsr 	GHandler
.2128	60		rts				rts
.2129					ImageHandler:
.2129	a9 30		lda #$30			lda 	#SpriteImageAccess & $FF
.212b	a2 21		ldx #$21			ldx 	#SpriteImageAccess >> 8
.212d	4c 61 1b	jmp $1b61			jmp 	ImageRenderer
.2130					SpriteImageAccess:
.2130	c0 ff		cpy #$ff			cpy 	#255
.2132	d0 22		bne $2156			bne 	_SIAGetPixel
.2134	ae ff 0b	ldx $0bff			ldx 	gdImage 					; get the image #
.2137	bd 61 0c	lda $0c61,x			lda 	imageInfo,x 				; get the image information.
.213a	48		pha				pha
.213b	29 03		and #$03			and 	#3 							; LSB x 2 width
.213d	aa		tax				tax
.213e	bd 52 21	lda $2152,x			lda 	_SIASizeTable,x
.2141	8d 5b 0c	sta $0c5b			sta 	sRenderWidth 				; save rendering width.
.2144	aa		tax				tax
.2145	68		pla				pla 								; get back next 2 bits are height
.2146	4a		lsr a				lsr 	a
.2147	4a		lsr a				lsr 	a
.2148	29 03		and #$03			and 	#3
.214a	a8		tay				tay
.214b	b9 52 21	lda $2152,y			lda 	_SIASizeTable,y
.214e	a8		tay				tay
.214f	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.2151	60		rts				rts
.2152					_SIASizeTable:
>2152	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.2156					_SIAGetPixel:
.2156	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.2158	a9 00		lda #$00			lda 	#0
.215a	85 2b		sta $2b				sta 	temp0+1
.215c	ac ff 0b	ldy $0bff			ldy 	gdImage 					; get image info into A
.215f	b9 61 0c	lda $0c61,y			lda 	imageInfo,y
.2162	48		pha				pha
.2163	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.2165	85 2c		sta $2c				sta 	temp1
.2167	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.2168	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.216a	18		clc				clc
.216b	69 03		adc #$03			adc 	#3
.216d	a8		tay				tay
.216e					_SIAMultiply:
.216e	06 2a		asl $2a				asl 	temp0
.2170	26 2b		rol $2b				rol 	temp0+1
.2172	88		dey				dey
.2173	d0 f9		bne $216e			bne 	_SIAMultiply
.2175	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.2177	d0 04		bne $217d			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.2179	46 2b		lsr $2b				lsr 	temp0+1
.217b	66 2a		ror $2a				ror 	temp0
.217d					_SIANoHalf:
.217d	ae ff 0b	ldx $0bff			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.2180	bd a1 0c	lda $0ca1,x			lda 	imageAddr32Low,x
.2183	85 2e		sta $2e				sta 	temp2
.2185	bd e1 0c	lda $0ce1,x			lda 	imageAddr32High,x
.2188	85 2f		sta $2f				sta 	temp2+1
.218a	a9 00		lda #$00			lda 	#0
.218c	85 30		sta $30				sta 	temp3
.218e	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.2190					_SIMult32:
.2190	06 2e		asl $2e				asl 	temp2
.2192	26 2f		rol $2f				rol 	temp2+1
.2194	26 30		rol $30				rol 	temp3
.2196	ca		dex				dex
.2197	d0 f7		bne $2190			bne 	_SIMult32
.2199	ee 25 9f	inc $9f25			inc 	$9F25 						; select alternate data port
.219c	18		clc				clc
.219d	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.219f	65 2e		adc $2e				adc 	temp2
.21a1	8d 20 9f	sta $9f20			sta 	$9F20
.21a4	a5 2b		lda $2b				lda 	temp0+1
.21a6	65 2f		adc $2f				adc 	temp2+1
.21a8	8d 21 9f	sta $9f21			sta 	$9F21
.21ab	a9 10		lda #$10			lda 	#$10
.21ad	65 30		adc $30				adc 	temp3
.21af	8d 22 9f	sta $9f22			sta 	$9F22
.21b2	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.21b4					_SIFillCacheLoop:
.21b4	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.21b6	d0 12		bne $21ca			bne 	_SI8Bit
.21b8	ad 24 9f	lda $9f24			lda 	$9F24 						; get data
.21bb	48		pha				pha 								; save it
.21bc	4a		lsr a				lsr 	a 							; MSB first
.21bd	4a		lsr a				lsr 	a
.21be	4a		lsr a				lsr 	a
.21bf	4a		lsr a				lsr 	a
.21c0	20 da 21	jsr $21da			jsr 	_SIWrite4Bit
.21c3	68		pla				pla
.21c4	20 da 21	jsr $21da			jsr 	_SIWrite4Bit
.21c7	4c d1 21	jmp $21d1			jmp 	_SIAdvance
.21ca					_SI8Bit:
.21ca	ad 24 9f	lda $9f24			lda 	$9F24 						; copy data into render cache
.21cd	9d 0e 0c	sta $0c0e,x			sta 	RenderCache,x
.21d0	e8		inx				inx
.21d1					_SIAdvance:
.21d1	ec 5b 0c	cpx $0c5b			cpx 	sRenderWidth 				; filled the cache to required width ?
.21d4	d0 de		bne $21b4			bne 	_SIFillCacheLoop
.21d6	ce 25 9f	dec $9f25			dec 	$9F25 						; select original data port.
.21d9	60		rts				rts
.21da					_SIWrite4Bit:
.21da	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.21dc	f0 02		beq $21e0			beq 	_SIW4Skip
.21de	09 f0		ora #$f0			ora 	#$F0
.21e0					_SIW4Skip:
.21e0	9d 0e 0c	sta $0c0e,x			sta 	RenderCache,x
.21e3	e8		inx				inx
.21e4	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.21e5					SpriteMove:
.21e5	98		tya				tya
.21e6	48		pha				pha
.21e7	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.21e9	20 bf 20	jsr $20bf			jsr 	SpriteSetTarget
.21ec	ad 23 9f	lda $9f23			lda 	$9F23
.21ef	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.21f0	4a		lsr a				lsr 	a
.21f1	4a		lsr a				lsr 	a
.21f2	4a		lsr a				lsr 	a
.21f3	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.21f5	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.21f7	20 bf 20	jsr $20bf			jsr 	SpriteSetTarget
.21fa	20 09 22	jsr $2209			jsr 	SMWritePosition 					; write X position out.
.21fd	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.21ff	46 2a		lsr $2a				lsr 	temp0
.2201	e8		inx				inx 										; get the y position
.2202	20 09 22	jsr $2209			jsr 	SMWritePosition 					; and write that out.
.2205	ca		dex				dex 										; fix X and quit.
.2206	68		pla				pla
.2207	a8		tay				tay
.2208	60		rts				rts
.2209					SMWritePosition:
.2209	a5 2a		lda $2a				lda 	temp0 								; get dim size
.220b	29 03		and #$03			and 	#3 									; in range into Y
.220d	a8		tay				tay
.220e	38		sec				sec
.220f	b5 98		lda $98,x			lda 	esInt0,x
.2211	f9 25 22	sbc $2225,y			sbc 	SMHalfSize,y
.2214	8d 23 9f	sta $9f23			sta 	$9F23
.2217	ee 20 9f	inc $9f20			inc 	$9F20
.221a	b5 a0		lda $a0,x			lda 	esInt1,x
.221c	e9 00		sbc #$00			sbc 	#0
.221e	8d 23 9f	sta $9f23			sta 	$9F23
.2221	ee 20 9f	inc $9f20			inc 	$9F20
.2224	60		rts				rts
.2225					SMHalfSize:
>2225	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2229					SpriteReadCoordinate:
.2229	98		tya				tya
.222a	48		pha				pha
.222b	08		php				php 										; save CTR on stack
.222c	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.222e	20 bf 20	jsr $20bf			jsr 	SpriteSetTarget
.2231	ad 23 9f	lda $9f23			lda 	$9F23
.2234	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2235	4a		lsr a				lsr 	a
.2236	4a		lsr a				lsr 	a
.2237	4a		lsr a				lsr 	a
.2238	28		plp				plp 										; restore CTS
.2239	08		php				php
.223a	90 02		bcc $223e			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.223c	4a		lsr a				lsr 	a
.223d	4a		lsr a				lsr 	a
.223e					_SPRCNotY1:
.223e	29 03		and #$03			and 	#3 									; point into half width/height
.2240	a8		tay				tay
.2241	b9 25 22	lda $2225,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2244	95 b0		sta $b0,x			sta 	esInt3,x
.2246	28		plp				plp 										; CS Y CC X
.2247	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2249	2a		rol a				rol 	a
.224a	2a		rol a				rol 	a
.224b	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.224d	20 bf 20	jsr $20bf			jsr 	SpriteSetTarget 					; set data pointer offset by that
.2250	18		clc				clc 										; read and unfix centre.
.2251	ad 23 9f	lda $9f23			lda 	$9F23
.2254	75 b0		adc $b0,x			adc 	esInt3,x
.2256	95 98		sta $98,x			sta 	esInt0,x
.2258	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.225b	ad 23 9f	lda $9f23			lda 	$9F23
.225e	69 00		adc #$00			adc 	#0
.2260	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2262	c9 08		cmp #$08			cmp		#$08
.2264	90 02		bcc $2268			bcc 	_SPRCNoSX
.2266	09 f0		ora #$f0			ora 	#$F0
.2268					_SPRCNoSX:
.2268	95 a0		sta $a0,x			sta 	esInt1,x
.226a	68		pla				pla
.226b	a8		tay				tay
.226c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.226d					Sprite_GetX:
.226d	18		clc				clc
.226e	90 01		bcc $2271			bcc 	SpriteGetCode
.2270					Sprite_GetY:
.2270	38		sec				sec
.2271					SpriteGetCode:
.2271	08		php				php 								; CLC : X SEC: Y, save on stack.
.2272	48		pha				pha 								; save stack position
.2273	20 8f 22	jsr $228f			jsr 	GetSpriteNumber 			; get # of sprite.
.2276	a2 04		ldx #$04		ldx	#4
.2278	20 69 3e	jsr $3e69		jsr	mainHandler
.227b	68		pla				pla
.227c	aa		tax				tax
.227d	28		plp				plp 								; which one ?
.227e	20 29 22	jsr $2229			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.2281	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.2283	29 80		and #$80			and 	#$80
.2285	f0 02		beq $2289			beq 	_SGXYPos
.2287	a9 ff		lda #$ff			lda 	#$FF
.2289					_SGXYPos:
.2289	95 a8		sta $a8,x			sta 	esInt2,x
.228b	95 b0		sta $b0,x			sta 	esInt3,x
.228d	8a		txa				txa 								; return NSP in A
.228e	60		rts				rts
.228f					GetSpriteNumber:
.228f	48		pha				pha
.2290	a2 0c		ldx #$0c		ldx	#12
.2292	20 69 3e	jsr $3e69		jsr	mainHandler
.2295	68		pla				pla
.2296	aa		tax				tax
.2297	b5 98		lda $98,x			lda 	esInt0,x
.2299	20 03 21	jsr $2103			jsr 	SelectSpriteA
.229c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c5c					currentMode:
>0c5c							.fill 	4
.229d					ForceMode0:
.229d	a2 00		ldx #$00			ldx 	#0
.229f	86 98		stx $98				stx 	esInt0 						; in case we do it.
.22a1					_FMCheck:
.22a1	bd 34 23	lda $2334,x			lda 	CMModeList,x 				; do we need to switch ?
.22a4	dd 5c 0c	cmp $0c5c,x			cmp 	currentMode,x
.22a7	d0 13		bne $22bc			bne 	CMSetMode 					; different so switch.
.22a9	e8		inx				inx
.22aa	e0 04		cpx #$04			cpx 	#4
.22ac	d0 f3		bne $22a1			bne 	_FMCheck
.22ae	60		rts				rts
.22af					CommandMode:
.22af	a9 00		lda #$00			lda 	#0
.22b1	a2 0a		ldx #$0a		ldx	#10
.22b3	20 69 3e	jsr $3e69		jsr	mainHandler
.22b6	a5 b0		lda $b0				lda 	esInt3
.22b8	29 70		and #$70			and 	#$70
.22ba	d0 06		bne $22c2			bne 	CMNoExpand
.22bc					CMSetMode:
.22bc	20 13 23	jsr $2313			jsr 	CMExpandMode
.22bf	4c d6 22	jmp $22d6			jmp 	CMUpdateMode
.22c2					CMNoExpand:
.22c2	a5 98		lda $98				lda 	esInt0
.22c4	8d 5c 0c	sta $0c5c			sta 	currentMode
.22c7	a5 a0		lda $a0				lda 	esInt1
.22c9	8d 5d 0c	sta $0c5d			sta 	currentMode+1
.22cc	a5 a8		lda $a8				lda 	esInt2
.22ce	8d 5e 0c	sta $0c5e			sta 	currentMode+2
.22d1	a5 b0		lda $b0				lda 	esInt3
.22d3	8d 5f 0c	sta $0c5f			sta 	currentMode+3
.22d6					CMUpdateMode:
.22d6	a2 11		ldx #$11			ldx 	#$11
.22d8					_CMClear:
.22d8	a9 00		lda #$00			lda 	#0
.22da	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.22dd	ca		dex				dex
.22de	10 f8		bpl $22d8			bpl 	_CMClear
.22e0	ad 5f 0c	lda $0c5f			lda 	currentMode+3 				; get current mode
.22e3	48		pha				pha 								; stack twice.
.22e4	48		pha				pha
.22e5	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.22e7	09 01		ora #$01			ora 	#$01 						; turn the output on.
.22e9	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.22ec	68		pla				pla 								; get back
.22ed	20 44 23	jsr $2344			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22f0	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.22f3	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.22f4	4a		lsr a				lsr 	a
.22f5	4a		lsr a				lsr 	a
.22f6	20 44 23	jsr $2344			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22f9	8d 2b 9f	sta $9f2b			sta 	$9F2B
.22fc	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.22fe	ad 5c 0c	lda $0c5c			lda 	currentMode					; get L0 config byte
.2301	20 4f 23	jsr $234f			jsr 	CMDecodeLayer 				; and decode layer 0
.2304	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2306	ad 5d 0c	lda $0c5d			lda 	currentMode+1
.2309	20 4f 23	jsr $234f			jsr 	CMDecodeLayer
.230c	20 98 1d	jsr $1d98			jsr 	gdModeChanged 				; check the bitmap status.
.230f	20 ba 18	jsr $18ba			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2312	60		rts				rts
.2313					CMExpandMode:
.2313	a5 98		lda $98				lda 	esInt0 						; get mode number
.2315	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2317	b0 16		bcs $232f			bcs 	_CMModeError
.2319	0a		asl a				asl 	a 							; x 4 into X
.231a	0a		asl a				asl 	a
.231b	aa		tax				tax
.231c	98		tya				tya
.231d	48		pha				pha
.231e	a0 00		ldy #$00			ldy 	#0
.2320					_CMEMCopy:
.2320	bd 34 23	lda $2334,x			lda 	CMModeList,x
.2323	99 5c 0c	sta $0c5c,y			sta 	currentMode,y
.2326	e8		inx				inx
.2327	c8		iny				iny
.2328	c0 04		cpy #$04			cpy 	#4
.232a	d0 f4		bne $2320			bne 	_CMEMCopy
.232c	68		pla				pla
.232d	a8		tay				tay
.232e	60		rts				rts
.232f					_CMModeError:
.232f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2331	20 18 15	jsr $1518		jsr	errorHandler
.2334					CMModeList:
>2334	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2338	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>233c	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>2340	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2344					CMEndModeList:
.2344					CMToScale:
.2344	29 03		and #$03			and 	#3 							; lower 2 bits only
.2346	aa		tax				tax 								; put in X for counting
.2347	a9 00		lda #$00			lda 	#0 							; zero result
.2349	38		sec				sec 								; first time rotate CS in
.234a					_CMTSLoop:
.234a	6a		ror a				ror 	a
.234b	ca		dex				dex
.234c	10 fc		bpl $234a			bpl 	_CMTSLoop
.234e	60		rts				rts
.234f					CMDecodeLayer:
.234f	48		pha				pha 								; save it.
.2350	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2352	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.2355	68		pla				pla 								; get it back
.2356	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2358	f0 02		beq $235c			beq 	_CMDLNotSet
.235a	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.235c					_CMDLNotSet:
.235c	e0 00		cpx #$00			cpx 	#0
.235e	f0 06		beq $2366			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.2360	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2362	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2365	60		rts				rts
.2366					_CMDLayer0:
.2366	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2368	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.236b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.236c					CommandPalette:
.236c	a9 00		lda #$00			lda 	#0
.236e	a2 0c		ldx #$0c		ldx	#12
.2370	20 69 3e	jsr $3e69		jsr	mainHandler
.2373	a2 02		ldx #$02		ldx	#2
.2375	20 69 3e	jsr $3e69		jsr	mainHandler
.2378	a9 01		lda #$01			lda 	#1
.237a	a2 08		ldx #$08		ldx	#8
.237c	20 69 3e	jsr $3e69		jsr	mainHandler
.237f	a5 98		lda $98				lda 	esInt0 					; get palette #
.2381	20 91 23	jsr $2391			jsr 	PointToPaletteA			; point to palette register
.2384	a5 99		lda $99				lda 	esInt0+1
.2386	8d 23 9f	sta $9f23			sta 	$9F23
.2389	a5 a1		lda $a1				lda 	esInt1+1
.238b	29 0f		and #$0f			and 	#$0F
.238d	8d 23 9f	sta $9f23			sta 	$9F23
.2390	60		rts				rts
.2391					PointToPaletteA:
.2391	0a		asl a				asl 	a 							; x 2 -> LSB
.2392	8d 20 9f	sta $9f20			sta 	$9F20
.2395	a9 00		lda #$00			lda 	#0 							; carry into A
.2397	2a		rol a				rol 	a
.2398	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.239a	8d 21 9f	sta $9f21			sta 	$9F21
.239d	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.239f	8d 22 9f	sta $9f22			sta 	$9F22
.23a2	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

=$f800					DefaultFont = $F800
.23a3					Command_Draw:
.23a3	a9 ab		lda #$ab			lda 	#TextHandler & $FF
.23a5	a2 23		ldx #$23			ldx 	#TextHandler >> 8
.23a7	20 d1 18	jsr $18d1			jsr 	GHandler
.23aa	60		rts				rts
.23ab					TextHandler:
.23ab	ad 06 0c	lda $0c06			lda 	gdText+1 					; do we have a string
.23ae	d0 1c		bne $23cc			bne 	_THHasString
.23b0					_THCallRenderer:
.23b0	8a		txa				txa
.23b1	48		pha				pha
.23b2	ad f0 0b	lda $0bf0			lda 	gy2
.23b5	48		pha				pha
.23b6	ad f1 0b	lda $0bf1			lda 	gy2+1
.23b9	48		pha				pha
.23ba	a9 00		lda #$00			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.23bc	a2 24		ldx #$24			ldx 	#BitmapTextAccess >> 8
.23be	20 61 1b	jsr $1b61			jsr 	ImageRenderer
.23c1	68		pla				pla 								; restore y position and x register
.23c2	8d f1 0b	sta $0bf1			sta 	gy2+1
.23c5	68		pla				pla
.23c6	8d f0 0b	sta $0bf0			sta 	gy2
.23c9	68		pla				pla
.23ca	aa		tax				tax
.23cb	60		rts				rts
.23cc					_THHasString:
.23cc	a2 00		ldx #$00			ldx 	#0 							; position in string
.23ce					_THStringLoop:
.23ce	ad 05 0c	lda $0c05			lda 	gdText 						; text => temp0
.23d1	85 2a		sta $2a				sta 	temp0
.23d3	ad 06 0c	lda $0c06			lda 	gdText+1
.23d6	85 2b		sta $2b				sta 	temp0+1
.23d8	8a		txa				txa 								; length = string length.
.23d9	a0 00		ldy #$00			ldy 	#0
.23db	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23dd	f0 20		beq $23ff			beq 	_THExit 					; if so exit.
.23df	e8		inx				inx 								; next character, put in Y
.23e0	8a		txa				txa
.23e1	a8		tay				tay
.23e2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.23e4	8d ff 0b	sta $0bff			sta 	gdImage
.23e7	20 b0 23	jsr $23b0			jsr 	_THCallRenderer 			; render the text
.23ea	ad fe 0b	lda $0bfe			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.23ed	0a		asl a				asl		a
.23ee	0a		asl a				asl 	a
.23ef	0a		asl a				asl 	a
.23f0	18		clc				clc
.23f1	6d ee 0b	adc $0bee			adc 	gX2 						; add to horizontal position
.23f4	8d ee 0b	sta $0bee			sta 	gx2
.23f7	90 d5		bcc $23ce			bcc 	_THStringLoop
.23f9	ee ef 0b	inc $0bef			inc 	gx2+1
.23fc	4c ce 23	jmp $23ce			jmp 	_THStringLoop 				; do the whole lot.
.23ff					_THExit:
.23ff	60		rts				rts
.2400					BitmapTextAccess:
.2400	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.2402	d0 07		bne $240b			bne 	_BTABitmap
.2404	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.2406	a2 08		ldx #$08			ldx 	#8
.2408	a0 08		ldy #$08			ldy 	#8
.240a	60		rts				rts
.240b					_BTABitmap:
.240b	ad ff 0b	lda $0bff			lda 	gdImage 					; Image => temp0:A
.240e	20 12 24	jsr $2412			jsr 	DrawCharacterA
.2411	60		rts				rts
.2412					DrawCharacterA:
.2412	85 2a		sta $2a				sta 	temp0
.2414	a9 00		lda #$00			lda 	#0
.2416	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.2418	2a		rol a				rol 	a
.2419	06 2a		asl $2a				asl 	temp0
.241b	2a		rol a				rol 	a
.241c	06 2a		asl $2a				asl 	temp0
.241e	2a		rol a				rol 	a
.241f	09 f8		ora #$f8			ora 	#DefaultFont >> 8 			; A now points into font table.
.2421	ee 25 9f	inc $9f25			inc 	$9F25 						; alternate port set.
.2424	8d 21 9f	sta $9f21			sta 	$9F21 						; set up address
.2427	a9 10		lda #$10			lda 	#$10
.2429	8d 22 9f	sta $9f22			sta 	$9F22
.242c	84 32		sty $32				sty 	tempShort
.242e	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.2430	05 32		ora $32				ora 	tempShort
.2432	8d 20 9f	sta $9f20			sta 	$9F20 						; address set up.
.2435	ad 24 9f	lda $9f24			lda 	$9F24 						; get bitmap
.2438	ce 25 9f	dec $9f25			dec 	$9F25 						; original port set back
.243b	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.243d	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.243f					_BTADoCache:
.243f	a9 00		lda #$00			lda 	#0
.2441	46 2a		lsr $2a				lsr 	temp0
.2443	90 02		bcc $2447			bcc 	_BTANotSet
.2445	a9 ff		lda #$ff			lda 	#255
.2447					_BTANotSet:
.2447	9d 0e 0c	sta $0c0e,x			sta 	renderCache,x
.244a	ca		dex				dex
.244b	10 f2		bpl $243f			bpl 	_BTADoCache
.244d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.244e					Command_VLoad:
.244e	a9 00		lda #$00			lda 	#0 								; string which is the file name
.2450	a2 0e		ldx #$0e		ldx	#14
.2452	20 69 3e	jsr $3e69		jsr	mainHandler
.2455	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.2457	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.2459	95 98		sta $98,x			sta 	esInt0,x
.245b	a5 36		lda $36				lda 	lowMemory+1
.245d	95 a0		sta $a0,x			sta 	esInt1,x
.245f	a9 00		lda #$00			lda 	#0
.2461	95 a8		sta $a8,x			sta 	esInt2,x
.2463	95 b0		sta $b0,x			sta 	esInt3,x
.2465	a2 0e		ldx #$0e		ldx	#14
.2467	20 f6 14	jsr $14f6		jsr	deviceHandler
.246a	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.246c	85 2a		sta $2a				sta 	temp0
.246e	a5 a1		lda $a1				lda 	esInt1+1
.2470	85 2b		sta $2b				sta 	temp0+1
.2472	20 ee 24	jsr $24ee			jsr 	LoadVRAMFile 					; load the VRAM file in.
.2475	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2476					Command_VPoke:
.2476	38		sec				sec 						; one byte , CS
.2477	b0 01		bcs $247a			bcs 	CmdVideoWrite
.2479					Command_VDoke:
.2479	18		clc				clc 						; two bytes, CC
.247a					CmdVideoWrite:
.247a	08		php				php 						; save one or two btes
.247b	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.247d	a2 0a		ldx #$0a		ldx	#10
.247f	20 69 3e	jsr $3e69		jsr	mainHandler
.2482	a2 02		ldx #$02		ldx	#2
.2484	20 69 3e	jsr $3e69		jsr	mainHandler
.2487	a9 01		lda #$01			lda 	#1
.2489	a2 0a		ldx #$0a		ldx	#10
.248b	20 69 3e	jsr $3e69		jsr	mainHandler
.248e	a2 00		ldx #$00			ldx 	#0
.2490	20 a1 24	jsr $24a1			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2493	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2495	8d 23 9f	sta $9f23			sta 	$9F23
.2498	28		plp				plp 						; if it was Poke then exit
.2499	b0 05		bcs $24a0			bcs 	_CVWExit
.249b	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.249d	8d 23 9f	sta $9f23			sta 	$9F23
.24a0					_CVWExit:
.24a0	60		rts				rts
.24a1					SetUpTOSVRamAddress:
.24a1	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.24a3	29 fe		and #$fe			and 	#$FE
.24a5	15 b0		ora $b0,x			ora 	esInt3,x
.24a7	d0 14		bne $24bd			bne 	CVWValue
.24a9	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.24ab	8d 20 9f	sta $9f20			sta 	$9F20
.24ae	b5 a0		lda $a0,x			lda 	esInt1,x
.24b0	8d 21 9f	sta $9f21			sta	 	$9F21
.24b3	b5 a8		lda $a8,x			lda 	esInt2,x
.24b5	29 01		and #$01			and 	#1
.24b7	09 10		ora #$10			ora 	#$10 				; step 1.
.24b9	8d 22 9f	sta $9f22			sta 	$9F22
.24bc	60		rts				rts
.24bd					CVWValue:
.24bd	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.24bf	20 18 15	jsr $1518		jsr	errorHandler
.24c2					Command_VPeek:
.24c2	38		sec				sec 						; one byte , CS
.24c3	b0 01		bcs $24c6			bcs 	CmdVideoRead
.24c5					Command_VDeek:
.24c5	18		clc				clc 						; two bytes, CC
.24c6					CmdVideoRead:
.24c6	08		php				php 						; save action on stack.
.24c7	48		pha				pha 						; save stack position
.24c8	a2 0a		ldx #$0a		ldx	#10
.24ca	20 69 3e	jsr $3e69		jsr	mainHandler
.24cd	a2 04		ldx #$04		ldx	#4
.24cf	20 69 3e	jsr $3e69		jsr	mainHandler
.24d2	68		pla				pla
.24d3	aa		tax				tax
.24d4	20 a1 24	jsr $24a1			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.24d7	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.24d9	95 a0		sta $a0,x			sta 	esInt1,x
.24db	95 a8		sta $a8,x			sta 	esInt2,x
.24dd	95 b0		sta $b0,x			sta 	esInt3,x
.24df	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.24e2	95 98		sta $98,x			sta 	esInt0,x
.24e4	28		plp				plp 						; check if DOKE (carry was clear)
.24e5	b0 05		bcs $24ec			bcs 	_CVRExit
.24e7	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.24ea	95 a0		sta $a0,x			sta 	esInt1,x
.24ec					_CVRExit:
.24ec	8a		txa				txa 						; return X position.
.24ed	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c60					compressMode:
>0c60							.fill 	1
.0c61					imageInfo:
>0c61							.fill 	X16MaxImages
.0ca1					imageAddr32Low:
>0ca1							.fill  	X16MaxImages
.0ce1					imageAddr32High:
>0ce1							.fill  	X16MaxImages
.24ee					LoadVRAMFile:
.24ee	8a		txa				txa
.24ef	48		pha				pha
.24f0	98		tya				tya
.24f1	48		pha				pha
.24f2					_LVRLoop:
.24f2	20 ce 25	jsr $25ce			jsr 	LVFGet 						; get the next (never access direct)
.24f5	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.24f7	f0 42		beq $253b			beq 	_LVRExit
.24f9	b0 5c		bcs $2557			bcs 	_LVRLoad 					; load data in ?
.24fb	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.24fd	90 11		bcc $2510			bcc 	_LVRSetAddress
.24ff	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2501	f0 3d		beq $2540			beq 	_LVRSetPalette
.2503	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2505	90 2d		bcc $2534			bcc 	_LVRSetCompress
.2507	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2509	90 60		bcc $256b			bcc 	_LVRSetSprite
.250b	a2 01		ldx #$01			ldx 	#ErrorID_missing
.250d	20 18 15	jsr $1518		jsr	errorHandler
.2510					_LVRSetAddress:
.2510	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2512	20 ce 25	jsr $25ce			jsr 	LVFGet
.2515	85 2c		sta $2c				sta 	temp1
.2517	a9 00		lda #$00			lda 	#0
.2519	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.251b	66 2c		ror $2c				ror 	temp1
.251d	6a		ror a				ror		a
.251e	46 2d		lsr $2d				lsr 	temp1+1
.2520	66 2c		ror $2c				ror 	temp1
.2522	6a		ror a				ror		a
.2523	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.2526	a5 2c		lda $2c				lda 	temp1
.2528	8d 21 9f	sta $9f21			sta 	$9F21
.252b	a5 2d		lda $2d				lda 	temp1+1
.252d	09 10		ora #$10			ora 	#$10
.252f	8d 22 9f	sta $9f22			sta 	$9F22
.2532	d0 be		bne $24f2			bne 	_LVRLoop
.2534					_LVRSetCompress:
.2534	29 07		and #$07			and 	#7
.2536	8d 60 0c	sta $0c60			sta 	compressMode
.2539	10 b7		bpl $24f2			bpl 	_LVRLoop
.253b					_LVRExit:
.253b	68		pla				pla
.253c	a8		tay				tay
.253d	68		pla				pla
.253e	aa		tax				tax
.253f	60		rts				rts
.2540					_LVRSetPalette:
.2540	20 ce 25	jsr $25ce			jsr 	LVFGet 						; get palette id.
.2543	20 91 23	jsr $2391			jsr 	PointToPaletteA 			; in palette.asm
.2546	20 ce 25	jsr $25ce			jsr 	LVFGet 						; copy 12 bit palette data in.
.2549	8d 23 9f	sta $9f23			sta 	$9F23
.254c	20 ce 25	jsr $25ce			jsr 	LVFGet
.254f	29 0f		and #$0f			and 	#$0F
.2551	8d 23 9f	sta $9f23			sta 	$9F23
.2554	4c f2 24	jmp $24f2			jmp 	_LVRLoop
.2557					_LVRLoad:
.2557	ae 60 0c	ldx $0c60			ldx 	compressMode
.255a	d0 55		bne $25b1			bne 	_LVRNotMode0
.255c	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.255e					_LVRLCopyX:
.255e	aa		tax				tax
.255f					_LVRLCopy:
.255f	20 ce 25	jsr $25ce			jsr 	LVFGet 						; write to data.
.2562	8d 23 9f	sta $9f23			sta 	$9F23
.2565	ca		dex				dex
.2566	d0 f7		bne $255f			bne 	_LVRLCopy
.2568	4c f2 24	jmp $24f2			jmp 	_LVRLoop
.256b					_LVRSetSprite:
.256b	48		pha				pha 								; save on stack
.256c	20 ce 25	jsr $25ce			jsr 	LVFGet 						; get the sprite number into X
.256f	aa		tax				tax
.2570	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.2572	b0 38		bcs $25ac			bcs 	_LVRSSValue
.2574	68		pla				pla 								; restore the data held in the first byte
.2575	9d 61 0c	sta $0c61,x			sta 	imageInfo,x 				; and write into the sprite image table.
.2578					_LVRAlignVRAM:
.2578	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.257b	29 1f		and #$1f			and 	#$1F
.257d	f0 07		beq $2586			beq 	_LVRAligned
.257f	a9 00		lda #$00			lda 	#$00
.2581	8d 23 9f	sta $9f23			sta 	$9F23
.2584	f0 f2		beq $2578			beq 	_LVRAlignVRAM
.2586					_LVRAligned:
.2586	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.2589	4a		lsr a				lsr 	a 	 						; first halve into temp1
.258a	ad 21 9f	lda $9f21			lda 	$9F21
.258d	6a		ror a				ror 	a
.258e	85 2d		sta $2d				sta 	temp1+1
.2590	ad 20 9f	lda $9f20			lda 	$9F20
.2593	6a		ror a				ror 	a
.2594	85 2c		sta $2c				sta 	temp1
.2596	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2598					_LVRShift:
.2598	46 2d		lsr $2d				lsr 	temp1+1
.259a	66 2c		ror $2c				ror 	temp1
.259c	88		dey				dey
.259d	d0 f9		bne $2598			bne 	_LVRShift
.259f	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.25a1	9d e1 0c	sta $0ce1,x			sta 	imageAddr32High,x
.25a4	a5 2c		lda $2c				lda 	temp1
.25a6	9d a1 0c	sta $0ca1,x			sta 	imageAddr32Low,x
.25a9	4c f2 24	jmp $24f2			jmp 	_LVRLoop
.25ac					_LVRSSValue:
.25ac	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.25ae	20 18 15	jsr $1518		jsr	errorHandler
.25b1					_LVRNotMode0:
.25b1	e0 01		cpx #$01			cpx 	#1
.25b3	d0 15		bne $25ca			bne 	_LVRNotMode1
.25b5	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.25b7	c9 40		cmp #$40			cmp 	#$40
.25b9	90 a3		bcc $255e			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.25bb					_LVRRLEGroup:
.25bb	29 3f		and #$3f			and 	#$3F
.25bd	aa		tax				tax
.25be	20 ce 25	jsr $25ce			jsr 	LVFGet
.25c1					_LVRLEGroupLoop:
.25c1	8d 23 9f	sta $9f23			sta 	$9F23
.25c4	ca		dex				dex
.25c5	d0 fa		bne $25c1			bne 	_LVRLEGroupLoop
.25c7	4c f2 24	jmp $24f2			jmp 	_LVRLoop
.25ca					_LVRNotMode1:
>25ca	db						.byte 	$DB
.25cb	4c ca 25	jmp $25ca			jmp 	_LVRNotMode1
.25ce	84 32		sty $32		LVFGet:	sty 	tempShort
.25d0	a0 00		ldy #$00			ldy 	#0
.25d2	b1 2a		lda ($2a),y			lda 	(temp0),y
.25d4	a4 32		ldy $32				ldy	 	tempShort
.25d6	e6 2a		inc $2a				inc 	temp0
.25d8	d0 02		bne $25dc			bne 	_LVFGExit
.25da	e6 2b		inc $2b				inc 	temp0+1
.25dc					_LVFGExit:
.25dc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.25dd					section_end_extension:
.25dd					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.25dd					floatingpointHandler:
.25dd	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.25df	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.25e2					section_end_floatingpoint:
.25e2					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.25e2					ColdStartEntry:
.25e2	a2 ff		ldx #$ff			ldx 	#$FF
.25e4	9a		txs				txs
.25e5	20 6e 26	jsr $266e			jsr 	ForceStandardMode
.25e8	a2 04		ldx #$04		ldx	#4
.25ea	20 f6 14	jsr $14f6		jsr	deviceHandler
.25ed	a0 ff		ldy #$ff			ldy 	#255
.25ef					_CSBanner:
.25ef	c8		iny				iny
.25f0	b9 16 26	lda $2616,y			lda 	Intro,y
.25f3	f0 14		beq $2609			beq 	_CSStart
.25f5	c9 08		cmp #$08			cmp 	#8
.25f7	90 08		bcc $2601			bcc 	_CSInk
.25f9	a2 16		ldx #$16		ldx	#22
.25fb	20 f6 14	jsr $14f6		jsr	deviceHandler
.25fe	4c ef 25	jmp $25ef			jmp 	_CSBanner
.2601					_CSInk:
.2601	a2 08		ldx #$08		ldx	#8
.2603	20 f6 14	jsr $14f6		jsr	deviceHandler
.2606	4c ef 25	jmp $25ef			jmp 	_CSBanner
.2609					_CSStart:
.2609	a2 16		ldx #$16		ldx	#22
.260b	20 69 3e	jsr $3e69		jsr	mainHandler
.260e	a2 06		ldx #$06		ldx	#6
.2610	20 69 3e	jsr $3e69		jsr	mainHandler
.2613	4c 2e 27	jmp $272e			jmp 	WarmStartEntry
>2616	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>261e	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>262e	20 2a 2a 2a 0d 0d
>2634	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>263c	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>264c	32 30 32 31 0d 0d
>2652	02 42 61 73 69 63 20				.text 	2,"Basic "
>2659	30 2e 32 31					.text "0.21"
>265d	20 28						.text 	" ("
>265f	30 35 2d 41 70 72 2d 32				.text "05-Apr-2021"
>2667	30 32 31
>266a	29 0d 0d 00					.text 	")",13,13,0
.266e					ForceStandardMode:
.266e	a9 fe		lda #$fe			lda 	#$FE
.2670	20 69 18	jsr $1869		jsr	extensionHandler
.2673	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2674					DeleteLine:
.2674	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2677	85 2a		sta $2a				sta 	temp0
.2679	ad c9 0a	lda $0ac9			lda 	basePage+1
.267c	85 2b		sta $2b				sta 	temp0+1
.267e	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.2680	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.2682	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2684	d0 07		bne $268d			bne 	_DLNext
.2686	c8		iny				iny
.2687	a5 a0		lda $a0				lda 	esInt1
.2689	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.268b	f0 06		beq $2693			beq 	_DLFound
.268d	20 b1 26	jsr $26b1	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2690	d0 ec		bne $267e			bne 	_DLLoop
.2692	60		rts				rts
.2693					_DLFound:
.2693	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2695	b1 2a		lda ($2a),y			lda 	(temp0),y
.2697	a8		tay				tay 								; so we copy from (temp0),y
.2698	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.269a					_DLCopyDown:
.269a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.269c	81 2a		sta ($2a,x)			sta 	(temp0,x)
.269e	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.26a0	d0 02		bne $26a4			bne 	_DLNoCarry
.26a2	e6 2b		inc $2b				inc 	temp0+1
.26a4					_DLNoCarry:
.26a4	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.26a6	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.26a8	d0 f0		bne $269a			bne 	_DLCopyDown
.26aa	a5 2b		lda $2b				lda 	temp0+1
.26ac	c5 36		cmp $36				cmp 	lowMemory+1
.26ae	d0 ea		bne $269a			bne 	_DLCopyDown
.26b0	60		rts				rts
.26b1					IAdvanceTemp0:
.26b1	84 32		sty $32				sty 	tempShort
.26b3	18		clc				clc
.26b4	a0 00		ldy #$00			ldy 	#0 							; get offset
.26b6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.26b8	65 2a		adc $2a				adc 	temp0
.26ba	85 2a		sta $2a				sta 	temp0
.26bc	90 02		bcc $26c0			bcc 	_IATNoCarry
.26be	e6 2b		inc $2b				inc 	temp0+1
.26c0					_IATNoCarry:
.26c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.26c2	a4 32		ldy $32				ldy 	tempShort
.26c4	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.26c6	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.26c7					InsertLine:
.26c7	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.26ca	85 2a		sta $2a				sta 	temp0
.26cc	ad c9 0a	lda $0ac9			lda 	basePage+1
.26cf	85 2b		sta $2b				sta 	temp0+1
.26d1					_ILLoop:
.26d1	a0 01		ldy #$01			ldy 	#1
.26d3	b1 2a		lda ($2a),y			lda 	(temp0),y
.26d5	c5 98		cmp $98				cmp 	esInt0
.26d7	c8		iny				iny
.26d8	b1 2a		lda ($2a),y			lda 	(temp0),y
.26da	e5 a0		sbc $a0				sbc 	esInt1
.26dc	b0 05		bcs $26e3			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.26de	20 b1 26	jsr $26b1			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.26e1	d0 ee		bne $26d1			bne 	_ILLoop
.26e3					_ILFound:
.26e3	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.26e5	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.26e7	a5 36		lda $36				lda 	lowMemory+1
.26e9	85 2d		sta $2d				sta 	temp1+1
.26eb	ad 5e 0e	lda $0e5e			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.26ee	18		clc				clc 								; add 3 for the line number and offset.
.26ef	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.26f1	a8		tay				tay
.26f2	a2 00		ldx #$00			ldx 	#0
.26f4	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.26f6	91 2c		sta ($2c),y			sta 	(temp1),y
.26f8	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.26fa	c5 2a		cmp $2a				cmp 	temp0
.26fc	d0 06		bne $2704			bne 	_ILMNext
.26fe	a5 2d		lda $2d				lda 	temp1+1
.2700	c5 2b		cmp $2b				cmp 	temp0+1
.2702	f0 0b		beq $270f			beq 	_ILMCopy
.2704					_ILMNext:
.2704	a5 2c		lda $2c				lda 	temp1
.2706	d0 02		bne $270a			bne 	_ILNoBorrow
.2708	c6 2d		dec $2d				dec 	temp1+1
.270a					_ILNoBorrow:
.270a	c6 2c		dec $2c				dec 	temp1
.270c	4c f4 26	jmp $26f4			jmp 	_ILMove 					; and go round again
.270f					_ILMCopy:
.270f	98		tya				tya 								; Y is the offset of the new line.
.2710	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2712	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2714	a5 98		lda $98				lda 	esInt0
.2716	91 2a		sta ($2a),y			sta 	(temp0),y
.2718	c8		iny				iny
.2719	a5 a0		lda $a0				lda 	esInt1
.271b	91 2a		sta ($2a),y			sta 	(temp0),y
.271d	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.271f					_ILMCopy2:
.271f	b1 28		lda ($28),y			lda 	(codePtr),y
.2721	c8		iny				iny
.2722	c8		iny				iny
.2723	c8		iny				iny
.2724	91 2a		sta ($2a),y			sta 	(temp0),y
.2726	88		dey				dey
.2727	88		dey				dey
.2728	cc 5e 0e	cpy $0e5e			cpy 	tokenBufferIndex
.272b	d0 f2		bne $271f			bne 	_ILMCopy2
.272d	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.272e					WarmStartEntry:
.272e	a2 ff		ldx #$ff			ldx 	#$FF
.2730	9a		txs				txs
.2731	20 6e 26	jsr $266e			jsr 	ForceStandardMode
.2734	a9 02		lda #$02			lda 	#2							; green text.
.2736	a2 08		ldx #$08		ldx	#8
.2738	20 f6 14	jsr $14f6		jsr	deviceHandler
.273b	a2 0c		ldx #$0c		ldx	#12
.273d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2740	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.2742	85 28		sta $28				sta 	codePtr
.2744	a5 2b		lda $2b				lda 	temp0+1
.2746	85 29		sta $29				sta 	codePtr+1
.2748	a2 06		ldx #$06		ldx	#6
.274a	20 f6 14	jsr $14f6		jsr	deviceHandler
.274d	a2 08		ldx #$08		ldx	#8
.274f	20 af 49	jsr $49af		jsr	tokeniserHandler
.2752	c9 00		cmp #$00			cmp 	#0
.2754	f0 25		beq $277b			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2756	a9 5b		lda #$5b			lda 	#(tokenHeader) & $FF
.2758	85 28		sta $28				sta 	codePtr
.275a	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.275c	85 29		sta $29				sta 	1+(codePtr)
.275e	ad 5e 0d	lda $0d5e			lda 	tokenBuffer 				; is it a blank line, go get another line.
.2761	c9 80		cmp #$80			cmp 	#$80
.2763	f0 c9		beq $272e			beq 	WarmStartEntry
.2765	29 c0		and #$c0			and 	#$C0						; does it start with a number
.2767	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.2769	f0 15		beq $2780			beq 	HasLineNumber
.276b	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.276d	8d 5b 0d	sta $0d5b			sta 	tokenHeader 				; fake program line.
.2770	8d 5c 0d	sta $0d5c			sta 	tokenHeader+1
.2773	8d 5d 0d	sta $0d5d			sta 	tokenHeader+2
.2776	a2 18		ldx #$18		ldx	#24
.2778	20 69 3e	jsr $3e69		jsr	mainHandler
.277b					WSEError:
.277b	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.277d	20 18 15	jsr $1518		jsr	errorHandler
.2780					HasLineNumber:
.2780	a0 03		ldy #$03			ldy 	#3 							; get line number
.2782	a9 00		lda #$00			lda 	#0
.2784	a2 0a		ldx #$0a		ldx	#10
.2786	20 69 3e	jsr $3e69		jsr	mainHandler
.2789	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.278b	05 b0		ora $b0				ora 	esInt3
.278d	d0 ec		bne $277b			bne 	WSEError
.278f	98		tya				tya 								; make codePtr point to code after the line number.
.2790	18		clc				clc 								; by skipping over the tokenised number.
.2791	65 28		adc $28				adc 	codePtr
.2793	85 28		sta $28				sta 	codePtr
.2795	90 02		bcc $2799			bcc		_HLNNoCarry
.2797	e6 29		inc $29				inc 	codePtr+1
.2799					_HLNNoCarry:
.2799	98		tya				tya 								; subtract that offset from the code buffer index
.279a	38		sec				sec
.279b	49 ff		eor #$ff			eor 	#$FF
.279d	6d 5e 0e	adc $0e5e			adc 	tokenBufferIndex
.27a0	18		clc				clc 								; add space allowing for header & $80 trailer
.27a1	69 04		adc #$04			adc 	#4
.27a3	8d 5e 0e	sta $0e5e			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.27a6	20 74 26	jsr $2674			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.27a9					_HLNNoDelete:
.27a9	ad 5e 0e	lda $0e5e			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.27ac	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.27ae	f0 0c		beq $27bc			beq 	_HLMEditDone
.27b0	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.27b2	18		clc				clc 								; workspace (1k)
.27b3	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.27b5	c5 34		cmp $34				cmp 	highMemory+1
.27b7	b0 0b		bcs $27c4			bcs 	_HLMMemory 					; nope, won't allowit.
.27b9	20 c7 26	jsr $26c7			jsr 	InsertLine 					; insert the line in
.27bc					_HLMEditDone:
.27bc	a2 06		ldx #$06		ldx	#6
.27be	20 69 3e	jsr $3e69		jsr	mainHandler
.27c1	4c 2e 27	jmp $272e			jmp 	WarmStartEntry
.27c4					_HLMMemory:
.27c4	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.27c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.27c9					interactionHandler:
.27c9	7c cc 27	jmp ($27cc,x)			jmp 	(interactionVectors,x)
.27cc					interactionVectors:
>27cc	d2 27					.word _DummyControlHandler ; index 0
>27ce	e2 25					.word ColdStartEntry       ; index 2
>27d0	2e 27					.word WarmStartEntry       ; index 4
.27d2					_DummyControlHandler:
.27d2	60		rts			rts

;******  Return to file: basic.asm

.27d3					section_end_interaction:
.27d3					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d21					dataPtr:
>0d21							.fill 	2
.0d23					dataIndex:
>0d23							.fill 	1
.27d3					CommandRead:
.27d3	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.27d5	20 1c 37	jsr $371c			jsr 	EvaluateReference
.27d8	20 19 28	jsr $2819			jsr 	SwapDPCP 					; use the data pointer.
.27db	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.27dd	c8		iny				iny
.27de	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.27e0	f0 07		beq $27e9			beq 	_CRInData
.27e2	88		dey				dey
.27e3	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.27e5	aa		tax				tax
.27e6	20 1a 2f	jsr $2f1a			jsr 	ScanForward
.27e9					_CRInData:
.27e9	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.27eb	20 c4 36	jsr $36c4			jsr 	Evaluate
.27ee	ca		dex				dex 								; and write the value.
.27ef	20 6d 2a	jsr $2a6d			jsr 	WriteValue
.27f2	20 19 28	jsr $2819			jsr 	SwapDPCP 					; get the code pointer back.
.27f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.27f7	c8		iny				iny
.27f8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.27fa	f0 d7		beq $27d3			beq 	CommandRead
.27fc	88		dey				dey
.27fd	60		rts				rts
.27fe					CommandData:
.27fe	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2800	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2802	20 1a 2f	jsr $2f1a			jsr 	ScanForward
.2805	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2806	60		rts				rts
.2807					CommandRestore:
.2807	ad c8 0a	lda $0ac8			lda 	basePage
.280a	8d 21 0d	sta $0d21			sta 	dataPtr
.280d	ad c9 0a	lda $0ac9			lda 	basePage+1
.2810	8d 22 0d	sta $0d22			sta 	dataPtr+1
.2813	a9 03		lda #$03			lda 	#3
.2815	8d 23 0d	sta $0d23			sta 	dataIndex
.2818	60		rts				rts
.2819					SwapDPCP:
.2819	8a		txa				txa
.281a	48		pha				pha
.281b	98		tya				tya 								; swap Y, DataIndex
.281c	ac 23 0d	ldy $0d23			ldy 	DataIndex
.281f	8d 23 0d	sta $0d23			sta 	DataIndex
.2822	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2824	ae 21 0d	ldx $0d21			ldx 	dataptr
.2827	8d 21 0d	sta $0d21			sta 	dataPtr
.282a	86 28		stx $28				stx 	codePtr
.282c	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.282e	ae 22 0d	ldx $0d22			ldx 	dataptr+1
.2831	8d 22 0d	sta $0d22			sta 	dataPtr+1
.2834	86 29		stx $29				stx 	codePtr+1
.2836	68		pla				pla
.2837	aa		tax				tax
.2838	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.2839					CommandGOSUB:
.2839	20 e1 36	jsr $36e1			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.283c	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.283e	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2840	20 16 3e	jsr $3e16			jsr 	RSClaim
.2843	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2845	20 42 3e	jsr $3e42			jsr 	RSSavePosition
.2848	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.284a	f0 1b		beq $2867			beq 	GotoTOS 					; and do a GOTO there.
.284c					CommandRETURN:
.284c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.284e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2850	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2852	f0 05		beq $2859			beq 	_isok
.2854	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2856	20 18 15	jsr $1518		jsr	errorHandler
.2859					_isok:
.2859	a9 01		lda #$01			lda 	#1
.285b	20 55 3e	jsr $3e55			jsr 	RSLoadPosition 				; reload the position from offset 1.
.285e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2860	20 38 3e	jsr $3e38			jsr 	RSFree
.2863	60		rts				rts
.2864					CommandGOTO:
.2864	20 e1 36	jsr $36e1			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2867					GotoTOS:
.2867	20 00 32	jsr $3200			jsr 	ResetCodeAddress 			; simple search.
.286a					_GotoSearch:
.286a	a0 00		ldy #$00			ldy 	#0 							; get offset
.286c	b1 28		lda ($28),y			lda 	(codePtr),y
.286e	f0 21		beq $2891			beq 	_GotoError 					; not found.
.2870	c8		iny				iny									; check LSB match
.2871	b1 28		lda ($28),y			lda 	(codePtr),y
.2873	d5 98		cmp $98,x			cmp 	esInt0,x
.2875	d0 07		bne $287e			bne 	_GotoNext
.2877	c8		iny				iny
.2878	b1 28		lda ($28),y			lda 	(codePtr),y
.287a	d5 a0		cmp $a0,x			cmp 	esInt1,x
.287c	f0 10		beq $288e			beq 	_GotoFound
.287e					_GotoNext:
.287e	a0 00		ldy #$00			ldy 	#0 							; go next line
.2880	b1 28		lda ($28),y			lda 	(codePtr),y
.2882	18		clc				clc
.2883	65 28		adc $28				adc 	codePtr
.2885	85 28		sta $28				sta 	codePtr
.2887	90 e1		bcc $286a			bcc 	_GotoSearch
.2889	e6 29		inc $29				inc 	codePtr+1
.288b	4c 6a 28	jmp $286a			jmp 	_GotoSearch
.288e					_GotoFound:
.288e	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2890	60		rts				rts
.2891					_GotoError:
.2891	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2893	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0d24					InputBuffer:
>0d24							.fill 	MaxInputSize+1
.2896					Command_Input:
.2896	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2898	c8		iny				iny
.2899	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.289b	f0 f9		beq $2896			beq 	Command_Input
.289d	88		dey				dey 							; undo consume
.289e	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.28a0	f0 54		beq $28f6			beq 	_CIExit 				; : or EOL, exit
.28a2	c9 80		cmp #$80			cmp 	#TOK_EOL
.28a4	f0 50		beq $28f6			beq 	_CIExit
.28a6	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.28a8	90 12		bcc $28bc			bcc 	_CIVariable
.28aa	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.28ac	d0 43		bne $28f1			bne 	_CISyntax
.28ae	a2 00		ldx #$00			ldx 	#0
.28b0	20 d8 36	jsr $36d8			jsr 	EvaluateString 			; evaluate and print string
.28b3	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0
.28b6	20 c5 29	jsr $29c5			jsr 	PrintString
.28b9	4c 96 28	jmp $2896			jmp 	Command_Input
.28bc					_CIVariable:
.28bc	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.28be	20 1c 37	jsr $371c			jsr 	EvaluateReference  		; this is where its going
.28c1					_CIRetry:
.28c1	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.28c3	a2 14		ldx #$14		ldx	#20
.28c5	20 f6 14	jsr $14f6		jsr	deviceHandler
.28c8	98		tya				tya
.28c9	48		pha				pha
.28ca	20 0a 29	jsr $290a			jsr 	InputString 			; input a string (manually)
.28cd	a2 01		ldx #$01			ldx 	#1
.28cf	20 f7 28	jsr $28f7			jsr 	BufferToStackX 			; make stack,x ref input string.
.28d2	a5 90		lda $90				lda 	esType 					; if target type numeric
.28d4	29 40		and #$40			and 	#$40 					; then convert to number
.28d6	d0 11		bne $28e9			bne 	_CIWrite
.28d8	a2 01		ldx #$01			ldx 	#1
.28da	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.28dd	a9 0a		lda #$0a			lda 	#10
.28df	20 e9 3b	jsr $3be9			jsr 	MInt32FromString 		; convert it back from a string.
.28e2	68		pla				pla
.28e3	a8		tay				tay
.28e4	b0 03		bcs $28e9			bcs 	_CIWrite 				; successfully converted.
.28e6	18		clc				clc 							; default fail FP conversion
.28e7	90 d8		bcc $28c1			bcc		_CIRetry				; failed, try again.
.28e9					_CIWrite:
.28e9	a2 00		ldx #$00			ldx 	#0
.28eb	20 6d 2a	jsr $2a6d			jsr 	WriteValue
.28ee	4c 96 28	jmp $2896			jmp 	Command_Input
.28f1					_CISyntax:
.28f1	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.28f3	20 18 15	jsr $1518		jsr	errorHandler
.28f6					_CIExit:
.28f6	60		rts				rts
.28f7					BufferToStackX:
.28f7	a9 24		lda #$24			lda 	#InputBuffer & $FF
.28f9	95 98		sta $98,x			sta 	esInt0,x
.28fb	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.28fd	95 a0		sta $a0,x			sta 	esInt1,x
.28ff	a9 00		lda #$00			lda 	#0
.2901	95 a8		sta $a8,x			sta 	esInt2,x
.2903	95 b0		sta $b0,x			sta 	esInt3,x
.2905	a9 40		lda #$40			lda 	#$40
.2907	95 90		sta $90,x			sta 	esType,x
.2909	60		rts				rts
.290a					InputString:
.290a	a9 00		lda #$00			lda 	#0
.290c	8d 24 0d	sta $0d24			sta 	InputBuffer
.290f					_InputLoop:
.290f	a2 02		ldx #$02		ldx	#2
.2911	20 f6 14	jsr $14f6		jsr	deviceHandler
.2914	a2 0a		ldx #$0a		ldx	#10
.2916	20 f6 14	jsr $14f6		jsr	deviceHandler
.2919	c9 00		cmp #$00			cmp 	#0
.291b	f0 f2		beq $290f			beq 	_InputLoop
.291d	c9 08		cmp #$08			cmp 	#8
.291f	f0 19		beq $293a			beq 	_InputBackspace
.2921	c9 0d		cmp #$0d			cmp 	#13
.2923	f0 21		beq $2946			beq 	_InputExit
.2925	ae 24 0d	ldx $0d24			ldx 	InputBuffer
.2928	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.292a	f0 e3		beq $290f			beq 	_InputLoop
.292c	9d 25 0d	sta $0d25,x			sta 	InputBuffer+1,x 		; write char
.292f	ee 24 0d	inc $0d24			inc 	InputBuffer 			; advance count.
.2932					_InputPrintLoop:
.2932	a2 14		ldx #$14		ldx	#20
.2934	20 f6 14	jsr $14f6		jsr	deviceHandler
.2937	4c 0f 29	jmp $290f			jmp	 	_InputLoop
.293a					_InputBackspace:
.293a	ad 24 0d	lda $0d24			lda 	InputBuffer 			; at start
.293d	f0 d0		beq $290f			beq 	_InputLoop
.293f	ce 24 0d	dec $0d24			dec 	InputBuffer
.2942	a9 08		lda #$08			lda 	#8
.2944	d0 ec		bne $2932			bne 	_InputPrintLoop
.2946					_InputExit:
.2946	a2 06		ldx #$06		ldx	#6
.2948	20 f6 14	jsr $14f6		jsr	deviceHandler
.294b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d45					lastPrintToken:
>0d45							.fill 	1
.294c					Command_Print:
.294c	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.294e	8d 45 0d	sta $0d45			sta 	lastPrintToken
.2951	88		dey				dey
.2952					_PrintLoopSkip:
.2952	c8		iny				iny
.2953					_PrintLoop:
.2953	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2955	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2957	f0 5b		beq $29b4			beq 	_PrintExit
.2959	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.295b	f0 57		beq $29b4			beq 	_PrintExit
.295d	8d 45 0d	sta $0d45			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2960	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2962	f0 ee		beq $2952			beq 	_PrintLoopSkip
.2964	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2966	f0 3c		beq $29a4			beq	 	_PrintNewLine
.2968	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.296a	f0 40		beq $29ac			beq 	_PrintTab
.296c	20 c2 36	jsr $36c2			jsr 	EvaluateRoot 				; evaluate something at the root
.296f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2971	85 2a		sta $2a				sta 	temp0
.2973	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2975	85 2b		sta $2b				sta 	1+(temp0)
.2977	a5 90		lda $90				lda 	esType 						; get type
.2979	f0 15		beq $2990			beq		_PrintInteger
.297b	4a		lsr a				lsr 	a 							; check for floating point
.297c	b0 08		bcs $2986			bcs 	_PrintFloat
.297e					_PrintString:
.297e	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2980	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0
.2983	4c 9e 29	jmp $299e			jmp 	_PrintTemp0 				; print no leading space.
.2986					_PrintFloat:
.2986	a9 00		lda #$00			lda 	#0 							; stack level.
.2988	a2 16		ldx #$16		ldx	#22
.298a	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.298d	4c 97 29	jmp $2997			jmp 	_PrintSpaceTemp0
.2990					_PrintInteger:
.2990	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2992	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2994	20 d1 3c	jsr $3cd1			jsr 	MInt32ToString				; convert to text
.2997					_PrintSpaceTemp0:
.2997	a9 20		lda #$20			lda 	#32
.2999	a2 14		ldx #$14		ldx	#20
.299b	20 f6 14	jsr $14f6		jsr	deviceHandler
.299e					_PrintTemp0:
.299e	20 c5 29	jsr $29c5			jsr 	PrintString
.29a1	4c 53 29	jmp $2953			jmp 	_PrintLoop
.29a4					_PrintNewLine:
.29a4	a2 06		ldx #$06		ldx	#6
.29a6	20 f6 14	jsr $14f6		jsr	deviceHandler
.29a9	4c 52 29	jmp $2952			jmp 	_PrintLoopSkip
.29ac					_PrintTab:
.29ac	a2 1a		ldx #$1a		ldx	#26
.29ae	20 f6 14	jsr $14f6		jsr	deviceHandler
.29b1	4c 52 29	jmp $2952			jmp 	_PrintLoopSkip
.29b4					_PrintExit:
.29b4	ad 45 0d	lda $0d45			lda		lastPrintToken 				; check last token
.29b7	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.29b9	f0 09		beq $29c4			beq 	_PrintExit2
.29bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.29bd	f0 05		beq $29c4			beq 	_PrintExit2
.29bf	a2 06		ldx #$06		ldx	#6
.29c1	20 f6 14	jsr $14f6		jsr	deviceHandler
.29c4					_PrintExit2:
.29c4	60		rts				rts
.29c5					PrintString:
.29c5	8a		txa				txa
.29c6	48		pha				pha
.29c7	98		tya				tya
.29c8	48		pha				pha
.29c9	a0 00		ldy #$00			ldy 	#0							; get length
.29cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.29cd	aa		tax				tax 								; into X
.29ce	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.29d0	f0 10		beq $29e2			beq 	_PSExit
.29d2	ca		dex				dex
.29d3	8a		txa				txa
.29d4	48		pha				pha
.29d5	c8		iny				iny
.29d6	b1 2a		lda ($2a),y			lda 	(temp0),y
.29d8	a2 14		ldx #$14		ldx	#20
.29da	20 f6 14	jsr $14f6		jsr	deviceHandler
.29dd	68		pla				pla
.29de	aa		tax				tax
.29df	4c ce 29	jmp $29ce			jmp 	_PSLoop
.29e2					_PSExit:
.29e2	68		pla				pla
.29e3	a8		tay				tay
.29e4	68		pla				pla
.29e5	aa		tax				tax
.29e6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.29e7					Command_CLS:
.29e7	a2 04		ldx #$04		ldx	#4
.29e9	20 f6 14	jsr $14f6		jsr	deviceHandler
.29ec	60		rts				rts
.29ed					Command_Ink:
.29ed	a2 00		ldx #$00			ldx 	#0
.29ef	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger
.29f2	a2 08		ldx #$08		ldx	#8
.29f4	20 f6 14	jsr $14f6		jsr	deviceHandler
.29f7	60		rts				rts
.29f8					Command_Paper:
.29f8	a2 00		ldx #$00			ldx 	#0
.29fa	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger
.29fd	a2 12		ldx #$12		ldx	#18
.29ff	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a02	60		rts				rts
.2a03					Command_Locate:
.2a03	a2 00		ldx #$00			ldx 	#0
.2a05	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger
.2a08	20 fb 3d	jsr $3dfb			jsr 	CheckComma
.2a0b	e8		inx				inx
.2a0c	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger
.2a0f	98		tya				tya
.2a10	48		pha				pha
.2a11	a4 99		ldy $99				ldy 	esInt0+1
.2a13	a5 98		lda $98				lda 	esInt0
.2a15	a2 10		ldx #$10		ldx	#16
.2a17	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a1a	68		pla				pla
.2a1b	a8		tay				tay
.2a1c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2a1d					Command_VDU:
.2a1d	20 e1 36	jsr $36e1			jsr 	EvaluateRootInteger 			; get integer at root.
.2a20	a5 98		lda $98				lda 	esInt0
.2a22	a2 14		ldx #$14		ldx	#20
.2a24	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a27					_CVNext:
.2a27	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2a29	c8		iny				iny
.2a2a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2a2c	f0 ef		beq $2a1d			beq 	Command_VDU
.2a2e	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2a30	d0 0a		bne $2a3c			bne 	_CVExit
.2a32	a5 a0		lda $a0				lda 	esInt1
.2a34	a2 14		ldx #$14		ldx	#20
.2a36	20 f6 14	jsr $14f6		jsr	deviceHandler
.2a39	4c 27 2a	jmp $2a27			jmp 	_CVNext
.2a3c	88		dey		_CVExit:dey
.2a3d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2a3e					Command_Assert:
.2a3e	20 e1 36	jsr $36e1			jsr 	EvaluateRootInteger 		; what is being asserted.
.2a41	20 a2 3d	jsr $3da2			jsr 	MInt32Zero 					; is it true ?
.2a44	f0 01		beq $2a47			beq 	_CAError
.2a46	60		rts				rts
.2a47					_CAError:
.2a47	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2a49	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2a4c					Command_Dim:
.2a4c	a2 04		ldx #$04		ldx	#4
.2a4e	20 80 4d	jsr $4d80		jsr	variableHandler
.2a51	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2a53	c8		iny				iny
.2a54	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2a56	f0 f4		beq $2a4c			beq 	Command_Dim
.2a58	88		dey				dey 								; unpick get
.2a59	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2a5a					CommandLet:
.2a5a	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2a5c	20 1c 37	jsr $371c			jsr 	EvaluateReference
.2a5f	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2a61	20 e3 3d	jsr $3de3			jsr 	CheckToken
.2a64	e8		inx				inx 								; do RHS
.2a65	20 c4 36	jsr $36c4			jsr 	Evaluate 					; evaluate and dereference
.2a68	ca		dex				dex
.2a69	20 6d 2a	jsr $2a6d			jsr 	WriteValue 					; write it out
.2a6c	60		rts				rts
.2a6d					WriteValue:
.2a6d	98		tya				tya
.2a6e	48		pha				pha
.2a6f	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2a72	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2a74	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2a76	29 40		and #$40			and 	#$40
.2a78	d0 50		bne $2aca			bne		_WVType
.2a7a	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2a7c	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2a7e	29 40		and #$40			and 	#$40
.2a80	d0 1f		bne $2aa1			bne 	_WVCopyString
.2a82	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2a84	15 91		ora $91,x			ora 	esType+1,x
.2a86	4a		lsr a				lsr 	a
.2a87	90 22		bcc $2aab			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2a89	b5 90		lda $90,x			lda 	esType,x
.2a8b	4a		lsr a				lsr 	a
.2a8c	90 3c		bcc $2aca			bcc 	_WVType
.2a8e	e8		inx				inx 								; force the value being written to be a float.
.2a8f	20 26 33	jsr $3326			jsr 	BPMakeFloat
.2a92	ca		dex				dex
.2a93	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0 					; set Temp0 to write address
.2a96	e8		inx				inx
.2a97	8a		txa				txa
.2a98	a2 22		ldx #$22		ldx	#34
.2a9a	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.2a9d	aa		tax				tax
.2a9e	4c c7 2a	jmp $2ac7			jmp 	_WVCopyExit
.2aa1					_WVCopyString:
.2aa1	8a		txa				txa
.2aa2	a2 10		ldx #$10		ldx	#16
.2aa4	20 26 41	jsr $4126		jsr	stringHandler
.2aa7	aa		tax				tax
.2aa8	4c c7 2a	jmp $2ac7			jmp 	_WVCopyExit
.2aab					_WVCopyData4:
.2aab	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2aad	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2aaf	d0 10		bne $2ac1			bne 	_WVCopyData1
.2ab1	a0 03		ldy #$03			ldy 	#3
.2ab3	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2ab5	91 2a		sta ($2a),y			sta 	(temp0),y
.2ab7	88		dey				dey
.2ab8	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2aba	91 2a		sta ($2a),y			sta 	(temp0),y
.2abc	88		dey				dey
.2abd	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2abf	91 2a		sta ($2a),y			sta 	(temp0),y
.2ac1					_WVCopyData1:
.2ac1	a0 00		ldy #$00			ldy 	#0
.2ac3	b5 99		lda $99,x			lda 	esInt0+1,x
.2ac5	91 2a		sta ($2a),y			sta 	(temp0),y
.2ac7					_WVCopyExit:
.2ac7	68		pla				pla
.2ac8	a8		tay				tay
.2ac9	60		rts				rts
.2aca					_WVType:
.2aca	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2acc	20 18 15	jsr $1518		jsr	errorHandler
.2acf					TOSToTemp0:
.2acf	b5 98		lda $98,x			lda 	esInt0,x
.2ad1	85 2a		sta $2a				sta 	temp0
.2ad3	b5 a0		lda $a0,x			lda 	esInt1,x
.2ad5	85 2b		sta $2b				sta 	temp0+1
.2ad7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2ad8					Command_Poke:
.2ad8	a9 01		lda #$01			lda 	#1
.2ada	d0 06		bne $2ae2			bne 	PokeGeneral
.2adc					Command_Doke:
.2adc	a9 02		lda #$02			lda 	#2
.2ade	d0 02		bne $2ae2			bne 	PokeGeneral
.2ae0					Command_Loke:
.2ae0	a9 03		lda #$03			lda 	#3
.2ae2					PokeGeneral:
.2ae2	48		pha				pha 								; save id (PDL = 123)
.2ae3	20 e1 36	jsr $36e1			jsr 	EvaluateRootInteger 		; target address
.2ae6	20 fb 3d	jsr $3dfb			jsr	 	CheckComma
.2ae9	e8		inx				inx
.2aea	20 e3 36	jsr $36e3			jsr 	EvaluateInteger 			; what value to POKE ?
.2aed	ca		dex				dex
.2aee	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0 					; temp0 points to the target address
.2af1	84 32		sty $32				sty 	tempShort 					; save Y
.2af3	68		pla				pla 								; get copy type (1-3) and dispatch
.2af4	aa		tax				tax
.2af5	ca		dex				dex
.2af6	f0 14		beq $2b0c			beq 	_Poke1
.2af8	ca		dex				dex
.2af9	f0 0b		beq $2b06			beq 	_Poke2
.2afb	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2afd	a5 b1		lda $b1				lda 	esInt3+1
.2aff	91 2a		sta ($2a),y			sta 	(temp0),y
.2b01	88		dey				dey
.2b02	a5 a9		lda $a9				lda 	esInt2+1
.2b04	91 2a		sta ($2a),y			sta 	(temp0),y
.2b06					_Poke2:
.2b06	a0 01		ldy #$01			ldy 	#1
.2b08	a5 a1		lda $a1				lda 	esInt1+1
.2b0a	91 2a		sta ($2a),y			sta 	(temp0),y
.2b0c					_Poke1:
.2b0c	a0 00		ldy #$00			ldy 	#0
.2b0e	a5 99		lda $99				lda 	esInt0+1
.2b10	91 2a		sta ($2a),y			sta 	(temp0),y
.2b12	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2b14	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2b15					Command_Rem:
.2b15					Command_Rem2:
.2b15	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2b17	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2b19	d0 06		bne $2b21			bne 	_CRNotString
.2b1b	c8		iny				iny
.2b1c	98		tya				tya
.2b1d	38		sec				sec
.2b1e	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2b20	a8		tay				tay
.2b21					_CRNotString:
.2b21	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2b22					CommandStop:
.2b22	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2b24	20 18 15	jsr $1518		jsr	errorHandler
.2b27					CommandEnd:
.2b27	4c 64 3e	jmp $3e64			jmp 	WarmStart
.2b2a					CommandXemu:
.2b2a	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2b2d					AdvanceNextLine:
.2b2d	a0 00		ldy #$00			ldy 	#0 							; get offset
.2b2f	b1 28		lda ($28),y			lda 	(codePtr),y
.2b31	18		clc				clc 								; add to codePtr
.2b32	65 28		adc $28				adc 	codePtr
.2b34	85 28		sta $28				sta 	codePtr
.2b36	90 02		bcc $2b3a			bcc 	_ANLNoCarry
.2b38	e6 29		inc $29				inc 	codePtr+1
.2b3a					_ANLNoCarry:
.2b3a	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2b3c	f0 e9		beq $2b27			beq 	CommandEnd 					; execute END
.2b3e	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2b40	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2b41					Command_FOR:
.2b41	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2b43	a2 0b		ldx #$0b			ldx 	#11
.2b45	20 16 3e	jsr $3e16			jsr 	RSClaim
.2b48	20 5a 2a	jsr $2a5a			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2b4b	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2b4d	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2b4f	d0 4c		bne $2b9d			bne 	_CFType
.2b51	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2b53	20 e3 3d	jsr $3de3			jsr 	CheckToken
.2b56	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2b58	20 e3 36	jsr $36e3			jsr 	EvaluateInteger				; get terminal value in stack 1
.2b5b	98		tya				tya
.2b5c	48		pha				pha
.2b5d	a0 04		ldy #$04			ldy 	#4
.2b5f	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2b61	91 37		sta ($37),y			sta 	(rsPointer),y
.2b63	c8		iny				iny
.2b64	a5 a0		lda $a0				lda		esInt1
.2b66	91 37		sta ($37),y			sta 	(rsPointer),y
.2b68	c8		iny				iny
.2b69	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2b6b	91 37		sta ($37),y			sta 	(rsPointer),y
.2b6d	c8		iny				iny
.2b6e	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2b70	91 37		sta ($37),y			sta 	(rsPointer),y
.2b72	c8		iny				iny
.2b73	a5 a1		lda $a1				lda		esInt1+1
.2b75	91 37		sta ($37),y			sta 	(rsPointer),y
.2b77	c8		iny				iny
.2b78	a5 a9		lda $a9				lda		esInt2+1
.2b7a	91 37		sta ($37),y			sta 	(rsPointer),y
.2b7c	c8		iny				iny
.2b7d	a5 b1		lda $b1				lda		esInt3+1
.2b7f	91 37		sta ($37),y			sta 	(rsPointer),y
.2b81	68		pla				pla
.2b82	a8		tay				tay
.2b83	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2b85	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2b87	d0 0e		bne $2b97			bne 	_CFDone
.2b89	c8		iny				iny									; skip over step.
.2b8a	20 e3 36	jsr $36e3			jsr 	EvaluateInteger 			; get step
.2b8d	98		tya				tya
.2b8e	48		pha				pha
.2b8f	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2b91	a0 06		ldy #$06			ldy 	#6
.2b93	91 37		sta ($37),y			sta 	(rsPointer),y
.2b95	68		pla				pla
.2b96	a8		tay				tay
.2b97					_CFDone:
.2b97	a9 01		lda #$01			lda 	#1
.2b99	20 42 3e	jsr $3e42			jsr 	RSSavePosition 				; save position.
.2b9c	60		rts				rts
.2b9d					_CFType:
.2b9d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b9f	20 18 15	jsr $1518		jsr	errorHandler
.2ba2					Command_NEXT:
.2ba2	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2ba4	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ba6	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2ba8	f0 05		beq $2baf			beq 	_isok
.2baa	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2bac	20 18 15	jsr $1518		jsr	errorHandler
.2baf					_isok:
.2baf	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2bb1	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2bb3	b0 18		bcs $2bcd			bcs 	_CNNoIndex
.2bb5	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2bb7	20 1c 37	jsr $371c			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2bba	98		tya				tya
.2bbb	48		pha				pha
.2bbc	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2bbe	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bc0	d5 98		cmp $98,x			cmp 	esInt0,x
.2bc2	d0 76		bne $2c3a			bne 	_CNBadIndex
.2bc4	c8		iny				iny
.2bc5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bc7	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2bc9	d0 6f		bne $2c3a			bne 	_CNBadIndex
.2bcb	68		pla				pla
.2bcc	a8		tay				tay
.2bcd					_CNNoIndex:
.2bcd	98		tya				tya
.2bce	48		pha				pha
.2bcf	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2bd1	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bd3	85 2a		sta $2a				sta 	temp0
.2bd5	c8		iny				iny
.2bd6	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bd8	85 2b		sta $2b				sta 	temp0+1
.2bda	c8		iny				iny
.2bdb	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2bdd	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2bdf	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2be1	10 01		bpl $2be4			bpl 	_CNSignX
.2be3	ca		dex				dex  								; X = $FF
.2be4					_CNSignX:
.2be4	18		clc				clc 								; add to the LSB
.2be5	a0 00		ldy #$00			ldy 	#0
.2be7	71 2a		adc ($2a),y			adc 	(temp0),y
.2be9	91 2a		sta ($2a),y			sta 	(temp0),y
.2beb					_CNPropogate:
.2beb	c8		iny				iny  								; add the sign extended in X to the rest.
.2bec	8a		txa				txa
.2bed	71 2a		adc ($2a),y			adc 	(temp0),y
.2bef	91 2a		sta ($2a),y			sta 	(temp0),y
.2bf1	c8		iny				iny
.2bf2	8a		txa				txa
.2bf3	71 2a		adc ($2a),y			adc 	(temp0),y
.2bf5	91 2a		sta ($2a),y			sta 	(temp0),y
.2bf7	c8		iny				iny
.2bf8	8a		txa				txa
.2bf9	71 2a		adc ($2a),y			adc 	(temp0),y
.2bfb	91 2a		sta ($2a),y			sta 	(temp0),y
.2bfd	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2bfe	a5 37		lda $37				lda 	rsPointer
.2c00	69 07		adc #$07			adc 	#7
.2c02	85 2c		sta $2c				sta 	temp1
.2c04	a9 00		lda #$00			lda 	#0
.2c06	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2c08	a8		tay				tay 								; and clear the Y register again.
.2c09	65 38		adc $38				adc 	rsPointer+1
.2c0b	85 2d		sta $2d				sta 	temp1+1
.2c0d	38		sec				sec 								; calculate current - limit oring interim values.
.2c0e	20 46 2c	jsr $2c46			jsr 	_CNCompare 					; each of these does a byte.
.2c11	20 46 2c	jsr $2c46			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2c14	20 46 2c	jsr $2c46			jsr 	_CNCompare 					; and the carry of the subtraction.
.2c17	20 46 2c	jsr $2c46			jsr 	_CNCompare
.2c1a	50 02		bvc $2c1e			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2c1c	49 80		eor #$80			eor 	#$80
.2c1e					_CNNoOverflow:
.2c1e	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2c20	30 1d		bmi $2c3f			bmi 	_CNCheckDownto
.2c22	c9 00		cmp #$00			cmp 	#0
.2c24	30 0c		bmi $2c32			bmi 	_CNLoopRound 				; loop round if < =
.2c26	a5 2e		lda $2e				lda 	temp2
.2c28	f0 08		beq $2c32			beq 	_CNLoopRound
.2c2a					_CNLoopExit:
.2c2a	68		pla				pla
.2c2b	a8		tay				tay
.2c2c	a9 0b		lda #$0b			lda 	#11
.2c2e	20 38 3e	jsr $3e38			jsr 	RSFree
.2c31	60		rts				rts
.2c32					_CNLoopRound:
.2c32	68		pla				pla
.2c33	a8		tay				tay
.2c34	a9 01		lda #$01			lda 	#1
.2c36	20 55 3e	jsr $3e55			jsr 	RSLoadPosition				; go back to the loop top
.2c39	60		rts				rts
.2c3a					_CNBadIndex:
.2c3a	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2c3c	20 18 15	jsr $1518		jsr	errorHandler
.2c3f					_CNCheckDownto:
.2c3f	c9 00		cmp #$00			cmp 	#0
.2c41	10 ef		bpl $2c32			bpl 	_CNLoopRound
.2c43	4c 2a 2c	jmp $2c2a			jmp 	_CNLoopExit
.2c46					_CNCompare:
.2c46	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2c48	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2c4a	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2c4c	85 2e		sta $2e				sta 	temp2
.2c4e	c8		iny				iny
.2c4f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2c50					CommandIf:
.2c50	20 e1 36	jsr $36e1			jsr 	EvaluateRootInteger 		; get what's being tested.
.2c53	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2c55	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2c57	f0 04		beq $2c5d			beq 	_IfSimple
.2c59	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2c5b	d0 1b		bne $2c78			bne 	_IfComplex
.2c5d					_IfSimple:
.2c5d	20 a2 3d	jsr $3da2			jsr 	MInt32Zero					; check if TOS zero
.2c60	f0 10		beq $2c72			beq 	_IfEOL 						; go to next line.
.2c62	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2c64	c8		iny				iny
.2c65	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2c67	f0 0c		beq $2c75			beq 	_IfGoto 					; do the Goto code
.2c69	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2c6b	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2c6d	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2c6f	f0 04		beq $2c75			beq 	_IfGoto
.2c71	60		rts				rts 								; else continue on this line.
.2c72					_IfEOL:
.2c72	4c 2d 2b	jmp $2b2d			jmp 	AdvanceNextLine 			; go to next line
.2c75					_IfGoto:
.2c75	4c 64 28	jmp $2864			jmp 	CommandGoto
.2c78					_IfComplex:
.2c78	20 a2 3d	jsr $3da2			jsr 	MInt32Zero 					; is it true ?
.2c7b	f0 01		beq $2c7e			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2c7d	60		rts				rts 								; else continue.
.2c7e					_IFSkip:
.2c7e	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2c80	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2c82	4c 1a 2f	jmp $2f1a			jmp		ScanForward
.2c85					Command_ELSE:
.2c85	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2c87	8a		txa				txa
.2c88	4c 1a 2f	jmp $2f1a			jmp		ScanForward
.2c8b					Command_ENDIF:
.2c8b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d46					storeSize:
>0d46							.fill 	1
.2c8c					CommandLocal:
.2c8c	a2 00		ldx #$00			ldx 	#0
.2c8e	20 aa 2c	jsr $2caa			jsr 	LocaliseVariable 			; localise one.
.2c91					_CLCheckNext:
.2c91	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2c93	c8		iny				iny
.2c94	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2c96	f0 06		beq $2c9e			beq 	_CLAssignment
.2c98	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2c9a	f0 f0		beq $2c8c			beq 	CommandLocal
.2c9c	88		dey				dey
.2c9d	60		rts				rts
.2c9e					_CLAssignment:
.2c9e	a2 01		ldx #$01			ldx 	#1
.2ca0	20 c4 36	jsr $36c4			jsr 	Evaluate 					; evaluate RHS
.2ca3	ca		dex				dex
.2ca4	20 6d 2a	jsr $2a6d			jsr 	WriteValue
.2ca7	4c 91 2c	jmp $2c91			jmp 	_CLCheckNext
.2caa					LocaliseVariable:
.2caa	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2cac	c9 40		cmp #$40			cmp 	#$40
.2cae	b0 67		bcs $2d17			bcs 	_LVSyntax
.2cb0	8a		txa				txa 								; get the address of that variable.
.2cb1	a2 02		ldx #$02		ldx	#2
.2cb3	20 80 4d	jsr $4d80		jsr	variableHandler
.2cb6	aa		tax				tax
.2cb7	8a		txa				txa
.2cb8	48		pha				pha
.2cb9	98		tya				tya
.2cba	48		pha				pha
.2cbb	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2cbe	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2cc0	0a		asl a				asl 	a
.2cc1	10 16		bpl $2cd9			bpl 	_LVPushNumber
.2cc3	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2cc5	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cc7	c8		iny				iny
.2cc8	85 2c		sta $2c				sta 	temp1
.2cca	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ccc	85 2d		sta $2d				sta 	temp1+1
.2cce	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2cd0	b1 2c		lda ($2c),y			lda 	(temp1),y
.2cd2	aa		tax				tax 								; into X
.2cd3	e8		inx				inx 								; +1 for length.
.2cd4	a9 24		lda #$24			lda 	#markerString
.2cd6	4c ee 2c	jmp $2cee			jmp 	_LVWriteFrame
.2cd9					_LVPushNumber:
.2cd9	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2cdb	85 2c		sta $2c				sta 	temp1
.2cdd	a5 2b		lda $2b				lda 	temp0+1
.2cdf	85 2d		sta $2d				sta 	temp1+1
.2ce1	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2ce3	4a		lsr a				lsr 	a
.2ce4	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2ce6	a2 04		ldx #$04			ldx 	#VarISize
.2ce8	90 04		bcc $2cee			bcc 	_LVIsInteger
.2cea	a9 23		lda #$23			lda 	#markerFloat
.2cec	a2 06		ldx #$06			ldx 	#VarFSize
.2cee					_LVIsInteger:
.2cee					_LVWriteFrame:
.2cee	8e 46 0d	stx $0d46			stx 	storeSize 					; number of bytes to copy from (temp0)
.2cf1	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2cf2	e8		inx				inx
.2cf3	e8		inx				inx
.2cf4	20 16 3e	jsr $3e16			jsr 	RSClaim 					; create the stack frame.
.2cf7	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2cf9	a0 01		ldy #$01			ldy 	#1
.2cfb	91 37		sta ($37),y			sta 	(rsPointer),y
.2cfd	c8		iny				iny
.2cfe	a5 2b		lda $2b				lda 	temp0+1
.2d00	91 37		sta ($37),y			sta 	(rsPointer),y
.2d02	a0 00		ldy #$00			ldy 	#0
.2d04					_LVCopyData:
.2d04	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2d06	c8		iny				iny 								; write allowing for the header bit.
.2d07	c8		iny				iny
.2d08	c8		iny				iny
.2d09	91 37		sta ($37),y			sta 	(rsPointer),y
.2d0b	88		dey				dey
.2d0c	88		dey				dey
.2d0d	ce 46 0d	dec $0d46			dec 	storeSize 					; do it storesize times
.2d10	d0 f2		bne $2d04			bne 	_LVCopyData
.2d12	68		pla				pla
.2d13	a8		tay				tay
.2d14	68		pla				pla
.2d15	aa		tax				tax
.2d16	60		rts				rts
.2d17					_LVSyntax:
.2d17	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2d19	20 18 15	jsr $1518		jsr	errorHandler
.2d1c					RestoreLocals:
.2d1c	a2 00		ldx #$00			ldx 	#0
.2d1e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d20	c9 40		cmp #$40			cmp	 	#64
.2d22	90 01		bcc $2d25			bcc 	_RLocal
.2d24	60		rts				rts
.2d25					_RLocal:
.2d25	8a		txa				txa
.2d26	48		pha				pha
.2d27	98		tya				tya
.2d28	48		pha				pha
.2d29	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2d2b	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d2d	85 2a		sta $2a				sta 	temp0
.2d2f	c8		iny				iny
.2d30	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d32	85 2b		sta $2b				sta 	temp0+1
.2d34	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2d36	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d38	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2d3a	f0 28		beq $2d64			beq 	_RString
.2d3c	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2d3e	c9 25		cmp #$25			cmp 	#markerInt
.2d40	f0 02		beq $2d44			beq 	_RIsInteger
.2d42	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2d44					_RIsInteger:
.2d44	8a		txa				txa
.2d45	48		pha				pha
.2d46	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2d48					_RCopyBack:
.2d48	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d4a	88		dey				dey
.2d4b	88		dey				dey
.2d4c	88		dey				dey
.2d4d	91 2a		sta ($2a),y			sta 	(temp0),y
.2d4f	c8		iny				iny
.2d50	c8		iny				iny
.2d51	c8		iny				iny
.2d52	c8		iny				iny
.2d53	ca		dex				dex
.2d54	d0 f2		bne $2d48			bne 	_RCopyBack
.2d56	68		pla				pla 								; get size add 3
.2d57	18		clc				clc
.2d58	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2d5a					_RRestoreAAndLoop:
.2d5a	20 38 3e	jsr $3e38			jsr 	RSFree
.2d5d	68		pla				pla
.2d5e	a8		tay				tay
.2d5f	68		pla				pla
.2d60	aa		tax				tax
.2d61	4c 1c 2d	jmp $2d1c			jmp 	RestoreLocals 				; go see if there are any more locals.
.2d64					_RString:
.2d64	a2 00		ldx #$00			ldx 	#0
.2d66	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2d68	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d6a	95 98		sta $98,x			sta 	esInt0,x
.2d6c	c8		iny				iny
.2d6d	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d6f	95 a0		sta $a0,x			sta 	esInt1,x
.2d71	18		clc				clc
.2d72	a5 37		lda $37				lda 	rsPointer
.2d74	69 03		adc #$03			adc 	#3
.2d76	95 99		sta $99,x			sta 	esInt0+1,x
.2d78	a5 38		lda $38				lda 	rsPointer+1
.2d7a	69 00		adc #$00			adc 	#0
.2d7c	95 a1		sta $a1,x			sta 	esInt1+1,x
.2d7e	8a		txa				txa
.2d7f	a2 10		ldx #$10		ldx	#16
.2d81	20 26 41	jsr $4126		jsr	stringHandler
.2d84	a0 03		ldy #$03			ldy 	#3 							; get string length
.2d86	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d88	18		clc				clc
.2d89	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2d8b	4c 5a 2d	jmp $2d5a			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d47					paramCount:
>0d47							.fill 	1
.2d8e					CallProc:
.2d8e	20 16 2e	jsr $2e16			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2d91	48		pha				pha 								; save length on stack
.2d92	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2d94	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2d96	48		pha				pha
.2d97	a5 2a		lda $2a				lda 	temp0
.2d99	48		pha				pha
.2d9a	98		tya				tya 								; calculate Y + length
.2d9b	18		clc				clc
.2d9c	65 32		adc $32				adc 	tempShort
.2d9e	a8		tay				tay
.2d9f	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2da1					_CallProcEvalParams:
.2da1	e8		inx				inx
.2da2	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2da4	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2da6	f0 0b		beq $2db3			beq 	_CPDoneParams
.2da8	20 c4 36	jsr $36c4			jsr 	Evaluate 					; evaluate a parameter
.2dab	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2dad	c8		iny				iny
.2dae	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2db0	f0 ef		beq $2da1			beq 	_CallProcEvalParams
.2db2	88		dey				dey 								; undo consumption.
.2db3					_CPDoneParams:
.2db3	20 ee 3d	jsr $3dee			jsr 	CheckRightParen 			; check closing parenthesis.
.2db6	8e 47 0d	stx $0d47			stx 	paramCount 					; store parameter count+1
.2db9	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2dbb	a9 50		lda #$50			lda 	#markerPROC
.2dbd	20 16 3e	jsr $3e16			jsr 	RSClaim
.2dc0	a9 01		lda #$01			lda 	#1 							; store return address.
.2dc2	20 42 3e	jsr $3e42			jsr 	RSSavePosition
.2dc5	68		pla				pla 								; get the new code Ptr
.2dc6	85 28		sta $28				sta 	codePtr
.2dc8	68		pla				pla
.2dc9	85 29		sta $29				sta 	codePtr+1
.2dcb	68		pla				pla 								; length of name + 4 is the param start.
.2dcc	18		clc				clc
.2dcd	69 04		adc #$04			adc 	#4
.2dcf	a8		tay				tay
.2dd0	a2 ff		ldx #$ff			ldx 	#$FF
.2dd2					_CPLoadParameters:
.2dd2	e8		inx				inx 								; point to where the address should be loaded.
.2dd3	ec 47 0d	cpx $0d47			cpx 	paramCount 					; too many parameters in definition ?
.2dd6	f0 1e		beq $2df6			beq 	_CPParamError
.2dd8	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2dda	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2ddc	f0 0e		beq $2dec			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2dde	20 aa 2c	jsr $2caa			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2de1	20 6d 2a	jsr $2a6d			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2de4	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2de6	c8		iny				iny
.2de7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2de9	f0 e7		beq $2dd2			beq 	_CPLoadParameters
.2deb	88		dey				dey 								; no, unconsume and check for )
.2dec					_CPParamComplete:
.2dec	20 ee 3d	jsr $3dee			jsr 	CheckRightParen 			; check )
.2def	e8		inx				inx 								; check right number of parameters have been consumed
.2df0	ec 47 0d	cpx $0d47			cpx 	paramCount
.2df3	d0 01		bne $2df6			bne 	_CPParamError
.2df5	60		rts				rts
.2df6					_CPParamError:
.2df6	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2df8	20 18 15	jsr $1518		jsr	errorHandler
.2dfb					ReturnProc:
.2dfb	20 1c 2d	jsr $2d1c			jsr 	RestoreLocals 				; get the locals back.
.2dfe	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2e00	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2e02	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2e04	f0 05		beq $2e0b			beq 	_isok
.2e06	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2e08	20 18 15	jsr $1518		jsr	errorHandler
.2e0b					_isok:
.2e0b	a9 01		lda #$01			lda 	#1
.2e0d	20 55 3e	jsr $3e55			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2e10	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2e12	20 38 3e	jsr $3e38			jsr 	RSFree
.2e15	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d48					procList:
>0d48							.fill 	2		 					; terminated by name high being zero.
.0d4a					yInLine:
>0d4a							.fill 	1
.2e16					FindProcedure:
.2e16	8c 4a 0d	sty $0d4a			sty 	yInLine 					; save current position.
.2e19	20 d4 2e	jsr $2ed4			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2e1c	85 2c		sta $2c				sta 	temp1
.2e1e	ad 48 0d	lda $0d48			lda		procList 					; put procList address in temp2
.2e21	85 2e		sta $2e				sta 	temp2
.2e23	ad 49 0d	lda $0d49			lda 	procList+1
.2e26	85 2f		sta $2f				sta 	temp2+1
.2e28	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2e2a					_FPLoop:
.2e2a	b1 2e		lda ($2e),y			lda 	(temp2),y
.2e2c	f0 4f		beq $2e7d			beq 	_FPError 					; if so, we don't know this procedure.
.2e2e	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2e30	c8		iny				iny
.2e31	b1 2e		lda ($2e),y			lda 	(temp2),y
.2e33	85 2a		sta $2a				sta 	temp0
.2e35	c8		iny				iny
.2e36	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2e38	c5 2c		cmp $2c				cmp 	temp1
.2e3a	d0 2b		bne $2e67			bne 	_FPNext 					; hash is different, go to next.
.2e3c	38		sec				sec
.2e3d	ad 4a 0d	lda $0d4a			lda 	yInLine 					; position in line must be at least 4
.2e40	e9 04		sbc #$04			sbc 	#4
.2e42	18		clc				clc
.2e43	65 28		adc $28				adc 	codePtr
.2e45	85 30		sta $30				sta 	temp3
.2e47	a5 29		lda $29				lda 	codePtr+1
.2e49	69 00		adc #$00			adc 	#0
.2e4b	85 31		sta $31				sta 	temp3+1
.2e4d	98		tya				tya
.2e4e	48		pha				pha
.2e4f	a0 04		ldy #$04			ldy 	#4
.2e51					_FPCName:
.2e51	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2e53	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2e55	d0 0e		bne $2e65			bne 	_FPpulYNext 				; if different go to next one.
.2e57	c8		iny				iny
.2e58	c9 3a		cmp #$3a			cmp 	#$3A
.2e5a	90 f5		bcc $2e51			bcc 	_FPCName 					; compare the whole lot....
.2e5c	68		pla				pla 								; throw away the saved Y
.2e5d	98		tya				tya 								; length of name is Y-4
.2e5e	38		sec				sec
.2e5f	e9 04		sbc #$04			sbc 	#4
.2e61	ac 4a 0d	ldy $0d4a			ldy 	yInLine  					; get the original Y back
.2e64	60		rts				rts
.2e65					_FPpulYNext:
.2e65	68		pla				pla
.2e66	a8		tay				tay
.2e67					_FPNext:
.2e67	c8		iny				iny 								; next procedure record.
.2e68	10 c0		bpl $2e2a			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2e6a	98		tya				tya 								; subtract 128 from Y
.2e6b	38		sec				sec
.2e6c	e9 80		sbc #$80			sbc 	#128
.2e6e	a8		tay				tay
.2e6f	18		clc				clc 								; add 128 to temp2, so we can have more than
.2e70	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2e72	69 80		adc #$80			adc 	#128
.2e74	85 2e		sta $2e				sta 	temp2
.2e76	90 b2		bcc $2e2a			bcc 	_FPLoop
.2e78	e6 2f		inc $2f				inc 	temp2+1
.2e7a	4c 2a 2e	jmp $2e2a			jmp 	_FPLoop
.2e7d					_FPError:
.2e7d	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2e7f	20 18 15	jsr $1518		jsr	errorHandler
.2e82					ScanProc:
.2e82	98		tya				tya
.2e83	48		pha				pha
.2e84	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2e86	8d 48 0d	sta $0d48			sta 	procList
.2e89	a5 36		lda $36				lda 	lowMemory+1
.2e8b	8d 49 0d	sta $0d49			sta 	procList+1
.2e8e	20 00 32	jsr $3200			jsr 	ResetCodeAddress 			; back to the start.
.2e91					_ScanLoop:
.2e91	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2e93	b1 28		lda ($28),y			lda 	(codePtr),y
.2e95	f0 2a		beq $2ec1			beq 	_ScanExit
.2e97	a0 03		ldy #$03			ldy 	#3							; get first token
.2e99	b1 28		lda ($28),y			lda 	(codePtr),y
.2e9b	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2e9d	d0 12		bne $2eb1			bne 	_ScanNext
.2e9f	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2ea1	20 c9 2e	jsr $2ec9			jsr 	_ScanWrite
.2ea4	a5 28		lda $28				lda 	codePtr
.2ea6	20 c9 2e	jsr $2ec9			jsr 	_ScanWrite
.2ea9	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2eab	20 d4 2e	jsr $2ed4			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2eae	20 c9 2e	jsr $2ec9			jsr 	_ScanWrite					; and write that
.2eb1					_ScanNext:
.2eb1	18		clc				clc
.2eb2	a0 00		ldy #$00			ldy 	#0
.2eb4	b1 28		lda ($28),y			lda 	(codePtr),y
.2eb6	65 28		adc $28				adc 	codePtr
.2eb8	85 28		sta $28				sta 	codePtr
.2eba	90 d5		bcc $2e91			bcc 	_ScanLoop
.2ebc	e6 29		inc $29				inc 	codePtr+1
.2ebe	4c 91 2e	jmp $2e91			jmp 	_ScanLoop
.2ec1					_ScanExit:
.2ec1	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2ec3	20 c9 2e	jsr $2ec9			jsr 	_ScanWrite
.2ec6	68		pla				pla
.2ec7	a8		tay				tay
.2ec8	60		rts				rts
.2ec9					_ScanWrite:
.2ec9	a0 00		ldy #$00			ldy 	#0
.2ecb	91 35		sta ($35),y			sta 	(lowMemory),y
.2ecd	e6 35		inc $35				inc 	lowMemory
.2ecf	d0 02		bne $2ed3			bne 	_SWNoCarry
.2ed1	e6 36		inc $36				inc 	lowMemory+1
.2ed3					_SWNoCarry:
.2ed3	60		rts				rts
.2ed4					CalculateProcedureHash:
.2ed4	a9 00		lda #$00			lda 	#0 							; clear hash.
.2ed6	85 2a		sta $2a				sta 	temp0
.2ed8					_CPHLoop:
.2ed8	18		clc				clc 								; add character and rotate and add carry back in
.2ed9	b1 28		lda ($28),y			lda 	(codePtr),y
.2edb	65 2a		adc $2a				adc 	temp0
.2edd	6a		ror a				ror 	a
.2ede	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2ee0	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2ee2	b1 28		lda ($28),y			lda 	(codePtr),y
.2ee4	c8		iny				iny 								; advance incase we go round again.
.2ee5	c9 3a		cmp #$3a			cmp 	#$3A
.2ee7	90 ef		bcc $2ed8			bcc 	_CPHLoop
.2ee9	a5 2a		lda $2a				lda 	temp0
.2eeb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2eec					Command_Repeat:
.2eec	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2eee	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2ef0	20 16 3e	jsr $3e16			jsr 	RSClaim
.2ef3	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2ef5	20 42 3e	jsr $3e42			jsr 	RSSavePosition
.2ef8	60		rts				rts
.2ef9					Command_Until:
.2ef9	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2efb	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2efd	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2eff	f0 05		beq $2f06			beq 	_isok
.2f01	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2f03	20 18 15	jsr $1518		jsr	errorHandler
.2f06					_isok:
.2f06	20 e1 36	jsr $36e1			jsr 	EvaluateRootInteger 		; at the bottom.
.2f09	20 a2 3d	jsr $3da2			jsr 	MInt32Zero					; check if TOS zero
.2f0c	d0 06		bne $2f14			bne 	_CUExit
.2f0e	a9 01		lda #$01			lda 	#1
.2f10	20 55 3e	jsr $3e55			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2f13	60		rts				rts
.2f14					_CUExit:
.2f14	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2f16	20 38 3e	jsr $3e38			jsr 	RSFree
.2f19	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2f1a					ScanForward:
.2f1a	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2f1c	86 2d		stx $2d				stx 	temp1+1
.2f1e	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2f20	85 2e		sta $2e				sta 	temp2
.2f22	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2f24	c8		iny				iny
.2f25	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2f27	d0 08		bne $2f31			bne 	_SFNoCheck 					; if so, check token against entered values.
.2f29	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2f2b	f0 24		beq $2f51			beq 	_SFExit 					; at the same strcture depth.
.2f2d	c5 2d		cmp $2d				cmp 	temp1+1
.2f2f	f0 20		beq $2f51			beq 	_SFExit
.2f31					_SFNoCheck:
.2f31	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2f33	90 ed		bcc $2f22			bcc 	_SFLoop
.2f35	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2f37	90 19		bcc $2f52			bcc 	_SFSpecials
.2f39	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2f3b	90 e5		bcc $2f22			bcc 	_SFLoop
.2f3d	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2f3f	b0 e1		bcs $2f22			bcs 	_SFLoop
.2f41	aa		tax				tax  								; token in X, and look up the adjuster.
.2f42	bd ff 35	lda $35ff,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2f45	38		sec				sec 								; convert to an offset ($FF,$01)
.2f46	e9 81		sbc #$81			sbc 	#$81
.2f48	18		clc				clc 								; add to depth
.2f49	65 2e		adc $2e				adc 	temp2
.2f4b	85 2e		sta $2e				sta 	temp2
.2f4d	10 d3		bpl $2f22			bpl 	_SFLoop 					; +ve okay to continue
.2f4f	30 07		bmi $2f58			bmi 	SFError 					; if gone -ve then we have a nesting error
.2f51	60		rts		_SFExit:rts
.2f52					_SFSpecials:
.2f52	20 5d 2f	jsr $2f5d			jsr 	ScannerSkipSpecial
.2f55	4c 22 2f	jmp $2f22			jmp 	_SFLoop
.2f58					SFError:
.2f58	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2f5a	20 18 15	jsr $1518		jsr	errorHandler
.2f5d					ScannerSkipSpecial:
.2f5d	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2f5f	f0 10		beq $2f71			beq 	_SFNextLine
.2f61	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2f63	f0 2b		beq $2f90			beq 	_SFFloatSkip
.2f65	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2f67	f0 02		beq $2f6b			beq 	_SFSkipString
.2f69	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2f6a	60		rts				rts 								; token.
.2f6b					_SFSkipString:
.2f6b	98		tya				tya
.2f6c	38		sec				sec
.2f6d	71 28		adc ($28),y			adc 	(codePtr),y
.2f6f	a8		tay				tay
.2f70	60		rts				rts
.2f71					_SFNextLine:
.2f71	a0 00		ldy #$00			ldy 	#0 							; get offset
.2f73	b1 28		lda ($28),y			lda 	(codePtr),y
.2f75	18		clc				clc 								; add to code pointer.
.2f76	65 28		adc $28				adc 	codePtr
.2f78	85 28		sta $28				sta 	codePtr
.2f7a	90 02		bcc $2f7e			bcc		_SFNLNoCarry
.2f7c	e6 29		inc $29				inc 	codePtr+1
.2f7e					_SFNLNoCarry:
.2f7e	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2f80	d0 0b		bne $2f8d			bne		_SFXNL 						; no go round again
.2f82	a5 2c		lda $2c				lda 	temp1
.2f84	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2f86	d0 d0		bne $2f58			bne 	SFError 					; read uses this to search for data statements
.2f88	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2f8a	20 18 15	jsr $1518		jsr	errorHandler
.2f8d	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2f8f	60		rts				rts
.2f90					_SFFloatSkip:
.2f90	98		tya				tya 								; skip over an embedded float.
.2f91	18		clc				clc
.2f92	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2f94	a8		tay				tay
.2f95	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2f96					Command_While:
.2f96	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2f98	a2 04		ldx #$04			ldx 	#4
.2f9a	20 16 3e	jsr $3e16			jsr 	RSClaim 					; create on stack.
.2f9d	88		dey				dey
.2f9e	a9 01		lda #$01			lda 	#1
.2fa0	20 42 3e	jsr $3e42			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2fa3	c8		iny				iny
.2fa4	20 e1 36	jsr $36e1			jsr 	EvaluateRootInteger			; get the conditional
.2fa7	20 a2 3d	jsr $3da2			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2faa	f0 01		beq $2fad			beq 	_CWFail
.2fac	60		rts				rts
.2fad					_CWFail:
.2fad	a9 04		lda #$04			lda 	#4
.2faf	20 38 3e	jsr $3e38			jsr 	RSFree 						; close the just opened position.
.2fb2	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2fb4	aa		tax				tax
.2fb5	20 1a 2f	jsr $2f1a			jsr 	ScanForward
.2fb8	60		rts				rts
.2fb9					Command_Wend:
.2fb9	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2fbb	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2fbd	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2fbf	f0 05		beq $2fc6			beq 	_isok
.2fc1	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2fc3	20 18 15	jsr $1518		jsr	errorHandler
.2fc6					_isok:
.2fc6	a9 01		lda #$01			lda 	#1
.2fc8	20 55 3e	jsr $3e55			jsr 	RSLoadPosition				; go back until true
.2fcb	a9 04		lda #$04			lda 	#4
.2fcd	20 38 3e	jsr $3e38			jsr 	RSFree 						; close the loop
.2fd0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2fd1					CommandClear:
.2fd1					XCommandClear:
.2fd1	98		tya				tya
.2fd2	48		pha				pha
.2fd3	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2fd6	85 33		sta $33				sta 	highMemory
.2fd8	ad cd 0a	lda $0acd			lda 	endMemory+1
.2fdb	85 34		sta $34				sta 	highMemory+1
.2fdd	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2fe0	85 2a		sta $2a				sta 	temp0
.2fe2	ad c9 0a	lda $0ac9			lda 	basePage+1
.2fe5	85 2b		sta $2b				sta 	temp0+1
.2fe7					_CCFindEnd:
.2fe7	a0 00		ldy #$00			ldy 	#0
.2fe9	b1 2a		lda ($2a),y			lda 	(temp0),y
.2feb	f0 0c		beq $2ff9			beq 	_CCFoundEnd 				; offset zero is end.
.2fed	18		clc				clc
.2fee	65 2a		adc $2a				adc 	temp0 						; move to next line
.2ff0	85 2a		sta $2a				sta 	temp0
.2ff2	90 f3		bcc $2fe7			bcc 	_CCFindEnd
.2ff4	e6 2b		inc $2b				inc 	temp0+1
.2ff6	4c e7 2f	jmp $2fe7			jmp 	_CCFindEnd
.2ff9					_CCFoundEnd:
.2ff9	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2ffb	85 35		sta $35				sta 	lowMemory
.2ffd	a5 2b		lda $2b				lda 	temp0+1
.2fff	85 36		sta $36				sta 	lowMemory+1
.3001	18		clc				clc 								; put temp0+1 in endProgram
.3002	a5 2a		lda $2a				lda 	temp0
.3004	69 01		adc #$01			adc 	#1
.3006	8d ca 0a	sta $0aca			sta 	endProgram
.3009	a5 2b		lda $2b				lda 	temp0+1
.300b	69 00		adc #$00			adc 	#0
.300d	8d cb 0a	sta $0acb			sta 	endProgram+1
.3010	18		clc				clc 								; put a bit of space in.
.3011	a5 35		lda $35				lda 	lowMemory
.3013	69 04		adc #$04			adc 	#4
.3015	85 35		sta $35				sta 	lowMemory
.3017	90 02		bcc $301b			bcc 	_CCNoCarry
.3019	e6 36		inc $36				inc 	lowMemory+1
.301b					_CCNoCarry:
.301b	20 08 3e	jsr $3e08			jsr 	RSReset 					; reset the return stack.
.301e	a2 06		ldx #$06		ldx	#6
.3020	20 80 4d	jsr $4d80		jsr	variableHandler
.3023	20 82 2e	jsr $2e82			jsr 	ScanProc 					; scan for procedures
.3026	20 07 28	jsr $2807			jsr 	CommandRestore 				; do a restore
.3029	68		pla				pla
.302a	a8		tay				tay
.302b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d4b					structIndent:
>0d4b							.fill 	1
.302c					CommandList:
.302c	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.302e	8e 4b 0d	stx $0d4b			stx 	structIndent
.3031	20 7b 3d	jsr $3d7b			jsr 	MInt32False
.3034	e8		inx				inx
.3035	20 77 3d	jsr $3d77			jsr 	MInt32True
.3038	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.303a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.303c	f0 15		beq $3053			beq 	_CLEndLine
.303e	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.3040	30 1b		bmi $305d			bmi 	_CLDoListing 				; do the whole lot.
.3042	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.3044	20 e3 36	jsr $36e3			jsr 	EvaluateInteger
.3047	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.3049	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.304b	f0 06		beq $3053			beq 	_CLEndLine
.304d	20 b9 3c	jsr $3cb9			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.3050	4c 5d 30	jmp $305d			jmp 	_CLDoListing 				; own e.g. list 1100
.3053					_CLEndLine:
.3053	c8		iny				iny 								; skip comma
.3054	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.3056	30 05		bmi $305d			bmi 	_CLDoListing
.3058	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.305a	20 e3 36	jsr $36e3			jsr 	EvaluateInteger				; get end
.305d					_CLDoListing:
.305d	20 00 32	jsr $3200			jsr 	ResetCodeAddress 			; back to the start.
.3060					_CLCheckLoop:
.3060	a2 02		ldx #$02		ldx	#2
.3062	20 f6 14	jsr $14f6		jsr	deviceHandler
.3065	a0 00		ldy #$00			ldy 	#0							; check end.
.3067	b1 28		lda ($28),y			lda 	(codePtr),y
.3069	f0 41		beq $30ac			beq 	_CLEnd
.306b	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.306d	20 af 30	jsr $30af			jsr 	CLCompareLineTOS
.3070	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3072	f0 28		beq $309c			beq 	_CLNext
.3074	e8		inx				inx
.3075	20 af 30	jsr $30af			jsr 	CLCompareLineTOS 			; compare vs higher
.3078	c9 01		cmp #$01			cmp 	#1
.307a	f0 20		beq $309c			beq 	_CLNext
.307c	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.307e	20 d1 30	jsr $30d1			jsr 	CLStructureCheck
.3081	ad 4b 0d	lda $0d4b			lda 	structIndent 				; indent level.
.3084	10 02		bpl $3088			bpl 	_CLPositive
.3086	a9 00		lda #$00			lda 	#0
.3088					_CLPositive:
.3088	a2 04		ldx #$04		ldx	#4
.308a	20 af 49	jsr $49af		jsr	tokeniserHandler
.308d	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.308f	20 d1 30	jsr $30d1			jsr 	CLStructureCheck
.3092	ad 4b 0d	lda $0d4b			lda 	structIndent
.3095	10 05		bpl $309c			bpl 	_CLNext
.3097	a9 00		lda #$00			lda 	#0
.3099	8d 4b 0d	sta $0d4b			sta 	structIndent
.309c					_CLNext:
.309c	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.309e	b1 28		lda ($28),y			lda 	(codePtr),y
.30a0	18		clc				clc
.30a1	65 28		adc $28				adc 	codePtr
.30a3	85 28		sta $28				sta 	codePtr
.30a5	90 b9		bcc $3060			bcc 	_CLCheckLoop
.30a7	e6 29		inc $29				inc 	codePtr+1
.30a9	4c 60 30	jmp $3060			jmp 	_CLCheckLoop
.30ac					_CLEnd:
.30ac	4c 64 3e	jmp $3e64			jmp 	WarmStart 					; warm start after list.
.30af					CLCompareLineTOS:
.30af	a0 01		ldy #$01			ldy 	#1
.30b1	b1 28		lda ($28),y			lda 	(codePtr),y
.30b3	55 98		eor $98,x			eor 	esInt0,x
.30b5	85 2a		sta $2a				sta 	temp0
.30b7	c8		iny				iny
.30b8	b1 28		lda ($28),y			lda 	(codePtr),y
.30ba	55 a0		eor $a0,x			eor 	esInt1,x
.30bc	05 2a		ora $2a				ora 	temp0
.30be	f0 10		beq $30d0			beq 	_CLCLTExit
.30c0	88		dey				dey
.30c1	b1 28		lda ($28),y			lda 	(codePtr),y
.30c3	d5 98		cmp $98,x			cmp 	esInt0,x
.30c5	c8		iny				iny
.30c6	b1 28		lda ($28),y			lda 	(codePtr),y
.30c8	f5 a0		sbc $a0,x			sbc 	esInt1,x
.30ca	a9 ff		lda #$ff			lda 	#255
.30cc	90 02		bcc $30d0			bcc 	_CLCLTExit
.30ce	a9 01		lda #$01			lda 	#1
.30d0					_CLCLTExit:
.30d0	60		rts				rts
.30d1					CLStructureCheck:
.30d1	85 2a		sta $2a				sta 	temp0
.30d3	a0 03		ldy #$03			ldy 	#3
.30d5					_CLSCLoop:
.30d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.30d7	c8		iny				iny
.30d8	c9 80		cmp #$80			cmp 	#$80
.30da	90 f9		bcc $30d5			bcc 	_CLSCLoop 					; $00-$7F just step over.
.30dc	f0 28		beq $3106			beq		_CLSCExit					; EOL return
.30de	c9 86		cmp #$86			cmp 	#$86 						; special handler
.30e0	90 1e		bcc $3100			bcc 	_CLSCSpecial
.30e2	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.30e4	90 ef		bcc $30d5			bcc 	_CLSCLoop
.30e6	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.30e8	b0 eb		bcs $30d5			bcs 	_CLSCLoop
.30ea	aa		tax				tax 								; get adjustment
.30eb	bd ff 35	lda $35ff,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.30ee	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.30f0	d0 e3		bne $30d5			bne 	_CLSCLoop
.30f2	38		sec				sec
.30f3	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.30f5	0a		asl a				asl 	a 							; double indent step
.30f6	18		clc				clc
.30f7	6d 4b 0d	adc $0d4b			adc 	structIndent 				; add to structure indent
.30fa	8d 4b 0d	sta $0d4b			sta 	structIndent
.30fd	4c d5 30	jmp $30d5			jmp 	_CLSCLoop
.3100					_CLSCSpecial:
.3100	20 5d 2f	jsr $2f5d			jsr 	ScannerSkipSpecial
.3103	4c d5 30	jmp $30d5			jmp 	_CLSCLoop
.3106					_CLSCExit:
.3106	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.3107					CommandLoad:
.3107	20 2f 31	jsr $312f			jsr 	CLSParameters 					; get parameters for load.
.310a	08		php				php
.310b	a2 0e		ldx #$0e		ldx	#14
.310d	20 f6 14	jsr $14f6		jsr	deviceHandler
.3110	28		plp				plp
.3111	b0 08		bcs $311b			bcs 	_CLExit 						; if CC then load a program, so warm start.
.3113	20 d1 2f	jsr $2fd1			jsr 	CommandClear
.3116	a2 04		ldx #$04		ldx	#4
.3118	20 c9 27	jsr $27c9		jsr	interactionHandler
.311b					_CLExit
.311b	60		rts				rts
.311c					CommandSave:
.311c	20 2f 31	jsr $312f			jsr 	CLSParameters					; get parameters for save
.311f	90 08		bcc $3129			bcc 	_CSNoOverrideAddress
.3121	20 fb 3d	jsr $3dfb			jsr 	CheckComma 						; should be a comma.
.3124	a2 02		ldx #$02			ldx 	#2
.3126	20 e3 36	jsr $36e3			jsr 	EvaluateInteger 				; get save end address.
.3129					_CSNoOverrideAddress:
.3129	a2 18		ldx #$18		ldx	#24
.312b	20 f6 14	jsr $14f6		jsr	deviceHandler
.312e	60		rts				rts
.312f					CLSParameters:
.312f	a2 00		ldx #$00			ldx 	#0 								; string
.3131	20 d8 36	jsr $36d8			jsr 	EvaluateString
.3134	e8		inx				inx 									; erase out +1 +2
.3135	20 7b 3d	jsr $3d7b			jsr 	MInt32False
.3138	e8		inx				inx
.3139	20 7b 3d	jsr $3d7b			jsr 	MInt32False
.313c	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.313f	85 99		sta $99				sta 	esInt0+1
.3141	ad c9 0a	lda $0ac9			lda 	basePage+1
.3144	85 a1		sta $a1				sta 	esInt1+1
.3146	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.3149	85 9a		sta $9a				sta 	esInt0+2
.314b	ad cb 0a	lda $0acb			lda 	endProgram+1
.314e	85 a2		sta $a2				sta 	esInt1+2
.3150	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.3152	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3154	d0 08		bne $315e			bne 	_CLSDefault
.3156	c8		iny				iny 									; skip comma
.3157	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.3159	20 e3 36	jsr $36e3			jsr 	EvaluateInteger
.315c	38		sec				sec
.315d	60		rts				rts
.315e					_CLSDefault:
.315e	18		clc				clc
.315f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.3160					Command_New:
.3160					Command_XNew:
.3160	20 00 32	jsr $3200			jsr 	ResetCodeAddress 			; point to first line
.3163	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.3165	98		tya				tya
.3166	91 28		sta ($28),y			sta 	(codePtr),y
.3168	20 d1 2f	jsr $2fd1			jsr 	CommandClear 				; clear everything down.
.316b	4c 27 2b	jmp $2b27			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d4c					breakCounter:
>0d4c								.fill 	1
.0d4d					breakIncrement:
>0d4d								.fill 	1
.316e					Command_Run:
.316e					XCommand_Run:
.316e	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.3170	9a		txs				txs
.3171	20 fa 31	jsr $31fa			jsr 	BreakOn 					; turn break on
.3174	20 d1 2f	jsr $2fd1			jsr 	CommandClear 				; clear everything.
.3177	20 00 32	jsr $3200			jsr 	ResetCodeAddress 			; back to the start.
.317a					Command_RunFrom:
.317a	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.317c					CRNextInstruction:
.317c	a9 00		lda #$00			lda 	#0
.317e	85 3a		sta $3a				sta 	softMemAlloc+1
.3180	ad 4c 0d	lda $0d4c			lda 	breakCounter 				; check for break.
.3183	6d 4d 0d	adc $0d4d			adc 	breakIncrement
.3186	8d 4c 0d	sta $0d4c			sta 	breakCounter
.3189	90 05		bcc $3190			bcc 	_CRNoChecks
.318b	a2 02		ldx #$02		ldx	#2
.318d	20 f6 14	jsr $14f6		jsr	deviceHandler
.3190					_CRNoChecks
.3190	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.3192	10 1c		bpl $31b0			bpl 	_CRNotToken
.3194	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.3196	b0 0c		bcs $31a4			bcs 	_CRExecute
.3198	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.319a	b0 71		bcs $320d			bcs 	Unimplemented
.319c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.319e	b0 04		bcs $31a4			bcs 	_CRExecute
.31a0	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.31a2	b0 16		bcs $31ba			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.31a4					_CRExecute:
.31a4	c8		iny				iny 								; consume it.
.31a5	0a		asl a				asl 	a 							; double it, losing most significant bit.
.31a6	aa		tax				tax
.31a7	20 ad 31	jsr $31ad			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.31aa	4c 7c 31	jmp $317c			jmp 	CRNextInstruction
.31ad					_CRRunRoutine:
.31ad	7c 17 32	jmp ($3217,x)			jmp 	(Group0Vectors,x)
.31b0					_CRNotToken:
.31b0	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.31b2	b0 59		bcs $320d			bcs 	Unimplemented
.31b4					_CRDefaultLet:
.31b4	20 5a 2a	jsr $2a5a			jsr 	CommandLet 					; do the default, LET
.31b7	4c 7c 31	jmp $317c			jmp 	CRNextInstruction
.31ba					_CRCheckIndirect:
.31ba	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.31bc	f0 0a		beq $31c8			beq 	_CRAndCommand
.31be	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.31c0	f0 f2		beq $31b4			beq 	_CRDefaultLet
.31c2	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.31c4	f0 ee		beq $31b4			beq 	_CRDefaultLet
.31c6	d0 45		bne $320d			bne 	Unimplemented
.31c8					_CRAndCommand:
.31c8	c8		iny				iny 								; skip over the AND token
.31c9	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.31cb	20 e5 31	jsr $31e5			jsr 	CommandAssembler 			; do the assembler command
.31ce	4c 7c 31	jmp $317c			jmp 	CRNextInstruction 			; and loop round.
.31d1					CommandShift1:
.31d1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.31d3	10 38		bpl $320d			bpl 	Unimplemented 				; we have an error as this should not happen.
.31d5	c8		iny				iny 								; advance over it.
.31d6	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.31d8	b0 0b		bcs $31e5			bcs 	CommandAssembler
.31da	0a		asl a				asl 	a 							; double into X
.31db	aa		tax				tax
.31dc	7c df 32	jmp ($32df,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.31df					CommandShift2:
.31df	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.31e1	20 69 18	jsr $1869		jsr	extensionHandler
.31e4	60		rts				rts
.31e5					CommandAssembler:
.31e5	a2 02		ldx #$02		ldx	#2
.31e7	20 b4 13	jsr $13b4		jsr	assemblerHandler
.31ea	60		rts				rts
.31eb					CommandAssemblerLabel:
.31eb	a2 04		ldx #$04		ldx	#4
.31ed	20 b4 13	jsr $13b4		jsr	assemblerHandler
.31f0	60		rts				rts
.31f1					CommandColon:
.31f1	60		rts				rts
.31f2					CommandBreak:
.31f2	20 e1 36	jsr $36e1			jsr 	EvaluateRootInteger
.31f5	20 a2 3d	jsr $3da2			jsr 	MInt32Zero
.31f8	f0 02		beq $31fc			beq 	BreakOff
.31fa					BreakOn:
.31fa	a2 08		ldx #$08			ldx 	#8
.31fc					BreakOff:
.31fc	8e 4d 0d	stx $0d4d			stx 	breakIncrement
.31ff	60		rts				rts
.3200					ResetCodeAddress:
.3200	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.3203	85 28		sta $28				sta 	codePtr
.3205	ad c9 0a	lda $0ac9			lda 	basePage+1
.3208	85 29		sta $29				sta 	codePtr+1
.320a	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.320c	60		rts				rts
.320d					Unimplemented:
.320d	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.320f	20 18 15	jsr $1518		jsr	errorHandler
.3212					TKErr01:
.3212					TKErr02:
.3212					TKErr03:
.3212					TKErr04:
.3212					TKErr05:
.3212					TKErr06:
.3212					TKErr07:
.3212					TKErr08:
.3212					TKErr09:
.3212					TKErr10:
.3212					TKErr11:
.3212					TKErr12:
.3212					TKErr13:
.3212					TKErr14:
.3212					TKErr15:
.3212					TKErr16:
.3212	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3214	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.3217					Group0Vectors:
>3217	2d 2b					.word	AdvanceNextLine          ; $80 [[eol]]
>3219	d1 31					.word	CommandShift1            ; $81 [[sh1]]
>321b	df 31					.word	CommandShift2            ; $82 [[sh2]]
>321d	12 32					.word	TKErr09                  ; $83 [[sh3]]
>321f	12 32					.word	TKErr10                  ; $84 [[fpc]]
>3221	12 32					.word	TKErr08                  ; $85 [[str]]
>3223	c8 33					.word	AndHandler               ; $86 and
>3225	b5 33					.word	OrHandler                ; $87 or
>3227	a2 33					.word	XorHandler               ; $88 xor
>3229	ea 34					.word	CompareGreaterEq         ; $89 >=
>322b	f4 34					.word	CompareLessEq            ; $8a <=
>322d	d6 34					.word	CompareGreater           ; $8b >
>322f	cc 34					.word	CompareLess              ; $8c <
>3231	c2 34					.word	CompareEquals            ; $8d =
>3233	e0 34					.word	CompareNotEquals         ; $8e <>
>3235	33 33					.word	AddHandler               ; $8f +
>3237	56 33					.word	SubHandler               ; $90 -
>3239	ee 33					.word	ShrHandler               ; $91 >>
>323b	db 33					.word	ShlHandler               ; $92 <<
>323d	69 33					.word	MulHandler               ; $93 *
>323f	7c 33					.word	DivHandler               ; $94 /
>3241	8f 33					.word	ModHandler               ; $95 mod
>3243	27 34					.word	PowerHandler             ; $96 ^
>3245	01 34					.word	WordRefHandler           ; $97 !
>3247	14 34					.word	ByteRefHandler           ; $98 ?
>3249	ec 2e					.word	Command_Repeat           ; $99 repeat
>324b	96 2f					.word	Command_While            ; $9a while
>324d	41 2b					.word	Command_FOR              ; $9b for
>324f	50 2c					.word	CommandIf                ; $9c if
>3251	12 32					.word	TKErr04                  ; $9d defproc
>3253	f9 2e					.word	Command_Until            ; $9e until
>3255	b9 2f					.word	Command_Wend             ; $9f wend
>3257	a2 2b					.word	Command_NEXT             ; $a0 next
>3259	12 32					.word	TKErr06                  ; $a1 then
>325b	8b 2c					.word	Command_ENDIF            ; $a2 endif
>325d	fb 2d					.word	ReturnProc               ; $a3 endproc
>325f	4e 36					.word	UnaryParenthesis         ; $a4 (
>3261	30 38					.word	UnaryLen                 ; $a5 len(
>3263	74 38					.word	UnarySgn                 ; $a6 sgn(
>3265	5d 38					.word	UnaryAbs                 ; $a7 abs(
>3267	cd 38					.word	Unary_Random             ; $a8 random(
>3269	17 39					.word	Unary_Page               ; $a9 page
>326b	77 3d					.word	MInt32True               ; $aa true
>326d	7b 3d					.word	MInt32False              ; $ab false
>326f	e2 38					.word	Unary_Min                ; $ac min(
>3271	e6 38					.word	Unary_Max                ; $ad max(
>3273	ef 39					.word	UnarySys                 ; $ae sys(
>3275	98 39					.word	UnaryTimer               ; $af timer(
>3277	ad 37					.word	EventFunction            ; $b0 event(
>3279	c1 39					.word	UnaryGet                 ; $b1 get(
>327b	b1 39					.word	UnaryInkey               ; $b2 inkey(
>327d	68 39					.word	UnaryAlloc               ; $b3 alloc(
>327f	28 3a					.word	ExecChr                  ; $b4 chr$(
>3281	58 3a					.word	ExecLeft                 ; $b5 left$(
>3283	75 3a					.word	ExecMid                  ; $b6 mid$(
>3285	9d 3a					.word	ExecRight                ; $b7 right$(
>3287	2f 37					.word	Event_Str                ; $b8 str$(
>3289	5e 37					.word	UnaryVal                 ; $b9 val(
>328b	8b 38					.word	UnaryPeek                ; $ba peek(
>328d	91 38					.word	UnaryDeek                ; $bb deek(
>328f	97 38					.word	UnaryLeek                ; $bc leek(
>3291	4e 38					.word	UnaryAsc                 ; $bd asc(
>3293	42 39					.word	UnaryIntToFloat          ; $be int(
>3295	55 39					.word	UnaryFloatToInt          ; $bf float(
>3297	61 37					.word	UnaryIsVal               ; $c0 isval(
>3299	3f 3a					.word	ExecUpper                ; $c1 upper$(
>329b	3c 3a					.word	ExecLower                ; $c2 lower$(
>329d	25 39					.word	UnaryReference           ; $c3 @
>329f	3b 39					.word	UnaryComplement          ; $c4 ~
>32a1	38 39					.word	UnaryHexMarker           ; $c5 &
>32a3	da 39					.word	UnaryGetString           ; $c6 get$(
>32a5	e0 39					.word	UnaryInkeyString         ; $c7 inkey$(
>32a7	17 3a					.word	UnaryMem                 ; $c8 mem
>32a9	12 32					.word	TKErr01                  ; $c9 )
>32ab	f1 31					.word	CommandColon             ; $ca :
>32ad	12 32					.word	TKErr02                  ; $cb ,
>32af	12 32					.word	TKErr03                  ; $cc ;
>32b1	15 2b					.word	Command_Rem2             ; $cd '
>32b3	12 32					.word	TKErr07                  ; $ce to
>32b5	12 32					.word	TKErr05                  ; $cf step
>32b7	8e 2d					.word	CallProc                 ; $d0 proc
>32b9	8c 2c					.word	CommandLocal             ; $d1 local
>32bb	4c 2a					.word	Command_Dim              ; $d2 dim
>32bd	15 2b					.word	Command_Rem              ; $d3 rem
>32bf	5a 2a					.word	CommandLet               ; $d4 let
>32c1	96 28					.word	Command_Input            ; $d5 input
>32c3	85 2c					.word	Command_ELSE             ; $d6 else
>32c5	1d 2a					.word	Command_VDU              ; $d7 vdu
>32c7	4c 29					.word	Command_Print            ; $d8 print
>32c9	fe 27					.word	CommandData              ; $d9 data
>32cb	12 32					.word	TKErr13                  ; $da image
>32cd	12 32					.word	TKErr12                  ; $db at
>32cf	12 32					.word	TKErr14                  ; $dc flip
>32d1	3e 2a					.word	Command_Assert           ; $dd assert
>32d3	d8 2a					.word	Command_Poke             ; $de poke
>32d5	dc 2a					.word	Command_Doke             ; $df doke
>32d7	e0 2a					.word	Command_Loke             ; $e0 loke
>32d9	ed 29					.word	Command_Ink              ; $e1 ink
>32db	f8 29					.word	Command_Paper            ; $e2 paper
>32dd	e7 29					.word	Command_CLS              ; $e3 cls
>32df	03 2a					.word	Command_Locate           ; $e4 locate
>32e1	eb 31					.word	CommandAssemblerLabel    ; $e5 .
>32e3	12 32					.word	TKErr15                  ; $e6 from
>32e5	12 32					.word	TKErr11                  ; $e7 #
>32e7	d1 2f					.word	CommandClear             ; $e8 clear
>32e9	12 32					.word	TKErr16                  ; $e9 text

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.32eb					Group1Vectors:
>32eb	07 31					.word	CommandLoad              ; $86 load
>32ed	1c 31					.word	CommandSave              ; $87 save
>32ef	2c 30					.word	CommandList              ; $88 list
>32f1	60 31					.word	Command_New              ; $89 new
>32f3	f2 31					.word	CommandBreak             ; $8a break
>32f5	6e 31					.word	Command_Run              ; $8b run
>32f7	d3 27					.word	CommandRead              ; $8c read
>32f9	07 28					.word	CommandRestore           ; $8d restore
>32fb	27 2b					.word	CommandEnd               ; $8e end
>32fd	22 2b					.word	CommandStop              ; $8f stop
>32ff	2a 2b					.word	CommandXemu              ; $90 xemu
>3301	64 28					.word	CommandGOTO              ; $91 goto
>3303	39 28					.word	CommandGOSUB             ; $92 gosub
>3305	4c 28					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.3307					BinaryProcess:
.3307	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.3309	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.330b	0a		asl a				asl 	a
.330c	30 0e		bmi $331c			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.330e	18		clc				clc 								; return CC for integer
.330f	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3311	f0 08		beq $331b			beq 	_BPExit 					; if both integer then return with CC.
.3313	20 21 33	jsr $3321			jsr 	BPMakeBothFloat 			; make both float
.3316	a9 01		lda #$01			lda 	#$01 						; set result type to float
.3318	95 90		sta $90,x			sta 	esType,x
.331a	38		sec				sec 								; and return with carry set.
.331b					_BPExit:
.331b	60		rts				rts
.331c					_BPStringType:
.331c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.331e	20 18 15	jsr $1518		jsr	errorHandler
.3321					BPMakeBothFloat:
.3321	e8		inx				inx
.3322	20 26 33	jsr $3326			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.3325	ca		dex				dex
.3326					BPMakeFloat:
.3326	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.3328	4a		lsr a				lsr 	a
.3329	b0 07		bcs $3332			bcs 	_BPIsFloat 					; already a float if set.
.332b	8a		txa				txa
.332c	a2 1c		ldx #$1c		ldx	#28
.332e	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3331	aa		tax				tax
.3332					_BPIsFloat:
.3332	60		rts				rts
.3333					AddHandler:
.3333	20 04 35	jsr $3504			jsr 	DereferenceTwo 				; dereference top two on stack.
.3336	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.3338	35 91		and $91,x			and 	esType+1,x
.333a	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.333c	d0 10		bne $334e			bne 	_AHStringConcat				; concatenate strings.
.333e	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.3341	b0 03		bcs $3346			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3343	4c 5f 3c	jmp $3c5f			jmp 	MInt32Add 							; else do it as integer.
.3346					_IsFPOperation:
.3346	8a		txa				txa 								; call the relevant fp routine
.3347	a2 04		ldx #$04		ldx	#4
.3349	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.334c	aa		tax				tax
.334d	60		rts				rts
.334e					_AHStringConcat:
.334e	8a		txa				txa 								; handled by the string module.
.334f	a2 06		ldx #$06		ldx	#6
.3351	20 26 41	jsr $4126		jsr	stringHandler
.3354	aa		tax				tax
.3355	60		rts				rts
.3356					SubHandler:
.3356	20 04 35	jsr $3504			jsr 	DereferenceTwo
.3359	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.335c	b0 03		bcs $3361			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.335e	4c 79 3c	jmp $3c79			jmp 	MInt32Sub 							; else do it as integer.
.3361					_IsFPOperation:
.3361	8a		txa				txa 								; call the relevant fp routine
.3362	a2 12		ldx #$12		ldx	#18
.3364	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3367	aa		tax				tax
.3368	60		rts				rts
.3369					MulHandler:
.3369	20 04 35	jsr $3504			jsr 	DereferenceTwo
.336c	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.336f	b0 03		bcs $3374			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3371	4c 93 3c	jmp $3c93			jmp 	MInt32Multiply 							; else do it as integer.
.3374					_IsFPOperation:
.3374	8a		txa				txa 								; call the relevant fp routine
.3375	a2 0c		ldx #$0c		ldx	#12
.3377	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.337a	aa		tax				tax
.337b	60		rts				rts
.337c					DivHandler:
.337c	20 04 35	jsr $3504			jsr 	DereferenceTwo
.337f	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.3382	b0 03		bcs $3387			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3384	4c 50 3b	jmp $3b50			jmp 	MInt32SDivide 							; else do it as integer.
.3387					_IsFPOperation:
.3387	8a		txa				txa 								; call the relevant fp routine
.3388	a2 08		ldx #$08		ldx	#8
.338a	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.338d	aa		tax				tax
.338e	60		rts				rts
.338f					ModHandler:
.338f	20 04 35	jsr $3504			jsr 	DereferenceTwo
.3392	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.3395	b0 03		bcs $339a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3397	4c ce 3b	jmp $3bce			jmp 	MInt32Modulus 							; else do it as integer.
.339a					_IsFPOperation:
.339a	8a		txa				txa 								; call the relevant fp routine
.339b	a2 0a		ldx #$0a		ldx	#10
.339d	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.33a0	aa		tax				tax
.33a1	60		rts				rts
.33a2					XorHandler:
.33a2	20 04 35	jsr $3504			jsr 	DereferenceTwo
.33a5	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.33a8	b0 03		bcs $33ad			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33aa	4c 02 3b	jmp $3b02			jmp 	MInt32Xor 							; else do it as integer.
.33ad					_IsFPOperation:
.33ad	8a		txa				txa 								; call the relevant fp routine
.33ae	a2 0a		ldx #$0a		ldx	#10
.33b0	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.33b3	aa		tax				tax
.33b4	60		rts				rts
.33b5					OrHandler:
.33b5	20 04 35	jsr $3504			jsr 	DereferenceTwo
.33b8	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.33bb	b0 03		bcs $33c0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33bd	4c e9 3a	jmp $3ae9			jmp 	MInt32Or 							; else do it as integer.
.33c0					_IsFPOperation:
.33c0	8a		txa				txa 								; call the relevant fp routine
.33c1	a2 0a		ldx #$0a		ldx	#10
.33c3	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.33c6	aa		tax				tax
.33c7	60		rts				rts
.33c8					AndHandler:
.33c8	20 04 35	jsr $3504			jsr 	DereferenceTwo
.33cb	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.33ce	b0 03		bcs $33d3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33d0	4c d0 3a	jmp $3ad0			jmp 	MInt32And 							; else do it as integer.
.33d3					_IsFPOperation:
.33d3	8a		txa				txa 								; call the relevant fp routine
.33d4	a2 0a		ldx #$0a		ldx	#10
.33d6	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.33d9	aa		tax				tax
.33da	60		rts				rts
.33db					ShlHandler:
.33db	20 04 35	jsr $3504			jsr 	DereferenceTwo
.33de	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.33e1	b0 03		bcs $33e6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33e3	4c 5c 34	jmp $345c			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.33e6					_IsFPOperation:
.33e6	8a		txa				txa 								; call the relevant fp routine
.33e7	a2 0a		ldx #$0a		ldx	#10
.33e9	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.33ec	aa		tax				tax
.33ed	60		rts				rts
.33ee					ShrHandler:
.33ee	20 04 35	jsr $3504			jsr 	DereferenceTwo
.33f1	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.33f4	b0 03		bcs $33f9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33f6	4c 5f 34	jmp $345f			jmp 	MInt32ShiftRightX 							; else do it as integer.
.33f9					_IsFPOperation:
.33f9	8a		txa				txa 								; call the relevant fp routine
.33fa	a2 0a		ldx #$0a		ldx	#10
.33fc	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.33ff	aa		tax				tax
.3400	60		rts				rts
.3401					WordRefHandler:
.3401	20 04 35	jsr $3504			jsr 	DereferenceTwo
.3404	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.3407	b0 03		bcs $340c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3409	4c 4e 34	jmp $344e			jmp 	MInt32WordIndirect 							; else do it as integer.
.340c					_IsFPOperation:
.340c	8a		txa				txa 								; call the relevant fp routine
.340d	a2 0a		ldx #$0a		ldx	#10
.340f	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3412	aa		tax				tax
.3413	60		rts				rts
.3414					ByteRefHandler:
.3414	20 04 35	jsr $3504			jsr 	DereferenceTwo
.3417	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.341a	b0 03		bcs $341f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.341c	4c 52 34	jmp $3452			jmp 	MInt32ByteIndirect 							; else do it as integer.
.341f					_IsFPOperation:
.341f	8a		txa				txa 								; call the relevant fp routine
.3420	a2 0a		ldx #$0a		ldx	#10
.3422	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3425	aa		tax				tax
.3426	60		rts				rts
.3427					PowerHandler:
.3427	20 04 35	jsr $3504			jsr 	DereferenceTwo
.342a	20 07 33	jsr $3307			jsr 	BinaryProcess 				; check to see if either is float
.342d	b0 03		bcs $3432			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.342f	4c 3a 34	jmp $343a			jmp 	PowerInteger 							; else do it as integer.
.3432					_IsFPOperation:
.3432	8a		txa				txa 								; call the relevant fp routine
.3433	a2 18		ldx #$18		ldx	#24
.3435	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3438	aa		tax				tax
.3439	60		rts				rts
.343a					PowerInteger:
.343a	20 21 33	jsr $3321			jsr 	BPMakeBothFloat				; make them float.
.343d	8a		txa				txa
.343e	a2 18		ldx #$18		ldx	#24
.3440	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3443	a2 14		ldx #$14		ldx	#20
.3445	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3448	aa		tax				tax
.3449	a9 00		lda #$00			lda 	#0 							; make type integer
.344b	95 90		sta $90,x			sta 	esType,x
.344d	60		rts				rts
.344e					Mint32WordIndirect:
.344e	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.3450	d0 02		bne $3454			bne 	Min32Indirect
.3452					Mint32ByteIndirect:
.3452	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.3454					Min32Indirect:
.3454	48		pha				pha 								; save the indirection
.3455	20 5f 3c	jsr $3c5f			jsr 	MInt32Add 					; add a!b a?b
.3458	68		pla				pla 								; and set the type to reference.
.3459	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.345b	60		rts				rts
.345c					Mint32ShiftLeftX:
.345c	18		clc				clc 								; CC shift left
.345d	90 01		bcc $3460			bcc 	Mint32Shift
.345f					Mint32ShiftRightX:
.345f	38		sec				sec 								; CS shift right
.3460					Mint32Shift:
.3460	08		php				php 								; save carry flag on stack.
.3461	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3463	15 a9		ora $a9,x			ora 	esInt2+1,x
.3465	15 b1		ora $b1,x			ora 	esInt3+1,x
.3467	d0 1e		bne $3487			bne 	_MShiftZero
.3469	b5 99		lda $99,x			lda 	esInt0+1,x
.346b	c9 20		cmp #$20			cmp 	#32
.346d	b0 18		bcs $3487			bcs 	_MShiftZero
.346f					_MShiftLoop:
.346f	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3471	f0 12		beq $3485			beq 	_MShiftExit
.3473	d6 99		dec $99,x			dec 	esInt0+1,x
.3475	28		plp				plp 								; restore and save carry
.3476	08		php				php
.3477	90 06		bcc $347f			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3479	20 99 3d	jsr $3d99			jsr 	Mint32ShiftRight
.347c	4c 6f 34	jmp $346f			jmp 	_MShiftLoop
.347f					_MShiftLeft:
.347f	20 90 3d	jsr $3d90			jsr 	Mint32ShiftLeft
.3482	4c 6f 34	jmp $346f			jmp 	_MShiftLoop
.3485					_MShiftExit:
.3485	28		plp				plp	 								; throw saved carry and exit
.3486	60		rts				rts
.3487					_MShiftZero:
.3487	4c 7b 3d	jmp $3d7b			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.348a					PerformComparison:
.348a	20 04 35	jsr $3504			jsr 	DereferenceTwo 				; make both values.
.348d	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.348f	35 91		and $91,x			and 	esType+1,x
.3491	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3492	30 1d		bmi $34b1			bmi 	_PCIsString
.3494	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.3496	15 91		ora $91,x			ora 	esType+1,x
.3498	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3499	30 22		bmi $34bd			bmi 	_PCError
.349b	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.349d	f0 0f		beq $34ae			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.349f	20 21 33	jsr $3321			jsr 	BPMakeBothFloat 			; make both float
.34a2	8a		txa				txa
.34a3	a2 06		ldx #$06		ldx	#6
.34a5	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.34a8	86 32		stx $32				stx 	tempShort 					; save result
.34aa	aa		tax				tax
.34ab	a5 32		lda $32				lda 	tempShort
.34ad	60		rts				rts
.34ae					_PCIsInteger:
.34ae	4c 1b 3b	jmp $3b1b			jmp 	MInt32Compare
.34b1					_PCIsString:
.34b1	8a		txa				txa 								; A has SP
.34b2	a2 0a		ldx #$0a		ldx	#10
.34b4	20 26 41	jsr $4126		jsr	stringHandler
.34b7	86 32		stx $32				stx 	tempShort 					; save result
.34b9	aa		tax				tax 								; put SP back in X and get result.
.34ba	a5 32		lda $32				lda 	tempShort
.34bc	60		rts				rts
.34bd					_PCError:
.34bd	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.34bf	20 18 15	jsr $1518		jsr	errorHandler
.34c2					CompareEquals:
.34c2	20 8a 34	jsr $348a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34c5	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.34c7	f0 35		beq $34fe			beq  	CompareTrue
.34c9	4c 01 35	jmp $3501			jmp 	CompareFalse
.34cc					CompareLess:
.34cc	20 8a 34	jsr $348a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34cf	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.34d1	f0 2b		beq $34fe			beq  	CompareTrue
.34d3	4c 01 35	jmp $3501			jmp 	CompareFalse
.34d6					CompareGreater:
.34d6	20 8a 34	jsr $348a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34d9	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.34db	f0 21		beq $34fe			beq  	CompareTrue
.34dd	4c 01 35	jmp $3501			jmp 	CompareFalse
.34e0					CompareNotEquals:
.34e0	20 8a 34	jsr $348a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34e3	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.34e5	d0 17		bne $34fe			bne  	CompareTrue
.34e7	4c 01 35	jmp $3501			jmp 	CompareFalse
.34ea					CompareGreaterEq:
.34ea	20 8a 34	jsr $348a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34ed	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.34ef	d0 0d		bne $34fe			bne  	CompareTrue
.34f1	4c 01 35	jmp $3501			jmp 	CompareFalse
.34f4					CompareLessEq:
.34f4	20 8a 34	jsr $348a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.34f7	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.34f9	d0 03		bne $34fe			bne  	CompareTrue
.34fb	4c 01 35	jmp $3501			jmp 	CompareFalse
.34fe					CompareTrue:
.34fe	4c 77 3d	jmp $3d77			jmp 	MInt32True
.3501					CompareFalse:
.3501	4c 7b 3d	jmp $3d7b			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3504					DereferenceTwo:
.3504	e8		inx				inx
.3505	20 09 35	jsr $3509			jsr 	DereferenceOne
.3508	ca		dex				dex
.3509					DereferenceOne:
.3509	b5 90		lda $90,x			lda 	esType,x
.350b	10 3d		bpl $354a			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.350d	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.350e	b0 3b		bcs $354b			bcs 	_DRFloatDeReference
.3510	98		tya				tya
.3511	48		pha				pha
.3512	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.3514	85 2a		sta $2a				sta 	temp0
.3516	b5 a0		lda $a0,x			lda 	esInt1,x
.3518	85 2b		sta $2b				sta 	temp0+1
.351a	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.351c	95 a0		sta $a0,x			sta 	esInt1,x
.351e	95 a8		sta $a8,x			sta 	esInt2,x
.3520	95 b0		sta $b0,x			sta 	esInt3,x
.3522	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.3524	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.3526	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.3527	30 0d		bmi $3536			bmi 	_DeRefString 				; string, 2 bytes only
.3529	d0 11		bne $353c			bne 	_DeRefByte 					; byte 1 byte only
.352b					_DeRefLong:
.352b	a0 03		ldy #$03			ldy 	#3
.352d	b1 2a		lda ($2a),y			lda 	(temp0),y
.352f	95 b0		sta $b0,x			sta 	esInt3,x
.3531	88		dey				dey
.3532	b1 2a		lda ($2a),y			lda 	(temp0),y
.3534	95 a8		sta $a8,x			sta 	esInt2,x
.3536					_DeRefString:
.3536	a0 01		ldy #$01			ldy 	#1
.3538	b1 2a		lda ($2a),y			lda 	(temp0),y
.353a	95 a0		sta $a0,x			sta 	esInt1,x
.353c					_DeRefByte:
.353c	a0 00		ldy #$00			ldy 	#0
.353e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3540	95 98		sta $98,x			sta 	esInt0,x
.3542	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.3544	29 40		and #$40			and 	#$40
.3546	95 90		sta $90,x			sta 	esType,x
.3548	68		pla				pla
.3549	a8		tay				tay
.354a					_DRNotReference
.354a	60		rts				rts
.354b					_DRFloatDereference:
.354b	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0 					; address to deref in temp0
.354e	8a		txa				txa
.354f	a2 1e		ldx #$1e		ldx	#30
.3551	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3554	aa		tax				tax
.3555	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.3557	95 90		sta $90,x			sta 	esType,x
.3559	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.355a					EvaluateLevel:
.355a	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.355c	b0 1e		bcs $357c			bcs 	_ELStack
.355e	48		pha				pha 								; save precedence level.
.355f	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3561	95 98		sta $98,x			sta 	esInt0,x
.3563	95 a0		sta $a0,x			sta 	esInt1,x
.3565	95 a8		sta $a8,x			sta 	esInt2,x
.3567	95 b0		sta $b0,x			sta 	esInt3,x
.3569	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.356b	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.356d	30 26		bmi $3595			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.356f	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3570	30 0f		bmi $3581			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3572	8a		txa				txa 								; stack level in X
.3573	a2 02		ldx #$02		ldx	#2
.3575	20 80 4d	jsr $4d80		jsr	variableHandler
.3578	aa		tax				tax
.3579	4c be 35	jmp $35be			jmp		_ELHasTerm
.357c					_ELStack:
.357c	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.357e	20 18 15	jsr $1518		jsr	errorHandler
.3581					_ELIsConstant:
.3581	4a		lsr a				lsr 	a 							; get the value back
.3582	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3584	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.3586					_ELCheckNext:
.3586	c8		iny				iny 								; look at next
.3587	b1 28		lda ($28),y			lda 	(codePtr),y
.3589	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.358b	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.358d	b0 2f		bcs $35be			bcs 	_ELHasTerm 					; done getting the constant.
.358f	20 57 36	jsr $3657			jsr 	ELShiftByteIn 				; shift byte into position.
.3592	4c 86 35	jmp $3586			jmp 	_ELCheckNext
.3595					_ELIsToken:
.3595	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3597	f0 0f		beq $35a8			beq 	_ELIsString
.3599	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.359b	d0 5f		bne $35fc			bne 	_ELCheckUnary
.359d	8a		txa				txa 								; put X into A
.359e	c8		iny				iny 								; skip over the float marker
.359f	a2 1a		ldx #$1a		ldx	#26
.35a1	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.35a4	aa		tax				tax 								; restore X
.35a5	4c be 35	jmp $35be			jmp 	_ELHasTerm
.35a8					_ELIsString:
.35a8	98		tya				tya 								; address of string is codePtr+y+1
.35a9	38		sec				sec
.35aa	65 28		adc $28				adc 	codePtr
.35ac	95 98		sta $98,x			sta 	esInt0,x
.35ae	a5 29		lda $29				lda 	codePtr+1
.35b0	69 00		adc #$00			adc 	#0
.35b2	95 a0		sta $a0,x			sta 	esInt1,x
.35b4	a9 40		lda #$40			lda 	#$40 						; set type to string value
.35b6	95 90		sta $90,x			sta 	esType,x
.35b8	c8		iny				iny 								; skip over string.
.35b9	98		tya				tya
.35ba	38		sec				sec									; +1 for the length itself.
.35bb	71 28		adc ($28),y			adc 	(codePtr),y
.35bd	a8		tay				tay 								; and fall through to term loop code.
.35be					_ELHasTerm:
.35be	b1 28		lda ($28),y			lda 	(codePtr),y
.35c0	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.35c2	90 04		bcc $35c8			bcc 	_ELPopExit
.35c4	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.35c6	90 02		bcc $35ca			bcc 	_ELHasBinaryTerm
.35c8					_ELPopExit:
.35c8	68		pla				pla
.35c9					_ELExit:
.35c9	60		rts				rts
.35ca					_ELHasBinaryTerm:
.35ca	84 32		sty $32				sty 	tempShort 					; save position
.35cc	a8		tay				tay 								; use token as an index and get the precedence.
.35cd	b9 ff 35	lda $35ff,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.35d0	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.35d2	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.35d4	68		pla				pla 								; restore current level.
.35d5	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.35d7	b0 f0		bcs $35c9			bcs 	_ELExit
.35d9	48		pha				pha 								; save current level back on the stack.
.35da	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.35dc	48		pha				pha
.35dd	c8		iny				iny
.35de	e8		inx				inx 								; calculate the RHS at the operator precedence.
.35df	a5 32		lda $32				lda 	tempShort
.35e1	20 5a 35	jsr $355a			jsr 	EvaluateLevel
.35e4	ca		dex				dex
.35e5	68		pla				pla 								; get the operator back out.
.35e6					_ELExecuteA:
.35e6	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.35e8	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.35e9	aa		tax				tax
.35ea	bd 17 32	lda $3217,x			lda 	Group0Vectors,x
.35ed	85 2a		sta $2a				sta 	temp0
.35ef	bd 18 32	lda $3218,x			lda 	Group0Vectors+1,x
.35f2	85 2b		sta $2b				sta 	temp0+1
.35f4	a6 32		ldx $32				ldx 	tempShort
.35f6	20 43 36	jsr $3643			jsr 	_ELCallTemp0
.35f9	4c be 35	jmp $35be			jmp 	_ELHasTerm 					; and loop back round.
.35fc					_ELCheckUnary:
.35fc	c8		iny				iny 								; skip over token.
.35fd	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.35ff	f0 19		beq $361a			beq 	_ELMinus
.3601	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3603	f0 2c		beq $3631			beq 	_ELIndirect
.3605	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3607	f0 28		beq $3631			beq 	_ELIndirect
.3609	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.360b	f0 39		beq $3646			beq 	_ELExtension
.360d	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.360f	90 04		bcc $3615			bcc 	_ELUSyntax
.3611	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3613	90 d1		bcc $35e6			bcc 	_ELExecuteA 				; if so do that token.
.3615					_ELUSyntax:
.3615	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3617	20 18 15	jsr $1518		jsr	errorHandler
.361a					_ELMinus:
.361a	20 ac 36	jsr $36ac			jsr 	EvaluateNumericTerm 		; get a number to negate.
.361d	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.361f	f0 0a		beq $362b			beq 	_ELMinusInteger
.3621	8a		txa				txa
.3622	a2 0e		ldx #$0e		ldx	#14
.3624	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3627	aa		tax				tax
.3628	4c be 35	jmp $35be			jmp 	_ELHasTerm
.362b					_ELMinusInteger:
.362b	20 35 3d	jsr $3d35			jsr 	MInt32Negate 				; do int negate
.362e	4c be 35	jmp $35be			jmp 	_ELHasTerm
.3631					_ELIndirect:
.3631	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.3632	20 b5 36	jsr $36b5			jsr 	EvaluateIntegerTerm 		; integer address
.3635	68		pla				pla
.3636	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.3638	f0 02		beq $363c			beq 	_ELHaveModifier
.363a	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.363c					_ELHaveModifier:
.363c	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.363e	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.3640	4c be 35	jmp $35be			jmp 	_ELHasTerm
.3643					_ELCallTemp0:
.3643	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3646					_ELExtension:
.3646	8a		txa				txa 								; stack pos in A
.3647	20 69 18	jsr $1869		jsr	extensionHandler
.364a	aa		tax				tax 								; restore stack
.364b	4c be 35	jmp $35be			jmp 	_ELHasTerm
.364e					UnaryParenthesis:
.364e	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.3650	20 5a 35	jsr $355a			jsr 	EvaluateLevel
.3653	20 ee 3d	jsr $3dee			jsr 	CheckRightParen 			; check for )
.3656	60		rts				rts
.3657					ELShiftByteIn:
.3657	48		pha				pha 								; save bits to shift in.
.3658	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.365a	48		pha				pha
.365b	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.365d	95 b0		sta $b0,x			sta 	esInt3,x
.365f	b5 a0		lda $a0,x			lda 	esInt1,x
.3661	95 a8		sta $a8,x			sta 	esInt2,x
.3663	b5 98		lda $98,x			lda 	esInt0,x
.3665	95 a0		sta $a0,x			sta 	esInt1,x
.3667	a9 00		lda #$00			lda 	#0
.3669	95 98		sta $98,x			sta 	esInt0,x
.366b	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.366c	29 03		and #$03			and 	#3 							; only want lower 2 bits
.366e	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3670					_ELShiftLoop:
.3670	4a		lsr a				lsr 	a
.3671	76 b0		ror $b0,x			ror 	esInt3,x
.3673	76 a8		ror $a8,x			ror 	esInt2,x
.3675	76 a0		ror $a0,x			ror 	esInt1,x
.3677	76 98		ror $98,x			ror 	esInt0,x
.3679	c9 01		cmp #$01			cmp 	#1
.367b	d0 f3		bne $3670			bne 	_ELShiftLoop
.367d	68		pla				pla 								; get original 6 bit value and OR in.
.367e	29 3f		and #$3f			and 	#$3F
.3680	15 98		ora $98,x			ora 	esInt0,x
.3682	95 98		sta $98,x			sta 	esInt0,x
.3684	60		rts				rts
.3685					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3685	01					.byte	$01			; $86 and
>3686	01					.byte	$01			; $87 or
>3687	01					.byte	$01			; $88 xor
>3688	02					.byte	$02			; $89 >=
>3689	02					.byte	$02			; $8a <=
>368a	02					.byte	$02			; $8b >
>368b	02					.byte	$02			; $8c <
>368c	02					.byte	$02			; $8d =
>368d	02					.byte	$02			; $8e <>
>368e	03					.byte	$03			; $8f +
>368f	03					.byte	$03			; $90 -
>3690	04					.byte	$04			; $91 >>
>3691	04					.byte	$04			; $92 <<
>3692	04					.byte	$04			; $93 *
>3693	04					.byte	$04			; $94 /
>3694	04					.byte	$04			; $95 mod
>3695	05					.byte	$05			; $96 ^
>3696	06					.byte	$06			; $97 !
>3697	06					.byte	$06			; $98 ?
>3698	82					.byte	$82			; $99 repeat
>3699	82					.byte	$82			; $9a while
>369a	82					.byte	$82			; $9b for
>369b	82					.byte	$82			; $9c if
>369c	82					.byte	$82			; $9d defproc
>369d	80					.byte	$80			; $9e until
>369e	80					.byte	$80			; $9f wend
>369f	80					.byte	$80			; $a0 next
>36a0	80					.byte	$80			; $a1 then
>36a1	80					.byte	$80			; $a2 endif
>36a2	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.36a3					EvaluateTerm:
.36a3	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.36a5	20 5a 35	jsr $355a			jsr 	EvaluateLevel
.36a8	20 09 35	jsr $3509			jsr 	DereferenceOne
.36ab	60		rts				rts
.36ac					EvaluateNumericTerm:
.36ac	20 a3 36	jsr $36a3			jsr 	EvaluateTerm
.36af	b5 90		lda $90,x			lda 	esType,x
.36b1	0a		asl a				asl 	a 							; see if it's a string.
.36b2	30 09		bmi $36bd			bmi 	ENTType
.36b4	60		rts				rts
.36b5					EvaluateIntegerTerm:
.36b5	20 a3 36	jsr $36a3			jsr 	EvaluateTerm
.36b8	b5 90		lda $90,x			lda 	esType,x
.36ba	d0 01		bne $36bd			bne 	ENTType
.36bc	60		rts				rts
.36bd					ENTType:
.36bd	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.36bf	20 18 15	jsr $1518		jsr	errorHandler
.36c2					EvaluateRoot:
.36c2	a2 00		ldx #$00			ldx 	#0
.36c4					Evaluate:
.36c4	a9 00		lda #$00			lda 	#0
.36c6	20 5a 35	jsr $355a			jsr 	EvaluateLevel
.36c9	20 09 35	jsr $3509			jsr 	DereferenceOne
.36cc	60		rts				rts
.36cd					EvaluateNumeric:
.36cd	20 c4 36	jsr $36c4			jsr 	Evaluate
.36d0	b5 90		lda $90,x			lda 	esType,x
.36d2	0a		asl a				asl 	a 							; see if it's a string.
.36d3	30 e8		bmi $36bd			bmi 	ENTType
.36d5	4a		lsr a				lsr 	a 							; shift float flag into carry.
.36d6	4a		lsr a				lsr 	a
.36d7	60		rts				rts
.36d8					EvaluateString:
.36d8	20 c4 36	jsr $36c4			jsr 	Evaluate
.36db	b5 90		lda $90,x			lda 	esType,x
.36dd	0a		asl a				asl 	a 							; see if it's a string.
.36de	10 dd		bpl $36bd			bpl 	ENTType
.36e0	60		rts				rts
.36e1					EvaluateRootInteger:
.36e1	a2 00		ldx #$00			ldx 	#0
.36e3					EvaluateInteger:
.36e3	20 c4 36	jsr $36c4			jsr 	Evaluate
.36e6	b5 90		lda $90,x			lda 	esType,x
.36e8	d0 d3		bne $36bd			bne 	ENTType
.36ea	60		rts				rts
.36eb					EvaluateSmallInteger:
.36eb	20 e3 36	jsr $36e3			jsr 	EvaluateInteger
.36ee	b5 a0		lda $a0,x			lda 	esInt1,x
.36f0	15 a8		ora $a8,x			ora 	esInt2,x
.36f2	15 b0		ora $b0,x			ora 	esInt3,x
.36f4	d0 03		bne $36f9			bne 	_ESIValue
.36f6	b5 98		lda $98,x			lda 	esInt0,x
.36f8	60		rts				rts
.36f9					_ESIValue:
.36f9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.36fb	20 18 15	jsr $1518		jsr	errorHandler
.36fe					LinkEvaluate:
.36fe	aa		tax				tax
.36ff	20 c4 36	jsr $36c4			jsr 	Evaluate
.3702	8a		txa				txa
.3703	60		rts				rts
.3704					LinkEvaluateTerm:
.3704	aa		tax				tax
.3705	20 a3 36	jsr $36a3			jsr 	EvaluateTerm
.3708	8a		txa				txa
.3709	60		rts				rts
.370a					LinkEvaluateInteger:
.370a	aa		tax				tax
.370b	20 e3 36	jsr $36e3			jsr 	EvaluateInteger
.370e	8a		txa				txa
.370f	60		rts				rts
.3710					LinkEvaluateString:
.3710	aa		tax				tax
.3711	20 d8 36	jsr $36d8			jsr 	EvaluateString
.3714	8a		txa				txa
.3715	60		rts				rts
.3716					LinkEvaluateSmallInt:
.3716	aa		tax				tax
.3717	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger
.371a	8a		txa				txa
.371b	60		rts				rts
.371c					EvaluateReference:
.371c	ad 96 36	lda $3696			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.371f	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.3720	e9 01		sbc #$01			sbc 	#1
.3722	20 5a 35	jsr $355a			jsr 	EvaluateLevel
.3725	b5 90		lda $90,x			lda 	esType,x
.3727	10 01		bpl $372a			bpl 	_ERFail
.3729	60		rts				rts
.372a					_ERFail:
.372a	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.372c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.372f					Event_Str:
.372f	20 cd 36	jsr $36cd			jsr 	EvaluateNumeric 			; get a number.
.3732	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.3734	d0 13		bne $3749			bne 	_ESFloat
.3736	20 8c 37	jsr $378c			jsr 	ConvertGetBase 				; get base, or default.
.3739	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.373b	85 2a		sta $2a				sta 	temp0
.373d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.373f	85 2b		sta $2b				sta 	1+(temp0)
.3741	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3743	20 d1 3c	jsr $3cd1			jsr 	MInt32ToString 				; convert to string.
.3746	4c 56 37	jmp $3756			jmp 	_ESCloneExit 				; clone and exit.
.3749					_ESFloat:
.3749	20 ee 3d	jsr $3dee			jsr 	CheckRightParen 			; check closing )
.374c	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.374f	8a		txa				txa
.3750	a2 16		ldx #$16		ldx	#22
.3752	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3755	aa		tax				tax
.3756					_ESCloneExit:
.3756	8a		txa				txa
.3757	a2 04		ldx #$04		ldx	#4
.3759	20 26 41	jsr $4126		jsr	stringHandler
.375c	aa		tax				tax
.375d	60		rts				rts
.375e					UnaryVal:
.375e	38		sec				sec 								; Carry set to return value
.375f	b0 01		bcs $3762			bcs 	ValueMain
.3761					UnaryIsVal:
.3761	18		clc				clc									; Carry clear to return legitimacy
.3762					ValueMain:
.3762	08		php				php 								; save results (CS is value, CC is validation)
.3763	20 d8 36	jsr $36d8			jsr 	EvaluateString
.3766	20 8c 37	jsr $378c			jsr 	ConvertGetBase 				; get base, if any.
.3769	98		tya				tya
.376a	48		pha				pha
.376b	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.376e	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3770	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3772	20 e9 3b	jsr $3be9			jsr 	MInt32FromString 			; convert it back from a string.
.3775	b0 0c		bcs $3783			bcs 	_VMSuccess 					; successfully converted.
.3777	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.3779	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.377b	f0 00		beq $377d			beq 	_VMFailed 	 				; so we failed.
.377d					_VMFailed:
.377d	68		pla				pla
.377e	a8		tay				tay
.377f	28		plp				plp
.3780	4c 7b 3d	jmp $3d7b			jmp 	MInt32False 				; return 0 whatever.
.3783					_VMSuccess:
.3783	68		pla				pla
.3784	a8		tay				tay
.3785	28		plp				plp 								; if CS the it was val() so we want the value.
.3786	b0 03		bcs $378b			bcs 	_VMExit
.3788	4c 77 3d	jmp $3d77			jmp 	MInt32True 					; otherwise return true as successful.
.378b					_VMExit:
.378b	60		rts				rts
.378c					ConvertGetBase:
.378c	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.378e	95 99		sta $99,x			sta 	esInt0+1,x
.3790	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3792	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3794	d0 0e		bne $37a4			bne 	_CGBDone 					; not found, should be )
.3796	e8		inx				inx 								; next level
.3797	c8		iny				iny 								; skip comma.
.3798	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger		; evaluate the base.
.379b	ca		dex				dex
.379c	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.379e	90 08		bcc $37a8			bcc 	_CGBValue 					; (it should work as high as 37)
.37a0	c9 11		cmp #$11			cmp 	#17
.37a2	b0 04		bcs $37a8			bcs 	_CGBValue
.37a4					_CGBDone:
.37a4	20 ee 3d	jsr $3dee			jsr 	CheckRightParen
.37a7	60		rts				rts
.37a8					_CGBValue:
.37a8	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.37aa	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.37ad					EventFunction:
.37ad	20 1c 37	jsr $371c			jsr 	EvaluateReference			; get the variable reference that tracks the event
.37b0	b5 90		lda $90,x			lda 	esType,x
.37b2	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.37b4	d0 5b		bne $3811			bne 	_EFType
.37b6	20 fb 3d	jsr $3dfb			jsr 	CheckComma
.37b9	e8		inx				inx
.37ba	20 e3 36	jsr $36e3			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.37bd	20 ee 3d	jsr $3dee			jsr 	CheckRightParen 			; finish off with the right bracket
.37c0	ca		dex				dex
.37c1	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.37c3	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.37c5	15 a8		ora $a8,x			ora 	esInt2,x
.37c7	15 b0		ora $b0,x			ora 	esInt3,x
.37c9	d0 41		bne $380c			bne 	_EFValue
.37cb	98		tya				tya
.37cc	48		pha				pha
.37cd	8a		txa				txa
.37ce	48		pha				pha
.37cf	a2 1c		ldx #$1c		ldx	#28
.37d1	20 f6 14	jsr $14f6		jsr	deviceHandler
.37d4	84 2d		sty $2d				sty 	temp1+1
.37d6	85 2c		sta $2c				sta 	temp1
.37d8	68		pla				pla
.37d9	aa		tax				tax
.37da	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.37dd	a0 03		ldy #$03			ldy 	#3							; if -ve
.37df	b1 2a		lda ($2a),y			lda 	(temp0),y
.37e1	30 23		bmi $3806			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.37e3	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.37e5	b1 2a		lda ($2a),y			lda 	(temp0),y
.37e7	c8		iny				iny
.37e8	11 2a		ora ($2a),y			ora 	(temp0),y
.37ea	f0 17		beq $3803			beq 	_EFInitialise 				; if so, initialise the value but return false.
.37ec	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.37ee	38		sec				sec
.37ef	b1 2a		lda ($2a),y			lda 	(temp0),y
.37f1	e5 2c		sbc $2c				sbc 	temp1
.37f3	c8		iny				iny
.37f4	b1 2a		lda ($2a),y			lda 	(temp0),y
.37f6	e5 2d		sbc $2d				sbc 	temp1+1
.37f8	10 0c		bpl $3806			bpl 	_EFFail 					; if trigger >= timer then return False
.37fa	20 16 38	jsr $3816			jsr 	SetEventTimer 				; reset the timer for next time.
.37fd	20 77 3d	jsr $3d77			jsr	 	MInt32True 					; and treutn true as fired.
.3800	68		pla				pla
.3801	a8		tay				tay
.3802	60		rts				rts
.3803					_EFInitialise:
.3803	20 16 38	jsr $3816			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3806					_EFFail:
.3806	68		pla				pla
.3807	a8		tay				tay
.3808	20 7b 3d	jsr $3d7b			jsr 	MInt32False
.380b	60		rts				rts
.380c					_EFValue:
.380c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.380e	20 18 15	jsr $1518		jsr	errorHandler
.3811					_EFType:
.3811	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3813	20 18 15	jsr $1518		jsr	errorHandler
.3816					SetEventTimer:
.3816	a0 00		ldy #$00			ldy 	#0
.3818	18		clc				clc
.3819	a5 2c		lda $2c				lda 	temp1
.381b	75 99		adc $99,x			adc 	esInt0+1,x
.381d	91 2a		sta ($2a),y			sta		(temp0),y
.381f	c8		iny				iny
.3820	a5 2d		lda $2d				lda 	temp1+1
.3822	75 a1		adc $a1,x			adc 	esInt1+1,x
.3824	91 2a		sta ($2a),y			sta		(temp0),y
.3826	88		dey				dey
.3827	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.3829	d0 04		bne $382f			bne 	_SETExit 					; zero means initialise.....
.382b	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.382d	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.382f					_SETExit:
.382f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.3830					UnaryLen:
.3830	20 3e 38	jsr $383e			jsr 	ULStart
.3833					ULFinish:
.3833	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3835	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3837	20 8a 3d	jsr $3d8a			jsr 	MInt32Set8Bit 				; write it out.
.383a	20 ee 3d	jsr $3dee			jsr 	CheckRightParen
.383d	60		rts				rts
.383e	20 d8 36	jsr $36d8	ULStart:jsr 	EvaluateString
.3841	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3843	85 2a		sta $2a				sta 	temp0
.3845	b5 a0		lda $a0,x			lda 	esInt1,x
.3847	85 2b		sta $2b				sta 	temp0+1
.3849	84 32		sty $32				sty 	tempShort 					; get length
.384b	a0 00		ldy #$00			ldy 	#0
.384d	60		rts				rts
.384e					UnaryAsc:
.384e	20 3e 38	jsr $383e			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3851	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3853	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3854	c9 00		cmp #$00			cmp 	#0
.3856	d0 db		bne $3833			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3858	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.385a	20 18 15	jsr $1518		jsr	errorHandler
.385d					UnaryAbs:
.385d	20 cd 36	jsr $36cd			jsr 	EvaluateNumeric 			; some numeric value
.3860	b0 07		bcs $3869			bcs 	_UAFloat 					; CS then float, so use that function
.3862	20 30 3d	jsr $3d30			jsr 	MInt32Absolute 				; int version
.3865	20 ee 3d	jsr $3dee			jsr 	CheckRightParen
.3868	60		rts				rts
.3869					_UAFloat:
.3869	8a		txa				txa 								; float version
.386a	a2 02		ldx #$02		ldx	#2
.386c	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.386f	aa		tax				tax
.3870	20 ee 3d	jsr $3dee			jsr 	CheckRightParen
.3873	60		rts				rts
.3874					UnarySgn:
.3874	20 cd 36	jsr $36cd			jsr 	EvaluateNumeric 			; same as above but sign of value
.3877	b0 07		bcs $3880			bcs 	_USFloat
.3879	20 68 3d	jsr $3d68			jsr 	MInt32Sign
.387c	20 ee 3d	jsr $3dee			jsr 	CheckRightParen
.387f	60		rts				rts
.3880					_USFloat:
.3880	8a		txa				txa
.3881	a2 10		ldx #$10		ldx	#16
.3883	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3886	aa		tax				tax
.3887	20 ee 3d	jsr $3dee			jsr 	CheckRightParen
.388a	60		rts				rts
.388b					UnaryPeek:
.388b	20 b7 38	jsr $38b7			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.388e	4c ab 38	jmp $38ab			jmp 	PDLByte0
.3891					UnaryDeek:
.3891	20 b7 38	jsr $38b7			jsr 	PDLCode
.3894	4c a5 38	jmp $38a5			jmp 	PDLByte1
.3897					UnaryLeek:
.3897	20 b7 38	jsr $38b7			jsr 	PDLCode
.389a	a0 03		ldy #$03			ldy 	#3							; read 3-2
.389c	b1 2a		lda ($2a),y			lda 	(temp0),y
.389e	95 b0		sta $b0,x			sta 	esInt3,x
.38a0	88		dey				dey
.38a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.38a3	95 a8		sta $a8,x			sta 	esInt2,x
.38a5					PDLByte1:
.38a5	a0 01		ldy #$01			ldy 	#1
.38a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.38a9	95 a0		sta $a0,x			sta 	esInt1,x
.38ab					PDLByte0:
.38ab	a0 00		ldy #$00			ldy 	#0
.38ad	b1 2a		lda ($2a),y			lda 	(temp0),y
.38af	95 98		sta $98,x			sta 	esInt0,x
.38b1	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.38b3	20 ee 3d	jsr $3dee			jsr 	CheckRightParen 			; check right and return
.38b6	60		rts				rts
.38b7					PDLCode:
.38b7	20 e3 36	jsr $36e3			jsr 	EvaluateInteger 			; some address
.38ba	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.38bc	85 2a		sta $2a				sta 	temp0
.38be	b5 a0		lda $a0,x			lda 	esInt1,x
.38c0	85 2b		sta $2b				sta 	temp0+1
.38c2	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.38c4	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.38c6	95 a8		sta $a8,x			sta 	esInt2,x
.38c8	95 b0		sta $b0,x			sta 	esInt3,x
.38ca	84 32		sty $32				sty 	tempShort 					; save Y
.38cc	60		rts				rts
.38cd					Unary_Random:
.38cd	20 ab 3d	jsr $3dab			jsr 	MInt32Random 				; generate random number.
.38d0	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.38d2	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.38d4	f0 08		beq $38de			beq 	_URExit
.38d6	e8		inx				inx 								; load range 0..r-1 into +1
.38d7	20 e3 36	jsr $36e3			jsr 	EvaluateInteger
.38da	ca		dex				dex
.38db	20 ce 3b	jsr $3bce			jsr 	MInt32Modulus 				; calculate random % modulus
.38de					_URExit:
.38de	20 ee 3d	jsr $3dee			jsr 	CheckRightParen 			; check right and return
.38e1	60		rts				rts
.38e2					Unary_Min:
.38e2	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.38e4	d0 02		bne $38e8			bne 	UnaryMBody
.38e6					Unary_Max:
.38e6	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.38e8					UnaryMBody:
.38e8	48		pha				pha 								; save comparator on stack, shows min or max
.38e9	20 c4 36	jsr $36c4			jsr 	Evaluate 					; get the first thing to check
.38ec					_UnaryMLoop:
.38ec	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.38ee	c8		iny				iny
.38ef	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.38f1	f0 09		beq $38fc			beq 	_UnaryMExit
.38f3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.38f5	f0 07		beq $38fe			beq 	_UnaryMCompare
.38f7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.38f9	20 18 15	jsr $1518		jsr	errorHandler
.38fc					_UnaryMExit:
.38fc	68		pla				pla 								; done so throw comparator and return.
.38fd	60		rts				rts
.38fe					_UnaryMCompare:
.38fe	e8		inx				inx 								; get the 2nd thing to evaluate
.38ff	20 c4 36	jsr $36c4			jsr 	Evaluate
.3902	ca		dex				dex
.3903	20 8a 34	jsr $348a			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3906	85 32		sta $32				sta 	tempShort 					; save result
.3908	68		pla				pla 								; get what we need
.3909	48		pha				pha
.390a	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.390c	d0 de		bne $38ec			bne 	_UnaryMLoop 				; no, try another value.
.390e	20 7b 3d	jsr $3d7b			jsr 	MInt32False 				; promote 2nd to 1st.
.3911	20 5f 3c	jsr $3c5f			jsr 	MInt32Add
.3914	4c ec 38	jmp $38ec			jmp 	_UnaryMLoop
.3917					Unary_Page:
.3917	20 7b 3d	jsr $3d7b			jsr 	MInt32False 				; zero
.391a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.391d	95 98		sta $98,x			sta 	esInt0,x
.391f	ad c9 0a	lda $0ac9			lda 	basePage+1
.3922	95 a0		sta $a0,x			sta 	esInt1,x
.3924	60		rts				rts
.3925					UnaryReference:
.3925	a9 0f		lda #$0f			lda 	#15
.3927	20 5a 35	jsr $355a			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.392a	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.392c	10 05		bpl $3933			bpl 	UType
.392e	a9 00		lda #$00			lda 	#0 							; make it an integer
.3930	95 90		sta $90,x			sta 	esType,x
.3932	60		rts				rts
.3933					UType:
.3933	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3935	20 18 15	jsr $1518		jsr	errorHandler
.3938					UnaryHexMarker:
.3938	4c b5 36	jmp $36b5			jmp 	EvaluateIntegerTerm
.393b					UnaryComplement:
.393b	20 b5 36	jsr $36b5			jsr 	EvaluateIntegerTerm
.393e	20 4f 3d	jsr $3d4f			jsr 	MInt32Not
.3941	60		rts				rts
.3942					UnaryIntToFloat:
.3942	20 cd 36	jsr $36cd			jsr 	EvaluateNumeric				; some number
.3945	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3947	d0 0b		bne $3954			bne 	_UIFExit
.3949	8a		txa				txa 								; convert and set type
.394a	a2 1c		ldx #$1c		ldx	#28
.394c	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.394f	aa		tax				tax
.3950	a9 01		lda #$01			lda 	#1
.3952	95 90		sta $90,x			sta 	esType,x
.3954					_UIFExit:
.3954	60		rts				rts
.3955					UnaryFloatToInt:
.3955	20 cd 36	jsr $36cd			jsr 	EvaluateNumeric 			; the number
.3958	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.395a	f0 0b		beq $3967			beq 	_UFIExit
.395c	8a		txa				txa 								; convert to int
.395d	a2 14		ldx #$14		ldx	#20
.395f	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.3962	aa		tax				tax
.3963	a9 00		lda #$00			lda 	#0 							; set type
.3965	95 90		sta $90,x			sta 	esType,x
.3967					_UFIExit:
.3967	60		rts				rts
.3968					UnaryAlloc:
.3968	e8		inx				inx 								; evaluate memory required
.3969	20 e3 36	jsr $36e3			jsr 	EvaluateInteger
.396c	20 ee 3d	jsr $3dee			jsr 	CheckRightParen
.396f	ca		dex				dex
.3970	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3972	15 b1		ora $b1,x			ora 	esInt3+1,x
.3974	d0 1d		bne $3993			bne 	_UABadValue
.3976	20 7b 3d	jsr $3d7b			jsr 	MInt32False					; zero return.
.3979	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.397b	95 a0		sta $a0,x			sta 	esInt1,x
.397d	a5 35		lda $35				lda 	lowMemory
.397f	95 98		sta $98,x			sta 	esInt0,x
.3981	18		clc				clc 								; add alloc required.
.3982	75 99		adc $99,x			adc 	esInt0+1,x
.3984	85 35		sta $35				sta 	lowMemory
.3986	a5 36		lda $36				lda 	lowMemory+1
.3988	75 a1		adc $a1,x			adc 	esInt1+1,x
.398a	85 36		sta $36				sta 	lowMemory+1
.398c	b0 05		bcs $3993			bcs		_UABadValue 				; overflow definitely bad.
.398e	c5 34		cmp $34				cmp 	highMemory+1
.3990	b0 01		bcs $3993			bcs 	_UABadValue 				; out of memory bad.
.3992	60		rts				rts
.3993					_UABadValue:
.3993	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3995	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3998					UnaryTimer:
.3998	20 ee 3d	jsr $3dee			jsr 	CheckRightParen 			; no parameters
.399b	98		tya				tya
.399c	48		pha				pha
.399d	20 a2 3d	jsr $3da2			jsr 	MInt32Zero 					; zero result
.39a0	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.39a2	a2 1c		ldx #$1c		ldx	#28
.39a4	20 f6 14	jsr $14f6		jsr	deviceHandler
.39a7	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.39a9	95 98		sta $98,x			sta 	esInt0,x
.39ab	98		tya				tya
.39ac	95 a0		sta $a0,x			sta 	esInt1,x
.39ae	68		pla				pla
.39af	a8		tay				tay
.39b0	60		rts				rts
.39b1					UnaryInkey:
.39b1	20 ee 3d	jsr $3dee			jsr 	CheckRightParen
.39b4	86 2a		stx $2a				stx 	temp0
.39b6	a2 0a		ldx #$0a		ldx	#10
.39b8	20 f6 14	jsr $14f6		jsr	deviceHandler
.39bb	a6 2a		ldx $2a				ldx 	temp0
.39bd	20 8a 3d	jsr $3d8a			jsr 	MInt32Set8Bit
.39c0	60		rts				rts
.39c1					UnaryGet:
.39c1	20 ee 3d	jsr $3dee			jsr 	CheckRightParen
.39c4	86 2a		stx $2a				stx 	temp0
.39c6					_UGLoop:
.39c6	a2 02		ldx #$02		ldx	#2
.39c8	20 f6 14	jsr $14f6		jsr	deviceHandler
.39cb	a2 0a		ldx #$0a		ldx	#10
.39cd	20 f6 14	jsr $14f6		jsr	deviceHandler
.39d0	c9 00		cmp #$00			cmp 	#0
.39d2	f0 f2		beq $39c6			beq 	_UGLoop
.39d4	a6 2a		ldx $2a				ldx 	temp0
.39d6	20 8a 3d	jsr $3d8a			jsr 	MInt32Set8Bit
.39d9	60		rts				rts
.39da					UnaryGetString:
.39da	20 c1 39	jsr $39c1			jsr 	UnaryGet
.39dd					UGSDoChr:
.39dd	4c 2e 3a	jmp $3a2e			jmp 	ChrCode
.39e0					UnaryInkeyString:
.39e0	20 b1 39	jsr $39b1			jsr 	UnaryInkey
.39e3	b5 98		lda $98,x			lda 	esInt0,x
.39e5	d0 f6		bne $39dd			bne 	UGSDoChr
.39e7	8a		txa				txa
.39e8	a2 08		ldx #$08		ldx	#8
.39ea	20 26 41	jsr $4126		jsr	stringHandler
.39ed	aa		tax				tax
.39ee	60		rts				rts
.39ef					UnarySys:
.39ef	20 e3 36	jsr $36e3			jsr 	EvaluateInteger 				; get the address
.39f2	20 ee 3d	jsr $3dee			jsr 	CheckRightParen
.39f5	20 cf 2a	jsr $2acf			jsr 	TOSToTemp0 						; copy call address to temp0
.39f8	8a		txa				txa
.39f9	48		pha				pha
.39fa	98		tya				tya
.39fb	48		pha				pha
.39fc	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.39ff	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3a02	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3a05	20 14 3a	jsr $3a14			jsr 	_CallTemp0
.3a08	85 32		sta $32				sta 	tempShort 						; restore YX
.3a0a	68		pla				pla
.3a0b	a8		tay				tay
.3a0c	68		pla				pla
.3a0d	aa		tax				tax
.3a0e	a5 32		lda $32				lda 	tempShort
.3a10	20 8a 3d	jsr $3d8a			jsr 	MInt32Set8Bit 					; return result.
.3a13	60		rts				rts
.3a14					_CallTemp0:
.3a14	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3a17					UnaryMem:
.3a17	20 7b 3d	jsr $3d7b			jsr 	MInt32False 					; set to false (e.g. 0)
.3a1a	38		sec				sec
.3a1b	a5 33		lda $33				lda 	highMemory 						; calculate value
.3a1d	e5 35		sbc $35				sbc 	lowMemory
.3a1f	95 98		sta $98,x			sta 	esInt0,x
.3a21	a5 34		lda $34				lda 	highMemory+1
.3a23	e5 36		sbc $36				sbc 	lowMemory+1
.3a25	95 a0		sta $a0,x			sta 	esInt1,x
.3a27	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3a28					ExecChr:
.3a28	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger		; character number 0-255
.3a2b	20 ee 3d	jsr $3dee			jsr 	CheckRightParen				; right bracket
.3a2e					ChrCode:
.3a2e	98		tya				tya
.3a2f	48		pha				pha
.3a30	8a		txa				txa 								; A = stack
.3a31	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3a33	a2 02		ldx #$02		ldx	#2
.3a35	20 26 41	jsr $4126		jsr	stringHandler
.3a38	aa		tax				tax 								; X = stack
.3a39	68		pla				pla
.3a3a	a8		tay				tay
.3a3b	60		rts				rts
.3a3c					ExecLower:
.3a3c	38		sec				sec 								; set carry is lower
.3a3d	b0 01		bcs $3a40			bcs 	ExecUpperLower
.3a3f					ExecUpper:
.3a3f	18		clc				clc 								; clear carry is upper
.3a40					ExecUpperLower:
.3a40	08		php				php 								; save carry
.3a41	20 d8 36	jsr $36d8			jsr 	EvaluateString 				; string to stack,X
.3a44	20 ee 3d	jsr $3dee			jsr 	CheckRightParen 			; check closing right bracket.
.3a47	28		plp				plp 								; restore carry, save Y
.3a48	98		tya				tya
.3a49	48		pha				pha
.3a4a	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3a4c	2a		rol a				rol 	a
.3a4d	a8		tay				tay 								; now in Y
.3a4e	8a		txa				txa 								; do the substring and exit.
.3a4f	a2 0c		ldx #$0c		ldx	#12
.3a51	20 26 41	jsr $4126		jsr	stringHandler
.3a54	aa		tax				tax
.3a55	68		pla				pla
.3a56	a8		tay				tay
.3a57	60		rts				rts
.3a58					ExecLeft:
.3a58	20 d8 36	jsr $36d8			jsr 	EvaluateString 				; string to stack,X
.3a5b	20 fb 3d	jsr $3dfb			jsr 	CheckComma
.3a5e	e8		inx				inx
.3a5f	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3a61	20 8a 3d	jsr $3d8a			jsr 	MInt32Set8Bit
.3a64	e8		inx				inx
.3a65	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3a68					ExecSubstring:
.3a68	ca		dex				dex 								; fix up X
.3a69	ca		dex				dex
.3a6a	20 ee 3d	jsr $3dee			jsr 	CheckRightParen 			; check closing right bracket.
.3a6d	8a		txa				txa 								; do the substring and exit.
.3a6e	a2 0e		ldx #$0e		ldx	#14
.3a70	20 26 41	jsr $4126		jsr	stringHandler
.3a73	aa		tax				tax
.3a74	60		rts				rts
.3a75					ExecMid:
.3a75	20 d8 36	jsr $36d8			jsr 	EvaluateString 				; string to stack,X
.3a78	20 fb 3d	jsr $3dfb			jsr 	CheckComma
.3a7b	e8		inx				inx
.3a7c	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3a7f	c9 00		cmp #$00			cmp 	#0
.3a81	f0 15		beq $3a98			beq 	_EMValue
.3a83	e8		inx				inx
.3a84	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3a86	20 8a 3d	jsr $3d8a			jsr 	MInt32Set8Bit
.3a89	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3a8b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3a8d	f0 d9		beq $3a68			beq 	ExecSubString
.3a8f	20 fb 3d	jsr $3dfb			jsr 	CheckComma
.3a92	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3a95	4c 68 3a	jmp $3a68			jmp 	ExecSubString
.3a98					_EMValue:
.3a98	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3a9a	20 18 15	jsr $1518		jsr	errorHandler
.3a9d					ExecRight:
.3a9d	20 d8 36	jsr $36d8			jsr 	EvaluateString 				; string to stack,X
.3aa0	20 fb 3d	jsr $3dfb			jsr 	CheckComma
.3aa3	e8		inx				inx
.3aa4	20 eb 36	jsr $36eb			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3aa7	ca		dex				dex
.3aa8	98		tya				tya
.3aa9	48		pha				pha
.3aaa	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3aac	85 2a		sta $2a				sta 	temp0
.3aae	b5 a0		lda $a0,x			lda 	esInt1,x
.3ab0	85 2b		sta $2b				sta 	temp0+1
.3ab2	a0 00		ldy #$00			ldy 	#0 							; point to length
.3ab4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3ab6	18		clc				clc 								; add 1.
.3ab7	69 01		adc #$01			adc 	#1
.3ab9	38		sec				sec
.3aba	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3abc	f0 02		beq $3ac0			beq		_ERMake1 					; if zero, make it 1.
.3abe	b0 02		bcs $3ac2			bcs		_EROkay
.3ac0					_ERMake1:
.3ac0	a9 01		lda #$01			lda 	#1 							; start position.
.3ac2					_EROkay:
.3ac2	e8		inx				inx 								; set start pos.
.3ac3	95 98		sta $98,x			sta 	esInt0,x
.3ac5	e8		inx				inx
.3ac6	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3ac8	20 8a 3d	jsr $3d8a			jsr 	MInt32Set8Bit
.3acb	68		pla				pla
.3acc	a8		tay				tay
.3acd	4c 68 3a	jmp $3a68			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3ad0					MInt32And:
.3ad0	b5 98		lda $98,x			lda 	esInt0,x
.3ad2	35 99		and $99,x			and 	esInt0+1,x
.3ad4	95 98		sta $98,x			sta 	esInt0,x
.3ad6	b5 a0		lda $a0,x			lda 	esInt1,x
.3ad8	35 a1		and $a1,x			and 	esInt1+1,x
.3ada	95 a0		sta $a0,x			sta 	esInt1,x
.3adc	b5 a8		lda $a8,x			lda 	esInt2,x
.3ade	35 a9		and $a9,x			and 	esInt2+1,x
.3ae0	95 a8		sta $a8,x			sta 	esInt2,x
.3ae2	b5 b0		lda $b0,x			lda 	esInt3,x
.3ae4	35 b1		and $b1,x			and 	esInt3+1,x
.3ae6	95 b0		sta $b0,x			sta 	esInt3,x
.3ae8	60		rts				rts
.3ae9					MInt32Or:
.3ae9	b5 98		lda $98,x			lda 	esInt0,x
.3aeb	15 99		ora $99,x			ora 	esInt0+1,x
.3aed	95 98		sta $98,x			sta 	esInt0,x
.3aef	b5 a0		lda $a0,x			lda 	esInt1,x
.3af1	15 a1		ora $a1,x			ora 	esInt1+1,x
.3af3	95 a0		sta $a0,x			sta 	esInt1,x
.3af5	b5 a8		lda $a8,x			lda 	esInt2,x
.3af7	15 a9		ora $a9,x			ora 	esInt2+1,x
.3af9	95 a8		sta $a8,x			sta 	esInt2,x
.3afb	b5 b0		lda $b0,x			lda 	esInt3,x
.3afd	15 b1		ora $b1,x			ora 	esInt3+1,x
.3aff	95 b0		sta $b0,x			sta 	esInt3,x
.3b01	60		rts				rts
.3b02					MInt32Xor:
.3b02	b5 98		lda $98,x			lda 	esInt0,x
.3b04	55 99		eor $99,x			eor 	esInt0+1,x
.3b06	95 98		sta $98,x			sta 	esInt0,x
.3b08	b5 a0		lda $a0,x			lda 	esInt1,x
.3b0a	55 a1		eor $a1,x			eor 	esInt1+1,x
.3b0c	95 a0		sta $a0,x			sta 	esInt1,x
.3b0e	b5 a8		lda $a8,x			lda 	esInt2,x
.3b10	55 a9		eor $a9,x			eor 	esInt2+1,x
.3b12	95 a8		sta $a8,x			sta 	esInt2,x
.3b14	b5 b0		lda $b0,x			lda 	esInt3,x
.3b16	55 b1		eor $b1,x			eor 	esInt3+1,x
.3b18	95 b0		sta $b0,x			sta 	esInt3,x
.3b1a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3b1b					MInt32Compare:
.3b1b	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3b1d	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3b1f	d0 13		bne $3b34			bne 	MInt32Compare2
.3b21	b5 a0		lda $a0,x			lda 	esInt1,x
.3b23	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3b25	d0 0d		bne $3b34			bne 	MInt32Compare2
.3b27	b5 a8		lda $a8,x			lda 	esInt2,x
.3b29	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3b2b	d0 07		bne $3b34			bne 	MInt32Compare2
.3b2d	b5 b0		lda $b0,x			lda 	esInt3,x
.3b2f	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3b31	d0 01		bne $3b34			bne 	MInt32Compare2
.3b33	60		rts				rts
.3b34					MInt32Compare2:
.3b34	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3b36	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3b38	b5 a0		lda $a0,x			lda		esInt1,x
.3b3a	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3b3c	b5 a8		lda $a8,x			lda		esInt2,x
.3b3e	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3b40	b5 b0		lda $b0,x			lda		esInt3,x
.3b42	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3b44	50 02		bvc $3b48			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3b46	49 80		eor #$80			eor 	#$80
.3b48					_I32LNoOverflow
.3b48	30 03		bmi $3b4d			bmi 	MInt32CLess					; if -ve then return $FF
.3b4a	a9 01		lda #$01			lda 	#$01						; else return $01
.3b4c	60		rts				rts
.3b4d					MInt32CLess:
.3b4d	a9 ff		lda #$ff			lda 	#$FF
.3b4f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3b50					MInt32SDivide:
.3b50	98		tya				tya  								; save Y, which is the count of negations
.3b51	48		pha				pha
.3b52	a0 00		ldy #$00			ldy 	#0 							; zero count
.3b54	20 6c 3b	jsr $3b6c			jsr 	_MInt32SRemSign 			; unsign TOS
.3b57	e8		inx				inx 								; unsign TOS+1
.3b58	20 6c 3b	jsr $3b6c			jsr 	_MInt32SRemSign
.3b5b	ca		dex				dex
.3b5c	98		tya				tya 								; save sign count on stack
.3b5d	48		pha				pha
.3b5e	20 75 3b	jsr $3b75			jsr 	MInt32UDivide 				; unsigned division
.3b61	68		pla				pla 								; get sign count back
.3b62	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3b64	f0 03		beq $3b69			beq 	_I32SNoNeg
.3b66	20 35 3d	jsr $3d35			jsr 	MInt32Negate
.3b69					_I32SNoNeg:
.3b69	68		pla				pla 								; restoe Y and exit
.3b6a	a8		tay				tay
.3b6b	60		rts				rts
.3b6c					_MInt32SRemSign:
.3b6c	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3b6e	10 04		bpl $3b74			bpl 	_MInt32SRSExit
.3b70	c8		iny				iny 								; increment the sign count
.3b71	20 35 3d	jsr $3d35			jsr 	MInt32Negate 				; negate the value.
.3b74					_MInt32SRSExit:
.3b74	60		rts				rts
.3b75					MInt32UDivide:
.3b75	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3b77	15 a1		ora $a1,x			ora 	esInt1+1,x
.3b79	15 a2		ora $a2,x			ora 	esInt1+2,x
.3b7b	15 a3		ora $a3,x			ora 	esInt1+3,x
.3b7d	f0 4a		beq $3bc9			beq 	_MInt32DZero
.3b7f	e8		inx				inx 								; clear A
.3b80	e8		inx				inx
.3b81	20 7b 3d	jsr $3d7b			jsr 	MInt32False
.3b84	ca		dex				dex
.3b85	ca		dex				dex
.3b86	98		tya				tya 								; save Y on the stack
.3b87	48		pha				pha
.3b88	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3b8a					_MInt32UDLoop:
.3b8a	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3b8c	36 a0		rol $a0,x			rol 	esInt1,x
.3b8e	36 a8		rol $a8,x			rol 	esInt2,x
.3b90	36 b0		rol $b0,x			rol 	esInt3,x
.3b92	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3b94	36 a2		rol $a2,x			rol 	esInt1+2,x
.3b96	36 aa		rol $aa,x			rol 	esInt2+2,x
.3b98	36 b2		rol $b2,x			rol 	esInt3+2,x
.3b9a	38		sec				sec 								; calculate A-M saving result on the stack
.3b9b	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3b9d	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3b9f	48		pha				pha
.3ba0	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3ba2	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3ba4	48		pha				pha
.3ba5	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3ba7	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3ba9	48		pha				pha
.3baa	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3bac	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3bae	90 10		bcc $3bc0			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3bb0	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3bb2	68		pla				pla
.3bb3	95 aa		sta $aa,x			sta 	esInt2+2,x
.3bb5	68		pla				pla
.3bb6	95 a2		sta $a2,x			sta 	esInt1+2,x
.3bb8	68		pla				pla
.3bb9	95 9a		sta $9a,x			sta 	esInt0+2,x
.3bbb	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3bbd	4c c3 3b	jmp $3bc3			jmp 	_MInt32Next 					; do the next iteration
.3bc0					_MInt32NoSubtract:
.3bc0	68		pla				pla
.3bc1	68		pla				pla
.3bc2	68		pla				pla
.3bc3					_MInt32Next:
.3bc3	88		dey				dey 								; do this 32 times.
.3bc4	d0 c4		bne $3b8a			bne 	_MInt32UDLoop
.3bc6	68		pla				pla 								; restore Y and exit
.3bc7	a8		tay				tay
.3bc8	60		rts				rts
.3bc9					_MInt32DZero:
.3bc9	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3bcb	20 18 15	jsr $1518		jsr	errorHandler
.3bce					MInt32Modulus:
.3bce	20 75 3b	jsr $3b75			jsr 	MInt32UDivide 				; do the division.
.3bd1	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3bd3	95 b0		sta $b0,x			sta 	esInt3,x
.3bd5	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3bd7	95 a8		sta $a8,x			sta 	esInt2,x
.3bd9	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3bdb	95 a0		sta $a0,x			sta 	esInt1,x
.3bdd	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3bdf	95 98		sta $98,x			sta 	esInt0,x
.3be1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d4e					fs32Length:
>0d4e							.fill 	1
.3be2					LinkInt32FromString:
.3be2	aa		tax				tax
.3be3	98		tya				tya
.3be4	20 e9 3b	jsr $3be9			jsr 	MInt32FromString
.3be7	8a		txa				txa
.3be8	60		rts				rts
.3be9					MInt32FromString:
.3be9	85 32		sta $32				sta 	tempShort 					; save base
.3beb	98		tya				tya
.3bec	48		pha				pha
.3bed	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3bef	b1 2a		lda ($2a),y			lda 	(temp0),y
.3bf1	8d 4e 0d	sta $0d4e			sta 	fs32Length
.3bf4	f0 65		beq $3c5b			beq 	_I32FSFail2					; fail if length zero.
.3bf6	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3bf8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3bfa	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3bfc	d0 09		bne $3c07			bne 	_I32FSNotNegative
.3bfe	ad 4e 0d	lda $0d4e			lda 	fs32Length 					; get length back.
.3c01	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3c03	f0 56		beq $3c5b			beq 	_I32FSFail2
.3c05	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3c07					_I32FSNotNegative:
.3c07	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3c09	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3c0b	d0 02		bne $3c0f			bne 	_I32FSNN2
.3c0d	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3c0f					_I32FSNN2:
.3c0f	48		pha				pha 								; save base + final sign on stack.
.3c10	20 7b 3d	jsr $3d7b			jsr 	MInt32False 				; zero the return value.
.3c13					_I32FSMainLoop:
.3c13	68		pla				pla 								; get the base back into tempShort
.3c14	48		pha				pha
.3c15	29 7f		and #$7f			and 	#$7F
.3c17	85 32		sta $32				sta 	tempShort
.3c19	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3c1b	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3c1d	90 02		bcc $3c21			bcc 	_I32FSNotLC
.3c1f	e9 20		sbc #$20			sbc 	#32
.3c21					_I32FSNotLC:
.3c21	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3c22	e9 30		sbc #$30			sbc 	#"0"
.3c24	90 34		bcc $3c5a			bcc 	_I32FSFail 					; nothing more to do.
.3c26	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3c28	90 06		bcc $3c30			bcc 	_I32FSValidate
.3c2a	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3c2c	90 2c		bcc $3c5a			bcc 	_I32FSFail
.3c2e	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3c30					_I32FSValidate:
.3c30	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3c32	b0 26		bcs $3c5a			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3c34	48		pha				pha 								; save the new digit value.
.3c35	e8		inx				inx 								; put base into next slot up on stack
.3c36	a5 32		lda $32				lda 	tempShort
.3c38	20 8a 3d	jsr $3d8a			jsr 	MInt32Set8Bit
.3c3b	ca		dex				dex
.3c3c	20 93 3c	jsr $3c93			jsr 	MInt32Multiply 				; multiply current by the base
.3c3f	e8		inx				inx
.3c40	68		pla				pla  								; put additive into next slot
.3c41	20 8a 3d	jsr $3d8a			jsr 	MInt32Set8Bit
.3c44	ca		dex				dex
.3c45	20 5f 3c	jsr $3c5f			jsr 	MInt32Add 					; and add it
.3c48	c8		iny				iny 								; bump the character pointer
.3c49	cc 4e 0d	cpy $0d4e			cpy 	fs32Length 					; until > length.
.3c4c	f0 c5		beq $3c13			beq 	_I32FSMainLoop
.3c4e	90 c3		bcc $3c13			bcc 	_I32FSMainLoop
.3c50					_I32FSDone:
.3c50	68		pla				pla 								; get base/final sign back
.3c51	10 03		bpl $3c56			bpl 	_I32FSNN3
.3c53	20 35 3d	jsr $3d35			jsr 	MInt32Negate 				; negate the result.
.3c56					_I32FSNN3:
.3c56	68		pla				pla
.3c57	a8		tay				tay
.3c58	38		sec				sec
.3c59	60		rts				rts
.3c5a					_I32FSFail:
.3c5a	68		pla				pla
.3c5b					_I32FSFail2:
.3c5b	68		pla				pla
.3c5c	a8		tay				tay
.3c5d	18		clc				clc
.3c5e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3c5f					MInt32Add:
.3c5f	18		clc				clc
.3c60	b5 98		lda $98,x			lda 	esInt0,x
.3c62	75 99		adc $99,x			adc 	esInt0+1,x
.3c64	95 98		sta $98,x			sta 	esInt0,x
.3c66	b5 a0		lda $a0,x			lda 	esInt1,x
.3c68	75 a1		adc $a1,x			adc 	esInt1+1,x
.3c6a	95 a0		sta $a0,x			sta 	esInt1,x
.3c6c	b5 a8		lda $a8,x			lda 	esInt2,x
.3c6e	75 a9		adc $a9,x			adc 	esInt2+1,x
.3c70	95 a8		sta $a8,x			sta 	esInt2,x
.3c72	b5 b0		lda $b0,x			lda 	esInt3,x
.3c74	75 b1		adc $b1,x			adc 	esInt3+1,x
.3c76	95 b0		sta $b0,x			sta 	esInt3,x
.3c78	60		rts				rts
.3c79					MInt32Sub:
.3c79	38		sec				sec
.3c7a	b5 98		lda $98,x			lda 	esInt0,x
.3c7c	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3c7e	95 98		sta $98,x			sta 	esInt0,x
.3c80	b5 a0		lda $a0,x			lda 	esInt1,x
.3c82	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3c84	95 a0		sta $a0,x			sta 	esInt1,x
.3c86	b5 a8		lda $a8,x			lda 	esInt2,x
.3c88	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3c8a	95 a8		sta $a8,x			sta 	esInt2,x
.3c8c	b5 b0		lda $b0,x			lda 	esInt3,x
.3c8e	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3c90	95 b0		sta $b0,x			sta 	esInt3,x
.3c92	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3c93					MInt32Multiply:
.3c93	e8		inx				inx 								; copy 2nd -> 3rd
.3c94	20 b9 3c	jsr $3cb9			jsr 	MInt32CopyUp
.3c97	ca		dex				dex
.3c98	20 b9 3c	jsr $3cb9			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3c9b	20 7b 3d	jsr $3d7b			jsr 	MInt32False 				; zero 1st.
.3c9e					_I32Loop:
.3c9e	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3ca0	29 01		and #$01			and 	#1
.3ca2	f0 03		beq $3ca7			beq 	_I32NoAdd 					; if set
.3ca4	20 5f 3c	jsr $3c5f			jsr 	MInt32Add 					; add 2nd to 1st.
.3ca7					_I32NoAdd:
.3ca7	e8		inx				inx 								; shift 2nd left
.3ca8	20 90 3d	jsr $3d90			jsr 	MInt32ShiftLeft
.3cab	e8		inx				inx  								; shift 3rd right
.3cac	20 99 3d	jsr $3d99			jsr 	MInt32ShiftRight
.3caf	20 a2 3d	jsr $3da2			jsr 	MInt32Zero 					; check if zero.
.3cb2	08		php				php 								; save status bits
.3cb3	ca		dex				dex 	 							; point back to 1st
.3cb4	ca		dex				dex
.3cb5	28		plp				plp 								; get status bits
.3cb6	d0 e6		bne $3c9e			bne 	_I32Loop 					; if non-zero keep going.
.3cb8	60		rts				rts
.3cb9					MInt32CopyUp:
.3cb9	b5 98		lda $98,x			lda 	esInt0,x
.3cbb	95 99		sta $99,x			sta 	esInt0+1,x
.3cbd	b5 a0		lda $a0,x			lda 	esInt1,x
.3cbf	95 a1		sta $a1,x			sta 	esInt1+1,x
.3cc1	b5 a8		lda $a8,x			lda 	esInt2,x
.3cc3	95 a9		sta $a9,x			sta 	esInt2+1,x
.3cc5	b5 b0		lda $b0,x			lda 	esInt3,x
.3cc7	95 b1		sta $b1,x			sta 	esInt3+1,x
.3cc9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d4f					MCharCount:	.fill 	1						; count of converted characters
.3cca					MLInt32ToString:
.3cca	aa		tax				tax									; module passes stack in A, base in Y
.3ccb	98		tya				tya
.3ccc	20 d1 3c	jsr $3cd1			jsr 	MInt32ToString
.3ccf	8a		txa				txa
.3cd0	60		rts				rts
.3cd1					MInt32ToString:
.3cd1	48		pha				pha 								; save base
.3cd2	85 32		sta $32				sta 	tempShort 					; save target base.
.3cd4	a9 00		lda #$00			lda 	#0
.3cd6	8d 4f 0d	sta $0d4f			sta 	MCharCount 					; clear character count to 0
.3cd9	98		tya				tya
.3cda	48		pha				pha
.3cdb	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3cdd	10 10		bpl $3cef			bpl 	_I32TSUnsigned
.3cdf	48		pha				pha 								; save base on stack.
.3ce0	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3ce2	10 08		bpl $3cec			bpl 	_I32TSNoFlip
.3ce4	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3ce6	20 22 3d	jsr $3d22			jsr 	MI32WriteCharacter
.3ce9	20 35 3d	jsr $3d35			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3cec					_I32TSNoFlip:
.3cec	68		pla				pla 								; get the base back
.3ced	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3cef					_I32TSUnsigned:
.3cef	20 fd 3c	jsr $3cfd			jsr 	MI32DivideWrite 			; recursive code to output string.
.3cf2	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3cf4	ad 4f 0d	lda $0d4f			lda 	MCharCount
.3cf7	91 2a		sta ($2a),y			sta 	(temp0),y
.3cf9	68		pla				pla
.3cfa	a8		tay				tay
.3cfb	68		pla				pla
.3cfc	60		rts				rts
.3cfd					MI32DivideWrite:
.3cfd	48		pha				pha 								; save the divisor/base
.3cfe	e8		inx				inx 								; write in the dividing position.
.3cff	20 8a 3d	jsr $3d8a			jsr 	MInt32Set8Bit
.3d02	ca		dex				dex
.3d03	20 75 3b	jsr $3b75			jsr 	MInt32UDivide 				; divide number by base.
.3d06	68		pla				pla 								; get the base into Y
.3d07	a8		tay				tay
.3d08	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3d0a	48		pha				pha
.3d0b	20 a2 3d	jsr $3da2			jsr 	MInt32Zero 					; is the result zero ?
.3d0e	f0 04		beq $3d14			beq 	_I32NoRecurse 				; if so, don't recurse.
.3d10	98		tya				tya 								; put base into A
.3d11	20 fd 3c	jsr $3cfd			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3d14					_I32NoRecurse:
.3d14	68		pla				pla 								; get the remainder back
.3d15	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3d17	90 02		bcc $3d1b			bcc 	_I32NotHex
.3d19	69 06		adc #$06			adc 	#7-1
.3d1b					_I32NotHex:
.3d1b	18		clc				clc 								; make it ASCII
.3d1c	69 30		adc #$30			adc 	#48
.3d1e	20 22 3d	jsr $3d22			jsr 	MI32WriteCharacter 			; write the character out
.3d21	60		rts				rts 								; and exit.
.3d22					MI32WriteCharacter:
.3d22	ee 4f 0d	inc $0d4f			inc 	MCharCount 					; bump count (space for leading count)
.3d25	ac 4f 0d	ldy $0d4f			ldy 	MCharCount 					; get position
.3d28	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3d2a	c8		iny				iny
.3d2b	a9 00		lda #$00			lda 	#0
.3d2d	91 2a		sta ($2a),y			sta 	(temp0),y
.3d2f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d50					MSeed32:	.fill 	4							; random number seed.
.3d30					MInt32Absolute:
.3d30	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3d32	30 01		bmi $3d35			bmi 	MInt32Negate
.3d34	60		rts				rts
.3d35					MInt32Negate:
.3d35	38		sec				sec 								; subtract from zero.
.3d36	a9 00		lda #$00			lda 	#0
.3d38	f5 98		sbc $98,x			sbc 	esInt0,x
.3d3a	95 98		sta $98,x			sta 	esInt0,x
.3d3c	a9 00		lda #$00			lda 	#0
.3d3e	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3d40	95 a0		sta $a0,x			sta 	esInt1,x
.3d42	a9 00		lda #$00			lda 	#0
.3d44	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3d46	95 a8		sta $a8,x			sta 	esInt2,x
.3d48	a9 00		lda #$00			lda 	#0
.3d4a	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3d4c	95 b0		sta $b0,x			sta 	esInt3,x
.3d4e	60		rts				rts
.3d4f					MInt32Not:
.3d4f	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3d51	49 ff		eor #$ff			eor 	#$FF
.3d53	95 98		sta $98,x			sta 	esInt0,x
.3d55	b5 a0		lda $a0,x			lda 	esInt1,x
.3d57	49 ff		eor #$ff			eor 	#$FF
.3d59	95 a0		sta $a0,x			sta 	esInt1,x
.3d5b	b5 a8		lda $a8,x			lda 	esInt2,x
.3d5d	49 ff		eor #$ff			eor 	#$FF
.3d5f	95 a8		sta $a8,x			sta 	esInt2,x
.3d61	b5 b0		lda $b0,x			lda 	esInt3,x
.3d63	49 ff		eor #$ff			eor 	#$FF
.3d65	95 b0		sta $b0,x			sta 	esInt3,x
.3d67	60		rts				rts
.3d68					MInt32Sign:
.3d68	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3d6a	30 0b		bmi $3d77			bmi 	MInt32True 					; if set return -1 (true)
.3d6c	20 a2 3d	jsr $3da2			jsr 	MInt32Zero 					; is it zero ?
.3d6f	f0 0a		beq $3d7b			beq 	MInt32False 				; if zero return 0 (false)
.3d71	20 7b 3d	jsr $3d7b			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3d74	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3d76	60		rts				rts
.3d77					MInt32True:
.3d77	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3d79	d0 02		bne $3d7d			bne 	MInt32WriteAll
.3d7b					MInt32False:
.3d7b	a9 00		lda #$00			lda 	#0
.3d7d					MInt32WriteAll:
.3d7d	95 98		sta $98,x			sta 	esInt0,x
.3d7f					MInt32Write123:
.3d7f	95 a0		sta $a0,x			sta 	esInt1,x
.3d81	95 a8		sta $a8,x			sta 	esInt2,x
.3d83	95 b0		sta $b0,x			sta 	esInt3,x
.3d85	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3d87	95 90		sta $90,x			sta 	esType,x
.3d89	60		rts				rts
.3d8a					MInt32Set8Bit:
.3d8a	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3d8c	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3d8e	f0 ef		beq $3d7f			beq		MInt32Write123
.3d90					MInt32ShiftLeft:
.3d90	16 98		asl $98,x			asl 	esInt0,x
.3d92	36 a0		rol $a0,x			rol	 	esInt1,x
.3d94	36 a8		rol $a8,x			rol	 	esInt2,x
.3d96	36 b0		rol $b0,x			rol	 	esInt3,x
.3d98	60		rts				rts
.3d99					MInt32ShiftRight:
.3d99	56 b0		lsr $b0,x			lsr 	esInt3,x
.3d9b	76 a8		ror $a8,x			ror 	esInt2,x
.3d9d	76 a0		ror $a0,x			ror 	esInt1,x
.3d9f	76 98		ror $98,x			ror 	esInt0,x
.3da1	60		rts				rts
.3da2					MInt32Zero:
.3da2	b5 98		lda $98,x			lda 	esInt0,x
.3da4	15 a0		ora $a0,x			ora 	esInt1,x
.3da6	15 a8		ora $a8,x			ora 	esInt2,x
.3da8	15 b0		ora $b0,x			ora 	esInt3,x
.3daa	60		rts				rts
.3dab					MInt32Random:
.3dab	98		tya				tya
.3dac	48		pha				pha
.3dad	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3daf	ad 50 0d	lda $0d50			lda 	MSeed32+0 					; check the seed isn't zero
.3db2	d0 03		bne $3db7			bne 	_Random1
.3db4	a8		tay				tay 								; if so do it 256 times
.3db5	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3db7					_Random1:
.3db7	0a		asl a				asl 	a
.3db8	2e 51 0d	rol $0d51			rol 	MSeed32+1
.3dbb	2e 52 0d	rol $0d52			rol 	MSeed32+2
.3dbe	2e 53 0d	rol $0d53			rol 	MSeed32+3
.3dc1	90 02		bcc $3dc5			bcc 	_Random2
.3dc3	49 c5		eor #$c5			eor 	#$C5
.3dc5					_Random2:
.3dc5	88		dey				dey
.3dc6	d0 ef		bne $3db7			bne 	_Random1
.3dc8	8d 50 0d	sta $0d50			sta 	MSeed32+0 					; copy the seed in.
.3dcb	95 98		sta $98,x			sta 	esInt0,x
.3dcd	ad 51 0d	lda $0d51			lda 	MSeed32+1
.3dd0	95 a0		sta $a0,x			sta 	esInt1,x
.3dd2	ad 52 0d	lda $0d52			lda 	MSeed32+2
.3dd5	95 a8		sta $a8,x			sta 	esInt2,x
.3dd7	ad 53 0d	lda $0d53			lda 	MSeed32+3
.3dda	95 b0		sta $b0,x			sta 	esInt3,x
.3ddc	68		pla				pla
.3ddd	a8		tay				tay
.3dde	a9 00		lda #$00			lda 	#0
.3de0	95 90		sta $90,x			sta 	esType,x
.3de2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3de3					CheckToken:
.3de3	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3de5	d0 02		bne $3de9			bne 	_CTError
.3de7	c8		iny				iny
.3de8	60		rts				rts
.3de9					_CTError:
.3de9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3deb	20 18 15	jsr $1518		jsr	errorHandler
.3dee					CheckRightParen:
.3dee	b1 28		lda ($28),y			lda 	(codePtr),y
.3df0	c8		iny				iny
.3df1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3df3	d0 01		bne $3df6			bne 	_CRPError
.3df5	60		rts				rts
.3df6					_CRPError:
.3df6	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3df8	20 18 15	jsr $1518		jsr	errorHandler
.3dfb					CheckComma:
.3dfb	b1 28		lda ($28),y			lda 	(codePtr),y
.3dfd	c8		iny				iny
.3dfe	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3e00	d0 01		bne $3e03			bne 	_CCError
.3e02	60		rts				rts
.3e03					_CCError:
.3e03	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3e05	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3e08					RSReset:
.3e08	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3e0a	85 37		sta $37				sta 	rsPointer
.3e0c	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3e0e	85 38		sta $38				sta 	1+(rsPointer)
.3e10	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3e12	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3e15	60		rts				rts
.3e16					RSClaim:
.3e16	84 32		sty $32				sty 	tempShort 					; preserve Y
.3e18	48		pha				pha 								; save marker on stack.
.3e19	8a		txa				txa 								; get bytes required.
.3e1a	38		sec				sec
.3e1b	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3e1d	65 37		adc $37				adc 	rsPointer
.3e1f	85 37		sta $37				sta 	rsPointer
.3e21	a5 38		lda $38				lda 	rsPointer+1
.3e23	69 ff		adc #$ff			adc 	#$FF
.3e25	85 38		sta $38				sta 	rsPointer+1
.3e27	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3e29	90 08		bcc $3e33			bcc 	_RSCOverflow
.3e2b	68		pla				pla 								; get marker back
.3e2c	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3e2e	91 37		sta ($37),y			sta 	(rsPointer),y
.3e30	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3e32	60		rts				rts
.3e33					_RSCOverflow:
.3e33	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3e35	20 18 15	jsr $1518		jsr	errorHandler
.3e38					RSFree:
.3e38	18		clc				clc
.3e39	65 37		adc $37				adc 	rsPointer
.3e3b	85 37		sta $37				sta 	rsPointer
.3e3d	90 02		bcc $3e41			bcc 	_RSFExit
.3e3f	e6 38		inc $38				inc 	rsPointer+1
.3e41					_RSFExit:
.3e41	60		rts				rts
.3e42					RSSavePosition:
.3e42	84 32		sty $32				sty 	tempShort 					; save Y position
.3e44	a8		tay				tay 								; this is where we write it.
.3e45	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3e47	91 37		sta ($37),y			sta 	(rsPointer),y
.3e49	c8		iny				iny
.3e4a	a5 29		lda $29				lda 	codePtr+1
.3e4c	91 37		sta ($37),y			sta 	(rsPointer),y
.3e4e	c8		iny				iny
.3e4f	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3e51	91 37		sta ($37),y			sta 	(rsPointer),y
.3e53	a8		tay				tay 								; fix Y back again to original value
.3e54	60		rts				rts
.3e55					RSLoadPosition:
.3e55	a8		tay				tay
.3e56	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3e58	85 28		sta $28				sta 	codePtr
.3e5a	c8		iny				iny
.3e5b	b1 37		lda ($37),y			lda 	(rsPointer),y
.3e5d	85 29		sta $29				sta 	codePtr+1
.3e5f	c8		iny				iny
.3e60	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3e62	a8		tay				tay 								; to Y
.3e63	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3e64					WarmStart:
.3e64	a2 04		ldx #$04		ldx	#4
.3e66	20 c9 27	jsr $27c9		jsr	interactionHandler

;******  Return to file: main/main.asm

.3e69					mainHandler:
.3e69	7c 6c 3e	jmp ($3e6c,x)			jmp 	(mainVectors,x)
.3e6c					mainVectors:
>3e6c	88 3e					.word _DummyControlHandler ; index 0
>3e6e	fb 3d					.word CheckComma           ; index 2
>3e70	ee 3d					.word CheckRightParen      ; index 4
>3e72	d1 2f					.word XCommandClear        ; index 6
>3e74	fe 36					.word LinkEvaluate         ; index 8
>3e76	0a 37					.word LinkEvaluateInteger  ; index 10
>3e78	16 37					.word LinkEvaluateSmallInt ; index 12
>3e7a	10 37					.word LinkEvaluateString   ; index 14
>3e7c	04 37					.word LinkEvaluateTerm     ; index 16
>3e7e	ca 3c					.word MLInt32ToString      ; index 18
>3e80	60 31					.word Command_XNew         ; index 20
>3e82	6e 31					.word XCommand_Run         ; index 22
>3e84	7a 31					.word Command_RunFrom      ; index 24
>3e86	e2 3b					.word LinkInt32FromString  ; index 26
.3e88					_DummyControlHandler:
.3e88	60		rts			rts

;******  Return to file: basic.asm

.3e89					section_end_main:
.3e89					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3e89					StringChrs:
.3e89	aa		tax				tax 								; set up stack
.3e8a	a9 02		lda #$02			lda 	#2
.3e8c	20 4c 3f	jsr $3f4c			jsr 	AllocateSoftString
.3e8f	98		tya				tya
.3e90	20 72 3f	jsr $3f72			jsr 	WriteSoftString
.3e93					StringUpdate:
.3e93	20 a1 3e	jsr $3ea1			jsr 	ReturnSoftString
.3e96	8a		txa				txa
.3e97	60		rts				rts
.3e98					StringNull:
.3e98	aa		tax				tax
.3e99	a9 01		lda #$01			lda 	#1
.3e9b	20 4c 3f	jsr $3f4c			jsr 	AllocateSoftString
.3e9e	4c 93 3e	jmp $3e93			jmp 	StringUpdate
.3ea1					ReturnSoftString:
.3ea1	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3ea3	95 98		sta $98,x			sta 	esInt0,x
.3ea5	a5 3a		lda $3a				lda 	softMemAlloc+1
.3ea7	95 a0		sta $a0,x			sta 	esInt1,x
.3ea9	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3eab	95 a8		sta $a8,x			sta 	esInt2,x
.3ead	95 b0		sta $b0,x			sta 	esInt3,x
.3eaf	a9 40		lda #$40			lda 	#$40 						; type string.
.3eb1	95 90		sta $90,x			sta 	esType,x
.3eb3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3eb4					STRCompare:
.3eb4	48		pha				pha 								; save A
.3eb5	aa		tax				tax 								; put stack pos in X
.3eb6	98		tya				tya
.3eb7	48		pha				pha
.3eb8	20 ec 3e	jsr $3eec			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3ebb	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3ebd	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ebf	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3ec1	90 02		bcc $3ec5			bcc 	_SCNotSmaller
.3ec3	b1 2c		lda ($2c),y			lda 	(temp1),y
.3ec5					_SCNotSmaller:
.3ec5	aa		tax				tax 								; put that in X. We compare this many chars first.
.3ec6					_SCCompareLoop:
.3ec6	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3ec8	f0 0c		beq $3ed6			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3eca	ca		dex				dex 								; decrement chars to compare.
.3ecb	c8		iny				iny 								; move to next character
.3ecc	38		sec				sec 								; calculate s1[y]-s2[y]
.3ecd	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ecf	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3ed1	d0 0a		bne $3edd			bne 	_SCReturnResult 			; if different return sign of A
.3ed3	4c c6 3e	jmp $3ec6			jmp 	_SCCompareLoop
.3ed6					_SCSameToEndShortest
.3ed6	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3ed8	38		sec				sec
.3ed9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3edb	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3edd					_SCReturnResult:
.3edd	08		php				php 								; set return to zero preserving PSW.
.3ede	a2 00		ldx #$00			ldx 	#0
.3ee0	28		plp				plp
.3ee1	f0 05		beq $3ee8			beq 	_SCExit 					; two values equal, then exit
.3ee3	ca		dex				dex 								; X = $FF
.3ee4	90 02		bcc $3ee8			bcc 	_SCExit 					; if 1st < 2nd then -1
.3ee6	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3ee8					_SCExit:
.3ee8	68		pla				pla
.3ee9	a8		tay				tay
.3eea	68		pla				pla
.3eeb	60		rts				rts
.3eec					CopyStringPair:
.3eec	b5 99		lda $99,x			lda 	esInt0+1,x
.3eee	85 2c		sta $2c				sta 	temp1
.3ef0	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3ef2	85 2d		sta $2d				sta 	temp1+1
.3ef4					CopyStringTop:
.3ef4	b5 98		lda $98,x			lda 	esInt0,x
.3ef6	85 2a		sta $2a				sta 	temp0
.3ef8	b5 a0		lda $a0,x			lda 	esInt1,x
.3efa	85 2b		sta $2b				sta 	temp0+1
.3efc	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3efd					StringConcat:
.3efd	aa		tax				tax									; stack pos in X
.3efe	98		tya				tya
.3eff	48		pha				pha
.3f00	20 ec 3e	jsr $3eec			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3f03	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3f04	a0 00		ldy #$00			ldy 	#0
.3f06	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f08	71 2c		adc ($2c),y			adc 	(temp1),y
.3f0a	b0 1c		bcs $3f28			bcs 	_SCError 					; just too many characters here.
.3f0c	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3f0e	b0 18		bcs $3f28			bcs 	_SCError
.3f10	20 4c 3f	jsr $3f4c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3f13	20 43 3f	jsr $3f43			jsr 	CopySoftToStack 			; copy that to the stack.
.3f16	20 2d 3f	jsr $3f2d			jsr 	SCCopyTemp0 				; copy temp0
.3f19	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3f1b	85 2a		sta $2a				sta 	temp0
.3f1d	a5 2d		lda $2d				lda 	temp1+1
.3f1f	85 2b		sta $2b				sta 	temp0+1
.3f21	20 2d 3f	jsr $3f2d			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3f24	68		pla				pla
.3f25	a8		tay				tay
.3f26	8a		txa				txa 								; and A
.3f27	60		rts				rts
.3f28					_SCError:
.3f28	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3f2a	20 18 15	jsr $1518		jsr	errorHandler
.3f2d					SCCopyTemp0:
.3f2d	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3f2f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f31	85 2e		sta $2e				sta 	temp2
.3f33					_SCCopyLoop:
.3f33	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3f35	f0 0b		beq $3f42			beq 	_SCCopyExit
.3f37	c6 2e		dec $2e				dec 	temp2
.3f39	c8		iny				iny 								; get next char
.3f3a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f3c	20 72 3f	jsr $3f72			jsr 	WriteSoftString 			; write to soft string.
.3f3f	4c 33 3f	jmp $3f33			jmp 	_SCCopyLoop
.3f42					_SCCopyExit:
.3f42	60		rts				rts
.3f43					CopySoftToStack:
.3f43	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3f45	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3f47	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3f49	95 a0		sta $a0,x			sta 	esInt1,x
.3f4b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3f4c					AllocateSoftString:
.3f4c	85 32		sta $32				sta 	tempShort 					; save count
.3f4e	98		tya				tya
.3f4f	48		pha				pha
.3f50	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3f52	d0 09		bne $3f5d			bne 	_ASSDone
.3f54	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3f56	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3f58	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3f5a	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3f5b	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3f5d					_ASSDone:
.3f5d	38		sec				sec 								; allocate downwards enough memory
.3f5e	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3f60	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3f62	85 39		sta $39				sta 	softMemAlloc
.3f64	a5 3a		lda $3a				lda 	softMemAlloc+1
.3f66	e9 00		sbc #$00			sbc 	#0
.3f68	85 3a		sta $3a				sta 	softMemAlloc+1
.3f6a	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3f6c	a8		tay				tay
.3f6d	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f6f	68		pla				pla
.3f70	a8		tay				tay
.3f71	60		rts				rts
.3f72					WriteSoftString:
.3f72	84 32		sty $32				sty 	tempShort 					; save Y
.3f74	48		pha				pha 								; save character on stack
.3f75	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3f77	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3f79	18		clc				clc
.3f7a	69 01		adc #$01			adc 	#1
.3f7c	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f7e	a8		tay				tay 								; offset in Y
.3f7f	68		pla				pla 								; get char and write.
.3f80	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f82	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3f84	60		rts				rts
.3f85					StrClone:
.3f85	aa		tax				tax 								; set up stack.
.3f86	98		tya				tya
.3f87	48		pha				pha
.3f88	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3f8a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3f8c	18		clc				clc
.3f8d	69 01		adc #$01			adc 	#1
.3f8f	20 4c 3f	jsr $3f4c			jsr 	AllocateSoftString 			; allocate soft memory
.3f92	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3f94	95 98		sta $98,x			sta 	esInt0,x
.3f96	a5 3a		lda $3a				lda 	softMemAlloc+1
.3f98	95 a0		sta $a0,x			sta 	esInt1,x
.3f9a	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3f9c	95 a8		sta $a8,x			sta 	esInt2,x
.3f9e	95 b0		sta $b0,x			sta 	esInt3,x
.3fa0	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3fa2	95 90		sta $90,x			sta 	esType,x
.3fa4	20 2d 3f	jsr $3f2d			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3fa7	68		pla				pla
.3fa8	a8		tay				tay
.3fa9	8a		txa				txa
.3faa	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3fab					CaseString:
.3fab	48		pha				pha 								; save A and copy to X
.3fac	aa		tax				tax
.3fad	98		tya				tya
.3fae	48		pha				pha
.3faf	20 f4 3e	jsr $3ef4			jsr 	CopyStringTop 				; target string -> temp0
.3fb2	a0 00		ldy #$00			ldy 	#0
.3fb4	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3fb6	18		clc				clc
.3fb7	69 01		adc #$01			adc 	#1 							; one more for length byte
.3fb9	20 4c 3f	jsr $3f4c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3fbc	20 43 3f	jsr $3f43			jsr 	CopySoftToStack 			; copy that to the stack.
.3fbf	a0 00		ldy #$00			ldy 	#0
.3fc1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3fc3	aa		tax				tax
.3fc4					_CSCopy:
.3fc4	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3fc6	f0 24		beq $3fec			beq 	_CSExit
.3fc8	ca		dex				dex
.3fc9	c8		iny				iny
.3fca	68		pla				pla 								; check direction
.3fcb	48		pha				pha
.3fcc	f0 0c		beq $3fda			beq 	_CSUpper
.3fce	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3fd0	c9 41		cmp #$41			cmp 	#"A"
.3fd2	90 12		bcc $3fe6			bcc 	_CSWrite
.3fd4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3fd6	b0 0e		bcs $3fe6			bcs 	_CSWrite
.3fd8	90 0a		bcc $3fe4			bcc 	_CSFlipWrite
.3fda					_CSUpper:
.3fda	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3fdc	c9 61		cmp #$61			cmp 	#"a"
.3fde	90 06		bcc $3fe6			bcc 	_CSWrite
.3fe0	c9 7b		cmp #$7b			cmp 	#"z"+1
.3fe2	b0 02		bcs $3fe6			bcs 	_CSWrite
.3fe4					_CSFlipWrite:
.3fe4	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3fe6					_CSWrite:
.3fe6	20 72 3f	jsr $3f72			jsr 	WriteSoftString 			; add to soft string.
.3fe9	4c c4 3f	jmp $3fc4			jmp 	_CSCopy
.3fec					_CSExit:
.3fec	68		pla				pla
.3fed	a8		tay				tay
.3fee	68		pla				pla
.3fef	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3ff0					StringSubstring:
.3ff0	48		pha				pha
.3ff1	aa		tax				tax 								; access stack.
.3ff2	98		tya				tya
.3ff3	48		pha				pha
.3ff4	20 f4 3e	jsr $3ef4			jsr 	CopyStringTop 				; point temp0 to the string.
.3ff7	a0 00		ldy #$00			ldy 	#0 							; get length.
.3ff9	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3ffb	85 2c		sta $2c				sta 	temp1
.3ffd	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3fff	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.4001	f0 02		beq $4005			beq 	_SSBOkay
.4003	b0 2a		bcs $402f			bcs 	_SSBReturnNull
.4005					_SSBOkay:
.4005	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.4007	18		clc				clc
.4008	69 01		adc #$01			adc 	#1
.400a	38		sec				sec
.400b	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.400d	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.400f	90 02		bcc $4013			bcc		_SSBTrunc
.4011	b5 9a		lda $9a,x			lda 	esInt0+2,x
.4013					_SSBTrunc:
.4013	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.4015	18		clc				clc
.4016	69 01		adc #$01			adc 	#1 							; add 1
.4018	20 4c 3f	jsr $3f4c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.401b	20 43 3f	jsr $3f43			jsr 	CopySoftToStack 			; copy that to the stack.
.401e	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.4020					_SSBCopyLoop:
.4020	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.4022	f0 0e		beq $4032			beq 	_SSBExit
.4024	c6 2d		dec $2d				dec 	temp1+1
.4026	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.4028	20 72 3f	jsr $3f72			jsr 	WriteSoftString
.402b	c8		iny				iny
.402c	4c 20 40	jmp $4020			jmp 	_SSBCopyLoop
.402f					_SSBReturnNull:
.402f	20 36 40	jsr $4036			jsr 	ReturnNull
.4032					_SSBExit:
.4032	68		pla				pla
.4033	a8		tay				tay
.4034	68		pla				pla
.4035	60		rts				rts
.4036					ReturnNull:
.4036	a9 00		lda #$00			lda 	#0 							; clear null string
.4038	8d ce 0a	sta $0ace			sta 	NullString
.403b	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.403d	95 98		sta $98,x			sta 	esInt0,x
.403f	a9 0a		lda #$0a			lda 	#NullString >> 8
.4041	95 a0		sta $a0,x			sta 	esInt1,x
.4043	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d54					srcStrLen:
>0d54							.fill 	1
.4044					StringWrite:
.4044	aa		tax				tax
.4045	48		pha				pha
.4046	98		tya				tya
.4047	48		pha				pha
.4048	20 6f 40	jsr $406f			jsr 	CheckOverwriteCurrent
.404b	b0 0d		bcs $405a			bcs		_SWCopyCurrent
.404d	20 ad 40	jsr $40ad			jsr 	RequiresConcretion
.4050	90 0e		bcc $4060			bcc 	_SWWriteReference
.4052	20 10 41	jsr $4110			jsr 	CheckSpecialConcretion
.4055	b0 09		bcs $4060			bcs 	_SWWriteReference
.4057	20 c1 40	jsr $40c1			jsr 	AllocateHardMemory
.405a					_SWCopyCurrent:
.405a	20 f4 40	jsr $40f4			jsr 	CopyStringToHardMemory
.405d	4c 6b 40	jmp $406b			jmp 	_SWExit
.4060					_SWWriteReference
.4060	a0 00		ldy #$00			ldy 	#0
.4062	a5 2a		lda $2a				lda 	temp0
.4064	91 2c		sta ($2c),y			sta 	(temp1),y
.4066	c8		iny				iny
.4067	a5 2b		lda $2b				lda 	temp0+1
.4069	91 2c		sta ($2c),y			sta 	(temp1),y
.406b					_SWExit:
.406b	68		pla				pla
.406c	a8		tay				tay
.406d	68		pla				pla
.406e	60		rts				rts
.406f					CheckOverwriteCurrent:
.406f	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.4071	b5 a1		lda $a1,x			lda 	esInt1+1,x
.4073	85 2b		sta $2b				sta 	temp0+1
.4075	b5 99		lda $99,x			lda 	esInt0+1,x
.4077	85 2a		sta $2a				sta 	temp0
.4079	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.407b	8d 54 0d	sta $0d54			sta 	srcStrLen
.407e	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.4080	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.4082	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4084	85 2d		sta $2d				sta 	temp1+1
.4086	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.4088	b1 2c		lda ($2c),y			lda 	(temp1),y
.408a	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.408c	90 1b		bcc $40a9			bcc 	_COCFail 				; in hard memory.
.408e	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.4090	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.4092	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4094	85 2e		sta $2e				sta 	temp2
.4096	c8		iny				iny
.4097	b1 2c		lda ($2c),y			lda 	(temp1),y
.4099	e9 00		sbc #$00			sbc 	#0
.409b	85 2f		sta $2f				sta 	temp2+1
.409d	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.409f	b1 2e		lda ($2e),y			lda 	(temp2),y
.40a1	38		sec				sec  							; maximum character capacity.
.40a2	e9 02		sbc #$02			sbc 	#2
.40a4	cd 54 0d	cmp $0d54			cmp 	srcStrLen 				; if >= the required length
.40a7	b0 02		bcs $40ab			bcs 	_COCCanReuse
.40a9					_COCFail:
.40a9	18		clc				clc
.40aa	60		rts				rts
.40ab					_COCCanReuse:
.40ab	38		sec				sec
.40ac	60		rts				rts
.40ad					RequiresConcretion:
.40ad	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.40af	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.40b1	b0 0a		bcs $40bd			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.40b3	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.40b5	f0 08		beq $40bf			beq 	_RCFail 				; if not, this cannot be soft memory.
.40b7	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.40b9	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.40bb	90 02		bcc $40bf			bcc 	_RCFail 				; so concreting
.40bd					_RCSucceed:
.40bd	38		sec				sec
.40be	60		rts				rts
.40bf					_RCFail:
.40bf	18		clc				clc
.40c0	60		rts				rts
.40c1					AllocateHardMemory:
.40c1	98		tya				tya
.40c2	48		pha				pha
.40c3	ad 54 0d	lda $0d54			lda 	srcStrLen 				; characters in string
.40c6	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.40c8	b0 04		bcs $40ce			bcs 	_AHMSetMax 				; max out that amount.
.40ca	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.40cc	90 02		bcc $40d0			bcc 	_AHMIsOkay
.40ce					_AHMSetMax:
.40ce	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.40d0					_AHMIsOkay:
.40d0	48		pha				pha	 							; save size to be allocated
.40d1	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.40d3	38		sec				sec  							; and copy result to TOS as target address.
.40d4	65 33		adc $33				adc 	highMemory
.40d6	85 33		sta $33				sta 	highMemory
.40d8	a5 34		lda $34				lda 	highMemory+1
.40da	69 ff		adc #$ff			adc 	#$FF
.40dc	85 34		sta $34				sta 	highMemory+1
.40de	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.40e0	68		pla				pla 							; get the total size of the storage block
.40e1	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.40e3	18		clc				clc
.40e4	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.40e6	69 01		adc #$01			adc 	#1
.40e8	91 2c		sta ($2c),y			sta 	(temp1),y
.40ea	a5 34		lda $34				lda 	highMemory+1
.40ec	69 00		adc #$00			adc 	#0
.40ee	c8		iny				iny
.40ef	91 2c		sta ($2c),y			sta 	(temp1),y
.40f1	68		pla				pla
.40f2	a8		tay				tay
.40f3	60		rts				rts
.40f4					CopyStringToHardMemory:
.40f4	98		tya				tya
.40f5	48		pha				pha
.40f6	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.40f8	b1 2c		lda ($2c),y			lda 	(temp1),y
.40fa	85 2e		sta $2e				sta 	temp2
.40fc	c8		iny				iny
.40fd	b1 2c		lda ($2c),y			lda 	(temp1),y
.40ff	85 2f		sta $2f				sta 	temp2+1
.4101	ac 54 0d	ldy $0d54			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.4104					_CSTHMLoop:
.4104	b1 2a		lda ($2a),y			lda 	(temp0),y
.4106	91 2e		sta ($2e),y			sta 	(temp2),y
.4108	88		dey				dey
.4109	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.410b	d0 f7		bne $4104			bne 	_CSTHMLoop
.410d	68		pla				pla
.410e	a8		tay				tay
.410f	60		rts				rts
.4110					CheckSpecialConcretion:
.4110	ad 54 0d	lda $0d54			lda 	srcStrLen 				; check string is null e.g. length = 0
.4113	f0 02		beq $4117			beq 	_CSCNullString
.4115	18		clc				clc
.4116	60		rts				rts
.4117					_CSCNullString:
.4117	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.4119	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.411c	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.411e	85 2a		sta $2a				sta 	temp0
.4120	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.4122	85 2b		sta $2b				sta 	1+(temp0)
.4124	38		sec				sec
.4125	60		rts				rts

;******  Return to file: string/string.asm

.4126					stringHandler:
.4126	7c 29 41	jmp ($4129,x)			jmp 	(stringVectors,x)
.4129					stringVectors:
>4129	3b 41					.word _DummyControlHandler ; index 0
>412b	89 3e					.word StringChrs           ; index 2
>412d	85 3f					.word StrClone             ; index 4
>412f	fd 3e					.word StringConcat         ; index 6
>4131	98 3e					.word StringNull           ; index 8
>4133	b4 3e					.word STRCompare           ; index 10
>4135	ab 3f					.word CaseString           ; index 12
>4137	f0 3f					.word StringSubstring      ; index 14
>4139	44 40					.word StringWrite          ; index 16
.413b					_DummyControlHandler:
.413b	60		rts			rts

;******  Return to file: basic.asm

.413c					section_end_string:
.413c					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d55					deTokeniseVector:
>0d55							.fill 	2
.0d57					lastCharacterClass:
>0d57							.fill 	1
.0d58					indent:
>0d58							.fill 	1
.413c					ListLine:
.413c	48		pha				pha								; enter here to list to console. sets the output vector
.413d	a9 74		lda #$74			lda 	#(deTokenPrint) & $FF
.413f	8d 55 0d	sta $0d55			sta 	deTokeniseVector
.4142	a9 42		lda #$42			lda 	#(deTokenPrint) >> 8
.4144	8d 56 0d	sta $0d56			sta 	1+(deTokeniseVector)
.4147	68		pla				pla
.4148					Detokenise:
.4148	18		clc				clc 							; space required for line number.
.4149	69 06		adc #$06			adc 	#6
.414b	8d 58 0d	sta $0d58			sta 	indent
.414e	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.4150	8d 57 0d	sta $0d57			sta 	lastCharacterClass
.4153	a2 02		ldx #$02			ldx 	#2
.4155	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.4157	95 a8		sta $a8,x			sta 	esInt2,x
.4159	95 b0		sta $b0,x			sta 	esInt3,x
.415b	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.415d	b1 28		lda ($28),y			lda 	(codePtr),y
.415f	95 98		sta $98,x			sta 	esInt0,x
.4161	c8		iny				iny
.4162	b1 28		lda ($28),y			lda 	(codePtr),y
.4164	95 a0		sta $a0,x			sta 	esInt1,x
.4166	a9 84		lda #$84			lda 	#LTYLineNumber
.4168	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.416b	a9 0a		lda #$0a			lda 	#10 					; base 10
.416d	20 13 42	jsr $4213			jsr 	DTPrintInteger 			; print as integer.
.4170	a0 00		ldy #$00			ldy 	#0 						; get length
.4172	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.4174	aa		tax				tax
.4175					_DTPadOut:
.4175	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4177	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.417a	e8		inx				inx
.417b	ec 58 0d	cpx $0d58			cpx 	indent
.417e	d0 f5		bne $4175			bne 	_DTPadOut
.4180	a0 03		ldy #$03			ldy 	#3 						; start position.
.4182					_DTListLoop:
.4182	b1 28		lda ($28),y			lda 	(codePtr),y
.4184	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.4186	f0 5e		beq $41e6			beq 	_DTIsString
.4188	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.418a	f0 56		beq $41e2			beq 	_DTIsFloat
.418c	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.418e	f0 16		beq $41a6			beq 	_DTHexConstant
.4190	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.4192	d0 06		bne $419a			bne 	_DTNotEnd
.4194	a9 ff		lda #$ff			lda 	#255 					; print CR
.4196	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.4199	60		rts				rts
.419a					_DTNotEnd:
.419a	c9 00		cmp #$00			cmp 	#0
.419c	30 38		bmi $41d6			bmi 	_DTIsToken
.419e	c9 40		cmp #$40			cmp 	#$40
.41a0	90 3a		bcc $41dc			bcc 	_DTIsIdentifier
.41a2	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.41a4	d0 0d		bne $41b3			bne 	_DTConstant
.41a6					_DTHexConstant:
.41a6	a9 26		lda #$26			lda 	#"&"
.41a8	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.41ab	c8		iny				iny
.41ac	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.41ae	20 90 42	jsr $4290			jsr 	DTSwitchMode
.41b1	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.41b3					_DTConstant:
.41b3	48		pha				pha
.41b4	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.41b6	20 90 42	jsr $4290			jsr 	DTSwitchMode
.41b9	a9 86		lda #$86			lda 	#LTYConstant
.41bb	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.41be	a2 02		ldx #$02			ldx 	#2 						; get its value
.41c0	8a		txa				txa
.41c1	a2 10		ldx #$10		ldx	#16
.41c3	20 69 3e	jsr $3e69		jsr	mainHandler
.41c6	aa		tax				tax
.41c7	68		pla				pla 							; get base back
.41c8	85 32		sta $32				sta 	tempShort
.41ca	98		tya				tya
.41cb	48		pha				pha
.41cc	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.41ce	20 13 42	jsr $4213			jsr 	DTPrintInteger
.41d1	68		pla				pla
.41d2	a8		tay				tay
.41d3	4c 82 41	jmp $4182			jmp 	_DTListLoop
.41d6					_DTIsToken:
.41d6	20 e9 42	jsr $42e9			jsr 	DTDecodeToken
.41d9	4c 82 41	jmp $4182			jmp 	_DTListLoop
.41dc					_DTIsIdentifier:
.41dc	20 a2 42	jsr $42a2			jsr 	DTIdentifier
.41df	4c 82 41	jmp $4182			jmp 	_DTListLoop
.41e2					_DTIsFloat:
>41e2	db						.byte 	$DB
.41e3	4c e2 41	jmp $41e2			jmp 	_DTIsFloat
.41e6					_DTIsString:
.41e6	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.41e8	20 90 42	jsr $4290			jsr 	DTSwitchMode
.41eb	a9 81		lda #$81			lda 	#LTYString
.41ed	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.41f0	a9 22		lda #$22			lda 	#'"'						; open quote
.41f2	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.41f5	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.41f7	8a		txa				txa
.41f8	a2 10		ldx #$10		ldx	#16
.41fa	20 69 3e	jsr $3e69		jsr	mainHandler
.41fd	aa		tax				tax
.41fe	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.4200	85 2a		sta $2a				sta 	temp0
.4202	b5 a0		lda $a0,x			lda 	esInt1,x
.4204	85 2b		sta $2b				sta 	temp0+1
.4206	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.4208	20 25 42	jsr $4225			jsr 	DTPrintLengthPrefix
.420b	a9 22		lda #$22			lda 	#'"'
.420d	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.4210	4c 82 41	jmp $4182			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d59					tPrintCount:
>0d59							.fill 	1
.4213					DTPrintInteger:
.4213	48		pha				pha									; save base
.4214	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4216	85 2a		sta $2a				sta 	temp0
.4218	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.421a	85 2b		sta $2b				sta 	1+(temp0)
.421c	68		pla				pla
.421d	a8		tay				tay
.421e	8a		txa				txa
.421f	a2 12		ldx #$12		ldx	#18
.4221	20 69 3e	jsr $3e69		jsr	mainHandler
.4224	aa		tax				tax 								; then drop through here.
.4225					DTPrintLengthPrefix:
.4225	aa		tax				tax 								; A = 0 = don't case convert.
.4226	98		tya				tya
.4227	48		pha				pha
.4228	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.422a	b1 2a		lda ($2a),y			lda 	(temp0),y
.422c	8d 59 0d	sta $0d59			sta 	tPrintCount
.422f	f0 1b		beq $424c			beq 	_DTPLPExit 					; empty string
.4231					_DTPLPLoop:
.4231	c8		iny				iny 								; get next.
.4232	b1 2a		lda ($2a),y			lda 	(temp0),y
.4234	29 7f		and #$7f			and 	#$7F
.4236	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.4238	f0 0a		beq $4244			beq 	_DTPLPNoCase
.423a	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.423c	90 06		bcc $4244			bcc 	_DTPLPNoCase
.423e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4240	b0 02		bcs $4244			bcs 	_DTPLPNoCase
.4242	49 20		eor #$20			eor 	#"A"^"a"
.4244					_DTPLPNoCase
.4244	20 4f 42	jsr $424f			jsr 	ListOutputCharacter 		; call handler
.4247	ce 59 0d	dec $0d59			dec 	tPrintCount 				; do all the characters
.424a	d0 e5		bne $4231			bne 	_DTPLPLoop
.424c					_DTPLPExit:
.424c	68		pla				pla
.424d	a8		tay				tay
.424e	60		rts				rts
.424f					ListOutputCharacter:
.424f	85 32		sta $32				sta 	tempShort
.4251	48		pha				pha
.4252	8a		txa				txa
.4253	48		pha				pha
.4254	98		tya				tya
.4255	48		pha				pha
.4256	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.4258	c9 20		cmp #$20			cmp 	#32
.425a	b0 0c		bcs $4268			bcs		_LOCHiBit
.425c	09 40		ora #$40			ora 	#64 						; conversion
.425e	c9 40		cmp #$40			cmp 	#64							; make l/c
.4260	f0 06		beq $4268			beq 	_LOCHiBit
.4262	c9 5b		cmp #$5b			cmp 	#65+26
.4264	b0 02		bcs $4268			bcs 	_LOCHiBit
.4266	69 20		adc #$20			adc 	#32
.4268					_LOCHiBit:
.4268	20 71 42	jsr $4271			jsr 	_LOCCallVector				; call o/p handler routine
.426b	68		pla				pla
.426c	a8		tay				tay
.426d	68		pla				pla
.426e	aa		tax				tax
.426f	68		pla				pla
.4270					_LOCExit:
.4270	60		rts				rts
.4271					_LOCCallVector:
.4271	6c 55 0d	jmp ($0d55)			jmp 	(deTokeniseVector)
.4274					deTokenPrint:
.4274	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.4276	30 06		bmi $427e			bmi 	_dtpInk
.4278	a2 16		ldx #$16		ldx	#22
.427a	20 f6 14	jsr $14f6		jsr	deviceHandler
.427d	60		rts				rts
.427e	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4280	f0 08		beq $428a			beq 	_dtpCR						; except $FF => CRLF
.4282	29 07		and #$07			and 	#7
.4284	a2 08		ldx #$08		ldx	#8
.4286	20 f6 14	jsr $14f6		jsr	deviceHandler
.4289	60		rts				rts
.428a					_dtpCR:
.428a	a2 06		ldx #$06		ldx	#6
.428c	20 f6 14	jsr $14f6		jsr	deviceHandler
.428f	60		rts				rts
.4290					DTSwitchMode:
.4290	cd 57 0d	cmp $0d57			cmp 	LastCharacterClass 			; if changed, update character class
.4293	f0 04		beq $4299			beq 	_DTSMNoChange
.4295	8d 57 0d	sta $0d57			sta 	LastCharacterClass
.4298					_DTSMExit:
.4298	60		rts				rts
.4299					_DTSMNoChange:
.4299	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.429b	f0 fb		beq $4298			beq 	_DTSMExit 					; need a space.
.429d	a9 20		lda #$20			lda 	#" "
.429f	4c 4f 42	jmp $424f			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.42a2					DTIdentifier:
.42a2	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.42a4	20 90 42	jsr $4290			jsr 	DTSwitchMode
.42a7	a9 87		lda #$87			lda 	#LTYIdentifier
.42a9	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.42ac					_DTILoop:
.42ac	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.42ae	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.42b0	d0 02		bne $42b4			bne 	_DTINotUS
.42b2	a9 5f		lda #$5f			lda 	#"_"
.42b4					_DTINotUS:
.42b4	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.42b7	c8		iny				iny
.42b8	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.42ba	c9 3a		cmp #$3a			cmp 	#$3A
.42bc	90 ee		bcc $42ac			bcc 	_DTILoop
.42be	c8		iny				iny
.42bf	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.42c1	f0 25		beq $42e8			beq 	_DTIExit 					; no postfix.
.42c3	48		pha				pha
.42c4	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.42c6	8d 57 0d	sta $0d57			sta 	LastCharacterClass
.42c9	a9 82		lda #$82			lda 	#LTYPunctuation
.42cb	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.42ce	68		pla				pla
.42cf	c9 3b		cmp #$3b			cmp 	#$3B
.42d1	f0 10		beq $42e3			beq 	_DTIArray
.42d3	4a		lsr a				lsr 	a 							; array flag in C
.42d4	08		php				php
.42d5	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.42d7	f0 02		beq $42db			beq 	_DTIDollar
.42d9	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.42db					_DTIDollar:
.42db	49 24		eor #$24			eor 	#"$"
.42dd	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.42e0	28		plp				plp
.42e1	90 05		bcc $42e8			bcc 	_DTIExit
.42e3					_DTIArray:
.42e3	a9 28		lda #$28			lda 	#"("
.42e5	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.42e8					_DTIExit:
.42e8	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.42e9					DTDecodeToken:
.42e9	a2 00		ldx #$00			ldx 	#0 							; table number to use
.42eb	b1 28		lda ($28),y			lda 	(codePtr),y
.42ed	c9 84		cmp #$84			cmp 	#$84
.42ef	b0 05		bcs $42f6			bcs 	_DTNotShift
.42f1	29 03		and #$03			and 	#3 							; get the shift 1..3
.42f3	0a		asl a				asl 	a 							; put 2 x in X
.42f4	aa		tax				tax
.42f5	c8		iny				iny
.42f6					_DTNotShift:
.42f6	bd f8 45	lda $45f8,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.42f9	85 2a		sta $2a				sta 	temp0 						; point into temp0
.42fb	bd f9 45	lda $45f9,x			lda 	TokenTableAddress+1,x
.42fe	85 2b		sta $2b				sta 	temp0+1
.4300	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.4302	c8		iny				iny 								; consume it.
.4303	aa		tax				tax
.4304	98		tya				tya
.4305	48		pha				pha
.4306					_DTFindText:
.4306	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.4308	f0 11		beq $431b			beq 	_DTFoundText
.430a	ca		dex				dex
.430b	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.430d	38		sec				sec
.430e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4310	65 2a		adc $2a				adc 	temp0
.4312	85 2a		sta $2a				sta 	temp0
.4314	90 f0		bcc $4306			bcc 	_DTFindText
.4316	e6 2b		inc $2b				inc 	temp0+1
.4318	4c 06 43	jmp $4306			jmp 	_DTFindText
.431b					_DTFoundText:
.431b	a0 01		ldy #$01			ldy 	#1 							; get first character
.431d	b1 2a		lda ($2a),y			lda 	(temp0),y
.431f	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4321	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4323	90 11		bcc $4336			bcc 	_DTIsPunctuation
.4325	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4327	b0 0d		bcs $4336			bcs 	_DTIsPunctuation
.4329	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.432b	20 90 42	jsr $4290			jsr 	DTSwitchMode
.432e	a9 83		lda #$83			lda 	#LTYKeyword
.4330	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.4333	4c 40 43	jmp $4340			jmp 	_DTPrint
.4336					_DTIsPunctuation:
.4336	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4338	20 90 42	jsr $4290			jsr 	DTSwitchMode
.433b	a9 82		lda #$82			lda 	#LTYPunctuation
.433d	20 4f 42	jsr $424f			jsr 	ListOutputCharacter
.4340					_DTPrint:
.4340	a9 01		lda #$01			lda 	#1 							; fix case.
.4342	20 25 42	jsr $4225			jsr 	DTPrintLengthPrefix 		; print it out.
.4345	a0 00		ldy #$00			ldy 	#0
.4347	b1 2a		lda ($2a),y			lda 	(temp0),y
.4349	a8		tay				tay
.434a	b1 2a		lda ($2a),y			lda 	(temp0),y
.434c	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.434e	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4350	90 04		bcc $4356			bcc 	_DTIsNowPunctuation
.4352	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4354	90 05		bcc $435b			bcc 	_DTPExit
.4356					_DTIsNowPunctuation:
.4356	a9 01		lda #$01			lda 	#1
.4358	8d 57 0d	sta $0d57			sta		LastCharacterClass
.435b					_DTPExit:
.435b	68		pla				pla
.435c	a8		tay				tay
.435d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d5a					currentSet:
>0d5a							.fill 	1
.435e					TokenSearch:
.435e	8a		txa				txa
.435f	48		pha				pha
.4360	98		tya				tya
.4361	48		pha				pha
.4362	a9 00		lda #$00			lda 	#0
.4364	8d 5a 0d	sta $0d5a			sta 	currentSet
.4367					_TSLoop:
.4367	ad 5a 0d	lda $0d5a			lda 	currentSet 					; 2 x currentset in X
.436a	0a		asl a				asl 	a
.436b	aa		tax				tax
.436c	bd f8 45	lda $45f8,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.436f	85 2a		sta $2a				sta 	temp0
.4371	bd f9 45	lda $45f9,x			lda 	TokenTableAddress+1,x
.4374	85 2b		sta $2b				sta 	temp0+1
.4376	20 9d 43	jsr $439d			jsr 	TokenSearchOne 				; search one table
.4379	b0 0d		bcs $4388			bcs 	_TSFound 					; found a token.
.437b	ee 5a 0d	inc $0d5a			inc 	currentSet 					; next set
.437e	ad 5a 0d	lda $0d5a			lda 	currentSet
.4381	c9 04		cmp #$04			cmp 	#4
.4383	d0 e2		bne $4367			bne 	_TSLoop 					; back if not done all four.
.4385	18		clc				clc 								; clear carry and exit
.4386	90 10		bcc $4398			bcc 	_TSExit
.4388					_TSFound:
.4388	48		pha				pha 								; save token
.4389	ad 5a 0d	lda $0d5a			lda 	currentSet					; if set zero no shift
.438c	f0 05		beq $4393			beq 	_TSNoShift
.438e	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.4390	20 4e 44	jsr $444e			jsr 	TokenWrite
.4393					_TSNoShift:
.4393	68		pla				pla 								; get token back
.4394	20 4e 44	jsr $444e			jsr 	TokenWrite 					; write it
.4397	38		sec				sec 								; carry set indicating success
.4398					_TSExit:
.4398	68		pla				pla
.4399	a8		tay				tay
.439a	68		pla				pla
.439b	aa		tax				tax
.439c	60		rts				rts
.439d					TokenSearchOne:
.439d	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.439f					_TSOLoop:
.439f	a0 00		ldy #$00			ldy 	#0
.43a1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.43a3	f0 26		beq $43cb			beq 	_TSOFail 					; if zero, end of table
.43a5	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.43a8	f0 11		beq $43bb			beq 	_TSOCheckText
.43aa					_TSONext:
.43aa	e8		inx				inx 								; bump token
.43ab	a0 00		ldy #$00			ldy 	#0							; get length
.43ad	b1 2a		lda ($2a),y			lda 	(temp0),y
.43af	38		sec				sec
.43b0	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.43b2	85 2a		sta $2a				sta 	temp0
.43b4	90 e9		bcc $439f			bcc 	_TSOLoop
.43b6	e6 2b		inc $2b				inc 	temp0+1
.43b8	4c 9f 43	jmp $439f			jmp 	_TSOLoop
.43bb					_TSOCheckText:
.43bb	a8		tay				tay 								; compare length downto 1.
.43bc					_TSOCheckLoop:
.43bc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.43be	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.43c1	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.43c3	d0 e5		bne $43aa			bne 	_TSONext 					; different goto next.
.43c5	88		dey				dey 								; do all
.43c6	d0 f4		bne $43bc			bne 	_TSOCheckLoop
.43c8	8a		txa				txa 								; return token in A and carry set
.43c9	38		sec				sec
.43ca	60		rts				rts
.43cb					_TSOFail:
.43cb	18		clc				clc
.43cc	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.43cd					TokTest:
.43cd	a2 ff		ldx #$ff				ldx 	#$FF
.43cf	9a		txs					txs
.43d0	a9 ed		lda #$ed			lda 	#(TokenText1) & $FF
.43d2	85 28		sta $28				sta 	codePtr
.43d4	a9 43		lda #$43			lda 	#(TokenText1) >> 8
.43d6	85 29		sta $29				sta 	1+(codePtr)
.43d8	20 ed 43	jsr $43ed				jsr 	Tokenise
.43db	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.43dd	bd ed 43	lda $43ed,x	_TokCheck:	lda 	TokenBytes1,x
.43e0	dd 5e 0d	cmp $0d5e,x				cmp 	tokenBuffer,x
.43e3	d0 fe		bne $43e3	_TokFail:	bne 	_TokFail	 		; error.
.43e5	e8		inx					inx
.43e6	c9 80		cmp #$80				cmp 	#$80
.43e8	d0 f3		bne $43dd				bne 	_TokCheck
.43ea	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.43ed					TokenText1:
.43ed					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d5b					tokenHeader:
>0d5b							.fill 	3
.0d5e					tokenBuffer:
>0d5e							.fill 	256
.0e5e					tokenBufferIndex:
>0e5e							.fill 	1
.43ed					Tokenise:
.43ed	20 67 44	jsr $4467			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.43f0					TokeniseASCIIZ:
.43f0	20 78 44	jsr $4478			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.43f3	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.43f5	8d 5e 0e	sta $0e5e			sta 	tokenBufferIndex
.43f8	a8		tay				tay 								; start pointer
.43f9	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.43fb	8d 5e 0d	sta $0d5e			sta 	tokenBuffer
.43fe					_TokLoop:
.43fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4400	f0 46		beq $4448			beq 	_TokExit 					; if zero, then exit.
.4402	c8		iny				iny 								; skip over spaces.
.4403	c9 20		cmp #$20			cmp 	#" "
.4405	f0 f7		beq $43fe			beq 	_TokLoop
.4407	88		dey				dey 								; point back to character.
.4408	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.440a	f0 18		beq $4424			beq 	_TokHexConst
.440c	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.440e	f0 23		beq $4433			beq 	_TokQString
.4410	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.4412	b0 26		bcs $443a			bcs 	_TokPunctuation
.4414	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.4416	b0 29		bcs $4441			bcs 	_TokIdentifier
.4418	c9 3a		cmp #$3a			cmp 	#"9"+1
.441a	b0 1e		bcs $443a			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.441c	c9 30		cmp #$30			cmp 	#"0"
.441e	90 1a		bcc $443a			bcc 	_TokPunctuation 			; < 0, punctuation.
.4420	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.4422	d0 08		bne $442c			bne 	_TokConst
.4424					_TokHexConst:
.4424	c8		iny				iny									; consume token.
.4425	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.4427	20 4e 44	jsr $444e			jsr 	TokenWrite
.442a	a9 10		lda #$10			lda 	#16
.442c					_TokConst:
.442c	20 36 45	jsr $4536			jsr 	TokeniseInteger
.442f	b0 cd		bcs $43fe			bcs 	_TokLoop
.4431	90 18		bcc $444b			bcc 	_TokFail
.4433					_TokQString:
.4433	20 cc 45	jsr $45cc			jsr 	TokeniseString
.4436	b0 c6		bcs $43fe			bcs 	_TokLoop
.4438	90 11		bcc $444b			bcc 	_TokFail
.443a					_TokPunctuation:
.443a	20 ab 45	jsr $45ab			jsr 	TokenisePunctuation
.443d	b0 bf		bcs $43fe			bcs 	_TokLoop
.443f	90 0a		bcc $444b			bcc 	_TokFail
.4441					_TokIdentifier:
.4441	20 a7 44	jsr $44a7			jsr 	TokeniseIdentifier
.4444	b0 b8		bcs $43fe			bcs 	_TokLoop
.4446	90 03		bcc $444b			bcc 	_TokFail
.4448					_TokExit:
.4448	a9 01		lda #$01			lda 	#1
.444a	60		rts				rts
.444b					_TokFail:
.444b	a9 00		lda #$00			lda 	#0
.444d	60		rts				rts
.444e					TokenWrite:
.444e	85 32		sta $32				sta 	tempShort 					; save XA
.4450	48		pha				pha
.4451	8a		txa				txa
.4452	48		pha				pha
.4453	a5 32		lda $32				lda 	tempShort
.4455	ae 5e 0e	ldx $0e5e			ldx 	tokenBufferIndex 			; geet index
.4458	9d 5e 0d	sta $0d5e,x			sta 	tokenBuffer,x 				; write byte to buffer
.445b	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.445d	9d 5f 0d	sta $0d5f,x			sta 	tokenBuffer+1,x
.4460	ee 5e 0e	inc $0e5e			inc 	tokenBufferIndex 			; bump index
.4463	68		pla				pla
.4464	aa		tax				tax
.4465	68		pla				pla
.4466	60		rts				rts
.4467					TokeniseMakeASCIIZ:
.4467	a0 00		ldy #$00			ldy 	#0							; get length of string.
.4469	b1 28		lda ($28),y			lda 	(codePtr),y
.446b	a8		tay				tay
.446c	c8		iny				iny 								; +1, the NULL goes here.
.446d	a9 00		lda #$00			lda 	#0
.446f	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4471	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4473	d0 02		bne $4477			bne 	_TMKAExit
.4475	e6 29		inc $29				inc 	codePtr+1
.4477					_TMKAExit:
.4477	60		rts				rts
.4478					TokeniseFixCase:
.4478	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.447a	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.447c					_TFCFlipQ:
.447c	8a		txa				txa
.447d	49 01		eor #$01			eor 	#1
.447f	aa		tax				tax
.4480					_TFCLoop:
.4480	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4482	f0 22		beq $44a6			beq 	_TFCExit 					; if zero exit.
.4484	c9 20		cmp #$20			cmp 	#32 						; if control
.4486	90 1a		bcc $44a2			bcc 	_TFCControl
.4488	c8		iny				iny 								; preconsume
.4489	c9 22		cmp #$22			cmp 	#'"'
.448b	f0 ef		beq $447c			beq 	_TFCFlipQ
.448d	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.448f	90 ef		bcc $4480			bcc 	_TFCLoop
.4491	c9 7b		cmp #$7b			cmp 	#"z"+1
.4493	b0 eb		bcs $4480			bcs 	_TFCLoop
.4495	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4497	d0 e7		bne $4480			bne 	_TFCLoop
.4499	88		dey				dey
.449a	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.449c					_TFCWrite:
.449c	91 28		sta ($28),y			sta 	(codePtr),y
.449e	c8		iny				iny
.449f	4c 80 44	jmp $4480			jmp 	_TFCLoop
.44a2					_TFCControl:
.44a2	a9 20		lda #$20			lda 	#" "
.44a4	d0 f6		bne $449c			bne 	_TFCWrite
.44a6					_TFCExit:
.44a6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.44a7					TokeniseIdentifier:
.44a7	a2 00		ldx #$00			ldx 	#0
.44a9					_TICopyID:
.44a9	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.44ab	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.44ad	f0 16		beq $44c5			beq 	_TICopyUnderscore
.44af	c9 2e		cmp #$2e			cmp 	#"."
.44b1	f0 14		beq $44c7			beq 	_TICopyIn
.44b3	c9 30		cmp #$30			cmp 	#"0"
.44b5	90 1b		bcc $44d2			bcc 	_TIEndCopy
.44b7	c9 3a		cmp #$3a			cmp 	#"9"+1
.44b9	90 0c		bcc $44c7			bcc 	_TICopyIn
.44bb	c9 41		cmp #$41			cmp 	#"A"
.44bd	90 13		bcc $44d2			bcc 	_TIEndCopy
.44bf	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44c1	b0 0f		bcs $44d2			bcs		_TIEndCopy
.44c3	90 02		bcc $44c7			bcc 	_TICopyIn
.44c5					_TICopyUnderScore:
.44c5	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.44c7					_TICopyIn:
.44c7	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.44c8	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.44cb	8e cf 0a	stx $0acf			stx 	convertBuffer
.44ce	c8		iny				iny 								; next character
.44cf	4c a9 44	jmp $44a9			jmp 	_TICopyID 					; loop round
.44d2					_TIEndCopy:
.44d2	a9 24		lda #$24			lda 	#"$"
.44d4	20 29 45	jsr $4529			jsr 	TIDCheckCopy
.44d7	a9 23		lda #$23			lda 	#"#"
.44d9	20 29 45	jsr $4529			jsr 	TIDCheckCopy
.44dc	a9 28		lda #$28			lda 	#"("
.44de	20 29 45	jsr $4529			jsr 	TIDCheckCopy
.44e1	20 5e 43	jsr $435e			jsr 	TokenSearch 				; is it a token
.44e4	b0 41		bcs $4527			bcs 	_TIExit 					; if so, then exit.
.44e6	98		tya				tya
.44e7	48		pha				pha
.44e8	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.44ea	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.44ed	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.44f0	c9 28		cmp #$28			cmp 	#"("
.44f2	d0 02		bne $44f6			bne 	_TINotArray
.44f4	ca		dex				dex 								; yes, remove it and convert to array.
.44f5	c8		iny				iny
.44f6					_TINotArray:
.44f6	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.44f9	c9 24		cmp #$24			cmp 	#"$"
.44fb	d0 03		bne $4500			bne 	_TINotString
.44fd	ca		dex				dex
.44fe	c8		iny				iny
.44ff	c8		iny				iny
.4500					_TINotString:
.4500	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4503	c9 23		cmp #$23			cmp 	#"#"
.4505	d0 05		bne $450c			bne 	_TINotFloat
.4507	ca		dex				dex
.4508	c8		iny				iny
.4509	c8		iny				iny
.450a	c8		iny				iny
.450b	c8		iny				iny
.450c					_TINotFloat:
.450c	e8		inx				inx 								; write end marker for identifier.
.450d	98		tya				tya
.450e	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4511	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.4514	a2 01		ldx #$01			ldx 	#1
.4516					_TIOutput:
.4516	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4519	29 3f		and #$3f			and 	#$3F
.451b	48		pha				pha
.451c	20 4e 44	jsr $444e			jsr 	TokenWrite
.451f	e8		inx				inx
.4520	68		pla				pla
.4521	c9 3a		cmp #$3a			cmp 	#$3A
.4523	90 f1		bcc $4516			bcc 	_TIOutput
.4525	68		pla				pla
.4526	a8		tay				tay
.4527					_TIExit:
.4527	38		sec				sec 								; this can't fail.
.4528	60		rts				rts
.4529					TIDCheckCopy:
.4529	d1 28		cmp ($28),y			cmp 	(codePtr),y
.452b	d0 08		bne $4535			bne 	_TIDCCExit
.452d	e8		inx				inx
.452e	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4531	8e cf 0a	stx $0acf			stx 	convertBuffer
.4534	c8		iny				iny
.4535					_TIDCCExit:
.4535	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.4536					TokeniseInteger:
.4536	85 2c		sta $2c				sta 	temp1 						; save base
.4538	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.453a	8e cf 0a	stx $0acf			stx 	convertBuffer
.453d					_TIGetChars:
.453d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.453f	c9 30		cmp #$30			cmp 	#"0"
.4541	90 1f		bcc $4562			bcc 	_TIEndGet
.4543	c9 3a		cmp #$3a			cmp 	#"9"+1
.4545	90 10		bcc $4557			bcc 	_TIHaveChar
.4547	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.4549	c9 0a		cmp #$0a			cmp 	#10
.454b	f0 15		beq $4562			beq 	_TIEndGet
.454d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.454f	c9 41		cmp #$41			cmp 	#"A"
.4551	90 0f		bcc $4562			bcc 	_TIEndGet
.4553	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4555	b0 0b		bcs $4562			bcs 	_TIEndGet
.4557					_TIHaveChar:
.4557	e8		inx				inx 								; write into buffer.
.4558	8e cf 0a	stx $0acf			stx 	convertBuffer
.455b	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.455e	c8		iny				iny 								; next char
.455f	4c 3d 45	jmp $453d			jmp 	_TIGetChars
.4562					_TIEndGet:
.4562	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.4564	f0 1c		beq $4582			beq 	_TIFail
.4566	98		tya				tya
.4567	48		pha				pha
.4568	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.456a	85 2a		sta $2a				sta 	temp0
.456c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.456e	85 2b		sta $2b				sta 	1+(temp0)
.4570	a9 00		lda #$00			lda 	#0 							; stack level 0
.4572	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4574	a2 1a		ldx #$1a		ldx	#26
.4576	20 69 3e	jsr $3e69		jsr	mainHandler
.4579	68		pla				pla
.457a	a8		tay				tay
.457b	90 05		bcc $4582			bcc 	_TIFail 					; didn't convert.
.457d	20 84 45	jsr $4584			jsr 	TIRecursiveOut 				; recursive output ?
.4580	38		sec				sec
.4581	60		rts				rts
.4582					_TIFail:
.4582	18		clc				clc
.4583	60		rts				rts
.4584					TIRecursiveOut:
.4584	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4586	29 3f		and #$3f			and 	#$3F
.4588	09 40		ora #$40			ora 	#$40
.458a	48		pha				pha
.458b	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.458d	29 c0		and #$c0			and 	#$C0
.458f	05 a0		ora $a0				ora 	esInt1
.4591	05 a8		ora $a8				ora 	esInt2
.4593	05 b0		ora $b0				ora 	esInt3
.4595	f0 10		beq $45a7			beq 	_TIRONoRecursion
.4597	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4599					_TIROShift:
.4599	46 b0		lsr $b0				lsr 	esInt3
.459b	66 a8		ror $a8				ror 	esInt2
.459d	66 a0		ror $a0				ror 	esInt1
.459f	66 98		ror $98				ror 	esInt0
.45a1	ca		dex				dex
.45a2	d0 f5		bne $4599			bne 	_TIROShift
.45a4	20 84 45	jsr $4584			jsr 	TIRecursiveOut 				; call recursively
.45a7					_TIRONoRecursion:
.45a7	68		pla				pla 								; pull the old bit.
.45a8	4c 4e 44	jmp $444e			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.45ab					TokenisePunctuation:
.45ab	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.45ad	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.45b0	c8		iny				iny
.45b1	b1 28		lda ($28),y			lda 	(codePtr),y
.45b3	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.45b6	c8		iny				iny 								; Y is +2
.45b7	a9 02		lda #$02			lda 	#2 							; 2 character string.
.45b9	8d cf 0a	sta $0acf			sta 	convertBuffer
.45bc	20 5e 43	jsr $435e			jsr 	TokenSearch 				; search for that token.
.45bf	b0 0a		bcs $45cb			bcs 	_TIFound
.45c1	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.45c4	88		dey				dey 								; Y is now +1
.45c5	20 5e 43	jsr $435e			jsr 	TokenSearch 				; search for that token.
.45c8	b0 01		bcs $45cb			bcs 	_TIFound
.45ca	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.45cb					_TIFound:
.45cb	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.45cc					TokeniseString:
.45cc	c8		iny				iny 								; skip opening quote
.45cd	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.45cf	84 2a		sty $2a				sty 	temp0 						; save start.
.45d1					_TSGetLength:
.45d1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.45d3	f0 21		beq $45f6			beq 	_TSFail						; end of line, fail
.45d5	c8		iny				iny
.45d6	e8		inx				inx
.45d7	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.45d9	d0 f6		bne $45d1			bne 	_TSGetLength
.45db	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.45dd	20 4e 44	jsr $444e			jsr 	TokenWrite
.45e0	8a		txa				txa 								; output length
.45e1	20 4e 44	jsr $444e			jsr 	TokenWrite
.45e4	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.45e6	e0 00		cpx #$00			cpx 	#0 							; check ended
.45e8	f0 09		beq $45f3			beq 	_TSExit
.45ea					_TSOutput:
.45ea	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.45ec	20 4e 44	jsr $444e			jsr 	TokenWrite
.45ef	c8		iny				iny
.45f0	ca		dex				dex
.45f1	d0 f7		bne $45ea			bne 	_TSOutput
.45f3					_TSExit:
.45f3	c8		iny				iny 								; skip ending quote
.45f4	38		sec				sec 								; return CS.
.45f5	60		rts				rts
.45f6					_TSFail:
.45f6	18		clc				clc
.45f7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.45f8					TokenTableAddress:
>45f8	00 46						.word 	Group0Text
>45fa	d3 47						.word 	Group1Text
>45fc	20 49						.word 	Group2Text
>45fe	6b 49						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4600					Group0Text:
>4600	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4604	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4607	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>460b	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>460e	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4611	01 be					.byte $01,$be                          ; $8b >
>4613	01 bc					.byte $01,$bc                          ; $8c <
>4615	01 bd					.byte $01,$bd                          ; $8d =
>4617	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>461a	01 ab					.byte $01,$ab                          ; $8f +
>461c	01 ad					.byte $01,$ad                          ; $90 -
>461e	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>4621	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>4624	01 aa					.byte $01,$aa                          ; $93 *
>4626	01 af					.byte $01,$af                          ; $94 /
>4628	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>462c	01 de					.byte $01,$de                          ; $96 ^
>462e	01 a1					.byte $01,$a1                          ; $97 !
>4630	01 bf					.byte $01,$bf                          ; $98 ?
>4632	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>4639	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>463f	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>4643	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>4646	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>464e	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>4654	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>4659	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>465e	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>4663	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>4669	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>4671	01 a8					.byte $01,$a8                          ; $a4 (
>4673	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>4678	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>467d	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4682	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>468a	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>468f	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4694	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>469a	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>469f	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>46a4	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>46a9	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>46b0	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>46b7	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>46bc	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>46c3	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>46ca	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>46d0	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>46d7	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>46dd	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>46e5	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>46eb	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>46f0	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>46f6	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>46fc	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4702	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4707	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>470c	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4713	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>471a	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>4722	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>472a	01 c0					.byte $01,$c0                          ; $c3 @
>472c	01 fe					.byte $01,$fe                          ; $c4 ~
>472e	01 a6					.byte $01,$a6                          ; $c5 &
>4730	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>4736	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>473e	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>4742	01 a9					.byte $01,$a9                          ; $c9 )
>4744	01 ba					.byte $01,$ba                          ; $ca :
>4746	01 ac					.byte $01,$ac                          ; $cb ,
>4748	01 bb					.byte $01,$bb                          ; $cc ;
>474a	01 a7					.byte $01,$a7                          ; $cd '
>474c	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>474f	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>4754	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>4759	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>475f	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4763	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>4767	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>476b	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>4771	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4776	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>477a	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4780	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4785	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>478b	02 41 d4				.byte $02,$41,$d4                      ; $db at
>478e	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4793	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>479a	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>479f	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>47a4	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>47a9	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>47ad	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>47b3	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>47b7	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>47be	01 ae					.byte $01,$ae                          ; $e5 .
>47c0	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>47c5	01 a3					.byte $01,$a3                          ; $e7 #
>47c7	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>47cd	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>47d2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.47d3					Group1Text:
>47d3	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>47d8	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>47dd	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>47e2	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>47e6	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>47ec	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>47f0	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>47f5	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>47fd	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4801	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4806	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>480b	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>4810	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4816	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>481d	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>4821	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4827	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>482b	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>482f	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>4833	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>4837	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>483b	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>483f	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>4843	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>4847	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>484b	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>484f	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>4853	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>4857	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>485b	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>485f	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4863	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4867	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>486b	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>486f	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4873	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4877	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>487b	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>487f	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4883	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4887	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>488b	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>488f	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4893	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4897	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>489b	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>489f	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>48a3	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>48a7	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>48ab	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>48af	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>48b3	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>48b7	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>48bb	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>48bf	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>48c3	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>48c7	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>48cb	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>48cf	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>48d3	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>48d7	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>48db	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>48df	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>48e3	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>48e7	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>48eb	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>48ef	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>48f3	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>48f7	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>48fb	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>48ff	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4903	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4907	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>490b	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>490f	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4913	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4917	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>491b	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>491f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4920					Group2Text:
>4920	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4926	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>492c	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4932	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4937	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>493f	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4946	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>494a	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>494f	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>4955	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>495a	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>495f	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4964	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>496a	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.496b					Group3Text:
>496b	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4972	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4979	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4981	58 a8
>4983	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>498b	59 a8
>498d	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4992	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4999	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>49a0	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>49a7	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>49ae	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.49af					tokeniserHandler:
.49af	7c b2 49	jmp ($49b2,x)			jmp 	(tokeniserVectors,x)
.49b2					tokeniserVectors:
>49b2	be 49					.word _DummyControlHandler ; index 0
>49b4	48 41					.word Detokenise           ; index 2
>49b6	3c 41					.word ListLine             ; index 4
>49b8	cd 43					.word TokTest              ; index 6
>49ba	ed 43					.word Tokenise             ; index 8
>49bc	f0 43					.word TokeniseASCIIZ       ; index 10
.49be					_DummyControlHandler:
.49be	60		rts			rts

;******  Return to file: basic.asm

.49bf					section_end_tokeniser:
.49bf					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.49bf					AccessArray:
.49bf	8a		txa				txa
.49c0	48		pha				pha
.49c1	e8		inx				inx
.49c2	20 8b 4a	jsr $4a8b			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.49c5	68		pla				pla
.49c6	aa		tax				tax
.49c7	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.49c9	85 2a		sta $2a				sta 	temp0
.49cb	b5 a0		lda $a0,x			lda 	esInt1,x
.49cd	85 2b		sta $2b				sta 	temp0+1
.49cf	8a		txa				txa
.49d0	48		pha				pha
.49d1	98		tya				tya
.49d2	48		pha				pha
.49d3					_AAFollow:
.49d3	a0 00		ldy #$00			ldy 	#0
.49d5	b1 2a		lda ($2a),y			lda 	(temp0),y
.49d7	48		pha				pha
.49d8	c8		iny				iny
.49d9	b1 2a		lda ($2a),y			lda 	(temp0),y
.49db	85 2b		sta $2b				sta 	temp0+1
.49dd	68		pla				pla
.49de	85 2a		sta $2a				sta 	temp0
.49e0	e8		inx				inx 								; advance to next stack slot.
.49e1	a0 00		ldy #$00			ldy 	#0
.49e3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.49e5	d5 98		cmp $98,x			cmp 	esInt0,x
.49e7	c8		iny				iny
.49e8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.49ea	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.49ec	29 7f		and #$7f			and 	#$7F
.49ee	f5 a0		sbc $a0,x			sbc 	esInt1,x
.49f0	90 50		bcc $4a42			bcc 	_AABadIndex 				; failed on index if max index < required.
.49f2	18		clc				clc
.49f3	a5 2a		lda $2a				lda 	temp0
.49f5	69 02		adc #$02			adc 	#2
.49f7	85 2a		sta $2a				sta 	temp0
.49f9	90 02		bcc $49fd			bcc 	_AANoCarry
.49fb	e6 2b		inc $2b				inc 	temp0+1
.49fd					_AANoCarry:
.49fd	b5 98		lda $98,x			lda 	esInt0,x
.49ff	85 2e		sta $2e				sta 	temp2
.4a01	b5 a0		lda $a0,x			lda 	esInt1,x
.4a03	85 2f		sta $2f				sta 	temp2+1
.4a05	ac 61 0e	ldy $0e61			ldy 	varType
.4a08	b9 e5 4a	lda $4ae5,y			lda 	CAActualSize-$3A,y
.4a0b	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4a0d	30 02		bmi $4a11			bmi 	_AANotPointer
.4a0f	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4a11					_AANotPointer:
.4a11	20 8f 4b	jsr $4b8f			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4a14	18		clc				clc
.4a15	a5 2a		lda $2a				lda 	temp0
.4a17	65 2e		adc $2e				adc 	temp2
.4a19	85 2a		sta $2a				sta 	temp0
.4a1b	a5 2b		lda $2b				lda 	temp0+1
.4a1d	65 2f		adc $2f				adc 	temp2+1
.4a1f	85 2b		sta $2b				sta 	temp0+1
.4a21	b5 91		lda $91,x			lda 	esType+1,x
.4a23	30 07		bmi $4a2c			bmi 	_AAUsedAllIndices
.4a25	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4a27	10 14		bpl $4a3d			bpl 	_AABadDepth 				; no, too many indexes.
.4a29	4c d3 49	jmp $49d3			jmp 	_AAFollow 					; otherwise follow them.
.4a2c					_AAUsedAllIndices:
.4a2c	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4a2e	30 0d		bmi $4a3d			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4a30	68		pla				pla
.4a31	a8		tay				tay
.4a32	68		pla				pla
.4a33	aa		tax				tax
.4a34	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4a36	95 98		sta $98,x			sta 	esInt0,x
.4a38	a5 2b		lda $2b				lda 	temp0+1
.4a3a	95 a0		sta $a0,x			sta 	esInt1,x
.4a3c	60		rts				rts
.4a3d					_AABadDepth:
.4a3d	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4a3f	20 18 15	jsr $1518		jsr	errorHandler
.4a42					_AABadIndex:
.4a42	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4a44	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e5f					elementSize:
>0e5f							.fill	 1
.4a47					CreateArray:
.4a47	20 1e 4c	jsr $4c1e			jsr 	AccessSetup 				; set up the basic stuff.
.4a4a	ad 61 0e	lda $0e61			lda 	varType 					; is the variable type an array
.4a4d	4a		lsr a				lsr 	a
.4a4e	90 36		bcc $4a86			bcc 	CANotArray 					; no, cause an error.
.4a50	20 27 4d	jsr $4d27			jsr 	FindVariable 				; does the variable exist already
.4a53	b0 2c		bcs $4a81			bcs 	CAFound 					; cannot redefine it.
.4a55	20 5b 4c	jsr $4c5b			jsr 	CreateVariable 				; create the variable entry.
.4a58	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4a5a	48		pha				pha
.4a5b	a5 2b		lda $2b				lda 	temp0+1
.4a5d	48		pha				pha
.4a5e	a2 00		ldx #$00			ldx 	#0
.4a60	20 8b 4a	jsr $4a8b			jsr 	GetArrayDimensions 			; get the array dimensions
.4a63	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4a65	20 bb 4a	jsr $4abb			jsr 	CreateArrayLevel 			; level to YA
.4a68	aa		tax				tax 								; level now in YX
.4a69	68		pla				pla 								; get address back to temp0 to write.
.4a6a	85 2b		sta $2b				sta 	temp0+1
.4a6c	68		pla				pla
.4a6d	85 2a		sta $2a				sta 	temp0
.4a6f	98		tya				tya 								; write YX there.
.4a70	a0 06		ldy #$06			ldy 	#6
.4a72	91 2a		sta ($2a),y			sta 	(temp0),y
.4a74	88		dey				dey
.4a75	8a		txa				txa
.4a76	91 2a		sta ($2a),y			sta 	(temp0),y
.4a78	ac 62 0e	ldy $0e62			ldy 	varEnd 						; restore Y and exit.
.4a7b	60		rts				rts
.4a7c					CASize:
.4a7c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4a7e	20 18 15	jsr $1518		jsr	errorHandler
.4a81					CAFound:
.4a81	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4a83	20 18 15	jsr $1518		jsr	errorHandler
.4a86					CANotArray:
.4a86	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4a88	20 18 15	jsr $1518		jsr	errorHandler
.4a8b					GetArrayDimensions:
.4a8b	ad 61 0e	lda $0e61			lda 	varType 					; push variable type on the stack.
.4a8e	48		pha				pha
.4a8f	ac 62 0e	ldy $0e62			ldy 	varEnd
.4a92					_CAGetDimensions:
.4a92	8a		txa				txa 								; get the next level
.4a93	a2 0a		ldx #$0a		ldx	#10
.4a95	20 69 3e	jsr $3e69		jsr	mainHandler
.4a98	aa		tax				tax
.4a99	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4a9b	29 e0		and #$e0			and 	#$E0
.4a9d	15 a8		ora $a8,x			ora 	esInt2,x
.4a9f	15 b0		ora $b0,x			ora 	esInt3,x
.4aa1	d0 d9		bne $4a7c			bne 	CASize
.4aa3	e8		inx				inx 								; next level.
.4aa4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4aa6	c8		iny				iny
.4aa7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4aa9	f0 e7		beq $4a92			beq 	_CAGetDimensions
.4aab	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4aad	d0 cd		bne $4a7c			bne 	CASize
.4aaf	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4ab1	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.4ab3	68		pla				pla 								; restore the variable type ($3A-$3F)
.4ab4	8d 61 0e	sta $0e61			sta 	varType
.4ab7	8c 62 0e	sty $0e62			sty 	varEnd 						; save exit Y value, after dimensions
.4aba	60		rts				rts
.4abb					CreateArrayLevel:
.4abb	ac 61 0e	ldy $0e61			ldy 	varType
.4abe	b9 e5 4a	lda $4ae5,y			lda 	CAActualSize-$3A,y
.4ac1	8d 5f 0e	sta $0e5f			sta 	elementSize 				; get element size this level.
.4ac4	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4ac6	30 05		bmi $4acd			bmi 	_CANotPointer
.4ac8	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4aca	8d 5f 0e	sta $0e5f			sta 	elementSize
.4acd					_CANotPointer:
.4acd	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4acf	85 2a		sta $2a				sta 	temp0
.4ad1	48		pha				pha
.4ad2	a5 36		lda $36				lda 	lowMemory+1
.4ad4	85 2b		sta $2b				sta 	temp0+1
.4ad6	48		pha				pha
.4ad7	20 58 4b	jsr $4b58			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4ada	a0 00		ldy #$00			ldy 	#0
.4adc	b5 98		lda $98,x			lda 	esInt0,x
.4ade	91 2a		sta ($2a),y			sta 	(temp0),y
.4ae0	c8		iny				iny
.4ae1	b5 a0		lda $a0,x			lda 	esInt1,x
.4ae3	91 2a		sta ($2a),y			sta 	(temp0),y
.4ae5	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4ae7	30 06		bmi $4aef			bmi 	_CALNotLast
.4ae9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4aeb	09 80		ora #$80			ora 	#$80
.4aed	91 2a		sta ($2a),y			sta 	(temp0),y
.4aef					_CALNotLast:
.4aef	a9 02		lda #$02			lda 	#2
.4af1	20 15 4b	jsr $4b15			jsr 	_CALAddTemp0
.4af4	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4af6	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4af8	b5 a0		lda $a0,x			lda 	esInt1,x
.4afa	95 b0		sta $b0,x			sta 	esInt3,x
.4afc					_CALClear:
.4afc	20 25 4b	jsr $4b25			jsr 	EraseOneElement
.4aff	ad 5f 0e	lda $0e5f			lda 	elementSize 				; move to next element
.4b02	20 15 4b	jsr $4b15			jsr 	_CALAddTemp0
.4b05	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4b07	d0 02		bne $4b0b			bne 	_CALNoBorrow
.4b09	d6 b0		dec $b0,x			dec 	esInt3,x
.4b0b					_CALNoBorrow:
.4b0b	d6 a8		dec $a8,x			dec 	esInt2,x
.4b0d	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4b0f	10 eb		bpl $4afc			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4b11	68		pla				pla 								; restore the start of this into YA.
.4b12	a8		tay				tay
.4b13	68		pla				pla
.4b14	60		rts				rts
.4b15					_CALAddTemp0:
.4b15	18		clc				clc
.4b16	65 2a		adc $2a				adc 	temp0
.4b18	85 2a		sta $2a				sta 	temp0
.4b1a	90 02		bcc $4b1e			bcc 	_CALANoCarry
.4b1c	e6 2b		inc $2b				inc 	temp0+1
.4b1e					_CALANoCarry:
.4b1e	60		rts				rts
.4b1f					CAActualSize:
>4b1f	04 04						.byte 	VarISize,VarISize
>4b21	02 02						.byte 	VarSSize,VarSSize
>4b23	06 06						.byte 	VarFSize,VarFSize
.4b25					EraseOneElement:
.4b25	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4b27	10 09		bpl $4b32			bpl 	_EOESubArray
.4b29	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4b2b	ad 61 0e	lda $0e61			lda 	varType
.4b2e	20 c5 4c	jsr $4cc5			jsr 	ZeroTemp0Y
.4b31	60		rts				rts
.4b32					_EOESubArray:
.4b32	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4b34	48		pha				pha
.4b35	a5 2b		lda $2b				lda 	temp0+1
.4b37	48		pha				pha
.4b38	ad 5f 0e	lda $0e5f			lda 	elementSize 				; save element size
.4b3b	48		pha				pha
.4b3c	e8		inx				inx 								; create at next level
.4b3d	20 bb 4a	jsr $4abb			jsr 	CreateArrayLevel
.4b40	ca		dex				dex
.4b41	85 32		sta $32				sta 	tempShort 					; save A
.4b43	68		pla				pla  								; restore element size.
.4b44	8d 5f 0e	sta $0e5f			sta 	elementSize
.4b47	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4b48	85 2b		sta $2b				sta 	temp0+1
.4b4a	68		pla				pla
.4b4b	85 2a		sta $2a				sta 	temp0
.4b4d	98		tya				tya 								; store Y/A there
.4b4e	a0 01		ldy #$01			ldy 	#1
.4b50	91 2a		sta ($2a),y			sta 	(temp0),y
.4b52	a5 32		lda $32				lda 	tempShort
.4b54	88		dey				dey
.4b55	91 2a		sta ($2a),y			sta 	(temp0),y
.4b57	60		rts				rts
.4b58					AllocateArraySpace:
.4b58	18		clc				clc 								; element count + 1 => temp2.
.4b59	b5 98		lda $98,x			lda 	esInt0,x
.4b5b	69 01		adc #$01			adc 	#1
.4b5d	85 2e		sta $2e				sta 	temp2
.4b5f	b5 a0		lda $a0,x			lda 	esInt1,x
.4b61	69 00		adc #$00			adc 	#0
.4b63	85 2f		sta $2f				sta 	temp2+1
.4b65	ad 5f 0e	lda $0e5f			lda 	elementSize 				; bytes per element
.4b68	20 8f 4b	jsr $4b8f			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4b6b	18		clc				clc 								; add 2 for 'max element' byte.
.4b6c	a5 2e		lda $2e				lda 	temp2
.4b6e	69 02		adc #$02			adc 	#2
.4b70	85 2e		sta $2e				sta 	temp2
.4b72	90 02		bcc $4b76			bcc 	_AASNoCarry
.4b74	e6 2f		inc $2f				inc 	temp2+1
.4b76					_AASNoCarry:
.4b76	18		clc				clc 								; add to low memory, allocating space.
.4b77	a5 35		lda $35				lda 	lowMemory
.4b79	65 2e		adc $2e				adc 	temp2
.4b7b	85 35		sta $35				sta 	lowMemory
.4b7d	a5 36		lda $36				lda 	lowMemory+1
.4b7f	65 2f		adc $2f				adc 	temp2+1
.4b81	85 36		sta $36				sta 	lowMemory+1
.4b83	b0 05		bcs $4b8a			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4b85	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4b87	b0 01		bcs $4b8a			bcs 	_AASFail
.4b89	60		rts				rts
.4b8a					_AASFail:
.4b8a	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4b8c	20 18 15	jsr $1518		jsr	errorHandler
.4b8f					MultiplyTemp2ByA:
.4b8f	48		pha				pha
.4b90	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4b92	85 30		sta $30				sta 	temp3
.4b94	a5 2f		lda $2f				lda 	temp2+1
.4b96	85 31		sta $31				sta 	temp3+1
.4b98	68		pla				pla
.4b99	06 2e		asl $2e				asl 	temp2 						; double it.
.4b9b	26 2f		rol $2f				rol 	temp2+1
.4b9d	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4b9f	f0 15		beq $4bb6			beq 	_MTBAExit
.4ba1	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4ba3	d0 0d		bne $4bb2			bne 	_MTBANotFloat
.4ba5	18		clc				clc 								; so this will make it x 3
.4ba6	a5 2e		lda $2e				lda 	temp2
.4ba8	65 30		adc $30				adc 	temp3
.4baa	85 2e		sta $2e				sta 	temp2
.4bac	a5 2f		lda $2f				lda 	temp2+1
.4bae	65 31		adc $31				adc 	temp3+1
.4bb0	85 2f		sta $2f				sta 	temp2+1
.4bb2					_MTBANotFloat:
.4bb2	06 2e		asl $2e				asl 	temp2 						; double it.
.4bb4	26 2f		rol $2f				rol 	temp2+1
.4bb6					_MTBAExit:
.4bb6	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e60					varHash:
>0e60							.fill	1
.0e61					varType:
>0e61							.fill 	1
.0e62					varEnd:
>0e62							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4bb7					AccessVariable:
.4bb7	aa		tax				tax 								; stack in X
.4bb8	c8		iny				iny									; look at second character
.4bb9	b1 28		lda ($28),y			lda 	(codePtr),y
.4bbb	88		dey				dey
.4bbc	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4bbe	d0 15		bne $4bd5			bne 	_AVLong 					; no, always use the hash tables.
.4bc0	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4bc2	38		sec				sec 	 							; make it 0-25
.4bc3	e9 01		sbc #$01			sbc 	#1
.4bc5	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4bc6	0a		asl a				asl 	a
.4bc7	95 98		sta $98,x			sta 	esInt0,x
.4bc9	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4bcb	95 a0		sta $a0,x			sta 	esInt1,x
.4bcd	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4bcf	95 90		sta $90,x			sta 	esType,x
.4bd1	c8		iny				iny 								; skip over the variable reference in the code.
.4bd2	c8		iny				iny  								; (1 letter, 1 type)
.4bd3	8a		txa				txa 								; stack in A to return.
.4bd4	60		rts				rts
.4bd5					_AVLong:
.4bd5	8a		txa				txa
.4bd6	48		pha				pha
.4bd7	20 1e 4c	jsr $4c1e			jsr 	AccessSetup 				; set up the basic information we need for later
.4bda	20 27 4d	jsr $4d27			jsr 	FindVariable 				; does the variable exist already ?
.4bdd	b0 0e		bcs $4bed			bcs 	_AVFound 					; yes, then its found
.4bdf	ad 61 0e	lda $0e61			lda 	varType 					; otherwise, is the variable type an array
.4be2	4a		lsr a				lsr 	a
.4be3	90 05		bcc $4bea			bcc 	_AVCanCreate 				; if not, we can autocreate
.4be5	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4be7	20 18 15	jsr $1518		jsr	errorHandler
.4bea					_AVCanCreate:
.4bea	20 5b 4c	jsr $4c5b			jsr 	CreateVariable 				; variable does not exist, create it.
.4bed					_AVFound:
.4bed	68		pla				pla
.4bee	aa		tax				tax
.4bef	18		clc				clc 								; copy temp0 (variable record address)
.4bf0	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4bf2	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4bf4	95 98		sta $98,x			sta 	esInt0,x
.4bf6	a5 2b		lda $2b				lda 	temp0+1
.4bf8	69 00		adc #$00			adc 	#0
.4bfa	95 a0		sta $a0,x			sta 	esInt1,x
.4bfc	a9 00		lda #$00			lda 	#0
.4bfe	95 a8		sta $a8,x			sta 	esInt2,x
.4c00	95 b0		sta $b0,x			sta 	esInt3,x
.4c02	ac 61 0e	ldy $0e61			ldy 	varType 					; get the type ID from the type.
.4c05	b9 de 4b	lda $4bde,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4c08	95 90		sta $90,x			sta 	esType,x
.4c0a	ac 62 0e	ldy $0e62			ldy 	varEnd 						; restore Y
.4c0d	ad 61 0e	lda $0e61			lda 	VarType 					; get variable type, put LSB into C
.4c10	4a		lsr a				lsr 	a
.4c11	90 03		bcc $4c16			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4c13	20 bf 49	jsr $49bf			jsr 	AccessArray 				; array lookup. if LSB was set.
.4c16					_AVNotArray:
.4c16	8a		txa				txa 								; return stack in A and return
.4c17	60		rts				rts
.4c18					_AVTypeTable:
>4c18	80 80						.byte 	$80,$80						; integer
>4c1a	c0 c0						.byte 	$C0,$C0 					; string
>4c1c	81 81						.byte 	$81,$81 					; float
.4c1e					AccessSetup:
.4c1e	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4c20	8d 60 0e	sta $0e60			sta 	varHash
.4c23	98		tya				tya
.4c24	48		pha				pha
.4c25	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4c27	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4c29	b0 0b		bcs $4c36			bcs 	_ASComplete
.4c2b	18		clc				clc 								; add to the hash. Might improve this.
.4c2c	6d 60 0e	adc $0e60			adc 	varHash
.4c2f	8d 60 0e	sta $0e60			sta 	varHash
.4c32	c8		iny				iny 								; next character
.4c33	4c 25 4c	jmp $4c25			jmp 	_ASLoop
.4c36					_ASComplete:
.4c36	8d 61 0e	sta $0e61			sta 	varType 					; save variable type byte
.4c39	c8		iny				iny
.4c3a	8c 62 0e	sty $0e62			sty 	varEnd 						; save the ending position.
.4c3d	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4c3e	e9 3a		sbc #$3a			sbc 	#$3A
.4c40	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4c41	0a		asl a				asl 	a
.4c42	0a		asl a				asl 	a
.4c43	0a		asl a				asl 	a 							; 2 bytes/word
.4c44	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4c46	ad 60 0e	lda $0e60			lda 	varHash 					; get hash
.4c49	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4c4b	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4c4c	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4c4e	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4c50	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4c52	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4c54	69 00		adc #$00			adc 	#0
.4c56	85 3c		sta $3c				sta 	hashList+1
.4c58	68		pla				pla
.4c59	a8		tay				tay
.4c5a	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4c5b					CreateVariable:
.4c5b	98		tya				tya 								; push Y on the stack twice.
.4c5c	48		pha				pha									; position in code of the new variable.
.4c5d	48		pha				pha
.4c5e	ae 61 0e	ldx $0e61			ldx 	varType 					; get var type 0-5 from the var type
.4c61	bd 85 4c	lda $4c85,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4c64	48		pha				pha 								; save length
.4c65	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4c67	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4c69	a5 36		lda $36				lda 	lowMemory+1
.4c6b	85 2b		sta $2b				sta 	temp0+1
.4c6d	68		pla				pla 								; get length
.4c6e	18		clc				clc 								; add to low memory.
.4c6f	65 35		adc $35				adc 	lowMemory
.4c71	85 35		sta $35				sta 	lowMemory
.4c73	90 08		bcc $4c7d			bcc 	_CVNoCarry
.4c75	e6 36		inc $36				inc 	lowMemory+1
.4c77	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4c79	c5 34		cmp $34				cmp 	highMemory+1
.4c7b	b0 3d		bcs $4cba			bcs 	_CVMemory
.4c7d					_CVNoCarry:
.4c7d	ad 60 0e	lda $0e60			lda 	varHash 					; store hash at offset 4.
.4c80	a0 04		ldy #$04			ldy 	#4
.4c82	91 2a		sta ($2a),y			sta 	(temp0),y
.4c84	68		pla				pla 								; offset, work out where the variable name is.
.4c85	18		clc				clc
.4c86	65 28		adc $28				adc 	codePtr
.4c88	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4c8a	91 2a		sta ($2a),y			sta 	(temp0),y
.4c8c	a5 29		lda $29				lda 	codePtr+1
.4c8e	69 00		adc #$00			adc 	#0
.4c90	c8		iny				iny
.4c91	91 2a		sta ($2a),y			sta 	(temp0),y
.4c93	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4c96	b0 03		bcs $4c9b			bcs 	_CVNotImmediate
.4c98	20 fd 4c	jsr $4cfd			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4c9b					_CVNotImmediate:
.4c9b	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4c9d	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4c9f	91 2a		sta ($2a),y			sta 	(temp0),y
.4ca1	c8		iny				iny
.4ca2	b1 3b		lda ($3b),y			lda 	(hashList),y
.4ca4	91 2a		sta ($2a),y			sta 	(temp0),y
.4ca6	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4ca8	91 3b		sta ($3b),y			sta 	(hashList),y
.4caa	88		dey				dey
.4cab	a5 2a		lda $2a				lda 	temp0
.4cad	91 3b		sta ($3b),y			sta 	(hashList),y
.4caf	ad 61 0e	lda $0e61			lda 	varType 					; type in A
.4cb2	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4cb4	20 c5 4c	jsr $4cc5			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4cb7	68		pla				pla
.4cb8	a8		tay				tay
.4cb9	60		rts				rts
.4cba					_CVMemory:
.4cba	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4cbc	20 18 15	jsr $1518		jsr	errorHandler
>4cbf	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4cc1	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4cc3	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4cc5					ZeroTemp0Y:
.4cc5	4a		lsr a				lsr 	a 							; bit 0 in carry
.4cc6	0a		asl a				asl 	a
.4cc7	b0 19		bcs $4ce2			bcs 	_ZTExit 					; we don't initialise arrays.
.4cc9	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4ccb	f0 16		beq $4ce3			beq 	_ZTWriteNullString 			; write "" string
.4ccd	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4ccf	f0 22		beq $4cf3			beq 	_ZTWriteFloat
.4cd1	98		tya				tya
.4cd2	48		pha				pha
.4cd3	a9 00		lda #$00			lda 	#0
.4cd5	91 2a		sta ($2a),y			sta 	(temp0),y
.4cd7	c8		iny				iny
.4cd8	91 2a		sta ($2a),y			sta 	(temp0),y
.4cda	c8		iny				iny
.4cdb	91 2a		sta ($2a),y			sta 	(temp0),y
.4cdd	c8		iny				iny
.4cde	91 2a		sta ($2a),y			sta 	(temp0),y
.4ce0	68		pla				pla
.4ce1	a8		tay				tay
.4ce2					_ZTExit:
.4ce2	60		rts				rts
.4ce3					_ZTWriteNullString:
.4ce3	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4ce5	8d ce 0a	sta $0ace			sta 	NullString
.4ce8	a9 ce		lda #$ce			lda 	#NullString & $FF
.4cea	91 2a		sta ($2a),y			sta 	(temp0),y
.4cec	a9 0a		lda #$0a			lda 	#NullString >> 8
.4cee	c8		iny				iny
.4cef	91 2a		sta ($2a),y			sta 	(temp0),y
.4cf1	88		dey				dey
.4cf2	60		rts				rts
.4cf3					_ZTWriteFloat:
.4cf3	8a		txa				txa
.4cf4	48		pha				pha
.4cf5	a2 20		ldx #$20		ldx	#32
.4cf7	20 dd 25	jsr $25dd		jsr	floatingpointHandler
.4cfa	68		pla				pla
.4cfb	aa		tax				tax
.4cfc	60		rts				rts
.4cfd					CloneVariableName:
.4cfd	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4cff	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d01	85 2e		sta $2e				sta 	temp2
.4d03	c8		iny				iny
.4d04	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d06	85 2f		sta $2f				sta 	temp2+1
.4d08	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4d0a	91 2a		sta ($2a),y			sta 	(temp0),y
.4d0c	88		dey				dey
.4d0d	a5 35		lda $35				lda 	lowMemory
.4d0f	91 2a		sta ($2a),y			sta 	(temp0),y
.4d11	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4d13					_CVNCopy:
.4d13	b1 2e		lda ($2e),y			lda		(temp2),y
.4d15	91 35		sta ($35),y			sta 	(lowMemory),y
.4d17	c8		iny				iny
.4d18	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4d1a	90 f7		bcc $4d13			bcc 	_CVNCopy
.4d1c	98		tya				tya 								; add Y to low memory
.4d1d	18		clc				clc
.4d1e	65 35		adc $35				adc 	lowMemory
.4d20	85 35		sta $35				sta 	lowMemory
.4d22	90 02		bcc $4d26			bcc 	_CVNNoCarry
.4d24	e6 36		inc $36				inc 	lowMemory+1
.4d26					_CVNNoCarry:
.4d26	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4d27					FindVariable:
.4d27	98		tya				tya
.4d28	48		pha				pha
.4d29	98		tya				tya 								; point temp2 to the actual name
.4d2a	18		clc				clc 								; in memory of the variable being created
.4d2b	65 28		adc $28				adc 	codePtr
.4d2d	85 2e		sta $2e				sta 	temp2
.4d2f	a5 29		lda $29				lda 	codePtr+1
.4d31	69 00		adc #$00			adc 	#0
.4d33	85 2f		sta $2f				sta 	temp2+1
.4d35	a0 00		ldy #$00			ldy 	#0
.4d37	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4d39	85 2a		sta $2a				sta 	temp0
.4d3b	a5 3c		lda $3c				lda 	hashList+1
.4d3d	85 2b		sta $2b				sta 	temp0+1
.4d3f	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4d41	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d43	f0 2c		beq $4d71			beq 	_FVFail
.4d45	aa		tax				tax
.4d46	88		dey				dey		 							; get LSB
.4d47	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d49	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4d4b	86 2b		stx $2b				stx 	temp0+1
.4d4d	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4d4f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d51	cd 60 0e	cmp $0e60			cmp 	varHash
.4d54	d0 e9		bne $4d3f			bne 	_FVNext 					; if not, no point in checking the name.
.4d56	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4d57	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d59	85 2d		sta $2d				sta 	temp1+1
.4d5b	88		dey				dey
.4d5c	b1 2a		lda ($2a),y			lda 	(temp0),y
.4d5e	85 2c		sta $2c				sta 	temp1
.4d60	a0 00		ldy #$00			ldy 	#0
.4d62					_FVCheck:
.4d62	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4d64	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4d66	d0 d7		bne $4d3f			bne 	_FVNext		 				; fail if different.
.4d68	c8		iny				iny
.4d69	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4d6b	90 f5		bcc $4d62			bcc 	_FVCheck
.4d6d	68		pla				pla
.4d6e	a8		tay				tay
.4d6f	38		sec				sec
.4d70	60		rts				rts
.4d71					_FVFail:
.4d71	68		pla				pla
.4d72	a8		tay				tay
.4d73	18		clc				clc
.4d74	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4d75					HashTableReset:
.4d75	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4d77	a9 00		lda #$00			lda 	#0
.4d79					_HTRClear:
.4d79	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4d7c	ca		dex				dex
.4d7d	d0 fa		bne $4d79			bne 	_HTRClear
.4d7f	60		rts				rts

;******  Return to file: variable/variable.asm

.4d80					variableHandler:
.4d80	7c 83 4d	jmp ($4d83,x)			jmp 	(variableVectors,x)
.4d83					variableVectors:
>4d83	8b 4d					.word _DummyControlHandler ; index 0
>4d85	b7 4b					.word AccessVariable       ; index 2
>4d87	47 4a					.word CreateArray          ; index 4
>4d89	75 4d					.word HashTableReset       ; index 6
.4d8b					_DummyControlHandler:
.4d8b	60		rts			rts

;******  Return to file: basic.asm

.4d8c					section_end_variable:
.4d8c					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e63					endStorage:
>4d8c							.align 	256
.4e00					programMemory:
>4dff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4e00					section_end_footer:

;******  End of listing
