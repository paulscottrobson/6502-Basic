
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Mar 15 05:58:28 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$40					StackAddress = $40
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0078					endOfStack:
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	86 36						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 3d		lda #$3d			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 94 12	jsr $1294		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 82 18	jsr $1882		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 b8 39	jsr $39b8		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	20 a3 2d	jsr $2da3			jsr 	MInt32False
.1032	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.1034	aa		tax				tax
.1035	a9 02		lda #$02			lda 	#AMD_ACCIMP
.1037	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.1039	f0 41		beq $107c			beq 	_AGOExit
.103b	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.103d	f0 3d		beq $107c			beq 	_AGOExit
.103f	c8		iny				iny 								; consume the token
.1040	a9 00		lda #$00			lda 	#AMD_IMM
.1042	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.1044	f0 2d		beq $1073			beq		_AGOEvalExit 				; with an operand.
.1046	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.1048	f0 40		beq $108a			beq 	_AGOIndirect
.104a	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.104c	d0 0b		bne $1059			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.104e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1050	c8		iny				iny
.1051	aa		tax				tax
.1052	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.1054	e0 3a		cpx #$3a			cpx 	#$3A
.1056	f0 24		beq $107c			beq 	_AGOExit
.1058	88		dey				dey 								; unpick 2 iny
.1059					_AGOZeroPage1:
.1059	88		dey				dey
.105a	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.105c	a2 06		ldx #$06		ldx	#6
.105e	20 0d 2f	jsr $2f0d		jsr	mainHandler
.1061	20 b9 10	jsr $10b9			jsr 	AsmGetIndexing
.1064	a9 01		lda #$01			lda 	#AMD_ZERO
.1066	90 14		bcc $107c			bcc 	_AGOExit
.1068	a9 05		lda #$05			lda 	#AMD_ZEROX
.106a	e0 00		cpx #$00			cpx 	#0
.106c	f0 0e		beq $107c			beq 	_AGOExit
.106e	a9 09		lda #$09			lda 	#AMD_ZEROY
.1070	4c 7c 10	jmp $107c			jmp 	_AGOExit
.1073					_AGOEvalExit:
.1073	48		pha				pha
.1074	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1076	a2 06		ldx #$06		ldx	#6
.1078	20 0d 2f	jsr $2f0d		jsr	mainHandler
.107b	68		pla				pla
.107c					_AGOExit:
.107c	48		pha				pha 								; save the mode
.107d	a5 58		lda $58				lda 	esInt2 						; check the operand is zero.
.107f	05 60		ora $60				ora 	esInt3
.1081	d0 02		bne $1085			bne 	_AGOValue
.1083	68		pla				pla
.1084	60		rts				rts
.1085					_AGOValue:
.1085	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1087	20 b5 12	jsr $12b5		jsr	errorHandler
.108a					_AGOIndirect:
.108a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.108c	a2 06		ldx #$06		ldx	#6
.108e	20 0d 2f	jsr $2f0d		jsr	mainHandler
.1091	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1093	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1095	f0 11		beq $10a8			beq 	_AGOIndIndY
.1097	20 b9 10	jsr $10b9			jsr 	ASMGetIndexing 				; must be ,X)
.109a	90 39		bcc $10d5			bcc 	AGISyntax
.109c	e0 00		cpx #$00			cpx 	#0
.109e	d0 35		bne $10d5			bne 	AGISyntax
.10a0	a2 00		ldx #$00		ldx	#0
.10a2	20 0d 2f	jsr $2f0d		jsr	mainHandler
.10a5	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10a7	60		rts				rts
.10a8					_AGOIndIndY:
.10a8	c8		iny				iny
.10a9	20 b9 10	jsr $10b9			jsr 	ASMGetIndexing 				; get indexing if any
.10ac	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10ae	90 cc		bcc $107c			bcc 	_AGOExit 					; none then exit
.10b0	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b2	f0 21		beq $10d5			beq 	AGISyntax
.10b4	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10b6	4c 7c 10	jmp $107c			jmp 	_AGOExit
.10b9					AsmGetIndexing:
.10b9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10bd	18		clc				clc
.10be	d0 14		bne $10d4			bne 	_AGIExit 					; no comma, return with CC
.10c0	c8		iny				iny 								; get what SHOULD be X or Y
.10c1	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c3	38		sec				sec 								; subtract 6 bit ASCII of X
.10c4	e9 18		sbc #$18			sbc 	#"X" & $3F
.10c6	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10c8	b0 0b		bcs $10d5			bcs 	AGISyntax
.10ca	aa		tax				tax 								; put in index
.10cb	c8		iny				iny 								; get what follows that, should be the $3A marker
.10cc	b1 28		lda ($28),y			lda 	(codePtr),y
.10ce	c8		iny				iny
.10cf	c9 3a		cmp #$3a			cmp 	#$3A
.10d1	d0 02		bne $10d5			bne 	AGISyntax
.10d3	38		sec				sec 								; return CS and index mode in X
.10d4					_AGIExit:
.10d4	60		rts				rts
.10d5					AGISyntax:
.10d5	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10d7	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af2					asmToken:
>0af2							.fill 	1
.0af3					asmMode:
>0af3							.fill 	1 							; esInt0/1
.10da					AssembleOneInstruction:
.10da	8d f2 0a	sta $0af2			sta 	asmToken
.10dd	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.10e0	8d f3 0a	sta $0af3			sta 	asmMode
>10e3	db						.byte 	$DB
.10e4	60		rts				rts

;******  Processing file: assembler/../generated/asmtables.inc

.10e5					OpcodeTable:
>10e5	01					.byte	$01			; $91 ora
>10e6	21					.byte	$21			; $92 (and)
>10e7	41					.byte	$41			; $93 eor
>10e8	61					.byte	$61			; $94 adc
>10e9	81					.byte	$81			; $95 sta
>10ea	a1					.byte	$a1			; $96 lda
>10eb	c1					.byte	$c1			; $97 cmp
>10ec	e1					.byte	$e1			; $98 sbc
>10ed	02					.byte	$02			; $99 asl
>10ee	22					.byte	$22			; $9a rol
>10ef	42					.byte	$42			; $9b lsr
>10f0	62					.byte	$62			; $9c ror
>10f1	82					.byte	$82			; $9d stx
>10f2	a2					.byte	$a2			; $9e ldx
>10f3	c2					.byte	$c2			; $9f dec
>10f4	e2					.byte	$e2			; $a0 inc
>10f5	60					.byte	$60			; $a1 stz
>10f6	20					.byte	$20			; $a2 bit
>10f7	80					.byte	$80			; $a3 sty
>10f8	a0					.byte	$a0			; $a4 ldy
>10f9	c0					.byte	$c0			; $a5 cpy
>10fa	e0					.byte	$e0			; $a6 cpx
>10fb	00					.byte	$00			; $a7 tsb
>10fc	10					.byte	$10			; $a8 trb
>10fd	14					.byte	$14			; $a9 jsr
>10fe	40					.byte	$40			; $aa jmp
>10ff	10					.byte	$10			; $ab bpl
>1100	30					.byte	$30			; $ac bmi
>1101	50					.byte	$50			; $ad bvc
>1102	70					.byte	$70			; $ae bvs
>1103	90					.byte	$90			; $af bcc
>1104	b0					.byte	$b0			; $b0 bcs
>1105	d0					.byte	$d0			; $b1 bne
>1106	f0					.byte	$f0			; $b2 beq
>1107	80					.byte	$80			; $b3 bra
>1108	00					.byte	$00			; $b4 brk
>1109	08					.byte	$08			; $b5 php
>110a	18					.byte	$18			; $b6 clc
>110b	28					.byte	$28			; $b7 plp
>110c	38					.byte	$38			; $b8 sec
>110d	40					.byte	$40			; $b9 rti
>110e	48					.byte	$48			; $ba pha
>110f	58					.byte	$58			; $bb cli
>1110	5a					.byte	$5a			; $bc phy
>1111	60					.byte	$60			; $bd rts
>1112	68					.byte	$68			; $be pla
>1113	78					.byte	$78			; $bf sei
>1114	7a					.byte	$7a			; $c0 ply
>1115	88					.byte	$88			; $c1 dey
>1116	8a					.byte	$8a			; $c2 txa
>1117	98					.byte	$98			; $c3 tya
>1118	9a					.byte	$9a			; $c4 txs
>1119	a8					.byte	$a8			; $c5 tay
>111a	aa					.byte	$aa			; $c6 tax
>111b	b8					.byte	$b8			; $c7 clv
>111c	ba					.byte	$ba			; $c8 tsx
>111d	c8					.byte	$c8			; $c9 iny
>111e	ca					.byte	$ca			; $ca dex
>111f	d8					.byte	$d8			; $cb cld
>1120	da					.byte	$da			; $cc phx
>1121	e8					.byte	$e8			; $cd inx
>1122	ea					.byte	$ea			; $ce nop
>1123	f8					.byte	$f8			; $cf sed
>1124	fa					.byte	$fa			; $d0 plx
.1125					Group2OpcodeAvailability:
>1125	57					.byte	$57			; $99 asl $02
>1126	57					.byte	$57			; $9a rol $22
>1127	57					.byte	$57			; $9b lsr $42
>1128	57					.byte	$57			; $9c ror $62
>1129	05					.byte	$05			; $9d stx $82
>112a	05					.byte	$05			; $9e ldx $a2
>112b	55					.byte	$55			; $9f dec $c2
>112c	55					.byte	$55			; $a0 inc $e2
>112d	11					.byte	$11			; $a1 stz $60
>112e	55					.byte	$55			; $a2 bit $20
>112f	05					.byte	$05			; $a3 sty $80
>1130	55					.byte	$55			; $a4 ldy $a0
>1131	15					.byte	$15			; $a5 cpy $c0
>1132	05					.byte	$05			; $a6 cpx $e0
>1133	05					.byte	$05			; $a7 tsb $00
>1134	05					.byte	$05			; $a8 trb $10
>1135	04					.byte	$04			; $a9 jsr $14
>1136	04					.byte	$04			; $aa jmp $40
.1137					AssemblerSpecialCases:
>1137	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>113a	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>113d	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>1140	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>1143	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1146	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>1149	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>114c	a2 00 89				.byte	$a2,0,$89		; bit #
>114f	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>1152	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1155	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1156					AssembleLabel:
>1156	db						.byte 	$DB
.1157	ea		nop				nop
.1158	60		rts				rts

;******  Return to file: assembler/assembler.asm

.1159					assemblerHandler:
.1159	7c 5c 11	jmp ($115c,x)			jmp 	(assemblerVectors,x)
.115c					assemblerVectors:
>115c	da 10					.word AssembleOneInstruction ; index 0
>115e	56 11					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.1160					section_end_assembler:
.1160					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.1160					X16Break:
.1160	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.1163	f0 01		beq $1166			beq 	_IsBreak
.1165	60		rts				rts
.1166					_IsBreak:
.1166	a2 20		ldx #$20			ldx 	#ErrorID_Break
.1168	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.116b					ExternSave:
.116b	98		tya				tya
.116c	48		pha				pha
.116d	20 bb 11	jsr $11bb			jsr 	ExternGetLength 			; get length of file into A name YX
.1170	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1173	a9 01		lda #$01			lda 	#1
.1175	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1177	a0 00		ldy #$00			ldy 	#0
.1179	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.117c	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.117e	85 2a		sta $2a				sta 	temp0
.1180	a5 51		lda $51				lda 	esInt1+1
.1182	85 2b		sta $2b				sta 	temp0+1
.1184	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.1186	a4 52		ldy $52				ldy 	esInt1+2
.1188	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.118a	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.118d	b0 03		bcs $1192			bcs 	_ESSave
.118f	68		pla				pla
.1190	a8		tay				tay
.1191	60		rts				rts
.1192					_ESSave:
.1192	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.1194	20 b5 12	jsr $12b5		jsr	errorHandler
.1197					ExternLoad:
.1197	98		tya				tya
.1198	48		pha				pha
.1199	20 bb 11	jsr $11bb			jsr 	ExternGetLength 			; get length of file into A name YX
.119c	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.119f	a9 01		lda #$01			lda 	#1
.11a1	a2 08		ldx #$08			ldx 	#8	 						; device #8
.11a3	a0 00		ldy #$00			ldy 	#0
.11a5	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.11a8	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.11aa	a4 51		ldy $51				ldy 	esInt1+1
.11ac	a9 00		lda #$00			lda 	#0 							; load command
.11ae	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.11b1	b0 03		bcs $11b6			bcs 	_ESLoad
.11b3	68		pla				pla
.11b4	a8		tay				tay
.11b5	60		rts				rts
.11b6					_ESLoad:
.11b6	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.11b8	20 b5 12	jsr $12b5		jsr	errorHandler
.11bb					ExternGetLength:
.11bb	a5 48		lda $48				lda 	esInt0 						; length into A.
.11bd	85 2a		sta $2a				sta 	temp0
.11bf	a5 50		lda $50				lda 	esInt1
.11c1	85 2b		sta $2b				sta 	temp0+1
.11c3	a0 00		ldy #$00			ldy 	#0
.11c5	b1 2a		lda ($2a),y			lda 	(temp0),y
.11c7	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.11c9	a4 50		ldy $50				ldy 	esInt1
.11cb	e8		inx				inx 								; advance over the length pointer.
.11cc	d0 01		bne $11cf			bne 	_ESNoCarry
.11ce	c8		iny				iny
.11cf					_ESNoCarry:
.11cf	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af4					bufferCount:
>0af4							.fill 	0
.0af4					bufferStorage:
>0af4							.fill 	MaxLineInputSize
.11d0					IOInitialise:
.11d0	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.11d2	20 fb 11	jsr $11fb			jsr 	IOPrintChar
.11d5	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.11d7	20 27 12	jsr $1227			jsr 	IOInk
.11da	a9 00		lda #$00			lda 	#0
.11dc	20 3b 12	jsr $123b			jsr 	IOPaper
.11df	20 e3 11	jsr $11e3			jsr 	IOClearScreen
.11e2	60		rts				rts
.11e3					IOClearScreen:
.11e3	48		pha				pha
.11e4	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.11e6	20 fb 11	jsr $11fb			jsr 	IOPrintChar
.11e9	68		pla				pla
.11ea	60		rts				rts
.11eb					IONewLine:
.11eb	48		pha				pha
.11ec	a9 0d		lda #$0d			lda 	#13
.11ee	20 fb 11	jsr $11fb			jsr 	IOPrintChar
.11f1	68		pla				pla
.11f2	60		rts				rts
.11f3					IOTab:
.11f3	48		pha				pha
.11f4	a9 20		lda #$20			lda 	#32
.11f6	20 fb 11	jsr $11fb			jsr 	IOPrintChar
.11f9	68		pla				pla
.11fa	60		rts				rts
.11fb					IOPrintAscii:
.11fb					IOPrintChar:
.11fb	aa		tax				tax 								; save in X so we can save Y
.11fc	5a		phy				phy
.11fd	8a		txa				txa
.11fe	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1200	d0 02		bne $1204			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1202	a9 14		lda #$14			lda 	#$14
.1204					_IOPCNotBS:
.1204	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1207	7a		ply				ply
.1208	60		rts				rts
.1209					IOInkey:
.1209	98		tya				tya
.120a	48		pha				pha
.120b	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.120e	85 32		sta $32				sta 	tempShort
.1210	68		pla				pla
.1211	a8		tay				tay
.1212	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1214	f0 10		beq $1226			beq 	_IOIExit
.1216	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.1218	f0 0c		beq $1226			beq 	_IOIExit
.121a	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.121c	f0 06		beq $1224			beq 	_IOIBackspace
.121e	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1220	90 e7		bcc $1209			bcc 	IOInkey
.1222	b0 02		bcs $1226			bcs 	_IOIExit
.1224					_IOIBackspace:
.1224	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1226					_IOIExit:
.1226	60		rts				rts
.1227					IOInk:
.1227	48		pha				pha
.1228	29 07		and #$07			and 	#7 							; 8 primaries
.122a	aa		tax				tax
.122b	bd 33 12	lda $1233,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.122e	20 fb 11	jsr $11fb			jsr 	IOPrintChar
.1231	68		pla				pla
.1232	60		rts				rts
.1233					_IOColourTable:
>1233	90						.byte 	$90 					; 0 Black
>1234	96						.byte 	$96 					; 1 Red
>1235	1e						.byte 	$1E 					; 2 Green
>1236	9e						.byte 	$9E 					; 3 Yellow
>1237	9a						.byte 	$9A 					; 4 Blue
>1238	9c						.byte 	$9C 					; 5 Magenta
>1239	9f						.byte 	$9F 					; 6 Cyan
>123a	05						.byte 	$05 					; 7 White
.123b					IOPaper:
.123b	48		pha				pha
.123c	48		pha				pha
.123d	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.123f	20 fb 11	jsr $11fb			jsr 	IOPrintChar 			; and then swap them again.
.1242	68		pla				pla
.1243	20 27 12	jsr $1227			jsr 	IOInk
.1246	a9 01		lda #$01			lda 	#1
.1248	20 fb 11	jsr $11fb			jsr 	IOPrintChar
.124b	68		pla				pla
.124c	60		rts				rts
.124d					IOLocate:
.124d	48		pha				pha
.124e	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1250	20 fb 11	jsr $11fb			jsr 	IOPrintChar
.1253	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1255	20 5c 12	jsr $125c			jsr 	_IOLoc2
.1258	68		pla				pla
.1259	a8		tay				tay
.125a	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.125c					_IOLoc2:
.125c	c0 00		cpy #$00			cpy 	#0
.125e	f0 06		beq $1266			beq 	_IOLocExit
.1260	20 fb 11	jsr $11fb			jsr 	IOPrintChar
.1263	88		dey				dey
.1264	d0 f6		bne $125c			bne 	_IOLoc2
.1266					_IOLocExit:
.1266	60		rts				rts
.1267					IOInput:
.1267	a9 00		lda #$00			lda 	#0
.1269	8d f4 0a	sta $0af4			sta 	bufferCount
.126c					_IOILoop:
.126c	20 cf ff	jsr $ffcf			jsr 	$FFCF
.126f	c9 0d		cmp #$0d			cmp 	#13
.1271	f0 10		beq $1283			beq 	_IOIExit
.1273	ae f4 0a	ldx $0af4			ldx 	bufferCount
.1276	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.1278	f0 f2		beq $126c			beq 	_IOILoop
.127a	ee f4 0a	inc $0af4			inc 	bufferCount
.127d	9d f5 0a	sta $0af5,x			sta 	bufferStorage+1,x
.1280	4c 6c 12	jmp $126c			jmp 	_IOILoop
.1283					_IOIExit:
.1283	a9 f4		lda #$f4			lda 	#(bufferCount) & $FF
.1285	85 2a		sta $2a				sta 	temp0
.1287	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.1289	85 2b		sta $2b				sta 	1+(temp0)
.128b	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.128c					IOReadTimer:
.128c	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.128f	48		pha				pha
.1290	8a		txa				txa
.1291	a8		tay				tay
.1292	68		pla				pla
.1293	60		rts				rts

;******  Return to file: device/device.asm

.1294					deviceHandler:
.1294	7c 97 12	jmp ($1297,x)			jmp 	(deviceVectors,x)
.1297					deviceVectors:
>1297	60 11					.word X16Break             ; index 0
>1299	e3 11					.word IOClearScreen        ; index 2
>129b	eb 11					.word IONewLine            ; index 4
>129d	d0 11					.word IOInitialise         ; index 6
>129f	27 12					.word IOInk                ; index 8
>12a1	09 12					.word IOInkey              ; index 10
>12a3	67 12					.word IOInput              ; index 12
>12a5	97 11					.word ExternLoad           ; index 14
>12a7	4d 12					.word IOLocate             ; index 16
>12a9	3b 12					.word IOPaper              ; index 18
>12ab	fb 11					.word IOPrintChar          ; index 20
>12ad	fb 11					.word IOPrintAscii         ; index 22
>12af	6b 11					.word ExternSave           ; index 24
>12b1	f3 11					.word IOTab                ; index 26
>12b3	8c 12					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.12b5					section_end_device:
.12b5					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.12b5					ErrorHandler:
.12b5	8a		txa				txa
.12b6	48		pha				pha
.12b7	a9 01		lda #$01			lda 	#1 							; red
.12b9	a2 08		ldx #$08		ldx	#8
.12bb	20 94 12	jsr $1294		jsr	deviceHandler
.12be	68		pla				pla
.12bf	aa		tax				tax
.12c0	a9 2b		lda #$2b			lda 	#(ErrorTextList) & $FF
.12c2	85 2a		sta $2a				sta 	temp0
.12c4	a9 13		lda #$13			lda 	#(ErrorTextList) >> 8
.12c6	85 2b		sta $2b				sta 	1+(temp0)
.12c8	ca		dex		_EHFind:dex									; errors start at 1
.12c9	f0 10		beq $12db			beq 	_EHFound
.12cb	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.12cd	38		sec				sec
.12ce	a5 2a		lda $2a				lda 	temp0
.12d0	71 2a		adc ($2a),y			adc 	(temp0),y
.12d2	85 2a		sta $2a				sta 	temp0
.12d4	90 f2		bcc $12c8			bcc 	_EHFind
.12d6	e6 2b		inc $2b				inc 	temp0+1
.12d8	4c c8 12	jmp $12c8			jmp 	_EHFind
.12db					_EHFound:
.12db	20 7c 15	jsr $157c			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.12de	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.12e0	b1 28		lda ($28),y			lda 	(codePtr),y
.12e2	f0 39		beq $131d			beq 	_EHNoLine
.12e4	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.12e6	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.12e9	90 32		bcc $131d			bcc 	_EHNoLine
.12eb	a9 27		lda #$27			lda 	#(EHAtMsg) & $FF
.12ed	85 2a		sta $2a				sta 	temp0
.12ef	a9 13		lda #$13			lda 	#(EHAtMsg) >> 8
.12f1	85 2b		sta $2b				sta 	1+(temp0)
.12f3	20 7c 15	jsr $157c			jsr 	EHPrintAscii
.12f6	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.12f8	a2 00		ldx #$00			ldx 	#0
.12fa	b1 28		lda ($28),y			lda 	(codePtr),y
.12fc	95 48		sta $48,x			sta 	esInt0,x
.12fe	c8		iny				iny
.12ff	b1 28		lda ($28),y			lda 	(codePtr),y
.1301	95 50		sta $50,x			sta 	esInt1,x
.1303	a9 00		lda #$00			lda 	#0
.1305	95 58		sta $58,x			sta 	esInt2,x
.1307	95 60		sta $60,x			sta 	esInt3,x
.1309	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.130b	85 2a		sta $2a				sta 	temp0
.130d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.130f	85 2b		sta $2b				sta 	1+(temp0)
.1311	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1313	a9 00		lda #$00			lda 	#0							; stack position zero.
.1315	a2 0c		ldx #$0c		ldx	#12
.1317	20 0d 2f	jsr $2f0d		jsr	mainHandler
.131a	20 7c 15	jsr $157c			jsr 	EHPrintAscii
.131d					_EHNoLine:
.131d	a2 04		ldx #$04		ldx	#4
.131f	20 94 12	jsr $1294		jsr	deviceHandler
.1322	a2 02		ldx #$02		ldx	#2
.1324	20 82 18	jsr $1882		jsr	interactionHandler
.1327					EHAtMsg:
>1327	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.132b					ErrorTextList:
>132b	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1333	20 6e 6f 74 20 50 72 65 73 65 6e 74
>133f	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1347	45 72 72 6f 72
>134c	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>1354	64 69 73 61 62 6c 65 64
>135c	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>1364	6f 6e 20 66 61 69 6c 65 64
>136d	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>1375	42 79 20 5a 65 72 6f
>137c	04 53 74 6f 70				.text 4,"Stop"
>1381	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>1389	73 6d 61 74 63 68
>138f	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1397	20 56 61 6c 75 65
>139d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>13a5	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>13b3	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>13bb	20 63 6f 6d 6d 61
>13c1	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>13c9	20 72 65 66 65 72 65 6e 63 65
>13d3	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>13db	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>13e9	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>13f1	74 6f 6f 20 6c 6f 6e 67
>13f9	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1401	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>140e	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1416	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1423	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>142b	74 68 6f 75 74 20 46 4f 52
>1434	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>143c	74 68 6f 75 74 20 57 48 49 4c 45
>1447	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>144f	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>145c	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>1464	54 20 69 6e 64 65 78
>146b	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>1473	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>1483	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>148b	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>149a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>14a2	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>14b2	63 65
>14b4	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>14bc	20 50 72 6f 63 65 64 75 72 65
>14c6	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>14ce	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>14de	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>14e6	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>14f4	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>14fc	75 69 72 65 73 20 61 72 72 61 79
>1507	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>150f	61 79 20 69 6e 64 65 78
>1517	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>151f	64 61 74 61
>1523	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>152b	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1538	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1540	69 6c 65 64
>1544	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>154c	69 6c 65 64
>1550	05 42 72 65 61 6b			.text 5,"Break"
>1556	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>155e	6d 65 6d 6f 72 79
>1564	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>156c	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>157b	00					.byte 0

;******  Return to file: error/errorhandler.asm

.157c					EHPrintAscii:
.157c	a0 00		ldy #$00			ldy 	#0
.157e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1580	aa		tax				tax
.1581	f0 0f		beq $1592			beq 	_EHPExit
.1583					_EHPLoop:
.1583	c8		iny				iny
.1584	8a		txa				txa
.1585	48		pha				pha
.1586	b1 2a		lda ($2a),y			lda 	(temp0),y
.1588	a2 16		ldx #$16		ldx	#22
.158a	20 94 12	jsr $1294		jsr	deviceHandler
.158d	68		pla				pla
.158e	aa		tax				tax
.158f	ca		dex				dex
.1590	d0 f1		bne $1583			bne 	_EHPLoop
.1592					_EHPExit:
.1592	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1593					section_end_error:
.1593					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1593					ExtensionHandler:
.1593	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1595	d0 08		bne $159f			bne 	_ExtensionUnary 			; is passed in A.
.1597	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1599	c8		iny				iny
.159a	0a		asl a				asl 	a
.159b	aa		tax				tax
.159c	7c 9d 15	jmp ($159d,x)			jmp 	(Group2Vectors-12,x)
.159f					_ExtensionUnary:
.159f	48		pha				pha 								; save stack pos in A
.15a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.15a2	c8		iny				iny
.15a3	0a		asl a				asl 	a
.15a4	aa		tax				tax
.15a5	68		pla				pla 								; restore stack pos and call group3 command.
.15a6	7c a3 15	jmp ($15a3,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.15a9					Group2Vectors:
>15a9	de 15					.word	Command_VPoke            ; $86 vpoke
>15ab	e1 15					.word	Command_VDoke            ; $87 vdoke
>15ad	bb 15					.word	Command_VLoad            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.15af					Group3Vectors:
>15af	22 16					.word	Command_VPeek            ; $86 vpeek(
>15b1	25 16					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.15b3					XEvaluateInteger:
.15b3	8a		txa				txa
.15b4	a2 06		ldx #$06		ldx	#6
.15b6	20 0d 2f	jsr $2f0d		jsr	mainHandler
.15b9	aa		tax				tax
.15ba	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.15bb					Command_VLoad:
.15bb	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.15bd	20 07 28	jsr $2807			jsr 	EvaluateString
.15c0	e8		inx				inx
.15c1	20 a3 2d	jsr $2da3			jsr 	MInt32False
.15c4	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.15c6	95 48		sta $48,x			sta 	esInt0,x
.15c8	a5 36		lda $36				lda 	lowMemory+1
.15ca	95 50		sta $50,x			sta 	esInt1,x
.15cc	ca		dex				dex
.15cd	a2 0e		ldx #$0e		ldx	#14
.15cf	20 94 12	jsr $1294		jsr	deviceHandler
.15d2	a5 49		lda $49				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.15d4	85 2a		sta $2a				sta 	temp0
.15d6	a5 51		lda $51				lda 	esInt1+1
.15d8	85 2b		sta $2b				sta 	temp0+1
.15da	20 43 16	jsr $1643			jsr 	LoadVRAMFile 					; load the VRAM file in.
.15dd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.15de					Command_VPoke:
.15de	38		sec				sec 						; one byte , CS
.15df	b0 01		bcs $15e2			bcs 	CmdVideoWrite
.15e1					Command_VDoke:
.15e1	18		clc				clc 						; two bytes, CC
.15e2					CmdVideoWrite:
.15e2	08		php				php 						; save one or two btes
.15e3	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.15e5	20 b3 15	jsr $15b3			jsr 	XEvaluateInteger
.15e8	20 23 2e	jsr $2e23			jsr 	CheckComma
.15eb	e8		inx				inx
.15ec	20 b3 15	jsr $15b3			jsr 	XEvaluateInteger
.15ef	ca		dex				dex
.15f0	20 01 16	jsr $1601			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.15f3	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.15f5	8d 23 9f	sta $9f23			sta 	$9F23
.15f8	28		plp				plp 						; if it was Poke then exit
.15f9	b0 05		bcs $1600			bcs 	_CVWExit
.15fb	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.15fd	8d 23 9f	sta $9f23			sta 	$9F23
.1600					_CVWExit:
.1600	60		rts				rts
.1601					SetUpTOSVRamAddress:
.1601	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1603	29 01		and #$01			and 	#1
.1605	15 60		ora $60,x			ora 	esInt3,x
.1607	d0 14		bne $161d			bne 	CVWValue
.1609	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.160b	8d 20 9f	sta $9f20			sta 	$9F20
.160e	b5 50		lda $50,x			lda 	esInt1,x
.1610	8d 21 9f	sta $9f21			sta	 	$9F21
.1613	b5 58		lda $58,x			lda 	esInt2,x
.1615	29 01		and #$01			and 	#1
.1617	09 10		ora #$10			ora 	#$10 				; step 1.
.1619	8d 22 9f	sta $9f22			sta 	$9F22
.161c	60		rts				rts
.161d					CVWValue:
.161d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.161f	20 b5 12	jsr $12b5		jsr	errorHandler
.1622					Command_VPeek:
.1622	38		sec				sec 						; one byte , CS
.1623	b0 01		bcs $1626			bcs 	CmdVideoRead
.1625					Command_VDeek:
.1625	18		clc				clc 						; two bytes, CC
.1626					CmdVideoRead:
.1626	08		php				php 						; save action on stack.
.1627	aa		tax				tax 						; save stack position
.1628	20 b3 15	jsr $15b3			jsr 	XEvaluateInteger 	; address
.162b	20 16 2e	jsr $2e16			jsr 	CheckRightParen 	; closing right bracket.
.162e	20 01 16	jsr $1601			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1631	20 a3 2d	jsr $2da3			jsr 	MInt32False 		; zero return.
.1634	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1637	95 48		sta $48,x			sta 	esInt0,x
.1639	28		plp				plp 						; check if DOKE (carry was clear)
.163a	b0 05		bcs $1641			bcs 	_CVRExit
.163c	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.163f	95 50		sta $50,x			sta 	esInt1,x
.1641					_CVRExit:
.1641	8a		txa				txa 						; return X position.
.1642	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0be4					compressMode:
>0be4							.fill 	1
.1643					LoadVRAMFile:
.1643					_LVRLoop:
.1643	20 93 16	jsr $1693			jsr 	LVFGet 						; get the next (never access direct)
.1646	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1648	f0 3a		beq $1684			beq 	_LVRExit
.164a	b0 39		bcs $1685			bcs 	_LVRLoad 					; load data in ?
.164c	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.164e	90 09		bcc $1659			bcc 	_LVRSetAddress
.1650	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1652	90 29		bcc $167d			bcc 	_LVRSetCompress
.1654	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1656	20 b5 12	jsr $12b5		jsr	errorHandler
.1659					_LVRSetAddress:
.1659	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.165b	20 93 16	jsr $1693			jsr 	LVFGet
.165e	85 2c		sta $2c				sta 	temp1
.1660	a9 00		lda #$00			lda 	#0
.1662	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1664	66 2c		ror $2c				ror 	temp1
.1666	6a		ror a				ror		a
.1667	46 2d		lsr $2d				lsr 	temp1+1
.1669	66 2c		ror $2c				ror 	temp1
.166b	6a		ror a				ror		a
.166c	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.166f	a5 2c		lda $2c				lda 	temp1
.1671	8d 21 9f	sta $9f21			sta 	$9F21
.1674	a5 2d		lda $2d				lda 	temp1+1
.1676	09 10		ora #$10			ora 	#$10
.1678	8d 22 9f	sta $9f22			sta 	$9F22
.167b	d0 c6		bne $1643			bne 	_LVRLoop
.167d					_LVRSetCompress:
.167d	29 07		and #$07			and 	#7
.167f	8d e4 0b	sta $0be4			sta 	compressMode
.1682	10 bf		bpl $1643			bpl 	_LVRLoop
.1684					_LVRExit:
.1684	60		rts				rts
.1685					_LVRLoad:
.1685	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1687	aa		tax				tax
.1688					_LVRLCopy:
.1688	20 93 16	jsr $1693			jsr 	LVFGet 						; write to data.
.168b	8d 23 9f	sta $9f23			sta 	$9F23
.168e	ca		dex				dex
.168f	d0 f7		bne $1688			bne 	_LVRLCopy
.1691	f0 b0		beq $1643			beq 	_LVRLoop
.1693	84 32		sty $32		LVFGet:	sty 	tempShort
.1695	a0 00		ldy #$00			ldy 	#0
.1697	b1 2a		lda ($2a),y			lda 	(temp0),y
.1699	a4 32		ldy $32				ldy	 	tempShort
.169b	e6 2a		inc $2a				inc 	temp0
.169d	d0 02		bne $16a1			bne 	_LVFGExit
.169f	e6 2b		inc $2b				inc 	temp0+1
.16a1					_LVFGExit:
.16a1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.16a2					section_end_extension:
.16a2					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.16a2					floatingpointHandler:
.16a2	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.16a4	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: basic.asm

.16a7					section_end_floatingpoint:
.16a7					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.16a7					ColdStartEntry:
.16a7	a2 ff		ldx #$ff			ldx 	#$FF
.16a9	9a		txs				txs
.16aa	a2 02		ldx #$02		ldx	#2
.16ac	20 94 12	jsr $1294		jsr	deviceHandler
.16af	a0 ff		ldy #$ff			ldy 	#255
.16b1					_CSBanner:
.16b1	c8		iny				iny
.16b2	b9 d8 16	lda $16d8,y			lda 	Intro,y
.16b5	f0 14		beq $16cb			beq 	_CSStart
.16b7	c9 08		cmp #$08			cmp 	#8
.16b9	90 08		bcc $16c3			bcc 	_CSInk
.16bb	a2 16		ldx #$16		ldx	#22
.16bd	20 94 12	jsr $1294		jsr	deviceHandler
.16c0	4c b1 16	jmp $16b1			jmp 	_CSBanner
.16c3					_CSInk:
.16c3	a2 08		ldx #$08		ldx	#8
.16c5	20 94 12	jsr $1294		jsr	deviceHandler
.16c8	4c b1 16	jmp $16b1			jmp 	_CSBanner
.16cb					_CSStart:
.16cb	a2 10		ldx #$10		ldx	#16
.16cd	20 0d 2f	jsr $2f0d		jsr	mainHandler
.16d0	a2 02		ldx #$02		ldx	#2
.16d2	20 0d 2f	jsr $2f0d		jsr	mainHandler
.16d5	4c ec 17	jmp $17ec			jmp 	WarmStartEntry
>16d8	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>16e0	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>16f0	20 2a 2a 2a 0d 0d
>16f6	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>16fe	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>170e	32 30 32 31 0d 0d
>1714	02 42 61 73 69 63 20				.text 	2,"Basic "
>171b	30 2e 31 35					.text "0.15"
>171f	20 28						.text 	" ("
>1721	31 35 2d 4d 61 72 2d 32				.text "15-Mar-21"
>1729	31
>172a	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.172e					DeleteLine:
.172e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1731	85 2a		sta $2a				sta 	temp0
.1733	ad c9 0a	lda $0ac9			lda 	basePage+1
.1736	85 2b		sta $2b				sta 	temp0+1
.1738	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.173a	a5 48		lda $48				lda 	esInt0
.173c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.173e	d0 07		bne $1747			bne 	_DLNext
.1740	c8		iny				iny
.1741	a5 50		lda $50				lda 	esInt1
.1743	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1745	f0 0a		beq $1751			beq 	_DLFound
.1747	20 6f 17	jsr $176f	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.174a	d0 ec		bne $1738			bne 	_DLLoop
.174c	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.174e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1750	60		rts				rts
.1751					_DLFound:
.1751	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.1753	b1 2a		lda ($2a),y			lda 	(temp0),y
.1755	a8		tay				tay
.1756	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1758					_DLCopyDown:
.1758	b1 2a		lda ($2a),y			lda 	(temp0),y
.175a	81 2a		sta ($2a,x)			sta 	(temp0,x)
.175c	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.175e	d0 02		bne $1762			bne 	_DLNoCarry
.1760	e6 2b		inc $2b				inc 	temp0+1
.1762					_DLNoCarry:
.1762	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1764	c5 35		cmp $35				cmp 	lowMemory
.1766	d0 f0		bne $1758			bne 	_DLCopyDown
.1768	a5 2b		lda $2b				lda 	temp0+1
.176a	c5 36		cmp $36				cmp 	lowMemory+1
.176c	d0 ea		bne $1758			bne 	_DLCopyDown
.176e	60		rts				rts
.176f					IAdvanceTemp0:
.176f	84 32		sty $32				sty 	tempShort
.1771	18		clc				clc
.1772	a0 00		ldy #$00			ldy 	#0
.1774	b1 2a		lda ($2a),y			lda 	(temp0),y
.1776	65 2a		adc $2a				adc 	temp0
.1778	85 2a		sta $2a				sta 	temp0
.177a	90 02		bcc $177e			bcc 	_IATNoCarry
.177c	e6 2b		inc $2b				inc 	temp0+1
.177e					_IATNoCarry:
.177e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1780	a4 32		ldy $32				ldy 	tempShort
.1782	c9 00		cmp #$00			cmp		#0
.1784	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1785					InsertLine:
.1785	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1788	85 2a		sta $2a				sta 	temp0
.178a	ad c9 0a	lda $0ac9			lda 	basePage+1
.178d	85 2b		sta $2b				sta 	temp0+1
.178f					_ILLoop:
.178f	a0 01		ldy #$01			ldy 	#1
.1791	b1 2a		lda ($2a),y			lda 	(temp0),y
.1793	c5 48		cmp $48				cmp 	esInt0
.1795	c8		iny				iny
.1796	b1 2a		lda ($2a),y			lda 	(temp0),y
.1798	e5 50		sbc $50				sbc 	esInt1
.179a	b0 05		bcs $17a1			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.179c	20 6f 17	jsr $176f			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.179f	d0 ee		bne $178f			bne 	_ILLoop
.17a1					_ILFound:
.17a1	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.17a3	85 2c		sta $2c				sta 	temp1
.17a5	a5 36		lda $36				lda 	lowMemory+1
.17a7	85 2d		sta $2d				sta 	temp1+1
.17a9	ad 22 0d	lda $0d22			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.17ac	18		clc				clc
.17ad	69 03		adc #$03			adc 	#3
.17af	a8		tay				tay
.17b0	a2 00		ldx #$00			ldx 	#0
.17b2	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.17b4	91 2c		sta ($2c),y			sta 	(temp1),y
.17b6	a5 2c		lda $2c				lda 	temp1
.17b8	c5 2a		cmp $2a				cmp 	temp0
.17ba	d0 06		bne $17c2			bne 	_ILMNext
.17bc	a5 2d		lda $2d				lda 	temp1+1
.17be	c5 2b		cmp $2b				cmp 	temp0+1
.17c0	f0 0b		beq $17cd			beq 	_ILMCopy
.17c2					_ILMNext:
.17c2	a5 2c		lda $2c				lda 	temp1
.17c4	d0 02		bne $17c8			bne 	_ILNoBorrow
.17c6	c6 2d		dec $2d				dec 	temp1+1
.17c8					_ILNoBorrow:
.17c8	c6 2c		dec $2c				dec 	temp1
.17ca	4c b2 17	jmp $17b2			jmp 	_ILMove
.17cd					_ILMCopy:
.17cd	98		tya				tya 								; Y is the offset of the new line.
.17ce	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.17d0	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.17d2	a5 48		lda $48				lda 	esInt0
.17d4	91 2a		sta ($2a),y			sta 	(temp0),y
.17d6	c8		iny				iny
.17d7	a5 50		lda $50				lda 	esInt1
.17d9	91 2a		sta ($2a),y			sta 	(temp0),y
.17db	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.17dd					_ILMCopy2:
.17dd	b1 28		lda ($28),y			lda 	(codePtr),y
.17df	c8		iny				iny
.17e0	c8		iny				iny
.17e1	c8		iny				iny
.17e2	91 2a		sta ($2a),y			sta 	(temp0),y
.17e4	88		dey				dey
.17e5	88		dey				dey
.17e6	cc 22 0d	cpy $0d22			cpy 	tokenBufferIndex
.17e9	d0 f2		bne $17dd			bne 	_ILMCopy2
.17eb	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.17ec					WarmStartEntry:
.17ec	a2 ff		ldx #$ff			ldx 	#$FF
.17ee	9a		txs				txs
.17ef	a9 02		lda #$02			lda 	#2							; green text.
.17f1	a2 08		ldx #$08		ldx	#8
.17f3	20 94 12	jsr $1294		jsr	deviceHandler
.17f6	a2 0c		ldx #$0c		ldx	#12
.17f8	20 94 12	jsr $1294		jsr	deviceHandler
.17fb	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.17fd	85 28		sta $28				sta 	codePtr
.17ff	a5 2b		lda $2b				lda 	temp0+1
.1801	85 29		sta $29				sta 	codePtr+1
.1803	a2 04		ldx #$04		ldx	#4
.1805	20 94 12	jsr $1294		jsr	deviceHandler
.1808	a2 06		ldx #$06		ldx	#6
.180a	20 b8 39	jsr $39b8		jsr	tokeniserHandler
.180d	90 25		bcc $1834			bcc 	WSEError 					; failed.
.180f	a9 1f		lda #$1f			lda 	#(tokenHeader) & $FF
.1811	85 28		sta $28				sta 	codePtr
.1813	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1815	85 29		sta $29				sta 	1+(codePtr)
.1817	ad 22 0c	lda $0c22			lda 	tokenBuffer 				; is it a blank line, go get another line.
.181a	c9 80		cmp #$80			cmp 	#$80
.181c	f0 ce		beq $17ec			beq 	WarmStartEntry
.181e	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1820	c9 40		cmp #$40			cmp 	#$40
.1822	f0 15		beq $1839			beq 	HasLineNumber
.1824	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1826	8d 1f 0c	sta $0c1f			sta 	tokenHeader 				; fake program line.
.1829	8d 20 0c	sta $0c20			sta 	tokenHeader+1
.182c	8d 21 0c	sta $0c21			sta 	tokenHeader+2
.182f	a2 12		ldx #$12		ldx	#18
.1831	20 0d 2f	jsr $2f0d		jsr	mainHandler
.1834					WSEError:
.1834	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1836	20 b5 12	jsr $12b5		jsr	errorHandler
.1839					HasLineNumber:
.1839	a0 03		ldy #$03			ldy 	#3 							; get line number
.183b	a9 00		lda #$00			lda 	#0
.183d	a2 06		ldx #$06		ldx	#6
.183f	20 0d 2f	jsr $2f0d		jsr	mainHandler
.1842	a5 58		lda $58				lda 	esInt2		 				; check in range.
.1844	05 60		ora $60				ora 	esInt3
.1846	d0 ec		bne $1834			bne 	WSEError
.1848	98		tya				tya 								; make codePtr point to code after the line number.
.1849	18		clc				clc
.184a	65 28		adc $28				adc 	codePtr
.184c	85 28		sta $28				sta 	codePtr
.184e	90 02		bcc $1852			bcc		_HLNNoCarry
.1850	e6 29		inc $29				inc 	codePtr+1
.1852					_HLNNoCarry:
.1852	98		tya				tya 								; subtract that offset from the code buffer index
.1853	38		sec				sec
.1854	49 ff		eor #$ff			eor 	#$FF
.1856	6d 22 0d	adc $0d22			adc 	tokenBufferIndex
.1859	18		clc				clc 								; add space allowing for header & $80 trailer
.185a	69 04		adc #$04			adc 	#4
.185c	8d 22 0d	sta $0d22			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.185f	20 2e 17	jsr $172e			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1862					_HLNNoDelete:
.1862	ad 22 0d	lda $0d22			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1865	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1867	f0 0c		beq $1875			beq 	_HLMEditDone
.1869	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.186b	18		clc				clc 								; workspace (1k)
.186c	69 04		adc #$04			adc 	#4
.186e	c5 34		cmp $34				cmp 	highMemory+1
.1870	b0 0b		bcs $187d			bcs 	_HLMMemory
.1872	20 85 17	jsr $1785			jsr 	InsertLine 					; insert the line in
.1875					_HLMEditDone:
.1875	a2 02		ldx #$02		ldx	#2
.1877	20 0d 2f	jsr $2f0d		jsr	mainHandler
.187a	4c ec 17	jmp $17ec			jmp 	WarmStartEntry
.187d					_HLMMemory:
.187d	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.187f	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1882					interactionHandler:
.1882	7c 85 18	jmp ($1885,x)			jmp 	(interactionVectors,x)
.1885					interactionVectors:
>1885	a7 16					.word ColdStartEntry       ; index 0
>1887	ec 17					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1889					section_end_interaction:
.1889					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1889					Command_Assert:
.1889	20 10 28	jsr $2810			jsr 	EvaluateRootInteger 		; what is being asserted.
.188c	20 ca 2d	jsr $2dca			jsr 	MInt32Zero 					; is it true ?
.188f	f0 01		beq $1892			beq 	_CAError
.1891	60		rts				rts
.1892					_CAError:
.1892	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1894	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1897					CommandClear:
.1897					XCommandClear:
.1897	98		tya				tya
.1898	48		pha				pha
.1899	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.189c	85 33		sta $33				sta 	highMemory
.189e	ad cd 0a	lda $0acd			lda 	endMemory+1
.18a1	85 34		sta $34				sta 	highMemory+1
.18a3	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.18a6	85 2a		sta $2a				sta 	temp0
.18a8	ad c9 0a	lda $0ac9			lda 	basePage+1
.18ab	85 2b		sta $2b				sta 	temp0+1
.18ad					_CCFindEnd:
.18ad	a0 00		ldy #$00			ldy 	#0
.18af	b1 2a		lda ($2a),y			lda 	(temp0),y
.18b1	f0 0c		beq $18bf			beq 	_CCFoundEnd 				; offset zero is end.
.18b3	18		clc				clc
.18b4	65 2a		adc $2a				adc 	temp0 						; move to next line
.18b6	85 2a		sta $2a				sta 	temp0
.18b8	90 f3		bcc $18ad			bcc 	_CCFindEnd
.18ba	e6 2b		inc $2b				inc 	temp0+1
.18bc	4c ad 18	jmp $18ad			jmp 	_CCFindEnd
.18bf					_CCFoundEnd:
.18bf	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.18c1	85 35		sta $35				sta 	lowMemory
.18c3	a5 2b		lda $2b				lda 	temp0+1
.18c5	85 36		sta $36				sta 	lowMemory+1
.18c7	18		clc				clc 								; put temp0+1 in endProgram
.18c8	a5 2a		lda $2a				lda 	temp0
.18ca	69 01		adc #$01			adc 	#1
.18cc	8d ca 0a	sta $0aca			sta 	endProgram
.18cf	a5 2b		lda $2b				lda 	temp0+1
.18d1	69 00		adc #$00			adc 	#0
.18d3	8d cb 0a	sta $0acb			sta 	endProgram+1
.18d6	18		clc				clc 								; put a bit of space in.
.18d7	a5 35		lda $35				lda 	lowMemory
.18d9	69 04		adc #$04			adc 	#4
.18db	85 35		sta $35				sta 	lowMemory
.18dd	90 02		bcc $18e1			bcc 	_CCNoCarry
.18df	e6 36		inc $36				inc 	lowMemory+1
.18e1					_CCNoCarry:
.18e1	20 ac 2e	jsr $2eac			jsr 	RSReset 					; reset the return stack.
.18e4	a2 04		ldx #$04		ldx	#4
.18e6	20 c7 3c	jsr $3cc7		jsr	variableHandler
.18e9	20 bd 21	jsr $21bd			jsr 	ScanProc 					; scan for procedures
.18ec	20 57 1f	jsr $1f57			jsr 	CommandRestore 				; do a restore
.18ef	68		pla				pla
.18f0	a8		tay				tay
.18f1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.18f2					Command_Dim:
.18f2	a2 02		ldx #$02		ldx	#2
.18f4	20 c7 3c	jsr $3cc7		jsr	variableHandler
.18f7	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.18f9	c8		iny				iny
.18fa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.18fc	f0 f4		beq $18f2			beq 	Command_Dim
.18fe	88		dey				dey 								; unpick get
.18ff	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.1900					Command_FOR:
.1900	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1902	a2 0b		ldx #$0b			ldx 	#11
.1904	20 ba 2e	jsr $2eba			jsr 	RSClaim
.1907	20 01 1b	jsr $1b01			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.190a	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.190c	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.190e	d0 4c		bne $195c			bne 	_CFType
.1910	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1912	20 0b 2e	jsr $2e0b			jsr 	CheckToken
.1915	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1917	20 12 28	jsr $2812			jsr 	EvaluateInteger				; get terminal value in stack 1
.191a	98		tya				tya
.191b	48		pha				pha
.191c	a0 04		ldy #$04			ldy 	#4
.191e	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1920	91 37		sta ($37),y			sta 	(rsPointer),y
.1922	c8		iny				iny
.1923	a5 50		lda $50				lda		esInt1
.1925	91 37		sta ($37),y			sta 	(rsPointer),y
.1927	c8		iny				iny
.1928	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.192a	91 37		sta ($37),y			sta 	(rsPointer),y
.192c	c8		iny				iny
.192d	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.192f	91 37		sta ($37),y			sta 	(rsPointer),y
.1931	c8		iny				iny
.1932	a5 51		lda $51				lda		esInt1+1
.1934	91 37		sta ($37),y			sta 	(rsPointer),y
.1936	c8		iny				iny
.1937	a5 59		lda $59				lda		esInt2+1
.1939	91 37		sta ($37),y			sta 	(rsPointer),y
.193b	c8		iny				iny
.193c	a5 61		lda $61				lda		esInt3+1
.193e	91 37		sta ($37),y			sta 	(rsPointer),y
.1940	68		pla				pla
.1941	a8		tay				tay
.1942	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1944	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1946	d0 0e		bne $1956			bne 	_CFDone
.1948	c8		iny				iny									; skip over step.
.1949	20 12 28	jsr $2812			jsr 	EvaluateInteger 			; get step
.194c	98		tya				tya
.194d	48		pha				pha
.194e	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1950	a0 06		ldy #$06			ldy 	#6
.1952	91 37		sta ($37),y			sta 	(rsPointer),y
.1954	68		pla				pla
.1955	a8		tay				tay
.1956					_CFDone:
.1956	a9 01		lda #$01			lda 	#1
.1958	20 e6 2e	jsr $2ee6			jsr 	RSSavePosition 				; save position.
.195b	60		rts				rts
.195c					_CFType:
.195c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.195e	20 b5 12	jsr $12b5		jsr	errorHandler
.1961					Command_NEXT:
.1961	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1963	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1965	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1967	f0 05		beq $196e			beq 	_isok
.1969	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.196b	20 b5 12	jsr $12b5		jsr	errorHandler
.196e					_isok:
.196e	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1970	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1972	b0 18		bcs $198c			bcs 	_CNNoIndex
.1974	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1976	20 45 28	jsr $2845			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1979	98		tya				tya
.197a	48		pha				pha
.197b	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.197d	b1 37		lda ($37),y			lda 	(rsPointer),y
.197f	d5 48		cmp $48,x			cmp 	esInt0,x
.1981	d0 76		bne $19f9			bne 	_CNBadIndex
.1983	c8		iny				iny
.1984	b1 37		lda ($37),y			lda 	(rsPointer),y
.1986	d5 50		cmp $50,x			cmp 	esInt1,x
.1988	d0 6f		bne $19f9			bne 	_CNBadIndex
.198a	68		pla				pla
.198b	a8		tay				tay
.198c					_CNNoIndex:
.198c	98		tya				tya
.198d	48		pha				pha
.198e	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1990	b1 37		lda ($37),y			lda 	(rsPointer),y
.1992	85 2a		sta $2a				sta 	temp0
.1994	c8		iny				iny
.1995	b1 37		lda ($37),y			lda 	(rsPointer),y
.1997	85 2b		sta $2b				sta 	temp0+1
.1999	c8		iny				iny
.199a	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.199c	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.199e	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.19a0	10 01		bpl $19a3			bpl 	_CNSignX
.19a2	ca		dex				dex  								; X = $FF
.19a3					_CNSignX:
.19a3	18		clc				clc 								; add to the LSB
.19a4	a0 00		ldy #$00			ldy 	#0
.19a6	71 2a		adc ($2a),y			adc 	(temp0),y
.19a8	91 2a		sta ($2a),y			sta 	(temp0),y
.19aa					_CNPropogate:
.19aa	c8		iny				iny  								; add the sign extended in X to the rest.
.19ab	8a		txa				txa
.19ac	71 2a		adc ($2a),y			adc 	(temp0),y
.19ae	91 2a		sta ($2a),y			sta 	(temp0),y
.19b0	c8		iny				iny
.19b1	8a		txa				txa
.19b2	71 2a		adc ($2a),y			adc 	(temp0),y
.19b4	91 2a		sta ($2a),y			sta 	(temp0),y
.19b6	c8		iny				iny
.19b7	8a		txa				txa
.19b8	71 2a		adc ($2a),y			adc 	(temp0),y
.19ba	91 2a		sta ($2a),y			sta 	(temp0),y
.19bc	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.19bd	a5 37		lda $37				lda 	rsPointer
.19bf	69 07		adc #$07			adc 	#7
.19c1	85 2c		sta $2c				sta 	temp1
.19c3	a9 00		lda #$00			lda 	#0
.19c5	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.19c7	a8		tay				tay 								; and clear the Y register again.
.19c8	65 38		adc $38				adc 	rsPointer+1
.19ca	85 2d		sta $2d				sta 	temp1+1
.19cc	38		sec				sec 								; calculate current - limit oring interim values.
.19cd	20 05 1a	jsr $1a05			jsr 	_CNCompare 					; each of these does a byte.
.19d0	20 05 1a	jsr $1a05			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.19d3	20 05 1a	jsr $1a05			jsr 	_CNCompare 					; and the carry of the subtraction.
.19d6	20 05 1a	jsr $1a05			jsr 	_CNCompare
.19d9	50 02		bvc $19dd			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.19db	49 80		eor #$80			eor 	#$80
.19dd					_CNNoOverflow:
.19dd	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.19df	30 1d		bmi $19fe			bmi 	_CNCheckDownto
.19e1	c9 00		cmp #$00			cmp 	#0
.19e3	30 0c		bmi $19f1			bmi 	_CNLoopRound 				; loop round if < =
.19e5	a5 2e		lda $2e				lda 	temp2
.19e7	f0 08		beq $19f1			beq 	_CNLoopRound
.19e9					_CNLoopExit:
.19e9	68		pla				pla
.19ea	a8		tay				tay
.19eb	a9 0b		lda #$0b			lda 	#11
.19ed	20 dc 2e	jsr $2edc			jsr 	RSFree
.19f0	60		rts				rts
.19f1					_CNLoopRound:
.19f1	68		pla				pla
.19f2	a8		tay				tay
.19f3	a9 01		lda #$01			lda 	#1
.19f5	20 f9 2e	jsr $2ef9			jsr 	RSLoadPosition				; go back to the loop top
.19f8	60		rts				rts
.19f9					_CNBadIndex:
.19f9	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.19fb	20 b5 12	jsr $12b5		jsr	errorHandler
.19fe					_CNCheckDownto:
.19fe	c9 00		cmp #$00			cmp 	#0
.1a00	10 ef		bpl $19f1			bpl 	_CNLoopRound
.1a02	4c e9 19	jmp $19e9			jmp 	_CNLoopExit
.1a05					_CNCompare:
.1a05	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1a07	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1a09	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1a0b	85 2e		sta $2e				sta 	temp2
.1a0d	c8		iny				iny
.1a0e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1a0f					CommandIf:
.1a0f	20 10 28	jsr $2810			jsr 	EvaluateRootInteger 		; get what's being tested.
.1a12	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1a14	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.1a16	f0 04		beq $1a1c			beq 	_IfSimple
.1a18	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1a1a	d0 1b		bne $1a37			bne 	_IfComplex
.1a1c					_IfSimple:
.1a1c	20 ca 2d	jsr $2dca			jsr 	MInt32Zero					; check if TOS zero
.1a1f	f0 10		beq $1a31			beq 	_IfEOL 						; go to next line.
.1a21	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1a23	c8		iny				iny
.1a24	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1a26	f0 0c		beq $1a34			beq 	_IfGoto 					; do the Goto code
.1a28	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1a2a	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1a2c	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1a2e	f0 04		beq $1a34			beq 	_IfGoto
.1a30	60		rts				rts 								; else continue on this line.
.1a31					_IfEOL:
.1a31	4c 32 22	jmp $2232			jmp 	AdvanceNextLine 			; go to next line
.1a34					_IfGoto:
.1a34	4c a7 22	jmp $22a7			jmp 	CommandGoto
.1a37					_IfComplex:
.1a37	20 ca 2d	jsr $2dca			jsr 	MInt32Zero 					; is it true ?
.1a3a	f0 01		beq $1a3d			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1a3c	60		rts				rts 								; else continue.
.1a3d					_IFSkip:
.1a3d	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1a3f	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1a41	4c 30 2e	jmp $2e30			jmp		ScanForward
.1a44					Command_ELSE:
.1a44	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1a46	8a		txa				txa
.1a47	4c 30 2e	jmp $2e30			jmp		ScanForward
.1a4a					Command_ENDIF:
.1a4a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be5					InputBuffer:
>0be5							.fill 	MaxInputSize+1
.1a4b					Command_Input:
.1a4b	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1a4d	c8		iny				iny
.1a4e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1a50	f0 f9		beq $1a4b			beq 	Command_Input
.1a52	88		dey				dey 							; undo consume
.1a53	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1a55	f0 54		beq $1aab			beq 	_CIExit 				; : or EOL, exit
.1a57	c9 80		cmp #$80			cmp 	#TOK_EOL
.1a59	f0 50		beq $1aab			beq 	_CIExit
.1a5b	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1a5d	90 12		bcc $1a71			bcc 	_CIVariable
.1a5f	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1a61	d0 43		bne $1aa6			bne 	_CISyntax
.1a63	a2 00		ldx #$00			ldx 	#0
.1a65	20 07 28	jsr $2807			jsr 	EvaluateString 			; evaluate and print string
.1a68	20 76 1b	jsr $1b76			jsr 	TOSToTemp0
.1a6b	20 79 1e	jsr $1e79			jsr 	PrintString
.1a6e	4c 4b 1a	jmp $1a4b			jmp 	Command_Input
.1a71					_CIVariable:
.1a71	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1a73	20 45 28	jsr $2845			jsr 	EvaluateReference  		; this is where its going
.1a76					_CIRetry:
.1a76	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1a78	a2 14		ldx #$14		ldx	#20
.1a7a	20 94 12	jsr $1294		jsr	deviceHandler
.1a7d	98		tya				tya
.1a7e	48		pha				pha
.1a7f	20 bf 1a	jsr $1abf			jsr 	InputString 			; input a string (manually)
.1a82	a2 01		ldx #$01			ldx 	#1
.1a84	20 ac 1a	jsr $1aac			jsr 	BufferToStackX 			; make stack,x ref input string.
.1a87	a5 40		lda $40				lda 	esType 					; if target type numeric
.1a89	29 40		and #$40			and 	#$40 					; then convert to number
.1a8b	d0 11		bne $1a9e			bne 	_CIWrite
.1a8d	a2 01		ldx #$01			ldx 	#1
.1a8f	20 76 1b	jsr $1b76			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1a92	a9 0a		lda #$0a			lda 	#10
.1a94	20 11 2c	jsr $2c11			jsr 	MInt32FromString 		; convert it back from a string.
.1a97	68		pla				pla
.1a98	a8		tay				tay
.1a99	b0 03		bcs $1a9e			bcs 	_CIWrite 				; successfully converted.
.1a9b	18		clc				clc 							; default fail FP conversion
.1a9c	90 d8		bcc $1a76			bcc		_CIRetry				; failed, try again.
.1a9e					_CIWrite:
.1a9e	a2 00		ldx #$00			ldx 	#0
.1aa0	20 14 1b	jsr $1b14			jsr 	WriteValue
.1aa3	4c 4b 1a	jmp $1a4b			jmp 	Command_Input
.1aa6					_CISyntax:
.1aa6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1aa8	20 b5 12	jsr $12b5		jsr	errorHandler
.1aab					_CIExit:
.1aab	60		rts				rts
.1aac					BufferToStackX:
.1aac	a9 e5		lda #$e5			lda 	#InputBuffer & $FF
.1aae	95 48		sta $48,x			sta 	esInt0,x
.1ab0	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1ab2	95 50		sta $50,x			sta 	esInt1,x
.1ab4	a9 00		lda #$00			lda 	#0
.1ab6	95 58		sta $58,x			sta 	esInt2,x
.1ab8	95 60		sta $60,x			sta 	esInt3,x
.1aba	a9 40		lda #$40			lda 	#$40
.1abc	95 40		sta $40,x			sta 	esType,x
.1abe	60		rts				rts
.1abf					InputString:
.1abf	a9 00		lda #$00			lda 	#0
.1ac1	8d e5 0b	sta $0be5			sta 	InputBuffer
.1ac4					_InputLoop:
.1ac4	a2 00		ldx #$00		ldx	#0
.1ac6	20 94 12	jsr $1294		jsr	deviceHandler
.1ac9	a2 0a		ldx #$0a		ldx	#10
.1acb	20 94 12	jsr $1294		jsr	deviceHandler
.1ace	c9 00		cmp #$00			cmp 	#0
.1ad0	f0 f2		beq $1ac4			beq 	_InputLoop
.1ad2	c9 08		cmp #$08			cmp 	#8
.1ad4	f0 19		beq $1aef			beq 	_InputBackspace
.1ad6	c9 0d		cmp #$0d			cmp 	#13
.1ad8	f0 21		beq $1afb			beq 	_InputExit
.1ada	ae e5 0b	ldx $0be5			ldx 	InputBuffer
.1add	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1adf	f0 e3		beq $1ac4			beq 	_InputLoop
.1ae1	9d e6 0b	sta $0be6,x			sta 	InputBuffer+1,x 		; write char
.1ae4	ee e5 0b	inc $0be5			inc 	InputBuffer 			; advance count.
.1ae7					_InputPrintLoop:
.1ae7	a2 14		ldx #$14		ldx	#20
.1ae9	20 94 12	jsr $1294		jsr	deviceHandler
.1aec	4c c4 1a	jmp $1ac4			jmp	 	_InputLoop
.1aef					_InputBackspace:
.1aef	ad e5 0b	lda $0be5			lda 	InputBuffer 			; at start
.1af2	f0 d0		beq $1ac4			beq 	_InputLoop
.1af4	ce e5 0b	dec $0be5			dec 	InputBuffer
.1af7	a9 08		lda #$08			lda 	#8
.1af9	d0 ec		bne $1ae7			bne 	_InputPrintLoop
.1afb					_InputExit:
.1afb	a2 04		ldx #$04		ldx	#4
.1afd	20 94 12	jsr $1294		jsr	deviceHandler
.1b00	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1b01					CommandLet:
.1b01	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1b03	20 45 28	jsr $2845			jsr 	EvaluateReference
.1b06	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1b08	20 0b 2e	jsr $2e0b			jsr 	CheckToken
.1b0b	e8		inx				inx 								; do RHS
.1b0c	20 f3 27	jsr $27f3			jsr 	Evaluate 					; evaluate and dereference
.1b0f	ca		dex				dex
.1b10	20 14 1b	jsr $1b14			jsr 	WriteValue 					; write it out
.1b13	60		rts				rts
.1b14					WriteValue:
.1b14	98		tya				tya
.1b15	48		pha				pha
.1b16	20 76 1b	jsr $1b76			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1b19	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1b1b	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1b1d	29 40		and #$40			and 	#$40
.1b1f	d0 50		bne $1b71			bne		_WVType
.1b21	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1b23	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1b25	29 40		and #$40			and 	#$40
.1b27	d0 1f		bne $1b48			bne 	_WVCopyString
.1b29	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1b2b	15 41		ora $41,x			ora 	esType+1,x
.1b2d	4a		lsr a				lsr 	a
.1b2e	90 22		bcc $1b52			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1b30	b5 40		lda $40,x			lda 	esType,x
.1b32	4a		lsr a				lsr 	a
.1b33	90 3c		bcc $1b71			bcc 	_WVType
.1b35	e8		inx				inx 								; force the value being written to be a float.
.1b36	20 54 23	jsr $2354			jsr 	BPMakeFloat
.1b39	ca		dex				dex
.1b3a	20 76 1b	jsr $1b76			jsr 	TOSToTemp0 					; set Temp0 to write address
.1b3d	e8		inx				inx
.1b3e	8a		txa				txa
.1b3f	a2 20		ldx #$20		ldx	#32
.1b41	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.1b44	aa		tax				tax
.1b45	4c 6e 1b	jmp $1b6e			jmp 	_WVCopyExit
.1b48					_WVCopyString:
.1b48	8a		txa				txa
.1b49	a2 0e		ldx #$0e		ldx	#14
.1b4b	20 c3 31	jsr $31c3		jsr	stringHandler
.1b4e	aa		tax				tax
.1b4f	4c 6e 1b	jmp $1b6e			jmp 	_WVCopyExit
.1b52					_WVCopyData4:
.1b52	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1b54	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1b56	d0 10		bne $1b68			bne 	_WVCopyData1
.1b58	a0 03		ldy #$03			ldy 	#3
.1b5a	b5 61		lda $61,x			lda 	esInt3+1,x
.1b5c	91 2a		sta ($2a),y			sta 	(temp0),y
.1b5e	88		dey				dey
.1b5f	b5 59		lda $59,x			lda 	esInt2+1,x
.1b61	91 2a		sta ($2a),y			sta 	(temp0),y
.1b63	88		dey				dey
.1b64	b5 51		lda $51,x			lda 	esInt1+1,x
.1b66	91 2a		sta ($2a),y			sta 	(temp0),y
.1b68					_WVCopyData1:
.1b68	a0 00		ldy #$00			ldy 	#0
.1b6a	b5 49		lda $49,x			lda 	esInt0+1,x
.1b6c	91 2a		sta ($2a),y			sta 	(temp0),y
.1b6e					_WVCopyExit:
.1b6e	68		pla				pla
.1b6f	a8		tay				tay
.1b70	60		rts				rts
.1b71					_WVType:
.1b71	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b73	20 b5 12	jsr $12b5		jsr	errorHandler
.1b76					TOSToTemp0:
.1b76	b5 48		lda $48,x			lda 	esInt0,x
.1b78	85 2a		sta $2a				sta 	temp0
.1b7a	b5 50		lda $50,x			lda 	esInt1,x
.1b7c	85 2b		sta $2b				sta 	temp0+1
.1b7e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.0c06					structIndent:
>0c06							.fill 	1
.1b7f					CommandList:
.1b7f	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.1b81	8e 06 0c	stx $0c06			stx 	structIndent
.1b84	20 a3 2d	jsr $2da3			jsr 	MInt32False
.1b87	e8		inx				inx
.1b88	20 9f 2d	jsr $2d9f			jsr 	MInt32True
.1b8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.1b8d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.1b8f	f0 15		beq $1ba6			beq 	_CLEndLine
.1b91	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.1b93	30 1b		bmi $1bb0			bmi 	_CLDoListing 				; do the whole lot.
.1b95	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.1b97	20 12 28	jsr $2812			jsr 	EvaluateInteger
.1b9a	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.1b9c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1b9e	f0 06		beq $1ba6			beq 	_CLEndLine
.1ba0	20 e1 2c	jsr $2ce1			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.1ba3	4c b0 1b	jmp $1bb0			jmp 	_CLDoListing 				; own e.g. list 1100
.1ba6					_CLEndLine:
.1ba6	c8		iny				iny 								; skip comma
.1ba7	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.1ba9	30 05		bmi $1bb0			bmi 	_CLDoListing
.1bab	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.1bad	20 12 28	jsr $2812			jsr 	EvaluateInteger				; get end
.1bb0					_CLDoListing:
.1bb0	20 54 20	jsr $2054			jsr 	ResetCodeAddress 			; back to the start.
.1bb3					_CLCheckLoop:
.1bb3	a2 00		ldx #$00		ldx	#0
.1bb5	20 94 12	jsr $1294		jsr	deviceHandler
.1bb8	a0 00		ldy #$00			ldy 	#0							; check end.
.1bba	b1 28		lda ($28),y			lda 	(codePtr),y
.1bbc	f0 41		beq $1bff			beq 	_CLEnd
.1bbe	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.1bc0	20 02 1c	jsr $1c02			jsr 	CLCompareLineTOS
.1bc3	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.1bc5	f0 28		beq $1bef			beq 	_CLNext
.1bc7	e8		inx				inx
.1bc8	20 02 1c	jsr $1c02			jsr 	CLCompareLineTOS 			; compare vs higher
.1bcb	c9 01		cmp #$01			cmp 	#1
.1bcd	f0 20		beq $1bef			beq 	_CLNext
.1bcf	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.1bd1	20 24 1c	jsr $1c24			jsr 	CLStructureCheck
.1bd4	ad 06 0c	lda $0c06			lda 	structIndent 				; indent level.
.1bd7	10 02		bpl $1bdb			bpl 	_CLPositive
.1bd9	a9 00		lda #$00			lda 	#0
.1bdb					_CLPositive:
.1bdb	a2 02		ldx #$02		ldx	#2
.1bdd	20 b8 39	jsr $39b8		jsr	tokeniserHandler
.1be0	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.1be2	20 24 1c	jsr $1c24			jsr 	CLStructureCheck
.1be5	ad 06 0c	lda $0c06			lda 	structIndent
.1be8	10 05		bpl $1bef			bpl 	_CLNext
.1bea	a9 00		lda #$00			lda 	#0
.1bec	8d 06 0c	sta $0c06			sta 	structIndent
.1bef					_CLNext:
.1bef	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.1bf1	b1 28		lda ($28),y			lda 	(codePtr),y
.1bf3	18		clc				clc
.1bf4	65 28		adc $28				adc 	codePtr
.1bf6	85 28		sta $28				sta 	codePtr
.1bf8	90 b9		bcc $1bb3			bcc 	_CLCheckLoop
.1bfa	e6 29		inc $29				inc 	codePtr+1
.1bfc	4c b3 1b	jmp $1bb3			jmp 	_CLCheckLoop
.1bff					_CLEnd:
.1bff	4c 08 2f	jmp $2f08			jmp 	WarmStart 					; warm start after list.
.1c02					CLCompareLineTOS:
.1c02	a0 01		ldy #$01			ldy 	#1
.1c04	b1 28		lda ($28),y			lda 	(codePtr),y
.1c06	55 48		eor $48,x			eor 	esInt0,x
.1c08	85 2a		sta $2a				sta 	temp0
.1c0a	c8		iny				iny
.1c0b	b1 28		lda ($28),y			lda 	(codePtr),y
.1c0d	55 50		eor $50,x			eor 	esInt1,x
.1c0f	05 2a		ora $2a				ora 	temp0
.1c11	f0 10		beq $1c23			beq 	_CLCLTExit
.1c13	88		dey				dey
.1c14	b1 28		lda ($28),y			lda 	(codePtr),y
.1c16	d5 48		cmp $48,x			cmp 	esInt0,x
.1c18	c8		iny				iny
.1c19	b1 28		lda ($28),y			lda 	(codePtr),y
.1c1b	f5 50		sbc $50,x			sbc 	esInt1,x
.1c1d	a9 ff		lda #$ff			lda 	#255
.1c1f	90 02		bcc $1c23			bcc 	_CLCLTExit
.1c21	a9 01		lda #$01			lda 	#1
.1c23					_CLCLTExit:
.1c23	60		rts				rts
.1c24					CLStructureCheck:
.1c24	85 2a		sta $2a				sta 	temp0
.1c26	a0 03		ldy #$03			ldy 	#3
.1c28					_CLSCLoop:
.1c28	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.1c2a	c8		iny				iny
.1c2b	c9 80		cmp #$80			cmp 	#$80
.1c2d	90 f9		bcc $1c28			bcc 	_CLSCLoop 					; $00-$7F just step over.
.1c2f	f0 28		beq $1c59			beq		_CLSCExit					; EOL return
.1c31	c9 86		cmp #$86			cmp 	#$86 						; special handler
.1c33	90 1e		bcc $1c53			bcc 	_CLSCSpecial
.1c35	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.1c37	90 ef		bcc $1c28			bcc 	_CLSCLoop
.1c39	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.1c3b	b0 eb		bcs $1c28			bcs 	_CLSCLoop
.1c3d	aa		tax				tax 								; get adjustment
.1c3e	bd ab 26	lda $26ab,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.1c41	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.1c43	d0 e3		bne $1c28			bne 	_CLSCLoop
.1c45	38		sec				sec
.1c46	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.1c48	0a		asl a				asl 	a 							; double indent step
.1c49	18		clc				clc
.1c4a	6d 06 0c	adc $0c06			adc 	structIndent 				; add to structure indent
.1c4d	8d 06 0c	sta $0c06			sta 	structIndent
.1c50	4c 28 1c	jmp $1c28			jmp 	_CLSCLoop
.1c53					_CLSCSpecial:
.1c53	20 73 2e	jsr $2e73			jsr 	ScannerSkipSpecial
.1c56	4c 28 1c	jmp $1c28			jmp 	_CLSCLoop
.1c59					_CLSCExit:
.1c59	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1c5a					CommandLoad:
.1c5a	20 82 1c	jsr $1c82			jsr 	CLSParameters 					; get parameters for load.
.1c5d	08		php				php
.1c5e	a2 0e		ldx #$0e		ldx	#14
.1c60	20 94 12	jsr $1294		jsr	deviceHandler
.1c63	28		plp				plp
.1c64	b0 08		bcs $1c6e			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1c66	20 97 18	jsr $1897			jsr 	CommandClear
.1c69	a2 02		ldx #$02		ldx	#2
.1c6b	20 82 18	jsr $1882		jsr	interactionHandler
.1c6e					_CLExit
.1c6e	60		rts				rts
.1c6f					CommandSave:
.1c6f	20 82 1c	jsr $1c82			jsr 	CLSParameters					; get parameters for save
.1c72	90 08		bcc $1c7c			bcc 	_CSNoOverrideAddress
.1c74	20 23 2e	jsr $2e23			jsr 	CheckComma 						; should be a comma.
.1c77	a2 02		ldx #$02			ldx 	#2
.1c79	20 12 28	jsr $2812			jsr 	EvaluateInteger 				; get save end address.
.1c7c					_CSNoOverrideAddress:
.1c7c	a2 18		ldx #$18		ldx	#24
.1c7e	20 94 12	jsr $1294		jsr	deviceHandler
.1c81	60		rts				rts
.1c82					CLSParameters:
.1c82	a2 00		ldx #$00			ldx 	#0 								; string
.1c84	20 07 28	jsr $2807			jsr 	EvaluateString
.1c87	e8		inx				inx 									; erase out +1 +2
.1c88	20 a3 2d	jsr $2da3			jsr 	MInt32False
.1c8b	e8		inx				inx
.1c8c	20 a3 2d	jsr $2da3			jsr 	MInt32False
.1c8f	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1c92	85 49		sta $49				sta 	esInt0+1
.1c94	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c97	85 51		sta $51				sta 	esInt1+1
.1c99	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1c9c	85 4a		sta $4a				sta 	esInt0+2
.1c9e	ad cb 0a	lda $0acb			lda 	endProgram+1
.1ca1	85 52		sta $52				sta 	esInt1+2
.1ca3	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1ca5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1ca7	d0 08		bne $1cb1			bne 	_CLSDefault
.1ca9	c8		iny				iny 									; skip comma
.1caa	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1cac	20 12 28	jsr $2812			jsr 	EvaluateInteger
.1caf	38		sec				sec
.1cb0	60		rts				rts
.1cb1					_CLSDefault:
.1cb1	18		clc				clc
.1cb2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c07					storeSize:
>0c07							.fill 	1
.1cb3					CommandLocal:
.1cb3	a2 00		ldx #$00			ldx 	#0
.1cb5	20 d1 1c	jsr $1cd1			jsr 	LocaliseVariable 			; localise one.
.1cb8					_CLCheckNext:
.1cb8	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1cba	c8		iny				iny
.1cbb	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1cbd	f0 06		beq $1cc5			beq 	_CLAssignment
.1cbf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1cc1	f0 f0		beq $1cb3			beq 	CommandLocal
.1cc3	88		dey				dey
.1cc4	60		rts				rts
.1cc5					_CLAssignment:
.1cc5	a2 01		ldx #$01			ldx 	#1
.1cc7	20 f3 27	jsr $27f3			jsr 	Evaluate 					; evaluate RHS
.1cca	ca		dex				dex
.1ccb	20 14 1b	jsr $1b14			jsr 	WriteValue
.1cce	4c b8 1c	jmp $1cb8			jmp 	_CLCheckNext
.1cd1					LocaliseVariable:
.1cd1	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1cd3	c9 40		cmp #$40			cmp 	#$40
.1cd5	b0 67		bcs $1d3e			bcs 	_LVSyntax
.1cd7	8a		txa				txa 								; get the address of that variable.
.1cd8	a2 00		ldx #$00		ldx	#0
.1cda	20 c7 3c	jsr $3cc7		jsr	variableHandler
.1cdd	aa		tax				tax
.1cde	8a		txa				txa
.1cdf	48		pha				pha
.1ce0	98		tya				tya
.1ce1	48		pha				pha
.1ce2	20 76 1b	jsr $1b76			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1ce5	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1ce7	0a		asl a				asl 	a
.1ce8	10 16		bpl $1d00			bpl 	_LVPushNumber
.1cea	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1cec	b1 2a		lda ($2a),y			lda 	(temp0),y
.1cee	c8		iny				iny
.1cef	85 2c		sta $2c				sta 	temp1
.1cf1	b1 2a		lda ($2a),y			lda 	(temp0),y
.1cf3	85 2d		sta $2d				sta 	temp1+1
.1cf5	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1cf7	b1 2c		lda ($2c),y			lda 	(temp1),y
.1cf9	aa		tax				tax 								; into X
.1cfa	e8		inx				inx 								; +1 for length.
.1cfb	a9 24		lda #$24			lda 	#markerString
.1cfd	4c 15 1d	jmp $1d15			jmp 	_LVWriteFrame
.1d00					_LVPushNumber:
.1d00	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1d02	85 2c		sta $2c				sta 	temp1
.1d04	a5 2b		lda $2b				lda 	temp0+1
.1d06	85 2d		sta $2d				sta 	temp1+1
.1d08	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1d0a	4a		lsr a				lsr 	a
.1d0b	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1d0d	a2 04		ldx #$04			ldx 	#VarISize
.1d0f	90 04		bcc $1d15			bcc 	_LVIsInteger
.1d11	a9 23		lda #$23			lda 	#markerFloat
.1d13	a2 06		ldx #$06			ldx 	#VarFSize
.1d15					_LVIsInteger:
.1d15					_LVWriteFrame:
.1d15	8e 07 0c	stx $0c07			stx 	storeSize 					; number of bytes to copy from (temp0)
.1d18	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1d19	e8		inx				inx
.1d1a	e8		inx				inx
.1d1b	20 ba 2e	jsr $2eba			jsr 	RSClaim 					; create the stack frame.
.1d1e	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1d20	a0 01		ldy #$01			ldy 	#1
.1d22	91 37		sta ($37),y			sta 	(rsPointer),y
.1d24	c8		iny				iny
.1d25	a5 2b		lda $2b				lda 	temp0+1
.1d27	91 37		sta ($37),y			sta 	(rsPointer),y
.1d29	a0 00		ldy #$00			ldy 	#0
.1d2b					_LVCopyData:
.1d2b	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1d2d	c8		iny				iny 								; write allowing for the header bit.
.1d2e	c8		iny				iny
.1d2f	c8		iny				iny
.1d30	91 37		sta ($37),y			sta 	(rsPointer),y
.1d32	88		dey				dey
.1d33	88		dey				dey
.1d34	ce 07 0c	dec $0c07			dec 	storeSize 					; do it storesize times
.1d37	d0 f2		bne $1d2b			bne 	_LVCopyData
.1d39	68		pla				pla
.1d3a	a8		tay				tay
.1d3b	68		pla				pla
.1d3c	aa		tax				tax
.1d3d	60		rts				rts
.1d3e					_LVSyntax:
.1d3e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d40	20 b5 12	jsr $12b5		jsr	errorHandler
.1d43					RestoreLocals:
.1d43	a2 00		ldx #$00			ldx 	#0
.1d45	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1d47	c9 40		cmp #$40			cmp	 	#64
.1d49	90 01		bcc $1d4c			bcc 	_RLocal
.1d4b	60		rts				rts
.1d4c					_RLocal:
.1d4c	8a		txa				txa
.1d4d	48		pha				pha
.1d4e	98		tya				tya
.1d4f	48		pha				pha
.1d50	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1d52	b1 37		lda ($37),y			lda 	(rsPointer),y
.1d54	85 2a		sta $2a				sta 	temp0
.1d56	c8		iny				iny
.1d57	b1 37		lda ($37),y			lda 	(rsPointer),y
.1d59	85 2b		sta $2b				sta 	temp0+1
.1d5b	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1d5d	b1 37		lda ($37),y			lda 	(rsPointer),y
.1d5f	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1d61	f0 28		beq $1d8b			beq 	_RString
.1d63	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1d65	c9 25		cmp #$25			cmp 	#markerInt
.1d67	f0 02		beq $1d6b			beq 	_RIsInteger
.1d69	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1d6b					_RIsInteger:
.1d6b	8a		txa				txa
.1d6c	48		pha				pha
.1d6d	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1d6f					_RCopyBack:
.1d6f	b1 37		lda ($37),y			lda 	(rsPointer),y
.1d71	88		dey				dey
.1d72	88		dey				dey
.1d73	88		dey				dey
.1d74	91 2a		sta ($2a),y			sta 	(temp0),y
.1d76	c8		iny				iny
.1d77	c8		iny				iny
.1d78	c8		iny				iny
.1d79	c8		iny				iny
.1d7a	ca		dex				dex
.1d7b	d0 f2		bne $1d6f			bne 	_RCopyBack
.1d7d	68		pla				pla 								; get size add 3
.1d7e	18		clc				clc
.1d7f	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1d81					_RRestoreAAndLoop:
.1d81	20 dc 2e	jsr $2edc			jsr 	RSFree
.1d84	68		pla				pla
.1d85	a8		tay				tay
.1d86	68		pla				pla
.1d87	aa		tax				tax
.1d88	4c 43 1d	jmp $1d43			jmp 	RestoreLocals 				; go see if there are any more locals.
.1d8b					_RString:
.1d8b	a2 00		ldx #$00			ldx 	#0
.1d8d	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1d8f	b1 37		lda ($37),y			lda 	(rsPointer),y
.1d91	95 48		sta $48,x			sta 	esInt0,x
.1d93	c8		iny				iny
.1d94	b1 37		lda ($37),y			lda 	(rsPointer),y
.1d96	95 50		sta $50,x			sta 	esInt1,x
.1d98	18		clc				clc
.1d99	a5 37		lda $37				lda 	rsPointer
.1d9b	69 03		adc #$03			adc 	#3
.1d9d	95 49		sta $49,x			sta 	esInt0+1,x
.1d9f	a5 38		lda $38				lda 	rsPointer+1
.1da1	69 00		adc #$00			adc 	#0
.1da3	95 51		sta $51,x			sta 	esInt1+1,x
.1da5	8a		txa				txa
.1da6	a2 0e		ldx #$0e		ldx	#14
.1da8	20 c3 31	jsr $31c3		jsr	stringHandler
.1dab	a0 03		ldy #$03			ldy 	#3 							; get string length
.1dad	b1 37		lda ($37),y			lda 	(rsPointer),y
.1daf	18		clc				clc
.1db0	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1db2	4c 81 1d	jmp $1d81			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1db5					Command_New:
.1db5					Command_XNew:
.1db5	20 54 20	jsr $2054			jsr 	ResetCodeAddress 			; point to first line
.1db8	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1dba	98		tya				tya
.1dbb	91 28		sta ($28),y			sta 	(codePtr),y
.1dbd	20 97 18	jsr $1897			jsr 	CommandClear 				; clear everything down.
.1dc0	4c 2c 22	jmp $222c			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1dc3					Command_Poke:
.1dc3	a9 01		lda #$01			lda 	#1
.1dc5	d0 06		bne $1dcd			bne 	PokeGeneral
.1dc7					Command_Doke:
.1dc7	a9 02		lda #$02			lda 	#2
.1dc9	d0 02		bne $1dcd			bne 	PokeGeneral
.1dcb					Command_Loke:
.1dcb	a9 03		lda #$03			lda 	#3
.1dcd					PokeGeneral:
.1dcd	48		pha				pha 								; save id (PDL = 123)
.1dce	20 10 28	jsr $2810			jsr 	EvaluateRootInteger 		; target address
.1dd1	20 23 2e	jsr $2e23			jsr	 	CheckComma
.1dd4	e8		inx				inx
.1dd5	20 12 28	jsr $2812			jsr 	EvaluateInteger 			; what value to POKE ?
.1dd8	ca		dex				dex
.1dd9	20 76 1b	jsr $1b76			jsr 	TOSToTemp0 					; temp0 points to the target address
.1ddc	84 32		sty $32				sty 	tempShort 					; save Y
.1dde	68		pla				pla 								; get copy type (1-3) and dispatch
.1ddf	aa		tax				tax
.1de0	ca		dex				dex
.1de1	f0 14		beq $1df7			beq 	_Poke1
.1de3	ca		dex				dex
.1de4	f0 0b		beq $1df1			beq 	_Poke2
.1de6	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1de8	a5 61		lda $61				lda 	esInt3+1
.1dea	91 2a		sta ($2a),y			sta 	(temp0),y
.1dec	88		dey				dey
.1ded	a5 59		lda $59				lda 	esInt2+1
.1def	91 2a		sta ($2a),y			sta 	(temp0),y
.1df1					_Poke2:
.1df1	a0 01		ldy #$01			ldy 	#1
.1df3	a5 51		lda $51				lda 	esInt1+1
.1df5	91 2a		sta ($2a),y			sta 	(temp0),y
.1df7					_Poke1:
.1df7	a0 00		ldy #$00			ldy 	#0
.1df9	a5 49		lda $49				lda 	esInt0+1
.1dfb	91 2a		sta ($2a),y			sta 	(temp0),y
.1dfd	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1dff	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c08					lastPrintToken:
>0c08							.fill 	1
.1e00					Command_Print:
.1e00	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1e02	8d 08 0c	sta $0c08			sta 	lastPrintToken
.1e05	88		dey				dey
.1e06					_PrintLoopSkip:
.1e06	c8		iny				iny
.1e07					_PrintLoop:
.1e07	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1e09	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1e0b	f0 5b		beq $1e68			beq 	_PrintExit
.1e0d	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1e0f	f0 57		beq $1e68			beq 	_PrintExit
.1e11	8d 08 0c	sta $0c08			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1e14	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1e16	f0 ee		beq $1e06			beq 	_PrintLoopSkip
.1e18	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1e1a	f0 3c		beq $1e58			beq	 	_PrintNewLine
.1e1c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1e1e	f0 40		beq $1e60			beq 	_PrintTab
.1e20	20 f1 27	jsr $27f1			jsr 	EvaluateRoot 				; evaluate something at the root
.1e23	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1e25	85 2a		sta $2a				sta 	temp0
.1e27	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1e29	85 2b		sta $2b				sta 	1+(temp0)
.1e2b	a5 40		lda $40				lda 	esType 						; get type
.1e2d	f0 15		beq $1e44			beq		_PrintInteger
.1e2f	4a		lsr a				lsr 	a 							; check for floating point
.1e30	b0 08		bcs $1e3a			bcs 	_PrintFloat
.1e32					_PrintString:
.1e32	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1e34	20 76 1b	jsr $1b76			jsr 	TOSToTemp0
.1e37	4c 52 1e	jmp $1e52			jmp 	_PrintTemp0 				; print no leading space.
.1e3a					_PrintFloat:
.1e3a	a9 00		lda #$00			lda 	#0 							; stack level.
.1e3c	a2 14		ldx #$14		ldx	#20
.1e3e	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.1e41	4c 4b 1e	jmp $1e4b			jmp 	_PrintSpaceTemp0
.1e44					_PrintInteger:
.1e44	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1e46	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1e48	20 f9 2c	jsr $2cf9			jsr 	MInt32ToString				; convert to text
.1e4b					_PrintSpaceTemp0:
.1e4b	a9 20		lda #$20			lda 	#32
.1e4d	a2 14		ldx #$14		ldx	#20
.1e4f	20 94 12	jsr $1294		jsr	deviceHandler
.1e52					_PrintTemp0:
.1e52	20 79 1e	jsr $1e79			jsr 	PrintString
.1e55	4c 07 1e	jmp $1e07			jmp 	_PrintLoop
.1e58					_PrintNewLine:
.1e58	a2 04		ldx #$04		ldx	#4
.1e5a	20 94 12	jsr $1294		jsr	deviceHandler
.1e5d	4c 06 1e	jmp $1e06			jmp 	_PrintLoopSkip
.1e60					_PrintTab:
.1e60	a2 1a		ldx #$1a		ldx	#26
.1e62	20 94 12	jsr $1294		jsr	deviceHandler
.1e65	4c 06 1e	jmp $1e06			jmp 	_PrintLoopSkip
.1e68					_PrintExit:
.1e68	ad 08 0c	lda $0c08			lda		lastPrintToken 				; check last token
.1e6b	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1e6d	f0 09		beq $1e78			beq 	_PrintExit2
.1e6f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1e71	f0 05		beq $1e78			beq 	_PrintExit2
.1e73	a2 04		ldx #$04		ldx	#4
.1e75	20 94 12	jsr $1294		jsr	deviceHandler
.1e78					_PrintExit2:
.1e78	60		rts				rts
.1e79					PrintString:
.1e79	8a		txa				txa
.1e7a	48		pha				pha
.1e7b	98		tya				tya
.1e7c	48		pha				pha
.1e7d	a0 00		ldy #$00			ldy 	#0							; get length
.1e7f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e81	aa		tax				tax 								; into X
.1e82	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1e84	f0 10		beq $1e96			beq 	_PSExit
.1e86	ca		dex				dex
.1e87	8a		txa				txa
.1e88	48		pha				pha
.1e89	c8		iny				iny
.1e8a	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e8c	a2 14		ldx #$14		ldx	#20
.1e8e	20 94 12	jsr $1294		jsr	deviceHandler
.1e91	68		pla				pla
.1e92	aa		tax				tax
.1e93	4c 82 1e	jmp $1e82			jmp 	_PSLoop
.1e96					_PSExit:
.1e96	68		pla				pla
.1e97	a8		tay				tay
.1e98	68		pla				pla
.1e99	aa		tax				tax
.1e9a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c09					paramCount:
>0c09							.fill 	1
.1e9b					CallProc:
.1e9b	20 51 21	jsr $2151			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1e9e	48		pha				pha 								; save length on stack
.1e9f	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1ea1	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1ea3	48		pha				pha
.1ea4	a5 2a		lda $2a				lda 	temp0
.1ea6	48		pha				pha
.1ea7	98		tya				tya 								; calculate Y + length
.1ea8	18		clc				clc
.1ea9	65 32		adc $32				adc 	tempShort
.1eab	a8		tay				tay
.1eac	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1eae					_CallProcEvalParams:
.1eae	e8		inx				inx
.1eaf	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.1eb1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1eb3	f0 0b		beq $1ec0			beq 	_CPDoneParams
.1eb5	20 f3 27	jsr $27f3			jsr 	Evaluate 					; evaluate a parameter
.1eb8	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1eba	c8		iny				iny
.1ebb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1ebd	f0 ef		beq $1eae			beq 	_CallProcEvalParams
.1ebf	88		dey				dey 								; undo consumption.
.1ec0					_CPDoneParams:
.1ec0	20 16 2e	jsr $2e16			jsr 	CheckRightParen 			; check closing parenthesis.
.1ec3	8e 09 0c	stx $0c09			stx 	paramCount 					; store parameter count+1
.1ec6	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1ec8	a9 50		lda #$50			lda 	#markerPROC
.1eca	20 ba 2e	jsr $2eba			jsr 	RSClaim
.1ecd	a9 01		lda #$01			lda 	#1 							; store return address.
.1ecf	20 e6 2e	jsr $2ee6			jsr 	RSSavePosition
.1ed2	68		pla				pla 								; get the new code Ptr
.1ed3	85 28		sta $28				sta 	codePtr
.1ed5	68		pla				pla
.1ed6	85 29		sta $29				sta 	codePtr+1
.1ed8	68		pla				pla 								; length of name + 4 is the param start.
.1ed9	18		clc				clc
.1eda	69 04		adc #$04			adc 	#4
.1edc	a8		tay				tay
.1edd	a2 ff		ldx #$ff			ldx 	#$FF
.1edf					_CPLoadParameters:
.1edf	e8		inx				inx 								; point to where the address should be loaded.
.1ee0	ec 09 0c	cpx $0c09			cpx 	paramCount 					; too many parameters in definition ?
.1ee3	f0 1e		beq $1f03			beq 	_CPParamError
.1ee5	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.1ee7	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.1ee9	f0 0e		beq $1ef9			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.1eeb	20 d1 1c	jsr $1cd1			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1eee	20 14 1b	jsr $1b14			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1ef1	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.1ef3	c8		iny				iny
.1ef4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1ef6	f0 e7		beq $1edf			beq 	_CPLoadParameters
.1ef8	88		dey				dey 								; no, unconsume and check for )
.1ef9					_CPParamComplete:
.1ef9	20 16 2e	jsr $2e16			jsr 	CheckRightParen 			; check )
.1efc	e8		inx				inx 								; check right number of parameters have been consumed
.1efd	ec 09 0c	cpx $0c09			cpx 	paramCount
.1f00	d0 01		bne $1f03			bne 	_CPParamError
.1f02	60		rts				rts
.1f03					_CPParamError:
.1f03	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1f05	20 b5 12	jsr $12b5		jsr	errorHandler
.1f08					ReturnProc:
.1f08	20 43 1d	jsr $1d43			jsr 	RestoreLocals 				; get the locals back.
.1f0b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1f0d	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1f0f	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1f11	f0 05		beq $1f18			beq 	_isok
.1f13	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1f15	20 b5 12	jsr $12b5		jsr	errorHandler
.1f18					_isok:
.1f18	a9 01		lda #$01			lda 	#1
.1f1a	20 f9 2e	jsr $2ef9			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1f1d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1f1f	20 dc 2e	jsr $2edc			jsr 	RSFree
.1f22	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c0a					dataPtr:
>0c0a							.fill 	2
.0c0c					dataIndex:
>0c0c							.fill 	1
.1f23					CommandRead:
.1f23	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1f25	20 45 28	jsr $2845			jsr 	EvaluateReference
.1f28	20 69 1f	jsr $1f69			jsr 	SwapDPCP 					; use the data pointer.
.1f2b	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1f2d	c8		iny				iny
.1f2e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1f30	f0 07		beq $1f39			beq 	_CRInData
.1f32	88		dey				dey
.1f33	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1f35	aa		tax				tax
.1f36	20 30 2e	jsr $2e30			jsr 	ScanForward
.1f39					_CRInData:
.1f39	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1f3b	20 f3 27	jsr $27f3			jsr 	Evaluate
.1f3e	ca		dex				dex 								; and write the value.
.1f3f	20 14 1b	jsr $1b14			jsr 	WriteValue
.1f42	20 69 1f	jsr $1f69			jsr 	SwapDPCP 					; get the code pointer back.
.1f45	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1f47	c8		iny				iny
.1f48	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1f4a	f0 d7		beq $1f23			beq 	CommandRead
.1f4c	88		dey				dey
.1f4d	60		rts				rts
.1f4e					CommandData:
.1f4e	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1f50	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1f52	20 30 2e	jsr $2e30			jsr 	ScanForward
.1f55	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1f56	60		rts				rts
.1f57					CommandRestore:
.1f57	ad c8 0a	lda $0ac8			lda 	basePage
.1f5a	8d 0a 0c	sta $0c0a			sta 	dataPtr
.1f5d	ad c9 0a	lda $0ac9			lda 	basePage+1
.1f60	8d 0b 0c	sta $0c0b			sta 	dataPtr+1
.1f63	a9 03		lda #$03			lda 	#3
.1f65	8d 0c 0c	sta $0c0c			sta 	dataIndex
.1f68	60		rts				rts
.1f69					SwapDPCP:
.1f69	8a		txa				txa
.1f6a	48		pha				pha
.1f6b	98		tya				tya 								; swap Y, DataIndex
.1f6c	ac 0c 0c	ldy $0c0c			ldy 	DataIndex
.1f6f	8d 0c 0c	sta $0c0c			sta 	DataIndex
.1f72	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1f74	ae 0a 0c	ldx $0c0a			ldx 	dataptr
.1f77	8d 0a 0c	sta $0c0a			sta 	dataPtr
.1f7a	86 28		stx $28				stx 	codePtr
.1f7c	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1f7e	ae 0b 0c	ldx $0c0b			ldx 	dataptr+1
.1f81	8d 0b 0c	sta $0c0b			sta 	dataPtr+1
.1f84	86 29		stx $29				stx 	codePtr+1
.1f86	68		pla				pla
.1f87	aa		tax				tax
.1f88	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1f89					Command_Rem:
.1f89					Command_Rem2:
.1f89	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1f8b	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1f8d	d0 06		bne $1f95			bne 	_CRNotString
.1f8f	c8		iny				iny
.1f90	98		tya				tya
.1f91	38		sec				sec
.1f92	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1f94	a8		tay				tay
.1f95					_CRNotString:
.1f95	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.1f96					Command_Repeat:
.1f96	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1f98	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1f9a	20 ba 2e	jsr $2eba			jsr 	RSClaim
.1f9d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1f9f	20 e6 2e	jsr $2ee6			jsr 	RSSavePosition
.1fa2	60		rts				rts
.1fa3					Command_Until:
.1fa3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1fa5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1fa7	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1fa9	f0 05		beq $1fb0			beq 	_isok
.1fab	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.1fad	20 b5 12	jsr $12b5		jsr	errorHandler
.1fb0					_isok:
.1fb0	20 10 28	jsr $2810			jsr 	EvaluateRootInteger 		; at the bottom.
.1fb3	20 ca 2d	jsr $2dca			jsr 	MInt32Zero					; check if TOS zero
.1fb6	d0 06		bne $1fbe			bne 	_CUExit
.1fb8	a9 01		lda #$01			lda 	#1
.1fba	20 f9 2e	jsr $2ef9			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1fbd	60		rts				rts
.1fbe					_CUExit:
.1fbe	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1fc0	20 dc 2e	jsr $2edc			jsr 	RSFree
.1fc3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c0d					breakCounter:
>0c0d								.fill 	1
.0c0e					breakIncrement:
>0c0e								.fill 	1
.1fc4					Command_Run:
.1fc4					XCommand_Run:
.1fc4	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.1fc6	9a		txs				txs
.1fc7	20 4e 20	jsr $204e			jsr 	BreakOn 					; turn break on
.1fca	20 97 18	jsr $1897			jsr 	CommandClear 				; clear everything.
.1fcd	20 54 20	jsr $2054			jsr 	ResetCodeAddress 			; back to the start.
.1fd0					Command_RunFrom:
.1fd0	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1fd2					CRNextInstruction:
.1fd2	64 3a		stz $3a				stz 	softMemAlloc+1
.1fd4	ad 0d 0c	lda $0c0d			lda 	breakCounter 				; check for break.
.1fd7	6d 0e 0c	adc $0c0e			adc 	breakIncrement
.1fda	8d 0d 0c	sta $0c0d			sta 	breakCounter
.1fdd	90 05		bcc $1fe4			bcc 	_CRNoChecks
.1fdf	a2 00		ldx #$00		ldx	#0
.1fe1	20 94 12	jsr $1294		jsr	deviceHandler
.1fe4					_CRNoChecks
.1fe4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.1fe6	10 1c		bpl $2004			bpl 	_CRNotToken
.1fe8	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1fea	b0 0c		bcs $1ff8			bcs 	_CRExecute
.1fec	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1fee	b0 71		bcs $2061			bcs 	Unimplemented
.1ff0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1ff2	b0 04		bcs $1ff8			bcs 	_CRExecute
.1ff4	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1ff6	b0 16		bcs $200e			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.1ff8					_CRExecute:
.1ff8	c8		iny				iny 								; consume it.
.1ff9	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1ffa	aa		tax				tax
.1ffb	20 01 20	jsr $2001			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1ffe	4c d2 1f	jmp $1fd2			jmp 	CRNextInstruction
.2001					_CRRunRoutine:
.2001	7c 6b 20	jmp ($206b,x)			jmp 	(Group0Vectors,x)
.2004					_CRNotToken:
.2004	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2006	b0 59		bcs $2061			bcs 	Unimplemented
.2008					_CRDefaultLet:
.2008	20 01 1b	jsr $1b01			jsr 	CommandLet 					; do the default, LET
.200b	4c d2 1f	jmp $1fd2			jmp 	CRNextInstruction
.200e					_CRCheckIndirect:
.200e	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2010	f0 0a		beq $201c			beq 	_CRAndCommand
.2012	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2014	f0 f2		beq $2008			beq 	_CRDefaultLet
.2016	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2018	f0 ee		beq $2008			beq 	_CRDefaultLet
.201a	d0 45		bne $2061			bne 	Unimplemented
.201c					_CRAndCommand:
.201c	c8		iny				iny 								; skip over the AND token
.201d	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.201f	20 39 20	jsr $2039			jsr 	CommandAssembler 			; do the assembler command
.2022	4c d2 1f	jmp $1fd2			jmp 	CRNextInstruction 			; and loop round.
.2025					CommandShift1:
.2025	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2027	10 38		bpl $2061			bpl 	Unimplemented 				; we have an error as this should not happen.
.2029	c8		iny				iny 								; advance over it.
.202a	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.202c	b0 0b		bcs $2039			bcs 	CommandAssembler
.202e	0a		asl a				asl 	a 							; double into X
.202f	aa		tax				tax
.2030	7c 2f 21	jmp ($212f,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2033					CommandShift2:
.2033	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2035	20 93 15	jsr $1593		jsr	extensionHandler
.2038	60		rts				rts
.2039					CommandAssembler:
.2039	a2 00		ldx #$00		ldx	#0
.203b	20 59 11	jsr $1159		jsr	assemblerHandler
.203e	60		rts				rts
.203f					CommandAssemblerLabel:
.203f	a2 02		ldx #$02		ldx	#2
.2041	20 59 11	jsr $1159		jsr	assemblerHandler
.2044	60		rts				rts
.2045					CommandColon:
.2045	60		rts				rts
.2046					CommandBreak:
.2046	20 10 28	jsr $2810			jsr 	EvaluateRootInteger
.2049	20 ca 2d	jsr $2dca			jsr 	MInt32Zero
.204c	f0 02		beq $2050			beq 	BreakOff
.204e					BreakOn:
.204e	a2 08		ldx #$08			ldx 	#8
.2050					BreakOff:
.2050	8e 0e 0c	stx $0c0e			stx 	breakIncrement
.2053	60		rts				rts
.2054					ResetCodeAddress:
.2054	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2057	85 28		sta $28				sta 	codePtr
.2059	ad c9 0a	lda $0ac9			lda 	basePage+1
.205c	85 29		sta $29				sta 	codePtr+1
.205e	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2060	60		rts				rts
.2061					Unimplemented:
.2061	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2063	20 b5 12	jsr $12b5		jsr	errorHandler
.2066					TKErr01:
.2066					TKErr02:
.2066					TKErr03:
.2066					TKErr04:
.2066					TKErr05:
.2066					TKErr06:
.2066					TKErr07:
.2066					TKErr08:
.2066					TKErr09:
.2066					TKErr10:
.2066					TKErr11:
.2066	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2068	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.206b					Group0Vectors:
>206b	32 22					.word	AdvanceNextLine          ; $80 [[eol]]
>206d	25 20					.word	CommandShift1            ; $81 [[sh1]]
>206f	33 20					.word	CommandShift2            ; $82 [[sh2]]
>2071	66 20					.word	TKErr09                  ; $83 [[sh3]]
>2073	66 20					.word	TKErr10                  ; $84 [[fpc]]
>2075	66 20					.word	TKErr08                  ; $85 [[str]]
>2077	f6 23					.word	AndHandler               ; $86 and
>2079	e3 23					.word	OrHandler                ; $87 or
>207b	d0 23					.word	XorHandler               ; $88 xor
>207d	18 25					.word	CompareGreaterEq         ; $89 >=
>207f	22 25					.word	CompareLessEq            ; $8a <=
>2081	04 25					.word	CompareGreater           ; $8b >
>2083	fa 24					.word	CompareLess              ; $8c <
>2085	f0 24					.word	CompareEquals            ; $8d =
>2087	0e 25					.word	CompareNotEquals         ; $8e <>
>2089	61 23					.word	AddHandler               ; $8f +
>208b	84 23					.word	SubHandler               ; $90 -
>208d	1c 24					.word	ShrHandler               ; $91 >>
>208f	09 24					.word	ShlHandler               ; $92 <<
>2091	97 23					.word	MulHandler               ; $93 *
>2093	aa 23					.word	DivHandler               ; $94 /
>2095	bd 23					.word	ModHandler               ; $95 mod
>2097	55 24					.word	PowerHandler             ; $96 ^
>2099	2f 24					.word	WordRefHandler           ; $97 !
>209b	42 24					.word	ByteRefHandler           ; $98 ?
>209d	96 1f					.word	Command_Repeat           ; $99 repeat
>209f	fa 22					.word	Command_While            ; $9a while
>20a1	00 19					.word	Command_FOR              ; $9b for
>20a3	0f 1a					.word	CommandIf                ; $9c if
>20a5	66 20					.word	TKErr04                  ; $9d defproc
>20a7	a3 1f					.word	Command_Until            ; $9e until
>20a9	1d 23					.word	Command_Wend             ; $9f wend
>20ab	61 19					.word	Command_NEXT             ; $a0 next
>20ad	66 20					.word	TKErr06                  ; $a1 then
>20af	4a 1a					.word	Command_ENDIF            ; $a2 endif
>20b1	08 1f					.word	ReturnProc               ; $a3 endproc
>20b3	fa 26					.word	UnaryParenthesis         ; $a4 (
>20b5	58 28					.word	UnaryLen                 ; $a5 len(
>20b7	9c 28					.word	UnarySgn                 ; $a6 sgn(
>20b9	85 28					.word	UnaryAbs                 ; $a7 abs(
>20bb	f5 28					.word	Unary_Random             ; $a8 random(
>20bd	3f 29					.word	Unary_Page               ; $a9 page
>20bf	9f 2d					.word	MInt32True               ; $aa true
>20c1	a3 2d					.word	MInt32False              ; $ab false
>20c3	0a 29					.word	Unary_Min                ; $ac min(
>20c5	0e 29					.word	Unary_Max                ; $ad max(
>20c7	17 2a					.word	UnarySys                 ; $ae sys(
>20c9	c0 29					.word	UnaryTimer               ; $af timer(
>20cb	4f 27					.word	EventFunction            ; $b0 event(
>20cd	e9 29					.word	UnaryGet                 ; $b1 get(
>20cf	d9 29					.word	UnaryInkey               ; $b2 inkey(
>20d1	90 29					.word	UnaryAlloc               ; $b3 alloc(
>20d3	50 2a					.word	ExecChr                  ; $b4 chr$(
>20d5	80 2a					.word	ExecLeft                 ; $b5 left$(
>20d7	9d 2a					.word	ExecMid                  ; $b6 mid$(
>20d9	c5 2a					.word	ExecRight                ; $b7 right$(
>20db	32 25					.word	Event_Str                ; $b8 str$(
>20dd	61 25					.word	UnaryVal                 ; $b9 val(
>20df	b3 28					.word	UnaryPeek                ; $ba peek(
>20e1	b9 28					.word	UnaryDeek                ; $bb deek(
>20e3	bf 28					.word	UnaryLeek                ; $bc leek(
>20e5	76 28					.word	UnaryAsc                 ; $bd asc(
>20e7	6a 29					.word	UnaryIntToFloat          ; $be int(
>20e9	7d 29					.word	UnaryFloatToInt          ; $bf float(
>20eb	64 25					.word	UnaryIsVal               ; $c0 isval(
>20ed	67 2a					.word	ExecUpper                ; $c1 upper$(
>20ef	64 2a					.word	ExecLower                ; $c2 lower$(
>20f1	4d 29					.word	UnaryReference           ; $c3 @
>20f3	63 29					.word	UnaryComplement          ; $c4 ~
>20f5	60 29					.word	UnaryHexMarker           ; $c5 &
>20f7	02 2a					.word	UnaryGetString           ; $c6 get$(
>20f9	08 2a					.word	UnaryInkeyString         ; $c7 inkey$(
>20fb	3f 2a					.word	UnaryMem                 ; $c8 mem
>20fd	66 20					.word	TKErr01                  ; $c9 )
>20ff	45 20					.word	CommandColon             ; $ca :
>2101	66 20					.word	TKErr02                  ; $cb ,
>2103	66 20					.word	TKErr03                  ; $cc ;
>2105	89 1f					.word	Command_Rem2             ; $cd '
>2107	66 20					.word	TKErr07                  ; $ce to
>2109	66 20					.word	TKErr05                  ; $cf step
>210b	9b 1e					.word	CallProc                 ; $d0 proc
>210d	b3 1c					.word	CommandLocal             ; $d1 local
>210f	f2 18					.word	Command_Dim              ; $d2 dim
>2111	89 1f					.word	Command_Rem              ; $d3 rem
>2113	01 1b					.word	CommandLet               ; $d4 let
>2115	4b 1a					.word	Command_Input            ; $d5 input
>2117	44 1a					.word	Command_ELSE             ; $d6 else
>2119	d9 22					.word	Command_VDU              ; $d7 vdu
>211b	00 1e					.word	Command_Print            ; $d8 print
>211d	a7 22					.word	CommandGOTO              ; $d9 goto
>211f	7c 22					.word	CommandGOSUB             ; $da gosub
>2121	8f 22					.word	CommandRETURN            ; $db return
>2123	4e 1f					.word	CommandData              ; $dc data
>2125	89 18					.word	Command_Assert           ; $dd assert
>2127	c3 1d					.word	Command_Poke             ; $de poke
>2129	c7 1d					.word	Command_Doke             ; $df doke
>212b	cb 1d					.word	Command_Loke             ; $e0 loke
>212d	4c 22					.word	Command_Ink              ; $e1 ink
>212f	57 22					.word	Command_Paper            ; $e2 paper
>2131	46 22					.word	Command_CLS              ; $e3 cls
>2133	62 22					.word	Command_Locate           ; $e4 locate
>2135	46 20					.word	CommandBreak             ; $e5 break
>2137	3f 20					.word	CommandAssemblerLabel    ; $e6 .
>2139	66 20					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.213b					Group1Vectors:
>213b	97 18					.word	CommandClear             ; $86 clear
>213d	5a 1c					.word	CommandLoad              ; $87 load
>213f	6f 1c					.word	CommandSave              ; $88 save
>2141	7f 1b					.word	CommandList              ; $89 list
>2143	b5 1d					.word	Command_New              ; $8a new
>2145	c4 1f					.word	Command_Run              ; $8b run
>2147	23 1f					.word	CommandRead              ; $8c read
>2149	57 1f					.word	CommandRestore           ; $8d restore
>214b	2c 22					.word	CommandEnd               ; $8e end
>214d	27 22					.word	CommandStop              ; $8f stop
>214f	2f 22					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c0f					procList:
>0c0f							.fill 	2		 					; terminated by name high being zero.
.0c11					yInLine:
>0c11							.fill 	1
.2151					FindProcedure:
.2151	8c 11 0c	sty $0c11			sty 	yInLine 					; save current position.
.2154	20 0f 22	jsr $220f			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2157	85 2c		sta $2c				sta 	temp1
.2159	ad 0f 0c	lda $0c0f			lda		procList 					; put procList address in temp2
.215c	85 2e		sta $2e				sta 	temp2
.215e	ad 10 0c	lda $0c10			lda 	procList+1
.2161	85 2f		sta $2f				sta 	temp2+1
.2163	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2165					_FPLoop:
.2165	b1 2e		lda ($2e),y			lda 	(temp2),y
.2167	f0 4f		beq $21b8			beq 	_FPError 					; if so, we don't know this procedure.
.2169	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.216b	c8		iny				iny
.216c	b1 2e		lda ($2e),y			lda 	(temp2),y
.216e	85 2a		sta $2a				sta 	temp0
.2170	c8		iny				iny
.2171	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2173	c5 2c		cmp $2c				cmp 	temp1
.2175	d0 2b		bne $21a2			bne 	_FPNext 					; hash is different, go to next.
.2177	38		sec				sec
.2178	ad 11 0c	lda $0c11			lda 	yInLine 					; position in line must be at least 4
.217b	e9 04		sbc #$04			sbc 	#4
.217d	18		clc				clc
.217e	65 28		adc $28				adc 	codePtr
.2180	85 30		sta $30				sta 	temp3
.2182	a5 29		lda $29				lda 	codePtr+1
.2184	69 00		adc #$00			adc 	#0
.2186	85 31		sta $31				sta 	temp3+1
.2188	98		tya				tya
.2189	48		pha				pha
.218a	a0 04		ldy #$04			ldy 	#4
.218c					_FPCName:
.218c	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.218e	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2190	d0 0e		bne $21a0			bne 	_FPpulYNext 				; if different go to next one.
.2192	c8		iny				iny
.2193	c9 3a		cmp #$3a			cmp 	#$3A
.2195	90 f5		bcc $218c			bcc 	_FPCName 					; compare the whole lot....
.2197	68		pla				pla 								; throw away the saved Y
.2198	98		tya				tya 								; length of name is Y-4
.2199	38		sec				sec
.219a	e9 04		sbc #$04			sbc 	#4
.219c	ac 11 0c	ldy $0c11			ldy 	yInLine  					; get the original Y back
.219f	60		rts				rts
.21a0					_FPpulYNext:
.21a0	68		pla				pla
.21a1	a8		tay				tay
.21a2					_FPNext:
.21a2	c8		iny				iny 								; next procedure record.
.21a3	10 c0		bpl $2165			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.21a5	98		tya				tya 								; subtract 128 from Y
.21a6	38		sec				sec
.21a7	e9 80		sbc #$80			sbc 	#128
.21a9	a8		tay				tay
.21aa	18		clc				clc 								; add 128 to temp2, so we can have more than
.21ab	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.21ad	69 80		adc #$80			adc 	#128
.21af	85 2e		sta $2e				sta 	temp2
.21b1	90 b2		bcc $2165			bcc 	_FPLoop
.21b3	e6 2f		inc $2f				inc 	temp2+1
.21b5	4c 65 21	jmp $2165			jmp 	_FPLoop
.21b8					_FPError:
.21b8	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.21ba	20 b5 12	jsr $12b5		jsr	errorHandler
.21bd					ScanProc:
.21bd	98		tya				tya
.21be	48		pha				pha
.21bf	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.21c1	8d 0f 0c	sta $0c0f			sta 	procList
.21c4	a5 36		lda $36				lda 	lowMemory+1
.21c6	8d 10 0c	sta $0c10			sta 	procList+1
.21c9	20 54 20	jsr $2054			jsr 	ResetCodeAddress 			; back to the start.
.21cc					_ScanLoop:
.21cc	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.21ce	b1 28		lda ($28),y			lda 	(codePtr),y
.21d0	f0 2a		beq $21fc			beq 	_ScanExit
.21d2	a0 03		ldy #$03			ldy 	#3							; get first token
.21d4	b1 28		lda ($28),y			lda 	(codePtr),y
.21d6	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.21d8	d0 12		bne $21ec			bne 	_ScanNext
.21da	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.21dc	20 04 22	jsr $2204			jsr 	_ScanWrite
.21df	a5 28		lda $28				lda 	codePtr
.21e1	20 04 22	jsr $2204			jsr 	_ScanWrite
.21e4	a0 04		ldy #$04			ldy 	#4 							; start of name part
.21e6	20 0f 22	jsr $220f			jsr 	CalculateProcedureHash 		; calculate procedure hash
.21e9	20 04 22	jsr $2204			jsr 	_ScanWrite					; and write that
.21ec					_ScanNext:
.21ec	18		clc				clc
.21ed	a0 00		ldy #$00			ldy 	#0
.21ef	b1 28		lda ($28),y			lda 	(codePtr),y
.21f1	65 28		adc $28				adc 	codePtr
.21f3	85 28		sta $28				sta 	codePtr
.21f5	90 d5		bcc $21cc			bcc 	_ScanLoop
.21f7	e6 29		inc $29				inc 	codePtr+1
.21f9	4c cc 21	jmp $21cc			jmp 	_ScanLoop
.21fc					_ScanExit:
.21fc	a9 00		lda #$00			lda 	#0 							; write ending zero.
.21fe	20 04 22	jsr $2204			jsr 	_ScanWrite
.2201	68		pla				pla
.2202	a8		tay				tay
.2203	60		rts				rts
.2204					_ScanWrite:
.2204	a0 00		ldy #$00			ldy 	#0
.2206	91 35		sta ($35),y			sta 	(lowMemory),y
.2208	e6 35		inc $35				inc 	lowMemory
.220a	d0 02		bne $220e			bne 	_SWNoCarry
.220c	e6 36		inc $36				inc 	lowMemory+1
.220e					_SWNoCarry:
.220e	60		rts				rts
.220f					CalculateProcedureHash:
.220f	a9 00		lda #$00			lda 	#0 							; clear hash.
.2211	85 2a		sta $2a				sta 	temp0
.2213					_CPHLoop:
.2213	18		clc				clc 								; add character and rotate and add carry back in
.2214	b1 28		lda ($28),y			lda 	(codePtr),y
.2216	65 2a		adc $2a				adc 	temp0
.2218	6a		ror a				ror 	a
.2219	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.221b	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.221d	b1 28		lda ($28),y			lda 	(codePtr),y
.221f	c8		iny				iny 								; advance incase we go round again.
.2220	c9 3a		cmp #$3a			cmp 	#$3A
.2222	90 ef		bcc $2213			bcc 	_CPHLoop
.2224	a5 2a		lda $2a				lda 	temp0
.2226	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.2227					CommandStop:
.2227	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2229	20 b5 12	jsr $12b5		jsr	errorHandler
.222c					CommandEnd:
.222c	4c 08 2f	jmp $2f08			jmp 	WarmStart
.222f					CommandXemu:
.222f	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2232					AdvanceNextLine:
.2232	a0 00		ldy #$00			ldy 	#0 							; get offset
.2234	b1 28		lda ($28),y			lda 	(codePtr),y
.2236	18		clc				clc 								; add to codePtr
.2237	65 28		adc $28				adc 	codePtr
.2239	85 28		sta $28				sta 	codePtr
.223b	90 02		bcc $223f			bcc 	_ANLNoCarry
.223d	e6 29		inc $29				inc 	codePtr+1
.223f					_ANLNoCarry:
.223f	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2241	f0 e9		beq $222c			beq 	CommandEnd 					; execute END
.2243	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2245	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.2246					Command_CLS:
.2246	a2 02		ldx #$02		ldx	#2
.2248	20 94 12	jsr $1294		jsr	deviceHandler
.224b	60		rts				rts
.224c					Command_Ink:
.224c	a2 00		ldx #$00			ldx 	#0
.224e	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger
.2251	a2 08		ldx #$08		ldx	#8
.2253	20 94 12	jsr $1294		jsr	deviceHandler
.2256	60		rts				rts
.2257					Command_Paper:
.2257	a2 00		ldx #$00			ldx 	#0
.2259	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger
.225c	a2 12		ldx #$12		ldx	#18
.225e	20 94 12	jsr $1294		jsr	deviceHandler
.2261	60		rts				rts
.2262					Command_Locate:
.2262	a2 00		ldx #$00			ldx 	#0
.2264	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger
.2267	20 23 2e	jsr $2e23			jsr 	CheckComma
.226a	e8		inx				inx
.226b	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger
.226e	98		tya				tya
.226f	48		pha				pha
.2270	a4 49		ldy $49				ldy 	esInt0+1
.2272	a5 48		lda $48				lda 	esInt0
.2274	a2 10		ldx #$10		ldx	#16
.2276	20 94 12	jsr $1294		jsr	deviceHandler
.2279	68		pla				pla
.227a	a8		tay				tay
.227b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.227c					CommandGOSUB:
.227c	20 10 28	jsr $2810			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.227f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2281	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2283	20 ba 2e	jsr $2eba			jsr 	RSClaim
.2286	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2288	20 e6 2e	jsr $2ee6			jsr 	RSSavePosition
.228b	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.228d	f0 1b		beq $22aa			beq 	GotoTOS 					; and do a GOTO there.
.228f					CommandRETURN:
.228f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2291	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2293	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2295	f0 05		beq $229c			beq 	_isok
.2297	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2299	20 b5 12	jsr $12b5		jsr	errorHandler
.229c					_isok:
.229c	a9 01		lda #$01			lda 	#1
.229e	20 f9 2e	jsr $2ef9			jsr 	RSLoadPosition 				; reload the position from offset 1.
.22a1	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.22a3	20 dc 2e	jsr $2edc			jsr 	RSFree
.22a6	60		rts				rts
.22a7					CommandGOTO:
.22a7	20 10 28	jsr $2810			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.22aa					GotoTOS:
.22aa	20 54 20	jsr $2054			jsr 	ResetCodeAddress 			; simple search.
.22ad					_GotoSearch:
.22ad	a0 00		ldy #$00			ldy 	#0 							; get offset
.22af	b1 28		lda ($28),y			lda 	(codePtr),y
.22b1	f0 21		beq $22d4			beq 	_GotoError 					; not found.
.22b3	c8		iny				iny									; check LSB match
.22b4	b1 28		lda ($28),y			lda 	(codePtr),y
.22b6	d5 48		cmp $48,x			cmp 	esInt0,x
.22b8	d0 07		bne $22c1			bne 	_GotoNext
.22ba	c8		iny				iny
.22bb	b1 28		lda ($28),y			lda 	(codePtr),y
.22bd	d5 50		cmp $50,x			cmp 	esInt1,x
.22bf	f0 10		beq $22d1			beq 	_GotoFound
.22c1					_GotoNext:
.22c1	a0 00		ldy #$00			ldy 	#0 							; go next line
.22c3	b1 28		lda ($28),y			lda 	(codePtr),y
.22c5	18		clc				clc
.22c6	65 28		adc $28				adc 	codePtr
.22c8	85 28		sta $28				sta 	codePtr
.22ca	90 e1		bcc $22ad			bcc 	_GotoSearch
.22cc	e6 29		inc $29				inc 	codePtr+1
.22ce	4c ad 22	jmp $22ad			jmp 	_GotoSearch
.22d1					_GotoFound:
.22d1	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.22d3	60		rts				rts
.22d4					_GotoError:
.22d4	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.22d6	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.22d9					Command_VDU:
.22d9	20 10 28	jsr $2810			jsr 	EvaluateRootInteger 			; get integer at root.
.22dc	a5 48		lda $48				lda 	esInt0
.22de	a2 14		ldx #$14		ldx	#20
.22e0	20 94 12	jsr $1294		jsr	deviceHandler
.22e3					_CVNext:
.22e3	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.22e5	c8		iny				iny
.22e6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.22e8	f0 ef		beq $22d9			beq 	Command_VDU
.22ea	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.22ec	d0 0a		bne $22f8			bne 	_CVExit
.22ee	a5 50		lda $50				lda 	esInt1
.22f0	a2 14		ldx #$14		ldx	#20
.22f2	20 94 12	jsr $1294		jsr	deviceHandler
.22f5	4c e3 22	jmp $22e3			jmp 	_CVNext
.22f8	88		dey		_CVExit:dey
.22f9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.22fa					Command_While:
.22fa	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.22fc	a2 04		ldx #$04			ldx 	#4
.22fe	20 ba 2e	jsr $2eba			jsr 	RSClaim 					; create on stack.
.2301	88		dey				dey
.2302	a9 01		lda #$01			lda 	#1
.2304	20 e6 2e	jsr $2ee6			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2307	c8		iny				iny
.2308	20 12 28	jsr $2812			jsr 	EvaluateInteger				; get the conditional
.230b	20 ca 2d	jsr $2dca			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.230e	f0 01		beq $2311			beq 	_CWFail
.2310	60		rts				rts
.2311					_CWFail:
.2311	a9 04		lda #$04			lda 	#4
.2313	20 dc 2e	jsr $2edc			jsr 	RSFree 						; close the just opened position.
.2316	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2318	aa		tax				tax
.2319	20 30 2e	jsr $2e30			jsr 	ScanForward
.231c	60		rts				rts
.231d					Command_Wend:
.231d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.231f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2321	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2323	f0 05		beq $232a			beq 	_isok
.2325	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2327	20 b5 12	jsr $12b5		jsr	errorHandler
.232a					_isok:
.232a	a9 01		lda #$01			lda 	#1
.232c	20 f9 2e	jsr $2ef9			jsr 	RSLoadPosition				; go back until true
.232f	a9 04		lda #$04			lda 	#4
.2331	20 dc 2e	jsr $2edc			jsr 	RSFree 						; close the loop
.2334	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.2335					BinaryProcess:
.2335	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2337	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.2339	0a		asl a				asl 	a
.233a	30 0e		bmi $234a			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.233c	18		clc				clc 								; return CC for integer
.233d	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.233f	f0 08		beq $2349			beq 	_BPExit 					; if both integer then return with CC.
.2341	20 4f 23	jsr $234f			jsr 	BPMakeBothFloat 			; make both float
.2344	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2346	95 40		sta $40,x			sta 	esType,x
.2348	38		sec				sec 								; and return with carry set.
.2349					_BPExit:
.2349	60		rts				rts
.234a					_BPStringType:
.234a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.234c	20 b5 12	jsr $12b5		jsr	errorHandler
.234f					BPMakeBothFloat:
.234f	e8		inx				inx
.2350	20 54 23	jsr $2354			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2353	ca		dex				dex
.2354					BPMakeFloat:
.2354	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.2356	4a		lsr a				lsr 	a
.2357	b0 07		bcs $2360			bcs 	_BPIsFloat 					; already a float if set.
.2359	8a		txa				txa
.235a	a2 1a		ldx #$1a		ldx	#26
.235c	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.235f	aa		tax				tax
.2360					_BPIsFloat:
.2360	60		rts				rts
.2361					AddHandler:
.2361	20 b0 25	jsr $25b0			jsr 	DereferenceTwo 				; dereference top two on stack.
.2364	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.2366	35 41		and $41,x			and 	esType+1,x
.2368	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.236a	d0 10		bne $237c			bne 	_AHStringConcat				; concatenate strings.
.236c	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.236f	b0 03		bcs $2374			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2371	4c 87 2c	jmp $2c87			jmp 	MInt32Add 							; else do it as integer.
.2374					_IsFPOperation:
.2374	8a		txa				txa 								; call the relevant fp routine
.2375	a2 02		ldx #$02		ldx	#2
.2377	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.237a	aa		tax				tax
.237b	60		rts				rts
.237c					_AHStringConcat:
.237c	8a		txa				txa 								; handled by the string module.
.237d	a2 04		ldx #$04		ldx	#4
.237f	20 c3 31	jsr $31c3		jsr	stringHandler
.2382	aa		tax				tax
.2383	60		rts				rts
.2384					SubHandler:
.2384	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.2387	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.238a	b0 03		bcs $238f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.238c	4c a1 2c	jmp $2ca1			jmp 	MInt32Sub 							; else do it as integer.
.238f					_IsFPOperation:
.238f	8a		txa				txa 								; call the relevant fp routine
.2390	a2 10		ldx #$10		ldx	#16
.2392	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2395	aa		tax				tax
.2396	60		rts				rts
.2397					MulHandler:
.2397	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.239a	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.239d	b0 03		bcs $23a2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.239f	4c bb 2c	jmp $2cbb			jmp 	MInt32Multiply 							; else do it as integer.
.23a2					_IsFPOperation:
.23a2	8a		txa				txa 								; call the relevant fp routine
.23a3	a2 0a		ldx #$0a		ldx	#10
.23a5	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.23a8	aa		tax				tax
.23a9	60		rts				rts
.23aa					DivHandler:
.23aa	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.23ad	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.23b0	b0 03		bcs $23b5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.23b2	4c 78 2b	jmp $2b78			jmp 	MInt32SDivide 							; else do it as integer.
.23b5					_IsFPOperation:
.23b5	8a		txa				txa 								; call the relevant fp routine
.23b6	a2 06		ldx #$06		ldx	#6
.23b8	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.23bb	aa		tax				tax
.23bc	60		rts				rts
.23bd					ModHandler:
.23bd	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.23c0	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.23c3	b0 03		bcs $23c8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.23c5	4c f6 2b	jmp $2bf6			jmp 	MInt32Modulus 							; else do it as integer.
.23c8					_IsFPOperation:
.23c8	8a		txa				txa 								; call the relevant fp routine
.23c9	a2 08		ldx #$08		ldx	#8
.23cb	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.23ce	aa		tax				tax
.23cf	60		rts				rts
.23d0					XorHandler:
.23d0	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.23d3	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.23d6	b0 03		bcs $23db			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.23d8	4c 2a 2b	jmp $2b2a			jmp 	MInt32Xor 							; else do it as integer.
.23db					_IsFPOperation:
.23db	8a		txa				txa 								; call the relevant fp routine
.23dc	a2 08		ldx #$08		ldx	#8
.23de	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.23e1	aa		tax				tax
.23e2	60		rts				rts
.23e3					OrHandler:
.23e3	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.23e6	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.23e9	b0 03		bcs $23ee			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.23eb	4c 11 2b	jmp $2b11			jmp 	MInt32Or 							; else do it as integer.
.23ee					_IsFPOperation:
.23ee	8a		txa				txa 								; call the relevant fp routine
.23ef	a2 08		ldx #$08		ldx	#8
.23f1	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.23f4	aa		tax				tax
.23f5	60		rts				rts
.23f6					AndHandler:
.23f6	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.23f9	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.23fc	b0 03		bcs $2401			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.23fe	4c f8 2a	jmp $2af8			jmp 	MInt32And 							; else do it as integer.
.2401					_IsFPOperation:
.2401	8a		txa				txa 								; call the relevant fp routine
.2402	a2 08		ldx #$08		ldx	#8
.2404	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2407	aa		tax				tax
.2408	60		rts				rts
.2409					ShlHandler:
.2409	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.240c	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.240f	b0 03		bcs $2414			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2411	4c 8a 24	jmp $248a			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2414					_IsFPOperation:
.2414	8a		txa				txa 								; call the relevant fp routine
.2415	a2 08		ldx #$08		ldx	#8
.2417	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.241a	aa		tax				tax
.241b	60		rts				rts
.241c					ShrHandler:
.241c	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.241f	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.2422	b0 03		bcs $2427			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2424	4c 8d 24	jmp $248d			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2427					_IsFPOperation:
.2427	8a		txa				txa 								; call the relevant fp routine
.2428	a2 08		ldx #$08		ldx	#8
.242a	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.242d	aa		tax				tax
.242e	60		rts				rts
.242f					WordRefHandler:
.242f	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.2432	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.2435	b0 03		bcs $243a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2437	4c 7c 24	jmp $247c			jmp 	MInt32WordIndirect 							; else do it as integer.
.243a					_IsFPOperation:
.243a	8a		txa				txa 								; call the relevant fp routine
.243b	a2 08		ldx #$08		ldx	#8
.243d	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2440	aa		tax				tax
.2441	60		rts				rts
.2442					ByteRefHandler:
.2442	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.2445	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.2448	b0 03		bcs $244d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.244a	4c 80 24	jmp $2480			jmp 	MInt32ByteIndirect 							; else do it as integer.
.244d					_IsFPOperation:
.244d	8a		txa				txa 								; call the relevant fp routine
.244e	a2 08		ldx #$08		ldx	#8
.2450	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2453	aa		tax				tax
.2454	60		rts				rts
.2455					PowerHandler:
.2455	20 b0 25	jsr $25b0			jsr 	DereferenceTwo
.2458	20 35 23	jsr $2335			jsr 	BinaryProcess 				; check to see if either is float
.245b	b0 03		bcs $2460			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.245d	4c 68 24	jmp $2468			jmp 	PowerInteger 							; else do it as integer.
.2460					_IsFPOperation:
.2460	8a		txa				txa 								; call the relevant fp routine
.2461	a2 16		ldx #$16		ldx	#22
.2463	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2466	aa		tax				tax
.2467	60		rts				rts
.2468					PowerInteger:
.2468	20 4f 23	jsr $234f			jsr 	BPMakeBothFloat				; make them float.
.246b	8a		txa				txa
.246c	a2 16		ldx #$16		ldx	#22
.246e	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2471	a2 12		ldx #$12		ldx	#18
.2473	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2476	aa		tax				tax
.2477	a9 00		lda #$00			lda 	#0 							; make type integer
.2479	95 40		sta $40,x			sta 	esType,x
.247b	60		rts				rts
.247c					Mint32WordIndirect:
.247c	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.247e	d0 02		bne $2482			bne 	Min32Indirect
.2480					Mint32ByteIndirect:
.2480	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2482					Min32Indirect:
.2482	48		pha				pha 								; save the indirection
.2483	20 87 2c	jsr $2c87			jsr 	MInt32Add 					; add a!b a?b
.2486	68		pla				pla 								; and set the type to reference.
.2487	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2489	60		rts				rts
.248a					Mint32ShiftLeftX:
.248a	18		clc				clc 								; CC shift left
.248b	90 01		bcc $248e			bcc 	Mint32Shift
.248d					Mint32ShiftRightX:
.248d	38		sec				sec 								; CS shift right
.248e					Mint32Shift:
.248e	08		php				php 								; save carry flag on stack.
.248f	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2491	15 59		ora $59,x			ora 	esInt2+1,x
.2493	15 61		ora $61,x			ora 	esInt3+1,x
.2495	d0 1e		bne $24b5			bne 	_MShiftZero
.2497	b5 49		lda $49,x			lda 	esInt0+1,x
.2499	c9 20		cmp #$20			cmp 	#32
.249b	b0 18		bcs $24b5			bcs 	_MShiftZero
.249d					_MShiftLoop:
.249d	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.249f	f0 12		beq $24b3			beq 	_MShiftExit
.24a1	d6 49		dec $49,x			dec 	esInt0+1,x
.24a3	28		plp				plp 								; restore and save carry
.24a4	08		php				php
.24a5	90 06		bcc $24ad			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.24a7	20 c1 2d	jsr $2dc1			jsr 	Mint32ShiftRight
.24aa	4c 9d 24	jmp $249d			jmp 	_MShiftLoop
.24ad					_MShiftLeft:
.24ad	20 b8 2d	jsr $2db8			jsr 	Mint32ShiftLeft
.24b0	4c 9d 24	jmp $249d			jmp 	_MShiftLoop
.24b3					_MShiftExit:
.24b3	28		plp				plp	 								; throw saved carry and exit
.24b4	60		rts				rts
.24b5					_MShiftZero:
.24b5	4c a3 2d	jmp $2da3			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.24b8					PerformComparison:
.24b8	20 b0 25	jsr $25b0			jsr 	DereferenceTwo 				; make both values.
.24bb	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.24bd	35 41		and $41,x			and 	esType+1,x
.24bf	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.24c0	30 1d		bmi $24df			bmi 	_PCIsString
.24c2	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.24c4	15 41		ora $41,x			ora 	esType+1,x
.24c6	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.24c7	30 22		bmi $24eb			bmi 	_PCError
.24c9	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.24cb	f0 0f		beq $24dc			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.24cd	20 4f 23	jsr $234f			jsr 	BPMakeBothFloat 			; make both float
.24d0	8a		txa				txa
.24d1	a2 04		ldx #$04		ldx	#4
.24d3	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.24d6	86 32		stx $32				stx 	tempShort 					; save result
.24d8	aa		tax				tax
.24d9	a5 32		lda $32				lda 	tempShort
.24db	60		rts				rts
.24dc					_PCIsInteger:
.24dc	4c 43 2b	jmp $2b43			jmp 	MInt32Compare
.24df					_PCIsString:
.24df	8a		txa				txa 								; A has SP
.24e0	a2 08		ldx #$08		ldx	#8
.24e2	20 c3 31	jsr $31c3		jsr	stringHandler
.24e5	86 32		stx $32				stx 	tempShort 					; save result
.24e7	aa		tax				tax 								; put SP back in X and get result.
.24e8	a5 32		lda $32				lda 	tempShort
.24ea	60		rts				rts
.24eb					_PCError:
.24eb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.24ed	20 b5 12	jsr $12b5		jsr	errorHandler
.24f0					CompareEquals:
.24f0	20 b8 24	jsr $24b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.24f3	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.24f5	f0 35		beq $252c			beq  	CompareTrue
.24f7	4c 2f 25	jmp $252f			jmp 	CompareFalse
.24fa					CompareLess:
.24fa	20 b8 24	jsr $24b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.24fd	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.24ff	f0 2b		beq $252c			beq  	CompareTrue
.2501	4c 2f 25	jmp $252f			jmp 	CompareFalse
.2504					CompareGreater:
.2504	20 b8 24	jsr $24b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2507	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2509	f0 21		beq $252c			beq  	CompareTrue
.250b	4c 2f 25	jmp $252f			jmp 	CompareFalse
.250e					CompareNotEquals:
.250e	20 b8 24	jsr $24b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2511	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2513	d0 17		bne $252c			bne  	CompareTrue
.2515	4c 2f 25	jmp $252f			jmp 	CompareFalse
.2518					CompareGreaterEq:
.2518	20 b8 24	jsr $24b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.251b	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.251d	d0 0d		bne $252c			bne  	CompareTrue
.251f	4c 2f 25	jmp $252f			jmp 	CompareFalse
.2522					CompareLessEq:
.2522	20 b8 24	jsr $24b8			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2525	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2527	d0 03		bne $252c			bne  	CompareTrue
.2529	4c 2f 25	jmp $252f			jmp 	CompareFalse
.252c					CompareTrue:
.252c	4c 9f 2d	jmp $2d9f			jmp 	MInt32True
.252f					CompareFalse:
.252f	4c a3 2d	jmp $2da3			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.2532					Event_Str:
.2532	20 fc 27	jsr $27fc			jsr 	EvaluateNumeric 			; get a number.
.2535	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.2537	d0 13		bne $254c			bne 	_ESFloat
.2539	20 8f 25	jsr $258f			jsr 	ConvertGetBase 				; get base, or default.
.253c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.253e	85 2a		sta $2a				sta 	temp0
.2540	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2542	85 2b		sta $2b				sta 	1+(temp0)
.2544	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2546	20 f9 2c	jsr $2cf9			jsr 	MInt32ToString 				; convert to string.
.2549	4c 59 25	jmp $2559			jmp 	_ESCloneExit 				; clone and exit.
.254c					_ESFloat:
.254c	20 16 2e	jsr $2e16			jsr 	CheckRightParen 			; check closing )
.254f	20 76 1b	jsr $1b76			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2552	8a		txa				txa
.2553	a2 14		ldx #$14		ldx	#20
.2555	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2558	aa		tax				tax
.2559					_ESCloneExit:
.2559	8a		txa				txa
.255a	a2 02		ldx #$02		ldx	#2
.255c	20 c3 31	jsr $31c3		jsr	stringHandler
.255f	aa		tax				tax
.2560	60		rts				rts
.2561					UnaryVal:
.2561	38		sec				sec 								; Carry set to return value
.2562	b0 01		bcs $2565			bcs 	ValueMain
.2564					UnaryIsVal:
.2564	18		clc				clc									; Carry clear to return legitimacy
.2565					ValueMain:
.2565	08		php				php 								; save results (CS is value, CC is validation)
.2566	20 07 28	jsr $2807			jsr 	EvaluateString
.2569	20 8f 25	jsr $258f			jsr 	ConvertGetBase 				; get base, if any.
.256c	98		tya				tya
.256d	48		pha				pha
.256e	20 76 1b	jsr $1b76			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2571	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2573	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2575	20 11 2c	jsr $2c11			jsr 	MInt32FromString 			; convert it back from a string.
.2578	b0 0c		bcs $2586			bcs 	_VMSuccess 					; successfully converted.
.257a	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.257c	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.257e	f0 00		beq $2580			beq 	_VMFailed 	 				; so we failed.
.2580					_VMFailed:
.2580	68		pla				pla
.2581	a8		tay				tay
.2582	28		plp				plp
.2583	4c a3 2d	jmp $2da3			jmp 	MInt32False 				; return 0 whatever.
.2586					_VMSuccess:
.2586	68		pla				pla
.2587	a8		tay				tay
.2588	28		plp				plp 								; if CS the it was val() so we want the value.
.2589	b0 03		bcs $258e			bcs 	_VMExit
.258b	4c 9f 2d	jmp $2d9f			jmp 	MInt32True 					; otherwise return true as successful.
.258e					_VMExit:
.258e	60		rts				rts
.258f					ConvertGetBase:
.258f	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2591	95 49		sta $49,x			sta 	esInt0+1,x
.2593	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2595	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2597	d0 0e		bne $25a7			bne 	_CGBDone 					; not found, should be )
.2599	e8		inx				inx 								; next level
.259a	c8		iny				iny 								; skip comma.
.259b	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger		; evaluate the base.
.259e	ca		dex				dex
.259f	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.25a1	90 08		bcc $25ab			bcc 	_CGBValue 					; (it should work as high as 37)
.25a3	c9 11		cmp #$11			cmp 	#17
.25a5	b0 04		bcs $25ab			bcs 	_CGBValue
.25a7					_CGBDone:
.25a7	20 16 2e	jsr $2e16			jsr 	CheckRightParen
.25aa	60		rts				rts
.25ab					_CGBValue:
.25ab	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.25ad	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.25b0					DereferenceTwo:
.25b0	e8		inx				inx
.25b1	20 b5 25	jsr $25b5			jsr 	DereferenceOne
.25b4	ca		dex				dex
.25b5					DereferenceOne:
.25b5	b5 40		lda $40,x			lda 	esType,x
.25b7	10 3d		bpl $25f6			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.25b9	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.25ba	b0 3b		bcs $25f7			bcs 	_DRFloatDeReference
.25bc	98		tya				tya
.25bd	48		pha				pha
.25be	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.25c0	85 2a		sta $2a				sta 	temp0
.25c2	b5 50		lda $50,x			lda 	esInt1,x
.25c4	85 2b		sta $2b				sta 	temp0+1
.25c6	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.25c8	95 50		sta $50,x			sta 	esInt1,x
.25ca	95 58		sta $58,x			sta 	esInt2,x
.25cc	95 60		sta $60,x			sta 	esInt3,x
.25ce	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.25d0	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.25d2	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.25d3	30 0d		bmi $25e2			bmi 	_DeRefString 				; string, 2 bytes only
.25d5	d0 11		bne $25e8			bne 	_DeRefByte 					; byte 1 byte only
.25d7					_DeRefLong:
.25d7	a0 03		ldy #$03			ldy 	#3
.25d9	b1 2a		lda ($2a),y			lda 	(temp0),y
.25db	95 60		sta $60,x			sta 	esInt3,x
.25dd	88		dey				dey
.25de	b1 2a		lda ($2a),y			lda 	(temp0),y
.25e0	95 58		sta $58,x			sta 	esInt2,x
.25e2					_DeRefString:
.25e2	a0 01		ldy #$01			ldy 	#1
.25e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.25e6	95 50		sta $50,x			sta 	esInt1,x
.25e8					_DeRefByte:
.25e8	a0 00		ldy #$00			ldy 	#0
.25ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.25ec	95 48		sta $48,x			sta 	esInt0,x
.25ee	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.25f0	29 40		and #$40			and 	#$40
.25f2	95 40		sta $40,x			sta 	esType,x
.25f4	68		pla				pla
.25f5	a8		tay				tay
.25f6					_DRNotReference
.25f6	60		rts				rts
.25f7					_DRFloatDereference:
.25f7	20 76 1b	jsr $1b76			jsr 	TOSToTemp0 					; address to deref in temp0
.25fa	8a		txa				txa
.25fb	a2 1c		ldx #$1c		ldx	#28
.25fd	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2600	aa		tax				tax
.2601	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2603	95 40		sta $40,x			sta 	esType,x
.2605	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2606					EvaluateLevel:
.2606	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2608	b0 1e		bcs $2628			bcs 	_ELStack
.260a	48		pha				pha 								; save precedence level.
.260b	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.260d	95 48		sta $48,x			sta 	esInt0,x
.260f	95 50		sta $50,x			sta 	esInt1,x
.2611	95 58		sta $58,x			sta 	esInt2,x
.2613	95 60		sta $60,x			sta 	esInt3,x
.2615	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.2617	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2619	30 26		bmi $2641			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.261b	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.261c	30 0f		bmi $262d			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.261e	8a		txa				txa 								; stack level in X
.261f	a2 00		ldx #$00		ldx	#0
.2621	20 c7 3c	jsr $3cc7		jsr	variableHandler
.2624	aa		tax				tax
.2625	4c 6a 26	jmp $266a			jmp		_ELHasTerm
.2628					_ELStack:
.2628	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.262a	20 b5 12	jsr $12b5		jsr	errorHandler
.262d					_ELIsConstant:
.262d	4a		lsr a				lsr 	a 							; get the value back
.262e	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2630	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.2632					_ELCheckNext:
.2632	c8		iny				iny 								; look at next
.2633	b1 28		lda ($28),y			lda 	(codePtr),y
.2635	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2637	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2639	b0 2f		bcs $266a			bcs 	_ELHasTerm 					; done getting the constant.
.263b	20 03 27	jsr $2703			jsr 	ELShiftByteIn 				; shift byte into position.
.263e	4c 32 26	jmp $2632			jmp 	_ELCheckNext
.2641					_ELIsToken:
.2641	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2643	f0 0f		beq $2654			beq 	_ELIsString
.2645	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2647	d0 5f		bne $26a8			bne 	_ELCheckUnary
.2649	8a		txa				txa 								; put X into A
.264a	c8		iny				iny 								; skip over the float marker
.264b	a2 18		ldx #$18		ldx	#24
.264d	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2650	aa		tax				tax 								; restore X
.2651	4c 6a 26	jmp $266a			jmp 	_ELHasTerm
.2654					_ELIsString:
.2654	98		tya				tya 								; address of string is codePtr+y+1
.2655	38		sec				sec
.2656	65 28		adc $28				adc 	codePtr
.2658	95 48		sta $48,x			sta 	esInt0,x
.265a	a5 29		lda $29				lda 	codePtr+1
.265c	69 00		adc #$00			adc 	#0
.265e	95 50		sta $50,x			sta 	esInt1,x
.2660	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2662	95 40		sta $40,x			sta 	esType,x
.2664	c8		iny				iny 								; skip over string.
.2665	98		tya				tya
.2666	38		sec				sec									; +1 for the length itself.
.2667	71 28		adc ($28),y			adc 	(codePtr),y
.2669	a8		tay				tay 								; and fall through to term loop code.
.266a					_ELHasTerm:
.266a	b1 28		lda ($28),y			lda 	(codePtr),y
.266c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.266e	90 04		bcc $2674			bcc 	_ELPopExit
.2670	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2672	90 02		bcc $2676			bcc 	_ELHasBinaryTerm
.2674					_ELPopExit:
.2674	68		pla				pla
.2675					_ELExit:
.2675	60		rts				rts
.2676					_ELHasBinaryTerm:
.2676	84 32		sty $32				sty 	tempShort 					; save position
.2678	a8		tay				tay 								; use token as an index and get the precedence.
.2679	b9 ab 26	lda $26ab,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.267c	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.267e	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2680	68		pla				pla 								; restore current level.
.2681	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2683	b0 f0		bcs $2675			bcs 	_ELExit
.2685	48		pha				pha 								; save current level back on the stack.
.2686	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2688	48		pha				pha
.2689	c8		iny				iny
.268a	e8		inx				inx 								; calculate the RHS at the operator precedence.
.268b	a5 32		lda $32				lda 	tempShort
.268d	20 06 26	jsr $2606			jsr 	EvaluateLevel
.2690	ca		dex				dex
.2691	68		pla				pla 								; get the operator back out.
.2692					_ELExecuteA:
.2692	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2694	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2695	aa		tax				tax
.2696	bd 6b 20	lda $206b,x			lda 	Group0Vectors,x
.2699	85 2a		sta $2a				sta 	temp0
.269b	bd 6c 20	lda $206c,x			lda 	Group0Vectors+1,x
.269e	85 2b		sta $2b				sta 	temp0+1
.26a0	a6 32		ldx $32				ldx 	tempShort
.26a2	20 ef 26	jsr $26ef			jsr 	_ELCallTemp0
.26a5	4c 6a 26	jmp $266a			jmp 	_ELHasTerm 					; and loop back round.
.26a8					_ELCheckUnary:
.26a8	c8		iny				iny 								; skip over token.
.26a9	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.26ab	f0 19		beq $26c6			beq 	_ELMinus
.26ad	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.26af	f0 2c		beq $26dd			beq 	_ELIndirect
.26b1	c9 98		cmp #$98			cmp 	#TKW_QMARK
.26b3	f0 28		beq $26dd			beq 	_ELIndirect
.26b5	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.26b7	f0 39		beq $26f2			beq 	_ELExtension
.26b9	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.26bb	90 04		bcc $26c1			bcc 	_ELUSyntax
.26bd	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.26bf	90 d1		bcc $2692			bcc 	_ELExecuteA 				; if so do that token.
.26c1					_ELUSyntax:
.26c1	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.26c3	20 b5 12	jsr $12b5		jsr	errorHandler
.26c6					_ELMinus:
.26c6	20 db 27	jsr $27db			jsr 	EvaluateNumericTerm 		; get a number to negate.
.26c9	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.26cb	f0 0a		beq $26d7			beq 	_ELMinusInteger
.26cd	8a		txa				txa
.26ce	a2 0c		ldx #$0c		ldx	#12
.26d0	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.26d3	aa		tax				tax
.26d4	4c 6a 26	jmp $266a			jmp 	_ELHasTerm
.26d7					_ELMinusInteger:
.26d7	20 5d 2d	jsr $2d5d			jsr 	MInt32Negate 				; do int negate
.26da	4c 6a 26	jmp $266a			jmp 	_ELHasTerm
.26dd					_ELIndirect:
.26dd	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.26de	20 e4 27	jsr $27e4			jsr 	EvaluateIntegerTerm 		; integer address
.26e1	68		pla				pla
.26e2	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.26e4	f0 02		beq $26e8			beq 	_ELHaveModifier
.26e6	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.26e8					_ELHaveModifier:
.26e8	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.26ea	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.26ec	4c 6a 26	jmp $266a			jmp 	_ELHasTerm
.26ef					_ELCallTemp0:
.26ef	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.26f2					_ELExtension:
.26f2	8a		txa				txa 								; stack pos in A
.26f3	20 93 15	jsr $1593		jsr	extensionHandler
.26f6	aa		tax				tax 								; restore stack
.26f7	4c 6a 26	jmp $266a			jmp 	_ELHasTerm
.26fa					UnaryParenthesis:
.26fa	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.26fc	20 06 26	jsr $2606			jsr 	EvaluateLevel
.26ff	20 16 2e	jsr $2e16			jsr 	CheckRightParen 			; check for )
.2702	60		rts				rts
.2703					ELShiftByteIn:
.2703	48		pha				pha 								; save bits to shift in.
.2704	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.2706	48		pha				pha
.2707	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.2709	95 60		sta $60,x			sta 	esInt3,x
.270b	b5 50		lda $50,x			lda 	esInt1,x
.270d	95 58		sta $58,x			sta 	esInt2,x
.270f	b5 48		lda $48,x			lda 	esInt0,x
.2711	95 50		sta $50,x			sta 	esInt1,x
.2713	a9 00		lda #$00			lda 	#0
.2715	95 48		sta $48,x			sta 	esInt0,x
.2717	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2718	29 03		and #$03			and 	#3 							; only want lower 2 bits
.271a	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.271c					_ELShiftLoop:
.271c	4a		lsr a				lsr 	a
.271d	76 60		ror $60,x			ror 	esInt3,x
.271f	76 58		ror $58,x			ror 	esInt2,x
.2721	76 50		ror $50,x			ror 	esInt1,x
.2723	76 48		ror $48,x			ror 	esInt0,x
.2725	c9 01		cmp #$01			cmp 	#1
.2727	d0 f3		bne $271c			bne 	_ELShiftLoop
.2729	68		pla				pla 								; get original 6 bit value and OR in.
.272a	29 3f		and #$3f			and 	#$3F
.272c	15 48		ora $48,x			ora 	esInt0,x
.272e	95 48		sta $48,x			sta 	esInt0,x
.2730	60		rts				rts
.2731					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2731	01					.byte	$01			; $86 and
>2732	01					.byte	$01			; $87 or
>2733	01					.byte	$01			; $88 xor
>2734	02					.byte	$02			; $89 >=
>2735	02					.byte	$02			; $8a <=
>2736	02					.byte	$02			; $8b >
>2737	02					.byte	$02			; $8c <
>2738	02					.byte	$02			; $8d =
>2739	02					.byte	$02			; $8e <>
>273a	03					.byte	$03			; $8f +
>273b	03					.byte	$03			; $90 -
>273c	04					.byte	$04			; $91 >>
>273d	04					.byte	$04			; $92 <<
>273e	04					.byte	$04			; $93 *
>273f	04					.byte	$04			; $94 /
>2740	04					.byte	$04			; $95 mod
>2741	05					.byte	$05			; $96 ^
>2742	06					.byte	$06			; $97 !
>2743	06					.byte	$06			; $98 ?
>2744	82					.byte	$82			; $99 repeat
>2745	82					.byte	$82			; $9a while
>2746	82					.byte	$82			; $9b for
>2747	82					.byte	$82			; $9c if
>2748	82					.byte	$82			; $9d defproc
>2749	80					.byte	$80			; $9e until
>274a	80					.byte	$80			; $9f wend
>274b	80					.byte	$80			; $a0 next
>274c	80					.byte	$80			; $a1 then
>274d	80					.byte	$80			; $a2 endif
>274e	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.274f					EventFunction:
.274f	20 45 28	jsr $2845			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2752	b5 40		lda $40,x			lda 	esType,x
.2754	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2756	d0 5b		bne $27b3			bne 	_EFType
.2758	20 23 2e	jsr $2e23			jsr 	CheckComma
.275b	e8		inx				inx
.275c	20 12 28	jsr $2812			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.275f	20 16 2e	jsr $2e16			jsr 	CheckRightParen 			; finish off with the right bracket
.2762	ca		dex				dex
.2763	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2765	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2767	15 58		ora $58,x			ora 	esInt2,x
.2769	15 60		ora $60,x			ora 	esInt3,x
.276b	d0 41		bne $27ae			bne 	_EFValue
.276d	98		tya				tya
.276e	48		pha				pha
.276f	8a		txa				txa
.2770	48		pha				pha
.2771	a2 1c		ldx #$1c		ldx	#28
.2773	20 94 12	jsr $1294		jsr	deviceHandler
.2776	84 2d		sty $2d				sty 	temp1+1
.2778	85 2c		sta $2c				sta 	temp1
.277a	68		pla				pla
.277b	aa		tax				tax
.277c	20 76 1b	jsr $1b76			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.277f	a0 03		ldy #$03			ldy 	#3							; if -ve
.2781	b1 2a		lda ($2a),y			lda 	(temp0),y
.2783	30 23		bmi $27a8			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2785	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2787	b1 2a		lda ($2a),y			lda 	(temp0),y
.2789	c8		iny				iny
.278a	11 2a		ora ($2a),y			ora 	(temp0),y
.278c	f0 17		beq $27a5			beq 	_EFInitialise 				; if so, initialise the value but return false.
.278e	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2790	38		sec				sec
.2791	b1 2a		lda ($2a),y			lda 	(temp0),y
.2793	e5 2c		sbc $2c				sbc 	temp1
.2795	c8		iny				iny
.2796	b1 2a		lda ($2a),y			lda 	(temp0),y
.2798	e5 2d		sbc $2d				sbc 	temp1+1
.279a	10 0c		bpl $27a8			bpl 	_EFFail 					; if trigger >= timer then return False
.279c	20 b8 27	jsr $27b8			jsr 	SetEventTimer 				; reset the timer for next time.
.279f	20 9f 2d	jsr $2d9f			jsr	 	MInt32True 					; and treutn true as fired.
.27a2	68		pla				pla
.27a3	a8		tay				tay
.27a4	60		rts				rts
.27a5					_EFInitialise:
.27a5	20 b8 27	jsr $27b8			jsr		SetEventTimer 				; set trigger time to time + elapsed
.27a8					_EFFail:
.27a8	68		pla				pla
.27a9	a8		tay				tay
.27aa	20 a3 2d	jsr $2da3			jsr 	MInt32False
.27ad	60		rts				rts
.27ae					_EFValue:
.27ae	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.27b0	20 b5 12	jsr $12b5		jsr	errorHandler
.27b3					_EFType:
.27b3	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.27b5	20 b5 12	jsr $12b5		jsr	errorHandler
.27b8					SetEventTimer:
.27b8	a0 00		ldy #$00			ldy 	#0
.27ba	18		clc				clc
.27bb	a5 2c		lda $2c				lda 	temp1
.27bd	75 49		adc $49,x			adc 	esInt0+1,x
.27bf	91 2a		sta ($2a),y			sta		(temp0),y
.27c1	c8		iny				iny
.27c2	a5 2d		lda $2d				lda 	temp1+1
.27c4	75 51		adc $51,x			adc 	esInt1+1,x
.27c6	91 2a		sta ($2a),y			sta		(temp0),y
.27c8	88		dey				dey
.27c9	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.27cb	d0 04		bne $27d1			bne 	_SETExit 					; zero means initialise.....
.27cd	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.27cf	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.27d1					_SETExit:
.27d1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.27d2					EvaluateTerm:
.27d2	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.27d4	20 06 26	jsr $2606			jsr 	EvaluateLevel
.27d7	20 b5 25	jsr $25b5			jsr 	DereferenceOne
.27da	60		rts				rts
.27db					EvaluateNumericTerm:
.27db	20 d2 27	jsr $27d2			jsr 	EvaluateTerm
.27de	b5 40		lda $40,x			lda 	esType,x
.27e0	0a		asl a				asl 	a 							; see if it's a string.
.27e1	30 09		bmi $27ec			bmi 	ENTType
.27e3	60		rts				rts
.27e4					EvaluateIntegerTerm:
.27e4	20 d2 27	jsr $27d2			jsr 	EvaluateTerm
.27e7	b5 40		lda $40,x			lda 	esType,x
.27e9	d0 01		bne $27ec			bne 	ENTType
.27eb	60		rts				rts
.27ec					ENTType:
.27ec	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.27ee	20 b5 12	jsr $12b5		jsr	errorHandler
.27f1					EvaluateRoot:
.27f1	a2 00		ldx #$00			ldx 	#0
.27f3					Evaluate:
.27f3	a9 00		lda #$00			lda 	#0
.27f5	20 06 26	jsr $2606			jsr 	EvaluateLevel
.27f8	20 b5 25	jsr $25b5			jsr 	DereferenceOne
.27fb	60		rts				rts
.27fc					EvaluateNumeric:
.27fc	20 f3 27	jsr $27f3			jsr 	Evaluate
.27ff	b5 40		lda $40,x			lda 	esType,x
.2801	0a		asl a				asl 	a 							; see if it's a string.
.2802	30 e8		bmi $27ec			bmi 	ENTType
.2804	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2805	4a		lsr a				lsr 	a
.2806	60		rts				rts
.2807					EvaluateString:
.2807	20 f3 27	jsr $27f3			jsr 	Evaluate
.280a	b5 40		lda $40,x			lda 	esType,x
.280c	0a		asl a				asl 	a 							; see if it's a string.
.280d	10 dd		bpl $27ec			bpl 	ENTType
.280f	60		rts				rts
.2810					EvaluateRootInteger:
.2810	a2 00		ldx #$00			ldx 	#0
.2812					EvaluateInteger:
.2812	20 f3 27	jsr $27f3			jsr 	Evaluate
.2815	b5 40		lda $40,x			lda 	esType,x
.2817	d0 d3		bne $27ec			bne 	ENTType
.2819	60		rts				rts
.281a					EvaluateSmallInteger:
.281a	20 12 28	jsr $2812			jsr 	EvaluateInteger
.281d	b5 50		lda $50,x			lda 	esInt1,x
.281f	15 58		ora $58,x			ora 	esInt2,x
.2821	15 60		ora $60,x			ora 	esInt3,x
.2823	d0 03		bne $2828			bne 	_ESIValue
.2825	b5 48		lda $48,x			lda 	esInt0,x
.2827	60		rts				rts
.2828					_ESIValue:
.2828	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.282a	20 b5 12	jsr $12b5		jsr	errorHandler
.282d					LinkEvaluate:
.282d	aa		tax				tax
.282e	20 f3 27	jsr $27f3			jsr 	Evaluate
.2831	8a		txa				txa
.2832	60		rts				rts
.2833					LinkEvaluateTerm:
.2833	aa		tax				tax
.2834	20 d2 27	jsr $27d2			jsr 	EvaluateTerm
.2837	8a		txa				txa
.2838	60		rts				rts
.2839					LinkEvaluateInteger:
.2839	aa		tax				tax
.283a	20 12 28	jsr $2812			jsr 	EvaluateInteger
.283d	8a		txa				txa
.283e	60		rts				rts
.283f					LinkEvaluateSmallInt:
.283f	aa		tax				tax
.2840	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger
.2843	8a		txa				txa
.2844	60		rts				rts
.2845					EvaluateReference:
.2845	ad 42 27	lda $2742			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2848	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2849	e9 01		sbc #$01			sbc 	#1
.284b	20 06 26	jsr $2606			jsr 	EvaluateLevel
.284e	b5 40		lda $40,x			lda 	esType,x
.2850	10 01		bpl $2853			bpl 	_ERFail
.2852	60		rts				rts
.2853					_ERFail:
.2853	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2855	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2858					UnaryLen:
.2858	20 66 28	jsr $2866			jsr 	ULStart
.285b					ULFinish:
.285b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.285d	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.285f	20 b2 2d	jsr $2db2			jsr 	MInt32Set8Bit 				; write it out.
.2862	20 16 2e	jsr $2e16			jsr 	CheckRightParen
.2865	60		rts				rts
.2866	20 07 28	jsr $2807	ULStart:jsr 	EvaluateString
.2869	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.286b	85 2a		sta $2a				sta 	temp0
.286d	b5 50		lda $50,x			lda 	esInt1,x
.286f	85 2b		sta $2b				sta 	temp0+1
.2871	84 32		sty $32				sty 	tempShort 					; get length
.2873	a0 00		ldy #$00			ldy 	#0
.2875	60		rts				rts
.2876					UnaryAsc:
.2876	20 66 28	jsr $2866			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2879	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.287b	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.287c	c9 00		cmp #$00			cmp 	#0
.287e	d0 db		bne $285b			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2880	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2882	20 b5 12	jsr $12b5		jsr	errorHandler
.2885					UnaryAbs:
.2885	20 fc 27	jsr $27fc			jsr 	EvaluateNumeric 			; some numeric value
.2888	b0 07		bcs $2891			bcs 	_UAFloat 					; CS then float, so use that function
.288a	20 58 2d	jsr $2d58			jsr 	MInt32Absolute 				; int version
.288d	20 16 2e	jsr $2e16			jsr 	CheckRightParen
.2890	60		rts				rts
.2891					_UAFloat:
.2891	8a		txa				txa 								; float version
.2892	a2 00		ldx #$00		ldx	#0
.2894	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2897	aa		tax				tax
.2898	20 16 2e	jsr $2e16			jsr 	CheckRightParen
.289b	60		rts				rts
.289c					UnarySgn:
.289c	20 fc 27	jsr $27fc			jsr 	EvaluateNumeric 			; same as above but sign of value
.289f	b0 07		bcs $28a8			bcs 	_USFloat
.28a1	20 90 2d	jsr $2d90			jsr 	MInt32Sign
.28a4	20 16 2e	jsr $2e16			jsr 	CheckRightParen
.28a7	60		rts				rts
.28a8					_USFloat:
.28a8	8a		txa				txa
.28a9	a2 0e		ldx #$0e		ldx	#14
.28ab	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.28ae	aa		tax				tax
.28af	20 16 2e	jsr $2e16			jsr 	CheckRightParen
.28b2	60		rts				rts
.28b3					UnaryPeek:
.28b3	20 df 28	jsr $28df			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.28b6	4c d3 28	jmp $28d3			jmp 	PDLByte0
.28b9					UnaryDeek:
.28b9	20 df 28	jsr $28df			jsr 	PDLCode
.28bc	4c cd 28	jmp $28cd			jmp 	PDLByte1
.28bf					UnaryLeek:
.28bf	20 df 28	jsr $28df			jsr 	PDLCode
.28c2	a0 03		ldy #$03			ldy 	#3							; read 3-2
.28c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.28c6	95 60		sta $60,x			sta 	esInt3,x
.28c8	88		dey				dey
.28c9	b1 2a		lda ($2a),y			lda 	(temp0),y
.28cb	95 58		sta $58,x			sta 	esInt2,x
.28cd					PDLByte1:
.28cd	a0 01		ldy #$01			ldy 	#1
.28cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.28d1	95 50		sta $50,x			sta 	esInt1,x
.28d3					PDLByte0:
.28d3	a0 00		ldy #$00			ldy 	#0
.28d5	b1 2a		lda ($2a),y			lda 	(temp0),y
.28d7	95 48		sta $48,x			sta 	esInt0,x
.28d9	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.28db	20 16 2e	jsr $2e16			jsr 	CheckRightParen 			; check right and return
.28de	60		rts				rts
.28df					PDLCode:
.28df	20 12 28	jsr $2812			jsr 	EvaluateInteger 			; some address
.28e2	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.28e4	85 2a		sta $2a				sta 	temp0
.28e6	b5 50		lda $50,x			lda 	esInt1,x
.28e8	85 2b		sta $2b				sta 	temp0+1
.28ea	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.28ec	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.28ee	95 58		sta $58,x			sta 	esInt2,x
.28f0	95 60		sta $60,x			sta 	esInt3,x
.28f2	84 32		sty $32				sty 	tempShort 					; save Y
.28f4	60		rts				rts
.28f5					Unary_Random:
.28f5	20 d3 2d	jsr $2dd3			jsr 	MInt32Random 				; generate random number.
.28f8	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.28fa	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.28fc	f0 08		beq $2906			beq 	_URExit
.28fe	e8		inx				inx 								; load range 0..r-1 into +1
.28ff	20 12 28	jsr $2812			jsr 	EvaluateInteger
.2902	ca		dex				dex
.2903	20 f6 2b	jsr $2bf6			jsr 	MInt32Modulus 				; calculate random % modulus
.2906					_URExit:
.2906	20 16 2e	jsr $2e16			jsr 	CheckRightParen 			; check right and return
.2909	60		rts				rts
.290a					Unary_Min:
.290a	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.290c	d0 02		bne $2910			bne 	UnaryMBody
.290e					Unary_Max:
.290e	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2910					UnaryMBody:
.2910	48		pha				pha 								; save comparator on stack, shows min or max
.2911	20 f3 27	jsr $27f3			jsr 	Evaluate 					; get the first thing to check
.2914					_UnaryMLoop:
.2914	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2916	c8		iny				iny
.2917	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2919	f0 09		beq $2924			beq 	_UnaryMExit
.291b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.291d	f0 07		beq $2926			beq 	_UnaryMCompare
.291f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2921	20 b5 12	jsr $12b5		jsr	errorHandler
.2924					_UnaryMExit:
.2924	68		pla				pla 								; done so throw comparator and return.
.2925	60		rts				rts
.2926					_UnaryMCompare:
.2926	e8		inx				inx 								; get the 2nd thing to evaluate
.2927	20 f3 27	jsr $27f3			jsr 	Evaluate
.292a	ca		dex				dex
.292b	20 b8 24	jsr $24b8			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.292e	85 32		sta $32				sta 	tempShort 					; save result
.2930	68		pla				pla 								; get what we need
.2931	48		pha				pha
.2932	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2934	d0 de		bne $2914			bne 	_UnaryMLoop 				; no, try another value.
.2936	20 a3 2d	jsr $2da3			jsr 	MInt32False 				; promote 2nd to 1st.
.2939	20 87 2c	jsr $2c87			jsr 	MInt32Add
.293c	4c 14 29	jmp $2914			jmp 	_UnaryMLoop
.293f					Unary_Page:
.293f	20 a3 2d	jsr $2da3			jsr 	MInt32False 				; zero
.2942	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2945	95 48		sta $48,x			sta 	esInt0,x
.2947	ad c9 0a	lda $0ac9			lda 	basePage+1
.294a	95 50		sta $50,x			sta 	esInt1,x
.294c	60		rts				rts
.294d					UnaryReference:
.294d	a9 0f		lda #$0f			lda 	#15
.294f	20 06 26	jsr $2606			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2952	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2954	10 05		bpl $295b			bpl 	UType
.2956	a9 00		lda #$00			lda 	#0 							; make it an integer
.2958	95 40		sta $40,x			sta 	esType,x
.295a	60		rts				rts
.295b					UType:
.295b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.295d	20 b5 12	jsr $12b5		jsr	errorHandler
.2960					UnaryHexMarker:
.2960	4c e4 27	jmp $27e4			jmp 	EvaluateIntegerTerm
.2963					UnaryComplement:
.2963	20 e4 27	jsr $27e4			jsr 	EvaluateIntegerTerm
.2966	20 77 2d	jsr $2d77			jsr 	MInt32Not
.2969	60		rts				rts
.296a					UnaryIntToFloat:
.296a	20 fc 27	jsr $27fc			jsr 	EvaluateNumeric				; some number
.296d	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.296f	d0 0b		bne $297c			bne 	_UIFExit
.2971	8a		txa				txa 								; convert and set type
.2972	a2 1a		ldx #$1a		ldx	#26
.2974	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.2977	aa		tax				tax
.2978	a9 01		lda #$01			lda 	#1
.297a	95 40		sta $40,x			sta 	esType,x
.297c					_UIFExit:
.297c	60		rts				rts
.297d					UnaryFloatToInt:
.297d	20 fc 27	jsr $27fc			jsr 	EvaluateNumeric 			; the number
.2980	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2982	f0 0b		beq $298f			beq 	_UFIExit
.2984	8a		txa				txa 								; convert to int
.2985	a2 12		ldx #$12		ldx	#18
.2987	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.298a	aa		tax				tax
.298b	a9 00		lda #$00			lda 	#0 							; set type
.298d	95 40		sta $40,x			sta 	esType,x
.298f					_UFIExit:
.298f	60		rts				rts
.2990					UnaryAlloc:
.2990	e8		inx				inx 								; evaluate memory required
.2991	20 12 28	jsr $2812			jsr 	EvaluateInteger
.2994	20 16 2e	jsr $2e16			jsr 	CheckRightParen
.2997	ca		dex				dex
.2998	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.299a	15 61		ora $61,x			ora 	esInt3+1,x
.299c	d0 1d		bne $29bb			bne 	_UABadValue
.299e	20 a3 2d	jsr $2da3			jsr 	MInt32False					; zero return.
.29a1	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.29a3	95 50		sta $50,x			sta 	esInt1,x
.29a5	a5 35		lda $35				lda 	lowMemory
.29a7	95 48		sta $48,x			sta 	esInt0,x
.29a9	18		clc				clc 								; add alloc required.
.29aa	75 49		adc $49,x			adc 	esInt0+1,x
.29ac	85 35		sta $35				sta 	lowMemory
.29ae	a5 36		lda $36				lda 	lowMemory+1
.29b0	75 51		adc $51,x			adc 	esInt1+1,x
.29b2	85 36		sta $36				sta 	lowMemory+1
.29b4	b0 05		bcs $29bb			bcs		_UABadValue 				; overflow definitely bad.
.29b6	c5 34		cmp $34				cmp 	highMemory+1
.29b8	b0 01		bcs $29bb			bcs 	_UABadValue 				; out of memory bad.
.29ba	60		rts				rts
.29bb					_UABadValue:
.29bb	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.29bd	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.29c0					UnaryTimer:
.29c0	20 16 2e	jsr $2e16			jsr 	CheckRightParen 			; no parameters
.29c3	98		tya				tya
.29c4	48		pha				pha
.29c5	20 ca 2d	jsr $2dca			jsr 	MInt32Zero 					; zero result
.29c8	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.29ca	a2 1c		ldx #$1c		ldx	#28
.29cc	20 94 12	jsr $1294		jsr	deviceHandler
.29cf	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.29d1	95 48		sta $48,x			sta 	esInt0,x
.29d3	98		tya				tya
.29d4	95 50		sta $50,x			sta 	esInt1,x
.29d6	68		pla				pla
.29d7	a8		tay				tay
.29d8	60		rts				rts
.29d9					UnaryInkey:
.29d9	20 16 2e	jsr $2e16			jsr 	CheckRightParen
.29dc	86 2a		stx $2a				stx 	temp0
.29de	a2 0a		ldx #$0a		ldx	#10
.29e0	20 94 12	jsr $1294		jsr	deviceHandler
.29e3	a6 2a		ldx $2a				ldx 	temp0
.29e5	20 b2 2d	jsr $2db2			jsr 	MInt32Set8Bit
.29e8	60		rts				rts
.29e9					UnaryGet:
.29e9	20 16 2e	jsr $2e16			jsr 	CheckRightParen
.29ec	86 2a		stx $2a				stx 	temp0
.29ee					_UGLoop:
.29ee	a2 00		ldx #$00		ldx	#0
.29f0	20 94 12	jsr $1294		jsr	deviceHandler
.29f3	a2 0a		ldx #$0a		ldx	#10
.29f5	20 94 12	jsr $1294		jsr	deviceHandler
.29f8	c9 00		cmp #$00			cmp 	#0
.29fa	f0 f2		beq $29ee			beq 	_UGLoop
.29fc	a6 2a		ldx $2a				ldx 	temp0
.29fe	20 b2 2d	jsr $2db2			jsr 	MInt32Set8Bit
.2a01	60		rts				rts
.2a02					UnaryGetString:
.2a02	20 e9 29	jsr $29e9			jsr 	UnaryGet
.2a05					UGSDoChr:
.2a05	4c 56 2a	jmp $2a56			jmp 	ChrCode
.2a08					UnaryInkeyString:
.2a08	20 d9 29	jsr $29d9			jsr 	UnaryInkey
.2a0b	b5 48		lda $48,x			lda 	esInt0,x
.2a0d	d0 f6		bne $2a05			bne 	UGSDoChr
.2a0f	8a		txa				txa
.2a10	a2 06		ldx #$06		ldx	#6
.2a12	20 c3 31	jsr $31c3		jsr	stringHandler
.2a15	aa		tax				tax
.2a16	60		rts				rts
.2a17					UnarySys:
.2a17	20 12 28	jsr $2812			jsr 	EvaluateInteger 				; get the address
.2a1a	20 16 2e	jsr $2e16			jsr 	CheckRightParen
.2a1d	20 76 1b	jsr $1b76			jsr 	TOSToTemp0 						; copy call address to temp0
.2a20	8a		txa				txa
.2a21	48		pha				pha
.2a22	98		tya				tya
.2a23	48		pha				pha
.2a24	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2a27	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2a2a	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2a2d	20 3c 2a	jsr $2a3c			jsr 	_CallTemp0
.2a30	85 32		sta $32				sta 	tempShort 						; restore YX
.2a32	68		pla				pla
.2a33	a8		tay				tay
.2a34	68		pla				pla
.2a35	aa		tax				tax
.2a36	a5 32		lda $32				lda 	tempShort
.2a38	20 b2 2d	jsr $2db2			jsr 	MInt32Set8Bit 					; return result.
.2a3b	60		rts				rts
.2a3c					_CallTemp0:
.2a3c	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2a3f					UnaryMem:
.2a3f	20 a3 2d	jsr $2da3			jsr 	MInt32False 					; set to false (e.g. 0)
.2a42	38		sec				sec
.2a43	a5 33		lda $33				lda 	highMemory 						; calculate value
.2a45	e5 35		sbc $35				sbc 	lowMemory
.2a47	95 48		sta $48,x			sta 	esInt0,x
.2a49	a5 34		lda $34				lda 	highMemory+1
.2a4b	e5 36		sbc $36				sbc 	lowMemory+1
.2a4d	95 50		sta $50,x			sta 	esInt1,x
.2a4f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.2a50					ExecChr:
.2a50	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger		; character number 0-255
.2a53	20 16 2e	jsr $2e16			jsr 	CheckRightParen				; right bracket
.2a56					ChrCode:
.2a56	98		tya				tya
.2a57	48		pha				pha
.2a58	8a		txa				txa 								; A = stack
.2a59	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.2a5b	a2 00		ldx #$00		ldx	#0
.2a5d	20 c3 31	jsr $31c3		jsr	stringHandler
.2a60	aa		tax				tax 								; X = stack
.2a61	68		pla				pla
.2a62	a8		tay				tay
.2a63	60		rts				rts
.2a64					ExecLower:
.2a64	38		sec				sec 								; set carry is lower
.2a65	b0 01		bcs $2a68			bcs 	ExecUpperLower
.2a67					ExecUpper:
.2a67	18		clc				clc 								; clear carry is upper
.2a68					ExecUpperLower:
.2a68	08		php				php 								; save carry
.2a69	20 07 28	jsr $2807			jsr 	EvaluateString 				; string to stack,X
.2a6c	20 16 2e	jsr $2e16			jsr 	CheckRightParen 			; check closing right bracket.
.2a6f	28		plp				plp 								; restore carry, save Y
.2a70	98		tya				tya
.2a71	48		pha				pha
.2a72	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2a74	2a		rol a				rol 	a
.2a75	a8		tay				tay 								; now in Y
.2a76	8a		txa				txa 								; do the substring and exit.
.2a77	a2 0a		ldx #$0a		ldx	#10
.2a79	20 c3 31	jsr $31c3		jsr	stringHandler
.2a7c	aa		tax				tax
.2a7d	68		pla				pla
.2a7e	a8		tay				tay
.2a7f	60		rts				rts
.2a80					ExecLeft:
.2a80	20 07 28	jsr $2807			jsr 	EvaluateString 				; string to stack,X
.2a83	20 23 2e	jsr $2e23			jsr 	CheckComma
.2a86	e8		inx				inx
.2a87	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2a89	20 b2 2d	jsr $2db2			jsr 	MInt32Set8Bit
.2a8c	e8		inx				inx
.2a8d	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2a90					ExecSubstring:
.2a90	ca		dex				dex 								; fix up X
.2a91	ca		dex				dex
.2a92	20 16 2e	jsr $2e16			jsr 	CheckRightParen 			; check closing right bracket.
.2a95	8a		txa				txa 								; do the substring and exit.
.2a96	a2 0c		ldx #$0c		ldx	#12
.2a98	20 c3 31	jsr $31c3		jsr	stringHandler
.2a9b	aa		tax				tax
.2a9c	60		rts				rts
.2a9d					ExecMid:
.2a9d	20 07 28	jsr $2807			jsr 	EvaluateString 				; string to stack,X
.2aa0	20 23 2e	jsr $2e23			jsr 	CheckComma
.2aa3	e8		inx				inx
.2aa4	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2aa7	c9 00		cmp #$00			cmp 	#0
.2aa9	f0 15		beq $2ac0			beq 	_EMValue
.2aab	e8		inx				inx
.2aac	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2aae	20 b2 2d	jsr $2db2			jsr 	MInt32Set8Bit
.2ab1	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2ab3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2ab5	f0 d9		beq $2a90			beq 	ExecSubString
.2ab7	20 23 2e	jsr $2e23			jsr 	CheckComma
.2aba	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2abd	4c 90 2a	jmp $2a90			jmp 	ExecSubString
.2ac0					_EMValue:
.2ac0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ac2	20 b5 12	jsr $12b5		jsr	errorHandler
.2ac5					ExecRight:
.2ac5	20 07 28	jsr $2807			jsr 	EvaluateString 				; string to stack,X
.2ac8	20 23 2e	jsr $2e23			jsr 	CheckComma
.2acb	e8		inx				inx
.2acc	20 1a 28	jsr $281a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2acf	ca		dex				dex
.2ad0	98		tya				tya
.2ad1	48		pha				pha
.2ad2	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2ad4	85 2a		sta $2a				sta 	temp0
.2ad6	b5 50		lda $50,x			lda 	esInt1,x
.2ad8	85 2b		sta $2b				sta 	temp0+1
.2ada	a0 00		ldy #$00			ldy 	#0 							; point to length
.2adc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2ade	18		clc				clc 								; add 1.
.2adf	69 01		adc #$01			adc 	#1
.2ae1	38		sec				sec
.2ae2	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2ae4	f0 02		beq $2ae8			beq		_ERMake1 					; if zero, make it 1.
.2ae6	b0 02		bcs $2aea			bcs		_EROkay
.2ae8					_ERMake1:
.2ae8	a9 01		lda #$01			lda 	#1 							; start position.
.2aea					_EROkay:
.2aea	e8		inx				inx 								; set start pos.
.2aeb	95 48		sta $48,x			sta 	esInt0,x
.2aed	e8		inx				inx
.2aee	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2af0	20 b2 2d	jsr $2db2			jsr 	MInt32Set8Bit
.2af3	68		pla				pla
.2af4	a8		tay				tay
.2af5	4c 90 2a	jmp $2a90			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2af8					MInt32And:
.2af8	b5 48		lda $48,x			lda 	esInt0,x
.2afa	35 49		and $49,x			and 	esInt0+1,x
.2afc	95 48		sta $48,x			sta 	esInt0,x
.2afe	b5 50		lda $50,x			lda 	esInt1,x
.2b00	35 51		and $51,x			and 	esInt1+1,x
.2b02	95 50		sta $50,x			sta 	esInt1,x
.2b04	b5 58		lda $58,x			lda 	esInt2,x
.2b06	35 59		and $59,x			and 	esInt2+1,x
.2b08	95 58		sta $58,x			sta 	esInt2,x
.2b0a	b5 60		lda $60,x			lda 	esInt3,x
.2b0c	35 61		and $61,x			and 	esInt3+1,x
.2b0e	95 60		sta $60,x			sta 	esInt3,x
.2b10	60		rts				rts
.2b11					MInt32Or:
.2b11	b5 48		lda $48,x			lda 	esInt0,x
.2b13	15 49		ora $49,x			ora 	esInt0+1,x
.2b15	95 48		sta $48,x			sta 	esInt0,x
.2b17	b5 50		lda $50,x			lda 	esInt1,x
.2b19	15 51		ora $51,x			ora 	esInt1+1,x
.2b1b	95 50		sta $50,x			sta 	esInt1,x
.2b1d	b5 58		lda $58,x			lda 	esInt2,x
.2b1f	15 59		ora $59,x			ora 	esInt2+1,x
.2b21	95 58		sta $58,x			sta 	esInt2,x
.2b23	b5 60		lda $60,x			lda 	esInt3,x
.2b25	15 61		ora $61,x			ora 	esInt3+1,x
.2b27	95 60		sta $60,x			sta 	esInt3,x
.2b29	60		rts				rts
.2b2a					MInt32Xor:
.2b2a	b5 48		lda $48,x			lda 	esInt0,x
.2b2c	55 49		eor $49,x			eor 	esInt0+1,x
.2b2e	95 48		sta $48,x			sta 	esInt0,x
.2b30	b5 50		lda $50,x			lda 	esInt1,x
.2b32	55 51		eor $51,x			eor 	esInt1+1,x
.2b34	95 50		sta $50,x			sta 	esInt1,x
.2b36	b5 58		lda $58,x			lda 	esInt2,x
.2b38	55 59		eor $59,x			eor 	esInt2+1,x
.2b3a	95 58		sta $58,x			sta 	esInt2,x
.2b3c	b5 60		lda $60,x			lda 	esInt3,x
.2b3e	55 61		eor $61,x			eor 	esInt3+1,x
.2b40	95 60		sta $60,x			sta 	esInt3,x
.2b42	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2b43					MInt32Compare:
.2b43	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2b45	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2b47	d0 13		bne $2b5c			bne 	MInt32Compare2
.2b49	b5 50		lda $50,x			lda 	esInt1,x
.2b4b	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2b4d	d0 0d		bne $2b5c			bne 	MInt32Compare2
.2b4f	b5 58		lda $58,x			lda 	esInt2,x
.2b51	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2b53	d0 07		bne $2b5c			bne 	MInt32Compare2
.2b55	b5 60		lda $60,x			lda 	esInt3,x
.2b57	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2b59	d0 01		bne $2b5c			bne 	MInt32Compare2
.2b5b	60		rts				rts
.2b5c					MInt32Compare2:
.2b5c	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2b5e	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2b60	b5 50		lda $50,x			lda		esInt1,x
.2b62	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2b64	b5 58		lda $58,x			lda		esInt2,x
.2b66	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2b68	b5 60		lda $60,x			lda		esInt3,x
.2b6a	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2b6c	50 02		bvc $2b70			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2b6e	49 80		eor #$80			eor 	#$80
.2b70					_I32LNoOverflow
.2b70	30 03		bmi $2b75			bmi 	MInt32CLess					; if -ve then return $FF
.2b72	a9 01		lda #$01			lda 	#$01						; else return $01
.2b74	60		rts				rts
.2b75					MInt32CLess:
.2b75	a9 ff		lda #$ff			lda 	#$FF
.2b77	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2b78					MInt32SDivide:
.2b78	98		tya				tya  								; save Y, which is the count of negations
.2b79	48		pha				pha
.2b7a	a0 00		ldy #$00			ldy 	#0 							; zero count
.2b7c	20 94 2b	jsr $2b94			jsr 	_MInt32SRemSign 			; unsign TOS
.2b7f	e8		inx				inx 								; unsign TOS+1
.2b80	20 94 2b	jsr $2b94			jsr 	_MInt32SRemSign
.2b83	ca		dex				dex
.2b84	98		tya				tya 								; save sign count on stack
.2b85	48		pha				pha
.2b86	20 9d 2b	jsr $2b9d			jsr 	MInt32UDivide 				; unsigned division
.2b89	68		pla				pla 								; get sign count back
.2b8a	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2b8c	f0 03		beq $2b91			beq 	_I32SNoNeg
.2b8e	20 5d 2d	jsr $2d5d			jsr 	MInt32Negate
.2b91					_I32SNoNeg:
.2b91	68		pla				pla 								; restoe Y and exit
.2b92	a8		tay				tay
.2b93	60		rts				rts
.2b94					_MInt32SRemSign:
.2b94	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2b96	10 04		bpl $2b9c			bpl 	_MInt32SRSExit
.2b98	c8		iny				iny 								; increment the sign count
.2b99	20 5d 2d	jsr $2d5d			jsr 	MInt32Negate 				; negate the value.
.2b9c					_MInt32SRSExit:
.2b9c	60		rts				rts
.2b9d					MInt32UDivide:
.2b9d	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2b9f	15 51		ora $51,x			ora 	esInt1+1,x
.2ba1	15 52		ora $52,x			ora 	esInt1+2,x
.2ba3	15 53		ora $53,x			ora 	esInt1+3,x
.2ba5	f0 4a		beq $2bf1			beq 	_MInt32DZero
.2ba7	e8		inx				inx 								; clear A
.2ba8	e8		inx				inx
.2ba9	20 a3 2d	jsr $2da3			jsr 	MInt32False
.2bac	ca		dex				dex
.2bad	ca		dex				dex
.2bae	98		tya				tya 								; save Y on the stack
.2baf	48		pha				pha
.2bb0	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2bb2					_MInt32UDLoop:
.2bb2	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2bb4	36 50		rol $50,x			rol 	esInt1,x
.2bb6	36 58		rol $58,x			rol 	esInt2,x
.2bb8	36 60		rol $60,x			rol 	esInt3,x
.2bba	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2bbc	36 52		rol $52,x			rol 	esInt1+2,x
.2bbe	36 5a		rol $5a,x			rol 	esInt2+2,x
.2bc0	36 62		rol $62,x			rol 	esInt3+2,x
.2bc2	38		sec				sec 								; calculate A-M saving result on the stack
.2bc3	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2bc5	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2bc7	48		pha				pha
.2bc8	b5 52		lda $52,x			lda 	esInt1+2,x
.2bca	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2bcc	48		pha				pha
.2bcd	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2bcf	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2bd1	48		pha				pha
.2bd2	b5 62		lda $62,x			lda 	esInt3+2,x
.2bd4	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2bd6	90 10		bcc $2be8			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2bd8	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2bda	68		pla				pla
.2bdb	95 5a		sta $5a,x			sta 	esInt2+2,x
.2bdd	68		pla				pla
.2bde	95 52		sta $52,x			sta 	esInt1+2,x
.2be0	68		pla				pla
.2be1	95 4a		sta $4a,x			sta 	esInt0+2,x
.2be3	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2be5	4c eb 2b	jmp $2beb			jmp 	_MInt32Next 					; do the next iteration
.2be8					_MInt32NoSubtract:
.2be8	68		pla				pla
.2be9	68		pla				pla
.2bea	68		pla				pla
.2beb					_MInt32Next:
.2beb	88		dey				dey 								; do this 32 times.
.2bec	d0 c4		bne $2bb2			bne 	_MInt32UDLoop
.2bee	68		pla				pla 								; restore Y and exit
.2bef	a8		tay				tay
.2bf0	60		rts				rts
.2bf1					_MInt32DZero:
.2bf1	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2bf3	20 b5 12	jsr $12b5		jsr	errorHandler
.2bf6					MInt32Modulus:
.2bf6	20 9d 2b	jsr $2b9d			jsr 	MInt32UDivide 				; do the division.
.2bf9	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2bfb	95 60		sta $60,x			sta 	esInt3,x
.2bfd	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2bff	95 58		sta $58,x			sta 	esInt2,x
.2c01	b5 52		lda $52,x			lda 	esInt1+2,x
.2c03	95 50		sta $50,x			sta 	esInt1,x
.2c05	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2c07	95 48		sta $48,x			sta 	esInt0,x
.2c09	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c12					fs32Length:
>0c12							.fill 	1
.2c0a					LinkInt32FromString:
.2c0a	aa		tax				tax
.2c0b	98		tya				tya
.2c0c	20 11 2c	jsr $2c11			jsr 	MInt32FromString
.2c0f	8a		txa				txa
.2c10	60		rts				rts
.2c11					MInt32FromString:
.2c11	85 32		sta $32				sta 	tempShort 					; save base
.2c13	98		tya				tya
.2c14	48		pha				pha
.2c15	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2c17	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c19	8d 12 0c	sta $0c12			sta 	fs32Length
.2c1c	f0 65		beq $2c83			beq 	_I32FSFail2					; fail if length zero.
.2c1e	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2c20	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2c22	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2c24	d0 09		bne $2c2f			bne 	_I32FSNotNegative
.2c26	ad 12 0c	lda $0c12			lda 	fs32Length 					; get length back.
.2c29	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2c2b	f0 56		beq $2c83			beq 	_I32FSFail2
.2c2d	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2c2f					_I32FSNotNegative:
.2c2f	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2c31	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2c33	d0 02		bne $2c37			bne 	_I32FSNN2
.2c35	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2c37					_I32FSNN2:
.2c37	48		pha				pha 								; save base + final sign on stack.
.2c38	20 a3 2d	jsr $2da3			jsr 	MInt32False 				; zero the return value.
.2c3b					_I32FSMainLoop:
.2c3b	68		pla				pla 								; get the base back into tempShort
.2c3c	48		pha				pha
.2c3d	29 7f		and #$7f			and 	#$7F
.2c3f	85 32		sta $32				sta 	tempShort
.2c41	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2c43	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2c45	90 02		bcc $2c49			bcc 	_I32FSNotLC
.2c47	e9 20		sbc #$20			sbc 	#32
.2c49					_I32FSNotLC:
.2c49	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2c4a	e9 30		sbc #$30			sbc 	#"0"
.2c4c	90 34		bcc $2c82			bcc 	_I32FSFail 					; nothing more to do.
.2c4e	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2c50	90 06		bcc $2c58			bcc 	_I32FSValidate
.2c52	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2c54	90 2c		bcc $2c82			bcc 	_I32FSFail
.2c56	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2c58					_I32FSValidate:
.2c58	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2c5a	b0 26		bcs $2c82			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2c5c	48		pha				pha 								; save the new digit value.
.2c5d	e8		inx				inx 								; put base into next slot up on stack
.2c5e	a5 32		lda $32				lda 	tempShort
.2c60	20 b2 2d	jsr $2db2			jsr 	MInt32Set8Bit
.2c63	ca		dex				dex
.2c64	20 bb 2c	jsr $2cbb			jsr 	MInt32Multiply 				; multiply current by the base
.2c67	e8		inx				inx
.2c68	68		pla				pla  								; put additive into next slot
.2c69	20 b2 2d	jsr $2db2			jsr 	MInt32Set8Bit
.2c6c	ca		dex				dex
.2c6d	20 87 2c	jsr $2c87			jsr 	MInt32Add 					; and add it
.2c70	c8		iny				iny 								; bump the character pointer
.2c71	cc 12 0c	cpy $0c12			cpy 	fs32Length 					; until > length.
.2c74	f0 c5		beq $2c3b			beq 	_I32FSMainLoop
.2c76	90 c3		bcc $2c3b			bcc 	_I32FSMainLoop
.2c78					_I32FSDone:
.2c78	68		pla				pla 								; get base/final sign back
.2c79	10 03		bpl $2c7e			bpl 	_I32FSNN3
.2c7b	20 5d 2d	jsr $2d5d			jsr 	MInt32Negate 				; negate the result.
.2c7e					_I32FSNN3:
.2c7e	68		pla				pla
.2c7f	a8		tay				tay
.2c80	38		sec				sec
.2c81	60		rts				rts
.2c82					_I32FSFail:
.2c82	68		pla				pla
.2c83					_I32FSFail2:
.2c83	68		pla				pla
.2c84	a8		tay				tay
.2c85	18		clc				clc
.2c86	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2c87					MInt32Add:
.2c87	18		clc				clc
.2c88	b5 48		lda $48,x			lda 	esInt0,x
.2c8a	75 49		adc $49,x			adc 	esInt0+1,x
.2c8c	95 48		sta $48,x			sta 	esInt0,x
.2c8e	b5 50		lda $50,x			lda 	esInt1,x
.2c90	75 51		adc $51,x			adc 	esInt1+1,x
.2c92	95 50		sta $50,x			sta 	esInt1,x
.2c94	b5 58		lda $58,x			lda 	esInt2,x
.2c96	75 59		adc $59,x			adc 	esInt2+1,x
.2c98	95 58		sta $58,x			sta 	esInt2,x
.2c9a	b5 60		lda $60,x			lda 	esInt3,x
.2c9c	75 61		adc $61,x			adc 	esInt3+1,x
.2c9e	95 60		sta $60,x			sta 	esInt3,x
.2ca0	60		rts				rts
.2ca1					MInt32Sub:
.2ca1	38		sec				sec
.2ca2	b5 48		lda $48,x			lda 	esInt0,x
.2ca4	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2ca6	95 48		sta $48,x			sta 	esInt0,x
.2ca8	b5 50		lda $50,x			lda 	esInt1,x
.2caa	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2cac	95 50		sta $50,x			sta 	esInt1,x
.2cae	b5 58		lda $58,x			lda 	esInt2,x
.2cb0	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2cb2	95 58		sta $58,x			sta 	esInt2,x
.2cb4	b5 60		lda $60,x			lda 	esInt3,x
.2cb6	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2cb8	95 60		sta $60,x			sta 	esInt3,x
.2cba	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2cbb					MInt32Multiply:
.2cbb	e8		inx				inx 								; copy 2nd -> 3rd
.2cbc	20 e1 2c	jsr $2ce1			jsr 	MInt32CopyUp
.2cbf	ca		dex				dex
.2cc0	20 e1 2c	jsr $2ce1			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2cc3	20 a3 2d	jsr $2da3			jsr 	MInt32False 				; zero 1st.
.2cc6					_I32Loop:
.2cc6	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2cc8	29 01		and #$01			and 	#1
.2cca	f0 03		beq $2ccf			beq 	_I32NoAdd 					; if set
.2ccc	20 87 2c	jsr $2c87			jsr 	MInt32Add 					; add 2nd to 1st.
.2ccf					_I32NoAdd:
.2ccf	e8		inx				inx 								; shift 2nd left
.2cd0	20 b8 2d	jsr $2db8			jsr 	MInt32ShiftLeft
.2cd3	e8		inx				inx  								; shift 3rd right
.2cd4	20 c1 2d	jsr $2dc1			jsr 	MInt32ShiftRight
.2cd7	20 ca 2d	jsr $2dca			jsr 	MInt32Zero 					; check if zero.
.2cda	08		php				php 								; save status bits
.2cdb	ca		dex				dex 	 							; point back to 1st
.2cdc	ca		dex				dex
.2cdd	28		plp				plp 								; get status bits
.2cde	d0 e6		bne $2cc6			bne 	_I32Loop 					; if non-zero keep going.
.2ce0	60		rts				rts
.2ce1					MInt32CopyUp:
.2ce1	b5 48		lda $48,x			lda 	esInt0,x
.2ce3	95 49		sta $49,x			sta 	esInt0+1,x
.2ce5	b5 50		lda $50,x			lda 	esInt1,x
.2ce7	95 51		sta $51,x			sta 	esInt1+1,x
.2ce9	b5 58		lda $58,x			lda 	esInt2,x
.2ceb	95 59		sta $59,x			sta 	esInt2+1,x
.2ced	b5 60		lda $60,x			lda 	esInt3,x
.2cef	95 61		sta $61,x			sta 	esInt3+1,x
.2cf1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c13					MCharCount:	.fill 	1						; count of converted characters
.2cf2					MLInt32ToString:
.2cf2	aa		tax				tax									; module passes stack in A, base in Y
.2cf3	98		tya				tya
.2cf4	20 f9 2c	jsr $2cf9			jsr 	MInt32ToString
.2cf7	8a		txa				txa
.2cf8	60		rts				rts
.2cf9					MInt32ToString:
.2cf9	48		pha				pha 								; save base
.2cfa	85 32		sta $32				sta 	tempShort 					; save target base.
.2cfc	a9 00		lda #$00			lda 	#0
.2cfe	8d 13 0c	sta $0c13			sta 	MCharCount 					; clear character count to 0
.2d01	98		tya				tya
.2d02	48		pha				pha
.2d03	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2d05	10 10		bpl $2d17			bpl 	_I32TSUnsigned
.2d07	48		pha				pha 								; save base on stack.
.2d08	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2d0a	10 08		bpl $2d14			bpl 	_I32TSNoFlip
.2d0c	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2d0e	20 4a 2d	jsr $2d4a			jsr 	MI32WriteCharacter
.2d11	20 5d 2d	jsr $2d5d			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2d14					_I32TSNoFlip:
.2d14	68		pla				pla 								; get the base back
.2d15	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2d17					_I32TSUnsigned:
.2d17	20 25 2d	jsr $2d25			jsr 	MI32DivideWrite 			; recursive code to output string.
.2d1a	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2d1c	ad 13 0c	lda $0c13			lda 	MCharCount
.2d1f	91 2a		sta ($2a),y			sta 	(temp0),y
.2d21	68		pla				pla
.2d22	a8		tay				tay
.2d23	68		pla				pla
.2d24	60		rts				rts
.2d25					MI32DivideWrite:
.2d25	48		pha				pha 								; save the divisor/base
.2d26	e8		inx				inx 								; write in the dividing position.
.2d27	20 b2 2d	jsr $2db2			jsr 	MInt32Set8Bit
.2d2a	ca		dex				dex
.2d2b	20 9d 2b	jsr $2b9d			jsr 	MInt32UDivide 				; divide number by base.
.2d2e	68		pla				pla 								; get the base into Y
.2d2f	a8		tay				tay
.2d30	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2d32	48		pha				pha
.2d33	20 ca 2d	jsr $2dca			jsr 	MInt32Zero 					; is the result zero ?
.2d36	f0 04		beq $2d3c			beq 	_I32NoRecurse 				; if so, don't recurse.
.2d38	98		tya				tya 								; put base into A
.2d39	20 25 2d	jsr $2d25			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2d3c					_I32NoRecurse:
.2d3c	68		pla				pla 								; get the remainder back
.2d3d	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2d3f	90 02		bcc $2d43			bcc 	_I32NotHex
.2d41	69 06		adc #$06			adc 	#7-1
.2d43					_I32NotHex:
.2d43	18		clc				clc 								; make it ASCII
.2d44	69 30		adc #$30			adc 	#48
.2d46	20 4a 2d	jsr $2d4a			jsr 	MI32WriteCharacter 			; write the character out
.2d49	60		rts				rts 								; and exit.
.2d4a					MI32WriteCharacter:
.2d4a	ee 13 0c	inc $0c13			inc 	MCharCount 					; bump count (space for leading count)
.2d4d	ac 13 0c	ldy $0c13			ldy 	MCharCount 					; get position
.2d50	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2d52	c8		iny				iny
.2d53	a9 00		lda #$00			lda 	#0
.2d55	91 2a		sta ($2a),y			sta 	(temp0),y
.2d57	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c14					MSeed32:	.fill 	4							; random number seed.
.2d58					MInt32Absolute:
.2d58	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2d5a	30 01		bmi $2d5d			bmi 	MInt32Negate
.2d5c	60		rts				rts
.2d5d					MInt32Negate:
.2d5d	38		sec				sec 								; subtract from zero.
.2d5e	a9 00		lda #$00			lda 	#0
.2d60	f5 48		sbc $48,x			sbc 	esInt0,x
.2d62	95 48		sta $48,x			sta 	esInt0,x
.2d64	a9 00		lda #$00			lda 	#0
.2d66	f5 50		sbc $50,x			sbc 	esInt1,x
.2d68	95 50		sta $50,x			sta 	esInt1,x
.2d6a	a9 00		lda #$00			lda 	#0
.2d6c	f5 58		sbc $58,x			sbc 	esInt2,x
.2d6e	95 58		sta $58,x			sta 	esInt2,x
.2d70	a9 00		lda #$00			lda 	#0
.2d72	f5 60		sbc $60,x			sbc 	esInt3,x
.2d74	95 60		sta $60,x			sta 	esInt3,x
.2d76	60		rts				rts
.2d77					MInt32Not:
.2d77	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2d79	49 ff		eor #$ff			eor 	#$FF
.2d7b	95 48		sta $48,x			sta 	esInt0,x
.2d7d	b5 50		lda $50,x			lda 	esInt1,x
.2d7f	49 ff		eor #$ff			eor 	#$FF
.2d81	95 50		sta $50,x			sta 	esInt1,x
.2d83	b5 58		lda $58,x			lda 	esInt2,x
.2d85	49 ff		eor #$ff			eor 	#$FF
.2d87	95 58		sta $58,x			sta 	esInt2,x
.2d89	b5 60		lda $60,x			lda 	esInt3,x
.2d8b	49 ff		eor #$ff			eor 	#$FF
.2d8d	95 60		sta $60,x			sta 	esInt3,x
.2d8f	60		rts				rts
.2d90					MInt32Sign:
.2d90	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2d92	30 0b		bmi $2d9f			bmi 	MInt32True 					; if set return -1 (true)
.2d94	20 ca 2d	jsr $2dca			jsr 	MInt32Zero 					; is it zero ?
.2d97	f0 0a		beq $2da3			beq 	MInt32False 				; if zero return 0 (false)
.2d99	20 a3 2d	jsr $2da3			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2d9c	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2d9e	60		rts				rts
.2d9f					MInt32True:
.2d9f	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2da1	d0 02		bne $2da5			bne 	MInt32WriteAll
.2da3					MInt32False:
.2da3	a9 00		lda #$00			lda 	#0
.2da5					MInt32WriteAll:
.2da5	95 48		sta $48,x			sta 	esInt0,x
.2da7					MInt32Write123:
.2da7	95 50		sta $50,x			sta 	esInt1,x
.2da9	95 58		sta $58,x			sta 	esInt2,x
.2dab	95 60		sta $60,x			sta 	esInt3,x
.2dad	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2daf	95 40		sta $40,x			sta 	esType,x
.2db1	60		rts				rts
.2db2					MInt32Set8Bit:
.2db2	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2db4	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2db6	f0 ef		beq $2da7			beq		MInt32Write123
.2db8					MInt32ShiftLeft:
.2db8	16 48		asl $48,x			asl 	esInt0,x
.2dba	36 50		rol $50,x			rol	 	esInt1,x
.2dbc	36 58		rol $58,x			rol	 	esInt2,x
.2dbe	36 60		rol $60,x			rol	 	esInt3,x
.2dc0	60		rts				rts
.2dc1					MInt32ShiftRight:
.2dc1	56 60		lsr $60,x			lsr 	esInt3,x
.2dc3	76 58		ror $58,x			ror 	esInt2,x
.2dc5	76 50		ror $50,x			ror 	esInt1,x
.2dc7	76 48		ror $48,x			ror 	esInt0,x
.2dc9	60		rts				rts
.2dca					MInt32Zero:
.2dca	b5 48		lda $48,x			lda 	esInt0,x
.2dcc	15 50		ora $50,x			ora 	esInt1,x
.2dce	15 58		ora $58,x			ora 	esInt2,x
.2dd0	15 60		ora $60,x			ora 	esInt3,x
.2dd2	60		rts				rts
.2dd3					MInt32Random:
.2dd3	98		tya				tya
.2dd4	48		pha				pha
.2dd5	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2dd7	ad 14 0c	lda $0c14			lda 	MSeed32+0 					; check the seed isn't zero
.2dda	d0 03		bne $2ddf			bne 	_Random1
.2ddc	a8		tay				tay 								; if so do it 256 times
.2ddd	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2ddf					_Random1:
.2ddf	0a		asl a				asl 	a
.2de0	2e 15 0c	rol $0c15			rol 	MSeed32+1
.2de3	2e 16 0c	rol $0c16			rol 	MSeed32+2
.2de6	2e 17 0c	rol $0c17			rol 	MSeed32+3
.2de9	90 02		bcc $2ded			bcc 	_Random2
.2deb	49 c5		eor #$c5			eor 	#$C5
.2ded					_Random2:
.2ded	88		dey				dey
.2dee	d0 ef		bne $2ddf			bne 	_Random1
.2df0	8d 14 0c	sta $0c14			sta 	MSeed32+0 					; copy the seed in.
.2df3	95 48		sta $48,x			sta 	esInt0,x
.2df5	ad 15 0c	lda $0c15			lda 	MSeed32+1
.2df8	95 50		sta $50,x			sta 	esInt1,x
.2dfa	ad 16 0c	lda $0c16			lda 	MSeed32+2
.2dfd	95 58		sta $58,x			sta 	esInt2,x
.2dff	ad 17 0c	lda $0c17			lda 	MSeed32+3
.2e02	95 60		sta $60,x			sta 	esInt3,x
.2e04	68		pla				pla
.2e05	a8		tay				tay
.2e06	a9 00		lda #$00			lda 	#0
.2e08	95 40		sta $40,x			sta 	esType,x
.2e0a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2e0b					CheckToken:
.2e0b	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2e0d	d0 02		bne $2e11			bne 	_CTError
.2e0f	c8		iny				iny
.2e10	60		rts				rts
.2e11					_CTError:
.2e11	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2e13	20 b5 12	jsr $12b5		jsr	errorHandler
.2e16					CheckRightParen:
.2e16	b1 28		lda ($28),y			lda 	(codePtr),y
.2e18	c8		iny				iny
.2e19	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2e1b	d0 01		bne $2e1e			bne 	_CRPError
.2e1d	60		rts				rts
.2e1e					_CRPError:
.2e1e	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2e20	20 b5 12	jsr $12b5		jsr	errorHandler
.2e23					CheckComma:
.2e23	b1 28		lda ($28),y			lda 	(codePtr),y
.2e25	c8		iny				iny
.2e26	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2e28	d0 01		bne $2e2b			bne 	_CCError
.2e2a	60		rts				rts
.2e2b					_CCError:
.2e2b	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2e2d	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2e30					ScanForward:
.2e30	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2e32	86 2d		stx $2d				stx 	temp1+1
.2e34	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2e36	85 2e		sta $2e				sta 	temp2
.2e38	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2e3a	c8		iny				iny
.2e3b	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2e3d	d0 08		bne $2e47			bne 	_SFNoCheck 					; if so, check token against entered values.
.2e3f	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2e41	f0 24		beq $2e67			beq 	_SFExit 					; at the same strcture depth.
.2e43	c5 2d		cmp $2d				cmp 	temp1+1
.2e45	f0 20		beq $2e67			beq 	_SFExit
.2e47					_SFNoCheck:
.2e47	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2e49	90 ed		bcc $2e38			bcc 	_SFLoop
.2e4b	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2e4d	90 19		bcc $2e68			bcc 	_SFSpecials
.2e4f	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2e51	90 e5		bcc $2e38			bcc 	_SFLoop
.2e53	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2e55	b0 e1		bcs $2e38			bcs 	_SFLoop
.2e57	aa		tax				tax  								; token in X, and look up the adjuster.
.2e58	bd ab 26	lda $26ab,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2e5b	38		sec				sec 								; convert to an offset ($FF,$01)
.2e5c	e9 81		sbc #$81			sbc 	#$81
.2e5e	18		clc				clc 								; add to depth
.2e5f	65 2e		adc $2e				adc 	temp2
.2e61	85 2e		sta $2e				sta 	temp2
.2e63	10 d3		bpl $2e38			bpl 	_SFLoop 					; +ve okay to continue
.2e65	30 07		bmi $2e6e			bmi 	SFError 					; if gone -ve then we have a nesting error
.2e67	60		rts		_SFExit:rts
.2e68					_SFSpecials:
.2e68	20 73 2e	jsr $2e73			jsr 	ScannerSkipSpecial
.2e6b	4c 38 2e	jmp $2e38			jmp 	_SFLoop
.2e6e					SFError:
.2e6e	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2e70	20 b5 12	jsr $12b5		jsr	errorHandler
.2e73					ScannerSkipSpecial:
.2e73	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2e75	f0 10		beq $2e87			beq 	_SFNextLine
.2e77	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2e79	f0 2b		beq $2ea6			beq 	_SFFloatSkip
.2e7b	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2e7d	f0 02		beq $2e81			beq 	_SFSkipString
.2e7f	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2e80	60		rts				rts 								; token.
.2e81					_SFSkipString:
.2e81	98		tya				tya
.2e82	38		sec				sec
.2e83	71 28		adc ($28),y			adc 	(codePtr),y
.2e85	a8		tay				tay
.2e86	60		rts				rts
.2e87					_SFNextLine:
.2e87	a0 00		ldy #$00			ldy 	#0 							; get offset
.2e89	b1 28		lda ($28),y			lda 	(codePtr),y
.2e8b	18		clc				clc 								; add to code pointer.
.2e8c	65 28		adc $28				adc 	codePtr
.2e8e	85 28		sta $28				sta 	codePtr
.2e90	90 02		bcc $2e94			bcc		_SFNLNoCarry
.2e92	e6 29		inc $29				inc 	codePtr+1
.2e94					_SFNLNoCarry:
.2e94	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2e96	d0 0b		bne $2ea3			bne		_SFXNL 						; no go round again
.2e98	a5 2c		lda $2c				lda 	temp1
.2e9a	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.2e9c	d0 d0		bne $2e6e			bne 	SFError 					; read uses this to search for data statements
.2e9e	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2ea0	20 b5 12	jsr $12b5		jsr	errorHandler
.2ea3	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2ea5	60		rts				rts
.2ea6					_SFFloatSkip:
.2ea6	98		tya				tya 								; skip over an embedded float.
.2ea7	18		clc				clc
.2ea8	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2eaa	a8		tay				tay
.2eab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.2eac					RSReset:
.2eac	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2eae	85 37		sta $37				sta 	rsPointer
.2eb0	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2eb2	85 38		sta $38				sta 	1+(rsPointer)
.2eb4	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2eb6	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2eb9	60		rts				rts
.2eba					RSClaim:
.2eba	84 32		sty $32				sty 	tempShort 					; preserve Y
.2ebc	48		pha				pha 								; save marker on stack.
.2ebd	8a		txa				txa 								; get bytes required.
.2ebe	38		sec				sec
.2ebf	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2ec1	65 37		adc $37				adc 	rsPointer
.2ec3	85 37		sta $37				sta 	rsPointer
.2ec5	a5 38		lda $38				lda 	rsPointer+1
.2ec7	69 ff		adc #$ff			adc 	#$FF
.2ec9	85 38		sta $38				sta 	rsPointer+1
.2ecb	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2ecd	90 08		bcc $2ed7			bcc 	_RSCOverflow
.2ecf	68		pla				pla 								; get marker back
.2ed0	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2ed2	91 37		sta ($37),y			sta 	(rsPointer),y
.2ed4	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2ed6	60		rts				rts
.2ed7					_RSCOverflow:
.2ed7	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2ed9	20 b5 12	jsr $12b5		jsr	errorHandler
.2edc					RSFree:
.2edc	18		clc				clc
.2edd	65 37		adc $37				adc 	rsPointer
.2edf	85 37		sta $37				sta 	rsPointer
.2ee1	90 02		bcc $2ee5			bcc 	_RSFExit
.2ee3	e6 38		inc $38				inc 	rsPointer+1
.2ee5					_RSFExit:
.2ee5	60		rts				rts
.2ee6					RSSavePosition:
.2ee6	84 32		sty $32				sty 	tempShort 					; save Y position
.2ee8	a8		tay				tay 								; this is where we write it.
.2ee9	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2eeb	91 37		sta ($37),y			sta 	(rsPointer),y
.2eed	c8		iny				iny
.2eee	a5 29		lda $29				lda 	codePtr+1
.2ef0	91 37		sta ($37),y			sta 	(rsPointer),y
.2ef2	c8		iny				iny
.2ef3	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.2ef5	91 37		sta ($37),y			sta 	(rsPointer),y
.2ef7	a8		tay				tay 								; fix Y back again to original value
.2ef8	60		rts				rts
.2ef9					RSLoadPosition:
.2ef9	a8		tay				tay
.2efa	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.2efc	85 28		sta $28				sta 	codePtr
.2efe	c8		iny				iny
.2eff	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f01	85 29		sta $29				sta 	codePtr+1
.2f03	c8		iny				iny
.2f04	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.2f06	a8		tay				tay 								; to Y
.2f07	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.2f08					WarmStart:
.2f08	a2 02		ldx #$02		ldx	#2
.2f0a	20 82 18	jsr $1882		jsr	interactionHandler

;******  Return to file: main/main.asm

.2f0d					mainHandler:
.2f0d	7c 10 2f	jmp ($2f10,x)			jmp 	(mainVectors,x)
.2f10					mainVectors:
>2f10	16 2e					.word CheckRightParen      ; index 0
>2f12	97 18					.word XCommandClear        ; index 2
>2f14	2d 28					.word LinkEvaluate         ; index 4
>2f16	39 28					.word LinkEvaluateInteger  ; index 6
>2f18	3f 28					.word LinkEvaluateSmallInt ; index 8
>2f1a	33 28					.word LinkEvaluateTerm     ; index 10
>2f1c	f2 2c					.word MLInt32ToString      ; index 12
>2f1e	b5 1d					.word Command_XNew         ; index 14
>2f20	c4 1f					.word XCommand_Run         ; index 16
>2f22	d0 1f					.word Command_RunFrom      ; index 18
>2f24	0a 2c					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.2f26					section_end_main:
.2f26					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2f26					StringChrs:
.2f26	aa		tax				tax 								; set up stack
.2f27	a9 02		lda #$02			lda 	#2
.2f29	20 e9 2f	jsr $2fe9			jsr 	AllocateSoftString
.2f2c	98		tya				tya
.2f2d	20 0f 30	jsr $300f			jsr 	WriteSoftString
.2f30					StringUpdate:
.2f30	20 3e 2f	jsr $2f3e			jsr 	ReturnSoftString
.2f33	8a		txa				txa
.2f34	60		rts				rts
.2f35					StringNull:
.2f35	aa		tax				tax
.2f36	a9 01		lda #$01			lda 	#1
.2f38	20 e9 2f	jsr $2fe9			jsr 	AllocateSoftString
.2f3b	4c 30 2f	jmp $2f30			jmp 	StringUpdate
.2f3e					ReturnSoftString:
.2f3e	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.2f40	95 48		sta $48,x			sta 	esInt0,x
.2f42	a5 3a		lda $3a				lda 	softMemAlloc+1
.2f44	95 50		sta $50,x			sta 	esInt1,x
.2f46	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.2f48	95 58		sta $58,x			sta 	esInt2,x
.2f4a	95 60		sta $60,x			sta 	esInt3,x
.2f4c	a9 40		lda #$40			lda 	#$40 						; type string.
.2f4e	95 40		sta $40,x			sta 	esType,x
.2f50	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2f51					STRCompare:
.2f51	48		pha				pha 								; save A
.2f52	aa		tax				tax 								; put stack pos in X
.2f53	98		tya				tya
.2f54	48		pha				pha
.2f55	20 89 2f	jsr $2f89			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.2f58	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2f5a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f5c	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.2f5e	90 02		bcc $2f62			bcc 	_SCNotSmaller
.2f60	b1 2c		lda ($2c),y			lda 	(temp1),y
.2f62					_SCNotSmaller:
.2f62	aa		tax				tax 								; put that in X. We compare this many chars first.
.2f63					_SCCompareLoop:
.2f63	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2f65	f0 0c		beq $2f73			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2f67	ca		dex				dex 								; decrement chars to compare.
.2f68	c8		iny				iny 								; move to next character
.2f69	38		sec				sec 								; calculate s1[y]-s2[y]
.2f6a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f6c	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2f6e	d0 0a		bne $2f7a			bne 	_SCReturnResult 			; if different return sign of A
.2f70	4c 63 2f	jmp $2f63			jmp 	_SCCompareLoop
.2f73					_SCSameToEndShortest
.2f73	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2f75	38		sec				sec
.2f76	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f78	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2f7a					_SCReturnResult:
.2f7a	08		php				php 								; set return to zero preserving PSW.
.2f7b	a2 00		ldx #$00			ldx 	#0
.2f7d	28		plp				plp
.2f7e	f0 05		beq $2f85			beq 	_SCExit 					; two values equal, then exit
.2f80	ca		dex				dex 								; X = $FF
.2f81	90 02		bcc $2f85			bcc 	_SCExit 					; if 1st < 2nd then -1
.2f83	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2f85					_SCExit:
.2f85	68		pla				pla
.2f86	a8		tay				tay
.2f87	68		pla				pla
.2f88	60		rts				rts
.2f89					CopyStringPair:
.2f89	b5 49		lda $49,x			lda 	esInt0+1,x
.2f8b	85 2c		sta $2c				sta 	temp1
.2f8d	b5 51		lda $51,x			lda 	esInt1+1,x
.2f8f	85 2d		sta $2d				sta 	temp1+1
.2f91					CopyStringTop:
.2f91	b5 48		lda $48,x			lda 	esInt0,x
.2f93	85 2a		sta $2a				sta 	temp0
.2f95	b5 50		lda $50,x			lda 	esInt1,x
.2f97	85 2b		sta $2b				sta 	temp0+1
.2f99	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2f9a					StringConcat:
.2f9a	aa		tax				tax									; stack pos in X
.2f9b	98		tya				tya
.2f9c	48		pha				pha
.2f9d	20 89 2f	jsr $2f89			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2fa0	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2fa1	a0 00		ldy #$00			ldy 	#0
.2fa3	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fa5	71 2c		adc ($2c),y			adc 	(temp1),y
.2fa7	b0 1c		bcs $2fc5			bcs 	_SCError 					; just too many characters here.
.2fa9	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2fab	b0 18		bcs $2fc5			bcs 	_SCError
.2fad	20 e9 2f	jsr $2fe9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2fb0	20 e0 2f	jsr $2fe0			jsr 	CopySoftToStack 			; copy that to the stack.
.2fb3	20 ca 2f	jsr $2fca			jsr 	SCCopyTemp0 				; copy temp0
.2fb6	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.2fb8	85 2a		sta $2a				sta 	temp0
.2fba	a5 2d		lda $2d				lda 	temp1+1
.2fbc	85 2b		sta $2b				sta 	temp0+1
.2fbe	20 ca 2f	jsr $2fca			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2fc1	68		pla				pla
.2fc2	a8		tay				tay
.2fc3	8a		txa				txa 								; and A
.2fc4	60		rts				rts
.2fc5					_SCError:
.2fc5	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2fc7	20 b5 12	jsr $12b5		jsr	errorHandler
.2fca					SCCopyTemp0:
.2fca	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2fcc	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fce	85 2e		sta $2e				sta 	temp2
.2fd0					_SCCopyLoop:
.2fd0	a5 2e		lda $2e				lda 	temp2 						; done the lot
.2fd2	f0 0b		beq $2fdf			beq 	_SCCopyExit
.2fd4	c6 2e		dec $2e				dec 	temp2
.2fd6	c8		iny				iny 								; get next char
.2fd7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fd9	20 0f 30	jsr $300f			jsr 	WriteSoftString 			; write to soft string.
.2fdc	4c d0 2f	jmp $2fd0			jmp 	_SCCopyLoop
.2fdf					_SCCopyExit:
.2fdf	60		rts				rts
.2fe0					CopySoftToStack:
.2fe0	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2fe2	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2fe4	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.2fe6	95 50		sta $50,x			sta 	esInt1,x
.2fe8	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2fe9					AllocateSoftString:
.2fe9	85 32		sta $32				sta 	tempShort 					; save count
.2feb	98		tya				tya
.2fec	48		pha				pha
.2fed	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2fef	d0 09		bne $2ffa			bne 	_ASSDone
.2ff1	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.2ff3	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2ff5	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2ff7	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2ff8	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.2ffa					_ASSDone:
.2ffa	38		sec				sec 								; allocate downwards enough memory
.2ffb	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2ffd	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.2fff	85 39		sta $39				sta 	softMemAlloc
.3001	a5 3a		lda $3a				lda 	softMemAlloc+1
.3003	e9 00		sbc #$00			sbc 	#0
.3005	85 3a		sta $3a				sta 	softMemAlloc+1
.3007	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3009	a8		tay				tay
.300a	91 39		sta ($39),y			sta 	(softMemAlloc),y
.300c	68		pla				pla
.300d	a8		tay				tay
.300e	60		rts				rts
.300f					WriteSoftString:
.300f	84 32		sty $32				sty 	tempShort 					; save Y
.3011	48		pha				pha 								; save character on stack
.3012	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3014	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3016	18		clc				clc
.3017	69 01		adc #$01			adc 	#1
.3019	91 39		sta ($39),y			sta 	(softMemAlloc),y
.301b	a8		tay				tay 								; offset in Y
.301c	68		pla				pla 								; get char and write.
.301d	91 39		sta ($39),y			sta 	(softMemAlloc),y
.301f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3021	60		rts				rts
.3022					StrClone:
.3022	aa		tax				tax 								; set up stack.
.3023	98		tya				tya
.3024	48		pha				pha
.3025	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3027	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3029	18		clc				clc
.302a	69 01		adc #$01			adc 	#1
.302c	20 e9 2f	jsr $2fe9			jsr 	AllocateSoftString 			; allocate soft memory
.302f	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3031	95 48		sta $48,x			sta 	esInt0,x
.3033	a5 3a		lda $3a				lda 	softMemAlloc+1
.3035	95 50		sta $50,x			sta 	esInt1,x
.3037	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3039	95 58		sta $58,x			sta 	esInt2,x
.303b	95 60		sta $60,x			sta 	esInt3,x
.303d	a9 40		lda #$40			lda 	#$40 						; set type to string.
.303f	95 40		sta $40,x			sta 	esType,x
.3041	20 ca 2f	jsr $2fca			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3044	68		pla				pla
.3045	a8		tay				tay
.3046	8a		txa				txa
.3047	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.3048					CaseString:
.3048	48		pha				pha 								; save A and copy to X
.3049	aa		tax				tax
.304a	98		tya				tya
.304b	48		pha				pha
.304c	20 91 2f	jsr $2f91			jsr 	CopyStringTop 				; target string -> temp0
.304f	a0 00		ldy #$00			ldy 	#0
.3051	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3053	18		clc				clc
.3054	69 01		adc #$01			adc 	#1 							; one more for length byte
.3056	20 e9 2f	jsr $2fe9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3059	20 e0 2f	jsr $2fe0			jsr 	CopySoftToStack 			; copy that to the stack.
.305c	a0 00		ldy #$00			ldy 	#0
.305e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3060	aa		tax				tax
.3061					_CSCopy:
.3061	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3063	f0 24		beq $3089			beq 	_CSExit
.3065	ca		dex				dex
.3066	c8		iny				iny
.3067	68		pla				pla 								; check direction
.3068	48		pha				pha
.3069	f0 0c		beq $3077			beq 	_CSUpper
.306b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.306d	c9 41		cmp #$41			cmp 	#"A"
.306f	90 12		bcc $3083			bcc 	_CSWrite
.3071	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3073	b0 0e		bcs $3083			bcs 	_CSWrite
.3075	90 0a		bcc $3081			bcc 	_CSFlipWrite
.3077					_CSUpper:
.3077	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3079	c9 61		cmp #$61			cmp 	#"a"
.307b	90 06		bcc $3083			bcc 	_CSWrite
.307d	c9 7b		cmp #$7b			cmp 	#"z"+1
.307f	b0 02		bcs $3083			bcs 	_CSWrite
.3081					_CSFlipWrite:
.3081	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3083					_CSWrite:
.3083	20 0f 30	jsr $300f			jsr 	WriteSoftString 			; add to soft string.
.3086	4c 61 30	jmp $3061			jmp 	_CSCopy
.3089					_CSExit:
.3089	68		pla				pla
.308a	a8		tay				tay
.308b	68		pla				pla
.308c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.308d					StringSubstring:
.308d	48		pha				pha
.308e	aa		tax				tax 								; access stack.
.308f	98		tya				tya
.3090	48		pha				pha
.3091	20 91 2f	jsr $2f91			jsr 	CopyStringTop 				; point temp0 to the string.
.3094	a0 00		ldy #$00			ldy 	#0 							; get length.
.3096	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3098	85 2c		sta $2c				sta 	temp1
.309a	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.309c	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.309e	f0 02		beq $30a2			beq 	_SSBOkay
.30a0	b0 2a		bcs $30cc			bcs 	_SSBReturnNull
.30a2					_SSBOkay:
.30a2	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.30a4	18		clc				clc
.30a5	69 01		adc #$01			adc 	#1
.30a7	38		sec				sec
.30a8	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.30aa	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.30ac	90 02		bcc $30b0			bcc		_SSBTrunc
.30ae	b5 4a		lda $4a,x			lda 	esInt0+2,x
.30b0					_SSBTrunc:
.30b0	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.30b2	18		clc				clc
.30b3	69 01		adc #$01			adc 	#1 							; add 1
.30b5	20 e9 2f	jsr $2fe9			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.30b8	20 e0 2f	jsr $2fe0			jsr 	CopySoftToStack 			; copy that to the stack.
.30bb	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.30bd					_SSBCopyLoop:
.30bd	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.30bf	f0 0e		beq $30cf			beq 	_SSBExit
.30c1	c6 2d		dec $2d				dec 	temp1+1
.30c3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.30c5	20 0f 30	jsr $300f			jsr 	WriteSoftString
.30c8	c8		iny				iny
.30c9	4c bd 30	jmp $30bd			jmp 	_SSBCopyLoop
.30cc					_SSBReturnNull:
.30cc	20 d3 30	jsr $30d3			jsr 	ReturnNull
.30cf					_SSBExit:
.30cf	68		pla				pla
.30d0	a8		tay				tay
.30d1	68		pla				pla
.30d2	60		rts				rts
.30d3					ReturnNull:
.30d3	a9 00		lda #$00			lda 	#0 							; clear null string
.30d5	8d ce 0a	sta $0ace			sta 	NullString
.30d8	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.30da	95 48		sta $48,x			sta 	esInt0,x
.30dc	a9 0a		lda #$0a			lda 	#NullString >> 8
.30de	95 50		sta $50,x			sta 	esInt1,x
.30e0	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c18					srcStrLen:
>0c18							.fill 	1
.30e1					StringWrite:
.30e1	aa		tax				tax
.30e2	48		pha				pha
.30e3	98		tya				tya
.30e4	48		pha				pha
.30e5	20 0c 31	jsr $310c			jsr 	CheckOverwriteCurrent
.30e8	b0 0d		bcs $30f7			bcs		_SWCopyCurrent
.30ea	20 4a 31	jsr $314a			jsr 	RequiresConcretion
.30ed	90 0e		bcc $30fd			bcc 	_SWWriteReference
.30ef	20 ad 31	jsr $31ad			jsr 	CheckSpecialConcretion
.30f2	b0 09		bcs $30fd			bcs 	_SWWriteReference
.30f4	20 5e 31	jsr $315e			jsr 	AllocateHardMemory
.30f7					_SWCopyCurrent:
.30f7	20 91 31	jsr $3191			jsr 	CopyStringToHardMemory
.30fa	4c 08 31	jmp $3108			jmp 	_SWExit
.30fd					_SWWriteReference
.30fd	a0 00		ldy #$00			ldy 	#0
.30ff	a5 2a		lda $2a				lda 	temp0
.3101	91 2c		sta ($2c),y			sta 	(temp1),y
.3103	c8		iny				iny
.3104	a5 2b		lda $2b				lda 	temp0+1
.3106	91 2c		sta ($2c),y			sta 	(temp1),y
.3108					_SWExit:
.3108	68		pla				pla
.3109	a8		tay				tay
.310a	68		pla				pla
.310b	60		rts				rts
.310c					CheckOverwriteCurrent:
.310c	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.310e	b5 51		lda $51,x			lda 	esInt1+1,x
.3110	85 2b		sta $2b				sta 	temp0+1
.3112	b5 49		lda $49,x			lda 	esInt0+1,x
.3114	85 2a		sta $2a				sta 	temp0
.3116	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3118	8d 18 0c	sta $0c18			sta 	srcStrLen
.311b	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.311d	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.311f	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.3121	85 2d		sta $2d				sta 	temp1+1
.3123	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3125	b1 2c		lda ($2c),y			lda 	(temp1),y
.3127	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3129	90 1b		bcc $3146			bcc 	_COCFail 				; in hard memory.
.312b	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.312d	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.312f	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3131	85 2e		sta $2e				sta 	temp2
.3133	c8		iny				iny
.3134	b1 2c		lda ($2c),y			lda 	(temp1),y
.3136	e9 00		sbc #$00			sbc 	#0
.3138	85 2f		sta $2f				sta 	temp2+1
.313a	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.313c	b1 2e		lda ($2e),y			lda 	(temp2),y
.313e	38		sec				sec  							; maximum character capacity.
.313f	e9 02		sbc #$02			sbc 	#2
.3141	cd 18 0c	cmp $0c18			cmp 	srcStrLen 				; if >= the required length
.3144	b0 02		bcs $3148			bcs 	_COCCanReuse
.3146					_COCFail:
.3146	18		clc				clc
.3147	60		rts				rts
.3148					_COCCanReuse:
.3148	38		sec				sec
.3149	60		rts				rts
.314a					RequiresConcretion:
.314a	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.314c	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.314e	b0 0a		bcs $315a			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3150	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3152	f0 08		beq $315c			beq 	_RCFail 				; if not, this cannot be soft memory.
.3154	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3156	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3158	90 02		bcc $315c			bcc 	_RCFail 				; so concreting
.315a					_RCSucceed:
.315a	38		sec				sec
.315b	60		rts				rts
.315c					_RCFail:
.315c	18		clc				clc
.315d	60		rts				rts
.315e					AllocateHardMemory:
.315e	98		tya				tya
.315f	48		pha				pha
.3160	ad 18 0c	lda $0c18			lda 	srcStrLen 				; characters in string
.3163	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3165	b0 04		bcs $316b			bcs 	_AHMSetMax 				; max out that amount.
.3167	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3169	90 02		bcc $316d			bcc 	_AHMIsOkay
.316b					_AHMSetMax:
.316b	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.316d					_AHMIsOkay:
.316d	48		pha				pha	 							; save size to be allocated
.316e	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3170	38		sec				sec  							; and copy result to TOS as target address.
.3171	65 33		adc $33				adc 	highMemory
.3173	85 33		sta $33				sta 	highMemory
.3175	a5 34		lda $34				lda 	highMemory+1
.3177	69 ff		adc #$ff			adc 	#$FF
.3179	85 34		sta $34				sta 	highMemory+1
.317b	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.317d	68		pla				pla 							; get the total size of the storage block
.317e	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3180	18		clc				clc
.3181	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3183	69 01		adc #$01			adc 	#1
.3185	91 2c		sta ($2c),y			sta 	(temp1),y
.3187	a5 34		lda $34				lda 	highMemory+1
.3189	69 00		adc #$00			adc 	#0
.318b	c8		iny				iny
.318c	91 2c		sta ($2c),y			sta 	(temp1),y
.318e	68		pla				pla
.318f	a8		tay				tay
.3190	60		rts				rts
.3191					CopyStringToHardMemory:
.3191	98		tya				tya
.3192	48		pha				pha
.3193	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3195	b1 2c		lda ($2c),y			lda 	(temp1),y
.3197	85 2e		sta $2e				sta 	temp2
.3199	c8		iny				iny
.319a	b1 2c		lda ($2c),y			lda 	(temp1),y
.319c	85 2f		sta $2f				sta 	temp2+1
.319e	ac 18 0c	ldy $0c18			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.31a1					_CSTHMLoop:
.31a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.31a3	91 2e		sta ($2e),y			sta 	(temp2),y
.31a5	88		dey				dey
.31a6	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.31a8	d0 f7		bne $31a1			bne 	_CSTHMLoop
.31aa	68		pla				pla
.31ab	a8		tay				tay
.31ac	60		rts				rts
.31ad					CheckSpecialConcretion:
.31ad	ad 18 0c	lda $0c18			lda 	srcStrLen 				; check string is null e.g. length = 0
.31b0	f0 02		beq $31b4			beq 	_CSCNullString
.31b2	18		clc				clc
.31b3	60		rts				rts
.31b4					_CSCNullString:
.31b4	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.31b6	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.31b9	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.31bb	85 2a		sta $2a				sta 	temp0
.31bd	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.31bf	85 2b		sta $2b				sta 	1+(temp0)
.31c1	38		sec				sec
.31c2	60		rts				rts

;******  Return to file: string/string.asm

.31c3					stringHandler:
.31c3	7c c6 31	jmp ($31c6,x)			jmp 	(stringVectors,x)
.31c6					stringVectors:
>31c6	26 2f					.word StringChrs           ; index 0
>31c8	22 30					.word StrClone             ; index 2
>31ca	9a 2f					.word StringConcat         ; index 4
>31cc	35 2f					.word StringNull           ; index 6
>31ce	51 2f					.word STRCompare           ; index 8
>31d0	48 30					.word CaseString           ; index 10
>31d2	8d 30					.word StringSubstring      ; index 12
>31d4	e1 30					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.31d6					section_end_string:
.31d6					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c19					deTokeniseVector:
>0c19							.fill 	2
.0c1b					lastCharacterClass:
>0c1b							.fill 	1
.0c1c					indent:
>0c1c							.fill 	1
.31d6					ListLine:
.31d6	48		pha				pha
.31d7	a9 04		lda #$04			lda 	#(deTokenPrint) & $FF
.31d9	8d 19 0c	sta $0c19			sta 	deTokeniseVector
.31dc	a9 33		lda #$33			lda 	#(deTokenPrint) >> 8
.31de	8d 1a 0c	sta $0c1a			sta 	1+(deTokeniseVector)
.31e1	68		pla				pla
.31e2					Detokenise:
.31e2	18		clc				clc
.31e3	69 06		adc #$06			adc 	#6
.31e5	8d 1c 0c	sta $0c1c			sta 	indent
.31e8	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.31ea	8d 1b 0c	sta $0c1b			sta 	lastCharacterClass
.31ed	a2 02		ldx #$02			ldx 	#2
.31ef	20 a3 2d	jsr $2da3			jsr 	MInt32False
.31f2	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.31f4	b1 28		lda ($28),y			lda 	(codePtr),y
.31f6	95 48		sta $48,x			sta 	esInt0,x
.31f8	c8		iny				iny
.31f9	b1 28		lda ($28),y			lda 	(codePtr),y
.31fb	95 50		sta $50,x			sta 	esInt1,x
.31fd	a9 84		lda #$84			lda 	#LTYLineNumber
.31ff	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.3202	a9 0a		lda #$0a			lda 	#10 					; base 10
.3204	20 a3 32	jsr $32a3			jsr 	DTPrintInteger 			; print as integer.
.3207	a0 00		ldy #$00			ldy 	#0 						; get length
.3209	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.320b	aa		tax				tax
.320c					_DTPadOut:
.320c	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.320e	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.3211	e8		inx				inx
.3212	ec 1c 0c	cpx $0c1c			cpx 	indent
.3215	d0 f5		bne $320c			bne 	_DTPadOut
.3217	a0 03		ldy #$03			ldy 	#3 						; start position.
.3219					_DTListLoop
.3219	b1 28		lda ($28),y			lda 	(codePtr),y
.321b	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.321d	f0 58		beq $3277			beq 	_DTIsString
.321f	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3221	f0 7c		beq $329f			beq 	_DTIsFloat
.3223	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3225	f0 16		beq $323d			beq 	_DTHexConstant
.3227	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3229	d0 06		bne $3231			bne 	_DTNotEnd
.322b	a9 ff		lda #$ff			lda 	#255 					; print CR
.322d	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.3230	60		rts				rts
.3231					_DTNotEnd:
.3231	c9 00		cmp #$00			cmp 	#0
.3233	30 36		bmi $326b			bmi 	_DTIsToken
.3235	c9 40		cmp #$40			cmp 	#$40
.3237	90 38		bcc $3271			bcc 	_DTIsIdentifier
.3239	a9 0a		lda #$0a			lda 	#10 					; this is the base
.323b	d0 08		bne $3245			bne 	_DTConstant
.323d					_DTHexConstant:
.323d	a9 26		lda #$26			lda 	#"&"
.323f	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.3242	c8		iny				iny
.3243	a9 10		lda #$10			lda 	#16
.3245					_DTConstant:
.3245	48		pha				pha
.3246	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.3248	20 20 33	jsr $3320			jsr 	DTSwitchMode
.324b	a9 86		lda #$86			lda 	#LTYConstant
.324d	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.3250	a2 02		ldx #$02			ldx 	#2
.3252	8a		txa				txa
.3253	a2 0a		ldx #$0a		ldx	#10
.3255	20 0d 2f	jsr $2f0d		jsr	mainHandler
.3258	aa		tax				tax
.3259	20 76 1b	jsr $1b76			jsr 	TOSToTemp0
.325c	68		pla				pla
.325d	85 32		sta $32				sta 	tempShort
.325f	98		tya				tya
.3260	48		pha				pha
.3261	a5 32		lda $32				lda 	tempShort
.3263	20 a3 32	jsr $32a3			jsr 	DTPrintInteger
.3266	68		pla				pla
.3267	a8		tay				tay
.3268	4c 19 32	jmp $3219			jmp 	_DTListLoop
.326b					_DTIsToken:
.326b	20 79 33	jsr $3379			jsr 	DTDecodeToken
.326e	4c 19 32	jmp $3219			jmp 	_DTListLoop
.3271					_DTIsIdentifier:
.3271	20 32 33	jsr $3332			jsr 	DTIdentifier
.3274	4c 19 32	jmp $3219			jmp 	_DTListLoop
.3277					_DTIsString:
.3277	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3279	20 20 33	jsr $3320			jsr 	DTSwitchMode
.327c	a9 81		lda #$81			lda 	#LTYString
.327e	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.3281	a9 22		lda #$22			lda 	#'"'						; open quote
.3283	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.3286	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3288	8a		txa				txa
.3289	a2 0a		ldx #$0a		ldx	#10
.328b	20 0d 2f	jsr $2f0d		jsr	mainHandler
.328e	aa		tax				tax
.328f	20 76 1b	jsr $1b76			jsr 	TOSToTemp0
.3292	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3294	20 b5 32	jsr $32b5			jsr 	DTPrintLengthPrefix
.3297	a9 22		lda #$22			lda 	#'"'
.3299	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.329c	4c 19 32	jmp $3219			jmp 	_DTListLoop
.329f					_DTIsFloat:
>329f	db						.byte 	$DB
.32a0	4c 9f 32	jmp $329f			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1d					tPrintCount:
>0c1d							.fill 	1
.32a3					DTPrintInteger:
.32a3	48		pha				pha
.32a4	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.32a6	85 2a		sta $2a				sta 	temp0
.32a8	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.32aa	85 2b		sta $2b				sta 	1+(temp0)
.32ac	68		pla				pla
.32ad	a8		tay				tay
.32ae	8a		txa				txa
.32af	a2 0c		ldx #$0c		ldx	#12
.32b1	20 0d 2f	jsr $2f0d		jsr	mainHandler
.32b4	aa		tax				tax
.32b5					DTPrintLengthPrefix:
.32b5	aa		tax				tax
.32b6	98		tya				tya
.32b7	48		pha				pha
.32b8	a0 00		ldy #$00			ldy 	#0
.32ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.32bc	8d 1d 0c	sta $0c1d			sta 	tPrintCount
.32bf	f0 1b		beq $32dc			beq 	_DTPLPExit
.32c1					_DTPLPLoop:
.32c1	c8		iny				iny
.32c2	b1 2a		lda ($2a),y			lda 	(temp0),y
.32c4	29 7f		and #$7f			and 	#$7F
.32c6	e0 00		cpx #$00			cpx 	#0
.32c8	f0 0a		beq $32d4			beq 	_DTPLPNoCase
.32ca	c9 41		cmp #$41			cmp 	#"A"
.32cc	90 06		bcc $32d4			bcc 	_DTPLPNoCase
.32ce	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32d0	b0 02		bcs $32d4			bcs 	_DTPLPNoCase
.32d2	49 20		eor #$20			eor 	#"A"^"a"
.32d4					_DTPLPNoCase
.32d4	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.32d7	ce 1d 0c	dec $0c1d			dec 	tPrintCount
.32da	d0 e5		bne $32c1			bne 	_DTPLPLoop
.32dc					_DTPLPExit:
.32dc	68		pla				pla
.32dd	a8		tay				tay
.32de	60		rts				rts
.32df					ListOutputCharacter:
.32df	85 32		sta $32				sta 	tempShort
.32e1	48		pha				pha
.32e2	8a		txa				txa
.32e3	48		pha				pha
.32e4	98		tya				tya
.32e5	48		pha				pha
.32e6	a5 32		lda $32				lda 	tempShort
.32e8	c9 20		cmp #$20			cmp 	#32
.32ea	b0 0c		bcs $32f8			bcs		_LOCHiBit
.32ec	09 40		ora #$40			ora 	#64
.32ee	c9 40		cmp #$40			cmp 	#64
.32f0	f0 06		beq $32f8			beq 	_LOCHiBit
.32f2	c9 5b		cmp #$5b			cmp 	#65+26
.32f4	b0 02		bcs $32f8			bcs 	_LOCHiBit
.32f6	69 20		adc #$20			adc 	#32
.32f8					_LOCHiBit:
.32f8	20 01 33	jsr $3301			jsr 	_LOCCallVector
.32fb	68		pla				pla
.32fc	a8		tay				tay
.32fd	68		pla				pla
.32fe	aa		tax				tax
.32ff	68		pla				pla
.3300					_LOCExit:
.3300	60		rts				rts
.3301					_LOCCallVector:
.3301	6c 19 0c	jmp ($0c19)			jmp 	(deTokeniseVector)
.3304					deTokenPrint:
.3304	c9 00		cmp #$00			cmp 	#0
.3306	30 06		bmi $330e			bmi 	_dtpInk
.3308	a2 16		ldx #$16		ldx	#22
.330a	20 94 12	jsr $1294		jsr	deviceHandler
.330d	60		rts				rts
.330e	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.3310	f0 08		beq $331a			beq 	_dtpCR
.3312	29 07		and #$07			and 	#7
.3314	a2 08		ldx #$08		ldx	#8
.3316	20 94 12	jsr $1294		jsr	deviceHandler
.3319	60		rts				rts
.331a					_dtpCR:
.331a	a2 04		ldx #$04		ldx	#4
.331c	20 94 12	jsr $1294		jsr	deviceHandler
.331f	60		rts				rts
.3320					DTSwitchMode:
.3320	cd 1b 0c	cmp $0c1b			cmp 	LastCharacterClass
.3323	f0 04		beq $3329			beq 	_DTSMNoChange
.3325	8d 1b 0c	sta $0c1b			sta 	LastCharacterClass
.3328					_DTSMExit:
.3328	60		rts				rts
.3329					_DTSMNoChange:
.3329	c9 01		cmp #$01			cmp 	#1
.332b	f0 fb		beq $3328			beq 	_DTSMExit
.332d	a9 20		lda #$20			lda 	#" "
.332f	4c df 32	jmp $32df			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3332					DTIdentifier:
.3332	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3334	20 20 33	jsr $3320			jsr 	DTSwitchMode
.3337	a9 87		lda #$87			lda 	#LTYIdentifier
.3339	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.333c					_DTILoop:
.333c	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.333e	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3340	d0 02		bne $3344			bne 	_DTINotUS
.3342	a9 5f		lda #$5f			lda 	#"_"
.3344					_DTINotUS:
.3344	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.3347	c8		iny				iny
.3348	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.334a	c9 3a		cmp #$3a			cmp 	#$3A
.334c	90 ee		bcc $333c			bcc 	_DTILoop
.334e	c8		iny				iny
.334f	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3351	f0 25		beq $3378			beq 	_DTIExit 					; no postfix.
.3353	48		pha				pha
.3354	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3356	8d 1b 0c	sta $0c1b			sta 	LastCharacterClass
.3359	a9 82		lda #$82			lda 	#LTYPunctuation
.335b	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.335e	68		pla				pla
.335f	c9 3b		cmp #$3b			cmp 	#$3B
.3361	f0 10		beq $3373			beq 	_DTIArray
.3363	4a		lsr a				lsr 	a 							; array flag in C
.3364	08		php				php
.3365	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3367	f0 02		beq $336b			beq 	_DTIDollar
.3369	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.336b					_DTIDollar:
.336b	49 24		eor #$24			eor 	#"$"
.336d	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.3370	28		plp				plp
.3371	90 05		bcc $3378			bcc 	_DTIExit
.3373					_DTIArray:
.3373	a9 28		lda #$28			lda 	#"("
.3375	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.3378					_DTIExit:
.3378	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3379					DTDecodeToken:
.3379	a2 00		ldx #$00			ldx 	#0 							; table number to use
.337b	b1 28		lda ($28),y			lda 	(codePtr),y
.337d	c9 84		cmp #$84			cmp 	#$84
.337f	b0 05		bcs $3386			bcs 	_DTNotShift
.3381	29 03		and #$03			and 	#3 							; get the shift 1..3
.3383	0a		asl a				asl 	a 							; put 2 x in X
.3384	aa		tax				tax
.3385	c8		iny				iny
.3386					_DTNotShift:
.3386	bd 86 36	lda $3686,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3389	85 2a		sta $2a				sta 	temp0 						; point into temp0
.338b	bd 87 36	lda $3687,x			lda 	TokenTableAddress+1,x
.338e	85 2b		sta $2b				sta 	temp0+1
.3390	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3392	c8		iny				iny 								; consume it.
.3393	aa		tax				tax
.3394	98		tya				tya
.3395	48		pha				pha
.3396					_DTFindText:
.3396	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3398	f0 11		beq $33ab			beq 	_DTFoundText
.339a	ca		dex				dex
.339b	a0 00		ldy #$00			ldy 	#0
.339d	38		sec				sec
.339e	b1 2a		lda ($2a),y			lda 	(temp0),y
.33a0	65 2a		adc $2a				adc 	temp0
.33a2	85 2a		sta $2a				sta 	temp0
.33a4	90 f0		bcc $3396			bcc 	_DTFindText
.33a6	e6 2b		inc $2b				inc 	temp0+1
.33a8	4c 96 33	jmp $3396			jmp 	_DTFindText
.33ab					_DTFoundText:
.33ab	a0 01		ldy #$01			ldy 	#1 							; get first character
.33ad	b1 2a		lda ($2a),y			lda 	(temp0),y
.33af	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.33b1	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.33b3	90 11		bcc $33c6			bcc 	_DTIsPunctuation
.33b5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.33b7	b0 0d		bcs $33c6			bcs 	_DTIsPunctuation
.33b9	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.33bb	20 20 33	jsr $3320			jsr 	DTSwitchMode
.33be	a9 83		lda #$83			lda 	#LTYKeyword
.33c0	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.33c3	4c d0 33	jmp $33d0			jmp 	_DTPrint
.33c6					_DTIsPunctuation:
.33c6	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.33c8	20 20 33	jsr $3320			jsr 	DTSwitchMode
.33cb	a9 82		lda #$82			lda 	#LTYPunctuation
.33cd	20 df 32	jsr $32df			jsr 	ListOutputCharacter
.33d0					_DTPrint:
.33d0	a9 01		lda #$01			lda 	#1 							; fix case.
.33d2	20 b5 32	jsr $32b5			jsr 	DTPrintLengthPrefix 		; print it out.
.33d5	a0 00		ldy #$00			ldy 	#0
.33d7	b1 2a		lda ($2a),y			lda 	(temp0),y
.33d9	a8		tay				tay
.33da	b1 2a		lda ($2a),y			lda 	(temp0),y
.33dc	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.33de	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.33e0	90 04		bcc $33e6			bcc 	_DTIsNowPunctuation
.33e2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.33e4	90 05		bcc $33eb			bcc 	_DTPExit
.33e6					_DTIsNowPunctuation:
.33e6	a9 01		lda #$01			lda 	#1
.33e8	8d 1b 0c	sta $0c1b			sta		LastCharacterClass
.33eb					_DTPExit:
.33eb	68		pla				pla
.33ec	a8		tay				tay
.33ed	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c1e					currentSet:
>0c1e							.fill 	1
.33ee					TokenSearch:
.33ee	8a		txa				txa
.33ef	48		pha				pha
.33f0	98		tya				tya
.33f1	48		pha				pha
.33f2	a9 00		lda #$00			lda 	#0
.33f4	8d 1e 0c	sta $0c1e			sta 	currentSet
.33f7					_TSLoop:
.33f7	ad 1e 0c	lda $0c1e			lda 	currentSet 					; 2 x currentset in X
.33fa	0a		asl a				asl 	a
.33fb	aa		tax				tax
.33fc	bd 86 36	lda $3686,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.33ff	85 2a		sta $2a				sta 	temp0
.3401	bd 87 36	lda $3687,x			lda 	TokenTableAddress+1,x
.3404	85 2b		sta $2b				sta 	temp0+1
.3406	20 2d 34	jsr $342d			jsr 	TokenSearchOne 				; search one table
.3409	b0 0d		bcs $3418			bcs 	_TSFound 					; found a token.
.340b	ee 1e 0c	inc $0c1e			inc 	currentSet 					; next set
.340e	ad 1e 0c	lda $0c1e			lda 	currentSet
.3411	c9 04		cmp #$04			cmp 	#4
.3413	d0 e2		bne $33f7			bne 	_TSLoop 					; back if not done all four.
.3415	18		clc				clc 								; clear carry and exit
.3416	90 10		bcc $3428			bcc 	_TSExit
.3418					_TSFound:
.3418	48		pha				pha 								; save token
.3419	ad 1e 0c	lda $0c1e			lda 	currentSet					; if set zero no shift
.341c	f0 05		beq $3423			beq 	_TSNoShift
.341e	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3420	20 dc 34	jsr $34dc			jsr 	TokenWrite
.3423					_TSNoShift:
.3423	68		pla				pla 								; get token back
.3424	20 dc 34	jsr $34dc			jsr 	TokenWrite 					; write it
.3427	38		sec				sec 								; carry set indicating success
.3428					_TSExit:
.3428	68		pla				pla
.3429	a8		tay				tay
.342a	68		pla				pla
.342b	aa		tax				tax
.342c	60		rts				rts
.342d					TokenSearchOne:
.342d	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.342f					_TSOLoop:
.342f	a0 00		ldy #$00			ldy 	#0
.3431	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3433	f0 26		beq $345b			beq 	_TSOFail 					; if zero, end of table
.3435	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3438	f0 11		beq $344b			beq 	_TSOCheckText
.343a					_TSONext:
.343a	e8		inx				inx 								; bump token
.343b	a0 00		ldy #$00			ldy 	#0							; get length
.343d	b1 2a		lda ($2a),y			lda 	(temp0),y
.343f	38		sec				sec
.3440	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3442	85 2a		sta $2a				sta 	temp0
.3444	90 e9		bcc $342f			bcc 	_TSOLoop
.3446	e6 2b		inc $2b				inc 	temp0+1
.3448	4c 2f 34	jmp $342f			jmp 	_TSOLoop
.344b					_TSOCheckText:
.344b	a8		tay				tay 								; compare length downto 1.
.344c					_TSOCheckLoop:
.344c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.344e	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3451	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3453	d0 e5		bne $343a			bne 	_TSONext 					; different goto next.
.3455	88		dey				dey 								; do all
.3456	d0 f4		bne $344c			bne 	_TSOCheckLoop
.3458	8a		txa				txa 								; return token in A and carry set
.3459	38		sec				sec
.345a	60		rts				rts
.345b					_TSOFail:
.345b	18		clc				clc
.345c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.345d					TokTest:
.345d	a2 ff		ldx #$ff				ldx 	#$FF
.345f	9a		txs					txs
.3460	a9 7d		lda #$7d			lda 	#(TokenText1) & $FF
.3462	85 28		sta $28				sta 	codePtr
.3464	a9 34		lda #$34			lda 	#(TokenText1) >> 8
.3466	85 29		sta $29				sta 	1+(codePtr)
.3468	20 7d 34	jsr $347d				jsr 	Tokenise
.346b	a2 00		ldx #$00	TokStop:	ldx 	#0
.346d	bd 7d 34	lda $347d,x	_TokCheck:	lda 	TokenBytes1,x
.3470	dd 22 0c	cmp $0c22,x				cmp 	tokenBuffer,x
.3473	d0 fe		bne $3473	_TokFail:	bne 	_TokFail
.3475	e8		inx					inx
.3476	c9 80		cmp #$80				cmp 	#$80
.3478	d0 f3		bne $346d				bne 	_TokCheck
.347a	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.347d					TokenText1:
.347d					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c1f					tokenHeader:
>0c1f							.fill 	3
.0c22					tokenBuffer:
>0c22							.fill 	256
.0d22					tokenBufferIndex:
>0d22							.fill 	1
.347d					Tokenise:
.347d	20 f5 34	jsr $34f5			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3480					TokeniseASCIIZ:
.3480	20 06 35	jsr $3506			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3483	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3485	8d 22 0d	sta $0d22			sta 	tokenBufferIndex
.3488	a8		tay				tay 								; start pointer
.3489	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.348b	8d 22 0c	sta $0c22			sta 	tokenBuffer
.348e					_TokLoop:
.348e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3490	f0 46		beq $34d8			beq 	_TokExit 					; if zero, then exit.
.3492	c8		iny				iny 								; skip over spaces.
.3493	c9 20		cmp #$20			cmp 	#" "
.3495	f0 f7		beq $348e			beq 	_TokLoop
.3497	88		dey				dey 								; point back to character.
.3498	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.349a	f0 18		beq $34b4			beq 	_TokHexConst
.349c	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.349e	f0 23		beq $34c3			beq 	_TokQString
.34a0	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.34a2	b0 26		bcs $34ca			bcs 	_TokPunctuation
.34a4	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.34a6	b0 29		bcs $34d1			bcs 	_TokIdentifier
.34a8	c9 3a		cmp #$3a			cmp 	#"9"+1
.34aa	b0 1e		bcs $34ca			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.34ac	c9 30		cmp #$30			cmp 	#"0"
.34ae	90 1a		bcc $34ca			bcc 	_TokPunctuation 			; < 0, punctuation.
.34b0	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.34b2	d0 08		bne $34bc			bne 	_TokConst
.34b4					_TokHexConst:
.34b4	c8		iny				iny									; consume token.
.34b5	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.34b7	20 dc 34	jsr $34dc			jsr 	TokenWrite
.34ba	a9 10		lda #$10			lda 	#16
.34bc					_TokConst:
.34bc	20 c4 35	jsr $35c4			jsr 	TokeniseInteger
.34bf	b0 cd		bcs $348e			bcs 	_TokLoop
.34c1	90 17		bcc $34da			bcc 	_TokFail
.34c3					_TokQString:
.34c3	20 5a 36	jsr $365a			jsr 	TokeniseString
.34c6	b0 c6		bcs $348e			bcs 	_TokLoop
.34c8	90 10		bcc $34da			bcc 	_TokFail
.34ca					_TokPunctuation:
.34ca	20 39 36	jsr $3639			jsr 	TokenisePunctuation
.34cd	b0 bf		bcs $348e			bcs 	_TokLoop
.34cf	90 09		bcc $34da			bcc 	_TokFail
.34d1					_TokIdentifier:
.34d1	20 35 35	jsr $3535			jsr 	TokeniseIdentifier
.34d4	b0 b8		bcs $348e			bcs 	_TokLoop
.34d6	90 02		bcc $34da			bcc 	_TokFail
.34d8					_TokExit:
.34d8	38		sec				sec
.34d9	60		rts				rts
.34da					_TokFail:
.34da	18		clc				clc
.34db	60		rts				rts
.34dc					TokenWrite:
.34dc	85 32		sta $32				sta 	tempShort 					; save XA
.34de	48		pha				pha
.34df	8a		txa				txa
.34e0	48		pha				pha
.34e1	a5 32		lda $32				lda 	tempShort
.34e3	ae 22 0d	ldx $0d22			ldx 	tokenBufferIndex 			; geet index
.34e6	9d 22 0c	sta $0c22,x			sta 	tokenBuffer,x 				; write byte to buffer
.34e9	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.34eb	9d 23 0c	sta $0c23,x			sta 	tokenBuffer+1,x
.34ee	ee 22 0d	inc $0d22			inc 	tokenBufferIndex 			; bump index
.34f1	68		pla				pla
.34f2	aa		tax				tax
.34f3	68		pla				pla
.34f4	60		rts				rts
.34f5					TokeniseMakeASCIIZ:
.34f5	a0 00		ldy #$00			ldy 	#0							; get length of string.
.34f7	b1 28		lda ($28),y			lda 	(codePtr),y
.34f9	a8		tay				tay
.34fa	c8		iny				iny 								; +1, the NULL goes here.
.34fb	a9 00		lda #$00			lda 	#0
.34fd	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.34ff	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3501	d0 02		bne $3505			bne 	_TMKAExit
.3503	e6 29		inc $29				inc 	codePtr+1
.3505					_TMKAExit:
.3505	60		rts				rts
.3506					TokeniseFixCase:
.3506	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3508	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.350a					_TFCFlipQ:
.350a	8a		txa				txa
.350b	49 01		eor #$01			eor 	#1
.350d	aa		tax				tax
.350e					_TFCLoop:
.350e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3510	f0 22		beq $3534			beq 	_TFCExit 					; if zero exit.
.3512	c9 20		cmp #$20			cmp 	#32 						; if control
.3514	90 1a		bcc $3530			bcc 	_TFCControl
.3516	c8		iny				iny 								; preconsume
.3517	c9 22		cmp #$22			cmp 	#'"'
.3519	f0 ef		beq $350a			beq 	_TFCFlipQ
.351b	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.351d	90 ef		bcc $350e			bcc 	_TFCLoop
.351f	c9 7b		cmp #$7b			cmp 	#"z"+1
.3521	b0 eb		bcs $350e			bcs 	_TFCLoop
.3523	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3525	d0 e7		bne $350e			bne 	_TFCLoop
.3527	88		dey				dey
.3528	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.352a					_TFCWrite:
.352a	91 28		sta ($28),y			sta 	(codePtr),y
.352c	c8		iny				iny
.352d	4c 0e 35	jmp $350e			jmp 	_TFCLoop
.3530					_TFCControl:
.3530	a9 20		lda #$20			lda 	#" "
.3532	d0 f6		bne $352a			bne 	_TFCWrite
.3534					_TFCExit:
.3534	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3535					TokeniseIdentifier:
.3535	a2 00		ldx #$00			ldx 	#0
.3537					_TICopyID:
.3537	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3539	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.353b	f0 16		beq $3553			beq 	_TICopyUnderscore
.353d	c9 2e		cmp #$2e			cmp 	#"."
.353f	f0 14		beq $3555			beq 	_TICopyIn
.3541	c9 30		cmp #$30			cmp 	#"0"
.3543	90 1b		bcc $3560			bcc 	_TIEndCopy
.3545	c9 3a		cmp #$3a			cmp 	#"9"+1
.3547	90 0c		bcc $3555			bcc 	_TICopyIn
.3549	c9 41		cmp #$41			cmp 	#"A"
.354b	90 13		bcc $3560			bcc 	_TIEndCopy
.354d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.354f	b0 0f		bcs $3560			bcs		_TIEndCopy
.3551	90 02		bcc $3555			bcc 	_TICopyIn
.3553					_TICopyUnderScore:
.3553	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3555					_TICopyIn:
.3555	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3556	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3559	8e cf 0a	stx $0acf			stx 	convertBuffer
.355c	c8		iny				iny 								; next character
.355d	4c 37 35	jmp $3537			jmp 	_TICopyID 					; loop round
.3560					_TIEndCopy:
.3560	a9 24		lda #$24			lda 	#"$"
.3562	20 b7 35	jsr $35b7			jsr 	TIDCheckCopy
.3565	a9 23		lda #$23			lda 	#"#"
.3567	20 b7 35	jsr $35b7			jsr 	TIDCheckCopy
.356a	a9 28		lda #$28			lda 	#"("
.356c	20 b7 35	jsr $35b7			jsr 	TIDCheckCopy
.356f	20 ee 33	jsr $33ee			jsr 	TokenSearch 				; is it a token
.3572	b0 41		bcs $35b5			bcs 	_TIExit 					; if so, then exit.
.3574	98		tya				tya
.3575	48		pha				pha
.3576	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3578	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.357b	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.357e	c9 28		cmp #$28			cmp 	#"("
.3580	d0 02		bne $3584			bne 	_TINotArray
.3582	ca		dex				dex 								; yes, remove it and convert to array.
.3583	c8		iny				iny
.3584					_TINotArray:
.3584	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3587	c9 24		cmp #$24			cmp 	#"$"
.3589	d0 03		bne $358e			bne 	_TINotString
.358b	ca		dex				dex
.358c	c8		iny				iny
.358d	c8		iny				iny
.358e					_TINotString:
.358e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3591	c9 23		cmp #$23			cmp 	#"#"
.3593	d0 05		bne $359a			bne 	_TINotFloat
.3595	ca		dex				dex
.3596	c8		iny				iny
.3597	c8		iny				iny
.3598	c8		iny				iny
.3599	c8		iny				iny
.359a					_TINotFloat:
.359a	e8		inx				inx 								; write end marker for identifier.
.359b	98		tya				tya
.359c	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.359f	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.35a2	a2 01		ldx #$01			ldx 	#1
.35a4					_TIOutput:
.35a4	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.35a7	29 3f		and #$3f			and 	#$3F
.35a9	48		pha				pha
.35aa	20 dc 34	jsr $34dc			jsr 	TokenWrite
.35ad	e8		inx				inx
.35ae	68		pla				pla
.35af	c9 3a		cmp #$3a			cmp 	#$3A
.35b1	90 f1		bcc $35a4			bcc 	_TIOutput
.35b3	68		pla				pla
.35b4	a8		tay				tay
.35b5					_TIExit:
.35b5	38		sec				sec 								; this can't fail.
.35b6	60		rts				rts
.35b7					TIDCheckCopy:
.35b7	d1 28		cmp ($28),y			cmp 	(codePtr),y
.35b9	d0 08		bne $35c3			bne 	_TIDCCExit
.35bb	e8		inx				inx
.35bc	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.35bf	8e cf 0a	stx $0acf			stx 	convertBuffer
.35c2	c8		iny				iny
.35c3					_TIDCCExit:
.35c3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.35c4					TokeniseInteger:
.35c4	85 2c		sta $2c				sta 	temp1 						; save base
.35c6	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.35c8	8e cf 0a	stx $0acf			stx 	convertBuffer
.35cb					_TIGetChars:
.35cb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.35cd	c9 30		cmp #$30			cmp 	#"0"
.35cf	90 1f		bcc $35f0			bcc 	_TIEndGet
.35d1	c9 3a		cmp #$3a			cmp 	#"9"+1
.35d3	90 10		bcc $35e5			bcc 	_TIHaveChar
.35d5	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.35d7	c9 0a		cmp #$0a			cmp 	#10
.35d9	f0 15		beq $35f0			beq 	_TIEndGet
.35db	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.35dd	c9 41		cmp #$41			cmp 	#"A"
.35df	90 0f		bcc $35f0			bcc 	_TIEndGet
.35e1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.35e3	b0 0b		bcs $35f0			bcs 	_TIEndGet
.35e5					_TIHaveChar:
.35e5	e8		inx				inx 								; write into buffer.
.35e6	8e cf 0a	stx $0acf			stx 	convertBuffer
.35e9	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.35ec	c8		iny				iny 								; next char
.35ed	4c cb 35	jmp $35cb			jmp 	_TIGetChars
.35f0					_TIEndGet:
.35f0	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.35f2	f0 1c		beq $3610			beq 	_TIFail
.35f4	98		tya				tya
.35f5	48		pha				pha
.35f6	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.35f8	85 2a		sta $2a				sta 	temp0
.35fa	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.35fc	85 2b		sta $2b				sta 	1+(temp0)
.35fe	a9 00		lda #$00			lda 	#0 							; stack 0
.3600	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3602	a2 14		ldx #$14		ldx	#20
.3604	20 0d 2f	jsr $2f0d		jsr	mainHandler
.3607	68		pla				pla
.3608	a8		tay				tay
.3609	90 05		bcc $3610			bcc 	_TIFail 					; didn't convert.
.360b	20 12 36	jsr $3612			jsr 	TIRecursiveOut 				; recursive output ?
.360e	38		sec				sec
.360f	60		rts				rts
.3610					_TIFail:
.3610	18		clc				clc
.3611	60		rts				rts
.3612					TIRecursiveOut:
.3612	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.3614	29 3f		and #$3f			and 	#$3F
.3616	09 40		ora #$40			ora 	#$40
.3618	48		pha				pha
.3619	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.361b	29 c0		and #$c0			and 	#$C0
.361d	05 50		ora $50				ora 	esInt1
.361f	05 58		ora $58				ora 	esInt2
.3621	05 60		ora $60				ora 	esInt3
.3623	f0 10		beq $3635			beq 	_TIRONoRecursion
.3625	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3627					_TIROShift:
.3627	46 60		lsr $60				lsr 	esInt3
.3629	66 58		ror $58				ror 	esInt2
.362b	66 50		ror $50				ror 	esInt1
.362d	66 48		ror $48				ror 	esInt0
.362f	ca		dex				dex
.3630	d0 f5		bne $3627			bne 	_TIROShift
.3632	20 12 36	jsr $3612			jsr 	TIRecursiveOut 				; call recursively
.3635					_TIRONoRecursion:
.3635	68		pla				pla 								; pull the old bit.
.3636	4c dc 34	jmp $34dc			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3639					TokenisePunctuation:
.3639	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.363b	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.363e	c8		iny				iny
.363f	b1 28		lda ($28),y			lda 	(codePtr),y
.3641	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3644	c8		iny				iny 								; Y is +2
.3645	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3647	8d cf 0a	sta $0acf			sta 	convertBuffer
.364a	20 ee 33	jsr $33ee			jsr 	TokenSearch 				; search for that token.
.364d	b0 0a		bcs $3659			bcs 	_TIFound
.364f	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3652	88		dey				dey 								; Y is now +1
.3653	20 ee 33	jsr $33ee			jsr 	TokenSearch 				; search for that token.
.3656	b0 01		bcs $3659			bcs 	_TIFound
.3658	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3659					_TIFound:
.3659	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.365a					TokeniseString:
.365a	c8		iny				iny 								; skip opening quote
.365b	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.365d	84 2a		sty $2a				sty 	temp0 						; save start.
.365f					_TSGetLength:
.365f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3661	f0 21		beq $3684			beq 	_TSFail						; end of line, fail
.3663	c8		iny				iny
.3664	e8		inx				inx
.3665	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3667	d0 f6		bne $365f			bne 	_TSGetLength
.3669	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.366b	20 dc 34	jsr $34dc			jsr 	TokenWrite
.366e	8a		txa				txa 								; output length
.366f	20 dc 34	jsr $34dc			jsr 	TokenWrite
.3672	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3674	e0 00		cpx #$00			cpx 	#0 							; check ended
.3676	f0 09		beq $3681			beq 	_TSExit
.3678					_TSOutput:
.3678	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.367a	20 dc 34	jsr $34dc			jsr 	TokenWrite
.367d	c8		iny				iny
.367e	ca		dex				dex
.367f	d0 f7		bne $3678			bne 	_TSOutput
.3681					_TSExit:
.3681	c8		iny				iny 								; skip ending quote
.3682	38		sec				sec 								; return CS.
.3683	60		rts				rts
.3684					_TSFail:
.3684	18		clc				clc
.3685	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3686					TokenTableAddress:
>3686	8e 36						.word 	Group0Text
>3688	5b 38						.word 	Group1Text
>368a	96 39						.word 	Group2Text
>368c	a9 39						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.368e					Group0Text:
>368e	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3692	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3695	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3699	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>369c	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>369f	01 be					.byte $01,$be                          ; $8b >
>36a1	01 bc					.byte $01,$bc                          ; $8c <
>36a3	01 bd					.byte $01,$bd                          ; $8d =
>36a5	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>36a8	01 ab					.byte $01,$ab                          ; $8f +
>36aa	01 ad					.byte $01,$ad                          ; $90 -
>36ac	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>36af	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>36b2	01 aa					.byte $01,$aa                          ; $93 *
>36b4	01 af					.byte $01,$af                          ; $94 /
>36b6	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>36ba	01 de					.byte $01,$de                          ; $96 ^
>36bc	01 a1					.byte $01,$a1                          ; $97 !
>36be	01 bf					.byte $01,$bf                          ; $98 ?
>36c0	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>36c7	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>36cd	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>36d1	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>36d4	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>36dc	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>36e2	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>36e7	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>36ec	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>36f1	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>36f7	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>36ff	01 a8					.byte $01,$a8                          ; $a4 (
>3701	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3706	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>370b	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3710	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3718	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>371d	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3722	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3728	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>372d	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3732	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3737	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>373e	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3745	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>374a	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3751	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3758	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>375e	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3765	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>376b	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3773	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3779	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>377e	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3784	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>378a	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3790	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3795	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>379a	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>37a1	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>37a8	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>37b0	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>37b8	01 c0					.byte $01,$c0                          ; $c3 @
>37ba	01 fe					.byte $01,$fe                          ; $c4 ~
>37bc	01 a6					.byte $01,$a6                          ; $c5 &
>37be	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>37c4	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>37cc	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>37d0	01 a9					.byte $01,$a9                          ; $c9 )
>37d2	01 ba					.byte $01,$ba                          ; $ca :
>37d4	01 ac					.byte $01,$ac                          ; $cb ,
>37d6	01 bb					.byte $01,$bb                          ; $cc ;
>37d8	01 a7					.byte $01,$a7                          ; $cd '
>37da	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>37dd	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>37e2	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>37e7	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>37ed	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>37f1	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>37f5	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>37f9	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>37ff	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3804	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3808	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>380e	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>3813	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3819	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>3820	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3825	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>382c	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3831	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3836	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>383b	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>383f	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3845	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3849	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3850	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3856	01 ae					.byte $01,$ae                          ; $e6 .
>3858	01 a3					.byte $01,$a3                          ; $e7 #
>385a	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.385b					Group1Text:
>385b	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3861	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3866	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>386b	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3870	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3874	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3878	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>387d	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3885	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3889	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>388e	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3893	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3897	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>389d	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>38a1	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>38a5	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>38a9	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>38ad	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>38b1	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>38b5	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>38b9	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>38bd	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>38c1	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>38c5	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>38c9	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>38cd	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>38d1	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>38d5	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>38d9	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>38dd	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>38e1	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>38e5	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>38e9	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>38ed	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>38f1	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>38f5	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>38f9	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>38fd	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3901	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3905	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3909	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>390d	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3911	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3915	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3919	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>391d	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3921	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3925	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3929	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>392d	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3931	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3935	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3939	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>393d	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3941	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3945	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3949	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>394d	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3951	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3955	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3959	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>395d	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3961	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3965	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3969	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>396d	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3971	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3975	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3979	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>397d	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3981	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3985	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3989	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>398d	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3991	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3995	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3996					Group2Text:
>3996	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>399c	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>39a2	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>39a8	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.39a9					Group3Text:
>39a9	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>39b0	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>39b7	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.39b8					tokeniserHandler:
.39b8	7c bb 39	jmp ($39bb,x)			jmp 	(tokeniserVectors,x)
.39bb					tokeniserVectors:
>39bb	e2 31					.word Detokenise           ; index 0
>39bd	d6 31					.word ListLine             ; index 2
>39bf	5d 34					.word TokTest              ; index 4
>39c1	7d 34					.word Tokenise             ; index 6
>39c3	80 34					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.39c5					section_end_tokeniser:
.39c5					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d23					varHash:
>0d23							.fill	1
.0d24					varType:
>0d24							.fill 	1
.0d25					varEnd:
>0d25							.fill 	1
.003b					hashList:
>003b							.fill 	2
.39c5					AccessVariable:
.39c5	aa		tax				tax 								; stack in X
.39c6	c8		iny				iny									; look at second character
.39c7	b1 28		lda ($28),y			lda 	(codePtr),y
.39c9	88		dey				dey
.39ca	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.39cc	d0 15		bne $39e3			bne 	_AVLong 					; no, always use the hash tables.
.39ce	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.39d0	38		sec				sec 	 							; make it 0-25
.39d1	e9 01		sbc #$01			sbc 	#1
.39d3	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.39d4	0a		asl a				asl 	a
.39d5	95 48		sta $48,x			sta 	esInt0,x
.39d7	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.39d9	95 50		sta $50,x			sta 	esInt1,x
.39db	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.39dd	95 40		sta $40,x			sta 	esType,x
.39df	c8		iny				iny 								; skip over the variable reference in the code.
.39e0	c8		iny				iny  								; (1 letter, 1 type)
.39e1	8a		txa				txa 								; stack in A to return.
.39e2	60		rts				rts
.39e3					_AVLong:
.39e3	8a		txa				txa
.39e4	48		pha				pha
.39e5	20 2c 3a	jsr $3a2c			jsr 	AccessSetup 				; set up the basic information we need for later
.39e8	20 6e 3c	jsr $3c6e			jsr 	FindVariable 				; does the variable exist already ?
.39eb	b0 0e		bcs $39fb			bcs 	_AVFound 					; yes, then its found
.39ed	ad 24 0d	lda $0d24			lda 	varType 					; otherwise, is the variable type an array
.39f0	4a		lsr a				lsr 	a
.39f1	90 05		bcc $39f8			bcc 	_AVCanCreate 				; if not, we can autocreate
.39f3	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.39f5	20 b5 12	jsr $12b5		jsr	errorHandler
.39f8					_AVCanCreate:
.39f8	20 e1 3a	jsr $3ae1			jsr 	CreateVariable 				; variable does not exist, create it.
.39fb					_AVFound:
.39fb	68		pla				pla
.39fc	aa		tax				tax
.39fd	18		clc				clc 								; copy temp0 (variable record address)
.39fe	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3a00	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3a02	95 48		sta $48,x			sta 	esInt0,x
.3a04	a5 2b		lda $2b				lda 	temp0+1
.3a06	69 00		adc #$00			adc 	#0
.3a08	95 50		sta $50,x			sta 	esInt1,x
.3a0a	a9 00		lda #$00			lda 	#0
.3a0c	95 58		sta $58,x			sta 	esInt2,x
.3a0e	95 60		sta $60,x			sta 	esInt3,x
.3a10	ac 24 0d	ldy $0d24			ldy 	varType 					; get the type ID from the type.
.3a13	b9 ec 39	lda $39ec,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3a16	95 40		sta $40,x			sta 	esType,x
.3a18	ac 25 0d	ldy $0d25			ldy 	varEnd 						; restore Y
.3a1b	ad 24 0d	lda $0d24			lda 	VarType 					; get variable type, put LSB into C
.3a1e	4a		lsr a				lsr 	a
.3a1f	90 03		bcc $3a24			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3a21	20 69 3a	jsr $3a69			jsr 	AccessArray 				; array lookup. if LSB was set.
.3a24					_AVNotArray:
.3a24	8a		txa				txa 								; return stack in A and return
.3a25	60		rts				rts
.3a26					_AVTypeTable:
>3a26	80 80						.byte 	$80,$80						; integer
>3a28	c0 c0						.byte 	$C0,$C0 					; string
>3a2a	81 81						.byte 	$81,$81 					; float
.3a2c					AccessSetup:
.3a2c	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3a2e	8d 23 0d	sta $0d23			sta 	varHash
.3a31	98		tya				tya
.3a32	48		pha				pha
.3a33	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3a35	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3a37	b0 0b		bcs $3a44			bcs 	_ASComplete
.3a39	18		clc				clc 								; add to the hash. Might improve this.
.3a3a	6d 23 0d	adc $0d23			adc 	varHash
.3a3d	8d 23 0d	sta $0d23			sta 	varHash
.3a40	c8		iny				iny 								; next character
.3a41	4c 33 3a	jmp $3a33			jmp 	_ASLoop
.3a44					_ASComplete:
.3a44	8d 24 0d	sta $0d24			sta 	varType 					; save variable type byte
.3a47	c8		iny				iny
.3a48	8c 25 0d	sty $0d25			sty 	varEnd 						; save the ending position.
.3a4b	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3a4c	e9 3a		sbc #$3a			sbc 	#$3A
.3a4e	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3a4f	0a		asl a				asl 	a
.3a50	0a		asl a				asl 	a
.3a51	0a		asl a				asl 	a 							; 2 bytes/word
.3a52	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3a54	ad 23 0d	lda $0d23			lda 	varHash 					; get hash
.3a57	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3a59	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3a5a	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3a5c	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3a5e	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3a60	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3a62	69 00		adc #$00			adc 	#0
.3a64	85 3c		sta $3c				sta 	hashList+1
.3a66	68		pla				pla
.3a67	a8		tay				tay
.3a68	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3a69					AccessArray:
.3a69	e8		inx				inx
.3a6a	8a		txa				txa
.3a6b	a2 06		ldx #$06		ldx	#6
.3a6d	20 0d 2f	jsr $2f0d		jsr	mainHandler
.3a70	48		pha				pha
.3a71	a2 00		ldx #$00		ldx	#0
.3a73	20 0d 2f	jsr $2f0d		jsr	mainHandler
.3a76	68		pla				pla
.3a77	aa		tax				tax
.3a78	ca		dex				dex
.3a79	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.3a7b	15 59		ora $59,x			ora 	esInt2+1,x
.3a7d	d0 33		bne $3ab2			bne 	_AABadIndex
.3a7f	98		tya				tya
.3a80	48		pha				pha
.3a81	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.3a83	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3a85	b5 50		lda $50,x			lda 	esInt1,x
.3a87	85 2b		sta $2b				sta 	temp0+1
.3a89	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3a8b	b5 49		lda $49,x			lda 	esInt0+1,x
.3a8d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3a8f	c8		iny				iny
.3a90	b5 51		lda $51,x			lda 	esInt1+1,x
.3a92	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.3a94	b0 1c		bcs $3ab2			bcs 	_AABadIndex 				; if >= then fail.
.3a96	e8		inx				inx 								; point to index
.3a97	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3a99	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a9b	20 b7 3a	jsr $3ab7			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3a9e	ca		dex				dex
.3a9f	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3aa1	18		clc				clc
.3aa2	b5 49		lda $49,x			lda 	esInt0+1,x
.3aa4	71 2a		adc ($2a),y			adc 	(temp0),y
.3aa6	95 48		sta $48,x			sta 	esInt0,x
.3aa8	b5 51		lda $51,x			lda 	esInt1+1,x
.3aaa	c8		iny				iny
.3aab	71 2a		adc ($2a),y			adc 	(temp0),y
.3aad	95 50		sta $50,x			sta 	esInt1,x
.3aaf	68		pla				pla
.3ab0	a8		tay				tay
.3ab1	60		rts				rts
.3ab2					_AABadIndex:
.3ab2	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3ab4	20 b5 12	jsr $12b5		jsr	errorHandler
.3ab7					MultiplyTOSByA:
.3ab7	48		pha				pha
.3ab8	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3aba	85 2c		sta $2c				sta 	temp1
.3abc	b5 50		lda $50,x			lda 	esInt1,x
.3abe	85 2d		sta $2d				sta 	temp1+1
.3ac0	68		pla				pla
.3ac1	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3ac3	36 50		rol $50,x			rol 	esInt1,x
.3ac5	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3ac7	f0 17		beq $3ae0			beq 	_MTBAExit
.3ac9	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.3acb	d0 0f		bne $3adc			bne 	_MTBANotFloat
.3acd	48		pha				pha
.3ace	18		clc				clc 								; so this will make it x 3
.3acf	b5 48		lda $48,x			lda 	esInt0,x
.3ad1	65 2c		adc $2c				adc 	temp1
.3ad3	95 48		sta $48,x			sta 	esInt0,x
.3ad5	b5 50		lda $50,x			lda 	esInt1,x
.3ad7	65 2d		adc $2d				adc 	temp1+1
.3ad9	95 50		sta $50,x			sta 	esInt1,x
.3adb	68		pla				pla
.3adc					_MTBANotFloat:
.3adc	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3ade	36 50		rol $50,x			rol 	esInt1,x
.3ae0					_MTBAExit:
.3ae0	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3ae1					CreateVariable:
.3ae1	98		tya				tya 								; push Y on the stack twice.
.3ae2	48		pha				pha									; position in code of the new variable.
.3ae3	48		pha				pha
.3ae4	ae 24 0d	ldx $0d24			ldx 	varType 					; get var type 0-5 from the var type
.3ae7	bd 0b 3b	lda $3b0b,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3aea	48		pha				pha 								; save length
.3aeb	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3aed	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3aef	a5 36		lda $36				lda 	lowMemory+1
.3af1	85 2b		sta $2b				sta 	temp0+1
.3af3	68		pla				pla 								; get length
.3af4	18		clc				clc 								; add to low memory.
.3af5	65 35		adc $35				adc 	lowMemory
.3af7	85 35		sta $35				sta 	lowMemory
.3af9	90 08		bcc $3b03			bcc 	_CVNoCarry
.3afb	e6 36		inc $36				inc 	lowMemory+1
.3afd	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3aff	c5 34		cmp $34				cmp 	highMemory+1
.3b01	b0 3d		bcs $3b40			bcs 	_CVMemory
.3b03					_CVNoCarry:
.3b03	ad 23 0d	lda $0d23			lda 	varHash 					; store hash at offset 4.
.3b06	a0 04		ldy #$04			ldy 	#4
.3b08	91 2a		sta ($2a),y			sta 	(temp0),y
.3b0a	68		pla				pla 								; offset, work out where the variable name is.
.3b0b	18		clc				clc
.3b0c	65 28		adc $28				adc 	codePtr
.3b0e	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3b10	91 2a		sta ($2a),y			sta 	(temp0),y
.3b12	a5 29		lda $29				lda 	codePtr+1
.3b14	69 00		adc #$00			adc 	#0
.3b16	c8		iny				iny
.3b17	91 2a		sta ($2a),y			sta 	(temp0),y
.3b19	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3b1c	b0 03		bcs $3b21			bcs 	_CVNotImmediate
.3b1e	20 83 3b	jsr $3b83			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3b21					_CVNotImmediate:
.3b21	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3b23	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3b25	91 2a		sta ($2a),y			sta 	(temp0),y
.3b27	c8		iny				iny
.3b28	b1 3b		lda ($3b),y			lda 	(hashList),y
.3b2a	91 2a		sta ($2a),y			sta 	(temp0),y
.3b2c	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3b2e	91 3b		sta ($3b),y			sta 	(hashList),y
.3b30	88		dey				dey
.3b31	a5 2a		lda $2a				lda 	temp0
.3b33	91 3b		sta ($3b),y			sta 	(hashList),y
.3b35	ad 24 0d	lda $0d24			lda 	varType 					; type in A
.3b38	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3b3a	20 4b 3b	jsr $3b4b			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3b3d	68		pla				pla
.3b3e	a8		tay				tay
.3b3f	60		rts				rts
.3b40					_CVMemory:
.3b40	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3b42	20 b5 12	jsr $12b5		jsr	errorHandler
>3b45	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3b47	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3b49	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3b4b					ZeroTemp0Y:
.3b4b	4a		lsr a				lsr 	a 							; bit 0 in carry
.3b4c	0a		asl a				asl 	a
.3b4d	b0 19		bcs $3b68			bcs 	_ZTExit 					; we don't initialise arrays.
.3b4f	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3b51	f0 16		beq $3b69			beq 	_ZTWriteNullString 			; write "" string
.3b53	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3b55	f0 22		beq $3b79			beq 	_ZTWriteFloat
.3b57	98		tya				tya
.3b58	48		pha				pha
.3b59	a9 00		lda #$00			lda 	#0
.3b5b	91 2a		sta ($2a),y			sta 	(temp0),y
.3b5d	c8		iny				iny
.3b5e	91 2a		sta ($2a),y			sta 	(temp0),y
.3b60	c8		iny				iny
.3b61	91 2a		sta ($2a),y			sta 	(temp0),y
.3b63	c8		iny				iny
.3b64	91 2a		sta ($2a),y			sta 	(temp0),y
.3b66	68		pla				pla
.3b67	a8		tay				tay
.3b68					_ZTExit:
.3b68	60		rts				rts
.3b69					_ZTWriteNullString:
.3b69	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3b6b	8d ce 0a	sta $0ace			sta 	NullString
.3b6e	a9 ce		lda #$ce			lda 	#NullString & $FF
.3b70	91 2a		sta ($2a),y			sta 	(temp0),y
.3b72	a9 0a		lda #$0a			lda 	#NullString >> 8
.3b74	c8		iny				iny
.3b75	91 2a		sta ($2a),y			sta 	(temp0),y
.3b77	88		dey				dey
.3b78	60		rts				rts
.3b79					_ZTWriteFloat:
.3b79	8a		txa				txa
.3b7a	48		pha				pha
.3b7b	a2 1e		ldx #$1e		ldx	#30
.3b7d	20 a2 16	jsr $16a2		jsr	floatingpointHandler
.3b80	68		pla				pla
.3b81	aa		tax				tax
.3b82	60		rts				rts
.3b83					CloneVariableName:
.3b83	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3b85	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b87	85 2e		sta $2e				sta 	temp2
.3b89	c8		iny				iny
.3b8a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b8c	85 2f		sta $2f				sta 	temp2+1
.3b8e	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3b90	91 2a		sta ($2a),y			sta 	(temp0),y
.3b92	88		dey				dey
.3b93	a5 35		lda $35				lda 	lowMemory
.3b95	91 2a		sta ($2a),y			sta 	(temp0),y
.3b97	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3b99					_CVNCopy:
.3b99	b1 2e		lda ($2e),y			lda		(temp2),y
.3b9b	91 35		sta ($35),y			sta 	(lowMemory),y
.3b9d	c8		iny				iny
.3b9e	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3ba0	90 f7		bcc $3b99			bcc 	_CVNCopy
.3ba2	98		tya				tya 								; add Y to low memory
.3ba3	18		clc				clc
.3ba4	65 35		adc $35				adc 	lowMemory
.3ba6	85 35		sta $35				sta 	lowMemory
.3ba8	90 02		bcc $3bac			bcc 	_CVNNoCarry
.3baa	e6 36		inc $36				inc 	lowMemory+1
.3bac					_CVNNoCarry:
.3bac	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3bad					CreateArray:
.3bad	20 2c 3a	jsr $3a2c			jsr 	AccessSetup 				; set up the basic stuff.
.3bb0	ad 24 0d	lda $0d24			lda 	varType 					; is the variable type an array
.3bb3	4a		lsr a				lsr 	a
.3bb4	90 3f		bcc $3bf5			bcc 	_CANotArray 				; no, cause an error.
.3bb6	20 6e 3c	jsr $3c6e			jsr 	FindVariable 				; does the variable exist already
.3bb9	b0 35		bcs $3bf0			bcs 	_CAFound 					; cannot redefine it.
.3bbb	20 e1 3a	jsr $3ae1			jsr 	CreateVariable 				; create the variable entry.
.3bbe	ac 25 0d	ldy $0d25			ldy 	varEnd 						; point Y to the end of the variable entry.
.3bc1	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3bc3	48		pha				pha
.3bc4	a5 2b		lda $2b				lda 	temp0+1
.3bc6	48		pha				pha
.3bc7	ad 24 0d	lda $0d24			lda 	varType 					; push variable type on the stack.
.3bca	48		pha				pha
.3bcb	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3bcd	a2 06		ldx #$06		ldx	#6
.3bcf	20 0d 2f	jsr $2f0d		jsr	mainHandler
.3bd2	a2 00		ldx #$00		ldx	#0
.3bd4	20 0d 2f	jsr $2f0d		jsr	mainHandler
.3bd7	68		pla				pla 		 						; restore type and position.
.3bd8	8d 24 0d	sta $0d24			sta 	varType
.3bdb	68		pla				pla
.3bdc	85 2b		sta $2b				sta 	temp0+1
.3bde	68		pla				pla
.3bdf	85 2a		sta $2a				sta 	temp0
.3be1	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3be3	29 e0		and #$e0			and 	#$E0
.3be5	05 58		ora $58				ora 	esInt2
.3be7	05 60		ora $60				ora 	esInt3
.3be9	f0 0f		beq $3bfa			beq 	_CASizeOk
.3beb					_CASize:
.3beb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3bed	20 b5 12	jsr $12b5		jsr	errorHandler
.3bf0					_CAFound:
.3bf0	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3bf2	20 b5 12	jsr $12b5		jsr	errorHandler
.3bf5					_CANotArray:
.3bf5	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3bf7	20 b5 12	jsr $12b5		jsr	errorHandler
.3bfa					_CASizeOk:
.3bfa	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3bfc	d0 02		bne $3c00			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3bfe	e6 49		inc $49				inc 	esInt0+1
.3c00					_CANoCarry:
.3c00	98		tya				tya
.3c01	48		pha				pha
.3c02	a0 05		ldy #$05			ldy 	#5
.3c04	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.3c06	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3c08	c8		iny				iny
.3c09	a5 36		lda $36				lda 	lowMemory+1
.3c0b	91 2a		sta ($2a),y			sta 	(temp0),y
.3c0d	c8		iny				iny
.3c0e	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3c10	91 2a		sta ($2a),y			sta 	(temp0),y
.3c12	c8		iny				iny
.3c13	a5 50		lda $50				lda 	esInt1
.3c15	91 2a		sta ($2a),y			sta 	(temp0),y
.3c17	c8		iny				iny
.3c18	ae 24 0d	ldx $0d24			ldx 	varType 					; get the length per element
.3c1b	bd 27 3c	lda $3c27,x			lda 	_CAActualSize-$3A-1,x
.3c1e	91 2a		sta ($2a),y			sta 	(temp0),y
.3c20	aa		tax				tax 								; save size in X
.3c21	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3c23	85 2a		sta $2a				sta 	temp0
.3c25	a5 36		lda $36				lda 	lowMemory+1
.3c27	85 2b		sta $2b				sta 	temp0+1
.3c29	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3c2b	85 2c		sta $2c				sta 	temp1
.3c2d	85 2d		sta $2d				sta 	temp1+1
.3c2f					_CAInitialiseArray:
.3c2f	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3c31	ad 24 0d	lda $0d24			lda 	varType 					; base type of array in A.
.3c34	29 fe		and #$fe			and 	#$FE
.3c36	20 4b 3b	jsr $3b4b			jsr 	ZeroTemp0Y
.3c39	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3c3a	18		clc				clc
.3c3b	65 2a		adc $2a				adc 	temp0
.3c3d	85 2a		sta $2a				sta 	temp0
.3c3f	85 35		sta $35				sta 	lowMemory
.3c41	a5 2b		lda $2b				lda 	temp0+1
.3c43	69 00		adc #$00			adc 	#0
.3c45	85 2b		sta $2b				sta 	temp0+1
.3c47	85 36		sta $36				sta 	lowMemory+1
.3c49	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.3c4b	b0 1c		bcs $3c69			bcs 	_CAMemory
.3c4d	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3c4f	d0 02		bne $3c53			bne 	_CAIANoCarry
.3c51	e6 2d		inc $2d				inc 	temp1+1
.3c53					_CAIANoCarry:
.3c53	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3c55	c5 2c		cmp $2c				cmp 	temp1
.3c57	d0 d6		bne $3c2f			bne 	_CAInitialiseArray
.3c59	a5 50		lda $50				lda 	esInt1
.3c5b	c5 2d		cmp $2d				cmp 	temp1+1
.3c5d	d0 d0		bne $3c2f			bne 	_CAInitialiseArray
.3c5f	68		pla				pla
.3c60	a8		tay				tay
.3c61	60		rts				rts
.3c62					_CAActualSize:
>3c62	04 00						.byte 	VarISize,0
>3c64	02 00						.byte 	VarSSize,0
>3c66	06 00						.byte 	VarFSize,0
>3c68	db						.byte 	$DB
.3c69					_CAMemory:
.3c69	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3c6b	20 b5 12	jsr $12b5		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3c6e					FindVariable:
.3c6e	98		tya				tya
.3c6f	48		pha				pha
.3c70	98		tya				tya 								; point temp2 to the actual name
.3c71	18		clc				clc 								; in memory of the variable being created
.3c72	65 28		adc $28				adc 	codePtr
.3c74	85 2e		sta $2e				sta 	temp2
.3c76	a5 29		lda $29				lda 	codePtr+1
.3c78	69 00		adc #$00			adc 	#0
.3c7a	85 2f		sta $2f				sta 	temp2+1
.3c7c	a0 00		ldy #$00			ldy 	#0
.3c7e	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.3c80	85 2a		sta $2a				sta 	temp0
.3c82	a5 3c		lda $3c				lda 	hashList+1
.3c84	85 2b		sta $2b				sta 	temp0+1
.3c86	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3c88	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c8a	f0 2c		beq $3cb8			beq 	_FVFail
.3c8c	aa		tax				tax
.3c8d	88		dey				dey		 							; get LSB
.3c8e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c90	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3c92	86 2b		stx $2b				stx 	temp0+1
.3c94	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3c96	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c98	cd 23 0d	cmp $0d23			cmp 	varHash
.3c9b	d0 e9		bne $3c86			bne 	_FVNext 					; if not, no point in checking the name.
.3c9d	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3c9e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ca0	85 2d		sta $2d				sta 	temp1+1
.3ca2	88		dey				dey
.3ca3	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ca5	85 2c		sta $2c				sta 	temp1
.3ca7	a0 00		ldy #$00			ldy 	#0
.3ca9					_FVCheck:
.3ca9	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3cab	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3cad	d0 d7		bne $3c86			bne 	_FVNext		 				; fail if different.
.3caf	c8		iny				iny
.3cb0	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3cb2	90 f5		bcc $3ca9			bcc 	_FVCheck
.3cb4	68		pla				pla
.3cb5	a8		tay				tay
.3cb6	38		sec				sec
.3cb7	60		rts				rts
.3cb8					_FVFail:
.3cb8	68		pla				pla
.3cb9	a8		tay				tay
.3cba	18		clc				clc
.3cbb	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3cbc					HashTableReset:
.3cbc	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3cbe	a9 00		lda #$00			lda 	#0
.3cc0					_HTRClear:
.3cc0	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3cc3	ca		dex				dex
.3cc4	d0 fa		bne $3cc0			bne 	_HTRClear
.3cc6	60		rts				rts

;******  Return to file: variable/variable.asm

.3cc7					variableHandler:
.3cc7	7c ca 3c	jmp ($3cca,x)			jmp 	(variableVectors,x)
.3cca					variableVectors:
>3cca	c5 39					.word AccessVariable       ; index 0
>3ccc	ad 3b					.word CreateArray          ; index 2
>3cce	bc 3c					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3cd0					section_end_variable:
.3cd0					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d26					endStorage:
>3cd0							.align 	256
.3d00					programMemory:
>3cff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3d00					section_end_footer:

;******  End of listing
