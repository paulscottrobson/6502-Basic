
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Fri Mar  5 20:04:45 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a2 02		ldx #$02		ldx	#2
.1005	20 8f 21	jsr $218f		jsr	deviceHandler
.1008	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.100a	8d c8 0a	sta $0ac8			sta 	basePage
.100d	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100f	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1012	a9 00		lda #$00			lda 	#($9800) & $FF
.1014	8d ca 0a	sta $0aca			sta 	endMemory
.1017	a9 98		lda #$98			lda 	#($9800) >> 8
.1019	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.101c	4c b1 13	jmp $13b1			jmp 	Command_Run
.2836					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	08 0a 00 d3 41 94 40 80			.byte 8,10,0,211,65,148,64,128,8,11,0,153,197,158,171,128,0
>5008	08 0b 00 99 c5 9e ab 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101f					Command_Assert:
.101f	20 63 1a	jsr $1a63			jsr 	EvaluateRootInteger 		; what is being asserted.
.1022	20 8b 20	jsr $208b			jsr 	MInt32Zero 					; is it true ?
.1025	f0 01		beq $1028			beq 	_CAError
.1027	60		rts				rts
.1028					_CAError:
.1028	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.102a	20 9e 21	jsr $219e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.102d					CommandClear:
.102d	98		tya				tya
.102e	48		pha				pha
.102f	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.1032	85 0d		sta $0d				sta 	highMemory
.1034	ad cb 0a	lda $0acb			lda 	endMemory+1
.1037	85 0e		sta $0e				sta 	highMemory+1
.1039	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.103c	85 04		sta $04				sta 	temp0
.103e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1041	85 05		sta $05				sta 	temp0+1
.1043					_CCFindEnd:
.1043	a0 00		ldy #$00			ldy 	#0
.1045	b1 04		lda ($04),y			lda 	(temp0),y
.1047	f0 0c		beq $1055			beq 	_CCFoundEnd 				; offset zero is end.
.1049	18		clc				clc
.104a	65 04		adc $04				adc 	temp0 						; move to next line
.104c	85 04		sta $04				sta 	temp0
.104e	90 f3		bcc $1043			bcc 	_CCFindEnd
.1050	e6 05		inc $05				inc 	temp0+1
.1052	4c 43 10	jmp $1043			jmp 	_CCFindEnd
.1055					_CCFoundEnd:
.1055	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1057	85 0f		sta $0f				sta 	lowMemory
.1059	a5 05		lda $05				lda 	temp0+1
.105b	85 10		sta $10				sta 	lowMemory+1
.105d	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105f	20 70 10	jsr $1070			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1062	20 f1 20	jsr $20f1			jsr 	RSReset 					; reset the return stack.
.1065	a2 02		ldx #$02		ldx	#2
.1067	20 2f 28	jsr $282f		jsr	variableHandler
.106a	20 5a 15	jsr $155a			jsr 	ScanProc 					; scan for procedures
.106d	68		pla				pla
.106e	a8		tay				tay
.106f	60		rts				rts
.1070					AdvanceLowMemoryByte:
.1070	18		clc				clc
.1071	65 0f		adc $0f				adc 	lowMemory
.1073	85 0f		sta $0f				sta 	lowMemory
.1075	90 02		bcc $1079			bcc 	_ALMBExit
.1077	e6 10		inc $10				inc 	lowMemory+1
.1079					_ALMBExit:
.1079	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2836					Command_FOR:
.2836	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2838	a2 0b		ldx #$0b			ldx 	#11
.283a	20 ff 20	jsr $20ff			jsr 	RSClaim
.283d	20 b6 10	jsr $10b6			jsr 	CommandLET 					; do the same as LET.
.2840	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.2842	c9 80		cmp #$80			cmp 	#$80
.2844	d0 4c		bne $2892			bne 	_CFType
.2846	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.2848	20 cc 20	jsr $20cc			jsr 	CheckToken
.284b	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.284d	20 65 1a	jsr $1a65			jsr 	EvaluateInteger				; get terminal value in stack 1
.2850	98		tya				tya
.2851	48		pha				pha
.2852	a0 04		ldy #$04			ldy 	#4
.2854	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.2856	91 78		sta ($78),y			sta 	(rsPointer),y
.2858	c8		iny				iny
.2859	a5 50		lda $50				lda		esInt1
.285b	91 78		sta ($78),y			sta 	(rsPointer),y
.285d	c8		iny				iny
.285e	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2860	91 78		sta ($78),y			sta 	(rsPointer),y
.2862	c8		iny				iny
.2863	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.2865	91 78		sta ($78),y			sta 	(rsPointer),y
.2867	c8		iny				iny
.2868	a5 51		lda $51				lda		esInt1+1
.286a	91 78		sta ($78),y			sta 	(rsPointer),y
.286c	c8		iny				iny
.286d	a5 59		lda $59				lda		esInt2+1
.286f	91 78		sta ($78),y			sta 	(rsPointer),y
.2871	c8		iny				iny
.2872	a5 61		lda $61				lda		esInt3+1
.2874	91 78		sta ($78),y			sta 	(rsPointer),y
.2876	68		pla				pla
.2877	a8		tay				tay
.2878	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.287a	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.287c	d0 0e		bne $288c			bne 	_CFDone
.287e	c8		iny				iny									; skip over step.
.287f	20 65 1a	jsr $1a65			jsr 	EvaluateInteger 			; get step
.2882	98		tya				tya
.2883	48		pha				pha
.2884	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2886	a0 06		ldy #$06			ldy 	#6
.2888	91 78		sta ($78),y			sta 	(rsPointer),y
.288a	68		pla				pla
.288b	a8		tay				tay
.288c					_CFDone:
.288c	a9 01		lda #$01			lda 	#1
.288e	20 2b 21	jsr $212b			jsr 	RSSavePosition 				; save position.
.2891	60		rts				rts
.2892					_CFType:
.2892	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2894	20 9e 21	jsr $219e		jsr	errorHandler
.2897					Command_NEXT:
.2897	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2899	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.289b	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.289d	f0 05		beq $28a4			beq 	_isok
.289f	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.28a1	20 9e 21	jsr $219e		jsr	errorHandler
.28a4					_isok:
.28a4	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.28a6	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.28a8	b0 18		bcs $28c2			bcs 	_CNNoIndex
.28aa	a2 00		ldx #$00			ldx 	#0 							; start on stack
.28ac	20 92 1a	jsr $1a92			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.28af	98		tya				tya
.28b0	48		pha				pha
.28b1	a0 04		ldy #$04			ldy 	#4 							; check same variable
.28b3	b1 78		lda ($78),y			lda 	(rsPointer),y
.28b5	d5 48		cmp $48,x			cmp 	esInt0,x
.28b7	d0 76		bne $292f			bne 	_CNBadIndex
.28b9	c8		iny				iny
.28ba	b1 78		lda ($78),y			lda 	(rsPointer),y
.28bc	d5 50		cmp $50,x			cmp 	esInt1,x
.28be	d0 6f		bne $292f			bne 	_CNBadIndex
.28c0	68		pla				pla
.28c1	a8		tay				tay
.28c2					_CNNoIndex:
.28c2	98		tya				tya
.28c3	48		pha				pha
.28c4	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.28c6	b1 78		lda ($78),y			lda 	(rsPointer),y
.28c8	85 04		sta $04				sta 	temp0
.28ca	c8		iny				iny
.28cb	b1 78		lda ($78),y			lda 	(rsPointer),y
.28cd	85 05		sta $05				sta 	temp0+1
.28cf	c8		iny				iny
.28d0	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.28d2	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.28d4	85 09		sta $09				sta 	temp2+1 					; save for later.
.28d6	10 01		bpl $28d9			bpl 	_CNSignX
.28d8	ca		dex				dex  								; X = $FF
.28d9					_CNSignX:
.28d9	18		clc				clc 								; add to the LSB
.28da	a0 00		ldy #$00			ldy 	#0
.28dc	71 04		adc ($04),y			adc 	(temp0),y
.28de	91 04		sta ($04),y			sta 	(temp0),y
.28e0					_CNPropogate:
.28e0	c8		iny				iny  								; add the sign extended in X to the rest.
.28e1	8a		txa				txa
.28e2	71 04		adc ($04),y			adc 	(temp0),y
.28e4	91 04		sta ($04),y			sta 	(temp0),y
.28e6	c8		iny				iny
.28e7	8a		txa				txa
.28e8	71 04		adc ($04),y			adc 	(temp0),y
.28ea	91 04		sta ($04),y			sta 	(temp0),y
.28ec	c8		iny				iny
.28ed	8a		txa				txa
.28ee	71 04		adc ($04),y			adc 	(temp0),y
.28f0	91 04		sta ($04),y			sta 	(temp0),y
.28f2	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.28f3	a5 78		lda $78				lda 	rsPointer
.28f5	69 07		adc #$07			adc 	#7
.28f7	85 06		sta $06				sta 	temp1
.28f9	a9 00		lda #$00			lda 	#0
.28fb	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.28fd	a8		tay				tay 								; and clear the Y register again.
.28fe	65 79		adc $79				adc 	rsPointer+1
.2900	85 07		sta $07				sta 	temp1+1
.2902	38		sec				sec 								; calculate current - limit oring interim values.
.2903	20 3b 29	jsr $293b			jsr 	_CNCompare
.2906	20 3b 29	jsr $293b			jsr 	_CNCompare
.2909	20 3b 29	jsr $293b			jsr 	_CNCompare
.290c	20 3b 29	jsr $293b			jsr 	_CNCompare
.290f	50 02		bvc $2913			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2911	49 80		eor #$80			eor 	#$80
.2913					_CNNoOverflow:
.2913	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2915	30 1d		bmi $2934			bmi 	_CNCheckDownto
.2917	c9 00		cmp #$00			cmp 	#0
.2919	30 0c		bmi $2927			bmi 	_CNLoopRound 				; loop round if < =
.291b	a5 08		lda $08				lda 	temp2
.291d	f0 08		beq $2927			beq 	_CNLoopRound
.291f					_CNLoopExit:
.291f	68		pla				pla
.2920	a8		tay				tay
.2921	a9 0b		lda #$0b			lda 	#11
.2923	20 21 21	jsr $2121			jsr 	RSFree
.2926	60		rts				rts
.2927					_CNLoopRound:
.2927	68		pla				pla
.2928	a8		tay				tay
.2929	a9 01		lda #$01			lda 	#1
.292b	20 3e 21	jsr $213e			jsr 	RSLoadPosition				; go back to the loop top
.292e	60		rts				rts
.292f					_CNBadIndex:
.292f	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2931	20 9e 21	jsr $219e		jsr	errorHandler
.2934					_CNCheckDownto:
.2934	c9 00		cmp #$00			cmp 	#0
.2936	10 ef		bpl $2927			bpl 	_CNLoopRound
.2938	4c 1f 29	jmp $291f			jmp 	_CNLoopExit
.293b					_CNCompare:
.293b	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.293d	f1 06		sbc ($06),y			sbc 	(temp1),y
.293f	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.2941	85 08		sta $08				sta 	temp2
.2943	c8		iny				iny
.2944	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.107a					CommandIf:
.107a	20 63 1a	jsr $1a63			jsr 	EvaluateRootInteger 		; if what ?
.107d	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107f	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.1081	f0 04		beq $1087			beq 	_IfSimple
.1083	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1085	d0 1b		bne $10a2			bne 	_IfComplex
.1087					_IfSimple:
.1087	20 8b 20	jsr $208b			jsr 	MInt32Zero					; check if TOS zero
.108a	f0 10		beq $109c			beq 	_IfEOL 						; go to next line.
.108c	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.108e	c8		iny				iny
.108f	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1091	f0 0c		beq $109f			beq 	_IfGoto 					; do the Goto code
.1093	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1095	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1097	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1099	f0 04		beq $109f			beq 	_IfGoto
.109b	60		rts				rts 								; else continue on this line.
.109c					_IfEOL:
.109c	4c ce 15	jmp $15ce			jmp 	AdvanceNextLine 			; go to next line
.109f					_IfGoto:
.109f	4c 0d 16	jmp $160d			jmp 	CommandGoto
.10a2					_IfComplex:
.10a2	20 8b 20	jsr $208b			jsr 	MInt32Zero 					; is it true ?
.10a5	f0 01		beq $10a8			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a7	60		rts				rts 								; else continue.
.10a8					_IFSkip:
.10a8	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10aa	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ac	4c ae 29	jmp $29ae			jmp		ScanForward
.10af					Command_ELSE:
.10af	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10b1	8a		txa				txa
.10b2	4c ae 29	jmp $29ae			jmp		ScanForward
.10b5					Command_ENDIF:
.10b5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b6					CommandLet:
.10b6	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b8	20 92 1a	jsr $1a92			jsr 	EvaluateReference
.10bb	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10bd	20 cc 20	jsr $20cc			jsr 	CheckToken
.10c0	e8		inx				inx 								; do RHS
.10c1	20 46 1a	jsr $1a46			jsr 	Evaluate 					; evaluate and derefernce
.10c4	ca		dex				dex
.10c5	20 c9 10	jsr $10c9			jsr 	WriteValue 					; write it out
.10c8	60		rts				rts
.10c9					WriteValue:
.10c9	98		tya				tya
.10ca	48		pha				pha
.10cb	20 2b 11	jsr $112b			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10ce	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10d0	55 41		eor $41,x			eor 	esType+1,x
.10d2	29 40		and #$40			and 	#$40
.10d4	d0 50		bne $1126			bne		_WVType
.10d6	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d8	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10da	29 40		and #$40			and 	#$40
.10dc	d0 1f		bne $10fd			bne 	_WVCopyString
.10de	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10e0	15 41		ora $41,x			ora 	esType+1,x
.10e2	4a		lsr a				lsr 	a
.10e3	90 22		bcc $1107			bcc 	_WVCopyData4
.10e5	b5 40		lda $40,x			lda 	esType,x
.10e7	4a		lsr a				lsr 	a
.10e8	90 3c		bcc $1126			bcc 	_WVType
.10ea	e8		inx				inx 								; force the value being written to be a float.
.10eb	20 7f 16	jsr $167f			jsr 	BPMakeFloat
.10ee	ca		dex				dex
.10ef	20 2b 11	jsr $112b			jsr 	TOSToTemp0 					; set Temp0 to write address
.10f2	e8		inx				inx
.10f3	8a		txa				txa
.10f4	a2 20		ldx #$20		ldx	#32
.10f6	20 4f 24	jsr $244f		jsr	floatingpointHandler
.10f9	aa		tax				tax
.10fa	4c 23 11	jmp $1123			jmp 	_WVCopyExit
.10fd					_WVCopyString:
.10fd	8a		txa				txa
.10fe	a2 0a		ldx #$0a		ldx	#10
.1100	20 a6 26	jsr $26a6		jsr	stringHandler
.1103	aa		tax				tax
.1104	4c 23 11	jmp $1123			jmp 	_WVCopyExit
.1107					_WVCopyData4:
.1107	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1109	29 20		and #$20			and 	#$20
.110b	d0 10		bne $111d			bne 	_WVCopyData1
.110d	a0 03		ldy #$03			ldy 	#3
.110f	b5 61		lda $61,x			lda 	esInt3+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113	88		dey				dey
.1114	b5 59		lda $59,x			lda 	esInt2+1,x
.1116	91 04		sta ($04),y			sta 	(temp0),y
.1118	88		dey				dey
.1119	b5 51		lda $51,x			lda 	esInt1+1,x
.111b	91 04		sta ($04),y			sta 	(temp0),y
.111d					_WVCopyData1:
.111d	a0 00		ldy #$00			ldy 	#0
.111f	b5 49		lda $49,x			lda 	esInt0+1,x
.1121	91 04		sta ($04),y			sta 	(temp0),y
.1123					_WVCopyExit:
.1123	68		pla				pla
.1124	a8		tay				tay
.1125	60		rts				rts
.1126					_WVType:
.1126	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1128	20 9e 21	jsr $219e		jsr	errorHandler
.112b					TOSToTemp0:
.112b	b5 48		lda $48,x			lda 	esInt0,x
.112d	85 04		sta $04				sta 	temp0
.112f	b5 50		lda $50,x			lda 	esInt1,x
.1131	85 05		sta $05				sta 	temp0+1
.1133	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.1134					CommandLocal:
.1134	a2 00		ldx #$00			ldx 	#0
.1136	20 52 11	jsr $1152			jsr 	LocaliseVariable 			; localise one.
.1139					_CLCheckNext:
.1139	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.113b	c8		iny				iny
.113c	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.113e	f0 06		beq $1146			beq 	_CLAssignment
.1140	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; comma try again.
.1142	f0 f0		beq $1134			beq 	CommandLocal
.1144	88		dey				dey
.1145	60		rts				rts
.1146					_CLAssignment:
.1146	a2 01		ldx #$01			ldx 	#1
.1148	20 46 1a	jsr $1a46			jsr 	Evaluate 					; evaluate RHS
.114b	ca		dex				dex
.114c	20 c9 10	jsr $10c9			jsr 	WriteValue
.114f	4c 39 11	jmp $1139			jmp 	_CLCheckNext
.1152					LocaliseVariable:
.1152	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1154	c9 40		cmp #$40			cmp 	#$40
.1156	b0 67		bcs $11bf			bcs 	_LVSyntax
.1158	8a		txa				txa 								; get the address of that variable.
.1159	a2 00		ldx #$00		ldx	#0
.115b	20 2f 28	jsr $282f		jsr	variableHandler
.115e	aa		tax				tax
.115f	8a		txa				txa
.1160	48		pha				pha
.1161	98		tya				tya
.1162	48		pha				pha
.1163	20 2b 11	jsr $112b			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1166	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1168	0a		asl a				asl 	a
.1169	10 16		bpl $1181			bpl 	_LVPushNumber
.116b	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.116d	b1 04		lda ($04),y			lda 	(temp0),y
.116f	c8		iny				iny
.1170	85 06		sta $06				sta 	temp1
.1172	b1 04		lda ($04),y			lda 	(temp0),y
.1174	85 07		sta $07				sta 	temp1+1
.1176	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1178	b1 06		lda ($06),y			lda 	(temp1),y
.117a	aa		tax				tax 								; into X
.117b	e8		inx				inx 								; +1 for length.
.117c	a9 24		lda #$24			lda 	#markerString
.117e	4c 96 11	jmp $1196			jmp 	_LVWriteFrame
.1181					_LVPushNumber:
.1181	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1183	85 06		sta $06				sta 	temp1
.1185	a5 05		lda $05				lda 	temp0+1
.1187	85 07		sta $07				sta 	temp1+1
.1189	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.118b	4a		lsr a				lsr 	a
.118c	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.118e	a2 04		ldx #$04			ldx 	#VarISize
.1190	90 04		bcc $1196			bcc 	_LVIsInteger
.1192	a9 23		lda #$23			lda 	#markerFloat
.1194	a2 06		ldx #$06			ldx 	#VarFSize
.1196					_LVIsInteger:
.1196					_LVWriteFrame:
.1196	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.1199	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.119a	e8		inx				inx
.119b	e8		inx				inx
.119c	20 ff 20	jsr $20ff			jsr 	RSClaim 					; create the stack frame.
.119f	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.11a1	a0 01		ldy #$01			ldy 	#1
.11a3	91 78		sta ($78),y			sta 	(rsPointer),y
.11a5	c8		iny				iny
.11a6	a5 05		lda $05				lda 	temp0+1
.11a8	91 78		sta ($78),y			sta 	(rsPointer),y
.11aa	a0 00		ldy #$00			ldy 	#0
.11ac					_LVCopyData:
.11ac	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.11ae	c8		iny				iny 								; write allowing for the header bit.
.11af	c8		iny				iny
.11b0	c8		iny				iny
.11b1	91 78		sta ($78),y			sta 	(rsPointer),y
.11b3	88		dey				dey
.11b4	88		dey				dey
.11b5	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.11b8	d0 f2		bne $11ac			bne 	_LVCopyData
.11ba	68		pla				pla
.11bb	a8		tay				tay
.11bc	68		pla				pla
.11bd	aa		tax				tax
.11be	60		rts				rts
.11bf					_LVSyntax:
.11bf	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.11c1	20 9e 21	jsr $219e		jsr	errorHandler
.11c4					RestoreLocals:
.11c4	a2 00		ldx #$00			ldx 	#0
.11c6	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.11c8	c9 40		cmp #$40			cmp	 	#64
.11ca	90 01		bcc $11cd			bcc 	_RLocal
.11cc	60		rts				rts
.11cd					_RLocal:
.11cd	8a		txa				txa
.11ce	48		pha				pha
.11cf	98		tya				tya
.11d0	48		pha				pha
.11d1	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.11d3	b1 78		lda ($78),y			lda 	(rsPointer),y
.11d5	85 04		sta $04				sta 	temp0
.11d7	c8		iny				iny
.11d8	b1 78		lda ($78),y			lda 	(rsPointer),y
.11da	85 05		sta $05				sta 	temp0+1
.11dc	a0 00		ldy #$00			ldy 	#0 							; get type back.
.11de	b1 78		lda ($78),y			lda 	(rsPointer),y
.11e0	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.11e2	f0 28		beq $120c			beq 	_RString
.11e4	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.11e6	c9 25		cmp #$25			cmp 	#markerInt
.11e8	f0 02		beq $11ec			beq 	_RIsInteger
.11ea	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.11ec					_RIsInteger:
.11ec	8a		txa				txa
.11ed	48		pha				pha
.11ee	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.11f0					_RCopyBack:
.11f0	b1 78		lda ($78),y			lda 	(rsPointer),y
.11f2	88		dey				dey
.11f3	88		dey				dey
.11f4	88		dey				dey
.11f5	91 04		sta ($04),y			sta 	(temp0),y
.11f7	c8		iny				iny
.11f8	c8		iny				iny
.11f9	c8		iny				iny
.11fa	c8		iny				iny
.11fb	ca		dex				dex
.11fc	d0 f2		bne $11f0			bne 	_RCopyBack
.11fe	68		pla				pla 								; get size add 3
.11ff	18		clc				clc
.1200	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1202					_RRestoreAAndLoop:
.1202	20 21 21	jsr $2121			jsr 	RSFree
.1205	68		pla				pla
.1206	a8		tay				tay
.1207	68		pla				pla
.1208	aa		tax				tax
.1209	4c c4 11	jmp $11c4			jmp 	RestoreLocals 				; go see if there are any more locals.
.120c					_RString:
.120c	a2 00		ldx #$00			ldx 	#0
.120e	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1210	b1 78		lda ($78),y			lda 	(rsPointer),y
.1212	95 48		sta $48,x			sta 	esInt0,x
.1214	c8		iny				iny
.1215	b1 78		lda ($78),y			lda 	(rsPointer),y
.1217	95 50		sta $50,x			sta 	esInt1,x
.1219	18		clc				clc
.121a	a5 78		lda $78				lda 	rsPointer
.121c	69 03		adc #$03			adc 	#3
.121e	95 49		sta $49,x			sta 	esInt0+1,x
.1220	a5 79		lda $79				lda 	rsPointer+1
.1222	69 00		adc #$00			adc 	#0
.1224	95 51		sta $51,x			sta 	esInt1+1,x
.1226	8a		txa				txa
.1227	a2 0a		ldx #$0a		ldx	#10
.1229	20 a6 26	jsr $26a6		jsr	stringHandler
.122c	a0 03		ldy #$03			ldy 	#3 							; get string length
.122e	b1 78		lda ($78),y			lda 	(rsPointer),y
.1230	18		clc				clc
.1231	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1233	4c 02 12	jmp $1202			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1236					Command_New:
.1236	20 0b 14	jsr $140b			jsr 	ResetCodeAddress 			; point to first line
.1239	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.123b	98		tya				tya
.123c	91 02		sta ($02),y			sta 	(codePtr),y
.123e	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything down.
.1241	4c cb 15	jmp $15cb			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1244					Command_Poke:
.1244	a9 01		lda #$01			lda 	#1
.1246	d0 06		bne $124e			bne 	PokeGeneral
.1248					Command_Doke:
.1248	a9 02		lda #$02			lda 	#2
.124a	d0 02		bne $124e			bne 	PokeGeneral
.124c					Command_Loke:
.124c	a9 03		lda #$03			lda 	#3
.124e					PokeGeneral:
.124e	48		pha				pha 								; save size
.124f	20 63 1a	jsr $1a63			jsr 	EvaluateRootInteger 		; target address
.1252	20 e4 20	jsr $20e4			jsr	 	CheckComma
.1255	e8		inx				inx
.1256	20 65 1a	jsr $1a65			jsr 	EvaluateInteger 			; what value to POKE ?
.1259	ca		dex				dex
.125a	20 2b 11	jsr $112b			jsr 	TOSToTemp0 					; temp0 points to the target address
.125d	84 0c		sty $0c				sty 	tempShort 					; save Y
.125f	68		pla				pla 								; get copy type and dispatch
.1260	aa		tax				tax
.1261	ca		dex				dex
.1262	f0 14		beq $1278			beq 	_Poke1
.1264	ca		dex				dex
.1265	f0 0b		beq $1272			beq 	_Poke2
.1267	a0 03		ldy #$03			ldy 	#3
.1269	a5 61		lda $61				lda 	esInt3+1
.126b	91 04		sta ($04),y			sta 	(temp0),y
.126d	88		dey				dey
.126e	a5 59		lda $59				lda 	esInt2+1
.1270	91 04		sta ($04),y			sta 	(temp0),y
.1272					_Poke2:
.1272	a0 01		ldy #$01			ldy 	#1
.1274	a5 51		lda $51				lda 	esInt1+1
.1276	91 04		sta ($04),y			sta 	(temp0),y
.1278					_Poke1:
.1278	a0 00		ldy #$00			ldy 	#0
.127a	a5 49		lda $49				lda 	esInt0+1
.127c	91 04		sta ($04),y			sta 	(temp0),y
.127e	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1280	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.1281					Command_Print:
.1281	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1283	8d f1 0a	sta $0af1			sta 	lastPrintToken
.1286	88		dey				dey
.1287					_PrintLoopSkip:
.1287	c8		iny				iny
.1288					_PrintLoop:
.1288	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.128a	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.128c	f0 5b		beq $12e9			beq 	_PrintExit
.128e	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.1290	f0 57		beq $12e9			beq 	_PrintExit
.1292	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.1295	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1297	f0 ee		beq $1287			beq 	_PrintLoopSkip
.1299	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.129b	f0 3c		beq $12d9			beq	 	_PrintNewLine
.129d	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.129f	f0 40		beq $12e1			beq 	_PrintTab
.12a1	20 44 1a	jsr $1a44			jsr 	EvaluateRoot 				; evaluate something at the root
.12a4	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.12a6	85 04		sta $04				sta 	temp0
.12a8	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.12aa	85 05		sta $05				sta 	1+(temp0)
.12ac	a5 40		lda $40				lda 	esType 						; get type
.12ae	f0 15		beq $12c5			beq		_PrintInteger
.12b0	4a		lsr a				lsr 	a 							; check for floating point
.12b1	b0 08		bcs $12bb			bcs 	_PrintFloat
.12b3					_PrintString:
.12b3	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.12b5	20 2b 11	jsr $112b			jsr 	TOSToTemp0
.12b8	4c d3 12	jmp $12d3			jmp 	_PrintTemp0 				; print no leading space.
.12bb					_PrintFloat:
.12bb	a9 00		lda #$00			lda 	#0 							; stack level.
.12bd	a2 14		ldx #$14		ldx	#20
.12bf	20 4f 24	jsr $244f		jsr	floatingpointHandler
.12c2	4c cc 12	jmp $12cc			jmp 	_PrintSpaceTemp0
.12c5					_PrintInteger:
.12c5	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.12c7	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.12c9	20 ba 1f	jsr $1fba			jsr 	MInt32ToString				; convert to text
.12cc					_PrintSpaceTemp0:
.12cc	a9 20		lda #$20			lda 	#32
.12ce	a2 06		ldx #$06		ldx	#6
.12d0	20 8f 21	jsr $218f		jsr	deviceHandler
.12d3					_PrintTemp0:
.12d3	20 fa 12	jsr $12fa			jsr 	PrintString
.12d6	4c 88 12	jmp $1288			jmp 	_PrintLoop
.12d9					_PrintNewLine:
.12d9	a2 00		ldx #$00		ldx	#0
.12db	20 8f 21	jsr $218f		jsr	deviceHandler
.12de	4c 87 12	jmp $1287			jmp 	_PrintLoopSkip
.12e1					_PrintTab:
.12e1	a2 08		ldx #$08		ldx	#8
.12e3	20 8f 21	jsr $218f		jsr	deviceHandler
.12e6	4c 87 12	jmp $1287			jmp 	_PrintLoopSkip
.12e9					_PrintExit:
.12e9	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.12ec	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.12ee	f0 09		beq $12f9			beq 	_PrintExit2
.12f0	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.12f2	f0 05		beq $12f9			beq 	_PrintExit2
.12f4	a2 00		ldx #$00		ldx	#0
.12f6	20 8f 21	jsr $218f		jsr	deviceHandler
.12f9					_PrintExit2:
.12f9	60		rts				rts
.12fa					PrintString:
.12fa	8a		txa				txa
.12fb	48		pha				pha
.12fc	98		tya				tya
.12fd	48		pha				pha
.12fe	a0 00		ldy #$00			ldy 	#0							; get length
.1300	b1 04		lda ($04),y			lda 	(temp0),y
.1302	aa		tax				tax 								; into X
.1303	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1305	f0 10		beq $1317			beq 	_PSExit
.1307	ca		dex				dex
.1308	8a		txa				txa
.1309	48		pha				pha
.130a	c8		iny				iny
.130b	b1 04		lda ($04),y			lda 	(temp0),y
.130d	a2 06		ldx #$06		ldx	#6
.130f	20 8f 21	jsr $218f		jsr	deviceHandler
.1312	68		pla				pla
.1313	aa		tax				tax
.1314	4c 03 13	jmp $1303			jmp 	_PSLoop
.1317					_PSExit:
.1317	68		pla				pla
.1318	a8		tay				tay
.1319	68		pla				pla
.131a	aa		tax				tax
.131b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.131c					CallProc:
.131c	20 ee 14	jsr $14ee			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.131f	48		pha				pha 								; save length on stack
.1320	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.1322	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.1324	48		pha				pha
.1325	a5 04		lda $04				lda 	temp0
.1327	48		pha				pha
.1328	98		tya				tya 								; calculate Y + length
.1329	18		clc				clc
.132a	65 0c		adc $0c				adc 	tempShort
.132c	a8		tay				tay
.132d	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.132f					_CallProcEvalParams:
.132f	e8		inx				inx
.1330	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.1332	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1334	f0 0b		beq $1341			beq 	_CPDoneParams
.1336	20 46 1a	jsr $1a46			jsr 	Evaluate 					; evaluate a parameter
.1339	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.133b	c8		iny				iny
.133c	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.133e	f0 ef		beq $132f			beq 	_CallProcEvalParams
.1340	88		dey				dey 								; undo consumption.
.1341					_CPDoneParams:
.1341	20 d7 20	jsr $20d7			jsr 	CheckRightParen 			; check closing parenthesis.
.1344	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.1347	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1349	a9 50		lda #$50			lda 	#markerPROC
.134b	20 ff 20	jsr $20ff			jsr 	RSClaim
.134e	a9 01		lda #$01			lda 	#1 							; store return address.
.1350	20 2b 21	jsr $212b			jsr 	RSSavePosition
.1353	68		pla				pla 								; get the new code Ptr
.1354	85 02		sta $02				sta 	codePtr
.1356	68		pla				pla
.1357	85 03		sta $03				sta 	codePtr+1
.1359	68		pla				pla 								; length of name + 4 is the param start.
.135a	18		clc				clc
.135b	69 04		adc #$04			adc 	#4
.135d	a8		tay				tay
.135e	a2 ff		ldx #$ff			ldx 	#$FF
.1360					_CPLoadParameters:
.1360	e8		inx				inx 								; point to where the address should be loaded.
.1361	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.1364	f0 1e		beq $1384			beq 	_CPParamError
.1366	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1368	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; is it the right bracket
.136a	f0 0e		beq $137a			beq 	_CPParamComplete 			; done all the parameters
.136c	20 52 11	jsr $1152			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.136f	20 c9 10	jsr $10c9			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1372	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1374	c8		iny				iny
.1375	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1377	f0 e7		beq $1360			beq 	_CPLoadParameters
.1379	88		dey				dey 								; no, unconsume and check for )
.137a					_CPParamComplete:
.137a	20 d7 20	jsr $20d7			jsr 	CheckRightParen 			; check )
.137d	e8		inx				inx 								; check right number of parameters
.137e	ec f2 0a	cpx $0af2			cpx 	paramCount
.1381	d0 01		bne $1384			bne 	_CPParamError
.1383	60		rts				rts
.1384					_CPParamError:
.1384	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1386	20 9e 21	jsr $219e		jsr	errorHandler
.1389					ReturnProc:
.1389	20 c4 11	jsr $11c4			jsr 	RestoreLocals 				; get the locals back.
.138c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.138e	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1390	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1392	f0 05		beq $1399			beq 	_isok
.1394	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1396	20 9e 21	jsr $219e		jsr	errorHandler
.1399					_isok:
.1399	a9 01		lda #$01			lda 	#1
.139b	20 3e 21	jsr $213e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.139e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13a0	20 21 21	jsr $2121			jsr 	RSFree
.13a3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.13a4					Command_Rem:
.13a4					Command_Rem2:
.13a4	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.13a6	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.13a8	d0 06		bne $13b0			bne 	_CRNotString
.13aa	c8		iny				iny
.13ab	98		tya				tya
.13ac	38		sec				sec
.13ad	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.13af	a8		tay				tay
.13b0					_CRNotString:
.13b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.2945					Command_Repeat:
.2945	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2947	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2949	20 ff 20	jsr $20ff			jsr 	RSClaim
.294c	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.294e	20 2b 21	jsr $212b			jsr 	RSSavePosition
.2951	60		rts				rts
.2952					Command_Until:
.2952	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2954	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2956	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2958	f0 05		beq $295f			beq 	_isok
.295a	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.295c	20 9e 21	jsr $219e		jsr	errorHandler
.295f					_isok:
.295f	20 63 1a	jsr $1a63			jsr 	EvaluateRootInteger 		; at the bottom.
.2962	20 8b 20	jsr $208b			jsr 	MInt32Zero					; check if TOS zero
.2965	d0 06		bne $296d			bne 	_CUExit
.2967	a9 01		lda #$01			lda 	#1
.2969	20 3e 21	jsr $213e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.296c	60		rts				rts
.296d					_CUExit:
.296d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.296f	20 21 21	jsr $2121			jsr 	RSFree
.2972	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.13b1					Command_Run:
.13b1	a2 ff		ldx #$ff			ldx 	#$FF
.13b3	9a		txs				txs
.13b4	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything.
.13b7	20 0b 14	jsr $140b			jsr 	ResetCodeAddress 			; back to the start.
.13ba	a0 03		ldy #$03			ldy 	#3
.13bc					CRNextInstruction:
.13bc	64 7b		stz $7b				stz 	softMemAlloc+1
.13be	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.13c0	10 1c		bpl $13de			bpl 	_CRNotToken
.13c2	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.13c4	b0 0c		bcs $13d2			bcs 	_CRExecute
.13c6	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.13c8	b0 4e		bcs $1418			bcs 	Unimplemented
.13ca	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.13cc	b0 04		bcs $13d2			bcs 	_CRExecute
.13ce	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.13d0	b0 16		bcs $13e8			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.13d2					_CRExecute:
.13d2	c8		iny				iny 								; consume it.
.13d3	0a		asl a				asl 	a 							; double it, losing most significant bit.
.13d4	aa		tax				tax
.13d5	20 db 13	jsr $13db			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.13d8	4c bc 13	jmp $13bc			jmp 	CRNextInstruction
.13db					_CRRunRoutine:
.13db	7c 22 14	jmp ($1422,x)			jmp 	(Group0Vectors,x)
.13de					_CRNotToken:
.13de	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.13e0	b0 36		bcs $1418			bcs 	Unimplemented
.13e2					_CRDefaultLet:
.13e2	20 b6 10	jsr $10b6			jsr 	CommandLet 					; do the default, LET
.13e5	4c bc 13	jmp $13bc			jmp 	CRNextInstruction
.13e8					_CRCheckIndirect:
.13e8	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.13ea	f0 f6		beq $13e2			beq 	_CRDefaultLet
.13ec	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.13ee	f0 f2		beq $13e2			beq 	_CRDefaultLet
.13f0	d0 26		bne $1418			bne 	Unimplemented
.13f2					CommandShift1:
.13f2	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.13f4	10 22		bpl $1418			bpl 	Unimplemented 				; we have an error as this should not happen.
.13f6	0a		asl a				asl 	a 							; double into X
.13f7	aa		tax				tax
.13f8	c8		iny				iny 								; advance over it.
.13f9	20 ff 13	jsr $13ff			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.13fc	4c bc 13	jmp $13bc			jmp 	CRNextInstruction
.13ff					_RunIt:
.13ff	7c ce 14	jmp ($14ce,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1402					CommandShift2:
.1402	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1404	20 be 23	jsr $23be		jsr	extensionHandler
.1407	4c bc 13	jmp $13bc			jmp 	CRNextInstruction
.140a					CommandColon:
.140a	60		rts				rts
.140b					ResetCodeAddress:
.140b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.140e	85 02		sta $02				sta 	codePtr
.1410	ad c9 0a	lda $0ac9			lda 	basePage+1
.1413	85 03		sta $03				sta 	codePtr+1
.1415	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1417	60		rts				rts
.1418					Unimplemented:
.1418	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.141a	20 9e 21	jsr $219e		jsr	errorHandler
.141d					TKErr01:
.141d					TKErr02:
.141d					TKErr03:
.141d					TKErr04:
.141d					TKErr05:
.141d					TKErr06:
.141d					TKErr07:
.141d					TKErr08:
.141d					TKErr09:
.141d					TKErr10:
.141d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.141f	20 9e 21	jsr $219e		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1422					Group0Vectors:
>1422	ce 15					.word	AdvanceNextLine          ; $80 [[eol]]
>1424	f2 13					.word	CommandShift1            ; $81 [[sh1]]
>1426	02 14					.word	CommandShift2            ; $82 [[sh2]]
>1428	1d 14					.word	TKErr09                  ; $83 [[sh3]]
>142a	1d 14					.word	TKErr10                  ; $84 [[fpc]]
>142c	1d 14					.word	TKErr08                  ; $85 [[str]]
>142e	21 17					.word	AndHandler               ; $86 and
>1430	0e 17					.word	OrHandler                ; $87 or
>1432	fb 16					.word	XorHandler               ; $88 xor
>1434	43 18					.word	CompareGreaterEq         ; $89 >=
>1436	4d 18					.word	CompareLessEq            ; $8a <=
>1438	2f 18					.word	CompareGreater           ; $8b >
>143a	25 18					.word	CompareLess              ; $8c <
>143c	1b 18					.word	CompareEquals            ; $8d =
>143e	39 18					.word	CompareNotEquals         ; $8e <>
>1440	8c 16					.word	AddHandler               ; $8f +
>1442	af 16					.word	SubHandler               ; $90 -
>1444	47 17					.word	ShrHandler               ; $91 >>
>1446	34 17					.word	ShlHandler               ; $92 <<
>1448	c2 16					.word	MulHandler               ; $93 *
>144a	d5 16					.word	DivHandler               ; $94 /
>144c	e8 16					.word	ModHandler               ; $95 mod
>144e	80 17					.word	PowerHandler             ; $96 ^
>1450	5a 17					.word	WordRefHandler           ; $97 !
>1452	6d 17					.word	ByteRefHandler           ; $98 ?
>1454	45 29					.word	Command_Repeat           ; $99 repeat
>1456	73 29					.word	Command_While            ; $9a while
>1458	36 28					.word	Command_FOR              ; $9b for
>145a	7a 10					.word	CommandIf                ; $9c if
>145c	1d 14					.word	TKErr04                  ; $9d defproc
>145e	52 29					.word	Command_Until            ; $9e until
>1460	96 29					.word	Command_Wend             ; $9f wend
>1462	97 28					.word	Command_NEXT             ; $a0 next
>1464	1d 14					.word	TKErr06                  ; $a1 then
>1466	b5 10					.word	Command_ENDIF            ; $a2 endif
>1468	89 13					.word	ReturnProc               ; $a3 endproc
>146a	1c 1a					.word	UnaryParenthesis         ; $a4 (
>146c	74 1b					.word	UnaryLen                 ; $a5 len(
>146e	b8 1b					.word	UnarySgn                 ; $a6 sgn(
>1470	a1 1b					.word	UnaryAbs                 ; $a7 abs(
>1472	11 1c					.word	Unary_Random             ; $a8 random(
>1474	5b 1c					.word	Unary_Page               ; $a9 page
>1476	60 20					.word	MInt32True               ; $aa true
>1478	64 20					.word	MInt32False              ; $ab false
>147a	26 1c					.word	Unary_Min                ; $ac min(
>147c	2a 1c					.word	Unary_Max                ; $ad max(
>147e	11 1d					.word	UnarySys                 ; $ae sys(
>1480	d4 1c					.word	UnaryTimer               ; $af timer(
>1482	f1 1a					.word	EventFunction            ; $b0 event(
>1484	fd 1c					.word	UnaryGet                 ; $b1 get(
>1486	ed 1c					.word	UnaryInkey               ; $b2 inkey(
>1488	a8 1c					.word	UnaryAlloc               ; $b3 alloc(
>148a	39 1d					.word	ExecChr                  ; $b4 chr$(
>148c	4d 1d					.word	ExecLeft                 ; $b5 left$(
>148e	6a 1d					.word	ExecMid                  ; $b6 mid$(
>1490	92 1d					.word	ExecRight                ; $b7 right$(
>1492	5d 18					.word	Event_Str                ; $b8 str$(
>1494	8c 18					.word	UnaryVal                 ; $b9 val(
>1496	cf 1b					.word	UnaryPeek                ; $ba peek(
>1498	d5 1b					.word	UnaryDeek                ; $bb deek(
>149a	db 1b					.word	UnaryLeek                ; $bc leek(
>149c	92 1b					.word	UnaryAsc                 ; $bd asc(
>149e	86 1c					.word	UnaryIntToFloat          ; $be int(
>14a0	99 1c					.word	UnaryFloatToInt          ; $bf float(
>14a2	8f 18					.word	UnaryIsVal               ; $c0 isval(
>14a4	69 1c					.word	UnaryReference           ; $c1 @
>14a6	7f 1c					.word	UnaryComplement          ; $c2 ~
>14a8	7c 1c					.word	UnaryHexMarker           ; $c3 &
>14aa	1d 14					.word	TKErr01                  ; $c4 )
>14ac	0a 14					.word	CommandColon             ; $c5 :
>14ae	1d 14					.word	TKErr02                  ; $c6 ,
>14b0	1d 14					.word	TKErr03                  ; $c7 ;
>14b2	a4 13					.word	Command_Rem2             ; $c8 '
>14b4	1d 14					.word	TKErr07                  ; $c9 to
>14b6	1d 14					.word	TKErr05                  ; $ca step
>14b8	1c 13					.word	CallProc                 ; $cb proc
>14ba	34 11					.word	CommandLocal             ; $cc local
>14bc	18 14					.word	Unimplemented            ; $cd dim
>14be	a4 13					.word	Command_Rem              ; $ce rem
>14c0	b6 10					.word	CommandLet               ; $cf let
>14c2	18 14					.word	Unimplemented            ; $d0 input
>14c4	af 10					.word	Command_ELSE             ; $d1 else
>14c6	3f 16					.word	Command_VDU              ; $d2 vdu
>14c8	81 12					.word	Command_Print            ; $d3 print
>14ca	0d 16					.word	CommandGOTO              ; $d4 goto
>14cc	e2 15					.word	CommandGOSUB             ; $d5 gosub
>14ce	f5 15					.word	CommandRETURN            ; $d6 return
>14d0	18 14					.word	Unimplemented            ; $d7 data
>14d2	1f 10					.word	Command_Assert           ; $d8 assert
>14d4	44 12					.word	Command_Poke             ; $d9 poke
>14d6	48 12					.word	Command_Doke             ; $da doke
>14d8	4c 12					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.14da					Group1Vectors:
>14da	2d 10					.word	CommandClear             ; $86 clear
>14dc	18 14					.word	Unimplemented            ; $87 load
>14de	18 14					.word	Unimplemented            ; $88 save
>14e0	18 14					.word	Unimplemented            ; $89 list
>14e2	36 12					.word	Command_New              ; $8a new
>14e4	b1 13					.word	Command_Run              ; $8b run
>14e6	18 14					.word	Unimplemented            ; $8c read
>14e8	18 14					.word	Unimplemented            ; $8d restore
>14ea	cb 15					.word	CommandEnd               ; $8e end
>14ec	c6 15					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af3					procList:
>0af3							.fill 	2		 					; terminated by name high.
.0af5					yInLine:
>0af5							.fill 	1
.14ee					FindProcedure:
.14ee	8c f5 0a	sty $0af5			sty 	yInLine
.14f1	20 ac 15	jsr $15ac			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.14f4	85 06		sta $06				sta 	temp1
.14f6	ad f3 0a	lda $0af3			lda		procList 					; put procList address in temp2
.14f9	85 08		sta $08				sta 	temp2
.14fb	ad f4 0a	lda $0af4			lda 	procList+1
.14fe	85 09		sta $09				sta 	temp2+1
.1500	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1502					_FPLoop:
.1502	b1 08		lda ($08),y			lda 	(temp2),y
.1504	f0 4f		beq $1555			beq 	_FPError 					; if so, we don't know this procedure.
.1506	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1508	c8		iny				iny
.1509	b1 08		lda ($08),y			lda 	(temp2),y
.150b	85 04		sta $04				sta 	temp0
.150d	c8		iny				iny
.150e	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1510	c5 06		cmp $06				cmp 	temp1
.1512	d0 2b		bne $153f			bne 	_FPNext 					; hash is different, go to next.
.1514	38		sec				sec
.1515	ad f5 0a	lda $0af5			lda 	yInLine 					; position in line must be at least 4
.1518	e9 04		sbc #$04			sbc 	#4
.151a	18		clc				clc
.151b	65 02		adc $02				adc 	codePtr
.151d	85 0a		sta $0a				sta 	temp3
.151f	a5 03		lda $03				lda 	codePtr+1
.1521	69 00		adc #$00			adc 	#0
.1523	85 0b		sta $0b				sta 	temp3+1
.1525	98		tya				tya
.1526	48		pha				pha
.1527	a0 04		ldy #$04			ldy 	#4
.1529					_FPCName:
.1529	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.152b	d1 04		cmp ($04),y			cmp 	(temp0),y
.152d	d0 0e		bne $153d			bne 	_FPpulYNext 				; if different go to next one.
.152f	c8		iny				iny
.1530	c9 3a		cmp #$3a			cmp 	#$3A
.1532	90 f5		bcc $1529			bcc 	_FPCName 					; compare the whole lot....
.1534	68		pla				pla 								; throw away the saved Y
.1535	98		tya				tya 								; length of name is Y-4
.1536	38		sec				sec
.1537	e9 04		sbc #$04			sbc 	#4
.1539	ac f5 0a	ldy $0af5			ldy 	yInLine  					; get the original Y back
.153c	60		rts				rts
.153d					_FPpulYNext:
.153d	68		pla				pla
.153e	a8		tay				tay
.153f					_FPNext:
.153f	c8		iny				iny 								; next procedure record.
.1540	10 c0		bpl $1502			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1542	98		tya				tya 								; subtract 128 from Y
.1543	38		sec				sec
.1544	e9 80		sbc #$80			sbc 	#128
.1546	a8		tay				tay
.1547	18		clc				clc 								; add 128 to temp2, so we can have more than
.1548	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.154a	69 80		adc #$80			adc 	#128
.154c	85 08		sta $08				sta 	temp2
.154e	90 b2		bcc $1502			bcc 	_FPLoop
.1550	e6 09		inc $09				inc 	temp2+1
.1552	4c 02 15	jmp $1502			jmp 	_FPLoop
.1555					_FPError:
.1555	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1557	20 9e 21	jsr $219e		jsr	errorHandler
.155a					ScanProc:
.155a	98		tya				tya
.155b	48		pha				pha
.155c	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.155e	8d f3 0a	sta $0af3			sta 	procList
.1561	a5 10		lda $10				lda 	lowMemory+1
.1563	8d f4 0a	sta $0af4			sta 	procList+1
.1566	20 0b 14	jsr $140b			jsr 	ResetCodeAddress 			; back to the start.
.1569					_ScanLoop:
.1569	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.156b	b1 02		lda ($02),y			lda 	(codePtr),y
.156d	f0 2a		beq $1599			beq 	_ScanExit
.156f	a0 03		ldy #$03			ldy 	#3							; get first token
.1571	b1 02		lda ($02),y			lda 	(codePtr),y
.1573	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.1575	d0 12		bne $1589			bne 	_ScanNext
.1577	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.1579	20 a1 15	jsr $15a1			jsr 	_ScanWrite
.157c	a5 02		lda $02				lda 	codePtr
.157e	20 a1 15	jsr $15a1			jsr 	_ScanWrite
.1581	a0 04		ldy #$04			ldy 	#4 							; start of name part
.1583	20 ac 15	jsr $15ac			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1586	20 a1 15	jsr $15a1			jsr 	_ScanWrite
.1589					_ScanNext:
.1589	18		clc				clc
.158a	a0 00		ldy #$00			ldy 	#0
.158c	b1 02		lda ($02),y			lda 	(codePtr),y
.158e	65 02		adc $02				adc 	codePtr
.1590	85 02		sta $02				sta 	codePtr
.1592	90 d5		bcc $1569			bcc 	_ScanLoop
.1594	e6 03		inc $03				inc 	codePtr+1
.1596	4c 69 15	jmp $1569			jmp 	_ScanLoop
.1599					_ScanExit:
.1599	a9 00		lda #$00			lda 	#0 							; write ending zero.
.159b	20 a1 15	jsr $15a1			jsr 	_ScanWrite
.159e	68		pla				pla
.159f	a8		tay				tay
.15a0	60		rts				rts
.15a1					_ScanWrite:
.15a1	a0 00		ldy #$00			ldy 	#0
.15a3	91 0f		sta ($0f),y			sta 	(lowMemory),y
.15a5	e6 0f		inc $0f				inc 	lowMemory
.15a7	d0 02		bne $15ab			bne 	_SWNoCarry
.15a9	e6 10		inc $10				inc 	lowMemory+1
.15ab					_SWNoCarry:
.15ab	60		rts				rts
.15ac					CalculateProcedureHash:
.15ac	a9 00		lda #$00			lda 	#0 							; clear hash.
.15ae	85 04		sta $04				sta 	temp0
.15b0					_CPHLoop:
.15b0	18		clc				clc 								; add character and rotate and add carry back in
.15b1	b1 02		lda ($02),y			lda 	(codePtr),y
.15b3	65 04		adc $04				adc 	temp0
.15b5	6a		ror a				ror 	a
.15b6	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.15b8	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.15ba	b1 02		lda ($02),y			lda 	(codePtr),y
.15bc	c8		iny				iny 								; advance incase we go round again.
.15bd	c9 3a		cmp #$3a			cmp 	#$3A
.15bf	90 ef		bcc $15b0			bcc 	_CPHLoop
.15c1	a5 04		lda $04				lda 	temp0
.15c3	a9 aa		lda #$aa			lda 	#$AA
.15c5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.15c6					CommandStop:
.15c6	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.15c8	20 9e 21	jsr $219e		jsr	errorHandler
.15cb					CommandEnd:
.15cb	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.15ce					AdvanceNextLine:
.15ce	a0 00		ldy #$00			ldy 	#0 							; get offset
.15d0	b1 02		lda ($02),y			lda 	(codePtr),y
.15d2	18		clc				clc 								; add to codePtr
.15d3	65 02		adc $02				adc 	codePtr
.15d5	85 02		sta $02				sta 	codePtr
.15d7	90 02		bcc $15db			bcc 	_ANLNoCarry
.15d9	e6 03		inc $03				inc 	codePtr+1
.15db					_ANLNoCarry:
.15db	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.15dd	f0 ec		beq $15cb			beq 	CommandEnd 					; execute END
.15df	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.15e1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.15e2					CommandGOSUB:
.15e2	20 63 1a	jsr $1a63			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.15e5	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.15e7	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.15e9	20 ff 20	jsr $20ff			jsr 	RSClaim
.15ec	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.15ee	20 2b 21	jsr $212b			jsr 	RSSavePosition
.15f1	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.15f3	f0 1b		beq $1610			beq 	GotoTOS 					; and do a GOTO there.
.15f5					CommandRETURN:
.15f5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.15f7	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.15f9	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.15fb	f0 05		beq $1602			beq 	_isok
.15fd	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.15ff	20 9e 21	jsr $219e		jsr	errorHandler
.1602					_isok:
.1602	a9 01		lda #$01			lda 	#1
.1604	20 3e 21	jsr $213e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1607	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1609	20 21 21	jsr $2121			jsr 	RSFree
.160c	60		rts				rts
.160d					CommandGOTO:
.160d	20 63 1a	jsr $1a63			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1610					GotoTOS:
.1610	20 0b 14	jsr $140b			jsr 	ResetCodeAddress 			; simple search.
.1613					_GotoSearch:
.1613	a0 00		ldy #$00			ldy 	#0 							; get offset
.1615	b1 02		lda ($02),y			lda 	(codePtr),y
.1617	f0 21		beq $163a			beq 	_GotoError 					; not found.
.1619	c8		iny				iny									; check LSB match
.161a	b1 02		lda ($02),y			lda 	(codePtr),y
.161c	d5 48		cmp $48,x			cmp 	esInt0,x
.161e	d0 07		bne $1627			bne 	_GotoNext
.1620	c8		iny				iny
.1621	b1 02		lda ($02),y			lda 	(codePtr),y
.1623	d5 50		cmp $50,x			cmp 	esInt1,x
.1625	f0 10		beq $1637			beq 	_GotoFound
.1627					_GotoNext:
.1627	a0 00		ldy #$00			ldy 	#0 							; go next line
.1629	b1 02		lda ($02),y			lda 	(codePtr),y
.162b	18		clc				clc
.162c	65 02		adc $02				adc 	codePtr
.162e	85 02		sta $02				sta 	codePtr
.1630	90 e1		bcc $1613			bcc 	_GotoSearch
.1632	e6 03		inc $03				inc 	codePtr+1
.1634	4c 13 16	jmp $1613			jmp 	_GotoSearch
.1637					_GotoFound:
.1637	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1639	60		rts				rts
.163a					_GotoError:
.163a	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.163c	20 9e 21	jsr $219e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.163f					Command_VDU:
.163f	20 63 1a	jsr $1a63			jsr 	EvaluateRootInteger 			; get integer at root.
.1642	a5 48		lda $48				lda 	esInt0
.1644	a2 06		ldx #$06		ldx	#6
.1646	20 8f 21	jsr $218f		jsr	deviceHandler
.1649					_CVNext:
.1649	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.164b	c8		iny				iny
.164c	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.164e	f0 ef		beq $163f			beq 	Command_VDU
.1650	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1652	d0 0a		bne $165e			bne 	_CVExit
.1654	a5 50		lda $50				lda 	esInt1
.1656	a2 06		ldx #$06		ldx	#6
.1658	20 8f 21	jsr $218f		jsr	deviceHandler
.165b	4c 49 16	jmp $1649			jmp 	_CVNext
.165e	88		dey		_CVExit:dey
.165f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2973					Command_While:
.2973	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2975	a2 04		ldx #$04			ldx 	#4
.2977	20 ff 20	jsr $20ff			jsr 	RSClaim 					; create on stack.
.297a	88		dey				dey
.297b	a9 01		lda #$01			lda 	#1
.297d	20 2b 21	jsr $212b			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2980	c8		iny				iny
.2981	20 65 1a	jsr $1a65			jsr 	EvaluateInteger				; get the conditional
.2984	20 8b 20	jsr $208b			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2987	f0 01		beq $298a			beq 	_CWFail
.2989	60		rts				rts
.298a					_CWFail:
.298a	a9 04		lda #$04			lda 	#4
.298c	20 21 21	jsr $2121			jsr 	RSFree 						; close the just opened position.
.298f	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2991	aa		tax				tax
.2992	20 ae 29	jsr $29ae			jsr 	ScanForward
.2995	60		rts				rts
.2996					Command_Wend:
.2996	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2998	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.299a	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.299c	f0 05		beq $29a3			beq 	_isok
.299e	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.29a0	20 9e 21	jsr $219e		jsr	errorHandler
.29a3					_isok:
.29a3	a9 01		lda #$01			lda 	#1
.29a5	20 3e 21	jsr $213e			jsr 	RSLoadPosition				; go back until true
.29a8	a9 04		lda #$04			lda 	#4
.29aa	20 21 21	jsr $2121			jsr 	RSFree 						; close the loop
.29ad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1660					BinaryProcess:
.1660	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1662	15 41		ora $41,x			ora 	esType+1,x
.1664	0a		asl a				asl 	a
.1665	30 0e		bmi $1675			bmi 	_BPStringType 				; if one is set, then string type.
.1667	18		clc				clc 								; return CC for integer
.1668	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.166a	f0 08		beq $1674			beq 	_BPExit 					; if both integer then return with CC.
.166c	20 7a 16	jsr $167a			jsr 	BPMakeBothFloat 			; make both float
.166f	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1671	95 40		sta $40,x			sta 	esType,x
.1673	38		sec				sec 								; and return with carry set.
.1674					_BPExit:
.1674	60		rts				rts
.1675					_BPStringType:
.1675	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1677	20 9e 21	jsr $219e		jsr	errorHandler
.167a					BPMakeBothFloat:
.167a	e8		inx				inx
.167b	20 7f 16	jsr $167f			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.167e	ca		dex				dex
.167f					BPMakeFloat:
.167f	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1681	4a		lsr a				lsr 	a
.1682	b0 07		bcs $168b			bcs 	_BPIsFloat
.1684	8a		txa				txa
.1685	a2 1a		ldx #$1a		ldx	#26
.1687	20 4f 24	jsr $244f		jsr	floatingpointHandler
.168a	aa		tax				tax
.168b					_BPIsFloat:
.168b	60		rts				rts
.168c					AddHandler:
.168c	20 db 18	jsr $18db			jsr 	DereferenceTwo 				; dereference top two on stack.
.168f	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1691	35 41		and $41,x			and 	esType+1,x
.1693	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1695	d0 10		bne $16a7			bne 	_AHStringConcat				; concatenate strings.
.1697	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.169a	b0 03		bcs $169f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.169c	4c 4d 1f	jmp $1f4d			jmp 	MInt32Add 							; else do it as integer.
.169f					_IsFPOperation:
.169f	8a		txa				txa 								; call the relevant fp routine
.16a0	a2 02		ldx #$02		ldx	#2
.16a2	20 4f 24	jsr $244f		jsr	floatingpointHandler
.16a5	aa		tax				tax
.16a6	60		rts				rts
.16a7					_AHStringConcat:
.16a7	8a		txa				txa
.16a8	a2 04		ldx #$04		ldx	#4
.16aa	20 a6 26	jsr $26a6		jsr	stringHandler
.16ad	aa		tax				tax
.16ae	60		rts				rts
.16af					SubHandler:
.16af	20 db 18	jsr $18db			jsr 	DereferenceTwo
.16b2	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.16b5	b0 03		bcs $16ba			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16b7	4c 67 1f	jmp $1f67			jmp 	MInt32Sub 							; else do it as integer.
.16ba					_IsFPOperation:
.16ba	8a		txa				txa 								; call the relevant fp routine
.16bb	a2 10		ldx #$10		ldx	#16
.16bd	20 4f 24	jsr $244f		jsr	floatingpointHandler
.16c0	aa		tax				tax
.16c1	60		rts				rts
.16c2					MulHandler:
.16c2	20 db 18	jsr $18db			jsr 	DereferenceTwo
.16c5	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.16c8	b0 03		bcs $16cd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16ca	4c 81 1f	jmp $1f81			jmp 	MInt32Multiply 							; else do it as integer.
.16cd					_IsFPOperation:
.16cd	8a		txa				txa 								; call the relevant fp routine
.16ce	a2 0a		ldx #$0a		ldx	#10
.16d0	20 4f 24	jsr $244f		jsr	floatingpointHandler
.16d3	aa		tax				tax
.16d4	60		rts				rts
.16d5					DivHandler:
.16d5	20 db 18	jsr $18db			jsr 	DereferenceTwo
.16d8	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.16db	b0 03		bcs $16e0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16dd	4c 45 1e	jmp $1e45			jmp 	MInt32SDivide 							; else do it as integer.
.16e0					_IsFPOperation:
.16e0	8a		txa				txa 								; call the relevant fp routine
.16e1	a2 06		ldx #$06		ldx	#6
.16e3	20 4f 24	jsr $244f		jsr	floatingpointHandler
.16e6	aa		tax				tax
.16e7	60		rts				rts
.16e8					ModHandler:
.16e8	20 db 18	jsr $18db			jsr 	DereferenceTwo
.16eb	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.16ee	b0 03		bcs $16f3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16f0	4c c3 1e	jmp $1ec3			jmp 	MInt32Modulus 							; else do it as integer.
.16f3					_IsFPOperation:
.16f3	8a		txa				txa 								; call the relevant fp routine
.16f4	a2 08		ldx #$08		ldx	#8
.16f6	20 4f 24	jsr $244f		jsr	floatingpointHandler
.16f9	aa		tax				tax
.16fa	60		rts				rts
.16fb					XorHandler:
.16fb	20 db 18	jsr $18db			jsr 	DereferenceTwo
.16fe	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.1701	b0 03		bcs $1706			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1703	4c f7 1d	jmp $1df7			jmp 	MInt32Xor 							; else do it as integer.
.1706					_IsFPOperation:
.1706	8a		txa				txa 								; call the relevant fp routine
.1707	a2 08		ldx #$08		ldx	#8
.1709	20 4f 24	jsr $244f		jsr	floatingpointHandler
.170c	aa		tax				tax
.170d	60		rts				rts
.170e					OrHandler:
.170e	20 db 18	jsr $18db			jsr 	DereferenceTwo
.1711	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.1714	b0 03		bcs $1719			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1716	4c de 1d	jmp $1dde			jmp 	MInt32Or 							; else do it as integer.
.1719					_IsFPOperation:
.1719	8a		txa				txa 								; call the relevant fp routine
.171a	a2 08		ldx #$08		ldx	#8
.171c	20 4f 24	jsr $244f		jsr	floatingpointHandler
.171f	aa		tax				tax
.1720	60		rts				rts
.1721					AndHandler:
.1721	20 db 18	jsr $18db			jsr 	DereferenceTwo
.1724	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.1727	b0 03		bcs $172c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1729	4c c5 1d	jmp $1dc5			jmp 	MInt32And 							; else do it as integer.
.172c					_IsFPOperation:
.172c	8a		txa				txa 								; call the relevant fp routine
.172d	a2 08		ldx #$08		ldx	#8
.172f	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1732	aa		tax				tax
.1733	60		rts				rts
.1734					ShlHandler:
.1734	20 db 18	jsr $18db			jsr 	DereferenceTwo
.1737	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.173a	b0 03		bcs $173f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.173c	4c b5 17	jmp $17b5			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.173f					_IsFPOperation:
.173f	8a		txa				txa 								; call the relevant fp routine
.1740	a2 08		ldx #$08		ldx	#8
.1742	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1745	aa		tax				tax
.1746	60		rts				rts
.1747					ShrHandler:
.1747	20 db 18	jsr $18db			jsr 	DereferenceTwo
.174a	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.174d	b0 03		bcs $1752			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.174f	4c b8 17	jmp $17b8			jmp 	MInt32ShiftRightX 							; else do it as integer.
.1752					_IsFPOperation:
.1752	8a		txa				txa 								; call the relevant fp routine
.1753	a2 08		ldx #$08		ldx	#8
.1755	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1758	aa		tax				tax
.1759	60		rts				rts
.175a					WordRefHandler:
.175a	20 db 18	jsr $18db			jsr 	DereferenceTwo
.175d	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.1760	b0 03		bcs $1765			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1762	4c a7 17	jmp $17a7			jmp 	MInt32WordIndirect 							; else do it as integer.
.1765					_IsFPOperation:
.1765	8a		txa				txa 								; call the relevant fp routine
.1766	a2 08		ldx #$08		ldx	#8
.1768	20 4f 24	jsr $244f		jsr	floatingpointHandler
.176b	aa		tax				tax
.176c	60		rts				rts
.176d					ByteRefHandler:
.176d	20 db 18	jsr $18db			jsr 	DereferenceTwo
.1770	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.1773	b0 03		bcs $1778			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1775	4c ab 17	jmp $17ab			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1778					_IsFPOperation:
.1778	8a		txa				txa 								; call the relevant fp routine
.1779	a2 08		ldx #$08		ldx	#8
.177b	20 4f 24	jsr $244f		jsr	floatingpointHandler
.177e	aa		tax				tax
.177f	60		rts				rts
.1780					PowerHandler:
.1780	20 db 18	jsr $18db			jsr 	DereferenceTwo
.1783	20 60 16	jsr $1660			jsr 	BinaryProcess 				; check to see if either is float
.1786	b0 03		bcs $178b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1788	4c 93 17	jmp $1793			jmp 	PowerInteger 							; else do it as integer.
.178b					_IsFPOperation:
.178b	8a		txa				txa 								; call the relevant fp routine
.178c	a2 16		ldx #$16		ldx	#22
.178e	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1791	aa		tax				tax
.1792	60		rts				rts
.1793					PowerInteger:
.1793	20 7a 16	jsr $167a			jsr 	BPMakeBothFloat				; make them float.
.1796	8a		txa				txa
.1797	a2 16		ldx #$16		ldx	#22
.1799	20 4f 24	jsr $244f		jsr	floatingpointHandler
.179c	a2 12		ldx #$12		ldx	#18
.179e	20 4f 24	jsr $244f		jsr	floatingpointHandler
.17a1	aa		tax				tax
.17a2	a9 00		lda #$00			lda 	#0 							; make type integer
.17a4	95 40		sta $40,x			sta 	esType,x
.17a6	60		rts				rts
.17a7					Mint32WordIndirect:
.17a7	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.17a9	d0 02		bne $17ad			bne 	Min32Indirect
.17ab					Mint32ByteIndirect:
.17ab	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.17ad					Min32Indirect:
.17ad	48		pha				pha 								; save the indirection
.17ae	20 4d 1f	jsr $1f4d			jsr 	MInt32Add 					; add a!b a?b
.17b1	68		pla				pla 								; and set the type to reference.
.17b2	95 40		sta $40,x			sta 	esType,x
.17b4	60		rts				rts
.17b5					Mint32ShiftLeftX:
.17b5	18		clc				clc
.17b6	90 01		bcc $17b9			bcc 	Mint32Shift
.17b8					Mint32ShiftRightX:
.17b8	38		sec				sec
.17b9					Mint32Shift:
.17b9	08		php				php 								; save carry flag on stack.
.17ba	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.17bc	15 59		ora $59,x			ora 	esInt2+1,x
.17be	15 61		ora $61,x			ora 	esInt3+1,x
.17c0	d0 1e		bne $17e0			bne 	_MShiftZero
.17c2	b5 49		lda $49,x			lda 	esInt0+1,x
.17c4	c9 20		cmp #$20			cmp 	#32
.17c6	b0 18		bcs $17e0			bcs 	_MShiftZero
.17c8					_MShiftLoop:
.17c8	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.17ca	f0 12		beq $17de			beq 	_MShiftExit
.17cc	d6 49		dec $49,x			dec 	esInt0+1,x
.17ce	28		plp				plp 								; restore and save carry
.17cf	08		php				php
.17d0	90 06		bcc $17d8			bcc 	_MShiftLeft
.17d2	20 82 20	jsr $2082			jsr 	Mint32ShiftRight
.17d5	4c c8 17	jmp $17c8			jmp 	_MShiftLoop
.17d8					_MShiftLeft:
.17d8	20 79 20	jsr $2079			jsr 	Mint32ShiftLeft
.17db	4c c8 17	jmp $17c8			jmp 	_MShiftLoop
.17de					_MShiftExit:
.17de	28		plp				plp	 								; throw saved carry and exit
.17df	60		rts				rts
.17e0					_MShiftZero:
.17e0	4c 64 20	jmp $2064			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.17e3					PerformComparison:
.17e3	20 db 18	jsr $18db			jsr 	DereferenceTwo 				; make both values.
.17e6	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.17e8	35 41		and $41,x			and 	esType+1,x
.17ea	0a		asl a				asl 	a
.17eb	30 1d		bmi $180a			bmi 	_PCIsString
.17ed	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.17ef	15 41		ora $41,x			ora 	esType+1,x
.17f1	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.17f2	30 22		bmi $1816			bmi 	_PCError
.17f4	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.17f6	f0 0f		beq $1807			beq 	_PCIsInteger 				; if not two integers
.17f8	20 7a 16	jsr $167a			jsr 	BPMakeBothFloat 			; make both float
.17fb	8a		txa				txa
.17fc	a2 04		ldx #$04		ldx	#4
.17fe	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1801	86 0c		stx $0c				stx 	tempShort 					; save result
.1803	aa		tax				tax
.1804	a5 0c		lda $0c				lda 	tempShort
.1806	60		rts				rts
.1807					_PCIsInteger:
.1807	4c 10 1e	jmp $1e10			jmp 	MInt32Compare
.180a					_PCIsString:
.180a	8a		txa				txa 								; A has SP
.180b	a2 06		ldx #$06		ldx	#6
.180d	20 a6 26	jsr $26a6		jsr	stringHandler
.1810	86 0c		stx $0c				stx 	tempShort 					; save result
.1812	aa		tax				tax 								; put SP back in X and get result.
.1813	a5 0c		lda $0c				lda 	tempShort
.1815	60		rts				rts
.1816					_PCError:
.1816	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1818	20 9e 21	jsr $219e		jsr	errorHandler
.181b					CompareEquals:
.181b	20 e3 17	jsr $17e3			jsr 	PerformComparison
.181e	c9 00		cmp #$00			cmp 	#$00
.1820	f0 35		beq $1857			beq  	CompareTrue
.1822	4c 5a 18	jmp $185a			jmp 	CompareFalse
.1825					CompareLess:
.1825	20 e3 17	jsr $17e3			jsr 	PerformComparison
.1828	c9 ff		cmp #$ff			cmp 	#$FF
.182a	f0 2b		beq $1857			beq  	CompareTrue
.182c	4c 5a 18	jmp $185a			jmp 	CompareFalse
.182f					CompareGreater:
.182f	20 e3 17	jsr $17e3			jsr 	PerformComparison
.1832	c9 01		cmp #$01			cmp 	#$01
.1834	f0 21		beq $1857			beq  	CompareTrue
.1836	4c 5a 18	jmp $185a			jmp 	CompareFalse
.1839					CompareNotEquals:
.1839	20 e3 17	jsr $17e3			jsr 	PerformComparison
.183c	c9 00		cmp #$00			cmp 	#$00
.183e	d0 17		bne $1857			bne  	CompareTrue
.1840	4c 5a 18	jmp $185a			jmp 	CompareFalse
.1843					CompareGreaterEq:
.1843	20 e3 17	jsr $17e3			jsr 	PerformComparison
.1846	c9 ff		cmp #$ff			cmp 	#$FF
.1848	d0 0d		bne $1857			bne  	CompareTrue
.184a	4c 5a 18	jmp $185a			jmp 	CompareFalse
.184d					CompareLessEq:
.184d	20 e3 17	jsr $17e3			jsr 	PerformComparison
.1850	c9 01		cmp #$01			cmp 	#$01
.1852	d0 03		bne $1857			bne  	CompareTrue
.1854	4c 5a 18	jmp $185a			jmp 	CompareFalse
.1857					CompareTrue:
.1857	4c 60 20	jmp $2060			jmp 	MInt32True
.185a					CompareFalse:
.185a	4c 64 20	jmp $2064			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.185d					Event_Str:
.185d	20 4f 1a	jsr $1a4f			jsr 	EvaluateNumeric 			; get a number.
.1860	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.1862	d0 13		bne $1877			bne 	_ESFloat
.1864	20 ba 18	jsr $18ba			jsr 	ConvertGetBase
.1867	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1869	85 04		sta $04				sta 	temp0
.186b	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.186d	85 05		sta $05				sta 	1+(temp0)
.186f	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1871	20 ba 1f	jsr $1fba			jsr 	MInt32ToString 				; convert to string.
.1874	4c 84 18	jmp $1884			jmp 	_ESCloneExit 				; clone and exit.
.1877					_ESFloat:
.1877	20 d7 20	jsr $20d7			jsr 	CheckRightParen 			; check closing )
.187a	20 2b 11	jsr $112b			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.187d	8a		txa				txa
.187e	a2 14		ldx #$14		ldx	#20
.1880	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1883	aa		tax				tax
.1884					_ESCloneExit:
.1884	8a		txa				txa
.1885	a2 02		ldx #$02		ldx	#2
.1887	20 a6 26	jsr $26a6		jsr	stringHandler
.188a	aa		tax				tax
.188b	60		rts				rts
.188c					UnaryVal:
.188c	38		sec				sec
.188d	b0 01		bcs $1890			bcs 	ValueMain
.188f					UnaryIsVal:
.188f	18		clc				clc
.1890					ValueMain:
.1890	08		php				php 								; save results (CS is value, CC is validation)
.1891	20 5a 1a	jsr $1a5a			jsr 	EvaluateString
.1894	20 ba 18	jsr $18ba			jsr 	ConvertGetBase 				; get base, if any.
.1897	98		tya				tya
.1898	48		pha				pha
.1899	20 2b 11	jsr $112b			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.189c	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.189e	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.18a0	20 d7 1e	jsr $1ed7			jsr 	MInt32FromString 			; convert it back from a string.
.18a3	b0 0c		bcs $18b1			bcs 	_VMSuccess 					; successfully converted.
.18a5	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.18a7	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.18a9	f0 00		beq $18ab			beq 	_VMFailed 	 				; so we failed.
.18ab					_VMFailed:
.18ab	68		pla				pla
.18ac	a8		tay				tay
.18ad	28		plp				plp
.18ae	4c 64 20	jmp $2064			jmp 	MInt32False 				; return 0 whatever.
.18b1					_VMSuccess:
.18b1	68		pla				pla
.18b2	a8		tay				tay
.18b3	28		plp				plp 								; if CS the it was val() so we want the value.
.18b4	b0 03		bcs $18b9			bcs 	_VMExit
.18b6	4c 60 20	jmp $2060			jmp 	MInt32True 					; otherwise return true as successful.
.18b9					_VMExit:
.18b9	60		rts				rts
.18ba					ConvertGetBase:
.18ba	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.18bc	95 49		sta $49,x			sta 	esInt0+1,x
.18be	b1 02		lda ($02),y			lda 	(codePtr),y
.18c0	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.18c2	d0 0e		bne $18d2			bne 	_CGBDone
.18c4	e8		inx				inx 								; next level
.18c5	c8		iny				iny 								; skip comma.
.18c6	20 6d 1a	jsr $1a6d			jsr 	EvaluateSmallInteger		; evaluate the base.
.18c9	ca		dex				dex
.18ca	c9 02		cmp #$02			cmp 	#2
.18cc	90 08		bcc $18d6			bcc 	_CGBValue
.18ce	c9 11		cmp #$11			cmp 	#17
.18d0	b0 04		bcs $18d6			bcs 	_CGBValue
.18d2					_CGBDone:
.18d2	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.18d5	60		rts				rts
.18d6					_CGBValue:
.18d6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18d8	20 9e 21	jsr $219e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.18db					DereferenceTwo:
.18db	e8		inx				inx
.18dc	20 e0 18	jsr $18e0			jsr 	DereferenceOne
.18df	ca		dex				dex
.18e0					DereferenceOne:
.18e0	b5 40		lda $40,x			lda 	esType,x
.18e2	10 3d		bpl $1921			bpl 	_DRNotReference 			; is it a reference ?
.18e4	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.18e5	b0 3b		bcs $1922			bcs 	_DRFloatDeReference
.18e7	98		tya				tya
.18e8	48		pha				pha
.18e9	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.18eb	85 04		sta $04				sta 	temp0
.18ed	b5 50		lda $50,x			lda 	esInt1,x
.18ef	85 05		sta $05				sta 	temp0+1
.18f1	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.18f3	95 50		sta $50,x			sta 	esInt1,x
.18f5	95 58		sta $58,x			sta 	esInt2,x
.18f7	95 60		sta $60,x			sta 	esInt3,x
.18f9	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.18fb	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.18fd	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.18fe	30 0d		bmi $190d			bmi 	_DeRefString 				; string, 2 bytes only
.1900	d0 11		bne $1913			bne 	_DeRefByte 					; byte 1 byte only
.1902					_DeRefLong:
.1902	a0 03		ldy #$03			ldy 	#3
.1904	b1 04		lda ($04),y			lda 	(temp0),y
.1906	95 60		sta $60,x			sta 	esInt3,x
.1908	88		dey				dey
.1909	b1 04		lda ($04),y			lda 	(temp0),y
.190b	95 58		sta $58,x			sta 	esInt2,x
.190d					_DeRefString:
.190d	a0 01		ldy #$01			ldy 	#1
.190f	b1 04		lda ($04),y			lda 	(temp0),y
.1911	95 50		sta $50,x			sta 	esInt1,x
.1913					_DeRefByte:
.1913	a0 00		ldy #$00			ldy 	#0
.1915	b1 04		lda ($04),y			lda 	(temp0),y
.1917	95 48		sta $48,x			sta 	esInt0,x
.1919	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.191b	29 40		and #$40			and 	#$40
.191d	95 40		sta $40,x			sta 	esType,x
.191f	68		pla				pla
.1920	a8		tay				tay
.1921					_DRNotReference
.1921	60		rts				rts
.1922					_DRFloatDereference:
.1922	20 2b 11	jsr $112b			jsr 	TOSToTemp0 					; address to deref in temp0
.1925	8a		txa				txa
.1926	a2 1c		ldx #$1c		ldx	#28
.1928	20 4f 24	jsr $244f		jsr	floatingpointHandler
.192b	aa		tax				tax
.192c	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.192e	95 40		sta $40,x			sta 	esType,x
.1930	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1931					EvaluateLevel:
.1931	48		pha				pha 								; save precedence level.
.1932	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1934	95 48		sta $48,x			sta 	esInt0,x
.1936	95 50		sta $50,x			sta 	esInt1,x
.1938	95 58		sta $58,x			sta 	esInt2,x
.193a	95 60		sta $60,x			sta 	esInt3,x
.193c	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.193e	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1940	30 21		bmi $1963			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1942	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1943	30 0a		bmi $194f			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1945	8a		txa				txa 								; stack level in X
.1946	a2 00		ldx #$00		ldx	#0
.1948	20 2f 28	jsr $282f		jsr	variableHandler
.194b	aa		tax				tax
.194c	4c 8c 19	jmp $198c			jmp		_ELHasTerm
.194f					_ELIsConstant:
.194f	4a		lsr a				lsr 	a 							; get the value back
.1950	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1952	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1954					_ELCheckNext:
.1954	c8		iny				iny 								; look at next
.1955	b1 02		lda ($02),y			lda 	(codePtr),y
.1957	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1959	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.195b	b0 2f		bcs $198c			bcs 	_ELHasTerm 					; done getting the constant.
.195d	20 a5 1a	jsr $1aa5			jsr 	ELShiftByteIn 				; shift byte into position.
.1960	4c 54 19	jmp $1954			jmp 	_ELCheckNext
.1963					_ELIsToken:
.1963	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1965	f0 0f		beq $1976			beq 	_ELIsString
.1967	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1969	d0 5f		bne $19ca			bne 	_ELCheckUnary
.196b	8a		txa				txa 								; put X into A
.196c	c8		iny				iny 								; skip over the float marker
.196d	a2 18		ldx #$18		ldx	#24
.196f	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1972	aa		tax				tax 								; restore X
.1973	4c 8c 19	jmp $198c			jmp 	_ELHasTerm
.1976					_ELIsString:
.1976	98		tya				tya 								; address of string is codePtr+y+1
.1977	38		sec				sec
.1978	65 02		adc $02				adc 	codePtr
.197a	95 48		sta $48,x			sta 	esInt0,x
.197c	a5 03		lda $03				lda 	codePtr+1
.197e	69 00		adc #$00			adc 	#0
.1980	95 50		sta $50,x			sta 	esInt1,x
.1982	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1984	95 40		sta $40,x			sta 	esType,x
.1986	c8		iny				iny 								; skip over string.
.1987	98		tya				tya
.1988	38		sec				sec									; +1 for the length itself.
.1989	71 02		adc ($02),y			adc 	(codePtr),y
.198b	a8		tay				tay 								; and fall through to term loop code.
.198c					_ELHasTerm:
.198c	b1 02		lda ($02),y			lda 	(codePtr),y
.198e	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1990	90 04		bcc $1996			bcc 	_ELPopExit
.1992	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1994	90 02		bcc $1998			bcc 	_ELHasBinaryTerm
.1996					_ELPopExit:
.1996	68		pla				pla
.1997					_ELExit:
.1997	60		rts				rts
.1998					_ELHasBinaryTerm:
.1998	84 0c		sty $0c				sty 	tempShort 					; save position
.199a	a8		tay				tay 								; use token as an index and get the precedence.
.199b	b9 4d 1a	lda $1a4d,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.199e	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.19a0	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.19a2	68		pla				pla 								; restore current level.
.19a3	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.19a5	b0 f0		bcs $1997			bcs 	_ELExit
.19a7	48		pha				pha 								; save current level back on the stack.
.19a8	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.19aa	48		pha				pha
.19ab	c8		iny				iny
.19ac	e8		inx				inx 								; calculate the RHS at the operator precedence.
.19ad	a5 0c		lda $0c				lda 	tempShort
.19af	20 31 19	jsr $1931			jsr 	EvaluateLevel
.19b2	ca		dex				dex
.19b3	68		pla				pla 								; get the operator back out.
.19b4					_ELExecuteA:
.19b4	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.19b6	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.19b7	aa		tax				tax
.19b8	bd 22 14	lda $1422,x			lda 	Group0Vectors,x
.19bb	85 04		sta $04				sta 	temp0
.19bd	bd 23 14	lda $1423,x			lda 	Group0Vectors+1,x
.19c0	85 05		sta $05				sta 	temp0+1
.19c2	a6 0c		ldx $0c				ldx 	tempShort
.19c4	20 11 1a	jsr $1a11			jsr 	_ELCallTemp0
.19c7	4c 8c 19	jmp $198c			jmp 	_ELHasTerm 					; and loop back round.
.19ca					_ELCheckUnary:
.19ca	c8		iny				iny 								; skip over token.
.19cb	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.19cd	f0 19		beq $19e8			beq 	_ELMinus
.19cf	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.19d1	f0 2c		beq $19ff			beq 	_ELIndirect
.19d3	c9 98		cmp #$98			cmp 	#TKW_QMARK
.19d5	f0 28		beq $19ff			beq 	_ELIndirect
.19d7	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.19d9	f0 39		beq $1a14			beq 	_ELExtension
.19db	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.19dd	90 04		bcc $19e3			bcc 	_ELUSyntax
.19df	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.19e1	90 d1		bcc $19b4			bcc 	_ELExecuteA 				; if so do that token.
.19e3					_ELUSyntax:
.19e3	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.19e5	20 9e 21	jsr $219e		jsr	errorHandler
.19e8					_ELMinus:
.19e8	20 2e 1a	jsr $1a2e			jsr 	EvaluateNumericTerm 		; get a number to negate.
.19eb	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.19ed	f0 0a		beq $19f9			beq 	_ELMinusInteger
.19ef	8a		txa				txa
.19f0	a2 0c		ldx #$0c		ldx	#12
.19f2	20 4f 24	jsr $244f		jsr	floatingpointHandler
.19f5	aa		tax				tax
.19f6	4c 8c 19	jmp $198c			jmp 	_ELHasTerm
.19f9					_ELMinusInteger:
.19f9	20 1e 20	jsr $201e			jsr 	MInt32Negate 				; do int negate
.19fc	4c 8c 19	jmp $198c			jmp 	_ELHasTerm
.19ff					_ELIndirect:
.19ff	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1a00	20 37 1a	jsr $1a37			jsr 	EvaluateIntegerTerm 		; integer address
.1a03	68		pla				pla
.1a04	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1a06	f0 02		beq $1a0a			beq 	_ELHaveModifier
.1a08	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1a0a					_ELHaveModifier:
.1a0a	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1a0c	95 40		sta $40,x			sta 	esType,x
.1a0e	4c 8c 19	jmp $198c			jmp 	_ELHasTerm
.1a11					_ELCallTemp0:
.1a11	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1a14					_ELExtension:
.1a14	8a		txa				txa 								; stack pos in A
.1a15	20 be 23	jsr $23be		jsr	extensionHandler
.1a18	aa		tax				tax 								; restore stack
.1a19	4c 8c 19	jmp $198c			jmp 	_ELHasTerm
.1a1c					UnaryParenthesis:
.1a1c	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1a1e	20 31 19	jsr $1931			jsr 	EvaluateLevel
.1a21	20 d7 20	jsr $20d7			jsr 	CheckRightParen 			; check for )
.1a24	60		rts				rts
.1a25					EvaluateTerm:
.1a25	a9 0f		lda #$0f			lda 	#15
.1a27	20 31 19	jsr $1931			jsr 	EvaluateLevel
.1a2a	20 e0 18	jsr $18e0			jsr 	DereferenceOne
.1a2d	60		rts				rts
.1a2e					EvaluateNumericTerm:
.1a2e	20 25 1a	jsr $1a25			jsr 	EvaluateTerm
.1a31	b5 40		lda $40,x			lda 	esType,x
.1a33	0a		asl a				asl 	a 							; see if it's a string.
.1a34	30 09		bmi $1a3f			bmi 	ENTType
.1a36	60		rts				rts
.1a37					EvaluateIntegerTerm:
.1a37	20 25 1a	jsr $1a25			jsr 	EvaluateTerm
.1a3a	b5 40		lda $40,x			lda 	esType,x
.1a3c	d0 01		bne $1a3f			bne 	ENTType
.1a3e	60		rts				rts
.1a3f					ENTType:
.1a3f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a41	20 9e 21	jsr $219e		jsr	errorHandler
.1a44					EvaluateRoot:
.1a44	a2 00		ldx #$00			ldx 	#0
.1a46					Evaluate:
.1a46	a9 00		lda #$00			lda 	#0
.1a48	20 31 19	jsr $1931			jsr 	EvaluateLevel
.1a4b	20 e0 18	jsr $18e0			jsr 	DereferenceOne
.1a4e	60		rts				rts
.1a4f					EvaluateNumeric:
.1a4f	20 46 1a	jsr $1a46			jsr 	Evaluate
.1a52	b5 40		lda $40,x			lda 	esType,x
.1a54	0a		asl a				asl 	a 							; see if it's a string.
.1a55	30 e8		bmi $1a3f			bmi 	ENTType
.1a57	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1a58	4a		lsr a				lsr 	a
.1a59	60		rts				rts
.1a5a					EvaluateString:
.1a5a	20 46 1a	jsr $1a46			jsr 	Evaluate
.1a5d	b5 40		lda $40,x			lda 	esType,x
.1a5f	0a		asl a				asl 	a 							; see if it's a string.
.1a60	10 dd		bpl $1a3f			bpl 	ENTType
.1a62	60		rts				rts
.1a63					EvaluateRootInteger:
.1a63	a2 00		ldx #$00			ldx 	#0
.1a65					EvaluateInteger:
.1a65	20 46 1a	jsr $1a46			jsr 	Evaluate
.1a68	b5 40		lda $40,x			lda 	esType,x
.1a6a	d0 d3		bne $1a3f			bne 	ENTType
.1a6c	60		rts				rts
.1a6d					EvaluateSmallInteger:
.1a6d	20 65 1a	jsr $1a65			jsr 	EvaluateInteger
.1a70	b5 50		lda $50,x			lda 	esInt1,x
.1a72	15 58		ora $58,x			ora 	esInt2,x
.1a74	15 60		ora $60,x			ora 	esInt3,x
.1a76	d0 03		bne $1a7b			bne 	_ESIValue
.1a78	b5 48		lda $48,x			lda 	esInt0,x
.1a7a	60		rts				rts
.1a7b					_ESIValue:
.1a7b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a7d	20 9e 21	jsr $219e		jsr	errorHandler
.1a80					LinkEvaluate:
.1a80	aa		tax				tax
.1a81	20 46 1a	jsr $1a46			jsr 	Evaluate
.1a84	8a		txa				txa
.1a85	60		rts				rts
.1a86					LinkEvaluateInteger:
.1a86	aa		tax				tax
.1a87	20 65 1a	jsr $1a65			jsr 	EvaluateInteger
.1a8a	8a		txa				txa
.1a8b	60		rts				rts
.1a8c					LinkEvaluateSmallInt:
.1a8c	aa		tax				tax
.1a8d	20 6d 1a	jsr $1a6d			jsr 	EvaluateSmallInteger
.1a90	8a		txa				txa
.1a91	60		rts				rts
.1a92					EvaluateReference:
.1a92	ad e4 1a	lda $1ae4			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1a95	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1a96	e9 01		sbc #$01			sbc 	#1
.1a98	20 31 19	jsr $1931			jsr 	EvaluateLevel
.1a9b	b5 40		lda $40,x			lda 	esType,x
.1a9d	10 01		bpl $1aa0			bpl 	_ERFail
.1a9f	60		rts				rts
.1aa0					_ERFail:
.1aa0	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1aa2	20 9e 21	jsr $219e		jsr	errorHandler
.1aa5					ELShiftByteIn:
.1aa5	48		pha				pha 								; save bits to shift in.
.1aa6	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1aa8	48		pha				pha
.1aa9	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1aab	95 60		sta $60,x			sta 	esInt3,x
.1aad	b5 50		lda $50,x			lda 	esInt1,x
.1aaf	95 58		sta $58,x			sta 	esInt2,x
.1ab1	b5 48		lda $48,x			lda 	esInt0,x
.1ab3	95 50		sta $50,x			sta 	esInt1,x
.1ab5	a9 00		lda #$00			lda 	#0
.1ab7	95 48		sta $48,x			sta 	esInt0,x
.1ab9	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1aba	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1abc	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1abe					_ELShiftLoop:
.1abe	4a		lsr a				lsr 	a
.1abf	76 60		ror $60,x			ror 	esInt3,x
.1ac1	76 58		ror $58,x			ror 	esInt2,x
.1ac3	76 50		ror $50,x			ror 	esInt1,x
.1ac5	76 48		ror $48,x			ror 	esInt0,x
.1ac7	c9 01		cmp #$01			cmp 	#1
.1ac9	d0 f3		bne $1abe			bne 	_ELShiftLoop
.1acb	68		pla				pla 								; get original 6 bit value and OR in.
.1acc	29 3f		and #$3f			and 	#$3F
.1ace	15 48		ora $48,x			ora 	esInt0,x
.1ad0	95 48		sta $48,x			sta 	esInt0,x
.1ad2	60		rts				rts
.1ad3					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1ad3	01					.byte	$01			; $86 and
>1ad4	01					.byte	$01			; $87 or
>1ad5	01					.byte	$01			; $88 xor
>1ad6	02					.byte	$02			; $89 >=
>1ad7	02					.byte	$02			; $8a <=
>1ad8	02					.byte	$02			; $8b >
>1ad9	02					.byte	$02			; $8c <
>1ada	02					.byte	$02			; $8d =
>1adb	02					.byte	$02			; $8e <>
>1adc	03					.byte	$03			; $8f +
>1add	03					.byte	$03			; $90 -
>1ade	04					.byte	$04			; $91 >>
>1adf	04					.byte	$04			; $92 <<
>1ae0	04					.byte	$04			; $93 *
>1ae1	04					.byte	$04			; $94 /
>1ae2	04					.byte	$04			; $95 mod
>1ae3	05					.byte	$05			; $96 ^
>1ae4	06					.byte	$06			; $97 !
>1ae5	06					.byte	$06			; $98 ?
>1ae6	82					.byte	$82			; $99 repeat
>1ae7	82					.byte	$82			; $9a while
>1ae8	82					.byte	$82			; $9b for
>1ae9	82					.byte	$82			; $9c if
>1aea	82					.byte	$82			; $9d defproc
>1aeb	80					.byte	$80			; $9e until
>1aec	80					.byte	$80			; $9f wend
>1aed	80					.byte	$80			; $a0 next
>1aee	80					.byte	$80			; $a1 then
>1aef	80					.byte	$80			; $a2 endif
>1af0	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1af1					EventFunction:
.1af1	20 92 1a	jsr $1a92			jsr 	EvaluateReference			; get the variable reference.
.1af4	b5 40		lda $40,x			lda 	esType,x
.1af6	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1af8	d0 5b		bne $1b55			bne 	_EFType
.1afa	20 e4 20	jsr $20e4			jsr 	CheckComma
.1afd	e8		inx				inx
.1afe	20 65 1a	jsr $1a65			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1b01	20 d7 20	jsr $20d7			jsr 	CheckRightParen 			; finish off with the
.1b04	ca		dex				dex
.1b05	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1b07	29 80		and #$80			and 	#$80
.1b09	15 58		ora $58,x			ora 	esInt2,x
.1b0b	15 60		ora $60,x			ora 	esInt3,x
.1b0d	d0 41		bne $1b50			bne 	_EFValue
.1b0f	98		tya				tya
.1b10	48		pha				pha
.1b11	8a		txa				txa
.1b12	48		pha				pha
.1b13	a2 0a		ldx #$0a		ldx	#10
.1b15	20 8f 21	jsr $218f		jsr	deviceHandler
.1b18	84 07		sty $07				sty 	temp1+1
.1b1a	85 06		sta $06				sta 	temp1
.1b1c	68		pla				pla
.1b1d	aa		tax				tax
.1b1e	20 2b 11	jsr $112b			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1b21	a0 03		ldy #$03			ldy 	#3							; if -ve
.1b23	b1 04		lda ($04),y			lda 	(temp0),y
.1b25	30 23		bmi $1b4a			bmi 	_EFFail 	 				; straight out with fail, means on pause.
.1b27	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1b29	b1 04		lda ($04),y			lda 	(temp0),y
.1b2b	c8		iny				iny
.1b2c	11 04		ora ($04),y			ora 	(temp0),y
.1b2e	f0 17		beq $1b47			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1b30	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1b32	38		sec				sec
.1b33	b1 04		lda ($04),y			lda 	(temp0),y
.1b35	e5 06		sbc $06				sbc 	temp1
.1b37	c8		iny				iny
.1b38	b1 04		lda ($04),y			lda 	(temp0),y
.1b3a	e5 07		sbc $07				sbc 	temp1+1
.1b3c	10 0c		bpl $1b4a			bpl 	_EFFail 					; if trigger >= timer then return False
.1b3e	20 5a 1b	jsr $1b5a			jsr 	SetEventTimer 				; reset the timer for next time.
.1b41	20 60 20	jsr $2060			jsr	 	MInt32True 					; and treutn true as fired.
.1b44	68		pla				pla
.1b45	a8		tay				tay
.1b46	60		rts				rts
.1b47					_EFInitialise:
.1b47	20 5a 1b	jsr $1b5a			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1b4a					_EFFail:
.1b4a	68		pla				pla
.1b4b	a8		tay				tay
.1b4c	20 64 20	jsr $2064			jsr 	MInt32False
.1b4f	60		rts				rts
.1b50					_EFValue:
.1b50	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b52	20 9e 21	jsr $219e		jsr	errorHandler
.1b55					_EFType:
.1b55	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b57	20 9e 21	jsr $219e		jsr	errorHandler
.1b5a					SetEventTimer:
.1b5a	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1b5c	18		clc				clc
.1b5d	a5 06		lda $06				lda 	temp1
.1b5f	75 49		adc $49,x			adc 	esInt0+1,x
.1b61	91 04		sta ($04),y			sta		(temp0),y
.1b63	c8		iny				iny
.1b64	a5 07		lda $07				lda 	temp1+1
.1b66	75 51		adc $51,x			adc 	esInt1+1,x
.1b68	91 04		sta ($04),y			sta		(temp0),y
.1b6a	88		dey				dey
.1b6b	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1b6d	d0 04		bne $1b73			bne 	_SETExit
.1b6f	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1b71	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1b73					_SETExit:
.1b73	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1b74					UnaryLen:
.1b74	20 82 1b	jsr $1b82			jsr 	ULStart
.1b77					ULFinish:
.1b77	b1 04		lda ($04),y			lda 	(temp0),y
.1b79	a4 0c		ldy $0c				ldy 	tempShort
.1b7b	20 73 20	jsr $2073			jsr 	MInt32Set8Bit
.1b7e	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.1b81	60		rts				rts
.1b82	20 5a 1a	jsr $1a5a	ULStart:jsr 	EvaluateString
.1b85	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1b87	85 04		sta $04				sta 	temp0
.1b89	b5 50		lda $50,x			lda 	esInt1,x
.1b8b	85 05		sta $05				sta 	temp0+1
.1b8d	84 0c		sty $0c				sty 	tempShort 					; get length
.1b8f	a0 00		ldy #$00			ldy 	#0
.1b91	60		rts				rts
.1b92					UnaryAsc:
.1b92	20 82 1b	jsr $1b82			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1b95	b1 04		lda ($04),y			lda 	(temp0),y
.1b97	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1b98	c9 00		cmp #$00			cmp 	#0
.1b9a	d0 db		bne $1b77			bne 	ULFinish
.1b9c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b9e	20 9e 21	jsr $219e		jsr	errorHandler
.1ba1					UnaryAbs:
.1ba1	20 4f 1a	jsr $1a4f			jsr 	EvaluateNumeric
.1ba4	b0 07		bcs $1bad			bcs 	_UAFloat
.1ba6	20 19 20	jsr $2019			jsr 	MInt32Absolute
.1ba9	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.1bac	60		rts				rts
.1bad					_UAFloat:
.1bad	8a		txa				txa
.1bae	a2 00		ldx #$00		ldx	#0
.1bb0	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1bb3	aa		tax				tax
.1bb4	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.1bb7	60		rts				rts
.1bb8					UnarySgn:
.1bb8	20 4f 1a	jsr $1a4f			jsr 	EvaluateNumeric
.1bbb	b0 07		bcs $1bc4			bcs 	_USFloat
.1bbd	20 51 20	jsr $2051			jsr 	MInt32Sign
.1bc0	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.1bc3	60		rts				rts
.1bc4					_USFloat:
.1bc4	8a		txa				txa
.1bc5	a2 0e		ldx #$0e		ldx	#14
.1bc7	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1bca	aa		tax				tax
.1bcb	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.1bce	60		rts				rts
.1bcf					UnaryPeek:
.1bcf	20 fb 1b	jsr $1bfb			jsr 	PDLCode
.1bd2	4c ef 1b	jmp $1bef			jmp 	PDLByte0
.1bd5					UnaryDeek:
.1bd5	20 fb 1b	jsr $1bfb			jsr 	PDLCode
.1bd8	4c e9 1b	jmp $1be9			jmp 	PDLByte1
.1bdb					UnaryLeek:
.1bdb	20 fb 1b	jsr $1bfb			jsr 	PDLCode
.1bde	a0 03		ldy #$03			ldy 	#3
.1be0	b1 04		lda ($04),y			lda 	(temp0),y
.1be2	95 60		sta $60,x			sta 	esInt3,x
.1be4	88		dey				dey
.1be5	b1 04		lda ($04),y			lda 	(temp0),y
.1be7	95 58		sta $58,x			sta 	esInt2,x
.1be9					PDLByte1:
.1be9	a0 01		ldy #$01			ldy 	#1
.1beb	b1 04		lda ($04),y			lda 	(temp0),y
.1bed	95 50		sta $50,x			sta 	esInt1,x
.1bef					PDLByte0:
.1bef	a0 00		ldy #$00			ldy 	#0
.1bf1	b1 04		lda ($04),y			lda 	(temp0),y
.1bf3	95 48		sta $48,x			sta 	esInt0,x
.1bf5	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1bf7	20 d7 20	jsr $20d7			jsr 	CheckRightParen 			; check right and return
.1bfa	60		rts				rts
.1bfb					PDLCode:
.1bfb	20 65 1a	jsr $1a65			jsr 	EvaluateInteger
.1bfe	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1c00	85 04		sta $04				sta 	temp0
.1c02	b5 50		lda $50,x			lda 	esInt1,x
.1c04	85 05		sta $05				sta 	temp0+1
.1c06	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1c08	95 50		sta $50,x			sta 	esInt1,x
.1c0a	95 58		sta $58,x			sta 	esInt2,x
.1c0c	95 60		sta $60,x			sta 	esInt3,x
.1c0e	84 0c		sty $0c				sty 	tempShort 					; save Y
.1c10	60		rts				rts
.1c11					Unary_Random:
.1c11	20 94 20	jsr $2094			jsr 	MInt32Random 				; generate random number.
.1c14	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1c16	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1c18	f0 08		beq $1c22			beq 	_URExit
.1c1a	e8		inx				inx 								; load range 0..r-1 into +1
.1c1b	20 65 1a	jsr $1a65			jsr 	EvaluateInteger
.1c1e	ca		dex				dex
.1c1f	20 c3 1e	jsr $1ec3			jsr 	MInt32Modulus 				; calculate random % modulus
.1c22					_URExit:
.1c22	20 d7 20	jsr $20d7			jsr 	CheckRightParen 			; check right and return
.1c25	60		rts				rts
.1c26					Unary_Min:
.1c26	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1c28	d0 02		bne $1c2c			bne 	UnaryMBody
.1c2a					Unary_Max:
.1c2a	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1c2c					UnaryMBody:
.1c2c	48		pha				pha 								; save comparator on stack.
.1c2d	20 46 1a	jsr $1a46			jsr 	Evaluate 					; get the first thing to check
.1c30					_UnaryMLoop:
.1c30	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1c32	c8		iny				iny
.1c33	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1c35	f0 09		beq $1c40			beq 	_UnaryMExit
.1c37	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.1c39	f0 07		beq $1c42			beq 	_UnaryMCompare
.1c3b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c3d	20 9e 21	jsr $219e		jsr	errorHandler
.1c40					_UnaryMExit:
.1c40	68		pla				pla 								; throw comparator and return.
.1c41	60		rts				rts
.1c42					_UnaryMCompare:
.1c42	e8		inx				inx 								; get the 2nd thing to evaluate
.1c43	20 46 1a	jsr $1a46			jsr 	Evaluate
.1c46	ca		dex				dex
.1c47	20 e3 17	jsr $17e3			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1c4a	85 0c		sta $0c				sta 	tempShort 					; save result
.1c4c	68		pla				pla 								; get what we need
.1c4d	48		pha				pha
.1c4e	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1c50	d0 de		bne $1c30			bne 	_UnaryMLoop 				; no, try another value.
.1c52	20 64 20	jsr $2064			jsr 	MInt32False 				; promote 2nd to 1st.
.1c55	20 4d 1f	jsr $1f4d			jsr 	MInt32Add
.1c58	4c 30 1c	jmp $1c30			jmp 	_UnaryMLoop
.1c5b					Unary_Page:
.1c5b	20 64 20	jsr $2064			jsr 	MInt32False 				; zero
.1c5e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1c61	95 48		sta $48,x			sta 	esInt0,x
.1c63	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c66	95 50		sta $50,x			sta 	esInt1,x
.1c68	60		rts				rts
.1c69					UnaryReference:
.1c69	a9 0f		lda #$0f			lda 	#15
.1c6b	20 31 19	jsr $1931			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1c6e	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1c70	10 05		bpl $1c77			bpl 	UType
.1c72	a9 00		lda #$00			lda 	#0 							; make it an integer
.1c74	95 40		sta $40,x			sta 	esType,x
.1c76	60		rts				rts
.1c77					UType:
.1c77	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c79	20 9e 21	jsr $219e		jsr	errorHandler
.1c7c					UnaryHexMarker:
.1c7c	4c 37 1a	jmp $1a37			jmp 	EvaluateIntegerTerm
.1c7f					UnaryComplement:
.1c7f	20 37 1a	jsr $1a37			jsr 	EvaluateIntegerTerm
.1c82	20 38 20	jsr $2038			jsr 	MInt32Not
.1c85	60		rts				rts
.1c86					UnaryIntToFloat:
.1c86	20 4f 1a	jsr $1a4f			jsr 	EvaluateNumeric
.1c89	b5 40		lda $40,x			lda 	esType,x
.1c8b	d0 0b		bne $1c98			bne 	_UIFExit
.1c8d	8a		txa				txa
.1c8e	a2 1a		ldx #$1a		ldx	#26
.1c90	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1c93	aa		tax				tax
.1c94	a9 01		lda #$01			lda 	#1
.1c96	95 40		sta $40,x			sta 	esType,x
.1c98					_UIFExit:
.1c98	60		rts				rts
.1c99					UnaryFloatToInt:
.1c99	20 4f 1a	jsr $1a4f			jsr 	EvaluateNumeric
.1c9c	b5 40		lda $40,x			lda 	esType,x
.1c9e	f0 07		beq $1ca7			beq 	_UFIExit
.1ca0	8a		txa				txa
.1ca1	a2 12		ldx #$12		ldx	#18
.1ca3	20 4f 24	jsr $244f		jsr	floatingpointHandler
.1ca6	aa		tax				tax
.1ca7					_UFIExit:
.1ca7	60		rts				rts
.1ca8					UnaryAlloc:
.1ca8	e8		inx				inx 								; evaluate memory required
.1ca9	20 65 1a	jsr $1a65			jsr 	EvaluateInteger
.1cac	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.1caf	ca		dex				dex
.1cb0	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1cb2	15 61		ora $61,x			ora 	esInt3+1,x
.1cb4	d0 19		bne $1ccf			bne 	_UABadValue
.1cb6	20 64 20	jsr $2064			jsr 	MInt32False					; zero return.
.1cb9	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1cbb	95 50		sta $50,x			sta 	esInt1,x
.1cbd	a5 0f		lda $0f				lda 	lowMemory
.1cbf	95 48		sta $48,x			sta 	esInt0,x
.1cc1	18		clc				clc 								; add alloc required.
.1cc2	75 49		adc $49,x			adc 	esInt0+1,x
.1cc4	85 0f		sta $0f				sta 	lowMemory
.1cc6	a5 10		lda $10				lda 	lowMemory+1
.1cc8	75 51		adc $51,x			adc 	esInt1+1,x
.1cca	85 10		sta $10				sta 	lowMemory+1
.1ccc	b0 01		bcs $1ccf			bcs		_UABadValue 				; overflow definitely bad.
.1cce	60		rts				rts
.1ccf					_UABadValue:
.1ccf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cd1	20 9e 21	jsr $219e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1cd4					UnaryTimer:
.1cd4	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.1cd7	98		tya				tya
.1cd8	48		pha				pha
.1cd9	20 8b 20	jsr $208b			jsr 	MInt32Zero 					; zero result
.1cdc	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1cde	a2 0a		ldx #$0a		ldx	#10
.1ce0	20 8f 21	jsr $218f		jsr	deviceHandler
.1ce3	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1ce5	95 48		sta $48,x			sta 	esInt0,x
.1ce7	98		tya				tya
.1ce8	95 50		sta $50,x			sta 	esInt1,x
.1cea	68		pla				pla
.1ceb	a8		tay				tay
.1cec	60		rts				rts
.1ced					UnaryInkey:
.1ced	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.1cf0	86 04		stx $04				stx 	temp0
.1cf2	a2 04		ldx #$04		ldx	#4
.1cf4	20 8f 21	jsr $218f		jsr	deviceHandler
.1cf7	a6 04		ldx $04				ldx 	temp0
.1cf9	20 73 20	jsr $2073			jsr 	MInt32Set8Bit
.1cfc	60		rts				rts
.1cfd					UnaryGet:
.1cfd	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.1d00	86 04		stx $04				stx 	temp0
.1d02					_UGLoop:
.1d02	a2 04		ldx #$04		ldx	#4
.1d04	20 8f 21	jsr $218f		jsr	deviceHandler
.1d07	c9 00		cmp #$00			cmp 	#0
.1d09	f0 f7		beq $1d02			beq 	_UGLoop
.1d0b	a6 04		ldx $04				ldx 	temp0
.1d0d	20 73 20	jsr $2073			jsr 	MInt32Set8Bit
.1d10	60		rts				rts
.1d11					UnarySys:
.1d11	20 65 1a	jsr $1a65			jsr 	EvaluateInteger 				; get the address
.1d14	20 d7 20	jsr $20d7			jsr 	CheckRightParen
.1d17	20 2b 11	jsr $112b			jsr 	TOSToTemp0 						; copy to temp0
.1d1a	8a		txa				txa
.1d1b	48		pha				pha
.1d1c	98		tya				tya
.1d1d	48		pha				pha
.1d1e	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1d21	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1d24	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1d27	20 36 1d	jsr $1d36			jsr 	_CallTemp0
.1d2a	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1d2c	68		pla				pla
.1d2d	a8		tay				tay
.1d2e	68		pla				pla
.1d2f	aa		tax				tax
.1d30	a5 0c		lda $0c				lda 	tempShort
.1d32	20 73 20	jsr $2073			jsr 	MInt32Set8Bit 					; return result.
.1d35	60		rts				rts
.1d36					_CallTemp0:
.1d36	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1d39					ExecChr:
.1d39	20 6d 1a	jsr $1a6d			jsr 	EvaluateSmallInteger		; character number
.1d3c	20 d7 20	jsr $20d7			jsr 	CheckRightParen				; right bracket
.1d3f	98		tya				tya
.1d40	48		pha				pha
.1d41	8a		txa				txa 								; A = stack
.1d42	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1d44	a2 00		ldx #$00		ldx	#0
.1d46	20 a6 26	jsr $26a6		jsr	stringHandler
.1d49	aa		tax				tax 								; X = stack
.1d4a	68		pla				pla
.1d4b	a8		tay				tay
.1d4c	60		rts				rts
.1d4d					ExecLeft:
.1d4d	20 5a 1a	jsr $1a5a			jsr 	EvaluateString 				; string to stack,X
.1d50	20 e4 20	jsr $20e4			jsr 	CheckComma
.1d53	e8		inx				inx
.1d54	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1d56	20 73 20	jsr $2073			jsr 	MInt32Set8Bit
.1d59	e8		inx				inx
.1d5a	20 6d 1a	jsr $1a6d			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1d5d					ExecSubstring:
.1d5d	ca		dex				dex 								; fix up X
.1d5e	ca		dex				dex
.1d5f	20 d7 20	jsr $20d7			jsr 	CheckRightParen 			; check closing right bracket.
.1d62	8a		txa				txa 								; do the substring and exit.
.1d63	a2 08		ldx #$08		ldx	#8
.1d65	20 a6 26	jsr $26a6		jsr	stringHandler
.1d68	aa		tax				tax
.1d69	60		rts				rts
.1d6a					ExecMid:
.1d6a	20 5a 1a	jsr $1a5a			jsr 	EvaluateString 				; string to stack,X
.1d6d	20 e4 20	jsr $20e4			jsr 	CheckComma
.1d70	e8		inx				inx
.1d71	20 6d 1a	jsr $1a6d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d74	c9 00		cmp #$00			cmp 	#0
.1d76	f0 15		beq $1d8d			beq 	_EMValue
.1d78	e8		inx				inx
.1d79	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1d7b	20 73 20	jsr $2073			jsr 	MInt32Set8Bit
.1d7e	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1d80	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1d82	f0 d9		beq $1d5d			beq 	ExecSubString
.1d84	20 e4 20	jsr $20e4			jsr 	CheckComma
.1d87	20 6d 1a	jsr $1a6d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d8a	4c 5d 1d	jmp $1d5d			jmp 	ExecSubString
.1d8d					_EMValue:
.1d8d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d8f	20 9e 21	jsr $219e		jsr	errorHandler
.1d92					ExecRight:
.1d92	20 5a 1a	jsr $1a5a			jsr 	EvaluateString 				; string to stack,X
.1d95	20 e4 20	jsr $20e4			jsr 	CheckComma
.1d98	e8		inx				inx
.1d99	20 6d 1a	jsr $1a6d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1d9c	ca		dex				dex
.1d9d	98		tya				tya
.1d9e	48		pha				pha
.1d9f	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1da1	85 04		sta $04				sta 	temp0
.1da3	b5 50		lda $50,x			lda 	esInt1,x
.1da5	85 05		sta $05				sta 	temp0+1
.1da7	a0 00		ldy #$00			ldy 	#0 							; point to length
.1da9	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1dab	18		clc				clc 								; add 1.
.1dac	69 01		adc #$01			adc 	#1
.1dae	38		sec				sec
.1daf	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1db1	f0 02		beq $1db5			beq		_ERMake1 					; if zero, make it 1.
.1db3	b0 02		bcs $1db7			bcs		_EROkay
.1db5					_ERMake1:
.1db5	a9 01		lda #$01			lda 	#1 							; start position.
.1db7					_EROkay:
.1db7	e8		inx				inx 								; set start pos.
.1db8	95 48		sta $48,x			sta 	esInt0,x
.1dba	e8		inx				inx
.1dbb	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1dbd	20 73 20	jsr $2073			jsr 	MInt32Set8Bit
.1dc0	68		pla				pla
.1dc1	a8		tay				tay
.1dc2	4c 5d 1d	jmp $1d5d			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1dc5					MInt32And:
.1dc5	b5 48		lda $48,x			lda 	esInt0,x
.1dc7	35 49		and $49,x			and 	esInt0+1,x
.1dc9	95 48		sta $48,x			sta 	esInt0,x
.1dcb	b5 50		lda $50,x			lda 	esInt1,x
.1dcd	35 51		and $51,x			and 	esInt1+1,x
.1dcf	95 50		sta $50,x			sta 	esInt1,x
.1dd1	b5 58		lda $58,x			lda 	esInt2,x
.1dd3	35 59		and $59,x			and 	esInt2+1,x
.1dd5	95 58		sta $58,x			sta 	esInt2,x
.1dd7	b5 60		lda $60,x			lda 	esInt3,x
.1dd9	35 61		and $61,x			and 	esInt3+1,x
.1ddb	95 60		sta $60,x			sta 	esInt3,x
.1ddd	60		rts				rts
.1dde					MInt32Or:
.1dde	b5 48		lda $48,x			lda 	esInt0,x
.1de0	15 49		ora $49,x			ora 	esInt0+1,x
.1de2	95 48		sta $48,x			sta 	esInt0,x
.1de4	b5 50		lda $50,x			lda 	esInt1,x
.1de6	15 51		ora $51,x			ora 	esInt1+1,x
.1de8	95 50		sta $50,x			sta 	esInt1,x
.1dea	b5 58		lda $58,x			lda 	esInt2,x
.1dec	15 59		ora $59,x			ora 	esInt2+1,x
.1dee	95 58		sta $58,x			sta 	esInt2,x
.1df0	b5 60		lda $60,x			lda 	esInt3,x
.1df2	15 61		ora $61,x			ora 	esInt3+1,x
.1df4	95 60		sta $60,x			sta 	esInt3,x
.1df6	60		rts				rts
.1df7					MInt32Xor:
.1df7	b5 48		lda $48,x			lda 	esInt0,x
.1df9	55 49		eor $49,x			eor 	esInt0+1,x
.1dfb	95 48		sta $48,x			sta 	esInt0,x
.1dfd	b5 50		lda $50,x			lda 	esInt1,x
.1dff	55 51		eor $51,x			eor 	esInt1+1,x
.1e01	95 50		sta $50,x			sta 	esInt1,x
.1e03	b5 58		lda $58,x			lda 	esInt2,x
.1e05	55 59		eor $59,x			eor 	esInt2+1,x
.1e07	95 58		sta $58,x			sta 	esInt2,x
.1e09	b5 60		lda $60,x			lda 	esInt3,x
.1e0b	55 61		eor $61,x			eor 	esInt3+1,x
.1e0d	95 60		sta $60,x			sta 	esInt3,x
.1e0f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1e10					MInt32Compare:
.1e10	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1e12	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e14	d0 13		bne $1e29			bne 	MInt32Compare2
.1e16	b5 50		lda $50,x			lda 	esInt1,x
.1e18	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1e1a	d0 0d		bne $1e29			bne 	MInt32Compare2
.1e1c	b5 58		lda $58,x			lda 	esInt2,x
.1e1e	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1e20	d0 07		bne $1e29			bne 	MInt32Compare2
.1e22	b5 60		lda $60,x			lda 	esInt3,x
.1e24	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1e26	d0 01		bne $1e29			bne 	MInt32Compare2
.1e28	60		rts				rts
.1e29					MInt32Compare2:
.1e29	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1e2b	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e2d	b5 50		lda $50,x			lda		esInt1,x
.1e2f	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e31	b5 58		lda $58,x			lda		esInt2,x
.1e33	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e35	b5 60		lda $60,x			lda		esInt3,x
.1e37	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e39	50 02		bvc $1e3d			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1e3b	49 80		eor #$80			eor 	#$80
.1e3d					_I32LNoOverflow
.1e3d	30 03		bmi $1e42			bmi 	MInt32CLess					; if -ve then return $FF
.1e3f	a9 01		lda #$01			lda 	#$01						; else return $01
.1e41	60		rts				rts
.1e42					MInt32CLess:
.1e42	a9 ff		lda #$ff			lda 	#$FF
.1e44	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1e45					MInt32SDivide:
.1e45	98		tya				tya  								; save Y, which is the count of negations
.1e46	48		pha				pha
.1e47	a0 00		ldy #$00			ldy 	#0 							; zero count
.1e49	20 61 1e	jsr $1e61			jsr 	_MInt32SRemSign 			; unsign TOS
.1e4c	e8		inx				inx 								; unsign TOS+1
.1e4d	20 61 1e	jsr $1e61			jsr 	_MInt32SRemSign
.1e50	ca		dex				dex
.1e51	98		tya				tya 								; save sign count on stack
.1e52	48		pha				pha
.1e53	20 6a 1e	jsr $1e6a			jsr 	MInt32UDivide 				; unsigned division
.1e56	68		pla				pla 								; get sign count back
.1e57	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1e59	f0 03		beq $1e5e			beq 	_I32SNoNeg
.1e5b	20 1e 20	jsr $201e			jsr 	MInt32Negate
.1e5e					_I32SNoNeg:
.1e5e	68		pla				pla 								; restoe Y and exit
.1e5f	a8		tay				tay
.1e60	60		rts				rts
.1e61					_MInt32SRemSign:
.1e61	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1e63	10 04		bpl $1e69			bpl 	_MInt32SRSExit
.1e65	c8		iny				iny 								; increment the sign count
.1e66	20 1e 20	jsr $201e			jsr 	MInt32Negate 				; negate the value.
.1e69					_MInt32SRSExit:
.1e69	60		rts				rts
.1e6a					MInt32UDivide:
.1e6a	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1e6c	15 51		ora $51,x			ora 	esInt1+1,x
.1e6e	15 52		ora $52,x			ora 	esInt1+2,x
.1e70	15 53		ora $53,x			ora 	esInt1+3,x
.1e72	f0 4a		beq $1ebe			beq 	_MInt32DZero
.1e74	e8		inx				inx 								; clear A
.1e75	e8		inx				inx
.1e76	20 64 20	jsr $2064			jsr 	MInt32False
.1e79	ca		dex				dex
.1e7a	ca		dex				dex
.1e7b	98		tya				tya 								; save Y on the stack
.1e7c	48		pha				pha
.1e7d	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1e7f					_MInt32UDLoop:
.1e7f	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1e81	36 50		rol $50,x			rol 	esInt1,x
.1e83	36 58		rol $58,x			rol 	esInt2,x
.1e85	36 60		rol $60,x			rol 	esInt3,x
.1e87	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1e89	36 52		rol $52,x			rol 	esInt1+2,x
.1e8b	36 5a		rol $5a,x			rol 	esInt2+2,x
.1e8d	36 62		rol $62,x			rol 	esInt3+2,x
.1e8f	38		sec				sec 								; calculate A-M saving result on the stack
.1e90	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e92	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1e94	48		pha				pha
.1e95	b5 52		lda $52,x			lda 	esInt1+2,x
.1e97	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e99	48		pha				pha
.1e9a	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1e9c	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e9e	48		pha				pha
.1e9f	b5 62		lda $62,x			lda 	esInt3+2,x
.1ea1	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1ea3	90 10		bcc $1eb5			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1ea5	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1ea7	68		pla				pla
.1ea8	95 5a		sta $5a,x			sta 	esInt2+2,x
.1eaa	68		pla				pla
.1eab	95 52		sta $52,x			sta 	esInt1+2,x
.1ead	68		pla				pla
.1eae	95 4a		sta $4a,x			sta 	esInt0+2,x
.1eb0	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1eb2	4c b8 1e	jmp $1eb8			jmp 	_MInt32Next 					; do the next iteration
.1eb5					_MInt32NoSubtract:
.1eb5	68		pla				pla
.1eb6	68		pla				pla
.1eb7	68		pla				pla
.1eb8					_MInt32Next:
.1eb8	88		dey				dey 								; do this 32 times.
.1eb9	d0 c4		bne $1e7f			bne 	_MInt32UDLoop
.1ebb	68		pla				pla 								; restore Y and exit
.1ebc	a8		tay				tay
.1ebd	60		rts				rts
.1ebe					_MInt32DZero:
.1ebe	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1ec0	20 9e 21	jsr $219e		jsr	errorHandler
.1ec3					MInt32Modulus:
.1ec3	20 6a 1e	jsr $1e6a			jsr 	MInt32UDivide 				; do the division.
.1ec6	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1ec8	95 60		sta $60,x			sta 	esInt3,x
.1eca	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1ecc	95 58		sta $58,x			sta 	esInt2,x
.1ece	b5 52		lda $52,x			lda 	esInt1+2,x
.1ed0	95 50		sta $50,x			sta 	esInt1,x
.1ed2	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1ed4	95 48		sta $48,x			sta 	esInt0,x
.1ed6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af6					fs32Length:
>0af6							.fill 	1
.1ed7					MInt32FromString:
.1ed7	85 0c		sta $0c				sta 	tempShort 					; save base
.1ed9	98		tya				tya
.1eda	48		pha				pha
.1edb	a0 00		ldy #$00			ldy 	#0 							; get length
.1edd	b1 04		lda ($04),y			lda 	(temp0),y
.1edf	8d f6 0a	sta $0af6			sta 	fs32Length
.1ee2	f0 65		beq $1f49			beq 	_I32FSFail2					; fail if length zero.
.1ee4	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1ee6	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1ee8	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1eea	d0 09		bne $1ef5			bne 	_I32FSNotNegative
.1eec	ad f6 0a	lda $0af6			lda 	fs32Length 					; get length back.
.1eef	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1ef1	f0 56		beq $1f49			beq 	_I32FSFail2
.1ef3	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1ef5					_I32FSNotNegative:
.1ef5	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1ef7	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1ef9	d0 02		bne $1efd			bne 	_I32FSNN2
.1efb	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1efd					_I32FSNN2:
.1efd	48		pha				pha 								; save base + final sign on stack.
.1efe	20 64 20	jsr $2064			jsr 	MInt32False 				; zero the return value.
.1f01					_I32FSMainLoop:
.1f01	68		pla				pla 								; get the base back into tempShort
.1f02	48		pha				pha
.1f03	29 7f		and #$7f			and 	#$7F
.1f05	85 0c		sta $0c				sta 	tempShort
.1f07	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1f09	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1f0b	90 02		bcc $1f0f			bcc 	_I32FSNotLC
.1f0d	e9 20		sbc #$20			sbc 	#32
.1f0f					_I32FSNotLC:
.1f0f	38		sec				sec 								; subtract 48 (ASCII "0")
.1f10	e9 30		sbc #$30			sbc 	#"0"
.1f12	90 34		bcc $1f48			bcc 	_I32FSFail 					; nothing more to do.
.1f14	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1f16	90 06		bcc $1f1e			bcc 	_I32FSValidate
.1f18	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1f1a	90 2c		bcc $1f48			bcc 	_I32FSFail
.1f1c	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1f1e					_I32FSValidate:
.1f1e	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1f20	b0 26		bcs $1f48			bcs 	_I32FSFail 					; sorry, too large for this base.
.1f22	48		pha				pha 								; save the new digit value.
.1f23	e8		inx				inx 								; put base into next slot.
.1f24	a5 0c		lda $0c				lda 	tempShort
.1f26	20 73 20	jsr $2073			jsr 	MInt32Set8Bit
.1f29	ca		dex				dex
.1f2a	20 81 1f	jsr $1f81			jsr 	MInt32Multiply 				; multiply current by the base
.1f2d	e8		inx				inx
.1f2e	68		pla				pla  								; put additive into next slot
.1f2f	20 73 20	jsr $2073			jsr 	MInt32Set8Bit
.1f32	ca		dex				dex
.1f33	20 4d 1f	jsr $1f4d			jsr 	MInt32Add 					; and add it
.1f36	c8		iny				iny 								; look at next character
.1f37	cc f6 0a	cpy $0af6			cpy 	fs32Length 					; until > length.
.1f3a	f0 c5		beq $1f01			beq 	_I32FSMainLoop
.1f3c	90 c3		bcc $1f01			bcc 	_I32FSMainLoop
.1f3e					_I32FSDone:
.1f3e	68		pla				pla 								; get base/final sign back
.1f3f	10 03		bpl $1f44			bpl 	_I32FSNN3
.1f41	20 1e 20	jsr $201e			jsr 	MInt32Negate 				; negate the result.
.1f44					_I32FSNN3:
.1f44	68		pla				pla
.1f45	a8		tay				tay
.1f46	38		sec				sec
.1f47	60		rts				rts
.1f48					_I32FSFail:
.1f48	68		pla				pla
.1f49					_I32FSFail2:
.1f49	68		pla				pla
.1f4a	a8		tay				tay
.1f4b	18		clc				clc
.1f4c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1f4d					MInt32Add:
.1f4d	18		clc				clc
.1f4e	b5 48		lda $48,x			lda 	esInt0,x
.1f50	75 49		adc $49,x			adc 	esInt0+1,x
.1f52	95 48		sta $48,x			sta 	esInt0,x
.1f54	b5 50		lda $50,x			lda 	esInt1,x
.1f56	75 51		adc $51,x			adc 	esInt1+1,x
.1f58	95 50		sta $50,x			sta 	esInt1,x
.1f5a	b5 58		lda $58,x			lda 	esInt2,x
.1f5c	75 59		adc $59,x			adc 	esInt2+1,x
.1f5e	95 58		sta $58,x			sta 	esInt2,x
.1f60	b5 60		lda $60,x			lda 	esInt3,x
.1f62	75 61		adc $61,x			adc 	esInt3+1,x
.1f64	95 60		sta $60,x			sta 	esInt3,x
.1f66	60		rts				rts
.1f67					MInt32Sub:
.1f67	38		sec				sec
.1f68	b5 48		lda $48,x			lda 	esInt0,x
.1f6a	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1f6c	95 48		sta $48,x			sta 	esInt0,x
.1f6e	b5 50		lda $50,x			lda 	esInt1,x
.1f70	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1f72	95 50		sta $50,x			sta 	esInt1,x
.1f74	b5 58		lda $58,x			lda 	esInt2,x
.1f76	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1f78	95 58		sta $58,x			sta 	esInt2,x
.1f7a	b5 60		lda $60,x			lda 	esInt3,x
.1f7c	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1f7e	95 60		sta $60,x			sta 	esInt3,x
.1f80	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1f81					MInt32Multiply:
.1f81	e8		inx				inx 								; copy 2nd -> 3rd
.1f82	20 a7 1f	jsr $1fa7			jsr 	MInt32CopyUp
.1f85	ca		dex				dex
.1f86	20 a7 1f	jsr $1fa7			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1f89	20 64 20	jsr $2064			jsr 	MInt32False 					; zero 1st.
.1f8c					_I32Loop:
.1f8c	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1f8e	29 01		and #$01			and 	#1
.1f90	f0 03		beq $1f95			beq 	_I32NoAdd 					; if set
.1f92	20 4d 1f	jsr $1f4d			jsr 	MInt32Add 					; add 2nd to 1st.
.1f95					_I32NoAdd:
.1f95	e8		inx				inx 								; shift 2nd left
.1f96	20 79 20	jsr $2079			jsr 	MInt32ShiftLeft
.1f99	e8		inx				inx  								; shift 3rd right
.1f9a	20 82 20	jsr $2082			jsr 	MInt32ShiftRight
.1f9d	20 8b 20	jsr $208b			jsr 	MInt32Zero 					; check if zero.
.1fa0	08		php				php 								; save status bits
.1fa1	ca		dex				dex 	 							; point back to 1st
.1fa2	ca		dex				dex
.1fa3	28		plp				plp 								; get status bits
.1fa4	d0 e6		bne $1f8c			bne 	_I32Loop 					; if non-zero keep going.
.1fa6	60		rts				rts
.1fa7					MInt32CopyUp:
.1fa7	b5 48		lda $48,x			lda 	esInt0,x
.1fa9	95 49		sta $49,x			sta 	esInt0+1,x
.1fab	b5 50		lda $50,x			lda 	esInt1,x
.1fad	95 51		sta $51,x			sta 	esInt1+1,x
.1faf	b5 58		lda $58,x			lda 	esInt2,x
.1fb1	95 59		sta $59,x			sta 	esInt2+1,x
.1fb3	b5 60		lda $60,x			lda 	esInt3,x
.1fb5	95 61		sta $61,x			sta 	esInt3+1,x
.1fb7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af7					MCharCount:	.fill 	1						; count of converted characters
.1fb8					MLInt32ToString:
.1fb8	aa		tax				tax									; module passes stack in A, base in Y
.1fb9	98		tya				tya
.1fba					MInt32ToString:
.1fba	48		pha				pha 								; save base
.1fbb	85 0c		sta $0c				sta 	tempShort 					; save target base.
.1fbd	a9 00		lda #$00			lda 	#0
.1fbf	8d f7 0a	sta $0af7			sta 	MCharCount 					; clear character count to 0
.1fc2	98		tya				tya
.1fc3	48		pha				pha
.1fc4	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.1fc6	10 10		bpl $1fd8			bpl 	_I32TSUnsigned
.1fc8	48		pha				pha 								; save base on stack.
.1fc9	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1fcb	10 08		bpl $1fd5			bpl 	_I32TSNoFlip
.1fcd	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1fcf	20 0b 20	jsr $200b			jsr 	MI32WriteCharacter
.1fd2	20 1e 20	jsr $201e			jsr 	MInt32Negate 				; negate the value.
.1fd5					_I32TSNoFlip:
.1fd5	68		pla				pla 								; get the base back
.1fd6	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1fd8					_I32TSUnsigned:
.1fd8	20 e6 1f	jsr $1fe6			jsr 	MI32DivideWrite 			; recursive code to output string.
.1fdb	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1fdd	ad f7 0a	lda $0af7			lda 	MCharCount
.1fe0	91 04		sta ($04),y			sta 	(temp0),y
.1fe2	68		pla				pla
.1fe3	a8		tay				tay
.1fe4	68		pla				pla
.1fe5	60		rts				rts
.1fe6					MI32DivideWrite:
.1fe6	48		pha				pha 								; save the divisor/base
.1fe7	e8		inx				inx 								; write in the dividing position.
.1fe8	20 73 20	jsr $2073			jsr 	MInt32Set8Bit
.1feb	ca		dex				dex
.1fec	20 6a 1e	jsr $1e6a			jsr 	MInt32UDivide 				; divide number by base.
.1fef	68		pla				pla 								; get the base into Y
.1ff0	a8		tay				tay
.1ff1	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1ff3	48		pha				pha
.1ff4	20 8b 20	jsr $208b			jsr 	MInt32Zero 					; is the result zero ?
.1ff7	f0 04		beq $1ffd			beq 	_I32NoRecurse 				; if so, don't recurse.
.1ff9	98		tya				tya 								; put base into A
.1ffa	20 e6 1f	jsr $1fe6			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1ffd					_I32NoRecurse:
.1ffd	68		pla				pla 								; get the remainder back
.1ffe	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.2000	90 02		bcc $2004			bcc 	_I32NotHex
.2002	69 06		adc #$06			adc 	#7-1
.2004					_I32NotHex:
.2004	18		clc				clc 								; make it ASCII
.2005	69 30		adc #$30			adc 	#48
.2007	20 0b 20	jsr $200b			jsr 	MI32WriteCharacter 			; write the character out
.200a	60		rts				rts 								; and exit.
.200b					MI32WriteCharacter:
.200b	ee f7 0a	inc $0af7			inc 	MCharCount 					; bump count (space for leading count)
.200e	ac f7 0a	ldy $0af7			ldy 	MCharCount 					; get position
.2011	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.2013	c8		iny				iny
.2014	a9 00		lda #$00			lda 	#0
.2016	91 04		sta ($04),y			sta 	(temp0),y
.2018	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af8					MSeed32:	.fill 	4							; random number seed.
.2019					MInt32Absolute:
.2019	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.201b	30 01		bmi $201e			bmi 	MInt32Negate
.201d	60		rts				rts
.201e					MInt32Negate:
.201e	38		sec				sec
.201f	a9 00		lda #$00			lda 	#0
.2021	f5 48		sbc $48,x			sbc 	esInt0,x
.2023	95 48		sta $48,x			sta 	esInt0,x
.2025	a9 00		lda #$00			lda 	#0
.2027	f5 50		sbc $50,x			sbc 	esInt1,x
.2029	95 50		sta $50,x			sta 	esInt1,x
.202b	a9 00		lda #$00			lda 	#0
.202d	f5 58		sbc $58,x			sbc 	esInt2,x
.202f	95 58		sta $58,x			sta 	esInt2,x
.2031	a9 00		lda #$00			lda 	#0
.2033	f5 60		sbc $60,x			sbc 	esInt3,x
.2035	95 60		sta $60,x			sta 	esInt3,x
.2037	60		rts				rts
.2038					MInt32Not:
.2038	b5 48		lda $48,x			lda 	esInt0,x
.203a	49 ff		eor #$ff			eor 	#$FF
.203c	95 48		sta $48,x			sta 	esInt0,x
.203e	b5 50		lda $50,x			lda 	esInt1,x
.2040	49 ff		eor #$ff			eor 	#$FF
.2042	95 50		sta $50,x			sta 	esInt1,x
.2044	b5 58		lda $58,x			lda 	esInt2,x
.2046	49 ff		eor #$ff			eor 	#$FF
.2048	95 58		sta $58,x			sta 	esInt2,x
.204a	b5 60		lda $60,x			lda 	esInt3,x
.204c	49 ff		eor #$ff			eor 	#$FF
.204e	95 60		sta $60,x			sta 	esInt3,x
.2050	60		rts				rts
.2051					MInt32Sign:
.2051	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2053	30 0b		bmi $2060			bmi 	MInt32True 					; if set return -1 (true)
.2055	20 8b 20	jsr $208b			jsr 	MInt32Zero 					; is it zero ?
.2058	f0 0a		beq $2064			beq 	MInt32False 					; if zero return 0 (false)
.205a	20 64 20	jsr $2064			jsr 	MInt32False 					; > 0 return 1
.205d	f6 48		inc $48,x			inc 	esInt0,x
.205f	60		rts				rts
.2060					MInt32True:
.2060	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2062	d0 02		bne $2066			bne 	MInt32WriteAll
.2064					MInt32False:
.2064	a9 00		lda #$00			lda 	#0
.2066					MInt32WriteAll:
.2066	95 48		sta $48,x			sta 	esInt0,x
.2068					MInt32Write123:
.2068	95 50		sta $50,x			sta 	esInt1,x
.206a	95 58		sta $58,x			sta 	esInt2,x
.206c	95 60		sta $60,x			sta 	esInt3,x
.206e	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2070	95 40		sta $40,x			sta 	esType,x
.2072	60		rts				rts
.2073					MInt32Set8Bit:
.2073	95 48		sta $48,x			sta 	esInt0,x
.2075	a9 00		lda #$00			lda 	#0
.2077	f0 ef		beq $2068			beq		MInt32Write123
.2079					MInt32ShiftLeft:
.2079	16 48		asl $48,x			asl 	esInt0,x
.207b	36 50		rol $50,x			rol	 	esInt1,x
.207d	36 58		rol $58,x			rol	 	esInt2,x
.207f	36 60		rol $60,x			rol	 	esInt3,x
.2081	60		rts				rts
.2082					MInt32ShiftRight:
.2082	56 60		lsr $60,x			lsr 	esInt3,x
.2084	76 58		ror $58,x			ror 	esInt2,x
.2086	76 50		ror $50,x			ror 	esInt1,x
.2088	76 48		ror $48,x			ror 	esInt0,x
.208a	60		rts				rts
.208b					MInt32Zero:
.208b	b5 48		lda $48,x			lda 	esInt0,x
.208d	15 50		ora $50,x			ora 	esInt1,x
.208f	15 58		ora $58,x			ora 	esInt2,x
.2091	15 60		ora $60,x			ora 	esInt3,x
.2093	60		rts				rts
.2094					MInt32Random:
.2094	98		tya				tya
.2095	48		pha				pha
.2096	a0 07		ldy #$07			ldy 	#7
.2098	ad f8 0a	lda $0af8			lda 	MSeed32+0
.209b	d0 03		bne $20a0			bne 	_Random1
.209d	a8		tay				tay
.209e	a9 aa		lda #$aa			lda		#$AA
.20a0					_Random1:
.20a0	0a		asl a				asl 	a
.20a1	2e f9 0a	rol $0af9			rol 	MSeed32+1
.20a4	2e fa 0a	rol $0afa			rol 	MSeed32+2
.20a7	2e fb 0a	rol $0afb			rol 	MSeed32+3
.20aa	90 02		bcc $20ae			bcc 	_Random2
.20ac	49 c5		eor #$c5			eor 	#$C5
.20ae					_Random2:
.20ae	88		dey				dey
.20af	d0 ef		bne $20a0			bne 	_Random1
.20b1	8d f8 0a	sta $0af8			sta 	MSeed32+0
.20b4	95 48		sta $48,x			sta 	esInt0,x
.20b6	ad f9 0a	lda $0af9			lda 	MSeed32+1
.20b9	95 50		sta $50,x			sta 	esInt1,x
.20bb	ad fa 0a	lda $0afa			lda 	MSeed32+2
.20be	95 58		sta $58,x			sta 	esInt2,x
.20c0	ad fb 0a	lda $0afb			lda 	MSeed32+3
.20c3	95 60		sta $60,x			sta 	esInt3,x
.20c5	68		pla				pla
.20c6	a8		tay				tay
.20c7	a9 00		lda #$00			lda 	#0
.20c9	95 40		sta $40,x			sta 	esType,x
.20cb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.20cc					CheckToken:
.20cc	d1 02		cmp ($02),y			cmp 	(codePtr),y
.20ce	d0 02		bne $20d2			bne 	_CTError
.20d0	c8		iny				iny
.20d1	60		rts				rts
.20d2					_CTError:
.20d2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.20d4	20 9e 21	jsr $219e		jsr	errorHandler
.20d7					CheckRightParen:
.20d7	b1 02		lda ($02),y			lda 	(codePtr),y
.20d9	c8		iny				iny
.20da	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.20dc	d0 01		bne $20df			bne 	_CRPError
.20de	60		rts				rts
.20df					_CRPError:
.20df	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.20e1	20 9e 21	jsr $219e		jsr	errorHandler
.20e4					CheckComma:
.20e4	b1 02		lda ($02),y			lda 	(codePtr),y
.20e6	c8		iny				iny
.20e7	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.20e9	d0 01		bne $20ec			bne 	_CCError
.20eb	60		rts				rts
.20ec					_CCError:
.20ec	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.20ee	20 9e 21	jsr $219e		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.29ae					ScanForward:
.29ae	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.29b0	86 07		stx $07				stx 	temp1+1
.29b2	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.29b4	85 08		sta $08				sta 	temp2
.29b6	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.29b8	c8		iny				iny
.29b9	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.29bb	d0 08		bne $29c5			bne 	_SFNoCheck 					; if so, check token against entered values.
.29bd	c5 06		cmp $06				cmp 	temp1
.29bf	f0 24		beq $29e5			beq 	_SFExit
.29c1	c5 07		cmp $07				cmp 	temp1+1
.29c3	f0 20		beq $29e5			beq 	_SFExit
.29c5					_SFNoCheck:
.29c5	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.29c7	90 ed		bcc $29b6			bcc 	_SFLoop
.29c9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.29cb	90 19		bcc $29e6			bcc 	_SFSpecials
.29cd	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.29cf	90 e5		bcc $29b6			bcc 	_SFLoop
.29d1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.29d3	b0 e1		bcs $29b6			bcs 	_SFLoop
.29d5	aa		tax				tax  								; token in X, and look up the adjuster.
.29d6	bd 4d 1a	lda $1a4d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.29d9	38		sec				sec 								; convert to an offset
.29da	e9 81		sbc #$81			sbc 	#$81
.29dc	18		clc				clc 								; add to depth
.29dd	65 08		adc $08				adc 	temp2
.29df	85 08		sta $08				sta 	temp2
.29e1	10 d3		bpl $29b6			bpl 	_SFLoop 					; +ve okay to continue
.29e3	30 2a		bmi $2a0f			bmi 	_SFError 					; if gone -ve then we have a nesting error
.29e5	60		rts		_SFExit:rts
.29e6					_SFSpecials:
.29e6	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.29e8	f0 14		beq $29fe			beq 	_SFNextLine
.29ea	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.29ec	f0 26		beq $2a14			beq 	_SFFloatSkip
.29ee	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.29f0	f0 04		beq $29f6			beq 	_SFSkipString
.29f2	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.29f3	4c b6 29	jmp $29b6			jmp 	_SFLoop 					; token.
.29f6					_SFSkipString:
.29f6	98		tya				tya
.29f7	38		sec				sec
.29f8	71 02		adc ($02),y			adc 	(codePtr),y
.29fa	a8		tay				tay
.29fb	4c b6 29	jmp $29b6			jmp 	_SFLoop
.29fe					_SFNextLine:
.29fe	a0 00		ldy #$00			ldy 	#0 							; get offset
.2a00	b1 02		lda ($02),y			lda 	(codePtr),y
.2a02	18		clc				clc 								; add to code pointer.
.2a03	65 02		adc $02				adc 	codePtr
.2a05	85 02		sta $02				sta 	codePtr
.2a07	90 02		bcc $2a0b			bcc		_SFNLNoCarry
.2a09	e6 03		inc $03				inc 	codePtr+1
.2a0b					_SFNLNoCarry:
.2a0b	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2a0d	d0 a7		bne $29b6			bne		_SFLoop 					; no go round again
.2a0f					_SFError:
.2a0f	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2a11	20 9e 21	jsr $219e		jsr	errorHandler
.2a14					_SFFloatSkip:
.2a14	4c 18 14	jmp $1418			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.20f1					RSReset:
.20f1	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.20f3	85 78		sta $78				sta 	rsPointer
.20f5	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.20f7	85 79		sta $79				sta 	1+(rsPointer)
.20f9	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.20fb	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.20fe	60		rts				rts
.20ff					RSClaim:
.20ff	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.2101	48		pha				pha 								; save marker on stack.
.2102	8a		txa				txa 								; get bytes required.
.2103	38		sec				sec
.2104	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2106	65 78		adc $78				adc 	rsPointer
.2108	85 78		sta $78				sta 	rsPointer
.210a	a5 79		lda $79				lda 	rsPointer+1
.210c	69 ff		adc #$ff			adc 	#$FF
.210e	85 79		sta $79				sta 	rsPointer+1
.2110	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2112	90 08		bcc $211c			bcc 	_RSCOverflow
.2114	68		pla				pla 								; get marker back
.2115	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2117	91 78		sta ($78),y			sta 	(rsPointer),y
.2119	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.211b	60		rts				rts
.211c					_RSCOverflow:
.211c	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.211e	20 9e 21	jsr $219e		jsr	errorHandler
.2121					RSFree:
.2121	18		clc				clc
.2122	65 78		adc $78				adc 	rsPointer
.2124	85 78		sta $78				sta 	rsPointer
.2126	90 02		bcc $212a			bcc 	_RSFExit
.2128	e6 79		inc $79				inc 	rsPointer+1
.212a					_RSFExit:
.212a	60		rts				rts
.212b					RSSavePosition:
.212b	84 0c		sty $0c				sty 	tempShort 					; save Y position
.212d	a8		tay				tay 								; this is where we write it.
.212e	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.2130	91 78		sta ($78),y			sta 	(rsPointer),y
.2132	c8		iny				iny
.2133	a5 03		lda $03				lda 	codePtr+1
.2135	91 78		sta ($78),y			sta 	(rsPointer),y
.2137	c8		iny				iny
.2138	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.213a	91 78		sta ($78),y			sta 	(rsPointer),y
.213c	a8		tay				tay 								; fix Y back again to original value
.213d	60		rts				rts
.213e					RSLoadPosition:
.213e	a8		tay				tay
.213f	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2141	85 02		sta $02				sta 	codePtr
.2143	c8		iny				iny
.2144	b1 78		lda ($78),y			lda 	(rsPointer),y
.2146	85 03		sta $03				sta 	codePtr+1
.2148	c8		iny				iny
.2149	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.214b	a8		tay				tay 								; to Y
.214c	60		rts				rts

;******  Return to file: main/main.asm

.214d					mainHandler:
.214d	7c 50 21	jmp ($2150,x)			jmp 	(mainVectors,x)
.2150					mainVectors:
>2150	80 1a					.word LinkEvaluate         ; index 0
>2152	86 1a					.word LinkEvaluateInteger  ; index 2
>2154	8c 1a					.word LinkEvaluateSmallInt ; index 4
>2156	b8 1f					.word MLInt32ToString      ; index 6
>2158	fa 12					.word PrintString          ; index 8

;******  Return to file: basic.asm

.215a					section_end_main:
.215a					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.215a					assemblerHandler:
.215a	7c 5d 21	jmp ($215d,x)			jmp 	(assemblerVectors,x)
.215d					assemblerVectors:

;******  Return to file: basic.asm

.215d					section_end_assembler:
.215d					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.215d					IOInitialise:
.215d	a9 0f		lda #$0f			lda 	#15
.215f	20 73 21	jsr $2173			jsr 	IOPrintChar
.2162	60		rts				rts
.2163					IONewLine:
.2163	48		pha				pha
.2164	a9 0d		lda #$0d			lda 	#13
.2166	20 73 21	jsr $2173			jsr 	IOPrintChar
.2169	68		pla				pla
.216a	60		rts				rts
.216b					IOTab:
.216b	48		pha				pha
.216c	a9 20		lda #$20			lda 	#32
.216e	20 73 21	jsr $2173			jsr 	IOPrintChar
.2171	68		pla				pla
.2172	60		rts				rts
.2173					IOPrintChar:
.2173	aa		tax				tax
.2174	5a		phy				phy
.2175	8a		txa				txa
.2176	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.2179	7a		ply				ply
.217a	60		rts				rts
.217b					IOInkey:
.217b	98		tya				tya
.217c	48		pha				pha
.217d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2180	85 0c		sta $0c				sta 	tempShort
.2182	68		pla				pla
.2183	a8		tay				tay
.2184	a5 0c		lda $0c				lda 	tempShort
.2186	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.2187					IOReadTimer:
.2187	20 de ff	jsr $ffde			jsr 	$FFDE
.218a	48		pha				pha
.218b	8a		txa				txa
.218c	a8		tay				tay
.218d	68		pla				pla
.218e	60		rts				rts

;******  Return to file: device/device.asm

.218f					deviceHandler:
.218f	7c 92 21	jmp ($2192,x)			jmp 	(deviceVectors,x)
.2192					deviceVectors:
>2192	63 21					.word IONewLine            ; index 0
>2194	5d 21					.word IOInitialise         ; index 2
>2196	7b 21					.word IOInkey              ; index 4
>2198	73 21					.word IOPrintChar          ; index 6
>219a	6b 21					.word IOTab                ; index 8
>219c	87 21					.word IOReadTimer          ; index 10

;******  Return to file: basic.asm

.219e					section_end_device:
.219e					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.219e					ErrorHandler:
.219e	a9 07		lda #$07			lda 	#(ErrorTextList) & $FF
.21a0	85 04		sta $04				sta 	temp0
.21a2	a9 22		lda #$22			lda 	#(ErrorTextList) >> 8
.21a4	85 05		sta $05				sta 	1+(temp0)
.21a6	ca		dex		_EHFind:dex
.21a7	f0 10		beq $21b9			beq 	_EHFound
.21a9	a0 00		ldy #$00			ldy 	#0 							; goto next text message
.21ab	38		sec				sec
.21ac	a5 04		lda $04				lda 	temp0
.21ae	71 04		adc ($04),y			adc 	(temp0),y
.21b0	85 04		sta $04				sta 	temp0
.21b2	90 f2		bcc $21a6			bcc 	_EHFind
.21b4	e6 05		inc $05				inc 	temp0+1
.21b6	4c a6 21	jmp $21a6			jmp 	_EHFind
.21b9					_EHFound:
.21b9	a2 08		ldx #$08		ldx	#8
.21bb	20 4d 21	jsr $214d		jsr	mainHandler
.21be	a0 00		ldy #$00			ldy 	#0 							; in a line ?
.21c0	b1 02		lda ($02),y			lda 	(codePtr),y
.21c2	f0 0d		beq $21d1			beq 	_EHNoLine
.21c4	a9 fd		lda #$fd			lda 	#(EHAtMsg) & $FF
.21c6	85 04		sta $04				sta 	temp0
.21c8	a9 21		lda #$21			lda 	#(EHAtMsg) >> 8
.21ca	85 05		sta $05				sta 	1+(temp0)
.21cc	a2 08		ldx #$08		ldx	#8
.21ce	20 4d 21	jsr $214d		jsr	mainHandler
.21d1					_EHNoLine:
.21d1	a0 01		ldy #$01			ldy 	#1
.21d3	a2 00		ldx #$00			ldx 	#0
.21d5	b1 02		lda ($02),y			lda 	(codePtr),y
.21d7	95 48		sta $48,x			sta 	esInt0,x
.21d9	c8		iny				iny
.21da	b1 02		lda ($02),y			lda 	(codePtr),y
.21dc	95 50		sta $50,x			sta 	esInt1,x
.21de	a9 00		lda #$00			lda 	#0
.21e0	95 58		sta $58,x			sta 	esInt2,x
.21e2	95 60		sta $60,x			sta 	esInt3,x
.21e4	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.21e6	85 04		sta $04				sta 	temp0
.21e8	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.21ea	85 05		sta $05				sta 	1+(temp0)
.21ec	a0 0a		ldy #$0a			ldy 	#10
.21ee	a9 00		lda #$00			lda 	#0
.21f0	a2 06		ldx #$06		ldx	#6
.21f2	20 4d 21	jsr $214d		jsr	mainHandler
.21f5	a2 08		ldx #$08		ldx	#8
.21f7	20 4d 21	jsr $214d		jsr	mainHandler
.21fa	4c fa 21	jmp $21fa	_EHHalt:jmp 	_EHHalt
.21fd					EHAtMsg:
>21fd	09 20 61 74 20 6c 69 6e				.text 	9," at line "
>2205	65 20

;******  Processing file: error/../generated/errortext.inc

.2207					ErrorTextList:
>2207	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>220f	20 6e 6f 74 20 50 72 65 73 65 6e 74
>221b	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>2223	45 72 72 6f 72
>2228	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>2230	64 69 73 61 62 6c 65 64
>2238	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>2240	6f 6e 20 66 61 69 6c 65 64
>2249	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>2251	42 79 20 5a 65 72 6f
>2258	04 53 74 6f 70				.text 4,"Stop"
>225d	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>2265	73 6d 61 74 63 68
>226b	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>2273	20 56 61 6c 75 65
>2279	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>2281	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>228f	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>2297	20 63 6f 6d 6d 61
>229d	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>22a5	20 72 65 66 65 72 65 6e 63 65
>22af	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>22b7	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>22c5	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>22cd	74 6f 6f 20 6c 6f 6e 67 2e
>22d6	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>22de	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>22eb	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>22f3	69 74 68 6f 75 74 20 52 45 50 45 41 54
>2300	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>2308	74 68 6f 75 74 20 46 4f 52
>2311	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>2319	74 68 6f 75 74 20 57 48 49 4c 45
>2324	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>232c	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>2339	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>2341	54 20 69 6e 64 65 78
>2348	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>2350	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>2360	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>2368	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>2377	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>237f	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>238f	63 65 2e
>2392	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>239a	20 50 72 6f 63 65 64 75 72 65
>23a4	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>23ac	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>23bc	2e
>23bd	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.23be					section_end_error:
.23be					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.23be					ExtensionHandler:
.23be	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.23c0	d0 08		bne $23ca			bne 	_ExtensionUnary
.23c2	b1 02		lda ($02),y			lda 	(codePtr),y
.23c4	c8		iny				iny
.23c5	0a		asl a				asl 	a
.23c6	aa		tax				tax
.23c7	7c c8 23	jmp ($23c8,x)			jmp 	(Group2Vectors-12,X)
.23ca					_ExtensionUnary:
.23ca	48		pha				pha 								; save stack pos in A
.23cb	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token
.23cd	c8		iny				iny
.23ce	0a		asl a				asl 	a
.23cf	aa		tax				tax
.23d0	68		pla				pla
.23d1	7c cc 23	jmp ($23cc,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.23d4					Group2Vectors:
>23d4	e4 23					.word	Command_VPoke            ; $86 vpoke
>23d6	e7 23					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.23d8					Group3Vectors:
>23d8	28 24					.word	Command_VPeek            ; $86 vpeek(
>23da	2b 24					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.23dc					XEvaluateInteger:
.23dc	8a		txa				txa
.23dd	a2 02		ldx #$02		ldx	#2
.23df	20 4d 21	jsr $214d		jsr	mainHandler
.23e2	aa		tax				tax
.23e3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.23e4					Command_VPoke:
.23e4	38		sec				sec 						; one byte , CS
.23e5	b0 01		bcs $23e8			bcs 	CmdVideoWrite
.23e7					Command_VDoke:
.23e7	18		clc				clc 						; two bytes, CC
.23e8					CmdVideoWrite:
.23e8	08		php				php
.23e9	a2 00		ldx #$00			ldx 	#0  				; get address into levels 0,1
.23eb	20 dc 23	jsr $23dc			jsr 	XEvaluateInteger
.23ee	20 e4 20	jsr $20e4			jsr 	CheckComma
.23f1	e8		inx				inx
.23f2	20 dc 23	jsr $23dc			jsr 	XEvaluateInteger
.23f5	ca		dex				dex
.23f6	20 07 24	jsr $2407			jsr 	SetUpTOSVRamAddress
.23f9	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.23fb	8d 23 9f	sta $9f23			sta 	$9F23
.23fe	28		plp				plp 						; if it was Poke then exit
.23ff	b0 05		bcs $2406			bcs 	_CVWExit
.2401	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.2403	8d 23 9f	sta $9f23			sta 	$9F23
.2406					_CVWExit:
.2406	60		rts				rts
.2407					SetUpTOSVRamAddress:
.2407	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2409	29 01		and #$01			and 	#1
.240b	15 60		ora $60,x			ora 	esInt3,x
.240d	d0 14		bne $2423			bne 	CVWValue
.240f	b5 48		lda $48,x			lda 	esInt0,x				; set address up
.2411	8d 20 9f	sta $9f20			sta 	$9F20
.2414	b5 50		lda $50,x			lda 	esInt1,x
.2416	8d 21 9f	sta $9f21			sta	 	$9F21
.2419	b5 58		lda $58,x			lda 	esInt2,x
.241b	29 01		and #$01			and 	#1
.241d	09 10		ora #$10			ora 	#$10 				; step 1.
.241f	8d 22 9f	sta $9f22			sta 	$9F22
.2422	60		rts				rts
.2423					CVWValue:
.2423	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2425	20 9e 21	jsr $219e		jsr	errorHandler
.2428					Command_VPeek:
.2428	38		sec				sec 						; one byte , CS
.2429	b0 01		bcs $242c			bcs 	CmdVideoRead
.242b					Command_VDeek:
.242b	18		clc				clc 						; two bytes, CC
.242c					CmdVideoRead:
>242c	db						.byte 	$DB
.242d	08		php				php 						; save action on stack.
.242e	aa		tax				tax 						; save stack position
.242f	20 dc 23	jsr $23dc			jsr 	XEvaluateInteger 	; address
.2432	20 d7 20	jsr $20d7			jsr 	CheckRightParen 	; closing right bracket.
.2435	20 07 24	jsr $2407			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2438	a9 00		lda #$00			lda 	#0 					; zero the return value
.243a	95 60		sta $60,x			sta 	esInt3,x
.243c	95 58		sta $58,x			sta 	esInt2,x
.243e	95 50		sta $50,x			sta 	esInt1,x
.2440	ad 23 9f	lda $9f23			lda 	$9F23
.2443	95 48		sta $48,x			sta 	esInt0,x
.2445	28		plp				plp
.2446	b0 05		bcs $244d			bcs 	_CVRExit
.2448	ad 23 9f	lda $9f23			lda 	$9F23
.244b	95 50		sta $50,x			sta 	esInt1,x
.244d					_CVRExit:
.244d	8a		txa				txa 						; return X position.
.244e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.244f					section_end_extension:
.244f					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.244f					floatingpointHandler:
.244f	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2451	20 9e 21	jsr $219e		jsr	errorHandler

;******  Return to file: basic.asm

.2454					section_end_floatingpoint:
.2454					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.2454					interactionHandler:
.2454	7c 57 24	jmp ($2457,x)			jmp 	(interactionVectors,x)
.2457					interactionVectors:

;******  Return to file: basic.asm

.2457					section_end_interaction:
.2457					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2457					StringChrs:
.2457	aa		tax				tax 								; set up stack
.2458	a9 02		lda #$02			lda 	#2
.245a	20 11 25	jsr $2511			jsr 	AllocateSoftString
.245d	98		tya				tya
.245e	20 37 25	jsr $2537			jsr 	WriteSoftString
.2461	20 66 24	jsr $2466			jsr 	ReturnSoftString
.2464	8a		txa				txa
.2465	60		rts				rts
.2466					ReturnSoftString:
.2466	a5 7a		lda $7a				lda 	softMemAlloc
.2468	95 48		sta $48,x			sta 	esInt0,x
.246a	a5 7b		lda $7b				lda 	softMemAlloc+1
.246c	95 50		sta $50,x			sta 	esInt1,x
.246e	a9 00		lda #$00			lda 	#0
.2470	95 58		sta $58,x			sta 	esInt2,x
.2472	95 60		sta $60,x			sta 	esInt3,x
.2474	a9 40		lda #$40			lda 	#$40
.2476	95 40		sta $40,x			sta 	esType,x
.2478	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2479					STRCompare:
.2479	48		pha				pha 								; save A
.247a	aa		tax				tax 								; put stack pos in X
.247b	98		tya				tya
.247c	48		pha				pha
.247d	20 b1 24	jsr $24b1			jsr 	CopyStringPair
.2480	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2482	b1 04		lda ($04),y			lda 	(temp0),y
.2484	d1 06		cmp ($06),y			cmp 	(temp1),y
.2486	90 02		bcc $248a			bcc 	_SCNotSmaller
.2488	b1 06		lda ($06),y			lda 	(temp1),y
.248a					_SCNotSmaller:
.248a	aa		tax				tax 								; put that in X. We compare this many chars first.
.248b					_SCCompareLoop:
.248b	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.248d	f0 0c		beq $249b			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.248f	ca		dex				dex 								; decrement chars to compare.
.2490	c8		iny				iny 								; move to next character
.2491	38		sec				sec 								; calculate s1[y]-s2[y]
.2492	b1 04		lda ($04),y			lda 	(temp0),y
.2494	f1 06		sbc ($06),y			sbc 	(temp1),y
.2496	d0 0a		bne $24a2			bne 	_SCReturnResult 			; if different return sign of A
.2498	4c 8b 24	jmp $248b			jmp 	_SCCompareLoop
.249b					_SCSameToEndShortest
.249b	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.249d	38		sec				sec
.249e	b1 04		lda ($04),y			lda 	(temp0),y
.24a0	f1 06		sbc ($06),y			sbc 	(temp1),y
.24a2					_SCReturnResult:
.24a2	08		php				php 								; set return to zero preserving PSW.
.24a3	a2 00		ldx #$00			ldx 	#0
.24a5	28		plp				plp
.24a6	f0 05		beq $24ad			beq 	_SCExit 					; two values equal, then exit
.24a8	ca		dex				dex 								; X = $FF
.24a9	90 02		bcc $24ad			bcc 	_SCExit 					; if 1st < 2nd then -1
.24ab	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.24ad					_SCExit:
.24ad	68		pla				pla
.24ae	a8		tay				tay
.24af	68		pla				pla
.24b0	60		rts				rts
.24b1					CopyStringPair:
.24b1	b5 49		lda $49,x			lda 	esInt0+1,x
.24b3	85 06		sta $06				sta 	temp1
.24b5	b5 51		lda $51,x			lda 	esInt1+1,x
.24b7	85 07		sta $07				sta 	temp1+1
.24b9					CopyStringTop:
.24b9	b5 48		lda $48,x			lda 	esInt0,x
.24bb	85 04		sta $04				sta 	temp0
.24bd	b5 50		lda $50,x			lda 	esInt1,x
.24bf	85 05		sta $05				sta 	temp0+1
.24c1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.24c2					StringConcat:
.24c2	aa		tax				tax									; stack pos in X
.24c3	98		tya				tya
.24c4	48		pha				pha
.24c5	20 b1 24	jsr $24b1			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.24c8	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.24c9	a0 00		ldy #$00			ldy 	#0
.24cb	b1 04		lda ($04),y			lda 	(temp0),y
.24cd	71 06		adc ($06),y			adc 	(temp1),y
.24cf	b0 1c		bcs $24ed			bcs 	_SCError 					; just too many characters here.
.24d1	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.24d3	b0 18		bcs $24ed			bcs 	_SCError
.24d5	20 11 25	jsr $2511			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.24d8	20 08 25	jsr $2508			jsr 	CopySoftToStack 			; copy that to the stack.
.24db	20 f2 24	jsr $24f2			jsr 	SCCopyTemp0 				; copy temp0
.24de	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.24e0	85 04		sta $04				sta 	temp0
.24e2	a5 07		lda $07				lda 	temp1+1
.24e4	85 05		sta $05				sta 	temp0+1
.24e6	20 f2 24	jsr $24f2			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.24e9	68		pla				pla
.24ea	a8		tay				tay
.24eb	8a		txa				txa 								; and A
.24ec	60		rts				rts
.24ed					_SCError:
.24ed	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.24ef	20 9e 21	jsr $219e		jsr	errorHandler
.24f2					SCCopyTemp0:
.24f2	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.24f4	b1 04		lda ($04),y			lda 	(temp0),y
.24f6	85 08		sta $08				sta 	temp2
.24f8					_SCCopyLoop:
.24f8	a5 08		lda $08				lda 	temp2 						; done the lot
.24fa	f0 0b		beq $2507			beq 	_SCCopyExit
.24fc	c6 08		dec $08				dec 	temp2
.24fe	c8		iny				iny 								; get next char
.24ff	b1 04		lda ($04),y			lda 	(temp0),y
.2501	20 37 25	jsr $2537			jsr 	WriteSoftString 			; write to soft string.
.2504	4c f8 24	jmp $24f8			jmp 	_SCCopyLoop
.2507					_SCCopyExit:
.2507	60		rts				rts
.2508					CopySoftToStack:
.2508	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.250a	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.250c	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.250e	95 50		sta $50,x			sta 	esInt1,x
.2510	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2511					AllocateSoftString:
.2511	85 0c		sta $0c				sta 	tempShort 					; save count
.2513	98		tya				tya
.2514	48		pha				pha
.2515	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2517	d0 09		bne $2522			bne 	_ASSDone
.2519	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.251b	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.251d	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.251f	88		dey				dey
.2520	84 7b		sty $7b				sty 	softMemAlloc+1
.2522					_ASSDone:
.2522	38		sec				sec 								; allocate downwards enough memory
.2523	a5 7a		lda $7a				lda 	softMemAlloc
.2525	e5 0c		sbc $0c				sbc 	tempShort
.2527	85 7a		sta $7a				sta 	softMemAlloc
.2529	a5 7b		lda $7b				lda 	softMemAlloc+1
.252b	e9 00		sbc #$00			sbc 	#0
.252d	85 7b		sta $7b				sta 	softMemAlloc+1
.252f	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2531	a8		tay				tay
.2532	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2534	68		pla				pla
.2535	a8		tay				tay
.2536	60		rts				rts
.2537					WriteSoftString:
.2537	84 0c		sty $0c				sty 	tempShort 					; save Y
.2539	48		pha				pha
.253a	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.253c	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.253e	18		clc				clc
.253f	69 01		adc #$01			adc 	#1
.2541	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2543	a8		tay				tay 								; pointer in Y
.2544	68		pla				pla 								; get char and write.
.2545	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2547	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.2549	60		rts				rts
.254a					StrClone:
.254a	aa		tax				tax 								; set up stack.
.254b	98		tya				tya
.254c	48		pha				pha
.254d	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.254f	b1 04		lda ($04),y			lda 	(temp0),y
.2551	18		clc				clc
.2552	69 01		adc #$01			adc 	#1
.2554	20 11 25	jsr $2511			jsr 	AllocateSoftString 			; allocate soft memory
.2557	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2559	95 48		sta $48,x			sta 	esInt0,x
.255b	a5 7b		lda $7b				lda 	softMemAlloc+1
.255d	95 50		sta $50,x			sta 	esInt1,x
.255f	a9 00		lda #$00			lda 	#0
.2561	95 58		sta $58,x			sta 	esInt2,x
.2563	95 60		sta $60,x			sta 	esInt3,x
.2565	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2567	95 40		sta $40,x			sta 	esType,x
.2569	20 f2 24	jsr $24f2			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.256c	68		pla				pla
.256d	a8		tay				tay
.256e	8a		txa				txa
.256f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2570					StringSubstring:
.2570	48		pha				pha
.2571	aa		tax				tax 								; access stack.
.2572	98		tya				tya
.2573	48		pha				pha
.2574	20 b9 24	jsr $24b9			jsr 	CopyStringTop 				; point temp0 to the string.
.2577	a0 00		ldy #$00			ldy 	#0 							; get length.
.2579	b1 04		lda ($04),y			lda 	(temp0),Y
.257b	85 06		sta $06				sta 	temp1
.257d	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.257f	c5 06		cmp $06				cmp 	temp1 						;
.2581	f0 02		beq $2585			beq 	_SSBOkay
.2583	b0 2a		bcs $25af			bcs 	_SSBReturnNull
.2585					_SSBOkay:
.2585	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2587	18		clc				clc
.2588	69 01		adc #$01			adc 	#1
.258a	38		sec				sec
.258b	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.258d	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.258f	90 02		bcc $2593			bcc		_SSBTrunc
.2591	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2593					_SSBTrunc:
.2593	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2595	18		clc				clc
.2596	69 01		adc #$01			adc 	#1 							; add 1
.2598	20 11 25	jsr $2511			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.259b	20 08 25	jsr $2508			jsr 	CopySoftToStack 			; copy that to the stack.
.259e	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.25a0					_SSBCopyLoop:
.25a0	a5 07		lda $07				lda 	temp1+1 					; done them all
.25a2	f0 0e		beq $25b2			beq 	_SSBExit
.25a4	c6 07		dec $07				dec 	temp1+1
.25a6	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.25a8	20 37 25	jsr $2537			jsr 	WriteSoftString
.25ab	c8		iny				iny
.25ac	4c a0 25	jmp $25a0			jmp 	_SSBCopyLoop
.25af					_SSBReturnNull:
.25af	20 b6 25	jsr $25b6			jsr 	ReturnNull
.25b2					_SSBExit:
.25b2	68		pla				pla
.25b3	a8		tay				tay
.25b4	68		pla				pla
.25b5	60		rts				rts
.25b6					ReturnNull:
.25b6	a9 00		lda #$00			lda 	#0 							; clear null string
.25b8	8d cc 0a	sta $0acc			sta 	NullString
.25bb	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.25bd	95 48		sta $48,x			sta 	esInt0,x
.25bf	a9 0a		lda #$0a			lda 	#NullString >> 8
.25c1	95 50		sta $50,x			sta 	esInt1,x
.25c3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0afc					srcStrLen:
>0afc							.fill 	1
.25c4					StringWrite:
.25c4	aa		tax				tax
.25c5	48		pha				pha
.25c6	98		tya				tya
.25c7	48		pha				pha
.25c8	20 ef 25	jsr $25ef			jsr 	CheckOverwriteCurrent
.25cb	b0 0d		bcs $25da			bcs		_SWCopyCurrent
.25cd	20 2d 26	jsr $262d			jsr 	RequiresConcretion
.25d0	90 0e		bcc $25e0			bcc 	_SWWriteReference
.25d2	20 90 26	jsr $2690			jsr 	CheckSpecialConcretion
.25d5	b0 09		bcs $25e0			bcs 	_SWWriteReference
.25d7	20 41 26	jsr $2641			jsr 	AllocateHardMemory
.25da					_SWCopyCurrent:
.25da	20 74 26	jsr $2674			jsr 	CopyStringToHardMemory
.25dd	4c eb 25	jmp $25eb			jmp 	_SWExit
.25e0					_SWWriteReference
.25e0	a0 00		ldy #$00			ldy 	#0
.25e2	a5 04		lda $04				lda 	temp0
.25e4	91 06		sta ($06),y			sta 	(temp1),y
.25e6	c8		iny				iny
.25e7	a5 05		lda $05				lda 	temp0+1
.25e9	91 06		sta ($06),y			sta 	(temp1),y
.25eb					_SWExit:
.25eb	68		pla				pla
.25ec	a8		tay				tay
.25ed	68		pla				pla
.25ee	60		rts				rts
.25ef					CheckOverwriteCurrent:
.25ef	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.25f1	b5 51		lda $51,x			lda 	esInt1+1,x
.25f3	85 05		sta $05				sta 	temp0+1
.25f5	b5 49		lda $49,x			lda 	esInt0+1,x
.25f7	85 04		sta $04				sta 	temp0
.25f9	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.25fb	8d fc 0a	sta $0afc			sta 	srcStrLen
.25fe	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2600	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2602	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2604	85 07		sta $07				sta 	temp1+1
.2606	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2608	b1 06		lda ($06),y			lda 	(temp1),y
.260a	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.260c	90 1b		bcc $2629			bcc 	_COCFail 				; in hard memory.
.260e	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2610	b1 06		lda ($06),y			lda 	(temp1),y
.2612	e9 01		sbc #$01			sbc 	#1
.2614	85 08		sta $08				sta 	temp2
.2616	c8		iny				iny
.2617	b1 06		lda ($06),y			lda 	(temp1),y
.2619	e9 00		sbc #$00			sbc 	#0
.261b	85 09		sta $09				sta 	temp2+1
.261d	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.261f	b1 08		lda ($08),y			lda 	(temp2),y
.2621	38		sec				sec  							; maximum character capacity.
.2622	e9 02		sbc #$02			sbc 	#2
.2624	cd fc 0a	cmp $0afc			cmp 	srcStrLen 				; if >= the required length
.2627	b0 02		bcs $262b			bcs 	_COCCanReuse
.2629					_COCFail:
.2629	18		clc				clc
.262a	60		rts				rts
.262b					_COCCanReuse:
.262b	38		sec				sec
.262c	60		rts				rts
.262d					RequiresConcretion:
.262d	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.262f	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.2631	b0 0a		bcs $263d			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2633	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2635	f0 08		beq $263f			beq 	_RCFail 				; if not, this cannot be soft memory.
.2637	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2639	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.263b	90 02		bcc $263f			bcc 	_RCFail 				; so concreting
.263d					_RCSucceed:
.263d	38		sec				sec
.263e	60		rts				rts
.263f					_RCFail:
.263f	18		clc				clc
.2640	60		rts				rts
.2641					AllocateHardMemory:
.2641	98		tya				tya
.2642	48		pha				pha
.2643	ad fc 0a	lda $0afc			lda 	srcStrLen 				; characters in string
.2646	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2648	b0 04		bcs $264e			bcs 	_AHMSetMax 				; max out that amount.
.264a	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.264c	90 02		bcc $2650			bcc 	_AHMIsOkay
.264e					_AHMSetMax:
.264e	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2650					_AHMIsOkay:
.2650	48		pha				pha
.2651	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2653	38		sec				sec  							; and copy result to TOS as target address.
.2654	65 0d		adc $0d				adc 	highMemory
.2656	85 0d		sta $0d				sta 	highMemory
.2658	a5 0e		lda $0e				lda 	highMemory+1
.265a	69 ff		adc #$ff			adc 	#$FF
.265c	85 0e		sta $0e				sta 	highMemory+1
.265e	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2660	68		pla				pla 							; get the total size of the storage block
.2661	91 0d		sta ($0d),y			sta 	(highMemory),y
.2663	18		clc				clc
.2664	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2666	69 01		adc #$01			adc 	#1
.2668	91 06		sta ($06),y			sta 	(temp1),y
.266a	a5 0e		lda $0e				lda 	highMemory+1
.266c	69 00		adc #$00			adc 	#0
.266e	c8		iny				iny
.266f	91 06		sta ($06),y			sta 	(temp1),y
.2671	68		pla				pla
.2672	a8		tay				tay
.2673	60		rts				rts
.2674					CopyStringToHardMemory:
.2674	98		tya				tya
.2675	48		pha				pha
.2676	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2678	b1 06		lda ($06),y			lda 	(temp1),y
.267a	85 08		sta $08				sta 	temp2
.267c	c8		iny				iny
.267d	b1 06		lda ($06),y			lda 	(temp1),y
.267f	85 09		sta $09				sta 	temp2+1
.2681	ac fc 0a	ldy $0afc			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2684					_CSTHMLoop:
.2684	b1 04		lda ($04),y			lda 	(temp0),y
.2686	91 08		sta ($08),y			sta 	(temp2),y
.2688	88		dey				dey
.2689	c0 ff		cpy #$ff			cpy 	#$FF
.268b	d0 f7		bne $2684			bne 	_CSTHMLoop
.268d	68		pla				pla
.268e	a8		tay				tay
.268f	60		rts				rts
.2690					CheckSpecialConcretion:
.2690	ad fc 0a	lda $0afc			lda 	srcStrLen 				; check string is null.
.2693	f0 02		beq $2697			beq 	_CSCNullString
.2695	18		clc				clc
.2696	60		rts				rts
.2697					_CSCNullString:
.2697	a9 00		lda #$00			lda 	#0
.2699	8d cc 0a	sta $0acc			sta 	NullString
.269c	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.269e	85 04		sta $04				sta 	temp0
.26a0	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.26a2	85 05		sta $05				sta 	1+(temp0)
.26a4	38		sec				sec
.26a5	60		rts				rts

;******  Return to file: string/string.asm

.26a6					stringHandler:
.26a6	7c a9 26	jmp ($26a9,x)			jmp 	(stringVectors,x)
.26a9					stringVectors:
>26a9	57 24					.word StringChrs           ; index 0
>26ab	4a 25					.word StrClone             ; index 2
>26ad	c2 24					.word StringConcat         ; index 4
>26af	79 24					.word STRCompare           ; index 6
>26b1	70 25					.word StringSubstring      ; index 8
>26b3	c4 25					.word StringWrite          ; index 10

;******  Return to file: basic.asm

.26b5					section_end_string:
.26b5					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.26b5					tokeniserHandler:
.26b5	7c b8 26	jmp ($26b8,x)			jmp 	(tokeniserVectors,x)
.26b8					tokeniserVectors:

;******  Return to file: basic.asm

.26b8					section_end_tokeniser:
.26b8					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afd					varHash:
>0afd							.fill	1
.0afe					varType:
>0afe							.fill 	1
.0aff					varEnd:
>0aff							.fill 	1
.007c					hashList:
>007c							.fill 	2
.26b8					AccessVariable:
.26b8	aa		tax				tax 								; stack in X
.26b9	c8		iny				iny
.26ba	b1 02		lda ($02),y			lda 	(codePtr),y
.26bc	88		dey				dey
.26bd	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.26bf	d0 15		bne $26d6			bne 	_AVLong
.26c1	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.26c3	38		sec				sec 	 							; make it 0-25
.26c4	e9 01		sbc #$01			sbc 	#1
.26c6	0a		asl a				asl 	a 							; x 4 is LSB of address
.26c7	0a		asl a				asl 	a
.26c8	95 48		sta $48,x			sta 	esInt0,x
.26ca	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.26cc	95 50		sta $50,x			sta 	esInt1,x
.26ce	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.26d0	95 40		sta $40,x			sta 	esType,x
.26d2	c8		iny				iny 								; skip over the variable reference in the code.
.26d3	c8		iny				iny
.26d4	8a		txa				txa 								; stack in A to return.
.26d5	60		rts				rts
.26d6					_AVLong:
.26d6	8a		txa				txa
.26d7	48		pha				pha
.26d8	20 16 27	jsr $2716			jsr 	AccessSetup 				; set up the basic stuff.
.26db	20 d6 27	jsr $27d6			jsr 	FindVariable 				; does the variable exist already
.26de	b0 0e		bcs $26ee			bcs 	_AVFound
.26e0	ad fe 0a	lda $0afe			lda 	varType 					; is the variable type an array
.26e3	4a		lsr a				lsr 	a
.26e4	90 05		bcc $26eb			bcc 	_AVCanCreate
.26e6	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.26e8	20 9e 21	jsr $219e		jsr	errorHandler
.26eb					_AVCanCreate:
.26eb	20 53 27	jsr $2753			jsr 	CreateVariable 				; no, create it.
.26ee					_AVFound:
.26ee	68		pla				pla
.26ef	aa		tax				tax
.26f0	18		clc				clc 								; copy temp0 (variable record address)
.26f1	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.26f3	69 05		adc #$05			adc 	#5
.26f5	95 48		sta $48,x			sta 	esInt0,x
.26f7	a5 05		lda $05				lda 	temp0+1
.26f9	69 00		adc #$00			adc 	#0
.26fb	95 50		sta $50,x			sta 	esInt1,x
.26fd	a9 00		lda #$00			lda 	#0
.26ff	95 58		sta $58,x			sta 	esInt2,x
.2701	95 60		sta $60,x			sta 	esInt3,x
.2703	ac fe 0a	ldy $0afe			ldy 	varType 					; get the type ID from the type.
.2706	b9 d6 26	lda $26d6,y			lda 	_AVTypeTable-$3A,y
.2709	95 40		sta $40,x			sta 	esType,x
.270b	ac ff 0a	ldy $0aff			ldy 	varEnd 						; restore Y
.270e	8a		txa				txa 								; return stack in A and return
.270f	60		rts				rts
.2710					_AVTypeTable:
>2710	80 80						.byte 	$80,$80						; integer
>2712	c0 c0						.byte 	$C0,$C0 					; string
>2714	81 81						.byte 	$81,$81 					; float
.2716					AccessSetup:
.2716	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.2718	8d fd 0a	sta $0afd			sta 	varHash
.271b	98		tya				tya
.271c	48		pha				pha
.271d	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.271f	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.2721	b0 0b		bcs $272e			bcs 	_ASComplete
.2723	18		clc				clc 								; add to the hash. Might improve this.
.2724	6d fd 0a	adc $0afd			adc 	varHash
.2727	8d fd 0a	sta $0afd			sta 	varHash
.272a	c8		iny				iny 								; next character
.272b	4c 1d 27	jmp $271d			jmp 	_ASLoop
.272e					_ASComplete:
.272e	8d fe 0a	sta $0afe			sta 	varType 					; save variable type byte
.2731	c8		iny				iny
.2732	8c ff 0a	sty $0aff			sty 	varEnd 						; save the ending position.
.2735	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.2736	e9 3a		sbc #$3a			sbc 	#$3A
.2738	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.2739	0a		asl a				asl 	a
.273a	0a		asl a				asl 	a
.273b	0a		asl a				asl 	a 							; 2 bytes/word
.273c	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.273e	ad fd 0a	lda $0afd			lda 	varHash 					; get hash
.2741	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.2743	0a		asl a				asl  	a 							; x 2 (for word) and CC
.2744	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.2746	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.2748	85 7c		sta $7c				sta 	hashList
.274a	a9 0a		lda #$0a			lda 	#hashTables >> 8
.274c	69 00		adc #$00			adc 	#0
.274e	85 7d		sta $7d				sta 	hashList+1
.2750	68		pla				pla
.2751	a8		tay				tay
.2752	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2753					CreateVariable:
.2753	98		tya				tya 								; push Y on the stack twice.
.2754	48		pha				pha
.2755	48		pha				pha
.2756	ae fe 0a	ldx $0afe			ldx 	varType 					; get var type 0-5
.2759	bd 64 27	lda $2764,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.275c	48		pha				pha 								; save length
.275d	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.275f	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.2761	a5 10		lda $10				lda 	lowMemory+1
.2763	85 05		sta $05				sta 	temp0+1
.2765	68		pla				pla 								; get length
.2766	20 70 10	jsr $1070			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.2769	ad fd 0a	lda $0afd			lda 	varHash 					; store hash at offset 4.
.276c	a0 04		ldy #$04			ldy 	#4
.276e	91 04		sta ($04),y			sta 	(temp0),y
.2770	68		pla				pla 								; offset, work out where the variable name is.
.2771	18		clc				clc
.2772	65 02		adc $02				adc 	codePtr
.2774	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2776	91 04		sta ($04),y			sta 	(temp0),y
.2778	a5 03		lda $03				lda 	codePtr+1
.277a	69 00		adc #$00			adc 	#0
.277c	c8		iny				iny
.277d	91 04		sta ($04),y			sta 	(temp0),y
.277f	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.2781	b1 7c		lda ($7c),y			lda 	(hashList),y
.2783	91 04		sta ($04),y			sta 	(temp0),y
.2785	c8		iny				iny
.2786	b1 7c		lda ($7c),y			lda 	(hashList),y
.2788	91 04		sta ($04),y			sta 	(temp0),y
.278a	a5 05		lda $05				lda 	temp0+1 					; set new link
.278c	91 7c		sta ($7c),y			sta 	(hashList),y
.278e	88		dey				dey
.278f	a5 04		lda $04				lda 	temp0
.2791	91 7c		sta ($7c),y			sta 	(hashList),y
.2793	ad fe 0a	lda $0afe			lda 	varType 					; type in A
.2796	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.2798	20 a4 27	jsr $27a4			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.279b	68		pla				pla
.279c	a8		tay				tay
.279d	60		rts				rts
>279e	09 09				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarISize 					; <storage for integer>
>27a0	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarSSize 					; <storage for string>
>27a2	0b 0b						.byte 	VarHSize+VarFSize,VarHSize+VarFSize 					; <storage for float>
.27a4					ZeroTemp0Y:
.27a4	29 fe		and #$fe			and 	#$FE 						; convert array type to base type
.27a6	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.27a8	f0 16		beq $27c0			beq 	_ZTWriteNullString 			; write "" string
.27aa	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.27ac	f0 22		beq $27d0			beq 	_ZTWriteFloat
.27ae	98		tya				tya
.27af	48		pha				pha
.27b0	a9 00		lda #$00			lda 	#0
.27b2	91 04		sta ($04),y			sta 	(temp0),y
.27b4	c8		iny				iny
.27b5	91 04		sta ($04),y			sta 	(temp0),y
.27b7	c8		iny				iny
.27b8	91 04		sta ($04),y			sta 	(temp0),y
.27ba	c8		iny				iny
.27bb	91 04		sta ($04),y			sta 	(temp0),y
.27bd	68		pla				pla
.27be	a8		tay				tay
.27bf	60		rts				rts
.27c0					_ZTWriteNullString:
.27c0	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.27c2	8d cc 0a	sta $0acc			sta 	NullString
.27c5	a9 cc		lda #$cc			lda 	#NullString & $FF
.27c7	91 04		sta ($04),y			sta 	(temp0),y
.27c9	a9 0a		lda #$0a			lda 	#NullString >> 8
.27cb	c8		iny				iny
.27cc	91 04		sta ($04),y			sta 	(temp0),y
.27ce	88		dey				dey
.27cf	60		rts				rts
.27d0					_ZTWriteFloat:
.27d0	a2 1e		ldx #$1e		ldx	#30
.27d2	20 4f 24	jsr $244f		jsr	floatingpointHandler
.27d5	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.27d6					FindVariable:
.27d6	98		tya				tya
.27d7	48		pha				pha
.27d8	98		tya				tya 								; point temp2 to the actual name.
.27d9	18		clc				clc
.27da	65 02		adc $02				adc 	codePtr
.27dc	85 08		sta $08				sta 	temp2
.27de	a5 03		lda $03				lda 	codePtr+1
.27e0	69 00		adc #$00			adc 	#0
.27e2	85 09		sta $09				sta 	temp2+1
.27e4	a0 00		ldy #$00			ldy 	#0
.27e6	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.27e8	85 04		sta $04				sta 	temp0
.27ea	a5 7d		lda $7d				lda 	hashList+1
.27ec	85 05		sta $05				sta 	temp0+1
.27ee	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.27f0	b1 04		lda ($04),y			lda 	(temp0),y
.27f2	f0 2c		beq $2820			beq 	_FVFail
.27f4	aa		tax				tax
.27f5	88		dey				dey		 							; get LSB
.27f6	b1 04		lda ($04),y			lda 	(temp0),y
.27f8	85 04		sta $04				sta 	temp0 						; update pointer.
.27fa	86 05		stx $05				stx 	temp0+1
.27fc	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.27fe	b1 04		lda ($04),y			lda 	(temp0),y
.2800	cd fd 0a	cmp $0afd			cmp 	varHash
.2803	d0 e9		bne $27ee			bne 	_FVNext 					; if not, no point in checking the name.
.2805	88		dey				dey 								; copy name pointer to temp1.
.2806	b1 04		lda ($04),y			lda 	(temp0),y
.2808	85 07		sta $07				sta 	temp1+1
.280a	88		dey				dey
.280b	b1 04		lda ($04),y			lda 	(temp0),y
.280d	85 06		sta $06				sta 	temp1
.280f	a0 00		ldy #$00			ldy 	#0
.2811					_FVCheck:
.2811	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2813	d1 08		cmp ($08),y			cmp 	(temp2),y
.2815	d0 d7		bne $27ee			bne 	_FVNext		 				; fail if different.
.2817	c8		iny				iny
.2818	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.281a	90 f5		bcc $2811			bcc 	_FVCheck
.281c	68		pla				pla
.281d	a8		tay				tay
.281e	38		sec				sec
.281f	60		rts				rts
.2820					_FVFail:
.2820	68		pla				pla
.2821	a8		tay				tay
.2822	18		clc				clc
.2823	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2824					HashTableReset:
.2824	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2826	a9 00		lda #$00			lda 	#0
.2828					_HTRClear:
.2828	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.282b	ca		dex				dex
.282c	d0 fa		bne $2828			bne 	_HTRClear
.282e	60		rts				rts

;******  Return to file: variable/variable.asm

.282f					variableHandler:
.282f	7c 32 28	jmp ($2832,x)			jmp 	(variableVectors,x)
.2832					variableVectors:
>2832	b8 26					.word AccessVariable       ; index 0
>2834	24 28					.word HashTableReset       ; index 2

;******  Return to file: basic.asm

.2836					section_end_variable:

;******  End of listing
