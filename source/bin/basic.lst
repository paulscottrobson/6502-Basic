
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=0 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Thu Mar 11 07:08:32 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					autorun=0
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line.
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000					Start:
.1000	4c 77 22	jmp $2277			jmp 	ColdStart
.1003	4c 04 2e	jmp $2e04			jmp 	TokTest
.3538					ReturnPos:
.5000					programMemory:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	18 e8 03 ca 85 11 54 68			.byte 24,232,3,202,133,17,84,104,105,115,32,105,115,32,97,32,99,111,109,109,101,110,116,128,9,242,3,129,137,200,81,76,128,12,252,3,1,45,49,58,141,144,65,99,128,9,6,4,24,58,141,144,66,128,7,16,4,213,1,58,128,14,26,4,213,193,133,5,72,101,108,108,111,198,128,14,36,4,213,194,133,5,72,101,108,108,111,198,128,23,46,4,3,49,60,141,133,6,83,65,86,69,77,69,143,133,4,116,101,115,116,128,24,56,4,213,133,5,83,84,65,82,84,200,1,45,49,58,200,3,49,60,200,24,58,128,11,66,4,205,19,8,15,23,59,198,128,30,76,4,205,4,5,13,15,59,106,200,197,82,77,69,89,120,200,133,8,73,78,68,69,77,79,33,33,198,128,11,86,4,205,19,8,15,23,59,198,128,22,96,4,213,133,3,69,78,68,200,1,45,49,58,200,3,49,60,200,24,58,128,11,106,4,205,19,8,15,23,59,198,128,33,116,4,3,49,60,141,133,19,120,120,120,120,120,120,120,120,120,120,120,120,120,65,65,65,65,65,65,143,133,1,33,128,14,126,4,213,3,49,60,200,165,3,49,60,198,128,11,136,4,205,19,8,15,23,59,198,128,8,146,4,153,199,158,171,128,22,156,4,157,4,5,13,15,59,1,45,49,58,200,24,58,200,3,49,60,198,128,11,166,4,205,19,8,15,23,59,198,128,18,176,4,3,49,60,141,3,49,60,143,133,4,33,33,33,33,128,11,186,4,205,19,8,15,23,59,198,128,13,196,4,205,24,15,50,59,133,1,42,198,128,45,206,4,213,133,4,68,69,77,79,200,1,45,49,58,200,3,1,45,49,60,200,133,1,36,201,184,24,58,200,80,198,200,133,1,36,184,195,3,49,60,200,80,198,128,5,216,4,163,128,13,226,4,157,24,15,50,59,3,49,60,198,128,14,236,4,213,133,3,88,79,50,201,3,49,60,128,5,246,4,163,128,11,0,5,157,19,8,15,23,59,198,128,11,10,5,1,58,141,195,3,49,60,128,26,20,5,213,133,1,36,201,184,187,1,58,198,200,80,198,200,186,187,1,58,198,144,65,198,128,5,30,5,163,128,28,40,5,24,24,58,24,24,59,68,198,24,24,60,24,24,61,68,198,24,24,62,24,24,63,68,198,128,0
>5008	69 73 20 69 73 20 61 20 63 6f 6d 6d 65 6e 74 80
>5018	09 f2 03 81 89 c8 51 4c 80 0c fc 03 01 2d 31 3a
>5028	8d 90 41 63 80 09 06 04 18 3a 8d 90 42 80 07 10
>5038	04 d5 01 3a 80 0e 1a 04 d5 c1 85 05 48 65 6c 6c
>5048	6f c6 80 0e 24 04 d5 c2 85 05 48 65 6c 6c 6f c6
>5058	80 17 2e 04 03 31 3c 8d 85 06 53 41 56 45 4d 45
>5068	8f 85 04 74 65 73 74 80 18 38 04 d5 85 05 53 54
>5078	41 52 54 c8 01 2d 31 3a c8 03 31 3c c8 18 3a 80
>5088	0b 42 04 cd 13 08 0f 17 3b c6 80 1e 4c 04 cd 04
>5098	05 0d 0f 3b 6a c8 c5 52 4d 45 59 78 c8 85 08 49
>50a8	4e 44 45 4d 4f 21 21 c6 80 0b 56 04 cd 13 08 0f
>50b8	17 3b c6 80 16 60 04 d5 85 03 45 4e 44 c8 01 2d
>50c8	31 3a c8 03 31 3c c8 18 3a 80 0b 6a 04 cd 13 08
>50d8	0f 17 3b c6 80 21 74 04 03 31 3c 8d 85 13 78 78
>50e8	78 78 78 78 78 78 78 78 78 78 78 41 41 41 41 41
>50f8	41 8f 85 01 21 80 0e 7e 04 d5 03 31 3c c8 a5 03
>5108	31 3c c6 80 0b 88 04 cd 13 08 0f 17 3b c6 80 08
>5118	92 04 99 c7 9e ab 80 16 9c 04 9d 04 05 0d 0f 3b
>5128	01 2d 31 3a c8 18 3a c8 03 31 3c c6 80 0b a6 04
>5138	cd 13 08 0f 17 3b c6 80 12 b0 04 03 31 3c 8d 03
>5148	31 3c 8f 85 04 21 21 21 21 80 0b ba 04 cd 13 08
>5158	0f 17 3b c6 80 0d c4 04 cd 18 0f 32 3b 85 01 2a
>5168	c6 80 2d ce 04 d5 85 04 44 45 4d 4f c8 01 2d 31
>5178	3a c8 03 01 2d 31 3c c8 85 01 24 c9 b8 18 3a c8
>5188	50 c6 c8 85 01 24 b8 c3 03 31 3c c8 50 c6 80 05
>5198	d8 04 a3 80 0d e2 04 9d 18 0f 32 3b 03 31 3c c6
>51a8	80 0e ec 04 d5 85 03 58 4f 32 c9 03 31 3c 80 05
>51b8	f6 04 a3 80 0b 00 05 9d 13 08 0f 17 3b c6 80 0b
>51c8	0a 05 01 3a 8d c3 03 31 3c 80 1a 14 05 d5 85 01
>51d8	24 c9 b8 bb 01 3a c6 c8 50 c6 c8 ba bb 01 3a c6
>51e8	90 41 c6 80 05 1e 05 a3 80 1c 28 05 18 18 3a 18
>51f8	18 3b 44 c6 18 18 3c 18 18 3d 44 c6 18 18 3e 18
>5208	18 3f 44 c6 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1006					Command_Assert:
.1006	20 86 1c	jsr $1c86			jsr 	EvaluateRootInteger 		; what is being asserted.
.1009	20 11 22	jsr $2211			jsr 	MInt32Zero 					; is it true ?
.100c	f0 01		beq $100f			beq 	_CAError
.100e	60		rts				rts
.100f					_CAError:
.100f	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1011	20 f6 23	jsr $23f6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1014					CommandClear:
.1014					XCommandClear:
.1014	98		tya				tya
.1015	48		pha				pha
.1016	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.1019	85 0d		sta $0d				sta 	highMemory
.101b	ad cb 0a	lda $0acb			lda 	endMemory+1
.101e	85 0e		sta $0e				sta 	highMemory+1
.1020	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1023	85 04		sta $04				sta 	temp0
.1025	ad c9 0a	lda $0ac9			lda 	basePage+1
.1028	85 05		sta $05				sta 	temp0+1
.102a					_CCFindEnd:
.102a	a0 00		ldy #$00			ldy 	#0
.102c	b1 04		lda ($04),y			lda 	(temp0),y
.102e	f0 0c		beq $103c			beq 	_CCFoundEnd 				; offset zero is end.
.1030	18		clc				clc
.1031	65 04		adc $04				adc 	temp0 						; move to next line
.1033	85 04		sta $04				sta 	temp0
.1035	90 f3		bcc $102a			bcc 	_CCFindEnd
.1037	e6 05		inc $05				inc 	temp0+1
.1039	4c 2a 10	jmp $102a			jmp 	_CCFindEnd
.103c					_CCFoundEnd:
.103c	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.103e	85 0f		sta $0f				sta 	lowMemory
.1040	a5 05		lda $05				lda 	temp0+1
.1042	85 10		sta $10				sta 	lowMemory+1
.1044	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.1046	20 5a 10	jsr $105a			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1049	20 9d 22	jsr $229d			jsr 	RSReset 					; reset the return stack.
.104c	a2 04		ldx #$04		ldx	#4
.104e	20 2f 35	jsr $352f		jsr	variableHandler
.1051	20 77 16	jsr $1677			jsr 	ScanProc 					; scan for procedures
.1054	20 81 14	jsr $1481			jsr 	CommandRestore 				; do a restore
.1057	68		pla				pla
.1058	a8		tay				tay
.1059	60		rts				rts
.105a					AdvanceLowMemoryByte:
.105a	18		clc				clc
.105b	65 0f		adc $0f				adc 	lowMemory
.105d	85 0f		sta $0f				sta 	lowMemory
.105f	90 02		bcc $1063			bcc 	_ALMBExit
.1061	e6 10		inc $10				inc 	lowMemory+1
.1063					_ALMBExit:
.1063	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1064					Command_Dim:
.1064	a2 02		ldx #$02		ldx	#2
.1066	20 2f 35	jsr $352f		jsr	variableHandler
.1069	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.106b	c8		iny				iny
.106c	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.106e	f0 f4		beq $1064			beq 	Command_Dim
.1070	88		dey				dey 								; unpick get
.1071	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.3538					Command_FOR:
.3538	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.353a	a2 0b		ldx #$0b			ldx 	#11
.353c	20 ab 22	jsr $22ab			jsr 	RSClaim
.353f	20 5f 11	jsr $115f			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.3542	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.3544	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.3546	d0 4c		bne $3594			bne 	_CFType
.3548	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.354a	20 52 22	jsr $2252			jsr 	CheckToken
.354d	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.354f	20 88 1c	jsr $1c88			jsr 	EvaluateInteger				; get terminal value in stack 1
.3552	98		tya				tya
.3553	48		pha				pha
.3554	a0 04		ldy #$04			ldy 	#4
.3556	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.3558	91 78		sta ($78),y			sta 	(rsPointer),y
.355a	c8		iny				iny
.355b	a5 50		lda $50				lda		esInt1
.355d	91 78		sta ($78),y			sta 	(rsPointer),y
.355f	c8		iny				iny
.3560	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.3562	91 78		sta ($78),y			sta 	(rsPointer),y
.3564	c8		iny				iny
.3565	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.3567	91 78		sta ($78),y			sta 	(rsPointer),y
.3569	c8		iny				iny
.356a	a5 51		lda $51				lda		esInt1+1
.356c	91 78		sta ($78),y			sta 	(rsPointer),y
.356e	c8		iny				iny
.356f	a5 59		lda $59				lda		esInt2+1
.3571	91 78		sta ($78),y			sta 	(rsPointer),y
.3573	c8		iny				iny
.3574	a5 61		lda $61				lda		esInt3+1
.3576	91 78		sta ($78),y			sta 	(rsPointer),y
.3578	68		pla				pla
.3579	a8		tay				tay
.357a	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.357c	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.357e	d0 0e		bne $358e			bne 	_CFDone
.3580	c8		iny				iny									; skip over step.
.3581	20 88 1c	jsr $1c88			jsr 	EvaluateInteger 			; get step
.3584	98		tya				tya
.3585	48		pha				pha
.3586	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.3588	a0 06		ldy #$06			ldy 	#6
.358a	91 78		sta ($78),y			sta 	(rsPointer),y
.358c	68		pla				pla
.358d	a8		tay				tay
.358e					_CFDone:
.358e	a9 01		lda #$01			lda 	#1
.3590	20 d7 22	jsr $22d7			jsr 	RSSavePosition 				; save position.
.3593	60		rts				rts
.3594					_CFType:
.3594	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3596	20 f6 23	jsr $23f6		jsr	errorHandler
.3599					Command_NEXT:
.3599	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.359b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.359d	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.359f	f0 05		beq $35a6			beq 	_isok
.35a1	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.35a3	20 f6 23	jsr $23f6		jsr	errorHandler
.35a6					_isok:
.35a6	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.35a8	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.35aa	b0 18		bcs $35c4			bcs 	_CNNoIndex
.35ac	a2 00		ldx #$00			ldx 	#0 							; start on stack
.35ae	20 bb 1c	jsr $1cbb			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.35b1	98		tya				tya
.35b2	48		pha				pha
.35b3	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.35b5	b1 78		lda ($78),y			lda 	(rsPointer),y
.35b7	d5 48		cmp $48,x			cmp 	esInt0,x
.35b9	d0 76		bne $3631			bne 	_CNBadIndex
.35bb	c8		iny				iny
.35bc	b1 78		lda ($78),y			lda 	(rsPointer),y
.35be	d5 50		cmp $50,x			cmp 	esInt1,x
.35c0	d0 6f		bne $3631			bne 	_CNBadIndex
.35c2	68		pla				pla
.35c3	a8		tay				tay
.35c4					_CNNoIndex:
.35c4	98		tya				tya
.35c5	48		pha				pha
.35c6	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.35c8	b1 78		lda ($78),y			lda 	(rsPointer),y
.35ca	85 04		sta $04				sta 	temp0
.35cc	c8		iny				iny
.35cd	b1 78		lda ($78),y			lda 	(rsPointer),y
.35cf	85 05		sta $05				sta 	temp0+1
.35d1	c8		iny				iny
.35d2	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.35d4	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.35d6	85 09		sta $09				sta 	temp2+1 					; save for later.
.35d8	10 01		bpl $35db			bpl 	_CNSignX
.35da	ca		dex				dex  								; X = $FF
.35db					_CNSignX:
.35db	18		clc				clc 								; add to the LSB
.35dc	a0 00		ldy #$00			ldy 	#0
.35de	71 04		adc ($04),y			adc 	(temp0),y
.35e0	91 04		sta ($04),y			sta 	(temp0),y
.35e2					_CNPropogate:
.35e2	c8		iny				iny  								; add the sign extended in X to the rest.
.35e3	8a		txa				txa
.35e4	71 04		adc ($04),y			adc 	(temp0),y
.35e6	91 04		sta ($04),y			sta 	(temp0),y
.35e8	c8		iny				iny
.35e9	8a		txa				txa
.35ea	71 04		adc ($04),y			adc 	(temp0),y
.35ec	91 04		sta ($04),y			sta 	(temp0),y
.35ee	c8		iny				iny
.35ef	8a		txa				txa
.35f0	71 04		adc ($04),y			adc 	(temp0),y
.35f2	91 04		sta ($04),y			sta 	(temp0),y
.35f4	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.35f5	a5 78		lda $78				lda 	rsPointer
.35f7	69 07		adc #$07			adc 	#7
.35f9	85 06		sta $06				sta 	temp1
.35fb	a9 00		lda #$00			lda 	#0
.35fd	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.35ff	a8		tay				tay 								; and clear the Y register again.
.3600	65 79		adc $79				adc 	rsPointer+1
.3602	85 07		sta $07				sta 	temp1+1
.3604	38		sec				sec 								; calculate current - limit oring interim values.
.3605	20 3d 36	jsr $363d			jsr 	_CNCompare 					; each of these does a byte.
.3608	20 3d 36	jsr $363d			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.360b	20 3d 36	jsr $363d			jsr 	_CNCompare 					; and the carry of the subtraction.
.360e	20 3d 36	jsr $363d			jsr 	_CNCompare
.3611	50 02		bvc $3615			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.3613	49 80		eor #$80			eor 	#$80
.3615					_CNNoOverflow:
.3615	a4 09		ldy $09				ldy 	temp2+1						; get step back
.3617	30 1d		bmi $3636			bmi 	_CNCheckDownto
.3619	c9 00		cmp #$00			cmp 	#0
.361b	30 0c		bmi $3629			bmi 	_CNLoopRound 				; loop round if < =
.361d	a5 08		lda $08				lda 	temp2
.361f	f0 08		beq $3629			beq 	_CNLoopRound
.3621					_CNLoopExit:
.3621	68		pla				pla
.3622	a8		tay				tay
.3623	a9 0b		lda #$0b			lda 	#11
.3625	20 cd 22	jsr $22cd			jsr 	RSFree
.3628	60		rts				rts
.3629					_CNLoopRound:
.3629	68		pla				pla
.362a	a8		tay				tay
.362b	a9 01		lda #$01			lda 	#1
.362d	20 ea 22	jsr $22ea			jsr 	RSLoadPosition				; go back to the loop top
.3630	60		rts				rts
.3631					_CNBadIndex:
.3631	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.3633	20 f6 23	jsr $23f6		jsr	errorHandler
.3636					_CNCheckDownto:
.3636	c9 00		cmp #$00			cmp 	#0
.3638	10 ef		bpl $3629			bpl 	_CNLoopRound
.363a	4c 21 36	jmp $3621			jmp 	_CNLoopExit
.363d					_CNCompare:
.363d	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.363f	f1 06		sbc ($06),y			sbc 	(temp1),y
.3641	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.3643	85 08		sta $08				sta 	temp2
.3645	c8		iny				iny
.3646	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1072					CommandIf:
.1072	20 86 1c	jsr $1c86			jsr 	EvaluateRootInteger 		; get what's being tested.
.1075	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1077	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1079	f0 04		beq $107f			beq 	_IfSimple
.107b	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.107d	d0 1b		bne $109a			bne 	_IfComplex
.107f					_IfSimple:
.107f	20 11 22	jsr $2211			jsr 	MInt32Zero					; check if TOS zero
.1082	f0 10		beq $1094			beq 	_IfEOL 						; go to next line.
.1084	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1086	c8		iny				iny
.1087	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1089	f0 0c		beq $1097			beq 	_IfGoto 					; do the Goto code
.108b	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.108d	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.108f	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1091	f0 04		beq $1097			beq 	_IfGoto
.1093	60		rts				rts 								; else continue on this line.
.1094					_IfEOL:
.1094	4c ec 16	jmp $16ec			jmp 	AdvanceNextLine 			; go to next line
.1097					_IfGoto:
.1097	4c 61 17	jmp $1761			jmp 	CommandGoto
.109a					_IfComplex:
.109a	20 11 22	jsr $2211			jsr 	MInt32Zero 					; is it true ?
.109d	f0 01		beq $10a0			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.109f	60		rts				rts 								; else continue.
.10a0					_IFSkip:
.10a0	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a2	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a4	4c 32 37	jmp $3732			jmp		ScanForward
.10a7					Command_ELSE:
.10a7	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a9	8a		txa				txa
.10aa	4c 32 37	jmp $3732			jmp		ScanForward
.10ad					Command_ENDIF:
.10ad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0af0					InputBuffer:
>0af0							.fill 	MaxInputSize+1
.10ae					Command_Input:
.10ae	b1 02		lda ($02),y			lda 	(codePtr),y 			; see what's next.
.10b0	c8		iny				iny
.10b1	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.10b3	f0 f9		beq $10ae			beq 	Command_Input
.10b5	88		dey				dey 							; undo consume
.10b6	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.10b8	f0 54		beq $110e			beq 	_CIExit 				; : or EOL, exit
.10ba	c9 80		cmp #$80			cmp 	#TOK_EOL
.10bc	f0 50		beq $110e			beq 	_CIExit
.10be	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.10c0	90 12		bcc $10d4			bcc 	_CIVariable
.10c2	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.10c4	d0 43		bne $1109			bne 	_CISyntax
.10c6	a2 00		ldx #$00			ldx 	#0
.10c8	20 7d 1c	jsr $1c7d			jsr 	EvaluateString 			; evaluate and print string
.10cb	20 d4 11	jsr $11d4			jsr 	TOSToTemp0
.10ce	20 a3 13	jsr $13a3			jsr 	PrintString
.10d1	4c ae 10	jmp $10ae			jmp 	Command_Input
.10d4					_CIVariable:
.10d4	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.10d6	20 bb 1c	jsr $1cbb			jsr 	EvaluateReference
.10d9					_CIRetry:
.10d9	a9 3f		lda #$3f			lda 	#"?"
.10db	a2 12		ldx #$12		ldx	#18
.10dd	20 d9 23	jsr $23d9		jsr	deviceHandler
.10e0	98		tya				tya
.10e1	48		pha				pha
.10e2	20 22 11	jsr $1122			jsr 	InputString 			; input a string.
.10e5	a2 01		ldx #$01			ldx 	#1
.10e7	20 0f 11	jsr $110f			jsr 	BufferToStackX 			; make stack,x ref input string.
.10ea	a5 40		lda $40				lda 	esType 					; if target type numeric
.10ec	29 40		and #$40			and 	#$40 					; then convert to number
.10ee	d0 11		bne $1101			bne 	_CIWrite
.10f0	a2 01		ldx #$01			ldx 	#1
.10f2	20 d4 11	jsr $11d4			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.10f5	a9 0a		lda #$0a			lda 	#10
.10f7	20 58 20	jsr $2058			jsr 	MInt32FromString 		; convert it back from a string.
.10fa	68		pla				pla
.10fb	a8		tay				tay
.10fc	b0 03		bcs $1101			bcs 	_CIWrite 				; successfully converted.
.10fe	18		clc				clc 							; default fail FP conversion
.10ff	90 d8		bcc $10d9			bcc		_CIRetry				; failed, try again.
.1101					_CIWrite:
.1101	a2 00		ldx #$00			ldx 	#0
.1103	20 72 11	jsr $1172			jsr 	WriteValue
.1106	4c ae 10	jmp $10ae			jmp 	Command_Input
.1109					_CISyntax:
.1109	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.110b	20 f6 23	jsr $23f6		jsr	errorHandler
.110e					_CIExit:
.110e	60		rts				rts
.110f					BufferToStackX:
.110f	a9 f0		lda #$f0			lda 	#InputBuffer & $FF
.1111	95 48		sta $48,x			sta 	esInt0,x
.1113	a9 0a		lda #$0a			lda 	#InputBuffer >> 8
.1115	95 50		sta $50,x			sta 	esInt1,x
.1117	a9 00		lda #$00			lda 	#0
.1119	95 58		sta $58,x			sta 	esInt2,x
.111b	95 60		sta $60,x			sta 	esInt3,x
.111d	a9 40		lda #$40			lda 	#$40
.111f	95 40		sta $40,x			sta 	esType,x
.1121	60		rts				rts
.1122					InputString:
.1122	a9 00		lda #$00			lda 	#0
.1124	8d f0 0a	sta $0af0			sta 	InputBuffer
.1127					_InputLoop:
.1127	a2 08		ldx #$08		ldx	#8
.1129	20 d9 23	jsr $23d9		jsr	deviceHandler
.112c	c9 00		cmp #$00			cmp 	#0
.112e	f0 f7		beq $1127			beq 	_InputLoop
.1130	c9 08		cmp #$08			cmp 	#8
.1132	f0 19		beq $114d			beq 	_InputBackspace
.1134	c9 0d		cmp #$0d			cmp 	#13
.1136	f0 21		beq $1159			beq 	_InputExit
.1138	ae f0 0a	ldx $0af0			ldx 	InputBuffer
.113b	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.113d	f0 e8		beq $1127			beq 	_InputLoop
.113f	9d f1 0a	sta $0af1,x			sta 	InputBuffer+1,x 		; write char
.1142	ee f0 0a	inc $0af0			inc 	InputBuffer 			; advance count.
.1145					_InputPrintLoop:
.1145	a2 12		ldx #$12		ldx	#18
.1147	20 d9 23	jsr $23d9		jsr	deviceHandler
.114a	4c 27 11	jmp $1127			jmp	 	_InputLoop
.114d					_InputBackspace:
.114d	ad f0 0a	lda $0af0			lda 	InputBuffer 			; at start
.1150	f0 d5		beq $1127			beq 	_InputLoop
.1152	ce f0 0a	dec $0af0			dec 	InputBuffer
.1155	a9 08		lda #$08			lda 	#8
.1157	d0 ec		bne $1145			bne 	_InputPrintLoop
.1159					_InputExit:
.1159	a2 02		ldx #$02		ldx	#2
.115b	20 d9 23	jsr $23d9		jsr	deviceHandler
.115e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.115f					CommandLet:
.115f	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1161	20 bb 1c	jsr $1cbb			jsr 	EvaluateReference
.1164	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1166	20 52 22	jsr $2252			jsr 	CheckToken
.1169	e8		inx				inx 								; do RHS
.116a	20 69 1c	jsr $1c69			jsr 	Evaluate 					; evaluate and dereference
.116d	ca		dex				dex
.116e	20 72 11	jsr $1172			jsr 	WriteValue 					; write it out
.1171	60		rts				rts
.1172					WriteValue:
.1172	98		tya				tya
.1173	48		pha				pha
.1174	20 d4 11	jsr $11d4			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1177	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1179	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.117b	29 40		and #$40			and 	#$40
.117d	d0 50		bne $11cf			bne		_WVType
.117f	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1181	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1183	29 40		and #$40			and 	#$40
.1185	d0 1f		bne $11a6			bne 	_WVCopyString
.1187	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1189	15 41		ora $41,x			ora 	esType+1,x
.118b	4a		lsr a				lsr 	a
.118c	90 22		bcc $11b0			bcc 	_WVCopyData4 				; copy 4 data bytes.
.118e	b5 40		lda $40,x			lda 	esType,x
.1190	4a		lsr a				lsr 	a
.1191	90 3c		bcc $11cf			bcc 	_WVType
.1193	e8		inx				inx 								; force the value being written to be a float.
.1194	20 d3 17	jsr $17d3			jsr 	BPMakeFloat
.1197	ca		dex				dex
.1198	20 d4 11	jsr $11d4			jsr 	TOSToTemp0 					; set Temp0 to write address
.119b	e8		inx				inx
.119c	8a		txa				txa
.119d	a2 20		ldx #$20		ldx	#32
.119f	20 28 27	jsr $2728		jsr	floatingpointHandler
.11a2	aa		tax				tax
.11a3	4c cc 11	jmp $11cc			jmp 	_WVCopyExit
.11a6					_WVCopyString:
.11a6	8a		txa				txa
.11a7	a2 0c		ldx #$0c		ldx	#12
.11a9	20 8c 2b	jsr $2b8c		jsr	stringHandler
.11ac	aa		tax				tax
.11ad	4c cc 11	jmp $11cc			jmp 	_WVCopyExit
.11b0					_WVCopyData4:
.11b0	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.11b2	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.11b4	d0 10		bne $11c6			bne 	_WVCopyData1
.11b6	a0 03		ldy #$03			ldy 	#3
.11b8	b5 61		lda $61,x			lda 	esInt3+1,x
.11ba	91 04		sta ($04),y			sta 	(temp0),y
.11bc	88		dey				dey
.11bd	b5 59		lda $59,x			lda 	esInt2+1,x
.11bf	91 04		sta ($04),y			sta 	(temp0),y
.11c1	88		dey				dey
.11c2	b5 51		lda $51,x			lda 	esInt1+1,x
.11c4	91 04		sta ($04),y			sta 	(temp0),y
.11c6					_WVCopyData1:
.11c6	a0 00		ldy #$00			ldy 	#0
.11c8	b5 49		lda $49,x			lda 	esInt0+1,x
.11ca	91 04		sta ($04),y			sta 	(temp0),y
.11cc					_WVCopyExit:
.11cc	68		pla				pla
.11cd	a8		tay				tay
.11ce	60		rts				rts
.11cf					_WVType:
.11cf	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.11d1	20 f6 23	jsr $23f6		jsr	errorHandler
.11d4					TOSToTemp0:
.11d4	b5 48		lda $48,x			lda 	esInt0,x
.11d6	85 04		sta $04				sta 	temp0
.11d8	b5 50		lda $50,x			lda 	esInt1,x
.11da	85 05		sta $05				sta 	temp0+1
.11dc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.3647					CommandList:
.3647	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1
.3649	20 ea 21	jsr $21ea			jsr 	MInt32False
.364c	e8		inx				inx
.364d	20 e6 21	jsr $21e6			jsr 	MInt32True
.3650	b1 02		lda ($02),y			lda 	(codePtr),y
.3652	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; list ,xxxx
.3654	f0 15		beq $366b			beq 	_CLEndLine
.3656	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.3658	30 1b		bmi $3675			bmi 	_CLDoListing
.365a	a2 00		ldx #$00			ldx 	#0 							; get start
.365c	20 88 1c	jsr $1c88			jsr 	EvaluateInteger
.365f	b1 02		lda ($02),y			lda 	(codePtr),y 				; , follows
.3661	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.3663	f0 06		beq $366b			beq 	_CLEndLine
.3665	20 28 21	jsr $2128			jsr 	MInt32CopyUp 				; copy first to second
.3668	4c 75 36	jmp $3675			jmp 	_CLDoListing
.366b					_CLEndLine:
.366b	c8		iny				iny 								; skip comma
.366c	b1 02		lda ($02),y			lda 	(codePtr),y  				; no number follows.
.366e	30 05		bmi $3675			bmi 	_CLDoListing
.3670	a2 01		ldx #$01			ldx 	#1
.3672	20 88 1c	jsr $1c88			jsr 	EvaluateInteger				; get end
.3675					_CLDoListing:
.3675	20 1a 15	jsr $151a			jsr 	ResetCodeAddress 			; back to the start.
.3678					_CLCheckLoop:
.3678	a0 00		ldy #$00			ldy 	#0							; check end.
.367a	b1 02		lda ($02),y			lda 	(codePtr),y
.367c	f0 26		beq $36a4			beq 	_CLEnd
.367e	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3680	20 a7 36	jsr $36a7			jsr 	CLCompareLineTOS
.3683	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3685	f0 0d		beq $3694			beq 	_CLNext
.3687	e8		inx				inx
.3688	20 a7 36	jsr $36a7			jsr 	CLCompareLineTOS 			; compare vs higher
.368b	c9 01		cmp #$01			cmp 	#1
.368d	f0 05		beq $3694			beq 	_CLNext
.368f	a2 02		ldx #$02		ldx	#2
.3691	20 38 32	jsr $3238		jsr	tokeniserHandler
.3694					_CLNext:
.3694	a0 00		ldy #$00			ldy 	#0
.3696	b1 02		lda ($02),y			lda 	(codePtr),y
.3698	18		clc				clc
.3699	65 02		adc $02				adc 	codePtr
.369b	85 02		sta $02				sta 	codePtr
.369d	90 d9		bcc $3678			bcc 	_CLCheckLoop
.369f	e6 03		inc $03				inc 	codePtr+1
.36a1	4c 78 36	jmp $3678			jmp 	_CLCheckLoop
.36a4					_CLEnd:
.36a4	4c 98 22	jmp $2298			jmp 	WarmStart
.36a7					CLCompareLineTOS:
.36a7	a0 01		ldy #$01			ldy 	#1
.36a9	b1 02		lda ($02),y			lda 	(codePtr),y
.36ab	55 48		eor $48,x			eor 	esInt0,x
.36ad	85 04		sta $04				sta 	temp0
.36af	c8		iny				iny
.36b0	b1 02		lda ($02),y			lda 	(codePtr),y
.36b2	55 50		eor $50,x			eor 	esInt1,x
.36b4	05 04		ora $04				ora 	temp0
.36b6	f0 10		beq $36c8			beq 	_CLCLTExit
.36b8	88		dey				dey
.36b9	b1 02		lda ($02),y			lda 	(codePtr),y
.36bb	d5 48		cmp $48,x			cmp 	esInt0,x
.36bd	c8		iny				iny
.36be	b1 02		lda ($02),y			lda 	(codePtr),y
.36c0	f5 50		sbc $50,x			sbc 	esInt1,x
.36c2	a9 ff		lda #$ff			lda 	#255
.36c4	90 02		bcc $36c8			bcc 	_CLCLTExit
.36c6	a9 01		lda #$01			lda 	#1
.36c8					_CLCLTExit:
.36c8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0b11					storeSize:
>0b11							.fill 	1
.11dd					CommandLocal:
.11dd	a2 00		ldx #$00			ldx 	#0
.11df	20 fb 11	jsr $11fb			jsr 	LocaliseVariable 			; localise one.
.11e2					_CLCheckNext:
.11e2	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.11e4	c8		iny				iny
.11e5	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.11e7	f0 06		beq $11ef			beq 	_CLAssignment
.11e9	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.11eb	f0 f0		beq $11dd			beq 	CommandLocal
.11ed	88		dey				dey
.11ee	60		rts				rts
.11ef					_CLAssignment:
.11ef	a2 01		ldx #$01			ldx 	#1
.11f1	20 69 1c	jsr $1c69			jsr 	Evaluate 					; evaluate RHS
.11f4	ca		dex				dex
.11f5	20 72 11	jsr $1172			jsr 	WriteValue
.11f8	4c e2 11	jmp $11e2			jmp 	_CLCheckNext
.11fb					LocaliseVariable:
.11fb	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.11fd	c9 40		cmp #$40			cmp 	#$40
.11ff	b0 67		bcs $1268			bcs 	_LVSyntax
.1201	8a		txa				txa 								; get the address of that variable.
.1202	a2 00		ldx #$00		ldx	#0
.1204	20 2f 35	jsr $352f		jsr	variableHandler
.1207	aa		tax				tax
.1208	8a		txa				txa
.1209	48		pha				pha
.120a	98		tya				tya
.120b	48		pha				pha
.120c	20 d4 11	jsr $11d4			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.120f	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1211	0a		asl a				asl 	a
.1212	10 16		bpl $122a			bpl 	_LVPushNumber
.1214	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1216	b1 04		lda ($04),y			lda 	(temp0),y
.1218	c8		iny				iny
.1219	85 06		sta $06				sta 	temp1
.121b	b1 04		lda ($04),y			lda 	(temp0),y
.121d	85 07		sta $07				sta 	temp1+1
.121f	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1221	b1 06		lda ($06),y			lda 	(temp1),y
.1223	aa		tax				tax 								; into X
.1224	e8		inx				inx 								; +1 for length.
.1225	a9 24		lda #$24			lda 	#markerString
.1227	4c 3f 12	jmp $123f			jmp 	_LVWriteFrame
.122a					_LVPushNumber:
.122a	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.122c	85 06		sta $06				sta 	temp1
.122e	a5 05		lda $05				lda 	temp0+1
.1230	85 07		sta $07				sta 	temp1+1
.1232	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1234	4a		lsr a				lsr 	a
.1235	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1237	a2 04		ldx #$04			ldx 	#VarISize
.1239	90 04		bcc $123f			bcc 	_LVIsInteger
.123b	a9 23		lda #$23			lda 	#markerFloat
.123d	a2 06		ldx #$06			ldx 	#VarFSize
.123f					_LVIsInteger:
.123f					_LVWriteFrame:
.123f	8e 11 0b	stx $0b11			stx 	storeSize 					; number of bytes to copy from (temp0)
.1242	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1243	e8		inx				inx
.1244	e8		inx				inx
.1245	20 ab 22	jsr $22ab			jsr 	RSClaim 					; create the stack frame.
.1248	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.124a	a0 01		ldy #$01			ldy 	#1
.124c	91 78		sta ($78),y			sta 	(rsPointer),y
.124e	c8		iny				iny
.124f	a5 05		lda $05				lda 	temp0+1
.1251	91 78		sta ($78),y			sta 	(rsPointer),y
.1253	a0 00		ldy #$00			ldy 	#0
.1255					_LVCopyData:
.1255	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.1257	c8		iny				iny 								; write allowing for the header bit.
.1258	c8		iny				iny
.1259	c8		iny				iny
.125a	91 78		sta ($78),y			sta 	(rsPointer),y
.125c	88		dey				dey
.125d	88		dey				dey
.125e	ce 11 0b	dec $0b11			dec 	storeSize 					; do it storesize times
.1261	d0 f2		bne $1255			bne 	_LVCopyData
.1263	68		pla				pla
.1264	a8		tay				tay
.1265	68		pla				pla
.1266	aa		tax				tax
.1267	60		rts				rts
.1268					_LVSyntax:
.1268	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.126a	20 f6 23	jsr $23f6		jsr	errorHandler
.126d					RestoreLocals:
.126d	a2 00		ldx #$00			ldx 	#0
.126f	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1271	c9 40		cmp #$40			cmp	 	#64
.1273	90 01		bcc $1276			bcc 	_RLocal
.1275	60		rts				rts
.1276					_RLocal:
.1276	8a		txa				txa
.1277	48		pha				pha
.1278	98		tya				tya
.1279	48		pha				pha
.127a	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.127c	b1 78		lda ($78),y			lda 	(rsPointer),y
.127e	85 04		sta $04				sta 	temp0
.1280	c8		iny				iny
.1281	b1 78		lda ($78),y			lda 	(rsPointer),y
.1283	85 05		sta $05				sta 	temp0+1
.1285	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1287	b1 78		lda ($78),y			lda 	(rsPointer),y
.1289	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.128b	f0 28		beq $12b5			beq 	_RString
.128d	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.128f	c9 25		cmp #$25			cmp 	#markerInt
.1291	f0 02		beq $1295			beq 	_RIsInteger
.1293	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1295					_RIsInteger:
.1295	8a		txa				txa
.1296	48		pha				pha
.1297	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1299					_RCopyBack:
.1299	b1 78		lda ($78),y			lda 	(rsPointer),y
.129b	88		dey				dey
.129c	88		dey				dey
.129d	88		dey				dey
.129e	91 04		sta ($04),y			sta 	(temp0),y
.12a0	c8		iny				iny
.12a1	c8		iny				iny
.12a2	c8		iny				iny
.12a3	c8		iny				iny
.12a4	ca		dex				dex
.12a5	d0 f2		bne $1299			bne 	_RCopyBack
.12a7	68		pla				pla 								; get size add 3
.12a8	18		clc				clc
.12a9	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.12ab					_RRestoreAAndLoop:
.12ab	20 cd 22	jsr $22cd			jsr 	RSFree
.12ae	68		pla				pla
.12af	a8		tay				tay
.12b0	68		pla				pla
.12b1	aa		tax				tax
.12b2	4c 6d 12	jmp $126d			jmp 	RestoreLocals 				; go see if there are any more locals.
.12b5					_RString:
.12b5	a2 00		ldx #$00			ldx 	#0
.12b7	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.12b9	b1 78		lda ($78),y			lda 	(rsPointer),y
.12bb	95 48		sta $48,x			sta 	esInt0,x
.12bd	c8		iny				iny
.12be	b1 78		lda ($78),y			lda 	(rsPointer),y
.12c0	95 50		sta $50,x			sta 	esInt1,x
.12c2	18		clc				clc
.12c3	a5 78		lda $78				lda 	rsPointer
.12c5	69 03		adc #$03			adc 	#3
.12c7	95 49		sta $49,x			sta 	esInt0+1,x
.12c9	a5 79		lda $79				lda 	rsPointer+1
.12cb	69 00		adc #$00			adc 	#0
.12cd	95 51		sta $51,x			sta 	esInt1+1,x
.12cf	8a		txa				txa
.12d0	a2 0c		ldx #$0c		ldx	#12
.12d2	20 8c 2b	jsr $2b8c		jsr	stringHandler
.12d5	a0 03		ldy #$03			ldy 	#3 							; get string length
.12d7	b1 78		lda ($78),y			lda 	(rsPointer),y
.12d9	18		clc				clc
.12da	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.12dc	4c ab 12	jmp $12ab			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.12df					Command_New:
.12df					Command_XNew:
.12df	20 1a 15	jsr $151a			jsr 	ResetCodeAddress 			; point to first line
.12e2	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.12e4	98		tya				tya
.12e5	91 02		sta ($02),y			sta 	(codePtr),y
.12e7	20 14 10	jsr $1014			jsr 	CommandClear 				; clear everything down.
.12ea	4c e6 16	jmp $16e6			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.12ed					Command_Poke:
.12ed	a9 01		lda #$01			lda 	#1
.12ef	d0 06		bne $12f7			bne 	PokeGeneral
.12f1					Command_Doke:
.12f1	a9 02		lda #$02			lda 	#2
.12f3	d0 02		bne $12f7			bne 	PokeGeneral
.12f5					Command_Loke:
.12f5	a9 03		lda #$03			lda 	#3
.12f7					PokeGeneral:
.12f7	48		pha				pha 								; save id (PDL = 123)
.12f8	20 86 1c	jsr $1c86			jsr 	EvaluateRootInteger 		; target address
.12fb	20 6a 22	jsr $226a			jsr	 	CheckComma
.12fe	e8		inx				inx
.12ff	20 88 1c	jsr $1c88			jsr 	EvaluateInteger 			; what value to POKE ?
.1302	ca		dex				dex
.1303	20 d4 11	jsr $11d4			jsr 	TOSToTemp0 					; temp0 points to the target address
.1306	84 0c		sty $0c				sty 	tempShort 					; save Y
.1308	68		pla				pla 								; get copy type (1-3) and dispatch
.1309	aa		tax				tax
.130a	ca		dex				dex
.130b	f0 14		beq $1321			beq 	_Poke1
.130d	ca		dex				dex
.130e	f0 0b		beq $131b			beq 	_Poke2
.1310	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1312	a5 61		lda $61				lda 	esInt3+1
.1314	91 04		sta ($04),y			sta 	(temp0),y
.1316	88		dey				dey
.1317	a5 59		lda $59				lda 	esInt2+1
.1319	91 04		sta ($04),y			sta 	(temp0),y
.131b					_Poke2:
.131b	a0 01		ldy #$01			ldy 	#1
.131d	a5 51		lda $51				lda 	esInt1+1
.131f	91 04		sta ($04),y			sta 	(temp0),y
.1321					_Poke1:
.1321	a0 00		ldy #$00			ldy 	#0
.1323	a5 49		lda $49				lda 	esInt0+1
.1325	91 04		sta ($04),y			sta 	(temp0),y
.1327	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1329	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0b12					lastPrintToken:
>0b12							.fill 	1
.132a					Command_Print:
.132a	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.132c	8d 12 0b	sta $0b12			sta 	lastPrintToken
.132f	88		dey				dey
.1330					_PrintLoopSkip:
.1330	c8		iny				iny
.1331					_PrintLoop:
.1331	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1333	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1335	f0 5b		beq $1392			beq 	_PrintExit
.1337	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.1339	f0 57		beq $1392			beq 	_PrintExit
.133b	8d 12 0b	sta $0b12			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.133e	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1340	f0 ee		beq $1330			beq 	_PrintLoopSkip
.1342	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.1344	f0 3c		beq $1382			beq	 	_PrintNewLine
.1346	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.1348	f0 40		beq $138a			beq 	_PrintTab
.134a	20 67 1c	jsr $1c67			jsr 	EvaluateRoot 				; evaluate something at the root
.134d	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.134f	85 04		sta $04				sta 	temp0
.1351	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1353	85 05		sta $05				sta 	1+(temp0)
.1355	a5 40		lda $40				lda 	esType 						; get type
.1357	f0 15		beq $136e			beq		_PrintInteger
.1359	4a		lsr a				lsr 	a 							; check for floating point
.135a	b0 08		bcs $1364			bcs 	_PrintFloat
.135c					_PrintString:
.135c	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.135e	20 d4 11	jsr $11d4			jsr 	TOSToTemp0
.1361	4c 7c 13	jmp $137c			jmp 	_PrintTemp0 				; print no leading space.
.1364					_PrintFloat:
.1364	a9 00		lda #$00			lda 	#0 							; stack level.
.1366	a2 14		ldx #$14		ldx	#20
.1368	20 28 27	jsr $2728		jsr	floatingpointHandler
.136b	4c 75 13	jmp $1375			jmp 	_PrintSpaceTemp0
.136e					_PrintInteger:
.136e	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1370	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1372	20 40 21	jsr $2140			jsr 	MInt32ToString				; convert to text
.1375					_PrintSpaceTemp0:
.1375	a9 20		lda #$20			lda 	#32
.1377	a2 12		ldx #$12		ldx	#18
.1379	20 d9 23	jsr $23d9		jsr	deviceHandler
.137c					_PrintTemp0:
.137c	20 a3 13	jsr $13a3			jsr 	PrintString
.137f	4c 31 13	jmp $1331			jmp 	_PrintLoop
.1382					_PrintNewLine:
.1382	a2 02		ldx #$02		ldx	#2
.1384	20 d9 23	jsr $23d9		jsr	deviceHandler
.1387	4c 30 13	jmp $1330			jmp 	_PrintLoopSkip
.138a					_PrintTab:
.138a	a2 16		ldx #$16		ldx	#22
.138c	20 d9 23	jsr $23d9		jsr	deviceHandler
.138f	4c 30 13	jmp $1330			jmp 	_PrintLoopSkip
.1392					_PrintExit:
.1392	ad 12 0b	lda $0b12			lda		lastPrintToken 				; check last token
.1395	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1397	f0 09		beq $13a2			beq 	_PrintExit2
.1399	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.139b	f0 05		beq $13a2			beq 	_PrintExit2
.139d	a2 02		ldx #$02		ldx	#2
.139f	20 d9 23	jsr $23d9		jsr	deviceHandler
.13a2					_PrintExit2:
.13a2	60		rts				rts
.13a3					PrintString:
.13a3	8a		txa				txa
.13a4	48		pha				pha
.13a5	98		tya				tya
.13a6	48		pha				pha
.13a7	a0 00		ldy #$00			ldy 	#0							; get length
.13a9	b1 04		lda ($04),y			lda 	(temp0),y
.13ab	aa		tax				tax 								; into X
.13ac	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.13ae	f0 10		beq $13c0			beq 	_PSExit
.13b0	ca		dex				dex
.13b1	8a		txa				txa
.13b2	48		pha				pha
.13b3	c8		iny				iny
.13b4	b1 04		lda ($04),y			lda 	(temp0),y
.13b6	a2 12		ldx #$12		ldx	#18
.13b8	20 d9 23	jsr $23d9		jsr	deviceHandler
.13bb	68		pla				pla
.13bc	aa		tax				tax
.13bd	4c ac 13	jmp $13ac			jmp 	_PSLoop
.13c0					_PSExit:
.13c0	68		pla				pla
.13c1	a8		tay				tay
.13c2	68		pla				pla
.13c3	aa		tax				tax
.13c4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0b13					paramCount:
>0b13							.fill 	1
.13c5					CallProc:
.13c5	20 0b 16	jsr $160b			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.13c8	48		pha				pha 								; save length on stack
.13c9	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.13cb	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.13cd	48		pha				pha
.13ce	a5 04		lda $04				lda 	temp0
.13d0	48		pha				pha
.13d1	98		tya				tya 								; calculate Y + length
.13d2	18		clc				clc
.13d3	65 0c		adc $0c				adc 	tempShort
.13d5	a8		tay				tay
.13d6	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.13d8					_CallProcEvalParams:
.13d8	e8		inx				inx
.13d9	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.13db	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.13dd	f0 0b		beq $13ea			beq 	_CPDoneParams
.13df	20 69 1c	jsr $1c69			jsr 	Evaluate 					; evaluate a parameter
.13e2	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.13e4	c8		iny				iny
.13e5	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.13e7	f0 ef		beq $13d8			beq 	_CallProcEvalParams
.13e9	88		dey				dey 								; undo consumption.
.13ea					_CPDoneParams:
.13ea	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check closing parenthesis.
.13ed	8e 13 0b	stx $0b13			stx 	paramCount 					; store parameter count+1
.13f0	a2 04		ldx #$04			ldx 	#4							; make space on stack
.13f2	a9 50		lda #$50			lda 	#markerPROC
.13f4	20 ab 22	jsr $22ab			jsr 	RSClaim
.13f7	a9 01		lda #$01			lda 	#1 							; store return address.
.13f9	20 d7 22	jsr $22d7			jsr 	RSSavePosition
.13fc	68		pla				pla 								; get the new code Ptr
.13fd	85 02		sta $02				sta 	codePtr
.13ff	68		pla				pla
.1400	85 03		sta $03				sta 	codePtr+1
.1402	68		pla				pla 								; length of name + 4 is the param start.
.1403	18		clc				clc
.1404	69 04		adc #$04			adc 	#4
.1406	a8		tay				tay
.1407	a2 ff		ldx #$ff			ldx 	#$FF
.1409					_CPLoadParameters:
.1409	e8		inx				inx 								; point to where the address should be loaded.
.140a	ec 13 0b	cpx $0b13			cpx 	paramCount 					; too many parameters in definition ?
.140d	f0 1e		beq $142d			beq 	_CPParamError
.140f	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1411	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.1413	f0 0e		beq $1423			beq 	_CPParamComplete 			; done all the parameters
.1415	20 fb 11	jsr $11fb			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1418	20 72 11	jsr $1172			jsr 	WriteValue 					; copy the evaluated parameter into there.
.141b	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.141d	c8		iny				iny
.141e	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1420	f0 e7		beq $1409			beq 	_CPLoadParameters
.1422	88		dey				dey 								; no, unconsume and check for )
.1423					_CPParamComplete:
.1423	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check )
.1426	e8		inx				inx 								; check right number of parameters
.1427	ec 13 0b	cpx $0b13			cpx 	paramCount
.142a	d0 01		bne $142d			bne 	_CPParamError
.142c	60		rts				rts
.142d					_CPParamError:
.142d	a2 18		ldx #$18			ldx 	#ErrorID_Params
.142f	20 f6 23	jsr $23f6		jsr	errorHandler
.1432					ReturnProc:
.1432	20 6d 12	jsr $126d			jsr 	RestoreLocals 				; get the locals back.
.1435	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1437	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1439	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.143b	f0 05		beq $1442			beq 	_isok
.143d	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.143f	20 f6 23	jsr $23f6		jsr	errorHandler
.1442					_isok:
.1442	a9 01		lda #$01			lda 	#1
.1444	20 ea 22	jsr $22ea			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1447	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1449	20 cd 22	jsr $22cd			jsr 	RSFree
.144c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0b14					dataPtr:
>0b14							.fill 	2
.0b16					dataIndex:
>0b16							.fill 	1
.144d					CommandRead:
.144d	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.144f	20 bb 1c	jsr $1cbb			jsr 	EvaluateReference
.1452	20 93 14	jsr $1493			jsr 	SwapDPCP 					; use the data pointer.
.1455	b1 02		lda ($02),y			lda 	(codePtr),y 				; see where it is.
.1457	c8		iny				iny
.1458	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.145a	f0 07		beq $1463			beq 	_CRInData
.145c	88		dey				dey
.145d	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.145f	aa		tax				tax
.1460	20 32 37	jsr $3732			jsr 	ScanForward
.1463					_CRInData:
.1463	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1465	20 69 1c	jsr $1c69			jsr 	Evaluate
.1468	ca		dex				dex 								; and write the value.
.1469	20 72 11	jsr $1172			jsr 	WriteValue
.146c	20 93 14	jsr $1493			jsr 	SwapDPCP 					; get the code pointer back.
.146f	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1471	c8		iny				iny
.1472	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.1474	f0 d7		beq $144d			beq 	CommandRead
.1476	88		dey				dey
.1477	60		rts				rts
.1478					CommandData:
.1478	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.147a	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.147c	20 32 37	jsr $3732			jsr 	ScanForward
.147f	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1480	60		rts				rts
.1481					CommandRestore:
.1481	ad c8 0a	lda $0ac8			lda 	basePage
.1484	8d 14 0b	sta $0b14			sta 	dataPtr
.1487	ad c9 0a	lda $0ac9			lda 	basePage+1
.148a	8d 15 0b	sta $0b15			sta 	dataPtr+1
.148d	a9 03		lda #$03			lda 	#3
.148f	8d 16 0b	sta $0b16			sta 	dataIndex
.1492	60		rts				rts
.1493					SwapDPCP:
.1493	8a		txa				txa
.1494	48		pha				pha
.1495	98		tya				tya 								; swap Y, DataIndex
.1496	ac 16 0b	ldy $0b16			ldy 	DataIndex
.1499	8d 16 0b	sta $0b16			sta 	DataIndex
.149c	a5 02		lda $02				lda 	codePtr 					; swap code/dataptr low
.149e	ae 14 0b	ldx $0b14			ldx 	dataptr
.14a1	8d 14 0b	sta $0b14			sta 	dataPtr
.14a4	86 02		stx $02				stx 	codePtr
.14a6	a5 03		lda $03				lda 	codePtr+1 					; swap code/dataptr high.
.14a8	ae 15 0b	ldx $0b15			ldx 	dataptr+1
.14ab	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14ae	86 03		stx $03				stx 	codePtr+1
.14b0	68		pla				pla
.14b1	aa		tax				tax
.14b2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.14b3					Command_Rem:
.14b3					Command_Rem2:
.14b3	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.14b5	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.14b7	d0 06		bne $14bf			bne 	_CRNotString
.14b9	c8		iny				iny
.14ba	98		tya				tya
.14bb	38		sec				sec
.14bc	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.14be	a8		tay				tay
.14bf					_CRNotString:
.14bf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.36c9					Command_Repeat:
.36c9	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.36cb	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.36cd	20 ab 22	jsr $22ab			jsr 	RSClaim
.36d0	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.36d2	20 d7 22	jsr $22d7			jsr 	RSSavePosition
.36d5	60		rts				rts
.36d6					Command_Until:
.36d6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.36d8	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.36da	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.36dc	f0 05		beq $36e3			beq 	_isok
.36de	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.36e0	20 f6 23	jsr $23f6		jsr	errorHandler
.36e3					_isok:
.36e3	20 86 1c	jsr $1c86			jsr 	EvaluateRootInteger 		; at the bottom.
.36e6	20 11 22	jsr $2211			jsr 	MInt32Zero					; check if TOS zero
.36e9	d0 06		bne $36f1			bne 	_CUExit
.36eb	a9 01		lda #$01			lda 	#1
.36ed	20 ea 22	jsr $22ea			jsr 	RSLoadPosition 				; reload the position from offset 1.
.36f0	60		rts				rts
.36f1					_CUExit:
.36f1	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.36f3	20 cd 22	jsr $22cd			jsr 	RSFree
.36f6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.14c0					Command_Run:
.14c0	a2 ff		ldx #$ff			ldx 	#$FF
.14c2	9a		txs				txs
.14c3	20 14 10	jsr $1014			jsr 	CommandClear 				; clear everything.
.14c6	20 1a 15	jsr $151a			jsr 	ResetCodeAddress 			; back to the start.
.14c9					Command_RunFrom:
.14c9	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.14cb					CRNextInstruction:
.14cb	64 7b		stz $7b				stz 	softMemAlloc+1
.14cd	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.14cf	10 1c		bpl $14ed			bpl 	_CRNotToken
.14d1	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.14d3	b0 0c		bcs $14e1			bcs 	_CRExecute
.14d5	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.14d7	b0 4e		bcs $1527			bcs 	Unimplemented
.14d9	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.14db	b0 04		bcs $14e1			bcs 	_CRExecute
.14dd	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.14df	b0 16		bcs $14f7			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.14e1					_CRExecute:
.14e1	c8		iny				iny 								; consume it.
.14e2	0a		asl a				asl 	a 							; double it, losing most significant bit.
.14e3	aa		tax				tax
.14e4	20 ea 14	jsr $14ea			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.14e7	4c cb 14	jmp $14cb			jmp 	CRNextInstruction
.14ea					_CRRunRoutine:
.14ea	7c 31 15	jmp ($1531,x)			jmp 	(Group0Vectors,x)
.14ed					_CRNotToken:
.14ed	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.14ef	b0 36		bcs $1527			bcs 	Unimplemented
.14f1					_CRDefaultLet:
.14f1	20 5f 11	jsr $115f			jsr 	CommandLet 					; do the default, LET
.14f4	4c cb 14	jmp $14cb			jmp 	CRNextInstruction
.14f7					_CRCheckIndirect:
.14f7	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.14f9	f0 f6		beq $14f1			beq 	_CRDefaultLet
.14fb	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.14fd	f0 f2		beq $14f1			beq 	_CRDefaultLet
.14ff	d0 26		bne $1527			bne 	Unimplemented
.1501					CommandShift1:
.1501	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1503	10 22		bpl $1527			bpl 	Unimplemented 				; we have an error as this should not happen.
.1505	0a		asl a				asl 	a 							; double into X
.1506	aa		tax				tax
.1507	c8		iny				iny 								; advance over it.
.1508	20 0e 15	jsr $150e			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.150b	4c cb 14	jmp $14cb			jmp 	CRNextInstruction
.150e					_RunIt:
.150e	7c e9 15	jmp ($15e9,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1511					CommandShift2:
.1511	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1513	20 9d 26	jsr $269d		jsr	extensionHandler
.1516	4c cb 14	jmp $14cb			jmp 	CRNextInstruction
.1519					CommandColon:
.1519	60		rts				rts
.151a					ResetCodeAddress:
.151a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.151d	85 02		sta $02				sta 	codePtr
.151f	ad c9 0a	lda $0ac9			lda 	basePage+1
.1522	85 03		sta $03				sta 	codePtr+1
.1524	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1526	60		rts				rts
.1527					Unimplemented:
.1527	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1529	20 f6 23	jsr $23f6		jsr	errorHandler
.152c					TKErr01:
.152c					TKErr02:
.152c					TKErr03:
.152c					TKErr04:
.152c					TKErr05:
.152c					TKErr06:
.152c					TKErr07:
.152c					TKErr08:
.152c					TKErr09:
.152c					TKErr10:
.152c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.152e	20 f6 23	jsr $23f6		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1531					Group0Vectors:
>1531	ec 16					.word	AdvanceNextLine          ; $80 [[eol]]
>1533	01 15					.word	CommandShift1            ; $81 [[sh1]]
>1535	11 15					.word	CommandShift2            ; $82 [[sh2]]
>1537	2c 15					.word	TKErr09                  ; $83 [[sh3]]
>1539	2c 15					.word	TKErr10                  ; $84 [[fpc]]
>153b	2c 15					.word	TKErr08                  ; $85 [[str]]
>153d	75 18					.word	AndHandler               ; $86 and
>153f	62 18					.word	OrHandler                ; $87 or
>1541	4f 18					.word	XorHandler               ; $88 xor
>1543	97 19					.word	CompareGreaterEq         ; $89 >=
>1545	a1 19					.word	CompareLessEq            ; $8a <=
>1547	83 19					.word	CompareGreater           ; $8b >
>1549	79 19					.word	CompareLess              ; $8c <
>154b	6f 19					.word	CompareEquals            ; $8d =
>154d	8d 19					.word	CompareNotEquals         ; $8e <>
>154f	e0 17					.word	AddHandler               ; $8f +
>1551	03 18					.word	SubHandler               ; $90 -
>1553	9b 18					.word	ShrHandler               ; $91 >>
>1555	88 18					.word	ShlHandler               ; $92 <<
>1557	16 18					.word	MulHandler               ; $93 *
>1559	29 18					.word	DivHandler               ; $94 /
>155b	3c 18					.word	ModHandler               ; $95 mod
>155d	d4 18					.word	PowerHandler             ; $96 ^
>155f	ae 18					.word	WordRefHandler           ; $97 !
>1561	c1 18					.word	ByteRefHandler           ; $98 ?
>1563	c9 36					.word	Command_Repeat           ; $99 repeat
>1565	f7 36					.word	Command_While            ; $9a while
>1567	38 35					.word	Command_FOR              ; $9b for
>1569	72 10					.word	CommandIf                ; $9c if
>156b	2c 15					.word	TKErr04                  ; $9d defproc
>156d	d6 36					.word	Command_Until            ; $9e until
>156f	1a 37					.word	Command_Wend             ; $9f wend
>1571	99 35					.word	Command_NEXT             ; $a0 next
>1573	2c 15					.word	TKErr06                  ; $a1 then
>1575	ad 10					.word	Command_ENDIF            ; $a2 endif
>1577	32 14					.word	ReturnProc               ; $a3 endproc
>1579	70 1b					.word	UnaryParenthesis         ; $a4 (
>157b	ce 1c					.word	UnaryLen                 ; $a5 len(
>157d	12 1d					.word	UnarySgn                 ; $a6 sgn(
>157f	fb 1c					.word	UnaryAbs                 ; $a7 abs(
>1581	6b 1d					.word	Unary_Random             ; $a8 random(
>1583	b5 1d					.word	Unary_Page               ; $a9 page
>1585	e6 21					.word	MInt32True               ; $aa true
>1587	ea 21					.word	MInt32False              ; $ab false
>1589	80 1d					.word	Unary_Min                ; $ac min(
>158b	84 1d					.word	Unary_Max                ; $ad max(
>158d	6f 1e					.word	UnarySys                 ; $ae sys(
>158f	32 1e					.word	UnaryTimer               ; $af timer(
>1591	c5 1b					.word	EventFunction            ; $b0 event(
>1593	5b 1e					.word	UnaryGet                 ; $b1 get(
>1595	4b 1e					.word	UnaryInkey               ; $b2 inkey(
>1597	06 1e					.word	UnaryAlloc               ; $b3 alloc(
>1599	97 1e					.word	ExecChr                  ; $b4 chr$(
>159b	c7 1e					.word	ExecLeft                 ; $b5 left$(
>159d	e4 1e					.word	ExecMid                  ; $b6 mid$(
>159f	0c 1f					.word	ExecRight                ; $b7 right$(
>15a1	b1 19					.word	Event_Str                ; $b8 str$(
>15a3	e0 19					.word	UnaryVal                 ; $b9 val(
>15a5	29 1d					.word	UnaryPeek                ; $ba peek(
>15a7	2f 1d					.word	UnaryDeek                ; $bb deek(
>15a9	35 1d					.word	UnaryLeek                ; $bc leek(
>15ab	ec 1c					.word	UnaryAsc                 ; $bd asc(
>15ad	e0 1d					.word	UnaryIntToFloat          ; $be int(
>15af	f3 1d					.word	UnaryFloatToInt          ; $bf float(
>15b1	e3 19					.word	UnaryIsVal               ; $c0 isval(
>15b3	ae 1e					.word	ExecUpper                ; $c1 upper$(
>15b5	ab 1e					.word	ExecLower                ; $c2 lower$(
>15b7	c3 1d					.word	UnaryReference           ; $c3 @
>15b9	d9 1d					.word	UnaryComplement          ; $c4 ~
>15bb	d6 1d					.word	UnaryHexMarker           ; $c5 &
>15bd	2c 15					.word	TKErr01                  ; $c6 )
>15bf	19 15					.word	CommandColon             ; $c7 :
>15c1	2c 15					.word	TKErr02                  ; $c8 ,
>15c3	2c 15					.word	TKErr03                  ; $c9 ;
>15c5	b3 14					.word	Command_Rem2             ; $ca '
>15c7	2c 15					.word	TKErr07                  ; $cb to
>15c9	2c 15					.word	TKErr05                  ; $cc step
>15cb	c5 13					.word	CallProc                 ; $cd proc
>15cd	dd 11					.word	CommandLocal             ; $ce local
>15cf	64 10					.word	Command_Dim              ; $cf dim
>15d1	b3 14					.word	Command_Rem              ; $d0 rem
>15d3	5f 11					.word	CommandLet               ; $d1 let
>15d5	ae 10					.word	Command_Input            ; $d2 input
>15d7	a7 10					.word	Command_ELSE             ; $d3 else
>15d9	93 17					.word	Command_VDU              ; $d4 vdu
>15db	2a 13					.word	Command_Print            ; $d5 print
>15dd	61 17					.word	CommandGOTO              ; $d6 goto
>15df	36 17					.word	CommandGOSUB             ; $d7 gosub
>15e1	49 17					.word	CommandRETURN            ; $d8 return
>15e3	78 14					.word	CommandData              ; $d9 data
>15e5	06 10					.word	Command_Assert           ; $da assert
>15e7	ed 12					.word	Command_Poke             ; $db poke
>15e9	f1 12					.word	Command_Doke             ; $dc doke
>15eb	f5 12					.word	Command_Loke             ; $dd loke
>15ed	06 17					.word	Command_Ink              ; $de ink
>15ef	11 17					.word	Command_Paper            ; $df paper
>15f1	00 17					.word	Command_CLS              ; $e0 cls
>15f3	1c 17					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.15f5					Group1Vectors:
>15f5	14 10					.word	CommandClear             ; $86 clear
>15f7	27 15					.word	Unimplemented            ; $87 load
>15f9	27 15					.word	Unimplemented            ; $88 save
>15fb	47 36					.word	CommandList              ; $89 list
>15fd	df 12					.word	Command_New              ; $8a new
>15ff	c0 14					.word	Command_Run              ; $8b run
>1601	4d 14					.word	CommandRead              ; $8c read
>1603	81 14					.word	CommandRestore           ; $8d restore
>1605	e6 16					.word	CommandEnd               ; $8e end
>1607	e1 16					.word	CommandStop              ; $8f stop
>1609	e9 16					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0b17					procList:
>0b17							.fill 	2		 					; terminated by name high.
.0b19					yInLine:
>0b19							.fill 	1
.160b					FindProcedure:
.160b	8c 19 0b	sty $0b19			sty 	yInLine
.160e	20 c9 16	jsr $16c9			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1611	85 06		sta $06				sta 	temp1
.1613	ad 17 0b	lda $0b17			lda		procList 					; put procList address in temp2
.1616	85 08		sta $08				sta 	temp2
.1618	ad 18 0b	lda $0b18			lda 	procList+1
.161b	85 09		sta $09				sta 	temp2+1
.161d	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.161f					_FPLoop:
.161f	b1 08		lda ($08),y			lda 	(temp2),y
.1621	f0 4f		beq $1672			beq 	_FPError 					; if so, we don't know this procedure.
.1623	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1625	c8		iny				iny
.1626	b1 08		lda ($08),y			lda 	(temp2),y
.1628	85 04		sta $04				sta 	temp0
.162a	c8		iny				iny
.162b	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.162d	c5 06		cmp $06				cmp 	temp1
.162f	d0 2b		bne $165c			bne 	_FPNext 					; hash is different, go to next.
.1631	38		sec				sec
.1632	ad 19 0b	lda $0b19			lda 	yInLine 					; position in line must be at least 4
.1635	e9 04		sbc #$04			sbc 	#4
.1637	18		clc				clc
.1638	65 02		adc $02				adc 	codePtr
.163a	85 0a		sta $0a				sta 	temp3
.163c	a5 03		lda $03				lda 	codePtr+1
.163e	69 00		adc #$00			adc 	#0
.1640	85 0b		sta $0b				sta 	temp3+1
.1642	98		tya				tya
.1643	48		pha				pha
.1644	a0 04		ldy #$04			ldy 	#4
.1646					_FPCName:
.1646	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.1648	d1 04		cmp ($04),y			cmp 	(temp0),y
.164a	d0 0e		bne $165a			bne 	_FPpulYNext 				; if different go to next one.
.164c	c8		iny				iny
.164d	c9 3a		cmp #$3a			cmp 	#$3A
.164f	90 f5		bcc $1646			bcc 	_FPCName 					; compare the whole lot....
.1651	68		pla				pla 								; throw away the saved Y
.1652	98		tya				tya 								; length of name is Y-4
.1653	38		sec				sec
.1654	e9 04		sbc #$04			sbc 	#4
.1656	ac 19 0b	ldy $0b19			ldy 	yInLine  					; get the original Y back
.1659	60		rts				rts
.165a					_FPpulYNext:
.165a	68		pla				pla
.165b	a8		tay				tay
.165c					_FPNext:
.165c	c8		iny				iny 								; next procedure record.
.165d	10 c0		bpl $161f			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.165f	98		tya				tya 								; subtract 128 from Y
.1660	38		sec				sec
.1661	e9 80		sbc #$80			sbc 	#128
.1663	a8		tay				tay
.1664	18		clc				clc 								; add 128 to temp2, so we can have more than
.1665	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.1667	69 80		adc #$80			adc 	#128
.1669	85 08		sta $08				sta 	temp2
.166b	90 b2		bcc $161f			bcc 	_FPLoop
.166d	e6 09		inc $09				inc 	temp2+1
.166f	4c 1f 16	jmp $161f			jmp 	_FPLoop
.1672					_FPError:
.1672	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1674	20 f6 23	jsr $23f6		jsr	errorHandler
.1677					ScanProc:
.1677	98		tya				tya
.1678	48		pha				pha
.1679	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.167b	8d 17 0b	sta $0b17			sta 	procList
.167e	a5 10		lda $10				lda 	lowMemory+1
.1680	8d 18 0b	sta $0b18			sta 	procList+1
.1683	20 1a 15	jsr $151a			jsr 	ResetCodeAddress 			; back to the start.
.1686					_ScanLoop:
.1686	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1688	b1 02		lda ($02),y			lda 	(codePtr),y
.168a	f0 2a		beq $16b6			beq 	_ScanExit
.168c	a0 03		ldy #$03			ldy 	#3							; get first token
.168e	b1 02		lda ($02),y			lda 	(codePtr),y
.1690	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.1692	d0 12		bne $16a6			bne 	_ScanNext
.1694	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.1696	20 be 16	jsr $16be			jsr 	_ScanWrite
.1699	a5 02		lda $02				lda 	codePtr
.169b	20 be 16	jsr $16be			jsr 	_ScanWrite
.169e	a0 04		ldy #$04			ldy 	#4 							; start of name part
.16a0	20 c9 16	jsr $16c9			jsr 	CalculateProcedureHash 		; calculate procedure hash
.16a3	20 be 16	jsr $16be			jsr 	_ScanWrite
.16a6					_ScanNext:
.16a6	18		clc				clc
.16a7	a0 00		ldy #$00			ldy 	#0
.16a9	b1 02		lda ($02),y			lda 	(codePtr),y
.16ab	65 02		adc $02				adc 	codePtr
.16ad	85 02		sta $02				sta 	codePtr
.16af	90 d5		bcc $1686			bcc 	_ScanLoop
.16b1	e6 03		inc $03				inc 	codePtr+1
.16b3	4c 86 16	jmp $1686			jmp 	_ScanLoop
.16b6					_ScanExit:
.16b6	a9 00		lda #$00			lda 	#0 							; write ending zero.
.16b8	20 be 16	jsr $16be			jsr 	_ScanWrite
.16bb	68		pla				pla
.16bc	a8		tay				tay
.16bd	60		rts				rts
.16be					_ScanWrite:
.16be	a0 00		ldy #$00			ldy 	#0
.16c0	91 0f		sta ($0f),y			sta 	(lowMemory),y
.16c2	e6 0f		inc $0f				inc 	lowMemory
.16c4	d0 02		bne $16c8			bne 	_SWNoCarry
.16c6	e6 10		inc $10				inc 	lowMemory+1
.16c8					_SWNoCarry:
.16c8	60		rts				rts
.16c9					CalculateProcedureHash:
.16c9	a9 00		lda #$00			lda 	#0 							; clear hash.
.16cb	85 04		sta $04				sta 	temp0
.16cd					_CPHLoop:
.16cd	18		clc				clc 								; add character and rotate and add carry back in
.16ce	b1 02		lda ($02),y			lda 	(codePtr),y
.16d0	65 04		adc $04				adc 	temp0
.16d2	6a		ror a				ror 	a
.16d3	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.16d5	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.16d7	b1 02		lda ($02),y			lda 	(codePtr),y
.16d9	c8		iny				iny 								; advance incase we go round again.
.16da	c9 3a		cmp #$3a			cmp 	#$3A
.16dc	90 ef		bcc $16cd			bcc 	_CPHLoop
.16de	a5 04		lda $04				lda 	temp0
.16e0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.16e1					CommandStop:
.16e1	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.16e3	20 f6 23	jsr $23f6		jsr	errorHandler
.16e6					CommandEnd:
.16e6	4c 98 22	jmp $2298			jmp 	WarmStart
.16e9					CommandXemu:
.16e9	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.16ec					AdvanceNextLine:
.16ec	a0 00		ldy #$00			ldy 	#0 							; get offset
.16ee	b1 02		lda ($02),y			lda 	(codePtr),y
.16f0	18		clc				clc 								; add to codePtr
.16f1	65 02		adc $02				adc 	codePtr
.16f3	85 02		sta $02				sta 	codePtr
.16f5	90 02		bcc $16f9			bcc 	_ANLNoCarry
.16f7	e6 03		inc $03				inc 	codePtr+1
.16f9					_ANLNoCarry:
.16f9	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.16fb	f0 e9		beq $16e6			beq 	CommandEnd 					; execute END
.16fd	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.16ff	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1700					Command_CLS:
.1700	a2 00		ldx #$00		ldx	#0
.1702	20 d9 23	jsr $23d9		jsr	deviceHandler
.1705	60		rts				rts
.1706					Command_Ink:
.1706	a2 00		ldx #$00			ldx 	#0
.1708	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger
.170b	a2 06		ldx #$06		ldx	#6
.170d	20 d9 23	jsr $23d9		jsr	deviceHandler
.1710	60		rts				rts
.1711					Command_Paper:
.1711	a2 00		ldx #$00			ldx 	#0
.1713	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger
.1716	a2 10		ldx #$10		ldx	#16
.1718	20 d9 23	jsr $23d9		jsr	deviceHandler
.171b	60		rts				rts
.171c					Command_Locate:
.171c	a2 00		ldx #$00			ldx 	#0
.171e	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger
.1721	20 6a 22	jsr $226a			jsr 	CheckComma
.1724	e8		inx				inx
.1725	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger
.1728	98		tya				tya
.1729	48		pha				pha
.172a	a4 49		ldy $49				ldy 	esInt0+1
.172c	a5 48		lda $48				lda 	esInt0
.172e	a2 0e		ldx #$0e		ldx	#14
.1730	20 d9 23	jsr $23d9		jsr	deviceHandler
.1733	68		pla				pla
.1734	a8		tay				tay
.1735	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1736					CommandGOSUB:
.1736	20 86 1c	jsr $1c86			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1739	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.173b	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.173d	20 ab 22	jsr $22ab			jsr 	RSClaim
.1740	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1742	20 d7 22	jsr $22d7			jsr 	RSSavePosition
.1745	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1747	f0 1b		beq $1764			beq 	GotoTOS 					; and do a GOTO there.
.1749					CommandRETURN:
.1749	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.174b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.174d	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.174f	f0 05		beq $1756			beq 	_isok
.1751	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1753	20 f6 23	jsr $23f6		jsr	errorHandler
.1756					_isok:
.1756	a9 01		lda #$01			lda 	#1
.1758	20 ea 22	jsr $22ea			jsr 	RSLoadPosition 				; reload the position from offset 1.
.175b	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.175d	20 cd 22	jsr $22cd			jsr 	RSFree
.1760	60		rts				rts
.1761					CommandGOTO:
.1761	20 86 1c	jsr $1c86			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1764					GotoTOS:
.1764	20 1a 15	jsr $151a			jsr 	ResetCodeAddress 			; simple search.
.1767					_GotoSearch:
.1767	a0 00		ldy #$00			ldy 	#0 							; get offset
.1769	b1 02		lda ($02),y			lda 	(codePtr),y
.176b	f0 21		beq $178e			beq 	_GotoError 					; not found.
.176d	c8		iny				iny									; check LSB match
.176e	b1 02		lda ($02),y			lda 	(codePtr),y
.1770	d5 48		cmp $48,x			cmp 	esInt0,x
.1772	d0 07		bne $177b			bne 	_GotoNext
.1774	c8		iny				iny
.1775	b1 02		lda ($02),y			lda 	(codePtr),y
.1777	d5 50		cmp $50,x			cmp 	esInt1,x
.1779	f0 10		beq $178b			beq 	_GotoFound
.177b					_GotoNext:
.177b	a0 00		ldy #$00			ldy 	#0 							; go next line
.177d	b1 02		lda ($02),y			lda 	(codePtr),y
.177f	18		clc				clc
.1780	65 02		adc $02				adc 	codePtr
.1782	85 02		sta $02				sta 	codePtr
.1784	90 e1		bcc $1767			bcc 	_GotoSearch
.1786	e6 03		inc $03				inc 	codePtr+1
.1788	4c 67 17	jmp $1767			jmp 	_GotoSearch
.178b					_GotoFound:
.178b	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.178d	60		rts				rts
.178e					_GotoError:
.178e	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1790	20 f6 23	jsr $23f6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.1793					Command_VDU:
.1793	20 86 1c	jsr $1c86			jsr 	EvaluateRootInteger 			; get integer at root.
.1796	a5 48		lda $48				lda 	esInt0
.1798	a2 12		ldx #$12		ldx	#18
.179a	20 d9 23	jsr $23d9		jsr	deviceHandler
.179d					_CVNext:
.179d	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.179f	c8		iny				iny
.17a0	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.17a2	f0 ef		beq $1793			beq 	Command_VDU
.17a4	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.17a6	d0 0a		bne $17b2			bne 	_CVExit
.17a8	a5 50		lda $50				lda 	esInt1
.17aa	a2 12		ldx #$12		ldx	#18
.17ac	20 d9 23	jsr $23d9		jsr	deviceHandler
.17af	4c 9d 17	jmp $179d			jmp 	_CVNext
.17b2	88		dey		_CVExit:dey
.17b3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.36f7					Command_While:
.36f7	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.36f9	a2 04		ldx #$04			ldx 	#4
.36fb	20 ab 22	jsr $22ab			jsr 	RSClaim 					; create on stack.
.36fe	88		dey				dey
.36ff	a9 01		lda #$01			lda 	#1
.3701	20 d7 22	jsr $22d7			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.3704	c8		iny				iny
.3705	20 88 1c	jsr $1c88			jsr 	EvaluateInteger				; get the conditional
.3708	20 11 22	jsr $2211			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.370b	f0 01		beq $370e			beq 	_CWFail
.370d	60		rts				rts
.370e					_CWFail:
.370e	a9 04		lda #$04			lda 	#4
.3710	20 cd 22	jsr $22cd			jsr 	RSFree 						; close the just opened position.
.3713	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.3715	aa		tax				tax
.3716	20 32 37	jsr $3732			jsr 	ScanForward
.3719	60		rts				rts
.371a					Command_Wend:
.371a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.371c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.371e	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.3720	f0 05		beq $3727			beq 	_isok
.3722	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.3724	20 f6 23	jsr $23f6		jsr	errorHandler
.3727					_isok:
.3727	a9 01		lda #$01			lda 	#1
.3729	20 ea 22	jsr $22ea			jsr 	RSLoadPosition				; go back until true
.372c	a9 04		lda #$04			lda 	#4
.372e	20 cd 22	jsr $22cd			jsr 	RSFree 						; close the loop
.3731	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.17b4					BinaryProcess:
.17b4	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.17b6	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.17b8	0a		asl a				asl 	a
.17b9	30 0e		bmi $17c9			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.17bb	18		clc				clc 								; return CC for integer
.17bc	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.17be	f0 08		beq $17c8			beq 	_BPExit 					; if both integer then return with CC.
.17c0	20 ce 17	jsr $17ce			jsr 	BPMakeBothFloat 			; make both float
.17c3	a9 01		lda #$01			lda 	#$01 						; set result type to float
.17c5	95 40		sta $40,x			sta 	esType,x
.17c7	38		sec				sec 								; and return with carry set.
.17c8					_BPExit:
.17c8	60		rts				rts
.17c9					_BPStringType:
.17c9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.17cb	20 f6 23	jsr $23f6		jsr	errorHandler
.17ce					BPMakeBothFloat:
.17ce	e8		inx				inx
.17cf	20 d3 17	jsr $17d3			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.17d2	ca		dex				dex
.17d3					BPMakeFloat:
.17d3	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.17d5	4a		lsr a				lsr 	a
.17d6	b0 07		bcs $17df			bcs 	_BPIsFloat 					; already a float if set.
.17d8	8a		txa				txa
.17d9	a2 1a		ldx #$1a		ldx	#26
.17db	20 28 27	jsr $2728		jsr	floatingpointHandler
.17de	aa		tax				tax
.17df					_BPIsFloat:
.17df	60		rts				rts
.17e0					AddHandler:
.17e0	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo 				; dereference top two on stack.
.17e3	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.17e5	35 41		and $41,x			and 	esType+1,x
.17e7	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.17e9	d0 10		bne $17fb			bne 	_AHStringConcat				; concatenate strings.
.17eb	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.17ee	b0 03		bcs $17f3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17f0	4c ce 20	jmp $20ce			jmp 	MInt32Add 							; else do it as integer.
.17f3					_IsFPOperation:
.17f3	8a		txa				txa 								; call the relevant fp routine
.17f4	a2 02		ldx #$02		ldx	#2
.17f6	20 28 27	jsr $2728		jsr	floatingpointHandler
.17f9	aa		tax				tax
.17fa	60		rts				rts
.17fb					_AHStringConcat:
.17fb	8a		txa				txa 								; handled by the string module.
.17fc	a2 04		ldx #$04		ldx	#4
.17fe	20 8c 2b	jsr $2b8c		jsr	stringHandler
.1801	aa		tax				tax
.1802	60		rts				rts
.1803					SubHandler:
.1803	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.1806	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.1809	b0 03		bcs $180e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.180b	4c e8 20	jmp $20e8			jmp 	MInt32Sub 							; else do it as integer.
.180e					_IsFPOperation:
.180e	8a		txa				txa 								; call the relevant fp routine
.180f	a2 10		ldx #$10		ldx	#16
.1811	20 28 27	jsr $2728		jsr	floatingpointHandler
.1814	aa		tax				tax
.1815	60		rts				rts
.1816					MulHandler:
.1816	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.1819	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.181c	b0 03		bcs $1821			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.181e	4c 02 21	jmp $2102			jmp 	MInt32Multiply 							; else do it as integer.
.1821					_IsFPOperation:
.1821	8a		txa				txa 								; call the relevant fp routine
.1822	a2 0a		ldx #$0a		ldx	#10
.1824	20 28 27	jsr $2728		jsr	floatingpointHandler
.1827	aa		tax				tax
.1828	60		rts				rts
.1829					DivHandler:
.1829	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.182c	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.182f	b0 03		bcs $1834			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1831	4c bf 1f	jmp $1fbf			jmp 	MInt32SDivide 							; else do it as integer.
.1834					_IsFPOperation:
.1834	8a		txa				txa 								; call the relevant fp routine
.1835	a2 06		ldx #$06		ldx	#6
.1837	20 28 27	jsr $2728		jsr	floatingpointHandler
.183a	aa		tax				tax
.183b	60		rts				rts
.183c					ModHandler:
.183c	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.183f	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.1842	b0 03		bcs $1847			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1844	4c 3d 20	jmp $203d			jmp 	MInt32Modulus 							; else do it as integer.
.1847					_IsFPOperation:
.1847	8a		txa				txa 								; call the relevant fp routine
.1848	a2 08		ldx #$08		ldx	#8
.184a	20 28 27	jsr $2728		jsr	floatingpointHandler
.184d	aa		tax				tax
.184e	60		rts				rts
.184f					XorHandler:
.184f	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.1852	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.1855	b0 03		bcs $185a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1857	4c 71 1f	jmp $1f71			jmp 	MInt32Xor 							; else do it as integer.
.185a					_IsFPOperation:
.185a	8a		txa				txa 								; call the relevant fp routine
.185b	a2 08		ldx #$08		ldx	#8
.185d	20 28 27	jsr $2728		jsr	floatingpointHandler
.1860	aa		tax				tax
.1861	60		rts				rts
.1862					OrHandler:
.1862	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.1865	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.1868	b0 03		bcs $186d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.186a	4c 58 1f	jmp $1f58			jmp 	MInt32Or 							; else do it as integer.
.186d					_IsFPOperation:
.186d	8a		txa				txa 								; call the relevant fp routine
.186e	a2 08		ldx #$08		ldx	#8
.1870	20 28 27	jsr $2728		jsr	floatingpointHandler
.1873	aa		tax				tax
.1874	60		rts				rts
.1875					AndHandler:
.1875	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.1878	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.187b	b0 03		bcs $1880			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.187d	4c 3f 1f	jmp $1f3f			jmp 	MInt32And 							; else do it as integer.
.1880					_IsFPOperation:
.1880	8a		txa				txa 								; call the relevant fp routine
.1881	a2 08		ldx #$08		ldx	#8
.1883	20 28 27	jsr $2728		jsr	floatingpointHandler
.1886	aa		tax				tax
.1887	60		rts				rts
.1888					ShlHandler:
.1888	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.188b	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.188e	b0 03		bcs $1893			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1890	4c 09 19	jmp $1909			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.1893					_IsFPOperation:
.1893	8a		txa				txa 								; call the relevant fp routine
.1894	a2 08		ldx #$08		ldx	#8
.1896	20 28 27	jsr $2728		jsr	floatingpointHandler
.1899	aa		tax				tax
.189a	60		rts				rts
.189b					ShrHandler:
.189b	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.189e	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.18a1	b0 03		bcs $18a6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18a3	4c 0c 19	jmp $190c			jmp 	MInt32ShiftRightX 							; else do it as integer.
.18a6					_IsFPOperation:
.18a6	8a		txa				txa 								; call the relevant fp routine
.18a7	a2 08		ldx #$08		ldx	#8
.18a9	20 28 27	jsr $2728		jsr	floatingpointHandler
.18ac	aa		tax				tax
.18ad	60		rts				rts
.18ae					WordRefHandler:
.18ae	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.18b1	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.18b4	b0 03		bcs $18b9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18b6	4c fb 18	jmp $18fb			jmp 	MInt32WordIndirect 							; else do it as integer.
.18b9					_IsFPOperation:
.18b9	8a		txa				txa 								; call the relevant fp routine
.18ba	a2 08		ldx #$08		ldx	#8
.18bc	20 28 27	jsr $2728		jsr	floatingpointHandler
.18bf	aa		tax				tax
.18c0	60		rts				rts
.18c1					ByteRefHandler:
.18c1	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.18c4	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.18c7	b0 03		bcs $18cc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18c9	4c ff 18	jmp $18ff			jmp 	MInt32ByteIndirect 							; else do it as integer.
.18cc					_IsFPOperation:
.18cc	8a		txa				txa 								; call the relevant fp routine
.18cd	a2 08		ldx #$08		ldx	#8
.18cf	20 28 27	jsr $2728		jsr	floatingpointHandler
.18d2	aa		tax				tax
.18d3	60		rts				rts
.18d4					PowerHandler:
.18d4	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo
.18d7	20 b4 17	jsr $17b4			jsr 	BinaryProcess 				; check to see if either is float
.18da	b0 03		bcs $18df			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18dc	4c e7 18	jmp $18e7			jmp 	PowerInteger 							; else do it as integer.
.18df					_IsFPOperation:
.18df	8a		txa				txa 								; call the relevant fp routine
.18e0	a2 16		ldx #$16		ldx	#22
.18e2	20 28 27	jsr $2728		jsr	floatingpointHandler
.18e5	aa		tax				tax
.18e6	60		rts				rts
.18e7					PowerInteger:
.18e7	20 ce 17	jsr $17ce			jsr 	BPMakeBothFloat				; make them float.
.18ea	8a		txa				txa
.18eb	a2 16		ldx #$16		ldx	#22
.18ed	20 28 27	jsr $2728		jsr	floatingpointHandler
.18f0	a2 12		ldx #$12		ldx	#18
.18f2	20 28 27	jsr $2728		jsr	floatingpointHandler
.18f5	aa		tax				tax
.18f6	a9 00		lda #$00			lda 	#0 							; make type integer
.18f8	95 40		sta $40,x			sta 	esType,x
.18fa	60		rts				rts
.18fb					Mint32WordIndirect:
.18fb	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.18fd	d0 02		bne $1901			bne 	Min32Indirect
.18ff					Mint32ByteIndirect:
.18ff	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.1901					Min32Indirect:
.1901	48		pha				pha 								; save the indirection
.1902	20 ce 20	jsr $20ce			jsr 	MInt32Add 					; add a!b a?b
.1905	68		pla				pla 								; and set the type to reference.
.1906	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.1908	60		rts				rts
.1909					Mint32ShiftLeftX:
.1909	18		clc				clc 								; CC shift left
.190a	90 01		bcc $190d			bcc 	Mint32Shift
.190c					Mint32ShiftRightX:
.190c	38		sec				sec 								; CS shift right
.190d					Mint32Shift:
.190d	08		php				php 								; save carry flag on stack.
.190e	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1910	15 59		ora $59,x			ora 	esInt2+1,x
.1912	15 61		ora $61,x			ora 	esInt3+1,x
.1914	d0 1e		bne $1934			bne 	_MShiftZero
.1916	b5 49		lda $49,x			lda 	esInt0+1,x
.1918	c9 20		cmp #$20			cmp 	#32
.191a	b0 18		bcs $1934			bcs 	_MShiftZero
.191c					_MShiftLoop:
.191c	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.191e	f0 12		beq $1932			beq 	_MShiftExit
.1920	d6 49		dec $49,x			dec 	esInt0+1,x
.1922	28		plp				plp 								; restore and save carry
.1923	08		php				php
.1924	90 06		bcc $192c			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.1926	20 08 22	jsr $2208			jsr 	Mint32ShiftRight
.1929	4c 1c 19	jmp $191c			jmp 	_MShiftLoop
.192c					_MShiftLeft:
.192c	20 ff 21	jsr $21ff			jsr 	Mint32ShiftLeft
.192f	4c 1c 19	jmp $191c			jmp 	_MShiftLoop
.1932					_MShiftExit:
.1932	28		plp				plp	 								; throw saved carry and exit
.1933	60		rts				rts
.1934					_MShiftZero:
.1934	4c ea 21	jmp $21ea			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.1937					PerformComparison:
.1937	20 2f 1a	jsr $1a2f			jsr 	DereferenceTwo 				; make both values.
.193a	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.193c	35 41		and $41,x			and 	esType+1,x
.193e	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.193f	30 1d		bmi $195e			bmi 	_PCIsString
.1941	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1943	15 41		ora $41,x			ora 	esType+1,x
.1945	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.1946	30 22		bmi $196a			bmi 	_PCError
.1948	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.194a	f0 0f		beq $195b			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.194c	20 ce 17	jsr $17ce			jsr 	BPMakeBothFloat 			; make both float
.194f	8a		txa				txa
.1950	a2 04		ldx #$04		ldx	#4
.1952	20 28 27	jsr $2728		jsr	floatingpointHandler
.1955	86 0c		stx $0c				stx 	tempShort 					; save result
.1957	aa		tax				tax
.1958	a5 0c		lda $0c				lda 	tempShort
.195a	60		rts				rts
.195b					_PCIsInteger:
.195b	4c 8a 1f	jmp $1f8a			jmp 	MInt32Compare
.195e					_PCIsString:
.195e	8a		txa				txa 								; A has SP
.195f	a2 06		ldx #$06		ldx	#6
.1961	20 8c 2b	jsr $2b8c		jsr	stringHandler
.1964	86 0c		stx $0c				stx 	tempShort 					; save result
.1966	aa		tax				tax 								; put SP back in X and get result.
.1967	a5 0c		lda $0c				lda 	tempShort
.1969	60		rts				rts
.196a					_PCError:
.196a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.196c	20 f6 23	jsr $23f6		jsr	errorHandler
.196f					CompareEquals:
.196f	20 37 19	jsr $1937			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.1972	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.1974	f0 35		beq $19ab			beq  	CompareTrue
.1976	4c ae 19	jmp $19ae			jmp 	CompareFalse
.1979					CompareLess:
.1979	20 37 19	jsr $1937			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.197c	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.197e	f0 2b		beq $19ab			beq  	CompareTrue
.1980	4c ae 19	jmp $19ae			jmp 	CompareFalse
.1983					CompareGreater:
.1983	20 37 19	jsr $1937			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.1986	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.1988	f0 21		beq $19ab			beq  	CompareTrue
.198a	4c ae 19	jmp $19ae			jmp 	CompareFalse
.198d					CompareNotEquals:
.198d	20 37 19	jsr $1937			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.1990	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.1992	d0 17		bne $19ab			bne  	CompareTrue
.1994	4c ae 19	jmp $19ae			jmp 	CompareFalse
.1997					CompareGreaterEq:
.1997	20 37 19	jsr $1937			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.199a	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.199c	d0 0d		bne $19ab			bne  	CompareTrue
.199e	4c ae 19	jmp $19ae			jmp 	CompareFalse
.19a1					CompareLessEq:
.19a1	20 37 19	jsr $1937			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19a4	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.19a6	d0 03		bne $19ab			bne  	CompareTrue
.19a8	4c ae 19	jmp $19ae			jmp 	CompareFalse
.19ab					CompareTrue:
.19ab	4c e6 21	jmp $21e6			jmp 	MInt32True
.19ae					CompareFalse:
.19ae	4c ea 21	jmp $21ea			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.19b1					Event_Str:
.19b1	20 72 1c	jsr $1c72			jsr 	EvaluateNumeric 			; get a number.
.19b4	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.19b6	d0 13		bne $19cb			bne 	_ESFloat
.19b8	20 0e 1a	jsr $1a0e			jsr 	ConvertGetBase 				; get base, or default.
.19bb	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.19bd	85 04		sta $04				sta 	temp0
.19bf	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.19c1	85 05		sta $05				sta 	1+(temp0)
.19c3	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.19c5	20 40 21	jsr $2140			jsr 	MInt32ToString 				; convert to string.
.19c8	4c d8 19	jmp $19d8			jmp 	_ESCloneExit 				; clone and exit.
.19cb					_ESFloat:
.19cb	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check closing )
.19ce	20 d4 11	jsr $11d4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.19d1	8a		txa				txa
.19d2	a2 14		ldx #$14		ldx	#20
.19d4	20 28 27	jsr $2728		jsr	floatingpointHandler
.19d7	aa		tax				tax
.19d8					_ESCloneExit:
.19d8	8a		txa				txa
.19d9	a2 02		ldx #$02		ldx	#2
.19db	20 8c 2b	jsr $2b8c		jsr	stringHandler
.19de	aa		tax				tax
.19df	60		rts				rts
.19e0					UnaryVal:
.19e0	38		sec				sec 								; Carry set to return value
.19e1	b0 01		bcs $19e4			bcs 	ValueMain
.19e3					UnaryIsVal:
.19e3	18		clc				clc									; Carry clear to return legitimacy
.19e4					ValueMain:
.19e4	08		php				php 								; save results (CS is value, CC is validation)
.19e5	20 7d 1c	jsr $1c7d			jsr 	EvaluateString
.19e8	20 0e 1a	jsr $1a0e			jsr 	ConvertGetBase 				; get base, if any.
.19eb	98		tya				tya
.19ec	48		pha				pha
.19ed	20 d4 11	jsr $11d4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.19f0	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.19f2	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.19f4	20 58 20	jsr $2058			jsr 	MInt32FromString 			; convert it back from a string.
.19f7	b0 0c		bcs $1a05			bcs 	_VMSuccess 					; successfully converted.
.19f9	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.19fb	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.19fd	f0 00		beq $19ff			beq 	_VMFailed 	 				; so we failed.
.19ff					_VMFailed:
.19ff	68		pla				pla
.1a00	a8		tay				tay
.1a01	28		plp				plp
.1a02	4c ea 21	jmp $21ea			jmp 	MInt32False 				; return 0 whatever.
.1a05					_VMSuccess:
.1a05	68		pla				pla
.1a06	a8		tay				tay
.1a07	28		plp				plp 								; if CS the it was val() so we want the value.
.1a08	b0 03		bcs $1a0d			bcs 	_VMExit
.1a0a	4c e6 21	jmp $21e6			jmp 	MInt32True 					; otherwise return true as successful.
.1a0d					_VMExit:
.1a0d	60		rts				rts
.1a0e					ConvertGetBase:
.1a0e	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1a10	95 49		sta $49,x			sta 	esInt0+1,x
.1a12	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for ,base)
.1a14	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a16	d0 0e		bne $1a26			bne 	_CGBDone 					; not found, should be )
.1a18	e8		inx				inx 								; next level
.1a19	c8		iny				iny 								; skip comma.
.1a1a	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger		; evaluate the base.
.1a1d	ca		dex				dex
.1a1e	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.1a20	90 08		bcc $1a2a			bcc 	_CGBValue 					; (it should work as high as 37)
.1a22	c9 11		cmp #$11			cmp 	#17
.1a24	b0 04		bcs $1a2a			bcs 	_CGBValue
.1a26					_CGBDone:
.1a26	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1a29	60		rts				rts
.1a2a					_CGBValue:
.1a2a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a2c	20 f6 23	jsr $23f6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1a2f					DereferenceTwo:
.1a2f	e8		inx				inx
.1a30	20 34 1a	jsr $1a34			jsr 	DereferenceOne
.1a33	ca		dex				dex
.1a34					DereferenceOne:
.1a34	b5 40		lda $40,x			lda 	esType,x
.1a36	10 3d		bpl $1a75			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.1a38	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1a39	b0 3b		bcs $1a76			bcs 	_DRFloatDeReference
.1a3b	98		tya				tya
.1a3c	48		pha				pha
.1a3d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1a3f	85 04		sta $04				sta 	temp0
.1a41	b5 50		lda $50,x			lda 	esInt1,x
.1a43	85 05		sta $05				sta 	temp0+1
.1a45	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1a47	95 50		sta $50,x			sta 	esInt1,x
.1a49	95 58		sta $58,x			sta 	esInt2,x
.1a4b	95 60		sta $60,x			sta 	esInt3,x
.1a4d	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1a4f	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1a51	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1a52	30 0d		bmi $1a61			bmi 	_DeRefString 				; string, 2 bytes only
.1a54	d0 11		bne $1a67			bne 	_DeRefByte 					; byte 1 byte only
.1a56					_DeRefLong:
.1a56	a0 03		ldy #$03			ldy 	#3
.1a58	b1 04		lda ($04),y			lda 	(temp0),y
.1a5a	95 60		sta $60,x			sta 	esInt3,x
.1a5c	88		dey				dey
.1a5d	b1 04		lda ($04),y			lda 	(temp0),y
.1a5f	95 58		sta $58,x			sta 	esInt2,x
.1a61					_DeRefString:
.1a61	a0 01		ldy #$01			ldy 	#1
.1a63	b1 04		lda ($04),y			lda 	(temp0),y
.1a65	95 50		sta $50,x			sta 	esInt1,x
.1a67					_DeRefByte:
.1a67	a0 00		ldy #$00			ldy 	#0
.1a69	b1 04		lda ($04),y			lda 	(temp0),y
.1a6b	95 48		sta $48,x			sta 	esInt0,x
.1a6d	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1a6f	29 40		and #$40			and 	#$40
.1a71	95 40		sta $40,x			sta 	esType,x
.1a73	68		pla				pla
.1a74	a8		tay				tay
.1a75					_DRNotReference
.1a75	60		rts				rts
.1a76					_DRFloatDereference:
.1a76	20 d4 11	jsr $11d4			jsr 	TOSToTemp0 					; address to deref in temp0
.1a79	8a		txa				txa
.1a7a	a2 1c		ldx #$1c		ldx	#28
.1a7c	20 28 27	jsr $2728		jsr	floatingpointHandler
.1a7f	aa		tax				tax
.1a80	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1a82	95 40		sta $40,x			sta 	esType,x
.1a84	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1a85					EvaluateLevel:
.1a85	48		pha				pha 								; save precedence level.
.1a86	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1a88	95 48		sta $48,x			sta 	esInt0,x
.1a8a	95 50		sta $50,x			sta 	esInt1,x
.1a8c	95 58		sta $58,x			sta 	esInt2,x
.1a8e	95 60		sta $60,x			sta 	esInt3,x
.1a90	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1a92	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1a94	30 21		bmi $1ab7			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1a96	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1a97	30 0a		bmi $1aa3			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1a99	8a		txa				txa 								; stack level in X
.1a9a	a2 00		ldx #$00		ldx	#0
.1a9c	20 2f 35	jsr $352f		jsr	variableHandler
.1a9f	aa		tax				tax
.1aa0	4c e0 1a	jmp $1ae0			jmp		_ELHasTerm
.1aa3					_ELIsConstant:
.1aa3	4a		lsr a				lsr 	a 							; get the value back
.1aa4	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1aa6	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1aa8					_ELCheckNext:
.1aa8	c8		iny				iny 								; look at next
.1aa9	b1 02		lda ($02),y			lda 	(codePtr),y
.1aab	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1aad	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1aaf	b0 2f		bcs $1ae0			bcs 	_ELHasTerm 					; done getting the constant.
.1ab1	20 79 1b	jsr $1b79			jsr 	ELShiftByteIn 				; shift byte into position.
.1ab4	4c a8 1a	jmp $1aa8			jmp 	_ELCheckNext
.1ab7					_ELIsToken:
.1ab7	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1ab9	f0 0f		beq $1aca			beq 	_ELIsString
.1abb	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1abd	d0 5f		bne $1b1e			bne 	_ELCheckUnary
.1abf	8a		txa				txa 								; put X into A
.1ac0	c8		iny				iny 								; skip over the float marker
.1ac1	a2 18		ldx #$18		ldx	#24
.1ac3	20 28 27	jsr $2728		jsr	floatingpointHandler
.1ac6	aa		tax				tax 								; restore X
.1ac7	4c e0 1a	jmp $1ae0			jmp 	_ELHasTerm
.1aca					_ELIsString:
.1aca	98		tya				tya 								; address of string is codePtr+y+1
.1acb	38		sec				sec
.1acc	65 02		adc $02				adc 	codePtr
.1ace	95 48		sta $48,x			sta 	esInt0,x
.1ad0	a5 03		lda $03				lda 	codePtr+1
.1ad2	69 00		adc #$00			adc 	#0
.1ad4	95 50		sta $50,x			sta 	esInt1,x
.1ad6	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1ad8	95 40		sta $40,x			sta 	esType,x
.1ada	c8		iny				iny 								; skip over string.
.1adb	98		tya				tya
.1adc	38		sec				sec									; +1 for the length itself.
.1add	71 02		adc ($02),y			adc 	(codePtr),y
.1adf	a8		tay				tay 								; and fall through to term loop code.
.1ae0					_ELHasTerm:
.1ae0	b1 02		lda ($02),y			lda 	(codePtr),y
.1ae2	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1ae4	90 04		bcc $1aea			bcc 	_ELPopExit
.1ae6	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1ae8	90 02		bcc $1aec			bcc 	_ELHasBinaryTerm
.1aea					_ELPopExit:
.1aea	68		pla				pla
.1aeb					_ELExit:
.1aeb	60		rts				rts
.1aec					_ELHasBinaryTerm:
.1aec	84 0c		sty $0c				sty 	tempShort 					; save position
.1aee	a8		tay				tay 								; use token as an index and get the precedence.
.1aef	b9 21 1b	lda $1b21,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1af2	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1af4	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1af6	68		pla				pla 								; restore current level.
.1af7	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1af9	b0 f0		bcs $1aeb			bcs 	_ELExit
.1afb	48		pha				pha 								; save current level back on the stack.
.1afc	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1afe	48		pha				pha
.1aff	c8		iny				iny
.1b00	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1b01	a5 0c		lda $0c				lda 	tempShort
.1b03	20 85 1a	jsr $1a85			jsr 	EvaluateLevel
.1b06	ca		dex				dex
.1b07	68		pla				pla 								; get the operator back out.
.1b08					_ELExecuteA:
.1b08	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1b0a	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1b0b	aa		tax				tax
.1b0c	bd 31 15	lda $1531,x			lda 	Group0Vectors,x
.1b0f	85 04		sta $04				sta 	temp0
.1b11	bd 32 15	lda $1532,x			lda 	Group0Vectors+1,x
.1b14	85 05		sta $05				sta 	temp0+1
.1b16	a6 0c		ldx $0c				ldx 	tempShort
.1b18	20 65 1b	jsr $1b65			jsr 	_ELCallTemp0
.1b1b	4c e0 1a	jmp $1ae0			jmp 	_ELHasTerm 					; and loop back round.
.1b1e					_ELCheckUnary:
.1b1e	c8		iny				iny 								; skip over token.
.1b1f	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1b21	f0 19		beq $1b3c			beq 	_ELMinus
.1b23	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1b25	f0 2c		beq $1b53			beq 	_ELIndirect
.1b27	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1b29	f0 28		beq $1b53			beq 	_ELIndirect
.1b2b	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1b2d	f0 39		beq $1b68			beq 	_ELExtension
.1b2f	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1b31	90 04		bcc $1b37			bcc 	_ELUSyntax
.1b33	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1b35	90 d1		bcc $1b08			bcc 	_ELExecuteA 				; if so do that token.
.1b37					_ELUSyntax:
.1b37	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b39	20 f6 23	jsr $23f6		jsr	errorHandler
.1b3c					_ELMinus:
.1b3c	20 51 1c	jsr $1c51			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1b3f	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1b41	f0 0a		beq $1b4d			beq 	_ELMinusInteger
.1b43	8a		txa				txa
.1b44	a2 0c		ldx #$0c		ldx	#12
.1b46	20 28 27	jsr $2728		jsr	floatingpointHandler
.1b49	aa		tax				tax
.1b4a	4c e0 1a	jmp $1ae0			jmp 	_ELHasTerm
.1b4d					_ELMinusInteger:
.1b4d	20 a4 21	jsr $21a4			jsr 	MInt32Negate 				; do int negate
.1b50	4c e0 1a	jmp $1ae0			jmp 	_ELHasTerm
.1b53					_ELIndirect:
.1b53	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1b54	20 5a 1c	jsr $1c5a			jsr 	EvaluateIntegerTerm 		; integer address
.1b57	68		pla				pla
.1b58	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1b5a	f0 02		beq $1b5e			beq 	_ELHaveModifier
.1b5c	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1b5e					_ELHaveModifier:
.1b5e	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1b60	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.1b62	4c e0 1a	jmp $1ae0			jmp 	_ELHasTerm
.1b65					_ELCallTemp0:
.1b65	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1b68					_ELExtension:
.1b68	8a		txa				txa 								; stack pos in A
.1b69	20 9d 26	jsr $269d		jsr	extensionHandler
.1b6c	aa		tax				tax 								; restore stack
.1b6d	4c e0 1a	jmp $1ae0			jmp 	_ELHasTerm
.1b70					UnaryParenthesis:
.1b70	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1b72	20 85 1a	jsr $1a85			jsr 	EvaluateLevel
.1b75	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check for )
.1b78	60		rts				rts
.1b79					ELShiftByteIn:
.1b79	48		pha				pha 								; save bits to shift in.
.1b7a	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1b7c	48		pha				pha
.1b7d	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1b7f	95 60		sta $60,x			sta 	esInt3,x
.1b81	b5 50		lda $50,x			lda 	esInt1,x
.1b83	95 58		sta $58,x			sta 	esInt2,x
.1b85	b5 48		lda $48,x			lda 	esInt0,x
.1b87	95 50		sta $50,x			sta 	esInt1,x
.1b89	a9 00		lda #$00			lda 	#0
.1b8b	95 48		sta $48,x			sta 	esInt0,x
.1b8d	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1b8e	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1b90	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1b92					_ELShiftLoop:
.1b92	4a		lsr a				lsr 	a
.1b93	76 60		ror $60,x			ror 	esInt3,x
.1b95	76 58		ror $58,x			ror 	esInt2,x
.1b97	76 50		ror $50,x			ror 	esInt1,x
.1b99	76 48		ror $48,x			ror 	esInt0,x
.1b9b	c9 01		cmp #$01			cmp 	#1
.1b9d	d0 f3		bne $1b92			bne 	_ELShiftLoop
.1b9f	68		pla				pla 								; get original 6 bit value and OR in.
.1ba0	29 3f		and #$3f			and 	#$3F
.1ba2	15 48		ora $48,x			ora 	esInt0,x
.1ba4	95 48		sta $48,x			sta 	esInt0,x
.1ba6	60		rts				rts
.1ba7					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1ba7	01					.byte	$01			; $86 and
>1ba8	01					.byte	$01			; $87 or
>1ba9	01					.byte	$01			; $88 xor
>1baa	02					.byte	$02			; $89 >=
>1bab	02					.byte	$02			; $8a <=
>1bac	02					.byte	$02			; $8b >
>1bad	02					.byte	$02			; $8c <
>1bae	02					.byte	$02			; $8d =
>1baf	02					.byte	$02			; $8e <>
>1bb0	03					.byte	$03			; $8f +
>1bb1	03					.byte	$03			; $90 -
>1bb2	04					.byte	$04			; $91 >>
>1bb3	04					.byte	$04			; $92 <<
>1bb4	04					.byte	$04			; $93 *
>1bb5	04					.byte	$04			; $94 /
>1bb6	04					.byte	$04			; $95 mod
>1bb7	05					.byte	$05			; $96 ^
>1bb8	06					.byte	$06			; $97 !
>1bb9	06					.byte	$06			; $98 ?
>1bba	82					.byte	$82			; $99 repeat
>1bbb	82					.byte	$82			; $9a while
>1bbc	82					.byte	$82			; $9b for
>1bbd	82					.byte	$82			; $9c if
>1bbe	82					.byte	$82			; $9d defproc
>1bbf	80					.byte	$80			; $9e until
>1bc0	80					.byte	$80			; $9f wend
>1bc1	80					.byte	$80			; $a0 next
>1bc2	80					.byte	$80			; $a1 then
>1bc3	80					.byte	$80			; $a2 endif
>1bc4	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1bc5					EventFunction:
.1bc5	20 bb 1c	jsr $1cbb			jsr 	EvaluateReference			; get the variable reference that tracks the event
.1bc8	b5 40		lda $40,x			lda 	esType,x
.1bca	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.1bcc	d0 5b		bne $1c29			bne 	_EFType
.1bce	20 6a 22	jsr $226a			jsr 	CheckComma
.1bd1	e8		inx				inx
.1bd2	20 88 1c	jsr $1c88			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1bd5	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; finish off with the right bracket
.1bd8	ca		dex				dex
.1bd9	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.1bdb	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.1bdd	15 58		ora $58,x			ora 	esInt2,x
.1bdf	15 60		ora $60,x			ora 	esInt3,x
.1be1	d0 41		bne $1c24			bne 	_EFValue
.1be3	98		tya				tya
.1be4	48		pha				pha
.1be5	8a		txa				txa
.1be6	48		pha				pha
.1be7	a2 18		ldx #$18		ldx	#24
.1be9	20 d9 23	jsr $23d9		jsr	deviceHandler
.1bec	84 07		sty $07				sty 	temp1+1
.1bee	85 06		sta $06				sta 	temp1
.1bf0	68		pla				pla
.1bf1	aa		tax				tax
.1bf2	20 d4 11	jsr $11d4			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.1bf5	a0 03		ldy #$03			ldy 	#3							; if -ve
.1bf7	b1 04		lda ($04),y			lda 	(temp0),y
.1bf9	30 23		bmi $1c1e			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.1bfb	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1bfd	b1 04		lda ($04),y			lda 	(temp0),y
.1bff	c8		iny				iny
.1c00	11 04		ora ($04),y			ora 	(temp0),y
.1c02	f0 17		beq $1c1b			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1c04	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1c06	38		sec				sec
.1c07	b1 04		lda ($04),y			lda 	(temp0),y
.1c09	e5 06		sbc $06				sbc 	temp1
.1c0b	c8		iny				iny
.1c0c	b1 04		lda ($04),y			lda 	(temp0),y
.1c0e	e5 07		sbc $07				sbc 	temp1+1
.1c10	10 0c		bpl $1c1e			bpl 	_EFFail 					; if trigger >= timer then return False
.1c12	20 2e 1c	jsr $1c2e			jsr 	SetEventTimer 				; reset the timer for next time.
.1c15	20 e6 21	jsr $21e6			jsr	 	MInt32True 					; and treutn true as fired.
.1c18	68		pla				pla
.1c19	a8		tay				tay
.1c1a	60		rts				rts
.1c1b					_EFInitialise:
.1c1b	20 2e 1c	jsr $1c2e			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1c1e					_EFFail:
.1c1e	68		pla				pla
.1c1f	a8		tay				tay
.1c20	20 ea 21	jsr $21ea			jsr 	MInt32False
.1c23	60		rts				rts
.1c24					_EFValue:
.1c24	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c26	20 f6 23	jsr $23f6		jsr	errorHandler
.1c29					_EFType:
.1c29	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c2b	20 f6 23	jsr $23f6		jsr	errorHandler
.1c2e					SetEventTimer:
.1c2e	a0 00		ldy #$00			ldy 	#0
.1c30	18		clc				clc
.1c31	a5 06		lda $06				lda 	temp1
.1c33	75 49		adc $49,x			adc 	esInt0+1,x
.1c35	91 04		sta ($04),y			sta		(temp0),y
.1c37	c8		iny				iny
.1c38	a5 07		lda $07				lda 	temp1+1
.1c3a	75 51		adc $51,x			adc 	esInt1+1,x
.1c3c	91 04		sta ($04),y			sta		(temp0),y
.1c3e	88		dey				dey
.1c3f	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1c41	d0 04		bne $1c47			bne 	_SETExit 					; zero means initialise.....
.1c43	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1c45	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1c47					_SETExit:
.1c47	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.1c48					EvaluateTerm:
.1c48	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.1c4a	20 85 1a	jsr $1a85			jsr 	EvaluateLevel
.1c4d	20 34 1a	jsr $1a34			jsr 	DereferenceOne
.1c50	60		rts				rts
.1c51					EvaluateNumericTerm:
.1c51	20 48 1c	jsr $1c48			jsr 	EvaluateTerm
.1c54	b5 40		lda $40,x			lda 	esType,x
.1c56	0a		asl a				asl 	a 							; see if it's a string.
.1c57	30 09		bmi $1c62			bmi 	ENTType
.1c59	60		rts				rts
.1c5a					EvaluateIntegerTerm:
.1c5a	20 48 1c	jsr $1c48			jsr 	EvaluateTerm
.1c5d	b5 40		lda $40,x			lda 	esType,x
.1c5f	d0 01		bne $1c62			bne 	ENTType
.1c61	60		rts				rts
.1c62					ENTType:
.1c62	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c64	20 f6 23	jsr $23f6		jsr	errorHandler
.1c67					EvaluateRoot:
.1c67	a2 00		ldx #$00			ldx 	#0
.1c69					Evaluate:
.1c69	a9 00		lda #$00			lda 	#0
.1c6b	20 85 1a	jsr $1a85			jsr 	EvaluateLevel
.1c6e	20 34 1a	jsr $1a34			jsr 	DereferenceOne
.1c71	60		rts				rts
.1c72					EvaluateNumeric:
.1c72	20 69 1c	jsr $1c69			jsr 	Evaluate
.1c75	b5 40		lda $40,x			lda 	esType,x
.1c77	0a		asl a				asl 	a 							; see if it's a string.
.1c78	30 e8		bmi $1c62			bmi 	ENTType
.1c7a	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1c7b	4a		lsr a				lsr 	a
.1c7c	60		rts				rts
.1c7d					EvaluateString:
.1c7d	20 69 1c	jsr $1c69			jsr 	Evaluate
.1c80	b5 40		lda $40,x			lda 	esType,x
.1c82	0a		asl a				asl 	a 							; see if it's a string.
.1c83	10 dd		bpl $1c62			bpl 	ENTType
.1c85	60		rts				rts
.1c86					EvaluateRootInteger:
.1c86	a2 00		ldx #$00			ldx 	#0
.1c88					EvaluateInteger:
.1c88	20 69 1c	jsr $1c69			jsr 	Evaluate
.1c8b	b5 40		lda $40,x			lda 	esType,x
.1c8d	d0 d3		bne $1c62			bne 	ENTType
.1c8f	60		rts				rts
.1c90					EvaluateSmallInteger:
.1c90	20 88 1c	jsr $1c88			jsr 	EvaluateInteger
.1c93	b5 50		lda $50,x			lda 	esInt1,x
.1c95	15 58		ora $58,x			ora 	esInt2,x
.1c97	15 60		ora $60,x			ora 	esInt3,x
.1c99	d0 03		bne $1c9e			bne 	_ESIValue
.1c9b	b5 48		lda $48,x			lda 	esInt0,x
.1c9d	60		rts				rts
.1c9e					_ESIValue:
.1c9e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ca0	20 f6 23	jsr $23f6		jsr	errorHandler
.1ca3					LinkEvaluate:
.1ca3	aa		tax				tax
.1ca4	20 69 1c	jsr $1c69			jsr 	Evaluate
.1ca7	8a		txa				txa
.1ca8	60		rts				rts
.1ca9					LinkEvaluateTerm:
.1ca9	aa		tax				tax
.1caa	20 48 1c	jsr $1c48			jsr 	EvaluateTerm
.1cad	8a		txa				txa
.1cae	60		rts				rts
.1caf					LinkEvaluateInteger:
.1caf	aa		tax				tax
.1cb0	20 88 1c	jsr $1c88			jsr 	EvaluateInteger
.1cb3	8a		txa				txa
.1cb4	60		rts				rts
.1cb5					LinkEvaluateSmallInt:
.1cb5	aa		tax				tax
.1cb6	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger
.1cb9	8a		txa				txa
.1cba	60		rts				rts
.1cbb					EvaluateReference:
.1cbb	ad b8 1b	lda $1bb8			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1cbe	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1cbf	e9 01		sbc #$01			sbc 	#1
.1cc1	20 85 1a	jsr $1a85			jsr 	EvaluateLevel
.1cc4	b5 40		lda $40,x			lda 	esType,x
.1cc6	10 01		bpl $1cc9			bpl 	_ERFail
.1cc8	60		rts				rts
.1cc9					_ERFail:
.1cc9	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1ccb	20 f6 23	jsr $23f6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1cce					UnaryLen:
.1cce	20 dc 1c	jsr $1cdc			jsr 	ULStart
.1cd1					ULFinish:
.1cd1	b1 04		lda ($04),y			lda 	(temp0),y 					; get length prefix
.1cd3	a4 0c		ldy $0c				ldy 	tempShort 					; get Y back
.1cd5	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit 				; write it out.
.1cd8	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1cdb	60		rts				rts
.1cdc	20 7d 1c	jsr $1c7d	ULStart:jsr 	EvaluateString
.1cdf	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1ce1	85 04		sta $04				sta 	temp0
.1ce3	b5 50		lda $50,x			lda 	esInt1,x
.1ce5	85 05		sta $05				sta 	temp0+1
.1ce7	84 0c		sty $0c				sty 	tempShort 					; get length
.1ce9	a0 00		ldy #$00			ldy 	#0
.1ceb	60		rts				rts
.1cec					UnaryAsc:
.1cec	20 dc 1c	jsr $1cdc			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1cef	b1 04		lda ($04),y			lda 	(temp0),y 					; read length
.1cf1	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1cf2	c9 00		cmp #$00			cmp 	#0
.1cf4	d0 db		bne $1cd1			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.1cf6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cf8	20 f6 23	jsr $23f6		jsr	errorHandler
.1cfb					UnaryAbs:
.1cfb	20 72 1c	jsr $1c72			jsr 	EvaluateNumeric 			; some numeric value
.1cfe	b0 07		bcs $1d07			bcs 	_UAFloat 					; CS then float, so use that function
.1d00	20 9f 21	jsr $219f			jsr 	MInt32Absolute 				; int version
.1d03	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1d06	60		rts				rts
.1d07					_UAFloat:
.1d07	8a		txa				txa 								; float version
.1d08	a2 00		ldx #$00		ldx	#0
.1d0a	20 28 27	jsr $2728		jsr	floatingpointHandler
.1d0d	aa		tax				tax
.1d0e	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1d11	60		rts				rts
.1d12					UnarySgn:
.1d12	20 72 1c	jsr $1c72			jsr 	EvaluateNumeric 			; same as above but sign of value
.1d15	b0 07		bcs $1d1e			bcs 	_USFloat
.1d17	20 d7 21	jsr $21d7			jsr 	MInt32Sign
.1d1a	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1d1d	60		rts				rts
.1d1e					_USFloat:
.1d1e	8a		txa				txa
.1d1f	a2 0e		ldx #$0e		ldx	#14
.1d21	20 28 27	jsr $2728		jsr	floatingpointHandler
.1d24	aa		tax				tax
.1d25	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1d28	60		rts				rts
.1d29					UnaryPeek:
.1d29	20 55 1d	jsr $1d55			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.1d2c	4c 49 1d	jmp $1d49			jmp 	PDLByte0
.1d2f					UnaryDeek:
.1d2f	20 55 1d	jsr $1d55			jsr 	PDLCode
.1d32	4c 43 1d	jmp $1d43			jmp 	PDLByte1
.1d35					UnaryLeek:
.1d35	20 55 1d	jsr $1d55			jsr 	PDLCode
.1d38	a0 03		ldy #$03			ldy 	#3							; read 3-2
.1d3a	b1 04		lda ($04),y			lda 	(temp0),y
.1d3c	95 60		sta $60,x			sta 	esInt3,x
.1d3e	88		dey				dey
.1d3f	b1 04		lda ($04),y			lda 	(temp0),y
.1d41	95 58		sta $58,x			sta 	esInt2,x
.1d43					PDLByte1:
.1d43	a0 01		ldy #$01			ldy 	#1
.1d45	b1 04		lda ($04),y			lda 	(temp0),y
.1d47	95 50		sta $50,x			sta 	esInt1,x
.1d49					PDLByte0:
.1d49	a0 00		ldy #$00			ldy 	#0
.1d4b	b1 04		lda ($04),y			lda 	(temp0),y
.1d4d	95 48		sta $48,x			sta 	esInt0,x
.1d4f	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1d51	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check right and return
.1d54	60		rts				rts
.1d55					PDLCode:
.1d55	20 88 1c	jsr $1c88			jsr 	EvaluateInteger 			; some address
.1d58	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d5a	85 04		sta $04				sta 	temp0
.1d5c	b5 50		lda $50,x			lda 	esInt1,x
.1d5e	85 05		sta $05				sta 	temp0+1
.1d60	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1d62	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.1d64	95 58		sta $58,x			sta 	esInt2,x
.1d66	95 60		sta $60,x			sta 	esInt3,x
.1d68	84 0c		sty $0c				sty 	tempShort 					; save Y
.1d6a	60		rts				rts
.1d6b					Unary_Random:
.1d6b	20 1a 22	jsr $221a			jsr 	MInt32Random 				; generate random number.
.1d6e	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1d70	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1d72	f0 08		beq $1d7c			beq 	_URExit
.1d74	e8		inx				inx 								; load range 0..r-1 into +1
.1d75	20 88 1c	jsr $1c88			jsr 	EvaluateInteger
.1d78	ca		dex				dex
.1d79	20 3d 20	jsr $203d			jsr 	MInt32Modulus 				; calculate random % modulus
.1d7c					_URExit:
.1d7c	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check right and return
.1d7f	60		rts				rts
.1d80					Unary_Min:
.1d80	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1d82	d0 02		bne $1d86			bne 	UnaryMBody
.1d84					Unary_Max:
.1d84	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1d86					UnaryMBody:
.1d86	48		pha				pha 								; save comparator on stack, shows min or max
.1d87	20 69 1c	jsr $1c69			jsr 	Evaluate 					; get the first thing to check
.1d8a					_UnaryMLoop:
.1d8a	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1d8c	c8		iny				iny
.1d8d	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1d8f	f0 09		beq $1d9a			beq 	_UnaryMExit
.1d91	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1d93	f0 07		beq $1d9c			beq 	_UnaryMCompare
.1d95	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d97	20 f6 23	jsr $23f6		jsr	errorHandler
.1d9a					_UnaryMExit:
.1d9a	68		pla				pla 								; done so throw comparator and return.
.1d9b	60		rts				rts
.1d9c					_UnaryMCompare:
.1d9c	e8		inx				inx 								; get the 2nd thing to evaluate
.1d9d	20 69 1c	jsr $1c69			jsr 	Evaluate
.1da0	ca		dex				dex
.1da1	20 37 19	jsr $1937			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1da4	85 0c		sta $0c				sta 	tempShort 					; save result
.1da6	68		pla				pla 								; get what we need
.1da7	48		pha				pha
.1da8	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1daa	d0 de		bne $1d8a			bne 	_UnaryMLoop 				; no, try another value.
.1dac	20 ea 21	jsr $21ea			jsr 	MInt32False 				; promote 2nd to 1st.
.1daf	20 ce 20	jsr $20ce			jsr 	MInt32Add
.1db2	4c 8a 1d	jmp $1d8a			jmp 	_UnaryMLoop
.1db5					Unary_Page:
.1db5	20 ea 21	jsr $21ea			jsr 	MInt32False 				; zero
.1db8	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1dbb	95 48		sta $48,x			sta 	esInt0,x
.1dbd	ad c9 0a	lda $0ac9			lda 	basePage+1
.1dc0	95 50		sta $50,x			sta 	esInt1,x
.1dc2	60		rts				rts
.1dc3					UnaryReference:
.1dc3	a9 0f		lda #$0f			lda 	#15
.1dc5	20 85 1a	jsr $1a85			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1dc8	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1dca	10 05		bpl $1dd1			bpl 	UType
.1dcc	a9 00		lda #$00			lda 	#0 							; make it an integer
.1dce	95 40		sta $40,x			sta 	esType,x
.1dd0	60		rts				rts
.1dd1					UType:
.1dd1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1dd3	20 f6 23	jsr $23f6		jsr	errorHandler
.1dd6					UnaryHexMarker:
.1dd6	4c 5a 1c	jmp $1c5a			jmp 	EvaluateIntegerTerm
.1dd9					UnaryComplement:
.1dd9	20 5a 1c	jsr $1c5a			jsr 	EvaluateIntegerTerm
.1ddc	20 be 21	jsr $21be			jsr 	MInt32Not
.1ddf	60		rts				rts
.1de0					UnaryIntToFloat:
.1de0	20 72 1c	jsr $1c72			jsr 	EvaluateNumeric				; some number
.1de3	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.1de5	d0 0b		bne $1df2			bne 	_UIFExit
.1de7	8a		txa				txa 								; convert and set type
.1de8	a2 1a		ldx #$1a		ldx	#26
.1dea	20 28 27	jsr $2728		jsr	floatingpointHandler
.1ded	aa		tax				tax
.1dee	a9 01		lda #$01			lda 	#1
.1df0	95 40		sta $40,x			sta 	esType,x
.1df2					_UIFExit:
.1df2	60		rts				rts
.1df3					UnaryFloatToInt:
.1df3	20 72 1c	jsr $1c72			jsr 	EvaluateNumeric 			; the number
.1df6	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.1df8	f0 0b		beq $1e05			beq 	_UFIExit
.1dfa	8a		txa				txa 								; convert to int
.1dfb	a2 12		ldx #$12		ldx	#18
.1dfd	20 28 27	jsr $2728		jsr	floatingpointHandler
.1e00	aa		tax				tax
.1e01	a9 00		lda #$00			lda 	#0 							; set type
.1e03	95 40		sta $40,x			sta 	esType,x
.1e05					_UFIExit:
.1e05	60		rts				rts
.1e06					UnaryAlloc:
.1e06	e8		inx				inx 								; evaluate memory required
.1e07	20 88 1c	jsr $1c88			jsr 	EvaluateInteger
.1e0a	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1e0d	ca		dex				dex
.1e0e	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1e10	15 61		ora $61,x			ora 	esInt3+1,x
.1e12	d0 19		bne $1e2d			bne 	_UABadValue
.1e14	20 ea 21	jsr $21ea			jsr 	MInt32False					; zero return.
.1e17	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1e19	95 50		sta $50,x			sta 	esInt1,x
.1e1b	a5 0f		lda $0f				lda 	lowMemory
.1e1d	95 48		sta $48,x			sta 	esInt0,x
.1e1f	18		clc				clc 								; add alloc required.
.1e20	75 49		adc $49,x			adc 	esInt0+1,x
.1e22	85 0f		sta $0f				sta 	lowMemory
.1e24	a5 10		lda $10				lda 	lowMemory+1
.1e26	75 51		adc $51,x			adc 	esInt1+1,x
.1e28	85 10		sta $10				sta 	lowMemory+1
.1e2a	b0 01		bcs $1e2d			bcs		_UABadValue 				; overflow definitely bad.
.1e2c	60		rts				rts
.1e2d					_UABadValue:
.1e2d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e2f	20 f6 23	jsr $23f6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1e32					UnaryTimer:
.1e32	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; no parameters
.1e35	98		tya				tya
.1e36	48		pha				pha
.1e37	20 11 22	jsr $2211			jsr 	MInt32Zero 					; zero result
.1e3a	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1e3c	a2 18		ldx #$18		ldx	#24
.1e3e	20 d9 23	jsr $23d9		jsr	deviceHandler
.1e41	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1e43	95 48		sta $48,x			sta 	esInt0,x
.1e45	98		tya				tya
.1e46	95 50		sta $50,x			sta 	esInt1,x
.1e48	68		pla				pla
.1e49	a8		tay				tay
.1e4a	60		rts				rts
.1e4b					UnaryInkey:
.1e4b	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1e4e	86 04		stx $04				stx 	temp0
.1e50	a2 08		ldx #$08		ldx	#8
.1e52	20 d9 23	jsr $23d9		jsr	deviceHandler
.1e55	a6 04		ldx $04				ldx 	temp0
.1e57	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1e5a	60		rts				rts
.1e5b					UnaryGet:
.1e5b	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1e5e	86 04		stx $04				stx 	temp0
.1e60					_UGLoop:
.1e60	a2 08		ldx #$08		ldx	#8
.1e62	20 d9 23	jsr $23d9		jsr	deviceHandler
.1e65	c9 00		cmp #$00			cmp 	#0
.1e67	f0 f7		beq $1e60			beq 	_UGLoop
.1e69	a6 04		ldx $04				ldx 	temp0
.1e6b	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1e6e	60		rts				rts
.1e6f					UnarySys:
.1e6f	20 88 1c	jsr $1c88			jsr 	EvaluateInteger 				; get the address
.1e72	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1e75	20 d4 11	jsr $11d4			jsr 	TOSToTemp0 						; copy call address to temp0
.1e78	8a		txa				txa
.1e79	48		pha				pha
.1e7a	98		tya				tya
.1e7b	48		pha				pha
.1e7c	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1e7f	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1e82	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1e85	20 94 1e	jsr $1e94			jsr 	_CallTemp0
.1e88	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1e8a	68		pla				pla
.1e8b	a8		tay				tay
.1e8c	68		pla				pla
.1e8d	aa		tax				tax
.1e8e	a5 0c		lda $0c				lda 	tempShort
.1e90	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit 					; return result.
.1e93	60		rts				rts
.1e94					_CallTemp0:
.1e94	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1e97					ExecChr:
.1e97	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger		; character number 0-255
.1e9a	20 5d 22	jsr $225d			jsr 	CheckRightParen				; right bracket
.1e9d	98		tya				tya
.1e9e	48		pha				pha
.1e9f	8a		txa				txa 								; A = stack
.1ea0	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1ea2	a2 00		ldx #$00		ldx	#0
.1ea4	20 8c 2b	jsr $2b8c		jsr	stringHandler
.1ea7	aa		tax				tax 								; X = stack
.1ea8	68		pla				pla
.1ea9	a8		tay				tay
.1eaa	60		rts				rts
.1eab					ExecLower:
.1eab	38		sec				sec 								; set carry is lower
.1eac	b0 01		bcs $1eaf			bcs 	ExecUpperLower
.1eae					ExecUpper:
.1eae	18		clc				clc 								; clear carry is upper
.1eaf					ExecUpperLower:
.1eaf	08		php				php 								; save carry
.1eb0	20 7d 1c	jsr $1c7d			jsr 	EvaluateString 				; string to stack,X
.1eb3	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check closing right bracket.
.1eb6	28		plp				plp 								; restore carry, save Y
.1eb7	98		tya				tya
.1eb8	48		pha				pha
.1eb9	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1ebb	2a		rol a				rol 	a
.1ebc	a8		tay				tay 								; now in Y
.1ebd	8a		txa				txa 								; do the substring and exit.
.1ebe	a2 08		ldx #$08		ldx	#8
.1ec0	20 8c 2b	jsr $2b8c		jsr	stringHandler
.1ec3	aa		tax				tax
.1ec4	68		pla				pla
.1ec5	a8		tay				tay
.1ec6	60		rts				rts
.1ec7					ExecLeft:
.1ec7	20 7d 1c	jsr $1c7d			jsr 	EvaluateString 				; string to stack,X
.1eca	20 6a 22	jsr $226a			jsr 	CheckComma
.1ecd	e8		inx				inx
.1ece	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1ed0	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1ed3	e8		inx				inx
.1ed4	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1ed7					ExecSubstring:
.1ed7	ca		dex				dex 								; fix up X
.1ed8	ca		dex				dex
.1ed9	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check closing right bracket.
.1edc	8a		txa				txa 								; do the substring and exit.
.1edd	a2 0a		ldx #$0a		ldx	#10
.1edf	20 8c 2b	jsr $2b8c		jsr	stringHandler
.1ee2	aa		tax				tax
.1ee3	60		rts				rts
.1ee4					ExecMid:
.1ee4	20 7d 1c	jsr $1c7d			jsr 	EvaluateString 				; string to stack,X
.1ee7	20 6a 22	jsr $226a			jsr 	CheckComma
.1eea	e8		inx				inx
.1eeb	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1eee	c9 00		cmp #$00			cmp 	#0
.1ef0	f0 15		beq $1f07			beq 	_EMValue
.1ef2	e8		inx				inx
.1ef3	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.1ef5	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1ef8	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1efa	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1efc	f0 d9		beq $1ed7			beq 	ExecSubString
.1efe	20 6a 22	jsr $226a			jsr 	CheckComma
.1f01	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f04	4c d7 1e	jmp $1ed7			jmp 	ExecSubString
.1f07					_EMValue:
.1f07	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f09	20 f6 23	jsr $23f6		jsr	errorHandler
.1f0c					ExecRight:
.1f0c	20 7d 1c	jsr $1c7d			jsr 	EvaluateString 				; string to stack,X
.1f0f	20 6a 22	jsr $226a			jsr 	CheckComma
.1f12	e8		inx				inx
.1f13	20 90 1c	jsr $1c90			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1f16	ca		dex				dex
.1f17	98		tya				tya
.1f18	48		pha				pha
.1f19	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1f1b	85 04		sta $04				sta 	temp0
.1f1d	b5 50		lda $50,x			lda 	esInt1,x
.1f1f	85 05		sta $05				sta 	temp0+1
.1f21	a0 00		ldy #$00			ldy 	#0 							; point to length
.1f23	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1f25	18		clc				clc 								; add 1.
.1f26	69 01		adc #$01			adc 	#1
.1f28	38		sec				sec
.1f29	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1f2b	f0 02		beq $1f2f			beq		_ERMake1 					; if zero, make it 1.
.1f2d	b0 02		bcs $1f31			bcs		_EROkay
.1f2f					_ERMake1:
.1f2f	a9 01		lda #$01			lda 	#1 							; start position.
.1f31					_EROkay:
.1f31	e8		inx				inx 								; set start pos.
.1f32	95 48		sta $48,x			sta 	esInt0,x
.1f34	e8		inx				inx
.1f35	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1f37	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1f3a	68		pla				pla
.1f3b	a8		tay				tay
.1f3c	4c d7 1e	jmp $1ed7			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1f3f					MInt32And:
.1f3f	b5 48		lda $48,x			lda 	esInt0,x
.1f41	35 49		and $49,x			and 	esInt0+1,x
.1f43	95 48		sta $48,x			sta 	esInt0,x
.1f45	b5 50		lda $50,x			lda 	esInt1,x
.1f47	35 51		and $51,x			and 	esInt1+1,x
.1f49	95 50		sta $50,x			sta 	esInt1,x
.1f4b	b5 58		lda $58,x			lda 	esInt2,x
.1f4d	35 59		and $59,x			and 	esInt2+1,x
.1f4f	95 58		sta $58,x			sta 	esInt2,x
.1f51	b5 60		lda $60,x			lda 	esInt3,x
.1f53	35 61		and $61,x			and 	esInt3+1,x
.1f55	95 60		sta $60,x			sta 	esInt3,x
.1f57	60		rts				rts
.1f58					MInt32Or:
.1f58	b5 48		lda $48,x			lda 	esInt0,x
.1f5a	15 49		ora $49,x			ora 	esInt0+1,x
.1f5c	95 48		sta $48,x			sta 	esInt0,x
.1f5e	b5 50		lda $50,x			lda 	esInt1,x
.1f60	15 51		ora $51,x			ora 	esInt1+1,x
.1f62	95 50		sta $50,x			sta 	esInt1,x
.1f64	b5 58		lda $58,x			lda 	esInt2,x
.1f66	15 59		ora $59,x			ora 	esInt2+1,x
.1f68	95 58		sta $58,x			sta 	esInt2,x
.1f6a	b5 60		lda $60,x			lda 	esInt3,x
.1f6c	15 61		ora $61,x			ora 	esInt3+1,x
.1f6e	95 60		sta $60,x			sta 	esInt3,x
.1f70	60		rts				rts
.1f71					MInt32Xor:
.1f71	b5 48		lda $48,x			lda 	esInt0,x
.1f73	55 49		eor $49,x			eor 	esInt0+1,x
.1f75	95 48		sta $48,x			sta 	esInt0,x
.1f77	b5 50		lda $50,x			lda 	esInt1,x
.1f79	55 51		eor $51,x			eor 	esInt1+1,x
.1f7b	95 50		sta $50,x			sta 	esInt1,x
.1f7d	b5 58		lda $58,x			lda 	esInt2,x
.1f7f	55 59		eor $59,x			eor 	esInt2+1,x
.1f81	95 58		sta $58,x			sta 	esInt2,x
.1f83	b5 60		lda $60,x			lda 	esInt3,x
.1f85	55 61		eor $61,x			eor 	esInt3+1,x
.1f87	95 60		sta $60,x			sta 	esInt3,x
.1f89	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1f8a					MInt32Compare:
.1f8a	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.1f8c	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1f8e	d0 13		bne $1fa3			bne 	MInt32Compare2
.1f90	b5 50		lda $50,x			lda 	esInt1,x
.1f92	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1f94	d0 0d		bne $1fa3			bne 	MInt32Compare2
.1f96	b5 58		lda $58,x			lda 	esInt2,x
.1f98	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1f9a	d0 07		bne $1fa3			bne 	MInt32Compare2
.1f9c	b5 60		lda $60,x			lda 	esInt3,x
.1f9e	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.1fa0	d0 01		bne $1fa3			bne 	MInt32Compare2
.1fa2	60		rts				rts
.1fa3					MInt32Compare2:
.1fa3	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1fa5	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fa7	b5 50		lda $50,x			lda		esInt1,x
.1fa9	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1fab	b5 58		lda $58,x			lda		esInt2,x
.1fad	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1faf	b5 60		lda $60,x			lda		esInt3,x
.1fb1	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1fb3	50 02		bvc $1fb7			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.1fb5	49 80		eor #$80			eor 	#$80
.1fb7					_I32LNoOverflow
.1fb7	30 03		bmi $1fbc			bmi 	MInt32CLess					; if -ve then return $FF
.1fb9	a9 01		lda #$01			lda 	#$01						; else return $01
.1fbb	60		rts				rts
.1fbc					MInt32CLess:
.1fbc	a9 ff		lda #$ff			lda 	#$FF
.1fbe	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1fbf					MInt32SDivide:
.1fbf	98		tya				tya  								; save Y, which is the count of negations
.1fc0	48		pha				pha
.1fc1	a0 00		ldy #$00			ldy 	#0 							; zero count
.1fc3	20 db 1f	jsr $1fdb			jsr 	_MInt32SRemSign 			; unsign TOS
.1fc6	e8		inx				inx 								; unsign TOS+1
.1fc7	20 db 1f	jsr $1fdb			jsr 	_MInt32SRemSign
.1fca	ca		dex				dex
.1fcb	98		tya				tya 								; save sign count on stack
.1fcc	48		pha				pha
.1fcd	20 e4 1f	jsr $1fe4			jsr 	MInt32UDivide 				; unsigned division
.1fd0	68		pla				pla 								; get sign count back
.1fd1	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1fd3	f0 03		beq $1fd8			beq 	_I32SNoNeg
.1fd5	20 a4 21	jsr $21a4			jsr 	MInt32Negate
.1fd8					_I32SNoNeg:
.1fd8	68		pla				pla 								; restoe Y and exit
.1fd9	a8		tay				tay
.1fda	60		rts				rts
.1fdb					_MInt32SRemSign:
.1fdb	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1fdd	10 04		bpl $1fe3			bpl 	_MInt32SRSExit
.1fdf	c8		iny				iny 								; increment the sign count
.1fe0	20 a4 21	jsr $21a4			jsr 	MInt32Negate 				; negate the value.
.1fe3					_MInt32SRSExit:
.1fe3	60		rts				rts
.1fe4					MInt32UDivide:
.1fe4	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1fe6	15 51		ora $51,x			ora 	esInt1+1,x
.1fe8	15 52		ora $52,x			ora 	esInt1+2,x
.1fea	15 53		ora $53,x			ora 	esInt1+3,x
.1fec	f0 4a		beq $2038			beq 	_MInt32DZero
.1fee	e8		inx				inx 								; clear A
.1fef	e8		inx				inx
.1ff0	20 ea 21	jsr $21ea			jsr 	MInt32False
.1ff3	ca		dex				dex
.1ff4	ca		dex				dex
.1ff5	98		tya				tya 								; save Y on the stack
.1ff6	48		pha				pha
.1ff7	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1ff9					_MInt32UDLoop:
.1ff9	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1ffb	36 50		rol $50,x			rol 	esInt1,x
.1ffd	36 58		rol $58,x			rol 	esInt2,x
.1fff	36 60		rol $60,x			rol 	esInt3,x
.2001	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2003	36 52		rol $52,x			rol 	esInt1+2,x
.2005	36 5a		rol $5a,x			rol 	esInt2+2,x
.2007	36 62		rol $62,x			rol 	esInt3+2,x
.2009	38		sec				sec 								; calculate A-M saving result on the stack
.200a	b5 4a		lda $4a,x			lda 	esInt0+2,x
.200c	f5 49		sbc $49,x			sbc 	esInt0+1,x
.200e	48		pha				pha
.200f	b5 52		lda $52,x			lda 	esInt1+2,x
.2011	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2013	48		pha				pha
.2014	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2016	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2018	48		pha				pha
.2019	b5 62		lda $62,x			lda 	esInt3+2,x
.201b	f5 61		sbc $61,x			sbc 	esInt3+1,x
.201d	90 10		bcc $202f			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.201f	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2021	68		pla				pla
.2022	95 5a		sta $5a,x			sta 	esInt2+2,x
.2024	68		pla				pla
.2025	95 52		sta $52,x			sta 	esInt1+2,x
.2027	68		pla				pla
.2028	95 4a		sta $4a,x			sta 	esInt0+2,x
.202a	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.202c	4c 32 20	jmp $2032			jmp 	_MInt32Next 					; do the next iteration
.202f					_MInt32NoSubtract:
.202f	68		pla				pla
.2030	68		pla				pla
.2031	68		pla				pla
.2032					_MInt32Next:
.2032	88		dey				dey 								; do this 32 times.
.2033	d0 c4		bne $1ff9			bne 	_MInt32UDLoop
.2035	68		pla				pla 								; restore Y and exit
.2036	a8		tay				tay
.2037	60		rts				rts
.2038					_MInt32DZero:
.2038	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.203a	20 f6 23	jsr $23f6		jsr	errorHandler
.203d					MInt32Modulus:
.203d	20 e4 1f	jsr $1fe4			jsr 	MInt32UDivide 				; do the division.
.2040	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2042	95 60		sta $60,x			sta 	esInt3,x
.2044	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2046	95 58		sta $58,x			sta 	esInt2,x
.2048	b5 52		lda $52,x			lda 	esInt1+2,x
.204a	95 50		sta $50,x			sta 	esInt1,x
.204c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.204e	95 48		sta $48,x			sta 	esInt0,x
.2050	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0b1a					fs32Length:
>0b1a							.fill 	1
.2051					LinkInt32FromString:
.2051	aa		tax				tax
.2052	98		tya				tya
.2053	20 58 20	jsr $2058			jsr 	MInt32FromString
.2056	8a		txa				txa
.2057	60		rts				rts
.2058					MInt32FromString:
.2058	85 0c		sta $0c				sta 	tempShort 					; save base
.205a	98		tya				tya
.205b	48		pha				pha
.205c	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.205e	b1 04		lda ($04),y			lda 	(temp0),y
.2060	8d 1a 0b	sta $0b1a			sta 	fs32Length
.2063	f0 65		beq $20ca			beq 	_I32FSFail2					; fail if length zero.
.2065	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2067	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.2069	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.206b	d0 09		bne $2076			bne 	_I32FSNotNegative
.206d	ad 1a 0b	lda $0b1a			lda 	fs32Length 					; get length back.
.2070	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2072	f0 56		beq $20ca			beq 	_I32FSFail2
.2074	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2076					_I32FSNotNegative:
.2076	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.2078	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.207a	d0 02		bne $207e			bne 	_I32FSNN2
.207c	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.207e					_I32FSNN2:
.207e	48		pha				pha 								; save base + final sign on stack.
.207f	20 ea 21	jsr $21ea			jsr 	MInt32False 				; zero the return value.
.2082					_I32FSMainLoop:
.2082	68		pla				pla 								; get the base back into tempShort
.2083	48		pha				pha
.2084	29 7f		and #$7f			and 	#$7F
.2086	85 0c		sta $0c				sta 	tempShort
.2088	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.208a	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.208c	90 02		bcc $2090			bcc 	_I32FSNotLC
.208e	e9 20		sbc #$20			sbc 	#32
.2090					_I32FSNotLC:
.2090	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2091	e9 30		sbc #$30			sbc 	#"0"
.2093	90 34		bcc $20c9			bcc 	_I32FSFail 					; nothing more to do.
.2095	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2097	90 06		bcc $209f			bcc 	_I32FSValidate
.2099	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.209b	90 2c		bcc $20c9			bcc 	_I32FSFail
.209d	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.209f					_I32FSValidate:
.209f	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.20a1	b0 26		bcs $20c9			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.20a3	48		pha				pha 								; save the new digit value.
.20a4	e8		inx				inx 								; put base into next slot up on stack
.20a5	a5 0c		lda $0c				lda 	tempShort
.20a7	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.20aa	ca		dex				dex
.20ab	20 02 21	jsr $2102			jsr 	MInt32Multiply 				; multiply current by the base
.20ae	e8		inx				inx
.20af	68		pla				pla  								; put additive into next slot
.20b0	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.20b3	ca		dex				dex
.20b4	20 ce 20	jsr $20ce			jsr 	MInt32Add 					; and add it
.20b7	c8		iny				iny 								; bump the character pointer
.20b8	cc 1a 0b	cpy $0b1a			cpy 	fs32Length 					; until > length.
.20bb	f0 c5		beq $2082			beq 	_I32FSMainLoop
.20bd	90 c3		bcc $2082			bcc 	_I32FSMainLoop
.20bf					_I32FSDone:
.20bf	68		pla				pla 								; get base/final sign back
.20c0	10 03		bpl $20c5			bpl 	_I32FSNN3
.20c2	20 a4 21	jsr $21a4			jsr 	MInt32Negate 				; negate the result.
.20c5					_I32FSNN3:
.20c5	68		pla				pla
.20c6	a8		tay				tay
.20c7	38		sec				sec
.20c8	60		rts				rts
.20c9					_I32FSFail:
.20c9	68		pla				pla
.20ca					_I32FSFail2:
.20ca	68		pla				pla
.20cb	a8		tay				tay
.20cc	18		clc				clc
.20cd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.20ce					MInt32Add:
.20ce	18		clc				clc
.20cf	b5 48		lda $48,x			lda 	esInt0,x
.20d1	75 49		adc $49,x			adc 	esInt0+1,x
.20d3	95 48		sta $48,x			sta 	esInt0,x
.20d5	b5 50		lda $50,x			lda 	esInt1,x
.20d7	75 51		adc $51,x			adc 	esInt1+1,x
.20d9	95 50		sta $50,x			sta 	esInt1,x
.20db	b5 58		lda $58,x			lda 	esInt2,x
.20dd	75 59		adc $59,x			adc 	esInt2+1,x
.20df	95 58		sta $58,x			sta 	esInt2,x
.20e1	b5 60		lda $60,x			lda 	esInt3,x
.20e3	75 61		adc $61,x			adc 	esInt3+1,x
.20e5	95 60		sta $60,x			sta 	esInt3,x
.20e7	60		rts				rts
.20e8					MInt32Sub:
.20e8	38		sec				sec
.20e9	b5 48		lda $48,x			lda 	esInt0,x
.20eb	f5 49		sbc $49,x			sbc 	esInt0+1,x
.20ed	95 48		sta $48,x			sta 	esInt0,x
.20ef	b5 50		lda $50,x			lda 	esInt1,x
.20f1	f5 51		sbc $51,x			sbc 	esInt1+1,x
.20f3	95 50		sta $50,x			sta 	esInt1,x
.20f5	b5 58		lda $58,x			lda 	esInt2,x
.20f7	f5 59		sbc $59,x			sbc 	esInt2+1,x
.20f9	95 58		sta $58,x			sta 	esInt2,x
.20fb	b5 60		lda $60,x			lda 	esInt3,x
.20fd	f5 61		sbc $61,x			sbc 	esInt3+1,x
.20ff	95 60		sta $60,x			sta 	esInt3,x
.2101	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2102					MInt32Multiply:
.2102	e8		inx				inx 								; copy 2nd -> 3rd
.2103	20 28 21	jsr $2128			jsr 	MInt32CopyUp
.2106	ca		dex				dex
.2107	20 28 21	jsr $2128			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.210a	20 ea 21	jsr $21ea			jsr 	MInt32False 				; zero 1st.
.210d					_I32Loop:
.210d	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.210f	29 01		and #$01			and 	#1
.2111	f0 03		beq $2116			beq 	_I32NoAdd 					; if set
.2113	20 ce 20	jsr $20ce			jsr 	MInt32Add 					; add 2nd to 1st.
.2116					_I32NoAdd:
.2116	e8		inx				inx 								; shift 2nd left
.2117	20 ff 21	jsr $21ff			jsr 	MInt32ShiftLeft
.211a	e8		inx				inx  								; shift 3rd right
.211b	20 08 22	jsr $2208			jsr 	MInt32ShiftRight
.211e	20 11 22	jsr $2211			jsr 	MInt32Zero 					; check if zero.
.2121	08		php				php 								; save status bits
.2122	ca		dex				dex 	 							; point back to 1st
.2123	ca		dex				dex
.2124	28		plp				plp 								; get status bits
.2125	d0 e6		bne $210d			bne 	_I32Loop 					; if non-zero keep going.
.2127	60		rts				rts
.2128					MInt32CopyUp:
.2128	b5 48		lda $48,x			lda 	esInt0,x
.212a	95 49		sta $49,x			sta 	esInt0+1,x
.212c	b5 50		lda $50,x			lda 	esInt1,x
.212e	95 51		sta $51,x			sta 	esInt1+1,x
.2130	b5 58		lda $58,x			lda 	esInt2,x
.2132	95 59		sta $59,x			sta 	esInt2+1,x
.2134	b5 60		lda $60,x			lda 	esInt3,x
.2136	95 61		sta $61,x			sta 	esInt3+1,x
.2138	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0b1b					MCharCount:	.fill 	1						; count of converted characters
.2139					MLInt32ToString:
.2139	aa		tax				tax									; module passes stack in A, base in Y
.213a	98		tya				tya
.213b	20 40 21	jsr $2140			jsr 	MInt32ToString
.213e	8a		txa				txa
.213f	60		rts				rts
.2140					MInt32ToString:
.2140	48		pha				pha 								; save base
.2141	85 0c		sta $0c				sta 	tempShort 					; save target base.
.2143	a9 00		lda #$00			lda 	#0
.2145	8d 1b 0b	sta $0b1b			sta 	MCharCount 					; clear character count to 0
.2148	98		tya				tya
.2149	48		pha				pha
.214a	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.214c	10 10		bpl $215e			bpl 	_I32TSUnsigned
.214e	48		pha				pha 								; save base on stack.
.214f	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2151	10 08		bpl $215b			bpl 	_I32TSNoFlip
.2153	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2155	20 91 21	jsr $2191			jsr 	MI32WriteCharacter
.2158	20 a4 21	jsr $21a4			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.215b					_I32TSNoFlip:
.215b	68		pla				pla 								; get the base back
.215c	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.215e					_I32TSUnsigned:
.215e	20 6c 21	jsr $216c			jsr 	MI32DivideWrite 			; recursive code to output string.
.2161	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2163	ad 1b 0b	lda $0b1b			lda 	MCharCount
.2166	91 04		sta ($04),y			sta 	(temp0),y
.2168	68		pla				pla
.2169	a8		tay				tay
.216a	68		pla				pla
.216b	60		rts				rts
.216c					MI32DivideWrite:
.216c	48		pha				pha 								; save the divisor/base
.216d	e8		inx				inx 								; write in the dividing position.
.216e	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.2171	ca		dex				dex
.2172	20 e4 1f	jsr $1fe4			jsr 	MInt32UDivide 				; divide number by base.
.2175	68		pla				pla 								; get the base into Y
.2176	a8		tay				tay
.2177	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2179	48		pha				pha
.217a	20 11 22	jsr $2211			jsr 	MInt32Zero 					; is the result zero ?
.217d	f0 04		beq $2183			beq 	_I32NoRecurse 				; if so, don't recurse.
.217f	98		tya				tya 								; put base into A
.2180	20 6c 21	jsr $216c			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2183					_I32NoRecurse:
.2183	68		pla				pla 								; get the remainder back
.2184	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2186	90 02		bcc $218a			bcc 	_I32NotHex
.2188	69 06		adc #$06			adc 	#7-1
.218a					_I32NotHex:
.218a	18		clc				clc 								; make it ASCII
.218b	69 30		adc #$30			adc 	#48
.218d	20 91 21	jsr $2191			jsr 	MI32WriteCharacter 			; write the character out
.2190	60		rts				rts 								; and exit.
.2191					MI32WriteCharacter:
.2191	ee 1b 0b	inc $0b1b			inc 	MCharCount 					; bump count (space for leading count)
.2194	ac 1b 0b	ldy $0b1b			ldy 	MCharCount 					; get position
.2197	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.2199	c8		iny				iny
.219a	a9 00		lda #$00			lda 	#0
.219c	91 04		sta ($04),y			sta 	(temp0),y
.219e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0b1c					MSeed32:	.fill 	4							; random number seed.
.219f					MInt32Absolute:
.219f	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.21a1	30 01		bmi $21a4			bmi 	MInt32Negate
.21a3	60		rts				rts
.21a4					MInt32Negate:
.21a4	38		sec				sec 								; subtract from zero.
.21a5	a9 00		lda #$00			lda 	#0
.21a7	f5 48		sbc $48,x			sbc 	esInt0,x
.21a9	95 48		sta $48,x			sta 	esInt0,x
.21ab	a9 00		lda #$00			lda 	#0
.21ad	f5 50		sbc $50,x			sbc 	esInt1,x
.21af	95 50		sta $50,x			sta 	esInt1,x
.21b1	a9 00		lda #$00			lda 	#0
.21b3	f5 58		sbc $58,x			sbc 	esInt2,x
.21b5	95 58		sta $58,x			sta 	esInt2,x
.21b7	a9 00		lda #$00			lda 	#0
.21b9	f5 60		sbc $60,x			sbc 	esInt3,x
.21bb	95 60		sta $60,x			sta 	esInt3,x
.21bd	60		rts				rts
.21be					MInt32Not:
.21be	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.21c0	49 ff		eor #$ff			eor 	#$FF
.21c2	95 48		sta $48,x			sta 	esInt0,x
.21c4	b5 50		lda $50,x			lda 	esInt1,x
.21c6	49 ff		eor #$ff			eor 	#$FF
.21c8	95 50		sta $50,x			sta 	esInt1,x
.21ca	b5 58		lda $58,x			lda 	esInt2,x
.21cc	49 ff		eor #$ff			eor 	#$FF
.21ce	95 58		sta $58,x			sta 	esInt2,x
.21d0	b5 60		lda $60,x			lda 	esInt3,x
.21d2	49 ff		eor #$ff			eor 	#$FF
.21d4	95 60		sta $60,x			sta 	esInt3,x
.21d6	60		rts				rts
.21d7					MInt32Sign:
.21d7	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.21d9	30 0b		bmi $21e6			bmi 	MInt32True 					; if set return -1 (true)
.21db	20 11 22	jsr $2211			jsr 	MInt32Zero 					; is it zero ?
.21de	f0 0a		beq $21ea			beq 	MInt32False 				; if zero return 0 (false)
.21e0	20 ea 21	jsr $21ea			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.21e3	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.21e5	60		rts				rts
.21e6					MInt32True:
.21e6	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.21e8	d0 02		bne $21ec			bne 	MInt32WriteAll
.21ea					MInt32False:
.21ea	a9 00		lda #$00			lda 	#0
.21ec					MInt32WriteAll:
.21ec	95 48		sta $48,x			sta 	esInt0,x
.21ee					MInt32Write123:
.21ee	95 50		sta $50,x			sta 	esInt1,x
.21f0	95 58		sta $58,x			sta 	esInt2,x
.21f2	95 60		sta $60,x			sta 	esInt3,x
.21f4	a9 00		lda #$00			lda 	#$00						; and make it an integer
.21f6	95 40		sta $40,x			sta 	esType,x
.21f8	60		rts				rts
.21f9					MInt32Set8Bit:
.21f9	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.21fb	a9 00		lda #$00			lda 	#0 							; a value 0-255
.21fd	f0 ef		beq $21ee			beq		MInt32Write123
.21ff					MInt32ShiftLeft:
.21ff	16 48		asl $48,x			asl 	esInt0,x
.2201	36 50		rol $50,x			rol	 	esInt1,x
.2203	36 58		rol $58,x			rol	 	esInt2,x
.2205	36 60		rol $60,x			rol	 	esInt3,x
.2207	60		rts				rts
.2208					MInt32ShiftRight:
.2208	56 60		lsr $60,x			lsr 	esInt3,x
.220a	76 58		ror $58,x			ror 	esInt2,x
.220c	76 50		ror $50,x			ror 	esInt1,x
.220e	76 48		ror $48,x			ror 	esInt0,x
.2210	60		rts				rts
.2211					MInt32Zero:
.2211	b5 48		lda $48,x			lda 	esInt0,x
.2213	15 50		ora $50,x			ora 	esInt1,x
.2215	15 58		ora $58,x			ora 	esInt2,x
.2217	15 60		ora $60,x			ora 	esInt3,x
.2219	60		rts				rts
.221a					MInt32Random:
.221a	98		tya				tya
.221b	48		pha				pha
.221c	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.221e	ad 1c 0b	lda $0b1c			lda 	MSeed32+0 					; check the seed isn't zero
.2221	d0 03		bne $2226			bne 	_Random1
.2223	a8		tay				tay 								; if so do it 256 times
.2224	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2226					_Random1:
.2226	0a		asl a				asl 	a
.2227	2e 1d 0b	rol $0b1d			rol 	MSeed32+1
.222a	2e 1e 0b	rol $0b1e			rol 	MSeed32+2
.222d	2e 1f 0b	rol $0b1f			rol 	MSeed32+3
.2230	90 02		bcc $2234			bcc 	_Random2
.2232	49 c5		eor #$c5			eor 	#$C5
.2234					_Random2:
.2234	88		dey				dey
.2235	d0 ef		bne $2226			bne 	_Random1
.2237	8d 1c 0b	sta $0b1c			sta 	MSeed32+0 					; copy the seed in.
.223a	95 48		sta $48,x			sta 	esInt0,x
.223c	ad 1d 0b	lda $0b1d			lda 	MSeed32+1
.223f	95 50		sta $50,x			sta 	esInt1,x
.2241	ad 1e 0b	lda $0b1e			lda 	MSeed32+2
.2244	95 58		sta $58,x			sta 	esInt2,x
.2246	ad 1f 0b	lda $0b1f			lda 	MSeed32+3
.2249	95 60		sta $60,x			sta 	esInt3,x
.224b	68		pla				pla
.224c	a8		tay				tay
.224d	a9 00		lda #$00			lda 	#0
.224f	95 40		sta $40,x			sta 	esType,x
.2251	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2252					CheckToken:
.2252	d1 02		cmp ($02),y			cmp 	(codePtr),y
.2254	d0 02		bne $2258			bne 	_CTError
.2256	c8		iny				iny
.2257	60		rts				rts
.2258					_CTError:
.2258	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.225a	20 f6 23	jsr $23f6		jsr	errorHandler
.225d					CheckRightParen:
.225d	b1 02		lda ($02),y			lda 	(codePtr),y
.225f	c8		iny				iny
.2260	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2262	d0 01		bne $2265			bne 	_CRPError
.2264	60		rts				rts
.2265					_CRPError:
.2265	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2267	20 f6 23	jsr $23f6		jsr	errorHandler
.226a					CheckComma:
.226a	b1 02		lda ($02),y			lda 	(codePtr),y
.226c	c8		iny				iny
.226d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.226f	d0 01		bne $2272			bne 	_CCError
.2271	60		rts				rts
.2272					_CCError:
.2272	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2274	20 f6 23	jsr $23f6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/coldwarmstart.asm

.2277					ColdStart:
.2277	a2 ff		ldx #$ff			ldx 	#$FF 						; clear the stack
.2279	9a		txs				txs
.227a	a2 04		ldx #$04		ldx	#4
.227c	20 d9 23	jsr $23d9		jsr	deviceHandler
.227f	a9 00		lda #$00			lda 	#(programMemory) & $FF
.2281	8d c8 0a	sta $0ac8			sta 	basePage
.2284	a9 50		lda #$50			lda 	#(programMemory) >> 8
.2286	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.2289	a9 00		lda #$00			lda 	#($9800) & $FF
.228b	8d ca 0a	sta $0aca			sta 	endMemory
.228e	a9 98		lda #$98			lda 	#($9800) >> 8
.2290	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.2293	a2 00		ldx #$00		ldx	#0
.2295	20 f1 28	jsr $28f1		jsr	interactionHandler
.2298					WarmStart:
.2298	a2 02		ldx #$02		ldx	#2
.229a	20 f1 28	jsr $28f1		jsr	interactionHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.3732					ScanForward:
.3732	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.3734	86 07		stx $07				stx 	temp1+1
.3736	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.3738	85 08		sta $08				sta 	temp2
.373a	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.373c	c8		iny				iny
.373d	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.373f	d0 08		bne $3749			bne 	_SFNoCheck 					; if so, check token against entered values.
.3741	c5 06		cmp $06				cmp 	temp1 						; if either matches, we've reached the token
.3743	f0 24		beq $3769			beq 	_SFExit 					; at the same strcture depth.
.3745	c5 07		cmp $07				cmp 	temp1+1
.3747	f0 20		beq $3769			beq 	_SFExit
.3749					_SFNoCheck:
.3749	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.374b	90 ed		bcc $373a			bcc 	_SFLoop
.374d	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.374f	90 19		bcc $376a			bcc 	_SFSpecials
.3751	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.3753	90 e5		bcc $373a			bcc 	_SFLoop
.3755	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.3757	b0 e1		bcs $373a			bcs 	_SFLoop
.3759	aa		tax				tax  								; token in X, and look up the adjuster.
.375a	bd 21 1b	lda $1b21,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.375d	38		sec				sec 								; convert to an offset ($FF,$01)
.375e	e9 81		sbc #$81			sbc 	#$81
.3760	18		clc				clc 								; add to depth
.3761	65 08		adc $08				adc 	temp2
.3763	85 08		sta $08				sta 	temp2
.3765	10 d3		bpl $373a			bpl 	_SFLoop 					; +ve okay to continue
.3767	30 35		bmi $379e			bmi 	_SFError 					; if gone -ve then we have a nesting error
.3769	60		rts		_SFExit:rts
.376a					_SFSpecials:
.376a	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.376c	f0 14		beq $3782			beq 	_SFNextLine
.376e	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.3770	f0 31		beq $37a3			beq 	_SFFloatSkip
.3772	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.3774	f0 04		beq $377a			beq 	_SFSkipString
.3776	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.3777	4c 3a 37	jmp $373a			jmp 	_SFLoop 					; token.
.377a					_SFSkipString:
.377a	98		tya				tya
.377b	38		sec				sec
.377c	71 02		adc ($02),y			adc 	(codePtr),y
.377e	a8		tay				tay
.377f	4c 3a 37	jmp $373a			jmp 	_SFLoop
.3782					_SFNextLine:
.3782	a0 00		ldy #$00			ldy 	#0 							; get offset
.3784	b1 02		lda ($02),y			lda 	(codePtr),y
.3786	18		clc				clc 								; add to code pointer.
.3787	65 02		adc $02				adc 	codePtr
.3789	85 02		sta $02				sta 	codePtr
.378b	90 02		bcc $378f			bcc		_SFNLNoCarry
.378d	e6 03		inc $03				inc 	codePtr+1
.378f					_SFNLNoCarry:
.378f	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.3791	d0 a7		bne $373a			bne		_SFLoop 					; no go round again
.3793	a5 06		lda $06				lda 	temp1
.3795	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.3797	d0 05		bne $379e			bne 	_SFError 					; read uses this to search for data statements
.3799	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.379b	20 f6 23	jsr $23f6		jsr	errorHandler
.379e					_SFError:
.379e	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.37a0	20 f6 23	jsr $23f6		jsr	errorHandler
.37a3					_SFFloatSkip:
.37a3	4c 27 15	jmp $1527			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.229d					RSReset:
.229d	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.229f	85 78		sta $78				sta 	rsPointer
.22a1	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.22a3	85 79		sta $79				sta 	1+(rsPointer)
.22a5	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.22a7	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.22aa	60		rts				rts
.22ab					RSClaim:
.22ab	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.22ad	48		pha				pha 								; save marker on stack.
.22ae	8a		txa				txa 								; get bytes required.
.22af	38		sec				sec
.22b0	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.22b2	65 78		adc $78				adc 	rsPointer
.22b4	85 78		sta $78				sta 	rsPointer
.22b6	a5 79		lda $79				lda 	rsPointer+1
.22b8	69 ff		adc #$ff			adc 	#$FF
.22ba	85 79		sta $79				sta 	rsPointer+1
.22bc	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.22be	90 08		bcc $22c8			bcc 	_RSCOverflow
.22c0	68		pla				pla 								; get marker back
.22c1	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.22c3	91 78		sta ($78),y			sta 	(rsPointer),y
.22c5	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.22c7	60		rts				rts
.22c8					_RSCOverflow:
.22c8	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.22ca	20 f6 23	jsr $23f6		jsr	errorHandler
.22cd					RSFree:
.22cd	18		clc				clc
.22ce	65 78		adc $78				adc 	rsPointer
.22d0	85 78		sta $78				sta 	rsPointer
.22d2	90 02		bcc $22d6			bcc 	_RSFExit
.22d4	e6 79		inc $79				inc 	rsPointer+1
.22d6					_RSFExit:
.22d6	60		rts				rts
.22d7					RSSavePosition:
.22d7	84 0c		sty $0c				sty 	tempShort 					; save Y position
.22d9	a8		tay				tay 								; this is where we write it.
.22da	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.22dc	91 78		sta ($78),y			sta 	(rsPointer),y
.22de	c8		iny				iny
.22df	a5 03		lda $03				lda 	codePtr+1
.22e1	91 78		sta ($78),y			sta 	(rsPointer),y
.22e3	c8		iny				iny
.22e4	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.22e6	91 78		sta ($78),y			sta 	(rsPointer),y
.22e8	a8		tay				tay 								; fix Y back again to original value
.22e9	60		rts				rts
.22ea					RSLoadPosition:
.22ea	a8		tay				tay
.22eb	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.22ed	85 02		sta $02				sta 	codePtr
.22ef	c8		iny				iny
.22f0	b1 78		lda ($78),y			lda 	(rsPointer),y
.22f2	85 03		sta $03				sta 	codePtr+1
.22f4	c8		iny				iny
.22f5	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.22f7	a8		tay				tay 								; to Y
.22f8	60		rts				rts

;******  Return to file: main/main.asm

.22f9					mainHandler:
.22f9	7c fc 22	jmp ($22fc,x)			jmp 	(mainVectors,x)
.22fc					mainVectors:
>22fc	5d 22					.word CheckRightParen      ; index 0
>22fe	14 10					.word XCommandClear        ; index 2
>2300	a3 1c					.word LinkEvaluate         ; index 4
>2302	af 1c					.word LinkEvaluateInteger  ; index 6
>2304	b5 1c					.word LinkEvaluateSmallInt ; index 8
>2306	a9 1c					.word LinkEvaluateTerm     ; index 10
>2308	39 21					.word MLInt32ToString      ; index 12
>230a	df 12					.word Command_XNew         ; index 14
>230c	a3 13					.word PrintString          ; index 16
>230e	c9 14					.word Command_RunFrom      ; index 18
>2310	51 20					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.2312					section_end_main:
.2312					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.2312					assemblerHandler:
.2312	7c 15 23	jmp ($2315,x)			jmp 	(assemblerVectors,x)
.2315					assemblerVectors:

;******  Return to file: basic.asm

.2315					section_end_assembler:
.2315					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.37a6					ExternSave:
.37a6	20 ee 37	jsr $37ee			jsr 	ExternGetLength 			; get length of file into A
.37a9	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.37ac	a9 01		lda #$01			lda 	#1
.37ae	a2 08		ldx #$08			ldx 	#8	 						; device #8
.37b0	a0 00		ldy #$00			ldy 	#0
.37b2	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.37b5	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.37b7	85 04		sta $04				sta 	temp0
.37b9	a5 51		lda $51				lda 	esInt1+1
.37bb	85 05		sta $05				sta 	temp0+1
.37bd	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.37bf	a4 52		ldy $52				ldy 	esInt1+2
.37c1	a9 04		lda #$04			lda 	#temp0 						; ref to start address
.37c3	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.37c6	b0 01		bcs $37c9			bcs 	_ESSave
.37c8	60		rts				rts
.37c9					_ESSave:
.37c9	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.37cb	20 f6 23	jsr $23f6		jsr	errorHandler
.37ce					ExternLoad:
.37ce	20 ee 37	jsr $37ee			jsr 	ExternGetLength 			; get length of file into A
.37d1	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.37d4	a9 01		lda #$01			lda 	#1
.37d6	a2 08		ldx #$08			ldx 	#8	 						; device #8
.37d8	a0 00		ldy #$00			ldy 	#0
.37da	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.37dd	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.37df	a4 51		ldy $51				ldy 	esInt1+1
.37e1	a9 00		lda #$00			lda 	#0 							; load command
.37e3	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.37e6	b0 01		bcs $37e9			bcs 	_ESLoad
.37e8	60		rts				rts
.37e9					_ESLoad:
.37e9	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.37eb	20 f6 23	jsr $23f6		jsr	errorHandler
.37ee					ExternGetLength:
.37ee	a5 48		lda $48				lda 	esInt0 						; length into A.
.37f0	85 04		sta $04				sta 	temp0
.37f2	a5 49		lda $49				lda 	esInt0+1
.37f4	85 05		sta $05				sta 	temp0+1
.37f6	a0 00		ldy #$00			ldy 	#0
.37f8	b1 04		lda ($04),y			lda 	(temp0),y
.37fa	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.37fc	a4 49		ldy $49				ldy 	esInt0+1
.37fe	e8		inx				inx 								; advance over the length pointer.
.37ff	d0 01		bne $3802			bne 	_ESNoCarry
.3801	c8		iny				iny
.3802					_ESNoCarry:
.3802	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0b20					bufferCount:
>0b20							.fill 	0
.0b20					bufferStorage:
>0b20							.fill 	MaxLineInputSize
.2315					IOInitialise:
.2315	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.2317	20 40 23	jsr $2340			jsr 	IOPrintChar
.231a	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.231c	20 6c 23	jsr $236c			jsr 	IOInk
.231f	a9 00		lda #$00			lda 	#0
.2321	20 80 23	jsr $2380			jsr 	IOPaper
.2324	20 28 23	jsr $2328			jsr 	IOClearScreen
.2327	60		rts				rts
.2328					IOClearScreen:
.2328	48		pha				pha
.2329	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.232b	20 40 23	jsr $2340			jsr 	IOPrintChar
.232e	68		pla				pla
.232f	60		rts				rts
.2330					IONewLine:
.2330	48		pha				pha
.2331	a9 0d		lda #$0d			lda 	#13
.2333	20 40 23	jsr $2340			jsr 	IOPrintChar
.2336	68		pla				pla
.2337	60		rts				rts
.2338					IOTab:
.2338	48		pha				pha
.2339	a9 20		lda #$20			lda 	#32
.233b	20 40 23	jsr $2340			jsr 	IOPrintChar
.233e	68		pla				pla
.233f	60		rts				rts
.2340					IOPrintChar:
.2340	aa		tax				tax 								; save in X so we can save Y
.2341	5a		phy				phy
.2342	8a		txa				txa
.2343	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.2345	d0 02		bne $2349			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.2347	a9 14		lda #$14			lda 	#$14
.2349					_IOPCNotBS:
.2349	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.234c	7a		ply				ply
.234d	60		rts				rts
.234e					IOInkey:
.234e	98		tya				tya
.234f	48		pha				pha
.2350	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2353	85 0c		sta $0c				sta 	tempShort
.2355	68		pla				pla
.2356	a8		tay				tay
.2357	a5 0c		lda $0c				lda 	tempShort					; no key pressed.
.2359	f0 10		beq $236b			beq 	_IOIExit
.235b	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.235d	f0 0c		beq $236b			beq 	_IOIExit
.235f	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.2361	f0 06		beq $2369			beq 	_IOIBackspace
.2363	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.2365	90 e7		bcc $234e			bcc 	IOInkey
.2367	b0 02		bcs $236b			bcs 	_IOIExit
.2369					_IOIBackspace:
.2369	a9 08		lda #$08			lda 	#8 							; return chr(8)
.236b					_IOIExit:
.236b	60		rts				rts
.236c					IOInk:
.236c	48		pha				pha
.236d	29 07		and #$07			and 	#7 							; 8 primaries
.236f	aa		tax				tax
.2370	bd 78 23	lda $2378,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.2373	20 40 23	jsr $2340			jsr 	IOPrintChar
.2376	68		pla				pla
.2377	60		rts				rts
.2378					_IOColourTable:
>2378	90						.byte 	$90 					; 0 Black
>2379	96						.byte 	$96 					; 1 Red
>237a	1e						.byte 	$1E 					; 2 Green
>237b	9e						.byte 	$9E 					; 3 Yellow
>237c	9a						.byte 	$9A 					; 4 Blue
>237d	9c						.byte 	$9C 					; 5 Magenta
>237e	9f						.byte 	$9F 					; 6 Cyan
>237f	05						.byte 	$05 					; 7 White
.2380					IOPaper:
.2380	48		pha				pha
.2381	48		pha				pha
.2382	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.2384	20 40 23	jsr $2340			jsr 	IOPrintChar 			; and then swap them again.
.2387	68		pla				pla
.2388	20 6c 23	jsr $236c			jsr 	IOInk
.238b	a9 01		lda #$01			lda 	#1
.238d	20 40 23	jsr $2340			jsr 	IOPrintChar
.2390	68		pla				pla
.2391	60		rts				rts
.2392					IOLocate:
.2392	48		pha				pha
.2393	a9 13		lda #$13			lda 	#$13 					; home cursor code
.2395	20 40 23	jsr $2340			jsr 	IOPrintChar
.2398	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.239a	20 a1 23	jsr $23a1			jsr 	_IOLoc2
.239d	68		pla				pla
.239e	a8		tay				tay
.239f	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.23a1					_IOLoc2:
.23a1	c0 00		cpy #$00			cpy 	#0
.23a3	f0 06		beq $23ab			beq 	_IOLocExit
.23a5	20 40 23	jsr $2340			jsr 	IOPrintChar
.23a8	88		dey				dey
.23a9	d0 f6		bne $23a1			bne 	_IOLoc2
.23ab					_IOLocExit:
.23ab	60		rts				rts
.23ac					IOInput:
.23ac	a9 00		lda #$00			lda 	#0
.23ae	8d 20 0b	sta $0b20			sta 	bufferCount
.23b1					_IOILoop:
.23b1	20 cf ff	jsr $ffcf			jsr 	$FFCF
.23b4	c9 0d		cmp #$0d			cmp 	#13
.23b6	f0 10		beq $23c8			beq 	_IOIExit
.23b8	ae 20 0b	ldx $0b20			ldx 	bufferCount
.23bb	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.23bd	f0 f2		beq $23b1			beq 	_IOILoop
.23bf	ee 20 0b	inc $0b20			inc 	bufferCount
.23c2	9d 21 0b	sta $0b21,x			sta 	bufferStorage+1,x
.23c5	4c b1 23	jmp $23b1			jmp 	_IOILoop
.23c8					_IOIExit:
.23c8	a9 20		lda #$20			lda 	#(bufferCount) & $FF
.23ca	85 04		sta $04				sta 	temp0
.23cc	a9 0b		lda #$0b			lda 	#(bufferCount) >> 8
.23ce	85 05		sta $05				sta 	1+(temp0)
.23d0	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.23d1					IOReadTimer:
.23d1	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.23d4	48		pha				pha
.23d5	8a		txa				txa
.23d6	a8		tay				tay
.23d7	68		pla				pla
.23d8	60		rts				rts

;******  Return to file: device/device.asm

.23d9					deviceHandler:
.23d9	7c dc 23	jmp ($23dc,x)			jmp 	(deviceVectors,x)
.23dc					deviceVectors:
>23dc	28 23					.word IOClearScreen        ; index 0
>23de	30 23					.word IONewLine            ; index 2
>23e0	15 23					.word IOInitialise         ; index 4
>23e2	6c 23					.word IOInk                ; index 6
>23e4	4e 23					.word IOInkey              ; index 8
>23e6	ac 23					.word IOInput              ; index 10
>23e8	ce 37					.word ExternLoad           ; index 12
>23ea	92 23					.word IOLocate             ; index 14
>23ec	80 23					.word IOPaper              ; index 16
>23ee	40 23					.word IOPrintChar          ; index 18
>23f0	a6 37					.word ExternSave           ; index 20
>23f2	38 23					.word IOTab                ; index 22
>23f4	d1 23					.word IOReadTimer          ; index 24

;******  Return to file: basic.asm

.23f6					section_end_device:
.23f6					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.23f6					ErrorHandler:
.23f6	8a		txa				txa
.23f7	48		pha				pha
.23f8	a9 01		lda #$01			lda 	#1 							; red
.23fa	a2 06		ldx #$06		ldx	#6
.23fc	20 d9 23	jsr $23d9		jsr	deviceHandler
.23ff	68		pla				pla
.2400	aa		tax				tax
.2401	a9 72		lda #$72			lda 	#(ErrorTextList) & $FF
.2403	85 04		sta $04				sta 	temp0
.2405	a9 24		lda #$24			lda 	#(ErrorTextList) >> 8
.2407	85 05		sta $05				sta 	1+(temp0)
.2409	ca		dex		_EHFind:dex									; errors start at 1
.240a	f0 10		beq $241c			beq 	_EHFound
.240c	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.240e	38		sec				sec
.240f	a5 04		lda $04				lda 	temp0
.2411	71 04		adc ($04),y			adc 	(temp0),y
.2413	85 04		sta $04				sta 	temp0
.2415	90 f2		bcc $2409			bcc 	_EHFind
.2417	e6 05		inc $05				inc 	temp0+1
.2419	4c 09 24	jmp $2409			jmp 	_EHFind
.241c					_EHFound:
.241c	a2 10		ldx #$10		ldx	#16
.241e	20 f9 22	jsr $22f9		jsr	mainHandler
.2421	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.2423	b1 02		lda ($02),y			lda 	(codePtr),y
.2425	f0 3d		beq $2464			beq 	_EHNoLine
.2427	a5 03		lda $03				lda 	codePtr+1 					; code running from the command line.
.2429	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.242c	90 36		bcc $2464			bcc 	_EHNoLine
.242e	a9 6e		lda #$6e			lda 	#(EHAtMsg) & $FF
.2430	85 04		sta $04				sta 	temp0
.2432	a9 24		lda #$24			lda 	#(EHAtMsg) >> 8
.2434	85 05		sta $05				sta 	1+(temp0)
.2436	a2 10		ldx #$10		ldx	#16
.2438	20 f9 22	jsr $22f9		jsr	mainHandler
.243b	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.243d	a2 00		ldx #$00			ldx 	#0
.243f	b1 02		lda ($02),y			lda 	(codePtr),y
.2441	95 48		sta $48,x			sta 	esInt0,x
.2443	c8		iny				iny
.2444	b1 02		lda ($02),y			lda 	(codePtr),y
.2446	95 50		sta $50,x			sta 	esInt1,x
.2448	a9 00		lda #$00			lda 	#0
.244a	95 58		sta $58,x			sta 	esInt2,x
.244c	95 60		sta $60,x			sta 	esInt3,x
.244e	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2450	85 04		sta $04				sta 	temp0
.2452	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2454	85 05		sta $05				sta 	1+(temp0)
.2456	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.2458	a9 00		lda #$00			lda 	#0							; stack position zero.
.245a	a2 0c		ldx #$0c		ldx	#12
.245c	20 f9 22	jsr $22f9		jsr	mainHandler
.245f	a2 10		ldx #$10		ldx	#16
.2461	20 f9 22	jsr $22f9		jsr	mainHandler
.2464					_EHNoLine:
.2464	a2 02		ldx #$02		ldx	#2
.2466	20 d9 23	jsr $23d9		jsr	deviceHandler
.2469	a2 02		ldx #$02		ldx	#2
.246b	20 f1 28	jsr $28f1		jsr	interactionHandler
.246e					EHAtMsg:
>246e	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.2472					ErrorTextList:
>2472	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>247a	20 6e 6f 74 20 50 72 65 73 65 6e 74
>2486	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>248e	45 72 72 6f 72
>2493	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>249b	64 69 73 61 62 6c 65 64
>24a3	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>24ab	6f 6e 20 66 61 69 6c 65 64
>24b4	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>24bc	42 79 20 5a 65 72 6f
>24c3	04 53 74 6f 70				.text 4,"Stop"
>24c8	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>24d0	73 6d 61 74 63 68
>24d6	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>24de	20 56 61 6c 75 65
>24e4	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>24ec	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>24fa	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>2502	20 63 6f 6d 6d 61
>2508	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>2510	20 72 65 66 65 72 65 6e 63 65
>251a	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>2522	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>2530	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>2538	74 6f 6f 20 6c 6f 6e 67 2e
>2541	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>2549	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>2556	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>255e	69 74 68 6f 75 74 20 52 45 50 45 41 54
>256b	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>2573	74 68 6f 75 74 20 46 4f 52
>257c	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>2584	74 68 6f 75 74 20 57 48 49 4c 45
>258f	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>2597	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>25a4	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>25ac	54 20 69 6e 64 65 78
>25b3	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>25bb	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>25cb	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>25d3	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>25e2	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>25ea	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>25fa	63 65 2e
>25fd	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>2605	20 50 72 6f 63 65 64 75 72 65
>260f	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>2617	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>2627	2e
>2628	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>2630	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>263e	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>2646	75 69 72 65 73 20 61 72 72 61 79
>2651	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>2659	61 79 20 69 6e 64 65 78 2e
>2662	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>266a	64 61 74 61
>266e	15 43 61 6e 6e 6f 74 20			.text 21,"Cannot tokenise line."
>2676	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65 2e
>2684	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>268c	69 6c 65 64
>2690	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>2698	69 6c 65 64
>269c	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.269d					section_end_error:
.269d					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.269d					ExtensionHandler:
.269d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.269f	d0 08		bne $26a9			bne 	_ExtensionUnary 			; is passed in A.
.26a1	b1 02		lda ($02),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.26a3	c8		iny				iny
.26a4	0a		asl a				asl 	a
.26a5	aa		tax				tax
.26a6	7c a7 26	jmp ($26a7,x)			jmp 	(Group2Vectors-12,x)
.26a9					_ExtensionUnary:
.26a9	48		pha				pha 								; save stack pos in A
.26aa	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token, double into X
.26ac	c8		iny				iny
.26ad	0a		asl a				asl 	a
.26ae	aa		tax				tax
.26af	68		pla				pla 								; restore stack pos and call group3 command.
.26b0	7c ab 26	jmp ($26ab,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.26b3					Group2Vectors:
>26b3	c3 26					.word	Command_VPoke            ; $86 vpoke
>26b5	c6 26					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.26b7					Group3Vectors:
>26b7	07 27					.word	Command_VPeek            ; $86 vpeek(
>26b9	0a 27					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.26bb					XEvaluateInteger:
.26bb	8a		txa				txa
.26bc	a2 06		ldx #$06		ldx	#6
.26be	20 f9 22	jsr $22f9		jsr	mainHandler
.26c1	aa		tax				tax
.26c2	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.26c3					Command_VPoke:
.26c3	38		sec				sec 						; one byte , CS
.26c4	b0 01		bcs $26c7			bcs 	CmdVideoWrite
.26c6					Command_VDoke:
.26c6	18		clc				clc 						; two bytes, CC
.26c7					CmdVideoWrite:
.26c7	08		php				php 						; save one or two btes
.26c8	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.26ca	20 bb 26	jsr $26bb			jsr 	XEvaluateInteger
.26cd	20 6a 22	jsr $226a			jsr 	CheckComma
.26d0	e8		inx				inx
.26d1	20 bb 26	jsr $26bb			jsr 	XEvaluateInteger
.26d4	ca		dex				dex
.26d5	20 e6 26	jsr $26e6			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.26d8	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.26da	8d 23 9f	sta $9f23			sta 	$9F23
.26dd	28		plp				plp 						; if it was Poke then exit
.26de	b0 05		bcs $26e5			bcs 	_CVWExit
.26e0	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.26e2	8d 23 9f	sta $9f23			sta 	$9F23
.26e5					_CVWExit:
.26e5	60		rts				rts
.26e6					SetUpTOSVRamAddress:
.26e6	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.26e8	29 01		and #$01			and 	#1
.26ea	15 60		ora $60,x			ora 	esInt3,x
.26ec	d0 14		bne $2702			bne 	CVWValue
.26ee	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.26f0	8d 20 9f	sta $9f20			sta 	$9F20
.26f3	b5 50		lda $50,x			lda 	esInt1,x
.26f5	8d 21 9f	sta $9f21			sta	 	$9F21
.26f8	b5 58		lda $58,x			lda 	esInt2,x
.26fa	29 01		and #$01			and 	#1
.26fc	09 10		ora #$10			ora 	#$10 				; step 1.
.26fe	8d 22 9f	sta $9f22			sta 	$9F22
.2701	60		rts				rts
.2702					CVWValue:
.2702	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2704	20 f6 23	jsr $23f6		jsr	errorHandler
.2707					Command_VPeek:
.2707	38		sec				sec 						; one byte , CS
.2708	b0 01		bcs $270b			bcs 	CmdVideoRead
.270a					Command_VDeek:
.270a	18		clc				clc 						; two bytes, CC
.270b					CmdVideoRead:
.270b	08		php				php 						; save action on stack.
.270c	aa		tax				tax 						; save stack position
.270d	20 bb 26	jsr $26bb			jsr 	XEvaluateInteger 	; address
.2710	20 5d 22	jsr $225d			jsr 	CheckRightParen 	; closing right bracket.
.2713	20 e6 26	jsr $26e6			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2716	20 ea 21	jsr $21ea			jsr 	MInt32False 		; zero return.
.2719	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.271c	95 48		sta $48,x			sta 	esInt0,x
.271e	28		plp				plp 						; check if DOKE (carry was clear)
.271f	b0 05		bcs $2726			bcs 	_CVRExit
.2721	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2724	95 50		sta $50,x			sta 	esInt1,x
.2726					_CVRExit:
.2726	8a		txa				txa 						; return X position.
.2727	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2728					section_end_extension:
.2728					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2728					floatingpointHandler:
.2728	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.272a	20 f6 23	jsr $23f6		jsr	errorHandler

;******  Return to file: basic.asm

.272d					section_end_floatingpoint:
.272d					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.272d					ColdStartEntry:
.272d	a2 ff		ldx #$ff			ldx 	#$FF
.272f	9a		txs				txs
.2730	a2 00		ldx #$00		ldx	#0
.2732	20 d9 23	jsr $23d9		jsr	deviceHandler
.2735	a0 ff		ldy #$ff			ldy 	#255
.2737					_CSBanner:
.2737	c8		iny				iny
.2738	b9 59 27	lda $2759,y			lda 	Intro,y
.273b	f0 14		beq $2751			beq 	_CSStart
.273d	c9 08		cmp #$08			cmp 	#8
.273f	90 08		bcc $2749			bcc 	_CSInk
.2741	a2 12		ldx #$12		ldx	#18
.2743	20 d9 23	jsr $23d9		jsr	deviceHandler
.2746	4c 37 27	jmp $2737			jmp 	_CSBanner
.2749					_CSInk:
.2749	a2 06		ldx #$06		ldx	#6
.274b	20 d9 23	jsr $23d9		jsr	deviceHandler
.274e	4c 37 27	jmp $2737			jmp 	_CSBanner
.2751					_CSStart:
.2751	a2 02		ldx #$02		ldx	#2
.2753	20 f9 22	jsr $22f9		jsr	mainHandler
.2756	4c 6d 28	jmp $286d			jmp 	WarmStartEntry
>2759	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2761	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2771	20 2a 2a 2a 0d 0d
>2777	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>277f	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>278f	32 30 32 31 0d 0d
>2795	02 42 61 73 69 63 20				.text 	2,"Basic "
>279c	30 2e 31 32					.text "0.12"
>27a0	20 28						.text 	" ("
>27a2	31 31 2d 4d 61 72 2d 32				.text "11-Mar-21"
>27aa	31
>27ab	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.27af					DeleteLine:
.27af	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.27b2	85 04		sta $04				sta 	temp0
.27b4	ad c9 0a	lda $0ac9			lda 	basePage+1
.27b7	85 05		sta $05				sta 	temp0+1
.27b9	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.27bb	a5 48		lda $48				lda 	esInt0
.27bd	d1 04		cmp ($04),y			cmp 	(temp0),y
.27bf	d0 07		bne $27c8			bne 	_DLNext
.27c1	c8		iny				iny
.27c2	a5 50		lda $50				lda 	esInt1
.27c4	d1 04		cmp ($04),y			cmp 	(temp0),y
.27c6	f0 0a		beq $27d2			beq 	_DLFound
.27c8	20 f0 27	jsr $27f0	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.27cb	d0 ec		bne $27b9			bne 	_DLLoop
.27cd	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.27cf	b1 04		lda ($04),y			lda 	(temp0),y
.27d1	60		rts				rts
.27d2					_DLFound:
.27d2	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.27d4	b1 04		lda ($04),y			lda 	(temp0),y
.27d6	a8		tay				tay
.27d7	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.27d9					_DLCopyDown:
.27d9	b1 04		lda ($04),y			lda 	(temp0),y
.27db	81 04		sta ($04,x)			sta 	(temp0,x)
.27dd	e6 04		inc $04				inc 	temp0 						; advance pointer
.27df	d0 02		bne $27e3			bne 	_DLNoCarry
.27e1	e6 05		inc $05				inc 	temp0+1
.27e3					_DLNoCarry:
.27e3	a5 04		lda $04				lda 	temp0 						; until hit low memory
.27e5	c5 0f		cmp $0f				cmp 	lowMemory
.27e7	d0 f0		bne $27d9			bne 	_DLCopyDown
.27e9	a5 05		lda $05				lda 	temp0+1
.27eb	c5 10		cmp $10				cmp 	lowMemory+1
.27ed	d0 ea		bne $27d9			bne 	_DLCopyDown
.27ef	60		rts				rts
.27f0					IAdvanceTemp0:
.27f0	84 0c		sty $0c				sty 	tempShort
.27f2	18		clc				clc
.27f3	a0 00		ldy #$00			ldy 	#0
.27f5	b1 04		lda ($04),y			lda 	(temp0),y
.27f7	65 04		adc $04				adc 	temp0
.27f9	85 04		sta $04				sta 	temp0
.27fb	90 02		bcc $27ff			bcc 	_IATNoCarry
.27fd	e6 05		inc $05				inc 	temp0+1
.27ff					_IATNoCarry:
.27ff	b1 04		lda ($04),y			lda 	(temp0),y
.2801	a4 0c		ldy $0c				ldy 	tempShort
.2803	c9 00		cmp #$00			cmp		#0
.2805	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.2806					InsertLine:
.2806	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2809	85 04		sta $04				sta 	temp0
.280b	ad c9 0a	lda $0ac9			lda 	basePage+1
.280e	85 05		sta $05				sta 	temp0+1
.2810					_ILLoop:
.2810	a0 01		ldy #$01			ldy 	#1
.2812	b1 04		lda ($04),y			lda 	(temp0),y
.2814	c5 48		cmp $48				cmp 	esInt0
.2816	c8		iny				iny
.2817	b1 04		lda ($04),y			lda 	(temp0),y
.2819	e5 50		sbc $50				sbc 	esInt1
.281b	b0 05		bcs $2822			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.281d	20 f0 27	jsr $27f0			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2820	d0 ee		bne $2810			bne 	_ILLoop
.2822					_ILFound:
.2822	a5 0f		lda $0f				lda 	lowMemory 					; shift lowMemory up to make space for it.
.2824	85 06		sta $06				sta 	temp1
.2826	a5 10		lda $10				lda 	lowMemory+1
.2828	85 07		sta $07				sta 	temp1+1
.282a	ad 18 0d	lda $0d18			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.282d	18		clc				clc
.282e	69 03		adc #$03			adc 	#3
.2830	a8		tay				tay
.2831	a2 00		ldx #$00			ldx 	#0
.2833	a1 06		lda ($06,x)	_ILMove:lda 	(temp1,x)
.2835	91 06		sta ($06),y			sta 	(temp1),y
.2837	a5 06		lda $06				lda 	temp1
.2839	c5 04		cmp $04				cmp 	temp0
.283b	d0 06		bne $2843			bne 	_ILMNext
.283d	a5 07		lda $07				lda 	temp1+1
.283f	c5 05		cmp $05				cmp 	temp0+1
.2841	f0 0b		beq $284e			beq 	_ILMCopy
.2843					_ILMNext:
.2843	a5 06		lda $06				lda 	temp1
.2845	d0 02		bne $2849			bne 	_ILNoBorrow
.2847	c6 07		dec $07				dec 	temp1+1
.2849					_ILNoBorrow:
.2849	c6 06		dec $06				dec 	temp1
.284b	4c 33 28	jmp $2833			jmp 	_ILMove
.284e					_ILMCopy:
.284e	98		tya				tya 								; Y is the offset of the new line.
.284f	81 04		sta ($04,x)			sta 	(temp0,x)					; X = 0 still.
.2851	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2853	a5 48		lda $48				lda 	esInt0
.2855	91 04		sta ($04),y			sta 	(temp0),y
.2857	c8		iny				iny
.2858	a5 50		lda $50				lda 	esInt1
.285a	91 04		sta ($04),y			sta 	(temp0),y
.285c	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.285e					_ILMCopy2:
.285e	b1 02		lda ($02),y			lda 	(codePtr),y
.2860	c8		iny				iny
.2861	c8		iny				iny
.2862	c8		iny				iny
.2863	91 04		sta ($04),y			sta 	(temp0),y
.2865	88		dey				dey
.2866	88		dey				dey
.2867	cc 18 0d	cpy $0d18			cpy 	tokenBufferIndex
.286a	d0 f2		bne $285e			bne 	_ILMCopy2
.286c	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.286d					WarmStartEntry:
.286d	a2 ff		ldx #$ff			ldx 	#$FF
.286f	9a		txs				txs
.2870	a9 02		lda #$02			lda 	#2							; green text.
.2872	a2 06		ldx #$06		ldx	#6
.2874	20 d9 23	jsr $23d9		jsr	deviceHandler
.2877	a2 0a		ldx #$0a		ldx	#10
.2879	20 d9 23	jsr $23d9		jsr	deviceHandler
.287c	a5 04		lda $04				lda 	temp0	 					; copy temp0 to codePtr
.287e	85 02		sta $02				sta 	codePtr
.2880	a5 05		lda $05				lda 	temp0+1
.2882	85 03		sta $03				sta 	codePtr+1
.2884	a2 02		ldx #$02		ldx	#2
.2886	20 d9 23	jsr $23d9		jsr	deviceHandler
.2889	a2 04		ldx #$04		ldx	#4
.288b	20 38 32	jsr $3238		jsr	tokeniserHandler
.288e	90 25		bcc $28b5			bcc 	WSEError 					; failed.
.2890	a9 15		lda #$15			lda 	#(tokenHeader) & $FF
.2892	85 02		sta $02				sta 	codePtr
.2894	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.2896	85 03		sta $03				sta 	1+(codePtr)
.2898	ad 18 0c	lda $0c18			lda 	tokenBuffer 				; is it a blank line, go get another line.
.289b	c9 80		cmp #$80			cmp 	#$80
.289d	f0 ce		beq $286d			beq 	WarmStartEntry
.289f	29 c0		and #$c0			and 	#$C0						; does it start with a number
.28a1	c9 40		cmp #$40			cmp 	#$40
.28a3	f0 15		beq $28ba			beq 	HasLineNumber
.28a5	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.28a7	8d 15 0c	sta $0c15			sta 	tokenHeader 				; fake program line.
.28aa	8d 16 0c	sta $0c16			sta 	tokenHeader+1
.28ad	8d 17 0c	sta $0c17			sta 	tokenHeader+2
.28b0	a2 12		ldx #$12		ldx	#18
.28b2	20 f9 22	jsr $22f9		jsr	mainHandler
.28b5					WSEError:
.28b5	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.28b7	20 f6 23	jsr $23f6		jsr	errorHandler
.28ba					HasLineNumber:
.28ba	a0 03		ldy #$03			ldy 	#3 							; get line number
.28bc	a2 00		ldx #$00			ldx 	#0
.28be	20 88 1c	jsr $1c88			jsr 	EvaluateInteger
.28c1	a5 58		lda $58				lda 	esInt2		 				; check in range.
.28c3	05 60		ora $60				ora 	esInt3
.28c5	d0 ee		bne $28b5			bne 	WSEError
.28c7	98		tya				tya 								; make codePtr point to code after the line number.
.28c8	18		clc				clc
.28c9	65 02		adc $02				adc 	codePtr
.28cb	85 02		sta $02				sta 	codePtr
.28cd	90 02		bcc $28d1			bcc		_HLNNoCarry
.28cf	e6 03		inc $03				inc 	codePtr+1
.28d1					_HLNNoCarry:
.28d1	98		tya				tya 								; subtract that offset from the code buffer index
.28d2	38		sec				sec
.28d3	49 ff		eor #$ff			eor 	#$FF
.28d5	6d 18 0d	adc $0d18			adc 	tokenBufferIndex
.28d8	18		clc				clc 								; add space allowing for header & $80 trailer
.28d9	69 04		adc #$04			adc 	#4
.28db	8d 18 0d	sta $0d18			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.28de	20 af 27	jsr $27af			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.28e1					_HLNNoDelete:
.28e1	ad 18 0d	lda $0d18			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.28e4	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.28e6	f0 03		beq $28eb			beq 	_HLMEditDone
.28e8	20 06 28	jsr $2806			jsr 	InsertLine 					; insert the line in
.28eb					_HLMEditDone:
.28eb	20 14 10	jsr $1014			jsr 	CommandClear 				; clear all variables etc.
.28ee	4c 6d 28	jmp $286d			jmp 	WarmStartEntry

;******  Return to file: interaction/interaction.asm

.28f1					interactionHandler:
.28f1	7c f4 28	jmp ($28f4,x)			jmp 	(interactionVectors,x)
.28f4					interactionVectors:
>28f4	2d 27					.word ColdStartEntry       ; index 0
>28f6	6d 28					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.28f8					section_end_interaction:
.28f8					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.28f8					StringChrs:
.28f8	aa		tax				tax 								; set up stack
.28f9	a9 02		lda #$02			lda 	#2
.28fb	20 b2 29	jsr $29b2			jsr 	AllocateSoftString
.28fe	98		tya				tya
.28ff	20 d8 29	jsr $29d8			jsr 	WriteSoftString
.2902	20 07 29	jsr $2907			jsr 	ReturnSoftString
.2905	8a		txa				txa
.2906	60		rts				rts
.2907					ReturnSoftString:
.2907	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.2909	95 48		sta $48,x			sta 	esInt0,x
.290b	a5 7b		lda $7b				lda 	softMemAlloc+1
.290d	95 50		sta $50,x			sta 	esInt1,x
.290f	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.2911	95 58		sta $58,x			sta 	esInt2,x
.2913	95 60		sta $60,x			sta 	esInt3,x
.2915	a9 40		lda #$40			lda 	#$40 						; type string.
.2917	95 40		sta $40,x			sta 	esType,x
.2919	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.291a					STRCompare:
.291a	48		pha				pha 								; save A
.291b	aa		tax				tax 								; put stack pos in X
.291c	98		tya				tya
.291d	48		pha				pha
.291e	20 52 29	jsr $2952			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.2921	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2923	b1 04		lda ($04),y			lda 	(temp0),y
.2925	d1 06		cmp ($06),y			cmp 	(temp1),y
.2927	90 02		bcc $292b			bcc 	_SCNotSmaller
.2929	b1 06		lda ($06),y			lda 	(temp1),y
.292b					_SCNotSmaller:
.292b	aa		tax				tax 								; put that in X. We compare this many chars first.
.292c					_SCCompareLoop:
.292c	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.292e	f0 0c		beq $293c			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2930	ca		dex				dex 								; decrement chars to compare.
.2931	c8		iny				iny 								; move to next character
.2932	38		sec				sec 								; calculate s1[y]-s2[y]
.2933	b1 04		lda ($04),y			lda 	(temp0),y
.2935	f1 06		sbc ($06),y			sbc 	(temp1),y
.2937	d0 0a		bne $2943			bne 	_SCReturnResult 			; if different return sign of A
.2939	4c 2c 29	jmp $292c			jmp 	_SCCompareLoop
.293c					_SCSameToEndShortest
.293c	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.293e	38		sec				sec
.293f	b1 04		lda ($04),y			lda 	(temp0),y
.2941	f1 06		sbc ($06),y			sbc 	(temp1),y
.2943					_SCReturnResult:
.2943	08		php				php 								; set return to zero preserving PSW.
.2944	a2 00		ldx #$00			ldx 	#0
.2946	28		plp				plp
.2947	f0 05		beq $294e			beq 	_SCExit 					; two values equal, then exit
.2949	ca		dex				dex 								; X = $FF
.294a	90 02		bcc $294e			bcc 	_SCExit 					; if 1st < 2nd then -1
.294c	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.294e					_SCExit:
.294e	68		pla				pla
.294f	a8		tay				tay
.2950	68		pla				pla
.2951	60		rts				rts
.2952					CopyStringPair:
.2952	b5 49		lda $49,x			lda 	esInt0+1,x
.2954	85 06		sta $06				sta 	temp1
.2956	b5 51		lda $51,x			lda 	esInt1+1,x
.2958	85 07		sta $07				sta 	temp1+1
.295a					CopyStringTop:
.295a	b5 48		lda $48,x			lda 	esInt0,x
.295c	85 04		sta $04				sta 	temp0
.295e	b5 50		lda $50,x			lda 	esInt1,x
.2960	85 05		sta $05				sta 	temp0+1
.2962	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2963					StringConcat:
.2963	aa		tax				tax									; stack pos in X
.2964	98		tya				tya
.2965	48		pha				pha
.2966	20 52 29	jsr $2952			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2969	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.296a	a0 00		ldy #$00			ldy 	#0
.296c	b1 04		lda ($04),y			lda 	(temp0),y
.296e	71 06		adc ($06),y			adc 	(temp1),y
.2970	b0 1c		bcs $298e			bcs 	_SCError 					; just too many characters here.
.2972	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2974	b0 18		bcs $298e			bcs 	_SCError
.2976	20 b2 29	jsr $29b2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2979	20 a9 29	jsr $29a9			jsr 	CopySoftToStack 			; copy that to the stack.
.297c	20 93 29	jsr $2993			jsr 	SCCopyTemp0 				; copy temp0
.297f	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.2981	85 04		sta $04				sta 	temp0
.2983	a5 07		lda $07				lda 	temp1+1
.2985	85 05		sta $05				sta 	temp0+1
.2987	20 93 29	jsr $2993			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.298a	68		pla				pla
.298b	a8		tay				tay
.298c	8a		txa				txa 								; and A
.298d	60		rts				rts
.298e					_SCError:
.298e	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2990	20 f6 23	jsr $23f6		jsr	errorHandler
.2993					SCCopyTemp0:
.2993	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2995	b1 04		lda ($04),y			lda 	(temp0),y
.2997	85 08		sta $08				sta 	temp2
.2999					_SCCopyLoop:
.2999	a5 08		lda $08				lda 	temp2 						; done the lot
.299b	f0 0b		beq $29a8			beq 	_SCCopyExit
.299d	c6 08		dec $08				dec 	temp2
.299f	c8		iny				iny 								; get next char
.29a0	b1 04		lda ($04),y			lda 	(temp0),y
.29a2	20 d8 29	jsr $29d8			jsr 	WriteSoftString 			; write to soft string.
.29a5	4c 99 29	jmp $2999			jmp 	_SCCopyLoop
.29a8					_SCCopyExit:
.29a8	60		rts				rts
.29a9					CopySoftToStack:
.29a9	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.29ab	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.29ad	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.29af	95 50		sta $50,x			sta 	esInt1,x
.29b1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.29b2					AllocateSoftString:
.29b2	85 0c		sta $0c				sta 	tempShort 					; save count
.29b4	98		tya				tya
.29b5	48		pha				pha
.29b6	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.29b8	d0 09		bne $29c3			bne 	_ASSDone
.29ba	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.29bc	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.29be	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.29c0	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.29c1	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.29c3					_ASSDone:
.29c3	38		sec				sec 								; allocate downwards enough memory
.29c4	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.29c6	e5 0c		sbc $0c				sbc 	tempShort 					; the soft memory pointer
.29c8	85 7a		sta $7a				sta 	softMemAlloc
.29ca	a5 7b		lda $7b				lda 	softMemAlloc+1
.29cc	e9 00		sbc #$00			sbc 	#0
.29ce	85 7b		sta $7b				sta 	softMemAlloc+1
.29d0	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.29d2	a8		tay				tay
.29d3	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.29d5	68		pla				pla
.29d6	a8		tay				tay
.29d7	60		rts				rts
.29d8					WriteSoftString:
.29d8	84 0c		sty $0c				sty 	tempShort 					; save Y
.29da	48		pha				pha 								; save character on stack
.29db	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.29dd	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.29df	18		clc				clc
.29e0	69 01		adc #$01			adc 	#1
.29e2	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.29e4	a8		tay				tay 								; offset in Y
.29e5	68		pla				pla 								; get char and write.
.29e6	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.29e8	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.29ea	60		rts				rts
.29eb					StrClone:
.29eb	aa		tax				tax 								; set up stack.
.29ec	98		tya				tya
.29ed	48		pha				pha
.29ee	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.29f0	b1 04		lda ($04),y			lda 	(temp0),y 					; this is the bytes required.
.29f2	18		clc				clc
.29f3	69 01		adc #$01			adc 	#1
.29f5	20 b2 29	jsr $29b2			jsr 	AllocateSoftString 			; allocate soft memory
.29f8	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.29fa	95 48		sta $48,x			sta 	esInt0,x
.29fc	a5 7b		lda $7b				lda 	softMemAlloc+1
.29fe	95 50		sta $50,x			sta 	esInt1,x
.2a00	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2a02	95 58		sta $58,x			sta 	esInt2,x
.2a04	95 60		sta $60,x			sta 	esInt3,x
.2a06	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2a08	95 40		sta $40,x			sta 	esType,x
.2a0a	20 93 29	jsr $2993			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2a0d	68		pla				pla
.2a0e	a8		tay				tay
.2a0f	8a		txa				txa
.2a10	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2a11					CaseString:
.2a11	48		pha				pha 								; save A and copy to X
.2a12	aa		tax				tax
.2a13	98		tya				tya
.2a14	48		pha				pha
.2a15	20 5a 29	jsr $295a			jsr 	CopyStringTop 				; target string -> temp0
.2a18	a0 00		ldy #$00			ldy 	#0
.2a1a	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.2a1c	18		clc				clc
.2a1d	69 01		adc #$01			adc 	#1 							; one more for length byte
.2a1f	20 b2 29	jsr $29b2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2a22	20 a9 29	jsr $29a9			jsr 	CopySoftToStack 			; copy that to the stack.
.2a25	a0 00		ldy #$00			ldy 	#0
.2a27	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.2a29	aa		tax				tax
.2a2a					_CSCopy:
.2a2a	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2a2c	f0 24		beq $2a52			beq 	_CSExit
.2a2e	ca		dex				dex
.2a2f	c8		iny				iny
.2a30	68		pla				pla 								; check direction
.2a31	48		pha				pha
.2a32	f0 0c		beq $2a40			beq 	_CSUpper
.2a34	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.2a36	c9 41		cmp #$41			cmp 	#"A"
.2a38	90 12		bcc $2a4c			bcc 	_CSWrite
.2a3a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2a3c	b0 0e		bcs $2a4c			bcs 	_CSWrite
.2a3e	90 0a		bcc $2a4a			bcc 	_CSFlipWrite
.2a40					_CSUpper:
.2a40	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.2a42	c9 61		cmp #$61			cmp 	#"a"
.2a44	90 06		bcc $2a4c			bcc 	_CSWrite
.2a46	c9 7b		cmp #$7b			cmp 	#"z"+1
.2a48	b0 02		bcs $2a4c			bcs 	_CSWrite
.2a4a					_CSFlipWrite:
.2a4a	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2a4c					_CSWrite:
.2a4c	20 d8 29	jsr $29d8			jsr 	WriteSoftString 			; add to soft string.
.2a4f	4c 2a 2a	jmp $2a2a			jmp 	_CSCopy
.2a52					_CSExit:
.2a52	68		pla				pla
.2a53	a8		tay				tay
.2a54	68		pla				pla
.2a55	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2a56					StringSubstring:
.2a56	48		pha				pha
.2a57	aa		tax				tax 								; access stack.
.2a58	98		tya				tya
.2a59	48		pha				pha
.2a5a	20 5a 29	jsr $295a			jsr 	CopyStringTop 				; point temp0 to the string.
.2a5d	a0 00		ldy #$00			ldy 	#0 							; get length.
.2a5f	b1 04		lda ($04),y			lda 	(temp0),Y
.2a61	85 06		sta $06				sta 	temp1
.2a63	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2a65	c5 06		cmp $06				cmp 	temp1 						; return "" if > length.
.2a67	f0 02		beq $2a6b			beq 	_SSBOkay
.2a69	b0 2a		bcs $2a95			bcs 	_SSBReturnNull
.2a6b					_SSBOkay:
.2a6b	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2a6d	18		clc				clc
.2a6e	69 01		adc #$01			adc 	#1
.2a70	38		sec				sec
.2a71	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2a73	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2a75	90 02		bcc $2a79			bcc		_SSBTrunc
.2a77	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2a79					_SSBTrunc:
.2a79	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2a7b	18		clc				clc
.2a7c	69 01		adc #$01			adc 	#1 							; add 1
.2a7e	20 b2 29	jsr $29b2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2a81	20 a9 29	jsr $29a9			jsr 	CopySoftToStack 			; copy that to the stack.
.2a84	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2a86					_SSBCopyLoop:
.2a86	a5 07		lda $07				lda 	temp1+1 					; done them all
.2a88	f0 0e		beq $2a98			beq 	_SSBExit
.2a8a	c6 07		dec $07				dec 	temp1+1
.2a8c	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2a8e	20 d8 29	jsr $29d8			jsr 	WriteSoftString
.2a91	c8		iny				iny
.2a92	4c 86 2a	jmp $2a86			jmp 	_SSBCopyLoop
.2a95					_SSBReturnNull:
.2a95	20 9c 2a	jsr $2a9c			jsr 	ReturnNull
.2a98					_SSBExit:
.2a98	68		pla				pla
.2a99	a8		tay				tay
.2a9a	68		pla				pla
.2a9b	60		rts				rts
.2a9c					ReturnNull:
.2a9c	a9 00		lda #$00			lda 	#0 							; clear null string
.2a9e	8d cc 0a	sta $0acc			sta 	NullString
.2aa1	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.2aa3	95 48		sta $48,x			sta 	esInt0,x
.2aa5	a9 0a		lda #$0a			lda 	#NullString >> 8
.2aa7	95 50		sta $50,x			sta 	esInt1,x
.2aa9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c10					srcStrLen:
>0c10							.fill 	1
.2aaa					StringWrite:
.2aaa	aa		tax				tax
.2aab	48		pha				pha
.2aac	98		tya				tya
.2aad	48		pha				pha
.2aae	20 d5 2a	jsr $2ad5			jsr 	CheckOverwriteCurrent
.2ab1	b0 0d		bcs $2ac0			bcs		_SWCopyCurrent
.2ab3	20 13 2b	jsr $2b13			jsr 	RequiresConcretion
.2ab6	90 0e		bcc $2ac6			bcc 	_SWWriteReference
.2ab8	20 76 2b	jsr $2b76			jsr 	CheckSpecialConcretion
.2abb	b0 09		bcs $2ac6			bcs 	_SWWriteReference
.2abd	20 27 2b	jsr $2b27			jsr 	AllocateHardMemory
.2ac0					_SWCopyCurrent:
.2ac0	20 5a 2b	jsr $2b5a			jsr 	CopyStringToHardMemory
.2ac3	4c d1 2a	jmp $2ad1			jmp 	_SWExit
.2ac6					_SWWriteReference
.2ac6	a0 00		ldy #$00			ldy 	#0
.2ac8	a5 04		lda $04				lda 	temp0
.2aca	91 06		sta ($06),y			sta 	(temp1),y
.2acc	c8		iny				iny
.2acd	a5 05		lda $05				lda 	temp0+1
.2acf	91 06		sta ($06),y			sta 	(temp1),y
.2ad1					_SWExit:
.2ad1	68		pla				pla
.2ad2	a8		tay				tay
.2ad3	68		pla				pla
.2ad4	60		rts				rts
.2ad5					CheckOverwriteCurrent:
.2ad5	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2ad7	b5 51		lda $51,x			lda 	esInt1+1,x
.2ad9	85 05		sta $05				sta 	temp0+1
.2adb	b5 49		lda $49,x			lda 	esInt0+1,x
.2add	85 04		sta $04				sta 	temp0
.2adf	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied and save it.
.2ae1	8d 10 0c	sta $0c10			sta 	srcStrLen
.2ae4	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2ae6	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2ae8	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2aea	85 07		sta $07				sta 	temp1+1
.2aec	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2aee	b1 06		lda ($06),y			lda 	(temp1),y
.2af0	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2af2	90 1b		bcc $2b0f			bcc 	_COCFail 				; in hard memory.
.2af4	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2af6	b1 06		lda ($06),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.2af8	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.2afa	85 08		sta $08				sta 	temp2
.2afc	c8		iny				iny
.2afd	b1 06		lda ($06),y			lda 	(temp1),y
.2aff	e9 00		sbc #$00			sbc 	#0
.2b01	85 09		sta $09				sta 	temp2+1
.2b03	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2b05	b1 08		lda ($08),y			lda 	(temp2),y
.2b07	38		sec				sec  							; maximum character capacity.
.2b08	e9 02		sbc #$02			sbc 	#2
.2b0a	cd 10 0c	cmp $0c10			cmp 	srcStrLen 				; if >= the required length
.2b0d	b0 02		bcs $2b11			bcs 	_COCCanReuse
.2b0f					_COCFail:
.2b0f	18		clc				clc
.2b10	60		rts				rts
.2b11					_COCCanReuse:
.2b11	38		sec				sec
.2b12	60		rts				rts
.2b13					RequiresConcretion:
.2b13	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2b15	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.2b17	b0 0a		bcs $2b23			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2b19	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2b1b	f0 08		beq $2b25			beq 	_RCFail 				; if not, this cannot be soft memory.
.2b1d	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2b1f	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2b21	90 02		bcc $2b25			bcc 	_RCFail 				; so concreting
.2b23					_RCSucceed:
.2b23	38		sec				sec
.2b24	60		rts				rts
.2b25					_RCFail:
.2b25	18		clc				clc
.2b26	60		rts				rts
.2b27					AllocateHardMemory:
.2b27	98		tya				tya
.2b28	48		pha				pha
.2b29	ad 10 0c	lda $0c10			lda 	srcStrLen 				; characters in string
.2b2c	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2b2e	b0 04		bcs $2b34			bcs 	_AHMSetMax 				; max out that amount.
.2b30	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2b32	90 02		bcc $2b36			bcc 	_AHMIsOkay
.2b34					_AHMSetMax:
.2b34	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2b36					_AHMIsOkay:
.2b36	48		pha				pha	 							; save size to be allocated
.2b37	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2b39	38		sec				sec  							; and copy result to TOS as target address.
.2b3a	65 0d		adc $0d				adc 	highMemory
.2b3c	85 0d		sta $0d				sta 	highMemory
.2b3e	a5 0e		lda $0e				lda 	highMemory+1
.2b40	69 ff		adc #$ff			adc 	#$FF
.2b42	85 0e		sta $0e				sta 	highMemory+1
.2b44	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2b46	68		pla				pla 							; get the total size of the storage block
.2b47	91 0d		sta ($0d),y			sta 	(highMemory),y 			; and set it
.2b49	18		clc				clc
.2b4a	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2b4c	69 01		adc #$01			adc 	#1
.2b4e	91 06		sta ($06),y			sta 	(temp1),y
.2b50	a5 0e		lda $0e				lda 	highMemory+1
.2b52	69 00		adc #$00			adc 	#0
.2b54	c8		iny				iny
.2b55	91 06		sta ($06),y			sta 	(temp1),y
.2b57	68		pla				pla
.2b58	a8		tay				tay
.2b59	60		rts				rts
.2b5a					CopyStringToHardMemory:
.2b5a	98		tya				tya
.2b5b	48		pha				pha
.2b5c	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2b5e	b1 06		lda ($06),y			lda 	(temp1),y
.2b60	85 08		sta $08				sta 	temp2
.2b62	c8		iny				iny
.2b63	b1 06		lda ($06),y			lda 	(temp1),y
.2b65	85 09		sta $09				sta 	temp2+1
.2b67	ac 10 0c	ldy $0c10			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2b6a					_CSTHMLoop:
.2b6a	b1 04		lda ($04),y			lda 	(temp0),y
.2b6c	91 08		sta ($08),y			sta 	(temp2),y
.2b6e	88		dey				dey
.2b6f	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.2b71	d0 f7		bne $2b6a			bne 	_CSTHMLoop
.2b73	68		pla				pla
.2b74	a8		tay				tay
.2b75	60		rts				rts
.2b76					CheckSpecialConcretion:
.2b76	ad 10 0c	lda $0c10			lda 	srcStrLen 				; check string is null e.g. length = 0
.2b79	f0 02		beq $2b7d			beq 	_CSCNullString
.2b7b	18		clc				clc
.2b7c	60		rts				rts
.2b7d					_CSCNullString:
.2b7d	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.2b7f	8d cc 0a	sta $0acc			sta 	NullString		 		; storage on null strings.
.2b82	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.2b84	85 04		sta $04				sta 	temp0
.2b86	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2b88	85 05		sta $05				sta 	1+(temp0)
.2b8a	38		sec				sec
.2b8b	60		rts				rts

;******  Return to file: string/string.asm

.2b8c					stringHandler:
.2b8c	7c 8f 2b	jmp ($2b8f,x)			jmp 	(stringVectors,x)
.2b8f					stringVectors:
>2b8f	f8 28					.word StringChrs           ; index 0
>2b91	eb 29					.word StrClone             ; index 2
>2b93	63 29					.word StringConcat         ; index 4
>2b95	1a 29					.word STRCompare           ; index 6
>2b97	11 2a					.word CaseString           ; index 8
>2b99	56 2a					.word StringSubstring      ; index 10
>2b9b	aa 2a					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2b9d					section_end_string:
.2b9d					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c11					deTokeniseVector:
>0c11							.fill 	2
.0c13					lastCharacterClass:
>0c13							.fill 	1
.2b9d					ListLine:
.2b9d	a9 ad		lda #$ad			lda 	#(deTokenPrint) & $FF
.2b9f	8d 11 0c	sta $0c11			sta 	deTokeniseVector
.2ba2	a9 2c		lda #$2c			lda 	#(deTokenPrint) >> 8
.2ba4	8d 12 0c	sta $0c12			sta 	1+(deTokeniseVector)
.2ba7					Detokenise:
.2ba7	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.2ba9	8d 13 0c	sta $0c13			sta 	lastCharacterClass
.2bac	a2 02		ldx #$02			ldx 	#2
.2bae	20 ea 21	jsr $21ea			jsr 	MInt32False
.2bb1	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.2bb3	b1 02		lda ($02),y			lda 	(codePtr),y
.2bb5	95 48		sta $48,x			sta 	esInt0,x
.2bb7	c8		iny				iny
.2bb8	b1 02		lda ($02),y			lda 	(codePtr),y
.2bba	95 50		sta $50,x			sta 	esInt1,x
.2bbc	a9 84		lda #$84			lda 	#LTYLineNumber
.2bbe	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2bc1	a9 0a		lda #$0a			lda 	#10 					; base 10
.2bc3	20 5f 2c	jsr $2c5f			jsr 	DTPrintInteger 			; print as integer.
.2bc6	a0 00		ldy #$00			ldy 	#0 						; get length
.2bc8	b1 04		lda ($04),y			lda 	(temp0),y 				; into X
.2bca	aa		tax				tax
.2bcb					_DTPadOut:
.2bcb	a9 20		lda #$20			lda 	#" "
.2bcd	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2bd0	e8		inx				inx
.2bd1	e0 06		cpx #$06			cpx 	#6
.2bd3	d0 f6		bne $2bcb			bne 	_DTPadOut
.2bd5	a0 03		ldy #$03			ldy 	#3 						; start position.
.2bd7					_DTListLoop
.2bd7	b1 02		lda ($02),y			lda 	(codePtr),y
.2bd9	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.2bdb	f0 58		beq $2c35			beq 	_DTIsString
.2bdd	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.2bdf	f0 7a		beq $2c5b			beq 	_DTIsFloat
.2be1	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.2be3	f0 16		beq $2bfb			beq 	_DTHexConstant
.2be5	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.2be7	d0 06		bne $2bef			bne 	_DTNotEnd
.2be9	a9 ff		lda #$ff			lda 	#255 					; print CR
.2beb	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2bee	60		rts				rts
.2bef					_DTNotEnd:
.2bef	c9 00		cmp #$00			cmp 	#0
.2bf1	30 36		bmi $2c29			bmi 	_DTIsToken
.2bf3	c9 40		cmp #$40			cmp 	#$40
.2bf5	90 38		bcc $2c2f			bcc 	_DTIsIdentifier
.2bf7	a9 0a		lda #$0a			lda 	#10 					; this is the base
.2bf9	d0 08		bne $2c03			bne 	_DTConstant
.2bfb					_DTHexConstant:
.2bfb	a9 26		lda #$26			lda 	#"&"
.2bfd	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2c00	c8		iny				iny
.2c01	a9 10		lda #$10			lda 	#16
.2c03					_DTConstant:
.2c03	48		pha				pha
.2c04	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.2c06	20 c9 2c	jsr $2cc9			jsr 	DTSwitchMode
.2c09	a9 86		lda #$86			lda 	#LTYConstant
.2c0b	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2c0e	a2 02		ldx #$02			ldx 	#2
.2c10	8a		txa				txa
.2c11	a2 0a		ldx #$0a		ldx	#10
.2c13	20 f9 22	jsr $22f9		jsr	mainHandler
.2c16	aa		tax				tax
.2c17	20 d4 11	jsr $11d4			jsr 	TOSToTemp0
.2c1a	68		pla				pla
.2c1b	85 0c		sta $0c				sta 	tempShort
.2c1d	98		tya				tya
.2c1e	48		pha				pha
.2c1f	a5 0c		lda $0c				lda 	tempShort
.2c21	20 5f 2c	jsr $2c5f			jsr 	DTPrintInteger
.2c24	68		pla				pla
.2c25	a8		tay				tay
.2c26	4c d7 2b	jmp $2bd7			jmp 	_DTListLoop
.2c29					_DTIsToken:
.2c29	20 22 2d	jsr $2d22			jsr 	DTDecodeToken
.2c2c	4c d7 2b	jmp $2bd7			jmp 	_DTListLoop
.2c2f					_DTIsIdentifier:
.2c2f	20 db 2c	jsr $2cdb			jsr 	DTIdentifier
.2c32	4c d7 2b	jmp $2bd7			jmp 	_DTListLoop
.2c35					_DTIsString:
.2c35	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2c37	20 c9 2c	jsr $2cc9			jsr 	DTSwitchMode
.2c3a	a9 81		lda #$81			lda 	#LTYString
.2c3c	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2c3f	a9 22		lda #$22			lda 	#'"'						; open quote
.2c41	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2c44	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.2c46	8a		txa				txa
.2c47	a2 0a		ldx #$0a		ldx	#10
.2c49	20 f9 22	jsr $22f9		jsr	mainHandler
.2c4c	aa		tax				tax
.2c4d	20 d4 11	jsr $11d4			jsr 	TOSToTemp0
.2c50	20 71 2c	jsr $2c71			jsr 	DTPrintLengthPrefix
.2c53	a9 22		lda #$22			lda 	#'"'
.2c55	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2c58	4c d7 2b	jmp $2bd7			jmp 	_DTListLoop
.2c5b					_DTIsFloat:
>2c5b	db						.byte 	$DB
.2c5c	4c 5b 2c	jmp $2c5b			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.2c5f					DTPrintInteger:
.2c5f	48		pha				pha
.2c60	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2c62	85 04		sta $04				sta 	temp0
.2c64	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2c66	85 05		sta $05				sta 	1+(temp0)
.2c68	68		pla				pla
.2c69	a8		tay				tay
.2c6a	8a		txa				txa
.2c6b	a2 0c		ldx #$0c		ldx	#12
.2c6d	20 f9 22	jsr $22f9		jsr	mainHandler
.2c70	aa		tax				tax
.2c71					DTPrintLengthPrefix:
.2c71	98		tya				tya
.2c72	48		pha				pha
.2c73	a0 00		ldy #$00			ldy 	#0
.2c75	b1 04		lda ($04),y			lda 	(temp0),y
.2c77	aa		tax				tax
.2c78	f0 0b		beq $2c85			beq 	_DTPLPExit
.2c7a					_DTPLPLoop:
.2c7a	c8		iny				iny
.2c7b	b1 04		lda ($04),y			lda 	(temp0),y
.2c7d	29 7f		and #$7f			and 	#$7F
.2c7f	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2c82	ca		dex				dex
.2c83	d0 f5		bne $2c7a			bne 	_DTPLPLoop
.2c85					_DTPLPExit:
.2c85	68		pla				pla
.2c86	a8		tay				tay
.2c87	60		rts				rts
.2c88					ListOutputCharacter:
.2c88	85 0c		sta $0c				sta 	tempShort
.2c8a	48		pha				pha
.2c8b	8a		txa				txa
.2c8c	48		pha				pha
.2c8d	98		tya				tya
.2c8e	48		pha				pha
.2c8f	a5 0c		lda $0c				lda 	tempShort
.2c91	c9 20		cmp #$20			cmp 	#32
.2c93	b0 0c		bcs $2ca1			bcs		_LOCHiBit
.2c95	09 40		ora #$40			ora 	#64
.2c97	c9 40		cmp #$40			cmp 	#64
.2c99	f0 06		beq $2ca1			beq 	_LOCHiBit
.2c9b	c9 5b		cmp #$5b			cmp 	#65+26
.2c9d	b0 02		bcs $2ca1			bcs 	_LOCHiBit
.2c9f	69 20		adc #$20			adc 	#32
.2ca1					_LOCHiBit:
.2ca1	20 aa 2c	jsr $2caa			jsr 	_LOCCallVector
.2ca4	68		pla				pla
.2ca5	a8		tay				tay
.2ca6	68		pla				pla
.2ca7	aa		tax				tax
.2ca8	68		pla				pla
.2ca9					_LOCExit:
.2ca9	60		rts				rts
.2caa					_LOCCallVector:
.2caa	6c 11 0c	jmp ($0c11)			jmp 	(deTokeniseVector)
.2cad					deTokenPrint:
.2cad	c9 00		cmp #$00			cmp 	#0
.2caf	30 06		bmi $2cb7			bmi 	_dtpInk
.2cb1	a2 12		ldx #$12		ldx	#18
.2cb3	20 d9 23	jsr $23d9		jsr	deviceHandler
.2cb6	60		rts				rts
.2cb7	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.2cb9	f0 08		beq $2cc3			beq 	_dtpCR
.2cbb	29 07		and #$07			and 	#7
.2cbd	a2 06		ldx #$06		ldx	#6
.2cbf	20 d9 23	jsr $23d9		jsr	deviceHandler
.2cc2	60		rts				rts
.2cc3					_dtpCR:
.2cc3	a2 02		ldx #$02		ldx	#2
.2cc5	20 d9 23	jsr $23d9		jsr	deviceHandler
.2cc8	60		rts				rts
.2cc9					DTSwitchMode:
.2cc9	cd 13 0c	cmp $0c13			cmp 	LastCharacterClass
.2ccc	f0 04		beq $2cd2			beq 	_DTSMNoChange
.2cce	8d 13 0c	sta $0c13			sta 	LastCharacterClass
.2cd1					_DTSMExit:
.2cd1	60		rts				rts
.2cd2					_DTSMNoChange:
.2cd2	c9 01		cmp #$01			cmp 	#1
.2cd4	f0 fb		beq $2cd1			beq 	_DTSMExit
.2cd6	a9 20		lda #$20			lda 	#" "
.2cd8	4c 88 2c	jmp $2c88			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.2cdb					DTIdentifier:
.2cdb	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2cdd	20 c9 2c	jsr $2cc9			jsr 	DTSwitchMode
.2ce0	a9 87		lda #$87			lda 	#LTYIdentifier
.2ce2	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2ce5					_DTILoop:
.2ce5	b1 02		lda ($02),y			lda 	(codePtr),y 				; output main bit of identifier.
.2ce7	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.2ce9	d0 02		bne $2ced			bne 	_DTINotUS
.2ceb	a9 5f		lda #$5f			lda 	#"_"
.2ced					_DTINotUS:
.2ced	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2cf0	c8		iny				iny
.2cf1	b1 02		lda ($02),y			lda 	(codePtr),y 				; until end identifier marker.
.2cf3	c9 3a		cmp #$3a			cmp 	#$3A
.2cf5	90 ee		bcc $2ce5			bcc 	_DTILoop
.2cf7	c8		iny				iny
.2cf8	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.2cfa	f0 25		beq $2d21			beq 	_DTIExit 					; no postfix.
.2cfc	48		pha				pha
.2cfd	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.2cff	8d 13 0c	sta $0c13			sta 	LastCharacterClass
.2d02	a9 82		lda #$82			lda 	#LTYPunctuation
.2d04	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2d07	68		pla				pla
.2d08	c9 3b		cmp #$3b			cmp 	#$3B
.2d0a	f0 10		beq $2d1c			beq 	_DTIArray
.2d0c	4a		lsr a				lsr 	a 							; array flag in C
.2d0d	08		php				php
.2d0e	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.2d10	f0 02		beq $2d14			beq 	_DTIDollar
.2d12	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.2d14					_DTIDollar:
.2d14	49 24		eor #$24			eor 	#"$"
.2d16	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2d19	28		plp				plp
.2d1a	90 05		bcc $2d21			bcc 	_DTIExit
.2d1c					_DTIArray:
.2d1c	a9 28		lda #$28			lda 	#"("
.2d1e	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2d21					_DTIExit:
.2d21	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.2d22					DTDecodeToken:
.2d22	a2 00		ldx #$00			ldx 	#0 							; table number to use
.2d24	b1 02		lda ($02),y			lda 	(codePtr),y
.2d26	c9 84		cmp #$84			cmp 	#$84
.2d28	b0 05		bcs $2d2f			bcs 	_DTNotShift
.2d2a	29 03		and #$03			and 	#3 							; get the shift 1..3
.2d2c	0a		asl a				asl 	a 							; put 2 x in X
.2d2d	aa		tax				tax
.2d2e	c8		iny				iny
.2d2f					_DTNotShift:
.2d2f	bd 2a 30	lda $302a,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.2d32	85 04		sta $04				sta 	temp0 						; point into temp0
.2d34	bd 2b 30	lda $302b,x			lda 	TokenTableAddress+1,x
.2d37	85 05		sta $05				sta 	temp0+1
.2d39	b1 02		lda ($02),y			lda 	(codePtr),y 				; get the token value.
.2d3b	c8		iny				iny 								; consume it.
.2d3c	aa		tax				tax
.2d3d	98		tya				tya
.2d3e	48		pha				pha
.2d3f					_DTFindText:
.2d3f	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.2d41	f0 11		beq $2d54			beq 	_DTFoundText
.2d43	ca		dex				dex
.2d44	a0 00		ldy #$00			ldy 	#0
.2d46	38		sec				sec
.2d47	b1 04		lda ($04),y			lda 	(temp0),y
.2d49	65 04		adc $04				adc 	temp0
.2d4b	85 04		sta $04				sta 	temp0
.2d4d	90 f0		bcc $2d3f			bcc 	_DTFindText
.2d4f	e6 05		inc $05				inc 	temp0+1
.2d51	4c 3f 2d	jmp $2d3f			jmp 	_DTFindText
.2d54					_DTFoundText:
.2d54	a0 01		ldy #$01			ldy 	#1 							; get first character
.2d56	b1 04		lda ($04),y			lda 	(temp0),y
.2d58	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2d5a	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.2d5c	90 11		bcc $2d6f			bcc 	_DTIsPunctuation
.2d5e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2d60	b0 0d		bcs $2d6f			bcs 	_DTIsPunctuation
.2d62	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2d64	20 c9 2c	jsr $2cc9			jsr 	DTSwitchMode
.2d67	a9 83		lda #$83			lda 	#LTYKeyword
.2d69	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2d6c	4c 79 2d	jmp $2d79			jmp 	_DTPrint
.2d6f					_DTIsPunctuation:
.2d6f	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2d71	20 c9 2c	jsr $2cc9			jsr 	DTSwitchMode
.2d74	a9 82		lda #$82			lda 	#LTYPunctuation
.2d76	20 88 2c	jsr $2c88			jsr 	ListOutputCharacter
.2d79					_DTPrint:
.2d79	20 71 2c	jsr $2c71			jsr 	DTPrintLengthPrefix 		; print it out.
.2d7c	a0 00		ldy #$00			ldy 	#0 							; get last character
.2d7e	b1 04		lda ($04),y			lda 	(temp0),y
.2d80	a8		tay				tay
.2d81	b1 04		lda ($04),y			lda 	(temp0),y
.2d83	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2d85	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.2d87	90 04		bcc $2d8d			bcc 	_DTIsNowPunctuation
.2d89	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2d8b	90 05		bcc $2d92			bcc 	_DTPExit
.2d8d					_DTIsNowPunctuation:
.2d8d	a9 01		lda #$01			lda 	#1
.2d8f	8d 13 0c	sta $0c13			sta		LastCharacterClass
.2d92					_DTPExit:
.2d92	68		pla				pla
.2d93	a8		tay				tay
.2d94	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c14					currentSet:
>0c14							.fill 	1
.2d95					TokenSearch:
.2d95	8a		txa				txa
.2d96	48		pha				pha
.2d97	98		tya				tya
.2d98	48		pha				pha
.2d99	a9 00		lda #$00			lda 	#0
.2d9b	8d 14 0c	sta $0c14			sta 	currentSet
.2d9e					_TSLoop:
.2d9e	ad 14 0c	lda $0c14			lda 	currentSet 					; 2 x currentset in X
.2da1	0a		asl a				asl 	a
.2da2	aa		tax				tax
.2da3	bd 2a 30	lda $302a,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.2da6	85 04		sta $04				sta 	temp0
.2da8	bd 2b 30	lda $302b,x			lda 	TokenTableAddress+1,x
.2dab	85 05		sta $05				sta 	temp0+1
.2dad	20 d4 2d	jsr $2dd4			jsr 	TokenSearchOne 				; search one table
.2db0	b0 0d		bcs $2dbf			bcs 	_TSFound 					; found a token.
.2db2	ee 14 0c	inc $0c14			inc 	currentSet 					; next set
.2db5	ad 14 0c	lda $0c14			lda 	currentSet
.2db8	c9 04		cmp #$04			cmp 	#4
.2dba	d0 e2		bne $2d9e			bne 	_TSLoop 					; back if not done all four.
.2dbc	18		clc				clc 								; clear carry and exit
.2dbd	90 10		bcc $2dcf			bcc 	_TSExit
.2dbf					_TSFound:
.2dbf	48		pha				pha 								; save token
.2dc0	ad 14 0c	lda $0c14			lda 	currentSet					; if set zero no shift
.2dc3	f0 05		beq $2dca			beq 	_TSNoShift
.2dc5	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.2dc7	20 80 2e	jsr $2e80			jsr 	TokenWrite
.2dca					_TSNoShift:
.2dca	68		pla				pla 								; get token back
.2dcb	20 80 2e	jsr $2e80			jsr 	TokenWrite 					; write it
.2dce	38		sec				sec 								; carry set indicating success
.2dcf					_TSExit:
.2dcf	68		pla				pla
.2dd0	a8		tay				tay
.2dd1	68		pla				pla
.2dd2	aa		tax				tax
.2dd3	60		rts				rts
.2dd4					TokenSearchOne:
.2dd4	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.2dd6					_TSOLoop:
.2dd6	a0 00		ldy #$00			ldy 	#0
.2dd8	b1 04		lda ($04),y			lda 	(temp0),y 					; get length of token
.2dda	f0 26		beq $2e02			beq 	_TSOFail 					; if zero, end of table
.2ddc	cd cd 0a	cmp $0acd			cmp 	convertBuffer 				; length is the same, compare the text matches.
.2ddf	f0 11		beq $2df2			beq 	_TSOCheckText
.2de1					_TSONext:
.2de1	e8		inx				inx 								; bump token
.2de2	a0 00		ldy #$00			ldy 	#0							; get length
.2de4	b1 04		lda ($04),y			lda 	(temp0),y
.2de6	38		sec				sec
.2de7	65 04		adc $04				adc 	temp0 						; add to temp0 + 1
.2de9	85 04		sta $04				sta 	temp0
.2deb	90 e9		bcc $2dd6			bcc 	_TSOLoop
.2ded	e6 05		inc $05				inc 	temp0+1
.2def	4c d6 2d	jmp $2dd6			jmp 	_TSOLoop
.2df2					_TSOCheckText:
.2df2	a8		tay				tay 								; compare length downto 1.
.2df3					_TSOCheckLoop:
.2df3	b1 04		lda ($04),y			lda 	(temp0),y 					; use EOR to compare
.2df5	59 cd 0a	eor $0acd,y			eor 	convertBuffer,y
.2df8	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.2dfa	d0 e5		bne $2de1			bne 	_TSONext 					; different goto next.
.2dfc	88		dey				dey 								; do all
.2dfd	d0 f4		bne $2df3			bne 	_TSOCheckLoop
.2dff	8a		txa				txa 								; return token in A and carry set
.2e00	38		sec				sec
.2e01	60		rts				rts
.2e02					_TSOFail:
.2e02	18		clc				clc
.2e03	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.2e04					TokTest:
.2e04	a9 21		lda #$21			lda 	#(TokenText1) & $FF
.2e06	85 02		sta $02				sta 	codePtr
.2e08	a9 2e		lda #$2e			lda 	#(TokenText1) >> 8
.2e0a	85 03		sta $03				sta 	1+(codePtr)
.2e0c	20 21 2e	jsr $2e21				jsr 	Tokenise
.2e0f	a2 00		ldx #$00	TokStop:	ldx 	#0
.2e11	bd 21 2e	lda $2e21,x	_TokCheck:	lda 	TokenBytes1,x
.2e14	dd 18 0c	cmp $0c18,x				cmp 	tokenBuffer,x
.2e17	d0 fe		bne $2e17	_TokFail:	bne 	_TokFail
.2e19	e8		inx					inx
.2e1a	c9 80		cmp #$80				cmp 	#$80
.2e1c	d0 f3		bne $2e11				bne 	_TokCheck
.2e1e	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.2e21					TokenText1:
.2e21					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c15					tokenHeader:
>0c15							.fill 	3
.0c18					tokenBuffer:
>0c18							.fill 	256
.0d18					tokenBufferIndex:
>0d18							.fill 	1
.2e21					Tokenise:
.2e21	20 99 2e	jsr $2e99			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.2e24					TokeniseASCIIZ:
.2e24	20 aa 2e	jsr $2eaa			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.2e27	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.2e29	8d 18 0d	sta $0d18			sta 	tokenBufferIndex
.2e2c	a8		tay				tay 								; start pointer
.2e2d	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.2e2f	8d 18 0c	sta $0c18			sta 	tokenBuffer
.2e32					_TokLoop:
.2e32	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next character
.2e34	f0 46		beq $2e7c			beq 	_TokExit 					; if zero, then exit.
.2e36	c8		iny				iny 								; skip over spaces.
.2e37	c9 20		cmp #$20			cmp 	#" "
.2e39	f0 f7		beq $2e32			beq 	_TokLoop
.2e3b	88		dey				dey 								; point back to character.
.2e3c	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.2e3e	f0 18		beq $2e58			beq 	_TokHexConst
.2e40	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.2e42	f0 23		beq $2e67			beq 	_TokQString
.2e44	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.2e46	b0 26		bcs $2e6e			bcs 	_TokPunctuation
.2e48	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.2e4a	b0 29		bcs $2e75			bcs 	_TokIdentifier
.2e4c	c9 3a		cmp #$3a			cmp 	#"9"+1
.2e4e	b0 1e		bcs $2e6e			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.2e50	c9 30		cmp #$30			cmp 	#"0"
.2e52	90 1a		bcc $2e6e			bcc 	_TokPunctuation 			; < 0, punctuation.
.2e54	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.2e56	d0 08		bne $2e60			bne 	_TokConst
.2e58					_TokHexConst:
.2e58	c8		iny				iny									; consume token.
.2e59	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.2e5b	20 80 2e	jsr $2e80			jsr 	TokenWrite
.2e5e	a9 10		lda #$10			lda 	#16
.2e60					_TokConst:
.2e60	20 68 2f	jsr $2f68			jsr 	TokeniseInteger
.2e63	b0 cd		bcs $2e32			bcs 	_TokLoop
.2e65	90 17		bcc $2e7e			bcc 	_TokFail
.2e67					_TokQString:
.2e67	20 fe 2f	jsr $2ffe			jsr 	TokeniseString
.2e6a	b0 c6		bcs $2e32			bcs 	_TokLoop
.2e6c	90 10		bcc $2e7e			bcc 	_TokFail
.2e6e					_TokPunctuation:
.2e6e	20 dd 2f	jsr $2fdd			jsr 	TokenisePunctuation
.2e71	b0 bf		bcs $2e32			bcs 	_TokLoop
.2e73	90 09		bcc $2e7e			bcc 	_TokFail
.2e75					_TokIdentifier:
.2e75	20 d9 2e	jsr $2ed9			jsr 	TokeniseIdentifier
.2e78	b0 b8		bcs $2e32			bcs 	_TokLoop
.2e7a	90 02		bcc $2e7e			bcc 	_TokFail
.2e7c					_TokExit:
.2e7c	38		sec				sec
.2e7d	60		rts				rts
.2e7e					_TokFail:
.2e7e	18		clc				clc
.2e7f	60		rts				rts
.2e80					TokenWrite:
.2e80	85 0c		sta $0c				sta 	tempShort 					; save XA
.2e82	48		pha				pha
.2e83	8a		txa				txa
.2e84	48		pha				pha
.2e85	a5 0c		lda $0c				lda 	tempShort
.2e87	ae 18 0d	ldx $0d18			ldx 	tokenBufferIndex 			; geet index
.2e8a	9d 18 0c	sta $0c18,x			sta 	tokenBuffer,x 				; write byte to buffer
.2e8d	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.2e8f	9d 19 0c	sta $0c19,x			sta 	tokenBuffer+1,x
.2e92	ee 18 0d	inc $0d18			inc 	tokenBufferIndex 			; bump index
.2e95	68		pla				pla
.2e96	aa		tax				tax
.2e97	68		pla				pla
.2e98	60		rts				rts
.2e99					TokeniseMakeASCIIZ:
.2e99	a0 00		ldy #$00			ldy 	#0							; get length of string.
.2e9b	b1 02		lda ($02),y			lda 	(codePtr),y
.2e9d	a8		tay				tay
.2e9e	c8		iny				iny 								; +1, the NULL goes here.
.2e9f	a9 00		lda #$00			lda 	#0
.2ea1	91 02		sta ($02),y			sta 	(codePtr),y 				; write the trailing NULL.
.2ea3	e6 02		inc $02				inc 	codePtr 					; bump the pointer.
.2ea5	d0 02		bne $2ea9			bne 	_TMKAExit
.2ea7	e6 03		inc $03				inc 	codePtr+1
.2ea9					_TMKAExit:
.2ea9	60		rts				rts
.2eaa					TokeniseFixCase:
.2eaa	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.2eac	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.2eae					_TFCFlipQ:
.2eae	8a		txa				txa
.2eaf	49 01		eor #$01			eor 	#1
.2eb1	aa		tax				tax
.2eb2					_TFCLoop:
.2eb2	b1 02		lda ($02),y			lda 	(codePtr),y 				; get character
.2eb4	f0 22		beq $2ed8			beq 	_TFCExit 					; if zero exit.
.2eb6	c9 20		cmp #$20			cmp 	#32 						; if control
.2eb8	90 1a		bcc $2ed4			bcc 	_TFCControl
.2eba	c8		iny				iny 								; preconsume
.2ebb	c9 22		cmp #$22			cmp 	#'"'
.2ebd	f0 ef		beq $2eae			beq 	_TFCFlipQ
.2ebf	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.2ec1	90 ef		bcc $2eb2			bcc 	_TFCLoop
.2ec3	c9 7b		cmp #$7b			cmp 	#"z"+1
.2ec5	b0 eb		bcs $2eb2			bcs 	_TFCLoop
.2ec7	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.2ec9	d0 e7		bne $2eb2			bne 	_TFCLoop
.2ecb	88		dey				dey
.2ecc	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.2ece					_TFCWrite:
.2ece	91 02		sta ($02),y			sta 	(codePtr),y
.2ed0	c8		iny				iny
.2ed1	4c b2 2e	jmp $2eb2			jmp 	_TFCLoop
.2ed4					_TFCControl:
.2ed4	a9 20		lda #$20			lda 	#" "
.2ed6	d0 f6		bne $2ece			bne 	_TFCWrite
.2ed8					_TFCExit:
.2ed8	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.2ed9					TokeniseIdentifier:
.2ed9	a2 00		ldx #$00			ldx 	#0
.2edb					_TICopyID:
.2edb	b1 02		lda ($02),y			lda 	(codePtr),y					; get characters
.2edd	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.2edf	f0 16		beq $2ef7			beq 	_TICopyUnderscore
.2ee1	c9 2e		cmp #$2e			cmp 	#"."
.2ee3	f0 14		beq $2ef9			beq 	_TICopyIn
.2ee5	c9 30		cmp #$30			cmp 	#"0"
.2ee7	90 1b		bcc $2f04			bcc 	_TIEndCopy
.2ee9	c9 3a		cmp #$3a			cmp 	#"9"+1
.2eeb	90 0c		bcc $2ef9			bcc 	_TICopyIn
.2eed	c9 41		cmp #$41			cmp 	#"A"
.2eef	90 13		bcc $2f04			bcc 	_TIEndCopy
.2ef1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2ef3	b0 0f		bcs $2f04			bcs		_TIEndCopy
.2ef5	90 02		bcc $2ef9			bcc 	_TICopyIn
.2ef7					_TICopyUnderScore:
.2ef7	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.2ef9					_TICopyIn:
.2ef9	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.2efa	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2efd	8e cd 0a	stx $0acd			stx 	convertBuffer
.2f00	c8		iny				iny 								; next character
.2f01	4c db 2e	jmp $2edb			jmp 	_TICopyID 					; loop round
.2f04					_TIEndCopy:
.2f04	a9 24		lda #$24			lda 	#"$"
.2f06	20 5b 2f	jsr $2f5b			jsr 	TIDCheckCopy
.2f09	a9 23		lda #$23			lda 	#"#"
.2f0b	20 5b 2f	jsr $2f5b			jsr 	TIDCheckCopy
.2f0e	a9 28		lda #$28			lda 	#"("
.2f10	20 5b 2f	jsr $2f5b			jsr 	TIDCheckCopy
.2f13	20 95 2d	jsr $2d95			jsr 	TokenSearch 				; is it a token
.2f16	b0 41		bcs $2f59			bcs 	_TIExit 					; if so, then exit.
.2f18	98		tya				tya
.2f19	48		pha				pha
.2f1a	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.2f1c	ae cd 0a	ldx $0acd			ldx 	convertBuffer 				; is last character (
.2f1f	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x
.2f22	c9 28		cmp #$28			cmp 	#"("
.2f24	d0 02		bne $2f28			bne 	_TINotArray
.2f26	ca		dex				dex 								; yes, remove it and convert to array.
.2f27	c8		iny				iny
.2f28					_TINotArray:
.2f28	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x 			; check for $
.2f2b	c9 24		cmp #$24			cmp 	#"$"
.2f2d	d0 03		bne $2f32			bne 	_TINotString
.2f2f	ca		dex				dex
.2f30	c8		iny				iny
.2f31	c8		iny				iny
.2f32					_TINotString:
.2f32	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x 			; check for #
.2f35	c9 23		cmp #$23			cmp 	#"#"
.2f37	d0 05		bne $2f3e			bne 	_TINotFloat
.2f39	ca		dex				dex
.2f3a	c8		iny				iny
.2f3b	c8		iny				iny
.2f3c	c8		iny				iny
.2f3d	c8		iny				iny
.2f3e					_TINotFloat:
.2f3e	e8		inx				inx 								; write end marker for identifier.
.2f3f	98		tya				tya
.2f40	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2f43	8e cd 0a	stx $0acd			stx 	convertBuffer 				; update length.
.2f46	a2 01		ldx #$01			ldx 	#1
.2f48					_TIOutput:
.2f48	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x
.2f4b	29 3f		and #$3f			and 	#$3F
.2f4d	48		pha				pha
.2f4e	20 80 2e	jsr $2e80			jsr 	TokenWrite
.2f51	e8		inx				inx
.2f52	68		pla				pla
.2f53	c9 3a		cmp #$3a			cmp 	#$3A
.2f55	90 f1		bcc $2f48			bcc 	_TIOutput
.2f57	68		pla				pla
.2f58	a8		tay				tay
.2f59					_TIExit:
.2f59	38		sec				sec 								; this can't fail.
.2f5a	60		rts				rts
.2f5b					TIDCheckCopy:
.2f5b	d1 02		cmp ($02),y			cmp 	(codePtr),y
.2f5d	d0 08		bne $2f67			bne 	_TIDCCExit
.2f5f	e8		inx				inx
.2f60	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2f63	8e cd 0a	stx $0acd			stx 	convertBuffer
.2f66	c8		iny				iny
.2f67					_TIDCCExit:
.2f67	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.2f68					TokeniseInteger:
.2f68	85 06		sta $06				sta 	temp1 						; save base
.2f6a	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.2f6c	8e cd 0a	stx $0acd			stx 	convertBuffer
.2f6f					_TIGetChars:
.2f6f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check character is numeric
.2f71	c9 30		cmp #$30			cmp 	#"0"
.2f73	90 1f		bcc $2f94			bcc 	_TIEndGet
.2f75	c9 3a		cmp #$3a			cmp 	#"9"+1
.2f77	90 10		bcc $2f89			bcc 	_TIHaveChar
.2f79	a5 06		lda $06				lda 	temp1 						; fail if not hex mode
.2f7b	c9 0a		cmp #$0a			cmp 	#10
.2f7d	f0 15		beq $2f94			beq 	_TIEndGet
.2f7f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check legitimate hex.
.2f81	c9 41		cmp #$41			cmp 	#"A"
.2f83	90 0f		bcc $2f94			bcc 	_TIEndGet
.2f85	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2f87	b0 0b		bcs $2f94			bcs 	_TIEndGet
.2f89					_TIHaveChar:
.2f89	e8		inx				inx 								; write into buffer.
.2f8a	8e cd 0a	stx $0acd			stx 	convertBuffer
.2f8d	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2f90	c8		iny				iny 								; next char
.2f91	4c 6f 2f	jmp $2f6f			jmp 	_TIGetChars
.2f94					_TIEndGet:
.2f94	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.2f96	f0 1c		beq $2fb4			beq 	_TIFail
.2f98	98		tya				tya
.2f99	48		pha				pha
.2f9a	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2f9c	85 04		sta $04				sta 	temp0
.2f9e	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2fa0	85 05		sta $05				sta 	1+(temp0)
.2fa2	a9 00		lda #$00			lda 	#0 							; stack 0
.2fa4	a4 06		ldy $06				ldy 	temp1 						; base Y
.2fa6	a2 14		ldx #$14		ldx	#20
.2fa8	20 f9 22	jsr $22f9		jsr	mainHandler
.2fab	68		pla				pla
.2fac	a8		tay				tay
.2fad	90 05		bcc $2fb4			bcc 	_TIFail 					; didn't convert.
.2faf	20 b6 2f	jsr $2fb6			jsr 	TIRecursiveOut 				; recursive output ?
.2fb2	38		sec				sec
.2fb3	60		rts				rts
.2fb4					_TIFail:
.2fb4	18		clc				clc
.2fb5	60		rts				rts
.2fb6					TIRecursiveOut:
.2fb6	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.2fb8	29 3f		and #$3f			and 	#$3F
.2fba	09 40		ora #$40			ora 	#$40
.2fbc	48		pha				pha
.2fbd	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.2fbf	29 c0		and #$c0			and 	#$C0
.2fc1	05 50		ora $50				ora 	esInt1
.2fc3	05 58		ora $58				ora 	esInt2
.2fc5	05 60		ora $60				ora 	esInt3
.2fc7	f0 10		beq $2fd9			beq 	_TIRONoRecursion
.2fc9	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.2fcb					_TIROShift:
.2fcb	46 60		lsr $60				lsr 	esInt3
.2fcd	66 58		ror $58				ror 	esInt2
.2fcf	66 50		ror $50				ror 	esInt1
.2fd1	66 48		ror $48				ror 	esInt0
.2fd3	ca		dex				dex
.2fd4	d0 f5		bne $2fcb			bne 	_TIROShift
.2fd6	20 b6 2f	jsr $2fb6			jsr 	TIRecursiveOut 				; call recursively
.2fd9					_TIRONoRecursion:
.2fd9	68		pla				pla 								; pull the old bit.
.2fda	4c 80 2e	jmp $2e80			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.2fdd					TokenisePunctuation:
.2fdd	b1 02		lda ($02),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.2fdf	8d ce 0a	sta $0ace			sta 	convertBuffer+1
.2fe2	c8		iny				iny
.2fe3	b1 02		lda ($02),y			lda 	(codePtr),y
.2fe5	8d cf 0a	sta $0acf			sta 	convertBuffer+2
.2fe8	c8		iny				iny 								; Y is +2
.2fe9	a9 02		lda #$02			lda 	#2 							; 2 character string.
.2feb	8d cd 0a	sta $0acd			sta 	convertBuffer
.2fee	20 95 2d	jsr $2d95			jsr 	TokenSearch 				; search for that token.
.2ff1	b0 0a		bcs $2ffd			bcs 	_TIFound
.2ff3	ce cd 0a	dec $0acd			dec 	convertBuffer 				; make it a 1 character string
.2ff6	88		dey				dey 								; Y is now +1
.2ff7	20 95 2d	jsr $2d95			jsr 	TokenSearch 				; search for that token.
.2ffa	b0 01		bcs $2ffd			bcs 	_TIFound
.2ffc	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.2ffd					_TIFound:
.2ffd	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.2ffe					TokeniseString:
.2ffe	c8		iny				iny 								; skip opening quote
.2fff	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3001	84 04		sty $04				sty 	temp0 						; save start.
.3003					_TSGetLength:
.3003	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next
.3005	f0 21		beq $3028			beq 	_TSFail						; end of line, fail
.3007	c8		iny				iny
.3008	e8		inx				inx
.3009	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.300b	d0 f6		bne $3003			bne 	_TSGetLength
.300d	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.300f	20 80 2e	jsr $2e80			jsr 	TokenWrite
.3012	8a		txa				txa 								; output length
.3013	20 80 2e	jsr $2e80			jsr 	TokenWrite
.3016	a4 04		ldy $04				ldy 	temp0 						; get original position
.3018	e0 00		cpx #$00			cpx 	#0 							; check ended
.301a	f0 09		beq $3025			beq 	_TSExit
.301c					_TSOutput:
.301c	b1 02		lda ($02),y			lda 	(codePtr),y					; output character
.301e	20 80 2e	jsr $2e80			jsr 	TokenWrite
.3021	c8		iny				iny
.3022	ca		dex				dex
.3023	d0 f7		bne $301c			bne 	_TSOutput
.3025					_TSExit:
.3025	c8		iny				iny 								; skip ending quote
.3026	38		sec				sec 								; return CS.
.3027	60		rts				rts
.3028					_TSFail:
.3028	18		clc				clc
.3029	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.302a					TokenTableAddress:
>302a	32 30						.word 	Group0Text
>302c	e3 31						.word 	Group1Text
>302e	1c 32						.word 	Group2Text
>3030	29 32						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3032					Group0Text:
>3032	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3036	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3039	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>303d	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3040	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3043	01 be					.byte $01,$be                          ; $8b >
>3045	01 bc					.byte $01,$bc                          ; $8c <
>3047	01 bd					.byte $01,$bd                          ; $8d =
>3049	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>304c	01 ab					.byte $01,$ab                          ; $8f +
>304e	01 ad					.byte $01,$ad                          ; $90 -
>3050	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3053	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3056	01 aa					.byte $01,$aa                          ; $93 *
>3058	01 af					.byte $01,$af                          ; $94 /
>305a	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>305e	01 de					.byte $01,$de                          ; $96 ^
>3060	01 a1					.byte $01,$a1                          ; $97 !
>3062	01 bf					.byte $01,$bf                          ; $98 ?
>3064	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>306b	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3071	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3075	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3078	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3080	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3086	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>308b	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3090	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3095	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>309b	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>30a3	01 a8					.byte $01,$a8                          ; $a4 (
>30a5	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>30aa	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>30af	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>30b4	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>30bc	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>30c1	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>30c6	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>30cc	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>30d1	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>30d6	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>30db	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>30e2	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>30e9	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>30ee	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>30f5	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>30fc	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3102	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3109	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>310f	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3117	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>311d	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3122	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3128	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>312e	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3134	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3139	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>313e	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3145	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>314c	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3154	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>315c	01 c0					.byte $01,$c0                          ; $c3 @
>315e	01 fe					.byte $01,$fe                          ; $c4 ~
>3160	01 a6					.byte $01,$a6                          ; $c5 &
>3162	01 a9					.byte $01,$a9                          ; $c6 )
>3164	01 ba					.byte $01,$ba                          ; $c7 :
>3166	01 ac					.byte $01,$ac                          ; $c8 ,
>3168	01 bb					.byte $01,$bb                          ; $c9 ;
>316a	01 a7					.byte $01,$a7                          ; $ca '
>316c	02 54 cf				.byte $02,$54,$cf                      ; $cb to
>316f	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cc step
>3174	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $cd proc
>3179	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $ce local
>317f	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $cf dim
>3183	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d0 rem
>3187	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d1 let
>318b	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d2 input
>3191	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d3 else
>3196	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d4 vdu
>319a	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d5 print
>31a0	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d6 goto
>31a5	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $d7 gosub
>31ab	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $d8 return
>31b2	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>31b7	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $da assert
>31be	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $db poke
>31c3	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $dc doke
>31c8	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $dd loke
>31cd	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $de ink
>31d1	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $df paper
>31d7	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e0 cls
>31db	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e1 locate
>31e2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.31e3					Group1Text:
>31e3	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>31e9	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>31ee	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>31f3	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>31f8	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>31fc	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3200	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3205	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>320d	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3211	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3216	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>321b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.321c					Group2Text:
>321c	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3222	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3228	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3229					Group3Text:
>3229	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3230	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3237	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3238					tokeniserHandler:
.3238	7c 3b 32	jmp ($323b,x)			jmp 	(tokeniserVectors,x)
.323b					tokeniserVectors:
>323b	a7 2b					.word Detokenise           ; index 0
>323d	9d 2b					.word ListLine             ; index 2
>323f	21 2e					.word Tokenise             ; index 4
>3241	24 2e					.word TokeniseASCIIZ       ; index 6

;******  Return to file: basic.asm

.3243					section_end_tokeniser:
.3243					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d19					varHash:
>0d19							.fill	1
.0d1a					varType:
>0d1a							.fill 	1
.0d1b					varEnd:
>0d1b							.fill 	1
.007c					hashList:
>007c							.fill 	2
.3243					AccessVariable:
.3243	aa		tax				tax 								; stack in X
.3244	c8		iny				iny									; look at second character
.3245	b1 02		lda ($02),y			lda 	(codePtr),y
.3247	88		dey				dey
.3248	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.324a	d0 15		bne $3261			bne 	_AVLong 					; no, always use the hash tables.
.324c	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.324e	38		sec				sec 	 							; make it 0-25
.324f	e9 01		sbc #$01			sbc 	#1
.3251	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3252	0a		asl a				asl 	a
.3253	95 48		sta $48,x			sta 	esInt0,x
.3255	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3257	95 50		sta $50,x			sta 	esInt1,x
.3259	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.325b	95 40		sta $40,x			sta 	esType,x
.325d	c8		iny				iny 								; skip over the variable reference in the code.
.325e	c8		iny				iny  								; (1 letter, 1 type)
.325f	8a		txa				txa 								; stack in A to return.
.3260	60		rts				rts
.3261					_AVLong:
.3261	8a		txa				txa
.3262	48		pha				pha
.3263	20 aa 32	jsr $32aa			jsr 	AccessSetup 				; set up the basic information we need for later
.3266	20 d6 34	jsr $34d6			jsr 	FindVariable 				; does the variable exist already ?
.3269	b0 0e		bcs $3279			bcs 	_AVFound 					; yes, then its found
.326b	ad 1a 0d	lda $0d1a			lda 	varType 					; otherwise, is the variable type an array
.326e	4a		lsr a				lsr 	a
.326f	90 05		bcc $3276			bcc 	_AVCanCreate 				; if not, we can autocreate
.3271	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3273	20 f6 23	jsr $23f6		jsr	errorHandler
.3276					_AVCanCreate:
.3276	20 5d 33	jsr $335d			jsr 	CreateVariable 				; variable does not exist, create it.
.3279					_AVFound:
.3279	68		pla				pla
.327a	aa		tax				tax
.327b	18		clc				clc 								; copy temp0 (variable record address)
.327c	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.327e	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3280	95 48		sta $48,x			sta 	esInt0,x
.3282	a5 05		lda $05				lda 	temp0+1
.3284	69 00		adc #$00			adc 	#0
.3286	95 50		sta $50,x			sta 	esInt1,x
.3288	a9 00		lda #$00			lda 	#0
.328a	95 58		sta $58,x			sta 	esInt2,x
.328c	95 60		sta $60,x			sta 	esInt3,x
.328e	ac 1a 0d	ldy $0d1a			ldy 	varType 					; get the type ID from the type.
.3291	b9 6a 32	lda $326a,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3294	95 40		sta $40,x			sta 	esType,x
.3296	ac 1b 0d	ldy $0d1b			ldy 	varEnd 						; restore Y
.3299	ad 1a 0d	lda $0d1a			lda 	VarType 					; get variable type, put LSB into C
.329c	4a		lsr a				lsr 	a
.329d	90 03		bcc $32a2			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.329f	20 e7 32	jsr $32e7			jsr 	AccessArray 				; array lookup. if LSB was set.
.32a2					_AVNotArray:
.32a2	8a		txa				txa 								; return stack in A and return
.32a3	60		rts				rts
.32a4					_AVTypeTable:
>32a4	80 80						.byte 	$80,$80						; integer
>32a6	c0 c0						.byte 	$C0,$C0 					; string
>32a8	81 81						.byte 	$81,$81 					; float
.32aa					AccessSetup:
.32aa	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.32ac	8d 19 0d	sta $0d19			sta 	varHash
.32af	98		tya				tya
.32b0	48		pha				pha
.32b1	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.32b3	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.32b5	b0 0b		bcs $32c2			bcs 	_ASComplete
.32b7	18		clc				clc 								; add to the hash. Might improve this.
.32b8	6d 19 0d	adc $0d19			adc 	varHash
.32bb	8d 19 0d	sta $0d19			sta 	varHash
.32be	c8		iny				iny 								; next character
.32bf	4c b1 32	jmp $32b1			jmp 	_ASLoop
.32c2					_ASComplete:
.32c2	8d 1a 0d	sta $0d1a			sta 	varType 					; save variable type byte
.32c5	c8		iny				iny
.32c6	8c 1b 0d	sty $0d1b			sty 	varEnd 						; save the ending position.
.32c9	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.32ca	e9 3a		sbc #$3a			sbc 	#$3A
.32cc	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.32cd	0a		asl a				asl 	a
.32ce	0a		asl a				asl 	a
.32cf	0a		asl a				asl 	a 							; 2 bytes/word
.32d0	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.32d2	ad 19 0d	lda $0d19			lda 	varHash 					; get hash
.32d5	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.32d7	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.32d8	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.32da	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.32dc	85 7c		sta $7c				sta 	hashList 					; making hashLists point to the head of the link list.
.32de	a9 0a		lda #$0a			lda 	#hashTables >> 8
.32e0	69 00		adc #$00			adc 	#0
.32e2	85 7d		sta $7d				sta 	hashList+1
.32e4	68		pla				pla
.32e5	a8		tay				tay
.32e6	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.32e7					AccessArray:
.32e7	e8		inx				inx
.32e8	8a		txa				txa
.32e9	a2 06		ldx #$06		ldx	#6
.32eb	20 f9 22	jsr $22f9		jsr	mainHandler
.32ee	aa		tax				tax
.32ef	ca		dex				dex
.32f0	a2 00		ldx #$00		ldx	#0
.32f2	20 f9 22	jsr $22f9		jsr	mainHandler
.32f5	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.32f7	15 59		ora $59,x			ora 	esInt2+1,x
.32f9	d0 33		bne $332e			bne 	_AABadIndex
.32fb	98		tya				tya
.32fc	48		pha				pha
.32fd	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.32ff	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3301	b5 50		lda $50,x			lda 	esInt1,x
.3303	85 05		sta $05				sta 	temp0+1
.3305	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3307	b5 49		lda $49,x			lda 	esInt0+1,x
.3309	d1 04		cmp ($04),y			cmp 	(temp0),y
.330b	c8		iny				iny
.330c	b5 51		lda $51,x			lda 	esInt1+1,x
.330e	f1 04		sbc ($04),y			sbc 	(temp0),y
.3310	b0 1c		bcs $332e			bcs 	_AABadIndex 				; if >= then fail.
.3312	e8		inx				inx 								; point to index
.3313	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3315	b1 04		lda ($04),y			lda 	(temp0),y
.3317	20 33 33	jsr $3333			jsr 	MultiplyTOSByA 				; specialist multiplier.
.331a	ca		dex				dex
.331b	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.331d	18		clc				clc
.331e	b5 49		lda $49,x			lda 	esInt0+1,x
.3320	71 04		adc ($04),y			adc 	(temp0),y
.3322	95 48		sta $48,x			sta 	esInt0,x
.3324	b5 51		lda $51,x			lda 	esInt1+1,x
.3326	c8		iny				iny
.3327	71 04		adc ($04),y			adc 	(temp0),y
.3329	95 50		sta $50,x			sta 	esInt1,x
.332b	68		pla				pla
.332c	a8		tay				tay
.332d	60		rts				rts
.332e					_AABadIndex:
.332e	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3330	20 f6 23	jsr $23f6		jsr	errorHandler
.3333					MultiplyTOSByA:
.3333	48		pha				pha
.3334	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3336	85 06		sta $06				sta 	temp1
.3338	b5 50		lda $50,x			lda 	esInt1,x
.333a	85 07		sta $07				sta 	temp1+1
.333c	68		pla				pla
.333d	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.333f	36 50		rol $50,x			rol 	esInt1,x
.3341	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3343	f0 17		beq $335c			beq 	_MTBAExit
.3345	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.3347	d0 0f		bne $3358			bne 	_MTBANotFloat
.3349	48		pha				pha
.334a	18		clc				clc 								; so this will make it x 3
.334b	b5 48		lda $48,x			lda 	esInt0,x
.334d	65 06		adc $06				adc 	temp1
.334f	95 48		sta $48,x			sta 	esInt0,x
.3351	b5 50		lda $50,x			lda 	esInt1,x
.3353	65 07		adc $07				adc 	temp1+1
.3355	95 50		sta $50,x			sta 	esInt1,x
.3357	68		pla				pla
.3358					_MTBANotFloat:
.3358	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.335a	36 50		rol $50,x			rol 	esInt1,x
.335c					_MTBAExit:
.335c	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.335d					CreateVariable:
.335d	98		tya				tya 								; push Y on the stack twice.
.335e	48		pha				pha									; position in code of the new variable.
.335f	48		pha				pha
.3360	ae 1a 0d	ldx $0d1a			ldx 	varType 					; get var type 0-5 from the var type
.3363	bd 7c 33	lda $337c,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3366	48		pha				pha 								; save length
.3367	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.3369	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.336b	a5 10		lda $10				lda 	lowMemory+1
.336d	85 05		sta $05				sta 	temp0+1
.336f	68		pla				pla 								; get length
.3370	18		clc				clc 								; add to low memory.
.3371	65 0f		adc $0f				adc 	lowMemory
.3373	85 0f		sta $0f				sta 	lowMemory
.3375	90 02		bcc $3379			bcc 	_CVNoCarry
.3377	e6 10		inc $10				inc 	lowMemory+1
.3379					_CVNoCarry:
.3379	ad 19 0d	lda $0d19			lda 	varHash 					; store hash at offset 4.
.337c	a0 04		ldy #$04			ldy 	#4
.337e	91 04		sta ($04),y			sta 	(temp0),y
.3380	68		pla				pla 								; offset, work out where the variable name is.
.3381	18		clc				clc
.3382	65 02		adc $02				adc 	codePtr
.3384	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3386	91 04		sta ($04),y			sta 	(temp0),y
.3388	a5 03		lda $03				lda 	codePtr+1
.338a	69 00		adc #$00			adc 	#0
.338c	c8		iny				iny
.338d	91 04		sta ($04),y			sta 	(temp0),y
.338f	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3392	b0 03		bcs $3397			bcs 	_CVNotImmediate
.3394	20 f4 33	jsr $33f4			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3397					_CVNotImmediate:
.3397	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3399	b1 7c		lda ($7c),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.339b	91 04		sta ($04),y			sta 	(temp0),y
.339d	c8		iny				iny
.339e	b1 7c		lda ($7c),y			lda 	(hashList),y
.33a0	91 04		sta ($04),y			sta 	(temp0),y
.33a2	a5 05		lda $05				lda 	temp0+1 					; set new link
.33a4	91 7c		sta ($7c),y			sta 	(hashList),y
.33a6	88		dey				dey
.33a7	a5 04		lda $04				lda 	temp0
.33a9	91 7c		sta ($7c),y			sta 	(hashList),y
.33ab	ad 1a 0d	lda $0d1a			lda 	varType 					; type in A
.33ae	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.33b0	20 bc 33	jsr $33bc			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.33b3	68		pla				pla
.33b4	a8		tay				tay
.33b5	60		rts				rts
>33b6	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>33b8	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>33ba	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.33bc					ZeroTemp0Y:
.33bc	4a		lsr a				lsr 	a 							; bit 0 in carry
.33bd	0a		asl a				asl 	a
.33be	b0 19		bcs $33d9			bcs 	_ZTExit 					; we don't initialise arrays.
.33c0	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.33c2	f0 16		beq $33da			beq 	_ZTWriteNullString 			; write "" string
.33c4	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.33c6	f0 22		beq $33ea			beq 	_ZTWriteFloat
.33c8	98		tya				tya
.33c9	48		pha				pha
.33ca	a9 00		lda #$00			lda 	#0
.33cc	91 04		sta ($04),y			sta 	(temp0),y
.33ce	c8		iny				iny
.33cf	91 04		sta ($04),y			sta 	(temp0),y
.33d1	c8		iny				iny
.33d2	91 04		sta ($04),y			sta 	(temp0),y
.33d4	c8		iny				iny
.33d5	91 04		sta ($04),y			sta 	(temp0),y
.33d7	68		pla				pla
.33d8	a8		tay				tay
.33d9					_ZTExit:
.33d9	60		rts				rts
.33da					_ZTWriteNullString:
.33da	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.33dc	8d cc 0a	sta $0acc			sta 	NullString
.33df	a9 cc		lda #$cc			lda 	#NullString & $FF
.33e1	91 04		sta ($04),y			sta 	(temp0),y
.33e3	a9 0a		lda #$0a			lda 	#NullString >> 8
.33e5	c8		iny				iny
.33e6	91 04		sta ($04),y			sta 	(temp0),y
.33e8	88		dey				dey
.33e9	60		rts				rts
.33ea					_ZTWriteFloat:
.33ea	8a		txa				txa
.33eb	48		pha				pha
.33ec	a2 1e		ldx #$1e		ldx	#30
.33ee	20 28 27	jsr $2728		jsr	floatingpointHandler
.33f1	68		pla				pla
.33f2	aa		tax				tax
.33f3	60		rts				rts
.33f4					CloneVariableName:
.33f4	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.33f6	b1 04		lda ($04),y			lda 	(temp0),y
.33f8	85 08		sta $08				sta 	temp2
.33fa	c8		iny				iny
.33fb	b1 04		lda ($04),y			lda 	(temp0),y
.33fd	85 09		sta $09				sta 	temp2+1
.33ff	a5 10		lda $10				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3401	91 04		sta ($04),y			sta 	(temp0),y
.3403	88		dey				dey
.3404	a5 0f		lda $0f				lda 	lowMemory
.3406	91 04		sta ($04),y			sta 	(temp0),y
.3408	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.340a					_CVNCopy:
.340a	b1 08		lda ($08),y			lda		(temp2),y
.340c	91 0f		sta ($0f),y			sta 	(lowMemory),y
.340e	c8		iny				iny
.340f	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3411	90 f7		bcc $340a			bcc 	_CVNCopy
.3413	98		tya				tya 								; add Y to low memory
.3414	18		clc				clc
.3415	65 0f		adc $0f				adc 	lowMemory
.3417	85 0f		sta $0f				sta 	lowMemory
.3419	90 02		bcc $341d			bcc 	_CVNNoCarry
.341b	e6 10		inc $10				inc 	lowMemory+1
.341d					_CVNNoCarry:
.341d	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.341e					CreateArray:
.341e	20 aa 32	jsr $32aa			jsr 	AccessSetup 				; set up the basic stuff.
.3421	ad 1a 0d	lda $0d1a			lda 	varType 					; is the variable type an array
.3424	4a		lsr a				lsr 	a
.3425	90 3f		bcc $3466			bcc 	_CANotArray 				; no, cause an error.
.3427	20 d6 34	jsr $34d6			jsr 	FindVariable 				; does the variable exist already
.342a	b0 35		bcs $3461			bcs 	_CAFound 					; cannot redefine it.
.342c	20 5d 33	jsr $335d			jsr 	CreateVariable 				; create the variable entry.
.342f	ac 1b 0d	ldy $0d1b			ldy 	varEnd 						; point Y to the end of the variable entry.
.3432	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.3434	48		pha				pha
.3435	a5 05		lda $05				lda 	temp0+1
.3437	48		pha				pha
.3438	ad 1a 0d	lda $0d1a			lda 	varType 					; push variable type on the stack.
.343b	48		pha				pha
.343c	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.343e	a2 06		ldx #$06		ldx	#6
.3440	20 f9 22	jsr $22f9		jsr	mainHandler
.3443	a2 00		ldx #$00		ldx	#0
.3445	20 f9 22	jsr $22f9		jsr	mainHandler
.3448	68		pla				pla 		 						; restore type and position.
.3449	8d 1a 0d	sta $0d1a			sta 	varType
.344c	68		pla				pla
.344d	85 05		sta $05				sta 	temp0+1
.344f	68		pla				pla
.3450	85 04		sta $04				sta 	temp0
.3452	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3454	29 e0		and #$e0			and 	#$E0
.3456	05 58		ora $58				ora 	esInt2
.3458	05 60		ora $60				ora 	esInt3
.345a	f0 0f		beq $346b			beq 	_CASizeOk
.345c					_CASize:
.345c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.345e	20 f6 23	jsr $23f6		jsr	errorHandler
.3461					_CAFound:
.3461	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3463	20 f6 23	jsr $23f6		jsr	errorHandler
.3466					_CANotArray:
.3466	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3468	20 f6 23	jsr $23f6		jsr	errorHandler
.346b					_CASizeOk:
.346b	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.346d	d0 02		bne $3471			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.346f	e6 49		inc $49				inc 	esInt0+1
.3471					_CANoCarry:
.3471	98		tya				tya
.3472	48		pha				pha
.3473	a0 05		ldy #$05			ldy 	#5
.3475	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.3477	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.3479	c8		iny				iny
.347a	a5 10		lda $10				lda 	lowMemory+1
.347c	91 04		sta ($04),y			sta 	(temp0),y
.347e	c8		iny				iny
.347f	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3481	91 04		sta ($04),y			sta 	(temp0),y
.3483	c8		iny				iny
.3484	a5 50		lda $50				lda 	esInt1
.3486	91 04		sta ($04),y			sta 	(temp0),y
.3488	c8		iny				iny
.3489	ae 1a 0d	ldx $0d1a			ldx 	varType 					; get the length per element
.348c	bd 94 34	lda $3494,x			lda 	_CAActualSize-$3A-1,x
.348f	91 04		sta ($04),y			sta 	(temp0),y
.3491	aa		tax				tax 								; save size in X
.3492	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.3494	85 04		sta $04				sta 	temp0
.3496	a5 10		lda $10				lda 	lowMemory+1
.3498	85 05		sta $05				sta 	temp0+1
.349a	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.349c	85 06		sta $06				sta 	temp1
.349e	85 07		sta $07				sta 	temp1+1
.34a0					_CAInitialiseArray:
.34a0	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.34a2	ad 1a 0d	lda $0d1a			lda 	varType 					; base type of array in A.
.34a5	29 fe		and #$fe			and 	#$FE
.34a7	20 bc 33	jsr $33bc			jsr 	ZeroTemp0Y
.34aa	8a		txa				txa 								; add X to temp0, also updating lowMemory
.34ab	18		clc				clc
.34ac	65 04		adc $04				adc 	temp0
.34ae	85 04		sta $04				sta 	temp0
.34b0	85 0f		sta $0f				sta 	lowMemory
.34b2	a5 05		lda $05				lda 	temp0+1
.34b4	69 00		adc #$00			adc 	#0
.34b6	85 05		sta $05				sta 	temp0+1
.34b8	85 10		sta $10				sta 	lowMemory+1
.34ba	e6 06		inc $06				inc 	temp1 						; bump the counter.
.34bc	d0 02		bne $34c0			bne 	_CAIANoCarry
.34be	e6 07		inc $07				inc 	temp1+1
.34c0					_CAIANoCarry:
.34c0	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.34c2	c5 06		cmp $06				cmp 	temp1
.34c4	d0 da		bne $34a0			bne 	_CAInitialiseArray
.34c6	a5 50		lda $50				lda 	esInt1
.34c8	c5 07		cmp $07				cmp 	temp1+1
.34ca	d0 d4		bne $34a0			bne 	_CAInitialiseArray
.34cc	68		pla				pla
.34cd	a8		tay				tay
.34ce	60		rts				rts
.34cf					_CAActualSize:
>34cf	04 00						.byte 	VarISize,0
>34d1	02 00						.byte 	VarSSize,0
>34d3	06 00						.byte 	VarFSize,0
>34d5	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.34d6					FindVariable:
.34d6	98		tya				tya
.34d7	48		pha				pha
.34d8	98		tya				tya 								; point temp2 to the actual name
.34d9	18		clc				clc 								; in memory of the variable being created
.34da	65 02		adc $02				adc 	codePtr
.34dc	85 08		sta $08				sta 	temp2
.34de	a5 03		lda $03				lda 	codePtr+1
.34e0	69 00		adc #$00			adc 	#0
.34e2	85 09		sta $09				sta 	temp2+1
.34e4	a0 00		ldy #$00			ldy 	#0
.34e6	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.34e8	85 04		sta $04				sta 	temp0
.34ea	a5 7d		lda $7d				lda 	hashList+1
.34ec	85 05		sta $05				sta 	temp0+1
.34ee	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.34f0	b1 04		lda ($04),y			lda 	(temp0),y
.34f2	f0 2c		beq $3520			beq 	_FVFail
.34f4	aa		tax				tax
.34f5	88		dey				dey		 							; get LSB
.34f6	b1 04		lda ($04),y			lda 	(temp0),y
.34f8	85 04		sta $04				sta 	temp0 						; update pointer.
.34fa	86 05		stx $05				stx 	temp0+1
.34fc	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.34fe	b1 04		lda ($04),y			lda 	(temp0),y
.3500	cd 19 0d	cmp $0d19			cmp 	varHash
.3503	d0 e9		bne $34ee			bne 	_FVNext 					; if not, no point in checking the name.
.3505	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3506	b1 04		lda ($04),y			lda 	(temp0),y
.3508	85 07		sta $07				sta 	temp1+1
.350a	88		dey				dey
.350b	b1 04		lda ($04),y			lda 	(temp0),y
.350d	85 06		sta $06				sta 	temp1
.350f	a0 00		ldy #$00			ldy 	#0
.3511					_FVCheck:
.3511	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.3513	d1 08		cmp ($08),y			cmp 	(temp2),y
.3515	d0 d7		bne $34ee			bne 	_FVNext		 				; fail if different.
.3517	c8		iny				iny
.3518	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.351a	90 f5		bcc $3511			bcc 	_FVCheck
.351c	68		pla				pla
.351d	a8		tay				tay
.351e	38		sec				sec
.351f	60		rts				rts
.3520					_FVFail:
.3520	68		pla				pla
.3521	a8		tay				tay
.3522	18		clc				clc
.3523	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3524					HashTableReset:
.3524	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3526	a9 00		lda #$00			lda 	#0
.3528					_HTRClear:
.3528	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.352b	ca		dex				dex
.352c	d0 fa		bne $3528			bne 	_HTRClear
.352e	60		rts				rts

;******  Return to file: variable/variable.asm

.352f					variableHandler:
.352f	7c 32 35	jmp ($3532,x)			jmp 	(variableVectors,x)
.3532					variableVectors:
>3532	43 32					.word AccessVariable       ; index 0
>3534	1e 34					.word CreateArray          ; index 2
>3536	24 35					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3538					section_end_variable:

;******  End of listing
