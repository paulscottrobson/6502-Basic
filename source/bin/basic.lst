
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Wed Mar  3 16:51:27 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
.000b					highMemory:
>000b							.fill 	2
.000d					lowMemory:
>000d							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_BadIndex = 18 ; Bad NEXT index
=19					ErrorID_Struct = 19 ; Structures nested wrong
=20					ErrorID_NoAuto = 20 ; Cannot create variable
=21					ErrorID_RetStack = 21 ; Return stack out of space.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 1f 12	jmp $121f			jmp 	Command_Run
.222d					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	0f 0a 00 05 31 3a 8d 40			.byte 15,10,0,5,49,58,141,64,197,5,50,58,141,64,128,5,11,0,153,128,18,12,0,156,176,5,49,58,198,124,196,161,211,133,1,49,199,128,18,13,0,156,176,5,50,58,198,79,196,161,211,133,1,50,199,128,6,14,0,158,171,128,0
>5008	c5 05 32 3a 8d 40 80 05 0b 00 99 80 12 0c 00 9c
>5018	b0 05 31 3a c6 7c c4 a1 d3 85 01 31 c7 80 12 0d
>5028	00 9c b0 05 32 3a c6 4f c4 a1 d3 85 01 32 c7 80
>5038	06 0e 00 9e ab 80 00

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 7b 1d	jsr $1d7b			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 82 1e	jsr $1e82			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0b		sta $0b				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0c		sta $0c				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0d		sta $0d				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 0e		sta $0e				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 68 10	jsr $1068			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 e1 1d	jsr $1de1			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 26 22	jsr $2226		jsr	variableHandler
.1065	68		pla				pla
.1066	a8		tay				tay
.1067	60		rts				rts
.1068					AdvanceLowMemoryByte:
.1068	18		clc				clc
.1069	65 0d		adc $0d				adc 	lowMemory
.106b	85 0d		sta $0d				sta 	lowMemory
.106d	90 02		bcc $1071			bcc 	_ALMBExit
.106f	e6 0e		inc $0e				inc 	lowMemory+1
.1071					_ALMBExit:
.1071	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.222d					Command_FOR:
.222d	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.222f	a2 0b		ldx #$0b			ldx 	#11
.2231	20 ef 1d	jsr $1def			jsr 	RSClaim
.2234	20 ae 10	jsr $10ae			jsr 	CommandLET 					; do the same as LET.
.2237	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.2239	c9 80		cmp #$80			cmp 	#$80
.223b	d0 4c		bne $2289			bne 	_CFType
.223d	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.223f	20 bc 1d	jsr $1dbc			jsr 	CheckToken
.2242	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2244	20 73 17	jsr $1773			jsr 	EvaluateInteger				; get terminal value in stack 1
.2247	98		tya				tya
.2248	48		pha				pha
.2249	a0 04		ldy #$04			ldy 	#4
.224b	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.224d	91 78		sta ($78),y			sta 	(rsPointer),y
.224f	c8		iny				iny
.2250	a5 50		lda $50				lda		esInt1
.2252	91 78		sta ($78),y			sta 	(rsPointer),y
.2254	c8		iny				iny
.2255	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2257	91 78		sta ($78),y			sta 	(rsPointer),y
.2259	c8		iny				iny
.225a	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.225c	91 78		sta ($78),y			sta 	(rsPointer),y
.225e	c8		iny				iny
.225f	a5 51		lda $51				lda		esInt1+1
.2261	91 78		sta ($78),y			sta 	(rsPointer),y
.2263	c8		iny				iny
.2264	a5 59		lda $59				lda		esInt2+1
.2266	91 78		sta ($78),y			sta 	(rsPointer),y
.2268	c8		iny				iny
.2269	a5 61		lda $61				lda		esInt3+1
.226b	91 78		sta ($78),y			sta 	(rsPointer),y
.226d	68		pla				pla
.226e	a8		tay				tay
.226f	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.2271	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.2273	d0 0e		bne $2283			bne 	_CFDone
.2275	c8		iny				iny									; skip over step.
.2276	20 73 17	jsr $1773			jsr 	EvaluateInteger 			; get step
.2279	98		tya				tya
.227a	48		pha				pha
.227b	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.227d	a0 06		ldy #$06			ldy 	#6
.227f	91 78		sta ($78),y			sta 	(rsPointer),y
.2281	68		pla				pla
.2282	a8		tay				tay
.2283					_CFDone:
.2283	a9 01		lda #$01			lda 	#1
.2285	20 1b 1e	jsr $1e1b			jsr 	RSSavePosition 				; save position.
.2288	60		rts				rts
.2289					_CFType:
.2289	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.228b	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.228e					Command_NEXT:
.228e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2290	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2292	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2294	f0 05		beq $229b			beq 	_isok
.2296	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2298	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.229b					_isok:
.229b	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.229d	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.229f	b0 18		bcs $22b9			bcs 	_CNNoIndex
.22a1	a2 00		ldx #$00			ldx 	#0 							; start on stack
.22a3	20 a0 17	jsr $17a0			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.22a6	98		tya				tya
.22a7	48		pha				pha
.22a8	a0 04		ldy #$04			ldy 	#4 							; check same variable
.22aa	b1 78		lda ($78),y			lda 	(rsPointer),y
.22ac	d5 48		cmp $48,x			cmp 	esInt0,x
.22ae	d0 76		bne $2326			bne 	_CNBadIndex
.22b0	c8		iny				iny
.22b1	b1 78		lda ($78),y			lda 	(rsPointer),y
.22b3	d5 50		cmp $50,x			cmp 	esInt1,x
.22b5	d0 6f		bne $2326			bne 	_CNBadIndex
.22b7	68		pla				pla
.22b8	a8		tay				tay
.22b9					_CNNoIndex:
.22b9	98		tya				tya
.22ba	48		pha				pha
.22bb	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.22bd	b1 78		lda ($78),y			lda 	(rsPointer),y
.22bf	85 04		sta $04				sta 	temp0
.22c1	c8		iny				iny
.22c2	b1 78		lda ($78),y			lda 	(rsPointer),y
.22c4	85 05		sta $05				sta 	temp0+1
.22c6	c8		iny				iny
.22c7	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.22c9	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.22cb	85 09		sta $09				sta 	temp2+1 					; save for later.
.22cd	10 01		bpl $22d0			bpl 	_CNSignX
.22cf	ca		dex				dex  								; X = $FF
.22d0					_CNSignX:
.22d0	18		clc				clc 								; add to the LSB
.22d1	a0 00		ldy #$00			ldy 	#0
.22d3	71 04		adc ($04),y			adc 	(temp0),y
.22d5	91 04		sta ($04),y			sta 	(temp0),y
.22d7					_CNPropogate:
.22d7	c8		iny				iny  								; add the sign extended in X to the rest.
.22d8	8a		txa				txa
.22d9	71 04		adc ($04),y			adc 	(temp0),y
.22db	91 04		sta ($04),y			sta 	(temp0),y
.22dd	c8		iny				iny
.22de	8a		txa				txa
.22df	71 04		adc ($04),y			adc 	(temp0),y
.22e1	91 04		sta ($04),y			sta 	(temp0),y
.22e3	c8		iny				iny
.22e4	8a		txa				txa
.22e5	71 04		adc ($04),y			adc 	(temp0),y
.22e7	91 04		sta ($04),y			sta 	(temp0),y
.22e9	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.22ea	a5 78		lda $78				lda 	rsPointer
.22ec	69 07		adc #$07			adc 	#7
.22ee	85 06		sta $06				sta 	temp1
.22f0	a9 00		lda #$00			lda 	#0
.22f2	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.22f4	a8		tay				tay 								; and clear the Y register again.
.22f5	65 79		adc $79				adc 	rsPointer+1
.22f7	85 07		sta $07				sta 	temp1+1
.22f9	38		sec				sec 								; calculate current - limit oring interim values.
.22fa	20 32 23	jsr $2332			jsr 	_CNCompare
.22fd	20 32 23	jsr $2332			jsr 	_CNCompare
.2300	20 32 23	jsr $2332			jsr 	_CNCompare
.2303	20 32 23	jsr $2332			jsr 	_CNCompare
.2306	50 02		bvc $230a			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2308	49 80		eor #$80			eor 	#$80
.230a					_CNNoOverflow:
.230a	a4 09		ldy $09				ldy 	temp2+1						; get step back
.230c	30 1d		bmi $232b			bmi 	_CNCheckDownto
.230e	c9 00		cmp #$00			cmp 	#0
.2310	30 0c		bmi $231e			bmi 	_CNLoopRound 				; loop round if < =
.2312	a5 08		lda $08				lda 	temp2
.2314	f0 08		beq $231e			beq 	_CNLoopRound
.2316					_CNLoopExit:
.2316	68		pla				pla
.2317	a8		tay				tay
.2318	a9 0b		lda #$0b			lda 	#11
.231a	20 11 1e	jsr $1e11			jsr 	RSFree
.231d	60		rts				rts
.231e					_CNLoopRound:
.231e	68		pla				pla
.231f	a8		tay				tay
.2320	a9 01		lda #$01			lda 	#1
.2322	20 2e 1e	jsr $1e2e			jsr 	RSLoadPosition				; go back to the loop top
.2325	60		rts				rts
.2326					_CNBadIndex:
.2326	a2 12		ldx #$12			ldx 	#ErrorID_BadIndex
.2328	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.232b					_CNCheckDownto:
.232b	c9 00		cmp #$00			cmp 	#0
.232d	10 ef		bpl $231e			bpl 	_CNLoopRound
.232f	4c 16 23	jmp $2316			jmp 	_CNLoopExit
.2332					_CNCompare:
.2332	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2334	f1 06		sbc ($06),y			sbc 	(temp1),y
.2336	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.2338	85 08		sta $08				sta 	temp2
.233a	c8		iny				iny
.233b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1072					CommandIf:
.1072	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; if what ?
.1075	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1077	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.1079	f0 04		beq $107f			beq 	_IfSimple
.107b	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.107d	d0 1b		bne $109a			bne 	_IfComplex
.107f					_IfSimple:
.107f	20 7b 1d	jsr $1d7b			jsr 	MInt32Zero					; check if TOS zero
.1082	f0 10		beq $1094			beq 	_IfEOL 						; go to next line.
.1084	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1086	c8		iny				iny
.1087	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1089	f0 0c		beq $1097			beq 	_IfGoto 					; do the Goto code
.108b	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.108d	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.108f	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1091	f0 04		beq $1097			beq 	_IfGoto
.1093	60		rts				rts 								; else continue on this line.
.1094					_IfEOL:
.1094	4c 6e 13	jmp $136e			jmp 	AdvanceNextLine 			; go to next line
.1097					_IfGoto:
.1097	4c ad 13	jmp $13ad			jmp 	CommandGoto
.109a					_IfComplex:
.109a	20 7b 1d	jsr $1d7b			jsr 	MInt32Zero 					; is it true ?
.109d	f0 01		beq $10a0			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.109f	60		rts				rts 								; else continue.
.10a0					_IFSkip:
.10a0	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a2	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a4	4c a5 23	jmp $23a5			jmp		ScanForward
.10a7					Command_ELSE:
.10a7	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a9	8a		txa				txa
.10aa	4c a5 23	jmp $23a5			jmp		ScanForward
.10ad					Command_ENDIF:
.10ad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10ae					CommandLet:
.10ae	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b0	20 a0 17	jsr $17a0			jsr 	EvaluateReference
.10b3	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b5	20 bc 1d	jsr $1dbc			jsr 	CheckToken
.10b8	e8		inx				inx 								; do RHS
.10b9	20 54 17	jsr $1754			jsr 	Evaluate 					; evaluate and derefernce
.10bc	ca		dex				dex
.10bd	20 c1 10	jsr $10c1			jsr 	WriteValue 					; write it out
.10c0	60		rts				rts
.10c1					WriteValue:
.10c1	98		tya				tya
.10c2	48		pha				pha
.10c3	20 23 11	jsr $1123			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c6	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10c8	55 41		eor $41,x			eor 	esType+1,x
.10ca	29 40		and #$40			and 	#$40
.10cc	d0 50		bne $111e			bne		_WVType
.10ce	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d0	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d2	29 40		and #$40			and 	#$40
.10d4	d0 1f		bne $10f5			bne 	_WVCopyString
.10d6	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10d8	15 41		ora $41,x			ora 	esType+1,x
.10da	4a		lsr a				lsr 	a
.10db	90 22		bcc $10ff			bcc 	_WVCopyData4
.10dd	b5 40		lda $40,x			lda 	esType,x
.10df	4a		lsr a				lsr 	a
.10e0	90 3c		bcc $111e			bcc 	_WVType
.10e2	e8		inx				inx 								; force the value being written to be a float.
.10e3	20 1f 14	jsr $141f			jsr 	BPMakeFloat
.10e6	ca		dex				dex
.10e7	20 23 11	jsr $1123			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ea	e8		inx				inx
.10eb	8a		txa				txa
.10ec	a2 1e		ldx #$1e		ldx	#30
.10ee	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.10f1	aa		tax				tax
.10f2	4c 1b 11	jmp $111b			jmp 	_WVCopyExit
.10f5					_WVCopyString:
.10f5	8a		txa				txa
.10f6	a2 08		ldx #$08		ldx	#8
.10f8	20 ba 20	jsr $20ba		jsr	stringHandler
.10fb	aa		tax				tax
.10fc	4c 1b 11	jmp $111b			jmp 	_WVCopyExit
.10ff					_WVCopyData4:
.10ff	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1101	29 20		and #$20			and 	#$20
.1103	d0 10		bne $1115			bne 	_WVCopyData1
.1105	a0 03		ldy #$03			ldy 	#3
.1107	b5 61		lda $61,x			lda 	esInt3+1,x
.1109	91 04		sta ($04),y			sta 	(temp0),y
.110b	88		dey				dey
.110c	b5 59		lda $59,x			lda 	esInt2+1,x
.110e	91 04		sta ($04),y			sta 	(temp0),y
.1110	88		dey				dey
.1111	b5 51		lda $51,x			lda 	esInt1+1,x
.1113	91 04		sta ($04),y			sta 	(temp0),y
.1115					_WVCopyData1:
.1115	a0 00		ldy #$00			ldy 	#0
.1117	b5 49		lda $49,x			lda 	esInt0+1,x
.1119	91 04		sta ($04),y			sta 	(temp0),y
.111b					_WVCopyExit:
.111b	68		pla				pla
.111c	a8		tay				tay
.111d	60		rts				rts
.111e					_WVType:
.111e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1120	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1123					TOSToTemp0:
.1123	b5 48		lda $48,x			lda 	esInt0,x
.1125	85 04		sta $04				sta 	temp0
.1127	b5 50		lda $50,x			lda 	esInt1,x
.1129	85 05		sta $05				sta 	temp0+1
.112b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.112c					Command_New:
.112c	20 81 12	jsr $1281			jsr 	ResetCodeAddress 			; point to first line
.112f	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1131	98		tya				tya
.1132	91 02		sta ($02),y			sta 	(codePtr),y
.1134	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.1137	4c 6b 13	jmp $136b			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.113a					Command_Poke:
.113a	a9 01		lda #$01			lda 	#1
.113c	d0 06		bne $1144			bne 	PokeGeneral
.113e					Command_Doke:
.113e	a9 02		lda #$02			lda 	#2
.1140	d0 02		bne $1144			bne 	PokeGeneral
.1142					Command_Loke:
.1142	a9 03		lda #$03			lda 	#3
.1144					PokeGeneral:
.1144	48		pha				pha 								; save size
.1145	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; target address
.1148	20 d4 1d	jsr $1dd4			jsr	 	CheckComma
.114b	e8		inx				inx
.114c	20 73 17	jsr $1773			jsr 	EvaluateInteger 			; what value to POKE ?
.114f	ca		dex				dex
.1150	20 23 11	jsr $1123			jsr 	TOSToTemp0 					; temp0 points to the target address
.1153	84 0a		sty $0a				sty 	tempShort 					; save Y
.1155	68		pla				pla 								; get copy type and dispatch
.1156	aa		tax				tax
.1157	ca		dex				dex
.1158	f0 14		beq $116e			beq 	_Poke1
.115a	ca		dex				dex
.115b	f0 0b		beq $1168			beq 	_Poke2
.115d	a0 03		ldy #$03			ldy 	#3
.115f	a5 61		lda $61				lda 	esInt3+1
.1161	91 04		sta ($04),y			sta 	(temp0),y
.1163	88		dey				dey
.1164	a5 59		lda $59				lda 	esInt2+1
.1166	91 04		sta ($04),y			sta 	(temp0),y
.1168					_Poke2:
.1168	a0 01		ldy #$01			ldy 	#1
.116a	a5 51		lda $51				lda 	esInt1+1
.116c	91 04		sta ($04),y			sta 	(temp0),y
.116e					_Poke1:
.116e	a0 00		ldy #$00			ldy 	#0
.1170	a5 49		lda $49				lda 	esInt0+1
.1172	91 04		sta ($04),y			sta 	(temp0),y
.1174	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1176	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af0					lastPrintToken:
>0af0							.fill 	1
.1177					Command_Print:
.1177	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1179	8d f0 0a	sta $0af0			sta 	lastPrintToken
.117c	88		dey				dey
.117d					_PrintLoopSkip:
.117d	c8		iny				iny
.117e					_PrintLoop:
.117e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1180	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1182	f0 5b		beq $11df			beq 	_PrintExit
.1184	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.1186	f0 57		beq $11df			beq 	_PrintExit
.1188	8d f0 0a	sta $0af0			sta 	lastPrintToken 				; update LPT
.118b	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.118d	f0 ee		beq $117d			beq 	_PrintLoopSkip
.118f	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.1191	f0 3c		beq $11cf			beq	 	_PrintNewLine
.1193	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.1195	f0 40		beq $11d7			beq 	_PrintTab
.1197	20 52 17	jsr $1752			jsr 	EvaluateRoot 				; evaluate something at the root
.119a	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.119c	85 04		sta $04				sta 	temp0
.119e	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11a0	85 05		sta $05				sta 	1+(temp0)
.11a2	a5 40		lda $40				lda 	esType 						; get type
.11a4	f0 15		beq $11bb			beq		_PrintInteger
.11a6	4a		lsr a				lsr 	a 							; check for floating point
.11a7	b0 08		bcs $11b1			bcs 	_PrintFloat
.11a9					_PrintString:
.11a9	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.11ab	20 23 11	jsr $1123			jsr 	TOSToTemp0
.11ae	4c c9 11	jmp $11c9			jmp 	_PrintTemp0 				; print no leading space.
.11b1					_PrintFloat:
.11b1	a9 00		lda #$00			lda 	#0 							; stack level.
.11b3	a2 14		ldx #$14		ldx	#20
.11b5	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.11b8	4c c2 11	jmp $11c2			jmp 	_PrintSpaceTemp0
.11bb					_PrintInteger:
.11bb	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11bd	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11bf	20 aa 1c	jsr $1caa			jsr 	MInt32ToString				; convert to text
.11c2					_PrintSpaceTemp0:
.11c2	a9 20		lda #$20			lda 	#32
.11c4	a2 04		ldx #$04		ldx	#4
.11c6	20 75 1e	jsr $1e75		jsr	deviceHandler
.11c9					_PrintTemp0:
.11c9	20 f0 11	jsr $11f0			jsr 	PrintString
.11cc	4c 7e 11	jmp $117e			jmp 	_PrintLoop
.11cf					_PrintNewLine:
.11cf	a2 00		ldx #$00		ldx	#0
.11d1	20 75 1e	jsr $1e75		jsr	deviceHandler
.11d4	4c 7d 11	jmp $117d			jmp 	_PrintLoopSkip
.11d7					_PrintTab:
.11d7	a2 06		ldx #$06		ldx	#6
.11d9	20 75 1e	jsr $1e75		jsr	deviceHandler
.11dc	4c 7d 11	jmp $117d			jmp 	_PrintLoopSkip
.11df					_PrintExit:
.11df	ad f0 0a	lda $0af0			lda		lastPrintToken 				; check last token
.11e2	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11e4	f0 09		beq $11ef			beq 	_PrintExit2
.11e6	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.11e8	f0 05		beq $11ef			beq 	_PrintExit2
.11ea	a2 00		ldx #$00		ldx	#0
.11ec	20 75 1e	jsr $1e75		jsr	deviceHandler
.11ef					_PrintExit2:
.11ef	60		rts				rts
.11f0					PrintString:
.11f0	8a		txa				txa
.11f1	48		pha				pha
.11f2	98		tya				tya
.11f3	48		pha				pha
.11f4	a0 00		ldy #$00			ldy 	#0							; get length
.11f6	b1 04		lda ($04),y			lda 	(temp0),y
.11f8	aa		tax				tax 								; into X
.11f9	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.11fb	f0 10		beq $120d			beq 	_PSExit
.11fd	ca		dex				dex
.11fe	8a		txa				txa
.11ff	48		pha				pha
.1200	c8		iny				iny
.1201	b1 04		lda ($04),y			lda 	(temp0),y
.1203	a2 04		ldx #$04		ldx	#4
.1205	20 75 1e	jsr $1e75		jsr	deviceHandler
.1208	68		pla				pla
.1209	aa		tax				tax
.120a	4c f9 11	jmp $11f9			jmp 	_PSLoop
.120d					_PSExit:
.120d	68		pla				pla
.120e	a8		tay				tay
.120f	68		pla				pla
.1210	aa		tax				tax
.1211	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1212					Command_Rem:
.1212					Command_Rem2:
.1212	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1214	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1216	d0 06		bne $121e			bne 	_CRNotString
.1218	c8		iny				iny
.1219	98		tya				tya
.121a	38		sec				sec
.121b	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.121d	a8		tay				tay
.121e					_CRNotString:
.121e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.233c					Command_Repeat:
.233c	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.233e	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2340	20 ef 1d	jsr $1def			jsr 	RSClaim
.2343	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2345	20 1b 1e	jsr $1e1b			jsr 	RSSavePosition
.2348	60		rts				rts
.2349					Command_Until:
.2349	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.234b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.234d	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.234f	f0 05		beq $2356			beq 	_isok
.2351	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2353	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.2356					_isok:
.2356	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; at the bottom.
.2359	20 7b 1d	jsr $1d7b			jsr 	MInt32Zero					; check if TOS zero
.235c	d0 06		bne $2364			bne 	_CUExit
.235e	a9 01		lda #$01			lda 	#1
.2360	20 2e 1e	jsr $1e2e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2363	60		rts				rts
.2364					_CUExit:
.2364	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2366	20 11 1e	jsr $1e11			jsr 	RSFree
.2369	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.121f					Command_Run:
.121f	a2 ff		ldx #$ff			ldx 	#$FF
.1221	9a		txs				txs
.1222	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.1225	20 81 12	jsr $1281			jsr 	ResetCodeAddress
.1228	a0 03		ldy #$03			ldy 	#3
.122a					CRNextInstruction:
.122a	64 7b		stz $7b				stz 	softMemAlloc+1
.122c	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.122e	10 1c		bpl $124c			bpl 	_CRNotToken
.1230	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1232	b0 0c		bcs $1240			bcs 	_CRExecute
.1234	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1236	b0 56		bcs $128e			bcs 	Unimplemented
.1238	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.123a	b0 04		bcs $1240			bcs 	_CRExecute
.123c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.123e	b0 16		bcs $1256			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1240					_CRExecute:
.1240	c8		iny				iny 								; consume it.
.1241	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1242	aa		tax				tax
.1243	20 49 12	jsr $1249			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1246	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.1249					_CRRunRoutine:
.1249	7c 98 12	jmp ($1298,x)			jmp 	(Group0Vectors,x)
.124c					_CRNotToken:
.124c	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.124e	b0 3e		bcs $128e			bcs 	Unimplemented
.1250					_CRDefaultLet:
.1250	20 ae 10	jsr $10ae			jsr 	CommandLet 					; do the default, LET
.1253	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.1256					_CRCheckIndirect:
.1256	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1258	f0 f6		beq $1250			beq 	_CRDefaultLet
.125a	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.125c	f0 f2		beq $1250			beq 	_CRDefaultLet
.125e	d0 2e		bne $128e			bne 	Unimplemented
.1260					CommandShift1:
.1260	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1262	10 2a		bpl $128e			bpl 	Unimplemented 				; we have an error as this should not happen.
.1264	0a		asl a				asl 	a 							; double into X
.1265	aa		tax				tax
.1266	c8		iny				iny 								; advance over it.
.1267	20 6d 12	jsr $126d			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.126a	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.126d					_RunIt:
.126d	7c 44 13	jmp ($1344,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.1270					CommandShift2:
.1270	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1272	10 1a		bpl $128e			bpl 	Unimplemented 				; we have an error as this should not happen.
.1274	0a		asl a				asl 	a 							; double into X
.1275	aa		tax				tax
.1276	c8		iny				iny 								; advance over it.
.1277	20 7d 12	jsr $127d			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.127a	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.127d					_RunIt:
.127d	7c 58 13	jmp ($1358,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.1280					CommandColon:
.1280	60		rts				rts
.1281					ResetCodeAddress:
.1281	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1284	85 02		sta $02				sta 	codePtr
.1286	ad c9 0a	lda $0ac9			lda 	basePage+1
.1289	85 03		sta $03				sta 	codePtr+1
.128b	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.128d	60		rts				rts
.128e					Unimplemented:
.128e	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1290	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1293					TKErr01:
.1293					TKErr02:
.1293					TKErr03:
.1293					TKErr04:
.1293					TKErr05:
.1293					TKErr06:
.1293					TKErr07:
.1293					TKErr08:
.1293	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1295	20 82 1e	jsr $1e82			jsr 	ErrorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1298					Group0Vectors:
>1298	6e 13					.word	AdvanceNextLine          ; $80 [[eol]]
>129a	60 12					.word	CommandShift1            ; $81 [[sh1]]
>129c	70 12					.word	CommandShift2            ; $82 [[sh2]]
>129e	8e 12					.word	Unimplemented            ; $83 [[sh3]]
>12a0	8e 12					.word	Unimplemented            ; $84 [[fpc]]
>12a2	93 12					.word	TKErr08                  ; $85 [[str]]
>12a4	c1 14					.word	AndHandler               ; $86 and
>12a6	ae 14					.word	OrHandler                ; $87 or
>12a8	9b 14					.word	XorHandler               ; $88 xor
>12aa	e3 15					.word	CompareGreaterEq         ; $89 >=
>12ac	ed 15					.word	CompareLessEq            ; $8a <=
>12ae	cf 15					.word	CompareGreater           ; $8b >
>12b0	c5 15					.word	CompareLess              ; $8c <
>12b2	bb 15					.word	CompareEquals            ; $8d =
>12b4	d9 15					.word	CompareNotEquals         ; $8e <>
>12b6	2c 14					.word	AddHandler               ; $8f +
>12b8	4f 14					.word	SubHandler               ; $90 -
>12ba	e7 14					.word	ShrHandler               ; $91 >>
>12bc	d4 14					.word	ShlHandler               ; $92 <<
>12be	62 14					.word	MulHandler               ; $93 *
>12c0	75 14					.word	DivHandler               ; $94 /
>12c2	88 14					.word	ModHandler               ; $95 mod
>12c4	20 15					.word	PowerHandler             ; $96 ^
>12c6	fa 14					.word	WordRefHandler           ; $97 !
>12c8	0d 15					.word	ByteRefHandler           ; $98 ?
>12ca	3c 23					.word	Command_Repeat           ; $99 repeat
>12cc	6a 23					.word	Command_While            ; $9a while
>12ce	2d 22					.word	Command_FOR              ; $9b for
>12d0	72 10					.word	CommandIf                ; $9c if
>12d2	93 12					.word	TKErr04                  ; $9d defproc
>12d4	49 23					.word	Command_Until            ; $9e until
>12d6	8d 23					.word	Command_Wend             ; $9f wend
>12d8	8e 22					.word	Command_NEXT             ; $a0 next
>12da	93 12					.word	TKErr06                  ; $a1 then
>12dc	ad 10					.word	Command_ENDIF            ; $a2 endif
>12de	8e 12					.word	Unimplemented            ; $a3 endproc
>12e0	2a 17					.word	UnaryParenthesis         ; $a4 (
>12e2	7c 18					.word	UnaryLen                 ; $a5 len(
>12e4	c0 18					.word	UnarySgn                 ; $a6 sgn(
>12e6	a9 18					.word	UnaryAbs                 ; $a7 abs(
>12e8	19 19					.word	Unary_Random             ; $a8 random(
>12ea	63 19					.word	Unary_Page               ; $a9 page
>12ec	50 1d					.word	MInt32True               ; $aa true
>12ee	54 1d					.word	MInt32False              ; $ab false
>12f0	2e 19					.word	Unary_Min                ; $ac min(
>12f2	32 19					.word	Unary_Max                ; $ad max(
>12f4	19 1a					.word	UnarySys                 ; $ae sys(
>12f6	dc 19					.word	UnaryTimer               ; $af timer(
>12f8	ff 17					.word	EventFunction            ; $b0 event(
>12fa	05 1a					.word	UnaryGet                 ; $b1 get(
>12fc	f5 19					.word	UnaryInkey               ; $b2 inkey(
>12fe	b0 19					.word	UnaryAlloc               ; $b3 alloc(
>1300	41 1a					.word	ExecChr                  ; $b4 chr$(
>1302	55 1a					.word	ExecLeft                 ; $b5 left$(
>1304	72 1a					.word	ExecMid                  ; $b6 mid$(
>1306	9a 1a					.word	ExecRight                ; $b7 right$(
>1308	8e 12					.word	Unimplemented            ; $b8 str$(
>130a	8e 12					.word	Unimplemented            ; $b9 val(
>130c	d7 18					.word	UnaryPeek                ; $ba peek(
>130e	dd 18					.word	UnaryDeek                ; $bb deek(
>1310	e3 18					.word	UnaryLeek                ; $bc leek(
>1312	9a 18					.word	UnaryAsc                 ; $bd asc(
>1314	8e 19					.word	UnaryIntToFloat          ; $be int(
>1316	a1 19					.word	UnaryFloatToInt          ; $bf float(
>1318	8e 12					.word	Unimplemented            ; $c0 isval(
>131a	71 19					.word	UnaryReference           ; $c1 @
>131c	87 19					.word	UnaryComplement          ; $c2 ~
>131e	84 19					.word	UnaryHexMarker           ; $c3 &
>1320	93 12					.word	TKErr01                  ; $c4 )
>1322	80 12					.word	CommandColon             ; $c5 :
>1324	93 12					.word	TKErr02                  ; $c6 ,
>1326	93 12					.word	TKErr03                  ; $c7 ;
>1328	12 12					.word	Command_Rem2             ; $c8 '
>132a	93 12					.word	TKErr07                  ; $c9 to
>132c	93 12					.word	TKErr05                  ; $ca step
>132e	8e 12					.word	Unimplemented            ; $cb proc
>1330	8e 12					.word	Unimplemented            ; $cc local
>1332	8e 12					.word	Unimplemented            ; $cd dim
>1334	12 12					.word	Command_Rem              ; $ce rem
>1336	ae 10					.word	CommandLet               ; $cf let
>1338	8e 12					.word	Unimplemented            ; $d0 input
>133a	a7 10					.word	Command_ELSE             ; $d1 else
>133c	df 13					.word	Command_VDU              ; $d2 vdu
>133e	77 11					.word	Command_Print            ; $d3 print
>1340	ad 13					.word	CommandGOTO              ; $d4 goto
>1342	82 13					.word	CommandGOSUB             ; $d5 gosub
>1344	95 13					.word	CommandRETURN            ; $d6 return
>1346	8e 12					.word	Unimplemented            ; $d7 data
>1348	1a 10					.word	Command_Assert           ; $d8 assert
>134a	3a 11					.word	Command_Poke             ; $d9 poke
>134c	3e 11					.word	Command_Doke             ; $da doke
>134e	42 11					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1350					Group1Vectors:
>1350	28 10					.word	CommandClear             ; $86 clear
>1352	8e 12					.word	Unimplemented            ; $87 load
>1354	8e 12					.word	Unimplemented            ; $88 save
>1356	8e 12					.word	Unimplemented            ; $89 list
>1358	2c 11					.word	Command_New              ; $8a new
>135a	1f 12					.word	Command_Run              ; $8b run
>135c	8e 12					.word	Unimplemented            ; $8c read
>135e	8e 12					.word	Unimplemented            ; $8d restore
>1360	6b 13					.word	CommandEnd               ; $8e end
>1362	66 13					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors2.inc

.1364					Group2Vectors:
>1364	8e 12					.word	Unimplemented            ; $86 vpoke

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1366					CommandStop:
.1366	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1368	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.136b					CommandEnd:
.136b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.136e					AdvanceNextLine:
.136e	a0 00		ldy #$00			ldy 	#0 							; get offset
.1370	b1 02		lda ($02),y			lda 	(codePtr),y
.1372	18		clc				clc 								; add to codePtr
.1373	65 02		adc $02				adc 	codePtr
.1375	85 02		sta $02				sta 	codePtr
.1377	90 02		bcc $137b			bcc 	_ANLNoCarry
.1379	e6 03		inc $03				inc 	codePtr+1
.137b					_ANLNoCarry:
.137b	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.137d	f0 ec		beq $136b			beq 	CommandEnd 					; execute END
.137f	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1381	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1382					CommandGOSUB:
.1382	20 71 17	jsr $1771			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1385	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1387	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1389	20 ef 1d	jsr $1def			jsr 	RSClaim
.138c	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.138e	20 1b 1e	jsr $1e1b			jsr 	RSSavePosition
.1391	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1393	f0 1b		beq $13b0			beq 	GotoTOS 					; and do a GOTO there.
.1395					CommandRETURN:
.1395	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1397	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1399	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.139b	f0 05		beq $13a2			beq 	_isok
.139d	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.139f	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.13a2					_isok:
.13a2	a9 01		lda #$01			lda 	#1
.13a4	20 2e 1e	jsr $1e2e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13a7	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13a9	20 11 1e	jsr $1e11			jsr 	RSFree
.13ac	60		rts				rts
.13ad					CommandGOTO:
.13ad	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.13b0					GotoTOS:
.13b0	20 81 12	jsr $1281			jsr 	ResetCodeAddress 			; simple search.
.13b3					_GotoSearch:
.13b3	a0 00		ldy #$00			ldy 	#0 							; get offset
.13b5	b1 02		lda ($02),y			lda 	(codePtr),y
.13b7	f0 21		beq $13da			beq 	_GotoError 					; not found.
.13b9	c8		iny				iny									; check LSB match
.13ba	b1 02		lda ($02),y			lda 	(codePtr),y
.13bc	d5 48		cmp $48,x			cmp 	esInt0,x
.13be	d0 07		bne $13c7			bne 	_GotoNext
.13c0	c8		iny				iny
.13c1	b1 02		lda ($02),y			lda 	(codePtr),y
.13c3	d5 50		cmp $50,x			cmp 	esInt1,x
.13c5	f0 10		beq $13d7			beq 	_GotoFound
.13c7					_GotoNext:
.13c7	a0 00		ldy #$00			ldy 	#0 							; go next line
.13c9	b1 02		lda ($02),y			lda 	(codePtr),y
.13cb	18		clc				clc
.13cc	65 02		adc $02				adc 	codePtr
.13ce	85 02		sta $02				sta 	codePtr
.13d0	90 e1		bcc $13b3			bcc 	_GotoSearch
.13d2	e6 03		inc $03				inc 	codePtr+1
.13d4	4c b3 13	jmp $13b3			jmp 	_GotoSearch
.13d7					_GotoFound:
.13d7	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.13d9	60		rts				rts
.13da					_GotoError:
.13da	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.13dc	20 82 1e	jsr $1e82			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.13df					Command_VDU:
.13df	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 			; get integer at root.
.13e2	a5 48		lda $48				lda 	esInt0
.13e4	a2 04		ldx #$04		ldx	#4
.13e6	20 75 1e	jsr $1e75		jsr	deviceHandler
.13e9					_CVNext:
.13e9	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.13eb	c8		iny				iny
.13ec	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.13ee	f0 ef		beq $13df			beq 	Command_VDU
.13f0	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.13f2	d0 0a		bne $13fe			bne 	_CVExit
.13f4	a5 50		lda $50				lda 	esInt1
.13f6	a2 04		ldx #$04		ldx	#4
.13f8	20 75 1e	jsr $1e75		jsr	deviceHandler
.13fb	4c e9 13	jmp $13e9			jmp 	_CVNext
.13fe	88		dey		_CVExit:dey
.13ff	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.236a					Command_While:
.236a	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.236c	a2 04		ldx #$04			ldx 	#4
.236e	20 ef 1d	jsr $1def			jsr 	RSClaim 					; create on stack.
.2371	88		dey				dey
.2372	a9 01		lda #$01			lda 	#1
.2374	20 1b 1e	jsr $1e1b			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2377	c8		iny				iny
.2378	20 73 17	jsr $1773			jsr 	EvaluateInteger				; get the conditional
.237b	20 7b 1d	jsr $1d7b			jsr 	MInt32Zero 	 				; if zero, skip forward.
.237e	f0 01		beq $2381			beq 	_CWFail
.2380	60		rts				rts
.2381					_CWFail:
.2381	a9 04		lda #$04			lda 	#4
.2383	20 11 1e	jsr $1e11			jsr 	RSFree 						; close the just opened position.
.2386	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2388	aa		tax				tax
.2389	20 a5 23	jsr $23a5			jsr 	ScanForward
.238c	60		rts				rts
.238d					Command_Wend:
.238d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.238f	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2391	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2393	f0 05		beq $239a			beq 	_isok
.2395	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2397	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.239a					_isok:
.239a	a9 01		lda #$01			lda 	#1
.239c	20 2e 1e	jsr $1e2e			jsr 	RSLoadPosition				; go back until true
.239f	a9 04		lda #$04			lda 	#4
.23a1	20 11 1e	jsr $1e11			jsr 	RSFree 						; close the loop
.23a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1400					BinaryProcess:
.1400	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1402	15 41		ora $41,x			ora 	esType+1,x
.1404	0a		asl a				asl 	a
.1405	30 0e		bmi $1415			bmi 	_BPStringType 				; if one is set, then string type.
.1407	18		clc				clc 								; return CC for integer
.1408	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.140a	f0 08		beq $1414			beq 	_BPExit 					; if both integer then return with CC.
.140c	20 1a 14	jsr $141a			jsr 	BPMakeBothFloat 			; make both float
.140f	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1411	95 40		sta $40,x			sta 	esType,x
.1413	38		sec				sec 								; and return with carry set.
.1414					_BPExit:
.1414	60		rts				rts
.1415					_BPStringType:
.1415	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1417	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.141a					BPMakeBothFloat:
.141a	e8		inx				inx
.141b	20 1f 14	jsr $141f			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.141e	ca		dex				dex
.141f					BPMakeFloat:
.141f	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1421	4a		lsr a				lsr 	a
.1422	b0 07		bcs $142b			bcs 	_BPIsFloat
.1424	8a		txa				txa
.1425	a2 1a		ldx #$1a		ldx	#26
.1427	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.142a	aa		tax				tax
.142b					_BPIsFloat:
.142b	60		rts				rts
.142c					AddHandler:
.142c	20 fd 15	jsr $15fd			jsr 	DereferenceTwo 				; dereference top two on stack.
.142f	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1431	35 41		and $41,x			and 	esType+1,x
.1433	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1435	d0 10		bne $1447			bne 	_AHStringConcat				; concatenate strings.
.1437	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.143a	b0 03		bcs $143f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.143c	4c 3f 1c	jmp $1c3f			jmp 	MInt32Add 							; else do it as integer.
.143f					_IsFPOperation:
.143f	8a		txa				txa 								; call the relevant fp routine
.1440	a2 02		ldx #$02		ldx	#2
.1442	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.1445	aa		tax				tax
.1446	60		rts				rts
.1447					_AHStringConcat:
.1447	8a		txa				txa
.1448	a2 02		ldx #$02		ldx	#2
.144a	20 ba 20	jsr $20ba		jsr	stringHandler
.144d	aa		tax				tax
.144e	60		rts				rts
.144f					SubHandler:
.144f	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1452	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1455	b0 03		bcs $145a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1457	4c 59 1c	jmp $1c59			jmp 	MInt32Sub 							; else do it as integer.
.145a					_IsFPOperation:
.145a	8a		txa				txa 								; call the relevant fp routine
.145b	a2 10		ldx #$10		ldx	#16
.145d	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.1460	aa		tax				tax
.1461	60		rts				rts
.1462					MulHandler:
.1462	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1465	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1468	b0 03		bcs $146d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.146a	4c 73 1c	jmp $1c73			jmp 	MInt32Multiply 							; else do it as integer.
.146d					_IsFPOperation:
.146d	8a		txa				txa 								; call the relevant fp routine
.146e	a2 0a		ldx #$0a		ldx	#10
.1470	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.1473	aa		tax				tax
.1474	60		rts				rts
.1475					DivHandler:
.1475	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1478	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.147b	b0 03		bcs $1480			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.147d	4c 4d 1b	jmp $1b4d			jmp 	MInt32SDivide 							; else do it as integer.
.1480					_IsFPOperation:
.1480	8a		txa				txa 								; call the relevant fp routine
.1481	a2 06		ldx #$06		ldx	#6
.1483	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.1486	aa		tax				tax
.1487	60		rts				rts
.1488					ModHandler:
.1488	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.148b	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.148e	b0 03		bcs $1493			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1490	4c cb 1b	jmp $1bcb			jmp 	MInt32Modulus 							; else do it as integer.
.1493					_IsFPOperation:
.1493	8a		txa				txa 								; call the relevant fp routine
.1494	a2 08		ldx #$08		ldx	#8
.1496	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.1499	aa		tax				tax
.149a	60		rts				rts
.149b					XorHandler:
.149b	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.149e	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14a1	b0 03		bcs $14a6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14a3	4c ff 1a	jmp $1aff			jmp 	MInt32Xor 							; else do it as integer.
.14a6					_IsFPOperation:
.14a6	8a		txa				txa 								; call the relevant fp routine
.14a7	a2 08		ldx #$08		ldx	#8
.14a9	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.14ac	aa		tax				tax
.14ad	60		rts				rts
.14ae					OrHandler:
.14ae	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14b1	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14b4	b0 03		bcs $14b9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14b6	4c e6 1a	jmp $1ae6			jmp 	MInt32Or 							; else do it as integer.
.14b9					_IsFPOperation:
.14b9	8a		txa				txa 								; call the relevant fp routine
.14ba	a2 08		ldx #$08		ldx	#8
.14bc	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.14bf	aa		tax				tax
.14c0	60		rts				rts
.14c1					AndHandler:
.14c1	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14c4	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14c7	b0 03		bcs $14cc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14c9	4c cd 1a	jmp $1acd			jmp 	MInt32And 							; else do it as integer.
.14cc					_IsFPOperation:
.14cc	8a		txa				txa 								; call the relevant fp routine
.14cd	a2 08		ldx #$08		ldx	#8
.14cf	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.14d2	aa		tax				tax
.14d3	60		rts				rts
.14d4					ShlHandler:
.14d4	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14d7	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14da	b0 03		bcs $14df			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14dc	4c 55 15	jmp $1555			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.14df					_IsFPOperation:
.14df	8a		txa				txa 								; call the relevant fp routine
.14e0	a2 08		ldx #$08		ldx	#8
.14e2	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.14e5	aa		tax				tax
.14e6	60		rts				rts
.14e7					ShrHandler:
.14e7	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14ea	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14ed	b0 03		bcs $14f2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14ef	4c 58 15	jmp $1558			jmp 	MInt32ShiftRightX 							; else do it as integer.
.14f2					_IsFPOperation:
.14f2	8a		txa				txa 								; call the relevant fp routine
.14f3	a2 08		ldx #$08		ldx	#8
.14f5	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.14f8	aa		tax				tax
.14f9	60		rts				rts
.14fa					WordRefHandler:
.14fa	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14fd	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1500	b0 03		bcs $1505			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1502	4c 47 15	jmp $1547			jmp 	MInt32WordIndirect 							; else do it as integer.
.1505					_IsFPOperation:
.1505	8a		txa				txa 								; call the relevant fp routine
.1506	a2 08		ldx #$08		ldx	#8
.1508	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.150b	aa		tax				tax
.150c	60		rts				rts
.150d					ByteRefHandler:
.150d	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1510	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1513	b0 03		bcs $1518			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1515	4c 4b 15	jmp $154b			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1518					_IsFPOperation:
.1518	8a		txa				txa 								; call the relevant fp routine
.1519	a2 08		ldx #$08		ldx	#8
.151b	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.151e	aa		tax				tax
.151f	60		rts				rts
.1520					PowerHandler:
.1520	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1523	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1526	b0 03		bcs $152b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1528	4c 33 15	jmp $1533			jmp 	PowerInteger 							; else do it as integer.
.152b					_IsFPOperation:
.152b	8a		txa				txa 								; call the relevant fp routine
.152c	a2 16		ldx #$16		ldx	#22
.152e	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.1531	aa		tax				tax
.1532	60		rts				rts
.1533					PowerInteger:
.1533	20 1a 14	jsr $141a			jsr 	BPMakeBothFloat				; make them float.
.1536	8a		txa				txa
.1537	a2 16		ldx #$16		ldx	#22
.1539	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.153c	a2 12		ldx #$12		ldx	#18
.153e	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.1541	aa		tax				tax
.1542	a9 00		lda #$00			lda 	#0 							; make type integer
.1544	95 40		sta $40,x			sta 	esType,x
.1546	60		rts				rts
.1547					Mint32WordIndirect:
.1547	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1549	d0 02		bne $154d			bne 	Min32Indirect
.154b					Mint32ByteIndirect:
.154b	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.154d					Min32Indirect:
.154d	48		pha				pha 								; save the indirection
.154e	20 3f 1c	jsr $1c3f			jsr 	MInt32Add 					; add a!b a?b
.1551	68		pla				pla 								; and set the type to reference.
.1552	95 40		sta $40,x			sta 	esType,x
.1554	60		rts				rts
.1555					Mint32ShiftLeftX:
.1555	18		clc				clc
.1556	90 01		bcc $1559			bcc 	Mint32Shift
.1558					Mint32ShiftRightX:
.1558	38		sec				sec
.1559					Mint32Shift:
.1559	08		php				php 								; save carry flag on stack.
.155a	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.155c	15 59		ora $59,x			ora 	esInt2+1,x
.155e	15 61		ora $61,x			ora 	esInt3+1,x
.1560	d0 1e		bne $1580			bne 	_MShiftZero
.1562	b5 49		lda $49,x			lda 	esInt0+1,x
.1564	c9 20		cmp #$20			cmp 	#32
.1566	b0 18		bcs $1580			bcs 	_MShiftZero
.1568					_MShiftLoop:
.1568	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.156a	f0 12		beq $157e			beq 	_MShiftExit
.156c	d6 49		dec $49,x			dec 	esInt0+1,x
.156e	28		plp				plp 								; restore and save carry
.156f	08		php				php
.1570	90 06		bcc $1578			bcc 	_MShiftLeft
.1572	20 72 1d	jsr $1d72			jsr 	Mint32ShiftRight
.1575	4c 68 15	jmp $1568			jmp 	_MShiftLoop
.1578					_MShiftLeft:
.1578	20 69 1d	jsr $1d69			jsr 	Mint32ShiftLeft
.157b	4c 68 15	jmp $1568			jmp 	_MShiftLoop
.157e					_MShiftExit:
.157e	28		plp				plp	 								; throw saved carry and exit
.157f	60		rts				rts
.1580					_MShiftZero:
.1580	4c 54 1d	jmp $1d54			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.1583					PerformComparison:
.1583	20 fd 15	jsr $15fd			jsr 	DereferenceTwo 				; make both values.
.1586	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1588	35 41		and $41,x			and 	esType+1,x
.158a	0a		asl a				asl 	a
.158b	30 1d		bmi $15aa			bmi 	_PCIsString
.158d	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.158f	15 41		ora $41,x			ora 	esType+1,x
.1591	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1592	30 22		bmi $15b6			bmi 	_PCError
.1594	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1596	f0 0f		beq $15a7			beq 	_PCIsInteger 				; if not two integers
.1598	20 1a 14	jsr $141a			jsr 	BPMakeBothFloat 			; make both float
.159b	8a		txa				txa
.159c	a2 04		ldx #$04		ldx	#4
.159e	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.15a1	86 0a		stx $0a				stx 	tempShort 					; save result
.15a3	aa		tax				tax
.15a4	a5 0a		lda $0a				lda 	tempShort
.15a6	60		rts				rts
.15a7					_PCIsInteger:
.15a7	4c 18 1b	jmp $1b18			jmp 	MInt32Compare
.15aa					_PCIsString:
.15aa	8a		txa				txa 								; A has SP
.15ab	a2 04		ldx #$04		ldx	#4
.15ad	20 ba 20	jsr $20ba		jsr	stringHandler
.15b0	86 0a		stx $0a				stx 	tempShort 					; save result
.15b2	aa		tax				tax 								; put SP back in X and get result.
.15b3	a5 0a		lda $0a				lda 	tempShort
.15b5	60		rts				rts
.15b6					_PCError:
.15b6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.15b8	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.15bb					CompareEquals:
.15bb	20 83 15	jsr $1583			jsr 	PerformComparison
.15be	c9 00		cmp #$00			cmp 	#$00
.15c0	f0 35		beq $15f7			beq  	CompareTrue
.15c2	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15c5					CompareLess:
.15c5	20 83 15	jsr $1583			jsr 	PerformComparison
.15c8	c9 ff		cmp #$ff			cmp 	#$FF
.15ca	f0 2b		beq $15f7			beq  	CompareTrue
.15cc	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15cf					CompareGreater:
.15cf	20 83 15	jsr $1583			jsr 	PerformComparison
.15d2	c9 01		cmp #$01			cmp 	#$01
.15d4	f0 21		beq $15f7			beq  	CompareTrue
.15d6	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15d9					CompareNotEquals:
.15d9	20 83 15	jsr $1583			jsr 	PerformComparison
.15dc	c9 00		cmp #$00			cmp 	#$00
.15de	d0 17		bne $15f7			bne  	CompareTrue
.15e0	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15e3					CompareGreaterEq:
.15e3	20 83 15	jsr $1583			jsr 	PerformComparison
.15e6	c9 ff		cmp #$ff			cmp 	#$FF
.15e8	d0 0d		bne $15f7			bne  	CompareTrue
.15ea	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15ed					CompareLessEq:
.15ed	20 83 15	jsr $1583			jsr 	PerformComparison
.15f0	c9 01		cmp #$01			cmp 	#$01
.15f2	d0 03		bne $15f7			bne  	CompareTrue
.15f4	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15f7					CompareTrue:
.15f7	4c 50 1d	jmp $1d50			jmp 	MInt32True
.15fa					CompareFalse:
.15fa	4c 54 1d	jmp $1d54			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.15fd					DereferenceTwo:
.15fd	e8		inx				inx
.15fe	20 02 16	jsr $1602			jsr 	DereferenceOne
.1601	ca		dex				dex
.1602					DereferenceOne:
.1602	b5 40		lda $40,x			lda 	esType,x
.1604	10 3d		bpl $1643			bpl 	_DRNotReference 			; is it a reference ?
.1606	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1607	b0 3b		bcs $1644			bcs 	_DRFloatDeReference
.1609	98		tya				tya
.160a	48		pha				pha
.160b	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.160d	85 04		sta $04				sta 	temp0
.160f	b5 50		lda $50,x			lda 	esInt1,x
.1611	85 05		sta $05				sta 	temp0+1
.1613	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1615	95 50		sta $50,x			sta 	esInt1,x
.1617	95 58		sta $58,x			sta 	esInt2,x
.1619	95 60		sta $60,x			sta 	esInt3,x
.161b	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.161d	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.161f	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1620	30 0d		bmi $162f			bmi 	_DeRefString 				; string, 2 bytes only
.1622	d0 11		bne $1635			bne 	_DeRefByte 					; byte 1 byte only
.1624					_DeRefLong:
.1624	a0 03		ldy #$03			ldy 	#3
.1626	b1 04		lda ($04),y			lda 	(temp0),y
.1628	95 60		sta $60,x			sta 	esInt3,x
.162a	88		dey				dey
.162b	b1 04		lda ($04),y			lda 	(temp0),y
.162d	95 58		sta $58,x			sta 	esInt2,x
.162f					_DeRefString:
.162f	a0 01		ldy #$01			ldy 	#1
.1631	b1 04		lda ($04),y			lda 	(temp0),y
.1633	95 50		sta $50,x			sta 	esInt1,x
.1635					_DeRefByte:
.1635	a0 00		ldy #$00			ldy 	#0
.1637	b1 04		lda ($04),y			lda 	(temp0),y
.1639	95 48		sta $48,x			sta 	esInt0,x
.163b	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.163d	29 40		and #$40			and 	#$40
.163f	95 40		sta $40,x			sta 	esType,x
.1641	68		pla				pla
.1642	a8		tay				tay
.1643					_DRNotReference
.1643	60		rts				rts
.1644					_DRFloatDereference:
.1644	8a		txa				txa
.1645							floatingpoint_deref
.1645	aa		tax				tax
.1646	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1648	95 40		sta $40,x			sta 	esType,x
.164a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.164b					EvaluateLevel:
.164b	48		pha				pha 								; save precedence level.
.164c	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.164e	95 48		sta $48,x			sta 	esInt0,x
.1650	95 50		sta $50,x			sta 	esInt1,x
.1652	95 58		sta $58,x			sta 	esInt2,x
.1654	95 60		sta $60,x			sta 	esInt3,x
.1656	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1658	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.165a	30 21		bmi $167d			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.165c	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.165d	30 0a		bmi $1669			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.165f	8a		txa				txa 								; stack level in X
.1660	a2 00		ldx #$00		ldx	#0
.1662	20 26 22	jsr $2226		jsr	variableHandler
.1665	aa		tax				tax
.1666	4c a6 16	jmp $16a6			jmp		_ELHasTerm
.1669					_ELIsConstant:
.1669	4a		lsr a				lsr 	a 							; get the value back
.166a	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.166c	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.166e					_ELCheckNext:
.166e	c8		iny				iny 								; look at next
.166f	b1 02		lda ($02),y			lda 	(codePtr),y
.1671	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1673	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1675	b0 2f		bcs $16a6			bcs 	_ELHasTerm 					; done getting the constant.
.1677	20 b3 17	jsr $17b3			jsr 	ELShiftByteIn 				; shift byte into position.
.167a	4c 6e 16	jmp $166e			jmp 	_ELCheckNext
.167d					_ELIsToken:
.167d	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.167f	f0 0f		beq $1690			beq 	_ELIsString
.1681	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1683	d0 5f		bne $16e4			bne 	_ELCheckUnary
.1685	8a		txa				txa 								; put X into A
.1686	c8		iny				iny 								; skip over the float marker
.1687	a2 18		ldx #$18		ldx	#24
.1689	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.168c	aa		tax				tax 								; restore X
.168d	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.1690					_ELIsString:
.1690	98		tya				tya 								; address of string is codePtr+y+1
.1691	38		sec				sec
.1692	65 02		adc $02				adc 	codePtr
.1694	95 48		sta $48,x			sta 	esInt0,x
.1696	a5 03		lda $03				lda 	codePtr+1
.1698	69 00		adc #$00			adc 	#0
.169a	95 50		sta $50,x			sta 	esInt1,x
.169c	a9 40		lda #$40			lda 	#$40 						; set type to string value
.169e	95 40		sta $40,x			sta 	esType,x
.16a0	c8		iny				iny 								; skip over string.
.16a1	98		tya				tya
.16a2	38		sec				sec									; +1 for the length itself.
.16a3	71 02		adc ($02),y			adc 	(codePtr),y
.16a5	a8		tay				tay 								; and fall through to term loop code.
.16a6					_ELHasTerm:
.16a6	b1 02		lda ($02),y			lda 	(codePtr),y
.16a8	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.16aa	90 04		bcc $16b0			bcc 	_ELPopExit
.16ac	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.16ae	90 02		bcc $16b2			bcc 	_ELHasBinaryTerm
.16b0					_ELPopExit:
.16b0	68		pla				pla
.16b1					_ELExit:
.16b1	60		rts				rts
.16b2					_ELHasBinaryTerm:
.16b2	84 0a		sty $0a				sty 	tempShort 					; save position
.16b4	a8		tay				tay 								; use token as an index and get the precedence.
.16b5	b9 5b 17	lda $175b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.16b8	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.16ba	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.16bc	68		pla				pla 								; restore current level.
.16bd	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.16bf	b0 f0		bcs $16b1			bcs 	_ELExit
.16c1	48		pha				pha 								; save current level back on the stack.
.16c2	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.16c4	48		pha				pha
.16c5	c8		iny				iny
.16c6	e8		inx				inx 								; calculate the RHS at the operator precedence.
.16c7	a5 0a		lda $0a				lda 	tempShort
.16c9	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.16cc	ca		dex				dex
.16cd	68		pla				pla 								; get the operator back out.
.16ce					_ELExecuteA:
.16ce	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.16d0	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.16d1	aa		tax				tax
.16d2	bd 98 12	lda $1298,x			lda 	Group0Vectors,x
.16d5	85 04		sta $04				sta 	temp0
.16d7	bd 99 12	lda $1299,x			lda 	Group0Vectors+1,x
.16da	85 05		sta $05				sta 	temp0+1
.16dc	a6 0a		ldx $0a				ldx 	tempShort
.16de	20 27 17	jsr $1727			jsr 	_ELCallTemp0
.16e1	4c a6 16	jmp $16a6			jmp 	_ELHasTerm 					; and loop back round.
.16e4					_ELCheckUnary:
.16e4	c8		iny				iny 								; skip over token.
.16e5	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.16e7	f0 15		beq $16fe			beq 	_ELMinus
.16e9	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.16eb	f0 28		beq $1715			beq 	_ELIndirect
.16ed	c9 98		cmp #$98			cmp 	#TKW_QMARK
.16ef	f0 24		beq $1715			beq 	_ELIndirect
.16f1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.16f3	90 04		bcc $16f9			bcc 	_ELUSyntax
.16f5	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.16f7	90 d5		bcc $16ce			bcc 	_ELExecuteA 				; if so do that token.
.16f9					_ELUSyntax:
.16f9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.16fb	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.16fe					_ELMinus:
.16fe	20 3c 17	jsr $173c			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1701	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1703	f0 0a		beq $170f			beq 	_ELMinusInteger
.1705	8a		txa				txa
.1706	a2 0c		ldx #$0c		ldx	#12
.1708	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.170b	aa		tax				tax
.170c	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.170f					_ELMinusInteger:
.170f	20 0e 1d	jsr $1d0e			jsr 	MInt32Negate 				; do int negate
.1712	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.1715					_ELIndirect:
.1715	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1716	20 45 17	jsr $1745			jsr 	EvaluateIntegerTerm 		; integer address
.1719	68		pla				pla
.171a	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.171c	f0 02		beq $1720			beq 	_ELHaveModifier
.171e	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1720					_ELHaveModifier:
.1720	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1722	95 40		sta $40,x			sta 	esType,x
.1724	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.1727					_ELCallTemp0:
.1727	6c 04 00	jmp ($0004)			jmp 	(temp0)
.172a					UnaryParenthesis:
.172a	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.172c	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.172f	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen 			; check for )
.1732	60		rts				rts
.1733					EvaluateTerm:
.1733	a9 0f		lda #$0f			lda 	#15
.1735	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.1738	20 02 16	jsr $1602			jsr 	DereferenceOne
.173b	60		rts				rts
.173c					EvaluateNumericTerm:
.173c	20 33 17	jsr $1733			jsr 	EvaluateTerm
.173f	b5 40		lda $40,x			lda 	esType,x
.1741	0a		asl a				asl 	a 							; see if it's a string.
.1742	30 09		bmi $174d			bmi 	ENTType
.1744	60		rts				rts
.1745					EvaluateIntegerTerm:
.1745	20 33 17	jsr $1733			jsr 	EvaluateTerm
.1748	b5 40		lda $40,x			lda 	esType,x
.174a	d0 01		bne $174d			bne 	ENTType
.174c	60		rts				rts
.174d					ENTType:
.174d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.174f	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1752					EvaluateRoot:
.1752	a2 00		ldx #$00			ldx 	#0
.1754					Evaluate:
.1754	a9 00		lda #$00			lda 	#0
.1756	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.1759	20 02 16	jsr $1602			jsr 	DereferenceOne
.175c	60		rts				rts
.175d					EvaluateNumeric:
.175d	20 54 17	jsr $1754			jsr 	Evaluate
.1760	b5 40		lda $40,x			lda 	esType,x
.1762	0a		asl a				asl 	a 							; see if it's a string.
.1763	30 e8		bmi $174d			bmi 	ENTType
.1765	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1766	4a		lsr a				lsr 	a
.1767	60		rts				rts
.1768					EvaluateString:
.1768	20 54 17	jsr $1754			jsr 	Evaluate
.176b	b5 40		lda $40,x			lda 	esType,x
.176d	0a		asl a				asl 	a 							; see if it's a string.
.176e	10 dd		bpl $174d			bpl 	ENTType
.1770	60		rts				rts
.1771					EvaluateRootInteger:
.1771	a2 00		ldx #$00			ldx 	#0
.1773					EvaluateInteger:
.1773	20 54 17	jsr $1754			jsr 	Evaluate
.1776	b5 40		lda $40,x			lda 	esType,x
.1778	d0 d3		bne $174d			bne 	ENTType
.177a	60		rts				rts
.177b					EvaluateSmallInteger:
.177b	20 73 17	jsr $1773			jsr 	EvaluateInteger
.177e	b5 50		lda $50,x			lda 	esInt1,x
.1780	15 58		ora $58,x			ora 	esInt2,x
.1782	15 60		ora $60,x			ora 	esInt3,x
.1784	d0 03		bne $1789			bne 	_ESIValue
.1786	b5 48		lda $48,x			lda 	esInt0,x
.1788	60		rts				rts
.1789					_ESIValue:
.1789	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.178b	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.178e					LinkEvaluate:
.178e	aa		tax				tax
.178f	20 54 17	jsr $1754			jsr 	Evaluate
.1792	8a		txa				txa
.1793	60		rts				rts
.1794					LinkEvaluateInteger:
.1794	aa		tax				tax
.1795	20 73 17	jsr $1773			jsr 	EvaluateInteger
.1798	8a		txa				txa
.1799	60		rts				rts
.179a					LinkEvaluateSmallInt:
.179a	aa		tax				tax
.179b	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger
.179e	8a		txa				txa
.179f	60		rts				rts
.17a0					EvaluateReference:
.17a0	ad f2 17	lda $17f2			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.17a3	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.17a4	e9 01		sbc #$01			sbc 	#1
.17a6	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.17a9	b5 40		lda $40,x			lda 	esType,x
.17ab	10 01		bpl $17ae			bpl 	_ERFail
.17ad	60		rts				rts
.17ae					_ERFail:
.17ae	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.17b0	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.17b3					ELShiftByteIn:
.17b3	48		pha				pha 								; save bits to shift in.
.17b4	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.17b6	48		pha				pha
.17b7	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.17b9	95 60		sta $60,x			sta 	esInt3,x
.17bb	b5 50		lda $50,x			lda 	esInt1,x
.17bd	95 58		sta $58,x			sta 	esInt2,x
.17bf	b5 48		lda $48,x			lda 	esInt0,x
.17c1	95 50		sta $50,x			sta 	esInt1,x
.17c3	a9 00		lda #$00			lda 	#0
.17c5	95 48		sta $48,x			sta 	esInt0,x
.17c7	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.17c8	29 03		and #$03			and 	#3 							; only want lower 2 bits
.17ca	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.17cc					_ELShiftLoop:
.17cc	4a		lsr a				lsr 	a
.17cd	76 60		ror $60,x			ror 	esInt3,x
.17cf	76 58		ror $58,x			ror 	esInt2,x
.17d1	76 50		ror $50,x			ror 	esInt1,x
.17d3	76 48		ror $48,x			ror 	esInt0,x
.17d5	c9 01		cmp #$01			cmp 	#1
.17d7	d0 f3		bne $17cc			bne 	_ELShiftLoop
.17d9	68		pla				pla 								; get original 6 bit value and OR in.
.17da	29 3f		and #$3f			and 	#$3F
.17dc	15 48		ora $48,x			ora 	esInt0,x
.17de	95 48		sta $48,x			sta 	esInt0,x
.17e0	60		rts				rts
.17e1					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>17e1	01					.byte	$01			; $86 and
>17e2	01					.byte	$01			; $87 or
>17e3	01					.byte	$01			; $88 xor
>17e4	02					.byte	$02			; $89 >=
>17e5	02					.byte	$02			; $8a <=
>17e6	02					.byte	$02			; $8b >
>17e7	02					.byte	$02			; $8c <
>17e8	02					.byte	$02			; $8d =
>17e9	02					.byte	$02			; $8e <>
>17ea	03					.byte	$03			; $8f +
>17eb	03					.byte	$03			; $90 -
>17ec	04					.byte	$04			; $91 >>
>17ed	04					.byte	$04			; $92 <<
>17ee	04					.byte	$04			; $93 *
>17ef	04					.byte	$04			; $94 /
>17f0	04					.byte	$04			; $95 mod
>17f1	05					.byte	$05			; $96 ^
>17f2	06					.byte	$06			; $97 !
>17f3	06					.byte	$06			; $98 ?
>17f4	82					.byte	$82			; $99 repeat
>17f5	82					.byte	$82			; $9a while
>17f6	82					.byte	$82			; $9b for
>17f7	82					.byte	$82			; $9c if
>17f8	82					.byte	$82			; $9d defproc
>17f9	80					.byte	$80			; $9e until
>17fa	80					.byte	$80			; $9f wend
>17fb	80					.byte	$80			; $a0 next
>17fc	80					.byte	$80			; $a1 then
>17fd	80					.byte	$80			; $a2 endif
>17fe	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.17ff					EventFunction:
.17ff	20 a0 17	jsr $17a0			jsr 	EvaluateReference			; get the variable reference.
.1802	b5 40		lda $40,x			lda 	esType,x
.1804	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1806	d0 55		bne $185d			bne 	_EFType
.1808	20 d4 1d	jsr $1dd4			jsr 	CheckComma
.180b	e8		inx				inx
.180c	20 73 17	jsr $1773			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.180f	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen 			; finish off with the
.1812	ca		dex				dex
.1813	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1815	29 80		and #$80			and 	#$80
.1817	15 58		ora $58,x			ora 	esInt2,x
.1819	15 60		ora $60,x			ora 	esInt3,x
.181b	d0 3b		bne $1858			bne 	_EFValue
.181d	98		tya				tya
.181e	48		pha				pha
.181f	8a		txa				txa
.1820	48		pha				pha
.1821	a2 08		ldx #$08		ldx	#8
.1823	20 75 1e	jsr $1e75		jsr	deviceHandler
.1826	84 07		sty $07				sty 	temp1+1
.1828	85 06		sta $06				sta 	temp1
.182a	68		pla				pla
.182b	aa		tax				tax
.182c	20 23 11	jsr $1123			jsr 	TOSToTemp0 					; point temp0 to the variable.
.182f	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1831	b1 04		lda ($04),y			lda 	(temp0),y
.1833	c8		iny				iny
.1834	11 04		ora ($04),y			ora 	(temp0),y
.1836	f0 17		beq $184f			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1838	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.183a	38		sec				sec
.183b	b1 04		lda ($04),y			lda 	(temp0),y
.183d	e5 06		sbc $06				sbc 	temp1
.183f	c8		iny				iny
.1840	b1 04		lda ($04),y			lda 	(temp0),y
.1842	e5 07		sbc $07				sbc 	temp1+1
.1844	10 0c		bpl $1852			bpl 	_EFFail 					; if trigger >= timer then return False
.1846	20 62 18	jsr $1862			jsr 	SetEventTimer 				; reset the timer for next time.
.1849	20 50 1d	jsr $1d50			jsr	 	MInt32True 					; and treutn true as fired.
.184c	68		pla				pla
.184d	a8		tay				tay
.184e	60		rts				rts
.184f					_EFInitialise:
.184f	20 62 18	jsr $1862			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1852					_EFFail:
.1852	20 54 1d	jsr $1d54			jsr 	MInt32False
.1855	68		pla				pla
.1856	a8		tay				tay
.1857	60		rts				rts
.1858					_EFValue:
.1858	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.185a	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.185d					_EFType:
.185d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.185f	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1862					SetEventTimer:
.1862	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1864	18		clc				clc
.1865	a5 06		lda $06				lda 	temp1
.1867	75 49		adc $49,x			adc 	esInt0+1,x
.1869	91 04		sta ($04),y			sta		(temp0),y
.186b	c8		iny				iny
.186c	a5 07		lda $07				lda 	temp1+1
.186e	75 51		adc $51,x			adc 	esInt1+1,x
.1870	91 04		sta ($04),y			sta		(temp0),y
.1872	88		dey				dey
.1873	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1875	d0 04		bne $187b			bne 	_SETExit
.1877	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1879	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.187b					_SETExit:
.187b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.187c					UnaryLen:
.187c	20 8a 18	jsr $188a			jsr 	ULStart
.187f					ULFinish:
.187f	b1 04		lda ($04),y			lda 	(temp0),y
.1881	a4 0a		ldy $0a				ldy 	tempShort
.1883	20 63 1d	jsr $1d63			jsr 	MInt32Set8Bit
.1886	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen
.1889	60		rts				rts
.188a	20 68 17	jsr $1768	ULStart:jsr 	EvaluateString
.188d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.188f	85 04		sta $04				sta 	temp0
.1891	b5 50		lda $50,x			lda 	esInt1,x
.1893	85 05		sta $05				sta 	temp0+1
.1895	84 0a		sty $0a				sty 	tempShort 					; get length
.1897	a0 00		ldy #$00			ldy 	#0
.1899	60		rts				rts
.189a					UnaryAsc:
.189a	20 8a 18	jsr $188a			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.189d	b1 04		lda ($04),y			lda 	(temp0),y
.189f	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.18a0	c9 00		cmp #$00			cmp 	#0
.18a2	d0 db		bne $187f			bne 	ULFinish
.18a4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18a6	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.18a9					UnaryAbs:
.18a9	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.18ac	b0 07		bcs $18b5			bcs 	_UAFloat
.18ae	20 09 1d	jsr $1d09			jsr 	MInt32Absolute
.18b1	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen
.18b4	60		rts				rts
.18b5					_UAFloat:
.18b5	8a		txa				txa
.18b6	a2 00		ldx #$00		ldx	#0
.18b8	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.18bb	aa		tax				tax
.18bc	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen
.18bf	60		rts				rts
.18c0					UnarySgn:
.18c0	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.18c3	b0 07		bcs $18cc			bcs 	_USFloat
.18c5	20 41 1d	jsr $1d41			jsr 	MInt32Sign
.18c8	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen
.18cb	60		rts				rts
.18cc					_USFloat:
.18cc	8a		txa				txa
.18cd	a2 0e		ldx #$0e		ldx	#14
.18cf	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.18d2	aa		tax				tax
.18d3	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen
.18d6	60		rts				rts
.18d7					UnaryPeek:
.18d7	20 03 19	jsr $1903			jsr 	PDLCode
.18da	4c f7 18	jmp $18f7			jmp 	PDLByte0
.18dd					UnaryDeek:
.18dd	20 03 19	jsr $1903			jsr 	PDLCode
.18e0	4c f1 18	jmp $18f1			jmp 	PDLByte1
.18e3					UnaryLeek:
.18e3	20 03 19	jsr $1903			jsr 	PDLCode
.18e6	a0 03		ldy #$03			ldy 	#3
.18e8	b1 04		lda ($04),y			lda 	(temp0),y
.18ea	95 60		sta $60,x			sta 	esInt3,x
.18ec	88		dey				dey
.18ed	b1 04		lda ($04),y			lda 	(temp0),y
.18ef	95 58		sta $58,x			sta 	esInt2,x
.18f1					PDLByte1:
.18f1	a0 01		ldy #$01			ldy 	#1
.18f3	b1 04		lda ($04),y			lda 	(temp0),y
.18f5	95 50		sta $50,x			sta 	esInt1,x
.18f7					PDLByte0:
.18f7	a0 00		ldy #$00			ldy 	#0
.18f9	b1 04		lda ($04),y			lda 	(temp0),y
.18fb	95 48		sta $48,x			sta 	esInt0,x
.18fd	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.18ff	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen 			; check right and return
.1902	60		rts				rts
.1903					PDLCode:
.1903	20 73 17	jsr $1773			jsr 	EvaluateInteger
.1906	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1908	85 04		sta $04				sta 	temp0
.190a	b5 50		lda $50,x			lda 	esInt1,x
.190c	85 05		sta $05				sta 	temp0+1
.190e	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1910	95 50		sta $50,x			sta 	esInt1,x
.1912	95 58		sta $58,x			sta 	esInt2,x
.1914	95 60		sta $60,x			sta 	esInt3,x
.1916	84 0a		sty $0a				sty 	tempShort 					; save Y
.1918	60		rts				rts
.1919					Unary_Random:
.1919	20 84 1d	jsr $1d84			jsr 	MInt32Random 				; generate random number.
.191c	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.191e	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1920	f0 08		beq $192a			beq 	_URExit
.1922	e8		inx				inx 								; load range 0..r-1 into +1
.1923	20 73 17	jsr $1773			jsr 	EvaluateInteger
.1926	ca		dex				dex
.1927	20 cb 1b	jsr $1bcb			jsr 	MInt32Modulus 				; calculate random % modulus
.192a					_URExit:
.192a	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen 			; check right and return
.192d	60		rts				rts
.192e					Unary_Min:
.192e	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1930	d0 02		bne $1934			bne 	UnaryMBody
.1932					Unary_Max:
.1932	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1934					UnaryMBody:
.1934	48		pha				pha 								; save comparator on stack.
.1935	20 54 17	jsr $1754			jsr 	Evaluate 					; get the first thing to check
.1938					_UnaryMLoop:
.1938	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.193a	c8		iny				iny
.193b	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.193d	f0 09		beq $1948			beq 	_UnaryMExit
.193f	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.1941	f0 07		beq $194a			beq 	_UnaryMCompare
.1943	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1945	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1948					_UnaryMExit:
.1948	68		pla				pla 								; throw comparator and return.
.1949	60		rts				rts
.194a					_UnaryMCompare:
.194a	e8		inx				inx 								; get the 2nd thing to evaluate
.194b	20 54 17	jsr $1754			jsr 	Evaluate
.194e	ca		dex				dex
.194f	20 83 15	jsr $1583			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1952	85 0a		sta $0a				sta 	tempShort 					; save result
.1954	68		pla				pla 								; get what we need
.1955	48		pha				pha
.1956	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.1958	d0 de		bne $1938			bne 	_UnaryMLoop 				; no, try another value.
.195a	20 54 1d	jsr $1d54			jsr 	MInt32False 				; promote 2nd to 1st.
.195d	20 3f 1c	jsr $1c3f			jsr 	MInt32Add
.1960	4c 38 19	jmp $1938			jmp 	_UnaryMLoop
.1963					Unary_Page:
.1963	20 54 1d	jsr $1d54			jsr 	MInt32False 				; zero
.1966	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1969	95 48		sta $48,x			sta 	esInt0,x
.196b	ad c9 0a	lda $0ac9			lda 	basePage+1
.196e	95 50		sta $50,x			sta 	esInt1,x
.1970	60		rts				rts
.1971					UnaryReference:
.1971	a9 0f		lda #$0f			lda 	#15
.1973	20 4b 16	jsr $164b			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1976	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1978	10 05		bpl $197f			bpl 	UType
.197a	a9 00		lda #$00			lda 	#0 							; make it an integer
.197c	95 40		sta $40,x			sta 	esType,x
.197e	60		rts				rts
.197f					UType:
.197f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1981	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1984					UnaryHexMarker:
.1984	4c 45 17	jmp $1745			jmp 	EvaluateIntegerTerm
.1987					UnaryComplement:
.1987	20 45 17	jsr $1745			jsr 	EvaluateIntegerTerm
.198a	20 28 1d	jsr $1d28			jsr 	MInt32Not
.198d	60		rts				rts
.198e					UnaryIntToFloat:
.198e	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.1991	b5 40		lda $40,x			lda 	esType,x
.1993	d0 0b		bne $19a0			bne 	_UIFExit
.1995	8a		txa				txa
.1996	a2 1a		ldx #$1a		ldx	#26
.1998	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.199b	aa		tax				tax
.199c	a9 01		lda #$01			lda 	#1
.199e	95 40		sta $40,x			sta 	esType,x
.19a0					_UIFExit:
.19a0	60		rts				rts
.19a1					UnaryFloatToInt:
.19a1	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.19a4	b5 40		lda $40,x			lda 	esType,x
.19a6	f0 07		beq $19af			beq 	_UFIExit
.19a8	8a		txa				txa
.19a9	a2 12		ldx #$12		ldx	#18
.19ab	20 89 1e	jsr $1e89		jsr	floatingpointHandler
.19ae	aa		tax				tax
.19af					_UFIExit:
.19af	60		rts				rts
.19b0					UnaryAlloc:
.19b0	e8		inx				inx 								; evaluate memory required
.19b1	20 73 17	jsr $1773			jsr 	EvaluateInteger
.19b4	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen
.19b7	ca		dex				dex
.19b8	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.19ba	15 61		ora $61,x			ora 	esInt3+1,x
.19bc	d0 19		bne $19d7			bne 	_UABadValue
.19be	20 54 1d	jsr $1d54			jsr 	MInt32False					; zero return.
.19c1	a5 0e		lda $0e				lda 	lowMemory+1 				; copy low memory in
.19c3	95 50		sta $50,x			sta 	esInt1,x
.19c5	a5 0d		lda $0d				lda 	lowMemory
.19c7	95 48		sta $48,x			sta 	esInt0,x
.19c9	18		clc				clc 								; add alloc required.
.19ca	75 49		adc $49,x			adc 	esInt0+1,x
.19cc	85 0d		sta $0d				sta 	lowMemory
.19ce	a5 0e		lda $0e				lda 	lowMemory+1
.19d0	75 51		adc $51,x			adc 	esInt1+1,x
.19d2	85 0e		sta $0e				sta 	lowMemory+1
.19d4	b0 01		bcs $19d7			bcs		_UABadValue 				; overflow definitely bad.
.19d6	60		rts				rts
.19d7					_UABadValue:
.19d7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19d9	20 82 1e	jsr $1e82			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.19dc					UnaryTimer:
.19dc	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen
.19df	98		tya				tya
.19e0	48		pha				pha
.19e1	20 7b 1d	jsr $1d7b			jsr 	MInt32Zero 					; zero result
.19e4	86 04		stx $04				stx 	temp0 						; returning in YA so can't use pshx
.19e6	a2 08		ldx #$08		ldx	#8
.19e8	20 75 1e	jsr $1e75		jsr	deviceHandler
.19eb	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.19ed	95 48		sta $48,x			sta 	esInt0,x
.19ef	98		tya				tya
.19f0	95 50		sta $50,x			sta 	esInt1,x
.19f2	68		pla				pla
.19f3	a8		tay				tay
.19f4	60		rts				rts
.19f5					UnaryInkey:
.19f5	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen
.19f8	86 04		stx $04				stx 	temp0
.19fa	a2 02		ldx #$02		ldx	#2
.19fc	20 75 1e	jsr $1e75		jsr	deviceHandler
.19ff	a6 04		ldx $04				ldx 	temp0
.1a01	20 63 1d	jsr $1d63			jsr 	MInt32Set8Bit
.1a04	60		rts				rts
.1a05					UnaryGet:
.1a05	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen
.1a08	86 04		stx $04				stx 	temp0
.1a0a					_UGLoop:
.1a0a	a2 02		ldx #$02		ldx	#2
.1a0c	20 75 1e	jsr $1e75		jsr	deviceHandler
.1a0f	c9 00		cmp #$00			cmp 	#0
.1a11	f0 f7		beq $1a0a			beq 	_UGLoop
.1a13	a6 04		ldx $04				ldx 	temp0
.1a15	20 63 1d	jsr $1d63			jsr 	MInt32Set8Bit
.1a18	60		rts				rts
.1a19					UnarySys:
.1a19	20 73 17	jsr $1773			jsr 	EvaluateInteger 				; get the address
.1a1c	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen
.1a1f	20 23 11	jsr $1123			jsr 	TOSToTemp0 						; copy to temp0
.1a22	8a		txa				txa
.1a23	48		pha				pha
.1a24	98		tya				tya
.1a25	48		pha				pha
.1a26	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1a29	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1a2c	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1a2f	20 3e 1a	jsr $1a3e			jsr 	_CallTemp0
.1a32	85 0a		sta $0a				sta 	tempShort 						; restore YX
.1a34	68		pla				pla
.1a35	a8		tay				tay
.1a36	68		pla				pla
.1a37	aa		tax				tax
.1a38	a5 0a		lda $0a				lda 	tempShort
.1a3a	20 63 1d	jsr $1d63			jsr 	MInt32Set8Bit 					; return result.
.1a3d	60		rts				rts
.1a3e					_CallTemp0:
.1a3e	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1a41					ExecChr:
.1a41	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger		; character number
.1a44	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen				; right bracket
.1a47	98		tya				tya
.1a48	48		pha				pha
.1a49	8a		txa				txa 								; A = stack
.1a4a	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1a4c	a2 00		ldx #$00		ldx	#0
.1a4e	20 ba 20	jsr $20ba		jsr	stringHandler
.1a51	aa		tax				tax 								; X = stack
.1a52	68		pla				pla
.1a53	a8		tay				tay
.1a54	60		rts				rts
.1a55					ExecLeft:
.1a55	20 68 17	jsr $1768			jsr 	EvaluateString 				; string to stack,X
.1a58	20 d4 1d	jsr $1dd4			jsr 	CheckComma
.1a5b	e8		inx				inx
.1a5c	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1a5e	20 63 1d	jsr $1d63			jsr 	MInt32Set8Bit
.1a61	e8		inx				inx
.1a62	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1a65					ExecSubstring:
.1a65	ca		dex				dex 								; fix up X
.1a66	ca		dex				dex
.1a67	20 c7 1d	jsr $1dc7			jsr 	CheckRightParen 			; check closing right bracket.
.1a6a	8a		txa				txa 								; do the substring and exit.
.1a6b	a2 06		ldx #$06		ldx	#6
.1a6d	20 ba 20	jsr $20ba		jsr	stringHandler
.1a70	aa		tax				tax
.1a71	60		rts				rts
.1a72					ExecMid:
.1a72	20 68 17	jsr $1768			jsr 	EvaluateString 				; string to stack,X
.1a75	20 d4 1d	jsr $1dd4			jsr 	CheckComma
.1a78	e8		inx				inx
.1a79	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1a7c	c9 00		cmp #$00			cmp 	#0
.1a7e	f0 15		beq $1a95			beq 	_EMValue
.1a80	e8		inx				inx
.1a81	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1a83	20 63 1d	jsr $1d63			jsr 	MInt32Set8Bit
.1a86	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1a88	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1a8a	f0 d9		beq $1a65			beq 	ExecSubString
.1a8c	20 d4 1d	jsr $1dd4			jsr 	CheckComma
.1a8f	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1a92	4c 65 1a	jmp $1a65			jmp 	ExecSubString
.1a95					_EMValue:
.1a95	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a97	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1a9a					ExecRight:
.1a9a	20 68 17	jsr $1768			jsr 	EvaluateString 				; string to stack,X
.1a9d	20 d4 1d	jsr $1dd4			jsr 	CheckComma
.1aa0	e8		inx				inx
.1aa1	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1aa4	ca		dex				dex
.1aa5	98		tya				tya
.1aa6	48		pha				pha
.1aa7	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1aa9	85 04		sta $04				sta 	temp0
.1aab	b5 50		lda $50,x			lda 	esInt1,x
.1aad	85 05		sta $05				sta 	temp0+1
.1aaf	a0 00		ldy #$00			ldy 	#0 							; point to length
.1ab1	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1ab3	18		clc				clc 								; add 1.
.1ab4	69 01		adc #$01			adc 	#1
.1ab6	38		sec				sec
.1ab7	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1ab9	f0 02		beq $1abd			beq		_ERMake1 					; if zero, make it 1.
.1abb	b0 02		bcs $1abf			bcs		_EROkay
.1abd					_ERMake1:
.1abd	a9 01		lda #$01			lda 	#1 							; start position.
.1abf					_EROkay:
.1abf	e8		inx				inx 								; set start pos.
.1ac0	95 48		sta $48,x			sta 	esInt0,x
.1ac2	e8		inx				inx
.1ac3	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1ac5	20 63 1d	jsr $1d63			jsr 	MInt32Set8Bit
.1ac8	68		pla				pla
.1ac9	a8		tay				tay
.1aca	4c 65 1a	jmp $1a65			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1acd					MInt32And:
.1acd	b5 48		lda $48,x			lda 	esInt0,x
.1acf	35 49		and $49,x			and 	esInt0+1,x
.1ad1	95 48		sta $48,x			sta 	esInt0,x
.1ad3	b5 50		lda $50,x			lda 	esInt1,x
.1ad5	35 51		and $51,x			and 	esInt1+1,x
.1ad7	95 50		sta $50,x			sta 	esInt1,x
.1ad9	b5 58		lda $58,x			lda 	esInt2,x
.1adb	35 59		and $59,x			and 	esInt2+1,x
.1add	95 58		sta $58,x			sta 	esInt2,x
.1adf	b5 60		lda $60,x			lda 	esInt3,x
.1ae1	35 61		and $61,x			and 	esInt3+1,x
.1ae3	95 60		sta $60,x			sta 	esInt3,x
.1ae5	60		rts				rts
.1ae6					MInt32Or:
.1ae6	b5 48		lda $48,x			lda 	esInt0,x
.1ae8	15 49		ora $49,x			ora 	esInt0+1,x
.1aea	95 48		sta $48,x			sta 	esInt0,x
.1aec	b5 50		lda $50,x			lda 	esInt1,x
.1aee	15 51		ora $51,x			ora 	esInt1+1,x
.1af0	95 50		sta $50,x			sta 	esInt1,x
.1af2	b5 58		lda $58,x			lda 	esInt2,x
.1af4	15 59		ora $59,x			ora 	esInt2+1,x
.1af6	95 58		sta $58,x			sta 	esInt2,x
.1af8	b5 60		lda $60,x			lda 	esInt3,x
.1afa	15 61		ora $61,x			ora 	esInt3+1,x
.1afc	95 60		sta $60,x			sta 	esInt3,x
.1afe	60		rts				rts
.1aff					MInt32Xor:
.1aff	b5 48		lda $48,x			lda 	esInt0,x
.1b01	55 49		eor $49,x			eor 	esInt0+1,x
.1b03	95 48		sta $48,x			sta 	esInt0,x
.1b05	b5 50		lda $50,x			lda 	esInt1,x
.1b07	55 51		eor $51,x			eor 	esInt1+1,x
.1b09	95 50		sta $50,x			sta 	esInt1,x
.1b0b	b5 58		lda $58,x			lda 	esInt2,x
.1b0d	55 59		eor $59,x			eor 	esInt2+1,x
.1b0f	95 58		sta $58,x			sta 	esInt2,x
.1b11	b5 60		lda $60,x			lda 	esInt3,x
.1b13	55 61		eor $61,x			eor 	esInt3+1,x
.1b15	95 60		sta $60,x			sta 	esInt3,x
.1b17	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1b18					MInt32Compare:
.1b18	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1b1a	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1b1c	d0 13		bne $1b31			bne 	MInt32Compare2
.1b1e	b5 50		lda $50,x			lda 	esInt1,x
.1b20	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1b22	d0 0d		bne $1b31			bne 	MInt32Compare2
.1b24	b5 58		lda $58,x			lda 	esInt2,x
.1b26	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1b28	d0 07		bne $1b31			bne 	MInt32Compare2
.1b2a	b5 60		lda $60,x			lda 	esInt3,x
.1b2c	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1b2e	d0 01		bne $1b31			bne 	MInt32Compare2
.1b30	60		rts				rts
.1b31					MInt32Compare2:
.1b31	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1b33	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1b35	b5 50		lda $50,x			lda		esInt1,x
.1b37	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1b39	b5 58		lda $58,x			lda		esInt2,x
.1b3b	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1b3d	b5 60		lda $60,x			lda		esInt3,x
.1b3f	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1b41	50 02		bvc $1b45			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1b43	49 80		eor #$80			eor 	#$80
.1b45					_I32LNoOverflow
.1b45	30 03		bmi $1b4a			bmi 	MInt32CLess					; if -ve then return $FF
.1b47	a9 01		lda #$01			lda 	#$01						; else return $01
.1b49	60		rts				rts
.1b4a					MInt32CLess:
.1b4a	a9 ff		lda #$ff			lda 	#$FF
.1b4c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1b4d					MInt32SDivide:
.1b4d	98		tya				tya  								; save Y, which is the count of negations
.1b4e	48		pha				pha
.1b4f	a0 00		ldy #$00			ldy 	#0 							; zero count
.1b51	20 69 1b	jsr $1b69			jsr 	_MInt32SRemSign 			; unsign TOS
.1b54	e8		inx				inx 								; unsign TOS+1
.1b55	20 69 1b	jsr $1b69			jsr 	_MInt32SRemSign
.1b58	ca		dex				dex
.1b59	98		tya				tya 								; save sign count on stack
.1b5a	48		pha				pha
.1b5b	20 72 1b	jsr $1b72			jsr 	MInt32UDivide 				; unsigned division
.1b5e	68		pla				pla 								; get sign count back
.1b5f	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1b61	f0 03		beq $1b66			beq 	_I32SNoNeg
.1b63	20 0e 1d	jsr $1d0e			jsr 	MInt32Negate
.1b66					_I32SNoNeg:
.1b66	68		pla				pla 								; restoe Y and exit
.1b67	a8		tay				tay
.1b68	60		rts				rts
.1b69					_MInt32SRemSign:
.1b69	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1b6b	10 04		bpl $1b71			bpl 	_MInt32SRSExit
.1b6d	c8		iny				iny 								; increment the sign count
.1b6e	20 0e 1d	jsr $1d0e			jsr 	MInt32Negate 				; negate the value.
.1b71					_MInt32SRSExit:
.1b71	60		rts				rts
.1b72					MInt32UDivide:
.1b72	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1b74	15 51		ora $51,x			ora 	esInt1+1,x
.1b76	15 52		ora $52,x			ora 	esInt1+2,x
.1b78	15 53		ora $53,x			ora 	esInt1+3,x
.1b7a	f0 4a		beq $1bc6			beq 	_MInt32DZero
.1b7c	e8		inx				inx 								; clear A
.1b7d	e8		inx				inx
.1b7e	20 54 1d	jsr $1d54			jsr 	MInt32False
.1b81	ca		dex				dex
.1b82	ca		dex				dex
.1b83	98		tya				tya 								; save Y on the stack
.1b84	48		pha				pha
.1b85	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1b87					_MInt32UDLoop:
.1b87	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1b89	36 50		rol $50,x			rol 	esInt1,x
.1b8b	36 58		rol $58,x			rol 	esInt2,x
.1b8d	36 60		rol $60,x			rol 	esInt3,x
.1b8f	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1b91	36 52		rol $52,x			rol 	esInt1+2,x
.1b93	36 5a		rol $5a,x			rol 	esInt2+2,x
.1b95	36 62		rol $62,x			rol 	esInt3+2,x
.1b97	38		sec				sec 								; calculate A-M saving result on the stack
.1b98	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1b9a	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1b9c	48		pha				pha
.1b9d	b5 52		lda $52,x			lda 	esInt1+2,x
.1b9f	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1ba1	48		pha				pha
.1ba2	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1ba4	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1ba6	48		pha				pha
.1ba7	b5 62		lda $62,x			lda 	esInt3+2,x
.1ba9	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1bab	90 10		bcc $1bbd			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1bad	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1baf	68		pla				pla
.1bb0	95 5a		sta $5a,x			sta 	esInt2+2,x
.1bb2	68		pla				pla
.1bb3	95 52		sta $52,x			sta 	esInt1+2,x
.1bb5	68		pla				pla
.1bb6	95 4a		sta $4a,x			sta 	esInt0+2,x
.1bb8	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1bba	4c c0 1b	jmp $1bc0			jmp 	_MInt32Next 					; do the next iteration
.1bbd					_MInt32NoSubtract:
.1bbd	68		pla				pla
.1bbe	68		pla				pla
.1bbf	68		pla				pla
.1bc0					_MInt32Next:
.1bc0	88		dey				dey 								; do this 32 times.
.1bc1	d0 c4		bne $1b87			bne 	_MInt32UDLoop
.1bc3	68		pla				pla 								; restore Y and exit
.1bc4	a8		tay				tay
.1bc5	60		rts				rts
.1bc6					_MInt32DZero:
.1bc6	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1bc8	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1bcb					MInt32Modulus:
.1bcb	20 72 1b	jsr $1b72			jsr 	MInt32UDivide 				; do the division.
.1bce	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1bd0	95 60		sta $60,x			sta 	esInt3,x
.1bd2	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1bd4	95 58		sta $58,x			sta 	esInt2,x
.1bd6	b5 52		lda $52,x			lda 	esInt1+2,x
.1bd8	95 50		sta $50,x			sta 	esInt1,x
.1bda	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1bdc	95 48		sta $48,x			sta 	esInt0,x
.1bde	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.1bdf					MInt32FromString:
.1bdf	85 0a		sta $0a				sta 	tempShort 					; save base
.1be1	98		tya				tya
.1be2	48		pha				pha
.1be3	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1be5	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1be7	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1be9	d0 01		bne $1bec			bne 	_I32FSNotNegative
.1beb	c8		iny				iny 								; if so consume it.
.1bec					_I32FSNotNegative:
.1bec	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1bee	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1bf0	f0 02		beq $1bf4			beq 	_I32FSNN2
.1bf2	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1bf4					_I32FSNN2:
.1bf4	48		pha				pha 								; save base + final sign on stack.
.1bf5	20 54 1d	jsr $1d54			jsr 	MInt32False 					; zero the return value.
.1bf8					I32FSMainLoop:
.1bf8	68		pla				pla 								; get the base back into tempshort
.1bf9	48		pha				pha
.1bfa	29 7f		and #$7f			and 	#$7F
.1bfc	85 0a		sta $0a				sta 	tempShort
.1bfe	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1c00	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1c02	90 02		bcc $1c06			bcc 	_I32FSNotLC
.1c04	e9 20		sbc #$20			sbc 	#32
.1c06					_I32FSNotLC:
.1c06	38		sec				sec 								; subtract 48 (ASCII "0")
.1c07	e9 30		sbc #$30			sbc 	#"0"
.1c09	90 26		bcc $1c31			bcc 	_I32FSDone 					; nothing more to do.
.1c0b	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1c0d	90 06		bcc $1c15			bcc 	_I32FSValidate
.1c0f	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1c11	90 1e		bcc $1c31			bcc 	_I32FSDone
.1c13	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1c15					_I32FSValidate:
.1c15	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1c17	b0 18		bcs $1c31			bcs 	_I32FSDone 					; sorry, too large for this base.
.1c19	48		pha				pha 								; save the new digit value.
.1c1a	e8		inx				inx 								; put base into next slot.
.1c1b	a5 0a		lda $0a				lda 	tempShort
.1c1d	20 63 1d	jsr $1d63			jsr 	MInt32Set8Bit
.1c20	ca		dex				dex
.1c21	20 73 1c	jsr $1c73			jsr 	MInt32Multiply 				; multiply current by the base
.1c24	e8		inx				inx
.1c25	68		pla				pla  								; put additive into next slot
.1c26	20 63 1d	jsr $1d63			jsr 	MInt32Set8Bit
.1c29	ca		dex				dex
.1c2a	20 3f 1c	jsr $1c3f			jsr 	MInt32Add 					; and add it
.1c2d	c8		iny				iny 								; look at next character
.1c2e	4c f8 1b	jmp $1bf8			jmp 	I32FSMainLoop 				; and go round again.
.1c31					_I32FSDone:
.1c31	68		pla				pla 								; get base/final sign back
.1c32	10 04		bpl $1c38			bpl 	_I32FSNN3
.1c34	88		dey				dey 								; one fewer character to allow for the - prefix.
.1c35	20 0e 1d	jsr $1d0e			jsr 	MInt32Negate 				; negate the result.
.1c38					_I32FSNN3:
.1c38	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1c3a	68		pla				pla
.1c3b	a8		tay				tay
.1c3c	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1c3e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1c3f					MInt32Add:
.1c3f	18		clc				clc
.1c40	b5 48		lda $48,x			lda 	esInt0,x
.1c42	75 49		adc $49,x			adc 	esInt0+1,x
.1c44	95 48		sta $48,x			sta 	esInt0,x
.1c46	b5 50		lda $50,x			lda 	esInt1,x
.1c48	75 51		adc $51,x			adc 	esInt1+1,x
.1c4a	95 50		sta $50,x			sta 	esInt1,x
.1c4c	b5 58		lda $58,x			lda 	esInt2,x
.1c4e	75 59		adc $59,x			adc 	esInt2+1,x
.1c50	95 58		sta $58,x			sta 	esInt2,x
.1c52	b5 60		lda $60,x			lda 	esInt3,x
.1c54	75 61		adc $61,x			adc 	esInt3+1,x
.1c56	95 60		sta $60,x			sta 	esInt3,x
.1c58	60		rts				rts
.1c59					MInt32Sub:
.1c59	38		sec				sec
.1c5a	b5 48		lda $48,x			lda 	esInt0,x
.1c5c	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1c5e	95 48		sta $48,x			sta 	esInt0,x
.1c60	b5 50		lda $50,x			lda 	esInt1,x
.1c62	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1c64	95 50		sta $50,x			sta 	esInt1,x
.1c66	b5 58		lda $58,x			lda 	esInt2,x
.1c68	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1c6a	95 58		sta $58,x			sta 	esInt2,x
.1c6c	b5 60		lda $60,x			lda 	esInt3,x
.1c6e	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1c70	95 60		sta $60,x			sta 	esInt3,x
.1c72	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1c73					MInt32Multiply:
.1c73	e8		inx				inx 								; copy 2nd -> 3rd
.1c74	20 99 1c	jsr $1c99			jsr 	MInt32CopyUp
.1c77	ca		dex				dex
.1c78	20 99 1c	jsr $1c99			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1c7b	20 54 1d	jsr $1d54			jsr 	MInt32False 					; zero 1st.
.1c7e					_I32Loop:
.1c7e	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1c80	29 01		and #$01			and 	#1
.1c82	f0 03		beq $1c87			beq 	_I32NoAdd 					; if set
.1c84	20 3f 1c	jsr $1c3f			jsr 	MInt32Add 					; add 2nd to 1st.
.1c87					_I32NoAdd:
.1c87	e8		inx				inx 								; shift 2nd left
.1c88	20 69 1d	jsr $1d69			jsr 	MInt32ShiftLeft
.1c8b	e8		inx				inx  								; shift 3rd right
.1c8c	20 72 1d	jsr $1d72			jsr 	MInt32ShiftRight
.1c8f	20 7b 1d	jsr $1d7b			jsr 	MInt32Zero 					; check if zero.
.1c92	08		php				php 								; save status bits
.1c93	ca		dex				dex 	 							; point back to 1st
.1c94	ca		dex				dex
.1c95	28		plp				plp 								; get status bits
.1c96	d0 e6		bne $1c7e			bne 	_I32Loop 					; if non-zero keep going.
.1c98	60		rts				rts
.1c99					MInt32CopyUp:
.1c99	b5 48		lda $48,x			lda 	esInt0,x
.1c9b	95 49		sta $49,x			sta 	esInt0+1,x
.1c9d	b5 50		lda $50,x			lda 	esInt1,x
.1c9f	95 51		sta $51,x			sta 	esInt1+1,x
.1ca1	b5 58		lda $58,x			lda 	esInt2,x
.1ca3	95 59		sta $59,x			sta 	esInt2+1,x
.1ca5	b5 60		lda $60,x			lda 	esInt3,x
.1ca7	95 61		sta $61,x			sta 	esInt3+1,x
.1ca9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af1					MCharCount:	.fill 	1						; count of converted characters
.1caa					MInt32ToString:
.1caa	48		pha				pha 								; save base
.1cab	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1cad	a9 00		lda #$00			lda 	#0
.1caf	8d f1 0a	sta $0af1			sta 	MCharCount 					; clear character count to 0
.1cb2	98		tya				tya
.1cb3	48		pha				pha
.1cb4	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1cb6	10 10		bpl $1cc8			bpl 	_I32TSUnsigned
.1cb8	48		pha				pha 								; save base on stack.
.1cb9	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1cbb	10 08		bpl $1cc5			bpl 	_I32TSNoFlip
.1cbd	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1cbf	20 fb 1c	jsr $1cfb			jsr 	MI32WriteCharacter
.1cc2	20 0e 1d	jsr $1d0e			jsr 	MInt32Negate 				; negate the value.
.1cc5					_I32TSNoFlip:
.1cc5	68		pla				pla 								; get the base back
.1cc6	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1cc8					_I32TSUnsigned:
.1cc8	20 d6 1c	jsr $1cd6			jsr 	MI32DivideWrite 			; recursive code to output string.
.1ccb	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1ccd	ad f1 0a	lda $0af1			lda 	MCharCount
.1cd0	91 04		sta ($04),y			sta 	(temp0),y
.1cd2	68		pla				pla
.1cd3	a8		tay				tay
.1cd4	68		pla				pla
.1cd5	60		rts				rts
.1cd6					MI32DivideWrite:
.1cd6	48		pha				pha 								; save the divisor/base
.1cd7	e8		inx				inx 								; write in the dividing position.
.1cd8	20 63 1d	jsr $1d63			jsr 	MInt32Set8Bit
.1cdb	ca		dex				dex
.1cdc	20 72 1b	jsr $1b72			jsr 	MInt32UDivide 				; divide number by base.
.1cdf	68		pla				pla 								; get the base into Y
.1ce0	a8		tay				tay
.1ce1	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1ce3	48		pha				pha
.1ce4	20 7b 1d	jsr $1d7b			jsr 	MInt32Zero 					; is the result zero ?
.1ce7	f0 04		beq $1ced			beq 	_I32NoRecurse 				; if so, don't recurse.
.1ce9	98		tya				tya 								; put base into A
.1cea	20 d6 1c	jsr $1cd6			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1ced					_I32NoRecurse:
.1ced	68		pla				pla 								; get the remainder back
.1cee	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1cf0	90 02		bcc $1cf4			bcc 	_I32NotHex
.1cf2	69 06		adc #$06			adc 	#7-1
.1cf4					_I32NotHex:
.1cf4	18		clc				clc 								; make it ASCII
.1cf5	69 30		adc #$30			adc 	#48
.1cf7	20 fb 1c	jsr $1cfb			jsr 	MI32WriteCharacter 			; write the character out
.1cfa	60		rts				rts 								; and exit.
.1cfb					MI32WriteCharacter:
.1cfb	ee f1 0a	inc $0af1			inc 	MCharCount 					; bump count (space for leading count)
.1cfe	ac f1 0a	ldy $0af1			ldy 	MCharCount 					; get position
.1d01	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1d03	c8		iny				iny
.1d04	a9 00		lda #$00			lda 	#0
.1d06	91 04		sta ($04),y			sta 	(temp0),y
.1d08	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af2					MSeed32:	.fill 	4							; random number seed.
.1d09					MInt32Absolute:
.1d09	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1d0b	30 01		bmi $1d0e			bmi 	MInt32Negate
.1d0d	60		rts				rts
.1d0e					MInt32Negate:
.1d0e	38		sec				sec
.1d0f	a9 00		lda #$00			lda 	#0
.1d11	f5 48		sbc $48,x			sbc 	esInt0,x
.1d13	95 48		sta $48,x			sta 	esInt0,x
.1d15	a9 00		lda #$00			lda 	#0
.1d17	f5 50		sbc $50,x			sbc 	esInt1,x
.1d19	95 50		sta $50,x			sta 	esInt1,x
.1d1b	a9 00		lda #$00			lda 	#0
.1d1d	f5 58		sbc $58,x			sbc 	esInt2,x
.1d1f	95 58		sta $58,x			sta 	esInt2,x
.1d21	a9 00		lda #$00			lda 	#0
.1d23	f5 60		sbc $60,x			sbc 	esInt3,x
.1d25	95 60		sta $60,x			sta 	esInt3,x
.1d27	60		rts				rts
.1d28					MInt32Not:
.1d28	b5 48		lda $48,x			lda 	esInt0,x
.1d2a	49 ff		eor #$ff			eor 	#$FF
.1d2c	95 48		sta $48,x			sta 	esInt0,x
.1d2e	b5 50		lda $50,x			lda 	esInt1,x
.1d30	49 ff		eor #$ff			eor 	#$FF
.1d32	95 50		sta $50,x			sta 	esInt1,x
.1d34	b5 58		lda $58,x			lda 	esInt2,x
.1d36	49 ff		eor #$ff			eor 	#$FF
.1d38	95 58		sta $58,x			sta 	esInt2,x
.1d3a	b5 60		lda $60,x			lda 	esInt3,x
.1d3c	49 ff		eor #$ff			eor 	#$FF
.1d3e	95 60		sta $60,x			sta 	esInt3,x
.1d40	60		rts				rts
.1d41					MInt32Sign:
.1d41	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1d43	30 0b		bmi $1d50			bmi 	MInt32True 					; if set return -1 (true)
.1d45	20 7b 1d	jsr $1d7b			jsr 	MInt32Zero 					; is it zero ?
.1d48	f0 0a		beq $1d54			beq 	MInt32False 					; if zero return 0 (false)
.1d4a	20 54 1d	jsr $1d54			jsr 	MInt32False 					; > 0 return 1
.1d4d	f6 48		inc $48,x			inc 	esInt0,x
.1d4f	60		rts				rts
.1d50					MInt32True:
.1d50	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1d52	d0 02		bne $1d56			bne 	MInt32WriteAll
.1d54					MInt32False:
.1d54	a9 00		lda #$00			lda 	#0
.1d56					MInt32WriteAll:
.1d56	95 48		sta $48,x			sta 	esInt0,x
.1d58					MInt32Write123:
.1d58	95 50		sta $50,x			sta 	esInt1,x
.1d5a	95 58		sta $58,x			sta 	esInt2,x
.1d5c	95 60		sta $60,x			sta 	esInt3,x
.1d5e	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1d60	95 40		sta $40,x			sta 	esType,x
.1d62	60		rts				rts
.1d63					MInt32Set8Bit:
.1d63	95 48		sta $48,x			sta 	esInt0,x
.1d65	a9 00		lda #$00			lda 	#0
.1d67	f0 ef		beq $1d58			beq		MInt32Write123
.1d69					MInt32ShiftLeft:
.1d69	16 48		asl $48,x			asl 	esInt0,x
.1d6b	36 50		rol $50,x			rol	 	esInt1,x
.1d6d	36 58		rol $58,x			rol	 	esInt2,x
.1d6f	36 60		rol $60,x			rol	 	esInt3,x
.1d71	60		rts				rts
.1d72					MInt32ShiftRight:
.1d72	56 60		lsr $60,x			lsr 	esInt3,x
.1d74	76 58		ror $58,x			ror 	esInt2,x
.1d76	76 50		ror $50,x			ror 	esInt1,x
.1d78	76 48		ror $48,x			ror 	esInt0,x
.1d7a	60		rts				rts
.1d7b					MInt32Zero:
.1d7b	b5 48		lda $48,x			lda 	esInt0,x
.1d7d	15 50		ora $50,x			ora 	esInt1,x
.1d7f	15 58		ora $58,x			ora 	esInt2,x
.1d81	15 60		ora $60,x			ora 	esInt3,x
.1d83	60		rts				rts
.1d84					MInt32Random:
.1d84	98		tya				tya
.1d85	48		pha				pha
.1d86	a0 07		ldy #$07			ldy 	#7
.1d88	ad f2 0a	lda $0af2			lda 	MSeed32+0
.1d8b	d0 03		bne $1d90			bne 	_Random1
.1d8d	a8		tay				tay
.1d8e	a9 aa		lda #$aa			lda		#$AA
.1d90					_Random1:
.1d90	0a		asl a				asl 	a
.1d91	2e f3 0a	rol $0af3			rol 	MSeed32+1
.1d94	2e f4 0a	rol $0af4			rol 	MSeed32+2
.1d97	2e f5 0a	rol $0af5			rol 	MSeed32+3
.1d9a	90 02		bcc $1d9e			bcc 	_Random2
.1d9c	49 c5		eor #$c5			eor 	#$C5
.1d9e					_Random2:
.1d9e	88		dey				dey
.1d9f	d0 ef		bne $1d90			bne 	_Random1
.1da1	8d f2 0a	sta $0af2			sta 	MSeed32+0
.1da4	95 48		sta $48,x			sta 	esInt0,x
.1da6	ad f3 0a	lda $0af3			lda 	MSeed32+1
.1da9	95 50		sta $50,x			sta 	esInt1,x
.1dab	ad f4 0a	lda $0af4			lda 	MSeed32+2
.1dae	95 58		sta $58,x			sta 	esInt2,x
.1db0	ad f5 0a	lda $0af5			lda 	MSeed32+3
.1db3	95 60		sta $60,x			sta 	esInt3,x
.1db5	68		pla				pla
.1db6	a8		tay				tay
.1db7	a9 00		lda #$00			lda 	#0
.1db9	95 40		sta $40,x			sta 	esType,x
.1dbb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.1dbc					CheckToken:
.1dbc	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1dbe	d0 02		bne $1dc2			bne 	_CTError
.1dc0	c8		iny				iny
.1dc1	60		rts				rts
.1dc2					_CTError:
.1dc2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1dc4	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1dc7					CheckRightParen:
.1dc7	b1 02		lda ($02),y			lda 	(codePtr),y
.1dc9	c8		iny				iny
.1dca	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1dcc	d0 01		bne $1dcf			bne 	_CRPError
.1dce	60		rts				rts
.1dcf					_CRPError:
.1dcf	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.1dd1	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1dd4					CheckComma:
.1dd4	b1 02		lda ($02),y			lda 	(codePtr),y
.1dd6	c8		iny				iny
.1dd7	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1dd9	d0 01		bne $1ddc			bne 	_CCError
.1ddb	60		rts				rts
.1ddc					_CCError:
.1ddc	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.1dde	20 82 1e	jsr $1e82			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.23a5					ScanForward:
.23a5	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.23a7	86 07		stx $07				stx 	temp1+1
.23a9	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.23ab	85 08		sta $08				sta 	temp2
.23ad	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.23af	c8		iny				iny
.23b0	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.23b2	d0 08		bne $23bc			bne 	_SFNoCheck 					; if so, check token against entered values.
.23b4	c5 06		cmp $06				cmp 	temp1
.23b6	f0 24		beq $23dc			beq 	_SFExit
.23b8	c5 07		cmp $07				cmp 	temp1+1
.23ba	f0 20		beq $23dc			beq 	_SFExit
.23bc					_SFNoCheck:
.23bc	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.23be	90 ed		bcc $23ad			bcc 	_SFLoop
.23c0	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.23c2	90 19		bcc $23dd			bcc 	_SFSpecials
.23c4	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.23c6	90 e5		bcc $23ad			bcc 	_SFLoop
.23c8	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.23ca	b0 e1		bcs $23ad			bcs 	_SFLoop
.23cc	aa		tax				tax  								; token in X, and look up the adjuster.
.23cd	bd 5b 17	lda $175b,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.23d0	38		sec				sec 								; convert to an offset
.23d1	e9 81		sbc #$81			sbc 	#$81
.23d3	18		clc				clc 								; add to depth
.23d4	65 08		adc $08				adc 	temp2
.23d6	85 08		sta $08				sta 	temp2
.23d8	10 d3		bpl $23ad			bpl 	_SFLoop 					; +ve okay to continue
.23da	30 2a		bmi $2406			bmi 	_SFError 					; if gone -ve then we have a nesting error
.23dc	60		rts		_SFExit:rts
.23dd					_SFSpecials:
.23dd	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.23df	f0 14		beq $23f5			beq 	_SFNextLine
.23e1	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.23e3	f0 26		beq $240b			beq 	_SFFloatSkip
.23e5	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.23e7	f0 04		beq $23ed			beq 	_SFSkipString
.23e9	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.23ea	4c ad 23	jmp $23ad			jmp 	_SFLoop 					; token.
.23ed					_SFSkipString:
.23ed	98		tya				tya
.23ee	38		sec				sec
.23ef	71 02		adc ($02),y			adc 	(codePtr),y
.23f1	a8		tay				tay
.23f2	4c ad 23	jmp $23ad			jmp 	_SFLoop
.23f5					_SFNextLine:
.23f5	a0 00		ldy #$00			ldy 	#0 							; get offset
.23f7	b1 02		lda ($02),y			lda 	(codePtr),y
.23f9	18		clc				clc 								; add to code pointer.
.23fa	65 02		adc $02				adc 	codePtr
.23fc	85 02		sta $02				sta 	codePtr
.23fe	90 02		bcc $2402			bcc		_SFNLNoCarry
.2400	e6 03		inc $03				inc 	codePtr+1
.2402					_SFNLNoCarry:
.2402	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2404	d0 a7		bne $23ad			bne		_SFLoop 					; no go round again
.2406					_SFError:
.2406	a2 13		ldx #$13			ldx 	#ErrorID_Struct
.2408	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.240b					_SFFloatSkip:
.240b	4c 8e 12	jmp $128e			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.1de1					RSReset:
.1de1	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.1de3	85 78		sta $78				sta 	rsPointer
.1de5	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.1de7	85 79		sta $79				sta 	1+(rsPointer)
.1de9	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1deb	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.1dee	60		rts				rts
.1def					RSClaim:
.1def	84 0a		sty $0a				sty 	tempShort 					; preserve Y
.1df1	48		pha				pha 								; save marker on stack.
.1df2	8a		txa				txa 								; get bytes required.
.1df3	38		sec				sec
.1df4	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1df6	65 78		adc $78				adc 	rsPointer
.1df8	85 78		sta $78				sta 	rsPointer
.1dfa	a5 79		lda $79				lda 	rsPointer+1
.1dfc	69 ff		adc #$ff			adc 	#$FF
.1dfe	85 79		sta $79				sta 	rsPointer+1
.1e00	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.1e02	90 08		bcc $1e0c			bcc 	_RSCOverflow
.1e04	68		pla				pla 								; get marker back
.1e05	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1e07	91 78		sta ($78),y			sta 	(rsPointer),y
.1e09	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1e0b	60		rts				rts
.1e0c					_RSCOverflow:
.1e0c	a2 15		ldx #$15			ldx 	#ErrorID_RetStack
.1e0e	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1e11					RSFree:
.1e11	18		clc				clc
.1e12	65 78		adc $78				adc 	rsPointer
.1e14	85 78		sta $78				sta 	rsPointer
.1e16	90 02		bcc $1e1a			bcc 	_RSFExit
.1e18	e6 79		inc $79				inc 	rsPointer+1
.1e1a					_RSFExit:
.1e1a	60		rts				rts
.1e1b					RSSavePosition:
.1e1b	84 0a		sty $0a				sty 	tempShort 					; save Y position
.1e1d	a8		tay				tay 								; this is where we write it.
.1e1e	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1e20	91 78		sta ($78),y			sta 	(rsPointer),y
.1e22	c8		iny				iny
.1e23	a5 03		lda $03				lda 	codePtr+1
.1e25	91 78		sta ($78),y			sta 	(rsPointer),y
.1e27	c8		iny				iny
.1e28	a5 0a		lda $0a				lda 	tempShort 					; write the Y position out.
.1e2a	91 78		sta ($78),y			sta 	(rsPointer),y
.1e2c	a8		tay				tay 								; fix Y back again to original value
.1e2d	60		rts				rts
.1e2e					RSLoadPosition:
.1e2e	a8		tay				tay
.1e2f	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1e31	85 02		sta $02				sta 	codePtr
.1e33	c8		iny				iny
.1e34	b1 78		lda ($78),y			lda 	(rsPointer),y
.1e36	85 03		sta $03				sta 	codePtr+1
.1e38	c8		iny				iny
.1e39	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1e3b	a8		tay				tay 								; to Y
.1e3c	60		rts				rts

;******  Return to file: main/main.asm

.1e3d					mainHandler:
.1e3d	7c 40 1e	jmp ($1e40,x)			jmp 	(mainVectors,x)
.1e40					mainVectors:
>1e40	8e 17					.word LinkEvaluate         ; index 0
>1e42	94 17					.word LinkEvaluateInteger  ; index 2
>1e44	9a 17					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.asm

.1e46					assemblerHandler:
.1e46	7c 49 1e	jmp ($1e49,x)			jmp 	(assemblerVectors,x)
.1e49					assemblerVectors:

;******  Return to file: basic.asm


;******  Processing file: device/device.asm


;******  Processing file: device/x16/x16io.asm

.1e49					IONewLine:
.1e49	48		pha				pha
.1e4a	a9 0d		lda #$0d			lda 	#13
.1e4c	20 59 1e	jsr $1e59			jsr 	IOPrintChar
.1e4f	68		pla				pla
.1e50	60		rts				rts
.1e51					IOTab:
.1e51	48		pha				pha
.1e52	a9 20		lda #$20			lda 	#32
.1e54	20 59 1e	jsr $1e59			jsr 	IOPrintChar
.1e57	68		pla				pla
.1e58	60		rts				rts
.1e59					IOPrintChar:
.1e59	aa		tax				tax
.1e5a	5a		phy				phy
.1e5b	8a		txa				txa
.1e5c	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1e5f	7a		ply				ply
.1e60	60		rts				rts
.1e61					IOInkey:
.1e61	98		tya				tya
.1e62	48		pha				pha
.1e63	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1e66	85 0a		sta $0a				sta 	tempShort
.1e68	68		pla				pla
.1e69	a8		tay				tay
.1e6a	a5 0a		lda $0a				lda 	tempShort
.1e6c	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/x16/x16timer.asm

.1e6d					IOReadTimer:
.1e6d	20 de ff	jsr $ffde			jsr 	$FFDE
.1e70	48		pha				pha
.1e71	8a		txa				txa
.1e72	a8		tay				tay
.1e73	68		pla				pla
.1e74	60		rts				rts

;******  Return to file: device/device.asm

.1e75					deviceHandler:
.1e75	7c 78 1e	jmp ($1e78,x)			jmp 	(deviceVectors,x)
.1e78					deviceVectors:
>1e78	49 1e					.word IONewLine            ; index 0
>1e7a	61 1e					.word IOInkey              ; index 2
>1e7c	59 1e					.word IOPrintChar          ; index 4
>1e7e	51 1e					.word IOTab                ; index 6
>1e80	6d 1e					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm


;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1e82					ErrorHandler:
.1e82	a9 ee		lda #$ee			lda 	#$EE
.1e84	a8		tay				tay
>1e85	db						.byte 	$DB
.1e86	4c 86 1e	jmp $1e86	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.asm

.1e89					floatingpointHandler:
.1e89	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1e8b	20 82 1e	jsr $1e82			jsr 	ErrorHandler

;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.asm

.1e8e					interactionHandler:
.1e8e	7c 91 1e	jmp ($1e91,x)			jmp 	(interactionVectors,x)
.1e91					interactionVectors:

;******  Return to file: basic.asm


;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.1e91					StringChrs:
.1e91	aa		tax				tax 								; set up stack
.1e92	a9 02		lda #$02			lda 	#2
.1e94	20 4b 1f	jsr $1f4b			jsr 	AllocateSoftString
.1e97	98		tya				tya
.1e98	20 71 1f	jsr $1f71			jsr 	WriteSoftString
.1e9b	20 a0 1e	jsr $1ea0			jsr 	ReturnSoftString
.1e9e	8a		txa				txa
.1e9f	60		rts				rts
.1ea0					ReturnSoftString:
.1ea0	a5 7a		lda $7a				lda 	softMemAlloc
.1ea2	95 48		sta $48,x			sta 	esInt0,x
.1ea4	a5 7b		lda $7b				lda 	softMemAlloc+1
.1ea6	95 50		sta $50,x			sta 	esInt1,x
.1ea8	a9 00		lda #$00			lda 	#0
.1eaa	95 58		sta $58,x			sta 	esInt2,x
.1eac	95 60		sta $60,x			sta 	esInt3,x
.1eae	a9 40		lda #$40			lda 	#$40
.1eb0	95 40		sta $40,x			sta 	esType,x
.1eb2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.1eb3					STRCompare:
.1eb3	48		pha				pha 								; save A
.1eb4	aa		tax				tax 								; put stack pos in X
.1eb5	98		tya				tya
.1eb6	48		pha				pha
.1eb7	20 eb 1e	jsr $1eeb			jsr 	CopyStringPair
.1eba	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1ebc	b1 04		lda ($04),y			lda 	(temp0),y
.1ebe	d1 06		cmp ($06),y			cmp 	(temp1),y
.1ec0	90 02		bcc $1ec4			bcc 	_SCNotSmaller
.1ec2	b1 06		lda ($06),y			lda 	(temp1),y
.1ec4					_SCNotSmaller:
.1ec4	aa		tax				tax 								; put that in X. We compare this many chars first.
.1ec5					_SCCompareLoop:
.1ec5	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1ec7	f0 0c		beq $1ed5			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1ec9	ca		dex				dex 								; decrement chars to compare.
.1eca	c8		iny				iny 								; move to next character
.1ecb	38		sec				sec 								; calculate s1[y]-s2[y]
.1ecc	b1 04		lda ($04),y			lda 	(temp0),y
.1ece	f1 06		sbc ($06),y			sbc 	(temp1),y
.1ed0	d0 0a		bne $1edc			bne 	_SCReturnResult 			; if different return sign of A
.1ed2	4c c5 1e	jmp $1ec5			jmp 	_SCCompareLoop
.1ed5					_SCSameToEndShortest
.1ed5	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1ed7	38		sec				sec
.1ed8	b1 04		lda ($04),y			lda 	(temp0),y
.1eda	f1 06		sbc ($06),y			sbc 	(temp1),y
.1edc					_SCReturnResult:
.1edc	08		php				php 								; set return to zero preserving PSW.
.1edd	a2 00		ldx #$00			ldx 	#0
.1edf	28		plp				plp
.1ee0	f0 05		beq $1ee7			beq 	_SCExit 					; two values equal, then exit
.1ee2	ca		dex				dex 								; X = $FF
.1ee3	90 02		bcc $1ee7			bcc 	_SCExit 					; if 1st < 2nd then -1
.1ee5	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1ee7					_SCExit:
.1ee7	68		pla				pla
.1ee8	a8		tay				tay
.1ee9	68		pla				pla
.1eea	60		rts				rts
.1eeb					CopyStringPair:
.1eeb	b5 49		lda $49,x			lda 	esInt0+1,x
.1eed	85 06		sta $06				sta 	temp1
.1eef	b5 51		lda $51,x			lda 	esInt1+1,x
.1ef1	85 07		sta $07				sta 	temp1+1
.1ef3					CopyStringTop:
.1ef3	b5 48		lda $48,x			lda 	esInt0,x
.1ef5	85 04		sta $04				sta 	temp0
.1ef7	b5 50		lda $50,x			lda 	esInt1,x
.1ef9	85 05		sta $05				sta 	temp0+1
.1efb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.1efc					StringConcat:
.1efc	aa		tax				tax									; stack pos in X
.1efd	98		tya				tya
.1efe	48		pha				pha
.1eff	20 eb 1e	jsr $1eeb			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1f02	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1f03	a0 00		ldy #$00			ldy 	#0
.1f05	b1 04		lda ($04),y			lda 	(temp0),y
.1f07	71 06		adc ($06),y			adc 	(temp1),y
.1f09	b0 1c		bcs $1f27			bcs 	_SCError 					; just too many characters here.
.1f0b	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.1f0d	b0 18		bcs $1f27			bcs 	_SCError
.1f0f	20 4b 1f	jsr $1f4b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1f12	20 42 1f	jsr $1f42			jsr 	CopySoftToStack 			; copy that to the stack.
.1f15	20 2c 1f	jsr $1f2c			jsr 	_SCCopyTemp0 				; copy temp0
.1f18	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1f1a	85 04		sta $04				sta 	temp0
.1f1c	a5 07		lda $07				lda 	temp1+1
.1f1e	85 05		sta $05				sta 	temp0+1
.1f20	20 2c 1f	jsr $1f2c			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1f23	68		pla				pla
.1f24	a8		tay				tay
.1f25	8a		txa				txa 								; and A
.1f26	60		rts				rts
.1f27					_SCError:
.1f27	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.1f29	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.1f2c					_SCCopyTemp0:
.1f2c	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1f2e	b1 04		lda ($04),y			lda 	(temp0),y
.1f30	85 08		sta $08				sta 	temp2
.1f32					_SCCopyLoop:
.1f32	a5 08		lda $08				lda 	temp2 						; done the lot
.1f34	f0 0b		beq $1f41			beq 	_SCCopyExit
.1f36	c6 08		dec $08				dec 	temp2
.1f38	c8		iny				iny 								; get next char
.1f39	b1 04		lda ($04),y			lda 	(temp0),y
.1f3b	20 71 1f	jsr $1f71			jsr 	WriteSoftString 			; write to soft string.
.1f3e	4c 32 1f	jmp $1f32			jmp 	_SCCopyLoop
.1f41					_SCCopyExit:
.1f41	60		rts				rts
.1f42					CopySoftToStack:
.1f42	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1f44	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1f46	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.1f48	95 50		sta $50,x			sta 	esInt1,x
.1f4a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1f4b					AllocateSoftString:
.1f4b	85 0a		sta $0a				sta 	tempShort 					; save count
.1f4d	98		tya				tya
.1f4e	48		pha				pha
.1f4f	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1f51	d0 09		bne $1f5c			bne 	_ASSDone
.1f53	a5 0b		lda $0b				lda 	highMemory 					; reset the soft memory alloc pointer.
.1f55	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1f57	a4 0c		ldy $0c				ldy 	highMemory+1 				; but it needs to be reset before each command.
.1f59	88		dey				dey
.1f5a	84 7b		sty $7b				sty 	softMemAlloc+1
.1f5c					_ASSDone:
.1f5c	38		sec				sec 								; allocate downwards enough memory
.1f5d	a5 7a		lda $7a				lda 	softMemAlloc
.1f5f	e5 0a		sbc $0a				sbc 	tempShort
.1f61	85 7a		sta $7a				sta 	softMemAlloc
.1f63	a5 7b		lda $7b				lda 	softMemAlloc+1
.1f65	e9 00		sbc #$00			sbc 	#0
.1f67	85 7b		sta $7b				sta 	softMemAlloc+1
.1f69	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1f6b	a8		tay				tay
.1f6c	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1f6e	68		pla				pla
.1f6f	a8		tay				tay
.1f70	60		rts				rts
.1f71					WriteSoftString:
.1f71	84 0a		sty $0a				sty 	tempShort 					; save Y
.1f73	48		pha				pha
.1f74	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1f76	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.1f78	18		clc				clc
.1f79	69 01		adc #$01			adc 	#1
.1f7b	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1f7d	a8		tay				tay 								; pointer in Y
.1f7e	68		pla				pla 								; get char and write.
.1f7f	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1f81	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1f83	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.1f84					StringSubstring:
.1f84	48		pha				pha
.1f85	aa		tax				tax 								; access stack.
.1f86	98		tya				tya
.1f87	48		pha				pha
.1f88	20 f3 1e	jsr $1ef3			jsr 	CopyStringTop 				; point temp0 to the string.
.1f8b	a0 00		ldy #$00			ldy 	#0 							; get length.
.1f8d	b1 04		lda ($04),y			lda 	(temp0),Y
.1f8f	85 06		sta $06				sta 	temp1
.1f91	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.1f93	c5 06		cmp $06				cmp 	temp1 						;
.1f95	f0 02		beq $1f99			beq 	_SSBOkay
.1f97	b0 2a		bcs $1fc3			bcs 	_SSBReturnNull
.1f99					_SSBOkay:
.1f99	a5 06		lda $06				lda 	temp1 						; get the total length +1
.1f9b	18		clc				clc
.1f9c	69 01		adc #$01			adc 	#1
.1f9e	38		sec				sec
.1f9f	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.1fa1	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.1fa3	90 02		bcc $1fa7			bcc		_SSBTrunc
.1fa5	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1fa7					_SSBTrunc:
.1fa7	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.1fa9	18		clc				clc
.1faa	69 01		adc #$01			adc 	#1 							; add 1
.1fac	20 4b 1f	jsr $1f4b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1faf	20 42 1f	jsr $1f42			jsr 	CopySoftToStack 			; copy that to the stack.
.1fb2	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.1fb4					_SSBCopyLoop:
.1fb4	a5 07		lda $07				lda 	temp1+1 					; done them all
.1fb6	f0 0e		beq $1fc6			beq 	_SSBExit
.1fb8	c6 07		dec $07				dec 	temp1+1
.1fba	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.1fbc	20 71 1f	jsr $1f71			jsr 	WriteSoftString
.1fbf	c8		iny				iny
.1fc0	4c b4 1f	jmp $1fb4			jmp 	_SSBCopyLoop
.1fc3					_SSBReturnNull:
.1fc3	20 ca 1f	jsr $1fca			jsr 	ReturnNull
.1fc6					_SSBExit:
.1fc6	68		pla				pla
.1fc7	a8		tay				tay
.1fc8	68		pla				pla
.1fc9	60		rts				rts
.1fca					ReturnNull:
.1fca	a9 00		lda #$00			lda 	#0 							; clear null string
.1fcc	8d cc 0a	sta $0acc			sta 	NullString
.1fcf	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.1fd1	95 48		sta $48,x			sta 	esInt0,x
.1fd3	a9 0a		lda #$0a			lda 	#NullString >> 8
.1fd5	95 50		sta $50,x			sta 	esInt1,x
.1fd7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0af6					srcStrLen:
>0af6							.fill 	1
.1fd8					StringWrite:
.1fd8	aa		tax				tax
.1fd9	48		pha				pha
.1fda	98		tya				tya
.1fdb	48		pha				pha
.1fdc	20 03 20	jsr $2003			jsr 	CheckOverwriteCurrent
.1fdf	b0 0d		bcs $1fee			bcs		_SWCopyCurrent
.1fe1	20 41 20	jsr $2041			jsr 	RequiresConcretion
.1fe4	90 0e		bcc $1ff4			bcc 	_SWWriteReference
.1fe6	20 a4 20	jsr $20a4			jsr 	CheckSpecialConcretion
.1fe9	b0 09		bcs $1ff4			bcs 	_SWWriteReference
.1feb	20 55 20	jsr $2055			jsr 	AllocateHardMemory
.1fee					_SWCopyCurrent:
.1fee	20 88 20	jsr $2088			jsr 	CopyStringToHardMemory
.1ff1	4c ff 1f	jmp $1fff			jmp 	_SWExit
.1ff4					_SWWriteReference
.1ff4	a0 00		ldy #$00			ldy 	#0
.1ff6	a5 04		lda $04				lda 	temp0
.1ff8	91 06		sta ($06),y			sta 	(temp1),y
.1ffa	c8		iny				iny
.1ffb	a5 05		lda $05				lda 	temp0+1
.1ffd	91 06		sta ($06),y			sta 	(temp1),y
.1fff					_SWExit:
.1fff	68		pla				pla
.2000	a8		tay				tay
.2001	68		pla				pla
.2002	60		rts				rts
.2003					CheckOverwriteCurrent:
.2003	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2005	b5 51		lda $51,x			lda 	esInt1+1,x
.2007	85 05		sta $05				sta 	temp0+1
.2009	b5 49		lda $49,x			lda 	esInt0+1,x
.200b	85 04		sta $04				sta 	temp0
.200d	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.200f	8d f6 0a	sta $0af6			sta 	srcStrLen
.2012	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2014	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2016	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2018	85 07		sta $07				sta 	temp1+1
.201a	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.201c	b1 06		lda ($06),y			lda 	(temp1),y
.201e	c5 0c		cmp $0c				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2020	90 1b		bcc $203d			bcc 	_COCFail 				; in hard memory.
.2022	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2024	b1 06		lda ($06),y			lda 	(temp1),y
.2026	e9 01		sbc #$01			sbc 	#1
.2028	85 08		sta $08				sta 	temp2
.202a	c8		iny				iny
.202b	b1 06		lda ($06),y			lda 	(temp1),y
.202d	e9 00		sbc #$00			sbc 	#0
.202f	85 09		sta $09				sta 	temp2+1
.2031	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2033	b1 08		lda ($08),y			lda 	(temp2),y
.2035	38		sec				sec  							; maximum character capacity.
.2036	e9 02		sbc #$02			sbc 	#2
.2038	cd f6 0a	cmp $0af6			cmp 	srcStrLen 				; if >= the required length
.203b	b0 02		bcs $203f			bcs 	_COCCanReuse
.203d					_COCFail:
.203d	18		clc				clc
.203e	60		rts				rts
.203f					_COCCanReuse:
.203f	38		sec				sec
.2040	60		rts				rts
.2041					RequiresConcretion:
.2041	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2043	c5 0c		cmp $0c				cmp 	highMemory+1 			; if >= high memory it is concreted
.2045	b0 0a		bcs $2051			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2047	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2049	f0 08		beq $2053			beq 	_RCFail 				; if not, this cannot be soft memory.
.204b	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.204d	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.204f	90 02		bcc $2053			bcc 	_RCFail 				; so concreting
.2051					_RCSucceed:
.2051	38		sec				sec
.2052	60		rts				rts
.2053					_RCFail:
.2053	18		clc				clc
.2054	60		rts				rts
.2055					AllocateHardMemory:
.2055	98		tya				tya
.2056	48		pha				pha
.2057	ad f6 0a	lda $0af6			lda 	srcStrLen 				; characters in string
.205a	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.205c	b0 04		bcs $2062			bcs 	_AHMSetMax 				; max out that amount.
.205e	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2060	90 02		bcc $2064			bcc 	_AHMIsOkay
.2062					_AHMSetMax:
.2062	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2064					_AHMIsOkay:
.2064	48		pha				pha
.2065	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2067	38		sec				sec  							; and copy result to TOS as target address.
.2068	65 0b		adc $0b				adc 	highMemory
.206a	85 0b		sta $0b				sta 	highMemory
.206c	a5 0c		lda $0c				lda 	highMemory+1
.206e	69 ff		adc #$ff			adc 	#$FF
.2070	85 0c		sta $0c				sta 	highMemory+1
.2072	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2074	68		pla				pla 							; get the total size of the storage block
.2075	91 0b		sta ($0b),y			sta 	(highMemory),y
.2077	18		clc				clc
.2078	a5 0b		lda $0b				lda		highMemory 				; point the target address to the byte after this.
.207a	69 01		adc #$01			adc 	#1
.207c	91 06		sta ($06),y			sta 	(temp1),y
.207e	a5 0c		lda $0c				lda 	highMemory+1
.2080	69 00		adc #$00			adc 	#0
.2082	c8		iny				iny
.2083	91 06		sta ($06),y			sta 	(temp1),y
.2085	68		pla				pla
.2086	a8		tay				tay
.2087	60		rts				rts
.2088					CopyStringToHardMemory:
.2088	98		tya				tya
.2089	48		pha				pha
.208a	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.208c	b1 06		lda ($06),y			lda 	(temp1),y
.208e	85 08		sta $08				sta 	temp2
.2090	c8		iny				iny
.2091	b1 06		lda ($06),y			lda 	(temp1),y
.2093	85 09		sta $09				sta 	temp2+1
.2095	ac f6 0a	ldy $0af6			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2098					_CSTHMLoop:
.2098	b1 04		lda ($04),y			lda 	(temp0),y
.209a	91 08		sta ($08),y			sta 	(temp2),y
.209c	88		dey				dey
.209d	c0 ff		cpy #$ff			cpy 	#$FF
.209f	d0 f7		bne $2098			bne 	_CSTHMLoop
.20a1	68		pla				pla
.20a2	a8		tay				tay
.20a3	60		rts				rts
.20a4					CheckSpecialConcretion:
.20a4	ad f6 0a	lda $0af6			lda 	srcStrLen 				; check string is null.
.20a7	f0 02		beq $20ab			beq 	_CSCNullString
.20a9	18		clc				clc
.20aa	60		rts				rts
.20ab					_CSCNullString:
.20ab	a9 00		lda #$00			lda 	#0
.20ad	8d cc 0a	sta $0acc			sta 	NullString
.20b0	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.20b2	85 04		sta $04				sta 	temp0
.20b4	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.20b6	85 05		sta $05				sta 	1+(temp0)
.20b8	38		sec				sec
.20b9	60		rts				rts

;******  Return to file: string/string.asm

.20ba					stringHandler:
.20ba	7c bd 20	jmp ($20bd,x)			jmp 	(stringVectors,x)
.20bd					stringVectors:
>20bd	91 1e					.word StringChrs           ; index 0
>20bf	fc 1e					.word StringConcat         ; index 2
>20c1	b3 1e					.word STRCompare           ; index 4
>20c3	84 1f					.word StringSubstring      ; index 6
>20c5	d8 1f					.word StringWrite          ; index 8

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.asm

.20c7					tokeniserHandler:
.20c7	7c ca 20	jmp ($20ca,x)			jmp 	(tokeniserVectors,x)
.20ca					tokeniserVectors:

;******  Return to file: basic.asm


;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0af7					varHash:
>0af7							.fill	1
.0af8					varType:
>0af8							.fill 	1
.0af9					varEnd:
>0af9							.fill 	1
.007c					hashList:
>007c							.fill 	2
.20ca					AccessVariable:
.20ca	aa		tax				tax 								; stack in X
.20cb	c8		iny				iny
.20cc	b1 02		lda ($02),y			lda 	(codePtr),y
.20ce	88		dey				dey
.20cf	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.20d1	d0 15		bne $20e8			bne 	_AVLong
.20d3	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.20d5	38		sec				sec 	 							; make it 0-25
.20d6	e9 01		sbc #$01			sbc 	#1
.20d8	0a		asl a				asl 	a 							; x 4 is LSB of address
.20d9	0a		asl a				asl 	a
.20da	95 48		sta $48,x			sta 	esInt0,x
.20dc	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.20de	95 50		sta $50,x			sta 	esInt1,x
.20e0	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.20e2	95 40		sta $40,x			sta 	esType,x
.20e4	c8		iny				iny 								; skip over the variable reference in the code.
.20e5	c8		iny				iny
.20e6	8a		txa				txa 								; stack in A to return.
.20e7	60		rts				rts
.20e8					_AVLong:
.20e8	8a		txa				txa
.20e9	48		pha				pha
.20ea	20 28 21	jsr $2128			jsr 	AccessSetup 				; set up the basic stuff.
.20ed	20 cd 21	jsr $21cd			jsr 	FindVariable 				; does the variable exist already
.20f0	b0 0e		bcs $2100			bcs 	_AVFound
.20f2	ad f8 0a	lda $0af8			lda 	varType 					; is the variable type an array
.20f5	4a		lsr a				lsr 	a
.20f6	90 05		bcc $20fd			bcc 	_AVCanCreate
.20f8	a2 14		ldx #$14			ldx 	#ErrorID_noauto
.20fa	20 82 1e	jsr $1e82			jsr 	ErrorHandler
.20fd					_AVCanCreate:
.20fd	20 65 21	jsr $2165			jsr 	CreateVariable 				; no, create it.
.2100					_AVFound:
.2100	68		pla				pla
.2101	aa		tax				tax
.2102	18		clc				clc 								; copy temp0 (variable record address)
.2103	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.2105	69 05		adc #$05			adc 	#5
.2107	95 48		sta $48,x			sta 	esInt0,x
.2109	a5 05		lda $05				lda 	temp0+1
.210b	69 00		adc #$00			adc 	#0
.210d	95 50		sta $50,x			sta 	esInt1,x
.210f	a9 00		lda #$00			lda 	#0
.2111	95 58		sta $58,x			sta 	esInt2,x
.2113	95 60		sta $60,x			sta 	esInt3,x
.2115	ac f8 0a	ldy $0af8			ldy 	varType 					; get the type ID from the type.
.2118	b9 e8 20	lda $20e8,y			lda 	_AVTypeTable-$3A,y
.211b	95 40		sta $40,x			sta 	esType,x
.211d	ac f9 0a	ldy $0af9			ldy 	varEnd 						; restore Y
.2120	8a		txa				txa 								; return stack in A and return
.2121	60		rts				rts
.2122					_AVTypeTable:
>2122	80 80						.byte 	$80,$80						; integer
>2124	c0 c0						.byte 	$C0,$C0 					; string
>2126	81 81						.byte 	$81,$81 					; float
.2128					AccessSetup:
.2128	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.212a	8d f7 0a	sta $0af7			sta 	varHash
.212d	98		tya				tya
.212e	48		pha				pha
.212f	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.2131	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.2133	b0 0b		bcs $2140			bcs 	_ASComplete
.2135	18		clc				clc 								; add to the hash. Might improve this.
.2136	6d f7 0a	adc $0af7			adc 	varHash
.2139	8d f7 0a	sta $0af7			sta 	varHash
.213c	c8		iny				iny 								; next character
.213d	4c 2f 21	jmp $212f			jmp 	_ASLoop
.2140					_ASComplete:
.2140	8d f8 0a	sta $0af8			sta 	varType 					; save variable type byte
.2143	c8		iny				iny
.2144	8c f9 0a	sty $0af9			sty 	varEnd 						; save the ending position.
.2147	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.2148	e9 3a		sbc #$3a			sbc 	#$3A
.214a	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.214b	0a		asl a				asl 	a
.214c	0a		asl a				asl 	a
.214d	0a		asl a				asl 	a 							; 2 bytes/word
.214e	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.2150	ad f7 0a	lda $0af7			lda 	varHash 					; get hash
.2153	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.2155	0a		asl a				asl  	a 							; x 2 (for word) and CC
.2156	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.2158	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.215a	85 7c		sta $7c				sta 	hashList
.215c	a9 0a		lda #$0a			lda 	#hashTables >> 8
.215e	69 00		adc #$00			adc 	#0
.2160	85 7d		sta $7d				sta 	hashList+1
.2162	68		pla				pla
.2163	a8		tay				tay
.2164	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2165					CreateVariable:
.2165	98		tya				tya 								; push Y on the stack twice.
.2166	48		pha				pha
.2167	48		pha				pha
.2168	ae f8 0a	ldx $0af8			ldx 	varType 					; get var type 0-5
.216b	bd 8d 21	lda $218d,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.216e	48		pha				pha 								; save length
.216f	a8		tay				tay 								; put into Y.
.2170	a5 0d		lda $0d				lda 	lowMemory 					; set low Memory ptr to temp0
.2172	85 04		sta $04				sta 	temp0
.2174	a5 0e		lda $0e				lda 	lowMemory+1
.2176	85 05		sta $05				sta 	temp0+1
.2178	68		pla				pla 								; get length
.2179	20 68 10	jsr $1068			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.217c					_CVClear:
.217c	88		dey				dey
.217d	a9 00		lda #$00			lda 	#0
.217f	91 04		sta ($04),y			sta 	(temp0),y
.2181	c0 04		cpy #$04			cpy 	#4
.2183	d0 f7		bne $217c			bne 	_CVClear
.2185	ad f7 0a	lda $0af7			lda 	varHash 					; store hash at offset 4.
.2188	91 04		sta ($04),y			sta 	(temp0),y
.218a	68		pla				pla 								; offset, work out where the variable name is.
.218b	18		clc				clc
.218c	65 02		adc $02				adc 	codePtr
.218e	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2190	91 04		sta ($04),y			sta 	(temp0),y
.2192	a5 03		lda $03				lda 	codePtr+1
.2194	69 00		adc #$00			adc 	#0
.2196	c8		iny				iny
.2197	91 04		sta ($04),y			sta 	(temp0),y
.2199	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.219b	b1 7c		lda ($7c),y			lda 	(hashList),y
.219d	91 04		sta ($04),y			sta 	(temp0),y
.219f	c8		iny				iny
.21a0	b1 7c		lda ($7c),y			lda 	(hashList),y
.21a2	91 04		sta ($04),y			sta 	(temp0),y
.21a4	a5 05		lda $05				lda 	temp0+1 					; set new link
.21a6	91 7c		sta ($7c),y			sta 	(hashList),y
.21a8	88		dey				dey
.21a9	a5 04		lda $04				lda 	temp0
.21ab	91 7c		sta ($7c),y			sta 	(hashList),y
.21ad	ad f8 0a	lda $0af8			lda 	varType 					; is it a string ($3C)
.21b0	c9 3c		cmp #$3c			cmp 	#$3C
.21b2	d0 10		bne $21c4			bne 	_CVNoDefaultNull
.21b4	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.21b6	8d cc 0a	sta $0acc			sta 	NullString
.21b9	a0 05		ldy #$05			ldy 	#5
.21bb	a9 cc		lda #$cc			lda 	#NullString & $FF
.21bd	91 04		sta ($04),y			sta 	(temp0),y
.21bf	a9 0a		lda #$0a			lda 	#NullString >> 8
.21c1	c8		iny				iny
.21c2	91 04		sta ($04),y			sta 	(temp0),y
.21c4					_CVNoDefaultNull:
.21c4	68		pla				pla
.21c5	a8		tay				tay
.21c6	60		rts				rts
>21c7	09 09				_CVSize:.byte 	5+4,5+4 					; <storage for integer>
>21c9	07 07						.byte 	5+2,5+2 					; <storage for string>
>21cb	0b 0b						.byte 	5+6,5+6 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.21cd					FindVariable:
.21cd	98		tya				tya
.21ce	48		pha				pha
.21cf	98		tya				tya 								; point temp2 to the actual name.
.21d0	18		clc				clc
.21d1	65 02		adc $02				adc 	codePtr
.21d3	85 08		sta $08				sta 	temp2
.21d5	a5 03		lda $03				lda 	codePtr+1
.21d7	69 00		adc #$00			adc 	#0
.21d9	85 09		sta $09				sta 	temp2+1
.21db	a0 00		ldy #$00			ldy 	#0
.21dd	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.21df	85 04		sta $04				sta 	temp0
.21e1	a5 7d		lda $7d				lda 	hashList+1
.21e3	85 05		sta $05				sta 	temp0+1
.21e5	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.21e7	b1 04		lda ($04),y			lda 	(temp0),y
.21e9	f0 2c		beq $2217			beq 	_FVFail
.21eb	aa		tax				tax
.21ec	88		dey				dey		 							; get LSB
.21ed	b1 04		lda ($04),y			lda 	(temp0),y
.21ef	85 04		sta $04				sta 	temp0 						; update pointer.
.21f1	86 05		stx $05				stx 	temp0+1
.21f3	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.21f5	b1 04		lda ($04),y			lda 	(temp0),y
.21f7	cd f7 0a	cmp $0af7			cmp 	varHash
.21fa	d0 e9		bne $21e5			bne 	_FVNext 					; if not, no point in checking the name.
.21fc	88		dey				dey 								; copy name pointer to temp1.
.21fd	b1 04		lda ($04),y			lda 	(temp0),y
.21ff	85 07		sta $07				sta 	temp1+1
.2201	88		dey				dey
.2202	b1 04		lda ($04),y			lda 	(temp0),y
.2204	85 06		sta $06				sta 	temp1
.2206	a0 00		ldy #$00			ldy 	#0
.2208					_FVCheck:
.2208	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.220a	d1 08		cmp ($08),y			cmp 	(temp2),y
.220c	d0 d7		bne $21e5			bne 	_FVNext		 				; fail if different.
.220e	c8		iny				iny
.220f	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2211	90 f5		bcc $2208			bcc 	_FVCheck
.2213	68		pla				pla
.2214	a8		tay				tay
.2215	38		sec				sec
.2216	60		rts				rts
.2217					_FVFail:
.2217	68		pla				pla
.2218	a8		tay				tay
.2219	18		clc				clc
.221a	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.221b					HashTableReset:
.221b	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.221d	a9 00		lda #$00			lda 	#0
.221f					_HTRClear:
.221f	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2222	ca		dex				dex
.2223	d0 fa		bne $221f			bne 	_HTRClear
.2225	60		rts				rts

;******  Return to file: variable/variable.asm

.2226					variableHandler:
.2226	7c 29 22	jmp ($2229,x)			jmp 	(variableVectors,x)
.2229					variableVectors:
>2229	ca 20					.word AccessVariable       ; index 0
>222b	1b 22					.word HashTableReset       ; index 2

;******  Return to file: basic.asm


;******  End of listing
