
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Fri Apr 02 07:44:45 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_TEXT                     = $90 ; text
=$91					TKW_PLOT                     = $91 ; plot
=$92					TKW_LINE                     = $92 ; line
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	a7 43						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4c		lda #$4c			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 7c 25	jsr $257c		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 7c 25	jsr $257c		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 18 3c	jsr $3c18		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 d5 3e	jsr $3ed5		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 58 47	jsr $4758		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 29 4b	jsr $4b29		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 58 47	jsr $4758		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 18 3c	jsr $3c18		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 18 3c	jsr $3c18		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 18 3c	jsr $3c18		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 18 3c	jsr $3c18		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 29 4b	jsr $4b29		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 18 3c	jsr $3c18		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 7c 25	jsr $257c		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 94 18	jmp ($1894,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c f7 20	jmp $20f7			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	29 22					.word	Command_VPoke            ; $86 vpoke
>1888	2c 22					.word	Command_VDoke            ; $87 vdoke
>188a	01 22					.word	Command_VLoad            ; $88 vload
>188c	09 21					.word	CommandMode              ; $89 mode
>188e	ca 21					.word	CommandPalette           ; $8a palette
>1890	f4 1e					.word	CommandSprite            ; $8b sprite
>1892	c6 21					.word	CommandClg               ; $8c clg
>1894	c3 1a					.word	Command_Rect             ; $8d rect
>1896	cb 1a					.word	Command_Frame            ; $8e frame
>1898	be 2f					.word	Unimplemented            ; $8f draw
>189a	be 2f					.word	Unimplemented            ; $90 text
>189c	b0 1a					.word	Command_Plot             ; $91 plot
>189e	84 19					.word	Command_Line             ; $92 line

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a0					Group3Vectors:
>18a0	75 22					.word	Command_VPeek            ; $86 vpeek(
>18a2	78 22					.word	Command_VDeek            ; $87 vdeek(
>18a4	c7 20					.word	Sprite_GetX              ; $88 sprite.x(
>18a6	ca 20					.word	Sprite_GetY              ; $89 sprite.y(
>18a8	37 1e					.word	FunctionCollide          ; $8a hit(
>18aa	af 1d					.word	Unary_JoyX               ; $8b joy.x(
>18ac	b2 1d					.word	Unary_JoyY               ; $8c joy.y(
>18ae	ed 1d					.word	Unary_JButton            ; $8d joy.b(
>18b0	82 1d					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b2					XEvaluateInteger:
.18b2	8a		txa				txa
.18b3	a2 0a		ldx #$0a		ldx	#10
.18b5	20 18 3c	jsr $3c18		jsr	mainHandler
.18b8	aa		tax				tax
.18b9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gModifiers:
.0bfa					gInk:
>0bfa							.fill 	1
.0bfb					gPaper:
>0bfb							.fill 	1
.0bfc					gSize:
>0bfc							.fill 	1
.0bfd					gImage:
>0bfd							.fill 	1
.0bfe					gFlip:
>0bfe							.fill 	1
.0bff					gWordHandler:
>0bff							.fill 	2
.0c01					gEndStorage:
.18ba					GResetStorage:
.18ba	8a		txa				txa
.18bb	48		pha				pha
.18bc	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18be	a9 00		lda #$00			lda 	#0
.18c0					_GRSLoop:
.18c0	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c3	ca		dex				dex
.18c4	10 fa		bpl $18c0			bpl 	_GRSLoop
.18c6	ee fa 0b	inc $0bfa			inc 	gInk 						; make ink 1.
.18c9	68		pla				pla
.18ca	aa		tax				tax
.18cb	60		rts				rts
.18cc					GHandler:
.18cc	8e 00 0c	stx $0c00			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18cf	8d ff 0b	sta $0bff			sta 	gWordHandler
.18d2	88		dey				dey 								; predecrement
.18d3					_GHLoopNext:
.18d3	c8		iny				iny									; advance one character
.18d4					_GHLoop:
.18d4	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18d6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d8	f0 f9		beq $18d3			beq 	_GHLoopNext
.18da	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18dc	f0 58		beq $1936			beq 	_GHExit
.18de	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18e0	f0 54		beq $1936			beq 	_GHExit
.18e2	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e4	f0 3f		beq $1925			beq 	_GHCallHandler 				; update post & call the handler
.18e6	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e8	f0 3b		beq $1925			beq 	_GHCallHandler
.18ea	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18ec	f0 10		beq $18fe			beq 	_GHCPairSkip
.18ee	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18f0					_GHCheckTokens:
.18f0	b1 28		lda ($28),y			lda 	(codePtr),y
.18f2	dd 37 19	cmp $1937,x			cmp 	_GHTokenTable,x
.18f5	f0 0e		beq $1905			beq 	_GHFoundToken
.18f7	e8		inx				inx
.18f8	bd 37 19	lda $1937,x			lda 	_GHTokenTable,x
.18fb	d0 f3		bne $18f0			bne 	_GHCheckTokens
.18fd	88		dey				dey
.18fe					_GHCPairSkip:
.18fe	c8		iny				iny
.18ff					_GHCPair:
.18ff	20 3d 19	jsr $193d			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1902	4c d4 18	jmp $18d4			jmp 	_GHLoop
.1905					_GHFoundToken:
.1905	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1906	8a		txa				txa
.1907	48		pha				pha
.1908	a9 00		lda #$00			lda 	#0 							; evaluate byte
.190a	a2 0c		ldx #$0c		ldx	#12
.190c	20 18 3c	jsr $3c18		jsr	mainHandler
.190f	68		pla				pla
.1910	aa		tax				tax
.1911	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1913	9d fa 0b	sta $0bfa,x			sta 	gModifiers,x 				; update the modifiers
.1916	ad fa 0b	lda $0bfa			lda 	gInk 						; update driver ink and paper.
.1919	20 6c 1d	jsr $1d6c			jsr 	gdSetInk
.191c	ad fb 0b	lda $0bfb			lda 	gPaper
.191f	20 70 1d	jsr $1d70			jsr 	gdSetPaper
.1922	4c d4 18	jmp $18d4			jmp 	_GHLoop 					; and loop back
.1925					_GHCallHandler:
.1925	c8		iny				iny 								; consume AT or TO.
.1926	20 3d 19	jsr $193d			jsr 	GHMakeCurrent 				; update the coordinates.
.1929	98		tya				tya
.192a	48		pha				pha
.192b	20 33 19	jsr $1933			jsr 	_GHCallHandlerCode 			; call the handler code
.192e	68		pla				pla
.192f	a8		tay				tay
.1930	4c d4 18	jmp $18d4			jmp 	_GHLoop 					; and loop round.
.1933					_GHCallHandlerCode:
.1933	6c ff 0b	jmp ($0bff)			jmp 	(gWordHandler)
.1936					_GHExit:
.1936	60		rts				rts
.1937					_GHTokenTable:
>1937	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>193c	00						.byte 	0
.193d					GHMakeCurrent:
.193d	8a		txa				txa
.193e	48		pha				pha
.193f	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1941	20 51 19	jsr $1951			jsr 	_GHMCDoIt
.1944	a2 02		ldx #$02		ldx	#2
.1946	20 18 3c	jsr $3c18		jsr	mainHandler
.1949	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.194b	20 51 19	jsr $1951			jsr 	_GHMCDoIt
.194e	68		pla				pla
.194f	aa		tax				tax
.1950	60		rts				rts
.1951					_GHMCDoIt:
.1951	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1954	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1957	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.195a	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.195d	8a		txa				txa
.195e	48		pha				pha
.195f	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1961	a2 0a		ldx #$0a		ldx	#10
.1963	20 18 3c	jsr $3c18		jsr	mainHandler
.1966	68		pla				pla
.1967	aa		tax				tax
.1968	a5 98		lda $98				lda 	esInt0
.196a	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.196d	9d ee 0b	sta $0bee,x			sta 	gX2,x
.1970	a5 a0		lda $a0				lda 	esInt1
.1972	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1975	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.1978	a5 a8		lda $a8				lda 	esInt2 						; check reasonable range.
.197a	05 b0		ora $b0				ora 	esInt3
.197c	d0 01		bne $197f			bne 	_GMHCRange
.197e	60		rts				rts
.197f					_GMHCRange:
.197f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1981	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c01					gdySign:
>0c01							.fill 	1
.1984					Command_Line:
.1984	a9 8c		lda #$8c			lda 	#LineHandler & $FF
.1986	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.1988	20 cc 18	jsr $18cc			jsr 	GHandler
.198b	60		rts				rts
.198c					LineHandler:
.198c	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.198e	a0 04		ldy #$04			ldy 	#gX2-gX1
.1990	20 86 1b	jsr $1b86			jsr 	CompareCoordsEq
.1993	f0 09		beq $199e			beq 	_LHRectCode
.1995	a2 02		ldx #$02			ldx 	#gY1-gX1
.1997	a0 06		ldy #$06			ldy 	#gY2-gX1
.1999	20 86 1b	jsr $1b86			jsr 	CompareCoordsEq
.199c	d0 03		bne $19a1			bne 	_LHLineDrawer
.199e					_LHRectCode:
.199e	4c d7 1a	jmp $1ad7			jmp 	RectHandler
.19a1					_LHLineDrawer:
.19a1	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19a3	a0 04		ldy #$04			ldy 	#gX2-gX1
.19a5	20 71 1b	jsr $1b71			jsr 	CompareCoords
.19a8	90 0a		bcc $19b4			bcc 	_LHNoSwap
.19aa	20 b9 1b	jsr $1bb9			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19ad	a2 02		ldx #$02			ldx 	#gY1-gX1
.19af	a0 06		ldy #$06			ldy 	#gY2-gX1
.19b1	20 b9 1b	jsr $1bb9			jsr 	GSwapCoords
.19b4					_LHNoSwap:
.19b4	20 de 19	jsr $19de			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19b7	a0 00		ldy #$00			ldy 	#gX1-gX1
.19b9	20 5b 1b	jsr $1b5b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19bc	b0 15		bcs $19d3			bcs 	_LHExit 					; line off screen.
.19be					_LHDrawLoop:
.19be	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19c0	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c2	20 86 1b	jsr $1b86			jsr 	CompareCoordsEq
.19c5	d0 0d		bne $19d4			bne 	_LHNextPixel
.19c7	a2 06		ldx #$06			ldx 	#gY2-gX1
.19c9	a0 06		ldy #$06			ldy 	#gY2-gX1
.19cb	20 86 1b	jsr $1b86			jsr 	CompareCoordsEq
.19ce	d0 04		bne $19d4			bne 	_LHNextPixel
.19d0	20 ca 1c	jsr $1cca			jsr 	gdPlotInk 					; plot the last pixel.
.19d3					_LHExit:
.19d3	60		rts				rts
.19d4					_LHNextPixel:
.19d4	20 ca 1c	jsr $1cca			jsr 	gdPlotInk 					; plot the pixel.
.19d7	20 32 1a	jsr $1a32			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19da	90 e2		bcc $19be			bcc  	_LHDrawLoop 				; and loop back if okay
.19dc	b0 f5		bcs $19d3			bcs 	_LHExit 					; fail if off screen
.19de					BresenhamInitialise:
.19de	38		sec				sec
.19df	ad ee 0b	lda $0bee			lda 	gX2
.19e2	ed ea 0b	sbc $0bea			sbc 	gX1
.19e5	8d f6 0b	sta $0bf6			sta 	gdX
.19e8	ad ef 0b	lda $0bef			lda 	gX2+1
.19eb	ed eb 0b	sbc $0beb			sbc 	gX1+1
.19ee	8d f7 0b	sta $0bf7			sta 	gdX+1
.19f1	38		sec				sec
.19f2	ad ec 0b	lda $0bec			lda 	gY1
.19f5	ed f0 0b	sbc $0bf0			sbc 	gY2
.19f8	8d f8 0b	sta $0bf8			sta 	gdy
.19fb	ad ed 0b	lda $0bed			lda 	gY1+1
.19fe	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.1a01	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a04	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a07	8d 01 0c	sta $0c01			sta 	gdysign
.1a0a	30 12		bmi $1a1e			bmi 	_BINormal
.1a0c	38		sec				sec
.1a0d	a9 00		lda #$00			lda 	#0
.1a0f	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a12	8d f8 0b	sta $0bf8			sta 	gdy
.1a15	a9 00		lda #$00			lda 	#0
.1a17	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a1a	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a1d	60		rts				rts
.1a1e					_BINormal:
.1a1e	18		clc				clc
.1a1f	ad f6 0b	lda $0bf6			lda 	gdx
.1a22	6d f8 0b	adc $0bf8			adc 	gdy
.1a25	8d f2 0b	sta $0bf2			sta 	gError
.1a28	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a2b	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a2e	8d f3 0b	sta $0bf3			sta 	gError+1
.1a31	60		rts				rts
.1a32					BresenhamIteration:
.1a32	ad f2 0b	lda $0bf2			lda 	gError
.1a35	0a		asl a				asl 	a
.1a36	8d f4 0b	sta $0bf4			sta 	g2Error
.1a39	ad f3 0b	lda $0bf3			lda 	gError+1
.1a3c	2a		rol a				rol 	a
.1a3d	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a40	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a42	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a44	20 7e 1b	jsr $1b7e			jsr 	CompareCoordsSigned
.1a47	30 05		bmi $1a4e			bmi 	_BINoE2DY
.1a49	20 5e 1a	jsr $1a5e			jsr 	BresenhamE2GEDY
.1a4c	b0 0f		bcs $1a5d			bcs 	_BIFail
.1a4e					_BINoE2DY:
.1a4e	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a50	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a52	20 7e 1b	jsr $1b7e			jsr 	CompareCoordsSigned
.1a55	30 05		bmi $1a5c			bmi 	_BINoDXE2
.1a57	20 7d 1a	jsr $1a7d			jsr 	BresenhamDXGEE2
.1a5a	b0 01		bcs $1a5d			bcs 	_BIFail
.1a5c					_BINoDXE2:
.1a5c	18		clc				clc
.1a5d					_BIFail:
.1a5d	60		rts				rts
.1a5e					BresenhamE2GEDY:
.1a5e	18		clc				clc
.1a5f	ad f2 0b	lda $0bf2			lda 	gError
.1a62	6d f8 0b	adc $0bf8			adc 	gdy
.1a65	8d f2 0b	sta $0bf2			sta 	gError
.1a68	ad f3 0b	lda $0bf3			lda 	gError+1
.1a6b	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a6e	8d f3 0b	sta $0bf3			sta 	gError+1
.1a71	ee ea 0b	inc $0bea			inc 	gX1
.1a74	d0 03		bne $1a79			bne 	_BE2Skip
.1a76	ee eb 0b	inc $0beb			inc 	gX1+1
.1a79					_BE2Skip:
.1a79	20 d6 1b	jsr $1bd6			jsr 	gdMvRight
.1a7c	60		rts				rts
.1a7d					BresenhamDXGEE2:
.1a7d	18		clc				clc
.1a7e	ad f2 0b	lda $0bf2			lda 	gError
.1a81	6d f6 0b	adc $0bf6			adc 	gdx
.1a84	8d f2 0b	sta $0bf2			sta 	gError
.1a87	ad f3 0b	lda $0bf3			lda 	gError+1
.1a8a	6d f7 0b	adc $0bf7			adc 	gdx+1
.1a8d	8d f3 0b	sta $0bf3			sta 	gError+1
.1a90	ad 01 0c	lda $0c01			lda 	gdySign
.1a93	10 0c		bpl $1aa1			bpl 	_BEDXInvertY
.1a95	ee ec 0b	inc $0bec			inc 	gY1
.1a98	d0 03		bne $1a9d			bne 	_BEDXSkip
.1a9a	ee ed 0b	inc $0bed			inc 	gY1+1
.1a9d					_BEDXSkip:
.1a9d	20 26 1c	jsr $1c26			jsr 	gdMvDown
.1aa0	60		rts				rts
.1aa1					_BEDXInvertY:
.1aa1	ad ec 0b	lda $0bec			lda 	gY1
.1aa4	d0 03		bne $1aa9			bne 	_BEDXSkip2
.1aa6	ce ed 0b	dec $0bed			dec 	gY1+1
.1aa9					_BEDXSkip2:
.1aa9	ce ec 0b	dec $0bec			dec 	gY1
.1aac	20 ff 1b	jsr $1bff			jsr 	gdMvUp
.1aaf	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1ab0					Command_Plot:
.1ab0	a9 b8		lda #$b8			lda 	#PlotHandler & $FF
.1ab2	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ab4	20 cc 18	jsr $18cc			jsr 	GHandler
.1ab7	60		rts				rts
.1ab8					PlotHandler:
.1ab8	a0 00		ldy #$00			ldy 	#gX1-gX1
.1aba	20 5b 1b	jsr $1b5b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1abd	b0 03		bcs $1ac2			bcs 	_PHExit 					; off screen, return with CS.
.1abf	20 ca 1c	jsr $1cca			jsr 	gdPlotInk 					; pixel in Ink.
.1ac2	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c02					frameFlag:
>0c02							.fill 	1
.1ac3					Command_Rect:
.1ac3	a9 d7		lda #$d7			lda 	#RectHandler & $FF
.1ac5	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1ac7	20 cc 18	jsr $18cc			jsr 	GHandler
.1aca	60		rts				rts
.1acb					Command_Frame:
.1acb	a9 d3		lda #$d3			lda 	#FrameHandler & $FF
.1acd	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1acf	20 cc 18	jsr $18cc			jsr 	GHandler
.1ad2	60		rts				rts
.1ad3					FrameHandler:
.1ad3	a9 01		lda #$01			lda 	#1
.1ad5	d0 02		bne $1ad9			bne 	RectHandler+2
.1ad7					RectHandler:
.1ad7	a9 00		lda #$00			lda 	#0
.1ad9	8d 02 0c	sta $0c02			sta 	frameFlag
.1adc	20 95 1b	jsr $1b95			jsr 	BoxSort 					; sort so topleft/bottom right
.1adf	20 0a 1b	jsr $1b0a			jsr 	DrawBoxPart 				; solid first line
.1ae2	b0 25		bcs $1b09			bcs 	_FHExit
.1ae4					_FHLoop:
.1ae4	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1ae6	a0 06		ldy #$06			ldy 	#gY2-gX1
.1ae8	20 71 1b	jsr $1b71			jsr 	CompareCoords
.1aeb	b0 19		bcs $1b06			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1aed	ad 02 0c	lda $0c02			lda 	frameFlag 					; identify solid or frame ?
.1af0	f0 06		beq $1af8			beq 	_FHIsSolidRect
.1af2	20 26 1b	jsr $1b26			jsr 	DrawBoxEnds
.1af5	4c fb 1a	jmp $1afb			jmp 	_FHNext
.1af8					_FHIsSolidRect:
.1af8	20 0a 1b	jsr $1b0a			jsr 	DrawBoxPart
.1afb					_FHNext:
.1afb	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1afe	d0 e4		bne $1ae4			bne 	_FHLoop
.1b00	ee ed 0b	inc $0bed			inc 	gY1+1
.1b03	4c e4 1a	jmp $1ae4			jmp 	_FHLoop
.1b06					_FHLastLine:
.1b06	20 0a 1b	jsr $1b0a			jsr 	DrawBoxPart 				; solid last line whatever
.1b09					_FHExit:
.1b09	60		rts				rts
.1b0a					DrawBoxPart:
.1b0a	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b0c	20 5b 1b	jsr $1b5b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b0f	b0 14		bcs $1b25			bcs 	_DBPExit 					; off screen, return with CS.
.1b11	38		sec				sec 								; calculate line length => temp0
.1b12	ad ee 0b	lda $0bee			lda 	gX2
.1b15	ed ea 0b	sbc $0bea			sbc 	gX1
.1b18	48		pha				pha
.1b19	ad ef 0b	lda $0bef			lda 	gX2+1
.1b1c	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b1f	aa		tax				tax
.1b20	68		pla				pla 								; line length in XA.
.1b21	20 42 1b	jsr $1b42			jsr 	DrawHorizontalLine
.1b24	18		clc				clc
.1b25					_DBPExit:
.1b25	60		rts				rts
.1b26					DrawBoxEnds:
.1b26	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b28	20 5b 1b	jsr $1b5b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b2b	b0 14		bcs $1b41			bcs 	_DBEExit 					; off screen, return with CS.
.1b2d	20 ca 1c	jsr $1cca			jsr 	gdPlotInk 					; LH end.
.1b30	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b33	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b36	20 74 1d	jsr $1d74			jsr 	gdSetX
.1b39	20 55 1c	jsr $1c55			jsr 	gdUpdatePixelOffset 		; update position.
.1b3c	b0 03		bcs $1b41			bcs 	_DBEExit 					; off screen, return with CS.
.1b3e	20 ca 1c	jsr $1cca			jsr 	gdPlotInk 					; RH end.
.1b41					_DBEExit:
.1b41	60		rts				rts
.1b42					DrawHorizontalLine:
.1b42	86 2d		stx $2d				stx 	temp1+1
.1b44	85 2c		sta $2c				sta 	temp1
.1b46					_DVLLoop:
.1b46	20 ca 1c	jsr $1cca			jsr 	gdPlotInk
.1b49	20 d6 1b	jsr $1bd6			jsr		gdMvRight
.1b4c	b0 0c		bcs $1b5a			bcs 	_DVLExit
.1b4e	a5 2c		lda $2c				lda 	temp1
.1b50	d0 02		bne $1b54			bne 	_DVLNoBorrow
.1b52	c6 2d		dec $2d				dec 	temp1+1
.1b54					_DVLNoBorrow:
.1b54	c6 2c		dec $2c				dec 	temp1
.1b56	a5 2d		lda $2d				lda 	temp1+1
.1b58	10 ec		bpl $1b46			bpl 	_DVLLoop
.1b5a					_DVLExit:
.1b5a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1b5b					SetupXY:
.1b5b	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1b5e	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1b61	20 74 1d	jsr $1d74			jsr 	gdSetX
.1b64	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1b67	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1b6a	20 7b 1d	jsr $1d7b			jsr 	gdSetY
.1b6d	20 55 1c	jsr $1c55			jsr 	gdUpdatePixelOffset
.1b70	60		rts				rts
.1b71					CompareCoords:
.1b71	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1b74	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1b77	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1b7a	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1b7d	60		rts				rts
.1b7e					CompareCoordsSigned:
.1b7e	20 71 1b	jsr $1b71			jsr 	CompareCoords
.1b81	50 02		bvc $1b85			bvc 	_CCSExit
.1b83	49 80		eor #$80			eor 	#$80
.1b85					_CCSExit:
.1b85	60		rts				rts
.1b86					CompareCoordsEq:
.1b86	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1b89	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1b8c	d0 06		bne $1b94			bne 	_CCEExit
.1b8e	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1b91	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1b94					_CCEExit:
.1b94	60		rts				rts
.1b95					BoxSort:
.1b95	a2 00		ldx #$00			ldx 	#gx1-gx1
.1b97	a0 04		ldy #$04			ldy 	#gx2-gx1
.1b99	20 aa 1b	jsr $1baa			jsr 	GCompareCoords
.1b9c	20 b7 1b	jsr $1bb7			jsr 	GSortMinMaxCoords
.1b9f	a2 02		ldx #$02			ldx 	#gy1-gx1
.1ba1	a0 06		ldy #$06			ldy 	#gy2-gx1
.1ba3	20 aa 1b	jsr $1baa			jsr 	GCompareCoords
.1ba6	20 b7 1b	jsr $1bb7			jsr 	GSortMinMaxCoords
.1ba9	60		rts				rts
.1baa					GCompareCoords:
.1baa	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1bad	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1bb0	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1bb3	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1bb6	60		rts				rts
.1bb7					GSortMinMaxCoords:
.1bb7	90 1c		bcc $1bd5			bcc 	GSMMCExit
.1bb9					GSwapCoords:
.1bb9	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1bbc	48		pha				pha
.1bbd	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1bc0	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1bc3	68		pla				pla
.1bc4	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1bc7	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1bca	48		pha				pha
.1bcb	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1bce	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1bd1	68		pla				pla
.1bd2	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1bd5					GSMMCExit:
.1bd5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1bd6					gdMvRight:
.1bd6	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1bd9	d0 08		bne $1be3			bne 	_gdMR0
.1bdb	ee 21 9f	inc $9f21			inc 	$9F21
.1bde	d0 03		bne $1be3			bne 	_gdMR0
.1be0	ee 22 9f	inc $9f22			inc 	$9F22
.1be3					_gdMR0:
.1be3	ee 09 0c	inc $0c09			inc 	gdXPos
.1be6	d0 03		bne $1beb			bne 	_gdMR1
.1be8	ee 0a 0c	inc $0c0a			inc 	gdXPos+1
.1beb					_gdMR1:
.1beb	ad 0a 0c	lda $0c0a			lda 	gdXPos+1		 			; check MSB
.1bee	f0 0b		beq $1bfb			beq 	gdMOnScreen
.1bf0	c9 02		cmp #$02			cmp 	#2
.1bf2	b0 09		bcs $1bfd			bcs 	gdmOffScreen
.1bf4	ad 09 0c	lda $0c09			lda 	gdXPos 						; $01xx check < $140
.1bf7	c9 40		cmp #$40			cmp 	#$40
.1bf9	b0 02		bcs $1bfd			bcs 	gdmOffScreen
.1bfb					gdmOnScreen:
.1bfb	18		clc				clc
.1bfc	60		rts				rts
.1bfd					gdmOffScreen:
.1bfd	38		sec				sec
.1bfe	60		rts				rts
.1bff					gdMvUp:
.1bff	ad 0b 0c	lda $0c0b			lda 	gdYPos 						; decrement Y Pos
.1c02	d0 03		bne $1c07			bne 	_gdMU1
.1c04	ce 0c 0c	dec $0c0c			dec 	gdYPos+1
.1c07	ce 0b 0c	dec $0c0b	_gdMU1:	dec 	gdYPos
.1c0a	38		sec				sec 								; adjust position by -320
.1c0b	ad 20 9f	lda $9f20			lda 	$9F20
.1c0e	e9 40		sbc #$40			sbc 	#64
.1c10	8d 20 9f	sta $9f20			sta 	$9F20
.1c13	ad 21 9f	lda $9f21			lda 	$9F21
.1c16	e9 01		sbc #$01			sbc 	#1
.1c18	8d 21 9f	sta $9f21			sta 	$9F21
.1c1b	ad 22 9f	lda $9f22			lda 	$9F22
.1c1e	e9 00		sbc #$00			sbc 	#0
.1c20	8d 22 9f	sta $9f22			sta 	$9F22
.1c23	4c 47 1c	jmp $1c47			jmp 	gdCheckYRange
.1c26					gdMvDown:
.1c26	ee 0b 0c	inc $0c0b			inc 	gdYPos 						; decrement Y Pos
.1c29	d0 03		bne $1c2e			bne 	_gdMU1
.1c2b	ee 0c 0c	inc $0c0c			inc 	gdYPos+1
.1c2e					_gdMU1:
.1c2e	18		clc				clc 								; adjust position by -320
.1c2f	ad 20 9f	lda $9f20			lda 	$9F20
.1c32	69 40		adc #$40			adc 	#64
.1c34	8d 20 9f	sta $9f20			sta 	$9F20
.1c37	ad 21 9f	lda $9f21			lda 	$9F21
.1c3a	69 01		adc #$01			adc 	#1
.1c3c	8d 21 9f	sta $9f21			sta 	$9F21
.1c3f	ad 22 9f	lda $9f22			lda 	$9F22
.1c42	69 00		adc #$00			adc 	#0
.1c44	8d 22 9f	sta $9f22			sta 	$9F22
.1c47					gdCheckYRange:
.1c47	ad 0c 0c	lda $0c0c			lda 	gdYPos+1
.1c4a	d0 b1		bne $1bfd			bne 	gdmOffScreen
.1c4c	ad 0b 0c	lda $0c0b			lda 	gdYPos
.1c4f	c9 c8		cmp #$c8			cmp 	#200
.1c51	b0 aa		bcs $1bfd			bcs 	gdmOffScreen
.1c53	90 a6		bcc $1bfb			bcc 	gdmOnScreen
.1c55					gdUpdatePixelOffset:
.1c55	ad 0a 0c	lda $0c0a			lda 	gdXPos+1 					; check X < 320 ($140)
.1c58	f0 0b		beq $1c65			beq 	_gdUPOCheckY
.1c5a	c9 02		cmp #$02			cmp 	#2
.1c5c	b0 13		bcs $1c71			bcs 	_gdUPOBad
.1c5e	ad 09 0c	lda $0c09			lda 	gdXPos
.1c61	c9 40		cmp #$40			cmp 	#$40
.1c63	b0 0c		bcs $1c71			bcs 	_gdUPOBad
.1c65					_gdUPOCheckY:
.1c65	ad 0c 0c	lda $0c0c			lda 	gdYPos+1 					; check Y < 200
.1c68	d0 0e		bne $1c78			bne 	_gdUPOCalculate
.1c6a	ad 0b 0c	lda $0c0b			lda 	gdYPos
.1c6d	c9 c8		cmp #$c8			cmp 	#200
.1c6f	90 07		bcc $1c78			bcc 	_gdUPOCalculate
.1c71					_gdUPOBad:
.1c71	a9 00		lda #$00			lda 	#0
.1c73	8d 0d 0c	sta $0c0d			sta 	gdIsPosOkay
.1c76	38		sec				sec
.1c77	60		rts				rts
.1c78					_gdUPOCalculate:
.1c78	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1c7a	85 2a		sta $2a				sta 	temp0
.1c7c	ad 0b 0c	lda $0c0b			lda 	gdYPos
.1c7f	85 2b		sta $2b				sta 	temp0+1
.1c81	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1c83	66 2a		ror $2a				ror 	temp0
.1c85	46 2b		lsr $2b				lsr 	temp0+1
.1c87	66 2a		ror $2a				ror 	temp0
.1c89	ad 0b 0c	lda $0c0b			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1c8c	18		clc				clc
.1c8d	65 2b		adc $2b				adc 	temp0+1
.1c8f	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1c91	18		clc				clc
.1c92	a5 2a		lda $2a				lda 	temp0
.1c94	6d 09 0c	adc $0c09			adc 	gdXPos
.1c97	8d 07 0c	sta $0c07			sta 	gdPixelOffset
.1c9a	a5 2b		lda $2b				lda 	temp0+1
.1c9c	6d 0a 0c	adc $0c0a			adc 	gdXPos+1
.1c9f	8d 08 0c	sta $0c08			sta 	gdPixelOffset+1
.1ca2	a9 01		lda #$01			lda 	#1 							; it's legitimate.
.1ca4	8d 0d 0c	sta $0c0d			sta 	gdIsPosOkay
.1ca7	20 ac 1c	jsr $1cac			jsr 	gdCopyPosition 				; copy position over
.1caa	18		clc				clc
.1cab	60		rts				rts
.1cac					gdCopyPosition:
.1cac	48		pha				pha
.1cad	18		clc				clc
.1cae	ad 04 0c	lda $0c04			lda 	gdBitmapAddress
.1cb1	6d 07 0c	adc $0c07			adc 	gdPixelOffset
.1cb4	8d 20 9f	sta $9f20			sta 	$9F20
.1cb7	ad 05 0c	lda $0c05			lda 	gdBitmapAddress+1
.1cba	6d 08 0c	adc $0c08			adc 	gdPixelOffset+1
.1cbd	8d 21 9f	sta $9f21			sta 	$9F21
.1cc0	ad 06 0c	lda $0c06			lda 	gdBitmapAddress+2
.1cc3	69 00		adc #$00			adc 	#0
.1cc5	8d 22 9f	sta $9f22			sta 	$9F22
.1cc8	68		pla				pla
.1cc9	60		rts				rts
.1cca					gdPlotInk:
.1cca	ad 0e 0c	lda $0c0e			lda 	gdInk
.1ccd	8d 23 9f	sta $9f23			sta 	$9F23
.1cd0	60		rts				rts
.1cd1					gdPlotPaper:
.1cd1	ad 0f 0c	lda $0c0f			lda 	gdPaper
.1cd4	c9 ff		cmp #$ff			cmp 	#$FF
.1cd6	f0 03		beq $1cdb			beq 	_gdPPSkip
.1cd8	8d 23 9f	sta $9f23			sta 	$9F23
.1cdb					_gdPPSkip:
.1cdb	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c03					gdEnabled:
>0c03							.fill 	1
.0c04					gdBitmapAddress:
>0c04							.fill 	3
.0c07					gdPixelOffset:
>0c07							.fill 	2
.0c09					gdXPos:
>0c09							.fill 	2
.0c0b					gdYPos:
>0c0b							.fill 	2
.0c0d					gdIsPosOkay:
>0c0d							.fill 	1
.0c0e					gdInk:
>0c0e							.fill 	1
.0c0f					gdPaper:
>0c0f							.fill 	1
.1cdc					gdModeChanged:
.1cdc	8a		txa				txa
.1cdd	48		pha				pha
.1cde	98		tya				tya
.1cdf	48		pha				pha
.1ce0	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1ce2	8d 03 0c	sta $0c03			sta 	gdEnabled
.1ce5	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1ce8	c9 40		cmp #$40			cmp 	#$40
.1cea	d0 1f		bne $1d0b			bne 	_gdExit
.1cec	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1cef	c9 40		cmp #$40			cmp 	#$40
.1cf1	d0 18		bne $1d0b			bne 	_gdExit
.1cf3	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1cf6	0a		asl a				asl 	a 							;
.1cf7	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1cf8	10 09		bpl $1d03			bpl 	_gdNotLayer1
.1cfa	48		pha				pha 								; save A
.1cfb	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1cfd	20 13 1d	jsr $1d13			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d00	68		pla				pla 								; restore A
.1d01	b0 08		bcs $1d0b			bcs 	_gdExit 					; if successful then exit
.1d03					_gdNotLayer1:
.1d03	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1d04	10 05		bpl $1d0b			bpl 	_gdExit 					; if not enabled, exit
.1d06	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1d08	20 13 1d	jsr $1d13			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d0b					_gdExit:
.1d0b	20 30 1d	jsr $1d30			jsr 	gdClearGraphics 			; clear graphics display.
.1d0e	68		pla				pla
.1d0f	a8		tay				tay
.1d10	68		pla				pla
.1d11	aa		tax				tax
.1d12	60		rts				rts
.1d13					gdCheckBitmap:
.1d13	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1d16	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1d18	d0 14		bne $1d2e			bne 	_gdCBFail
.1d1a	ee 03 0c	inc $0c03			inc 	gdEnabled 					; set the enabled flag to non zero.
.1d1d	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1d20	0a		asl a				asl 	a
.1d21	8d 05 0c	sta $0c05			sta 	gdBitmapAddress+1
.1d24	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1d26	8d 06 0c	sta $0c06			sta 	gdBitmapAddress+2
.1d29	a9 00		lda #$00			lda 	#$00
.1d2b	8d 04 0c	sta $0c04			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1d2e					_gdCBFail:
.1d2e	18		clc				clc
.1d2f	60		rts				rts
.1d30					gdClearGraphics:
.1d30	8a		txa				txa
.1d31	48		pha				pha
.1d32	98		tya				tya
.1d33	48		pha				pha
.1d34	ad 03 0c	lda $0c03			lda 	gdEnabled 					; screen enabled
.1d37	f0 2e		beq $1d67			beq 	_gdCGExit
.1d39	a9 00		lda #$00			lda 	#0 							; reset position
.1d3b	8d 0d 0c	sta $0c0d			sta 	gdIsPosOkay 				; not legal position
.1d3e	8d 07 0c	sta $0c07			sta 	gdPixelOffset 				; zero pixel offset.
.1d41	8d 08 0c	sta $0c08			sta 	gdPixelOffset+1
.1d44	8d 0f 0c	sta $0c0f			sta 	gdPaper 					; paper black
.1d47	20 ac 1c	jsr $1cac			jsr 	gdCopyPosition
.1d4a	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1d4d	09 10		ora #$10			ora 	#$10
.1d4f	8d 22 9f	sta $9f22			sta 	$9F22
.1d52	a9 01		lda #$01			lda 	#1 							; ink white
.1d54	8d 0e 0c	sta $0c0e			sta 	gdInk
.1d57	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1d59	a2 00		ldx #$00			ldx 	#0
.1d5b	ad 0f 0c	lda $0c0f			lda 	gdPaper
.1d5e					_gdCGLoop1:
.1d5e	8d 23 9f	sta $9f23			sta 	$9F23
.1d61	ca		dex				dex
.1d62	d0 fa		bne $1d5e			bne 	_gdCGLoop1
.1d64	88		dey				dey
.1d65	d0 f7		bne $1d5e			bne 	_gdCGLoop1
.1d67					_gdCGExit:
.1d67	68		pla				pla
.1d68	a8		tay				tay
.1d69	68		pla				pla
.1d6a	aa		tax				tax
.1d6b	60		rts				rts
.1d6c					gdSetInk:
.1d6c	8d 0e 0c	sta $0c0e			sta 	gdInk
.1d6f	60		rts				rts
.1d70					gdSetPaper:
.1d70	8d 0f 0c	sta $0c0f			sta 	gdPaper
.1d73	60		rts				rts
.1d74					gdSetX:
.1d74	8d 09 0c	sta $0c09			sta 	gdXPos
.1d77	8e 0a 0c	stx $0c0a			stx 	gdXPos+1
.1d7a	60		rts				rts
.1d7b					gdSetY:
.1d7b	8d 0b 0c	sta $0c0b			sta 	gdYPos
.1d7e	8e 0c 0c	stx $0c0c			stx 	gdYPos+1
.1d81	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1d82					Unary_Clock:
.1d82	a2 0c		ldx #$0c		ldx	#12
.1d84	20 18 3c	jsr $3c18		jsr	mainHandler
.1d87	48		pha				pha 								; save stack pos
.1d88	a2 04		ldx #$04		ldx	#4
.1d8a	20 18 3c	jsr $3c18		jsr	mainHandler
.1d8d	98		tya				tya
.1d8e	48		pha				pha
.1d8f	20 50 ff	jsr $ff50			jsr 	$FF50
.1d92	68		pla				pla
.1d93	a8		tay				tay
.1d94	68		pla				pla 								; restore, repush, put into X to read offset
.1d95	48		pha				pha
.1d96	aa		tax				tax
.1d97	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1d99	c9 06		cmp #$06			cmp 	#6
.1d9b	b0 0d		bcs $1daa			bcs 	_UCValue
.1d9d	aa		tax				tax 								; index in X and read RTC.
.1d9e	b5 02		lda $02,x			lda 	2,x
.1da0	85 32		sta $32				sta 	tempshort
.1da2	68		pla				pla 								; restore number stack index.
.1da3	aa		tax				tax
.1da4	a5 32		lda $32				lda 	tempShort
.1da6	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1da8	8a		txa				txa
.1da9	60		rts				rts
.1daa					_UCValue:
.1daa	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1dac	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1daf					Unary_JoyX:
.1daf	38		sec				sec
.1db0	b0 01		bcs $1db3			bcs 	JoystickRead
.1db2					Unary_JoyY:
.1db2	18		clc				clc
.1db3					JoystickRead:
.1db3	48		pha				pha 								; save stack position
.1db4	08		php				php 								; save test flag.
.1db5	a2 04		ldx #$04		ldx	#4
.1db7	20 18 3c	jsr $3c18		jsr	mainHandler
.1dba	20 14 1e	jsr $1e14			jsr 	ReadJoystick 				; read it.
.1dbd	28		plp				plp
.1dbe	b0 02		bcs $1dc2			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1dc0	4a		lsr a				lsr 	a
.1dc1	4a		lsr a				lsr 	a
.1dc2					_JRNoShift:
.1dc2	29 03		and #$03			and 	#3 							; isolate the test bits.
.1dc4	f0 0d		beq $1dd3			beq 	JoyReturnA 					; if nothing pressed, return A.
.1dc6	c9 03		cmp #$03			cmp 	#3
.1dc8	f0 07		beq $1dd1			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1dca	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1dcb	b0 16		bcs $1de3			bcs 	JoyReturn1
.1dcd					JoyReturnTrue:
.1dcd	a9 ff		lda #$ff			lda 	#$FF
.1dcf	d0 02		bne $1dd3			bne 	JoyReturnA
.1dd1					JoyReturnFalse:
.1dd1	a9 00		lda #$00			lda 	#0
.1dd3					JoyReturnA:
.1dd3	85 32		sta $32				sta 	tempShort 					; return A
.1dd5	68		pla				pla
.1dd6	aa		tax				tax
.1dd7	a5 32		lda $32				lda 	tempShort
.1dd9	95 98		sta $98,x			sta 	esInt0,x
.1ddb					JoyReturn13:
.1ddb	95 a0		sta $a0,x			sta 	esInt1,x
.1ddd	95 a8		sta $a8,x			sta 	esInt2,x
.1ddf	95 b0		sta $b0,x			sta 	esInt3,x
.1de1	8a		txa				txa 								; return NSP in A
.1de2	60		rts				rts
.1de3					JoyReturn1:
.1de3	68		pla				pla
.1de4	aa		tax				tax
.1de5	a9 01		lda #$01			lda 	#1
.1de7	95 98		sta $98,x			sta 	esInt0,x
.1de9	a9 00		lda #$00			lda 	#0
.1deb	f0 ee		beq $1ddb			beq 	JoyReturn13
.1ded					Unary_JButton:
.1ded	48		pha				pha 								; save X on stack, put in X
.1dee	a2 0c		ldx #$0c		ldx	#12
.1df0	20 18 3c	jsr $3c18		jsr	mainHandler
.1df3	aa		tax				tax 								; get value to check, push on stack.
.1df4	b5 98		lda $98,x			lda 	esInt0,x
.1df6	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1df8	b0 15		bcs $1e0f			bcs 	_UJBadValue
.1dfa	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1dfc	48		pha				pha 								; save that shift count on the stack.
.1dfd	a2 04		ldx #$04		ldx	#4
.1dff	20 18 3c	jsr $3c18		jsr	mainHandler
.1e02	68		pla				pla
.1e03	aa		tax				tax
.1e04	20 14 1e	jsr $1e14			jsr 	ReadJoystick 				; joystick read
.1e07					_UJShift:
.1e07	4a		lsr a				lsr 	a
.1e08	ca		dex				dex
.1e09	d0 fc		bne $1e07			bne 	_UJShift
.1e0b	b0 c0		bcs $1dcd			bcs 	JoyReturnTrue
.1e0d	90 c2		bcc $1dd1			bcc 	JoyReturnFalse
.1e0f					_UJBadValue:
.1e0f	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1e11	20 18 15	jsr $1518		jsr	errorHandler
.1e14					ReadJoystick:
.1e14	8a		txa				txa
.1e15	48		pha				pha
.1e16	98		tya				tya
.1e17	48		pha				pha
.1e18	a9 00		lda #$00			lda 	#0
.1e1a	20 56 ff	jsr $ff56			jsr 	$FF56
.1e1d	c0 00		cpy #$00			cpy 	#0
.1e1f	d0 11		bne $1e32			bne 	_RJError
.1e21	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1e23	d0 02		bne $1e27			bne 	_RJNoBug
.1e25	a9 ff		lda #$ff			lda 	#$FF
.1e27					_RJNoBug:
.1e27	85 32		sta $32				sta 	tempShort
.1e29	68		pla				pla
.1e2a	a8		tay				tay
.1e2b	68		pla				pla
.1e2c	aa		tax				tax
.1e2d	a5 32		lda $32				lda 	tempShort
.1e2f	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1e31	60		rts				rts
.1e32					_RJError:
.1e32	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1e34	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c10					hitSprite1:
>0c10							.fill 	1 							; this won't work ... if you nest HIT() which
.0c11					hitSprite2:
>0c11							.fill 	1
.0c12					hitRange:
>0c12							.fill 	1
.1e37					FunctionCollide:
.1e37	48		pha				pha 								; save and put index into X
.1e38	aa		tax				tax
.1e39	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1e3b	8d 12 0c	sta $0c12			sta 	hitRange
.1e3e	20 e3 1e	jsr $1ee3			jsr 	_FCGetSpriteID
.1e41	8d 10 0c	sta $0c10			sta 	hitSprite1
.1e44	8a		txa				txa
.1e45	48		pha				pha
.1e46	a2 02		ldx #$02		ldx	#2
.1e48	20 18 3c	jsr $3c18		jsr	mainHandler
.1e4b	68		pla				pla
.1e4c	aa		tax				tax
.1e4d	20 e3 1e	jsr $1ee3			jsr 	_FCGetSpriteID
.1e50	8d 11 0c	sta $0c11			sta 	hitSprite2
.1e53	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1e55	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1e57	f0 13		beq $1e6c			beq 	_FCParam2
.1e59	8a		txa				txa
.1e5a	48		pha				pha
.1e5b	a2 02		ldx #$02		ldx	#2
.1e5d	20 18 3c	jsr $3c18		jsr	mainHandler
.1e60	68		pla				pla
.1e61	a2 0c		ldx #$0c		ldx	#12
.1e63	20 18 3c	jsr $3c18		jsr	mainHandler
.1e66	aa		tax				tax
.1e67	b5 98		lda $98,x			lda 	esInt0,x
.1e69	8d 12 0c	sta $0c12			sta 	hitRange
.1e6c					_FCParam2:
.1e6c	a2 04		ldx #$04		ldx	#4
.1e6e	20 18 3c	jsr $3c18		jsr	mainHandler
.1e71	68		pla				pla 								; set X to point to the stack again.
.1e72	48		pha				pha
.1e73	aa		tax				tax
.1e74	98		tya				tya
.1e75	48		pha				pha
.1e76	18		clc				clc 								; do it with the horizontal values.
.1e77	20 99 1e	jsr $1e99			jsr 	_FCCheck
.1e7a	90 0a		bcc $1e86			bcc 	_FCFail
.1e7c	38		sec				sec 								; do it with the vertical values.
.1e7d	20 99 1e	jsr $1e99			jsr 	_FCCheck
.1e80	90 04		bcc $1e86			bcc 	_FCFail
.1e82	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1e84	d0 02		bne $1e88			bne 	_FCReturnA
.1e86					_FCFail:
.1e86	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1e88					_FCReturnA:
.1e88	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1e8a	68		pla				pla
.1e8b	a8		tay				tay
.1e8c	68		pla				pla 								; restore stack, return result and exit.
.1e8d	aa		tax				tax
.1e8e	a5 32		lda $32				lda 	tempShort
.1e90	95 98		sta $98,x			sta 	esInt0,x
.1e92	95 a0		sta $a0,x			sta 	esInt1,x
.1e94	95 a8		sta $a8,x			sta 	esInt2,x
.1e96	95 b0		sta $b0,x			sta 	esInt3,x
.1e98	60		rts				rts
.1e99					_FCCheck:
.1e99	08		php				php 								; save the H/V flag twice
.1e9a	08		php				php
.1e9b	ad 10 0c	lda $0c10			lda 	hitSprite1 					; select sprite 1 and read its location
.1e9e	20 21 20	jsr $2021			jsr 	SelectSpriteA 				; into X
.1ea1	28		plp				plp
.1ea2	20 83 20	jsr $2083			jsr 	SpriteReadCoordinate
.1ea5	ad 11 0c	lda $0c11			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1ea8	20 21 20	jsr $2021			jsr 	SelectSpriteA
.1eab	e8		inx				inx
.1eac	28		plp				plp
.1ead	20 83 20	jsr $2083			jsr 	SpriteReadCoordinate
.1eb0	ca		dex				dex
.1eb1	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1eb2	b5 98		lda $98,x			lda 	esInt0,x
.1eb4	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1eb6	85 2a		sta $2a				sta 	temp0
.1eb8	b5 a0		lda $a0,x			lda 	esInt1,x
.1eba	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1ebc	85 2b		sta $2b				sta 	temp0+1
.1ebe	10 0d		bpl $1ecd			bpl 	_FCCIsPositive
.1ec0	38		sec				sec 								; if -ve calculate |difference|
.1ec1	a9 00		lda #$00			lda 	#0
.1ec3	e5 2a		sbc $2a				sbc 	temp0
.1ec5	85 2a		sta $2a				sta 	temp0
.1ec7	a9 00		lda #$00			lda 	#0
.1ec9	e5 2b		sbc $2b				sbc 	temp0+1
.1ecb	85 2b		sta $2b				sta 	temp0+1
.1ecd					_FCCIsPositive:
.1ecd	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1ecf	d0 10		bne $1ee1			bne 	_FCCFail
.1ed1	18		clc				clc 								; work out required min distance which is
.1ed2	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1ed4	75 b1		adc $b1,x			adc 	esInt3+1,x
.1ed6	ac 12 0c	ldy $0c12			ldy 	hitRange 					; get the hit range
.1ed9	f0 01		beq $1edc			beq 	_FCCNoSetRange 				; override if non zero.
.1edb	98		tya				tya
.1edc					_FCCNoSetRange:
.1edc	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1ede	f0 01		beq $1ee1			beq 	_FCCFail
.1ee0	60		rts				rts
.1ee1					_FCCFail:
.1ee1	18		clc				clc
.1ee2	60		rts				rts
.1ee3					_FCGetSpriteID:
.1ee3	8a		txa				txa
.1ee4	a2 0c		ldx #$0c		ldx	#12
.1ee6	20 18 3c	jsr $3c18		jsr	mainHandler
.1ee9	aa		tax				tax
.1eea	b5 98		lda $98,x			lda 	esInt0,x
.1eec	30 01		bmi $1eef			bmi 	_FCGSValue
.1eee	60		rts				rts
.1eef					_FCGSValue:
.1eef	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ef1	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c13					currSprite:
>0c13							.fill 	2
.1ef4					CommandSprite:
.1ef4	20 f6 1f	jsr $1ff6			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1ef7	d0 0d		bne $1f06			bne 	_CSCheckClear
.1ef9	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1efc	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1efe	90 02		bcc $1f02			bcc 	_CSNotOn 					; if CS turn on, so set it
.1f00	09 40		ora #$40			ora 	#$40
.1f02					_CSNotOn:
.1f02	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1f05	60		rts				rts
.1f06					_CSCheckClear:
.1f06	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1f08	8d 14 0c	sta $0c14			sta 	currSprite+1
.1f0b	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1f0d	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1f0f	d0 05		bne $1f16			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1f11	20 07 20	jsr $2007			jsr 	CSClearSprites 				; clear all the sprites
.1f14	c8		iny				iny 								; consume CLEAR token and exit.
.1f15	60		rts				rts
.1f16					_CSCommandLoop:
.1f16	20 f6 1f	jsr $1ff6			jsr 	CSCheckOnOff 				; check sprite on/off
.1f19	f0 2c		beq $1f47			beq 	_CSSetVisibility
.1f1b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1f1d	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1f1f	f0 25		beq $1f46			beq 	_CSExit
.1f21	c8		iny				iny									; consume it
.1f22	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1f24	f0 20		beq $1f46			beq 	_CSExit
.1f26	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1f28	f0 ec		beq $1f16			beq 	_CSCommandLoop
.1f2a	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1f2c	f0 69		beq $1f97			beq 	_CSSetImage
.1f2e	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1f30	f0 2b		beq $1f5d			beq 	_CSSetFlip
.1f32	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1f34	f0 46		beq $1f7c			beq 	_CSSetPos
.1f36	88		dey				dey 								; unpick DEY
.1f37	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1f39	a2 0c		ldx #$0c		ldx	#12
.1f3b	20 18 3c	jsr $3c18		jsr	mainHandler
.1f3e	a5 98		lda $98				lda 	esInt0
.1f40	20 21 20	jsr $2021			jsr 	SelectSpriteA
.1f43	4c 16 1f	jmp $1f16			jmp 	_CSCommandLoop
.1f46					_CSExit:
.1f46	60		rts				rts
.1f47					_CSSetVisibility:
.1f47	08		php				php 								; save carry
.1f48	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1f4a	20 dd 1f	jsr $1fdd			jsr 	SpriteSetTarget
.1f4d	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1f50	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1f52	28		plp				plp
.1f53	90 02		bcc $1f57			bcc 	_CSSetOff 					; check if carry was set
.1f55	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1f57					_CSSetOff:
.1f57	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1f5a	4c 16 1f	jmp $1f16			jmp 	_CSCommandLoop
.1f5d					_CSSetFlip:
.1f5d	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1f5f	a2 0c		ldx #$0c		ldx	#12
.1f61	20 18 3c	jsr $3c18		jsr	mainHandler
.1f64	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1f66	20 dd 1f	jsr $1fdd			jsr 	SpriteSetTarget
.1f69	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.1f6b	29 03		and #$03			and 	#3
.1f6d	85 2a		sta $2a				sta 	temp0
.1f6f	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1f72	29 fc		and #$fc			and 	#$FC
.1f74	05 2a		ora $2a				ora 	temp0
.1f76	8d 23 9f	sta $9f23			sta 	$9F23
.1f79	4c 16 1f	jmp $1f16			jmp 	_CSCommandLoop
.1f7c					_CSSetPos:
.1f7c	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1f7e	a2 0a		ldx #$0a		ldx	#10
.1f80	20 18 3c	jsr $3c18		jsr	mainHandler
.1f83	a2 02		ldx #$02		ldx	#2
.1f85	20 18 3c	jsr $3c18		jsr	mainHandler
.1f88	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1f8a	a2 0a		ldx #$0a		ldx	#10
.1f8c	20 18 3c	jsr $3c18		jsr	mainHandler
.1f8f	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1f91	20 3f 20	jsr $203f			jsr 	SpriteMove 					; move it.
.1f94	4c 16 1f	jmp $1f16			jmp 	_CSCommandLoop
.1f97					_CSSetImage:
.1f97	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1f99	a2 0c		ldx #$0c		ldx	#12
.1f9b	20 18 3c	jsr $3c18		jsr	mainHandler
.1f9e	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1fa0	20 dd 1f	jsr $1fdd			jsr 	SpriteSetTarget
.1fa3	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.1fa5	bd 5a 0c	lda $0c5a,x			lda 	imageAddr2Low,x 			; copy low address in.
.1fa8	8d 23 9f	sta $9f23			sta 	$9F23
.1fab	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1fae	bd 1a 0c	lda $0c1a,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1fb1	29 10		and #$10			and 	#$10
.1fb3	0a		asl a				asl 	a
.1fb4	0a		asl a				asl		a
.1fb5	0a		asl a				asl 	a 							; put into bit 7
.1fb6	1d 9a 0c	ora $0c9a,x			ora 	imageAddr2High,x 			; or high address with it.
.1fb9	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1fbc	a9 06		lda #$06			lda 	#6
.1fbe	20 dd 1f	jsr $1fdd			jsr 	SpriteSetTarget 			; set sprite on.
.1fc1	ad 23 9f	lda $9f23			lda 	$9F23
.1fc4	09 0c		ora #$0c			ora 	#$0C
.1fc6	8d 23 9f	sta $9f23			sta 	$9F23
.1fc9	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1fcc	bd 1a 0c	lda $0c1a,x			lda 	imageInfo,x 				; get image info
.1fcf	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1fd0	0a		asl a				asl 	a
.1fd1	0a		asl a				asl 	a
.1fd2	0a		asl a				asl 	a
.1fd3	b0 02		bcs $1fd7			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1fd5	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1fd7					_CSNoOffset:
.1fd7	8d 23 9f	sta $9f23			sta 	$9F23
.1fda	4c 16 1f	jmp $1f16			jmp 	_CSCommandLoop
.1fdd					SpriteSetTarget:
.1fdd	0d 13 0c	ora $0c13			ora 	currSprite
.1fe0	8d 20 9f	sta $9f20			sta 	$9F20
.1fe3	ad 14 0c	lda $0c14			lda 	currSprite+1
.1fe6	f0 09		beq $1ff1			beq 	_SSTNoSet
.1fe8	8d 21 9f	sta $9f21			sta 	$9F21
.1feb	a9 01		lda #$01			lda 	#$01
.1fed	8d 22 9f	sta $9f22			sta 	$9F22
.1ff0	60		rts				rts
.1ff1					_SSTNoSet:
.1ff1	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1ff3	20 18 15	jsr $1518		jsr	errorHandler
.1ff6					CSCheckOnOff:
.1ff6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1ff8	c8		iny				iny
.1ff9	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1ffb	18		clc				clc
.1ffc	f0 08		beq $2006			beq 	_CSCOExit
.1ffe	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.2000	38		sec				sec 								; return NE if neither.
.2001	f0 03		beq $2006			beq 	_CSCOExit
.2003	88		dey				dey 								; undo consume
.2004	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.2006					_CSCOExit:
.2006	60		rts				rts
.2007					CSClearSprites:
.2007	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.2009	8d 22 9f	sta $9f22			sta 	$9F22
.200c	a9 fc		lda #$fc			lda 	#$FC
.200e	8d 21 9f	sta $9f21			sta 	$9F21
.2011	a9 00		lda #$00			lda 	#0
.2013	8d 20 9f	sta $9f20			sta 	$9F20
.2016					_CSClear:
.2016	a9 00		lda #$00			lda 	#0 							; set everything to $00
.2018	8d 23 9f	sta $9f23			sta 	$9F23
.201b	ad 21 9f	lda $9f21			lda 	$9F21
.201e	d0 f6		bne $2016			bne 	_CSClear
.2020	60		rts				rts
.2021					SelectSpriteA:
.2021	85 2a		sta $2a				sta 	temp0
.2023	a9 00		lda #$00			lda 	#0
.2025	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.2027	b0 11		bcs $203a			bcs 	_CSBadValue 				; sprites only 0-127
.2029	06 2a		asl $2a				asl 	temp0
.202b	2a		rol a				rol 	a
.202c	06 2a		asl $2a				asl 	temp0
.202e	2a		rol a				rol 	a
.202f	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.2031	8d 14 0c	sta $0c14			sta 	currSprite+1
.2034	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.2036	8d 13 0c	sta $0c13			sta 	currSprite+0
.2039	60		rts				rts
.203a					_CSBadValue
.203a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.203c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.203f					SpriteMove:
.203f	98		tya				tya
.2040	48		pha				pha
.2041	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2043	20 dd 1f	jsr $1fdd			jsr 	SpriteSetTarget
.2046	ad 23 9f	lda $9f23			lda 	$9F23
.2049	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.204a	4a		lsr a				lsr 	a
.204b	4a		lsr a				lsr 	a
.204c	4a		lsr a				lsr 	a
.204d	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.204f	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.2051	20 dd 1f	jsr $1fdd			jsr 	SpriteSetTarget
.2054	20 63 20	jsr $2063			jsr 	SMWritePosition 					; write X position out.
.2057	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.2059	46 2a		lsr $2a				lsr 	temp0
.205b	e8		inx				inx 										; get the y position
.205c	20 63 20	jsr $2063			jsr 	SMWritePosition 					; and write that out.
.205f	ca		dex				dex 										; fix X and quit.
.2060	68		pla				pla
.2061	a8		tay				tay
.2062	60		rts				rts
.2063					SMWritePosition:
.2063	a5 2a		lda $2a				lda 	temp0 								; get dim size
.2065	29 03		and #$03			and 	#3 									; in range into Y
.2067	a8		tay				tay
.2068	38		sec				sec
.2069	b5 98		lda $98,x			lda 	esInt0,x
.206b	f9 7f 20	sbc $207f,y			sbc 	SMHalfSize,y
.206e	8d 23 9f	sta $9f23			sta 	$9F23
.2071	ee 20 9f	inc $9f20			inc 	$9F20
.2074	b5 a0		lda $a0,x			lda 	esInt1,x
.2076	e9 00		sbc #$00			sbc 	#0
.2078	8d 23 9f	sta $9f23			sta 	$9F23
.207b	ee 20 9f	inc $9f20			inc 	$9F20
.207e	60		rts				rts
.207f					SMHalfSize:
>207f	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2083					SpriteReadCoordinate:
.2083	98		tya				tya
.2084	48		pha				pha
.2085	08		php				php 										; save CTR on stack
.2086	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2088	20 dd 1f	jsr $1fdd			jsr 	SpriteSetTarget
.208b	ad 23 9f	lda $9f23			lda 	$9F23
.208e	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.208f	4a		lsr a				lsr 	a
.2090	4a		lsr a				lsr 	a
.2091	4a		lsr a				lsr 	a
.2092	28		plp				plp 										; restore CTS
.2093	08		php				php
.2094	90 02		bcc $2098			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2096	4a		lsr a				lsr 	a
.2097	4a		lsr a				lsr 	a
.2098					_SPRCNotY1:
.2098	29 03		and #$03			and 	#3 									; point into half width/height
.209a	a8		tay				tay
.209b	b9 7f 20	lda $207f,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.209e	95 b0		sta $b0,x			sta 	esInt3,x
.20a0	28		plp				plp 										; CS Y CC X
.20a1	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.20a3	2a		rol a				rol 	a
.20a4	2a		rol a				rol 	a
.20a5	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.20a7	20 dd 1f	jsr $1fdd			jsr 	SpriteSetTarget 					; set data pointer offset by that
.20aa	18		clc				clc 										; read and unfix centre.
.20ab	ad 23 9f	lda $9f23			lda 	$9F23
.20ae	75 b0		adc $b0,x			adc 	esInt3,x
.20b0	95 98		sta $98,x			sta 	esInt0,x
.20b2	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.20b5	ad 23 9f	lda $9f23			lda 	$9F23
.20b8	69 00		adc #$00			adc 	#0
.20ba	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.20bc	c9 08		cmp #$08			cmp		#$08
.20be	90 02		bcc $20c2			bcc 	_SPRCNoSX
.20c0	09 f0		ora #$f0			ora 	#$F0
.20c2					_SPRCNoSX:
.20c2	95 a0		sta $a0,x			sta 	esInt1,x
.20c4	68		pla				pla
.20c5	a8		tay				tay
.20c6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.20c7					Sprite_GetX:
.20c7	18		clc				clc
.20c8	90 01		bcc $20cb			bcc 	SpriteGetCode
.20ca					Sprite_GetY:
.20ca	38		sec				sec
.20cb					SpriteGetCode:
.20cb	08		php				php 								; CLC : X SEC: Y, save on stack.
.20cc	48		pha				pha 								; save stack position
.20cd	20 e9 20	jsr $20e9			jsr 	GetSpriteNumber 			; get # of sprite.
.20d0	a2 04		ldx #$04		ldx	#4
.20d2	20 18 3c	jsr $3c18		jsr	mainHandler
.20d5	68		pla				pla
.20d6	aa		tax				tax
.20d7	28		plp				plp 								; which one ?
.20d8	20 83 20	jsr $2083			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.20db	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.20dd	29 80		and #$80			and 	#$80
.20df	f0 02		beq $20e3			beq 	_SGXYPos
.20e1	a9 ff		lda #$ff			lda 	#$FF
.20e3					_SGXYPos:
.20e3	95 a8		sta $a8,x			sta 	esInt2,x
.20e5	95 b0		sta $b0,x			sta 	esInt3,x
.20e7	8a		txa				txa 								; return NSP in A
.20e8	60		rts				rts
.20e9					GetSpriteNumber:
.20e9	48		pha				pha
.20ea	a2 0c		ldx #$0c		ldx	#12
.20ec	20 18 3c	jsr $3c18		jsr	mainHandler
.20ef	68		pla				pla
.20f0	aa		tax				tax
.20f1	b5 98		lda $98,x			lda 	esInt0,x
.20f3	20 21 20	jsr $2021			jsr 	SelectSpriteA
.20f6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c15					currentMode:
>0c15							.fill 	4
.20f7					ForceMode0:
.20f7	a2 00		ldx #$00			ldx 	#0
.20f9	86 98		stx $98				stx 	esInt0 						; in case we do it.
.20fb					_FMCheck:
.20fb	bd 8e 21	lda $218e,x			lda 	CMModeList,x 				; do we need to switch ?
.20fe	dd 15 0c	cmp $0c15,x			cmp 	currentMode,x
.2101	d0 13		bne $2116			bne 	CMSetMode 					; different so switch.
.2103	e8		inx				inx
.2104	e0 04		cpx #$04			cpx 	#4
.2106	d0 f3		bne $20fb			bne 	_FMCheck
.2108	60		rts				rts
.2109					CommandMode:
.2109	a9 00		lda #$00			lda 	#0
.210b	a2 0a		ldx #$0a		ldx	#10
.210d	20 18 3c	jsr $3c18		jsr	mainHandler
.2110	a5 b0		lda $b0				lda 	esInt3
.2112	29 70		and #$70			and 	#$70
.2114	d0 06		bne $211c			bne 	CMNoExpand
.2116					CMSetMode:
.2116	20 6d 21	jsr $216d			jsr 	CMExpandMode
.2119	4c 30 21	jmp $2130			jmp 	CMUpdateMode
.211c					CMNoExpand:
.211c	a5 98		lda $98				lda 	esInt0
.211e	8d 15 0c	sta $0c15			sta 	currentMode
.2121	a5 a0		lda $a0				lda 	esInt1
.2123	8d 16 0c	sta $0c16			sta 	currentMode+1
.2126	a5 a8		lda $a8				lda 	esInt2
.2128	8d 17 0c	sta $0c17			sta 	currentMode+2
.212b	a5 b0		lda $b0				lda 	esInt3
.212d	8d 18 0c	sta $0c18			sta 	currentMode+3
.2130					CMUpdateMode:
.2130	a2 11		ldx #$11			ldx 	#$11
.2132					_CMClear:
.2132	a9 00		lda #$00			lda 	#0
.2134	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.2137	ca		dex				dex
.2138	10 f8		bpl $2132			bpl 	_CMClear
.213a	ad 18 0c	lda $0c18			lda 	currentMode+3 				; get current mode
.213d	48		pha				pha 								; stack twice.
.213e	48		pha				pha
.213f	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.2141	09 01		ora #$01			ora 	#$01 						; turn the output on.
.2143	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.2146	68		pla				pla 								; get back
.2147	20 9e 21	jsr $219e			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.214a	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.214d	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.214e	4a		lsr a				lsr 	a
.214f	4a		lsr a				lsr 	a
.2150	20 9e 21	jsr $219e			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2153	8d 2b 9f	sta $9f2b			sta 	$9F2B
.2156	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.2158	ad 15 0c	lda $0c15			lda 	currentMode					; get L0 config byte
.215b	20 a9 21	jsr $21a9			jsr 	CMDecodeLayer 				; and decode layer 0
.215e	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2160	ad 16 0c	lda $0c16			lda 	currentMode+1
.2163	20 a9 21	jsr $21a9			jsr 	CMDecodeLayer
.2166	20 dc 1c	jsr $1cdc			jsr 	gdModeChanged 				; check the bitmap status.
.2169	20 ba 18	jsr $18ba			jsr 	GResetStorage 				; reset the graphics drawing storage.
.216c	60		rts				rts
.216d					CMExpandMode:
.216d	a5 98		lda $98				lda 	esInt0 						; get mode number
.216f	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2171	b0 16		bcs $2189			bcs 	_CMModeError
.2173	0a		asl a				asl 	a 							; x 4 into X
.2174	0a		asl a				asl 	a
.2175	aa		tax				tax
.2176	98		tya				tya
.2177	48		pha				pha
.2178	a0 00		ldy #$00			ldy 	#0
.217a					_CMEMCopy:
.217a	bd 8e 21	lda $218e,x			lda 	CMModeList,x
.217d	99 15 0c	sta $0c15,y			sta 	currentMode,y
.2180	e8		inx				inx
.2181	c8		iny				iny
.2182	c0 04		cpy #$04			cpy 	#4
.2184	d0 f4		bne $217a			bne 	_CMEMCopy
.2186	68		pla				pla
.2187	a8		tay				tay
.2188	60		rts				rts
.2189					_CMModeError:
.2189	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.218b	20 18 15	jsr $1518		jsr	errorHandler
.218e					CMModeList:
>218e	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2192	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2196	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>219a	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.219e					CMEndModeList:
.219e					CMToScale:
.219e	29 03		and #$03			and 	#3 							; lower 2 bits only
.21a0	aa		tax				tax 								; put in X for counting
.21a1	a9 00		lda #$00			lda 	#0 							; zero result
.21a3	38		sec				sec 								; first time rotate CS in
.21a4					_CMTSLoop:
.21a4	6a		ror a				ror 	a
.21a5	ca		dex				dex
.21a6	10 fc		bpl $21a4			bpl 	_CMTSLoop
.21a8	60		rts				rts
.21a9					CMDecodeLayer:
.21a9	48		pha				pha 								; save it.
.21aa	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.21ac	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.21af	68		pla				pla 								; get it back
.21b0	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.21b2	f0 02		beq $21b6			beq 	_CMDLNotSet
.21b4	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.21b6					_CMDLNotSet:
.21b6	e0 00		cpx #$00			cpx 	#0
.21b8	f0 06		beq $21c0			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.21ba	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.21bc	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.21bf	60		rts				rts
.21c0					_CMDLayer0:
.21c0	09 80		ora #$80			ora 	#$80 						; tile base is $80
.21c2	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.21c5	60		rts				rts
.21c6					CommandClg:
.21c6	20 30 1d	jsr $1d30			jsr 	gdClearGraphics
.21c9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.21ca					CommandPalette:
.21ca	a9 00		lda #$00			lda 	#0
.21cc	a2 0c		ldx #$0c		ldx	#12
.21ce	20 18 3c	jsr $3c18		jsr	mainHandler
.21d1	a2 02		ldx #$02		ldx	#2
.21d3	20 18 3c	jsr $3c18		jsr	mainHandler
.21d6	a9 01		lda #$01			lda 	#1
.21d8	a2 08		ldx #$08		ldx	#8
.21da	20 18 3c	jsr $3c18		jsr	mainHandler
.21dd	a5 98		lda $98				lda 	esInt0 					; get palette #
.21df	20 ef 21	jsr $21ef			jsr 	PointToPaletteA			; point to palette register
.21e2	a5 99		lda $99				lda 	esInt0+1
.21e4	8d 23 9f	sta $9f23			sta 	$9F23
.21e7	a5 a1		lda $a1				lda 	esInt1+1
.21e9	29 0f		and #$0f			and 	#$0F
.21eb	8d 23 9f	sta $9f23			sta 	$9F23
.21ee	60		rts				rts
.21ef					PointToPaletteA:
.21ef	0a		asl a				asl 	a 							; x 2 -> LSB
.21f0	8d 20 9f	sta $9f20			sta 	$9F20
.21f3	a9 00		lda #$00			lda 	#0 							; carry into A
.21f5	2a		rol a				rol 	a
.21f6	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.21f8	8d 21 9f	sta $9f21			sta 	$9F21
.21fb	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.21fd	8d 22 9f	sta $9f22			sta 	$9F22
.2200	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.2201					Command_VLoad:
.2201	a9 00		lda #$00			lda 	#0 								; string which is the file name
.2203	a2 0e		ldx #$0e		ldx	#14
.2205	20 18 3c	jsr $3c18		jsr	mainHandler
.2208	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.220a	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.220c	95 98		sta $98,x			sta 	esInt0,x
.220e	a5 36		lda $36				lda 	lowMemory+1
.2210	95 a0		sta $a0,x			sta 	esInt1,x
.2212	a9 00		lda #$00			lda 	#0
.2214	95 a8		sta $a8,x			sta 	esInt2,x
.2216	95 b0		sta $b0,x			sta 	esInt3,x
.2218	a2 0e		ldx #$0e		ldx	#14
.221a	20 f6 14	jsr $14f6		jsr	deviceHandler
.221d	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.221f	85 2a		sta $2a				sta 	temp0
.2221	a5 a1		lda $a1				lda 	esInt1+1
.2223	85 2b		sta $2b				sta 	temp0+1
.2225	20 a1 22	jsr $22a1			jsr 	LoadVRAMFile 					; load the VRAM file in.
.2228	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2229					Command_VPoke:
.2229	38		sec				sec 						; one byte , CS
.222a	b0 01		bcs $222d			bcs 	CmdVideoWrite
.222c					Command_VDoke:
.222c	18		clc				clc 						; two bytes, CC
.222d					CmdVideoWrite:
.222d	08		php				php 						; save one or two btes
.222e	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.2230	a2 0a		ldx #$0a		ldx	#10
.2232	20 18 3c	jsr $3c18		jsr	mainHandler
.2235	a2 02		ldx #$02		ldx	#2
.2237	20 18 3c	jsr $3c18		jsr	mainHandler
.223a	a9 01		lda #$01			lda 	#1
.223c	a2 0a		ldx #$0a		ldx	#10
.223e	20 18 3c	jsr $3c18		jsr	mainHandler
.2241	a2 00		ldx #$00			ldx 	#0
.2243	20 54 22	jsr $2254			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2246	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2248	8d 23 9f	sta $9f23			sta 	$9F23
.224b	28		plp				plp 						; if it was Poke then exit
.224c	b0 05		bcs $2253			bcs 	_CVWExit
.224e	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2250	8d 23 9f	sta $9f23			sta 	$9F23
.2253					_CVWExit:
.2253	60		rts				rts
.2254					SetUpTOSVRamAddress:
.2254	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2256	29 fe		and #$fe			and 	#$FE
.2258	15 b0		ora $b0,x			ora 	esInt3,x
.225a	d0 14		bne $2270			bne 	CVWValue
.225c	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.225e	8d 20 9f	sta $9f20			sta 	$9F20
.2261	b5 a0		lda $a0,x			lda 	esInt1,x
.2263	8d 21 9f	sta $9f21			sta	 	$9F21
.2266	b5 a8		lda $a8,x			lda 	esInt2,x
.2268	29 01		and #$01			and 	#1
.226a	09 10		ora #$10			ora 	#$10 				; step 1.
.226c	8d 22 9f	sta $9f22			sta 	$9F22
.226f	60		rts				rts
.2270					CVWValue:
.2270	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2272	20 18 15	jsr $1518		jsr	errorHandler
.2275					Command_VPeek:
.2275	38		sec				sec 						; one byte , CS
.2276	b0 01		bcs $2279			bcs 	CmdVideoRead
.2278					Command_VDeek:
.2278	18		clc				clc 						; two bytes, CC
.2279					CmdVideoRead:
.2279	08		php				php 						; save action on stack.
.227a	48		pha				pha 						; save stack position
.227b	a2 0a		ldx #$0a		ldx	#10
.227d	20 18 3c	jsr $3c18		jsr	mainHandler
.2280	a2 04		ldx #$04		ldx	#4
.2282	20 18 3c	jsr $3c18		jsr	mainHandler
.2285	68		pla				pla
.2286	aa		tax				tax
.2287	20 54 22	jsr $2254			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.228a	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.228c	95 a0		sta $a0,x			sta 	esInt1,x
.228e	95 a8		sta $a8,x			sta 	esInt2,x
.2290	95 b0		sta $b0,x			sta 	esInt3,x
.2292	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2295	95 98		sta $98,x			sta 	esInt0,x
.2297	28		plp				plp 						; check if DOKE (carry was clear)
.2298	b0 05		bcs $229f			bcs 	_CVRExit
.229a	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.229d	95 a0		sta $a0,x			sta 	esInt1,x
.229f					_CVRExit:
.229f	8a		txa				txa 						; return X position.
.22a0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c19					compressMode:
>0c19							.fill 	1
.0c1a					imageInfo:
>0c1a							.fill 	X16MaxImages
.0c5a					imageAddr2Low:
>0c5a							.fill  	X16MaxImages
.0c9a					imageAddr2High:
>0c9a							.fill  	X16MaxImages
.22a1					LoadVRAMFile:
.22a1	8a		txa				txa
.22a2	48		pha				pha
.22a3	98		tya				tya
.22a4	48		pha				pha
.22a5					_LVRLoop:
.22a5	20 81 23	jsr $2381			jsr 	LVFGet 						; get the next (never access direct)
.22a8	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.22aa	f0 42		beq $22ee			beq 	_LVRExit
.22ac	b0 5c		bcs $230a			bcs 	_LVRLoad 					; load data in ?
.22ae	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.22b0	90 11		bcc $22c3			bcc 	_LVRSetAddress
.22b2	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.22b4	f0 3d		beq $22f3			beq 	_LVRSetPalette
.22b6	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.22b8	90 2d		bcc $22e7			bcc 	_LVRSetCompress
.22ba	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.22bc	90 60		bcc $231e			bcc 	_LVRSetSprite
.22be	a2 01		ldx #$01			ldx 	#ErrorID_missing
.22c0	20 18 15	jsr $1518		jsr	errorHandler
.22c3					_LVRSetAddress:
.22c3	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.22c5	20 81 23	jsr $2381			jsr 	LVFGet
.22c8	85 2c		sta $2c				sta 	temp1
.22ca	a9 00		lda #$00			lda 	#0
.22cc	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.22ce	66 2c		ror $2c				ror 	temp1
.22d0	6a		ror a				ror		a
.22d1	46 2d		lsr $2d				lsr 	temp1+1
.22d3	66 2c		ror $2c				ror 	temp1
.22d5	6a		ror a				ror		a
.22d6	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.22d9	a5 2c		lda $2c				lda 	temp1
.22db	8d 21 9f	sta $9f21			sta 	$9F21
.22de	a5 2d		lda $2d				lda 	temp1+1
.22e0	09 10		ora #$10			ora 	#$10
.22e2	8d 22 9f	sta $9f22			sta 	$9F22
.22e5	d0 be		bne $22a5			bne 	_LVRLoop
.22e7					_LVRSetCompress:
.22e7	29 07		and #$07			and 	#7
.22e9	8d 19 0c	sta $0c19			sta 	compressMode
.22ec	10 b7		bpl $22a5			bpl 	_LVRLoop
.22ee					_LVRExit:
.22ee	68		pla				pla
.22ef	a8		tay				tay
.22f0	68		pla				pla
.22f1	aa		tax				tax
.22f2	60		rts				rts
.22f3					_LVRSetPalette:
.22f3	20 81 23	jsr $2381			jsr 	LVFGet 						; get palette id.
.22f6	20 ef 21	jsr $21ef			jsr 	PointToPaletteA 			; in palette.asm
.22f9	20 81 23	jsr $2381			jsr 	LVFGet 						; copy 12 bit palette data in.
.22fc	8d 23 9f	sta $9f23			sta 	$9F23
.22ff	20 81 23	jsr $2381			jsr 	LVFGet
.2302	29 0f		and #$0f			and 	#$0F
.2304	8d 23 9f	sta $9f23			sta 	$9F23
.2307	4c a5 22	jmp $22a5			jmp 	_LVRLoop
.230a					_LVRLoad:
.230a	ae 19 0c	ldx $0c19			ldx 	compressMode
.230d	d0 55		bne $2364			bne 	_LVRNotMode0
.230f	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.2311					_LVRLCopyX:
.2311	aa		tax				tax
.2312					_LVRLCopy:
.2312	20 81 23	jsr $2381			jsr 	LVFGet 						; write to data.
.2315	8d 23 9f	sta $9f23			sta 	$9F23
.2318	ca		dex				dex
.2319	d0 f7		bne $2312			bne 	_LVRLCopy
.231b	4c a5 22	jmp $22a5			jmp 	_LVRLoop
.231e					_LVRSetSprite:
.231e	48		pha				pha 								; save on stack
.231f	20 81 23	jsr $2381			jsr 	LVFGet 						; get the sprite number into X
.2322	aa		tax				tax
.2323	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.2325	b0 38		bcs $235f			bcs 	_LVRSSValue
.2327	68		pla				pla 								; restore the data held in the first byte
.2328	9d 1a 0c	sta $0c1a,x			sta 	imageInfo,x 				; and write into the sprite image table.
.232b					_LVRAlignVRAM:
.232b	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.232e	29 1f		and #$1f			and 	#$1F
.2330	f0 07		beq $2339			beq 	_LVRAligned
.2332	a9 00		lda #$00			lda 	#$00
.2334	8d 23 9f	sta $9f23			sta 	$9F23
.2337	f0 f2		beq $232b			beq 	_LVRAlignVRAM
.2339					_LVRAligned:
.2339	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.233c	4a		lsr a				lsr 	a 	 						; first halve into temp1
.233d	ad 21 9f	lda $9f21			lda 	$9F21
.2340	6a		ror a				ror 	a
.2341	85 2d		sta $2d				sta 	temp1+1
.2343	ad 20 9f	lda $9f20			lda 	$9F20
.2346	6a		ror a				ror 	a
.2347	85 2c		sta $2c				sta 	temp1
.2349	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.234b					_LVRShift:
.234b	46 2d		lsr $2d				lsr 	temp1+1
.234d	66 2c		ror $2c				ror 	temp1
.234f	88		dey				dey
.2350	d0 f9		bne $234b			bne 	_LVRShift
.2352	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.2354	9d 9a 0c	sta $0c9a,x			sta 	imageAddr2High,x
.2357	a5 2c		lda $2c				lda 	temp1
.2359	9d 5a 0c	sta $0c5a,x			sta 	imageAddr2Low,x
.235c	4c a5 22	jmp $22a5			jmp 	_LVRLoop
.235f					_LVRSSValue:
.235f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2361	20 18 15	jsr $1518		jsr	errorHandler
.2364					_LVRNotMode0:
.2364	e0 01		cpx #$01			cpx 	#1
.2366	d0 15		bne $237d			bne 	_LVRNotMode1
.2368	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.236a	c9 40		cmp #$40			cmp 	#$40
.236c	90 a3		bcc $2311			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.236e					_LVRRLEGroup:
.236e	29 3f		and #$3f			and 	#$3F
.2370	aa		tax				tax
.2371	20 81 23	jsr $2381			jsr 	LVFGet
.2374					_LVRLEGroupLoop:
.2374	8d 23 9f	sta $9f23			sta 	$9F23
.2377	ca		dex				dex
.2378	d0 fa		bne $2374			bne 	_LVRLEGroupLoop
.237a	4c a5 22	jmp $22a5			jmp 	_LVRLoop
.237d					_LVRNotMode1:
>237d	db						.byte 	$DB
.237e	4c 7d 23	jmp $237d			jmp 	_LVRNotMode1
.2381	84 32		sty $32		LVFGet:	sty 	tempShort
.2383	a0 00		ldy #$00			ldy 	#0
.2385	b1 2a		lda ($2a),y			lda 	(temp0),y
.2387	a4 32		ldy $32				ldy	 	tempShort
.2389	e6 2a		inc $2a				inc 	temp0
.238b	d0 02		bne $238f			bne 	_LVFGExit
.238d	e6 2b		inc $2b				inc 	temp0+1
.238f					_LVFGExit:
.238f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2390					section_end_extension:
.2390					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2390					floatingpointHandler:
.2390	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2392	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.2395					section_end_floatingpoint:
.2395					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2395					ColdStartEntry:
.2395	a2 ff		ldx #$ff			ldx 	#$FF
.2397	9a		txs				txs
.2398	20 21 24	jsr $2421			jsr 	ForceStandardMode
.239b	a2 04		ldx #$04		ldx	#4
.239d	20 f6 14	jsr $14f6		jsr	deviceHandler
.23a0	a0 ff		ldy #$ff			ldy 	#255
.23a2					_CSBanner:
.23a2	c8		iny				iny
.23a3	b9 c9 23	lda $23c9,y			lda 	Intro,y
.23a6	f0 14		beq $23bc			beq 	_CSStart
.23a8	c9 08		cmp #$08			cmp 	#8
.23aa	90 08		bcc $23b4			bcc 	_CSInk
.23ac	a2 16		ldx #$16		ldx	#22
.23ae	20 f6 14	jsr $14f6		jsr	deviceHandler
.23b1	4c a2 23	jmp $23a2			jmp 	_CSBanner
.23b4					_CSInk:
.23b4	a2 08		ldx #$08		ldx	#8
.23b6	20 f6 14	jsr $14f6		jsr	deviceHandler
.23b9	4c a2 23	jmp $23a2			jmp 	_CSBanner
.23bc					_CSStart:
.23bc	a2 16		ldx #$16		ldx	#22
.23be	20 18 3c	jsr $3c18		jsr	mainHandler
.23c1	a2 06		ldx #$06		ldx	#6
.23c3	20 18 3c	jsr $3c18		jsr	mainHandler
.23c6	4c e1 24	jmp $24e1			jmp 	WarmStartEntry
>23c9	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>23d1	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>23e1	20 2a 2a 2a 0d 0d
>23e7	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>23ef	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>23ff	32 30 32 31 0d 0d
>2405	02 42 61 73 69 63 20				.text 	2,"Basic "
>240c	30 2e 32 30					.text "0.20"
>2410	20 28						.text 	" ("
>2412	33 30 2d 4d 61 72 2d 32				.text "30-Mar-2021"
>241a	30 32 31
>241d	29 0d 0d 00					.text 	")",13,13,0
.2421					ForceStandardMode:
.2421	a9 fe		lda #$fe			lda 	#$FE
.2423	20 69 18	jsr $1869		jsr	extensionHandler
.2426	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2427					DeleteLine:
.2427	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.242a	85 2a		sta $2a				sta 	temp0
.242c	ad c9 0a	lda $0ac9			lda 	basePage+1
.242f	85 2b		sta $2b				sta 	temp0+1
.2431	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.2433	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.2435	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2437	d0 07		bne $2440			bne 	_DLNext
.2439	c8		iny				iny
.243a	a5 a0		lda $a0				lda 	esInt1
.243c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.243e	f0 06		beq $2446			beq 	_DLFound
.2440	20 64 24	jsr $2464	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2443	d0 ec		bne $2431			bne 	_DLLoop
.2445	60		rts				rts
.2446					_DLFound:
.2446	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2448	b1 2a		lda ($2a),y			lda 	(temp0),y
.244a	a8		tay				tay 								; so we copy from (temp0),y
.244b	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.244d					_DLCopyDown:
.244d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.244f	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2451	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.2453	d0 02		bne $2457			bne 	_DLNoCarry
.2455	e6 2b		inc $2b				inc 	temp0+1
.2457					_DLNoCarry:
.2457	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.2459	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.245b	d0 f0		bne $244d			bne 	_DLCopyDown
.245d	a5 2b		lda $2b				lda 	temp0+1
.245f	c5 36		cmp $36				cmp 	lowMemory+1
.2461	d0 ea		bne $244d			bne 	_DLCopyDown
.2463	60		rts				rts
.2464					IAdvanceTemp0:
.2464	84 32		sty $32				sty 	tempShort
.2466	18		clc				clc
.2467	a0 00		ldy #$00			ldy 	#0 							; get offset
.2469	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.246b	65 2a		adc $2a				adc 	temp0
.246d	85 2a		sta $2a				sta 	temp0
.246f	90 02		bcc $2473			bcc 	_IATNoCarry
.2471	e6 2b		inc $2b				inc 	temp0+1
.2473					_IATNoCarry:
.2473	b1 2a		lda ($2a),y			lda 	(temp0),y
.2475	a4 32		ldy $32				ldy 	tempShort
.2477	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.2479	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.247a					InsertLine:
.247a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.247d	85 2a		sta $2a				sta 	temp0
.247f	ad c9 0a	lda $0ac9			lda 	basePage+1
.2482	85 2b		sta $2b				sta 	temp0+1
.2484					_ILLoop:
.2484	a0 01		ldy #$01			ldy 	#1
.2486	b1 2a		lda ($2a),y			lda 	(temp0),y
.2488	c5 98		cmp $98				cmp 	esInt0
.248a	c8		iny				iny
.248b	b1 2a		lda ($2a),y			lda 	(temp0),y
.248d	e5 a0		sbc $a0				sbc 	esInt1
.248f	b0 05		bcs $2496			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2491	20 64 24	jsr $2464			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2494	d0 ee		bne $2484			bne 	_ILLoop
.2496					_ILFound:
.2496	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.2498	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.249a	a5 36		lda $36				lda 	lowMemory+1
.249c	85 2d		sta $2d				sta 	temp1+1
.249e	ad 17 0e	lda $0e17			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.24a1	18		clc				clc 								; add 3 for the line number and offset.
.24a2	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.24a4	a8		tay				tay
.24a5	a2 00		ldx #$00			ldx 	#0
.24a7	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.24a9	91 2c		sta ($2c),y			sta 	(temp1),y
.24ab	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.24ad	c5 2a		cmp $2a				cmp 	temp0
.24af	d0 06		bne $24b7			bne 	_ILMNext
.24b1	a5 2d		lda $2d				lda 	temp1+1
.24b3	c5 2b		cmp $2b				cmp 	temp0+1
.24b5	f0 0b		beq $24c2			beq 	_ILMCopy
.24b7					_ILMNext:
.24b7	a5 2c		lda $2c				lda 	temp1
.24b9	d0 02		bne $24bd			bne 	_ILNoBorrow
.24bb	c6 2d		dec $2d				dec 	temp1+1
.24bd					_ILNoBorrow:
.24bd	c6 2c		dec $2c				dec 	temp1
.24bf	4c a7 24	jmp $24a7			jmp 	_ILMove 					; and go round again
.24c2					_ILMCopy:
.24c2	98		tya				tya 								; Y is the offset of the new line.
.24c3	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.24c5	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.24c7	a5 98		lda $98				lda 	esInt0
.24c9	91 2a		sta ($2a),y			sta 	(temp0),y
.24cb	c8		iny				iny
.24cc	a5 a0		lda $a0				lda 	esInt1
.24ce	91 2a		sta ($2a),y			sta 	(temp0),y
.24d0	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.24d2					_ILMCopy2:
.24d2	b1 28		lda ($28),y			lda 	(codePtr),y
.24d4	c8		iny				iny
.24d5	c8		iny				iny
.24d6	c8		iny				iny
.24d7	91 2a		sta ($2a),y			sta 	(temp0),y
.24d9	88		dey				dey
.24da	88		dey				dey
.24db	cc 17 0e	cpy $0e17			cpy 	tokenBufferIndex
.24de	d0 f2		bne $24d2			bne 	_ILMCopy2
.24e0	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.24e1					WarmStartEntry:
.24e1	a2 ff		ldx #$ff			ldx 	#$FF
.24e3	9a		txs				txs
.24e4	20 21 24	jsr $2421			jsr 	ForceStandardMode
.24e7	a9 02		lda #$02			lda 	#2							; green text.
.24e9	a2 08		ldx #$08		ldx	#8
.24eb	20 f6 14	jsr $14f6		jsr	deviceHandler
.24ee	a2 0c		ldx #$0c		ldx	#12
.24f0	20 f6 14	jsr $14f6		jsr	deviceHandler
.24f3	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.24f5	85 28		sta $28				sta 	codePtr
.24f7	a5 2b		lda $2b				lda 	temp0+1
.24f9	85 29		sta $29				sta 	codePtr+1
.24fb	a2 06		ldx #$06		ldx	#6
.24fd	20 f6 14	jsr $14f6		jsr	deviceHandler
.2500	a2 08		ldx #$08		ldx	#8
.2502	20 58 47	jsr $4758		jsr	tokeniserHandler
.2505	c9 00		cmp #$00			cmp 	#0
.2507	f0 25		beq $252e			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2509	a9 14		lda #$14			lda 	#(tokenHeader) & $FF
.250b	85 28		sta $28				sta 	codePtr
.250d	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.250f	85 29		sta $29				sta 	1+(codePtr)
.2511	ad 17 0d	lda $0d17			lda 	tokenBuffer 				; is it a blank line, go get another line.
.2514	c9 80		cmp #$80			cmp 	#$80
.2516	f0 c9		beq $24e1			beq 	WarmStartEntry
.2518	29 c0		and #$c0			and 	#$C0						; does it start with a number
.251a	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.251c	f0 15		beq $2533			beq 	HasLineNumber
.251e	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2520	8d 14 0d	sta $0d14			sta 	tokenHeader 				; fake program line.
.2523	8d 15 0d	sta $0d15			sta 	tokenHeader+1
.2526	8d 16 0d	sta $0d16			sta 	tokenHeader+2
.2529	a2 18		ldx #$18		ldx	#24
.252b	20 18 3c	jsr $3c18		jsr	mainHandler
.252e					WSEError:
.252e	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2530	20 18 15	jsr $1518		jsr	errorHandler
.2533					HasLineNumber:
.2533	a0 03		ldy #$03			ldy 	#3 							; get line number
.2535	a9 00		lda #$00			lda 	#0
.2537	a2 0a		ldx #$0a		ldx	#10
.2539	20 18 3c	jsr $3c18		jsr	mainHandler
.253c	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.253e	05 b0		ora $b0				ora 	esInt3
.2540	d0 ec		bne $252e			bne 	WSEError
.2542	98		tya				tya 								; make codePtr point to code after the line number.
.2543	18		clc				clc 								; by skipping over the tokenised number.
.2544	65 28		adc $28				adc 	codePtr
.2546	85 28		sta $28				sta 	codePtr
.2548	90 02		bcc $254c			bcc		_HLNNoCarry
.254a	e6 29		inc $29				inc 	codePtr+1
.254c					_HLNNoCarry:
.254c	98		tya				tya 								; subtract that offset from the code buffer index
.254d	38		sec				sec
.254e	49 ff		eor #$ff			eor 	#$FF
.2550	6d 17 0e	adc $0e17			adc 	tokenBufferIndex
.2553	18		clc				clc 								; add space allowing for header & $80 trailer
.2554	69 04		adc #$04			adc 	#4
.2556	8d 17 0e	sta $0e17			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2559	20 27 24	jsr $2427			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.255c					_HLNNoDelete:
.255c	ad 17 0e	lda $0e17			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.255f	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2561	f0 0c		beq $256f			beq 	_HLMEditDone
.2563	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.2565	18		clc				clc 								; workspace (1k)
.2566	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.2568	c5 34		cmp $34				cmp 	highMemory+1
.256a	b0 0b		bcs $2577			bcs 	_HLMMemory 					; nope, won't allowit.
.256c	20 7a 24	jsr $247a			jsr 	InsertLine 					; insert the line in
.256f					_HLMEditDone:
.256f	a2 06		ldx #$06		ldx	#6
.2571	20 18 3c	jsr $3c18		jsr	mainHandler
.2574	4c e1 24	jmp $24e1			jmp 	WarmStartEntry
.2577					_HLMMemory:
.2577	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2579	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.257c					interactionHandler:
.257c	7c 7f 25	jmp ($257f,x)			jmp 	(interactionVectors,x)
.257f					interactionVectors:
>257f	85 25					.word _DummyControlHandler ; index 0
>2581	95 23					.word ColdStartEntry       ; index 2
>2583	e1 24					.word WarmStartEntry       ; index 4
.2585					_DummyControlHandler:
.2585	60		rts			rts

;******  Return to file: basic.asm

.2586					section_end_interaction:
.2586					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cda					dataPtr:
>0cda							.fill 	2
.0cdc					dataIndex:
>0cdc							.fill 	1
.2586					CommandRead:
.2586	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2588	20 cb 34	jsr $34cb			jsr 	EvaluateReference
.258b	20 cc 25	jsr $25cc			jsr 	SwapDPCP 					; use the data pointer.
.258e	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2590	c8		iny				iny
.2591	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2593	f0 07		beq $259c			beq 	_CRInData
.2595	88		dey				dey
.2596	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2598	aa		tax				tax
.2599	20 cd 2c	jsr $2ccd			jsr 	ScanForward
.259c					_CRInData:
.259c	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.259e	20 73 34	jsr $3473			jsr 	Evaluate
.25a1	ca		dex				dex 								; and write the value.
.25a2	20 20 28	jsr $2820			jsr 	WriteValue
.25a5	20 cc 25	jsr $25cc			jsr 	SwapDPCP 					; get the code pointer back.
.25a8	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.25aa	c8		iny				iny
.25ab	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.25ad	f0 d7		beq $2586			beq 	CommandRead
.25af	88		dey				dey
.25b0	60		rts				rts
.25b1					CommandData:
.25b1	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.25b3	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.25b5	20 cd 2c	jsr $2ccd			jsr 	ScanForward
.25b8	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.25b9	60		rts				rts
.25ba					CommandRestore:
.25ba	ad c8 0a	lda $0ac8			lda 	basePage
.25bd	8d da 0c	sta $0cda			sta 	dataPtr
.25c0	ad c9 0a	lda $0ac9			lda 	basePage+1
.25c3	8d db 0c	sta $0cdb			sta 	dataPtr+1
.25c6	a9 03		lda #$03			lda 	#3
.25c8	8d dc 0c	sta $0cdc			sta 	dataIndex
.25cb	60		rts				rts
.25cc					SwapDPCP:
.25cc	8a		txa				txa
.25cd	48		pha				pha
.25ce	98		tya				tya 								; swap Y, DataIndex
.25cf	ac dc 0c	ldy $0cdc			ldy 	DataIndex
.25d2	8d dc 0c	sta $0cdc			sta 	DataIndex
.25d5	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.25d7	ae da 0c	ldx $0cda			ldx 	dataptr
.25da	8d da 0c	sta $0cda			sta 	dataPtr
.25dd	86 28		stx $28				stx 	codePtr
.25df	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.25e1	ae db 0c	ldx $0cdb			ldx 	dataptr+1
.25e4	8d db 0c	sta $0cdb			sta 	dataPtr+1
.25e7	86 29		stx $29				stx 	codePtr+1
.25e9	68		pla				pla
.25ea	aa		tax				tax
.25eb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.25ec					CommandGOSUB:
.25ec	20 90 34	jsr $3490			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.25ef	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.25f1	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.25f3	20 c5 3b	jsr $3bc5			jsr 	RSClaim
.25f6	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.25f8	20 f1 3b	jsr $3bf1			jsr 	RSSavePosition
.25fb	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.25fd	f0 1b		beq $261a			beq 	GotoTOS 					; and do a GOTO there.
.25ff					CommandRETURN:
.25ff	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2601	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2603	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2605	f0 05		beq $260c			beq 	_isok
.2607	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2609	20 18 15	jsr $1518		jsr	errorHandler
.260c					_isok:
.260c	a9 01		lda #$01			lda 	#1
.260e	20 04 3c	jsr $3c04			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2611	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2613	20 e7 3b	jsr $3be7			jsr 	RSFree
.2616	60		rts				rts
.2617					CommandGOTO:
.2617	20 90 34	jsr $3490			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.261a					GotoTOS:
.261a	20 b1 2f	jsr $2fb1			jsr 	ResetCodeAddress 			; simple search.
.261d					_GotoSearch:
.261d	a0 00		ldy #$00			ldy 	#0 							; get offset
.261f	b1 28		lda ($28),y			lda 	(codePtr),y
.2621	f0 21		beq $2644			beq 	_GotoError 					; not found.
.2623	c8		iny				iny									; check LSB match
.2624	b1 28		lda ($28),y			lda 	(codePtr),y
.2626	d5 98		cmp $98,x			cmp 	esInt0,x
.2628	d0 07		bne $2631			bne 	_GotoNext
.262a	c8		iny				iny
.262b	b1 28		lda ($28),y			lda 	(codePtr),y
.262d	d5 a0		cmp $a0,x			cmp 	esInt1,x
.262f	f0 10		beq $2641			beq 	_GotoFound
.2631					_GotoNext:
.2631	a0 00		ldy #$00			ldy 	#0 							; go next line
.2633	b1 28		lda ($28),y			lda 	(codePtr),y
.2635	18		clc				clc
.2636	65 28		adc $28				adc 	codePtr
.2638	85 28		sta $28				sta 	codePtr
.263a	90 e1		bcc $261d			bcc 	_GotoSearch
.263c	e6 29		inc $29				inc 	codePtr+1
.263e	4c 1d 26	jmp $261d			jmp 	_GotoSearch
.2641					_GotoFound:
.2641	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2643	60		rts				rts
.2644					_GotoError:
.2644	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2646	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cdd					InputBuffer:
>0cdd							.fill 	MaxInputSize+1
.2649					Command_Input:
.2649	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.264b	c8		iny				iny
.264c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.264e	f0 f9		beq $2649			beq 	Command_Input
.2650	88		dey				dey 							; undo consume
.2651	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2653	f0 54		beq $26a9			beq 	_CIExit 				; : or EOL, exit
.2655	c9 80		cmp #$80			cmp 	#TOK_EOL
.2657	f0 50		beq $26a9			beq 	_CIExit
.2659	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.265b	90 12		bcc $266f			bcc 	_CIVariable
.265d	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.265f	d0 43		bne $26a4			bne 	_CISyntax
.2661	a2 00		ldx #$00			ldx 	#0
.2663	20 87 34	jsr $3487			jsr 	EvaluateString 			; evaluate and print string
.2666	20 82 28	jsr $2882			jsr 	TOSToTemp0
.2669	20 78 27	jsr $2778			jsr 	PrintString
.266c	4c 49 26	jmp $2649			jmp 	Command_Input
.266f					_CIVariable:
.266f	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2671	20 cb 34	jsr $34cb			jsr 	EvaluateReference  		; this is where its going
.2674					_CIRetry:
.2674	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2676	a2 14		ldx #$14		ldx	#20
.2678	20 f6 14	jsr $14f6		jsr	deviceHandler
.267b	98		tya				tya
.267c	48		pha				pha
.267d	20 bd 26	jsr $26bd			jsr 	InputString 			; input a string (manually)
.2680	a2 01		ldx #$01			ldx 	#1
.2682	20 aa 26	jsr $26aa			jsr 	BufferToStackX 			; make stack,x ref input string.
.2685	a5 90		lda $90				lda 	esType 					; if target type numeric
.2687	29 40		and #$40			and 	#$40 					; then convert to number
.2689	d0 11		bne $269c			bne 	_CIWrite
.268b	a2 01		ldx #$01			ldx 	#1
.268d	20 82 28	jsr $2882			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2690	a9 0a		lda #$0a			lda 	#10
.2692	20 98 39	jsr $3998			jsr 	MInt32FromString 		; convert it back from a string.
.2695	68		pla				pla
.2696	a8		tay				tay
.2697	b0 03		bcs $269c			bcs 	_CIWrite 				; successfully converted.
.2699	18		clc				clc 							; default fail FP conversion
.269a	90 d8		bcc $2674			bcc		_CIRetry				; failed, try again.
.269c					_CIWrite:
.269c	a2 00		ldx #$00			ldx 	#0
.269e	20 20 28	jsr $2820			jsr 	WriteValue
.26a1	4c 49 26	jmp $2649			jmp 	Command_Input
.26a4					_CISyntax:
.26a4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.26a6	20 18 15	jsr $1518		jsr	errorHandler
.26a9					_CIExit:
.26a9	60		rts				rts
.26aa					BufferToStackX:
.26aa	a9 dd		lda #$dd			lda 	#InputBuffer & $FF
.26ac	95 98		sta $98,x			sta 	esInt0,x
.26ae	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.26b0	95 a0		sta $a0,x			sta 	esInt1,x
.26b2	a9 00		lda #$00			lda 	#0
.26b4	95 a8		sta $a8,x			sta 	esInt2,x
.26b6	95 b0		sta $b0,x			sta 	esInt3,x
.26b8	a9 40		lda #$40			lda 	#$40
.26ba	95 90		sta $90,x			sta 	esType,x
.26bc	60		rts				rts
.26bd					InputString:
.26bd	a9 00		lda #$00			lda 	#0
.26bf	8d dd 0c	sta $0cdd			sta 	InputBuffer
.26c2					_InputLoop:
.26c2	a2 02		ldx #$02		ldx	#2
.26c4	20 f6 14	jsr $14f6		jsr	deviceHandler
.26c7	a2 0a		ldx #$0a		ldx	#10
.26c9	20 f6 14	jsr $14f6		jsr	deviceHandler
.26cc	c9 00		cmp #$00			cmp 	#0
.26ce	f0 f2		beq $26c2			beq 	_InputLoop
.26d0	c9 08		cmp #$08			cmp 	#8
.26d2	f0 19		beq $26ed			beq 	_InputBackspace
.26d4	c9 0d		cmp #$0d			cmp 	#13
.26d6	f0 21		beq $26f9			beq 	_InputExit
.26d8	ae dd 0c	ldx $0cdd			ldx 	InputBuffer
.26db	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.26dd	f0 e3		beq $26c2			beq 	_InputLoop
.26df	9d de 0c	sta $0cde,x			sta 	InputBuffer+1,x 		; write char
.26e2	ee dd 0c	inc $0cdd			inc 	InputBuffer 			; advance count.
.26e5					_InputPrintLoop:
.26e5	a2 14		ldx #$14		ldx	#20
.26e7	20 f6 14	jsr $14f6		jsr	deviceHandler
.26ea	4c c2 26	jmp $26c2			jmp	 	_InputLoop
.26ed					_InputBackspace:
.26ed	ad dd 0c	lda $0cdd			lda 	InputBuffer 			; at start
.26f0	f0 d0		beq $26c2			beq 	_InputLoop
.26f2	ce dd 0c	dec $0cdd			dec 	InputBuffer
.26f5	a9 08		lda #$08			lda 	#8
.26f7	d0 ec		bne $26e5			bne 	_InputPrintLoop
.26f9					_InputExit:
.26f9	a2 06		ldx #$06		ldx	#6
.26fb	20 f6 14	jsr $14f6		jsr	deviceHandler
.26fe	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cfe					lastPrintToken:
>0cfe							.fill 	1
.26ff					Command_Print:
.26ff	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2701	8d fe 0c	sta $0cfe			sta 	lastPrintToken
.2704	88		dey				dey
.2705					_PrintLoopSkip:
.2705	c8		iny				iny
.2706					_PrintLoop:
.2706	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2708	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.270a	f0 5b		beq $2767			beq 	_PrintExit
.270c	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.270e	f0 57		beq $2767			beq 	_PrintExit
.2710	8d fe 0c	sta $0cfe			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2713	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2715	f0 ee		beq $2705			beq 	_PrintLoopSkip
.2717	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2719	f0 3c		beq $2757			beq	 	_PrintNewLine
.271b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.271d	f0 40		beq $275f			beq 	_PrintTab
.271f	20 71 34	jsr $3471			jsr 	EvaluateRoot 				; evaluate something at the root
.2722	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2724	85 2a		sta $2a				sta 	temp0
.2726	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2728	85 2b		sta $2b				sta 	1+(temp0)
.272a	a5 90		lda $90				lda 	esType 						; get type
.272c	f0 15		beq $2743			beq		_PrintInteger
.272e	4a		lsr a				lsr 	a 							; check for floating point
.272f	b0 08		bcs $2739			bcs 	_PrintFloat
.2731					_PrintString:
.2731	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2733	20 82 28	jsr $2882			jsr 	TOSToTemp0
.2736	4c 51 27	jmp $2751			jmp 	_PrintTemp0 				; print no leading space.
.2739					_PrintFloat:
.2739	a9 00		lda #$00			lda 	#0 							; stack level.
.273b	a2 16		ldx #$16		ldx	#22
.273d	20 90 23	jsr $2390		jsr	floatingpointHandler
.2740	4c 4a 27	jmp $274a			jmp 	_PrintSpaceTemp0
.2743					_PrintInteger:
.2743	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2745	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2747	20 80 3a	jsr $3a80			jsr 	MInt32ToString				; convert to text
.274a					_PrintSpaceTemp0:
.274a	a9 20		lda #$20			lda 	#32
.274c	a2 14		ldx #$14		ldx	#20
.274e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2751					_PrintTemp0:
.2751	20 78 27	jsr $2778			jsr 	PrintString
.2754	4c 06 27	jmp $2706			jmp 	_PrintLoop
.2757					_PrintNewLine:
.2757	a2 06		ldx #$06		ldx	#6
.2759	20 f6 14	jsr $14f6		jsr	deviceHandler
.275c	4c 05 27	jmp $2705			jmp 	_PrintLoopSkip
.275f					_PrintTab:
.275f	a2 1a		ldx #$1a		ldx	#26
.2761	20 f6 14	jsr $14f6		jsr	deviceHandler
.2764	4c 05 27	jmp $2705			jmp 	_PrintLoopSkip
.2767					_PrintExit:
.2767	ad fe 0c	lda $0cfe			lda		lastPrintToken 				; check last token
.276a	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.276c	f0 09		beq $2777			beq 	_PrintExit2
.276e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2770	f0 05		beq $2777			beq 	_PrintExit2
.2772	a2 06		ldx #$06		ldx	#6
.2774	20 f6 14	jsr $14f6		jsr	deviceHandler
.2777					_PrintExit2:
.2777	60		rts				rts
.2778					PrintString:
.2778	8a		txa				txa
.2779	48		pha				pha
.277a	98		tya				tya
.277b	48		pha				pha
.277c	a0 00		ldy #$00			ldy 	#0							; get length
.277e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2780	aa		tax				tax 								; into X
.2781	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2783	f0 10		beq $2795			beq 	_PSExit
.2785	ca		dex				dex
.2786	8a		txa				txa
.2787	48		pha				pha
.2788	c8		iny				iny
.2789	b1 2a		lda ($2a),y			lda 	(temp0),y
.278b	a2 14		ldx #$14		ldx	#20
.278d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2790	68		pla				pla
.2791	aa		tax				tax
.2792	4c 81 27	jmp $2781			jmp 	_PSLoop
.2795					_PSExit:
.2795	68		pla				pla
.2796	a8		tay				tay
.2797	68		pla				pla
.2798	aa		tax				tax
.2799	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.279a					Command_CLS:
.279a	a2 04		ldx #$04		ldx	#4
.279c	20 f6 14	jsr $14f6		jsr	deviceHandler
.279f	60		rts				rts
.27a0					Command_Ink:
.27a0	a2 00		ldx #$00			ldx 	#0
.27a2	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger
.27a5	a2 08		ldx #$08		ldx	#8
.27a7	20 f6 14	jsr $14f6		jsr	deviceHandler
.27aa	60		rts				rts
.27ab					Command_Paper:
.27ab	a2 00		ldx #$00			ldx 	#0
.27ad	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger
.27b0	a2 12		ldx #$12		ldx	#18
.27b2	20 f6 14	jsr $14f6		jsr	deviceHandler
.27b5	60		rts				rts
.27b6					Command_Locate:
.27b6	a2 00		ldx #$00			ldx 	#0
.27b8	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger
.27bb	20 aa 3b	jsr $3baa			jsr 	CheckComma
.27be	e8		inx				inx
.27bf	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger
.27c2	98		tya				tya
.27c3	48		pha				pha
.27c4	a4 99		ldy $99				ldy 	esInt0+1
.27c6	a5 98		lda $98				lda 	esInt0
.27c8	a2 10		ldx #$10		ldx	#16
.27ca	20 f6 14	jsr $14f6		jsr	deviceHandler
.27cd	68		pla				pla
.27ce	a8		tay				tay
.27cf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.27d0					Command_VDU:
.27d0	20 90 34	jsr $3490			jsr 	EvaluateRootInteger 			; get integer at root.
.27d3	a5 98		lda $98				lda 	esInt0
.27d5	a2 14		ldx #$14		ldx	#20
.27d7	20 f6 14	jsr $14f6		jsr	deviceHandler
.27da					_CVNext:
.27da	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.27dc	c8		iny				iny
.27dd	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.27df	f0 ef		beq $27d0			beq 	Command_VDU
.27e1	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.27e3	d0 0a		bne $27ef			bne 	_CVExit
.27e5	a5 a0		lda $a0				lda 	esInt1
.27e7	a2 14		ldx #$14		ldx	#20
.27e9	20 f6 14	jsr $14f6		jsr	deviceHandler
.27ec	4c da 27	jmp $27da			jmp 	_CVNext
.27ef	88		dey		_CVExit:dey
.27f0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.27f1					Command_Assert:
.27f1	20 90 34	jsr $3490			jsr 	EvaluateRootInteger 		; what is being asserted.
.27f4	20 51 3b	jsr $3b51			jsr 	MInt32Zero 					; is it true ?
.27f7	f0 01		beq $27fa			beq 	_CAError
.27f9	60		rts				rts
.27fa					_CAError:
.27fa	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.27fc	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.27ff					Command_Dim:
.27ff	a2 04		ldx #$04		ldx	#4
.2801	20 29 4b	jsr $4b29		jsr	variableHandler
.2804	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2806	c8		iny				iny
.2807	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2809	f0 f4		beq $27ff			beq 	Command_Dim
.280b	88		dey				dey 								; unpick get
.280c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.280d					CommandLet:
.280d	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.280f	20 cb 34	jsr $34cb			jsr 	EvaluateReference
.2812	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2814	20 92 3b	jsr $3b92			jsr 	CheckToken
.2817	e8		inx				inx 								; do RHS
.2818	20 73 34	jsr $3473			jsr 	Evaluate 					; evaluate and dereference
.281b	ca		dex				dex
.281c	20 20 28	jsr $2820			jsr 	WriteValue 					; write it out
.281f	60		rts				rts
.2820					WriteValue:
.2820	98		tya				tya
.2821	48		pha				pha
.2822	20 82 28	jsr $2882			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2825	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2827	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2829	29 40		and #$40			and 	#$40
.282b	d0 50		bne $287d			bne		_WVType
.282d	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.282f	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2831	29 40		and #$40			and 	#$40
.2833	d0 1f		bne $2854			bne 	_WVCopyString
.2835	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2837	15 91		ora $91,x			ora 	esType+1,x
.2839	4a		lsr a				lsr 	a
.283a	90 22		bcc $285e			bcc 	_WVCopyData4 				; copy 4 data bytes.
.283c	b5 90		lda $90,x			lda 	esType,x
.283e	4a		lsr a				lsr 	a
.283f	90 3c		bcc $287d			bcc 	_WVType
.2841	e8		inx				inx 								; force the value being written to be a float.
.2842	20 d5 30	jsr $30d5			jsr 	BPMakeFloat
.2845	ca		dex				dex
.2846	20 82 28	jsr $2882			jsr 	TOSToTemp0 					; set Temp0 to write address
.2849	e8		inx				inx
.284a	8a		txa				txa
.284b	a2 22		ldx #$22		ldx	#34
.284d	20 90 23	jsr $2390		jsr	floatingpointHandler
.2850	aa		tax				tax
.2851	4c 7a 28	jmp $287a			jmp 	_WVCopyExit
.2854					_WVCopyString:
.2854	8a		txa				txa
.2855	a2 10		ldx #$10		ldx	#16
.2857	20 d5 3e	jsr $3ed5		jsr	stringHandler
.285a	aa		tax				tax
.285b	4c 7a 28	jmp $287a			jmp 	_WVCopyExit
.285e					_WVCopyData4:
.285e	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2860	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2862	d0 10		bne $2874			bne 	_WVCopyData1
.2864	a0 03		ldy #$03			ldy 	#3
.2866	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2868	91 2a		sta ($2a),y			sta 	(temp0),y
.286a	88		dey				dey
.286b	b5 a9		lda $a9,x			lda 	esInt2+1,x
.286d	91 2a		sta ($2a),y			sta 	(temp0),y
.286f	88		dey				dey
.2870	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2872	91 2a		sta ($2a),y			sta 	(temp0),y
.2874					_WVCopyData1:
.2874	a0 00		ldy #$00			ldy 	#0
.2876	b5 99		lda $99,x			lda 	esInt0+1,x
.2878	91 2a		sta ($2a),y			sta 	(temp0),y
.287a					_WVCopyExit:
.287a	68		pla				pla
.287b	a8		tay				tay
.287c	60		rts				rts
.287d					_WVType:
.287d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.287f	20 18 15	jsr $1518		jsr	errorHandler
.2882					TOSToTemp0:
.2882	b5 98		lda $98,x			lda 	esInt0,x
.2884	85 2a		sta $2a				sta 	temp0
.2886	b5 a0		lda $a0,x			lda 	esInt1,x
.2888	85 2b		sta $2b				sta 	temp0+1
.288a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.288b					Command_Poke:
.288b	a9 01		lda #$01			lda 	#1
.288d	d0 06		bne $2895			bne 	PokeGeneral
.288f					Command_Doke:
.288f	a9 02		lda #$02			lda 	#2
.2891	d0 02		bne $2895			bne 	PokeGeneral
.2893					Command_Loke:
.2893	a9 03		lda #$03			lda 	#3
.2895					PokeGeneral:
.2895	48		pha				pha 								; save id (PDL = 123)
.2896	20 90 34	jsr $3490			jsr 	EvaluateRootInteger 		; target address
.2899	20 aa 3b	jsr $3baa			jsr	 	CheckComma
.289c	e8		inx				inx
.289d	20 92 34	jsr $3492			jsr 	EvaluateInteger 			; what value to POKE ?
.28a0	ca		dex				dex
.28a1	20 82 28	jsr $2882			jsr 	TOSToTemp0 					; temp0 points to the target address
.28a4	84 32		sty $32				sty 	tempShort 					; save Y
.28a6	68		pla				pla 								; get copy type (1-3) and dispatch
.28a7	aa		tax				tax
.28a8	ca		dex				dex
.28a9	f0 14		beq $28bf			beq 	_Poke1
.28ab	ca		dex				dex
.28ac	f0 0b		beq $28b9			beq 	_Poke2
.28ae	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.28b0	a5 b1		lda $b1				lda 	esInt3+1
.28b2	91 2a		sta ($2a),y			sta 	(temp0),y
.28b4	88		dey				dey
.28b5	a5 a9		lda $a9				lda 	esInt2+1
.28b7	91 2a		sta ($2a),y			sta 	(temp0),y
.28b9					_Poke2:
.28b9	a0 01		ldy #$01			ldy 	#1
.28bb	a5 a1		lda $a1				lda 	esInt1+1
.28bd	91 2a		sta ($2a),y			sta 	(temp0),y
.28bf					_Poke1:
.28bf	a0 00		ldy #$00			ldy 	#0
.28c1	a5 99		lda $99				lda 	esInt0+1
.28c3	91 2a		sta ($2a),y			sta 	(temp0),y
.28c5	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.28c7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.28c8					Command_Rem:
.28c8					Command_Rem2:
.28c8	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.28ca	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.28cc	d0 06		bne $28d4			bne 	_CRNotString
.28ce	c8		iny				iny
.28cf	98		tya				tya
.28d0	38		sec				sec
.28d1	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.28d3	a8		tay				tay
.28d4					_CRNotString:
.28d4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.28d5					CommandStop:
.28d5	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.28d7	20 18 15	jsr $1518		jsr	errorHandler
.28da					CommandEnd:
.28da	4c 13 3c	jmp $3c13			jmp 	WarmStart
.28dd					CommandXemu:
.28dd	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.28e0					AdvanceNextLine:
.28e0	a0 00		ldy #$00			ldy 	#0 							; get offset
.28e2	b1 28		lda ($28),y			lda 	(codePtr),y
.28e4	18		clc				clc 								; add to codePtr
.28e5	65 28		adc $28				adc 	codePtr
.28e7	85 28		sta $28				sta 	codePtr
.28e9	90 02		bcc $28ed			bcc 	_ANLNoCarry
.28eb	e6 29		inc $29				inc 	codePtr+1
.28ed					_ANLNoCarry:
.28ed	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.28ef	f0 e9		beq $28da			beq 	CommandEnd 					; execute END
.28f1	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.28f3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.28f4					Command_FOR:
.28f4	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.28f6	a2 0b		ldx #$0b			ldx 	#11
.28f8	20 c5 3b	jsr $3bc5			jsr 	RSClaim
.28fb	20 0d 28	jsr $280d			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.28fe	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2900	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2902	d0 4c		bne $2950			bne 	_CFType
.2904	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2906	20 92 3b	jsr $3b92			jsr 	CheckToken
.2909	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.290b	20 92 34	jsr $3492			jsr 	EvaluateInteger				; get terminal value in stack 1
.290e	98		tya				tya
.290f	48		pha				pha
.2910	a0 04		ldy #$04			ldy 	#4
.2912	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2914	91 37		sta ($37),y			sta 	(rsPointer),y
.2916	c8		iny				iny
.2917	a5 a0		lda $a0				lda		esInt1
.2919	91 37		sta ($37),y			sta 	(rsPointer),y
.291b	c8		iny				iny
.291c	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.291e	91 37		sta ($37),y			sta 	(rsPointer),y
.2920	c8		iny				iny
.2921	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2923	91 37		sta ($37),y			sta 	(rsPointer),y
.2925	c8		iny				iny
.2926	a5 a1		lda $a1				lda		esInt1+1
.2928	91 37		sta ($37),y			sta 	(rsPointer),y
.292a	c8		iny				iny
.292b	a5 a9		lda $a9				lda		esInt2+1
.292d	91 37		sta ($37),y			sta 	(rsPointer),y
.292f	c8		iny				iny
.2930	a5 b1		lda $b1				lda		esInt3+1
.2932	91 37		sta ($37),y			sta 	(rsPointer),y
.2934	68		pla				pla
.2935	a8		tay				tay
.2936	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2938	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.293a	d0 0e		bne $294a			bne 	_CFDone
.293c	c8		iny				iny									; skip over step.
.293d	20 92 34	jsr $3492			jsr 	EvaluateInteger 			; get step
.2940	98		tya				tya
.2941	48		pha				pha
.2942	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2944	a0 06		ldy #$06			ldy 	#6
.2946	91 37		sta ($37),y			sta 	(rsPointer),y
.2948	68		pla				pla
.2949	a8		tay				tay
.294a					_CFDone:
.294a	a9 01		lda #$01			lda 	#1
.294c	20 f1 3b	jsr $3bf1			jsr 	RSSavePosition 				; save position.
.294f	60		rts				rts
.2950					_CFType:
.2950	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2952	20 18 15	jsr $1518		jsr	errorHandler
.2955					Command_NEXT:
.2955	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2957	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2959	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.295b	f0 05		beq $2962			beq 	_isok
.295d	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.295f	20 18 15	jsr $1518		jsr	errorHandler
.2962					_isok:
.2962	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2964	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2966	b0 18		bcs $2980			bcs 	_CNNoIndex
.2968	a2 00		ldx #$00			ldx 	#0 							; start on stack
.296a	20 cb 34	jsr $34cb			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.296d	98		tya				tya
.296e	48		pha				pha
.296f	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2971	b1 37		lda ($37),y			lda 	(rsPointer),y
.2973	d5 98		cmp $98,x			cmp 	esInt0,x
.2975	d0 76		bne $29ed			bne 	_CNBadIndex
.2977	c8		iny				iny
.2978	b1 37		lda ($37),y			lda 	(rsPointer),y
.297a	d5 a0		cmp $a0,x			cmp 	esInt1,x
.297c	d0 6f		bne $29ed			bne 	_CNBadIndex
.297e	68		pla				pla
.297f	a8		tay				tay
.2980					_CNNoIndex:
.2980	98		tya				tya
.2981	48		pha				pha
.2982	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2984	b1 37		lda ($37),y			lda 	(rsPointer),y
.2986	85 2a		sta $2a				sta 	temp0
.2988	c8		iny				iny
.2989	b1 37		lda ($37),y			lda 	(rsPointer),y
.298b	85 2b		sta $2b				sta 	temp0+1
.298d	c8		iny				iny
.298e	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2990	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2992	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2994	10 01		bpl $2997			bpl 	_CNSignX
.2996	ca		dex				dex  								; X = $FF
.2997					_CNSignX:
.2997	18		clc				clc 								; add to the LSB
.2998	a0 00		ldy #$00			ldy 	#0
.299a	71 2a		adc ($2a),y			adc 	(temp0),y
.299c	91 2a		sta ($2a),y			sta 	(temp0),y
.299e					_CNPropogate:
.299e	c8		iny				iny  								; add the sign extended in X to the rest.
.299f	8a		txa				txa
.29a0	71 2a		adc ($2a),y			adc 	(temp0),y
.29a2	91 2a		sta ($2a),y			sta 	(temp0),y
.29a4	c8		iny				iny
.29a5	8a		txa				txa
.29a6	71 2a		adc ($2a),y			adc 	(temp0),y
.29a8	91 2a		sta ($2a),y			sta 	(temp0),y
.29aa	c8		iny				iny
.29ab	8a		txa				txa
.29ac	71 2a		adc ($2a),y			adc 	(temp0),y
.29ae	91 2a		sta ($2a),y			sta 	(temp0),y
.29b0	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.29b1	a5 37		lda $37				lda 	rsPointer
.29b3	69 07		adc #$07			adc 	#7
.29b5	85 2c		sta $2c				sta 	temp1
.29b7	a9 00		lda #$00			lda 	#0
.29b9	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.29bb	a8		tay				tay 								; and clear the Y register again.
.29bc	65 38		adc $38				adc 	rsPointer+1
.29be	85 2d		sta $2d				sta 	temp1+1
.29c0	38		sec				sec 								; calculate current - limit oring interim values.
.29c1	20 f9 29	jsr $29f9			jsr 	_CNCompare 					; each of these does a byte.
.29c4	20 f9 29	jsr $29f9			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.29c7	20 f9 29	jsr $29f9			jsr 	_CNCompare 					; and the carry of the subtraction.
.29ca	20 f9 29	jsr $29f9			jsr 	_CNCompare
.29cd	50 02		bvc $29d1			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.29cf	49 80		eor #$80			eor 	#$80
.29d1					_CNNoOverflow:
.29d1	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.29d3	30 1d		bmi $29f2			bmi 	_CNCheckDownto
.29d5	c9 00		cmp #$00			cmp 	#0
.29d7	30 0c		bmi $29e5			bmi 	_CNLoopRound 				; loop round if < =
.29d9	a5 2e		lda $2e				lda 	temp2
.29db	f0 08		beq $29e5			beq 	_CNLoopRound
.29dd					_CNLoopExit:
.29dd	68		pla				pla
.29de	a8		tay				tay
.29df	a9 0b		lda #$0b			lda 	#11
.29e1	20 e7 3b	jsr $3be7			jsr 	RSFree
.29e4	60		rts				rts
.29e5					_CNLoopRound:
.29e5	68		pla				pla
.29e6	a8		tay				tay
.29e7	a9 01		lda #$01			lda 	#1
.29e9	20 04 3c	jsr $3c04			jsr 	RSLoadPosition				; go back to the loop top
.29ec	60		rts				rts
.29ed					_CNBadIndex:
.29ed	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.29ef	20 18 15	jsr $1518		jsr	errorHandler
.29f2					_CNCheckDownto:
.29f2	c9 00		cmp #$00			cmp 	#0
.29f4	10 ef		bpl $29e5			bpl 	_CNLoopRound
.29f6	4c dd 29	jmp $29dd			jmp 	_CNLoopExit
.29f9					_CNCompare:
.29f9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.29fb	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.29fd	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.29ff	85 2e		sta $2e				sta 	temp2
.2a01	c8		iny				iny
.2a02	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2a03					CommandIf:
.2a03	20 90 34	jsr $3490			jsr 	EvaluateRootInteger 		; get what's being tested.
.2a06	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2a08	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2a0a	f0 04		beq $2a10			beq 	_IfSimple
.2a0c	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2a0e	d0 1b		bne $2a2b			bne 	_IfComplex
.2a10					_IfSimple:
.2a10	20 51 3b	jsr $3b51			jsr 	MInt32Zero					; check if TOS zero
.2a13	f0 10		beq $2a25			beq 	_IfEOL 						; go to next line.
.2a15	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2a17	c8		iny				iny
.2a18	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2a1a	f0 0c		beq $2a28			beq 	_IfGoto 					; do the Goto code
.2a1c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2a1e	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2a20	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2a22	f0 04		beq $2a28			beq 	_IfGoto
.2a24	60		rts				rts 								; else continue on this line.
.2a25					_IfEOL:
.2a25	4c e0 28	jmp $28e0			jmp 	AdvanceNextLine 			; go to next line
.2a28					_IfGoto:
.2a28	4c 17 26	jmp $2617			jmp 	CommandGoto
.2a2b					_IfComplex:
.2a2b	20 51 3b	jsr $3b51			jsr 	MInt32Zero 					; is it true ?
.2a2e	f0 01		beq $2a31			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2a30	60		rts				rts 								; else continue.
.2a31					_IFSkip:
.2a31	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2a33	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2a35	4c cd 2c	jmp $2ccd			jmp		ScanForward
.2a38					Command_ELSE:
.2a38	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2a3a	8a		txa				txa
.2a3b	4c cd 2c	jmp $2ccd			jmp		ScanForward
.2a3e					Command_ENDIF:
.2a3e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cff					storeSize:
>0cff							.fill 	1
.2a3f					CommandLocal:
.2a3f	a2 00		ldx #$00			ldx 	#0
.2a41	20 5d 2a	jsr $2a5d			jsr 	LocaliseVariable 			; localise one.
.2a44					_CLCheckNext:
.2a44	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2a46	c8		iny				iny
.2a47	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2a49	f0 06		beq $2a51			beq 	_CLAssignment
.2a4b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2a4d	f0 f0		beq $2a3f			beq 	CommandLocal
.2a4f	88		dey				dey
.2a50	60		rts				rts
.2a51					_CLAssignment:
.2a51	a2 01		ldx #$01			ldx 	#1
.2a53	20 73 34	jsr $3473			jsr 	Evaluate 					; evaluate RHS
.2a56	ca		dex				dex
.2a57	20 20 28	jsr $2820			jsr 	WriteValue
.2a5a	4c 44 2a	jmp $2a44			jmp 	_CLCheckNext
.2a5d					LocaliseVariable:
.2a5d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2a5f	c9 40		cmp #$40			cmp 	#$40
.2a61	b0 67		bcs $2aca			bcs 	_LVSyntax
.2a63	8a		txa				txa 								; get the address of that variable.
.2a64	a2 02		ldx #$02		ldx	#2
.2a66	20 29 4b	jsr $4b29		jsr	variableHandler
.2a69	aa		tax				tax
.2a6a	8a		txa				txa
.2a6b	48		pha				pha
.2a6c	98		tya				tya
.2a6d	48		pha				pha
.2a6e	20 82 28	jsr $2882			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2a71	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2a73	0a		asl a				asl 	a
.2a74	10 16		bpl $2a8c			bpl 	_LVPushNumber
.2a76	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2a78	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a7a	c8		iny				iny
.2a7b	85 2c		sta $2c				sta 	temp1
.2a7d	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a7f	85 2d		sta $2d				sta 	temp1+1
.2a81	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2a83	b1 2c		lda ($2c),y			lda 	(temp1),y
.2a85	aa		tax				tax 								; into X
.2a86	e8		inx				inx 								; +1 for length.
.2a87	a9 24		lda #$24			lda 	#markerString
.2a89	4c a1 2a	jmp $2aa1			jmp 	_LVWriteFrame
.2a8c					_LVPushNumber:
.2a8c	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2a8e	85 2c		sta $2c				sta 	temp1
.2a90	a5 2b		lda $2b				lda 	temp0+1
.2a92	85 2d		sta $2d				sta 	temp1+1
.2a94	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2a96	4a		lsr a				lsr 	a
.2a97	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2a99	a2 04		ldx #$04			ldx 	#VarISize
.2a9b	90 04		bcc $2aa1			bcc 	_LVIsInteger
.2a9d	a9 23		lda #$23			lda 	#markerFloat
.2a9f	a2 06		ldx #$06			ldx 	#VarFSize
.2aa1					_LVIsInteger:
.2aa1					_LVWriteFrame:
.2aa1	8e ff 0c	stx $0cff			stx 	storeSize 					; number of bytes to copy from (temp0)
.2aa4	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2aa5	e8		inx				inx
.2aa6	e8		inx				inx
.2aa7	20 c5 3b	jsr $3bc5			jsr 	RSClaim 					; create the stack frame.
.2aaa	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2aac	a0 01		ldy #$01			ldy 	#1
.2aae	91 37		sta ($37),y			sta 	(rsPointer),y
.2ab0	c8		iny				iny
.2ab1	a5 2b		lda $2b				lda 	temp0+1
.2ab3	91 37		sta ($37),y			sta 	(rsPointer),y
.2ab5	a0 00		ldy #$00			ldy 	#0
.2ab7					_LVCopyData:
.2ab7	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2ab9	c8		iny				iny 								; write allowing for the header bit.
.2aba	c8		iny				iny
.2abb	c8		iny				iny
.2abc	91 37		sta ($37),y			sta 	(rsPointer),y
.2abe	88		dey				dey
.2abf	88		dey				dey
.2ac0	ce ff 0c	dec $0cff			dec 	storeSize 					; do it storesize times
.2ac3	d0 f2		bne $2ab7			bne 	_LVCopyData
.2ac5	68		pla				pla
.2ac6	a8		tay				tay
.2ac7	68		pla				pla
.2ac8	aa		tax				tax
.2ac9	60		rts				rts
.2aca					_LVSyntax:
.2aca	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2acc	20 18 15	jsr $1518		jsr	errorHandler
.2acf					RestoreLocals:
.2acf	a2 00		ldx #$00			ldx 	#0
.2ad1	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ad3	c9 40		cmp #$40			cmp	 	#64
.2ad5	90 01		bcc $2ad8			bcc 	_RLocal
.2ad7	60		rts				rts
.2ad8					_RLocal:
.2ad8	8a		txa				txa
.2ad9	48		pha				pha
.2ada	98		tya				tya
.2adb	48		pha				pha
.2adc	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2ade	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ae0	85 2a		sta $2a				sta 	temp0
.2ae2	c8		iny				iny
.2ae3	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ae5	85 2b		sta $2b				sta 	temp0+1
.2ae7	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2ae9	b1 37		lda ($37),y			lda 	(rsPointer),y
.2aeb	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2aed	f0 28		beq $2b17			beq 	_RString
.2aef	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2af1	c9 25		cmp #$25			cmp 	#markerInt
.2af3	f0 02		beq $2af7			beq 	_RIsInteger
.2af5	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2af7					_RIsInteger:
.2af7	8a		txa				txa
.2af8	48		pha				pha
.2af9	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2afb					_RCopyBack:
.2afb	b1 37		lda ($37),y			lda 	(rsPointer),y
.2afd	88		dey				dey
.2afe	88		dey				dey
.2aff	88		dey				dey
.2b00	91 2a		sta ($2a),y			sta 	(temp0),y
.2b02	c8		iny				iny
.2b03	c8		iny				iny
.2b04	c8		iny				iny
.2b05	c8		iny				iny
.2b06	ca		dex				dex
.2b07	d0 f2		bne $2afb			bne 	_RCopyBack
.2b09	68		pla				pla 								; get size add 3
.2b0a	18		clc				clc
.2b0b	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2b0d					_RRestoreAAndLoop:
.2b0d	20 e7 3b	jsr $3be7			jsr 	RSFree
.2b10	68		pla				pla
.2b11	a8		tay				tay
.2b12	68		pla				pla
.2b13	aa		tax				tax
.2b14	4c cf 2a	jmp $2acf			jmp 	RestoreLocals 				; go see if there are any more locals.
.2b17					_RString:
.2b17	a2 00		ldx #$00			ldx 	#0
.2b19	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2b1b	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b1d	95 98		sta $98,x			sta 	esInt0,x
.2b1f	c8		iny				iny
.2b20	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b22	95 a0		sta $a0,x			sta 	esInt1,x
.2b24	18		clc				clc
.2b25	a5 37		lda $37				lda 	rsPointer
.2b27	69 03		adc #$03			adc 	#3
.2b29	95 99		sta $99,x			sta 	esInt0+1,x
.2b2b	a5 38		lda $38				lda 	rsPointer+1
.2b2d	69 00		adc #$00			adc 	#0
.2b2f	95 a1		sta $a1,x			sta 	esInt1+1,x
.2b31	8a		txa				txa
.2b32	a2 10		ldx #$10		ldx	#16
.2b34	20 d5 3e	jsr $3ed5		jsr	stringHandler
.2b37	a0 03		ldy #$03			ldy 	#3 							; get string length
.2b39	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b3b	18		clc				clc
.2b3c	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2b3e	4c 0d 2b	jmp $2b0d			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d00					paramCount:
>0d00							.fill 	1
.2b41					CallProc:
.2b41	20 c9 2b	jsr $2bc9			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2b44	48		pha				pha 								; save length on stack
.2b45	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2b47	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2b49	48		pha				pha
.2b4a	a5 2a		lda $2a				lda 	temp0
.2b4c	48		pha				pha
.2b4d	98		tya				tya 								; calculate Y + length
.2b4e	18		clc				clc
.2b4f	65 32		adc $32				adc 	tempShort
.2b51	a8		tay				tay
.2b52	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2b54					_CallProcEvalParams:
.2b54	e8		inx				inx
.2b55	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2b57	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b59	f0 0b		beq $2b66			beq 	_CPDoneParams
.2b5b	20 73 34	jsr $3473			jsr 	Evaluate 					; evaluate a parameter
.2b5e	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2b60	c8		iny				iny
.2b61	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2b63	f0 ef		beq $2b54			beq 	_CallProcEvalParams
.2b65	88		dey				dey 								; undo consumption.
.2b66					_CPDoneParams:
.2b66	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen 			; check closing parenthesis.
.2b69	8e 00 0d	stx $0d00			stx 	paramCount 					; store parameter count+1
.2b6c	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2b6e	a9 50		lda #$50			lda 	#markerPROC
.2b70	20 c5 3b	jsr $3bc5			jsr 	RSClaim
.2b73	a9 01		lda #$01			lda 	#1 							; store return address.
.2b75	20 f1 3b	jsr $3bf1			jsr 	RSSavePosition
.2b78	68		pla				pla 								; get the new code Ptr
.2b79	85 28		sta $28				sta 	codePtr
.2b7b	68		pla				pla
.2b7c	85 29		sta $29				sta 	codePtr+1
.2b7e	68		pla				pla 								; length of name + 4 is the param start.
.2b7f	18		clc				clc
.2b80	69 04		adc #$04			adc 	#4
.2b82	a8		tay				tay
.2b83	a2 ff		ldx #$ff			ldx 	#$FF
.2b85					_CPLoadParameters:
.2b85	e8		inx				inx 								; point to where the address should be loaded.
.2b86	ec 00 0d	cpx $0d00			cpx 	paramCount 					; too many parameters in definition ?
.2b89	f0 1e		beq $2ba9			beq 	_CPParamError
.2b8b	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2b8d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2b8f	f0 0e		beq $2b9f			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2b91	20 5d 2a	jsr $2a5d			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2b94	20 20 28	jsr $2820			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2b97	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2b99	c8		iny				iny
.2b9a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2b9c	f0 e7		beq $2b85			beq 	_CPLoadParameters
.2b9e	88		dey				dey 								; no, unconsume and check for )
.2b9f					_CPParamComplete:
.2b9f	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen 			; check )
.2ba2	e8		inx				inx 								; check right number of parameters have been consumed
.2ba3	ec 00 0d	cpx $0d00			cpx 	paramCount
.2ba6	d0 01		bne $2ba9			bne 	_CPParamError
.2ba8	60		rts				rts
.2ba9					_CPParamError:
.2ba9	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2bab	20 18 15	jsr $1518		jsr	errorHandler
.2bae					ReturnProc:
.2bae	20 cf 2a	jsr $2acf			jsr 	RestoreLocals 				; get the locals back.
.2bb1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2bb3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2bb5	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2bb7	f0 05		beq $2bbe			beq 	_isok
.2bb9	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2bbb	20 18 15	jsr $1518		jsr	errorHandler
.2bbe					_isok:
.2bbe	a9 01		lda #$01			lda 	#1
.2bc0	20 04 3c	jsr $3c04			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2bc3	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2bc5	20 e7 3b	jsr $3be7			jsr 	RSFree
.2bc8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d01					procList:
>0d01							.fill 	2		 					; terminated by name high being zero.
.0d03					yInLine:
>0d03							.fill 	1
.2bc9					FindProcedure:
.2bc9	8c 03 0d	sty $0d03			sty 	yInLine 					; save current position.
.2bcc	20 87 2c	jsr $2c87			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2bcf	85 2c		sta $2c				sta 	temp1
.2bd1	ad 01 0d	lda $0d01			lda		procList 					; put procList address in temp2
.2bd4	85 2e		sta $2e				sta 	temp2
.2bd6	ad 02 0d	lda $0d02			lda 	procList+1
.2bd9	85 2f		sta $2f				sta 	temp2+1
.2bdb	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2bdd					_FPLoop:
.2bdd	b1 2e		lda ($2e),y			lda 	(temp2),y
.2bdf	f0 4f		beq $2c30			beq 	_FPError 					; if so, we don't know this procedure.
.2be1	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2be3	c8		iny				iny
.2be4	b1 2e		lda ($2e),y			lda 	(temp2),y
.2be6	85 2a		sta $2a				sta 	temp0
.2be8	c8		iny				iny
.2be9	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2beb	c5 2c		cmp $2c				cmp 	temp1
.2bed	d0 2b		bne $2c1a			bne 	_FPNext 					; hash is different, go to next.
.2bef	38		sec				sec
.2bf0	ad 03 0d	lda $0d03			lda 	yInLine 					; position in line must be at least 4
.2bf3	e9 04		sbc #$04			sbc 	#4
.2bf5	18		clc				clc
.2bf6	65 28		adc $28				adc 	codePtr
.2bf8	85 30		sta $30				sta 	temp3
.2bfa	a5 29		lda $29				lda 	codePtr+1
.2bfc	69 00		adc #$00			adc 	#0
.2bfe	85 31		sta $31				sta 	temp3+1
.2c00	98		tya				tya
.2c01	48		pha				pha
.2c02	a0 04		ldy #$04			ldy 	#4
.2c04					_FPCName:
.2c04	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2c06	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2c08	d0 0e		bne $2c18			bne 	_FPpulYNext 				; if different go to next one.
.2c0a	c8		iny				iny
.2c0b	c9 3a		cmp #$3a			cmp 	#$3A
.2c0d	90 f5		bcc $2c04			bcc 	_FPCName 					; compare the whole lot....
.2c0f	68		pla				pla 								; throw away the saved Y
.2c10	98		tya				tya 								; length of name is Y-4
.2c11	38		sec				sec
.2c12	e9 04		sbc #$04			sbc 	#4
.2c14	ac 03 0d	ldy $0d03			ldy 	yInLine  					; get the original Y back
.2c17	60		rts				rts
.2c18					_FPpulYNext:
.2c18	68		pla				pla
.2c19	a8		tay				tay
.2c1a					_FPNext:
.2c1a	c8		iny				iny 								; next procedure record.
.2c1b	10 c0		bpl $2bdd			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2c1d	98		tya				tya 								; subtract 128 from Y
.2c1e	38		sec				sec
.2c1f	e9 80		sbc #$80			sbc 	#128
.2c21	a8		tay				tay
.2c22	18		clc				clc 								; add 128 to temp2, so we can have more than
.2c23	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2c25	69 80		adc #$80			adc 	#128
.2c27	85 2e		sta $2e				sta 	temp2
.2c29	90 b2		bcc $2bdd			bcc 	_FPLoop
.2c2b	e6 2f		inc $2f				inc 	temp2+1
.2c2d	4c dd 2b	jmp $2bdd			jmp 	_FPLoop
.2c30					_FPError:
.2c30	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2c32	20 18 15	jsr $1518		jsr	errorHandler
.2c35					ScanProc:
.2c35	98		tya				tya
.2c36	48		pha				pha
.2c37	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2c39	8d 01 0d	sta $0d01			sta 	procList
.2c3c	a5 36		lda $36				lda 	lowMemory+1
.2c3e	8d 02 0d	sta $0d02			sta 	procList+1
.2c41	20 b1 2f	jsr $2fb1			jsr 	ResetCodeAddress 			; back to the start.
.2c44					_ScanLoop:
.2c44	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2c46	b1 28		lda ($28),y			lda 	(codePtr),y
.2c48	f0 2a		beq $2c74			beq 	_ScanExit
.2c4a	a0 03		ldy #$03			ldy 	#3							; get first token
.2c4c	b1 28		lda ($28),y			lda 	(codePtr),y
.2c4e	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2c50	d0 12		bne $2c64			bne 	_ScanNext
.2c52	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2c54	20 7c 2c	jsr $2c7c			jsr 	_ScanWrite
.2c57	a5 28		lda $28				lda 	codePtr
.2c59	20 7c 2c	jsr $2c7c			jsr 	_ScanWrite
.2c5c	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2c5e	20 87 2c	jsr $2c87			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2c61	20 7c 2c	jsr $2c7c			jsr 	_ScanWrite					; and write that
.2c64					_ScanNext:
.2c64	18		clc				clc
.2c65	a0 00		ldy #$00			ldy 	#0
.2c67	b1 28		lda ($28),y			lda 	(codePtr),y
.2c69	65 28		adc $28				adc 	codePtr
.2c6b	85 28		sta $28				sta 	codePtr
.2c6d	90 d5		bcc $2c44			bcc 	_ScanLoop
.2c6f	e6 29		inc $29				inc 	codePtr+1
.2c71	4c 44 2c	jmp $2c44			jmp 	_ScanLoop
.2c74					_ScanExit:
.2c74	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2c76	20 7c 2c	jsr $2c7c			jsr 	_ScanWrite
.2c79	68		pla				pla
.2c7a	a8		tay				tay
.2c7b	60		rts				rts
.2c7c					_ScanWrite:
.2c7c	a0 00		ldy #$00			ldy 	#0
.2c7e	91 35		sta ($35),y			sta 	(lowMemory),y
.2c80	e6 35		inc $35				inc 	lowMemory
.2c82	d0 02		bne $2c86			bne 	_SWNoCarry
.2c84	e6 36		inc $36				inc 	lowMemory+1
.2c86					_SWNoCarry:
.2c86	60		rts				rts
.2c87					CalculateProcedureHash:
.2c87	a9 00		lda #$00			lda 	#0 							; clear hash.
.2c89	85 2a		sta $2a				sta 	temp0
.2c8b					_CPHLoop:
.2c8b	18		clc				clc 								; add character and rotate and add carry back in
.2c8c	b1 28		lda ($28),y			lda 	(codePtr),y
.2c8e	65 2a		adc $2a				adc 	temp0
.2c90	6a		ror a				ror 	a
.2c91	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2c93	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2c95	b1 28		lda ($28),y			lda 	(codePtr),y
.2c97	c8		iny				iny 								; advance incase we go round again.
.2c98	c9 3a		cmp #$3a			cmp 	#$3A
.2c9a	90 ef		bcc $2c8b			bcc 	_CPHLoop
.2c9c	a5 2a		lda $2a				lda 	temp0
.2c9e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2c9f					Command_Repeat:
.2c9f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2ca1	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2ca3	20 c5 3b	jsr $3bc5			jsr 	RSClaim
.2ca6	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2ca8	20 f1 3b	jsr $3bf1			jsr 	RSSavePosition
.2cab	60		rts				rts
.2cac					Command_Until:
.2cac	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2cae	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2cb0	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2cb2	f0 05		beq $2cb9			beq 	_isok
.2cb4	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2cb6	20 18 15	jsr $1518		jsr	errorHandler
.2cb9					_isok:
.2cb9	20 90 34	jsr $3490			jsr 	EvaluateRootInteger 		; at the bottom.
.2cbc	20 51 3b	jsr $3b51			jsr 	MInt32Zero					; check if TOS zero
.2cbf	d0 06		bne $2cc7			bne 	_CUExit
.2cc1	a9 01		lda #$01			lda 	#1
.2cc3	20 04 3c	jsr $3c04			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2cc6	60		rts				rts
.2cc7					_CUExit:
.2cc7	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2cc9	20 e7 3b	jsr $3be7			jsr 	RSFree
.2ccc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2ccd					ScanForward:
.2ccd	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2ccf	86 2d		stx $2d				stx 	temp1+1
.2cd1	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2cd3	85 2e		sta $2e				sta 	temp2
.2cd5	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2cd7	c8		iny				iny
.2cd8	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2cda	d0 08		bne $2ce4			bne 	_SFNoCheck 					; if so, check token against entered values.
.2cdc	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2cde	f0 24		beq $2d04			beq 	_SFExit 					; at the same strcture depth.
.2ce0	c5 2d		cmp $2d				cmp 	temp1+1
.2ce2	f0 20		beq $2d04			beq 	_SFExit
.2ce4					_SFNoCheck:
.2ce4	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2ce6	90 ed		bcc $2cd5			bcc 	_SFLoop
.2ce8	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2cea	90 19		bcc $2d05			bcc 	_SFSpecials
.2cec	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2cee	90 e5		bcc $2cd5			bcc 	_SFLoop
.2cf0	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2cf2	b0 e1		bcs $2cd5			bcs 	_SFLoop
.2cf4	aa		tax				tax  								; token in X, and look up the adjuster.
.2cf5	bd ae 33	lda $33ae,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2cf8	38		sec				sec 								; convert to an offset ($FF,$01)
.2cf9	e9 81		sbc #$81			sbc 	#$81
.2cfb	18		clc				clc 								; add to depth
.2cfc	65 2e		adc $2e				adc 	temp2
.2cfe	85 2e		sta $2e				sta 	temp2
.2d00	10 d3		bpl $2cd5			bpl 	_SFLoop 					; +ve okay to continue
.2d02	30 07		bmi $2d0b			bmi 	SFError 					; if gone -ve then we have a nesting error
.2d04	60		rts		_SFExit:rts
.2d05					_SFSpecials:
.2d05	20 10 2d	jsr $2d10			jsr 	ScannerSkipSpecial
.2d08	4c d5 2c	jmp $2cd5			jmp 	_SFLoop
.2d0b					SFError:
.2d0b	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2d0d	20 18 15	jsr $1518		jsr	errorHandler
.2d10					ScannerSkipSpecial:
.2d10	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2d12	f0 10		beq $2d24			beq 	_SFNextLine
.2d14	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2d16	f0 2b		beq $2d43			beq 	_SFFloatSkip
.2d18	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2d1a	f0 02		beq $2d1e			beq 	_SFSkipString
.2d1c	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2d1d	60		rts				rts 								; token.
.2d1e					_SFSkipString:
.2d1e	98		tya				tya
.2d1f	38		sec				sec
.2d20	71 28		adc ($28),y			adc 	(codePtr),y
.2d22	a8		tay				tay
.2d23	60		rts				rts
.2d24					_SFNextLine:
.2d24	a0 00		ldy #$00			ldy 	#0 							; get offset
.2d26	b1 28		lda ($28),y			lda 	(codePtr),y
.2d28	18		clc				clc 								; add to code pointer.
.2d29	65 28		adc $28				adc 	codePtr
.2d2b	85 28		sta $28				sta 	codePtr
.2d2d	90 02		bcc $2d31			bcc		_SFNLNoCarry
.2d2f	e6 29		inc $29				inc 	codePtr+1
.2d31					_SFNLNoCarry:
.2d31	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2d33	d0 0b		bne $2d40			bne		_SFXNL 						; no go round again
.2d35	a5 2c		lda $2c				lda 	temp1
.2d37	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2d39	d0 d0		bne $2d0b			bne 	SFError 					; read uses this to search for data statements
.2d3b	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2d3d	20 18 15	jsr $1518		jsr	errorHandler
.2d40	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2d42	60		rts				rts
.2d43					_SFFloatSkip:
.2d43	98		tya				tya 								; skip over an embedded float.
.2d44	18		clc				clc
.2d45	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2d47	a8		tay				tay
.2d48	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2d49					Command_While:
.2d49	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2d4b	a2 04		ldx #$04			ldx 	#4
.2d4d	20 c5 3b	jsr $3bc5			jsr 	RSClaim 					; create on stack.
.2d50	88		dey				dey
.2d51	a9 01		lda #$01			lda 	#1
.2d53	20 f1 3b	jsr $3bf1			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2d56	c8		iny				iny
.2d57	20 90 34	jsr $3490			jsr 	EvaluateRootInteger			; get the conditional
.2d5a	20 51 3b	jsr $3b51			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2d5d	f0 01		beq $2d60			beq 	_CWFail
.2d5f	60		rts				rts
.2d60					_CWFail:
.2d60	a9 04		lda #$04			lda 	#4
.2d62	20 e7 3b	jsr $3be7			jsr 	RSFree 						; close the just opened position.
.2d65	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2d67	aa		tax				tax
.2d68	20 cd 2c	jsr $2ccd			jsr 	ScanForward
.2d6b	60		rts				rts
.2d6c					Command_Wend:
.2d6c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d6e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d70	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2d72	f0 05		beq $2d79			beq 	_isok
.2d74	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2d76	20 18 15	jsr $1518		jsr	errorHandler
.2d79					_isok:
.2d79	a9 01		lda #$01			lda 	#1
.2d7b	20 04 3c	jsr $3c04			jsr 	RSLoadPosition				; go back until true
.2d7e	a9 04		lda #$04			lda 	#4
.2d80	20 e7 3b	jsr $3be7			jsr 	RSFree 						; close the loop
.2d83	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2d84					CommandClear:
.2d84					XCommandClear:
.2d84	98		tya				tya
.2d85	48		pha				pha
.2d86	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2d89	85 33		sta $33				sta 	highMemory
.2d8b	ad cd 0a	lda $0acd			lda 	endMemory+1
.2d8e	85 34		sta $34				sta 	highMemory+1
.2d90	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2d93	85 2a		sta $2a				sta 	temp0
.2d95	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d98	85 2b		sta $2b				sta 	temp0+1
.2d9a					_CCFindEnd:
.2d9a	a0 00		ldy #$00			ldy 	#0
.2d9c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d9e	f0 0c		beq $2dac			beq 	_CCFoundEnd 				; offset zero is end.
.2da0	18		clc				clc
.2da1	65 2a		adc $2a				adc 	temp0 						; move to next line
.2da3	85 2a		sta $2a				sta 	temp0
.2da5	90 f3		bcc $2d9a			bcc 	_CCFindEnd
.2da7	e6 2b		inc $2b				inc 	temp0+1
.2da9	4c 9a 2d	jmp $2d9a			jmp 	_CCFindEnd
.2dac					_CCFoundEnd:
.2dac	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2dae	85 35		sta $35				sta 	lowMemory
.2db0	a5 2b		lda $2b				lda 	temp0+1
.2db2	85 36		sta $36				sta 	lowMemory+1
.2db4	18		clc				clc 								; put temp0+1 in endProgram
.2db5	a5 2a		lda $2a				lda 	temp0
.2db7	69 01		adc #$01			adc 	#1
.2db9	8d ca 0a	sta $0aca			sta 	endProgram
.2dbc	a5 2b		lda $2b				lda 	temp0+1
.2dbe	69 00		adc #$00			adc 	#0
.2dc0	8d cb 0a	sta $0acb			sta 	endProgram+1
.2dc3	18		clc				clc 								; put a bit of space in.
.2dc4	a5 35		lda $35				lda 	lowMemory
.2dc6	69 04		adc #$04			adc 	#4
.2dc8	85 35		sta $35				sta 	lowMemory
.2dca	90 02		bcc $2dce			bcc 	_CCNoCarry
.2dcc	e6 36		inc $36				inc 	lowMemory+1
.2dce					_CCNoCarry:
.2dce	20 b7 3b	jsr $3bb7			jsr 	RSReset 					; reset the return stack.
.2dd1	a2 06		ldx #$06		ldx	#6
.2dd3	20 29 4b	jsr $4b29		jsr	variableHandler
.2dd6	20 35 2c	jsr $2c35			jsr 	ScanProc 					; scan for procedures
.2dd9	20 ba 25	jsr $25ba			jsr 	CommandRestore 				; do a restore
.2ddc	68		pla				pla
.2ddd	a8		tay				tay
.2dde	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d04					structIndent:
>0d04							.fill 	1
.2ddf					CommandList:
.2ddf	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2de1	8e 04 0d	stx $0d04			stx 	structIndent
.2de4	20 2a 3b	jsr $3b2a			jsr 	MInt32False
.2de7	e8		inx				inx
.2de8	20 26 3b	jsr $3b26			jsr 	MInt32True
.2deb	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2ded	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2def	f0 15		beq $2e06			beq 	_CLEndLine
.2df1	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2df3	30 1b		bmi $2e10			bmi 	_CLDoListing 				; do the whole lot.
.2df5	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2df7	20 92 34	jsr $3492			jsr 	EvaluateInteger
.2dfa	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2dfc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2dfe	f0 06		beq $2e06			beq 	_CLEndLine
.2e00	20 68 3a	jsr $3a68			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2e03	4c 10 2e	jmp $2e10			jmp 	_CLDoListing 				; own e.g. list 1100
.2e06					_CLEndLine:
.2e06	c8		iny				iny 								; skip comma
.2e07	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2e09	30 05		bmi $2e10			bmi 	_CLDoListing
.2e0b	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2e0d	20 92 34	jsr $3492			jsr 	EvaluateInteger				; get end
.2e10					_CLDoListing:
.2e10	20 b1 2f	jsr $2fb1			jsr 	ResetCodeAddress 			; back to the start.
.2e13					_CLCheckLoop:
.2e13	a2 02		ldx #$02		ldx	#2
.2e15	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e18	a0 00		ldy #$00			ldy 	#0							; check end.
.2e1a	b1 28		lda ($28),y			lda 	(codePtr),y
.2e1c	f0 41		beq $2e5f			beq 	_CLEnd
.2e1e	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2e20	20 62 2e	jsr $2e62			jsr 	CLCompareLineTOS
.2e23	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2e25	f0 28		beq $2e4f			beq 	_CLNext
.2e27	e8		inx				inx
.2e28	20 62 2e	jsr $2e62			jsr 	CLCompareLineTOS 			; compare vs higher
.2e2b	c9 01		cmp #$01			cmp 	#1
.2e2d	f0 20		beq $2e4f			beq 	_CLNext
.2e2f	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2e31	20 84 2e	jsr $2e84			jsr 	CLStructureCheck
.2e34	ad 04 0d	lda $0d04			lda 	structIndent 				; indent level.
.2e37	10 02		bpl $2e3b			bpl 	_CLPositive
.2e39	a9 00		lda #$00			lda 	#0
.2e3b					_CLPositive:
.2e3b	a2 04		ldx #$04		ldx	#4
.2e3d	20 58 47	jsr $4758		jsr	tokeniserHandler
.2e40	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2e42	20 84 2e	jsr $2e84			jsr 	CLStructureCheck
.2e45	ad 04 0d	lda $0d04			lda 	structIndent
.2e48	10 05		bpl $2e4f			bpl 	_CLNext
.2e4a	a9 00		lda #$00			lda 	#0
.2e4c	8d 04 0d	sta $0d04			sta 	structIndent
.2e4f					_CLNext:
.2e4f	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2e51	b1 28		lda ($28),y			lda 	(codePtr),y
.2e53	18		clc				clc
.2e54	65 28		adc $28				adc 	codePtr
.2e56	85 28		sta $28				sta 	codePtr
.2e58	90 b9		bcc $2e13			bcc 	_CLCheckLoop
.2e5a	e6 29		inc $29				inc 	codePtr+1
.2e5c	4c 13 2e	jmp $2e13			jmp 	_CLCheckLoop
.2e5f					_CLEnd:
.2e5f	4c 13 3c	jmp $3c13			jmp 	WarmStart 					; warm start after list.
.2e62					CLCompareLineTOS:
.2e62	a0 01		ldy #$01			ldy 	#1
.2e64	b1 28		lda ($28),y			lda 	(codePtr),y
.2e66	55 98		eor $98,x			eor 	esInt0,x
.2e68	85 2a		sta $2a				sta 	temp0
.2e6a	c8		iny				iny
.2e6b	b1 28		lda ($28),y			lda 	(codePtr),y
.2e6d	55 a0		eor $a0,x			eor 	esInt1,x
.2e6f	05 2a		ora $2a				ora 	temp0
.2e71	f0 10		beq $2e83			beq 	_CLCLTExit
.2e73	88		dey				dey
.2e74	b1 28		lda ($28),y			lda 	(codePtr),y
.2e76	d5 98		cmp $98,x			cmp 	esInt0,x
.2e78	c8		iny				iny
.2e79	b1 28		lda ($28),y			lda 	(codePtr),y
.2e7b	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2e7d	a9 ff		lda #$ff			lda 	#255
.2e7f	90 02		bcc $2e83			bcc 	_CLCLTExit
.2e81	a9 01		lda #$01			lda 	#1
.2e83					_CLCLTExit:
.2e83	60		rts				rts
.2e84					CLStructureCheck:
.2e84	85 2a		sta $2a				sta 	temp0
.2e86	a0 03		ldy #$03			ldy 	#3
.2e88					_CLSCLoop:
.2e88	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2e8a	c8		iny				iny
.2e8b	c9 80		cmp #$80			cmp 	#$80
.2e8d	90 f9		bcc $2e88			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2e8f	f0 28		beq $2eb9			beq		_CLSCExit					; EOL return
.2e91	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2e93	90 1e		bcc $2eb3			bcc 	_CLSCSpecial
.2e95	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2e97	90 ef		bcc $2e88			bcc 	_CLSCLoop
.2e99	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2e9b	b0 eb		bcs $2e88			bcs 	_CLSCLoop
.2e9d	aa		tax				tax 								; get adjustment
.2e9e	bd ae 33	lda $33ae,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2ea1	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2ea3	d0 e3		bne $2e88			bne 	_CLSCLoop
.2ea5	38		sec				sec
.2ea6	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2ea8	0a		asl a				asl 	a 							; double indent step
.2ea9	18		clc				clc
.2eaa	6d 04 0d	adc $0d04			adc 	structIndent 				; add to structure indent
.2ead	8d 04 0d	sta $0d04			sta 	structIndent
.2eb0	4c 88 2e	jmp $2e88			jmp 	_CLSCLoop
.2eb3					_CLSCSpecial:
.2eb3	20 10 2d	jsr $2d10			jsr 	ScannerSkipSpecial
.2eb6	4c 88 2e	jmp $2e88			jmp 	_CLSCLoop
.2eb9					_CLSCExit:
.2eb9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2eba					CommandLoad:
.2eba	20 e2 2e	jsr $2ee2			jsr 	CLSParameters 					; get parameters for load.
.2ebd	08		php				php
.2ebe	a2 0e		ldx #$0e		ldx	#14
.2ec0	20 f6 14	jsr $14f6		jsr	deviceHandler
.2ec3	28		plp				plp
.2ec4	b0 08		bcs $2ece			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2ec6	20 84 2d	jsr $2d84			jsr 	CommandClear
.2ec9	a2 04		ldx #$04		ldx	#4
.2ecb	20 7c 25	jsr $257c		jsr	interactionHandler
.2ece					_CLExit
.2ece	60		rts				rts
.2ecf					CommandSave:
.2ecf	20 e2 2e	jsr $2ee2			jsr 	CLSParameters					; get parameters for save
.2ed2	90 08		bcc $2edc			bcc 	_CSNoOverrideAddress
.2ed4	20 aa 3b	jsr $3baa			jsr 	CheckComma 						; should be a comma.
.2ed7	a2 02		ldx #$02			ldx 	#2
.2ed9	20 92 34	jsr $3492			jsr 	EvaluateInteger 				; get save end address.
.2edc					_CSNoOverrideAddress:
.2edc	a2 18		ldx #$18		ldx	#24
.2ede	20 f6 14	jsr $14f6		jsr	deviceHandler
.2ee1	60		rts				rts
.2ee2					CLSParameters:
.2ee2	a2 00		ldx #$00			ldx 	#0 								; string
.2ee4	20 87 34	jsr $3487			jsr 	EvaluateString
.2ee7	e8		inx				inx 									; erase out +1 +2
.2ee8	20 2a 3b	jsr $3b2a			jsr 	MInt32False
.2eeb	e8		inx				inx
.2eec	20 2a 3b	jsr $3b2a			jsr 	MInt32False
.2eef	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2ef2	85 99		sta $99				sta 	esInt0+1
.2ef4	ad c9 0a	lda $0ac9			lda 	basePage+1
.2ef7	85 a1		sta $a1				sta 	esInt1+1
.2ef9	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2efc	85 9a		sta $9a				sta 	esInt0+2
.2efe	ad cb 0a	lda $0acb			lda 	endProgram+1
.2f01	85 a2		sta $a2				sta 	esInt1+2
.2f03	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2f05	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2f07	d0 08		bne $2f11			bne 	_CLSDefault
.2f09	c8		iny				iny 									; skip comma
.2f0a	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2f0c	20 92 34	jsr $3492			jsr 	EvaluateInteger
.2f0f	38		sec				sec
.2f10	60		rts				rts
.2f11					_CLSDefault:
.2f11	18		clc				clc
.2f12	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2f13					Command_New:
.2f13					Command_XNew:
.2f13	20 b1 2f	jsr $2fb1			jsr 	ResetCodeAddress 			; point to first line
.2f16	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2f18	98		tya				tya
.2f19	91 28		sta ($28),y			sta 	(codePtr),y
.2f1b	20 84 2d	jsr $2d84			jsr 	CommandClear 				; clear everything down.
.2f1e	4c da 28	jmp $28da			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d05					breakCounter:
>0d05								.fill 	1
.0d06					breakIncrement:
>0d06								.fill 	1
.2f21					Command_Run:
.2f21					XCommand_Run:
.2f21	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2f23	9a		txs				txs
.2f24	20 ab 2f	jsr $2fab			jsr 	BreakOn 					; turn break on
.2f27	20 84 2d	jsr $2d84			jsr 	CommandClear 				; clear everything.
.2f2a	20 b1 2f	jsr $2fb1			jsr 	ResetCodeAddress 			; back to the start.
.2f2d					Command_RunFrom:
.2f2d	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2f2f					CRNextInstruction:
.2f2f	64 3a		stz $3a				stz 	softMemAlloc+1
.2f31	ad 05 0d	lda $0d05			lda 	breakCounter 				; check for break.
.2f34	6d 06 0d	adc $0d06			adc 	breakIncrement
.2f37	8d 05 0d	sta $0d05			sta 	breakCounter
.2f3a	90 05		bcc $2f41			bcc 	_CRNoChecks
.2f3c	a2 02		ldx #$02		ldx	#2
.2f3e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f41					_CRNoChecks
.2f41	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2f43	10 1c		bpl $2f61			bpl 	_CRNotToken
.2f45	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2f47	b0 0c		bcs $2f55			bcs 	_CRExecute
.2f49	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2f4b	b0 71		bcs $2fbe			bcs 	Unimplemented
.2f4d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2f4f	b0 04		bcs $2f55			bcs 	_CRExecute
.2f51	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2f53	b0 16		bcs $2f6b			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2f55					_CRExecute:
.2f55	c8		iny				iny 								; consume it.
.2f56	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2f57	aa		tax				tax
.2f58	20 5e 2f	jsr $2f5e			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2f5b	4c 2f 2f	jmp $2f2f			jmp 	CRNextInstruction
.2f5e					_CRRunRoutine:
.2f5e	7c c8 2f	jmp ($2fc8,x)			jmp 	(Group0Vectors,x)
.2f61					_CRNotToken:
.2f61	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2f63	b0 59		bcs $2fbe			bcs 	Unimplemented
.2f65					_CRDefaultLet:
.2f65	20 0d 28	jsr $280d			jsr 	CommandLet 					; do the default, LET
.2f68	4c 2f 2f	jmp $2f2f			jmp 	CRNextInstruction
.2f6b					_CRCheckIndirect:
.2f6b	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2f6d	f0 0a		beq $2f79			beq 	_CRAndCommand
.2f6f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2f71	f0 f2		beq $2f65			beq 	_CRDefaultLet
.2f73	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2f75	f0 ee		beq $2f65			beq 	_CRDefaultLet
.2f77	d0 45		bne $2fbe			bne 	Unimplemented
.2f79					_CRAndCommand:
.2f79	c8		iny				iny 								; skip over the AND token
.2f7a	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2f7c	20 96 2f	jsr $2f96			jsr 	CommandAssembler 			; do the assembler command
.2f7f	4c 2f 2f	jmp $2f2f			jmp 	CRNextInstruction 			; and loop round.
.2f82					CommandShift1:
.2f82	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2f84	10 38		bpl $2fbe			bpl 	Unimplemented 				; we have an error as this should not happen.
.2f86	c8		iny				iny 								; advance over it.
.2f87	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2f89	b0 0b		bcs $2f96			bcs 	CommandAssembler
.2f8b	0a		asl a				asl 	a 							; double into X
.2f8c	aa		tax				tax
.2f8d	7c 8e 30	jmp ($308e,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2f90					CommandShift2:
.2f90	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2f92	20 69 18	jsr $1869		jsr	extensionHandler
.2f95	60		rts				rts
.2f96					CommandAssembler:
.2f96	a2 02		ldx #$02		ldx	#2
.2f98	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2f9b	60		rts				rts
.2f9c					CommandAssemblerLabel:
.2f9c	a2 04		ldx #$04		ldx	#4
.2f9e	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2fa1	60		rts				rts
.2fa2					CommandColon:
.2fa2	60		rts				rts
.2fa3					CommandBreak:
.2fa3	20 90 34	jsr $3490			jsr 	EvaluateRootInteger
.2fa6	20 51 3b	jsr $3b51			jsr 	MInt32Zero
.2fa9	f0 02		beq $2fad			beq 	BreakOff
.2fab					BreakOn:
.2fab	a2 08		ldx #$08			ldx 	#8
.2fad					BreakOff:
.2fad	8e 06 0d	stx $0d06			stx 	breakIncrement
.2fb0	60		rts				rts
.2fb1					ResetCodeAddress:
.2fb1	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2fb4	85 28		sta $28				sta 	codePtr
.2fb6	ad c9 0a	lda $0ac9			lda 	basePage+1
.2fb9	85 29		sta $29				sta 	codePtr+1
.2fbb	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2fbd	60		rts				rts
.2fbe					Unimplemented:
.2fbe	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2fc0	20 18 15	jsr $1518		jsr	errorHandler
.2fc3					TKErr01:
.2fc3					TKErr02:
.2fc3					TKErr03:
.2fc3					TKErr04:
.2fc3					TKErr05:
.2fc3					TKErr06:
.2fc3					TKErr07:
.2fc3					TKErr08:
.2fc3					TKErr09:
.2fc3					TKErr10:
.2fc3					TKErr11:
.2fc3					TKErr12:
.2fc3					TKErr13:
.2fc3					TKErr14:
.2fc3	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2fc5	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2fc8					Group0Vectors:
>2fc8	e0 28					.word	AdvanceNextLine          ; $80 [[eol]]
>2fca	82 2f					.word	CommandShift1            ; $81 [[sh1]]
>2fcc	90 2f					.word	CommandShift2            ; $82 [[sh2]]
>2fce	c3 2f					.word	TKErr09                  ; $83 [[sh3]]
>2fd0	c3 2f					.word	TKErr10                  ; $84 [[fpc]]
>2fd2	c3 2f					.word	TKErr08                  ; $85 [[str]]
>2fd4	77 31					.word	AndHandler               ; $86 and
>2fd6	64 31					.word	OrHandler                ; $87 or
>2fd8	51 31					.word	XorHandler               ; $88 xor
>2fda	99 32					.word	CompareGreaterEq         ; $89 >=
>2fdc	a3 32					.word	CompareLessEq            ; $8a <=
>2fde	85 32					.word	CompareGreater           ; $8b >
>2fe0	7b 32					.word	CompareLess              ; $8c <
>2fe2	71 32					.word	CompareEquals            ; $8d =
>2fe4	8f 32					.word	CompareNotEquals         ; $8e <>
>2fe6	e2 30					.word	AddHandler               ; $8f +
>2fe8	05 31					.word	SubHandler               ; $90 -
>2fea	9d 31					.word	ShrHandler               ; $91 >>
>2fec	8a 31					.word	ShlHandler               ; $92 <<
>2fee	18 31					.word	MulHandler               ; $93 *
>2ff0	2b 31					.word	DivHandler               ; $94 /
>2ff2	3e 31					.word	ModHandler               ; $95 mod
>2ff4	d6 31					.word	PowerHandler             ; $96 ^
>2ff6	b0 31					.word	WordRefHandler           ; $97 !
>2ff8	c3 31					.word	ByteRefHandler           ; $98 ?
>2ffa	9f 2c					.word	Command_Repeat           ; $99 repeat
>2ffc	49 2d					.word	Command_While            ; $9a while
>2ffe	f4 28					.word	Command_FOR              ; $9b for
>3000	03 2a					.word	CommandIf                ; $9c if
>3002	c3 2f					.word	TKErr04                  ; $9d defproc
>3004	ac 2c					.word	Command_Until            ; $9e until
>3006	6c 2d					.word	Command_Wend             ; $9f wend
>3008	55 29					.word	Command_NEXT             ; $a0 next
>300a	c3 2f					.word	TKErr06                  ; $a1 then
>300c	3e 2a					.word	Command_ENDIF            ; $a2 endif
>300e	ae 2b					.word	ReturnProc               ; $a3 endproc
>3010	fd 33					.word	UnaryParenthesis         ; $a4 (
>3012	df 35					.word	UnaryLen                 ; $a5 len(
>3014	23 36					.word	UnarySgn                 ; $a6 sgn(
>3016	0c 36					.word	UnaryAbs                 ; $a7 abs(
>3018	7c 36					.word	Unary_Random             ; $a8 random(
>301a	c6 36					.word	Unary_Page               ; $a9 page
>301c	26 3b					.word	MInt32True               ; $aa true
>301e	2a 3b					.word	MInt32False              ; $ab false
>3020	91 36					.word	Unary_Min                ; $ac min(
>3022	95 36					.word	Unary_Max                ; $ad max(
>3024	9e 37					.word	UnarySys                 ; $ae sys(
>3026	47 37					.word	UnaryTimer               ; $af timer(
>3028	5c 35					.word	EventFunction            ; $b0 event(
>302a	70 37					.word	UnaryGet                 ; $b1 get(
>302c	60 37					.word	UnaryInkey               ; $b2 inkey(
>302e	17 37					.word	UnaryAlloc               ; $b3 alloc(
>3030	d7 37					.word	ExecChr                  ; $b4 chr$(
>3032	07 38					.word	ExecLeft                 ; $b5 left$(
>3034	24 38					.word	ExecMid                  ; $b6 mid$(
>3036	4c 38					.word	ExecRight                ; $b7 right$(
>3038	de 34					.word	Event_Str                ; $b8 str$(
>303a	0d 35					.word	UnaryVal                 ; $b9 val(
>303c	3a 36					.word	UnaryPeek                ; $ba peek(
>303e	40 36					.word	UnaryDeek                ; $bb deek(
>3040	46 36					.word	UnaryLeek                ; $bc leek(
>3042	fd 35					.word	UnaryAsc                 ; $bd asc(
>3044	f1 36					.word	UnaryIntToFloat          ; $be int(
>3046	04 37					.word	UnaryFloatToInt          ; $bf float(
>3048	10 35					.word	UnaryIsVal               ; $c0 isval(
>304a	ee 37					.word	ExecUpper                ; $c1 upper$(
>304c	eb 37					.word	ExecLower                ; $c2 lower$(
>304e	d4 36					.word	UnaryReference           ; $c3 @
>3050	ea 36					.word	UnaryComplement          ; $c4 ~
>3052	e7 36					.word	UnaryHexMarker           ; $c5 &
>3054	89 37					.word	UnaryGetString           ; $c6 get$(
>3056	8f 37					.word	UnaryInkeyString         ; $c7 inkey$(
>3058	c6 37					.word	UnaryMem                 ; $c8 mem
>305a	c3 2f					.word	TKErr01                  ; $c9 )
>305c	a2 2f					.word	CommandColon             ; $ca :
>305e	c3 2f					.word	TKErr02                  ; $cb ,
>3060	c3 2f					.word	TKErr03                  ; $cc ;
>3062	c8 28					.word	Command_Rem2             ; $cd '
>3064	c3 2f					.word	TKErr07                  ; $ce to
>3066	c3 2f					.word	TKErr05                  ; $cf step
>3068	41 2b					.word	CallProc                 ; $d0 proc
>306a	3f 2a					.word	CommandLocal             ; $d1 local
>306c	ff 27					.word	Command_Dim              ; $d2 dim
>306e	c8 28					.word	Command_Rem              ; $d3 rem
>3070	0d 28					.word	CommandLet               ; $d4 let
>3072	49 26					.word	Command_Input            ; $d5 input
>3074	38 2a					.word	Command_ELSE             ; $d6 else
>3076	d0 27					.word	Command_VDU              ; $d7 vdu
>3078	ff 26					.word	Command_Print            ; $d8 print
>307a	b1 25					.word	CommandData              ; $d9 data
>307c	c3 2f					.word	TKErr13                  ; $da image
>307e	c3 2f					.word	TKErr12                  ; $db at
>3080	c3 2f					.word	TKErr14                  ; $dc flip
>3082	f1 27					.word	Command_Assert           ; $dd assert
>3084	8b 28					.word	Command_Poke             ; $de poke
>3086	8f 28					.word	Command_Doke             ; $df doke
>3088	93 28					.word	Command_Loke             ; $e0 loke
>308a	a0 27					.word	Command_Ink              ; $e1 ink
>308c	ab 27					.word	Command_Paper            ; $e2 paper
>308e	9a 27					.word	Command_CLS              ; $e3 cls
>3090	b6 27					.word	Command_Locate           ; $e4 locate
>3092	9c 2f					.word	CommandAssemblerLabel    ; $e5 .
>3094	be 2f					.word	Unimplemented            ; $e6 from
>3096	c3 2f					.word	TKErr11                  ; $e7 #
>3098	84 2d					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.309a					Group1Vectors:
>309a	ba 2e					.word	CommandLoad              ; $86 load
>309c	cf 2e					.word	CommandSave              ; $87 save
>309e	df 2d					.word	CommandList              ; $88 list
>30a0	13 2f					.word	Command_New              ; $89 new
>30a2	a3 2f					.word	CommandBreak             ; $8a break
>30a4	21 2f					.word	Command_Run              ; $8b run
>30a6	86 25					.word	CommandRead              ; $8c read
>30a8	ba 25					.word	CommandRestore           ; $8d restore
>30aa	da 28					.word	CommandEnd               ; $8e end
>30ac	d5 28					.word	CommandStop              ; $8f stop
>30ae	dd 28					.word	CommandXemu              ; $90 xemu
>30b0	17 26					.word	CommandGOTO              ; $91 goto
>30b2	ec 25					.word	CommandGOSUB             ; $92 gosub
>30b4	ff 25					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.30b6					BinaryProcess:
.30b6	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.30b8	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.30ba	0a		asl a				asl 	a
.30bb	30 0e		bmi $30cb			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.30bd	18		clc				clc 								; return CC for integer
.30be	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.30c0	f0 08		beq $30ca			beq 	_BPExit 					; if both integer then return with CC.
.30c2	20 d0 30	jsr $30d0			jsr 	BPMakeBothFloat 			; make both float
.30c5	a9 01		lda #$01			lda 	#$01 						; set result type to float
.30c7	95 90		sta $90,x			sta 	esType,x
.30c9	38		sec				sec 								; and return with carry set.
.30ca					_BPExit:
.30ca	60		rts				rts
.30cb					_BPStringType:
.30cb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.30cd	20 18 15	jsr $1518		jsr	errorHandler
.30d0					BPMakeBothFloat:
.30d0	e8		inx				inx
.30d1	20 d5 30	jsr $30d5			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.30d4	ca		dex				dex
.30d5					BPMakeFloat:
.30d5	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.30d7	4a		lsr a				lsr 	a
.30d8	b0 07		bcs $30e1			bcs 	_BPIsFloat 					; already a float if set.
.30da	8a		txa				txa
.30db	a2 1c		ldx #$1c		ldx	#28
.30dd	20 90 23	jsr $2390		jsr	floatingpointHandler
.30e0	aa		tax				tax
.30e1					_BPIsFloat:
.30e1	60		rts				rts
.30e2					AddHandler:
.30e2	20 b3 32	jsr $32b3			jsr 	DereferenceTwo 				; dereference top two on stack.
.30e5	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.30e7	35 91		and $91,x			and 	esType+1,x
.30e9	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.30eb	d0 10		bne $30fd			bne 	_AHStringConcat				; concatenate strings.
.30ed	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.30f0	b0 03		bcs $30f5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30f2	4c 0e 3a	jmp $3a0e			jmp 	MInt32Add 							; else do it as integer.
.30f5					_IsFPOperation:
.30f5	8a		txa				txa 								; call the relevant fp routine
.30f6	a2 04		ldx #$04		ldx	#4
.30f8	20 90 23	jsr $2390		jsr	floatingpointHandler
.30fb	aa		tax				tax
.30fc	60		rts				rts
.30fd					_AHStringConcat:
.30fd	8a		txa				txa 								; handled by the string module.
.30fe	a2 06		ldx #$06		ldx	#6
.3100	20 d5 3e	jsr $3ed5		jsr	stringHandler
.3103	aa		tax				tax
.3104	60		rts				rts
.3105					SubHandler:
.3105	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.3108	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.310b	b0 03		bcs $3110			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.310d	4c 28 3a	jmp $3a28			jmp 	MInt32Sub 							; else do it as integer.
.3110					_IsFPOperation:
.3110	8a		txa				txa 								; call the relevant fp routine
.3111	a2 12		ldx #$12		ldx	#18
.3113	20 90 23	jsr $2390		jsr	floatingpointHandler
.3116	aa		tax				tax
.3117	60		rts				rts
.3118					MulHandler:
.3118	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.311b	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.311e	b0 03		bcs $3123			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3120	4c 42 3a	jmp $3a42			jmp 	MInt32Multiply 							; else do it as integer.
.3123					_IsFPOperation:
.3123	8a		txa				txa 								; call the relevant fp routine
.3124	a2 0c		ldx #$0c		ldx	#12
.3126	20 90 23	jsr $2390		jsr	floatingpointHandler
.3129	aa		tax				tax
.312a	60		rts				rts
.312b					DivHandler:
.312b	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.312e	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.3131	b0 03		bcs $3136			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3133	4c ff 38	jmp $38ff			jmp 	MInt32SDivide 							; else do it as integer.
.3136					_IsFPOperation:
.3136	8a		txa				txa 								; call the relevant fp routine
.3137	a2 08		ldx #$08		ldx	#8
.3139	20 90 23	jsr $2390		jsr	floatingpointHandler
.313c	aa		tax				tax
.313d	60		rts				rts
.313e					ModHandler:
.313e	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.3141	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.3144	b0 03		bcs $3149			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3146	4c 7d 39	jmp $397d			jmp 	MInt32Modulus 							; else do it as integer.
.3149					_IsFPOperation:
.3149	8a		txa				txa 								; call the relevant fp routine
.314a	a2 0a		ldx #$0a		ldx	#10
.314c	20 90 23	jsr $2390		jsr	floatingpointHandler
.314f	aa		tax				tax
.3150	60		rts				rts
.3151					XorHandler:
.3151	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.3154	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.3157	b0 03		bcs $315c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3159	4c b1 38	jmp $38b1			jmp 	MInt32Xor 							; else do it as integer.
.315c					_IsFPOperation:
.315c	8a		txa				txa 								; call the relevant fp routine
.315d	a2 0a		ldx #$0a		ldx	#10
.315f	20 90 23	jsr $2390		jsr	floatingpointHandler
.3162	aa		tax				tax
.3163	60		rts				rts
.3164					OrHandler:
.3164	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.3167	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.316a	b0 03		bcs $316f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.316c	4c 98 38	jmp $3898			jmp 	MInt32Or 							; else do it as integer.
.316f					_IsFPOperation:
.316f	8a		txa				txa 								; call the relevant fp routine
.3170	a2 0a		ldx #$0a		ldx	#10
.3172	20 90 23	jsr $2390		jsr	floatingpointHandler
.3175	aa		tax				tax
.3176	60		rts				rts
.3177					AndHandler:
.3177	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.317a	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.317d	b0 03		bcs $3182			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.317f	4c 7f 38	jmp $387f			jmp 	MInt32And 							; else do it as integer.
.3182					_IsFPOperation:
.3182	8a		txa				txa 								; call the relevant fp routine
.3183	a2 0a		ldx #$0a		ldx	#10
.3185	20 90 23	jsr $2390		jsr	floatingpointHandler
.3188	aa		tax				tax
.3189	60		rts				rts
.318a					ShlHandler:
.318a	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.318d	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.3190	b0 03		bcs $3195			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3192	4c 0b 32	jmp $320b			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.3195					_IsFPOperation:
.3195	8a		txa				txa 								; call the relevant fp routine
.3196	a2 0a		ldx #$0a		ldx	#10
.3198	20 90 23	jsr $2390		jsr	floatingpointHandler
.319b	aa		tax				tax
.319c	60		rts				rts
.319d					ShrHandler:
.319d	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.31a0	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.31a3	b0 03		bcs $31a8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31a5	4c 0e 32	jmp $320e			jmp 	MInt32ShiftRightX 							; else do it as integer.
.31a8					_IsFPOperation:
.31a8	8a		txa				txa 								; call the relevant fp routine
.31a9	a2 0a		ldx #$0a		ldx	#10
.31ab	20 90 23	jsr $2390		jsr	floatingpointHandler
.31ae	aa		tax				tax
.31af	60		rts				rts
.31b0					WordRefHandler:
.31b0	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.31b3	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.31b6	b0 03		bcs $31bb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31b8	4c fd 31	jmp $31fd			jmp 	MInt32WordIndirect 							; else do it as integer.
.31bb					_IsFPOperation:
.31bb	8a		txa				txa 								; call the relevant fp routine
.31bc	a2 0a		ldx #$0a		ldx	#10
.31be	20 90 23	jsr $2390		jsr	floatingpointHandler
.31c1	aa		tax				tax
.31c2	60		rts				rts
.31c3					ByteRefHandler:
.31c3	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.31c6	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.31c9	b0 03		bcs $31ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31cb	4c 01 32	jmp $3201			jmp 	MInt32ByteIndirect 							; else do it as integer.
.31ce					_IsFPOperation:
.31ce	8a		txa				txa 								; call the relevant fp routine
.31cf	a2 0a		ldx #$0a		ldx	#10
.31d1	20 90 23	jsr $2390		jsr	floatingpointHandler
.31d4	aa		tax				tax
.31d5	60		rts				rts
.31d6					PowerHandler:
.31d6	20 b3 32	jsr $32b3			jsr 	DereferenceTwo
.31d9	20 b6 30	jsr $30b6			jsr 	BinaryProcess 				; check to see if either is float
.31dc	b0 03		bcs $31e1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31de	4c e9 31	jmp $31e9			jmp 	PowerInteger 							; else do it as integer.
.31e1					_IsFPOperation:
.31e1	8a		txa				txa 								; call the relevant fp routine
.31e2	a2 18		ldx #$18		ldx	#24
.31e4	20 90 23	jsr $2390		jsr	floatingpointHandler
.31e7	aa		tax				tax
.31e8	60		rts				rts
.31e9					PowerInteger:
.31e9	20 d0 30	jsr $30d0			jsr 	BPMakeBothFloat				; make them float.
.31ec	8a		txa				txa
.31ed	a2 18		ldx #$18		ldx	#24
.31ef	20 90 23	jsr $2390		jsr	floatingpointHandler
.31f2	a2 14		ldx #$14		ldx	#20
.31f4	20 90 23	jsr $2390		jsr	floatingpointHandler
.31f7	aa		tax				tax
.31f8	a9 00		lda #$00			lda 	#0 							; make type integer
.31fa	95 90		sta $90,x			sta 	esType,x
.31fc	60		rts				rts
.31fd					Mint32WordIndirect:
.31fd	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.31ff	d0 02		bne $3203			bne 	Min32Indirect
.3201					Mint32ByteIndirect:
.3201	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.3203					Min32Indirect:
.3203	48		pha				pha 								; save the indirection
.3204	20 0e 3a	jsr $3a0e			jsr 	MInt32Add 					; add a!b a?b
.3207	68		pla				pla 								; and set the type to reference.
.3208	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.320a	60		rts				rts
.320b					Mint32ShiftLeftX:
.320b	18		clc				clc 								; CC shift left
.320c	90 01		bcc $320f			bcc 	Mint32Shift
.320e					Mint32ShiftRightX:
.320e	38		sec				sec 								; CS shift right
.320f					Mint32Shift:
.320f	08		php				php 								; save carry flag on stack.
.3210	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3212	15 a9		ora $a9,x			ora 	esInt2+1,x
.3214	15 b1		ora $b1,x			ora 	esInt3+1,x
.3216	d0 1e		bne $3236			bne 	_MShiftZero
.3218	b5 99		lda $99,x			lda 	esInt0+1,x
.321a	c9 20		cmp #$20			cmp 	#32
.321c	b0 18		bcs $3236			bcs 	_MShiftZero
.321e					_MShiftLoop:
.321e	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3220	f0 12		beq $3234			beq 	_MShiftExit
.3222	d6 99		dec $99,x			dec 	esInt0+1,x
.3224	28		plp				plp 								; restore and save carry
.3225	08		php				php
.3226	90 06		bcc $322e			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3228	20 48 3b	jsr $3b48			jsr 	Mint32ShiftRight
.322b	4c 1e 32	jmp $321e			jmp 	_MShiftLoop
.322e					_MShiftLeft:
.322e	20 3f 3b	jsr $3b3f			jsr 	Mint32ShiftLeft
.3231	4c 1e 32	jmp $321e			jmp 	_MShiftLoop
.3234					_MShiftExit:
.3234	28		plp				plp	 								; throw saved carry and exit
.3235	60		rts				rts
.3236					_MShiftZero:
.3236	4c 2a 3b	jmp $3b2a			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.3239					PerformComparison:
.3239	20 b3 32	jsr $32b3			jsr 	DereferenceTwo 				; make both values.
.323c	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.323e	35 91		and $91,x			and 	esType+1,x
.3240	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3241	30 1d		bmi $3260			bmi 	_PCIsString
.3243	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.3245	15 91		ora $91,x			ora 	esType+1,x
.3247	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3248	30 22		bmi $326c			bmi 	_PCError
.324a	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.324c	f0 0f		beq $325d			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.324e	20 d0 30	jsr $30d0			jsr 	BPMakeBothFloat 			; make both float
.3251	8a		txa				txa
.3252	a2 06		ldx #$06		ldx	#6
.3254	20 90 23	jsr $2390		jsr	floatingpointHandler
.3257	86 32		stx $32				stx 	tempShort 					; save result
.3259	aa		tax				tax
.325a	a5 32		lda $32				lda 	tempShort
.325c	60		rts				rts
.325d					_PCIsInteger:
.325d	4c ca 38	jmp $38ca			jmp 	MInt32Compare
.3260					_PCIsString:
.3260	8a		txa				txa 								; A has SP
.3261	a2 0a		ldx #$0a		ldx	#10
.3263	20 d5 3e	jsr $3ed5		jsr	stringHandler
.3266	86 32		stx $32				stx 	tempShort 					; save result
.3268	aa		tax				tax 								; put SP back in X and get result.
.3269	a5 32		lda $32				lda 	tempShort
.326b	60		rts				rts
.326c					_PCError:
.326c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.326e	20 18 15	jsr $1518		jsr	errorHandler
.3271					CompareEquals:
.3271	20 39 32	jsr $3239			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3274	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3276	f0 35		beq $32ad			beq  	CompareTrue
.3278	4c b0 32	jmp $32b0			jmp 	CompareFalse
.327b					CompareLess:
.327b	20 39 32	jsr $3239			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.327e	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3280	f0 2b		beq $32ad			beq  	CompareTrue
.3282	4c b0 32	jmp $32b0			jmp 	CompareFalse
.3285					CompareGreater:
.3285	20 39 32	jsr $3239			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3288	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.328a	f0 21		beq $32ad			beq  	CompareTrue
.328c	4c b0 32	jmp $32b0			jmp 	CompareFalse
.328f					CompareNotEquals:
.328f	20 39 32	jsr $3239			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3292	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3294	d0 17		bne $32ad			bne  	CompareTrue
.3296	4c b0 32	jmp $32b0			jmp 	CompareFalse
.3299					CompareGreaterEq:
.3299	20 39 32	jsr $3239			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.329c	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.329e	d0 0d		bne $32ad			bne  	CompareTrue
.32a0	4c b0 32	jmp $32b0			jmp 	CompareFalse
.32a3					CompareLessEq:
.32a3	20 39 32	jsr $3239			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.32a6	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.32a8	d0 03		bne $32ad			bne  	CompareTrue
.32aa	4c b0 32	jmp $32b0			jmp 	CompareFalse
.32ad					CompareTrue:
.32ad	4c 26 3b	jmp $3b26			jmp 	MInt32True
.32b0					CompareFalse:
.32b0	4c 2a 3b	jmp $3b2a			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.32b3					DereferenceTwo:
.32b3	e8		inx				inx
.32b4	20 b8 32	jsr $32b8			jsr 	DereferenceOne
.32b7	ca		dex				dex
.32b8					DereferenceOne:
.32b8	b5 90		lda $90,x			lda 	esType,x
.32ba	10 3d		bpl $32f9			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.32bc	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.32bd	b0 3b		bcs $32fa			bcs 	_DRFloatDeReference
.32bf	98		tya				tya
.32c0	48		pha				pha
.32c1	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.32c3	85 2a		sta $2a				sta 	temp0
.32c5	b5 a0		lda $a0,x			lda 	esInt1,x
.32c7	85 2b		sta $2b				sta 	temp0+1
.32c9	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.32cb	95 a0		sta $a0,x			sta 	esInt1,x
.32cd	95 a8		sta $a8,x			sta 	esInt2,x
.32cf	95 b0		sta $b0,x			sta 	esInt3,x
.32d1	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.32d3	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.32d5	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.32d6	30 0d		bmi $32e5			bmi 	_DeRefString 				; string, 2 bytes only
.32d8	d0 11		bne $32eb			bne 	_DeRefByte 					; byte 1 byte only
.32da					_DeRefLong:
.32da	a0 03		ldy #$03			ldy 	#3
.32dc	b1 2a		lda ($2a),y			lda 	(temp0),y
.32de	95 b0		sta $b0,x			sta 	esInt3,x
.32e0	88		dey				dey
.32e1	b1 2a		lda ($2a),y			lda 	(temp0),y
.32e3	95 a8		sta $a8,x			sta 	esInt2,x
.32e5					_DeRefString:
.32e5	a0 01		ldy #$01			ldy 	#1
.32e7	b1 2a		lda ($2a),y			lda 	(temp0),y
.32e9	95 a0		sta $a0,x			sta 	esInt1,x
.32eb					_DeRefByte:
.32eb	a0 00		ldy #$00			ldy 	#0
.32ed	b1 2a		lda ($2a),y			lda 	(temp0),y
.32ef	95 98		sta $98,x			sta 	esInt0,x
.32f1	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.32f3	29 40		and #$40			and 	#$40
.32f5	95 90		sta $90,x			sta 	esType,x
.32f7	68		pla				pla
.32f8	a8		tay				tay
.32f9					_DRNotReference
.32f9	60		rts				rts
.32fa					_DRFloatDereference:
.32fa	20 82 28	jsr $2882			jsr 	TOSToTemp0 					; address to deref in temp0
.32fd	8a		txa				txa
.32fe	a2 1e		ldx #$1e		ldx	#30
.3300	20 90 23	jsr $2390		jsr	floatingpointHandler
.3303	aa		tax				tax
.3304	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.3306	95 90		sta $90,x			sta 	esType,x
.3308	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.3309					EvaluateLevel:
.3309	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.330b	b0 1e		bcs $332b			bcs 	_ELStack
.330d	48		pha				pha 								; save precedence level.
.330e	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3310	95 98		sta $98,x			sta 	esInt0,x
.3312	95 a0		sta $a0,x			sta 	esInt1,x
.3314	95 a8		sta $a8,x			sta 	esInt2,x
.3316	95 b0		sta $b0,x			sta 	esInt3,x
.3318	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.331a	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.331c	30 26		bmi $3344			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.331e	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.331f	30 0f		bmi $3330			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3321	8a		txa				txa 								; stack level in X
.3322	a2 02		ldx #$02		ldx	#2
.3324	20 29 4b	jsr $4b29		jsr	variableHandler
.3327	aa		tax				tax
.3328	4c 6d 33	jmp $336d			jmp		_ELHasTerm
.332b					_ELStack:
.332b	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.332d	20 18 15	jsr $1518		jsr	errorHandler
.3330					_ELIsConstant:
.3330	4a		lsr a				lsr 	a 							; get the value back
.3331	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3333	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.3335					_ELCheckNext:
.3335	c8		iny				iny 								; look at next
.3336	b1 28		lda ($28),y			lda 	(codePtr),y
.3338	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.333a	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.333c	b0 2f		bcs $336d			bcs 	_ELHasTerm 					; done getting the constant.
.333e	20 06 34	jsr $3406			jsr 	ELShiftByteIn 				; shift byte into position.
.3341	4c 35 33	jmp $3335			jmp 	_ELCheckNext
.3344					_ELIsToken:
.3344	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3346	f0 0f		beq $3357			beq 	_ELIsString
.3348	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.334a	d0 5f		bne $33ab			bne 	_ELCheckUnary
.334c	8a		txa				txa 								; put X into A
.334d	c8		iny				iny 								; skip over the float marker
.334e	a2 1a		ldx #$1a		ldx	#26
.3350	20 90 23	jsr $2390		jsr	floatingpointHandler
.3353	aa		tax				tax 								; restore X
.3354	4c 6d 33	jmp $336d			jmp 	_ELHasTerm
.3357					_ELIsString:
.3357	98		tya				tya 								; address of string is codePtr+y+1
.3358	38		sec				sec
.3359	65 28		adc $28				adc 	codePtr
.335b	95 98		sta $98,x			sta 	esInt0,x
.335d	a5 29		lda $29				lda 	codePtr+1
.335f	69 00		adc #$00			adc 	#0
.3361	95 a0		sta $a0,x			sta 	esInt1,x
.3363	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3365	95 90		sta $90,x			sta 	esType,x
.3367	c8		iny				iny 								; skip over string.
.3368	98		tya				tya
.3369	38		sec				sec									; +1 for the length itself.
.336a	71 28		adc ($28),y			adc 	(codePtr),y
.336c	a8		tay				tay 								; and fall through to term loop code.
.336d					_ELHasTerm:
.336d	b1 28		lda ($28),y			lda 	(codePtr),y
.336f	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3371	90 04		bcc $3377			bcc 	_ELPopExit
.3373	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3375	90 02		bcc $3379			bcc 	_ELHasBinaryTerm
.3377					_ELPopExit:
.3377	68		pla				pla
.3378					_ELExit:
.3378	60		rts				rts
.3379					_ELHasBinaryTerm:
.3379	84 32		sty $32				sty 	tempShort 					; save position
.337b	a8		tay				tay 								; use token as an index and get the precedence.
.337c	b9 ae 33	lda $33ae,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.337f	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3381	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.3383	68		pla				pla 								; restore current level.
.3384	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3386	b0 f0		bcs $3378			bcs 	_ELExit
.3388	48		pha				pha 								; save current level back on the stack.
.3389	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.338b	48		pha				pha
.338c	c8		iny				iny
.338d	e8		inx				inx 								; calculate the RHS at the operator precedence.
.338e	a5 32		lda $32				lda 	tempShort
.3390	20 09 33	jsr $3309			jsr 	EvaluateLevel
.3393	ca		dex				dex
.3394	68		pla				pla 								; get the operator back out.
.3395					_ELExecuteA:
.3395	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3397	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3398	aa		tax				tax
.3399	bd c8 2f	lda $2fc8,x			lda 	Group0Vectors,x
.339c	85 2a		sta $2a				sta 	temp0
.339e	bd c9 2f	lda $2fc9,x			lda 	Group0Vectors+1,x
.33a1	85 2b		sta $2b				sta 	temp0+1
.33a3	a6 32		ldx $32				ldx 	tempShort
.33a5	20 f2 33	jsr $33f2			jsr 	_ELCallTemp0
.33a8	4c 6d 33	jmp $336d			jmp 	_ELHasTerm 					; and loop back round.
.33ab					_ELCheckUnary:
.33ab	c8		iny				iny 								; skip over token.
.33ac	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.33ae	f0 19		beq $33c9			beq 	_ELMinus
.33b0	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.33b2	f0 2c		beq $33e0			beq 	_ELIndirect
.33b4	c9 98		cmp #$98			cmp 	#TKW_QMARK
.33b6	f0 28		beq $33e0			beq 	_ELIndirect
.33b8	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.33ba	f0 39		beq $33f5			beq 	_ELExtension
.33bc	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.33be	90 04		bcc $33c4			bcc 	_ELUSyntax
.33c0	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.33c2	90 d1		bcc $3395			bcc 	_ELExecuteA 				; if so do that token.
.33c4					_ELUSyntax:
.33c4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.33c6	20 18 15	jsr $1518		jsr	errorHandler
.33c9					_ELMinus:
.33c9	20 5b 34	jsr $345b			jsr 	EvaluateNumericTerm 		; get a number to negate.
.33cc	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.33ce	f0 0a		beq $33da			beq 	_ELMinusInteger
.33d0	8a		txa				txa
.33d1	a2 0e		ldx #$0e		ldx	#14
.33d3	20 90 23	jsr $2390		jsr	floatingpointHandler
.33d6	aa		tax				tax
.33d7	4c 6d 33	jmp $336d			jmp 	_ELHasTerm
.33da					_ELMinusInteger:
.33da	20 e4 3a	jsr $3ae4			jsr 	MInt32Negate 				; do int negate
.33dd	4c 6d 33	jmp $336d			jmp 	_ELHasTerm
.33e0					_ELIndirect:
.33e0	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.33e1	20 64 34	jsr $3464			jsr 	EvaluateIntegerTerm 		; integer address
.33e4	68		pla				pla
.33e5	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.33e7	f0 02		beq $33eb			beq 	_ELHaveModifier
.33e9	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.33eb					_ELHaveModifier:
.33eb	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.33ed	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.33ef	4c 6d 33	jmp $336d			jmp 	_ELHasTerm
.33f2					_ELCallTemp0:
.33f2	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.33f5					_ELExtension:
.33f5	8a		txa				txa 								; stack pos in A
.33f6	20 69 18	jsr $1869		jsr	extensionHandler
.33f9	aa		tax				tax 								; restore stack
.33fa	4c 6d 33	jmp $336d			jmp 	_ELHasTerm
.33fd					UnaryParenthesis:
.33fd	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.33ff	20 09 33	jsr $3309			jsr 	EvaluateLevel
.3402	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen 			; check for )
.3405	60		rts				rts
.3406					ELShiftByteIn:
.3406	48		pha				pha 								; save bits to shift in.
.3407	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.3409	48		pha				pha
.340a	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.340c	95 b0		sta $b0,x			sta 	esInt3,x
.340e	b5 a0		lda $a0,x			lda 	esInt1,x
.3410	95 a8		sta $a8,x			sta 	esInt2,x
.3412	b5 98		lda $98,x			lda 	esInt0,x
.3414	95 a0		sta $a0,x			sta 	esInt1,x
.3416	a9 00		lda #$00			lda 	#0
.3418	95 98		sta $98,x			sta 	esInt0,x
.341a	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.341b	29 03		and #$03			and 	#3 							; only want lower 2 bits
.341d	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.341f					_ELShiftLoop:
.341f	4a		lsr a				lsr 	a
.3420	76 b0		ror $b0,x			ror 	esInt3,x
.3422	76 a8		ror $a8,x			ror 	esInt2,x
.3424	76 a0		ror $a0,x			ror 	esInt1,x
.3426	76 98		ror $98,x			ror 	esInt0,x
.3428	c9 01		cmp #$01			cmp 	#1
.342a	d0 f3		bne $341f			bne 	_ELShiftLoop
.342c	68		pla				pla 								; get original 6 bit value and OR in.
.342d	29 3f		and #$3f			and 	#$3F
.342f	15 98		ora $98,x			ora 	esInt0,x
.3431	95 98		sta $98,x			sta 	esInt0,x
.3433	60		rts				rts
.3434					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3434	01					.byte	$01			; $86 and
>3435	01					.byte	$01			; $87 or
>3436	01					.byte	$01			; $88 xor
>3437	02					.byte	$02			; $89 >=
>3438	02					.byte	$02			; $8a <=
>3439	02					.byte	$02			; $8b >
>343a	02					.byte	$02			; $8c <
>343b	02					.byte	$02			; $8d =
>343c	02					.byte	$02			; $8e <>
>343d	03					.byte	$03			; $8f +
>343e	03					.byte	$03			; $90 -
>343f	04					.byte	$04			; $91 >>
>3440	04					.byte	$04			; $92 <<
>3441	04					.byte	$04			; $93 *
>3442	04					.byte	$04			; $94 /
>3443	04					.byte	$04			; $95 mod
>3444	05					.byte	$05			; $96 ^
>3445	06					.byte	$06			; $97 !
>3446	06					.byte	$06			; $98 ?
>3447	82					.byte	$82			; $99 repeat
>3448	82					.byte	$82			; $9a while
>3449	82					.byte	$82			; $9b for
>344a	82					.byte	$82			; $9c if
>344b	82					.byte	$82			; $9d defproc
>344c	80					.byte	$80			; $9e until
>344d	80					.byte	$80			; $9f wend
>344e	80					.byte	$80			; $a0 next
>344f	80					.byte	$80			; $a1 then
>3450	80					.byte	$80			; $a2 endif
>3451	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3452					EvaluateTerm:
.3452	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.3454	20 09 33	jsr $3309			jsr 	EvaluateLevel
.3457	20 b8 32	jsr $32b8			jsr 	DereferenceOne
.345a	60		rts				rts
.345b					EvaluateNumericTerm:
.345b	20 52 34	jsr $3452			jsr 	EvaluateTerm
.345e	b5 90		lda $90,x			lda 	esType,x
.3460	0a		asl a				asl 	a 							; see if it's a string.
.3461	30 09		bmi $346c			bmi 	ENTType
.3463	60		rts				rts
.3464					EvaluateIntegerTerm:
.3464	20 52 34	jsr $3452			jsr 	EvaluateTerm
.3467	b5 90		lda $90,x			lda 	esType,x
.3469	d0 01		bne $346c			bne 	ENTType
.346b	60		rts				rts
.346c					ENTType:
.346c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.346e	20 18 15	jsr $1518		jsr	errorHandler
.3471					EvaluateRoot:
.3471	a2 00		ldx #$00			ldx 	#0
.3473					Evaluate:
.3473	a9 00		lda #$00			lda 	#0
.3475	20 09 33	jsr $3309			jsr 	EvaluateLevel
.3478	20 b8 32	jsr $32b8			jsr 	DereferenceOne
.347b	60		rts				rts
.347c					EvaluateNumeric:
.347c	20 73 34	jsr $3473			jsr 	Evaluate
.347f	b5 90		lda $90,x			lda 	esType,x
.3481	0a		asl a				asl 	a 							; see if it's a string.
.3482	30 e8		bmi $346c			bmi 	ENTType
.3484	4a		lsr a				lsr 	a 							; shift float flag into carry.
.3485	4a		lsr a				lsr 	a
.3486	60		rts				rts
.3487					EvaluateString:
.3487	20 73 34	jsr $3473			jsr 	Evaluate
.348a	b5 90		lda $90,x			lda 	esType,x
.348c	0a		asl a				asl 	a 							; see if it's a string.
.348d	10 dd		bpl $346c			bpl 	ENTType
.348f	60		rts				rts
.3490					EvaluateRootInteger:
.3490	a2 00		ldx #$00			ldx 	#0
.3492					EvaluateInteger:
.3492	20 73 34	jsr $3473			jsr 	Evaluate
.3495	b5 90		lda $90,x			lda 	esType,x
.3497	d0 d3		bne $346c			bne 	ENTType
.3499	60		rts				rts
.349a					EvaluateSmallInteger:
.349a	20 92 34	jsr $3492			jsr 	EvaluateInteger
.349d	b5 a0		lda $a0,x			lda 	esInt1,x
.349f	15 a8		ora $a8,x			ora 	esInt2,x
.34a1	15 b0		ora $b0,x			ora 	esInt3,x
.34a3	d0 03		bne $34a8			bne 	_ESIValue
.34a5	b5 98		lda $98,x			lda 	esInt0,x
.34a7	60		rts				rts
.34a8					_ESIValue:
.34a8	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.34aa	20 18 15	jsr $1518		jsr	errorHandler
.34ad					LinkEvaluate:
.34ad	aa		tax				tax
.34ae	20 73 34	jsr $3473			jsr 	Evaluate
.34b1	8a		txa				txa
.34b2	60		rts				rts
.34b3					LinkEvaluateTerm:
.34b3	aa		tax				tax
.34b4	20 52 34	jsr $3452			jsr 	EvaluateTerm
.34b7	8a		txa				txa
.34b8	60		rts				rts
.34b9					LinkEvaluateInteger:
.34b9	aa		tax				tax
.34ba	20 92 34	jsr $3492			jsr 	EvaluateInteger
.34bd	8a		txa				txa
.34be	60		rts				rts
.34bf					LinkEvaluateString:
.34bf	aa		tax				tax
.34c0	20 87 34	jsr $3487			jsr 	EvaluateString
.34c3	8a		txa				txa
.34c4	60		rts				rts
.34c5					LinkEvaluateSmallInt:
.34c5	aa		tax				tax
.34c6	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger
.34c9	8a		txa				txa
.34ca	60		rts				rts
.34cb					EvaluateReference:
.34cb	ad 45 34	lda $3445			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.34ce	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.34cf	e9 01		sbc #$01			sbc 	#1
.34d1	20 09 33	jsr $3309			jsr 	EvaluateLevel
.34d4	b5 90		lda $90,x			lda 	esType,x
.34d6	10 01		bpl $34d9			bpl 	_ERFail
.34d8	60		rts				rts
.34d9					_ERFail:
.34d9	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.34db	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.34de					Event_Str:
.34de	20 7c 34	jsr $347c			jsr 	EvaluateNumeric 			; get a number.
.34e1	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.34e3	d0 13		bne $34f8			bne 	_ESFloat
.34e5	20 3b 35	jsr $353b			jsr 	ConvertGetBase 				; get base, or default.
.34e8	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.34ea	85 2a		sta $2a				sta 	temp0
.34ec	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.34ee	85 2b		sta $2b				sta 	1+(temp0)
.34f0	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.34f2	20 80 3a	jsr $3a80			jsr 	MInt32ToString 				; convert to string.
.34f5	4c 05 35	jmp $3505			jmp 	_ESCloneExit 				; clone and exit.
.34f8					_ESFloat:
.34f8	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen 			; check closing )
.34fb	20 82 28	jsr $2882			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.34fe	8a		txa				txa
.34ff	a2 16		ldx #$16		ldx	#22
.3501	20 90 23	jsr $2390		jsr	floatingpointHandler
.3504	aa		tax				tax
.3505					_ESCloneExit:
.3505	8a		txa				txa
.3506	a2 04		ldx #$04		ldx	#4
.3508	20 d5 3e	jsr $3ed5		jsr	stringHandler
.350b	aa		tax				tax
.350c	60		rts				rts
.350d					UnaryVal:
.350d	38		sec				sec 								; Carry set to return value
.350e	b0 01		bcs $3511			bcs 	ValueMain
.3510					UnaryIsVal:
.3510	18		clc				clc									; Carry clear to return legitimacy
.3511					ValueMain:
.3511	08		php				php 								; save results (CS is value, CC is validation)
.3512	20 87 34	jsr $3487			jsr 	EvaluateString
.3515	20 3b 35	jsr $353b			jsr 	ConvertGetBase 				; get base, if any.
.3518	98		tya				tya
.3519	48		pha				pha
.351a	20 82 28	jsr $2882			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.351d	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.351f	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3521	20 98 39	jsr $3998			jsr 	MInt32FromString 			; convert it back from a string.
.3524	b0 0c		bcs $3532			bcs 	_VMSuccess 					; successfully converted.
.3526	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.3528	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.352a	f0 00		beq $352c			beq 	_VMFailed 	 				; so we failed.
.352c					_VMFailed:
.352c	68		pla				pla
.352d	a8		tay				tay
.352e	28		plp				plp
.352f	4c 2a 3b	jmp $3b2a			jmp 	MInt32False 				; return 0 whatever.
.3532					_VMSuccess:
.3532	68		pla				pla
.3533	a8		tay				tay
.3534	28		plp				plp 								; if CS the it was val() so we want the value.
.3535	b0 03		bcs $353a			bcs 	_VMExit
.3537	4c 26 3b	jmp $3b26			jmp 	MInt32True 					; otherwise return true as successful.
.353a					_VMExit:
.353a	60		rts				rts
.353b					ConvertGetBase:
.353b	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.353d	95 99		sta $99,x			sta 	esInt0+1,x
.353f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3541	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3543	d0 0e		bne $3553			bne 	_CGBDone 					; not found, should be )
.3545	e8		inx				inx 								; next level
.3546	c8		iny				iny 								; skip comma.
.3547	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger		; evaluate the base.
.354a	ca		dex				dex
.354b	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.354d	90 08		bcc $3557			bcc 	_CGBValue 					; (it should work as high as 37)
.354f	c9 11		cmp #$11			cmp 	#17
.3551	b0 04		bcs $3557			bcs 	_CGBValue
.3553					_CGBDone:
.3553	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen
.3556	60		rts				rts
.3557					_CGBValue:
.3557	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3559	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.355c					EventFunction:
.355c	20 cb 34	jsr $34cb			jsr 	EvaluateReference			; get the variable reference that tracks the event
.355f	b5 90		lda $90,x			lda 	esType,x
.3561	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3563	d0 5b		bne $35c0			bne 	_EFType
.3565	20 aa 3b	jsr $3baa			jsr 	CheckComma
.3568	e8		inx				inx
.3569	20 92 34	jsr $3492			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.356c	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen 			; finish off with the right bracket
.356f	ca		dex				dex
.3570	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3572	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3574	15 a8		ora $a8,x			ora 	esInt2,x
.3576	15 b0		ora $b0,x			ora 	esInt3,x
.3578	d0 41		bne $35bb			bne 	_EFValue
.357a	98		tya				tya
.357b	48		pha				pha
.357c	8a		txa				txa
.357d	48		pha				pha
.357e	a2 1c		ldx #$1c		ldx	#28
.3580	20 f6 14	jsr $14f6		jsr	deviceHandler
.3583	84 2d		sty $2d				sty 	temp1+1
.3585	85 2c		sta $2c				sta 	temp1
.3587	68		pla				pla
.3588	aa		tax				tax
.3589	20 82 28	jsr $2882			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.358c	a0 03		ldy #$03			ldy 	#3							; if -ve
.358e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3590	30 23		bmi $35b5			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3592	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3594	b1 2a		lda ($2a),y			lda 	(temp0),y
.3596	c8		iny				iny
.3597	11 2a		ora ($2a),y			ora 	(temp0),y
.3599	f0 17		beq $35b2			beq 	_EFInitialise 				; if so, initialise the value but return false.
.359b	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.359d	38		sec				sec
.359e	b1 2a		lda ($2a),y			lda 	(temp0),y
.35a0	e5 2c		sbc $2c				sbc 	temp1
.35a2	c8		iny				iny
.35a3	b1 2a		lda ($2a),y			lda 	(temp0),y
.35a5	e5 2d		sbc $2d				sbc 	temp1+1
.35a7	10 0c		bpl $35b5			bpl 	_EFFail 					; if trigger >= timer then return False
.35a9	20 c5 35	jsr $35c5			jsr 	SetEventTimer 				; reset the timer for next time.
.35ac	20 26 3b	jsr $3b26			jsr	 	MInt32True 					; and treutn true as fired.
.35af	68		pla				pla
.35b0	a8		tay				tay
.35b1	60		rts				rts
.35b2					_EFInitialise:
.35b2	20 c5 35	jsr $35c5			jsr		SetEventTimer 				; set trigger time to time + elapsed
.35b5					_EFFail:
.35b5	68		pla				pla
.35b6	a8		tay				tay
.35b7	20 2a 3b	jsr $3b2a			jsr 	MInt32False
.35ba	60		rts				rts
.35bb					_EFValue:
.35bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.35bd	20 18 15	jsr $1518		jsr	errorHandler
.35c0					_EFType:
.35c0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.35c2	20 18 15	jsr $1518		jsr	errorHandler
.35c5					SetEventTimer:
.35c5	a0 00		ldy #$00			ldy 	#0
.35c7	18		clc				clc
.35c8	a5 2c		lda $2c				lda 	temp1
.35ca	75 99		adc $99,x			adc 	esInt0+1,x
.35cc	91 2a		sta ($2a),y			sta		(temp0),y
.35ce	c8		iny				iny
.35cf	a5 2d		lda $2d				lda 	temp1+1
.35d1	75 a1		adc $a1,x			adc 	esInt1+1,x
.35d3	91 2a		sta ($2a),y			sta		(temp0),y
.35d5	88		dey				dey
.35d6	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.35d8	d0 04		bne $35de			bne 	_SETExit 					; zero means initialise.....
.35da	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.35dc	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.35de					_SETExit:
.35de	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.35df					UnaryLen:
.35df	20 ed 35	jsr $35ed			jsr 	ULStart
.35e2					ULFinish:
.35e2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.35e4	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.35e6	20 39 3b	jsr $3b39			jsr 	MInt32Set8Bit 				; write it out.
.35e9	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen
.35ec	60		rts				rts
.35ed	20 87 34	jsr $3487	ULStart:jsr 	EvaluateString
.35f0	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.35f2	85 2a		sta $2a				sta 	temp0
.35f4	b5 a0		lda $a0,x			lda 	esInt1,x
.35f6	85 2b		sta $2b				sta 	temp0+1
.35f8	84 32		sty $32				sty 	tempShort 					; get length
.35fa	a0 00		ldy #$00			ldy 	#0
.35fc	60		rts				rts
.35fd					UnaryAsc:
.35fd	20 ed 35	jsr $35ed			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3600	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3602	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3603	c9 00		cmp #$00			cmp 	#0
.3605	d0 db		bne $35e2			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3607	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3609	20 18 15	jsr $1518		jsr	errorHandler
.360c					UnaryAbs:
.360c	20 7c 34	jsr $347c			jsr 	EvaluateNumeric 			; some numeric value
.360f	b0 07		bcs $3618			bcs 	_UAFloat 					; CS then float, so use that function
.3611	20 df 3a	jsr $3adf			jsr 	MInt32Absolute 				; int version
.3614	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen
.3617	60		rts				rts
.3618					_UAFloat:
.3618	8a		txa				txa 								; float version
.3619	a2 02		ldx #$02		ldx	#2
.361b	20 90 23	jsr $2390		jsr	floatingpointHandler
.361e	aa		tax				tax
.361f	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen
.3622	60		rts				rts
.3623					UnarySgn:
.3623	20 7c 34	jsr $347c			jsr 	EvaluateNumeric 			; same as above but sign of value
.3626	b0 07		bcs $362f			bcs 	_USFloat
.3628	20 17 3b	jsr $3b17			jsr 	MInt32Sign
.362b	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen
.362e	60		rts				rts
.362f					_USFloat:
.362f	8a		txa				txa
.3630	a2 10		ldx #$10		ldx	#16
.3632	20 90 23	jsr $2390		jsr	floatingpointHandler
.3635	aa		tax				tax
.3636	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen
.3639	60		rts				rts
.363a					UnaryPeek:
.363a	20 66 36	jsr $3666			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.363d	4c 5a 36	jmp $365a			jmp 	PDLByte0
.3640					UnaryDeek:
.3640	20 66 36	jsr $3666			jsr 	PDLCode
.3643	4c 54 36	jmp $3654			jmp 	PDLByte1
.3646					UnaryLeek:
.3646	20 66 36	jsr $3666			jsr 	PDLCode
.3649	a0 03		ldy #$03			ldy 	#3							; read 3-2
.364b	b1 2a		lda ($2a),y			lda 	(temp0),y
.364d	95 b0		sta $b0,x			sta 	esInt3,x
.364f	88		dey				dey
.3650	b1 2a		lda ($2a),y			lda 	(temp0),y
.3652	95 a8		sta $a8,x			sta 	esInt2,x
.3654					PDLByte1:
.3654	a0 01		ldy #$01			ldy 	#1
.3656	b1 2a		lda ($2a),y			lda 	(temp0),y
.3658	95 a0		sta $a0,x			sta 	esInt1,x
.365a					PDLByte0:
.365a	a0 00		ldy #$00			ldy 	#0
.365c	b1 2a		lda ($2a),y			lda 	(temp0),y
.365e	95 98		sta $98,x			sta 	esInt0,x
.3660	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3662	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen 			; check right and return
.3665	60		rts				rts
.3666					PDLCode:
.3666	20 92 34	jsr $3492			jsr 	EvaluateInteger 			; some address
.3669	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.366b	85 2a		sta $2a				sta 	temp0
.366d	b5 a0		lda $a0,x			lda 	esInt1,x
.366f	85 2b		sta $2b				sta 	temp0+1
.3671	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3673	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3675	95 a8		sta $a8,x			sta 	esInt2,x
.3677	95 b0		sta $b0,x			sta 	esInt3,x
.3679	84 32		sty $32				sty 	tempShort 					; save Y
.367b	60		rts				rts
.367c					Unary_Random:
.367c	20 5a 3b	jsr $3b5a			jsr 	MInt32Random 				; generate random number.
.367f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3681	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3683	f0 08		beq $368d			beq 	_URExit
.3685	e8		inx				inx 								; load range 0..r-1 into +1
.3686	20 92 34	jsr $3492			jsr 	EvaluateInteger
.3689	ca		dex				dex
.368a	20 7d 39	jsr $397d			jsr 	MInt32Modulus 				; calculate random % modulus
.368d					_URExit:
.368d	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen 			; check right and return
.3690	60		rts				rts
.3691					Unary_Min:
.3691	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3693	d0 02		bne $3697			bne 	UnaryMBody
.3695					Unary_Max:
.3695	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3697					UnaryMBody:
.3697	48		pha				pha 								; save comparator on stack, shows min or max
.3698	20 73 34	jsr $3473			jsr 	Evaluate 					; get the first thing to check
.369b					_UnaryMLoop:
.369b	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.369d	c8		iny				iny
.369e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.36a0	f0 09		beq $36ab			beq 	_UnaryMExit
.36a2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.36a4	f0 07		beq $36ad			beq 	_UnaryMCompare
.36a6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.36a8	20 18 15	jsr $1518		jsr	errorHandler
.36ab					_UnaryMExit:
.36ab	68		pla				pla 								; done so throw comparator and return.
.36ac	60		rts				rts
.36ad					_UnaryMCompare:
.36ad	e8		inx				inx 								; get the 2nd thing to evaluate
.36ae	20 73 34	jsr $3473			jsr 	Evaluate
.36b1	ca		dex				dex
.36b2	20 39 32	jsr $3239			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.36b5	85 32		sta $32				sta 	tempShort 					; save result
.36b7	68		pla				pla 								; get what we need
.36b8	48		pha				pha
.36b9	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.36bb	d0 de		bne $369b			bne 	_UnaryMLoop 				; no, try another value.
.36bd	20 2a 3b	jsr $3b2a			jsr 	MInt32False 				; promote 2nd to 1st.
.36c0	20 0e 3a	jsr $3a0e			jsr 	MInt32Add
.36c3	4c 9b 36	jmp $369b			jmp 	_UnaryMLoop
.36c6					Unary_Page:
.36c6	20 2a 3b	jsr $3b2a			jsr 	MInt32False 				; zero
.36c9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.36cc	95 98		sta $98,x			sta 	esInt0,x
.36ce	ad c9 0a	lda $0ac9			lda 	basePage+1
.36d1	95 a0		sta $a0,x			sta 	esInt1,x
.36d3	60		rts				rts
.36d4					UnaryReference:
.36d4	a9 0f		lda #$0f			lda 	#15
.36d6	20 09 33	jsr $3309			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.36d9	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.36db	10 05		bpl $36e2			bpl 	UType
.36dd	a9 00		lda #$00			lda 	#0 							; make it an integer
.36df	95 90		sta $90,x			sta 	esType,x
.36e1	60		rts				rts
.36e2					UType:
.36e2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.36e4	20 18 15	jsr $1518		jsr	errorHandler
.36e7					UnaryHexMarker:
.36e7	4c 64 34	jmp $3464			jmp 	EvaluateIntegerTerm
.36ea					UnaryComplement:
.36ea	20 64 34	jsr $3464			jsr 	EvaluateIntegerTerm
.36ed	20 fe 3a	jsr $3afe			jsr 	MInt32Not
.36f0	60		rts				rts
.36f1					UnaryIntToFloat:
.36f1	20 7c 34	jsr $347c			jsr 	EvaluateNumeric				; some number
.36f4	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.36f6	d0 0b		bne $3703			bne 	_UIFExit
.36f8	8a		txa				txa 								; convert and set type
.36f9	a2 1c		ldx #$1c		ldx	#28
.36fb	20 90 23	jsr $2390		jsr	floatingpointHandler
.36fe	aa		tax				tax
.36ff	a9 01		lda #$01			lda 	#1
.3701	95 90		sta $90,x			sta 	esType,x
.3703					_UIFExit:
.3703	60		rts				rts
.3704					UnaryFloatToInt:
.3704	20 7c 34	jsr $347c			jsr 	EvaluateNumeric 			; the number
.3707	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3709	f0 0b		beq $3716			beq 	_UFIExit
.370b	8a		txa				txa 								; convert to int
.370c	a2 14		ldx #$14		ldx	#20
.370e	20 90 23	jsr $2390		jsr	floatingpointHandler
.3711	aa		tax				tax
.3712	a9 00		lda #$00			lda 	#0 							; set type
.3714	95 90		sta $90,x			sta 	esType,x
.3716					_UFIExit:
.3716	60		rts				rts
.3717					UnaryAlloc:
.3717	e8		inx				inx 								; evaluate memory required
.3718	20 92 34	jsr $3492			jsr 	EvaluateInteger
.371b	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen
.371e	ca		dex				dex
.371f	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3721	15 b1		ora $b1,x			ora 	esInt3+1,x
.3723	d0 1d		bne $3742			bne 	_UABadValue
.3725	20 2a 3b	jsr $3b2a			jsr 	MInt32False					; zero return.
.3728	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.372a	95 a0		sta $a0,x			sta 	esInt1,x
.372c	a5 35		lda $35				lda 	lowMemory
.372e	95 98		sta $98,x			sta 	esInt0,x
.3730	18		clc				clc 								; add alloc required.
.3731	75 99		adc $99,x			adc 	esInt0+1,x
.3733	85 35		sta $35				sta 	lowMemory
.3735	a5 36		lda $36				lda 	lowMemory+1
.3737	75 a1		adc $a1,x			adc 	esInt1+1,x
.3739	85 36		sta $36				sta 	lowMemory+1
.373b	b0 05		bcs $3742			bcs		_UABadValue 				; overflow definitely bad.
.373d	c5 34		cmp $34				cmp 	highMemory+1
.373f	b0 01		bcs $3742			bcs 	_UABadValue 				; out of memory bad.
.3741	60		rts				rts
.3742					_UABadValue:
.3742	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3744	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3747					UnaryTimer:
.3747	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen 			; no parameters
.374a	98		tya				tya
.374b	48		pha				pha
.374c	20 51 3b	jsr $3b51			jsr 	MInt32Zero 					; zero result
.374f	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3751	a2 1c		ldx #$1c		ldx	#28
.3753	20 f6 14	jsr $14f6		jsr	deviceHandler
.3756	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3758	95 98		sta $98,x			sta 	esInt0,x
.375a	98		tya				tya
.375b	95 a0		sta $a0,x			sta 	esInt1,x
.375d	68		pla				pla
.375e	a8		tay				tay
.375f	60		rts				rts
.3760					UnaryInkey:
.3760	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen
.3763	86 2a		stx $2a				stx 	temp0
.3765	a2 0a		ldx #$0a		ldx	#10
.3767	20 f6 14	jsr $14f6		jsr	deviceHandler
.376a	a6 2a		ldx $2a				ldx 	temp0
.376c	20 39 3b	jsr $3b39			jsr 	MInt32Set8Bit
.376f	60		rts				rts
.3770					UnaryGet:
.3770	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen
.3773	86 2a		stx $2a				stx 	temp0
.3775					_UGLoop:
.3775	a2 02		ldx #$02		ldx	#2
.3777	20 f6 14	jsr $14f6		jsr	deviceHandler
.377a	a2 0a		ldx #$0a		ldx	#10
.377c	20 f6 14	jsr $14f6		jsr	deviceHandler
.377f	c9 00		cmp #$00			cmp 	#0
.3781	f0 f2		beq $3775			beq 	_UGLoop
.3783	a6 2a		ldx $2a				ldx 	temp0
.3785	20 39 3b	jsr $3b39			jsr 	MInt32Set8Bit
.3788	60		rts				rts
.3789					UnaryGetString:
.3789	20 70 37	jsr $3770			jsr 	UnaryGet
.378c					UGSDoChr:
.378c	4c dd 37	jmp $37dd			jmp 	ChrCode
.378f					UnaryInkeyString:
.378f	20 60 37	jsr $3760			jsr 	UnaryInkey
.3792	b5 98		lda $98,x			lda 	esInt0,x
.3794	d0 f6		bne $378c			bne 	UGSDoChr
.3796	8a		txa				txa
.3797	a2 08		ldx #$08		ldx	#8
.3799	20 d5 3e	jsr $3ed5		jsr	stringHandler
.379c	aa		tax				tax
.379d	60		rts				rts
.379e					UnarySys:
.379e	20 92 34	jsr $3492			jsr 	EvaluateInteger 				; get the address
.37a1	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen
.37a4	20 82 28	jsr $2882			jsr 	TOSToTemp0 						; copy call address to temp0
.37a7	8a		txa				txa
.37a8	48		pha				pha
.37a9	98		tya				tya
.37aa	48		pha				pha
.37ab	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.37ae	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.37b1	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.37b4	20 c3 37	jsr $37c3			jsr 	_CallTemp0
.37b7	85 32		sta $32				sta 	tempShort 						; restore YX
.37b9	68		pla				pla
.37ba	a8		tay				tay
.37bb	68		pla				pla
.37bc	aa		tax				tax
.37bd	a5 32		lda $32				lda 	tempShort
.37bf	20 39 3b	jsr $3b39			jsr 	MInt32Set8Bit 					; return result.
.37c2	60		rts				rts
.37c3					_CallTemp0:
.37c3	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.37c6					UnaryMem:
.37c6	20 2a 3b	jsr $3b2a			jsr 	MInt32False 					; set to false (e.g. 0)
.37c9	38		sec				sec
.37ca	a5 33		lda $33				lda 	highMemory 						; calculate value
.37cc	e5 35		sbc $35				sbc 	lowMemory
.37ce	95 98		sta $98,x			sta 	esInt0,x
.37d0	a5 34		lda $34				lda 	highMemory+1
.37d2	e5 36		sbc $36				sbc 	lowMemory+1
.37d4	95 a0		sta $a0,x			sta 	esInt1,x
.37d6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.37d7					ExecChr:
.37d7	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger		; character number 0-255
.37da	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen				; right bracket
.37dd					ChrCode:
.37dd	98		tya				tya
.37de	48		pha				pha
.37df	8a		txa				txa 								; A = stack
.37e0	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.37e2	a2 02		ldx #$02		ldx	#2
.37e4	20 d5 3e	jsr $3ed5		jsr	stringHandler
.37e7	aa		tax				tax 								; X = stack
.37e8	68		pla				pla
.37e9	a8		tay				tay
.37ea	60		rts				rts
.37eb					ExecLower:
.37eb	38		sec				sec 								; set carry is lower
.37ec	b0 01		bcs $37ef			bcs 	ExecUpperLower
.37ee					ExecUpper:
.37ee	18		clc				clc 								; clear carry is upper
.37ef					ExecUpperLower:
.37ef	08		php				php 								; save carry
.37f0	20 87 34	jsr $3487			jsr 	EvaluateString 				; string to stack,X
.37f3	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen 			; check closing right bracket.
.37f6	28		plp				plp 								; restore carry, save Y
.37f7	98		tya				tya
.37f8	48		pha				pha
.37f9	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.37fb	2a		rol a				rol 	a
.37fc	a8		tay				tay 								; now in Y
.37fd	8a		txa				txa 								; do the substring and exit.
.37fe	a2 0c		ldx #$0c		ldx	#12
.3800	20 d5 3e	jsr $3ed5		jsr	stringHandler
.3803	aa		tax				tax
.3804	68		pla				pla
.3805	a8		tay				tay
.3806	60		rts				rts
.3807					ExecLeft:
.3807	20 87 34	jsr $3487			jsr 	EvaluateString 				; string to stack,X
.380a	20 aa 3b	jsr $3baa			jsr 	CheckComma
.380d	e8		inx				inx
.380e	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3810	20 39 3b	jsr $3b39			jsr 	MInt32Set8Bit
.3813	e8		inx				inx
.3814	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3817					ExecSubstring:
.3817	ca		dex				dex 								; fix up X
.3818	ca		dex				dex
.3819	20 9d 3b	jsr $3b9d			jsr 	CheckRightParen 			; check closing right bracket.
.381c	8a		txa				txa 								; do the substring and exit.
.381d	a2 0e		ldx #$0e		ldx	#14
.381f	20 d5 3e	jsr $3ed5		jsr	stringHandler
.3822	aa		tax				tax
.3823	60		rts				rts
.3824					ExecMid:
.3824	20 87 34	jsr $3487			jsr 	EvaluateString 				; string to stack,X
.3827	20 aa 3b	jsr $3baa			jsr 	CheckComma
.382a	e8		inx				inx
.382b	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.382e	c9 00		cmp #$00			cmp 	#0
.3830	f0 15		beq $3847			beq 	_EMValue
.3832	e8		inx				inx
.3833	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3835	20 39 3b	jsr $3b39			jsr 	MInt32Set8Bit
.3838	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.383a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.383c	f0 d9		beq $3817			beq 	ExecSubString
.383e	20 aa 3b	jsr $3baa			jsr 	CheckComma
.3841	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3844	4c 17 38	jmp $3817			jmp 	ExecSubString
.3847					_EMValue:
.3847	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3849	20 18 15	jsr $1518		jsr	errorHandler
.384c					ExecRight:
.384c	20 87 34	jsr $3487			jsr 	EvaluateString 				; string to stack,X
.384f	20 aa 3b	jsr $3baa			jsr 	CheckComma
.3852	e8		inx				inx
.3853	20 9a 34	jsr $349a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3856	ca		dex				dex
.3857	98		tya				tya
.3858	48		pha				pha
.3859	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.385b	85 2a		sta $2a				sta 	temp0
.385d	b5 a0		lda $a0,x			lda 	esInt1,x
.385f	85 2b		sta $2b				sta 	temp0+1
.3861	a0 00		ldy #$00			ldy 	#0 							; point to length
.3863	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3865	18		clc				clc 								; add 1.
.3866	69 01		adc #$01			adc 	#1
.3868	38		sec				sec
.3869	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.386b	f0 02		beq $386f			beq		_ERMake1 					; if zero, make it 1.
.386d	b0 02		bcs $3871			bcs		_EROkay
.386f					_ERMake1:
.386f	a9 01		lda #$01			lda 	#1 							; start position.
.3871					_EROkay:
.3871	e8		inx				inx 								; set start pos.
.3872	95 98		sta $98,x			sta 	esInt0,x
.3874	e8		inx				inx
.3875	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3877	20 39 3b	jsr $3b39			jsr 	MInt32Set8Bit
.387a	68		pla				pla
.387b	a8		tay				tay
.387c	4c 17 38	jmp $3817			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.387f					MInt32And:
.387f	b5 98		lda $98,x			lda 	esInt0,x
.3881	35 99		and $99,x			and 	esInt0+1,x
.3883	95 98		sta $98,x			sta 	esInt0,x
.3885	b5 a0		lda $a0,x			lda 	esInt1,x
.3887	35 a1		and $a1,x			and 	esInt1+1,x
.3889	95 a0		sta $a0,x			sta 	esInt1,x
.388b	b5 a8		lda $a8,x			lda 	esInt2,x
.388d	35 a9		and $a9,x			and 	esInt2+1,x
.388f	95 a8		sta $a8,x			sta 	esInt2,x
.3891	b5 b0		lda $b0,x			lda 	esInt3,x
.3893	35 b1		and $b1,x			and 	esInt3+1,x
.3895	95 b0		sta $b0,x			sta 	esInt3,x
.3897	60		rts				rts
.3898					MInt32Or:
.3898	b5 98		lda $98,x			lda 	esInt0,x
.389a	15 99		ora $99,x			ora 	esInt0+1,x
.389c	95 98		sta $98,x			sta 	esInt0,x
.389e	b5 a0		lda $a0,x			lda 	esInt1,x
.38a0	15 a1		ora $a1,x			ora 	esInt1+1,x
.38a2	95 a0		sta $a0,x			sta 	esInt1,x
.38a4	b5 a8		lda $a8,x			lda 	esInt2,x
.38a6	15 a9		ora $a9,x			ora 	esInt2+1,x
.38a8	95 a8		sta $a8,x			sta 	esInt2,x
.38aa	b5 b0		lda $b0,x			lda 	esInt3,x
.38ac	15 b1		ora $b1,x			ora 	esInt3+1,x
.38ae	95 b0		sta $b0,x			sta 	esInt3,x
.38b0	60		rts				rts
.38b1					MInt32Xor:
.38b1	b5 98		lda $98,x			lda 	esInt0,x
.38b3	55 99		eor $99,x			eor 	esInt0+1,x
.38b5	95 98		sta $98,x			sta 	esInt0,x
.38b7	b5 a0		lda $a0,x			lda 	esInt1,x
.38b9	55 a1		eor $a1,x			eor 	esInt1+1,x
.38bb	95 a0		sta $a0,x			sta 	esInt1,x
.38bd	b5 a8		lda $a8,x			lda 	esInt2,x
.38bf	55 a9		eor $a9,x			eor 	esInt2+1,x
.38c1	95 a8		sta $a8,x			sta 	esInt2,x
.38c3	b5 b0		lda $b0,x			lda 	esInt3,x
.38c5	55 b1		eor $b1,x			eor 	esInt3+1,x
.38c7	95 b0		sta $b0,x			sta 	esInt3,x
.38c9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.38ca					MInt32Compare:
.38ca	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.38cc	d5 99		cmp $99,x			cmp 	esInt0+1,x
.38ce	d0 13		bne $38e3			bne 	MInt32Compare2
.38d0	b5 a0		lda $a0,x			lda 	esInt1,x
.38d2	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.38d4	d0 0d		bne $38e3			bne 	MInt32Compare2
.38d6	b5 a8		lda $a8,x			lda 	esInt2,x
.38d8	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.38da	d0 07		bne $38e3			bne 	MInt32Compare2
.38dc	b5 b0		lda $b0,x			lda 	esInt3,x
.38de	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.38e0	d0 01		bne $38e3			bne 	MInt32Compare2
.38e2	60		rts				rts
.38e3					MInt32Compare2:
.38e3	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.38e5	d5 99		cmp $99,x			cmp 	esInt0+1,x
.38e7	b5 a0		lda $a0,x			lda		esInt1,x
.38e9	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.38eb	b5 a8		lda $a8,x			lda		esInt2,x
.38ed	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.38ef	b5 b0		lda $b0,x			lda		esInt3,x
.38f1	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.38f3	50 02		bvc $38f7			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.38f5	49 80		eor #$80			eor 	#$80
.38f7					_I32LNoOverflow
.38f7	30 03		bmi $38fc			bmi 	MInt32CLess					; if -ve then return $FF
.38f9	a9 01		lda #$01			lda 	#$01						; else return $01
.38fb	60		rts				rts
.38fc					MInt32CLess:
.38fc	a9 ff		lda #$ff			lda 	#$FF
.38fe	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.38ff					MInt32SDivide:
.38ff	98		tya				tya  								; save Y, which is the count of negations
.3900	48		pha				pha
.3901	a0 00		ldy #$00			ldy 	#0 							; zero count
.3903	20 1b 39	jsr $391b			jsr 	_MInt32SRemSign 			; unsign TOS
.3906	e8		inx				inx 								; unsign TOS+1
.3907	20 1b 39	jsr $391b			jsr 	_MInt32SRemSign
.390a	ca		dex				dex
.390b	98		tya				tya 								; save sign count on stack
.390c	48		pha				pha
.390d	20 24 39	jsr $3924			jsr 	MInt32UDivide 				; unsigned division
.3910	68		pla				pla 								; get sign count back
.3911	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3913	f0 03		beq $3918			beq 	_I32SNoNeg
.3915	20 e4 3a	jsr $3ae4			jsr 	MInt32Negate
.3918					_I32SNoNeg:
.3918	68		pla				pla 								; restoe Y and exit
.3919	a8		tay				tay
.391a	60		rts				rts
.391b					_MInt32SRemSign:
.391b	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.391d	10 04		bpl $3923			bpl 	_MInt32SRSExit
.391f	c8		iny				iny 								; increment the sign count
.3920	20 e4 3a	jsr $3ae4			jsr 	MInt32Negate 				; negate the value.
.3923					_MInt32SRSExit:
.3923	60		rts				rts
.3924					MInt32UDivide:
.3924	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3926	15 a1		ora $a1,x			ora 	esInt1+1,x
.3928	15 a2		ora $a2,x			ora 	esInt1+2,x
.392a	15 a3		ora $a3,x			ora 	esInt1+3,x
.392c	f0 4a		beq $3978			beq 	_MInt32DZero
.392e	e8		inx				inx 								; clear A
.392f	e8		inx				inx
.3930	20 2a 3b	jsr $3b2a			jsr 	MInt32False
.3933	ca		dex				dex
.3934	ca		dex				dex
.3935	98		tya				tya 								; save Y on the stack
.3936	48		pha				pha
.3937	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3939					_MInt32UDLoop:
.3939	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.393b	36 a0		rol $a0,x			rol 	esInt1,x
.393d	36 a8		rol $a8,x			rol 	esInt2,x
.393f	36 b0		rol $b0,x			rol 	esInt3,x
.3941	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3943	36 a2		rol $a2,x			rol 	esInt1+2,x
.3945	36 aa		rol $aa,x			rol 	esInt2+2,x
.3947	36 b2		rol $b2,x			rol 	esInt3+2,x
.3949	38		sec				sec 								; calculate A-M saving result on the stack
.394a	b5 9a		lda $9a,x			lda 	esInt0+2,x
.394c	f5 99		sbc $99,x			sbc 	esInt0+1,x
.394e	48		pha				pha
.394f	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3951	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3953	48		pha				pha
.3954	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3956	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3958	48		pha				pha
.3959	b5 b2		lda $b2,x			lda 	esInt3+2,x
.395b	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.395d	90 10		bcc $396f			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.395f	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3961	68		pla				pla
.3962	95 aa		sta $aa,x			sta 	esInt2+2,x
.3964	68		pla				pla
.3965	95 a2		sta $a2,x			sta 	esInt1+2,x
.3967	68		pla				pla
.3968	95 9a		sta $9a,x			sta 	esInt0+2,x
.396a	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.396c	4c 72 39	jmp $3972			jmp 	_MInt32Next 					; do the next iteration
.396f					_MInt32NoSubtract:
.396f	68		pla				pla
.3970	68		pla				pla
.3971	68		pla				pla
.3972					_MInt32Next:
.3972	88		dey				dey 								; do this 32 times.
.3973	d0 c4		bne $3939			bne 	_MInt32UDLoop
.3975	68		pla				pla 								; restore Y and exit
.3976	a8		tay				tay
.3977	60		rts				rts
.3978					_MInt32DZero:
.3978	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.397a	20 18 15	jsr $1518		jsr	errorHandler
.397d					MInt32Modulus:
.397d	20 24 39	jsr $3924			jsr 	MInt32UDivide 				; do the division.
.3980	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3982	95 b0		sta $b0,x			sta 	esInt3,x
.3984	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3986	95 a8		sta $a8,x			sta 	esInt2,x
.3988	b5 a2		lda $a2,x			lda 	esInt1+2,x
.398a	95 a0		sta $a0,x			sta 	esInt1,x
.398c	b5 9a		lda $9a,x			lda 	esInt0+2,x
.398e	95 98		sta $98,x			sta 	esInt0,x
.3990	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d07					fs32Length:
>0d07							.fill 	1
.3991					LinkInt32FromString:
.3991	aa		tax				tax
.3992	98		tya				tya
.3993	20 98 39	jsr $3998			jsr 	MInt32FromString
.3996	8a		txa				txa
.3997	60		rts				rts
.3998					MInt32FromString:
.3998	85 32		sta $32				sta 	tempShort 					; save base
.399a	98		tya				tya
.399b	48		pha				pha
.399c	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.399e	b1 2a		lda ($2a),y			lda 	(temp0),y
.39a0	8d 07 0d	sta $0d07			sta 	fs32Length
.39a3	f0 65		beq $3a0a			beq 	_I32FSFail2					; fail if length zero.
.39a5	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.39a7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.39a9	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.39ab	d0 09		bne $39b6			bne 	_I32FSNotNegative
.39ad	ad 07 0d	lda $0d07			lda 	fs32Length 					; get length back.
.39b0	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.39b2	f0 56		beq $3a0a			beq 	_I32FSFail2
.39b4	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.39b6					_I32FSNotNegative:
.39b6	a5 32		lda $32				lda 	tempShort 					; get the base back.
.39b8	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.39ba	d0 02		bne $39be			bne 	_I32FSNN2
.39bc	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.39be					_I32FSNN2:
.39be	48		pha				pha 								; save base + final sign on stack.
.39bf	20 2a 3b	jsr $3b2a			jsr 	MInt32False 				; zero the return value.
.39c2					_I32FSMainLoop:
.39c2	68		pla				pla 								; get the base back into tempShort
.39c3	48		pha				pha
.39c4	29 7f		and #$7f			and 	#$7F
.39c6	85 32		sta $32				sta 	tempShort
.39c8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.39ca	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.39cc	90 02		bcc $39d0			bcc 	_I32FSNotLC
.39ce	e9 20		sbc #$20			sbc 	#32
.39d0					_I32FSNotLC:
.39d0	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.39d1	e9 30		sbc #$30			sbc 	#"0"
.39d3	90 34		bcc $3a09			bcc 	_I32FSFail 					; nothing more to do.
.39d5	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.39d7	90 06		bcc $39df			bcc 	_I32FSValidate
.39d9	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.39db	90 2c		bcc $3a09			bcc 	_I32FSFail
.39dd	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.39df					_I32FSValidate:
.39df	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.39e1	b0 26		bcs $3a09			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.39e3	48		pha				pha 								; save the new digit value.
.39e4	e8		inx				inx 								; put base into next slot up on stack
.39e5	a5 32		lda $32				lda 	tempShort
.39e7	20 39 3b	jsr $3b39			jsr 	MInt32Set8Bit
.39ea	ca		dex				dex
.39eb	20 42 3a	jsr $3a42			jsr 	MInt32Multiply 				; multiply current by the base
.39ee	e8		inx				inx
.39ef	68		pla				pla  								; put additive into next slot
.39f0	20 39 3b	jsr $3b39			jsr 	MInt32Set8Bit
.39f3	ca		dex				dex
.39f4	20 0e 3a	jsr $3a0e			jsr 	MInt32Add 					; and add it
.39f7	c8		iny				iny 								; bump the character pointer
.39f8	cc 07 0d	cpy $0d07			cpy 	fs32Length 					; until > length.
.39fb	f0 c5		beq $39c2			beq 	_I32FSMainLoop
.39fd	90 c3		bcc $39c2			bcc 	_I32FSMainLoop
.39ff					_I32FSDone:
.39ff	68		pla				pla 								; get base/final sign back
.3a00	10 03		bpl $3a05			bpl 	_I32FSNN3
.3a02	20 e4 3a	jsr $3ae4			jsr 	MInt32Negate 				; negate the result.
.3a05					_I32FSNN3:
.3a05	68		pla				pla
.3a06	a8		tay				tay
.3a07	38		sec				sec
.3a08	60		rts				rts
.3a09					_I32FSFail:
.3a09	68		pla				pla
.3a0a					_I32FSFail2:
.3a0a	68		pla				pla
.3a0b	a8		tay				tay
.3a0c	18		clc				clc
.3a0d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3a0e					MInt32Add:
.3a0e	18		clc				clc
.3a0f	b5 98		lda $98,x			lda 	esInt0,x
.3a11	75 99		adc $99,x			adc 	esInt0+1,x
.3a13	95 98		sta $98,x			sta 	esInt0,x
.3a15	b5 a0		lda $a0,x			lda 	esInt1,x
.3a17	75 a1		adc $a1,x			adc 	esInt1+1,x
.3a19	95 a0		sta $a0,x			sta 	esInt1,x
.3a1b	b5 a8		lda $a8,x			lda 	esInt2,x
.3a1d	75 a9		adc $a9,x			adc 	esInt2+1,x
.3a1f	95 a8		sta $a8,x			sta 	esInt2,x
.3a21	b5 b0		lda $b0,x			lda 	esInt3,x
.3a23	75 b1		adc $b1,x			adc 	esInt3+1,x
.3a25	95 b0		sta $b0,x			sta 	esInt3,x
.3a27	60		rts				rts
.3a28					MInt32Sub:
.3a28	38		sec				sec
.3a29	b5 98		lda $98,x			lda 	esInt0,x
.3a2b	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3a2d	95 98		sta $98,x			sta 	esInt0,x
.3a2f	b5 a0		lda $a0,x			lda 	esInt1,x
.3a31	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3a33	95 a0		sta $a0,x			sta 	esInt1,x
.3a35	b5 a8		lda $a8,x			lda 	esInt2,x
.3a37	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3a39	95 a8		sta $a8,x			sta 	esInt2,x
.3a3b	b5 b0		lda $b0,x			lda 	esInt3,x
.3a3d	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3a3f	95 b0		sta $b0,x			sta 	esInt3,x
.3a41	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3a42					MInt32Multiply:
.3a42	e8		inx				inx 								; copy 2nd -> 3rd
.3a43	20 68 3a	jsr $3a68			jsr 	MInt32CopyUp
.3a46	ca		dex				dex
.3a47	20 68 3a	jsr $3a68			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3a4a	20 2a 3b	jsr $3b2a			jsr 	MInt32False 				; zero 1st.
.3a4d					_I32Loop:
.3a4d	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3a4f	29 01		and #$01			and 	#1
.3a51	f0 03		beq $3a56			beq 	_I32NoAdd 					; if set
.3a53	20 0e 3a	jsr $3a0e			jsr 	MInt32Add 					; add 2nd to 1st.
.3a56					_I32NoAdd:
.3a56	e8		inx				inx 								; shift 2nd left
.3a57	20 3f 3b	jsr $3b3f			jsr 	MInt32ShiftLeft
.3a5a	e8		inx				inx  								; shift 3rd right
.3a5b	20 48 3b	jsr $3b48			jsr 	MInt32ShiftRight
.3a5e	20 51 3b	jsr $3b51			jsr 	MInt32Zero 					; check if zero.
.3a61	08		php				php 								; save status bits
.3a62	ca		dex				dex 	 							; point back to 1st
.3a63	ca		dex				dex
.3a64	28		plp				plp 								; get status bits
.3a65	d0 e6		bne $3a4d			bne 	_I32Loop 					; if non-zero keep going.
.3a67	60		rts				rts
.3a68					MInt32CopyUp:
.3a68	b5 98		lda $98,x			lda 	esInt0,x
.3a6a	95 99		sta $99,x			sta 	esInt0+1,x
.3a6c	b5 a0		lda $a0,x			lda 	esInt1,x
.3a6e	95 a1		sta $a1,x			sta 	esInt1+1,x
.3a70	b5 a8		lda $a8,x			lda 	esInt2,x
.3a72	95 a9		sta $a9,x			sta 	esInt2+1,x
.3a74	b5 b0		lda $b0,x			lda 	esInt3,x
.3a76	95 b1		sta $b1,x			sta 	esInt3+1,x
.3a78	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d08					MCharCount:	.fill 	1						; count of converted characters
.3a79					MLInt32ToString:
.3a79	aa		tax				tax									; module passes stack in A, base in Y
.3a7a	98		tya				tya
.3a7b	20 80 3a	jsr $3a80			jsr 	MInt32ToString
.3a7e	8a		txa				txa
.3a7f	60		rts				rts
.3a80					MInt32ToString:
.3a80	48		pha				pha 								; save base
.3a81	85 32		sta $32				sta 	tempShort 					; save target base.
.3a83	a9 00		lda #$00			lda 	#0
.3a85	8d 08 0d	sta $0d08			sta 	MCharCount 					; clear character count to 0
.3a88	98		tya				tya
.3a89	48		pha				pha
.3a8a	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3a8c	10 10		bpl $3a9e			bpl 	_I32TSUnsigned
.3a8e	48		pha				pha 								; save base on stack.
.3a8f	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3a91	10 08		bpl $3a9b			bpl 	_I32TSNoFlip
.3a93	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3a95	20 d1 3a	jsr $3ad1			jsr 	MI32WriteCharacter
.3a98	20 e4 3a	jsr $3ae4			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3a9b					_I32TSNoFlip:
.3a9b	68		pla				pla 								; get the base back
.3a9c	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3a9e					_I32TSUnsigned:
.3a9e	20 ac 3a	jsr $3aac			jsr 	MI32DivideWrite 			; recursive code to output string.
.3aa1	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3aa3	ad 08 0d	lda $0d08			lda 	MCharCount
.3aa6	91 2a		sta ($2a),y			sta 	(temp0),y
.3aa8	68		pla				pla
.3aa9	a8		tay				tay
.3aaa	68		pla				pla
.3aab	60		rts				rts
.3aac					MI32DivideWrite:
.3aac	48		pha				pha 								; save the divisor/base
.3aad	e8		inx				inx 								; write in the dividing position.
.3aae	20 39 3b	jsr $3b39			jsr 	MInt32Set8Bit
.3ab1	ca		dex				dex
.3ab2	20 24 39	jsr $3924			jsr 	MInt32UDivide 				; divide number by base.
.3ab5	68		pla				pla 								; get the base into Y
.3ab6	a8		tay				tay
.3ab7	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3ab9	48		pha				pha
.3aba	20 51 3b	jsr $3b51			jsr 	MInt32Zero 					; is the result zero ?
.3abd	f0 04		beq $3ac3			beq 	_I32NoRecurse 				; if so, don't recurse.
.3abf	98		tya				tya 								; put base into A
.3ac0	20 ac 3a	jsr $3aac			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3ac3					_I32NoRecurse:
.3ac3	68		pla				pla 								; get the remainder back
.3ac4	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3ac6	90 02		bcc $3aca			bcc 	_I32NotHex
.3ac8	69 06		adc #$06			adc 	#7-1
.3aca					_I32NotHex:
.3aca	18		clc				clc 								; make it ASCII
.3acb	69 30		adc #$30			adc 	#48
.3acd	20 d1 3a	jsr $3ad1			jsr 	MI32WriteCharacter 			; write the character out
.3ad0	60		rts				rts 								; and exit.
.3ad1					MI32WriteCharacter:
.3ad1	ee 08 0d	inc $0d08			inc 	MCharCount 					; bump count (space for leading count)
.3ad4	ac 08 0d	ldy $0d08			ldy 	MCharCount 					; get position
.3ad7	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3ad9	c8		iny				iny
.3ada	a9 00		lda #$00			lda 	#0
.3adc	91 2a		sta ($2a),y			sta 	(temp0),y
.3ade	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d09					MSeed32:	.fill 	4							; random number seed.
.3adf					MInt32Absolute:
.3adf	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3ae1	30 01		bmi $3ae4			bmi 	MInt32Negate
.3ae3	60		rts				rts
.3ae4					MInt32Negate:
.3ae4	38		sec				sec 								; subtract from zero.
.3ae5	a9 00		lda #$00			lda 	#0
.3ae7	f5 98		sbc $98,x			sbc 	esInt0,x
.3ae9	95 98		sta $98,x			sta 	esInt0,x
.3aeb	a9 00		lda #$00			lda 	#0
.3aed	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3aef	95 a0		sta $a0,x			sta 	esInt1,x
.3af1	a9 00		lda #$00			lda 	#0
.3af3	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3af5	95 a8		sta $a8,x			sta 	esInt2,x
.3af7	a9 00		lda #$00			lda 	#0
.3af9	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3afb	95 b0		sta $b0,x			sta 	esInt3,x
.3afd	60		rts				rts
.3afe					MInt32Not:
.3afe	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3b00	49 ff		eor #$ff			eor 	#$FF
.3b02	95 98		sta $98,x			sta 	esInt0,x
.3b04	b5 a0		lda $a0,x			lda 	esInt1,x
.3b06	49 ff		eor #$ff			eor 	#$FF
.3b08	95 a0		sta $a0,x			sta 	esInt1,x
.3b0a	b5 a8		lda $a8,x			lda 	esInt2,x
.3b0c	49 ff		eor #$ff			eor 	#$FF
.3b0e	95 a8		sta $a8,x			sta 	esInt2,x
.3b10	b5 b0		lda $b0,x			lda 	esInt3,x
.3b12	49 ff		eor #$ff			eor 	#$FF
.3b14	95 b0		sta $b0,x			sta 	esInt3,x
.3b16	60		rts				rts
.3b17					MInt32Sign:
.3b17	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3b19	30 0b		bmi $3b26			bmi 	MInt32True 					; if set return -1 (true)
.3b1b	20 51 3b	jsr $3b51			jsr 	MInt32Zero 					; is it zero ?
.3b1e	f0 0a		beq $3b2a			beq 	MInt32False 				; if zero return 0 (false)
.3b20	20 2a 3b	jsr $3b2a			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3b23	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3b25	60		rts				rts
.3b26					MInt32True:
.3b26	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3b28	d0 02		bne $3b2c			bne 	MInt32WriteAll
.3b2a					MInt32False:
.3b2a	a9 00		lda #$00			lda 	#0
.3b2c					MInt32WriteAll:
.3b2c	95 98		sta $98,x			sta 	esInt0,x
.3b2e					MInt32Write123:
.3b2e	95 a0		sta $a0,x			sta 	esInt1,x
.3b30	95 a8		sta $a8,x			sta 	esInt2,x
.3b32	95 b0		sta $b0,x			sta 	esInt3,x
.3b34	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3b36	95 90		sta $90,x			sta 	esType,x
.3b38	60		rts				rts
.3b39					MInt32Set8Bit:
.3b39	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3b3b	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3b3d	f0 ef		beq $3b2e			beq		MInt32Write123
.3b3f					MInt32ShiftLeft:
.3b3f	16 98		asl $98,x			asl 	esInt0,x
.3b41	36 a0		rol $a0,x			rol	 	esInt1,x
.3b43	36 a8		rol $a8,x			rol	 	esInt2,x
.3b45	36 b0		rol $b0,x			rol	 	esInt3,x
.3b47	60		rts				rts
.3b48					MInt32ShiftRight:
.3b48	56 b0		lsr $b0,x			lsr 	esInt3,x
.3b4a	76 a8		ror $a8,x			ror 	esInt2,x
.3b4c	76 a0		ror $a0,x			ror 	esInt1,x
.3b4e	76 98		ror $98,x			ror 	esInt0,x
.3b50	60		rts				rts
.3b51					MInt32Zero:
.3b51	b5 98		lda $98,x			lda 	esInt0,x
.3b53	15 a0		ora $a0,x			ora 	esInt1,x
.3b55	15 a8		ora $a8,x			ora 	esInt2,x
.3b57	15 b0		ora $b0,x			ora 	esInt3,x
.3b59	60		rts				rts
.3b5a					MInt32Random:
.3b5a	98		tya				tya
.3b5b	48		pha				pha
.3b5c	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3b5e	ad 09 0d	lda $0d09			lda 	MSeed32+0 					; check the seed isn't zero
.3b61	d0 03		bne $3b66			bne 	_Random1
.3b63	a8		tay				tay 								; if so do it 256 times
.3b64	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3b66					_Random1:
.3b66	0a		asl a				asl 	a
.3b67	2e 0a 0d	rol $0d0a			rol 	MSeed32+1
.3b6a	2e 0b 0d	rol $0d0b			rol 	MSeed32+2
.3b6d	2e 0c 0d	rol $0d0c			rol 	MSeed32+3
.3b70	90 02		bcc $3b74			bcc 	_Random2
.3b72	49 c5		eor #$c5			eor 	#$C5
.3b74					_Random2:
.3b74	88		dey				dey
.3b75	d0 ef		bne $3b66			bne 	_Random1
.3b77	8d 09 0d	sta $0d09			sta 	MSeed32+0 					; copy the seed in.
.3b7a	95 98		sta $98,x			sta 	esInt0,x
.3b7c	ad 0a 0d	lda $0d0a			lda 	MSeed32+1
.3b7f	95 a0		sta $a0,x			sta 	esInt1,x
.3b81	ad 0b 0d	lda $0d0b			lda 	MSeed32+2
.3b84	95 a8		sta $a8,x			sta 	esInt2,x
.3b86	ad 0c 0d	lda $0d0c			lda 	MSeed32+3
.3b89	95 b0		sta $b0,x			sta 	esInt3,x
.3b8b	68		pla				pla
.3b8c	a8		tay				tay
.3b8d	a9 00		lda #$00			lda 	#0
.3b8f	95 90		sta $90,x			sta 	esType,x
.3b91	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3b92					CheckToken:
.3b92	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3b94	d0 02		bne $3b98			bne 	_CTError
.3b96	c8		iny				iny
.3b97	60		rts				rts
.3b98					_CTError:
.3b98	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3b9a	20 18 15	jsr $1518		jsr	errorHandler
.3b9d					CheckRightParen:
.3b9d	b1 28		lda ($28),y			lda 	(codePtr),y
.3b9f	c8		iny				iny
.3ba0	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3ba2	d0 01		bne $3ba5			bne 	_CRPError
.3ba4	60		rts				rts
.3ba5					_CRPError:
.3ba5	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3ba7	20 18 15	jsr $1518		jsr	errorHandler
.3baa					CheckComma:
.3baa	b1 28		lda ($28),y			lda 	(codePtr),y
.3bac	c8		iny				iny
.3bad	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3baf	d0 01		bne $3bb2			bne 	_CCError
.3bb1	60		rts				rts
.3bb2					_CCError:
.3bb2	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3bb4	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3bb7					RSReset:
.3bb7	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3bb9	85 37		sta $37				sta 	rsPointer
.3bbb	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3bbd	85 38		sta $38				sta 	1+(rsPointer)
.3bbf	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3bc1	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3bc4	60		rts				rts
.3bc5					RSClaim:
.3bc5	84 32		sty $32				sty 	tempShort 					; preserve Y
.3bc7	48		pha				pha 								; save marker on stack.
.3bc8	8a		txa				txa 								; get bytes required.
.3bc9	38		sec				sec
.3bca	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3bcc	65 37		adc $37				adc 	rsPointer
.3bce	85 37		sta $37				sta 	rsPointer
.3bd0	a5 38		lda $38				lda 	rsPointer+1
.3bd2	69 ff		adc #$ff			adc 	#$FF
.3bd4	85 38		sta $38				sta 	rsPointer+1
.3bd6	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3bd8	90 08		bcc $3be2			bcc 	_RSCOverflow
.3bda	68		pla				pla 								; get marker back
.3bdb	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3bdd	91 37		sta ($37),y			sta 	(rsPointer),y
.3bdf	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3be1	60		rts				rts
.3be2					_RSCOverflow:
.3be2	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3be4	20 18 15	jsr $1518		jsr	errorHandler
.3be7					RSFree:
.3be7	18		clc				clc
.3be8	65 37		adc $37				adc 	rsPointer
.3bea	85 37		sta $37				sta 	rsPointer
.3bec	90 02		bcc $3bf0			bcc 	_RSFExit
.3bee	e6 38		inc $38				inc 	rsPointer+1
.3bf0					_RSFExit:
.3bf0	60		rts				rts
.3bf1					RSSavePosition:
.3bf1	84 32		sty $32				sty 	tempShort 					; save Y position
.3bf3	a8		tay				tay 								; this is where we write it.
.3bf4	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3bf6	91 37		sta ($37),y			sta 	(rsPointer),y
.3bf8	c8		iny				iny
.3bf9	a5 29		lda $29				lda 	codePtr+1
.3bfb	91 37		sta ($37),y			sta 	(rsPointer),y
.3bfd	c8		iny				iny
.3bfe	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3c00	91 37		sta ($37),y			sta 	(rsPointer),y
.3c02	a8		tay				tay 								; fix Y back again to original value
.3c03	60		rts				rts
.3c04					RSLoadPosition:
.3c04	a8		tay				tay
.3c05	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3c07	85 28		sta $28				sta 	codePtr
.3c09	c8		iny				iny
.3c0a	b1 37		lda ($37),y			lda 	(rsPointer),y
.3c0c	85 29		sta $29				sta 	codePtr+1
.3c0e	c8		iny				iny
.3c0f	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3c11	a8		tay				tay 								; to Y
.3c12	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3c13					WarmStart:
.3c13	a2 04		ldx #$04		ldx	#4
.3c15	20 7c 25	jsr $257c		jsr	interactionHandler

;******  Return to file: main/main.asm

.3c18					mainHandler:
.3c18	7c 1b 3c	jmp ($3c1b,x)			jmp 	(mainVectors,x)
.3c1b					mainVectors:
>3c1b	37 3c					.word _DummyControlHandler ; index 0
>3c1d	aa 3b					.word CheckComma           ; index 2
>3c1f	9d 3b					.word CheckRightParen      ; index 4
>3c21	84 2d					.word XCommandClear        ; index 6
>3c23	ad 34					.word LinkEvaluate         ; index 8
>3c25	b9 34					.word LinkEvaluateInteger  ; index 10
>3c27	c5 34					.word LinkEvaluateSmallInt ; index 12
>3c29	bf 34					.word LinkEvaluateString   ; index 14
>3c2b	b3 34					.word LinkEvaluateTerm     ; index 16
>3c2d	79 3a					.word MLInt32ToString      ; index 18
>3c2f	13 2f					.word Command_XNew         ; index 20
>3c31	21 2f					.word XCommand_Run         ; index 22
>3c33	2d 2f					.word Command_RunFrom      ; index 24
>3c35	91 39					.word LinkInt32FromString  ; index 26
.3c37					_DummyControlHandler:
.3c37	60		rts			rts

;******  Return to file: basic.asm

.3c38					section_end_main:
.3c38					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3c38					StringChrs:
.3c38	aa		tax				tax 								; set up stack
.3c39	a9 02		lda #$02			lda 	#2
.3c3b	20 fb 3c	jsr $3cfb			jsr 	AllocateSoftString
.3c3e	98		tya				tya
.3c3f	20 21 3d	jsr $3d21			jsr 	WriteSoftString
.3c42					StringUpdate:
.3c42	20 50 3c	jsr $3c50			jsr 	ReturnSoftString
.3c45	8a		txa				txa
.3c46	60		rts				rts
.3c47					StringNull:
.3c47	aa		tax				tax
.3c48	a9 01		lda #$01			lda 	#1
.3c4a	20 fb 3c	jsr $3cfb			jsr 	AllocateSoftString
.3c4d	4c 42 3c	jmp $3c42			jmp 	StringUpdate
.3c50					ReturnSoftString:
.3c50	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3c52	95 98		sta $98,x			sta 	esInt0,x
.3c54	a5 3a		lda $3a				lda 	softMemAlloc+1
.3c56	95 a0		sta $a0,x			sta 	esInt1,x
.3c58	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3c5a	95 a8		sta $a8,x			sta 	esInt2,x
.3c5c	95 b0		sta $b0,x			sta 	esInt3,x
.3c5e	a9 40		lda #$40			lda 	#$40 						; type string.
.3c60	95 90		sta $90,x			sta 	esType,x
.3c62	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3c63					STRCompare:
.3c63	48		pha				pha 								; save A
.3c64	aa		tax				tax 								; put stack pos in X
.3c65	98		tya				tya
.3c66	48		pha				pha
.3c67	20 9b 3c	jsr $3c9b			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3c6a	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3c6c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c6e	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3c70	90 02		bcc $3c74			bcc 	_SCNotSmaller
.3c72	b1 2c		lda ($2c),y			lda 	(temp1),y
.3c74					_SCNotSmaller:
.3c74	aa		tax				tax 								; put that in X. We compare this many chars first.
.3c75					_SCCompareLoop:
.3c75	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3c77	f0 0c		beq $3c85			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3c79	ca		dex				dex 								; decrement chars to compare.
.3c7a	c8		iny				iny 								; move to next character
.3c7b	38		sec				sec 								; calculate s1[y]-s2[y]
.3c7c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c7e	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3c80	d0 0a		bne $3c8c			bne 	_SCReturnResult 			; if different return sign of A
.3c82	4c 75 3c	jmp $3c75			jmp 	_SCCompareLoop
.3c85					_SCSameToEndShortest
.3c85	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3c87	38		sec				sec
.3c88	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c8a	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3c8c					_SCReturnResult:
.3c8c	08		php				php 								; set return to zero preserving PSW.
.3c8d	a2 00		ldx #$00			ldx 	#0
.3c8f	28		plp				plp
.3c90	f0 05		beq $3c97			beq 	_SCExit 					; two values equal, then exit
.3c92	ca		dex				dex 								; X = $FF
.3c93	90 02		bcc $3c97			bcc 	_SCExit 					; if 1st < 2nd then -1
.3c95	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3c97					_SCExit:
.3c97	68		pla				pla
.3c98	a8		tay				tay
.3c99	68		pla				pla
.3c9a	60		rts				rts
.3c9b					CopyStringPair:
.3c9b	b5 99		lda $99,x			lda 	esInt0+1,x
.3c9d	85 2c		sta $2c				sta 	temp1
.3c9f	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3ca1	85 2d		sta $2d				sta 	temp1+1
.3ca3					CopyStringTop:
.3ca3	b5 98		lda $98,x			lda 	esInt0,x
.3ca5	85 2a		sta $2a				sta 	temp0
.3ca7	b5 a0		lda $a0,x			lda 	esInt1,x
.3ca9	85 2b		sta $2b				sta 	temp0+1
.3cab	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3cac					StringConcat:
.3cac	aa		tax				tax									; stack pos in X
.3cad	98		tya				tya
.3cae	48		pha				pha
.3caf	20 9b 3c	jsr $3c9b			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3cb2	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3cb3	a0 00		ldy #$00			ldy 	#0
.3cb5	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cb7	71 2c		adc ($2c),y			adc 	(temp1),y
.3cb9	b0 1c		bcs $3cd7			bcs 	_SCError 					; just too many characters here.
.3cbb	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3cbd	b0 18		bcs $3cd7			bcs 	_SCError
.3cbf	20 fb 3c	jsr $3cfb			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3cc2	20 f2 3c	jsr $3cf2			jsr 	CopySoftToStack 			; copy that to the stack.
.3cc5	20 dc 3c	jsr $3cdc			jsr 	SCCopyTemp0 				; copy temp0
.3cc8	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3cca	85 2a		sta $2a				sta 	temp0
.3ccc	a5 2d		lda $2d				lda 	temp1+1
.3cce	85 2b		sta $2b				sta 	temp0+1
.3cd0	20 dc 3c	jsr $3cdc			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3cd3	68		pla				pla
.3cd4	a8		tay				tay
.3cd5	8a		txa				txa 								; and A
.3cd6	60		rts				rts
.3cd7					_SCError:
.3cd7	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3cd9	20 18 15	jsr $1518		jsr	errorHandler
.3cdc					SCCopyTemp0:
.3cdc	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3cde	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ce0	85 2e		sta $2e				sta 	temp2
.3ce2					_SCCopyLoop:
.3ce2	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3ce4	f0 0b		beq $3cf1			beq 	_SCCopyExit
.3ce6	c6 2e		dec $2e				dec 	temp2
.3ce8	c8		iny				iny 								; get next char
.3ce9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ceb	20 21 3d	jsr $3d21			jsr 	WriteSoftString 			; write to soft string.
.3cee	4c e2 3c	jmp $3ce2			jmp 	_SCCopyLoop
.3cf1					_SCCopyExit:
.3cf1	60		rts				rts
.3cf2					CopySoftToStack:
.3cf2	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3cf4	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3cf6	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3cf8	95 a0		sta $a0,x			sta 	esInt1,x
.3cfa	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3cfb					AllocateSoftString:
.3cfb	85 32		sta $32				sta 	tempShort 					; save count
.3cfd	98		tya				tya
.3cfe	48		pha				pha
.3cff	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3d01	d0 09		bne $3d0c			bne 	_ASSDone
.3d03	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3d05	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3d07	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3d09	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3d0a	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3d0c					_ASSDone:
.3d0c	38		sec				sec 								; allocate downwards enough memory
.3d0d	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3d0f	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3d11	85 39		sta $39				sta 	softMemAlloc
.3d13	a5 3a		lda $3a				lda 	softMemAlloc+1
.3d15	e9 00		sbc #$00			sbc 	#0
.3d17	85 3a		sta $3a				sta 	softMemAlloc+1
.3d19	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3d1b	a8		tay				tay
.3d1c	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3d1e	68		pla				pla
.3d1f	a8		tay				tay
.3d20	60		rts				rts
.3d21					WriteSoftString:
.3d21	84 32		sty $32				sty 	tempShort 					; save Y
.3d23	48		pha				pha 								; save character on stack
.3d24	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3d26	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3d28	18		clc				clc
.3d29	69 01		adc #$01			adc 	#1
.3d2b	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3d2d	a8		tay				tay 								; offset in Y
.3d2e	68		pla				pla 								; get char and write.
.3d2f	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3d31	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3d33	60		rts				rts
.3d34					StrClone:
.3d34	aa		tax				tax 								; set up stack.
.3d35	98		tya				tya
.3d36	48		pha				pha
.3d37	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3d39	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3d3b	18		clc				clc
.3d3c	69 01		adc #$01			adc 	#1
.3d3e	20 fb 3c	jsr $3cfb			jsr 	AllocateSoftString 			; allocate soft memory
.3d41	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3d43	95 98		sta $98,x			sta 	esInt0,x
.3d45	a5 3a		lda $3a				lda 	softMemAlloc+1
.3d47	95 a0		sta $a0,x			sta 	esInt1,x
.3d49	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3d4b	95 a8		sta $a8,x			sta 	esInt2,x
.3d4d	95 b0		sta $b0,x			sta 	esInt3,x
.3d4f	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3d51	95 90		sta $90,x			sta 	esType,x
.3d53	20 dc 3c	jsr $3cdc			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3d56	68		pla				pla
.3d57	a8		tay				tay
.3d58	8a		txa				txa
.3d59	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3d5a					CaseString:
.3d5a	48		pha				pha 								; save A and copy to X
.3d5b	aa		tax				tax
.3d5c	98		tya				tya
.3d5d	48		pha				pha
.3d5e	20 a3 3c	jsr $3ca3			jsr 	CopyStringTop 				; target string -> temp0
.3d61	a0 00		ldy #$00			ldy 	#0
.3d63	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3d65	18		clc				clc
.3d66	69 01		adc #$01			adc 	#1 							; one more for length byte
.3d68	20 fb 3c	jsr $3cfb			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d6b	20 f2 3c	jsr $3cf2			jsr 	CopySoftToStack 			; copy that to the stack.
.3d6e	a0 00		ldy #$00			ldy 	#0
.3d70	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3d72	aa		tax				tax
.3d73					_CSCopy:
.3d73	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3d75	f0 24		beq $3d9b			beq 	_CSExit
.3d77	ca		dex				dex
.3d78	c8		iny				iny
.3d79	68		pla				pla 								; check direction
.3d7a	48		pha				pha
.3d7b	f0 0c		beq $3d89			beq 	_CSUpper
.3d7d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3d7f	c9 41		cmp #$41			cmp 	#"A"
.3d81	90 12		bcc $3d95			bcc 	_CSWrite
.3d83	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3d85	b0 0e		bcs $3d95			bcs 	_CSWrite
.3d87	90 0a		bcc $3d93			bcc 	_CSFlipWrite
.3d89					_CSUpper:
.3d89	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3d8b	c9 61		cmp #$61			cmp 	#"a"
.3d8d	90 06		bcc $3d95			bcc 	_CSWrite
.3d8f	c9 7b		cmp #$7b			cmp 	#"z"+1
.3d91	b0 02		bcs $3d95			bcs 	_CSWrite
.3d93					_CSFlipWrite:
.3d93	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3d95					_CSWrite:
.3d95	20 21 3d	jsr $3d21			jsr 	WriteSoftString 			; add to soft string.
.3d98	4c 73 3d	jmp $3d73			jmp 	_CSCopy
.3d9b					_CSExit:
.3d9b	68		pla				pla
.3d9c	a8		tay				tay
.3d9d	68		pla				pla
.3d9e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3d9f					StringSubstring:
.3d9f	48		pha				pha
.3da0	aa		tax				tax 								; access stack.
.3da1	98		tya				tya
.3da2	48		pha				pha
.3da3	20 a3 3c	jsr $3ca3			jsr 	CopyStringTop 				; point temp0 to the string.
.3da6	a0 00		ldy #$00			ldy 	#0 							; get length.
.3da8	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3daa	85 2c		sta $2c				sta 	temp1
.3dac	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3dae	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3db0	f0 02		beq $3db4			beq 	_SSBOkay
.3db2	b0 2a		bcs $3dde			bcs 	_SSBReturnNull
.3db4					_SSBOkay:
.3db4	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3db6	18		clc				clc
.3db7	69 01		adc #$01			adc 	#1
.3db9	38		sec				sec
.3dba	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3dbc	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3dbe	90 02		bcc $3dc2			bcc		_SSBTrunc
.3dc0	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3dc2					_SSBTrunc:
.3dc2	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3dc4	18		clc				clc
.3dc5	69 01		adc #$01			adc 	#1 							; add 1
.3dc7	20 fb 3c	jsr $3cfb			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3dca	20 f2 3c	jsr $3cf2			jsr 	CopySoftToStack 			; copy that to the stack.
.3dcd	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3dcf					_SSBCopyLoop:
.3dcf	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3dd1	f0 0e		beq $3de1			beq 	_SSBExit
.3dd3	c6 2d		dec $2d				dec 	temp1+1
.3dd5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3dd7	20 21 3d	jsr $3d21			jsr 	WriteSoftString
.3dda	c8		iny				iny
.3ddb	4c cf 3d	jmp $3dcf			jmp 	_SSBCopyLoop
.3dde					_SSBReturnNull:
.3dde	20 e5 3d	jsr $3de5			jsr 	ReturnNull
.3de1					_SSBExit:
.3de1	68		pla				pla
.3de2	a8		tay				tay
.3de3	68		pla				pla
.3de4	60		rts				rts
.3de5					ReturnNull:
.3de5	a9 00		lda #$00			lda 	#0 							; clear null string
.3de7	8d ce 0a	sta $0ace			sta 	NullString
.3dea	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3dec	95 98		sta $98,x			sta 	esInt0,x
.3dee	a9 0a		lda #$0a			lda 	#NullString >> 8
.3df0	95 a0		sta $a0,x			sta 	esInt1,x
.3df2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d0d					srcStrLen:
>0d0d							.fill 	1
.3df3					StringWrite:
.3df3	aa		tax				tax
.3df4	48		pha				pha
.3df5	98		tya				tya
.3df6	48		pha				pha
.3df7	20 1e 3e	jsr $3e1e			jsr 	CheckOverwriteCurrent
.3dfa	b0 0d		bcs $3e09			bcs		_SWCopyCurrent
.3dfc	20 5c 3e	jsr $3e5c			jsr 	RequiresConcretion
.3dff	90 0e		bcc $3e0f			bcc 	_SWWriteReference
.3e01	20 bf 3e	jsr $3ebf			jsr 	CheckSpecialConcretion
.3e04	b0 09		bcs $3e0f			bcs 	_SWWriteReference
.3e06	20 70 3e	jsr $3e70			jsr 	AllocateHardMemory
.3e09					_SWCopyCurrent:
.3e09	20 a3 3e	jsr $3ea3			jsr 	CopyStringToHardMemory
.3e0c	4c 1a 3e	jmp $3e1a			jmp 	_SWExit
.3e0f					_SWWriteReference
.3e0f	a0 00		ldy #$00			ldy 	#0
.3e11	a5 2a		lda $2a				lda 	temp0
.3e13	91 2c		sta ($2c),y			sta 	(temp1),y
.3e15	c8		iny				iny
.3e16	a5 2b		lda $2b				lda 	temp0+1
.3e18	91 2c		sta ($2c),y			sta 	(temp1),y
.3e1a					_SWExit:
.3e1a	68		pla				pla
.3e1b	a8		tay				tay
.3e1c	68		pla				pla
.3e1d	60		rts				rts
.3e1e					CheckOverwriteCurrent:
.3e1e	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3e20	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3e22	85 2b		sta $2b				sta 	temp0+1
.3e24	b5 99		lda $99,x			lda 	esInt0+1,x
.3e26	85 2a		sta $2a				sta 	temp0
.3e28	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3e2a	8d 0d 0d	sta $0d0d			sta 	srcStrLen
.3e2d	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3e2f	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3e31	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3e33	85 2d		sta $2d				sta 	temp1+1
.3e35	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3e37	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e39	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3e3b	90 1b		bcc $3e58			bcc 	_COCFail 				; in hard memory.
.3e3d	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3e3f	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3e41	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3e43	85 2e		sta $2e				sta 	temp2
.3e45	c8		iny				iny
.3e46	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e48	e9 00		sbc #$00			sbc 	#0
.3e4a	85 2f		sta $2f				sta 	temp2+1
.3e4c	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3e4e	b1 2e		lda ($2e),y			lda 	(temp2),y
.3e50	38		sec				sec  							; maximum character capacity.
.3e51	e9 02		sbc #$02			sbc 	#2
.3e53	cd 0d 0d	cmp $0d0d			cmp 	srcStrLen 				; if >= the required length
.3e56	b0 02		bcs $3e5a			bcs 	_COCCanReuse
.3e58					_COCFail:
.3e58	18		clc				clc
.3e59	60		rts				rts
.3e5a					_COCCanReuse:
.3e5a	38		sec				sec
.3e5b	60		rts				rts
.3e5c					RequiresConcretion:
.3e5c	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3e5e	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3e60	b0 0a		bcs $3e6c			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3e62	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3e64	f0 08		beq $3e6e			beq 	_RCFail 				; if not, this cannot be soft memory.
.3e66	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3e68	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3e6a	90 02		bcc $3e6e			bcc 	_RCFail 				; so concreting
.3e6c					_RCSucceed:
.3e6c	38		sec				sec
.3e6d	60		rts				rts
.3e6e					_RCFail:
.3e6e	18		clc				clc
.3e6f	60		rts				rts
.3e70					AllocateHardMemory:
.3e70	98		tya				tya
.3e71	48		pha				pha
.3e72	ad 0d 0d	lda $0d0d			lda 	srcStrLen 				; characters in string
.3e75	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3e77	b0 04		bcs $3e7d			bcs 	_AHMSetMax 				; max out that amount.
.3e79	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3e7b	90 02		bcc $3e7f			bcc 	_AHMIsOkay
.3e7d					_AHMSetMax:
.3e7d	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3e7f					_AHMIsOkay:
.3e7f	48		pha				pha	 							; save size to be allocated
.3e80	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3e82	38		sec				sec  							; and copy result to TOS as target address.
.3e83	65 33		adc $33				adc 	highMemory
.3e85	85 33		sta $33				sta 	highMemory
.3e87	a5 34		lda $34				lda 	highMemory+1
.3e89	69 ff		adc #$ff			adc 	#$FF
.3e8b	85 34		sta $34				sta 	highMemory+1
.3e8d	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3e8f	68		pla				pla 							; get the total size of the storage block
.3e90	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3e92	18		clc				clc
.3e93	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3e95	69 01		adc #$01			adc 	#1
.3e97	91 2c		sta ($2c),y			sta 	(temp1),y
.3e99	a5 34		lda $34				lda 	highMemory+1
.3e9b	69 00		adc #$00			adc 	#0
.3e9d	c8		iny				iny
.3e9e	91 2c		sta ($2c),y			sta 	(temp1),y
.3ea0	68		pla				pla
.3ea1	a8		tay				tay
.3ea2	60		rts				rts
.3ea3					CopyStringToHardMemory:
.3ea3	98		tya				tya
.3ea4	48		pha				pha
.3ea5	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3ea7	b1 2c		lda ($2c),y			lda 	(temp1),y
.3ea9	85 2e		sta $2e				sta 	temp2
.3eab	c8		iny				iny
.3eac	b1 2c		lda ($2c),y			lda 	(temp1),y
.3eae	85 2f		sta $2f				sta 	temp2+1
.3eb0	ac 0d 0d	ldy $0d0d			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3eb3					_CSTHMLoop:
.3eb3	b1 2a		lda ($2a),y			lda 	(temp0),y
.3eb5	91 2e		sta ($2e),y			sta 	(temp2),y
.3eb7	88		dey				dey
.3eb8	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3eba	d0 f7		bne $3eb3			bne 	_CSTHMLoop
.3ebc	68		pla				pla
.3ebd	a8		tay				tay
.3ebe	60		rts				rts
.3ebf					CheckSpecialConcretion:
.3ebf	ad 0d 0d	lda $0d0d			lda 	srcStrLen 				; check string is null e.g. length = 0
.3ec2	f0 02		beq $3ec6			beq 	_CSCNullString
.3ec4	18		clc				clc
.3ec5	60		rts				rts
.3ec6					_CSCNullString:
.3ec6	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3ec8	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3ecb	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3ecd	85 2a		sta $2a				sta 	temp0
.3ecf	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3ed1	85 2b		sta $2b				sta 	1+(temp0)
.3ed3	38		sec				sec
.3ed4	60		rts				rts

;******  Return to file: string/string.asm

.3ed5					stringHandler:
.3ed5	7c d8 3e	jmp ($3ed8,x)			jmp 	(stringVectors,x)
.3ed8					stringVectors:
>3ed8	ea 3e					.word _DummyControlHandler ; index 0
>3eda	38 3c					.word StringChrs           ; index 2
>3edc	34 3d					.word StrClone             ; index 4
>3ede	ac 3c					.word StringConcat         ; index 6
>3ee0	47 3c					.word StringNull           ; index 8
>3ee2	63 3c					.word STRCompare           ; index 10
>3ee4	5a 3d					.word CaseString           ; index 12
>3ee6	9f 3d					.word StringSubstring      ; index 14
>3ee8	f3 3d					.word StringWrite          ; index 16
.3eea					_DummyControlHandler:
.3eea	60		rts			rts

;******  Return to file: basic.asm

.3eeb					section_end_string:
.3eeb					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d0e					deTokeniseVector:
>0d0e							.fill 	2
.0d10					lastCharacterClass:
>0d10							.fill 	1
.0d11					indent:
>0d11							.fill 	1
.3eeb					ListLine:
.3eeb	48		pha				pha								; enter here to list to console. sets the output vector
.3eec	a9 23		lda #$23			lda 	#(deTokenPrint) & $FF
.3eee	8d 0e 0d	sta $0d0e			sta 	deTokeniseVector
.3ef1	a9 40		lda #$40			lda 	#(deTokenPrint) >> 8
.3ef3	8d 0f 0d	sta $0d0f			sta 	1+(deTokeniseVector)
.3ef6	68		pla				pla
.3ef7					Detokenise:
.3ef7	18		clc				clc 							; space required for line number.
.3ef8	69 06		adc #$06			adc 	#6
.3efa	8d 11 0d	sta $0d11			sta 	indent
.3efd	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3eff	8d 10 0d	sta $0d10			sta 	lastCharacterClass
.3f02	a2 02		ldx #$02			ldx 	#2
.3f04	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3f06	95 a8		sta $a8,x			sta 	esInt2,x
.3f08	95 b0		sta $b0,x			sta 	esInt3,x
.3f0a	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3f0c	b1 28		lda ($28),y			lda 	(codePtr),y
.3f0e	95 98		sta $98,x			sta 	esInt0,x
.3f10	c8		iny				iny
.3f11	b1 28		lda ($28),y			lda 	(codePtr),y
.3f13	95 a0		sta $a0,x			sta 	esInt1,x
.3f15	a9 84		lda #$84			lda 	#LTYLineNumber
.3f17	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.3f1a	a9 0a		lda #$0a			lda 	#10 					; base 10
.3f1c	20 c2 3f	jsr $3fc2			jsr 	DTPrintInteger 			; print as integer.
.3f1f	a0 00		ldy #$00			ldy 	#0 						; get length
.3f21	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3f23	aa		tax				tax
.3f24					_DTPadOut:
.3f24	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3f26	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.3f29	e8		inx				inx
.3f2a	ec 11 0d	cpx $0d11			cpx 	indent
.3f2d	d0 f5		bne $3f24			bne 	_DTPadOut
.3f2f	a0 03		ldy #$03			ldy 	#3 						; start position.
.3f31					_DTListLoop:
.3f31	b1 28		lda ($28),y			lda 	(codePtr),y
.3f33	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3f35	f0 5e		beq $3f95			beq 	_DTIsString
.3f37	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3f39	f0 56		beq $3f91			beq 	_DTIsFloat
.3f3b	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3f3d	f0 16		beq $3f55			beq 	_DTHexConstant
.3f3f	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3f41	d0 06		bne $3f49			bne 	_DTNotEnd
.3f43	a9 ff		lda #$ff			lda 	#255 					; print CR
.3f45	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.3f48	60		rts				rts
.3f49					_DTNotEnd:
.3f49	c9 00		cmp #$00			cmp 	#0
.3f4b	30 38		bmi $3f85			bmi 	_DTIsToken
.3f4d	c9 40		cmp #$40			cmp 	#$40
.3f4f	90 3a		bcc $3f8b			bcc 	_DTIsIdentifier
.3f51	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3f53	d0 0d		bne $3f62			bne 	_DTConstant
.3f55					_DTHexConstant:
.3f55	a9 26		lda #$26			lda 	#"&"
.3f57	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.3f5a	c8		iny				iny
.3f5b	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3f5d	20 3f 40	jsr $403f			jsr 	DTSwitchMode
.3f60	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3f62					_DTConstant:
.3f62	48		pha				pha
.3f63	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3f65	20 3f 40	jsr $403f			jsr 	DTSwitchMode
.3f68	a9 86		lda #$86			lda 	#LTYConstant
.3f6a	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.3f6d	a2 02		ldx #$02			ldx 	#2 						; get its value
.3f6f	8a		txa				txa
.3f70	a2 10		ldx #$10		ldx	#16
.3f72	20 18 3c	jsr $3c18		jsr	mainHandler
.3f75	aa		tax				tax
.3f76	68		pla				pla 							; get base back
.3f77	85 32		sta $32				sta 	tempShort
.3f79	98		tya				tya
.3f7a	48		pha				pha
.3f7b	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3f7d	20 c2 3f	jsr $3fc2			jsr 	DTPrintInteger
.3f80	68		pla				pla
.3f81	a8		tay				tay
.3f82	4c 31 3f	jmp $3f31			jmp 	_DTListLoop
.3f85					_DTIsToken:
.3f85	20 98 40	jsr $4098			jsr 	DTDecodeToken
.3f88	4c 31 3f	jmp $3f31			jmp 	_DTListLoop
.3f8b					_DTIsIdentifier:
.3f8b	20 51 40	jsr $4051			jsr 	DTIdentifier
.3f8e	4c 31 3f	jmp $3f31			jmp 	_DTListLoop
.3f91					_DTIsFloat:
>3f91	db						.byte 	$DB
.3f92	4c 91 3f	jmp $3f91			jmp 	_DTIsFloat
.3f95					_DTIsString:
.3f95	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3f97	20 3f 40	jsr $403f			jsr 	DTSwitchMode
.3f9a	a9 81		lda #$81			lda 	#LTYString
.3f9c	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.3f9f	a9 22		lda #$22			lda 	#'"'						; open quote
.3fa1	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.3fa4	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3fa6	8a		txa				txa
.3fa7	a2 10		ldx #$10		ldx	#16
.3fa9	20 18 3c	jsr $3c18		jsr	mainHandler
.3fac	aa		tax				tax
.3fad	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.3faf	85 2a		sta $2a				sta 	temp0
.3fb1	b5 a0		lda $a0,x			lda 	esInt1,x
.3fb3	85 2b		sta $2b				sta 	temp0+1
.3fb5	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3fb7	20 d4 3f	jsr $3fd4			jsr 	DTPrintLengthPrefix
.3fba	a9 22		lda #$22			lda 	#'"'
.3fbc	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.3fbf	4c 31 3f	jmp $3f31			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d12					tPrintCount:
>0d12							.fill 	1
.3fc2					DTPrintInteger:
.3fc2	48		pha				pha									; save base
.3fc3	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3fc5	85 2a		sta $2a				sta 	temp0
.3fc7	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3fc9	85 2b		sta $2b				sta 	1+(temp0)
.3fcb	68		pla				pla
.3fcc	a8		tay				tay
.3fcd	8a		txa				txa
.3fce	a2 12		ldx #$12		ldx	#18
.3fd0	20 18 3c	jsr $3c18		jsr	mainHandler
.3fd3	aa		tax				tax 								; then drop through here.
.3fd4					DTPrintLengthPrefix:
.3fd4	aa		tax				tax 								; A = 0 = don't case convert.
.3fd5	98		tya				tya
.3fd6	48		pha				pha
.3fd7	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3fd9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fdb	8d 12 0d	sta $0d12			sta 	tPrintCount
.3fde	f0 1b		beq $3ffb			beq 	_DTPLPExit 					; empty string
.3fe0					_DTPLPLoop:
.3fe0	c8		iny				iny 								; get next.
.3fe1	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fe3	29 7f		and #$7f			and 	#$7F
.3fe5	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3fe7	f0 0a		beq $3ff3			beq 	_DTPLPNoCase
.3fe9	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3feb	90 06		bcc $3ff3			bcc 	_DTPLPNoCase
.3fed	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3fef	b0 02		bcs $3ff3			bcs 	_DTPLPNoCase
.3ff1	49 20		eor #$20			eor 	#"A"^"a"
.3ff3					_DTPLPNoCase
.3ff3	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter 		; call handler
.3ff6	ce 12 0d	dec $0d12			dec 	tPrintCount 				; do all the characters
.3ff9	d0 e5		bne $3fe0			bne 	_DTPLPLoop
.3ffb					_DTPLPExit:
.3ffb	68		pla				pla
.3ffc	a8		tay				tay
.3ffd	60		rts				rts
.3ffe					ListOutputCharacter:
.3ffe	85 32		sta $32				sta 	tempShort
.4000	48		pha				pha
.4001	8a		txa				txa
.4002	48		pha				pha
.4003	98		tya				tya
.4004	48		pha				pha
.4005	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.4007	c9 20		cmp #$20			cmp 	#32
.4009	b0 0c		bcs $4017			bcs		_LOCHiBit
.400b	09 40		ora #$40			ora 	#64 						; conversion
.400d	c9 40		cmp #$40			cmp 	#64							; make l/c
.400f	f0 06		beq $4017			beq 	_LOCHiBit
.4011	c9 5b		cmp #$5b			cmp 	#65+26
.4013	b0 02		bcs $4017			bcs 	_LOCHiBit
.4015	69 20		adc #$20			adc 	#32
.4017					_LOCHiBit:
.4017	20 20 40	jsr $4020			jsr 	_LOCCallVector				; call o/p handler routine
.401a	68		pla				pla
.401b	a8		tay				tay
.401c	68		pla				pla
.401d	aa		tax				tax
.401e	68		pla				pla
.401f					_LOCExit:
.401f	60		rts				rts
.4020					_LOCCallVector:
.4020	6c 0e 0d	jmp ($0d0e)			jmp 	(deTokeniseVector)
.4023					deTokenPrint:
.4023	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.4025	30 06		bmi $402d			bmi 	_dtpInk
.4027	a2 16		ldx #$16		ldx	#22
.4029	20 f6 14	jsr $14f6		jsr	deviceHandler
.402c	60		rts				rts
.402d	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.402f	f0 08		beq $4039			beq 	_dtpCR						; except $FF => CRLF
.4031	29 07		and #$07			and 	#7
.4033	a2 08		ldx #$08		ldx	#8
.4035	20 f6 14	jsr $14f6		jsr	deviceHandler
.4038	60		rts				rts
.4039					_dtpCR:
.4039	a2 06		ldx #$06		ldx	#6
.403b	20 f6 14	jsr $14f6		jsr	deviceHandler
.403e	60		rts				rts
.403f					DTSwitchMode:
.403f	cd 10 0d	cmp $0d10			cmp 	LastCharacterClass 			; if changed, update character class
.4042	f0 04		beq $4048			beq 	_DTSMNoChange
.4044	8d 10 0d	sta $0d10			sta 	LastCharacterClass
.4047					_DTSMExit:
.4047	60		rts				rts
.4048					_DTSMNoChange:
.4048	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.404a	f0 fb		beq $4047			beq 	_DTSMExit 					; need a space.
.404c	a9 20		lda #$20			lda 	#" "
.404e	4c fe 3f	jmp $3ffe			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4051					DTIdentifier:
.4051	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4053	20 3f 40	jsr $403f			jsr 	DTSwitchMode
.4056	a9 87		lda #$87			lda 	#LTYIdentifier
.4058	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.405b					_DTILoop:
.405b	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.405d	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.405f	d0 02		bne $4063			bne 	_DTINotUS
.4061	a9 5f		lda #$5f			lda 	#"_"
.4063					_DTINotUS:
.4063	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.4066	c8		iny				iny
.4067	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.4069	c9 3a		cmp #$3a			cmp 	#$3A
.406b	90 ee		bcc $405b			bcc 	_DTILoop
.406d	c8		iny				iny
.406e	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4070	f0 25		beq $4097			beq 	_DTIExit 					; no postfix.
.4072	48		pha				pha
.4073	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.4075	8d 10 0d	sta $0d10			sta 	LastCharacterClass
.4078	a9 82		lda #$82			lda 	#LTYPunctuation
.407a	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.407d	68		pla				pla
.407e	c9 3b		cmp #$3b			cmp 	#$3B
.4080	f0 10		beq $4092			beq 	_DTIArray
.4082	4a		lsr a				lsr 	a 							; array flag in C
.4083	08		php				php
.4084	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.4086	f0 02		beq $408a			beq 	_DTIDollar
.4088	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.408a					_DTIDollar:
.408a	49 24		eor #$24			eor 	#"$"
.408c	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.408f	28		plp				plp
.4090	90 05		bcc $4097			bcc 	_DTIExit
.4092					_DTIArray:
.4092	a9 28		lda #$28			lda 	#"("
.4094	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.4097					_DTIExit:
.4097	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4098					DTDecodeToken:
.4098	a2 00		ldx #$00			ldx 	#0 							; table number to use
.409a	b1 28		lda ($28),y			lda 	(codePtr),y
.409c	c9 84		cmp #$84			cmp 	#$84
.409e	b0 05		bcs $40a5			bcs 	_DTNotShift
.40a0	29 03		and #$03			and 	#3 							; get the shift 1..3
.40a2	0a		asl a				asl 	a 							; put 2 x in X
.40a3	aa		tax				tax
.40a4	c8		iny				iny
.40a5					_DTNotShift:
.40a5	bd a7 43	lda $43a7,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.40a8	85 2a		sta $2a				sta 	temp0 						; point into temp0
.40aa	bd a8 43	lda $43a8,x			lda 	TokenTableAddress+1,x
.40ad	85 2b		sta $2b				sta 	temp0+1
.40af	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.40b1	c8		iny				iny 								; consume it.
.40b2	aa		tax				tax
.40b3	98		tya				tya
.40b4	48		pha				pha
.40b5					_DTFindText:
.40b5	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.40b7	f0 11		beq $40ca			beq 	_DTFoundText
.40b9	ca		dex				dex
.40ba	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.40bc	38		sec				sec
.40bd	b1 2a		lda ($2a),y			lda 	(temp0),y
.40bf	65 2a		adc $2a				adc 	temp0
.40c1	85 2a		sta $2a				sta 	temp0
.40c3	90 f0		bcc $40b5			bcc 	_DTFindText
.40c5	e6 2b		inc $2b				inc 	temp0+1
.40c7	4c b5 40	jmp $40b5			jmp 	_DTFindText
.40ca					_DTFoundText:
.40ca	a0 01		ldy #$01			ldy 	#1 							; get first character
.40cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.40ce	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.40d0	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.40d2	90 11		bcc $40e5			bcc 	_DTIsPunctuation
.40d4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40d6	b0 0d		bcs $40e5			bcs 	_DTIsPunctuation
.40d8	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.40da	20 3f 40	jsr $403f			jsr 	DTSwitchMode
.40dd	a9 83		lda #$83			lda 	#LTYKeyword
.40df	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.40e2	4c ef 40	jmp $40ef			jmp 	_DTPrint
.40e5					_DTIsPunctuation:
.40e5	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.40e7	20 3f 40	jsr $403f			jsr 	DTSwitchMode
.40ea	a9 82		lda #$82			lda 	#LTYPunctuation
.40ec	20 fe 3f	jsr $3ffe			jsr 	ListOutputCharacter
.40ef					_DTPrint:
.40ef	a9 01		lda #$01			lda 	#1 							; fix case.
.40f1	20 d4 3f	jsr $3fd4			jsr 	DTPrintLengthPrefix 		; print it out.
.40f4	a0 00		ldy #$00			ldy 	#0
.40f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.40f8	a8		tay				tay
.40f9	b1 2a		lda ($2a),y			lda 	(temp0),y
.40fb	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.40fd	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.40ff	90 04		bcc $4105			bcc 	_DTIsNowPunctuation
.4101	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4103	90 05		bcc $410a			bcc 	_DTPExit
.4105					_DTIsNowPunctuation:
.4105	a9 01		lda #$01			lda 	#1
.4107	8d 10 0d	sta $0d10			sta		LastCharacterClass
.410a					_DTPExit:
.410a	68		pla				pla
.410b	a8		tay				tay
.410c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d13					currentSet:
>0d13							.fill 	1
.410d					TokenSearch:
.410d	8a		txa				txa
.410e	48		pha				pha
.410f	98		tya				tya
.4110	48		pha				pha
.4111	a9 00		lda #$00			lda 	#0
.4113	8d 13 0d	sta $0d13			sta 	currentSet
.4116					_TSLoop:
.4116	ad 13 0d	lda $0d13			lda 	currentSet 					; 2 x currentset in X
.4119	0a		asl a				asl 	a
.411a	aa		tax				tax
.411b	bd a7 43	lda $43a7,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.411e	85 2a		sta $2a				sta 	temp0
.4120	bd a8 43	lda $43a8,x			lda 	TokenTableAddress+1,x
.4123	85 2b		sta $2b				sta 	temp0+1
.4125	20 4c 41	jsr $414c			jsr 	TokenSearchOne 				; search one table
.4128	b0 0d		bcs $4137			bcs 	_TSFound 					; found a token.
.412a	ee 13 0d	inc $0d13			inc 	currentSet 					; next set
.412d	ad 13 0d	lda $0d13			lda 	currentSet
.4130	c9 04		cmp #$04			cmp 	#4
.4132	d0 e2		bne $4116			bne 	_TSLoop 					; back if not done all four.
.4134	18		clc				clc 								; clear carry and exit
.4135	90 10		bcc $4147			bcc 	_TSExit
.4137					_TSFound:
.4137	48		pha				pha 								; save token
.4138	ad 13 0d	lda $0d13			lda 	currentSet					; if set zero no shift
.413b	f0 05		beq $4142			beq 	_TSNoShift
.413d	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.413f	20 fd 41	jsr $41fd			jsr 	TokenWrite
.4142					_TSNoShift:
.4142	68		pla				pla 								; get token back
.4143	20 fd 41	jsr $41fd			jsr 	TokenWrite 					; write it
.4146	38		sec				sec 								; carry set indicating success
.4147					_TSExit:
.4147	68		pla				pla
.4148	a8		tay				tay
.4149	68		pla				pla
.414a	aa		tax				tax
.414b	60		rts				rts
.414c					TokenSearchOne:
.414c	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.414e					_TSOLoop:
.414e	a0 00		ldy #$00			ldy 	#0
.4150	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4152	f0 26		beq $417a			beq 	_TSOFail 					; if zero, end of table
.4154	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4157	f0 11		beq $416a			beq 	_TSOCheckText
.4159					_TSONext:
.4159	e8		inx				inx 								; bump token
.415a	a0 00		ldy #$00			ldy 	#0							; get length
.415c	b1 2a		lda ($2a),y			lda 	(temp0),y
.415e	38		sec				sec
.415f	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4161	85 2a		sta $2a				sta 	temp0
.4163	90 e9		bcc $414e			bcc 	_TSOLoop
.4165	e6 2b		inc $2b				inc 	temp0+1
.4167	4c 4e 41	jmp $414e			jmp 	_TSOLoop
.416a					_TSOCheckText:
.416a	a8		tay				tay 								; compare length downto 1.
.416b					_TSOCheckLoop:
.416b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.416d	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4170	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4172	d0 e5		bne $4159			bne 	_TSONext 					; different goto next.
.4174	88		dey				dey 								; do all
.4175	d0 f4		bne $416b			bne 	_TSOCheckLoop
.4177	8a		txa				txa 								; return token in A and carry set
.4178	38		sec				sec
.4179	60		rts				rts
.417a					_TSOFail:
.417a	18		clc				clc
.417b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.417c					TokTest:
.417c	a2 ff		ldx #$ff				ldx 	#$FF
.417e	9a		txs					txs
.417f	a9 9c		lda #$9c			lda 	#(TokenText1) & $FF
.4181	85 28		sta $28				sta 	codePtr
.4183	a9 41		lda #$41			lda 	#(TokenText1) >> 8
.4185	85 29		sta $29				sta 	1+(codePtr)
.4187	20 9c 41	jsr $419c				jsr 	Tokenise
.418a	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.418c	bd 9c 41	lda $419c,x	_TokCheck:	lda 	TokenBytes1,x
.418f	dd 17 0d	cmp $0d17,x				cmp 	tokenBuffer,x
.4192	d0 fe		bne $4192	_TokFail:	bne 	_TokFail	 		; error.
.4194	e8		inx					inx
.4195	c9 80		cmp #$80				cmp 	#$80
.4197	d0 f3		bne $418c				bne 	_TokCheck
.4199	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.419c					TokenText1:
.419c					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d14					tokenHeader:
>0d14							.fill 	3
.0d17					tokenBuffer:
>0d17							.fill 	256
.0e17					tokenBufferIndex:
>0e17							.fill 	1
.419c					Tokenise:
.419c	20 16 42	jsr $4216			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.419f					TokeniseASCIIZ:
.419f	20 27 42	jsr $4227			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.41a2	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.41a4	8d 17 0e	sta $0e17			sta 	tokenBufferIndex
.41a7	a8		tay				tay 								; start pointer
.41a8	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.41aa	8d 17 0d	sta $0d17			sta 	tokenBuffer
.41ad					_TokLoop:
.41ad	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.41af	f0 46		beq $41f7			beq 	_TokExit 					; if zero, then exit.
.41b1	c8		iny				iny 								; skip over spaces.
.41b2	c9 20		cmp #$20			cmp 	#" "
.41b4	f0 f7		beq $41ad			beq 	_TokLoop
.41b6	88		dey				dey 								; point back to character.
.41b7	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.41b9	f0 18		beq $41d3			beq 	_TokHexConst
.41bb	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.41bd	f0 23		beq $41e2			beq 	_TokQString
.41bf	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.41c1	b0 26		bcs $41e9			bcs 	_TokPunctuation
.41c3	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.41c5	b0 29		bcs $41f0			bcs 	_TokIdentifier
.41c7	c9 3a		cmp #$3a			cmp 	#"9"+1
.41c9	b0 1e		bcs $41e9			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.41cb	c9 30		cmp #$30			cmp 	#"0"
.41cd	90 1a		bcc $41e9			bcc 	_TokPunctuation 			; < 0, punctuation.
.41cf	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.41d1	d0 08		bne $41db			bne 	_TokConst
.41d3					_TokHexConst:
.41d3	c8		iny				iny									; consume token.
.41d4	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.41d6	20 fd 41	jsr $41fd			jsr 	TokenWrite
.41d9	a9 10		lda #$10			lda 	#16
.41db					_TokConst:
.41db	20 e5 42	jsr $42e5			jsr 	TokeniseInteger
.41de	b0 cd		bcs $41ad			bcs 	_TokLoop
.41e0	90 18		bcc $41fa			bcc 	_TokFail
.41e2					_TokQString:
.41e2	20 7b 43	jsr $437b			jsr 	TokeniseString
.41e5	b0 c6		bcs $41ad			bcs 	_TokLoop
.41e7	90 11		bcc $41fa			bcc 	_TokFail
.41e9					_TokPunctuation:
.41e9	20 5a 43	jsr $435a			jsr 	TokenisePunctuation
.41ec	b0 bf		bcs $41ad			bcs 	_TokLoop
.41ee	90 0a		bcc $41fa			bcc 	_TokFail
.41f0					_TokIdentifier:
.41f0	20 56 42	jsr $4256			jsr 	TokeniseIdentifier
.41f3	b0 b8		bcs $41ad			bcs 	_TokLoop
.41f5	90 03		bcc $41fa			bcc 	_TokFail
.41f7					_TokExit:
.41f7	a9 01		lda #$01			lda 	#1
.41f9	60		rts				rts
.41fa					_TokFail:
.41fa	a9 00		lda #$00			lda 	#0
.41fc	60		rts				rts
.41fd					TokenWrite:
.41fd	85 32		sta $32				sta 	tempShort 					; save XA
.41ff	48		pha				pha
.4200	8a		txa				txa
.4201	48		pha				pha
.4202	a5 32		lda $32				lda 	tempShort
.4204	ae 17 0e	ldx $0e17			ldx 	tokenBufferIndex 			; geet index
.4207	9d 17 0d	sta $0d17,x			sta 	tokenBuffer,x 				; write byte to buffer
.420a	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.420c	9d 18 0d	sta $0d18,x			sta 	tokenBuffer+1,x
.420f	ee 17 0e	inc $0e17			inc 	tokenBufferIndex 			; bump index
.4212	68		pla				pla
.4213	aa		tax				tax
.4214	68		pla				pla
.4215	60		rts				rts
.4216					TokeniseMakeASCIIZ:
.4216	a0 00		ldy #$00			ldy 	#0							; get length of string.
.4218	b1 28		lda ($28),y			lda 	(codePtr),y
.421a	a8		tay				tay
.421b	c8		iny				iny 								; +1, the NULL goes here.
.421c	a9 00		lda #$00			lda 	#0
.421e	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4220	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4222	d0 02		bne $4226			bne 	_TMKAExit
.4224	e6 29		inc $29				inc 	codePtr+1
.4226					_TMKAExit:
.4226	60		rts				rts
.4227					TokeniseFixCase:
.4227	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4229	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.422b					_TFCFlipQ:
.422b	8a		txa				txa
.422c	49 01		eor #$01			eor 	#1
.422e	aa		tax				tax
.422f					_TFCLoop:
.422f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4231	f0 22		beq $4255			beq 	_TFCExit 					; if zero exit.
.4233	c9 20		cmp #$20			cmp 	#32 						; if control
.4235	90 1a		bcc $4251			bcc 	_TFCControl
.4237	c8		iny				iny 								; preconsume
.4238	c9 22		cmp #$22			cmp 	#'"'
.423a	f0 ef		beq $422b			beq 	_TFCFlipQ
.423c	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.423e	90 ef		bcc $422f			bcc 	_TFCLoop
.4240	c9 7b		cmp #$7b			cmp 	#"z"+1
.4242	b0 eb		bcs $422f			bcs 	_TFCLoop
.4244	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4246	d0 e7		bne $422f			bne 	_TFCLoop
.4248	88		dey				dey
.4249	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.424b					_TFCWrite:
.424b	91 28		sta ($28),y			sta 	(codePtr),y
.424d	c8		iny				iny
.424e	4c 2f 42	jmp $422f			jmp 	_TFCLoop
.4251					_TFCControl:
.4251	a9 20		lda #$20			lda 	#" "
.4253	d0 f6		bne $424b			bne 	_TFCWrite
.4255					_TFCExit:
.4255	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4256					TokeniseIdentifier:
.4256	a2 00		ldx #$00			ldx 	#0
.4258					_TICopyID:
.4258	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.425a	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.425c	f0 16		beq $4274			beq 	_TICopyUnderscore
.425e	c9 2e		cmp #$2e			cmp 	#"."
.4260	f0 14		beq $4276			beq 	_TICopyIn
.4262	c9 30		cmp #$30			cmp 	#"0"
.4264	90 1b		bcc $4281			bcc 	_TIEndCopy
.4266	c9 3a		cmp #$3a			cmp 	#"9"+1
.4268	90 0c		bcc $4276			bcc 	_TICopyIn
.426a	c9 41		cmp #$41			cmp 	#"A"
.426c	90 13		bcc $4281			bcc 	_TIEndCopy
.426e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4270	b0 0f		bcs $4281			bcs		_TIEndCopy
.4272	90 02		bcc $4276			bcc 	_TICopyIn
.4274					_TICopyUnderScore:
.4274	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4276					_TICopyIn:
.4276	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4277	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.427a	8e cf 0a	stx $0acf			stx 	convertBuffer
.427d	c8		iny				iny 								; next character
.427e	4c 58 42	jmp $4258			jmp 	_TICopyID 					; loop round
.4281					_TIEndCopy:
.4281	a9 24		lda #$24			lda 	#"$"
.4283	20 d8 42	jsr $42d8			jsr 	TIDCheckCopy
.4286	a9 23		lda #$23			lda 	#"#"
.4288	20 d8 42	jsr $42d8			jsr 	TIDCheckCopy
.428b	a9 28		lda #$28			lda 	#"("
.428d	20 d8 42	jsr $42d8			jsr 	TIDCheckCopy
.4290	20 0d 41	jsr $410d			jsr 	TokenSearch 				; is it a token
.4293	b0 41		bcs $42d6			bcs 	_TIExit 					; if so, then exit.
.4295	98		tya				tya
.4296	48		pha				pha
.4297	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4299	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.429c	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.429f	c9 28		cmp #$28			cmp 	#"("
.42a1	d0 02		bne $42a5			bne 	_TINotArray
.42a3	ca		dex				dex 								; yes, remove it and convert to array.
.42a4	c8		iny				iny
.42a5					_TINotArray:
.42a5	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.42a8	c9 24		cmp #$24			cmp 	#"$"
.42aa	d0 03		bne $42af			bne 	_TINotString
.42ac	ca		dex				dex
.42ad	c8		iny				iny
.42ae	c8		iny				iny
.42af					_TINotString:
.42af	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.42b2	c9 23		cmp #$23			cmp 	#"#"
.42b4	d0 05		bne $42bb			bne 	_TINotFloat
.42b6	ca		dex				dex
.42b7	c8		iny				iny
.42b8	c8		iny				iny
.42b9	c8		iny				iny
.42ba	c8		iny				iny
.42bb					_TINotFloat:
.42bb	e8		inx				inx 								; write end marker for identifier.
.42bc	98		tya				tya
.42bd	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.42c0	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.42c3	a2 01		ldx #$01			ldx 	#1
.42c5					_TIOutput:
.42c5	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.42c8	29 3f		and #$3f			and 	#$3F
.42ca	48		pha				pha
.42cb	20 fd 41	jsr $41fd			jsr 	TokenWrite
.42ce	e8		inx				inx
.42cf	68		pla				pla
.42d0	c9 3a		cmp #$3a			cmp 	#$3A
.42d2	90 f1		bcc $42c5			bcc 	_TIOutput
.42d4	68		pla				pla
.42d5	a8		tay				tay
.42d6					_TIExit:
.42d6	38		sec				sec 								; this can't fail.
.42d7	60		rts				rts
.42d8					TIDCheckCopy:
.42d8	d1 28		cmp ($28),y			cmp 	(codePtr),y
.42da	d0 08		bne $42e4			bne 	_TIDCCExit
.42dc	e8		inx				inx
.42dd	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.42e0	8e cf 0a	stx $0acf			stx 	convertBuffer
.42e3	c8		iny				iny
.42e4					_TIDCCExit:
.42e4	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.42e5					TokeniseInteger:
.42e5	85 2c		sta $2c				sta 	temp1 						; save base
.42e7	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.42e9	8e cf 0a	stx $0acf			stx 	convertBuffer
.42ec					_TIGetChars:
.42ec	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.42ee	c9 30		cmp #$30			cmp 	#"0"
.42f0	90 1f		bcc $4311			bcc 	_TIEndGet
.42f2	c9 3a		cmp #$3a			cmp 	#"9"+1
.42f4	90 10		bcc $4306			bcc 	_TIHaveChar
.42f6	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.42f8	c9 0a		cmp #$0a			cmp 	#10
.42fa	f0 15		beq $4311			beq 	_TIEndGet
.42fc	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.42fe	c9 41		cmp #$41			cmp 	#"A"
.4300	90 0f		bcc $4311			bcc 	_TIEndGet
.4302	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4304	b0 0b		bcs $4311			bcs 	_TIEndGet
.4306					_TIHaveChar:
.4306	e8		inx				inx 								; write into buffer.
.4307	8e cf 0a	stx $0acf			stx 	convertBuffer
.430a	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.430d	c8		iny				iny 								; next char
.430e	4c ec 42	jmp $42ec			jmp 	_TIGetChars
.4311					_TIEndGet:
.4311	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.4313	f0 1c		beq $4331			beq 	_TIFail
.4315	98		tya				tya
.4316	48		pha				pha
.4317	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4319	85 2a		sta $2a				sta 	temp0
.431b	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.431d	85 2b		sta $2b				sta 	1+(temp0)
.431f	a9 00		lda #$00			lda 	#0 							; stack level 0
.4321	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4323	a2 1a		ldx #$1a		ldx	#26
.4325	20 18 3c	jsr $3c18		jsr	mainHandler
.4328	68		pla				pla
.4329	a8		tay				tay
.432a	90 05		bcc $4331			bcc 	_TIFail 					; didn't convert.
.432c	20 33 43	jsr $4333			jsr 	TIRecursiveOut 				; recursive output ?
.432f	38		sec				sec
.4330	60		rts				rts
.4331					_TIFail:
.4331	18		clc				clc
.4332	60		rts				rts
.4333					TIRecursiveOut:
.4333	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4335	29 3f		and #$3f			and 	#$3F
.4337	09 40		ora #$40			ora 	#$40
.4339	48		pha				pha
.433a	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.433c	29 c0		and #$c0			and 	#$C0
.433e	05 a0		ora $a0				ora 	esInt1
.4340	05 a8		ora $a8				ora 	esInt2
.4342	05 b0		ora $b0				ora 	esInt3
.4344	f0 10		beq $4356			beq 	_TIRONoRecursion
.4346	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4348					_TIROShift:
.4348	46 b0		lsr $b0				lsr 	esInt3
.434a	66 a8		ror $a8				ror 	esInt2
.434c	66 a0		ror $a0				ror 	esInt1
.434e	66 98		ror $98				ror 	esInt0
.4350	ca		dex				dex
.4351	d0 f5		bne $4348			bne 	_TIROShift
.4353	20 33 43	jsr $4333			jsr 	TIRecursiveOut 				; call recursively
.4356					_TIRONoRecursion:
.4356	68		pla				pla 								; pull the old bit.
.4357	4c fd 41	jmp $41fd			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.435a					TokenisePunctuation:
.435a	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.435c	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.435f	c8		iny				iny
.4360	b1 28		lda ($28),y			lda 	(codePtr),y
.4362	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4365	c8		iny				iny 								; Y is +2
.4366	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4368	8d cf 0a	sta $0acf			sta 	convertBuffer
.436b	20 0d 41	jsr $410d			jsr 	TokenSearch 				; search for that token.
.436e	b0 0a		bcs $437a			bcs 	_TIFound
.4370	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4373	88		dey				dey 								; Y is now +1
.4374	20 0d 41	jsr $410d			jsr 	TokenSearch 				; search for that token.
.4377	b0 01		bcs $437a			bcs 	_TIFound
.4379	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.437a					_TIFound:
.437a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.437b					TokeniseString:
.437b	c8		iny				iny 								; skip opening quote
.437c	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.437e	84 2a		sty $2a				sty 	temp0 						; save start.
.4380					_TSGetLength:
.4380	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4382	f0 21		beq $43a5			beq 	_TSFail						; end of line, fail
.4384	c8		iny				iny
.4385	e8		inx				inx
.4386	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4388	d0 f6		bne $4380			bne 	_TSGetLength
.438a	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.438c	20 fd 41	jsr $41fd			jsr 	TokenWrite
.438f	8a		txa				txa 								; output length
.4390	20 fd 41	jsr $41fd			jsr 	TokenWrite
.4393	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4395	e0 00		cpx #$00			cpx 	#0 							; check ended
.4397	f0 09		beq $43a2			beq 	_TSExit
.4399					_TSOutput:
.4399	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.439b	20 fd 41	jsr $41fd			jsr 	TokenWrite
.439e	c8		iny				iny
.439f	ca		dex				dex
.43a0	d0 f7		bne $4399			bne 	_TSOutput
.43a2					_TSExit:
.43a2	c8		iny				iny 								; skip ending quote
.43a3	38		sec				sec 								; return CS.
.43a4	60		rts				rts
.43a5					_TSFail:
.43a5	18		clc				clc
.43a6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.43a7					TokenTableAddress:
>43a7	af 43						.word 	Group0Text
>43a9	7d 45						.word 	Group1Text
>43ab	ca 46						.word 	Group2Text
>43ad	14 47						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.43af					Group0Text:
>43af	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>43b3	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>43b6	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>43ba	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>43bd	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>43c0	01 be					.byte $01,$be                          ; $8b >
>43c2	01 bc					.byte $01,$bc                          ; $8c <
>43c4	01 bd					.byte $01,$bd                          ; $8d =
>43c6	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>43c9	01 ab					.byte $01,$ab                          ; $8f +
>43cb	01 ad					.byte $01,$ad                          ; $90 -
>43cd	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>43d0	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>43d3	01 aa					.byte $01,$aa                          ; $93 *
>43d5	01 af					.byte $01,$af                          ; $94 /
>43d7	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>43db	01 de					.byte $01,$de                          ; $96 ^
>43dd	01 a1					.byte $01,$a1                          ; $97 !
>43df	01 bf					.byte $01,$bf                          ; $98 ?
>43e1	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>43e8	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>43ee	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>43f2	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>43f5	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>43fd	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>4403	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>4408	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>440d	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>4412	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>4418	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>4420	01 a8					.byte $01,$a8                          ; $a4 (
>4422	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>4427	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>442c	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4431	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>4439	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>443e	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4443	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4449	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>444e	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4453	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4458	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>445f	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4466	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>446b	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4472	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4479	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>447f	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4486	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>448c	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4494	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>449a	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>449f	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>44a5	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>44ab	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>44b1	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>44b6	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>44bb	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>44c2	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>44c9	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>44d1	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>44d9	01 c0					.byte $01,$c0                          ; $c3 @
>44db	01 fe					.byte $01,$fe                          ; $c4 ~
>44dd	01 a6					.byte $01,$a6                          ; $c5 &
>44df	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>44e5	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>44ed	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>44f1	01 a9					.byte $01,$a9                          ; $c9 )
>44f3	01 ba					.byte $01,$ba                          ; $ca :
>44f5	01 ac					.byte $01,$ac                          ; $cb ,
>44f7	01 bb					.byte $01,$bb                          ; $cc ;
>44f9	01 a7					.byte $01,$a7                          ; $cd '
>44fb	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>44fe	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>4503	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>4508	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>450e	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4512	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>4516	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>451a	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>4520	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4525	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4529	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>452f	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4534	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>453a	02 41 d4				.byte $02,$41,$d4                      ; $db at
>453d	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4542	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4549	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>454e	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4553	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4558	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>455c	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4562	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4566	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>456d	01 ae					.byte $01,$ae                          ; $e5 .
>456f	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>4574	01 a3					.byte $01,$a3                          ; $e7 #
>4576	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>457c	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.457d					Group1Text:
>457d	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4582	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4587	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>458c	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4590	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4596	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>459a	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>459f	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>45a7	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>45ab	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>45b0	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>45b5	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>45ba	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>45c0	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>45c7	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>45cb	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>45d1	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>45d5	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>45d9	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>45dd	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>45e1	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>45e5	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>45e9	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>45ed	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>45f1	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>45f5	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>45f9	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>45fd	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>4601	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>4605	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>4609	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>460d	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4611	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>4615	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4619	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>461d	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4621	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>4625	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4629	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>462d	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4631	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4635	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4639	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>463d	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4641	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4645	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4649	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>464d	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4651	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4655	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4659	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>465d	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4661	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4665	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4669	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>466d	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4671	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4675	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4679	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>467d	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4681	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4685	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4689	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>468d	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4691	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4695	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4699	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>469d	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>46a1	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>46a5	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>46a9	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>46ad	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>46b1	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>46b5	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>46b9	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>46bd	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>46c1	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>46c5	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>46c9	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.46ca					Group2Text:
>46ca	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>46d0	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>46d6	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>46dc	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>46e1	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>46e9	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>46f0	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>46f4	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>46f9	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>46ff	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>4704	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $90 text
>4709	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $91 plot
>470e	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $92 line
>4713	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4714					Group3Text:
>4714	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>471b	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4722	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>472a	58 a8
>472c	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4734	59 a8
>4736	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>473b	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4742	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4749	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4750	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4757	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4758					tokeniserHandler:
.4758	7c 5b 47	jmp ($475b,x)			jmp 	(tokeniserVectors,x)
.475b					tokeniserVectors:
>475b	67 47					.word _DummyControlHandler ; index 0
>475d	f7 3e					.word Detokenise           ; index 2
>475f	eb 3e					.word ListLine             ; index 4
>4761	7c 41					.word TokTest              ; index 6
>4763	9c 41					.word Tokenise             ; index 8
>4765	9f 41					.word TokeniseASCIIZ       ; index 10
.4767					_DummyControlHandler:
.4767	60		rts			rts

;******  Return to file: basic.asm

.4768					section_end_tokeniser:
.4768					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4768					AccessArray:
.4768	8a		txa				txa
.4769	48		pha				pha
.476a	e8		inx				inx
.476b	20 34 48	jsr $4834			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.476e	68		pla				pla
.476f	aa		tax				tax
.4770	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4772	85 2a		sta $2a				sta 	temp0
.4774	b5 a0		lda $a0,x			lda 	esInt1,x
.4776	85 2b		sta $2b				sta 	temp0+1
.4778	8a		txa				txa
.4779	48		pha				pha
.477a	98		tya				tya
.477b	48		pha				pha
.477c					_AAFollow:
.477c	a0 00		ldy #$00			ldy 	#0
.477e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4780	48		pha				pha
.4781	c8		iny				iny
.4782	b1 2a		lda ($2a),y			lda 	(temp0),y
.4784	85 2b		sta $2b				sta 	temp0+1
.4786	68		pla				pla
.4787	85 2a		sta $2a				sta 	temp0
.4789	e8		inx				inx 								; advance to next stack slot.
.478a	a0 00		ldy #$00			ldy 	#0
.478c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.478e	d5 98		cmp $98,x			cmp 	esInt0,x
.4790	c8		iny				iny
.4791	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4793	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4795	29 7f		and #$7f			and 	#$7F
.4797	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4799	90 50		bcc $47eb			bcc 	_AABadIndex 				; failed on index if max index < required.
.479b	18		clc				clc
.479c	a5 2a		lda $2a				lda 	temp0
.479e	69 02		adc #$02			adc 	#2
.47a0	85 2a		sta $2a				sta 	temp0
.47a2	90 02		bcc $47a6			bcc 	_AANoCarry
.47a4	e6 2b		inc $2b				inc 	temp0+1
.47a6					_AANoCarry:
.47a6	b5 98		lda $98,x			lda 	esInt0,x
.47a8	85 2e		sta $2e				sta 	temp2
.47aa	b5 a0		lda $a0,x			lda 	esInt1,x
.47ac	85 2f		sta $2f				sta 	temp2+1
.47ae	ac 1a 0e	ldy $0e1a			ldy 	varType
.47b1	b9 8e 48	lda $488e,y			lda 	CAActualSize-$3A,y
.47b4	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.47b6	30 02		bmi $47ba			bmi 	_AANotPointer
.47b8	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.47ba					_AANotPointer:
.47ba	20 38 49	jsr $4938			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.47bd	18		clc				clc
.47be	a5 2a		lda $2a				lda 	temp0
.47c0	65 2e		adc $2e				adc 	temp2
.47c2	85 2a		sta $2a				sta 	temp0
.47c4	a5 2b		lda $2b				lda 	temp0+1
.47c6	65 2f		adc $2f				adc 	temp2+1
.47c8	85 2b		sta $2b				sta 	temp0+1
.47ca	b5 91		lda $91,x			lda 	esType+1,x
.47cc	30 07		bmi $47d5			bmi 	_AAUsedAllIndices
.47ce	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.47d0	10 14		bpl $47e6			bpl 	_AABadDepth 				; no, too many indexes.
.47d2	4c 7c 47	jmp $477c			jmp 	_AAFollow 					; otherwise follow them.
.47d5					_AAUsedAllIndices:
.47d5	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.47d7	30 0d		bmi $47e6			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.47d9	68		pla				pla
.47da	a8		tay				tay
.47db	68		pla				pla
.47dc	aa		tax				tax
.47dd	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.47df	95 98		sta $98,x			sta 	esInt0,x
.47e1	a5 2b		lda $2b				lda 	temp0+1
.47e3	95 a0		sta $a0,x			sta 	esInt1,x
.47e5	60		rts				rts
.47e6					_AABadDepth:
.47e6	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.47e8	20 18 15	jsr $1518		jsr	errorHandler
.47eb					_AABadIndex:
.47eb	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.47ed	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e18					elementSize:
>0e18							.fill	 1
.47f0					CreateArray:
.47f0	20 c7 49	jsr $49c7			jsr 	AccessSetup 				; set up the basic stuff.
.47f3	ad 1a 0e	lda $0e1a			lda 	varType 					; is the variable type an array
.47f6	4a		lsr a				lsr 	a
.47f7	90 36		bcc $482f			bcc 	CANotArray 					; no, cause an error.
.47f9	20 d0 4a	jsr $4ad0			jsr 	FindVariable 				; does the variable exist already
.47fc	b0 2c		bcs $482a			bcs 	CAFound 					; cannot redefine it.
.47fe	20 04 4a	jsr $4a04			jsr 	CreateVariable 				; create the variable entry.
.4801	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4803	48		pha				pha
.4804	a5 2b		lda $2b				lda 	temp0+1
.4806	48		pha				pha
.4807	a2 00		ldx #$00			ldx 	#0
.4809	20 34 48	jsr $4834			jsr 	GetArrayDimensions 			; get the array dimensions
.480c	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.480e	20 64 48	jsr $4864			jsr 	CreateArrayLevel 			; level to YA
.4811	aa		tax				tax 								; level now in YX
.4812	68		pla				pla 								; get address back to temp0 to write.
.4813	85 2b		sta $2b				sta 	temp0+1
.4815	68		pla				pla
.4816	85 2a		sta $2a				sta 	temp0
.4818	98		tya				tya 								; write YX there.
.4819	a0 06		ldy #$06			ldy 	#6
.481b	91 2a		sta ($2a),y			sta 	(temp0),y
.481d	88		dey				dey
.481e	8a		txa				txa
.481f	91 2a		sta ($2a),y			sta 	(temp0),y
.4821	ac 1b 0e	ldy $0e1b			ldy 	varEnd 						; restore Y and exit.
.4824	60		rts				rts
.4825					CASize:
.4825	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4827	20 18 15	jsr $1518		jsr	errorHandler
.482a					CAFound:
.482a	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.482c	20 18 15	jsr $1518		jsr	errorHandler
.482f					CANotArray:
.482f	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4831	20 18 15	jsr $1518		jsr	errorHandler
.4834					GetArrayDimensions:
.4834	ad 1a 0e	lda $0e1a			lda 	varType 					; push variable type on the stack.
.4837	48		pha				pha
.4838	ac 1b 0e	ldy $0e1b			ldy 	varEnd
.483b					_CAGetDimensions:
.483b	8a		txa				txa 								; get the next level
.483c	a2 0a		ldx #$0a		ldx	#10
.483e	20 18 3c	jsr $3c18		jsr	mainHandler
.4841	aa		tax				tax
.4842	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4844	29 e0		and #$e0			and 	#$E0
.4846	15 a8		ora $a8,x			ora 	esInt2,x
.4848	15 b0		ora $b0,x			ora 	esInt3,x
.484a	d0 d9		bne $4825			bne 	CASize
.484c	e8		inx				inx 								; next level.
.484d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.484f	c8		iny				iny
.4850	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4852	f0 e7		beq $483b			beq 	_CAGetDimensions
.4854	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4856	d0 cd		bne $4825			bne 	CASize
.4858	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.485a	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.485c	68		pla				pla 								; restore the variable type ($3A-$3F)
.485d	8d 1a 0e	sta $0e1a			sta 	varType
.4860	8c 1b 0e	sty $0e1b			sty 	varEnd 						; save exit Y value, after dimensions
.4863	60		rts				rts
.4864					CreateArrayLevel:
.4864	ac 1a 0e	ldy $0e1a			ldy 	varType
.4867	b9 8e 48	lda $488e,y			lda 	CAActualSize-$3A,y
.486a	8d 18 0e	sta $0e18			sta 	elementSize 				; get element size this level.
.486d	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.486f	30 05		bmi $4876			bmi 	_CANotPointer
.4871	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4873	8d 18 0e	sta $0e18			sta 	elementSize
.4876					_CANotPointer:
.4876	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4878	85 2a		sta $2a				sta 	temp0
.487a	48		pha				pha
.487b	a5 36		lda $36				lda 	lowMemory+1
.487d	85 2b		sta $2b				sta 	temp0+1
.487f	48		pha				pha
.4880	20 01 49	jsr $4901			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4883	a0 00		ldy #$00			ldy 	#0
.4885	b5 98		lda $98,x			lda 	esInt0,x
.4887	91 2a		sta ($2a),y			sta 	(temp0),y
.4889	c8		iny				iny
.488a	b5 a0		lda $a0,x			lda 	esInt1,x
.488c	91 2a		sta ($2a),y			sta 	(temp0),y
.488e	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4890	30 06		bmi $4898			bmi 	_CALNotLast
.4892	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4894	09 80		ora #$80			ora 	#$80
.4896	91 2a		sta ($2a),y			sta 	(temp0),y
.4898					_CALNotLast:
.4898	a9 02		lda #$02			lda 	#2
.489a	20 be 48	jsr $48be			jsr 	_CALAddTemp0
.489d	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.489f	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.48a1	b5 a0		lda $a0,x			lda 	esInt1,x
.48a3	95 b0		sta $b0,x			sta 	esInt3,x
.48a5					_CALClear:
.48a5	20 ce 48	jsr $48ce			jsr 	EraseOneElement
.48a8	ad 18 0e	lda $0e18			lda 	elementSize 				; move to next element
.48ab	20 be 48	jsr $48be			jsr 	_CALAddTemp0
.48ae	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.48b0	d0 02		bne $48b4			bne 	_CALNoBorrow
.48b2	d6 b0		dec $b0,x			dec 	esInt3,x
.48b4					_CALNoBorrow:
.48b4	d6 a8		dec $a8,x			dec 	esInt2,x
.48b6	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.48b8	10 eb		bpl $48a5			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.48ba	68		pla				pla 								; restore the start of this into YA.
.48bb	a8		tay				tay
.48bc	68		pla				pla
.48bd	60		rts				rts
.48be					_CALAddTemp0:
.48be	18		clc				clc
.48bf	65 2a		adc $2a				adc 	temp0
.48c1	85 2a		sta $2a				sta 	temp0
.48c3	90 02		bcc $48c7			bcc 	_CALANoCarry
.48c5	e6 2b		inc $2b				inc 	temp0+1
.48c7					_CALANoCarry:
.48c7	60		rts				rts
.48c8					CAActualSize:
>48c8	04 04						.byte 	VarISize,VarISize
>48ca	02 02						.byte 	VarSSize,VarSSize
>48cc	06 06						.byte 	VarFSize,VarFSize
.48ce					EraseOneElement:
.48ce	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.48d0	10 09		bpl $48db			bpl 	_EOESubArray
.48d2	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.48d4	ad 1a 0e	lda $0e1a			lda 	varType
.48d7	20 6e 4a	jsr $4a6e			jsr 	ZeroTemp0Y
.48da	60		rts				rts
.48db					_EOESubArray:
.48db	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.48dd	48		pha				pha
.48de	a5 2b		lda $2b				lda 	temp0+1
.48e0	48		pha				pha
.48e1	ad 18 0e	lda $0e18			lda 	elementSize 				; save element size
.48e4	48		pha				pha
.48e5	e8		inx				inx 								; create at next level
.48e6	20 64 48	jsr $4864			jsr 	CreateArrayLevel
.48e9	ca		dex				dex
.48ea	85 32		sta $32				sta 	tempShort 					; save A
.48ec	68		pla				pla  								; restore element size.
.48ed	8d 18 0e	sta $0e18			sta 	elementSize
.48f0	68		pla				pla 								; restore temp0, which is where this new array level goes.
.48f1	85 2b		sta $2b				sta 	temp0+1
.48f3	68		pla				pla
.48f4	85 2a		sta $2a				sta 	temp0
.48f6	98		tya				tya 								; store Y/A there
.48f7	a0 01		ldy #$01			ldy 	#1
.48f9	91 2a		sta ($2a),y			sta 	(temp0),y
.48fb	a5 32		lda $32				lda 	tempShort
.48fd	88		dey				dey
.48fe	91 2a		sta ($2a),y			sta 	(temp0),y
.4900	60		rts				rts
.4901					AllocateArraySpace:
.4901	18		clc				clc 								; element count + 1 => temp2.
.4902	b5 98		lda $98,x			lda 	esInt0,x
.4904	69 01		adc #$01			adc 	#1
.4906	85 2e		sta $2e				sta 	temp2
.4908	b5 a0		lda $a0,x			lda 	esInt1,x
.490a	69 00		adc #$00			adc 	#0
.490c	85 2f		sta $2f				sta 	temp2+1
.490e	ad 18 0e	lda $0e18			lda 	elementSize 				; bytes per element
.4911	20 38 49	jsr $4938			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4914	18		clc				clc 								; add 2 for 'max element' byte.
.4915	a5 2e		lda $2e				lda 	temp2
.4917	69 02		adc #$02			adc 	#2
.4919	85 2e		sta $2e				sta 	temp2
.491b	90 02		bcc $491f			bcc 	_AASNoCarry
.491d	e6 2f		inc $2f				inc 	temp2+1
.491f					_AASNoCarry:
.491f	18		clc				clc 								; add to low memory, allocating space.
.4920	a5 35		lda $35				lda 	lowMemory
.4922	65 2e		adc $2e				adc 	temp2
.4924	85 35		sta $35				sta 	lowMemory
.4926	a5 36		lda $36				lda 	lowMemory+1
.4928	65 2f		adc $2f				adc 	temp2+1
.492a	85 36		sta $36				sta 	lowMemory+1
.492c	b0 05		bcs $4933			bcs 	_AASFail 					; out of memory as adding causes wrapround
.492e	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4930	b0 01		bcs $4933			bcs 	_AASFail
.4932	60		rts				rts
.4933					_AASFail:
.4933	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4935	20 18 15	jsr $1518		jsr	errorHandler
.4938					MultiplyTemp2ByA:
.4938	48		pha				pha
.4939	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.493b	85 30		sta $30				sta 	temp3
.493d	a5 2f		lda $2f				lda 	temp2+1
.493f	85 31		sta $31				sta 	temp3+1
.4941	68		pla				pla
.4942	06 2e		asl $2e				asl 	temp2 						; double it.
.4944	26 2f		rol $2f				rol 	temp2+1
.4946	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4948	f0 15		beq $495f			beq 	_MTBAExit
.494a	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.494c	d0 0d		bne $495b			bne 	_MTBANotFloat
.494e	18		clc				clc 								; so this will make it x 3
.494f	a5 2e		lda $2e				lda 	temp2
.4951	65 30		adc $30				adc 	temp3
.4953	85 2e		sta $2e				sta 	temp2
.4955	a5 2f		lda $2f				lda 	temp2+1
.4957	65 31		adc $31				adc 	temp3+1
.4959	85 2f		sta $2f				sta 	temp2+1
.495b					_MTBANotFloat:
.495b	06 2e		asl $2e				asl 	temp2 						; double it.
.495d	26 2f		rol $2f				rol 	temp2+1
.495f					_MTBAExit:
.495f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e19					varHash:
>0e19							.fill	1
.0e1a					varType:
>0e1a							.fill 	1
.0e1b					varEnd:
>0e1b							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4960					AccessVariable:
.4960	aa		tax				tax 								; stack in X
.4961	c8		iny				iny									; look at second character
.4962	b1 28		lda ($28),y			lda 	(codePtr),y
.4964	88		dey				dey
.4965	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4967	d0 15		bne $497e			bne 	_AVLong 					; no, always use the hash tables.
.4969	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.496b	38		sec				sec 	 							; make it 0-25
.496c	e9 01		sbc #$01			sbc 	#1
.496e	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.496f	0a		asl a				asl 	a
.4970	95 98		sta $98,x			sta 	esInt0,x
.4972	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4974	95 a0		sta $a0,x			sta 	esInt1,x
.4976	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4978	95 90		sta $90,x			sta 	esType,x
.497a	c8		iny				iny 								; skip over the variable reference in the code.
.497b	c8		iny				iny  								; (1 letter, 1 type)
.497c	8a		txa				txa 								; stack in A to return.
.497d	60		rts				rts
.497e					_AVLong:
.497e	8a		txa				txa
.497f	48		pha				pha
.4980	20 c7 49	jsr $49c7			jsr 	AccessSetup 				; set up the basic information we need for later
.4983	20 d0 4a	jsr $4ad0			jsr 	FindVariable 				; does the variable exist already ?
.4986	b0 0e		bcs $4996			bcs 	_AVFound 					; yes, then its found
.4988	ad 1a 0e	lda $0e1a			lda 	varType 					; otherwise, is the variable type an array
.498b	4a		lsr a				lsr 	a
.498c	90 05		bcc $4993			bcc 	_AVCanCreate 				; if not, we can autocreate
.498e	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4990	20 18 15	jsr $1518		jsr	errorHandler
.4993					_AVCanCreate:
.4993	20 04 4a	jsr $4a04			jsr 	CreateVariable 				; variable does not exist, create it.
.4996					_AVFound:
.4996	68		pla				pla
.4997	aa		tax				tax
.4998	18		clc				clc 								; copy temp0 (variable record address)
.4999	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.499b	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.499d	95 98		sta $98,x			sta 	esInt0,x
.499f	a5 2b		lda $2b				lda 	temp0+1
.49a1	69 00		adc #$00			adc 	#0
.49a3	95 a0		sta $a0,x			sta 	esInt1,x
.49a5	a9 00		lda #$00			lda 	#0
.49a7	95 a8		sta $a8,x			sta 	esInt2,x
.49a9	95 b0		sta $b0,x			sta 	esInt3,x
.49ab	ac 1a 0e	ldy $0e1a			ldy 	varType 					; get the type ID from the type.
.49ae	b9 87 49	lda $4987,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.49b1	95 90		sta $90,x			sta 	esType,x
.49b3	ac 1b 0e	ldy $0e1b			ldy 	varEnd 						; restore Y
.49b6	ad 1a 0e	lda $0e1a			lda 	VarType 					; get variable type, put LSB into C
.49b9	4a		lsr a				lsr 	a
.49ba	90 03		bcc $49bf			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.49bc	20 68 47	jsr $4768			jsr 	AccessArray 				; array lookup. if LSB was set.
.49bf					_AVNotArray:
.49bf	8a		txa				txa 								; return stack in A and return
.49c0	60		rts				rts
.49c1					_AVTypeTable:
>49c1	80 80						.byte 	$80,$80						; integer
>49c3	c0 c0						.byte 	$C0,$C0 					; string
>49c5	81 81						.byte 	$81,$81 					; float
.49c7					AccessSetup:
.49c7	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.49c9	8d 19 0e	sta $0e19			sta 	varHash
.49cc	98		tya				tya
.49cd	48		pha				pha
.49ce	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.49d0	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.49d2	b0 0b		bcs $49df			bcs 	_ASComplete
.49d4	18		clc				clc 								; add to the hash. Might improve this.
.49d5	6d 19 0e	adc $0e19			adc 	varHash
.49d8	8d 19 0e	sta $0e19			sta 	varHash
.49db	c8		iny				iny 								; next character
.49dc	4c ce 49	jmp $49ce			jmp 	_ASLoop
.49df					_ASComplete:
.49df	8d 1a 0e	sta $0e1a			sta 	varType 					; save variable type byte
.49e2	c8		iny				iny
.49e3	8c 1b 0e	sty $0e1b			sty 	varEnd 						; save the ending position.
.49e6	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.49e7	e9 3a		sbc #$3a			sbc 	#$3A
.49e9	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.49ea	0a		asl a				asl 	a
.49eb	0a		asl a				asl 	a
.49ec	0a		asl a				asl 	a 							; 2 bytes/word
.49ed	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.49ef	ad 19 0e	lda $0e19			lda 	varHash 					; get hash
.49f2	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.49f4	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.49f5	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.49f7	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.49f9	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.49fb	a9 0a		lda #$0a			lda 	#hashTables >> 8
.49fd	69 00		adc #$00			adc 	#0
.49ff	85 3c		sta $3c				sta 	hashList+1
.4a01	68		pla				pla
.4a02	a8		tay				tay
.4a03	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4a04					CreateVariable:
.4a04	98		tya				tya 								; push Y on the stack twice.
.4a05	48		pha				pha									; position in code of the new variable.
.4a06	48		pha				pha
.4a07	ae 1a 0e	ldx $0e1a			ldx 	varType 					; get var type 0-5 from the var type
.4a0a	bd 2e 4a	lda $4a2e,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4a0d	48		pha				pha 								; save length
.4a0e	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4a10	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4a12	a5 36		lda $36				lda 	lowMemory+1
.4a14	85 2b		sta $2b				sta 	temp0+1
.4a16	68		pla				pla 								; get length
.4a17	18		clc				clc 								; add to low memory.
.4a18	65 35		adc $35				adc 	lowMemory
.4a1a	85 35		sta $35				sta 	lowMemory
.4a1c	90 08		bcc $4a26			bcc 	_CVNoCarry
.4a1e	e6 36		inc $36				inc 	lowMemory+1
.4a20	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4a22	c5 34		cmp $34				cmp 	highMemory+1
.4a24	b0 3d		bcs $4a63			bcs 	_CVMemory
.4a26					_CVNoCarry:
.4a26	ad 19 0e	lda $0e19			lda 	varHash 					; store hash at offset 4.
.4a29	a0 04		ldy #$04			ldy 	#4
.4a2b	91 2a		sta ($2a),y			sta 	(temp0),y
.4a2d	68		pla				pla 								; offset, work out where the variable name is.
.4a2e	18		clc				clc
.4a2f	65 28		adc $28				adc 	codePtr
.4a31	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4a33	91 2a		sta ($2a),y			sta 	(temp0),y
.4a35	a5 29		lda $29				lda 	codePtr+1
.4a37	69 00		adc #$00			adc 	#0
.4a39	c8		iny				iny
.4a3a	91 2a		sta ($2a),y			sta 	(temp0),y
.4a3c	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4a3f	b0 03		bcs $4a44			bcs 	_CVNotImmediate
.4a41	20 a6 4a	jsr $4aa6			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4a44					_CVNotImmediate:
.4a44	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4a46	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4a48	91 2a		sta ($2a),y			sta 	(temp0),y
.4a4a	c8		iny				iny
.4a4b	b1 3b		lda ($3b),y			lda 	(hashList),y
.4a4d	91 2a		sta ($2a),y			sta 	(temp0),y
.4a4f	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4a51	91 3b		sta ($3b),y			sta 	(hashList),y
.4a53	88		dey				dey
.4a54	a5 2a		lda $2a				lda 	temp0
.4a56	91 3b		sta ($3b),y			sta 	(hashList),y
.4a58	ad 1a 0e	lda $0e1a			lda 	varType 					; type in A
.4a5b	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4a5d	20 6e 4a	jsr $4a6e			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4a60	68		pla				pla
.4a61	a8		tay				tay
.4a62	60		rts				rts
.4a63					_CVMemory:
.4a63	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4a65	20 18 15	jsr $1518		jsr	errorHandler
>4a68	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4a6a	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4a6c	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4a6e					ZeroTemp0Y:
.4a6e	4a		lsr a				lsr 	a 							; bit 0 in carry
.4a6f	0a		asl a				asl 	a
.4a70	b0 19		bcs $4a8b			bcs 	_ZTExit 					; we don't initialise arrays.
.4a72	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4a74	f0 16		beq $4a8c			beq 	_ZTWriteNullString 			; write "" string
.4a76	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4a78	f0 22		beq $4a9c			beq 	_ZTWriteFloat
.4a7a	98		tya				tya
.4a7b	48		pha				pha
.4a7c	a9 00		lda #$00			lda 	#0
.4a7e	91 2a		sta ($2a),y			sta 	(temp0),y
.4a80	c8		iny				iny
.4a81	91 2a		sta ($2a),y			sta 	(temp0),y
.4a83	c8		iny				iny
.4a84	91 2a		sta ($2a),y			sta 	(temp0),y
.4a86	c8		iny				iny
.4a87	91 2a		sta ($2a),y			sta 	(temp0),y
.4a89	68		pla				pla
.4a8a	a8		tay				tay
.4a8b					_ZTExit:
.4a8b	60		rts				rts
.4a8c					_ZTWriteNullString:
.4a8c	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4a8e	8d ce 0a	sta $0ace			sta 	NullString
.4a91	a9 ce		lda #$ce			lda 	#NullString & $FF
.4a93	91 2a		sta ($2a),y			sta 	(temp0),y
.4a95	a9 0a		lda #$0a			lda 	#NullString >> 8
.4a97	c8		iny				iny
.4a98	91 2a		sta ($2a),y			sta 	(temp0),y
.4a9a	88		dey				dey
.4a9b	60		rts				rts
.4a9c					_ZTWriteFloat:
.4a9c	8a		txa				txa
.4a9d	48		pha				pha
.4a9e	a2 20		ldx #$20		ldx	#32
.4aa0	20 90 23	jsr $2390		jsr	floatingpointHandler
.4aa3	68		pla				pla
.4aa4	aa		tax				tax
.4aa5	60		rts				rts
.4aa6					CloneVariableName:
.4aa6	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4aa8	b1 2a		lda ($2a),y			lda 	(temp0),y
.4aaa	85 2e		sta $2e				sta 	temp2
.4aac	c8		iny				iny
.4aad	b1 2a		lda ($2a),y			lda 	(temp0),y
.4aaf	85 2f		sta $2f				sta 	temp2+1
.4ab1	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4ab3	91 2a		sta ($2a),y			sta 	(temp0),y
.4ab5	88		dey				dey
.4ab6	a5 35		lda $35				lda 	lowMemory
.4ab8	91 2a		sta ($2a),y			sta 	(temp0),y
.4aba	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4abc					_CVNCopy:
.4abc	b1 2e		lda ($2e),y			lda		(temp2),y
.4abe	91 35		sta ($35),y			sta 	(lowMemory),y
.4ac0	c8		iny				iny
.4ac1	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4ac3	90 f7		bcc $4abc			bcc 	_CVNCopy
.4ac5	98		tya				tya 								; add Y to low memory
.4ac6	18		clc				clc
.4ac7	65 35		adc $35				adc 	lowMemory
.4ac9	85 35		sta $35				sta 	lowMemory
.4acb	90 02		bcc $4acf			bcc 	_CVNNoCarry
.4acd	e6 36		inc $36				inc 	lowMemory+1
.4acf					_CVNNoCarry:
.4acf	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4ad0					FindVariable:
.4ad0	98		tya				tya
.4ad1	48		pha				pha
.4ad2	98		tya				tya 								; point temp2 to the actual name
.4ad3	18		clc				clc 								; in memory of the variable being created
.4ad4	65 28		adc $28				adc 	codePtr
.4ad6	85 2e		sta $2e				sta 	temp2
.4ad8	a5 29		lda $29				lda 	codePtr+1
.4ada	69 00		adc #$00			adc 	#0
.4adc	85 2f		sta $2f				sta 	temp2+1
.4ade	a0 00		ldy #$00			ldy 	#0
.4ae0	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4ae2	85 2a		sta $2a				sta 	temp0
.4ae4	a5 3c		lda $3c				lda 	hashList+1
.4ae6	85 2b		sta $2b				sta 	temp0+1
.4ae8	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4aea	b1 2a		lda ($2a),y			lda 	(temp0),y
.4aec	f0 2c		beq $4b1a			beq 	_FVFail
.4aee	aa		tax				tax
.4aef	88		dey				dey		 							; get LSB
.4af0	b1 2a		lda ($2a),y			lda 	(temp0),y
.4af2	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4af4	86 2b		stx $2b				stx 	temp0+1
.4af6	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4af8	b1 2a		lda ($2a),y			lda 	(temp0),y
.4afa	cd 19 0e	cmp $0e19			cmp 	varHash
.4afd	d0 e9		bne $4ae8			bne 	_FVNext 					; if not, no point in checking the name.
.4aff	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4b00	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b02	85 2d		sta $2d				sta 	temp1+1
.4b04	88		dey				dey
.4b05	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b07	85 2c		sta $2c				sta 	temp1
.4b09	a0 00		ldy #$00			ldy 	#0
.4b0b					_FVCheck:
.4b0b	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4b0d	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4b0f	d0 d7		bne $4ae8			bne 	_FVNext		 				; fail if different.
.4b11	c8		iny				iny
.4b12	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4b14	90 f5		bcc $4b0b			bcc 	_FVCheck
.4b16	68		pla				pla
.4b17	a8		tay				tay
.4b18	38		sec				sec
.4b19	60		rts				rts
.4b1a					_FVFail:
.4b1a	68		pla				pla
.4b1b	a8		tay				tay
.4b1c	18		clc				clc
.4b1d	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4b1e					HashTableReset:
.4b1e	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4b20	a9 00		lda #$00			lda 	#0
.4b22					_HTRClear:
.4b22	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4b25	ca		dex				dex
.4b26	d0 fa		bne $4b22			bne 	_HTRClear
.4b28	60		rts				rts

;******  Return to file: variable/variable.asm

.4b29					variableHandler:
.4b29	7c 2c 4b	jmp ($4b2c,x)			jmp 	(variableVectors,x)
.4b2c					variableVectors:
>4b2c	34 4b					.word _DummyControlHandler ; index 0
>4b2e	60 49					.word AccessVariable       ; index 2
>4b30	f0 47					.word CreateArray          ; index 4
>4b32	1e 4b					.word HashTableReset       ; index 6
.4b34					_DummyControlHandler:
.4b34	60		rts			rts

;******  Return to file: basic.asm

.4b35					section_end_variable:
.4b35					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e1c					endStorage:
>4b35							.align 	256
.4c00					programMemory:
>4bff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4c00					section_end_footer:

;******  End of listing
