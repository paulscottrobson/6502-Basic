
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Tue Mar  2 17:08:39 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
.000b					highMemory:
>000b							.fill 	2
.000d					lowMemory:
>000d							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_BadIndex = 18 ; Bad NEXT index
=19					ErrorID_Struct = 19 ; Structures nested wrong
=20					ErrorID_NoAuto = 20 ; Cannot create variable
=21					ErrorID_RetStack = 21 ; Return stack out of space.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 1f 12	jmp $121f			jmp 	Command_Run
.2194					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	0a 0a 00 11 30 0f 3a 8d			.byte 10,10,0,17,48,15,58,141,80,128,12,11,0,1,48,20,9,58,141,76,118,128,11,12,0,11,48,4,58,141,66,96,128,11,13,0,6,60,141,133,2,77,72,128,17,14,0,12,48,19,60,141,133,6,70,79,84,73,74,83,128,14,15,0,8,60,141,133,5,79,82,80,75,69,128,17,16,0,13,48,1,2,17,60,141,133,4,81,76,69,77,128,9,17,0,8,58,141,77,74,128,15,18,0,13,48,10,60,141,133,4,83,82,65,71,128,18,19,0,5,48,15,60,141,133,7,73,66,79,68,72,85,77,128,9,20,0,2,58,141,77,105,128,13,21,0,6,48,16,13,17,58,141,72,75,128,12,22,0,13,48,1,2,17,58,141,88,128,11,23,0,13,48,10,58,141,65,112,128,11,24,0,2,60,141,133,2,81,70,128,11,25,0,17,48,15,58,141,68,124,128,13,26,0,6,48,16,13,17,58,141,66,107,128,15,27,0,6,48,6,60,141,133,4,66,84,84,72,128,12,28,0,16,48,1,5,58,141,71,95,128,13,29,0,1,48,9,6,4,58,141,77,70,128,14,30,0,4,48,19,21,16,19,60,141,133,0,128,13,31,0,11,48,1,18,2,58,141,71,111,128,19,32,0,15,48,16,8,60,141,133,7,85,71,81,77,81,82,74,128,11,33,0,12,48,19,58,141,72,65,128,13,34,0,15,48,2,21,12,58,141,79,82,128,14,35,0,1,48,4,18,4,6,58,141,66,115,128,15,36,0,2,60,141,133,6,70,75,73,65,85,67,128,16,37,0,14,60,141,133,7,79,77,82,81,67,73,79,128,12,38,0,12,48,19,60,141,133,1,85,128,12,39,0,9,48,11,60,141,133,1,68,128,9,40,0,6,58,141,68,125,128,9,41,0,9,58,141,77,118,128,14,42,0,15,48,16,8,60,141,133,2,77,67,128,9,43,0,9,58,141,78,99,128,15,44,0,16,60,141,133,6,83,68,71,75,69,77,128,9,45,0,1,60,141,133,0,128,15,46,0,17,48,10,60,141,133,4,85,66,74,80,128,13,47,0,2,60,141,133,4,79,72,67,65,128,14,48,0,18,48,20,19,6,17,58,141,75,92,128,9,49,0,9,60,141,133,0,128,13,50,0,11,48,1,18,2,58,141,67,81,128,13,51,0,13,48,1,2,17,58,141,69,84,128,12,52,0,6,48,2,2,58,141,71,78,128,13,53,0,13,48,1,2,17,58,141,70,85,128,9,54,0,9,58,141,71,89,128,11,55,0,6,60,141,133,2,67,84,128,14,56,0,9,48,11,60,141,133,3,77,73,83,128,16,57,0,6,60,141,133,7,76,69,83,76,74,70,66,128,19,58,0,10,48,15,3,9,20,60,141,133,5,69,67,79,85,77,128,13,59,0,13,48,1,2,17,58,141,68,114,128,20,60,0,13,48,1,2,17,60,141,133,7,84,76,84,84,76,69,85,128,16,61,0,11,48,1,18,2,60,141,133,3,69,79,79,128,19,62,0,6,48,2,2,60,141,133,7,76,83,78,77,72,67,75,128,15,63,0,15,48,16,8,60,141,133,3,72,66,77,128,14,64,0,1,48,4,18,4,6,58,141,71,72,128,12,65,0,16,48,1,5,58,141,71,122,128,14,66,0,11,48,13,10,12,21,58,141,78,104,128,16,67,0,13,48,10,60,141,133,5,85,74,66,78,67,128,18,68,0,15,48,2,21,12,60,141,133,5,76,65,66,85,71,128,14,69,0,11,48,13,10,12,21,58,141,74,121,128,13,70,0,11,48,1,18,2,58,141,70,93,128,11,71,0,6,48,6,58,141,75,126,128,14,72,0,5,48,15,60,141,133,3,85,81,73,128,9,73,0,7,58,141,73,77,128,19,74,0,13,48,1,2,17,60,141,133,6,80,75,67,79,75,74,128,13,75,0,8,48,15,20,14,58,141,74,109,128,16,76,0,18,48,6,7,2,60,141,133,3,65,73,83,128,11,77,0,12,48,19,58,141,77,72,128,9,78,0,6,58,141,67,113,128,9,79,0,9,58,141,67,75,128,11,80,0,7,60,141,133,2,79,72,128,14,81,0,16,60,141,133,5,68,82,78,66,85,128,17,82,0,12,48,19,60,141,133,6,68,69,79,75,67,67,128,19,83,0,18,48,20,19,6,17,60,141,133,5,83,77,67,66,80,128,13,84,0,6,48,16,13,17,58,141,72,107,128,11,85,0,17,48,15,58,141,78,87,128,13,86,0,9,48,11,60,141,133,2,79,69,128,18,87,0,8,48,21,13,21,60,141,133,5,72,70,79,75,65,128,15,88,0,12,48,19,60,141,133,4,73,81,82,65,128,11,89,0,6,48,6,58,141,68,108,128,12,90,0,16,48,1,5,58,141,76,96,128,21,91,0,11,48,18,1,10,2,60,141,133,7,81,83,78,77,80,78,75,128,13,92,0,11,48,1,18,2,60,141,133,0,128,13,93,0,15,48,2,21,12,58,141,77,77,128,9,94,0,5,58,141,65,82,128,20,95,0,1,48,9,6,4,60,141,133,7,76,74,84,81,76,70,82,128,13,96,0,13,48,1,2,17,58,141,65,80,128,13,97,0,13,48,1,2,17,58,141,75,67,128,9,98,0,7,58,141,65,73,128,9,99,0,8,58,141,72,109,128,15,100,0,17,48,15,60,141,133,4,69,77,82,65,128,20,101,0,12,48,17,4,13,60,141,133,7,75,82,66,79,81,85,69,128,12,102,0,1,48,20,9,58,141,69,102,128,13,103,0,18,48,6,7,2,58,141,65,104,128,12,104,0,15,48,16,8,60,141,133,0,128,13,105,0,15,48,2,21,12,58,141,75,126,128,14,106,0,1,48,4,18,4,6,58,141,71,95,128,14,107,0,1,48,4,18,4,6,58,141,72,79,128,14,108,0,11,48,18,1,10,2,58,141,74,105,128,13,109,0,12,48,17,4,13,58,141,76,85,128,19,110,0,11,48,18,1,10,2,60,141,133,5,76,76,75,74,81,128,12,111,0,2,48,12,11,58,141,76,96,128,16,112,0,8,48,15,20,14,60,141,133,3,69,74,83,128,18,113,0,9,48,11,60,141,133,7,69,68,76,67,67,66,75,128,15,114,0,18,48,20,19,6,17,60,141,133,1,70,128,12,115,0,16,48,1,5,58,141,78,113,128,16,116,0,8,48,21,13,21,60,141,133,3,85,84,73,128,14,117,0,10,48,15,3,9,20,58,141,76,77,128,12,118,0,6,48,2,2,58,141,74,65,128,16,119,0,1,60,141,133,7,71,65,66,65,65,85,74,128,11,120,0,12,48,19,58,141,65,104,128,11,121,0,12,48,19,58,141,66,66,128,9,122,0,5,58,141,70,124,128,19,123,0,1,48,9,6,4,60,141,133,6,80,82,74,73,70,73,128,11,124,0,11,48,4,58,141,66,122,128,13,125,0,1,48,4,18,4,6,58,141,81,128,14,126,0,1,48,4,18,4,6,58,141,75,71,128,9,127,0,8,58,141,69,75,128,11,128,0,11,48,4,58,141,79,85,128,14,129,0,12,48,19,60,141,133,3,71,76,77,128,13,130,0,15,48,2,21,12,60,141,133,0,128,15,131,0,8,60,141,133,6,77,69,69,72,75,84,128,15,132,0,6,48,2,2,60,141,133,3,85,76,71,128,14,133,0,10,48,15,3,9,20,58,141,67,114,128,18,134,0,15,48,2,21,12,60,141,133,5,80,69,69,66,79,128,17,135,0,13,48,10,60,141,133,6,71,80,79,70,79,76,128,14,136,0,15,48,16,8,60,141,133,2,67,85,128,20,137,0,1,48,9,6,4,60,141,133,7,75,65,73,85,66,77,68,128,15,138,0,6,48,16,13,17,60,141,133,2,67,74,128,13,139,0,11,48,13,10,12,21,58,141,70,128,17,140,0,11,48,18,1,10,2,60,141,133,3,79,84,76,128,11,141,0,5,48,15,58,141,75,103,128,14,142,0,11,48,18,1,10,2,58,141,69,69,128,11,143,0,5,48,15,58,141,72,86,128,9,144,0,14,58,141,71,73,128,14,145,0,18,48,6,7,2,60,141,133,1,80,128,21,146,0,4,48,19,21,16,19,60,141,133,7,78,70,77,81,84,77,78,128,11,147,0,17,48,15,58,141,68,109,128,16,148,0,8,60,141,133,7,84,70,82,85,73,82,77,128,13,149,0,13,48,1,2,17,58,141,67,76,128,20,150,0,11,48,13,10,12,21,60,141,133,6,73,70,71,85,76,77,128,17,151,0,11,48,18,1,10,2,60,141,133,3,82,68,70,128,16,152,0,1,48,20,9,60,141,133,4,72,65,83,65,128,11,153,0,17,48,10,58,141,77,92,128,13,154,0,12,48,17,4,13,60,141,133,0,128,9,155,0,8,60,141,133,0,128,15,156,0,1,60,141,133,6,85,78,69,85,70,67,128,12,157,0,15,48,16,8,60,141,133,0,128,12,158,0,13,60,141,133,3,83,77,71,128,13,159,0,18,48,6,7,2,58,141,78,105,128,17,160,0,15,48,2,21,12,60,141,133,4,85,84,82,85,128,13,161,0,15,48,2,21,12,58,141,74,98,128,15,162,0,1,60,141,133,6,78,84,78,75,72,81,128,13,163,0,18,48,6,7,2,58,141,68,96,128,9,164,0,16,58,141,69,78,128,13,165,0,18,48,6,7,2,58,141,72,79,128,14,166,0,4,48,19,21,16,19,58,141,75,109,128,15,167,0,9,48,11,60,141,133,4,67,84,65,81,128,13,168,0,1,48,9,6,4,58,141,72,117,128,16,169,0,13,48,10,60,141,133,5,68,71,68,81,83,128,9,170,0,14,58,141,74,106,128,9,171,0,2,58,141,71,75,128,12,172,0,16,60,141,133,3,80,71,84,128,9,173,0,6,60,141,133,0,128,15,174,0,10,48,15,3,9,20,60,141,133,1,80,128,12,175,0,15,48,16,8,58,141,66,110,128,12,176,0,1,48,20,9,58,141,76,97,128,18,177,0,12,48,17,4,13,60,141,133,5,66,69,73,66,75,128,9,178,0,5,58,141,76,70,128,13,179,0,12,48,17,4,13,58,141,69,76,128,12,180,0,6,48,2,2,58,141,70,110,128,11,181,0,1,48,20,9,58,141,112,128,11,182,0,17,48,10,60,141,133,0,128,18,183,0,8,48,21,13,21,60,141,133,5,75,68,72,82,72,128,9,184,0,7,58,141,78,120,128,13,185,0,11,48,1,18,2,58,141,77,100,128,9,186,0,7,58,141,74,111,128,12,187,0,16,48,1,5,58,141,73,121,128,12,188,0,11,48,4,60,141,133,1,78,128,16,189,0,18,48,20,19,6,17,60,141,133,2,74,69,128,9,190,0,6,58,141,67,72,128,11,191,0,12,48,19,58,141,75,75,128,9,192,0,1,58,141,67,115,128,21,193,0,11,48,18,1,10,2,60,141,133,7,71,76,78,79,70,81,70,128,21,194,0,1,48,4,18,4,6,60,141,133,7,83,70,77,67,75,73,66,128,13,195,0,8,48,21,13,21,58,141,78,106,128,16,196,0,11,48,1,18,2,60,141,133,3,83,69,78,128,14,197,0,8,60,141,133,5,75,65,80,65,81,128,9,198,0,2,58,141,75,119,128,13,199,0,18,48,6,7,2,58,141,74,78,128,17,200,0,17,48,10,60,141,133,6,82,82,79,78,75,80,128,19,201,0,1,48,4,18,4,6,60,141,133,5,74,80,84,74,75,128,19,202,0,12,48,17,4,13,60,141,133,6,70,83,72,76,74,67,128,16,203,0,15,48,16,8,60,141,133,4,66,81,66,79,128,13,204,0,9,48,11,60,141,133,2,81,72,128,16,205,0,5,60,141,133,7,77,78,75,74,84,70,78,128,11,206,0,6,48,6,58,141,71,80,128,9,207,0,5,58,141,78,101,128,9,208,0,16,60,141,133,0,128,14,209,0,11,48,13,10,12,21,58,141,65,70,128,13,210,0,16,60,141,133,4,73,69,70,71,128,11,211,0,11,48,4,58,141,71,97,128,19,212,0,11,48,18,1,10,2,60,141,133,5,84,81,68,73,83,128,19,213,0,11,48,18,1,10,2,60,141,133,5,80,65,75,65,72,128,9,214,0,5,58,141,69,119,128,17,215,0,13,48,1,2,17,60,141,133,4,65,84,78,77,128,14,216,0,18,48,20,19,6,17,58,141,74,87,128,9,217,0,7,58,141,66,121,128,18,218,0,11,48,13,10,12,21,60,141,133,4,71,80,84,74,128,9,219,0,9,58,141,74,88,128,18,220,0,11,48,1,18,2,60,141,133,5,78,85,76,81,70,128,14,221,0,18,48,20,19,6,17,58,141,65,108,128,16,222,0,16,48,1,5,60,141,133,4,78,77,85,65,128,15,223,0,15,48,16,8,60,141,133,3,85,65,84,128,13,224,0,13,48,1,2,17,60,141,133,0,128,15,225,0,11,48,13,10,12,21,60,141,133,1,78,128,9,226,0,13,58,141,72,127,128,14,227,0,1,48,20,9,60,141,133,2,81,73,128,20,228,0,11,48,18,1,10,2,60,141,133,6,81,68,79,67,79,65,128,13,229,0,12,48,17,4,13,58,141,67,101,128,17,230,0,18,48,20,19,6,17,60,141,133,3,68,79,68,128,11,231,0,11,48,4,58,141,78,74,128,13,232,0,12,48,17,4,13,58,141,77,126,128,13,233,0,12,48,17,4,13,58,141,70,74,128,9,234,0,2,60,141,133,0,128,13,235,0,8,48,21,13,21,58,141,66,82,128,11,236,0,9,48,11,58,141,67,126,128,9,237,0,16,58,141,67,120,128,14,238,0,6,48,16,13,17,60,141,133,1,69,128,14,239,0,11,48,13,10,12,21,58,141,71,126,128,11,240,0,17,48,15,58,141,77,125,128,9,241,0,8,60,141,133,0,128,17,242,0,9,48,11,60,141,133,6,84,79,82,71,67,82,128,16,243,0,6,48,6,60,141,133,5,72,72,75,74,79,128,15,244,0,6,48,16,13,17,60,141,133,2,77,80,128,13,245,0,4,48,19,21,16,19,58,141,88,128,12,246,0,9,48,11,60,141,133,1,81,128,13,247,0,15,48,2,21,12,58,141,72,90,128,13,248,0,11,48,13,10,12,21,58,141,99,128,10,249,0,12,48,19,58,141,79,128,12,250,0,1,48,20,9,60,141,133,0,128,14,251,0,11,48,13,10,12,21,58,141,75,112,128,15,252,0,11,48,1,18,2,60,141,133,2,71,67,128,13,253,0,15,48,2,21,12,58,141,66,105,128,13,254,0,18,48,6,7,2,58,141,78,100,128,19,255,0,15,48,2,21,12,60,141,133,6,83,76,66,75,77,84,128,14,0,1,1,48,4,18,4,6,58,141,73,67,128,14,1,1,11,48,18,1,10,2,58,141,77,102,128,13,2,1,9,48,11,60,141,133,2,65,77,128,13,3,1,12,48,17,4,13,58,141,71,127,128,13,4,1,15,48,2,21,12,58,141,66,113,128,12,5,1,14,60,141,133,3,66,80,74,128,16,6,1,11,48,4,60,141,133,5,71,69,70,84,85,128,12,7,1,16,48,1,5,58,141,67,108,128,9,8,1,14,58,141,65,112,128,18,9,1,15,48,16,8,60,141,133,6,82,68,67,85,70,77,128,16,10,1,6,60,141,133,7,65,81,71,68,69,85,78,128,12,11,1,15,48,16,8,58,141,66,114,128,12,12,1,6,48,2,2,60,141,133,0,128,9,13,1,7,58,141,73,92,128,13,14,1,18,48,6,7,2,58,141,69,77,128,17,15,1,11,48,4,60,141,133,6,67,81,73,80,82,65,128,17,16,1,13,48,10,60,141,133,6,83,80,67,83,65,82,128,11,17,1,8,60,141,133,2,74,76,128,15,18,1,7,60,141,133,6,84,84,83,80,83,70,128,13,19,1,12,48,17,4,13,58,141,70,81,128,14,20,1,2,48,12,11,60,141,133,2,67,68,128,12,21,1,16,48,1,5,58,141,66,114,128,11,22,1,17,48,15,60,141,133,0,128,9,23,1,14,58,141,78,109,128,9,24,1,8,58,141,73,118,128,11,25,1,14,60,141,133,2,85,67,128,10,26,1,17,48,10,58,141,108,128,14,27,1,10,48,15,3,9,20,60,141,133,0,128,12,28,1,1,48,20,9,58,141,75,82,128,13,29,1,6,48,16,13,17,58,141,76,94,128,16,30,1,9,48,11,60,141,133,5,79,83,68,76,79,128,13,31,1,1,48,9,6,4,58,141,66,70,128,16,32,1,13,60,141,133,7,79,77,81,81,76,72,80,128,9,33,1,9,58,141,68,108,128,18,34,1,17,48,10,60,141,133,7,67,66,77,65,69,72,72,128,20,35,1,10,48,15,3,9,20,60,141,133,6,69,68,84,71,68,75,128,17,36,1,11,48,4,60,141,133,6,68,77,85,82,73,66,128,13,37,1,11,48,1,18,2,58,141,73,84,128,13,38,1,8,48,21,13,21,58,141,68,93,128,9,39,1,7,58,141,72,94,128,11,40,1,11,48,4,60,141,133,0,128,12,41,1,2,48,12,11,58,141,66,76,128,14,42,1,4,48,19,21,16,19,58,141,67,69,128,14,43,1,9,60,141,133,5,79,71,74,67,69,128,20,44,1,12,48,17,4,13,60,141,133,7,66,80,83,67,81,85,68,128,13,45,1,8,48,15,20,14,58,141,68,66,128,9,46,1,2,58,141,67,99,128,11,47,1,7,60,141,133,2,71,70,128,11,48,1,9,48,11,58,141,73,110,128,14,49,1,1,48,4,18,4,6,58,141,73,110,128,9,50,1,1,60,141,133,0,128,11,51,1,5,48,15,58,141,73,126,128,13,52,1,1,60,141,133,4,79,85,72,72,128,12,53,1,11,48,1,18,2,58,141,73,128,16,54,1,11,48,1,18,2,60,141,133,3,68,68,74,128,14,55,1,4,48,19,21,16,19,60,141,133,0,128,17,56,1,17,48,15,60,141,133,6,80,79,78,79,77,80,128,13,57,1,15,48,2,21,12,58,141,78,113,128,9,58,1,8,58,141,73,66,128,9,59,1,13,58,141,76,108,128,11,60,1,6,48,6,58,141,71,75,128,11,61,1,9,48,11,58,141,68,124,128,14,62,1,15,48,2,21,12,60,141,133,1,84,128,13,63,1,8,48,21,13,21,58,141,69,101,128,15,64,1,1,48,4,18,4,6,60,141,133,1,81,128,15,65,1,1,48,4,18,4,6,60,141,133,1,83,128,9,66,1,14,58,141,75,85,128,14,67,1,4,48,19,21,16,19,58,141,79,76,128,14,68,1,1,48,4,18,4,6,58,141,71,111,128,11,69,1,17,48,15,58,141,65,66,128,11,70,1,17,48,15,58,141,75,103,128,9,71,1,5,58,141,75,74,128,15,72,1,1,48,4,18,4,6,60,141,133,1,71,128,13,73,1,11,48,13,10,12,21,58,141,123,128,14,74,1,14,60,141,133,5,84,69,79,84,71,128,12,75,1,1,48,20,9,58,141,78,108,128,14,76,1,11,48,18,1,10,2,58,141,70,86,128,14,77,1,13,60,141,133,5,69,78,85,68,81,128,12,78,1,8,60,141,133,3,69,75,74,128,13,79,1,1,48,9,6,4,58,141,73,111,128,13,80,1,8,48,21,13,21,58,141,74,96,128,14,81,1,5,60,141,133,5,81,85,69,83,75,128,13,82,1,2,60,141,133,4,66,66,66,81,128,9,83,1,9,58,141,73,124,128,9,84,1,9,58,141,73,117,128,12,85,1,16,60,141,133,3,66,71,77,128,11,86,1,17,48,15,58,141,78,69,128,18,87,1,17,48,10,60,141,133,7,83,69,73,72,82,80,85,128,20,88,1,1,48,9,6,4,60,141,133,7,73,78,76,68,72,68,76,128,14,89,1,1,48,20,9,60,141,133,2,83,77,128,11,90,1,13,60,141,133,2,75,76,128,13,91,1,12,48,19,60,141,133,2,74,84,128,14,92,1,4,48,19,21,16,19,58,141,75,75,128,13,93,1,8,48,15,20,14,58,141,78,109,128,18,94,1,15,48,2,21,12,60,141,133,5,82,65,69,65,74,128,9,95,1,9,60,141,133,0,128,14,96,1,18,48,20,19,6,17,58,141,65,95,128,20,97,1,4,48,19,21,16,19,60,141,133,6,80,82,73,83,85,68,128,10,98,1,5,60,141,133,1,71,128,15,99,1,1,48,20,9,60,141,133,3,72,67,76,128,9,100,1,9,58,141,75,105,128,17,101,1,17,48,10,60,141,133,6,79,74,80,74,72,82,128,19,102,1,8,48,21,13,21,60,141,133,6,79,75,78,69,74,82,128,9,103,1,6,58,141,67,77,128,12,104,1,17,48,15,60,141,133,1,69,128,13,105,1,13,48,1,2,17,58,141,71,76,128,12,106,1,5,60,141,133,3,70,76,70,128,13,107,1,9,60,141,133,4,85,67,82,78,128,13,108,1,18,48,6,7,2,58,141,73,83,128,14,109,1,11,48,13,10,12,21,58,141,78,96,128,11,110,1,12,48,19,58,141,70,81,128,13,111,1,11,48,1,18,2,58,141,69,120,128,10,112,1,14,60,141,133,1,81,128,14,113,1,18,48,20,19,6,17,58,141,68,64,128,11,114,1,17,48,15,58,141,75,75,128,15,115,1,4,48,19,21,16,19,60,141,133,1,72,128,11,116,1,13,48,10,58,141,77,68,128,19,117,1,18,48,20,19,6,17,60,141,133,5,66,65,85,81,65,128,15,118,1,10,48,15,3,9,20,60,141,133,1,67,128,14,119,1,10,48,15,3,9,20,58,141,68,74,128,12,120,1,16,48,1,5,58,141,74,113,128,16,121,1,16,48,1,5,60,141,133,4,74,73,74,82,128,17,122,1,13,48,1,2,17,60,141,133,4,71,77,79,69,128,9,123,1,14,58,141,78,112,128,20,124,1,8,48,15,20,14,60,141,133,7,81,74,74,67,66,81,81,128,9,125,1,7,58,141,78,114,128,14,126,1,11,48,18,1,10,2,58,141,75,83,128,17,127,1,11,48,13,10,12,21,60,141,133,3,77,79,71,128,10,128,1,5,60,141,133,1,65,128,11,129,1,17,48,15,58,141,69,73,128,12,130,1,11,48,1,18,2,58,141,83,128,14,131,1,1,60,141,133,5,74,68,78,79,74,128,14,132,1,4,48,19,21,16,19,58,141,70,69,128,9,133,1,8,58,141,65,125,128,13,134,1,8,48,21,13,21,58,141,72,120,128,13,135,1,17,48,15,60,141,133,2,67,77,128,9,136,1,9,58,141,70,95,128,20,137,1,1,48,9,6,4,60,141,133,7,68,70,70,67,80,71,65,128,13,138,1,15,48,2,21,12,58,141,72,97,128,13,139,1,18,48,6,7,2,58,141,72,78,128,13,140,1,2,60,141,133,4,67,77,73,79,128,13,141,1,16,48,1,5,60,141,133,1,66,128,11,142,1,17,48,10,58,141,78,83,128,14,143,1,11,48,18,1,10,2,58,141,66,74,128,11,144,1,6,48,6,58,141,69,76,128,11,145,1,9,48,11,60,141,133,0,128,9,146,1,1,58,141,71,83,128,14,147,1,1,48,4,18,4,6,58,141,68,106,128,9,148,1,14,58,141,72,103,128,9,149,1,5,58,141,65,80,128,13,150,1,18,48,6,7,2,58,141,76,96,128,11,151,1,11,48,4,58,141,71,124,128,11,152,1,13,48,10,60,141,133,0,128,13,153,1,8,48,15,20,14,60,141,133,0,128,17,154,1,6,48,2,2,60,141,133,5,82,76,73,76,73,128,14,155,1,11,48,13,10,12,21,58,141,66,74,128,12,156,1,15,48,16,8,58,141,70,75,128,14,157,1,8,48,15,20,14,60,141,133,1,77,128,11,158,1,17,48,15,58,141,76,124,128,12,159,1,6,48,2,2,58,141,67,90,128,13,160,1,18,48,6,7,2,58,141,70,78,128,12,161,1,1,48,20,9,58,141,71,104,128,14,162,1,17,48,15,60,141,133,3,85,65,69,128,18,163,1,9,48,11,60,141,133,7,80,73,80,69,84,72,70,128,16,164,1,13,60,141,133,7,82,76,80,85,84,66,69,128,12,165,1,15,48,16,8,60,141,133,0,128,17,166,1,13,48,1,2,17,60,141,133,4,83,68,73,78,128,14,167,1,11,48,13,10,12,21,58,141,77,104,128,14,168,1,10,48,15,3,9,20,60,141,133,0,128,15,169,1,12,48,19,60,141,133,4,65,77,80,71,128,14,170,1,11,48,18,1,10,2,58,141,76,121,128,11,171,1,5,48,15,58,141,65,77,128,11,172,1,6,48,2,2,58,141,109,128,13,173,1,13,48,1,2,17,58,141,77,110,128,13,174,1,14,60,141,133,4,78,77,70,82,128,15,175,1,10,48,15,3,9,20,60,141,133,1,81,128,17,176,1,1,48,9,6,4,60,141,133,4,69,70,66,81,128,13,177,1,1,48,9,6,4,60,141,133,0,128,13,178,1,18,48,6,7,2,58,141,66,97,128,9,179,1,1,58,141,75,121,128,14,180,1,18,48,6,7,2,60,141,133,1,68,128,16,181,1,1,60,141,133,7,67,71,73,75,65,72,78,128,14,182,1,6,48,6,60,141,133,3,76,77,73,128,12,183,1,6,48,2,2,58,141,68,94,128,11,184,1,11,48,4,58,141,71,64,128,11,185,1,1,60,141,133,2,66,71,128,13,186,1,18,48,6,7,2,58,141,77,126,128,12,187,1,12,48,19,60,141,133,1,75,128,15,188,1,6,60,141,133,6,74,83,79,74,65,83,128,14,189,1,1,48,20,9,60,141,133,2,70,76,128,13,190,1,15,48,2,21,12,58,141,76,95,128,16,191,1,17,48,15,60,141,133,5,68,83,80,70,85,128,15,192,1,16,48,1,5,60,141,133,3,75,73,67,128,8,193,1,7,58,141,124,128,19,194,1,18,48,20,19,6,17,60,141,133,5,76,81,71,81,83,128,12,195,1,2,48,12,11,58,141,71,100,128,11,196,1,5,48,15,58,141,78,97,128,15,197,1,9,48,11,60,141,133,4,76,82,65,67,128,12,198,1,6,48,6,60,141,133,1,84,128,12,199,1,1,60,141,133,3,79,78,68,128,19,200,1,1,48,20,9,60,141,133,7,82,83,67,77,72,72,66,128,14,201,1,6,60,141,133,5,82,73,68,77,70,128,17,202,1,10,48,15,3,9,20,60,141,133,3,66,69,67,128,13,203,1,11,48,1,18,2,58,141,74,73,128,9,204,1,5,60,141,133,0,128,13,205,1,1,48,9,6,4,58,141,67,125,128,13,206,1,11,48,1,18,2,60,141,133,0,128,19,207,1,6,48,16,13,17,60,141,133,6,73,66,69,70,85,76,128,13,208,1,13,48,1,2,17,60,141,133,0,128,9,209,1,9,58,141,76,84,128,13,210,1,12,48,17,4,13,58,141,77,124,128,20,211,1,11,48,13,10,12,21,60,141,133,6,84,71,83,77,69,71,128,10,212,1,2,60,141,133,1,66,128,12,213,1,15,48,16,8,58,141,76,75,128,13,214,1,6,48,16,13,17,58,141,65,68,128,12,215,1,1,48,20,9,58,141,66,69,128,13,216,1,15,48,2,21,12,60,141,133,0,128,14,217,1,11,48,18,1,10,2,58,141,75,110,128,14,218,1,16,60,141,133,5,73,82,81,71,84,128,20,219,1,4,48,19,21,16,19,60,141,133,6,66,84,80,70,75,80,128,13,220,1,15,48,2,21,12,58,141,75,97,128,18,221,1,11,48,4,60,141,133,7,78,85,75,75,70,78,69,128,9,222,1,16,58,141,72,79,128,19,223,1,1,48,9,6,4,60,141,133,6,72,84,85,82,77,68,128,14,224,1,11,48,4,60,141,133,3,76,80,72,128,12,225,1,6,60,141,133,3,74,65,83,128,15,226,1,16,60,141,133,6,73,84,71,78,78,80,128,14,227,1,11,48,13,10,12,21,58,141,78,70,128,15,228,1,1,48,4,18,4,6,60,141,133,1,72,128,9,229,1,8,58,141,65,77,128,16,230,1,18,48,20,19,6,17,60,141,133,2,74,77,128,11,231,1,13,48,10,58,141,79,85,128,15,232,1,17,48,15,60,141,133,4,66,74,71,76,128,14,233,1,15,48,16,8,60,141,133,2,70,79,128,13,234,1,11,48,1,18,2,58,141,73,67,128,19,235,1,6,48,16,13,17,60,141,133,6,66,66,73,81,76,66,128,19,236,1,12,48,17,4,13,60,141,133,6,82,83,80,74,79,76,128,16,237,1,11,48,1,18,2,60,141,133,3,84,83,76,128,9,238,1,13,58,141,65,127,128,12,239,1,12,48,19,60,141,133,1,75,128,13,240,1,13,48,1,2,17,58,141,77,90,128,13,241,1,6,60,141,133,4,73,68,68,74,128,14,242,1,1,48,20,9,60,141,133,2,69,70,128,14,243,1,13,48,1,2,17,60,141,133,1,75,128,17,244,1,13,48,1,2,17,60,141,133,4,68,70,85,70,128,17,245,1,11,48,1,18,2,60,141,133,4,78,82,77,67,128,14,246,1,18,48,20,19,6,17,58,141,72,122,128,9,247,1,5,58,141,75,81,128,18,248,1,18,48,6,7,2,60,141,133,5,66,71,70,78,72,128,13,249,1,8,48,21,13,21,58,141,70,69,128,18,250,1,17,48,10,60,141,133,7,77,81,74,72,77,85,75,128,14,251,1,11,48,13,10,12,21,60,141,133,0,128,13,252,1,14,60,141,133,4,72,70,82,78,128,18,253,1,12,48,19,60,141,133,7,73,69,77,73,67,65,83,128,12,254,1,216,11,48,4,58,141,71,64,128,12,255,1,216,9,48,11,58,141,68,124,128,10,0,2,216,16,58,141,72,79,128,10,1,2,216,1,58,141,75,121,128,13,2,2,216,15,48,16,8,58,141,76,75,128,10,3,2,216,14,58,141,72,103,128,15,4,2,216,11,48,13,10,12,21,58,141,78,70,128,10,5,2,216,2,58,141,67,99,128,14,6,2,216,8,48,21,13,21,58,141,70,69,128,10,7,2,216,8,58,141,65,77,128,14,8,2,216,11,48,1,18,2,58,141,73,67,128,12,9,2,216,12,48,19,58,141,70,81,128,10,10,2,216,13,58,141,65,127,128,14,11,2,216,8,48,15,20,14,58,141,78,109,128,12,12,2,216,5,48,15,58,141,78,97,128,12,13,2,216,13,48,10,58,141,79,85,128,12,14,2,216,17,48,15,58,141,76,124,128,15,15,2,216,1,48,4,18,4,6,58,141,68,106,128,13,16,2,216,1,48,20,9,58,141,66,69,128,10,17,2,216,5,58,141,75,81,128,13,18,2,216,6,48,2,2,58,141,68,94,128,15,19,2,216,4,48,19,21,16,19,58,141,70,69,128,14,20,2,216,13,48,1,2,17,58,141,77,90,128,9,21,2,216,7,58,141,124,128,15,22,2,216,10,48,15,3,9,20,58,141,68,74,128,15,23,2,216,11,48,18,1,10,2,58,141,75,110,128,14,24,2,216,15,48,2,21,12,58,141,75,97,128,10,25,2,216,6,58,141,67,77,128,10,26,2,216,9,58,141,76,84,128,14,27,2,216,18,48,6,7,2,58,141,77,126,128,12,28,2,216,17,48,10,58,141,78,83,128,12,29,2,216,6,48,6,58,141,69,76,128,13,30,2,216,16,48,1,5,58,141,74,113,128,14,31,2,216,1,48,9,6,4,58,141,67,125,128,13,32,2,216,2,48,12,11,58,141,71,100,128,15,33,2,216,18,48,20,19,6,17,58,141,72,122,128,14,34,2,216,12,48,17,4,13,58,141,77,124,128,14,35,2,216,6,48,16,13,17,58,141,65,68,128,6,36,2,129,142,128,0
>5008	50 80 0c 0b 00 01 30 14 09 3a 8d 4c 76 80 0b 0c
>5018	00 0b 30 04 3a 8d 42 60 80 0b 0d 00 06 3c 8d 85
>5028	02 4d 48 80 11 0e 00 0c 30 13 3c 8d 85 06 46 4f
>5038	54 49 4a 53 80 0e 0f 00 08 3c 8d 85 05 4f 52 50
>5048	4b 45 80 11 10 00 0d 30 01 02 11 3c 8d 85 04 51
>5058	4c 45 4d 80 09 11 00 08 3a 8d 4d 4a 80 0f 12 00
>5068	0d 30 0a 3c 8d 85 04 53 52 41 47 80 12 13 00 05
>5078	30 0f 3c 8d 85 07 49 42 4f 44 48 55 4d 80 09 14
>5088	00 02 3a 8d 4d 69 80 0d 15 00 06 30 10 0d 11 3a
>5098	8d 48 4b 80 0c 16 00 0d 30 01 02 11 3a 8d 58 80
>50a8	0b 17 00 0d 30 0a 3a 8d 41 70 80 0b 18 00 02 3c
>50b8	8d 85 02 51 46 80 0b 19 00 11 30 0f 3a 8d 44 7c
>50c8	80 0d 1a 00 06 30 10 0d 11 3a 8d 42 6b 80 0f 1b
>50d8	00 06 30 06 3c 8d 85 04 42 54 54 48 80 0c 1c 00
>50e8	10 30 01 05 3a 8d 47 5f 80 0d 1d 00 01 30 09 06
>50f8	04 3a 8d 4d 46 80 0e 1e 00 04 30 13 15 10 13 3c
>5108	8d 85 00 80 0d 1f 00 0b 30 01 12 02 3a 8d 47 6f
>5118	80 13 20 00 0f 30 10 08 3c 8d 85 07 55 47 51 4d
>5128	51 52 4a 80 0b 21 00 0c 30 13 3a 8d 48 41 80 0d
>5138	22 00 0f 30 02 15 0c 3a 8d 4f 52 80 0e 23 00 01
>5148	30 04 12 04 06 3a 8d 42 73 80 0f 24 00 02 3c 8d
>5158	85 06 46 4b 49 41 55 43 80 10 25 00 0e 3c 8d 85
>5168	07 4f 4d 52 51 43 49 4f 80 0c 26 00 0c 30 13 3c
>5178	8d 85 01 55 80 0c 27 00 09 30 0b 3c 8d 85 01 44
>5188	80 09 28 00 06 3a 8d 44 7d 80 09 29 00 09 3a 8d
>5198	4d 76 80 0e 2a 00 0f 30 10 08 3c 8d 85 02 4d 43
>51a8	80 09 2b 00 09 3a 8d 4e 63 80 0f 2c 00 10 3c 8d
>51b8	85 06 53 44 47 4b 45 4d 80 09 2d 00 01 3c 8d 85
>51c8	00 80 0f 2e 00 11 30 0a 3c 8d 85 04 55 42 4a 50
>51d8	80 0d 2f 00 02 3c 8d 85 04 4f 48 43 41 80 0e 30
>51e8	00 12 30 14 13 06 11 3a 8d 4b 5c 80 09 31 00 09
>51f8	3c 8d 85 00 80 0d 32 00 0b 30 01 12 02 3a 8d 43
>5208	51 80 0d 33 00 0d 30 01 02 11 3a 8d 45 54 80 0c
>5218	34 00 06 30 02 02 3a 8d 47 4e 80 0d 35 00 0d 30
>5228	01 02 11 3a 8d 46 55 80 09 36 00 09 3a 8d 47 59
>5238	80 0b 37 00 06 3c 8d 85 02 43 54 80 0e 38 00 09
>5248	30 0b 3c 8d 85 03 4d 49 53 80 10 39 00 06 3c 8d
>5258	85 07 4c 45 53 4c 4a 46 42 80 13 3a 00 0a 30 0f
>5268	03 09 14 3c 8d 85 05 45 43 4f 55 4d 80 0d 3b 00
>5278	0d 30 01 02 11 3a 8d 44 72 80 14 3c 00 0d 30 01
>5288	02 11 3c 8d 85 07 54 4c 54 54 4c 45 55 80 10 3d
>5298	00 0b 30 01 12 02 3c 8d 85 03 45 4f 4f 80 13 3e
>52a8	00 06 30 02 02 3c 8d 85 07 4c 53 4e 4d 48 43 4b
>52b8	80 0f 3f 00 0f 30 10 08 3c 8d 85 03 48 42 4d 80
>52c8	0e 40 00 01 30 04 12 04 06 3a 8d 47 48 80 0c 41
>52d8	00 10 30 01 05 3a 8d 47 7a 80 0e 42 00 0b 30 0d
>52e8	0a 0c 15 3a 8d 4e 68 80 10 43 00 0d 30 0a 3c 8d
>52f8	85 05 55 4a 42 4e 43 80 12 44 00 0f 30 02 15 0c
>5308	3c 8d 85 05 4c 41 42 55 47 80 0e 45 00 0b 30 0d
>5318	0a 0c 15 3a 8d 4a 79 80 0d 46 00 0b 30 01 12 02
>5328	3a 8d 46 5d 80 0b 47 00 06 30 06 3a 8d 4b 7e 80
>5338	0e 48 00 05 30 0f 3c 8d 85 03 55 51 49 80 09 49
>5348	00 07 3a 8d 49 4d 80 13 4a 00 0d 30 01 02 11 3c
>5358	8d 85 06 50 4b 43 4f 4b 4a 80 0d 4b 00 08 30 0f
>5368	14 0e 3a 8d 4a 6d 80 10 4c 00 12 30 06 07 02 3c
>5378	8d 85 03 41 49 53 80 0b 4d 00 0c 30 13 3a 8d 4d
>5388	48 80 09 4e 00 06 3a 8d 43 71 80 09 4f 00 09 3a
>5398	8d 43 4b 80 0b 50 00 07 3c 8d 85 02 4f 48 80 0e
>53a8	51 00 10 3c 8d 85 05 44 52 4e 42 55 80 11 52 00
>53b8	0c 30 13 3c 8d 85 06 44 45 4f 4b 43 43 80 13 53
>53c8	00 12 30 14 13 06 11 3c 8d 85 05 53 4d 43 42 50
>53d8	80 0d 54 00 06 30 10 0d 11 3a 8d 48 6b 80 0b 55
>53e8	00 11 30 0f 3a 8d 4e 57 80 0d 56 00 09 30 0b 3c
>53f8	8d 85 02 4f 45 80 12 57 00 08 30 15 0d 15 3c 8d
>5408	85 05 48 46 4f 4b 41 80 0f 58 00 0c 30 13 3c 8d
>5418	85 04 49 51 52 41 80 0b 59 00 06 30 06 3a 8d 44
>5428	6c 80 0c 5a 00 10 30 01 05 3a 8d 4c 60 80 15 5b
>5438	00 0b 30 12 01 0a 02 3c 8d 85 07 51 53 4e 4d 50
>5448	4e 4b 80 0d 5c 00 0b 30 01 12 02 3c 8d 85 00 80
>5458	0d 5d 00 0f 30 02 15 0c 3a 8d 4d 4d 80 09 5e 00
>5468	05 3a 8d 41 52 80 14 5f 00 01 30 09 06 04 3c 8d
>5478	85 07 4c 4a 54 51 4c 46 52 80 0d 60 00 0d 30 01
>5488	02 11 3a 8d 41 50 80 0d 61 00 0d 30 01 02 11 3a
>5498	8d 4b 43 80 09 62 00 07 3a 8d 41 49 80 09 63 00
>54a8	08 3a 8d 48 6d 80 0f 64 00 11 30 0f 3c 8d 85 04
>54b8	45 4d 52 41 80 14 65 00 0c 30 11 04 0d 3c 8d 85
>54c8	07 4b 52 42 4f 51 55 45 80 0c 66 00 01 30 14 09
>54d8	3a 8d 45 66 80 0d 67 00 12 30 06 07 02 3a 8d 41
>54e8	68 80 0c 68 00 0f 30 10 08 3c 8d 85 00 80 0d 69
>54f8	00 0f 30 02 15 0c 3a 8d 4b 7e 80 0e 6a 00 01 30
>5508	04 12 04 06 3a 8d 47 5f 80 0e 6b 00 01 30 04 12
>5518	04 06 3a 8d 48 4f 80 0e 6c 00 0b 30 12 01 0a 02
>5528	3a 8d 4a 69 80 0d 6d 00 0c 30 11 04 0d 3a 8d 4c
>5538	55 80 13 6e 00 0b 30 12 01 0a 02 3c 8d 85 05 4c
>5548	4c 4b 4a 51 80 0c 6f 00 02 30 0c 0b 3a 8d 4c 60
>5558	80 10 70 00 08 30 0f 14 0e 3c 8d 85 03 45 4a 53
>5568	80 12 71 00 09 30 0b 3c 8d 85 07 45 44 4c 43 43
>5578	42 4b 80 0f 72 00 12 30 14 13 06 11 3c 8d 85 01
>5588	46 80 0c 73 00 10 30 01 05 3a 8d 4e 71 80 10 74
>5598	00 08 30 15 0d 15 3c 8d 85 03 55 54 49 80 0e 75
>55a8	00 0a 30 0f 03 09 14 3a 8d 4c 4d 80 0c 76 00 06
>55b8	30 02 02 3a 8d 4a 41 80 10 77 00 01 3c 8d 85 07
>55c8	47 41 42 41 41 55 4a 80 0b 78 00 0c 30 13 3a 8d
>55d8	41 68 80 0b 79 00 0c 30 13 3a 8d 42 42 80 09 7a
>55e8	00 05 3a 8d 46 7c 80 13 7b 00 01 30 09 06 04 3c
>55f8	8d 85 06 50 52 4a 49 46 49 80 0b 7c 00 0b 30 04
>5608	3a 8d 42 7a 80 0d 7d 00 01 30 04 12 04 06 3a 8d
>5618	51 80 0e 7e 00 01 30 04 12 04 06 3a 8d 4b 47 80
>5628	09 7f 00 08 3a 8d 45 4b 80 0b 80 00 0b 30 04 3a
>5638	8d 4f 55 80 0e 81 00 0c 30 13 3c 8d 85 03 47 4c
>5648	4d 80 0d 82 00 0f 30 02 15 0c 3c 8d 85 00 80 0f
>5658	83 00 08 3c 8d 85 06 4d 45 45 48 4b 54 80 0f 84
>5668	00 06 30 02 02 3c 8d 85 03 55 4c 47 80 0e 85 00
>5678	0a 30 0f 03 09 14 3a 8d 43 72 80 12 86 00 0f 30
>5688	02 15 0c 3c 8d 85 05 50 45 45 42 4f 80 11 87 00
>5698	0d 30 0a 3c 8d 85 06 47 50 4f 46 4f 4c 80 0e 88
>56a8	00 0f 30 10 08 3c 8d 85 02 43 55 80 14 89 00 01
>56b8	30 09 06 04 3c 8d 85 07 4b 41 49 55 42 4d 44 80
>56c8	0f 8a 00 06 30 10 0d 11 3c 8d 85 02 43 4a 80 0d
>56d8	8b 00 0b 30 0d 0a 0c 15 3a 8d 46 80 11 8c 00 0b
>56e8	30 12 01 0a 02 3c 8d 85 03 4f 54 4c 80 0b 8d 00
>56f8	05 30 0f 3a 8d 4b 67 80 0e 8e 00 0b 30 12 01 0a
>5708	02 3a 8d 45 45 80 0b 8f 00 05 30 0f 3a 8d 48 56
>5718	80 09 90 00 0e 3a 8d 47 49 80 0e 91 00 12 30 06
>5728	07 02 3c 8d 85 01 50 80 15 92 00 04 30 13 15 10
>5738	13 3c 8d 85 07 4e 46 4d 51 54 4d 4e 80 0b 93 00
>5748	11 30 0f 3a 8d 44 6d 80 10 94 00 08 3c 8d 85 07
>5758	54 46 52 55 49 52 4d 80 0d 95 00 0d 30 01 02 11
>5768	3a 8d 43 4c 80 14 96 00 0b 30 0d 0a 0c 15 3c 8d
>5778	85 06 49 46 47 55 4c 4d 80 11 97 00 0b 30 12 01
>5788	0a 02 3c 8d 85 03 52 44 46 80 10 98 00 01 30 14
>5798	09 3c 8d 85 04 48 41 53 41 80 0b 99 00 11 30 0a
>57a8	3a 8d 4d 5c 80 0d 9a 00 0c 30 11 04 0d 3c 8d 85
>57b8	00 80 09 9b 00 08 3c 8d 85 00 80 0f 9c 00 01 3c
>57c8	8d 85 06 55 4e 45 55 46 43 80 0c 9d 00 0f 30 10
>57d8	08 3c 8d 85 00 80 0c 9e 00 0d 3c 8d 85 03 53 4d
>57e8	47 80 0d 9f 00 12 30 06 07 02 3a 8d 4e 69 80 11
>57f8	a0 00 0f 30 02 15 0c 3c 8d 85 04 55 54 52 55 80
>5808	0d a1 00 0f 30 02 15 0c 3a 8d 4a 62 80 0f a2 00
>5818	01 3c 8d 85 06 4e 54 4e 4b 48 51 80 0d a3 00 12
>5828	30 06 07 02 3a 8d 44 60 80 09 a4 00 10 3a 8d 45
>5838	4e 80 0d a5 00 12 30 06 07 02 3a 8d 48 4f 80 0e
>5848	a6 00 04 30 13 15 10 13 3a 8d 4b 6d 80 0f a7 00
>5858	09 30 0b 3c 8d 85 04 43 54 41 51 80 0d a8 00 01
>5868	30 09 06 04 3a 8d 48 75 80 10 a9 00 0d 30 0a 3c
>5878	8d 85 05 44 47 44 51 53 80 09 aa 00 0e 3a 8d 4a
>5888	6a 80 09 ab 00 02 3a 8d 47 4b 80 0c ac 00 10 3c
>5898	8d 85 03 50 47 54 80 09 ad 00 06 3c 8d 85 00 80
>58a8	0f ae 00 0a 30 0f 03 09 14 3c 8d 85 01 50 80 0c
>58b8	af 00 0f 30 10 08 3a 8d 42 6e 80 0c b0 00 01 30
>58c8	14 09 3a 8d 4c 61 80 12 b1 00 0c 30 11 04 0d 3c
>58d8	8d 85 05 42 45 49 42 4b 80 09 b2 00 05 3a 8d 4c
>58e8	46 80 0d b3 00 0c 30 11 04 0d 3a 8d 45 4c 80 0c
>58f8	b4 00 06 30 02 02 3a 8d 46 6e 80 0b b5 00 01 30
>5908	14 09 3a 8d 70 80 0b b6 00 11 30 0a 3c 8d 85 00
>5918	80 12 b7 00 08 30 15 0d 15 3c 8d 85 05 4b 44 48
>5928	52 48 80 09 b8 00 07 3a 8d 4e 78 80 0d b9 00 0b
>5938	30 01 12 02 3a 8d 4d 64 80 09 ba 00 07 3a 8d 4a
>5948	6f 80 0c bb 00 10 30 01 05 3a 8d 49 79 80 0c bc
>5958	00 0b 30 04 3c 8d 85 01 4e 80 10 bd 00 12 30 14
>5968	13 06 11 3c 8d 85 02 4a 45 80 09 be 00 06 3a 8d
>5978	43 48 80 0b bf 00 0c 30 13 3a 8d 4b 4b 80 09 c0
>5988	00 01 3a 8d 43 73 80 15 c1 00 0b 30 12 01 0a 02
>5998	3c 8d 85 07 47 4c 4e 4f 46 51 46 80 15 c2 00 01
>59a8	30 04 12 04 06 3c 8d 85 07 53 46 4d 43 4b 49 42
>59b8	80 0d c3 00 08 30 15 0d 15 3a 8d 4e 6a 80 10 c4
>59c8	00 0b 30 01 12 02 3c 8d 85 03 53 45 4e 80 0e c5
>59d8	00 08 3c 8d 85 05 4b 41 50 41 51 80 09 c6 00 02
>59e8	3a 8d 4b 77 80 0d c7 00 12 30 06 07 02 3a 8d 4a
>59f8	4e 80 11 c8 00 11 30 0a 3c 8d 85 06 52 52 4f 4e
>5a08	4b 50 80 13 c9 00 01 30 04 12 04 06 3c 8d 85 05
>5a18	4a 50 54 4a 4b 80 13 ca 00 0c 30 11 04 0d 3c 8d
>5a28	85 06 46 53 48 4c 4a 43 80 10 cb 00 0f 30 10 08
>5a38	3c 8d 85 04 42 51 42 4f 80 0d cc 00 09 30 0b 3c
>5a48	8d 85 02 51 48 80 10 cd 00 05 3c 8d 85 07 4d 4e
>5a58	4b 4a 54 46 4e 80 0b ce 00 06 30 06 3a 8d 47 50
>5a68	80 09 cf 00 05 3a 8d 4e 65 80 09 d0 00 10 3c 8d
>5a78	85 00 80 0e d1 00 0b 30 0d 0a 0c 15 3a 8d 41 46
>5a88	80 0d d2 00 10 3c 8d 85 04 49 45 46 47 80 0b d3
>5a98	00 0b 30 04 3a 8d 47 61 80 13 d4 00 0b 30 12 01
>5aa8	0a 02 3c 8d 85 05 54 51 44 49 53 80 13 d5 00 0b
>5ab8	30 12 01 0a 02 3c 8d 85 05 50 41 4b 41 48 80 09
>5ac8	d6 00 05 3a 8d 45 77 80 11 d7 00 0d 30 01 02 11
>5ad8	3c 8d 85 04 41 54 4e 4d 80 0e d8 00 12 30 14 13
>5ae8	06 11 3a 8d 4a 57 80 09 d9 00 07 3a 8d 42 79 80
>5af8	12 da 00 0b 30 0d 0a 0c 15 3c 8d 85 04 47 50 54
>5b08	4a 80 09 db 00 09 3a 8d 4a 58 80 12 dc 00 0b 30
>5b18	01 12 02 3c 8d 85 05 4e 55 4c 51 46 80 0e dd 00
>5b28	12 30 14 13 06 11 3a 8d 41 6c 80 10 de 00 10 30
>5b38	01 05 3c 8d 85 04 4e 4d 55 41 80 0f df 00 0f 30
>5b48	10 08 3c 8d 85 03 55 41 54 80 0d e0 00 0d 30 01
>5b58	02 11 3c 8d 85 00 80 0f e1 00 0b 30 0d 0a 0c 15
>5b68	3c 8d 85 01 4e 80 09 e2 00 0d 3a 8d 48 7f 80 0e
>5b78	e3 00 01 30 14 09 3c 8d 85 02 51 49 80 14 e4 00
>5b88	0b 30 12 01 0a 02 3c 8d 85 06 51 44 4f 43 4f 41
>5b98	80 0d e5 00 0c 30 11 04 0d 3a 8d 43 65 80 11 e6
>5ba8	00 12 30 14 13 06 11 3c 8d 85 03 44 4f 44 80 0b
>5bb8	e7 00 0b 30 04 3a 8d 4e 4a 80 0d e8 00 0c 30 11
>5bc8	04 0d 3a 8d 4d 7e 80 0d e9 00 0c 30 11 04 0d 3a
>5bd8	8d 46 4a 80 09 ea 00 02 3c 8d 85 00 80 0d eb 00
>5be8	08 30 15 0d 15 3a 8d 42 52 80 0b ec 00 09 30 0b
>5bf8	3a 8d 43 7e 80 09 ed 00 10 3a 8d 43 78 80 0e ee
>5c08	00 06 30 10 0d 11 3c 8d 85 01 45 80 0e ef 00 0b
>5c18	30 0d 0a 0c 15 3a 8d 47 7e 80 0b f0 00 11 30 0f
>5c28	3a 8d 4d 7d 80 09 f1 00 08 3c 8d 85 00 80 11 f2
>5c38	00 09 30 0b 3c 8d 85 06 54 4f 52 47 43 52 80 10
>5c48	f3 00 06 30 06 3c 8d 85 05 48 48 4b 4a 4f 80 0f
>5c58	f4 00 06 30 10 0d 11 3c 8d 85 02 4d 50 80 0d f5
>5c68	00 04 30 13 15 10 13 3a 8d 58 80 0c f6 00 09 30
>5c78	0b 3c 8d 85 01 51 80 0d f7 00 0f 30 02 15 0c 3a
>5c88	8d 48 5a 80 0d f8 00 0b 30 0d 0a 0c 15 3a 8d 63
>5c98	80 0a f9 00 0c 30 13 3a 8d 4f 80 0c fa 00 01 30
>5ca8	14 09 3c 8d 85 00 80 0e fb 00 0b 30 0d 0a 0c 15
>5cb8	3a 8d 4b 70 80 0f fc 00 0b 30 01 12 02 3c 8d 85
>5cc8	02 47 43 80 0d fd 00 0f 30 02 15 0c 3a 8d 42 69
>5cd8	80 0d fe 00 12 30 06 07 02 3a 8d 4e 64 80 13 ff
>5ce8	00 0f 30 02 15 0c 3c 8d 85 06 53 4c 42 4b 4d 54
>5cf8	80 0e 00 01 01 30 04 12 04 06 3a 8d 49 43 80 0e
>5d08	01 01 0b 30 12 01 0a 02 3a 8d 4d 66 80 0d 02 01
>5d18	09 30 0b 3c 8d 85 02 41 4d 80 0d 03 01 0c 30 11
>5d28	04 0d 3a 8d 47 7f 80 0d 04 01 0f 30 02 15 0c 3a
>5d38	8d 42 71 80 0c 05 01 0e 3c 8d 85 03 42 50 4a 80
>5d48	10 06 01 0b 30 04 3c 8d 85 05 47 45 46 54 55 80
>5d58	0c 07 01 10 30 01 05 3a 8d 43 6c 80 09 08 01 0e
>5d68	3a 8d 41 70 80 12 09 01 0f 30 10 08 3c 8d 85 06
>5d78	52 44 43 55 46 4d 80 10 0a 01 06 3c 8d 85 07 41
>5d88	51 47 44 45 55 4e 80 0c 0b 01 0f 30 10 08 3a 8d
>5d98	42 72 80 0c 0c 01 06 30 02 02 3c 8d 85 00 80 09
>5da8	0d 01 07 3a 8d 49 5c 80 0d 0e 01 12 30 06 07 02
>5db8	3a 8d 45 4d 80 11 0f 01 0b 30 04 3c 8d 85 06 43
>5dc8	51 49 50 52 41 80 11 10 01 0d 30 0a 3c 8d 85 06
>5dd8	53 50 43 53 41 52 80 0b 11 01 08 3c 8d 85 02 4a
>5de8	4c 80 0f 12 01 07 3c 8d 85 06 54 54 53 50 53 46
>5df8	80 0d 13 01 0c 30 11 04 0d 3a 8d 46 51 80 0e 14
>5e08	01 02 30 0c 0b 3c 8d 85 02 43 44 80 0c 15 01 10
>5e18	30 01 05 3a 8d 42 72 80 0b 16 01 11 30 0f 3c 8d
>5e28	85 00 80 09 17 01 0e 3a 8d 4e 6d 80 09 18 01 08
>5e38	3a 8d 49 76 80 0b 19 01 0e 3c 8d 85 02 55 43 80
>5e48	0a 1a 01 11 30 0a 3a 8d 6c 80 0e 1b 01 0a 30 0f
>5e58	03 09 14 3c 8d 85 00 80 0c 1c 01 01 30 14 09 3a
>5e68	8d 4b 52 80 0d 1d 01 06 30 10 0d 11 3a 8d 4c 5e
>5e78	80 10 1e 01 09 30 0b 3c 8d 85 05 4f 53 44 4c 4f
>5e88	80 0d 1f 01 01 30 09 06 04 3a 8d 42 46 80 10 20
>5e98	01 0d 3c 8d 85 07 4f 4d 51 51 4c 48 50 80 09 21
>5ea8	01 09 3a 8d 44 6c 80 12 22 01 11 30 0a 3c 8d 85
>5eb8	07 43 42 4d 41 45 48 48 80 14 23 01 0a 30 0f 03
>5ec8	09 14 3c 8d 85 06 45 44 54 47 44 4b 80 11 24 01
>5ed8	0b 30 04 3c 8d 85 06 44 4d 55 52 49 42 80 0d 25
>5ee8	01 0b 30 01 12 02 3a 8d 49 54 80 0d 26 01 08 30
>5ef8	15 0d 15 3a 8d 44 5d 80 09 27 01 07 3a 8d 48 5e
>5f08	80 0b 28 01 0b 30 04 3c 8d 85 00 80 0c 29 01 02
>5f18	30 0c 0b 3a 8d 42 4c 80 0e 2a 01 04 30 13 15 10
>5f28	13 3a 8d 43 45 80 0e 2b 01 09 3c 8d 85 05 4f 47
>5f38	4a 43 45 80 14 2c 01 0c 30 11 04 0d 3c 8d 85 07
>5f48	42 50 53 43 51 55 44 80 0d 2d 01 08 30 0f 14 0e
>5f58	3a 8d 44 42 80 09 2e 01 02 3a 8d 43 63 80 0b 2f
>5f68	01 07 3c 8d 85 02 47 46 80 0b 30 01 09 30 0b 3a
>5f78	8d 49 6e 80 0e 31 01 01 30 04 12 04 06 3a 8d 49
>5f88	6e 80 09 32 01 01 3c 8d 85 00 80 0b 33 01 05 30
>5f98	0f 3a 8d 49 7e 80 0d 34 01 01 3c 8d 85 04 4f 55
>5fa8	48 48 80 0c 35 01 0b 30 01 12 02 3a 8d 49 80 10
>5fb8	36 01 0b 30 01 12 02 3c 8d 85 03 44 44 4a 80 0e
>5fc8	37 01 04 30 13 15 10 13 3c 8d 85 00 80 11 38 01
>5fd8	11 30 0f 3c 8d 85 06 50 4f 4e 4f 4d 50 80 0d 39
>5fe8	01 0f 30 02 15 0c 3a 8d 4e 71 80 09 3a 01 08 3a
>5ff8	8d 49 42 80 09 3b 01 0d 3a 8d 4c 6c 80 0b 3c 01
>6008	06 30 06 3a 8d 47 4b 80 0b 3d 01 09 30 0b 3a 8d
>6018	44 7c 80 0e 3e 01 0f 30 02 15 0c 3c 8d 85 01 54
>6028	80 0d 3f 01 08 30 15 0d 15 3a 8d 45 65 80 0f 40
>6038	01 01 30 04 12 04 06 3c 8d 85 01 51 80 0f 41 01
>6048	01 30 04 12 04 06 3c 8d 85 01 53 80 09 42 01 0e
>6058	3a 8d 4b 55 80 0e 43 01 04 30 13 15 10 13 3a 8d
>6068	4f 4c 80 0e 44 01 01 30 04 12 04 06 3a 8d 47 6f
>6078	80 0b 45 01 11 30 0f 3a 8d 41 42 80 0b 46 01 11
>6088	30 0f 3a 8d 4b 67 80 09 47 01 05 3a 8d 4b 4a 80
>6098	0f 48 01 01 30 04 12 04 06 3c 8d 85 01 47 80 0d
>60a8	49 01 0b 30 0d 0a 0c 15 3a 8d 7b 80 0e 4a 01 0e
>60b8	3c 8d 85 05 54 45 4f 54 47 80 0c 4b 01 01 30 14
>60c8	09 3a 8d 4e 6c 80 0e 4c 01 0b 30 12 01 0a 02 3a
>60d8	8d 46 56 80 0e 4d 01 0d 3c 8d 85 05 45 4e 55 44
>60e8	51 80 0c 4e 01 08 3c 8d 85 03 45 4b 4a 80 0d 4f
>60f8	01 01 30 09 06 04 3a 8d 49 6f 80 0d 50 01 08 30
>6108	15 0d 15 3a 8d 4a 60 80 0e 51 01 05 3c 8d 85 05
>6118	51 55 45 53 4b 80 0d 52 01 02 3c 8d 85 04 42 42
>6128	42 51 80 09 53 01 09 3a 8d 49 7c 80 09 54 01 09
>6138	3a 8d 49 75 80 0c 55 01 10 3c 8d 85 03 42 47 4d
>6148	80 0b 56 01 11 30 0f 3a 8d 4e 45 80 12 57 01 11
>6158	30 0a 3c 8d 85 07 53 45 49 48 52 50 55 80 14 58
>6168	01 01 30 09 06 04 3c 8d 85 07 49 4e 4c 44 48 44
>6178	4c 80 0e 59 01 01 30 14 09 3c 8d 85 02 53 4d 80
>6188	0b 5a 01 0d 3c 8d 85 02 4b 4c 80 0d 5b 01 0c 30
>6198	13 3c 8d 85 02 4a 54 80 0e 5c 01 04 30 13 15 10
>61a8	13 3a 8d 4b 4b 80 0d 5d 01 08 30 0f 14 0e 3a 8d
>61b8	4e 6d 80 12 5e 01 0f 30 02 15 0c 3c 8d 85 05 52
>61c8	41 45 41 4a 80 09 5f 01 09 3c 8d 85 00 80 0e 60
>61d8	01 12 30 14 13 06 11 3a 8d 41 5f 80 14 61 01 04
>61e8	30 13 15 10 13 3c 8d 85 06 50 52 49 53 55 44 80
>61f8	0a 62 01 05 3c 8d 85 01 47 80 0f 63 01 01 30 14
>6208	09 3c 8d 85 03 48 43 4c 80 09 64 01 09 3a 8d 4b
>6218	69 80 11 65 01 11 30 0a 3c 8d 85 06 4f 4a 50 4a
>6228	48 52 80 13 66 01 08 30 15 0d 15 3c 8d 85 06 4f
>6238	4b 4e 45 4a 52 80 09 67 01 06 3a 8d 43 4d 80 0c
>6248	68 01 11 30 0f 3c 8d 85 01 45 80 0d 69 01 0d 30
>6258	01 02 11 3a 8d 47 4c 80 0c 6a 01 05 3c 8d 85 03
>6268	46 4c 46 80 0d 6b 01 09 3c 8d 85 04 55 43 52 4e
>6278	80 0d 6c 01 12 30 06 07 02 3a 8d 49 53 80 0e 6d
>6288	01 0b 30 0d 0a 0c 15 3a 8d 4e 60 80 0b 6e 01 0c
>6298	30 13 3a 8d 46 51 80 0d 6f 01 0b 30 01 12 02 3a
>62a8	8d 45 78 80 0a 70 01 0e 3c 8d 85 01 51 80 0e 71
>62b8	01 12 30 14 13 06 11 3a 8d 44 40 80 0b 72 01 11
>62c8	30 0f 3a 8d 4b 4b 80 0f 73 01 04 30 13 15 10 13
>62d8	3c 8d 85 01 48 80 0b 74 01 0d 30 0a 3a 8d 4d 44
>62e8	80 13 75 01 12 30 14 13 06 11 3c 8d 85 05 42 41
>62f8	55 51 41 80 0f 76 01 0a 30 0f 03 09 14 3c 8d 85
>6308	01 43 80 0e 77 01 0a 30 0f 03 09 14 3a 8d 44 4a
>6318	80 0c 78 01 10 30 01 05 3a 8d 4a 71 80 10 79 01
>6328	10 30 01 05 3c 8d 85 04 4a 49 4a 52 80 11 7a 01
>6338	0d 30 01 02 11 3c 8d 85 04 47 4d 4f 45 80 09 7b
>6348	01 0e 3a 8d 4e 70 80 14 7c 01 08 30 0f 14 0e 3c
>6358	8d 85 07 51 4a 4a 43 42 51 51 80 09 7d 01 07 3a
>6368	8d 4e 72 80 0e 7e 01 0b 30 12 01 0a 02 3a 8d 4b
>6378	53 80 11 7f 01 0b 30 0d 0a 0c 15 3c 8d 85 03 4d
>6388	4f 47 80 0a 80 01 05 3c 8d 85 01 41 80 0b 81 01
>6398	11 30 0f 3a 8d 45 49 80 0c 82 01 0b 30 01 12 02
>63a8	3a 8d 53 80 0e 83 01 01 3c 8d 85 05 4a 44 4e 4f
>63b8	4a 80 0e 84 01 04 30 13 15 10 13 3a 8d 46 45 80
>63c8	09 85 01 08 3a 8d 41 7d 80 0d 86 01 08 30 15 0d
>63d8	15 3a 8d 48 78 80 0d 87 01 11 30 0f 3c 8d 85 02
>63e8	43 4d 80 09 88 01 09 3a 8d 46 5f 80 14 89 01 01
>63f8	30 09 06 04 3c 8d 85 07 44 46 46 43 50 47 41 80
>6408	0d 8a 01 0f 30 02 15 0c 3a 8d 48 61 80 0d 8b 01
>6418	12 30 06 07 02 3a 8d 48 4e 80 0d 8c 01 02 3c 8d
>6428	85 04 43 4d 49 4f 80 0d 8d 01 10 30 01 05 3c 8d
>6438	85 01 42 80 0b 8e 01 11 30 0a 3a 8d 4e 53 80 0e
>6448	8f 01 0b 30 12 01 0a 02 3a 8d 42 4a 80 0b 90 01
>6458	06 30 06 3a 8d 45 4c 80 0b 91 01 09 30 0b 3c 8d
>6468	85 00 80 09 92 01 01 3a 8d 47 53 80 0e 93 01 01
>6478	30 04 12 04 06 3a 8d 44 6a 80 09 94 01 0e 3a 8d
>6488	48 67 80 09 95 01 05 3a 8d 41 50 80 0d 96 01 12
>6498	30 06 07 02 3a 8d 4c 60 80 0b 97 01 0b 30 04 3a
>64a8	8d 47 7c 80 0b 98 01 0d 30 0a 3c 8d 85 00 80 0d
>64b8	99 01 08 30 0f 14 0e 3c 8d 85 00 80 11 9a 01 06
>64c8	30 02 02 3c 8d 85 05 52 4c 49 4c 49 80 0e 9b 01
>64d8	0b 30 0d 0a 0c 15 3a 8d 42 4a 80 0c 9c 01 0f 30
>64e8	10 08 3a 8d 46 4b 80 0e 9d 01 08 30 0f 14 0e 3c
>64f8	8d 85 01 4d 80 0b 9e 01 11 30 0f 3a 8d 4c 7c 80
>6508	0c 9f 01 06 30 02 02 3a 8d 43 5a 80 0d a0 01 12
>6518	30 06 07 02 3a 8d 46 4e 80 0c a1 01 01 30 14 09
>6528	3a 8d 47 68 80 0e a2 01 11 30 0f 3c 8d 85 03 55
>6538	41 45 80 12 a3 01 09 30 0b 3c 8d 85 07 50 49 50
>6548	45 54 48 46 80 10 a4 01 0d 3c 8d 85 07 52 4c 50
>6558	55 54 42 45 80 0c a5 01 0f 30 10 08 3c 8d 85 00
>6568	80 11 a6 01 0d 30 01 02 11 3c 8d 85 04 53 44 49
>6578	4e 80 0e a7 01 0b 30 0d 0a 0c 15 3a 8d 4d 68 80
>6588	0e a8 01 0a 30 0f 03 09 14 3c 8d 85 00 80 0f a9
>6598	01 0c 30 13 3c 8d 85 04 41 4d 50 47 80 0e aa 01
>65a8	0b 30 12 01 0a 02 3a 8d 4c 79 80 0b ab 01 05 30
>65b8	0f 3a 8d 41 4d 80 0b ac 01 06 30 02 02 3a 8d 6d
>65c8	80 0d ad 01 0d 30 01 02 11 3a 8d 4d 6e 80 0d ae
>65d8	01 0e 3c 8d 85 04 4e 4d 46 52 80 0f af 01 0a 30
>65e8	0f 03 09 14 3c 8d 85 01 51 80 11 b0 01 01 30 09
>65f8	06 04 3c 8d 85 04 45 46 42 51 80 0d b1 01 01 30
>6608	09 06 04 3c 8d 85 00 80 0d b2 01 12 30 06 07 02
>6618	3a 8d 42 61 80 09 b3 01 01 3a 8d 4b 79 80 0e b4
>6628	01 12 30 06 07 02 3c 8d 85 01 44 80 10 b5 01 01
>6638	3c 8d 85 07 43 47 49 4b 41 48 4e 80 0e b6 01 06
>6648	30 06 3c 8d 85 03 4c 4d 49 80 0c b7 01 06 30 02
>6658	02 3a 8d 44 5e 80 0b b8 01 0b 30 04 3a 8d 47 40
>6668	80 0b b9 01 01 3c 8d 85 02 42 47 80 0d ba 01 12
>6678	30 06 07 02 3a 8d 4d 7e 80 0c bb 01 0c 30 13 3c
>6688	8d 85 01 4b 80 0f bc 01 06 3c 8d 85 06 4a 53 4f
>6698	4a 41 53 80 0e bd 01 01 30 14 09 3c 8d 85 02 46
>66a8	4c 80 0d be 01 0f 30 02 15 0c 3a 8d 4c 5f 80 10
>66b8	bf 01 11 30 0f 3c 8d 85 05 44 53 50 46 55 80 0f
>66c8	c0 01 10 30 01 05 3c 8d 85 03 4b 49 43 80 08 c1
>66d8	01 07 3a 8d 7c 80 13 c2 01 12 30 14 13 06 11 3c
>66e8	8d 85 05 4c 51 47 51 53 80 0c c3 01 02 30 0c 0b
>66f8	3a 8d 47 64 80 0b c4 01 05 30 0f 3a 8d 4e 61 80
>6708	0f c5 01 09 30 0b 3c 8d 85 04 4c 52 41 43 80 0c
>6718	c6 01 06 30 06 3c 8d 85 01 54 80 0c c7 01 01 3c
>6728	8d 85 03 4f 4e 44 80 13 c8 01 01 30 14 09 3c 8d
>6738	85 07 52 53 43 4d 48 48 42 80 0e c9 01 06 3c 8d
>6748	85 05 52 49 44 4d 46 80 11 ca 01 0a 30 0f 03 09
>6758	14 3c 8d 85 03 42 45 43 80 0d cb 01 0b 30 01 12
>6768	02 3a 8d 4a 49 80 09 cc 01 05 3c 8d 85 00 80 0d
>6778	cd 01 01 30 09 06 04 3a 8d 43 7d 80 0d ce 01 0b
>6788	30 01 12 02 3c 8d 85 00 80 13 cf 01 06 30 10 0d
>6798	11 3c 8d 85 06 49 42 45 46 55 4c 80 0d d0 01 0d
>67a8	30 01 02 11 3c 8d 85 00 80 09 d1 01 09 3a 8d 4c
>67b8	54 80 0d d2 01 0c 30 11 04 0d 3a 8d 4d 7c 80 14
>67c8	d3 01 0b 30 0d 0a 0c 15 3c 8d 85 06 54 47 53 4d
>67d8	45 47 80 0a d4 01 02 3c 8d 85 01 42 80 0c d5 01
>67e8	0f 30 10 08 3a 8d 4c 4b 80 0d d6 01 06 30 10 0d
>67f8	11 3a 8d 41 44 80 0c d7 01 01 30 14 09 3a 8d 42
>6808	45 80 0d d8 01 0f 30 02 15 0c 3c 8d 85 00 80 0e
>6818	d9 01 0b 30 12 01 0a 02 3a 8d 4b 6e 80 0e da 01
>6828	10 3c 8d 85 05 49 52 51 47 54 80 14 db 01 04 30
>6838	13 15 10 13 3c 8d 85 06 42 54 50 46 4b 50 80 0d
>6848	dc 01 0f 30 02 15 0c 3a 8d 4b 61 80 12 dd 01 0b
>6858	30 04 3c 8d 85 07 4e 55 4b 4b 46 4e 45 80 09 de
>6868	01 10 3a 8d 48 4f 80 13 df 01 01 30 09 06 04 3c
>6878	8d 85 06 48 54 55 52 4d 44 80 0e e0 01 0b 30 04
>6888	3c 8d 85 03 4c 50 48 80 0c e1 01 06 3c 8d 85 03
>6898	4a 41 53 80 0f e2 01 10 3c 8d 85 06 49 54 47 4e
>68a8	4e 50 80 0e e3 01 0b 30 0d 0a 0c 15 3a 8d 4e 46
>68b8	80 0f e4 01 01 30 04 12 04 06 3c 8d 85 01 48 80
>68c8	09 e5 01 08 3a 8d 41 4d 80 10 e6 01 12 30 14 13
>68d8	06 11 3c 8d 85 02 4a 4d 80 0b e7 01 0d 30 0a 3a
>68e8	8d 4f 55 80 0f e8 01 11 30 0f 3c 8d 85 04 42 4a
>68f8	47 4c 80 0e e9 01 0f 30 10 08 3c 8d 85 02 46 4f
>6908	80 0d ea 01 0b 30 01 12 02 3a 8d 49 43 80 13 eb
>6918	01 06 30 10 0d 11 3c 8d 85 06 42 42 49 51 4c 42
>6928	80 13 ec 01 0c 30 11 04 0d 3c 8d 85 06 52 53 50
>6938	4a 4f 4c 80 10 ed 01 0b 30 01 12 02 3c 8d 85 03
>6948	54 53 4c 80 09 ee 01 0d 3a 8d 41 7f 80 0c ef 01
>6958	0c 30 13 3c 8d 85 01 4b 80 0d f0 01 0d 30 01 02
>6968	11 3a 8d 4d 5a 80 0d f1 01 06 3c 8d 85 04 49 44
>6978	44 4a 80 0e f2 01 01 30 14 09 3c 8d 85 02 45 46
>6988	80 0e f3 01 0d 30 01 02 11 3c 8d 85 01 4b 80 11
>6998	f4 01 0d 30 01 02 11 3c 8d 85 04 44 46 55 46 80
>69a8	11 f5 01 0b 30 01 12 02 3c 8d 85 04 4e 52 4d 43
>69b8	80 0e f6 01 12 30 14 13 06 11 3a 8d 48 7a 80 09
>69c8	f7 01 05 3a 8d 4b 51 80 12 f8 01 12 30 06 07 02
>69d8	3c 8d 85 05 42 47 46 4e 48 80 0d f9 01 08 30 15
>69e8	0d 15 3a 8d 46 45 80 12 fa 01 11 30 0a 3c 8d 85
>69f8	07 4d 51 4a 48 4d 55 4b 80 0e fb 01 0b 30 0d 0a
>6a08	0c 15 3c 8d 85 00 80 0d fc 01 0e 3c 8d 85 04 48
>6a18	46 52 4e 80 12 fd 01 0c 30 13 3c 8d 85 07 49 45
>6a28	4d 49 43 41 53 80 0c fe 01 d8 0b 30 04 3a 8d 47
>6a38	40 80 0c ff 01 d8 09 30 0b 3a 8d 44 7c 80 0a 00
>6a48	02 d8 10 3a 8d 48 4f 80 0a 01 02 d8 01 3a 8d 4b
>6a58	79 80 0d 02 02 d8 0f 30 10 08 3a 8d 4c 4b 80 0a
>6a68	03 02 d8 0e 3a 8d 48 67 80 0f 04 02 d8 0b 30 0d
>6a78	0a 0c 15 3a 8d 4e 46 80 0a 05 02 d8 02 3a 8d 43
>6a88	63 80 0e 06 02 d8 08 30 15 0d 15 3a 8d 46 45 80
>6a98	0a 07 02 d8 08 3a 8d 41 4d 80 0e 08 02 d8 0b 30
>6aa8	01 12 02 3a 8d 49 43 80 0c 09 02 d8 0c 30 13 3a
>6ab8	8d 46 51 80 0a 0a 02 d8 0d 3a 8d 41 7f 80 0e 0b
>6ac8	02 d8 08 30 0f 14 0e 3a 8d 4e 6d 80 0c 0c 02 d8
>6ad8	05 30 0f 3a 8d 4e 61 80 0c 0d 02 d8 0d 30 0a 3a
>6ae8	8d 4f 55 80 0c 0e 02 d8 11 30 0f 3a 8d 4c 7c 80
>6af8	0f 0f 02 d8 01 30 04 12 04 06 3a 8d 44 6a 80 0d
>6b08	10 02 d8 01 30 14 09 3a 8d 42 45 80 0a 11 02 d8
>6b18	05 3a 8d 4b 51 80 0d 12 02 d8 06 30 02 02 3a 8d
>6b28	44 5e 80 0f 13 02 d8 04 30 13 15 10 13 3a 8d 46
>6b38	45 80 0e 14 02 d8 0d 30 01 02 11 3a 8d 4d 5a 80
>6b48	09 15 02 d8 07 3a 8d 7c 80 0f 16 02 d8 0a 30 0f
>6b58	03 09 14 3a 8d 44 4a 80 0f 17 02 d8 0b 30 12 01
>6b68	0a 02 3a 8d 4b 6e 80 0e 18 02 d8 0f 30 02 15 0c
>6b78	3a 8d 4b 61 80 0a 19 02 d8 06 3a 8d 43 4d 80 0a
>6b88	1a 02 d8 09 3a 8d 4c 54 80 0e 1b 02 d8 12 30 06
>6b98	07 02 3a 8d 4d 7e 80 0c 1c 02 d8 11 30 0a 3a 8d
>6ba8	4e 53 80 0c 1d 02 d8 06 30 06 3a 8d 45 4c 80 0d
>6bb8	1e 02 d8 10 30 01 05 3a 8d 4a 71 80 0e 1f 02 d8
>6bc8	01 30 09 06 04 3a 8d 43 7d 80 0d 20 02 d8 02 30
>6bd8	0c 0b 3a 8d 47 64 80 0f 21 02 d8 12 30 14 13 06
>6be8	11 3a 8d 48 7a 80 0e 22 02 d8 0c 30 11 04 0d 3a
>6bf8	8d 4d 7c 80 0e 23 02 d8 06 30 10 0d 11 3a 8d 41
>6c08	44 80 06 24 02 81 8e 80 00

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 fd 1c	jsr $1cfd			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 04 1e	jsr $1e04			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0b		sta $0b				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0c		sta $0c				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0d		sta $0d				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 0e		sta $0e				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 68 10	jsr $1068			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 63 1d	jsr $1d63			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 8d 21	jsr $218d		jsr	variableHandler
.1065	68		pla				pla
.1066	a8		tay				tay
.1067	60		rts				rts
.1068					AdvanceLowMemoryByte:
.1068	18		clc				clc
.1069	65 0d		adc $0d				adc 	lowMemory
.106b	85 0d		sta $0d				sta 	lowMemory
.106d	90 02		bcc $1071			bcc 	_ALMBExit
.106f	e6 0e		inc $0e				inc 	lowMemory+1
.1071					_ALMBExit:
.1071	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2194					Command_FOR:
.2194	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2196	a2 0b		ldx #$0b			ldx 	#11
.2198	20 71 1d	jsr $1d71			jsr 	RSClaim
.219b	20 ae 10	jsr $10ae			jsr 	CommandLET 					; do the same as LET.
.219e	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.21a0	c9 80		cmp #$80			cmp 	#$80
.21a2	d0 4c		bne $21f0			bne 	_CFType
.21a4	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.21a6	20 3e 1d	jsr $1d3e			jsr 	CheckToken
.21a9	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.21ab	20 73 17	jsr $1773			jsr 	EvaluateInteger				; get terminal value in stack 1
.21ae	98		tya				tya
.21af	48		pha				pha
.21b0	a0 04		ldy #$04			ldy 	#4
.21b2	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.21b4	91 78		sta ($78),y			sta 	(rsPointer),y
.21b6	c8		iny				iny
.21b7	a5 50		lda $50				lda		esInt1
.21b9	91 78		sta ($78),y			sta 	(rsPointer),y
.21bb	c8		iny				iny
.21bc	a9 01		lda #$01			lda 	#1  						; the default step in 6
.21be	91 78		sta ($78),y			sta 	(rsPointer),y
.21c0	c8		iny				iny
.21c1	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.21c3	91 78		sta ($78),y			sta 	(rsPointer),y
.21c5	c8		iny				iny
.21c6	a5 51		lda $51				lda		esInt1+1
.21c8	91 78		sta ($78),y			sta 	(rsPointer),y
.21ca	c8		iny				iny
.21cb	a5 59		lda $59				lda		esInt2+1
.21cd	91 78		sta ($78),y			sta 	(rsPointer),y
.21cf	c8		iny				iny
.21d0	a5 61		lda $61				lda		esInt3+1
.21d2	91 78		sta ($78),y			sta 	(rsPointer),y
.21d4	68		pla				pla
.21d5	a8		tay				tay
.21d6	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.21d8	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.21da	d0 0e		bne $21ea			bne 	_CFDone
.21dc	c8		iny				iny									; skip over step.
.21dd	20 73 17	jsr $1773			jsr 	EvaluateInteger 			; get step
.21e0	98		tya				tya
.21e1	48		pha				pha
.21e2	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.21e4	a0 06		ldy #$06			ldy 	#6
.21e6	91 78		sta ($78),y			sta 	(rsPointer),y
.21e8	68		pla				pla
.21e9	a8		tay				tay
.21ea					_CFDone:
.21ea	a9 01		lda #$01			lda 	#1
.21ec	20 9d 1d	jsr $1d9d			jsr 	RSSavePosition 				; save position.
.21ef	60		rts				rts
.21f0					_CFType:
.21f0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.21f2	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.21f5					Command_NEXT:
.21f5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.21f7	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.21f9	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.21fb	f0 05		beq $2202			beq 	_isok
.21fd	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.21ff	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.2202					_isok:
.2202	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2204	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2206	b0 18		bcs $2220			bcs 	_CNNoIndex
.2208	a2 00		ldx #$00			ldx 	#0 							; start on stack
.220a	20 a0 17	jsr $17a0			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.220d	98		tya				tya
.220e	48		pha				pha
.220f	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2211	b1 78		lda ($78),y			lda 	(rsPointer),y
.2213	d5 48		cmp $48,x			cmp 	esInt0,x
.2215	d0 76		bne $228d			bne 	_CNBadIndex
.2217	c8		iny				iny
.2218	b1 78		lda ($78),y			lda 	(rsPointer),y
.221a	d5 50		cmp $50,x			cmp 	esInt1,x
.221c	d0 6f		bne $228d			bne 	_CNBadIndex
.221e	68		pla				pla
.221f	a8		tay				tay
.2220					_CNNoIndex:
.2220	98		tya				tya
.2221	48		pha				pha
.2222	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2224	b1 78		lda ($78),y			lda 	(rsPointer),y
.2226	85 04		sta $04				sta 	temp0
.2228	c8		iny				iny
.2229	b1 78		lda ($78),y			lda 	(rsPointer),y
.222b	85 05		sta $05				sta 	temp0+1
.222d	c8		iny				iny
.222e	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2230	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2232	85 09		sta $09				sta 	temp2+1 					; save for later.
.2234	10 01		bpl $2237			bpl 	_CNSignX
.2236	ca		dex				dex  								; X = $FF
.2237					_CNSignX:
.2237	18		clc				clc 								; add to the LSB
.2238	a0 00		ldy #$00			ldy 	#0
.223a	71 04		adc ($04),y			adc 	(temp0),y
.223c	91 04		sta ($04),y			sta 	(temp0),y
.223e					_CNPropogate:
.223e	c8		iny				iny  								; add the sign extended in X to the rest.
.223f	8a		txa				txa
.2240	71 04		adc ($04),y			adc 	(temp0),y
.2242	91 04		sta ($04),y			sta 	(temp0),y
.2244	c8		iny				iny
.2245	8a		txa				txa
.2246	71 04		adc ($04),y			adc 	(temp0),y
.2248	91 04		sta ($04),y			sta 	(temp0),y
.224a	c8		iny				iny
.224b	8a		txa				txa
.224c	71 04		adc ($04),y			adc 	(temp0),y
.224e	91 04		sta ($04),y			sta 	(temp0),y
.2250	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2251	a5 78		lda $78				lda 	rsPointer
.2253	69 07		adc #$07			adc 	#7
.2255	85 06		sta $06				sta 	temp1
.2257	a9 00		lda #$00			lda 	#0
.2259	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.225b	a8		tay				tay 								; and clear the Y register again.
.225c	65 79		adc $79				adc 	rsPointer+1
.225e	85 07		sta $07				sta 	temp1+1
.2260	38		sec				sec 								; calculate current - limit oring interim values.
.2261	20 99 22	jsr $2299			jsr 	_CNCompare
.2264	20 99 22	jsr $2299			jsr 	_CNCompare
.2267	20 99 22	jsr $2299			jsr 	_CNCompare
.226a	20 99 22	jsr $2299			jsr 	_CNCompare
.226d	50 02		bvc $2271			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.226f	49 80		eor #$80			eor 	#$80
.2271					_CNNoOverflow:
.2271	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2273	30 1d		bmi $2292			bmi 	_CNCheckDownto
.2275	c9 00		cmp #$00			cmp 	#0
.2277	30 0c		bmi $2285			bmi 	_CNLoopRound 				; loop round if < =
.2279	a5 08		lda $08				lda 	temp2
.227b	f0 08		beq $2285			beq 	_CNLoopRound
.227d					_CNLoopExit:
.227d	68		pla				pla
.227e	a8		tay				tay
.227f	a9 0b		lda #$0b			lda 	#11
.2281	20 93 1d	jsr $1d93			jsr 	RSFree
.2284	60		rts				rts
.2285					_CNLoopRound:
.2285	68		pla				pla
.2286	a8		tay				tay
.2287	a9 01		lda #$01			lda 	#1
.2289	20 b0 1d	jsr $1db0			jsr 	RSLoadPosition				; go back to the loop top
.228c	60		rts				rts
.228d					_CNBadIndex:
.228d	a2 12		ldx #$12			ldx 	#ErrorID_BadIndex
.228f	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.2292					_CNCheckDownto:
.2292	c9 00		cmp #$00			cmp 	#0
.2294	10 ef		bpl $2285			bpl 	_CNLoopRound
.2296	4c 7d 22	jmp $227d			jmp 	_CNLoopExit
.2299					_CNCompare:
.2299	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.229b	f1 06		sbc ($06),y			sbc 	(temp1),y
.229d	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.229f	85 08		sta $08				sta 	temp2
.22a1	c8		iny				iny
.22a2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1072					CommandIf:
.1072	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; if what ?
.1075	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1077	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.1079	f0 04		beq $107f			beq 	_IfSimple
.107b	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.107d	d0 1b		bne $109a			bne 	_IfComplex
.107f					_IfSimple:
.107f	20 fd 1c	jsr $1cfd			jsr 	MInt32Zero					; check if TOS zero
.1082	f0 10		beq $1094			beq 	_IfEOL 						; go to next line.
.1084	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1086	c8		iny				iny
.1087	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1089	f0 0c		beq $1097			beq 	_IfGoto 					; do the Goto code
.108b	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.108d	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.108f	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1091	f0 04		beq $1097			beq 	_IfGoto
.1093	60		rts				rts 								; else continue on this line.
.1094					_IfEOL:
.1094	4c 6e 13	jmp $136e			jmp 	AdvanceNextLine 			; go to next line
.1097					_IfGoto:
.1097	4c ad 13	jmp $13ad			jmp 	CommandGoto
.109a					_IfComplex:
.109a	20 fd 1c	jsr $1cfd			jsr 	MInt32Zero 					; is it true ?
.109d	f0 01		beq $10a0			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.109f	60		rts				rts 								; else continue.
.10a0					_IFSkip:
.10a0	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a2	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a4	4c 0c 23	jmp $230c			jmp		ScanForward
.10a7					Command_ELSE:
.10a7	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a9	8a		txa				txa
.10aa	4c 0c 23	jmp $230c			jmp		ScanForward
.10ad					Command_ENDIF:
.10ad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10ae					CommandLet:
.10ae	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b0	20 a0 17	jsr $17a0			jsr 	EvaluateReference
.10b3	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b5	20 3e 1d	jsr $1d3e			jsr 	CheckToken
.10b8	e8		inx				inx 								; do RHS
.10b9	20 54 17	jsr $1754			jsr 	Evaluate 					; evaluate and derefernce
.10bc	ca		dex				dex
.10bd	20 c1 10	jsr $10c1			jsr 	WriteValue 					; write it out
.10c0	60		rts				rts
.10c1					WriteValue:
.10c1	98		tya				tya
.10c2	48		pha				pha
.10c3	20 23 11	jsr $1123			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c6	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10c8	55 41		eor $41,x			eor 	esType+1,x
.10ca	29 40		and #$40			and 	#$40
.10cc	d0 50		bne $111e			bne		_WVType
.10ce	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d0	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d2	29 40		and #$40			and 	#$40
.10d4	d0 1f		bne $10f5			bne 	_WVCopyString
.10d6	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10d8	15 41		ora $41,x			ora 	esType+1,x
.10da	4a		lsr a				lsr 	a
.10db	90 22		bcc $10ff			bcc 	_WVCopyData4
.10dd	b5 40		lda $40,x			lda 	esType,x
.10df	4a		lsr a				lsr 	a
.10e0	90 3c		bcc $111e			bcc 	_WVType
.10e2	e8		inx				inx 								; force the value being written to be a float.
.10e3	20 1f 14	jsr $141f			jsr 	BPMakeFloat
.10e6	ca		dex				dex
.10e7	20 23 11	jsr $1123			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ea	e8		inx				inx
.10eb	8a		txa				txa
.10ec	a2 1e		ldx #$1e		ldx	#30
.10ee	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.10f1	aa		tax				tax
.10f2	4c 1b 11	jmp $111b			jmp 	_WVCopyExit
.10f5					_WVCopyString:
.10f5	8a		txa				txa
.10f6	a2 08		ldx #$08		ldx	#8
.10f8	20 21 20	jsr $2021		jsr	stringHandler
.10fb	aa		tax				tax
.10fc	4c 1b 11	jmp $111b			jmp 	_WVCopyExit
.10ff					_WVCopyData4:
.10ff	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1101	29 20		and #$20			and 	#$20
.1103	d0 10		bne $1115			bne 	_WVCopyData1
.1105	a0 03		ldy #$03			ldy 	#3
.1107	b5 61		lda $61,x			lda 	esInt3+1,x
.1109	91 04		sta ($04),y			sta 	(temp0),y
.110b	88		dey				dey
.110c	b5 59		lda $59,x			lda 	esInt2+1,x
.110e	91 04		sta ($04),y			sta 	(temp0),y
.1110	88		dey				dey
.1111	b5 51		lda $51,x			lda 	esInt1+1,x
.1113	91 04		sta ($04),y			sta 	(temp0),y
.1115					_WVCopyData1:
.1115	a0 00		ldy #$00			ldy 	#0
.1117	b5 49		lda $49,x			lda 	esInt0+1,x
.1119	91 04		sta ($04),y			sta 	(temp0),y
.111b					_WVCopyExit:
.111b	68		pla				pla
.111c	a8		tay				tay
.111d	60		rts				rts
.111e					_WVType:
.111e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1120	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.1123					TOSToTemp0:
.1123	b5 48		lda $48,x			lda 	esInt0,x
.1125	85 04		sta $04				sta 	temp0
.1127	b5 50		lda $50,x			lda 	esInt1,x
.1129	85 05		sta $05				sta 	temp0+1
.112b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.112c					Command_New:
.112c	20 81 12	jsr $1281			jsr 	ResetCodeAddress 			; point to first line
.112f	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1131	98		tya				tya
.1132	91 02		sta ($02),y			sta 	(codePtr),y
.1134	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.1137	4c 6b 13	jmp $136b			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.113a					Command_Poke:
.113a	a9 01		lda #$01			lda 	#1
.113c	d0 06		bne $1144			bne 	PokeGeneral
.113e					Command_Doke:
.113e	a9 02		lda #$02			lda 	#2
.1140	d0 02		bne $1144			bne 	PokeGeneral
.1142					Command_Loke:
.1142	a9 03		lda #$03			lda 	#3
.1144					PokeGeneral:
.1144	48		pha				pha 								; save size
.1145	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; target address
.1148	20 56 1d	jsr $1d56			jsr	 	CheckComma
.114b	e8		inx				inx
.114c	20 73 17	jsr $1773			jsr 	EvaluateInteger 			; what value to POKE ?
.114f	ca		dex				dex
.1150	20 23 11	jsr $1123			jsr 	TOSToTemp0 					; temp0 points to the target address
.1153	84 0a		sty $0a				sty 	tempShort 					; save Y
.1155	68		pla				pla 								; get copy type and dispatch
.1156	aa		tax				tax
.1157	ca		dex				dex
.1158	f0 14		beq $116e			beq 	_Poke1
.115a	ca		dex				dex
.115b	f0 0b		beq $1168			beq 	_Poke2
.115d	a0 03		ldy #$03			ldy 	#3
.115f	a5 61		lda $61				lda 	esInt3+1
.1161	91 04		sta ($04),y			sta 	(temp0),y
.1163	88		dey				dey
.1164	a5 59		lda $59				lda 	esInt2+1
.1166	91 04		sta ($04),y			sta 	(temp0),y
.1168					_Poke2:
.1168	a0 01		ldy #$01			ldy 	#1
.116a	a5 51		lda $51				lda 	esInt1+1
.116c	91 04		sta ($04),y			sta 	(temp0),y
.116e					_Poke1:
.116e	a0 00		ldy #$00			ldy 	#0
.1170	a5 49		lda $49				lda 	esInt0+1
.1172	91 04		sta ($04),y			sta 	(temp0),y
.1174	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1176	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af0					lastPrintToken:
>0af0							.fill 	1
.1177					Command_Print:
.1177	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1179	8d f0 0a	sta $0af0			sta 	lastPrintToken
.117c	88		dey				dey
.117d					_PrintLoopSkip:
.117d	c8		iny				iny
.117e					_PrintLoop:
.117e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1180	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1182	f0 5b		beq $11df			beq 	_PrintExit
.1184	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.1186	f0 57		beq $11df			beq 	_PrintExit
.1188	8d f0 0a	sta $0af0			sta 	lastPrintToken 				; update LPT
.118b	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.118d	f0 ee		beq $117d			beq 	_PrintLoopSkip
.118f	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.1191	f0 3c		beq $11cf			beq	 	_PrintNewLine
.1193	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.1195	f0 40		beq $11d7			beq 	_PrintTab
.1197	20 52 17	jsr $1752			jsr 	EvaluateRoot 				; evaluate something at the root
.119a	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.119c	85 04		sta $04				sta 	temp0
.119e	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11a0	85 05		sta $05				sta 	1+(temp0)
.11a2	a5 40		lda $40				lda 	esType 						; get type
.11a4	f0 15		beq $11bb			beq		_PrintInteger
.11a6	4a		lsr a				lsr 	a 							; check for floating point
.11a7	b0 08		bcs $11b1			bcs 	_PrintFloat
.11a9					_PrintString:
.11a9	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.11ab	20 23 11	jsr $1123			jsr 	TOSToTemp0
.11ae	4c c9 11	jmp $11c9			jmp 	_PrintTemp0 				; print no leading space.
.11b1					_PrintFloat:
.11b1	a9 00		lda #$00			lda 	#0 							; stack level.
.11b3	a2 14		ldx #$14		ldx	#20
.11b5	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.11b8	4c c2 11	jmp $11c2			jmp 	_PrintSpaceTemp0
.11bb					_PrintInteger:
.11bb	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11bd	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11bf	20 2c 1c	jsr $1c2c			jsr 	MInt32ToString				; convert to text
.11c2					_PrintSpaceTemp0:
.11c2	a9 20		lda #$20			lda 	#32
.11c4	a2 04		ldx #$04		ldx	#4
.11c6	20 f7 1d	jsr $1df7		jsr	deviceHandler
.11c9					_PrintTemp0:
.11c9	20 f0 11	jsr $11f0			jsr 	PrintString
.11cc	4c 7e 11	jmp $117e			jmp 	_PrintLoop
.11cf					_PrintNewLine:
.11cf	a2 00		ldx #$00		ldx	#0
.11d1	20 f7 1d	jsr $1df7		jsr	deviceHandler
.11d4	4c 7d 11	jmp $117d			jmp 	_PrintLoopSkip
.11d7					_PrintTab:
.11d7	a2 06		ldx #$06		ldx	#6
.11d9	20 f7 1d	jsr $1df7		jsr	deviceHandler
.11dc	4c 7d 11	jmp $117d			jmp 	_PrintLoopSkip
.11df					_PrintExit:
.11df	ad f0 0a	lda $0af0			lda		lastPrintToken 				; check last token
.11e2	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11e4	f0 09		beq $11ef			beq 	_PrintExit2
.11e6	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.11e8	f0 05		beq $11ef			beq 	_PrintExit2
.11ea	a2 00		ldx #$00		ldx	#0
.11ec	20 f7 1d	jsr $1df7		jsr	deviceHandler
.11ef					_PrintExit2:
.11ef	60		rts				rts
.11f0					PrintString:
.11f0	8a		txa				txa
.11f1	48		pha				pha
.11f2	98		tya				tya
.11f3	48		pha				pha
.11f4	a0 00		ldy #$00			ldy 	#0							; get length
.11f6	b1 04		lda ($04),y			lda 	(temp0),y
.11f8	aa		tax				tax 								; into X
.11f9	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.11fb	f0 10		beq $120d			beq 	_PSExit
.11fd	ca		dex				dex
.11fe	8a		txa				txa
.11ff	48		pha				pha
.1200	c8		iny				iny
.1201	b1 04		lda ($04),y			lda 	(temp0),y
.1203	a2 04		ldx #$04		ldx	#4
.1205	20 f7 1d	jsr $1df7		jsr	deviceHandler
.1208	68		pla				pla
.1209	aa		tax				tax
.120a	4c f9 11	jmp $11f9			jmp 	_PSLoop
.120d					_PSExit:
.120d	68		pla				pla
.120e	a8		tay				tay
.120f	68		pla				pla
.1210	aa		tax				tax
.1211	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1212					Command_Rem:
.1212					Command_Rem2:
.1212	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1214	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1216	d0 06		bne $121e			bne 	_CRNotString
.1218	c8		iny				iny
.1219	98		tya				tya
.121a	38		sec				sec
.121b	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.121d	a8		tay				tay
.121e					_CRNotString:
.121e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.22a3					Command_Repeat:
.22a3	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.22a5	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.22a7	20 71 1d	jsr $1d71			jsr 	RSClaim
.22aa	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.22ac	20 9d 1d	jsr $1d9d			jsr 	RSSavePosition
.22af	60		rts				rts
.22b0					Command_Until:
.22b0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.22b2	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.22b4	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.22b6	f0 05		beq $22bd			beq 	_isok
.22b8	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.22ba	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.22bd					_isok:
.22bd	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; at the bottom.
.22c0	20 fd 1c	jsr $1cfd			jsr 	MInt32Zero					; check if TOS zero
.22c3	d0 06		bne $22cb			bne 	_CUExit
.22c5	a9 01		lda #$01			lda 	#1
.22c7	20 b0 1d	jsr $1db0			jsr 	RSLoadPosition 				; reload the position from offset 1.
.22ca	60		rts				rts
.22cb					_CUExit:
.22cb	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.22cd	20 93 1d	jsr $1d93			jsr 	RSFree
.22d0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.121f					Command_Run:
.121f	a2 ff		ldx #$ff			ldx 	#$FF
.1221	9a		txs				txs
.1222	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.1225	20 81 12	jsr $1281			jsr 	ResetCodeAddress
.1228	a0 03		ldy #$03			ldy 	#3
.122a					CRNextInstruction:
.122a	64 7b		stz $7b				stz 	softMemAlloc+1
.122c	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.122e	10 1c		bpl $124c			bpl 	_CRNotToken
.1230	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1232	b0 0c		bcs $1240			bcs 	_CRExecute
.1234	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1236	b0 56		bcs $128e			bcs 	Unimplemented
.1238	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.123a	b0 04		bcs $1240			bcs 	_CRExecute
.123c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.123e	b0 16		bcs $1256			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1240					_CRExecute:
.1240	c8		iny				iny 								; consume it.
.1241	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1242	aa		tax				tax
.1243	20 49 12	jsr $1249			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1246	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.1249					_CRRunRoutine:
.1249	7c 98 12	jmp ($1298,x)			jmp 	(Group0Vectors,x)
.124c					_CRNotToken:
.124c	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.124e	b0 3e		bcs $128e			bcs 	Unimplemented
.1250					_CRDefaultLet:
.1250	20 ae 10	jsr $10ae			jsr 	CommandLet 					; do the default, LET
.1253	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.1256					_CRCheckIndirect:
.1256	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1258	f0 f6		beq $1250			beq 	_CRDefaultLet
.125a	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.125c	f0 f2		beq $1250			beq 	_CRDefaultLet
.125e	d0 2e		bne $128e			bne 	Unimplemented
.1260					CommandShift1:
.1260	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1262	10 2a		bpl $128e			bpl 	Unimplemented 				; we have an error as this should not happen.
.1264	0a		asl a				asl 	a 							; double into X
.1265	aa		tax				tax
.1266	c8		iny				iny 								; advance over it.
.1267	20 6d 12	jsr $126d			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.126a	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.126d					_RunIt:
.126d	7c 44 13	jmp ($1344,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.1270					CommandShift2:
.1270	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1272	10 1a		bpl $128e			bpl 	Unimplemented 				; we have an error as this should not happen.
.1274	0a		asl a				asl 	a 							; double into X
.1275	aa		tax				tax
.1276	c8		iny				iny 								; advance over it.
.1277	20 7d 12	jsr $127d			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.127a	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.127d					_RunIt:
.127d	7c 58 13	jmp ($1358,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.1280					CommandColon:
.1280	60		rts				rts
.1281					ResetCodeAddress:
.1281	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1284	85 02		sta $02				sta 	codePtr
.1286	ad c9 0a	lda $0ac9			lda 	basePage+1
.1289	85 03		sta $03				sta 	codePtr+1
.128b	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.128d	60		rts				rts
.128e					Unimplemented:
.128e	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1290	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.1293					TKErr01:
.1293					TKErr02:
.1293					TKErr03:
.1293					TKErr04:
.1293					TKErr05:
.1293					TKErr06:
.1293					TKErr07:
.1293					TKErr08:
.1293	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1295	20 04 1e	jsr $1e04			jsr 	ErrorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1298					Group0Vectors:
>1298	6e 13					.word	AdvanceNextLine          ; $80 [[eol]]
>129a	60 12					.word	CommandShift1            ; $81 [[sh1]]
>129c	70 12					.word	CommandShift2            ; $82 [[sh2]]
>129e	8e 12					.word	Unimplemented            ; $83 [[sh3]]
>12a0	8e 12					.word	Unimplemented            ; $84 [[fpc]]
>12a2	93 12					.word	TKErr08                  ; $85 [[str]]
>12a4	c1 14					.word	AndHandler               ; $86 and
>12a6	ae 14					.word	OrHandler                ; $87 or
>12a8	9b 14					.word	XorHandler               ; $88 xor
>12aa	e3 15					.word	CompareGreaterEq         ; $89 >=
>12ac	ed 15					.word	CompareLessEq            ; $8a <=
>12ae	cf 15					.word	CompareGreater           ; $8b >
>12b0	c5 15					.word	CompareLess              ; $8c <
>12b2	bb 15					.word	CompareEquals            ; $8d =
>12b4	d9 15					.word	CompareNotEquals         ; $8e <>
>12b6	2c 14					.word	AddHandler               ; $8f +
>12b8	4f 14					.word	SubHandler               ; $90 -
>12ba	e7 14					.word	ShrHandler               ; $91 >>
>12bc	d4 14					.word	ShlHandler               ; $92 <<
>12be	62 14					.word	MulHandler               ; $93 *
>12c0	75 14					.word	DivHandler               ; $94 /
>12c2	88 14					.word	ModHandler               ; $95 mod
>12c4	20 15					.word	PowerHandler             ; $96 ^
>12c6	fa 14					.word	WordRefHandler           ; $97 !
>12c8	0d 15					.word	ByteRefHandler           ; $98 ?
>12ca	a3 22					.word	Command_Repeat           ; $99 repeat
>12cc	d1 22					.word	Command_While            ; $9a while
>12ce	94 21					.word	Command_FOR              ; $9b for
>12d0	72 10					.word	CommandIf                ; $9c if
>12d2	93 12					.word	TKErr04                  ; $9d defproc
>12d4	b0 22					.word	Command_Until            ; $9e until
>12d6	f4 22					.word	Command_Wend             ; $9f wend
>12d8	f5 21					.word	Command_NEXT             ; $a0 next
>12da	93 12					.word	TKErr06                  ; $a1 then
>12dc	ad 10					.word	Command_ENDIF            ; $a2 endif
>12de	8e 12					.word	Unimplemented            ; $a3 endproc
>12e0	2a 17					.word	UnaryParenthesis         ; $a4 (
>12e2	ff 17					.word	UnaryLen                 ; $a5 len(
>12e4	43 18					.word	UnarySgn                 ; $a6 sgn(
>12e6	2c 18					.word	UnaryAbs                 ; $a7 abs(
>12e8	9c 18					.word	Unary_Random             ; $a8 random(
>12ea	e6 18					.word	Unary_Page               ; $a9 page
>12ec	d2 1c					.word	MInt32True               ; $aa true
>12ee	d6 1c					.word	MInt32False              ; $ab false
>12f0	b1 18					.word	Unary_Min                ; $ac min(
>12f2	b5 18					.word	Unary_Max                ; $ad max(
>12f4	9b 19					.word	UnarySys                 ; $ae sys(
>12f6	5f 19					.word	UnaryTimer               ; $af timer(
>12f8	8e 12					.word	Unimplemented            ; $b0 event(
>12fa	87 19					.word	UnaryGet                 ; $b1 get(
>12fc	77 19					.word	UnaryInkey               ; $b2 inkey(
>12fe	33 19					.word	UnaryAlloc               ; $b3 alloc(
>1300	c3 19					.word	ExecChr                  ; $b4 chr$(
>1302	d7 19					.word	ExecLeft                 ; $b5 left$(
>1304	f4 19					.word	ExecMid                  ; $b6 mid$(
>1306	1c 1a					.word	ExecRight                ; $b7 right$(
>1308	8e 12					.word	Unimplemented            ; $b8 str$(
>130a	8e 12					.word	Unimplemented            ; $b9 val(
>130c	5a 18					.word	UnaryPeek                ; $ba peek(
>130e	60 18					.word	UnaryDeek                ; $bb deek(
>1310	66 18					.word	UnaryLeek                ; $bc leek(
>1312	1d 18					.word	UnaryAsc                 ; $bd asc(
>1314	11 19					.word	UnaryIntToFloat          ; $be int(
>1316	24 19					.word	UnaryFloatToInt          ; $bf float(
>1318	8e 12					.word	Unimplemented            ; $c0 isval(
>131a	f4 18					.word	UnaryReference           ; $c1 @
>131c	0a 19					.word	UnaryComplement          ; $c2 ~
>131e	07 19					.word	UnaryHexMarker           ; $c3 &
>1320	93 12					.word	TKErr01                  ; $c4 )
>1322	80 12					.word	CommandColon             ; $c5 :
>1324	93 12					.word	TKErr02                  ; $c6 ,
>1326	93 12					.word	TKErr03                  ; $c7 ;
>1328	12 12					.word	Command_Rem2             ; $c8 '
>132a	93 12					.word	TKErr07                  ; $c9 to
>132c	93 12					.word	TKErr05                  ; $ca step
>132e	8e 12					.word	Unimplemented            ; $cb proc
>1330	8e 12					.word	Unimplemented            ; $cc local
>1332	8e 12					.word	Unimplemented            ; $cd dim
>1334	12 12					.word	Command_Rem              ; $ce rem
>1336	ae 10					.word	CommandLet               ; $cf let
>1338	8e 12					.word	Unimplemented            ; $d0 input
>133a	a7 10					.word	Command_ELSE             ; $d1 else
>133c	df 13					.word	Command_VDU              ; $d2 vdu
>133e	77 11					.word	Command_Print            ; $d3 print
>1340	ad 13					.word	CommandGOTO              ; $d4 goto
>1342	82 13					.word	CommandGOSUB             ; $d5 gosub
>1344	95 13					.word	CommandRETURN            ; $d6 return
>1346	8e 12					.word	Unimplemented            ; $d7 data
>1348	1a 10					.word	Command_Assert           ; $d8 assert
>134a	3a 11					.word	Command_Poke             ; $d9 poke
>134c	3e 11					.word	Command_Doke             ; $da doke
>134e	42 11					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1350					Group1Vectors:
>1350	28 10					.word	CommandClear             ; $86 clear
>1352	8e 12					.word	Unimplemented            ; $87 load
>1354	8e 12					.word	Unimplemented            ; $88 save
>1356	8e 12					.word	Unimplemented            ; $89 list
>1358	2c 11					.word	Command_New              ; $8a new
>135a	1f 12					.word	Command_Run              ; $8b run
>135c	8e 12					.word	Unimplemented            ; $8c read
>135e	8e 12					.word	Unimplemented            ; $8d restore
>1360	6b 13					.word	CommandEnd               ; $8e end
>1362	66 13					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors2.inc

.1364					Group2Vectors:
>1364	8e 12					.word	Unimplemented            ; $86 vpoke

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1366					CommandStop:
.1366	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1368	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.136b					CommandEnd:
.136b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.136e					AdvanceNextLine:
.136e	a0 00		ldy #$00			ldy 	#0 							; get offset
.1370	b1 02		lda ($02),y			lda 	(codePtr),y
.1372	18		clc				clc 								; add to codePtr
.1373	65 02		adc $02				adc 	codePtr
.1375	85 02		sta $02				sta 	codePtr
.1377	90 02		bcc $137b			bcc 	_ANLNoCarry
.1379	e6 03		inc $03				inc 	codePtr+1
.137b					_ANLNoCarry:
.137b	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.137d	f0 ec		beq $136b			beq 	CommandEnd 					; execute END
.137f	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1381	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1382					CommandGOSUB:
.1382	20 71 17	jsr $1771			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1385	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1387	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1389	20 71 1d	jsr $1d71			jsr 	RSClaim
.138c	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.138e	20 9d 1d	jsr $1d9d			jsr 	RSSavePosition
.1391	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1393	f0 1b		beq $13b0			beq 	GotoTOS 					; and do a GOTO there.
.1395					CommandRETURN:
.1395	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1397	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1399	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.139b	f0 05		beq $13a2			beq 	_isok
.139d	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.139f	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.13a2					_isok:
.13a2	a9 01		lda #$01			lda 	#1
.13a4	20 b0 1d	jsr $1db0			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13a7	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13a9	20 93 1d	jsr $1d93			jsr 	RSFree
.13ac	60		rts				rts
.13ad					CommandGOTO:
.13ad	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.13b0					GotoTOS:
.13b0	20 81 12	jsr $1281			jsr 	ResetCodeAddress 			; simple search.
.13b3					_GotoSearch:
.13b3	a0 00		ldy #$00			ldy 	#0 							; get offset
.13b5	b1 02		lda ($02),y			lda 	(codePtr),y
.13b7	f0 21		beq $13da			beq 	_GotoError 					; not found.
.13b9	c8		iny				iny									; check LSB match
.13ba	b1 02		lda ($02),y			lda 	(codePtr),y
.13bc	d5 48		cmp $48,x			cmp 	esInt0,x
.13be	d0 07		bne $13c7			bne 	_GotoNext
.13c0	c8		iny				iny
.13c1	b1 02		lda ($02),y			lda 	(codePtr),y
.13c3	d5 50		cmp $50,x			cmp 	esInt1,x
.13c5	f0 10		beq $13d7			beq 	_GotoFound
.13c7					_GotoNext:
.13c7	a0 00		ldy #$00			ldy 	#0 							; go next line
.13c9	b1 02		lda ($02),y			lda 	(codePtr),y
.13cb	18		clc				clc
.13cc	65 02		adc $02				adc 	codePtr
.13ce	85 02		sta $02				sta 	codePtr
.13d0	90 e1		bcc $13b3			bcc 	_GotoSearch
.13d2	e6 03		inc $03				inc 	codePtr+1
.13d4	4c b3 13	jmp $13b3			jmp 	_GotoSearch
.13d7					_GotoFound:
.13d7	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.13d9	60		rts				rts
.13da					_GotoError:
.13da	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.13dc	20 04 1e	jsr $1e04			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.13df					Command_VDU:
.13df	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 			; get integer at root.
.13e2	a5 48		lda $48				lda 	esInt0
.13e4	a2 04		ldx #$04		ldx	#4
.13e6	20 f7 1d	jsr $1df7		jsr	deviceHandler
.13e9					_CVNext:
.13e9	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.13eb	c8		iny				iny
.13ec	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.13ee	f0 ef		beq $13df			beq 	Command_VDU
.13f0	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.13f2	d0 0a		bne $13fe			bne 	_CVExit
.13f4	a5 50		lda $50				lda 	esInt1
.13f6	a2 04		ldx #$04		ldx	#4
.13f8	20 f7 1d	jsr $1df7		jsr	deviceHandler
.13fb	4c e9 13	jmp $13e9			jmp 	_CVNext
.13fe	88		dey		_CVExit:dey
.13ff	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.22d1					Command_While:
.22d1	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.22d3	a2 04		ldx #$04			ldx 	#4
.22d5	20 71 1d	jsr $1d71			jsr 	RSClaim 					; create on stack.
.22d8	88		dey				dey
.22d9	a9 01		lda #$01			lda 	#1
.22db	20 9d 1d	jsr $1d9d			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.22de	c8		iny				iny
.22df	20 73 17	jsr $1773			jsr 	EvaluateInteger				; get the conditional
.22e2	20 fd 1c	jsr $1cfd			jsr 	MInt32Zero 	 				; if zero, skip forward.
.22e5	f0 01		beq $22e8			beq 	_CWFail
.22e7	60		rts				rts
.22e8					_CWFail:
.22e8	a9 04		lda #$04			lda 	#4
.22ea	20 93 1d	jsr $1d93			jsr 	RSFree 						; close the just opened position.
.22ed	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.22ef	aa		tax				tax
.22f0	20 0c 23	jsr $230c			jsr 	ScanForward
.22f3	60		rts				rts
.22f4					Command_Wend:
.22f4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.22f6	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.22f8	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.22fa	f0 05		beq $2301			beq 	_isok
.22fc	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.22fe	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.2301					_isok:
.2301	a9 01		lda #$01			lda 	#1
.2303	20 b0 1d	jsr $1db0			jsr 	RSLoadPosition				; go back until true
.2306	a9 04		lda #$04			lda 	#4
.2308	20 93 1d	jsr $1d93			jsr 	RSFree 						; close the loop
.230b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1400					BinaryProcess:
.1400	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1402	15 41		ora $41,x			ora 	esType+1,x
.1404	0a		asl a				asl 	a
.1405	30 0e		bmi $1415			bmi 	_BPStringType 				; if one is set, then string type.
.1407	18		clc				clc 								; return CC for integer
.1408	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.140a	f0 08		beq $1414			beq 	_BPExit 					; if both integer then return with CC.
.140c	20 1a 14	jsr $141a			jsr 	BPMakeBothFloat 			; make both float
.140f	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1411	95 40		sta $40,x			sta 	esType,x
.1413	38		sec				sec 								; and return with carry set.
.1414					_BPExit:
.1414	60		rts				rts
.1415					_BPStringType:
.1415	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1417	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.141a					BPMakeBothFloat:
.141a	e8		inx				inx
.141b	20 1f 14	jsr $141f			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.141e	ca		dex				dex
.141f					BPMakeFloat:
.141f	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1421	4a		lsr a				lsr 	a
.1422	b0 07		bcs $142b			bcs 	_BPIsFloat
.1424	8a		txa				txa
.1425	a2 1a		ldx #$1a		ldx	#26
.1427	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.142a	aa		tax				tax
.142b					_BPIsFloat:
.142b	60		rts				rts
.142c					AddHandler:
.142c	20 fd 15	jsr $15fd			jsr 	DereferenceTwo 				; dereference top two on stack.
.142f	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1431	35 41		and $41,x			and 	esType+1,x
.1433	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1435	d0 10		bne $1447			bne 	_AHStringConcat				; concatenate strings.
.1437	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.143a	b0 03		bcs $143f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.143c	4c c1 1b	jmp $1bc1			jmp 	MInt32Add 							; else do it as integer.
.143f					_IsFPOperation:
.143f	8a		txa				txa 								; call the relevant fp routine
.1440	a2 02		ldx #$02		ldx	#2
.1442	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.1445	aa		tax				tax
.1446	60		rts				rts
.1447					_AHStringConcat:
.1447	8a		txa				txa
.1448	a2 02		ldx #$02		ldx	#2
.144a	20 21 20	jsr $2021		jsr	stringHandler
.144d	aa		tax				tax
.144e	60		rts				rts
.144f					SubHandler:
.144f	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1452	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1455	b0 03		bcs $145a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1457	4c db 1b	jmp $1bdb			jmp 	MInt32Sub 							; else do it as integer.
.145a					_IsFPOperation:
.145a	8a		txa				txa 								; call the relevant fp routine
.145b	a2 10		ldx #$10		ldx	#16
.145d	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.1460	aa		tax				tax
.1461	60		rts				rts
.1462					MulHandler:
.1462	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1465	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1468	b0 03		bcs $146d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.146a	4c f5 1b	jmp $1bf5			jmp 	MInt32Multiply 							; else do it as integer.
.146d					_IsFPOperation:
.146d	8a		txa				txa 								; call the relevant fp routine
.146e	a2 0a		ldx #$0a		ldx	#10
.1470	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.1473	aa		tax				tax
.1474	60		rts				rts
.1475					DivHandler:
.1475	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1478	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.147b	b0 03		bcs $1480			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.147d	4c cf 1a	jmp $1acf			jmp 	MInt32SDivide 							; else do it as integer.
.1480					_IsFPOperation:
.1480	8a		txa				txa 								; call the relevant fp routine
.1481	a2 06		ldx #$06		ldx	#6
.1483	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.1486	aa		tax				tax
.1487	60		rts				rts
.1488					ModHandler:
.1488	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.148b	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.148e	b0 03		bcs $1493			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1490	4c 4d 1b	jmp $1b4d			jmp 	MInt32Modulus 							; else do it as integer.
.1493					_IsFPOperation:
.1493	8a		txa				txa 								; call the relevant fp routine
.1494	a2 08		ldx #$08		ldx	#8
.1496	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.1499	aa		tax				tax
.149a	60		rts				rts
.149b					XorHandler:
.149b	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.149e	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14a1	b0 03		bcs $14a6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14a3	4c 81 1a	jmp $1a81			jmp 	MInt32Xor 							; else do it as integer.
.14a6					_IsFPOperation:
.14a6	8a		txa				txa 								; call the relevant fp routine
.14a7	a2 08		ldx #$08		ldx	#8
.14a9	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.14ac	aa		tax				tax
.14ad	60		rts				rts
.14ae					OrHandler:
.14ae	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14b1	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14b4	b0 03		bcs $14b9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14b6	4c 68 1a	jmp $1a68			jmp 	MInt32Or 							; else do it as integer.
.14b9					_IsFPOperation:
.14b9	8a		txa				txa 								; call the relevant fp routine
.14ba	a2 08		ldx #$08		ldx	#8
.14bc	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.14bf	aa		tax				tax
.14c0	60		rts				rts
.14c1					AndHandler:
.14c1	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14c4	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14c7	b0 03		bcs $14cc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14c9	4c 4f 1a	jmp $1a4f			jmp 	MInt32And 							; else do it as integer.
.14cc					_IsFPOperation:
.14cc	8a		txa				txa 								; call the relevant fp routine
.14cd	a2 08		ldx #$08		ldx	#8
.14cf	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.14d2	aa		tax				tax
.14d3	60		rts				rts
.14d4					ShlHandler:
.14d4	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14d7	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14da	b0 03		bcs $14df			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14dc	4c 55 15	jmp $1555			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.14df					_IsFPOperation:
.14df	8a		txa				txa 								; call the relevant fp routine
.14e0	a2 08		ldx #$08		ldx	#8
.14e2	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.14e5	aa		tax				tax
.14e6	60		rts				rts
.14e7					ShrHandler:
.14e7	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14ea	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14ed	b0 03		bcs $14f2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14ef	4c 58 15	jmp $1558			jmp 	MInt32ShiftRightX 							; else do it as integer.
.14f2					_IsFPOperation:
.14f2	8a		txa				txa 								; call the relevant fp routine
.14f3	a2 08		ldx #$08		ldx	#8
.14f5	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.14f8	aa		tax				tax
.14f9	60		rts				rts
.14fa					WordRefHandler:
.14fa	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14fd	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1500	b0 03		bcs $1505			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1502	4c 47 15	jmp $1547			jmp 	MInt32WordIndirect 							; else do it as integer.
.1505					_IsFPOperation:
.1505	8a		txa				txa 								; call the relevant fp routine
.1506	a2 08		ldx #$08		ldx	#8
.1508	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.150b	aa		tax				tax
.150c	60		rts				rts
.150d					ByteRefHandler:
.150d	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1510	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1513	b0 03		bcs $1518			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1515	4c 4b 15	jmp $154b			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1518					_IsFPOperation:
.1518	8a		txa				txa 								; call the relevant fp routine
.1519	a2 08		ldx #$08		ldx	#8
.151b	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.151e	aa		tax				tax
.151f	60		rts				rts
.1520					PowerHandler:
.1520	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1523	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1526	b0 03		bcs $152b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1528	4c 33 15	jmp $1533			jmp 	PowerInteger 							; else do it as integer.
.152b					_IsFPOperation:
.152b	8a		txa				txa 								; call the relevant fp routine
.152c	a2 16		ldx #$16		ldx	#22
.152e	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.1531	aa		tax				tax
.1532	60		rts				rts
.1533					PowerInteger:
.1533	20 1a 14	jsr $141a			jsr 	BPMakeBothFloat				; make them float.
.1536	8a		txa				txa
.1537	a2 16		ldx #$16		ldx	#22
.1539	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.153c	a2 12		ldx #$12		ldx	#18
.153e	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.1541	aa		tax				tax
.1542	a9 00		lda #$00			lda 	#0 							; make type integer
.1544	95 40		sta $40,x			sta 	esType,x
.1546	60		rts				rts
.1547					Mint32WordIndirect:
.1547	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1549	d0 02		bne $154d			bne 	Min32Indirect
.154b					Mint32ByteIndirect:
.154b	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.154d					Min32Indirect:
.154d	48		pha				pha 								; save the indirection
.154e	20 c1 1b	jsr $1bc1			jsr 	MInt32Add 					; add a!b a?b
.1551	68		pla				pla 								; and set the type to reference.
.1552	95 40		sta $40,x			sta 	esType,x
.1554	60		rts				rts
.1555					Mint32ShiftLeftX:
.1555	18		clc				clc
.1556	90 01		bcc $1559			bcc 	Mint32Shift
.1558					Mint32ShiftRightX:
.1558	38		sec				sec
.1559					Mint32Shift:
.1559	08		php				php 								; save carry flag on stack.
.155a	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.155c	15 59		ora $59,x			ora 	esInt2+1,x
.155e	15 61		ora $61,x			ora 	esInt3+1,x
.1560	d0 1e		bne $1580			bne 	_MShiftZero
.1562	b5 49		lda $49,x			lda 	esInt0+1,x
.1564	c9 20		cmp #$20			cmp 	#32
.1566	b0 18		bcs $1580			bcs 	_MShiftZero
.1568					_MShiftLoop:
.1568	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.156a	f0 12		beq $157e			beq 	_MShiftExit
.156c	d6 49		dec $49,x			dec 	esInt0+1,x
.156e	28		plp				plp 								; restore and save carry
.156f	08		php				php
.1570	90 06		bcc $1578			bcc 	_MShiftLeft
.1572	20 f4 1c	jsr $1cf4			jsr 	Mint32ShiftRight
.1575	4c 68 15	jmp $1568			jmp 	_MShiftLoop
.1578					_MShiftLeft:
.1578	20 eb 1c	jsr $1ceb			jsr 	Mint32ShiftLeft
.157b	4c 68 15	jmp $1568			jmp 	_MShiftLoop
.157e					_MShiftExit:
.157e	28		plp				plp	 								; throw saved carry and exit
.157f	60		rts				rts
.1580					_MShiftZero:
.1580	4c d6 1c	jmp $1cd6			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.1583					PerformComparison:
.1583	20 fd 15	jsr $15fd			jsr 	DereferenceTwo 				; make both values.
.1586	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1588	35 41		and $41,x			and 	esType+1,x
.158a	0a		asl a				asl 	a
.158b	30 1d		bmi $15aa			bmi 	_PCIsString
.158d	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.158f	15 41		ora $41,x			ora 	esType+1,x
.1591	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1592	30 22		bmi $15b6			bmi 	_PCError
.1594	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1596	f0 0f		beq $15a7			beq 	_PCIsInteger 				; if not two integers
.1598	20 1a 14	jsr $141a			jsr 	BPMakeBothFloat 			; make both float
.159b	8a		txa				txa
.159c	a2 04		ldx #$04		ldx	#4
.159e	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.15a1	86 0a		stx $0a				stx 	tempShort 					; save result
.15a3	aa		tax				tax
.15a4	a5 0a		lda $0a				lda 	tempShort
.15a6	60		rts				rts
.15a7					_PCIsInteger:
.15a7	4c 9a 1a	jmp $1a9a			jmp 	MInt32Compare
.15aa					_PCIsString:
.15aa	8a		txa				txa 								; A has SP
.15ab	a2 04		ldx #$04		ldx	#4
.15ad	20 21 20	jsr $2021		jsr	stringHandler
.15b0	86 0a		stx $0a				stx 	tempShort 					; save result
.15b2	aa		tax				tax 								; put SP back in X and get result.
.15b3	a5 0a		lda $0a				lda 	tempShort
.15b5	60		rts				rts
.15b6					_PCError:
.15b6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.15b8	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.15bb					CompareEquals:
.15bb	20 83 15	jsr $1583			jsr 	PerformComparison
.15be	c9 00		cmp #$00			cmp 	#$00
.15c0	f0 35		beq $15f7			beq  	CompareTrue
.15c2	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15c5					CompareLess:
.15c5	20 83 15	jsr $1583			jsr 	PerformComparison
.15c8	c9 ff		cmp #$ff			cmp 	#$FF
.15ca	f0 2b		beq $15f7			beq  	CompareTrue
.15cc	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15cf					CompareGreater:
.15cf	20 83 15	jsr $1583			jsr 	PerformComparison
.15d2	c9 01		cmp #$01			cmp 	#$01
.15d4	f0 21		beq $15f7			beq  	CompareTrue
.15d6	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15d9					CompareNotEquals:
.15d9	20 83 15	jsr $1583			jsr 	PerformComparison
.15dc	c9 00		cmp #$00			cmp 	#$00
.15de	d0 17		bne $15f7			bne  	CompareTrue
.15e0	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15e3					CompareGreaterEq:
.15e3	20 83 15	jsr $1583			jsr 	PerformComparison
.15e6	c9 ff		cmp #$ff			cmp 	#$FF
.15e8	d0 0d		bne $15f7			bne  	CompareTrue
.15ea	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15ed					CompareLessEq:
.15ed	20 83 15	jsr $1583			jsr 	PerformComparison
.15f0	c9 01		cmp #$01			cmp 	#$01
.15f2	d0 03		bne $15f7			bne  	CompareTrue
.15f4	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15f7					CompareTrue:
.15f7	4c d2 1c	jmp $1cd2			jmp 	MInt32True
.15fa					CompareFalse:
.15fa	4c d6 1c	jmp $1cd6			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.15fd					DereferenceTwo:
.15fd	e8		inx				inx
.15fe	20 02 16	jsr $1602			jsr 	DereferenceOne
.1601	ca		dex				dex
.1602					DereferenceOne:
.1602	b5 40		lda $40,x			lda 	esType,x
.1604	10 3d		bpl $1643			bpl 	_DRNotReference 			; is it a reference ?
.1606	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1607	b0 3b		bcs $1644			bcs 	_DRFloatDeReference
.1609	98		tya				tya
.160a	48		pha				pha
.160b	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.160d	85 04		sta $04				sta 	temp0
.160f	b5 50		lda $50,x			lda 	esInt1,x
.1611	85 05		sta $05				sta 	temp0+1
.1613	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1615	95 50		sta $50,x			sta 	esInt1,x
.1617	95 58		sta $58,x			sta 	esInt2,x
.1619	95 60		sta $60,x			sta 	esInt3,x
.161b	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.161d	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.161f	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1620	30 0d		bmi $162f			bmi 	_DeRefString 				; string, 2 bytes only
.1622	d0 11		bne $1635			bne 	_DeRefByte 					; byte 1 byte only
.1624					_DeRefLong:
.1624	a0 03		ldy #$03			ldy 	#3
.1626	b1 04		lda ($04),y			lda 	(temp0),y
.1628	95 60		sta $60,x			sta 	esInt3,x
.162a	88		dey				dey
.162b	b1 04		lda ($04),y			lda 	(temp0),y
.162d	95 58		sta $58,x			sta 	esInt2,x
.162f					_DeRefString:
.162f	a0 01		ldy #$01			ldy 	#1
.1631	b1 04		lda ($04),y			lda 	(temp0),y
.1633	95 50		sta $50,x			sta 	esInt1,x
.1635					_DeRefByte:
.1635	a0 00		ldy #$00			ldy 	#0
.1637	b1 04		lda ($04),y			lda 	(temp0),y
.1639	95 48		sta $48,x			sta 	esInt0,x
.163b	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.163d	29 40		and #$40			and 	#$40
.163f	95 40		sta $40,x			sta 	esType,x
.1641	68		pla				pla
.1642	a8		tay				tay
.1643					_DRNotReference
.1643	60		rts				rts
.1644					_DRFloatDereference:
.1644	8a		txa				txa
.1645							floatingpoint_deref
.1645	aa		tax				tax
.1646	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1648	95 40		sta $40,x			sta 	esType,x
.164a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.164b					EvaluateLevel:
.164b	48		pha				pha 								; save precedence level.
.164c	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.164e	95 48		sta $48,x			sta 	esInt0,x
.1650	95 50		sta $50,x			sta 	esInt1,x
.1652	95 58		sta $58,x			sta 	esInt2,x
.1654	95 60		sta $60,x			sta 	esInt3,x
.1656	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1658	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.165a	30 21		bmi $167d			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.165c	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.165d	30 0a		bmi $1669			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.165f	8a		txa				txa 								; stack level in X
.1660	a2 00		ldx #$00		ldx	#0
.1662	20 8d 21	jsr $218d		jsr	variableHandler
.1665	aa		tax				tax
.1666	4c a6 16	jmp $16a6			jmp		_ELHasTerm
.1669					_ELIsConstant:
.1669	4a		lsr a				lsr 	a 							; get the value back
.166a	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.166c	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.166e					_ELCheckNext:
.166e	c8		iny				iny 								; look at next
.166f	b1 02		lda ($02),y			lda 	(codePtr),y
.1671	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1673	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1675	b0 2f		bcs $16a6			bcs 	_ELHasTerm 					; done getting the constant.
.1677	20 b3 17	jsr $17b3			jsr 	ELShiftByteIn 				; shift byte into position.
.167a	4c 6e 16	jmp $166e			jmp 	_ELCheckNext
.167d					_ELIsToken:
.167d	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.167f	f0 0f		beq $1690			beq 	_ELIsString
.1681	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1683	d0 5f		bne $16e4			bne 	_ELCheckUnary
.1685	8a		txa				txa 								; put X into A
.1686	c8		iny				iny 								; skip over the float marker
.1687	a2 18		ldx #$18		ldx	#24
.1689	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.168c	aa		tax				tax 								; restore X
.168d	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.1690					_ELIsString:
.1690	98		tya				tya 								; address of string is codePtr+y+1
.1691	38		sec				sec
.1692	65 02		adc $02				adc 	codePtr
.1694	95 48		sta $48,x			sta 	esInt0,x
.1696	a5 03		lda $03				lda 	codePtr+1
.1698	69 00		adc #$00			adc 	#0
.169a	95 50		sta $50,x			sta 	esInt1,x
.169c	a9 40		lda #$40			lda 	#$40 						; set type to string value
.169e	95 40		sta $40,x			sta 	esType,x
.16a0	c8		iny				iny 								; skip over string.
.16a1	98		tya				tya
.16a2	38		sec				sec									; +1 for the length itself.
.16a3	71 02		adc ($02),y			adc 	(codePtr),y
.16a5	a8		tay				tay 								; and fall through to term loop code.
.16a6					_ELHasTerm:
.16a6	b1 02		lda ($02),y			lda 	(codePtr),y
.16a8	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.16aa	90 04		bcc $16b0			bcc 	_ELPopExit
.16ac	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.16ae	90 02		bcc $16b2			bcc 	_ELHasBinaryTerm
.16b0					_ELPopExit:
.16b0	68		pla				pla
.16b1					_ELExit:
.16b1	60		rts				rts
.16b2					_ELHasBinaryTerm:
.16b2	84 0a		sty $0a				sty 	tempShort 					; save position
.16b4	a8		tay				tay 								; use token as an index and get the precedence.
.16b5	b9 5b 17	lda $175b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.16b8	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.16ba	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.16bc	68		pla				pla 								; restore current level.
.16bd	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.16bf	b0 f0		bcs $16b1			bcs 	_ELExit
.16c1	48		pha				pha 								; save current level back on the stack.
.16c2	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.16c4	48		pha				pha
.16c5	c8		iny				iny
.16c6	e8		inx				inx 								; calculate the RHS at the operator precedence.
.16c7	a5 0a		lda $0a				lda 	tempShort
.16c9	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.16cc	ca		dex				dex
.16cd	68		pla				pla 								; get the operator back out.
.16ce					_ELExecuteA:
.16ce	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.16d0	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.16d1	aa		tax				tax
.16d2	bd 98 12	lda $1298,x			lda 	Group0Vectors,x
.16d5	85 04		sta $04				sta 	temp0
.16d7	bd 99 12	lda $1299,x			lda 	Group0Vectors+1,x
.16da	85 05		sta $05				sta 	temp0+1
.16dc	a6 0a		ldx $0a				ldx 	tempShort
.16de	20 27 17	jsr $1727			jsr 	_ELCallTemp0
.16e1	4c a6 16	jmp $16a6			jmp 	_ELHasTerm 					; and loop back round.
.16e4					_ELCheckUnary:
.16e4	c8		iny				iny 								; skip over token.
.16e5	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.16e7	f0 15		beq $16fe			beq 	_ELMinus
.16e9	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.16eb	f0 28		beq $1715			beq 	_ELIndirect
.16ed	c9 98		cmp #$98			cmp 	#TKW_QMARK
.16ef	f0 24		beq $1715			beq 	_ELIndirect
.16f1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.16f3	90 04		bcc $16f9			bcc 	_ELUSyntax
.16f5	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.16f7	90 d5		bcc $16ce			bcc 	_ELExecuteA 				; if so do that token.
.16f9					_ELUSyntax:
.16f9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.16fb	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.16fe					_ELMinus:
.16fe	20 3c 17	jsr $173c			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1701	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1703	f0 0a		beq $170f			beq 	_ELMinusInteger
.1705	8a		txa				txa
.1706	a2 0c		ldx #$0c		ldx	#12
.1708	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.170b	aa		tax				tax
.170c	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.170f					_ELMinusInteger:
.170f	20 90 1c	jsr $1c90			jsr 	MInt32Negate 				; do int negate
.1712	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.1715					_ELIndirect:
.1715	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1716	20 45 17	jsr $1745			jsr 	EvaluateIntegerTerm 		; integer address
.1719	68		pla				pla
.171a	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.171c	f0 02		beq $1720			beq 	_ELHaveModifier
.171e	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1720					_ELHaveModifier:
.1720	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1722	95 40		sta $40,x			sta 	esType,x
.1724	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.1727					_ELCallTemp0:
.1727	6c 04 00	jmp ($0004)			jmp 	(temp0)
.172a					UnaryParenthesis:
.172a	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.172c	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.172f	20 49 1d	jsr $1d49			jsr 	CheckRightParen 			; check for )
.1732	60		rts				rts
.1733					EvaluateTerm:
.1733	a9 0f		lda #$0f			lda 	#15
.1735	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.1738	20 02 16	jsr $1602			jsr 	DereferenceOne
.173b	60		rts				rts
.173c					EvaluateNumericTerm:
.173c	20 33 17	jsr $1733			jsr 	EvaluateTerm
.173f	b5 40		lda $40,x			lda 	esType,x
.1741	0a		asl a				asl 	a 							; see if it's a string.
.1742	30 09		bmi $174d			bmi 	ENTType
.1744	60		rts				rts
.1745					EvaluateIntegerTerm:
.1745	20 33 17	jsr $1733			jsr 	EvaluateTerm
.1748	b5 40		lda $40,x			lda 	esType,x
.174a	d0 01		bne $174d			bne 	ENTType
.174c	60		rts				rts
.174d					ENTType:
.174d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.174f	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.1752					EvaluateRoot:
.1752	a2 00		ldx #$00			ldx 	#0
.1754					Evaluate:
.1754	a9 00		lda #$00			lda 	#0
.1756	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.1759	20 02 16	jsr $1602			jsr 	DereferenceOne
.175c	60		rts				rts
.175d					EvaluateNumeric:
.175d	20 54 17	jsr $1754			jsr 	Evaluate
.1760	b5 40		lda $40,x			lda 	esType,x
.1762	0a		asl a				asl 	a 							; see if it's a string.
.1763	30 e8		bmi $174d			bmi 	ENTType
.1765	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1766	4a		lsr a				lsr 	a
.1767	60		rts				rts
.1768					EvaluateString:
.1768	20 54 17	jsr $1754			jsr 	Evaluate
.176b	b5 40		lda $40,x			lda 	esType,x
.176d	0a		asl a				asl 	a 							; see if it's a string.
.176e	10 dd		bpl $174d			bpl 	ENTType
.1770	60		rts				rts
.1771					EvaluateRootInteger:
.1771	a2 00		ldx #$00			ldx 	#0
.1773					EvaluateInteger:
.1773	20 54 17	jsr $1754			jsr 	Evaluate
.1776	b5 40		lda $40,x			lda 	esType,x
.1778	d0 d3		bne $174d			bne 	ENTType
.177a	60		rts				rts
.177b					EvaluateSmallInteger:
.177b	20 73 17	jsr $1773			jsr 	EvaluateInteger
.177e	b5 50		lda $50,x			lda 	esInt1,x
.1780	15 58		ora $58,x			ora 	esInt2,x
.1782	15 60		ora $60,x			ora 	esInt3,x
.1784	d0 03		bne $1789			bne 	_ESIValue
.1786	b5 48		lda $48,x			lda 	esInt0,x
.1788	60		rts				rts
.1789					_ESIValue:
.1789	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.178b	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.178e					LinkEvaluate:
.178e	aa		tax				tax
.178f	20 54 17	jsr $1754			jsr 	Evaluate
.1792	8a		txa				txa
.1793	60		rts				rts
.1794					LinkEvaluateInteger:
.1794	aa		tax				tax
.1795	20 73 17	jsr $1773			jsr 	EvaluateInteger
.1798	8a		txa				txa
.1799	60		rts				rts
.179a					LinkEvaluateSmallInt:
.179a	aa		tax				tax
.179b	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger
.179e	8a		txa				txa
.179f	60		rts				rts
.17a0					EvaluateReference:
.17a0	ad f2 17	lda $17f2			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.17a3	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.17a4	e9 01		sbc #$01			sbc 	#1
.17a6	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.17a9	b5 40		lda $40,x			lda 	esType,x
.17ab	10 01		bpl $17ae			bpl 	_ERFail
.17ad	60		rts				rts
.17ae					_ERFail:
.17ae	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.17b0	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.17b3					ELShiftByteIn:
.17b3	48		pha				pha 								; save bits to shift in.
.17b4	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.17b6	48		pha				pha
.17b7	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.17b9	95 60		sta $60,x			sta 	esInt3,x
.17bb	b5 50		lda $50,x			lda 	esInt1,x
.17bd	95 58		sta $58,x			sta 	esInt2,x
.17bf	b5 48		lda $48,x			lda 	esInt0,x
.17c1	95 50		sta $50,x			sta 	esInt1,x
.17c3	a9 00		lda #$00			lda 	#0
.17c5	95 48		sta $48,x			sta 	esInt0,x
.17c7	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.17c8	29 03		and #$03			and 	#3 							; only want lower 2 bits
.17ca	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.17cc					_ELShiftLoop:
.17cc	4a		lsr a				lsr 	a
.17cd	76 60		ror $60,x			ror 	esInt3,x
.17cf	76 58		ror $58,x			ror 	esInt2,x
.17d1	76 50		ror $50,x			ror 	esInt1,x
.17d3	76 48		ror $48,x			ror 	esInt0,x
.17d5	c9 01		cmp #$01			cmp 	#1
.17d7	d0 f3		bne $17cc			bne 	_ELShiftLoop
.17d9	68		pla				pla 								; get original 6 bit value and OR in.
.17da	29 3f		and #$3f			and 	#$3F
.17dc	15 48		ora $48,x			ora 	esInt0,x
.17de	95 48		sta $48,x			sta 	esInt0,x
.17e0	60		rts				rts
.17e1					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>17e1	01					.byte	$01			; $86 and
>17e2	01					.byte	$01			; $87 or
>17e3	01					.byte	$01			; $88 xor
>17e4	02					.byte	$02			; $89 >=
>17e5	02					.byte	$02			; $8a <=
>17e6	02					.byte	$02			; $8b >
>17e7	02					.byte	$02			; $8c <
>17e8	02					.byte	$02			; $8d =
>17e9	02					.byte	$02			; $8e <>
>17ea	03					.byte	$03			; $8f +
>17eb	03					.byte	$03			; $90 -
>17ec	04					.byte	$04			; $91 >>
>17ed	04					.byte	$04			; $92 <<
>17ee	04					.byte	$04			; $93 *
>17ef	04					.byte	$04			; $94 /
>17f0	04					.byte	$04			; $95 mod
>17f1	05					.byte	$05			; $96 ^
>17f2	06					.byte	$06			; $97 !
>17f3	06					.byte	$06			; $98 ?
>17f4	82					.byte	$82			; $99 repeat
>17f5	82					.byte	$82			; $9a while
>17f6	82					.byte	$82			; $9b for
>17f7	82					.byte	$82			; $9c if
>17f8	82					.byte	$82			; $9d defproc
>17f9	80					.byte	$80			; $9e until
>17fa	80					.byte	$80			; $9f wend
>17fb	80					.byte	$80			; $a0 next
>17fc	80					.byte	$80			; $a1 then
>17fd	80					.byte	$80			; $a2 endif
>17fe	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.17ff					UnaryLen:
.17ff	20 0d 18	jsr $180d			jsr 	ULStart
.1802					ULFinish:
.1802	b1 04		lda ($04),y			lda 	(temp0),y
.1804	a4 0a		ldy $0a				ldy 	tempShort
.1806	20 e5 1c	jsr $1ce5			jsr 	MInt32Set8Bit
.1809	20 49 1d	jsr $1d49			jsr 	CheckRightParen
.180c	60		rts				rts
.180d	20 68 17	jsr $1768	ULStart:jsr 	EvaluateString
.1810	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1812	85 04		sta $04				sta 	temp0
.1814	b5 50		lda $50,x			lda 	esInt1,x
.1816	85 05		sta $05				sta 	temp0+1
.1818	84 0a		sty $0a				sty 	tempShort 					; get length
.181a	a0 00		ldy #$00			ldy 	#0
.181c	60		rts				rts
.181d					UnaryAsc:
.181d	20 0d 18	jsr $180d			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1820	b1 04		lda ($04),y			lda 	(temp0),y
.1822	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1823	c9 00		cmp #$00			cmp 	#0
.1825	d0 db		bne $1802			bne 	ULFinish
.1827	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1829	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.182c					UnaryAbs:
.182c	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.182f	b0 07		bcs $1838			bcs 	_UAFloat
.1831	20 8b 1c	jsr $1c8b			jsr 	MInt32Absolute
.1834	20 49 1d	jsr $1d49			jsr 	CheckRightParen
.1837	60		rts				rts
.1838					_UAFloat:
.1838	8a		txa				txa
.1839	a2 00		ldx #$00		ldx	#0
.183b	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.183e	aa		tax				tax
.183f	20 49 1d	jsr $1d49			jsr 	CheckRightParen
.1842	60		rts				rts
.1843					UnarySgn:
.1843	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.1846	b0 07		bcs $184f			bcs 	_USFloat
.1848	20 c3 1c	jsr $1cc3			jsr 	MInt32Sign
.184b	20 49 1d	jsr $1d49			jsr 	CheckRightParen
.184e	60		rts				rts
.184f					_USFloat:
.184f	8a		txa				txa
.1850	a2 0e		ldx #$0e		ldx	#14
.1852	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.1855	aa		tax				tax
.1856	20 49 1d	jsr $1d49			jsr 	CheckRightParen
.1859	60		rts				rts
.185a					UnaryPeek:
.185a	20 86 18	jsr $1886			jsr 	PDLCode
.185d	4c 7a 18	jmp $187a			jmp 	PDLByte0
.1860					UnaryDeek:
.1860	20 86 18	jsr $1886			jsr 	PDLCode
.1863	4c 74 18	jmp $1874			jmp 	PDLByte1
.1866					UnaryLeek:
.1866	20 86 18	jsr $1886			jsr 	PDLCode
.1869	a0 03		ldy #$03			ldy 	#3
.186b	b1 04		lda ($04),y			lda 	(temp0),y
.186d	95 60		sta $60,x			sta 	esInt3,x
.186f	88		dey				dey
.1870	b1 04		lda ($04),y			lda 	(temp0),y
.1872	95 58		sta $58,x			sta 	esInt2,x
.1874					PDLByte1:
.1874	a0 01		ldy #$01			ldy 	#1
.1876	b1 04		lda ($04),y			lda 	(temp0),y
.1878	95 50		sta $50,x			sta 	esInt1,x
.187a					PDLByte0:
.187a	a0 00		ldy #$00			ldy 	#0
.187c	b1 04		lda ($04),y			lda 	(temp0),y
.187e	95 48		sta $48,x			sta 	esInt0,x
.1880	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1882	20 49 1d	jsr $1d49			jsr 	CheckRightParen 			; check right and return
.1885	60		rts				rts
.1886					PDLCode:
.1886	20 73 17	jsr $1773			jsr 	EvaluateInteger
.1889	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.188b	85 04		sta $04				sta 	temp0
.188d	b5 50		lda $50,x			lda 	esInt1,x
.188f	85 05		sta $05				sta 	temp0+1
.1891	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1893	95 50		sta $50,x			sta 	esInt1,x
.1895	95 58		sta $58,x			sta 	esInt2,x
.1897	95 60		sta $60,x			sta 	esInt3,x
.1899	84 0a		sty $0a				sty 	tempShort 					; save Y
.189b	60		rts				rts
.189c					Unary_Random:
.189c	20 06 1d	jsr $1d06			jsr 	MInt32Random 				; generate random number.
.189f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.18a1	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.18a3	f0 08		beq $18ad			beq 	_URExit
.18a5	e8		inx				inx 								; load range 0..r-1 into +1
.18a6	20 73 17	jsr $1773			jsr 	EvaluateInteger
.18a9	ca		dex				dex
.18aa	20 4d 1b	jsr $1b4d			jsr 	MInt32Modulus 				; calculate random % modulus
.18ad					_URExit:
.18ad	20 49 1d	jsr $1d49			jsr 	CheckRightParen 			; check right and return
.18b0	60		rts				rts
.18b1					Unary_Min:
.18b1	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.18b3	d0 02		bne $18b7			bne 	UnaryMBody
.18b5					Unary_Max:
.18b5	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.18b7					UnaryMBody:
.18b7	48		pha				pha 								; save comparator on stack.
.18b8	20 54 17	jsr $1754			jsr 	Evaluate 					; get the first thing to check
.18bb					_UnaryMLoop:
.18bb	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.18bd	c8		iny				iny
.18be	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.18c0	f0 09		beq $18cb			beq 	_UnaryMExit
.18c2	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.18c4	f0 07		beq $18cd			beq 	_UnaryMCompare
.18c6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18c8	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.18cb					_UnaryMExit:
.18cb	68		pla				pla 								; throw comparator and return.
.18cc	60		rts				rts
.18cd					_UnaryMCompare:
.18cd	e8		inx				inx 								; get the 2nd thing to evaluate
.18ce	20 54 17	jsr $1754			jsr 	Evaluate
.18d1	ca		dex				dex
.18d2	20 83 15	jsr $1583			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.18d5	85 0a		sta $0a				sta 	tempShort 					; save result
.18d7	68		pla				pla 								; get what we need
.18d8	48		pha				pha
.18d9	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.18db	d0 de		bne $18bb			bne 	_UnaryMLoop 				; no, try another value.
.18dd	20 d6 1c	jsr $1cd6			jsr 	MInt32False 				; promote 2nd to 1st.
.18e0	20 c1 1b	jsr $1bc1			jsr 	MInt32Add
.18e3	4c bb 18	jmp $18bb			jmp 	_UnaryMLoop
.18e6					Unary_Page:
.18e6	20 d6 1c	jsr $1cd6			jsr 	MInt32False 				; zero
.18e9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.18ec	95 48		sta $48,x			sta 	esInt0,x
.18ee	ad c9 0a	lda $0ac9			lda 	basePage+1
.18f1	95 50		sta $50,x			sta 	esInt1,x
.18f3	60		rts				rts
.18f4					UnaryReference:
.18f4	a9 0f		lda #$0f			lda 	#15
.18f6	20 4b 16	jsr $164b			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.18f9	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.18fb	10 05		bpl $1902			bpl 	UType
.18fd	a9 00		lda #$00			lda 	#0 							; make it an integer
.18ff	95 40		sta $40,x			sta 	esType,x
.1901	60		rts				rts
.1902					UType:
.1902	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1904	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.1907					UnaryHexMarker:
.1907	4c 45 17	jmp $1745			jmp 	EvaluateIntegerTerm
.190a					UnaryComplement:
.190a	20 45 17	jsr $1745			jsr 	EvaluateIntegerTerm
.190d	20 aa 1c	jsr $1caa			jsr 	MInt32Not
.1910	60		rts				rts
.1911					UnaryIntToFloat:
.1911	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.1914	b5 40		lda $40,x			lda 	esType,x
.1916	d0 0b		bne $1923			bne 	_UIFExit
.1918	8a		txa				txa
.1919	a2 1a		ldx #$1a		ldx	#26
.191b	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.191e	aa		tax				tax
.191f	a9 01		lda #$01			lda 	#1
.1921	95 40		sta $40,x			sta 	esType,x
.1923					_UIFExit:
.1923	60		rts				rts
.1924					UnaryFloatToInt:
.1924	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.1927	b5 40		lda $40,x			lda 	esType,x
.1929	f0 07		beq $1932			beq 	_UFIExit
.192b	8a		txa				txa
.192c	a2 12		ldx #$12		ldx	#18
.192e	20 0b 1e	jsr $1e0b		jsr	floatingpointHandler
.1931	aa		tax				tax
.1932					_UFIExit:
.1932	60		rts				rts
.1933					UnaryAlloc:
.1933	e8		inx				inx 								; evaluate memory required
.1934	20 73 17	jsr $1773			jsr 	EvaluateInteger
.1937	20 49 1d	jsr $1d49			jsr 	CheckRightParen
.193a	ca		dex				dex
.193b	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.193d	15 61		ora $61,x			ora 	esInt3+1,x
.193f	d0 19		bne $195a			bne 	_UABadValue
.1941	20 d6 1c	jsr $1cd6			jsr 	MInt32False					; zero return.
.1944	a5 0e		lda $0e				lda 	lowMemory+1 				; copy low memory in
.1946	95 50		sta $50,x			sta 	esInt1,x
.1948	a5 0d		lda $0d				lda 	lowMemory
.194a	95 48		sta $48,x			sta 	esInt0,x
.194c	18		clc				clc 								; add alloc required.
.194d	75 49		adc $49,x			adc 	esInt0+1,x
.194f	85 0d		sta $0d				sta 	lowMemory
.1951	a5 0e		lda $0e				lda 	lowMemory+1
.1953	75 51		adc $51,x			adc 	esInt1+1,x
.1955	85 0e		sta $0e				sta 	lowMemory+1
.1957	b0 01		bcs $195a			bcs		_UABadValue 				; overflow definitely bad.
.1959	60		rts				rts
.195a					_UABadValue:
.195a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.195c	20 04 1e	jsr $1e04			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.195f					UnaryTimer:
.195f	20 49 1d	jsr $1d49			jsr 	CheckRightParen
.1962	98		tya				tya
.1963	48		pha				pha
.1964	20 fd 1c	jsr $1cfd			jsr 	MInt32Zero 					; zero result
.1967	86 04		stx $04				stx 	temp0 						; returning in YA so can't use pshx
.1969	a2 08		ldx #$08		ldx	#8
.196b	20 f7 1d	jsr $1df7		jsr	deviceHandler
.196e	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1970	95 48		sta $48,x			sta 	esInt0,x
.1972	94 50		sty $50,x			sty 	esInt1,x
.1974	68		pla				pla
.1975	a8		tay				tay
.1976	60		rts				rts
.1977					UnaryInkey:
.1977	20 49 1d	jsr $1d49			jsr 	CheckRightParen
.197a	86 04		stx $04				stx 	temp0
.197c	a2 02		ldx #$02		ldx	#2
.197e	20 f7 1d	jsr $1df7		jsr	deviceHandler
.1981	a6 04		ldx $04				ldx 	temp0
.1983	20 e5 1c	jsr $1ce5			jsr 	MInt32Set8Bit
.1986	60		rts				rts
.1987					UnaryGet:
.1987	20 49 1d	jsr $1d49			jsr 	CheckRightParen
.198a	86 04		stx $04				stx 	temp0
.198c					_UGLoop:
.198c	a2 02		ldx #$02		ldx	#2
.198e	20 f7 1d	jsr $1df7		jsr	deviceHandler
.1991	c9 00		cmp #$00			cmp 	#0
.1993	f0 f7		beq $198c			beq 	_UGLoop
.1995	a6 04		ldx $04				ldx 	temp0
.1997	20 e5 1c	jsr $1ce5			jsr 	MInt32Set8Bit
.199a	60		rts				rts
.199b					UnarySys:
.199b	20 73 17	jsr $1773			jsr 	EvaluateInteger 				; get the address
.199e	20 49 1d	jsr $1d49			jsr 	CheckRightParen
.19a1	20 23 11	jsr $1123			jsr 	TOSToTemp0 						; copy to temp0
.19a4	8a		txa				txa
.19a5	48		pha				pha
.19a6	98		tya				tya
.19a7	48		pha				pha
.19a8	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.19ab	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.19ae	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.19b1	20 c0 19	jsr $19c0			jsr 	_CallTemp0
.19b4	85 0a		sta $0a				sta 	tempShort 						; restore YX
.19b6	68		pla				pla
.19b7	a8		tay				tay
.19b8	68		pla				pla
.19b9	aa		tax				tax
.19ba	a5 0a		lda $0a				lda 	tempShort
.19bc	20 e5 1c	jsr $1ce5			jsr 	MInt32Set8Bit 					; return result.
.19bf	60		rts				rts
.19c0					_CallTemp0:
.19c0	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.19c3					ExecChr:
.19c3	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger		; character number
.19c6	20 49 1d	jsr $1d49			jsr 	CheckRightParen				; right bracket
.19c9	98		tya				tya
.19ca	48		pha				pha
.19cb	8a		txa				txa 								; A = stack
.19cc	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.19ce	a2 00		ldx #$00		ldx	#0
.19d0	20 21 20	jsr $2021		jsr	stringHandler
.19d3	aa		tax				tax 								; X = stack
.19d4	68		pla				pla
.19d5	a8		tay				tay
.19d6	60		rts				rts
.19d7					ExecLeft:
.19d7	20 68 17	jsr $1768			jsr 	EvaluateString 				; string to stack,X
.19da	20 56 1d	jsr $1d56			jsr 	CheckComma
.19dd	e8		inx				inx
.19de	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.19e0	20 e5 1c	jsr $1ce5			jsr 	MInt32Set8Bit
.19e3	e8		inx				inx
.19e4	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.19e7					ExecSubstring:
.19e7	ca		dex				dex 								; fix up X
.19e8	ca		dex				dex
.19e9	20 49 1d	jsr $1d49			jsr 	CheckRightParen 			; check closing right bracket.
.19ec	8a		txa				txa 								; do the substring and exit.
.19ed	a2 06		ldx #$06		ldx	#6
.19ef	20 21 20	jsr $2021		jsr	stringHandler
.19f2	aa		tax				tax
.19f3	60		rts				rts
.19f4					ExecMid:
.19f4	20 68 17	jsr $1768			jsr 	EvaluateString 				; string to stack,X
.19f7	20 56 1d	jsr $1d56			jsr 	CheckComma
.19fa	e8		inx				inx
.19fb	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.19fe	c9 00		cmp #$00			cmp 	#0
.1a00	f0 15		beq $1a17			beq 	_EMValue
.1a02	e8		inx				inx
.1a03	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1a05	20 e5 1c	jsr $1ce5			jsr 	MInt32Set8Bit
.1a08	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1a0a	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1a0c	f0 d9		beq $19e7			beq 	ExecSubString
.1a0e	20 56 1d	jsr $1d56			jsr 	CheckComma
.1a11	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1a14	4c e7 19	jmp $19e7			jmp 	ExecSubString
.1a17					_EMValue:
.1a17	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a19	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.1a1c					ExecRight:
.1a1c	20 68 17	jsr $1768			jsr 	EvaluateString 				; string to stack,X
.1a1f	20 56 1d	jsr $1d56			jsr 	CheckComma
.1a22	e8		inx				inx
.1a23	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1a26	ca		dex				dex
.1a27	98		tya				tya
.1a28	48		pha				pha
.1a29	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1a2b	85 04		sta $04				sta 	temp0
.1a2d	b5 50		lda $50,x			lda 	esInt1,x
.1a2f	85 05		sta $05				sta 	temp0+1
.1a31	a0 00		ldy #$00			ldy 	#0 							; point to length
.1a33	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1a35	18		clc				clc 								; add 1.
.1a36	69 01		adc #$01			adc 	#1
.1a38	38		sec				sec
.1a39	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1a3b	f0 02		beq $1a3f			beq		_ERMake1 					; if zero, make it 1.
.1a3d	b0 02		bcs $1a41			bcs		_EROkay
.1a3f					_ERMake1:
.1a3f	a9 01		lda #$01			lda 	#1 							; start position.
.1a41					_EROkay:
.1a41	e8		inx				inx 								; set start pos.
.1a42	95 48		sta $48,x			sta 	esInt0,x
.1a44	e8		inx				inx
.1a45	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1a47	20 e5 1c	jsr $1ce5			jsr 	MInt32Set8Bit
.1a4a	68		pla				pla
.1a4b	a8		tay				tay
.1a4c	4c e7 19	jmp $19e7			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1a4f					MInt32And:
.1a4f	b5 48		lda $48,x			lda 	esInt0,x
.1a51	35 49		and $49,x			and 	esInt0+1,x
.1a53	95 48		sta $48,x			sta 	esInt0,x
.1a55	b5 50		lda $50,x			lda 	esInt1,x
.1a57	35 51		and $51,x			and 	esInt1+1,x
.1a59	95 50		sta $50,x			sta 	esInt1,x
.1a5b	b5 58		lda $58,x			lda 	esInt2,x
.1a5d	35 59		and $59,x			and 	esInt2+1,x
.1a5f	95 58		sta $58,x			sta 	esInt2,x
.1a61	b5 60		lda $60,x			lda 	esInt3,x
.1a63	35 61		and $61,x			and 	esInt3+1,x
.1a65	95 60		sta $60,x			sta 	esInt3,x
.1a67	60		rts				rts
.1a68					MInt32Or:
.1a68	b5 48		lda $48,x			lda 	esInt0,x
.1a6a	15 49		ora $49,x			ora 	esInt0+1,x
.1a6c	95 48		sta $48,x			sta 	esInt0,x
.1a6e	b5 50		lda $50,x			lda 	esInt1,x
.1a70	15 51		ora $51,x			ora 	esInt1+1,x
.1a72	95 50		sta $50,x			sta 	esInt1,x
.1a74	b5 58		lda $58,x			lda 	esInt2,x
.1a76	15 59		ora $59,x			ora 	esInt2+1,x
.1a78	95 58		sta $58,x			sta 	esInt2,x
.1a7a	b5 60		lda $60,x			lda 	esInt3,x
.1a7c	15 61		ora $61,x			ora 	esInt3+1,x
.1a7e	95 60		sta $60,x			sta 	esInt3,x
.1a80	60		rts				rts
.1a81					MInt32Xor:
.1a81	b5 48		lda $48,x			lda 	esInt0,x
.1a83	55 49		eor $49,x			eor 	esInt0+1,x
.1a85	95 48		sta $48,x			sta 	esInt0,x
.1a87	b5 50		lda $50,x			lda 	esInt1,x
.1a89	55 51		eor $51,x			eor 	esInt1+1,x
.1a8b	95 50		sta $50,x			sta 	esInt1,x
.1a8d	b5 58		lda $58,x			lda 	esInt2,x
.1a8f	55 59		eor $59,x			eor 	esInt2+1,x
.1a91	95 58		sta $58,x			sta 	esInt2,x
.1a93	b5 60		lda $60,x			lda 	esInt3,x
.1a95	55 61		eor $61,x			eor 	esInt3+1,x
.1a97	95 60		sta $60,x			sta 	esInt3,x
.1a99	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1a9a					MInt32Compare:
.1a9a	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1a9c	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1a9e	d0 13		bne $1ab3			bne 	MInt32Compare2
.1aa0	b5 50		lda $50,x			lda 	esInt1,x
.1aa2	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1aa4	d0 0d		bne $1ab3			bne 	MInt32Compare2
.1aa6	b5 58		lda $58,x			lda 	esInt2,x
.1aa8	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1aaa	d0 07		bne $1ab3			bne 	MInt32Compare2
.1aac	b5 60		lda $60,x			lda 	esInt3,x
.1aae	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1ab0	d0 01		bne $1ab3			bne 	MInt32Compare2
.1ab2	60		rts				rts
.1ab3					MInt32Compare2:
.1ab3	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1ab5	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1ab7	b5 50		lda $50,x			lda		esInt1,x
.1ab9	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1abb	b5 58		lda $58,x			lda		esInt2,x
.1abd	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1abf	b5 60		lda $60,x			lda		esInt3,x
.1ac1	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1ac3	50 02		bvc $1ac7			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1ac5	49 80		eor #$80			eor 	#$80
.1ac7					_I32LNoOverflow
.1ac7	30 03		bmi $1acc			bmi 	MInt32CLess					; if -ve then return $FF
.1ac9	a9 01		lda #$01			lda 	#$01						; else return $01
.1acb	60		rts				rts
.1acc					MInt32CLess:
.1acc	a9 ff		lda #$ff			lda 	#$FF
.1ace	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1acf					MInt32SDivide:
.1acf	98		tya				tya  								; save Y, which is the count of negations
.1ad0	48		pha				pha
.1ad1	a0 00		ldy #$00			ldy 	#0 							; zero count
.1ad3	20 eb 1a	jsr $1aeb			jsr 	_MInt32SRemSign 			; unsign TOS
.1ad6	e8		inx				inx 								; unsign TOS+1
.1ad7	20 eb 1a	jsr $1aeb			jsr 	_MInt32SRemSign
.1ada	ca		dex				dex
.1adb	98		tya				tya 								; save sign count on stack
.1adc	48		pha				pha
.1add	20 f4 1a	jsr $1af4			jsr 	MInt32UDivide 				; unsigned division
.1ae0	68		pla				pla 								; get sign count back
.1ae1	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1ae3	f0 03		beq $1ae8			beq 	_I32SNoNeg
.1ae5	20 90 1c	jsr $1c90			jsr 	MInt32Negate
.1ae8					_I32SNoNeg:
.1ae8	68		pla				pla 								; restoe Y and exit
.1ae9	a8		tay				tay
.1aea	60		rts				rts
.1aeb					_MInt32SRemSign:
.1aeb	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1aed	10 04		bpl $1af3			bpl 	_MInt32SRSExit
.1aef	c8		iny				iny 								; increment the sign count
.1af0	20 90 1c	jsr $1c90			jsr 	MInt32Negate 				; negate the value.
.1af3					_MInt32SRSExit:
.1af3	60		rts				rts
.1af4					MInt32UDivide:
.1af4	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1af6	15 51		ora $51,x			ora 	esInt1+1,x
.1af8	15 52		ora $52,x			ora 	esInt1+2,x
.1afa	15 53		ora $53,x			ora 	esInt1+3,x
.1afc	f0 4a		beq $1b48			beq 	_MInt32DZero
.1afe	e8		inx				inx 								; clear A
.1aff	e8		inx				inx
.1b00	20 d6 1c	jsr $1cd6			jsr 	MInt32False
.1b03	ca		dex				dex
.1b04	ca		dex				dex
.1b05	98		tya				tya 								; save Y on the stack
.1b06	48		pha				pha
.1b07	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1b09					_MInt32UDLoop:
.1b09	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1b0b	36 50		rol $50,x			rol 	esInt1,x
.1b0d	36 58		rol $58,x			rol 	esInt2,x
.1b0f	36 60		rol $60,x			rol 	esInt3,x
.1b11	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1b13	36 52		rol $52,x			rol 	esInt1+2,x
.1b15	36 5a		rol $5a,x			rol 	esInt2+2,x
.1b17	36 62		rol $62,x			rol 	esInt3+2,x
.1b19	38		sec				sec 								; calculate A-M saving result on the stack
.1b1a	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1b1c	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1b1e	48		pha				pha
.1b1f	b5 52		lda $52,x			lda 	esInt1+2,x
.1b21	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1b23	48		pha				pha
.1b24	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1b26	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1b28	48		pha				pha
.1b29	b5 62		lda $62,x			lda 	esInt3+2,x
.1b2b	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1b2d	90 10		bcc $1b3f			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1b2f	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1b31	68		pla				pla
.1b32	95 5a		sta $5a,x			sta 	esInt2+2,x
.1b34	68		pla				pla
.1b35	95 52		sta $52,x			sta 	esInt1+2,x
.1b37	68		pla				pla
.1b38	95 4a		sta $4a,x			sta 	esInt0+2,x
.1b3a	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1b3c	4c 42 1b	jmp $1b42			jmp 	_MInt32Next 					; do the next iteration
.1b3f					_MInt32NoSubtract:
.1b3f	68		pla				pla
.1b40	68		pla				pla
.1b41	68		pla				pla
.1b42					_MInt32Next:
.1b42	88		dey				dey 								; do this 32 times.
.1b43	d0 c4		bne $1b09			bne 	_MInt32UDLoop
.1b45	68		pla				pla 								; restore Y and exit
.1b46	a8		tay				tay
.1b47	60		rts				rts
.1b48					_MInt32DZero:
.1b48	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1b4a	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.1b4d					MInt32Modulus:
.1b4d	20 f4 1a	jsr $1af4			jsr 	MInt32UDivide 				; do the division.
.1b50	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1b52	95 60		sta $60,x			sta 	esInt3,x
.1b54	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1b56	95 58		sta $58,x			sta 	esInt2,x
.1b58	b5 52		lda $52,x			lda 	esInt1+2,x
.1b5a	95 50		sta $50,x			sta 	esInt1,x
.1b5c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1b5e	95 48		sta $48,x			sta 	esInt0,x
.1b60	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.1b61					MInt32FromString:
.1b61	85 0a		sta $0a				sta 	tempShort 					; save base
.1b63	98		tya				tya
.1b64	48		pha				pha
.1b65	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1b67	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1b69	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1b6b	d0 01		bne $1b6e			bne 	_I32FSNotNegative
.1b6d	c8		iny				iny 								; if so consume it.
.1b6e					_I32FSNotNegative:
.1b6e	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1b70	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1b72	f0 02		beq $1b76			beq 	_I32FSNN2
.1b74	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1b76					_I32FSNN2:
.1b76	48		pha				pha 								; save base + final sign on stack.
.1b77	20 d6 1c	jsr $1cd6			jsr 	MInt32False 					; zero the return value.
.1b7a					I32FSMainLoop:
.1b7a	68		pla				pla 								; get the base back into tempshort
.1b7b	48		pha				pha
.1b7c	29 7f		and #$7f			and 	#$7F
.1b7e	85 0a		sta $0a				sta 	tempShort
.1b80	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1b82	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1b84	90 02		bcc $1b88			bcc 	_I32FSNotLC
.1b86	e9 20		sbc #$20			sbc 	#32
.1b88					_I32FSNotLC:
.1b88	38		sec				sec 								; subtract 48 (ASCII "0")
.1b89	e9 30		sbc #$30			sbc 	#"0"
.1b8b	90 26		bcc $1bb3			bcc 	_I32FSDone 					; nothing more to do.
.1b8d	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1b8f	90 06		bcc $1b97			bcc 	_I32FSValidate
.1b91	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1b93	90 1e		bcc $1bb3			bcc 	_I32FSDone
.1b95	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1b97					_I32FSValidate:
.1b97	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1b99	b0 18		bcs $1bb3			bcs 	_I32FSDone 					; sorry, too large for this base.
.1b9b	48		pha				pha 								; save the new digit value.
.1b9c	e8		inx				inx 								; put base into next slot.
.1b9d	a5 0a		lda $0a				lda 	tempShort
.1b9f	20 e5 1c	jsr $1ce5			jsr 	MInt32Set8Bit
.1ba2	ca		dex				dex
.1ba3	20 f5 1b	jsr $1bf5			jsr 	MInt32Multiply 				; multiply current by the base
.1ba6	e8		inx				inx
.1ba7	68		pla				pla  								; put additive into next slot
.1ba8	20 e5 1c	jsr $1ce5			jsr 	MInt32Set8Bit
.1bab	ca		dex				dex
.1bac	20 c1 1b	jsr $1bc1			jsr 	MInt32Add 					; and add it
.1baf	c8		iny				iny 								; look at next character
.1bb0	4c 7a 1b	jmp $1b7a			jmp 	I32FSMainLoop 				; and go round again.
.1bb3					_I32FSDone:
.1bb3	68		pla				pla 								; get base/final sign back
.1bb4	10 04		bpl $1bba			bpl 	_I32FSNN3
.1bb6	88		dey				dey 								; one fewer character to allow for the - prefix.
.1bb7	20 90 1c	jsr $1c90			jsr 	MInt32Negate 				; negate the result.
.1bba					_I32FSNN3:
.1bba	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1bbc	68		pla				pla
.1bbd	a8		tay				tay
.1bbe	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1bc0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1bc1					MInt32Add:
.1bc1	18		clc				clc
.1bc2	b5 48		lda $48,x			lda 	esInt0,x
.1bc4	75 49		adc $49,x			adc 	esInt0+1,x
.1bc6	95 48		sta $48,x			sta 	esInt0,x
.1bc8	b5 50		lda $50,x			lda 	esInt1,x
.1bca	75 51		adc $51,x			adc 	esInt1+1,x
.1bcc	95 50		sta $50,x			sta 	esInt1,x
.1bce	b5 58		lda $58,x			lda 	esInt2,x
.1bd0	75 59		adc $59,x			adc 	esInt2+1,x
.1bd2	95 58		sta $58,x			sta 	esInt2,x
.1bd4	b5 60		lda $60,x			lda 	esInt3,x
.1bd6	75 61		adc $61,x			adc 	esInt3+1,x
.1bd8	95 60		sta $60,x			sta 	esInt3,x
.1bda	60		rts				rts
.1bdb					MInt32Sub:
.1bdb	38		sec				sec
.1bdc	b5 48		lda $48,x			lda 	esInt0,x
.1bde	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1be0	95 48		sta $48,x			sta 	esInt0,x
.1be2	b5 50		lda $50,x			lda 	esInt1,x
.1be4	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1be6	95 50		sta $50,x			sta 	esInt1,x
.1be8	b5 58		lda $58,x			lda 	esInt2,x
.1bea	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1bec	95 58		sta $58,x			sta 	esInt2,x
.1bee	b5 60		lda $60,x			lda 	esInt3,x
.1bf0	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1bf2	95 60		sta $60,x			sta 	esInt3,x
.1bf4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1bf5					MInt32Multiply:
.1bf5	e8		inx				inx 								; copy 2nd -> 3rd
.1bf6	20 1b 1c	jsr $1c1b			jsr 	MInt32CopyUp
.1bf9	ca		dex				dex
.1bfa	20 1b 1c	jsr $1c1b			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1bfd	20 d6 1c	jsr $1cd6			jsr 	MInt32False 					; zero 1st.
.1c00					_I32Loop:
.1c00	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1c02	29 01		and #$01			and 	#1
.1c04	f0 03		beq $1c09			beq 	_I32NoAdd 					; if set
.1c06	20 c1 1b	jsr $1bc1			jsr 	MInt32Add 					; add 2nd to 1st.
.1c09					_I32NoAdd:
.1c09	e8		inx				inx 								; shift 2nd left
.1c0a	20 eb 1c	jsr $1ceb			jsr 	MInt32ShiftLeft
.1c0d	e8		inx				inx  								; shift 3rd right
.1c0e	20 f4 1c	jsr $1cf4			jsr 	MInt32ShiftRight
.1c11	20 fd 1c	jsr $1cfd			jsr 	MInt32Zero 					; check if zero.
.1c14	08		php				php 								; save status bits
.1c15	ca		dex				dex 	 							; point back to 1st
.1c16	ca		dex				dex
.1c17	28		plp				plp 								; get status bits
.1c18	d0 e6		bne $1c00			bne 	_I32Loop 					; if non-zero keep going.
.1c1a	60		rts				rts
.1c1b					MInt32CopyUp:
.1c1b	b5 48		lda $48,x			lda 	esInt0,x
.1c1d	95 49		sta $49,x			sta 	esInt0+1,x
.1c1f	b5 50		lda $50,x			lda 	esInt1,x
.1c21	95 51		sta $51,x			sta 	esInt1+1,x
.1c23	b5 58		lda $58,x			lda 	esInt2,x
.1c25	95 59		sta $59,x			sta 	esInt2+1,x
.1c27	b5 60		lda $60,x			lda 	esInt3,x
.1c29	95 61		sta $61,x			sta 	esInt3+1,x
.1c2b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af1					MCharCount:	.fill 	1						; count of converted characters
.1c2c					MInt32ToString:
.1c2c	48		pha				pha 								; save base
.1c2d	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1c2f	a9 00		lda #$00			lda 	#0
.1c31	8d f1 0a	sta $0af1			sta 	MCharCount 					; clear character count to 0
.1c34	98		tya				tya
.1c35	48		pha				pha
.1c36	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1c38	10 10		bpl $1c4a			bpl 	_I32TSUnsigned
.1c3a	48		pha				pha 								; save base on stack.
.1c3b	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1c3d	10 08		bpl $1c47			bpl 	_I32TSNoFlip
.1c3f	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1c41	20 7d 1c	jsr $1c7d			jsr 	MI32WriteCharacter
.1c44	20 90 1c	jsr $1c90			jsr 	MInt32Negate 				; negate the value.
.1c47					_I32TSNoFlip:
.1c47	68		pla				pla 								; get the base back
.1c48	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1c4a					_I32TSUnsigned:
.1c4a	20 58 1c	jsr $1c58			jsr 	MI32DivideWrite 			; recursive code to output string.
.1c4d	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1c4f	ad f1 0a	lda $0af1			lda 	MCharCount
.1c52	91 04		sta ($04),y			sta 	(temp0),y
.1c54	68		pla				pla
.1c55	a8		tay				tay
.1c56	68		pla				pla
.1c57	60		rts				rts
.1c58					MI32DivideWrite:
.1c58	48		pha				pha 								; save the divisor/base
.1c59	e8		inx				inx 								; write in the dividing position.
.1c5a	20 e5 1c	jsr $1ce5			jsr 	MInt32Set8Bit
.1c5d	ca		dex				dex
.1c5e	20 f4 1a	jsr $1af4			jsr 	MInt32UDivide 				; divide number by base.
.1c61	68		pla				pla 								; get the base into Y
.1c62	a8		tay				tay
.1c63	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1c65	48		pha				pha
.1c66	20 fd 1c	jsr $1cfd			jsr 	MInt32Zero 					; is the result zero ?
.1c69	f0 04		beq $1c6f			beq 	_I32NoRecurse 				; if so, don't recurse.
.1c6b	98		tya				tya 								; put base into A
.1c6c	20 58 1c	jsr $1c58			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1c6f					_I32NoRecurse:
.1c6f	68		pla				pla 								; get the remainder back
.1c70	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1c72	90 02		bcc $1c76			bcc 	_I32NotHex
.1c74	69 06		adc #$06			adc 	#7-1
.1c76					_I32NotHex:
.1c76	18		clc				clc 								; make it ASCII
.1c77	69 30		adc #$30			adc 	#48
.1c79	20 7d 1c	jsr $1c7d			jsr 	MI32WriteCharacter 			; write the character out
.1c7c	60		rts				rts 								; and exit.
.1c7d					MI32WriteCharacter:
.1c7d	ee f1 0a	inc $0af1			inc 	MCharCount 					; bump count (space for leading count)
.1c80	ac f1 0a	ldy $0af1			ldy 	MCharCount 					; get position
.1c83	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1c85	c8		iny				iny
.1c86	a9 00		lda #$00			lda 	#0
.1c88	91 04		sta ($04),y			sta 	(temp0),y
.1c8a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af2					MSeed32:	.fill 	4							; random number seed.
.1c8b					MInt32Absolute:
.1c8b	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1c8d	30 01		bmi $1c90			bmi 	MInt32Negate
.1c8f	60		rts				rts
.1c90					MInt32Negate:
.1c90	38		sec				sec
.1c91	a9 00		lda #$00			lda 	#0
.1c93	f5 48		sbc $48,x			sbc 	esInt0,x
.1c95	95 48		sta $48,x			sta 	esInt0,x
.1c97	a9 00		lda #$00			lda 	#0
.1c99	f5 50		sbc $50,x			sbc 	esInt1,x
.1c9b	95 50		sta $50,x			sta 	esInt1,x
.1c9d	a9 00		lda #$00			lda 	#0
.1c9f	f5 58		sbc $58,x			sbc 	esInt2,x
.1ca1	95 58		sta $58,x			sta 	esInt2,x
.1ca3	a9 00		lda #$00			lda 	#0
.1ca5	f5 60		sbc $60,x			sbc 	esInt3,x
.1ca7	95 60		sta $60,x			sta 	esInt3,x
.1ca9	60		rts				rts
.1caa					MInt32Not:
.1caa	b5 48		lda $48,x			lda 	esInt0,x
.1cac	49 ff		eor #$ff			eor 	#$FF
.1cae	95 48		sta $48,x			sta 	esInt0,x
.1cb0	b5 50		lda $50,x			lda 	esInt1,x
.1cb2	49 ff		eor #$ff			eor 	#$FF
.1cb4	95 50		sta $50,x			sta 	esInt1,x
.1cb6	b5 58		lda $58,x			lda 	esInt2,x
.1cb8	49 ff		eor #$ff			eor 	#$FF
.1cba	95 58		sta $58,x			sta 	esInt2,x
.1cbc	b5 60		lda $60,x			lda 	esInt3,x
.1cbe	49 ff		eor #$ff			eor 	#$FF
.1cc0	95 60		sta $60,x			sta 	esInt3,x
.1cc2	60		rts				rts
.1cc3					MInt32Sign:
.1cc3	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1cc5	30 0b		bmi $1cd2			bmi 	MInt32True 					; if set return -1 (true)
.1cc7	20 fd 1c	jsr $1cfd			jsr 	MInt32Zero 					; is it zero ?
.1cca	f0 0a		beq $1cd6			beq 	MInt32False 					; if zero return 0 (false)
.1ccc	20 d6 1c	jsr $1cd6			jsr 	MInt32False 					; > 0 return 1
.1ccf	f6 48		inc $48,x			inc 	esInt0,x
.1cd1	60		rts				rts
.1cd2					MInt32True:
.1cd2	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1cd4	d0 02		bne $1cd8			bne 	MInt32WriteAll
.1cd6					MInt32False:
.1cd6	a9 00		lda #$00			lda 	#0
.1cd8					MInt32WriteAll:
.1cd8	95 48		sta $48,x			sta 	esInt0,x
.1cda					MInt32Write123:
.1cda	95 50		sta $50,x			sta 	esInt1,x
.1cdc	95 58		sta $58,x			sta 	esInt2,x
.1cde	95 60		sta $60,x			sta 	esInt3,x
.1ce0	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1ce2	95 40		sta $40,x			sta 	esType,x
.1ce4	60		rts				rts
.1ce5					MInt32Set8Bit:
.1ce5	95 48		sta $48,x			sta 	esInt0,x
.1ce7	a9 00		lda #$00			lda 	#0
.1ce9	f0 ef		beq $1cda			beq		MInt32Write123
.1ceb					MInt32ShiftLeft:
.1ceb	16 48		asl $48,x			asl 	esInt0,x
.1ced	36 50		rol $50,x			rol	 	esInt1,x
.1cef	36 58		rol $58,x			rol	 	esInt2,x
.1cf1	36 60		rol $60,x			rol	 	esInt3,x
.1cf3	60		rts				rts
.1cf4					MInt32ShiftRight:
.1cf4	56 60		lsr $60,x			lsr 	esInt3,x
.1cf6	76 58		ror $58,x			ror 	esInt2,x
.1cf8	76 50		ror $50,x			ror 	esInt1,x
.1cfa	76 48		ror $48,x			ror 	esInt0,x
.1cfc	60		rts				rts
.1cfd					MInt32Zero:
.1cfd	b5 48		lda $48,x			lda 	esInt0,x
.1cff	15 50		ora $50,x			ora 	esInt1,x
.1d01	15 58		ora $58,x			ora 	esInt2,x
.1d03	15 60		ora $60,x			ora 	esInt3,x
.1d05	60		rts				rts
.1d06					MInt32Random:
.1d06	98		tya				tya
.1d07	48		pha				pha
.1d08	a0 07		ldy #$07			ldy 	#7
.1d0a	ad f2 0a	lda $0af2			lda 	MSeed32+0
.1d0d	d0 03		bne $1d12			bne 	_Random1
.1d0f	a8		tay				tay
.1d10	a9 aa		lda #$aa			lda		#$AA
.1d12					_Random1:
.1d12	0a		asl a				asl 	a
.1d13	2e f3 0a	rol $0af3			rol 	MSeed32+1
.1d16	2e f4 0a	rol $0af4			rol 	MSeed32+2
.1d19	2e f5 0a	rol $0af5			rol 	MSeed32+3
.1d1c	90 02		bcc $1d20			bcc 	_Random2
.1d1e	49 c5		eor #$c5			eor 	#$C5
.1d20					_Random2:
.1d20	88		dey				dey
.1d21	d0 ef		bne $1d12			bne 	_Random1
.1d23	8d f2 0a	sta $0af2			sta 	MSeed32+0
.1d26	95 48		sta $48,x			sta 	esInt0,x
.1d28	ad f3 0a	lda $0af3			lda 	MSeed32+1
.1d2b	95 50		sta $50,x			sta 	esInt1,x
.1d2d	ad f4 0a	lda $0af4			lda 	MSeed32+2
.1d30	95 58		sta $58,x			sta 	esInt2,x
.1d32	ad f5 0a	lda $0af5			lda 	MSeed32+3
.1d35	95 60		sta $60,x			sta 	esInt3,x
.1d37	68		pla				pla
.1d38	a8		tay				tay
.1d39	a9 00		lda #$00			lda 	#0
.1d3b	95 40		sta $40,x			sta 	esType,x
.1d3d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.1d3e					CheckToken:
.1d3e	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1d40	d0 02		bne $1d44			bne 	_CTError
.1d42	c8		iny				iny
.1d43	60		rts				rts
.1d44					_CTError:
.1d44	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d46	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.1d49					CheckRightParen:
.1d49	b1 02		lda ($02),y			lda 	(codePtr),y
.1d4b	c8		iny				iny
.1d4c	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1d4e	d0 01		bne $1d51			bne 	_CRPError
.1d50	60		rts				rts
.1d51					_CRPError:
.1d51	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.1d53	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.1d56					CheckComma:
.1d56	b1 02		lda ($02),y			lda 	(codePtr),y
.1d58	c8		iny				iny
.1d59	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1d5b	d0 01		bne $1d5e			bne 	_CCError
.1d5d	60		rts				rts
.1d5e					_CCError:
.1d5e	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.1d60	20 04 1e	jsr $1e04			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.230c					ScanForward:
.230c	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.230e	86 07		stx $07				stx 	temp1+1
.2310	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2312	85 08		sta $08				sta 	temp2
.2314	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2316	c8		iny				iny
.2317	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.2319	d0 08		bne $2323			bne 	_SFNoCheck 					; if so, check token against entered values.
.231b	c5 06		cmp $06				cmp 	temp1
.231d	f0 24		beq $2343			beq 	_SFExit
.231f	c5 07		cmp $07				cmp 	temp1+1
.2321	f0 20		beq $2343			beq 	_SFExit
.2323					_SFNoCheck:
.2323	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2325	90 ed		bcc $2314			bcc 	_SFLoop
.2327	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2329	90 19		bcc $2344			bcc 	_SFSpecials
.232b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.232d	90 e5		bcc $2314			bcc 	_SFLoop
.232f	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2331	b0 e1		bcs $2314			bcs 	_SFLoop
.2333	aa		tax				tax  								; token in X, and look up the adjuster.
.2334	bd 5b 17	lda $175b,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2337	38		sec				sec 								; convert to an offset
.2338	e9 81		sbc #$81			sbc 	#$81
.233a	18		clc				clc 								; add to depth
.233b	65 08		adc $08				adc 	temp2
.233d	85 08		sta $08				sta 	temp2
.233f	10 d3		bpl $2314			bpl 	_SFLoop 					; +ve okay to continue
.2341	30 2a		bmi $236d			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2343	60		rts		_SFExit:rts
.2344					_SFSpecials:
.2344	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2346	f0 14		beq $235c			beq 	_SFNextLine
.2348	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.234a	f0 26		beq $2372			beq 	_SFFloatSkip
.234c	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.234e	f0 04		beq $2354			beq 	_SFSkipString
.2350	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2351	4c 14 23	jmp $2314			jmp 	_SFLoop 					; token.
.2354					_SFSkipString:
.2354	98		tya				tya
.2355	38		sec				sec
.2356	71 02		adc ($02),y			adc 	(codePtr),y
.2358	a8		tay				tay
.2359	4c 14 23	jmp $2314			jmp 	_SFLoop
.235c					_SFNextLine:
.235c	a0 00		ldy #$00			ldy 	#0 							; get offset
.235e	b1 02		lda ($02),y			lda 	(codePtr),y
.2360	18		clc				clc 								; add to code pointer.
.2361	65 02		adc $02				adc 	codePtr
.2363	85 02		sta $02				sta 	codePtr
.2365	90 02		bcc $2369			bcc		_SFNLNoCarry
.2367	e6 03		inc $03				inc 	codePtr+1
.2369					_SFNLNoCarry:
.2369	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.236b	d0 a7		bne $2314			bne		_SFLoop 					; no go round again
.236d					_SFError:
.236d	a2 13		ldx #$13			ldx 	#ErrorID_Struct
.236f	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.2372					_SFFloatSkip:
.2372	4c 8e 12	jmp $128e			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.1d63					RSReset:
.1d63	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.1d65	85 78		sta $78				sta 	rsPointer
.1d67	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.1d69	85 79		sta $79				sta 	1+(rsPointer)
.1d6b	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1d6d	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.1d70	60		rts				rts
.1d71					RSClaim:
.1d71	84 0a		sty $0a				sty 	tempShort 					; preserve Y
.1d73	48		pha				pha 								; save marker on stack.
.1d74	8a		txa				txa 								; get bytes required.
.1d75	38		sec				sec
.1d76	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1d78	65 78		adc $78				adc 	rsPointer
.1d7a	85 78		sta $78				sta 	rsPointer
.1d7c	a5 79		lda $79				lda 	rsPointer+1
.1d7e	69 ff		adc #$ff			adc 	#$FF
.1d80	85 79		sta $79				sta 	rsPointer+1
.1d82	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.1d84	90 08		bcc $1d8e			bcc 	_RSCOverflow
.1d86	68		pla				pla 								; get marker back
.1d87	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1d89	91 78		sta ($78),y			sta 	(rsPointer),y
.1d8b	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1d8d	60		rts				rts
.1d8e					_RSCOverflow:
.1d8e	a2 15		ldx #$15			ldx 	#ErrorID_RetStack
.1d90	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.1d93					RSFree:
.1d93	18		clc				clc
.1d94	65 78		adc $78				adc 	rsPointer
.1d96	85 78		sta $78				sta 	rsPointer
.1d98	90 02		bcc $1d9c			bcc 	_RSFExit
.1d9a	e6 79		inc $79				inc 	rsPointer+1
.1d9c					_RSFExit:
.1d9c	60		rts				rts
.1d9d					RSSavePosition:
.1d9d	84 0a		sty $0a				sty 	tempShort 					; save Y position
.1d9f	a8		tay				tay 								; this is where we write it.
.1da0	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1da2	91 78		sta ($78),y			sta 	(rsPointer),y
.1da4	c8		iny				iny
.1da5	a5 03		lda $03				lda 	codePtr+1
.1da7	91 78		sta ($78),y			sta 	(rsPointer),y
.1da9	c8		iny				iny
.1daa	a5 0a		lda $0a				lda 	tempShort 					; write the Y position out.
.1dac	91 78		sta ($78),y			sta 	(rsPointer),y
.1dae	a8		tay				tay 								; fix Y back again to original value
.1daf	60		rts				rts
.1db0					RSLoadPosition:
.1db0	a8		tay				tay
.1db1	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1db3	85 02		sta $02				sta 	codePtr
.1db5	c8		iny				iny
.1db6	b1 78		lda ($78),y			lda 	(rsPointer),y
.1db8	85 03		sta $03				sta 	codePtr+1
.1dba	c8		iny				iny
.1dbb	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1dbd	a8		tay				tay 								; to Y
.1dbe	60		rts				rts

;******  Return to file: main/main.asm

.1dbf					mainHandler:
.1dbf	7c c2 1d	jmp ($1dc2,x)			jmp 	(mainVectors,x)
.1dc2					mainVectors:
>1dc2	8e 17					.word LinkEvaluate         ; index 0
>1dc4	94 17					.word LinkEvaluateInteger  ; index 2
>1dc6	9a 17					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.asm

.1dc8					assemblerHandler:
.1dc8	7c cb 1d	jmp ($1dcb,x)			jmp 	(assemblerVectors,x)
.1dcb					assemblerVectors:

;******  Return to file: basic.asm


;******  Processing file: device/device.asm


;******  Processing file: device/x16/x16io.asm

.1dcb					IONewLine:
.1dcb	48		pha				pha
.1dcc	a9 0d		lda #$0d			lda 	#13
.1dce	20 db 1d	jsr $1ddb			jsr 	IOPrintChar
.1dd1	68		pla				pla
.1dd2	60		rts				rts
.1dd3					IOTab:
.1dd3	48		pha				pha
.1dd4	a9 20		lda #$20			lda 	#32
.1dd6	20 db 1d	jsr $1ddb			jsr 	IOPrintChar
.1dd9	68		pla				pla
.1dda	60		rts				rts
.1ddb					IOPrintChar:
.1ddb	aa		tax				tax
.1ddc	5a		phy				phy
.1ddd	8a		txa				txa
.1dde	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1de1	7a		ply				ply
.1de2	60		rts				rts
.1de3					IOInkey:
.1de3	98		tya				tya
.1de4	48		pha				pha
.1de5	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1de8	85 0a		sta $0a				sta 	tempShort
.1dea	68		pla				pla
.1deb	a8		tay				tay
.1dec	a5 0a		lda $0a				lda 	tempShort
.1dee	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/x16/x16timer.asm

.1def					IOReadTimer:
.1def	20 de ff	jsr $ffde			jsr 	$FFDE
.1df2	48		pha				pha
.1df3	8a		txa				txa
.1df4	a8		tay				tay
.1df5	68		pla				pla
.1df6	60		rts				rts

;******  Return to file: device/device.asm

.1df7					deviceHandler:
.1df7	7c fa 1d	jmp ($1dfa,x)			jmp 	(deviceVectors,x)
.1dfa					deviceVectors:
>1dfa	cb 1d					.word IONewLine            ; index 0
>1dfc	e3 1d					.word IOInkey              ; index 2
>1dfe	db 1d					.word IOPrintChar          ; index 4
>1e00	d3 1d					.word IOTab                ; index 6
>1e02	ef 1d					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm


;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1e04					ErrorHandler:
.1e04	a9 ee		lda #$ee			lda 	#$EE
.1e06	a8		tay				tay
>1e07	db						.byte 	$DB
.1e08	4c 08 1e	jmp $1e08	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.asm

.1e0b					floatingpointHandler:
.1e0b	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1e0d	20 04 1e	jsr $1e04			jsr 	ErrorHandler

;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.asm

.1e10					interactionHandler:
.1e10	7c 13 1e	jmp ($1e13,x)			jmp 	(interactionVectors,x)
.1e13					interactionVectors:

;******  Return to file: basic.asm


;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.1e13					StringChrs:
.1e13	aa		tax				tax 								; set up stack
.1e14	a9 02		lda #$02			lda 	#2
.1e16	20 cd 1e	jsr $1ecd			jsr 	AllocateSoftString
.1e19	98		tya				tya
.1e1a	20 f3 1e	jsr $1ef3			jsr 	WriteSoftString
.1e1d	20 22 1e	jsr $1e22			jsr 	ReturnSoftString
.1e20	8a		txa				txa
.1e21	60		rts				rts
.1e22					ReturnSoftString:
.1e22	a5 7a		lda $7a				lda 	softMemAlloc
.1e24	95 48		sta $48,x			sta 	esInt0,x
.1e26	a5 7b		lda $7b				lda 	softMemAlloc+1
.1e28	95 50		sta $50,x			sta 	esInt1,x
.1e2a	a9 00		lda #$00			lda 	#0
.1e2c	95 58		sta $58,x			sta 	esInt2,x
.1e2e	95 60		sta $60,x			sta 	esInt3,x
.1e30	a9 40		lda #$40			lda 	#$40
.1e32	95 40		sta $40,x			sta 	esType,x
.1e34	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.1e35					STRCompare:
.1e35	48		pha				pha 								; save A
.1e36	aa		tax				tax 								; put stack pos in X
.1e37	98		tya				tya
.1e38	48		pha				pha
.1e39	20 6d 1e	jsr $1e6d			jsr 	CopyStringPair
.1e3c	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1e3e	b1 04		lda ($04),y			lda 	(temp0),y
.1e40	d1 06		cmp ($06),y			cmp 	(temp1),y
.1e42	90 02		bcc $1e46			bcc 	_SCNotSmaller
.1e44	b1 06		lda ($06),y			lda 	(temp1),y
.1e46					_SCNotSmaller:
.1e46	aa		tax				tax 								; put that in X. We compare this many chars first.
.1e47					_SCCompareLoop:
.1e47	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1e49	f0 0c		beq $1e57			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1e4b	ca		dex				dex 								; decrement chars to compare.
.1e4c	c8		iny				iny 								; move to next character
.1e4d	38		sec				sec 								; calculate s1[y]-s2[y]
.1e4e	b1 04		lda ($04),y			lda 	(temp0),y
.1e50	f1 06		sbc ($06),y			sbc 	(temp1),y
.1e52	d0 0a		bne $1e5e			bne 	_SCReturnResult 			; if different return sign of A
.1e54	4c 47 1e	jmp $1e47			jmp 	_SCCompareLoop
.1e57					_SCSameToEndShortest
.1e57	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1e59	38		sec				sec
.1e5a	b1 04		lda ($04),y			lda 	(temp0),y
.1e5c	f1 06		sbc ($06),y			sbc 	(temp1),y
.1e5e					_SCReturnResult:
.1e5e	08		php				php 								; set return to zero preserving PSW.
.1e5f	a2 00		ldx #$00			ldx 	#0
.1e61	28		plp				plp
.1e62	f0 05		beq $1e69			beq 	_SCExit 					; two values equal, then exit
.1e64	ca		dex				dex 								; X = $FF
.1e65	90 02		bcc $1e69			bcc 	_SCExit 					; if 1st < 2nd then -1
.1e67	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1e69					_SCExit:
.1e69	68		pla				pla
.1e6a	a8		tay				tay
.1e6b	68		pla				pla
.1e6c	60		rts				rts
.1e6d					CopyStringPair:
.1e6d	b5 49		lda $49,x			lda 	esInt0+1,x
.1e6f	85 06		sta $06				sta 	temp1
.1e71	b5 51		lda $51,x			lda 	esInt1+1,x
.1e73	85 07		sta $07				sta 	temp1+1
.1e75					CopyStringTop:
.1e75	b5 48		lda $48,x			lda 	esInt0,x
.1e77	85 04		sta $04				sta 	temp0
.1e79	b5 50		lda $50,x			lda 	esInt1,x
.1e7b	85 05		sta $05				sta 	temp0+1
.1e7d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.1e7e					StringConcat:
.1e7e	aa		tax				tax									; stack pos in X
.1e7f	98		tya				tya
.1e80	48		pha				pha
.1e81	20 6d 1e	jsr $1e6d			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1e84	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1e85	a0 00		ldy #$00			ldy 	#0
.1e87	b1 04		lda ($04),y			lda 	(temp0),y
.1e89	71 06		adc ($06),y			adc 	(temp1),y
.1e8b	b0 1c		bcs $1ea9			bcs 	_SCError 					; just too many characters here.
.1e8d	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.1e8f	b0 18		bcs $1ea9			bcs 	_SCError
.1e91	20 cd 1e	jsr $1ecd			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1e94	20 c4 1e	jsr $1ec4			jsr 	CopySoftToStack 			; copy that to the stack.
.1e97	20 ae 1e	jsr $1eae			jsr 	_SCCopyTemp0 				; copy temp0
.1e9a	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1e9c	85 04		sta $04				sta 	temp0
.1e9e	a5 07		lda $07				lda 	temp1+1
.1ea0	85 05		sta $05				sta 	temp0+1
.1ea2	20 ae 1e	jsr $1eae			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1ea5	68		pla				pla
.1ea6	a8		tay				tay
.1ea7	8a		txa				txa 								; and A
.1ea8	60		rts				rts
.1ea9					_SCError:
.1ea9	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.1eab	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.1eae					_SCCopyTemp0:
.1eae	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1eb0	b1 04		lda ($04),y			lda 	(temp0),y
.1eb2	85 08		sta $08				sta 	temp2
.1eb4					_SCCopyLoop:
.1eb4	a5 08		lda $08				lda 	temp2 						; done the lot
.1eb6	f0 0b		beq $1ec3			beq 	_SCCopyExit
.1eb8	c6 08		dec $08				dec 	temp2
.1eba	c8		iny				iny 								; get next char
.1ebb	b1 04		lda ($04),y			lda 	(temp0),y
.1ebd	20 f3 1e	jsr $1ef3			jsr 	WriteSoftString 			; write to soft string.
.1ec0	4c b4 1e	jmp $1eb4			jmp 	_SCCopyLoop
.1ec3					_SCCopyExit:
.1ec3	60		rts				rts
.1ec4					CopySoftToStack:
.1ec4	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1ec6	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1ec8	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.1eca	95 50		sta $50,x			sta 	esInt1,x
.1ecc	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1ecd					AllocateSoftString:
.1ecd	85 0a		sta $0a				sta 	tempShort 					; save count
.1ecf	98		tya				tya
.1ed0	48		pha				pha
.1ed1	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1ed3	d0 09		bne $1ede			bne 	_ASSDone
.1ed5	a5 0b		lda $0b				lda 	highMemory 					; reset the soft memory alloc pointer.
.1ed7	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1ed9	a4 0c		ldy $0c				ldy 	highMemory+1 				; but it needs to be reset before each command.
.1edb	88		dey				dey
.1edc	84 7b		sty $7b				sty 	softMemAlloc+1
.1ede					_ASSDone:
.1ede	38		sec				sec 								; allocate downwards enough memory
.1edf	a5 7a		lda $7a				lda 	softMemAlloc
.1ee1	e5 0a		sbc $0a				sbc 	tempShort
.1ee3	85 7a		sta $7a				sta 	softMemAlloc
.1ee5	a5 7b		lda $7b				lda 	softMemAlloc+1
.1ee7	e9 00		sbc #$00			sbc 	#0
.1ee9	85 7b		sta $7b				sta 	softMemAlloc+1
.1eeb	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1eed	a8		tay				tay
.1eee	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1ef0	68		pla				pla
.1ef1	a8		tay				tay
.1ef2	60		rts				rts
.1ef3					WriteSoftString:
.1ef3	84 0a		sty $0a				sty 	tempShort 					; save Y
.1ef5	48		pha				pha
.1ef6	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1ef8	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.1efa	18		clc				clc
.1efb	69 01		adc #$01			adc 	#1
.1efd	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1eff	a8		tay				tay 								; pointer in Y
.1f00	68		pla				pla 								; get char and write.
.1f01	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1f03	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1f05	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.1f06					StringSubstring:
.1f06	48		pha				pha
.1f07	aa		tax				tax 								; access stack.
.1f08	98		tya				tya
.1f09	48		pha				pha
.1f0a	20 75 1e	jsr $1e75			jsr 	CopyStringTop 				; point temp0 to the string.
.1f0d	a0 00		ldy #$00			ldy 	#0 							; get length.
.1f0f	b1 04		lda ($04),y			lda 	(temp0),Y
.1f11	85 06		sta $06				sta 	temp1
.1f13	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.1f15	c5 06		cmp $06				cmp 	temp1 						;
.1f17	f0 02		beq $1f1b			beq 	_SSBOkay
.1f19	b0 2a		bcs $1f45			bcs 	_SSBReturnNull
.1f1b					_SSBOkay:
.1f1b	a5 06		lda $06				lda 	temp1 						; get the total length +1
.1f1d	18		clc				clc
.1f1e	69 01		adc #$01			adc 	#1
.1f20	38		sec				sec
.1f21	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.1f23	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.1f25	90 02		bcc $1f29			bcc		_SSBTrunc
.1f27	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1f29					_SSBTrunc:
.1f29	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.1f2b	18		clc				clc
.1f2c	69 01		adc #$01			adc 	#1 							; add 1
.1f2e	20 cd 1e	jsr $1ecd			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1f31	20 c4 1e	jsr $1ec4			jsr 	CopySoftToStack 			; copy that to the stack.
.1f34	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.1f36					_SSBCopyLoop:
.1f36	a5 07		lda $07				lda 	temp1+1 					; done them all
.1f38	f0 0e		beq $1f48			beq 	_SSBExit
.1f3a	c6 07		dec $07				dec 	temp1+1
.1f3c	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.1f3e	20 f3 1e	jsr $1ef3			jsr 	WriteSoftString
.1f41	c8		iny				iny
.1f42	4c 36 1f	jmp $1f36			jmp 	_SSBCopyLoop
.1f45					_SSBReturnNull:
.1f45	20 4c 1f	jsr $1f4c			jsr 	ReturnNull
.1f48					_SSBExit:
.1f48	68		pla				pla
.1f49	a8		tay				tay
.1f4a	68		pla				pla
.1f4b	60		rts				rts
.1f4c					ReturnNull:
.1f4c	a9 00		lda #$00			lda 	#0 							; clear null string
.1f4e	8d cc 0a	sta $0acc			sta 	NullString
.1f51	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.1f53	95 48		sta $48,x			sta 	esInt0,x
.1f55	a9 0a		lda #$0a			lda 	#NullString >> 8
.1f57	95 50		sta $50,x			sta 	esInt1,x
.1f59	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0af6					srcStrLen:
>0af6							.fill 	1
.1f5a					StringWrite:
.1f5a	aa		tax				tax
.1f5b	48		pha				pha
.1f5c	98		tya				tya
.1f5d	48		pha				pha
.1f5e	20 80 1f	jsr $1f80			jsr 	CheckOverwriteCurrent
.1f61	b0 08		bcs $1f6b			bcs		_SWCopyCurrent
.1f63	20 be 1f	jsr $1fbe			jsr 	RequiresConcretion
.1f66	90 09		bcc $1f71			bcc 	_SWWriteReference
.1f68	20 d2 1f	jsr $1fd2			jsr 	AllocateHardMemory
.1f6b					_SWCopyCurrent:
.1f6b	20 05 20	jsr $2005			jsr 	CopyStringToHardMemory
.1f6e	4c 7c 1f	jmp $1f7c			jmp 	_SWExit
.1f71					_SWWriteReference
.1f71	a0 00		ldy #$00			ldy 	#0
.1f73	a5 04		lda $04				lda 	temp0
.1f75	91 06		sta ($06),y			sta 	(temp1),y
.1f77	c8		iny				iny
.1f78	a5 05		lda $05				lda 	temp0+1
.1f7a	91 06		sta ($06),y			sta 	(temp1),y
.1f7c					_SWExit:
.1f7c	68		pla				pla
.1f7d	a8		tay				tay
.1f7e	68		pla				pla
.1f7f	60		rts				rts
.1f80					CheckOverwriteCurrent:
.1f80	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.1f82	b5 51		lda $51,x			lda 	esInt1+1,x
.1f84	85 05		sta $05				sta 	temp0+1
.1f86	b5 49		lda $49,x			lda 	esInt0+1,x
.1f88	85 04		sta $04				sta 	temp0
.1f8a	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.1f8c	8d f6 0a	sta $0af6			sta 	srcStrLen
.1f8f	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.1f91	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.1f93	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.1f95	85 07		sta $07				sta 	temp1+1
.1f97	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.1f99	b1 06		lda ($06),y			lda 	(temp1),y
.1f9b	c5 0c		cmp $0c				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.1f9d	90 1b		bcc $1fba			bcc 	_COCFail 				; in hard memory.
.1f9f	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.1fa1	b1 06		lda ($06),y			lda 	(temp1),y
.1fa3	e9 01		sbc #$01			sbc 	#1
.1fa5	85 08		sta $08				sta 	temp2
.1fa7	c8		iny				iny
.1fa8	b1 06		lda ($06),y			lda 	(temp1),y
.1faa	e9 00		sbc #$00			sbc 	#0
.1fac	85 09		sta $09				sta 	temp2+1
.1fae	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.1fb0	b1 08		lda ($08),y			lda 	(temp2),y
.1fb2	38		sec				sec  							; maximum character capacity.
.1fb3	e9 02		sbc #$02			sbc 	#2
.1fb5	cd f6 0a	cmp $0af6			cmp 	srcStrLen 				; if >= the required length
.1fb8	b0 02		bcs $1fbc			bcs 	_COCCanReuse
.1fba					_COCFail:
.1fba	18		clc				clc
.1fbb	60		rts				rts
.1fbc					_COCCanReuse:
.1fbc	38		sec				sec
.1fbd	60		rts				rts
.1fbe					RequiresConcretion:
.1fbe	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.1fc0	c5 0c		cmp $0c				cmp 	highMemory+1 			; if >= high memory it is concreted
.1fc2	b0 0a		bcs $1fce			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.1fc4	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.1fc6	f0 08		beq $1fd0			beq 	_RCFail 				; if not, this cannot be soft memory.
.1fc8	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.1fca	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.1fcc	90 02		bcc $1fd0			bcc 	_RCFail 				; so concreting
.1fce					_RCSucceed:
.1fce	38		sec				sec
.1fcf	60		rts				rts
.1fd0					_RCFail:
.1fd0	18		clc				clc
.1fd1	60		rts				rts
.1fd2					AllocateHardMemory:
.1fd2	98		tya				tya
.1fd3	48		pha				pha
.1fd4	ad f6 0a	lda $0af6			lda 	srcStrLen 				; characters in string
.1fd7	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.1fd9	b0 04		bcs $1fdf			bcs 	_AHMSetMax 				; max out that amount.
.1fdb	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.1fdd	90 02		bcc $1fe1			bcc 	_AHMIsOkay
.1fdf					_AHMSetMax:
.1fdf	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.1fe1					_AHMIsOkay:
.1fe1	48		pha				pha
.1fe2	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.1fe4	38		sec				sec  							; and copy result to TOS as target address.
.1fe5	65 0b		adc $0b				adc 	highMemory
.1fe7	85 0b		sta $0b				sta 	highMemory
.1fe9	a5 0c		lda $0c				lda 	highMemory+1
.1feb	69 ff		adc #$ff			adc 	#$FF
.1fed	85 0c		sta $0c				sta 	highMemory+1
.1fef	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.1ff1	68		pla				pla 							; get the total size of the storage block
.1ff2	91 0b		sta ($0b),y			sta 	(highMemory),y
.1ff4	18		clc				clc
.1ff5	a5 0b		lda $0b				lda		highMemory 				; point the target address to the byte after this.
.1ff7	69 01		adc #$01			adc 	#1
.1ff9	91 06		sta ($06),y			sta 	(temp1),y
.1ffb	a5 0c		lda $0c				lda 	highMemory+1
.1ffd	69 00		adc #$00			adc 	#0
.1fff	c8		iny				iny
.2000	91 06		sta ($06),y			sta 	(temp1),y
.2002	68		pla				pla
.2003	a8		tay				tay
.2004	60		rts				rts
.2005					CopyStringToHardMemory:
.2005	98		tya				tya
.2006	48		pha				pha
.2007	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2009	b1 06		lda ($06),y			lda 	(temp1),y
.200b	85 08		sta $08				sta 	temp2
.200d	c8		iny				iny
.200e	b1 06		lda ($06),y			lda 	(temp1),y
.2010	85 09		sta $09				sta 	temp2+1
.2012	ac f6 0a	ldy $0af6			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2015					_CSTHMLoop:
.2015	b1 04		lda ($04),y			lda 	(temp0),y
.2017	91 08		sta ($08),y			sta 	(temp2),y
.2019	88		dey				dey
.201a	c0 ff		cpy #$ff			cpy 	#$FF
.201c	d0 f7		bne $2015			bne 	_CSTHMLoop
.201e	68		pla				pla
.201f	a8		tay				tay
.2020	60		rts				rts

;******  Return to file: string/string.asm

.2021					stringHandler:
.2021	7c 24 20	jmp ($2024,x)			jmp 	(stringVectors,x)
.2024					stringVectors:
>2024	13 1e					.word StringChrs           ; index 0
>2026	7e 1e					.word StringConcat         ; index 2
>2028	35 1e					.word STRCompare           ; index 4
>202a	06 1f					.word StringSubstring      ; index 6
>202c	5a 1f					.word StringWrite          ; index 8

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.asm

.202e					tokeniserHandler:
.202e	7c 31 20	jmp ($2031,x)			jmp 	(tokeniserVectors,x)
.2031					tokeniserVectors:

;******  Return to file: basic.asm


;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0af7					varHash:
>0af7							.fill	1
.0af8					varType:
>0af8							.fill 	1
.0af9					varEnd:
>0af9							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2031					AccessVariable:
.2031	aa		tax				tax 								; stack in X
.2032	c8		iny				iny
.2033	b1 02		lda ($02),y			lda 	(codePtr),y
.2035	88		dey				dey
.2036	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.2038	d0 15		bne $204f			bne 	_AVLong
.203a	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.203c	38		sec				sec 	 							; make it 0-25
.203d	e9 01		sbc #$01			sbc 	#1
.203f	0a		asl a				asl 	a 							; x 4 is LSB of address
.2040	0a		asl a				asl 	a
.2041	95 48		sta $48,x			sta 	esInt0,x
.2043	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.2045	95 50		sta $50,x			sta 	esInt1,x
.2047	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.2049	95 40		sta $40,x			sta 	esType,x
.204b	c8		iny				iny 								; skip over the variable reference in the code.
.204c	c8		iny				iny
.204d	8a		txa				txa 								; stack in A to return.
.204e	60		rts				rts
.204f					_AVLong:
.204f	8a		txa				txa
.2050	48		pha				pha
.2051	20 8f 20	jsr $208f			jsr 	AccessSetup 				; set up the basic stuff.
.2054	20 34 21	jsr $2134			jsr 	FindVariable 				; does the variable exist already
.2057	b0 0e		bcs $2067			bcs 	_AVFound
.2059	ad f8 0a	lda $0af8			lda 	varType 					; is the variable type an array
.205c	4a		lsr a				lsr 	a
.205d	90 05		bcc $2064			bcc 	_AVCanCreate
.205f	a2 14		ldx #$14			ldx 	#ErrorID_noauto
.2061	20 04 1e	jsr $1e04			jsr 	ErrorHandler
.2064					_AVCanCreate:
.2064	20 cc 20	jsr $20cc			jsr 	CreateVariable 				; no, create it.
.2067					_AVFound:
.2067	68		pla				pla
.2068	aa		tax				tax
.2069	18		clc				clc 								; copy temp0 (variable record address)
.206a	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.206c	69 05		adc #$05			adc 	#5
.206e	95 48		sta $48,x			sta 	esInt0,x
.2070	a5 05		lda $05				lda 	temp0+1
.2072	69 00		adc #$00			adc 	#0
.2074	95 50		sta $50,x			sta 	esInt1,x
.2076	a9 00		lda #$00			lda 	#0
.2078	95 58		sta $58,x			sta 	esInt2,x
.207a	95 60		sta $60,x			sta 	esInt3,x
.207c	ac f8 0a	ldy $0af8			ldy 	varType 					; get the type ID from the type.
.207f	b9 4f 20	lda $204f,y			lda 	_AVTypeTable-$3A,y
.2082	95 40		sta $40,x			sta 	esType,x
.2084	ac f9 0a	ldy $0af9			ldy 	varEnd 						; restore Y
.2087	8a		txa				txa 								; return stack in A and return
.2088	60		rts				rts
.2089					_AVTypeTable:
>2089	80 80						.byte 	$80,$80						; integer
>208b	c0 c0						.byte 	$C0,$C0 					; string
>208d	81 81						.byte 	$81,$81 					; float
.208f					AccessSetup:
.208f	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.2091	8d f7 0a	sta $0af7			sta 	varHash
.2094	98		tya				tya
.2095	48		pha				pha
.2096	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.2098	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.209a	b0 0b		bcs $20a7			bcs 	_ASComplete
.209c	18		clc				clc 								; add to the hash. Might improve this.
.209d	6d f7 0a	adc $0af7			adc 	varHash
.20a0	8d f7 0a	sta $0af7			sta 	varHash
.20a3	c8		iny				iny 								; next character
.20a4	4c 96 20	jmp $2096			jmp 	_ASLoop
.20a7					_ASComplete:
.20a7	8d f8 0a	sta $0af8			sta 	varType 					; save variable type byte
.20aa	c8		iny				iny
.20ab	8c f9 0a	sty $0af9			sty 	varEnd 						; save the ending position.
.20ae	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.20af	e9 3a		sbc #$3a			sbc 	#$3A
.20b1	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.20b2	0a		asl a				asl 	a
.20b3	0a		asl a				asl 	a
.20b4	0a		asl a				asl 	a 							; 2 bytes/word
.20b5	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.20b7	ad f7 0a	lda $0af7			lda 	varHash 					; get hash
.20ba	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.20bc	0a		asl a				asl  	a 							; x 2 (for word) and CC
.20bd	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.20bf	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.20c1	85 7c		sta $7c				sta 	hashList
.20c3	a9 0a		lda #$0a			lda 	#hashTables >> 8
.20c5	69 00		adc #$00			adc 	#0
.20c7	85 7d		sta $7d				sta 	hashList+1
.20c9	68		pla				pla
.20ca	a8		tay				tay
.20cb	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.20cc					CreateVariable:
.20cc	98		tya				tya 								; push Y on the stack twice.
.20cd	48		pha				pha
.20ce	48		pha				pha
.20cf	ae f8 0a	ldx $0af8			ldx 	varType 					; get var type 0-5
.20d2	bd f4 20	lda $20f4,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.20d5	48		pha				pha 								; save length
.20d6	a8		tay				tay 								; put into Y.
.20d7	a5 0d		lda $0d				lda 	lowMemory 					; set low Memory ptr to temp0
.20d9	85 04		sta $04				sta 	temp0
.20db	a5 0e		lda $0e				lda 	lowMemory+1
.20dd	85 05		sta $05				sta 	temp0+1
.20df	68		pla				pla 								; get length
.20e0	20 68 10	jsr $1068			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.20e3					_CVClear:
.20e3	88		dey				dey
.20e4	a9 00		lda #$00			lda 	#0
.20e6	91 04		sta ($04),y			sta 	(temp0),y
.20e8	c0 04		cpy #$04			cpy 	#4
.20ea	d0 f7		bne $20e3			bne 	_CVClear
.20ec	ad f7 0a	lda $0af7			lda 	varHash 					; store hash at offset 4.
.20ef	91 04		sta ($04),y			sta 	(temp0),y
.20f1	68		pla				pla 								; offset, work out where the variable name is.
.20f2	18		clc				clc
.20f3	65 02		adc $02				adc 	codePtr
.20f5	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.20f7	91 04		sta ($04),y			sta 	(temp0),y
.20f9	a5 03		lda $03				lda 	codePtr+1
.20fb	69 00		adc #$00			adc 	#0
.20fd	c8		iny				iny
.20fe	91 04		sta ($04),y			sta 	(temp0),y
.2100	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.2102	b1 7c		lda ($7c),y			lda 	(hashList),y
.2104	91 04		sta ($04),y			sta 	(temp0),y
.2106	c8		iny				iny
.2107	b1 7c		lda ($7c),y			lda 	(hashList),y
.2109	91 04		sta ($04),y			sta 	(temp0),y
.210b	a5 05		lda $05				lda 	temp0+1 					; set new link
.210d	91 7c		sta ($7c),y			sta 	(hashList),y
.210f	88		dey				dey
.2110	a5 04		lda $04				lda 	temp0
.2112	91 7c		sta ($7c),y			sta 	(hashList),y
.2114	ad f8 0a	lda $0af8			lda 	varType 					; is it a string ($3C)
.2117	c9 3c		cmp #$3c			cmp 	#$3C
.2119	d0 10		bne $212b			bne 	_CVNoDefaultNull
.211b	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.211d	8d cc 0a	sta $0acc			sta 	NullString
.2120	a0 05		ldy #$05			ldy 	#5
.2122	a9 cc		lda #$cc			lda 	#NullString & $FF
.2124	91 04		sta ($04),y			sta 	(temp0),y
.2126	a9 0a		lda #$0a			lda 	#NullString >> 8
.2128	c8		iny				iny
.2129	91 04		sta ($04),y			sta 	(temp0),y
.212b					_CVNoDefaultNull:
.212b	68		pla				pla
.212c	a8		tay				tay
.212d	60		rts				rts
>212e	09 09				_CVSize:.byte 	5+4,5+4 					; <storage for integer>
>2130	07 07						.byte 	5+2,5+2 					; <storage for string>
>2132	0b 0b						.byte 	5+6,5+6 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2134					FindVariable:
.2134	98		tya				tya
.2135	48		pha				pha
.2136	98		tya				tya 								; point temp2 to the actual name.
.2137	18		clc				clc
.2138	65 02		adc $02				adc 	codePtr
.213a	85 08		sta $08				sta 	temp2
.213c	a5 03		lda $03				lda 	codePtr+1
.213e	69 00		adc #$00			adc 	#0
.2140	85 09		sta $09				sta 	temp2+1
.2142	a0 00		ldy #$00			ldy 	#0
.2144	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.2146	85 04		sta $04				sta 	temp0
.2148	a5 7d		lda $7d				lda 	hashList+1
.214a	85 05		sta $05				sta 	temp0+1
.214c	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.214e	b1 04		lda ($04),y			lda 	(temp0),y
.2150	f0 2c		beq $217e			beq 	_FVFail
.2152	aa		tax				tax
.2153	88		dey				dey		 							; get LSB
.2154	b1 04		lda ($04),y			lda 	(temp0),y
.2156	85 04		sta $04				sta 	temp0 						; update pointer.
.2158	86 05		stx $05				stx 	temp0+1
.215a	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.215c	b1 04		lda ($04),y			lda 	(temp0),y
.215e	cd f7 0a	cmp $0af7			cmp 	varHash
.2161	d0 e9		bne $214c			bne 	_FVNext 					; if not, no point in checking the name.
.2163	88		dey				dey 								; copy name pointer to temp1.
.2164	b1 04		lda ($04),y			lda 	(temp0),y
.2166	85 07		sta $07				sta 	temp1+1
.2168	88		dey				dey
.2169	b1 04		lda ($04),y			lda 	(temp0),y
.216b	85 06		sta $06				sta 	temp1
.216d	a0 00		ldy #$00			ldy 	#0
.216f					_FVCheck:
.216f	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2171	d1 08		cmp ($08),y			cmp 	(temp2),y
.2173	d0 d7		bne $214c			bne 	_FVNext		 				; fail if different.
.2175	c8		iny				iny
.2176	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2178	90 f5		bcc $216f			bcc 	_FVCheck
.217a	68		pla				pla
.217b	a8		tay				tay
.217c	38		sec				sec
.217d	60		rts				rts
.217e					_FVFail:
.217e	68		pla				pla
.217f	a8		tay				tay
.2180	18		clc				clc
.2181	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2182					HashTableReset:
.2182	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2184	a9 00		lda #$00			lda 	#0
.2186					_HTRClear:
.2186	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2189	ca		dex				dex
.218a	d0 fa		bne $2186			bne 	_HTRClear
.218c	60		rts				rts

;******  Return to file: variable/variable.asm

.218d					variableHandler:
.218d	7c 90 21	jmp ($2190,x)			jmp 	(variableVectors,x)
.2190					variableVectors:
>2190	31 20					.word AccessVariable       ; index 0
>2192	82 21					.word HashTableReset       ; index 2

;******  Return to file: basic.asm


;******  End of listing
