
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Thu Mar 18 05:27:27 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	11 39						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 41		lda #$41			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 bf 14	jsr $14bf		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 04 1b	jsr $1b04		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 43 3c	jsr $3c43		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	8a		txa				txa
.1030	95 50		sta $50,x			sta 	esInt0,x
.1032	95 58		sta $58,x			sta 	esInt1,x
.1034	95 60		sta $60,x			sta 	esInt2,x
.1036	95 68		sta $68,x			sta 	esInt3,x
.1038	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.103a	aa		tax				tax
.103b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.103d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.103f	f0 41		beq $1082			beq 	_AGOExit
.1041	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1043	f0 3d		beq $1082			beq 	_AGOExit
.1045	c8		iny				iny 								; consume the token
.1046	a9 00		lda #$00			lda 	#AMD_IMM
.1048	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.104a	f0 2d		beq $1079			beq		_AGOEvalExit 				; with an operand.
.104c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.104e	f0 40		beq $1090			beq 	_AGOIndirect
.1050	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1052	d0 0b		bne $105f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1054	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1056	c8		iny				iny
.1057	aa		tax				tax
.1058	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.105a	e0 3a		cpx #$3a			cpx 	#$3A
.105c	f0 24		beq $1082			beq 	_AGOExit
.105e	88		dey				dey 								; unpick 2 iny
.105f					_AGOZeroPage1:
.105f	88		dey				dey
.1060	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1062	a2 06		ldx #$06		ldx	#6
.1064	20 8f 31	jsr $318f		jsr	mainHandler
.1067	20 bf 10	jsr $10bf			jsr 	AsmGetIndexing
.106a	a9 01		lda #$01			lda 	#AMD_ZERO
.106c	90 14		bcc $1082			bcc 	_AGOExit
.106e	a9 05		lda #$05			lda 	#AMD_ZEROX
.1070	e0 00		cpx #$00			cpx 	#0
.1072	f0 0e		beq $1082			beq 	_AGOExit
.1074	a9 09		lda #$09			lda 	#AMD_ZEROY
.1076	4c 82 10	jmp $1082			jmp 	_AGOExit
.1079					_AGOEvalExit:
.1079	48		pha				pha
.107a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.107c	a2 06		ldx #$06		ldx	#6
.107e	20 8f 31	jsr $318f		jsr	mainHandler
.1081	68		pla				pla
.1082					_AGOExit:
.1082	48		pha				pha 								; save the mode
.1083	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.1085	05 68		ora $68				ora 	esInt3
.1087	d0 02		bne $108b			bne 	_AGOValue
.1089	68		pla				pla
.108a	60		rts				rts
.108b					_AGOValue:
.108b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.108d	20 e0 14	jsr $14e0		jsr	errorHandler
.1090					_AGOIndirect:
.1090	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1092	a2 06		ldx #$06		ldx	#6
.1094	20 8f 31	jsr $318f		jsr	mainHandler
.1097	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1099	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.109b	f0 11		beq $10ae			beq 	_AGOIndIndY
.109d	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; must be ,X)
.10a0	90 39		bcc $10db			bcc 	AGISyntax
.10a2	e0 00		cpx #$00			cpx 	#0
.10a4	d0 35		bne $10db			bne 	AGISyntax
.10a6	a2 00		ldx #$00		ldx	#0
.10a8	20 8f 31	jsr $318f		jsr	mainHandler
.10ab	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10ad	60		rts				rts
.10ae					_AGOIndIndY:
.10ae	c8		iny				iny
.10af	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; get indexing if any
.10b2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10b4	90 cc		bcc $1082			bcc 	_AGOExit 					; none then exit
.10b6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b8	f0 21		beq $10db			beq 	AGISyntax
.10ba	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10bc	4c 82 10	jmp $1082			jmp 	_AGOExit
.10bf					AsmGetIndexing:
.10bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10c1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10c3	18		clc				clc
.10c4	d0 14		bne $10da			bne 	_AGIExit 					; no comma, return with CC
.10c6	c8		iny				iny 								; get what SHOULD be X or Y
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c9	38		sec				sec 								; subtract 6 bit ASCII of X
.10ca	e9 18		sbc #$18			sbc 	#"X" & $3F
.10cc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10ce	b0 0b		bcs $10db			bcs 	AGISyntax
.10d0	aa		tax				tax 								; put in index
.10d1	c8		iny				iny 								; get what follows that, should be the $3A marker
.10d2	b1 28		lda ($28),y			lda 	(codePtr),y
.10d4	c8		iny				iny
.10d5	c9 3a		cmp #$3a			cmp 	#$3A
.10d7	d0 02		bne $10db			bne 	AGISyntax
.10d9	38		sec				sec 								; return CS and index mode in X
.10da					_AGIExit:
.10da	60		rts				rts
.10db					AGISyntax:
.10db	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10dd	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10e0					AsmWriteInstruction:
.10e0	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10e3	98		tya				tya
.10e4	48		pha				pha
.10e5	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e8	29 02		and #$02			and 	#2
.10ea	f0 2d		beq $1119			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10ec	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10ef	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f2	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10f5	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f8	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10fb	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.10fe	e0 00		cpx #$00			cpx 	#0
.1100	f0 0e		beq $1110			beq 	_ASMWEchoExit
.1102	a5 50		lda $50				lda 	esInt0
.1104	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1107	e0 01		cpx #$01			cpx 	#1
.1109	f0 05		beq $1110			beq 	_ASMWEchoExit
.110b	a5 58		lda $58				lda 	esInt1
.110d	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1110					_ASMWEchoExit:
.1110	8a		txa				txa
.1111	48		pha				pha
.1112	a2 04		ldx #$04		ldx	#4
.1114	20 bf 14	jsr $14bf		jsr	deviceHandler
.1117	68		pla				pla
.1118	aa		tax				tax
.1119					_ASMWNoEcho:
.1119	ad f2 0a	lda $0af2			lda 	finalOpcode
.111c	20 34 11	jsr $1134			jsr 	AsmWriteByte
.111f	e0 00		cpx #$00			cpx 	#0
.1121	f0 0e		beq $1131			beq 	_ASMWExit
.1123	a5 50		lda $50				lda 	esInt0
.1125	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1128	e0 01		cpx #$01			cpx 	#1
.112a	f0 05		beq $1131			beq 	_ASMWExit
.112c	a5 58		lda $58				lda 	esInt1
.112e	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1131					_ASMWExit:
.1131	68		pla				pla
.1132	a8		tay				tay
.1133	60		rts				rts
.1134					AsmWriteByte:
.1134	a0 00		ldy #$00			ldy 	#0
.1136	48		pha				pha
.1137	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.113a	85 2a		sta $2a				sta 	temp0
.113c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.113f	85 2b		sta $2b				sta 	temp0+1
.1141	68		pla				pla 								; write out the byte.
.1142	91 2a		sta ($2a),y			sta 	(temp0),y
.1144	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1147	d0 03		bne $114c			bne 	_AWBNoCarry
.1149	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.114c					_AWBNoCarry:
.114c	60		rts				rts
.114d					AWIWriteHexSpace:
.114d	48		pha				pha
.114e	a9 20		lda #$20			lda 	#" "
.1150	20 67 11	jsr $1167			jsr 	AWIPrintChar
.1153	68		pla				pla
.1154					AWIWriteHex:
.1154	48		pha				pha
.1155	4a		lsr a				lsr 	a
.1156	4a		lsr a				lsr 	a
.1157	4a		lsr a				lsr 	a
.1158	4a		lsr a				lsr 	a
.1159	20 5d 11	jsr $115d			jsr 	AWIPrintNibble
.115c	68		pla				pla
.115d					AWIPrintNibble:
.115d	29 0f		and #$0f			and 	#15
.115f	c9 0a		cmp #$0a			cmp 	#10
.1161	90 02		bcc $1165			bcc 	_AWIPNDigit
.1163	69 06		adc #$06			adc 	#6
.1165					_AWIPNDigit:
.1165	69 30		adc #$30			adc 	#48
.1167					AWIPrintChar:
.1167	85 32		sta $32				sta 	tempShort
.1169	8a		txa				txa
.116a	48		pha				pha
.116b	a5 32		lda $32				lda 	tempShort
.116d	a2 16		ldx #$16		ldx	#22
.116f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1172	68		pla				pla
.1173	aa		tax				tax
.1174	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.1175					AssembleOneInstruction:
.1175	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1178	aa		tax				tax
.1179	bd 45 11	lda $1145,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.117c	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.117f	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.1182	8d f4 0a	sta $0af4			sta 	asmMode
.1185	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.1187	d0 05		bne $118e			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1189	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.118c	b0 10		bcs $119e			bcs 	_AOISuccess 				; worked ok.
.118e					_AOIThreeBytes:
.118e	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.1191	bd c8 11	lda $11c8,x			lda 	AbsoluteVersionTable,x
.1194	30 09		bmi $119f			bmi 	_AOIError					; not possible, no equivalent.
.1196	8d f4 0a	sta $0af4			sta 	asmMode
.1199	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.119c	90 01		bcc $119f			bcc 	_AOIError 					; didn't work.
.119e					_AOISuccess:
.119e	60		rts				rts
.119f					_AOIError:
.119f	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11a1	20 e0 14	jsr $14e0		jsr	errorHandler
.11a4					AssembleAttempt:
.11a4	20 ad 11	jsr $11ad			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a7	b0 03		bcs $11ac			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a9	20 57 13	jsr $1357			jsr 	AssembleSpecialCase
.11ac					_AAExit:
.11ac	60		rts				rts
.11ad					_AADispatch:
.11ad	ad f3 0a	lda $0af3			lda 	asmToken
.11b0	c9 b4		cmp #$b4			cmp 	#TKA_GROUP4
.11b2	b0 11		bcs $11c5			bcs 	_AAGroup4
.11b4	c9 ab		cmp #$ab			cmp 	#TKA_GROUP3
.11b6	b0 0a		bcs $11c2			bcs 	_AAGroup3
.11b8	c9 99		cmp #$99			cmp 	#TKA_GROUP2
.11ba	b0 03		bcs $11bf			bcs 	_AAGroup2
.11bc	4c 9d 12	jmp $129d			jmp 	AssembleGroup1
.11bf					_AAGroup2:
.11bf	4c f8 12	jmp $12f8			jmp 	AssembleGroup2
.11c2					_AAGroup3:
.11c2	4c 19 13	jmp $1319			jmp 	AssembleGroup3
.11c5					_AAGroup4:
.11c5	4c 4d 13	jmp $134d			jmp 	AssembleGroup4
.11c8					AbsoluteVersionTable:
>11c8	ff						.byte	$FF 			; fail AMD_IMM
>11c9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11ca	ff						.byte	$FF 			; fail AMD_ACCIMP
>11cb	ff						.byte	$FF 			; fail AMD_ABS
>11cc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11cd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11ce	ff						.byte	$FF 			; fail AMD_ABSY
>11cf	ff						.byte	$FF 			; fail AMD_ABSX
>11d0	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11d1	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11d2	ff						.byte	$FF 			; fail AMD_ABSIND
>11d3	ff						.byte	$FF 			; fail AMD_ABSINDX
>11d4	ff						.byte	$FF 			; fail AMD_REL
>11d5	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d6					OpcodeTable:
>11d6	01					.byte	$01			; $91 ora
>11d7	21					.byte	$21			; $92 (and)
>11d8	41					.byte	$41			; $93 eor
>11d9	61					.byte	$61			; $94 adc
>11da	81					.byte	$81			; $95 sta
>11db	a1					.byte	$a1			; $96 lda
>11dc	c1					.byte	$c1			; $97 cmp
>11dd	e1					.byte	$e1			; $98 sbc
>11de	02					.byte	$02			; $99 asl
>11df	22					.byte	$22			; $9a rol
>11e0	42					.byte	$42			; $9b lsr
>11e1	62					.byte	$62			; $9c ror
>11e2	82					.byte	$82			; $9d stx
>11e3	a2					.byte	$a2			; $9e ldx
>11e4	c2					.byte	$c2			; $9f dec
>11e5	e2					.byte	$e2			; $a0 inc
>11e6	60					.byte	$60			; $a1 stz
>11e7	20					.byte	$20			; $a2 bit
>11e8	80					.byte	$80			; $a3 sty
>11e9	a0					.byte	$a0			; $a4 ldy
>11ea	c0					.byte	$c0			; $a5 cpy
>11eb	e0					.byte	$e0			; $a6 cpx
>11ec	00					.byte	$00			; $a7 tsb
>11ed	10					.byte	$10			; $a8 trb
>11ee	14					.byte	$14			; $a9 jsr
>11ef	40					.byte	$40			; $aa jmp
>11f0	10					.byte	$10			; $ab bpl
>11f1	30					.byte	$30			; $ac bmi
>11f2	50					.byte	$50			; $ad bvc
>11f3	70					.byte	$70			; $ae bvs
>11f4	90					.byte	$90			; $af bcc
>11f5	b0					.byte	$b0			; $b0 bcs
>11f6	d0					.byte	$d0			; $b1 bne
>11f7	f0					.byte	$f0			; $b2 beq
>11f8	80					.byte	$80			; $b3 bra
>11f9	00					.byte	$00			; $b4 brk
>11fa	08					.byte	$08			; $b5 php
>11fb	18					.byte	$18			; $b6 clc
>11fc	28					.byte	$28			; $b7 plp
>11fd	38					.byte	$38			; $b8 sec
>11fe	40					.byte	$40			; $b9 rti
>11ff	48					.byte	$48			; $ba pha
>1200	58					.byte	$58			; $bb cli
>1201	5a					.byte	$5a			; $bc phy
>1202	60					.byte	$60			; $bd rts
>1203	68					.byte	$68			; $be pla
>1204	78					.byte	$78			; $bf sei
>1205	7a					.byte	$7a			; $c0 ply
>1206	88					.byte	$88			; $c1 dey
>1207	8a					.byte	$8a			; $c2 txa
>1208	98					.byte	$98			; $c3 tya
>1209	9a					.byte	$9a			; $c4 txs
>120a	a8					.byte	$a8			; $c5 tay
>120b	aa					.byte	$aa			; $c6 tax
>120c	b8					.byte	$b8			; $c7 clv
>120d	ba					.byte	$ba			; $c8 tsx
>120e	c8					.byte	$c8			; $c9 iny
>120f	ca					.byte	$ca			; $ca dex
>1210	d8					.byte	$d8			; $cb cld
>1211	da					.byte	$da			; $cc phx
>1212	e8					.byte	$e8			; $cd inx
>1213	ea					.byte	$ea			; $ce nop
>1214	f8					.byte	$f8			; $cf sed
>1215	fa					.byte	$fa			; $d0 plx
.1216					Group2OpcodeAvailability:
>1216	ae					.byte	$ae			; $99 asl $02
>1217	ae					.byte	$ae			; $9a rol $22
>1218	ae					.byte	$ae			; $9b lsr $42
>1219	ae					.byte	$ae			; $9c ror $62
>121a	0a					.byte	$0a			; $9d stx $82
>121b	0b					.byte	$0b			; $9e ldx $a2
>121c	aa					.byte	$aa			; $9f dec $c2
>121d	aa					.byte	$aa			; $a0 inc $e2
>121e	22					.byte	$22			; $a1 stz $60
>121f	aa					.byte	$aa			; $a2 bit $20
>1220	2a					.byte	$2a			; $a3 sty $80
>1221	ab					.byte	$ab			; $a4 ldy $a0
>1222	2b					.byte	$2b			; $a5 cpy $c0
>1223	0b					.byte	$0b			; $a6 cpx $e0
>1224	0a					.byte	$0a			; $a7 tsb $00
>1225	0a					.byte	$0a			; $a8 trb $10
>1226	08					.byte	$08			; $a9 jsr $14
>1227	08					.byte	$08			; $aa jmp $40
.1228					AssemblerSpecialCases:
>1228	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>122b	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>122e	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>1231	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>1234	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1237	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>123a	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>123d	a2 00 89				.byte	$a2,0,$89		; bit #
>1240	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>1243	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1246	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1247					AssembleLabel:
.1247	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1249	c9 3a		cmp #$3a			cmp 	#$3A
.124b	b0 4b		bcs $1298			bcs 	_ALSyntax
.124d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.124f	a2 00		ldx #$00		ldx	#0
.1251	20 11 40	jsr $4011		jsr	variableHandler
.1254	a5 48		lda $48				lda 	esType 						; check integer reference
.1256	c9 80		cmp #$80			cmp 	#$80
.1258	d0 3e		bne $1298			bne 	_ALSyntax
.125a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.125c	85 2a		sta $2a				sta 	temp0
.125e	a5 58		lda $58				lda 	esInt1
.1260	85 2b		sta $2b				sta 	temp0+1
.1262	98		tya				tya
.1263	48		pha				pha
.1264	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1267	4a		lsr a				lsr 	a
.1268	90 11		bcc $127b			bcc 	_ALWrite
.126a	a0 00		ldy #$00			ldy 	#0
.126c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.126f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1271	d0 20		bne $1293			bne 	_ALChanged
.1273	c8		iny				iny
.1274	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1277	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1279	d0 18		bne $1293			bne 	_ALChanged
.127b					_ALWrite:
.127b	a0 00		ldy #$00			ldy 	#0
.127d	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.1280	91 2a		sta ($2a),y			sta 	(temp0),y
.1282	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1285	c8		iny				iny
.1286	91 2a		sta ($2a),y			sta 	(temp0),y
.1288	a9 00		lda #$00			lda 	#0
.128a	c8		iny				iny
.128b	91 2a		sta ($2a),y			sta 	(temp0),y
.128d	c8		iny				iny
.128e	91 2a		sta ($2a),y			sta 	(temp0),y
.1290	68		pla				pla
.1291	a8		tay				tay
.1292	60		rts				rts
.1293					_ALChanged:
.1293	a2 26		ldx #$26			ldx 	#ErrorID_Label
.1295	20 e0 14	jsr $14e0		jsr	errorHandler
.1298					_ALSyntax:
.1298	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.129a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.129d					AssembleGroup1:
.129d	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12a0	c9 95		cmp #$95			cmp 	#TKW_STA
.12a2	d0 07		bne $12ab			bne 	_AG1NotStoreImm
.12a4	ad f4 0a	lda $0af4			lda 	asmMode
.12a7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12a9	f0 2c		beq $12d7			beq 	AG1ModeError
.12ab					_AG1NotStoreImm:
.12ab	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12ae	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12b1	48		pha				pha
.12b2	f0 23		beq $12d7			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12b4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12b6	d0 02		bne $12ba			bne 	_AG1NotImmediate
.12b8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ba					_AG1NotImmediate:
.12ba	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12bc	d0 02		bne $12c0			bne 	_AG1NotZX
.12be	a2 00		ldx #$00			ldx 	#0
.12c0					_AG1NotZX:
.12c0	68		pla				pla 								; restore length
.12c1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12c3	b0 10		bcs $12d5			bcs 	AG1Fail
.12c5					AG1ReturnValue:
.12c5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12c7	18		clc				clc
.12c8	bd ea 12	lda $12ea,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12cb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12ce	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12d0	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.12d3	38		sec				sec
.12d4	60		rts				rts
.12d5					AG1Fail:
.12d5	18		clc				clc
.12d6	60		rts				rts
.12d7					AG1ModeError:
.12d7	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.12d9	20 e0 14	jsr $14e0		jsr	errorHandler
.12dc					AMDOperandSize:
>12dc	01 01 00 02					.byte 	1,1,0,2
>12e0	01 01 02 02					.byte 	1,1,2,2
>12e4	01 01 02 02					.byte 	1,1,2,2
>12e8	01 01						.byte 	1,1
.12ea					AMDOffsetFromBase:
>12ea	00 04 08 0c					.byte 	0,4,8,12
>12ee	10 14 18 1c					.byte	16,20,24,28
>12f2	11 00 00 00					.byte 	17,0,0,0
>12f6	00 00						.byte 	0,0
.12f8					AssembleGroup2:
.12f8	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.12fb	c9 08		cmp #$08			cmp 	#8
.12fd	b0 18		bcs $1317			bcs 	_AG2Fail
.12ff	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1301	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1304	bd 7d 11	lda $117d,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1307					_AG2Shift:
.1307	4a		lsr a				lsr 	a
.1308	c6 2a		dec $2a				dec 	temp0
.130a	10 fb		bpl $1307			bpl 	_AG2Shift
.130c	90 09		bcc $1317			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.130e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1311	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1314	4c c5 12	jmp $12c5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1317					_AG2Fail:
.1317	18		clc				clc
.1318	60		rts				rts
.1319					AssembleGroup3:
.1319	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.131c	4a		lsr a				lsr 	a
.131d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.131f	90 21		bcc $1342			bcc 	_AG3Default
.1321	38		sec				sec	 								; calculate branch offset
.1322	a5 50		lda $50				lda		esInt0
.1324	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1327	aa		tax				tax
.1328	a5 58		lda $58				lda		esInt1
.132a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.132d	85 58		sta $58				sta 	esInt1
.132f	8a		txa				txa 								; add 126, now 128 too many.
.1330	18		clc				clc 								; we can use this to check the range
.1331	69 7e		adc #$7e			adc 	#126
.1333	85 50		sta $50				sta 	esInt0
.1335	90 02		bcc $1339			bcc 	_AG3NoCarry
.1337	e6 58		inc $58				inc 	esInt1
.1339					_AG3NoCarry:
.1339	a5 58		lda $58				lda 	esInt1 						; check in range.
.133b	d0 0b		bne $1348			bne 	_AG3Range
.133d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.133f	38		sec				sec
.1340	e9 80		sbc #$80			sbc 	#128
.1342					_AG3Default:
.1342	85 50		sta $50				sta 	esInt0
.1344					_AG3ExitOk:
.1344	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1346	d0 07		bne $134f			bne 	AG4Write
.1348					_AG3Range:
.1348	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.134a	20 e0 14	jsr $14e0		jsr	errorHandler
.134d					AssembleGroup4:
.134d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.134f					AG4Write:
.134f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1352	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1355	38		sec				sec
.1356	60		rts				rts
.1357					AssembleSpecialCase:
.1357	a2 00		ldx #$00			ldx 	#0
.1359					_ASCScan:
.1359	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.135c	cd f3 0a	cmp $0af3			cmp 	asmToken
.135f	d0 08		bne $1369			bne 	_ASCNext
.1361	bd 29 12	lda $1229,x			lda 	AssemblerSpecialCases+1,x
.1364	cd f4 0a	cmp $0af4			cmp 	asmMode
.1367	f0 0a		beq $1373			beq 	_ASCFound
.1369					_ASCNext:
.1369	e8		inx				inx									; next entry
.136a	e8		inx				inx
.136b	e8		inx				inx
.136c	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; until table ends
.136f	d0 e8		bne $1359			bne 	_ASCScan
.1371	18		clc				clc
.1372	60		rts				rts
.1373					_ASCFound:
.1373	bd 2a 12	lda $122a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.1376	48		pha				pha
.1377	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.137a	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.137d	aa		tax				tax
.137e	68		pla				pla 								; opcode back
.137f	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1382	38		sec				sec
.1383	60		rts				rts

;******  Return to file: assembler/assembler.asm

.1384					assemblerHandler:
.1384	7c 87 13	jmp ($1387,x)			jmp 	(assemblerVectors,x)
.1387					assemblerVectors:
>1387	75 11					.word AssembleOneInstruction ; index 0
>1389	47 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.138b					section_end_assembler:
.138b					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.138b					X16Break:
.138b	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.138e	f0 01		beq $1391			beq 	_IsBreak
.1390	60		rts				rts
.1391					_IsBreak:
.1391	a2 21		ldx #$21			ldx 	#ErrorID_Break
.1393	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1396					ExternSave:
.1396	98		tya				tya
.1397	48		pha				pha
.1398	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.139b	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.139e	a9 01		lda #$01			lda 	#1
.13a0	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13a2	a0 00		ldy #$00			ldy 	#0
.13a4	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13a7	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13a9	85 2a		sta $2a				sta 	temp0
.13ab	a5 59		lda $59				lda 	esInt1+1
.13ad	85 2b		sta $2b				sta 	temp0+1
.13af	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13b1	a4 5a		ldy $5a				ldy 	esInt1+2
.13b3	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13b5	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13b8	b0 03		bcs $13bd			bcs 	_ESSave
.13ba	68		pla				pla
.13bb	a8		tay				tay
.13bc	60		rts				rts
.13bd					_ESSave:
.13bd	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13bf	20 e0 14	jsr $14e0		jsr	errorHandler
.13c2					ExternLoad:
.13c2	98		tya				tya
.13c3	48		pha				pha
.13c4	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.13c7	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13ca	a9 01		lda #$01			lda 	#1
.13cc	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13ce	a0 00		ldy #$00			ldy 	#0
.13d0	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13d3	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.13d5	a4 59		ldy $59				ldy 	esInt1+1
.13d7	a9 00		lda #$00			lda 	#0 							; load command
.13d9	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13dc	b0 03		bcs $13e1			bcs 	_ESLoad
.13de	68		pla				pla
.13df	a8		tay				tay
.13e0	60		rts				rts
.13e1					_ESLoad:
.13e1	a2 20		ldx #$20			ldx 	#ErrorID_Load
.13e3	20 e0 14	jsr $14e0		jsr	errorHandler
.13e6					ExternGetLength:
.13e6	a5 50		lda $50				lda 	esInt0 						; length into A.
.13e8	85 2a		sta $2a				sta 	temp0
.13ea	a5 58		lda $58				lda 	esInt1
.13ec	85 2b		sta $2b				sta 	temp0+1
.13ee	a0 00		ldy #$00			ldy 	#0
.13f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.13f2	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.13f4	a4 58		ldy $58				ldy 	esInt1
.13f6	e8		inx				inx 								; advance over the length pointer.
.13f7	d0 01		bne $13fa			bne 	_ESNoCarry
.13f9	c8		iny				iny
.13fa					_ESNoCarry:
.13fa	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.13fb					IOInitialise:
.13fb	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.13fd	20 26 14	jsr $1426			jsr 	IOPrintChar
.1400	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1402	20 52 14	jsr $1452			jsr 	IOInk
.1405	a9 00		lda #$00			lda 	#0
.1407	20 66 14	jsr $1466			jsr 	IOPaper
.140a	20 0e 14	jsr $140e			jsr 	IOClearScreen
.140d	60		rts				rts
.140e					IOClearScreen:
.140e	48		pha				pha
.140f	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1411	20 26 14	jsr $1426			jsr 	IOPrintChar
.1414	68		pla				pla
.1415	60		rts				rts
.1416					IONewLine:
.1416	48		pha				pha
.1417	a9 0d		lda #$0d			lda 	#13
.1419	20 26 14	jsr $1426			jsr 	IOPrintChar
.141c	68		pla				pla
.141d	60		rts				rts
.141e					IOTab:
.141e	48		pha				pha
.141f	a9 20		lda #$20			lda 	#32
.1421	20 26 14	jsr $1426			jsr 	IOPrintChar
.1424	68		pla				pla
.1425	60		rts				rts
.1426					IOPrintAscii:
.1426					IOPrintChar:
.1426	aa		tax				tax 								; save in X so we can save Y
.1427	5a		phy				phy
.1428	8a		txa				txa
.1429	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.142b	d0 02		bne $142f			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.142d	a9 14		lda #$14			lda 	#$14
.142f					_IOPCNotBS:
.142f	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1432	7a		ply				ply
.1433	60		rts				rts
.1434					IOInkey:
.1434	98		tya				tya
.1435	48		pha				pha
.1436	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1439	85 32		sta $32				sta 	tempShort
.143b	68		pla				pla
.143c	a8		tay				tay
.143d	a5 32		lda $32				lda 	tempShort					; no key pressed.
.143f	f0 10		beq $1451			beq 	_IOIExit
.1441	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.1443	f0 0c		beq $1451			beq 	_IOIExit
.1445	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1447	f0 06		beq $144f			beq 	_IOIBackspace
.1449	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.144b	90 e7		bcc $1434			bcc 	IOInkey
.144d	b0 02		bcs $1451			bcs 	_IOIExit
.144f					_IOIBackspace:
.144f	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1451					_IOIExit:
.1451	60		rts				rts
.1452					IOInk:
.1452	48		pha				pha
.1453	29 07		and #$07			and 	#7 							; 8 primaries
.1455	aa		tax				tax
.1456	bd 5e 14	lda $145e,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1459	20 26 14	jsr $1426			jsr 	IOPrintChar
.145c	68		pla				pla
.145d	60		rts				rts
.145e					_IOColourTable:
>145e	90						.byte 	$90 					; 0 Black
>145f	96						.byte 	$96 					; 1 Red
>1460	1e						.byte 	$1E 					; 2 Green
>1461	9e						.byte 	$9E 					; 3 Yellow
>1462	9a						.byte 	$9A 					; 4 Blue
>1463	9c						.byte 	$9C 					; 5 Magenta
>1464	9f						.byte 	$9F 					; 6 Cyan
>1465	05						.byte 	$05 					; 7 White
.1466					IOPaper:
.1466	48		pha				pha
.1467	48		pha				pha
.1468	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.146a	20 26 14	jsr $1426			jsr 	IOPrintChar 			; and then swap them again.
.146d	68		pla				pla
.146e	20 52 14	jsr $1452			jsr 	IOInk
.1471	a9 01		lda #$01			lda 	#1
.1473	20 26 14	jsr $1426			jsr 	IOPrintChar
.1476	68		pla				pla
.1477	60		rts				rts
.1478					IOLocate:
.1478	48		pha				pha
.1479	a9 13		lda #$13			lda 	#$13 					; home cursor code
.147b	20 26 14	jsr $1426			jsr 	IOPrintChar
.147e	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1480	20 87 14	jsr $1487			jsr 	_IOLoc2
.1483	68		pla				pla
.1484	a8		tay				tay
.1485	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1487					_IOLoc2:
.1487	c0 00		cpy #$00			cpy 	#0
.1489	f0 06		beq $1491			beq 	_IOLocExit
.148b	20 26 14	jsr $1426			jsr 	IOPrintChar
.148e	88		dey				dey
.148f	d0 f6		bne $1487			bne 	_IOLoc2
.1491					_IOLocExit:
.1491	60		rts				rts
.1492					IOInput:
.1492	a9 00		lda #$00			lda 	#0
.1494	8d f6 0a	sta $0af6			sta 	bufferCount
.1497					_IOILoop:
.1497	20 cf ff	jsr $ffcf			jsr 	$FFCF
.149a	c9 0d		cmp #$0d			cmp 	#13
.149c	f0 10		beq $14ae			beq 	_IOIExit
.149e	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14a1	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14a3	f0 f2		beq $1497			beq 	_IOILoop
.14a5	ee f6 0a	inc $0af6			inc 	bufferCount
.14a8	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14ab	4c 97 14	jmp $1497			jmp 	_IOILoop
.14ae					_IOIExit:
.14ae	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14b0	85 2a		sta $2a				sta 	temp0
.14b2	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14b4	85 2b		sta $2b				sta 	1+(temp0)
.14b6	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14b7					IOReadTimer:
.14b7	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14ba	48		pha				pha
.14bb	8a		txa				txa
.14bc	a8		tay				tay
.14bd	68		pla				pla
.14be	60		rts				rts

;******  Return to file: device/device.asm

.14bf					deviceHandler:
.14bf	7c c2 14	jmp ($14c2,x)			jmp 	(deviceVectors,x)
.14c2					deviceVectors:
>14c2	8b 13					.word X16Break             ; index 0
>14c4	0e 14					.word IOClearScreen        ; index 2
>14c6	16 14					.word IONewLine            ; index 4
>14c8	fb 13					.word IOInitialise         ; index 6
>14ca	52 14					.word IOInk                ; index 8
>14cc	34 14					.word IOInkey              ; index 10
>14ce	92 14					.word IOInput              ; index 12
>14d0	c2 13					.word ExternLoad           ; index 14
>14d2	78 14					.word IOLocate             ; index 16
>14d4	66 14					.word IOPaper              ; index 18
>14d6	26 14					.word IOPrintChar          ; index 20
>14d8	26 14					.word IOPrintAscii         ; index 22
>14da	96 13					.word ExternSave           ; index 24
>14dc	1e 14					.word IOTab                ; index 26
>14de	b7 14					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.14e0					section_end_device:
.14e0					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.14e0					ErrorHandler:
.14e0	8a		txa				txa
.14e1	48		pha				pha
.14e2	a9 01		lda #$01			lda 	#1 							; red
.14e4	a2 08		ldx #$08		ldx	#8
.14e6	20 bf 14	jsr $14bf		jsr	deviceHandler
.14e9	68		pla				pla
.14ea	aa		tax				tax
.14eb	a9 56		lda #$56			lda 	#(ErrorTextList) & $FF
.14ed	85 2a		sta $2a				sta 	temp0
.14ef	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.14f1	85 2b		sta $2b				sta 	1+(temp0)
.14f3	ca		dex		_EHFind:dex									; errors start at 1
.14f4	f0 10		beq $1506			beq 	_EHFound
.14f6	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.14f8	38		sec				sec
.14f9	a5 2a		lda $2a				lda 	temp0
.14fb	71 2a		adc ($2a),y			adc 	(temp0),y
.14fd	85 2a		sta $2a				sta 	temp0
.14ff	90 f2		bcc $14f3			bcc 	_EHFind
.1501	e6 2b		inc $2b				inc 	temp0+1
.1503	4c f3 14	jmp $14f3			jmp 	_EHFind
.1506					_EHFound:
.1506	20 fe 17	jsr $17fe			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1509	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.150b	b1 28		lda ($28),y			lda 	(codePtr),y
.150d	f0 39		beq $1548			beq 	_EHNoLine
.150f	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1511	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1514	90 32		bcc $1548			bcc 	_EHNoLine
.1516	a9 52		lda #$52			lda 	#(EHAtMsg) & $FF
.1518	85 2a		sta $2a				sta 	temp0
.151a	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.151c	85 2b		sta $2b				sta 	1+(temp0)
.151e	20 fe 17	jsr $17fe			jsr 	EHPrintAscii
.1521	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1523	a2 00		ldx #$00			ldx 	#0
.1525	b1 28		lda ($28),y			lda 	(codePtr),y
.1527	95 50		sta $50,x			sta 	esInt0,x
.1529	c8		iny				iny
.152a	b1 28		lda ($28),y			lda 	(codePtr),y
.152c	95 58		sta $58,x			sta 	esInt1,x
.152e	a9 00		lda #$00			lda 	#0
.1530	95 60		sta $60,x			sta 	esInt2,x
.1532	95 68		sta $68,x			sta 	esInt3,x
.1534	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1536	85 2a		sta $2a				sta 	temp0
.1538	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.153a	85 2b		sta $2b				sta 	1+(temp0)
.153c	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.153e	a9 00		lda #$00			lda 	#0							; stack position zero.
.1540	a2 0c		ldx #$0c		ldx	#12
.1542	20 8f 31	jsr $318f		jsr	mainHandler
.1545	20 fe 17	jsr $17fe			jsr 	EHPrintAscii
.1548					_EHNoLine:
.1548	a2 04		ldx #$04		ldx	#4
.154a	20 bf 14	jsr $14bf		jsr	deviceHandler
.154d	a2 02		ldx #$02		ldx	#2
.154f	20 04 1b	jsr $1b04		jsr	interactionHandler
.1552					EHAtMsg:
>1552	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.1556					ErrorTextList:
>1556	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>155e	20 6e 6f 74 20 50 72 65 73 65 6e 74
>156a	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1572	45 72 72 6f 72
>1577	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>157f	64 69 73 61 62 6c 65 64
>1587	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>158f	6f 6e 20 66 61 69 6c 65 64
>1598	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15a0	42 79 20 5a 65 72 6f
>15a7	04 53 74 6f 70				.text 4,"Stop"
>15ac	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15b4	73 6d 61 74 63 68
>15ba	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15c2	20 56 61 6c 75 65
>15c8	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15d0	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>15de	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>15e6	20 63 6f 6d 6d 61
>15ec	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>15f4	20 72 65 66 65 72 65 6e 63 65
>15fe	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>1606	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1614	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>161c	74 6f 6f 20 6c 6f 6e 67
>1624	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>162c	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1639	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1641	69 74 68 6f 75 74 20 52 45 50 45 41 54
>164e	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1656	74 68 6f 75 74 20 46 4f 52
>165f	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1667	74 68 6f 75 74 20 57 48 49 4c 45
>1672	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>167a	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1687	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>168f	54 20 69 6e 64 65 78
>1696	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>169e	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16ae	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16b6	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16c5	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16cd	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>16dd	63 65
>16df	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>16e7	20 50 72 6f 63 65 64 75 72 65
>16f1	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>16f9	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1709	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1711	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>171f	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>1727	75 69 72 65 73 20 61 72 72 61 79
>1732	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>173a	61 79 20 69 6e 64 65 78
>1742	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>174a	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>175a	6e 64 69 63 65 73
>1760	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>1768	64 61 74 61
>176c	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>1774	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1781	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1789	69 6c 65 64
>178d	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1795	69 6c 65 64
>1799	05 42 72 65 61 6b			.text 5,"Break"
>179f	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17a7	6d 65 6d 6f 72 79
>17ad	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17b5	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17c4	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17cc	72 61 6e 64 2f 4d 6f 64 65
>17d5	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>17dd	6f 75 74 20 6f 66 20 72 61 6e 67 65
>17e9	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>17f1	68 61 6e 67 65 64 20 76 61 6c 75 65
>17fd	00					.byte 0

;******  Return to file: error/errorhandler.asm

.17fe					EHPrintAscii:
.17fe	a0 00		ldy #$00			ldy 	#0
.1800	b1 2a		lda ($2a),y			lda 	(temp0),y
.1802	aa		tax				tax
.1803	f0 0f		beq $1814			beq 	_EHPExit
.1805					_EHPLoop:
.1805	c8		iny				iny
.1806	8a		txa				txa
.1807	48		pha				pha
.1808	b1 2a		lda ($2a),y			lda 	(temp0),y
.180a	a2 16		ldx #$16		ldx	#22
.180c	20 bf 14	jsr $14bf		jsr	deviceHandler
.180f	68		pla				pla
.1810	aa		tax				tax
.1811	ca		dex				dex
.1812	d0 f1		bne $1805			bne 	_EHPLoop
.1814					_EHPExit:
.1814	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1815					section_end_error:
.1815					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1815					ExtensionHandler:
.1815	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1817	d0 08		bne $1821			bne 	_ExtensionUnary 			; is passed in A.
.1819	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.181b	c8		iny				iny
.181c	0a		asl a				asl 	a
.181d	aa		tax				tax
.181e	7c 1f 18	jmp ($181f,x)			jmp 	(Group2Vectors-12,x)
.1821					_ExtensionUnary:
.1821	48		pha				pha 								; save stack pos in A
.1822	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1824	c8		iny				iny
.1825	0a		asl a				asl 	a
.1826	aa		tax				tax
.1827	68		pla				pla 								; restore stack pos and call group3 command.
.1828	7c 25 18	jmp ($1825,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.182b					Group2Vectors:
>182b	60 18					.word	Command_VPoke            ; $86 vpoke
>182d	63 18					.word	Command_VDoke            ; $87 vdoke
>182f	3d 18					.word	Command_VLoad            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1831					Group3Vectors:
>1831	a4 18					.word	Command_VPeek            ; $86 vpeek(
>1833	a7 18					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1835					XEvaluateInteger:
.1835	8a		txa				txa
.1836	a2 06		ldx #$06		ldx	#6
.1838	20 8f 31	jsr $318f		jsr	mainHandler
.183b	aa		tax				tax
.183c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.183d					Command_VLoad:
.183d	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.183f	20 04 2a	jsr $2a04			jsr 	EvaluateString
.1842	e8		inx				inx
.1843	20 a1 30	jsr $30a1			jsr 	MInt32False
.1846	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1848	95 50		sta $50,x			sta 	esInt0,x
.184a	a5 36		lda $36				lda 	lowMemory+1
.184c	95 58		sta $58,x			sta 	esInt1,x
.184e	ca		dex				dex
.184f	a2 0e		ldx #$0e		ldx	#14
.1851	20 bf 14	jsr $14bf		jsr	deviceHandler
.1854	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1856	85 2a		sta $2a				sta 	temp0
.1858	a5 59		lda $59				lda 	esInt1+1
.185a	85 2b		sta $2b				sta 	temp0+1
.185c	20 c5 18	jsr $18c5			jsr 	LoadVRAMFile 					; load the VRAM file in.
.185f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1860					Command_VPoke:
.1860	38		sec				sec 						; one byte , CS
.1861	b0 01		bcs $1864			bcs 	CmdVideoWrite
.1863					Command_VDoke:
.1863	18		clc				clc 						; two bytes, CC
.1864					CmdVideoWrite:
.1864	08		php				php 						; save one or two btes
.1865	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1867	20 35 18	jsr $1835			jsr 	XEvaluateInteger
.186a	20 21 31	jsr $3121			jsr 	CheckComma
.186d	e8		inx				inx
.186e	20 35 18	jsr $1835			jsr 	XEvaluateInteger
.1871	ca		dex				dex
.1872	20 83 18	jsr $1883			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1875	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1877	8d 23 9f	sta $9f23			sta 	$9F23
.187a	28		plp				plp 						; if it was Poke then exit
.187b	b0 05		bcs $1882			bcs 	_CVWExit
.187d	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.187f	8d 23 9f	sta $9f23			sta 	$9F23
.1882					_CVWExit:
.1882	60		rts				rts
.1883					SetUpTOSVRamAddress:
.1883	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1885	29 01		and #$01			and 	#1
.1887	15 68		ora $68,x			ora 	esInt3,x
.1889	d0 14		bne $189f			bne 	CVWValue
.188b	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.188d	8d 20 9f	sta $9f20			sta 	$9F20
.1890	b5 58		lda $58,x			lda 	esInt1,x
.1892	8d 21 9f	sta $9f21			sta	 	$9F21
.1895	b5 60		lda $60,x			lda 	esInt2,x
.1897	29 01		and #$01			and 	#1
.1899	09 10		ora #$10			ora 	#$10 				; step 1.
.189b	8d 22 9f	sta $9f22			sta 	$9F22
.189e	60		rts				rts
.189f					CVWValue:
.189f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18a1	20 e0 14	jsr $14e0		jsr	errorHandler
.18a4					Command_VPeek:
.18a4	38		sec				sec 						; one byte , CS
.18a5	b0 01		bcs $18a8			bcs 	CmdVideoRead
.18a7					Command_VDeek:
.18a7	18		clc				clc 						; two bytes, CC
.18a8					CmdVideoRead:
.18a8	08		php				php 						; save action on stack.
.18a9	aa		tax				tax 						; save stack position
.18aa	20 35 18	jsr $1835			jsr 	XEvaluateInteger 	; address
.18ad	20 14 31	jsr $3114			jsr 	CheckRightParen 	; closing right bracket.
.18b0	20 83 18	jsr $1883			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.18b3	20 a1 30	jsr $30a1			jsr 	MInt32False 		; zero return.
.18b6	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.18b9	95 50		sta $50,x			sta 	esInt0,x
.18bb	28		plp				plp 						; check if DOKE (carry was clear)
.18bc	b0 05		bcs $18c3			bcs 	_CVRExit
.18be	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.18c1	95 58		sta $58,x			sta 	esInt1,x
.18c3					_CVRExit:
.18c3	8a		txa				txa 						; return X position.
.18c4	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0be6					compressMode:
>0be6							.fill 	1
.18c5					LoadVRAMFile:
.18c5					_LVRLoop:
.18c5	20 15 19	jsr $1915			jsr 	LVFGet 						; get the next (never access direct)
.18c8	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.18ca	f0 3a		beq $1906			beq 	_LVRExit
.18cc	b0 39		bcs $1907			bcs 	_LVRLoad 					; load data in ?
.18ce	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.18d0	90 09		bcc $18db			bcc 	_LVRSetAddress
.18d2	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.18d4	90 29		bcc $18ff			bcc 	_LVRSetCompress
.18d6	a2 01		ldx #$01			ldx 	#ErrorID_missing
.18d8	20 e0 14	jsr $14e0		jsr	errorHandler
.18db					_LVRSetAddress:
.18db	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.18dd	20 15 19	jsr $1915			jsr 	LVFGet
.18e0	85 2c		sta $2c				sta 	temp1
.18e2	a9 00		lda #$00			lda 	#0
.18e4	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.18e6	66 2c		ror $2c				ror 	temp1
.18e8	6a		ror a				ror		a
.18e9	46 2d		lsr $2d				lsr 	temp1+1
.18eb	66 2c		ror $2c				ror 	temp1
.18ed	6a		ror a				ror		a
.18ee	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.18f1	a5 2c		lda $2c				lda 	temp1
.18f3	8d 21 9f	sta $9f21			sta 	$9F21
.18f6	a5 2d		lda $2d				lda 	temp1+1
.18f8	09 10		ora #$10			ora 	#$10
.18fa	8d 22 9f	sta $9f22			sta 	$9F22
.18fd	d0 c6		bne $18c5			bne 	_LVRLoop
.18ff					_LVRSetCompress:
.18ff	29 07		and #$07			and 	#7
.1901	8d e6 0b	sta $0be6			sta 	compressMode
.1904	10 bf		bpl $18c5			bpl 	_LVRLoop
.1906					_LVRExit:
.1906	60		rts				rts
.1907					_LVRLoad:
.1907	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1909	aa		tax				tax
.190a					_LVRLCopy:
.190a	20 15 19	jsr $1915			jsr 	LVFGet 						; write to data.
.190d	8d 23 9f	sta $9f23			sta 	$9F23
.1910	ca		dex				dex
.1911	d0 f7		bne $190a			bne 	_LVRLCopy
.1913	f0 b0		beq $18c5			beq 	_LVRLoop
.1915	84 32		sty $32		LVFGet:	sty 	tempShort
.1917	a0 00		ldy #$00			ldy 	#0
.1919	b1 2a		lda ($2a),y			lda 	(temp0),y
.191b	a4 32		ldy $32				ldy	 	tempShort
.191d	e6 2a		inc $2a				inc 	temp0
.191f	d0 02		bne $1923			bne 	_LVFGExit
.1921	e6 2b		inc $2b				inc 	temp0+1
.1923					_LVFGExit:
.1923	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1924					section_end_extension:
.1924					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1924					floatingpointHandler:
.1924	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1926	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: basic.asm

.1929					section_end_floatingpoint:
.1929					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1929					ColdStartEntry:
.1929	a2 ff		ldx #$ff			ldx 	#$FF
.192b	9a		txs				txs
.192c	a2 02		ldx #$02		ldx	#2
.192e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1931	a0 ff		ldy #$ff			ldy 	#255
.1933					_CSBanner:
.1933	c8		iny				iny
.1934	b9 5a 19	lda $195a,y			lda 	Intro,y
.1937	f0 14		beq $194d			beq 	_CSStart
.1939	c9 08		cmp #$08			cmp 	#8
.193b	90 08		bcc $1945			bcc 	_CSInk
.193d	a2 16		ldx #$16		ldx	#22
.193f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1942	4c 33 19	jmp $1933			jmp 	_CSBanner
.1945					_CSInk:
.1945	a2 08		ldx #$08		ldx	#8
.1947	20 bf 14	jsr $14bf		jsr	deviceHandler
.194a	4c 33 19	jmp $1933			jmp 	_CSBanner
.194d					_CSStart:
.194d	a2 10		ldx #$10		ldx	#16
.194f	20 8f 31	jsr $318f		jsr	mainHandler
.1952	a2 02		ldx #$02		ldx	#2
.1954	20 8f 31	jsr $318f		jsr	mainHandler
.1957	4c 6c 1a	jmp $1a6c			jmp 	WarmStartEntry
>195a	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1962	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1972	20 2a 2a 2a 0d 0d
>1978	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1980	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1990	32 30 32 31 0d 0d
>1996	02 42 61 73 69 63 20				.text 	2,"Basic "
>199d	30 2e 31 37					.text "0.17"
>19a1	20 28						.text 	" ("
>19a3	31 38 2d 4d 61 72 2d 32				.text "18-Mar-2021"
>19ab	30 32 31
>19ae	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.19b2					DeleteLine:
.19b2	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.19b5	85 2a		sta $2a				sta 	temp0
.19b7	ad c9 0a	lda $0ac9			lda 	basePage+1
.19ba	85 2b		sta $2b				sta 	temp0+1
.19bc	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.19be	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.19c0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.19c2	d0 07		bne $19cb			bne 	_DLNext
.19c4	c8		iny				iny
.19c5	a5 58		lda $58				lda 	esInt1
.19c7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.19c9	f0 06		beq $19d1			beq 	_DLFound
.19cb	20 ef 19	jsr $19ef	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.19ce	d0 ec		bne $19bc			bne 	_DLLoop
.19d0	60		rts				rts
.19d1					_DLFound:
.19d1	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.19d3	b1 2a		lda ($2a),y			lda 	(temp0),y
.19d5	a8		tay				tay 								; so we copy from (temp0),y
.19d6	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.19d8					_DLCopyDown:
.19d8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.19da	81 2a		sta ($2a,x)			sta 	(temp0,x)
.19dc	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.19de	d0 02		bne $19e2			bne 	_DLNoCarry
.19e0	e6 2b		inc $2b				inc 	temp0+1
.19e2					_DLNoCarry:
.19e2	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.19e4	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.19e6	d0 f0		bne $19d8			bne 	_DLCopyDown
.19e8	a5 2b		lda $2b				lda 	temp0+1
.19ea	c5 36		cmp $36				cmp 	lowMemory+1
.19ec	d0 ea		bne $19d8			bne 	_DLCopyDown
.19ee	60		rts				rts
.19ef					IAdvanceTemp0:
.19ef	84 32		sty $32				sty 	tempShort
.19f1	18		clc				clc
.19f2	a0 00		ldy #$00			ldy 	#0 							; get offset
.19f4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.19f6	65 2a		adc $2a				adc 	temp0
.19f8	85 2a		sta $2a				sta 	temp0
.19fa	90 02		bcc $19fe			bcc 	_IATNoCarry
.19fc	e6 2b		inc $2b				inc 	temp0+1
.19fe					_IATNoCarry:
.19fe	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a00	a4 32		ldy $32				ldy 	tempShort
.1a02	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1a04	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1a05					InsertLine:
.1a05	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1a08	85 2a		sta $2a				sta 	temp0
.1a0a	ad c9 0a	lda $0ac9			lda 	basePage+1
.1a0d	85 2b		sta $2b				sta 	temp0+1
.1a0f					_ILLoop:
.1a0f	a0 01		ldy #$01			ldy 	#1
.1a11	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a13	c5 50		cmp $50				cmp 	esInt0
.1a15	c8		iny				iny
.1a16	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a18	e5 58		sbc $58				sbc 	esInt1
.1a1a	b0 05		bcs $1a21			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1a1c	20 ef 19	jsr $19ef			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1a1f	d0 ee		bne $1a0f			bne 	_ILLoop
.1a21					_ILFound:
.1a21	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1a23	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1a25	a5 36		lda $36				lda 	lowMemory+1
.1a27	85 2d		sta $2d				sta 	temp1+1
.1a29	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1a2c	18		clc				clc 								; add 3 for the line number and offset.
.1a2d	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1a2f	a8		tay				tay
.1a30	a2 00		ldx #$00			ldx 	#0
.1a32	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1a34	91 2c		sta ($2c),y			sta 	(temp1),y
.1a36	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1a38	c5 2a		cmp $2a				cmp 	temp0
.1a3a	d0 06		bne $1a42			bne 	_ILMNext
.1a3c	a5 2d		lda $2d				lda 	temp1+1
.1a3e	c5 2b		cmp $2b				cmp 	temp0+1
.1a40	f0 0b		beq $1a4d			beq 	_ILMCopy
.1a42					_ILMNext:
.1a42	a5 2c		lda $2c				lda 	temp1
.1a44	d0 02		bne $1a48			bne 	_ILNoBorrow
.1a46	c6 2d		dec $2d				dec 	temp1+1
.1a48					_ILNoBorrow:
.1a48	c6 2c		dec $2c				dec 	temp1
.1a4a	4c 32 1a	jmp $1a32			jmp 	_ILMove 					; and go round again
.1a4d					_ILMCopy:
.1a4d	98		tya				tya 								; Y is the offset of the new line.
.1a4e	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1a50	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1a52	a5 50		lda $50				lda 	esInt0
.1a54	91 2a		sta ($2a),y			sta 	(temp0),y
.1a56	c8		iny				iny
.1a57	a5 58		lda $58				lda 	esInt1
.1a59	91 2a		sta ($2a),y			sta 	(temp0),y
.1a5b	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1a5d					_ILMCopy2:
.1a5d	b1 28		lda ($28),y			lda 	(codePtr),y
.1a5f	c8		iny				iny
.1a60	c8		iny				iny
.1a61	c8		iny				iny
.1a62	91 2a		sta ($2a),y			sta 	(temp0),y
.1a64	88		dey				dey
.1a65	88		dey				dey
.1a66	cc 24 0d	cpy $0d24			cpy 	tokenBufferIndex
.1a69	d0 f2		bne $1a5d			bne 	_ILMCopy2
.1a6b	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1a6c					WarmStartEntry:
.1a6c	a2 ff		ldx #$ff			ldx 	#$FF
.1a6e	9a		txs				txs
.1a6f	a9 02		lda #$02			lda 	#2							; green text.
.1a71	a2 08		ldx #$08		ldx	#8
.1a73	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a76	a2 0c		ldx #$0c		ldx	#12
.1a78	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a7b	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1a7d	85 28		sta $28				sta 	codePtr
.1a7f	a5 2b		lda $2b				lda 	temp0+1
.1a81	85 29		sta $29				sta 	codePtr+1
.1a83	a2 04		ldx #$04		ldx	#4
.1a85	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a88	a2 06		ldx #$06		ldx	#6
.1a8a	20 43 3c	jsr $3c43		jsr	tokeniserHandler
.1a8d	c9 00		cmp #$00			cmp 	#0
.1a8f	f0 25		beq $1ab6			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1a91	a9 21		lda #$21			lda 	#(tokenHeader) & $FF
.1a93	85 28		sta $28				sta 	codePtr
.1a95	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1a97	85 29		sta $29				sta 	1+(codePtr)
.1a99	ad 24 0c	lda $0c24			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1a9c	c9 80		cmp #$80			cmp 	#$80
.1a9e	f0 cc		beq $1a6c			beq 	WarmStartEntry
.1aa0	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1aa2	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1aa4	f0 15		beq $1abb			beq 	HasLineNumber
.1aa6	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1aa8	8d 21 0c	sta $0c21			sta 	tokenHeader 				; fake program line.
.1aab	8d 22 0c	sta $0c22			sta 	tokenHeader+1
.1aae	8d 23 0c	sta $0c23			sta 	tokenHeader+2
.1ab1	a2 12		ldx #$12		ldx	#18
.1ab3	20 8f 31	jsr $318f		jsr	mainHandler
.1ab6					WSEError:
.1ab6	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1ab8	20 e0 14	jsr $14e0		jsr	errorHandler
.1abb					HasLineNumber:
.1abb	a0 03		ldy #$03			ldy 	#3 							; get line number
.1abd	a9 00		lda #$00			lda 	#0
.1abf	a2 06		ldx #$06		ldx	#6
.1ac1	20 8f 31	jsr $318f		jsr	mainHandler
.1ac4	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1ac6	05 68		ora $68				ora 	esInt3
.1ac8	d0 ec		bne $1ab6			bne 	WSEError
.1aca	98		tya				tya 								; make codePtr point to code after the line number.
.1acb	18		clc				clc 								; by skipping over the tokenised number.
.1acc	65 28		adc $28				adc 	codePtr
.1ace	85 28		sta $28				sta 	codePtr
.1ad0	90 02		bcc $1ad4			bcc		_HLNNoCarry
.1ad2	e6 29		inc $29				inc 	codePtr+1
.1ad4					_HLNNoCarry:
.1ad4	98		tya				tya 								; subtract that offset from the code buffer index
.1ad5	38		sec				sec
.1ad6	49 ff		eor #$ff			eor 	#$FF
.1ad8	6d 24 0d	adc $0d24			adc 	tokenBufferIndex
.1adb	18		clc				clc 								; add space allowing for header & $80 trailer
.1adc	69 04		adc #$04			adc 	#4
.1ade	8d 24 0d	sta $0d24			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1ae1	20 b2 19	jsr $19b2			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1ae4					_HLNNoDelete:
.1ae4	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1ae7	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1ae9	f0 0c		beq $1af7			beq 	_HLMEditDone
.1aeb	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1aed	18		clc				clc 								; workspace (1k)
.1aee	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1af0	c5 34		cmp $34				cmp 	highMemory+1
.1af2	b0 0b		bcs $1aff			bcs 	_HLMMemory 					; nope, won't allowit.
.1af4	20 05 1a	jsr $1a05			jsr 	InsertLine 					; insert the line in
.1af7					_HLMEditDone:
.1af7	a2 02		ldx #$02		ldx	#2
.1af9	20 8f 31	jsr $318f		jsr	mainHandler
.1afc	4c 6c 1a	jmp $1a6c			jmp 	WarmStartEntry
.1aff					_HLMMemory:
.1aff	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1b01	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1b04					interactionHandler:
.1b04	7c 07 1b	jmp ($1b07,x)			jmp 	(interactionVectors,x)
.1b07					interactionVectors:
>1b07	29 19					.word ColdStartEntry       ; index 0
>1b09	6c 1a					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1b0b					section_end_interaction:
.1b0b					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0be7					dataPtr:
>0be7							.fill 	2
.0be9					dataIndex:
>0be9							.fill 	1
.1b0b					CommandRead:
.1b0b	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1b0d	20 42 2a	jsr $2a42			jsr 	EvaluateReference
.1b10	20 51 1b	jsr $1b51			jsr 	SwapDPCP 					; use the data pointer.
.1b13	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1b15	c8		iny				iny
.1b16	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1b18	f0 07		beq $1b21			beq 	_CRInData
.1b1a	88		dey				dey
.1b1b	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1b1d	aa		tax				tax
.1b1e	20 52 22	jsr $2252			jsr 	ScanForward
.1b21					_CRInData:
.1b21	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1b23	20 f0 29	jsr $29f0			jsr 	Evaluate
.1b26	ca		dex				dex 								; and write the value.
.1b27	20 a5 1d	jsr $1da5			jsr 	WriteValue
.1b2a	20 51 1b	jsr $1b51			jsr 	SwapDPCP 					; get the code pointer back.
.1b2d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1b2f	c8		iny				iny
.1b30	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1b32	f0 d7		beq $1b0b			beq 	CommandRead
.1b34	88		dey				dey
.1b35	60		rts				rts
.1b36					CommandData:
.1b36	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1b38	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1b3a	20 52 22	jsr $2252			jsr 	ScanForward
.1b3d	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1b3e	60		rts				rts
.1b3f					CommandRestore:
.1b3f	ad c8 0a	lda $0ac8			lda 	basePage
.1b42	8d e7 0b	sta $0be7			sta 	dataPtr
.1b45	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b48	8d e8 0b	sta $0be8			sta 	dataPtr+1
.1b4b	a9 03		lda #$03			lda 	#3
.1b4d	8d e9 0b	sta $0be9			sta 	dataIndex
.1b50	60		rts				rts
.1b51					SwapDPCP:
.1b51	8a		txa				txa
.1b52	48		pha				pha
.1b53	98		tya				tya 								; swap Y, DataIndex
.1b54	ac e9 0b	ldy $0be9			ldy 	DataIndex
.1b57	8d e9 0b	sta $0be9			sta 	DataIndex
.1b5a	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1b5c	ae e7 0b	ldx $0be7			ldx 	dataptr
.1b5f	8d e7 0b	sta $0be7			sta 	dataPtr
.1b62	86 28		stx $28				stx 	codePtr
.1b64	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1b66	ae e8 0b	ldx $0be8			ldx 	dataptr+1
.1b69	8d e8 0b	sta $0be8			sta 	dataPtr+1
.1b6c	86 29		stx $29				stx 	codePtr+1
.1b6e	68		pla				pla
.1b6f	aa		tax				tax
.1b70	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1b71					CommandGOSUB:
.1b71	20 0d 2a	jsr $2a0d			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1b74	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1b76	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1b78	20 3c 31	jsr $313c			jsr 	RSClaim
.1b7b	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1b7d	20 68 31	jsr $3168			jsr 	RSSavePosition
.1b80	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1b82	f0 1b		beq $1b9f			beq 	GotoTOS 					; and do a GOTO there.
.1b84					CommandRETURN:
.1b84	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1b86	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1b88	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1b8a	f0 05		beq $1b91			beq 	_isok
.1b8c	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1b8e	20 e0 14	jsr $14e0		jsr	errorHandler
.1b91					_isok:
.1b91	a9 01		lda #$01			lda 	#1
.1b93	20 7b 31	jsr $317b			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1b96	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1b98	20 5e 31	jsr $315e			jsr 	RSFree
.1b9b	60		rts				rts
.1b9c					CommandGOTO:
.1b9c	20 0d 2a	jsr $2a0d			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1b9f					GotoTOS:
.1b9f	20 36 25	jsr $2536			jsr 	ResetCodeAddress 			; simple search.
.1ba2					_GotoSearch:
.1ba2	a0 00		ldy #$00			ldy 	#0 							; get offset
.1ba4	b1 28		lda ($28),y			lda 	(codePtr),y
.1ba6	f0 21		beq $1bc9			beq 	_GotoError 					; not found.
.1ba8	c8		iny				iny									; check LSB match
.1ba9	b1 28		lda ($28),y			lda 	(codePtr),y
.1bab	d5 50		cmp $50,x			cmp 	esInt0,x
.1bad	d0 07		bne $1bb6			bne 	_GotoNext
.1baf	c8		iny				iny
.1bb0	b1 28		lda ($28),y			lda 	(codePtr),y
.1bb2	d5 58		cmp $58,x			cmp 	esInt1,x
.1bb4	f0 10		beq $1bc6			beq 	_GotoFound
.1bb6					_GotoNext:
.1bb6	a0 00		ldy #$00			ldy 	#0 							; go next line
.1bb8	b1 28		lda ($28),y			lda 	(codePtr),y
.1bba	18		clc				clc
.1bbb	65 28		adc $28				adc 	codePtr
.1bbd	85 28		sta $28				sta 	codePtr
.1bbf	90 e1		bcc $1ba2			bcc 	_GotoSearch
.1bc1	e6 29		inc $29				inc 	codePtr+1
.1bc3	4c a2 1b	jmp $1ba2			jmp 	_GotoSearch
.1bc6					_GotoFound:
.1bc6	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1bc8	60		rts				rts
.1bc9					_GotoError:
.1bc9	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1bcb	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0bea					InputBuffer:
>0bea							.fill 	MaxInputSize+1
.1bce					Command_Input:
.1bce	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1bd0	c8		iny				iny
.1bd1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1bd3	f0 f9		beq $1bce			beq 	Command_Input
.1bd5	88		dey				dey 							; undo consume
.1bd6	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1bd8	f0 54		beq $1c2e			beq 	_CIExit 				; : or EOL, exit
.1bda	c9 80		cmp #$80			cmp 	#TOK_EOL
.1bdc	f0 50		beq $1c2e			beq 	_CIExit
.1bde	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1be0	90 12		bcc $1bf4			bcc 	_CIVariable
.1be2	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1be4	d0 43		bne $1c29			bne 	_CISyntax
.1be6	a2 00		ldx #$00			ldx 	#0
.1be8	20 04 2a	jsr $2a04			jsr 	EvaluateString 			; evaluate and print string
.1beb	20 07 1e	jsr $1e07			jsr 	TOSToTemp0
.1bee	20 fd 1c	jsr $1cfd			jsr 	PrintString
.1bf1	4c ce 1b	jmp $1bce			jmp 	Command_Input
.1bf4					_CIVariable:
.1bf4	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1bf6	20 42 2a	jsr $2a42			jsr 	EvaluateReference  		; this is where its going
.1bf9					_CIRetry:
.1bf9	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1bfb	a2 14		ldx #$14		ldx	#20
.1bfd	20 bf 14	jsr $14bf		jsr	deviceHandler
.1c00	98		tya				tya
.1c01	48		pha				pha
.1c02	20 42 1c	jsr $1c42			jsr 	InputString 			; input a string (manually)
.1c05	a2 01		ldx #$01			ldx 	#1
.1c07	20 2f 1c	jsr $1c2f			jsr 	BufferToStackX 			; make stack,x ref input string.
.1c0a	a5 48		lda $48				lda 	esType 					; if target type numeric
.1c0c	29 40		and #$40			and 	#$40 					; then convert to number
.1c0e	d0 11		bne $1c21			bne 	_CIWrite
.1c10	a2 01		ldx #$01			ldx 	#1
.1c12	20 07 1e	jsr $1e07			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1c15	a9 0a		lda #$0a			lda 	#10
.1c17	20 0f 2f	jsr $2f0f			jsr 	MInt32FromString 		; convert it back from a string.
.1c1a	68		pla				pla
.1c1b	a8		tay				tay
.1c1c	b0 03		bcs $1c21			bcs 	_CIWrite 				; successfully converted.
.1c1e	18		clc				clc 							; default fail FP conversion
.1c1f	90 d8		bcc $1bf9			bcc		_CIRetry				; failed, try again.
.1c21					_CIWrite:
.1c21	a2 00		ldx #$00			ldx 	#0
.1c23	20 a5 1d	jsr $1da5			jsr 	WriteValue
.1c26	4c ce 1b	jmp $1bce			jmp 	Command_Input
.1c29					_CISyntax:
.1c29	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c2b	20 e0 14	jsr $14e0		jsr	errorHandler
.1c2e					_CIExit:
.1c2e	60		rts				rts
.1c2f					BufferToStackX:
.1c2f	a9 ea		lda #$ea			lda 	#InputBuffer & $FF
.1c31	95 50		sta $50,x			sta 	esInt0,x
.1c33	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1c35	95 58		sta $58,x			sta 	esInt1,x
.1c37	a9 00		lda #$00			lda 	#0
.1c39	95 60		sta $60,x			sta 	esInt2,x
.1c3b	95 68		sta $68,x			sta 	esInt3,x
.1c3d	a9 40		lda #$40			lda 	#$40
.1c3f	95 48		sta $48,x			sta 	esType,x
.1c41	60		rts				rts
.1c42					InputString:
.1c42	a9 00		lda #$00			lda 	#0
.1c44	8d ea 0b	sta $0bea			sta 	InputBuffer
.1c47					_InputLoop:
.1c47	a2 00		ldx #$00		ldx	#0
.1c49	20 bf 14	jsr $14bf		jsr	deviceHandler
.1c4c	a2 0a		ldx #$0a		ldx	#10
.1c4e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1c51	c9 00		cmp #$00			cmp 	#0
.1c53	f0 f2		beq $1c47			beq 	_InputLoop
.1c55	c9 08		cmp #$08			cmp 	#8
.1c57	f0 19		beq $1c72			beq 	_InputBackspace
.1c59	c9 0d		cmp #$0d			cmp 	#13
.1c5b	f0 21		beq $1c7e			beq 	_InputExit
.1c5d	ae ea 0b	ldx $0bea			ldx 	InputBuffer
.1c60	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1c62	f0 e3		beq $1c47			beq 	_InputLoop
.1c64	9d eb 0b	sta $0beb,x			sta 	InputBuffer+1,x 		; write char
.1c67	ee ea 0b	inc $0bea			inc 	InputBuffer 			; advance count.
.1c6a					_InputPrintLoop:
.1c6a	a2 14		ldx #$14		ldx	#20
.1c6c	20 bf 14	jsr $14bf		jsr	deviceHandler
.1c6f	4c 47 1c	jmp $1c47			jmp	 	_InputLoop
.1c72					_InputBackspace:
.1c72	ad ea 0b	lda $0bea			lda 	InputBuffer 			; at start
.1c75	f0 d0		beq $1c47			beq 	_InputLoop
.1c77	ce ea 0b	dec $0bea			dec 	InputBuffer
.1c7a	a9 08		lda #$08			lda 	#8
.1c7c	d0 ec		bne $1c6a			bne 	_InputPrintLoop
.1c7e					_InputExit:
.1c7e	a2 04		ldx #$04		ldx	#4
.1c80	20 bf 14	jsr $14bf		jsr	deviceHandler
.1c83	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0c0b					lastPrintToken:
>0c0b							.fill 	1
.1c84					Command_Print:
.1c84	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1c86	8d 0b 0c	sta $0c0b			sta 	lastPrintToken
.1c89	88		dey				dey
.1c8a					_PrintLoopSkip:
.1c8a	c8		iny				iny
.1c8b					_PrintLoop:
.1c8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1c8d	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1c8f	f0 5b		beq $1cec			beq 	_PrintExit
.1c91	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1c93	f0 57		beq $1cec			beq 	_PrintExit
.1c95	8d 0b 0c	sta $0c0b			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1c98	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1c9a	f0 ee		beq $1c8a			beq 	_PrintLoopSkip
.1c9c	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1c9e	f0 3c		beq $1cdc			beq	 	_PrintNewLine
.1ca0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1ca2	f0 40		beq $1ce4			beq 	_PrintTab
.1ca4	20 ee 29	jsr $29ee			jsr 	EvaluateRoot 				; evaluate something at the root
.1ca7	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1ca9	85 2a		sta $2a				sta 	temp0
.1cab	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1cad	85 2b		sta $2b				sta 	1+(temp0)
.1caf	a5 48		lda $48				lda 	esType 						; get type
.1cb1	f0 15		beq $1cc8			beq		_PrintInteger
.1cb3	4a		lsr a				lsr 	a 							; check for floating point
.1cb4	b0 08		bcs $1cbe			bcs 	_PrintFloat
.1cb6					_PrintString:
.1cb6	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1cb8	20 07 1e	jsr $1e07			jsr 	TOSToTemp0
.1cbb	4c d6 1c	jmp $1cd6			jmp 	_PrintTemp0 				; print no leading space.
.1cbe					_PrintFloat:
.1cbe	a9 00		lda #$00			lda 	#0 							; stack level.
.1cc0	a2 14		ldx #$14		ldx	#20
.1cc2	20 24 19	jsr $1924		jsr	floatingpointHandler
.1cc5	4c cf 1c	jmp $1ccf			jmp 	_PrintSpaceTemp0
.1cc8					_PrintInteger:
.1cc8	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1cca	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1ccc	20 f7 2f	jsr $2ff7			jsr 	MInt32ToString				; convert to text
.1ccf					_PrintSpaceTemp0:
.1ccf	a9 20		lda #$20			lda 	#32
.1cd1	a2 14		ldx #$14		ldx	#20
.1cd3	20 bf 14	jsr $14bf		jsr	deviceHandler
.1cd6					_PrintTemp0:
.1cd6	20 fd 1c	jsr $1cfd			jsr 	PrintString
.1cd9	4c 8b 1c	jmp $1c8b			jmp 	_PrintLoop
.1cdc					_PrintNewLine:
.1cdc	a2 04		ldx #$04		ldx	#4
.1cde	20 bf 14	jsr $14bf		jsr	deviceHandler
.1ce1	4c 8a 1c	jmp $1c8a			jmp 	_PrintLoopSkip
.1ce4					_PrintTab:
.1ce4	a2 1a		ldx #$1a		ldx	#26
.1ce6	20 bf 14	jsr $14bf		jsr	deviceHandler
.1ce9	4c 8a 1c	jmp $1c8a			jmp 	_PrintLoopSkip
.1cec					_PrintExit:
.1cec	ad 0b 0c	lda $0c0b			lda		lastPrintToken 				; check last token
.1cef	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1cf1	f0 09		beq $1cfc			beq 	_PrintExit2
.1cf3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1cf5	f0 05		beq $1cfc			beq 	_PrintExit2
.1cf7	a2 04		ldx #$04		ldx	#4
.1cf9	20 bf 14	jsr $14bf		jsr	deviceHandler
.1cfc					_PrintExit2:
.1cfc	60		rts				rts
.1cfd					PrintString:
.1cfd	8a		txa				txa
.1cfe	48		pha				pha
.1cff	98		tya				tya
.1d00	48		pha				pha
.1d01	a0 00		ldy #$00			ldy 	#0							; get length
.1d03	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d05	aa		tax				tax 								; into X
.1d06	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1d08	f0 10		beq $1d1a			beq 	_PSExit
.1d0a	ca		dex				dex
.1d0b	8a		txa				txa
.1d0c	48		pha				pha
.1d0d	c8		iny				iny
.1d0e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d10	a2 14		ldx #$14		ldx	#20
.1d12	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d15	68		pla				pla
.1d16	aa		tax				tax
.1d17	4c 06 1d	jmp $1d06			jmp 	_PSLoop
.1d1a					_PSExit:
.1d1a	68		pla				pla
.1d1b	a8		tay				tay
.1d1c	68		pla				pla
.1d1d	aa		tax				tax
.1d1e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.1d1f					Command_CLS:
.1d1f	a2 02		ldx #$02		ldx	#2
.1d21	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d24	60		rts				rts
.1d25					Command_Ink:
.1d25	a2 00		ldx #$00			ldx 	#0
.1d27	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger
.1d2a	a2 08		ldx #$08		ldx	#8
.1d2c	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d2f	60		rts				rts
.1d30					Command_Paper:
.1d30	a2 00		ldx #$00			ldx 	#0
.1d32	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger
.1d35	a2 12		ldx #$12		ldx	#18
.1d37	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d3a	60		rts				rts
.1d3b					Command_Locate:
.1d3b	a2 00		ldx #$00			ldx 	#0
.1d3d	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger
.1d40	20 21 31	jsr $3121			jsr 	CheckComma
.1d43	e8		inx				inx
.1d44	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger
.1d47	98		tya				tya
.1d48	48		pha				pha
.1d49	a4 51		ldy $51				ldy 	esInt0+1
.1d4b	a5 50		lda $50				lda 	esInt0
.1d4d	a2 10		ldx #$10		ldx	#16
.1d4f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d52	68		pla				pla
.1d53	a8		tay				tay
.1d54	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.1d55					Command_VDU:
.1d55	20 0d 2a	jsr $2a0d			jsr 	EvaluateRootInteger 			; get integer at root.
.1d58	a5 50		lda $50				lda 	esInt0
.1d5a	a2 14		ldx #$14		ldx	#20
.1d5c	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d5f					_CVNext:
.1d5f	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.1d61	c8		iny				iny
.1d62	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.1d64	f0 ef		beq $1d55			beq 	Command_VDU
.1d66	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1d68	d0 0a		bne $1d74			bne 	_CVExit
.1d6a	a5 58		lda $58				lda 	esInt1
.1d6c	a2 14		ldx #$14		ldx	#20
.1d6e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d71	4c 5f 1d	jmp $1d5f			jmp 	_CVNext
.1d74	88		dey		_CVExit:dey
.1d75	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.1d76					Command_Assert:
.1d76	20 0d 2a	jsr $2a0d			jsr 	EvaluateRootInteger 		; what is being asserted.
.1d79	20 c8 30	jsr $30c8			jsr 	MInt32Zero 					; is it true ?
.1d7c	f0 01		beq $1d7f			beq 	_CAError
.1d7e	60		rts				rts
.1d7f					_CAError:
.1d7f	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1d81	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.1d84					Command_Dim:
.1d84	a2 02		ldx #$02		ldx	#2
.1d86	20 11 40	jsr $4011		jsr	variableHandler
.1d89	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1d8b	c8		iny				iny
.1d8c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1d8e	f0 f4		beq $1d84			beq 	Command_Dim
.1d90	88		dey				dey 								; unpick get
.1d91	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.1d92					CommandLet:
.1d92	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1d94	20 42 2a	jsr $2a42			jsr 	EvaluateReference
.1d97	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1d99	20 09 31	jsr $3109			jsr 	CheckToken
.1d9c	e8		inx				inx 								; do RHS
.1d9d	20 f0 29	jsr $29f0			jsr 	Evaluate 					; evaluate and dereference
.1da0	ca		dex				dex
.1da1	20 a5 1d	jsr $1da5			jsr 	WriteValue 					; write it out
.1da4	60		rts				rts
.1da5					WriteValue:
.1da5	98		tya				tya
.1da6	48		pha				pha
.1da7	20 07 1e	jsr $1e07			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1daa	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.1dac	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.1dae	29 40		and #$40			and 	#$40
.1db0	d0 50		bne $1e02			bne		_WVType
.1db2	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1db4	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.1db6	29 40		and #$40			and 	#$40
.1db8	d0 1f		bne $1dd9			bne 	_WVCopyString
.1dba	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.1dbc	15 49		ora $49,x			ora 	esType+1,x
.1dbe	4a		lsr a				lsr 	a
.1dbf	90 22		bcc $1de3			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1dc1	b5 48		lda $48,x			lda 	esType,x
.1dc3	4a		lsr a				lsr 	a
.1dc4	90 3c		bcc $1e02			bcc 	_WVType
.1dc6	e8		inx				inx 								; force the value being written to be a float.
.1dc7	20 52 26	jsr $2652			jsr 	BPMakeFloat
.1dca	ca		dex				dex
.1dcb	20 07 1e	jsr $1e07			jsr 	TOSToTemp0 					; set Temp0 to write address
.1dce	e8		inx				inx
.1dcf	8a		txa				txa
.1dd0	a2 20		ldx #$20		ldx	#32
.1dd2	20 24 19	jsr $1924		jsr	floatingpointHandler
.1dd5	aa		tax				tax
.1dd6	4c ff 1d	jmp $1dff			jmp 	_WVCopyExit
.1dd9					_WVCopyString:
.1dd9	8a		txa				txa
.1dda	a2 0e		ldx #$0e		ldx	#14
.1ddc	20 45 34	jsr $3445		jsr	stringHandler
.1ddf	aa		tax				tax
.1de0	4c ff 1d	jmp $1dff			jmp 	_WVCopyExit
.1de3					_WVCopyData4:
.1de3	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.1de5	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1de7	d0 10		bne $1df9			bne 	_WVCopyData1
.1de9	a0 03		ldy #$03			ldy 	#3
.1deb	b5 69		lda $69,x			lda 	esInt3+1,x
.1ded	91 2a		sta ($2a),y			sta 	(temp0),y
.1def	88		dey				dey
.1df0	b5 61		lda $61,x			lda 	esInt2+1,x
.1df2	91 2a		sta ($2a),y			sta 	(temp0),y
.1df4	88		dey				dey
.1df5	b5 59		lda $59,x			lda 	esInt1+1,x
.1df7	91 2a		sta ($2a),y			sta 	(temp0),y
.1df9					_WVCopyData1:
.1df9	a0 00		ldy #$00			ldy 	#0
.1dfb	b5 51		lda $51,x			lda 	esInt0+1,x
.1dfd	91 2a		sta ($2a),y			sta 	(temp0),y
.1dff					_WVCopyExit:
.1dff	68		pla				pla
.1e00	a8		tay				tay
.1e01	60		rts				rts
.1e02					_WVType:
.1e02	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1e04	20 e0 14	jsr $14e0		jsr	errorHandler
.1e07					TOSToTemp0:
.1e07	b5 50		lda $50,x			lda 	esInt0,x
.1e09	85 2a		sta $2a				sta 	temp0
.1e0b	b5 58		lda $58,x			lda 	esInt1,x
.1e0d	85 2b		sta $2b				sta 	temp0+1
.1e0f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.1e10					Command_Poke:
.1e10	a9 01		lda #$01			lda 	#1
.1e12	d0 06		bne $1e1a			bne 	PokeGeneral
.1e14					Command_Doke:
.1e14	a9 02		lda #$02			lda 	#2
.1e16	d0 02		bne $1e1a			bne 	PokeGeneral
.1e18					Command_Loke:
.1e18	a9 03		lda #$03			lda 	#3
.1e1a					PokeGeneral:
.1e1a	48		pha				pha 								; save id (PDL = 123)
.1e1b	20 0d 2a	jsr $2a0d			jsr 	EvaluateRootInteger 		; target address
.1e1e	20 21 31	jsr $3121			jsr	 	CheckComma
.1e21	e8		inx				inx
.1e22	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger 			; what value to POKE ?
.1e25	ca		dex				dex
.1e26	20 07 1e	jsr $1e07			jsr 	TOSToTemp0 					; temp0 points to the target address
.1e29	84 32		sty $32				sty 	tempShort 					; save Y
.1e2b	68		pla				pla 								; get copy type (1-3) and dispatch
.1e2c	aa		tax				tax
.1e2d	ca		dex				dex
.1e2e	f0 14		beq $1e44			beq 	_Poke1
.1e30	ca		dex				dex
.1e31	f0 0b		beq $1e3e			beq 	_Poke2
.1e33	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1e35	a5 69		lda $69				lda 	esInt3+1
.1e37	91 2a		sta ($2a),y			sta 	(temp0),y
.1e39	88		dey				dey
.1e3a	a5 61		lda $61				lda 	esInt2+1
.1e3c	91 2a		sta ($2a),y			sta 	(temp0),y
.1e3e					_Poke2:
.1e3e	a0 01		ldy #$01			ldy 	#1
.1e40	a5 59		lda $59				lda 	esInt1+1
.1e42	91 2a		sta ($2a),y			sta 	(temp0),y
.1e44					_Poke1:
.1e44	a0 00		ldy #$00			ldy 	#0
.1e46	a5 51		lda $51				lda 	esInt0+1
.1e48	91 2a		sta ($2a),y			sta 	(temp0),y
.1e4a	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1e4c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.1e4d					Command_Rem:
.1e4d					Command_Rem2:
.1e4d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1e4f	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1e51	d0 06		bne $1e59			bne 	_CRNotString
.1e53	c8		iny				iny
.1e54	98		tya				tya
.1e55	38		sec				sec
.1e56	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1e58	a8		tay				tay
.1e59					_CRNotString:
.1e59	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.1e5a					CommandStop:
.1e5a	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1e5c	20 e0 14	jsr $14e0		jsr	errorHandler
.1e5f					CommandEnd:
.1e5f	4c 8a 31	jmp $318a			jmp 	WarmStart
.1e62					CommandXemu:
.1e62	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1e65					AdvanceNextLine:
.1e65	a0 00		ldy #$00			ldy 	#0 							; get offset
.1e67	b1 28		lda ($28),y			lda 	(codePtr),y
.1e69	18		clc				clc 								; add to codePtr
.1e6a	65 28		adc $28				adc 	codePtr
.1e6c	85 28		sta $28				sta 	codePtr
.1e6e	90 02		bcc $1e72			bcc 	_ANLNoCarry
.1e70	e6 29		inc $29				inc 	codePtr+1
.1e72					_ANLNoCarry:
.1e72	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1e74	f0 e9		beq $1e5f			beq 	CommandEnd 					; execute END
.1e76	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1e78	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.1e79					Command_FOR:
.1e79	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1e7b	a2 0b		ldx #$0b			ldx 	#11
.1e7d	20 3c 31	jsr $313c			jsr 	RSClaim
.1e80	20 92 1d	jsr $1d92			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1e83	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.1e85	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1e87	d0 4c		bne $1ed5			bne 	_CFType
.1e89	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1e8b	20 09 31	jsr $3109			jsr 	CheckToken
.1e8e	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1e90	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger				; get terminal value in stack 1
.1e93	98		tya				tya
.1e94	48		pha				pha
.1e95	a0 04		ldy #$04			ldy 	#4
.1e97	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1e99	91 37		sta ($37),y			sta 	(rsPointer),y
.1e9b	c8		iny				iny
.1e9c	a5 58		lda $58				lda		esInt1
.1e9e	91 37		sta ($37),y			sta 	(rsPointer),y
.1ea0	c8		iny				iny
.1ea1	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1ea3	91 37		sta ($37),y			sta 	(rsPointer),y
.1ea5	c8		iny				iny
.1ea6	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.1ea8	91 37		sta ($37),y			sta 	(rsPointer),y
.1eaa	c8		iny				iny
.1eab	a5 59		lda $59				lda		esInt1+1
.1ead	91 37		sta ($37),y			sta 	(rsPointer),y
.1eaf	c8		iny				iny
.1eb0	a5 61		lda $61				lda		esInt2+1
.1eb2	91 37		sta ($37),y			sta 	(rsPointer),y
.1eb4	c8		iny				iny
.1eb5	a5 69		lda $69				lda		esInt3+1
.1eb7	91 37		sta ($37),y			sta 	(rsPointer),y
.1eb9	68		pla				pla
.1eba	a8		tay				tay
.1ebb	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1ebd	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1ebf	d0 0e		bne $1ecf			bne 	_CFDone
.1ec1	c8		iny				iny									; skip over step.
.1ec2	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger 			; get step
.1ec5	98		tya				tya
.1ec6	48		pha				pha
.1ec7	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1ec9	a0 06		ldy #$06			ldy 	#6
.1ecb	91 37		sta ($37),y			sta 	(rsPointer),y
.1ecd	68		pla				pla
.1ece	a8		tay				tay
.1ecf					_CFDone:
.1ecf	a9 01		lda #$01			lda 	#1
.1ed1	20 68 31	jsr $3168			jsr 	RSSavePosition 				; save position.
.1ed4	60		rts				rts
.1ed5					_CFType:
.1ed5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1ed7	20 e0 14	jsr $14e0		jsr	errorHandler
.1eda					Command_NEXT:
.1eda	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1edc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1ede	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1ee0	f0 05		beq $1ee7			beq 	_isok
.1ee2	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1ee4	20 e0 14	jsr $14e0		jsr	errorHandler
.1ee7					_isok:
.1ee7	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1ee9	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1eeb	b0 18		bcs $1f05			bcs 	_CNNoIndex
.1eed	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1eef	20 42 2a	jsr $2a42			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1ef2	98		tya				tya
.1ef3	48		pha				pha
.1ef4	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1ef6	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ef8	d5 50		cmp $50,x			cmp 	esInt0,x
.1efa	d0 76		bne $1f72			bne 	_CNBadIndex
.1efc	c8		iny				iny
.1efd	b1 37		lda ($37),y			lda 	(rsPointer),y
.1eff	d5 58		cmp $58,x			cmp 	esInt1,x
.1f01	d0 6f		bne $1f72			bne 	_CNBadIndex
.1f03	68		pla				pla
.1f04	a8		tay				tay
.1f05					_CNNoIndex:
.1f05	98		tya				tya
.1f06	48		pha				pha
.1f07	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1f09	b1 37		lda ($37),y			lda 	(rsPointer),y
.1f0b	85 2a		sta $2a				sta 	temp0
.1f0d	c8		iny				iny
.1f0e	b1 37		lda ($37),y			lda 	(rsPointer),y
.1f10	85 2b		sta $2b				sta 	temp0+1
.1f12	c8		iny				iny
.1f13	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1f15	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.1f17	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1f19	10 01		bpl $1f1c			bpl 	_CNSignX
.1f1b	ca		dex				dex  								; X = $FF
.1f1c					_CNSignX:
.1f1c	18		clc				clc 								; add to the LSB
.1f1d	a0 00		ldy #$00			ldy 	#0
.1f1f	71 2a		adc ($2a),y			adc 	(temp0),y
.1f21	91 2a		sta ($2a),y			sta 	(temp0),y
.1f23					_CNPropogate:
.1f23	c8		iny				iny  								; add the sign extended in X to the rest.
.1f24	8a		txa				txa
.1f25	71 2a		adc ($2a),y			adc 	(temp0),y
.1f27	91 2a		sta ($2a),y			sta 	(temp0),y
.1f29	c8		iny				iny
.1f2a	8a		txa				txa
.1f2b	71 2a		adc ($2a),y			adc 	(temp0),y
.1f2d	91 2a		sta ($2a),y			sta 	(temp0),y
.1f2f	c8		iny				iny
.1f30	8a		txa				txa
.1f31	71 2a		adc ($2a),y			adc 	(temp0),y
.1f33	91 2a		sta ($2a),y			sta 	(temp0),y
.1f35	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1f36	a5 37		lda $37				lda 	rsPointer
.1f38	69 07		adc #$07			adc 	#7
.1f3a	85 2c		sta $2c				sta 	temp1
.1f3c	a9 00		lda #$00			lda 	#0
.1f3e	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1f40	a8		tay				tay 								; and clear the Y register again.
.1f41	65 38		adc $38				adc 	rsPointer+1
.1f43	85 2d		sta $2d				sta 	temp1+1
.1f45	38		sec				sec 								; calculate current - limit oring interim values.
.1f46	20 7e 1f	jsr $1f7e			jsr 	_CNCompare 					; each of these does a byte.
.1f49	20 7e 1f	jsr $1f7e			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.1f4c	20 7e 1f	jsr $1f7e			jsr 	_CNCompare 					; and the carry of the subtraction.
.1f4f	20 7e 1f	jsr $1f7e			jsr 	_CNCompare
.1f52	50 02		bvc $1f56			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1f54	49 80		eor #$80			eor 	#$80
.1f56					_CNNoOverflow:
.1f56	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.1f58	30 1d		bmi $1f77			bmi 	_CNCheckDownto
.1f5a	c9 00		cmp #$00			cmp 	#0
.1f5c	30 0c		bmi $1f6a			bmi 	_CNLoopRound 				; loop round if < =
.1f5e	a5 2e		lda $2e				lda 	temp2
.1f60	f0 08		beq $1f6a			beq 	_CNLoopRound
.1f62					_CNLoopExit:
.1f62	68		pla				pla
.1f63	a8		tay				tay
.1f64	a9 0b		lda #$0b			lda 	#11
.1f66	20 5e 31	jsr $315e			jsr 	RSFree
.1f69	60		rts				rts
.1f6a					_CNLoopRound:
.1f6a	68		pla				pla
.1f6b	a8		tay				tay
.1f6c	a9 01		lda #$01			lda 	#1
.1f6e	20 7b 31	jsr $317b			jsr 	RSLoadPosition				; go back to the loop top
.1f71	60		rts				rts
.1f72					_CNBadIndex:
.1f72	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.1f74	20 e0 14	jsr $14e0		jsr	errorHandler
.1f77					_CNCheckDownto:
.1f77	c9 00		cmp #$00			cmp 	#0
.1f79	10 ef		bpl $1f6a			bpl 	_CNLoopRound
.1f7b	4c 62 1f	jmp $1f62			jmp 	_CNLoopExit
.1f7e					_CNCompare:
.1f7e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1f80	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1f82	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1f84	85 2e		sta $2e				sta 	temp2
.1f86	c8		iny				iny
.1f87	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.1f88					CommandIf:
.1f88	20 0d 2a	jsr $2a0d			jsr 	EvaluateRootInteger 		; get what's being tested.
.1f8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1f8d	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.1f8f	f0 04		beq $1f95			beq 	_IfSimple
.1f91	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1f93	d0 1b		bne $1fb0			bne 	_IfComplex
.1f95					_IfSimple:
.1f95	20 c8 30	jsr $30c8			jsr 	MInt32Zero					; check if TOS zero
.1f98	f0 10		beq $1faa			beq 	_IfEOL 						; go to next line.
.1f9a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1f9c	c8		iny				iny
.1f9d	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1f9f	f0 0c		beq $1fad			beq 	_IfGoto 					; do the Goto code
.1fa1	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1fa3	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1fa5	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1fa7	f0 04		beq $1fad			beq 	_IfGoto
.1fa9	60		rts				rts 								; else continue on this line.
.1faa					_IfEOL:
.1faa	4c 65 1e	jmp $1e65			jmp 	AdvanceNextLine 			; go to next line
.1fad					_IfGoto:
.1fad	4c 9c 1b	jmp $1b9c			jmp 	CommandGoto
.1fb0					_IfComplex:
.1fb0	20 c8 30	jsr $30c8			jsr 	MInt32Zero 					; is it true ?
.1fb3	f0 01		beq $1fb6			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1fb5	60		rts				rts 								; else continue.
.1fb6					_IFSkip:
.1fb6	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1fb8	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1fba	4c 52 22	jmp $2252			jmp		ScanForward
.1fbd					Command_ELSE:
.1fbd	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1fbf	8a		txa				txa
.1fc0	4c 52 22	jmp $2252			jmp		ScanForward
.1fc3					Command_ENDIF:
.1fc3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0c0c					storeSize:
>0c0c							.fill 	1
.1fc4					CommandLocal:
.1fc4	a2 00		ldx #$00			ldx 	#0
.1fc6	20 e2 1f	jsr $1fe2			jsr 	LocaliseVariable 			; localise one.
.1fc9					_CLCheckNext:
.1fc9	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1fcb	c8		iny				iny
.1fcc	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1fce	f0 06		beq $1fd6			beq 	_CLAssignment
.1fd0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1fd2	f0 f0		beq $1fc4			beq 	CommandLocal
.1fd4	88		dey				dey
.1fd5	60		rts				rts
.1fd6					_CLAssignment:
.1fd6	a2 01		ldx #$01			ldx 	#1
.1fd8	20 f0 29	jsr $29f0			jsr 	Evaluate 					; evaluate RHS
.1fdb	ca		dex				dex
.1fdc	20 a5 1d	jsr $1da5			jsr 	WriteValue
.1fdf	4c c9 1f	jmp $1fc9			jmp 	_CLCheckNext
.1fe2					LocaliseVariable:
.1fe2	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1fe4	c9 40		cmp #$40			cmp 	#$40
.1fe6	b0 67		bcs $204f			bcs 	_LVSyntax
.1fe8	8a		txa				txa 								; get the address of that variable.
.1fe9	a2 00		ldx #$00		ldx	#0
.1feb	20 11 40	jsr $4011		jsr	variableHandler
.1fee	aa		tax				tax
.1fef	8a		txa				txa
.1ff0	48		pha				pha
.1ff1	98		tya				tya
.1ff2	48		pha				pha
.1ff3	20 07 1e	jsr $1e07			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1ff6	b5 48		lda $48,x			lda 	esType,x 					; get the type
.1ff8	0a		asl a				asl 	a
.1ff9	10 16		bpl $2011			bpl 	_LVPushNumber
.1ffb	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1ffd	b1 2a		lda ($2a),y			lda 	(temp0),y
.1fff	c8		iny				iny
.2000	85 2c		sta $2c				sta 	temp1
.2002	b1 2a		lda ($2a),y			lda 	(temp0),y
.2004	85 2d		sta $2d				sta 	temp1+1
.2006	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2008	b1 2c		lda ($2c),y			lda 	(temp1),y
.200a	aa		tax				tax 								; into X
.200b	e8		inx				inx 								; +1 for length.
.200c	a9 24		lda #$24			lda 	#markerString
.200e	4c 26 20	jmp $2026			jmp 	_LVWriteFrame
.2011					_LVPushNumber:
.2011	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2013	85 2c		sta $2c				sta 	temp1
.2015	a5 2b		lda $2b				lda 	temp0+1
.2017	85 2d		sta $2d				sta 	temp1+1
.2019	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.201b	4a		lsr a				lsr 	a
.201c	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.201e	a2 04		ldx #$04			ldx 	#VarISize
.2020	90 04		bcc $2026			bcc 	_LVIsInteger
.2022	a9 23		lda #$23			lda 	#markerFloat
.2024	a2 06		ldx #$06			ldx 	#VarFSize
.2026					_LVIsInteger:
.2026					_LVWriteFrame:
.2026	8e 0c 0c	stx $0c0c			stx 	storeSize 					; number of bytes to copy from (temp0)
.2029	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.202a	e8		inx				inx
.202b	e8		inx				inx
.202c	20 3c 31	jsr $313c			jsr 	RSClaim 					; create the stack frame.
.202f	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2031	a0 01		ldy #$01			ldy 	#1
.2033	91 37		sta ($37),y			sta 	(rsPointer),y
.2035	c8		iny				iny
.2036	a5 2b		lda $2b				lda 	temp0+1
.2038	91 37		sta ($37),y			sta 	(rsPointer),y
.203a	a0 00		ldy #$00			ldy 	#0
.203c					_LVCopyData:
.203c	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.203e	c8		iny				iny 								; write allowing for the header bit.
.203f	c8		iny				iny
.2040	c8		iny				iny
.2041	91 37		sta ($37),y			sta 	(rsPointer),y
.2043	88		dey				dey
.2044	88		dey				dey
.2045	ce 0c 0c	dec $0c0c			dec 	storeSize 					; do it storesize times
.2048	d0 f2		bne $203c			bne 	_LVCopyData
.204a	68		pla				pla
.204b	a8		tay				tay
.204c	68		pla				pla
.204d	aa		tax				tax
.204e	60		rts				rts
.204f					_LVSyntax:
.204f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2051	20 e0 14	jsr $14e0		jsr	errorHandler
.2054					RestoreLocals:
.2054	a2 00		ldx #$00			ldx 	#0
.2056	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2058	c9 40		cmp #$40			cmp	 	#64
.205a	90 01		bcc $205d			bcc 	_RLocal
.205c	60		rts				rts
.205d					_RLocal:
.205d	8a		txa				txa
.205e	48		pha				pha
.205f	98		tya				tya
.2060	48		pha				pha
.2061	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2063	b1 37		lda ($37),y			lda 	(rsPointer),y
.2065	85 2a		sta $2a				sta 	temp0
.2067	c8		iny				iny
.2068	b1 37		lda ($37),y			lda 	(rsPointer),y
.206a	85 2b		sta $2b				sta 	temp0+1
.206c	a0 00		ldy #$00			ldy 	#0 							; get type back.
.206e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2070	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2072	f0 28		beq $209c			beq 	_RString
.2074	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2076	c9 25		cmp #$25			cmp 	#markerInt
.2078	f0 02		beq $207c			beq 	_RIsInteger
.207a	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.207c					_RIsInteger:
.207c	8a		txa				txa
.207d	48		pha				pha
.207e	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2080					_RCopyBack:
.2080	b1 37		lda ($37),y			lda 	(rsPointer),y
.2082	88		dey				dey
.2083	88		dey				dey
.2084	88		dey				dey
.2085	91 2a		sta ($2a),y			sta 	(temp0),y
.2087	c8		iny				iny
.2088	c8		iny				iny
.2089	c8		iny				iny
.208a	c8		iny				iny
.208b	ca		dex				dex
.208c	d0 f2		bne $2080			bne 	_RCopyBack
.208e	68		pla				pla 								; get size add 3
.208f	18		clc				clc
.2090	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2092					_RRestoreAAndLoop:
.2092	20 5e 31	jsr $315e			jsr 	RSFree
.2095	68		pla				pla
.2096	a8		tay				tay
.2097	68		pla				pla
.2098	aa		tax				tax
.2099	4c 54 20	jmp $2054			jmp 	RestoreLocals 				; go see if there are any more locals.
.209c					_RString:
.209c	a2 00		ldx #$00			ldx 	#0
.209e	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.20a0	b1 37		lda ($37),y			lda 	(rsPointer),y
.20a2	95 50		sta $50,x			sta 	esInt0,x
.20a4	c8		iny				iny
.20a5	b1 37		lda ($37),y			lda 	(rsPointer),y
.20a7	95 58		sta $58,x			sta 	esInt1,x
.20a9	18		clc				clc
.20aa	a5 37		lda $37				lda 	rsPointer
.20ac	69 03		adc #$03			adc 	#3
.20ae	95 51		sta $51,x			sta 	esInt0+1,x
.20b0	a5 38		lda $38				lda 	rsPointer+1
.20b2	69 00		adc #$00			adc 	#0
.20b4	95 59		sta $59,x			sta 	esInt1+1,x
.20b6	8a		txa				txa
.20b7	a2 0e		ldx #$0e		ldx	#14
.20b9	20 45 34	jsr $3445		jsr	stringHandler
.20bc	a0 03		ldy #$03			ldy 	#3 							; get string length
.20be	b1 37		lda ($37),y			lda 	(rsPointer),y
.20c0	18		clc				clc
.20c1	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.20c3	4c 92 20	jmp $2092			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0c0d					paramCount:
>0c0d							.fill 	1
.20c6					CallProc:
.20c6	20 4e 21	jsr $214e			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.20c9	48		pha				pha 								; save length on stack
.20ca	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.20cc	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.20ce	48		pha				pha
.20cf	a5 2a		lda $2a				lda 	temp0
.20d1	48		pha				pha
.20d2	98		tya				tya 								; calculate Y + length
.20d3	18		clc				clc
.20d4	65 32		adc $32				adc 	tempShort
.20d6	a8		tay				tay
.20d7	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.20d9					_CallProcEvalParams:
.20d9	e8		inx				inx
.20da	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.20dc	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.20de	f0 0b		beq $20eb			beq 	_CPDoneParams
.20e0	20 f0 29	jsr $29f0			jsr 	Evaluate 					; evaluate a parameter
.20e3	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.20e5	c8		iny				iny
.20e6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.20e8	f0 ef		beq $20d9			beq 	_CallProcEvalParams
.20ea	88		dey				dey 								; undo consumption.
.20eb					_CPDoneParams:
.20eb	20 14 31	jsr $3114			jsr 	CheckRightParen 			; check closing parenthesis.
.20ee	8e 0d 0c	stx $0c0d			stx 	paramCount 					; store parameter count+1
.20f1	a2 04		ldx #$04			ldx 	#4							; make space on stack
.20f3	a9 50		lda #$50			lda 	#markerPROC
.20f5	20 3c 31	jsr $313c			jsr 	RSClaim
.20f8	a9 01		lda #$01			lda 	#1 							; store return address.
.20fa	20 68 31	jsr $3168			jsr 	RSSavePosition
.20fd	68		pla				pla 								; get the new code Ptr
.20fe	85 28		sta $28				sta 	codePtr
.2100	68		pla				pla
.2101	85 29		sta $29				sta 	codePtr+1
.2103	68		pla				pla 								; length of name + 4 is the param start.
.2104	18		clc				clc
.2105	69 04		adc #$04			adc 	#4
.2107	a8		tay				tay
.2108	a2 ff		ldx #$ff			ldx 	#$FF
.210a					_CPLoadParameters:
.210a	e8		inx				inx 								; point to where the address should be loaded.
.210b	ec 0d 0c	cpx $0c0d			cpx 	paramCount 					; too many parameters in definition ?
.210e	f0 1e		beq $212e			beq 	_CPParamError
.2110	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2112	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2114	f0 0e		beq $2124			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2116	20 e2 1f	jsr $1fe2			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2119	20 a5 1d	jsr $1da5			jsr 	WriteValue 					; copy the evaluated parameter into there.
.211c	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.211e	c8		iny				iny
.211f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2121	f0 e7		beq $210a			beq 	_CPLoadParameters
.2123	88		dey				dey 								; no, unconsume and check for )
.2124					_CPParamComplete:
.2124	20 14 31	jsr $3114			jsr 	CheckRightParen 			; check )
.2127	e8		inx				inx 								; check right number of parameters have been consumed
.2128	ec 0d 0c	cpx $0c0d			cpx 	paramCount
.212b	d0 01		bne $212e			bne 	_CPParamError
.212d	60		rts				rts
.212e					_CPParamError:
.212e	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2130	20 e0 14	jsr $14e0		jsr	errorHandler
.2133					ReturnProc:
.2133	20 54 20	jsr $2054			jsr 	RestoreLocals 				; get the locals back.
.2136	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2138	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.213a	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.213c	f0 05		beq $2143			beq 	_isok
.213e	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2140	20 e0 14	jsr $14e0		jsr	errorHandler
.2143					_isok:
.2143	a9 01		lda #$01			lda 	#1
.2145	20 7b 31	jsr $317b			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2148	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.214a	20 5e 31	jsr $315e			jsr 	RSFree
.214d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0c0e					procList:
>0c0e							.fill 	2		 					; terminated by name high being zero.
.0c10					yInLine:
>0c10							.fill 	1
.214e					FindProcedure:
.214e	8c 10 0c	sty $0c10			sty 	yInLine 					; save current position.
.2151	20 0c 22	jsr $220c			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2154	85 2c		sta $2c				sta 	temp1
.2156	ad 0e 0c	lda $0c0e			lda		procList 					; put procList address in temp2
.2159	85 2e		sta $2e				sta 	temp2
.215b	ad 0f 0c	lda $0c0f			lda 	procList+1
.215e	85 2f		sta $2f				sta 	temp2+1
.2160	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2162					_FPLoop:
.2162	b1 2e		lda ($2e),y			lda 	(temp2),y
.2164	f0 4f		beq $21b5			beq 	_FPError 					; if so, we don't know this procedure.
.2166	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2168	c8		iny				iny
.2169	b1 2e		lda ($2e),y			lda 	(temp2),y
.216b	85 2a		sta $2a				sta 	temp0
.216d	c8		iny				iny
.216e	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2170	c5 2c		cmp $2c				cmp 	temp1
.2172	d0 2b		bne $219f			bne 	_FPNext 					; hash is different, go to next.
.2174	38		sec				sec
.2175	ad 10 0c	lda $0c10			lda 	yInLine 					; position in line must be at least 4
.2178	e9 04		sbc #$04			sbc 	#4
.217a	18		clc				clc
.217b	65 28		adc $28				adc 	codePtr
.217d	85 30		sta $30				sta 	temp3
.217f	a5 29		lda $29				lda 	codePtr+1
.2181	69 00		adc #$00			adc 	#0
.2183	85 31		sta $31				sta 	temp3+1
.2185	98		tya				tya
.2186	48		pha				pha
.2187	a0 04		ldy #$04			ldy 	#4
.2189					_FPCName:
.2189	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.218b	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.218d	d0 0e		bne $219d			bne 	_FPpulYNext 				; if different go to next one.
.218f	c8		iny				iny
.2190	c9 3a		cmp #$3a			cmp 	#$3A
.2192	90 f5		bcc $2189			bcc 	_FPCName 					; compare the whole lot....
.2194	68		pla				pla 								; throw away the saved Y
.2195	98		tya				tya 								; length of name is Y-4
.2196	38		sec				sec
.2197	e9 04		sbc #$04			sbc 	#4
.2199	ac 10 0c	ldy $0c10			ldy 	yInLine  					; get the original Y back
.219c	60		rts				rts
.219d					_FPpulYNext:
.219d	68		pla				pla
.219e	a8		tay				tay
.219f					_FPNext:
.219f	c8		iny				iny 								; next procedure record.
.21a0	10 c0		bpl $2162			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.21a2	98		tya				tya 								; subtract 128 from Y
.21a3	38		sec				sec
.21a4	e9 80		sbc #$80			sbc 	#128
.21a6	a8		tay				tay
.21a7	18		clc				clc 								; add 128 to temp2, so we can have more than
.21a8	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.21aa	69 80		adc #$80			adc 	#128
.21ac	85 2e		sta $2e				sta 	temp2
.21ae	90 b2		bcc $2162			bcc 	_FPLoop
.21b0	e6 2f		inc $2f				inc 	temp2+1
.21b2	4c 62 21	jmp $2162			jmp 	_FPLoop
.21b5					_FPError:
.21b5	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.21b7	20 e0 14	jsr $14e0		jsr	errorHandler
.21ba					ScanProc:
.21ba	98		tya				tya
.21bb	48		pha				pha
.21bc	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.21be	8d 0e 0c	sta $0c0e			sta 	procList
.21c1	a5 36		lda $36				lda 	lowMemory+1
.21c3	8d 0f 0c	sta $0c0f			sta 	procList+1
.21c6	20 36 25	jsr $2536			jsr 	ResetCodeAddress 			; back to the start.
.21c9					_ScanLoop:
.21c9	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.21cb	b1 28		lda ($28),y			lda 	(codePtr),y
.21cd	f0 2a		beq $21f9			beq 	_ScanExit
.21cf	a0 03		ldy #$03			ldy 	#3							; get first token
.21d1	b1 28		lda ($28),y			lda 	(codePtr),y
.21d3	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.21d5	d0 12		bne $21e9			bne 	_ScanNext
.21d7	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.21d9	20 01 22	jsr $2201			jsr 	_ScanWrite
.21dc	a5 28		lda $28				lda 	codePtr
.21de	20 01 22	jsr $2201			jsr 	_ScanWrite
.21e1	a0 04		ldy #$04			ldy 	#4 							; start of name part
.21e3	20 0c 22	jsr $220c			jsr 	CalculateProcedureHash 		; calculate procedure hash
.21e6	20 01 22	jsr $2201			jsr 	_ScanWrite					; and write that
.21e9					_ScanNext:
.21e9	18		clc				clc
.21ea	a0 00		ldy #$00			ldy 	#0
.21ec	b1 28		lda ($28),y			lda 	(codePtr),y
.21ee	65 28		adc $28				adc 	codePtr
.21f0	85 28		sta $28				sta 	codePtr
.21f2	90 d5		bcc $21c9			bcc 	_ScanLoop
.21f4	e6 29		inc $29				inc 	codePtr+1
.21f6	4c c9 21	jmp $21c9			jmp 	_ScanLoop
.21f9					_ScanExit:
.21f9	a9 00		lda #$00			lda 	#0 							; write ending zero.
.21fb	20 01 22	jsr $2201			jsr 	_ScanWrite
.21fe	68		pla				pla
.21ff	a8		tay				tay
.2200	60		rts				rts
.2201					_ScanWrite:
.2201	a0 00		ldy #$00			ldy 	#0
.2203	91 35		sta ($35),y			sta 	(lowMemory),y
.2205	e6 35		inc $35				inc 	lowMemory
.2207	d0 02		bne $220b			bne 	_SWNoCarry
.2209	e6 36		inc $36				inc 	lowMemory+1
.220b					_SWNoCarry:
.220b	60		rts				rts
.220c					CalculateProcedureHash:
.220c	a9 00		lda #$00			lda 	#0 							; clear hash.
.220e	85 2a		sta $2a				sta 	temp0
.2210					_CPHLoop:
.2210	18		clc				clc 								; add character and rotate and add carry back in
.2211	b1 28		lda ($28),y			lda 	(codePtr),y
.2213	65 2a		adc $2a				adc 	temp0
.2215	6a		ror a				ror 	a
.2216	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2218	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.221a	b1 28		lda ($28),y			lda 	(codePtr),y
.221c	c8		iny				iny 								; advance incase we go round again.
.221d	c9 3a		cmp #$3a			cmp 	#$3A
.221f	90 ef		bcc $2210			bcc 	_CPHLoop
.2221	a5 2a		lda $2a				lda 	temp0
.2223	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2224					Command_Repeat:
.2224	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2226	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2228	20 3c 31	jsr $313c			jsr 	RSClaim
.222b	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.222d	20 68 31	jsr $3168			jsr 	RSSavePosition
.2230	60		rts				rts
.2231					Command_Until:
.2231	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2233	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2235	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2237	f0 05		beq $223e			beq 	_isok
.2239	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.223b	20 e0 14	jsr $14e0		jsr	errorHandler
.223e					_isok:
.223e	20 0d 2a	jsr $2a0d			jsr 	EvaluateRootInteger 		; at the bottom.
.2241	20 c8 30	jsr $30c8			jsr 	MInt32Zero					; check if TOS zero
.2244	d0 06		bne $224c			bne 	_CUExit
.2246	a9 01		lda #$01			lda 	#1
.2248	20 7b 31	jsr $317b			jsr 	RSLoadPosition 				; reload the position from offset 1.
.224b	60		rts				rts
.224c					_CUExit:
.224c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.224e	20 5e 31	jsr $315e			jsr 	RSFree
.2251	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2252					ScanForward:
.2252	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2254	86 2d		stx $2d				stx 	temp1+1
.2256	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2258	85 2e		sta $2e				sta 	temp2
.225a	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.225c	c8		iny				iny
.225d	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.225f	d0 08		bne $2269			bne 	_SFNoCheck 					; if so, check token against entered values.
.2261	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2263	f0 24		beq $2289			beq 	_SFExit 					; at the same strcture depth.
.2265	c5 2d		cmp $2d				cmp 	temp1+1
.2267	f0 20		beq $2289			beq 	_SFExit
.2269					_SFNoCheck:
.2269	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.226b	90 ed		bcc $225a			bcc 	_SFLoop
.226d	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.226f	90 19		bcc $228a			bcc 	_SFSpecials
.2271	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2273	90 e5		bcc $225a			bcc 	_SFLoop
.2275	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2277	b0 e1		bcs $225a			bcs 	_SFLoop
.2279	aa		tax				tax  								; token in X, and look up the adjuster.
.227a	bd 2b 29	lda $292b,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.227d	38		sec				sec 								; convert to an offset ($FF,$01)
.227e	e9 81		sbc #$81			sbc 	#$81
.2280	18		clc				clc 								; add to depth
.2281	65 2e		adc $2e				adc 	temp2
.2283	85 2e		sta $2e				sta 	temp2
.2285	10 d3		bpl $225a			bpl 	_SFLoop 					; +ve okay to continue
.2287	30 07		bmi $2290			bmi 	SFError 					; if gone -ve then we have a nesting error
.2289	60		rts		_SFExit:rts
.228a					_SFSpecials:
.228a	20 95 22	jsr $2295			jsr 	ScannerSkipSpecial
.228d	4c 5a 22	jmp $225a			jmp 	_SFLoop
.2290					SFError:
.2290	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2292	20 e0 14	jsr $14e0		jsr	errorHandler
.2295					ScannerSkipSpecial:
.2295	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2297	f0 10		beq $22a9			beq 	_SFNextLine
.2299	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.229b	f0 2b		beq $22c8			beq 	_SFFloatSkip
.229d	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.229f	f0 02		beq $22a3			beq 	_SFSkipString
.22a1	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.22a2	60		rts				rts 								; token.
.22a3					_SFSkipString:
.22a3	98		tya				tya
.22a4	38		sec				sec
.22a5	71 28		adc ($28),y			adc 	(codePtr),y
.22a7	a8		tay				tay
.22a8	60		rts				rts
.22a9					_SFNextLine:
.22a9	a0 00		ldy #$00			ldy 	#0 							; get offset
.22ab	b1 28		lda ($28),y			lda 	(codePtr),y
.22ad	18		clc				clc 								; add to code pointer.
.22ae	65 28		adc $28				adc 	codePtr
.22b0	85 28		sta $28				sta 	codePtr
.22b2	90 02		bcc $22b6			bcc		_SFNLNoCarry
.22b4	e6 29		inc $29				inc 	codePtr+1
.22b6					_SFNLNoCarry:
.22b6	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.22b8	d0 0b		bne $22c5			bne		_SFXNL 						; no go round again
.22ba	a5 2c		lda $2c				lda 	temp1
.22bc	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.22be	d0 d0		bne $2290			bne 	SFError 					; read uses this to search for data statements
.22c0	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.22c2	20 e0 14	jsr $14e0		jsr	errorHandler
.22c5	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.22c7	60		rts				rts
.22c8					_SFFloatSkip:
.22c8	98		tya				tya 								; skip over an embedded float.
.22c9	18		clc				clc
.22ca	69 05		adc #$05			adc 	#FloatEmbeddedSize
.22cc	a8		tay				tay
.22cd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.22ce					Command_While:
.22ce	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.22d0	a2 04		ldx #$04			ldx 	#4
.22d2	20 3c 31	jsr $313c			jsr 	RSClaim 					; create on stack.
.22d5	88		dey				dey
.22d6	a9 01		lda #$01			lda 	#1
.22d8	20 68 31	jsr $3168			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.22db	c8		iny				iny
.22dc	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger				; get the conditional
.22df	20 c8 30	jsr $30c8			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.22e2	f0 01		beq $22e5			beq 	_CWFail
.22e4	60		rts				rts
.22e5					_CWFail:
.22e5	a9 04		lda #$04			lda 	#4
.22e7	20 5e 31	jsr $315e			jsr 	RSFree 						; close the just opened position.
.22ea	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.22ec	aa		tax				tax
.22ed	20 52 22	jsr $2252			jsr 	ScanForward
.22f0	60		rts				rts
.22f1					Command_Wend:
.22f1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.22f3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.22f5	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.22f7	f0 05		beq $22fe			beq 	_isok
.22f9	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.22fb	20 e0 14	jsr $14e0		jsr	errorHandler
.22fe					_isok:
.22fe	a9 01		lda #$01			lda 	#1
.2300	20 7b 31	jsr $317b			jsr 	RSLoadPosition				; go back until true
.2303	a9 04		lda #$04			lda 	#4
.2305	20 5e 31	jsr $315e			jsr 	RSFree 						; close the loop
.2308	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2309					CommandClear:
.2309					XCommandClear:
.2309	98		tya				tya
.230a	48		pha				pha
.230b	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.230e	85 33		sta $33				sta 	highMemory
.2310	ad cd 0a	lda $0acd			lda 	endMemory+1
.2313	85 34		sta $34				sta 	highMemory+1
.2315	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2318	85 2a		sta $2a				sta 	temp0
.231a	ad c9 0a	lda $0ac9			lda 	basePage+1
.231d	85 2b		sta $2b				sta 	temp0+1
.231f					_CCFindEnd:
.231f	a0 00		ldy #$00			ldy 	#0
.2321	b1 2a		lda ($2a),y			lda 	(temp0),y
.2323	f0 0c		beq $2331			beq 	_CCFoundEnd 				; offset zero is end.
.2325	18		clc				clc
.2326	65 2a		adc $2a				adc 	temp0 						; move to next line
.2328	85 2a		sta $2a				sta 	temp0
.232a	90 f3		bcc $231f			bcc 	_CCFindEnd
.232c	e6 2b		inc $2b				inc 	temp0+1
.232e	4c 1f 23	jmp $231f			jmp 	_CCFindEnd
.2331					_CCFoundEnd:
.2331	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2333	85 35		sta $35				sta 	lowMemory
.2335	a5 2b		lda $2b				lda 	temp0+1
.2337	85 36		sta $36				sta 	lowMemory+1
.2339	18		clc				clc 								; put temp0+1 in endProgram
.233a	a5 2a		lda $2a				lda 	temp0
.233c	69 01		adc #$01			adc 	#1
.233e	8d ca 0a	sta $0aca			sta 	endProgram
.2341	a5 2b		lda $2b				lda 	temp0+1
.2343	69 00		adc #$00			adc 	#0
.2345	8d cb 0a	sta $0acb			sta 	endProgram+1
.2348	18		clc				clc 								; put a bit of space in.
.2349	a5 35		lda $35				lda 	lowMemory
.234b	69 04		adc #$04			adc 	#4
.234d	85 35		sta $35				sta 	lowMemory
.234f	90 02		bcc $2353			bcc 	_CCNoCarry
.2351	e6 36		inc $36				inc 	lowMemory+1
.2353					_CCNoCarry:
.2353	20 2e 31	jsr $312e			jsr 	RSReset 					; reset the return stack.
.2356	a2 04		ldx #$04		ldx	#4
.2358	20 11 40	jsr $4011		jsr	variableHandler
.235b	20 ba 21	jsr $21ba			jsr 	ScanProc 					; scan for procedures
.235e	20 3f 1b	jsr $1b3f			jsr 	CommandRestore 				; do a restore
.2361	68		pla				pla
.2362	a8		tay				tay
.2363	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0c11					structIndent:
>0c11							.fill 	1
.2364					CommandList:
.2364	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2366	8e 11 0c	stx $0c11			stx 	structIndent
.2369	20 a1 30	jsr $30a1			jsr 	MInt32False
.236c	e8		inx				inx
.236d	20 9d 30	jsr $309d			jsr 	MInt32True
.2370	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2372	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2374	f0 15		beq $238b			beq 	_CLEndLine
.2376	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2378	30 1b		bmi $2395			bmi 	_CLDoListing 				; do the whole lot.
.237a	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.237c	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger
.237f	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2381	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2383	f0 06		beq $238b			beq 	_CLEndLine
.2385	20 df 2f	jsr $2fdf			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2388	4c 95 23	jmp $2395			jmp 	_CLDoListing 				; own e.g. list 1100
.238b					_CLEndLine:
.238b	c8		iny				iny 								; skip comma
.238c	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.238e	30 05		bmi $2395			bmi 	_CLDoListing
.2390	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2392	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger				; get end
.2395					_CLDoListing:
.2395	20 36 25	jsr $2536			jsr 	ResetCodeAddress 			; back to the start.
.2398					_CLCheckLoop:
.2398	a2 00		ldx #$00		ldx	#0
.239a	20 bf 14	jsr $14bf		jsr	deviceHandler
.239d	a0 00		ldy #$00			ldy 	#0							; check end.
.239f	b1 28		lda ($28),y			lda 	(codePtr),y
.23a1	f0 41		beq $23e4			beq 	_CLEnd
.23a3	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.23a5	20 e7 23	jsr $23e7			jsr 	CLCompareLineTOS
.23a8	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.23aa	f0 28		beq $23d4			beq 	_CLNext
.23ac	e8		inx				inx
.23ad	20 e7 23	jsr $23e7			jsr 	CLCompareLineTOS 			; compare vs higher
.23b0	c9 01		cmp #$01			cmp 	#1
.23b2	f0 20		beq $23d4			beq 	_CLNext
.23b4	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.23b6	20 09 24	jsr $2409			jsr 	CLStructureCheck
.23b9	ad 11 0c	lda $0c11			lda 	structIndent 				; indent level.
.23bc	10 02		bpl $23c0			bpl 	_CLPositive
.23be	a9 00		lda #$00			lda 	#0
.23c0					_CLPositive:
.23c0	a2 02		ldx #$02		ldx	#2
.23c2	20 43 3c	jsr $3c43		jsr	tokeniserHandler
.23c5	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.23c7	20 09 24	jsr $2409			jsr 	CLStructureCheck
.23ca	ad 11 0c	lda $0c11			lda 	structIndent
.23cd	10 05		bpl $23d4			bpl 	_CLNext
.23cf	a9 00		lda #$00			lda 	#0
.23d1	8d 11 0c	sta $0c11			sta 	structIndent
.23d4					_CLNext:
.23d4	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.23d6	b1 28		lda ($28),y			lda 	(codePtr),y
.23d8	18		clc				clc
.23d9	65 28		adc $28				adc 	codePtr
.23db	85 28		sta $28				sta 	codePtr
.23dd	90 b9		bcc $2398			bcc 	_CLCheckLoop
.23df	e6 29		inc $29				inc 	codePtr+1
.23e1	4c 98 23	jmp $2398			jmp 	_CLCheckLoop
.23e4					_CLEnd:
.23e4	4c 8a 31	jmp $318a			jmp 	WarmStart 					; warm start after list.
.23e7					CLCompareLineTOS:
.23e7	a0 01		ldy #$01			ldy 	#1
.23e9	b1 28		lda ($28),y			lda 	(codePtr),y
.23eb	55 50		eor $50,x			eor 	esInt0,x
.23ed	85 2a		sta $2a				sta 	temp0
.23ef	c8		iny				iny
.23f0	b1 28		lda ($28),y			lda 	(codePtr),y
.23f2	55 58		eor $58,x			eor 	esInt1,x
.23f4	05 2a		ora $2a				ora 	temp0
.23f6	f0 10		beq $2408			beq 	_CLCLTExit
.23f8	88		dey				dey
.23f9	b1 28		lda ($28),y			lda 	(codePtr),y
.23fb	d5 50		cmp $50,x			cmp 	esInt0,x
.23fd	c8		iny				iny
.23fe	b1 28		lda ($28),y			lda 	(codePtr),y
.2400	f5 58		sbc $58,x			sbc 	esInt1,x
.2402	a9 ff		lda #$ff			lda 	#255
.2404	90 02		bcc $2408			bcc 	_CLCLTExit
.2406	a9 01		lda #$01			lda 	#1
.2408					_CLCLTExit:
.2408	60		rts				rts
.2409					CLStructureCheck:
.2409	85 2a		sta $2a				sta 	temp0
.240b	a0 03		ldy #$03			ldy 	#3
.240d					_CLSCLoop:
.240d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.240f	c8		iny				iny
.2410	c9 80		cmp #$80			cmp 	#$80
.2412	90 f9		bcc $240d			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2414	f0 28		beq $243e			beq		_CLSCExit					; EOL return
.2416	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2418	90 1e		bcc $2438			bcc 	_CLSCSpecial
.241a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.241c	90 ef		bcc $240d			bcc 	_CLSCLoop
.241e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2420	b0 eb		bcs $240d			bcs 	_CLSCLoop
.2422	aa		tax				tax 								; get adjustment
.2423	bd 2b 29	lda $292b,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2426	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2428	d0 e3		bne $240d			bne 	_CLSCLoop
.242a	38		sec				sec
.242b	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.242d	0a		asl a				asl 	a 							; double indent step
.242e	18		clc				clc
.242f	6d 11 0c	adc $0c11			adc 	structIndent 				; add to structure indent
.2432	8d 11 0c	sta $0c11			sta 	structIndent
.2435	4c 0d 24	jmp $240d			jmp 	_CLSCLoop
.2438					_CLSCSpecial:
.2438	20 95 22	jsr $2295			jsr 	ScannerSkipSpecial
.243b	4c 0d 24	jmp $240d			jmp 	_CLSCLoop
.243e					_CLSCExit:
.243e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.243f					CommandLoad:
.243f	20 67 24	jsr $2467			jsr 	CLSParameters 					; get parameters for load.
.2442	08		php				php
.2443	a2 0e		ldx #$0e		ldx	#14
.2445	20 bf 14	jsr $14bf		jsr	deviceHandler
.2448	28		plp				plp
.2449	b0 08		bcs $2453			bcs 	_CLExit 						; if CC then load a program, so warm start.
.244b	20 09 23	jsr $2309			jsr 	CommandClear
.244e	a2 02		ldx #$02		ldx	#2
.2450	20 04 1b	jsr $1b04		jsr	interactionHandler
.2453					_CLExit
.2453	60		rts				rts
.2454					CommandSave:
.2454	20 67 24	jsr $2467			jsr 	CLSParameters					; get parameters for save
.2457	90 08		bcc $2461			bcc 	_CSNoOverrideAddress
.2459	20 21 31	jsr $3121			jsr 	CheckComma 						; should be a comma.
.245c	a2 02		ldx #$02			ldx 	#2
.245e	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger 				; get save end address.
.2461					_CSNoOverrideAddress:
.2461	a2 18		ldx #$18		ldx	#24
.2463	20 bf 14	jsr $14bf		jsr	deviceHandler
.2466	60		rts				rts
.2467					CLSParameters:
.2467	a2 00		ldx #$00			ldx 	#0 								; string
.2469	20 04 2a	jsr $2a04			jsr 	EvaluateString
.246c	e8		inx				inx 									; erase out +1 +2
.246d	20 a1 30	jsr $30a1			jsr 	MInt32False
.2470	e8		inx				inx
.2471	20 a1 30	jsr $30a1			jsr 	MInt32False
.2474	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2477	85 51		sta $51				sta 	esInt0+1
.2479	ad c9 0a	lda $0ac9			lda 	basePage+1
.247c	85 59		sta $59				sta 	esInt1+1
.247e	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2481	85 52		sta $52				sta 	esInt0+2
.2483	ad cb 0a	lda $0acb			lda 	endProgram+1
.2486	85 5a		sta $5a				sta 	esInt1+2
.2488	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.248a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.248c	d0 08		bne $2496			bne 	_CLSDefault
.248e	c8		iny				iny 									; skip comma
.248f	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2491	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger
.2494	38		sec				sec
.2495	60		rts				rts
.2496					_CLSDefault:
.2496	18		clc				clc
.2497	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2498					Command_New:
.2498					Command_XNew:
.2498	20 36 25	jsr $2536			jsr 	ResetCodeAddress 			; point to first line
.249b	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.249d	98		tya				tya
.249e	91 28		sta ($28),y			sta 	(codePtr),y
.24a0	20 09 23	jsr $2309			jsr 	CommandClear 				; clear everything down.
.24a3	4c 5f 1e	jmp $1e5f			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0c12					breakCounter:
>0c12								.fill 	1
.0c13					breakIncrement:
>0c13								.fill 	1
.24a6					Command_Run:
.24a6					XCommand_Run:
.24a6	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.24a8	9a		txs				txs
.24a9	20 30 25	jsr $2530			jsr 	BreakOn 					; turn break on
.24ac	20 09 23	jsr $2309			jsr 	CommandClear 				; clear everything.
.24af	20 36 25	jsr $2536			jsr 	ResetCodeAddress 			; back to the start.
.24b2					Command_RunFrom:
.24b2	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.24b4					CRNextInstruction:
.24b4	64 3a		stz $3a				stz 	softMemAlloc+1
.24b6	ad 12 0c	lda $0c12			lda 	breakCounter 				; check for break.
.24b9	6d 13 0c	adc $0c13			adc 	breakIncrement
.24bc	8d 12 0c	sta $0c12			sta 	breakCounter
.24bf	90 05		bcc $24c6			bcc 	_CRNoChecks
.24c1	a2 00		ldx #$00		ldx	#0
.24c3	20 bf 14	jsr $14bf		jsr	deviceHandler
.24c6					_CRNoChecks
.24c6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.24c8	10 1c		bpl $24e6			bpl 	_CRNotToken
.24ca	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.24cc	b0 0c		bcs $24da			bcs 	_CRExecute
.24ce	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.24d0	b0 71		bcs $2543			bcs 	Unimplemented
.24d2	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.24d4	b0 04		bcs $24da			bcs 	_CRExecute
.24d6	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.24d8	b0 16		bcs $24f0			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.24da					_CRExecute:
.24da	c8		iny				iny 								; consume it.
.24db	0a		asl a				asl 	a 							; double it, losing most significant bit.
.24dc	aa		tax				tax
.24dd	20 e3 24	jsr $24e3			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.24e0	4c b4 24	jmp $24b4			jmp 	CRNextInstruction
.24e3					_CRRunRoutine:
.24e3	7c 4d 25	jmp ($254d,x)			jmp 	(Group0Vectors,x)
.24e6					_CRNotToken:
.24e6	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.24e8	b0 59		bcs $2543			bcs 	Unimplemented
.24ea					_CRDefaultLet:
.24ea	20 92 1d	jsr $1d92			jsr 	CommandLet 					; do the default, LET
.24ed	4c b4 24	jmp $24b4			jmp 	CRNextInstruction
.24f0					_CRCheckIndirect:
.24f0	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.24f2	f0 0a		beq $24fe			beq 	_CRAndCommand
.24f4	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.24f6	f0 f2		beq $24ea			beq 	_CRDefaultLet
.24f8	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.24fa	f0 ee		beq $24ea			beq 	_CRDefaultLet
.24fc	d0 45		bne $2543			bne 	Unimplemented
.24fe					_CRAndCommand:
.24fe	c8		iny				iny 								; skip over the AND token
.24ff	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2501	20 1b 25	jsr $251b			jsr 	CommandAssembler 			; do the assembler command
.2504	4c b4 24	jmp $24b4			jmp 	CRNextInstruction 			; and loop round.
.2507					CommandShift1:
.2507	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2509	10 38		bpl $2543			bpl 	Unimplemented 				; we have an error as this should not happen.
.250b	c8		iny				iny 								; advance over it.
.250c	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.250e	b0 0b		bcs $251b			bcs 	CommandAssembler
.2510	0a		asl a				asl 	a 							; double into X
.2511	aa		tax				tax
.2512	7c 11 26	jmp ($2611,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2515					CommandShift2:
.2515	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2517	20 15 18	jsr $1815		jsr	extensionHandler
.251a	60		rts				rts
.251b					CommandAssembler:
.251b	a2 00		ldx #$00		ldx	#0
.251d	20 84 13	jsr $1384		jsr	assemblerHandler
.2520	60		rts				rts
.2521					CommandAssemblerLabel:
.2521	a2 02		ldx #$02		ldx	#2
.2523	20 84 13	jsr $1384		jsr	assemblerHandler
.2526	60		rts				rts
.2527					CommandColon:
.2527	60		rts				rts
.2528					CommandBreak:
.2528	20 0d 2a	jsr $2a0d			jsr 	EvaluateRootInteger
.252b	20 c8 30	jsr $30c8			jsr 	MInt32Zero
.252e	f0 02		beq $2532			beq 	BreakOff
.2530					BreakOn:
.2530	a2 08		ldx #$08			ldx 	#8
.2532					BreakOff:
.2532	8e 13 0c	stx $0c13			stx 	breakIncrement
.2535	60		rts				rts
.2536					ResetCodeAddress:
.2536	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2539	85 28		sta $28				sta 	codePtr
.253b	ad c9 0a	lda $0ac9			lda 	basePage+1
.253e	85 29		sta $29				sta 	codePtr+1
.2540	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2542	60		rts				rts
.2543					Unimplemented:
.2543	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2545	20 e0 14	jsr $14e0		jsr	errorHandler
.2548					TKErr01:
.2548					TKErr02:
.2548					TKErr03:
.2548					TKErr04:
.2548					TKErr05:
.2548					TKErr06:
.2548					TKErr07:
.2548					TKErr08:
.2548					TKErr09:
.2548					TKErr10:
.2548					TKErr11:
.2548	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.254a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.254d					Group0Vectors:
>254d	65 1e					.word	AdvanceNextLine          ; $80 [[eol]]
>254f	07 25					.word	CommandShift1            ; $81 [[sh1]]
>2551	15 25					.word	CommandShift2            ; $82 [[sh2]]
>2553	48 25					.word	TKErr09                  ; $83 [[sh3]]
>2555	48 25					.word	TKErr10                  ; $84 [[fpc]]
>2557	48 25					.word	TKErr08                  ; $85 [[str]]
>2559	f4 26					.word	AndHandler               ; $86 and
>255b	e1 26					.word	OrHandler                ; $87 or
>255d	ce 26					.word	XorHandler               ; $88 xor
>255f	16 28					.word	CompareGreaterEq         ; $89 >=
>2561	20 28					.word	CompareLessEq            ; $8a <=
>2563	02 28					.word	CompareGreater           ; $8b >
>2565	f8 27					.word	CompareLess              ; $8c <
>2567	ee 27					.word	CompareEquals            ; $8d =
>2569	0c 28					.word	CompareNotEquals         ; $8e <>
>256b	5f 26					.word	AddHandler               ; $8f +
>256d	82 26					.word	SubHandler               ; $90 -
>256f	1a 27					.word	ShrHandler               ; $91 >>
>2571	07 27					.word	ShlHandler               ; $92 <<
>2573	95 26					.word	MulHandler               ; $93 *
>2575	a8 26					.word	DivHandler               ; $94 /
>2577	bb 26					.word	ModHandler               ; $95 mod
>2579	53 27					.word	PowerHandler             ; $96 ^
>257b	2d 27					.word	WordRefHandler           ; $97 !
>257d	40 27					.word	ByteRefHandler           ; $98 ?
>257f	24 22					.word	Command_Repeat           ; $99 repeat
>2581	ce 22					.word	Command_While            ; $9a while
>2583	79 1e					.word	Command_FOR              ; $9b for
>2585	88 1f					.word	CommandIf                ; $9c if
>2587	48 25					.word	TKErr04                  ; $9d defproc
>2589	31 22					.word	Command_Until            ; $9e until
>258b	f1 22					.word	Command_Wend             ; $9f wend
>258d	da 1e					.word	Command_NEXT             ; $a0 next
>258f	48 25					.word	TKErr06                  ; $a1 then
>2591	c3 1f					.word	Command_ENDIF            ; $a2 endif
>2593	33 21					.word	ReturnProc               ; $a3 endproc
>2595	7a 29					.word	UnaryParenthesis         ; $a4 (
>2597	56 2b					.word	UnaryLen                 ; $a5 len(
>2599	9a 2b					.word	UnarySgn                 ; $a6 sgn(
>259b	83 2b					.word	UnaryAbs                 ; $a7 abs(
>259d	f3 2b					.word	Unary_Random             ; $a8 random(
>259f	3d 2c					.word	Unary_Page               ; $a9 page
>25a1	9d 30					.word	MInt32True               ; $aa true
>25a3	a1 30					.word	MInt32False              ; $ab false
>25a5	08 2c					.word	Unary_Min                ; $ac min(
>25a7	0c 2c					.word	Unary_Max                ; $ad max(
>25a9	15 2d					.word	UnarySys                 ; $ae sys(
>25ab	be 2c					.word	UnaryTimer               ; $af timer(
>25ad	d3 2a					.word	EventFunction            ; $b0 event(
>25af	e7 2c					.word	UnaryGet                 ; $b1 get(
>25b1	d7 2c					.word	UnaryInkey               ; $b2 inkey(
>25b3	8e 2c					.word	UnaryAlloc               ; $b3 alloc(
>25b5	4e 2d					.word	ExecChr                  ; $b4 chr$(
>25b7	7e 2d					.word	ExecLeft                 ; $b5 left$(
>25b9	9b 2d					.word	ExecMid                  ; $b6 mid$(
>25bb	c3 2d					.word	ExecRight                ; $b7 right$(
>25bd	55 2a					.word	Event_Str                ; $b8 str$(
>25bf	84 2a					.word	UnaryVal                 ; $b9 val(
>25c1	b1 2b					.word	UnaryPeek                ; $ba peek(
>25c3	b7 2b					.word	UnaryDeek                ; $bb deek(
>25c5	bd 2b					.word	UnaryLeek                ; $bc leek(
>25c7	74 2b					.word	UnaryAsc                 ; $bd asc(
>25c9	68 2c					.word	UnaryIntToFloat          ; $be int(
>25cb	7b 2c					.word	UnaryFloatToInt          ; $bf float(
>25cd	87 2a					.word	UnaryIsVal               ; $c0 isval(
>25cf	65 2d					.word	ExecUpper                ; $c1 upper$(
>25d1	62 2d					.word	ExecLower                ; $c2 lower$(
>25d3	4b 2c					.word	UnaryReference           ; $c3 @
>25d5	61 2c					.word	UnaryComplement          ; $c4 ~
>25d7	5e 2c					.word	UnaryHexMarker           ; $c5 &
>25d9	00 2d					.word	UnaryGetString           ; $c6 get$(
>25db	06 2d					.word	UnaryInkeyString         ; $c7 inkey$(
>25dd	3d 2d					.word	UnaryMem                 ; $c8 mem
>25df	48 25					.word	TKErr01                  ; $c9 )
>25e1	27 25					.word	CommandColon             ; $ca :
>25e3	48 25					.word	TKErr02                  ; $cb ,
>25e5	48 25					.word	TKErr03                  ; $cc ;
>25e7	4d 1e					.word	Command_Rem2             ; $cd '
>25e9	48 25					.word	TKErr07                  ; $ce to
>25eb	48 25					.word	TKErr05                  ; $cf step
>25ed	c6 20					.word	CallProc                 ; $d0 proc
>25ef	c4 1f					.word	CommandLocal             ; $d1 local
>25f1	84 1d					.word	Command_Dim              ; $d2 dim
>25f3	4d 1e					.word	Command_Rem              ; $d3 rem
>25f5	92 1d					.word	CommandLet               ; $d4 let
>25f7	ce 1b					.word	Command_Input            ; $d5 input
>25f9	bd 1f					.word	Command_ELSE             ; $d6 else
>25fb	55 1d					.word	Command_VDU              ; $d7 vdu
>25fd	84 1c					.word	Command_Print            ; $d8 print
>25ff	9c 1b					.word	CommandGOTO              ; $d9 goto
>2601	71 1b					.word	CommandGOSUB             ; $da gosub
>2603	84 1b					.word	CommandRETURN            ; $db return
>2605	36 1b					.word	CommandData              ; $dc data
>2607	76 1d					.word	Command_Assert           ; $dd assert
>2609	10 1e					.word	Command_Poke             ; $de poke
>260b	14 1e					.word	Command_Doke             ; $df doke
>260d	18 1e					.word	Command_Loke             ; $e0 loke
>260f	25 1d					.word	Command_Ink              ; $e1 ink
>2611	30 1d					.word	Command_Paper            ; $e2 paper
>2613	1f 1d					.word	Command_CLS              ; $e3 cls
>2615	3b 1d					.word	Command_Locate           ; $e4 locate
>2617	28 25					.word	CommandBreak             ; $e5 break
>2619	21 25					.word	CommandAssemblerLabel    ; $e6 .
>261b	48 25					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.261d					Group1Vectors:
>261d	09 23					.word	CommandClear             ; $86 clear
>261f	3f 24					.word	CommandLoad              ; $87 load
>2621	54 24					.word	CommandSave              ; $88 save
>2623	64 23					.word	CommandList              ; $89 list
>2625	98 24					.word	Command_New              ; $8a new
>2627	a6 24					.word	Command_Run              ; $8b run
>2629	0b 1b					.word	CommandRead              ; $8c read
>262b	3f 1b					.word	CommandRestore           ; $8d restore
>262d	5f 1e					.word	CommandEnd               ; $8e end
>262f	5a 1e					.word	CommandStop              ; $8f stop
>2631	62 1e					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2633					BinaryProcess:
.2633	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2635	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.2637	0a		asl a				asl 	a
.2638	30 0e		bmi $2648			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.263a	18		clc				clc 								; return CC for integer
.263b	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.263d	f0 08		beq $2647			beq 	_BPExit 					; if both integer then return with CC.
.263f	20 4d 26	jsr $264d			jsr 	BPMakeBothFloat 			; make both float
.2642	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2644	95 48		sta $48,x			sta 	esType,x
.2646	38		sec				sec 								; and return with carry set.
.2647					_BPExit:
.2647	60		rts				rts
.2648					_BPStringType:
.2648	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.264a	20 e0 14	jsr $14e0		jsr	errorHandler
.264d					BPMakeBothFloat:
.264d	e8		inx				inx
.264e	20 52 26	jsr $2652			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2651	ca		dex				dex
.2652					BPMakeFloat:
.2652	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.2654	4a		lsr a				lsr 	a
.2655	b0 07		bcs $265e			bcs 	_BPIsFloat 					; already a float if set.
.2657	8a		txa				txa
.2658	a2 1a		ldx #$1a		ldx	#26
.265a	20 24 19	jsr $1924		jsr	floatingpointHandler
.265d	aa		tax				tax
.265e					_BPIsFloat:
.265e	60		rts				rts
.265f					AddHandler:
.265f	20 30 28	jsr $2830			jsr 	DereferenceTwo 				; dereference top two on stack.
.2662	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.2664	35 49		and $49,x			and 	esType+1,x
.2666	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2668	d0 10		bne $267a			bne 	_AHStringConcat				; concatenate strings.
.266a	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.266d	b0 03		bcs $2672			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.266f	4c 85 2f	jmp $2f85			jmp 	MInt32Add 							; else do it as integer.
.2672					_IsFPOperation:
.2672	8a		txa				txa 								; call the relevant fp routine
.2673	a2 02		ldx #$02		ldx	#2
.2675	20 24 19	jsr $1924		jsr	floatingpointHandler
.2678	aa		tax				tax
.2679	60		rts				rts
.267a					_AHStringConcat:
.267a	8a		txa				txa 								; handled by the string module.
.267b	a2 04		ldx #$04		ldx	#4
.267d	20 45 34	jsr $3445		jsr	stringHandler
.2680	aa		tax				tax
.2681	60		rts				rts
.2682					SubHandler:
.2682	20 30 28	jsr $2830			jsr 	DereferenceTwo
.2685	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.2688	b0 03		bcs $268d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.268a	4c 9f 2f	jmp $2f9f			jmp 	MInt32Sub 							; else do it as integer.
.268d					_IsFPOperation:
.268d	8a		txa				txa 								; call the relevant fp routine
.268e	a2 10		ldx #$10		ldx	#16
.2690	20 24 19	jsr $1924		jsr	floatingpointHandler
.2693	aa		tax				tax
.2694	60		rts				rts
.2695					MulHandler:
.2695	20 30 28	jsr $2830			jsr 	DereferenceTwo
.2698	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.269b	b0 03		bcs $26a0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.269d	4c b9 2f	jmp $2fb9			jmp 	MInt32Multiply 							; else do it as integer.
.26a0					_IsFPOperation:
.26a0	8a		txa				txa 								; call the relevant fp routine
.26a1	a2 0a		ldx #$0a		ldx	#10
.26a3	20 24 19	jsr $1924		jsr	floatingpointHandler
.26a6	aa		tax				tax
.26a7	60		rts				rts
.26a8					DivHandler:
.26a8	20 30 28	jsr $2830			jsr 	DereferenceTwo
.26ab	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.26ae	b0 03		bcs $26b3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26b0	4c 76 2e	jmp $2e76			jmp 	MInt32SDivide 							; else do it as integer.
.26b3					_IsFPOperation:
.26b3	8a		txa				txa 								; call the relevant fp routine
.26b4	a2 06		ldx #$06		ldx	#6
.26b6	20 24 19	jsr $1924		jsr	floatingpointHandler
.26b9	aa		tax				tax
.26ba	60		rts				rts
.26bb					ModHandler:
.26bb	20 30 28	jsr $2830			jsr 	DereferenceTwo
.26be	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.26c1	b0 03		bcs $26c6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26c3	4c f4 2e	jmp $2ef4			jmp 	MInt32Modulus 							; else do it as integer.
.26c6					_IsFPOperation:
.26c6	8a		txa				txa 								; call the relevant fp routine
.26c7	a2 08		ldx #$08		ldx	#8
.26c9	20 24 19	jsr $1924		jsr	floatingpointHandler
.26cc	aa		tax				tax
.26cd	60		rts				rts
.26ce					XorHandler:
.26ce	20 30 28	jsr $2830			jsr 	DereferenceTwo
.26d1	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.26d4	b0 03		bcs $26d9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26d6	4c 28 2e	jmp $2e28			jmp 	MInt32Xor 							; else do it as integer.
.26d9					_IsFPOperation:
.26d9	8a		txa				txa 								; call the relevant fp routine
.26da	a2 08		ldx #$08		ldx	#8
.26dc	20 24 19	jsr $1924		jsr	floatingpointHandler
.26df	aa		tax				tax
.26e0	60		rts				rts
.26e1					OrHandler:
.26e1	20 30 28	jsr $2830			jsr 	DereferenceTwo
.26e4	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.26e7	b0 03		bcs $26ec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26e9	4c 0f 2e	jmp $2e0f			jmp 	MInt32Or 							; else do it as integer.
.26ec					_IsFPOperation:
.26ec	8a		txa				txa 								; call the relevant fp routine
.26ed	a2 08		ldx #$08		ldx	#8
.26ef	20 24 19	jsr $1924		jsr	floatingpointHandler
.26f2	aa		tax				tax
.26f3	60		rts				rts
.26f4					AndHandler:
.26f4	20 30 28	jsr $2830			jsr 	DereferenceTwo
.26f7	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.26fa	b0 03		bcs $26ff			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26fc	4c f6 2d	jmp $2df6			jmp 	MInt32And 							; else do it as integer.
.26ff					_IsFPOperation:
.26ff	8a		txa				txa 								; call the relevant fp routine
.2700	a2 08		ldx #$08		ldx	#8
.2702	20 24 19	jsr $1924		jsr	floatingpointHandler
.2705	aa		tax				tax
.2706	60		rts				rts
.2707					ShlHandler:
.2707	20 30 28	jsr $2830			jsr 	DereferenceTwo
.270a	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.270d	b0 03		bcs $2712			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.270f	4c 88 27	jmp $2788			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2712					_IsFPOperation:
.2712	8a		txa				txa 								; call the relevant fp routine
.2713	a2 08		ldx #$08		ldx	#8
.2715	20 24 19	jsr $1924		jsr	floatingpointHandler
.2718	aa		tax				tax
.2719	60		rts				rts
.271a					ShrHandler:
.271a	20 30 28	jsr $2830			jsr 	DereferenceTwo
.271d	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.2720	b0 03		bcs $2725			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2722	4c 8b 27	jmp $278b			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2725					_IsFPOperation:
.2725	8a		txa				txa 								; call the relevant fp routine
.2726	a2 08		ldx #$08		ldx	#8
.2728	20 24 19	jsr $1924		jsr	floatingpointHandler
.272b	aa		tax				tax
.272c	60		rts				rts
.272d					WordRefHandler:
.272d	20 30 28	jsr $2830			jsr 	DereferenceTwo
.2730	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.2733	b0 03		bcs $2738			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2735	4c 7a 27	jmp $277a			jmp 	MInt32WordIndirect 							; else do it as integer.
.2738					_IsFPOperation:
.2738	8a		txa				txa 								; call the relevant fp routine
.2739	a2 08		ldx #$08		ldx	#8
.273b	20 24 19	jsr $1924		jsr	floatingpointHandler
.273e	aa		tax				tax
.273f	60		rts				rts
.2740					ByteRefHandler:
.2740	20 30 28	jsr $2830			jsr 	DereferenceTwo
.2743	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.2746	b0 03		bcs $274b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2748	4c 7e 27	jmp $277e			jmp 	MInt32ByteIndirect 							; else do it as integer.
.274b					_IsFPOperation:
.274b	8a		txa				txa 								; call the relevant fp routine
.274c	a2 08		ldx #$08		ldx	#8
.274e	20 24 19	jsr $1924		jsr	floatingpointHandler
.2751	aa		tax				tax
.2752	60		rts				rts
.2753					PowerHandler:
.2753	20 30 28	jsr $2830			jsr 	DereferenceTwo
.2756	20 33 26	jsr $2633			jsr 	BinaryProcess 				; check to see if either is float
.2759	b0 03		bcs $275e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.275b	4c 66 27	jmp $2766			jmp 	PowerInteger 							; else do it as integer.
.275e					_IsFPOperation:
.275e	8a		txa				txa 								; call the relevant fp routine
.275f	a2 16		ldx #$16		ldx	#22
.2761	20 24 19	jsr $1924		jsr	floatingpointHandler
.2764	aa		tax				tax
.2765	60		rts				rts
.2766					PowerInteger:
.2766	20 4d 26	jsr $264d			jsr 	BPMakeBothFloat				; make them float.
.2769	8a		txa				txa
.276a	a2 16		ldx #$16		ldx	#22
.276c	20 24 19	jsr $1924		jsr	floatingpointHandler
.276f	a2 12		ldx #$12		ldx	#18
.2771	20 24 19	jsr $1924		jsr	floatingpointHandler
.2774	aa		tax				tax
.2775	a9 00		lda #$00			lda 	#0 							; make type integer
.2777	95 48		sta $48,x			sta 	esType,x
.2779	60		rts				rts
.277a					Mint32WordIndirect:
.277a	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.277c	d0 02		bne $2780			bne 	Min32Indirect
.277e					Mint32ByteIndirect:
.277e	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2780					Min32Indirect:
.2780	48		pha				pha 								; save the indirection
.2781	20 85 2f	jsr $2f85			jsr 	MInt32Add 					; add a!b a?b
.2784	68		pla				pla 								; and set the type to reference.
.2785	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2787	60		rts				rts
.2788					Mint32ShiftLeftX:
.2788	18		clc				clc 								; CC shift left
.2789	90 01		bcc $278c			bcc 	Mint32Shift
.278b					Mint32ShiftRightX:
.278b	38		sec				sec 								; CS shift right
.278c					Mint32Shift:
.278c	08		php				php 								; save carry flag on stack.
.278d	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.278f	15 61		ora $61,x			ora 	esInt2+1,x
.2791	15 69		ora $69,x			ora 	esInt3+1,x
.2793	d0 1e		bne $27b3			bne 	_MShiftZero
.2795	b5 51		lda $51,x			lda 	esInt0+1,x
.2797	c9 20		cmp #$20			cmp 	#32
.2799	b0 18		bcs $27b3			bcs 	_MShiftZero
.279b					_MShiftLoop:
.279b	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.279d	f0 12		beq $27b1			beq 	_MShiftExit
.279f	d6 51		dec $51,x			dec 	esInt0+1,x
.27a1	28		plp				plp 								; restore and save carry
.27a2	08		php				php
.27a3	90 06		bcc $27ab			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.27a5	20 bf 30	jsr $30bf			jsr 	Mint32ShiftRight
.27a8	4c 9b 27	jmp $279b			jmp 	_MShiftLoop
.27ab					_MShiftLeft:
.27ab	20 b6 30	jsr $30b6			jsr 	Mint32ShiftLeft
.27ae	4c 9b 27	jmp $279b			jmp 	_MShiftLoop
.27b1					_MShiftExit:
.27b1	28		plp				plp	 								; throw saved carry and exit
.27b2	60		rts				rts
.27b3					_MShiftZero:
.27b3	4c a1 30	jmp $30a1			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.27b6					PerformComparison:
.27b6	20 30 28	jsr $2830			jsr 	DereferenceTwo 				; make both values.
.27b9	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.27bb	35 49		and $49,x			and 	esType+1,x
.27bd	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.27be	30 1d		bmi $27dd			bmi 	_PCIsString
.27c0	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.27c2	15 49		ora $49,x			ora 	esType+1,x
.27c4	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.27c5	30 22		bmi $27e9			bmi 	_PCError
.27c7	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.27c9	f0 0f		beq $27da			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.27cb	20 4d 26	jsr $264d			jsr 	BPMakeBothFloat 			; make both float
.27ce	8a		txa				txa
.27cf	a2 04		ldx #$04		ldx	#4
.27d1	20 24 19	jsr $1924		jsr	floatingpointHandler
.27d4	86 32		stx $32				stx 	tempShort 					; save result
.27d6	aa		tax				tax
.27d7	a5 32		lda $32				lda 	tempShort
.27d9	60		rts				rts
.27da					_PCIsInteger:
.27da	4c 41 2e	jmp $2e41			jmp 	MInt32Compare
.27dd					_PCIsString:
.27dd	8a		txa				txa 								; A has SP
.27de	a2 08		ldx #$08		ldx	#8
.27e0	20 45 34	jsr $3445		jsr	stringHandler
.27e3	86 32		stx $32				stx 	tempShort 					; save result
.27e5	aa		tax				tax 								; put SP back in X and get result.
.27e6	a5 32		lda $32				lda 	tempShort
.27e8	60		rts				rts
.27e9					_PCError:
.27e9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.27eb	20 e0 14	jsr $14e0		jsr	errorHandler
.27ee					CompareEquals:
.27ee	20 b6 27	jsr $27b6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.27f1	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.27f3	f0 35		beq $282a			beq  	CompareTrue
.27f5	4c 2d 28	jmp $282d			jmp 	CompareFalse
.27f8					CompareLess:
.27f8	20 b6 27	jsr $27b6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.27fb	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.27fd	f0 2b		beq $282a			beq  	CompareTrue
.27ff	4c 2d 28	jmp $282d			jmp 	CompareFalse
.2802					CompareGreater:
.2802	20 b6 27	jsr $27b6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2805	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2807	f0 21		beq $282a			beq  	CompareTrue
.2809	4c 2d 28	jmp $282d			jmp 	CompareFalse
.280c					CompareNotEquals:
.280c	20 b6 27	jsr $27b6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.280f	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2811	d0 17		bne $282a			bne  	CompareTrue
.2813	4c 2d 28	jmp $282d			jmp 	CompareFalse
.2816					CompareGreaterEq:
.2816	20 b6 27	jsr $27b6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2819	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.281b	d0 0d		bne $282a			bne  	CompareTrue
.281d	4c 2d 28	jmp $282d			jmp 	CompareFalse
.2820					CompareLessEq:
.2820	20 b6 27	jsr $27b6			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2823	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2825	d0 03		bne $282a			bne  	CompareTrue
.2827	4c 2d 28	jmp $282d			jmp 	CompareFalse
.282a					CompareTrue:
.282a	4c 9d 30	jmp $309d			jmp 	MInt32True
.282d					CompareFalse:
.282d	4c a1 30	jmp $30a1			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2830					DereferenceTwo:
.2830	e8		inx				inx
.2831	20 35 28	jsr $2835			jsr 	DereferenceOne
.2834	ca		dex				dex
.2835					DereferenceOne:
.2835	b5 48		lda $48,x			lda 	esType,x
.2837	10 3d		bpl $2876			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2839	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.283a	b0 3b		bcs $2877			bcs 	_DRFloatDeReference
.283c	98		tya				tya
.283d	48		pha				pha
.283e	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2840	85 2a		sta $2a				sta 	temp0
.2842	b5 58		lda $58,x			lda 	esInt1,x
.2844	85 2b		sta $2b				sta 	temp0+1
.2846	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2848	95 58		sta $58,x			sta 	esInt1,x
.284a	95 60		sta $60,x			sta 	esInt2,x
.284c	95 68		sta $68,x			sta 	esInt3,x
.284e	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2850	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2852	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2853	30 0d		bmi $2862			bmi 	_DeRefString 				; string, 2 bytes only
.2855	d0 11		bne $2868			bne 	_DeRefByte 					; byte 1 byte only
.2857					_DeRefLong:
.2857	a0 03		ldy #$03			ldy 	#3
.2859	b1 2a		lda ($2a),y			lda 	(temp0),y
.285b	95 68		sta $68,x			sta 	esInt3,x
.285d	88		dey				dey
.285e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2860	95 60		sta $60,x			sta 	esInt2,x
.2862					_DeRefString:
.2862	a0 01		ldy #$01			ldy 	#1
.2864	b1 2a		lda ($2a),y			lda 	(temp0),y
.2866	95 58		sta $58,x			sta 	esInt1,x
.2868					_DeRefByte:
.2868	a0 00		ldy #$00			ldy 	#0
.286a	b1 2a		lda ($2a),y			lda 	(temp0),y
.286c	95 50		sta $50,x			sta 	esInt0,x
.286e	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2870	29 40		and #$40			and 	#$40
.2872	95 48		sta $48,x			sta 	esType,x
.2874	68		pla				pla
.2875	a8		tay				tay
.2876					_DRNotReference
.2876	60		rts				rts
.2877					_DRFloatDereference:
.2877	20 07 1e	jsr $1e07			jsr 	TOSToTemp0 					; address to deref in temp0
.287a	8a		txa				txa
.287b	a2 1c		ldx #$1c		ldx	#28
.287d	20 24 19	jsr $1924		jsr	floatingpointHandler
.2880	aa		tax				tax
.2881	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2883	95 48		sta $48,x			sta 	esType,x
.2885	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2886					EvaluateLevel:
.2886	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2888	b0 1e		bcs $28a8			bcs 	_ELStack
.288a	48		pha				pha 								; save precedence level.
.288b	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.288d	95 50		sta $50,x			sta 	esInt0,x
.288f	95 58		sta $58,x			sta 	esInt1,x
.2891	95 60		sta $60,x			sta 	esInt2,x
.2893	95 68		sta $68,x			sta 	esInt3,x
.2895	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2897	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2899	30 26		bmi $28c1			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.289b	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.289c	30 0f		bmi $28ad			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.289e	8a		txa				txa 								; stack level in X
.289f	a2 00		ldx #$00		ldx	#0
.28a1	20 11 40	jsr $4011		jsr	variableHandler
.28a4	aa		tax				tax
.28a5	4c ea 28	jmp $28ea			jmp		_ELHasTerm
.28a8					_ELStack:
.28a8	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.28aa	20 e0 14	jsr $14e0		jsr	errorHandler
.28ad					_ELIsConstant:
.28ad	4a		lsr a				lsr 	a 							; get the value back
.28ae	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.28b0	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.28b2					_ELCheckNext:
.28b2	c8		iny				iny 								; look at next
.28b3	b1 28		lda ($28),y			lda 	(codePtr),y
.28b5	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.28b7	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.28b9	b0 2f		bcs $28ea			bcs 	_ELHasTerm 					; done getting the constant.
.28bb	20 83 29	jsr $2983			jsr 	ELShiftByteIn 				; shift byte into position.
.28be	4c b2 28	jmp $28b2			jmp 	_ELCheckNext
.28c1					_ELIsToken:
.28c1	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.28c3	f0 0f		beq $28d4			beq 	_ELIsString
.28c5	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.28c7	d0 5f		bne $2928			bne 	_ELCheckUnary
.28c9	8a		txa				txa 								; put X into A
.28ca	c8		iny				iny 								; skip over the float marker
.28cb	a2 18		ldx #$18		ldx	#24
.28cd	20 24 19	jsr $1924		jsr	floatingpointHandler
.28d0	aa		tax				tax 								; restore X
.28d1	4c ea 28	jmp $28ea			jmp 	_ELHasTerm
.28d4					_ELIsString:
.28d4	98		tya				tya 								; address of string is codePtr+y+1
.28d5	38		sec				sec
.28d6	65 28		adc $28				adc 	codePtr
.28d8	95 50		sta $50,x			sta 	esInt0,x
.28da	a5 29		lda $29				lda 	codePtr+1
.28dc	69 00		adc #$00			adc 	#0
.28de	95 58		sta $58,x			sta 	esInt1,x
.28e0	a9 40		lda #$40			lda 	#$40 						; set type to string value
.28e2	95 48		sta $48,x			sta 	esType,x
.28e4	c8		iny				iny 								; skip over string.
.28e5	98		tya				tya
.28e6	38		sec				sec									; +1 for the length itself.
.28e7	71 28		adc ($28),y			adc 	(codePtr),y
.28e9	a8		tay				tay 								; and fall through to term loop code.
.28ea					_ELHasTerm:
.28ea	b1 28		lda ($28),y			lda 	(codePtr),y
.28ec	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.28ee	90 04		bcc $28f4			bcc 	_ELPopExit
.28f0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.28f2	90 02		bcc $28f6			bcc 	_ELHasBinaryTerm
.28f4					_ELPopExit:
.28f4	68		pla				pla
.28f5					_ELExit:
.28f5	60		rts				rts
.28f6					_ELHasBinaryTerm:
.28f6	84 32		sty $32				sty 	tempShort 					; save position
.28f8	a8		tay				tay 								; use token as an index and get the precedence.
.28f9	b9 2b 29	lda $292b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.28fc	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.28fe	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2900	68		pla				pla 								; restore current level.
.2901	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2903	b0 f0		bcs $28f5			bcs 	_ELExit
.2905	48		pha				pha 								; save current level back on the stack.
.2906	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2908	48		pha				pha
.2909	c8		iny				iny
.290a	e8		inx				inx 								; calculate the RHS at the operator precedence.
.290b	a5 32		lda $32				lda 	tempShort
.290d	20 86 28	jsr $2886			jsr 	EvaluateLevel
.2910	ca		dex				dex
.2911	68		pla				pla 								; get the operator back out.
.2912					_ELExecuteA:
.2912	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2914	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2915	aa		tax				tax
.2916	bd 4d 25	lda $254d,x			lda 	Group0Vectors,x
.2919	85 2a		sta $2a				sta 	temp0
.291b	bd 4e 25	lda $254e,x			lda 	Group0Vectors+1,x
.291e	85 2b		sta $2b				sta 	temp0+1
.2920	a6 32		ldx $32				ldx 	tempShort
.2922	20 6f 29	jsr $296f			jsr 	_ELCallTemp0
.2925	4c ea 28	jmp $28ea			jmp 	_ELHasTerm 					; and loop back round.
.2928					_ELCheckUnary:
.2928	c8		iny				iny 								; skip over token.
.2929	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.292b	f0 19		beq $2946			beq 	_ELMinus
.292d	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.292f	f0 2c		beq $295d			beq 	_ELIndirect
.2931	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2933	f0 28		beq $295d			beq 	_ELIndirect
.2935	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2937	f0 39		beq $2972			beq 	_ELExtension
.2939	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.293b	90 04		bcc $2941			bcc 	_ELUSyntax
.293d	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.293f	90 d1		bcc $2912			bcc 	_ELExecuteA 				; if so do that token.
.2941					_ELUSyntax:
.2941	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2943	20 e0 14	jsr $14e0		jsr	errorHandler
.2946					_ELMinus:
.2946	20 d8 29	jsr $29d8			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2949	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.294b	f0 0a		beq $2957			beq 	_ELMinusInteger
.294d	8a		txa				txa
.294e	a2 0c		ldx #$0c		ldx	#12
.2950	20 24 19	jsr $1924		jsr	floatingpointHandler
.2953	aa		tax				tax
.2954	4c ea 28	jmp $28ea			jmp 	_ELHasTerm
.2957					_ELMinusInteger:
.2957	20 5b 30	jsr $305b			jsr 	MInt32Negate 				; do int negate
.295a	4c ea 28	jmp $28ea			jmp 	_ELHasTerm
.295d					_ELIndirect:
.295d	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.295e	20 e1 29	jsr $29e1			jsr 	EvaluateIntegerTerm 		; integer address
.2961	68		pla				pla
.2962	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2964	f0 02		beq $2968			beq 	_ELHaveModifier
.2966	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2968					_ELHaveModifier:
.2968	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.296a	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.296c	4c ea 28	jmp $28ea			jmp 	_ELHasTerm
.296f					_ELCallTemp0:
.296f	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2972					_ELExtension:
.2972	8a		txa				txa 								; stack pos in A
.2973	20 15 18	jsr $1815		jsr	extensionHandler
.2976	aa		tax				tax 								; restore stack
.2977	4c ea 28	jmp $28ea			jmp 	_ELHasTerm
.297a					UnaryParenthesis:
.297a	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.297c	20 86 28	jsr $2886			jsr 	EvaluateLevel
.297f	20 14 31	jsr $3114			jsr 	CheckRightParen 			; check for )
.2982	60		rts				rts
.2983					ELShiftByteIn:
.2983	48		pha				pha 								; save bits to shift in.
.2984	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2986	48		pha				pha
.2987	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2989	95 68		sta $68,x			sta 	esInt3,x
.298b	b5 58		lda $58,x			lda 	esInt1,x
.298d	95 60		sta $60,x			sta 	esInt2,x
.298f	b5 50		lda $50,x			lda 	esInt0,x
.2991	95 58		sta $58,x			sta 	esInt1,x
.2993	a9 00		lda #$00			lda 	#0
.2995	95 50		sta $50,x			sta 	esInt0,x
.2997	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2998	29 03		and #$03			and 	#3 							; only want lower 2 bits
.299a	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.299c					_ELShiftLoop:
.299c	4a		lsr a				lsr 	a
.299d	76 68		ror $68,x			ror 	esInt3,x
.299f	76 60		ror $60,x			ror 	esInt2,x
.29a1	76 58		ror $58,x			ror 	esInt1,x
.29a3	76 50		ror $50,x			ror 	esInt0,x
.29a5	c9 01		cmp #$01			cmp 	#1
.29a7	d0 f3		bne $299c			bne 	_ELShiftLoop
.29a9	68		pla				pla 								; get original 6 bit value and OR in.
.29aa	29 3f		and #$3f			and 	#$3F
.29ac	15 50		ora $50,x			ora 	esInt0,x
.29ae	95 50		sta $50,x			sta 	esInt0,x
.29b0	60		rts				rts
.29b1					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>29b1	01					.byte	$01			; $86 and
>29b2	01					.byte	$01			; $87 or
>29b3	01					.byte	$01			; $88 xor
>29b4	02					.byte	$02			; $89 >=
>29b5	02					.byte	$02			; $8a <=
>29b6	02					.byte	$02			; $8b >
>29b7	02					.byte	$02			; $8c <
>29b8	02					.byte	$02			; $8d =
>29b9	02					.byte	$02			; $8e <>
>29ba	03					.byte	$03			; $8f +
>29bb	03					.byte	$03			; $90 -
>29bc	04					.byte	$04			; $91 >>
>29bd	04					.byte	$04			; $92 <<
>29be	04					.byte	$04			; $93 *
>29bf	04					.byte	$04			; $94 /
>29c0	04					.byte	$04			; $95 mod
>29c1	05					.byte	$05			; $96 ^
>29c2	06					.byte	$06			; $97 !
>29c3	06					.byte	$06			; $98 ?
>29c4	82					.byte	$82			; $99 repeat
>29c5	82					.byte	$82			; $9a while
>29c6	82					.byte	$82			; $9b for
>29c7	82					.byte	$82			; $9c if
>29c8	82					.byte	$82			; $9d defproc
>29c9	80					.byte	$80			; $9e until
>29ca	80					.byte	$80			; $9f wend
>29cb	80					.byte	$80			; $a0 next
>29cc	80					.byte	$80			; $a1 then
>29cd	80					.byte	$80			; $a2 endif
>29ce	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.29cf					EvaluateTerm:
.29cf	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.29d1	20 86 28	jsr $2886			jsr 	EvaluateLevel
.29d4	20 35 28	jsr $2835			jsr 	DereferenceOne
.29d7	60		rts				rts
.29d8					EvaluateNumericTerm:
.29d8	20 cf 29	jsr $29cf			jsr 	EvaluateTerm
.29db	b5 48		lda $48,x			lda 	esType,x
.29dd	0a		asl a				asl 	a 							; see if it's a string.
.29de	30 09		bmi $29e9			bmi 	ENTType
.29e0	60		rts				rts
.29e1					EvaluateIntegerTerm:
.29e1	20 cf 29	jsr $29cf			jsr 	EvaluateTerm
.29e4	b5 48		lda $48,x			lda 	esType,x
.29e6	d0 01		bne $29e9			bne 	ENTType
.29e8	60		rts				rts
.29e9					ENTType:
.29e9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.29eb	20 e0 14	jsr $14e0		jsr	errorHandler
.29ee					EvaluateRoot:
.29ee	a2 00		ldx #$00			ldx 	#0
.29f0					Evaluate:
.29f0	a9 00		lda #$00			lda 	#0
.29f2	20 86 28	jsr $2886			jsr 	EvaluateLevel
.29f5	20 35 28	jsr $2835			jsr 	DereferenceOne
.29f8	60		rts				rts
.29f9					EvaluateNumeric:
.29f9	20 f0 29	jsr $29f0			jsr 	Evaluate
.29fc	b5 48		lda $48,x			lda 	esType,x
.29fe	0a		asl a				asl 	a 							; see if it's a string.
.29ff	30 e8		bmi $29e9			bmi 	ENTType
.2a01	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2a02	4a		lsr a				lsr 	a
.2a03	60		rts				rts
.2a04					EvaluateString:
.2a04	20 f0 29	jsr $29f0			jsr 	Evaluate
.2a07	b5 48		lda $48,x			lda 	esType,x
.2a09	0a		asl a				asl 	a 							; see if it's a string.
.2a0a	10 dd		bpl $29e9			bpl 	ENTType
.2a0c	60		rts				rts
.2a0d					EvaluateRootInteger:
.2a0d	a2 00		ldx #$00			ldx 	#0
.2a0f					EvaluateInteger:
.2a0f	20 f0 29	jsr $29f0			jsr 	Evaluate
.2a12	b5 48		lda $48,x			lda 	esType,x
.2a14	d0 d3		bne $29e9			bne 	ENTType
.2a16	60		rts				rts
.2a17					EvaluateSmallInteger:
.2a17	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger
.2a1a	b5 58		lda $58,x			lda 	esInt1,x
.2a1c	15 60		ora $60,x			ora 	esInt2,x
.2a1e	15 68		ora $68,x			ora 	esInt3,x
.2a20	d0 03		bne $2a25			bne 	_ESIValue
.2a22	b5 50		lda $50,x			lda 	esInt0,x
.2a24	60		rts				rts
.2a25					_ESIValue:
.2a25	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2a27	20 e0 14	jsr $14e0		jsr	errorHandler
.2a2a					LinkEvaluate:
.2a2a	aa		tax				tax
.2a2b	20 f0 29	jsr $29f0			jsr 	Evaluate
.2a2e	8a		txa				txa
.2a2f	60		rts				rts
.2a30					LinkEvaluateTerm:
.2a30	aa		tax				tax
.2a31	20 cf 29	jsr $29cf			jsr 	EvaluateTerm
.2a34	8a		txa				txa
.2a35	60		rts				rts
.2a36					LinkEvaluateInteger:
.2a36	aa		tax				tax
.2a37	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger
.2a3a	8a		txa				txa
.2a3b	60		rts				rts
.2a3c					LinkEvaluateSmallInt:
.2a3c	aa		tax				tax
.2a3d	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger
.2a40	8a		txa				txa
.2a41	60		rts				rts
.2a42					EvaluateReference:
.2a42	ad c2 29	lda $29c2			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2a45	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2a46	e9 01		sbc #$01			sbc 	#1
.2a48	20 86 28	jsr $2886			jsr 	EvaluateLevel
.2a4b	b5 48		lda $48,x			lda 	esType,x
.2a4d	10 01		bpl $2a50			bpl 	_ERFail
.2a4f	60		rts				rts
.2a50					_ERFail:
.2a50	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2a52	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2a55					Event_Str:
.2a55	20 f9 29	jsr $29f9			jsr 	EvaluateNumeric 			; get a number.
.2a58	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2a5a	d0 13		bne $2a6f			bne 	_ESFloat
.2a5c	20 b2 2a	jsr $2ab2			jsr 	ConvertGetBase 				; get base, or default.
.2a5f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2a61	85 2a		sta $2a				sta 	temp0
.2a63	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2a65	85 2b		sta $2b				sta 	1+(temp0)
.2a67	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2a69	20 f7 2f	jsr $2ff7			jsr 	MInt32ToString 				; convert to string.
.2a6c	4c 7c 2a	jmp $2a7c			jmp 	_ESCloneExit 				; clone and exit.
.2a6f					_ESFloat:
.2a6f	20 14 31	jsr $3114			jsr 	CheckRightParen 			; check closing )
.2a72	20 07 1e	jsr $1e07			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2a75	8a		txa				txa
.2a76	a2 14		ldx #$14		ldx	#20
.2a78	20 24 19	jsr $1924		jsr	floatingpointHandler
.2a7b	aa		tax				tax
.2a7c					_ESCloneExit:
.2a7c	8a		txa				txa
.2a7d	a2 02		ldx #$02		ldx	#2
.2a7f	20 45 34	jsr $3445		jsr	stringHandler
.2a82	aa		tax				tax
.2a83	60		rts				rts
.2a84					UnaryVal:
.2a84	38		sec				sec 								; Carry set to return value
.2a85	b0 01		bcs $2a88			bcs 	ValueMain
.2a87					UnaryIsVal:
.2a87	18		clc				clc									; Carry clear to return legitimacy
.2a88					ValueMain:
.2a88	08		php				php 								; save results (CS is value, CC is validation)
.2a89	20 04 2a	jsr $2a04			jsr 	EvaluateString
.2a8c	20 b2 2a	jsr $2ab2			jsr 	ConvertGetBase 				; get base, if any.
.2a8f	98		tya				tya
.2a90	48		pha				pha
.2a91	20 07 1e	jsr $1e07			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2a94	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2a96	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2a98	20 0f 2f	jsr $2f0f			jsr 	MInt32FromString 			; convert it back from a string.
.2a9b	b0 0c		bcs $2aa9			bcs 	_VMSuccess 					; successfully converted.
.2a9d	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2a9f	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2aa1	f0 00		beq $2aa3			beq 	_VMFailed 	 				; so we failed.
.2aa3					_VMFailed:
.2aa3	68		pla				pla
.2aa4	a8		tay				tay
.2aa5	28		plp				plp
.2aa6	4c a1 30	jmp $30a1			jmp 	MInt32False 				; return 0 whatever.
.2aa9					_VMSuccess:
.2aa9	68		pla				pla
.2aaa	a8		tay				tay
.2aab	28		plp				plp 								; if CS the it was val() so we want the value.
.2aac	b0 03		bcs $2ab1			bcs 	_VMExit
.2aae	4c 9d 30	jmp $309d			jmp 	MInt32True 					; otherwise return true as successful.
.2ab1					_VMExit:
.2ab1	60		rts				rts
.2ab2					ConvertGetBase:
.2ab2	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2ab4	95 51		sta $51,x			sta 	esInt0+1,x
.2ab6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2ab8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2aba	d0 0e		bne $2aca			bne 	_CGBDone 					; not found, should be )
.2abc	e8		inx				inx 								; next level
.2abd	c8		iny				iny 								; skip comma.
.2abe	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger		; evaluate the base.
.2ac1	ca		dex				dex
.2ac2	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2ac4	90 08		bcc $2ace			bcc 	_CGBValue 					; (it should work as high as 37)
.2ac6	c9 11		cmp #$11			cmp 	#17
.2ac8	b0 04		bcs $2ace			bcs 	_CGBValue
.2aca					_CGBDone:
.2aca	20 14 31	jsr $3114			jsr 	CheckRightParen
.2acd	60		rts				rts
.2ace					_CGBValue:
.2ace	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ad0	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2ad3					EventFunction:
.2ad3	20 42 2a	jsr $2a42			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2ad6	b5 48		lda $48,x			lda 	esType,x
.2ad8	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2ada	d0 5b		bne $2b37			bne 	_EFType
.2adc	20 21 31	jsr $3121			jsr 	CheckComma
.2adf	e8		inx				inx
.2ae0	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2ae3	20 14 31	jsr $3114			jsr 	CheckRightParen 			; finish off with the right bracket
.2ae6	ca		dex				dex
.2ae7	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2ae9	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2aeb	15 60		ora $60,x			ora 	esInt2,x
.2aed	15 68		ora $68,x			ora 	esInt3,x
.2aef	d0 41		bne $2b32			bne 	_EFValue
.2af1	98		tya				tya
.2af2	48		pha				pha
.2af3	8a		txa				txa
.2af4	48		pha				pha
.2af5	a2 1c		ldx #$1c		ldx	#28
.2af7	20 bf 14	jsr $14bf		jsr	deviceHandler
.2afa	84 2d		sty $2d				sty 	temp1+1
.2afc	85 2c		sta $2c				sta 	temp1
.2afe	68		pla				pla
.2aff	aa		tax				tax
.2b00	20 07 1e	jsr $1e07			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2b03	a0 03		ldy #$03			ldy 	#3							; if -ve
.2b05	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b07	30 23		bmi $2b2c			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2b09	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2b0b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b0d	c8		iny				iny
.2b0e	11 2a		ora ($2a),y			ora 	(temp0),y
.2b10	f0 17		beq $2b29			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2b12	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2b14	38		sec				sec
.2b15	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b17	e5 2c		sbc $2c				sbc 	temp1
.2b19	c8		iny				iny
.2b1a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b1c	e5 2d		sbc $2d				sbc 	temp1+1
.2b1e	10 0c		bpl $2b2c			bpl 	_EFFail 					; if trigger >= timer then return False
.2b20	20 3c 2b	jsr $2b3c			jsr 	SetEventTimer 				; reset the timer for next time.
.2b23	20 9d 30	jsr $309d			jsr	 	MInt32True 					; and treutn true as fired.
.2b26	68		pla				pla
.2b27	a8		tay				tay
.2b28	60		rts				rts
.2b29					_EFInitialise:
.2b29	20 3c 2b	jsr $2b3c			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2b2c					_EFFail:
.2b2c	68		pla				pla
.2b2d	a8		tay				tay
.2b2e	20 a1 30	jsr $30a1			jsr 	MInt32False
.2b31	60		rts				rts
.2b32					_EFValue:
.2b32	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2b34	20 e0 14	jsr $14e0		jsr	errorHandler
.2b37					_EFType:
.2b37	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b39	20 e0 14	jsr $14e0		jsr	errorHandler
.2b3c					SetEventTimer:
.2b3c	a0 00		ldy #$00			ldy 	#0
.2b3e	18		clc				clc
.2b3f	a5 2c		lda $2c				lda 	temp1
.2b41	75 51		adc $51,x			adc 	esInt0+1,x
.2b43	91 2a		sta ($2a),y			sta		(temp0),y
.2b45	c8		iny				iny
.2b46	a5 2d		lda $2d				lda 	temp1+1
.2b48	75 59		adc $59,x			adc 	esInt1+1,x
.2b4a	91 2a		sta ($2a),y			sta		(temp0),y
.2b4c	88		dey				dey
.2b4d	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2b4f	d0 04		bne $2b55			bne 	_SETExit 					; zero means initialise.....
.2b51	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2b53	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2b55					_SETExit:
.2b55	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2b56					UnaryLen:
.2b56	20 64 2b	jsr $2b64			jsr 	ULStart
.2b59					ULFinish:
.2b59	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2b5b	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2b5d	20 b0 30	jsr $30b0			jsr 	MInt32Set8Bit 				; write it out.
.2b60	20 14 31	jsr $3114			jsr 	CheckRightParen
.2b63	60		rts				rts
.2b64	20 04 2a	jsr $2a04	ULStart:jsr 	EvaluateString
.2b67	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2b69	85 2a		sta $2a				sta 	temp0
.2b6b	b5 58		lda $58,x			lda 	esInt1,x
.2b6d	85 2b		sta $2b				sta 	temp0+1
.2b6f	84 32		sty $32				sty 	tempShort 					; get length
.2b71	a0 00		ldy #$00			ldy 	#0
.2b73	60		rts				rts
.2b74					UnaryAsc:
.2b74	20 64 2b	jsr $2b64			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2b77	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2b79	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2b7a	c9 00		cmp #$00			cmp 	#0
.2b7c	d0 db		bne $2b59			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2b7e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2b80	20 e0 14	jsr $14e0		jsr	errorHandler
.2b83					UnaryAbs:
.2b83	20 f9 29	jsr $29f9			jsr 	EvaluateNumeric 			; some numeric value
.2b86	b0 07		bcs $2b8f			bcs 	_UAFloat 					; CS then float, so use that function
.2b88	20 56 30	jsr $3056			jsr 	MInt32Absolute 				; int version
.2b8b	20 14 31	jsr $3114			jsr 	CheckRightParen
.2b8e	60		rts				rts
.2b8f					_UAFloat:
.2b8f	8a		txa				txa 								; float version
.2b90	a2 00		ldx #$00		ldx	#0
.2b92	20 24 19	jsr $1924		jsr	floatingpointHandler
.2b95	aa		tax				tax
.2b96	20 14 31	jsr $3114			jsr 	CheckRightParen
.2b99	60		rts				rts
.2b9a					UnarySgn:
.2b9a	20 f9 29	jsr $29f9			jsr 	EvaluateNumeric 			; same as above but sign of value
.2b9d	b0 07		bcs $2ba6			bcs 	_USFloat
.2b9f	20 8e 30	jsr $308e			jsr 	MInt32Sign
.2ba2	20 14 31	jsr $3114			jsr 	CheckRightParen
.2ba5	60		rts				rts
.2ba6					_USFloat:
.2ba6	8a		txa				txa
.2ba7	a2 0e		ldx #$0e		ldx	#14
.2ba9	20 24 19	jsr $1924		jsr	floatingpointHandler
.2bac	aa		tax				tax
.2bad	20 14 31	jsr $3114			jsr 	CheckRightParen
.2bb0	60		rts				rts
.2bb1					UnaryPeek:
.2bb1	20 dd 2b	jsr $2bdd			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2bb4	4c d1 2b	jmp $2bd1			jmp 	PDLByte0
.2bb7					UnaryDeek:
.2bb7	20 dd 2b	jsr $2bdd			jsr 	PDLCode
.2bba	4c cb 2b	jmp $2bcb			jmp 	PDLByte1
.2bbd					UnaryLeek:
.2bbd	20 dd 2b	jsr $2bdd			jsr 	PDLCode
.2bc0	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2bc2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bc4	95 68		sta $68,x			sta 	esInt3,x
.2bc6	88		dey				dey
.2bc7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bc9	95 60		sta $60,x			sta 	esInt2,x
.2bcb					PDLByte1:
.2bcb	a0 01		ldy #$01			ldy 	#1
.2bcd	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bcf	95 58		sta $58,x			sta 	esInt1,x
.2bd1					PDLByte0:
.2bd1	a0 00		ldy #$00			ldy 	#0
.2bd3	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bd5	95 50		sta $50,x			sta 	esInt0,x
.2bd7	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2bd9	20 14 31	jsr $3114			jsr 	CheckRightParen 			; check right and return
.2bdc	60		rts				rts
.2bdd					PDLCode:
.2bdd	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger 			; some address
.2be0	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2be2	85 2a		sta $2a				sta 	temp0
.2be4	b5 58		lda $58,x			lda 	esInt1,x
.2be6	85 2b		sta $2b				sta 	temp0+1
.2be8	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2bea	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2bec	95 60		sta $60,x			sta 	esInt2,x
.2bee	95 68		sta $68,x			sta 	esInt3,x
.2bf0	84 32		sty $32				sty 	tempShort 					; save Y
.2bf2	60		rts				rts
.2bf3					Unary_Random:
.2bf3	20 d1 30	jsr $30d1			jsr 	MInt32Random 				; generate random number.
.2bf6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2bf8	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2bfa	f0 08		beq $2c04			beq 	_URExit
.2bfc	e8		inx				inx 								; load range 0..r-1 into +1
.2bfd	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger
.2c00	ca		dex				dex
.2c01	20 f4 2e	jsr $2ef4			jsr 	MInt32Modulus 				; calculate random % modulus
.2c04					_URExit:
.2c04	20 14 31	jsr $3114			jsr 	CheckRightParen 			; check right and return
.2c07	60		rts				rts
.2c08					Unary_Min:
.2c08	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2c0a	d0 02		bne $2c0e			bne 	UnaryMBody
.2c0c					Unary_Max:
.2c0c	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2c0e					UnaryMBody:
.2c0e	48		pha				pha 								; save comparator on stack, shows min or max
.2c0f	20 f0 29	jsr $29f0			jsr 	Evaluate 					; get the first thing to check
.2c12					_UnaryMLoop:
.2c12	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2c14	c8		iny				iny
.2c15	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2c17	f0 09		beq $2c22			beq 	_UnaryMExit
.2c19	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2c1b	f0 07		beq $2c24			beq 	_UnaryMCompare
.2c1d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2c1f	20 e0 14	jsr $14e0		jsr	errorHandler
.2c22					_UnaryMExit:
.2c22	68		pla				pla 								; done so throw comparator and return.
.2c23	60		rts				rts
.2c24					_UnaryMCompare:
.2c24	e8		inx				inx 								; get the 2nd thing to evaluate
.2c25	20 f0 29	jsr $29f0			jsr 	Evaluate
.2c28	ca		dex				dex
.2c29	20 b6 27	jsr $27b6			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2c2c	85 32		sta $32				sta 	tempShort 					; save result
.2c2e	68		pla				pla 								; get what we need
.2c2f	48		pha				pha
.2c30	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2c32	d0 de		bne $2c12			bne 	_UnaryMLoop 				; no, try another value.
.2c34	20 a1 30	jsr $30a1			jsr 	MInt32False 				; promote 2nd to 1st.
.2c37	20 85 2f	jsr $2f85			jsr 	MInt32Add
.2c3a	4c 12 2c	jmp $2c12			jmp 	_UnaryMLoop
.2c3d					Unary_Page:
.2c3d	20 a1 30	jsr $30a1			jsr 	MInt32False 				; zero
.2c40	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2c43	95 50		sta $50,x			sta 	esInt0,x
.2c45	ad c9 0a	lda $0ac9			lda 	basePage+1
.2c48	95 58		sta $58,x			sta 	esInt1,x
.2c4a	60		rts				rts
.2c4b					UnaryReference:
.2c4b	a9 0f		lda #$0f			lda 	#15
.2c4d	20 86 28	jsr $2886			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2c50	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2c52	10 05		bpl $2c59			bpl 	UType
.2c54	a9 00		lda #$00			lda 	#0 							; make it an integer
.2c56	95 48		sta $48,x			sta 	esType,x
.2c58	60		rts				rts
.2c59					UType:
.2c59	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c5b	20 e0 14	jsr $14e0		jsr	errorHandler
.2c5e					UnaryHexMarker:
.2c5e	4c e1 29	jmp $29e1			jmp 	EvaluateIntegerTerm
.2c61					UnaryComplement:
.2c61	20 e1 29	jsr $29e1			jsr 	EvaluateIntegerTerm
.2c64	20 75 30	jsr $3075			jsr 	MInt32Not
.2c67	60		rts				rts
.2c68					UnaryIntToFloat:
.2c68	20 f9 29	jsr $29f9			jsr 	EvaluateNumeric				; some number
.2c6b	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2c6d	d0 0b		bne $2c7a			bne 	_UIFExit
.2c6f	8a		txa				txa 								; convert and set type
.2c70	a2 1a		ldx #$1a		ldx	#26
.2c72	20 24 19	jsr $1924		jsr	floatingpointHandler
.2c75	aa		tax				tax
.2c76	a9 01		lda #$01			lda 	#1
.2c78	95 48		sta $48,x			sta 	esType,x
.2c7a					_UIFExit:
.2c7a	60		rts				rts
.2c7b					UnaryFloatToInt:
.2c7b	20 f9 29	jsr $29f9			jsr 	EvaluateNumeric 			; the number
.2c7e	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2c80	f0 0b		beq $2c8d			beq 	_UFIExit
.2c82	8a		txa				txa 								; convert to int
.2c83	a2 12		ldx #$12		ldx	#18
.2c85	20 24 19	jsr $1924		jsr	floatingpointHandler
.2c88	aa		tax				tax
.2c89	a9 00		lda #$00			lda 	#0 							; set type
.2c8b	95 48		sta $48,x			sta 	esType,x
.2c8d					_UFIExit:
.2c8d	60		rts				rts
.2c8e					UnaryAlloc:
.2c8e	e8		inx				inx 								; evaluate memory required
.2c8f	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger
.2c92	20 14 31	jsr $3114			jsr 	CheckRightParen
.2c95	ca		dex				dex
.2c96	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2c98	15 69		ora $69,x			ora 	esInt3+1,x
.2c9a	d0 1d		bne $2cb9			bne 	_UABadValue
.2c9c	20 a1 30	jsr $30a1			jsr 	MInt32False					; zero return.
.2c9f	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2ca1	95 58		sta $58,x			sta 	esInt1,x
.2ca3	a5 35		lda $35				lda 	lowMemory
.2ca5	95 50		sta $50,x			sta 	esInt0,x
.2ca7	18		clc				clc 								; add alloc required.
.2ca8	75 51		adc $51,x			adc 	esInt0+1,x
.2caa	85 35		sta $35				sta 	lowMemory
.2cac	a5 36		lda $36				lda 	lowMemory+1
.2cae	75 59		adc $59,x			adc 	esInt1+1,x
.2cb0	85 36		sta $36				sta 	lowMemory+1
.2cb2	b0 05		bcs $2cb9			bcs		_UABadValue 				; overflow definitely bad.
.2cb4	c5 34		cmp $34				cmp 	highMemory+1
.2cb6	b0 01		bcs $2cb9			bcs 	_UABadValue 				; out of memory bad.
.2cb8	60		rts				rts
.2cb9					_UABadValue:
.2cb9	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2cbb	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.2cbe					UnaryTimer:
.2cbe	20 14 31	jsr $3114			jsr 	CheckRightParen 			; no parameters
.2cc1	98		tya				tya
.2cc2	48		pha				pha
.2cc3	20 c8 30	jsr $30c8			jsr 	MInt32Zero 					; zero result
.2cc6	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2cc8	a2 1c		ldx #$1c		ldx	#28
.2cca	20 bf 14	jsr $14bf		jsr	deviceHandler
.2ccd	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2ccf	95 50		sta $50,x			sta 	esInt0,x
.2cd1	98		tya				tya
.2cd2	95 58		sta $58,x			sta 	esInt1,x
.2cd4	68		pla				pla
.2cd5	a8		tay				tay
.2cd6	60		rts				rts
.2cd7					UnaryInkey:
.2cd7	20 14 31	jsr $3114			jsr 	CheckRightParen
.2cda	86 2a		stx $2a				stx 	temp0
.2cdc	a2 0a		ldx #$0a		ldx	#10
.2cde	20 bf 14	jsr $14bf		jsr	deviceHandler
.2ce1	a6 2a		ldx $2a				ldx 	temp0
.2ce3	20 b0 30	jsr $30b0			jsr 	MInt32Set8Bit
.2ce6	60		rts				rts
.2ce7					UnaryGet:
.2ce7	20 14 31	jsr $3114			jsr 	CheckRightParen
.2cea	86 2a		stx $2a				stx 	temp0
.2cec					_UGLoop:
.2cec	a2 00		ldx #$00		ldx	#0
.2cee	20 bf 14	jsr $14bf		jsr	deviceHandler
.2cf1	a2 0a		ldx #$0a		ldx	#10
.2cf3	20 bf 14	jsr $14bf		jsr	deviceHandler
.2cf6	c9 00		cmp #$00			cmp 	#0
.2cf8	f0 f2		beq $2cec			beq 	_UGLoop
.2cfa	a6 2a		ldx $2a				ldx 	temp0
.2cfc	20 b0 30	jsr $30b0			jsr 	MInt32Set8Bit
.2cff	60		rts				rts
.2d00					UnaryGetString:
.2d00	20 e7 2c	jsr $2ce7			jsr 	UnaryGet
.2d03					UGSDoChr:
.2d03	4c 54 2d	jmp $2d54			jmp 	ChrCode
.2d06					UnaryInkeyString:
.2d06	20 d7 2c	jsr $2cd7			jsr 	UnaryInkey
.2d09	b5 50		lda $50,x			lda 	esInt0,x
.2d0b	d0 f6		bne $2d03			bne 	UGSDoChr
.2d0d	8a		txa				txa
.2d0e	a2 06		ldx #$06		ldx	#6
.2d10	20 45 34	jsr $3445		jsr	stringHandler
.2d13	aa		tax				tax
.2d14	60		rts				rts
.2d15					UnarySys:
.2d15	20 0f 2a	jsr $2a0f			jsr 	EvaluateInteger 				; get the address
.2d18	20 14 31	jsr $3114			jsr 	CheckRightParen
.2d1b	20 07 1e	jsr $1e07			jsr 	TOSToTemp0 						; copy call address to temp0
.2d1e	8a		txa				txa
.2d1f	48		pha				pha
.2d20	98		tya				tya
.2d21	48		pha				pha
.2d22	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2d25	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2d28	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2d2b	20 3a 2d	jsr $2d3a			jsr 	_CallTemp0
.2d2e	85 32		sta $32				sta 	tempShort 						; restore YX
.2d30	68		pla				pla
.2d31	a8		tay				tay
.2d32	68		pla				pla
.2d33	aa		tax				tax
.2d34	a5 32		lda $32				lda 	tempShort
.2d36	20 b0 30	jsr $30b0			jsr 	MInt32Set8Bit 					; return result.
.2d39	60		rts				rts
.2d3a					_CallTemp0:
.2d3a	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2d3d					UnaryMem:
.2d3d	20 a1 30	jsr $30a1			jsr 	MInt32False 					; set to false (e.g. 0)
.2d40	38		sec				sec
.2d41	a5 33		lda $33				lda 	highMemory 						; calculate value
.2d43	e5 35		sbc $35				sbc 	lowMemory
.2d45	95 50		sta $50,x			sta 	esInt0,x
.2d47	a5 34		lda $34				lda 	highMemory+1
.2d49	e5 36		sbc $36				sbc 	lowMemory+1
.2d4b	95 58		sta $58,x			sta 	esInt1,x
.2d4d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.2d4e					ExecChr:
.2d4e	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger		; character number 0-255
.2d51	20 14 31	jsr $3114			jsr 	CheckRightParen				; right bracket
.2d54					ChrCode:
.2d54	98		tya				tya
.2d55	48		pha				pha
.2d56	8a		txa				txa 								; A = stack
.2d57	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.2d59	a2 00		ldx #$00		ldx	#0
.2d5b	20 45 34	jsr $3445		jsr	stringHandler
.2d5e	aa		tax				tax 								; X = stack
.2d5f	68		pla				pla
.2d60	a8		tay				tay
.2d61	60		rts				rts
.2d62					ExecLower:
.2d62	38		sec				sec 								; set carry is lower
.2d63	b0 01		bcs $2d66			bcs 	ExecUpperLower
.2d65					ExecUpper:
.2d65	18		clc				clc 								; clear carry is upper
.2d66					ExecUpperLower:
.2d66	08		php				php 								; save carry
.2d67	20 04 2a	jsr $2a04			jsr 	EvaluateString 				; string to stack,X
.2d6a	20 14 31	jsr $3114			jsr 	CheckRightParen 			; check closing right bracket.
.2d6d	28		plp				plp 								; restore carry, save Y
.2d6e	98		tya				tya
.2d6f	48		pha				pha
.2d70	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2d72	2a		rol a				rol 	a
.2d73	a8		tay				tay 								; now in Y
.2d74	8a		txa				txa 								; do the substring and exit.
.2d75	a2 0a		ldx #$0a		ldx	#10
.2d77	20 45 34	jsr $3445		jsr	stringHandler
.2d7a	aa		tax				tax
.2d7b	68		pla				pla
.2d7c	a8		tay				tay
.2d7d	60		rts				rts
.2d7e					ExecLeft:
.2d7e	20 04 2a	jsr $2a04			jsr 	EvaluateString 				; string to stack,X
.2d81	20 21 31	jsr $3121			jsr 	CheckComma
.2d84	e8		inx				inx
.2d85	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2d87	20 b0 30	jsr $30b0			jsr 	MInt32Set8Bit
.2d8a	e8		inx				inx
.2d8b	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2d8e					ExecSubstring:
.2d8e	ca		dex				dex 								; fix up X
.2d8f	ca		dex				dex
.2d90	20 14 31	jsr $3114			jsr 	CheckRightParen 			; check closing right bracket.
.2d93	8a		txa				txa 								; do the substring and exit.
.2d94	a2 0c		ldx #$0c		ldx	#12
.2d96	20 45 34	jsr $3445		jsr	stringHandler
.2d99	aa		tax				tax
.2d9a	60		rts				rts
.2d9b					ExecMid:
.2d9b	20 04 2a	jsr $2a04			jsr 	EvaluateString 				; string to stack,X
.2d9e	20 21 31	jsr $3121			jsr 	CheckComma
.2da1	e8		inx				inx
.2da2	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2da5	c9 00		cmp #$00			cmp 	#0
.2da7	f0 15		beq $2dbe			beq 	_EMValue
.2da9	e8		inx				inx
.2daa	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2dac	20 b0 30	jsr $30b0			jsr 	MInt32Set8Bit
.2daf	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2db1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2db3	f0 d9		beq $2d8e			beq 	ExecSubString
.2db5	20 21 31	jsr $3121			jsr 	CheckComma
.2db8	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2dbb	4c 8e 2d	jmp $2d8e			jmp 	ExecSubString
.2dbe					_EMValue:
.2dbe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2dc0	20 e0 14	jsr $14e0		jsr	errorHandler
.2dc3					ExecRight:
.2dc3	20 04 2a	jsr $2a04			jsr 	EvaluateString 				; string to stack,X
.2dc6	20 21 31	jsr $3121			jsr 	CheckComma
.2dc9	e8		inx				inx
.2dca	20 17 2a	jsr $2a17			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2dcd	ca		dex				dex
.2dce	98		tya				tya
.2dcf	48		pha				pha
.2dd0	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2dd2	85 2a		sta $2a				sta 	temp0
.2dd4	b5 58		lda $58,x			lda 	esInt1,x
.2dd6	85 2b		sta $2b				sta 	temp0+1
.2dd8	a0 00		ldy #$00			ldy 	#0 							; point to length
.2dda	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2ddc	18		clc				clc 								; add 1.
.2ddd	69 01		adc #$01			adc 	#1
.2ddf	38		sec				sec
.2de0	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.2de2	f0 02		beq $2de6			beq		_ERMake1 					; if zero, make it 1.
.2de4	b0 02		bcs $2de8			bcs		_EROkay
.2de6					_ERMake1:
.2de6	a9 01		lda #$01			lda 	#1 							; start position.
.2de8					_EROkay:
.2de8	e8		inx				inx 								; set start pos.
.2de9	95 50		sta $50,x			sta 	esInt0,x
.2deb	e8		inx				inx
.2dec	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2dee	20 b0 30	jsr $30b0			jsr 	MInt32Set8Bit
.2df1	68		pla				pla
.2df2	a8		tay				tay
.2df3	4c 8e 2d	jmp $2d8e			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2df6					MInt32And:
.2df6	b5 50		lda $50,x			lda 	esInt0,x
.2df8	35 51		and $51,x			and 	esInt0+1,x
.2dfa	95 50		sta $50,x			sta 	esInt0,x
.2dfc	b5 58		lda $58,x			lda 	esInt1,x
.2dfe	35 59		and $59,x			and 	esInt1+1,x
.2e00	95 58		sta $58,x			sta 	esInt1,x
.2e02	b5 60		lda $60,x			lda 	esInt2,x
.2e04	35 61		and $61,x			and 	esInt2+1,x
.2e06	95 60		sta $60,x			sta 	esInt2,x
.2e08	b5 68		lda $68,x			lda 	esInt3,x
.2e0a	35 69		and $69,x			and 	esInt3+1,x
.2e0c	95 68		sta $68,x			sta 	esInt3,x
.2e0e	60		rts				rts
.2e0f					MInt32Or:
.2e0f	b5 50		lda $50,x			lda 	esInt0,x
.2e11	15 51		ora $51,x			ora 	esInt0+1,x
.2e13	95 50		sta $50,x			sta 	esInt0,x
.2e15	b5 58		lda $58,x			lda 	esInt1,x
.2e17	15 59		ora $59,x			ora 	esInt1+1,x
.2e19	95 58		sta $58,x			sta 	esInt1,x
.2e1b	b5 60		lda $60,x			lda 	esInt2,x
.2e1d	15 61		ora $61,x			ora 	esInt2+1,x
.2e1f	95 60		sta $60,x			sta 	esInt2,x
.2e21	b5 68		lda $68,x			lda 	esInt3,x
.2e23	15 69		ora $69,x			ora 	esInt3+1,x
.2e25	95 68		sta $68,x			sta 	esInt3,x
.2e27	60		rts				rts
.2e28					MInt32Xor:
.2e28	b5 50		lda $50,x			lda 	esInt0,x
.2e2a	55 51		eor $51,x			eor 	esInt0+1,x
.2e2c	95 50		sta $50,x			sta 	esInt0,x
.2e2e	b5 58		lda $58,x			lda 	esInt1,x
.2e30	55 59		eor $59,x			eor 	esInt1+1,x
.2e32	95 58		sta $58,x			sta 	esInt1,x
.2e34	b5 60		lda $60,x			lda 	esInt2,x
.2e36	55 61		eor $61,x			eor 	esInt2+1,x
.2e38	95 60		sta $60,x			sta 	esInt2,x
.2e3a	b5 68		lda $68,x			lda 	esInt3,x
.2e3c	55 69		eor $69,x			eor 	esInt3+1,x
.2e3e	95 68		sta $68,x			sta 	esInt3,x
.2e40	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2e41					MInt32Compare:
.2e41	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.2e43	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2e45	d0 13		bne $2e5a			bne 	MInt32Compare2
.2e47	b5 58		lda $58,x			lda 	esInt1,x
.2e49	d5 59		cmp $59,x			cmp 	esInt1+1,x
.2e4b	d0 0d		bne $2e5a			bne 	MInt32Compare2
.2e4d	b5 60		lda $60,x			lda 	esInt2,x
.2e4f	d5 61		cmp $61,x			cmp 	esInt2+1,x
.2e51	d0 07		bne $2e5a			bne 	MInt32Compare2
.2e53	b5 68		lda $68,x			lda 	esInt3,x
.2e55	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2e57	d0 01		bne $2e5a			bne 	MInt32Compare2
.2e59	60		rts				rts
.2e5a					MInt32Compare2:
.2e5a	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2e5c	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2e5e	b5 58		lda $58,x			lda		esInt1,x
.2e60	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2e62	b5 60		lda $60,x			lda		esInt2,x
.2e64	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2e66	b5 68		lda $68,x			lda		esInt3,x
.2e68	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2e6a	50 02		bvc $2e6e			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2e6c	49 80		eor #$80			eor 	#$80
.2e6e					_I32LNoOverflow
.2e6e	30 03		bmi $2e73			bmi 	MInt32CLess					; if -ve then return $FF
.2e70	a9 01		lda #$01			lda 	#$01						; else return $01
.2e72	60		rts				rts
.2e73					MInt32CLess:
.2e73	a9 ff		lda #$ff			lda 	#$FF
.2e75	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2e76					MInt32SDivide:
.2e76	98		tya				tya  								; save Y, which is the count of negations
.2e77	48		pha				pha
.2e78	a0 00		ldy #$00			ldy 	#0 							; zero count
.2e7a	20 92 2e	jsr $2e92			jsr 	_MInt32SRemSign 			; unsign TOS
.2e7d	e8		inx				inx 								; unsign TOS+1
.2e7e	20 92 2e	jsr $2e92			jsr 	_MInt32SRemSign
.2e81	ca		dex				dex
.2e82	98		tya				tya 								; save sign count on stack
.2e83	48		pha				pha
.2e84	20 9b 2e	jsr $2e9b			jsr 	MInt32UDivide 				; unsigned division
.2e87	68		pla				pla 								; get sign count back
.2e88	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2e8a	f0 03		beq $2e8f			beq 	_I32SNoNeg
.2e8c	20 5b 30	jsr $305b			jsr 	MInt32Negate
.2e8f					_I32SNoNeg:
.2e8f	68		pla				pla 								; restoe Y and exit
.2e90	a8		tay				tay
.2e91	60		rts				rts
.2e92					_MInt32SRemSign:
.2e92	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.2e94	10 04		bpl $2e9a			bpl 	_MInt32SRSExit
.2e96	c8		iny				iny 								; increment the sign count
.2e97	20 5b 30	jsr $305b			jsr 	MInt32Negate 				; negate the value.
.2e9a					_MInt32SRSExit:
.2e9a	60		rts				rts
.2e9b					MInt32UDivide:
.2e9b	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.2e9d	15 59		ora $59,x			ora 	esInt1+1,x
.2e9f	15 5a		ora $5a,x			ora 	esInt1+2,x
.2ea1	15 5b		ora $5b,x			ora 	esInt1+3,x
.2ea3	f0 4a		beq $2eef			beq 	_MInt32DZero
.2ea5	e8		inx				inx 								; clear A
.2ea6	e8		inx				inx
.2ea7	20 a1 30	jsr $30a1			jsr 	MInt32False
.2eaa	ca		dex				dex
.2eab	ca		dex				dex
.2eac	98		tya				tya 								; save Y on the stack
.2ead	48		pha				pha
.2eae	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2eb0					_MInt32UDLoop:
.2eb0	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.2eb2	36 58		rol $58,x			rol 	esInt1,x
.2eb4	36 60		rol $60,x			rol 	esInt2,x
.2eb6	36 68		rol $68,x			rol 	esInt3,x
.2eb8	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.2eba	36 5a		rol $5a,x			rol 	esInt1+2,x
.2ebc	36 62		rol $62,x			rol 	esInt2+2,x
.2ebe	36 6a		rol $6a,x			rol 	esInt3+2,x
.2ec0	38		sec				sec 								; calculate A-M saving result on the stack
.2ec1	b5 52		lda $52,x			lda 	esInt0+2,x
.2ec3	f5 51		sbc $51,x			sbc 	esInt0+1,x
.2ec5	48		pha				pha
.2ec6	b5 5a		lda $5a,x			lda 	esInt1+2,x
.2ec8	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2eca	48		pha				pha
.2ecb	b5 62		lda $62,x			lda 	esInt2+2,x
.2ecd	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2ecf	48		pha				pha
.2ed0	b5 6a		lda $6a,x			lda 	esInt3+2,x
.2ed2	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2ed4	90 10		bcc $2ee6			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2ed6	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.2ed8	68		pla				pla
.2ed9	95 62		sta $62,x			sta 	esInt2+2,x
.2edb	68		pla				pla
.2edc	95 5a		sta $5a,x			sta 	esInt1+2,x
.2ede	68		pla				pla
.2edf	95 52		sta $52,x			sta 	esInt0+2,x
.2ee1	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2ee3	4c e9 2e	jmp $2ee9			jmp 	_MInt32Next 					; do the next iteration
.2ee6					_MInt32NoSubtract:
.2ee6	68		pla				pla
.2ee7	68		pla				pla
.2ee8	68		pla				pla
.2ee9					_MInt32Next:
.2ee9	88		dey				dey 								; do this 32 times.
.2eea	d0 c4		bne $2eb0			bne 	_MInt32UDLoop
.2eec	68		pla				pla 								; restore Y and exit
.2eed	a8		tay				tay
.2eee	60		rts				rts
.2eef					_MInt32DZero:
.2eef	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2ef1	20 e0 14	jsr $14e0		jsr	errorHandler
.2ef4					MInt32Modulus:
.2ef4	20 9b 2e	jsr $2e9b			jsr 	MInt32UDivide 				; do the division.
.2ef7	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2ef9	95 68		sta $68,x			sta 	esInt3,x
.2efb	b5 62		lda $62,x			lda 	esInt2+2,x
.2efd	95 60		sta $60,x			sta 	esInt2,x
.2eff	b5 5a		lda $5a,x			lda 	esInt1+2,x
.2f01	95 58		sta $58,x			sta 	esInt1,x
.2f03	b5 52		lda $52,x			lda 	esInt0+2,x
.2f05	95 50		sta $50,x			sta 	esInt0,x
.2f07	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c14					fs32Length:
>0c14							.fill 	1
.2f08					LinkInt32FromString:
.2f08	aa		tax				tax
.2f09	98		tya				tya
.2f0a	20 0f 2f	jsr $2f0f			jsr 	MInt32FromString
.2f0d	8a		txa				txa
.2f0e	60		rts				rts
.2f0f					MInt32FromString:
.2f0f	85 32		sta $32				sta 	tempShort 					; save base
.2f11	98		tya				tya
.2f12	48		pha				pha
.2f13	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2f15	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f17	8d 14 0c	sta $0c14			sta 	fs32Length
.2f1a	f0 65		beq $2f81			beq 	_I32FSFail2					; fail if length zero.
.2f1c	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2f1e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2f20	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2f22	d0 09		bne $2f2d			bne 	_I32FSNotNegative
.2f24	ad 14 0c	lda $0c14			lda 	fs32Length 					; get length back.
.2f27	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2f29	f0 56		beq $2f81			beq 	_I32FSFail2
.2f2b	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2f2d					_I32FSNotNegative:
.2f2d	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2f2f	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2f31	d0 02		bne $2f35			bne 	_I32FSNN2
.2f33	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2f35					_I32FSNN2:
.2f35	48		pha				pha 								; save base + final sign on stack.
.2f36	20 a1 30	jsr $30a1			jsr 	MInt32False 				; zero the return value.
.2f39					_I32FSMainLoop:
.2f39	68		pla				pla 								; get the base back into tempShort
.2f3a	48		pha				pha
.2f3b	29 7f		and #$7f			and 	#$7F
.2f3d	85 32		sta $32				sta 	tempShort
.2f3f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2f41	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2f43	90 02		bcc $2f47			bcc 	_I32FSNotLC
.2f45	e9 20		sbc #$20			sbc 	#32
.2f47					_I32FSNotLC:
.2f47	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2f48	e9 30		sbc #$30			sbc 	#"0"
.2f4a	90 34		bcc $2f80			bcc 	_I32FSFail 					; nothing more to do.
.2f4c	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2f4e	90 06		bcc $2f56			bcc 	_I32FSValidate
.2f50	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2f52	90 2c		bcc $2f80			bcc 	_I32FSFail
.2f54	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2f56					_I32FSValidate:
.2f56	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2f58	b0 26		bcs $2f80			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2f5a	48		pha				pha 								; save the new digit value.
.2f5b	e8		inx				inx 								; put base into next slot up on stack
.2f5c	a5 32		lda $32				lda 	tempShort
.2f5e	20 b0 30	jsr $30b0			jsr 	MInt32Set8Bit
.2f61	ca		dex				dex
.2f62	20 b9 2f	jsr $2fb9			jsr 	MInt32Multiply 				; multiply current by the base
.2f65	e8		inx				inx
.2f66	68		pla				pla  								; put additive into next slot
.2f67	20 b0 30	jsr $30b0			jsr 	MInt32Set8Bit
.2f6a	ca		dex				dex
.2f6b	20 85 2f	jsr $2f85			jsr 	MInt32Add 					; and add it
.2f6e	c8		iny				iny 								; bump the character pointer
.2f6f	cc 14 0c	cpy $0c14			cpy 	fs32Length 					; until > length.
.2f72	f0 c5		beq $2f39			beq 	_I32FSMainLoop
.2f74	90 c3		bcc $2f39			bcc 	_I32FSMainLoop
.2f76					_I32FSDone:
.2f76	68		pla				pla 								; get base/final sign back
.2f77	10 03		bpl $2f7c			bpl 	_I32FSNN3
.2f79	20 5b 30	jsr $305b			jsr 	MInt32Negate 				; negate the result.
.2f7c					_I32FSNN3:
.2f7c	68		pla				pla
.2f7d	a8		tay				tay
.2f7e	38		sec				sec
.2f7f	60		rts				rts
.2f80					_I32FSFail:
.2f80	68		pla				pla
.2f81					_I32FSFail2:
.2f81	68		pla				pla
.2f82	a8		tay				tay
.2f83	18		clc				clc
.2f84	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2f85					MInt32Add:
.2f85	18		clc				clc
.2f86	b5 50		lda $50,x			lda 	esInt0,x
.2f88	75 51		adc $51,x			adc 	esInt0+1,x
.2f8a	95 50		sta $50,x			sta 	esInt0,x
.2f8c	b5 58		lda $58,x			lda 	esInt1,x
.2f8e	75 59		adc $59,x			adc 	esInt1+1,x
.2f90	95 58		sta $58,x			sta 	esInt1,x
.2f92	b5 60		lda $60,x			lda 	esInt2,x
.2f94	75 61		adc $61,x			adc 	esInt2+1,x
.2f96	95 60		sta $60,x			sta 	esInt2,x
.2f98	b5 68		lda $68,x			lda 	esInt3,x
.2f9a	75 69		adc $69,x			adc 	esInt3+1,x
.2f9c	95 68		sta $68,x			sta 	esInt3,x
.2f9e	60		rts				rts
.2f9f					MInt32Sub:
.2f9f	38		sec				sec
.2fa0	b5 50		lda $50,x			lda 	esInt0,x
.2fa2	f5 51		sbc $51,x			sbc 	esInt0+1,x
.2fa4	95 50		sta $50,x			sta 	esInt0,x
.2fa6	b5 58		lda $58,x			lda 	esInt1,x
.2fa8	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2faa	95 58		sta $58,x			sta 	esInt1,x
.2fac	b5 60		lda $60,x			lda 	esInt2,x
.2fae	f5 61		sbc $61,x			sbc 	esInt2+1,x
.2fb0	95 60		sta $60,x			sta 	esInt2,x
.2fb2	b5 68		lda $68,x			lda 	esInt3,x
.2fb4	f5 69		sbc $69,x			sbc 	esInt3+1,x
.2fb6	95 68		sta $68,x			sta 	esInt3,x
.2fb8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2fb9					MInt32Multiply:
.2fb9	e8		inx				inx 								; copy 2nd -> 3rd
.2fba	20 df 2f	jsr $2fdf			jsr 	MInt32CopyUp
.2fbd	ca		dex				dex
.2fbe	20 df 2f	jsr $2fdf			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2fc1	20 a1 30	jsr $30a1			jsr 	MInt32False 				; zero 1st.
.2fc4					_I32Loop:
.2fc4	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2fc6	29 01		and #$01			and 	#1
.2fc8	f0 03		beq $2fcd			beq 	_I32NoAdd 					; if set
.2fca	20 85 2f	jsr $2f85			jsr 	MInt32Add 					; add 2nd to 1st.
.2fcd					_I32NoAdd:
.2fcd	e8		inx				inx 								; shift 2nd left
.2fce	20 b6 30	jsr $30b6			jsr 	MInt32ShiftLeft
.2fd1	e8		inx				inx  								; shift 3rd right
.2fd2	20 bf 30	jsr $30bf			jsr 	MInt32ShiftRight
.2fd5	20 c8 30	jsr $30c8			jsr 	MInt32Zero 					; check if zero.
.2fd8	08		php				php 								; save status bits
.2fd9	ca		dex				dex 	 							; point back to 1st
.2fda	ca		dex				dex
.2fdb	28		plp				plp 								; get status bits
.2fdc	d0 e6		bne $2fc4			bne 	_I32Loop 					; if non-zero keep going.
.2fde	60		rts				rts
.2fdf					MInt32CopyUp:
.2fdf	b5 50		lda $50,x			lda 	esInt0,x
.2fe1	95 51		sta $51,x			sta 	esInt0+1,x
.2fe3	b5 58		lda $58,x			lda 	esInt1,x
.2fe5	95 59		sta $59,x			sta 	esInt1+1,x
.2fe7	b5 60		lda $60,x			lda 	esInt2,x
.2fe9	95 61		sta $61,x			sta 	esInt2+1,x
.2feb	b5 68		lda $68,x			lda 	esInt3,x
.2fed	95 69		sta $69,x			sta 	esInt3+1,x
.2fef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c15					MCharCount:	.fill 	1						; count of converted characters
.2ff0					MLInt32ToString:
.2ff0	aa		tax				tax									; module passes stack in A, base in Y
.2ff1	98		tya				tya
.2ff2	20 f7 2f	jsr $2ff7			jsr 	MInt32ToString
.2ff5	8a		txa				txa
.2ff6	60		rts				rts
.2ff7					MInt32ToString:
.2ff7	48		pha				pha 								; save base
.2ff8	85 32		sta $32				sta 	tempShort 					; save target base.
.2ffa	a9 00		lda #$00			lda 	#0
.2ffc	8d 15 0c	sta $0c15			sta 	MCharCount 					; clear character count to 0
.2fff	98		tya				tya
.3000	48		pha				pha
.3001	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3003	10 10		bpl $3015			bpl 	_I32TSUnsigned
.3005	48		pha				pha 								; save base on stack.
.3006	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.3008	10 08		bpl $3012			bpl 	_I32TSNoFlip
.300a	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.300c	20 48 30	jsr $3048			jsr 	MI32WriteCharacter
.300f	20 5b 30	jsr $305b			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3012					_I32TSNoFlip:
.3012	68		pla				pla 								; get the base back
.3013	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3015					_I32TSUnsigned:
.3015	20 23 30	jsr $3023			jsr 	MI32DivideWrite 			; recursive code to output string.
.3018	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.301a	ad 15 0c	lda $0c15			lda 	MCharCount
.301d	91 2a		sta ($2a),y			sta 	(temp0),y
.301f	68		pla				pla
.3020	a8		tay				tay
.3021	68		pla				pla
.3022	60		rts				rts
.3023					MI32DivideWrite:
.3023	48		pha				pha 								; save the divisor/base
.3024	e8		inx				inx 								; write in the dividing position.
.3025	20 b0 30	jsr $30b0			jsr 	MInt32Set8Bit
.3028	ca		dex				dex
.3029	20 9b 2e	jsr $2e9b			jsr 	MInt32UDivide 				; divide number by base.
.302c	68		pla				pla 								; get the base into Y
.302d	a8		tay				tay
.302e	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3030	48		pha				pha
.3031	20 c8 30	jsr $30c8			jsr 	MInt32Zero 					; is the result zero ?
.3034	f0 04		beq $303a			beq 	_I32NoRecurse 				; if so, don't recurse.
.3036	98		tya				tya 								; put base into A
.3037	20 23 30	jsr $3023			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.303a					_I32NoRecurse:
.303a	68		pla				pla 								; get the remainder back
.303b	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.303d	90 02		bcc $3041			bcc 	_I32NotHex
.303f	69 06		adc #$06			adc 	#7-1
.3041					_I32NotHex:
.3041	18		clc				clc 								; make it ASCII
.3042	69 30		adc #$30			adc 	#48
.3044	20 48 30	jsr $3048			jsr 	MI32WriteCharacter 			; write the character out
.3047	60		rts				rts 								; and exit.
.3048					MI32WriteCharacter:
.3048	ee 15 0c	inc $0c15			inc 	MCharCount 					; bump count (space for leading count)
.304b	ac 15 0c	ldy $0c15			ldy 	MCharCount 					; get position
.304e	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3050	c8		iny				iny
.3051	a9 00		lda #$00			lda 	#0
.3053	91 2a		sta ($2a),y			sta 	(temp0),y
.3055	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c16					MSeed32:	.fill 	4							; random number seed.
.3056					MInt32Absolute:
.3056	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.3058	30 01		bmi $305b			bmi 	MInt32Negate
.305a	60		rts				rts
.305b					MInt32Negate:
.305b	38		sec				sec 								; subtract from zero.
.305c	a9 00		lda #$00			lda 	#0
.305e	f5 50		sbc $50,x			sbc 	esInt0,x
.3060	95 50		sta $50,x			sta 	esInt0,x
.3062	a9 00		lda #$00			lda 	#0
.3064	f5 58		sbc $58,x			sbc 	esInt1,x
.3066	95 58		sta $58,x			sta 	esInt1,x
.3068	a9 00		lda #$00			lda 	#0
.306a	f5 60		sbc $60,x			sbc 	esInt2,x
.306c	95 60		sta $60,x			sta 	esInt2,x
.306e	a9 00		lda #$00			lda 	#0
.3070	f5 68		sbc $68,x			sbc 	esInt3,x
.3072	95 68		sta $68,x			sta 	esInt3,x
.3074	60		rts				rts
.3075					MInt32Not:
.3075	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.3077	49 ff		eor #$ff			eor 	#$FF
.3079	95 50		sta $50,x			sta 	esInt0,x
.307b	b5 58		lda $58,x			lda 	esInt1,x
.307d	49 ff		eor #$ff			eor 	#$FF
.307f	95 58		sta $58,x			sta 	esInt1,x
.3081	b5 60		lda $60,x			lda 	esInt2,x
.3083	49 ff		eor #$ff			eor 	#$FF
.3085	95 60		sta $60,x			sta 	esInt2,x
.3087	b5 68		lda $68,x			lda 	esInt3,x
.3089	49 ff		eor #$ff			eor 	#$FF
.308b	95 68		sta $68,x			sta 	esInt3,x
.308d	60		rts				rts
.308e					MInt32Sign:
.308e	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.3090	30 0b		bmi $309d			bmi 	MInt32True 					; if set return -1 (true)
.3092	20 c8 30	jsr $30c8			jsr 	MInt32Zero 					; is it zero ?
.3095	f0 0a		beq $30a1			beq 	MInt32False 				; if zero return 0 (false)
.3097	20 a1 30	jsr $30a1			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.309a	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.309c	60		rts				rts
.309d					MInt32True:
.309d	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.309f	d0 02		bne $30a3			bne 	MInt32WriteAll
.30a1					MInt32False:
.30a1	a9 00		lda #$00			lda 	#0
.30a3					MInt32WriteAll:
.30a3	95 50		sta $50,x			sta 	esInt0,x
.30a5					MInt32Write123:
.30a5	95 58		sta $58,x			sta 	esInt1,x
.30a7	95 60		sta $60,x			sta 	esInt2,x
.30a9	95 68		sta $68,x			sta 	esInt3,x
.30ab	a9 00		lda #$00			lda 	#$00						; and make it an integer
.30ad	95 48		sta $48,x			sta 	esType,x
.30af	60		rts				rts
.30b0					MInt32Set8Bit:
.30b0	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.30b2	a9 00		lda #$00			lda 	#0 							; a value 0-255
.30b4	f0 ef		beq $30a5			beq		MInt32Write123
.30b6					MInt32ShiftLeft:
.30b6	16 50		asl $50,x			asl 	esInt0,x
.30b8	36 58		rol $58,x			rol	 	esInt1,x
.30ba	36 60		rol $60,x			rol	 	esInt2,x
.30bc	36 68		rol $68,x			rol	 	esInt3,x
.30be	60		rts				rts
.30bf					MInt32ShiftRight:
.30bf	56 68		lsr $68,x			lsr 	esInt3,x
.30c1	76 60		ror $60,x			ror 	esInt2,x
.30c3	76 58		ror $58,x			ror 	esInt1,x
.30c5	76 50		ror $50,x			ror 	esInt0,x
.30c7	60		rts				rts
.30c8					MInt32Zero:
.30c8	b5 50		lda $50,x			lda 	esInt0,x
.30ca	15 58		ora $58,x			ora 	esInt1,x
.30cc	15 60		ora $60,x			ora 	esInt2,x
.30ce	15 68		ora $68,x			ora 	esInt3,x
.30d0	60		rts				rts
.30d1					MInt32Random:
.30d1	98		tya				tya
.30d2	48		pha				pha
.30d3	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.30d5	ad 16 0c	lda $0c16			lda 	MSeed32+0 					; check the seed isn't zero
.30d8	d0 03		bne $30dd			bne 	_Random1
.30da	a8		tay				tay 								; if so do it 256 times
.30db	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.30dd					_Random1:
.30dd	0a		asl a				asl 	a
.30de	2e 17 0c	rol $0c17			rol 	MSeed32+1
.30e1	2e 18 0c	rol $0c18			rol 	MSeed32+2
.30e4	2e 19 0c	rol $0c19			rol 	MSeed32+3
.30e7	90 02		bcc $30eb			bcc 	_Random2
.30e9	49 c5		eor #$c5			eor 	#$C5
.30eb					_Random2:
.30eb	88		dey				dey
.30ec	d0 ef		bne $30dd			bne 	_Random1
.30ee	8d 16 0c	sta $0c16			sta 	MSeed32+0 					; copy the seed in.
.30f1	95 50		sta $50,x			sta 	esInt0,x
.30f3	ad 17 0c	lda $0c17			lda 	MSeed32+1
.30f6	95 58		sta $58,x			sta 	esInt1,x
.30f8	ad 18 0c	lda $0c18			lda 	MSeed32+2
.30fb	95 60		sta $60,x			sta 	esInt2,x
.30fd	ad 19 0c	lda $0c19			lda 	MSeed32+3
.3100	95 68		sta $68,x			sta 	esInt3,x
.3102	68		pla				pla
.3103	a8		tay				tay
.3104	a9 00		lda #$00			lda 	#0
.3106	95 48		sta $48,x			sta 	esType,x
.3108	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3109					CheckToken:
.3109	d1 28		cmp ($28),y			cmp 	(codePtr),y
.310b	d0 02		bne $310f			bne 	_CTError
.310d	c8		iny				iny
.310e	60		rts				rts
.310f					_CTError:
.310f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3111	20 e0 14	jsr $14e0		jsr	errorHandler
.3114					CheckRightParen:
.3114	b1 28		lda ($28),y			lda 	(codePtr),y
.3116	c8		iny				iny
.3117	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3119	d0 01		bne $311c			bne 	_CRPError
.311b	60		rts				rts
.311c					_CRPError:
.311c	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.311e	20 e0 14	jsr $14e0		jsr	errorHandler
.3121					CheckComma:
.3121	b1 28		lda ($28),y			lda 	(codePtr),y
.3123	c8		iny				iny
.3124	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3126	d0 01		bne $3129			bne 	_CCError
.3128	60		rts				rts
.3129					_CCError:
.3129	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.312b	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.312e					RSReset:
.312e	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3130	85 37		sta $37				sta 	rsPointer
.3132	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3134	85 38		sta $38				sta 	1+(rsPointer)
.3136	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3138	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.313b	60		rts				rts
.313c					RSClaim:
.313c	84 32		sty $32				sty 	tempShort 					; preserve Y
.313e	48		pha				pha 								; save marker on stack.
.313f	8a		txa				txa 								; get bytes required.
.3140	38		sec				sec
.3141	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3143	65 37		adc $37				adc 	rsPointer
.3145	85 37		sta $37				sta 	rsPointer
.3147	a5 38		lda $38				lda 	rsPointer+1
.3149	69 ff		adc #$ff			adc 	#$FF
.314b	85 38		sta $38				sta 	rsPointer+1
.314d	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.314f	90 08		bcc $3159			bcc 	_RSCOverflow
.3151	68		pla				pla 								; get marker back
.3152	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3154	91 37		sta ($37),y			sta 	(rsPointer),y
.3156	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3158	60		rts				rts
.3159					_RSCOverflow:
.3159	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.315b	20 e0 14	jsr $14e0		jsr	errorHandler
.315e					RSFree:
.315e	18		clc				clc
.315f	65 37		adc $37				adc 	rsPointer
.3161	85 37		sta $37				sta 	rsPointer
.3163	90 02		bcc $3167			bcc 	_RSFExit
.3165	e6 38		inc $38				inc 	rsPointer+1
.3167					_RSFExit:
.3167	60		rts				rts
.3168					RSSavePosition:
.3168	84 32		sty $32				sty 	tempShort 					; save Y position
.316a	a8		tay				tay 								; this is where we write it.
.316b	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.316d	91 37		sta ($37),y			sta 	(rsPointer),y
.316f	c8		iny				iny
.3170	a5 29		lda $29				lda 	codePtr+1
.3172	91 37		sta ($37),y			sta 	(rsPointer),y
.3174	c8		iny				iny
.3175	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3177	91 37		sta ($37),y			sta 	(rsPointer),y
.3179	a8		tay				tay 								; fix Y back again to original value
.317a	60		rts				rts
.317b					RSLoadPosition:
.317b	a8		tay				tay
.317c	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.317e	85 28		sta $28				sta 	codePtr
.3180	c8		iny				iny
.3181	b1 37		lda ($37),y			lda 	(rsPointer),y
.3183	85 29		sta $29				sta 	codePtr+1
.3185	c8		iny				iny
.3186	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3188	a8		tay				tay 								; to Y
.3189	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.318a					WarmStart:
.318a	a2 02		ldx #$02		ldx	#2
.318c	20 04 1b	jsr $1b04		jsr	interactionHandler

;******  Return to file: main/main.asm

.318f					mainHandler:
.318f	7c 92 31	jmp ($3192,x)			jmp 	(mainVectors,x)
.3192					mainVectors:
>3192	14 31					.word CheckRightParen      ; index 0
>3194	09 23					.word XCommandClear        ; index 2
>3196	2a 2a					.word LinkEvaluate         ; index 4
>3198	36 2a					.word LinkEvaluateInteger  ; index 6
>319a	3c 2a					.word LinkEvaluateSmallInt ; index 8
>319c	30 2a					.word LinkEvaluateTerm     ; index 10
>319e	f0 2f					.word MLInt32ToString      ; index 12
>31a0	98 24					.word Command_XNew         ; index 14
>31a2	a6 24					.word XCommand_Run         ; index 16
>31a4	b2 24					.word Command_RunFrom      ; index 18
>31a6	08 2f					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.31a8					section_end_main:
.31a8					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.31a8					StringChrs:
.31a8	aa		tax				tax 								; set up stack
.31a9	a9 02		lda #$02			lda 	#2
.31ab	20 6b 32	jsr $326b			jsr 	AllocateSoftString
.31ae	98		tya				tya
.31af	20 91 32	jsr $3291			jsr 	WriteSoftString
.31b2					StringUpdate:
.31b2	20 c0 31	jsr $31c0			jsr 	ReturnSoftString
.31b5	8a		txa				txa
.31b6	60		rts				rts
.31b7					StringNull:
.31b7	aa		tax				tax
.31b8	a9 01		lda #$01			lda 	#1
.31ba	20 6b 32	jsr $326b			jsr 	AllocateSoftString
.31bd	4c b2 31	jmp $31b2			jmp 	StringUpdate
.31c0					ReturnSoftString:
.31c0	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.31c2	95 50		sta $50,x			sta 	esInt0,x
.31c4	a5 3a		lda $3a				lda 	softMemAlloc+1
.31c6	95 58		sta $58,x			sta 	esInt1,x
.31c8	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.31ca	95 60		sta $60,x			sta 	esInt2,x
.31cc	95 68		sta $68,x			sta 	esInt3,x
.31ce	a9 40		lda #$40			lda 	#$40 						; type string.
.31d0	95 48		sta $48,x			sta 	esType,x
.31d2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.31d3					STRCompare:
.31d3	48		pha				pha 								; save A
.31d4	aa		tax				tax 								; put stack pos in X
.31d5	98		tya				tya
.31d6	48		pha				pha
.31d7	20 0b 32	jsr $320b			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.31da	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.31dc	b1 2a		lda ($2a),y			lda 	(temp0),y
.31de	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.31e0	90 02		bcc $31e4			bcc 	_SCNotSmaller
.31e2	b1 2c		lda ($2c),y			lda 	(temp1),y
.31e4					_SCNotSmaller:
.31e4	aa		tax				tax 								; put that in X. We compare this many chars first.
.31e5					_SCCompareLoop:
.31e5	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.31e7	f0 0c		beq $31f5			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.31e9	ca		dex				dex 								; decrement chars to compare.
.31ea	c8		iny				iny 								; move to next character
.31eb	38		sec				sec 								; calculate s1[y]-s2[y]
.31ec	b1 2a		lda ($2a),y			lda 	(temp0),y
.31ee	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.31f0	d0 0a		bne $31fc			bne 	_SCReturnResult 			; if different return sign of A
.31f2	4c e5 31	jmp $31e5			jmp 	_SCCompareLoop
.31f5					_SCSameToEndShortest
.31f5	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.31f7	38		sec				sec
.31f8	b1 2a		lda ($2a),y			lda 	(temp0),y
.31fa	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.31fc					_SCReturnResult:
.31fc	08		php				php 								; set return to zero preserving PSW.
.31fd	a2 00		ldx #$00			ldx 	#0
.31ff	28		plp				plp
.3200	f0 05		beq $3207			beq 	_SCExit 					; two values equal, then exit
.3202	ca		dex				dex 								; X = $FF
.3203	90 02		bcc $3207			bcc 	_SCExit 					; if 1st < 2nd then -1
.3205	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3207					_SCExit:
.3207	68		pla				pla
.3208	a8		tay				tay
.3209	68		pla				pla
.320a	60		rts				rts
.320b					CopyStringPair:
.320b	b5 51		lda $51,x			lda 	esInt0+1,x
.320d	85 2c		sta $2c				sta 	temp1
.320f	b5 59		lda $59,x			lda 	esInt1+1,x
.3211	85 2d		sta $2d				sta 	temp1+1
.3213					CopyStringTop:
.3213	b5 50		lda $50,x			lda 	esInt0,x
.3215	85 2a		sta $2a				sta 	temp0
.3217	b5 58		lda $58,x			lda 	esInt1,x
.3219	85 2b		sta $2b				sta 	temp0+1
.321b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.321c					StringConcat:
.321c	aa		tax				tax									; stack pos in X
.321d	98		tya				tya
.321e	48		pha				pha
.321f	20 0b 32	jsr $320b			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3222	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3223	a0 00		ldy #$00			ldy 	#0
.3225	b1 2a		lda ($2a),y			lda 	(temp0),y
.3227	71 2c		adc ($2c),y			adc 	(temp1),y
.3229	b0 1c		bcs $3247			bcs 	_SCError 					; just too many characters here.
.322b	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.322d	b0 18		bcs $3247			bcs 	_SCError
.322f	20 6b 32	jsr $326b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3232	20 62 32	jsr $3262			jsr 	CopySoftToStack 			; copy that to the stack.
.3235	20 4c 32	jsr $324c			jsr 	SCCopyTemp0 				; copy temp0
.3238	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.323a	85 2a		sta $2a				sta 	temp0
.323c	a5 2d		lda $2d				lda 	temp1+1
.323e	85 2b		sta $2b				sta 	temp0+1
.3240	20 4c 32	jsr $324c			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3243	68		pla				pla
.3244	a8		tay				tay
.3245	8a		txa				txa 								; and A
.3246	60		rts				rts
.3247					_SCError:
.3247	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3249	20 e0 14	jsr $14e0		jsr	errorHandler
.324c					SCCopyTemp0:
.324c	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.324e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3250	85 2e		sta $2e				sta 	temp2
.3252					_SCCopyLoop:
.3252	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3254	f0 0b		beq $3261			beq 	_SCCopyExit
.3256	c6 2e		dec $2e				dec 	temp2
.3258	c8		iny				iny 								; get next char
.3259	b1 2a		lda ($2a),y			lda 	(temp0),y
.325b	20 91 32	jsr $3291			jsr 	WriteSoftString 			; write to soft string.
.325e	4c 52 32	jmp $3252			jmp 	_SCCopyLoop
.3261					_SCCopyExit:
.3261	60		rts				rts
.3262					CopySoftToStack:
.3262	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3264	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.3266	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3268	95 58		sta $58,x			sta 	esInt1,x
.326a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.326b					AllocateSoftString:
.326b	85 32		sta $32				sta 	tempShort 					; save count
.326d	98		tya				tya
.326e	48		pha				pha
.326f	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3271	d0 09		bne $327c			bne 	_ASSDone
.3273	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3275	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3277	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3279	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.327a	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.327c					_ASSDone:
.327c	38		sec				sec 								; allocate downwards enough memory
.327d	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.327f	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3281	85 39		sta $39				sta 	softMemAlloc
.3283	a5 3a		lda $3a				lda 	softMemAlloc+1
.3285	e9 00		sbc #$00			sbc 	#0
.3287	85 3a		sta $3a				sta 	softMemAlloc+1
.3289	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.328b	a8		tay				tay
.328c	91 39		sta ($39),y			sta 	(softMemAlloc),y
.328e	68		pla				pla
.328f	a8		tay				tay
.3290	60		rts				rts
.3291					WriteSoftString:
.3291	84 32		sty $32				sty 	tempShort 					; save Y
.3293	48		pha				pha 								; save character on stack
.3294	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3296	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3298	18		clc				clc
.3299	69 01		adc #$01			adc 	#1
.329b	91 39		sta ($39),y			sta 	(softMemAlloc),y
.329d	a8		tay				tay 								; offset in Y
.329e	68		pla				pla 								; get char and write.
.329f	91 39		sta ($39),y			sta 	(softMemAlloc),y
.32a1	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.32a3	60		rts				rts
.32a4					StrClone:
.32a4	aa		tax				tax 								; set up stack.
.32a5	98		tya				tya
.32a6	48		pha				pha
.32a7	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.32a9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.32ab	18		clc				clc
.32ac	69 01		adc #$01			adc 	#1
.32ae	20 6b 32	jsr $326b			jsr 	AllocateSoftString 			; allocate soft memory
.32b1	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.32b3	95 50		sta $50,x			sta 	esInt0,x
.32b5	a5 3a		lda $3a				lda 	softMemAlloc+1
.32b7	95 58		sta $58,x			sta 	esInt1,x
.32b9	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.32bb	95 60		sta $60,x			sta 	esInt2,x
.32bd	95 68		sta $68,x			sta 	esInt3,x
.32bf	a9 40		lda #$40			lda 	#$40 						; set type to string.
.32c1	95 48		sta $48,x			sta 	esType,x
.32c3	20 4c 32	jsr $324c			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.32c6	68		pla				pla
.32c7	a8		tay				tay
.32c8	8a		txa				txa
.32c9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.32ca					CaseString:
.32ca	48		pha				pha 								; save A and copy to X
.32cb	aa		tax				tax
.32cc	98		tya				tya
.32cd	48		pha				pha
.32ce	20 13 32	jsr $3213			jsr 	CopyStringTop 				; target string -> temp0
.32d1	a0 00		ldy #$00			ldy 	#0
.32d3	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.32d5	18		clc				clc
.32d6	69 01		adc #$01			adc 	#1 							; one more for length byte
.32d8	20 6b 32	jsr $326b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.32db	20 62 32	jsr $3262			jsr 	CopySoftToStack 			; copy that to the stack.
.32de	a0 00		ldy #$00			ldy 	#0
.32e0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.32e2	aa		tax				tax
.32e3					_CSCopy:
.32e3	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.32e5	f0 24		beq $330b			beq 	_CSExit
.32e7	ca		dex				dex
.32e8	c8		iny				iny
.32e9	68		pla				pla 								; check direction
.32ea	48		pha				pha
.32eb	f0 0c		beq $32f9			beq 	_CSUpper
.32ed	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.32ef	c9 41		cmp #$41			cmp 	#"A"
.32f1	90 12		bcc $3305			bcc 	_CSWrite
.32f3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32f5	b0 0e		bcs $3305			bcs 	_CSWrite
.32f7	90 0a		bcc $3303			bcc 	_CSFlipWrite
.32f9					_CSUpper:
.32f9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.32fb	c9 61		cmp #$61			cmp 	#"a"
.32fd	90 06		bcc $3305			bcc 	_CSWrite
.32ff	c9 7b		cmp #$7b			cmp 	#"z"+1
.3301	b0 02		bcs $3305			bcs 	_CSWrite
.3303					_CSFlipWrite:
.3303	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3305					_CSWrite:
.3305	20 91 32	jsr $3291			jsr 	WriteSoftString 			; add to soft string.
.3308	4c e3 32	jmp $32e3			jmp 	_CSCopy
.330b					_CSExit:
.330b	68		pla				pla
.330c	a8		tay				tay
.330d	68		pla				pla
.330e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.330f					StringSubstring:
.330f	48		pha				pha
.3310	aa		tax				tax 								; access stack.
.3311	98		tya				tya
.3312	48		pha				pha
.3313	20 13 32	jsr $3213			jsr 	CopyStringTop 				; point temp0 to the string.
.3316	a0 00		ldy #$00			ldy 	#0 							; get length.
.3318	b1 2a		lda ($2a),y			lda 	(temp0),Y
.331a	85 2c		sta $2c				sta 	temp1
.331c	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.331e	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3320	f0 02		beq $3324			beq 	_SSBOkay
.3322	b0 2a		bcs $334e			bcs 	_SSBReturnNull
.3324					_SSBOkay:
.3324	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3326	18		clc				clc
.3327	69 01		adc #$01			adc 	#1
.3329	38		sec				sec
.332a	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.332c	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.332e	90 02		bcc $3332			bcc		_SSBTrunc
.3330	b5 52		lda $52,x			lda 	esInt0+2,x
.3332					_SSBTrunc:
.3332	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3334	18		clc				clc
.3335	69 01		adc #$01			adc 	#1 							; add 1
.3337	20 6b 32	jsr $326b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.333a	20 62 32	jsr $3262			jsr 	CopySoftToStack 			; copy that to the stack.
.333d	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.333f					_SSBCopyLoop:
.333f	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3341	f0 0e		beq $3351			beq 	_SSBExit
.3343	c6 2d		dec $2d				dec 	temp1+1
.3345	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3347	20 91 32	jsr $3291			jsr 	WriteSoftString
.334a	c8		iny				iny
.334b	4c 3f 33	jmp $333f			jmp 	_SSBCopyLoop
.334e					_SSBReturnNull:
.334e	20 55 33	jsr $3355			jsr 	ReturnNull
.3351					_SSBExit:
.3351	68		pla				pla
.3352	a8		tay				tay
.3353	68		pla				pla
.3354	60		rts				rts
.3355					ReturnNull:
.3355	a9 00		lda #$00			lda 	#0 							; clear null string
.3357	8d ce 0a	sta $0ace			sta 	NullString
.335a	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.335c	95 50		sta $50,x			sta 	esInt0,x
.335e	a9 0a		lda #$0a			lda 	#NullString >> 8
.3360	95 58		sta $58,x			sta 	esInt1,x
.3362	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0c1a					srcStrLen:
>0c1a							.fill 	1
.3363					StringWrite:
.3363	aa		tax				tax
.3364	48		pha				pha
.3365	98		tya				tya
.3366	48		pha				pha
.3367	20 8e 33	jsr $338e			jsr 	CheckOverwriteCurrent
.336a	b0 0d		bcs $3379			bcs		_SWCopyCurrent
.336c	20 cc 33	jsr $33cc			jsr 	RequiresConcretion
.336f	90 0e		bcc $337f			bcc 	_SWWriteReference
.3371	20 2f 34	jsr $342f			jsr 	CheckSpecialConcretion
.3374	b0 09		bcs $337f			bcs 	_SWWriteReference
.3376	20 e0 33	jsr $33e0			jsr 	AllocateHardMemory
.3379					_SWCopyCurrent:
.3379	20 13 34	jsr $3413			jsr 	CopyStringToHardMemory
.337c	4c 8a 33	jmp $338a			jmp 	_SWExit
.337f					_SWWriteReference
.337f	a0 00		ldy #$00			ldy 	#0
.3381	a5 2a		lda $2a				lda 	temp0
.3383	91 2c		sta ($2c),y			sta 	(temp1),y
.3385	c8		iny				iny
.3386	a5 2b		lda $2b				lda 	temp0+1
.3388	91 2c		sta ($2c),y			sta 	(temp1),y
.338a					_SWExit:
.338a	68		pla				pla
.338b	a8		tay				tay
.338c	68		pla				pla
.338d	60		rts				rts
.338e					CheckOverwriteCurrent:
.338e	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3390	b5 59		lda $59,x			lda 	esInt1+1,x
.3392	85 2b		sta $2b				sta 	temp0+1
.3394	b5 51		lda $51,x			lda 	esInt0+1,x
.3396	85 2a		sta $2a				sta 	temp0
.3398	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.339a	8d 1a 0c	sta $0c1a			sta 	srcStrLen
.339d	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.339f	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.33a1	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.33a3	85 2d		sta $2d				sta 	temp1+1
.33a5	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.33a7	b1 2c		lda ($2c),y			lda 	(temp1),y
.33a9	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.33ab	90 1b		bcc $33c8			bcc 	_COCFail 				; in hard memory.
.33ad	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.33af	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.33b1	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.33b3	85 2e		sta $2e				sta 	temp2
.33b5	c8		iny				iny
.33b6	b1 2c		lda ($2c),y			lda 	(temp1),y
.33b8	e9 00		sbc #$00			sbc 	#0
.33ba	85 2f		sta $2f				sta 	temp2+1
.33bc	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.33be	b1 2e		lda ($2e),y			lda 	(temp2),y
.33c0	38		sec				sec  							; maximum character capacity.
.33c1	e9 02		sbc #$02			sbc 	#2
.33c3	cd 1a 0c	cmp $0c1a			cmp 	srcStrLen 				; if >= the required length
.33c6	b0 02		bcs $33ca			bcs 	_COCCanReuse
.33c8					_COCFail:
.33c8	18		clc				clc
.33c9	60		rts				rts
.33ca					_COCCanReuse:
.33ca	38		sec				sec
.33cb	60		rts				rts
.33cc					RequiresConcretion:
.33cc	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.33ce	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.33d0	b0 0a		bcs $33dc			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.33d2	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.33d4	f0 08		beq $33de			beq 	_RCFail 				; if not, this cannot be soft memory.
.33d6	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.33d8	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.33da	90 02		bcc $33de			bcc 	_RCFail 				; so concreting
.33dc					_RCSucceed:
.33dc	38		sec				sec
.33dd	60		rts				rts
.33de					_RCFail:
.33de	18		clc				clc
.33df	60		rts				rts
.33e0					AllocateHardMemory:
.33e0	98		tya				tya
.33e1	48		pha				pha
.33e2	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; characters in string
.33e5	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.33e7	b0 04		bcs $33ed			bcs 	_AHMSetMax 				; max out that amount.
.33e9	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.33eb	90 02		bcc $33ef			bcc 	_AHMIsOkay
.33ed					_AHMSetMax:
.33ed	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.33ef					_AHMIsOkay:
.33ef	48		pha				pha	 							; save size to be allocated
.33f0	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.33f2	38		sec				sec  							; and copy result to TOS as target address.
.33f3	65 33		adc $33				adc 	highMemory
.33f5	85 33		sta $33				sta 	highMemory
.33f7	a5 34		lda $34				lda 	highMemory+1
.33f9	69 ff		adc #$ff			adc 	#$FF
.33fb	85 34		sta $34				sta 	highMemory+1
.33fd	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.33ff	68		pla				pla 							; get the total size of the storage block
.3400	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3402	18		clc				clc
.3403	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3405	69 01		adc #$01			adc 	#1
.3407	91 2c		sta ($2c),y			sta 	(temp1),y
.3409	a5 34		lda $34				lda 	highMemory+1
.340b	69 00		adc #$00			adc 	#0
.340d	c8		iny				iny
.340e	91 2c		sta ($2c),y			sta 	(temp1),y
.3410	68		pla				pla
.3411	a8		tay				tay
.3412	60		rts				rts
.3413					CopyStringToHardMemory:
.3413	98		tya				tya
.3414	48		pha				pha
.3415	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3417	b1 2c		lda ($2c),y			lda 	(temp1),y
.3419	85 2e		sta $2e				sta 	temp2
.341b	c8		iny				iny
.341c	b1 2c		lda ($2c),y			lda 	(temp1),y
.341e	85 2f		sta $2f				sta 	temp2+1
.3420	ac 1a 0c	ldy $0c1a			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3423					_CSTHMLoop:
.3423	b1 2a		lda ($2a),y			lda 	(temp0),y
.3425	91 2e		sta ($2e),y			sta 	(temp2),y
.3427	88		dey				dey
.3428	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.342a	d0 f7		bne $3423			bne 	_CSTHMLoop
.342c	68		pla				pla
.342d	a8		tay				tay
.342e	60		rts				rts
.342f					CheckSpecialConcretion:
.342f	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; check string is null e.g. length = 0
.3432	f0 02		beq $3436			beq 	_CSCNullString
.3434	18		clc				clc
.3435	60		rts				rts
.3436					_CSCNullString:
.3436	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3438	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.343b	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.343d	85 2a		sta $2a				sta 	temp0
.343f	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3441	85 2b		sta $2b				sta 	1+(temp0)
.3443	38		sec				sec
.3444	60		rts				rts

;******  Return to file: string/string.asm

.3445					stringHandler:
.3445	7c 48 34	jmp ($3448,x)			jmp 	(stringVectors,x)
.3448					stringVectors:
>3448	a8 31					.word StringChrs           ; index 0
>344a	a4 32					.word StrClone             ; index 2
>344c	1c 32					.word StringConcat         ; index 4
>344e	b7 31					.word StringNull           ; index 6
>3450	d3 31					.word STRCompare           ; index 8
>3452	ca 32					.word CaseString           ; index 10
>3454	0f 33					.word StringSubstring      ; index 12
>3456	63 33					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.3458					section_end_string:
.3458					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1b					deTokeniseVector:
>0c1b							.fill 	2
.0c1d					lastCharacterClass:
>0c1d							.fill 	1
.0c1e					indent:
>0c1e							.fill 	1
.3458					ListLine:
.3458	48		pha				pha								; enter here to list to console. sets the output vector
.3459	a9 8d		lda #$8d			lda 	#(deTokenPrint) & $FF
.345b	8d 1b 0c	sta $0c1b			sta 	deTokeniseVector
.345e	a9 35		lda #$35			lda 	#(deTokenPrint) >> 8
.3460	8d 1c 0c	sta $0c1c			sta 	1+(deTokeniseVector)
.3463	68		pla				pla
.3464					Detokenise:
.3464	18		clc				clc 							; space required for line number.
.3465	69 06		adc #$06			adc 	#6
.3467	8d 1e 0c	sta $0c1e			sta 	indent
.346a	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.346c	8d 1d 0c	sta $0c1d			sta 	lastCharacterClass
.346f	a2 02		ldx #$02			ldx 	#2
.3471	20 a1 30	jsr $30a1			jsr 	MInt32False
.3474	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3476	b1 28		lda ($28),y			lda 	(codePtr),y
.3478	95 50		sta $50,x			sta 	esInt0,x
.347a	c8		iny				iny
.347b	b1 28		lda ($28),y			lda 	(codePtr),y
.347d	95 58		sta $58,x			sta 	esInt1,x
.347f	a9 84		lda #$84			lda 	#LTYLineNumber
.3481	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.3484	a9 0a		lda #$0a			lda 	#10 					; base 10
.3486	20 2c 35	jsr $352c			jsr 	DTPrintInteger 			; print as integer.
.3489	a0 00		ldy #$00			ldy 	#0 						; get length
.348b	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.348d	aa		tax				tax
.348e					_DTPadOut:
.348e	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3490	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.3493	e8		inx				inx
.3494	ec 1e 0c	cpx $0c1e			cpx 	indent
.3497	d0 f5		bne $348e			bne 	_DTPadOut
.3499	a0 03		ldy #$03			ldy 	#3 						; start position.
.349b					_DTListLoop
.349b	b1 28		lda ($28),y			lda 	(codePtr),y
.349d	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.349f	f0 5e		beq $34ff			beq 	_DTIsString
.34a1	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.34a3	f0 56		beq $34fb			beq 	_DTIsFloat
.34a5	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.34a7	f0 16		beq $34bf			beq 	_DTHexConstant
.34a9	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.34ab	d0 06		bne $34b3			bne 	_DTNotEnd
.34ad	a9 ff		lda #$ff			lda 	#255 					; print CR
.34af	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.34b2	60		rts				rts
.34b3					_DTNotEnd:
.34b3	c9 00		cmp #$00			cmp 	#0
.34b5	30 38		bmi $34ef			bmi 	_DTIsToken
.34b7	c9 40		cmp #$40			cmp 	#$40
.34b9	90 3a		bcc $34f5			bcc 	_DTIsIdentifier
.34bb	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.34bd	d0 0d		bne $34cc			bne 	_DTConstant
.34bf					_DTHexConstant:
.34bf	a9 26		lda #$26			lda 	#"&"
.34c1	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.34c4	c8		iny				iny
.34c5	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.34c7	20 a9 35	jsr $35a9			jsr 	DTSwitchMode
.34ca	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.34cc					_DTConstant:
.34cc	48		pha				pha
.34cd	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.34cf	20 a9 35	jsr $35a9			jsr 	DTSwitchMode
.34d2	a9 86		lda #$86			lda 	#LTYConstant
.34d4	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.34d7	a2 02		ldx #$02			ldx 	#2 						; get its value
.34d9	8a		txa				txa
.34da	a2 0a		ldx #$0a		ldx	#10
.34dc	20 8f 31	jsr $318f		jsr	mainHandler
.34df	aa		tax				tax
.34e0	68		pla				pla 							; get base back
.34e1	85 32		sta $32				sta 	tempShort
.34e3	98		tya				tya
.34e4	48		pha				pha
.34e5	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.34e7	20 2c 35	jsr $352c			jsr 	DTPrintInteger
.34ea	68		pla				pla
.34eb	a8		tay				tay
.34ec	4c 9b 34	jmp $349b			jmp 	_DTListLoop
.34ef					_DTIsToken:
.34ef	20 02 36	jsr $3602			jsr 	DTDecodeToken
.34f2	4c 9b 34	jmp $349b			jmp 	_DTListLoop
.34f5					_DTIsIdentifier:
.34f5	20 bb 35	jsr $35bb			jsr 	DTIdentifier
.34f8	4c 9b 34	jmp $349b			jmp 	_DTListLoop
.34fb					_DTIsFloat:
>34fb	db						.byte 	$DB
.34fc	4c fb 34	jmp $34fb			jmp 	_DTIsFloat
.34ff					_DTIsString:
.34ff	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3501	20 a9 35	jsr $35a9			jsr 	DTSwitchMode
.3504	a9 81		lda #$81			lda 	#LTYString
.3506	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.3509	a9 22		lda #$22			lda 	#'"'						; open quote
.350b	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.350e	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3510	8a		txa				txa
.3511	a2 0a		ldx #$0a		ldx	#10
.3513	20 8f 31	jsr $318f		jsr	mainHandler
.3516	aa		tax				tax
.3517	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.3519	85 2a		sta $2a				sta 	temp0
.351b	b5 58		lda $58,x			lda 	esInt1,x
.351d	85 2b		sta $2b				sta 	temp0+1
.351f	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3521	20 3e 35	jsr $353e			jsr 	DTPrintLengthPrefix
.3524	a9 22		lda #$22			lda 	#'"'
.3526	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.3529	4c 9b 34	jmp $349b			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1f					tPrintCount:
>0c1f							.fill 	1
.352c					DTPrintInteger:
.352c	48		pha				pha									; save base
.352d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.352f	85 2a		sta $2a				sta 	temp0
.3531	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3533	85 2b		sta $2b				sta 	1+(temp0)
.3535	68		pla				pla
.3536	a8		tay				tay
.3537	8a		txa				txa
.3538	a2 0c		ldx #$0c		ldx	#12
.353a	20 8f 31	jsr $318f		jsr	mainHandler
.353d	aa		tax				tax 								; then drop through here.
.353e					DTPrintLengthPrefix:
.353e	aa		tax				tax 								; A = 0 = don't case convert.
.353f	98		tya				tya
.3540	48		pha				pha
.3541	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3543	b1 2a		lda ($2a),y			lda 	(temp0),y
.3545	8d 1f 0c	sta $0c1f			sta 	tPrintCount
.3548	f0 1b		beq $3565			beq 	_DTPLPExit 					; empty string
.354a					_DTPLPLoop:
.354a	c8		iny				iny 								; get next.
.354b	b1 2a		lda ($2a),y			lda 	(temp0),y
.354d	29 7f		and #$7f			and 	#$7F
.354f	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3551	f0 0a		beq $355d			beq 	_DTPLPNoCase
.3553	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3555	90 06		bcc $355d			bcc 	_DTPLPNoCase
.3557	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3559	b0 02		bcs $355d			bcs 	_DTPLPNoCase
.355b	49 20		eor #$20			eor 	#"A"^"a"
.355d					_DTPLPNoCase
.355d	20 68 35	jsr $3568			jsr 	ListOutputCharacter 		; call handler
.3560	ce 1f 0c	dec $0c1f			dec 	tPrintCount 				; do all the characters
.3563	d0 e5		bne $354a			bne 	_DTPLPLoop
.3565					_DTPLPExit:
.3565	68		pla				pla
.3566	a8		tay				tay
.3567	60		rts				rts
.3568					ListOutputCharacter:
.3568	85 32		sta $32				sta 	tempShort
.356a	48		pha				pha
.356b	8a		txa				txa
.356c	48		pha				pha
.356d	98		tya				tya
.356e	48		pha				pha
.356f	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3571	c9 20		cmp #$20			cmp 	#32
.3573	b0 0c		bcs $3581			bcs		_LOCHiBit
.3575	09 40		ora #$40			ora 	#64 						; conversion
.3577	c9 40		cmp #$40			cmp 	#64							; make l/c
.3579	f0 06		beq $3581			beq 	_LOCHiBit
.357b	c9 5b		cmp #$5b			cmp 	#65+26
.357d	b0 02		bcs $3581			bcs 	_LOCHiBit
.357f	69 20		adc #$20			adc 	#32
.3581					_LOCHiBit:
.3581	20 8a 35	jsr $358a			jsr 	_LOCCallVector				; call o/p handler routine
.3584	68		pla				pla
.3585	a8		tay				tay
.3586	68		pla				pla
.3587	aa		tax				tax
.3588	68		pla				pla
.3589					_LOCExit:
.3589	60		rts				rts
.358a					_LOCCallVector:
.358a	6c 1b 0c	jmp ($0c1b)			jmp 	(deTokeniseVector)
.358d					deTokenPrint:
.358d	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.358f	30 06		bmi $3597			bmi 	_dtpInk
.3591	a2 16		ldx #$16		ldx	#22
.3593	20 bf 14	jsr $14bf		jsr	deviceHandler
.3596	60		rts				rts
.3597	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3599	f0 08		beq $35a3			beq 	_dtpCR						; except $FF => CRLF
.359b	29 07		and #$07			and 	#7
.359d	a2 08		ldx #$08		ldx	#8
.359f	20 bf 14	jsr $14bf		jsr	deviceHandler
.35a2	60		rts				rts
.35a3					_dtpCR:
.35a3	a2 04		ldx #$04		ldx	#4
.35a5	20 bf 14	jsr $14bf		jsr	deviceHandler
.35a8	60		rts				rts
.35a9					DTSwitchMode:
.35a9	cd 1d 0c	cmp $0c1d			cmp 	LastCharacterClass 			; if changed, update character class
.35ac	f0 04		beq $35b2			beq 	_DTSMNoChange
.35ae	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.35b1					_DTSMExit:
.35b1	60		rts				rts
.35b2					_DTSMNoChange:
.35b2	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.35b4	f0 fb		beq $35b1			beq 	_DTSMExit 					; need a space.
.35b6	a9 20		lda #$20			lda 	#" "
.35b8	4c 68 35	jmp $3568			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.35bb					DTIdentifier:
.35bb	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.35bd	20 a9 35	jsr $35a9			jsr 	DTSwitchMode
.35c0	a9 87		lda #$87			lda 	#LTYIdentifier
.35c2	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.35c5					_DTILoop:
.35c5	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.35c7	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.35c9	d0 02		bne $35cd			bne 	_DTINotUS
.35cb	a9 5f		lda #$5f			lda 	#"_"
.35cd					_DTINotUS:
.35cd	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.35d0	c8		iny				iny
.35d1	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.35d3	c9 3a		cmp #$3a			cmp 	#$3A
.35d5	90 ee		bcc $35c5			bcc 	_DTILoop
.35d7	c8		iny				iny
.35d8	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.35da	f0 25		beq $3601			beq 	_DTIExit 					; no postfix.
.35dc	48		pha				pha
.35dd	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.35df	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.35e2	a9 82		lda #$82			lda 	#LTYPunctuation
.35e4	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.35e7	68		pla				pla
.35e8	c9 3b		cmp #$3b			cmp 	#$3B
.35ea	f0 10		beq $35fc			beq 	_DTIArray
.35ec	4a		lsr a				lsr 	a 							; array flag in C
.35ed	08		php				php
.35ee	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.35f0	f0 02		beq $35f4			beq 	_DTIDollar
.35f2	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.35f4					_DTIDollar:
.35f4	49 24		eor #$24			eor 	#"$"
.35f6	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.35f9	28		plp				plp
.35fa	90 05		bcc $3601			bcc 	_DTIExit
.35fc					_DTIArray:
.35fc	a9 28		lda #$28			lda 	#"("
.35fe	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.3601					_DTIExit:
.3601	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3602					DTDecodeToken:
.3602	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3604	b1 28		lda ($28),y			lda 	(codePtr),y
.3606	c9 84		cmp #$84			cmp 	#$84
.3608	b0 05		bcs $360f			bcs 	_DTNotShift
.360a	29 03		and #$03			and 	#3 							; get the shift 1..3
.360c	0a		asl a				asl 	a 							; put 2 x in X
.360d	aa		tax				tax
.360e	c8		iny				iny
.360f					_DTNotShift:
.360f	bd 11 39	lda $3911,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3612	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3614	bd 12 39	lda $3912,x			lda 	TokenTableAddress+1,x
.3617	85 2b		sta $2b				sta 	temp0+1
.3619	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.361b	c8		iny				iny 								; consume it.
.361c	aa		tax				tax
.361d	98		tya				tya
.361e	48		pha				pha
.361f					_DTFindText:
.361f	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3621	f0 11		beq $3634			beq 	_DTFoundText
.3623	ca		dex				dex
.3624	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3626	38		sec				sec
.3627	b1 2a		lda ($2a),y			lda 	(temp0),y
.3629	65 2a		adc $2a				adc 	temp0
.362b	85 2a		sta $2a				sta 	temp0
.362d	90 f0		bcc $361f			bcc 	_DTFindText
.362f	e6 2b		inc $2b				inc 	temp0+1
.3631	4c 1f 36	jmp $361f			jmp 	_DTFindText
.3634					_DTFoundText:
.3634	a0 01		ldy #$01			ldy 	#1 							; get first character
.3636	b1 2a		lda ($2a),y			lda 	(temp0),y
.3638	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.363a	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.363c	90 11		bcc $364f			bcc 	_DTIsPunctuation
.363e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3640	b0 0d		bcs $364f			bcs 	_DTIsPunctuation
.3642	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3644	20 a9 35	jsr $35a9			jsr 	DTSwitchMode
.3647	a9 83		lda #$83			lda 	#LTYKeyword
.3649	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.364c	4c 59 36	jmp $3659			jmp 	_DTPrint
.364f					_DTIsPunctuation:
.364f	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3651	20 a9 35	jsr $35a9			jsr 	DTSwitchMode
.3654	a9 82		lda #$82			lda 	#LTYPunctuation
.3656	20 68 35	jsr $3568			jsr 	ListOutputCharacter
.3659					_DTPrint:
.3659	a9 01		lda #$01			lda 	#1 							; fix case.
.365b	20 3e 35	jsr $353e			jsr 	DTPrintLengthPrefix 		; print it out.
.365e	a0 00		ldy #$00			ldy 	#0
.3660	b1 2a		lda ($2a),y			lda 	(temp0),y
.3662	a8		tay				tay
.3663	b1 2a		lda ($2a),y			lda 	(temp0),y
.3665	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3667	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3669	90 04		bcc $366f			bcc 	_DTIsNowPunctuation
.366b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.366d	90 05		bcc $3674			bcc 	_DTPExit
.366f					_DTIsNowPunctuation:
.366f	a9 01		lda #$01			lda 	#1
.3671	8d 1d 0c	sta $0c1d			sta		LastCharacterClass
.3674					_DTPExit:
.3674	68		pla				pla
.3675	a8		tay				tay
.3676	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c20					currentSet:
>0c20							.fill 	1
.3677					TokenSearch:
.3677	8a		txa				txa
.3678	48		pha				pha
.3679	98		tya				tya
.367a	48		pha				pha
.367b	a9 00		lda #$00			lda 	#0
.367d	8d 20 0c	sta $0c20			sta 	currentSet
.3680					_TSLoop:
.3680	ad 20 0c	lda $0c20			lda 	currentSet 					; 2 x currentset in X
.3683	0a		asl a				asl 	a
.3684	aa		tax				tax
.3685	bd 11 39	lda $3911,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3688	85 2a		sta $2a				sta 	temp0
.368a	bd 12 39	lda $3912,x			lda 	TokenTableAddress+1,x
.368d	85 2b		sta $2b				sta 	temp0+1
.368f	20 b6 36	jsr $36b6			jsr 	TokenSearchOne 				; search one table
.3692	b0 0d		bcs $36a1			bcs 	_TSFound 					; found a token.
.3694	ee 20 0c	inc $0c20			inc 	currentSet 					; next set
.3697	ad 20 0c	lda $0c20			lda 	currentSet
.369a	c9 04		cmp #$04			cmp 	#4
.369c	d0 e2		bne $3680			bne 	_TSLoop 					; back if not done all four.
.369e	18		clc				clc 								; clear carry and exit
.369f	90 10		bcc $36b1			bcc 	_TSExit
.36a1					_TSFound:
.36a1	48		pha				pha 								; save token
.36a2	ad 20 0c	lda $0c20			lda 	currentSet					; if set zero no shift
.36a5	f0 05		beq $36ac			beq 	_TSNoShift
.36a7	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.36a9	20 67 37	jsr $3767			jsr 	TokenWrite
.36ac					_TSNoShift:
.36ac	68		pla				pla 								; get token back
.36ad	20 67 37	jsr $3767			jsr 	TokenWrite 					; write it
.36b0	38		sec				sec 								; carry set indicating success
.36b1					_TSExit:
.36b1	68		pla				pla
.36b2	a8		tay				tay
.36b3	68		pla				pla
.36b4	aa		tax				tax
.36b5	60		rts				rts
.36b6					TokenSearchOne:
.36b6	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.36b8					_TSOLoop:
.36b8	a0 00		ldy #$00			ldy 	#0
.36ba	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.36bc	f0 26		beq $36e4			beq 	_TSOFail 					; if zero, end of table
.36be	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.36c1	f0 11		beq $36d4			beq 	_TSOCheckText
.36c3					_TSONext:
.36c3	e8		inx				inx 								; bump token
.36c4	a0 00		ldy #$00			ldy 	#0							; get length
.36c6	b1 2a		lda ($2a),y			lda 	(temp0),y
.36c8	38		sec				sec
.36c9	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.36cb	85 2a		sta $2a				sta 	temp0
.36cd	90 e9		bcc $36b8			bcc 	_TSOLoop
.36cf	e6 2b		inc $2b				inc 	temp0+1
.36d1	4c b8 36	jmp $36b8			jmp 	_TSOLoop
.36d4					_TSOCheckText:
.36d4	a8		tay				tay 								; compare length downto 1.
.36d5					_TSOCheckLoop:
.36d5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.36d7	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.36da	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.36dc	d0 e5		bne $36c3			bne 	_TSONext 					; different goto next.
.36de	88		dey				dey 								; do all
.36df	d0 f4		bne $36d5			bne 	_TSOCheckLoop
.36e1	8a		txa				txa 								; return token in A and carry set
.36e2	38		sec				sec
.36e3	60		rts				rts
.36e4					_TSOFail:
.36e4	18		clc				clc
.36e5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.36e6					TokTest:
.36e6	a2 ff		ldx #$ff				ldx 	#$FF
.36e8	9a		txs					txs
.36e9	a9 06		lda #$06			lda 	#(TokenText1) & $FF
.36eb	85 28		sta $28				sta 	codePtr
.36ed	a9 37		lda #$37			lda 	#(TokenText1) >> 8
.36ef	85 29		sta $29				sta 	1+(codePtr)
.36f1	20 06 37	jsr $3706				jsr 	Tokenise
.36f4	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.36f6	bd 06 37	lda $3706,x	_TokCheck:	lda 	TokenBytes1,x
.36f9	dd 24 0c	cmp $0c24,x				cmp 	tokenBuffer,x
.36fc	d0 fe		bne $36fc	_TokFail:	bne 	_TokFail	 		; error.
.36fe	e8		inx					inx
.36ff	c9 80		cmp #$80				cmp 	#$80
.3701	d0 f3		bne $36f6				bne 	_TokCheck
.3703	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3706					TokenText1:
.3706					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c21					tokenHeader:
>0c21							.fill 	3
.0c24					tokenBuffer:
>0c24							.fill 	256
.0d24					tokenBufferIndex:
>0d24							.fill 	1
.3706					Tokenise:
.3706	20 80 37	jsr $3780			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3709					TokeniseASCIIZ:
.3709	20 91 37	jsr $3791			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.370c	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.370e	8d 24 0d	sta $0d24			sta 	tokenBufferIndex
.3711	a8		tay				tay 								; start pointer
.3712	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3714	8d 24 0c	sta $0c24			sta 	tokenBuffer
.3717					_TokLoop:
.3717	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3719	f0 46		beq $3761			beq 	_TokExit 					; if zero, then exit.
.371b	c8		iny				iny 								; skip over spaces.
.371c	c9 20		cmp #$20			cmp 	#" "
.371e	f0 f7		beq $3717			beq 	_TokLoop
.3720	88		dey				dey 								; point back to character.
.3721	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3723	f0 18		beq $373d			beq 	_TokHexConst
.3725	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3727	f0 23		beq $374c			beq 	_TokQString
.3729	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.372b	b0 26		bcs $3753			bcs 	_TokPunctuation
.372d	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.372f	b0 29		bcs $375a			bcs 	_TokIdentifier
.3731	c9 3a		cmp #$3a			cmp 	#"9"+1
.3733	b0 1e		bcs $3753			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3735	c9 30		cmp #$30			cmp 	#"0"
.3737	90 1a		bcc $3753			bcc 	_TokPunctuation 			; < 0, punctuation.
.3739	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.373b	d0 08		bne $3745			bne 	_TokConst
.373d					_TokHexConst:
.373d	c8		iny				iny									; consume token.
.373e	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3740	20 67 37	jsr $3767			jsr 	TokenWrite
.3743	a9 10		lda #$10			lda 	#16
.3745					_TokConst:
.3745	20 4f 38	jsr $384f			jsr 	TokeniseInteger
.3748	b0 cd		bcs $3717			bcs 	_TokLoop
.374a	90 18		bcc $3764			bcc 	_TokFail
.374c					_TokQString:
.374c	20 e5 38	jsr $38e5			jsr 	TokeniseString
.374f	b0 c6		bcs $3717			bcs 	_TokLoop
.3751	90 11		bcc $3764			bcc 	_TokFail
.3753					_TokPunctuation:
.3753	20 c4 38	jsr $38c4			jsr 	TokenisePunctuation
.3756	b0 bf		bcs $3717			bcs 	_TokLoop
.3758	90 0a		bcc $3764			bcc 	_TokFail
.375a					_TokIdentifier:
.375a	20 c0 37	jsr $37c0			jsr 	TokeniseIdentifier
.375d	b0 b8		bcs $3717			bcs 	_TokLoop
.375f	90 03		bcc $3764			bcc 	_TokFail
.3761					_TokExit:
.3761	a9 01		lda #$01			lda 	#1
.3763	60		rts				rts
.3764					_TokFail:
.3764	a9 00		lda #$00			lda 	#0
.3766	60		rts				rts
.3767					TokenWrite:
.3767	85 32		sta $32				sta 	tempShort 					; save XA
.3769	48		pha				pha
.376a	8a		txa				txa
.376b	48		pha				pha
.376c	a5 32		lda $32				lda 	tempShort
.376e	ae 24 0d	ldx $0d24			ldx 	tokenBufferIndex 			; geet index
.3771	9d 24 0c	sta $0c24,x			sta 	tokenBuffer,x 				; write byte to buffer
.3774	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3776	9d 25 0c	sta $0c25,x			sta 	tokenBuffer+1,x
.3779	ee 24 0d	inc $0d24			inc 	tokenBufferIndex 			; bump index
.377c	68		pla				pla
.377d	aa		tax				tax
.377e	68		pla				pla
.377f	60		rts				rts
.3780					TokeniseMakeASCIIZ:
.3780	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3782	b1 28		lda ($28),y			lda 	(codePtr),y
.3784	a8		tay				tay
.3785	c8		iny				iny 								; +1, the NULL goes here.
.3786	a9 00		lda #$00			lda 	#0
.3788	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.378a	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.378c	d0 02		bne $3790			bne 	_TMKAExit
.378e	e6 29		inc $29				inc 	codePtr+1
.3790					_TMKAExit:
.3790	60		rts				rts
.3791					TokeniseFixCase:
.3791	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3793	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3795					_TFCFlipQ:
.3795	8a		txa				txa
.3796	49 01		eor #$01			eor 	#1
.3798	aa		tax				tax
.3799					_TFCLoop:
.3799	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.379b	f0 22		beq $37bf			beq 	_TFCExit 					; if zero exit.
.379d	c9 20		cmp #$20			cmp 	#32 						; if control
.379f	90 1a		bcc $37bb			bcc 	_TFCControl
.37a1	c8		iny				iny 								; preconsume
.37a2	c9 22		cmp #$22			cmp 	#'"'
.37a4	f0 ef		beq $3795			beq 	_TFCFlipQ
.37a6	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.37a8	90 ef		bcc $3799			bcc 	_TFCLoop
.37aa	c9 7b		cmp #$7b			cmp 	#"z"+1
.37ac	b0 eb		bcs $3799			bcs 	_TFCLoop
.37ae	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.37b0	d0 e7		bne $3799			bne 	_TFCLoop
.37b2	88		dey				dey
.37b3	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.37b5					_TFCWrite:
.37b5	91 28		sta ($28),y			sta 	(codePtr),y
.37b7	c8		iny				iny
.37b8	4c 99 37	jmp $3799			jmp 	_TFCLoop
.37bb					_TFCControl:
.37bb	a9 20		lda #$20			lda 	#" "
.37bd	d0 f6		bne $37b5			bne 	_TFCWrite
.37bf					_TFCExit:
.37bf	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.37c0					TokeniseIdentifier:
.37c0	a2 00		ldx #$00			ldx 	#0
.37c2					_TICopyID:
.37c2	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.37c4	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.37c6	f0 16		beq $37de			beq 	_TICopyUnderscore
.37c8	c9 2e		cmp #$2e			cmp 	#"."
.37ca	f0 14		beq $37e0			beq 	_TICopyIn
.37cc	c9 30		cmp #$30			cmp 	#"0"
.37ce	90 1b		bcc $37eb			bcc 	_TIEndCopy
.37d0	c9 3a		cmp #$3a			cmp 	#"9"+1
.37d2	90 0c		bcc $37e0			bcc 	_TICopyIn
.37d4	c9 41		cmp #$41			cmp 	#"A"
.37d6	90 13		bcc $37eb			bcc 	_TIEndCopy
.37d8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.37da	b0 0f		bcs $37eb			bcs		_TIEndCopy
.37dc	90 02		bcc $37e0			bcc 	_TICopyIn
.37de					_TICopyUnderScore:
.37de	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.37e0					_TICopyIn:
.37e0	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.37e1	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.37e4	8e cf 0a	stx $0acf			stx 	convertBuffer
.37e7	c8		iny				iny 								; next character
.37e8	4c c2 37	jmp $37c2			jmp 	_TICopyID 					; loop round
.37eb					_TIEndCopy:
.37eb	a9 24		lda #$24			lda 	#"$"
.37ed	20 42 38	jsr $3842			jsr 	TIDCheckCopy
.37f0	a9 23		lda #$23			lda 	#"#"
.37f2	20 42 38	jsr $3842			jsr 	TIDCheckCopy
.37f5	a9 28		lda #$28			lda 	#"("
.37f7	20 42 38	jsr $3842			jsr 	TIDCheckCopy
.37fa	20 77 36	jsr $3677			jsr 	TokenSearch 				; is it a token
.37fd	b0 41		bcs $3840			bcs 	_TIExit 					; if so, then exit.
.37ff	98		tya				tya
.3800	48		pha				pha
.3801	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3803	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3806	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3809	c9 28		cmp #$28			cmp 	#"("
.380b	d0 02		bne $380f			bne 	_TINotArray
.380d	ca		dex				dex 								; yes, remove it and convert to array.
.380e	c8		iny				iny
.380f					_TINotArray:
.380f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3812	c9 24		cmp #$24			cmp 	#"$"
.3814	d0 03		bne $3819			bne 	_TINotString
.3816	ca		dex				dex
.3817	c8		iny				iny
.3818	c8		iny				iny
.3819					_TINotString:
.3819	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.381c	c9 23		cmp #$23			cmp 	#"#"
.381e	d0 05		bne $3825			bne 	_TINotFloat
.3820	ca		dex				dex
.3821	c8		iny				iny
.3822	c8		iny				iny
.3823	c8		iny				iny
.3824	c8		iny				iny
.3825					_TINotFloat:
.3825	e8		inx				inx 								; write end marker for identifier.
.3826	98		tya				tya
.3827	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.382a	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.382d	a2 01		ldx #$01			ldx 	#1
.382f					_TIOutput:
.382f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3832	29 3f		and #$3f			and 	#$3F
.3834	48		pha				pha
.3835	20 67 37	jsr $3767			jsr 	TokenWrite
.3838	e8		inx				inx
.3839	68		pla				pla
.383a	c9 3a		cmp #$3a			cmp 	#$3A
.383c	90 f1		bcc $382f			bcc 	_TIOutput
.383e	68		pla				pla
.383f	a8		tay				tay
.3840					_TIExit:
.3840	38		sec				sec 								; this can't fail.
.3841	60		rts				rts
.3842					TIDCheckCopy:
.3842	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3844	d0 08		bne $384e			bne 	_TIDCCExit
.3846	e8		inx				inx
.3847	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.384a	8e cf 0a	stx $0acf			stx 	convertBuffer
.384d	c8		iny				iny
.384e					_TIDCCExit:
.384e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.384f					TokeniseInteger:
.384f	85 2c		sta $2c				sta 	temp1 						; save base
.3851	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3853	8e cf 0a	stx $0acf			stx 	convertBuffer
.3856					_TIGetChars:
.3856	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3858	c9 30		cmp #$30			cmp 	#"0"
.385a	90 1f		bcc $387b			bcc 	_TIEndGet
.385c	c9 3a		cmp #$3a			cmp 	#"9"+1
.385e	90 10		bcc $3870			bcc 	_TIHaveChar
.3860	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3862	c9 0a		cmp #$0a			cmp 	#10
.3864	f0 15		beq $387b			beq 	_TIEndGet
.3866	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3868	c9 41		cmp #$41			cmp 	#"A"
.386a	90 0f		bcc $387b			bcc 	_TIEndGet
.386c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.386e	b0 0b		bcs $387b			bcs 	_TIEndGet
.3870					_TIHaveChar:
.3870	e8		inx				inx 								; write into buffer.
.3871	8e cf 0a	stx $0acf			stx 	convertBuffer
.3874	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3877	c8		iny				iny 								; next char
.3878	4c 56 38	jmp $3856			jmp 	_TIGetChars
.387b					_TIEndGet:
.387b	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.387d	f0 1c		beq $389b			beq 	_TIFail
.387f	98		tya				tya
.3880	48		pha				pha
.3881	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3883	85 2a		sta $2a				sta 	temp0
.3885	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3887	85 2b		sta $2b				sta 	1+(temp0)
.3889	a9 00		lda #$00			lda 	#0 							; stack level 0
.388b	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.388d	a2 14		ldx #$14		ldx	#20
.388f	20 8f 31	jsr $318f		jsr	mainHandler
.3892	68		pla				pla
.3893	a8		tay				tay
.3894	90 05		bcc $389b			bcc 	_TIFail 					; didn't convert.
.3896	20 9d 38	jsr $389d			jsr 	TIRecursiveOut 				; recursive output ?
.3899	38		sec				sec
.389a	60		rts				rts
.389b					_TIFail:
.389b	18		clc				clc
.389c	60		rts				rts
.389d					TIRecursiveOut:
.389d	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.389f	29 3f		and #$3f			and 	#$3F
.38a1	09 40		ora #$40			ora 	#$40
.38a3	48		pha				pha
.38a4	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.38a6	29 c0		and #$c0			and 	#$C0
.38a8	05 58		ora $58				ora 	esInt1
.38aa	05 60		ora $60				ora 	esInt2
.38ac	05 68		ora $68				ora 	esInt3
.38ae	f0 10		beq $38c0			beq 	_TIRONoRecursion
.38b0	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.38b2					_TIROShift:
.38b2	46 68		lsr $68				lsr 	esInt3
.38b4	66 60		ror $60				ror 	esInt2
.38b6	66 58		ror $58				ror 	esInt1
.38b8	66 50		ror $50				ror 	esInt0
.38ba	ca		dex				dex
.38bb	d0 f5		bne $38b2			bne 	_TIROShift
.38bd	20 9d 38	jsr $389d			jsr 	TIRecursiveOut 				; call recursively
.38c0					_TIRONoRecursion:
.38c0	68		pla				pla 								; pull the old bit.
.38c1	4c 67 37	jmp $3767			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.38c4					TokenisePunctuation:
.38c4	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.38c6	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.38c9	c8		iny				iny
.38ca	b1 28		lda ($28),y			lda 	(codePtr),y
.38cc	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.38cf	c8		iny				iny 								; Y is +2
.38d0	a9 02		lda #$02			lda 	#2 							; 2 character string.
.38d2	8d cf 0a	sta $0acf			sta 	convertBuffer
.38d5	20 77 36	jsr $3677			jsr 	TokenSearch 				; search for that token.
.38d8	b0 0a		bcs $38e4			bcs 	_TIFound
.38da	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.38dd	88		dey				dey 								; Y is now +1
.38de	20 77 36	jsr $3677			jsr 	TokenSearch 				; search for that token.
.38e1	b0 01		bcs $38e4			bcs 	_TIFound
.38e3	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.38e4					_TIFound:
.38e4	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.38e5					TokeniseString:
.38e5	c8		iny				iny 								; skip opening quote
.38e6	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.38e8	84 2a		sty $2a				sty 	temp0 						; save start.
.38ea					_TSGetLength:
.38ea	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.38ec	f0 21		beq $390f			beq 	_TSFail						; end of line, fail
.38ee	c8		iny				iny
.38ef	e8		inx				inx
.38f0	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.38f2	d0 f6		bne $38ea			bne 	_TSGetLength
.38f4	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.38f6	20 67 37	jsr $3767			jsr 	TokenWrite
.38f9	8a		txa				txa 								; output length
.38fa	20 67 37	jsr $3767			jsr 	TokenWrite
.38fd	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.38ff	e0 00		cpx #$00			cpx 	#0 							; check ended
.3901	f0 09		beq $390c			beq 	_TSExit
.3903					_TSOutput:
.3903	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3905	20 67 37	jsr $3767			jsr 	TokenWrite
.3908	c8		iny				iny
.3909	ca		dex				dex
.390a	d0 f7		bne $3903			bne 	_TSOutput
.390c					_TSExit:
.390c	c8		iny				iny 								; skip ending quote
.390d	38		sec				sec 								; return CS.
.390e	60		rts				rts
.390f					_TSFail:
.390f	18		clc				clc
.3910	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3911					TokenTableAddress:
>3911	19 39						.word 	Group0Text
>3913	e6 3a						.word 	Group1Text
>3915	21 3c						.word 	Group2Text
>3917	34 3c						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3919					Group0Text:
>3919	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>391d	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3920	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3924	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3927	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>392a	01 be					.byte $01,$be                          ; $8b >
>392c	01 bc					.byte $01,$bc                          ; $8c <
>392e	01 bd					.byte $01,$bd                          ; $8d =
>3930	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3933	01 ab					.byte $01,$ab                          ; $8f +
>3935	01 ad					.byte $01,$ad                          ; $90 -
>3937	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>393a	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>393d	01 aa					.byte $01,$aa                          ; $93 *
>393f	01 af					.byte $01,$af                          ; $94 /
>3941	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3945	01 de					.byte $01,$de                          ; $96 ^
>3947	01 a1					.byte $01,$a1                          ; $97 !
>3949	01 bf					.byte $01,$bf                          ; $98 ?
>394b	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3952	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3958	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>395c	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>395f	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3967	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>396d	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3972	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3977	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>397c	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3982	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>398a	01 a8					.byte $01,$a8                          ; $a4 (
>398c	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3991	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3996	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>399b	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>39a3	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>39a8	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>39ad	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>39b3	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>39b8	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>39bd	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>39c2	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>39c9	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>39d0	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>39d5	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>39dc	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>39e3	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>39e9	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>39f0	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>39f6	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>39fe	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3a04	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3a09	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3a0f	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3a15	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3a1b	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3a20	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3a25	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3a2c	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3a33	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3a3b	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3a43	01 c0					.byte $01,$c0                          ; $c3 @
>3a45	01 fe					.byte $01,$fe                          ; $c4 ~
>3a47	01 a6					.byte $01,$a6                          ; $c5 &
>3a49	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3a4f	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3a57	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3a5b	01 a9					.byte $01,$a9                          ; $c9 )
>3a5d	01 ba					.byte $01,$ba                          ; $ca :
>3a5f	01 ac					.byte $01,$ac                          ; $cb ,
>3a61	01 bb					.byte $01,$bb                          ; $cc ;
>3a63	01 a7					.byte $01,$a7                          ; $cd '
>3a65	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3a68	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3a6d	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3a72	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3a78	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3a7c	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3a80	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3a84	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3a8a	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3a8f	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3a93	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3a99	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>3a9e	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3aa4	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>3aab	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3ab0	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3ab7	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3abc	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3ac1	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3ac6	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3aca	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3ad0	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3ad4	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3adb	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3ae1	01 ae					.byte $01,$ae                          ; $e6 .
>3ae3	01 a3					.byte $01,$a3                          ; $e7 #
>3ae5	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3ae6					Group1Text:
>3ae6	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3aec	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3af1	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3af6	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3afb	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3aff	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3b03	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3b08	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3b10	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3b14	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3b19	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3b1e	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3b22	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>3b28	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>3b2c	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>3b30	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>3b34	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>3b38	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>3b3c	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>3b40	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>3b44	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>3b48	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>3b4c	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>3b50	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>3b54	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>3b58	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>3b5c	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>3b60	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>3b64	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>3b68	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>3b6c	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>3b70	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>3b74	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>3b78	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>3b7c	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>3b80	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>3b84	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>3b88	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3b8c	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3b90	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3b94	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>3b98	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3b9c	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3ba0	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3ba4	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>3ba8	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3bac	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3bb0	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3bb4	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>3bb8	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3bbc	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3bc0	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3bc4	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>3bc8	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3bcc	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3bd0	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3bd4	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3bd8	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3bdc	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3be0	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3be4	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3be8	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3bec	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3bf0	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3bf4	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3bf8	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3bfc	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3c00	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3c04	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3c08	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3c0c	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3c10	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3c14	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3c18	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3c1c	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3c20	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3c21					Group2Text:
>3c21	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3c27	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3c2d	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3c33	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3c34					Group3Text:
>3c34	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3c3b	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3c42	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3c43					tokeniserHandler:
.3c43	7c 46 3c	jmp ($3c46,x)			jmp 	(tokeniserVectors,x)
.3c46					tokeniserVectors:
>3c46	64 34					.word Detokenise           ; index 0
>3c48	58 34					.word ListLine             ; index 2
>3c4a	e6 36					.word TokTest              ; index 4
>3c4c	06 37					.word Tokenise             ; index 6
>3c4e	09 37					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3c50					section_end_tokeniser:
.3c50					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3c50					AccessArray:
.3c50	8a		txa				txa
.3c51	48		pha				pha
.3c52	e8		inx				inx
.3c53	20 1c 3d	jsr $3d1c			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.3c56	68		pla				pla
.3c57	aa		tax				tax
.3c58	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.3c5a	85 2a		sta $2a				sta 	temp0
.3c5c	b5 58		lda $58,x			lda 	esInt1,x
.3c5e	85 2b		sta $2b				sta 	temp0+1
.3c60	8a		txa				txa
.3c61	48		pha				pha
.3c62	98		tya				tya
.3c63	48		pha				pha
.3c64					_AAFollow:
.3c64	a0 00		ldy #$00			ldy 	#0
.3c66	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c68	48		pha				pha
.3c69	c8		iny				iny
.3c6a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c6c	85 2b		sta $2b				sta 	temp0+1
.3c6e	68		pla				pla
.3c6f	85 2a		sta $2a				sta 	temp0
.3c71	e8		inx				inx 								; advance to next stack slot.
.3c72	a0 00		ldy #$00			ldy 	#0
.3c74	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.3c76	d5 50		cmp $50,x			cmp 	esInt0,x
.3c78	c8		iny				iny
.3c79	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.3c7b	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.3c7d	29 7f		and #$7f			and 	#$7F
.3c7f	f5 58		sbc $58,x			sbc 	esInt1,x
.3c81	90 50		bcc $3cd3			bcc 	_AABadIndex 				; failed on index if max index < required.
.3c83	18		clc				clc
.3c84	a5 2a		lda $2a				lda 	temp0
.3c86	69 02		adc #$02			adc 	#2
.3c88	85 2a		sta $2a				sta 	temp0
.3c8a	90 02		bcc $3c8e			bcc 	_AANoCarry
.3c8c	e6 2b		inc $2b				inc 	temp0+1
.3c8e					_AANoCarry:
.3c8e	b5 50		lda $50,x			lda 	esInt0,x
.3c90	85 2e		sta $2e				sta 	temp2
.3c92	b5 58		lda $58,x			lda 	esInt1,x
.3c94	85 2f		sta $2f				sta 	temp2+1
.3c96	ac 27 0d	ldy $0d27			ldy 	varType
.3c99	b9 76 3d	lda $3d76,y			lda 	CAActualSize-$3A,y
.3c9c	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3c9e	30 02		bmi $3ca2			bmi 	_AANotPointer
.3ca0	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3ca2					_AANotPointer:
.3ca2	20 20 3e	jsr $3e20			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.3ca5	18		clc				clc
.3ca6	a5 2a		lda $2a				lda 	temp0
.3ca8	65 2e		adc $2e				adc 	temp2
.3caa	85 2a		sta $2a				sta 	temp0
.3cac	a5 2b		lda $2b				lda 	temp0+1
.3cae	65 2f		adc $2f				adc 	temp2+1
.3cb0	85 2b		sta $2b				sta 	temp0+1
.3cb2	b5 49		lda $49,x			lda 	esType+1,x
.3cb4	30 07		bmi $3cbd			bmi 	_AAUsedAllIndices
.3cb6	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.3cb8	10 14		bpl $3cce			bpl 	_AABadDepth 				; no, too many indexes.
.3cba	4c 64 3c	jmp $3c64			jmp 	_AAFollow 					; otherwise follow them.
.3cbd					_AAUsedAllIndices:
.3cbd	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.3cbf	30 0d		bmi $3cce			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.3cc1	68		pla				pla
.3cc2	a8		tay				tay
.3cc3	68		pla				pla
.3cc4	aa		tax				tax
.3cc5	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.3cc7	95 50		sta $50,x			sta 	esInt0,x
.3cc9	a5 2b		lda $2b				lda 	temp0+1
.3ccb	95 58		sta $58,x			sta 	esInt1,x
.3ccd	60		rts				rts
.3cce					_AABadDepth:
.3cce	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.3cd0	20 e0 14	jsr $14e0		jsr	errorHandler
.3cd3					_AABadIndex:
.3cd3	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3cd5	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0d25					elementSize:
>0d25							.fill	 1
.3cd8					CreateArray:
.3cd8	20 af 3e	jsr $3eaf			jsr 	AccessSetup 				; set up the basic stuff.
.3cdb	ad 27 0d	lda $0d27			lda 	varType 					; is the variable type an array
.3cde	4a		lsr a				lsr 	a
.3cdf	90 36		bcc $3d17			bcc 	CANotArray 					; no, cause an error.
.3ce1	20 b8 3f	jsr $3fb8			jsr 	FindVariable 				; does the variable exist already
.3ce4	b0 2c		bcs $3d12			bcs 	CAFound 					; cannot redefine it.
.3ce6	20 ec 3e	jsr $3eec			jsr 	CreateVariable 				; create the variable entry.
.3ce9	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3ceb	48		pha				pha
.3cec	a5 2b		lda $2b				lda 	temp0+1
.3cee	48		pha				pha
.3cef	a2 00		ldx #$00			ldx 	#0
.3cf1	20 1c 3d	jsr $3d1c			jsr 	GetArrayDimensions 			; get the array dimensions
.3cf4	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.3cf6	20 4c 3d	jsr $3d4c			jsr 	CreateArrayLevel 			; level to YA
.3cf9	aa		tax				tax 								; level now in YX
.3cfa	68		pla				pla 								; get address back to temp0 to write.
.3cfb	85 2b		sta $2b				sta 	temp0+1
.3cfd	68		pla				pla
.3cfe	85 2a		sta $2a				sta 	temp0
.3d00	98		tya				tya 								; write YX there.
.3d01	a0 06		ldy #$06			ldy 	#6
.3d03	91 2a		sta ($2a),y			sta 	(temp0),y
.3d05	88		dey				dey
.3d06	8a		txa				txa
.3d07	91 2a		sta ($2a),y			sta 	(temp0),y
.3d09	ac 28 0d	ldy $0d28			ldy 	varEnd 						; restore Y and exit.
.3d0c	60		rts				rts
.3d0d					CASize:
.3d0d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3d0f	20 e0 14	jsr $14e0		jsr	errorHandler
.3d12					CAFound:
.3d12	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3d14	20 e0 14	jsr $14e0		jsr	errorHandler
.3d17					CANotArray:
.3d17	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3d19	20 e0 14	jsr $14e0		jsr	errorHandler
.3d1c					GetArrayDimensions:
.3d1c	ad 27 0d	lda $0d27			lda 	varType 					; push variable type on the stack.
.3d1f	48		pha				pha
.3d20	ac 28 0d	ldy $0d28			ldy 	varEnd
.3d23					_CAGetDimensions:
.3d23	8a		txa				txa 								; get the next level
.3d24	a2 06		ldx #$06		ldx	#6
.3d26	20 8f 31	jsr $318f		jsr	mainHandler
.3d29	aa		tax				tax
.3d2a	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.3d2c	29 e0		and #$e0			and 	#$E0
.3d2e	15 60		ora $60,x			ora 	esInt2,x
.3d30	15 68		ora $68,x			ora 	esInt3,x
.3d32	d0 d9		bne $3d0d			bne 	CASize
.3d34	e8		inx				inx 								; next level.
.3d35	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.3d37	c8		iny				iny
.3d38	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.3d3a	f0 e7		beq $3d23			beq 	_CAGetDimensions
.3d3c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.3d3e	d0 cd		bne $3d0d			bne 	CASize
.3d40	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.3d42	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.3d44	68		pla				pla 								; restore the variable type ($3A-$3F)
.3d45	8d 27 0d	sta $0d27			sta 	varType
.3d48	8c 28 0d	sty $0d28			sty 	varEnd 						; save exit Y value, after dimensions
.3d4b	60		rts				rts
.3d4c					CreateArrayLevel:
.3d4c	ac 27 0d	ldy $0d27			ldy 	varType
.3d4f	b9 76 3d	lda $3d76,y			lda 	CAActualSize-$3A,y
.3d52	8d 25 0d	sta $0d25			sta 	elementSize 				; get element size this level.
.3d55	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3d57	30 05		bmi $3d5e			bmi 	_CANotPointer
.3d59	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3d5b	8d 25 0d	sta $0d25			sta 	elementSize
.3d5e					_CANotPointer:
.3d5e	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.3d60	85 2a		sta $2a				sta 	temp0
.3d62	48		pha				pha
.3d63	a5 36		lda $36				lda 	lowMemory+1
.3d65	85 2b		sta $2b				sta 	temp0+1
.3d67	48		pha				pha
.3d68	20 e9 3d	jsr $3de9			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.3d6b	a0 00		ldy #$00			ldy 	#0
.3d6d	b5 50		lda $50,x			lda 	esInt0,x
.3d6f	91 2a		sta ($2a),y			sta 	(temp0),y
.3d71	c8		iny				iny
.3d72	b5 58		lda $58,x			lda 	esInt1,x
.3d74	91 2a		sta ($2a),y			sta 	(temp0),y
.3d76	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.3d78	30 06		bmi $3d80			bmi 	_CALNotLast
.3d7a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.3d7c	09 80		ora #$80			ora 	#$80
.3d7e	91 2a		sta ($2a),y			sta 	(temp0),y
.3d80					_CALNotLast:
.3d80	a9 02		lda #$02			lda 	#2
.3d82	20 a6 3d	jsr $3da6			jsr 	_CALAddTemp0
.3d85	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.3d87	95 60		sta $60,x			sta 	esInt2,x 					; count.
.3d89	b5 58		lda $58,x			lda 	esInt1,x
.3d8b	95 68		sta $68,x			sta 	esInt3,x
.3d8d					_CALClear:
.3d8d	20 b6 3d	jsr $3db6			jsr 	EraseOneElement
.3d90	ad 25 0d	lda $0d25			lda 	elementSize 				; move to next element
.3d93	20 a6 3d	jsr $3da6			jsr 	_CALAddTemp0
.3d96	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.3d98	d0 02		bne $3d9c			bne 	_CALNoBorrow
.3d9a	d6 68		dec $68,x			dec 	esInt3,x
.3d9c					_CALNoBorrow:
.3d9c	d6 60		dec $60,x			dec 	esInt2,x
.3d9e	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.3da0	10 eb		bpl $3d8d			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.3da2	68		pla				pla 								; restore the start of this into YA.
.3da3	a8		tay				tay
.3da4	68		pla				pla
.3da5	60		rts				rts
.3da6					_CALAddTemp0:
.3da6	18		clc				clc
.3da7	65 2a		adc $2a				adc 	temp0
.3da9	85 2a		sta $2a				sta 	temp0
.3dab	90 02		bcc $3daf			bcc 	_CALANoCarry
.3dad	e6 2b		inc $2b				inc 	temp0+1
.3daf					_CALANoCarry:
.3daf	60		rts				rts
.3db0					CAActualSize:
>3db0	04 04						.byte 	VarISize,VarISize
>3db2	02 02						.byte 	VarSSize,VarSSize
>3db4	06 06						.byte 	VarFSize,VarFSize
.3db6					EraseOneElement:
.3db6	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.3db8	10 09		bpl $3dc3			bpl 	_EOESubArray
.3dba	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.3dbc	ad 27 0d	lda $0d27			lda 	varType
.3dbf	20 56 3f	jsr $3f56			jsr 	ZeroTemp0Y
.3dc2	60		rts				rts
.3dc3					_EOESubArray:
.3dc3	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.3dc5	48		pha				pha
.3dc6	a5 2b		lda $2b				lda 	temp0+1
.3dc8	48		pha				pha
.3dc9	ad 25 0d	lda $0d25			lda 	elementSize 				; save element size
.3dcc	48		pha				pha
.3dcd	e8		inx				inx 								; create at next level
.3dce	20 4c 3d	jsr $3d4c			jsr 	CreateArrayLevel
.3dd1	ca		dex				dex
.3dd2	85 32		sta $32				sta 	tempShort 					; save A
.3dd4	68		pla				pla  								; restore element size.
.3dd5	8d 25 0d	sta $0d25			sta 	elementSize
.3dd8	68		pla				pla 								; restore temp0, which is where this new array level goes.
.3dd9	85 2b		sta $2b				sta 	temp0+1
.3ddb	68		pla				pla
.3ddc	85 2a		sta $2a				sta 	temp0
.3dde	98		tya				tya 								; store Y/A there
.3ddf	a0 01		ldy #$01			ldy 	#1
.3de1	91 2a		sta ($2a),y			sta 	(temp0),y
.3de3	a5 32		lda $32				lda 	tempShort
.3de5	88		dey				dey
.3de6	91 2a		sta ($2a),y			sta 	(temp0),y
.3de8	60		rts				rts
.3de9					AllocateArraySpace:
.3de9	18		clc				clc 								; element count + 1 => temp2.
.3dea	b5 50		lda $50,x			lda 	esInt0,x
.3dec	69 01		adc #$01			adc 	#1
.3dee	85 2e		sta $2e				sta 	temp2
.3df0	b5 58		lda $58,x			lda 	esInt1,x
.3df2	69 00		adc #$00			adc 	#0
.3df4	85 2f		sta $2f				sta 	temp2+1
.3df6	ad 25 0d	lda $0d25			lda 	elementSize 				; bytes per element
.3df9	20 20 3e	jsr $3e20			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.3dfc	18		clc				clc 								; add 2 for 'max element' byte.
.3dfd	a5 2e		lda $2e				lda 	temp2
.3dff	69 02		adc #$02			adc 	#2
.3e01	85 2e		sta $2e				sta 	temp2
.3e03	90 02		bcc $3e07			bcc 	_AASNoCarry
.3e05	e6 2f		inc $2f				inc 	temp2+1
.3e07					_AASNoCarry:
.3e07	18		clc				clc 								; add to low memory, allocating space.
.3e08	a5 35		lda $35				lda 	lowMemory
.3e0a	65 2e		adc $2e				adc 	temp2
.3e0c	85 35		sta $35				sta 	lowMemory
.3e0e	a5 36		lda $36				lda 	lowMemory+1
.3e10	65 2f		adc $2f				adc 	temp2+1
.3e12	85 36		sta $36				sta 	lowMemory+1
.3e14	b0 05		bcs $3e1b			bcs 	_AASFail 					; out of memory as adding causes wrapround
.3e16	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.3e18	b0 01		bcs $3e1b			bcs 	_AASFail
.3e1a	60		rts				rts
.3e1b					_AASFail:
.3e1b	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3e1d	20 e0 14	jsr $14e0		jsr	errorHandler
.3e20					MultiplyTemp2ByA:
.3e20	48		pha				pha
.3e21	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.3e23	85 30		sta $30				sta 	temp3
.3e25	a5 2f		lda $2f				lda 	temp2+1
.3e27	85 31		sta $31				sta 	temp3+1
.3e29	68		pla				pla
.3e2a	06 2e		asl $2e				asl 	temp2 						; double it.
.3e2c	26 2f		rol $2f				rol 	temp2+1
.3e2e	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3e30	f0 15		beq $3e47			beq 	_MTBAExit
.3e32	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.3e34	d0 0d		bne $3e43			bne 	_MTBANotFloat
.3e36	18		clc				clc 								; so this will make it x 3
.3e37	a5 2e		lda $2e				lda 	temp2
.3e39	65 30		adc $30				adc 	temp3
.3e3b	85 2e		sta $2e				sta 	temp2
.3e3d	a5 2f		lda $2f				lda 	temp2+1
.3e3f	65 31		adc $31				adc 	temp3+1
.3e41	85 2f		sta $2f				sta 	temp2+1
.3e43					_MTBANotFloat:
.3e43	06 2e		asl $2e				asl 	temp2 						; double it.
.3e45	26 2f		rol $2f				rol 	temp2+1
.3e47					_MTBAExit:
.3e47	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0d26					varHash:
>0d26							.fill	1
.0d27					varType:
>0d27							.fill 	1
.0d28					varEnd:
>0d28							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3e48					AccessVariable:
.3e48	aa		tax				tax 								; stack in X
.3e49	c8		iny				iny									; look at second character
.3e4a	b1 28		lda ($28),y			lda 	(codePtr),y
.3e4c	88		dey				dey
.3e4d	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3e4f	d0 15		bne $3e66			bne 	_AVLong 					; no, always use the hash tables.
.3e51	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3e53	38		sec				sec 	 							; make it 0-25
.3e54	e9 01		sbc #$01			sbc 	#1
.3e56	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3e57	0a		asl a				asl 	a
.3e58	95 50		sta $50,x			sta 	esInt0,x
.3e5a	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3e5c	95 58		sta $58,x			sta 	esInt1,x
.3e5e	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3e60	95 48		sta $48,x			sta 	esType,x
.3e62	c8		iny				iny 								; skip over the variable reference in the code.
.3e63	c8		iny				iny  								; (1 letter, 1 type)
.3e64	8a		txa				txa 								; stack in A to return.
.3e65	60		rts				rts
.3e66					_AVLong:
.3e66	8a		txa				txa
.3e67	48		pha				pha
.3e68	20 af 3e	jsr $3eaf			jsr 	AccessSetup 				; set up the basic information we need for later
.3e6b	20 b8 3f	jsr $3fb8			jsr 	FindVariable 				; does the variable exist already ?
.3e6e	b0 0e		bcs $3e7e			bcs 	_AVFound 					; yes, then its found
.3e70	ad 27 0d	lda $0d27			lda 	varType 					; otherwise, is the variable type an array
.3e73	4a		lsr a				lsr 	a
.3e74	90 05		bcc $3e7b			bcc 	_AVCanCreate 				; if not, we can autocreate
.3e76	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3e78	20 e0 14	jsr $14e0		jsr	errorHandler
.3e7b					_AVCanCreate:
.3e7b	20 ec 3e	jsr $3eec			jsr 	CreateVariable 				; variable does not exist, create it.
.3e7e					_AVFound:
.3e7e	68		pla				pla
.3e7f	aa		tax				tax
.3e80	18		clc				clc 								; copy temp0 (variable record address)
.3e81	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3e83	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3e85	95 50		sta $50,x			sta 	esInt0,x
.3e87	a5 2b		lda $2b				lda 	temp0+1
.3e89	69 00		adc #$00			adc 	#0
.3e8b	95 58		sta $58,x			sta 	esInt1,x
.3e8d	a9 00		lda #$00			lda 	#0
.3e8f	95 60		sta $60,x			sta 	esInt2,x
.3e91	95 68		sta $68,x			sta 	esInt3,x
.3e93	ac 27 0d	ldy $0d27			ldy 	varType 					; get the type ID from the type.
.3e96	b9 6f 3e	lda $3e6f,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3e99	95 48		sta $48,x			sta 	esType,x
.3e9b	ac 28 0d	ldy $0d28			ldy 	varEnd 						; restore Y
.3e9e	ad 27 0d	lda $0d27			lda 	VarType 					; get variable type, put LSB into C
.3ea1	4a		lsr a				lsr 	a
.3ea2	90 03		bcc $3ea7			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3ea4	20 50 3c	jsr $3c50			jsr 	AccessArray 				; array lookup. if LSB was set.
.3ea7					_AVNotArray:
.3ea7	8a		txa				txa 								; return stack in A and return
.3ea8	60		rts				rts
.3ea9					_AVTypeTable:
>3ea9	80 80						.byte 	$80,$80						; integer
>3eab	c0 c0						.byte 	$C0,$C0 					; string
>3ead	81 81						.byte 	$81,$81 					; float
.3eaf					AccessSetup:
.3eaf	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3eb1	8d 26 0d	sta $0d26			sta 	varHash
.3eb4	98		tya				tya
.3eb5	48		pha				pha
.3eb6	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3eb8	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3eba	b0 0b		bcs $3ec7			bcs 	_ASComplete
.3ebc	18		clc				clc 								; add to the hash. Might improve this.
.3ebd	6d 26 0d	adc $0d26			adc 	varHash
.3ec0	8d 26 0d	sta $0d26			sta 	varHash
.3ec3	c8		iny				iny 								; next character
.3ec4	4c b6 3e	jmp $3eb6			jmp 	_ASLoop
.3ec7					_ASComplete:
.3ec7	8d 27 0d	sta $0d27			sta 	varType 					; save variable type byte
.3eca	c8		iny				iny
.3ecb	8c 28 0d	sty $0d28			sty 	varEnd 						; save the ending position.
.3ece	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3ecf	e9 3a		sbc #$3a			sbc 	#$3A
.3ed1	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3ed2	0a		asl a				asl 	a
.3ed3	0a		asl a				asl 	a
.3ed4	0a		asl a				asl 	a 							; 2 bytes/word
.3ed5	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3ed7	ad 26 0d	lda $0d26			lda 	varHash 					; get hash
.3eda	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3edc	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3edd	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3edf	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3ee1	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3ee3	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3ee5	69 00		adc #$00			adc 	#0
.3ee7	85 3c		sta $3c				sta 	hashList+1
.3ee9	68		pla				pla
.3eea	a8		tay				tay
.3eeb	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.3eec					CreateVariable:
.3eec	98		tya				tya 								; push Y on the stack twice.
.3eed	48		pha				pha									; position in code of the new variable.
.3eee	48		pha				pha
.3eef	ae 27 0d	ldx $0d27			ldx 	varType 					; get var type 0-5 from the var type
.3ef2	bd 16 3f	lda $3f16,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3ef5	48		pha				pha 								; save length
.3ef6	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3ef8	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3efa	a5 36		lda $36				lda 	lowMemory+1
.3efc	85 2b		sta $2b				sta 	temp0+1
.3efe	68		pla				pla 								; get length
.3eff	18		clc				clc 								; add to low memory.
.3f00	65 35		adc $35				adc 	lowMemory
.3f02	85 35		sta $35				sta 	lowMemory
.3f04	90 08		bcc $3f0e			bcc 	_CVNoCarry
.3f06	e6 36		inc $36				inc 	lowMemory+1
.3f08	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3f0a	c5 34		cmp $34				cmp 	highMemory+1
.3f0c	b0 3d		bcs $3f4b			bcs 	_CVMemory
.3f0e					_CVNoCarry:
.3f0e	ad 26 0d	lda $0d26			lda 	varHash 					; store hash at offset 4.
.3f11	a0 04		ldy #$04			ldy 	#4
.3f13	91 2a		sta ($2a),y			sta 	(temp0),y
.3f15	68		pla				pla 								; offset, work out where the variable name is.
.3f16	18		clc				clc
.3f17	65 28		adc $28				adc 	codePtr
.3f19	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3f1b	91 2a		sta ($2a),y			sta 	(temp0),y
.3f1d	a5 29		lda $29				lda 	codePtr+1
.3f1f	69 00		adc #$00			adc 	#0
.3f21	c8		iny				iny
.3f22	91 2a		sta ($2a),y			sta 	(temp0),y
.3f24	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3f27	b0 03		bcs $3f2c			bcs 	_CVNotImmediate
.3f29	20 8e 3f	jsr $3f8e			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3f2c					_CVNotImmediate:
.3f2c	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3f2e	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3f30	91 2a		sta ($2a),y			sta 	(temp0),y
.3f32	c8		iny				iny
.3f33	b1 3b		lda ($3b),y			lda 	(hashList),y
.3f35	91 2a		sta ($2a),y			sta 	(temp0),y
.3f37	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3f39	91 3b		sta ($3b),y			sta 	(hashList),y
.3f3b	88		dey				dey
.3f3c	a5 2a		lda $2a				lda 	temp0
.3f3e	91 3b		sta ($3b),y			sta 	(hashList),y
.3f40	ad 27 0d	lda $0d27			lda 	varType 					; type in A
.3f43	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3f45	20 56 3f	jsr $3f56			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3f48	68		pla				pla
.3f49	a8		tay				tay
.3f4a	60		rts				rts
.3f4b					_CVMemory:
.3f4b	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3f4d	20 e0 14	jsr $14e0		jsr	errorHandler
>3f50	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3f52	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3f54	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3f56					ZeroTemp0Y:
.3f56	4a		lsr a				lsr 	a 							; bit 0 in carry
.3f57	0a		asl a				asl 	a
.3f58	b0 19		bcs $3f73			bcs 	_ZTExit 					; we don't initialise arrays.
.3f5a	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3f5c	f0 16		beq $3f74			beq 	_ZTWriteNullString 			; write "" string
.3f5e	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3f60	f0 22		beq $3f84			beq 	_ZTWriteFloat
.3f62	98		tya				tya
.3f63	48		pha				pha
.3f64	a9 00		lda #$00			lda 	#0
.3f66	91 2a		sta ($2a),y			sta 	(temp0),y
.3f68	c8		iny				iny
.3f69	91 2a		sta ($2a),y			sta 	(temp0),y
.3f6b	c8		iny				iny
.3f6c	91 2a		sta ($2a),y			sta 	(temp0),y
.3f6e	c8		iny				iny
.3f6f	91 2a		sta ($2a),y			sta 	(temp0),y
.3f71	68		pla				pla
.3f72	a8		tay				tay
.3f73					_ZTExit:
.3f73	60		rts				rts
.3f74					_ZTWriteNullString:
.3f74	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3f76	8d ce 0a	sta $0ace			sta 	NullString
.3f79	a9 ce		lda #$ce			lda 	#NullString & $FF
.3f7b	91 2a		sta ($2a),y			sta 	(temp0),y
.3f7d	a9 0a		lda #$0a			lda 	#NullString >> 8
.3f7f	c8		iny				iny
.3f80	91 2a		sta ($2a),y			sta 	(temp0),y
.3f82	88		dey				dey
.3f83	60		rts				rts
.3f84					_ZTWriteFloat:
.3f84	8a		txa				txa
.3f85	48		pha				pha
.3f86	a2 1e		ldx #$1e		ldx	#30
.3f88	20 24 19	jsr $1924		jsr	floatingpointHandler
.3f8b	68		pla				pla
.3f8c	aa		tax				tax
.3f8d	60		rts				rts
.3f8e					CloneVariableName:
.3f8e	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3f90	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f92	85 2e		sta $2e				sta 	temp2
.3f94	c8		iny				iny
.3f95	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f97	85 2f		sta $2f				sta 	temp2+1
.3f99	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3f9b	91 2a		sta ($2a),y			sta 	(temp0),y
.3f9d	88		dey				dey
.3f9e	a5 35		lda $35				lda 	lowMemory
.3fa0	91 2a		sta ($2a),y			sta 	(temp0),y
.3fa2	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3fa4					_CVNCopy:
.3fa4	b1 2e		lda ($2e),y			lda		(temp2),y
.3fa6	91 35		sta ($35),y			sta 	(lowMemory),y
.3fa8	c8		iny				iny
.3fa9	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3fab	90 f7		bcc $3fa4			bcc 	_CVNCopy
.3fad	98		tya				tya 								; add Y to low memory
.3fae	18		clc				clc
.3faf	65 35		adc $35				adc 	lowMemory
.3fb1	85 35		sta $35				sta 	lowMemory
.3fb3	90 02		bcc $3fb7			bcc 	_CVNNoCarry
.3fb5	e6 36		inc $36				inc 	lowMemory+1
.3fb7					_CVNNoCarry:
.3fb7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.3fb8					FindVariable:
.3fb8	98		tya				tya
.3fb9	48		pha				pha
.3fba	98		tya				tya 								; point temp2 to the actual name
.3fbb	18		clc				clc 								; in memory of the variable being created
.3fbc	65 28		adc $28				adc 	codePtr
.3fbe	85 2e		sta $2e				sta 	temp2
.3fc0	a5 29		lda $29				lda 	codePtr+1
.3fc2	69 00		adc #$00			adc 	#0
.3fc4	85 2f		sta $2f				sta 	temp2+1
.3fc6	a0 00		ldy #$00			ldy 	#0
.3fc8	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.3fca	85 2a		sta $2a				sta 	temp0
.3fcc	a5 3c		lda $3c				lda 	hashList+1
.3fce	85 2b		sta $2b				sta 	temp0+1
.3fd0	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3fd2	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fd4	f0 2c		beq $4002			beq 	_FVFail
.3fd6	aa		tax				tax
.3fd7	88		dey				dey		 							; get LSB
.3fd8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fda	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3fdc	86 2b		stx $2b				stx 	temp0+1
.3fde	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3fe0	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fe2	cd 26 0d	cmp $0d26			cmp 	varHash
.3fe5	d0 e9		bne $3fd0			bne 	_FVNext 					; if not, no point in checking the name.
.3fe7	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3fe8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fea	85 2d		sta $2d				sta 	temp1+1
.3fec	88		dey				dey
.3fed	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fef	85 2c		sta $2c				sta 	temp1
.3ff1	a0 00		ldy #$00			ldy 	#0
.3ff3					_FVCheck:
.3ff3	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3ff5	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3ff7	d0 d7		bne $3fd0			bne 	_FVNext		 				; fail if different.
.3ff9	c8		iny				iny
.3ffa	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3ffc	90 f5		bcc $3ff3			bcc 	_FVCheck
.3ffe	68		pla				pla
.3fff	a8		tay				tay
.4000	38		sec				sec
.4001	60		rts				rts
.4002					_FVFail:
.4002	68		pla				pla
.4003	a8		tay				tay
.4004	18		clc				clc
.4005	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4006					HashTableReset:
.4006	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4008	a9 00		lda #$00			lda 	#0
.400a					_HTRClear:
.400a	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.400d	ca		dex				dex
.400e	d0 fa		bne $400a			bne 	_HTRClear
.4010	60		rts				rts

;******  Return to file: variable/variable.asm

.4011					variableHandler:
.4011	7c 14 40	jmp ($4014,x)			jmp 	(variableVectors,x)
.4014					variableVectors:
>4014	48 3e					.word AccessVariable       ; index 0
>4016	d8 3c					.word CreateArray          ; index 2
>4018	06 40					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.401a					section_end_variable:
.401a					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d29					endStorage:
>401a							.align 	256
.4100					programMemory:
>40ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4100					section_end_footer:

;******  End of listing
