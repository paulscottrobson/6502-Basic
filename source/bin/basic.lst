
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Thu Mar 11 20:41:50 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line.
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	79 33						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 39		lda #$39			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 04		ldx #$04		ldx	#4
.1020	20 59 11	jsr $1159		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 7a 16	jsr $167a		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 87 35	jsr $3587		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.102d					assemblerHandler:
.102d	7c 30 10	jmp ($1030,x)			jmp 	(assemblerVectors,x)
.1030					assemblerVectors:

;******  Return to file: basic.asm

.1030					section_end_assembler:
.1030					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1030					ExternSave:
.1030	98		tya				tya
.1031	48		pha				pha
.1032	20 80 10	jsr $1080			jsr 	ExternGetLength 			; get length of file into A name YX
.1035	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1038	a9 01		lda #$01			lda 	#1
.103a	a2 08		ldx #$08			ldx 	#8	 						; device #8
.103c	a0 00		ldy #$00			ldy 	#0
.103e	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1041	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.1043	85 2a		sta $2a				sta 	temp0
.1045	a5 51		lda $51				lda 	esInt1+1
.1047	85 2b		sta $2b				sta 	temp0+1
.1049	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.104b	a4 52		ldy $52				ldy 	esInt1+2
.104d	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.104f	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.1052	b0 03		bcs $1057			bcs 	_ESSave
.1054	68		pla				pla
.1055	a8		tay				tay
.1056	60		rts				rts
.1057					_ESSave:
.1057	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.1059	20 76 11	jsr $1176		jsr	errorHandler
.105c					ExternLoad:
.105c	98		tya				tya
.105d	48		pha				pha
.105e	20 80 10	jsr $1080			jsr 	ExternGetLength 			; get length of file into A name YX
.1061	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1064	a9 01		lda #$01			lda 	#1
.1066	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1068	a0 00		ldy #$00			ldy 	#0
.106a	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.106d	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.106f	a4 51		ldy $51				ldy 	esInt1+1
.1071	a9 00		lda #$00			lda 	#0 							; load command
.1073	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1076	b0 03		bcs $107b			bcs 	_ESLoad
.1078	68		pla				pla
.1079	a8		tay				tay
.107a	60		rts				rts
.107b					_ESLoad:
.107b	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.107d	20 76 11	jsr $1176		jsr	errorHandler
.1080					ExternGetLength:
.1080	a5 48		lda $48				lda 	esInt0 						; length into A.
.1082	85 2a		sta $2a				sta 	temp0
.1084	a5 50		lda $50				lda 	esInt1
.1086	85 2b		sta $2b				sta 	temp0+1
.1088	a0 00		ldy #$00			ldy 	#0
.108a	b1 2a		lda ($2a),y			lda 	(temp0),y
.108c	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.108e	a4 50		ldy $50				ldy 	esInt1
.1090	e8		inx				inx 								; advance over the length pointer.
.1091	d0 01		bne $1094			bne 	_ESNoCarry
.1093	c8		iny				iny
.1094					_ESNoCarry:
.1094	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af2					bufferCount:
>0af2							.fill 	0
.0af2					bufferStorage:
>0af2							.fill 	MaxLineInputSize
.1095					IOInitialise:
.1095	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1097	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.109a	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.109c	20 ec 10	jsr $10ec			jsr 	IOInk
.109f	a9 00		lda #$00			lda 	#0
.10a1	20 00 11	jsr $1100			jsr 	IOPaper
.10a4	20 a8 10	jsr $10a8			jsr 	IOClearScreen
.10a7	60		rts				rts
.10a8					IOClearScreen:
.10a8	48		pha				pha
.10a9	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.10ab	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.10ae	68		pla				pla
.10af	60		rts				rts
.10b0					IONewLine:
.10b0	48		pha				pha
.10b1	a9 0d		lda #$0d			lda 	#13
.10b3	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.10b6	68		pla				pla
.10b7	60		rts				rts
.10b8					IOTab:
.10b8	48		pha				pha
.10b9	a9 20		lda #$20			lda 	#32
.10bb	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.10be	68		pla				pla
.10bf	60		rts				rts
.10c0					IOPrintChar:
.10c0	aa		tax				tax 								; save in X so we can save Y
.10c1	5a		phy				phy
.10c2	8a		txa				txa
.10c3	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.10c5	d0 02		bne $10c9			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.10c7	a9 14		lda #$14			lda 	#$14
.10c9					_IOPCNotBS:
.10c9	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.10cc	7a		ply				ply
.10cd	60		rts				rts
.10ce					IOInkey:
.10ce	98		tya				tya
.10cf	48		pha				pha
.10d0	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.10d3	85 32		sta $32				sta 	tempShort
.10d5	68		pla				pla
.10d6	a8		tay				tay
.10d7	a5 32		lda $32				lda 	tempShort					; no key pressed.
.10d9	f0 10		beq $10eb			beq 	_IOIExit
.10db	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.10dd	f0 0c		beq $10eb			beq 	_IOIExit
.10df	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.10e1	f0 06		beq $10e9			beq 	_IOIBackspace
.10e3	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.10e5	90 e7		bcc $10ce			bcc 	IOInkey
.10e7	b0 02		bcs $10eb			bcs 	_IOIExit
.10e9					_IOIBackspace:
.10e9	a9 08		lda #$08			lda 	#8 							; return chr(8)
.10eb					_IOIExit:
.10eb	60		rts				rts
.10ec					IOInk:
.10ec	48		pha				pha
.10ed	29 07		and #$07			and 	#7 							; 8 primaries
.10ef	aa		tax				tax
.10f0	bd f8 10	lda $10f8,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.10f3	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.10f6	68		pla				pla
.10f7	60		rts				rts
.10f8					_IOColourTable:
>10f8	90						.byte 	$90 					; 0 Black
>10f9	96						.byte 	$96 					; 1 Red
>10fa	1e						.byte 	$1E 					; 2 Green
>10fb	9e						.byte 	$9E 					; 3 Yellow
>10fc	9a						.byte 	$9A 					; 4 Blue
>10fd	9c						.byte 	$9C 					; 5 Magenta
>10fe	9f						.byte 	$9F 					; 6 Cyan
>10ff	05						.byte 	$05 					; 7 White
.1100					IOPaper:
.1100	48		pha				pha
.1101	48		pha				pha
.1102	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.1104	20 c0 10	jsr $10c0			jsr 	IOPrintChar 			; and then swap them again.
.1107	68		pla				pla
.1108	20 ec 10	jsr $10ec			jsr 	IOInk
.110b	a9 01		lda #$01			lda 	#1
.110d	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.1110	68		pla				pla
.1111	60		rts				rts
.1112					IOLocate:
.1112	48		pha				pha
.1113	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1115	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.1118	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.111a	20 21 11	jsr $1121			jsr 	_IOLoc2
.111d	68		pla				pla
.111e	a8		tay				tay
.111f	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1121					_IOLoc2:
.1121	c0 00		cpy #$00			cpy 	#0
.1123	f0 06		beq $112b			beq 	_IOLocExit
.1125	20 c0 10	jsr $10c0			jsr 	IOPrintChar
.1128	88		dey				dey
.1129	d0 f6		bne $1121			bne 	_IOLoc2
.112b					_IOLocExit:
.112b	60		rts				rts
.112c					IOInput:
.112c	a9 00		lda #$00			lda 	#0
.112e	8d f2 0a	sta $0af2			sta 	bufferCount
.1131					_IOILoop:
.1131	20 cf ff	jsr $ffcf			jsr 	$FFCF
.1134	c9 0d		cmp #$0d			cmp 	#13
.1136	f0 10		beq $1148			beq 	_IOIExit
.1138	ae f2 0a	ldx $0af2			ldx 	bufferCount
.113b	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.113d	f0 f2		beq $1131			beq 	_IOILoop
.113f	ee f2 0a	inc $0af2			inc 	bufferCount
.1142	9d f3 0a	sta $0af3,x			sta 	bufferStorage+1,x
.1145	4c 31 11	jmp $1131			jmp 	_IOILoop
.1148					_IOIExit:
.1148	a9 f2		lda #$f2			lda 	#(bufferCount) & $FF
.114a	85 2a		sta $2a				sta 	temp0
.114c	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.114e	85 2b		sta $2b				sta 	1+(temp0)
.1150	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.1151					IOReadTimer:
.1151	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.1154	48		pha				pha
.1155	8a		txa				txa
.1156	a8		tay				tay
.1157	68		pla				pla
.1158	60		rts				rts

;******  Return to file: device/device.asm

.1159					deviceHandler:
.1159	7c 5c 11	jmp ($115c,x)			jmp 	(deviceVectors,x)
.115c					deviceVectors:
>115c	a8 10					.word IOClearScreen        ; index 0
>115e	b0 10					.word IONewLine            ; index 2
>1160	95 10					.word IOInitialise         ; index 4
>1162	ec 10					.word IOInk                ; index 6
>1164	ce 10					.word IOInkey              ; index 8
>1166	2c 11					.word IOInput              ; index 10
>1168	5c 10					.word ExternLoad           ; index 12
>116a	12 11					.word IOLocate             ; index 14
>116c	00 11					.word IOPaper              ; index 16
>116e	c0 10					.word IOPrintChar          ; index 18
>1170	30 10					.word ExternSave           ; index 20
>1172	b8 10					.word IOTab                ; index 22
>1174	51 11					.word IOReadTimer          ; index 24

;******  Return to file: basic.asm

.1176					section_end_device:
.1176					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1176					ErrorHandler:
.1176	8a		txa				txa
.1177	48		pha				pha
.1178	a9 01		lda #$01			lda 	#1 							; red
.117a	a2 06		ldx #$06		ldx	#6
.117c	20 59 11	jsr $1159		jsr	deviceHandler
.117f	68		pla				pla
.1180	aa		tax				tax
.1181	a9 f2		lda #$f2			lda 	#(ErrorTextList) & $FF
.1183	85 2a		sta $2a				sta 	temp0
.1185	a9 11		lda #$11			lda 	#(ErrorTextList) >> 8
.1187	85 2b		sta $2b				sta 	1+(temp0)
.1189	ca		dex		_EHFind:dex									; errors start at 1
.118a	f0 10		beq $119c			beq 	_EHFound
.118c	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.118e	38		sec				sec
.118f	a5 2a		lda $2a				lda 	temp0
.1191	71 2a		adc ($2a),y			adc 	(temp0),y
.1193	85 2a		sta $2a				sta 	temp0
.1195	90 f2		bcc $1189			bcc 	_EHFind
.1197	e6 2b		inc $2b				inc 	temp0+1
.1199	4c 89 11	jmp $1189			jmp 	_EHFind
.119c					_EHFound:
.119c	a2 10		ldx #$10		ldx	#16
.119e	20 29 2c	jsr $2c29		jsr	mainHandler
.11a1	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.11a3	b1 28		lda ($28),y			lda 	(codePtr),y
.11a5	f0 3d		beq $11e4			beq 	_EHNoLine
.11a7	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.11a9	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.11ac	90 36		bcc $11e4			bcc 	_EHNoLine
.11ae	a9 ee		lda #$ee			lda 	#(EHAtMsg) & $FF
.11b0	85 2a		sta $2a				sta 	temp0
.11b2	a9 11		lda #$11			lda 	#(EHAtMsg) >> 8
.11b4	85 2b		sta $2b				sta 	1+(temp0)
.11b6	a2 10		ldx #$10		ldx	#16
.11b8	20 29 2c	jsr $2c29		jsr	mainHandler
.11bb	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.11bd	a2 00		ldx #$00			ldx 	#0
.11bf	b1 28		lda ($28),y			lda 	(codePtr),y
.11c1	95 48		sta $48,x			sta 	esInt0,x
.11c3	c8		iny				iny
.11c4	b1 28		lda ($28),y			lda 	(codePtr),y
.11c6	95 50		sta $50,x			sta 	esInt1,x
.11c8	a9 00		lda #$00			lda 	#0
.11ca	95 58		sta $58,x			sta 	esInt2,x
.11cc	95 60		sta $60,x			sta 	esInt3,x
.11ce	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.11d0	85 2a		sta $2a				sta 	temp0
.11d2	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11d4	85 2b		sta $2b				sta 	1+(temp0)
.11d6	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.11d8	a9 00		lda #$00			lda 	#0							; stack position zero.
.11da	a2 0c		ldx #$0c		ldx	#12
.11dc	20 29 2c	jsr $2c29		jsr	mainHandler
.11df	a2 10		ldx #$10		ldx	#16
.11e1	20 29 2c	jsr $2c29		jsr	mainHandler
.11e4					_EHNoLine:
.11e4	a2 02		ldx #$02		ldx	#2
.11e6	20 59 11	jsr $1159		jsr	deviceHandler
.11e9	a2 02		ldx #$02		ldx	#2
.11eb	20 7a 16	jsr $167a		jsr	interactionHandler
.11ee					EHAtMsg:
>11ee	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.11f2					ErrorTextList:
>11f2	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>11fa	20 6e 6f 74 20 50 72 65 73 65 6e 74
>1206	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>120e	45 72 72 6f 72
>1213	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>121b	64 69 73 61 62 6c 65 64
>1223	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>122b	6f 6e 20 66 61 69 6c 65 64
>1234	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>123c	42 79 20 5a 65 72 6f
>1243	04 53 74 6f 70				.text 4,"Stop"
>1248	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>1250	73 6d 61 74 63 68
>1256	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>125e	20 56 61 6c 75 65
>1264	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>126c	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>127a	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>1282	20 63 6f 6d 6d 61
>1288	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1290	20 72 65 66 65 72 65 6e 63 65
>129a	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>12a2	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>12b0	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>12b8	74 6f 6f 20 6c 6f 6e 67 2e
>12c1	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>12c9	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>12d6	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>12de	69 74 68 6f 75 74 20 52 45 50 45 41 54
>12eb	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>12f3	74 68 6f 75 74 20 46 4f 52
>12fc	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1304	74 68 6f 75 74 20 57 48 49 4c 45
>130f	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>1317	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1324	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>132c	54 20 69 6e 64 65 78
>1333	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>133b	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>134b	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>1353	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>1362	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>136a	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>137a	63 65 2e
>137d	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>1385	20 50 72 6f 63 65 64 75 72 65
>138f	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>1397	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>13a7	2e
>13a8	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>13b0	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>13be	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>13c6	75 69 72 65 73 20 61 72 72 61 79
>13d1	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>13d9	61 79 20 69 6e 64 65 78 2e
>13e2	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>13ea	64 61 74 61
>13ee	15 43 61 6e 6e 6f 74 20			.text 21,"Cannot tokenise line."
>13f6	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65 2e
>1404	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>140c	69 6c 65 64
>1410	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1418	69 6c 65 64
>141c	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.141d					section_end_error:
.141d					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.141d					ExtensionHandler:
.141d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.141f	d0 08		bne $1429			bne 	_ExtensionUnary 			; is passed in A.
.1421	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1423	c8		iny				iny
.1424	0a		asl a				asl 	a
.1425	aa		tax				tax
.1426	7c 27 14	jmp ($1427,x)			jmp 	(Group2Vectors-12,x)
.1429					_ExtensionUnary:
.1429	48		pha				pha 								; save stack pos in A
.142a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.142c	c8		iny				iny
.142d	0a		asl a				asl 	a
.142e	aa		tax				tax
.142f	68		pla				pla 								; restore stack pos and call group3 command.
.1430	7c 2b 14	jmp ($142b,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1433					Group2Vectors:
>1433	43 14					.word	Command_VPoke            ; $86 vpoke
>1435	46 14					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1437					Group3Vectors:
>1437	87 14					.word	Command_VPeek            ; $86 vpeek(
>1439	8a 14					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.143b					XEvaluateInteger:
.143b	8a		txa				txa
.143c	a2 06		ldx #$06		ldx	#6
.143e	20 29 2c	jsr $2c29		jsr	mainHandler
.1441	aa		tax				tax
.1442	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1443					Command_VPoke:
.1443	38		sec				sec 						; one byte , CS
.1444	b0 01		bcs $1447			bcs 	CmdVideoWrite
.1446					Command_VDoke:
.1446	18		clc				clc 						; two bytes, CC
.1447					CmdVideoWrite:
.1447	08		php				php 						; save one or two btes
.1448	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.144a	20 3b 14	jsr $143b			jsr 	XEvaluateInteger
.144d	20 47 2b	jsr $2b47			jsr 	CheckComma
.1450	e8		inx				inx
.1451	20 3b 14	jsr $143b			jsr 	XEvaluateInteger
.1454	ca		dex				dex
.1455	20 66 14	jsr $1466			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1458	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.145a	8d 23 9f	sta $9f23			sta 	$9F23
.145d	28		plp				plp 						; if it was Poke then exit
.145e	b0 05		bcs $1465			bcs 	_CVWExit
.1460	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.1462	8d 23 9f	sta $9f23			sta 	$9F23
.1465					_CVWExit:
.1465	60		rts				rts
.1466					SetUpTOSVRamAddress:
.1466	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1468	29 01		and #$01			and 	#1
.146a	15 60		ora $60,x			ora 	esInt3,x
.146c	d0 14		bne $1482			bne 	CVWValue
.146e	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.1470	8d 20 9f	sta $9f20			sta 	$9F20
.1473	b5 50		lda $50,x			lda 	esInt1,x
.1475	8d 21 9f	sta $9f21			sta	 	$9F21
.1478	b5 58		lda $58,x			lda 	esInt2,x
.147a	29 01		and #$01			and 	#1
.147c	09 10		ora #$10			ora 	#$10 				; step 1.
.147e	8d 22 9f	sta $9f22			sta 	$9F22
.1481	60		rts				rts
.1482					CVWValue:
.1482	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1484	20 76 11	jsr $1176		jsr	errorHandler
.1487					Command_VPeek:
.1487	38		sec				sec 						; one byte , CS
.1488	b0 01		bcs $148b			bcs 	CmdVideoRead
.148a					Command_VDeek:
.148a	18		clc				clc 						; two bytes, CC
.148b					CmdVideoRead:
.148b	08		php				php 						; save action on stack.
.148c	aa		tax				tax 						; save stack position
.148d	20 3b 14	jsr $143b			jsr 	XEvaluateInteger 	; address
.1490	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 	; closing right bracket.
.1493	20 66 14	jsr $1466			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1496	20 c7 2a	jsr $2ac7			jsr 	MInt32False 		; zero return.
.1499	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.149c	95 48		sta $48,x			sta 	esInt0,x
.149e	28		plp				plp 						; check if DOKE (carry was clear)
.149f	b0 05		bcs $14a6			bcs 	_CVRExit
.14a1	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.14a4	95 50		sta $50,x			sta 	esInt1,x
.14a6					_CVRExit:
.14a6	8a		txa				txa 						; return X position.
.14a7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.14a8					section_end_extension:
.14a8					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.14a8					floatingpointHandler:
.14a8	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.14aa	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: basic.asm

.14ad					section_end_floatingpoint:
.14ad					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.14ad					ColdStartEntry:
.14ad	a2 ff		ldx #$ff			ldx 	#$FF
.14af	9a		txs				txs
.14b0	a2 00		ldx #$00		ldx	#0
.14b2	20 59 11	jsr $1159		jsr	deviceHandler
.14b5	a0 ff		ldy #$ff			ldy 	#255
.14b7					_CSBanner:
.14b7	c8		iny				iny
.14b8	b9 de 14	lda $14de,y			lda 	Intro,y
.14bb	f0 14		beq $14d1			beq 	_CSStart
.14bd	c9 08		cmp #$08			cmp 	#8
.14bf	90 08		bcc $14c9			bcc 	_CSInk
.14c1	a2 12		ldx #$12		ldx	#18
.14c3	20 59 11	jsr $1159		jsr	deviceHandler
.14c6	4c b7 14	jmp $14b7			jmp 	_CSBanner
.14c9					_CSInk:
.14c9	a2 06		ldx #$06		ldx	#6
.14cb	20 59 11	jsr $1159		jsr	deviceHandler
.14ce	4c b7 14	jmp $14b7			jmp 	_CSBanner
.14d1					_CSStart:
.14d1	a2 12		ldx #$12		ldx	#18
.14d3	20 29 2c	jsr $2c29		jsr	mainHandler
.14d6	a2 02		ldx #$02		ldx	#2
.14d8	20 29 2c	jsr $2c29		jsr	mainHandler
.14db	4c f2 15	jmp $15f2			jmp 	WarmStartEntry
>14de	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>14e6	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>14f6	20 2a 2a 2a 0d 0d
>14fc	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1504	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1514	32 30 32 31 0d 0d
>151a	02 42 61 73 69 63 20				.text 	2,"Basic "
>1521	30 2e 31 33					.text "0.13"
>1525	20 28						.text 	" ("
>1527	31 31 2d 4d 61 72 2d 32				.text "11-Mar-21"
>152f	31
>1530	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1534					DeleteLine:
.1534	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1537	85 2a		sta $2a				sta 	temp0
.1539	ad c9 0a	lda $0ac9			lda 	basePage+1
.153c	85 2b		sta $2b				sta 	temp0+1
.153e	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1540	a5 48		lda $48				lda 	esInt0
.1542	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1544	d0 07		bne $154d			bne 	_DLNext
.1546	c8		iny				iny
.1547	a5 50		lda $50				lda 	esInt1
.1549	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.154b	f0 0a		beq $1557			beq 	_DLFound
.154d	20 75 15	jsr $1575	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1550	d0 ec		bne $153e			bne 	_DLLoop
.1552	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.1554	b1 2a		lda ($2a),y			lda 	(temp0),y
.1556	60		rts				rts
.1557					_DLFound:
.1557	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.1559	b1 2a		lda ($2a),y			lda 	(temp0),y
.155b	a8		tay				tay
.155c	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.155e					_DLCopyDown:
.155e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1560	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1562	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1564	d0 02		bne $1568			bne 	_DLNoCarry
.1566	e6 2b		inc $2b				inc 	temp0+1
.1568					_DLNoCarry:
.1568	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.156a	c5 35		cmp $35				cmp 	lowMemory
.156c	d0 f0		bne $155e			bne 	_DLCopyDown
.156e	a5 2b		lda $2b				lda 	temp0+1
.1570	c5 36		cmp $36				cmp 	lowMemory+1
.1572	d0 ea		bne $155e			bne 	_DLCopyDown
.1574	60		rts				rts
.1575					IAdvanceTemp0:
.1575	84 32		sty $32				sty 	tempShort
.1577	18		clc				clc
.1578	a0 00		ldy #$00			ldy 	#0
.157a	b1 2a		lda ($2a),y			lda 	(temp0),y
.157c	65 2a		adc $2a				adc 	temp0
.157e	85 2a		sta $2a				sta 	temp0
.1580	90 02		bcc $1584			bcc 	_IATNoCarry
.1582	e6 2b		inc $2b				inc 	temp0+1
.1584					_IATNoCarry:
.1584	b1 2a		lda ($2a),y			lda 	(temp0),y
.1586	a4 32		ldy $32				ldy 	tempShort
.1588	c9 00		cmp #$00			cmp		#0
.158a	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.158b					InsertLine:
.158b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.158e	85 2a		sta $2a				sta 	temp0
.1590	ad c9 0a	lda $0ac9			lda 	basePage+1
.1593	85 2b		sta $2b				sta 	temp0+1
.1595					_ILLoop:
.1595	a0 01		ldy #$01			ldy 	#1
.1597	b1 2a		lda ($2a),y			lda 	(temp0),y
.1599	c5 48		cmp $48				cmp 	esInt0
.159b	c8		iny				iny
.159c	b1 2a		lda ($2a),y			lda 	(temp0),y
.159e	e5 50		sbc $50				sbc 	esInt1
.15a0	b0 05		bcs $15a7			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.15a2	20 75 15	jsr $1575			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.15a5	d0 ee		bne $1595			bne 	_ILLoop
.15a7					_ILFound:
.15a7	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.15a9	85 2c		sta $2c				sta 	temp1
.15ab	a5 36		lda $36				lda 	lowMemory+1
.15ad	85 2d		sta $2d				sta 	temp1+1
.15af	ad 1a 0d	lda $0d1a			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.15b2	18		clc				clc
.15b3	69 03		adc #$03			adc 	#3
.15b5	a8		tay				tay
.15b6	a2 00		ldx #$00			ldx 	#0
.15b8	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.15ba	91 2c		sta ($2c),y			sta 	(temp1),y
.15bc	a5 2c		lda $2c				lda 	temp1
.15be	c5 2a		cmp $2a				cmp 	temp0
.15c0	d0 06		bne $15c8			bne 	_ILMNext
.15c2	a5 2d		lda $2d				lda 	temp1+1
.15c4	c5 2b		cmp $2b				cmp 	temp0+1
.15c6	f0 0b		beq $15d3			beq 	_ILMCopy
.15c8					_ILMNext:
.15c8	a5 2c		lda $2c				lda 	temp1
.15ca	d0 02		bne $15ce			bne 	_ILNoBorrow
.15cc	c6 2d		dec $2d				dec 	temp1+1
.15ce					_ILNoBorrow:
.15ce	c6 2c		dec $2c				dec 	temp1
.15d0	4c b8 15	jmp $15b8			jmp 	_ILMove
.15d3					_ILMCopy:
.15d3	98		tya				tya 								; Y is the offset of the new line.
.15d4	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.15d6	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.15d8	a5 48		lda $48				lda 	esInt0
.15da	91 2a		sta ($2a),y			sta 	(temp0),y
.15dc	c8		iny				iny
.15dd	a5 50		lda $50				lda 	esInt1
.15df	91 2a		sta ($2a),y			sta 	(temp0),y
.15e1	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.15e3					_ILMCopy2:
.15e3	b1 28		lda ($28),y			lda 	(codePtr),y
.15e5	c8		iny				iny
.15e6	c8		iny				iny
.15e7	c8		iny				iny
.15e8	91 2a		sta ($2a),y			sta 	(temp0),y
.15ea	88		dey				dey
.15eb	88		dey				dey
.15ec	cc 1a 0d	cpy $0d1a			cpy 	tokenBufferIndex
.15ef	d0 f2		bne $15e3			bne 	_ILMCopy2
.15f1	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.15f2					WarmStartEntry:
.15f2	a2 ff		ldx #$ff			ldx 	#$FF
.15f4	9a		txs				txs
.15f5	a9 02		lda #$02			lda 	#2							; green text.
.15f7	a2 06		ldx #$06		ldx	#6
.15f9	20 59 11	jsr $1159		jsr	deviceHandler
.15fc	a2 0a		ldx #$0a		ldx	#10
.15fe	20 59 11	jsr $1159		jsr	deviceHandler
.1601	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1603	85 28		sta $28				sta 	codePtr
.1605	a5 2b		lda $2b				lda 	temp0+1
.1607	85 29		sta $29				sta 	codePtr+1
.1609	a2 02		ldx #$02		ldx	#2
.160b	20 59 11	jsr $1159		jsr	deviceHandler
.160e	a2 06		ldx #$06		ldx	#6
.1610	20 87 35	jsr $3587		jsr	tokeniserHandler
.1613	90 25		bcc $163a			bcc 	WSEError 					; failed.
.1615	a9 17		lda #$17			lda 	#(tokenHeader) & $FF
.1617	85 28		sta $28				sta 	codePtr
.1619	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.161b	85 29		sta $29				sta 	1+(codePtr)
.161d	ad 1a 0c	lda $0c1a			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1620	c9 80		cmp #$80			cmp 	#$80
.1622	f0 ce		beq $15f2			beq 	WarmStartEntry
.1624	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1626	c9 40		cmp #$40			cmp 	#$40
.1628	f0 15		beq $163f			beq 	HasLineNumber
.162a	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.162c	8d 17 0c	sta $0c17			sta 	tokenHeader 				; fake program line.
.162f	8d 18 0c	sta $0c18			sta 	tokenHeader+1
.1632	8d 19 0c	sta $0c19			sta 	tokenHeader+2
.1635	a2 14		ldx #$14		ldx	#20
.1637	20 29 2c	jsr $2c29		jsr	mainHandler
.163a					WSEError:
.163a	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.163c	20 76 11	jsr $1176		jsr	errorHandler
.163f					HasLineNumber:
.163f	a0 03		ldy #$03			ldy 	#3 							; get line number
.1641	a9 00		lda #$00			lda 	#0
.1643	a2 06		ldx #$06		ldx	#6
.1645	20 29 2c	jsr $2c29		jsr	mainHandler
.1648	a5 58		lda $58				lda 	esInt2		 				; check in range.
.164a	05 60		ora $60				ora 	esInt3
.164c	d0 ec		bne $163a			bne 	WSEError
.164e	98		tya				tya 								; make codePtr point to code after the line number.
.164f	18		clc				clc
.1650	65 28		adc $28				adc 	codePtr
.1652	85 28		sta $28				sta 	codePtr
.1654	90 02		bcc $1658			bcc		_HLNNoCarry
.1656	e6 29		inc $29				inc 	codePtr+1
.1658					_HLNNoCarry:
.1658	98		tya				tya 								; subtract that offset from the code buffer index
.1659	38		sec				sec
.165a	49 ff		eor #$ff			eor 	#$FF
.165c	6d 1a 0d	adc $0d1a			adc 	tokenBufferIndex
.165f	18		clc				clc 								; add space allowing for header & $80 trailer
.1660	69 04		adc #$04			adc 	#4
.1662	8d 1a 0d	sta $0d1a			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1665	20 34 15	jsr $1534			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1668					_HLNNoDelete:
.1668	ad 1a 0d	lda $0d1a			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.166b	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.166d	f0 03		beq $1672			beq 	_HLMEditDone
.166f	20 8b 15	jsr $158b			jsr 	InsertLine 					; insert the line in
.1672					_HLMEditDone:
.1672	a2 02		ldx #$02		ldx	#2
.1674	20 29 2c	jsr $2c29		jsr	mainHandler
.1677	4c f2 15	jmp $15f2			jmp 	WarmStartEntry

;******  Return to file: interaction/interaction.asm

.167a					interactionHandler:
.167a	7c 7d 16	jmp ($167d,x)			jmp 	(interactionVectors,x)
.167d					interactionVectors:
>167d	ad 14					.word ColdStartEntry       ; index 0
>167f	f2 15					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1681					section_end_interaction:
.1681					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1681					Command_Assert:
.1681	20 63 25	jsr $2563			jsr 	EvaluateRootInteger 		; what is being asserted.
.1684	20 ee 2a	jsr $2aee			jsr 	MInt32Zero 					; is it true ?
.1687	f0 01		beq $168a			beq 	_CAError
.1689	60		rts				rts
.168a					_CAError:
.168a	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.168c	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.168f					CommandClear:
.168f					XCommandClear:
.168f	98		tya				tya
.1690	48		pha				pha
.1691	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.1694	85 33		sta $33				sta 	highMemory
.1696	ad cd 0a	lda $0acd			lda 	endMemory+1
.1699	85 34		sta $34				sta 	highMemory+1
.169b	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.169e	85 2a		sta $2a				sta 	temp0
.16a0	ad c9 0a	lda $0ac9			lda 	basePage+1
.16a3	85 2b		sta $2b				sta 	temp0+1
.16a5					_CCFindEnd:
.16a5	a0 00		ldy #$00			ldy 	#0
.16a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.16a9	f0 0c		beq $16b7			beq 	_CCFoundEnd 				; offset zero is end.
.16ab	18		clc				clc
.16ac	65 2a		adc $2a				adc 	temp0 						; move to next line
.16ae	85 2a		sta $2a				sta 	temp0
.16b0	90 f3		bcc $16a5			bcc 	_CCFindEnd
.16b2	e6 2b		inc $2b				inc 	temp0+1
.16b4	4c a5 16	jmp $16a5			jmp 	_CCFindEnd
.16b7					_CCFoundEnd:
.16b7	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.16b9	85 35		sta $35				sta 	lowMemory
.16bb	a5 2b		lda $2b				lda 	temp0+1
.16bd	85 36		sta $36				sta 	lowMemory+1
.16bf	18		clc				clc 								; put temp0+1 in endProgram
.16c0	a5 2a		lda $2a				lda 	temp0
.16c2	69 01		adc #$01			adc 	#1
.16c4	8d ca 0a	sta $0aca			sta 	endProgram
.16c7	a5 2b		lda $2b				lda 	temp0+1
.16c9	69 00		adc #$00			adc 	#0
.16cb	8d cb 0a	sta $0acb			sta 	endProgram+1
.16ce	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.16d0	20 e4 16	jsr $16e4			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.16d3	20 c8 2b	jsr $2bc8			jsr 	RSReset 					; reset the return stack.
.16d6	a2 04		ldx #$04		ldx	#4
.16d8	20 82 38	jsr $3882		jsr	variableHandler
.16db	20 19 1f	jsr $1f19			jsr 	ScanProc 					; scan for procedures
.16de	20 f5 1c	jsr $1cf5			jsr 	CommandRestore 				; do a restore
.16e1	68		pla				pla
.16e2	a8		tay				tay
.16e3	60		rts				rts
.16e4					AdvanceLowMemoryByte:
.16e4	18		clc				clc
.16e5	65 35		adc $35				adc 	lowMemory
.16e7	85 35		sta $35				sta 	lowMemory
.16e9	90 02		bcc $16ed			bcc 	_ALMBExit
.16eb	e6 36		inc $36				inc 	lowMemory+1
.16ed					_ALMBExit:
.16ed	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.16ee					Command_Dim:
.16ee	a2 02		ldx #$02		ldx	#2
.16f0	20 82 38	jsr $3882		jsr	variableHandler
.16f3	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.16f5	c8		iny				iny
.16f6	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.16f8	f0 f4		beq $16ee			beq 	Command_Dim
.16fa	88		dey				dey 								; unpick get
.16fb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.16fc					Command_FOR:
.16fc	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.16fe	a2 0b		ldx #$0b			ldx 	#11
.1700	20 d6 2b	jsr $2bd6			jsr 	RSClaim
.1703	20 f8 18	jsr $18f8			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1706	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1708	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.170a	d0 4c		bne $1758			bne 	_CFType
.170c	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.170e	20 2f 2b	jsr $2b2f			jsr 	CheckToken
.1711	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1713	20 65 25	jsr $2565			jsr 	EvaluateInteger				; get terminal value in stack 1
.1716	98		tya				tya
.1717	48		pha				pha
.1718	a0 04		ldy #$04			ldy 	#4
.171a	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.171c	91 78		sta ($78),y			sta 	(rsPointer),y
.171e	c8		iny				iny
.171f	a5 50		lda $50				lda		esInt1
.1721	91 78		sta ($78),y			sta 	(rsPointer),y
.1723	c8		iny				iny
.1724	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1726	91 78		sta ($78),y			sta 	(rsPointer),y
.1728	c8		iny				iny
.1729	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.172b	91 78		sta ($78),y			sta 	(rsPointer),y
.172d	c8		iny				iny
.172e	a5 51		lda $51				lda		esInt1+1
.1730	91 78		sta ($78),y			sta 	(rsPointer),y
.1732	c8		iny				iny
.1733	a5 59		lda $59				lda		esInt2+1
.1735	91 78		sta ($78),y			sta 	(rsPointer),y
.1737	c8		iny				iny
.1738	a5 61		lda $61				lda		esInt3+1
.173a	91 78		sta ($78),y			sta 	(rsPointer),y
.173c	68		pla				pla
.173d	a8		tay				tay
.173e	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1740	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.1742	d0 0e		bne $1752			bne 	_CFDone
.1744	c8		iny				iny									; skip over step.
.1745	20 65 25	jsr $2565			jsr 	EvaluateInteger 			; get step
.1748	98		tya				tya
.1749	48		pha				pha
.174a	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.174c	a0 06		ldy #$06			ldy 	#6
.174e	91 78		sta ($78),y			sta 	(rsPointer),y
.1750	68		pla				pla
.1751	a8		tay				tay
.1752					_CFDone:
.1752	a9 01		lda #$01			lda 	#1
.1754	20 02 2c	jsr $2c02			jsr 	RSSavePosition 				; save position.
.1757	60		rts				rts
.1758					_CFType:
.1758	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.175a	20 76 11	jsr $1176		jsr	errorHandler
.175d					Command_NEXT:
.175d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.175f	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1761	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1763	f0 05		beq $176a			beq 	_isok
.1765	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1767	20 76 11	jsr $1176		jsr	errorHandler
.176a					_isok:
.176a	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.176c	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.176e	b0 18		bcs $1788			bcs 	_CNNoIndex
.1770	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1772	20 98 25	jsr $2598			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1775	98		tya				tya
.1776	48		pha				pha
.1777	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1779	b1 78		lda ($78),y			lda 	(rsPointer),y
.177b	d5 48		cmp $48,x			cmp 	esInt0,x
.177d	d0 76		bne $17f5			bne 	_CNBadIndex
.177f	c8		iny				iny
.1780	b1 78		lda ($78),y			lda 	(rsPointer),y
.1782	d5 50		cmp $50,x			cmp 	esInt1,x
.1784	d0 6f		bne $17f5			bne 	_CNBadIndex
.1786	68		pla				pla
.1787	a8		tay				tay
.1788					_CNNoIndex:
.1788	98		tya				tya
.1789	48		pha				pha
.178a	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.178c	b1 78		lda ($78),y			lda 	(rsPointer),y
.178e	85 2a		sta $2a				sta 	temp0
.1790	c8		iny				iny
.1791	b1 78		lda ($78),y			lda 	(rsPointer),y
.1793	85 2b		sta $2b				sta 	temp0+1
.1795	c8		iny				iny
.1796	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1798	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.179a	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.179c	10 01		bpl $179f			bpl 	_CNSignX
.179e	ca		dex				dex  								; X = $FF
.179f					_CNSignX:
.179f	18		clc				clc 								; add to the LSB
.17a0	a0 00		ldy #$00			ldy 	#0
.17a2	71 2a		adc ($2a),y			adc 	(temp0),y
.17a4	91 2a		sta ($2a),y			sta 	(temp0),y
.17a6					_CNPropogate:
.17a6	c8		iny				iny  								; add the sign extended in X to the rest.
.17a7	8a		txa				txa
.17a8	71 2a		adc ($2a),y			adc 	(temp0),y
.17aa	91 2a		sta ($2a),y			sta 	(temp0),y
.17ac	c8		iny				iny
.17ad	8a		txa				txa
.17ae	71 2a		adc ($2a),y			adc 	(temp0),y
.17b0	91 2a		sta ($2a),y			sta 	(temp0),y
.17b2	c8		iny				iny
.17b3	8a		txa				txa
.17b4	71 2a		adc ($2a),y			adc 	(temp0),y
.17b6	91 2a		sta ($2a),y			sta 	(temp0),y
.17b8	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.17b9	a5 78		lda $78				lda 	rsPointer
.17bb	69 07		adc #$07			adc 	#7
.17bd	85 2c		sta $2c				sta 	temp1
.17bf	a9 00		lda #$00			lda 	#0
.17c1	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.17c3	a8		tay				tay 								; and clear the Y register again.
.17c4	65 79		adc $79				adc 	rsPointer+1
.17c6	85 2d		sta $2d				sta 	temp1+1
.17c8	38		sec				sec 								; calculate current - limit oring interim values.
.17c9	20 01 18	jsr $1801			jsr 	_CNCompare 					; each of these does a byte.
.17cc	20 01 18	jsr $1801			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.17cf	20 01 18	jsr $1801			jsr 	_CNCompare 					; and the carry of the subtraction.
.17d2	20 01 18	jsr $1801			jsr 	_CNCompare
.17d5	50 02		bvc $17d9			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.17d7	49 80		eor #$80			eor 	#$80
.17d9					_CNNoOverflow:
.17d9	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.17db	30 1d		bmi $17fa			bmi 	_CNCheckDownto
.17dd	c9 00		cmp #$00			cmp 	#0
.17df	30 0c		bmi $17ed			bmi 	_CNLoopRound 				; loop round if < =
.17e1	a5 2e		lda $2e				lda 	temp2
.17e3	f0 08		beq $17ed			beq 	_CNLoopRound
.17e5					_CNLoopExit:
.17e5	68		pla				pla
.17e6	a8		tay				tay
.17e7	a9 0b		lda #$0b			lda 	#11
.17e9	20 f8 2b	jsr $2bf8			jsr 	RSFree
.17ec	60		rts				rts
.17ed					_CNLoopRound:
.17ed	68		pla				pla
.17ee	a8		tay				tay
.17ef	a9 01		lda #$01			lda 	#1
.17f1	20 15 2c	jsr $2c15			jsr 	RSLoadPosition				; go back to the loop top
.17f4	60		rts				rts
.17f5					_CNBadIndex:
.17f5	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.17f7	20 76 11	jsr $1176		jsr	errorHandler
.17fa					_CNCheckDownto:
.17fa	c9 00		cmp #$00			cmp 	#0
.17fc	10 ef		bpl $17ed			bpl 	_CNLoopRound
.17fe	4c e5 17	jmp $17e5			jmp 	_CNLoopExit
.1801					_CNCompare:
.1801	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1803	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1805	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1807	85 2e		sta $2e				sta 	temp2
.1809	c8		iny				iny
.180a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.180b					CommandIf:
.180b	20 63 25	jsr $2563			jsr 	EvaluateRootInteger 		; get what's being tested.
.180e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1810	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1812	f0 04		beq $1818			beq 	_IfSimple
.1814	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1816	d0 1b		bne $1833			bne 	_IfComplex
.1818					_IfSimple:
.1818	20 ee 2a	jsr $2aee			jsr 	MInt32Zero					; check if TOS zero
.181b	f0 10		beq $182d			beq 	_IfEOL 						; go to next line.
.181d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.181f	c8		iny				iny
.1820	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1822	f0 0c		beq $1830			beq 	_IfGoto 					; do the Goto code
.1824	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1826	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1828	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.182a	f0 04		beq $1830			beq 	_IfGoto
.182c	60		rts				rts 								; else continue on this line.
.182d					_IfEOL:
.182d	4c 8e 1f	jmp $1f8e			jmp 	AdvanceNextLine 			; go to next line
.1830					_IfGoto:
.1830	4c 03 20	jmp $2003			jmp 	CommandGoto
.1833					_IfComplex:
.1833	20 ee 2a	jsr $2aee			jsr 	MInt32Zero 					; is it true ?
.1836	f0 01		beq $1839			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1838	60		rts				rts 								; else continue.
.1839					_IFSkip:
.1839	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.183b	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.183d	4c 54 2b	jmp $2b54			jmp		ScanForward
.1840					Command_ELSE:
.1840	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1842	8a		txa				txa
.1843	4c 54 2b	jmp $2b54			jmp		ScanForward
.1846					Command_ENDIF:
.1846	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be2					InputBuffer:
>0be2							.fill 	MaxInputSize+1
.1847					Command_Input:
.1847	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1849	c8		iny				iny
.184a	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.184c	f0 f9		beq $1847			beq 	Command_Input
.184e	88		dey				dey 							; undo consume
.184f	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.1851	f0 54		beq $18a7			beq 	_CIExit 				; : or EOL, exit
.1853	c9 80		cmp #$80			cmp 	#TOK_EOL
.1855	f0 50		beq $18a7			beq 	_CIExit
.1857	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1859	90 12		bcc $186d			bcc 	_CIVariable
.185b	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.185d	d0 43		bne $18a2			bne 	_CISyntax
.185f	a2 00		ldx #$00			ldx 	#0
.1861	20 5a 25	jsr $255a			jsr 	EvaluateString 			; evaluate and print string
.1864	20 6d 19	jsr $196d			jsr 	TOSToTemp0
.1867	20 17 1c	jsr $1c17			jsr 	PrintString
.186a	4c 47 18	jmp $1847			jmp 	Command_Input
.186d					_CIVariable:
.186d	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.186f	20 98 25	jsr $2598			jsr 	EvaluateReference  		; this is where its going
.1872					_CIRetry:
.1872	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1874	a2 12		ldx #$12		ldx	#18
.1876	20 59 11	jsr $1159		jsr	deviceHandler
.1879	98		tya				tya
.187a	48		pha				pha
.187b	20 bb 18	jsr $18bb			jsr 	InputString 			; input a string (manually)
.187e	a2 01		ldx #$01			ldx 	#1
.1880	20 a8 18	jsr $18a8			jsr 	BufferToStackX 			; make stack,x ref input string.
.1883	a5 40		lda $40				lda 	esType 					; if target type numeric
.1885	29 40		and #$40			and 	#$40 					; then convert to number
.1887	d0 11		bne $189a			bne 	_CIWrite
.1889	a2 01		ldx #$01			ldx 	#1
.188b	20 6d 19	jsr $196d			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.188e	a9 0a		lda #$0a			lda 	#10
.1890	20 35 29	jsr $2935			jsr 	MInt32FromString 		; convert it back from a string.
.1893	68		pla				pla
.1894	a8		tay				tay
.1895	b0 03		bcs $189a			bcs 	_CIWrite 				; successfully converted.
.1897	18		clc				clc 							; default fail FP conversion
.1898	90 d8		bcc $1872			bcc		_CIRetry				; failed, try again.
.189a					_CIWrite:
.189a	a2 00		ldx #$00			ldx 	#0
.189c	20 0b 19	jsr $190b			jsr 	WriteValue
.189f	4c 47 18	jmp $1847			jmp 	Command_Input
.18a2					_CISyntax:
.18a2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18a4	20 76 11	jsr $1176		jsr	errorHandler
.18a7					_CIExit:
.18a7	60		rts				rts
.18a8					BufferToStackX:
.18a8	a9 e2		lda #$e2			lda 	#InputBuffer & $FF
.18aa	95 48		sta $48,x			sta 	esInt0,x
.18ac	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.18ae	95 50		sta $50,x			sta 	esInt1,x
.18b0	a9 00		lda #$00			lda 	#0
.18b2	95 58		sta $58,x			sta 	esInt2,x
.18b4	95 60		sta $60,x			sta 	esInt3,x
.18b6	a9 40		lda #$40			lda 	#$40
.18b8	95 40		sta $40,x			sta 	esType,x
.18ba	60		rts				rts
.18bb					InputString:
.18bb	a9 00		lda #$00			lda 	#0
.18bd	8d e2 0b	sta $0be2			sta 	InputBuffer
.18c0					_InputLoop:
.18c0	a2 08		ldx #$08		ldx	#8
.18c2	20 59 11	jsr $1159		jsr	deviceHandler
.18c5	c9 00		cmp #$00			cmp 	#0
.18c7	f0 f7		beq $18c0			beq 	_InputLoop
.18c9	c9 08		cmp #$08			cmp 	#8
.18cb	f0 19		beq $18e6			beq 	_InputBackspace
.18cd	c9 0d		cmp #$0d			cmp 	#13
.18cf	f0 21		beq $18f2			beq 	_InputExit
.18d1	ae e2 0b	ldx $0be2			ldx 	InputBuffer
.18d4	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.18d6	f0 e8		beq $18c0			beq 	_InputLoop
.18d8	9d e3 0b	sta $0be3,x			sta 	InputBuffer+1,x 		; write char
.18db	ee e2 0b	inc $0be2			inc 	InputBuffer 			; advance count.
.18de					_InputPrintLoop:
.18de	a2 12		ldx #$12		ldx	#18
.18e0	20 59 11	jsr $1159		jsr	deviceHandler
.18e3	4c c0 18	jmp $18c0			jmp	 	_InputLoop
.18e6					_InputBackspace:
.18e6	ad e2 0b	lda $0be2			lda 	InputBuffer 			; at start
.18e9	f0 d5		beq $18c0			beq 	_InputLoop
.18eb	ce e2 0b	dec $0be2			dec 	InputBuffer
.18ee	a9 08		lda #$08			lda 	#8
.18f0	d0 ec		bne $18de			bne 	_InputPrintLoop
.18f2					_InputExit:
.18f2	a2 02		ldx #$02		ldx	#2
.18f4	20 59 11	jsr $1159		jsr	deviceHandler
.18f7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.18f8					CommandLet:
.18f8	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.18fa	20 98 25	jsr $2598			jsr 	EvaluateReference
.18fd	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.18ff	20 2f 2b	jsr $2b2f			jsr 	CheckToken
.1902	e8		inx				inx 								; do RHS
.1903	20 46 25	jsr $2546			jsr 	Evaluate 					; evaluate and dereference
.1906	ca		dex				dex
.1907	20 0b 19	jsr $190b			jsr 	WriteValue 					; write it out
.190a	60		rts				rts
.190b					WriteValue:
.190b	98		tya				tya
.190c	48		pha				pha
.190d	20 6d 19	jsr $196d			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1910	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1912	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1914	29 40		and #$40			and 	#$40
.1916	d0 50		bne $1968			bne		_WVType
.1918	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.191a	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.191c	29 40		and #$40			and 	#$40
.191e	d0 1f		bne $193f			bne 	_WVCopyString
.1920	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1922	15 41		ora $41,x			ora 	esType+1,x
.1924	4a		lsr a				lsr 	a
.1925	90 22		bcc $1949			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1927	b5 40		lda $40,x			lda 	esType,x
.1929	4a		lsr a				lsr 	a
.192a	90 3c		bcc $1968			bcc 	_WVType
.192c	e8		inx				inx 								; force the value being written to be a float.
.192d	20 b0 20	jsr $20b0			jsr 	BPMakeFloat
.1930	ca		dex				dex
.1931	20 6d 19	jsr $196d			jsr 	TOSToTemp0 					; set Temp0 to write address
.1934	e8		inx				inx
.1935	8a		txa				txa
.1936	a2 20		ldx #$20		ldx	#32
.1938	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.193b	aa		tax				tax
.193c	4c 65 19	jmp $1965			jmp 	_WVCopyExit
.193f					_WVCopyString:
.193f	8a		txa				txa
.1940	a2 0c		ldx #$0c		ldx	#12
.1942	20 d8 2e	jsr $2ed8		jsr	stringHandler
.1945	aa		tax				tax
.1946	4c 65 19	jmp $1965			jmp 	_WVCopyExit
.1949					_WVCopyData4:
.1949	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.194b	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.194d	d0 10		bne $195f			bne 	_WVCopyData1
.194f	a0 03		ldy #$03			ldy 	#3
.1951	b5 61		lda $61,x			lda 	esInt3+1,x
.1953	91 2a		sta ($2a),y			sta 	(temp0),y
.1955	88		dey				dey
.1956	b5 59		lda $59,x			lda 	esInt2+1,x
.1958	91 2a		sta ($2a),y			sta 	(temp0),y
.195a	88		dey				dey
.195b	b5 51		lda $51,x			lda 	esInt1+1,x
.195d	91 2a		sta ($2a),y			sta 	(temp0),y
.195f					_WVCopyData1:
.195f	a0 00		ldy #$00			ldy 	#0
.1961	b5 49		lda $49,x			lda 	esInt0+1,x
.1963	91 2a		sta ($2a),y			sta 	(temp0),y
.1965					_WVCopyExit:
.1965	68		pla				pla
.1966	a8		tay				tay
.1967	60		rts				rts
.1968					_WVType:
.1968	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.196a	20 76 11	jsr $1176		jsr	errorHandler
.196d					TOSToTemp0:
.196d	b5 48		lda $48,x			lda 	esInt0,x
.196f	85 2a		sta $2a				sta 	temp0
.1971	b5 50		lda $50,x			lda 	esInt1,x
.1973	85 2b		sta $2b				sta 	temp0+1
.1975	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.1976					CommandList:
.1976	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.1978	20 c7 2a	jsr $2ac7			jsr 	MInt32False
.197b	e8		inx				inx
.197c	20 c3 2a	jsr $2ac3			jsr 	MInt32True
.197f	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.1981	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; list ,xxxx
.1983	f0 15		beq $199a			beq 	_CLEndLine
.1985	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.1987	30 1b		bmi $19a4			bmi 	_CLDoListing 				; do the whole lot.
.1989	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.198b	20 65 25	jsr $2565			jsr 	EvaluateInteger
.198e	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.1990	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1992	f0 06		beq $199a			beq 	_CLEndLine
.1994	20 05 2a	jsr $2a05			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.1997	4c a4 19	jmp $19a4			jmp 	_CLDoListing 				; own e.g. list 1100
.199a					_CLEndLine:
.199a	c8		iny				iny 								; skip comma
.199b	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.199d	30 05		bmi $19a4			bmi 	_CLDoListing
.199f	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.19a1	20 65 25	jsr $2565			jsr 	EvaluateInteger				; get end
.19a4					_CLDoListing:
.19a4	20 bc 1d	jsr $1dbc			jsr 	ResetCodeAddress 			; back to the start.
.19a7					_CLCheckLoop:
.19a7	a0 00		ldy #$00			ldy 	#0							; check end.
.19a9	b1 28		lda ($28),y			lda 	(codePtr),y
.19ab	f0 26		beq $19d3			beq 	_CLEnd
.19ad	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.19af	20 d6 19	jsr $19d6			jsr 	CLCompareLineTOS
.19b2	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.19b4	f0 0d		beq $19c3			beq 	_CLNext
.19b6	e8		inx				inx
.19b7	20 d6 19	jsr $19d6			jsr 	CLCompareLineTOS 			; compare vs higher
.19ba	c9 01		cmp #$01			cmp 	#1
.19bc	f0 05		beq $19c3			beq 	_CLNext
.19be	a2 02		ldx #$02		ldx	#2
.19c0	20 87 35	jsr $3587		jsr	tokeniserHandler
.19c3					_CLNext:
.19c3	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.19c5	b1 28		lda ($28),y			lda 	(codePtr),y
.19c7	18		clc				clc
.19c8	65 28		adc $28				adc 	codePtr
.19ca	85 28		sta $28				sta 	codePtr
.19cc	90 d9		bcc $19a7			bcc 	_CLCheckLoop
.19ce	e6 29		inc $29				inc 	codePtr+1
.19d0	4c a7 19	jmp $19a7			jmp 	_CLCheckLoop
.19d3					_CLEnd:
.19d3	4c 24 2c	jmp $2c24			jmp 	WarmStart 					; warm start after list.
.19d6					CLCompareLineTOS:
.19d6	a0 01		ldy #$01			ldy 	#1
.19d8	b1 28		lda ($28),y			lda 	(codePtr),y
.19da	55 48		eor $48,x			eor 	esInt0,x
.19dc	85 2a		sta $2a				sta 	temp0
.19de	c8		iny				iny
.19df	b1 28		lda ($28),y			lda 	(codePtr),y
.19e1	55 50		eor $50,x			eor 	esInt1,x
.19e3	05 2a		ora $2a				ora 	temp0
.19e5	f0 10		beq $19f7			beq 	_CLCLTExit
.19e7	88		dey				dey
.19e8	b1 28		lda ($28),y			lda 	(codePtr),y
.19ea	d5 48		cmp $48,x			cmp 	esInt0,x
.19ec	c8		iny				iny
.19ed	b1 28		lda ($28),y			lda 	(codePtr),y
.19ef	f5 50		sbc $50,x			sbc 	esInt1,x
.19f1	a9 ff		lda #$ff			lda 	#255
.19f3	90 02		bcc $19f7			bcc 	_CLCLTExit
.19f5	a9 01		lda #$01			lda 	#1
.19f7					_CLCLTExit:
.19f7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.19f8					CommandLoad:
.19f8	20 20 1a	jsr $1a20			jsr 	CLSParameters 					; get parameters for load.
.19fb	08		php				php
.19fc	a2 0c		ldx #$0c		ldx	#12
.19fe	20 59 11	jsr $1159		jsr	deviceHandler
.1a01	28		plp				plp
.1a02	b0 08		bcs $1a0c			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1a04	20 8f 16	jsr $168f			jsr 	CommandClear
.1a07	a2 02		ldx #$02		ldx	#2
.1a09	20 7a 16	jsr $167a		jsr	interactionHandler
.1a0c					_CLExit
.1a0c	60		rts				rts
.1a0d					CommandSave:
.1a0d	20 20 1a	jsr $1a20			jsr 	CLSParameters					; get parameters for save
.1a10	90 08		bcc $1a1a			bcc 	_CSNoOverrideAddress
.1a12	20 47 2b	jsr $2b47			jsr 	CheckComma 						; should be a comma.
.1a15	a2 02		ldx #$02			ldx 	#2
.1a17	20 65 25	jsr $2565			jsr 	EvaluateInteger 				; get save end address.
.1a1a					_CSNoOverrideAddress:
.1a1a	a2 14		ldx #$14		ldx	#20
.1a1c	20 59 11	jsr $1159		jsr	deviceHandler
.1a1f	60		rts				rts
.1a20					CLSParameters:
.1a20	a2 00		ldx #$00			ldx 	#0 								; string
.1a22	20 5a 25	jsr $255a			jsr 	EvaluateString
.1a25	e8		inx				inx 									; erase out +1 +2
.1a26	20 c7 2a	jsr $2ac7			jsr 	MInt32False
.1a29	e8		inx				inx
.1a2a	20 c7 2a	jsr $2ac7			jsr 	MInt32False
.1a2d	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1a30	85 49		sta $49				sta 	esInt0+1
.1a32	ad c9 0a	lda $0ac9			lda 	basePage+1
.1a35	85 51		sta $51				sta 	esInt1+1
.1a37	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1a3a	85 4a		sta $4a				sta 	esInt0+2
.1a3c	ad cb 0a	lda $0acb			lda 	endProgram+1
.1a3f	85 52		sta $52				sta 	esInt1+2
.1a41	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1a43	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a45	d0 08		bne $1a4f			bne 	_CLSDefault
.1a47	c8		iny				iny 									; skip comma
.1a48	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1a4a	20 65 25	jsr $2565			jsr 	EvaluateInteger
.1a4d	38		sec				sec
.1a4e	60		rts				rts
.1a4f					_CLSDefault:
.1a4f	18		clc				clc
.1a50	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c03					storeSize:
>0c03							.fill 	1
.1a51					CommandLocal:
.1a51	a2 00		ldx #$00			ldx 	#0
.1a53	20 6f 1a	jsr $1a6f			jsr 	LocaliseVariable 			; localise one.
.1a56					_CLCheckNext:
.1a56	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1a58	c8		iny				iny
.1a59	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1a5b	f0 06		beq $1a63			beq 	_CLAssignment
.1a5d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1a5f	f0 f0		beq $1a51			beq 	CommandLocal
.1a61	88		dey				dey
.1a62	60		rts				rts
.1a63					_CLAssignment:
.1a63	a2 01		ldx #$01			ldx 	#1
.1a65	20 46 25	jsr $2546			jsr 	Evaluate 					; evaluate RHS
.1a68	ca		dex				dex
.1a69	20 0b 19	jsr $190b			jsr 	WriteValue
.1a6c	4c 56 1a	jmp $1a56			jmp 	_CLCheckNext
.1a6f					LocaliseVariable:
.1a6f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1a71	c9 40		cmp #$40			cmp 	#$40
.1a73	b0 67		bcs $1adc			bcs 	_LVSyntax
.1a75	8a		txa				txa 								; get the address of that variable.
.1a76	a2 00		ldx #$00		ldx	#0
.1a78	20 82 38	jsr $3882		jsr	variableHandler
.1a7b	aa		tax				tax
.1a7c	8a		txa				txa
.1a7d	48		pha				pha
.1a7e	98		tya				tya
.1a7f	48		pha				pha
.1a80	20 6d 19	jsr $196d			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1a83	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1a85	0a		asl a				asl 	a
.1a86	10 16		bpl $1a9e			bpl 	_LVPushNumber
.1a88	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1a8a	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a8c	c8		iny				iny
.1a8d	85 2c		sta $2c				sta 	temp1
.1a8f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a91	85 2d		sta $2d				sta 	temp1+1
.1a93	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1a95	b1 2c		lda ($2c),y			lda 	(temp1),y
.1a97	aa		tax				tax 								; into X
.1a98	e8		inx				inx 								; +1 for length.
.1a99	a9 24		lda #$24			lda 	#markerString
.1a9b	4c b3 1a	jmp $1ab3			jmp 	_LVWriteFrame
.1a9e					_LVPushNumber:
.1a9e	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1aa0	85 2c		sta $2c				sta 	temp1
.1aa2	a5 2b		lda $2b				lda 	temp0+1
.1aa4	85 2d		sta $2d				sta 	temp1+1
.1aa6	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1aa8	4a		lsr a				lsr 	a
.1aa9	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1aab	a2 04		ldx #$04			ldx 	#VarISize
.1aad	90 04		bcc $1ab3			bcc 	_LVIsInteger
.1aaf	a9 23		lda #$23			lda 	#markerFloat
.1ab1	a2 06		ldx #$06			ldx 	#VarFSize
.1ab3					_LVIsInteger:
.1ab3					_LVWriteFrame:
.1ab3	8e 03 0c	stx $0c03			stx 	storeSize 					; number of bytes to copy from (temp0)
.1ab6	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1ab7	e8		inx				inx
.1ab8	e8		inx				inx
.1ab9	20 d6 2b	jsr $2bd6			jsr 	RSClaim 					; create the stack frame.
.1abc	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1abe	a0 01		ldy #$01			ldy 	#1
.1ac0	91 78		sta ($78),y			sta 	(rsPointer),y
.1ac2	c8		iny				iny
.1ac3	a5 2b		lda $2b				lda 	temp0+1
.1ac5	91 78		sta ($78),y			sta 	(rsPointer),y
.1ac7	a0 00		ldy #$00			ldy 	#0
.1ac9					_LVCopyData:
.1ac9	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1acb	c8		iny				iny 								; write allowing for the header bit.
.1acc	c8		iny				iny
.1acd	c8		iny				iny
.1ace	91 78		sta ($78),y			sta 	(rsPointer),y
.1ad0	88		dey				dey
.1ad1	88		dey				dey
.1ad2	ce 03 0c	dec $0c03			dec 	storeSize 					; do it storesize times
.1ad5	d0 f2		bne $1ac9			bne 	_LVCopyData
.1ad7	68		pla				pla
.1ad8	a8		tay				tay
.1ad9	68		pla				pla
.1ada	aa		tax				tax
.1adb	60		rts				rts
.1adc					_LVSyntax:
.1adc	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1ade	20 76 11	jsr $1176		jsr	errorHandler
.1ae1					RestoreLocals:
.1ae1	a2 00		ldx #$00			ldx 	#0
.1ae3	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1ae5	c9 40		cmp #$40			cmp	 	#64
.1ae7	90 01		bcc $1aea			bcc 	_RLocal
.1ae9	60		rts				rts
.1aea					_RLocal:
.1aea	8a		txa				txa
.1aeb	48		pha				pha
.1aec	98		tya				tya
.1aed	48		pha				pha
.1aee	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1af0	b1 78		lda ($78),y			lda 	(rsPointer),y
.1af2	85 2a		sta $2a				sta 	temp0
.1af4	c8		iny				iny
.1af5	b1 78		lda ($78),y			lda 	(rsPointer),y
.1af7	85 2b		sta $2b				sta 	temp0+1
.1af9	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1afb	b1 78		lda ($78),y			lda 	(rsPointer),y
.1afd	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1aff	f0 28		beq $1b29			beq 	_RString
.1b01	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1b03	c9 25		cmp #$25			cmp 	#markerInt
.1b05	f0 02		beq $1b09			beq 	_RIsInteger
.1b07	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1b09					_RIsInteger:
.1b09	8a		txa				txa
.1b0a	48		pha				pha
.1b0b	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1b0d					_RCopyBack:
.1b0d	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b0f	88		dey				dey
.1b10	88		dey				dey
.1b11	88		dey				dey
.1b12	91 2a		sta ($2a),y			sta 	(temp0),y
.1b14	c8		iny				iny
.1b15	c8		iny				iny
.1b16	c8		iny				iny
.1b17	c8		iny				iny
.1b18	ca		dex				dex
.1b19	d0 f2		bne $1b0d			bne 	_RCopyBack
.1b1b	68		pla				pla 								; get size add 3
.1b1c	18		clc				clc
.1b1d	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1b1f					_RRestoreAAndLoop:
.1b1f	20 f8 2b	jsr $2bf8			jsr 	RSFree
.1b22	68		pla				pla
.1b23	a8		tay				tay
.1b24	68		pla				pla
.1b25	aa		tax				tax
.1b26	4c e1 1a	jmp $1ae1			jmp 	RestoreLocals 				; go see if there are any more locals.
.1b29					_RString:
.1b29	a2 00		ldx #$00			ldx 	#0
.1b2b	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1b2d	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b2f	95 48		sta $48,x			sta 	esInt0,x
.1b31	c8		iny				iny
.1b32	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b34	95 50		sta $50,x			sta 	esInt1,x
.1b36	18		clc				clc
.1b37	a5 78		lda $78				lda 	rsPointer
.1b39	69 03		adc #$03			adc 	#3
.1b3b	95 49		sta $49,x			sta 	esInt0+1,x
.1b3d	a5 79		lda $79				lda 	rsPointer+1
.1b3f	69 00		adc #$00			adc 	#0
.1b41	95 51		sta $51,x			sta 	esInt1+1,x
.1b43	8a		txa				txa
.1b44	a2 0c		ldx #$0c		ldx	#12
.1b46	20 d8 2e	jsr $2ed8		jsr	stringHandler
.1b49	a0 03		ldy #$03			ldy 	#3 							; get string length
.1b4b	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b4d	18		clc				clc
.1b4e	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1b50	4c 1f 1b	jmp $1b1f			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1b53					Command_New:
.1b53					Command_XNew:
.1b53	20 bc 1d	jsr $1dbc			jsr 	ResetCodeAddress 			; point to first line
.1b56	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1b58	98		tya				tya
.1b59	91 28		sta ($28),y			sta 	(codePtr),y
.1b5b	20 8f 16	jsr $168f			jsr 	CommandClear 				; clear everything down.
.1b5e	4c 88 1f	jmp $1f88			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1b61					Command_Poke:
.1b61	a9 01		lda #$01			lda 	#1
.1b63	d0 06		bne $1b6b			bne 	PokeGeneral
.1b65					Command_Doke:
.1b65	a9 02		lda #$02			lda 	#2
.1b67	d0 02		bne $1b6b			bne 	PokeGeneral
.1b69					Command_Loke:
.1b69	a9 03		lda #$03			lda 	#3
.1b6b					PokeGeneral:
.1b6b	48		pha				pha 								; save id (PDL = 123)
.1b6c	20 63 25	jsr $2563			jsr 	EvaluateRootInteger 		; target address
.1b6f	20 47 2b	jsr $2b47			jsr	 	CheckComma
.1b72	e8		inx				inx
.1b73	20 65 25	jsr $2565			jsr 	EvaluateInteger 			; what value to POKE ?
.1b76	ca		dex				dex
.1b77	20 6d 19	jsr $196d			jsr 	TOSToTemp0 					; temp0 points to the target address
.1b7a	84 32		sty $32				sty 	tempShort 					; save Y
.1b7c	68		pla				pla 								; get copy type (1-3) and dispatch
.1b7d	aa		tax				tax
.1b7e	ca		dex				dex
.1b7f	f0 14		beq $1b95			beq 	_Poke1
.1b81	ca		dex				dex
.1b82	f0 0b		beq $1b8f			beq 	_Poke2
.1b84	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1b86	a5 61		lda $61				lda 	esInt3+1
.1b88	91 2a		sta ($2a),y			sta 	(temp0),y
.1b8a	88		dey				dey
.1b8b	a5 59		lda $59				lda 	esInt2+1
.1b8d	91 2a		sta ($2a),y			sta 	(temp0),y
.1b8f					_Poke2:
.1b8f	a0 01		ldy #$01			ldy 	#1
.1b91	a5 51		lda $51				lda 	esInt1+1
.1b93	91 2a		sta ($2a),y			sta 	(temp0),y
.1b95					_Poke1:
.1b95	a0 00		ldy #$00			ldy 	#0
.1b97	a5 49		lda $49				lda 	esInt0+1
.1b99	91 2a		sta ($2a),y			sta 	(temp0),y
.1b9b	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1b9d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c04					lastPrintToken:
>0c04							.fill 	1
.1b9e					Command_Print:
.1b9e	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1ba0	8d 04 0c	sta $0c04			sta 	lastPrintToken
.1ba3	88		dey				dey
.1ba4					_PrintLoopSkip:
.1ba4	c8		iny				iny
.1ba5					_PrintLoop:
.1ba5	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1ba7	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1ba9	f0 5b		beq $1c06			beq 	_PrintExit
.1bab	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.1bad	f0 57		beq $1c06			beq 	_PrintExit
.1baf	8d 04 0c	sta $0c04			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1bb2	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1bb4	f0 ee		beq $1ba4			beq 	_PrintLoopSkip
.1bb6	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.1bb8	f0 3c		beq $1bf6			beq	 	_PrintNewLine
.1bba	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.1bbc	f0 40		beq $1bfe			beq 	_PrintTab
.1bbe	20 44 25	jsr $2544			jsr 	EvaluateRoot 				; evaluate something at the root
.1bc1	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1bc3	85 2a		sta $2a				sta 	temp0
.1bc5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1bc7	85 2b		sta $2b				sta 	1+(temp0)
.1bc9	a5 40		lda $40				lda 	esType 						; get type
.1bcb	f0 15		beq $1be2			beq		_PrintInteger
.1bcd	4a		lsr a				lsr 	a 							; check for floating point
.1bce	b0 08		bcs $1bd8			bcs 	_PrintFloat
.1bd0					_PrintString:
.1bd0	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1bd2	20 6d 19	jsr $196d			jsr 	TOSToTemp0
.1bd5	4c f0 1b	jmp $1bf0			jmp 	_PrintTemp0 				; print no leading space.
.1bd8					_PrintFloat:
.1bd8	a9 00		lda #$00			lda 	#0 							; stack level.
.1bda	a2 14		ldx #$14		ldx	#20
.1bdc	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.1bdf	4c e9 1b	jmp $1be9			jmp 	_PrintSpaceTemp0
.1be2					_PrintInteger:
.1be2	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1be4	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1be6	20 1d 2a	jsr $2a1d			jsr 	MInt32ToString				; convert to text
.1be9					_PrintSpaceTemp0:
.1be9	a9 20		lda #$20			lda 	#32
.1beb	a2 12		ldx #$12		ldx	#18
.1bed	20 59 11	jsr $1159		jsr	deviceHandler
.1bf0					_PrintTemp0:
.1bf0	20 17 1c	jsr $1c17			jsr 	PrintString
.1bf3	4c a5 1b	jmp $1ba5			jmp 	_PrintLoop
.1bf6					_PrintNewLine:
.1bf6	a2 02		ldx #$02		ldx	#2
.1bf8	20 59 11	jsr $1159		jsr	deviceHandler
.1bfb	4c a4 1b	jmp $1ba4			jmp 	_PrintLoopSkip
.1bfe					_PrintTab:
.1bfe	a2 16		ldx #$16		ldx	#22
.1c00	20 59 11	jsr $1159		jsr	deviceHandler
.1c03	4c a4 1b	jmp $1ba4			jmp 	_PrintLoopSkip
.1c06					_PrintExit:
.1c06	ad 04 0c	lda $0c04			lda		lastPrintToken 				; check last token
.1c09	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1c0b	f0 09		beq $1c16			beq 	_PrintExit2
.1c0d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1c0f	f0 05		beq $1c16			beq 	_PrintExit2
.1c11	a2 02		ldx #$02		ldx	#2
.1c13	20 59 11	jsr $1159		jsr	deviceHandler
.1c16					_PrintExit2:
.1c16	60		rts				rts
.1c17					PrintString:
.1c17	8a		txa				txa
.1c18	48		pha				pha
.1c19	98		tya				tya
.1c1a	48		pha				pha
.1c1b	a0 00		ldy #$00			ldy 	#0							; get length
.1c1d	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c1f	aa		tax				tax 								; into X
.1c20	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1c22	f0 10		beq $1c34			beq 	_PSExit
.1c24	ca		dex				dex
.1c25	8a		txa				txa
.1c26	48		pha				pha
.1c27	c8		iny				iny
.1c28	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c2a	a2 12		ldx #$12		ldx	#18
.1c2c	20 59 11	jsr $1159		jsr	deviceHandler
.1c2f	68		pla				pla
.1c30	aa		tax				tax
.1c31	4c 20 1c	jmp $1c20			jmp 	_PSLoop
.1c34					_PSExit:
.1c34	68		pla				pla
.1c35	a8		tay				tay
.1c36	68		pla				pla
.1c37	aa		tax				tax
.1c38	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c05					paramCount:
>0c05							.fill 	1
.1c39					CallProc:
.1c39	20 ad 1e	jsr $1ead			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1c3c	48		pha				pha 								; save length on stack
.1c3d	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1c3f	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1c41	48		pha				pha
.1c42	a5 2a		lda $2a				lda 	temp0
.1c44	48		pha				pha
.1c45	98		tya				tya 								; calculate Y + length
.1c46	18		clc				clc
.1c47	65 32		adc $32				adc 	tempShort
.1c49	a8		tay				tay
.1c4a	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1c4c					_CallProcEvalParams:
.1c4c	e8		inx				inx
.1c4d	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.1c4f	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1c51	f0 0b		beq $1c5e			beq 	_CPDoneParams
.1c53	20 46 25	jsr $2546			jsr 	Evaluate 					; evaluate a parameter
.1c56	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1c58	c8		iny				iny
.1c59	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1c5b	f0 ef		beq $1c4c			beq 	_CallProcEvalParams
.1c5d	88		dey				dey 								; undo consumption.
.1c5e					_CPDoneParams:
.1c5e	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 			; check closing parenthesis.
.1c61	8e 05 0c	stx $0c05			stx 	paramCount 					; store parameter count+1
.1c64	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1c66	a9 50		lda #$50			lda 	#markerPROC
.1c68	20 d6 2b	jsr $2bd6			jsr 	RSClaim
.1c6b	a9 01		lda #$01			lda 	#1 							; store return address.
.1c6d	20 02 2c	jsr $2c02			jsr 	RSSavePosition
.1c70	68		pla				pla 								; get the new code Ptr
.1c71	85 28		sta $28				sta 	codePtr
.1c73	68		pla				pla
.1c74	85 29		sta $29				sta 	codePtr+1
.1c76	68		pla				pla 								; length of name + 4 is the param start.
.1c77	18		clc				clc
.1c78	69 04		adc #$04			adc 	#4
.1c7a	a8		tay				tay
.1c7b	a2 ff		ldx #$ff			ldx 	#$FF
.1c7d					_CPLoadParameters:
.1c7d	e8		inx				inx 								; point to where the address should be loaded.
.1c7e	ec 05 0c	cpx $0c05			cpx 	paramCount 					; too many parameters in definition ?
.1c81	f0 1e		beq $1ca1			beq 	_CPParamError
.1c83	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.1c85	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.1c87	f0 0e		beq $1c97			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.1c89	20 6f 1a	jsr $1a6f			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1c8c	20 0b 19	jsr $190b			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1c8f	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.1c91	c8		iny				iny
.1c92	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1c94	f0 e7		beq $1c7d			beq 	_CPLoadParameters
.1c96	88		dey				dey 								; no, unconsume and check for )
.1c97					_CPParamComplete:
.1c97	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 			; check )
.1c9a	e8		inx				inx 								; check right number of parameters have been consumed
.1c9b	ec 05 0c	cpx $0c05			cpx 	paramCount
.1c9e	d0 01		bne $1ca1			bne 	_CPParamError
.1ca0	60		rts				rts
.1ca1					_CPParamError:
.1ca1	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1ca3	20 76 11	jsr $1176		jsr	errorHandler
.1ca6					ReturnProc:
.1ca6	20 e1 1a	jsr $1ae1			jsr 	RestoreLocals 				; get the locals back.
.1ca9	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1cab	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1cad	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1caf	f0 05		beq $1cb6			beq 	_isok
.1cb1	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1cb3	20 76 11	jsr $1176		jsr	errorHandler
.1cb6					_isok:
.1cb6	a9 01		lda #$01			lda 	#1
.1cb8	20 15 2c	jsr $2c15			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1cbb	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1cbd	20 f8 2b	jsr $2bf8			jsr 	RSFree
.1cc0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c06					dataPtr:
>0c06							.fill 	2
.0c08					dataIndex:
>0c08							.fill 	1
.1cc1					CommandRead:
.1cc1	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1cc3	20 98 25	jsr $2598			jsr 	EvaluateReference
.1cc6	20 07 1d	jsr $1d07			jsr 	SwapDPCP 					; use the data pointer.
.1cc9	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1ccb	c8		iny				iny
.1ccc	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1cce	f0 07		beq $1cd7			beq 	_CRInData
.1cd0	88		dey				dey
.1cd1	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1cd3	aa		tax				tax
.1cd4	20 54 2b	jsr $2b54			jsr 	ScanForward
.1cd7					_CRInData:
.1cd7	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1cd9	20 46 25	jsr $2546			jsr 	Evaluate
.1cdc	ca		dex				dex 								; and write the value.
.1cdd	20 0b 19	jsr $190b			jsr 	WriteValue
.1ce0	20 07 1d	jsr $1d07			jsr 	SwapDPCP 					; get the code pointer back.
.1ce3	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1ce5	c8		iny				iny
.1ce6	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.1ce8	f0 d7		beq $1cc1			beq 	CommandRead
.1cea	88		dey				dey
.1ceb	60		rts				rts
.1cec					CommandData:
.1cec	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1cee	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.1cf0	20 54 2b	jsr $2b54			jsr 	ScanForward
.1cf3	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1cf4	60		rts				rts
.1cf5					CommandRestore:
.1cf5	ad c8 0a	lda $0ac8			lda 	basePage
.1cf8	8d 06 0c	sta $0c06			sta 	dataPtr
.1cfb	ad c9 0a	lda $0ac9			lda 	basePage+1
.1cfe	8d 07 0c	sta $0c07			sta 	dataPtr+1
.1d01	a9 03		lda #$03			lda 	#3
.1d03	8d 08 0c	sta $0c08			sta 	dataIndex
.1d06	60		rts				rts
.1d07					SwapDPCP:
.1d07	8a		txa				txa
.1d08	48		pha				pha
.1d09	98		tya				tya 								; swap Y, DataIndex
.1d0a	ac 08 0c	ldy $0c08			ldy 	DataIndex
.1d0d	8d 08 0c	sta $0c08			sta 	DataIndex
.1d10	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1d12	ae 06 0c	ldx $0c06			ldx 	dataptr
.1d15	8d 06 0c	sta $0c06			sta 	dataPtr
.1d18	86 28		stx $28				stx 	codePtr
.1d1a	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1d1c	ae 07 0c	ldx $0c07			ldx 	dataptr+1
.1d1f	8d 07 0c	sta $0c07			sta 	dataPtr+1
.1d22	86 29		stx $29				stx 	codePtr+1
.1d24	68		pla				pla
.1d25	aa		tax				tax
.1d26	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1d27					Command_Rem:
.1d27					Command_Rem2:
.1d27	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1d29	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1d2b	d0 06		bne $1d33			bne 	_CRNotString
.1d2d	c8		iny				iny
.1d2e	98		tya				tya
.1d2f	38		sec				sec
.1d30	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1d32	a8		tay				tay
.1d33					_CRNotString:
.1d33	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.1d34					Command_Repeat:
.1d34	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1d36	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1d38	20 d6 2b	jsr $2bd6			jsr 	RSClaim
.1d3b	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1d3d	20 02 2c	jsr $2c02			jsr 	RSSavePosition
.1d40	60		rts				rts
.1d41					Command_Until:
.1d41	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1d43	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1d45	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1d47	f0 05		beq $1d4e			beq 	_isok
.1d49	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.1d4b	20 76 11	jsr $1176		jsr	errorHandler
.1d4e					_isok:
.1d4e	20 63 25	jsr $2563			jsr 	EvaluateRootInteger 		; at the bottom.
.1d51	20 ee 2a	jsr $2aee			jsr 	MInt32Zero					; check if TOS zero
.1d54	d0 06		bne $1d5c			bne 	_CUExit
.1d56	a9 01		lda #$01			lda 	#1
.1d58	20 15 2c	jsr $2c15			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1d5b	60		rts				rts
.1d5c					_CUExit:
.1d5c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1d5e	20 f8 2b	jsr $2bf8			jsr 	RSFree
.1d61	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.1d62					Command_Run:
.1d62					XCommand_Run:
.1d62	a2 ff		ldx #$ff			ldx 	#$FF
.1d64	9a		txs				txs
.1d65	20 8f 16	jsr $168f			jsr 	CommandClear 				; clear everything.
.1d68	20 bc 1d	jsr $1dbc			jsr 	ResetCodeAddress 			; back to the start.
.1d6b					Command_RunFrom:
.1d6b	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1d6d					CRNextInstruction:
.1d6d	64 7b		stz $7b				stz 	softMemAlloc+1
.1d6f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.1d71	10 1c		bpl $1d8f			bpl 	_CRNotToken
.1d73	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1d75	b0 0c		bcs $1d83			bcs 	_CRExecute
.1d77	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1d79	b0 4e		bcs $1dc9			bcs 	Unimplemented
.1d7b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1d7d	b0 04		bcs $1d83			bcs 	_CRExecute
.1d7f	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1d81	b0 16		bcs $1d99			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1d83					_CRExecute:
.1d83	c8		iny				iny 								; consume it.
.1d84	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1d85	aa		tax				tax
.1d86	20 8c 1d	jsr $1d8c			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1d89	4c 6d 1d	jmp $1d6d			jmp 	CRNextInstruction
.1d8c					_CRRunRoutine:
.1d8c	7c d3 1d	jmp ($1dd3,x)			jmp 	(Group0Vectors,x)
.1d8f					_CRNotToken:
.1d8f	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1d91	b0 36		bcs $1dc9			bcs 	Unimplemented
.1d93					_CRDefaultLet:
.1d93	20 f8 18	jsr $18f8			jsr 	CommandLet 					; do the default, LET
.1d96	4c 6d 1d	jmp $1d6d			jmp 	CRNextInstruction
.1d99					_CRCheckIndirect:
.1d99	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1d9b	f0 f6		beq $1d93			beq 	_CRDefaultLet
.1d9d	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1d9f	f0 f2		beq $1d93			beq 	_CRDefaultLet
.1da1	d0 26		bne $1dc9			bne 	Unimplemented
.1da3					CommandShift1:
.1da3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.1da5	10 22		bpl $1dc9			bpl 	Unimplemented 				; we have an error as this should not happen.
.1da7	0a		asl a				asl 	a 							; double into X
.1da8	aa		tax				tax
.1da9	c8		iny				iny 								; advance over it.
.1daa	20 b0 1d	jsr $1db0			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1dad	4c 6d 1d	jmp $1d6d			jmp 	CRNextInstruction
.1db0					_RunIt:
.1db0	7c 8b 1e	jmp ($1e8b,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1db3					CommandShift2:
.1db3	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1db5	20 1d 14	jsr $141d		jsr	extensionHandler
.1db8	4c 6d 1d	jmp $1d6d			jmp 	CRNextInstruction
.1dbb					CommandColon:
.1dbb	60		rts				rts
.1dbc					ResetCodeAddress:
.1dbc	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1dbf	85 28		sta $28				sta 	codePtr
.1dc1	ad c9 0a	lda $0ac9			lda 	basePage+1
.1dc4	85 29		sta $29				sta 	codePtr+1
.1dc6	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1dc8	60		rts				rts
.1dc9					Unimplemented:
.1dc9	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1dcb	20 76 11	jsr $1176		jsr	errorHandler
.1dce					TKErr01:
.1dce					TKErr02:
.1dce					TKErr03:
.1dce					TKErr04:
.1dce					TKErr05:
.1dce					TKErr06:
.1dce					TKErr07:
.1dce					TKErr08:
.1dce					TKErr09:
.1dce					TKErr10:
.1dce	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1dd0	20 76 11	jsr $1176		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1dd3					Group0Vectors:
>1dd3	8e 1f					.word	AdvanceNextLine          ; $80 [[eol]]
>1dd5	a3 1d					.word	CommandShift1            ; $81 [[sh1]]
>1dd7	b3 1d					.word	CommandShift2            ; $82 [[sh2]]
>1dd9	ce 1d					.word	TKErr09                  ; $83 [[sh3]]
>1ddb	ce 1d					.word	TKErr10                  ; $84 [[fpc]]
>1ddd	ce 1d					.word	TKErr08                  ; $85 [[str]]
>1ddf	52 21					.word	AndHandler               ; $86 and
>1de1	3f 21					.word	OrHandler                ; $87 or
>1de3	2c 21					.word	XorHandler               ; $88 xor
>1de5	74 22					.word	CompareGreaterEq         ; $89 >=
>1de7	7e 22					.word	CompareLessEq            ; $8a <=
>1de9	60 22					.word	CompareGreater           ; $8b >
>1deb	56 22					.word	CompareLess              ; $8c <
>1ded	4c 22					.word	CompareEquals            ; $8d =
>1def	6a 22					.word	CompareNotEquals         ; $8e <>
>1df1	bd 20					.word	AddHandler               ; $8f +
>1df3	e0 20					.word	SubHandler               ; $90 -
>1df5	78 21					.word	ShrHandler               ; $91 >>
>1df7	65 21					.word	ShlHandler               ; $92 <<
>1df9	f3 20					.word	MulHandler               ; $93 *
>1dfb	06 21					.word	DivHandler               ; $94 /
>1dfd	19 21					.word	ModHandler               ; $95 mod
>1dff	b1 21					.word	PowerHandler             ; $96 ^
>1e01	8b 21					.word	WordRefHandler           ; $97 !
>1e03	9e 21					.word	ByteRefHandler           ; $98 ?
>1e05	34 1d					.word	Command_Repeat           ; $99 repeat
>1e07	56 20					.word	Command_While            ; $9a while
>1e09	fc 16					.word	Command_FOR              ; $9b for
>1e0b	0b 18					.word	CommandIf                ; $9c if
>1e0d	ce 1d					.word	TKErr04                  ; $9d defproc
>1e0f	41 1d					.word	Command_Until            ; $9e until
>1e11	79 20					.word	Command_Wend             ; $9f wend
>1e13	5d 17					.word	Command_NEXT             ; $a0 next
>1e15	ce 1d					.word	TKErr06                  ; $a1 then
>1e17	46 18					.word	Command_ENDIF            ; $a2 endif
>1e19	a6 1c					.word	ReturnProc               ; $a3 endproc
>1e1b	4d 24					.word	UnaryParenthesis         ; $a4 (
>1e1d	ab 25					.word	UnaryLen                 ; $a5 len(
>1e1f	ef 25					.word	UnarySgn                 ; $a6 sgn(
>1e21	d8 25					.word	UnaryAbs                 ; $a7 abs(
>1e23	48 26					.word	Unary_Random             ; $a8 random(
>1e25	92 26					.word	Unary_Page               ; $a9 page
>1e27	c3 2a					.word	MInt32True               ; $aa true
>1e29	c7 2a					.word	MInt32False              ; $ab false
>1e2b	5d 26					.word	Unary_Min                ; $ac min(
>1e2d	61 26					.word	Unary_Max                ; $ad max(
>1e2f	4c 27					.word	UnarySys                 ; $ae sys(
>1e31	0f 27					.word	UnaryTimer               ; $af timer(
>1e33	a2 24					.word	EventFunction            ; $b0 event(
>1e35	38 27					.word	UnaryGet                 ; $b1 get(
>1e37	28 27					.word	UnaryInkey               ; $b2 inkey(
>1e39	e3 26					.word	UnaryAlloc               ; $b3 alloc(
>1e3b	74 27					.word	ExecChr                  ; $b4 chr$(
>1e3d	a4 27					.word	ExecLeft                 ; $b5 left$(
>1e3f	c1 27					.word	ExecMid                  ; $b6 mid$(
>1e41	e9 27					.word	ExecRight                ; $b7 right$(
>1e43	8e 22					.word	Event_Str                ; $b8 str$(
>1e45	bd 22					.word	UnaryVal                 ; $b9 val(
>1e47	06 26					.word	UnaryPeek                ; $ba peek(
>1e49	0c 26					.word	UnaryDeek                ; $bb deek(
>1e4b	12 26					.word	UnaryLeek                ; $bc leek(
>1e4d	c9 25					.word	UnaryAsc                 ; $bd asc(
>1e4f	bd 26					.word	UnaryIntToFloat          ; $be int(
>1e51	d0 26					.word	UnaryFloatToInt          ; $bf float(
>1e53	c0 22					.word	UnaryIsVal               ; $c0 isval(
>1e55	8b 27					.word	ExecUpper                ; $c1 upper$(
>1e57	88 27					.word	ExecLower                ; $c2 lower$(
>1e59	a0 26					.word	UnaryReference           ; $c3 @
>1e5b	b6 26					.word	UnaryComplement          ; $c4 ~
>1e5d	b3 26					.word	UnaryHexMarker           ; $c5 &
>1e5f	ce 1d					.word	TKErr01                  ; $c6 )
>1e61	bb 1d					.word	CommandColon             ; $c7 :
>1e63	ce 1d					.word	TKErr02                  ; $c8 ,
>1e65	ce 1d					.word	TKErr03                  ; $c9 ;
>1e67	27 1d					.word	Command_Rem2             ; $ca '
>1e69	ce 1d					.word	TKErr07                  ; $cb to
>1e6b	ce 1d					.word	TKErr05                  ; $cc step
>1e6d	39 1c					.word	CallProc                 ; $cd proc
>1e6f	51 1a					.word	CommandLocal             ; $ce local
>1e71	ee 16					.word	Command_Dim              ; $cf dim
>1e73	27 1d					.word	Command_Rem              ; $d0 rem
>1e75	f8 18					.word	CommandLet               ; $d1 let
>1e77	47 18					.word	Command_Input            ; $d2 input
>1e79	40 18					.word	Command_ELSE             ; $d3 else
>1e7b	35 20					.word	Command_VDU              ; $d4 vdu
>1e7d	9e 1b					.word	Command_Print            ; $d5 print
>1e7f	03 20					.word	CommandGOTO              ; $d6 goto
>1e81	d8 1f					.word	CommandGOSUB             ; $d7 gosub
>1e83	eb 1f					.word	CommandRETURN            ; $d8 return
>1e85	ec 1c					.word	CommandData              ; $d9 data
>1e87	81 16					.word	Command_Assert           ; $da assert
>1e89	61 1b					.word	Command_Poke             ; $db poke
>1e8b	65 1b					.word	Command_Doke             ; $dc doke
>1e8d	69 1b					.word	Command_Loke             ; $dd loke
>1e8f	a8 1f					.word	Command_Ink              ; $de ink
>1e91	b3 1f					.word	Command_Paper            ; $df paper
>1e93	a2 1f					.word	Command_CLS              ; $e0 cls
>1e95	be 1f					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1e97					Group1Vectors:
>1e97	8f 16					.word	CommandClear             ; $86 clear
>1e99	f8 19					.word	CommandLoad              ; $87 load
>1e9b	0d 1a					.word	CommandSave              ; $88 save
>1e9d	76 19					.word	CommandList              ; $89 list
>1e9f	53 1b					.word	Command_New              ; $8a new
>1ea1	62 1d					.word	Command_Run              ; $8b run
>1ea3	c1 1c					.word	CommandRead              ; $8c read
>1ea5	f5 1c					.word	CommandRestore           ; $8d restore
>1ea7	88 1f					.word	CommandEnd               ; $8e end
>1ea9	83 1f					.word	CommandStop              ; $8f stop
>1eab	8b 1f					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c09					procList:
>0c09							.fill 	2		 					; terminated by name high being zero.
.0c0b					yInLine:
>0c0b							.fill 	1
.1ead					FindProcedure:
.1ead	8c 0b 0c	sty $0c0b			sty 	yInLine 					; save current position.
.1eb0	20 6b 1f	jsr $1f6b			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1eb3	85 2c		sta $2c				sta 	temp1
.1eb5	ad 09 0c	lda $0c09			lda		procList 					; put procList address in temp2
.1eb8	85 2e		sta $2e				sta 	temp2
.1eba	ad 0a 0c	lda $0c0a			lda 	procList+1
.1ebd	85 2f		sta $2f				sta 	temp2+1
.1ebf	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1ec1					_FPLoop:
.1ec1	b1 2e		lda ($2e),y			lda 	(temp2),y
.1ec3	f0 4f		beq $1f14			beq 	_FPError 					; if so, we don't know this procedure.
.1ec5	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1ec7	c8		iny				iny
.1ec8	b1 2e		lda ($2e),y			lda 	(temp2),y
.1eca	85 2a		sta $2a				sta 	temp0
.1ecc	c8		iny				iny
.1ecd	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.1ecf	c5 2c		cmp $2c				cmp 	temp1
.1ed1	d0 2b		bne $1efe			bne 	_FPNext 					; hash is different, go to next.
.1ed3	38		sec				sec
.1ed4	ad 0b 0c	lda $0c0b			lda 	yInLine 					; position in line must be at least 4
.1ed7	e9 04		sbc #$04			sbc 	#4
.1ed9	18		clc				clc
.1eda	65 28		adc $28				adc 	codePtr
.1edc	85 30		sta $30				sta 	temp3
.1ede	a5 29		lda $29				lda 	codePtr+1
.1ee0	69 00		adc #$00			adc 	#0
.1ee2	85 31		sta $31				sta 	temp3+1
.1ee4	98		tya				tya
.1ee5	48		pha				pha
.1ee6	a0 04		ldy #$04			ldy 	#4
.1ee8					_FPCName:
.1ee8	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.1eea	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1eec	d0 0e		bne $1efc			bne 	_FPpulYNext 				; if different go to next one.
.1eee	c8		iny				iny
.1eef	c9 3a		cmp #$3a			cmp 	#$3A
.1ef1	90 f5		bcc $1ee8			bcc 	_FPCName 					; compare the whole lot....
.1ef3	68		pla				pla 								; throw away the saved Y
.1ef4	98		tya				tya 								; length of name is Y-4
.1ef5	38		sec				sec
.1ef6	e9 04		sbc #$04			sbc 	#4
.1ef8	ac 0b 0c	ldy $0c0b			ldy 	yInLine  					; get the original Y back
.1efb	60		rts				rts
.1efc					_FPpulYNext:
.1efc	68		pla				pla
.1efd	a8		tay				tay
.1efe					_FPNext:
.1efe	c8		iny				iny 								; next procedure record.
.1eff	10 c0		bpl $1ec1			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1f01	98		tya				tya 								; subtract 128 from Y
.1f02	38		sec				sec
.1f03	e9 80		sbc #$80			sbc 	#128
.1f05	a8		tay				tay
.1f06	18		clc				clc 								; add 128 to temp2, so we can have more than
.1f07	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.1f09	69 80		adc #$80			adc 	#128
.1f0b	85 2e		sta $2e				sta 	temp2
.1f0d	90 b2		bcc $1ec1			bcc 	_FPLoop
.1f0f	e6 2f		inc $2f				inc 	temp2+1
.1f11	4c c1 1e	jmp $1ec1			jmp 	_FPLoop
.1f14					_FPError:
.1f14	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1f16	20 76 11	jsr $1176		jsr	errorHandler
.1f19					ScanProc:
.1f19	98		tya				tya
.1f1a	48		pha				pha
.1f1b	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.1f1d	8d 09 0c	sta $0c09			sta 	procList
.1f20	a5 36		lda $36				lda 	lowMemory+1
.1f22	8d 0a 0c	sta $0c0a			sta 	procList+1
.1f25	20 bc 1d	jsr $1dbc			jsr 	ResetCodeAddress 			; back to the start.
.1f28					_ScanLoop:
.1f28	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1f2a	b1 28		lda ($28),y			lda 	(codePtr),y
.1f2c	f0 2a		beq $1f58			beq 	_ScanExit
.1f2e	a0 03		ldy #$03			ldy 	#3							; get first token
.1f30	b1 28		lda ($28),y			lda 	(codePtr),y
.1f32	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.1f34	d0 12		bne $1f48			bne 	_ScanNext
.1f36	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.1f38	20 60 1f	jsr $1f60			jsr 	_ScanWrite
.1f3b	a5 28		lda $28				lda 	codePtr
.1f3d	20 60 1f	jsr $1f60			jsr 	_ScanWrite
.1f40	a0 04		ldy #$04			ldy 	#4 							; start of name part
.1f42	20 6b 1f	jsr $1f6b			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1f45	20 60 1f	jsr $1f60			jsr 	_ScanWrite					; and write that
.1f48					_ScanNext:
.1f48	18		clc				clc
.1f49	a0 00		ldy #$00			ldy 	#0
.1f4b	b1 28		lda ($28),y			lda 	(codePtr),y
.1f4d	65 28		adc $28				adc 	codePtr
.1f4f	85 28		sta $28				sta 	codePtr
.1f51	90 d5		bcc $1f28			bcc 	_ScanLoop
.1f53	e6 29		inc $29				inc 	codePtr+1
.1f55	4c 28 1f	jmp $1f28			jmp 	_ScanLoop
.1f58					_ScanExit:
.1f58	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1f5a	20 60 1f	jsr $1f60			jsr 	_ScanWrite
.1f5d	68		pla				pla
.1f5e	a8		tay				tay
.1f5f	60		rts				rts
.1f60					_ScanWrite:
.1f60	a0 00		ldy #$00			ldy 	#0
.1f62	91 35		sta ($35),y			sta 	(lowMemory),y
.1f64	e6 35		inc $35				inc 	lowMemory
.1f66	d0 02		bne $1f6a			bne 	_SWNoCarry
.1f68	e6 36		inc $36				inc 	lowMemory+1
.1f6a					_SWNoCarry:
.1f6a	60		rts				rts
.1f6b					CalculateProcedureHash:
.1f6b	a9 00		lda #$00			lda 	#0 							; clear hash.
.1f6d	85 2a		sta $2a				sta 	temp0
.1f6f					_CPHLoop:
.1f6f	18		clc				clc 								; add character and rotate and add carry back in
.1f70	b1 28		lda ($28),y			lda 	(codePtr),y
.1f72	65 2a		adc $2a				adc 	temp0
.1f74	6a		ror a				ror 	a
.1f75	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1f77	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.1f79	b1 28		lda ($28),y			lda 	(codePtr),y
.1f7b	c8		iny				iny 								; advance incase we go round again.
.1f7c	c9 3a		cmp #$3a			cmp 	#$3A
.1f7e	90 ef		bcc $1f6f			bcc 	_CPHLoop
.1f80	a5 2a		lda $2a				lda 	temp0
.1f82	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1f83					CommandStop:
.1f83	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1f85	20 76 11	jsr $1176		jsr	errorHandler
.1f88					CommandEnd:
.1f88	4c 24 2c	jmp $2c24			jmp 	WarmStart
.1f8b					CommandXemu:
.1f8b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1f8e					AdvanceNextLine:
.1f8e	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f90	b1 28		lda ($28),y			lda 	(codePtr),y
.1f92	18		clc				clc 								; add to codePtr
.1f93	65 28		adc $28				adc 	codePtr
.1f95	85 28		sta $28				sta 	codePtr
.1f97	90 02		bcc $1f9b			bcc 	_ANLNoCarry
.1f99	e6 29		inc $29				inc 	codePtr+1
.1f9b					_ANLNoCarry:
.1f9b	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1f9d	f0 e9		beq $1f88			beq 	CommandEnd 					; execute END
.1f9f	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1fa1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1fa2					Command_CLS:
.1fa2	a2 00		ldx #$00		ldx	#0
.1fa4	20 59 11	jsr $1159		jsr	deviceHandler
.1fa7	60		rts				rts
.1fa8					Command_Ink:
.1fa8	a2 00		ldx #$00			ldx 	#0
.1faa	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger
.1fad	a2 06		ldx #$06		ldx	#6
.1faf	20 59 11	jsr $1159		jsr	deviceHandler
.1fb2	60		rts				rts
.1fb3					Command_Paper:
.1fb3	a2 00		ldx #$00			ldx 	#0
.1fb5	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger
.1fb8	a2 10		ldx #$10		ldx	#16
.1fba	20 59 11	jsr $1159		jsr	deviceHandler
.1fbd	60		rts				rts
.1fbe					Command_Locate:
.1fbe	a2 00		ldx #$00			ldx 	#0
.1fc0	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger
.1fc3	20 47 2b	jsr $2b47			jsr 	CheckComma
.1fc6	e8		inx				inx
.1fc7	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger
.1fca	98		tya				tya
.1fcb	48		pha				pha
.1fcc	a4 49		ldy $49				ldy 	esInt0+1
.1fce	a5 48		lda $48				lda 	esInt0
.1fd0	a2 0e		ldx #$0e		ldx	#14
.1fd2	20 59 11	jsr $1159		jsr	deviceHandler
.1fd5	68		pla				pla
.1fd6	a8		tay				tay
.1fd7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1fd8					CommandGOSUB:
.1fd8	20 63 25	jsr $2563			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1fdb	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1fdd	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1fdf	20 d6 2b	jsr $2bd6			jsr 	RSClaim
.1fe2	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1fe4	20 02 2c	jsr $2c02			jsr 	RSSavePosition
.1fe7	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1fe9	f0 1b		beq $2006			beq 	GotoTOS 					; and do a GOTO there.
.1feb					CommandRETURN:
.1feb	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1fed	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1fef	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1ff1	f0 05		beq $1ff8			beq 	_isok
.1ff3	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1ff5	20 76 11	jsr $1176		jsr	errorHandler
.1ff8					_isok:
.1ff8	a9 01		lda #$01			lda 	#1
.1ffa	20 15 2c	jsr $2c15			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1ffd	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1fff	20 f8 2b	jsr $2bf8			jsr 	RSFree
.2002	60		rts				rts
.2003					CommandGOTO:
.2003	20 63 25	jsr $2563			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2006					GotoTOS:
.2006	20 bc 1d	jsr $1dbc			jsr 	ResetCodeAddress 			; simple search.
.2009					_GotoSearch:
.2009	a0 00		ldy #$00			ldy 	#0 							; get offset
.200b	b1 28		lda ($28),y			lda 	(codePtr),y
.200d	f0 21		beq $2030			beq 	_GotoError 					; not found.
.200f	c8		iny				iny									; check LSB match
.2010	b1 28		lda ($28),y			lda 	(codePtr),y
.2012	d5 48		cmp $48,x			cmp 	esInt0,x
.2014	d0 07		bne $201d			bne 	_GotoNext
.2016	c8		iny				iny
.2017	b1 28		lda ($28),y			lda 	(codePtr),y
.2019	d5 50		cmp $50,x			cmp 	esInt1,x
.201b	f0 10		beq $202d			beq 	_GotoFound
.201d					_GotoNext:
.201d	a0 00		ldy #$00			ldy 	#0 							; go next line
.201f	b1 28		lda ($28),y			lda 	(codePtr),y
.2021	18		clc				clc
.2022	65 28		adc $28				adc 	codePtr
.2024	85 28		sta $28				sta 	codePtr
.2026	90 e1		bcc $2009			bcc 	_GotoSearch
.2028	e6 29		inc $29				inc 	codePtr+1
.202a	4c 09 20	jmp $2009			jmp 	_GotoSearch
.202d					_GotoFound:
.202d	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.202f	60		rts				rts
.2030					_GotoError:
.2030	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2032	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.2035					Command_VDU:
.2035	20 63 25	jsr $2563			jsr 	EvaluateRootInteger 			; get integer at root.
.2038	a5 48		lda $48				lda 	esInt0
.203a	a2 12		ldx #$12		ldx	#18
.203c	20 59 11	jsr $1159		jsr	deviceHandler
.203f					_CVNext:
.203f	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2041	c8		iny				iny
.2042	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.2044	f0 ef		beq $2035			beq 	Command_VDU
.2046	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2048	d0 0a		bne $2054			bne 	_CVExit
.204a	a5 50		lda $50				lda 	esInt1
.204c	a2 12		ldx #$12		ldx	#18
.204e	20 59 11	jsr $1159		jsr	deviceHandler
.2051	4c 3f 20	jmp $203f			jmp 	_CVNext
.2054	88		dey		_CVExit:dey
.2055	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2056					Command_While:
.2056	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2058	a2 04		ldx #$04			ldx 	#4
.205a	20 d6 2b	jsr $2bd6			jsr 	RSClaim 					; create on stack.
.205d	88		dey				dey
.205e	a9 01		lda #$01			lda 	#1
.2060	20 02 2c	jsr $2c02			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2063	c8		iny				iny
.2064	20 65 25	jsr $2565			jsr 	EvaluateInteger				; get the conditional
.2067	20 ee 2a	jsr $2aee			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.206a	f0 01		beq $206d			beq 	_CWFail
.206c	60		rts				rts
.206d					_CWFail:
.206d	a9 04		lda #$04			lda 	#4
.206f	20 f8 2b	jsr $2bf8			jsr 	RSFree 						; close the just opened position.
.2072	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2074	aa		tax				tax
.2075	20 54 2b	jsr $2b54			jsr 	ScanForward
.2078	60		rts				rts
.2079					Command_Wend:
.2079	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.207b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.207d	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.207f	f0 05		beq $2086			beq 	_isok
.2081	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2083	20 76 11	jsr $1176		jsr	errorHandler
.2086					_isok:
.2086	a9 01		lda #$01			lda 	#1
.2088	20 15 2c	jsr $2c15			jsr 	RSLoadPosition				; go back until true
.208b	a9 04		lda #$04			lda 	#4
.208d	20 f8 2b	jsr $2bf8			jsr 	RSFree 						; close the loop
.2090	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.2091					BinaryProcess:
.2091	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2093	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.2095	0a		asl a				asl 	a
.2096	30 0e		bmi $20a6			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.2098	18		clc				clc 								; return CC for integer
.2099	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.209b	f0 08		beq $20a5			beq 	_BPExit 					; if both integer then return with CC.
.209d	20 ab 20	jsr $20ab			jsr 	BPMakeBothFloat 			; make both float
.20a0	a9 01		lda #$01			lda 	#$01 						; set result type to float
.20a2	95 40		sta $40,x			sta 	esType,x
.20a4	38		sec				sec 								; and return with carry set.
.20a5					_BPExit:
.20a5	60		rts				rts
.20a6					_BPStringType:
.20a6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.20a8	20 76 11	jsr $1176		jsr	errorHandler
.20ab					BPMakeBothFloat:
.20ab	e8		inx				inx
.20ac	20 b0 20	jsr $20b0			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.20af	ca		dex				dex
.20b0					BPMakeFloat:
.20b0	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.20b2	4a		lsr a				lsr 	a
.20b3	b0 07		bcs $20bc			bcs 	_BPIsFloat 					; already a float if set.
.20b5	8a		txa				txa
.20b6	a2 1a		ldx #$1a		ldx	#26
.20b8	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.20bb	aa		tax				tax
.20bc					_BPIsFloat:
.20bc	60		rts				rts
.20bd					AddHandler:
.20bd	20 0c 23	jsr $230c			jsr 	DereferenceTwo 				; dereference top two on stack.
.20c0	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.20c2	35 41		and $41,x			and 	esType+1,x
.20c4	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.20c6	d0 10		bne $20d8			bne 	_AHStringConcat				; concatenate strings.
.20c8	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.20cb	b0 03		bcs $20d0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.20cd	4c ab 29	jmp $29ab			jmp 	MInt32Add 							; else do it as integer.
.20d0					_IsFPOperation:
.20d0	8a		txa				txa 								; call the relevant fp routine
.20d1	a2 02		ldx #$02		ldx	#2
.20d3	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.20d6	aa		tax				tax
.20d7	60		rts				rts
.20d8					_AHStringConcat:
.20d8	8a		txa				txa 								; handled by the string module.
.20d9	a2 04		ldx #$04		ldx	#4
.20db	20 d8 2e	jsr $2ed8		jsr	stringHandler
.20de	aa		tax				tax
.20df	60		rts				rts
.20e0					SubHandler:
.20e0	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.20e3	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.20e6	b0 03		bcs $20eb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.20e8	4c c5 29	jmp $29c5			jmp 	MInt32Sub 							; else do it as integer.
.20eb					_IsFPOperation:
.20eb	8a		txa				txa 								; call the relevant fp routine
.20ec	a2 10		ldx #$10		ldx	#16
.20ee	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.20f1	aa		tax				tax
.20f2	60		rts				rts
.20f3					MulHandler:
.20f3	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.20f6	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.20f9	b0 03		bcs $20fe			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.20fb	4c df 29	jmp $29df			jmp 	MInt32Multiply 							; else do it as integer.
.20fe					_IsFPOperation:
.20fe	8a		txa				txa 								; call the relevant fp routine
.20ff	a2 0a		ldx #$0a		ldx	#10
.2101	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2104	aa		tax				tax
.2105	60		rts				rts
.2106					DivHandler:
.2106	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.2109	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.210c	b0 03		bcs $2111			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.210e	4c 9c 28	jmp $289c			jmp 	MInt32SDivide 							; else do it as integer.
.2111					_IsFPOperation:
.2111	8a		txa				txa 								; call the relevant fp routine
.2112	a2 06		ldx #$06		ldx	#6
.2114	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2117	aa		tax				tax
.2118	60		rts				rts
.2119					ModHandler:
.2119	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.211c	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.211f	b0 03		bcs $2124			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2121	4c 1a 29	jmp $291a			jmp 	MInt32Modulus 							; else do it as integer.
.2124					_IsFPOperation:
.2124	8a		txa				txa 								; call the relevant fp routine
.2125	a2 08		ldx #$08		ldx	#8
.2127	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.212a	aa		tax				tax
.212b	60		rts				rts
.212c					XorHandler:
.212c	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.212f	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.2132	b0 03		bcs $2137			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2134	4c 4e 28	jmp $284e			jmp 	MInt32Xor 							; else do it as integer.
.2137					_IsFPOperation:
.2137	8a		txa				txa 								; call the relevant fp routine
.2138	a2 08		ldx #$08		ldx	#8
.213a	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.213d	aa		tax				tax
.213e	60		rts				rts
.213f					OrHandler:
.213f	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.2142	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.2145	b0 03		bcs $214a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2147	4c 35 28	jmp $2835			jmp 	MInt32Or 							; else do it as integer.
.214a					_IsFPOperation:
.214a	8a		txa				txa 								; call the relevant fp routine
.214b	a2 08		ldx #$08		ldx	#8
.214d	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2150	aa		tax				tax
.2151	60		rts				rts
.2152					AndHandler:
.2152	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.2155	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.2158	b0 03		bcs $215d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.215a	4c 1c 28	jmp $281c			jmp 	MInt32And 							; else do it as integer.
.215d					_IsFPOperation:
.215d	8a		txa				txa 								; call the relevant fp routine
.215e	a2 08		ldx #$08		ldx	#8
.2160	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2163	aa		tax				tax
.2164	60		rts				rts
.2165					ShlHandler:
.2165	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.2168	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.216b	b0 03		bcs $2170			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.216d	4c e6 21	jmp $21e6			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2170					_IsFPOperation:
.2170	8a		txa				txa 								; call the relevant fp routine
.2171	a2 08		ldx #$08		ldx	#8
.2173	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2176	aa		tax				tax
.2177	60		rts				rts
.2178					ShrHandler:
.2178	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.217b	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.217e	b0 03		bcs $2183			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2180	4c e9 21	jmp $21e9			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2183					_IsFPOperation:
.2183	8a		txa				txa 								; call the relevant fp routine
.2184	a2 08		ldx #$08		ldx	#8
.2186	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2189	aa		tax				tax
.218a	60		rts				rts
.218b					WordRefHandler:
.218b	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.218e	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.2191	b0 03		bcs $2196			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2193	4c d8 21	jmp $21d8			jmp 	MInt32WordIndirect 							; else do it as integer.
.2196					_IsFPOperation:
.2196	8a		txa				txa 								; call the relevant fp routine
.2197	a2 08		ldx #$08		ldx	#8
.2199	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.219c	aa		tax				tax
.219d	60		rts				rts
.219e					ByteRefHandler:
.219e	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.21a1	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.21a4	b0 03		bcs $21a9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21a6	4c dc 21	jmp $21dc			jmp 	MInt32ByteIndirect 							; else do it as integer.
.21a9					_IsFPOperation:
.21a9	8a		txa				txa 								; call the relevant fp routine
.21aa	a2 08		ldx #$08		ldx	#8
.21ac	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.21af	aa		tax				tax
.21b0	60		rts				rts
.21b1					PowerHandler:
.21b1	20 0c 23	jsr $230c			jsr 	DereferenceTwo
.21b4	20 91 20	jsr $2091			jsr 	BinaryProcess 				; check to see if either is float
.21b7	b0 03		bcs $21bc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21b9	4c c4 21	jmp $21c4			jmp 	PowerInteger 							; else do it as integer.
.21bc					_IsFPOperation:
.21bc	8a		txa				txa 								; call the relevant fp routine
.21bd	a2 16		ldx #$16		ldx	#22
.21bf	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.21c2	aa		tax				tax
.21c3	60		rts				rts
.21c4					PowerInteger:
.21c4	20 ab 20	jsr $20ab			jsr 	BPMakeBothFloat				; make them float.
.21c7	8a		txa				txa
.21c8	a2 16		ldx #$16		ldx	#22
.21ca	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.21cd	a2 12		ldx #$12		ldx	#18
.21cf	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.21d2	aa		tax				tax
.21d3	a9 00		lda #$00			lda 	#0 							; make type integer
.21d5	95 40		sta $40,x			sta 	esType,x
.21d7	60		rts				rts
.21d8					Mint32WordIndirect:
.21d8	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.21da	d0 02		bne $21de			bne 	Min32Indirect
.21dc					Mint32ByteIndirect:
.21dc	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.21de					Min32Indirect:
.21de	48		pha				pha 								; save the indirection
.21df	20 ab 29	jsr $29ab			jsr 	MInt32Add 					; add a!b a?b
.21e2	68		pla				pla 								; and set the type to reference.
.21e3	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.21e5	60		rts				rts
.21e6					Mint32ShiftLeftX:
.21e6	18		clc				clc 								; CC shift left
.21e7	90 01		bcc $21ea			bcc 	Mint32Shift
.21e9					Mint32ShiftRightX:
.21e9	38		sec				sec 								; CS shift right
.21ea					Mint32Shift:
.21ea	08		php				php 								; save carry flag on stack.
.21eb	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.21ed	15 59		ora $59,x			ora 	esInt2+1,x
.21ef	15 61		ora $61,x			ora 	esInt3+1,x
.21f1	d0 1e		bne $2211			bne 	_MShiftZero
.21f3	b5 49		lda $49,x			lda 	esInt0+1,x
.21f5	c9 20		cmp #$20			cmp 	#32
.21f7	b0 18		bcs $2211			bcs 	_MShiftZero
.21f9					_MShiftLoop:
.21f9	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.21fb	f0 12		beq $220f			beq 	_MShiftExit
.21fd	d6 49		dec $49,x			dec 	esInt0+1,x
.21ff	28		plp				plp 								; restore and save carry
.2200	08		php				php
.2201	90 06		bcc $2209			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2203	20 e5 2a	jsr $2ae5			jsr 	Mint32ShiftRight
.2206	4c f9 21	jmp $21f9			jmp 	_MShiftLoop
.2209					_MShiftLeft:
.2209	20 dc 2a	jsr $2adc			jsr 	Mint32ShiftLeft
.220c	4c f9 21	jmp $21f9			jmp 	_MShiftLoop
.220f					_MShiftExit:
.220f	28		plp				plp	 								; throw saved carry and exit
.2210	60		rts				rts
.2211					_MShiftZero:
.2211	4c c7 2a	jmp $2ac7			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.2214					PerformComparison:
.2214	20 0c 23	jsr $230c			jsr 	DereferenceTwo 				; make both values.
.2217	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.2219	35 41		and $41,x			and 	esType+1,x
.221b	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.221c	30 1d		bmi $223b			bmi 	_PCIsString
.221e	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.2220	15 41		ora $41,x			ora 	esType+1,x
.2222	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2223	30 22		bmi $2247			bmi 	_PCError
.2225	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2227	f0 0f		beq $2238			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2229	20 ab 20	jsr $20ab			jsr 	BPMakeBothFloat 			; make both float
.222c	8a		txa				txa
.222d	a2 04		ldx #$04		ldx	#4
.222f	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2232	86 32		stx $32				stx 	tempShort 					; save result
.2234	aa		tax				tax
.2235	a5 32		lda $32				lda 	tempShort
.2237	60		rts				rts
.2238					_PCIsInteger:
.2238	4c 67 28	jmp $2867			jmp 	MInt32Compare
.223b					_PCIsString:
.223b	8a		txa				txa 								; A has SP
.223c	a2 06		ldx #$06		ldx	#6
.223e	20 d8 2e	jsr $2ed8		jsr	stringHandler
.2241	86 32		stx $32				stx 	tempShort 					; save result
.2243	aa		tax				tax 								; put SP back in X and get result.
.2244	a5 32		lda $32				lda 	tempShort
.2246	60		rts				rts
.2247					_PCError:
.2247	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2249	20 76 11	jsr $1176		jsr	errorHandler
.224c					CompareEquals:
.224c	20 14 22	jsr $2214			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.224f	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2251	f0 35		beq $2288			beq  	CompareTrue
.2253	4c 8b 22	jmp $228b			jmp 	CompareFalse
.2256					CompareLess:
.2256	20 14 22	jsr $2214			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2259	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.225b	f0 2b		beq $2288			beq  	CompareTrue
.225d	4c 8b 22	jmp $228b			jmp 	CompareFalse
.2260					CompareGreater:
.2260	20 14 22	jsr $2214			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2263	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2265	f0 21		beq $2288			beq  	CompareTrue
.2267	4c 8b 22	jmp $228b			jmp 	CompareFalse
.226a					CompareNotEquals:
.226a	20 14 22	jsr $2214			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.226d	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.226f	d0 17		bne $2288			bne  	CompareTrue
.2271	4c 8b 22	jmp $228b			jmp 	CompareFalse
.2274					CompareGreaterEq:
.2274	20 14 22	jsr $2214			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2277	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2279	d0 0d		bne $2288			bne  	CompareTrue
.227b	4c 8b 22	jmp $228b			jmp 	CompareFalse
.227e					CompareLessEq:
.227e	20 14 22	jsr $2214			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2281	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2283	d0 03		bne $2288			bne  	CompareTrue
.2285	4c 8b 22	jmp $228b			jmp 	CompareFalse
.2288					CompareTrue:
.2288	4c c3 2a	jmp $2ac3			jmp 	MInt32True
.228b					CompareFalse:
.228b	4c c7 2a	jmp $2ac7			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.228e					Event_Str:
.228e	20 4f 25	jsr $254f			jsr 	EvaluateNumeric 			; get a number.
.2291	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.2293	d0 13		bne $22a8			bne 	_ESFloat
.2295	20 eb 22	jsr $22eb			jsr 	ConvertGetBase 				; get base, or default.
.2298	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.229a	85 2a		sta $2a				sta 	temp0
.229c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.229e	85 2b		sta $2b				sta 	1+(temp0)
.22a0	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.22a2	20 1d 2a	jsr $2a1d			jsr 	MInt32ToString 				; convert to string.
.22a5	4c b5 22	jmp $22b5			jmp 	_ESCloneExit 				; clone and exit.
.22a8					_ESFloat:
.22a8	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 			; check closing )
.22ab	20 6d 19	jsr $196d			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.22ae	8a		txa				txa
.22af	a2 14		ldx #$14		ldx	#20
.22b1	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.22b4	aa		tax				tax
.22b5					_ESCloneExit:
.22b5	8a		txa				txa
.22b6	a2 02		ldx #$02		ldx	#2
.22b8	20 d8 2e	jsr $2ed8		jsr	stringHandler
.22bb	aa		tax				tax
.22bc	60		rts				rts
.22bd					UnaryVal:
.22bd	38		sec				sec 								; Carry set to return value
.22be	b0 01		bcs $22c1			bcs 	ValueMain
.22c0					UnaryIsVal:
.22c0	18		clc				clc									; Carry clear to return legitimacy
.22c1					ValueMain:
.22c1	08		php				php 								; save results (CS is value, CC is validation)
.22c2	20 5a 25	jsr $255a			jsr 	EvaluateString
.22c5	20 eb 22	jsr $22eb			jsr 	ConvertGetBase 				; get base, if any.
.22c8	98		tya				tya
.22c9	48		pha				pha
.22ca	20 6d 19	jsr $196d			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.22cd	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.22cf	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.22d1	20 35 29	jsr $2935			jsr 	MInt32FromString 			; convert it back from a string.
.22d4	b0 0c		bcs $22e2			bcs 	_VMSuccess 					; successfully converted.
.22d6	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.22d8	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.22da	f0 00		beq $22dc			beq 	_VMFailed 	 				; so we failed.
.22dc					_VMFailed:
.22dc	68		pla				pla
.22dd	a8		tay				tay
.22de	28		plp				plp
.22df	4c c7 2a	jmp $2ac7			jmp 	MInt32False 				; return 0 whatever.
.22e2					_VMSuccess:
.22e2	68		pla				pla
.22e3	a8		tay				tay
.22e4	28		plp				plp 								; if CS the it was val() so we want the value.
.22e5	b0 03		bcs $22ea			bcs 	_VMExit
.22e7	4c c3 2a	jmp $2ac3			jmp 	MInt32True 					; otherwise return true as successful.
.22ea					_VMExit:
.22ea	60		rts				rts
.22eb					ConvertGetBase:
.22eb	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.22ed	95 49		sta $49,x			sta 	esInt0+1,x
.22ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.22f1	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.22f3	d0 0e		bne $2303			bne 	_CGBDone 					; not found, should be )
.22f5	e8		inx				inx 								; next level
.22f6	c8		iny				iny 								; skip comma.
.22f7	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger		; evaluate the base.
.22fa	ca		dex				dex
.22fb	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.22fd	90 08		bcc $2307			bcc 	_CGBValue 					; (it should work as high as 37)
.22ff	c9 11		cmp #$11			cmp 	#17
.2301	b0 04		bcs $2307			bcs 	_CGBValue
.2303					_CGBDone:
.2303	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen
.2306	60		rts				rts
.2307					_CGBValue:
.2307	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2309	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.230c					DereferenceTwo:
.230c	e8		inx				inx
.230d	20 11 23	jsr $2311			jsr 	DereferenceOne
.2310	ca		dex				dex
.2311					DereferenceOne:
.2311	b5 40		lda $40,x			lda 	esType,x
.2313	10 3d		bpl $2352			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2315	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2316	b0 3b		bcs $2353			bcs 	_DRFloatDeReference
.2318	98		tya				tya
.2319	48		pha				pha
.231a	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.231c	85 2a		sta $2a				sta 	temp0
.231e	b5 50		lda $50,x			lda 	esInt1,x
.2320	85 2b		sta $2b				sta 	temp0+1
.2322	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2324	95 50		sta $50,x			sta 	esInt1,x
.2326	95 58		sta $58,x			sta 	esInt2,x
.2328	95 60		sta $60,x			sta 	esInt3,x
.232a	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.232c	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.232e	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.232f	30 0d		bmi $233e			bmi 	_DeRefString 				; string, 2 bytes only
.2331	d0 11		bne $2344			bne 	_DeRefByte 					; byte 1 byte only
.2333					_DeRefLong:
.2333	a0 03		ldy #$03			ldy 	#3
.2335	b1 2a		lda ($2a),y			lda 	(temp0),y
.2337	95 60		sta $60,x			sta 	esInt3,x
.2339	88		dey				dey
.233a	b1 2a		lda ($2a),y			lda 	(temp0),y
.233c	95 58		sta $58,x			sta 	esInt2,x
.233e					_DeRefString:
.233e	a0 01		ldy #$01			ldy 	#1
.2340	b1 2a		lda ($2a),y			lda 	(temp0),y
.2342	95 50		sta $50,x			sta 	esInt1,x
.2344					_DeRefByte:
.2344	a0 00		ldy #$00			ldy 	#0
.2346	b1 2a		lda ($2a),y			lda 	(temp0),y
.2348	95 48		sta $48,x			sta 	esInt0,x
.234a	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.234c	29 40		and #$40			and 	#$40
.234e	95 40		sta $40,x			sta 	esType,x
.2350	68		pla				pla
.2351	a8		tay				tay
.2352					_DRNotReference
.2352	60		rts				rts
.2353					_DRFloatDereference:
.2353	20 6d 19	jsr $196d			jsr 	TOSToTemp0 					; address to deref in temp0
.2356	8a		txa				txa
.2357	a2 1c		ldx #$1c		ldx	#28
.2359	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.235c	aa		tax				tax
.235d	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.235f	95 40		sta $40,x			sta 	esType,x
.2361	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2362					EvaluateLevel:
.2362	48		pha				pha 								; save precedence level.
.2363	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2365	95 48		sta $48,x			sta 	esInt0,x
.2367	95 50		sta $50,x			sta 	esInt1,x
.2369	95 58		sta $58,x			sta 	esInt2,x
.236b	95 60		sta $60,x			sta 	esInt3,x
.236d	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.236f	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2371	30 21		bmi $2394			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2373	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2374	30 0a		bmi $2380			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2376	8a		txa				txa 								; stack level in X
.2377	a2 00		ldx #$00		ldx	#0
.2379	20 82 38	jsr $3882		jsr	variableHandler
.237c	aa		tax				tax
.237d	4c bd 23	jmp $23bd			jmp		_ELHasTerm
.2380					_ELIsConstant:
.2380	4a		lsr a				lsr 	a 							; get the value back
.2381	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2383	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.2385					_ELCheckNext:
.2385	c8		iny				iny 								; look at next
.2386	b1 28		lda ($28),y			lda 	(codePtr),y
.2388	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.238a	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.238c	b0 2f		bcs $23bd			bcs 	_ELHasTerm 					; done getting the constant.
.238e	20 56 24	jsr $2456			jsr 	ELShiftByteIn 				; shift byte into position.
.2391	4c 85 23	jmp $2385			jmp 	_ELCheckNext
.2394					_ELIsToken:
.2394	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2396	f0 0f		beq $23a7			beq 	_ELIsString
.2398	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.239a	d0 5f		bne $23fb			bne 	_ELCheckUnary
.239c	8a		txa				txa 								; put X into A
.239d	c8		iny				iny 								; skip over the float marker
.239e	a2 18		ldx #$18		ldx	#24
.23a0	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.23a3	aa		tax				tax 								; restore X
.23a4	4c bd 23	jmp $23bd			jmp 	_ELHasTerm
.23a7					_ELIsString:
.23a7	98		tya				tya 								; address of string is codePtr+y+1
.23a8	38		sec				sec
.23a9	65 28		adc $28				adc 	codePtr
.23ab	95 48		sta $48,x			sta 	esInt0,x
.23ad	a5 29		lda $29				lda 	codePtr+1
.23af	69 00		adc #$00			adc 	#0
.23b1	95 50		sta $50,x			sta 	esInt1,x
.23b3	a9 40		lda #$40			lda 	#$40 						; set type to string value
.23b5	95 40		sta $40,x			sta 	esType,x
.23b7	c8		iny				iny 								; skip over string.
.23b8	98		tya				tya
.23b9	38		sec				sec									; +1 for the length itself.
.23ba	71 28		adc ($28),y			adc 	(codePtr),y
.23bc	a8		tay				tay 								; and fall through to term loop code.
.23bd					_ELHasTerm:
.23bd	b1 28		lda ($28),y			lda 	(codePtr),y
.23bf	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.23c1	90 04		bcc $23c7			bcc 	_ELPopExit
.23c3	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.23c5	90 02		bcc $23c9			bcc 	_ELHasBinaryTerm
.23c7					_ELPopExit:
.23c7	68		pla				pla
.23c8					_ELExit:
.23c8	60		rts				rts
.23c9					_ELHasBinaryTerm:
.23c9	84 32		sty $32				sty 	tempShort 					; save position
.23cb	a8		tay				tay 								; use token as an index and get the precedence.
.23cc	b9 fe 23	lda $23fe,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.23cf	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.23d1	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.23d3	68		pla				pla 								; restore current level.
.23d4	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.23d6	b0 f0		bcs $23c8			bcs 	_ELExit
.23d8	48		pha				pha 								; save current level back on the stack.
.23d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.23db	48		pha				pha
.23dc	c8		iny				iny
.23dd	e8		inx				inx 								; calculate the RHS at the operator precedence.
.23de	a5 32		lda $32				lda 	tempShort
.23e0	20 62 23	jsr $2362			jsr 	EvaluateLevel
.23e3	ca		dex				dex
.23e4	68		pla				pla 								; get the operator back out.
.23e5					_ELExecuteA:
.23e5	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.23e7	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.23e8	aa		tax				tax
.23e9	bd d3 1d	lda $1dd3,x			lda 	Group0Vectors,x
.23ec	85 2a		sta $2a				sta 	temp0
.23ee	bd d4 1d	lda $1dd4,x			lda 	Group0Vectors+1,x
.23f1	85 2b		sta $2b				sta 	temp0+1
.23f3	a6 32		ldx $32				ldx 	tempShort
.23f5	20 42 24	jsr $2442			jsr 	_ELCallTemp0
.23f8	4c bd 23	jmp $23bd			jmp 	_ELHasTerm 					; and loop back round.
.23fb					_ELCheckUnary:
.23fb	c8		iny				iny 								; skip over token.
.23fc	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.23fe	f0 19		beq $2419			beq 	_ELMinus
.2400	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2402	f0 2c		beq $2430			beq 	_ELIndirect
.2404	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2406	f0 28		beq $2430			beq 	_ELIndirect
.2408	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.240a	f0 39		beq $2445			beq 	_ELExtension
.240c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.240e	90 04		bcc $2414			bcc 	_ELUSyntax
.2410	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.2412	90 d1		bcc $23e5			bcc 	_ELExecuteA 				; if so do that token.
.2414					_ELUSyntax:
.2414	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2416	20 76 11	jsr $1176		jsr	errorHandler
.2419					_ELMinus:
.2419	20 2e 25	jsr $252e			jsr 	EvaluateNumericTerm 		; get a number to negate.
.241c	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.241e	f0 0a		beq $242a			beq 	_ELMinusInteger
.2420	8a		txa				txa
.2421	a2 0c		ldx #$0c		ldx	#12
.2423	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2426	aa		tax				tax
.2427	4c bd 23	jmp $23bd			jmp 	_ELHasTerm
.242a					_ELMinusInteger:
.242a	20 81 2a	jsr $2a81			jsr 	MInt32Negate 				; do int negate
.242d	4c bd 23	jmp $23bd			jmp 	_ELHasTerm
.2430					_ELIndirect:
.2430	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2431	20 37 25	jsr $2537			jsr 	EvaluateIntegerTerm 		; integer address
.2434	68		pla				pla
.2435	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2437	f0 02		beq $243b			beq 	_ELHaveModifier
.2439	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.243b					_ELHaveModifier:
.243b	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.243d	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.243f	4c bd 23	jmp $23bd			jmp 	_ELHasTerm
.2442					_ELCallTemp0:
.2442	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2445					_ELExtension:
.2445	8a		txa				txa 								; stack pos in A
.2446	20 1d 14	jsr $141d		jsr	extensionHandler
.2449	aa		tax				tax 								; restore stack
.244a	4c bd 23	jmp $23bd			jmp 	_ELHasTerm
.244d					UnaryParenthesis:
.244d	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.244f	20 62 23	jsr $2362			jsr 	EvaluateLevel
.2452	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 			; check for )
.2455	60		rts				rts
.2456					ELShiftByteIn:
.2456	48		pha				pha 								; save bits to shift in.
.2457	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.2459	48		pha				pha
.245a	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.245c	95 60		sta $60,x			sta 	esInt3,x
.245e	b5 50		lda $50,x			lda 	esInt1,x
.2460	95 58		sta $58,x			sta 	esInt2,x
.2462	b5 48		lda $48,x			lda 	esInt0,x
.2464	95 50		sta $50,x			sta 	esInt1,x
.2466	a9 00		lda #$00			lda 	#0
.2468	95 48		sta $48,x			sta 	esInt0,x
.246a	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.246b	29 03		and #$03			and 	#3 							; only want lower 2 bits
.246d	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.246f					_ELShiftLoop:
.246f	4a		lsr a				lsr 	a
.2470	76 60		ror $60,x			ror 	esInt3,x
.2472	76 58		ror $58,x			ror 	esInt2,x
.2474	76 50		ror $50,x			ror 	esInt1,x
.2476	76 48		ror $48,x			ror 	esInt0,x
.2478	c9 01		cmp #$01			cmp 	#1
.247a	d0 f3		bne $246f			bne 	_ELShiftLoop
.247c	68		pla				pla 								; get original 6 bit value and OR in.
.247d	29 3f		and #$3f			and 	#$3F
.247f	15 48		ora $48,x			ora 	esInt0,x
.2481	95 48		sta $48,x			sta 	esInt0,x
.2483	60		rts				rts
.2484					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2484	01					.byte	$01			; $86 and
>2485	01					.byte	$01			; $87 or
>2486	01					.byte	$01			; $88 xor
>2487	02					.byte	$02			; $89 >=
>2488	02					.byte	$02			; $8a <=
>2489	02					.byte	$02			; $8b >
>248a	02					.byte	$02			; $8c <
>248b	02					.byte	$02			; $8d =
>248c	02					.byte	$02			; $8e <>
>248d	03					.byte	$03			; $8f +
>248e	03					.byte	$03			; $90 -
>248f	04					.byte	$04			; $91 >>
>2490	04					.byte	$04			; $92 <<
>2491	04					.byte	$04			; $93 *
>2492	04					.byte	$04			; $94 /
>2493	04					.byte	$04			; $95 mod
>2494	05					.byte	$05			; $96 ^
>2495	06					.byte	$06			; $97 !
>2496	06					.byte	$06			; $98 ?
>2497	82					.byte	$82			; $99 repeat
>2498	82					.byte	$82			; $9a while
>2499	82					.byte	$82			; $9b for
>249a	82					.byte	$82			; $9c if
>249b	82					.byte	$82			; $9d defproc
>249c	80					.byte	$80			; $9e until
>249d	80					.byte	$80			; $9f wend
>249e	80					.byte	$80			; $a0 next
>249f	80					.byte	$80			; $a1 then
>24a0	80					.byte	$80			; $a2 endif
>24a1	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.24a2					EventFunction:
.24a2	20 98 25	jsr $2598			jsr 	EvaluateReference			; get the variable reference that tracks the event
.24a5	b5 40		lda $40,x			lda 	esType,x
.24a7	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.24a9	d0 5b		bne $2506			bne 	_EFType
.24ab	20 47 2b	jsr $2b47			jsr 	CheckComma
.24ae	e8		inx				inx
.24af	20 65 25	jsr $2565			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.24b2	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 			; finish off with the right bracket
.24b5	ca		dex				dex
.24b6	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.24b8	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.24ba	15 58		ora $58,x			ora 	esInt2,x
.24bc	15 60		ora $60,x			ora 	esInt3,x
.24be	d0 41		bne $2501			bne 	_EFValue
.24c0	98		tya				tya
.24c1	48		pha				pha
.24c2	8a		txa				txa
.24c3	48		pha				pha
.24c4	a2 18		ldx #$18		ldx	#24
.24c6	20 59 11	jsr $1159		jsr	deviceHandler
.24c9	84 2d		sty $2d				sty 	temp1+1
.24cb	85 2c		sta $2c				sta 	temp1
.24cd	68		pla				pla
.24ce	aa		tax				tax
.24cf	20 6d 19	jsr $196d			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.24d2	a0 03		ldy #$03			ldy 	#3							; if -ve
.24d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.24d6	30 23		bmi $24fb			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.24d8	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.24da	b1 2a		lda ($2a),y			lda 	(temp0),y
.24dc	c8		iny				iny
.24dd	11 2a		ora ($2a),y			ora 	(temp0),y
.24df	f0 17		beq $24f8			beq 	_EFInitialise 				; if so, initialise the value but return false.
.24e1	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.24e3	38		sec				sec
.24e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.24e6	e5 2c		sbc $2c				sbc 	temp1
.24e8	c8		iny				iny
.24e9	b1 2a		lda ($2a),y			lda 	(temp0),y
.24eb	e5 2d		sbc $2d				sbc 	temp1+1
.24ed	10 0c		bpl $24fb			bpl 	_EFFail 					; if trigger >= timer then return False
.24ef	20 0b 25	jsr $250b			jsr 	SetEventTimer 				; reset the timer for next time.
.24f2	20 c3 2a	jsr $2ac3			jsr	 	MInt32True 					; and treutn true as fired.
.24f5	68		pla				pla
.24f6	a8		tay				tay
.24f7	60		rts				rts
.24f8					_EFInitialise:
.24f8	20 0b 25	jsr $250b			jsr		SetEventTimer 				; set trigger time to time + elapsed
.24fb					_EFFail:
.24fb	68		pla				pla
.24fc	a8		tay				tay
.24fd	20 c7 2a	jsr $2ac7			jsr 	MInt32False
.2500	60		rts				rts
.2501					_EFValue:
.2501	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2503	20 76 11	jsr $1176		jsr	errorHandler
.2506					_EFType:
.2506	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2508	20 76 11	jsr $1176		jsr	errorHandler
.250b					SetEventTimer:
.250b	a0 00		ldy #$00			ldy 	#0
.250d	18		clc				clc
.250e	a5 2c		lda $2c				lda 	temp1
.2510	75 49		adc $49,x			adc 	esInt0+1,x
.2512	91 2a		sta ($2a),y			sta		(temp0),y
.2514	c8		iny				iny
.2515	a5 2d		lda $2d				lda 	temp1+1
.2517	75 51		adc $51,x			adc 	esInt1+1,x
.2519	91 2a		sta ($2a),y			sta		(temp0),y
.251b	88		dey				dey
.251c	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.251e	d0 04		bne $2524			bne 	_SETExit 					; zero means initialise.....
.2520	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2522	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2524					_SETExit:
.2524	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2525					EvaluateTerm:
.2525	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2527	20 62 23	jsr $2362			jsr 	EvaluateLevel
.252a	20 11 23	jsr $2311			jsr 	DereferenceOne
.252d	60		rts				rts
.252e					EvaluateNumericTerm:
.252e	20 25 25	jsr $2525			jsr 	EvaluateTerm
.2531	b5 40		lda $40,x			lda 	esType,x
.2533	0a		asl a				asl 	a 							; see if it's a string.
.2534	30 09		bmi $253f			bmi 	ENTType
.2536	60		rts				rts
.2537					EvaluateIntegerTerm:
.2537	20 25 25	jsr $2525			jsr 	EvaluateTerm
.253a	b5 40		lda $40,x			lda 	esType,x
.253c	d0 01		bne $253f			bne 	ENTType
.253e	60		rts				rts
.253f					ENTType:
.253f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2541	20 76 11	jsr $1176		jsr	errorHandler
.2544					EvaluateRoot:
.2544	a2 00		ldx #$00			ldx 	#0
.2546					Evaluate:
.2546	a9 00		lda #$00			lda 	#0
.2548	20 62 23	jsr $2362			jsr 	EvaluateLevel
.254b	20 11 23	jsr $2311			jsr 	DereferenceOne
.254e	60		rts				rts
.254f					EvaluateNumeric:
.254f	20 46 25	jsr $2546			jsr 	Evaluate
.2552	b5 40		lda $40,x			lda 	esType,x
.2554	0a		asl a				asl 	a 							; see if it's a string.
.2555	30 e8		bmi $253f			bmi 	ENTType
.2557	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2558	4a		lsr a				lsr 	a
.2559	60		rts				rts
.255a					EvaluateString:
.255a	20 46 25	jsr $2546			jsr 	Evaluate
.255d	b5 40		lda $40,x			lda 	esType,x
.255f	0a		asl a				asl 	a 							; see if it's a string.
.2560	10 dd		bpl $253f			bpl 	ENTType
.2562	60		rts				rts
.2563					EvaluateRootInteger:
.2563	a2 00		ldx #$00			ldx 	#0
.2565					EvaluateInteger:
.2565	20 46 25	jsr $2546			jsr 	Evaluate
.2568	b5 40		lda $40,x			lda 	esType,x
.256a	d0 d3		bne $253f			bne 	ENTType
.256c	60		rts				rts
.256d					EvaluateSmallInteger:
.256d	20 65 25	jsr $2565			jsr 	EvaluateInteger
.2570	b5 50		lda $50,x			lda 	esInt1,x
.2572	15 58		ora $58,x			ora 	esInt2,x
.2574	15 60		ora $60,x			ora 	esInt3,x
.2576	d0 03		bne $257b			bne 	_ESIValue
.2578	b5 48		lda $48,x			lda 	esInt0,x
.257a	60		rts				rts
.257b					_ESIValue:
.257b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.257d	20 76 11	jsr $1176		jsr	errorHandler
.2580					LinkEvaluate:
.2580	aa		tax				tax
.2581	20 46 25	jsr $2546			jsr 	Evaluate
.2584	8a		txa				txa
.2585	60		rts				rts
.2586					LinkEvaluateTerm:
.2586	aa		tax				tax
.2587	20 25 25	jsr $2525			jsr 	EvaluateTerm
.258a	8a		txa				txa
.258b	60		rts				rts
.258c					LinkEvaluateInteger:
.258c	aa		tax				tax
.258d	20 65 25	jsr $2565			jsr 	EvaluateInteger
.2590	8a		txa				txa
.2591	60		rts				rts
.2592					LinkEvaluateSmallInt:
.2592	aa		tax				tax
.2593	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger
.2596	8a		txa				txa
.2597	60		rts				rts
.2598					EvaluateReference:
.2598	ad 95 24	lda $2495			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.259b	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.259c	e9 01		sbc #$01			sbc 	#1
.259e	20 62 23	jsr $2362			jsr 	EvaluateLevel
.25a1	b5 40		lda $40,x			lda 	esType,x
.25a3	10 01		bpl $25a6			bpl 	_ERFail
.25a5	60		rts				rts
.25a6					_ERFail:
.25a6	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.25a8	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.25ab					UnaryLen:
.25ab	20 b9 25	jsr $25b9			jsr 	ULStart
.25ae					ULFinish:
.25ae	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.25b0	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.25b2	20 d6 2a	jsr $2ad6			jsr 	MInt32Set8Bit 				; write it out.
.25b5	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen
.25b8	60		rts				rts
.25b9	20 5a 25	jsr $255a	ULStart:jsr 	EvaluateString
.25bc	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.25be	85 2a		sta $2a				sta 	temp0
.25c0	b5 50		lda $50,x			lda 	esInt1,x
.25c2	85 2b		sta $2b				sta 	temp0+1
.25c4	84 32		sty $32				sty 	tempShort 					; get length
.25c6	a0 00		ldy #$00			ldy 	#0
.25c8	60		rts				rts
.25c9					UnaryAsc:
.25c9	20 b9 25	jsr $25b9			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.25cc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.25ce	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.25cf	c9 00		cmp #$00			cmp 	#0
.25d1	d0 db		bne $25ae			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.25d3	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.25d5	20 76 11	jsr $1176		jsr	errorHandler
.25d8					UnaryAbs:
.25d8	20 4f 25	jsr $254f			jsr 	EvaluateNumeric 			; some numeric value
.25db	b0 07		bcs $25e4			bcs 	_UAFloat 					; CS then float, so use that function
.25dd	20 7c 2a	jsr $2a7c			jsr 	MInt32Absolute 				; int version
.25e0	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen
.25e3	60		rts				rts
.25e4					_UAFloat:
.25e4	8a		txa				txa 								; float version
.25e5	a2 00		ldx #$00		ldx	#0
.25e7	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.25ea	aa		tax				tax
.25eb	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen
.25ee	60		rts				rts
.25ef					UnarySgn:
.25ef	20 4f 25	jsr $254f			jsr 	EvaluateNumeric 			; same as above but sign of value
.25f2	b0 07		bcs $25fb			bcs 	_USFloat
.25f4	20 b4 2a	jsr $2ab4			jsr 	MInt32Sign
.25f7	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen
.25fa	60		rts				rts
.25fb					_USFloat:
.25fb	8a		txa				txa
.25fc	a2 0e		ldx #$0e		ldx	#14
.25fe	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.2601	aa		tax				tax
.2602	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen
.2605	60		rts				rts
.2606					UnaryPeek:
.2606	20 32 26	jsr $2632			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2609	4c 26 26	jmp $2626			jmp 	PDLByte0
.260c					UnaryDeek:
.260c	20 32 26	jsr $2632			jsr 	PDLCode
.260f	4c 20 26	jmp $2620			jmp 	PDLByte1
.2612					UnaryLeek:
.2612	20 32 26	jsr $2632			jsr 	PDLCode
.2615	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2617	b1 2a		lda ($2a),y			lda 	(temp0),y
.2619	95 60		sta $60,x			sta 	esInt3,x
.261b	88		dey				dey
.261c	b1 2a		lda ($2a),y			lda 	(temp0),y
.261e	95 58		sta $58,x			sta 	esInt2,x
.2620					PDLByte1:
.2620	a0 01		ldy #$01			ldy 	#1
.2622	b1 2a		lda ($2a),y			lda 	(temp0),y
.2624	95 50		sta $50,x			sta 	esInt1,x
.2626					PDLByte0:
.2626	a0 00		ldy #$00			ldy 	#0
.2628	b1 2a		lda ($2a),y			lda 	(temp0),y
.262a	95 48		sta $48,x			sta 	esInt0,x
.262c	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.262e	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 			; check right and return
.2631	60		rts				rts
.2632					PDLCode:
.2632	20 65 25	jsr $2565			jsr 	EvaluateInteger 			; some address
.2635	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2637	85 2a		sta $2a				sta 	temp0
.2639	b5 50		lda $50,x			lda 	esInt1,x
.263b	85 2b		sta $2b				sta 	temp0+1
.263d	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.263f	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2641	95 58		sta $58,x			sta 	esInt2,x
.2643	95 60		sta $60,x			sta 	esInt3,x
.2645	84 32		sty $32				sty 	tempShort 					; save Y
.2647	60		rts				rts
.2648					Unary_Random:
.2648	20 f7 2a	jsr $2af7			jsr 	MInt32Random 				; generate random number.
.264b	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.264d	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.264f	f0 08		beq $2659			beq 	_URExit
.2651	e8		inx				inx 								; load range 0..r-1 into +1
.2652	20 65 25	jsr $2565			jsr 	EvaluateInteger
.2655	ca		dex				dex
.2656	20 1a 29	jsr $291a			jsr 	MInt32Modulus 				; calculate random % modulus
.2659					_URExit:
.2659	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 			; check right and return
.265c	60		rts				rts
.265d					Unary_Min:
.265d	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.265f	d0 02		bne $2663			bne 	UnaryMBody
.2661					Unary_Max:
.2661	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2663					UnaryMBody:
.2663	48		pha				pha 								; save comparator on stack, shows min or max
.2664	20 46 25	jsr $2546			jsr 	Evaluate 					; get the first thing to check
.2667					_UnaryMLoop:
.2667	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2669	c8		iny				iny
.266a	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.266c	f0 09		beq $2677			beq 	_UnaryMExit
.266e	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.2670	f0 07		beq $2679			beq 	_UnaryMCompare
.2672	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2674	20 76 11	jsr $1176		jsr	errorHandler
.2677					_UnaryMExit:
.2677	68		pla				pla 								; done so throw comparator and return.
.2678	60		rts				rts
.2679					_UnaryMCompare:
.2679	e8		inx				inx 								; get the 2nd thing to evaluate
.267a	20 46 25	jsr $2546			jsr 	Evaluate
.267d	ca		dex				dex
.267e	20 14 22	jsr $2214			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2681	85 32		sta $32				sta 	tempShort 					; save result
.2683	68		pla				pla 								; get what we need
.2684	48		pha				pha
.2685	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2687	d0 de		bne $2667			bne 	_UnaryMLoop 				; no, try another value.
.2689	20 c7 2a	jsr $2ac7			jsr 	MInt32False 				; promote 2nd to 1st.
.268c	20 ab 29	jsr $29ab			jsr 	MInt32Add
.268f	4c 67 26	jmp $2667			jmp 	_UnaryMLoop
.2692					Unary_Page:
.2692	20 c7 2a	jsr $2ac7			jsr 	MInt32False 				; zero
.2695	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2698	95 48		sta $48,x			sta 	esInt0,x
.269a	ad c9 0a	lda $0ac9			lda 	basePage+1
.269d	95 50		sta $50,x			sta 	esInt1,x
.269f	60		rts				rts
.26a0					UnaryReference:
.26a0	a9 0f		lda #$0f			lda 	#15
.26a2	20 62 23	jsr $2362			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.26a5	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.26a7	10 05		bpl $26ae			bpl 	UType
.26a9	a9 00		lda #$00			lda 	#0 							; make it an integer
.26ab	95 40		sta $40,x			sta 	esType,x
.26ad	60		rts				rts
.26ae					UType:
.26ae	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.26b0	20 76 11	jsr $1176		jsr	errorHandler
.26b3					UnaryHexMarker:
.26b3	4c 37 25	jmp $2537			jmp 	EvaluateIntegerTerm
.26b6					UnaryComplement:
.26b6	20 37 25	jsr $2537			jsr 	EvaluateIntegerTerm
.26b9	20 9b 2a	jsr $2a9b			jsr 	MInt32Not
.26bc	60		rts				rts
.26bd					UnaryIntToFloat:
.26bd	20 4f 25	jsr $254f			jsr 	EvaluateNumeric				; some number
.26c0	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.26c2	d0 0b		bne $26cf			bne 	_UIFExit
.26c4	8a		txa				txa 								; convert and set type
.26c5	a2 1a		ldx #$1a		ldx	#26
.26c7	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.26ca	aa		tax				tax
.26cb	a9 01		lda #$01			lda 	#1
.26cd	95 40		sta $40,x			sta 	esType,x
.26cf					_UIFExit:
.26cf	60		rts				rts
.26d0					UnaryFloatToInt:
.26d0	20 4f 25	jsr $254f			jsr 	EvaluateNumeric 			; the number
.26d3	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.26d5	f0 0b		beq $26e2			beq 	_UFIExit
.26d7	8a		txa				txa 								; convert to int
.26d8	a2 12		ldx #$12		ldx	#18
.26da	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.26dd	aa		tax				tax
.26de	a9 00		lda #$00			lda 	#0 							; set type
.26e0	95 40		sta $40,x			sta 	esType,x
.26e2					_UFIExit:
.26e2	60		rts				rts
.26e3					UnaryAlloc:
.26e3	e8		inx				inx 								; evaluate memory required
.26e4	20 65 25	jsr $2565			jsr 	EvaluateInteger
.26e7	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen
.26ea	ca		dex				dex
.26eb	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.26ed	15 61		ora $61,x			ora 	esInt3+1,x
.26ef	d0 19		bne $270a			bne 	_UABadValue
.26f1	20 c7 2a	jsr $2ac7			jsr 	MInt32False					; zero return.
.26f4	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.26f6	95 50		sta $50,x			sta 	esInt1,x
.26f8	a5 35		lda $35				lda 	lowMemory
.26fa	95 48		sta $48,x			sta 	esInt0,x
.26fc	18		clc				clc 								; add alloc required.
.26fd	75 49		adc $49,x			adc 	esInt0+1,x
.26ff	85 35		sta $35				sta 	lowMemory
.2701	a5 36		lda $36				lda 	lowMemory+1
.2703	75 51		adc $51,x			adc 	esInt1+1,x
.2705	85 36		sta $36				sta 	lowMemory+1
.2707	b0 01		bcs $270a			bcs		_UABadValue 				; overflow definitely bad.
.2709	60		rts				rts
.270a					_UABadValue:
.270a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.270c	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.270f					UnaryTimer:
.270f	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 			; no parameters
.2712	98		tya				tya
.2713	48		pha				pha
.2714	20 ee 2a	jsr $2aee			jsr 	MInt32Zero 					; zero result
.2717	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2719	a2 18		ldx #$18		ldx	#24
.271b	20 59 11	jsr $1159		jsr	deviceHandler
.271e	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2720	95 48		sta $48,x			sta 	esInt0,x
.2722	98		tya				tya
.2723	95 50		sta $50,x			sta 	esInt1,x
.2725	68		pla				pla
.2726	a8		tay				tay
.2727	60		rts				rts
.2728					UnaryInkey:
.2728	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen
.272b	86 2a		stx $2a				stx 	temp0
.272d	a2 08		ldx #$08		ldx	#8
.272f	20 59 11	jsr $1159		jsr	deviceHandler
.2732	a6 2a		ldx $2a				ldx 	temp0
.2734	20 d6 2a	jsr $2ad6			jsr 	MInt32Set8Bit
.2737	60		rts				rts
.2738					UnaryGet:
.2738	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen
.273b	86 2a		stx $2a				stx 	temp0
.273d					_UGLoop:
.273d	a2 08		ldx #$08		ldx	#8
.273f	20 59 11	jsr $1159		jsr	deviceHandler
.2742	c9 00		cmp #$00			cmp 	#0
.2744	f0 f7		beq $273d			beq 	_UGLoop
.2746	a6 2a		ldx $2a				ldx 	temp0
.2748	20 d6 2a	jsr $2ad6			jsr 	MInt32Set8Bit
.274b	60		rts				rts
.274c					UnarySys:
.274c	20 65 25	jsr $2565			jsr 	EvaluateInteger 				; get the address
.274f	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen
.2752	20 6d 19	jsr $196d			jsr 	TOSToTemp0 						; copy call address to temp0
.2755	8a		txa				txa
.2756	48		pha				pha
.2757	98		tya				tya
.2758	48		pha				pha
.2759	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.275c	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.275f	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2762	20 71 27	jsr $2771			jsr 	_CallTemp0
.2765	85 32		sta $32				sta 	tempShort 						; restore YX
.2767	68		pla				pla
.2768	a8		tay				tay
.2769	68		pla				pla
.276a	aa		tax				tax
.276b	a5 32		lda $32				lda 	tempShort
.276d	20 d6 2a	jsr $2ad6			jsr 	MInt32Set8Bit 					; return result.
.2770	60		rts				rts
.2771					_CallTemp0:
.2771	6c 2a 00	jmp ($002a)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.2774					ExecChr:
.2774	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger		; character number 0-255
.2777	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen				; right bracket
.277a	98		tya				tya
.277b	48		pha				pha
.277c	8a		txa				txa 								; A = stack
.277d	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.277f	a2 00		ldx #$00		ldx	#0
.2781	20 d8 2e	jsr $2ed8		jsr	stringHandler
.2784	aa		tax				tax 								; X = stack
.2785	68		pla				pla
.2786	a8		tay				tay
.2787	60		rts				rts
.2788					ExecLower:
.2788	38		sec				sec 								; set carry is lower
.2789	b0 01		bcs $278c			bcs 	ExecUpperLower
.278b					ExecUpper:
.278b	18		clc				clc 								; clear carry is upper
.278c					ExecUpperLower:
.278c	08		php				php 								; save carry
.278d	20 5a 25	jsr $255a			jsr 	EvaluateString 				; string to stack,X
.2790	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 			; check closing right bracket.
.2793	28		plp				plp 								; restore carry, save Y
.2794	98		tya				tya
.2795	48		pha				pha
.2796	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2798	2a		rol a				rol 	a
.2799	a8		tay				tay 								; now in Y
.279a	8a		txa				txa 								; do the substring and exit.
.279b	a2 08		ldx #$08		ldx	#8
.279d	20 d8 2e	jsr $2ed8		jsr	stringHandler
.27a0	aa		tax				tax
.27a1	68		pla				pla
.27a2	a8		tay				tay
.27a3	60		rts				rts
.27a4					ExecLeft:
.27a4	20 5a 25	jsr $255a			jsr 	EvaluateString 				; string to stack,X
.27a7	20 47 2b	jsr $2b47			jsr 	CheckComma
.27aa	e8		inx				inx
.27ab	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.27ad	20 d6 2a	jsr $2ad6			jsr 	MInt32Set8Bit
.27b0	e8		inx				inx
.27b1	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.27b4					ExecSubstring:
.27b4	ca		dex				dex 								; fix up X
.27b5	ca		dex				dex
.27b6	20 3a 2b	jsr $2b3a			jsr 	CheckRightParen 			; check closing right bracket.
.27b9	8a		txa				txa 								; do the substring and exit.
.27ba	a2 0a		ldx #$0a		ldx	#10
.27bc	20 d8 2e	jsr $2ed8		jsr	stringHandler
.27bf	aa		tax				tax
.27c0	60		rts				rts
.27c1					ExecMid:
.27c1	20 5a 25	jsr $255a			jsr 	EvaluateString 				; string to stack,X
.27c4	20 47 2b	jsr $2b47			jsr 	CheckComma
.27c7	e8		inx				inx
.27c8	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.27cb	c9 00		cmp #$00			cmp 	#0
.27cd	f0 15		beq $27e4			beq 	_EMValue
.27cf	e8		inx				inx
.27d0	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.27d2	20 d6 2a	jsr $2ad6			jsr 	MInt32Set8Bit
.27d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.27d7	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.27d9	f0 d9		beq $27b4			beq 	ExecSubString
.27db	20 47 2b	jsr $2b47			jsr 	CheckComma
.27de	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.27e1	4c b4 27	jmp $27b4			jmp 	ExecSubString
.27e4					_EMValue:
.27e4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.27e6	20 76 11	jsr $1176		jsr	errorHandler
.27e9					ExecRight:
.27e9	20 5a 25	jsr $255a			jsr 	EvaluateString 				; string to stack,X
.27ec	20 47 2b	jsr $2b47			jsr 	CheckComma
.27ef	e8		inx				inx
.27f0	20 6d 25	jsr $256d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.27f3	ca		dex				dex
.27f4	98		tya				tya
.27f5	48		pha				pha
.27f6	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.27f8	85 2a		sta $2a				sta 	temp0
.27fa	b5 50		lda $50,x			lda 	esInt1,x
.27fc	85 2b		sta $2b				sta 	temp0+1
.27fe	a0 00		ldy #$00			ldy 	#0 							; point to length
.2800	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2802	18		clc				clc 								; add 1.
.2803	69 01		adc #$01			adc 	#1
.2805	38		sec				sec
.2806	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2808	f0 02		beq $280c			beq		_ERMake1 					; if zero, make it 1.
.280a	b0 02		bcs $280e			bcs		_EROkay
.280c					_ERMake1:
.280c	a9 01		lda #$01			lda 	#1 							; start position.
.280e					_EROkay:
.280e	e8		inx				inx 								; set start pos.
.280f	95 48		sta $48,x			sta 	esInt0,x
.2811	e8		inx				inx
.2812	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2814	20 d6 2a	jsr $2ad6			jsr 	MInt32Set8Bit
.2817	68		pla				pla
.2818	a8		tay				tay
.2819	4c b4 27	jmp $27b4			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.281c					MInt32And:
.281c	b5 48		lda $48,x			lda 	esInt0,x
.281e	35 49		and $49,x			and 	esInt0+1,x
.2820	95 48		sta $48,x			sta 	esInt0,x
.2822	b5 50		lda $50,x			lda 	esInt1,x
.2824	35 51		and $51,x			and 	esInt1+1,x
.2826	95 50		sta $50,x			sta 	esInt1,x
.2828	b5 58		lda $58,x			lda 	esInt2,x
.282a	35 59		and $59,x			and 	esInt2+1,x
.282c	95 58		sta $58,x			sta 	esInt2,x
.282e	b5 60		lda $60,x			lda 	esInt3,x
.2830	35 61		and $61,x			and 	esInt3+1,x
.2832	95 60		sta $60,x			sta 	esInt3,x
.2834	60		rts				rts
.2835					MInt32Or:
.2835	b5 48		lda $48,x			lda 	esInt0,x
.2837	15 49		ora $49,x			ora 	esInt0+1,x
.2839	95 48		sta $48,x			sta 	esInt0,x
.283b	b5 50		lda $50,x			lda 	esInt1,x
.283d	15 51		ora $51,x			ora 	esInt1+1,x
.283f	95 50		sta $50,x			sta 	esInt1,x
.2841	b5 58		lda $58,x			lda 	esInt2,x
.2843	15 59		ora $59,x			ora 	esInt2+1,x
.2845	95 58		sta $58,x			sta 	esInt2,x
.2847	b5 60		lda $60,x			lda 	esInt3,x
.2849	15 61		ora $61,x			ora 	esInt3+1,x
.284b	95 60		sta $60,x			sta 	esInt3,x
.284d	60		rts				rts
.284e					MInt32Xor:
.284e	b5 48		lda $48,x			lda 	esInt0,x
.2850	55 49		eor $49,x			eor 	esInt0+1,x
.2852	95 48		sta $48,x			sta 	esInt0,x
.2854	b5 50		lda $50,x			lda 	esInt1,x
.2856	55 51		eor $51,x			eor 	esInt1+1,x
.2858	95 50		sta $50,x			sta 	esInt1,x
.285a	b5 58		lda $58,x			lda 	esInt2,x
.285c	55 59		eor $59,x			eor 	esInt2+1,x
.285e	95 58		sta $58,x			sta 	esInt2,x
.2860	b5 60		lda $60,x			lda 	esInt3,x
.2862	55 61		eor $61,x			eor 	esInt3+1,x
.2864	95 60		sta $60,x			sta 	esInt3,x
.2866	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2867					MInt32Compare:
.2867	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2869	d5 49		cmp $49,x			cmp 	esInt0+1,x
.286b	d0 13		bne $2880			bne 	MInt32Compare2
.286d	b5 50		lda $50,x			lda 	esInt1,x
.286f	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2871	d0 0d		bne $2880			bne 	MInt32Compare2
.2873	b5 58		lda $58,x			lda 	esInt2,x
.2875	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2877	d0 07		bne $2880			bne 	MInt32Compare2
.2879	b5 60		lda $60,x			lda 	esInt3,x
.287b	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.287d	d0 01		bne $2880			bne 	MInt32Compare2
.287f	60		rts				rts
.2880					MInt32Compare2:
.2880	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2882	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2884	b5 50		lda $50,x			lda		esInt1,x
.2886	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2888	b5 58		lda $58,x			lda		esInt2,x
.288a	f5 59		sbc $59,x			sbc 	esInt2+1,x
.288c	b5 60		lda $60,x			lda		esInt3,x
.288e	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2890	50 02		bvc $2894			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2892	49 80		eor #$80			eor 	#$80
.2894					_I32LNoOverflow
.2894	30 03		bmi $2899			bmi 	MInt32CLess					; if -ve then return $FF
.2896	a9 01		lda #$01			lda 	#$01						; else return $01
.2898	60		rts				rts
.2899					MInt32CLess:
.2899	a9 ff		lda #$ff			lda 	#$FF
.289b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.289c					MInt32SDivide:
.289c	98		tya				tya  								; save Y, which is the count of negations
.289d	48		pha				pha
.289e	a0 00		ldy #$00			ldy 	#0 							; zero count
.28a0	20 b8 28	jsr $28b8			jsr 	_MInt32SRemSign 			; unsign TOS
.28a3	e8		inx				inx 								; unsign TOS+1
.28a4	20 b8 28	jsr $28b8			jsr 	_MInt32SRemSign
.28a7	ca		dex				dex
.28a8	98		tya				tya 								; save sign count on stack
.28a9	48		pha				pha
.28aa	20 c1 28	jsr $28c1			jsr 	MInt32UDivide 				; unsigned division
.28ad	68		pla				pla 								; get sign count back
.28ae	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.28b0	f0 03		beq $28b5			beq 	_I32SNoNeg
.28b2	20 81 2a	jsr $2a81			jsr 	MInt32Negate
.28b5					_I32SNoNeg:
.28b5	68		pla				pla 								; restoe Y and exit
.28b6	a8		tay				tay
.28b7	60		rts				rts
.28b8					_MInt32SRemSign:
.28b8	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.28ba	10 04		bpl $28c0			bpl 	_MInt32SRSExit
.28bc	c8		iny				iny 								; increment the sign count
.28bd	20 81 2a	jsr $2a81			jsr 	MInt32Negate 				; negate the value.
.28c0					_MInt32SRSExit:
.28c0	60		rts				rts
.28c1					MInt32UDivide:
.28c1	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.28c3	15 51		ora $51,x			ora 	esInt1+1,x
.28c5	15 52		ora $52,x			ora 	esInt1+2,x
.28c7	15 53		ora $53,x			ora 	esInt1+3,x
.28c9	f0 4a		beq $2915			beq 	_MInt32DZero
.28cb	e8		inx				inx 								; clear A
.28cc	e8		inx				inx
.28cd	20 c7 2a	jsr $2ac7			jsr 	MInt32False
.28d0	ca		dex				dex
.28d1	ca		dex				dex
.28d2	98		tya				tya 								; save Y on the stack
.28d3	48		pha				pha
.28d4	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.28d6					_MInt32UDLoop:
.28d6	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.28d8	36 50		rol $50,x			rol 	esInt1,x
.28da	36 58		rol $58,x			rol 	esInt2,x
.28dc	36 60		rol $60,x			rol 	esInt3,x
.28de	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.28e0	36 52		rol $52,x			rol 	esInt1+2,x
.28e2	36 5a		rol $5a,x			rol 	esInt2+2,x
.28e4	36 62		rol $62,x			rol 	esInt3+2,x
.28e6	38		sec				sec 								; calculate A-M saving result on the stack
.28e7	b5 4a		lda $4a,x			lda 	esInt0+2,x
.28e9	f5 49		sbc $49,x			sbc 	esInt0+1,x
.28eb	48		pha				pha
.28ec	b5 52		lda $52,x			lda 	esInt1+2,x
.28ee	f5 51		sbc $51,x			sbc 	esInt1+1,x
.28f0	48		pha				pha
.28f1	b5 5a		lda $5a,x			lda 	esInt2+2,x
.28f3	f5 59		sbc $59,x			sbc 	esInt2+1,x
.28f5	48		pha				pha
.28f6	b5 62		lda $62,x			lda 	esInt3+2,x
.28f8	f5 61		sbc $61,x			sbc 	esInt3+1,x
.28fa	90 10		bcc $290c			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.28fc	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.28fe	68		pla				pla
.28ff	95 5a		sta $5a,x			sta 	esInt2+2,x
.2901	68		pla				pla
.2902	95 52		sta $52,x			sta 	esInt1+2,x
.2904	68		pla				pla
.2905	95 4a		sta $4a,x			sta 	esInt0+2,x
.2907	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2909	4c 0f 29	jmp $290f			jmp 	_MInt32Next 					; do the next iteration
.290c					_MInt32NoSubtract:
.290c	68		pla				pla
.290d	68		pla				pla
.290e	68		pla				pla
.290f					_MInt32Next:
.290f	88		dey				dey 								; do this 32 times.
.2910	d0 c4		bne $28d6			bne 	_MInt32UDLoop
.2912	68		pla				pla 								; restore Y and exit
.2913	a8		tay				tay
.2914	60		rts				rts
.2915					_MInt32DZero:
.2915	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2917	20 76 11	jsr $1176		jsr	errorHandler
.291a					MInt32Modulus:
.291a	20 c1 28	jsr $28c1			jsr 	MInt32UDivide 				; do the division.
.291d	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.291f	95 60		sta $60,x			sta 	esInt3,x
.2921	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2923	95 58		sta $58,x			sta 	esInt2,x
.2925	b5 52		lda $52,x			lda 	esInt1+2,x
.2927	95 50		sta $50,x			sta 	esInt1,x
.2929	b5 4a		lda $4a,x			lda 	esInt0+2,x
.292b	95 48		sta $48,x			sta 	esInt0,x
.292d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c0c					fs32Length:
>0c0c							.fill 	1
.292e					LinkInt32FromString:
.292e	aa		tax				tax
.292f	98		tya				tya
.2930	20 35 29	jsr $2935			jsr 	MInt32FromString
.2933	8a		txa				txa
.2934	60		rts				rts
.2935					MInt32FromString:
.2935	85 32		sta $32				sta 	tempShort 					; save base
.2937	98		tya				tya
.2938	48		pha				pha
.2939	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.293b	b1 2a		lda ($2a),y			lda 	(temp0),y
.293d	8d 0c 0c	sta $0c0c			sta 	fs32Length
.2940	f0 65		beq $29a7			beq 	_I32FSFail2					; fail if length zero.
.2942	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2944	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2946	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2948	d0 09		bne $2953			bne 	_I32FSNotNegative
.294a	ad 0c 0c	lda $0c0c			lda 	fs32Length 					; get length back.
.294d	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.294f	f0 56		beq $29a7			beq 	_I32FSFail2
.2951	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2953					_I32FSNotNegative:
.2953	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2955	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2957	d0 02		bne $295b			bne 	_I32FSNN2
.2959	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.295b					_I32FSNN2:
.295b	48		pha				pha 								; save base + final sign on stack.
.295c	20 c7 2a	jsr $2ac7			jsr 	MInt32False 				; zero the return value.
.295f					_I32FSMainLoop:
.295f	68		pla				pla 								; get the base back into tempShort
.2960	48		pha				pha
.2961	29 7f		and #$7f			and 	#$7F
.2963	85 32		sta $32				sta 	tempShort
.2965	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2967	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2969	90 02		bcc $296d			bcc 	_I32FSNotLC
.296b	e9 20		sbc #$20			sbc 	#32
.296d					_I32FSNotLC:
.296d	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.296e	e9 30		sbc #$30			sbc 	#"0"
.2970	90 34		bcc $29a6			bcc 	_I32FSFail 					; nothing more to do.
.2972	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2974	90 06		bcc $297c			bcc 	_I32FSValidate
.2976	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2978	90 2c		bcc $29a6			bcc 	_I32FSFail
.297a	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.297c					_I32FSValidate:
.297c	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.297e	b0 26		bcs $29a6			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2980	48		pha				pha 								; save the new digit value.
.2981	e8		inx				inx 								; put base into next slot up on stack
.2982	a5 32		lda $32				lda 	tempShort
.2984	20 d6 2a	jsr $2ad6			jsr 	MInt32Set8Bit
.2987	ca		dex				dex
.2988	20 df 29	jsr $29df			jsr 	MInt32Multiply 				; multiply current by the base
.298b	e8		inx				inx
.298c	68		pla				pla  								; put additive into next slot
.298d	20 d6 2a	jsr $2ad6			jsr 	MInt32Set8Bit
.2990	ca		dex				dex
.2991	20 ab 29	jsr $29ab			jsr 	MInt32Add 					; and add it
.2994	c8		iny				iny 								; bump the character pointer
.2995	cc 0c 0c	cpy $0c0c			cpy 	fs32Length 					; until > length.
.2998	f0 c5		beq $295f			beq 	_I32FSMainLoop
.299a	90 c3		bcc $295f			bcc 	_I32FSMainLoop
.299c					_I32FSDone:
.299c	68		pla				pla 								; get base/final sign back
.299d	10 03		bpl $29a2			bpl 	_I32FSNN3
.299f	20 81 2a	jsr $2a81			jsr 	MInt32Negate 				; negate the result.
.29a2					_I32FSNN3:
.29a2	68		pla				pla
.29a3	a8		tay				tay
.29a4	38		sec				sec
.29a5	60		rts				rts
.29a6					_I32FSFail:
.29a6	68		pla				pla
.29a7					_I32FSFail2:
.29a7	68		pla				pla
.29a8	a8		tay				tay
.29a9	18		clc				clc
.29aa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.29ab					MInt32Add:
.29ab	18		clc				clc
.29ac	b5 48		lda $48,x			lda 	esInt0,x
.29ae	75 49		adc $49,x			adc 	esInt0+1,x
.29b0	95 48		sta $48,x			sta 	esInt0,x
.29b2	b5 50		lda $50,x			lda 	esInt1,x
.29b4	75 51		adc $51,x			adc 	esInt1+1,x
.29b6	95 50		sta $50,x			sta 	esInt1,x
.29b8	b5 58		lda $58,x			lda 	esInt2,x
.29ba	75 59		adc $59,x			adc 	esInt2+1,x
.29bc	95 58		sta $58,x			sta 	esInt2,x
.29be	b5 60		lda $60,x			lda 	esInt3,x
.29c0	75 61		adc $61,x			adc 	esInt3+1,x
.29c2	95 60		sta $60,x			sta 	esInt3,x
.29c4	60		rts				rts
.29c5					MInt32Sub:
.29c5	38		sec				sec
.29c6	b5 48		lda $48,x			lda 	esInt0,x
.29c8	f5 49		sbc $49,x			sbc 	esInt0+1,x
.29ca	95 48		sta $48,x			sta 	esInt0,x
.29cc	b5 50		lda $50,x			lda 	esInt1,x
.29ce	f5 51		sbc $51,x			sbc 	esInt1+1,x
.29d0	95 50		sta $50,x			sta 	esInt1,x
.29d2	b5 58		lda $58,x			lda 	esInt2,x
.29d4	f5 59		sbc $59,x			sbc 	esInt2+1,x
.29d6	95 58		sta $58,x			sta 	esInt2,x
.29d8	b5 60		lda $60,x			lda 	esInt3,x
.29da	f5 61		sbc $61,x			sbc 	esInt3+1,x
.29dc	95 60		sta $60,x			sta 	esInt3,x
.29de	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.29df					MInt32Multiply:
.29df	e8		inx				inx 								; copy 2nd -> 3rd
.29e0	20 05 2a	jsr $2a05			jsr 	MInt32CopyUp
.29e3	ca		dex				dex
.29e4	20 05 2a	jsr $2a05			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.29e7	20 c7 2a	jsr $2ac7			jsr 	MInt32False 				; zero 1st.
.29ea					_I32Loop:
.29ea	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.29ec	29 01		and #$01			and 	#1
.29ee	f0 03		beq $29f3			beq 	_I32NoAdd 					; if set
.29f0	20 ab 29	jsr $29ab			jsr 	MInt32Add 					; add 2nd to 1st.
.29f3					_I32NoAdd:
.29f3	e8		inx				inx 								; shift 2nd left
.29f4	20 dc 2a	jsr $2adc			jsr 	MInt32ShiftLeft
.29f7	e8		inx				inx  								; shift 3rd right
.29f8	20 e5 2a	jsr $2ae5			jsr 	MInt32ShiftRight
.29fb	20 ee 2a	jsr $2aee			jsr 	MInt32Zero 					; check if zero.
.29fe	08		php				php 								; save status bits
.29ff	ca		dex				dex 	 							; point back to 1st
.2a00	ca		dex				dex
.2a01	28		plp				plp 								; get status bits
.2a02	d0 e6		bne $29ea			bne 	_I32Loop 					; if non-zero keep going.
.2a04	60		rts				rts
.2a05					MInt32CopyUp:
.2a05	b5 48		lda $48,x			lda 	esInt0,x
.2a07	95 49		sta $49,x			sta 	esInt0+1,x
.2a09	b5 50		lda $50,x			lda 	esInt1,x
.2a0b	95 51		sta $51,x			sta 	esInt1+1,x
.2a0d	b5 58		lda $58,x			lda 	esInt2,x
.2a0f	95 59		sta $59,x			sta 	esInt2+1,x
.2a11	b5 60		lda $60,x			lda 	esInt3,x
.2a13	95 61		sta $61,x			sta 	esInt3+1,x
.2a15	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c0d					MCharCount:	.fill 	1						; count of converted characters
.2a16					MLInt32ToString:
.2a16	aa		tax				tax									; module passes stack in A, base in Y
.2a17	98		tya				tya
.2a18	20 1d 2a	jsr $2a1d			jsr 	MInt32ToString
.2a1b	8a		txa				txa
.2a1c	60		rts				rts
.2a1d					MInt32ToString:
.2a1d	48		pha				pha 								; save base
.2a1e	85 32		sta $32				sta 	tempShort 					; save target base.
.2a20	a9 00		lda #$00			lda 	#0
.2a22	8d 0d 0c	sta $0c0d			sta 	MCharCount 					; clear character count to 0
.2a25	98		tya				tya
.2a26	48		pha				pha
.2a27	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2a29	10 10		bpl $2a3b			bpl 	_I32TSUnsigned
.2a2b	48		pha				pha 								; save base on stack.
.2a2c	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2a2e	10 08		bpl $2a38			bpl 	_I32TSNoFlip
.2a30	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2a32	20 6e 2a	jsr $2a6e			jsr 	MI32WriteCharacter
.2a35	20 81 2a	jsr $2a81			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2a38					_I32TSNoFlip:
.2a38	68		pla				pla 								; get the base back
.2a39	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2a3b					_I32TSUnsigned:
.2a3b	20 49 2a	jsr $2a49			jsr 	MI32DivideWrite 			; recursive code to output string.
.2a3e	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2a40	ad 0d 0c	lda $0c0d			lda 	MCharCount
.2a43	91 2a		sta ($2a),y			sta 	(temp0),y
.2a45	68		pla				pla
.2a46	a8		tay				tay
.2a47	68		pla				pla
.2a48	60		rts				rts
.2a49					MI32DivideWrite:
.2a49	48		pha				pha 								; save the divisor/base
.2a4a	e8		inx				inx 								; write in the dividing position.
.2a4b	20 d6 2a	jsr $2ad6			jsr 	MInt32Set8Bit
.2a4e	ca		dex				dex
.2a4f	20 c1 28	jsr $28c1			jsr 	MInt32UDivide 				; divide number by base.
.2a52	68		pla				pla 								; get the base into Y
.2a53	a8		tay				tay
.2a54	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2a56	48		pha				pha
.2a57	20 ee 2a	jsr $2aee			jsr 	MInt32Zero 					; is the result zero ?
.2a5a	f0 04		beq $2a60			beq 	_I32NoRecurse 				; if so, don't recurse.
.2a5c	98		tya				tya 								; put base into A
.2a5d	20 49 2a	jsr $2a49			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2a60					_I32NoRecurse:
.2a60	68		pla				pla 								; get the remainder back
.2a61	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2a63	90 02		bcc $2a67			bcc 	_I32NotHex
.2a65	69 06		adc #$06			adc 	#7-1
.2a67					_I32NotHex:
.2a67	18		clc				clc 								; make it ASCII
.2a68	69 30		adc #$30			adc 	#48
.2a6a	20 6e 2a	jsr $2a6e			jsr 	MI32WriteCharacter 			; write the character out
.2a6d	60		rts				rts 								; and exit.
.2a6e					MI32WriteCharacter:
.2a6e	ee 0d 0c	inc $0c0d			inc 	MCharCount 					; bump count (space for leading count)
.2a71	ac 0d 0c	ldy $0c0d			ldy 	MCharCount 					; get position
.2a74	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2a76	c8		iny				iny
.2a77	a9 00		lda #$00			lda 	#0
.2a79	91 2a		sta ($2a),y			sta 	(temp0),y
.2a7b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c0e					MSeed32:	.fill 	4							; random number seed.
.2a7c					MInt32Absolute:
.2a7c	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2a7e	30 01		bmi $2a81			bmi 	MInt32Negate
.2a80	60		rts				rts
.2a81					MInt32Negate:
.2a81	38		sec				sec 								; subtract from zero.
.2a82	a9 00		lda #$00			lda 	#0
.2a84	f5 48		sbc $48,x			sbc 	esInt0,x
.2a86	95 48		sta $48,x			sta 	esInt0,x
.2a88	a9 00		lda #$00			lda 	#0
.2a8a	f5 50		sbc $50,x			sbc 	esInt1,x
.2a8c	95 50		sta $50,x			sta 	esInt1,x
.2a8e	a9 00		lda #$00			lda 	#0
.2a90	f5 58		sbc $58,x			sbc 	esInt2,x
.2a92	95 58		sta $58,x			sta 	esInt2,x
.2a94	a9 00		lda #$00			lda 	#0
.2a96	f5 60		sbc $60,x			sbc 	esInt3,x
.2a98	95 60		sta $60,x			sta 	esInt3,x
.2a9a	60		rts				rts
.2a9b					MInt32Not:
.2a9b	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2a9d	49 ff		eor #$ff			eor 	#$FF
.2a9f	95 48		sta $48,x			sta 	esInt0,x
.2aa1	b5 50		lda $50,x			lda 	esInt1,x
.2aa3	49 ff		eor #$ff			eor 	#$FF
.2aa5	95 50		sta $50,x			sta 	esInt1,x
.2aa7	b5 58		lda $58,x			lda 	esInt2,x
.2aa9	49 ff		eor #$ff			eor 	#$FF
.2aab	95 58		sta $58,x			sta 	esInt2,x
.2aad	b5 60		lda $60,x			lda 	esInt3,x
.2aaf	49 ff		eor #$ff			eor 	#$FF
.2ab1	95 60		sta $60,x			sta 	esInt3,x
.2ab3	60		rts				rts
.2ab4					MInt32Sign:
.2ab4	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2ab6	30 0b		bmi $2ac3			bmi 	MInt32True 					; if set return -1 (true)
.2ab8	20 ee 2a	jsr $2aee			jsr 	MInt32Zero 					; is it zero ?
.2abb	f0 0a		beq $2ac7			beq 	MInt32False 				; if zero return 0 (false)
.2abd	20 c7 2a	jsr $2ac7			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2ac0	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2ac2	60		rts				rts
.2ac3					MInt32True:
.2ac3	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2ac5	d0 02		bne $2ac9			bne 	MInt32WriteAll
.2ac7					MInt32False:
.2ac7	a9 00		lda #$00			lda 	#0
.2ac9					MInt32WriteAll:
.2ac9	95 48		sta $48,x			sta 	esInt0,x
.2acb					MInt32Write123:
.2acb	95 50		sta $50,x			sta 	esInt1,x
.2acd	95 58		sta $58,x			sta 	esInt2,x
.2acf	95 60		sta $60,x			sta 	esInt3,x
.2ad1	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2ad3	95 40		sta $40,x			sta 	esType,x
.2ad5	60		rts				rts
.2ad6					MInt32Set8Bit:
.2ad6	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2ad8	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2ada	f0 ef		beq $2acb			beq		MInt32Write123
.2adc					MInt32ShiftLeft:
.2adc	16 48		asl $48,x			asl 	esInt0,x
.2ade	36 50		rol $50,x			rol	 	esInt1,x
.2ae0	36 58		rol $58,x			rol	 	esInt2,x
.2ae2	36 60		rol $60,x			rol	 	esInt3,x
.2ae4	60		rts				rts
.2ae5					MInt32ShiftRight:
.2ae5	56 60		lsr $60,x			lsr 	esInt3,x
.2ae7	76 58		ror $58,x			ror 	esInt2,x
.2ae9	76 50		ror $50,x			ror 	esInt1,x
.2aeb	76 48		ror $48,x			ror 	esInt0,x
.2aed	60		rts				rts
.2aee					MInt32Zero:
.2aee	b5 48		lda $48,x			lda 	esInt0,x
.2af0	15 50		ora $50,x			ora 	esInt1,x
.2af2	15 58		ora $58,x			ora 	esInt2,x
.2af4	15 60		ora $60,x			ora 	esInt3,x
.2af6	60		rts				rts
.2af7					MInt32Random:
.2af7	98		tya				tya
.2af8	48		pha				pha
.2af9	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2afb	ad 0e 0c	lda $0c0e			lda 	MSeed32+0 					; check the seed isn't zero
.2afe	d0 03		bne $2b03			bne 	_Random1
.2b00	a8		tay				tay 								; if so do it 256 times
.2b01	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2b03					_Random1:
.2b03	0a		asl a				asl 	a
.2b04	2e 0f 0c	rol $0c0f			rol 	MSeed32+1
.2b07	2e 10 0c	rol $0c10			rol 	MSeed32+2
.2b0a	2e 11 0c	rol $0c11			rol 	MSeed32+3
.2b0d	90 02		bcc $2b11			bcc 	_Random2
.2b0f	49 c5		eor #$c5			eor 	#$C5
.2b11					_Random2:
.2b11	88		dey				dey
.2b12	d0 ef		bne $2b03			bne 	_Random1
.2b14	8d 0e 0c	sta $0c0e			sta 	MSeed32+0 					; copy the seed in.
.2b17	95 48		sta $48,x			sta 	esInt0,x
.2b19	ad 0f 0c	lda $0c0f			lda 	MSeed32+1
.2b1c	95 50		sta $50,x			sta 	esInt1,x
.2b1e	ad 10 0c	lda $0c10			lda 	MSeed32+2
.2b21	95 58		sta $58,x			sta 	esInt2,x
.2b23	ad 11 0c	lda $0c11			lda 	MSeed32+3
.2b26	95 60		sta $60,x			sta 	esInt3,x
.2b28	68		pla				pla
.2b29	a8		tay				tay
.2b2a	a9 00		lda #$00			lda 	#0
.2b2c	95 40		sta $40,x			sta 	esType,x
.2b2e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2b2f					CheckToken:
.2b2f	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2b31	d0 02		bne $2b35			bne 	_CTError
.2b33	c8		iny				iny
.2b34	60		rts				rts
.2b35					_CTError:
.2b35	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2b37	20 76 11	jsr $1176		jsr	errorHandler
.2b3a					CheckRightParen:
.2b3a	b1 28		lda ($28),y			lda 	(codePtr),y
.2b3c	c8		iny				iny
.2b3d	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2b3f	d0 01		bne $2b42			bne 	_CRPError
.2b41	60		rts				rts
.2b42					_CRPError:
.2b42	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2b44	20 76 11	jsr $1176		jsr	errorHandler
.2b47					CheckComma:
.2b47	b1 28		lda ($28),y			lda 	(codePtr),y
.2b49	c8		iny				iny
.2b4a	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.2b4c	d0 01		bne $2b4f			bne 	_CCError
.2b4e	60		rts				rts
.2b4f					_CCError:
.2b4f	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2b51	20 76 11	jsr $1176		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2b54					ScanForward:
.2b54	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2b56	86 2d		stx $2d				stx 	temp1+1
.2b58	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2b5a	85 2e		sta $2e				sta 	temp2
.2b5c	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2b5e	c8		iny				iny
.2b5f	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2b61	d0 08		bne $2b6b			bne 	_SFNoCheck 					; if so, check token against entered values.
.2b63	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2b65	f0 24		beq $2b8b			beq 	_SFExit 					; at the same strcture depth.
.2b67	c5 2d		cmp $2d				cmp 	temp1+1
.2b69	f0 20		beq $2b8b			beq 	_SFExit
.2b6b					_SFNoCheck:
.2b6b	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2b6d	90 ed		bcc $2b5c			bcc 	_SFLoop
.2b6f	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2b71	90 19		bcc $2b8c			bcc 	_SFSpecials
.2b73	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2b75	90 e5		bcc $2b5c			bcc 	_SFLoop
.2b77	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2b79	b0 e1		bcs $2b5c			bcs 	_SFLoop
.2b7b	aa		tax				tax  								; token in X, and look up the adjuster.
.2b7c	bd fe 23	lda $23fe,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2b7f	38		sec				sec 								; convert to an offset ($FF,$01)
.2b80	e9 81		sbc #$81			sbc 	#$81
.2b82	18		clc				clc 								; add to depth
.2b83	65 2e		adc $2e				adc 	temp2
.2b85	85 2e		sta $2e				sta 	temp2
.2b87	10 d3		bpl $2b5c			bpl 	_SFLoop 					; +ve okay to continue
.2b89	30 35		bmi $2bc0			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2b8b	60		rts		_SFExit:rts
.2b8c					_SFSpecials:
.2b8c	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2b8e	f0 14		beq $2ba4			beq 	_SFNextLine
.2b90	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2b92	f0 31		beq $2bc5			beq 	_SFFloatSkip
.2b94	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2b96	f0 04		beq $2b9c			beq 	_SFSkipString
.2b98	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2b99	4c 5c 2b	jmp $2b5c			jmp 	_SFLoop 					; token.
.2b9c					_SFSkipString:
.2b9c	98		tya				tya
.2b9d	38		sec				sec
.2b9e	71 28		adc ($28),y			adc 	(codePtr),y
.2ba0	a8		tay				tay
.2ba1	4c 5c 2b	jmp $2b5c			jmp 	_SFLoop
.2ba4					_SFNextLine:
.2ba4	a0 00		ldy #$00			ldy 	#0 							; get offset
.2ba6	b1 28		lda ($28),y			lda 	(codePtr),y
.2ba8	18		clc				clc 								; add to code pointer.
.2ba9	65 28		adc $28				adc 	codePtr
.2bab	85 28		sta $28				sta 	codePtr
.2bad	90 02		bcc $2bb1			bcc		_SFNLNoCarry
.2baf	e6 29		inc $29				inc 	codePtr+1
.2bb1					_SFNLNoCarry:
.2bb1	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2bb3	d0 a7		bne $2b5c			bne		_SFLoop 					; no go round again
.2bb5	a5 2c		lda $2c				lda 	temp1
.2bb7	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2bb9	d0 05		bne $2bc0			bne 	_SFError 					; read uses this to search for data statements
.2bbb	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2bbd	20 76 11	jsr $1176		jsr	errorHandler
.2bc0					_SFError:
.2bc0	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2bc2	20 76 11	jsr $1176		jsr	errorHandler
.2bc5					_SFFloatSkip:
.2bc5	4c c9 1d	jmp $1dc9			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2bc8					RSReset:
.2bc8	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2bca	85 78		sta $78				sta 	rsPointer
.2bcc	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2bce	85 79		sta $79				sta 	1+(rsPointer)
.2bd0	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2bd2	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2bd5	60		rts				rts
.2bd6					RSClaim:
.2bd6	84 32		sty $32				sty 	tempShort 					; preserve Y
.2bd8	48		pha				pha 								; save marker on stack.
.2bd9	8a		txa				txa 								; get bytes required.
.2bda	38		sec				sec
.2bdb	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2bdd	65 78		adc $78				adc 	rsPointer
.2bdf	85 78		sta $78				sta 	rsPointer
.2be1	a5 79		lda $79				lda 	rsPointer+1
.2be3	69 ff		adc #$ff			adc 	#$FF
.2be5	85 79		sta $79				sta 	rsPointer+1
.2be7	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2be9	90 08		bcc $2bf3			bcc 	_RSCOverflow
.2beb	68		pla				pla 								; get marker back
.2bec	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2bee	91 78		sta ($78),y			sta 	(rsPointer),y
.2bf0	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2bf2	60		rts				rts
.2bf3					_RSCOverflow:
.2bf3	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2bf5	20 76 11	jsr $1176		jsr	errorHandler
.2bf8					RSFree:
.2bf8	18		clc				clc
.2bf9	65 78		adc $78				adc 	rsPointer
.2bfb	85 78		sta $78				sta 	rsPointer
.2bfd	90 02		bcc $2c01			bcc 	_RSFExit
.2bff	e6 79		inc $79				inc 	rsPointer+1
.2c01					_RSFExit:
.2c01	60		rts				rts
.2c02					RSSavePosition:
.2c02	84 32		sty $32				sty 	tempShort 					; save Y position
.2c04	a8		tay				tay 								; this is where we write it.
.2c05	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2c07	91 78		sta ($78),y			sta 	(rsPointer),y
.2c09	c8		iny				iny
.2c0a	a5 29		lda $29				lda 	codePtr+1
.2c0c	91 78		sta ($78),y			sta 	(rsPointer),y
.2c0e	c8		iny				iny
.2c0f	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.2c11	91 78		sta ($78),y			sta 	(rsPointer),y
.2c13	a8		tay				tay 								; fix Y back again to original value
.2c14	60		rts				rts
.2c15					RSLoadPosition:
.2c15	a8		tay				tay
.2c16	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2c18	85 28		sta $28				sta 	codePtr
.2c1a	c8		iny				iny
.2c1b	b1 78		lda ($78),y			lda 	(rsPointer),y
.2c1d	85 29		sta $29				sta 	codePtr+1
.2c1f	c8		iny				iny
.2c20	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2c22	a8		tay				tay 								; to Y
.2c23	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.2c24					WarmStart:
.2c24	a2 02		ldx #$02		ldx	#2
.2c26	20 7a 16	jsr $167a		jsr	interactionHandler

;******  Return to file: main/main.asm

.2c29					mainHandler:
.2c29	7c 2c 2c	jmp ($2c2c,x)			jmp 	(mainVectors,x)
.2c2c					mainVectors:
>2c2c	3a 2b					.word CheckRightParen      ; index 0
>2c2e	8f 16					.word XCommandClear        ; index 2
>2c30	80 25					.word LinkEvaluate         ; index 4
>2c32	8c 25					.word LinkEvaluateInteger  ; index 6
>2c34	92 25					.word LinkEvaluateSmallInt ; index 8
>2c36	86 25					.word LinkEvaluateTerm     ; index 10
>2c38	16 2a					.word MLInt32ToString      ; index 12
>2c3a	53 1b					.word Command_XNew         ; index 14
>2c3c	17 1c					.word PrintString          ; index 16
>2c3e	62 1d					.word XCommand_Run         ; index 18
>2c40	6b 1d					.word Command_RunFrom      ; index 20
>2c42	2e 29					.word LinkInt32FromString  ; index 22

;******  Return to file: basic.asm

.2c44					section_end_main:
.2c44					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2c44					StringChrs:
.2c44	aa		tax				tax 								; set up stack
.2c45	a9 02		lda #$02			lda 	#2
.2c47	20 fe 2c	jsr $2cfe			jsr 	AllocateSoftString
.2c4a	98		tya				tya
.2c4b	20 24 2d	jsr $2d24			jsr 	WriteSoftString
.2c4e	20 53 2c	jsr $2c53			jsr 	ReturnSoftString
.2c51	8a		txa				txa
.2c52	60		rts				rts
.2c53					ReturnSoftString:
.2c53	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.2c55	95 48		sta $48,x			sta 	esInt0,x
.2c57	a5 7b		lda $7b				lda 	softMemAlloc+1
.2c59	95 50		sta $50,x			sta 	esInt1,x
.2c5b	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.2c5d	95 58		sta $58,x			sta 	esInt2,x
.2c5f	95 60		sta $60,x			sta 	esInt3,x
.2c61	a9 40		lda #$40			lda 	#$40 						; type string.
.2c63	95 40		sta $40,x			sta 	esType,x
.2c65	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2c66					STRCompare:
.2c66	48		pha				pha 								; save A
.2c67	aa		tax				tax 								; put stack pos in X
.2c68	98		tya				tya
.2c69	48		pha				pha
.2c6a	20 9e 2c	jsr $2c9e			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.2c6d	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2c6f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c71	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.2c73	90 02		bcc $2c77			bcc 	_SCNotSmaller
.2c75	b1 2c		lda ($2c),y			lda 	(temp1),y
.2c77					_SCNotSmaller:
.2c77	aa		tax				tax 								; put that in X. We compare this many chars first.
.2c78					_SCCompareLoop:
.2c78	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2c7a	f0 0c		beq $2c88			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2c7c	ca		dex				dex 								; decrement chars to compare.
.2c7d	c8		iny				iny 								; move to next character
.2c7e	38		sec				sec 								; calculate s1[y]-s2[y]
.2c7f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c81	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2c83	d0 0a		bne $2c8f			bne 	_SCReturnResult 			; if different return sign of A
.2c85	4c 78 2c	jmp $2c78			jmp 	_SCCompareLoop
.2c88					_SCSameToEndShortest
.2c88	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2c8a	38		sec				sec
.2c8b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c8d	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2c8f					_SCReturnResult:
.2c8f	08		php				php 								; set return to zero preserving PSW.
.2c90	a2 00		ldx #$00			ldx 	#0
.2c92	28		plp				plp
.2c93	f0 05		beq $2c9a			beq 	_SCExit 					; two values equal, then exit
.2c95	ca		dex				dex 								; X = $FF
.2c96	90 02		bcc $2c9a			bcc 	_SCExit 					; if 1st < 2nd then -1
.2c98	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2c9a					_SCExit:
.2c9a	68		pla				pla
.2c9b	a8		tay				tay
.2c9c	68		pla				pla
.2c9d	60		rts				rts
.2c9e					CopyStringPair:
.2c9e	b5 49		lda $49,x			lda 	esInt0+1,x
.2ca0	85 2c		sta $2c				sta 	temp1
.2ca2	b5 51		lda $51,x			lda 	esInt1+1,x
.2ca4	85 2d		sta $2d				sta 	temp1+1
.2ca6					CopyStringTop:
.2ca6	b5 48		lda $48,x			lda 	esInt0,x
.2ca8	85 2a		sta $2a				sta 	temp0
.2caa	b5 50		lda $50,x			lda 	esInt1,x
.2cac	85 2b		sta $2b				sta 	temp0+1
.2cae	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2caf					StringConcat:
.2caf	aa		tax				tax									; stack pos in X
.2cb0	98		tya				tya
.2cb1	48		pha				pha
.2cb2	20 9e 2c	jsr $2c9e			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2cb5	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2cb6	a0 00		ldy #$00			ldy 	#0
.2cb8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cba	71 2c		adc ($2c),y			adc 	(temp1),y
.2cbc	b0 1c		bcs $2cda			bcs 	_SCError 					; just too many characters here.
.2cbe	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2cc0	b0 18		bcs $2cda			bcs 	_SCError
.2cc2	20 fe 2c	jsr $2cfe			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2cc5	20 f5 2c	jsr $2cf5			jsr 	CopySoftToStack 			; copy that to the stack.
.2cc8	20 df 2c	jsr $2cdf			jsr 	SCCopyTemp0 				; copy temp0
.2ccb	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.2ccd	85 2a		sta $2a				sta 	temp0
.2ccf	a5 2d		lda $2d				lda 	temp1+1
.2cd1	85 2b		sta $2b				sta 	temp0+1
.2cd3	20 df 2c	jsr $2cdf			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2cd6	68		pla				pla
.2cd7	a8		tay				tay
.2cd8	8a		txa				txa 								; and A
.2cd9	60		rts				rts
.2cda					_SCError:
.2cda	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2cdc	20 76 11	jsr $1176		jsr	errorHandler
.2cdf					SCCopyTemp0:
.2cdf	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2ce1	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ce3	85 2e		sta $2e				sta 	temp2
.2ce5					_SCCopyLoop:
.2ce5	a5 2e		lda $2e				lda 	temp2 						; done the lot
.2ce7	f0 0b		beq $2cf4			beq 	_SCCopyExit
.2ce9	c6 2e		dec $2e				dec 	temp2
.2ceb	c8		iny				iny 								; get next char
.2cec	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cee	20 24 2d	jsr $2d24			jsr 	WriteSoftString 			; write to soft string.
.2cf1	4c e5 2c	jmp $2ce5			jmp 	_SCCopyLoop
.2cf4					_SCCopyExit:
.2cf4	60		rts				rts
.2cf5					CopySoftToStack:
.2cf5	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2cf7	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2cf9	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2cfb	95 50		sta $50,x			sta 	esInt1,x
.2cfd	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2cfe					AllocateSoftString:
.2cfe	85 32		sta $32				sta 	tempShort 					; save count
.2d00	98		tya				tya
.2d01	48		pha				pha
.2d02	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2d04	d0 09		bne $2d0f			bne 	_ASSDone
.2d06	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.2d08	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2d0a	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2d0c	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2d0d	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.2d0f					_ASSDone:
.2d0f	38		sec				sec 								; allocate downwards enough memory
.2d10	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2d12	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.2d14	85 7a		sta $7a				sta 	softMemAlloc
.2d16	a5 7b		lda $7b				lda 	softMemAlloc+1
.2d18	e9 00		sbc #$00			sbc 	#0
.2d1a	85 7b		sta $7b				sta 	softMemAlloc+1
.2d1c	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2d1e	a8		tay				tay
.2d1f	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2d21	68		pla				pla
.2d22	a8		tay				tay
.2d23	60		rts				rts
.2d24					WriteSoftString:
.2d24	84 32		sty $32				sty 	tempShort 					; save Y
.2d26	48		pha				pha 								; save character on stack
.2d27	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2d29	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2d2b	18		clc				clc
.2d2c	69 01		adc #$01			adc 	#1
.2d2e	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2d30	a8		tay				tay 								; offset in Y
.2d31	68		pla				pla 								; get char and write.
.2d32	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2d34	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.2d36	60		rts				rts
.2d37					StrClone:
.2d37	aa		tax				tax 								; set up stack.
.2d38	98		tya				tya
.2d39	48		pha				pha
.2d3a	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2d3c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.2d3e	18		clc				clc
.2d3f	69 01		adc #$01			adc 	#1
.2d41	20 fe 2c	jsr $2cfe			jsr 	AllocateSoftString 			; allocate soft memory
.2d44	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2d46	95 48		sta $48,x			sta 	esInt0,x
.2d48	a5 7b		lda $7b				lda 	softMemAlloc+1
.2d4a	95 50		sta $50,x			sta 	esInt1,x
.2d4c	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2d4e	95 58		sta $58,x			sta 	esInt2,x
.2d50	95 60		sta $60,x			sta 	esInt3,x
.2d52	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2d54	95 40		sta $40,x			sta 	esType,x
.2d56	20 df 2c	jsr $2cdf			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2d59	68		pla				pla
.2d5a	a8		tay				tay
.2d5b	8a		txa				txa
.2d5c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2d5d					CaseString:
.2d5d	48		pha				pha 								; save A and copy to X
.2d5e	aa		tax				tax
.2d5f	98		tya				tya
.2d60	48		pha				pha
.2d61	20 a6 2c	jsr $2ca6			jsr 	CopyStringTop 				; target string -> temp0
.2d64	a0 00		ldy #$00			ldy 	#0
.2d66	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.2d68	18		clc				clc
.2d69	69 01		adc #$01			adc 	#1 							; one more for length byte
.2d6b	20 fe 2c	jsr $2cfe			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2d6e	20 f5 2c	jsr $2cf5			jsr 	CopySoftToStack 			; copy that to the stack.
.2d71	a0 00		ldy #$00			ldy 	#0
.2d73	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.2d75	aa		tax				tax
.2d76					_CSCopy:
.2d76	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2d78	f0 24		beq $2d9e			beq 	_CSExit
.2d7a	ca		dex				dex
.2d7b	c8		iny				iny
.2d7c	68		pla				pla 								; check direction
.2d7d	48		pha				pha
.2d7e	f0 0c		beq $2d8c			beq 	_CSUpper
.2d80	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.2d82	c9 41		cmp #$41			cmp 	#"A"
.2d84	90 12		bcc $2d98			bcc 	_CSWrite
.2d86	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2d88	b0 0e		bcs $2d98			bcs 	_CSWrite
.2d8a	90 0a		bcc $2d96			bcc 	_CSFlipWrite
.2d8c					_CSUpper:
.2d8c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.2d8e	c9 61		cmp #$61			cmp 	#"a"
.2d90	90 06		bcc $2d98			bcc 	_CSWrite
.2d92	c9 7b		cmp #$7b			cmp 	#"z"+1
.2d94	b0 02		bcs $2d98			bcs 	_CSWrite
.2d96					_CSFlipWrite:
.2d96	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2d98					_CSWrite:
.2d98	20 24 2d	jsr $2d24			jsr 	WriteSoftString 			; add to soft string.
.2d9b	4c 76 2d	jmp $2d76			jmp 	_CSCopy
.2d9e					_CSExit:
.2d9e	68		pla				pla
.2d9f	a8		tay				tay
.2da0	68		pla				pla
.2da1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2da2					StringSubstring:
.2da2	48		pha				pha
.2da3	aa		tax				tax 								; access stack.
.2da4	98		tya				tya
.2da5	48		pha				pha
.2da6	20 a6 2c	jsr $2ca6			jsr 	CopyStringTop 				; point temp0 to the string.
.2da9	a0 00		ldy #$00			ldy 	#0 							; get length.
.2dab	b1 2a		lda ($2a),y			lda 	(temp0),Y
.2dad	85 2c		sta $2c				sta 	temp1
.2daf	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2db1	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.2db3	f0 02		beq $2db7			beq 	_SSBOkay
.2db5	b0 2a		bcs $2de1			bcs 	_SSBReturnNull
.2db7					_SSBOkay:
.2db7	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.2db9	18		clc				clc
.2dba	69 01		adc #$01			adc 	#1
.2dbc	38		sec				sec
.2dbd	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2dbf	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2dc1	90 02		bcc $2dc5			bcc		_SSBTrunc
.2dc3	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2dc5					_SSBTrunc:
.2dc5	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.2dc7	18		clc				clc
.2dc8	69 01		adc #$01			adc 	#1 							; add 1
.2dca	20 fe 2c	jsr $2cfe			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2dcd	20 f5 2c	jsr $2cf5			jsr 	CopySoftToStack 			; copy that to the stack.
.2dd0	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2dd2					_SSBCopyLoop:
.2dd2	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.2dd4	f0 0e		beq $2de4			beq 	_SSBExit
.2dd6	c6 2d		dec $2d				dec 	temp1+1
.2dd8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.2dda	20 24 2d	jsr $2d24			jsr 	WriteSoftString
.2ddd	c8		iny				iny
.2dde	4c d2 2d	jmp $2dd2			jmp 	_SSBCopyLoop
.2de1					_SSBReturnNull:
.2de1	20 e8 2d	jsr $2de8			jsr 	ReturnNull
.2de4					_SSBExit:
.2de4	68		pla				pla
.2de5	a8		tay				tay
.2de6	68		pla				pla
.2de7	60		rts				rts
.2de8					ReturnNull:
.2de8	a9 00		lda #$00			lda 	#0 							; clear null string
.2dea	8d ce 0a	sta $0ace			sta 	NullString
.2ded	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.2def	95 48		sta $48,x			sta 	esInt0,x
.2df1	a9 0a		lda #$0a			lda 	#NullString >> 8
.2df3	95 50		sta $50,x			sta 	esInt1,x
.2df5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c12					srcStrLen:
>0c12							.fill 	1
.2df6					StringWrite:
.2df6	aa		tax				tax
.2df7	48		pha				pha
.2df8	98		tya				tya
.2df9	48		pha				pha
.2dfa	20 21 2e	jsr $2e21			jsr 	CheckOverwriteCurrent
.2dfd	b0 0d		bcs $2e0c			bcs		_SWCopyCurrent
.2dff	20 5f 2e	jsr $2e5f			jsr 	RequiresConcretion
.2e02	90 0e		bcc $2e12			bcc 	_SWWriteReference
.2e04	20 c2 2e	jsr $2ec2			jsr 	CheckSpecialConcretion
.2e07	b0 09		bcs $2e12			bcs 	_SWWriteReference
.2e09	20 73 2e	jsr $2e73			jsr 	AllocateHardMemory
.2e0c					_SWCopyCurrent:
.2e0c	20 a6 2e	jsr $2ea6			jsr 	CopyStringToHardMemory
.2e0f	4c 1d 2e	jmp $2e1d			jmp 	_SWExit
.2e12					_SWWriteReference
.2e12	a0 00		ldy #$00			ldy 	#0
.2e14	a5 2a		lda $2a				lda 	temp0
.2e16	91 2c		sta ($2c),y			sta 	(temp1),y
.2e18	c8		iny				iny
.2e19	a5 2b		lda $2b				lda 	temp0+1
.2e1b	91 2c		sta ($2c),y			sta 	(temp1),y
.2e1d					_SWExit:
.2e1d	68		pla				pla
.2e1e	a8		tay				tay
.2e1f	68		pla				pla
.2e20	60		rts				rts
.2e21					CheckOverwriteCurrent:
.2e21	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2e23	b5 51		lda $51,x			lda 	esInt1+1,x
.2e25	85 2b		sta $2b				sta 	temp0+1
.2e27	b5 49		lda $49,x			lda 	esInt0+1,x
.2e29	85 2a		sta $2a				sta 	temp0
.2e2b	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.2e2d	8d 12 0c	sta $0c12			sta 	srcStrLen
.2e30	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2e32	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2e34	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2e36	85 2d		sta $2d				sta 	temp1+1
.2e38	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2e3a	b1 2c		lda ($2c),y			lda 	(temp1),y
.2e3c	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2e3e	90 1b		bcc $2e5b			bcc 	_COCFail 				; in hard memory.
.2e40	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2e42	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.2e44	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.2e46	85 2e		sta $2e				sta 	temp2
.2e48	c8		iny				iny
.2e49	b1 2c		lda ($2c),y			lda 	(temp1),y
.2e4b	e9 00		sbc #$00			sbc 	#0
.2e4d	85 2f		sta $2f				sta 	temp2+1
.2e4f	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2e51	b1 2e		lda ($2e),y			lda 	(temp2),y
.2e53	38		sec				sec  							; maximum character capacity.
.2e54	e9 02		sbc #$02			sbc 	#2
.2e56	cd 12 0c	cmp $0c12			cmp 	srcStrLen 				; if >= the required length
.2e59	b0 02		bcs $2e5d			bcs 	_COCCanReuse
.2e5b					_COCFail:
.2e5b	18		clc				clc
.2e5c	60		rts				rts
.2e5d					_COCCanReuse:
.2e5d	38		sec				sec
.2e5e	60		rts				rts
.2e5f					RequiresConcretion:
.2e5f	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2e61	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.2e63	b0 0a		bcs $2e6f			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2e65	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2e67	f0 08		beq $2e71			beq 	_RCFail 				; if not, this cannot be soft memory.
.2e69	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2e6b	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2e6d	90 02		bcc $2e71			bcc 	_RCFail 				; so concreting
.2e6f					_RCSucceed:
.2e6f	38		sec				sec
.2e70	60		rts				rts
.2e71					_RCFail:
.2e71	18		clc				clc
.2e72	60		rts				rts
.2e73					AllocateHardMemory:
.2e73	98		tya				tya
.2e74	48		pha				pha
.2e75	ad 12 0c	lda $0c12			lda 	srcStrLen 				; characters in string
.2e78	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2e7a	b0 04		bcs $2e80			bcs 	_AHMSetMax 				; max out that amount.
.2e7c	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2e7e	90 02		bcc $2e82			bcc 	_AHMIsOkay
.2e80					_AHMSetMax:
.2e80	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2e82					_AHMIsOkay:
.2e82	48		pha				pha	 							; save size to be allocated
.2e83	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2e85	38		sec				sec  							; and copy result to TOS as target address.
.2e86	65 33		adc $33				adc 	highMemory
.2e88	85 33		sta $33				sta 	highMemory
.2e8a	a5 34		lda $34				lda 	highMemory+1
.2e8c	69 ff		adc #$ff			adc 	#$FF
.2e8e	85 34		sta $34				sta 	highMemory+1
.2e90	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2e92	68		pla				pla 							; get the total size of the storage block
.2e93	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.2e95	18		clc				clc
.2e96	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.2e98	69 01		adc #$01			adc 	#1
.2e9a	91 2c		sta ($2c),y			sta 	(temp1),y
.2e9c	a5 34		lda $34				lda 	highMemory+1
.2e9e	69 00		adc #$00			adc 	#0
.2ea0	c8		iny				iny
.2ea1	91 2c		sta ($2c),y			sta 	(temp1),y
.2ea3	68		pla				pla
.2ea4	a8		tay				tay
.2ea5	60		rts				rts
.2ea6					CopyStringToHardMemory:
.2ea6	98		tya				tya
.2ea7	48		pha				pha
.2ea8	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2eaa	b1 2c		lda ($2c),y			lda 	(temp1),y
.2eac	85 2e		sta $2e				sta 	temp2
.2eae	c8		iny				iny
.2eaf	b1 2c		lda ($2c),y			lda 	(temp1),y
.2eb1	85 2f		sta $2f				sta 	temp2+1
.2eb3	ac 12 0c	ldy $0c12			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2eb6					_CSTHMLoop:
.2eb6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2eb8	91 2e		sta ($2e),y			sta 	(temp2),y
.2eba	88		dey				dey
.2ebb	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.2ebd	d0 f7		bne $2eb6			bne 	_CSTHMLoop
.2ebf	68		pla				pla
.2ec0	a8		tay				tay
.2ec1	60		rts				rts
.2ec2					CheckSpecialConcretion:
.2ec2	ad 12 0c	lda $0c12			lda 	srcStrLen 				; check string is null e.g. length = 0
.2ec5	f0 02		beq $2ec9			beq 	_CSCNullString
.2ec7	18		clc				clc
.2ec8	60		rts				rts
.2ec9					_CSCNullString:
.2ec9	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.2ecb	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.2ece	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.2ed0	85 2a		sta $2a				sta 	temp0
.2ed2	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2ed4	85 2b		sta $2b				sta 	1+(temp0)
.2ed6	38		sec				sec
.2ed7	60		rts				rts

;******  Return to file: string/string.asm

.2ed8					stringHandler:
.2ed8	7c db 2e	jmp ($2edb,x)			jmp 	(stringVectors,x)
.2edb					stringVectors:
>2edb	44 2c					.word StringChrs           ; index 0
>2edd	37 2d					.word StrClone             ; index 2
>2edf	af 2c					.word StringConcat         ; index 4
>2ee1	66 2c					.word STRCompare           ; index 6
>2ee3	5d 2d					.word CaseString           ; index 8
>2ee5	a2 2d					.word StringSubstring      ; index 10
>2ee7	f6 2d					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2ee9					section_end_string:
.2ee9					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c13					deTokeniseVector:
>0c13							.fill 	2
.0c15					lastCharacterClass:
>0c15							.fill 	1
.2ee9					ListLine:
.2ee9	a9 f9		lda #$f9			lda 	#(deTokenPrint) & $FF
.2eeb	8d 13 0c	sta $0c13			sta 	deTokeniseVector
.2eee	a9 2f		lda #$2f			lda 	#(deTokenPrint) >> 8
.2ef0	8d 14 0c	sta $0c14			sta 	1+(deTokeniseVector)
.2ef3					Detokenise:
.2ef3	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.2ef5	8d 15 0c	sta $0c15			sta 	lastCharacterClass
.2ef8	a2 02		ldx #$02			ldx 	#2
.2efa	20 c7 2a	jsr $2ac7			jsr 	MInt32False
.2efd	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.2eff	b1 28		lda ($28),y			lda 	(codePtr),y
.2f01	95 48		sta $48,x			sta 	esInt0,x
.2f03	c8		iny				iny
.2f04	b1 28		lda ($28),y			lda 	(codePtr),y
.2f06	95 50		sta $50,x			sta 	esInt1,x
.2f08	a9 84		lda #$84			lda 	#LTYLineNumber
.2f0a	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.2f0d	a9 0a		lda #$0a			lda 	#10 					; base 10
.2f0f	20 ab 2f	jsr $2fab			jsr 	DTPrintInteger 			; print as integer.
.2f12	a0 00		ldy #$00			ldy 	#0 						; get length
.2f14	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.2f16	aa		tax				tax
.2f17					_DTPadOut:
.2f17	a9 20		lda #$20			lda 	#" "
.2f19	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.2f1c	e8		inx				inx
.2f1d	e0 06		cpx #$06			cpx 	#6
.2f1f	d0 f6		bne $2f17			bne 	_DTPadOut
.2f21	a0 03		ldy #$03			ldy 	#3 						; start position.
.2f23					_DTListLoop
.2f23	b1 28		lda ($28),y			lda 	(codePtr),y
.2f25	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.2f27	f0 58		beq $2f81			beq 	_DTIsString
.2f29	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.2f2b	f0 7a		beq $2fa7			beq 	_DTIsFloat
.2f2d	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.2f2f	f0 16		beq $2f47			beq 	_DTHexConstant
.2f31	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.2f33	d0 06		bne $2f3b			bne 	_DTNotEnd
.2f35	a9 ff		lda #$ff			lda 	#255 					; print CR
.2f37	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.2f3a	60		rts				rts
.2f3b					_DTNotEnd:
.2f3b	c9 00		cmp #$00			cmp 	#0
.2f3d	30 36		bmi $2f75			bmi 	_DTIsToken
.2f3f	c9 40		cmp #$40			cmp 	#$40
.2f41	90 38		bcc $2f7b			bcc 	_DTIsIdentifier
.2f43	a9 0a		lda #$0a			lda 	#10 					; this is the base
.2f45	d0 08		bne $2f4f			bne 	_DTConstant
.2f47					_DTHexConstant:
.2f47	a9 26		lda #$26			lda 	#"&"
.2f49	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.2f4c	c8		iny				iny
.2f4d	a9 10		lda #$10			lda 	#16
.2f4f					_DTConstant:
.2f4f	48		pha				pha
.2f50	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.2f52	20 15 30	jsr $3015			jsr 	DTSwitchMode
.2f55	a9 86		lda #$86			lda 	#LTYConstant
.2f57	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.2f5a	a2 02		ldx #$02			ldx 	#2
.2f5c	8a		txa				txa
.2f5d	a2 0a		ldx #$0a		ldx	#10
.2f5f	20 29 2c	jsr $2c29		jsr	mainHandler
.2f62	aa		tax				tax
.2f63	20 6d 19	jsr $196d			jsr 	TOSToTemp0
.2f66	68		pla				pla
.2f67	85 32		sta $32				sta 	tempShort
.2f69	98		tya				tya
.2f6a	48		pha				pha
.2f6b	a5 32		lda $32				lda 	tempShort
.2f6d	20 ab 2f	jsr $2fab			jsr 	DTPrintInteger
.2f70	68		pla				pla
.2f71	a8		tay				tay
.2f72	4c 23 2f	jmp $2f23			jmp 	_DTListLoop
.2f75					_DTIsToken:
.2f75	20 6e 30	jsr $306e			jsr 	DTDecodeToken
.2f78	4c 23 2f	jmp $2f23			jmp 	_DTListLoop
.2f7b					_DTIsIdentifier:
.2f7b	20 27 30	jsr $3027			jsr 	DTIdentifier
.2f7e	4c 23 2f	jmp $2f23			jmp 	_DTListLoop
.2f81					_DTIsString:
.2f81	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2f83	20 15 30	jsr $3015			jsr 	DTSwitchMode
.2f86	a9 81		lda #$81			lda 	#LTYString
.2f88	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.2f8b	a9 22		lda #$22			lda 	#'"'						; open quote
.2f8d	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.2f90	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.2f92	8a		txa				txa
.2f93	a2 0a		ldx #$0a		ldx	#10
.2f95	20 29 2c	jsr $2c29		jsr	mainHandler
.2f98	aa		tax				tax
.2f99	20 6d 19	jsr $196d			jsr 	TOSToTemp0
.2f9c	20 bd 2f	jsr $2fbd			jsr 	DTPrintLengthPrefix
.2f9f	a9 22		lda #$22			lda 	#'"'
.2fa1	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.2fa4	4c 23 2f	jmp $2f23			jmp 	_DTListLoop
.2fa7					_DTIsFloat:
>2fa7	db						.byte 	$DB
.2fa8	4c a7 2f	jmp $2fa7			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.2fab					DTPrintInteger:
.2fab	48		pha				pha
.2fac	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2fae	85 2a		sta $2a				sta 	temp0
.2fb0	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2fb2	85 2b		sta $2b				sta 	1+(temp0)
.2fb4	68		pla				pla
.2fb5	a8		tay				tay
.2fb6	8a		txa				txa
.2fb7	a2 0c		ldx #$0c		ldx	#12
.2fb9	20 29 2c	jsr $2c29		jsr	mainHandler
.2fbc	aa		tax				tax
.2fbd					DTPrintLengthPrefix:
.2fbd	98		tya				tya
.2fbe	48		pha				pha
.2fbf	a0 00		ldy #$00			ldy 	#0
.2fc1	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fc3	aa		tax				tax
.2fc4	f0 0b		beq $2fd1			beq 	_DTPLPExit
.2fc6					_DTPLPLoop:
.2fc6	c8		iny				iny
.2fc7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2fc9	29 7f		and #$7f			and 	#$7F
.2fcb	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.2fce	ca		dex				dex
.2fcf	d0 f5		bne $2fc6			bne 	_DTPLPLoop
.2fd1					_DTPLPExit:
.2fd1	68		pla				pla
.2fd2	a8		tay				tay
.2fd3	60		rts				rts
.2fd4					ListOutputCharacter:
.2fd4	85 32		sta $32				sta 	tempShort
.2fd6	48		pha				pha
.2fd7	8a		txa				txa
.2fd8	48		pha				pha
.2fd9	98		tya				tya
.2fda	48		pha				pha
.2fdb	a5 32		lda $32				lda 	tempShort
.2fdd	c9 20		cmp #$20			cmp 	#32
.2fdf	b0 0c		bcs $2fed			bcs		_LOCHiBit
.2fe1	09 40		ora #$40			ora 	#64
.2fe3	c9 40		cmp #$40			cmp 	#64
.2fe5	f0 06		beq $2fed			beq 	_LOCHiBit
.2fe7	c9 5b		cmp #$5b			cmp 	#65+26
.2fe9	b0 02		bcs $2fed			bcs 	_LOCHiBit
.2feb	69 20		adc #$20			adc 	#32
.2fed					_LOCHiBit:
.2fed	20 f6 2f	jsr $2ff6			jsr 	_LOCCallVector
.2ff0	68		pla				pla
.2ff1	a8		tay				tay
.2ff2	68		pla				pla
.2ff3	aa		tax				tax
.2ff4	68		pla				pla
.2ff5					_LOCExit:
.2ff5	60		rts				rts
.2ff6					_LOCCallVector:
.2ff6	6c 13 0c	jmp ($0c13)			jmp 	(deTokeniseVector)
.2ff9					deTokenPrint:
.2ff9	c9 00		cmp #$00			cmp 	#0
.2ffb	30 06		bmi $3003			bmi 	_dtpInk
.2ffd	a2 12		ldx #$12		ldx	#18
.2fff	20 59 11	jsr $1159		jsr	deviceHandler
.3002	60		rts				rts
.3003	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.3005	f0 08		beq $300f			beq 	_dtpCR
.3007	29 07		and #$07			and 	#7
.3009	a2 06		ldx #$06		ldx	#6
.300b	20 59 11	jsr $1159		jsr	deviceHandler
.300e	60		rts				rts
.300f					_dtpCR:
.300f	a2 02		ldx #$02		ldx	#2
.3011	20 59 11	jsr $1159		jsr	deviceHandler
.3014	60		rts				rts
.3015					DTSwitchMode:
.3015	cd 15 0c	cmp $0c15			cmp 	LastCharacterClass
.3018	f0 04		beq $301e			beq 	_DTSMNoChange
.301a	8d 15 0c	sta $0c15			sta 	LastCharacterClass
.301d					_DTSMExit:
.301d	60		rts				rts
.301e					_DTSMNoChange:
.301e	c9 01		cmp #$01			cmp 	#1
.3020	f0 fb		beq $301d			beq 	_DTSMExit
.3022	a9 20		lda #$20			lda 	#" "
.3024	4c d4 2f	jmp $2fd4			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3027					DTIdentifier:
.3027	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3029	20 15 30	jsr $3015			jsr 	DTSwitchMode
.302c	a9 87		lda #$87			lda 	#LTYIdentifier
.302e	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.3031					_DTILoop:
.3031	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3033	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3035	d0 02		bne $3039			bne 	_DTINotUS
.3037	a9 5f		lda #$5f			lda 	#"_"
.3039					_DTINotUS:
.3039	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.303c	c8		iny				iny
.303d	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.303f	c9 3a		cmp #$3a			cmp 	#$3A
.3041	90 ee		bcc $3031			bcc 	_DTILoop
.3043	c8		iny				iny
.3044	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3046	f0 25		beq $306d			beq 	_DTIExit 					; no postfix.
.3048	48		pha				pha
.3049	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.304b	8d 15 0c	sta $0c15			sta 	LastCharacterClass
.304e	a9 82		lda #$82			lda 	#LTYPunctuation
.3050	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.3053	68		pla				pla
.3054	c9 3b		cmp #$3b			cmp 	#$3B
.3056	f0 10		beq $3068			beq 	_DTIArray
.3058	4a		lsr a				lsr 	a 							; array flag in C
.3059	08		php				php
.305a	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.305c	f0 02		beq $3060			beq 	_DTIDollar
.305e	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3060					_DTIDollar:
.3060	49 24		eor #$24			eor 	#"$"
.3062	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.3065	28		plp				plp
.3066	90 05		bcc $306d			bcc 	_DTIExit
.3068					_DTIArray:
.3068	a9 28		lda #$28			lda 	#"("
.306a	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.306d					_DTIExit:
.306d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.306e					DTDecodeToken:
.306e	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3070	b1 28		lda ($28),y			lda 	(codePtr),y
.3072	c9 84		cmp #$84			cmp 	#$84
.3074	b0 05		bcs $307b			bcs 	_DTNotShift
.3076	29 03		and #$03			and 	#3 							; get the shift 1..3
.3078	0a		asl a				asl 	a 							; put 2 x in X
.3079	aa		tax				tax
.307a	c8		iny				iny
.307b					_DTNotShift:
.307b	bd 79 33	lda $3379,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.307e	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3080	bd 7a 33	lda $337a,x			lda 	TokenTableAddress+1,x
.3083	85 2b		sta $2b				sta 	temp0+1
.3085	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3087	c8		iny				iny 								; consume it.
.3088	aa		tax				tax
.3089	98		tya				tya
.308a	48		pha				pha
.308b					_DTFindText:
.308b	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.308d	f0 11		beq $30a0			beq 	_DTFoundText
.308f	ca		dex				dex
.3090	a0 00		ldy #$00			ldy 	#0
.3092	38		sec				sec
.3093	b1 2a		lda ($2a),y			lda 	(temp0),y
.3095	65 2a		adc $2a				adc 	temp0
.3097	85 2a		sta $2a				sta 	temp0
.3099	90 f0		bcc $308b			bcc 	_DTFindText
.309b	e6 2b		inc $2b				inc 	temp0+1
.309d	4c 8b 30	jmp $308b			jmp 	_DTFindText
.30a0					_DTFoundText:
.30a0	a0 01		ldy #$01			ldy 	#1 							; get first character
.30a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.30a4	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.30a6	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.30a8	90 11		bcc $30bb			bcc 	_DTIsPunctuation
.30aa	c9 5b		cmp #$5b			cmp 	#"Z"+1
.30ac	b0 0d		bcs $30bb			bcs 	_DTIsPunctuation
.30ae	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.30b0	20 15 30	jsr $3015			jsr 	DTSwitchMode
.30b3	a9 83		lda #$83			lda 	#LTYKeyword
.30b5	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.30b8	4c c5 30	jmp $30c5			jmp 	_DTPrint
.30bb					_DTIsPunctuation:
.30bb	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.30bd	20 15 30	jsr $3015			jsr 	DTSwitchMode
.30c0	a9 82		lda #$82			lda 	#LTYPunctuation
.30c2	20 d4 2f	jsr $2fd4			jsr 	ListOutputCharacter
.30c5					_DTPrint:
.30c5	20 bd 2f	jsr $2fbd			jsr 	DTPrintLengthPrefix 		; print it out.
.30c8	a0 00		ldy #$00			ldy 	#0 							; get last character
.30ca	b1 2a		lda ($2a),y			lda 	(temp0),y
.30cc	a8		tay				tay
.30cd	b1 2a		lda ($2a),y			lda 	(temp0),y
.30cf	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.30d1	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.30d3	90 04		bcc $30d9			bcc 	_DTIsNowPunctuation
.30d5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.30d7	90 05		bcc $30de			bcc 	_DTPExit
.30d9					_DTIsNowPunctuation:
.30d9	a9 01		lda #$01			lda 	#1
.30db	8d 15 0c	sta $0c15			sta		LastCharacterClass
.30de					_DTPExit:
.30de	68		pla				pla
.30df	a8		tay				tay
.30e0	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c16					currentSet:
>0c16							.fill 	1
.30e1					TokenSearch:
.30e1	8a		txa				txa
.30e2	48		pha				pha
.30e3	98		tya				tya
.30e4	48		pha				pha
.30e5	a9 00		lda #$00			lda 	#0
.30e7	8d 16 0c	sta $0c16			sta 	currentSet
.30ea					_TSLoop:
.30ea	ad 16 0c	lda $0c16			lda 	currentSet 					; 2 x currentset in X
.30ed	0a		asl a				asl 	a
.30ee	aa		tax				tax
.30ef	bd 79 33	lda $3379,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.30f2	85 2a		sta $2a				sta 	temp0
.30f4	bd 7a 33	lda $337a,x			lda 	TokenTableAddress+1,x
.30f7	85 2b		sta $2b				sta 	temp0+1
.30f9	20 20 31	jsr $3120			jsr 	TokenSearchOne 				; search one table
.30fc	b0 0d		bcs $310b			bcs 	_TSFound 					; found a token.
.30fe	ee 16 0c	inc $0c16			inc 	currentSet 					; next set
.3101	ad 16 0c	lda $0c16			lda 	currentSet
.3104	c9 04		cmp #$04			cmp 	#4
.3106	d0 e2		bne $30ea			bne 	_TSLoop 					; back if not done all four.
.3108	18		clc				clc 								; clear carry and exit
.3109	90 10		bcc $311b			bcc 	_TSExit
.310b					_TSFound:
.310b	48		pha				pha 								; save token
.310c	ad 16 0c	lda $0c16			lda 	currentSet					; if set zero no shift
.310f	f0 05		beq $3116			beq 	_TSNoShift
.3111	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3113	20 cf 31	jsr $31cf			jsr 	TokenWrite
.3116					_TSNoShift:
.3116	68		pla				pla 								; get token back
.3117	20 cf 31	jsr $31cf			jsr 	TokenWrite 					; write it
.311a	38		sec				sec 								; carry set indicating success
.311b					_TSExit:
.311b	68		pla				pla
.311c	a8		tay				tay
.311d	68		pla				pla
.311e	aa		tax				tax
.311f	60		rts				rts
.3120					TokenSearchOne:
.3120	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3122					_TSOLoop:
.3122	a0 00		ldy #$00			ldy 	#0
.3124	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3126	f0 26		beq $314e			beq 	_TSOFail 					; if zero, end of table
.3128	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.312b	f0 11		beq $313e			beq 	_TSOCheckText
.312d					_TSONext:
.312d	e8		inx				inx 								; bump token
.312e	a0 00		ldy #$00			ldy 	#0							; get length
.3130	b1 2a		lda ($2a),y			lda 	(temp0),y
.3132	38		sec				sec
.3133	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3135	85 2a		sta $2a				sta 	temp0
.3137	90 e9		bcc $3122			bcc 	_TSOLoop
.3139	e6 2b		inc $2b				inc 	temp0+1
.313b	4c 22 31	jmp $3122			jmp 	_TSOLoop
.313e					_TSOCheckText:
.313e	a8		tay				tay 								; compare length downto 1.
.313f					_TSOCheckLoop:
.313f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3141	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3144	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3146	d0 e5		bne $312d			bne 	_TSONext 					; different goto next.
.3148	88		dey				dey 								; do all
.3149	d0 f4		bne $313f			bne 	_TSOCheckLoop
.314b	8a		txa				txa 								; return token in A and carry set
.314c	38		sec				sec
.314d	60		rts				rts
.314e					_TSOFail:
.314e	18		clc				clc
.314f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3150					TokTest:
.3150	a2 ff		ldx #$ff				ldx 	#$FF
.3152	9a		txs					txs
.3153	a9 70		lda #$70			lda 	#(TokenText1) & $FF
.3155	85 28		sta $28				sta 	codePtr
.3157	a9 31		lda #$31			lda 	#(TokenText1) >> 8
.3159	85 29		sta $29				sta 	1+(codePtr)
.315b	20 70 31	jsr $3170				jsr 	Tokenise
.315e	a2 00		ldx #$00	TokStop:	ldx 	#0
.3160	bd 70 31	lda $3170,x	_TokCheck:	lda 	TokenBytes1,x
.3163	dd 1a 0c	cmp $0c1a,x				cmp 	tokenBuffer,x
.3166	d0 fe		bne $3166	_TokFail:	bne 	_TokFail
.3168	e8		inx					inx
.3169	c9 80		cmp #$80				cmp 	#$80
.316b	d0 f3		bne $3160				bne 	_TokCheck
.316d	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3170					TokenText1:
.3170					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c17					tokenHeader:
>0c17							.fill 	3
.0c1a					tokenBuffer:
>0c1a							.fill 	256
.0d1a					tokenBufferIndex:
>0d1a							.fill 	1
.3170					Tokenise:
.3170	20 e8 31	jsr $31e8			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3173					TokeniseASCIIZ:
.3173	20 f9 31	jsr $31f9			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3176	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3178	8d 1a 0d	sta $0d1a			sta 	tokenBufferIndex
.317b	a8		tay				tay 								; start pointer
.317c	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.317e	8d 1a 0c	sta $0c1a			sta 	tokenBuffer
.3181					_TokLoop:
.3181	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3183	f0 46		beq $31cb			beq 	_TokExit 					; if zero, then exit.
.3185	c8		iny				iny 								; skip over spaces.
.3186	c9 20		cmp #$20			cmp 	#" "
.3188	f0 f7		beq $3181			beq 	_TokLoop
.318a	88		dey				dey 								; point back to character.
.318b	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.318d	f0 18		beq $31a7			beq 	_TokHexConst
.318f	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3191	f0 23		beq $31b6			beq 	_TokQString
.3193	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3195	b0 26		bcs $31bd			bcs 	_TokPunctuation
.3197	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3199	b0 29		bcs $31c4			bcs 	_TokIdentifier
.319b	c9 3a		cmp #$3a			cmp 	#"9"+1
.319d	b0 1e		bcs $31bd			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.319f	c9 30		cmp #$30			cmp 	#"0"
.31a1	90 1a		bcc $31bd			bcc 	_TokPunctuation 			; < 0, punctuation.
.31a3	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.31a5	d0 08		bne $31af			bne 	_TokConst
.31a7					_TokHexConst:
.31a7	c8		iny				iny									; consume token.
.31a8	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.31aa	20 cf 31	jsr $31cf			jsr 	TokenWrite
.31ad	a9 10		lda #$10			lda 	#16
.31af					_TokConst:
.31af	20 b7 32	jsr $32b7			jsr 	TokeniseInteger
.31b2	b0 cd		bcs $3181			bcs 	_TokLoop
.31b4	90 17		bcc $31cd			bcc 	_TokFail
.31b6					_TokQString:
.31b6	20 4d 33	jsr $334d			jsr 	TokeniseString
.31b9	b0 c6		bcs $3181			bcs 	_TokLoop
.31bb	90 10		bcc $31cd			bcc 	_TokFail
.31bd					_TokPunctuation:
.31bd	20 2c 33	jsr $332c			jsr 	TokenisePunctuation
.31c0	b0 bf		bcs $3181			bcs 	_TokLoop
.31c2	90 09		bcc $31cd			bcc 	_TokFail
.31c4					_TokIdentifier:
.31c4	20 28 32	jsr $3228			jsr 	TokeniseIdentifier
.31c7	b0 b8		bcs $3181			bcs 	_TokLoop
.31c9	90 02		bcc $31cd			bcc 	_TokFail
.31cb					_TokExit:
.31cb	38		sec				sec
.31cc	60		rts				rts
.31cd					_TokFail:
.31cd	18		clc				clc
.31ce	60		rts				rts
.31cf					TokenWrite:
.31cf	85 32		sta $32				sta 	tempShort 					; save XA
.31d1	48		pha				pha
.31d2	8a		txa				txa
.31d3	48		pha				pha
.31d4	a5 32		lda $32				lda 	tempShort
.31d6	ae 1a 0d	ldx $0d1a			ldx 	tokenBufferIndex 			; geet index
.31d9	9d 1a 0c	sta $0c1a,x			sta 	tokenBuffer,x 				; write byte to buffer
.31dc	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.31de	9d 1b 0c	sta $0c1b,x			sta 	tokenBuffer+1,x
.31e1	ee 1a 0d	inc $0d1a			inc 	tokenBufferIndex 			; bump index
.31e4	68		pla				pla
.31e5	aa		tax				tax
.31e6	68		pla				pla
.31e7	60		rts				rts
.31e8					TokeniseMakeASCIIZ:
.31e8	a0 00		ldy #$00			ldy 	#0							; get length of string.
.31ea	b1 28		lda ($28),y			lda 	(codePtr),y
.31ec	a8		tay				tay
.31ed	c8		iny				iny 								; +1, the NULL goes here.
.31ee	a9 00		lda #$00			lda 	#0
.31f0	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.31f2	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.31f4	d0 02		bne $31f8			bne 	_TMKAExit
.31f6	e6 29		inc $29				inc 	codePtr+1
.31f8					_TMKAExit:
.31f8	60		rts				rts
.31f9					TokeniseFixCase:
.31f9	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.31fb	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.31fd					_TFCFlipQ:
.31fd	8a		txa				txa
.31fe	49 01		eor #$01			eor 	#1
.3200	aa		tax				tax
.3201					_TFCLoop:
.3201	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3203	f0 22		beq $3227			beq 	_TFCExit 					; if zero exit.
.3205	c9 20		cmp #$20			cmp 	#32 						; if control
.3207	90 1a		bcc $3223			bcc 	_TFCControl
.3209	c8		iny				iny 								; preconsume
.320a	c9 22		cmp #$22			cmp 	#'"'
.320c	f0 ef		beq $31fd			beq 	_TFCFlipQ
.320e	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3210	90 ef		bcc $3201			bcc 	_TFCLoop
.3212	c9 7b		cmp #$7b			cmp 	#"z"+1
.3214	b0 eb		bcs $3201			bcs 	_TFCLoop
.3216	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3218	d0 e7		bne $3201			bne 	_TFCLoop
.321a	88		dey				dey
.321b	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.321d					_TFCWrite:
.321d	91 28		sta ($28),y			sta 	(codePtr),y
.321f	c8		iny				iny
.3220	4c 01 32	jmp $3201			jmp 	_TFCLoop
.3223					_TFCControl:
.3223	a9 20		lda #$20			lda 	#" "
.3225	d0 f6		bne $321d			bne 	_TFCWrite
.3227					_TFCExit:
.3227	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3228					TokeniseIdentifier:
.3228	a2 00		ldx #$00			ldx 	#0
.322a					_TICopyID:
.322a	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.322c	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.322e	f0 16		beq $3246			beq 	_TICopyUnderscore
.3230	c9 2e		cmp #$2e			cmp 	#"."
.3232	f0 14		beq $3248			beq 	_TICopyIn
.3234	c9 30		cmp #$30			cmp 	#"0"
.3236	90 1b		bcc $3253			bcc 	_TIEndCopy
.3238	c9 3a		cmp #$3a			cmp 	#"9"+1
.323a	90 0c		bcc $3248			bcc 	_TICopyIn
.323c	c9 41		cmp #$41			cmp 	#"A"
.323e	90 13		bcc $3253			bcc 	_TIEndCopy
.3240	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3242	b0 0f		bcs $3253			bcs		_TIEndCopy
.3244	90 02		bcc $3248			bcc 	_TICopyIn
.3246					_TICopyUnderScore:
.3246	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3248					_TICopyIn:
.3248	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3249	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.324c	8e cf 0a	stx $0acf			stx 	convertBuffer
.324f	c8		iny				iny 								; next character
.3250	4c 2a 32	jmp $322a			jmp 	_TICopyID 					; loop round
.3253					_TIEndCopy:
.3253	a9 24		lda #$24			lda 	#"$"
.3255	20 aa 32	jsr $32aa			jsr 	TIDCheckCopy
.3258	a9 23		lda #$23			lda 	#"#"
.325a	20 aa 32	jsr $32aa			jsr 	TIDCheckCopy
.325d	a9 28		lda #$28			lda 	#"("
.325f	20 aa 32	jsr $32aa			jsr 	TIDCheckCopy
.3262	20 e1 30	jsr $30e1			jsr 	TokenSearch 				; is it a token
.3265	b0 41		bcs $32a8			bcs 	_TIExit 					; if so, then exit.
.3267	98		tya				tya
.3268	48		pha				pha
.3269	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.326b	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.326e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3271	c9 28		cmp #$28			cmp 	#"("
.3273	d0 02		bne $3277			bne 	_TINotArray
.3275	ca		dex				dex 								; yes, remove it and convert to array.
.3276	c8		iny				iny
.3277					_TINotArray:
.3277	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.327a	c9 24		cmp #$24			cmp 	#"$"
.327c	d0 03		bne $3281			bne 	_TINotString
.327e	ca		dex				dex
.327f	c8		iny				iny
.3280	c8		iny				iny
.3281					_TINotString:
.3281	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3284	c9 23		cmp #$23			cmp 	#"#"
.3286	d0 05		bne $328d			bne 	_TINotFloat
.3288	ca		dex				dex
.3289	c8		iny				iny
.328a	c8		iny				iny
.328b	c8		iny				iny
.328c	c8		iny				iny
.328d					_TINotFloat:
.328d	e8		inx				inx 								; write end marker for identifier.
.328e	98		tya				tya
.328f	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3292	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3295	a2 01		ldx #$01			ldx 	#1
.3297					_TIOutput:
.3297	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.329a	29 3f		and #$3f			and 	#$3F
.329c	48		pha				pha
.329d	20 cf 31	jsr $31cf			jsr 	TokenWrite
.32a0	e8		inx				inx
.32a1	68		pla				pla
.32a2	c9 3a		cmp #$3a			cmp 	#$3A
.32a4	90 f1		bcc $3297			bcc 	_TIOutput
.32a6	68		pla				pla
.32a7	a8		tay				tay
.32a8					_TIExit:
.32a8	38		sec				sec 								; this can't fail.
.32a9	60		rts				rts
.32aa					TIDCheckCopy:
.32aa	d1 28		cmp ($28),y			cmp 	(codePtr),y
.32ac	d0 08		bne $32b6			bne 	_TIDCCExit
.32ae	e8		inx				inx
.32af	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.32b2	8e cf 0a	stx $0acf			stx 	convertBuffer
.32b5	c8		iny				iny
.32b6					_TIDCCExit:
.32b6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.32b7					TokeniseInteger:
.32b7	85 2c		sta $2c				sta 	temp1 						; save base
.32b9	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.32bb	8e cf 0a	stx $0acf			stx 	convertBuffer
.32be					_TIGetChars:
.32be	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.32c0	c9 30		cmp #$30			cmp 	#"0"
.32c2	90 1f		bcc $32e3			bcc 	_TIEndGet
.32c4	c9 3a		cmp #$3a			cmp 	#"9"+1
.32c6	90 10		bcc $32d8			bcc 	_TIHaveChar
.32c8	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.32ca	c9 0a		cmp #$0a			cmp 	#10
.32cc	f0 15		beq $32e3			beq 	_TIEndGet
.32ce	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.32d0	c9 41		cmp #$41			cmp 	#"A"
.32d2	90 0f		bcc $32e3			bcc 	_TIEndGet
.32d4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32d6	b0 0b		bcs $32e3			bcs 	_TIEndGet
.32d8					_TIHaveChar:
.32d8	e8		inx				inx 								; write into buffer.
.32d9	8e cf 0a	stx $0acf			stx 	convertBuffer
.32dc	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.32df	c8		iny				iny 								; next char
.32e0	4c be 32	jmp $32be			jmp 	_TIGetChars
.32e3					_TIEndGet:
.32e3	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.32e5	f0 1c		beq $3303			beq 	_TIFail
.32e7	98		tya				tya
.32e8	48		pha				pha
.32e9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.32eb	85 2a		sta $2a				sta 	temp0
.32ed	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.32ef	85 2b		sta $2b				sta 	1+(temp0)
.32f1	a9 00		lda #$00			lda 	#0 							; stack 0
.32f3	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.32f5	a2 16		ldx #$16		ldx	#22
.32f7	20 29 2c	jsr $2c29		jsr	mainHandler
.32fa	68		pla				pla
.32fb	a8		tay				tay
.32fc	90 05		bcc $3303			bcc 	_TIFail 					; didn't convert.
.32fe	20 05 33	jsr $3305			jsr 	TIRecursiveOut 				; recursive output ?
.3301	38		sec				sec
.3302	60		rts				rts
.3303					_TIFail:
.3303	18		clc				clc
.3304	60		rts				rts
.3305					TIRecursiveOut:
.3305	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.3307	29 3f		and #$3f			and 	#$3F
.3309	09 40		ora #$40			ora 	#$40
.330b	48		pha				pha
.330c	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.330e	29 c0		and #$c0			and 	#$C0
.3310	05 50		ora $50				ora 	esInt1
.3312	05 58		ora $58				ora 	esInt2
.3314	05 60		ora $60				ora 	esInt3
.3316	f0 10		beq $3328			beq 	_TIRONoRecursion
.3318	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.331a					_TIROShift:
.331a	46 60		lsr $60				lsr 	esInt3
.331c	66 58		ror $58				ror 	esInt2
.331e	66 50		ror $50				ror 	esInt1
.3320	66 48		ror $48				ror 	esInt0
.3322	ca		dex				dex
.3323	d0 f5		bne $331a			bne 	_TIROShift
.3325	20 05 33	jsr $3305			jsr 	TIRecursiveOut 				; call recursively
.3328					_TIRONoRecursion:
.3328	68		pla				pla 								; pull the old bit.
.3329	4c cf 31	jmp $31cf			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.332c					TokenisePunctuation:
.332c	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.332e	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3331	c8		iny				iny
.3332	b1 28		lda ($28),y			lda 	(codePtr),y
.3334	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3337	c8		iny				iny 								; Y is +2
.3338	a9 02		lda #$02			lda 	#2 							; 2 character string.
.333a	8d cf 0a	sta $0acf			sta 	convertBuffer
.333d	20 e1 30	jsr $30e1			jsr 	TokenSearch 				; search for that token.
.3340	b0 0a		bcs $334c			bcs 	_TIFound
.3342	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3345	88		dey				dey 								; Y is now +1
.3346	20 e1 30	jsr $30e1			jsr 	TokenSearch 				; search for that token.
.3349	b0 01		bcs $334c			bcs 	_TIFound
.334b	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.334c					_TIFound:
.334c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.334d					TokeniseString:
.334d	c8		iny				iny 								; skip opening quote
.334e	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3350	84 2a		sty $2a				sty 	temp0 						; save start.
.3352					_TSGetLength:
.3352	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3354	f0 21		beq $3377			beq 	_TSFail						; end of line, fail
.3356	c8		iny				iny
.3357	e8		inx				inx
.3358	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.335a	d0 f6		bne $3352			bne 	_TSGetLength
.335c	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.335e	20 cf 31	jsr $31cf			jsr 	TokenWrite
.3361	8a		txa				txa 								; output length
.3362	20 cf 31	jsr $31cf			jsr 	TokenWrite
.3365	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3367	e0 00		cpx #$00			cpx 	#0 							; check ended
.3369	f0 09		beq $3374			beq 	_TSExit
.336b					_TSOutput:
.336b	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.336d	20 cf 31	jsr $31cf			jsr 	TokenWrite
.3370	c8		iny				iny
.3371	ca		dex				dex
.3372	d0 f7		bne $336b			bne 	_TSOutput
.3374					_TSExit:
.3374	c8		iny				iny 								; skip ending quote
.3375	38		sec				sec 								; return CS.
.3376	60		rts				rts
.3377					_TSFail:
.3377	18		clc				clc
.3378	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3379					TokenTableAddress:
>3379	81 33						.word 	Group0Text
>337b	32 35						.word 	Group1Text
>337d	6b 35						.word 	Group2Text
>337f	78 35						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3381					Group0Text:
>3381	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3385	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3388	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>338c	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>338f	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3392	01 be					.byte $01,$be                          ; $8b >
>3394	01 bc					.byte $01,$bc                          ; $8c <
>3396	01 bd					.byte $01,$bd                          ; $8d =
>3398	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>339b	01 ab					.byte $01,$ab                          ; $8f +
>339d	01 ad					.byte $01,$ad                          ; $90 -
>339f	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>33a2	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>33a5	01 aa					.byte $01,$aa                          ; $93 *
>33a7	01 af					.byte $01,$af                          ; $94 /
>33a9	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>33ad	01 de					.byte $01,$de                          ; $96 ^
>33af	01 a1					.byte $01,$a1                          ; $97 !
>33b1	01 bf					.byte $01,$bf                          ; $98 ?
>33b3	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>33ba	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>33c0	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>33c4	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>33c7	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>33cf	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>33d5	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>33da	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>33df	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>33e4	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>33ea	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>33f2	01 a8					.byte $01,$a8                          ; $a4 (
>33f4	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>33f9	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>33fe	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3403	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>340b	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3410	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3415	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>341b	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3420	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3425	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>342a	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3431	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3438	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>343d	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3444	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>344b	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3451	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3458	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>345e	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3466	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>346c	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3471	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3477	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>347d	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3483	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3488	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>348d	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3494	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>349b	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>34a3	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>34ab	01 c0					.byte $01,$c0                          ; $c3 @
>34ad	01 fe					.byte $01,$fe                          ; $c4 ~
>34af	01 a6					.byte $01,$a6                          ; $c5 &
>34b1	01 a9					.byte $01,$a9                          ; $c6 )
>34b3	01 ba					.byte $01,$ba                          ; $c7 :
>34b5	01 ac					.byte $01,$ac                          ; $c8 ,
>34b7	01 bb					.byte $01,$bb                          ; $c9 ;
>34b9	01 a7					.byte $01,$a7                          ; $ca '
>34bb	02 54 cf				.byte $02,$54,$cf                      ; $cb to
>34be	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cc step
>34c3	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $cd proc
>34c8	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $ce local
>34ce	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $cf dim
>34d2	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d0 rem
>34d6	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d1 let
>34da	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d2 input
>34e0	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d3 else
>34e5	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d4 vdu
>34e9	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d5 print
>34ef	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d6 goto
>34f4	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $d7 gosub
>34fa	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $d8 return
>3501	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3506	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $da assert
>350d	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $db poke
>3512	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $dc doke
>3517	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $dd loke
>351c	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $de ink
>3520	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $df paper
>3526	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e0 cls
>352a	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e1 locate
>3531	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3532					Group1Text:
>3532	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3538	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>353d	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3542	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3547	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>354b	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>354f	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3554	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>355c	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3560	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3565	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>356a	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.356b					Group2Text:
>356b	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3571	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3577	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3578					Group3Text:
>3578	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>357f	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3586	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3587					tokeniserHandler:
.3587	7c 8a 35	jmp ($358a,x)			jmp 	(tokeniserVectors,x)
.358a					tokeniserVectors:
>358a	f3 2e					.word Detokenise           ; index 0
>358c	e9 2e					.word ListLine             ; index 2
>358e	50 31					.word TokTest              ; index 4
>3590	70 31					.word Tokenise             ; index 6
>3592	73 31					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3594					section_end_tokeniser:
.3594					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d1b					varHash:
>0d1b							.fill	1
.0d1c					varType:
>0d1c							.fill 	1
.0d1d					varEnd:
>0d1d							.fill 	1
.007c					hashList:
>007c							.fill 	2
.3594					AccessVariable:
.3594	aa		tax				tax 								; stack in X
.3595	c8		iny				iny									; look at second character
.3596	b1 28		lda ($28),y			lda 	(codePtr),y
.3598	88		dey				dey
.3599	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.359b	d0 15		bne $35b2			bne 	_AVLong 					; no, always use the hash tables.
.359d	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.359f	38		sec				sec 	 							; make it 0-25
.35a0	e9 01		sbc #$01			sbc 	#1
.35a2	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.35a3	0a		asl a				asl 	a
.35a4	95 48		sta $48,x			sta 	esInt0,x
.35a6	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.35a8	95 50		sta $50,x			sta 	esInt1,x
.35aa	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.35ac	95 40		sta $40,x			sta 	esType,x
.35ae	c8		iny				iny 								; skip over the variable reference in the code.
.35af	c8		iny				iny  								; (1 letter, 1 type)
.35b0	8a		txa				txa 								; stack in A to return.
.35b1	60		rts				rts
.35b2					_AVLong:
.35b2	8a		txa				txa
.35b3	48		pha				pha
.35b4	20 fb 35	jsr $35fb			jsr 	AccessSetup 				; set up the basic information we need for later
.35b7	20 29 38	jsr $3829			jsr 	FindVariable 				; does the variable exist already ?
.35ba	b0 0e		bcs $35ca			bcs 	_AVFound 					; yes, then its found
.35bc	ad 1c 0d	lda $0d1c			lda 	varType 					; otherwise, is the variable type an array
.35bf	4a		lsr a				lsr 	a
.35c0	90 05		bcc $35c7			bcc 	_AVCanCreate 				; if not, we can autocreate
.35c2	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.35c4	20 76 11	jsr $1176		jsr	errorHandler
.35c7					_AVCanCreate:
.35c7	20 b0 36	jsr $36b0			jsr 	CreateVariable 				; variable does not exist, create it.
.35ca					_AVFound:
.35ca	68		pla				pla
.35cb	aa		tax				tax
.35cc	18		clc				clc 								; copy temp0 (variable record address)
.35cd	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.35cf	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.35d1	95 48		sta $48,x			sta 	esInt0,x
.35d3	a5 2b		lda $2b				lda 	temp0+1
.35d5	69 00		adc #$00			adc 	#0
.35d7	95 50		sta $50,x			sta 	esInt1,x
.35d9	a9 00		lda #$00			lda 	#0
.35db	95 58		sta $58,x			sta 	esInt2,x
.35dd	95 60		sta $60,x			sta 	esInt3,x
.35df	ac 1c 0d	ldy $0d1c			ldy 	varType 					; get the type ID from the type.
.35e2	b9 bb 35	lda $35bb,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.35e5	95 40		sta $40,x			sta 	esType,x
.35e7	ac 1d 0d	ldy $0d1d			ldy 	varEnd 						; restore Y
.35ea	ad 1c 0d	lda $0d1c			lda 	VarType 					; get variable type, put LSB into C
.35ed	4a		lsr a				lsr 	a
.35ee	90 03		bcc $35f3			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.35f0	20 38 36	jsr $3638			jsr 	AccessArray 				; array lookup. if LSB was set.
.35f3					_AVNotArray:
.35f3	8a		txa				txa 								; return stack in A and return
.35f4	60		rts				rts
.35f5					_AVTypeTable:
>35f5	80 80						.byte 	$80,$80						; integer
>35f7	c0 c0						.byte 	$C0,$C0 					; string
>35f9	81 81						.byte 	$81,$81 					; float
.35fb					AccessSetup:
.35fb	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.35fd	8d 1b 0d	sta $0d1b			sta 	varHash
.3600	98		tya				tya
.3601	48		pha				pha
.3602	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3604	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3606	b0 0b		bcs $3613			bcs 	_ASComplete
.3608	18		clc				clc 								; add to the hash. Might improve this.
.3609	6d 1b 0d	adc $0d1b			adc 	varHash
.360c	8d 1b 0d	sta $0d1b			sta 	varHash
.360f	c8		iny				iny 								; next character
.3610	4c 02 36	jmp $3602			jmp 	_ASLoop
.3613					_ASComplete:
.3613	8d 1c 0d	sta $0d1c			sta 	varType 					; save variable type byte
.3616	c8		iny				iny
.3617	8c 1d 0d	sty $0d1d			sty 	varEnd 						; save the ending position.
.361a	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.361b	e9 3a		sbc #$3a			sbc 	#$3A
.361d	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.361e	0a		asl a				asl 	a
.361f	0a		asl a				asl 	a
.3620	0a		asl a				asl 	a 							; 2 bytes/word
.3621	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3623	ad 1b 0d	lda $0d1b			lda 	varHash 					; get hash
.3626	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3628	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3629	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.362b	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.362d	85 7c		sta $7c				sta 	hashList 					; making hashLists point to the head of the link list.
.362f	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3631	69 00		adc #$00			adc 	#0
.3633	85 7d		sta $7d				sta 	hashList+1
.3635	68		pla				pla
.3636	a8		tay				tay
.3637	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3638					AccessArray:
.3638	e8		inx				inx
.3639	8a		txa				txa
.363a	a2 06		ldx #$06		ldx	#6
.363c	20 29 2c	jsr $2c29		jsr	mainHandler
.363f	48		pha				pha
.3640	a2 00		ldx #$00		ldx	#0
.3642	20 29 2c	jsr $2c29		jsr	mainHandler
.3645	68		pla				pla
.3646	aa		tax				tax
.3647	ca		dex				dex
.3648	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.364a	15 59		ora $59,x			ora 	esInt2+1,x
.364c	d0 33		bne $3681			bne 	_AABadIndex
.364e	98		tya				tya
.364f	48		pha				pha
.3650	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.3652	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3654	b5 50		lda $50,x			lda 	esInt1,x
.3656	85 2b		sta $2b				sta 	temp0+1
.3658	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.365a	b5 49		lda $49,x			lda 	esInt0+1,x
.365c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.365e	c8		iny				iny
.365f	b5 51		lda $51,x			lda 	esInt1+1,x
.3661	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.3663	b0 1c		bcs $3681			bcs 	_AABadIndex 				; if >= then fail.
.3665	e8		inx				inx 								; point to index
.3666	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3668	b1 2a		lda ($2a),y			lda 	(temp0),y
.366a	20 86 36	jsr $3686			jsr 	MultiplyTOSByA 				; specialist multiplier.
.366d	ca		dex				dex
.366e	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3670	18		clc				clc
.3671	b5 49		lda $49,x			lda 	esInt0+1,x
.3673	71 2a		adc ($2a),y			adc 	(temp0),y
.3675	95 48		sta $48,x			sta 	esInt0,x
.3677	b5 51		lda $51,x			lda 	esInt1+1,x
.3679	c8		iny				iny
.367a	71 2a		adc ($2a),y			adc 	(temp0),y
.367c	95 50		sta $50,x			sta 	esInt1,x
.367e	68		pla				pla
.367f	a8		tay				tay
.3680	60		rts				rts
.3681					_AABadIndex:
.3681	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3683	20 76 11	jsr $1176		jsr	errorHandler
.3686					MultiplyTOSByA:
.3686	48		pha				pha
.3687	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3689	85 2c		sta $2c				sta 	temp1
.368b	b5 50		lda $50,x			lda 	esInt1,x
.368d	85 2d		sta $2d				sta 	temp1+1
.368f	68		pla				pla
.3690	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3692	36 50		rol $50,x			rol 	esInt1,x
.3694	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3696	f0 17		beq $36af			beq 	_MTBAExit
.3698	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.369a	d0 0f		bne $36ab			bne 	_MTBANotFloat
.369c	48		pha				pha
.369d	18		clc				clc 								; so this will make it x 3
.369e	b5 48		lda $48,x			lda 	esInt0,x
.36a0	65 2c		adc $2c				adc 	temp1
.36a2	95 48		sta $48,x			sta 	esInt0,x
.36a4	b5 50		lda $50,x			lda 	esInt1,x
.36a6	65 2d		adc $2d				adc 	temp1+1
.36a8	95 50		sta $50,x			sta 	esInt1,x
.36aa	68		pla				pla
.36ab					_MTBANotFloat:
.36ab	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.36ad	36 50		rol $50,x			rol 	esInt1,x
.36af					_MTBAExit:
.36af	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.36b0					CreateVariable:
.36b0	98		tya				tya 								; push Y on the stack twice.
.36b1	48		pha				pha									; position in code of the new variable.
.36b2	48		pha				pha
.36b3	ae 1c 0d	ldx $0d1c			ldx 	varType 					; get var type 0-5 from the var type
.36b6	bd cf 36	lda $36cf,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.36b9	48		pha				pha 								; save length
.36ba	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.36bc	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.36be	a5 36		lda $36				lda 	lowMemory+1
.36c0	85 2b		sta $2b				sta 	temp0+1
.36c2	68		pla				pla 								; get length
.36c3	18		clc				clc 								; add to low memory.
.36c4	65 35		adc $35				adc 	lowMemory
.36c6	85 35		sta $35				sta 	lowMemory
.36c8	90 02		bcc $36cc			bcc 	_CVNoCarry
.36ca	e6 36		inc $36				inc 	lowMemory+1
.36cc					_CVNoCarry:
.36cc	ad 1b 0d	lda $0d1b			lda 	varHash 					; store hash at offset 4.
.36cf	a0 04		ldy #$04			ldy 	#4
.36d1	91 2a		sta ($2a),y			sta 	(temp0),y
.36d3	68		pla				pla 								; offset, work out where the variable name is.
.36d4	18		clc				clc
.36d5	65 28		adc $28				adc 	codePtr
.36d7	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.36d9	91 2a		sta ($2a),y			sta 	(temp0),y
.36db	a5 29		lda $29				lda 	codePtr+1
.36dd	69 00		adc #$00			adc 	#0
.36df	c8		iny				iny
.36e0	91 2a		sta ($2a),y			sta 	(temp0),y
.36e2	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.36e5	b0 03		bcs $36ea			bcs 	_CVNotImmediate
.36e7	20 47 37	jsr $3747			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.36ea					_CVNotImmediate:
.36ea	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.36ec	b1 7c		lda ($7c),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.36ee	91 2a		sta ($2a),y			sta 	(temp0),y
.36f0	c8		iny				iny
.36f1	b1 7c		lda ($7c),y			lda 	(hashList),y
.36f3	91 2a		sta ($2a),y			sta 	(temp0),y
.36f5	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.36f7	91 7c		sta ($7c),y			sta 	(hashList),y
.36f9	88		dey				dey
.36fa	a5 2a		lda $2a				lda 	temp0
.36fc	91 7c		sta ($7c),y			sta 	(hashList),y
.36fe	ad 1c 0d	lda $0d1c			lda 	varType 					; type in A
.3701	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3703	20 0f 37	jsr $370f			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3706	68		pla				pla
.3707	a8		tay				tay
.3708	60		rts				rts
>3709	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>370b	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>370d	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.370f					ZeroTemp0Y:
.370f	4a		lsr a				lsr 	a 							; bit 0 in carry
.3710	0a		asl a				asl 	a
.3711	b0 19		bcs $372c			bcs 	_ZTExit 					; we don't initialise arrays.
.3713	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3715	f0 16		beq $372d			beq 	_ZTWriteNullString 			; write "" string
.3717	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3719	f0 22		beq $373d			beq 	_ZTWriteFloat
.371b	98		tya				tya
.371c	48		pha				pha
.371d	a9 00		lda #$00			lda 	#0
.371f	91 2a		sta ($2a),y			sta 	(temp0),y
.3721	c8		iny				iny
.3722	91 2a		sta ($2a),y			sta 	(temp0),y
.3724	c8		iny				iny
.3725	91 2a		sta ($2a),y			sta 	(temp0),y
.3727	c8		iny				iny
.3728	91 2a		sta ($2a),y			sta 	(temp0),y
.372a	68		pla				pla
.372b	a8		tay				tay
.372c					_ZTExit:
.372c	60		rts				rts
.372d					_ZTWriteNullString:
.372d	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.372f	8d ce 0a	sta $0ace			sta 	NullString
.3732	a9 ce		lda #$ce			lda 	#NullString & $FF
.3734	91 2a		sta ($2a),y			sta 	(temp0),y
.3736	a9 0a		lda #$0a			lda 	#NullString >> 8
.3738	c8		iny				iny
.3739	91 2a		sta ($2a),y			sta 	(temp0),y
.373b	88		dey				dey
.373c	60		rts				rts
.373d					_ZTWriteFloat:
.373d	8a		txa				txa
.373e	48		pha				pha
.373f	a2 1e		ldx #$1e		ldx	#30
.3741	20 a8 14	jsr $14a8		jsr	floatingpointHandler
.3744	68		pla				pla
.3745	aa		tax				tax
.3746	60		rts				rts
.3747					CloneVariableName:
.3747	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3749	b1 2a		lda ($2a),y			lda 	(temp0),y
.374b	85 2e		sta $2e				sta 	temp2
.374d	c8		iny				iny
.374e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3750	85 2f		sta $2f				sta 	temp2+1
.3752	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3754	91 2a		sta ($2a),y			sta 	(temp0),y
.3756	88		dey				dey
.3757	a5 35		lda $35				lda 	lowMemory
.3759	91 2a		sta ($2a),y			sta 	(temp0),y
.375b	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.375d					_CVNCopy:
.375d	b1 2e		lda ($2e),y			lda		(temp2),y
.375f	91 35		sta ($35),y			sta 	(lowMemory),y
.3761	c8		iny				iny
.3762	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3764	90 f7		bcc $375d			bcc 	_CVNCopy
.3766	98		tya				tya 								; add Y to low memory
.3767	18		clc				clc
.3768	65 35		adc $35				adc 	lowMemory
.376a	85 35		sta $35				sta 	lowMemory
.376c	90 02		bcc $3770			bcc 	_CVNNoCarry
.376e	e6 36		inc $36				inc 	lowMemory+1
.3770					_CVNNoCarry:
.3770	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3771					CreateArray:
.3771	20 fb 35	jsr $35fb			jsr 	AccessSetup 				; set up the basic stuff.
.3774	ad 1c 0d	lda $0d1c			lda 	varType 					; is the variable type an array
.3777	4a		lsr a				lsr 	a
.3778	90 3f		bcc $37b9			bcc 	_CANotArray 				; no, cause an error.
.377a	20 29 38	jsr $3829			jsr 	FindVariable 				; does the variable exist already
.377d	b0 35		bcs $37b4			bcs 	_CAFound 					; cannot redefine it.
.377f	20 b0 36	jsr $36b0			jsr 	CreateVariable 				; create the variable entry.
.3782	ac 1d 0d	ldy $0d1d			ldy 	varEnd 						; point Y to the end of the variable entry.
.3785	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3787	48		pha				pha
.3788	a5 2b		lda $2b				lda 	temp0+1
.378a	48		pha				pha
.378b	ad 1c 0d	lda $0d1c			lda 	varType 					; push variable type on the stack.
.378e	48		pha				pha
.378f	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3791	a2 06		ldx #$06		ldx	#6
.3793	20 29 2c	jsr $2c29		jsr	mainHandler
.3796	a2 00		ldx #$00		ldx	#0
.3798	20 29 2c	jsr $2c29		jsr	mainHandler
.379b	68		pla				pla 		 						; restore type and position.
.379c	8d 1c 0d	sta $0d1c			sta 	varType
.379f	68		pla				pla
.37a0	85 2b		sta $2b				sta 	temp0+1
.37a2	68		pla				pla
.37a3	85 2a		sta $2a				sta 	temp0
.37a5	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.37a7	29 e0		and #$e0			and 	#$E0
.37a9	05 58		ora $58				ora 	esInt2
.37ab	05 60		ora $60				ora 	esInt3
.37ad	f0 0f		beq $37be			beq 	_CASizeOk
.37af					_CASize:
.37af	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.37b1	20 76 11	jsr $1176		jsr	errorHandler
.37b4					_CAFound:
.37b4	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.37b6	20 76 11	jsr $1176		jsr	errorHandler
.37b9					_CANotArray:
.37b9	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.37bb	20 76 11	jsr $1176		jsr	errorHandler
.37be					_CASizeOk:
.37be	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.37c0	d0 02		bne $37c4			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.37c2	e6 49		inc $49				inc 	esInt0+1
.37c4					_CANoCarry:
.37c4	98		tya				tya
.37c5	48		pha				pha
.37c6	a0 05		ldy #$05			ldy 	#5
.37c8	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.37ca	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.37cc	c8		iny				iny
.37cd	a5 36		lda $36				lda 	lowMemory+1
.37cf	91 2a		sta ($2a),y			sta 	(temp0),y
.37d1	c8		iny				iny
.37d2	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.37d4	91 2a		sta ($2a),y			sta 	(temp0),y
.37d6	c8		iny				iny
.37d7	a5 50		lda $50				lda 	esInt1
.37d9	91 2a		sta ($2a),y			sta 	(temp0),y
.37db	c8		iny				iny
.37dc	ae 1c 0d	ldx $0d1c			ldx 	varType 					; get the length per element
.37df	bd e7 37	lda $37e7,x			lda 	_CAActualSize-$3A-1,x
.37e2	91 2a		sta ($2a),y			sta 	(temp0),y
.37e4	aa		tax				tax 								; save size in X
.37e5	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.37e7	85 2a		sta $2a				sta 	temp0
.37e9	a5 36		lda $36				lda 	lowMemory+1
.37eb	85 2b		sta $2b				sta 	temp0+1
.37ed	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.37ef	85 2c		sta $2c				sta 	temp1
.37f1	85 2d		sta $2d				sta 	temp1+1
.37f3					_CAInitialiseArray:
.37f3	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.37f5	ad 1c 0d	lda $0d1c			lda 	varType 					; base type of array in A.
.37f8	29 fe		and #$fe			and 	#$FE
.37fa	20 0f 37	jsr $370f			jsr 	ZeroTemp0Y
.37fd	8a		txa				txa 								; add X to temp0, also updating lowMemory
.37fe	18		clc				clc
.37ff	65 2a		adc $2a				adc 	temp0
.3801	85 2a		sta $2a				sta 	temp0
.3803	85 35		sta $35				sta 	lowMemory
.3805	a5 2b		lda $2b				lda 	temp0+1
.3807	69 00		adc #$00			adc 	#0
.3809	85 2b		sta $2b				sta 	temp0+1
.380b	85 36		sta $36				sta 	lowMemory+1
.380d	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.380f	d0 02		bne $3813			bne 	_CAIANoCarry
.3811	e6 2d		inc $2d				inc 	temp1+1
.3813					_CAIANoCarry:
.3813	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3815	c5 2c		cmp $2c				cmp 	temp1
.3817	d0 da		bne $37f3			bne 	_CAInitialiseArray
.3819	a5 50		lda $50				lda 	esInt1
.381b	c5 2d		cmp $2d				cmp 	temp1+1
.381d	d0 d4		bne $37f3			bne 	_CAInitialiseArray
.381f	68		pla				pla
.3820	a8		tay				tay
.3821	60		rts				rts
.3822					_CAActualSize:
>3822	04 00						.byte 	VarISize,0
>3824	02 00						.byte 	VarSSize,0
>3826	06 00						.byte 	VarFSize,0
>3828	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3829					FindVariable:
.3829	98		tya				tya
.382a	48		pha				pha
.382b	98		tya				tya 								; point temp2 to the actual name
.382c	18		clc				clc 								; in memory of the variable being created
.382d	65 28		adc $28				adc 	codePtr
.382f	85 2e		sta $2e				sta 	temp2
.3831	a5 29		lda $29				lda 	codePtr+1
.3833	69 00		adc #$00			adc 	#0
.3835	85 2f		sta $2f				sta 	temp2+1
.3837	a0 00		ldy #$00			ldy 	#0
.3839	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.383b	85 2a		sta $2a				sta 	temp0
.383d	a5 7d		lda $7d				lda 	hashList+1
.383f	85 2b		sta $2b				sta 	temp0+1
.3841	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3843	b1 2a		lda ($2a),y			lda 	(temp0),y
.3845	f0 2c		beq $3873			beq 	_FVFail
.3847	aa		tax				tax
.3848	88		dey				dey		 							; get LSB
.3849	b1 2a		lda ($2a),y			lda 	(temp0),y
.384b	85 2a		sta $2a				sta 	temp0 						; update pointer.
.384d	86 2b		stx $2b				stx 	temp0+1
.384f	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3851	b1 2a		lda ($2a),y			lda 	(temp0),y
.3853	cd 1b 0d	cmp $0d1b			cmp 	varHash
.3856	d0 e9		bne $3841			bne 	_FVNext 					; if not, no point in checking the name.
.3858	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3859	b1 2a		lda ($2a),y			lda 	(temp0),y
.385b	85 2d		sta $2d				sta 	temp1+1
.385d	88		dey				dey
.385e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3860	85 2c		sta $2c				sta 	temp1
.3862	a0 00		ldy #$00			ldy 	#0
.3864					_FVCheck:
.3864	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3866	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3868	d0 d7		bne $3841			bne 	_FVNext		 				; fail if different.
.386a	c8		iny				iny
.386b	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.386d	90 f5		bcc $3864			bcc 	_FVCheck
.386f	68		pla				pla
.3870	a8		tay				tay
.3871	38		sec				sec
.3872	60		rts				rts
.3873					_FVFail:
.3873	68		pla				pla
.3874	a8		tay				tay
.3875	18		clc				clc
.3876	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3877					HashTableReset:
.3877	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3879	a9 00		lda #$00			lda 	#0
.387b					_HTRClear:
.387b	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.387e	ca		dex				dex
.387f	d0 fa		bne $387b			bne 	_HTRClear
.3881	60		rts				rts

;******  Return to file: variable/variable.asm

.3882					variableHandler:
.3882	7c 85 38	jmp ($3885,x)			jmp 	(variableVectors,x)
.3885					variableVectors:
>3885	94 35					.word AccessVariable       ; index 0
>3887	71 37					.word CreateArray          ; index 2
>3889	77 38					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.388b					section_end_variable:
.388b					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

>388b							.align 	256
.3900					programMemory:
>38ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3900					section_end_footer:

;******  End of listing
