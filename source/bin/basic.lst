
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Sat Apr 03 07:07:40 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=0					cputype = 0
=1					autorun=1
=0					coldstartnew=0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_TEXT                     = $90 ; text
=$91					TKW_PLOT                     = $91 ; plot
=$92					TKW_LINE                     = $92 ; line
=$93					TKW_PAINT                    = $93 ; paint
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	5d 44						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4c		lda #$4c			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 30 26	jsr $2630		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 30 26	jsr $2630		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 ce 3c	jsr $3cce		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 8b 3f	jsr $3f8b		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 14 48	jsr $4814		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 e5 4b	jsr $4be5		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 14 48	jsr $4814		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 ce 3c	jsr $3cce		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 ce 3c	jsr $3cce		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 ce 3c	jsr $3cce		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 ce 3c	jsr $3cce		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 e5 4b	jsr $4be5		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 ce 3c	jsr $3cce		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 30 26	jsr $2630		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 96 18	jmp ($1896,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c af 21	jmp $21af			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	dd 22					.word	Command_VPoke            ; $86 vpoke
>1888	e0 22					.word	Command_VDoke            ; $87 vdoke
>188a	b5 22					.word	Command_VLoad            ; $88 vload
>188c	c1 21					.word	CommandMode              ; $89 mode
>188e	7e 22					.word	CommandPalette           ; $8a palette
>1890	ac 1f					.word	CommandSprite            ; $8b sprite
>1892	d6 1d					.word	CommandClg               ; $8c clg
>1894	e2 1a					.word	Command_Rect             ; $8d rect
>1896	ea 1a					.word	Command_Frame            ; $8e frame
>1898	74 30					.word	Unimplemented            ; $8f draw
>189a	74 30					.word	Unimplemented            ; $90 text
>189c	cf 1a					.word	Command_Plot             ; $91 plot
>189e	a9 19					.word	Command_Line             ; $92 line
>18a0	83 19					.word	Command_Paint            ; $93 paint

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a2					Group3Vectors:
>18a2	29 23					.word	Command_VPeek            ; $86 vpeek(
>18a4	2c 23					.word	Command_VDeek            ; $87 vdeek(
>18a6	7f 21					.word	Sprite_GetX              ; $88 sprite.x(
>18a8	82 21					.word	Sprite_GetY              ; $89 sprite.y(
>18aa	ef 1e					.word	FunctionCollide          ; $8a hit(
>18ac	67 1e					.word	Unary_JoyX               ; $8b joy.x(
>18ae	6a 1e					.word	Unary_JoyY               ; $8c joy.y(
>18b0	a5 1e					.word	Unary_JButton            ; $8d joy.b(
>18b2	3a 1e					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b4					XEvaluateInteger:
.18b4	8a		txa				txa
.18b5	a2 0a		ldx #$0a		ldx	#10
.18b7	20 ce 3c	jsr $3cce		jsr	mainHandler
.18ba	aa		tax				tax
.18bb	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gEndStorage:
.18bc					GResetStorage:
.18bc	8a		txa				txa
.18bd	48		pha				pha
.18be	a2 15		ldx #$15			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18c0	a9 00		lda #$00			lda 	#0
.18c2					_GRSLoop:
.18c2	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c5	ca		dex				dex
.18c6	10 fa		bpl $18c2			bpl 	_GRSLoop
.18c8	68		pla				pla
.18c9	aa		tax				tax
.18ca	60		rts				rts
.18cb					GHandler:
.18cb	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18ce	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18d1	88		dey				dey 								; predecrement
.18d2					_GHLoopNext:
.18d2	c8		iny				iny									; advance one character
.18d3					_GHLoop:
.18d3	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18d5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d7	f0 f9		beq $18d2			beq 	_GHLoopNext
.18d9	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18db	f0 4c		beq $1929			beq 	_GHExit
.18dd	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18df	f0 48		beq $1929			beq 	_GHExit
.18e1	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e3	f0 33		beq $1918			beq 	_GHCallHandler 				; update post & call the handler
.18e5	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e7	f0 2f		beq $1918			beq 	_GHCallHandler
.18e9	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18eb	f0 10		beq $18fd			beq 	_GHCPairSkip
.18ed	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18ef					_GHCheckTokens:
.18ef	b1 28		lda ($28),y			lda 	(codePtr),y
.18f1	dd 2a 19	cmp $192a,x			cmp 	_GHTokenTable,x
.18f4	f0 0e		beq $1904			beq 	_GHFoundToken
.18f6	e8		inx				inx
.18f7	bd 2a 19	lda $192a,x			lda 	_GHTokenTable,x
.18fa	d0 f3		bne $18ef			bne 	_GHCheckTokens
.18fc	88		dey				dey
.18fd					_GHCPairSkip:
.18fd	c8		iny				iny
.18fe					_GHCPair:
.18fe	20 30 19	jsr $1930			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1901	4c d3 18	jmp $18d3			jmp 	_GHLoop
.1904					_GHFoundToken:
.1904	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1905	8a		txa				txa
.1906	48		pha				pha
.1907	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1909	a2 0c		ldx #$0c		ldx	#12
.190b	20 ce 3c	jsr $3cce		jsr	mainHandler
.190e	68		pla				pla
.190f	aa		tax				tax
.1910	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1912	9d 0b 0c	sta $0c0b,x			sta 	gModifiers,x 				; update the modifiers
.1915	4c d3 18	jmp $18d3			jmp 	_GHLoop 					; and loop back
.1918					_GHCallHandler:
.1918	c8		iny				iny 								; consume AT or TO.
.1919	20 30 19	jsr $1930			jsr 	GHMakeCurrent 				; update the coordinates.
.191c	98		tya				tya
.191d	48		pha				pha
.191e	20 26 19	jsr $1926			jsr 	_GHCallHandlerCode 			; call the handler code
.1921	68		pla				pla
.1922	a8		tay				tay
.1923	4c d3 18	jmp $18d3			jmp 	_GHLoop 					; and loop round.
.1926					_GHCallHandlerCode:
.1926	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.1929					_GHExit:
.1929	60		rts				rts
.192a					_GHTokenTable:
>192a	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>192f	00						.byte 	0
.1930					GHMakeCurrent:
.1930	8a		txa				txa
.1931	48		pha				pha
.1932	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1934	20 44 19	jsr $1944			jsr 	_GHMCDoIt
.1937	a2 02		ldx #$02		ldx	#2
.1939	20 ce 3c	jsr $3cce		jsr	mainHandler
.193c	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.193e	20 44 19	jsr $1944			jsr 	_GHMCDoIt
.1941	68		pla				pla
.1942	aa		tax				tax
.1943	60		rts				rts
.1944					_GHMCDoIt:
.1944	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1947	9d ea 0b	sta $0bea,x			sta 	gX1,x
.194a	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.194d	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.1950	8a		txa				txa
.1951	48		pha				pha
.1952	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1954	a2 0a		ldx #$0a		ldx	#10
.1956	20 ce 3c	jsr $3cce		jsr	mainHandler
.1959	68		pla				pla
.195a	aa		tax				tax
.195b	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.195d	dd 10 0c	cmp $0c10,x			cmp 	gdXLimit,x
.1960	a5 a0		lda $a0				lda 	esInt1
.1962	fd 11 0c	sbc $0c11,x			sbc 	gdXLimit+1,x
.1965	b0 17		bcs $197e			bcs 	_GMHCRange
.1967	a5 a8		lda $a8				lda 	esInt2
.1969	05 b0		ora $b0				ora 	esInt3
.196b	d0 11		bne $197e			bne 	_GMHCRange
.196d	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.196f	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.1972	9d ee 0b	sta $0bee,x			sta 	gX2,x
.1975	a5 a0		lda $a0				lda 	esInt1
.1977	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.197a	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.197d	60		rts				rts
.197e					_GMHCRange:
.197e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1980	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/imagedraw.asm

.1983					Command_Paint:
.1983	a9 8b		lda #$8b			lda 	#ImageHandler & $FF
.1985	a2 19		ldx #$19			ldx 	#ImageHandler >> 8
.1987	20 cb 18	jsr $18cb			jsr 	GHandler
.198a	60		rts				rts
.198b					ImageHandler:
.198b	a9 92		lda #$92			lda 	#TestImageAccess & $FF
.198d	a2 19		ldx #$19			ldx 	#TestImageAccess >> 8
.198f	4c 63 1b	jmp $1b63			jmp 	ImageRenderer
.1992					TestImageAccess:
.1992	e0 ff		cpx #$ff			cpx 	#255 						; get information
.1994	f0 0c		beq $19a2			beq 	_TIAGetInfo
.1996	8a		txa				txa 								; fake up a pattern using the X/Y coordinates.
.1997	4a		lsr a				lsr 	a
.1998	4a		lsr a				lsr 	a
.1999	85 32		sta $32				sta 	tempShort
.199b	98		tya				tya
.199c	4a		lsr a				lsr 	a
.199d	4a		lsr a				lsr 	a
.199e	18		clc				clc
.199f	65 32		adc $32				adc 	tempShort
.19a1	60		rts				rts
.19a2					_TIAGetInfo:
.19a2	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.19a4	a2 10		ldx #$10			ldx 	#16 						; pixel width
.19a6	a0 20		ldy #$20			ldy 	#32							; pixel height
.19a8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0bfc					gdySign:
>0bfc							.fill 	1
.19a9					Command_Line:
.19a9	a9 b1		lda #$b1			lda 	#LineHandler & $FF
.19ab	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.19ad	20 cb 18	jsr $18cb			jsr 	GHandler
.19b0	60		rts				rts
.19b1					LineHandler:
.19b1	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19b3	a0 04		ldy #$04			ldy 	#gX2-gX1
.19b5	20 5a 1c	jsr $1c5a			jsr 	CompareCoordsEq
.19b8	f0 09		beq $19c3			beq 	_LHRectCode
.19ba	a2 02		ldx #$02			ldx 	#gY1-gX1
.19bc	a0 06		ldy #$06			ldy 	#gY2-gX1
.19be	20 5a 1c	jsr $1c5a			jsr 	CompareCoordsEq
.19c1	d0 03		bne $19c6			bne 	_LHLineDrawer
.19c3					_LHRectCode:
.19c3	4c f6 1a	jmp $1af6			jmp 	RectHandler
.19c6					_LHLineDrawer:
.19c6	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19c8	a0 04		ldy #$04			ldy 	#gX2-gX1
.19ca	20 45 1c	jsr $1c45			jsr 	CompareCoords
.19cd	90 0a		bcc $19d9			bcc 	_LHNoSwap
.19cf	20 8d 1c	jsr $1c8d			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19d2	a2 02		ldx #$02			ldx 	#gY1-gX1
.19d4	a0 06		ldy #$06			ldy 	#gY2-gX1
.19d6	20 8d 1c	jsr $1c8d			jsr 	GSwapCoords
.19d9					_LHNoSwap:
.19d9	20 02 1a	jsr $1a02			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19dc	a0 00		ldy #$00			ldy 	#gX1-gX1
.19de	20 2f 1c	jsr $1c2f			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19e1	b0 15		bcs $19f8			bcs 	_LHExit 					; line off screen.
.19e3					_LHDrawLoop:
.19e3	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19e5	a0 04		ldy #$04			ldy 	#gX2-gX1
.19e7	20 5a 1c	jsr $1c5a			jsr 	CompareCoordsEq
.19ea	d0 0d		bne $19f9			bne 	_LHNextPixel
.19ec	a2 06		ldx #$06			ldx 	#gY2-gX1
.19ee	a0 06		ldy #$06			ldy 	#gY2-gX1
.19f0	20 5a 1c	jsr $1c5a			jsr 	CompareCoordsEq
.19f3	d0 04		bne $19f9			bne 	_LHNextPixel
.19f5	20 49 1d	jsr $1d49			jsr 	gdPlotInk 					; plot the last pixel.
.19f8					_LHExit:
.19f8	60		rts				rts
.19f9					_LHNextPixel:
.19f9	20 49 1d	jsr $1d49			jsr 	gdPlotInk 					; plot the pixel.
.19fc	20 56 1a	jsr $1a56			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19ff	4c e3 19	jmp $19e3			jmp  	_LHDrawLoop 				; and loop back if okay
.1a02					BresenhamInitialise:
.1a02	38		sec				sec
.1a03	ad ee 0b	lda $0bee			lda 	gX2
.1a06	ed ea 0b	sbc $0bea			sbc 	gX1
.1a09	8d f6 0b	sta $0bf6			sta 	gdX
.1a0c	ad ef 0b	lda $0bef			lda 	gX2+1
.1a0f	ed eb 0b	sbc $0beb			sbc 	gX1+1
.1a12	8d f7 0b	sta $0bf7			sta 	gdX+1
.1a15	38		sec				sec
.1a16	ad ec 0b	lda $0bec			lda 	gY1
.1a19	ed f0 0b	sbc $0bf0			sbc 	gY2
.1a1c	8d f8 0b	sta $0bf8			sta 	gdy
.1a1f	ad ed 0b	lda $0bed			lda 	gY1+1
.1a22	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.1a25	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a28	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a2b	8d fc 0b	sta $0bfc			sta 	gdysign
.1a2e	30 12		bmi $1a42			bmi 	_BINormal
.1a30	38		sec				sec
.1a31	a9 00		lda #$00			lda 	#0
.1a33	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a36	8d f8 0b	sta $0bf8			sta 	gdy
.1a39	a9 00		lda #$00			lda 	#0
.1a3b	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a3e	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a41	60		rts				rts
.1a42					_BINormal:
.1a42	18		clc				clc
.1a43	ad f6 0b	lda $0bf6			lda 	gdx
.1a46	6d f8 0b	adc $0bf8			adc 	gdy
.1a49	8d f2 0b	sta $0bf2			sta 	gError
.1a4c	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a4f	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a52	8d f3 0b	sta $0bf3			sta 	gError+1
.1a55	60		rts				rts
.1a56					BresenhamIteration:
.1a56	ad f2 0b	lda $0bf2			lda 	gError
.1a59	0a		asl a				asl 	a
.1a5a	8d f4 0b	sta $0bf4			sta 	g2Error
.1a5d	ad f3 0b	lda $0bf3			lda 	gError+1
.1a60	2a		rol a				rol 	a
.1a61	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a64	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a66	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a68	20 52 1c	jsr $1c52			jsr 	CompareCoordsSigned
.1a6b	30 03		bmi $1a70			bmi 	_BINoE2DY
.1a6d	20 7d 1a	jsr $1a7d			jsr 	BresenhamE2GEDY
.1a70					_BINoE2DY:
.1a70	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a72	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a74	20 52 1c	jsr $1c52			jsr 	CompareCoordsSigned
.1a77	30 03		bmi $1a7c			bmi 	_BINoDXE2
.1a79	20 9c 1a	jsr $1a9c			jsr 	BresenhamDXGEE2
.1a7c					_BINoDXE2:
.1a7c	60		rts				rts
.1a7d					BresenhamE2GEDY:
.1a7d	18		clc				clc
.1a7e	ad f2 0b	lda $0bf2			lda 	gError
.1a81	6d f8 0b	adc $0bf8			adc 	gdy
.1a84	8d f2 0b	sta $0bf2			sta 	gError
.1a87	ad f3 0b	lda $0bf3			lda 	gError+1
.1a8a	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a8d	8d f3 0b	sta $0bf3			sta 	gError+1
.1a90	ee ea 0b	inc $0bea			inc 	gX1
.1a93	d0 03		bne $1a98			bne 	_BE2Skip
.1a95	ee eb 0b	inc $0beb			inc 	gX1+1
.1a98					_BE2Skip:
.1a98	20 aa 1c	jsr $1caa			jsr 	gdMvRight
.1a9b	60		rts				rts
.1a9c					BresenhamDXGEE2:
.1a9c	18		clc				clc
.1a9d	ad f2 0b	lda $0bf2			lda 	gError
.1aa0	6d f6 0b	adc $0bf6			adc 	gdx
.1aa3	8d f2 0b	sta $0bf2			sta 	gError
.1aa6	ad f3 0b	lda $0bf3			lda 	gError+1
.1aa9	6d f7 0b	adc $0bf7			adc 	gdx+1
.1aac	8d f3 0b	sta $0bf3			sta 	gError+1
.1aaf	ad fc 0b	lda $0bfc			lda 	gdySign
.1ab2	10 0c		bpl $1ac0			bpl 	_BEDXInvertY
.1ab4	ee ec 0b	inc $0bec			inc 	gY1
.1ab7	d0 03		bne $1abc			bne 	_BEDXSkip
.1ab9	ee ed 0b	inc $0bed			inc 	gY1+1
.1abc					_BEDXSkip:
.1abc	20 e5 1c	jsr $1ce5			jsr 	gdMvDown
.1abf	60		rts				rts
.1ac0					_BEDXInvertY:
.1ac0	ad ec 0b	lda $0bec			lda 	gY1
.1ac3	d0 03		bne $1ac8			bne 	_BEDXSkip2
.1ac5	ce ed 0b	dec $0bed			dec 	gY1+1
.1ac8					_BEDXSkip2:
.1ac8	ce ec 0b	dec $0bec			dec 	gY1
.1acb	20 c0 1c	jsr $1cc0			jsr 	gdMvUp
.1ace	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1acf					Command_Plot:
.1acf	a9 d7		lda #$d7			lda 	#PlotHandler & $FF
.1ad1	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ad3	20 cb 18	jsr $18cb			jsr 	GHandler
.1ad6	60		rts				rts
.1ad7					PlotHandler:
.1ad7	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ad9	20 2f 1c	jsr $1c2f			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1adc	b0 03		bcs $1ae1			bcs 	_PHExit 					; off screen, return with CS.
.1ade	20 49 1d	jsr $1d49			jsr 	gdPlotInk 					; pixel in Ink.
.1ae1	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0bfd					frameFlag:
>0bfd							.fill 	1
.1ae2					Command_Rect:
.1ae2	a9 f6		lda #$f6			lda 	#RectHandler & $FF
.1ae4	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1ae6	20 cb 18	jsr $18cb			jsr 	GHandler
.1ae9	60		rts				rts
.1aea					Command_Frame:
.1aea	a9 f2		lda #$f2			lda 	#FrameHandler & $FF
.1aec	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1aee	20 cb 18	jsr $18cb			jsr 	GHandler
.1af1	60		rts				rts
.1af2					FrameHandler:
.1af2	a9 01		lda #$01			lda 	#1
.1af4	d0 02		bne $1af8			bne 	RectHandler+2
.1af6					RectHandler:
.1af6	a9 00		lda #$00			lda 	#0
.1af8	8d fd 0b	sta $0bfd			sta 	frameFlag
.1afb	20 69 1c	jsr $1c69			jsr 	BoxSort 					; sort so topleft/bottom right
.1afe	20 27 1b	jsr $1b27			jsr 	DrawBoxPart 				; solid first line
.1b01					_FHLoop:
.1b01	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1b03	a0 06		ldy #$06			ldy 	#gY2-gX1
.1b05	20 45 1c	jsr $1c45			jsr 	CompareCoords
.1b08	b0 19		bcs $1b23			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1b0a	ad fd 0b	lda $0bfd			lda 	frameFlag 					; identify solid or frame ?
.1b0d	f0 06		beq $1b15			beq 	_FHIsSolidRect
.1b0f	20 40 1b	jsr $1b40			jsr 	DrawBoxEnds
.1b12	4c 18 1b	jmp $1b18			jmp 	_FHNext
.1b15					_FHIsSolidRect:
.1b15	20 27 1b	jsr $1b27			jsr 	DrawBoxPart
.1b18					_FHNext:
.1b18	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1b1b	d0 e4		bne $1b01			bne 	_FHLoop
.1b1d	ee ed 0b	inc $0bed			inc 	gY1+1
.1b20	4c 01 1b	jmp $1b01			jmp 	_FHLoop
.1b23					_FHLastLine:
.1b23	20 27 1b	jsr $1b27			jsr 	DrawBoxPart 				; solid last line whatever
.1b26					_FHExit:
.1b26	60		rts				rts
.1b27					DrawBoxPart:
.1b27	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b29	20 2f 1c	jsr $1c2f			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b2c	38		sec				sec 								; calculate line length => temp0
.1b2d	ad ee 0b	lda $0bee			lda 	gX2
.1b30	ed ea 0b	sbc $0bea			sbc 	gX1
.1b33	48		pha				pha
.1b34	ad ef 0b	lda $0bef			lda 	gX2+1
.1b37	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b3a	aa		tax				tax
.1b3b	68		pla				pla 								; line length in XA.
.1b3c	20 58 1b	jsr $1b58			jsr 	DrawHorizontalLine
.1b3f	60		rts				rts
.1b40					DrawBoxEnds:
.1b40	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b42	20 2f 1c	jsr $1c2f			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b45	20 49 1d	jsr $1d49			jsr 	gdPlotInk 					; LH end.
.1b48	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b4b	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b4e	20 11 1e	jsr $1e11			jsr 	gdSetX
.1b51	20 07 1d	jsr $1d07			jsr		gdSetDrawPosition 			; update position.
.1b54	20 49 1d	jsr $1d49			jsr 	gdPlotInk 					; RH end.
.1b57	60		rts				rts
.1b58					DrawHorizontalLine:
.1b58	86 32		stx $32				stx 	tempShort
.1b5a	aa		tax				tax
.1b5b	a4 32		ldy $32				ldy 	tempShort
.1b5d	ad 0b 0c	lda $0c0b			lda 	gdInk
.1b60	4c 1f 1e	jmp $1e1f			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0bfe					RenderFunction:
>0bfe							.fill 	2
.0c00					RenderWidth:
>0c00							.fill 	1
.0c01					RenderHeight:
>0c01							.fill 	1
.0c02					RenderType:
>0c02							.fill 	1
.1b63					ImageRenderer:
.1b63	8e ff 0b	stx $0bff			stx 	RenderFunction+1
.1b66	8d fe 0b	sta $0bfe			sta 	RenderFunction
.1b69	a2 ff		ldx #$ff			ldx 	#255 						; get information.
.1b6b	20 2c 1c	jsr $1c2c			jsr 	CallRenderFunction
.1b6e	8d 02 0c	sta $0c02			sta 	RenderType 					; and save it.
.1b71	8e 00 0c	stx $0c00			stx 	RenderWidth
.1b74	8c 01 0c	sty $0c01			sty 	RenderHeight
.1b77	8a		txa				txa 								; check X coordinate
.1b78	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b7a	20 f3 1b	jsr $1bf3			jsr 	RenderCheckRange
.1b7d	ad 01 0c	lda $0c01			lda 	RenderHeight 				; check Y coordinate
.1b80	a2 02		ldx #$02			ldx 	#2
.1b82	20 f3 1b	jsr $1bf3			jsr 	RenderCheckRange
.1b85	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b87					_IRLoop1:
.1b87	ae 0d 0c	ldx $0c0d			ldx 	gdSize 						; number of times to do the row.
.1b8a					_IRLoop2:
.1b8a	20 97 1b	jsr $1b97			jsr 	RenderDrawRow 				; draw one row.
.1b8d	ca		dex				dex 								; scale # times.
.1b8e	d0 fa		bne $1b8a			bne 	_IRLoop2
.1b90	c8		iny				iny 								; next vertical row
.1b91	cc 01 0c	cpy $0c01			cpy 	RenderHeight 				; done the lot ?
.1b94	d0 f1		bne $1b87			bne 	_IRLoop1
.1b96	60		rts				rts
.1b97					RenderDrawRow:
.1b97	8a		txa				txa
.1b98	48		pha				pha
.1b99	98		tya				tya
.1b9a	48		pha				pha
.1b9b	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1b9d	20 2f 1c	jsr $1c2f			jsr 	SetupXY
.1ba0	68		pla				pla
.1ba1	a8		tay				tay
.1ba2	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1ba4					_RDRLoop1:
.1ba4	20 b8 1b	jsr $1bb8			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1ba7	e8		inx				inx
.1ba8	ec 00 0c	cpx $0c00			cpx 	RenderWidth 				; until done the whole lot.
.1bab	d0 f7		bne $1ba4			bne 	_RDRLoop1
.1bad	ee f0 0b	inc $0bf0			inc 	gY2 						; next line down
.1bb0	d0 03		bne $1bb5			bne 	_RDRNoCarry
.1bb2	ee f1 0b	inc $0bf1			inc 	gY2+1
.1bb5					_RDRNoCarry:
.1bb5	68		pla				pla
.1bb6	aa		tax				tax
.1bb7	60		rts				rts
.1bb8					RenderDrawPixelSet:
.1bb8	8a		txa				txa
.1bb9	48		pha				pha
.1bba	98		tya				tya
.1bbb	48		pha				pha
.1bbc	20 f2 1b	jsr $1bf2			jsr 	RenderFlipXY 				; flip positions as required.
.1bbf	20 d9 1b	jsr $1bd9			jsr 	RenderGetInk				; get colour to draw with.
.1bc2	ae 0d 0c	ldx $0c0d			ldx 	gdSize 						; X counts the size.
.1bc5					_RDPSLoop:
.1bc5	c9 ff		cmp #$ff			cmp 	#255 						; don't draw if $FF
.1bc7	f0 03		beq $1bcc			beq 	_RDPSNoDraw
.1bc9	20 4c 1d	jsr $1d4c			jsr 	gdPlotA 					; draw A otherwise
.1bcc					_RDPSNoDraw:
.1bcc	48		pha				pha 								; move right
.1bcd	20 aa 1c	jsr $1caa			jsr 	gdMvRight
.1bd0	68		pla				pla
.1bd1	ca		dex				dex
.1bd2	d0 f1		bne $1bc5			bne 	_RDPSLoop 					; do it size times.
.1bd4	68		pla				pla
.1bd5	a8		tay				tay
.1bd6	68		pla				pla
.1bd7	aa		tax				tax
.1bd8	60		rts				rts
.1bd9					RenderGetInk:
.1bd9	ad 02 0c	lda $0c02			lda 	RenderType 					; type, if 0 it's a bitmap
.1bdc	f0 04		beq $1be2			beq 	_RGIBitmap
.1bde	20 2c 1c	jsr $1c2c			jsr 	CallRenderFunction 			; ask the rendering function.
.1be1	60		rts				rts
.1be2					_RGIBitmap:
.1be2	20 2c 1c	jsr $1c2c			jsr 	CallRenderFunction 			; ask the rendering function.
.1be5	c9 00		cmp #$00			cmp 	#0
.1be7	f0 04		beq $1bed			beq 	_RGIUsePaper
.1be9	ad 0b 0c	lda $0c0b			lda 	gdInk
.1bec	60		rts				rts
.1bed					_RGIUsePaper:
.1bed	ad 0c 0c	lda $0c0c			lda 	gdPaper
.1bf0	60		rts				rts
>1bf1	db						.byte 	$DB
.1bf2					RenderFlipXY:
.1bf2	60		rts				rts
.1bf3					RenderCheckRange:
.1bf3	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1bf5	ac 0d 0c	ldy $0c0d			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1bf8	84 2a		sty $2a				sty 	temp0
.1bfa	f0 2b		beq $1c27			beq 	_RCRValue
.1bfc	a9 00		lda #$00			lda 	#0 							; total
.1bfe					_RCRMultiply:
.1bfe	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c00	90 05		bcc $1c07			bcc 	_RCRNoAdd 					; not adding this time.
.1c02	18		clc				clc
.1c03	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c05	b0 20		bcs $1c27			bcs 	_RCRValue 					; overflow
.1c07					_RCRNoAdd:
.1c07	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c09	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c0b	d0 f1		bne $1bfe			bne 	_RCRMultiply
.1c0d	18		clc				clc 								; add to x2 or y2, store in temp0
.1c0e	7d ee 0b	adc $0bee,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c11	85 2a		sta $2a				sta 	temp0
.1c13	bd ef 0b	lda $0bef,x			lda 	gX2+1,x
.1c16	69 00		adc #$00			adc 	#0
.1c18	85 2b		sta $2b				sta 	temp0+1
.1c1a	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c1c	dd 10 0c	cmp $0c10,x			cmp 	gdXLimit,x
.1c1f	a5 2b		lda $2b				lda 	temp0+1
.1c21	fd 11 0c	sbc $0c11,x			sbc 	gdXLimit+1,x
.1c24	b0 01		bcs $1c27			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c26	60		rts				rts
.1c27					_RCRValue:
.1c27	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c29	20 18 15	jsr $1518		jsr	errorHandler
.1c2c					CallRenderFunction:
.1c2c	6c fe 0b	jmp ($0bfe)			jmp 	(RenderFunction)

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c2f					SetupXY:
.1c2f	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1c32	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1c35	20 11 1e	jsr $1e11			jsr 	gdSetX
.1c38	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1c3b	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1c3e	20 18 1e	jsr $1e18			jsr 	gdSetY
.1c41	20 07 1d	jsr $1d07			jsr 	gdSetDrawPosition
.1c44	60		rts				rts
.1c45					CompareCoords:
.1c45	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c48	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c4b	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c4e	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1c51	60		rts				rts
.1c52					CompareCoordsSigned:
.1c52	20 45 1c	jsr $1c45			jsr 	CompareCoords
.1c55	50 02		bvc $1c59			bvc 	_CCSExit
.1c57	49 80		eor #$80			eor 	#$80
.1c59					_CCSExit:
.1c59	60		rts				rts
.1c5a					CompareCoordsEq:
.1c5a	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c5d	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c60	d0 06		bne $1c68			bne 	_CCEExit
.1c62	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c65	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1c68					_CCEExit:
.1c68	60		rts				rts
.1c69					BoxSort:
.1c69	a2 00		ldx #$00			ldx 	#gx1-gx1
.1c6b	a0 04		ldy #$04			ldy 	#gx2-gx1
.1c6d	20 7e 1c	jsr $1c7e			jsr 	GCompareCoords
.1c70	20 8b 1c	jsr $1c8b			jsr 	GSortMinMaxCoords
.1c73	a2 02		ldx #$02			ldx 	#gy1-gx1
.1c75	a0 06		ldy #$06			ldy 	#gy2-gx1
.1c77	20 7e 1c	jsr $1c7e			jsr 	GCompareCoords
.1c7a	20 8b 1c	jsr $1c8b			jsr 	GSortMinMaxCoords
.1c7d	60		rts				rts
.1c7e					GCompareCoords:
.1c7e	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1c81	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1c84	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1c87	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1c8a	60		rts				rts
.1c8b					GSortMinMaxCoords:
.1c8b	90 1c		bcc $1ca9			bcc 	GSMMCExit
.1c8d					GSwapCoords:
.1c8d	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1c90	48		pha				pha
.1c91	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1c94	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1c97	68		pla				pla
.1c98	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1c9b	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1c9e	48		pha				pha
.1c9f	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1ca2	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1ca5	68		pla				pla
.1ca6	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1ca9					GSMMCExit:
.1ca9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1caa					gdMvRight:
.1caa	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1cad	d0 08		bne $1cb7			bne 	_gdMR0
.1caf	ee 21 9f	inc $9f21			inc 	$9F21
.1cb2	d0 03		bne $1cb7			bne 	_gdMR0
.1cb4	ee 22 9f	inc $9f22			inc 	$9F22
.1cb7					_gdMR0:
.1cb7	ee 07 0c	inc $0c07			inc 	gdXPos
.1cba	d0 03		bne $1cbf			bne 	_gdMR1
.1cbc	ee 08 0c	inc $0c08			inc 	gdXPos+1
.1cbf					_gdMR1:
.1cbf	60		rts				rts
.1cc0					gdMvUp:
.1cc0	ad 09 0c	lda $0c09			lda 	gdYPos 						; decrement Y Pos
.1cc3	d0 03		bne $1cc8			bne 	_gdMU1
.1cc5	ce 0a 0c	dec $0c0a			dec 	gdYPos+1
.1cc8	ce 09 0c	dec $0c09	_gdMU1:	dec 	gdYPos
.1ccb	38		sec				sec 								; adjust position by -320
.1ccc	ad 20 9f	lda $9f20			lda 	$9F20
.1ccf	e9 40		sbc #$40			sbc 	#64
.1cd1	8d 20 9f	sta $9f20			sta 	$9F20
.1cd4	ad 21 9f	lda $9f21			lda 	$9F21
.1cd7	e9 01		sbc #$01			sbc 	#1
.1cd9	8d 21 9f	sta $9f21			sta 	$9F21
.1cdc	ad 22 9f	lda $9f22			lda 	$9F22
.1cdf	e9 00		sbc #$00			sbc 	#0
.1ce1	8d 22 9f	sta $9f22			sta 	$9F22
.1ce4	60		rts				rts
.1ce5					gdMvDown:
.1ce5	ee 09 0c	inc $0c09			inc 	gdYPos 						; decrement Y Pos
.1ce8	d0 03		bne $1ced			bne 	_gdMU1
.1cea	ee 0a 0c	inc $0c0a			inc 	gdYPos+1
.1ced					_gdMU1:
.1ced	18		clc				clc 								; adjust position by -320
.1cee	ad 20 9f	lda $9f20			lda 	$9F20
.1cf1	69 40		adc #$40			adc 	#64
.1cf3	8d 20 9f	sta $9f20			sta 	$9F20
.1cf6	ad 21 9f	lda $9f21			lda 	$9F21
.1cf9	69 01		adc #$01			adc 	#1
.1cfb	8d 21 9f	sta $9f21			sta 	$9F21
.1cfe	ad 22 9f	lda $9f22			lda 	$9F22
.1d01	69 00		adc #$00			adc 	#0
.1d03	8d 22 9f	sta $9f22			sta 	$9F22
.1d06	60		rts				rts
.1d07					gdSetDrawPosition:
.1d07	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d09	85 2a		sta $2a				sta 	temp0
.1d0b	ad 09 0c	lda $0c09			lda 	gdYPos
.1d0e	85 2b		sta $2b				sta 	temp0+1
.1d10	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d12	66 2a		ror $2a				ror 	temp0
.1d14	46 2b		lsr $2b				lsr 	temp0+1
.1d16	66 2a		ror $2a				ror 	temp0
.1d18	ad 09 0c	lda $0c09			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d1b	18		clc				clc
.1d1c	65 2b		adc $2b				adc 	temp0+1
.1d1e	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d20	18		clc				clc
.1d21	a5 2a		lda $2a				lda 	temp0
.1d23	6d 07 0c	adc $0c07			adc 	gdXPos
.1d26	85 2a		sta $2a				sta 	temp0
.1d28	a5 2b		lda $2b				lda 	temp0+1
.1d2a	6d 08 0c	adc $0c08			adc 	gdXPos+1
.1d2d	85 2b		sta $2b				sta 	temp0+1
.1d2f	18		clc				clc
.1d30	ad 04 0c	lda $0c04			lda 	gdBitmapAddress
.1d33	65 2a		adc $2a				adc 	temp0
.1d35	8d 20 9f	sta $9f20			sta 	$9F20
.1d38	ad 05 0c	lda $0c05			lda 	gdBitmapAddress+1
.1d3b	65 2b		adc $2b				adc 	temp0+1
.1d3d	8d 21 9f	sta $9f21			sta 	$9F21
.1d40	ad 06 0c	lda $0c06			lda 	gdBitmapAddress+2
.1d43	69 00		adc #$00			adc 	#0
.1d45	8d 22 9f	sta $9f22			sta 	$9F22
.1d48	60		rts				rts
.1d49					gdPlotInk:
.1d49	ad 0b 0c	lda $0c0b			lda 	gdInk
.1d4c					gdPlotA:
.1d4c	8d 23 9f	sta $9f23			sta 	$9F23
.1d4f	60		rts				rts
.1d50					gdPlotPaper:
.1d50	ad 0c 0c	lda $0c0c			lda 	gdPaper
.1d53	c9 ff		cmp #$ff			cmp 	#$FF
.1d55	f0 03		beq $1d5a			beq 	_gdPPSkip
.1d57	8d 23 9f	sta $9f23			sta 	$9F23
.1d5a					_gdPPSkip:
.1d5a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c03					gdEnabled:
>0c03							.fill 	1
.0c04					gdBitmapAddress:
>0c04							.fill 	3
.0c07					gdXPos:
>0c07							.fill 	2
.0c09					gdYPos:
>0c09							.fill 	2
.0c0b					gModifiers:
.0c0b					gdInk:
>0c0b							.fill 	1
.0c0c					gdPaper:
>0c0c							.fill 	1
.0c0d					gdSize:
>0c0d							.fill 	1
.0c0e					gdImage:
>0c0e							.fill 	1
.0c0f					gdFlip:
>0c0f							.fill 	1
.0c10					gdXLimit:
>0c10							.fill 	2
.0c12					gdYLimit:
>0c12							.fill 	2
.1d5b					gdModeChanged:
.1d5b	8a		txa				txa
.1d5c	48		pha				pha
.1d5d	98		tya				tya
.1d5e	48		pha				pha
.1d5f	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d61	8d 03 0c	sta $0c03			sta 	gdEnabled
.1d64	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1d67	c9 40		cmp #$40			cmp 	#$40
.1d69	d0 1f		bne $1d8a			bne 	_gdExit
.1d6b	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1d6e	c9 40		cmp #$40			cmp 	#$40
.1d70	d0 18		bne $1d8a			bne 	_gdExit
.1d72	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1d75	0a		asl a				asl 	a 							;
.1d76	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1d77	10 09		bpl $1d82			bpl 	_gdNotLayer1
.1d79	48		pha				pha 								; save A
.1d7a	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1d7c	20 a5 1d	jsr $1da5			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d7f	68		pla				pla 								; restore A
.1d80	b0 08		bcs $1d8a			bcs 	_gdExit 					; if successful then exit
.1d82					_gdNotLayer1:
.1d82	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1d83	10 05		bpl $1d8a			bpl 	_gdExit 					; if not enabled, exit
.1d85	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1d87	20 a5 1d	jsr $1da5			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d8a					_gdExit:
.1d8a	a9 00		lda #$00			lda 	#0 							; initialise modifiers.
.1d8c	8d 0c 0c	sta $0c0c			sta 	gdPaper
.1d8f	8d 0f 0c	sta $0c0f			sta 	gdFlip
.1d92	8d 0e 0c	sta $0c0e			sta 	gdImage
.1d95	a9 01		lda #$01			lda 	#1
.1d97	8d 0b 0c	sta $0c0b			sta 	gdInk
.1d9a	8d 0d 0c	sta $0c0d			sta 	gdSize
.1d9d	20 ed 1d	jsr $1ded			jsr 	gdClearGraphics 			; clear graphics display.
.1da0	68		pla				pla
.1da1	a8		tay				tay
.1da2	68		pla				pla
.1da3	aa		tax				tax
.1da4	60		rts				rts
.1da5					gdCheckBitmap:
.1da5	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1da8	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1daa	d0 28		bne $1dd4			bne 	_gdCBFail
.1dac	ee 03 0c	inc $0c03			inc 	gdEnabled 					; set the enabled flag to non zero.
.1daf	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1db2	0a		asl a				asl 	a
.1db3	8d 05 0c	sta $0c05			sta 	gdBitmapAddress+1
.1db6	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1db8	8d 06 0c	sta $0c06			sta 	gdBitmapAddress+2
.1dbb	a9 00		lda #$00			lda 	#$00
.1dbd	8d 04 0c	sta $0c04			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dc0	a9 40		lda #$40			lda 	#(320) & $FF
.1dc2	8d 10 0c	sta $0c10			sta 	gdXLimit
.1dc5	a9 01		lda #$01			lda 	#(320) >> 8
.1dc7	8d 11 0c	sta $0c11			sta 	1+(gdXLimit)
.1dca	a9 c8		lda #$c8			lda 	#(200) & $FF
.1dcc	8d 12 0c	sta $0c12			sta 	gdYLimit
.1dcf	a9 00		lda #$00			lda 	#(200) >> 8
.1dd1	8d 13 0c	sta $0c13			sta 	1+(gdYLimit)
.1dd4					_gdCBFail:
.1dd4	18		clc				clc
.1dd5	60		rts				rts
.1dd6					CommandClg:
.1dd6	b1 28		lda ($28),y			lda 	(codePtr),y
.1dd8	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1dda	d0 0d		bne $1de9			bne 	_CCLClear
.1ddc	c8		iny				iny
.1ddd	a9 00		lda #$00			lda 	#0
.1ddf	a2 0c		ldx #$0c		ldx	#12
.1de1	20 ce 3c	jsr $3cce		jsr	mainHandler
.1de4	a5 98		lda $98				lda 	esInt0
.1de6	8d 0c 0c	sta $0c0c			sta 	gdPaper
.1de9					_CCLClear:
.1de9	20 ed 1d	jsr $1ded			jsr 	gdClearGraphics
.1dec	60		rts				rts
.1ded					gdClearGraphics:
.1ded	8a		txa				txa
.1dee	48		pha				pha
.1def	98		tya				tya
.1df0	48		pha				pha
.1df1	ad 03 0c	lda $0c03			lda 	gdEnabled 					; screen enabled
.1df4	f0 16		beq $1e0c			beq 	_gdCGExit
.1df6	a9 00		lda #$00			lda 	#0 							; home cursor
.1df8	aa		tax				tax
.1df9	20 11 1e	jsr $1e11			jsr 	gdSetX
.1dfc	20 18 1e	jsr $1e18			jsr 	gdSetY
.1dff	20 07 1d	jsr $1d07			jsr 	gdSetDrawPosition 			; set the draw position.
.1e02	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e04	a2 00		ldx #$00			ldx 	#0
.1e06	ad 0c 0c	lda $0c0c			lda 	gdPaper
.1e09	20 1f 1e	jsr $1e1f			jsr 	gdOptHorizontalWriter
.1e0c					_gdCGExit:
.1e0c	68		pla				pla
.1e0d	a8		tay				tay
.1e0e	68		pla				pla
.1e0f	aa		tax				tax
.1e10	60		rts				rts
.1e11					gdSetX:
.1e11	8d 07 0c	sta $0c07			sta 	gdXPos
.1e14	8e 08 0c	stx $0c08			stx 	gdXPos+1
.1e17	60		rts				rts
.1e18					gdSetY:
.1e18	8d 09 0c	sta $0c09			sta 	gdYPos
.1e1b	8e 0a 0c	stx $0c0a			stx 	gdYPos+1
.1e1e	60		rts				rts
.1e1f					gdOptHorizontalWriter:
.1e1f	48		pha				pha
.1e20	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e23	09 10		ora #$10			ora 	#$10
.1e25	8d 22 9f	sta $9f22			sta 	$9F22
.1e28	68		pla				pla
.1e29					_gdOLoop:
.1e29	8d 23 9f	sta $9f23			sta 	$9F23
.1e2c	e0 00		cpx #$00			cpx 	#0
.1e2e	d0 05		bne $1e35			bne 	_gdNoBorrow
.1e30	c0 00		cpy #$00			cpy 	#0
.1e32	f0 05		beq $1e39			beq 	_gdExit
.1e34	88		dey				dey
.1e35					_gdNoBorrow:
.1e35	ca		dex				dex
.1e36	4c 29 1e	jmp $1e29			jmp 	_gdOLoop
.1e39					_gdExit:
.1e39	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e3a					Unary_Clock:
.1e3a	a2 0c		ldx #$0c		ldx	#12
.1e3c	20 ce 3c	jsr $3cce		jsr	mainHandler
.1e3f	48		pha				pha 								; save stack pos
.1e40	a2 04		ldx #$04		ldx	#4
.1e42	20 ce 3c	jsr $3cce		jsr	mainHandler
.1e45	98		tya				tya
.1e46	48		pha				pha
.1e47	20 50 ff	jsr $ff50			jsr 	$FF50
.1e4a	68		pla				pla
.1e4b	a8		tay				tay
.1e4c	68		pla				pla 								; restore, repush, put into X to read offset
.1e4d	48		pha				pha
.1e4e	aa		tax				tax
.1e4f	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e51	c9 06		cmp #$06			cmp 	#6
.1e53	b0 0d		bcs $1e62			bcs 	_UCValue
.1e55	aa		tax				tax 								; index in X and read RTC.
.1e56	b5 02		lda $02,x			lda 	2,x
.1e58	85 32		sta $32				sta 	tempshort
.1e5a	68		pla				pla 								; restore number stack index.
.1e5b	aa		tax				tax
.1e5c	a5 32		lda $32				lda 	tempShort
.1e5e	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e60	8a		txa				txa
.1e61	60		rts				rts
.1e62					_UCValue:
.1e62	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e64	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e67					Unary_JoyX:
.1e67	38		sec				sec
.1e68	b0 01		bcs $1e6b			bcs 	JoystickRead
.1e6a					Unary_JoyY:
.1e6a	18		clc				clc
.1e6b					JoystickRead:
.1e6b	48		pha				pha 								; save stack position
.1e6c	08		php				php 								; save test flag.
.1e6d	a2 04		ldx #$04		ldx	#4
.1e6f	20 ce 3c	jsr $3cce		jsr	mainHandler
.1e72	20 cc 1e	jsr $1ecc			jsr 	ReadJoystick 				; read it.
.1e75	28		plp				plp
.1e76	b0 02		bcs $1e7a			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e78	4a		lsr a				lsr 	a
.1e79	4a		lsr a				lsr 	a
.1e7a					_JRNoShift:
.1e7a	29 03		and #$03			and 	#3 							; isolate the test bits.
.1e7c	f0 0d		beq $1e8b			beq 	JoyReturnA 					; if nothing pressed, return A.
.1e7e	c9 03		cmp #$03			cmp 	#3
.1e80	f0 07		beq $1e89			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1e82	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1e83	b0 16		bcs $1e9b			bcs 	JoyReturn1
.1e85					JoyReturnTrue:
.1e85	a9 ff		lda #$ff			lda 	#$FF
.1e87	d0 02		bne $1e8b			bne 	JoyReturnA
.1e89					JoyReturnFalse:
.1e89	a9 00		lda #$00			lda 	#0
.1e8b					JoyReturnA:
.1e8b	85 32		sta $32				sta 	tempShort 					; return A
.1e8d	68		pla				pla
.1e8e	aa		tax				tax
.1e8f	a5 32		lda $32				lda 	tempShort
.1e91	95 98		sta $98,x			sta 	esInt0,x
.1e93					JoyReturn13:
.1e93	95 a0		sta $a0,x			sta 	esInt1,x
.1e95	95 a8		sta $a8,x			sta 	esInt2,x
.1e97	95 b0		sta $b0,x			sta 	esInt3,x
.1e99	8a		txa				txa 								; return NSP in A
.1e9a	60		rts				rts
.1e9b					JoyReturn1:
.1e9b	68		pla				pla
.1e9c	aa		tax				tax
.1e9d	a9 01		lda #$01			lda 	#1
.1e9f	95 98		sta $98,x			sta 	esInt0,x
.1ea1	a9 00		lda #$00			lda 	#0
.1ea3	f0 ee		beq $1e93			beq 	JoyReturn13
.1ea5					Unary_JButton:
.1ea5	48		pha				pha 								; save X on stack, put in X
.1ea6	a2 0c		ldx #$0c		ldx	#12
.1ea8	20 ce 3c	jsr $3cce		jsr	mainHandler
.1eab	aa		tax				tax 								; get value to check, push on stack.
.1eac	b5 98		lda $98,x			lda 	esInt0,x
.1eae	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1eb0	b0 15		bcs $1ec7			bcs 	_UJBadValue
.1eb2	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1eb4	48		pha				pha 								; save that shift count on the stack.
.1eb5	a2 04		ldx #$04		ldx	#4
.1eb7	20 ce 3c	jsr $3cce		jsr	mainHandler
.1eba	68		pla				pla
.1ebb	aa		tax				tax
.1ebc	20 cc 1e	jsr $1ecc			jsr 	ReadJoystick 				; joystick read
.1ebf					_UJShift:
.1ebf	4a		lsr a				lsr 	a
.1ec0	ca		dex				dex
.1ec1	d0 fc		bne $1ebf			bne 	_UJShift
.1ec3	b0 c0		bcs $1e85			bcs 	JoyReturnTrue
.1ec5	90 c2		bcc $1e89			bcc 	JoyReturnFalse
.1ec7					_UJBadValue:
.1ec7	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ec9	20 18 15	jsr $1518		jsr	errorHandler
.1ecc					ReadJoystick:
.1ecc	8a		txa				txa
.1ecd	48		pha				pha
.1ece	98		tya				tya
.1ecf	48		pha				pha
.1ed0	a9 00		lda #$00			lda 	#0
.1ed2	20 56 ff	jsr $ff56			jsr 	$FF56
.1ed5	c0 00		cpy #$00			cpy 	#0
.1ed7	d0 11		bne $1eea			bne 	_RJError
.1ed9	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1edb	d0 02		bne $1edf			bne 	_RJNoBug
.1edd	a9 ff		lda #$ff			lda 	#$FF
.1edf					_RJNoBug:
.1edf	85 32		sta $32				sta 	tempShort
.1ee1	68		pla				pla
.1ee2	a8		tay				tay
.1ee3	68		pla				pla
.1ee4	aa		tax				tax
.1ee5	a5 32		lda $32				lda 	tempShort
.1ee7	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1ee9	60		rts				rts
.1eea					_RJError:
.1eea	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1eec	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c14					hitSprite1:
>0c14							.fill 	1 							; this won't work ... if you nest HIT() which
.0c15					hitSprite2:
>0c15							.fill 	1
.0c16					hitRange:
>0c16							.fill 	1
.1eef					FunctionCollide:
.1eef	48		pha				pha 								; save and put index into X
.1ef0	aa		tax				tax
.1ef1	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1ef3	8d 16 0c	sta $0c16			sta 	hitRange
.1ef6	20 9b 1f	jsr $1f9b			jsr 	_FCGetSpriteID
.1ef9	8d 14 0c	sta $0c14			sta 	hitSprite1
.1efc	8a		txa				txa
.1efd	48		pha				pha
.1efe	a2 02		ldx #$02		ldx	#2
.1f00	20 ce 3c	jsr $3cce		jsr	mainHandler
.1f03	68		pla				pla
.1f04	aa		tax				tax
.1f05	20 9b 1f	jsr $1f9b			jsr 	_FCGetSpriteID
.1f08	8d 15 0c	sta $0c15			sta 	hitSprite2
.1f0b	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1f0d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f0f	f0 13		beq $1f24			beq 	_FCParam2
.1f11	8a		txa				txa
.1f12	48		pha				pha
.1f13	a2 02		ldx #$02		ldx	#2
.1f15	20 ce 3c	jsr $3cce		jsr	mainHandler
.1f18	68		pla				pla
.1f19	a2 0c		ldx #$0c		ldx	#12
.1f1b	20 ce 3c	jsr $3cce		jsr	mainHandler
.1f1e	aa		tax				tax
.1f1f	b5 98		lda $98,x			lda 	esInt0,x
.1f21	8d 16 0c	sta $0c16			sta 	hitRange
.1f24					_FCParam2:
.1f24	a2 04		ldx #$04		ldx	#4
.1f26	20 ce 3c	jsr $3cce		jsr	mainHandler
.1f29	68		pla				pla 								; set X to point to the stack again.
.1f2a	48		pha				pha
.1f2b	aa		tax				tax
.1f2c	98		tya				tya
.1f2d	48		pha				pha
.1f2e	18		clc				clc 								; do it with the horizontal values.
.1f2f	20 51 1f	jsr $1f51			jsr 	_FCCheck
.1f32	90 0a		bcc $1f3e			bcc 	_FCFail
.1f34	38		sec				sec 								; do it with the vertical values.
.1f35	20 51 1f	jsr $1f51			jsr 	_FCCheck
.1f38	90 04		bcc $1f3e			bcc 	_FCFail
.1f3a	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1f3c	d0 02		bne $1f40			bne 	_FCReturnA
.1f3e					_FCFail:
.1f3e	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1f40					_FCReturnA:
.1f40	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1f42	68		pla				pla
.1f43	a8		tay				tay
.1f44	68		pla				pla 								; restore stack, return result and exit.
.1f45	aa		tax				tax
.1f46	a5 32		lda $32				lda 	tempShort
.1f48	95 98		sta $98,x			sta 	esInt0,x
.1f4a	95 a0		sta $a0,x			sta 	esInt1,x
.1f4c	95 a8		sta $a8,x			sta 	esInt2,x
.1f4e	95 b0		sta $b0,x			sta 	esInt3,x
.1f50	60		rts				rts
.1f51					_FCCheck:
.1f51	08		php				php 								; save the H/V flag twice
.1f52	08		php				php
.1f53	ad 14 0c	lda $0c14			lda 	hitSprite1 					; select sprite 1 and read its location
.1f56	20 d9 20	jsr $20d9			jsr 	SelectSpriteA 				; into X
.1f59	28		plp				plp
.1f5a	20 3b 21	jsr $213b			jsr 	SpriteReadCoordinate
.1f5d	ad 15 0c	lda $0c15			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1f60	20 d9 20	jsr $20d9			jsr 	SelectSpriteA
.1f63	e8		inx				inx
.1f64	28		plp				plp
.1f65	20 3b 21	jsr $213b			jsr 	SpriteReadCoordinate
.1f68	ca		dex				dex
.1f69	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1f6a	b5 98		lda $98,x			lda 	esInt0,x
.1f6c	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1f6e	85 2a		sta $2a				sta 	temp0
.1f70	b5 a0		lda $a0,x			lda 	esInt1,x
.1f72	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1f74	85 2b		sta $2b				sta 	temp0+1
.1f76	10 0d		bpl $1f85			bpl 	_FCCIsPositive
.1f78	38		sec				sec 								; if -ve calculate |difference|
.1f79	a9 00		lda #$00			lda 	#0
.1f7b	e5 2a		sbc $2a				sbc 	temp0
.1f7d	85 2a		sta $2a				sta 	temp0
.1f7f	a9 00		lda #$00			lda 	#0
.1f81	e5 2b		sbc $2b				sbc 	temp0+1
.1f83	85 2b		sta $2b				sta 	temp0+1
.1f85					_FCCIsPositive:
.1f85	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1f87	d0 10		bne $1f99			bne 	_FCCFail
.1f89	18		clc				clc 								; work out required min distance which is
.1f8a	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1f8c	75 b1		adc $b1,x			adc 	esInt3+1,x
.1f8e	ac 16 0c	ldy $0c16			ldy 	hitRange 					; get the hit range
.1f91	f0 01		beq $1f94			beq 	_FCCNoSetRange 				; override if non zero.
.1f93	98		tya				tya
.1f94					_FCCNoSetRange:
.1f94	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1f96	f0 01		beq $1f99			beq 	_FCCFail
.1f98	60		rts				rts
.1f99					_FCCFail:
.1f99	18		clc				clc
.1f9a	60		rts				rts
.1f9b					_FCGetSpriteID:
.1f9b	8a		txa				txa
.1f9c	a2 0c		ldx #$0c		ldx	#12
.1f9e	20 ce 3c	jsr $3cce		jsr	mainHandler
.1fa1	aa		tax				tax
.1fa2	b5 98		lda $98,x			lda 	esInt0,x
.1fa4	30 01		bmi $1fa7			bmi 	_FCGSValue
.1fa6	60		rts				rts
.1fa7					_FCGSValue:
.1fa7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fa9	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c17					currSprite:
>0c17							.fill 	2
.1fac					CommandSprite:
.1fac	20 ae 20	jsr $20ae			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1faf	d0 0d		bne $1fbe			bne 	_CSCheckClear
.1fb1	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1fb4	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1fb6	90 02		bcc $1fba			bcc 	_CSNotOn 					; if CS turn on, so set it
.1fb8	09 40		ora #$40			ora 	#$40
.1fba					_CSNotOn:
.1fba	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1fbd	60		rts				rts
.1fbe					_CSCheckClear:
.1fbe	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1fc0	8d 18 0c	sta $0c18			sta 	currSprite+1
.1fc3	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1fc5	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1fc7	d0 05		bne $1fce			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1fc9	20 bf 20	jsr $20bf			jsr 	CSClearSprites 				; clear all the sprites
.1fcc	c8		iny				iny 								; consume CLEAR token and exit.
.1fcd	60		rts				rts
.1fce					_CSCommandLoop:
.1fce	20 ae 20	jsr $20ae			jsr 	CSCheckOnOff 				; check sprite on/off
.1fd1	f0 2c		beq $1fff			beq 	_CSSetVisibility
.1fd3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1fd5	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1fd7	f0 25		beq $1ffe			beq 	_CSExit
.1fd9	c8		iny				iny									; consume it
.1fda	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1fdc	f0 20		beq $1ffe			beq 	_CSExit
.1fde	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1fe0	f0 ec		beq $1fce			beq 	_CSCommandLoop
.1fe2	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1fe4	f0 69		beq $204f			beq 	_CSSetImage
.1fe6	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1fe8	f0 2b		beq $2015			beq 	_CSSetFlip
.1fea	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1fec	f0 46		beq $2034			beq 	_CSSetPos
.1fee	88		dey				dey 								; unpick DEY
.1fef	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1ff1	a2 0c		ldx #$0c		ldx	#12
.1ff3	20 ce 3c	jsr $3cce		jsr	mainHandler
.1ff6	a5 98		lda $98				lda 	esInt0
.1ff8	20 d9 20	jsr $20d9			jsr 	SelectSpriteA
.1ffb	4c ce 1f	jmp $1fce			jmp 	_CSCommandLoop
.1ffe					_CSExit:
.1ffe	60		rts				rts
.1fff					_CSSetVisibility:
.1fff	08		php				php 								; save carry
.2000	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.2002	20 95 20	jsr $2095			jsr 	SpriteSetTarget
.2005	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2008	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.200a	28		plp				plp
.200b	90 02		bcc $200f			bcc 	_CSSetOff 					; check if carry was set
.200d	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.200f					_CSSetOff:
.200f	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.2012	4c ce 1f	jmp $1fce			jmp 	_CSCommandLoop
.2015					_CSSetFlip:
.2015	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2017	a2 0c		ldx #$0c		ldx	#12
.2019	20 ce 3c	jsr $3cce		jsr	mainHandler
.201c	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.201e	20 95 20	jsr $2095			jsr 	SpriteSetTarget
.2021	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.2023	29 03		and #$03			and 	#3
.2025	85 2a		sta $2a				sta 	temp0
.2027	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.202a	29 fc		and #$fc			and 	#$FC
.202c	05 2a		ora $2a				ora 	temp0
.202e	8d 23 9f	sta $9f23			sta 	$9F23
.2031	4c ce 1f	jmp $1fce			jmp 	_CSCommandLoop
.2034					_CSSetPos:
.2034	a9 00		lda #$00			lda 	#0 							; X now at level 0
.2036	a2 0a		ldx #$0a		ldx	#10
.2038	20 ce 3c	jsr $3cce		jsr	mainHandler
.203b	a2 02		ldx #$02		ldx	#2
.203d	20 ce 3c	jsr $3cce		jsr	mainHandler
.2040	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.2042	a2 0a		ldx #$0a		ldx	#10
.2044	20 ce 3c	jsr $3cce		jsr	mainHandler
.2047	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2049	20 f7 20	jsr $20f7			jsr 	SpriteMove 					; move it.
.204c	4c ce 1f	jmp $1fce			jmp 	_CSCommandLoop
.204f					_CSSetImage:
.204f	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2051	a2 0c		ldx #$0c		ldx	#12
.2053	20 ce 3c	jsr $3cce		jsr	mainHandler
.2056	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.2058	20 95 20	jsr $2095			jsr 	SpriteSetTarget
.205b	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.205d	bd 5e 0c	lda $0c5e,x			lda 	imageAddr2Low,x 			; copy low address in.
.2060	8d 23 9f	sta $9f23			sta 	$9F23
.2063	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.2066	bd 1e 0c	lda $0c1e,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2069	29 10		and #$10			and 	#$10
.206b	0a		asl a				asl 	a
.206c	0a		asl a				asl		a
.206d	0a		asl a				asl 	a 							; put into bit 7
.206e	1d 9e 0c	ora $0c9e,x			ora 	imageAddr2High,x 			; or high address with it.
.2071	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.2074	a9 06		lda #$06			lda 	#6
.2076	20 95 20	jsr $2095			jsr 	SpriteSetTarget 			; set sprite on.
.2079	ad 23 9f	lda $9f23			lda 	$9F23
.207c	09 0c		ora #$0c			ora 	#$0C
.207e	8d 23 9f	sta $9f23			sta 	$9F23
.2081	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.2084	bd 1e 0c	lda $0c1e,x			lda 	imageInfo,x 				; get image info
.2087	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.2088	0a		asl a				asl 	a
.2089	0a		asl a				asl 	a
.208a	0a		asl a				asl 	a
.208b	b0 02		bcs $208f			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.208d	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.208f					_CSNoOffset:
.208f	8d 23 9f	sta $9f23			sta 	$9F23
.2092	4c ce 1f	jmp $1fce			jmp 	_CSCommandLoop
.2095					SpriteSetTarget:
.2095	0d 17 0c	ora $0c17			ora 	currSprite
.2098	8d 20 9f	sta $9f20			sta 	$9F20
.209b	ad 18 0c	lda $0c18			lda 	currSprite+1
.209e	f0 09		beq $20a9			beq 	_SSTNoSet
.20a0	8d 21 9f	sta $9f21			sta 	$9F21
.20a3	a9 01		lda #$01			lda 	#$01
.20a5	8d 22 9f	sta $9f22			sta 	$9F22
.20a8	60		rts				rts
.20a9					_SSTNoSet:
.20a9	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.20ab	20 18 15	jsr $1518		jsr	errorHandler
.20ae					CSCheckOnOff:
.20ae	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.20b0	c8		iny				iny
.20b1	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.20b3	18		clc				clc
.20b4	f0 08		beq $20be			beq 	_CSCOExit
.20b6	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.20b8	38		sec				sec 								; return NE if neither.
.20b9	f0 03		beq $20be			beq 	_CSCOExit
.20bb	88		dey				dey 								; undo consume
.20bc	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.20be					_CSCOExit:
.20be	60		rts				rts
.20bf					CSClearSprites:
.20bf	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.20c1	8d 22 9f	sta $9f22			sta 	$9F22
.20c4	a9 fc		lda #$fc			lda 	#$FC
.20c6	8d 21 9f	sta $9f21			sta 	$9F21
.20c9	a9 00		lda #$00			lda 	#0
.20cb	8d 20 9f	sta $9f20			sta 	$9F20
.20ce					_CSClear:
.20ce	a9 00		lda #$00			lda 	#0 							; set everything to $00
.20d0	8d 23 9f	sta $9f23			sta 	$9F23
.20d3	ad 21 9f	lda $9f21			lda 	$9F21
.20d6	d0 f6		bne $20ce			bne 	_CSClear
.20d8	60		rts				rts
.20d9					SelectSpriteA:
.20d9	85 2a		sta $2a				sta 	temp0
.20db	a9 00		lda #$00			lda 	#0
.20dd	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.20df	b0 11		bcs $20f2			bcs 	_CSBadValue 				; sprites only 0-127
.20e1	06 2a		asl $2a				asl 	temp0
.20e3	2a		rol a				rol 	a
.20e4	06 2a		asl $2a				asl 	temp0
.20e6	2a		rol a				rol 	a
.20e7	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.20e9	8d 18 0c	sta $0c18			sta 	currSprite+1
.20ec	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.20ee	8d 17 0c	sta $0c17			sta 	currSprite+0
.20f1	60		rts				rts
.20f2					_CSBadValue
.20f2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.20f4	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.20f7					SpriteMove:
.20f7	98		tya				tya
.20f8	48		pha				pha
.20f9	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.20fb	20 95 20	jsr $2095			jsr 	SpriteSetTarget
.20fe	ad 23 9f	lda $9f23			lda 	$9F23
.2101	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2102	4a		lsr a				lsr 	a
.2103	4a		lsr a				lsr 	a
.2104	4a		lsr a				lsr 	a
.2105	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.2107	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.2109	20 95 20	jsr $2095			jsr 	SpriteSetTarget
.210c	20 1b 21	jsr $211b			jsr 	SMWritePosition 					; write X position out.
.210f	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.2111	46 2a		lsr $2a				lsr 	temp0
.2113	e8		inx				inx 										; get the y position
.2114	20 1b 21	jsr $211b			jsr 	SMWritePosition 					; and write that out.
.2117	ca		dex				dex 										; fix X and quit.
.2118	68		pla				pla
.2119	a8		tay				tay
.211a	60		rts				rts
.211b					SMWritePosition:
.211b	a5 2a		lda $2a				lda 	temp0 								; get dim size
.211d	29 03		and #$03			and 	#3 									; in range into Y
.211f	a8		tay				tay
.2120	38		sec				sec
.2121	b5 98		lda $98,x			lda 	esInt0,x
.2123	f9 37 21	sbc $2137,y			sbc 	SMHalfSize,y
.2126	8d 23 9f	sta $9f23			sta 	$9F23
.2129	ee 20 9f	inc $9f20			inc 	$9F20
.212c	b5 a0		lda $a0,x			lda 	esInt1,x
.212e	e9 00		sbc #$00			sbc 	#0
.2130	8d 23 9f	sta $9f23			sta 	$9F23
.2133	ee 20 9f	inc $9f20			inc 	$9F20
.2136	60		rts				rts
.2137					SMHalfSize:
>2137	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.213b					SpriteReadCoordinate:
.213b	98		tya				tya
.213c	48		pha				pha
.213d	08		php				php 										; save CTR on stack
.213e	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2140	20 95 20	jsr $2095			jsr 	SpriteSetTarget
.2143	ad 23 9f	lda $9f23			lda 	$9F23
.2146	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2147	4a		lsr a				lsr 	a
.2148	4a		lsr a				lsr 	a
.2149	4a		lsr a				lsr 	a
.214a	28		plp				plp 										; restore CTS
.214b	08		php				php
.214c	90 02		bcc $2150			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.214e	4a		lsr a				lsr 	a
.214f	4a		lsr a				lsr 	a
.2150					_SPRCNotY1:
.2150	29 03		and #$03			and 	#3 									; point into half width/height
.2152	a8		tay				tay
.2153	b9 37 21	lda $2137,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2156	95 b0		sta $b0,x			sta 	esInt3,x
.2158	28		plp				plp 										; CS Y CC X
.2159	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.215b	2a		rol a				rol 	a
.215c	2a		rol a				rol 	a
.215d	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.215f	20 95 20	jsr $2095			jsr 	SpriteSetTarget 					; set data pointer offset by that
.2162	18		clc				clc 										; read and unfix centre.
.2163	ad 23 9f	lda $9f23			lda 	$9F23
.2166	75 b0		adc $b0,x			adc 	esInt3,x
.2168	95 98		sta $98,x			sta 	esInt0,x
.216a	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.216d	ad 23 9f	lda $9f23			lda 	$9F23
.2170	69 00		adc #$00			adc 	#0
.2172	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2174	c9 08		cmp #$08			cmp		#$08
.2176	90 02		bcc $217a			bcc 	_SPRCNoSX
.2178	09 f0		ora #$f0			ora 	#$F0
.217a					_SPRCNoSX:
.217a	95 a0		sta $a0,x			sta 	esInt1,x
.217c	68		pla				pla
.217d	a8		tay				tay
.217e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.217f					Sprite_GetX:
.217f	18		clc				clc
.2180	90 01		bcc $2183			bcc 	SpriteGetCode
.2182					Sprite_GetY:
.2182	38		sec				sec
.2183					SpriteGetCode:
.2183	08		php				php 								; CLC : X SEC: Y, save on stack.
.2184	48		pha				pha 								; save stack position
.2185	20 a1 21	jsr $21a1			jsr 	GetSpriteNumber 			; get # of sprite.
.2188	a2 04		ldx #$04		ldx	#4
.218a	20 ce 3c	jsr $3cce		jsr	mainHandler
.218d	68		pla				pla
.218e	aa		tax				tax
.218f	28		plp				plp 								; which one ?
.2190	20 3b 21	jsr $213b			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.2193	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.2195	29 80		and #$80			and 	#$80
.2197	f0 02		beq $219b			beq 	_SGXYPos
.2199	a9 ff		lda #$ff			lda 	#$FF
.219b					_SGXYPos:
.219b	95 a8		sta $a8,x			sta 	esInt2,x
.219d	95 b0		sta $b0,x			sta 	esInt3,x
.219f	8a		txa				txa 								; return NSP in A
.21a0	60		rts				rts
.21a1					GetSpriteNumber:
.21a1	48		pha				pha
.21a2	a2 0c		ldx #$0c		ldx	#12
.21a4	20 ce 3c	jsr $3cce		jsr	mainHandler
.21a7	68		pla				pla
.21a8	aa		tax				tax
.21a9	b5 98		lda $98,x			lda 	esInt0,x
.21ab	20 d9 20	jsr $20d9			jsr 	SelectSpriteA
.21ae	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c19					currentMode:
>0c19							.fill 	4
.21af					ForceMode0:
.21af	a2 00		ldx #$00			ldx 	#0
.21b1	86 98		stx $98				stx 	esInt0 						; in case we do it.
.21b3					_FMCheck:
.21b3	bd 46 22	lda $2246,x			lda 	CMModeList,x 				; do we need to switch ?
.21b6	dd 19 0c	cmp $0c19,x			cmp 	currentMode,x
.21b9	d0 13		bne $21ce			bne 	CMSetMode 					; different so switch.
.21bb	e8		inx				inx
.21bc	e0 04		cpx #$04			cpx 	#4
.21be	d0 f3		bne $21b3			bne 	_FMCheck
.21c0	60		rts				rts
.21c1					CommandMode:
.21c1	a9 00		lda #$00			lda 	#0
.21c3	a2 0a		ldx #$0a		ldx	#10
.21c5	20 ce 3c	jsr $3cce		jsr	mainHandler
.21c8	a5 b0		lda $b0				lda 	esInt3
.21ca	29 70		and #$70			and 	#$70
.21cc	d0 06		bne $21d4			bne 	CMNoExpand
.21ce					CMSetMode:
.21ce	20 25 22	jsr $2225			jsr 	CMExpandMode
.21d1	4c e8 21	jmp $21e8			jmp 	CMUpdateMode
.21d4					CMNoExpand:
.21d4	a5 98		lda $98				lda 	esInt0
.21d6	8d 19 0c	sta $0c19			sta 	currentMode
.21d9	a5 a0		lda $a0				lda 	esInt1
.21db	8d 1a 0c	sta $0c1a			sta 	currentMode+1
.21de	a5 a8		lda $a8				lda 	esInt2
.21e0	8d 1b 0c	sta $0c1b			sta 	currentMode+2
.21e3	a5 b0		lda $b0				lda 	esInt3
.21e5	8d 1c 0c	sta $0c1c			sta 	currentMode+3
.21e8					CMUpdateMode:
.21e8	a2 11		ldx #$11			ldx 	#$11
.21ea					_CMClear:
.21ea	a9 00		lda #$00			lda 	#0
.21ec	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.21ef	ca		dex				dex
.21f0	10 f8		bpl $21ea			bpl 	_CMClear
.21f2	ad 1c 0c	lda $0c1c			lda 	currentMode+3 				; get current mode
.21f5	48		pha				pha 								; stack twice.
.21f6	48		pha				pha
.21f7	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.21f9	09 01		ora #$01			ora 	#$01 						; turn the output on.
.21fb	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.21fe	68		pla				pla 								; get back
.21ff	20 56 22	jsr $2256			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2202	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.2205	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.2206	4a		lsr a				lsr 	a
.2207	4a		lsr a				lsr 	a
.2208	20 56 22	jsr $2256			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.220b	8d 2b 9f	sta $9f2b			sta 	$9F2B
.220e	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.2210	ad 19 0c	lda $0c19			lda 	currentMode					; get L0 config byte
.2213	20 61 22	jsr $2261			jsr 	CMDecodeLayer 				; and decode layer 0
.2216	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2218	ad 1a 0c	lda $0c1a			lda 	currentMode+1
.221b	20 61 22	jsr $2261			jsr 	CMDecodeLayer
.221e	20 5b 1d	jsr $1d5b			jsr 	gdModeChanged 				; check the bitmap status.
.2221	20 bc 18	jsr $18bc			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2224	60		rts				rts
.2225					CMExpandMode:
.2225	a5 98		lda $98				lda 	esInt0 						; get mode number
.2227	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2229	b0 16		bcs $2241			bcs 	_CMModeError
.222b	0a		asl a				asl 	a 							; x 4 into X
.222c	0a		asl a				asl 	a
.222d	aa		tax				tax
.222e	98		tya				tya
.222f	48		pha				pha
.2230	a0 00		ldy #$00			ldy 	#0
.2232					_CMEMCopy:
.2232	bd 46 22	lda $2246,x			lda 	CMModeList,x
.2235	99 19 0c	sta $0c19,y			sta 	currentMode,y
.2238	e8		inx				inx
.2239	c8		iny				iny
.223a	c0 04		cpy #$04			cpy 	#4
.223c	d0 f4		bne $2232			bne 	_CMEMCopy
.223e	68		pla				pla
.223f	a8		tay				tay
.2240	60		rts				rts
.2241					_CMModeError:
.2241	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2243	20 18 15	jsr $1518		jsr	errorHandler
.2246					CMModeList:
>2246	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>224a	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>224e	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>2252	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2256					CMEndModeList:
.2256					CMToScale:
.2256	29 03		and #$03			and 	#3 							; lower 2 bits only
.2258	aa		tax				tax 								; put in X for counting
.2259	a9 00		lda #$00			lda 	#0 							; zero result
.225b	38		sec				sec 								; first time rotate CS in
.225c					_CMTSLoop:
.225c	6a		ror a				ror 	a
.225d	ca		dex				dex
.225e	10 fc		bpl $225c			bpl 	_CMTSLoop
.2260	60		rts				rts
.2261					CMDecodeLayer:
.2261	48		pha				pha 								; save it.
.2262	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2264	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.2267	68		pla				pla 								; get it back
.2268	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.226a	f0 02		beq $226e			beq 	_CMDLNotSet
.226c	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.226e					_CMDLNotSet:
.226e	e0 00		cpx #$00			cpx 	#0
.2270	f0 06		beq $2278			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.2272	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2274	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2277	60		rts				rts
.2278					_CMDLayer0:
.2278	09 80		ora #$80			ora 	#$80 						; tile base is $80
.227a	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.227d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.227e					CommandPalette:
.227e	a9 00		lda #$00			lda 	#0
.2280	a2 0c		ldx #$0c		ldx	#12
.2282	20 ce 3c	jsr $3cce		jsr	mainHandler
.2285	a2 02		ldx #$02		ldx	#2
.2287	20 ce 3c	jsr $3cce		jsr	mainHandler
.228a	a9 01		lda #$01			lda 	#1
.228c	a2 08		ldx #$08		ldx	#8
.228e	20 ce 3c	jsr $3cce		jsr	mainHandler
.2291	a5 98		lda $98				lda 	esInt0 					; get palette #
.2293	20 a3 22	jsr $22a3			jsr 	PointToPaletteA			; point to palette register
.2296	a5 99		lda $99				lda 	esInt0+1
.2298	8d 23 9f	sta $9f23			sta 	$9F23
.229b	a5 a1		lda $a1				lda 	esInt1+1
.229d	29 0f		and #$0f			and 	#$0F
.229f	8d 23 9f	sta $9f23			sta 	$9F23
.22a2	60		rts				rts
.22a3					PointToPaletteA:
.22a3	0a		asl a				asl 	a 							; x 2 -> LSB
.22a4	8d 20 9f	sta $9f20			sta 	$9F20
.22a7	a9 00		lda #$00			lda 	#0 							; carry into A
.22a9	2a		rol a				rol 	a
.22aa	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.22ac	8d 21 9f	sta $9f21			sta 	$9F21
.22af	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.22b1	8d 22 9f	sta $9f22			sta 	$9F22
.22b4	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.22b5					Command_VLoad:
.22b5	a9 00		lda #$00			lda 	#0 								; string which is the file name
.22b7	a2 0e		ldx #$0e		ldx	#14
.22b9	20 ce 3c	jsr $3cce		jsr	mainHandler
.22bc	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.22be	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.22c0	95 98		sta $98,x			sta 	esInt0,x
.22c2	a5 36		lda $36				lda 	lowMemory+1
.22c4	95 a0		sta $a0,x			sta 	esInt1,x
.22c6	a9 00		lda #$00			lda 	#0
.22c8	95 a8		sta $a8,x			sta 	esInt2,x
.22ca	95 b0		sta $b0,x			sta 	esInt3,x
.22cc	a2 0e		ldx #$0e		ldx	#14
.22ce	20 f6 14	jsr $14f6		jsr	deviceHandler
.22d1	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.22d3	85 2a		sta $2a				sta 	temp0
.22d5	a5 a1		lda $a1				lda 	esInt1+1
.22d7	85 2b		sta $2b				sta 	temp0+1
.22d9	20 55 23	jsr $2355			jsr 	LoadVRAMFile 					; load the VRAM file in.
.22dc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.22dd					Command_VPoke:
.22dd	38		sec				sec 						; one byte , CS
.22de	b0 01		bcs $22e1			bcs 	CmdVideoWrite
.22e0					Command_VDoke:
.22e0	18		clc				clc 						; two bytes, CC
.22e1					CmdVideoWrite:
.22e1	08		php				php 						; save one or two btes
.22e2	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.22e4	a2 0a		ldx #$0a		ldx	#10
.22e6	20 ce 3c	jsr $3cce		jsr	mainHandler
.22e9	a2 02		ldx #$02		ldx	#2
.22eb	20 ce 3c	jsr $3cce		jsr	mainHandler
.22ee	a9 01		lda #$01			lda 	#1
.22f0	a2 0a		ldx #$0a		ldx	#10
.22f2	20 ce 3c	jsr $3cce		jsr	mainHandler
.22f5	a2 00		ldx #$00			ldx 	#0
.22f7	20 08 23	jsr $2308			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.22fa	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.22fc	8d 23 9f	sta $9f23			sta 	$9F23
.22ff	28		plp				plp 						; if it was Poke then exit
.2300	b0 05		bcs $2307			bcs 	_CVWExit
.2302	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2304	8d 23 9f	sta $9f23			sta 	$9F23
.2307					_CVWExit:
.2307	60		rts				rts
.2308					SetUpTOSVRamAddress:
.2308	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.230a	29 fe		and #$fe			and 	#$FE
.230c	15 b0		ora $b0,x			ora 	esInt3,x
.230e	d0 14		bne $2324			bne 	CVWValue
.2310	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.2312	8d 20 9f	sta $9f20			sta 	$9F20
.2315	b5 a0		lda $a0,x			lda 	esInt1,x
.2317	8d 21 9f	sta $9f21			sta	 	$9F21
.231a	b5 a8		lda $a8,x			lda 	esInt2,x
.231c	29 01		and #$01			and 	#1
.231e	09 10		ora #$10			ora 	#$10 				; step 1.
.2320	8d 22 9f	sta $9f22			sta 	$9F22
.2323	60		rts				rts
.2324					CVWValue:
.2324	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2326	20 18 15	jsr $1518		jsr	errorHandler
.2329					Command_VPeek:
.2329	38		sec				sec 						; one byte , CS
.232a	b0 01		bcs $232d			bcs 	CmdVideoRead
.232c					Command_VDeek:
.232c	18		clc				clc 						; two bytes, CC
.232d					CmdVideoRead:
.232d	08		php				php 						; save action on stack.
.232e	48		pha				pha 						; save stack position
.232f	a2 0a		ldx #$0a		ldx	#10
.2331	20 ce 3c	jsr $3cce		jsr	mainHandler
.2334	a2 04		ldx #$04		ldx	#4
.2336	20 ce 3c	jsr $3cce		jsr	mainHandler
.2339	68		pla				pla
.233a	aa		tax				tax
.233b	20 08 23	jsr $2308			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.233e	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.2340	95 a0		sta $a0,x			sta 	esInt1,x
.2342	95 a8		sta $a8,x			sta 	esInt2,x
.2344	95 b0		sta $b0,x			sta 	esInt3,x
.2346	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2349	95 98		sta $98,x			sta 	esInt0,x
.234b	28		plp				plp 						; check if DOKE (carry was clear)
.234c	b0 05		bcs $2353			bcs 	_CVRExit
.234e	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2351	95 a0		sta $a0,x			sta 	esInt1,x
.2353					_CVRExit:
.2353	8a		txa				txa 						; return X position.
.2354	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c1d					compressMode:
>0c1d							.fill 	1
.0c1e					imageInfo:
>0c1e							.fill 	X16MaxImages
.0c5e					imageAddr2Low:
>0c5e							.fill  	X16MaxImages
.0c9e					imageAddr2High:
>0c9e							.fill  	X16MaxImages
.2355					LoadVRAMFile:
.2355	8a		txa				txa
.2356	48		pha				pha
.2357	98		tya				tya
.2358	48		pha				pha
.2359					_LVRLoop:
.2359	20 35 24	jsr $2435			jsr 	LVFGet 						; get the next (never access direct)
.235c	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.235e	f0 42		beq $23a2			beq 	_LVRExit
.2360	b0 5c		bcs $23be			bcs 	_LVRLoad 					; load data in ?
.2362	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2364	90 11		bcc $2377			bcc 	_LVRSetAddress
.2366	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2368	f0 3d		beq $23a7			beq 	_LVRSetPalette
.236a	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.236c	90 2d		bcc $239b			bcc 	_LVRSetCompress
.236e	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2370	90 60		bcc $23d2			bcc 	_LVRSetSprite
.2372	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2374	20 18 15	jsr $1518		jsr	errorHandler
.2377					_LVRSetAddress:
.2377	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2379	20 35 24	jsr $2435			jsr 	LVFGet
.237c	85 2c		sta $2c				sta 	temp1
.237e	a9 00		lda #$00			lda 	#0
.2380	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.2382	66 2c		ror $2c				ror 	temp1
.2384	6a		ror a				ror		a
.2385	46 2d		lsr $2d				lsr 	temp1+1
.2387	66 2c		ror $2c				ror 	temp1
.2389	6a		ror a				ror		a
.238a	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.238d	a5 2c		lda $2c				lda 	temp1
.238f	8d 21 9f	sta $9f21			sta 	$9F21
.2392	a5 2d		lda $2d				lda 	temp1+1
.2394	09 10		ora #$10			ora 	#$10
.2396	8d 22 9f	sta $9f22			sta 	$9F22
.2399	d0 be		bne $2359			bne 	_LVRLoop
.239b					_LVRSetCompress:
.239b	29 07		and #$07			and 	#7
.239d	8d 1d 0c	sta $0c1d			sta 	compressMode
.23a0	10 b7		bpl $2359			bpl 	_LVRLoop
.23a2					_LVRExit:
.23a2	68		pla				pla
.23a3	a8		tay				tay
.23a4	68		pla				pla
.23a5	aa		tax				tax
.23a6	60		rts				rts
.23a7					_LVRSetPalette:
.23a7	20 35 24	jsr $2435			jsr 	LVFGet 						; get palette id.
.23aa	20 a3 22	jsr $22a3			jsr 	PointToPaletteA 			; in palette.asm
.23ad	20 35 24	jsr $2435			jsr 	LVFGet 						; copy 12 bit palette data in.
.23b0	8d 23 9f	sta $9f23			sta 	$9F23
.23b3	20 35 24	jsr $2435			jsr 	LVFGet
.23b6	29 0f		and #$0f			and 	#$0F
.23b8	8d 23 9f	sta $9f23			sta 	$9F23
.23bb	4c 59 23	jmp $2359			jmp 	_LVRLoop
.23be					_LVRLoad:
.23be	ae 1d 0c	ldx $0c1d			ldx 	compressMode
.23c1	d0 55		bne $2418			bne 	_LVRNotMode0
.23c3	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.23c5					_LVRLCopyX:
.23c5	aa		tax				tax
.23c6					_LVRLCopy:
.23c6	20 35 24	jsr $2435			jsr 	LVFGet 						; write to data.
.23c9	8d 23 9f	sta $9f23			sta 	$9F23
.23cc	ca		dex				dex
.23cd	d0 f7		bne $23c6			bne 	_LVRLCopy
.23cf	4c 59 23	jmp $2359			jmp 	_LVRLoop
.23d2					_LVRSetSprite:
.23d2	48		pha				pha 								; save on stack
.23d3	20 35 24	jsr $2435			jsr 	LVFGet 						; get the sprite number into X
.23d6	aa		tax				tax
.23d7	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.23d9	b0 38		bcs $2413			bcs 	_LVRSSValue
.23db	68		pla				pla 								; restore the data held in the first byte
.23dc	9d 1e 0c	sta $0c1e,x			sta 	imageInfo,x 				; and write into the sprite image table.
.23df					_LVRAlignVRAM:
.23df	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.23e2	29 1f		and #$1f			and 	#$1F
.23e4	f0 07		beq $23ed			beq 	_LVRAligned
.23e6	a9 00		lda #$00			lda 	#$00
.23e8	8d 23 9f	sta $9f23			sta 	$9F23
.23eb	f0 f2		beq $23df			beq 	_LVRAlignVRAM
.23ed					_LVRAligned:
.23ed	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.23f0	4a		lsr a				lsr 	a 	 						; first halve into temp1
.23f1	ad 21 9f	lda $9f21			lda 	$9F21
.23f4	6a		ror a				ror 	a
.23f5	85 2d		sta $2d				sta 	temp1+1
.23f7	ad 20 9f	lda $9f20			lda 	$9F20
.23fa	6a		ror a				ror 	a
.23fb	85 2c		sta $2c				sta 	temp1
.23fd	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.23ff					_LVRShift:
.23ff	46 2d		lsr $2d				lsr 	temp1+1
.2401	66 2c		ror $2c				ror 	temp1
.2403	88		dey				dey
.2404	d0 f9		bne $23ff			bne 	_LVRShift
.2406	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.2408	9d 9e 0c	sta $0c9e,x			sta 	imageAddr2High,x
.240b	a5 2c		lda $2c				lda 	temp1
.240d	9d 5e 0c	sta $0c5e,x			sta 	imageAddr2Low,x
.2410	4c 59 23	jmp $2359			jmp 	_LVRLoop
.2413					_LVRSSValue:
.2413	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2415	20 18 15	jsr $1518		jsr	errorHandler
.2418					_LVRNotMode0:
.2418	e0 01		cpx #$01			cpx 	#1
.241a	d0 15		bne $2431			bne 	_LVRNotMode1
.241c	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.241e	c9 40		cmp #$40			cmp 	#$40
.2420	90 a3		bcc $23c5			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.2422					_LVRRLEGroup:
.2422	29 3f		and #$3f			and 	#$3F
.2424	aa		tax				tax
.2425	20 35 24	jsr $2435			jsr 	LVFGet
.2428					_LVRLEGroupLoop:
.2428	8d 23 9f	sta $9f23			sta 	$9F23
.242b	ca		dex				dex
.242c	d0 fa		bne $2428			bne 	_LVRLEGroupLoop
.242e	4c 59 23	jmp $2359			jmp 	_LVRLoop
.2431					_LVRNotMode1:
>2431	db						.byte 	$DB
.2432	4c 31 24	jmp $2431			jmp 	_LVRNotMode1
.2435	84 32		sty $32		LVFGet:	sty 	tempShort
.2437	a0 00		ldy #$00			ldy 	#0
.2439	b1 2a		lda ($2a),y			lda 	(temp0),y
.243b	a4 32		ldy $32				ldy	 	tempShort
.243d	e6 2a		inc $2a				inc 	temp0
.243f	d0 02		bne $2443			bne 	_LVFGExit
.2441	e6 2b		inc $2b				inc 	temp0+1
.2443					_LVFGExit:
.2443	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2444					section_end_extension:
.2444					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2444					floatingpointHandler:
.2444	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2446	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.2449					section_end_floatingpoint:
.2449					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2449					ColdStartEntry:
.2449	a2 ff		ldx #$ff			ldx 	#$FF
.244b	9a		txs				txs
.244c	20 d5 24	jsr $24d5			jsr 	ForceStandardMode
.244f	a2 04		ldx #$04		ldx	#4
.2451	20 f6 14	jsr $14f6		jsr	deviceHandler
.2454	a0 ff		ldy #$ff			ldy 	#255
.2456					_CSBanner:
.2456	c8		iny				iny
.2457	b9 7d 24	lda $247d,y			lda 	Intro,y
.245a	f0 14		beq $2470			beq 	_CSStart
.245c	c9 08		cmp #$08			cmp 	#8
.245e	90 08		bcc $2468			bcc 	_CSInk
.2460	a2 16		ldx #$16		ldx	#22
.2462	20 f6 14	jsr $14f6		jsr	deviceHandler
.2465	4c 56 24	jmp $2456			jmp 	_CSBanner
.2468					_CSInk:
.2468	a2 08		ldx #$08		ldx	#8
.246a	20 f6 14	jsr $14f6		jsr	deviceHandler
.246d	4c 56 24	jmp $2456			jmp 	_CSBanner
.2470					_CSStart:
.2470	a2 16		ldx #$16		ldx	#22
.2472	20 ce 3c	jsr $3cce		jsr	mainHandler
.2475	a2 06		ldx #$06		ldx	#6
.2477	20 ce 3c	jsr $3cce		jsr	mainHandler
.247a	4c 95 25	jmp $2595			jmp 	WarmStartEntry
>247d	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2485	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2495	20 2a 2a 2a 0d 0d
>249b	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>24a3	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>24b3	32 30 32 31 0d 0d
>24b9	02 42 61 73 69 63 20				.text 	2,"Basic "
>24c0	30 2e 32 30					.text "0.20"
>24c4	20 28						.text 	" ("
>24c6	30 33 2d 41 70 72 2d 32				.text "03-Apr-2021"
>24ce	30 32 31
>24d1	29 0d 0d 00					.text 	")",13,13,0
.24d5					ForceStandardMode:
.24d5	a9 fe		lda #$fe			lda 	#$FE
.24d7	20 69 18	jsr $1869		jsr	extensionHandler
.24da	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.24db					DeleteLine:
.24db	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.24de	85 2a		sta $2a				sta 	temp0
.24e0	ad c9 0a	lda $0ac9			lda 	basePage+1
.24e3	85 2b		sta $2b				sta 	temp0+1
.24e5	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.24e7	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.24e9	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.24eb	d0 07		bne $24f4			bne 	_DLNext
.24ed	c8		iny				iny
.24ee	a5 a0		lda $a0				lda 	esInt1
.24f0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.24f2	f0 06		beq $24fa			beq 	_DLFound
.24f4	20 18 25	jsr $2518	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.24f7	d0 ec		bne $24e5			bne 	_DLLoop
.24f9	60		rts				rts
.24fa					_DLFound:
.24fa	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.24fc	b1 2a		lda ($2a),y			lda 	(temp0),y
.24fe	a8		tay				tay 								; so we copy from (temp0),y
.24ff	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2501					_DLCopyDown:
.2501	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2503	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2505	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.2507	d0 02		bne $250b			bne 	_DLNoCarry
.2509	e6 2b		inc $2b				inc 	temp0+1
.250b					_DLNoCarry:
.250b	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.250d	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.250f	d0 f0		bne $2501			bne 	_DLCopyDown
.2511	a5 2b		lda $2b				lda 	temp0+1
.2513	c5 36		cmp $36				cmp 	lowMemory+1
.2515	d0 ea		bne $2501			bne 	_DLCopyDown
.2517	60		rts				rts
.2518					IAdvanceTemp0:
.2518	84 32		sty $32				sty 	tempShort
.251a	18		clc				clc
.251b	a0 00		ldy #$00			ldy 	#0 							; get offset
.251d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.251f	65 2a		adc $2a				adc 	temp0
.2521	85 2a		sta $2a				sta 	temp0
.2523	90 02		bcc $2527			bcc 	_IATNoCarry
.2525	e6 2b		inc $2b				inc 	temp0+1
.2527					_IATNoCarry:
.2527	b1 2a		lda ($2a),y			lda 	(temp0),y
.2529	a4 32		ldy $32				ldy 	tempShort
.252b	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.252d	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.252e					InsertLine:
.252e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2531	85 2a		sta $2a				sta 	temp0
.2533	ad c9 0a	lda $0ac9			lda 	basePage+1
.2536	85 2b		sta $2b				sta 	temp0+1
.2538					_ILLoop:
.2538	a0 01		ldy #$01			ldy 	#1
.253a	b1 2a		lda ($2a),y			lda 	(temp0),y
.253c	c5 98		cmp $98				cmp 	esInt0
.253e	c8		iny				iny
.253f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2541	e5 a0		sbc $a0				sbc 	esInt1
.2543	b0 05		bcs $254a			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2545	20 18 25	jsr $2518			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2548	d0 ee		bne $2538			bne 	_ILLoop
.254a					_ILFound:
.254a	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.254c	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.254e	a5 36		lda $36				lda 	lowMemory+1
.2550	85 2d		sta $2d				sta 	temp1+1
.2552	ad 1b 0e	lda $0e1b			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2555	18		clc				clc 								; add 3 for the line number and offset.
.2556	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2558	a8		tay				tay
.2559	a2 00		ldx #$00			ldx 	#0
.255b	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.255d	91 2c		sta ($2c),y			sta 	(temp1),y
.255f	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.2561	c5 2a		cmp $2a				cmp 	temp0
.2563	d0 06		bne $256b			bne 	_ILMNext
.2565	a5 2d		lda $2d				lda 	temp1+1
.2567	c5 2b		cmp $2b				cmp 	temp0+1
.2569	f0 0b		beq $2576			beq 	_ILMCopy
.256b					_ILMNext:
.256b	a5 2c		lda $2c				lda 	temp1
.256d	d0 02		bne $2571			bne 	_ILNoBorrow
.256f	c6 2d		dec $2d				dec 	temp1+1
.2571					_ILNoBorrow:
.2571	c6 2c		dec $2c				dec 	temp1
.2573	4c 5b 25	jmp $255b			jmp 	_ILMove 					; and go round again
.2576					_ILMCopy:
.2576	98		tya				tya 								; Y is the offset of the new line.
.2577	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2579	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.257b	a5 98		lda $98				lda 	esInt0
.257d	91 2a		sta ($2a),y			sta 	(temp0),y
.257f	c8		iny				iny
.2580	a5 a0		lda $a0				lda 	esInt1
.2582	91 2a		sta ($2a),y			sta 	(temp0),y
.2584	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2586					_ILMCopy2:
.2586	b1 28		lda ($28),y			lda 	(codePtr),y
.2588	c8		iny				iny
.2589	c8		iny				iny
.258a	c8		iny				iny
.258b	91 2a		sta ($2a),y			sta 	(temp0),y
.258d	88		dey				dey
.258e	88		dey				dey
.258f	cc 1b 0e	cpy $0e1b			cpy 	tokenBufferIndex
.2592	d0 f2		bne $2586			bne 	_ILMCopy2
.2594	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2595					WarmStartEntry:
.2595	a2 ff		ldx #$ff			ldx 	#$FF
.2597	9a		txs				txs
.2598	20 d5 24	jsr $24d5			jsr 	ForceStandardMode
.259b	a9 02		lda #$02			lda 	#2							; green text.
.259d	a2 08		ldx #$08		ldx	#8
.259f	20 f6 14	jsr $14f6		jsr	deviceHandler
.25a2	a2 0c		ldx #$0c		ldx	#12
.25a4	20 f6 14	jsr $14f6		jsr	deviceHandler
.25a7	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.25a9	85 28		sta $28				sta 	codePtr
.25ab	a5 2b		lda $2b				lda 	temp0+1
.25ad	85 29		sta $29				sta 	codePtr+1
.25af	a2 06		ldx #$06		ldx	#6
.25b1	20 f6 14	jsr $14f6		jsr	deviceHandler
.25b4	a2 08		ldx #$08		ldx	#8
.25b6	20 14 48	jsr $4814		jsr	tokeniserHandler
.25b9	c9 00		cmp #$00			cmp 	#0
.25bb	f0 25		beq $25e2			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.25bd	a9 18		lda #$18			lda 	#(tokenHeader) & $FF
.25bf	85 28		sta $28				sta 	codePtr
.25c1	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.25c3	85 29		sta $29				sta 	1+(codePtr)
.25c5	ad 1b 0d	lda $0d1b			lda 	tokenBuffer 				; is it a blank line, go get another line.
.25c8	c9 80		cmp #$80			cmp 	#$80
.25ca	f0 c9		beq $2595			beq 	WarmStartEntry
.25cc	29 c0		and #$c0			and 	#$C0						; does it start with a number
.25ce	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.25d0	f0 15		beq $25e7			beq 	HasLineNumber
.25d2	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.25d4	8d 18 0d	sta $0d18			sta 	tokenHeader 				; fake program line.
.25d7	8d 19 0d	sta $0d19			sta 	tokenHeader+1
.25da	8d 1a 0d	sta $0d1a			sta 	tokenHeader+2
.25dd	a2 18		ldx #$18		ldx	#24
.25df	20 ce 3c	jsr $3cce		jsr	mainHandler
.25e2					WSEError:
.25e2	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.25e4	20 18 15	jsr $1518		jsr	errorHandler
.25e7					HasLineNumber:
.25e7	a0 03		ldy #$03			ldy 	#3 							; get line number
.25e9	a9 00		lda #$00			lda 	#0
.25eb	a2 0a		ldx #$0a		ldx	#10
.25ed	20 ce 3c	jsr $3cce		jsr	mainHandler
.25f0	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.25f2	05 b0		ora $b0				ora 	esInt3
.25f4	d0 ec		bne $25e2			bne 	WSEError
.25f6	98		tya				tya 								; make codePtr point to code after the line number.
.25f7	18		clc				clc 								; by skipping over the tokenised number.
.25f8	65 28		adc $28				adc 	codePtr
.25fa	85 28		sta $28				sta 	codePtr
.25fc	90 02		bcc $2600			bcc		_HLNNoCarry
.25fe	e6 29		inc $29				inc 	codePtr+1
.2600					_HLNNoCarry:
.2600	98		tya				tya 								; subtract that offset from the code buffer index
.2601	38		sec				sec
.2602	49 ff		eor #$ff			eor 	#$FF
.2604	6d 1b 0e	adc $0e1b			adc 	tokenBufferIndex
.2607	18		clc				clc 								; add space allowing for header & $80 trailer
.2608	69 04		adc #$04			adc 	#4
.260a	8d 1b 0e	sta $0e1b			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.260d	20 db 24	jsr $24db			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.2610					_HLNNoDelete:
.2610	ad 1b 0e	lda $0e1b			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2613	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2615	f0 0c		beq $2623			beq 	_HLMEditDone
.2617	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.2619	18		clc				clc 								; workspace (1k)
.261a	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.261c	c5 34		cmp $34				cmp 	highMemory+1
.261e	b0 0b		bcs $262b			bcs 	_HLMMemory 					; nope, won't allowit.
.2620	20 2e 25	jsr $252e			jsr 	InsertLine 					; insert the line in
.2623					_HLMEditDone:
.2623	a2 06		ldx #$06		ldx	#6
.2625	20 ce 3c	jsr $3cce		jsr	mainHandler
.2628	4c 95 25	jmp $2595			jmp 	WarmStartEntry
.262b					_HLMMemory:
.262b	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.262d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2630					interactionHandler:
.2630	7c 33 26	jmp ($2633,x)			jmp 	(interactionVectors,x)
.2633					interactionVectors:
>2633	39 26					.word _DummyControlHandler ; index 0
>2635	49 24					.word ColdStartEntry       ; index 2
>2637	95 25					.word WarmStartEntry       ; index 4
.2639					_DummyControlHandler:
.2639	60		rts			rts

;******  Return to file: basic.asm

.263a					section_end_interaction:
.263a					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cde					dataPtr:
>0cde							.fill 	2
.0ce0					dataIndex:
>0ce0							.fill 	1
.263a					CommandRead:
.263a	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.263c	20 81 35	jsr $3581			jsr 	EvaluateReference
.263f	20 80 26	jsr $2680			jsr 	SwapDPCP 					; use the data pointer.
.2642	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2644	c8		iny				iny
.2645	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2647	f0 07		beq $2650			beq 	_CRInData
.2649	88		dey				dey
.264a	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.264c	aa		tax				tax
.264d	20 81 2d	jsr $2d81			jsr 	ScanForward
.2650					_CRInData:
.2650	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2652	20 29 35	jsr $3529			jsr 	Evaluate
.2655	ca		dex				dex 								; and write the value.
.2656	20 d4 28	jsr $28d4			jsr 	WriteValue
.2659	20 80 26	jsr $2680			jsr 	SwapDPCP 					; get the code pointer back.
.265c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.265e	c8		iny				iny
.265f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.2661	f0 d7		beq $263a			beq 	CommandRead
.2663	88		dey				dey
.2664	60		rts				rts
.2665					CommandData:
.2665	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2667	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2669	20 81 2d	jsr $2d81			jsr 	ScanForward
.266c	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.266d	60		rts				rts
.266e					CommandRestore:
.266e	ad c8 0a	lda $0ac8			lda 	basePage
.2671	8d de 0c	sta $0cde			sta 	dataPtr
.2674	ad c9 0a	lda $0ac9			lda 	basePage+1
.2677	8d df 0c	sta $0cdf			sta 	dataPtr+1
.267a	a9 03		lda #$03			lda 	#3
.267c	8d e0 0c	sta $0ce0			sta 	dataIndex
.267f	60		rts				rts
.2680					SwapDPCP:
.2680	8a		txa				txa
.2681	48		pha				pha
.2682	98		tya				tya 								; swap Y, DataIndex
.2683	ac e0 0c	ldy $0ce0			ldy 	DataIndex
.2686	8d e0 0c	sta $0ce0			sta 	DataIndex
.2689	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.268b	ae de 0c	ldx $0cde			ldx 	dataptr
.268e	8d de 0c	sta $0cde			sta 	dataPtr
.2691	86 28		stx $28				stx 	codePtr
.2693	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2695	ae df 0c	ldx $0cdf			ldx 	dataptr+1
.2698	8d df 0c	sta $0cdf			sta 	dataPtr+1
.269b	86 29		stx $29				stx 	codePtr+1
.269d	68		pla				pla
.269e	aa		tax				tax
.269f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.26a0					CommandGOSUB:
.26a0	20 46 35	jsr $3546			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.26a3	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.26a5	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.26a7	20 7b 3c	jsr $3c7b			jsr 	RSClaim
.26aa	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.26ac	20 a7 3c	jsr $3ca7			jsr 	RSSavePosition
.26af	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.26b1	f0 1b		beq $26ce			beq 	GotoTOS 					; and do a GOTO there.
.26b3					CommandRETURN:
.26b3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26b5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.26b7	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.26b9	f0 05		beq $26c0			beq 	_isok
.26bb	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.26bd	20 18 15	jsr $1518		jsr	errorHandler
.26c0					_isok:
.26c0	a9 01		lda #$01			lda 	#1
.26c2	20 ba 3c	jsr $3cba			jsr 	RSLoadPosition 				; reload the position from offset 1.
.26c5	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.26c7	20 9d 3c	jsr $3c9d			jsr 	RSFree
.26ca	60		rts				rts
.26cb					CommandGOTO:
.26cb	20 46 35	jsr $3546			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.26ce					GotoTOS:
.26ce	20 67 30	jsr $3067			jsr 	ResetCodeAddress 			; simple search.
.26d1					_GotoSearch:
.26d1	a0 00		ldy #$00			ldy 	#0 							; get offset
.26d3	b1 28		lda ($28),y			lda 	(codePtr),y
.26d5	f0 21		beq $26f8			beq 	_GotoError 					; not found.
.26d7	c8		iny				iny									; check LSB match
.26d8	b1 28		lda ($28),y			lda 	(codePtr),y
.26da	d5 98		cmp $98,x			cmp 	esInt0,x
.26dc	d0 07		bne $26e5			bne 	_GotoNext
.26de	c8		iny				iny
.26df	b1 28		lda ($28),y			lda 	(codePtr),y
.26e1	d5 a0		cmp $a0,x			cmp 	esInt1,x
.26e3	f0 10		beq $26f5			beq 	_GotoFound
.26e5					_GotoNext:
.26e5	a0 00		ldy #$00			ldy 	#0 							; go next line
.26e7	b1 28		lda ($28),y			lda 	(codePtr),y
.26e9	18		clc				clc
.26ea	65 28		adc $28				adc 	codePtr
.26ec	85 28		sta $28				sta 	codePtr
.26ee	90 e1		bcc $26d1			bcc 	_GotoSearch
.26f0	e6 29		inc $29				inc 	codePtr+1
.26f2	4c d1 26	jmp $26d1			jmp 	_GotoSearch
.26f5					_GotoFound:
.26f5	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.26f7	60		rts				rts
.26f8					_GotoError:
.26f8	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.26fa	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0ce1					InputBuffer:
>0ce1							.fill 	MaxInputSize+1
.26fd					Command_Input:
.26fd	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.26ff	c8		iny				iny
.2700	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2702	f0 f9		beq $26fd			beq 	Command_Input
.2704	88		dey				dey 							; undo consume
.2705	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2707	f0 54		beq $275d			beq 	_CIExit 				; : or EOL, exit
.2709	c9 80		cmp #$80			cmp 	#TOK_EOL
.270b	f0 50		beq $275d			beq 	_CIExit
.270d	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.270f	90 12		bcc $2723			bcc 	_CIVariable
.2711	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2713	d0 43		bne $2758			bne 	_CISyntax
.2715	a2 00		ldx #$00			ldx 	#0
.2717	20 3d 35	jsr $353d			jsr 	EvaluateString 			; evaluate and print string
.271a	20 36 29	jsr $2936			jsr 	TOSToTemp0
.271d	20 2c 28	jsr $282c			jsr 	PrintString
.2720	4c fd 26	jmp $26fd			jmp 	Command_Input
.2723					_CIVariable:
.2723	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2725	20 81 35	jsr $3581			jsr 	EvaluateReference  		; this is where its going
.2728					_CIRetry:
.2728	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.272a	a2 14		ldx #$14		ldx	#20
.272c	20 f6 14	jsr $14f6		jsr	deviceHandler
.272f	98		tya				tya
.2730	48		pha				pha
.2731	20 71 27	jsr $2771			jsr 	InputString 			; input a string (manually)
.2734	a2 01		ldx #$01			ldx 	#1
.2736	20 5e 27	jsr $275e			jsr 	BufferToStackX 			; make stack,x ref input string.
.2739	a5 90		lda $90				lda 	esType 					; if target type numeric
.273b	29 40		and #$40			and 	#$40 					; then convert to number
.273d	d0 11		bne $2750			bne 	_CIWrite
.273f	a2 01		ldx #$01			ldx 	#1
.2741	20 36 29	jsr $2936			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2744	a9 0a		lda #$0a			lda 	#10
.2746	20 4e 3a	jsr $3a4e			jsr 	MInt32FromString 		; convert it back from a string.
.2749	68		pla				pla
.274a	a8		tay				tay
.274b	b0 03		bcs $2750			bcs 	_CIWrite 				; successfully converted.
.274d	18		clc				clc 							; default fail FP conversion
.274e	90 d8		bcc $2728			bcc		_CIRetry				; failed, try again.
.2750					_CIWrite:
.2750	a2 00		ldx #$00			ldx 	#0
.2752	20 d4 28	jsr $28d4			jsr 	WriteValue
.2755	4c fd 26	jmp $26fd			jmp 	Command_Input
.2758					_CISyntax:
.2758	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.275a	20 18 15	jsr $1518		jsr	errorHandler
.275d					_CIExit:
.275d	60		rts				rts
.275e					BufferToStackX:
.275e	a9 e1		lda #$e1			lda 	#InputBuffer & $FF
.2760	95 98		sta $98,x			sta 	esInt0,x
.2762	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.2764	95 a0		sta $a0,x			sta 	esInt1,x
.2766	a9 00		lda #$00			lda 	#0
.2768	95 a8		sta $a8,x			sta 	esInt2,x
.276a	95 b0		sta $b0,x			sta 	esInt3,x
.276c	a9 40		lda #$40			lda 	#$40
.276e	95 90		sta $90,x			sta 	esType,x
.2770	60		rts				rts
.2771					InputString:
.2771	a9 00		lda #$00			lda 	#0
.2773	8d e1 0c	sta $0ce1			sta 	InputBuffer
.2776					_InputLoop:
.2776	a2 02		ldx #$02		ldx	#2
.2778	20 f6 14	jsr $14f6		jsr	deviceHandler
.277b	a2 0a		ldx #$0a		ldx	#10
.277d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2780	c9 00		cmp #$00			cmp 	#0
.2782	f0 f2		beq $2776			beq 	_InputLoop
.2784	c9 08		cmp #$08			cmp 	#8
.2786	f0 19		beq $27a1			beq 	_InputBackspace
.2788	c9 0d		cmp #$0d			cmp 	#13
.278a	f0 21		beq $27ad			beq 	_InputExit
.278c	ae e1 0c	ldx $0ce1			ldx 	InputBuffer
.278f	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2791	f0 e3		beq $2776			beq 	_InputLoop
.2793	9d e2 0c	sta $0ce2,x			sta 	InputBuffer+1,x 		; write char
.2796	ee e1 0c	inc $0ce1			inc 	InputBuffer 			; advance count.
.2799					_InputPrintLoop:
.2799	a2 14		ldx #$14		ldx	#20
.279b	20 f6 14	jsr $14f6		jsr	deviceHandler
.279e	4c 76 27	jmp $2776			jmp	 	_InputLoop
.27a1					_InputBackspace:
.27a1	ad e1 0c	lda $0ce1			lda 	InputBuffer 			; at start
.27a4	f0 d0		beq $2776			beq 	_InputLoop
.27a6	ce e1 0c	dec $0ce1			dec 	InputBuffer
.27a9	a9 08		lda #$08			lda 	#8
.27ab	d0 ec		bne $2799			bne 	_InputPrintLoop
.27ad					_InputExit:
.27ad	a2 06		ldx #$06		ldx	#6
.27af	20 f6 14	jsr $14f6		jsr	deviceHandler
.27b2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d02					lastPrintToken:
>0d02							.fill 	1
.27b3					Command_Print:
.27b3	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.27b5	8d 02 0d	sta $0d02			sta 	lastPrintToken
.27b8	88		dey				dey
.27b9					_PrintLoopSkip:
.27b9	c8		iny				iny
.27ba					_PrintLoop:
.27ba	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.27bc	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.27be	f0 5b		beq $281b			beq 	_PrintExit
.27c0	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.27c2	f0 57		beq $281b			beq 	_PrintExit
.27c4	8d 02 0d	sta $0d02			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.27c7	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.27c9	f0 ee		beq $27b9			beq 	_PrintLoopSkip
.27cb	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.27cd	f0 3c		beq $280b			beq	 	_PrintNewLine
.27cf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.27d1	f0 40		beq $2813			beq 	_PrintTab
.27d3	20 27 35	jsr $3527			jsr 	EvaluateRoot 				; evaluate something at the root
.27d6	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.27d8	85 2a		sta $2a				sta 	temp0
.27da	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.27dc	85 2b		sta $2b				sta 	1+(temp0)
.27de	a5 90		lda $90				lda 	esType 						; get type
.27e0	f0 15		beq $27f7			beq		_PrintInteger
.27e2	4a		lsr a				lsr 	a 							; check for floating point
.27e3	b0 08		bcs $27ed			bcs 	_PrintFloat
.27e5					_PrintString:
.27e5	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.27e7	20 36 29	jsr $2936			jsr 	TOSToTemp0
.27ea	4c 05 28	jmp $2805			jmp 	_PrintTemp0 				; print no leading space.
.27ed					_PrintFloat:
.27ed	a9 00		lda #$00			lda 	#0 							; stack level.
.27ef	a2 16		ldx #$16		ldx	#22
.27f1	20 44 24	jsr $2444		jsr	floatingpointHandler
.27f4	4c fe 27	jmp $27fe			jmp 	_PrintSpaceTemp0
.27f7					_PrintInteger:
.27f7	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.27f9	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.27fb	20 36 3b	jsr $3b36			jsr 	MInt32ToString				; convert to text
.27fe					_PrintSpaceTemp0:
.27fe	a9 20		lda #$20			lda 	#32
.2800	a2 14		ldx #$14		ldx	#20
.2802	20 f6 14	jsr $14f6		jsr	deviceHandler
.2805					_PrintTemp0:
.2805	20 2c 28	jsr $282c			jsr 	PrintString
.2808	4c ba 27	jmp $27ba			jmp 	_PrintLoop
.280b					_PrintNewLine:
.280b	a2 06		ldx #$06		ldx	#6
.280d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2810	4c b9 27	jmp $27b9			jmp 	_PrintLoopSkip
.2813					_PrintTab:
.2813	a2 1a		ldx #$1a		ldx	#26
.2815	20 f6 14	jsr $14f6		jsr	deviceHandler
.2818	4c b9 27	jmp $27b9			jmp 	_PrintLoopSkip
.281b					_PrintExit:
.281b	ad 02 0d	lda $0d02			lda		lastPrintToken 				; check last token
.281e	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2820	f0 09		beq $282b			beq 	_PrintExit2
.2822	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2824	f0 05		beq $282b			beq 	_PrintExit2
.2826	a2 06		ldx #$06		ldx	#6
.2828	20 f6 14	jsr $14f6		jsr	deviceHandler
.282b					_PrintExit2:
.282b	60		rts				rts
.282c					PrintString:
.282c	8a		txa				txa
.282d	48		pha				pha
.282e	98		tya				tya
.282f	48		pha				pha
.2830	a0 00		ldy #$00			ldy 	#0							; get length
.2832	b1 2a		lda ($2a),y			lda 	(temp0),y
.2834	aa		tax				tax 								; into X
.2835	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2837	f0 10		beq $2849			beq 	_PSExit
.2839	ca		dex				dex
.283a	8a		txa				txa
.283b	48		pha				pha
.283c	c8		iny				iny
.283d	b1 2a		lda ($2a),y			lda 	(temp0),y
.283f	a2 14		ldx #$14		ldx	#20
.2841	20 f6 14	jsr $14f6		jsr	deviceHandler
.2844	68		pla				pla
.2845	aa		tax				tax
.2846	4c 35 28	jmp $2835			jmp 	_PSLoop
.2849					_PSExit:
.2849	68		pla				pla
.284a	a8		tay				tay
.284b	68		pla				pla
.284c	aa		tax				tax
.284d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.284e					Command_CLS:
.284e	a2 04		ldx #$04		ldx	#4
.2850	20 f6 14	jsr $14f6		jsr	deviceHandler
.2853	60		rts				rts
.2854					Command_Ink:
.2854	a2 00		ldx #$00			ldx 	#0
.2856	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger
.2859	a2 08		ldx #$08		ldx	#8
.285b	20 f6 14	jsr $14f6		jsr	deviceHandler
.285e	60		rts				rts
.285f					Command_Paper:
.285f	a2 00		ldx #$00			ldx 	#0
.2861	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger
.2864	a2 12		ldx #$12		ldx	#18
.2866	20 f6 14	jsr $14f6		jsr	deviceHandler
.2869	60		rts				rts
.286a					Command_Locate:
.286a	a2 00		ldx #$00			ldx 	#0
.286c	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger
.286f	20 60 3c	jsr $3c60			jsr 	CheckComma
.2872	e8		inx				inx
.2873	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger
.2876	98		tya				tya
.2877	48		pha				pha
.2878	a4 99		ldy $99				ldy 	esInt0+1
.287a	a5 98		lda $98				lda 	esInt0
.287c	a2 10		ldx #$10		ldx	#16
.287e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2881	68		pla				pla
.2882	a8		tay				tay
.2883	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2884					Command_VDU:
.2884	20 46 35	jsr $3546			jsr 	EvaluateRootInteger 			; get integer at root.
.2887	a5 98		lda $98				lda 	esInt0
.2889	a2 14		ldx #$14		ldx	#20
.288b	20 f6 14	jsr $14f6		jsr	deviceHandler
.288e					_CVNext:
.288e	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2890	c8		iny				iny
.2891	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2893	f0 ef		beq $2884			beq 	Command_VDU
.2895	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2897	d0 0a		bne $28a3			bne 	_CVExit
.2899	a5 a0		lda $a0				lda 	esInt1
.289b	a2 14		ldx #$14		ldx	#20
.289d	20 f6 14	jsr $14f6		jsr	deviceHandler
.28a0	4c 8e 28	jmp $288e			jmp 	_CVNext
.28a3	88		dey		_CVExit:dey
.28a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.28a5					Command_Assert:
.28a5	20 46 35	jsr $3546			jsr 	EvaluateRootInteger 		; what is being asserted.
.28a8	20 07 3c	jsr $3c07			jsr 	MInt32Zero 					; is it true ?
.28ab	f0 01		beq $28ae			beq 	_CAError
.28ad	60		rts				rts
.28ae					_CAError:
.28ae	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.28b0	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.28b3					Command_Dim:
.28b3	a2 04		ldx #$04		ldx	#4
.28b5	20 e5 4b	jsr $4be5		jsr	variableHandler
.28b8	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.28ba	c8		iny				iny
.28bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.28bd	f0 f4		beq $28b3			beq 	Command_Dim
.28bf	88		dey				dey 								; unpick get
.28c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.28c1					CommandLet:
.28c1	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.28c3	20 81 35	jsr $3581			jsr 	EvaluateReference
.28c6	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.28c8	20 48 3c	jsr $3c48			jsr 	CheckToken
.28cb	e8		inx				inx 								; do RHS
.28cc	20 29 35	jsr $3529			jsr 	Evaluate 					; evaluate and dereference
.28cf	ca		dex				dex
.28d0	20 d4 28	jsr $28d4			jsr 	WriteValue 					; write it out
.28d3	60		rts				rts
.28d4					WriteValue:
.28d4	98		tya				tya
.28d5	48		pha				pha
.28d6	20 36 29	jsr $2936			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.28d9	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.28db	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.28dd	29 40		and #$40			and 	#$40
.28df	d0 50		bne $2931			bne		_WVType
.28e1	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.28e3	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.28e5	29 40		and #$40			and 	#$40
.28e7	d0 1f		bne $2908			bne 	_WVCopyString
.28e9	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.28eb	15 91		ora $91,x			ora 	esType+1,x
.28ed	4a		lsr a				lsr 	a
.28ee	90 22		bcc $2912			bcc 	_WVCopyData4 				; copy 4 data bytes.
.28f0	b5 90		lda $90,x			lda 	esType,x
.28f2	4a		lsr a				lsr 	a
.28f3	90 3c		bcc $2931			bcc 	_WVType
.28f5	e8		inx				inx 								; force the value being written to be a float.
.28f6	20 8b 31	jsr $318b			jsr 	BPMakeFloat
.28f9	ca		dex				dex
.28fa	20 36 29	jsr $2936			jsr 	TOSToTemp0 					; set Temp0 to write address
.28fd	e8		inx				inx
.28fe	8a		txa				txa
.28ff	a2 22		ldx #$22		ldx	#34
.2901	20 44 24	jsr $2444		jsr	floatingpointHandler
.2904	aa		tax				tax
.2905	4c 2e 29	jmp $292e			jmp 	_WVCopyExit
.2908					_WVCopyString:
.2908	8a		txa				txa
.2909	a2 10		ldx #$10		ldx	#16
.290b	20 8b 3f	jsr $3f8b		jsr	stringHandler
.290e	aa		tax				tax
.290f	4c 2e 29	jmp $292e			jmp 	_WVCopyExit
.2912					_WVCopyData4:
.2912	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2914	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2916	d0 10		bne $2928			bne 	_WVCopyData1
.2918	a0 03		ldy #$03			ldy 	#3
.291a	b5 b1		lda $b1,x			lda 	esInt3+1,x
.291c	91 2a		sta ($2a),y			sta 	(temp0),y
.291e	88		dey				dey
.291f	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2921	91 2a		sta ($2a),y			sta 	(temp0),y
.2923	88		dey				dey
.2924	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2926	91 2a		sta ($2a),y			sta 	(temp0),y
.2928					_WVCopyData1:
.2928	a0 00		ldy #$00			ldy 	#0
.292a	b5 99		lda $99,x			lda 	esInt0+1,x
.292c	91 2a		sta ($2a),y			sta 	(temp0),y
.292e					_WVCopyExit:
.292e	68		pla				pla
.292f	a8		tay				tay
.2930	60		rts				rts
.2931					_WVType:
.2931	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2933	20 18 15	jsr $1518		jsr	errorHandler
.2936					TOSToTemp0:
.2936	b5 98		lda $98,x			lda 	esInt0,x
.2938	85 2a		sta $2a				sta 	temp0
.293a	b5 a0		lda $a0,x			lda 	esInt1,x
.293c	85 2b		sta $2b				sta 	temp0+1
.293e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.293f					Command_Poke:
.293f	a9 01		lda #$01			lda 	#1
.2941	d0 06		bne $2949			bne 	PokeGeneral
.2943					Command_Doke:
.2943	a9 02		lda #$02			lda 	#2
.2945	d0 02		bne $2949			bne 	PokeGeneral
.2947					Command_Loke:
.2947	a9 03		lda #$03			lda 	#3
.2949					PokeGeneral:
.2949	48		pha				pha 								; save id (PDL = 123)
.294a	20 46 35	jsr $3546			jsr 	EvaluateRootInteger 		; target address
.294d	20 60 3c	jsr $3c60			jsr	 	CheckComma
.2950	e8		inx				inx
.2951	20 48 35	jsr $3548			jsr 	EvaluateInteger 			; what value to POKE ?
.2954	ca		dex				dex
.2955	20 36 29	jsr $2936			jsr 	TOSToTemp0 					; temp0 points to the target address
.2958	84 32		sty $32				sty 	tempShort 					; save Y
.295a	68		pla				pla 								; get copy type (1-3) and dispatch
.295b	aa		tax				tax
.295c	ca		dex				dex
.295d	f0 14		beq $2973			beq 	_Poke1
.295f	ca		dex				dex
.2960	f0 0b		beq $296d			beq 	_Poke2
.2962	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2964	a5 b1		lda $b1				lda 	esInt3+1
.2966	91 2a		sta ($2a),y			sta 	(temp0),y
.2968	88		dey				dey
.2969	a5 a9		lda $a9				lda 	esInt2+1
.296b	91 2a		sta ($2a),y			sta 	(temp0),y
.296d					_Poke2:
.296d	a0 01		ldy #$01			ldy 	#1
.296f	a5 a1		lda $a1				lda 	esInt1+1
.2971	91 2a		sta ($2a),y			sta 	(temp0),y
.2973					_Poke1:
.2973	a0 00		ldy #$00			ldy 	#0
.2975	a5 99		lda $99				lda 	esInt0+1
.2977	91 2a		sta ($2a),y			sta 	(temp0),y
.2979	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.297b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.297c					Command_Rem:
.297c					Command_Rem2:
.297c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.297e	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2980	d0 06		bne $2988			bne 	_CRNotString
.2982	c8		iny				iny
.2983	98		tya				tya
.2984	38		sec				sec
.2985	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2987	a8		tay				tay
.2988					_CRNotString:
.2988	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2989					CommandStop:
.2989	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.298b	20 18 15	jsr $1518		jsr	errorHandler
.298e					CommandEnd:
.298e	4c c9 3c	jmp $3cc9			jmp 	WarmStart
.2991					CommandXemu:
.2991	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2994					AdvanceNextLine:
.2994	a0 00		ldy #$00			ldy 	#0 							; get offset
.2996	b1 28		lda ($28),y			lda 	(codePtr),y
.2998	18		clc				clc 								; add to codePtr
.2999	65 28		adc $28				adc 	codePtr
.299b	85 28		sta $28				sta 	codePtr
.299d	90 02		bcc $29a1			bcc 	_ANLNoCarry
.299f	e6 29		inc $29				inc 	codePtr+1
.29a1					_ANLNoCarry:
.29a1	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.29a3	f0 e9		beq $298e			beq 	CommandEnd 					; execute END
.29a5	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.29a7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.29a8					Command_FOR:
.29a8	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.29aa	a2 0b		ldx #$0b			ldx 	#11
.29ac	20 7b 3c	jsr $3c7b			jsr 	RSClaim
.29af	20 c1 28	jsr $28c1			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.29b2	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.29b4	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.29b6	d0 4c		bne $2a04			bne 	_CFType
.29b8	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.29ba	20 48 3c	jsr $3c48			jsr 	CheckToken
.29bd	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.29bf	20 48 35	jsr $3548			jsr 	EvaluateInteger				; get terminal value in stack 1
.29c2	98		tya				tya
.29c3	48		pha				pha
.29c4	a0 04		ldy #$04			ldy 	#4
.29c6	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.29c8	91 37		sta ($37),y			sta 	(rsPointer),y
.29ca	c8		iny				iny
.29cb	a5 a0		lda $a0				lda		esInt1
.29cd	91 37		sta ($37),y			sta 	(rsPointer),y
.29cf	c8		iny				iny
.29d0	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.29d2	91 37		sta ($37),y			sta 	(rsPointer),y
.29d4	c8		iny				iny
.29d5	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.29d7	91 37		sta ($37),y			sta 	(rsPointer),y
.29d9	c8		iny				iny
.29da	a5 a1		lda $a1				lda		esInt1+1
.29dc	91 37		sta ($37),y			sta 	(rsPointer),y
.29de	c8		iny				iny
.29df	a5 a9		lda $a9				lda		esInt2+1
.29e1	91 37		sta ($37),y			sta 	(rsPointer),y
.29e3	c8		iny				iny
.29e4	a5 b1		lda $b1				lda		esInt3+1
.29e6	91 37		sta ($37),y			sta 	(rsPointer),y
.29e8	68		pla				pla
.29e9	a8		tay				tay
.29ea	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.29ec	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.29ee	d0 0e		bne $29fe			bne 	_CFDone
.29f0	c8		iny				iny									; skip over step.
.29f1	20 48 35	jsr $3548			jsr 	EvaluateInteger 			; get step
.29f4	98		tya				tya
.29f5	48		pha				pha
.29f6	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.29f8	a0 06		ldy #$06			ldy 	#6
.29fa	91 37		sta ($37),y			sta 	(rsPointer),y
.29fc	68		pla				pla
.29fd	a8		tay				tay
.29fe					_CFDone:
.29fe	a9 01		lda #$01			lda 	#1
.2a00	20 a7 3c	jsr $3ca7			jsr 	RSSavePosition 				; save position.
.2a03	60		rts				rts
.2a04					_CFType:
.2a04	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a06	20 18 15	jsr $1518		jsr	errorHandler
.2a09					Command_NEXT:
.2a09	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a0b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a0d	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2a0f	f0 05		beq $2a16			beq 	_isok
.2a11	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2a13	20 18 15	jsr $1518		jsr	errorHandler
.2a16					_isok:
.2a16	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2a18	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2a1a	b0 18		bcs $2a34			bcs 	_CNNoIndex
.2a1c	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2a1e	20 81 35	jsr $3581			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2a21	98		tya				tya
.2a22	48		pha				pha
.2a23	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2a25	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a27	d5 98		cmp $98,x			cmp 	esInt0,x
.2a29	d0 76		bne $2aa1			bne 	_CNBadIndex
.2a2b	c8		iny				iny
.2a2c	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a2e	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2a30	d0 6f		bne $2aa1			bne 	_CNBadIndex
.2a32	68		pla				pla
.2a33	a8		tay				tay
.2a34					_CNNoIndex:
.2a34	98		tya				tya
.2a35	48		pha				pha
.2a36	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2a38	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a3a	85 2a		sta $2a				sta 	temp0
.2a3c	c8		iny				iny
.2a3d	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a3f	85 2b		sta $2b				sta 	temp0+1
.2a41	c8		iny				iny
.2a42	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2a44	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2a46	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2a48	10 01		bpl $2a4b			bpl 	_CNSignX
.2a4a	ca		dex				dex  								; X = $FF
.2a4b					_CNSignX:
.2a4b	18		clc				clc 								; add to the LSB
.2a4c	a0 00		ldy #$00			ldy 	#0
.2a4e	71 2a		adc ($2a),y			adc 	(temp0),y
.2a50	91 2a		sta ($2a),y			sta 	(temp0),y
.2a52					_CNPropogate:
.2a52	c8		iny				iny  								; add the sign extended in X to the rest.
.2a53	8a		txa				txa
.2a54	71 2a		adc ($2a),y			adc 	(temp0),y
.2a56	91 2a		sta ($2a),y			sta 	(temp0),y
.2a58	c8		iny				iny
.2a59	8a		txa				txa
.2a5a	71 2a		adc ($2a),y			adc 	(temp0),y
.2a5c	91 2a		sta ($2a),y			sta 	(temp0),y
.2a5e	c8		iny				iny
.2a5f	8a		txa				txa
.2a60	71 2a		adc ($2a),y			adc 	(temp0),y
.2a62	91 2a		sta ($2a),y			sta 	(temp0),y
.2a64	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2a65	a5 37		lda $37				lda 	rsPointer
.2a67	69 07		adc #$07			adc 	#7
.2a69	85 2c		sta $2c				sta 	temp1
.2a6b	a9 00		lda #$00			lda 	#0
.2a6d	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2a6f	a8		tay				tay 								; and clear the Y register again.
.2a70	65 38		adc $38				adc 	rsPointer+1
.2a72	85 2d		sta $2d				sta 	temp1+1
.2a74	38		sec				sec 								; calculate current - limit oring interim values.
.2a75	20 ad 2a	jsr $2aad			jsr 	_CNCompare 					; each of these does a byte.
.2a78	20 ad 2a	jsr $2aad			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2a7b	20 ad 2a	jsr $2aad			jsr 	_CNCompare 					; and the carry of the subtraction.
.2a7e	20 ad 2a	jsr $2aad			jsr 	_CNCompare
.2a81	50 02		bvc $2a85			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2a83	49 80		eor #$80			eor 	#$80
.2a85					_CNNoOverflow:
.2a85	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2a87	30 1d		bmi $2aa6			bmi 	_CNCheckDownto
.2a89	c9 00		cmp #$00			cmp 	#0
.2a8b	30 0c		bmi $2a99			bmi 	_CNLoopRound 				; loop round if < =
.2a8d	a5 2e		lda $2e				lda 	temp2
.2a8f	f0 08		beq $2a99			beq 	_CNLoopRound
.2a91					_CNLoopExit:
.2a91	68		pla				pla
.2a92	a8		tay				tay
.2a93	a9 0b		lda #$0b			lda 	#11
.2a95	20 9d 3c	jsr $3c9d			jsr 	RSFree
.2a98	60		rts				rts
.2a99					_CNLoopRound:
.2a99	68		pla				pla
.2a9a	a8		tay				tay
.2a9b	a9 01		lda #$01			lda 	#1
.2a9d	20 ba 3c	jsr $3cba			jsr 	RSLoadPosition				; go back to the loop top
.2aa0	60		rts				rts
.2aa1					_CNBadIndex:
.2aa1	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2aa3	20 18 15	jsr $1518		jsr	errorHandler
.2aa6					_CNCheckDownto:
.2aa6	c9 00		cmp #$00			cmp 	#0
.2aa8	10 ef		bpl $2a99			bpl 	_CNLoopRound
.2aaa	4c 91 2a	jmp $2a91			jmp 	_CNLoopExit
.2aad					_CNCompare:
.2aad	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2aaf	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2ab1	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2ab3	85 2e		sta $2e				sta 	temp2
.2ab5	c8		iny				iny
.2ab6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2ab7					CommandIf:
.2ab7	20 46 35	jsr $3546			jsr 	EvaluateRootInteger 		; get what's being tested.
.2aba	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2abc	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2abe	f0 04		beq $2ac4			beq 	_IfSimple
.2ac0	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2ac2	d0 1b		bne $2adf			bne 	_IfComplex
.2ac4					_IfSimple:
.2ac4	20 07 3c	jsr $3c07			jsr 	MInt32Zero					; check if TOS zero
.2ac7	f0 10		beq $2ad9			beq 	_IfEOL 						; go to next line.
.2ac9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2acb	c8		iny				iny
.2acc	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2ace	f0 0c		beq $2adc			beq 	_IfGoto 					; do the Goto code
.2ad0	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2ad2	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2ad4	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2ad6	f0 04		beq $2adc			beq 	_IfGoto
.2ad8	60		rts				rts 								; else continue on this line.
.2ad9					_IfEOL:
.2ad9	4c 94 29	jmp $2994			jmp 	AdvanceNextLine 			; go to next line
.2adc					_IfGoto:
.2adc	4c cb 26	jmp $26cb			jmp 	CommandGoto
.2adf					_IfComplex:
.2adf	20 07 3c	jsr $3c07			jsr 	MInt32Zero 					; is it true ?
.2ae2	f0 01		beq $2ae5			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2ae4	60		rts				rts 								; else continue.
.2ae5					_IFSkip:
.2ae5	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2ae7	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2ae9	4c 81 2d	jmp $2d81			jmp		ScanForward
.2aec					Command_ELSE:
.2aec	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2aee	8a		txa				txa
.2aef	4c 81 2d	jmp $2d81			jmp		ScanForward
.2af2					Command_ENDIF:
.2af2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d03					storeSize:
>0d03							.fill 	1
.2af3					CommandLocal:
.2af3	a2 00		ldx #$00			ldx 	#0
.2af5	20 11 2b	jsr $2b11			jsr 	LocaliseVariable 			; localise one.
.2af8					_CLCheckNext:
.2af8	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2afa	c8		iny				iny
.2afb	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2afd	f0 06		beq $2b05			beq 	_CLAssignment
.2aff	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2b01	f0 f0		beq $2af3			beq 	CommandLocal
.2b03	88		dey				dey
.2b04	60		rts				rts
.2b05					_CLAssignment:
.2b05	a2 01		ldx #$01			ldx 	#1
.2b07	20 29 35	jsr $3529			jsr 	Evaluate 					; evaluate RHS
.2b0a	ca		dex				dex
.2b0b	20 d4 28	jsr $28d4			jsr 	WriteValue
.2b0e	4c f8 2a	jmp $2af8			jmp 	_CLCheckNext
.2b11					LocaliseVariable:
.2b11	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2b13	c9 40		cmp #$40			cmp 	#$40
.2b15	b0 67		bcs $2b7e			bcs 	_LVSyntax
.2b17	8a		txa				txa 								; get the address of that variable.
.2b18	a2 02		ldx #$02		ldx	#2
.2b1a	20 e5 4b	jsr $4be5		jsr	variableHandler
.2b1d	aa		tax				tax
.2b1e	8a		txa				txa
.2b1f	48		pha				pha
.2b20	98		tya				tya
.2b21	48		pha				pha
.2b22	20 36 29	jsr $2936			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2b25	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2b27	0a		asl a				asl 	a
.2b28	10 16		bpl $2b40			bpl 	_LVPushNumber
.2b2a	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2b2c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b2e	c8		iny				iny
.2b2f	85 2c		sta $2c				sta 	temp1
.2b31	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b33	85 2d		sta $2d				sta 	temp1+1
.2b35	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2b37	b1 2c		lda ($2c),y			lda 	(temp1),y
.2b39	aa		tax				tax 								; into X
.2b3a	e8		inx				inx 								; +1 for length.
.2b3b	a9 24		lda #$24			lda 	#markerString
.2b3d	4c 55 2b	jmp $2b55			jmp 	_LVWriteFrame
.2b40					_LVPushNumber:
.2b40	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2b42	85 2c		sta $2c				sta 	temp1
.2b44	a5 2b		lda $2b				lda 	temp0+1
.2b46	85 2d		sta $2d				sta 	temp1+1
.2b48	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2b4a	4a		lsr a				lsr 	a
.2b4b	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2b4d	a2 04		ldx #$04			ldx 	#VarISize
.2b4f	90 04		bcc $2b55			bcc 	_LVIsInteger
.2b51	a9 23		lda #$23			lda 	#markerFloat
.2b53	a2 06		ldx #$06			ldx 	#VarFSize
.2b55					_LVIsInteger:
.2b55					_LVWriteFrame:
.2b55	8e 03 0d	stx $0d03			stx 	storeSize 					; number of bytes to copy from (temp0)
.2b58	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2b59	e8		inx				inx
.2b5a	e8		inx				inx
.2b5b	20 7b 3c	jsr $3c7b			jsr 	RSClaim 					; create the stack frame.
.2b5e	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2b60	a0 01		ldy #$01			ldy 	#1
.2b62	91 37		sta ($37),y			sta 	(rsPointer),y
.2b64	c8		iny				iny
.2b65	a5 2b		lda $2b				lda 	temp0+1
.2b67	91 37		sta ($37),y			sta 	(rsPointer),y
.2b69	a0 00		ldy #$00			ldy 	#0
.2b6b					_LVCopyData:
.2b6b	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2b6d	c8		iny				iny 								; write allowing for the header bit.
.2b6e	c8		iny				iny
.2b6f	c8		iny				iny
.2b70	91 37		sta ($37),y			sta 	(rsPointer),y
.2b72	88		dey				dey
.2b73	88		dey				dey
.2b74	ce 03 0d	dec $0d03			dec 	storeSize 					; do it storesize times
.2b77	d0 f2		bne $2b6b			bne 	_LVCopyData
.2b79	68		pla				pla
.2b7a	a8		tay				tay
.2b7b	68		pla				pla
.2b7c	aa		tax				tax
.2b7d	60		rts				rts
.2b7e					_LVSyntax:
.2b7e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2b80	20 18 15	jsr $1518		jsr	errorHandler
.2b83					RestoreLocals:
.2b83	a2 00		ldx #$00			ldx 	#0
.2b85	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2b87	c9 40		cmp #$40			cmp	 	#64
.2b89	90 01		bcc $2b8c			bcc 	_RLocal
.2b8b	60		rts				rts
.2b8c					_RLocal:
.2b8c	8a		txa				txa
.2b8d	48		pha				pha
.2b8e	98		tya				tya
.2b8f	48		pha				pha
.2b90	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2b92	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b94	85 2a		sta $2a				sta 	temp0
.2b96	c8		iny				iny
.2b97	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b99	85 2b		sta $2b				sta 	temp0+1
.2b9b	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2b9d	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b9f	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2ba1	f0 28		beq $2bcb			beq 	_RString
.2ba3	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2ba5	c9 25		cmp #$25			cmp 	#markerInt
.2ba7	f0 02		beq $2bab			beq 	_RIsInteger
.2ba9	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2bab					_RIsInteger:
.2bab	8a		txa				txa
.2bac	48		pha				pha
.2bad	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2baf					_RCopyBack:
.2baf	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bb1	88		dey				dey
.2bb2	88		dey				dey
.2bb3	88		dey				dey
.2bb4	91 2a		sta ($2a),y			sta 	(temp0),y
.2bb6	c8		iny				iny
.2bb7	c8		iny				iny
.2bb8	c8		iny				iny
.2bb9	c8		iny				iny
.2bba	ca		dex				dex
.2bbb	d0 f2		bne $2baf			bne 	_RCopyBack
.2bbd	68		pla				pla 								; get size add 3
.2bbe	18		clc				clc
.2bbf	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2bc1					_RRestoreAAndLoop:
.2bc1	20 9d 3c	jsr $3c9d			jsr 	RSFree
.2bc4	68		pla				pla
.2bc5	a8		tay				tay
.2bc6	68		pla				pla
.2bc7	aa		tax				tax
.2bc8	4c 83 2b	jmp $2b83			jmp 	RestoreLocals 				; go see if there are any more locals.
.2bcb					_RString:
.2bcb	a2 00		ldx #$00			ldx 	#0
.2bcd	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2bcf	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bd1	95 98		sta $98,x			sta 	esInt0,x
.2bd3	c8		iny				iny
.2bd4	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bd6	95 a0		sta $a0,x			sta 	esInt1,x
.2bd8	18		clc				clc
.2bd9	a5 37		lda $37				lda 	rsPointer
.2bdb	69 03		adc #$03			adc 	#3
.2bdd	95 99		sta $99,x			sta 	esInt0+1,x
.2bdf	a5 38		lda $38				lda 	rsPointer+1
.2be1	69 00		adc #$00			adc 	#0
.2be3	95 a1		sta $a1,x			sta 	esInt1+1,x
.2be5	8a		txa				txa
.2be6	a2 10		ldx #$10		ldx	#16
.2be8	20 8b 3f	jsr $3f8b		jsr	stringHandler
.2beb	a0 03		ldy #$03			ldy 	#3 							; get string length
.2bed	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bef	18		clc				clc
.2bf0	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2bf2	4c c1 2b	jmp $2bc1			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d04					paramCount:
>0d04							.fill 	1
.2bf5					CallProc:
.2bf5	20 7d 2c	jsr $2c7d			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2bf8	48		pha				pha 								; save length on stack
.2bf9	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2bfb	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2bfd	48		pha				pha
.2bfe	a5 2a		lda $2a				lda 	temp0
.2c00	48		pha				pha
.2c01	98		tya				tya 								; calculate Y + length
.2c02	18		clc				clc
.2c03	65 32		adc $32				adc 	tempShort
.2c05	a8		tay				tay
.2c06	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2c08					_CallProcEvalParams:
.2c08	e8		inx				inx
.2c09	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2c0b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2c0d	f0 0b		beq $2c1a			beq 	_CPDoneParams
.2c0f	20 29 35	jsr $3529			jsr 	Evaluate 					; evaluate a parameter
.2c12	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2c14	c8		iny				iny
.2c15	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2c17	f0 ef		beq $2c08			beq 	_CallProcEvalParams
.2c19	88		dey				dey 								; undo consumption.
.2c1a					_CPDoneParams:
.2c1a	20 53 3c	jsr $3c53			jsr 	CheckRightParen 			; check closing parenthesis.
.2c1d	8e 04 0d	stx $0d04			stx 	paramCount 					; store parameter count+1
.2c20	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2c22	a9 50		lda #$50			lda 	#markerPROC
.2c24	20 7b 3c	jsr $3c7b			jsr 	RSClaim
.2c27	a9 01		lda #$01			lda 	#1 							; store return address.
.2c29	20 a7 3c	jsr $3ca7			jsr 	RSSavePosition
.2c2c	68		pla				pla 								; get the new code Ptr
.2c2d	85 28		sta $28				sta 	codePtr
.2c2f	68		pla				pla
.2c30	85 29		sta $29				sta 	codePtr+1
.2c32	68		pla				pla 								; length of name + 4 is the param start.
.2c33	18		clc				clc
.2c34	69 04		adc #$04			adc 	#4
.2c36	a8		tay				tay
.2c37	a2 ff		ldx #$ff			ldx 	#$FF
.2c39					_CPLoadParameters:
.2c39	e8		inx				inx 								; point to where the address should be loaded.
.2c3a	ec 04 0d	cpx $0d04			cpx 	paramCount 					; too many parameters in definition ?
.2c3d	f0 1e		beq $2c5d			beq 	_CPParamError
.2c3f	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2c41	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2c43	f0 0e		beq $2c53			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2c45	20 11 2b	jsr $2b11			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2c48	20 d4 28	jsr $28d4			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2c4b	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2c4d	c8		iny				iny
.2c4e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2c50	f0 e7		beq $2c39			beq 	_CPLoadParameters
.2c52	88		dey				dey 								; no, unconsume and check for )
.2c53					_CPParamComplete:
.2c53	20 53 3c	jsr $3c53			jsr 	CheckRightParen 			; check )
.2c56	e8		inx				inx 								; check right number of parameters have been consumed
.2c57	ec 04 0d	cpx $0d04			cpx 	paramCount
.2c5a	d0 01		bne $2c5d			bne 	_CPParamError
.2c5c	60		rts				rts
.2c5d					_CPParamError:
.2c5d	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2c5f	20 18 15	jsr $1518		jsr	errorHandler
.2c62					ReturnProc:
.2c62	20 83 2b	jsr $2b83			jsr 	RestoreLocals 				; get the locals back.
.2c65	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c67	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c69	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2c6b	f0 05		beq $2c72			beq 	_isok
.2c6d	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2c6f	20 18 15	jsr $1518		jsr	errorHandler
.2c72					_isok:
.2c72	a9 01		lda #$01			lda 	#1
.2c74	20 ba 3c	jsr $3cba			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2c77	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2c79	20 9d 3c	jsr $3c9d			jsr 	RSFree
.2c7c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d05					procList:
>0d05							.fill 	2		 					; terminated by name high being zero.
.0d07					yInLine:
>0d07							.fill 	1
.2c7d					FindProcedure:
.2c7d	8c 07 0d	sty $0d07			sty 	yInLine 					; save current position.
.2c80	20 3b 2d	jsr $2d3b			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2c83	85 2c		sta $2c				sta 	temp1
.2c85	ad 05 0d	lda $0d05			lda		procList 					; put procList address in temp2
.2c88	85 2e		sta $2e				sta 	temp2
.2c8a	ad 06 0d	lda $0d06			lda 	procList+1
.2c8d	85 2f		sta $2f				sta 	temp2+1
.2c8f	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2c91					_FPLoop:
.2c91	b1 2e		lda ($2e),y			lda 	(temp2),y
.2c93	f0 4f		beq $2ce4			beq 	_FPError 					; if so, we don't know this procedure.
.2c95	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2c97	c8		iny				iny
.2c98	b1 2e		lda ($2e),y			lda 	(temp2),y
.2c9a	85 2a		sta $2a				sta 	temp0
.2c9c	c8		iny				iny
.2c9d	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2c9f	c5 2c		cmp $2c				cmp 	temp1
.2ca1	d0 2b		bne $2cce			bne 	_FPNext 					; hash is different, go to next.
.2ca3	38		sec				sec
.2ca4	ad 07 0d	lda $0d07			lda 	yInLine 					; position in line must be at least 4
.2ca7	e9 04		sbc #$04			sbc 	#4
.2ca9	18		clc				clc
.2caa	65 28		adc $28				adc 	codePtr
.2cac	85 30		sta $30				sta 	temp3
.2cae	a5 29		lda $29				lda 	codePtr+1
.2cb0	69 00		adc #$00			adc 	#0
.2cb2	85 31		sta $31				sta 	temp3+1
.2cb4	98		tya				tya
.2cb5	48		pha				pha
.2cb6	a0 04		ldy #$04			ldy 	#4
.2cb8					_FPCName:
.2cb8	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2cba	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2cbc	d0 0e		bne $2ccc			bne 	_FPpulYNext 				; if different go to next one.
.2cbe	c8		iny				iny
.2cbf	c9 3a		cmp #$3a			cmp 	#$3A
.2cc1	90 f5		bcc $2cb8			bcc 	_FPCName 					; compare the whole lot....
.2cc3	68		pla				pla 								; throw away the saved Y
.2cc4	98		tya				tya 								; length of name is Y-4
.2cc5	38		sec				sec
.2cc6	e9 04		sbc #$04			sbc 	#4
.2cc8	ac 07 0d	ldy $0d07			ldy 	yInLine  					; get the original Y back
.2ccb	60		rts				rts
.2ccc					_FPpulYNext:
.2ccc	68		pla				pla
.2ccd	a8		tay				tay
.2cce					_FPNext:
.2cce	c8		iny				iny 								; next procedure record.
.2ccf	10 c0		bpl $2c91			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2cd1	98		tya				tya 								; subtract 128 from Y
.2cd2	38		sec				sec
.2cd3	e9 80		sbc #$80			sbc 	#128
.2cd5	a8		tay				tay
.2cd6	18		clc				clc 								; add 128 to temp2, so we can have more than
.2cd7	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2cd9	69 80		adc #$80			adc 	#128
.2cdb	85 2e		sta $2e				sta 	temp2
.2cdd	90 b2		bcc $2c91			bcc 	_FPLoop
.2cdf	e6 2f		inc $2f				inc 	temp2+1
.2ce1	4c 91 2c	jmp $2c91			jmp 	_FPLoop
.2ce4					_FPError:
.2ce4	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2ce6	20 18 15	jsr $1518		jsr	errorHandler
.2ce9					ScanProc:
.2ce9	98		tya				tya
.2cea	48		pha				pha
.2ceb	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2ced	8d 05 0d	sta $0d05			sta 	procList
.2cf0	a5 36		lda $36				lda 	lowMemory+1
.2cf2	8d 06 0d	sta $0d06			sta 	procList+1
.2cf5	20 67 30	jsr $3067			jsr 	ResetCodeAddress 			; back to the start.
.2cf8					_ScanLoop:
.2cf8	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2cfa	b1 28		lda ($28),y			lda 	(codePtr),y
.2cfc	f0 2a		beq $2d28			beq 	_ScanExit
.2cfe	a0 03		ldy #$03			ldy 	#3							; get first token
.2d00	b1 28		lda ($28),y			lda 	(codePtr),y
.2d02	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2d04	d0 12		bne $2d18			bne 	_ScanNext
.2d06	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2d08	20 30 2d	jsr $2d30			jsr 	_ScanWrite
.2d0b	a5 28		lda $28				lda 	codePtr
.2d0d	20 30 2d	jsr $2d30			jsr 	_ScanWrite
.2d10	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2d12	20 3b 2d	jsr $2d3b			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2d15	20 30 2d	jsr $2d30			jsr 	_ScanWrite					; and write that
.2d18					_ScanNext:
.2d18	18		clc				clc
.2d19	a0 00		ldy #$00			ldy 	#0
.2d1b	b1 28		lda ($28),y			lda 	(codePtr),y
.2d1d	65 28		adc $28				adc 	codePtr
.2d1f	85 28		sta $28				sta 	codePtr
.2d21	90 d5		bcc $2cf8			bcc 	_ScanLoop
.2d23	e6 29		inc $29				inc 	codePtr+1
.2d25	4c f8 2c	jmp $2cf8			jmp 	_ScanLoop
.2d28					_ScanExit:
.2d28	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2d2a	20 30 2d	jsr $2d30			jsr 	_ScanWrite
.2d2d	68		pla				pla
.2d2e	a8		tay				tay
.2d2f	60		rts				rts
.2d30					_ScanWrite:
.2d30	a0 00		ldy #$00			ldy 	#0
.2d32	91 35		sta ($35),y			sta 	(lowMemory),y
.2d34	e6 35		inc $35				inc 	lowMemory
.2d36	d0 02		bne $2d3a			bne 	_SWNoCarry
.2d38	e6 36		inc $36				inc 	lowMemory+1
.2d3a					_SWNoCarry:
.2d3a	60		rts				rts
.2d3b					CalculateProcedureHash:
.2d3b	a9 00		lda #$00			lda 	#0 							; clear hash.
.2d3d	85 2a		sta $2a				sta 	temp0
.2d3f					_CPHLoop:
.2d3f	18		clc				clc 								; add character and rotate and add carry back in
.2d40	b1 28		lda ($28),y			lda 	(codePtr),y
.2d42	65 2a		adc $2a				adc 	temp0
.2d44	6a		ror a				ror 	a
.2d45	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2d47	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2d49	b1 28		lda ($28),y			lda 	(codePtr),y
.2d4b	c8		iny				iny 								; advance incase we go round again.
.2d4c	c9 3a		cmp #$3a			cmp 	#$3A
.2d4e	90 ef		bcc $2d3f			bcc 	_CPHLoop
.2d50	a5 2a		lda $2a				lda 	temp0
.2d52	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2d53					Command_Repeat:
.2d53	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2d55	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2d57	20 7b 3c	jsr $3c7b			jsr 	RSClaim
.2d5a	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2d5c	20 a7 3c	jsr $3ca7			jsr 	RSSavePosition
.2d5f	60		rts				rts
.2d60					Command_Until:
.2d60	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d62	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d64	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2d66	f0 05		beq $2d6d			beq 	_isok
.2d68	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2d6a	20 18 15	jsr $1518		jsr	errorHandler
.2d6d					_isok:
.2d6d	20 46 35	jsr $3546			jsr 	EvaluateRootInteger 		; at the bottom.
.2d70	20 07 3c	jsr $3c07			jsr 	MInt32Zero					; check if TOS zero
.2d73	d0 06		bne $2d7b			bne 	_CUExit
.2d75	a9 01		lda #$01			lda 	#1
.2d77	20 ba 3c	jsr $3cba			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2d7a	60		rts				rts
.2d7b					_CUExit:
.2d7b	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2d7d	20 9d 3c	jsr $3c9d			jsr 	RSFree
.2d80	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2d81					ScanForward:
.2d81	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2d83	86 2d		stx $2d				stx 	temp1+1
.2d85	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2d87	85 2e		sta $2e				sta 	temp2
.2d89	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2d8b	c8		iny				iny
.2d8c	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2d8e	d0 08		bne $2d98			bne 	_SFNoCheck 					; if so, check token against entered values.
.2d90	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2d92	f0 24		beq $2db8			beq 	_SFExit 					; at the same strcture depth.
.2d94	c5 2d		cmp $2d				cmp 	temp1+1
.2d96	f0 20		beq $2db8			beq 	_SFExit
.2d98					_SFNoCheck:
.2d98	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2d9a	90 ed		bcc $2d89			bcc 	_SFLoop
.2d9c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2d9e	90 19		bcc $2db9			bcc 	_SFSpecials
.2da0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2da2	90 e5		bcc $2d89			bcc 	_SFLoop
.2da4	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2da6	b0 e1		bcs $2d89			bcs 	_SFLoop
.2da8	aa		tax				tax  								; token in X, and look up the adjuster.
.2da9	bd 64 34	lda $3464,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2dac	38		sec				sec 								; convert to an offset ($FF,$01)
.2dad	e9 81		sbc #$81			sbc 	#$81
.2daf	18		clc				clc 								; add to depth
.2db0	65 2e		adc $2e				adc 	temp2
.2db2	85 2e		sta $2e				sta 	temp2
.2db4	10 d3		bpl $2d89			bpl 	_SFLoop 					; +ve okay to continue
.2db6	30 07		bmi $2dbf			bmi 	SFError 					; if gone -ve then we have a nesting error
.2db8	60		rts		_SFExit:rts
.2db9					_SFSpecials:
.2db9	20 c4 2d	jsr $2dc4			jsr 	ScannerSkipSpecial
.2dbc	4c 89 2d	jmp $2d89			jmp 	_SFLoop
.2dbf					SFError:
.2dbf	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2dc1	20 18 15	jsr $1518		jsr	errorHandler
.2dc4					ScannerSkipSpecial:
.2dc4	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2dc6	f0 10		beq $2dd8			beq 	_SFNextLine
.2dc8	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2dca	f0 2b		beq $2df7			beq 	_SFFloatSkip
.2dcc	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2dce	f0 02		beq $2dd2			beq 	_SFSkipString
.2dd0	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2dd1	60		rts				rts 								; token.
.2dd2					_SFSkipString:
.2dd2	98		tya				tya
.2dd3	38		sec				sec
.2dd4	71 28		adc ($28),y			adc 	(codePtr),y
.2dd6	a8		tay				tay
.2dd7	60		rts				rts
.2dd8					_SFNextLine:
.2dd8	a0 00		ldy #$00			ldy 	#0 							; get offset
.2dda	b1 28		lda ($28),y			lda 	(codePtr),y
.2ddc	18		clc				clc 								; add to code pointer.
.2ddd	65 28		adc $28				adc 	codePtr
.2ddf	85 28		sta $28				sta 	codePtr
.2de1	90 02		bcc $2de5			bcc		_SFNLNoCarry
.2de3	e6 29		inc $29				inc 	codePtr+1
.2de5					_SFNLNoCarry:
.2de5	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2de7	d0 0b		bne $2df4			bne		_SFXNL 						; no go round again
.2de9	a5 2c		lda $2c				lda 	temp1
.2deb	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2ded	d0 d0		bne $2dbf			bne 	SFError 					; read uses this to search for data statements
.2def	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2df1	20 18 15	jsr $1518		jsr	errorHandler
.2df4	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2df6	60		rts				rts
.2df7					_SFFloatSkip:
.2df7	98		tya				tya 								; skip over an embedded float.
.2df8	18		clc				clc
.2df9	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2dfb	a8		tay				tay
.2dfc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2dfd					Command_While:
.2dfd	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2dff	a2 04		ldx #$04			ldx 	#4
.2e01	20 7b 3c	jsr $3c7b			jsr 	RSClaim 					; create on stack.
.2e04	88		dey				dey
.2e05	a9 01		lda #$01			lda 	#1
.2e07	20 a7 3c	jsr $3ca7			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2e0a	c8		iny				iny
.2e0b	20 46 35	jsr $3546			jsr 	EvaluateRootInteger			; get the conditional
.2e0e	20 07 3c	jsr $3c07			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2e11	f0 01		beq $2e14			beq 	_CWFail
.2e13	60		rts				rts
.2e14					_CWFail:
.2e14	a9 04		lda #$04			lda 	#4
.2e16	20 9d 3c	jsr $3c9d			jsr 	RSFree 						; close the just opened position.
.2e19	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2e1b	aa		tax				tax
.2e1c	20 81 2d	jsr $2d81			jsr 	ScanForward
.2e1f	60		rts				rts
.2e20					Command_Wend:
.2e20	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2e22	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2e24	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2e26	f0 05		beq $2e2d			beq 	_isok
.2e28	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2e2a	20 18 15	jsr $1518		jsr	errorHandler
.2e2d					_isok:
.2e2d	a9 01		lda #$01			lda 	#1
.2e2f	20 ba 3c	jsr $3cba			jsr 	RSLoadPosition				; go back until true
.2e32	a9 04		lda #$04			lda 	#4
.2e34	20 9d 3c	jsr $3c9d			jsr 	RSFree 						; close the loop
.2e37	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2e38					CommandClear:
.2e38					XCommandClear:
.2e38	98		tya				tya
.2e39	48		pha				pha
.2e3a	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2e3d	85 33		sta $33				sta 	highMemory
.2e3f	ad cd 0a	lda $0acd			lda 	endMemory+1
.2e42	85 34		sta $34				sta 	highMemory+1
.2e44	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2e47	85 2a		sta $2a				sta 	temp0
.2e49	ad c9 0a	lda $0ac9			lda 	basePage+1
.2e4c	85 2b		sta $2b				sta 	temp0+1
.2e4e					_CCFindEnd:
.2e4e	a0 00		ldy #$00			ldy 	#0
.2e50	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e52	f0 0c		beq $2e60			beq 	_CCFoundEnd 				; offset zero is end.
.2e54	18		clc				clc
.2e55	65 2a		adc $2a				adc 	temp0 						; move to next line
.2e57	85 2a		sta $2a				sta 	temp0
.2e59	90 f3		bcc $2e4e			bcc 	_CCFindEnd
.2e5b	e6 2b		inc $2b				inc 	temp0+1
.2e5d	4c 4e 2e	jmp $2e4e			jmp 	_CCFindEnd
.2e60					_CCFoundEnd:
.2e60	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2e62	85 35		sta $35				sta 	lowMemory
.2e64	a5 2b		lda $2b				lda 	temp0+1
.2e66	85 36		sta $36				sta 	lowMemory+1
.2e68	18		clc				clc 								; put temp0+1 in endProgram
.2e69	a5 2a		lda $2a				lda 	temp0
.2e6b	69 01		adc #$01			adc 	#1
.2e6d	8d ca 0a	sta $0aca			sta 	endProgram
.2e70	a5 2b		lda $2b				lda 	temp0+1
.2e72	69 00		adc #$00			adc 	#0
.2e74	8d cb 0a	sta $0acb			sta 	endProgram+1
.2e77	18		clc				clc 								; put a bit of space in.
.2e78	a5 35		lda $35				lda 	lowMemory
.2e7a	69 04		adc #$04			adc 	#4
.2e7c	85 35		sta $35				sta 	lowMemory
.2e7e	90 02		bcc $2e82			bcc 	_CCNoCarry
.2e80	e6 36		inc $36				inc 	lowMemory+1
.2e82					_CCNoCarry:
.2e82	20 6d 3c	jsr $3c6d			jsr 	RSReset 					; reset the return stack.
.2e85	a2 06		ldx #$06		ldx	#6
.2e87	20 e5 4b	jsr $4be5		jsr	variableHandler
.2e8a	20 e9 2c	jsr $2ce9			jsr 	ScanProc 					; scan for procedures
.2e8d	20 6e 26	jsr $266e			jsr 	CommandRestore 				; do a restore
.2e90	68		pla				pla
.2e91	a8		tay				tay
.2e92	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d08					structIndent:
>0d08							.fill 	1
.2e93					CommandList:
.2e93	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2e95	8e 08 0d	stx $0d08			stx 	structIndent
.2e98	20 e0 3b	jsr $3be0			jsr 	MInt32False
.2e9b	e8		inx				inx
.2e9c	20 dc 3b	jsr $3bdc			jsr 	MInt32True
.2e9f	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2ea1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2ea3	f0 15		beq $2eba			beq 	_CLEndLine
.2ea5	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2ea7	30 1b		bmi $2ec4			bmi 	_CLDoListing 				; do the whole lot.
.2ea9	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2eab	20 48 35	jsr $3548			jsr 	EvaluateInteger
.2eae	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2eb0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2eb2	f0 06		beq $2eba			beq 	_CLEndLine
.2eb4	20 1e 3b	jsr $3b1e			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2eb7	4c c4 2e	jmp $2ec4			jmp 	_CLDoListing 				; own e.g. list 1100
.2eba					_CLEndLine:
.2eba	c8		iny				iny 								; skip comma
.2ebb	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2ebd	30 05		bmi $2ec4			bmi 	_CLDoListing
.2ebf	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2ec1	20 48 35	jsr $3548			jsr 	EvaluateInteger				; get end
.2ec4					_CLDoListing:
.2ec4	20 67 30	jsr $3067			jsr 	ResetCodeAddress 			; back to the start.
.2ec7					_CLCheckLoop:
.2ec7	a2 02		ldx #$02		ldx	#2
.2ec9	20 f6 14	jsr $14f6		jsr	deviceHandler
.2ecc	a0 00		ldy #$00			ldy 	#0							; check end.
.2ece	b1 28		lda ($28),y			lda 	(codePtr),y
.2ed0	f0 41		beq $2f13			beq 	_CLEnd
.2ed2	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2ed4	20 16 2f	jsr $2f16			jsr 	CLCompareLineTOS
.2ed7	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2ed9	f0 28		beq $2f03			beq 	_CLNext
.2edb	e8		inx				inx
.2edc	20 16 2f	jsr $2f16			jsr 	CLCompareLineTOS 			; compare vs higher
.2edf	c9 01		cmp #$01			cmp 	#1
.2ee1	f0 20		beq $2f03			beq 	_CLNext
.2ee3	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2ee5	20 38 2f	jsr $2f38			jsr 	CLStructureCheck
.2ee8	ad 08 0d	lda $0d08			lda 	structIndent 				; indent level.
.2eeb	10 02		bpl $2eef			bpl 	_CLPositive
.2eed	a9 00		lda #$00			lda 	#0
.2eef					_CLPositive:
.2eef	a2 04		ldx #$04		ldx	#4
.2ef1	20 14 48	jsr $4814		jsr	tokeniserHandler
.2ef4	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2ef6	20 38 2f	jsr $2f38			jsr 	CLStructureCheck
.2ef9	ad 08 0d	lda $0d08			lda 	structIndent
.2efc	10 05		bpl $2f03			bpl 	_CLNext
.2efe	a9 00		lda #$00			lda 	#0
.2f00	8d 08 0d	sta $0d08			sta 	structIndent
.2f03					_CLNext:
.2f03	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2f05	b1 28		lda ($28),y			lda 	(codePtr),y
.2f07	18		clc				clc
.2f08	65 28		adc $28				adc 	codePtr
.2f0a	85 28		sta $28				sta 	codePtr
.2f0c	90 b9		bcc $2ec7			bcc 	_CLCheckLoop
.2f0e	e6 29		inc $29				inc 	codePtr+1
.2f10	4c c7 2e	jmp $2ec7			jmp 	_CLCheckLoop
.2f13					_CLEnd:
.2f13	4c c9 3c	jmp $3cc9			jmp 	WarmStart 					; warm start after list.
.2f16					CLCompareLineTOS:
.2f16	a0 01		ldy #$01			ldy 	#1
.2f18	b1 28		lda ($28),y			lda 	(codePtr),y
.2f1a	55 98		eor $98,x			eor 	esInt0,x
.2f1c	85 2a		sta $2a				sta 	temp0
.2f1e	c8		iny				iny
.2f1f	b1 28		lda ($28),y			lda 	(codePtr),y
.2f21	55 a0		eor $a0,x			eor 	esInt1,x
.2f23	05 2a		ora $2a				ora 	temp0
.2f25	f0 10		beq $2f37			beq 	_CLCLTExit
.2f27	88		dey				dey
.2f28	b1 28		lda ($28),y			lda 	(codePtr),y
.2f2a	d5 98		cmp $98,x			cmp 	esInt0,x
.2f2c	c8		iny				iny
.2f2d	b1 28		lda ($28),y			lda 	(codePtr),y
.2f2f	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2f31	a9 ff		lda #$ff			lda 	#255
.2f33	90 02		bcc $2f37			bcc 	_CLCLTExit
.2f35	a9 01		lda #$01			lda 	#1
.2f37					_CLCLTExit:
.2f37	60		rts				rts
.2f38					CLStructureCheck:
.2f38	85 2a		sta $2a				sta 	temp0
.2f3a	a0 03		ldy #$03			ldy 	#3
.2f3c					_CLSCLoop:
.2f3c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2f3e	c8		iny				iny
.2f3f	c9 80		cmp #$80			cmp 	#$80
.2f41	90 f9		bcc $2f3c			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2f43	f0 28		beq $2f6d			beq		_CLSCExit					; EOL return
.2f45	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2f47	90 1e		bcc $2f67			bcc 	_CLSCSpecial
.2f49	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2f4b	90 ef		bcc $2f3c			bcc 	_CLSCLoop
.2f4d	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2f4f	b0 eb		bcs $2f3c			bcs 	_CLSCLoop
.2f51	aa		tax				tax 								; get adjustment
.2f52	bd 64 34	lda $3464,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2f55	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2f57	d0 e3		bne $2f3c			bne 	_CLSCLoop
.2f59	38		sec				sec
.2f5a	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2f5c	0a		asl a				asl 	a 							; double indent step
.2f5d	18		clc				clc
.2f5e	6d 08 0d	adc $0d08			adc 	structIndent 				; add to structure indent
.2f61	8d 08 0d	sta $0d08			sta 	structIndent
.2f64	4c 3c 2f	jmp $2f3c			jmp 	_CLSCLoop
.2f67					_CLSCSpecial:
.2f67	20 c4 2d	jsr $2dc4			jsr 	ScannerSkipSpecial
.2f6a	4c 3c 2f	jmp $2f3c			jmp 	_CLSCLoop
.2f6d					_CLSCExit:
.2f6d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2f6e					CommandLoad:
.2f6e	20 96 2f	jsr $2f96			jsr 	CLSParameters 					; get parameters for load.
.2f71	08		php				php
.2f72	a2 0e		ldx #$0e		ldx	#14
.2f74	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f77	28		plp				plp
.2f78	b0 08		bcs $2f82			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2f7a	20 38 2e	jsr $2e38			jsr 	CommandClear
.2f7d	a2 04		ldx #$04		ldx	#4
.2f7f	20 30 26	jsr $2630		jsr	interactionHandler
.2f82					_CLExit
.2f82	60		rts				rts
.2f83					CommandSave:
.2f83	20 96 2f	jsr $2f96			jsr 	CLSParameters					; get parameters for save
.2f86	90 08		bcc $2f90			bcc 	_CSNoOverrideAddress
.2f88	20 60 3c	jsr $3c60			jsr 	CheckComma 						; should be a comma.
.2f8b	a2 02		ldx #$02			ldx 	#2
.2f8d	20 48 35	jsr $3548			jsr 	EvaluateInteger 				; get save end address.
.2f90					_CSNoOverrideAddress:
.2f90	a2 18		ldx #$18		ldx	#24
.2f92	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f95	60		rts				rts
.2f96					CLSParameters:
.2f96	a2 00		ldx #$00			ldx 	#0 								; string
.2f98	20 3d 35	jsr $353d			jsr 	EvaluateString
.2f9b	e8		inx				inx 									; erase out +1 +2
.2f9c	20 e0 3b	jsr $3be0			jsr 	MInt32False
.2f9f	e8		inx				inx
.2fa0	20 e0 3b	jsr $3be0			jsr 	MInt32False
.2fa3	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2fa6	85 99		sta $99				sta 	esInt0+1
.2fa8	ad c9 0a	lda $0ac9			lda 	basePage+1
.2fab	85 a1		sta $a1				sta 	esInt1+1
.2fad	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2fb0	85 9a		sta $9a				sta 	esInt0+2
.2fb2	ad cb 0a	lda $0acb			lda 	endProgram+1
.2fb5	85 a2		sta $a2				sta 	esInt1+2
.2fb7	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2fb9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2fbb	d0 08		bne $2fc5			bne 	_CLSDefault
.2fbd	c8		iny				iny 									; skip comma
.2fbe	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2fc0	20 48 35	jsr $3548			jsr 	EvaluateInteger
.2fc3	38		sec				sec
.2fc4	60		rts				rts
.2fc5					_CLSDefault:
.2fc5	18		clc				clc
.2fc6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2fc7					Command_New:
.2fc7					Command_XNew:
.2fc7	20 67 30	jsr $3067			jsr 	ResetCodeAddress 			; point to first line
.2fca	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2fcc	98		tya				tya
.2fcd	91 28		sta ($28),y			sta 	(codePtr),y
.2fcf	20 38 2e	jsr $2e38			jsr 	CommandClear 				; clear everything down.
.2fd2	4c 8e 29	jmp $298e			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d09					breakCounter:
>0d09								.fill 	1
.0d0a					breakIncrement:
>0d0a								.fill 	1
.2fd5					Command_Run:
.2fd5					XCommand_Run:
.2fd5	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2fd7	9a		txs				txs
.2fd8	20 61 30	jsr $3061			jsr 	BreakOn 					; turn break on
.2fdb	20 38 2e	jsr $2e38			jsr 	CommandClear 				; clear everything.
.2fde	20 67 30	jsr $3067			jsr 	ResetCodeAddress 			; back to the start.
.2fe1					Command_RunFrom:
.2fe1	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2fe3					CRNextInstruction:
.2fe3	a9 00		lda #$00			lda 	#0
.2fe5	85 3a		sta $3a				sta 	softMemAlloc+1
.2fe7	ad 09 0d	lda $0d09			lda 	breakCounter 				; check for break.
.2fea	6d 0a 0d	adc $0d0a			adc 	breakIncrement
.2fed	8d 09 0d	sta $0d09			sta 	breakCounter
.2ff0	90 05		bcc $2ff7			bcc 	_CRNoChecks
.2ff2	a2 02		ldx #$02		ldx	#2
.2ff4	20 f6 14	jsr $14f6		jsr	deviceHandler
.2ff7					_CRNoChecks
.2ff7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2ff9	10 1c		bpl $3017			bpl 	_CRNotToken
.2ffb	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2ffd	b0 0c		bcs $300b			bcs 	_CRExecute
.2fff	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.3001	b0 71		bcs $3074			bcs 	Unimplemented
.3003	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.3005	b0 04		bcs $300b			bcs 	_CRExecute
.3007	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.3009	b0 16		bcs $3021			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.300b					_CRExecute:
.300b	c8		iny				iny 								; consume it.
.300c	0a		asl a				asl 	a 							; double it, losing most significant bit.
.300d	aa		tax				tax
.300e	20 14 30	jsr $3014			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.3011	4c e3 2f	jmp $2fe3			jmp 	CRNextInstruction
.3014					_CRRunRoutine:
.3014	7c 7e 30	jmp ($307e,x)			jmp 	(Group0Vectors,x)
.3017					_CRNotToken:
.3017	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.3019	b0 59		bcs $3074			bcs 	Unimplemented
.301b					_CRDefaultLet:
.301b	20 c1 28	jsr $28c1			jsr 	CommandLet 					; do the default, LET
.301e	4c e3 2f	jmp $2fe3			jmp 	CRNextInstruction
.3021					_CRCheckIndirect:
.3021	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.3023	f0 0a		beq $302f			beq 	_CRAndCommand
.3025	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.3027	f0 f2		beq $301b			beq 	_CRDefaultLet
.3029	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.302b	f0 ee		beq $301b			beq 	_CRDefaultLet
.302d	d0 45		bne $3074			bne 	Unimplemented
.302f					_CRAndCommand:
.302f	c8		iny				iny 								; skip over the AND token
.3030	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.3032	20 4c 30	jsr $304c			jsr 	CommandAssembler 			; do the assembler command
.3035	4c e3 2f	jmp $2fe3			jmp 	CRNextInstruction 			; and loop round.
.3038					CommandShift1:
.3038	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.303a	10 38		bpl $3074			bpl 	Unimplemented 				; we have an error as this should not happen.
.303c	c8		iny				iny 								; advance over it.
.303d	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.303f	b0 0b		bcs $304c			bcs 	CommandAssembler
.3041	0a		asl a				asl 	a 							; double into X
.3042	aa		tax				tax
.3043	7c 44 31	jmp ($3144,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.3046					CommandShift2:
.3046	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.3048	20 69 18	jsr $1869		jsr	extensionHandler
.304b	60		rts				rts
.304c					CommandAssembler:
.304c	a2 02		ldx #$02		ldx	#2
.304e	20 b4 13	jsr $13b4		jsr	assemblerHandler
.3051	60		rts				rts
.3052					CommandAssemblerLabel:
.3052	a2 04		ldx #$04		ldx	#4
.3054	20 b4 13	jsr $13b4		jsr	assemblerHandler
.3057	60		rts				rts
.3058					CommandColon:
.3058	60		rts				rts
.3059					CommandBreak:
.3059	20 46 35	jsr $3546			jsr 	EvaluateRootInteger
.305c	20 07 3c	jsr $3c07			jsr 	MInt32Zero
.305f	f0 02		beq $3063			beq 	BreakOff
.3061					BreakOn:
.3061	a2 08		ldx #$08			ldx 	#8
.3063					BreakOff:
.3063	8e 0a 0d	stx $0d0a			stx 	breakIncrement
.3066	60		rts				rts
.3067					ResetCodeAddress:
.3067	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.306a	85 28		sta $28				sta 	codePtr
.306c	ad c9 0a	lda $0ac9			lda 	basePage+1
.306f	85 29		sta $29				sta 	codePtr+1
.3071	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.3073	60		rts				rts
.3074					Unimplemented:
.3074	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.3076	20 18 15	jsr $1518		jsr	errorHandler
.3079					TKErr01:
.3079					TKErr02:
.3079					TKErr03:
.3079					TKErr04:
.3079					TKErr05:
.3079					TKErr06:
.3079					TKErr07:
.3079					TKErr08:
.3079					TKErr09:
.3079					TKErr10:
.3079					TKErr11:
.3079					TKErr12:
.3079					TKErr13:
.3079					TKErr14:
.3079					TKErr15:
.3079	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.307b	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.307e					Group0Vectors:
>307e	94 29					.word	AdvanceNextLine          ; $80 [[eol]]
>3080	38 30					.word	CommandShift1            ; $81 [[sh1]]
>3082	46 30					.word	CommandShift2            ; $82 [[sh2]]
>3084	79 30					.word	TKErr09                  ; $83 [[sh3]]
>3086	79 30					.word	TKErr10                  ; $84 [[fpc]]
>3088	79 30					.word	TKErr08                  ; $85 [[str]]
>308a	2d 32					.word	AndHandler               ; $86 and
>308c	1a 32					.word	OrHandler                ; $87 or
>308e	07 32					.word	XorHandler               ; $88 xor
>3090	4f 33					.word	CompareGreaterEq         ; $89 >=
>3092	59 33					.word	CompareLessEq            ; $8a <=
>3094	3b 33					.word	CompareGreater           ; $8b >
>3096	31 33					.word	CompareLess              ; $8c <
>3098	27 33					.word	CompareEquals            ; $8d =
>309a	45 33					.word	CompareNotEquals         ; $8e <>
>309c	98 31					.word	AddHandler               ; $8f +
>309e	bb 31					.word	SubHandler               ; $90 -
>30a0	53 32					.word	ShrHandler               ; $91 >>
>30a2	40 32					.word	ShlHandler               ; $92 <<
>30a4	ce 31					.word	MulHandler               ; $93 *
>30a6	e1 31					.word	DivHandler               ; $94 /
>30a8	f4 31					.word	ModHandler               ; $95 mod
>30aa	8c 32					.word	PowerHandler             ; $96 ^
>30ac	66 32					.word	WordRefHandler           ; $97 !
>30ae	79 32					.word	ByteRefHandler           ; $98 ?
>30b0	53 2d					.word	Command_Repeat           ; $99 repeat
>30b2	fd 2d					.word	Command_While            ; $9a while
>30b4	a8 29					.word	Command_FOR              ; $9b for
>30b6	b7 2a					.word	CommandIf                ; $9c if
>30b8	79 30					.word	TKErr04                  ; $9d defproc
>30ba	60 2d					.word	Command_Until            ; $9e until
>30bc	20 2e					.word	Command_Wend             ; $9f wend
>30be	09 2a					.word	Command_NEXT             ; $a0 next
>30c0	79 30					.word	TKErr06                  ; $a1 then
>30c2	f2 2a					.word	Command_ENDIF            ; $a2 endif
>30c4	62 2c					.word	ReturnProc               ; $a3 endproc
>30c6	b3 34					.word	UnaryParenthesis         ; $a4 (
>30c8	95 36					.word	UnaryLen                 ; $a5 len(
>30ca	d9 36					.word	UnarySgn                 ; $a6 sgn(
>30cc	c2 36					.word	UnaryAbs                 ; $a7 abs(
>30ce	32 37					.word	Unary_Random             ; $a8 random(
>30d0	7c 37					.word	Unary_Page               ; $a9 page
>30d2	dc 3b					.word	MInt32True               ; $aa true
>30d4	e0 3b					.word	MInt32False              ; $ab false
>30d6	47 37					.word	Unary_Min                ; $ac min(
>30d8	4b 37					.word	Unary_Max                ; $ad max(
>30da	54 38					.word	UnarySys                 ; $ae sys(
>30dc	fd 37					.word	UnaryTimer               ; $af timer(
>30de	12 36					.word	EventFunction            ; $b0 event(
>30e0	26 38					.word	UnaryGet                 ; $b1 get(
>30e2	16 38					.word	UnaryInkey               ; $b2 inkey(
>30e4	cd 37					.word	UnaryAlloc               ; $b3 alloc(
>30e6	8d 38					.word	ExecChr                  ; $b4 chr$(
>30e8	bd 38					.word	ExecLeft                 ; $b5 left$(
>30ea	da 38					.word	ExecMid                  ; $b6 mid$(
>30ec	02 39					.word	ExecRight                ; $b7 right$(
>30ee	94 35					.word	Event_Str                ; $b8 str$(
>30f0	c3 35					.word	UnaryVal                 ; $b9 val(
>30f2	f0 36					.word	UnaryPeek                ; $ba peek(
>30f4	f6 36					.word	UnaryDeek                ; $bb deek(
>30f6	fc 36					.word	UnaryLeek                ; $bc leek(
>30f8	b3 36					.word	UnaryAsc                 ; $bd asc(
>30fa	a7 37					.word	UnaryIntToFloat          ; $be int(
>30fc	ba 37					.word	UnaryFloatToInt          ; $bf float(
>30fe	c6 35					.word	UnaryIsVal               ; $c0 isval(
>3100	a4 38					.word	ExecUpper                ; $c1 upper$(
>3102	a1 38					.word	ExecLower                ; $c2 lower$(
>3104	8a 37					.word	UnaryReference           ; $c3 @
>3106	a0 37					.word	UnaryComplement          ; $c4 ~
>3108	9d 37					.word	UnaryHexMarker           ; $c5 &
>310a	3f 38					.word	UnaryGetString           ; $c6 get$(
>310c	45 38					.word	UnaryInkeyString         ; $c7 inkey$(
>310e	7c 38					.word	UnaryMem                 ; $c8 mem
>3110	79 30					.word	TKErr01                  ; $c9 )
>3112	58 30					.word	CommandColon             ; $ca :
>3114	79 30					.word	TKErr02                  ; $cb ,
>3116	79 30					.word	TKErr03                  ; $cc ;
>3118	7c 29					.word	Command_Rem2             ; $cd '
>311a	79 30					.word	TKErr07                  ; $ce to
>311c	79 30					.word	TKErr05                  ; $cf step
>311e	f5 2b					.word	CallProc                 ; $d0 proc
>3120	f3 2a					.word	CommandLocal             ; $d1 local
>3122	b3 28					.word	Command_Dim              ; $d2 dim
>3124	7c 29					.word	Command_Rem              ; $d3 rem
>3126	c1 28					.word	CommandLet               ; $d4 let
>3128	fd 26					.word	Command_Input            ; $d5 input
>312a	ec 2a					.word	Command_ELSE             ; $d6 else
>312c	84 28					.word	Command_VDU              ; $d7 vdu
>312e	b3 27					.word	Command_Print            ; $d8 print
>3130	65 26					.word	CommandData              ; $d9 data
>3132	79 30					.word	TKErr13                  ; $da image
>3134	79 30					.word	TKErr12                  ; $db at
>3136	79 30					.word	TKErr14                  ; $dc flip
>3138	a5 28					.word	Command_Assert           ; $dd assert
>313a	3f 29					.word	Command_Poke             ; $de poke
>313c	43 29					.word	Command_Doke             ; $df doke
>313e	47 29					.word	Command_Loke             ; $e0 loke
>3140	54 28					.word	Command_Ink              ; $e1 ink
>3142	5f 28					.word	Command_Paper            ; $e2 paper
>3144	4e 28					.word	Command_CLS              ; $e3 cls
>3146	6a 28					.word	Command_Locate           ; $e4 locate
>3148	52 30					.word	CommandAssemblerLabel    ; $e5 .
>314a	79 30					.word	TKErr15                  ; $e6 from
>314c	79 30					.word	TKErr11                  ; $e7 #
>314e	38 2e					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.3150					Group1Vectors:
>3150	6e 2f					.word	CommandLoad              ; $86 load
>3152	83 2f					.word	CommandSave              ; $87 save
>3154	93 2e					.word	CommandList              ; $88 list
>3156	c7 2f					.word	Command_New              ; $89 new
>3158	59 30					.word	CommandBreak             ; $8a break
>315a	d5 2f					.word	Command_Run              ; $8b run
>315c	3a 26					.word	CommandRead              ; $8c read
>315e	6e 26					.word	CommandRestore           ; $8d restore
>3160	8e 29					.word	CommandEnd               ; $8e end
>3162	89 29					.word	CommandStop              ; $8f stop
>3164	91 29					.word	CommandXemu              ; $90 xemu
>3166	cb 26					.word	CommandGOTO              ; $91 goto
>3168	a0 26					.word	CommandGOSUB             ; $92 gosub
>316a	b3 26					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.316c					BinaryProcess:
.316c	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.316e	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.3170	0a		asl a				asl 	a
.3171	30 0e		bmi $3181			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.3173	18		clc				clc 								; return CC for integer
.3174	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3176	f0 08		beq $3180			beq 	_BPExit 					; if both integer then return with CC.
.3178	20 86 31	jsr $3186			jsr 	BPMakeBothFloat 			; make both float
.317b	a9 01		lda #$01			lda 	#$01 						; set result type to float
.317d	95 90		sta $90,x			sta 	esType,x
.317f	38		sec				sec 								; and return with carry set.
.3180					_BPExit:
.3180	60		rts				rts
.3181					_BPStringType:
.3181	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3183	20 18 15	jsr $1518		jsr	errorHandler
.3186					BPMakeBothFloat:
.3186	e8		inx				inx
.3187	20 8b 31	jsr $318b			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.318a	ca		dex				dex
.318b					BPMakeFloat:
.318b	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.318d	4a		lsr a				lsr 	a
.318e	b0 07		bcs $3197			bcs 	_BPIsFloat 					; already a float if set.
.3190	8a		txa				txa
.3191	a2 1c		ldx #$1c		ldx	#28
.3193	20 44 24	jsr $2444		jsr	floatingpointHandler
.3196	aa		tax				tax
.3197					_BPIsFloat:
.3197	60		rts				rts
.3198					AddHandler:
.3198	20 69 33	jsr $3369			jsr 	DereferenceTwo 				; dereference top two on stack.
.319b	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.319d	35 91		and $91,x			and 	esType+1,x
.319f	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.31a1	d0 10		bne $31b3			bne 	_AHStringConcat				; concatenate strings.
.31a3	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.31a6	b0 03		bcs $31ab			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31a8	4c c4 3a	jmp $3ac4			jmp 	MInt32Add 							; else do it as integer.
.31ab					_IsFPOperation:
.31ab	8a		txa				txa 								; call the relevant fp routine
.31ac	a2 04		ldx #$04		ldx	#4
.31ae	20 44 24	jsr $2444		jsr	floatingpointHandler
.31b1	aa		tax				tax
.31b2	60		rts				rts
.31b3					_AHStringConcat:
.31b3	8a		txa				txa 								; handled by the string module.
.31b4	a2 06		ldx #$06		ldx	#6
.31b6	20 8b 3f	jsr $3f8b		jsr	stringHandler
.31b9	aa		tax				tax
.31ba	60		rts				rts
.31bb					SubHandler:
.31bb	20 69 33	jsr $3369			jsr 	DereferenceTwo
.31be	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.31c1	b0 03		bcs $31c6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31c3	4c de 3a	jmp $3ade			jmp 	MInt32Sub 							; else do it as integer.
.31c6					_IsFPOperation:
.31c6	8a		txa				txa 								; call the relevant fp routine
.31c7	a2 12		ldx #$12		ldx	#18
.31c9	20 44 24	jsr $2444		jsr	floatingpointHandler
.31cc	aa		tax				tax
.31cd	60		rts				rts
.31ce					MulHandler:
.31ce	20 69 33	jsr $3369			jsr 	DereferenceTwo
.31d1	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.31d4	b0 03		bcs $31d9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31d6	4c f8 3a	jmp $3af8			jmp 	MInt32Multiply 							; else do it as integer.
.31d9					_IsFPOperation:
.31d9	8a		txa				txa 								; call the relevant fp routine
.31da	a2 0c		ldx #$0c		ldx	#12
.31dc	20 44 24	jsr $2444		jsr	floatingpointHandler
.31df	aa		tax				tax
.31e0	60		rts				rts
.31e1					DivHandler:
.31e1	20 69 33	jsr $3369			jsr 	DereferenceTwo
.31e4	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.31e7	b0 03		bcs $31ec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31e9	4c b5 39	jmp $39b5			jmp 	MInt32SDivide 							; else do it as integer.
.31ec					_IsFPOperation:
.31ec	8a		txa				txa 								; call the relevant fp routine
.31ed	a2 08		ldx #$08		ldx	#8
.31ef	20 44 24	jsr $2444		jsr	floatingpointHandler
.31f2	aa		tax				tax
.31f3	60		rts				rts
.31f4					ModHandler:
.31f4	20 69 33	jsr $3369			jsr 	DereferenceTwo
.31f7	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.31fa	b0 03		bcs $31ff			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31fc	4c 33 3a	jmp $3a33			jmp 	MInt32Modulus 							; else do it as integer.
.31ff					_IsFPOperation:
.31ff	8a		txa				txa 								; call the relevant fp routine
.3200	a2 0a		ldx #$0a		ldx	#10
.3202	20 44 24	jsr $2444		jsr	floatingpointHandler
.3205	aa		tax				tax
.3206	60		rts				rts
.3207					XorHandler:
.3207	20 69 33	jsr $3369			jsr 	DereferenceTwo
.320a	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.320d	b0 03		bcs $3212			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.320f	4c 67 39	jmp $3967			jmp 	MInt32Xor 							; else do it as integer.
.3212					_IsFPOperation:
.3212	8a		txa				txa 								; call the relevant fp routine
.3213	a2 0a		ldx #$0a		ldx	#10
.3215	20 44 24	jsr $2444		jsr	floatingpointHandler
.3218	aa		tax				tax
.3219	60		rts				rts
.321a					OrHandler:
.321a	20 69 33	jsr $3369			jsr 	DereferenceTwo
.321d	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.3220	b0 03		bcs $3225			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3222	4c 4e 39	jmp $394e			jmp 	MInt32Or 							; else do it as integer.
.3225					_IsFPOperation:
.3225	8a		txa				txa 								; call the relevant fp routine
.3226	a2 0a		ldx #$0a		ldx	#10
.3228	20 44 24	jsr $2444		jsr	floatingpointHandler
.322b	aa		tax				tax
.322c	60		rts				rts
.322d					AndHandler:
.322d	20 69 33	jsr $3369			jsr 	DereferenceTwo
.3230	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.3233	b0 03		bcs $3238			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3235	4c 35 39	jmp $3935			jmp 	MInt32And 							; else do it as integer.
.3238					_IsFPOperation:
.3238	8a		txa				txa 								; call the relevant fp routine
.3239	a2 0a		ldx #$0a		ldx	#10
.323b	20 44 24	jsr $2444		jsr	floatingpointHandler
.323e	aa		tax				tax
.323f	60		rts				rts
.3240					ShlHandler:
.3240	20 69 33	jsr $3369			jsr 	DereferenceTwo
.3243	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.3246	b0 03		bcs $324b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3248	4c c1 32	jmp $32c1			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.324b					_IsFPOperation:
.324b	8a		txa				txa 								; call the relevant fp routine
.324c	a2 0a		ldx #$0a		ldx	#10
.324e	20 44 24	jsr $2444		jsr	floatingpointHandler
.3251	aa		tax				tax
.3252	60		rts				rts
.3253					ShrHandler:
.3253	20 69 33	jsr $3369			jsr 	DereferenceTwo
.3256	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.3259	b0 03		bcs $325e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.325b	4c c4 32	jmp $32c4			jmp 	MInt32ShiftRightX 							; else do it as integer.
.325e					_IsFPOperation:
.325e	8a		txa				txa 								; call the relevant fp routine
.325f	a2 0a		ldx #$0a		ldx	#10
.3261	20 44 24	jsr $2444		jsr	floatingpointHandler
.3264	aa		tax				tax
.3265	60		rts				rts
.3266					WordRefHandler:
.3266	20 69 33	jsr $3369			jsr 	DereferenceTwo
.3269	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.326c	b0 03		bcs $3271			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.326e	4c b3 32	jmp $32b3			jmp 	MInt32WordIndirect 							; else do it as integer.
.3271					_IsFPOperation:
.3271	8a		txa				txa 								; call the relevant fp routine
.3272	a2 0a		ldx #$0a		ldx	#10
.3274	20 44 24	jsr $2444		jsr	floatingpointHandler
.3277	aa		tax				tax
.3278	60		rts				rts
.3279					ByteRefHandler:
.3279	20 69 33	jsr $3369			jsr 	DereferenceTwo
.327c	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.327f	b0 03		bcs $3284			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3281	4c b7 32	jmp $32b7			jmp 	MInt32ByteIndirect 							; else do it as integer.
.3284					_IsFPOperation:
.3284	8a		txa				txa 								; call the relevant fp routine
.3285	a2 0a		ldx #$0a		ldx	#10
.3287	20 44 24	jsr $2444		jsr	floatingpointHandler
.328a	aa		tax				tax
.328b	60		rts				rts
.328c					PowerHandler:
.328c	20 69 33	jsr $3369			jsr 	DereferenceTwo
.328f	20 6c 31	jsr $316c			jsr 	BinaryProcess 				; check to see if either is float
.3292	b0 03		bcs $3297			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3294	4c 9f 32	jmp $329f			jmp 	PowerInteger 							; else do it as integer.
.3297					_IsFPOperation:
.3297	8a		txa				txa 								; call the relevant fp routine
.3298	a2 18		ldx #$18		ldx	#24
.329a	20 44 24	jsr $2444		jsr	floatingpointHandler
.329d	aa		tax				tax
.329e	60		rts				rts
.329f					PowerInteger:
.329f	20 86 31	jsr $3186			jsr 	BPMakeBothFloat				; make them float.
.32a2	8a		txa				txa
.32a3	a2 18		ldx #$18		ldx	#24
.32a5	20 44 24	jsr $2444		jsr	floatingpointHandler
.32a8	a2 14		ldx #$14		ldx	#20
.32aa	20 44 24	jsr $2444		jsr	floatingpointHandler
.32ad	aa		tax				tax
.32ae	a9 00		lda #$00			lda 	#0 							; make type integer
.32b0	95 90		sta $90,x			sta 	esType,x
.32b2	60		rts				rts
.32b3					Mint32WordIndirect:
.32b3	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.32b5	d0 02		bne $32b9			bne 	Min32Indirect
.32b7					Mint32ByteIndirect:
.32b7	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.32b9					Min32Indirect:
.32b9	48		pha				pha 								; save the indirection
.32ba	20 c4 3a	jsr $3ac4			jsr 	MInt32Add 					; add a!b a?b
.32bd	68		pla				pla 								; and set the type to reference.
.32be	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.32c0	60		rts				rts
.32c1					Mint32ShiftLeftX:
.32c1	18		clc				clc 								; CC shift left
.32c2	90 01		bcc $32c5			bcc 	Mint32Shift
.32c4					Mint32ShiftRightX:
.32c4	38		sec				sec 								; CS shift right
.32c5					Mint32Shift:
.32c5	08		php				php 								; save carry flag on stack.
.32c6	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.32c8	15 a9		ora $a9,x			ora 	esInt2+1,x
.32ca	15 b1		ora $b1,x			ora 	esInt3+1,x
.32cc	d0 1e		bne $32ec			bne 	_MShiftZero
.32ce	b5 99		lda $99,x			lda 	esInt0+1,x
.32d0	c9 20		cmp #$20			cmp 	#32
.32d2	b0 18		bcs $32ec			bcs 	_MShiftZero
.32d4					_MShiftLoop:
.32d4	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.32d6	f0 12		beq $32ea			beq 	_MShiftExit
.32d8	d6 99		dec $99,x			dec 	esInt0+1,x
.32da	28		plp				plp 								; restore and save carry
.32db	08		php				php
.32dc	90 06		bcc $32e4			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.32de	20 fe 3b	jsr $3bfe			jsr 	Mint32ShiftRight
.32e1	4c d4 32	jmp $32d4			jmp 	_MShiftLoop
.32e4					_MShiftLeft:
.32e4	20 f5 3b	jsr $3bf5			jsr 	Mint32ShiftLeft
.32e7	4c d4 32	jmp $32d4			jmp 	_MShiftLoop
.32ea					_MShiftExit:
.32ea	28		plp				plp	 								; throw saved carry and exit
.32eb	60		rts				rts
.32ec					_MShiftZero:
.32ec	4c e0 3b	jmp $3be0			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.32ef					PerformComparison:
.32ef	20 69 33	jsr $3369			jsr 	DereferenceTwo 				; make both values.
.32f2	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.32f4	35 91		and $91,x			and 	esType+1,x
.32f6	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.32f7	30 1d		bmi $3316			bmi 	_PCIsString
.32f9	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.32fb	15 91		ora $91,x			ora 	esType+1,x
.32fd	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.32fe	30 22		bmi $3322			bmi 	_PCError
.3300	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.3302	f0 0f		beq $3313			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3304	20 86 31	jsr $3186			jsr 	BPMakeBothFloat 			; make both float
.3307	8a		txa				txa
.3308	a2 06		ldx #$06		ldx	#6
.330a	20 44 24	jsr $2444		jsr	floatingpointHandler
.330d	86 32		stx $32				stx 	tempShort 					; save result
.330f	aa		tax				tax
.3310	a5 32		lda $32				lda 	tempShort
.3312	60		rts				rts
.3313					_PCIsInteger:
.3313	4c 80 39	jmp $3980			jmp 	MInt32Compare
.3316					_PCIsString:
.3316	8a		txa				txa 								; A has SP
.3317	a2 0a		ldx #$0a		ldx	#10
.3319	20 8b 3f	jsr $3f8b		jsr	stringHandler
.331c	86 32		stx $32				stx 	tempShort 					; save result
.331e	aa		tax				tax 								; put SP back in X and get result.
.331f	a5 32		lda $32				lda 	tempShort
.3321	60		rts				rts
.3322					_PCError:
.3322	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3324	20 18 15	jsr $1518		jsr	errorHandler
.3327					CompareEquals:
.3327	20 ef 32	jsr $32ef			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.332a	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.332c	f0 35		beq $3363			beq  	CompareTrue
.332e	4c 66 33	jmp $3366			jmp 	CompareFalse
.3331					CompareLess:
.3331	20 ef 32	jsr $32ef			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3334	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3336	f0 2b		beq $3363			beq  	CompareTrue
.3338	4c 66 33	jmp $3366			jmp 	CompareFalse
.333b					CompareGreater:
.333b	20 ef 32	jsr $32ef			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.333e	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3340	f0 21		beq $3363			beq  	CompareTrue
.3342	4c 66 33	jmp $3366			jmp 	CompareFalse
.3345					CompareNotEquals:
.3345	20 ef 32	jsr $32ef			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3348	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.334a	d0 17		bne $3363			bne  	CompareTrue
.334c	4c 66 33	jmp $3366			jmp 	CompareFalse
.334f					CompareGreaterEq:
.334f	20 ef 32	jsr $32ef			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3352	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3354	d0 0d		bne $3363			bne  	CompareTrue
.3356	4c 66 33	jmp $3366			jmp 	CompareFalse
.3359					CompareLessEq:
.3359	20 ef 32	jsr $32ef			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.335c	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.335e	d0 03		bne $3363			bne  	CompareTrue
.3360	4c 66 33	jmp $3366			jmp 	CompareFalse
.3363					CompareTrue:
.3363	4c dc 3b	jmp $3bdc			jmp 	MInt32True
.3366					CompareFalse:
.3366	4c e0 3b	jmp $3be0			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3369					DereferenceTwo:
.3369	e8		inx				inx
.336a	20 6e 33	jsr $336e			jsr 	DereferenceOne
.336d	ca		dex				dex
.336e					DereferenceOne:
.336e	b5 90		lda $90,x			lda 	esType,x
.3370	10 3d		bpl $33af			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.3372	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.3373	b0 3b		bcs $33b0			bcs 	_DRFloatDeReference
.3375	98		tya				tya
.3376	48		pha				pha
.3377	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.3379	85 2a		sta $2a				sta 	temp0
.337b	b5 a0		lda $a0,x			lda 	esInt1,x
.337d	85 2b		sta $2b				sta 	temp0+1
.337f	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.3381	95 a0		sta $a0,x			sta 	esInt1,x
.3383	95 a8		sta $a8,x			sta 	esInt2,x
.3385	95 b0		sta $b0,x			sta 	esInt3,x
.3387	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.3389	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.338b	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.338c	30 0d		bmi $339b			bmi 	_DeRefString 				; string, 2 bytes only
.338e	d0 11		bne $33a1			bne 	_DeRefByte 					; byte 1 byte only
.3390					_DeRefLong:
.3390	a0 03		ldy #$03			ldy 	#3
.3392	b1 2a		lda ($2a),y			lda 	(temp0),y
.3394	95 b0		sta $b0,x			sta 	esInt3,x
.3396	88		dey				dey
.3397	b1 2a		lda ($2a),y			lda 	(temp0),y
.3399	95 a8		sta $a8,x			sta 	esInt2,x
.339b					_DeRefString:
.339b	a0 01		ldy #$01			ldy 	#1
.339d	b1 2a		lda ($2a),y			lda 	(temp0),y
.339f	95 a0		sta $a0,x			sta 	esInt1,x
.33a1					_DeRefByte:
.33a1	a0 00		ldy #$00			ldy 	#0
.33a3	b1 2a		lda ($2a),y			lda 	(temp0),y
.33a5	95 98		sta $98,x			sta 	esInt0,x
.33a7	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.33a9	29 40		and #$40			and 	#$40
.33ab	95 90		sta $90,x			sta 	esType,x
.33ad	68		pla				pla
.33ae	a8		tay				tay
.33af					_DRNotReference
.33af	60		rts				rts
.33b0					_DRFloatDereference:
.33b0	20 36 29	jsr $2936			jsr 	TOSToTemp0 					; address to deref in temp0
.33b3	8a		txa				txa
.33b4	a2 1e		ldx #$1e		ldx	#30
.33b6	20 44 24	jsr $2444		jsr	floatingpointHandler
.33b9	aa		tax				tax
.33ba	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.33bc	95 90		sta $90,x			sta 	esType,x
.33be	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.33bf					EvaluateLevel:
.33bf	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.33c1	b0 1e		bcs $33e1			bcs 	_ELStack
.33c3	48		pha				pha 								; save precedence level.
.33c4	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.33c6	95 98		sta $98,x			sta 	esInt0,x
.33c8	95 a0		sta $a0,x			sta 	esInt1,x
.33ca	95 a8		sta $a8,x			sta 	esInt2,x
.33cc	95 b0		sta $b0,x			sta 	esInt3,x
.33ce	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.33d0	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.33d2	30 26		bmi $33fa			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.33d4	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.33d5	30 0f		bmi $33e6			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.33d7	8a		txa				txa 								; stack level in X
.33d8	a2 02		ldx #$02		ldx	#2
.33da	20 e5 4b	jsr $4be5		jsr	variableHandler
.33dd	aa		tax				tax
.33de	4c 23 34	jmp $3423			jmp		_ELHasTerm
.33e1					_ELStack:
.33e1	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.33e3	20 18 15	jsr $1518		jsr	errorHandler
.33e6					_ELIsConstant:
.33e6	4a		lsr a				lsr 	a 							; get the value back
.33e7	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.33e9	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.33eb					_ELCheckNext:
.33eb	c8		iny				iny 								; look at next
.33ec	b1 28		lda ($28),y			lda 	(codePtr),y
.33ee	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.33f0	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.33f2	b0 2f		bcs $3423			bcs 	_ELHasTerm 					; done getting the constant.
.33f4	20 bc 34	jsr $34bc			jsr 	ELShiftByteIn 				; shift byte into position.
.33f7	4c eb 33	jmp $33eb			jmp 	_ELCheckNext
.33fa					_ELIsToken:
.33fa	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.33fc	f0 0f		beq $340d			beq 	_ELIsString
.33fe	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3400	d0 5f		bne $3461			bne 	_ELCheckUnary
.3402	8a		txa				txa 								; put X into A
.3403	c8		iny				iny 								; skip over the float marker
.3404	a2 1a		ldx #$1a		ldx	#26
.3406	20 44 24	jsr $2444		jsr	floatingpointHandler
.3409	aa		tax				tax 								; restore X
.340a	4c 23 34	jmp $3423			jmp 	_ELHasTerm
.340d					_ELIsString:
.340d	98		tya				tya 								; address of string is codePtr+y+1
.340e	38		sec				sec
.340f	65 28		adc $28				adc 	codePtr
.3411	95 98		sta $98,x			sta 	esInt0,x
.3413	a5 29		lda $29				lda 	codePtr+1
.3415	69 00		adc #$00			adc 	#0
.3417	95 a0		sta $a0,x			sta 	esInt1,x
.3419	a9 40		lda #$40			lda 	#$40 						; set type to string value
.341b	95 90		sta $90,x			sta 	esType,x
.341d	c8		iny				iny 								; skip over string.
.341e	98		tya				tya
.341f	38		sec				sec									; +1 for the length itself.
.3420	71 28		adc ($28),y			adc 	(codePtr),y
.3422	a8		tay				tay 								; and fall through to term loop code.
.3423					_ELHasTerm:
.3423	b1 28		lda ($28),y			lda 	(codePtr),y
.3425	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3427	90 04		bcc $342d			bcc 	_ELPopExit
.3429	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.342b	90 02		bcc $342f			bcc 	_ELHasBinaryTerm
.342d					_ELPopExit:
.342d	68		pla				pla
.342e					_ELExit:
.342e	60		rts				rts
.342f					_ELHasBinaryTerm:
.342f	84 32		sty $32				sty 	tempShort 					; save position
.3431	a8		tay				tay 								; use token as an index and get the precedence.
.3432	b9 64 34	lda $3464,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3435	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3437	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.3439	68		pla				pla 								; restore current level.
.343a	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.343c	b0 f0		bcs $342e			bcs 	_ELExit
.343e	48		pha				pha 								; save current level back on the stack.
.343f	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.3441	48		pha				pha
.3442	c8		iny				iny
.3443	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3444	a5 32		lda $32				lda 	tempShort
.3446	20 bf 33	jsr $33bf			jsr 	EvaluateLevel
.3449	ca		dex				dex
.344a	68		pla				pla 								; get the operator back out.
.344b					_ELExecuteA:
.344b	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.344d	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.344e	aa		tax				tax
.344f	bd 7e 30	lda $307e,x			lda 	Group0Vectors,x
.3452	85 2a		sta $2a				sta 	temp0
.3454	bd 7f 30	lda $307f,x			lda 	Group0Vectors+1,x
.3457	85 2b		sta $2b				sta 	temp0+1
.3459	a6 32		ldx $32				ldx 	tempShort
.345b	20 a8 34	jsr $34a8			jsr 	_ELCallTemp0
.345e	4c 23 34	jmp $3423			jmp 	_ELHasTerm 					; and loop back round.
.3461					_ELCheckUnary:
.3461	c8		iny				iny 								; skip over token.
.3462	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3464	f0 19		beq $347f			beq 	_ELMinus
.3466	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3468	f0 2c		beq $3496			beq 	_ELIndirect
.346a	c9 98		cmp #$98			cmp 	#TKW_QMARK
.346c	f0 28		beq $3496			beq 	_ELIndirect
.346e	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.3470	f0 39		beq $34ab			beq 	_ELExtension
.3472	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.3474	90 04		bcc $347a			bcc 	_ELUSyntax
.3476	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3478	90 d1		bcc $344b			bcc 	_ELExecuteA 				; if so do that token.
.347a					_ELUSyntax:
.347a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.347c	20 18 15	jsr $1518		jsr	errorHandler
.347f					_ELMinus:
.347f	20 11 35	jsr $3511			jsr 	EvaluateNumericTerm 		; get a number to negate.
.3482	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.3484	f0 0a		beq $3490			beq 	_ELMinusInteger
.3486	8a		txa				txa
.3487	a2 0e		ldx #$0e		ldx	#14
.3489	20 44 24	jsr $2444		jsr	floatingpointHandler
.348c	aa		tax				tax
.348d	4c 23 34	jmp $3423			jmp 	_ELHasTerm
.3490					_ELMinusInteger:
.3490	20 9a 3b	jsr $3b9a			jsr 	MInt32Negate 				; do int negate
.3493	4c 23 34	jmp $3423			jmp 	_ELHasTerm
.3496					_ELIndirect:
.3496	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.3497	20 1a 35	jsr $351a			jsr 	EvaluateIntegerTerm 		; integer address
.349a	68		pla				pla
.349b	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.349d	f0 02		beq $34a1			beq 	_ELHaveModifier
.349f	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.34a1					_ELHaveModifier:
.34a1	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.34a3	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.34a5	4c 23 34	jmp $3423			jmp 	_ELHasTerm
.34a8					_ELCallTemp0:
.34a8	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.34ab					_ELExtension:
.34ab	8a		txa				txa 								; stack pos in A
.34ac	20 69 18	jsr $1869		jsr	extensionHandler
.34af	aa		tax				tax 								; restore stack
.34b0	4c 23 34	jmp $3423			jmp 	_ELHasTerm
.34b3					UnaryParenthesis:
.34b3	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.34b5	20 bf 33	jsr $33bf			jsr 	EvaluateLevel
.34b8	20 53 3c	jsr $3c53			jsr 	CheckRightParen 			; check for )
.34bb	60		rts				rts
.34bc					ELShiftByteIn:
.34bc	48		pha				pha 								; save bits to shift in.
.34bd	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.34bf	48		pha				pha
.34c0	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.34c2	95 b0		sta $b0,x			sta 	esInt3,x
.34c4	b5 a0		lda $a0,x			lda 	esInt1,x
.34c6	95 a8		sta $a8,x			sta 	esInt2,x
.34c8	b5 98		lda $98,x			lda 	esInt0,x
.34ca	95 a0		sta $a0,x			sta 	esInt1,x
.34cc	a9 00		lda #$00			lda 	#0
.34ce	95 98		sta $98,x			sta 	esInt0,x
.34d0	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.34d1	29 03		and #$03			and 	#3 							; only want lower 2 bits
.34d3	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.34d5					_ELShiftLoop:
.34d5	4a		lsr a				lsr 	a
.34d6	76 b0		ror $b0,x			ror 	esInt3,x
.34d8	76 a8		ror $a8,x			ror 	esInt2,x
.34da	76 a0		ror $a0,x			ror 	esInt1,x
.34dc	76 98		ror $98,x			ror 	esInt0,x
.34de	c9 01		cmp #$01			cmp 	#1
.34e0	d0 f3		bne $34d5			bne 	_ELShiftLoop
.34e2	68		pla				pla 								; get original 6 bit value and OR in.
.34e3	29 3f		and #$3f			and 	#$3F
.34e5	15 98		ora $98,x			ora 	esInt0,x
.34e7	95 98		sta $98,x			sta 	esInt0,x
.34e9	60		rts				rts
.34ea					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>34ea	01					.byte	$01			; $86 and
>34eb	01					.byte	$01			; $87 or
>34ec	01					.byte	$01			; $88 xor
>34ed	02					.byte	$02			; $89 >=
>34ee	02					.byte	$02			; $8a <=
>34ef	02					.byte	$02			; $8b >
>34f0	02					.byte	$02			; $8c <
>34f1	02					.byte	$02			; $8d =
>34f2	02					.byte	$02			; $8e <>
>34f3	03					.byte	$03			; $8f +
>34f4	03					.byte	$03			; $90 -
>34f5	04					.byte	$04			; $91 >>
>34f6	04					.byte	$04			; $92 <<
>34f7	04					.byte	$04			; $93 *
>34f8	04					.byte	$04			; $94 /
>34f9	04					.byte	$04			; $95 mod
>34fa	05					.byte	$05			; $96 ^
>34fb	06					.byte	$06			; $97 !
>34fc	06					.byte	$06			; $98 ?
>34fd	82					.byte	$82			; $99 repeat
>34fe	82					.byte	$82			; $9a while
>34ff	82					.byte	$82			; $9b for
>3500	82					.byte	$82			; $9c if
>3501	82					.byte	$82			; $9d defproc
>3502	80					.byte	$80			; $9e until
>3503	80					.byte	$80			; $9f wend
>3504	80					.byte	$80			; $a0 next
>3505	80					.byte	$80			; $a1 then
>3506	80					.byte	$80			; $a2 endif
>3507	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3508					EvaluateTerm:
.3508	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.350a	20 bf 33	jsr $33bf			jsr 	EvaluateLevel
.350d	20 6e 33	jsr $336e			jsr 	DereferenceOne
.3510	60		rts				rts
.3511					EvaluateNumericTerm:
.3511	20 08 35	jsr $3508			jsr 	EvaluateTerm
.3514	b5 90		lda $90,x			lda 	esType,x
.3516	0a		asl a				asl 	a 							; see if it's a string.
.3517	30 09		bmi $3522			bmi 	ENTType
.3519	60		rts				rts
.351a					EvaluateIntegerTerm:
.351a	20 08 35	jsr $3508			jsr 	EvaluateTerm
.351d	b5 90		lda $90,x			lda 	esType,x
.351f	d0 01		bne $3522			bne 	ENTType
.3521	60		rts				rts
.3522					ENTType:
.3522	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3524	20 18 15	jsr $1518		jsr	errorHandler
.3527					EvaluateRoot:
.3527	a2 00		ldx #$00			ldx 	#0
.3529					Evaluate:
.3529	a9 00		lda #$00			lda 	#0
.352b	20 bf 33	jsr $33bf			jsr 	EvaluateLevel
.352e	20 6e 33	jsr $336e			jsr 	DereferenceOne
.3531	60		rts				rts
.3532					EvaluateNumeric:
.3532	20 29 35	jsr $3529			jsr 	Evaluate
.3535	b5 90		lda $90,x			lda 	esType,x
.3537	0a		asl a				asl 	a 							; see if it's a string.
.3538	30 e8		bmi $3522			bmi 	ENTType
.353a	4a		lsr a				lsr 	a 							; shift float flag into carry.
.353b	4a		lsr a				lsr 	a
.353c	60		rts				rts
.353d					EvaluateString:
.353d	20 29 35	jsr $3529			jsr 	Evaluate
.3540	b5 90		lda $90,x			lda 	esType,x
.3542	0a		asl a				asl 	a 							; see if it's a string.
.3543	10 dd		bpl $3522			bpl 	ENTType
.3545	60		rts				rts
.3546					EvaluateRootInteger:
.3546	a2 00		ldx #$00			ldx 	#0
.3548					EvaluateInteger:
.3548	20 29 35	jsr $3529			jsr 	Evaluate
.354b	b5 90		lda $90,x			lda 	esType,x
.354d	d0 d3		bne $3522			bne 	ENTType
.354f	60		rts				rts
.3550					EvaluateSmallInteger:
.3550	20 48 35	jsr $3548			jsr 	EvaluateInteger
.3553	b5 a0		lda $a0,x			lda 	esInt1,x
.3555	15 a8		ora $a8,x			ora 	esInt2,x
.3557	15 b0		ora $b0,x			ora 	esInt3,x
.3559	d0 03		bne $355e			bne 	_ESIValue
.355b	b5 98		lda $98,x			lda 	esInt0,x
.355d	60		rts				rts
.355e					_ESIValue:
.355e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3560	20 18 15	jsr $1518		jsr	errorHandler
.3563					LinkEvaluate:
.3563	aa		tax				tax
.3564	20 29 35	jsr $3529			jsr 	Evaluate
.3567	8a		txa				txa
.3568	60		rts				rts
.3569					LinkEvaluateTerm:
.3569	aa		tax				tax
.356a	20 08 35	jsr $3508			jsr 	EvaluateTerm
.356d	8a		txa				txa
.356e	60		rts				rts
.356f					LinkEvaluateInteger:
.356f	aa		tax				tax
.3570	20 48 35	jsr $3548			jsr 	EvaluateInteger
.3573	8a		txa				txa
.3574	60		rts				rts
.3575					LinkEvaluateString:
.3575	aa		tax				tax
.3576	20 3d 35	jsr $353d			jsr 	EvaluateString
.3579	8a		txa				txa
.357a	60		rts				rts
.357b					LinkEvaluateSmallInt:
.357b	aa		tax				tax
.357c	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger
.357f	8a		txa				txa
.3580	60		rts				rts
.3581					EvaluateReference:
.3581	ad fb 34	lda $34fb			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.3584	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.3585	e9 01		sbc #$01			sbc 	#1
.3587	20 bf 33	jsr $33bf			jsr 	EvaluateLevel
.358a	b5 90		lda $90,x			lda 	esType,x
.358c	10 01		bpl $358f			bpl 	_ERFail
.358e	60		rts				rts
.358f					_ERFail:
.358f	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.3591	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.3594					Event_Str:
.3594	20 32 35	jsr $3532			jsr 	EvaluateNumeric 			; get a number.
.3597	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.3599	d0 13		bne $35ae			bne 	_ESFloat
.359b	20 f1 35	jsr $35f1			jsr 	ConvertGetBase 				; get base, or default.
.359e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.35a0	85 2a		sta $2a				sta 	temp0
.35a2	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.35a4	85 2b		sta $2b				sta 	1+(temp0)
.35a6	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.35a8	20 36 3b	jsr $3b36			jsr 	MInt32ToString 				; convert to string.
.35ab	4c bb 35	jmp $35bb			jmp 	_ESCloneExit 				; clone and exit.
.35ae					_ESFloat:
.35ae	20 53 3c	jsr $3c53			jsr 	CheckRightParen 			; check closing )
.35b1	20 36 29	jsr $2936			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.35b4	8a		txa				txa
.35b5	a2 16		ldx #$16		ldx	#22
.35b7	20 44 24	jsr $2444		jsr	floatingpointHandler
.35ba	aa		tax				tax
.35bb					_ESCloneExit:
.35bb	8a		txa				txa
.35bc	a2 04		ldx #$04		ldx	#4
.35be	20 8b 3f	jsr $3f8b		jsr	stringHandler
.35c1	aa		tax				tax
.35c2	60		rts				rts
.35c3					UnaryVal:
.35c3	38		sec				sec 								; Carry set to return value
.35c4	b0 01		bcs $35c7			bcs 	ValueMain
.35c6					UnaryIsVal:
.35c6	18		clc				clc									; Carry clear to return legitimacy
.35c7					ValueMain:
.35c7	08		php				php 								; save results (CS is value, CC is validation)
.35c8	20 3d 35	jsr $353d			jsr 	EvaluateString
.35cb	20 f1 35	jsr $35f1			jsr 	ConvertGetBase 				; get base, if any.
.35ce	98		tya				tya
.35cf	48		pha				pha
.35d0	20 36 29	jsr $2936			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.35d3	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.35d5	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.35d7	20 4e 3a	jsr $3a4e			jsr 	MInt32FromString 			; convert it back from a string.
.35da	b0 0c		bcs $35e8			bcs 	_VMSuccess 					; successfully converted.
.35dc	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.35de	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.35e0	f0 00		beq $35e2			beq 	_VMFailed 	 				; so we failed.
.35e2					_VMFailed:
.35e2	68		pla				pla
.35e3	a8		tay				tay
.35e4	28		plp				plp
.35e5	4c e0 3b	jmp $3be0			jmp 	MInt32False 				; return 0 whatever.
.35e8					_VMSuccess:
.35e8	68		pla				pla
.35e9	a8		tay				tay
.35ea	28		plp				plp 								; if CS the it was val() so we want the value.
.35eb	b0 03		bcs $35f0			bcs 	_VMExit
.35ed	4c dc 3b	jmp $3bdc			jmp 	MInt32True 					; otherwise return true as successful.
.35f0					_VMExit:
.35f0	60		rts				rts
.35f1					ConvertGetBase:
.35f1	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.35f3	95 99		sta $99,x			sta 	esInt0+1,x
.35f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.35f7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.35f9	d0 0e		bne $3609			bne 	_CGBDone 					; not found, should be )
.35fb	e8		inx				inx 								; next level
.35fc	c8		iny				iny 								; skip comma.
.35fd	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger		; evaluate the base.
.3600	ca		dex				dex
.3601	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3603	90 08		bcc $360d			bcc 	_CGBValue 					; (it should work as high as 37)
.3605	c9 11		cmp #$11			cmp 	#17
.3607	b0 04		bcs $360d			bcs 	_CGBValue
.3609					_CGBDone:
.3609	20 53 3c	jsr $3c53			jsr 	CheckRightParen
.360c	60		rts				rts
.360d					_CGBValue:
.360d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.360f	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.3612					EventFunction:
.3612	20 81 35	jsr $3581			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3615	b5 90		lda $90,x			lda 	esType,x
.3617	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3619	d0 5b		bne $3676			bne 	_EFType
.361b	20 60 3c	jsr $3c60			jsr 	CheckComma
.361e	e8		inx				inx
.361f	20 48 35	jsr $3548			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.3622	20 53 3c	jsr $3c53			jsr 	CheckRightParen 			; finish off with the right bracket
.3625	ca		dex				dex
.3626	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3628	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.362a	15 a8		ora $a8,x			ora 	esInt2,x
.362c	15 b0		ora $b0,x			ora 	esInt3,x
.362e	d0 41		bne $3671			bne 	_EFValue
.3630	98		tya				tya
.3631	48		pha				pha
.3632	8a		txa				txa
.3633	48		pha				pha
.3634	a2 1c		ldx #$1c		ldx	#28
.3636	20 f6 14	jsr $14f6		jsr	deviceHandler
.3639	84 2d		sty $2d				sty 	temp1+1
.363b	85 2c		sta $2c				sta 	temp1
.363d	68		pla				pla
.363e	aa		tax				tax
.363f	20 36 29	jsr $2936			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.3642	a0 03		ldy #$03			ldy 	#3							; if -ve
.3644	b1 2a		lda ($2a),y			lda 	(temp0),y
.3646	30 23		bmi $366b			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3648	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.364a	b1 2a		lda ($2a),y			lda 	(temp0),y
.364c	c8		iny				iny
.364d	11 2a		ora ($2a),y			ora 	(temp0),y
.364f	f0 17		beq $3668			beq 	_EFInitialise 				; if so, initialise the value but return false.
.3651	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.3653	38		sec				sec
.3654	b1 2a		lda ($2a),y			lda 	(temp0),y
.3656	e5 2c		sbc $2c				sbc 	temp1
.3658	c8		iny				iny
.3659	b1 2a		lda ($2a),y			lda 	(temp0),y
.365b	e5 2d		sbc $2d				sbc 	temp1+1
.365d	10 0c		bpl $366b			bpl 	_EFFail 					; if trigger >= timer then return False
.365f	20 7b 36	jsr $367b			jsr 	SetEventTimer 				; reset the timer for next time.
.3662	20 dc 3b	jsr $3bdc			jsr	 	MInt32True 					; and treutn true as fired.
.3665	68		pla				pla
.3666	a8		tay				tay
.3667	60		rts				rts
.3668					_EFInitialise:
.3668	20 7b 36	jsr $367b			jsr		SetEventTimer 				; set trigger time to time + elapsed
.366b					_EFFail:
.366b	68		pla				pla
.366c	a8		tay				tay
.366d	20 e0 3b	jsr $3be0			jsr 	MInt32False
.3670	60		rts				rts
.3671					_EFValue:
.3671	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3673	20 18 15	jsr $1518		jsr	errorHandler
.3676					_EFType:
.3676	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3678	20 18 15	jsr $1518		jsr	errorHandler
.367b					SetEventTimer:
.367b	a0 00		ldy #$00			ldy 	#0
.367d	18		clc				clc
.367e	a5 2c		lda $2c				lda 	temp1
.3680	75 99		adc $99,x			adc 	esInt0+1,x
.3682	91 2a		sta ($2a),y			sta		(temp0),y
.3684	c8		iny				iny
.3685	a5 2d		lda $2d				lda 	temp1+1
.3687	75 a1		adc $a1,x			adc 	esInt1+1,x
.3689	91 2a		sta ($2a),y			sta		(temp0),y
.368b	88		dey				dey
.368c	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.368e	d0 04		bne $3694			bne 	_SETExit 					; zero means initialise.....
.3690	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.3692	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.3694					_SETExit:
.3694	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.3695					UnaryLen:
.3695	20 a3 36	jsr $36a3			jsr 	ULStart
.3698					ULFinish:
.3698	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.369a	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.369c	20 ef 3b	jsr $3bef			jsr 	MInt32Set8Bit 				; write it out.
.369f	20 53 3c	jsr $3c53			jsr 	CheckRightParen
.36a2	60		rts				rts
.36a3	20 3d 35	jsr $353d	ULStart:jsr 	EvaluateString
.36a6	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.36a8	85 2a		sta $2a				sta 	temp0
.36aa	b5 a0		lda $a0,x			lda 	esInt1,x
.36ac	85 2b		sta $2b				sta 	temp0+1
.36ae	84 32		sty $32				sty 	tempShort 					; get length
.36b0	a0 00		ldy #$00			ldy 	#0
.36b2	60		rts				rts
.36b3					UnaryAsc:
.36b3	20 a3 36	jsr $36a3			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.36b6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.36b8	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.36b9	c9 00		cmp #$00			cmp 	#0
.36bb	d0 db		bne $3698			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.36bd	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.36bf	20 18 15	jsr $1518		jsr	errorHandler
.36c2					UnaryAbs:
.36c2	20 32 35	jsr $3532			jsr 	EvaluateNumeric 			; some numeric value
.36c5	b0 07		bcs $36ce			bcs 	_UAFloat 					; CS then float, so use that function
.36c7	20 95 3b	jsr $3b95			jsr 	MInt32Absolute 				; int version
.36ca	20 53 3c	jsr $3c53			jsr 	CheckRightParen
.36cd	60		rts				rts
.36ce					_UAFloat:
.36ce	8a		txa				txa 								; float version
.36cf	a2 02		ldx #$02		ldx	#2
.36d1	20 44 24	jsr $2444		jsr	floatingpointHandler
.36d4	aa		tax				tax
.36d5	20 53 3c	jsr $3c53			jsr 	CheckRightParen
.36d8	60		rts				rts
.36d9					UnarySgn:
.36d9	20 32 35	jsr $3532			jsr 	EvaluateNumeric 			; same as above but sign of value
.36dc	b0 07		bcs $36e5			bcs 	_USFloat
.36de	20 cd 3b	jsr $3bcd			jsr 	MInt32Sign
.36e1	20 53 3c	jsr $3c53			jsr 	CheckRightParen
.36e4	60		rts				rts
.36e5					_USFloat:
.36e5	8a		txa				txa
.36e6	a2 10		ldx #$10		ldx	#16
.36e8	20 44 24	jsr $2444		jsr	floatingpointHandler
.36eb	aa		tax				tax
.36ec	20 53 3c	jsr $3c53			jsr 	CheckRightParen
.36ef	60		rts				rts
.36f0					UnaryPeek:
.36f0	20 1c 37	jsr $371c			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.36f3	4c 10 37	jmp $3710			jmp 	PDLByte0
.36f6					UnaryDeek:
.36f6	20 1c 37	jsr $371c			jsr 	PDLCode
.36f9	4c 0a 37	jmp $370a			jmp 	PDLByte1
.36fc					UnaryLeek:
.36fc	20 1c 37	jsr $371c			jsr 	PDLCode
.36ff	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3701	b1 2a		lda ($2a),y			lda 	(temp0),y
.3703	95 b0		sta $b0,x			sta 	esInt3,x
.3705	88		dey				dey
.3706	b1 2a		lda ($2a),y			lda 	(temp0),y
.3708	95 a8		sta $a8,x			sta 	esInt2,x
.370a					PDLByte1:
.370a	a0 01		ldy #$01			ldy 	#1
.370c	b1 2a		lda ($2a),y			lda 	(temp0),y
.370e	95 a0		sta $a0,x			sta 	esInt1,x
.3710					PDLByte0:
.3710	a0 00		ldy #$00			ldy 	#0
.3712	b1 2a		lda ($2a),y			lda 	(temp0),y
.3714	95 98		sta $98,x			sta 	esInt0,x
.3716	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3718	20 53 3c	jsr $3c53			jsr 	CheckRightParen 			; check right and return
.371b	60		rts				rts
.371c					PDLCode:
.371c	20 48 35	jsr $3548			jsr 	EvaluateInteger 			; some address
.371f	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3721	85 2a		sta $2a				sta 	temp0
.3723	b5 a0		lda $a0,x			lda 	esInt1,x
.3725	85 2b		sta $2b				sta 	temp0+1
.3727	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3729	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.372b	95 a8		sta $a8,x			sta 	esInt2,x
.372d	95 b0		sta $b0,x			sta 	esInt3,x
.372f	84 32		sty $32				sty 	tempShort 					; save Y
.3731	60		rts				rts
.3732					Unary_Random:
.3732	20 10 3c	jsr $3c10			jsr 	MInt32Random 				; generate random number.
.3735	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3737	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3739	f0 08		beq $3743			beq 	_URExit
.373b	e8		inx				inx 								; load range 0..r-1 into +1
.373c	20 48 35	jsr $3548			jsr 	EvaluateInteger
.373f	ca		dex				dex
.3740	20 33 3a	jsr $3a33			jsr 	MInt32Modulus 				; calculate random % modulus
.3743					_URExit:
.3743	20 53 3c	jsr $3c53			jsr 	CheckRightParen 			; check right and return
.3746	60		rts				rts
.3747					Unary_Min:
.3747	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3749	d0 02		bne $374d			bne 	UnaryMBody
.374b					Unary_Max:
.374b	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.374d					UnaryMBody:
.374d	48		pha				pha 								; save comparator on stack, shows min or max
.374e	20 29 35	jsr $3529			jsr 	Evaluate 					; get the first thing to check
.3751					_UnaryMLoop:
.3751	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3753	c8		iny				iny
.3754	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3756	f0 09		beq $3761			beq 	_UnaryMExit
.3758	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.375a	f0 07		beq $3763			beq 	_UnaryMCompare
.375c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.375e	20 18 15	jsr $1518		jsr	errorHandler
.3761					_UnaryMExit:
.3761	68		pla				pla 								; done so throw comparator and return.
.3762	60		rts				rts
.3763					_UnaryMCompare:
.3763	e8		inx				inx 								; get the 2nd thing to evaluate
.3764	20 29 35	jsr $3529			jsr 	Evaluate
.3767	ca		dex				dex
.3768	20 ef 32	jsr $32ef			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.376b	85 32		sta $32				sta 	tempShort 					; save result
.376d	68		pla				pla 								; get what we need
.376e	48		pha				pha
.376f	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3771	d0 de		bne $3751			bne 	_UnaryMLoop 				; no, try another value.
.3773	20 e0 3b	jsr $3be0			jsr 	MInt32False 				; promote 2nd to 1st.
.3776	20 c4 3a	jsr $3ac4			jsr 	MInt32Add
.3779	4c 51 37	jmp $3751			jmp 	_UnaryMLoop
.377c					Unary_Page:
.377c	20 e0 3b	jsr $3be0			jsr 	MInt32False 				; zero
.377f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3782	95 98		sta $98,x			sta 	esInt0,x
.3784	ad c9 0a	lda $0ac9			lda 	basePage+1
.3787	95 a0		sta $a0,x			sta 	esInt1,x
.3789	60		rts				rts
.378a					UnaryReference:
.378a	a9 0f		lda #$0f			lda 	#15
.378c	20 bf 33	jsr $33bf			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.378f	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.3791	10 05		bpl $3798			bpl 	UType
.3793	a9 00		lda #$00			lda 	#0 							; make it an integer
.3795	95 90		sta $90,x			sta 	esType,x
.3797	60		rts				rts
.3798					UType:
.3798	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.379a	20 18 15	jsr $1518		jsr	errorHandler
.379d					UnaryHexMarker:
.379d	4c 1a 35	jmp $351a			jmp 	EvaluateIntegerTerm
.37a0					UnaryComplement:
.37a0	20 1a 35	jsr $351a			jsr 	EvaluateIntegerTerm
.37a3	20 b4 3b	jsr $3bb4			jsr 	MInt32Not
.37a6	60		rts				rts
.37a7					UnaryIntToFloat:
.37a7	20 32 35	jsr $3532			jsr 	EvaluateNumeric				; some number
.37aa	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.37ac	d0 0b		bne $37b9			bne 	_UIFExit
.37ae	8a		txa				txa 								; convert and set type
.37af	a2 1c		ldx #$1c		ldx	#28
.37b1	20 44 24	jsr $2444		jsr	floatingpointHandler
.37b4	aa		tax				tax
.37b5	a9 01		lda #$01			lda 	#1
.37b7	95 90		sta $90,x			sta 	esType,x
.37b9					_UIFExit:
.37b9	60		rts				rts
.37ba					UnaryFloatToInt:
.37ba	20 32 35	jsr $3532			jsr 	EvaluateNumeric 			; the number
.37bd	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.37bf	f0 0b		beq $37cc			beq 	_UFIExit
.37c1	8a		txa				txa 								; convert to int
.37c2	a2 14		ldx #$14		ldx	#20
.37c4	20 44 24	jsr $2444		jsr	floatingpointHandler
.37c7	aa		tax				tax
.37c8	a9 00		lda #$00			lda 	#0 							; set type
.37ca	95 90		sta $90,x			sta 	esType,x
.37cc					_UFIExit:
.37cc	60		rts				rts
.37cd					UnaryAlloc:
.37cd	e8		inx				inx 								; evaluate memory required
.37ce	20 48 35	jsr $3548			jsr 	EvaluateInteger
.37d1	20 53 3c	jsr $3c53			jsr 	CheckRightParen
.37d4	ca		dex				dex
.37d5	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.37d7	15 b1		ora $b1,x			ora 	esInt3+1,x
.37d9	d0 1d		bne $37f8			bne 	_UABadValue
.37db	20 e0 3b	jsr $3be0			jsr 	MInt32False					; zero return.
.37de	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.37e0	95 a0		sta $a0,x			sta 	esInt1,x
.37e2	a5 35		lda $35				lda 	lowMemory
.37e4	95 98		sta $98,x			sta 	esInt0,x
.37e6	18		clc				clc 								; add alloc required.
.37e7	75 99		adc $99,x			adc 	esInt0+1,x
.37e9	85 35		sta $35				sta 	lowMemory
.37eb	a5 36		lda $36				lda 	lowMemory+1
.37ed	75 a1		adc $a1,x			adc 	esInt1+1,x
.37ef	85 36		sta $36				sta 	lowMemory+1
.37f1	b0 05		bcs $37f8			bcs		_UABadValue 				; overflow definitely bad.
.37f3	c5 34		cmp $34				cmp 	highMemory+1
.37f5	b0 01		bcs $37f8			bcs 	_UABadValue 				; out of memory bad.
.37f7	60		rts				rts
.37f8					_UABadValue:
.37f8	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.37fa	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.37fd					UnaryTimer:
.37fd	20 53 3c	jsr $3c53			jsr 	CheckRightParen 			; no parameters
.3800	98		tya				tya
.3801	48		pha				pha
.3802	20 07 3c	jsr $3c07			jsr 	MInt32Zero 					; zero result
.3805	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3807	a2 1c		ldx #$1c		ldx	#28
.3809	20 f6 14	jsr $14f6		jsr	deviceHandler
.380c	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.380e	95 98		sta $98,x			sta 	esInt0,x
.3810	98		tya				tya
.3811	95 a0		sta $a0,x			sta 	esInt1,x
.3813	68		pla				pla
.3814	a8		tay				tay
.3815	60		rts				rts
.3816					UnaryInkey:
.3816	20 53 3c	jsr $3c53			jsr 	CheckRightParen
.3819	86 2a		stx $2a				stx 	temp0
.381b	a2 0a		ldx #$0a		ldx	#10
.381d	20 f6 14	jsr $14f6		jsr	deviceHandler
.3820	a6 2a		ldx $2a				ldx 	temp0
.3822	20 ef 3b	jsr $3bef			jsr 	MInt32Set8Bit
.3825	60		rts				rts
.3826					UnaryGet:
.3826	20 53 3c	jsr $3c53			jsr 	CheckRightParen
.3829	86 2a		stx $2a				stx 	temp0
.382b					_UGLoop:
.382b	a2 02		ldx #$02		ldx	#2
.382d	20 f6 14	jsr $14f6		jsr	deviceHandler
.3830	a2 0a		ldx #$0a		ldx	#10
.3832	20 f6 14	jsr $14f6		jsr	deviceHandler
.3835	c9 00		cmp #$00			cmp 	#0
.3837	f0 f2		beq $382b			beq 	_UGLoop
.3839	a6 2a		ldx $2a				ldx 	temp0
.383b	20 ef 3b	jsr $3bef			jsr 	MInt32Set8Bit
.383e	60		rts				rts
.383f					UnaryGetString:
.383f	20 26 38	jsr $3826			jsr 	UnaryGet
.3842					UGSDoChr:
.3842	4c 93 38	jmp $3893			jmp 	ChrCode
.3845					UnaryInkeyString:
.3845	20 16 38	jsr $3816			jsr 	UnaryInkey
.3848	b5 98		lda $98,x			lda 	esInt0,x
.384a	d0 f6		bne $3842			bne 	UGSDoChr
.384c	8a		txa				txa
.384d	a2 08		ldx #$08		ldx	#8
.384f	20 8b 3f	jsr $3f8b		jsr	stringHandler
.3852	aa		tax				tax
.3853	60		rts				rts
.3854					UnarySys:
.3854	20 48 35	jsr $3548			jsr 	EvaluateInteger 				; get the address
.3857	20 53 3c	jsr $3c53			jsr 	CheckRightParen
.385a	20 36 29	jsr $2936			jsr 	TOSToTemp0 						; copy call address to temp0
.385d	8a		txa				txa
.385e	48		pha				pha
.385f	98		tya				tya
.3860	48		pha				pha
.3861	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3864	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3867	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.386a	20 79 38	jsr $3879			jsr 	_CallTemp0
.386d	85 32		sta $32				sta 	tempShort 						; restore YX
.386f	68		pla				pla
.3870	a8		tay				tay
.3871	68		pla				pla
.3872	aa		tax				tax
.3873	a5 32		lda $32				lda 	tempShort
.3875	20 ef 3b	jsr $3bef			jsr 	MInt32Set8Bit 					; return result.
.3878	60		rts				rts
.3879					_CallTemp0:
.3879	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.387c					UnaryMem:
.387c	20 e0 3b	jsr $3be0			jsr 	MInt32False 					; set to false (e.g. 0)
.387f	38		sec				sec
.3880	a5 33		lda $33				lda 	highMemory 						; calculate value
.3882	e5 35		sbc $35				sbc 	lowMemory
.3884	95 98		sta $98,x			sta 	esInt0,x
.3886	a5 34		lda $34				lda 	highMemory+1
.3888	e5 36		sbc $36				sbc 	lowMemory+1
.388a	95 a0		sta $a0,x			sta 	esInt1,x
.388c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.388d					ExecChr:
.388d	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger		; character number 0-255
.3890	20 53 3c	jsr $3c53			jsr 	CheckRightParen				; right bracket
.3893					ChrCode:
.3893	98		tya				tya
.3894	48		pha				pha
.3895	8a		txa				txa 								; A = stack
.3896	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3898	a2 02		ldx #$02		ldx	#2
.389a	20 8b 3f	jsr $3f8b		jsr	stringHandler
.389d	aa		tax				tax 								; X = stack
.389e	68		pla				pla
.389f	a8		tay				tay
.38a0	60		rts				rts
.38a1					ExecLower:
.38a1	38		sec				sec 								; set carry is lower
.38a2	b0 01		bcs $38a5			bcs 	ExecUpperLower
.38a4					ExecUpper:
.38a4	18		clc				clc 								; clear carry is upper
.38a5					ExecUpperLower:
.38a5	08		php				php 								; save carry
.38a6	20 3d 35	jsr $353d			jsr 	EvaluateString 				; string to stack,X
.38a9	20 53 3c	jsr $3c53			jsr 	CheckRightParen 			; check closing right bracket.
.38ac	28		plp				plp 								; restore carry, save Y
.38ad	98		tya				tya
.38ae	48		pha				pha
.38af	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.38b1	2a		rol a				rol 	a
.38b2	a8		tay				tay 								; now in Y
.38b3	8a		txa				txa 								; do the substring and exit.
.38b4	a2 0c		ldx #$0c		ldx	#12
.38b6	20 8b 3f	jsr $3f8b		jsr	stringHandler
.38b9	aa		tax				tax
.38ba	68		pla				pla
.38bb	a8		tay				tay
.38bc	60		rts				rts
.38bd					ExecLeft:
.38bd	20 3d 35	jsr $353d			jsr 	EvaluateString 				; string to stack,X
.38c0	20 60 3c	jsr $3c60			jsr 	CheckComma
.38c3	e8		inx				inx
.38c4	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.38c6	20 ef 3b	jsr $3bef			jsr 	MInt32Set8Bit
.38c9	e8		inx				inx
.38ca	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.38cd					ExecSubstring:
.38cd	ca		dex				dex 								; fix up X
.38ce	ca		dex				dex
.38cf	20 53 3c	jsr $3c53			jsr 	CheckRightParen 			; check closing right bracket.
.38d2	8a		txa				txa 								; do the substring and exit.
.38d3	a2 0e		ldx #$0e		ldx	#14
.38d5	20 8b 3f	jsr $3f8b		jsr	stringHandler
.38d8	aa		tax				tax
.38d9	60		rts				rts
.38da					ExecMid:
.38da	20 3d 35	jsr $353d			jsr 	EvaluateString 				; string to stack,X
.38dd	20 60 3c	jsr $3c60			jsr 	CheckComma
.38e0	e8		inx				inx
.38e1	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.38e4	c9 00		cmp #$00			cmp 	#0
.38e6	f0 15		beq $38fd			beq 	_EMValue
.38e8	e8		inx				inx
.38e9	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.38eb	20 ef 3b	jsr $3bef			jsr 	MInt32Set8Bit
.38ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.38f0	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.38f2	f0 d9		beq $38cd			beq 	ExecSubString
.38f4	20 60 3c	jsr $3c60			jsr 	CheckComma
.38f7	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.38fa	4c cd 38	jmp $38cd			jmp 	ExecSubString
.38fd					_EMValue:
.38fd	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.38ff	20 18 15	jsr $1518		jsr	errorHandler
.3902					ExecRight:
.3902	20 3d 35	jsr $353d			jsr 	EvaluateString 				; string to stack,X
.3905	20 60 3c	jsr $3c60			jsr 	CheckComma
.3908	e8		inx				inx
.3909	20 50 35	jsr $3550			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.390c	ca		dex				dex
.390d	98		tya				tya
.390e	48		pha				pha
.390f	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3911	85 2a		sta $2a				sta 	temp0
.3913	b5 a0		lda $a0,x			lda 	esInt1,x
.3915	85 2b		sta $2b				sta 	temp0+1
.3917	a0 00		ldy #$00			ldy 	#0 							; point to length
.3919	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.391b	18		clc				clc 								; add 1.
.391c	69 01		adc #$01			adc 	#1
.391e	38		sec				sec
.391f	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3921	f0 02		beq $3925			beq		_ERMake1 					; if zero, make it 1.
.3923	b0 02		bcs $3927			bcs		_EROkay
.3925					_ERMake1:
.3925	a9 01		lda #$01			lda 	#1 							; start position.
.3927					_EROkay:
.3927	e8		inx				inx 								; set start pos.
.3928	95 98		sta $98,x			sta 	esInt0,x
.392a	e8		inx				inx
.392b	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.392d	20 ef 3b	jsr $3bef			jsr 	MInt32Set8Bit
.3930	68		pla				pla
.3931	a8		tay				tay
.3932	4c cd 38	jmp $38cd			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3935					MInt32And:
.3935	b5 98		lda $98,x			lda 	esInt0,x
.3937	35 99		and $99,x			and 	esInt0+1,x
.3939	95 98		sta $98,x			sta 	esInt0,x
.393b	b5 a0		lda $a0,x			lda 	esInt1,x
.393d	35 a1		and $a1,x			and 	esInt1+1,x
.393f	95 a0		sta $a0,x			sta 	esInt1,x
.3941	b5 a8		lda $a8,x			lda 	esInt2,x
.3943	35 a9		and $a9,x			and 	esInt2+1,x
.3945	95 a8		sta $a8,x			sta 	esInt2,x
.3947	b5 b0		lda $b0,x			lda 	esInt3,x
.3949	35 b1		and $b1,x			and 	esInt3+1,x
.394b	95 b0		sta $b0,x			sta 	esInt3,x
.394d	60		rts				rts
.394e					MInt32Or:
.394e	b5 98		lda $98,x			lda 	esInt0,x
.3950	15 99		ora $99,x			ora 	esInt0+1,x
.3952	95 98		sta $98,x			sta 	esInt0,x
.3954	b5 a0		lda $a0,x			lda 	esInt1,x
.3956	15 a1		ora $a1,x			ora 	esInt1+1,x
.3958	95 a0		sta $a0,x			sta 	esInt1,x
.395a	b5 a8		lda $a8,x			lda 	esInt2,x
.395c	15 a9		ora $a9,x			ora 	esInt2+1,x
.395e	95 a8		sta $a8,x			sta 	esInt2,x
.3960	b5 b0		lda $b0,x			lda 	esInt3,x
.3962	15 b1		ora $b1,x			ora 	esInt3+1,x
.3964	95 b0		sta $b0,x			sta 	esInt3,x
.3966	60		rts				rts
.3967					MInt32Xor:
.3967	b5 98		lda $98,x			lda 	esInt0,x
.3969	55 99		eor $99,x			eor 	esInt0+1,x
.396b	95 98		sta $98,x			sta 	esInt0,x
.396d	b5 a0		lda $a0,x			lda 	esInt1,x
.396f	55 a1		eor $a1,x			eor 	esInt1+1,x
.3971	95 a0		sta $a0,x			sta 	esInt1,x
.3973	b5 a8		lda $a8,x			lda 	esInt2,x
.3975	55 a9		eor $a9,x			eor 	esInt2+1,x
.3977	95 a8		sta $a8,x			sta 	esInt2,x
.3979	b5 b0		lda $b0,x			lda 	esInt3,x
.397b	55 b1		eor $b1,x			eor 	esInt3+1,x
.397d	95 b0		sta $b0,x			sta 	esInt3,x
.397f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3980					MInt32Compare:
.3980	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3982	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3984	d0 13		bne $3999			bne 	MInt32Compare2
.3986	b5 a0		lda $a0,x			lda 	esInt1,x
.3988	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.398a	d0 0d		bne $3999			bne 	MInt32Compare2
.398c	b5 a8		lda $a8,x			lda 	esInt2,x
.398e	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3990	d0 07		bne $3999			bne 	MInt32Compare2
.3992	b5 b0		lda $b0,x			lda 	esInt3,x
.3994	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3996	d0 01		bne $3999			bne 	MInt32Compare2
.3998	60		rts				rts
.3999					MInt32Compare2:
.3999	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.399b	d5 99		cmp $99,x			cmp 	esInt0+1,x
.399d	b5 a0		lda $a0,x			lda		esInt1,x
.399f	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.39a1	b5 a8		lda $a8,x			lda		esInt2,x
.39a3	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.39a5	b5 b0		lda $b0,x			lda		esInt3,x
.39a7	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.39a9	50 02		bvc $39ad			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.39ab	49 80		eor #$80			eor 	#$80
.39ad					_I32LNoOverflow
.39ad	30 03		bmi $39b2			bmi 	MInt32CLess					; if -ve then return $FF
.39af	a9 01		lda #$01			lda 	#$01						; else return $01
.39b1	60		rts				rts
.39b2					MInt32CLess:
.39b2	a9 ff		lda #$ff			lda 	#$FF
.39b4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.39b5					MInt32SDivide:
.39b5	98		tya				tya  								; save Y, which is the count of negations
.39b6	48		pha				pha
.39b7	a0 00		ldy #$00			ldy 	#0 							; zero count
.39b9	20 d1 39	jsr $39d1			jsr 	_MInt32SRemSign 			; unsign TOS
.39bc	e8		inx				inx 								; unsign TOS+1
.39bd	20 d1 39	jsr $39d1			jsr 	_MInt32SRemSign
.39c0	ca		dex				dex
.39c1	98		tya				tya 								; save sign count on stack
.39c2	48		pha				pha
.39c3	20 da 39	jsr $39da			jsr 	MInt32UDivide 				; unsigned division
.39c6	68		pla				pla 								; get sign count back
.39c7	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.39c9	f0 03		beq $39ce			beq 	_I32SNoNeg
.39cb	20 9a 3b	jsr $3b9a			jsr 	MInt32Negate
.39ce					_I32SNoNeg:
.39ce	68		pla				pla 								; restoe Y and exit
.39cf	a8		tay				tay
.39d0	60		rts				rts
.39d1					_MInt32SRemSign:
.39d1	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.39d3	10 04		bpl $39d9			bpl 	_MInt32SRSExit
.39d5	c8		iny				iny 								; increment the sign count
.39d6	20 9a 3b	jsr $3b9a			jsr 	MInt32Negate 				; negate the value.
.39d9					_MInt32SRSExit:
.39d9	60		rts				rts
.39da					MInt32UDivide:
.39da	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.39dc	15 a1		ora $a1,x			ora 	esInt1+1,x
.39de	15 a2		ora $a2,x			ora 	esInt1+2,x
.39e0	15 a3		ora $a3,x			ora 	esInt1+3,x
.39e2	f0 4a		beq $3a2e			beq 	_MInt32DZero
.39e4	e8		inx				inx 								; clear A
.39e5	e8		inx				inx
.39e6	20 e0 3b	jsr $3be0			jsr 	MInt32False
.39e9	ca		dex				dex
.39ea	ca		dex				dex
.39eb	98		tya				tya 								; save Y on the stack
.39ec	48		pha				pha
.39ed	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.39ef					_MInt32UDLoop:
.39ef	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.39f1	36 a0		rol $a0,x			rol 	esInt1,x
.39f3	36 a8		rol $a8,x			rol 	esInt2,x
.39f5	36 b0		rol $b0,x			rol 	esInt3,x
.39f7	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.39f9	36 a2		rol $a2,x			rol 	esInt1+2,x
.39fb	36 aa		rol $aa,x			rol 	esInt2+2,x
.39fd	36 b2		rol $b2,x			rol 	esInt3+2,x
.39ff	38		sec				sec 								; calculate A-M saving result on the stack
.3a00	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3a02	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3a04	48		pha				pha
.3a05	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3a07	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3a09	48		pha				pha
.3a0a	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3a0c	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3a0e	48		pha				pha
.3a0f	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3a11	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3a13	90 10		bcc $3a25			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3a15	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3a17	68		pla				pla
.3a18	95 aa		sta $aa,x			sta 	esInt2+2,x
.3a1a	68		pla				pla
.3a1b	95 a2		sta $a2,x			sta 	esInt1+2,x
.3a1d	68		pla				pla
.3a1e	95 9a		sta $9a,x			sta 	esInt0+2,x
.3a20	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3a22	4c 28 3a	jmp $3a28			jmp 	_MInt32Next 					; do the next iteration
.3a25					_MInt32NoSubtract:
.3a25	68		pla				pla
.3a26	68		pla				pla
.3a27	68		pla				pla
.3a28					_MInt32Next:
.3a28	88		dey				dey 								; do this 32 times.
.3a29	d0 c4		bne $39ef			bne 	_MInt32UDLoop
.3a2b	68		pla				pla 								; restore Y and exit
.3a2c	a8		tay				tay
.3a2d	60		rts				rts
.3a2e					_MInt32DZero:
.3a2e	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3a30	20 18 15	jsr $1518		jsr	errorHandler
.3a33					MInt32Modulus:
.3a33	20 da 39	jsr $39da			jsr 	MInt32UDivide 				; do the division.
.3a36	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3a38	95 b0		sta $b0,x			sta 	esInt3,x
.3a3a	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3a3c	95 a8		sta $a8,x			sta 	esInt2,x
.3a3e	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3a40	95 a0		sta $a0,x			sta 	esInt1,x
.3a42	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3a44	95 98		sta $98,x			sta 	esInt0,x
.3a46	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d0b					fs32Length:
>0d0b							.fill 	1
.3a47					LinkInt32FromString:
.3a47	aa		tax				tax
.3a48	98		tya				tya
.3a49	20 4e 3a	jsr $3a4e			jsr 	MInt32FromString
.3a4c	8a		txa				txa
.3a4d	60		rts				rts
.3a4e					MInt32FromString:
.3a4e	85 32		sta $32				sta 	tempShort 					; save base
.3a50	98		tya				tya
.3a51	48		pha				pha
.3a52	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3a54	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a56	8d 0b 0d	sta $0d0b			sta 	fs32Length
.3a59	f0 65		beq $3ac0			beq 	_I32FSFail2					; fail if length zero.
.3a5b	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3a5d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3a5f	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3a61	d0 09		bne $3a6c			bne 	_I32FSNotNegative
.3a63	ad 0b 0d	lda $0d0b			lda 	fs32Length 					; get length back.
.3a66	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3a68	f0 56		beq $3ac0			beq 	_I32FSFail2
.3a6a	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3a6c					_I32FSNotNegative:
.3a6c	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3a6e	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3a70	d0 02		bne $3a74			bne 	_I32FSNN2
.3a72	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3a74					_I32FSNN2:
.3a74	48		pha				pha 								; save base + final sign on stack.
.3a75	20 e0 3b	jsr $3be0			jsr 	MInt32False 				; zero the return value.
.3a78					_I32FSMainLoop:
.3a78	68		pla				pla 								; get the base back into tempShort
.3a79	48		pha				pha
.3a7a	29 7f		and #$7f			and 	#$7F
.3a7c	85 32		sta $32				sta 	tempShort
.3a7e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3a80	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3a82	90 02		bcc $3a86			bcc 	_I32FSNotLC
.3a84	e9 20		sbc #$20			sbc 	#32
.3a86					_I32FSNotLC:
.3a86	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3a87	e9 30		sbc #$30			sbc 	#"0"
.3a89	90 34		bcc $3abf			bcc 	_I32FSFail 					; nothing more to do.
.3a8b	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3a8d	90 06		bcc $3a95			bcc 	_I32FSValidate
.3a8f	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3a91	90 2c		bcc $3abf			bcc 	_I32FSFail
.3a93	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3a95					_I32FSValidate:
.3a95	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3a97	b0 26		bcs $3abf			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3a99	48		pha				pha 								; save the new digit value.
.3a9a	e8		inx				inx 								; put base into next slot up on stack
.3a9b	a5 32		lda $32				lda 	tempShort
.3a9d	20 ef 3b	jsr $3bef			jsr 	MInt32Set8Bit
.3aa0	ca		dex				dex
.3aa1	20 f8 3a	jsr $3af8			jsr 	MInt32Multiply 				; multiply current by the base
.3aa4	e8		inx				inx
.3aa5	68		pla				pla  								; put additive into next slot
.3aa6	20 ef 3b	jsr $3bef			jsr 	MInt32Set8Bit
.3aa9	ca		dex				dex
.3aaa	20 c4 3a	jsr $3ac4			jsr 	MInt32Add 					; and add it
.3aad	c8		iny				iny 								; bump the character pointer
.3aae	cc 0b 0d	cpy $0d0b			cpy 	fs32Length 					; until > length.
.3ab1	f0 c5		beq $3a78			beq 	_I32FSMainLoop
.3ab3	90 c3		bcc $3a78			bcc 	_I32FSMainLoop
.3ab5					_I32FSDone:
.3ab5	68		pla				pla 								; get base/final sign back
.3ab6	10 03		bpl $3abb			bpl 	_I32FSNN3
.3ab8	20 9a 3b	jsr $3b9a			jsr 	MInt32Negate 				; negate the result.
.3abb					_I32FSNN3:
.3abb	68		pla				pla
.3abc	a8		tay				tay
.3abd	38		sec				sec
.3abe	60		rts				rts
.3abf					_I32FSFail:
.3abf	68		pla				pla
.3ac0					_I32FSFail2:
.3ac0	68		pla				pla
.3ac1	a8		tay				tay
.3ac2	18		clc				clc
.3ac3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3ac4					MInt32Add:
.3ac4	18		clc				clc
.3ac5	b5 98		lda $98,x			lda 	esInt0,x
.3ac7	75 99		adc $99,x			adc 	esInt0+1,x
.3ac9	95 98		sta $98,x			sta 	esInt0,x
.3acb	b5 a0		lda $a0,x			lda 	esInt1,x
.3acd	75 a1		adc $a1,x			adc 	esInt1+1,x
.3acf	95 a0		sta $a0,x			sta 	esInt1,x
.3ad1	b5 a8		lda $a8,x			lda 	esInt2,x
.3ad3	75 a9		adc $a9,x			adc 	esInt2+1,x
.3ad5	95 a8		sta $a8,x			sta 	esInt2,x
.3ad7	b5 b0		lda $b0,x			lda 	esInt3,x
.3ad9	75 b1		adc $b1,x			adc 	esInt3+1,x
.3adb	95 b0		sta $b0,x			sta 	esInt3,x
.3add	60		rts				rts
.3ade					MInt32Sub:
.3ade	38		sec				sec
.3adf	b5 98		lda $98,x			lda 	esInt0,x
.3ae1	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3ae3	95 98		sta $98,x			sta 	esInt0,x
.3ae5	b5 a0		lda $a0,x			lda 	esInt1,x
.3ae7	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3ae9	95 a0		sta $a0,x			sta 	esInt1,x
.3aeb	b5 a8		lda $a8,x			lda 	esInt2,x
.3aed	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3aef	95 a8		sta $a8,x			sta 	esInt2,x
.3af1	b5 b0		lda $b0,x			lda 	esInt3,x
.3af3	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3af5	95 b0		sta $b0,x			sta 	esInt3,x
.3af7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3af8					MInt32Multiply:
.3af8	e8		inx				inx 								; copy 2nd -> 3rd
.3af9	20 1e 3b	jsr $3b1e			jsr 	MInt32CopyUp
.3afc	ca		dex				dex
.3afd	20 1e 3b	jsr $3b1e			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3b00	20 e0 3b	jsr $3be0			jsr 	MInt32False 				; zero 1st.
.3b03					_I32Loop:
.3b03	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3b05	29 01		and #$01			and 	#1
.3b07	f0 03		beq $3b0c			beq 	_I32NoAdd 					; if set
.3b09	20 c4 3a	jsr $3ac4			jsr 	MInt32Add 					; add 2nd to 1st.
.3b0c					_I32NoAdd:
.3b0c	e8		inx				inx 								; shift 2nd left
.3b0d	20 f5 3b	jsr $3bf5			jsr 	MInt32ShiftLeft
.3b10	e8		inx				inx  								; shift 3rd right
.3b11	20 fe 3b	jsr $3bfe			jsr 	MInt32ShiftRight
.3b14	20 07 3c	jsr $3c07			jsr 	MInt32Zero 					; check if zero.
.3b17	08		php				php 								; save status bits
.3b18	ca		dex				dex 	 							; point back to 1st
.3b19	ca		dex				dex
.3b1a	28		plp				plp 								; get status bits
.3b1b	d0 e6		bne $3b03			bne 	_I32Loop 					; if non-zero keep going.
.3b1d	60		rts				rts
.3b1e					MInt32CopyUp:
.3b1e	b5 98		lda $98,x			lda 	esInt0,x
.3b20	95 99		sta $99,x			sta 	esInt0+1,x
.3b22	b5 a0		lda $a0,x			lda 	esInt1,x
.3b24	95 a1		sta $a1,x			sta 	esInt1+1,x
.3b26	b5 a8		lda $a8,x			lda 	esInt2,x
.3b28	95 a9		sta $a9,x			sta 	esInt2+1,x
.3b2a	b5 b0		lda $b0,x			lda 	esInt3,x
.3b2c	95 b1		sta $b1,x			sta 	esInt3+1,x
.3b2e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d0c					MCharCount:	.fill 	1						; count of converted characters
.3b2f					MLInt32ToString:
.3b2f	aa		tax				tax									; module passes stack in A, base in Y
.3b30	98		tya				tya
.3b31	20 36 3b	jsr $3b36			jsr 	MInt32ToString
.3b34	8a		txa				txa
.3b35	60		rts				rts
.3b36					MInt32ToString:
.3b36	48		pha				pha 								; save base
.3b37	85 32		sta $32				sta 	tempShort 					; save target base.
.3b39	a9 00		lda #$00			lda 	#0
.3b3b	8d 0c 0d	sta $0d0c			sta 	MCharCount 					; clear character count to 0
.3b3e	98		tya				tya
.3b3f	48		pha				pha
.3b40	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3b42	10 10		bpl $3b54			bpl 	_I32TSUnsigned
.3b44	48		pha				pha 								; save base on stack.
.3b45	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3b47	10 08		bpl $3b51			bpl 	_I32TSNoFlip
.3b49	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3b4b	20 87 3b	jsr $3b87			jsr 	MI32WriteCharacter
.3b4e	20 9a 3b	jsr $3b9a			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3b51					_I32TSNoFlip:
.3b51	68		pla				pla 								; get the base back
.3b52	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3b54					_I32TSUnsigned:
.3b54	20 62 3b	jsr $3b62			jsr 	MI32DivideWrite 			; recursive code to output string.
.3b57	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3b59	ad 0c 0d	lda $0d0c			lda 	MCharCount
.3b5c	91 2a		sta ($2a),y			sta 	(temp0),y
.3b5e	68		pla				pla
.3b5f	a8		tay				tay
.3b60	68		pla				pla
.3b61	60		rts				rts
.3b62					MI32DivideWrite:
.3b62	48		pha				pha 								; save the divisor/base
.3b63	e8		inx				inx 								; write in the dividing position.
.3b64	20 ef 3b	jsr $3bef			jsr 	MInt32Set8Bit
.3b67	ca		dex				dex
.3b68	20 da 39	jsr $39da			jsr 	MInt32UDivide 				; divide number by base.
.3b6b	68		pla				pla 								; get the base into Y
.3b6c	a8		tay				tay
.3b6d	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3b6f	48		pha				pha
.3b70	20 07 3c	jsr $3c07			jsr 	MInt32Zero 					; is the result zero ?
.3b73	f0 04		beq $3b79			beq 	_I32NoRecurse 				; if so, don't recurse.
.3b75	98		tya				tya 								; put base into A
.3b76	20 62 3b	jsr $3b62			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3b79					_I32NoRecurse:
.3b79	68		pla				pla 								; get the remainder back
.3b7a	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3b7c	90 02		bcc $3b80			bcc 	_I32NotHex
.3b7e	69 06		adc #$06			adc 	#7-1
.3b80					_I32NotHex:
.3b80	18		clc				clc 								; make it ASCII
.3b81	69 30		adc #$30			adc 	#48
.3b83	20 87 3b	jsr $3b87			jsr 	MI32WriteCharacter 			; write the character out
.3b86	60		rts				rts 								; and exit.
.3b87					MI32WriteCharacter:
.3b87	ee 0c 0d	inc $0d0c			inc 	MCharCount 					; bump count (space for leading count)
.3b8a	ac 0c 0d	ldy $0d0c			ldy 	MCharCount 					; get position
.3b8d	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3b8f	c8		iny				iny
.3b90	a9 00		lda #$00			lda 	#0
.3b92	91 2a		sta ($2a),y			sta 	(temp0),y
.3b94	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d0d					MSeed32:	.fill 	4							; random number seed.
.3b95					MInt32Absolute:
.3b95	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3b97	30 01		bmi $3b9a			bmi 	MInt32Negate
.3b99	60		rts				rts
.3b9a					MInt32Negate:
.3b9a	38		sec				sec 								; subtract from zero.
.3b9b	a9 00		lda #$00			lda 	#0
.3b9d	f5 98		sbc $98,x			sbc 	esInt0,x
.3b9f	95 98		sta $98,x			sta 	esInt0,x
.3ba1	a9 00		lda #$00			lda 	#0
.3ba3	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3ba5	95 a0		sta $a0,x			sta 	esInt1,x
.3ba7	a9 00		lda #$00			lda 	#0
.3ba9	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3bab	95 a8		sta $a8,x			sta 	esInt2,x
.3bad	a9 00		lda #$00			lda 	#0
.3baf	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3bb1	95 b0		sta $b0,x			sta 	esInt3,x
.3bb3	60		rts				rts
.3bb4					MInt32Not:
.3bb4	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3bb6	49 ff		eor #$ff			eor 	#$FF
.3bb8	95 98		sta $98,x			sta 	esInt0,x
.3bba	b5 a0		lda $a0,x			lda 	esInt1,x
.3bbc	49 ff		eor #$ff			eor 	#$FF
.3bbe	95 a0		sta $a0,x			sta 	esInt1,x
.3bc0	b5 a8		lda $a8,x			lda 	esInt2,x
.3bc2	49 ff		eor #$ff			eor 	#$FF
.3bc4	95 a8		sta $a8,x			sta 	esInt2,x
.3bc6	b5 b0		lda $b0,x			lda 	esInt3,x
.3bc8	49 ff		eor #$ff			eor 	#$FF
.3bca	95 b0		sta $b0,x			sta 	esInt3,x
.3bcc	60		rts				rts
.3bcd					MInt32Sign:
.3bcd	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3bcf	30 0b		bmi $3bdc			bmi 	MInt32True 					; if set return -1 (true)
.3bd1	20 07 3c	jsr $3c07			jsr 	MInt32Zero 					; is it zero ?
.3bd4	f0 0a		beq $3be0			beq 	MInt32False 				; if zero return 0 (false)
.3bd6	20 e0 3b	jsr $3be0			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3bd9	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3bdb	60		rts				rts
.3bdc					MInt32True:
.3bdc	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3bde	d0 02		bne $3be2			bne 	MInt32WriteAll
.3be0					MInt32False:
.3be0	a9 00		lda #$00			lda 	#0
.3be2					MInt32WriteAll:
.3be2	95 98		sta $98,x			sta 	esInt0,x
.3be4					MInt32Write123:
.3be4	95 a0		sta $a0,x			sta 	esInt1,x
.3be6	95 a8		sta $a8,x			sta 	esInt2,x
.3be8	95 b0		sta $b0,x			sta 	esInt3,x
.3bea	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3bec	95 90		sta $90,x			sta 	esType,x
.3bee	60		rts				rts
.3bef					MInt32Set8Bit:
.3bef	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3bf1	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3bf3	f0 ef		beq $3be4			beq		MInt32Write123
.3bf5					MInt32ShiftLeft:
.3bf5	16 98		asl $98,x			asl 	esInt0,x
.3bf7	36 a0		rol $a0,x			rol	 	esInt1,x
.3bf9	36 a8		rol $a8,x			rol	 	esInt2,x
.3bfb	36 b0		rol $b0,x			rol	 	esInt3,x
.3bfd	60		rts				rts
.3bfe					MInt32ShiftRight:
.3bfe	56 b0		lsr $b0,x			lsr 	esInt3,x
.3c00	76 a8		ror $a8,x			ror 	esInt2,x
.3c02	76 a0		ror $a0,x			ror 	esInt1,x
.3c04	76 98		ror $98,x			ror 	esInt0,x
.3c06	60		rts				rts
.3c07					MInt32Zero:
.3c07	b5 98		lda $98,x			lda 	esInt0,x
.3c09	15 a0		ora $a0,x			ora 	esInt1,x
.3c0b	15 a8		ora $a8,x			ora 	esInt2,x
.3c0d	15 b0		ora $b0,x			ora 	esInt3,x
.3c0f	60		rts				rts
.3c10					MInt32Random:
.3c10	98		tya				tya
.3c11	48		pha				pha
.3c12	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3c14	ad 0d 0d	lda $0d0d			lda 	MSeed32+0 					; check the seed isn't zero
.3c17	d0 03		bne $3c1c			bne 	_Random1
.3c19	a8		tay				tay 								; if so do it 256 times
.3c1a	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3c1c					_Random1:
.3c1c	0a		asl a				asl 	a
.3c1d	2e 0e 0d	rol $0d0e			rol 	MSeed32+1
.3c20	2e 0f 0d	rol $0d0f			rol 	MSeed32+2
.3c23	2e 10 0d	rol $0d10			rol 	MSeed32+3
.3c26	90 02		bcc $3c2a			bcc 	_Random2
.3c28	49 c5		eor #$c5			eor 	#$C5
.3c2a					_Random2:
.3c2a	88		dey				dey
.3c2b	d0 ef		bne $3c1c			bne 	_Random1
.3c2d	8d 0d 0d	sta $0d0d			sta 	MSeed32+0 					; copy the seed in.
.3c30	95 98		sta $98,x			sta 	esInt0,x
.3c32	ad 0e 0d	lda $0d0e			lda 	MSeed32+1
.3c35	95 a0		sta $a0,x			sta 	esInt1,x
.3c37	ad 0f 0d	lda $0d0f			lda 	MSeed32+2
.3c3a	95 a8		sta $a8,x			sta 	esInt2,x
.3c3c	ad 10 0d	lda $0d10			lda 	MSeed32+3
.3c3f	95 b0		sta $b0,x			sta 	esInt3,x
.3c41	68		pla				pla
.3c42	a8		tay				tay
.3c43	a9 00		lda #$00			lda 	#0
.3c45	95 90		sta $90,x			sta 	esType,x
.3c47	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3c48					CheckToken:
.3c48	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3c4a	d0 02		bne $3c4e			bne 	_CTError
.3c4c	c8		iny				iny
.3c4d	60		rts				rts
.3c4e					_CTError:
.3c4e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3c50	20 18 15	jsr $1518		jsr	errorHandler
.3c53					CheckRightParen:
.3c53	b1 28		lda ($28),y			lda 	(codePtr),y
.3c55	c8		iny				iny
.3c56	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3c58	d0 01		bne $3c5b			bne 	_CRPError
.3c5a	60		rts				rts
.3c5b					_CRPError:
.3c5b	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3c5d	20 18 15	jsr $1518		jsr	errorHandler
.3c60					CheckComma:
.3c60	b1 28		lda ($28),y			lda 	(codePtr),y
.3c62	c8		iny				iny
.3c63	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3c65	d0 01		bne $3c68			bne 	_CCError
.3c67	60		rts				rts
.3c68					_CCError:
.3c68	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3c6a	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3c6d					RSReset:
.3c6d	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3c6f	85 37		sta $37				sta 	rsPointer
.3c71	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3c73	85 38		sta $38				sta 	1+(rsPointer)
.3c75	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3c77	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3c7a	60		rts				rts
.3c7b					RSClaim:
.3c7b	84 32		sty $32				sty 	tempShort 					; preserve Y
.3c7d	48		pha				pha 								; save marker on stack.
.3c7e	8a		txa				txa 								; get bytes required.
.3c7f	38		sec				sec
.3c80	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3c82	65 37		adc $37				adc 	rsPointer
.3c84	85 37		sta $37				sta 	rsPointer
.3c86	a5 38		lda $38				lda 	rsPointer+1
.3c88	69 ff		adc #$ff			adc 	#$FF
.3c8a	85 38		sta $38				sta 	rsPointer+1
.3c8c	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3c8e	90 08		bcc $3c98			bcc 	_RSCOverflow
.3c90	68		pla				pla 								; get marker back
.3c91	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3c93	91 37		sta ($37),y			sta 	(rsPointer),y
.3c95	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3c97	60		rts				rts
.3c98					_RSCOverflow:
.3c98	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3c9a	20 18 15	jsr $1518		jsr	errorHandler
.3c9d					RSFree:
.3c9d	18		clc				clc
.3c9e	65 37		adc $37				adc 	rsPointer
.3ca0	85 37		sta $37				sta 	rsPointer
.3ca2	90 02		bcc $3ca6			bcc 	_RSFExit
.3ca4	e6 38		inc $38				inc 	rsPointer+1
.3ca6					_RSFExit:
.3ca6	60		rts				rts
.3ca7					RSSavePosition:
.3ca7	84 32		sty $32				sty 	tempShort 					; save Y position
.3ca9	a8		tay				tay 								; this is where we write it.
.3caa	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3cac	91 37		sta ($37),y			sta 	(rsPointer),y
.3cae	c8		iny				iny
.3caf	a5 29		lda $29				lda 	codePtr+1
.3cb1	91 37		sta ($37),y			sta 	(rsPointer),y
.3cb3	c8		iny				iny
.3cb4	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3cb6	91 37		sta ($37),y			sta 	(rsPointer),y
.3cb8	a8		tay				tay 								; fix Y back again to original value
.3cb9	60		rts				rts
.3cba					RSLoadPosition:
.3cba	a8		tay				tay
.3cbb	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3cbd	85 28		sta $28				sta 	codePtr
.3cbf	c8		iny				iny
.3cc0	b1 37		lda ($37),y			lda 	(rsPointer),y
.3cc2	85 29		sta $29				sta 	codePtr+1
.3cc4	c8		iny				iny
.3cc5	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3cc7	a8		tay				tay 								; to Y
.3cc8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3cc9					WarmStart:
.3cc9	a2 04		ldx #$04		ldx	#4
.3ccb	20 30 26	jsr $2630		jsr	interactionHandler

;******  Return to file: main/main.asm

.3cce					mainHandler:
.3cce	7c d1 3c	jmp ($3cd1,x)			jmp 	(mainVectors,x)
.3cd1					mainVectors:
>3cd1	ed 3c					.word _DummyControlHandler ; index 0
>3cd3	60 3c					.word CheckComma           ; index 2
>3cd5	53 3c					.word CheckRightParen      ; index 4
>3cd7	38 2e					.word XCommandClear        ; index 6
>3cd9	63 35					.word LinkEvaluate         ; index 8
>3cdb	6f 35					.word LinkEvaluateInteger  ; index 10
>3cdd	7b 35					.word LinkEvaluateSmallInt ; index 12
>3cdf	75 35					.word LinkEvaluateString   ; index 14
>3ce1	69 35					.word LinkEvaluateTerm     ; index 16
>3ce3	2f 3b					.word MLInt32ToString      ; index 18
>3ce5	c7 2f					.word Command_XNew         ; index 20
>3ce7	d5 2f					.word XCommand_Run         ; index 22
>3ce9	e1 2f					.word Command_RunFrom      ; index 24
>3ceb	47 3a					.word LinkInt32FromString  ; index 26
.3ced					_DummyControlHandler:
.3ced	60		rts			rts

;******  Return to file: basic.asm

.3cee					section_end_main:
.3cee					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3cee					StringChrs:
.3cee	aa		tax				tax 								; set up stack
.3cef	a9 02		lda #$02			lda 	#2
.3cf1	20 b1 3d	jsr $3db1			jsr 	AllocateSoftString
.3cf4	98		tya				tya
.3cf5	20 d7 3d	jsr $3dd7			jsr 	WriteSoftString
.3cf8					StringUpdate:
.3cf8	20 06 3d	jsr $3d06			jsr 	ReturnSoftString
.3cfb	8a		txa				txa
.3cfc	60		rts				rts
.3cfd					StringNull:
.3cfd	aa		tax				tax
.3cfe	a9 01		lda #$01			lda 	#1
.3d00	20 b1 3d	jsr $3db1			jsr 	AllocateSoftString
.3d03	4c f8 3c	jmp $3cf8			jmp 	StringUpdate
.3d06					ReturnSoftString:
.3d06	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3d08	95 98		sta $98,x			sta 	esInt0,x
.3d0a	a5 3a		lda $3a				lda 	softMemAlloc+1
.3d0c	95 a0		sta $a0,x			sta 	esInt1,x
.3d0e	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3d10	95 a8		sta $a8,x			sta 	esInt2,x
.3d12	95 b0		sta $b0,x			sta 	esInt3,x
.3d14	a9 40		lda #$40			lda 	#$40 						; type string.
.3d16	95 90		sta $90,x			sta 	esType,x
.3d18	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3d19					STRCompare:
.3d19	48		pha				pha 								; save A
.3d1a	aa		tax				tax 								; put stack pos in X
.3d1b	98		tya				tya
.3d1c	48		pha				pha
.3d1d	20 51 3d	jsr $3d51			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3d20	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3d22	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d24	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3d26	90 02		bcc $3d2a			bcc 	_SCNotSmaller
.3d28	b1 2c		lda ($2c),y			lda 	(temp1),y
.3d2a					_SCNotSmaller:
.3d2a	aa		tax				tax 								; put that in X. We compare this many chars first.
.3d2b					_SCCompareLoop:
.3d2b	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3d2d	f0 0c		beq $3d3b			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3d2f	ca		dex				dex 								; decrement chars to compare.
.3d30	c8		iny				iny 								; move to next character
.3d31	38		sec				sec 								; calculate s1[y]-s2[y]
.3d32	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d34	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3d36	d0 0a		bne $3d42			bne 	_SCReturnResult 			; if different return sign of A
.3d38	4c 2b 3d	jmp $3d2b			jmp 	_SCCompareLoop
.3d3b					_SCSameToEndShortest
.3d3b	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3d3d	38		sec				sec
.3d3e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d40	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3d42					_SCReturnResult:
.3d42	08		php				php 								; set return to zero preserving PSW.
.3d43	a2 00		ldx #$00			ldx 	#0
.3d45	28		plp				plp
.3d46	f0 05		beq $3d4d			beq 	_SCExit 					; two values equal, then exit
.3d48	ca		dex				dex 								; X = $FF
.3d49	90 02		bcc $3d4d			bcc 	_SCExit 					; if 1st < 2nd then -1
.3d4b	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3d4d					_SCExit:
.3d4d	68		pla				pla
.3d4e	a8		tay				tay
.3d4f	68		pla				pla
.3d50	60		rts				rts
.3d51					CopyStringPair:
.3d51	b5 99		lda $99,x			lda 	esInt0+1,x
.3d53	85 2c		sta $2c				sta 	temp1
.3d55	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3d57	85 2d		sta $2d				sta 	temp1+1
.3d59					CopyStringTop:
.3d59	b5 98		lda $98,x			lda 	esInt0,x
.3d5b	85 2a		sta $2a				sta 	temp0
.3d5d	b5 a0		lda $a0,x			lda 	esInt1,x
.3d5f	85 2b		sta $2b				sta 	temp0+1
.3d61	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3d62					StringConcat:
.3d62	aa		tax				tax									; stack pos in X
.3d63	98		tya				tya
.3d64	48		pha				pha
.3d65	20 51 3d	jsr $3d51			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3d68	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3d69	a0 00		ldy #$00			ldy 	#0
.3d6b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d6d	71 2c		adc ($2c),y			adc 	(temp1),y
.3d6f	b0 1c		bcs $3d8d			bcs 	_SCError 					; just too many characters here.
.3d71	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3d73	b0 18		bcs $3d8d			bcs 	_SCError
.3d75	20 b1 3d	jsr $3db1			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d78	20 a8 3d	jsr $3da8			jsr 	CopySoftToStack 			; copy that to the stack.
.3d7b	20 92 3d	jsr $3d92			jsr 	SCCopyTemp0 				; copy temp0
.3d7e	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3d80	85 2a		sta $2a				sta 	temp0
.3d82	a5 2d		lda $2d				lda 	temp1+1
.3d84	85 2b		sta $2b				sta 	temp0+1
.3d86	20 92 3d	jsr $3d92			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3d89	68		pla				pla
.3d8a	a8		tay				tay
.3d8b	8a		txa				txa 								; and A
.3d8c	60		rts				rts
.3d8d					_SCError:
.3d8d	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3d8f	20 18 15	jsr $1518		jsr	errorHandler
.3d92					SCCopyTemp0:
.3d92	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3d94	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d96	85 2e		sta $2e				sta 	temp2
.3d98					_SCCopyLoop:
.3d98	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3d9a	f0 0b		beq $3da7			beq 	_SCCopyExit
.3d9c	c6 2e		dec $2e				dec 	temp2
.3d9e	c8		iny				iny 								; get next char
.3d9f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3da1	20 d7 3d	jsr $3dd7			jsr 	WriteSoftString 			; write to soft string.
.3da4	4c 98 3d	jmp $3d98			jmp 	_SCCopyLoop
.3da7					_SCCopyExit:
.3da7	60		rts				rts
.3da8					CopySoftToStack:
.3da8	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3daa	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3dac	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3dae	95 a0		sta $a0,x			sta 	esInt1,x
.3db0	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3db1					AllocateSoftString:
.3db1	85 32		sta $32				sta 	tempShort 					; save count
.3db3	98		tya				tya
.3db4	48		pha				pha
.3db5	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3db7	d0 09		bne $3dc2			bne 	_ASSDone
.3db9	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3dbb	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3dbd	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3dbf	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3dc0	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3dc2					_ASSDone:
.3dc2	38		sec				sec 								; allocate downwards enough memory
.3dc3	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3dc5	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3dc7	85 39		sta $39				sta 	softMemAlloc
.3dc9	a5 3a		lda $3a				lda 	softMemAlloc+1
.3dcb	e9 00		sbc #$00			sbc 	#0
.3dcd	85 3a		sta $3a				sta 	softMemAlloc+1
.3dcf	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3dd1	a8		tay				tay
.3dd2	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3dd4	68		pla				pla
.3dd5	a8		tay				tay
.3dd6	60		rts				rts
.3dd7					WriteSoftString:
.3dd7	84 32		sty $32				sty 	tempShort 					; save Y
.3dd9	48		pha				pha 								; save character on stack
.3dda	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3ddc	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3dde	18		clc				clc
.3ddf	69 01		adc #$01			adc 	#1
.3de1	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3de3	a8		tay				tay 								; offset in Y
.3de4	68		pla				pla 								; get char and write.
.3de5	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3de7	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3de9	60		rts				rts
.3dea					StrClone:
.3dea	aa		tax				tax 								; set up stack.
.3deb	98		tya				tya
.3dec	48		pha				pha
.3ded	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3def	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3df1	18		clc				clc
.3df2	69 01		adc #$01			adc 	#1
.3df4	20 b1 3d	jsr $3db1			jsr 	AllocateSoftString 			; allocate soft memory
.3df7	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3df9	95 98		sta $98,x			sta 	esInt0,x
.3dfb	a5 3a		lda $3a				lda 	softMemAlloc+1
.3dfd	95 a0		sta $a0,x			sta 	esInt1,x
.3dff	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3e01	95 a8		sta $a8,x			sta 	esInt2,x
.3e03	95 b0		sta $b0,x			sta 	esInt3,x
.3e05	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3e07	95 90		sta $90,x			sta 	esType,x
.3e09	20 92 3d	jsr $3d92			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3e0c	68		pla				pla
.3e0d	a8		tay				tay
.3e0e	8a		txa				txa
.3e0f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3e10					CaseString:
.3e10	48		pha				pha 								; save A and copy to X
.3e11	aa		tax				tax
.3e12	98		tya				tya
.3e13	48		pha				pha
.3e14	20 59 3d	jsr $3d59			jsr 	CopyStringTop 				; target string -> temp0
.3e17	a0 00		ldy #$00			ldy 	#0
.3e19	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3e1b	18		clc				clc
.3e1c	69 01		adc #$01			adc 	#1 							; one more for length byte
.3e1e	20 b1 3d	jsr $3db1			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3e21	20 a8 3d	jsr $3da8			jsr 	CopySoftToStack 			; copy that to the stack.
.3e24	a0 00		ldy #$00			ldy 	#0
.3e26	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3e28	aa		tax				tax
.3e29					_CSCopy:
.3e29	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3e2b	f0 24		beq $3e51			beq 	_CSExit
.3e2d	ca		dex				dex
.3e2e	c8		iny				iny
.3e2f	68		pla				pla 								; check direction
.3e30	48		pha				pha
.3e31	f0 0c		beq $3e3f			beq 	_CSUpper
.3e33	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3e35	c9 41		cmp #$41			cmp 	#"A"
.3e37	90 12		bcc $3e4b			bcc 	_CSWrite
.3e39	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3e3b	b0 0e		bcs $3e4b			bcs 	_CSWrite
.3e3d	90 0a		bcc $3e49			bcc 	_CSFlipWrite
.3e3f					_CSUpper:
.3e3f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3e41	c9 61		cmp #$61			cmp 	#"a"
.3e43	90 06		bcc $3e4b			bcc 	_CSWrite
.3e45	c9 7b		cmp #$7b			cmp 	#"z"+1
.3e47	b0 02		bcs $3e4b			bcs 	_CSWrite
.3e49					_CSFlipWrite:
.3e49	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3e4b					_CSWrite:
.3e4b	20 d7 3d	jsr $3dd7			jsr 	WriteSoftString 			; add to soft string.
.3e4e	4c 29 3e	jmp $3e29			jmp 	_CSCopy
.3e51					_CSExit:
.3e51	68		pla				pla
.3e52	a8		tay				tay
.3e53	68		pla				pla
.3e54	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3e55					StringSubstring:
.3e55	48		pha				pha
.3e56	aa		tax				tax 								; access stack.
.3e57	98		tya				tya
.3e58	48		pha				pha
.3e59	20 59 3d	jsr $3d59			jsr 	CopyStringTop 				; point temp0 to the string.
.3e5c	a0 00		ldy #$00			ldy 	#0 							; get length.
.3e5e	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3e60	85 2c		sta $2c				sta 	temp1
.3e62	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3e64	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3e66	f0 02		beq $3e6a			beq 	_SSBOkay
.3e68	b0 2a		bcs $3e94			bcs 	_SSBReturnNull
.3e6a					_SSBOkay:
.3e6a	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3e6c	18		clc				clc
.3e6d	69 01		adc #$01			adc 	#1
.3e6f	38		sec				sec
.3e70	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3e72	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3e74	90 02		bcc $3e78			bcc		_SSBTrunc
.3e76	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3e78					_SSBTrunc:
.3e78	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3e7a	18		clc				clc
.3e7b	69 01		adc #$01			adc 	#1 							; add 1
.3e7d	20 b1 3d	jsr $3db1			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3e80	20 a8 3d	jsr $3da8			jsr 	CopySoftToStack 			; copy that to the stack.
.3e83	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3e85					_SSBCopyLoop:
.3e85	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3e87	f0 0e		beq $3e97			beq 	_SSBExit
.3e89	c6 2d		dec $2d				dec 	temp1+1
.3e8b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3e8d	20 d7 3d	jsr $3dd7			jsr 	WriteSoftString
.3e90	c8		iny				iny
.3e91	4c 85 3e	jmp $3e85			jmp 	_SSBCopyLoop
.3e94					_SSBReturnNull:
.3e94	20 9b 3e	jsr $3e9b			jsr 	ReturnNull
.3e97					_SSBExit:
.3e97	68		pla				pla
.3e98	a8		tay				tay
.3e99	68		pla				pla
.3e9a	60		rts				rts
.3e9b					ReturnNull:
.3e9b	a9 00		lda #$00			lda 	#0 							; clear null string
.3e9d	8d ce 0a	sta $0ace			sta 	NullString
.3ea0	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3ea2	95 98		sta $98,x			sta 	esInt0,x
.3ea4	a9 0a		lda #$0a			lda 	#NullString >> 8
.3ea6	95 a0		sta $a0,x			sta 	esInt1,x
.3ea8	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d11					srcStrLen:
>0d11							.fill 	1
.3ea9					StringWrite:
.3ea9	aa		tax				tax
.3eaa	48		pha				pha
.3eab	98		tya				tya
.3eac	48		pha				pha
.3ead	20 d4 3e	jsr $3ed4			jsr 	CheckOverwriteCurrent
.3eb0	b0 0d		bcs $3ebf			bcs		_SWCopyCurrent
.3eb2	20 12 3f	jsr $3f12			jsr 	RequiresConcretion
.3eb5	90 0e		bcc $3ec5			bcc 	_SWWriteReference
.3eb7	20 75 3f	jsr $3f75			jsr 	CheckSpecialConcretion
.3eba	b0 09		bcs $3ec5			bcs 	_SWWriteReference
.3ebc	20 26 3f	jsr $3f26			jsr 	AllocateHardMemory
.3ebf					_SWCopyCurrent:
.3ebf	20 59 3f	jsr $3f59			jsr 	CopyStringToHardMemory
.3ec2	4c d0 3e	jmp $3ed0			jmp 	_SWExit
.3ec5					_SWWriteReference
.3ec5	a0 00		ldy #$00			ldy 	#0
.3ec7	a5 2a		lda $2a				lda 	temp0
.3ec9	91 2c		sta ($2c),y			sta 	(temp1),y
.3ecb	c8		iny				iny
.3ecc	a5 2b		lda $2b				lda 	temp0+1
.3ece	91 2c		sta ($2c),y			sta 	(temp1),y
.3ed0					_SWExit:
.3ed0	68		pla				pla
.3ed1	a8		tay				tay
.3ed2	68		pla				pla
.3ed3	60		rts				rts
.3ed4					CheckOverwriteCurrent:
.3ed4	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3ed6	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3ed8	85 2b		sta $2b				sta 	temp0+1
.3eda	b5 99		lda $99,x			lda 	esInt0+1,x
.3edc	85 2a		sta $2a				sta 	temp0
.3ede	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3ee0	8d 11 0d	sta $0d11			sta 	srcStrLen
.3ee3	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3ee5	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3ee7	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3ee9	85 2d		sta $2d				sta 	temp1+1
.3eeb	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3eed	b1 2c		lda ($2c),y			lda 	(temp1),y
.3eef	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3ef1	90 1b		bcc $3f0e			bcc 	_COCFail 				; in hard memory.
.3ef3	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3ef5	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3ef7	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3ef9	85 2e		sta $2e				sta 	temp2
.3efb	c8		iny				iny
.3efc	b1 2c		lda ($2c),y			lda 	(temp1),y
.3efe	e9 00		sbc #$00			sbc 	#0
.3f00	85 2f		sta $2f				sta 	temp2+1
.3f02	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3f04	b1 2e		lda ($2e),y			lda 	(temp2),y
.3f06	38		sec				sec  							; maximum character capacity.
.3f07	e9 02		sbc #$02			sbc 	#2
.3f09	cd 11 0d	cmp $0d11			cmp 	srcStrLen 				; if >= the required length
.3f0c	b0 02		bcs $3f10			bcs 	_COCCanReuse
.3f0e					_COCFail:
.3f0e	18		clc				clc
.3f0f	60		rts				rts
.3f10					_COCCanReuse:
.3f10	38		sec				sec
.3f11	60		rts				rts
.3f12					RequiresConcretion:
.3f12	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3f14	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3f16	b0 0a		bcs $3f22			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3f18	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3f1a	f0 08		beq $3f24			beq 	_RCFail 				; if not, this cannot be soft memory.
.3f1c	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3f1e	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3f20	90 02		bcc $3f24			bcc 	_RCFail 				; so concreting
.3f22					_RCSucceed:
.3f22	38		sec				sec
.3f23	60		rts				rts
.3f24					_RCFail:
.3f24	18		clc				clc
.3f25	60		rts				rts
.3f26					AllocateHardMemory:
.3f26	98		tya				tya
.3f27	48		pha				pha
.3f28	ad 11 0d	lda $0d11			lda 	srcStrLen 				; characters in string
.3f2b	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3f2d	b0 04		bcs $3f33			bcs 	_AHMSetMax 				; max out that amount.
.3f2f	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3f31	90 02		bcc $3f35			bcc 	_AHMIsOkay
.3f33					_AHMSetMax:
.3f33	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3f35					_AHMIsOkay:
.3f35	48		pha				pha	 							; save size to be allocated
.3f36	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3f38	38		sec				sec  							; and copy result to TOS as target address.
.3f39	65 33		adc $33				adc 	highMemory
.3f3b	85 33		sta $33				sta 	highMemory
.3f3d	a5 34		lda $34				lda 	highMemory+1
.3f3f	69 ff		adc #$ff			adc 	#$FF
.3f41	85 34		sta $34				sta 	highMemory+1
.3f43	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3f45	68		pla				pla 							; get the total size of the storage block
.3f46	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3f48	18		clc				clc
.3f49	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3f4b	69 01		adc #$01			adc 	#1
.3f4d	91 2c		sta ($2c),y			sta 	(temp1),y
.3f4f	a5 34		lda $34				lda 	highMemory+1
.3f51	69 00		adc #$00			adc 	#0
.3f53	c8		iny				iny
.3f54	91 2c		sta ($2c),y			sta 	(temp1),y
.3f56	68		pla				pla
.3f57	a8		tay				tay
.3f58	60		rts				rts
.3f59					CopyStringToHardMemory:
.3f59	98		tya				tya
.3f5a	48		pha				pha
.3f5b	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3f5d	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f5f	85 2e		sta $2e				sta 	temp2
.3f61	c8		iny				iny
.3f62	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f64	85 2f		sta $2f				sta 	temp2+1
.3f66	ac 11 0d	ldy $0d11			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3f69					_CSTHMLoop:
.3f69	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f6b	91 2e		sta ($2e),y			sta 	(temp2),y
.3f6d	88		dey				dey
.3f6e	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3f70	d0 f7		bne $3f69			bne 	_CSTHMLoop
.3f72	68		pla				pla
.3f73	a8		tay				tay
.3f74	60		rts				rts
.3f75					CheckSpecialConcretion:
.3f75	ad 11 0d	lda $0d11			lda 	srcStrLen 				; check string is null e.g. length = 0
.3f78	f0 02		beq $3f7c			beq 	_CSCNullString
.3f7a	18		clc				clc
.3f7b	60		rts				rts
.3f7c					_CSCNullString:
.3f7c	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3f7e	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3f81	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3f83	85 2a		sta $2a				sta 	temp0
.3f85	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3f87	85 2b		sta $2b				sta 	1+(temp0)
.3f89	38		sec				sec
.3f8a	60		rts				rts

;******  Return to file: string/string.asm

.3f8b					stringHandler:
.3f8b	7c 8e 3f	jmp ($3f8e,x)			jmp 	(stringVectors,x)
.3f8e					stringVectors:
>3f8e	a0 3f					.word _DummyControlHandler ; index 0
>3f90	ee 3c					.word StringChrs           ; index 2
>3f92	ea 3d					.word StrClone             ; index 4
>3f94	62 3d					.word StringConcat         ; index 6
>3f96	fd 3c					.word StringNull           ; index 8
>3f98	19 3d					.word STRCompare           ; index 10
>3f9a	10 3e					.word CaseString           ; index 12
>3f9c	55 3e					.word StringSubstring      ; index 14
>3f9e	a9 3e					.word StringWrite          ; index 16
.3fa0					_DummyControlHandler:
.3fa0	60		rts			rts

;******  Return to file: basic.asm

.3fa1					section_end_string:
.3fa1					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d12					deTokeniseVector:
>0d12							.fill 	2
.0d14					lastCharacterClass:
>0d14							.fill 	1
.0d15					indent:
>0d15							.fill 	1
.3fa1					ListLine:
.3fa1	48		pha				pha								; enter here to list to console. sets the output vector
.3fa2	a9 d9		lda #$d9			lda 	#(deTokenPrint) & $FF
.3fa4	8d 12 0d	sta $0d12			sta 	deTokeniseVector
.3fa7	a9 40		lda #$40			lda 	#(deTokenPrint) >> 8
.3fa9	8d 13 0d	sta $0d13			sta 	1+(deTokeniseVector)
.3fac	68		pla				pla
.3fad					Detokenise:
.3fad	18		clc				clc 							; space required for line number.
.3fae	69 06		adc #$06			adc 	#6
.3fb0	8d 15 0d	sta $0d15			sta 	indent
.3fb3	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3fb5	8d 14 0d	sta $0d14			sta 	lastCharacterClass
.3fb8	a2 02		ldx #$02			ldx 	#2
.3fba	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3fbc	95 a8		sta $a8,x			sta 	esInt2,x
.3fbe	95 b0		sta $b0,x			sta 	esInt3,x
.3fc0	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3fc2	b1 28		lda ($28),y			lda 	(codePtr),y
.3fc4	95 98		sta $98,x			sta 	esInt0,x
.3fc6	c8		iny				iny
.3fc7	b1 28		lda ($28),y			lda 	(codePtr),y
.3fc9	95 a0		sta $a0,x			sta 	esInt1,x
.3fcb	a9 84		lda #$84			lda 	#LTYLineNumber
.3fcd	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.3fd0	a9 0a		lda #$0a			lda 	#10 					; base 10
.3fd2	20 78 40	jsr $4078			jsr 	DTPrintInteger 			; print as integer.
.3fd5	a0 00		ldy #$00			ldy 	#0 						; get length
.3fd7	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3fd9	aa		tax				tax
.3fda					_DTPadOut:
.3fda	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3fdc	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.3fdf	e8		inx				inx
.3fe0	ec 15 0d	cpx $0d15			cpx 	indent
.3fe3	d0 f5		bne $3fda			bne 	_DTPadOut
.3fe5	a0 03		ldy #$03			ldy 	#3 						; start position.
.3fe7					_DTListLoop:
.3fe7	b1 28		lda ($28),y			lda 	(codePtr),y
.3fe9	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3feb	f0 5e		beq $404b			beq 	_DTIsString
.3fed	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3fef	f0 56		beq $4047			beq 	_DTIsFloat
.3ff1	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3ff3	f0 16		beq $400b			beq 	_DTHexConstant
.3ff5	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3ff7	d0 06		bne $3fff			bne 	_DTNotEnd
.3ff9	a9 ff		lda #$ff			lda 	#255 					; print CR
.3ffb	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.3ffe	60		rts				rts
.3fff					_DTNotEnd:
.3fff	c9 00		cmp #$00			cmp 	#0
.4001	30 38		bmi $403b			bmi 	_DTIsToken
.4003	c9 40		cmp #$40			cmp 	#$40
.4005	90 3a		bcc $4041			bcc 	_DTIsIdentifier
.4007	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.4009	d0 0d		bne $4018			bne 	_DTConstant
.400b					_DTHexConstant:
.400b	a9 26		lda #$26			lda 	#"&"
.400d	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.4010	c8		iny				iny
.4011	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.4013	20 f5 40	jsr $40f5			jsr 	DTSwitchMode
.4016	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.4018					_DTConstant:
.4018	48		pha				pha
.4019	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.401b	20 f5 40	jsr $40f5			jsr 	DTSwitchMode
.401e	a9 86		lda #$86			lda 	#LTYConstant
.4020	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.4023	a2 02		ldx #$02			ldx 	#2 						; get its value
.4025	8a		txa				txa
.4026	a2 10		ldx #$10		ldx	#16
.4028	20 ce 3c	jsr $3cce		jsr	mainHandler
.402b	aa		tax				tax
.402c	68		pla				pla 							; get base back
.402d	85 32		sta $32				sta 	tempShort
.402f	98		tya				tya
.4030	48		pha				pha
.4031	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.4033	20 78 40	jsr $4078			jsr 	DTPrintInteger
.4036	68		pla				pla
.4037	a8		tay				tay
.4038	4c e7 3f	jmp $3fe7			jmp 	_DTListLoop
.403b					_DTIsToken:
.403b	20 4e 41	jsr $414e			jsr 	DTDecodeToken
.403e	4c e7 3f	jmp $3fe7			jmp 	_DTListLoop
.4041					_DTIsIdentifier:
.4041	20 07 41	jsr $4107			jsr 	DTIdentifier
.4044	4c e7 3f	jmp $3fe7			jmp 	_DTListLoop
.4047					_DTIsFloat:
>4047	db						.byte 	$DB
.4048	4c 47 40	jmp $4047			jmp 	_DTIsFloat
.404b					_DTIsString:
.404b	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.404d	20 f5 40	jsr $40f5			jsr 	DTSwitchMode
.4050	a9 81		lda #$81			lda 	#LTYString
.4052	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.4055	a9 22		lda #$22			lda 	#'"'						; open quote
.4057	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.405a	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.405c	8a		txa				txa
.405d	a2 10		ldx #$10		ldx	#16
.405f	20 ce 3c	jsr $3cce		jsr	mainHandler
.4062	aa		tax				tax
.4063	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.4065	85 2a		sta $2a				sta 	temp0
.4067	b5 a0		lda $a0,x			lda 	esInt1,x
.4069	85 2b		sta $2b				sta 	temp0+1
.406b	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.406d	20 8a 40	jsr $408a			jsr 	DTPrintLengthPrefix
.4070	a9 22		lda #$22			lda 	#'"'
.4072	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.4075	4c e7 3f	jmp $3fe7			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d16					tPrintCount:
>0d16							.fill 	1
.4078					DTPrintInteger:
.4078	48		pha				pha									; save base
.4079	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.407b	85 2a		sta $2a				sta 	temp0
.407d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.407f	85 2b		sta $2b				sta 	1+(temp0)
.4081	68		pla				pla
.4082	a8		tay				tay
.4083	8a		txa				txa
.4084	a2 12		ldx #$12		ldx	#18
.4086	20 ce 3c	jsr $3cce		jsr	mainHandler
.4089	aa		tax				tax 								; then drop through here.
.408a					DTPrintLengthPrefix:
.408a	aa		tax				tax 								; A = 0 = don't case convert.
.408b	98		tya				tya
.408c	48		pha				pha
.408d	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.408f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4091	8d 16 0d	sta $0d16			sta 	tPrintCount
.4094	f0 1b		beq $40b1			beq 	_DTPLPExit 					; empty string
.4096					_DTPLPLoop:
.4096	c8		iny				iny 								; get next.
.4097	b1 2a		lda ($2a),y			lda 	(temp0),y
.4099	29 7f		and #$7f			and 	#$7F
.409b	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.409d	f0 0a		beq $40a9			beq 	_DTPLPNoCase
.409f	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.40a1	90 06		bcc $40a9			bcc 	_DTPLPNoCase
.40a3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40a5	b0 02		bcs $40a9			bcs 	_DTPLPNoCase
.40a7	49 20		eor #$20			eor 	#"A"^"a"
.40a9					_DTPLPNoCase
.40a9	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter 		; call handler
.40ac	ce 16 0d	dec $0d16			dec 	tPrintCount 				; do all the characters
.40af	d0 e5		bne $4096			bne 	_DTPLPLoop
.40b1					_DTPLPExit:
.40b1	68		pla				pla
.40b2	a8		tay				tay
.40b3	60		rts				rts
.40b4					ListOutputCharacter:
.40b4	85 32		sta $32				sta 	tempShort
.40b6	48		pha				pha
.40b7	8a		txa				txa
.40b8	48		pha				pha
.40b9	98		tya				tya
.40ba	48		pha				pha
.40bb	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.40bd	c9 20		cmp #$20			cmp 	#32
.40bf	b0 0c		bcs $40cd			bcs		_LOCHiBit
.40c1	09 40		ora #$40			ora 	#64 						; conversion
.40c3	c9 40		cmp #$40			cmp 	#64							; make l/c
.40c5	f0 06		beq $40cd			beq 	_LOCHiBit
.40c7	c9 5b		cmp #$5b			cmp 	#65+26
.40c9	b0 02		bcs $40cd			bcs 	_LOCHiBit
.40cb	69 20		adc #$20			adc 	#32
.40cd					_LOCHiBit:
.40cd	20 d6 40	jsr $40d6			jsr 	_LOCCallVector				; call o/p handler routine
.40d0	68		pla				pla
.40d1	a8		tay				tay
.40d2	68		pla				pla
.40d3	aa		tax				tax
.40d4	68		pla				pla
.40d5					_LOCExit:
.40d5	60		rts				rts
.40d6					_LOCCallVector:
.40d6	6c 12 0d	jmp ($0d12)			jmp 	(deTokeniseVector)
.40d9					deTokenPrint:
.40d9	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.40db	30 06		bmi $40e3			bmi 	_dtpInk
.40dd	a2 16		ldx #$16		ldx	#22
.40df	20 f6 14	jsr $14f6		jsr	deviceHandler
.40e2	60		rts				rts
.40e3	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.40e5	f0 08		beq $40ef			beq 	_dtpCR						; except $FF => CRLF
.40e7	29 07		and #$07			and 	#7
.40e9	a2 08		ldx #$08		ldx	#8
.40eb	20 f6 14	jsr $14f6		jsr	deviceHandler
.40ee	60		rts				rts
.40ef					_dtpCR:
.40ef	a2 06		ldx #$06		ldx	#6
.40f1	20 f6 14	jsr $14f6		jsr	deviceHandler
.40f4	60		rts				rts
.40f5					DTSwitchMode:
.40f5	cd 14 0d	cmp $0d14			cmp 	LastCharacterClass 			; if changed, update character class
.40f8	f0 04		beq $40fe			beq 	_DTSMNoChange
.40fa	8d 14 0d	sta $0d14			sta 	LastCharacterClass
.40fd					_DTSMExit:
.40fd	60		rts				rts
.40fe					_DTSMNoChange:
.40fe	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.4100	f0 fb		beq $40fd			beq 	_DTSMExit 					; need a space.
.4102	a9 20		lda #$20			lda 	#" "
.4104	4c b4 40	jmp $40b4			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4107					DTIdentifier:
.4107	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4109	20 f5 40	jsr $40f5			jsr 	DTSwitchMode
.410c	a9 87		lda #$87			lda 	#LTYIdentifier
.410e	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.4111					_DTILoop:
.4111	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.4113	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4115	d0 02		bne $4119			bne 	_DTINotUS
.4117	a9 5f		lda #$5f			lda 	#"_"
.4119					_DTINotUS:
.4119	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.411c	c8		iny				iny
.411d	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.411f	c9 3a		cmp #$3a			cmp 	#$3A
.4121	90 ee		bcc $4111			bcc 	_DTILoop
.4123	c8		iny				iny
.4124	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4126	f0 25		beq $414d			beq 	_DTIExit 					; no postfix.
.4128	48		pha				pha
.4129	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.412b	8d 14 0d	sta $0d14			sta 	LastCharacterClass
.412e	a9 82		lda #$82			lda 	#LTYPunctuation
.4130	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.4133	68		pla				pla
.4134	c9 3b		cmp #$3b			cmp 	#$3B
.4136	f0 10		beq $4148			beq 	_DTIArray
.4138	4a		lsr a				lsr 	a 							; array flag in C
.4139	08		php				php
.413a	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.413c	f0 02		beq $4140			beq 	_DTIDollar
.413e	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.4140					_DTIDollar:
.4140	49 24		eor #$24			eor 	#"$"
.4142	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.4145	28		plp				plp
.4146	90 05		bcc $414d			bcc 	_DTIExit
.4148					_DTIArray:
.4148	a9 28		lda #$28			lda 	#"("
.414a	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.414d					_DTIExit:
.414d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.414e					DTDecodeToken:
.414e	a2 00		ldx #$00			ldx 	#0 							; table number to use
.4150	b1 28		lda ($28),y			lda 	(codePtr),y
.4152	c9 84		cmp #$84			cmp 	#$84
.4154	b0 05		bcs $415b			bcs 	_DTNotShift
.4156	29 03		and #$03			and 	#3 							; get the shift 1..3
.4158	0a		asl a				asl 	a 							; put 2 x in X
.4159	aa		tax				tax
.415a	c8		iny				iny
.415b					_DTNotShift:
.415b	bd 5d 44	lda $445d,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.415e	85 2a		sta $2a				sta 	temp0 						; point into temp0
.4160	bd 5e 44	lda $445e,x			lda 	TokenTableAddress+1,x
.4163	85 2b		sta $2b				sta 	temp0+1
.4165	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.4167	c8		iny				iny 								; consume it.
.4168	aa		tax				tax
.4169	98		tya				tya
.416a	48		pha				pha
.416b					_DTFindText:
.416b	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.416d	f0 11		beq $4180			beq 	_DTFoundText
.416f	ca		dex				dex
.4170	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.4172	38		sec				sec
.4173	b1 2a		lda ($2a),y			lda 	(temp0),y
.4175	65 2a		adc $2a				adc 	temp0
.4177	85 2a		sta $2a				sta 	temp0
.4179	90 f0		bcc $416b			bcc 	_DTFindText
.417b	e6 2b		inc $2b				inc 	temp0+1
.417d	4c 6b 41	jmp $416b			jmp 	_DTFindText
.4180					_DTFoundText:
.4180	a0 01		ldy #$01			ldy 	#1 							; get first character
.4182	b1 2a		lda ($2a),y			lda 	(temp0),y
.4184	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4186	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4188	90 11		bcc $419b			bcc 	_DTIsPunctuation
.418a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.418c	b0 0d		bcs $419b			bcs 	_DTIsPunctuation
.418e	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4190	20 f5 40	jsr $40f5			jsr 	DTSwitchMode
.4193	a9 83		lda #$83			lda 	#LTYKeyword
.4195	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.4198	4c a5 41	jmp $41a5			jmp 	_DTPrint
.419b					_DTIsPunctuation:
.419b	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.419d	20 f5 40	jsr $40f5			jsr 	DTSwitchMode
.41a0	a9 82		lda #$82			lda 	#LTYPunctuation
.41a2	20 b4 40	jsr $40b4			jsr 	ListOutputCharacter
.41a5					_DTPrint:
.41a5	a9 01		lda #$01			lda 	#1 							; fix case.
.41a7	20 8a 40	jsr $408a			jsr 	DTPrintLengthPrefix 		; print it out.
.41aa	a0 00		ldy #$00			ldy 	#0
.41ac	b1 2a		lda ($2a),y			lda 	(temp0),y
.41ae	a8		tay				tay
.41af	b1 2a		lda ($2a),y			lda 	(temp0),y
.41b1	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.41b3	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.41b5	90 04		bcc $41bb			bcc 	_DTIsNowPunctuation
.41b7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.41b9	90 05		bcc $41c0			bcc 	_DTPExit
.41bb					_DTIsNowPunctuation:
.41bb	a9 01		lda #$01			lda 	#1
.41bd	8d 14 0d	sta $0d14			sta		LastCharacterClass
.41c0					_DTPExit:
.41c0	68		pla				pla
.41c1	a8		tay				tay
.41c2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d17					currentSet:
>0d17							.fill 	1
.41c3					TokenSearch:
.41c3	8a		txa				txa
.41c4	48		pha				pha
.41c5	98		tya				tya
.41c6	48		pha				pha
.41c7	a9 00		lda #$00			lda 	#0
.41c9	8d 17 0d	sta $0d17			sta 	currentSet
.41cc					_TSLoop:
.41cc	ad 17 0d	lda $0d17			lda 	currentSet 					; 2 x currentset in X
.41cf	0a		asl a				asl 	a
.41d0	aa		tax				tax
.41d1	bd 5d 44	lda $445d,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.41d4	85 2a		sta $2a				sta 	temp0
.41d6	bd 5e 44	lda $445e,x			lda 	TokenTableAddress+1,x
.41d9	85 2b		sta $2b				sta 	temp0+1
.41db	20 02 42	jsr $4202			jsr 	TokenSearchOne 				; search one table
.41de	b0 0d		bcs $41ed			bcs 	_TSFound 					; found a token.
.41e0	ee 17 0d	inc $0d17			inc 	currentSet 					; next set
.41e3	ad 17 0d	lda $0d17			lda 	currentSet
.41e6	c9 04		cmp #$04			cmp 	#4
.41e8	d0 e2		bne $41cc			bne 	_TSLoop 					; back if not done all four.
.41ea	18		clc				clc 								; clear carry and exit
.41eb	90 10		bcc $41fd			bcc 	_TSExit
.41ed					_TSFound:
.41ed	48		pha				pha 								; save token
.41ee	ad 17 0d	lda $0d17			lda 	currentSet					; if set zero no shift
.41f1	f0 05		beq $41f8			beq 	_TSNoShift
.41f3	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.41f5	20 b3 42	jsr $42b3			jsr 	TokenWrite
.41f8					_TSNoShift:
.41f8	68		pla				pla 								; get token back
.41f9	20 b3 42	jsr $42b3			jsr 	TokenWrite 					; write it
.41fc	38		sec				sec 								; carry set indicating success
.41fd					_TSExit:
.41fd	68		pla				pla
.41fe	a8		tay				tay
.41ff	68		pla				pla
.4200	aa		tax				tax
.4201	60		rts				rts
.4202					TokenSearchOne:
.4202	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.4204					_TSOLoop:
.4204	a0 00		ldy #$00			ldy 	#0
.4206	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4208	f0 26		beq $4230			beq 	_TSOFail 					; if zero, end of table
.420a	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.420d	f0 11		beq $4220			beq 	_TSOCheckText
.420f					_TSONext:
.420f	e8		inx				inx 								; bump token
.4210	a0 00		ldy #$00			ldy 	#0							; get length
.4212	b1 2a		lda ($2a),y			lda 	(temp0),y
.4214	38		sec				sec
.4215	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4217	85 2a		sta $2a				sta 	temp0
.4219	90 e9		bcc $4204			bcc 	_TSOLoop
.421b	e6 2b		inc $2b				inc 	temp0+1
.421d	4c 04 42	jmp $4204			jmp 	_TSOLoop
.4220					_TSOCheckText:
.4220	a8		tay				tay 								; compare length downto 1.
.4221					_TSOCheckLoop:
.4221	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.4223	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4226	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4228	d0 e5		bne $420f			bne 	_TSONext 					; different goto next.
.422a	88		dey				dey 								; do all
.422b	d0 f4		bne $4221			bne 	_TSOCheckLoop
.422d	8a		txa				txa 								; return token in A and carry set
.422e	38		sec				sec
.422f	60		rts				rts
.4230					_TSOFail:
.4230	18		clc				clc
.4231	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.4232					TokTest:
.4232	a2 ff		ldx #$ff				ldx 	#$FF
.4234	9a		txs					txs
.4235	a9 52		lda #$52			lda 	#(TokenText1) & $FF
.4237	85 28		sta $28				sta 	codePtr
.4239	a9 42		lda #$42			lda 	#(TokenText1) >> 8
.423b	85 29		sta $29				sta 	1+(codePtr)
.423d	20 52 42	jsr $4252				jsr 	Tokenise
.4240	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.4242	bd 52 42	lda $4252,x	_TokCheck:	lda 	TokenBytes1,x
.4245	dd 1b 0d	cmp $0d1b,x				cmp 	tokenBuffer,x
.4248	d0 fe		bne $4248	_TokFail:	bne 	_TokFail	 		; error.
.424a	e8		inx					inx
.424b	c9 80		cmp #$80				cmp 	#$80
.424d	d0 f3		bne $4242				bne 	_TokCheck
.424f	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.4252					TokenText1:
.4252					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d18					tokenHeader:
>0d18							.fill 	3
.0d1b					tokenBuffer:
>0d1b							.fill 	256
.0e1b					tokenBufferIndex:
>0e1b							.fill 	1
.4252					Tokenise:
.4252	20 cc 42	jsr $42cc			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.4255					TokeniseASCIIZ:
.4255	20 dd 42	jsr $42dd			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4258	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.425a	8d 1b 0e	sta $0e1b			sta 	tokenBufferIndex
.425d	a8		tay				tay 								; start pointer
.425e	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.4260	8d 1b 0d	sta $0d1b			sta 	tokenBuffer
.4263					_TokLoop:
.4263	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4265	f0 46		beq $42ad			beq 	_TokExit 					; if zero, then exit.
.4267	c8		iny				iny 								; skip over spaces.
.4268	c9 20		cmp #$20			cmp 	#" "
.426a	f0 f7		beq $4263			beq 	_TokLoop
.426c	88		dey				dey 								; point back to character.
.426d	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.426f	f0 18		beq $4289			beq 	_TokHexConst
.4271	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.4273	f0 23		beq $4298			beq 	_TokQString
.4275	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.4277	b0 26		bcs $429f			bcs 	_TokPunctuation
.4279	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.427b	b0 29		bcs $42a6			bcs 	_TokIdentifier
.427d	c9 3a		cmp #$3a			cmp 	#"9"+1
.427f	b0 1e		bcs $429f			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.4281	c9 30		cmp #$30			cmp 	#"0"
.4283	90 1a		bcc $429f			bcc 	_TokPunctuation 			; < 0, punctuation.
.4285	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.4287	d0 08		bne $4291			bne 	_TokConst
.4289					_TokHexConst:
.4289	c8		iny				iny									; consume token.
.428a	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.428c	20 b3 42	jsr $42b3			jsr 	TokenWrite
.428f	a9 10		lda #$10			lda 	#16
.4291					_TokConst:
.4291	20 9b 43	jsr $439b			jsr 	TokeniseInteger
.4294	b0 cd		bcs $4263			bcs 	_TokLoop
.4296	90 18		bcc $42b0			bcc 	_TokFail
.4298					_TokQString:
.4298	20 31 44	jsr $4431			jsr 	TokeniseString
.429b	b0 c6		bcs $4263			bcs 	_TokLoop
.429d	90 11		bcc $42b0			bcc 	_TokFail
.429f					_TokPunctuation:
.429f	20 10 44	jsr $4410			jsr 	TokenisePunctuation
.42a2	b0 bf		bcs $4263			bcs 	_TokLoop
.42a4	90 0a		bcc $42b0			bcc 	_TokFail
.42a6					_TokIdentifier:
.42a6	20 0c 43	jsr $430c			jsr 	TokeniseIdentifier
.42a9	b0 b8		bcs $4263			bcs 	_TokLoop
.42ab	90 03		bcc $42b0			bcc 	_TokFail
.42ad					_TokExit:
.42ad	a9 01		lda #$01			lda 	#1
.42af	60		rts				rts
.42b0					_TokFail:
.42b0	a9 00		lda #$00			lda 	#0
.42b2	60		rts				rts
.42b3					TokenWrite:
.42b3	85 32		sta $32				sta 	tempShort 					; save XA
.42b5	48		pha				pha
.42b6	8a		txa				txa
.42b7	48		pha				pha
.42b8	a5 32		lda $32				lda 	tempShort
.42ba	ae 1b 0e	ldx $0e1b			ldx 	tokenBufferIndex 			; geet index
.42bd	9d 1b 0d	sta $0d1b,x			sta 	tokenBuffer,x 				; write byte to buffer
.42c0	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.42c2	9d 1c 0d	sta $0d1c,x			sta 	tokenBuffer+1,x
.42c5	ee 1b 0e	inc $0e1b			inc 	tokenBufferIndex 			; bump index
.42c8	68		pla				pla
.42c9	aa		tax				tax
.42ca	68		pla				pla
.42cb	60		rts				rts
.42cc					TokeniseMakeASCIIZ:
.42cc	a0 00		ldy #$00			ldy 	#0							; get length of string.
.42ce	b1 28		lda ($28),y			lda 	(codePtr),y
.42d0	a8		tay				tay
.42d1	c8		iny				iny 								; +1, the NULL goes here.
.42d2	a9 00		lda #$00			lda 	#0
.42d4	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.42d6	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.42d8	d0 02		bne $42dc			bne 	_TMKAExit
.42da	e6 29		inc $29				inc 	codePtr+1
.42dc					_TMKAExit:
.42dc	60		rts				rts
.42dd					TokeniseFixCase:
.42dd	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.42df	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.42e1					_TFCFlipQ:
.42e1	8a		txa				txa
.42e2	49 01		eor #$01			eor 	#1
.42e4	aa		tax				tax
.42e5					_TFCLoop:
.42e5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.42e7	f0 22		beq $430b			beq 	_TFCExit 					; if zero exit.
.42e9	c9 20		cmp #$20			cmp 	#32 						; if control
.42eb	90 1a		bcc $4307			bcc 	_TFCControl
.42ed	c8		iny				iny 								; preconsume
.42ee	c9 22		cmp #$22			cmp 	#'"'
.42f0	f0 ef		beq $42e1			beq 	_TFCFlipQ
.42f2	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.42f4	90 ef		bcc $42e5			bcc 	_TFCLoop
.42f6	c9 7b		cmp #$7b			cmp 	#"z"+1
.42f8	b0 eb		bcs $42e5			bcs 	_TFCLoop
.42fa	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.42fc	d0 e7		bne $42e5			bne 	_TFCLoop
.42fe	88		dey				dey
.42ff	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4301					_TFCWrite:
.4301	91 28		sta ($28),y			sta 	(codePtr),y
.4303	c8		iny				iny
.4304	4c e5 42	jmp $42e5			jmp 	_TFCLoop
.4307					_TFCControl:
.4307	a9 20		lda #$20			lda 	#" "
.4309	d0 f6		bne $4301			bne 	_TFCWrite
.430b					_TFCExit:
.430b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.430c					TokeniseIdentifier:
.430c	a2 00		ldx #$00			ldx 	#0
.430e					_TICopyID:
.430e	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4310	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.4312	f0 16		beq $432a			beq 	_TICopyUnderscore
.4314	c9 2e		cmp #$2e			cmp 	#"."
.4316	f0 14		beq $432c			beq 	_TICopyIn
.4318	c9 30		cmp #$30			cmp 	#"0"
.431a	90 1b		bcc $4337			bcc 	_TIEndCopy
.431c	c9 3a		cmp #$3a			cmp 	#"9"+1
.431e	90 0c		bcc $432c			bcc 	_TICopyIn
.4320	c9 41		cmp #$41			cmp 	#"A"
.4322	90 13		bcc $4337			bcc 	_TIEndCopy
.4324	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4326	b0 0f		bcs $4337			bcs		_TIEndCopy
.4328	90 02		bcc $432c			bcc 	_TICopyIn
.432a					_TICopyUnderScore:
.432a	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.432c					_TICopyIn:
.432c	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.432d	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4330	8e cf 0a	stx $0acf			stx 	convertBuffer
.4333	c8		iny				iny 								; next character
.4334	4c 0e 43	jmp $430e			jmp 	_TICopyID 					; loop round
.4337					_TIEndCopy:
.4337	a9 24		lda #$24			lda 	#"$"
.4339	20 8e 43	jsr $438e			jsr 	TIDCheckCopy
.433c	a9 23		lda #$23			lda 	#"#"
.433e	20 8e 43	jsr $438e			jsr 	TIDCheckCopy
.4341	a9 28		lda #$28			lda 	#"("
.4343	20 8e 43	jsr $438e			jsr 	TIDCheckCopy
.4346	20 c3 41	jsr $41c3			jsr 	TokenSearch 				; is it a token
.4349	b0 41		bcs $438c			bcs 	_TIExit 					; if so, then exit.
.434b	98		tya				tya
.434c	48		pha				pha
.434d	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.434f	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.4352	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4355	c9 28		cmp #$28			cmp 	#"("
.4357	d0 02		bne $435b			bne 	_TINotArray
.4359	ca		dex				dex 								; yes, remove it and convert to array.
.435a	c8		iny				iny
.435b					_TINotArray:
.435b	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.435e	c9 24		cmp #$24			cmp 	#"$"
.4360	d0 03		bne $4365			bne 	_TINotString
.4362	ca		dex				dex
.4363	c8		iny				iny
.4364	c8		iny				iny
.4365					_TINotString:
.4365	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4368	c9 23		cmp #$23			cmp 	#"#"
.436a	d0 05		bne $4371			bne 	_TINotFloat
.436c	ca		dex				dex
.436d	c8		iny				iny
.436e	c8		iny				iny
.436f	c8		iny				iny
.4370	c8		iny				iny
.4371					_TINotFloat:
.4371	e8		inx				inx 								; write end marker for identifier.
.4372	98		tya				tya
.4373	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4376	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.4379	a2 01		ldx #$01			ldx 	#1
.437b					_TIOutput:
.437b	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.437e	29 3f		and #$3f			and 	#$3F
.4380	48		pha				pha
.4381	20 b3 42	jsr $42b3			jsr 	TokenWrite
.4384	e8		inx				inx
.4385	68		pla				pla
.4386	c9 3a		cmp #$3a			cmp 	#$3A
.4388	90 f1		bcc $437b			bcc 	_TIOutput
.438a	68		pla				pla
.438b	a8		tay				tay
.438c					_TIExit:
.438c	38		sec				sec 								; this can't fail.
.438d	60		rts				rts
.438e					TIDCheckCopy:
.438e	d1 28		cmp ($28),y			cmp 	(codePtr),y
.4390	d0 08		bne $439a			bne 	_TIDCCExit
.4392	e8		inx				inx
.4393	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4396	8e cf 0a	stx $0acf			stx 	convertBuffer
.4399	c8		iny				iny
.439a					_TIDCCExit:
.439a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.439b					TokeniseInteger:
.439b	85 2c		sta $2c				sta 	temp1 						; save base
.439d	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.439f	8e cf 0a	stx $0acf			stx 	convertBuffer
.43a2					_TIGetChars:
.43a2	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.43a4	c9 30		cmp #$30			cmp 	#"0"
.43a6	90 1f		bcc $43c7			bcc 	_TIEndGet
.43a8	c9 3a		cmp #$3a			cmp 	#"9"+1
.43aa	90 10		bcc $43bc			bcc 	_TIHaveChar
.43ac	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.43ae	c9 0a		cmp #$0a			cmp 	#10
.43b0	f0 15		beq $43c7			beq 	_TIEndGet
.43b2	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.43b4	c9 41		cmp #$41			cmp 	#"A"
.43b6	90 0f		bcc $43c7			bcc 	_TIEndGet
.43b8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43ba	b0 0b		bcs $43c7			bcs 	_TIEndGet
.43bc					_TIHaveChar:
.43bc	e8		inx				inx 								; write into buffer.
.43bd	8e cf 0a	stx $0acf			stx 	convertBuffer
.43c0	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.43c3	c8		iny				iny 								; next char
.43c4	4c a2 43	jmp $43a2			jmp 	_TIGetChars
.43c7					_TIEndGet:
.43c7	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.43c9	f0 1c		beq $43e7			beq 	_TIFail
.43cb	98		tya				tya
.43cc	48		pha				pha
.43cd	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.43cf	85 2a		sta $2a				sta 	temp0
.43d1	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.43d3	85 2b		sta $2b				sta 	1+(temp0)
.43d5	a9 00		lda #$00			lda 	#0 							; stack level 0
.43d7	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.43d9	a2 1a		ldx #$1a		ldx	#26
.43db	20 ce 3c	jsr $3cce		jsr	mainHandler
.43de	68		pla				pla
.43df	a8		tay				tay
.43e0	90 05		bcc $43e7			bcc 	_TIFail 					; didn't convert.
.43e2	20 e9 43	jsr $43e9			jsr 	TIRecursiveOut 				; recursive output ?
.43e5	38		sec				sec
.43e6	60		rts				rts
.43e7					_TIFail:
.43e7	18		clc				clc
.43e8	60		rts				rts
.43e9					TIRecursiveOut:
.43e9	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.43eb	29 3f		and #$3f			and 	#$3F
.43ed	09 40		ora #$40			ora 	#$40
.43ef	48		pha				pha
.43f0	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.43f2	29 c0		and #$c0			and 	#$C0
.43f4	05 a0		ora $a0				ora 	esInt1
.43f6	05 a8		ora $a8				ora 	esInt2
.43f8	05 b0		ora $b0				ora 	esInt3
.43fa	f0 10		beq $440c			beq 	_TIRONoRecursion
.43fc	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.43fe					_TIROShift:
.43fe	46 b0		lsr $b0				lsr 	esInt3
.4400	66 a8		ror $a8				ror 	esInt2
.4402	66 a0		ror $a0				ror 	esInt1
.4404	66 98		ror $98				ror 	esInt0
.4406	ca		dex				dex
.4407	d0 f5		bne $43fe			bne 	_TIROShift
.4409	20 e9 43	jsr $43e9			jsr 	TIRecursiveOut 				; call recursively
.440c					_TIRONoRecursion:
.440c	68		pla				pla 								; pull the old bit.
.440d	4c b3 42	jmp $42b3			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4410					TokenisePunctuation:
.4410	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4412	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4415	c8		iny				iny
.4416	b1 28		lda ($28),y			lda 	(codePtr),y
.4418	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.441b	c8		iny				iny 								; Y is +2
.441c	a9 02		lda #$02			lda 	#2 							; 2 character string.
.441e	8d cf 0a	sta $0acf			sta 	convertBuffer
.4421	20 c3 41	jsr $41c3			jsr 	TokenSearch 				; search for that token.
.4424	b0 0a		bcs $4430			bcs 	_TIFound
.4426	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4429	88		dey				dey 								; Y is now +1
.442a	20 c3 41	jsr $41c3			jsr 	TokenSearch 				; search for that token.
.442d	b0 01		bcs $4430			bcs 	_TIFound
.442f	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4430					_TIFound:
.4430	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4431					TokeniseString:
.4431	c8		iny				iny 								; skip opening quote
.4432	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4434	84 2a		sty $2a				sty 	temp0 						; save start.
.4436					_TSGetLength:
.4436	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4438	f0 21		beq $445b			beq 	_TSFail						; end of line, fail
.443a	c8		iny				iny
.443b	e8		inx				inx
.443c	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.443e	d0 f6		bne $4436			bne 	_TSGetLength
.4440	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4442	20 b3 42	jsr $42b3			jsr 	TokenWrite
.4445	8a		txa				txa 								; output length
.4446	20 b3 42	jsr $42b3			jsr 	TokenWrite
.4449	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.444b	e0 00		cpx #$00			cpx 	#0 							; check ended
.444d	f0 09		beq $4458			beq 	_TSExit
.444f					_TSOutput:
.444f	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4451	20 b3 42	jsr $42b3			jsr 	TokenWrite
.4454	c8		iny				iny
.4455	ca		dex				dex
.4456	d0 f7		bne $444f			bne 	_TSOutput
.4458					_TSExit:
.4458	c8		iny				iny 								; skip ending quote
.4459	38		sec				sec 								; return CS.
.445a	60		rts				rts
.445b					_TSFail:
.445b	18		clc				clc
.445c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.445d					TokenTableAddress:
>445d	65 44						.word 	Group0Text
>445f	33 46						.word 	Group1Text
>4461	80 47						.word 	Group2Text
>4463	d0 47						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4465					Group0Text:
>4465	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4469	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>446c	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>4470	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>4473	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4476	01 be					.byte $01,$be                          ; $8b >
>4478	01 bc					.byte $01,$bc                          ; $8c <
>447a	01 bd					.byte $01,$bd                          ; $8d =
>447c	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>447f	01 ab					.byte $01,$ab                          ; $8f +
>4481	01 ad					.byte $01,$ad                          ; $90 -
>4483	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>4486	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>4489	01 aa					.byte $01,$aa                          ; $93 *
>448b	01 af					.byte $01,$af                          ; $94 /
>448d	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>4491	01 de					.byte $01,$de                          ; $96 ^
>4493	01 a1					.byte $01,$a1                          ; $97 !
>4495	01 bf					.byte $01,$bf                          ; $98 ?
>4497	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>449e	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>44a4	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>44a8	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>44ab	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>44b3	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>44b9	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>44be	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>44c3	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>44c8	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>44ce	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>44d6	01 a8					.byte $01,$a8                          ; $a4 (
>44d8	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>44dd	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>44e2	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>44e7	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>44ef	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>44f4	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>44f9	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>44ff	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4504	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4509	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>450e	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4515	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>451c	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4521	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4528	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>452f	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4535	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>453c	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4542	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>454a	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4550	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4555	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>455b	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4561	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4567	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>456c	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>4571	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4578	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>457f	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>4587	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>458f	01 c0					.byte $01,$c0                          ; $c3 @
>4591	01 fe					.byte $01,$fe                          ; $c4 ~
>4593	01 a6					.byte $01,$a6                          ; $c5 &
>4595	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>459b	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>45a3	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>45a7	01 a9					.byte $01,$a9                          ; $c9 )
>45a9	01 ba					.byte $01,$ba                          ; $ca :
>45ab	01 ac					.byte $01,$ac                          ; $cb ,
>45ad	01 bb					.byte $01,$bb                          ; $cc ;
>45af	01 a7					.byte $01,$a7                          ; $cd '
>45b1	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>45b4	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>45b9	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>45be	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>45c4	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>45c8	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>45cc	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>45d0	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>45d6	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>45db	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>45df	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>45e5	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>45ea	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>45f0	02 41 d4				.byte $02,$41,$d4                      ; $db at
>45f3	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>45f8	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>45ff	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4604	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4609	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>460e	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4612	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4618	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>461c	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4623	01 ae					.byte $01,$ae                          ; $e5 .
>4625	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>462a	01 a3					.byte $01,$a3                          ; $e7 #
>462c	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4632	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4633					Group1Text:
>4633	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4638	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>463d	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4642	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4646	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>464c	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4650	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4655	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>465d	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4661	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4666	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>466b	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>4670	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4676	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>467d	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>4681	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4687	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>468b	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>468f	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>4693	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>4697	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>469b	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>469f	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>46a3	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>46a7	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>46ab	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>46af	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>46b3	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>46b7	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>46bb	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>46bf	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>46c3	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>46c7	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>46cb	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>46cf	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>46d3	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>46d7	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>46db	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>46df	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>46e3	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>46e7	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>46eb	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>46ef	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>46f3	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>46f7	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>46fb	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>46ff	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4703	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4707	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>470b	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>470f	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4713	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4717	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>471b	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>471f	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4723	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4727	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>472b	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>472f	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4733	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4737	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>473b	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>473f	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4743	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4747	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>474b	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>474f	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4753	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4757	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>475b	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>475f	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4763	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4767	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>476b	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>476f	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4773	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4777	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>477b	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>477f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4780					Group2Text:
>4780	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4786	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>478c	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4792	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4797	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>479f	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>47a6	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>47aa	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>47af	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>47b5	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>47ba	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $90 text
>47bf	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $91 plot
>47c4	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $92 line
>47c9	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $93 paint
>47cf	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.47d0					Group3Text:
>47d0	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>47d7	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>47de	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>47e6	58 a8
>47e8	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>47f0	59 a8
>47f2	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>47f7	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>47fe	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4805	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>480c	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4813	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4814					tokeniserHandler:
.4814	7c 17 48	jmp ($4817,x)			jmp 	(tokeniserVectors,x)
.4817					tokeniserVectors:
>4817	23 48					.word _DummyControlHandler ; index 0
>4819	ad 3f					.word Detokenise           ; index 2
>481b	a1 3f					.word ListLine             ; index 4
>481d	32 42					.word TokTest              ; index 6
>481f	52 42					.word Tokenise             ; index 8
>4821	55 42					.word TokeniseASCIIZ       ; index 10
.4823					_DummyControlHandler:
.4823	60		rts			rts

;******  Return to file: basic.asm

.4824					section_end_tokeniser:
.4824					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4824					AccessArray:
.4824	8a		txa				txa
.4825	48		pha				pha
.4826	e8		inx				inx
.4827	20 f0 48	jsr $48f0			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.482a	68		pla				pla
.482b	aa		tax				tax
.482c	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.482e	85 2a		sta $2a				sta 	temp0
.4830	b5 a0		lda $a0,x			lda 	esInt1,x
.4832	85 2b		sta $2b				sta 	temp0+1
.4834	8a		txa				txa
.4835	48		pha				pha
.4836	98		tya				tya
.4837	48		pha				pha
.4838					_AAFollow:
.4838	a0 00		ldy #$00			ldy 	#0
.483a	b1 2a		lda ($2a),y			lda 	(temp0),y
.483c	48		pha				pha
.483d	c8		iny				iny
.483e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4840	85 2b		sta $2b				sta 	temp0+1
.4842	68		pla				pla
.4843	85 2a		sta $2a				sta 	temp0
.4845	e8		inx				inx 								; advance to next stack slot.
.4846	a0 00		ldy #$00			ldy 	#0
.4848	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.484a	d5 98		cmp $98,x			cmp 	esInt0,x
.484c	c8		iny				iny
.484d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.484f	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4851	29 7f		and #$7f			and 	#$7F
.4853	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4855	90 50		bcc $48a7			bcc 	_AABadIndex 				; failed on index if max index < required.
.4857	18		clc				clc
.4858	a5 2a		lda $2a				lda 	temp0
.485a	69 02		adc #$02			adc 	#2
.485c	85 2a		sta $2a				sta 	temp0
.485e	90 02		bcc $4862			bcc 	_AANoCarry
.4860	e6 2b		inc $2b				inc 	temp0+1
.4862					_AANoCarry:
.4862	b5 98		lda $98,x			lda 	esInt0,x
.4864	85 2e		sta $2e				sta 	temp2
.4866	b5 a0		lda $a0,x			lda 	esInt1,x
.4868	85 2f		sta $2f				sta 	temp2+1
.486a	ac 1e 0e	ldy $0e1e			ldy 	varType
.486d	b9 4a 49	lda $494a,y			lda 	CAActualSize-$3A,y
.4870	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4872	30 02		bmi $4876			bmi 	_AANotPointer
.4874	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4876					_AANotPointer:
.4876	20 f4 49	jsr $49f4			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4879	18		clc				clc
.487a	a5 2a		lda $2a				lda 	temp0
.487c	65 2e		adc $2e				adc 	temp2
.487e	85 2a		sta $2a				sta 	temp0
.4880	a5 2b		lda $2b				lda 	temp0+1
.4882	65 2f		adc $2f				adc 	temp2+1
.4884	85 2b		sta $2b				sta 	temp0+1
.4886	b5 91		lda $91,x			lda 	esType+1,x
.4888	30 07		bmi $4891			bmi 	_AAUsedAllIndices
.488a	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.488c	10 14		bpl $48a2			bpl 	_AABadDepth 				; no, too many indexes.
.488e	4c 38 48	jmp $4838			jmp 	_AAFollow 					; otherwise follow them.
.4891					_AAUsedAllIndices:
.4891	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4893	30 0d		bmi $48a2			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4895	68		pla				pla
.4896	a8		tay				tay
.4897	68		pla				pla
.4898	aa		tax				tax
.4899	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.489b	95 98		sta $98,x			sta 	esInt0,x
.489d	a5 2b		lda $2b				lda 	temp0+1
.489f	95 a0		sta $a0,x			sta 	esInt1,x
.48a1	60		rts				rts
.48a2					_AABadDepth:
.48a2	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.48a4	20 18 15	jsr $1518		jsr	errorHandler
.48a7					_AABadIndex:
.48a7	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.48a9	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e1c					elementSize:
>0e1c							.fill	 1
.48ac					CreateArray:
.48ac	20 83 4a	jsr $4a83			jsr 	AccessSetup 				; set up the basic stuff.
.48af	ad 1e 0e	lda $0e1e			lda 	varType 					; is the variable type an array
.48b2	4a		lsr a				lsr 	a
.48b3	90 36		bcc $48eb			bcc 	CANotArray 					; no, cause an error.
.48b5	20 8c 4b	jsr $4b8c			jsr 	FindVariable 				; does the variable exist already
.48b8	b0 2c		bcs $48e6			bcs 	CAFound 					; cannot redefine it.
.48ba	20 c0 4a	jsr $4ac0			jsr 	CreateVariable 				; create the variable entry.
.48bd	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.48bf	48		pha				pha
.48c0	a5 2b		lda $2b				lda 	temp0+1
.48c2	48		pha				pha
.48c3	a2 00		ldx #$00			ldx 	#0
.48c5	20 f0 48	jsr $48f0			jsr 	GetArrayDimensions 			; get the array dimensions
.48c8	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.48ca	20 20 49	jsr $4920			jsr 	CreateArrayLevel 			; level to YA
.48cd	aa		tax				tax 								; level now in YX
.48ce	68		pla				pla 								; get address back to temp0 to write.
.48cf	85 2b		sta $2b				sta 	temp0+1
.48d1	68		pla				pla
.48d2	85 2a		sta $2a				sta 	temp0
.48d4	98		tya				tya 								; write YX there.
.48d5	a0 06		ldy #$06			ldy 	#6
.48d7	91 2a		sta ($2a),y			sta 	(temp0),y
.48d9	88		dey				dey
.48da	8a		txa				txa
.48db	91 2a		sta ($2a),y			sta 	(temp0),y
.48dd	ac 1f 0e	ldy $0e1f			ldy 	varEnd 						; restore Y and exit.
.48e0	60		rts				rts
.48e1					CASize:
.48e1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.48e3	20 18 15	jsr $1518		jsr	errorHandler
.48e6					CAFound:
.48e6	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.48e8	20 18 15	jsr $1518		jsr	errorHandler
.48eb					CANotArray:
.48eb	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.48ed	20 18 15	jsr $1518		jsr	errorHandler
.48f0					GetArrayDimensions:
.48f0	ad 1e 0e	lda $0e1e			lda 	varType 					; push variable type on the stack.
.48f3	48		pha				pha
.48f4	ac 1f 0e	ldy $0e1f			ldy 	varEnd
.48f7					_CAGetDimensions:
.48f7	8a		txa				txa 								; get the next level
.48f8	a2 0a		ldx #$0a		ldx	#10
.48fa	20 ce 3c	jsr $3cce		jsr	mainHandler
.48fd	aa		tax				tax
.48fe	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4900	29 e0		and #$e0			and 	#$E0
.4902	15 a8		ora $a8,x			ora 	esInt2,x
.4904	15 b0		ora $b0,x			ora 	esInt3,x
.4906	d0 d9		bne $48e1			bne 	CASize
.4908	e8		inx				inx 								; next level.
.4909	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.490b	c8		iny				iny
.490c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.490e	f0 e7		beq $48f7			beq 	_CAGetDimensions
.4910	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4912	d0 cd		bne $48e1			bne 	CASize
.4914	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4916	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.4918	68		pla				pla 								; restore the variable type ($3A-$3F)
.4919	8d 1e 0e	sta $0e1e			sta 	varType
.491c	8c 1f 0e	sty $0e1f			sty 	varEnd 						; save exit Y value, after dimensions
.491f	60		rts				rts
.4920					CreateArrayLevel:
.4920	ac 1e 0e	ldy $0e1e			ldy 	varType
.4923	b9 4a 49	lda $494a,y			lda 	CAActualSize-$3A,y
.4926	8d 1c 0e	sta $0e1c			sta 	elementSize 				; get element size this level.
.4929	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.492b	30 05		bmi $4932			bmi 	_CANotPointer
.492d	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.492f	8d 1c 0e	sta $0e1c			sta 	elementSize
.4932					_CANotPointer:
.4932	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4934	85 2a		sta $2a				sta 	temp0
.4936	48		pha				pha
.4937	a5 36		lda $36				lda 	lowMemory+1
.4939	85 2b		sta $2b				sta 	temp0+1
.493b	48		pha				pha
.493c	20 bd 49	jsr $49bd			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.493f	a0 00		ldy #$00			ldy 	#0
.4941	b5 98		lda $98,x			lda 	esInt0,x
.4943	91 2a		sta ($2a),y			sta 	(temp0),y
.4945	c8		iny				iny
.4946	b5 a0		lda $a0,x			lda 	esInt1,x
.4948	91 2a		sta ($2a),y			sta 	(temp0),y
.494a	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.494c	30 06		bmi $4954			bmi 	_CALNotLast
.494e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4950	09 80		ora #$80			ora 	#$80
.4952	91 2a		sta ($2a),y			sta 	(temp0),y
.4954					_CALNotLast:
.4954	a9 02		lda #$02			lda 	#2
.4956	20 7a 49	jsr $497a			jsr 	_CALAddTemp0
.4959	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.495b	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.495d	b5 a0		lda $a0,x			lda 	esInt1,x
.495f	95 b0		sta $b0,x			sta 	esInt3,x
.4961					_CALClear:
.4961	20 8a 49	jsr $498a			jsr 	EraseOneElement
.4964	ad 1c 0e	lda $0e1c			lda 	elementSize 				; move to next element
.4967	20 7a 49	jsr $497a			jsr 	_CALAddTemp0
.496a	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.496c	d0 02		bne $4970			bne 	_CALNoBorrow
.496e	d6 b0		dec $b0,x			dec 	esInt3,x
.4970					_CALNoBorrow:
.4970	d6 a8		dec $a8,x			dec 	esInt2,x
.4972	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4974	10 eb		bpl $4961			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4976	68		pla				pla 								; restore the start of this into YA.
.4977	a8		tay				tay
.4978	68		pla				pla
.4979	60		rts				rts
.497a					_CALAddTemp0:
.497a	18		clc				clc
.497b	65 2a		adc $2a				adc 	temp0
.497d	85 2a		sta $2a				sta 	temp0
.497f	90 02		bcc $4983			bcc 	_CALANoCarry
.4981	e6 2b		inc $2b				inc 	temp0+1
.4983					_CALANoCarry:
.4983	60		rts				rts
.4984					CAActualSize:
>4984	04 04						.byte 	VarISize,VarISize
>4986	02 02						.byte 	VarSSize,VarSSize
>4988	06 06						.byte 	VarFSize,VarFSize
.498a					EraseOneElement:
.498a	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.498c	10 09		bpl $4997			bpl 	_EOESubArray
.498e	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4990	ad 1e 0e	lda $0e1e			lda 	varType
.4993	20 2a 4b	jsr $4b2a			jsr 	ZeroTemp0Y
.4996	60		rts				rts
.4997					_EOESubArray:
.4997	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4999	48		pha				pha
.499a	a5 2b		lda $2b				lda 	temp0+1
.499c	48		pha				pha
.499d	ad 1c 0e	lda $0e1c			lda 	elementSize 				; save element size
.49a0	48		pha				pha
.49a1	e8		inx				inx 								; create at next level
.49a2	20 20 49	jsr $4920			jsr 	CreateArrayLevel
.49a5	ca		dex				dex
.49a6	85 32		sta $32				sta 	tempShort 					; save A
.49a8	68		pla				pla  								; restore element size.
.49a9	8d 1c 0e	sta $0e1c			sta 	elementSize
.49ac	68		pla				pla 								; restore temp0, which is where this new array level goes.
.49ad	85 2b		sta $2b				sta 	temp0+1
.49af	68		pla				pla
.49b0	85 2a		sta $2a				sta 	temp0
.49b2	98		tya				tya 								; store Y/A there
.49b3	a0 01		ldy #$01			ldy 	#1
.49b5	91 2a		sta ($2a),y			sta 	(temp0),y
.49b7	a5 32		lda $32				lda 	tempShort
.49b9	88		dey				dey
.49ba	91 2a		sta ($2a),y			sta 	(temp0),y
.49bc	60		rts				rts
.49bd					AllocateArraySpace:
.49bd	18		clc				clc 								; element count + 1 => temp2.
.49be	b5 98		lda $98,x			lda 	esInt0,x
.49c0	69 01		adc #$01			adc 	#1
.49c2	85 2e		sta $2e				sta 	temp2
.49c4	b5 a0		lda $a0,x			lda 	esInt1,x
.49c6	69 00		adc #$00			adc 	#0
.49c8	85 2f		sta $2f				sta 	temp2+1
.49ca	ad 1c 0e	lda $0e1c			lda 	elementSize 				; bytes per element
.49cd	20 f4 49	jsr $49f4			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.49d0	18		clc				clc 								; add 2 for 'max element' byte.
.49d1	a5 2e		lda $2e				lda 	temp2
.49d3	69 02		adc #$02			adc 	#2
.49d5	85 2e		sta $2e				sta 	temp2
.49d7	90 02		bcc $49db			bcc 	_AASNoCarry
.49d9	e6 2f		inc $2f				inc 	temp2+1
.49db					_AASNoCarry:
.49db	18		clc				clc 								; add to low memory, allocating space.
.49dc	a5 35		lda $35				lda 	lowMemory
.49de	65 2e		adc $2e				adc 	temp2
.49e0	85 35		sta $35				sta 	lowMemory
.49e2	a5 36		lda $36				lda 	lowMemory+1
.49e4	65 2f		adc $2f				adc 	temp2+1
.49e6	85 36		sta $36				sta 	lowMemory+1
.49e8	b0 05		bcs $49ef			bcs 	_AASFail 					; out of memory as adding causes wrapround
.49ea	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.49ec	b0 01		bcs $49ef			bcs 	_AASFail
.49ee	60		rts				rts
.49ef					_AASFail:
.49ef	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.49f1	20 18 15	jsr $1518		jsr	errorHandler
.49f4					MultiplyTemp2ByA:
.49f4	48		pha				pha
.49f5	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.49f7	85 30		sta $30				sta 	temp3
.49f9	a5 2f		lda $2f				lda 	temp2+1
.49fb	85 31		sta $31				sta 	temp3+1
.49fd	68		pla				pla
.49fe	06 2e		asl $2e				asl 	temp2 						; double it.
.4a00	26 2f		rol $2f				rol 	temp2+1
.4a02	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4a04	f0 15		beq $4a1b			beq 	_MTBAExit
.4a06	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4a08	d0 0d		bne $4a17			bne 	_MTBANotFloat
.4a0a	18		clc				clc 								; so this will make it x 3
.4a0b	a5 2e		lda $2e				lda 	temp2
.4a0d	65 30		adc $30				adc 	temp3
.4a0f	85 2e		sta $2e				sta 	temp2
.4a11	a5 2f		lda $2f				lda 	temp2+1
.4a13	65 31		adc $31				adc 	temp3+1
.4a15	85 2f		sta $2f				sta 	temp2+1
.4a17					_MTBANotFloat:
.4a17	06 2e		asl $2e				asl 	temp2 						; double it.
.4a19	26 2f		rol $2f				rol 	temp2+1
.4a1b					_MTBAExit:
.4a1b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e1d					varHash:
>0e1d							.fill	1
.0e1e					varType:
>0e1e							.fill 	1
.0e1f					varEnd:
>0e1f							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4a1c					AccessVariable:
.4a1c	aa		tax				tax 								; stack in X
.4a1d	c8		iny				iny									; look at second character
.4a1e	b1 28		lda ($28),y			lda 	(codePtr),y
.4a20	88		dey				dey
.4a21	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4a23	d0 15		bne $4a3a			bne 	_AVLong 					; no, always use the hash tables.
.4a25	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4a27	38		sec				sec 	 							; make it 0-25
.4a28	e9 01		sbc #$01			sbc 	#1
.4a2a	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4a2b	0a		asl a				asl 	a
.4a2c	95 98		sta $98,x			sta 	esInt0,x
.4a2e	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4a30	95 a0		sta $a0,x			sta 	esInt1,x
.4a32	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4a34	95 90		sta $90,x			sta 	esType,x
.4a36	c8		iny				iny 								; skip over the variable reference in the code.
.4a37	c8		iny				iny  								; (1 letter, 1 type)
.4a38	8a		txa				txa 								; stack in A to return.
.4a39	60		rts				rts
.4a3a					_AVLong:
.4a3a	8a		txa				txa
.4a3b	48		pha				pha
.4a3c	20 83 4a	jsr $4a83			jsr 	AccessSetup 				; set up the basic information we need for later
.4a3f	20 8c 4b	jsr $4b8c			jsr 	FindVariable 				; does the variable exist already ?
.4a42	b0 0e		bcs $4a52			bcs 	_AVFound 					; yes, then its found
.4a44	ad 1e 0e	lda $0e1e			lda 	varType 					; otherwise, is the variable type an array
.4a47	4a		lsr a				lsr 	a
.4a48	90 05		bcc $4a4f			bcc 	_AVCanCreate 				; if not, we can autocreate
.4a4a	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4a4c	20 18 15	jsr $1518		jsr	errorHandler
.4a4f					_AVCanCreate:
.4a4f	20 c0 4a	jsr $4ac0			jsr 	CreateVariable 				; variable does not exist, create it.
.4a52					_AVFound:
.4a52	68		pla				pla
.4a53	aa		tax				tax
.4a54	18		clc				clc 								; copy temp0 (variable record address)
.4a55	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4a57	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4a59	95 98		sta $98,x			sta 	esInt0,x
.4a5b	a5 2b		lda $2b				lda 	temp0+1
.4a5d	69 00		adc #$00			adc 	#0
.4a5f	95 a0		sta $a0,x			sta 	esInt1,x
.4a61	a9 00		lda #$00			lda 	#0
.4a63	95 a8		sta $a8,x			sta 	esInt2,x
.4a65	95 b0		sta $b0,x			sta 	esInt3,x
.4a67	ac 1e 0e	ldy $0e1e			ldy 	varType 					; get the type ID from the type.
.4a6a	b9 43 4a	lda $4a43,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4a6d	95 90		sta $90,x			sta 	esType,x
.4a6f	ac 1f 0e	ldy $0e1f			ldy 	varEnd 						; restore Y
.4a72	ad 1e 0e	lda $0e1e			lda 	VarType 					; get variable type, put LSB into C
.4a75	4a		lsr a				lsr 	a
.4a76	90 03		bcc $4a7b			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4a78	20 24 48	jsr $4824			jsr 	AccessArray 				; array lookup. if LSB was set.
.4a7b					_AVNotArray:
.4a7b	8a		txa				txa 								; return stack in A and return
.4a7c	60		rts				rts
.4a7d					_AVTypeTable:
>4a7d	80 80						.byte 	$80,$80						; integer
>4a7f	c0 c0						.byte 	$C0,$C0 					; string
>4a81	81 81						.byte 	$81,$81 					; float
.4a83					AccessSetup:
.4a83	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4a85	8d 1d 0e	sta $0e1d			sta 	varHash
.4a88	98		tya				tya
.4a89	48		pha				pha
.4a8a	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4a8c	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4a8e	b0 0b		bcs $4a9b			bcs 	_ASComplete
.4a90	18		clc				clc 								; add to the hash. Might improve this.
.4a91	6d 1d 0e	adc $0e1d			adc 	varHash
.4a94	8d 1d 0e	sta $0e1d			sta 	varHash
.4a97	c8		iny				iny 								; next character
.4a98	4c 8a 4a	jmp $4a8a			jmp 	_ASLoop
.4a9b					_ASComplete:
.4a9b	8d 1e 0e	sta $0e1e			sta 	varType 					; save variable type byte
.4a9e	c8		iny				iny
.4a9f	8c 1f 0e	sty $0e1f			sty 	varEnd 						; save the ending position.
.4aa2	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4aa3	e9 3a		sbc #$3a			sbc 	#$3A
.4aa5	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4aa6	0a		asl a				asl 	a
.4aa7	0a		asl a				asl 	a
.4aa8	0a		asl a				asl 	a 							; 2 bytes/word
.4aa9	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4aab	ad 1d 0e	lda $0e1d			lda 	varHash 					; get hash
.4aae	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4ab0	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4ab1	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4ab3	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4ab5	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4ab7	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4ab9	69 00		adc #$00			adc 	#0
.4abb	85 3c		sta $3c				sta 	hashList+1
.4abd	68		pla				pla
.4abe	a8		tay				tay
.4abf	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4ac0					CreateVariable:
.4ac0	98		tya				tya 								; push Y on the stack twice.
.4ac1	48		pha				pha									; position in code of the new variable.
.4ac2	48		pha				pha
.4ac3	ae 1e 0e	ldx $0e1e			ldx 	varType 					; get var type 0-5 from the var type
.4ac6	bd ea 4a	lda $4aea,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4ac9	48		pha				pha 								; save length
.4aca	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4acc	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4ace	a5 36		lda $36				lda 	lowMemory+1
.4ad0	85 2b		sta $2b				sta 	temp0+1
.4ad2	68		pla				pla 								; get length
.4ad3	18		clc				clc 								; add to low memory.
.4ad4	65 35		adc $35				adc 	lowMemory
.4ad6	85 35		sta $35				sta 	lowMemory
.4ad8	90 08		bcc $4ae2			bcc 	_CVNoCarry
.4ada	e6 36		inc $36				inc 	lowMemory+1
.4adc	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4ade	c5 34		cmp $34				cmp 	highMemory+1
.4ae0	b0 3d		bcs $4b1f			bcs 	_CVMemory
.4ae2					_CVNoCarry:
.4ae2	ad 1d 0e	lda $0e1d			lda 	varHash 					; store hash at offset 4.
.4ae5	a0 04		ldy #$04			ldy 	#4
.4ae7	91 2a		sta ($2a),y			sta 	(temp0),y
.4ae9	68		pla				pla 								; offset, work out where the variable name is.
.4aea	18		clc				clc
.4aeb	65 28		adc $28				adc 	codePtr
.4aed	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4aef	91 2a		sta ($2a),y			sta 	(temp0),y
.4af1	a5 29		lda $29				lda 	codePtr+1
.4af3	69 00		adc #$00			adc 	#0
.4af5	c8		iny				iny
.4af6	91 2a		sta ($2a),y			sta 	(temp0),y
.4af8	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4afb	b0 03		bcs $4b00			bcs 	_CVNotImmediate
.4afd	20 62 4b	jsr $4b62			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4b00					_CVNotImmediate:
.4b00	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4b02	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4b04	91 2a		sta ($2a),y			sta 	(temp0),y
.4b06	c8		iny				iny
.4b07	b1 3b		lda ($3b),y			lda 	(hashList),y
.4b09	91 2a		sta ($2a),y			sta 	(temp0),y
.4b0b	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4b0d	91 3b		sta ($3b),y			sta 	(hashList),y
.4b0f	88		dey				dey
.4b10	a5 2a		lda $2a				lda 	temp0
.4b12	91 3b		sta ($3b),y			sta 	(hashList),y
.4b14	ad 1e 0e	lda $0e1e			lda 	varType 					; type in A
.4b17	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4b19	20 2a 4b	jsr $4b2a			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4b1c	68		pla				pla
.4b1d	a8		tay				tay
.4b1e	60		rts				rts
.4b1f					_CVMemory:
.4b1f	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4b21	20 18 15	jsr $1518		jsr	errorHandler
>4b24	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4b26	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4b28	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4b2a					ZeroTemp0Y:
.4b2a	4a		lsr a				lsr 	a 							; bit 0 in carry
.4b2b	0a		asl a				asl 	a
.4b2c	b0 19		bcs $4b47			bcs 	_ZTExit 					; we don't initialise arrays.
.4b2e	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4b30	f0 16		beq $4b48			beq 	_ZTWriteNullString 			; write "" string
.4b32	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4b34	f0 22		beq $4b58			beq 	_ZTWriteFloat
.4b36	98		tya				tya
.4b37	48		pha				pha
.4b38	a9 00		lda #$00			lda 	#0
.4b3a	91 2a		sta ($2a),y			sta 	(temp0),y
.4b3c	c8		iny				iny
.4b3d	91 2a		sta ($2a),y			sta 	(temp0),y
.4b3f	c8		iny				iny
.4b40	91 2a		sta ($2a),y			sta 	(temp0),y
.4b42	c8		iny				iny
.4b43	91 2a		sta ($2a),y			sta 	(temp0),y
.4b45	68		pla				pla
.4b46	a8		tay				tay
.4b47					_ZTExit:
.4b47	60		rts				rts
.4b48					_ZTWriteNullString:
.4b48	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4b4a	8d ce 0a	sta $0ace			sta 	NullString
.4b4d	a9 ce		lda #$ce			lda 	#NullString & $FF
.4b4f	91 2a		sta ($2a),y			sta 	(temp0),y
.4b51	a9 0a		lda #$0a			lda 	#NullString >> 8
.4b53	c8		iny				iny
.4b54	91 2a		sta ($2a),y			sta 	(temp0),y
.4b56	88		dey				dey
.4b57	60		rts				rts
.4b58					_ZTWriteFloat:
.4b58	8a		txa				txa
.4b59	48		pha				pha
.4b5a	a2 20		ldx #$20		ldx	#32
.4b5c	20 44 24	jsr $2444		jsr	floatingpointHandler
.4b5f	68		pla				pla
.4b60	aa		tax				tax
.4b61	60		rts				rts
.4b62					CloneVariableName:
.4b62	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4b64	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b66	85 2e		sta $2e				sta 	temp2
.4b68	c8		iny				iny
.4b69	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b6b	85 2f		sta $2f				sta 	temp2+1
.4b6d	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4b6f	91 2a		sta ($2a),y			sta 	(temp0),y
.4b71	88		dey				dey
.4b72	a5 35		lda $35				lda 	lowMemory
.4b74	91 2a		sta ($2a),y			sta 	(temp0),y
.4b76	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4b78					_CVNCopy:
.4b78	b1 2e		lda ($2e),y			lda		(temp2),y
.4b7a	91 35		sta ($35),y			sta 	(lowMemory),y
.4b7c	c8		iny				iny
.4b7d	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4b7f	90 f7		bcc $4b78			bcc 	_CVNCopy
.4b81	98		tya				tya 								; add Y to low memory
.4b82	18		clc				clc
.4b83	65 35		adc $35				adc 	lowMemory
.4b85	85 35		sta $35				sta 	lowMemory
.4b87	90 02		bcc $4b8b			bcc 	_CVNNoCarry
.4b89	e6 36		inc $36				inc 	lowMemory+1
.4b8b					_CVNNoCarry:
.4b8b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4b8c					FindVariable:
.4b8c	98		tya				tya
.4b8d	48		pha				pha
.4b8e	98		tya				tya 								; point temp2 to the actual name
.4b8f	18		clc				clc 								; in memory of the variable being created
.4b90	65 28		adc $28				adc 	codePtr
.4b92	85 2e		sta $2e				sta 	temp2
.4b94	a5 29		lda $29				lda 	codePtr+1
.4b96	69 00		adc #$00			adc 	#0
.4b98	85 2f		sta $2f				sta 	temp2+1
.4b9a	a0 00		ldy #$00			ldy 	#0
.4b9c	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4b9e	85 2a		sta $2a				sta 	temp0
.4ba0	a5 3c		lda $3c				lda 	hashList+1
.4ba2	85 2b		sta $2b				sta 	temp0+1
.4ba4	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4ba6	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ba8	f0 2c		beq $4bd6			beq 	_FVFail
.4baa	aa		tax				tax
.4bab	88		dey				dey		 							; get LSB
.4bac	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bae	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4bb0	86 2b		stx $2b				stx 	temp0+1
.4bb2	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4bb4	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bb6	cd 1d 0e	cmp $0e1d			cmp 	varHash
.4bb9	d0 e9		bne $4ba4			bne 	_FVNext 					; if not, no point in checking the name.
.4bbb	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4bbc	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bbe	85 2d		sta $2d				sta 	temp1+1
.4bc0	88		dey				dey
.4bc1	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bc3	85 2c		sta $2c				sta 	temp1
.4bc5	a0 00		ldy #$00			ldy 	#0
.4bc7					_FVCheck:
.4bc7	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4bc9	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4bcb	d0 d7		bne $4ba4			bne 	_FVNext		 				; fail if different.
.4bcd	c8		iny				iny
.4bce	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4bd0	90 f5		bcc $4bc7			bcc 	_FVCheck
.4bd2	68		pla				pla
.4bd3	a8		tay				tay
.4bd4	38		sec				sec
.4bd5	60		rts				rts
.4bd6					_FVFail:
.4bd6	68		pla				pla
.4bd7	a8		tay				tay
.4bd8	18		clc				clc
.4bd9	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4bda					HashTableReset:
.4bda	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4bdc	a9 00		lda #$00			lda 	#0
.4bde					_HTRClear:
.4bde	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4be1	ca		dex				dex
.4be2	d0 fa		bne $4bde			bne 	_HTRClear
.4be4	60		rts				rts

;******  Return to file: variable/variable.asm

.4be5					variableHandler:
.4be5	7c e8 4b	jmp ($4be8,x)			jmp 	(variableVectors,x)
.4be8					variableVectors:
>4be8	f0 4b					.word _DummyControlHandler ; index 0
>4bea	1c 4a					.word AccessVariable       ; index 2
>4bec	ac 48					.word CreateArray          ; index 4
>4bee	da 4b					.word HashTableReset       ; index 6
.4bf0					_DummyControlHandler:
.4bf0	60		rts			rts

;******  Return to file: basic.asm

.4bf1					section_end_variable:
.4bf1					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e20					endStorage:
>4bf1							.align 	256
.4c00					programMemory:
>4bff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4c00					section_end_footer:

;******  End of listing
