
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Thu Apr 08 17:12:04 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=1					cputype = 1
=1					autorun = 1
=0					coldstartnew = 0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35
.0af2					jumpVector:
>0af2							.fill 	2

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$ea					TKW_TYPE                     = $ea ; type
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$93					TKW_SOUND                    = $93 ; sound
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(
=$8f					TKW_PLAYINGLPAREN            = $8f ; playing(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	d5 46						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4f		lda #$4f			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 0e 29	jsr $290e		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 ac 13	jsr $13ac		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 05 15	jsr $1505		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 0e 29	jsr $290e		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 18 42	jsr $4218		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 a0 4a	jsr $4aa0		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 5f 4e	jsr $4e5f		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 a0 4a	jsr $4aa0		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first character into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit 					; e.g. "INX"
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ? so it is lda (something
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A on its own. This is for ASL A
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it - this should be $3A
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1 (it may of course be absolute)
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing 				; get ,X or ,Y if present
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit 					; neither present
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX 					; decide if ,X or ,Y
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 6d 3f	jsr $3f6d		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 27 15	jsr $1527		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 6d 3f	jsr $3f6d		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X) so get the ending and error on anything else.
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 6d 3f	jsr $3f6d		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma (e.g. ,X ,Y)
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af4					finalOpcode:
>0af4							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f4 0a	sta $0af4			sta 	finalOpcode					; save opcode.
.1113	5a		phy				phy
.1114	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O (e.g. what do we display/check.)
.1117	29 02		and #$02			and 	#2
.1119	f0 2b		beq $1146			beq 	_ASMWNoEcho 				; if bit 2 zero then don't echo.
.111b	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111e	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1121	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1124	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1127	ad f4 0a	lda $0af4			lda 	finalOpcode 				; write opcode
.112a	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.112d	e0 00		cpx #$00			cpx 	#0
.112f	f0 0e		beq $113f			beq 	_ASMWEchoExit
.1131	a5 98		lda $98				lda 	esInt0
.1133	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.1136	e0 01		cpx #$01			cpx 	#1
.1138	f0 05		beq $113f			beq 	_ASMWEchoExit
.113a	a5 a0		lda $a0				lda 	esInt1
.113c	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.113f					_ASMWEchoExit:
.113f	da		phx				phx
.1140	a2 04		ldx #$04		ldx	#4
.1142	20 05 15	jsr $1505		jsr	deviceHandler
.1145	fa		plx				plx
.1146					_ASMWNoEcho:
.1146	ad f4 0a	lda $0af4			lda 	finalOpcode 				; opcode
.1149	20 60 11	jsr $1160			jsr 	AsmWriteByte
.114c	e0 00		cpx #$00			cpx 	#0	 						; exit if no operands
.114e	f0 0e		beq $115e			beq 	_ASMWExit
.1150	a5 98		lda $98				lda 	esInt0	 					; low byte
.1152	20 60 11	jsr $1160			jsr 	AsmWriteByte
.1155	e0 01		cpx #$01			cpx 	#1
.1157	f0 05		beq $115e			beq 	_ASMWExit
.1159	a5 a0		lda $a0				lda 	esInt1 						; high byte
.115b	20 60 11	jsr $1160			jsr 	AsmWriteByte
.115e					_ASMWExit:
.115e	7a		ply				ply
.115f	60		rts				rts
.1160					AsmWriteByte:
.1160	a0 00		ldy #$00			ldy 	#0
.1162	48		pha				pha
.1163	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1166	85 2a		sta $2a				sta 	temp0
.1168	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116b	85 2b		sta $2b				sta 	temp0+1
.116d	68		pla				pla 								; write out the byte.
.116e	91 2a		sta ($2a),y			sta 	(temp0),y
.1170	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1173	d0 03		bne $1178			bne 	_AWBNoCarry
.1175	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1178					_AWBNoCarry:
.1178	60		rts				rts
.1179					AWIWriteHexSpace:
.1179	48		pha				pha
.117a	a9 20		lda #$20			lda 	#" "
.117c	20 93 11	jsr $1193			jsr 	AWIPrintChar
.117f	68		pla				pla
.1180					AWIWriteHex:
.1180	48		pha				pha
.1181	4a		lsr a				lsr 	a
.1182	4a		lsr a				lsr 	a
.1183	4a		lsr a				lsr 	a
.1184	4a		lsr a				lsr 	a
.1185	20 89 11	jsr $1189			jsr 	AWIPrintNibble
.1188	68		pla				pla
.1189					AWIPrintNibble:
.1189	29 0f		and #$0f			and 	#15
.118b	c9 0a		cmp #$0a			cmp 	#10
.118d	90 02		bcc $1191			bcc 	_AWIPNDigit
.118f	69 06		adc #$06			adc 	#6
.1191					_AWIPNDigit:
.1191	69 30		adc #$30			adc 	#48
.1193					AWIPrintChar:
.1193	85 32		sta $32				sta 	tempShort
.1195	da		phx				phx
.1196	a5 32		lda $32				lda 	tempShort
.1198	a2 14		ldx #$14		ldx	#20
.119a	20 05 15	jsr $1505		jsr	deviceHandler
.119d	fa		plx				plx
.119e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af5					asmToken:
>0af5							.fill 	1
.0af6					asmMode:
>0af6							.fill 	1 							; esInt0/1
.0af7					asmBaseOpcode:
>0af7							.fill 	1
.119f					AssembleOneInstruction:
.119f	8d f5 0a	sta $0af5			sta 	asmToken 					; save the token
.11a2	aa		tax				tax
.11a3	bd 6c 11	lda $116c,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11a6	8d f7 0a	sta $0af7			sta 	asmBaseOpcode
.11a9	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11ac	8d f6 0a	sta $0af6			sta 	asmMode
.11af	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b1	d0 05		bne $11b8			bne 	_AOIThreeBytes 				; if so, we have to use three byte, can't try zp before abs
.11b3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11b6	b0 10		bcs $11c8			bcs 	_AOISuccess 				; worked ok.
.11b8					_AOIThreeBytes:
.11b8	ae f6 0a	ldx $0af6			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11bb	bd f2 11	lda $11f2,x			lda 	AbsoluteVersionTable,x
.11be	30 09		bmi $11c9			bmi 	_AOIError					; not possible, no equivalent.
.11c0	8d f6 0a	sta $0af6			sta 	asmMode
.11c3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11c6	90 01		bcc $11c9			bcc 	_AOIError 					; didn't work.
.11c8					_AOISuccess:
.11c8	60		rts				rts
.11c9					_AOIError:
.11c9	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11cb	20 27 15	jsr $1527		jsr	errorHandler
.11ce					AssembleAttempt:
.11ce	20 d7 11	jsr $11d7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d1	b0 03		bcs $11d6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d3	20 7f 13	jsr $137f			jsr 	AssembleSpecialCase
.11d6					_AAExit:
.11d6	60		rts				rts
.11d7					_AADispatch:
.11d7	ad f5 0a	lda $0af5			lda 	asmToken
.11da	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11dc	b0 11		bcs $11ef			bcs 	_AAGroup4
.11de	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e0	b0 0a		bcs $11ec			bcs 	_AAGroup3
.11e2	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11e4	b0 03		bcs $11e9			bcs 	_AAGroup2
.11e6	4c c5 12	jmp $12c5			jmp 	AssembleGroup1
.11e9					_AAGroup2:
.11e9	4c 20 13	jmp $1320			jmp 	AssembleGroup2
.11ec					_AAGroup3:
.11ec	4c 41 13	jmp $1341			jmp 	AssembleGroup3
.11ef					_AAGroup4:
.11ef	4c 75 13	jmp $1375			jmp 	AssembleGroup4
.11f2					AbsoluteVersionTable:
>11f2	ff						.byte	$FF 			; fail AMD_IMM
>11f3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11f4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11f5	ff						.byte	$FF 			; fail AMD_ABS
>11f6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11f7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11f8	ff						.byte	$FF 			; fail AMD_ABSY
>11f9	ff						.byte	$FF 			; fail AMD_ABSX
>11fa	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11fb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11fc	ff						.byte	$FF 			; fail AMD_ABSIND
>11fd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11fe	ff						.byte	$FF 			; fail AMD_REL
>11ff	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1200					OpcodeTable:
>1200	01					.byte	$01			; $94 ora
>1201	21					.byte	$21			; $95 (and)
>1202	41					.byte	$41			; $96 eor
>1203	61					.byte	$61			; $97 adc
>1204	81					.byte	$81			; $98 sta
>1205	a1					.byte	$a1			; $99 lda
>1206	c1					.byte	$c1			; $9a cmp
>1207	e1					.byte	$e1			; $9b sbc
>1208	02					.byte	$02			; $9c asl
>1209	22					.byte	$22			; $9d rol
>120a	42					.byte	$42			; $9e lsr
>120b	62					.byte	$62			; $9f ror
>120c	82					.byte	$82			; $a0 stx
>120d	a2					.byte	$a2			; $a1 ldx
>120e	c2					.byte	$c2			; $a2 dec
>120f	e2					.byte	$e2			; $a3 inc
>1210	60					.byte	$60			; $a4 stz
>1211	20					.byte	$20			; $a5 bit
>1212	80					.byte	$80			; $a6 sty
>1213	a0					.byte	$a0			; $a7 ldy
>1214	c0					.byte	$c0			; $a8 cpy
>1215	e0					.byte	$e0			; $a9 cpx
>1216	00					.byte	$00			; $aa tsb
>1217	10					.byte	$10			; $ab trb
>1218	14					.byte	$14			; $ac jsr
>1219	40					.byte	$40			; $ad jmp
>121a	10					.byte	$10			; $ae bpl
>121b	30					.byte	$30			; $af bmi
>121c	50					.byte	$50			; $b0 bvc
>121d	70					.byte	$70			; $b1 bvs
>121e	90					.byte	$90			; $b2 bcc
>121f	b0					.byte	$b0			; $b3 bcs
>1220	d0					.byte	$d0			; $b4 bne
>1221	f0					.byte	$f0			; $b5 beq
>1222	80					.byte	$80			; $b6 bra
>1223	00					.byte	$00			; $b7 brk
>1224	08					.byte	$08			; $b8 php
>1225	18					.byte	$18			; $b9 clc
>1226	28					.byte	$28			; $ba plp
>1227	38					.byte	$38			; $bb sec
>1228	40					.byte	$40			; $bc rti
>1229	48					.byte	$48			; $bd pha
>122a	58					.byte	$58			; $be cli
>122b	5a					.byte	$5a			; $bf phy
>122c	60					.byte	$60			; $c0 rts
>122d	68					.byte	$68			; $c1 pla
>122e	78					.byte	$78			; $c2 sei
>122f	7a					.byte	$7a			; $c3 ply
>1230	88					.byte	$88			; $c4 dey
>1231	8a					.byte	$8a			; $c5 txa
>1232	98					.byte	$98			; $c6 tya
>1233	9a					.byte	$9a			; $c7 txs
>1234	a8					.byte	$a8			; $c8 tay
>1235	aa					.byte	$aa			; $c9 tax
>1236	b8					.byte	$b8			; $ca clv
>1237	ba					.byte	$ba			; $cb tsx
>1238	c8					.byte	$c8			; $cc iny
>1239	ca					.byte	$ca			; $cd dex
>123a	d8					.byte	$d8			; $ce cld
>123b	da					.byte	$da			; $cf phx
>123c	e8					.byte	$e8			; $d0 inx
>123d	ea					.byte	$ea			; $d1 nop
>123e	f8					.byte	$f8			; $d2 sed
>123f	fa					.byte	$fa			; $d3 plx
.1240					Group2OpcodeAvailability:
>1240	ae					.byte	$ae			; $9c asl $02
>1241	ae					.byte	$ae			; $9d rol $22
>1242	ae					.byte	$ae			; $9e lsr $42
>1243	ae					.byte	$ae			; $9f ror $62
>1244	0a					.byte	$0a			; $a0 stx $82
>1245	0b					.byte	$0b			; $a1 ldx $a2
>1246	aa					.byte	$aa			; $a2 dec $c2
>1247	aa					.byte	$aa			; $a3 inc $e2
>1248	22					.byte	$22			; $a4 stz $60
>1249	aa					.byte	$aa			; $a5 bit $20
>124a	2a					.byte	$2a			; $a6 sty $80
>124b	ab					.byte	$ab			; $a7 ldy $a0
>124c	2b					.byte	$2b			; $a8 cpy $c0
>124d	0b					.byte	$0b			; $a9 cpx $e0
>124e	0a					.byte	$0a			; $aa tsb $00
>124f	0a					.byte	$0a			; $ab trb $10
>1250	08					.byte	$08			; $ac jsr $14
>1251	08					.byte	$08			; $ad jmp $40
.1252					AssemblerSpecialCases:
>1252	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>1255	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>1258	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>125b	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>125e	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1261	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>1264	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>1267	a5 00 89				.byte	$a5,0,$89		; bit #
>126a	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>126d	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1270	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1271					AssembleLabel:
.1271	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1273	c9 3a		cmp #$3a			cmp 	#$3A 						; e.g. it isn't just '.'
.1275	b0 49		bcs $12c0			bcs 	_ALSyntax
.1277	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.1279	a2 02		ldx #$02		ldx	#2
.127b	20 5f 4e	jsr $4e5f		jsr	variableHandler
.127e	a5 90		lda $90				lda 	esType 						; check integer reference
.1280	c9 80		cmp #$80			cmp 	#$80
.1282	d0 3c		bne $12c0			bne 	_ALSyntax
.1284	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.1286	85 2a		sta $2a				sta 	temp0
.1288	a5 a0		lda $a0				lda 	esInt1
.128a	85 2b		sta $2b				sta 	temp0+1
.128c	5a		phy				phy
.128d	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2 ?
.1290	4a		lsr a				lsr 	a
.1291	90 11		bcc $12a4			bcc 	_ALWrite
.1293	a0 00		ldy #$00			ldy 	#0
.1295	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.1298	d1 2a		cmp ($2a),y			cmp 	(temp0),y 					; labels cannot change value, usually means address mode has changed.
.129a	d0 1f		bne $12bb			bne 	_ALChanged
.129c	c8		iny				iny
.129d	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a2	d0 17		bne $12bb			bne 	_ALChanged
.12a4					_ALWrite:
.12a4	a0 00		ldy #$00			ldy 	#0
.12a6	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12a9	91 2a		sta ($2a),y			sta 	(temp0),y
.12ab	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12ae	c8		iny				iny
.12af	91 2a		sta ($2a),y			sta 	(temp0),y
.12b1	a9 00		lda #$00			lda 	#0
.12b3	c8		iny				iny
.12b4	91 2a		sta ($2a),y			sta 	(temp0),y
.12b6	c8		iny				iny
.12b7	91 2a		sta ($2a),y			sta 	(temp0),y
.12b9	7a		ply				ply
.12ba	60		rts				rts
.12bb					_ALChanged:
.12bb	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12bd	20 27 15	jsr $1527		jsr	errorHandler
.12c0					_ALSyntax:
.12c0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12c2	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12c5					AssembleGroup1:
.12c5	ad f5 0a	lda $0af5			lda 	asmToken 					; firstly, we throw out STA immediate
.12c8	c9 98		cmp #$98			cmp 	#TKW_STA
.12ca	d0 07		bne $12d3			bne 	_AG1NotStoreImm
.12cc	ad f6 0a	lda $0af6			lda 	asmMode
.12cf	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d1	f0 2c		beq $12ff			beq 	AG1ModeError
.12d3					_AG1NotStoreImm:
.12d3	ae f6 0a	ldx $0af6			ldx 	asmMode						; get mode into X.
.12d6	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12d9	48		pha				pha
.12da	f0 23		beq $12ff			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12dc	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12de	d0 02		bne $12e2			bne 	_AG1NotImmediate
.12e0	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12e2					_AG1NotImmediate:
.12e2	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12e4	d0 02		bne $12e8			bne 	_AG1NotZX
.12e6	a2 00		ldx #$00			ldx 	#0
.12e8					_AG1NotZX:
.12e8	68		pla				pla 								; restore length
.12e9	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12eb	b0 10		bcs $12fd			bcs 	AG1Fail
.12ed					AG1ReturnValue:
.12ed	85 32		sta $32				sta 	tempShort 					; save size of operand
.12ef	18		clc				clc
.12f0	bd 12 13	lda $1312,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12f3	6d f7 0a	adc $0af7			adc 	asmBaseOpcode 				; add the base opcode.
.12f6	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12f8	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.12fb	38		sec				sec
.12fc	60		rts				rts
.12fd					AG1Fail:
.12fd	18		clc				clc
.12fe	60		rts				rts
.12ff					AG1ModeError:
.12ff	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1301	20 27 15	jsr $1527		jsr	errorHandler
.1304					AMDOperandSize:
>1304	01 01 00 02					.byte 	1,1,0,2
>1308	01 01 02 02					.byte 	1,1,2,2
>130c	01 01 02 02					.byte 	1,1,2,2
>1310	01 01						.byte 	1,1
.1312					AMDOffsetFromBase:
>1312	00 04 08 0c					.byte 	0,4,8,12
>1316	10 14 18 1c					.byte	16,20,24,28
>131a	11 00 00 00					.byte 	17,0,0,0
>131e	00 00						.byte 	0,0
.1320					AssembleGroup2:
.1320	ad f6 0a	lda $0af6			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.1323	c9 08		cmp #$08			cmp 	#8
.1325	b0 18		bcs $133f			bcs 	_AG2Fail
.1327	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1329	ae f5 0a	ldx $0af5			ldx 	asmToken					; get token in X, then get the availability flags for it
.132c	bd a4 11	lda $11a4,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.132f					_AG2Shift:
.132f	4a		lsr a				lsr 	a
.1330	c6 2a		dec $2a				dec 	temp0
.1332	10 fb		bpl $132f			bpl 	_AG2Shift
.1334	90 09		bcc $133f			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.1336	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.1339	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.133c	4c ed 12	jmp $12ed			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.133f					_AG2Fail:
.133f	18		clc				clc
.1340	60		rts				rts
.1341					AssembleGroup3:
.1341	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.1344	4a		lsr a				lsr 	a
.1345	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.1347	90 21		bcc $136a			bcc 	_AG3Default
.1349	38		sec				sec	 								; calculate branch offset
.134a	a5 98		lda $98				lda		esInt0
.134c	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.134f	aa		tax				tax
.1350	a5 a0		lda $a0				lda		esInt1
.1352	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.1355	85 a0		sta $a0				sta 	esInt1
.1357	8a		txa				txa 								; add 126, now 128 too many.
.1358	18		clc				clc 								; we can use this to check the range
.1359	69 7e		adc #$7e			adc 	#126
.135b	85 98		sta $98				sta 	esInt0
.135d	90 02		bcc $1361			bcc 	_AG3NoCarry
.135f	e6 a0		inc $a0				inc 	esInt1
.1361					_AG3NoCarry:
.1361	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.1363	d0 0b		bne $1370			bne 	_AG3Range
.1365	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.1367	38		sec				sec
.1368	e9 80		sbc #$80			sbc 	#128
.136a					_AG3Default:
.136a	85 98		sta $98				sta 	esInt0
.136c					_AG3ExitOk:
.136c	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.136e	d0 07		bne $1377			bne 	AG4Write
.1370					_AG3Range:
.1370	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.1372	20 27 15	jsr $1527		jsr	errorHandler
.1375					AssembleGroup4:
.1375	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1377					AG4Write:
.1377	ad f7 0a	lda $0af7			lda 	asmBaseOpcode				; the opcode is the opcode base.
.137a	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.137d	38		sec				sec
.137e	60		rts				rts
.137f					AssembleSpecialCase:
.137f	a2 00		ldx #$00			ldx 	#0
.1381					_ASCScan:
.1381	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.1384	cd f5 0a	cmp $0af5			cmp 	asmToken
.1387	d0 08		bne $1391			bne 	_ASCNext
.1389	bd 53 12	lda $1253,x			lda 	AssemblerSpecialCases+1,x
.138c	cd f6 0a	cmp $0af6			cmp 	asmMode
.138f	f0 0a		beq $139b			beq 	_ASCFound
.1391					_ASCNext:
.1391	e8		inx				inx									; next entry
.1392	e8		inx				inx
.1393	e8		inx				inx
.1394	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; until table ends
.1397	d0 e8		bne $1381			bne 	_ASCScan
.1399	18		clc				clc
.139a	60		rts				rts
.139b					_ASCFound:
.139b	bd 54 12	lda $1254,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.139e	48		pha				pha
.139f	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.13a2	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13a5	aa		tax				tax
.13a6	68		pla				pla 								; opcode back
.13a7	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13aa	38		sec				sec
.13ab	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13ac					assemblerHandler:
.13ac	7c af 13	jmp ($13af,x)			jmp 	(assemblerVectors,x)
.13af					assemblerVectors:
>13af	b5 13					.word _DummyControlHandler ; index 0
>13b1	9f 11					.word AssembleOneInstruction ; index 2
>13b3	71 12					.word AssembleLabel        ; index 4
.13b5					_DummyControlHandler:
.13b5	60		rts			rts

;******  Return to file: basic.asm

.13b6					section_end_assembler:
.13b6					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13b6					X16SyncBreak:
.13b6	5a		phy				phy
.13b7	20 de ff	jsr $ffde			jsr 	$FFDE
.13ba	ac e8 0b	ldy $0be8			ldy 	nextSyncTick 				; if NST = 0 then always sync
.13bd	a8		tay				tay 								; save tick in Y
.13be	38		sec				sec
.13bf	ed e8 0b	sbc $0be8			sbc 	nextSyncTick 				; calculate timer - next tick
.13c2	30 0c		bmi $13d0			bmi 	_X16NoSync 					; if -ve then no sync.
.13c4					_X16Sync:
.13c4	98		tya				tya 								; get current time back
.13c5	18		clc				clc 								; work out time of next tick.
.13c6	69 06		adc #$06			adc 	#6 							; at 60Hz that is six ticks.
.13c8	8d e8 0b	sta $0be8			sta 	nextSyncTick
.13cb	a9 fd		lda #$fd			lda 	#$FD 						; call the extension update code.
.13cd	20 74 18	jsr $1874		jsr	extensionHandler
.13d0					_X16NoSync:
.13d0	7a		ply				ply
.13d1	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13d4	f0 01		beq $13d7			beq 	_IsBreak
.13d6	60		rts				rts
.13d7					_IsBreak:
.13d7	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13d9	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13dc					ExternSave:
.13dc	5a		phy				phy
.13dd	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.13e0	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13e3	a9 01		lda #$01			lda 	#1
.13e5	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13e7	a0 00		ldy #$00			ldy 	#0
.13e9	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13ec	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13ee	85 2a		sta $2a				sta 	temp0
.13f0	a5 a1		lda $a1				lda 	esInt1+1
.13f2	85 2b		sta $2b				sta 	temp0+1
.13f4	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13f6	a4 a2		ldy $a2				ldy 	esInt1+2
.13f8	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13fa	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13fd	b0 02		bcs $1401			bcs 	_ESSave
.13ff	7a		ply				ply
.1400	60		rts				rts
.1401					_ESSave:
.1401	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.1403	20 27 15	jsr $1527		jsr	errorHandler
.1406					ExternLoad:
.1406	5a		phy				phy
.1407	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.140a	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.140d	a9 01		lda #$01			lda 	#1
.140f	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1411	a0 00		ldy #$00			ldy 	#0
.1413	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1416	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1418	a4 a1		ldy $a1				ldy 	esInt1+1
.141a	a9 00		lda #$00			lda 	#0 							; load command
.141c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.141f	b0 02		bcs $1423			bcs 	_ESLoad
.1421	7a		ply				ply
.1422	60		rts				rts
.1423					_ESLoad:
.1423	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1425	20 27 15	jsr $1527		jsr	errorHandler
.1428					ExternGetLength:
.1428	a5 98		lda $98				lda 	esInt0 						; length into A.
.142a	85 2a		sta $2a				sta 	temp0
.142c	a5 a0		lda $a0				lda 	esInt1
.142e	85 2b		sta $2b				sta 	temp0+1
.1430	a0 00		ldy #$00			ldy 	#0
.1432	b1 2a		lda ($2a),y			lda 	(temp0),y
.1434	a6 98		ldx $98				ldx 	esInt0 						; name string address into YX
.1436	a4 a0		ldy $a0				ldy 	esInt1
.1438	e8		inx				inx 								; advance over the length byte.
.1439	d0 01		bne $143c			bne 	_ESNoCarry
.143b	c8		iny				iny
.143c					_ESNoCarry:
.143c	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af8					bufferCount:
>0af8							.fill 	0
.0af8					bufferStorage:
>0af8							.fill 	MaxLineInputSize
.0be8					nextSyncTick:
>0be8							.fill 	0
.143d					IOControlHandler:
.143d	c9 00		cmp #$00			cmp 	#0
.143f	d0 15		bne $1456			bne		_CHExit
.1441	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1443	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1446	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1448	20 99 14	jsr $1499			jsr 	IOInk
.144b	a9 00		lda #$00			lda 	#0
.144d	8d e8 0b	sta $0be8			sta 	nextSyncTick
.1450	20 ad 14	jsr $14ad			jsr 	IOPaper
.1453	20 57 14	jsr $1457			jsr 	IOClearScreen
.1456					_CHExit:
.1456	60		rts				rts
.1457					IOClearScreen:
.1457	48		pha				pha
.1458	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.145a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.145d	68		pla				pla
.145e	60		rts				rts
.145f					IONewLine:
.145f	48		pha				pha
.1460	a9 0d		lda #$0d			lda 	#13
.1462	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1465	68		pla				pla
.1466	60		rts				rts
.1467					IOTab:
.1467	48		pha				pha
.1468	a9 20		lda #$20			lda 	#32
.146a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.146d	68		pla				pla
.146e	60		rts				rts
.146f					IOPrintAscii:
.146f					IOPrintChar:
.146f	aa		tax				tax 								; save in X so we can save Y
.1470	5a		phy				phy
.1471	8a		txa				txa
.1472	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1474	d0 02		bne $1478			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1476	a9 14		lda #$14			lda 	#$14
.1478					_IOPCNotBS:
.1478	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.147b	7a		ply				ply
.147c	60		rts				rts
.147d					IOInkey:
.147d	5a		phy				phy
.147e	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1481	85 32		sta $32				sta 	tempShort
.1483	7a		ply				ply
.1484	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1486	f0 10		beq $1498			beq 	_IOIExit
.1488	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.148a	f0 0c		beq $1498			beq 	_IOIExit
.148c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.148e	f0 06		beq $1496			beq 	_IOIBackspace
.1490	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1492	90 e9		bcc $147d			bcc 	IOInkey
.1494	b0 02		bcs $1498			bcs 	_IOIExit
.1496					_IOIBackspace:
.1496	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1498					_IOIExit:
.1498	60		rts				rts
.1499					IOInk:
.1499	48		pha				pha
.149a	29 07		and #$07			and 	#7 							; 8 primaries
.149c	aa		tax				tax
.149d	bd a5 14	lda $14a5,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.14a0	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14a3	68		pla				pla
.14a4	60		rts				rts
.14a5					_IOColourTable:
>14a5	90						.byte 	$90 					; 0 Black
>14a6	96						.byte 	$96 					; 1 Red
>14a7	1e						.byte 	$1E 					; 2 Green
>14a8	9e						.byte 	$9E 					; 3 Yellow
>14a9	9a						.byte 	$9A 					; 4 Blue
>14aa	9c						.byte 	$9C 					; 5 Magenta
>14ab	9f						.byte 	$9F 					; 6 Cyan
>14ac	05						.byte 	$05 					; 7 White
.14ad					IOPaper:
.14ad	48		pha				pha
.14ae	48		pha				pha
.14af	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14b1	20 6f 14	jsr $146f			jsr 	IOPrintChar 			; and then swap them again.
.14b4	68		pla				pla
.14b5	20 99 14	jsr $1499			jsr 	IOInk
.14b8	a9 01		lda #$01			lda 	#1
.14ba	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14bd	68		pla				pla
.14be	60		rts				rts
.14bf					IOLocate:
.14bf	48		pha				pha
.14c0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14c2	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14c5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14c7	20 cd 14	jsr $14cd			jsr 	_IOLoc2
.14ca	7a		ply				ply
.14cb	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14cd					_IOLoc2:
.14cd	c0 00		cpy #$00			cpy 	#0
.14cf	f0 06		beq $14d7			beq 	_IOLocExit
.14d1	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14d4	88		dey				dey
.14d5	d0 f6		bne $14cd			bne 	_IOLoc2
.14d7					_IOLocExit:
.14d7	60		rts				rts
.14d8					IOInput:
.14d8	a9 00		lda #$00			lda 	#0
.14da	8d f8 0a	sta $0af8			sta 	bufferCount
.14dd					_IOILoop:
.14dd	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14e0	c9 0d		cmp #$0d			cmp 	#13
.14e2	f0 10		beq $14f4			beq 	_IOIExit
.14e4	ae f8 0a	ldx $0af8			ldx 	bufferCount
.14e7	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14e9	f0 f2		beq $14dd			beq 	_IOILoop
.14eb	ee f8 0a	inc $0af8			inc 	bufferCount
.14ee	9d f9 0a	sta $0af9,x			sta 	bufferStorage+1,x
.14f1	4c dd 14	jmp $14dd			jmp 	_IOILoop
.14f4					_IOIExit:
.14f4	a9 f8		lda #$f8			lda 	#(bufferCount) & $FF
.14f6	85 2a		sta $2a				sta 	temp0
.14f8	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14fa	85 2b		sta $2b				sta 	1+(temp0)
.14fc	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14fd					IOReadTimer:
.14fd	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.1500	48		pha				pha
.1501	8a		txa				txa
.1502	a8		tay				tay
.1503	68		pla				pla
.1504	60		rts				rts

;******  Return to file: device/device.asm

.1505					deviceHandler:
.1505	7c 08 15	jmp ($1508,x)			jmp 	(deviceVectors,x)
.1508					deviceVectors:
>1508	3d 14					.word IOControlHandler     ; index 0
>150a	57 14					.word IOClearScreen        ; index 2
>150c	5f 14					.word IONewLine            ; index 4
>150e	99 14					.word IOInk                ; index 6
>1510	7d 14					.word IOInkey              ; index 8
>1512	d8 14					.word IOInput              ; index 10
>1514	06 14					.word ExternLoad           ; index 12
>1516	bf 14					.word IOLocate             ; index 14
>1518	ad 14					.word IOPaper              ; index 16
>151a	6f 14					.word IOPrintChar          ; index 18
>151c	6f 14					.word IOPrintAscii         ; index 20
>151e	dc 13					.word ExternSave           ; index 22
>1520	b6 13					.word X16SyncBreak         ; index 24
>1522	67 14					.word IOTab                ; index 26
>1524	fd 14					.word IOReadTimer          ; index 28
.1526					_DummyControlHandler:
.1526	60		rts			rts

;******  Return to file: basic.asm

.1527					section_end_device:
.1527					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1527					ErrorHandler:
.1527	da		phx				phx
.1528	a9 01		lda #$01			lda 	#1 							; red
.152a	a2 06		ldx #$06		ldx	#6
.152c	20 05 15	jsr $1505		jsr	deviceHandler
.152f	fa		plx				plx
.1530	a9 9b		lda #$9b			lda 	#(ErrorTextList) & $FF
.1532	85 2a		sta $2a				sta 	temp0
.1534	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1536	85 2b		sta $2b				sta 	1+(temp0)
.1538	ca		dex		_EHFind:dex									; errors start at 1
.1539	f0 10		beq $154b			beq 	_EHFound
.153b	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.153d	38		sec				sec
.153e	a5 2a		lda $2a				lda 	temp0
.1540	71 2a		adc ($2a),y			adc 	(temp0),y
.1542	85 2a		sta $2a				sta 	temp0
.1544	90 f2		bcc $1538			bcc 	_EHFind
.1546	e6 2b		inc $2b				inc 	temp0+1
.1548	4c 38 15	jmp $1538			jmp 	_EHFind
.154b					_EHFound:
.154b	20 5f 18	jsr $185f			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.154e	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1550	b1 28		lda ($28),y			lda 	(codePtr),y
.1552	f0 39		beq $158d			beq 	_EHNoLine
.1554	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1556	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1559	90 32		bcc $158d			bcc 	_EHNoLine
.155b	a9 97		lda #$97			lda 	#(EHAtMsg) & $FF
.155d	85 2a		sta $2a				sta 	temp0
.155f	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1561	85 2b		sta $2b				sta 	1+(temp0)
.1563	20 5f 18	jsr $185f			jsr 	EHPrintAscii
.1566	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1568	a2 00		ldx #$00			ldx 	#0
.156a	b1 28		lda ($28),y			lda 	(codePtr),y
.156c	95 98		sta $98,x			sta 	esInt0,x
.156e	c8		iny				iny
.156f	b1 28		lda ($28),y			lda 	(codePtr),y
.1571	95 a0		sta $a0,x			sta 	esInt1,x
.1573	a9 00		lda #$00			lda 	#0
.1575	95 a8		sta $a8,x			sta 	esInt2,x
.1577	95 b0		sta $b0,x			sta 	esInt3,x
.1579	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.157b	85 2a		sta $2a				sta 	temp0
.157d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.157f	85 2b		sta $2b				sta 	1+(temp0)
.1581	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1583	a9 00		lda #$00			lda 	#0							; stack position zero.
.1585	a2 12		ldx #$12		ldx	#18
.1587	20 6d 3f	jsr $3f6d		jsr	mainHandler
.158a	20 5f 18	jsr $185f			jsr 	EHPrintAscii
.158d					_EHNoLine:
.158d	a2 04		ldx #$04		ldx	#4
.158f	20 05 15	jsr $1505		jsr	deviceHandler
.1592	a2 04		ldx #$04		ldx	#4
.1594	20 0e 29	jsr $290e		jsr	interactionHandler
.1597					EHAtMsg:
>1597	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.159b					ErrorTextList:
>159b	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>15a3	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15af	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15b7	45 72 72 6f 72
>15bc	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15c4	64 69 73 61 62 6c 65 64
>15cc	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15d4	6f 6e 20 66 61 69 6c 65 64
>15dd	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15e5	42 79 20 5a 65 72 6f
>15ec	04 53 74 6f 70				.text 4,"Stop"
>15f1	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15f9	73 6d 61 74 63 68
>15ff	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1607	20 56 61 6c 75 65
>160d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1615	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1623	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>162b	20 63 6f 6d 6d 61
>1631	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1639	20 72 65 66 65 72 65 6e 63 65
>1643	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>164b	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1659	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1661	74 6f 6f 20 6c 6f 6e 67
>1669	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1671	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>167e	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1686	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1693	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>169b	74 68 6f 75 74 20 46 4f 52
>16a4	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>16ac	74 68 6f 75 74 20 57 48 49 4c 45
>16b7	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16bf	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16cc	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16d4	54 20 69 6e 64 65 78
>16db	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16e3	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16f3	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16fb	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>170a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1712	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1722	63 65
>1724	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>172c	20 50 72 6f 63 65 64 75 72 65
>1736	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>173e	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>174e	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1756	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1764	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>176c	75 69 72 65 73 20 61 72 72 61 79
>1777	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>177f	61 79 20 69 6e 64 65 78
>1787	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>178f	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>179f	6e 64 69 63 65 73
>17a5	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17ad	64 61 74 61
>17b1	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17b9	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17c6	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17ce	69 6c 65 64
>17d2	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17da	69 6c 65 64
>17de	05 42 72 65 61 6b			.text 5,"Break"
>17e4	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17ec	6d 65 6d 6f 72 79
>17f2	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17fa	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>1809	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1811	72 61 6e 64 2f 4d 6f 64 65
>181a	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1822	6f 75 74 20 6f 66 20 72 61 6e 67 65
>182e	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1836	68 61 6e 67 65 64 20 76 61 6c 75 65
>1842	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>184a	74 65 20 53 65 6c 65 63 74 65 64
>1855	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>185d	65
>185e	00					.byte 0

;******  Return to file: error/errorhandler.asm

.185f					EHPrintAscii:
.185f	a0 00		ldy #$00			ldy 	#0
.1861	b1 2a		lda ($2a),y			lda 	(temp0),y
.1863	aa		tax				tax
.1864	f0 0d		beq $1873			beq 	_EHPExit
.1866					_EHPLoop:
.1866	c8		iny				iny
.1867	da		phx				phx
.1868	b1 2a		lda ($2a),y			lda 	(temp0),y
.186a	a2 14		ldx #$14		ldx	#20
.186c	20 05 15	jsr $1505		jsr	deviceHandler
.186f	fa		plx				plx
.1870	ca		dex				dex
.1871	d0 f3		bne $1866			bne 	_EHPLoop
.1873					_EHPExit:
.1873	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1874					section_end_error:
.1874					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1874					ExtensionHandler:
.1874	c9 fd		cmp #$fd			cmp 	#$FD 						; check for sync
.1876	f0 1d		beq $1895			beq 	_ExtensionSync
.1878	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.187a	f0 16		beq $1892			beq 	_ExtensionForce
.187c	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.187e	d0 08		bne $1888			bne 	_ExtensionUnary 			; is passed in A.
.1880	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1882	c8		iny				iny
.1883	0a		asl a				asl 	a
.1884	aa		tax				tax
.1885	7c 8c 18	jmp ($188c,x)			jmp 	(Group2Vectors-12,x)
.1888					_ExtensionUnary:
.1888	48		pha				pha 								; save stack pos in A
.1889	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.188b	c8		iny				iny
.188c	0a		asl a				asl 	a
.188d	aa		tax				tax
.188e	68		pla				pla 								; restore stack pos and call group3 command.
.188f	7c a8 18	jmp ($18a8,x)			jmp 	(Group3Vectors-12,x)
.1892					_ExtensionForce:
.1892	4c e8 23	jmp $23e8			jmp 	ForceMode0
.1895					_ExtensionSync:
.1895	4c 42 20	jmp $2042			jmp 	SoundInterrupt

;******  Processing file: extension/../generated/tokenvectors2.inc

.1898					Group2Vectors:
>1898	c0 25					.word	Command_VPoke            ; $86 vpoke
>189a	c3 25					.word	Command_VDoke            ; $87 vdoke
>189c	98 25					.word	Command_VLoad            ; $88 vload
>189e	fa 23					.word	CommandMode              ; $89 mode
>18a0	b8 24					.word	CommandPalette           ; $8a palette
>18a2	27 21					.word	CommandSprite            ; $8b sprite
>18a4	ea 1d					.word	CommandClg               ; $8c clg
>18a6	ec 1a					.word	Command_Rect             ; $8d rect
>18a8	f4 1a					.word	Command_Frame            ; $8e frame
>18aa	ef 24					.word	Command_Draw             ; $8f draw
>18ac	d9 1a					.word	Command_Plot             ; $90 plot
>18ae	b3 19					.word	Command_Line             ; $91 line
>18b0	72 22					.word	Command_Paint            ; $92 paint
>18b2	0a 1f					.word	CommandSound             ; $93 sound

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18b4					Group3Vectors:
>18b4	0c 26					.word	Command_VPeek            ; $86 vpeek(
>18b6	0f 26					.word	Command_VDeek            ; $87 vdeek(
>18b8	ba 23					.word	Sprite_GetX              ; $88 sprite.x(
>18ba	bd 23					.word	Sprite_GetY              ; $89 sprite.y(
>18bc	6f 20					.word	FunctionCollide          ; $8a hit(
>18be	89 1e					.word	Unary_JoyX               ; $8b joy.x(
>18c0	8c 1e					.word	Unary_JoyY               ; $8c joy.y(
>18c2	c5 1e					.word	Unary_JButton            ; $8d joy.b(
>18c4	5e 1e					.word	Unary_Clock              ; $8e clock(
>18c6	03 20					.word	Unary_Playing            ; $8f playing(

;******  Return to file: extension/extensionhandler.asm

.18c8					XEvaluateInteger:
.18c8	8a		txa				txa
.18c9	a2 0a		ldx #$0a		ldx	#10
.18cb	20 6d 3f	jsr $3f6d		jsr	mainHandler
.18ce	aa		tax				tax
.18cf	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be8					gStartStorage:
.0be8					gCurrentXPos:
>0be8							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0bea					gCurrentYPos:
>0bea							.fill 	2
.0bec					gX1:
>0bec							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bee					gY1:
>0bee							.fill 	2
.0bf0					gX2:
>0bf0							.fill 	2
.0bf2					gY2:
>0bf2							.fill 	2
.0bf4					gError:
>0bf4							.fill 	2
.0bf6					g2Error:
>0bf6							.fill 	2
.0bf8					gdx:
>0bf8							.fill 	2
.0bfa					gdy:
>0bfa							.fill 	2
.0bfc					gWordHandler:
>0bfc							.fill 	2
.0bfe					gModifiers:
.0bfe					gdInk:
>0bfe							.fill 	1
.0bff					gdPaper:
>0bff							.fill 	1
.0c00					gdSize:
>0c00							.fill 	1
.0c01					gdImage:
>0c01							.fill 	1
.0c02					gdFlip:
>0c02							.fill 	1
.0c03					gEndStorage:
.0c03					gdXLimit:
>0c03							.fill 	2
.0c05					gdYLimit:
>0c05							.fill 	2
.0c07					gdText:
>0c07							.fill 	2
.18d0					GResetStorage:
.18d0	da		phx				phx
.18d1	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18d3	a9 00		lda #$00			lda 	#0
.18d5					_GRSLoop:
.18d5	9d e8 0b	sta $0be8,x			sta 	gStartStorage,x
.18d8	ca		dex				dex
.18d9	10 fa		bpl $18d5			bpl 	_GRSLoop
.18db	a9 01		lda #$01			lda 	#1
.18dd	8d fe 0b	sta $0bfe			sta 	gdInk
.18e0	8d 00 0c	sta $0c00			sta 	gdSize
.18e3	fa		plx				plx
.18e4	60		rts				rts
.18e5					GHandler:
.18e5	8e fd 0b	stx $0bfd			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18e8	8d fc 0b	sta $0bfc			sta 	gWordHandler
.18eb	a9 00		lda #$00			lda 	#0							; default no text.
.18ed	8d 08 0c	sta $0c08			sta 	gdText+1
.18f0	88		dey				dey 								; predecrement
.18f1					_GHLoopNext:
.18f1	c8		iny				iny									; advance one character
.18f2					_GHLoop:
.18f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18f4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18f6	f0 f9		beq $18f1			beq 	_GHLoopNext
.18f8	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18fa	f0 4c		beq $1948			beq 	_GHExit
.18fc	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18fe	f0 48		beq $1948			beq 	_GHExit
.1900	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.1902	f0 35		beq $1939			beq 	_GHCallHandler 				; update post & call the handler
.1904	c9 ce		cmp #$ce			cmp 	#TKW_TO
.1906	f0 31		beq $1939			beq 	_GHCallHandler
.1908	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.190a	f0 14		beq $1920			beq 	_GHCPairSkip
.190c	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.190e	f0 39		beq $1949			beq 	_GHText
.1910	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.1912					_GHCheckTokens:
.1912	b1 28		lda ($28),y			lda 	(codePtr),y
.1914	dd 5e 19	cmp $195e,x			cmp 	_GHTokenTable,x
.1917	f0 0e		beq $1927			beq 	_GHFoundToken
.1919	e8		inx				inx
.191a	bd 5e 19	lda $195e,x			lda 	_GHTokenTable,x
.191d	d0 f3		bne $1912			bne 	_GHCheckTokens
.191f	88		dey				dey
.1920					_GHCPairSkip:
.1920	c8		iny				iny
.1921					_GHCPair:
.1921	20 64 19	jsr $1964			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1924	4c f2 18	jmp $18f2			jmp 	_GHLoop
.1927					_GHFoundToken:
.1927	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1928	da		phx				phx
.1929	a9 00		lda #$00			lda 	#0 							; evaluate byte
.192b	a2 0c		ldx #$0c		ldx	#12
.192d	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1930	fa		plx				plx
.1931	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1933	9d fe 0b	sta $0bfe,x			sta 	gModifiers,x 				; update the modifiers
.1936	4c f2 18	jmp $18f2			jmp 	_GHLoop 					; and loop back
.1939					_GHCallHandler:
.1939	c8		iny				iny 								; consume AT or TO.
.193a	20 64 19	jsr $1964			jsr 	GHMakeCurrent 				; update the coordinates.
.193d	5a		phy				phy
.193e	20 45 19	jsr $1945			jsr 	_GHCallHandlerCode 			; call the handler code
.1941	7a		ply				ply
.1942	4c f2 18	jmp $18f2			jmp 	_GHLoop 					; and loop round.
.1945					_GHCallHandlerCode:
.1945	6c fc 0b	jmp ($0bfc)			jmp 	(gWordHandler)
.1948					_GHExit:
.1948	60		rts				rts
.1949					_GHText:
.1949	c8		iny				iny 								; skip token
.194a	a9 00		lda #$00			lda 	#0 							; get string.
.194c	a2 0e		ldx #$0e		ldx	#14
.194e	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1951	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.1953	8d 07 0c	sta $0c07			sta 	gdText
.1956	a5 a0		lda $a0				lda 	esInt1
.1958	8d 08 0c	sta $0c08			sta 	gdText+1
.195b	4c f2 18	jmp $18f2			jmp 	_GHLoop
.195e					_GHTokenTable:
>195e	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1963	00						.byte 	0
.1964					GHMakeCurrent:
.1964	da		phx				phx
.1965	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1967	20 76 19	jsr $1976			jsr 	_GHMCDoIt
.196a	a2 02		ldx #$02		ldx	#2
.196c	20 6d 3f	jsr $3f6d		jsr	mainHandler
.196f	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1971	20 76 19	jsr $1976			jsr 	_GHMCDoIt
.1974	fa		plx				plx
.1975	60		rts				rts
.1976					_GHMCDoIt:
.1976	bd e8 0b	lda $0be8,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1979	9d ec 0b	sta $0bec,x			sta 	gX1,x
.197c	bd e9 0b	lda $0be9,x			lda 	gCurrentXPos+1,x
.197f	9d ed 0b	sta $0bed,x			sta 	gX1+1,x
.1982	da		phx				phx
.1983	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1985	a2 0a		ldx #$0a		ldx	#10
.1987	20 6d 3f	jsr $3f6d		jsr	mainHandler
.198a	fa		plx				plx
.198b	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.198d	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1990	a5 a0		lda $a0				lda 	esInt1
.1992	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1995	b0 17		bcs $19ae			bcs 	_GMHCRange
.1997	a5 a8		lda $a8				lda 	esInt2
.1999	05 b0		ora $b0				ora 	esInt3
.199b	d0 11		bne $19ae			bne 	_GMHCRange
.199d	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.199f	9d e8 0b	sta $0be8,x			sta 	gCurrentXPos,x
.19a2	9d f0 0b	sta $0bf0,x			sta 	gX2,x
.19a5	a5 a0		lda $a0				lda 	esInt1
.19a7	9d e9 0b	sta $0be9,x			sta 	gCurrentXPos+1,x
.19aa	9d f1 0b	sta $0bf1,x			sta 	gX2+1,x
.19ad	60		rts				rts
.19ae					_GMHCRange:
.19ae	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19b0	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c09					gdySign:
>0c09							.fill 	1
.19b3					Command_Line:
.19b3	a9 bb		lda #$bb			lda 	#LineHandler & $FF
.19b5	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.19b7	20 e5 18	jsr $18e5			jsr 	GHandler
.19ba	60		rts				rts
.19bb					LineHandler:
.19bb	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19bd	a0 04		ldy #$04			ldy 	#gX2-gX1
.19bf	20 99 1c	jsr $1c99			jsr 	CompareCoordsEq
.19c2	f0 09		beq $19cd			beq 	_LHRectCode
.19c4	a2 02		ldx #$02			ldx 	#gY1-gX1
.19c6	a0 06		ldy #$06			ldy 	#gY2-gX1
.19c8	20 99 1c	jsr $1c99			jsr 	CompareCoordsEq
.19cb	d0 03		bne $19d0			bne 	_LHLineDrawer
.19cd					_LHRectCode:
.19cd	4c 00 1b	jmp $1b00			jmp 	RectHandler
.19d0					_LHLineDrawer:
.19d0	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19d2	a0 04		ldy #$04			ldy 	#gX2-gX1
.19d4	20 84 1c	jsr $1c84			jsr 	CompareCoords
.19d7	90 0a		bcc $19e3			bcc 	_LHNoSwap
.19d9	20 cc 1c	jsr $1ccc			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19dc	a2 02		ldx #$02			ldx 	#gY1-gX1
.19de	a0 06		ldy #$06			ldy 	#gY2-gX1
.19e0	20 cc 1c	jsr $1ccc			jsr 	GSwapCoords
.19e3					_LHNoSwap:
.19e3	20 0c 1a	jsr $1a0c			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19e6	a0 00		ldy #$00			ldy 	#gX1-gX1
.19e8	20 6e 1c	jsr $1c6e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19eb	b0 15		bcs $1a02			bcs 	_LHExit 					; line off screen.
.19ed					_LHDrawLoop:
.19ed	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19ef	a0 04		ldy #$04			ldy 	#gX2-gX1
.19f1	20 99 1c	jsr $1c99			jsr 	CompareCoordsEq
.19f4	d0 0d		bne $1a03			bne 	_LHNextPixel
.19f6	a2 06		ldx #$06			ldx 	#gY2-gX1
.19f8	a0 06		ldy #$06			ldy 	#gY2-gX1
.19fa	20 99 1c	jsr $1c99			jsr 	CompareCoordsEq
.19fd	d0 04		bne $1a03			bne 	_LHNextPixel
.19ff	20 88 1d	jsr $1d88			jsr 	gdPlotInk 					; plot the last pixel.
.1a02					_LHExit:
.1a02	60		rts				rts
.1a03					_LHNextPixel:
.1a03	20 88 1d	jsr $1d88			jsr 	gdPlotInk 					; plot the pixel.
.1a06	20 60 1a	jsr $1a60			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.1a09	4c ed 19	jmp $19ed			jmp  	_LHDrawLoop 				; and loop back if okay
.1a0c					BresenhamInitialise:
.1a0c	38		sec				sec
.1a0d	ad f0 0b	lda $0bf0			lda 	gX2
.1a10	ed ec 0b	sbc $0bec			sbc 	gX1
.1a13	8d f8 0b	sta $0bf8			sta 	gdX
.1a16	ad f1 0b	lda $0bf1			lda 	gX2+1
.1a19	ed ed 0b	sbc $0bed			sbc 	gX1+1
.1a1c	8d f9 0b	sta $0bf9			sta 	gdX+1
.1a1f	38		sec				sec
.1a20	ad ee 0b	lda $0bee			lda 	gY1
.1a23	ed f2 0b	sbc $0bf2			sbc 	gY2
.1a26	8d fa 0b	sta $0bfa			sta 	gdy
.1a29	ad ef 0b	lda $0bef			lda 	gY1+1
.1a2c	ed f3 0b	sbc $0bf3			sbc 	gY2+1
.1a2f	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a32	ad fb 0b	lda $0bfb			lda 	gdy+1 						; save sign of dy
.1a35	8d 09 0c	sta $0c09			sta 	gdysign
.1a38	30 12		bmi $1a4c			bmi 	_BINormal
.1a3a	38		sec				sec
.1a3b	a9 00		lda #$00			lda 	#0
.1a3d	ed fa 0b	sbc $0bfa			sbc 	gdy
.1a40	8d fa 0b	sta $0bfa			sta 	gdy
.1a43	a9 00		lda #$00			lda 	#0
.1a45	ed fb 0b	sbc $0bfb			sbc 	gdy+1
.1a48	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a4b	60		rts				rts
.1a4c					_BINormal:
.1a4c	18		clc				clc
.1a4d	ad f8 0b	lda $0bf8			lda 	gdx
.1a50	6d fa 0b	adc $0bfa			adc 	gdy
.1a53	8d f4 0b	sta $0bf4			sta 	gError
.1a56	ad f9 0b	lda $0bf9			lda 	gdx+1
.1a59	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a5c	8d f5 0b	sta $0bf5			sta 	gError+1
.1a5f	60		rts				rts
.1a60					BresenhamIteration:
.1a60	ad f4 0b	lda $0bf4			lda 	gError
.1a63	0a		asl a				asl 	a
.1a64	8d f6 0b	sta $0bf6			sta 	g2Error
.1a67	ad f5 0b	lda $0bf5			lda 	gError+1
.1a6a	2a		rol a				rol 	a
.1a6b	8d f7 0b	sta $0bf7			sta 	g2Error+1
.1a6e	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a70	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a72	20 91 1c	jsr $1c91			jsr 	CompareCoordsSigned
.1a75	30 03		bmi $1a7a			bmi 	_BINoE2DY
.1a77	20 87 1a	jsr $1a87			jsr 	BresenhamE2GEDY
.1a7a					_BINoE2DY:
.1a7a	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a7c	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a7e	20 91 1c	jsr $1c91			jsr 	CompareCoordsSigned
.1a81	30 03		bmi $1a86			bmi 	_BINoDXE2
.1a83	20 a6 1a	jsr $1aa6			jsr 	BresenhamDXGEE2
.1a86					_BINoDXE2:
.1a86	60		rts				rts
.1a87					BresenhamE2GEDY:
.1a87	18		clc				clc
.1a88	ad f4 0b	lda $0bf4			lda 	gError
.1a8b	6d fa 0b	adc $0bfa			adc 	gdy
.1a8e	8d f4 0b	sta $0bf4			sta 	gError
.1a91	ad f5 0b	lda $0bf5			lda 	gError+1
.1a94	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a97	8d f5 0b	sta $0bf5			sta 	gError+1
.1a9a	ee ec 0b	inc $0bec			inc 	gX1
.1a9d	d0 03		bne $1aa2			bne 	_BE2Skip
.1a9f	ee ed 0b	inc $0bed			inc 	gX1+1
.1aa2					_BE2Skip:
.1aa2	20 e9 1c	jsr $1ce9			jsr 	gdMvRight
.1aa5	60		rts				rts
.1aa6					BresenhamDXGEE2:
.1aa6	18		clc				clc
.1aa7	ad f4 0b	lda $0bf4			lda 	gError
.1aaa	6d f8 0b	adc $0bf8			adc 	gdx
.1aad	8d f4 0b	sta $0bf4			sta 	gError
.1ab0	ad f5 0b	lda $0bf5			lda 	gError+1
.1ab3	6d f9 0b	adc $0bf9			adc 	gdx+1
.1ab6	8d f5 0b	sta $0bf5			sta 	gError+1
.1ab9	ad 09 0c	lda $0c09			lda 	gdySign
.1abc	10 0c		bpl $1aca			bpl 	_BEDXInvertY
.1abe	ee ee 0b	inc $0bee			inc 	gY1
.1ac1	d0 03		bne $1ac6			bne 	_BEDXSkip
.1ac3	ee ef 0b	inc $0bef			inc 	gY1+1
.1ac6					_BEDXSkip:
.1ac6	20 24 1d	jsr $1d24			jsr 	gdMvDown
.1ac9	60		rts				rts
.1aca					_BEDXInvertY:
.1aca	ad ee 0b	lda $0bee			lda 	gY1
.1acd	d0 03		bne $1ad2			bne 	_BEDXSkip2
.1acf	ce ef 0b	dec $0bef			dec 	gY1+1
.1ad2					_BEDXSkip2:
.1ad2	ce ee 0b	dec $0bee			dec 	gY1
.1ad5	20 ff 1c	jsr $1cff			jsr 	gdMvUp
.1ad8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1ad9					Command_Plot:
.1ad9	a9 e1		lda #$e1			lda 	#PlotHandler & $FF
.1adb	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1add	20 e5 18	jsr $18e5			jsr 	GHandler
.1ae0	60		rts				rts
.1ae1					PlotHandler:
.1ae1	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ae3	20 6e 1c	jsr $1c6e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1ae6	b0 03		bcs $1aeb			bcs 	_PHExit 					; off screen, return with CS.
.1ae8	20 88 1d	jsr $1d88			jsr 	gdPlotInk 					; pixel in Ink.
.1aeb	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c0a					frameFlag:
>0c0a							.fill 	1
.1aec					Command_Rect:
.1aec	a9 00		lda #$00			lda 	#RectHandler & $FF
.1aee	a2 1b		ldx #$1b			ldx 	#RectHandler >> 8
.1af0	20 e5 18	jsr $18e5			jsr 	GHandler
.1af3	60		rts				rts
.1af4					Command_Frame:
.1af4	a9 fc		lda #$fc			lda 	#FrameHandler & $FF
.1af6	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1af8	20 e5 18	jsr $18e5			jsr 	GHandler
.1afb	60		rts				rts
.1afc					FrameHandler:
.1afc	a9 01		lda #$01			lda 	#1
.1afe	d0 02		bne $1b02			bne 	RectHandler+2
.1b00					RectHandler:
.1b00	a9 00		lda #$00			lda 	#0
.1b02	8d 0a 0c	sta $0c0a			sta 	frameFlag
.1b05	20 a8 1c	jsr $1ca8			jsr 	BoxSort 					; sort so topleft/bottom right
.1b08	20 31 1b	jsr $1b31			jsr 	DrawBoxPart 				; solid first line
.1b0b					_FHLoop:
.1b0b	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1b0d	a0 06		ldy #$06			ldy 	#gY2-gX1
.1b0f	20 84 1c	jsr $1c84			jsr 	CompareCoords
.1b12	b0 19		bcs $1b2d			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1b14	ad 0a 0c	lda $0c0a			lda 	frameFlag 					; identify solid or frame ?
.1b17	f0 06		beq $1b1f			beq 	_FHIsSolidRect
.1b19	20 4a 1b	jsr $1b4a			jsr 	DrawBoxEnds
.1b1c	4c 22 1b	jmp $1b22			jmp 	_FHNext
.1b1f					_FHIsSolidRect:
.1b1f	20 31 1b	jsr $1b31			jsr 	DrawBoxPart
.1b22					_FHNext:
.1b22	ee ee 0b	inc $0bee			inc 	gY1 						; bump Y1 and loop back.
.1b25	d0 e4		bne $1b0b			bne 	_FHLoop
.1b27	ee ef 0b	inc $0bef			inc 	gY1+1
.1b2a	4c 0b 1b	jmp $1b0b			jmp 	_FHLoop
.1b2d					_FHLastLine:
.1b2d	20 31 1b	jsr $1b31			jsr 	DrawBoxPart 				; solid last line whatever
.1b30					_FHExit:
.1b30	60		rts				rts
.1b31					DrawBoxPart:
.1b31	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b33	20 6e 1c	jsr $1c6e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b36	38		sec				sec 								; calculate line length => temp0
.1b37	ad f0 0b	lda $0bf0			lda 	gX2
.1b3a	ed ec 0b	sbc $0bec			sbc 	gX1
.1b3d	48		pha				pha
.1b3e	ad f1 0b	lda $0bf1			lda 	gX2+1
.1b41	ed ed 0b	sbc $0bed			sbc 	gx1+1
.1b44	aa		tax				tax
.1b45	68		pla				pla 								; line length in XA.
.1b46	20 62 1b	jsr $1b62			jsr 	DrawHorizontalLine
.1b49	60		rts				rts
.1b4a					DrawBoxEnds:
.1b4a	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b4c	20 6e 1c	jsr $1c6e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b4f	20 88 1d	jsr $1d88			jsr 	gdPlotInk 					; LH end.
.1b52	ad f0 0b	lda $0bf0			lda 	gX2 						; set position to X2,Y1
.1b55	ae f1 0b	ldx $0bf1			ldx 	gX2+1
.1b58	20 35 1e	jsr $1e35			jsr 	gdSetX
.1b5b	20 46 1d	jsr $1d46			jsr		gdSetDrawPosition 			; update position.
.1b5e	20 88 1d	jsr $1d88			jsr 	gdPlotInk 					; RH end.
.1b61	60		rts				rts
.1b62					DrawHorizontalLine:
.1b62	86 32		stx $32				stx 	tempShort
.1b64	aa		tax				tax
.1b65	a4 32		ldy $32				ldy 	tempShort
.1b67	ad fe 0b	lda $0bfe			lda 	gdInk
.1b6a	4c 43 1e	jmp $1e43			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c0b					RenderFunction:
>0c0b							.fill 	2
.0c0d					RenderWidth:
>0c0d							.fill 	1
.0c0e					RenderHeight:
>0c0e							.fill 	1
.0c0f					RenderType:
>0c0f							.fill 	1
.0c10					RenderCache:
>0c10							.fill 	64
.1b6d					ImageRenderer:
.1b6d	8e 0c 0c	stx $0c0c			stx 	RenderFunction+1
.1b70	8d 0b 0c	sta $0c0b			sta 	RenderFunction
.1b73	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b75	20 56 1c	jsr $1c56			jsr 	CallRenderFunction
.1b78	8d 0f 0c	sta $0c0f			sta 	RenderType 					; and save it.
.1b7b	8e 0d 0c	stx $0c0d			stx 	RenderWidth
.1b7e	8c 0e 0c	sty $0c0e			sty 	RenderHeight
.1b81	8a		txa				txa 								; check X coordinate
.1b82	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b84	20 1d 1c	jsr $1c1d			jsr 	RenderCheckRange
.1b87	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; check Y coordinate
.1b8a	a2 02		ldx #$02			ldx 	#2
.1b8c	20 1d 1c	jsr $1c1d			jsr 	RenderCheckRange
.1b8f	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b91					_IRLoop1:
.1b91	5a		phy				phy
.1b92	20 f9 1b	jsr $1bf9			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1b95	20 56 1c	jsr $1c56			jsr 	CallRenderFunction 			; fill the rendering cache.
.1b98	7a		ply				ply
.1b99	ae 00 0c	ldx $0c00			ldx 	gdSize 						; number of times to do the row.
.1b9c					_IRLoop2:
.1b9c	20 a9 1b	jsr $1ba9			jsr 	RenderDrawRow 				; draw one row.
.1b9f	ca		dex				dex 								; scale # times.
.1ba0	d0 fa		bne $1b9c			bne 	_IRLoop2
.1ba2	c8		iny				iny 								; next vertical row
.1ba3	cc 0e 0c	cpy $0c0e			cpy 	RenderHeight 				; done the lot ?
.1ba6	d0 e9		bne $1b91			bne 	_IRLoop1
.1ba8	60		rts				rts
.1ba9					RenderDrawRow:
.1ba9	da		phx				phx
.1baa	5a		phy				phy
.1bab	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1bad	20 6e 1c	jsr $1c6e			jsr 	SetupXY
.1bb0	7a		ply				ply
.1bb1	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1bb3					_RDRLoop1:
.1bb3	20 c6 1b	jsr $1bc6			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1bb6	e8		inx				inx
.1bb7	ec 0d 0c	cpx $0c0d			cpx 	RenderWidth 				; until done the whole lot.
.1bba	d0 f7		bne $1bb3			bne 	_RDRLoop1
.1bbc	ee f2 0b	inc $0bf2			inc 	gY2 						; next line down
.1bbf	d0 03		bne $1bc4			bne 	_RDRNoCarry
.1bc1	ee f3 0b	inc $0bf3			inc 	gY2+1
.1bc4					_RDRNoCarry:
.1bc4	fa		plx				plx
.1bc5	60		rts				rts
.1bc6					RenderDrawPixelSet:
.1bc6	da		phx				phx
.1bc7	5a		phy				phy
.1bc8	20 f9 1b	jsr $1bf9			jsr 	RenderFlipXY 				; flip positions as required.
.1bcb	20 e3 1b	jsr $1be3			jsr 	RenderGetInk				; get colour to draw with.
.1bce	ae 00 0c	ldx $0c00			ldx 	gdSize 						; X counts the size.
.1bd1					_RDPSLoop:
.1bd1	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bd3	f0 03		beq $1bd8			beq 	_RDPSNoDraw
.1bd5	20 8b 1d	jsr $1d8b			jsr 	gdPlotA 					; draw A otherwise
.1bd8					_RDPSNoDraw:
.1bd8	48		pha				pha 								; move right
.1bd9	20 e9 1c	jsr $1ce9			jsr 	gdMvRight
.1bdc	68		pla				pla
.1bdd	ca		dex				dex
.1bde	d0 f1		bne $1bd1			bne 	_RDPSLoop 					; do it size times.
.1be0	7a		ply				ply
.1be1	fa		plx				plx
.1be2	60		rts				rts
.1be3					RenderGetInk:
.1be3	ad 0f 0c	lda $0c0f			lda 	RenderType 					; type, if 0 it's a bitmap
.1be6	f0 04		beq $1bec			beq 	_RGIBitmap
.1be8	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1beb	60		rts				rts
.1bec					_RGIBitmap:
.1bec	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bef	f0 04		beq $1bf5			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bf1	ad fe 0b	lda $0bfe			lda 	gdInk
.1bf4	60		rts				rts
.1bf5					_RGIBPaper:
.1bf5	ad ff 0b	lda $0bff			lda 	gdPaper
.1bf8	60		rts				rts
.1bf9					RenderFlipXY:
.1bf9	ad 02 0c	lda $0c02			lda 	gdFlip 						; check any flip at all
.1bfc	29 03		and #$03			and 	#3
.1bfe	f0 1c		beq $1c1c			beq 	_RFExit
.1c00	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1c01	90 09		bcc $1c0c			bcc 	_RFNoHFlip
.1c03	ad 0d 0c	lda $0c0d			lda 	RenderWidth 				; X Flip
.1c06	86 32		stx $32				stx 	tempShort
.1c08	18		clc				clc
.1c09	e5 32		sbc $32				sbc 	tempShort
.1c0b	aa		tax				tax
.1c0c					_RFNoHFlip:
.1c0c	ad 02 0c	lda $0c02			lda 	gdFlip
.1c0f	29 02		and #$02			and 	#2 							; bit 1 check
.1c11	f0 09		beq $1c1c			beq 	_RFExit
.1c13	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; Y Flip
.1c16	84 32		sty $32				sty 	tempShort
.1c18	18		clc				clc
.1c19	e5 32		sbc $32				sbc 	tempShort
.1c1b	a8		tay				tay
.1c1c					_RFExit:
.1c1c	60		rts				rts
.1c1d					RenderCheckRange:
.1c1d	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1c1f	ac 00 0c	ldy $0c00			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1c22	84 2a		sty $2a				sty 	temp0
.1c24	f0 2b		beq $1c51			beq 	_RCRValue
.1c26	a9 00		lda #$00			lda 	#0 							; total
.1c28					_RCRMultiply:
.1c28	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c2a	90 05		bcc $1c31			bcc 	_RCRNoAdd 					; not adding this time.
.1c2c	18		clc				clc
.1c2d	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c2f	b0 20		bcs $1c51			bcs 	_RCRValue 					; overflow
.1c31					_RCRNoAdd:
.1c31	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c33	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c35	d0 f1		bne $1c28			bne 	_RCRMultiply
.1c37	18		clc				clc 								; add to x2 or y2, store in temp0
.1c38	7d f0 0b	adc $0bf0,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c3b	85 2a		sta $2a				sta 	temp0
.1c3d	bd f1 0b	lda $0bf1,x			lda 	gX2+1,x
.1c40	69 00		adc #$00			adc 	#0
.1c42	85 2b		sta $2b				sta 	temp0+1
.1c44	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c46	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1c49	a5 2b		lda $2b				lda 	temp0+1
.1c4b	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1c4e	b0 01		bcs $1c51			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c50	60		rts				rts
.1c51					_RCRValue:
.1c51	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c53	20 27 15	jsr $1527		jsr	errorHandler
.1c56					CallRenderFunction:
.1c56	6c 0b 0c	jmp ($0c0b)			jmp 	(RenderFunction)
.1c59					TestImageAccess:
.1c59	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c5b	f0 0a		beq $1c67			beq 	_TIAGetInfo
.1c5d	a0 3f		ldy #$3f			ldy 	#63
.1c5f					_TIACreate:
.1c5f	98		tya				tya
.1c60	99 10 0c	sta $0c10,y			sta 	RenderCache,y
.1c63	88		dey				dey
.1c64	10 f9		bpl $1c5f			bpl 	_TIACreate
.1c66	60		rts				rts
.1c67					_TIAGetInfo:
.1c67	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c69	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c6b	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c6d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c6e					SetupXY:
.1c6e	b9 ec 0b	lda $0bec,y			lda 	gX1,y
.1c71	be ed 0b	ldx $0bed,y			ldx 	gX1+1,y
.1c74	20 35 1e	jsr $1e35			jsr 	gdSetX
.1c77	b9 ee 0b	lda $0bee,y			lda 	gY1,y
.1c7a	be ef 0b	ldx $0bef,y			ldx 	gY1+1,y
.1c7d	20 3c 1e	jsr $1e3c			jsr 	gdSetY
.1c80	20 46 1d	jsr $1d46			jsr 	gdSetDrawPosition
.1c83	60		rts				rts
.1c84					CompareCoords:
.1c84	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c87	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c8a	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1c8d	f9 ed 0b	sbc $0bed,y			sbc 	gX1+1,y
.1c90	60		rts				rts
.1c91					CompareCoordsSigned:
.1c91	20 84 1c	jsr $1c84			jsr 	CompareCoords
.1c94	50 02		bvc $1c98			bvc 	_CCSExit
.1c96	49 80		eor #$80			eor 	#$80
.1c98					_CCSExit:
.1c98	60		rts				rts
.1c99					CompareCoordsEq:
.1c99	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c9c	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c9f	d0 06		bne $1ca7			bne 	_CCEExit
.1ca1	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1ca4	d9 ed 0b	cmp $0bed,y			cmp 	gX1+1,y
.1ca7					_CCEExit:
.1ca7	60		rts				rts
.1ca8					BoxSort:
.1ca8	a2 00		ldx #$00			ldx 	#gx1-gx1
.1caa	a0 04		ldy #$04			ldy 	#gx2-gx1
.1cac	20 bd 1c	jsr $1cbd			jsr 	GCompareCoords
.1caf	20 ca 1c	jsr $1cca			jsr 	GSortMinMaxCoords
.1cb2	a2 02		ldx #$02			ldx 	#gy1-gx1
.1cb4	a0 06		ldy #$06			ldy 	#gy2-gx1
.1cb6	20 bd 1c	jsr $1cbd			jsr 	GCompareCoords
.1cb9	20 ca 1c	jsr $1cca			jsr 	GSortMinMaxCoords
.1cbc	60		rts				rts
.1cbd					GCompareCoords:
.1cbd	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1cc0	d9 ec 0b	cmp $0bec,y			cmp 	gx1,y
.1cc3	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1cc6	f9 ed 0b	sbc $0bed,y			sbc 	gx1+1,y
.1cc9	60		rts				rts
.1cca					GSortMinMaxCoords:
.1cca	90 1c		bcc $1ce8			bcc 	GSMMCExit
.1ccc					GSwapCoords:
.1ccc	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1ccf	48		pha				pha
.1cd0	b9 ec 0b	lda $0bec,y			lda 	gx1,y
.1cd3	9d ec 0b	sta $0bec,x			sta 	gx1,x
.1cd6	68		pla				pla
.1cd7	99 ec 0b	sta $0bec,y			sta 	gx1,y
.1cda	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1cdd	48		pha				pha
.1cde	b9 ed 0b	lda $0bed,y			lda 	gx1+1,y
.1ce1	9d ed 0b	sta $0bed,x			sta 	gx1+1,x
.1ce4	68		pla				pla
.1ce5	99 ed 0b	sta $0bed,y			sta 	gx1+1,y
.1ce8					GSMMCExit:
.1ce8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1ce9					gdMvRight:
.1ce9	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1cec	d0 08		bne $1cf6			bne 	_gdMR0
.1cee	ee 21 9f	inc $9f21			inc 	$9F21
.1cf1	d0 03		bne $1cf6			bne 	_gdMR0
.1cf3	ee 22 9f	inc $9f22			inc 	$9F22
.1cf6					_gdMR0:
.1cf6	ee 54 0c	inc $0c54			inc 	gdXPos
.1cf9	d0 03		bne $1cfe			bne 	_gdMR1
.1cfb	ee 55 0c	inc $0c55			inc 	gdXPos+1
.1cfe					_gdMR1:
.1cfe	60		rts				rts
.1cff					gdMvUp:
.1cff	ad 56 0c	lda $0c56			lda 	gdYPos 						; decrement Y Pos
.1d02	d0 03		bne $1d07			bne 	_gdMU1
.1d04	ce 57 0c	dec $0c57			dec 	gdYPos+1
.1d07	ce 56 0c	dec $0c56	_gdMU1:	dec 	gdYPos
.1d0a	38		sec				sec 								; adjust position by -320
.1d0b	ad 20 9f	lda $9f20			lda 	$9F20
.1d0e	e9 40		sbc #$40			sbc 	#64
.1d10	8d 20 9f	sta $9f20			sta 	$9F20
.1d13	ad 21 9f	lda $9f21			lda 	$9F21
.1d16	e9 01		sbc #$01			sbc 	#1
.1d18	8d 21 9f	sta $9f21			sta 	$9F21
.1d1b	ad 22 9f	lda $9f22			lda 	$9F22
.1d1e	e9 00		sbc #$00			sbc 	#0
.1d20	8d 22 9f	sta $9f22			sta 	$9F22
.1d23	60		rts				rts
.1d24					gdMvDown:
.1d24	ee 56 0c	inc $0c56			inc 	gdYPos 						; decrement Y Pos
.1d27	d0 03		bne $1d2c			bne 	_gdMU1
.1d29	ee 57 0c	inc $0c57			inc 	gdYPos+1
.1d2c					_gdMU1:
.1d2c	18		clc				clc 								; adjust position by -320
.1d2d	ad 20 9f	lda $9f20			lda 	$9F20
.1d30	69 40		adc #$40			adc 	#64
.1d32	8d 20 9f	sta $9f20			sta 	$9F20
.1d35	ad 21 9f	lda $9f21			lda 	$9F21
.1d38	69 01		adc #$01			adc 	#1
.1d3a	8d 21 9f	sta $9f21			sta 	$9F21
.1d3d	ad 22 9f	lda $9f22			lda 	$9F22
.1d40	69 00		adc #$00			adc 	#0
.1d42	8d 22 9f	sta $9f22			sta 	$9F22
.1d45	60		rts				rts
.1d46					gdSetDrawPosition:
.1d46	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d48	85 2a		sta $2a				sta 	temp0
.1d4a	ad 56 0c	lda $0c56			lda 	gdYPos
.1d4d	85 2b		sta $2b				sta 	temp0+1
.1d4f	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d51	66 2a		ror $2a				ror 	temp0
.1d53	46 2b		lsr $2b				lsr 	temp0+1
.1d55	66 2a		ror $2a				ror 	temp0
.1d57	ad 56 0c	lda $0c56			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d5a	18		clc				clc
.1d5b	65 2b		adc $2b				adc 	temp0+1
.1d5d	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d5f	18		clc				clc
.1d60	a5 2a		lda $2a				lda 	temp0
.1d62	6d 54 0c	adc $0c54			adc 	gdXPos
.1d65	85 2a		sta $2a				sta 	temp0
.1d67	a5 2b		lda $2b				lda 	temp0+1
.1d69	6d 55 0c	adc $0c55			adc 	gdXPos+1
.1d6c	85 2b		sta $2b				sta 	temp0+1
.1d6e	18		clc				clc
.1d6f	ad 51 0c	lda $0c51			lda 	gdBitmapAddress
.1d72	65 2a		adc $2a				adc 	temp0
.1d74	8d 20 9f	sta $9f20			sta 	$9F20
.1d77	ad 52 0c	lda $0c52			lda 	gdBitmapAddress+1
.1d7a	65 2b		adc $2b				adc 	temp0+1
.1d7c	8d 21 9f	sta $9f21			sta 	$9F21
.1d7f	ad 53 0c	lda $0c53			lda 	gdBitmapAddress+2
.1d82	69 00		adc #$00			adc 	#0
.1d84	8d 22 9f	sta $9f22			sta 	$9F22
.1d87	60		rts				rts
.1d88					gdPlotInk:
.1d88	ad fe 0b	lda $0bfe			lda 	gdInk
.1d8b					gdPlotA:
.1d8b	8d 23 9f	sta $9f23			sta 	$9F23
.1d8e	60		rts				rts
.1d8f					gdPlotPaper:
.1d8f	ad ff 0b	lda $0bff			lda 	gdPaper
.1d92	c9 ff		cmp #$ff			cmp 	#$FF
.1d94	f0 03		beq $1d99			beq 	_gdPPSkip
.1d96	8d 23 9f	sta $9f23			sta 	$9F23
.1d99					_gdPPSkip:
.1d99	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c50					gdEnabled:
>0c50							.fill 	1
.0c51					gdBitmapAddress:
>0c51							.fill 	3
.0c54					gdXPos:
>0c54							.fill 	2
.0c56					gdYPos:
>0c56							.fill 	2
.1d9a					gdModeChanged:
.1d9a	da		phx				phx
.1d9b	5a		phy				phy
.1d9c	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d9e	8d 50 0c	sta $0c50			sta 	gdEnabled
.1da1	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1da4	c9 40		cmp #$40			cmp 	#$40
.1da6	d0 1f		bne $1dc7			bne 	_gdExit
.1da8	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1dab	c9 40		cmp #$40			cmp 	#$40
.1dad	d0 18		bne $1dc7			bne 	_gdExit
.1daf	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1db2	0a		asl a				asl 	a 							;
.1db3	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1db4	10 09		bpl $1dbf			bpl 	_gdNotLayer1
.1db6	48		pha				pha 								; save A
.1db7	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1db9	20 cd 1d	jsr $1dcd			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dbc	68		pla				pla 								; restore A
.1dbd	b0 08		bcs $1dc7			bcs 	_gdExit 					; if successful then exit
.1dbf					_gdNotLayer1:
.1dbf	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1dc0	10 05		bpl $1dc7			bpl 	_gdExit 					; if not enabled, exit
.1dc2	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1dc4	20 cd 1d	jsr $1dcd			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dc7					_gdExit:
.1dc7	20 01 1e	jsr $1e01			jsr 	gdClearGraphics 			; clear graphics display.
.1dca	7a		ply				ply
.1dcb	fa		plx				plx
.1dcc	60		rts				rts
.1dcd					gdCheckBitmap:
.1dcd	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1dd0	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1dd2	d0 14		bne $1de8			bne 	_gdCBFail
.1dd4	ee 50 0c	inc $0c50			inc 	gdEnabled 					; set the enabled flag to non zero.
.1dd7	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1dda	0a		asl a				asl 	a
.1ddb	8d 52 0c	sta $0c52			sta 	gdBitmapAddress+1
.1dde	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1de0	8d 53 0c	sta $0c53			sta 	gdBitmapAddress+2
.1de3	a9 00		lda #$00			lda 	#$00
.1de5	8d 51 0c	sta $0c51			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1de8					_gdCBFail:
.1de8	18		clc				clc
.1de9	60		rts				rts
.1dea					CommandClg:
.1dea	b1 28		lda ($28),y			lda 	(codePtr),y
.1dec	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1dee	d0 0d		bne $1dfd			bne 	_CCLClear
.1df0	c8		iny				iny
.1df1	a9 00		lda #$00			lda 	#0
.1df3	a2 0c		ldx #$0c		ldx	#12
.1df5	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1df8	a5 98		lda $98				lda 	esInt0
.1dfa	8d ff 0b	sta $0bff			sta 	gdPaper
.1dfd					_CCLClear:
.1dfd	20 01 1e	jsr $1e01			jsr 	gdClearGraphics
.1e00	60		rts				rts
.1e01					gdClearGraphics:
.1e01	da		phx				phx
.1e02	5a		phy				phy
.1e03	ad 50 0c	lda $0c50			lda 	gdEnabled 					; screen enabled
.1e06	f0 2a		beq $1e32			beq 	_gdCGExit
.1e08	a9 40		lda #$40			lda 	#(320) & $FF
.1e0a	8d 03 0c	sta $0c03			sta 	gdXLimit
.1e0d	a9 01		lda #$01			lda 	#(320) >> 8
.1e0f	8d 04 0c	sta $0c04			sta 	1+(gdXLimit)
.1e12	a9 c8		lda #$c8			lda 	#(200) & $FF
.1e14	8d 05 0c	sta $0c05			sta 	gdYLimit
.1e17	a9 00		lda #$00			lda 	#(200) >> 8
.1e19	8d 06 0c	sta $0c06			sta 	1+(gdYLimit)
.1e1c	a9 00		lda #$00			lda 	#0 							; home cursor
.1e1e	aa		tax				tax
.1e1f	20 35 1e	jsr $1e35			jsr 	gdSetX
.1e22	20 3c 1e	jsr $1e3c			jsr 	gdSetY
.1e25	20 46 1d	jsr $1d46			jsr 	gdSetDrawPosition 			; set the draw position.
.1e28	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e2a	a2 00		ldx #$00			ldx 	#0
.1e2c	ad ff 0b	lda $0bff			lda 	gdPaper
.1e2f	20 43 1e	jsr $1e43			jsr 	gdOptHorizontalWriter
.1e32					_gdCGExit:
.1e32	7a		ply				ply
.1e33	fa		plx				plx
.1e34	60		rts				rts
.1e35					gdSetX:
.1e35	8d 54 0c	sta $0c54			sta 	gdXPos
.1e38	8e 55 0c	stx $0c55			stx 	gdXPos+1
.1e3b	60		rts				rts
.1e3c					gdSetY:
.1e3c	8d 56 0c	sta $0c56			sta 	gdYPos
.1e3f	8e 57 0c	stx $0c57			stx 	gdYPos+1
.1e42	60		rts				rts
.1e43					gdOptHorizontalWriter:
.1e43	48		pha				pha
.1e44	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e47	09 10		ora #$10			ora 	#$10
.1e49	8d 22 9f	sta $9f22			sta 	$9F22
.1e4c	68		pla				pla
.1e4d					_gdOLoop:
.1e4d	8d 23 9f	sta $9f23			sta 	$9F23
.1e50	e0 00		cpx #$00			cpx 	#0
.1e52	d0 05		bne $1e59			bne 	_gdNoBorrow
.1e54	c0 00		cpy #$00			cpy 	#0
.1e56	f0 05		beq $1e5d			beq 	_gdExit
.1e58	88		dey				dey
.1e59					_gdNoBorrow:
.1e59	ca		dex				dex
.1e5a	4c 4d 1e	jmp $1e4d			jmp 	_gdOLoop
.1e5d					_gdExit:
.1e5d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e5e					Unary_Clock:
.1e5e	a2 0c		ldx #$0c		ldx	#12
.1e60	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1e63	48		pha				pha 								; save stack pos
.1e64	a2 04		ldx #$04		ldx	#4
.1e66	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1e69	5a		phy				phy
.1e6a	20 50 ff	jsr $ff50			jsr 	$FF50
.1e6d	7a		ply				ply
.1e6e	68		pla				pla 								; restore, repush, put into X to read offset
.1e6f	48		pha				pha
.1e70	aa		tax				tax
.1e71	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e73	c9 06		cmp #$06			cmp 	#6
.1e75	b0 0d		bcs $1e84			bcs 	_UCValue
.1e77	aa		tax				tax 								; index in X and read RTC.
.1e78	b5 02		lda $02,x			lda 	2,x
.1e7a	85 32		sta $32				sta 	tempshort
.1e7c	68		pla				pla 								; restore number stack index.
.1e7d	aa		tax				tax
.1e7e	a5 32		lda $32				lda 	tempShort
.1e80	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e82	8a		txa				txa
.1e83	60		rts				rts
.1e84					_UCValue:
.1e84	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e86	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e89					Unary_JoyX:
.1e89	38		sec				sec
.1e8a	b0 01		bcs $1e8d			bcs 	JoystickRead
.1e8c					Unary_JoyY:
.1e8c	18		clc				clc
.1e8d					JoystickRead:
.1e8d	48		pha				pha 								; save stack position
.1e8e	08		php				php 								; save test flag.
.1e8f	a2 04		ldx #$04		ldx	#4
.1e91	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1e94	20 eb 1e	jsr $1eeb			jsr 	ReadJoystick 				; read it.
.1e97	28		plp				plp
.1e98	b0 02		bcs $1e9c			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e9a	4a		lsr a				lsr 	a
.1e9b	4a		lsr a				lsr 	a
.1e9c					_JRNoShift:
.1e9c	29 03		and #$03			and 	#3 							; isolate the test bits.
.1e9e	f0 0d		beq $1ead			beq 	JoyReturnA 					; if nothing pressed, return A.
.1ea0	c9 03		cmp #$03			cmp 	#3
.1ea2	f0 07		beq $1eab			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1ea4	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1ea5	b0 15		bcs $1ebc			bcs 	JoyReturn1
.1ea7					JoyReturnTrue:
.1ea7	a9 ff		lda #$ff			lda 	#$FF
.1ea9	d0 02		bne $1ead			bne 	JoyReturnA
.1eab					JoyReturnFalse:
.1eab	a9 00		lda #$00			lda 	#0
.1ead					JoyReturnA:
.1ead	85 32		sta $32				sta 	tempShort 					; return A
.1eaf	fa		plx				plx
.1eb0	a5 32		lda $32				lda 	tempShort
.1eb2	95 98		sta $98,x			sta 	esInt0,x
.1eb4					JoyReturn13:
.1eb4	95 a0		sta $a0,x			sta 	esInt1,x
.1eb6	95 a8		sta $a8,x			sta 	esInt2,x
.1eb8	95 b0		sta $b0,x			sta 	esInt3,x
.1eba	8a		txa				txa 								; return NSP in A
.1ebb	60		rts				rts
.1ebc					JoyReturn1:
.1ebc	fa		plx				plx
.1ebd	a9 01		lda #$01			lda 	#1
.1ebf	95 98		sta $98,x			sta 	esInt0,x
.1ec1	a9 00		lda #$00			lda 	#0
.1ec3	f0 ef		beq $1eb4			beq 	JoyReturn13
.1ec5					Unary_JButton:
.1ec5	48		pha				pha 								; save X on stack, put in X
.1ec6	a2 0c		ldx #$0c		ldx	#12
.1ec8	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1ecb	aa		tax				tax 								; get value to check, push on stack.
.1ecc	b5 98		lda $98,x			lda 	esInt0,x
.1ece	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1ed0	b0 14		bcs $1ee6			bcs 	_UJBadValue
.1ed2	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ed4	48		pha				pha 								; save that shift count on the stack.
.1ed5	a2 04		ldx #$04		ldx	#4
.1ed7	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1eda	fa		plx				plx
.1edb	20 eb 1e	jsr $1eeb			jsr 	ReadJoystick 				; joystick read
.1ede					_UJShift:
.1ede	4a		lsr a				lsr 	a
.1edf	ca		dex				dex
.1ee0	d0 fc		bne $1ede			bne 	_UJShift
.1ee2	b0 c3		bcs $1ea7			bcs 	JoyReturnTrue
.1ee4	90 c5		bcc $1eab			bcc 	JoyReturnFalse
.1ee6					_UJBadValue:
.1ee6	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ee8	20 27 15	jsr $1527		jsr	errorHandler
.1eeb					ReadJoystick:
.1eeb	da		phx				phx
.1eec	5a		phy				phy
.1eed	a9 00		lda #$00			lda 	#0
.1eef	20 56 ff	jsr $ff56			jsr 	$FF56
.1ef2	c0 00		cpy #$00			cpy 	#0
.1ef4	d0 0f		bne $1f05			bne 	_RJError
.1ef6	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1ef8	d0 02		bne $1efc			bne 	_RJNoBug
.1efa	a9 ff		lda #$ff			lda 	#$FF
.1efc					_RJNoBug:
.1efc	85 32		sta $32				sta 	tempShort
.1efe	7a		ply				ply
.1eff	fa		plx				plx
.1f00	a5 32		lda $32				lda 	tempShort
.1f02	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1f04	60		rts				rts
.1f05					_RJError:
.1f05	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f07	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sound.asm

=16					Channels = 16 								; # of sound channels.
.0c58					LiveChannels:
>0c58							.fill 	1
.0c59					ChannelTime:
>0c59							.fill 	Channels 					; # of ticks until channels goes silent if non-zero
.0c69					sndPitch:
>0c69							.fill 	2
.0c6b					sndChannel:
>0c6b							.fill 	1
.0c6c					sndTime:
>0c6c							.fill 	1
.0c6d					sndType:
>0c6d							.fill 	1
.0c6e					sndVolume:
>0c6e							.fill 	1
.1f0a					CommandSound:
.1f0a	a9 00		lda #$00			lda 	#0 							; clear the default sound options
.1f0c	8d 69 0c	sta $0c69			sta 	sndPitch
.1f0f	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.1f12	8d 6d 0c	sta $0c6d			sta 	sndType
.1f15	a9 ff		lda #$ff			lda 	#$FF 						; values are 255,63 are masked.
.1f17	8d 6b 0c	sta $0c6b			sta 	sndChannel
.1f1a	8d 6e 0c	sta $0c6e			sta 	sndVolume
.1f1d	a9 05		lda #$05			lda 	#5 							; default time is 0.5s
.1f1f	8d 6c 0c	sta $0c6c			sta 	sndTime
.1f22					_ComSoundLoop:
.1f22	b1 28		lda ($28),y			lda 	(codePtr),y 				; next token
.1f24	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line/colon do the sound
.1f26	f0 55		beq $1f7d			beq 	_CSDoSound
.1f28	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1f2a	f0 51		beq $1f7d			beq 	_CSDoSound
.1f2c	c9 db		cmp #$db			cmp 	#TKW_AT 					; is it AT pitch ?
.1f2e	f0 29		beq $1f59			beq 	_CSSetPitch
.1f30	a2 03		ldx #$03			ldx 	#3 							; look up in the tokens table
.1f32					_CSCheck:
.1f32	dd 79 1f	cmp $1f79,x			cmp 	_ComSoundTokens,x 			; if found token update value.
.1f35	f0 10		beq $1f47			beq 	_CSFoundToken
.1f37	ca		dex				dex
.1f38	10 f8		bpl $1f32			bpl 	_CSCheck
.1f3a	c8		iny				iny
.1f3b	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR 					; was it sound CLEAR
.1f3d	d0 03		bne $1f42			bne 	_CSSyntax
.1f3f	4c dc 1f	jmp $1fdc			jmp 	SoundReset
.1f42					_CSSyntax:
.1f42	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1f44	20 27 15	jsr $1527		jsr	errorHandler
.1f47					_CSFoundToken:
.1f47	da		phx				phx
.1f48	c8		iny				iny 								; skip it
.1f49	a9 00		lda #$00			lda 	#0 							; get a small int
.1f4b	a2 0c		ldx #$0c		ldx	#12
.1f4d	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1f50	fa		plx				plx
.1f51	a5 98		lda $98				lda 	esInt0 						; copy value to setup memory
.1f53	9d 6b 0c	sta $0c6b,x			sta 	sndChannel,x
.1f56	4c 22 1f	jmp $1f22			jmp 	_ComSoundLoop
.1f59					_CSSetPitch:
.1f59	c8		iny				iny 								; skip AT
.1f5a	a9 00		lda #$00			lda 	#0 							; get an integer.
.1f5c	a2 0a		ldx #$0a		ldx	#10
.1f5e	20 6d 3f	jsr $3f6d		jsr	mainHandler
.1f61	a5 a8		lda $a8				lda 	esInt2 						; check range
.1f63	05 b0		ora $b0				ora 	esInt3
.1f65	d0 0d		bne $1f74			bne 	_CSBadValue
.1f67	a5 98		lda $98				lda 	esInt0	 					; copy into pitch and loop back
.1f69	8d 69 0c	sta $0c69			sta 	sndPitch
.1f6c	a5 a0		lda $a0				lda 	esInt1
.1f6e	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.1f71	4c 22 1f	jmp $1f22			jmp 	_ComSoundLoop
.1f74					_CSBadValue:
.1f74	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f76	20 27 15	jsr $1527		jsr	errorHandler
.1f79					_ComSoundTokens:
>1f79	ce 9b ea cf					.byte 	TKW_TO,TKW_FOR,TKW_TYPE,TKW_STEP
.1f7d					_CSDoSound:
.1f7d	ae 6b 0c	ldx $0c6b			ldx 	sndChannel 					; if channel >= 16 look for channel unused.
.1f80	c9 10		cmp #$10			cmp 	#16
.1f82	90 0f		bcc $1f93			bcc 	_CSHaveChannel
.1f84	a2 0f		ldx #$0f			ldx 	#15
.1f86					_CSFindChannel:
.1f86	bd 59 0c	lda $0c59,x			lda 	channelTime,x 				; time is zero e.g. sound off.
.1f89	f0 08		beq $1f93			beq 	_CSHaveChannel
.1f8b	ca		dex				dex
.1f8c	10 f8		bpl $1f86			bpl 	_CSFindChannel 				; try all of them
.1f8e	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f90	20 27 15	jsr $1527		jsr	errorHandler
.1f93					_CSHaveChannel:
.1f93	ad 6c 0c	lda $0c6c			lda 	sndTime 					; get how long
.1f96	f0 31		beq $1fc9			beq 	_CSExit 					; if zero then exit
.1f98	9d 59 0c	sta $0c59,x			sta 	channelTime,x 				; set the channel time for this channel.
.1f9b	ee 58 0c	inc $0c58			inc 	liveChannels 				; one more channel playing
.1f9e	8a		txa				txa 								; point to Channel A
.1f9f	20 ca 1f	jsr $1fca			jsr 	CSPointChannel
.1fa2	ad 69 0c	lda $0c69			lda 	sndPitch 					; write pitch out
.1fa5	8d 23 9f	sta $9f23			sta 	$9F23
.1fa8	ad 6a 0c	lda $0c6a			lda 	sndPitch+1
.1fab	8d 23 9f	sta $9f23			sta 	$9F23
.1fae	ad 6e 0c	lda $0c6e			lda 	sndVolume 					; get volume, max out at 63.
.1fb1	c9 40		cmp #$40			cmp 	#64
.1fb3	90 02		bcc $1fb7			bcc 	_CSHaveVolume
.1fb5	a9 3f		lda #$3f			lda 	#63
.1fb7					_CSHaveVolume:
.1fb7	09 c0		ora #$c0			ora 	#$C0 						; both channels
.1fb9	8d 23 9f	sta $9f23			sta 	$9F23 						; write out.
.1fbc	ad 6d 0c	lda $0c6d			lda 	sndType 					; get waveform (bits 0-1 Pulse, Sawtooth, Triangle Noise)
.1fbf	6a		ror a				ror 	a 							; rotate into position 7,6
.1fc0	6a		ror a				ror 	a
.1fc1	6a		ror a				ror 	a
.1fc2	29 c0		and #$c0			and 	#$C0 						; mask other bits
.1fc4	09 3f		ora #$3f			ora 	#63 						; 50% duty cycle.
.1fc6	8d 23 9f	sta $9f23			sta 	$9F23
.1fc9					_CSExit:
.1fc9	60		rts				rts
.1fca					CSPointChannel:
.1fca	0a		asl a				asl 	a 							; 4 bytes / channel
.1fcb	0a		asl a				asl 	a
.1fcc	09 c0		ora #$c0			ora 	#$C0 						; at $1F9C0
.1fce	8d 20 9f	sta $9f20			sta 	$9F20
.1fd1	a9 f9		lda #$f9			lda 	#$F9
.1fd3	8d 21 9f	sta $9f21			sta 	$9F21
.1fd6	a9 11		lda #$11			lda 	#$11
.1fd8	8d 22 9f	sta $9f22			sta 	$9F22
.1fdb	60		rts				rts
.1fdc					SoundReset:
.1fdc	a9 00		lda #$00			lda 	#0							; no channels playing
.1fde	8d 58 0c	sta $0c58			sta 	LiveChannels
.1fe1	a2 0f		ldx #$0f			ldx 	#Channels-1
.1fe3					_SCClear:
.1fe3	9d 59 0c	sta $0c59,x			sta 	ChannelTime,x
.1fe6	ca		dex				dex
.1fe7	10 fa		bpl $1fe3			bpl 	_SCClear
.1fe9	a9 c0		lda #$c0			lda 	#$C0 						; point VRAM data pointer to $1F9C0 increment
.1feb	8d 20 9f	sta $9f20			sta 	$9F20
.1fee	a9 f9		lda #$f9			lda 	#$F9
.1ff0	8d 21 9f	sta $9f21			sta 	$9F21
.1ff3	a9 11		lda #$11			lda 	#$11
.1ff5	8d 22 9f	sta $9f22			sta 	$9F22
.1ff8					_SCClear2:
.1ff8	a9 00		lda #$00			lda 	#0
.1ffa	8d 23 9f	sta $9f23			sta 	$9F23
.1ffd	ad 20 9f	lda $9f20			lda 	$9F20
.2000	d0 f6		bne $1ff8			bne 	_SCClear2
.2002	60		rts				rts
.2003					Unary_Playing:
.2003	48		pha				pha 						; save stack position
.2004	b1 28		lda ($28),y			lda 	(codePtr),y 		; check for playing()
.2006	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2008	f0 2d		beq $2037			beq 	_UPCount
.200a	68		pla				pla 						; get SP back.
.200b	48		pha				pha
.200c	a2 0c		ldx #$0c		ldx	#12
.200e	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2011	a2 04		ldx #$04		ldx	#4
.2013	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2016	fa		plx				plx
.2017	86 32		stx $32				stx 	tempShort 			; save X
.2019	b5 98		lda $98,x			lda 	esInt0,x 			; check level, must be < 16
.201b	c9 10		cmp #$10			cmp 	#16
.201d	b0 13		bcs $2032			bcs 	_UPValue
.201f	aa		tax				tax 						; get the time
.2020	bd 59 0c	lda $0c59,x			lda 	ChannelTime,x 		; 0 if zero, 255 if non-zero.
.2023	f0 02		beq $2027			beq 	_UPZero
.2025	a9 ff		lda #$ff			lda 	#255
.2027					_UPZero:
.2027	a6 32		ldx $32				ldx 	tempShort 			; stack pointer back
.2029	95 98		sta $98,x			sta 	esInt0,x 			; return value
.202b					_UPSet13:
.202b	95 a0		sta $a0,x			sta 	esInt1,x
.202d	95 a8		sta $a8,x			sta 	esInt2,x
.202f	95 b0		sta $b0,x			sta 	esInt3,x
.2031	60		rts				rts
.2032					_UPValue:
.2032	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2034	20 27 15	jsr $1527		jsr	errorHandler
.2037					_UPCount:
.2037	c8		iny				iny 						; skip )
.2038	fa		plx				plx
.2039	ad 58 0c	lda $0c58			lda 	LiveChannels
.203c	95 98		sta $98,x			sta 	esInt0,x
.203e	a9 00		lda #$00			lda 	#0
.2040	f0 e9		beq $202b			beq 	_UPSet13
.2042					SoundInterrupt:
.2042	ad 58 0c	lda $0c58			lda 	LiveChannels 		; anything playing ?
.2045	f0 27		beq $206e			beq 	_SIExit
.2047	a2 0f		ldx #$0f			ldx 	#15 				; check each channel ?
.2049	bd 59 0c	lda $0c59,x	_SILoop:lda 	channelTime,x 		; time left ?
.204c	f0 1d		beq $206b			beq 	_SINext 	 		; if zero not playing
.204e	38		sec				sec 						; subtract one from time
.204f	e9 01		sbc #$01			sbc 	#1
.2051	9d 59 0c	sta $0c59,x			sta 	channelTime,x
.2054	d0 15		bne $206b			bne 	_SINext 			; if non zero, time for sound off.
.2056	ce 58 0c	dec $0c58			dec 	LiveChannels 		; one fewer channels.
.2059	8a		txa				txa 						; point to sound PSG
.205a	20 ca 1f	jsr $1fca			jsr 	CSPointChannel
.205d	a9 00		lda #$00			lda 	#0 					; zero it all out
.205f	8d 23 9f	sta $9f23			sta 	$9F23
.2062	8d 23 9f	sta $9f23			sta 	$9F23
.2065	8d 23 9f	sta $9f23			sta 	$9F23
.2068	8d 23 9f	sta $9f23			sta 	$9F23
.206b	ca		dex		_SINext:dex
.206c	10 db		bpl $2049			bpl 	_SILoop
.206e					_SIExit:
.206e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c6f					hitSprite1:
>0c6f							.fill 	1 							; this won't work ... if you nest HIT() which
.0c70					hitSprite2:
>0c70							.fill 	1
.0c71					hitRange:
>0c71							.fill 	1
.206f					FunctionCollide:
.206f	48		pha				pha 								; save and put index into X
.2070	aa		tax				tax
.2071	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.2073	8d 71 0c	sta $0c71			sta 	hitRange
.2076	20 16 21	jsr $2116			jsr 	_FCGetSpriteID
.2079	8d 6f 0c	sta $0c6f			sta 	hitSprite1
.207c	da		phx				phx
.207d	a2 02		ldx #$02		ldx	#2
.207f	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2082	fa		plx				plx
.2083	20 16 21	jsr $2116			jsr 	_FCGetSpriteID
.2086	8d 70 0c	sta $0c70			sta 	hitSprite2
.2089	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.208b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.208d	f0 12		beq $20a1			beq 	_FCParam2
.208f	da		phx				phx
.2090	a2 02		ldx #$02		ldx	#2
.2092	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2095	68		pla				pla
.2096	a2 0c		ldx #$0c		ldx	#12
.2098	20 6d 3f	jsr $3f6d		jsr	mainHandler
.209b	aa		tax				tax
.209c	b5 98		lda $98,x			lda 	esInt0,x
.209e	8d 71 0c	sta $0c71			sta 	hitRange
.20a1					_FCParam2:
.20a1	a2 04		ldx #$04		ldx	#4
.20a3	20 6d 3f	jsr $3f6d		jsr	mainHandler
.20a6	68		pla				pla 								; set X to point to the stack again.
.20a7	48		pha				pha
.20a8	aa		tax				tax
.20a9	5a		phy				phy
.20aa	18		clc				clc 								; do it with the horizontal values.
.20ab	20 cc 20	jsr $20cc			jsr 	_FCCheck
.20ae	90 0a		bcc $20ba			bcc 	_FCFail
.20b0	38		sec				sec 								; do it with the vertical values.
.20b1	20 cc 20	jsr $20cc			jsr 	_FCCheck
.20b4	90 04		bcc $20ba			bcc 	_FCFail
.20b6	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.20b8	d0 02		bne $20bc			bne 	_FCReturnA
.20ba					_FCFail:
.20ba	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.20bc					_FCReturnA:
.20bc	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.20be	7a		ply				ply
.20bf	68		pla				pla 								; restore stack, return result and exit.
.20c0	aa		tax				tax
.20c1	a5 32		lda $32				lda 	tempShort
.20c3	95 98		sta $98,x			sta 	esInt0,x
.20c5	95 a0		sta $a0,x			sta 	esInt1,x
.20c7	95 a8		sta $a8,x			sta 	esInt2,x
.20c9	95 b0		sta $b0,x			sta 	esInt3,x
.20cb	60		rts				rts
.20cc					_FCCheck:
.20cc	08		php				php 								; save the H/V flag twice
.20cd	08		php				php
.20ce	ad 6f 0c	lda $0c6f			lda 	hitSprite1 					; select sprite 1 and read its location
.20d1	20 54 22	jsr $2254			jsr 	SelectSpriteA 				; into X
.20d4	28		plp				plp
.20d5	20 78 23	jsr $2378			jsr 	SpriteReadCoordinate
.20d8	ad 70 0c	lda $0c70			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.20db	20 54 22	jsr $2254			jsr 	SelectSpriteA
.20de	e8		inx				inx
.20df	28		plp				plp
.20e0	20 78 23	jsr $2378			jsr 	SpriteReadCoordinate
.20e3	ca		dex				dex
.20e4	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.20e5	b5 98		lda $98,x			lda 	esInt0,x
.20e7	f5 99		sbc $99,x			sbc 	esInt0+1,x
.20e9	85 2a		sta $2a				sta 	temp0
.20eb	b5 a0		lda $a0,x			lda 	esInt1,x
.20ed	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.20ef	85 2b		sta $2b				sta 	temp0+1
.20f1	10 0d		bpl $2100			bpl 	_FCCIsPositive
.20f3	38		sec				sec 								; if -ve calculate |difference|
.20f4	a9 00		lda #$00			lda 	#0
.20f6	e5 2a		sbc $2a				sbc 	temp0
.20f8	85 2a		sta $2a				sta 	temp0
.20fa	a9 00		lda #$00			lda 	#0
.20fc	e5 2b		sbc $2b				sbc 	temp0+1
.20fe	85 2b		sta $2b				sta 	temp0+1
.2100					_FCCIsPositive:
.2100	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.2102	d0 10		bne $2114			bne 	_FCCFail
.2104	18		clc				clc 								; work out required min distance which is
.2105	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.2107	75 b1		adc $b1,x			adc 	esInt3+1,x
.2109	ac 71 0c	ldy $0c71			ldy 	hitRange 					; get the hit range
.210c	f0 01		beq $210f			beq 	_FCCNoSetRange 				; override if non zero.
.210e	98		tya				tya
.210f					_FCCNoSetRange:
.210f	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.2111	f0 01		beq $2114			beq 	_FCCFail
.2113	60		rts				rts
.2114					_FCCFail:
.2114	18		clc				clc
.2115	60		rts				rts
.2116					_FCGetSpriteID:
.2116	8a		txa				txa
.2117	a2 0c		ldx #$0c		ldx	#12
.2119	20 6d 3f	jsr $3f6d		jsr	mainHandler
.211c	aa		tax				tax
.211d	b5 98		lda $98,x			lda 	esInt0,x
.211f	30 01		bmi $2122			bmi 	_FCGSValue
.2121	60		rts				rts
.2122					_FCGSValue:
.2122	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2124	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c72					currSprite:
>0c72							.fill 	2
.2127					CommandSprite:
.2127	20 29 22	jsr $2229			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.212a	d0 0d		bne $2139			bne 	_CSCheckClear
.212c	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.212f	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.2131	90 02		bcc $2135			bcc 	_CSNotOn 					; if CS turn on, so set it
.2133	09 40		ora #$40			ora 	#$40
.2135					_CSNotOn:
.2135	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.2138	60		rts				rts
.2139					_CSCheckClear:
.2139	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.213b	8d 73 0c	sta $0c73			sta 	currSprite+1
.213e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.2140	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.2142	d0 05		bne $2149			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.2144	20 3a 22	jsr $223a			jsr 	CSClearSprites 				; clear all the sprites
.2147	c8		iny				iny 								; consume CLEAR token and exit.
.2148	60		rts				rts
.2149					_CSCommandLoop:
.2149	20 29 22	jsr $2229			jsr 	CSCheckOnOff 				; check sprite on/off
.214c	f0 2c		beq $217a			beq 	_CSSetVisibility
.214e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.2150	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.2152	f0 25		beq $2179			beq 	_CSExit
.2154	c8		iny				iny									; consume it
.2155	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.2157	f0 20		beq $2179			beq 	_CSExit
.2159	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.215b	f0 ec		beq $2149			beq 	_CSCommandLoop
.215d	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.215f	f0 69		beq $21ca			beq 	_CSSetImage
.2161	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.2163	f0 2b		beq $2190			beq 	_CSSetFlip
.2165	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.2167	f0 46		beq $21af			beq 	_CSSetPos
.2169	88		dey				dey 								; unpick DEY
.216a	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.216c	a2 0c		ldx #$0c		ldx	#12
.216e	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2171	a5 98		lda $98				lda 	esInt0
.2173	20 54 22	jsr $2254			jsr 	SelectSpriteA
.2176	4c 49 21	jmp $2149			jmp 	_CSCommandLoop
.2179					_CSExit:
.2179	60		rts				rts
.217a					_CSSetVisibility:
.217a	08		php				php 								; save carry
.217b	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.217d	20 10 22	jsr $2210			jsr 	SpriteSetTarget
.2180	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2183	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2185	28		plp				plp
.2186	90 02		bcc $218a			bcc 	_CSSetOff 					; check if carry was set
.2188	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.218a					_CSSetOff:
.218a	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.218d	4c 49 21	jmp $2149			jmp 	_CSCommandLoop
.2190					_CSSetFlip:
.2190	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2192	a2 0c		ldx #$0c		ldx	#12
.2194	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2197	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2199	20 10 22	jsr $2210			jsr 	SpriteSetTarget
.219c	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.219e	29 03		and #$03			and 	#3
.21a0	85 2a		sta $2a				sta 	temp0
.21a2	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.21a5	29 fc		and #$fc			and 	#$FC
.21a7	05 2a		ora $2a				ora 	temp0
.21a9	8d 23 9f	sta $9f23			sta 	$9F23
.21ac	4c 49 21	jmp $2149			jmp 	_CSCommandLoop
.21af					_CSSetPos:
.21af	a9 00		lda #$00			lda 	#0 							; X now at level 0
.21b1	a2 0a		ldx #$0a		ldx	#10
.21b3	20 6d 3f	jsr $3f6d		jsr	mainHandler
.21b6	a2 02		ldx #$02		ldx	#2
.21b8	20 6d 3f	jsr $3f6d		jsr	mainHandler
.21bb	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.21bd	a2 0a		ldx #$0a		ldx	#10
.21bf	20 6d 3f	jsr $3f6d		jsr	mainHandler
.21c2	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.21c4	20 36 23	jsr $2336			jsr 	SpriteMove 					; move it.
.21c7	4c 49 21	jmp $2149			jmp 	_CSCommandLoop
.21ca					_CSSetImage:
.21ca	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.21cc	a2 0c		ldx #$0c		ldx	#12
.21ce	20 6d 3f	jsr $3f6d		jsr	mainHandler
.21d1	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.21d3	20 10 22	jsr $2210			jsr 	SpriteSetTarget
.21d6	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.21d8	bd ba 0c	lda $0cba,x			lda 	imageAddr32Low,x 			; copy low address in.
.21db	8d 23 9f	sta $9f23			sta 	$9F23
.21de	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.21e1	bd 7a 0c	lda $0c7a,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.21e4	29 10		and #$10			and 	#$10
.21e6	0a		asl a				asl 	a
.21e7	0a		asl a				asl		a
.21e8	0a		asl a				asl 	a 							; put into bit 7
.21e9	1d fa 0c	ora $0cfa,x			ora 	imageAddr32High,x 			; or high address with it.
.21ec	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.21ef	a9 06		lda #$06			lda 	#6
.21f1	20 10 22	jsr $2210			jsr 	SpriteSetTarget 			; set sprite on.
.21f4	ad 23 9f	lda $9f23			lda 	$9F23
.21f7	09 0c		ora #$0c			ora 	#$0C
.21f9	8d 23 9f	sta $9f23			sta 	$9F23
.21fc	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.21ff	bd 7a 0c	lda $0c7a,x			lda 	imageInfo,x 				; get image info
.2202	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.2203	0a		asl a				asl 	a
.2204	0a		asl a				asl 	a
.2205	0a		asl a				asl 	a
.2206	b0 02		bcs $220a			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.2208	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.220a					_CSNoOffset:
.220a	8d 23 9f	sta $9f23			sta 	$9F23
.220d	4c 49 21	jmp $2149			jmp 	_CSCommandLoop
.2210					SpriteSetTarget:
.2210	0d 72 0c	ora $0c72			ora 	currSprite
.2213	8d 20 9f	sta $9f20			sta 	$9F20
.2216	ad 73 0c	lda $0c73			lda 	currSprite+1
.2219	f0 09		beq $2224			beq 	_SSTNoSet
.221b	8d 21 9f	sta $9f21			sta 	$9F21
.221e	a9 01		lda #$01			lda 	#$01
.2220	8d 22 9f	sta $9f22			sta 	$9F22
.2223	60		rts				rts
.2224					_SSTNoSet:
.2224	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.2226	20 27 15	jsr $1527		jsr	errorHandler
.2229					CSCheckOnOff:
.2229	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.222b	c8		iny				iny
.222c	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.222e	18		clc				clc
.222f	f0 08		beq $2239			beq 	_CSCOExit
.2231	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.2233	38		sec				sec 								; return NE if neither.
.2234	f0 03		beq $2239			beq 	_CSCOExit
.2236	88		dey				dey 								; undo consume
.2237	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.2239					_CSCOExit:
.2239	60		rts				rts
.223a					CSClearSprites:
.223a	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.223c	8d 22 9f	sta $9f22			sta 	$9F22
.223f	a9 fc		lda #$fc			lda 	#$FC
.2241	8d 21 9f	sta $9f21			sta 	$9F21
.2244	a9 00		lda #$00			lda 	#0
.2246	8d 20 9f	sta $9f20			sta 	$9F20
.2249					_CSClear:
.2249	a9 00		lda #$00			lda 	#0 							; set everything to $00
.224b	8d 23 9f	sta $9f23			sta 	$9F23
.224e	ad 21 9f	lda $9f21			lda 	$9F21
.2251	d0 f6		bne $2249			bne 	_CSClear
.2253	60		rts				rts
.2254					SelectSpriteA:
.2254	85 2a		sta $2a				sta 	temp0
.2256	a9 00		lda #$00			lda 	#0
.2258	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.225a	b0 11		bcs $226d			bcs 	_CSBadValue 				; sprites only 0-127
.225c	06 2a		asl $2a				asl 	temp0
.225e	2a		rol a				rol 	a
.225f	06 2a		asl $2a				asl 	temp0
.2261	2a		rol a				rol 	a
.2262	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.2264	8d 73 0c	sta $0c73			sta 	currSprite+1
.2267	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.2269	8d 72 0c	sta $0c72			sta 	currSprite+0
.226c	60		rts				rts
.226d					_CSBadValue
.226d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.226f	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0c74					srenderWidth:
>0c74							.fill 	1
.2272					Command_Paint:
.2272	a9 7a		lda #$7a			lda 	#ImageHandler & $FF
.2274	a2 22		ldx #$22			ldx 	#ImageHandler >> 8
.2276	20 e5 18	jsr $18e5			jsr 	GHandler
.2279	60		rts				rts
.227a					ImageHandler:
.227a	a9 81		lda #$81			lda 	#SpriteImageAccess & $FF
.227c	a2 22		ldx #$22			ldx 	#SpriteImageAccess >> 8
.227e	4c 6d 1b	jmp $1b6d			jmp 	ImageRenderer
.2281					SpriteImageAccess:
.2281	c0 ff		cpy #$ff			cpy 	#255
.2283	d0 22		bne $22a7			bne 	_SIAGetPixel
.2285	ae 01 0c	ldx $0c01			ldx 	gdImage 					; get the image #
.2288	bd 7a 0c	lda $0c7a,x			lda 	imageInfo,x 				; get the image information.
.228b	48		pha				pha
.228c	29 03		and #$03			and 	#3 							; LSB x 2 width
.228e	aa		tax				tax
.228f	bd a3 22	lda $22a3,x			lda 	_SIASizeTable,x
.2292	8d 74 0c	sta $0c74			sta 	sRenderWidth 				; save rendering width.
.2295	aa		tax				tax
.2296	68		pla				pla 								; get back next 2 bits are height
.2297	4a		lsr a				lsr 	a
.2298	4a		lsr a				lsr 	a
.2299	29 03		and #$03			and 	#3
.229b	a8		tay				tay
.229c	b9 a3 22	lda $22a3,y			lda 	_SIASizeTable,y
.229f	a8		tay				tay
.22a0	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.22a2	60		rts				rts
.22a3					_SIASizeTable:
>22a3	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.22a7					_SIAGetPixel:
.22a7	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.22a9	a9 00		lda #$00			lda 	#0
.22ab	85 2b		sta $2b				sta 	temp0+1
.22ad	ac 01 0c	ldy $0c01			ldy 	gdImage 					; get image info into A
.22b0	b9 7a 0c	lda $0c7a,y			lda 	imageInfo,y
.22b3	48		pha				pha
.22b4	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.22b6	85 2c		sta $2c				sta 	temp1
.22b8	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.22b9	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.22bb	18		clc				clc
.22bc	69 03		adc #$03			adc 	#3
.22be	a8		tay				tay
.22bf					_SIAMultiply:
.22bf	06 2a		asl $2a				asl 	temp0
.22c1	26 2b		rol $2b				rol 	temp0+1
.22c3	88		dey				dey
.22c4	d0 f9		bne $22bf			bne 	_SIAMultiply
.22c6	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.22c8	d0 04		bne $22ce			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.22ca	46 2b		lsr $2b				lsr 	temp0+1
.22cc	66 2a		ror $2a				ror 	temp0
.22ce					_SIANoHalf:
.22ce	ae 01 0c	ldx $0c01			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.22d1	bd ba 0c	lda $0cba,x			lda 	imageAddr32Low,x
.22d4	85 2e		sta $2e				sta 	temp2
.22d6	bd fa 0c	lda $0cfa,x			lda 	imageAddr32High,x
.22d9	85 2f		sta $2f				sta 	temp2+1
.22db	a9 00		lda #$00			lda 	#0
.22dd	85 30		sta $30				sta 	temp3
.22df	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.22e1					_SIMult32:
.22e1	06 2e		asl $2e				asl 	temp2
.22e3	26 2f		rol $2f				rol 	temp2+1
.22e5	26 30		rol $30				rol 	temp3
.22e7	ca		dex				dex
.22e8	d0 f7		bne $22e1			bne 	_SIMult32
.22ea	ee 25 9f	inc $9f25			inc 	$9F25 						; select alternate data port
.22ed	18		clc				clc
.22ee	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.22f0	65 2e		adc $2e				adc 	temp2
.22f2	8d 20 9f	sta $9f20			sta 	$9F20
.22f5	a5 2b		lda $2b				lda 	temp0+1
.22f7	65 2f		adc $2f				adc 	temp2+1
.22f9	8d 21 9f	sta $9f21			sta 	$9F21
.22fc	a9 10		lda #$10			lda 	#$10
.22fe	65 30		adc $30				adc 	temp3
.2300	8d 22 9f	sta $9f22			sta 	$9F22
.2303	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.2305					_SIFillCacheLoop:
.2305	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.2307	d0 12		bne $231b			bne 	_SI8Bit
.2309	ad 24 9f	lda $9f24			lda 	$9F24 						; get data
.230c	48		pha				pha 								; save it
.230d	4a		lsr a				lsr 	a 							; MSB first
.230e	4a		lsr a				lsr 	a
.230f	4a		lsr a				lsr 	a
.2310	4a		lsr a				lsr 	a
.2311	20 2b 23	jsr $232b			jsr 	_SIWrite4Bit
.2314	68		pla				pla
.2315	20 2b 23	jsr $232b			jsr 	_SIWrite4Bit
.2318	4c 22 23	jmp $2322			jmp 	_SIAdvance
.231b					_SI8Bit:
.231b	ad 24 9f	lda $9f24			lda 	$9F24 						; copy data into render cache
.231e	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.2321	e8		inx				inx
.2322					_SIAdvance:
.2322	ec 74 0c	cpx $0c74			cpx 	sRenderWidth 				; filled the cache to required width ?
.2325	d0 de		bne $2305			bne 	_SIFillCacheLoop
.2327	ce 25 9f	dec $9f25			dec 	$9F25 						; select original data port.
.232a	60		rts				rts
.232b					_SIWrite4Bit:
.232b	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.232d	f0 02		beq $2331			beq 	_SIW4Skip
.232f	09 f0		ora #$f0			ora 	#$F0
.2331					_SIW4Skip:
.2331	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.2334	e8		inx				inx
.2335	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.2336					SpriteMove:
.2336	5a		phy				phy
.2337	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2339	20 10 22	jsr $2210			jsr 	SpriteSetTarget
.233c	ad 23 9f	lda $9f23			lda 	$9F23
.233f	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2340	4a		lsr a				lsr 	a
.2341	4a		lsr a				lsr 	a
.2342	4a		lsr a				lsr 	a
.2343	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.2345	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.2347	20 10 22	jsr $2210			jsr 	SpriteSetTarget
.234a	20 58 23	jsr $2358			jsr 	SMWritePosition 					; write X position out.
.234d	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.234f	46 2a		lsr $2a				lsr 	temp0
.2351	e8		inx				inx 										; get the y position
.2352	20 58 23	jsr $2358			jsr 	SMWritePosition 					; and write that out.
.2355	ca		dex				dex 										; fix X and quit.
.2356	7a		ply				ply
.2357	60		rts				rts
.2358					SMWritePosition:
.2358	a5 2a		lda $2a				lda 	temp0 								; get dim size
.235a	29 03		and #$03			and 	#3 									; in range into Y
.235c	a8		tay				tay
.235d	38		sec				sec
.235e	b5 98		lda $98,x			lda 	esInt0,x
.2360	f9 74 23	sbc $2374,y			sbc 	SMHalfSize,y
.2363	8d 23 9f	sta $9f23			sta 	$9F23
.2366	ee 20 9f	inc $9f20			inc 	$9F20
.2369	b5 a0		lda $a0,x			lda 	esInt1,x
.236b	e9 00		sbc #$00			sbc 	#0
.236d	8d 23 9f	sta $9f23			sta 	$9F23
.2370	ee 20 9f	inc $9f20			inc 	$9F20
.2373	60		rts				rts
.2374					SMHalfSize:
>2374	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2378					SpriteReadCoordinate:
.2378	5a		phy				phy
.2379	08		php				php 										; save CTR on stack
.237a	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.237c	20 10 22	jsr $2210			jsr 	SpriteSetTarget
.237f	ad 23 9f	lda $9f23			lda 	$9F23
.2382	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2383	4a		lsr a				lsr 	a
.2384	4a		lsr a				lsr 	a
.2385	4a		lsr a				lsr 	a
.2386	28		plp				plp 										; restore CTS
.2387	08		php				php
.2388	90 02		bcc $238c			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.238a	4a		lsr a				lsr 	a
.238b	4a		lsr a				lsr 	a
.238c					_SPRCNotY1:
.238c	29 03		and #$03			and 	#3 									; point into half width/height
.238e	a8		tay				tay
.238f	b9 74 23	lda $2374,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2392	95 b0		sta $b0,x			sta 	esInt3,x
.2394	28		plp				plp 										; CS Y CC X
.2395	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2397	2a		rol a				rol 	a
.2398	2a		rol a				rol 	a
.2399	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.239b	20 10 22	jsr $2210			jsr 	SpriteSetTarget 					; set data pointer offset by that
.239e	18		clc				clc 										; read and unfix centre.
.239f	ad 23 9f	lda $9f23			lda 	$9F23
.23a2	75 b0		adc $b0,x			adc 	esInt3,x
.23a4	95 98		sta $98,x			sta 	esInt0,x
.23a6	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.23a9	ad 23 9f	lda $9f23			lda 	$9F23
.23ac	69 00		adc #$00			adc 	#0
.23ae	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.23b0	c9 08		cmp #$08			cmp		#$08
.23b2	90 02		bcc $23b6			bcc 	_SPRCNoSX
.23b4	09 f0		ora #$f0			ora 	#$F0
.23b6					_SPRCNoSX:
.23b6	95 a0		sta $a0,x			sta 	esInt1,x
.23b8	7a		ply				ply
.23b9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.23ba					Sprite_GetX:
.23ba	18		clc				clc
.23bb	90 01		bcc $23be			bcc 	SpriteGetCode
.23bd					Sprite_GetY:
.23bd	38		sec				sec
.23be					SpriteGetCode:
.23be	08		php				php 								; CLC : X SEC: Y, save on stack.
.23bf	48		pha				pha 								; save stack position
.23c0	20 db 23	jsr $23db			jsr 	GetSpriteNumber 			; get # of sprite.
.23c3	a2 04		ldx #$04		ldx	#4
.23c5	20 6d 3f	jsr $3f6d		jsr	mainHandler
.23c8	fa		plx				plx
.23c9	28		plp				plp 								; which one ?
.23ca	20 78 23	jsr $2378			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.23cd	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.23cf	29 80		and #$80			and 	#$80
.23d1	f0 02		beq $23d5			beq 	_SGXYPos
.23d3	a9 ff		lda #$ff			lda 	#$FF
.23d5					_SGXYPos:
.23d5	95 a8		sta $a8,x			sta 	esInt2,x
.23d7	95 b0		sta $b0,x			sta 	esInt3,x
.23d9	8a		txa				txa 								; return NSP in A
.23da	60		rts				rts
.23db					GetSpriteNumber:
.23db	48		pha				pha
.23dc	a2 0c		ldx #$0c		ldx	#12
.23de	20 6d 3f	jsr $3f6d		jsr	mainHandler
.23e1	fa		plx				plx
.23e2	b5 98		lda $98,x			lda 	esInt0,x
.23e4	20 54 22	jsr $2254			jsr 	SelectSpriteA
.23e7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c75					currentMode:
>0c75							.fill 	4
.23e8					ForceMode0:
.23e8	a2 00		ldx #$00			ldx 	#0
.23ea	86 98		stx $98				stx 	esInt0 						; in case we do it.
.23ec					_FMCheck:
.23ec	bd 80 24	lda $2480,x			lda 	CMModeList,x 				; do we need to switch ?
.23ef	dd 75 0c	cmp $0c75,x			cmp 	currentMode,x
.23f2	d0 13		bne $2407			bne 	CMSetMode 					; different so switch.
.23f4	e8		inx				inx
.23f5	e0 04		cpx #$04			cpx 	#4
.23f7	d0 f3		bne $23ec			bne 	_FMCheck
.23f9	60		rts				rts
.23fa					CommandMode:
.23fa	a9 00		lda #$00			lda 	#0
.23fc	a2 0a		ldx #$0a		ldx	#10
.23fe	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2401	a5 b0		lda $b0				lda 	esInt3
.2403	29 70		and #$70			and 	#$70
.2405	d0 06		bne $240d			bne 	CMNoExpand
.2407					CMSetMode:
.2407	20 61 24	jsr $2461			jsr 	CMExpandMode
.240a	4c 21 24	jmp $2421			jmp 	CMUpdateMode
.240d					CMNoExpand:
.240d	a5 98		lda $98				lda 	esInt0
.240f	8d 75 0c	sta $0c75			sta 	currentMode
.2412	a5 a0		lda $a0				lda 	esInt1
.2414	8d 76 0c	sta $0c76			sta 	currentMode+1
.2417	a5 a8		lda $a8				lda 	esInt2
.2419	8d 77 0c	sta $0c77			sta 	currentMode+2
.241c	a5 b0		lda $b0				lda 	esInt3
.241e	8d 78 0c	sta $0c78			sta 	currentMode+3
.2421					CMUpdateMode:
.2421	a2 11		ldx #$11			ldx 	#$11
.2423					_CMClear:
.2423	a9 00		lda #$00			lda 	#0
.2425	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.2428	ca		dex				dex
.2429	10 f8		bpl $2423			bpl 	_CMClear
.242b	ad 78 0c	lda $0c78			lda 	currentMode+3 				; get current mode
.242e	48		pha				pha 								; stack twice.
.242f	48		pha				pha
.2430	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.2432	09 01		ora #$01			ora 	#$01 						; turn the output on.
.2434	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.2437	68		pla				pla 								; get back
.2438	20 90 24	jsr $2490			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.243b	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.243e	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.243f	4a		lsr a				lsr 	a
.2440	4a		lsr a				lsr 	a
.2441	20 90 24	jsr $2490			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2444	8d 2b 9f	sta $9f2b			sta 	$9F2B
.2447	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.2449	ad 75 0c	lda $0c75			lda 	currentMode					; get L0 config byte
.244c	20 9b 24	jsr $249b			jsr 	CMDecodeLayer 				; and decode layer 0
.244f	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2451	ad 76 0c	lda $0c76			lda 	currentMode+1
.2454	20 9b 24	jsr $249b			jsr 	CMDecodeLayer
.2457	20 9a 1d	jsr $1d9a			jsr 	gdModeChanged 				; check the bitmap status.
.245a	20 d0 18	jsr $18d0			jsr 	GResetStorage 				; reset the graphics drawing storage.
.245d	20 dc 1f	jsr $1fdc			jsr 	SoundReset 					; Reset the sound channels.
.2460	60		rts				rts
.2461					CMExpandMode:
.2461	a5 98		lda $98				lda 	esInt0 						; get mode number
.2463	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2465	b0 14		bcs $247b			bcs 	_CMModeError
.2467	0a		asl a				asl 	a 							; x 4 into X
.2468	0a		asl a				asl 	a
.2469	aa		tax				tax
.246a	5a		phy				phy
.246b	a0 00		ldy #$00			ldy 	#0
.246d					_CMEMCopy:
.246d	bd 80 24	lda $2480,x			lda 	CMModeList,x
.2470	99 75 0c	sta $0c75,y			sta 	currentMode,y
.2473	e8		inx				inx
.2474	c8		iny				iny
.2475	c0 04		cpy #$04			cpy 	#4
.2477	d0 f4		bne $246d			bne 	_CMEMCopy
.2479	7a		ply				ply
.247a	60		rts				rts
.247b					_CMModeError:
.247b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.247d	20 27 15	jsr $1527		jsr	errorHandler
.2480					CMModeList:
>2480	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2484	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2488	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>248c	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2490					CMEndModeList:
.2490					CMToScale:
.2490	29 03		and #$03			and 	#3 							; lower 2 bits only
.2492	aa		tax				tax 								; put in X for counting
.2493	a9 00		lda #$00			lda 	#0 							; zero result
.2495	38		sec				sec 								; first time rotate CS in
.2496					_CMTSLoop:
.2496	6a		ror a				ror 	a
.2497	ca		dex				dex
.2498	10 fc		bpl $2496			bpl 	_CMTSLoop
.249a	60		rts				rts
.249b					CMDecodeLayer:
.249b	48		pha				pha 								; save it.
.249c	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.249e	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.24a1	68		pla				pla 								; get it back
.24a2	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.24a4	f0 02		beq $24a8			beq 	_CMDLNotSet
.24a6	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.24a8					_CMDLNotSet:
.24a8	e0 00		cpx #$00			cpx 	#0
.24aa	f0 06		beq $24b2			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.24ac	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.24ae	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.24b1	60		rts				rts
.24b2					_CMDLayer0:
.24b2	09 80		ora #$80			ora 	#$80 						; tile base is $80
.24b4	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.24b7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.24b8					CommandPalette:
.24b8	a9 00		lda #$00			lda 	#0
.24ba	a2 0c		ldx #$0c		ldx	#12
.24bc	20 6d 3f	jsr $3f6d		jsr	mainHandler
.24bf	a2 02		ldx #$02		ldx	#2
.24c1	20 6d 3f	jsr $3f6d		jsr	mainHandler
.24c4	a9 01		lda #$01			lda 	#1
.24c6	a2 08		ldx #$08		ldx	#8
.24c8	20 6d 3f	jsr $3f6d		jsr	mainHandler
.24cb	a5 98		lda $98				lda 	esInt0 					; get palette #
.24cd	20 dd 24	jsr $24dd			jsr 	PointToPaletteA			; point to palette register
.24d0	a5 99		lda $99				lda 	esInt0+1
.24d2	8d 23 9f	sta $9f23			sta 	$9F23
.24d5	a5 a1		lda $a1				lda 	esInt1+1
.24d7	29 0f		and #$0f			and 	#$0F
.24d9	8d 23 9f	sta $9f23			sta 	$9F23
.24dc	60		rts				rts
.24dd					PointToPaletteA:
.24dd	0a		asl a				asl 	a 							; x 2 -> LSB
.24de	8d 20 9f	sta $9f20			sta 	$9F20
.24e1	a9 00		lda #$00			lda 	#0 							; carry into A
.24e3	2a		rol a				rol 	a
.24e4	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.24e6	8d 21 9f	sta $9f21			sta 	$9F21
.24e9	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.24eb	8d 22 9f	sta $9f22			sta 	$9F22
.24ee	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

=$f800					DefaultFont = $F800
.24ef					Command_Draw:
.24ef	a9 f7		lda #$f7			lda 	#TextHandler & $FF
.24f1	a2 24		ldx #$24			ldx 	#TextHandler >> 8
.24f3	20 e5 18	jsr $18e5			jsr 	GHandler
.24f6	60		rts				rts
.24f7					TextHandler:
.24f7	ad 08 0c	lda $0c08			lda 	gdText+1 					; do we have a string
.24fa	d0 1a		bne $2516			bne 	_THHasString
.24fc					_THCallRenderer:
.24fc	da		phx				phx
.24fd	ad f2 0b	lda $0bf2			lda 	gy2
.2500	48		pha				pha
.2501	ad f3 0b	lda $0bf3			lda 	gy2+1
.2504	48		pha				pha
.2505	a9 4a		lda #$4a			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.2507	a2 25		ldx #$25			ldx 	#BitmapTextAccess >> 8
.2509	20 6d 1b	jsr $1b6d			jsr 	ImageRenderer
.250c	68		pla				pla 								; restore y position and x register
.250d	8d f3 0b	sta $0bf3			sta 	gy2+1
.2510	68		pla				pla
.2511	8d f2 0b	sta $0bf2			sta 	gy2
.2514	fa		plx				plx
.2515	60		rts				rts
.2516					_THHasString:
.2516	a2 00		ldx #$00			ldx 	#0 							; position in string
.2518					_THStringLoop:
.2518	ad 07 0c	lda $0c07			lda 	gdText 						; text => temp0
.251b	85 2a		sta $2a				sta 	temp0
.251d	ad 08 0c	lda $0c08			lda 	gdText+1
.2520	85 2b		sta $2b				sta 	temp0+1
.2522	8a		txa				txa 								; length = string length.
.2523	a0 00		ldy #$00			ldy 	#0
.2525	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2527	f0 20		beq $2549			beq 	_THExit 					; if so exit.
.2529	e8		inx				inx 								; next character, put in Y
.252a	8a		txa				txa
.252b	a8		tay				tay
.252c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.252e	8d 01 0c	sta $0c01			sta 	gdImage
.2531	20 fc 24	jsr $24fc			jsr 	_THCallRenderer 			; render the text
.2534	ad 00 0c	lda $0c00			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.2537	0a		asl a				asl		a
.2538	0a		asl a				asl 	a
.2539	0a		asl a				asl 	a
.253a	18		clc				clc
.253b	6d f0 0b	adc $0bf0			adc 	gX2 						; add to horizontal position
.253e	8d f0 0b	sta $0bf0			sta 	gx2
.2541	90 d5		bcc $2518			bcc 	_THStringLoop
.2543	ee f1 0b	inc $0bf1			inc 	gx2+1
.2546	4c 18 25	jmp $2518			jmp 	_THStringLoop 				; do the whole lot.
.2549					_THExit:
.2549	60		rts				rts
.254a					BitmapTextAccess:
.254a	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.254c	d0 07		bne $2555			bne 	_BTABitmap
.254e	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.2550	a2 08		ldx #$08			ldx 	#8
.2552	a0 08		ldy #$08			ldy 	#8
.2554	60		rts				rts
.2555					_BTABitmap:
.2555	ad 01 0c	lda $0c01			lda 	gdImage 					; Image => temp0:A
.2558	20 5c 25	jsr $255c			jsr 	DrawCharacterA
.255b	60		rts				rts
.255c					DrawCharacterA:
.255c	85 2a		sta $2a				sta 	temp0
.255e	a9 00		lda #$00			lda 	#0
.2560	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.2562	2a		rol a				rol 	a
.2563	06 2a		asl $2a				asl 	temp0
.2565	2a		rol a				rol 	a
.2566	06 2a		asl $2a				asl 	temp0
.2568	2a		rol a				rol 	a
.2569	09 f8		ora #$f8			ora 	#DefaultFont >> 8 			; A now points into font table.
.256b	ee 25 9f	inc $9f25			inc 	$9F25 						; alternate port set.
.256e	8d 21 9f	sta $9f21			sta 	$9F21 						; set up address
.2571	a9 10		lda #$10			lda 	#$10
.2573	8d 22 9f	sta $9f22			sta 	$9F22
.2576	84 32		sty $32				sty 	tempShort
.2578	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.257a	05 32		ora $32				ora 	tempShort
.257c	8d 20 9f	sta $9f20			sta 	$9F20 						; address set up.
.257f	ad 24 9f	lda $9f24			lda 	$9F24 						; get bitmap
.2582	ce 25 9f	dec $9f25			dec 	$9F25 						; original port set back
.2585	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.2587	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.2589					_BTADoCache:
.2589	a9 00		lda #$00			lda 	#0
.258b	46 2a		lsr $2a				lsr 	temp0
.258d	90 02		bcc $2591			bcc 	_BTANotSet
.258f	a9 ff		lda #$ff			lda 	#255
.2591					_BTANotSet:
.2591	9d 10 0c	sta $0c10,x			sta 	renderCache,x
.2594	ca		dex				dex
.2595	10 f2		bpl $2589			bpl 	_BTADoCache
.2597	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.2598					Command_VLoad:
.2598	a9 00		lda #$00			lda 	#0 								; string which is the file name
.259a	a2 0e		ldx #$0e		ldx	#14
.259c	20 6d 3f	jsr $3f6d		jsr	mainHandler
.259f	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.25a1	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.25a3	95 98		sta $98,x			sta 	esInt0,x
.25a5	a5 36		lda $36				lda 	lowMemory+1
.25a7	95 a0		sta $a0,x			sta 	esInt1,x
.25a9	a9 00		lda #$00			lda 	#0
.25ab	95 a8		sta $a8,x			sta 	esInt2,x
.25ad	95 b0		sta $b0,x			sta 	esInt3,x
.25af	a2 0c		ldx #$0c		ldx	#12
.25b1	20 05 15	jsr $1505		jsr	deviceHandler
.25b4	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.25b6	85 2a		sta $2a				sta 	temp0
.25b8	a5 a1		lda $a1				lda 	esInt1+1
.25ba	85 2b		sta $2b				sta 	temp0+1
.25bc	20 37 26	jsr $2637			jsr 	LoadVRAMFile 					; load the VRAM file in.
.25bf	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.25c0					Command_VPoke:
.25c0	38		sec				sec 						; one byte , CS
.25c1	b0 01		bcs $25c4			bcs 	CmdVideoWrite
.25c3					Command_VDoke:
.25c3	18		clc				clc 						; two bytes, CC
.25c4					CmdVideoWrite:
.25c4	08		php				php 						; save one or two btes
.25c5	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.25c7	a2 0a		ldx #$0a		ldx	#10
.25c9	20 6d 3f	jsr $3f6d		jsr	mainHandler
.25cc	a2 02		ldx #$02		ldx	#2
.25ce	20 6d 3f	jsr $3f6d		jsr	mainHandler
.25d1	a9 01		lda #$01			lda 	#1
.25d3	a2 0a		ldx #$0a		ldx	#10
.25d5	20 6d 3f	jsr $3f6d		jsr	mainHandler
.25d8	a2 00		ldx #$00			ldx 	#0
.25da	20 eb 25	jsr $25eb			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.25dd	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.25df	8d 23 9f	sta $9f23			sta 	$9F23
.25e2	28		plp				plp 						; if it was Poke then exit
.25e3	b0 05		bcs $25ea			bcs 	_CVWExit
.25e5	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.25e7	8d 23 9f	sta $9f23			sta 	$9F23
.25ea					_CVWExit:
.25ea	60		rts				rts
.25eb					SetUpTOSVRamAddress:
.25eb	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.25ed	29 fe		and #$fe			and 	#$FE
.25ef	15 b0		ora $b0,x			ora 	esInt3,x
.25f1	d0 14		bne $2607			bne 	CVWValue
.25f3	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.25f5	8d 20 9f	sta $9f20			sta 	$9F20
.25f8	b5 a0		lda $a0,x			lda 	esInt1,x
.25fa	8d 21 9f	sta $9f21			sta	 	$9F21
.25fd	b5 a8		lda $a8,x			lda 	esInt2,x
.25ff	29 01		and #$01			and 	#1
.2601	09 10		ora #$10			ora 	#$10 				; step 1.
.2603	8d 22 9f	sta $9f22			sta 	$9F22
.2606	60		rts				rts
.2607					CVWValue:
.2607	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2609	20 27 15	jsr $1527		jsr	errorHandler
.260c					Command_VPeek:
.260c	38		sec				sec 						; one byte , CS
.260d	b0 01		bcs $2610			bcs 	CmdVideoRead
.260f					Command_VDeek:
.260f	18		clc				clc 						; two bytes, CC
.2610					CmdVideoRead:
.2610	08		php				php 						; save action on stack.
.2611	48		pha				pha 						; save stack position
.2612	a2 0a		ldx #$0a		ldx	#10
.2614	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2617	a2 04		ldx #$04		ldx	#4
.2619	20 6d 3f	jsr $3f6d		jsr	mainHandler
.261c	fa		plx				plx
.261d	20 eb 25	jsr $25eb			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2620	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.2622	95 a0		sta $a0,x			sta 	esInt1,x
.2624	95 a8		sta $a8,x			sta 	esInt2,x
.2626	95 b0		sta $b0,x			sta 	esInt3,x
.2628	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.262b	95 98		sta $98,x			sta 	esInt0,x
.262d	28		plp				plp 						; check if DOKE (carry was clear)
.262e	b0 05		bcs $2635			bcs 	_CVRExit
.2630	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2633	95 a0		sta $a0,x			sta 	esInt1,x
.2635					_CVRExit:
.2635	8a		txa				txa 						; return X position.
.2636	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c79					compressMode:
>0c79							.fill 	1
.0c7a					imageInfo:
>0c7a							.fill 	X16MaxImages
.0cba					imageAddr32Low:
>0cba							.fill  	X16MaxImages
.0cfa					imageAddr32High:
>0cfa							.fill  	X16MaxImages
.2637					LoadVRAMFile:
.2637	da		phx				phx
.2638	5a		phy				phy
.2639					_LVRLoop:
.2639	20 13 27	jsr $2713			jsr 	LVFGet 						; get the next (never access direct)
.263c	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.263e	f0 42		beq $2682			beq 	_LVRExit
.2640	b0 5a		bcs $269c			bcs 	_LVRLoad 					; load data in ?
.2642	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2644	90 11		bcc $2657			bcc 	_LVRSetAddress
.2646	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2648	f0 3b		beq $2685			beq 	_LVRSetPalette
.264a	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.264c	90 2d		bcc $267b			bcc 	_LVRSetCompress
.264e	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2650	90 5e		bcc $26b0			bcc 	_LVRSetSprite
.2652	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2654	20 27 15	jsr $1527		jsr	errorHandler
.2657					_LVRSetAddress:
.2657	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2659	20 13 27	jsr $2713			jsr 	LVFGet
.265c	85 2c		sta $2c				sta 	temp1
.265e	a9 00		lda #$00			lda 	#0
.2660	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.2662	66 2c		ror $2c				ror 	temp1
.2664	6a		ror a				ror		a
.2665	46 2d		lsr $2d				lsr 	temp1+1
.2667	66 2c		ror $2c				ror 	temp1
.2669	6a		ror a				ror		a
.266a	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.266d	a5 2c		lda $2c				lda 	temp1
.266f	8d 21 9f	sta $9f21			sta 	$9F21
.2672	a5 2d		lda $2d				lda 	temp1+1
.2674	09 10		ora #$10			ora 	#$10
.2676	8d 22 9f	sta $9f22			sta 	$9F22
.2679	d0 be		bne $2639			bne 	_LVRLoop
.267b					_LVRSetCompress:
.267b	29 07		and #$07			and 	#7
.267d	8d 79 0c	sta $0c79			sta 	compressMode
.2680	10 b7		bpl $2639			bpl 	_LVRLoop
.2682					_LVRExit:
.2682	7a		ply				ply
.2683	fa		plx				plx
.2684	60		rts				rts
.2685					_LVRSetPalette:
.2685	20 13 27	jsr $2713			jsr 	LVFGet 						; get palette id.
.2688	20 dd 24	jsr $24dd			jsr 	PointToPaletteA 			; in palette.asm
.268b	20 13 27	jsr $2713			jsr 	LVFGet 						; copy 12 bit palette data in.
.268e	8d 23 9f	sta $9f23			sta 	$9F23
.2691	20 13 27	jsr $2713			jsr 	LVFGet
.2694	29 0f		and #$0f			and 	#$0F
.2696	8d 23 9f	sta $9f23			sta 	$9F23
.2699	4c 39 26	jmp $2639			jmp 	_LVRLoop
.269c					_LVRLoad:
.269c	ae 79 0c	ldx $0c79			ldx 	compressMode
.269f	d0 55		bne $26f6			bne 	_LVRNotMode0
.26a1	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.26a3					_LVRLCopyX:
.26a3	aa		tax				tax
.26a4					_LVRLCopy:
.26a4	20 13 27	jsr $2713			jsr 	LVFGet 						; write to data.
.26a7	8d 23 9f	sta $9f23			sta 	$9F23
.26aa	ca		dex				dex
.26ab	d0 f7		bne $26a4			bne 	_LVRLCopy
.26ad	4c 39 26	jmp $2639			jmp 	_LVRLoop
.26b0					_LVRSetSprite:
.26b0	48		pha				pha 								; save on stack
.26b1	20 13 27	jsr $2713			jsr 	LVFGet 						; get the sprite number into X
.26b4	aa		tax				tax
.26b5	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.26b7	b0 38		bcs $26f1			bcs 	_LVRSSValue
.26b9	68		pla				pla 								; restore the data held in the first byte
.26ba	9d 7a 0c	sta $0c7a,x			sta 	imageInfo,x 				; and write into the sprite image table.
.26bd					_LVRAlignVRAM:
.26bd	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.26c0	29 1f		and #$1f			and 	#$1F
.26c2	f0 07		beq $26cb			beq 	_LVRAligned
.26c4	a9 00		lda #$00			lda 	#$00
.26c6	8d 23 9f	sta $9f23			sta 	$9F23
.26c9	f0 f2		beq $26bd			beq 	_LVRAlignVRAM
.26cb					_LVRAligned:
.26cb	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.26ce	4a		lsr a				lsr 	a 	 						; first halve into temp1
.26cf	ad 21 9f	lda $9f21			lda 	$9F21
.26d2	6a		ror a				ror 	a
.26d3	85 2d		sta $2d				sta 	temp1+1
.26d5	ad 20 9f	lda $9f20			lda 	$9F20
.26d8	6a		ror a				ror 	a
.26d9	85 2c		sta $2c				sta 	temp1
.26db	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.26dd					_LVRShift:
.26dd	46 2d		lsr $2d				lsr 	temp1+1
.26df	66 2c		ror $2c				ror 	temp1
.26e1	88		dey				dey
.26e2	d0 f9		bne $26dd			bne 	_LVRShift
.26e4	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.26e6	9d fa 0c	sta $0cfa,x			sta 	imageAddr32High,x
.26e9	a5 2c		lda $2c				lda 	temp1
.26eb	9d ba 0c	sta $0cba,x			sta 	imageAddr32Low,x
.26ee	4c 39 26	jmp $2639			jmp 	_LVRLoop
.26f1					_LVRSSValue:
.26f1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.26f3	20 27 15	jsr $1527		jsr	errorHandler
.26f6					_LVRNotMode0:
.26f6	e0 01		cpx #$01			cpx 	#1
.26f8	d0 15		bne $270f			bne 	_LVRNotMode1
.26fa	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.26fc	c9 40		cmp #$40			cmp 	#$40
.26fe	90 a3		bcc $26a3			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.2700					_LVRRLEGroup:
.2700	29 3f		and #$3f			and 	#$3F
.2702	aa		tax				tax
.2703	20 13 27	jsr $2713			jsr 	LVFGet
.2706					_LVRLEGroupLoop:
.2706	8d 23 9f	sta $9f23			sta 	$9F23
.2709	ca		dex				dex
.270a	d0 fa		bne $2706			bne 	_LVRLEGroupLoop
.270c	4c 39 26	jmp $2639			jmp 	_LVRLoop
.270f					_LVRNotMode1:
>270f	db						.byte 	$DB
.2710	4c 0f 27	jmp $270f			jmp 	_LVRNotMode1
.2713	84 32		sty $32		LVFGet:	sty 	tempShort
.2715	a0 00		ldy #$00			ldy 	#0
.2717	b1 2a		lda ($2a),y			lda 	(temp0),y
.2719	a4 32		ldy $32				ldy	 	tempShort
.271b	e6 2a		inc $2a				inc 	temp0
.271d	d0 02		bne $2721			bne 	_LVFGExit
.271f	e6 2b		inc $2b				inc 	temp0+1
.2721					_LVFGExit:
.2721	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2722					section_end_extension:
.2722					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2722					floatingpointHandler:
.2722	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2724	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: basic.asm

.2727					section_end_floatingpoint:
.2727					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2727					ColdStartEntry:
.2727	a2 ff		ldx #$ff			ldx 	#$FF
.2729	9a		txs				txs
.272a	20 b3 27	jsr $27b3			jsr 	ForceStandardMode
.272d	a2 02		ldx #$02		ldx	#2
.272f	20 05 15	jsr $1505		jsr	deviceHandler
.2732	a0 ff		ldy #$ff			ldy 	#255
.2734					_CSBanner:
.2734	c8		iny				iny
.2735	b9 5b 27	lda $275b,y			lda 	Intro,y
.2738	f0 14		beq $274e			beq 	_CSStart
.273a	c9 08		cmp #$08			cmp 	#8
.273c	90 08		bcc $2746			bcc 	_CSInk
.273e	a2 14		ldx #$14		ldx	#20
.2740	20 05 15	jsr $1505		jsr	deviceHandler
.2743	4c 34 27	jmp $2734			jmp 	_CSBanner
.2746					_CSInk:
.2746	a2 06		ldx #$06		ldx	#6
.2748	20 05 15	jsr $1505		jsr	deviceHandler
.274b	4c 34 27	jmp $2734			jmp 	_CSBanner
.274e					_CSStart:
.274e	a2 16		ldx #$16		ldx	#22
.2750	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2753	a2 06		ldx #$06		ldx	#6
.2755	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2758	4c 73 28	jmp $2873			jmp 	WarmStartEntry
>275b	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2763	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2773	20 2a 2a 2a 0d 0d
>2779	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>2781	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>2791	32 30 32 31 0d 0d
>2797	02 42 61 73 69 63 20				.text 	2,"Basic "
>279e	30 2e 33 30					.text "0.30"
>27a2	20 28						.text 	" ("
>27a4	30 38 2d 41 70 72 2d 32				.text "08-Apr-2021"
>27ac	30 32 31
>27af	29 0d 0d 00					.text 	")",13,13,0
.27b3					ForceStandardMode:
.27b3	a9 fe		lda #$fe			lda 	#$FE
.27b5	20 74 18	jsr $1874		jsr	extensionHandler
.27b8	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.27b9					DeleteLine:
.27b9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.27bc	85 2a		sta $2a				sta 	temp0
.27be	ad c9 0a	lda $0ac9			lda 	basePage+1
.27c1	85 2b		sta $2b				sta 	temp0+1
.27c3	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.27c5	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.27c7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.27c9	d0 07		bne $27d2			bne 	_DLNext
.27cb	c8		iny				iny
.27cc	a5 a0		lda $a0				lda 	esInt1
.27ce	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.27d0	f0 06		beq $27d8			beq 	_DLFound
.27d2	20 f6 27	jsr $27f6	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.27d5	d0 ec		bne $27c3			bne 	_DLLoop
.27d7	60		rts				rts
.27d8					_DLFound:
.27d8	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.27da	b1 2a		lda ($2a),y			lda 	(temp0),y
.27dc	a8		tay				tay 								; so we copy from (temp0),y
.27dd	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.27df					_DLCopyDown:
.27df	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.27e1	81 2a		sta ($2a,x)			sta 	(temp0,x)
.27e3	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.27e5	d0 02		bne $27e9			bne 	_DLNoCarry
.27e7	e6 2b		inc $2b				inc 	temp0+1
.27e9					_DLNoCarry:
.27e9	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.27eb	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.27ed	d0 f0		bne $27df			bne 	_DLCopyDown
.27ef	a5 2b		lda $2b				lda 	temp0+1
.27f1	c5 36		cmp $36				cmp 	lowMemory+1
.27f3	d0 ea		bne $27df			bne 	_DLCopyDown
.27f5	60		rts				rts
.27f6					IAdvanceTemp0:
.27f6	84 32		sty $32				sty 	tempShort
.27f8	18		clc				clc
.27f9	a0 00		ldy #$00			ldy 	#0 							; get offset
.27fb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.27fd	65 2a		adc $2a				adc 	temp0
.27ff	85 2a		sta $2a				sta 	temp0
.2801	90 02		bcc $2805			bcc 	_IATNoCarry
.2803	e6 2b		inc $2b				inc 	temp0+1
.2805					_IATNoCarry:
.2805	b1 2a		lda ($2a),y			lda 	(temp0),y
.2807	a4 32		ldy $32				ldy 	tempShort
.2809	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.280b	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.280c					InsertLine:
.280c	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.280f	85 2a		sta $2a				sta 	temp0
.2811	ad c9 0a	lda $0ac9			lda 	basePage+1
.2814	85 2b		sta $2b				sta 	temp0+1
.2816					_ILLoop:
.2816	a0 01		ldy #$01			ldy 	#1
.2818	b1 2a		lda ($2a),y			lda 	(temp0),y
.281a	c5 98		cmp $98				cmp 	esInt0
.281c	c8		iny				iny
.281d	b1 2a		lda ($2a),y			lda 	(temp0),y
.281f	e5 a0		sbc $a0				sbc 	esInt1
.2821	b0 05		bcs $2828			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2823	20 f6 27	jsr $27f6			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2826	d0 ee		bne $2816			bne 	_ILLoop
.2828					_ILFound:
.2828	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.282a	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.282c	a5 36		lda $36				lda 	lowMemory+1
.282e	85 2d		sta $2d				sta 	temp1+1
.2830	ad 77 0e	lda $0e77			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2833	18		clc				clc 								; add 3 for the line number and offset.
.2834	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2836	a8		tay				tay
.2837	a2 00		ldx #$00			ldx 	#0
.2839	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.283b	91 2c		sta ($2c),y			sta 	(temp1),y
.283d	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.283f	c5 2a		cmp $2a				cmp 	temp0
.2841	d0 06		bne $2849			bne 	_ILMNext
.2843	a5 2d		lda $2d				lda 	temp1+1
.2845	c5 2b		cmp $2b				cmp 	temp0+1
.2847	f0 0b		beq $2854			beq 	_ILMCopy
.2849					_ILMNext:
.2849	a5 2c		lda $2c				lda 	temp1
.284b	d0 02		bne $284f			bne 	_ILNoBorrow
.284d	c6 2d		dec $2d				dec 	temp1+1
.284f					_ILNoBorrow:
.284f	c6 2c		dec $2c				dec 	temp1
.2851	4c 39 28	jmp $2839			jmp 	_ILMove 					; and go round again
.2854					_ILMCopy:
.2854	98		tya				tya 								; Y is the offset of the new line.
.2855	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2857	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2859	a5 98		lda $98				lda 	esInt0
.285b	91 2a		sta ($2a),y			sta 	(temp0),y
.285d	c8		iny				iny
.285e	a5 a0		lda $a0				lda 	esInt1
.2860	91 2a		sta ($2a),y			sta 	(temp0),y
.2862	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2864					_ILMCopy2:
.2864	b1 28		lda ($28),y			lda 	(codePtr),y
.2866	c8		iny				iny
.2867	c8		iny				iny
.2868	c8		iny				iny
.2869	91 2a		sta ($2a),y			sta 	(temp0),y
.286b	88		dey				dey
.286c	88		dey				dey
.286d	cc 77 0e	cpy $0e77			cpy 	tokenBufferIndex
.2870	d0 f2		bne $2864			bne 	_ILMCopy2
.2872	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2873					WarmStartEntry:
.2873	a2 ff		ldx #$ff			ldx 	#$FF
.2875	9a		txs				txs
.2876	20 b3 27	jsr $27b3			jsr 	ForceStandardMode
.2879	a9 02		lda #$02			lda 	#2							; green text.
.287b	a2 06		ldx #$06		ldx	#6
.287d	20 05 15	jsr $1505		jsr	deviceHandler
.2880	a2 0a		ldx #$0a		ldx	#10
.2882	20 05 15	jsr $1505		jsr	deviceHandler
.2885	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.2887	85 28		sta $28				sta 	codePtr
.2889	a5 2b		lda $2b				lda 	temp0+1
.288b	85 29		sta $29				sta 	codePtr+1
.288d	a2 04		ldx #$04		ldx	#4
.288f	20 05 15	jsr $1505		jsr	deviceHandler
.2892	a2 08		ldx #$08		ldx	#8
.2894	20 a0 4a	jsr $4aa0		jsr	tokeniserHandler
.2897	c9 00		cmp #$00			cmp 	#0
.2899	f0 25		beq $28c0			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.289b	a9 74		lda #$74			lda 	#(tokenHeader) & $FF
.289d	85 28		sta $28				sta 	codePtr
.289f	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.28a1	85 29		sta $29				sta 	1+(codePtr)
.28a3	ad 77 0d	lda $0d77			lda 	tokenBuffer 				; is it a blank line, go get another line.
.28a6	c9 80		cmp #$80			cmp 	#$80
.28a8	f0 c9		beq $2873			beq 	WarmStartEntry
.28aa	29 c0		and #$c0			and 	#$C0						; does it start with a number
.28ac	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.28ae	f0 15		beq $28c5			beq 	HasLineNumber
.28b0	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.28b2	8d 74 0d	sta $0d74			sta 	tokenHeader 				; fake program line.
.28b5	8d 75 0d	sta $0d75			sta 	tokenHeader+1
.28b8	8d 76 0d	sta $0d76			sta 	tokenHeader+2
.28bb	a2 18		ldx #$18		ldx	#24
.28bd	20 6d 3f	jsr $3f6d		jsr	mainHandler
.28c0					WSEError:
.28c0	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.28c2	20 27 15	jsr $1527		jsr	errorHandler
.28c5					HasLineNumber:
.28c5	a0 03		ldy #$03			ldy 	#3 							; get line number
.28c7	a9 00		lda #$00			lda 	#0
.28c9	a2 0a		ldx #$0a		ldx	#10
.28cb	20 6d 3f	jsr $3f6d		jsr	mainHandler
.28ce	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.28d0	05 b0		ora $b0				ora 	esInt3
.28d2	d0 ec		bne $28c0			bne 	WSEError
.28d4	98		tya				tya 								; make codePtr point to code after the line number.
.28d5	18		clc				clc 								; by skipping over the tokenised number.
.28d6	65 28		adc $28				adc 	codePtr
.28d8	85 28		sta $28				sta 	codePtr
.28da	90 02		bcc $28de			bcc		_HLNNoCarry
.28dc	e6 29		inc $29				inc 	codePtr+1
.28de					_HLNNoCarry:
.28de	98		tya				tya 								; subtract that offset from the code buffer index
.28df	38		sec				sec
.28e0	49 ff		eor #$ff			eor 	#$FF
.28e2	6d 77 0e	adc $0e77			adc 	tokenBufferIndex
.28e5	18		clc				clc 								; add space allowing for header & $80 trailer
.28e6	69 04		adc #$04			adc 	#4
.28e8	8d 77 0e	sta $0e77			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.28eb	20 b9 27	jsr $27b9			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.28ee					_HLNNoDelete:
.28ee	ad 77 0e	lda $0e77			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.28f1	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.28f3	f0 0c		beq $2901			beq 	_HLMEditDone
.28f5	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.28f7	18		clc				clc 								; workspace (1k)
.28f8	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.28fa	c5 34		cmp $34				cmp 	highMemory+1
.28fc	b0 0b		bcs $2909			bcs 	_HLMMemory 					; nope, won't allowit.
.28fe	20 0c 28	jsr $280c			jsr 	InsertLine 					; insert the line in
.2901					_HLMEditDone:
.2901	a2 06		ldx #$06		ldx	#6
.2903	20 6d 3f	jsr $3f6d		jsr	mainHandler
.2906	4c 73 28	jmp $2873			jmp 	WarmStartEntry
.2909					_HLMMemory:
.2909	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.290b	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.290e					interactionHandler:
.290e	7c 11 29	jmp ($2911,x)			jmp 	(interactionVectors,x)
.2911					interactionVectors:
>2911	17 29					.word _DummyControlHandler ; index 0
>2913	27 27					.word ColdStartEntry       ; index 2
>2915	73 28					.word WarmStartEntry       ; index 4
.2917					_DummyControlHandler:
.2917	60		rts			rts

;******  Return to file: basic.asm

.2918					section_end_interaction:
.2918					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d3a					dataPtr:
>0d3a							.fill 	2
.0d3c					dataIndex:
>0d3c							.fill 	1
.2918					CommandRead:
.2918	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.291a	20 3b 38	jsr $383b			jsr 	EvaluateReference
.291d	20 5e 29	jsr $295e			jsr 	SwapDPCP 					; use the data pointer.
.2920	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2922	c8		iny				iny
.2923	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2925	f0 07		beq $292e			beq 	_CRInData
.2927	88		dey				dey
.2928	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.292a	aa		tax				tax
.292b	20 3b 30	jsr $303b			jsr 	ScanForward
.292e					_CRInData:
.292e	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2930	20 e3 37	jsr $37e3			jsr 	Evaluate
.2933	ca		dex				dex 								; and write the value.
.2934	20 a6 2b	jsr $2ba6			jsr 	WriteValue
.2937	20 5e 29	jsr $295e			jsr 	SwapDPCP 					; get the code pointer back.
.293a	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.293c	c8		iny				iny
.293d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.293f	f0 d7		beq $2918			beq 	CommandRead
.2941	88		dey				dey
.2942	60		rts				rts
.2943					CommandData:
.2943	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2945	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2947	20 3b 30	jsr $303b			jsr 	ScanForward
.294a	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.294b	60		rts				rts
.294c					CommandRestore:
.294c	ad c8 0a	lda $0ac8			lda 	basePage
.294f	8d 3a 0d	sta $0d3a			sta 	dataPtr
.2952	ad c9 0a	lda $0ac9			lda 	basePage+1
.2955	8d 3b 0d	sta $0d3b			sta 	dataPtr+1
.2958	a9 03		lda #$03			lda 	#3
.295a	8d 3c 0d	sta $0d3c			sta 	dataIndex
.295d	60		rts				rts
.295e					SwapDPCP:
.295e	da		phx				phx
.295f	98		tya				tya 								; swap Y, DataIndex
.2960	ac 3c 0d	ldy $0d3c			ldy 	DataIndex
.2963	8d 3c 0d	sta $0d3c			sta 	DataIndex
.2966	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2968	ae 3a 0d	ldx $0d3a			ldx 	dataptr
.296b	8d 3a 0d	sta $0d3a			sta 	dataPtr
.296e	86 28		stx $28				stx 	codePtr
.2970	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2972	ae 3b 0d	ldx $0d3b			ldx 	dataptr+1
.2975	8d 3b 0d	sta $0d3b			sta 	dataPtr+1
.2978	86 29		stx $29				stx 	codePtr+1
.297a	fa		plx				plx
.297b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.297c					CommandGOSUB:
.297c	20 00 38	jsr $3800			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.297f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2981	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2983	20 1a 3f	jsr $3f1a			jsr 	RSClaim
.2986	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2988	20 46 3f	jsr $3f46			jsr 	RSSavePosition
.298b	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.298d	f0 1b		beq $29aa			beq 	GotoTOS 					; and do a GOTO there.
.298f					CommandRETURN:
.298f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2991	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2993	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2995	f0 05		beq $299c			beq 	_isok
.2997	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2999	20 27 15	jsr $1527		jsr	errorHandler
.299c					_isok:
.299c	a9 01		lda #$01			lda 	#1
.299e	20 59 3f	jsr $3f59			jsr 	RSLoadPosition 				; reload the position from offset 1.
.29a1	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.29a3	20 3c 3f	jsr $3f3c			jsr 	RSFree
.29a6	60		rts				rts
.29a7					CommandGOTO:
.29a7	20 00 38	jsr $3800			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.29aa					GotoTOS:
.29aa	20 24 33	jsr $3324			jsr 	ResetCodeAddress 			; simple search.
.29ad					_GotoSearch:
.29ad	a0 00		ldy #$00			ldy 	#0 							; get offset
.29af	b1 28		lda ($28),y			lda 	(codePtr),y
.29b1	f0 21		beq $29d4			beq 	_GotoError 					; not found.
.29b3	c8		iny				iny									; check LSB match
.29b4	b1 28		lda ($28),y			lda 	(codePtr),y
.29b6	d5 98		cmp $98,x			cmp 	esInt0,x
.29b8	d0 07		bne $29c1			bne 	_GotoNext
.29ba	c8		iny				iny
.29bb	b1 28		lda ($28),y			lda 	(codePtr),y
.29bd	d5 a0		cmp $a0,x			cmp 	esInt1,x
.29bf	f0 10		beq $29d1			beq 	_GotoFound
.29c1					_GotoNext:
.29c1	a0 00		ldy #$00			ldy 	#0 							; go next line
.29c3	b1 28		lda ($28),y			lda 	(codePtr),y
.29c5	18		clc				clc
.29c6	65 28		adc $28				adc 	codePtr
.29c8	85 28		sta $28				sta 	codePtr
.29ca	90 e1		bcc $29ad			bcc 	_GotoSearch
.29cc	e6 29		inc $29				inc 	codePtr+1
.29ce	4c ad 29	jmp $29ad			jmp 	_GotoSearch
.29d1					_GotoFound:
.29d1	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.29d3	60		rts				rts
.29d4					_GotoError:
.29d4	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.29d6	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0d3d					InputBuffer:
>0d3d							.fill 	MaxInputSize+1
.29d9					Command_Input:
.29d9	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.29db	c8		iny				iny
.29dc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.29de	f0 f9		beq $29d9			beq 	Command_Input
.29e0	88		dey				dey 							; undo consume
.29e1	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.29e3	f0 52		beq $2a37			beq 	_CIExit 				; : or EOL, exit
.29e5	c9 80		cmp #$80			cmp 	#TOK_EOL
.29e7	f0 4e		beq $2a37			beq 	_CIExit
.29e9	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.29eb	90 12		bcc $29ff			bcc 	_CIVariable
.29ed	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.29ef	d0 41		bne $2a32			bne 	_CISyntax
.29f1	a2 00		ldx #$00			ldx 	#0
.29f3	20 f7 37	jsr $37f7			jsr 	EvaluateString 			; evaluate and print string
.29f6	20 06 2c	jsr $2c06			jsr 	TOSToTemp0
.29f9	20 06 2b	jsr $2b06			jsr 	PrintString
.29fc	4c d9 29	jmp $29d9			jmp 	Command_Input
.29ff					_CIVariable:
.29ff	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2a01	20 3b 38	jsr $383b			jsr 	EvaluateReference  		; this is where its going
.2a04					_CIRetry:
.2a04	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2a06	a2 12		ldx #$12		ldx	#18
.2a08	20 05 15	jsr $1505		jsr	deviceHandler
.2a0b	5a		phy				phy
.2a0c	20 4b 2a	jsr $2a4b			jsr 	InputString 			; input a string (manually)
.2a0f	a2 01		ldx #$01			ldx 	#1
.2a11	20 38 2a	jsr $2a38			jsr 	BufferToStackX 			; make stack,x ref input string.
.2a14	a5 90		lda $90				lda 	esType 					; if target type numeric
.2a16	29 40		and #$40			and 	#$40 					; then convert to number
.2a18	d0 10		bne $2a2a			bne 	_CIWrite
.2a1a	a2 01		ldx #$01			ldx 	#1
.2a1c	20 06 2c	jsr $2c06			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2a1f	a9 0a		lda #$0a			lda 	#10
.2a21	20 f4 3c	jsr $3cf4			jsr 	MInt32FromString 		; convert it back from a string.
.2a24	7a		ply				ply
.2a25	b0 03		bcs $2a2a			bcs 	_CIWrite 				; successfully converted.
.2a27	18		clc				clc 							; default fail FP conversion
.2a28	90 da		bcc $2a04			bcc		_CIRetry				; failed, try again.
.2a2a					_CIWrite:
.2a2a	a2 00		ldx #$00			ldx 	#0
.2a2c	20 a6 2b	jsr $2ba6			jsr 	WriteValue
.2a2f	4c d9 29	jmp $29d9			jmp 	Command_Input
.2a32					_CISyntax:
.2a32	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a34	20 27 15	jsr $1527		jsr	errorHandler
.2a37					_CIExit:
.2a37	60		rts				rts
.2a38					BufferToStackX:
.2a38	a9 3d		lda #$3d			lda 	#InputBuffer & $FF
.2a3a	95 98		sta $98,x			sta 	esInt0,x
.2a3c	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.2a3e	95 a0		sta $a0,x			sta 	esInt1,x
.2a40	a9 00		lda #$00			lda 	#0
.2a42	95 a8		sta $a8,x			sta 	esInt2,x
.2a44	95 b0		sta $b0,x			sta 	esInt3,x
.2a46	a9 40		lda #$40			lda 	#$40
.2a48	95 90		sta $90,x			sta 	esType,x
.2a4a	60		rts				rts
.2a4b					InputString:
.2a4b	a9 00		lda #$00			lda 	#0
.2a4d	8d 3d 0d	sta $0d3d			sta 	InputBuffer
.2a50					_InputLoop:
.2a50	a2 18		ldx #$18		ldx	#24
.2a52	20 05 15	jsr $1505		jsr	deviceHandler
.2a55	a2 08		ldx #$08		ldx	#8
.2a57	20 05 15	jsr $1505		jsr	deviceHandler
.2a5a	c9 00		cmp #$00			cmp 	#0
.2a5c	f0 f2		beq $2a50			beq 	_InputLoop
.2a5e	c9 08		cmp #$08			cmp 	#8
.2a60	f0 19		beq $2a7b			beq 	_InputBackspace
.2a62	c9 0d		cmp #$0d			cmp 	#13
.2a64	f0 21		beq $2a87			beq 	_InputExit
.2a66	ae 3d 0d	ldx $0d3d			ldx 	InputBuffer
.2a69	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2a6b	f0 e3		beq $2a50			beq 	_InputLoop
.2a6d	9d 3e 0d	sta $0d3e,x			sta 	InputBuffer+1,x 		; write char
.2a70	ee 3d 0d	inc $0d3d			inc 	InputBuffer 			; advance count.
.2a73					_InputPrintLoop:
.2a73	a2 12		ldx #$12		ldx	#18
.2a75	20 05 15	jsr $1505		jsr	deviceHandler
.2a78	4c 50 2a	jmp $2a50			jmp	 	_InputLoop
.2a7b					_InputBackspace:
.2a7b	ad 3d 0d	lda $0d3d			lda 	InputBuffer 			; at start
.2a7e	f0 d0		beq $2a50			beq 	_InputLoop
.2a80	ce 3d 0d	dec $0d3d			dec 	InputBuffer
.2a83	a9 08		lda #$08			lda 	#8
.2a85	d0 ec		bne $2a73			bne 	_InputPrintLoop
.2a87					_InputExit:
.2a87	a2 04		ldx #$04		ldx	#4
.2a89	20 05 15	jsr $1505		jsr	deviceHandler
.2a8c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d5e					lastPrintToken:
>0d5e							.fill 	1
.2a8d					Command_Print:
.2a8d	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2a8f	8d 5e 0d	sta $0d5e			sta 	lastPrintToken
.2a92	88		dey				dey
.2a93					_PrintLoopSkip:
.2a93	c8		iny				iny
.2a94					_PrintLoop:
.2a94	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2a96	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2a98	f0 5b		beq $2af5			beq 	_PrintExit
.2a9a	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2a9c	f0 57		beq $2af5			beq 	_PrintExit
.2a9e	8d 5e 0d	sta $0d5e			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2aa1	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2aa3	f0 ee		beq $2a93			beq 	_PrintLoopSkip
.2aa5	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2aa7	f0 3c		beq $2ae5			beq	 	_PrintNewLine
.2aa9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2aab	f0 40		beq $2aed			beq 	_PrintTab
.2aad	20 e1 37	jsr $37e1			jsr 	EvaluateRoot 				; evaluate something at the root
.2ab0	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2ab2	85 2a		sta $2a				sta 	temp0
.2ab4	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2ab6	85 2b		sta $2b				sta 	1+(temp0)
.2ab8	a5 90		lda $90				lda 	esType 						; get type
.2aba	f0 15		beq $2ad1			beq		_PrintInteger
.2abc	4a		lsr a				lsr 	a 							; check for floating point
.2abd	b0 08		bcs $2ac7			bcs 	_PrintFloat
.2abf					_PrintString:
.2abf	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2ac1	20 06 2c	jsr $2c06			jsr 	TOSToTemp0
.2ac4	4c df 2a	jmp $2adf			jmp 	_PrintTemp0 				; print no leading space.
.2ac7					_PrintFloat:
.2ac7	a9 00		lda #$00			lda 	#0 							; stack level.
.2ac9	a2 16		ldx #$16		ldx	#22
.2acb	20 22 27	jsr $2722		jsr	floatingpointHandler
.2ace	4c d8 2a	jmp $2ad8			jmp 	_PrintSpaceTemp0
.2ad1					_PrintInteger:
.2ad1	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2ad3	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2ad5	20 d9 3d	jsr $3dd9			jsr 	MInt32ToString				; convert to text
.2ad8					_PrintSpaceTemp0:
.2ad8	a9 20		lda #$20			lda 	#32
.2ada	a2 12		ldx #$12		ldx	#18
.2adc	20 05 15	jsr $1505		jsr	deviceHandler
.2adf					_PrintTemp0:
.2adf	20 06 2b	jsr $2b06			jsr 	PrintString
.2ae2	4c 94 2a	jmp $2a94			jmp 	_PrintLoop
.2ae5					_PrintNewLine:
.2ae5	a2 04		ldx #$04		ldx	#4
.2ae7	20 05 15	jsr $1505		jsr	deviceHandler
.2aea	4c 93 2a	jmp $2a93			jmp 	_PrintLoopSkip
.2aed					_PrintTab:
.2aed	a2 1a		ldx #$1a		ldx	#26
.2aef	20 05 15	jsr $1505		jsr	deviceHandler
.2af2	4c 93 2a	jmp $2a93			jmp 	_PrintLoopSkip
.2af5					_PrintExit:
.2af5	ad 5e 0d	lda $0d5e			lda		lastPrintToken 				; check last token
.2af8	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2afa	f0 09		beq $2b05			beq 	_PrintExit2
.2afc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2afe	f0 05		beq $2b05			beq 	_PrintExit2
.2b00	a2 04		ldx #$04		ldx	#4
.2b02	20 05 15	jsr $1505		jsr	deviceHandler
.2b05					_PrintExit2:
.2b05	60		rts				rts
.2b06					PrintString:
.2b06	da		phx				phx
.2b07	5a		phy				phy
.2b08	a0 00		ldy #$00			ldy 	#0							; get length
.2b0a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b0c	aa		tax				tax 								; into X
.2b0d	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2b0f	f0 0e		beq $2b1f			beq 	_PSExit
.2b11	ca		dex				dex
.2b12	da		phx				phx
.2b13	c8		iny				iny
.2b14	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b16	a2 12		ldx #$12		ldx	#18
.2b18	20 05 15	jsr $1505		jsr	deviceHandler
.2b1b	fa		plx				plx
.2b1c	4c 0d 2b	jmp $2b0d			jmp 	_PSLoop
.2b1f					_PSExit:
.2b1f	7a		ply				ply
.2b20	fa		plx				plx
.2b21	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2b22					Command_CLS:
.2b22	a2 02		ldx #$02		ldx	#2
.2b24	20 05 15	jsr $1505		jsr	deviceHandler
.2b27	60		rts				rts
.2b28					Command_Ink:
.2b28	a2 00		ldx #$00			ldx 	#0
.2b2a	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger
.2b2d	a2 06		ldx #$06		ldx	#6
.2b2f	20 05 15	jsr $1505		jsr	deviceHandler
.2b32	60		rts				rts
.2b33					Command_Paper:
.2b33	a2 00		ldx #$00			ldx 	#0
.2b35	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger
.2b38	a2 10		ldx #$10		ldx	#16
.2b3a	20 05 15	jsr $1505		jsr	deviceHandler
.2b3d	60		rts				rts
.2b3e					Command_Locate:
.2b3e	a2 00		ldx #$00			ldx 	#0
.2b40	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger
.2b43	20 ff 3e	jsr $3eff			jsr 	CheckComma
.2b46	e8		inx				inx
.2b47	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger
.2b4a	5a		phy				phy
.2b4b	a4 99		ldy $99				ldy 	esInt0+1
.2b4d	a5 98		lda $98				lda 	esInt0
.2b4f	a2 0e		ldx #$0e		ldx	#14
.2b51	20 05 15	jsr $1505		jsr	deviceHandler
.2b54	7a		ply				ply
.2b55	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2b56					Command_VDU:
.2b56	20 00 38	jsr $3800			jsr 	EvaluateRootInteger 			; get integer at root.
.2b59	a5 98		lda $98				lda 	esInt0
.2b5b	a2 12		ldx #$12		ldx	#18
.2b5d	20 05 15	jsr $1505		jsr	deviceHandler
.2b60					_CVNext:
.2b60	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2b62	c8		iny				iny
.2b63	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2b65	f0 ef		beq $2b56			beq 	Command_VDU
.2b67	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2b69	d0 0a		bne $2b75			bne 	_CVExit
.2b6b	a5 a0		lda $a0				lda 	esInt1
.2b6d	a2 12		ldx #$12		ldx	#18
.2b6f	20 05 15	jsr $1505		jsr	deviceHandler
.2b72	4c 60 2b	jmp $2b60			jmp 	_CVNext
.2b75	88		dey		_CVExit:dey
.2b76	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2b77					Command_Assert:
.2b77	20 00 38	jsr $3800			jsr 	EvaluateRootInteger 		; what is being asserted.
.2b7a	20 a8 3e	jsr $3ea8			jsr 	MInt32Zero 					; is it true ?
.2b7d	f0 01		beq $2b80			beq 	_CAError
.2b7f	60		rts				rts
.2b80					_CAError:
.2b80	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2b82	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2b85					Command_Dim:
.2b85	a2 04		ldx #$04		ldx	#4
.2b87	20 5f 4e	jsr $4e5f		jsr	variableHandler
.2b8a	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2b8c	c8		iny				iny
.2b8d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2b8f	f0 f4		beq $2b85			beq 	Command_Dim
.2b91	88		dey				dey 								; unpick get
.2b92	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2b93					CommandLet:
.2b93	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2b95	20 3b 38	jsr $383b			jsr 	EvaluateReference
.2b98	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2b9a	20 e7 3e	jsr $3ee7			jsr 	CheckToken
.2b9d	e8		inx				inx 								; do RHS
.2b9e	20 e3 37	jsr $37e3			jsr 	Evaluate 					; evaluate and dereference
.2ba1	ca		dex				dex
.2ba2	20 a6 2b	jsr $2ba6			jsr 	WriteValue 					; write it out
.2ba5	60		rts				rts
.2ba6					WriteValue:
.2ba6	5a		phy				phy
.2ba7	20 06 2c	jsr $2c06			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2baa	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2bac	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2bae	29 40		and #$40			and 	#$40
.2bb0	d0 4f		bne $2c01			bne		_WVType
.2bb2	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2bb4	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2bb6	29 40		and #$40			and 	#$40
.2bb8	d0 1f		bne $2bd9			bne 	_WVCopyString
.2bba	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2bbc	15 91		ora $91,x			ora 	esType+1,x
.2bbe	4a		lsr a				lsr 	a
.2bbf	90 22		bcc $2be3			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2bc1	b5 90		lda $90,x			lda 	esType,x
.2bc3	4a		lsr a				lsr 	a
.2bc4	90 3b		bcc $2c01			bcc 	_WVType
.2bc6	e8		inx				inx 								; force the value being written to be a float.
.2bc7	20 47 34	jsr $3447			jsr 	BPMakeFloat
.2bca	ca		dex				dex
.2bcb	20 06 2c	jsr $2c06			jsr 	TOSToTemp0 					; set Temp0 to write address
.2bce	e8		inx				inx
.2bcf	8a		txa				txa
.2bd0	a2 22		ldx #$22		ldx	#34
.2bd2	20 22 27	jsr $2722		jsr	floatingpointHandler
.2bd5	aa		tax				tax
.2bd6	4c ff 2b	jmp $2bff			jmp 	_WVCopyExit
.2bd9					_WVCopyString:
.2bd9	8a		txa				txa
.2bda	a2 10		ldx #$10		ldx	#16
.2bdc	20 18 42	jsr $4218		jsr	stringHandler
.2bdf	aa		tax				tax
.2be0	4c ff 2b	jmp $2bff			jmp 	_WVCopyExit
.2be3					_WVCopyData4:
.2be3	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2be5	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2be7	d0 10		bne $2bf9			bne 	_WVCopyData1
.2be9	a0 03		ldy #$03			ldy 	#3
.2beb	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2bed	91 2a		sta ($2a),y			sta 	(temp0),y
.2bef	88		dey				dey
.2bf0	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2bf2	91 2a		sta ($2a),y			sta 	(temp0),y
.2bf4	88		dey				dey
.2bf5	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2bf7	91 2a		sta ($2a),y			sta 	(temp0),y
.2bf9					_WVCopyData1:
.2bf9	a0 00		ldy #$00			ldy 	#0
.2bfb	b5 99		lda $99,x			lda 	esInt0+1,x
.2bfd	91 2a		sta ($2a),y			sta 	(temp0),y
.2bff					_WVCopyExit:
.2bff	7a		ply				ply
.2c00	60		rts				rts
.2c01					_WVType:
.2c01	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c03	20 27 15	jsr $1527		jsr	errorHandler
.2c06					TOSToTemp0:
.2c06	b5 98		lda $98,x			lda 	esInt0,x
.2c08	85 2a		sta $2a				sta 	temp0
.2c0a	b5 a0		lda $a0,x			lda 	esInt1,x
.2c0c	85 2b		sta $2b				sta 	temp0+1
.2c0e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2c0f					Command_Poke:
.2c0f	a9 01		lda #$01			lda 	#1
.2c11	d0 06		bne $2c19			bne 	PokeGeneral
.2c13					Command_Doke:
.2c13	a9 02		lda #$02			lda 	#2
.2c15	d0 02		bne $2c19			bne 	PokeGeneral
.2c17					Command_Loke:
.2c17	a9 03		lda #$03			lda 	#3
.2c19					PokeGeneral:
.2c19	48		pha				pha 								; save id (PDL = 123)
.2c1a	20 00 38	jsr $3800			jsr 	EvaluateRootInteger 		; target address
.2c1d	20 ff 3e	jsr $3eff			jsr	 	CheckComma
.2c20	e8		inx				inx
.2c21	20 02 38	jsr $3802			jsr 	EvaluateInteger 			; what value to POKE ?
.2c24	ca		dex				dex
.2c25	20 06 2c	jsr $2c06			jsr 	TOSToTemp0 					; temp0 points to the target address
.2c28	84 32		sty $32				sty 	tempShort 					; save Y
.2c2a	68		pla				pla 								; get copy type (1-3) and dispatch
.2c2b	aa		tax				tax
.2c2c	ca		dex				dex
.2c2d	f0 14		beq $2c43			beq 	_Poke1
.2c2f	ca		dex				dex
.2c30	f0 0b		beq $2c3d			beq 	_Poke2
.2c32	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2c34	a5 b1		lda $b1				lda 	esInt3+1
.2c36	91 2a		sta ($2a),y			sta 	(temp0),y
.2c38	88		dey				dey
.2c39	a5 a9		lda $a9				lda 	esInt2+1
.2c3b	91 2a		sta ($2a),y			sta 	(temp0),y
.2c3d					_Poke2:
.2c3d	a0 01		ldy #$01			ldy 	#1
.2c3f	a5 a1		lda $a1				lda 	esInt1+1
.2c41	91 2a		sta ($2a),y			sta 	(temp0),y
.2c43					_Poke1:
.2c43	a0 00		ldy #$00			ldy 	#0
.2c45	a5 99		lda $99				lda 	esInt0+1
.2c47	91 2a		sta ($2a),y			sta 	(temp0),y
.2c49	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2c4b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2c4c					Command_Rem:
.2c4c					Command_Rem2:
.2c4c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2c4e	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2c50	d0 06		bne $2c58			bne 	_CRNotString
.2c52	c8		iny				iny
.2c53	98		tya				tya
.2c54	38		sec				sec
.2c55	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2c57	a8		tay				tay
.2c58					_CRNotString:
.2c58	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2c59					CommandStop:
.2c59	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2c5b	20 27 15	jsr $1527		jsr	errorHandler
.2c5e					CommandEnd:
.2c5e	4c 68 3f	jmp $3f68			jmp 	WarmStart
.2c61					CommandXemu:
.2c61	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2c64					AdvanceNextLine:
.2c64	a0 00		ldy #$00			ldy 	#0 							; get offset
.2c66	b1 28		lda ($28),y			lda 	(codePtr),y
.2c68	18		clc				clc 								; add to codePtr
.2c69	65 28		adc $28				adc 	codePtr
.2c6b	85 28		sta $28				sta 	codePtr
.2c6d	90 02		bcc $2c71			bcc 	_ANLNoCarry
.2c6f	e6 29		inc $29				inc 	codePtr+1
.2c71					_ANLNoCarry:
.2c71	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2c73	f0 e9		beq $2c5e			beq 	CommandEnd 					; execute END
.2c75	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2c77	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2c78					Command_FOR:
.2c78	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2c7a	a2 0b		ldx #$0b			ldx 	#11
.2c7c	20 1a 3f	jsr $3f1a			jsr 	RSClaim
.2c7f	20 93 2b	jsr $2b93			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2c82	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2c84	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2c86	d0 48		bne $2cd0			bne 	_CFType
.2c88	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2c8a	20 e7 3e	jsr $3ee7			jsr 	CheckToken
.2c8d	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2c8f	20 02 38	jsr $3802			jsr 	EvaluateInteger				; get terminal value in stack 1
.2c92	5a		phy				phy
.2c93	a0 04		ldy #$04			ldy 	#4
.2c95	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2c97	91 37		sta ($37),y			sta 	(rsPointer),y
.2c99	c8		iny				iny
.2c9a	a5 a0		lda $a0				lda		esInt1
.2c9c	91 37		sta ($37),y			sta 	(rsPointer),y
.2c9e	c8		iny				iny
.2c9f	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2ca1	91 37		sta ($37),y			sta 	(rsPointer),y
.2ca3	c8		iny				iny
.2ca4	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2ca6	91 37		sta ($37),y			sta 	(rsPointer),y
.2ca8	c8		iny				iny
.2ca9	a5 a1		lda $a1				lda		esInt1+1
.2cab	91 37		sta ($37),y			sta 	(rsPointer),y
.2cad	c8		iny				iny
.2cae	a5 a9		lda $a9				lda		esInt2+1
.2cb0	91 37		sta ($37),y			sta 	(rsPointer),y
.2cb2	c8		iny				iny
.2cb3	a5 b1		lda $b1				lda		esInt3+1
.2cb5	91 37		sta ($37),y			sta 	(rsPointer),y
.2cb7	7a		ply				ply
.2cb8	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2cba	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2cbc	d0 0c		bne $2cca			bne 	_CFDone
.2cbe	c8		iny				iny									; skip over step.
.2cbf	20 02 38	jsr $3802			jsr 	EvaluateInteger 			; get step
.2cc2	5a		phy				phy
.2cc3	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2cc5	a0 06		ldy #$06			ldy 	#6
.2cc7	91 37		sta ($37),y			sta 	(rsPointer),y
.2cc9	7a		ply				ply
.2cca					_CFDone:
.2cca	a9 01		lda #$01			lda 	#1
.2ccc	20 46 3f	jsr $3f46			jsr 	RSSavePosition 				; save position.
.2ccf	60		rts				rts
.2cd0					_CFType:
.2cd0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2cd2	20 27 15	jsr $1527		jsr	errorHandler
.2cd5					Command_NEXT:
.2cd5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2cd7	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2cd9	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2cdb	f0 05		beq $2ce2			beq 	_isok
.2cdd	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2cdf	20 27 15	jsr $1527		jsr	errorHandler
.2ce2					_isok:
.2ce2	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2ce4	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2ce6	b0 16		bcs $2cfe			bcs 	_CNNoIndex
.2ce8	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2cea	20 3b 38	jsr $383b			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2ced	5a		phy				phy
.2cee	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2cf0	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cf2	d5 98		cmp $98,x			cmp 	esInt0,x
.2cf4	d0 72		bne $2d68			bne 	_CNBadIndex
.2cf6	c8		iny				iny
.2cf7	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cf9	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2cfb	d0 6b		bne $2d68			bne 	_CNBadIndex
.2cfd	7a		ply				ply
.2cfe					_CNNoIndex:
.2cfe	5a		phy				phy
.2cff	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2d01	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d03	85 2a		sta $2a				sta 	temp0
.2d05	c8		iny				iny
.2d06	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d08	85 2b		sta $2b				sta 	temp0+1
.2d0a	c8		iny				iny
.2d0b	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2d0d	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2d0f	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2d11	10 01		bpl $2d14			bpl 	_CNSignX
.2d13	ca		dex				dex  								; X = $FF
.2d14					_CNSignX:
.2d14	18		clc				clc 								; add to the LSB
.2d15	a0 00		ldy #$00			ldy 	#0
.2d17	71 2a		adc ($2a),y			adc 	(temp0),y
.2d19	91 2a		sta ($2a),y			sta 	(temp0),y
.2d1b					_CNPropogate:
.2d1b	c8		iny				iny  								; add the sign extended in X to the rest.
.2d1c	8a		txa				txa
.2d1d	71 2a		adc ($2a),y			adc 	(temp0),y
.2d1f	91 2a		sta ($2a),y			sta 	(temp0),y
.2d21	c8		iny				iny
.2d22	8a		txa				txa
.2d23	71 2a		adc ($2a),y			adc 	(temp0),y
.2d25	91 2a		sta ($2a),y			sta 	(temp0),y
.2d27	c8		iny				iny
.2d28	8a		txa				txa
.2d29	71 2a		adc ($2a),y			adc 	(temp0),y
.2d2b	91 2a		sta ($2a),y			sta 	(temp0),y
.2d2d	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2d2e	a5 37		lda $37				lda 	rsPointer
.2d30	69 07		adc #$07			adc 	#7
.2d32	85 2c		sta $2c				sta 	temp1
.2d34	a9 00		lda #$00			lda 	#0
.2d36	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2d38	a8		tay				tay 								; and clear the Y register again.
.2d39	65 38		adc $38				adc 	rsPointer+1
.2d3b	85 2d		sta $2d				sta 	temp1+1
.2d3d	38		sec				sec 								; calculate current - limit oring interim values.
.2d3e	20 74 2d	jsr $2d74			jsr 	_CNCompare 					; each of these does a byte.
.2d41	20 74 2d	jsr $2d74			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2d44	20 74 2d	jsr $2d74			jsr 	_CNCompare 					; and the carry of the subtraction.
.2d47	20 74 2d	jsr $2d74			jsr 	_CNCompare
.2d4a	50 02		bvc $2d4e			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2d4c	49 80		eor #$80			eor 	#$80
.2d4e					_CNNoOverflow:
.2d4e	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2d50	30 1b		bmi $2d6d			bmi 	_CNCheckDownto
.2d52	c9 00		cmp #$00			cmp 	#0
.2d54	30 0b		bmi $2d61			bmi 	_CNLoopRound 				; loop round if < =
.2d56	a5 2e		lda $2e				lda 	temp2
.2d58	f0 07		beq $2d61			beq 	_CNLoopRound
.2d5a					_CNLoopExit:
.2d5a	7a		ply				ply
.2d5b	a9 0b		lda #$0b			lda 	#11
.2d5d	20 3c 3f	jsr $3f3c			jsr 	RSFree
.2d60	60		rts				rts
.2d61					_CNLoopRound:
.2d61	7a		ply				ply
.2d62	a9 01		lda #$01			lda 	#1
.2d64	20 59 3f	jsr $3f59			jsr 	RSLoadPosition				; go back to the loop top
.2d67	60		rts				rts
.2d68					_CNBadIndex:
.2d68	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2d6a	20 27 15	jsr $1527		jsr	errorHandler
.2d6d					_CNCheckDownto:
.2d6d	c9 00		cmp #$00			cmp 	#0
.2d6f	10 f0		bpl $2d61			bpl 	_CNLoopRound
.2d71	4c 5a 2d	jmp $2d5a			jmp 	_CNLoopExit
.2d74					_CNCompare:
.2d74	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2d76	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2d78	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2d7a	85 2e		sta $2e				sta 	temp2
.2d7c	c8		iny				iny
.2d7d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2d7e					CommandIf:
.2d7e	20 00 38	jsr $3800			jsr 	EvaluateRootInteger 		; get what's being tested.
.2d81	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2d83	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2d85	f0 04		beq $2d8b			beq 	_IfSimple
.2d87	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2d89	d0 1b		bne $2da6			bne 	_IfComplex
.2d8b					_IfSimple:
.2d8b	20 a8 3e	jsr $3ea8			jsr 	MInt32Zero					; check if TOS zero
.2d8e	f0 10		beq $2da0			beq 	_IfEOL 						; go to next line.
.2d90	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2d92	c8		iny				iny
.2d93	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2d95	f0 0c		beq $2da3			beq 	_IfGoto 					; do the Goto code
.2d97	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2d99	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2d9b	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2d9d	f0 04		beq $2da3			beq 	_IfGoto
.2d9f	60		rts				rts 								; else continue on this line.
.2da0					_IfEOL:
.2da0	4c 64 2c	jmp $2c64			jmp 	AdvanceNextLine 			; go to next line
.2da3					_IfGoto:
.2da3	4c a7 29	jmp $29a7			jmp 	CommandGoto
.2da6					_IfComplex:
.2da6	20 a8 3e	jsr $3ea8			jsr 	MInt32Zero 					; is it true ?
.2da9	f0 01		beq $2dac			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2dab	60		rts				rts 								; else continue.
.2dac					_IFSkip:
.2dac	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2dae	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2db0	4c 3b 30	jmp $303b			jmp		ScanForward
.2db3					Command_ELSE:
.2db3	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2db5	8a		txa				txa
.2db6	4c 3b 30	jmp $303b			jmp		ScanForward
.2db9					Command_ENDIF:
.2db9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d5f					storeSize:
>0d5f							.fill 	1
.2dba					CommandLocal:
.2dba	a2 00		ldx #$00			ldx 	#0
.2dbc	20 d8 2d	jsr $2dd8			jsr 	LocaliseVariable 			; localise one.
.2dbf					_CLCheckNext:
.2dbf	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2dc1	c8		iny				iny
.2dc2	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2dc4	f0 06		beq $2dcc			beq 	_CLAssignment
.2dc6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2dc8	f0 f0		beq $2dba			beq 	CommandLocal
.2dca	88		dey				dey
.2dcb	60		rts				rts
.2dcc					_CLAssignment:
.2dcc	a2 01		ldx #$01			ldx 	#1
.2dce	20 e3 37	jsr $37e3			jsr 	Evaluate 					; evaluate RHS
.2dd1	ca		dex				dex
.2dd2	20 a6 2b	jsr $2ba6			jsr 	WriteValue
.2dd5	4c bf 2d	jmp $2dbf			jmp 	_CLCheckNext
.2dd8					LocaliseVariable:
.2dd8	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2dda	c9 40		cmp #$40			cmp 	#$40
.2ddc	b0 63		bcs $2e41			bcs 	_LVSyntax
.2dde	8a		txa				txa 								; get the address of that variable.
.2ddf	a2 02		ldx #$02		ldx	#2
.2de1	20 5f 4e	jsr $4e5f		jsr	variableHandler
.2de4	aa		tax				tax
.2de5	da		phx				phx
.2de6	5a		phy				phy
.2de7	20 06 2c	jsr $2c06			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2dea	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2dec	0a		asl a				asl 	a
.2ded	10 16		bpl $2e05			bpl 	_LVPushNumber
.2def	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2df1	b1 2a		lda ($2a),y			lda 	(temp0),y
.2df3	c8		iny				iny
.2df4	85 2c		sta $2c				sta 	temp1
.2df6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2df8	85 2d		sta $2d				sta 	temp1+1
.2dfa	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2dfc	b1 2c		lda ($2c),y			lda 	(temp1),y
.2dfe	aa		tax				tax 								; into X
.2dff	e8		inx				inx 								; +1 for length.
.2e00	a9 24		lda #$24			lda 	#markerString
.2e02	4c 1a 2e	jmp $2e1a			jmp 	_LVWriteFrame
.2e05					_LVPushNumber:
.2e05	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2e07	85 2c		sta $2c				sta 	temp1
.2e09	a5 2b		lda $2b				lda 	temp0+1
.2e0b	85 2d		sta $2d				sta 	temp1+1
.2e0d	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2e0f	4a		lsr a				lsr 	a
.2e10	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2e12	a2 04		ldx #$04			ldx 	#VarISize
.2e14	90 04		bcc $2e1a			bcc 	_LVIsInteger
.2e16	a9 23		lda #$23			lda 	#markerFloat
.2e18	a2 06		ldx #$06			ldx 	#VarFSize
.2e1a					_LVIsInteger:
.2e1a					_LVWriteFrame:
.2e1a	8e 5f 0d	stx $0d5f			stx 	storeSize 					; number of bytes to copy from (temp0)
.2e1d	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2e1e	e8		inx				inx
.2e1f	e8		inx				inx
.2e20	20 1a 3f	jsr $3f1a			jsr 	RSClaim 					; create the stack frame.
.2e23	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2e25	a0 01		ldy #$01			ldy 	#1
.2e27	91 37		sta ($37),y			sta 	(rsPointer),y
.2e29	c8		iny				iny
.2e2a	a5 2b		lda $2b				lda 	temp0+1
.2e2c	91 37		sta ($37),y			sta 	(rsPointer),y
.2e2e	a0 00		ldy #$00			ldy 	#0
.2e30					_LVCopyData:
.2e30	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2e32	c8		iny				iny 								; write allowing for the header bit.
.2e33	c8		iny				iny
.2e34	c8		iny				iny
.2e35	91 37		sta ($37),y			sta 	(rsPointer),y
.2e37	88		dey				dey
.2e38	88		dey				dey
.2e39	ce 5f 0d	dec $0d5f			dec 	storeSize 					; do it storesize times
.2e3c	d0 f2		bne $2e30			bne 	_LVCopyData
.2e3e	7a		ply				ply
.2e3f	fa		plx				plx
.2e40	60		rts				rts
.2e41					_LVSyntax:
.2e41	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2e43	20 27 15	jsr $1527		jsr	errorHandler
.2e46					RestoreLocals:
.2e46	a2 00		ldx #$00			ldx 	#0
.2e48	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2e4a	c9 40		cmp #$40			cmp	 	#64
.2e4c	90 01		bcc $2e4f			bcc 	_RLocal
.2e4e	60		rts				rts
.2e4f					_RLocal:
.2e4f	da		phx				phx
.2e50	5a		phy				phy
.2e51	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2e53	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e55	85 2a		sta $2a				sta 	temp0
.2e57	c8		iny				iny
.2e58	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e5a	85 2b		sta $2b				sta 	temp0+1
.2e5c	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2e5e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e60	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2e62	f0 25		beq $2e89			beq 	_RString
.2e64	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2e66	c9 25		cmp #$25			cmp 	#markerInt
.2e68	f0 02		beq $2e6c			beq 	_RIsInteger
.2e6a	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2e6c					_RIsInteger:
.2e6c	da		phx				phx
.2e6d	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2e6f					_RCopyBack:
.2e6f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e71	88		dey				dey
.2e72	88		dey				dey
.2e73	88		dey				dey
.2e74	91 2a		sta ($2a),y			sta 	(temp0),y
.2e76	c8		iny				iny
.2e77	c8		iny				iny
.2e78	c8		iny				iny
.2e79	c8		iny				iny
.2e7a	ca		dex				dex
.2e7b	d0 f2		bne $2e6f			bne 	_RCopyBack
.2e7d	68		pla				pla 								; get size add 3
.2e7e	18		clc				clc
.2e7f	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2e81					_RRestoreAAndLoop:
.2e81	20 3c 3f	jsr $3f3c			jsr 	RSFree
.2e84	7a		ply				ply
.2e85	fa		plx				plx
.2e86	4c 46 2e	jmp $2e46			jmp 	RestoreLocals 				; go see if there are any more locals.
.2e89					_RString:
.2e89	a2 00		ldx #$00			ldx 	#0
.2e8b	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2e8d	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e8f	95 98		sta $98,x			sta 	esInt0,x
.2e91	c8		iny				iny
.2e92	b1 37		lda ($37),y			lda 	(rsPointer),y
.2e94	95 a0		sta $a0,x			sta 	esInt1,x
.2e96	18		clc				clc
.2e97	a5 37		lda $37				lda 	rsPointer
.2e99	69 03		adc #$03			adc 	#3
.2e9b	95 99		sta $99,x			sta 	esInt0+1,x
.2e9d	a5 38		lda $38				lda 	rsPointer+1
.2e9f	69 00		adc #$00			adc 	#0
.2ea1	95 a1		sta $a1,x			sta 	esInt1+1,x
.2ea3	8a		txa				txa
.2ea4	a2 10		ldx #$10		ldx	#16
.2ea6	20 18 42	jsr $4218		jsr	stringHandler
.2ea9	a0 03		ldy #$03			ldy 	#3 							; get string length
.2eab	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ead	18		clc				clc
.2eae	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2eb0	4c 81 2e	jmp $2e81			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d60					paramCount:
>0d60							.fill 	1
.2eb3					CallProc:
.2eb3	20 3b 2f	jsr $2f3b			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2eb6	48		pha				pha 								; save length on stack
.2eb7	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2eb9	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2ebb	48		pha				pha
.2ebc	a5 2a		lda $2a				lda 	temp0
.2ebe	48		pha				pha
.2ebf	98		tya				tya 								; calculate Y + length
.2ec0	18		clc				clc
.2ec1	65 32		adc $32				adc 	tempShort
.2ec3	a8		tay				tay
.2ec4	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2ec6					_CallProcEvalParams:
.2ec6	e8		inx				inx
.2ec7	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2ec9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2ecb	f0 0b		beq $2ed8			beq 	_CPDoneParams
.2ecd	20 e3 37	jsr $37e3			jsr 	Evaluate 					; evaluate a parameter
.2ed0	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2ed2	c8		iny				iny
.2ed3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2ed5	f0 ef		beq $2ec6			beq 	_CallProcEvalParams
.2ed7	88		dey				dey 								; undo consumption.
.2ed8					_CPDoneParams:
.2ed8	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen 			; check closing parenthesis.
.2edb	8e 60 0d	stx $0d60			stx 	paramCount 					; store parameter count+1
.2ede	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2ee0	a9 50		lda #$50			lda 	#markerPROC
.2ee2	20 1a 3f	jsr $3f1a			jsr 	RSClaim
.2ee5	a9 01		lda #$01			lda 	#1 							; store return address.
.2ee7	20 46 3f	jsr $3f46			jsr 	RSSavePosition
.2eea	68		pla				pla 								; get the new code Ptr
.2eeb	85 28		sta $28				sta 	codePtr
.2eed	68		pla				pla
.2eee	85 29		sta $29				sta 	codePtr+1
.2ef0	68		pla				pla 								; length of name + 4 is the param start.
.2ef1	18		clc				clc
.2ef2	69 04		adc #$04			adc 	#4
.2ef4	a8		tay				tay
.2ef5	a2 ff		ldx #$ff			ldx 	#$FF
.2ef7					_CPLoadParameters:
.2ef7	e8		inx				inx 								; point to where the address should be loaded.
.2ef8	ec 60 0d	cpx $0d60			cpx 	paramCount 					; too many parameters in definition ?
.2efb	f0 1e		beq $2f1b			beq 	_CPParamError
.2efd	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2eff	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2f01	f0 0e		beq $2f11			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2f03	20 d8 2d	jsr $2dd8			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2f06	20 a6 2b	jsr $2ba6			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2f09	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2f0b	c8		iny				iny
.2f0c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2f0e	f0 e7		beq $2ef7			beq 	_CPLoadParameters
.2f10	88		dey				dey 								; no, unconsume and check for )
.2f11					_CPParamComplete:
.2f11	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen 			; check )
.2f14	e8		inx				inx 								; check right number of parameters have been consumed
.2f15	ec 60 0d	cpx $0d60			cpx 	paramCount
.2f18	d0 01		bne $2f1b			bne 	_CPParamError
.2f1a	60		rts				rts
.2f1b					_CPParamError:
.2f1b	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2f1d	20 27 15	jsr $1527		jsr	errorHandler
.2f20					ReturnProc:
.2f20	20 46 2e	jsr $2e46			jsr 	RestoreLocals 				; get the locals back.
.2f23	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2f25	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2f27	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2f29	f0 05		beq $2f30			beq 	_isok
.2f2b	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2f2d	20 27 15	jsr $1527		jsr	errorHandler
.2f30					_isok:
.2f30	a9 01		lda #$01			lda 	#1
.2f32	20 59 3f	jsr $3f59			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2f35	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2f37	20 3c 3f	jsr $3f3c			jsr 	RSFree
.2f3a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d61					procList:
>0d61							.fill 	2		 					; terminated by name high being zero.
.0d63					yInLine:
>0d63							.fill 	1
.2f3b					FindProcedure:
.2f3b	8c 63 0d	sty $0d63			sty 	yInLine 					; save current position.
.2f3e	20 f5 2f	jsr $2ff5			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2f41	85 2c		sta $2c				sta 	temp1
.2f43	ad 61 0d	lda $0d61			lda		procList 					; put procList address in temp2
.2f46	85 2e		sta $2e				sta 	temp2
.2f48	ad 62 0d	lda $0d62			lda 	procList+1
.2f4b	85 2f		sta $2f				sta 	temp2+1
.2f4d	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2f4f					_FPLoop:
.2f4f	b1 2e		lda ($2e),y			lda 	(temp2),y
.2f51	f0 4d		beq $2fa0			beq 	_FPError 					; if so, we don't know this procedure.
.2f53	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2f55	c8		iny				iny
.2f56	b1 2e		lda ($2e),y			lda 	(temp2),y
.2f58	85 2a		sta $2a				sta 	temp0
.2f5a	c8		iny				iny
.2f5b	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2f5d	c5 2c		cmp $2c				cmp 	temp1
.2f5f	d0 29		bne $2f8a			bne 	_FPNext 					; hash is different, go to next.
.2f61	38		sec				sec
.2f62	ad 63 0d	lda $0d63			lda 	yInLine 					; position in line must be at least 4
.2f65	e9 04		sbc #$04			sbc 	#4
.2f67	18		clc				clc
.2f68	65 28		adc $28				adc 	codePtr
.2f6a	85 30		sta $30				sta 	temp3
.2f6c	a5 29		lda $29				lda 	codePtr+1
.2f6e	69 00		adc #$00			adc 	#0
.2f70	85 31		sta $31				sta 	temp3+1
.2f72	5a		phy				phy
.2f73	a0 04		ldy #$04			ldy 	#4
.2f75					_FPCName:
.2f75	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2f77	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2f79	d0 0e		bne $2f89			bne 	_FPpulYNext 				; if different go to next one.
.2f7b	c8		iny				iny
.2f7c	c9 3a		cmp #$3a			cmp 	#$3A
.2f7e	90 f5		bcc $2f75			bcc 	_FPCName 					; compare the whole lot....
.2f80	68		pla				pla 								; throw away the saved Y
.2f81	98		tya				tya 								; length of name is Y-4
.2f82	38		sec				sec
.2f83	e9 04		sbc #$04			sbc 	#4
.2f85	ac 63 0d	ldy $0d63			ldy 	yInLine  					; get the original Y back
.2f88	60		rts				rts
.2f89					_FPpulYNext:
.2f89	7a		ply				ply
.2f8a					_FPNext:
.2f8a	c8		iny				iny 								; next procedure record.
.2f8b	10 c2		bpl $2f4f			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2f8d	98		tya				tya 								; subtract 128 from Y
.2f8e	38		sec				sec
.2f8f	e9 80		sbc #$80			sbc 	#128
.2f91	a8		tay				tay
.2f92	18		clc				clc 								; add 128 to temp2, so we can have more than
.2f93	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2f95	69 80		adc #$80			adc 	#128
.2f97	85 2e		sta $2e				sta 	temp2
.2f99	90 b4		bcc $2f4f			bcc 	_FPLoop
.2f9b	e6 2f		inc $2f				inc 	temp2+1
.2f9d	4c 4f 2f	jmp $2f4f			jmp 	_FPLoop
.2fa0					_FPError:
.2fa0	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2fa2	20 27 15	jsr $1527		jsr	errorHandler
.2fa5					ScanProc:
.2fa5	5a		phy				phy
.2fa6	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2fa8	8d 61 0d	sta $0d61			sta 	procList
.2fab	a5 36		lda $36				lda 	lowMemory+1
.2fad	8d 62 0d	sta $0d62			sta 	procList+1
.2fb0	20 24 33	jsr $3324			jsr 	ResetCodeAddress 			; back to the start.
.2fb3					_ScanLoop:
.2fb3	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2fb5	b1 28		lda ($28),y			lda 	(codePtr),y
.2fb7	f0 2a		beq $2fe3			beq 	_ScanExit
.2fb9	a0 03		ldy #$03			ldy 	#3							; get first token
.2fbb	b1 28		lda ($28),y			lda 	(codePtr),y
.2fbd	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2fbf	d0 12		bne $2fd3			bne 	_ScanNext
.2fc1	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2fc3	20 ea 2f	jsr $2fea			jsr 	_ScanWrite
.2fc6	a5 28		lda $28				lda 	codePtr
.2fc8	20 ea 2f	jsr $2fea			jsr 	_ScanWrite
.2fcb	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2fcd	20 f5 2f	jsr $2ff5			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2fd0	20 ea 2f	jsr $2fea			jsr 	_ScanWrite					; and write that
.2fd3					_ScanNext:
.2fd3	18		clc				clc
.2fd4	a0 00		ldy #$00			ldy 	#0
.2fd6	b1 28		lda ($28),y			lda 	(codePtr),y
.2fd8	65 28		adc $28				adc 	codePtr
.2fda	85 28		sta $28				sta 	codePtr
.2fdc	90 d5		bcc $2fb3			bcc 	_ScanLoop
.2fde	e6 29		inc $29				inc 	codePtr+1
.2fe0	4c b3 2f	jmp $2fb3			jmp 	_ScanLoop
.2fe3					_ScanExit:
.2fe3	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2fe5	20 ea 2f	jsr $2fea			jsr 	_ScanWrite
.2fe8	7a		ply				ply
.2fe9	60		rts				rts
.2fea					_ScanWrite:
.2fea	a0 00		ldy #$00			ldy 	#0
.2fec	91 35		sta ($35),y			sta 	(lowMemory),y
.2fee	e6 35		inc $35				inc 	lowMemory
.2ff0	d0 02		bne $2ff4			bne 	_SWNoCarry
.2ff2	e6 36		inc $36				inc 	lowMemory+1
.2ff4					_SWNoCarry:
.2ff4	60		rts				rts
.2ff5					CalculateProcedureHash:
.2ff5	a9 00		lda #$00			lda 	#0 							; clear hash.
.2ff7	85 2a		sta $2a				sta 	temp0
.2ff9					_CPHLoop:
.2ff9	18		clc				clc 								; add character and rotate and add carry back in
.2ffa	b1 28		lda ($28),y			lda 	(codePtr),y
.2ffc	65 2a		adc $2a				adc 	temp0
.2ffe	6a		ror a				ror 	a
.2fff	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.3001	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.3003	b1 28		lda ($28),y			lda 	(codePtr),y
.3005	c8		iny				iny 								; advance incase we go round again.
.3006	c9 3a		cmp #$3a			cmp 	#$3A
.3008	90 ef		bcc $2ff9			bcc 	_CPHLoop
.300a	a5 2a		lda $2a				lda 	temp0
.300c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.300d					Command_Repeat:
.300d	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.300f	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.3011	20 1a 3f	jsr $3f1a			jsr 	RSClaim
.3014	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.3016	20 46 3f	jsr $3f46			jsr 	RSSavePosition
.3019	60		rts				rts
.301a					Command_Until:
.301a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.301c	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.301e	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.3020	f0 05		beq $3027			beq 	_isok
.3022	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.3024	20 27 15	jsr $1527		jsr	errorHandler
.3027					_isok:
.3027	20 00 38	jsr $3800			jsr 	EvaluateRootInteger 		; at the bottom.
.302a	20 a8 3e	jsr $3ea8			jsr 	MInt32Zero					; check if TOS zero
.302d	d0 06		bne $3035			bne 	_CUExit
.302f	a9 01		lda #$01			lda 	#1
.3031	20 59 3f	jsr $3f59			jsr 	RSLoadPosition 				; reload the position from offset 1.
.3034	60		rts				rts
.3035					_CUExit:
.3035	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.3037	20 3c 3f	jsr $3f3c			jsr 	RSFree
.303a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.303b					ScanForward:
.303b	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.303d	86 2d		stx $2d				stx 	temp1+1
.303f	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.3041	85 2e		sta $2e				sta 	temp2
.3043	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.3045	c8		iny				iny
.3046	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.3048	d0 08		bne $3052			bne 	_SFNoCheck 					; if so, check token against entered values.
.304a	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.304c	f0 24		beq $3072			beq 	_SFExit 					; at the same strcture depth.
.304e	c5 2d		cmp $2d				cmp 	temp1+1
.3050	f0 20		beq $3072			beq 	_SFExit
.3052					_SFNoCheck:
.3052	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.3054	90 ed		bcc $3043			bcc 	_SFLoop
.3056	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.3058	90 19		bcc $3073			bcc 	_SFSpecials
.305a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.305c	90 e5		bcc $3043			bcc 	_SFLoop
.305e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.3060	b0 e1		bcs $3043			bcs 	_SFLoop
.3062	aa		tax				tax  								; token in X, and look up the adjuster.
.3063	bd 1e 37	lda $371e,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.3066	38		sec				sec 								; convert to an offset ($FF,$01)
.3067	e9 81		sbc #$81			sbc 	#$81
.3069	18		clc				clc 								; add to depth
.306a	65 2e		adc $2e				adc 	temp2
.306c	85 2e		sta $2e				sta 	temp2
.306e	10 d3		bpl $3043			bpl 	_SFLoop 					; +ve okay to continue
.3070	30 07		bmi $3079			bmi 	SFError 					; if gone -ve then we have a nesting error
.3072	60		rts		_SFExit:rts
.3073					_SFSpecials:
.3073	20 7e 30	jsr $307e			jsr 	ScannerSkipSpecial
.3076	4c 43 30	jmp $3043			jmp 	_SFLoop
.3079					SFError:
.3079	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.307b	20 27 15	jsr $1527		jsr	errorHandler
.307e					ScannerSkipSpecial:
.307e	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.3080	f0 10		beq $3092			beq 	_SFNextLine
.3082	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.3084	f0 2b		beq $30b1			beq 	_SFFloatSkip
.3086	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.3088	f0 02		beq $308c			beq 	_SFSkipString
.308a	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.308b	60		rts				rts 								; token.
.308c					_SFSkipString:
.308c	98		tya				tya
.308d	38		sec				sec
.308e	71 28		adc ($28),y			adc 	(codePtr),y
.3090	a8		tay				tay
.3091	60		rts				rts
.3092					_SFNextLine:
.3092	a0 00		ldy #$00			ldy 	#0 							; get offset
.3094	b1 28		lda ($28),y			lda 	(codePtr),y
.3096	18		clc				clc 								; add to code pointer.
.3097	65 28		adc $28				adc 	codePtr
.3099	85 28		sta $28				sta 	codePtr
.309b	90 02		bcc $309f			bcc		_SFNLNoCarry
.309d	e6 29		inc $29				inc 	codePtr+1
.309f					_SFNLNoCarry:
.309f	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.30a1	d0 0b		bne $30ae			bne		_SFXNL 						; no go round again
.30a3	a5 2c		lda $2c				lda 	temp1
.30a5	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.30a7	d0 d0		bne $3079			bne 	SFError 					; read uses this to search for data statements
.30a9	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.30ab	20 27 15	jsr $1527		jsr	errorHandler
.30ae	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.30b0	60		rts				rts
.30b1					_SFFloatSkip:
.30b1	98		tya				tya 								; skip over an embedded float.
.30b2	18		clc				clc
.30b3	69 05		adc #$05			adc 	#FloatEmbeddedSize
.30b5	a8		tay				tay
.30b6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.30b7					Command_While:
.30b7	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.30b9	a2 04		ldx #$04			ldx 	#4
.30bb	20 1a 3f	jsr $3f1a			jsr 	RSClaim 					; create on stack.
.30be	88		dey				dey
.30bf	a9 01		lda #$01			lda 	#1
.30c1	20 46 3f	jsr $3f46			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.30c4	c8		iny				iny
.30c5	20 00 38	jsr $3800			jsr 	EvaluateRootInteger			; get the conditional
.30c8	20 a8 3e	jsr $3ea8			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.30cb	f0 01		beq $30ce			beq 	_CWFail
.30cd	60		rts				rts
.30ce					_CWFail:
.30ce	a9 04		lda #$04			lda 	#4
.30d0	20 3c 3f	jsr $3f3c			jsr 	RSFree 						; close the just opened position.
.30d3	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.30d5	aa		tax				tax
.30d6	20 3b 30	jsr $303b			jsr 	ScanForward
.30d9	60		rts				rts
.30da					Command_Wend:
.30da	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.30dc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.30de	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.30e0	f0 05		beq $30e7			beq 	_isok
.30e2	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.30e4	20 27 15	jsr $1527		jsr	errorHandler
.30e7					_isok:
.30e7	a9 01		lda #$01			lda 	#1
.30e9	20 59 3f	jsr $3f59			jsr 	RSLoadPosition				; go back until true
.30ec	a9 04		lda #$04			lda 	#4
.30ee	20 3c 3f	jsr $3f3c			jsr 	RSFree 						; close the loop
.30f1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.30f2					CommandClear:
.30f2					XCommandClear:
.30f2	5a		phy				phy
.30f3	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.30f6	85 33		sta $33				sta 	highMemory
.30f8	ad cd 0a	lda $0acd			lda 	endMemory+1
.30fb	85 34		sta $34				sta 	highMemory+1
.30fd	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.3100	85 2a		sta $2a				sta 	temp0
.3102	ad c9 0a	lda $0ac9			lda 	basePage+1
.3105	85 2b		sta $2b				sta 	temp0+1
.3107					_CCFindEnd:
.3107	a0 00		ldy #$00			ldy 	#0
.3109	b1 2a		lda ($2a),y			lda 	(temp0),y
.310b	f0 0c		beq $3119			beq 	_CCFoundEnd 				; offset zero is end.
.310d	18		clc				clc
.310e	65 2a		adc $2a				adc 	temp0 						; move to next line
.3110	85 2a		sta $2a				sta 	temp0
.3112	90 f3		bcc $3107			bcc 	_CCFindEnd
.3114	e6 2b		inc $2b				inc 	temp0+1
.3116	4c 07 31	jmp $3107			jmp 	_CCFindEnd
.3119					_CCFoundEnd:
.3119	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.311b	85 35		sta $35				sta 	lowMemory
.311d	a5 2b		lda $2b				lda 	temp0+1
.311f	85 36		sta $36				sta 	lowMemory+1
.3121	18		clc				clc 								; put temp0+1 in endProgram
.3122	a5 2a		lda $2a				lda 	temp0
.3124	69 01		adc #$01			adc 	#1
.3126	8d ca 0a	sta $0aca			sta 	endProgram
.3129	a5 2b		lda $2b				lda 	temp0+1
.312b	69 00		adc #$00			adc 	#0
.312d	8d cb 0a	sta $0acb			sta 	endProgram+1
.3130	18		clc				clc 								; put a bit of space in.
.3131	a5 35		lda $35				lda 	lowMemory
.3133	69 04		adc #$04			adc 	#4
.3135	85 35		sta $35				sta 	lowMemory
.3137	90 02		bcc $313b			bcc 	_CCNoCarry
.3139	e6 36		inc $36				inc 	lowMemory+1
.313b					_CCNoCarry:
.313b	20 0c 3f	jsr $3f0c			jsr 	RSReset 					; reset the return stack.
.313e	a2 06		ldx #$06		ldx	#6
.3140	20 5f 4e	jsr $4e5f		jsr	variableHandler
.3143	20 a5 2f	jsr $2fa5			jsr 	ScanProc 					; scan for procedures
.3146	20 4c 29	jsr $294c			jsr 	CommandRestore 				; do a restore
.3149	7a		ply				ply
.314a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d64					structIndent:
>0d64							.fill 	1
.314b					CommandList:
.314b	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.314d	8e 64 0d	stx $0d64			stx 	structIndent
.3150	20 81 3e	jsr $3e81			jsr 	MInt32False
.3153	e8		inx				inx
.3154	20 7d 3e	jsr $3e7d			jsr 	MInt32True
.3157	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.3159	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.315b	f0 15		beq $3172			beq 	_CLEndLine
.315d	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.315f	30 1b		bmi $317c			bmi 	_CLDoListing 				; do the whole lot.
.3161	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.3163	20 02 38	jsr $3802			jsr 	EvaluateInteger
.3166	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.3168	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.316a	f0 06		beq $3172			beq 	_CLEndLine
.316c	20 c1 3d	jsr $3dc1			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.316f	4c 7c 31	jmp $317c			jmp 	_CLDoListing 				; own e.g. list 1100
.3172					_CLEndLine:
.3172	c8		iny				iny 								; skip comma
.3173	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.3175	30 05		bmi $317c			bmi 	_CLDoListing
.3177	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.3179	20 02 38	jsr $3802			jsr 	EvaluateInteger				; get end
.317c					_CLDoListing:
.317c	20 24 33	jsr $3324			jsr 	ResetCodeAddress 			; back to the start.
.317f					_CLCheckLoop:
.317f	a2 18		ldx #$18		ldx	#24
.3181	20 05 15	jsr $1505		jsr	deviceHandler
.3184	a0 00		ldy #$00			ldy 	#0							; check end.
.3186	b1 28		lda ($28),y			lda 	(codePtr),y
.3188	f0 41		beq $31cb			beq 	_CLEnd
.318a	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.318c	20 ce 31	jsr $31ce			jsr 	CLCompareLineTOS
.318f	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3191	f0 28		beq $31bb			beq 	_CLNext
.3193	e8		inx				inx
.3194	20 ce 31	jsr $31ce			jsr 	CLCompareLineTOS 			; compare vs higher
.3197	c9 01		cmp #$01			cmp 	#1
.3199	f0 20		beq $31bb			beq 	_CLNext
.319b	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.319d	20 f0 31	jsr $31f0			jsr 	CLStructureCheck
.31a0	ad 64 0d	lda $0d64			lda 	structIndent 				; indent level.
.31a3	10 02		bpl $31a7			bpl 	_CLPositive
.31a5	a9 00		lda #$00			lda 	#0
.31a7					_CLPositive:
.31a7	a2 04		ldx #$04		ldx	#4
.31a9	20 a0 4a	jsr $4aa0		jsr	tokeniserHandler
.31ac	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.31ae	20 f0 31	jsr $31f0			jsr 	CLStructureCheck
.31b1	ad 64 0d	lda $0d64			lda 	structIndent
.31b4	10 05		bpl $31bb			bpl 	_CLNext
.31b6	a9 00		lda #$00			lda 	#0
.31b8	8d 64 0d	sta $0d64			sta 	structIndent
.31bb					_CLNext:
.31bb	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.31bd	b1 28		lda ($28),y			lda 	(codePtr),y
.31bf	18		clc				clc
.31c0	65 28		adc $28				adc 	codePtr
.31c2	85 28		sta $28				sta 	codePtr
.31c4	90 b9		bcc $317f			bcc 	_CLCheckLoop
.31c6	e6 29		inc $29				inc 	codePtr+1
.31c8	4c 7f 31	jmp $317f			jmp 	_CLCheckLoop
.31cb					_CLEnd:
.31cb	4c 68 3f	jmp $3f68			jmp 	WarmStart 					; warm start after list.
.31ce					CLCompareLineTOS:
.31ce	a0 01		ldy #$01			ldy 	#1
.31d0	b1 28		lda ($28),y			lda 	(codePtr),y
.31d2	55 98		eor $98,x			eor 	esInt0,x
.31d4	85 2a		sta $2a				sta 	temp0
.31d6	c8		iny				iny
.31d7	b1 28		lda ($28),y			lda 	(codePtr),y
.31d9	55 a0		eor $a0,x			eor 	esInt1,x
.31db	05 2a		ora $2a				ora 	temp0
.31dd	f0 10		beq $31ef			beq 	_CLCLTExit
.31df	88		dey				dey
.31e0	b1 28		lda ($28),y			lda 	(codePtr),y
.31e2	d5 98		cmp $98,x			cmp 	esInt0,x
.31e4	c8		iny				iny
.31e5	b1 28		lda ($28),y			lda 	(codePtr),y
.31e7	f5 a0		sbc $a0,x			sbc 	esInt1,x
.31e9	a9 ff		lda #$ff			lda 	#255
.31eb	90 02		bcc $31ef			bcc 	_CLCLTExit
.31ed	a9 01		lda #$01			lda 	#1
.31ef					_CLCLTExit:
.31ef	60		rts				rts
.31f0					CLStructureCheck:
.31f0	85 2a		sta $2a				sta 	temp0
.31f2	a0 03		ldy #$03			ldy 	#3
.31f4					_CLSCLoop:
.31f4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.31f6	c8		iny				iny
.31f7	c9 80		cmp #$80			cmp 	#$80
.31f9	90 f9		bcc $31f4			bcc 	_CLSCLoop 					; $00-$7F just step over.
.31fb	f0 28		beq $3225			beq		_CLSCExit					; EOL return
.31fd	c9 86		cmp #$86			cmp 	#$86 						; special handler
.31ff	90 1e		bcc $321f			bcc 	_CLSCSpecial
.3201	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.3203	90 ef		bcc $31f4			bcc 	_CLSCLoop
.3205	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.3207	b0 eb		bcs $31f4			bcs 	_CLSCLoop
.3209	aa		tax				tax 								; get adjustment
.320a	bd 1e 37	lda $371e,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.320d	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.320f	d0 e3		bne $31f4			bne 	_CLSCLoop
.3211	38		sec				sec
.3212	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.3214	0a		asl a				asl 	a 							; double indent step
.3215	18		clc				clc
.3216	6d 64 0d	adc $0d64			adc 	structIndent 				; add to structure indent
.3219	8d 64 0d	sta $0d64			sta 	structIndent
.321c	4c f4 31	jmp $31f4			jmp 	_CLSCLoop
.321f					_CLSCSpecial:
.321f	20 7e 30	jsr $307e			jsr 	ScannerSkipSpecial
.3222	4c f4 31	jmp $31f4			jmp 	_CLSCLoop
.3225					_CLSCExit:
.3225	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.3226					CommandLoad:
.3226	20 4e 32	jsr $324e			jsr 	CLSParameters 					; get parameters for load.
.3229	08		php				php
.322a	a2 0c		ldx #$0c		ldx	#12
.322c	20 05 15	jsr $1505		jsr	deviceHandler
.322f	28		plp				plp
.3230	b0 08		bcs $323a			bcs 	_CLExit 						; if CC then load a program, so warm start.
.3232	20 f2 30	jsr $30f2			jsr 	CommandClear
.3235	a2 04		ldx #$04		ldx	#4
.3237	20 0e 29	jsr $290e		jsr	interactionHandler
.323a					_CLExit
.323a	60		rts				rts
.323b					CommandSave:
.323b	20 4e 32	jsr $324e			jsr 	CLSParameters					; get parameters for save
.323e	90 08		bcc $3248			bcc 	_CSNoOverrideAddress
.3240	20 ff 3e	jsr $3eff			jsr 	CheckComma 						; should be a comma.
.3243	a2 02		ldx #$02			ldx 	#2
.3245	20 02 38	jsr $3802			jsr 	EvaluateInteger 				; get save end address.
.3248					_CSNoOverrideAddress:
.3248	a2 16		ldx #$16		ldx	#22
.324a	20 05 15	jsr $1505		jsr	deviceHandler
.324d	60		rts				rts
.324e					CLSParameters:
.324e	a2 00		ldx #$00			ldx 	#0 								; string at +0
.3250	20 f7 37	jsr $37f7			jsr 	EvaluateString
.3253	e8		inx				inx 									; erase out +1 (start) +2 (end, for save)
.3254	20 81 3e	jsr $3e81			jsr 	MInt32False
.3257	e8		inx				inx
.3258	20 81 3e	jsr $3e81			jsr 	MInt32False
.325b	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.325e	85 99		sta $99				sta 	esInt0+1
.3260	ad c9 0a	lda $0ac9			lda 	basePage+1
.3263	85 a1		sta $a1				sta 	esInt1+1
.3265	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.3268	85 9a		sta $9a				sta 	esInt0+2
.326a	ad cb 0a	lda $0acb			lda 	endProgram+1
.326d	85 a2		sta $a2				sta 	esInt1+2
.326f	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.3271	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3273	d0 08		bne $327d			bne 	_CLSDefault
.3275	c8		iny				iny 									; skip comma
.3276	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.3278	20 02 38	jsr $3802			jsr 	EvaluateInteger 				; the load or start save address
.327b	38		sec				sec 									; return CS indicating override
.327c	60		rts				rts
.327d					_CLSDefault:
.327d	18		clc				clc
.327e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.327f					Command_New:
.327f					Command_XNew:
.327f	20 24 33	jsr $3324			jsr 	ResetCodeAddress 			; point to first line
.3282	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.3284	98		tya				tya
.3285	91 28		sta ($28),y			sta 	(codePtr),y
.3287	20 f2 30	jsr $30f2			jsr 	CommandClear 				; clear everything down.
.328a	4c 5e 2c	jmp $2c5e			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d65					breakCounter:
>0d65								.fill 	1
.0d66					breakIncrement:
>0d66								.fill 	1
.328d					Command_Run:
.328d					XCommand_Run:
.328d	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.328f	9a		txs				txs
.3290	20 1e 33	jsr $331e			jsr 	BreakOn 					; turn break on
.3293	20 f2 30	jsr $30f2			jsr 	CommandClear 				; clear everything.
.3296	20 24 33	jsr $3324			jsr 	ResetCodeAddress 			; back to the start.
.3299					Command_RunFrom:
.3299	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.329b					CRNextInstruction:
.329b	a9 00		lda #$00			lda 	#0
.329d	85 3a		sta $3a				sta 	softMemAlloc+1
.329f	ad 65 0d	lda $0d65			lda 	breakCounter 				; check for break.
.32a2	6d 66 0d	adc $0d66			adc 	breakIncrement
.32a5	8d 65 0d	sta $0d65			sta 	breakCounter
.32a8	90 05		bcc $32af			bcc 	_CRNoChecks
.32aa	a2 18		ldx #$18		ldx	#24
.32ac	20 05 15	jsr $1505		jsr	deviceHandler
.32af					_CRNoChecks
.32af	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.32b1	10 1c		bpl $32cf			bpl 	_CRNotToken
.32b3	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.32b5	b0 0c		bcs $32c3			bcs 	_CRExecute
.32b7	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.32b9	b0 55		bcs $3310			bcs 	Unimplemented
.32bb	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.32bd	b0 04		bcs $32c3			bcs 	_CRExecute
.32bf	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.32c1	b0 16		bcs $32d9			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.32c3					_CRExecute:
.32c3	c8		iny				iny 								; consume it.
.32c4	0a		asl a				asl 	a 							; double it, losing most significant bit.
.32c5	aa		tax				tax
.32c6	20 cc 32	jsr $32cc			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.32c9	4c 9b 32	jmp $329b			jmp 	CRNextInstruction
.32cc					_CRRunRoutine:
.32cc	7c 36 33	jmp ($3336,x)			jmp 	(Group0Vectors,x)
.32cf					_CRNotToken:
.32cf	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.32d1	b0 3d		bcs $3310			bcs 	Unimplemented
.32d3					_CRDefaultLet:
.32d3	20 93 2b	jsr $2b93			jsr 	CommandLet 					; do the default, LET
.32d6	4c 9b 32	jmp $329b			jmp 	CRNextInstruction
.32d9					_CRCheckIndirect:
.32d9	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.32db	f0 0a		beq $32e7			beq 	_CRAndCommand
.32dd	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.32df	f0 f2		beq $32d3			beq 	_CRDefaultLet
.32e1	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.32e3	f0 ee		beq $32d3			beq 	_CRDefaultLet
.32e5	d0 29		bne $3310			bne 	Unimplemented
.32e7					_CRAndCommand:
.32e7	c8		iny				iny 								; skip over the AND token
.32e8	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.32ea	20 04 33	jsr $3304			jsr 	CommandAssembler 			; do the assembler command
.32ed	4c 9b 32	jmp $329b			jmp 	CRNextInstruction 			; and loop round.
.32f0					CommandShift1:
.32f0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.32f2	10 1c		bpl $3310			bpl 	Unimplemented 				; we have an error as this should not happen.
.32f4	c8		iny				iny 								; advance over it.
.32f5	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.32f7	b0 0b		bcs $3304			bcs 	CommandAssembler
.32f9	0a		asl a				asl 	a 							; double into X
.32fa	aa		tax				tax
.32fb	7c 00 34	jmp ($3400,x)			jmp 	(Group1Vectors-12,x)
.32fe					CommandShift2:
.32fe	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.3300	20 74 18	jsr $1874		jsr	extensionHandler
.3303	60		rts				rts
.3304					CommandAssembler:
.3304	a2 02		ldx #$02		ldx	#2
.3306	20 ac 13	jsr $13ac		jsr	assemblerHandler
.3309	60		rts				rts
.330a					CommandAssemblerLabel:
.330a	a2 04		ldx #$04		ldx	#4
.330c	20 ac 13	jsr $13ac		jsr	assemblerHandler
.330f	60		rts				rts
.3310					Unimplemented:
.3310	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.3312	20 27 15	jsr $1527		jsr	errorHandler
.3315					CommandColon:
.3315	60		rts				rts
.3316					CommandBreak:
.3316	20 00 38	jsr $3800			jsr 	EvaluateRootInteger
.3319	20 a8 3e	jsr $3ea8			jsr 	MInt32Zero
.331c	f0 02		beq $3320			beq 	BreakOff
.331e					BreakOn:
.331e	a2 04		ldx #$04			ldx 	#4 							; checks 1 in 256/X instructions.
.3320					BreakOff:
.3320	8e 66 0d	stx $0d66			stx 	breakIncrement
.3323	60		rts				rts
.3324					ResetCodeAddress:
.3324	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.3327	85 28		sta $28				sta 	codePtr
.3329	ad c9 0a	lda $0ac9			lda 	basePage+1
.332c	85 29		sta $29				sta 	codePtr+1
.332e	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.3330	60		rts				rts
.3331					TKErr01:
.3331					TKErr02:
.3331					TKErr03:
.3331					TKErr04:
.3331					TKErr05:
.3331					TKErr06:
.3331					TKErr07:
.3331					TKErr08:
.3331					TKErr09:
.3331					TKErr10:
.3331					TKErr11:
.3331					TKErr12:
.3331					TKErr13:
.3331					TKErr14:
.3331					TKErr15:
.3331					TKErr16:
.3331	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3333	20 27 15	jsr $1527		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.3336					Group0Vectors:
>3336	64 2c					.word	AdvanceNextLine          ; $80 [[eol]]
>3338	f0 32					.word	CommandShift1            ; $81 [[sh1]]
>333a	fe 32					.word	CommandShift2            ; $82 [[sh2]]
>333c	31 33					.word	TKErr09                  ; $83 [[sh3]]
>333e	31 33					.word	TKErr10                  ; $84 [[fpc]]
>3340	31 33					.word	TKErr08                  ; $85 [[str]]
>3342	e9 34					.word	AndHandler               ; $86 and
>3344	d6 34					.word	OrHandler                ; $87 or
>3346	c3 34					.word	XorHandler               ; $88 xor
>3348	0b 36					.word	CompareGreaterEq         ; $89 >=
>334a	15 36					.word	CompareLessEq            ; $8a <=
>334c	f7 35					.word	CompareGreater           ; $8b >
>334e	ed 35					.word	CompareLess              ; $8c <
>3350	e3 35					.word	CompareEquals            ; $8d =
>3352	01 36					.word	CompareNotEquals         ; $8e <>
>3354	54 34					.word	AddHandler               ; $8f +
>3356	77 34					.word	SubHandler               ; $90 -
>3358	0f 35					.word	ShrHandler               ; $91 >>
>335a	fc 34					.word	ShlHandler               ; $92 <<
>335c	8a 34					.word	MulHandler               ; $93 *
>335e	9d 34					.word	DivHandler               ; $94 /
>3360	b0 34					.word	ModHandler               ; $95 mod
>3362	48 35					.word	PowerHandler             ; $96 ^
>3364	22 35					.word	WordRefHandler           ; $97 !
>3366	35 35					.word	ByteRefHandler           ; $98 ?
>3368	0d 30					.word	Command_Repeat           ; $99 repeat
>336a	b7 30					.word	Command_While            ; $9a while
>336c	78 2c					.word	Command_FOR              ; $9b for
>336e	7e 2d					.word	CommandIf                ; $9c if
>3370	31 33					.word	TKErr04                  ; $9d defproc
>3372	1a 30					.word	Command_Until            ; $9e until
>3374	da 30					.word	Command_Wend             ; $9f wend
>3376	d5 2c					.word	Command_NEXT             ; $a0 next
>3378	31 33					.word	TKErr06                  ; $a1 then
>337a	b9 2d					.word	Command_ENDIF            ; $a2 endif
>337c	20 2f					.word	ReturnProc               ; $a3 endproc
>337e	6d 37					.word	UnaryParenthesis         ; $a4 (
>3380	47 39					.word	UnaryLen                 ; $a5 len(
>3382	8b 39					.word	UnarySgn                 ; $a6 sgn(
>3384	74 39					.word	UnaryAbs                 ; $a7 abs(
>3386	e4 39					.word	Unary_Random             ; $a8 random(
>3388	2e 3a					.word	Unary_Page               ; $a9 page
>338a	7d 3e					.word	MInt32True               ; $aa true
>338c	81 3e					.word	MInt32False              ; $ab false
>338e	f9 39					.word	Unary_Min                ; $ac min(
>3390	fd 39					.word	Unary_Max                ; $ad max(
>3392	04 3b					.word	UnarySys                 ; $ae sys(
>3394	af 3a					.word	UnaryTimer               ; $af timer(
>3396	c9 38					.word	EventFunction            ; $b0 event(
>3398	d6 3a					.word	UnaryGet                 ; $b1 get(
>339a	c6 3a					.word	UnaryInkey               ; $b2 inkey(
>339c	7f 3a					.word	UnaryAlloc               ; $b3 alloc(
>339e	39 3b					.word	ExecChr                  ; $b4 chr$(
>33a0	65 3b					.word	ExecLeft                 ; $b5 left$(
>33a2	82 3b					.word	ExecMid                  ; $b6 mid$(
>33a4	aa 3b					.word	ExecRight                ; $b7 right$(
>33a6	4e 38					.word	Event_Str                ; $b8 str$(
>33a8	7d 38					.word	UnaryVal                 ; $b9 val(
>33aa	a2 39					.word	UnaryPeek                ; $ba peek(
>33ac	a8 39					.word	UnaryDeek                ; $bb deek(
>33ae	ae 39					.word	UnaryLeek                ; $bc leek(
>33b0	65 39					.word	UnaryAsc                 ; $bd asc(
>33b2	59 3a					.word	UnaryIntToFloat          ; $be int(
>33b4	6c 3a					.word	UnaryFloatToInt          ; $bf float(
>33b6	80 38					.word	UnaryIsVal               ; $c0 isval(
>33b8	4e 3b					.word	ExecUpper                ; $c1 upper$(
>33ba	4b 3b					.word	ExecLower                ; $c2 lower$(
>33bc	3c 3a					.word	UnaryReference           ; $c3 @
>33be	52 3a					.word	UnaryComplement          ; $c4 ~
>33c0	4f 3a					.word	UnaryHexMarker           ; $c5 &
>33c2	ef 3a					.word	UnaryGetString           ; $c6 get$(
>33c4	f5 3a					.word	UnaryInkeyString         ; $c7 inkey$(
>33c6	28 3b					.word	UnaryMem                 ; $c8 mem
>33c8	31 33					.word	TKErr01                  ; $c9 )
>33ca	15 33					.word	CommandColon             ; $ca :
>33cc	31 33					.word	TKErr02                  ; $cb ,
>33ce	31 33					.word	TKErr03                  ; $cc ;
>33d0	4c 2c					.word	Command_Rem2             ; $cd '
>33d2	31 33					.word	TKErr07                  ; $ce to
>33d4	31 33					.word	TKErr05                  ; $cf step
>33d6	b3 2e					.word	CallProc                 ; $d0 proc
>33d8	ba 2d					.word	CommandLocal             ; $d1 local
>33da	85 2b					.word	Command_Dim              ; $d2 dim
>33dc	4c 2c					.word	Command_Rem              ; $d3 rem
>33de	93 2b					.word	CommandLet               ; $d4 let
>33e0	d9 29					.word	Command_Input            ; $d5 input
>33e2	b3 2d					.word	Command_ELSE             ; $d6 else
>33e4	56 2b					.word	Command_VDU              ; $d7 vdu
>33e6	8d 2a					.word	Command_Print            ; $d8 print
>33e8	43 29					.word	CommandData              ; $d9 data
>33ea	31 33					.word	TKErr13                  ; $da image
>33ec	31 33					.word	TKErr12                  ; $db at
>33ee	31 33					.word	TKErr14                  ; $dc flip
>33f0	77 2b					.word	Command_Assert           ; $dd assert
>33f2	0f 2c					.word	Command_Poke             ; $de poke
>33f4	13 2c					.word	Command_Doke             ; $df doke
>33f6	17 2c					.word	Command_Loke             ; $e0 loke
>33f8	28 2b					.word	Command_Ink              ; $e1 ink
>33fa	33 2b					.word	Command_Paper            ; $e2 paper
>33fc	22 2b					.word	Command_CLS              ; $e3 cls
>33fe	3e 2b					.word	Command_Locate           ; $e4 locate
>3400	0a 33					.word	CommandAssemblerLabel    ; $e5 .
>3402	31 33					.word	TKErr15                  ; $e6 from
>3404	31 33					.word	TKErr11                  ; $e7 #
>3406	f2 30					.word	CommandClear             ; $e8 clear
>3408	31 33					.word	TKErr16                  ; $e9 text
>340a	10 33					.word	Unimplemented            ; $ea type

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.340c					Group1Vectors:
>340c	26 32					.word	CommandLoad              ; $86 load
>340e	3b 32					.word	CommandSave              ; $87 save
>3410	4b 31					.word	CommandList              ; $88 list
>3412	7f 32					.word	Command_New              ; $89 new
>3414	16 33					.word	CommandBreak             ; $8a break
>3416	8d 32					.word	Command_Run              ; $8b run
>3418	18 29					.word	CommandRead              ; $8c read
>341a	4c 29					.word	CommandRestore           ; $8d restore
>341c	5e 2c					.word	CommandEnd               ; $8e end
>341e	59 2c					.word	CommandStop              ; $8f stop
>3420	61 2c					.word	CommandXemu              ; $90 xemu
>3422	a7 29					.word	CommandGOTO              ; $91 goto
>3424	7c 29					.word	CommandGOSUB             ; $92 gosub
>3426	8f 29					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.3428					BinaryProcess:
.3428	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.342a	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.342c	0a		asl a				asl 	a
.342d	30 0e		bmi $343d			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.342f	18		clc				clc 								; return CC for integer
.3430	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3432	f0 08		beq $343c			beq 	_BPExit 					; if both integer then return with CC.
.3434	20 42 34	jsr $3442			jsr 	BPMakeBothFloat 			; make both float
.3437	a9 01		lda #$01			lda 	#$01 						; set result type to float
.3439	95 90		sta $90,x			sta 	esType,x
.343b	38		sec				sec 								; and return with carry set.
.343c					_BPExit:
.343c	60		rts				rts
.343d					_BPStringType:
.343d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.343f	20 27 15	jsr $1527		jsr	errorHandler
.3442					BPMakeBothFloat:
.3442	e8		inx				inx
.3443	20 47 34	jsr $3447			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.3446	ca		dex				dex
.3447					BPMakeFloat:
.3447	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.3449	4a		lsr a				lsr 	a
.344a	b0 07		bcs $3453			bcs 	_BPIsFloat 					; already a float if set.
.344c	8a		txa				txa
.344d	a2 1c		ldx #$1c		ldx	#28
.344f	20 22 27	jsr $2722		jsr	floatingpointHandler
.3452	aa		tax				tax
.3453					_BPIsFloat:
.3453	60		rts				rts
.3454					AddHandler:
.3454	20 25 36	jsr $3625			jsr 	DereferenceTwo 				; dereference top two on stack.
.3457	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.3459	35 91		and $91,x			and 	esType+1,x
.345b	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.345d	d0 10		bne $346f			bne 	_AHStringConcat				; concatenate strings.
.345f	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.3462	b0 03		bcs $3467			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3464	4c 67 3d	jmp $3d67			jmp 	MInt32Add 							; else do it as integer.
.3467					_IsFPOperation:
.3467	8a		txa				txa 								; call the relevant fp routine
.3468	a2 04		ldx #$04		ldx	#4
.346a	20 22 27	jsr $2722		jsr	floatingpointHandler
.346d	aa		tax				tax
.346e	60		rts				rts
.346f					_AHStringConcat:
.346f	8a		txa				txa 								; handled by the string module.
.3470	a2 06		ldx #$06		ldx	#6
.3472	20 18 42	jsr $4218		jsr	stringHandler
.3475	aa		tax				tax
.3476	60		rts				rts
.3477					SubHandler:
.3477	20 25 36	jsr $3625			jsr 	DereferenceTwo
.347a	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.347d	b0 03		bcs $3482			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.347f	4c 81 3d	jmp $3d81			jmp 	MInt32Sub 							; else do it as integer.
.3482					_IsFPOperation:
.3482	8a		txa				txa 								; call the relevant fp routine
.3483	a2 12		ldx #$12		ldx	#18
.3485	20 22 27	jsr $2722		jsr	floatingpointHandler
.3488	aa		tax				tax
.3489	60		rts				rts
.348a					MulHandler:
.348a	20 25 36	jsr $3625			jsr 	DereferenceTwo
.348d	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.3490	b0 03		bcs $3495			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3492	4c 9b 3d	jmp $3d9b			jmp 	MInt32Multiply 							; else do it as integer.
.3495					_IsFPOperation:
.3495	8a		txa				txa 								; call the relevant fp routine
.3496	a2 0c		ldx #$0c		ldx	#12
.3498	20 22 27	jsr $2722		jsr	floatingpointHandler
.349b	aa		tax				tax
.349c	60		rts				rts
.349d					DivHandler:
.349d	20 25 36	jsr $3625			jsr 	DereferenceTwo
.34a0	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.34a3	b0 03		bcs $34a8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34a5	4c 5b 3c	jmp $3c5b			jmp 	MInt32SDivide 							; else do it as integer.
.34a8					_IsFPOperation:
.34a8	8a		txa				txa 								; call the relevant fp routine
.34a9	a2 08		ldx #$08		ldx	#8
.34ab	20 22 27	jsr $2722		jsr	floatingpointHandler
.34ae	aa		tax				tax
.34af	60		rts				rts
.34b0					ModHandler:
.34b0	20 25 36	jsr $3625			jsr 	DereferenceTwo
.34b3	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.34b6	b0 03		bcs $34bb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34b8	4c d9 3c	jmp $3cd9			jmp 	MInt32Modulus 							; else do it as integer.
.34bb					_IsFPOperation:
.34bb	8a		txa				txa 								; call the relevant fp routine
.34bc	a2 0a		ldx #$0a		ldx	#10
.34be	20 22 27	jsr $2722		jsr	floatingpointHandler
.34c1	aa		tax				tax
.34c2	60		rts				rts
.34c3					XorHandler:
.34c3	20 25 36	jsr $3625			jsr 	DereferenceTwo
.34c6	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.34c9	b0 03		bcs $34ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34cb	4c 0d 3c	jmp $3c0d			jmp 	MInt32Xor 							; else do it as integer.
.34ce					_IsFPOperation:
.34ce	8a		txa				txa 								; call the relevant fp routine
.34cf	a2 0a		ldx #$0a		ldx	#10
.34d1	20 22 27	jsr $2722		jsr	floatingpointHandler
.34d4	aa		tax				tax
.34d5	60		rts				rts
.34d6					OrHandler:
.34d6	20 25 36	jsr $3625			jsr 	DereferenceTwo
.34d9	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.34dc	b0 03		bcs $34e1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34de	4c f4 3b	jmp $3bf4			jmp 	MInt32Or 							; else do it as integer.
.34e1					_IsFPOperation:
.34e1	8a		txa				txa 								; call the relevant fp routine
.34e2	a2 0a		ldx #$0a		ldx	#10
.34e4	20 22 27	jsr $2722		jsr	floatingpointHandler
.34e7	aa		tax				tax
.34e8	60		rts				rts
.34e9					AndHandler:
.34e9	20 25 36	jsr $3625			jsr 	DereferenceTwo
.34ec	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.34ef	b0 03		bcs $34f4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.34f1	4c db 3b	jmp $3bdb			jmp 	MInt32And 							; else do it as integer.
.34f4					_IsFPOperation:
.34f4	8a		txa				txa 								; call the relevant fp routine
.34f5	a2 0a		ldx #$0a		ldx	#10
.34f7	20 22 27	jsr $2722		jsr	floatingpointHandler
.34fa	aa		tax				tax
.34fb	60		rts				rts
.34fc					ShlHandler:
.34fc	20 25 36	jsr $3625			jsr 	DereferenceTwo
.34ff	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.3502	b0 03		bcs $3507			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3504	4c 7d 35	jmp $357d			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.3507					_IsFPOperation:
.3507	8a		txa				txa 								; call the relevant fp routine
.3508	a2 0a		ldx #$0a		ldx	#10
.350a	20 22 27	jsr $2722		jsr	floatingpointHandler
.350d	aa		tax				tax
.350e	60		rts				rts
.350f					ShrHandler:
.350f	20 25 36	jsr $3625			jsr 	DereferenceTwo
.3512	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.3515	b0 03		bcs $351a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3517	4c 80 35	jmp $3580			jmp 	MInt32ShiftRightX 							; else do it as integer.
.351a					_IsFPOperation:
.351a	8a		txa				txa 								; call the relevant fp routine
.351b	a2 0a		ldx #$0a		ldx	#10
.351d	20 22 27	jsr $2722		jsr	floatingpointHandler
.3520	aa		tax				tax
.3521	60		rts				rts
.3522					WordRefHandler:
.3522	20 25 36	jsr $3625			jsr 	DereferenceTwo
.3525	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.3528	b0 03		bcs $352d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.352a	4c 6f 35	jmp $356f			jmp 	MInt32WordIndirect 							; else do it as integer.
.352d					_IsFPOperation:
.352d	8a		txa				txa 								; call the relevant fp routine
.352e	a2 0a		ldx #$0a		ldx	#10
.3530	20 22 27	jsr $2722		jsr	floatingpointHandler
.3533	aa		tax				tax
.3534	60		rts				rts
.3535					ByteRefHandler:
.3535	20 25 36	jsr $3625			jsr 	DereferenceTwo
.3538	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.353b	b0 03		bcs $3540			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.353d	4c 73 35	jmp $3573			jmp 	MInt32ByteIndirect 							; else do it as integer.
.3540					_IsFPOperation:
.3540	8a		txa				txa 								; call the relevant fp routine
.3541	a2 0a		ldx #$0a		ldx	#10
.3543	20 22 27	jsr $2722		jsr	floatingpointHandler
.3546	aa		tax				tax
.3547	60		rts				rts
.3548					PowerHandler:
.3548	20 25 36	jsr $3625			jsr 	DereferenceTwo
.354b	20 28 34	jsr $3428			jsr 	BinaryProcess 				; check to see if either is float
.354e	b0 03		bcs $3553			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3550	4c 5b 35	jmp $355b			jmp 	PowerInteger 							; else do it as integer.
.3553					_IsFPOperation:
.3553	8a		txa				txa 								; call the relevant fp routine
.3554	a2 18		ldx #$18		ldx	#24
.3556	20 22 27	jsr $2722		jsr	floatingpointHandler
.3559	aa		tax				tax
.355a	60		rts				rts
.355b					PowerInteger:
.355b	20 42 34	jsr $3442			jsr 	BPMakeBothFloat				; make them float.
.355e	8a		txa				txa
.355f	a2 18		ldx #$18		ldx	#24
.3561	20 22 27	jsr $2722		jsr	floatingpointHandler
.3564	a2 14		ldx #$14		ldx	#20
.3566	20 22 27	jsr $2722		jsr	floatingpointHandler
.3569	aa		tax				tax
.356a	a9 00		lda #$00			lda 	#0 							; make type integer
.356c	95 90		sta $90,x			sta 	esType,x
.356e	60		rts				rts
.356f					Mint32WordIndirect:
.356f	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.3571	d0 02		bne $3575			bne 	Min32Indirect
.3573					Mint32ByteIndirect:
.3573	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.3575					Min32Indirect:
.3575	48		pha				pha 								; save the indirection
.3576	20 67 3d	jsr $3d67			jsr 	MInt32Add 					; add a!b a?b
.3579	68		pla				pla 								; and set the type to reference.
.357a	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.357c	60		rts				rts
.357d					Mint32ShiftLeftX:
.357d	18		clc				clc 								; CC shift left
.357e	90 01		bcc $3581			bcc 	Mint32Shift
.3580					Mint32ShiftRightX:
.3580	38		sec				sec 								; CS shift right
.3581					Mint32Shift:
.3581	08		php				php 								; save carry flag on stack.
.3582	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3584	15 a9		ora $a9,x			ora 	esInt2+1,x
.3586	15 b1		ora $b1,x			ora 	esInt3+1,x
.3588	d0 1e		bne $35a8			bne 	_MShiftZero
.358a	b5 99		lda $99,x			lda 	esInt0+1,x
.358c	c9 20		cmp #$20			cmp 	#32
.358e	b0 18		bcs $35a8			bcs 	_MShiftZero
.3590					_MShiftLoop:
.3590	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3592	f0 12		beq $35a6			beq 	_MShiftExit
.3594	d6 99		dec $99,x			dec 	esInt0+1,x
.3596	28		plp				plp 								; restore and save carry
.3597	08		php				php
.3598	90 06		bcc $35a0			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.359a	20 9f 3e	jsr $3e9f			jsr 	Mint32ShiftRight
.359d	4c 90 35	jmp $3590			jmp 	_MShiftLoop
.35a0					_MShiftLeft:
.35a0	20 96 3e	jsr $3e96			jsr 	Mint32ShiftLeft
.35a3	4c 90 35	jmp $3590			jmp 	_MShiftLoop
.35a6					_MShiftExit:
.35a6	28		plp				plp	 								; throw saved carry and exit
.35a7	60		rts				rts
.35a8					_MShiftZero:
.35a8	4c 81 3e	jmp $3e81			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.35ab					PerformComparison:
.35ab	20 25 36	jsr $3625			jsr 	DereferenceTwo 				; make both values.
.35ae	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.35b0	35 91		and $91,x			and 	esType+1,x
.35b2	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.35b3	30 1d		bmi $35d2			bmi 	_PCIsString
.35b5	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.35b7	15 91		ora $91,x			ora 	esType+1,x
.35b9	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.35ba	30 22		bmi $35de			bmi 	_PCError
.35bc	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.35be	f0 0f		beq $35cf			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.35c0	20 42 34	jsr $3442			jsr 	BPMakeBothFloat 			; make both float
.35c3	8a		txa				txa
.35c4	a2 06		ldx #$06		ldx	#6
.35c6	20 22 27	jsr $2722		jsr	floatingpointHandler
.35c9	86 32		stx $32				stx 	tempShort 					; save result
.35cb	aa		tax				tax
.35cc	a5 32		lda $32				lda 	tempShort
.35ce	60		rts				rts
.35cf					_PCIsInteger:
.35cf	4c 26 3c	jmp $3c26			jmp 	MInt32Compare
.35d2					_PCIsString:
.35d2	8a		txa				txa 								; A has SP
.35d3	a2 0a		ldx #$0a		ldx	#10
.35d5	20 18 42	jsr $4218		jsr	stringHandler
.35d8	86 32		stx $32				stx 	tempShort 					; save result
.35da	aa		tax				tax 								; put SP back in X and get result.
.35db	a5 32		lda $32				lda 	tempShort
.35dd	60		rts				rts
.35de					_PCError:
.35de	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.35e0	20 27 15	jsr $1527		jsr	errorHandler
.35e3					CompareEquals:
.35e3	20 ab 35	jsr $35ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.35e6	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.35e8	f0 35		beq $361f			beq  	CompareTrue
.35ea	4c 22 36	jmp $3622			jmp 	CompareFalse
.35ed					CompareLess:
.35ed	20 ab 35	jsr $35ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.35f0	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.35f2	f0 2b		beq $361f			beq  	CompareTrue
.35f4	4c 22 36	jmp $3622			jmp 	CompareFalse
.35f7					CompareGreater:
.35f7	20 ab 35	jsr $35ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.35fa	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.35fc	f0 21		beq $361f			beq  	CompareTrue
.35fe	4c 22 36	jmp $3622			jmp 	CompareFalse
.3601					CompareNotEquals:
.3601	20 ab 35	jsr $35ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3604	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3606	d0 17		bne $361f			bne  	CompareTrue
.3608	4c 22 36	jmp $3622			jmp 	CompareFalse
.360b					CompareGreaterEq:
.360b	20 ab 35	jsr $35ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.360e	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3610	d0 0d		bne $361f			bne  	CompareTrue
.3612	4c 22 36	jmp $3622			jmp 	CompareFalse
.3615					CompareLessEq:
.3615	20 ab 35	jsr $35ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3618	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.361a	d0 03		bne $361f			bne  	CompareTrue
.361c	4c 22 36	jmp $3622			jmp 	CompareFalse
.361f					CompareTrue:
.361f	4c 7d 3e	jmp $3e7d			jmp 	MInt32True
.3622					CompareFalse:
.3622	4c 81 3e	jmp $3e81			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3625					DereferenceTwo:
.3625	e8		inx				inx
.3626	20 2a 36	jsr $362a			jsr 	DereferenceOne
.3629	ca		dex				dex
.362a					DereferenceOne:
.362a	b5 90		lda $90,x			lda 	esType,x
.362c	10 3b		bpl $3669			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.362e	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.362f	b0 39		bcs $366a			bcs 	_DRFloatDeReference
.3631	5a		phy				phy
.3632	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.3634	85 2a		sta $2a				sta 	temp0
.3636	b5 a0		lda $a0,x			lda 	esInt1,x
.3638	85 2b		sta $2b				sta 	temp0+1
.363a	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.363c	95 a0		sta $a0,x			sta 	esInt1,x
.363e	95 a8		sta $a8,x			sta 	esInt2,x
.3640	95 b0		sta $b0,x			sta 	esInt3,x
.3642	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.3644	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.3646	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.3647	30 0d		bmi $3656			bmi 	_DeRefString 				; string, 2 bytes only
.3649	d0 11		bne $365c			bne 	_DeRefByte 					; byte 1 byte only
.364b					_DeRefLong:
.364b	a0 03		ldy #$03			ldy 	#3
.364d	b1 2a		lda ($2a),y			lda 	(temp0),y
.364f	95 b0		sta $b0,x			sta 	esInt3,x
.3651	88		dey				dey
.3652	b1 2a		lda ($2a),y			lda 	(temp0),y
.3654	95 a8		sta $a8,x			sta 	esInt2,x
.3656					_DeRefString:
.3656	a0 01		ldy #$01			ldy 	#1
.3658	b1 2a		lda ($2a),y			lda 	(temp0),y
.365a	95 a0		sta $a0,x			sta 	esInt1,x
.365c					_DeRefByte:
.365c	a0 00		ldy #$00			ldy 	#0
.365e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3660	95 98		sta $98,x			sta 	esInt0,x
.3662	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.3664	29 40		and #$40			and 	#$40
.3666	95 90		sta $90,x			sta 	esType,x
.3668	7a		ply				ply
.3669					_DRNotReference
.3669	60		rts				rts
.366a					_DRFloatDereference:
.366a	20 06 2c	jsr $2c06			jsr 	TOSToTemp0 					; address to deref in temp0
.366d	8a		txa				txa
.366e	a2 1e		ldx #$1e		ldx	#30
.3670	20 22 27	jsr $2722		jsr	floatingpointHandler
.3673	aa		tax				tax
.3674	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.3676	95 90		sta $90,x			sta 	esType,x
.3678	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.3679					EvaluateLevel:
.3679	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.367b	b0 1e		bcs $369b			bcs 	_ELStack
.367d	48		pha				pha 								; save precedence level.
.367e	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3680	95 98		sta $98,x			sta 	esInt0,x
.3682	95 a0		sta $a0,x			sta 	esInt1,x
.3684	95 a8		sta $a8,x			sta 	esInt2,x
.3686	95 b0		sta $b0,x			sta 	esInt3,x
.3688	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.368a	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.368c	30 26		bmi $36b4			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.368e	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.368f	30 0f		bmi $36a0			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3691	8a		txa				txa 								; stack level in X
.3692	a2 02		ldx #$02		ldx	#2
.3694	20 5f 4e	jsr $4e5f		jsr	variableHandler
.3697	aa		tax				tax
.3698	4c dd 36	jmp $36dd			jmp		_ELHasTerm
.369b					_ELStack:
.369b	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.369d	20 27 15	jsr $1527		jsr	errorHandler
.36a0					_ELIsConstant:
.36a0	4a		lsr a				lsr 	a 							; get the value back
.36a1	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.36a3	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.36a5					_ELCheckNext:
.36a5	c8		iny				iny 								; look at next
.36a6	b1 28		lda ($28),y			lda 	(codePtr),y
.36a8	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.36aa	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.36ac	b0 2f		bcs $36dd			bcs 	_ELHasTerm 					; done getting the constant.
.36ae	20 76 37	jsr $3776			jsr 	ELShiftByteIn 				; shift byte into position.
.36b1	4c a5 36	jmp $36a5			jmp 	_ELCheckNext
.36b4					_ELIsToken:
.36b4	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.36b6	f0 0f		beq $36c7			beq 	_ELIsString
.36b8	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.36ba	d0 5f		bne $371b			bne 	_ELCheckUnary
.36bc	8a		txa				txa 								; put X into A
.36bd	c8		iny				iny 								; skip over the float marker
.36be	a2 1a		ldx #$1a		ldx	#26
.36c0	20 22 27	jsr $2722		jsr	floatingpointHandler
.36c3	aa		tax				tax 								; restore X
.36c4	4c dd 36	jmp $36dd			jmp 	_ELHasTerm
.36c7					_ELIsString:
.36c7	98		tya				tya 								; address of string is codePtr+y+1
.36c8	38		sec				sec
.36c9	65 28		adc $28				adc 	codePtr
.36cb	95 98		sta $98,x			sta 	esInt0,x
.36cd	a5 29		lda $29				lda 	codePtr+1
.36cf	69 00		adc #$00			adc 	#0
.36d1	95 a0		sta $a0,x			sta 	esInt1,x
.36d3	a9 40		lda #$40			lda 	#$40 						; set type to string value
.36d5	95 90		sta $90,x			sta 	esType,x
.36d7	c8		iny				iny 								; skip over string.
.36d8	98		tya				tya
.36d9	38		sec				sec									; +1 for the length itself.
.36da	71 28		adc ($28),y			adc 	(codePtr),y
.36dc	a8		tay				tay 								; and fall through to term loop code.
.36dd					_ELHasTerm:
.36dd	b1 28		lda ($28),y			lda 	(codePtr),y
.36df	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.36e1	90 04		bcc $36e7			bcc 	_ELPopExit
.36e3	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.36e5	90 02		bcc $36e9			bcc 	_ELHasBinaryTerm
.36e7					_ELPopExit:
.36e7	68		pla				pla
.36e8					_ELExit:
.36e8	60		rts				rts
.36e9					_ELHasBinaryTerm:
.36e9	84 32		sty $32				sty 	tempShort 					; save position
.36eb	a8		tay				tay 								; use token as an index and get the precedence.
.36ec	b9 1e 37	lda $371e,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.36ef	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.36f1	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.36f3	68		pla				pla 								; restore current level.
.36f4	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.36f6	b0 f0		bcs $36e8			bcs 	_ELExit
.36f8	48		pha				pha 								; save current level back on the stack.
.36f9	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.36fb	48		pha				pha
.36fc	c8		iny				iny
.36fd	e8		inx				inx 								; calculate the RHS at the operator precedence.
.36fe	a5 32		lda $32				lda 	tempShort
.3700	20 79 36	jsr $3679			jsr 	EvaluateLevel
.3703	ca		dex				dex
.3704	68		pla				pla 								; get the operator back out.
.3705					_ELExecuteA:
.3705	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3707	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3708	aa		tax				tax
.3709	bd 36 33	lda $3336,x			lda 	Group0Vectors,x
.370c	85 2a		sta $2a				sta 	temp0
.370e	bd 37 33	lda $3337,x			lda 	Group0Vectors+1,x
.3711	85 2b		sta $2b				sta 	temp0+1
.3713	a6 32		ldx $32				ldx 	tempShort
.3715	20 62 37	jsr $3762			jsr 	_ELCallTemp0
.3718	4c dd 36	jmp $36dd			jmp 	_ELHasTerm 					; and loop back round.
.371b					_ELCheckUnary:
.371b	c8		iny				iny 								; skip over token.
.371c	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.371e	f0 19		beq $3739			beq 	_ELMinus
.3720	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3722	f0 2c		beq $3750			beq 	_ELIndirect
.3724	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3726	f0 28		beq $3750			beq 	_ELIndirect
.3728	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.372a	f0 39		beq $3765			beq 	_ELExtension
.372c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.372e	90 04		bcc $3734			bcc 	_ELUSyntax
.3730	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3732	90 d1		bcc $3705			bcc 	_ELExecuteA 				; if so do that token.
.3734					_ELUSyntax:
.3734	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3736	20 27 15	jsr $1527		jsr	errorHandler
.3739					_ELMinus:
.3739	20 cb 37	jsr $37cb			jsr 	EvaluateNumericTerm 		; get a number to negate.
.373c	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.373e	f0 0a		beq $374a			beq 	_ELMinusInteger
.3740	8a		txa				txa
.3741	a2 0e		ldx #$0e		ldx	#14
.3743	20 22 27	jsr $2722		jsr	floatingpointHandler
.3746	aa		tax				tax
.3747	4c dd 36	jmp $36dd			jmp 	_ELHasTerm
.374a					_ELMinusInteger:
.374a	20 3b 3e	jsr $3e3b			jsr 	MInt32Negate 				; do int negate
.374d	4c dd 36	jmp $36dd			jmp 	_ELHasTerm
.3750					_ELIndirect:
.3750	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.3751	20 d4 37	jsr $37d4			jsr 	EvaluateIntegerTerm 		; integer address
.3754	68		pla				pla
.3755	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.3757	f0 02		beq $375b			beq 	_ELHaveModifier
.3759	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.375b					_ELHaveModifier:
.375b	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.375d	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.375f	4c dd 36	jmp $36dd			jmp 	_ELHasTerm
.3762					_ELCallTemp0:
.3762	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3765					_ELExtension:
.3765	8a		txa				txa 								; stack pos in A
.3766	20 74 18	jsr $1874		jsr	extensionHandler
.3769	aa		tax				tax 								; restore stack
.376a	4c dd 36	jmp $36dd			jmp 	_ELHasTerm
.376d					UnaryParenthesis:
.376d	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.376f	20 79 36	jsr $3679			jsr 	EvaluateLevel
.3772	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen 			; check for )
.3775	60		rts				rts
.3776					ELShiftByteIn:
.3776	48		pha				pha 								; save bits to shift in.
.3777	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.3779	48		pha				pha
.377a	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.377c	95 b0		sta $b0,x			sta 	esInt3,x
.377e	b5 a0		lda $a0,x			lda 	esInt1,x
.3780	95 a8		sta $a8,x			sta 	esInt2,x
.3782	b5 98		lda $98,x			lda 	esInt0,x
.3784	95 a0		sta $a0,x			sta 	esInt1,x
.3786	a9 00		lda #$00			lda 	#0
.3788	95 98		sta $98,x			sta 	esInt0,x
.378a	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.378b	29 03		and #$03			and 	#3 							; only want lower 2 bits
.378d	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.378f					_ELShiftLoop:
.378f	4a		lsr a				lsr 	a
.3790	76 b0		ror $b0,x			ror 	esInt3,x
.3792	76 a8		ror $a8,x			ror 	esInt2,x
.3794	76 a0		ror $a0,x			ror 	esInt1,x
.3796	76 98		ror $98,x			ror 	esInt0,x
.3798	c9 01		cmp #$01			cmp 	#1
.379a	d0 f3		bne $378f			bne 	_ELShiftLoop
.379c	68		pla				pla 								; get original 6 bit value and OR in.
.379d	29 3f		and #$3f			and 	#$3F
.379f	15 98		ora $98,x			ora 	esInt0,x
.37a1	95 98		sta $98,x			sta 	esInt0,x
.37a3	60		rts				rts
.37a4					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>37a4	01					.byte	$01			; $86 and
>37a5	01					.byte	$01			; $87 or
>37a6	01					.byte	$01			; $88 xor
>37a7	02					.byte	$02			; $89 >=
>37a8	02					.byte	$02			; $8a <=
>37a9	02					.byte	$02			; $8b >
>37aa	02					.byte	$02			; $8c <
>37ab	02					.byte	$02			; $8d =
>37ac	02					.byte	$02			; $8e <>
>37ad	03					.byte	$03			; $8f +
>37ae	03					.byte	$03			; $90 -
>37af	04					.byte	$04			; $91 >>
>37b0	04					.byte	$04			; $92 <<
>37b1	04					.byte	$04			; $93 *
>37b2	04					.byte	$04			; $94 /
>37b3	04					.byte	$04			; $95 mod
>37b4	05					.byte	$05			; $96 ^
>37b5	06					.byte	$06			; $97 !
>37b6	06					.byte	$06			; $98 ?
>37b7	82					.byte	$82			; $99 repeat
>37b8	82					.byte	$82			; $9a while
>37b9	82					.byte	$82			; $9b for
>37ba	82					.byte	$82			; $9c if
>37bb	82					.byte	$82			; $9d defproc
>37bc	80					.byte	$80			; $9e until
>37bd	80					.byte	$80			; $9f wend
>37be	80					.byte	$80			; $a0 next
>37bf	80					.byte	$80			; $a1 then
>37c0	80					.byte	$80			; $a2 endif
>37c1	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.37c2					EvaluateTerm:
.37c2	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.37c4	20 79 36	jsr $3679			jsr 	EvaluateLevel
.37c7	20 2a 36	jsr $362a			jsr 	DereferenceOne
.37ca	60		rts				rts
.37cb					EvaluateNumericTerm:
.37cb	20 c2 37	jsr $37c2			jsr 	EvaluateTerm
.37ce	b5 90		lda $90,x			lda 	esType,x
.37d0	0a		asl a				asl 	a 							; see if it's a string.
.37d1	30 09		bmi $37dc			bmi 	ENTType
.37d3	60		rts				rts
.37d4					EvaluateIntegerTerm:
.37d4	20 c2 37	jsr $37c2			jsr 	EvaluateTerm
.37d7	b5 90		lda $90,x			lda 	esType,x
.37d9	d0 01		bne $37dc			bne 	ENTType
.37db	60		rts				rts
.37dc					ENTType:
.37dc	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.37de	20 27 15	jsr $1527		jsr	errorHandler
.37e1					EvaluateRoot:
.37e1	a2 00		ldx #$00			ldx 	#0
.37e3					Evaluate:
.37e3	a9 00		lda #$00			lda 	#0
.37e5	20 79 36	jsr $3679			jsr 	EvaluateLevel
.37e8	20 2a 36	jsr $362a			jsr 	DereferenceOne
.37eb	60		rts				rts
.37ec					EvaluateNumeric:
.37ec	20 e3 37	jsr $37e3			jsr 	Evaluate
.37ef	b5 90		lda $90,x			lda 	esType,x
.37f1	0a		asl a				asl 	a 							; see if it's a string.
.37f2	30 e8		bmi $37dc			bmi 	ENTType
.37f4	4a		lsr a				lsr 	a 							; shift float flag into carry.
.37f5	4a		lsr a				lsr 	a
.37f6	60		rts				rts
.37f7					EvaluateString:
.37f7	20 e3 37	jsr $37e3			jsr 	Evaluate
.37fa	b5 90		lda $90,x			lda 	esType,x
.37fc	0a		asl a				asl 	a 							; see if it's a string.
.37fd	10 dd		bpl $37dc			bpl 	ENTType
.37ff	60		rts				rts
.3800					EvaluateRootInteger:
.3800	a2 00		ldx #$00			ldx 	#0
.3802					EvaluateInteger:
.3802	20 e3 37	jsr $37e3			jsr 	Evaluate
.3805	b5 90		lda $90,x			lda 	esType,x
.3807	d0 d3		bne $37dc			bne 	ENTType
.3809	60		rts				rts
.380a					EvaluateSmallInteger:
.380a	20 02 38	jsr $3802			jsr 	EvaluateInteger
.380d	b5 a0		lda $a0,x			lda 	esInt1,x
.380f	15 a8		ora $a8,x			ora 	esInt2,x
.3811	15 b0		ora $b0,x			ora 	esInt3,x
.3813	d0 03		bne $3818			bne 	_ESIValue
.3815	b5 98		lda $98,x			lda 	esInt0,x
.3817	60		rts				rts
.3818					_ESIValue:
.3818	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.381a	20 27 15	jsr $1527		jsr	errorHandler
.381d					LinkEvaluate:
.381d	aa		tax				tax
.381e	20 e3 37	jsr $37e3			jsr 	Evaluate
.3821	8a		txa				txa
.3822	60		rts				rts
.3823					LinkEvaluateTerm:
.3823	aa		tax				tax
.3824	20 c2 37	jsr $37c2			jsr 	EvaluateTerm
.3827	8a		txa				txa
.3828	60		rts				rts
.3829					LinkEvaluateInteger:
.3829	aa		tax				tax
.382a	20 02 38	jsr $3802			jsr 	EvaluateInteger
.382d	8a		txa				txa
.382e	60		rts				rts
.382f					LinkEvaluateString:
.382f	aa		tax				tax
.3830	20 f7 37	jsr $37f7			jsr 	EvaluateString
.3833	8a		txa				txa
.3834	60		rts				rts
.3835					LinkEvaluateSmallInt:
.3835	aa		tax				tax
.3836	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger
.3839	8a		txa				txa
.383a	60		rts				rts
.383b					EvaluateReference:
.383b	ad b5 37	lda $37b5			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.383e	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.383f	e9 01		sbc #$01			sbc 	#1
.3841	20 79 36	jsr $3679			jsr 	EvaluateLevel
.3844	b5 90		lda $90,x			lda 	esType,x
.3846	10 01		bpl $3849			bpl 	_ERFail
.3848	60		rts				rts
.3849					_ERFail:
.3849	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.384b	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.384e					Event_Str:
.384e	20 ec 37	jsr $37ec			jsr 	EvaluateNumeric 			; get a number.
.3851	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.3853	d0 13		bne $3868			bne 	_ESFloat
.3855	20 a8 38	jsr $38a8			jsr 	ConvertGetBase 				; get base, or default.
.3858	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.385a	85 2a		sta $2a				sta 	temp0
.385c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.385e	85 2b		sta $2b				sta 	1+(temp0)
.3860	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3862	20 d9 3d	jsr $3dd9			jsr 	MInt32ToString 				; convert to string.
.3865	4c 75 38	jmp $3875			jmp 	_ESCloneExit 				; clone and exit.
.3868					_ESFloat:
.3868	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen 			; check closing )
.386b	20 06 2c	jsr $2c06			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.386e	8a		txa				txa
.386f	a2 16		ldx #$16		ldx	#22
.3871	20 22 27	jsr $2722		jsr	floatingpointHandler
.3874	aa		tax				tax
.3875					_ESCloneExit:
.3875	8a		txa				txa
.3876	a2 04		ldx #$04		ldx	#4
.3878	20 18 42	jsr $4218		jsr	stringHandler
.387b	aa		tax				tax
.387c	60		rts				rts
.387d					UnaryVal:
.387d	38		sec				sec 								; Carry set to return value
.387e	b0 01		bcs $3881			bcs 	ValueMain
.3880					UnaryIsVal:
.3880	18		clc				clc									; Carry clear to return legitimacy
.3881					ValueMain:
.3881	08		php				php 								; save results (CS is value, CC is validation)
.3882	20 f7 37	jsr $37f7			jsr 	EvaluateString
.3885	20 a8 38	jsr $38a8			jsr 	ConvertGetBase 				; get base, if any.
.3888	5a		phy				phy
.3889	20 06 2c	jsr $2c06			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.388c	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.388e	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3890	20 f4 3c	jsr $3cf4			jsr 	MInt32FromString 			; convert it back from a string.
.3893	b0 0b		bcs $38a0			bcs 	_VMSuccess 					; successfully converted.
.3895	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.3897	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3899	f0 00		beq $389b			beq 	_VMFailed 	 				; so we failed.
.389b					_VMFailed:
.389b	7a		ply				ply
.389c	28		plp				plp
.389d	4c 81 3e	jmp $3e81			jmp 	MInt32False 				; return 0 whatever.
.38a0					_VMSuccess:
.38a0	7a		ply				ply
.38a1	28		plp				plp 								; if CS the it was val() so we want the value.
.38a2	b0 03		bcs $38a7			bcs 	_VMExit
.38a4	4c 7d 3e	jmp $3e7d			jmp 	MInt32True 					; otherwise return true as successful.
.38a7					_VMExit:
.38a7	60		rts				rts
.38a8					ConvertGetBase:
.38a8	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.38aa	95 99		sta $99,x			sta 	esInt0+1,x
.38ac	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.38ae	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.38b0	d0 0e		bne $38c0			bne 	_CGBDone 					; not found, should be )
.38b2	e8		inx				inx 								; next level
.38b3	c8		iny				iny 								; skip comma.
.38b4	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger		; evaluate the base.
.38b7	ca		dex				dex
.38b8	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.38ba	90 08		bcc $38c4			bcc 	_CGBValue 					; (it should work as high as 37)
.38bc	c9 11		cmp #$11			cmp 	#17
.38be	b0 04		bcs $38c4			bcs 	_CGBValue
.38c0					_CGBDone:
.38c0	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen
.38c3	60		rts				rts
.38c4					_CGBValue:
.38c4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.38c6	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.38c9					EventFunction:
.38c9	20 3b 38	jsr $383b			jsr 	EvaluateReference			; get the variable reference that tracks the event
.38cc	b5 90		lda $90,x			lda 	esType,x
.38ce	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.38d0	d0 56		bne $3928			bne 	_EFType
.38d2	20 ff 3e	jsr $3eff			jsr 	CheckComma
.38d5	e8		inx				inx
.38d6	20 02 38	jsr $3802			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.38d9	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen 			; finish off with the right bracket
.38dc	ca		dex				dex
.38dd	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.38df	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.38e1	15 a8		ora $a8,x			ora 	esInt2,x
.38e3	15 b0		ora $b0,x			ora 	esInt3,x
.38e5	d0 3c		bne $3923			bne 	_EFValue
.38e7	5a		phy				phy
.38e8	da		phx				phx
.38e9	a2 1c		ldx #$1c		ldx	#28
.38eb	20 05 15	jsr $1505		jsr	deviceHandler
.38ee	84 2d		sty $2d				sty 	temp1+1
.38f0	85 2c		sta $2c				sta 	temp1
.38f2	fa		plx				plx
.38f3	20 06 2c	jsr $2c06			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.38f6	a0 03		ldy #$03			ldy 	#3							; if -ve
.38f8	b1 2a		lda ($2a),y			lda 	(temp0),y
.38fa	30 22		bmi $391e			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.38fc	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.38fe	b1 2a		lda ($2a),y			lda 	(temp0),y
.3900	c8		iny				iny
.3901	11 2a		ora ($2a),y			ora 	(temp0),y
.3903	f0 16		beq $391b			beq 	_EFInitialise 				; if so, initialise the value but return false.
.3905	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.3907	38		sec				sec
.3908	b1 2a		lda ($2a),y			lda 	(temp0),y
.390a	e5 2c		sbc $2c				sbc 	temp1
.390c	c8		iny				iny
.390d	b1 2a		lda ($2a),y			lda 	(temp0),y
.390f	e5 2d		sbc $2d				sbc 	temp1+1
.3911	10 0b		bpl $391e			bpl 	_EFFail 					; if trigger >= timer then return False
.3913	20 2d 39	jsr $392d			jsr 	SetEventTimer 				; reset the timer for next time.
.3916	20 7d 3e	jsr $3e7d			jsr	 	MInt32True 					; and treutn true as fired.
.3919	7a		ply				ply
.391a	60		rts				rts
.391b					_EFInitialise:
.391b	20 2d 39	jsr $392d			jsr		SetEventTimer 				; set trigger time to time + elapsed
.391e					_EFFail:
.391e	7a		ply				ply
.391f	20 81 3e	jsr $3e81			jsr 	MInt32False
.3922	60		rts				rts
.3923					_EFValue:
.3923	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3925	20 27 15	jsr $1527		jsr	errorHandler
.3928					_EFType:
.3928	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.392a	20 27 15	jsr $1527		jsr	errorHandler
.392d					SetEventTimer:
.392d	a0 00		ldy #$00			ldy 	#0
.392f	18		clc				clc
.3930	a5 2c		lda $2c				lda 	temp1
.3932	75 99		adc $99,x			adc 	esInt0+1,x
.3934	91 2a		sta ($2a),y			sta		(temp0),y
.3936	c8		iny				iny
.3937	a5 2d		lda $2d				lda 	temp1+1
.3939	75 a1		adc $a1,x			adc 	esInt1+1,x
.393b	91 2a		sta ($2a),y			sta		(temp0),y
.393d	88		dey				dey
.393e	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.3940	d0 04		bne $3946			bne 	_SETExit 					; zero means initialise.....
.3942	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.3944	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.3946					_SETExit:
.3946	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.3947					UnaryLen:
.3947	20 55 39	jsr $3955			jsr 	ULStart
.394a					ULFinish:
.394a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.394c	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.394e	20 90 3e	jsr $3e90			jsr 	MInt32Set8Bit 				; write it out.
.3951	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen
.3954	60		rts				rts
.3955	20 f7 37	jsr $37f7	ULStart:jsr 	EvaluateString
.3958	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.395a	85 2a		sta $2a				sta 	temp0
.395c	b5 a0		lda $a0,x			lda 	esInt1,x
.395e	85 2b		sta $2b				sta 	temp0+1
.3960	84 32		sty $32				sty 	tempShort 					; get length
.3962	a0 00		ldy #$00			ldy 	#0
.3964	60		rts				rts
.3965					UnaryAsc:
.3965	20 55 39	jsr $3955			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3968	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.396a	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.396b	c9 00		cmp #$00			cmp 	#0
.396d	d0 db		bne $394a			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.396f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3971	20 27 15	jsr $1527		jsr	errorHandler
.3974					UnaryAbs:
.3974	20 ec 37	jsr $37ec			jsr 	EvaluateNumeric 			; some numeric value
.3977	b0 07		bcs $3980			bcs 	_UAFloat 					; CS then float, so use that function
.3979	20 36 3e	jsr $3e36			jsr 	MInt32Absolute 				; int version
.397c	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen
.397f	60		rts				rts
.3980					_UAFloat:
.3980	8a		txa				txa 								; float version
.3981	a2 02		ldx #$02		ldx	#2
.3983	20 22 27	jsr $2722		jsr	floatingpointHandler
.3986	aa		tax				tax
.3987	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen
.398a	60		rts				rts
.398b					UnarySgn:
.398b	20 ec 37	jsr $37ec			jsr 	EvaluateNumeric 			; same as above but sign of value
.398e	b0 07		bcs $3997			bcs 	_USFloat
.3990	20 6e 3e	jsr $3e6e			jsr 	MInt32Sign
.3993	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen
.3996	60		rts				rts
.3997					_USFloat:
.3997	8a		txa				txa
.3998	a2 10		ldx #$10		ldx	#16
.399a	20 22 27	jsr $2722		jsr	floatingpointHandler
.399d	aa		tax				tax
.399e	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen
.39a1	60		rts				rts
.39a2					UnaryPeek:
.39a2	20 ce 39	jsr $39ce			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.39a5	4c c2 39	jmp $39c2			jmp 	PDLByte0
.39a8					UnaryDeek:
.39a8	20 ce 39	jsr $39ce			jsr 	PDLCode
.39ab	4c bc 39	jmp $39bc			jmp 	PDLByte1
.39ae					UnaryLeek:
.39ae	20 ce 39	jsr $39ce			jsr 	PDLCode
.39b1	a0 03		ldy #$03			ldy 	#3							; read 3-2
.39b3	b1 2a		lda ($2a),y			lda 	(temp0),y
.39b5	95 b0		sta $b0,x			sta 	esInt3,x
.39b7	88		dey				dey
.39b8	b1 2a		lda ($2a),y			lda 	(temp0),y
.39ba	95 a8		sta $a8,x			sta 	esInt2,x
.39bc					PDLByte1:
.39bc	a0 01		ldy #$01			ldy 	#1
.39be	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c0	95 a0		sta $a0,x			sta 	esInt1,x
.39c2					PDLByte0:
.39c2	a0 00		ldy #$00			ldy 	#0
.39c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c6	95 98		sta $98,x			sta 	esInt0,x
.39c8	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.39ca	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen 			; check right and return
.39cd	60		rts				rts
.39ce					PDLCode:
.39ce	20 02 38	jsr $3802			jsr 	EvaluateInteger 			; some address
.39d1	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.39d3	85 2a		sta $2a				sta 	temp0
.39d5	b5 a0		lda $a0,x			lda 	esInt1,x
.39d7	85 2b		sta $2b				sta 	temp0+1
.39d9	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.39db	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.39dd	95 a8		sta $a8,x			sta 	esInt2,x
.39df	95 b0		sta $b0,x			sta 	esInt3,x
.39e1	84 32		sty $32				sty 	tempShort 					; save Y
.39e3	60		rts				rts
.39e4					Unary_Random:
.39e4	20 b1 3e	jsr $3eb1			jsr 	MInt32Random 				; generate random number.
.39e7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.39e9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.39eb	f0 08		beq $39f5			beq 	_URExit
.39ed	e8		inx				inx 								; load range 0..r-1 into +1
.39ee	20 02 38	jsr $3802			jsr 	EvaluateInteger
.39f1	ca		dex				dex
.39f2	20 d9 3c	jsr $3cd9			jsr 	MInt32Modulus 				; calculate random % modulus
.39f5					_URExit:
.39f5	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen 			; check right and return
.39f8	60		rts				rts
.39f9					Unary_Min:
.39f9	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.39fb	d0 02		bne $39ff			bne 	UnaryMBody
.39fd					Unary_Max:
.39fd	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.39ff					UnaryMBody:
.39ff	48		pha				pha 								; save comparator on stack, shows min or max
.3a00	20 e3 37	jsr $37e3			jsr 	Evaluate 					; get the first thing to check
.3a03					_UnaryMLoop:
.3a03	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3a05	c8		iny				iny
.3a06	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3a08	f0 09		beq $3a13			beq 	_UnaryMExit
.3a0a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3a0c	f0 07		beq $3a15			beq 	_UnaryMCompare
.3a0e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3a10	20 27 15	jsr $1527		jsr	errorHandler
.3a13					_UnaryMExit:
.3a13	68		pla				pla 								; done so throw comparator and return.
.3a14	60		rts				rts
.3a15					_UnaryMCompare:
.3a15	e8		inx				inx 								; get the 2nd thing to evaluate
.3a16	20 e3 37	jsr $37e3			jsr 	Evaluate
.3a19	ca		dex				dex
.3a1a	20 ab 35	jsr $35ab			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3a1d	85 32		sta $32				sta 	tempShort 					; save result
.3a1f	68		pla				pla 								; get what we need
.3a20	48		pha				pha
.3a21	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3a23	d0 de		bne $3a03			bne 	_UnaryMLoop 				; no, try another value.
.3a25	20 81 3e	jsr $3e81			jsr 	MInt32False 				; promote 2nd to 1st.
.3a28	20 67 3d	jsr $3d67			jsr 	MInt32Add
.3a2b	4c 03 3a	jmp $3a03			jmp 	_UnaryMLoop
.3a2e					Unary_Page:
.3a2e	20 81 3e	jsr $3e81			jsr 	MInt32False 				; zero
.3a31	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3a34	95 98		sta $98,x			sta 	esInt0,x
.3a36	ad c9 0a	lda $0ac9			lda 	basePage+1
.3a39	95 a0		sta $a0,x			sta 	esInt1,x
.3a3b	60		rts				rts
.3a3c					UnaryReference:
.3a3c	a9 0f		lda #$0f			lda 	#15
.3a3e	20 79 36	jsr $3679			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3a41	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.3a43	10 05		bpl $3a4a			bpl 	UType
.3a45	a9 00		lda #$00			lda 	#0 							; make it an integer
.3a47	95 90		sta $90,x			sta 	esType,x
.3a49	60		rts				rts
.3a4a					UType:
.3a4a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3a4c	20 27 15	jsr $1527		jsr	errorHandler
.3a4f					UnaryHexMarker:
.3a4f	4c d4 37	jmp $37d4			jmp 	EvaluateIntegerTerm
.3a52					UnaryComplement:
.3a52	20 d4 37	jsr $37d4			jsr 	EvaluateIntegerTerm
.3a55	20 55 3e	jsr $3e55			jsr 	MInt32Not
.3a58	60		rts				rts
.3a59					UnaryIntToFloat:
.3a59	20 ec 37	jsr $37ec			jsr 	EvaluateNumeric				; some number
.3a5c	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3a5e	d0 0b		bne $3a6b			bne 	_UIFExit
.3a60	8a		txa				txa 								; convert and set type
.3a61	a2 1c		ldx #$1c		ldx	#28
.3a63	20 22 27	jsr $2722		jsr	floatingpointHandler
.3a66	aa		tax				tax
.3a67	a9 01		lda #$01			lda 	#1
.3a69	95 90		sta $90,x			sta 	esType,x
.3a6b					_UIFExit:
.3a6b	60		rts				rts
.3a6c					UnaryFloatToInt:
.3a6c	20 ec 37	jsr $37ec			jsr 	EvaluateNumeric 			; the number
.3a6f	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3a71	f0 0b		beq $3a7e			beq 	_UFIExit
.3a73	8a		txa				txa 								; convert to int
.3a74	a2 14		ldx #$14		ldx	#20
.3a76	20 22 27	jsr $2722		jsr	floatingpointHandler
.3a79	aa		tax				tax
.3a7a	a9 00		lda #$00			lda 	#0 							; set type
.3a7c	95 90		sta $90,x			sta 	esType,x
.3a7e					_UFIExit:
.3a7e	60		rts				rts
.3a7f					UnaryAlloc:
.3a7f	e8		inx				inx 								; evaluate memory required
.3a80	20 02 38	jsr $3802			jsr 	EvaluateInteger
.3a83	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen
.3a86	ca		dex				dex
.3a87	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3a89	15 b1		ora $b1,x			ora 	esInt3+1,x
.3a8b	d0 1d		bne $3aaa			bne 	_UABadValue
.3a8d	20 81 3e	jsr $3e81			jsr 	MInt32False					; zero return.
.3a90	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3a92	95 a0		sta $a0,x			sta 	esInt1,x
.3a94	a5 35		lda $35				lda 	lowMemory
.3a96	95 98		sta $98,x			sta 	esInt0,x
.3a98	18		clc				clc 								; add alloc required.
.3a99	75 99		adc $99,x			adc 	esInt0+1,x
.3a9b	85 35		sta $35				sta 	lowMemory
.3a9d	a5 36		lda $36				lda 	lowMemory+1
.3a9f	75 a1		adc $a1,x			adc 	esInt1+1,x
.3aa1	85 36		sta $36				sta 	lowMemory+1
.3aa3	b0 05		bcs $3aaa			bcs		_UABadValue 				; overflow definitely bad.
.3aa5	c5 34		cmp $34				cmp 	highMemory+1
.3aa7	b0 01		bcs $3aaa			bcs 	_UABadValue 				; out of memory bad.
.3aa9	60		rts				rts
.3aaa					_UABadValue:
.3aaa	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3aac	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3aaf					UnaryTimer:
.3aaf	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen 			; no parameters
.3ab2	5a		phy				phy
.3ab3	20 a8 3e	jsr $3ea8			jsr 	MInt32Zero 					; zero result
.3ab6	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3ab8	a2 1c		ldx #$1c		ldx	#28
.3aba	20 05 15	jsr $1505		jsr	deviceHandler
.3abd	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3abf	95 98		sta $98,x			sta 	esInt0,x
.3ac1	98		tya				tya
.3ac2	95 a0		sta $a0,x			sta 	esInt1,x
.3ac4	7a		ply				ply
.3ac5	60		rts				rts
.3ac6					UnaryInkey:
.3ac6	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen
.3ac9	86 2a		stx $2a				stx 	temp0
.3acb	a2 08		ldx #$08		ldx	#8
.3acd	20 05 15	jsr $1505		jsr	deviceHandler
.3ad0	a6 2a		ldx $2a				ldx 	temp0
.3ad2	20 90 3e	jsr $3e90			jsr 	MInt32Set8Bit
.3ad5	60		rts				rts
.3ad6					UnaryGet:
.3ad6	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen
.3ad9	86 2a		stx $2a				stx 	temp0
.3adb					_UGLoop:
.3adb	a2 18		ldx #$18		ldx	#24
.3add	20 05 15	jsr $1505		jsr	deviceHandler
.3ae0	a2 08		ldx #$08		ldx	#8
.3ae2	20 05 15	jsr $1505		jsr	deviceHandler
.3ae5	c9 00		cmp #$00			cmp 	#0
.3ae7	f0 f2		beq $3adb			beq 	_UGLoop
.3ae9	a6 2a		ldx $2a				ldx 	temp0
.3aeb	20 90 3e	jsr $3e90			jsr 	MInt32Set8Bit
.3aee	60		rts				rts
.3aef					UnaryGetString:
.3aef	20 d6 3a	jsr $3ad6			jsr 	UnaryGet
.3af2					UGSDoChr:
.3af2	4c 3f 3b	jmp $3b3f			jmp 	ChrCode
.3af5					UnaryInkeyString:
.3af5	20 c6 3a	jsr $3ac6			jsr 	UnaryInkey
.3af8	b5 98		lda $98,x			lda 	esInt0,x
.3afa	d0 f6		bne $3af2			bne 	UGSDoChr
.3afc	8a		txa				txa
.3afd	a2 08		ldx #$08		ldx	#8
.3aff	20 18 42	jsr $4218		jsr	stringHandler
.3b02	aa		tax				tax
.3b03	60		rts				rts
.3b04					UnarySys:
.3b04	20 02 38	jsr $3802			jsr 	EvaluateInteger 				; get the address
.3b07	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen
.3b0a	20 06 2c	jsr $2c06			jsr 	TOSToTemp0 						; copy call address to temp0
.3b0d	da		phx				phx
.3b0e	5a		phy				phy
.3b0f	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3b12	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3b15	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3b18	20 25 3b	jsr $3b25			jsr 	_CallTemp0
.3b1b	85 32		sta $32				sta 	tempShort 						; restore YX
.3b1d	7a		ply				ply
.3b1e	fa		plx				plx
.3b1f	a5 32		lda $32				lda 	tempShort
.3b21	20 90 3e	jsr $3e90			jsr 	MInt32Set8Bit 					; return result.
.3b24	60		rts				rts
.3b25					_CallTemp0:
.3b25	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3b28					UnaryMem:
.3b28	20 81 3e	jsr $3e81			jsr 	MInt32False 					; set to false (e.g. 0)
.3b2b	38		sec				sec
.3b2c	a5 33		lda $33				lda 	highMemory 						; calculate value
.3b2e	e5 35		sbc $35				sbc 	lowMemory
.3b30	95 98		sta $98,x			sta 	esInt0,x
.3b32	a5 34		lda $34				lda 	highMemory+1
.3b34	e5 36		sbc $36				sbc 	lowMemory+1
.3b36	95 a0		sta $a0,x			sta 	esInt1,x
.3b38	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3b39					ExecChr:
.3b39	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger		; character number 0-255
.3b3c	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen				; right bracket
.3b3f					ChrCode:
.3b3f	5a		phy				phy
.3b40	8a		txa				txa 								; A = stack
.3b41	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3b43	a2 02		ldx #$02		ldx	#2
.3b45	20 18 42	jsr $4218		jsr	stringHandler
.3b48	aa		tax				tax 								; X = stack
.3b49	7a		ply				ply
.3b4a	60		rts				rts
.3b4b					ExecLower:
.3b4b	38		sec				sec 								; set carry is lower
.3b4c	b0 01		bcs $3b4f			bcs 	ExecUpperLower
.3b4e					ExecUpper:
.3b4e	18		clc				clc 								; clear carry is upper
.3b4f					ExecUpperLower:
.3b4f	08		php				php 								; save carry
.3b50	20 f7 37	jsr $37f7			jsr 	EvaluateString 				; string to stack,X
.3b53	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen 			; check closing right bracket.
.3b56	28		plp				plp 								; restore carry, save Y
.3b57	5a		phy				phy
.3b58	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3b5a	2a		rol a				rol 	a
.3b5b	a8		tay				tay 								; now in Y
.3b5c	8a		txa				txa 								; do the substring and exit.
.3b5d	a2 0c		ldx #$0c		ldx	#12
.3b5f	20 18 42	jsr $4218		jsr	stringHandler
.3b62	aa		tax				tax
.3b63	7a		ply				ply
.3b64	60		rts				rts
.3b65					ExecLeft:
.3b65	20 f7 37	jsr $37f7			jsr 	EvaluateString 				; string to stack,X
.3b68	20 ff 3e	jsr $3eff			jsr 	CheckComma
.3b6b	e8		inx				inx
.3b6c	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3b6e	20 90 3e	jsr $3e90			jsr 	MInt32Set8Bit
.3b71	e8		inx				inx
.3b72	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3b75					ExecSubstring:
.3b75	ca		dex				dex 								; fix up X
.3b76	ca		dex				dex
.3b77	20 f2 3e	jsr $3ef2			jsr 	CheckRightParen 			; check closing right bracket.
.3b7a	8a		txa				txa 								; do the substring and exit.
.3b7b	a2 0e		ldx #$0e		ldx	#14
.3b7d	20 18 42	jsr $4218		jsr	stringHandler
.3b80	aa		tax				tax
.3b81	60		rts				rts
.3b82					ExecMid:
.3b82	20 f7 37	jsr $37f7			jsr 	EvaluateString 				; string to stack,X
.3b85	20 ff 3e	jsr $3eff			jsr 	CheckComma
.3b88	e8		inx				inx
.3b89	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3b8c	c9 00		cmp #$00			cmp 	#0
.3b8e	f0 15		beq $3ba5			beq 	_EMValue
.3b90	e8		inx				inx
.3b91	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3b93	20 90 3e	jsr $3e90			jsr 	MInt32Set8Bit
.3b96	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3b98	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3b9a	f0 d9		beq $3b75			beq 	ExecSubString
.3b9c	20 ff 3e	jsr $3eff			jsr 	CheckComma
.3b9f	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3ba2	4c 75 3b	jmp $3b75			jmp 	ExecSubString
.3ba5					_EMValue:
.3ba5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3ba7	20 27 15	jsr $1527		jsr	errorHandler
.3baa					ExecRight:
.3baa	20 f7 37	jsr $37f7			jsr 	EvaluateString 				; string to stack,X
.3bad	20 ff 3e	jsr $3eff			jsr 	CheckComma
.3bb0	e8		inx				inx
.3bb1	20 0a 38	jsr $380a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3bb4	ca		dex				dex
.3bb5	5a		phy				phy
.3bb6	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3bb8	85 2a		sta $2a				sta 	temp0
.3bba	b5 a0		lda $a0,x			lda 	esInt1,x
.3bbc	85 2b		sta $2b				sta 	temp0+1
.3bbe	a0 00		ldy #$00			ldy 	#0 							; point to length
.3bc0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3bc2	18		clc				clc 								; add 1.
.3bc3	69 01		adc #$01			adc 	#1
.3bc5	38		sec				sec
.3bc6	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3bc8	f0 02		beq $3bcc			beq		_ERMake1 					; if zero, make it 1.
.3bca	b0 02		bcs $3bce			bcs		_EROkay
.3bcc					_ERMake1:
.3bcc	a9 01		lda #$01			lda 	#1 							; start position.
.3bce					_EROkay:
.3bce	e8		inx				inx 								; set start pos.
.3bcf	95 98		sta $98,x			sta 	esInt0,x
.3bd1	e8		inx				inx
.3bd2	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3bd4	20 90 3e	jsr $3e90			jsr 	MInt32Set8Bit
.3bd7	7a		ply				ply
.3bd8	4c 75 3b	jmp $3b75			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3bdb					MInt32And:
.3bdb	b5 98		lda $98,x			lda 	esInt0,x
.3bdd	35 99		and $99,x			and 	esInt0+1,x
.3bdf	95 98		sta $98,x			sta 	esInt0,x
.3be1	b5 a0		lda $a0,x			lda 	esInt1,x
.3be3	35 a1		and $a1,x			and 	esInt1+1,x
.3be5	95 a0		sta $a0,x			sta 	esInt1,x
.3be7	b5 a8		lda $a8,x			lda 	esInt2,x
.3be9	35 a9		and $a9,x			and 	esInt2+1,x
.3beb	95 a8		sta $a8,x			sta 	esInt2,x
.3bed	b5 b0		lda $b0,x			lda 	esInt3,x
.3bef	35 b1		and $b1,x			and 	esInt3+1,x
.3bf1	95 b0		sta $b0,x			sta 	esInt3,x
.3bf3	60		rts				rts
.3bf4					MInt32Or:
.3bf4	b5 98		lda $98,x			lda 	esInt0,x
.3bf6	15 99		ora $99,x			ora 	esInt0+1,x
.3bf8	95 98		sta $98,x			sta 	esInt0,x
.3bfa	b5 a0		lda $a0,x			lda 	esInt1,x
.3bfc	15 a1		ora $a1,x			ora 	esInt1+1,x
.3bfe	95 a0		sta $a0,x			sta 	esInt1,x
.3c00	b5 a8		lda $a8,x			lda 	esInt2,x
.3c02	15 a9		ora $a9,x			ora 	esInt2+1,x
.3c04	95 a8		sta $a8,x			sta 	esInt2,x
.3c06	b5 b0		lda $b0,x			lda 	esInt3,x
.3c08	15 b1		ora $b1,x			ora 	esInt3+1,x
.3c0a	95 b0		sta $b0,x			sta 	esInt3,x
.3c0c	60		rts				rts
.3c0d					MInt32Xor:
.3c0d	b5 98		lda $98,x			lda 	esInt0,x
.3c0f	55 99		eor $99,x			eor 	esInt0+1,x
.3c11	95 98		sta $98,x			sta 	esInt0,x
.3c13	b5 a0		lda $a0,x			lda 	esInt1,x
.3c15	55 a1		eor $a1,x			eor 	esInt1+1,x
.3c17	95 a0		sta $a0,x			sta 	esInt1,x
.3c19	b5 a8		lda $a8,x			lda 	esInt2,x
.3c1b	55 a9		eor $a9,x			eor 	esInt2+1,x
.3c1d	95 a8		sta $a8,x			sta 	esInt2,x
.3c1f	b5 b0		lda $b0,x			lda 	esInt3,x
.3c21	55 b1		eor $b1,x			eor 	esInt3+1,x
.3c23	95 b0		sta $b0,x			sta 	esInt3,x
.3c25	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3c26					MInt32Compare:
.3c26	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3c28	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3c2a	d0 13		bne $3c3f			bne 	MInt32Compare2
.3c2c	b5 a0		lda $a0,x			lda 	esInt1,x
.3c2e	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3c30	d0 0d		bne $3c3f			bne 	MInt32Compare2
.3c32	b5 a8		lda $a8,x			lda 	esInt2,x
.3c34	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3c36	d0 07		bne $3c3f			bne 	MInt32Compare2
.3c38	b5 b0		lda $b0,x			lda 	esInt3,x
.3c3a	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3c3c	d0 01		bne $3c3f			bne 	MInt32Compare2
.3c3e	60		rts				rts
.3c3f					MInt32Compare2:
.3c3f	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3c41	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3c43	b5 a0		lda $a0,x			lda		esInt1,x
.3c45	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3c47	b5 a8		lda $a8,x			lda		esInt2,x
.3c49	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3c4b	b5 b0		lda $b0,x			lda		esInt3,x
.3c4d	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3c4f	50 02		bvc $3c53			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3c51	49 80		eor #$80			eor 	#$80
.3c53					_I32LNoOverflow
.3c53	30 03		bmi $3c58			bmi 	MInt32CLess					; if -ve then return $FF
.3c55	a9 01		lda #$01			lda 	#$01						; else return $01
.3c57	60		rts				rts
.3c58					MInt32CLess:
.3c58	a9 ff		lda #$ff			lda 	#$FF
.3c5a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3c5b					MInt32SDivide:
.3c5b	98		tya				tya  								; save Y, which is the count of negations
.3c5c	48		pha				pha
.3c5d	a0 00		ldy #$00			ldy 	#0 							; zero count
.3c5f	20 77 3c	jsr $3c77			jsr 	_MInt32SRemSign 			; unsign TOS
.3c62	e8		inx				inx 								; unsign TOS+1
.3c63	20 77 3c	jsr $3c77			jsr 	_MInt32SRemSign
.3c66	ca		dex				dex
.3c67	98		tya				tya 								; save sign count on stack
.3c68	48		pha				pha
.3c69	20 80 3c	jsr $3c80			jsr 	MInt32UDivide 				; unsigned division
.3c6c	68		pla				pla 								; get sign count back
.3c6d	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3c6f	f0 03		beq $3c74			beq 	_I32SNoNeg
.3c71	20 3b 3e	jsr $3e3b			jsr 	MInt32Negate
.3c74					_I32SNoNeg:
.3c74	68		pla				pla 								; restoe Y and exit
.3c75	a8		tay				tay
.3c76	60		rts				rts
.3c77					_MInt32SRemSign:
.3c77	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3c79	10 04		bpl $3c7f			bpl 	_MInt32SRSExit
.3c7b	c8		iny				iny 								; increment the sign count
.3c7c	20 3b 3e	jsr $3e3b			jsr 	MInt32Negate 				; negate the value.
.3c7f					_MInt32SRSExit:
.3c7f	60		rts				rts
.3c80					MInt32UDivide:
.3c80	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3c82	15 a1		ora $a1,x			ora 	esInt1+1,x
.3c84	15 a2		ora $a2,x			ora 	esInt1+2,x
.3c86	15 a3		ora $a3,x			ora 	esInt1+3,x
.3c88	f0 4a		beq $3cd4			beq 	_MInt32DZero
.3c8a	e8		inx				inx 								; clear A
.3c8b	e8		inx				inx
.3c8c	20 81 3e	jsr $3e81			jsr 	MInt32False
.3c8f	ca		dex				dex
.3c90	ca		dex				dex
.3c91	98		tya				tya 								; save Y on the stack
.3c92	48		pha				pha
.3c93	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3c95					_MInt32UDLoop:
.3c95	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3c97	36 a0		rol $a0,x			rol 	esInt1,x
.3c99	36 a8		rol $a8,x			rol 	esInt2,x
.3c9b	36 b0		rol $b0,x			rol 	esInt3,x
.3c9d	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3c9f	36 a2		rol $a2,x			rol 	esInt1+2,x
.3ca1	36 aa		rol $aa,x			rol 	esInt2+2,x
.3ca3	36 b2		rol $b2,x			rol 	esInt3+2,x
.3ca5	38		sec				sec 								; calculate A-M saving result on the stack
.3ca6	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3ca8	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3caa	48		pha				pha
.3cab	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3cad	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3caf	48		pha				pha
.3cb0	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3cb2	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3cb4	48		pha				pha
.3cb5	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3cb7	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3cb9	90 10		bcc $3ccb			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3cbb	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3cbd	68		pla				pla
.3cbe	95 aa		sta $aa,x			sta 	esInt2+2,x
.3cc0	68		pla				pla
.3cc1	95 a2		sta $a2,x			sta 	esInt1+2,x
.3cc3	68		pla				pla
.3cc4	95 9a		sta $9a,x			sta 	esInt0+2,x
.3cc6	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3cc8	4c ce 3c	jmp $3cce			jmp 	_MInt32Next 					; do the next iteration
.3ccb					_MInt32NoSubtract:
.3ccb	68		pla				pla
.3ccc	68		pla				pla
.3ccd	68		pla				pla
.3cce					_MInt32Next:
.3cce	88		dey				dey 								; do this 32 times.
.3ccf	d0 c4		bne $3c95			bne 	_MInt32UDLoop
.3cd1	68		pla				pla 								; restore Y and exit
.3cd2	a8		tay				tay
.3cd3	60		rts				rts
.3cd4					_MInt32DZero:
.3cd4	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3cd6	20 27 15	jsr $1527		jsr	errorHandler
.3cd9					MInt32Modulus:
.3cd9	20 80 3c	jsr $3c80			jsr 	MInt32UDivide 				; do the division.
.3cdc	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3cde	95 b0		sta $b0,x			sta 	esInt3,x
.3ce0	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3ce2	95 a8		sta $a8,x			sta 	esInt2,x
.3ce4	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3ce6	95 a0		sta $a0,x			sta 	esInt1,x
.3ce8	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3cea	95 98		sta $98,x			sta 	esInt0,x
.3cec	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d67					fs32Length:
>0d67							.fill 	1
.3ced					LinkInt32FromString:
.3ced	aa		tax				tax
.3cee	98		tya				tya
.3cef	20 f4 3c	jsr $3cf4			jsr 	MInt32FromString
.3cf2	8a		txa				txa
.3cf3	60		rts				rts
.3cf4					MInt32FromString:
.3cf4	85 32		sta $32				sta 	tempShort 					; save base
.3cf6	5a		phy				phy
.3cf7	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3cf9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cfb	8d 67 0d	sta $0d67			sta 	fs32Length
.3cfe	f0 64		beq $3d64			beq 	_I32FSFail2					; fail if length zero.
.3d00	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3d02	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3d04	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3d06	d0 09		bne $3d11			bne 	_I32FSNotNegative
.3d08	ad 67 0d	lda $0d67			lda 	fs32Length 					; get length back.
.3d0b	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3d0d	f0 55		beq $3d64			beq 	_I32FSFail2
.3d0f	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3d11					_I32FSNotNegative:
.3d11	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3d13	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3d15	d0 02		bne $3d19			bne 	_I32FSNN2
.3d17	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3d19					_I32FSNN2:
.3d19	48		pha				pha 								; save base + final sign on stack.
.3d1a	20 81 3e	jsr $3e81			jsr 	MInt32False 				; zero the return value.
.3d1d					_I32FSMainLoop:
.3d1d	68		pla				pla 								; get the base back into tempShort
.3d1e	48		pha				pha
.3d1f	29 7f		and #$7f			and 	#$7F
.3d21	85 32		sta $32				sta 	tempShort
.3d23	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3d25	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3d27	90 02		bcc $3d2b			bcc 	_I32FSNotLC
.3d29	e9 20		sbc #$20			sbc 	#32
.3d2b					_I32FSNotLC:
.3d2b	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3d2c	e9 30		sbc #$30			sbc 	#"0"
.3d2e	90 33		bcc $3d63			bcc 	_I32FSFail 					; nothing more to do.
.3d30	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3d32	90 06		bcc $3d3a			bcc 	_I32FSValidate
.3d34	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3d36	90 2b		bcc $3d63			bcc 	_I32FSFail
.3d38	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3d3a					_I32FSValidate:
.3d3a	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3d3c	b0 25		bcs $3d63			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3d3e	48		pha				pha 								; save the new digit value.
.3d3f	e8		inx				inx 								; put base into next slot up on stack
.3d40	a5 32		lda $32				lda 	tempShort
.3d42	20 90 3e	jsr $3e90			jsr 	MInt32Set8Bit
.3d45	ca		dex				dex
.3d46	20 9b 3d	jsr $3d9b			jsr 	MInt32Multiply 				; multiply current by the base
.3d49	e8		inx				inx
.3d4a	68		pla				pla  								; put additive into next slot
.3d4b	20 90 3e	jsr $3e90			jsr 	MInt32Set8Bit
.3d4e	ca		dex				dex
.3d4f	20 67 3d	jsr $3d67			jsr 	MInt32Add 					; and add it
.3d52	c8		iny				iny 								; bump the character pointer
.3d53	cc 67 0d	cpy $0d67			cpy 	fs32Length 					; until > length.
.3d56	f0 c5		beq $3d1d			beq 	_I32FSMainLoop
.3d58	90 c3		bcc $3d1d			bcc 	_I32FSMainLoop
.3d5a					_I32FSDone:
.3d5a	68		pla				pla 								; get base/final sign back
.3d5b	10 03		bpl $3d60			bpl 	_I32FSNN3
.3d5d	20 3b 3e	jsr $3e3b			jsr 	MInt32Negate 				; negate the result.
.3d60					_I32FSNN3:
.3d60	7a		ply				ply
.3d61	38		sec				sec
.3d62	60		rts				rts
.3d63					_I32FSFail:
.3d63	68		pla				pla
.3d64					_I32FSFail2:
.3d64	7a		ply				ply
.3d65	18		clc				clc
.3d66	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3d67					MInt32Add:
.3d67	18		clc				clc
.3d68	b5 98		lda $98,x			lda 	esInt0,x
.3d6a	75 99		adc $99,x			adc 	esInt0+1,x
.3d6c	95 98		sta $98,x			sta 	esInt0,x
.3d6e	b5 a0		lda $a0,x			lda 	esInt1,x
.3d70	75 a1		adc $a1,x			adc 	esInt1+1,x
.3d72	95 a0		sta $a0,x			sta 	esInt1,x
.3d74	b5 a8		lda $a8,x			lda 	esInt2,x
.3d76	75 a9		adc $a9,x			adc 	esInt2+1,x
.3d78	95 a8		sta $a8,x			sta 	esInt2,x
.3d7a	b5 b0		lda $b0,x			lda 	esInt3,x
.3d7c	75 b1		adc $b1,x			adc 	esInt3+1,x
.3d7e	95 b0		sta $b0,x			sta 	esInt3,x
.3d80	60		rts				rts
.3d81					MInt32Sub:
.3d81	38		sec				sec
.3d82	b5 98		lda $98,x			lda 	esInt0,x
.3d84	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3d86	95 98		sta $98,x			sta 	esInt0,x
.3d88	b5 a0		lda $a0,x			lda 	esInt1,x
.3d8a	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3d8c	95 a0		sta $a0,x			sta 	esInt1,x
.3d8e	b5 a8		lda $a8,x			lda 	esInt2,x
.3d90	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d92	95 a8		sta $a8,x			sta 	esInt2,x
.3d94	b5 b0		lda $b0,x			lda 	esInt3,x
.3d96	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d98	95 b0		sta $b0,x			sta 	esInt3,x
.3d9a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3d9b					MInt32Multiply:
.3d9b	e8		inx				inx 								; copy 2nd -> 3rd
.3d9c	20 c1 3d	jsr $3dc1			jsr 	MInt32CopyUp
.3d9f	ca		dex				dex
.3da0	20 c1 3d	jsr $3dc1			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3da3	20 81 3e	jsr $3e81			jsr 	MInt32False 				; zero 1st.
.3da6					_I32Loop:
.3da6	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3da8	29 01		and #$01			and 	#1
.3daa	f0 03		beq $3daf			beq 	_I32NoAdd 					; if set
.3dac	20 67 3d	jsr $3d67			jsr 	MInt32Add 					; add 2nd to 1st.
.3daf					_I32NoAdd:
.3daf	e8		inx				inx 								; shift 2nd left
.3db0	20 96 3e	jsr $3e96			jsr 	MInt32ShiftLeft
.3db3	e8		inx				inx  								; shift 3rd right
.3db4	20 9f 3e	jsr $3e9f			jsr 	MInt32ShiftRight
.3db7	20 a8 3e	jsr $3ea8			jsr 	MInt32Zero 					; check if zero.
.3dba	08		php				php 								; save status bits
.3dbb	ca		dex				dex 	 							; point back to 1st
.3dbc	ca		dex				dex
.3dbd	28		plp				plp 								; get status bits
.3dbe	d0 e6		bne $3da6			bne 	_I32Loop 					; if non-zero keep going.
.3dc0	60		rts				rts
.3dc1					MInt32CopyUp:
.3dc1	b5 98		lda $98,x			lda 	esInt0,x
.3dc3	95 99		sta $99,x			sta 	esInt0+1,x
.3dc5	b5 a0		lda $a0,x			lda 	esInt1,x
.3dc7	95 a1		sta $a1,x			sta 	esInt1+1,x
.3dc9	b5 a8		lda $a8,x			lda 	esInt2,x
.3dcb	95 a9		sta $a9,x			sta 	esInt2+1,x
.3dcd	b5 b0		lda $b0,x			lda 	esInt3,x
.3dcf	95 b1		sta $b1,x			sta 	esInt3+1,x
.3dd1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d68					MCharCount:	.fill 	1						; count of converted characters
.3dd2					MLInt32ToString:
.3dd2	aa		tax				tax									; module passes stack in A, base in Y
.3dd3	98		tya				tya
.3dd4	20 d9 3d	jsr $3dd9			jsr 	MInt32ToString
.3dd7	8a		txa				txa
.3dd8	60		rts				rts
.3dd9					MInt32ToString:
.3dd9	48		pha				pha 								; save base
.3dda	85 32		sta $32				sta 	tempShort 					; save target base.
.3ddc	a9 00		lda #$00			lda 	#0
.3dde	8d 68 0d	sta $0d68			sta 	MCharCount 					; clear character count to 0
.3de1	5a		phy				phy
.3de2	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3de4	10 10		bpl $3df6			bpl 	_I32TSUnsigned
.3de6	48		pha				pha 								; save base on stack.
.3de7	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3de9	10 08		bpl $3df3			bpl 	_I32TSNoFlip
.3deb	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3ded	20 28 3e	jsr $3e28			jsr 	MI32WriteCharacter
.3df0	20 3b 3e	jsr $3e3b			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3df3					_I32TSNoFlip:
.3df3	68		pla				pla 								; get the base back
.3df4	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3df6					_I32TSUnsigned:
.3df6	20 03 3e	jsr $3e03			jsr 	MI32DivideWrite 			; recursive code to output string.
.3df9	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3dfb	ad 68 0d	lda $0d68			lda 	MCharCount
.3dfe	91 2a		sta ($2a),y			sta 	(temp0),y
.3e00	7a		ply				ply
.3e01	68		pla				pla
.3e02	60		rts				rts
.3e03					MI32DivideWrite:
.3e03	48		pha				pha 								; save the divisor/base
.3e04	e8		inx				inx 								; write in the dividing position.
.3e05	20 90 3e	jsr $3e90			jsr 	MInt32Set8Bit
.3e08	ca		dex				dex
.3e09	20 80 3c	jsr $3c80			jsr 	MInt32UDivide 				; divide number by base.
.3e0c	68		pla				pla 								; get the base into Y
.3e0d	a8		tay				tay
.3e0e	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3e10	48		pha				pha
.3e11	20 a8 3e	jsr $3ea8			jsr 	MInt32Zero 					; is the result zero ?
.3e14	f0 04		beq $3e1a			beq 	_I32NoRecurse 				; if so, don't recurse.
.3e16	98		tya				tya 								; put base into A
.3e17	20 03 3e	jsr $3e03			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3e1a					_I32NoRecurse:
.3e1a	68		pla				pla 								; get the remainder back
.3e1b	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3e1d	90 02		bcc $3e21			bcc 	_I32NotHex
.3e1f	69 06		adc #$06			adc 	#7-1
.3e21					_I32NotHex:
.3e21	18		clc				clc 								; make it ASCII
.3e22	69 30		adc #$30			adc 	#48
.3e24	20 28 3e	jsr $3e28			jsr 	MI32WriteCharacter 			; write the character out
.3e27	60		rts				rts 								; and exit.
.3e28					MI32WriteCharacter:
.3e28	ee 68 0d	inc $0d68			inc 	MCharCount 					; bump count (space for leading count)
.3e2b	ac 68 0d	ldy $0d68			ldy 	MCharCount 					; get position
.3e2e	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3e30	c8		iny				iny
.3e31	a9 00		lda #$00			lda 	#0
.3e33	91 2a		sta ($2a),y			sta 	(temp0),y
.3e35	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d69					MSeed32:	.fill 	4							; random number seed.
.3e36					MInt32Absolute:
.3e36	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3e38	30 01		bmi $3e3b			bmi 	MInt32Negate
.3e3a	60		rts				rts
.3e3b					MInt32Negate:
.3e3b	38		sec				sec 								; subtract from zero.
.3e3c	a9 00		lda #$00			lda 	#0
.3e3e	f5 98		sbc $98,x			sbc 	esInt0,x
.3e40	95 98		sta $98,x			sta 	esInt0,x
.3e42	a9 00		lda #$00			lda 	#0
.3e44	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3e46	95 a0		sta $a0,x			sta 	esInt1,x
.3e48	a9 00		lda #$00			lda 	#0
.3e4a	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3e4c	95 a8		sta $a8,x			sta 	esInt2,x
.3e4e	a9 00		lda #$00			lda 	#0
.3e50	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3e52	95 b0		sta $b0,x			sta 	esInt3,x
.3e54	60		rts				rts
.3e55					MInt32Not:
.3e55	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3e57	49 ff		eor #$ff			eor 	#$FF
.3e59	95 98		sta $98,x			sta 	esInt0,x
.3e5b	b5 a0		lda $a0,x			lda 	esInt1,x
.3e5d	49 ff		eor #$ff			eor 	#$FF
.3e5f	95 a0		sta $a0,x			sta 	esInt1,x
.3e61	b5 a8		lda $a8,x			lda 	esInt2,x
.3e63	49 ff		eor #$ff			eor 	#$FF
.3e65	95 a8		sta $a8,x			sta 	esInt2,x
.3e67	b5 b0		lda $b0,x			lda 	esInt3,x
.3e69	49 ff		eor #$ff			eor 	#$FF
.3e6b	95 b0		sta $b0,x			sta 	esInt3,x
.3e6d	60		rts				rts
.3e6e					MInt32Sign:
.3e6e	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3e70	30 0b		bmi $3e7d			bmi 	MInt32True 					; if set return -1 (true)
.3e72	20 a8 3e	jsr $3ea8			jsr 	MInt32Zero 					; is it zero ?
.3e75	f0 0a		beq $3e81			beq 	MInt32False 				; if zero return 0 (false)
.3e77	20 81 3e	jsr $3e81			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3e7a	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3e7c	60		rts				rts
.3e7d					MInt32True:
.3e7d	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3e7f	d0 02		bne $3e83			bne 	MInt32WriteAll
.3e81					MInt32False:
.3e81	a9 00		lda #$00			lda 	#0
.3e83					MInt32WriteAll:
.3e83	95 98		sta $98,x			sta 	esInt0,x
.3e85					MInt32Write123:
.3e85	95 a0		sta $a0,x			sta 	esInt1,x
.3e87	95 a8		sta $a8,x			sta 	esInt2,x
.3e89	95 b0		sta $b0,x			sta 	esInt3,x
.3e8b	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3e8d	95 90		sta $90,x			sta 	esType,x
.3e8f	60		rts				rts
.3e90					MInt32Set8Bit:
.3e90	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3e92	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3e94	f0 ef		beq $3e85			beq		MInt32Write123
.3e96					MInt32ShiftLeft:
.3e96	16 98		asl $98,x			asl 	esInt0,x
.3e98	36 a0		rol $a0,x			rol	 	esInt1,x
.3e9a	36 a8		rol $a8,x			rol	 	esInt2,x
.3e9c	36 b0		rol $b0,x			rol	 	esInt3,x
.3e9e	60		rts				rts
.3e9f					MInt32ShiftRight:
.3e9f	56 b0		lsr $b0,x			lsr 	esInt3,x
.3ea1	76 a8		ror $a8,x			ror 	esInt2,x
.3ea3	76 a0		ror $a0,x			ror 	esInt1,x
.3ea5	76 98		ror $98,x			ror 	esInt0,x
.3ea7	60		rts				rts
.3ea8					MInt32Zero:
.3ea8	b5 98		lda $98,x			lda 	esInt0,x
.3eaa	15 a0		ora $a0,x			ora 	esInt1,x
.3eac	15 a8		ora $a8,x			ora 	esInt2,x
.3eae	15 b0		ora $b0,x			ora 	esInt3,x
.3eb0	60		rts				rts
.3eb1					MInt32Random:
.3eb1	5a		phy				phy
.3eb2	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3eb4	ad 69 0d	lda $0d69			lda 	MSeed32+0 					; check the seed isn't zero
.3eb7	d0 03		bne $3ebc			bne 	_Random1
.3eb9	a8		tay				tay 								; if so do it 256 times
.3eba	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3ebc					_Random1:
.3ebc	0a		asl a				asl 	a
.3ebd	2e 6a 0d	rol $0d6a			rol 	MSeed32+1
.3ec0	2e 6b 0d	rol $0d6b			rol 	MSeed32+2
.3ec3	2e 6c 0d	rol $0d6c			rol 	MSeed32+3
.3ec6	90 02		bcc $3eca			bcc 	_Random2
.3ec8	49 c5		eor #$c5			eor 	#$C5
.3eca					_Random2:
.3eca	88		dey				dey
.3ecb	d0 ef		bne $3ebc			bne 	_Random1
.3ecd	8d 69 0d	sta $0d69			sta 	MSeed32+0 					; copy the seed in.
.3ed0	95 98		sta $98,x			sta 	esInt0,x
.3ed2	ad 6a 0d	lda $0d6a			lda 	MSeed32+1
.3ed5	95 a0		sta $a0,x			sta 	esInt1,x
.3ed7	ad 6b 0d	lda $0d6b			lda 	MSeed32+2
.3eda	95 a8		sta $a8,x			sta 	esInt2,x
.3edc	ad 6c 0d	lda $0d6c			lda 	MSeed32+3
.3edf	95 b0		sta $b0,x			sta 	esInt3,x
.3ee1	7a		ply				ply
.3ee2	a9 00		lda #$00			lda 	#0
.3ee4	95 90		sta $90,x			sta 	esType,x
.3ee6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3ee7					CheckToken:
.3ee7	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3ee9	d0 02		bne $3eed			bne 	_CTError
.3eeb	c8		iny				iny
.3eec	60		rts				rts
.3eed					_CTError:
.3eed	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3eef	20 27 15	jsr $1527		jsr	errorHandler
.3ef2					CheckRightParen:
.3ef2	b1 28		lda ($28),y			lda 	(codePtr),y
.3ef4	c8		iny				iny
.3ef5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3ef7	d0 01		bne $3efa			bne 	_CRPError
.3ef9	60		rts				rts
.3efa					_CRPError:
.3efa	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3efc	20 27 15	jsr $1527		jsr	errorHandler
.3eff					CheckComma:
.3eff	b1 28		lda ($28),y			lda 	(codePtr),y
.3f01	c8		iny				iny
.3f02	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3f04	d0 01		bne $3f07			bne 	_CCError
.3f06	60		rts				rts
.3f07					_CCError:
.3f07	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3f09	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3f0c					RSReset:
.3f0c	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3f0e	85 37		sta $37				sta 	rsPointer
.3f10	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3f12	85 38		sta $38				sta 	1+(rsPointer)
.3f14	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3f16	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3f19	60		rts				rts
.3f1a					RSClaim:
.3f1a	84 32		sty $32				sty 	tempShort 					; preserve Y
.3f1c	48		pha				pha 								; save marker on stack.
.3f1d	8a		txa				txa 								; get bytes required.
.3f1e	38		sec				sec
.3f1f	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3f21	65 37		adc $37				adc 	rsPointer
.3f23	85 37		sta $37				sta 	rsPointer
.3f25	a5 38		lda $38				lda 	rsPointer+1
.3f27	69 ff		adc #$ff			adc 	#$FF
.3f29	85 38		sta $38				sta 	rsPointer+1
.3f2b	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3f2d	90 08		bcc $3f37			bcc 	_RSCOverflow
.3f2f	68		pla				pla 								; get marker back
.3f30	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3f32	91 37		sta ($37),y			sta 	(rsPointer),y
.3f34	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3f36	60		rts				rts
.3f37					_RSCOverflow:
.3f37	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3f39	20 27 15	jsr $1527		jsr	errorHandler
.3f3c					RSFree:
.3f3c	18		clc				clc
.3f3d	65 37		adc $37				adc 	rsPointer
.3f3f	85 37		sta $37				sta 	rsPointer
.3f41	90 02		bcc $3f45			bcc 	_RSFExit
.3f43	e6 38		inc $38				inc 	rsPointer+1
.3f45					_RSFExit:
.3f45	60		rts				rts
.3f46					RSSavePosition:
.3f46	84 32		sty $32				sty 	tempShort 					; save Y position
.3f48	a8		tay				tay 								; this is where we write it.
.3f49	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3f4b	91 37		sta ($37),y			sta 	(rsPointer),y
.3f4d	c8		iny				iny
.3f4e	a5 29		lda $29				lda 	codePtr+1
.3f50	91 37		sta ($37),y			sta 	(rsPointer),y
.3f52	c8		iny				iny
.3f53	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3f55	91 37		sta ($37),y			sta 	(rsPointer),y
.3f57	a8		tay				tay 								; fix Y back again to original value
.3f58	60		rts				rts
.3f59					RSLoadPosition:
.3f59	a8		tay				tay
.3f5a	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3f5c	85 28		sta $28				sta 	codePtr
.3f5e	c8		iny				iny
.3f5f	b1 37		lda ($37),y			lda 	(rsPointer),y
.3f61	85 29		sta $29				sta 	codePtr+1
.3f63	c8		iny				iny
.3f64	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3f66	a8		tay				tay 								; to Y
.3f67	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3f68					WarmStart:
.3f68	a2 04		ldx #$04		ldx	#4
.3f6a	20 0e 29	jsr $290e		jsr	interactionHandler

;******  Return to file: main/main.asm

.3f6d					mainHandler:
.3f6d	7c 70 3f	jmp ($3f70,x)			jmp 	(mainVectors,x)
.3f70					mainVectors:
>3f70	8c 3f					.word _DummyControlHandler ; index 0
>3f72	ff 3e					.word CheckComma           ; index 2
>3f74	f2 3e					.word CheckRightParen      ; index 4
>3f76	f2 30					.word XCommandClear        ; index 6
>3f78	1d 38					.word LinkEvaluate         ; index 8
>3f7a	29 38					.word LinkEvaluateInteger  ; index 10
>3f7c	35 38					.word LinkEvaluateSmallInt ; index 12
>3f7e	2f 38					.word LinkEvaluateString   ; index 14
>3f80	23 38					.word LinkEvaluateTerm     ; index 16
>3f82	d2 3d					.word MLInt32ToString      ; index 18
>3f84	7f 32					.word Command_XNew         ; index 20
>3f86	8d 32					.word XCommand_Run         ; index 22
>3f88	99 32					.word Command_RunFrom      ; index 24
>3f8a	ed 3c					.word LinkInt32FromString  ; index 26
.3f8c					_DummyControlHandler:
.3f8c	60		rts			rts

;******  Return to file: basic.asm

.3f8d					section_end_main:
.3f8d					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3f8d					StringChrs:
.3f8d	aa		tax				tax 								; set up stack
.3f8e	a9 02		lda #$02			lda 	#2
.3f90	20 4c 40	jsr $404c			jsr 	AllocateSoftString
.3f93	98		tya				tya
.3f94	20 70 40	jsr $4070			jsr 	WriteSoftString
.3f97					StringUpdate:
.3f97	20 a5 3f	jsr $3fa5			jsr 	ReturnSoftString
.3f9a	8a		txa				txa
.3f9b	60		rts				rts
.3f9c					StringNull:
.3f9c	aa		tax				tax
.3f9d	a9 01		lda #$01			lda 	#1
.3f9f	20 4c 40	jsr $404c			jsr 	AllocateSoftString
.3fa2	4c 97 3f	jmp $3f97			jmp 	StringUpdate
.3fa5					ReturnSoftString:
.3fa5	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3fa7	95 98		sta $98,x			sta 	esInt0,x
.3fa9	a5 3a		lda $3a				lda 	softMemAlloc+1
.3fab	95 a0		sta $a0,x			sta 	esInt1,x
.3fad	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3faf	95 a8		sta $a8,x			sta 	esInt2,x
.3fb1	95 b0		sta $b0,x			sta 	esInt3,x
.3fb3	a9 40		lda #$40			lda 	#$40 						; type string.
.3fb5	95 90		sta $90,x			sta 	esType,x
.3fb7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3fb8					STRCompare:
.3fb8	48		pha				pha 								; save A
.3fb9	aa		tax				tax 								; put stack pos in X
.3fba	5a		phy				phy
.3fbb	20 ee 3f	jsr $3fee			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3fbe	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3fc0	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fc2	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3fc4	90 02		bcc $3fc8			bcc 	_SCNotSmaller
.3fc6	b1 2c		lda ($2c),y			lda 	(temp1),y
.3fc8					_SCNotSmaller:
.3fc8	aa		tax				tax 								; put that in X. We compare this many chars first.
.3fc9					_SCCompareLoop:
.3fc9	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3fcb	f0 0c		beq $3fd9			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3fcd	ca		dex				dex 								; decrement chars to compare.
.3fce	c8		iny				iny 								; move to next character
.3fcf	38		sec				sec 								; calculate s1[y]-s2[y]
.3fd0	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fd2	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3fd4	d0 0a		bne $3fe0			bne 	_SCReturnResult 			; if different return sign of A
.3fd6	4c c9 3f	jmp $3fc9			jmp 	_SCCompareLoop
.3fd9					_SCSameToEndShortest
.3fd9	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3fdb	38		sec				sec
.3fdc	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fde	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3fe0					_SCReturnResult:
.3fe0	08		php				php 								; set return to zero preserving PSW.
.3fe1	a2 00		ldx #$00			ldx 	#0
.3fe3	28		plp				plp
.3fe4	f0 05		beq $3feb			beq 	_SCExit 					; two values equal, then exit
.3fe6	ca		dex				dex 								; X = $FF
.3fe7	90 02		bcc $3feb			bcc 	_SCExit 					; if 1st < 2nd then -1
.3fe9	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3feb					_SCExit:
.3feb	7a		ply				ply
.3fec	68		pla				pla
.3fed	60		rts				rts
.3fee					CopyStringPair:
.3fee	b5 99		lda $99,x			lda 	esInt0+1,x
.3ff0	85 2c		sta $2c				sta 	temp1
.3ff2	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3ff4	85 2d		sta $2d				sta 	temp1+1
.3ff6					CopyStringTop:
.3ff6	b5 98		lda $98,x			lda 	esInt0,x
.3ff8	85 2a		sta $2a				sta 	temp0
.3ffa	b5 a0		lda $a0,x			lda 	esInt1,x
.3ffc	85 2b		sta $2b				sta 	temp0+1
.3ffe	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3fff					StringConcat:
.3fff	aa		tax				tax									; stack pos in X
.4000	5a		phy				phy
.4001	20 ee 3f	jsr $3fee			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.4004	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.4005	a0 00		ldy #$00			ldy 	#0
.4007	b1 2a		lda ($2a),y			lda 	(temp0),y
.4009	71 2c		adc ($2c),y			adc 	(temp1),y
.400b	b0 1b		bcs $4028			bcs 	_SCError 					; just too many characters here.
.400d	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.400f	b0 17		bcs $4028			bcs 	_SCError
.4011	20 4c 40	jsr $404c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.4014	20 43 40	jsr $4043			jsr 	CopySoftToStack 			; copy that to the stack.
.4017	20 2d 40	jsr $402d			jsr 	SCCopyTemp0 				; copy temp0
.401a	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.401c	85 2a		sta $2a				sta 	temp0
.401e	a5 2d		lda $2d				lda 	temp1+1
.4020	85 2b		sta $2b				sta 	temp0+1
.4022	20 2d 40	jsr $402d			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.4025	7a		ply				ply
.4026	8a		txa				txa 								; and A
.4027	60		rts				rts
.4028					_SCError:
.4028	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.402a	20 27 15	jsr $1527		jsr	errorHandler
.402d					SCCopyTemp0:
.402d	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.402f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4031	85 2e		sta $2e				sta 	temp2
.4033					_SCCopyLoop:
.4033	a5 2e		lda $2e				lda 	temp2 						; done the lot
.4035	f0 0b		beq $4042			beq 	_SCCopyExit
.4037	c6 2e		dec $2e				dec 	temp2
.4039	c8		iny				iny 								; get next char
.403a	b1 2a		lda ($2a),y			lda 	(temp0),y
.403c	20 70 40	jsr $4070			jsr 	WriteSoftString 			; write to soft string.
.403f	4c 33 40	jmp $4033			jmp 	_SCCopyLoop
.4042					_SCCopyExit:
.4042	60		rts				rts
.4043					CopySoftToStack:
.4043	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.4045	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.4047	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.4049	95 a0		sta $a0,x			sta 	esInt1,x
.404b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.404c					AllocateSoftString:
.404c	85 32		sta $32				sta 	tempShort 					; save count
.404e	5a		phy				phy
.404f	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.4051	d0 09		bne $405c			bne 	_ASSDone
.4053	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.4055	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.4057	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.4059	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.405a	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.405c					_ASSDone:
.405c	38		sec				sec 								; allocate downwards enough memory
.405d	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.405f	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.4061	85 39		sta $39				sta 	softMemAlloc
.4063	a5 3a		lda $3a				lda 	softMemAlloc+1
.4065	e9 00		sbc #$00			sbc 	#0
.4067	85 3a		sta $3a				sta 	softMemAlloc+1
.4069	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.406b	a8		tay				tay
.406c	91 39		sta ($39),y			sta 	(softMemAlloc),y
.406e	7a		ply				ply
.406f	60		rts				rts
.4070					WriteSoftString:
.4070	84 32		sty $32				sty 	tempShort 					; save Y
.4072	48		pha				pha 								; save character on stack
.4073	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.4075	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.4077	18		clc				clc
.4078	69 01		adc #$01			adc 	#1
.407a	91 39		sta ($39),y			sta 	(softMemAlloc),y
.407c	a8		tay				tay 								; offset in Y
.407d	68		pla				pla 								; get char and write.
.407e	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4080	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.4082	60		rts				rts
.4083					StrClone:
.4083	aa		tax				tax 								; set up stack.
.4084	5a		phy				phy
.4085	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.4087	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.4089	18		clc				clc
.408a	69 01		adc #$01			adc 	#1
.408c	20 4c 40	jsr $404c			jsr 	AllocateSoftString 			; allocate soft memory
.408f	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.4091	95 98		sta $98,x			sta 	esInt0,x
.4093	a5 3a		lda $3a				lda 	softMemAlloc+1
.4095	95 a0		sta $a0,x			sta 	esInt1,x
.4097	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.4099	95 a8		sta $a8,x			sta 	esInt2,x
.409b	95 b0		sta $b0,x			sta 	esInt3,x
.409d	a9 40		lda #$40			lda 	#$40 						; set type to string.
.409f	95 90		sta $90,x			sta 	esType,x
.40a1	20 2d 40	jsr $402d			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.40a4	7a		ply				ply
.40a5	8a		txa				txa
.40a6	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.40a7					CaseString:
.40a7	48		pha				pha 								; save A and copy to X
.40a8	aa		tax				tax
.40a9	5a		phy				phy
.40aa	20 f6 3f	jsr $3ff6			jsr 	CopyStringTop 				; target string -> temp0
.40ad	a0 00		ldy #$00			ldy 	#0
.40af	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.40b1	18		clc				clc
.40b2	69 01		adc #$01			adc 	#1 							; one more for length byte
.40b4	20 4c 40	jsr $404c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.40b7	20 43 40	jsr $4043			jsr 	CopySoftToStack 			; copy that to the stack.
.40ba	a0 00		ldy #$00			ldy 	#0
.40bc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.40be	aa		tax				tax
.40bf					_CSCopy:
.40bf	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.40c1	f0 24		beq $40e7			beq 	_CSExit
.40c3	ca		dex				dex
.40c4	c8		iny				iny
.40c5	68		pla				pla 								; check direction
.40c6	48		pha				pha
.40c7	f0 0c		beq $40d5			beq 	_CSUpper
.40c9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.40cb	c9 41		cmp #$41			cmp 	#"A"
.40cd	90 12		bcc $40e1			bcc 	_CSWrite
.40cf	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40d1	b0 0e		bcs $40e1			bcs 	_CSWrite
.40d3	90 0a		bcc $40df			bcc 	_CSFlipWrite
.40d5					_CSUpper:
.40d5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.40d7	c9 61		cmp #$61			cmp 	#"a"
.40d9	90 06		bcc $40e1			bcc 	_CSWrite
.40db	c9 7b		cmp #$7b			cmp 	#"z"+1
.40dd	b0 02		bcs $40e1			bcs 	_CSWrite
.40df					_CSFlipWrite:
.40df	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.40e1					_CSWrite:
.40e1	20 70 40	jsr $4070			jsr 	WriteSoftString 			; add to soft string.
.40e4	4c bf 40	jmp $40bf			jmp 	_CSCopy
.40e7					_CSExit:
.40e7	7a		ply				ply
.40e8	68		pla				pla
.40e9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.40ea					StringSubstring:
.40ea	48		pha				pha
.40eb	aa		tax				tax 								; access stack.
.40ec	5a		phy				phy
.40ed	20 f6 3f	jsr $3ff6			jsr 	CopyStringTop 				; point temp0 to the string.
.40f0	a0 00		ldy #$00			ldy 	#0 							; get length.
.40f2	b1 2a		lda ($2a),y			lda 	(temp0),Y
.40f4	85 2c		sta $2c				sta 	temp1
.40f6	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.40f8	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.40fa	f0 02		beq $40fe			beq 	_SSBOkay
.40fc	b0 2a		bcs $4128			bcs 	_SSBReturnNull
.40fe					_SSBOkay:
.40fe	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.4100	18		clc				clc
.4101	69 01		adc #$01			adc 	#1
.4103	38		sec				sec
.4104	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.4106	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.4108	90 02		bcc $410c			bcc		_SSBTrunc
.410a	b5 9a		lda $9a,x			lda 	esInt0+2,x
.410c					_SSBTrunc:
.410c	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.410e	18		clc				clc
.410f	69 01		adc #$01			adc 	#1 							; add 1
.4111	20 4c 40	jsr $404c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.4114	20 43 40	jsr $4043			jsr 	CopySoftToStack 			; copy that to the stack.
.4117	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.4119					_SSBCopyLoop:
.4119	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.411b	f0 0e		beq $412b			beq 	_SSBExit
.411d	c6 2d		dec $2d				dec 	temp1+1
.411f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.4121	20 70 40	jsr $4070			jsr 	WriteSoftString
.4124	c8		iny				iny
.4125	4c 19 41	jmp $4119			jmp 	_SSBCopyLoop
.4128					_SSBReturnNull:
.4128	20 2e 41	jsr $412e			jsr 	ReturnNull
.412b					_SSBExit:
.412b	7a		ply				ply
.412c	68		pla				pla
.412d	60		rts				rts
.412e					ReturnNull:
.412e	a9 00		lda #$00			lda 	#0 							; clear null string
.4130	8d ce 0a	sta $0ace			sta 	NullString
.4133	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.4135	95 98		sta $98,x			sta 	esInt0,x
.4137	a9 0a		lda #$0a			lda 	#NullString >> 8
.4139	95 a0		sta $a0,x			sta 	esInt1,x
.413b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d6d					srcStrLen:
>0d6d							.fill 	1
.413c					StringWrite:
.413c	aa		tax				tax
.413d	48		pha				pha
.413e	5a		phy				phy
.413f	20 65 41	jsr $4165			jsr 	CheckOverwriteCurrent
.4142	b0 0d		bcs $4151			bcs		_SWCopyCurrent
.4144	20 a3 41	jsr $41a3			jsr 	RequiresConcretion
.4147	90 0e		bcc $4157			bcc 	_SWWriteReference
.4149	20 02 42	jsr $4202			jsr 	CheckSpecialConcretion
.414c	b0 09		bcs $4157			bcs 	_SWWriteReference
.414e	20 b7 41	jsr $41b7			jsr 	AllocateHardMemory
.4151					_SWCopyCurrent:
.4151	20 e8 41	jsr $41e8			jsr 	CopyStringToHardMemory
.4154	4c 62 41	jmp $4162			jmp 	_SWExit
.4157					_SWWriteReference
.4157	a0 00		ldy #$00			ldy 	#0
.4159	a5 2a		lda $2a				lda 	temp0
.415b	91 2c		sta ($2c),y			sta 	(temp1),y
.415d	c8		iny				iny
.415e	a5 2b		lda $2b				lda 	temp0+1
.4160	91 2c		sta ($2c),y			sta 	(temp1),y
.4162					_SWExit:
.4162	7a		ply				ply
.4163	68		pla				pla
.4164	60		rts				rts
.4165					CheckOverwriteCurrent:
.4165	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.4167	b5 a1		lda $a1,x			lda 	esInt1+1,x
.4169	85 2b		sta $2b				sta 	temp0+1
.416b	b5 99		lda $99,x			lda 	esInt0+1,x
.416d	85 2a		sta $2a				sta 	temp0
.416f	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.4171	8d 6d 0d	sta $0d6d			sta 	srcStrLen
.4174	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.4176	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.4178	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.417a	85 2d		sta $2d				sta 	temp1+1
.417c	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.417e	b1 2c		lda ($2c),y			lda 	(temp1),y
.4180	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.4182	90 1b		bcc $419f			bcc 	_COCFail 				; in hard memory.
.4184	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.4186	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.4188	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.418a	85 2e		sta $2e				sta 	temp2
.418c	c8		iny				iny
.418d	b1 2c		lda ($2c),y			lda 	(temp1),y
.418f	e9 00		sbc #$00			sbc 	#0
.4191	85 2f		sta $2f				sta 	temp2+1
.4193	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.4195	b1 2e		lda ($2e),y			lda 	(temp2),y
.4197	38		sec				sec  							; maximum character capacity.
.4198	e9 02		sbc #$02			sbc 	#2
.419a	cd 6d 0d	cmp $0d6d			cmp 	srcStrLen 				; if >= the required length
.419d	b0 02		bcs $41a1			bcs 	_COCCanReuse
.419f					_COCFail:
.419f	18		clc				clc
.41a0	60		rts				rts
.41a1					_COCCanReuse:
.41a1	38		sec				sec
.41a2	60		rts				rts
.41a3					RequiresConcretion:
.41a3	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.41a5	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.41a7	b0 0a		bcs $41b3			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.41a9	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.41ab	f0 08		beq $41b5			beq 	_RCFail 				; if not, this cannot be soft memory.
.41ad	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.41af	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.41b1	90 02		bcc $41b5			bcc 	_RCFail 				; so concreting
.41b3					_RCSucceed:
.41b3	38		sec				sec
.41b4	60		rts				rts
.41b5					_RCFail:
.41b5	18		clc				clc
.41b6	60		rts				rts
.41b7					AllocateHardMemory:
.41b7	5a		phy				phy
.41b8	ad 6d 0d	lda $0d6d			lda 	srcStrLen 				; characters in string
.41bb	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.41bd	b0 04		bcs $41c3			bcs 	_AHMSetMax 				; max out that amount.
.41bf	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.41c1	90 02		bcc $41c5			bcc 	_AHMIsOkay
.41c3					_AHMSetMax:
.41c3	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.41c5					_AHMIsOkay:
.41c5	48		pha				pha	 							; save size to be allocated
.41c6	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.41c8	38		sec				sec  							; and copy result to TOS as target address.
.41c9	65 33		adc $33				adc 	highMemory
.41cb	85 33		sta $33				sta 	highMemory
.41cd	a5 34		lda $34				lda 	highMemory+1
.41cf	69 ff		adc #$ff			adc 	#$FF
.41d1	85 34		sta $34				sta 	highMemory+1
.41d3	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.41d5	68		pla				pla 							; get the total size of the storage block
.41d6	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.41d8	18		clc				clc
.41d9	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.41db	69 01		adc #$01			adc 	#1
.41dd	91 2c		sta ($2c),y			sta 	(temp1),y
.41df	a5 34		lda $34				lda 	highMemory+1
.41e1	69 00		adc #$00			adc 	#0
.41e3	c8		iny				iny
.41e4	91 2c		sta ($2c),y			sta 	(temp1),y
.41e6	7a		ply				ply
.41e7	60		rts				rts
.41e8					CopyStringToHardMemory:
.41e8	5a		phy				phy
.41e9	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.41eb	b1 2c		lda ($2c),y			lda 	(temp1),y
.41ed	85 2e		sta $2e				sta 	temp2
.41ef	c8		iny				iny
.41f0	b1 2c		lda ($2c),y			lda 	(temp1),y
.41f2	85 2f		sta $2f				sta 	temp2+1
.41f4	ac 6d 0d	ldy $0d6d			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.41f7					_CSTHMLoop:
.41f7	b1 2a		lda ($2a),y			lda 	(temp0),y
.41f9	91 2e		sta ($2e),y			sta 	(temp2),y
.41fb	88		dey				dey
.41fc	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.41fe	d0 f7		bne $41f7			bne 	_CSTHMLoop
.4200	7a		ply				ply
.4201	60		rts				rts
.4202					CheckSpecialConcretion:
.4202	ad 6d 0d	lda $0d6d			lda 	srcStrLen 				; check string is null e.g. length = 0
.4205	f0 02		beq $4209			beq 	_CSCNullString
.4207	18		clc				clc
.4208	60		rts				rts
.4209					_CSCNullString:
.4209	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.420b	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.420e	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.4210	85 2a		sta $2a				sta 	temp0
.4212	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.4214	85 2b		sta $2b				sta 	1+(temp0)
.4216	38		sec				sec
.4217	60		rts				rts

;******  Return to file: string/string.asm

.4218					stringHandler:
.4218	7c 1b 42	jmp ($421b,x)			jmp 	(stringVectors,x)
.421b					stringVectors:
>421b	2d 42					.word _DummyControlHandler ; index 0
>421d	8d 3f					.word StringChrs           ; index 2
>421f	83 40					.word StrClone             ; index 4
>4221	ff 3f					.word StringConcat         ; index 6
>4223	9c 3f					.word StringNull           ; index 8
>4225	b8 3f					.word STRCompare           ; index 10
>4227	a7 40					.word CaseString           ; index 12
>4229	ea 40					.word StringSubstring      ; index 14
>422b	3c 41					.word StringWrite          ; index 16
.422d					_DummyControlHandler:
.422d	60		rts			rts

;******  Return to file: basic.asm

.422e					section_end_string:
.422e					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d6e					deTokeniseVector:
>0d6e							.fill 	2
.0d70					lastCharacterClass:
>0d70							.fill 	1
.0d71					indent:
>0d71							.fill 	1
.422e					ListLine:
.422e	48		pha				pha								; enter here to list to console. sets the output vector
.422f	a9 5d		lda #$5d			lda 	#(deTokenPrint) & $FF
.4231	8d 6e 0d	sta $0d6e			sta 	deTokeniseVector
.4234	a9 43		lda #$43			lda 	#(deTokenPrint) >> 8
.4236	8d 6f 0d	sta $0d6f			sta 	1+(deTokeniseVector)
.4239	68		pla				pla
.423a					Detokenise:
.423a	18		clc				clc 							; space required for line number.
.423b	69 06		adc #$06			adc 	#6
.423d	8d 71 0d	sta $0d71			sta 	indent
.4240	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.4242	8d 70 0d	sta $0d70			sta 	lastCharacterClass
.4245	a2 02		ldx #$02			ldx 	#2
.4247	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.4249	95 a8		sta $a8,x			sta 	esInt2,x
.424b	95 b0		sta $b0,x			sta 	esInt3,x
.424d	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.424f	b1 28		lda ($28),y			lda 	(codePtr),y
.4251	95 98		sta $98,x			sta 	esInt0,x
.4253	c8		iny				iny
.4254	b1 28		lda ($28),y			lda 	(codePtr),y
.4256	95 a0		sta $a0,x			sta 	esInt1,x
.4258	a9 84		lda #$84			lda 	#LTYLineNumber
.425a	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.425d	a9 0a		lda #$0a			lda 	#10 					; base 10
.425f	20 03 43	jsr $4303			jsr 	DTPrintInteger 			; print as integer.
.4262	a0 00		ldy #$00			ldy 	#0 						; get length
.4264	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.4266	aa		tax				tax
.4267					_DTPadOut:
.4267	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4269	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.426c	e8		inx				inx
.426d	ec 71 0d	cpx $0d71			cpx 	indent
.4270	d0 f5		bne $4267			bne 	_DTPadOut
.4272	a0 03		ldy #$03			ldy 	#3 						; start position.
.4274					_DTListLoop:
.4274	b1 28		lda ($28),y			lda 	(codePtr),y
.4276	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.4278	f0 5c		beq $42d6			beq 	_DTIsString
.427a	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.427c	f0 54		beq $42d2			beq 	_DTIsFloat
.427e	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.4280	f0 16		beq $4298			beq 	_DTHexConstant
.4282	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.4284	d0 06		bne $428c			bne 	_DTNotEnd
.4286	a9 ff		lda #$ff			lda 	#255 					; print CR
.4288	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.428b	60		rts				rts
.428c					_DTNotEnd:
.428c	c9 00		cmp #$00			cmp 	#0
.428e	30 36		bmi $42c6			bmi 	_DTIsToken
.4290	c9 40		cmp #$40			cmp 	#$40
.4292	90 38		bcc $42cc			bcc 	_DTIsIdentifier
.4294	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.4296	d0 0d		bne $42a5			bne 	_DTConstant
.4298					_DTHexConstant:
.4298	a9 26		lda #$26			lda 	#"&"
.429a	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.429d	c8		iny				iny
.429e	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.42a0	20 79 43	jsr $4379			jsr 	DTSwitchMode
.42a3	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.42a5					_DTConstant:
.42a5	48		pha				pha
.42a6	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.42a8	20 79 43	jsr $4379			jsr 	DTSwitchMode
.42ab	a9 86		lda #$86			lda 	#LTYConstant
.42ad	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.42b0	a2 02		ldx #$02			ldx 	#2 						; get its value
.42b2	8a		txa				txa
.42b3	a2 10		ldx #$10		ldx	#16
.42b5	20 6d 3f	jsr $3f6d		jsr	mainHandler
.42b8	aa		tax				tax
.42b9	68		pla				pla 							; get base back
.42ba	85 32		sta $32				sta 	tempShort
.42bc	5a		phy				phy
.42bd	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.42bf	20 03 43	jsr $4303			jsr 	DTPrintInteger
.42c2	7a		ply				ply
.42c3	4c 74 42	jmp $4274			jmp 	_DTListLoop
.42c6					_DTIsToken:
.42c6	20 d2 43	jsr $43d2			jsr 	DTDecodeToken
.42c9	4c 74 42	jmp $4274			jmp 	_DTListLoop
.42cc					_DTIsIdentifier:
.42cc	20 8b 43	jsr $438b			jsr 	DTIdentifier
.42cf	4c 74 42	jmp $4274			jmp 	_DTListLoop
.42d2					_DTIsFloat:
>42d2	db						.byte 	$DB
.42d3	4c d2 42	jmp $42d2			jmp 	_DTIsFloat
.42d6					_DTIsString:
.42d6	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.42d8	20 79 43	jsr $4379			jsr 	DTSwitchMode
.42db	a9 81		lda #$81			lda 	#LTYString
.42dd	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.42e0	a9 22		lda #$22			lda 	#'"'						; open quote
.42e2	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.42e5	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.42e7	8a		txa				txa
.42e8	a2 10		ldx #$10		ldx	#16
.42ea	20 6d 3f	jsr $3f6d		jsr	mainHandler
.42ed	aa		tax				tax
.42ee	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.42f0	85 2a		sta $2a				sta 	temp0
.42f2	b5 a0		lda $a0,x			lda 	esInt1,x
.42f4	85 2b		sta $2b				sta 	temp0+1
.42f6	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.42f8	20 14 43	jsr $4314			jsr 	DTPrintLengthPrefix
.42fb	a9 22		lda #$22			lda 	#'"'
.42fd	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.4300	4c 74 42	jmp $4274			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d72					tPrintCount:
>0d72							.fill 	1
.4303					DTPrintInteger:
.4303	48		pha				pha									; save base
.4304	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4306	85 2a		sta $2a				sta 	temp0
.4308	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.430a	85 2b		sta $2b				sta 	1+(temp0)
.430c	7a		ply				ply
.430d	8a		txa				txa
.430e	a2 12		ldx #$12		ldx	#18
.4310	20 6d 3f	jsr $3f6d		jsr	mainHandler
.4313	aa		tax				tax 								; then drop through here.
.4314					DTPrintLengthPrefix:
.4314	aa		tax				tax 								; A = 0 = don't case convert.
.4315	5a		phy				phy
.4316	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.4318	b1 2a		lda ($2a),y			lda 	(temp0),y
.431a	8d 72 0d	sta $0d72			sta 	tPrintCount
.431d	f0 1b		beq $433a			beq 	_DTPLPExit 					; empty string
.431f					_DTPLPLoop:
.431f	c8		iny				iny 								; get next.
.4320	b1 2a		lda ($2a),y			lda 	(temp0),y
.4322	29 7f		and #$7f			and 	#$7F
.4324	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.4326	f0 0a		beq $4332			beq 	_DTPLPNoCase
.4328	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.432a	90 06		bcc $4332			bcc 	_DTPLPNoCase
.432c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.432e	b0 02		bcs $4332			bcs 	_DTPLPNoCase
.4330	49 20		eor #$20			eor 	#"A"^"a"
.4332					_DTPLPNoCase
.4332	20 3c 43	jsr $433c			jsr 	ListOutputCharacter 		; call handler
.4335	ce 72 0d	dec $0d72			dec 	tPrintCount 				; do all the characters
.4338	d0 e5		bne $431f			bne 	_DTPLPLoop
.433a					_DTPLPExit:
.433a	7a		ply				ply
.433b	60		rts				rts
.433c					ListOutputCharacter:
.433c	85 32		sta $32				sta 	tempShort
.433e	48		pha				pha
.433f	da		phx				phx
.4340	5a		phy				phy
.4341	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.4343	c9 20		cmp #$20			cmp 	#32
.4345	b0 0c		bcs $4353			bcs		_LOCHiBit
.4347	09 40		ora #$40			ora 	#64 						; conversion
.4349	c9 40		cmp #$40			cmp 	#64							; make l/c
.434b	f0 06		beq $4353			beq 	_LOCHiBit
.434d	c9 5b		cmp #$5b			cmp 	#65+26
.434f	b0 02		bcs $4353			bcs 	_LOCHiBit
.4351	69 20		adc #$20			adc 	#32
.4353					_LOCHiBit:
.4353	20 5a 43	jsr $435a			jsr 	_LOCCallVector				; call o/p handler routine
.4356	7a		ply				ply
.4357	fa		plx				plx
.4358	68		pla				pla
.4359					_LOCExit:
.4359	60		rts				rts
.435a					_LOCCallVector:
.435a	6c 6e 0d	jmp ($0d6e)			jmp 	(deTokeniseVector)
.435d					deTokenPrint:
.435d	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.435f	30 06		bmi $4367			bmi 	_dtpInk
.4361	a2 14		ldx #$14		ldx	#20
.4363	20 05 15	jsr $1505		jsr	deviceHandler
.4366	60		rts				rts
.4367	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4369	f0 08		beq $4373			beq 	_dtpCR						; except $FF => CRLF
.436b	29 07		and #$07			and 	#7
.436d	a2 06		ldx #$06		ldx	#6
.436f	20 05 15	jsr $1505		jsr	deviceHandler
.4372	60		rts				rts
.4373					_dtpCR:
.4373	a2 04		ldx #$04		ldx	#4
.4375	20 05 15	jsr $1505		jsr	deviceHandler
.4378	60		rts				rts
.4379					DTSwitchMode:
.4379	cd 70 0d	cmp $0d70			cmp 	LastCharacterClass 			; if changed, update character class
.437c	f0 04		beq $4382			beq 	_DTSMNoChange
.437e	8d 70 0d	sta $0d70			sta 	LastCharacterClass
.4381					_DTSMExit:
.4381	60		rts				rts
.4382					_DTSMNoChange:
.4382	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.4384	f0 fb		beq $4381			beq 	_DTSMExit 					; need a space.
.4386	a9 20		lda #$20			lda 	#" "
.4388	4c 3c 43	jmp $433c			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.438b					DTIdentifier:
.438b	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.438d	20 79 43	jsr $4379			jsr 	DTSwitchMode
.4390	a9 87		lda #$87			lda 	#LTYIdentifier
.4392	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.4395					_DTILoop:
.4395	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.4397	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4399	d0 02		bne $439d			bne 	_DTINotUS
.439b	a9 5f		lda #$5f			lda 	#"_"
.439d					_DTINotUS:
.439d	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.43a0	c8		iny				iny
.43a1	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.43a3	c9 3a		cmp #$3a			cmp 	#$3A
.43a5	90 ee		bcc $4395			bcc 	_DTILoop
.43a7	c8		iny				iny
.43a8	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.43aa	f0 25		beq $43d1			beq 	_DTIExit 					; no postfix.
.43ac	48		pha				pha
.43ad	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.43af	8d 70 0d	sta $0d70			sta 	LastCharacterClass
.43b2	a9 82		lda #$82			lda 	#LTYPunctuation
.43b4	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.43b7	68		pla				pla
.43b8	c9 3b		cmp #$3b			cmp 	#$3B
.43ba	f0 10		beq $43cc			beq 	_DTIArray
.43bc	4a		lsr a				lsr 	a 							; array flag in C
.43bd	08		php				php
.43be	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.43c0	f0 02		beq $43c4			beq 	_DTIDollar
.43c2	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.43c4					_DTIDollar:
.43c4	49 24		eor #$24			eor 	#"$"
.43c6	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.43c9	28		plp				plp
.43ca	90 05		bcc $43d1			bcc 	_DTIExit
.43cc					_DTIArray:
.43cc	a9 28		lda #$28			lda 	#"("
.43ce	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.43d1					_DTIExit:
.43d1	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.43d2					DTDecodeToken:
.43d2	a2 00		ldx #$00			ldx 	#0 							; table number to use
.43d4	b1 28		lda ($28),y			lda 	(codePtr),y
.43d6	c9 84		cmp #$84			cmp 	#$84
.43d8	b0 05		bcs $43df			bcs 	_DTNotShift
.43da	29 03		and #$03			and 	#3 							; get the shift 1..3
.43dc	0a		asl a				asl 	a 							; put 2 x in X
.43dd	aa		tax				tax
.43de	c8		iny				iny
.43df					_DTNotShift:
.43df	bd d5 46	lda $46d5,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.43e2	85 2a		sta $2a				sta 	temp0 						; point into temp0
.43e4	bd d6 46	lda $46d6,x			lda 	TokenTableAddress+1,x
.43e7	85 2b		sta $2b				sta 	temp0+1
.43e9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.43eb	c8		iny				iny 								; consume it.
.43ec	aa		tax				tax
.43ed	5a		phy				phy
.43ee					_DTFindText:
.43ee	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.43f0	f0 11		beq $4403			beq 	_DTFoundText
.43f2	ca		dex				dex
.43f3	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.43f5	38		sec				sec
.43f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.43f8	65 2a		adc $2a				adc 	temp0
.43fa	85 2a		sta $2a				sta 	temp0
.43fc	90 f0		bcc $43ee			bcc 	_DTFindText
.43fe	e6 2b		inc $2b				inc 	temp0+1
.4400	4c ee 43	jmp $43ee			jmp 	_DTFindText
.4403					_DTFoundText:
.4403	a0 01		ldy #$01			ldy 	#1 							; get first character
.4405	b1 2a		lda ($2a),y			lda 	(temp0),y
.4407	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4409	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.440b	90 11		bcc $441e			bcc 	_DTIsPunctuation
.440d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.440f	b0 0d		bcs $441e			bcs 	_DTIsPunctuation
.4411	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4413	20 79 43	jsr $4379			jsr 	DTSwitchMode
.4416	a9 83		lda #$83			lda 	#LTYKeyword
.4418	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.441b	4c 28 44	jmp $4428			jmp 	_DTPrint
.441e					_DTIsPunctuation:
.441e	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4420	20 79 43	jsr $4379			jsr 	DTSwitchMode
.4423	a9 82		lda #$82			lda 	#LTYPunctuation
.4425	20 3c 43	jsr $433c			jsr 	ListOutputCharacter
.4428					_DTPrint:
.4428	a9 01		lda #$01			lda 	#1 							; fix case.
.442a	20 14 43	jsr $4314			jsr 	DTPrintLengthPrefix 		; print it out.
.442d	a0 00		ldy #$00			ldy 	#0
.442f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4431	a8		tay				tay
.4432	b1 2a		lda ($2a),y			lda 	(temp0),y
.4434	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4436	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4438	90 04		bcc $443e			bcc 	_DTIsNowPunctuation
.443a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.443c	90 05		bcc $4443			bcc 	_DTPExit
.443e					_DTIsNowPunctuation:
.443e	a9 01		lda #$01			lda 	#1
.4440	8d 70 0d	sta $0d70			sta		LastCharacterClass
.4443					_DTPExit:
.4443	7a		ply				ply
.4444	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d73					currentSet:
>0d73							.fill 	1
.4445					TokenSearch:
.4445	da		phx				phx
.4446	5a		phy				phy
.4447	a9 00		lda #$00			lda 	#0
.4449	8d 73 0d	sta $0d73			sta 	currentSet
.444c					_TSLoop:
.444c	ad 73 0d	lda $0d73			lda 	currentSet 					; 2 x currentset in X
.444f	0a		asl a				asl 	a
.4450	aa		tax				tax
.4451	bd d5 46	lda $46d5,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.4454	85 2a		sta $2a				sta 	temp0
.4456	bd d6 46	lda $46d6,x			lda 	TokenTableAddress+1,x
.4459	85 2b		sta $2b				sta 	temp0+1
.445b	20 80 44	jsr $4480			jsr 	TokenSearchOne 				; search one table
.445e	b0 0d		bcs $446d			bcs 	_TSFound 					; found a token.
.4460	ee 73 0d	inc $0d73			inc 	currentSet 					; next set
.4463	ad 73 0d	lda $0d73			lda 	currentSet
.4466	c9 04		cmp #$04			cmp 	#4
.4468	d0 e2		bne $444c			bne 	_TSLoop 					; back if not done all four.
.446a	18		clc				clc 								; clear carry and exit
.446b	90 10		bcc $447d			bcc 	_TSExit
.446d					_TSFound:
.446d	48		pha				pha 								; save token
.446e	ad 73 0d	lda $0d73			lda 	currentSet					; if set zero no shift
.4471	f0 05		beq $4478			beq 	_TSNoShift
.4473	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.4475	20 31 45	jsr $4531			jsr 	TokenWrite
.4478					_TSNoShift:
.4478	68		pla				pla 								; get token back
.4479	20 31 45	jsr $4531			jsr 	TokenWrite 					; write it
.447c	38		sec				sec 								; carry set indicating success
.447d					_TSExit:
.447d	7a		ply				ply
.447e	fa		plx				plx
.447f	60		rts				rts
.4480					TokenSearchOne:
.4480	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.4482					_TSOLoop:
.4482	a0 00		ldy #$00			ldy 	#0
.4484	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4486	f0 26		beq $44ae			beq 	_TSOFail 					; if zero, end of table
.4488	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.448b	f0 11		beq $449e			beq 	_TSOCheckText
.448d					_TSONext:
.448d	e8		inx				inx 								; bump token
.448e	a0 00		ldy #$00			ldy 	#0							; get length
.4490	b1 2a		lda ($2a),y			lda 	(temp0),y
.4492	38		sec				sec
.4493	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4495	85 2a		sta $2a				sta 	temp0
.4497	90 e9		bcc $4482			bcc 	_TSOLoop
.4499	e6 2b		inc $2b				inc 	temp0+1
.449b	4c 82 44	jmp $4482			jmp 	_TSOLoop
.449e					_TSOCheckText:
.449e	a8		tay				tay 								; compare length downto 1.
.449f					_TSOCheckLoop:
.449f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.44a1	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.44a4	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.44a6	d0 e5		bne $448d			bne 	_TSONext 					; different goto next.
.44a8	88		dey				dey 								; do all
.44a9	d0 f4		bne $449f			bne 	_TSOCheckLoop
.44ab	8a		txa				txa 								; return token in A and carry set
.44ac	38		sec				sec
.44ad	60		rts				rts
.44ae					_TSOFail:
.44ae	18		clc				clc
.44af	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.44b0					TokTest:
.44b0	a2 ff		ldx #$ff				ldx 	#$FF
.44b2	9a		txs					txs
.44b3	a9 d0		lda #$d0			lda 	#(TokenText1) & $FF
.44b5	85 28		sta $28				sta 	codePtr
.44b7	a9 44		lda #$44			lda 	#(TokenText1) >> 8
.44b9	85 29		sta $29				sta 	1+(codePtr)
.44bb	20 d0 44	jsr $44d0				jsr 	Tokenise
.44be	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.44c0	bd d0 44	lda $44d0,x	_TokCheck:	lda 	TokenBytes1,x
.44c3	dd 77 0d	cmp $0d77,x				cmp 	tokenBuffer,x
.44c6	d0 fe		bne $44c6	_TokFail:	bne 	_TokFail	 		; error.
.44c8	e8		inx					inx
.44c9	c9 80		cmp #$80				cmp 	#$80
.44cb	d0 f3		bne $44c0				bne 	_TokCheck
.44cd	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.44d0					TokenText1:
.44d0					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d74					tokenHeader:
>0d74							.fill 	3
.0d77					tokenBuffer:
>0d77							.fill 	256
.0e77					tokenBufferIndex:
>0e77							.fill 	1
.44d0					Tokenise:
.44d0	20 48 45	jsr $4548			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.44d3					TokeniseASCIIZ:
.44d3	20 59 45	jsr $4559			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.44d6	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.44d8	8d 77 0e	sta $0e77			sta 	tokenBufferIndex
.44db	a8		tay				tay 								; start pointer
.44dc	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.44de	8d 77 0d	sta $0d77			sta 	tokenBuffer
.44e1					_TokLoop:
.44e1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.44e3	f0 46		beq $452b			beq 	_TokExit 					; if zero, then exit.
.44e5	c8		iny				iny 								; skip over spaces.
.44e6	c9 20		cmp #$20			cmp 	#" "
.44e8	f0 f7		beq $44e1			beq 	_TokLoop
.44ea	88		dey				dey 								; point back to character.
.44eb	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.44ed	f0 18		beq $4507			beq 	_TokHexConst
.44ef	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.44f1	f0 23		beq $4516			beq 	_TokQString
.44f3	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.44f5	b0 26		bcs $451d			bcs 	_TokPunctuation
.44f7	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.44f9	b0 29		bcs $4524			bcs 	_TokIdentifier
.44fb	c9 3a		cmp #$3a			cmp 	#"9"+1
.44fd	b0 1e		bcs $451d			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.44ff	c9 30		cmp #$30			cmp 	#"0"
.4501	90 1a		bcc $451d			bcc 	_TokPunctuation 			; < 0, punctuation.
.4503	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.4505	d0 08		bne $450f			bne 	_TokConst
.4507					_TokHexConst:
.4507	c8		iny				iny									; consume token.
.4508	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.450a	20 31 45	jsr $4531			jsr 	TokenWrite
.450d	a9 10		lda #$10			lda 	#16
.450f					_TokConst:
.450f	20 15 46	jsr $4615			jsr 	TokeniseInteger
.4512	b0 cd		bcs $44e1			bcs 	_TokLoop
.4514	90 18		bcc $452e			bcc 	_TokFail
.4516					_TokQString:
.4516	20 a9 46	jsr $46a9			jsr 	TokeniseString
.4519	b0 c6		bcs $44e1			bcs 	_TokLoop
.451b	90 11		bcc $452e			bcc 	_TokFail
.451d					_TokPunctuation:
.451d	20 88 46	jsr $4688			jsr 	TokenisePunctuation
.4520	b0 bf		bcs $44e1			bcs 	_TokLoop
.4522	90 0a		bcc $452e			bcc 	_TokFail
.4524					_TokIdentifier:
.4524	20 88 45	jsr $4588			jsr 	TokeniseIdentifier
.4527	b0 b8		bcs $44e1			bcs 	_TokLoop
.4529	90 03		bcc $452e			bcc 	_TokFail
.452b					_TokExit:
.452b	a9 01		lda #$01			lda 	#1
.452d	60		rts				rts
.452e					_TokFail:
.452e	a9 00		lda #$00			lda 	#0
.4530	60		rts				rts
.4531					TokenWrite:
.4531	85 32		sta $32				sta 	tempShort 					; save XA
.4533	48		pha				pha
.4534	da		phx				phx
.4535	a5 32		lda $32				lda 	tempShort
.4537	ae 77 0e	ldx $0e77			ldx 	tokenBufferIndex 			; geet index
.453a	9d 77 0d	sta $0d77,x			sta 	tokenBuffer,x 				; write byte to buffer
.453d	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.453f	9d 78 0d	sta $0d78,x			sta 	tokenBuffer+1,x
.4542	ee 77 0e	inc $0e77			inc 	tokenBufferIndex 			; bump index
.4545	fa		plx				plx
.4546	68		pla				pla
.4547	60		rts				rts
.4548					TokeniseMakeASCIIZ:
.4548	a0 00		ldy #$00			ldy 	#0							; get length of string.
.454a	b1 28		lda ($28),y			lda 	(codePtr),y
.454c	a8		tay				tay
.454d	c8		iny				iny 								; +1, the NULL goes here.
.454e	a9 00		lda #$00			lda 	#0
.4550	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4552	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4554	d0 02		bne $4558			bne 	_TMKAExit
.4556	e6 29		inc $29				inc 	codePtr+1
.4558					_TMKAExit:
.4558	60		rts				rts
.4559					TokeniseFixCase:
.4559	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.455b	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.455d					_TFCFlipQ:
.455d	8a		txa				txa
.455e	49 01		eor #$01			eor 	#1
.4560	aa		tax				tax
.4561					_TFCLoop:
.4561	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4563	f0 22		beq $4587			beq 	_TFCExit 					; if zero exit.
.4565	c9 20		cmp #$20			cmp 	#32 						; if control
.4567	90 1a		bcc $4583			bcc 	_TFCControl
.4569	c8		iny				iny 								; preconsume
.456a	c9 22		cmp #$22			cmp 	#'"'
.456c	f0 ef		beq $455d			beq 	_TFCFlipQ
.456e	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.4570	90 ef		bcc $4561			bcc 	_TFCLoop
.4572	c9 7b		cmp #$7b			cmp 	#"z"+1
.4574	b0 eb		bcs $4561			bcs 	_TFCLoop
.4576	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4578	d0 e7		bne $4561			bne 	_TFCLoop
.457a	88		dey				dey
.457b	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.457d					_TFCWrite:
.457d	91 28		sta ($28),y			sta 	(codePtr),y
.457f	c8		iny				iny
.4580	4c 61 45	jmp $4561			jmp 	_TFCLoop
.4583					_TFCControl:
.4583	a9 20		lda #$20			lda 	#" "
.4585	d0 f6		bne $457d			bne 	_TFCWrite
.4587					_TFCExit:
.4587	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4588					TokeniseIdentifier:
.4588	a2 00		ldx #$00			ldx 	#0
.458a					_TICopyID:
.458a	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.458c	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.458e	f0 16		beq $45a6			beq 	_TICopyUnderscore
.4590	c9 2e		cmp #$2e			cmp 	#"."
.4592	f0 14		beq $45a8			beq 	_TICopyIn
.4594	c9 30		cmp #$30			cmp 	#"0"
.4596	90 1b		bcc $45b3			bcc 	_TIEndCopy
.4598	c9 3a		cmp #$3a			cmp 	#"9"+1
.459a	90 0c		bcc $45a8			bcc 	_TICopyIn
.459c	c9 41		cmp #$41			cmp 	#"A"
.459e	90 13		bcc $45b3			bcc 	_TIEndCopy
.45a0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.45a2	b0 0f		bcs $45b3			bcs		_TIEndCopy
.45a4	90 02		bcc $45a8			bcc 	_TICopyIn
.45a6					_TICopyUnderScore:
.45a6	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.45a8					_TICopyIn:
.45a8	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.45a9	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.45ac	8e cf 0a	stx $0acf			stx 	convertBuffer
.45af	c8		iny				iny 								; next character
.45b0	4c 8a 45	jmp $458a			jmp 	_TICopyID 					; loop round
.45b3					_TIEndCopy:
.45b3	a9 24		lda #$24			lda 	#"$"
.45b5	20 08 46	jsr $4608			jsr 	TIDCheckCopy
.45b8	a9 23		lda #$23			lda 	#"#"
.45ba	20 08 46	jsr $4608			jsr 	TIDCheckCopy
.45bd	a9 28		lda #$28			lda 	#"("
.45bf	20 08 46	jsr $4608			jsr 	TIDCheckCopy
.45c2	20 45 44	jsr $4445			jsr 	TokenSearch 				; is it a token
.45c5	b0 3f		bcs $4606			bcs 	_TIExit 					; if so, then exit.
.45c7	5a		phy				phy
.45c8	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.45ca	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.45cd	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.45d0	c9 28		cmp #$28			cmp 	#"("
.45d2	d0 02		bne $45d6			bne 	_TINotArray
.45d4	ca		dex				dex 								; yes, remove it and convert to array.
.45d5	c8		iny				iny
.45d6					_TINotArray:
.45d6	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.45d9	c9 24		cmp #$24			cmp 	#"$"
.45db	d0 03		bne $45e0			bne 	_TINotString
.45dd	ca		dex				dex
.45de	c8		iny				iny
.45df	c8		iny				iny
.45e0					_TINotString:
.45e0	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.45e3	c9 23		cmp #$23			cmp 	#"#"
.45e5	d0 05		bne $45ec			bne 	_TINotFloat
.45e7	ca		dex				dex
.45e8	c8		iny				iny
.45e9	c8		iny				iny
.45ea	c8		iny				iny
.45eb	c8		iny				iny
.45ec					_TINotFloat:
.45ec	e8		inx				inx 								; write end marker for identifier.
.45ed	98		tya				tya
.45ee	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.45f1	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.45f4	a2 01		ldx #$01			ldx 	#1
.45f6					_TIOutput:
.45f6	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.45f9	29 3f		and #$3f			and 	#$3F
.45fb	48		pha				pha
.45fc	20 31 45	jsr $4531			jsr 	TokenWrite
.45ff	e8		inx				inx
.4600	68		pla				pla
.4601	c9 3a		cmp #$3a			cmp 	#$3A
.4603	90 f1		bcc $45f6			bcc 	_TIOutput
.4605	7a		ply				ply
.4606					_TIExit:
.4606	38		sec				sec 								; this can't fail.
.4607	60		rts				rts
.4608					TIDCheckCopy:
.4608	d1 28		cmp ($28),y			cmp 	(codePtr),y
.460a	d0 08		bne $4614			bne 	_TIDCCExit
.460c	e8		inx				inx
.460d	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4610	8e cf 0a	stx $0acf			stx 	convertBuffer
.4613	c8		iny				iny
.4614					_TIDCCExit:
.4614	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.4615					TokeniseInteger:
.4615	85 2c		sta $2c				sta 	temp1 						; save base
.4617	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.4619	8e cf 0a	stx $0acf			stx 	convertBuffer
.461c					_TIGetChars:
.461c	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.461e	c9 30		cmp #$30			cmp 	#"0"
.4620	90 1f		bcc $4641			bcc 	_TIEndGet
.4622	c9 3a		cmp #$3a			cmp 	#"9"+1
.4624	90 10		bcc $4636			bcc 	_TIHaveChar
.4626	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.4628	c9 0a		cmp #$0a			cmp 	#10
.462a	f0 15		beq $4641			beq 	_TIEndGet
.462c	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.462e	c9 41		cmp #$41			cmp 	#"A"
.4630	90 0f		bcc $4641			bcc 	_TIEndGet
.4632	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4634	b0 0b		bcs $4641			bcs 	_TIEndGet
.4636					_TIHaveChar:
.4636	e8		inx				inx 								; write into buffer.
.4637	8e cf 0a	stx $0acf			stx 	convertBuffer
.463a	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.463d	c8		iny				iny 								; next char
.463e	4c 1c 46	jmp $461c			jmp 	_TIGetChars
.4641					_TIEndGet:
.4641	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.4643	f0 1a		beq $465f			beq 	_TIFail
.4645	5a		phy				phy
.4646	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4648	85 2a		sta $2a				sta 	temp0
.464a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.464c	85 2b		sta $2b				sta 	1+(temp0)
.464e	a9 00		lda #$00			lda 	#0 							; stack level 0
.4650	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4652	a2 1a		ldx #$1a		ldx	#26
.4654	20 6d 3f	jsr $3f6d		jsr	mainHandler
.4657	7a		ply				ply
.4658	90 05		bcc $465f			bcc 	_TIFail 					; didn't convert.
.465a	20 61 46	jsr $4661			jsr 	TIRecursiveOut 				; recursive output ?
.465d	38		sec				sec
.465e	60		rts				rts
.465f					_TIFail:
.465f	18		clc				clc
.4660	60		rts				rts
.4661					TIRecursiveOut:
.4661	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4663	29 3f		and #$3f			and 	#$3F
.4665	09 40		ora #$40			ora 	#$40
.4667	48		pha				pha
.4668	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.466a	29 c0		and #$c0			and 	#$C0
.466c	05 a0		ora $a0				ora 	esInt1
.466e	05 a8		ora $a8				ora 	esInt2
.4670	05 b0		ora $b0				ora 	esInt3
.4672	f0 10		beq $4684			beq 	_TIRONoRecursion
.4674	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4676					_TIROShift:
.4676	46 b0		lsr $b0				lsr 	esInt3
.4678	66 a8		ror $a8				ror 	esInt2
.467a	66 a0		ror $a0				ror 	esInt1
.467c	66 98		ror $98				ror 	esInt0
.467e	ca		dex				dex
.467f	d0 f5		bne $4676			bne 	_TIROShift
.4681	20 61 46	jsr $4661			jsr 	TIRecursiveOut 				; call recursively
.4684					_TIRONoRecursion:
.4684	68		pla				pla 								; pull the old bit.
.4685	4c 31 45	jmp $4531			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4688					TokenisePunctuation:
.4688	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.468a	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.468d	c8		iny				iny
.468e	b1 28		lda ($28),y			lda 	(codePtr),y
.4690	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4693	c8		iny				iny 								; Y is +2
.4694	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4696	8d cf 0a	sta $0acf			sta 	convertBuffer
.4699	20 45 44	jsr $4445			jsr 	TokenSearch 				; search for that token.
.469c	b0 0a		bcs $46a8			bcs 	_TIFound
.469e	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.46a1	88		dey				dey 								; Y is now +1
.46a2	20 45 44	jsr $4445			jsr 	TokenSearch 				; search for that token.
.46a5	b0 01		bcs $46a8			bcs 	_TIFound
.46a7	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.46a8					_TIFound:
.46a8	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.46a9					TokeniseString:
.46a9	c8		iny				iny 								; skip opening quote
.46aa	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.46ac	84 2a		sty $2a				sty 	temp0 						; save start.
.46ae					_TSGetLength:
.46ae	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.46b0	f0 21		beq $46d3			beq 	_TSFail						; end of line, fail
.46b2	c8		iny				iny
.46b3	e8		inx				inx
.46b4	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.46b6	d0 f6		bne $46ae			bne 	_TSGetLength
.46b8	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.46ba	20 31 45	jsr $4531			jsr 	TokenWrite
.46bd	8a		txa				txa 								; output length
.46be	20 31 45	jsr $4531			jsr 	TokenWrite
.46c1	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.46c3	e0 00		cpx #$00			cpx 	#0 							; check ended
.46c5	f0 09		beq $46d0			beq 	_TSExit
.46c7					_TSOutput:
.46c7	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.46c9	20 31 45	jsr $4531			jsr 	TokenWrite
.46cc	c8		iny				iny
.46cd	ca		dex				dex
.46ce	d0 f7		bne $46c7			bne 	_TSOutput
.46d0					_TSExit:
.46d0	c8		iny				iny 								; skip ending quote
.46d1	38		sec				sec 								; return CS.
.46d2	60		rts				rts
.46d3					_TSFail:
.46d3	18		clc				clc
.46d4	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.46d5					TokenTableAddress:
>46d5	dd 46						.word 	Group0Text
>46d7	b5 48						.word 	Group1Text
>46d9	02 4a						.word 	Group2Text
>46db	53 4a						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.46dd					Group0Text:
>46dd	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>46e1	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>46e4	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>46e8	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>46eb	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>46ee	01 be					.byte $01,$be                          ; $8b >
>46f0	01 bc					.byte $01,$bc                          ; $8c <
>46f2	01 bd					.byte $01,$bd                          ; $8d =
>46f4	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>46f7	01 ab					.byte $01,$ab                          ; $8f +
>46f9	01 ad					.byte $01,$ad                          ; $90 -
>46fb	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>46fe	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>4701	01 aa					.byte $01,$aa                          ; $93 *
>4703	01 af					.byte $01,$af                          ; $94 /
>4705	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>4709	01 de					.byte $01,$de                          ; $96 ^
>470b	01 a1					.byte $01,$a1                          ; $97 !
>470d	01 bf					.byte $01,$bf                          ; $98 ?
>470f	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>4716	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>471c	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>4720	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>4723	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>472b	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>4731	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>4736	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>473b	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>4740	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>4746	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>474e	01 a8					.byte $01,$a8                          ; $a4 (
>4750	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>4755	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>475a	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>475f	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>4767	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>476c	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4771	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4777	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>477c	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4781	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4786	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>478d	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4794	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4799	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>47a0	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>47a7	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>47ad	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>47b4	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>47ba	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>47c2	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>47c8	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>47cd	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>47d3	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>47d9	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>47df	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>47e4	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>47e9	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>47f0	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>47f7	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>47ff	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>4807	01 c0					.byte $01,$c0                          ; $c3 @
>4809	01 fe					.byte $01,$fe                          ; $c4 ~
>480b	01 a6					.byte $01,$a6                          ; $c5 &
>480d	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>4813	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>481b	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>481f	01 a9					.byte $01,$a9                          ; $c9 )
>4821	01 ba					.byte $01,$ba                          ; $ca :
>4823	01 ac					.byte $01,$ac                          ; $cb ,
>4825	01 bb					.byte $01,$bb                          ; $cc ;
>4827	01 a7					.byte $01,$a7                          ; $cd '
>4829	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>482c	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>4831	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>4836	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>483c	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4840	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>4844	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>4848	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>484e	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4853	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4857	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>485d	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4862	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4868	02 41 d4				.byte $02,$41,$d4                      ; $db at
>486b	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4870	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4877	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>487c	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4881	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4886	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>488a	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4890	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4894	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>489b	01 ae					.byte $01,$ae                          ; $e5 .
>489d	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>48a2	01 a3					.byte $01,$a3                          ; $e7 #
>48a4	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>48aa	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>48af	04 54 59 50 c5				.byte $04,$54,$59,$50,$c5              ; $ea type
>48b4	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.48b5					Group1Text:
>48b5	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>48ba	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>48bf	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>48c4	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>48c8	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>48ce	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>48d2	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>48d7	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>48df	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>48e3	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>48e8	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>48ed	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>48f2	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>48f8	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>48ff	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>4903	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4909	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>490d	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>4911	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>4915	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>4919	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>491d	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>4921	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>4925	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>4929	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>492d	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>4931	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>4935	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>4939	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>493d	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>4941	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4945	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4949	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>494d	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4951	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4955	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4959	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>495d	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4961	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4965	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4969	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>496d	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4971	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4975	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4979	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>497d	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4981	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4985	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4989	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>498d	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4991	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4995	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4999	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>499d	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>49a1	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>49a5	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>49a9	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>49ad	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>49b1	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>49b5	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>49b9	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>49bd	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>49c1	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>49c5	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>49c9	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>49cd	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>49d1	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>49d5	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>49d9	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>49dd	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>49e1	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>49e5	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>49e9	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>49ed	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>49f1	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>49f5	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>49f9	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>49fd	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4a01	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4a02					Group2Text:
>4a02	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4a08	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4a0e	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4a14	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4a19	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4a21	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4a28	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>4a2c	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>4a31	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>4a37	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>4a3c	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>4a41	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4a46	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>4a4c	05 53 4f 55 4e c4			.byte $05,$53,$4f,$55,$4e,$c4          ; $93 sound
>4a52	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4a53					Group3Text:
>4a53	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4a5a	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4a61	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4a69	58 a8
>4a6b	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4a73	59 a8
>4a75	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4a7a	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4a81	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4a88	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4a8f	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4a96	08 50 4c 41 59 49 4e 47			.byte $08,$50,$4c,$41,$59,$49,$4e,$47,$a8 ; $8f playing(
>4a9e	a8
>4a9f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4aa0					tokeniserHandler:
.4aa0	7c a3 4a	jmp ($4aa3,x)			jmp 	(tokeniserVectors,x)
.4aa3					tokeniserVectors:
>4aa3	af 4a					.word _DummyControlHandler ; index 0
>4aa5	3a 42					.word Detokenise           ; index 2
>4aa7	2e 42					.word ListLine             ; index 4
>4aa9	b0 44					.word TokTest              ; index 6
>4aab	d0 44					.word Tokenise             ; index 8
>4aad	d3 44					.word TokeniseASCIIZ       ; index 10
.4aaf					_DummyControlHandler:
.4aaf	60		rts			rts

;******  Return to file: basic.asm

.4ab0					section_end_tokeniser:
.4ab0					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4ab0					AccessArray:
.4ab0	da		phx				phx
.4ab1	e8		inx				inx
.4ab2	20 76 4b	jsr $4b76			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4ab5	fa		plx				plx
.4ab6	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4ab8	85 2a		sta $2a				sta 	temp0
.4aba	b5 a0		lda $a0,x			lda 	esInt1,x
.4abc	85 2b		sta $2b				sta 	temp0+1
.4abe	da		phx				phx
.4abf	5a		phy				phy
.4ac0					_AAFollow:
.4ac0	a0 00		ldy #$00			ldy 	#0
.4ac2	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ac4	48		pha				pha
.4ac5	c8		iny				iny
.4ac6	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ac8	85 2b		sta $2b				sta 	temp0+1
.4aca	68		pla				pla
.4acb	85 2a		sta $2a				sta 	temp0
.4acd	e8		inx				inx 								; advance to next stack slot.
.4ace	a0 00		ldy #$00			ldy 	#0
.4ad0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4ad2	d5 98		cmp $98,x			cmp 	esInt0,x
.4ad4	c8		iny				iny
.4ad5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4ad7	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4ad9	29 7f		and #$7f			and 	#$7F
.4adb	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4add	90 4e		bcc $4b2d			bcc 	_AABadIndex 				; failed on index if max index < required.
.4adf	18		clc				clc
.4ae0	a5 2a		lda $2a				lda 	temp0
.4ae2	69 02		adc #$02			adc 	#2
.4ae4	85 2a		sta $2a				sta 	temp0
.4ae6	90 02		bcc $4aea			bcc 	_AANoCarry
.4ae8	e6 2b		inc $2b				inc 	temp0+1
.4aea					_AANoCarry:
.4aea	b5 98		lda $98,x			lda 	esInt0,x
.4aec	85 2e		sta $2e				sta 	temp2
.4aee	b5 a0		lda $a0,x			lda 	esInt1,x
.4af0	85 2f		sta $2f				sta 	temp2+1
.4af2	ac 7a 0e	ldy $0e7a			ldy 	varType
.4af5	b9 d0 4b	lda $4bd0,y			lda 	CAActualSize-$3A,y
.4af8	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4afa	30 02		bmi $4afe			bmi 	_AANotPointer
.4afc	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4afe					_AANotPointer:
.4afe	20 7a 4c	jsr $4c7a			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4b01	18		clc				clc
.4b02	a5 2a		lda $2a				lda 	temp0
.4b04	65 2e		adc $2e				adc 	temp2
.4b06	85 2a		sta $2a				sta 	temp0
.4b08	a5 2b		lda $2b				lda 	temp0+1
.4b0a	65 2f		adc $2f				adc 	temp2+1
.4b0c	85 2b		sta $2b				sta 	temp0+1
.4b0e	b5 91		lda $91,x			lda 	esType+1,x
.4b10	30 07		bmi $4b19			bmi 	_AAUsedAllIndices
.4b12	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4b14	10 12		bpl $4b28			bpl 	_AABadDepth 				; no, too many indexes.
.4b16	4c c0 4a	jmp $4ac0			jmp 	_AAFollow 					; otherwise follow them.
.4b19					_AAUsedAllIndices:
.4b19	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4b1b	30 0b		bmi $4b28			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4b1d	7a		ply				ply
.4b1e	fa		plx				plx
.4b1f	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4b21	95 98		sta $98,x			sta 	esInt0,x
.4b23	a5 2b		lda $2b				lda 	temp0+1
.4b25	95 a0		sta $a0,x			sta 	esInt1,x
.4b27	60		rts				rts
.4b28					_AABadDepth:
.4b28	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4b2a	20 27 15	jsr $1527		jsr	errorHandler
.4b2d					_AABadIndex:
.4b2d	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4b2f	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e78					elementSize:
>0e78							.fill	 1
.4b32					CreateArray:
.4b32	20 07 4d	jsr $4d07			jsr 	AccessSetup 				; set up the basic stuff, hashtables and so on.
.4b35	ad 7a 0e	lda $0e7a			lda 	varType 					; is the variable type an array
.4b38	4a		lsr a				lsr 	a
.4b39	90 36		bcc $4b71			bcc 	CANotArray 					; no, cause an error.
.4b3b	20 09 4e	jsr $4e09			jsr 	FindVariable 				; does the variable exist already
.4b3e	b0 2c		bcs $4b6c			bcs 	CAFound 					; if so, error cannot redefine it.
.4b40	20 42 4d	jsr $4d42			jsr 	CreateVariable 				; create the variable entry.
.4b43	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4b45	48		pha				pha
.4b46	a5 2b		lda $2b				lda 	temp0+1
.4b48	48		pha				pha
.4b49	a2 00		ldx #$00			ldx 	#0
.4b4b	20 76 4b	jsr $4b76			jsr 	GetArrayDimensions 			; get the array dimensions
.4b4e	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4b50	20 a6 4b	jsr $4ba6			jsr 	CreateArrayLevel 			; level to YA
.4b53	aa		tax				tax 								; level now in YX
.4b54	68		pla				pla 								; get address back to temp0 to write.
.4b55	85 2b		sta $2b				sta 	temp0+1
.4b57	68		pla				pla
.4b58	85 2a		sta $2a				sta 	temp0
.4b5a	98		tya				tya 								; write YX there (address in original record)
.4b5b	a0 06		ldy #$06			ldy 	#6
.4b5d	91 2a		sta ($2a),y			sta 	(temp0),y
.4b5f	88		dey				dey
.4b60	8a		txa				txa
.4b61	91 2a		sta ($2a),y			sta 	(temp0),y
.4b63	ac 7b 0e	ldy $0e7b			ldy 	varEnd 						; restore Y and exit.
.4b66	60		rts				rts
.4b67					CASize:
.4b67	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4b69	20 27 15	jsr $1527		jsr	errorHandler
.4b6c					CAFound:
.4b6c	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4b6e	20 27 15	jsr $1527		jsr	errorHandler
.4b71					CANotArray:
.4b71	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4b73	20 27 15	jsr $1527		jsr	errorHandler
.4b76					GetArrayDimensions:
.4b76	ad 7a 0e	lda $0e7a			lda 	varType 					; push variable type on the stack.
.4b79	48		pha				pha
.4b7a	ac 7b 0e	ldy $0e7b			ldy 	varEnd
.4b7d					_CAGetDimensions:
.4b7d	8a		txa				txa 								; get the next level
.4b7e	a2 0a		ldx #$0a		ldx	#10
.4b80	20 6d 3f	jsr $3f6d		jsr	mainHandler
.4b83	aa		tax				tax
.4b84	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4b86	29 e0		and #$e0			and 	#$E0
.4b88	15 a8		ora $a8,x			ora 	esInt2,x
.4b8a	15 b0		ora $b0,x			ora 	esInt3,x
.4b8c	d0 d9		bne $4b67			bne 	CASize
.4b8e	e8		inx				inx 								; next level.
.4b8f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4b91	c8		iny				iny
.4b92	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4b94	f0 e7		beq $4b7d			beq 	_CAGetDimensions
.4b96	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4b98	d0 cd		bne $4b67			bne 	CASize
.4b9a	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4b9c	95 90		sta $90,x			sta 	esType,x 					; dimensions there are, it marks the end.
.4b9e	68		pla				pla 								; restore the variable type ($3A-$3F)
.4b9f	8d 7a 0e	sta $0e7a			sta 	varType
.4ba2	8c 7b 0e	sty $0e7b			sty 	varEnd 						; save exit Y value, after dimensions
.4ba5	60		rts				rts
.4ba6					CreateArrayLevel:
.4ba6	ac 7a 0e	ldy $0e7a			ldy 	varType
.4ba9	b9 d0 4b	lda $4bd0,y			lda 	CAActualSize-$3A,y 			; $3A is the first type marker.
.4bac	8d 78 0e	sta $0e78			sta 	elementSize 				; get element size this level.
.4baf	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4bb1	30 05		bmi $4bb8			bmi 	_CANotPointer 				; then its values, keep elementsize
.4bb3	a9 02		lda #$02			lda 	#2 							; use array of pointers, each element is 2.
.4bb5	8d 78 0e	sta $0e78			sta 	elementSize
.4bb8					_CANotPointer:
.4bb8	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4bba	85 2a		sta $2a				sta 	temp0
.4bbc	48		pha				pha
.4bbd	a5 36		lda $36				lda 	lowMemory+1
.4bbf	85 2b		sta $2b				sta 	temp0+1
.4bc1	48		pha				pha
.4bc2	20 43 4c	jsr $4c43			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4bc5	a0 00		ldy #$00			ldy 	#0
.4bc7	b5 98		lda $98,x			lda 	esInt0,x
.4bc9	91 2a		sta ($2a),y			sta 	(temp0),y
.4bcb	c8		iny				iny
.4bcc	b5 a0		lda $a0,x			lda 	esInt1,x
.4bce	91 2a		sta ($2a),y			sta 	(temp0),y
.4bd0	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4bd2	30 06		bmi $4bda			bmi 	_CALNotLast
.4bd4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4bd6	09 80		ora #$80			ora 	#$80
.4bd8	91 2a		sta ($2a),y			sta 	(temp0),y
.4bda					_CALNotLast:
.4bda	a9 02		lda #$02			lda 	#2
.4bdc	20 00 4c	jsr $4c00			jsr 	_CALAddTemp0
.4bdf	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4be1	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4be3	b5 a0		lda $a0,x			lda 	esInt1,x
.4be5	95 b0		sta $b0,x			sta 	esInt3,x
.4be7					_CALClear:
.4be7	20 10 4c	jsr $4c10			jsr 	EraseOneElement
.4bea	ad 78 0e	lda $0e78			lda 	elementSize 				; move to next element
.4bed	20 00 4c	jsr $4c00			jsr 	_CALAddTemp0
.4bf0	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4bf2	d0 02		bne $4bf6			bne 	_CALNoBorrow
.4bf4	d6 b0		dec $b0,x			dec 	esInt3,x
.4bf6					_CALNoBorrow:
.4bf6	d6 a8		dec $a8,x			dec 	esInt2,x
.4bf8	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4bfa	10 eb		bpl $4be7			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4bfc	68		pla				pla 								; restore the start of this into YA.
.4bfd	a8		tay				tay
.4bfe	68		pla				pla
.4bff	60		rts				rts
.4c00					_CALAddTemp0:
.4c00	18		clc				clc
.4c01	65 2a		adc $2a				adc 	temp0
.4c03	85 2a		sta $2a				sta 	temp0
.4c05	90 02		bcc $4c09			bcc 	_CALANoCarry
.4c07	e6 2b		inc $2b				inc 	temp0+1
.4c09					_CALANoCarry:
.4c09	60		rts				rts
.4c0a					CAActualSize:
>4c0a	04 04						.byte 	VarISize,VarISize
>4c0c	02 02						.byte 	VarSSize,VarSSize
>4c0e	06 06						.byte 	VarFSize,VarFSize
.4c10					EraseOneElement:
.4c10	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4c12	10 09		bpl $4c1d			bpl 	_EOESubArray
.4c14	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4c16	ad 7a 0e	lda $0e7a			lda 	varType
.4c19	20 ab 4d	jsr $4dab			jsr 	ZeroTemp0Y
.4c1c	60		rts				rts
.4c1d					_EOESubArray:
.4c1d	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4c1f	48		pha				pha
.4c20	a5 2b		lda $2b				lda 	temp0+1
.4c22	48		pha				pha
.4c23	ad 78 0e	lda $0e78			lda 	elementSize 				; save element size
.4c26	48		pha				pha
.4c27	e8		inx				inx 								; create at next level
.4c28	20 a6 4b	jsr $4ba6			jsr 	CreateArrayLevel
.4c2b	ca		dex				dex
.4c2c	85 32		sta $32				sta 	tempShort 					; save A
.4c2e	68		pla				pla  								; restore element size.
.4c2f	8d 78 0e	sta $0e78			sta 	elementSize
.4c32	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4c33	85 2b		sta $2b				sta 	temp0+1
.4c35	68		pla				pla
.4c36	85 2a		sta $2a				sta 	temp0
.4c38	98		tya				tya 								; store Y/A there
.4c39	a0 01		ldy #$01			ldy 	#1
.4c3b	91 2a		sta ($2a),y			sta 	(temp0),y
.4c3d	a5 32		lda $32				lda 	tempShort
.4c3f	88		dey				dey
.4c40	91 2a		sta ($2a),y			sta 	(temp0),y
.4c42	60		rts				rts
.4c43					AllocateArraySpace:
.4c43	18		clc				clc 								; element count + 1 => temp2.
.4c44	b5 98		lda $98,x			lda 	esInt0,x
.4c46	69 01		adc #$01			adc 	#1
.4c48	85 2e		sta $2e				sta 	temp2
.4c4a	b5 a0		lda $a0,x			lda 	esInt1,x
.4c4c	69 00		adc #$00			adc 	#0
.4c4e	85 2f		sta $2f				sta 	temp2+1
.4c50	ad 78 0e	lda $0e78			lda 	elementSize 				; bytes per element
.4c53	20 7a 4c	jsr $4c7a			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4c56	18		clc				clc 								; add 2 for 'max element' byte.
.4c57	a5 2e		lda $2e				lda 	temp2
.4c59	69 02		adc #$02			adc 	#2
.4c5b	85 2e		sta $2e				sta 	temp2
.4c5d	90 02		bcc $4c61			bcc 	_AASNoCarry
.4c5f	e6 2f		inc $2f				inc 	temp2+1
.4c61					_AASNoCarry:
.4c61	18		clc				clc 								; add to low memory, allocating space.
.4c62	a5 35		lda $35				lda 	lowMemory
.4c64	65 2e		adc $2e				adc 	temp2
.4c66	85 35		sta $35				sta 	lowMemory
.4c68	a5 36		lda $36				lda 	lowMemory+1
.4c6a	65 2f		adc $2f				adc 	temp2+1
.4c6c	85 36		sta $36				sta 	lowMemory+1
.4c6e	b0 05		bcs $4c75			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4c70	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4c72	b0 01		bcs $4c75			bcs 	_AASFail
.4c74	60		rts				rts
.4c75					_AASFail:
.4c75	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4c77	20 27 15	jsr $1527		jsr	errorHandler
.4c7a					MultiplyTemp2ByA:
.4c7a	48		pha				pha
.4c7b	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4c7d	85 30		sta $30				sta 	temp3
.4c7f	a5 2f		lda $2f				lda 	temp2+1
.4c81	85 31		sta $31				sta 	temp3+1
.4c83	68		pla				pla
.4c84	06 2e		asl $2e				asl 	temp2 						; double it.
.4c86	26 2f		rol $2f				rol 	temp2+1
.4c88	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4c8a	f0 15		beq $4ca1			beq 	_MTBAExit
.4c8c	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4c8e	d0 0d		bne $4c9d			bne 	_MTBANotFloat
.4c90	18		clc				clc 								; so this will make it x 3
.4c91	a5 2e		lda $2e				lda 	temp2
.4c93	65 30		adc $30				adc 	temp3
.4c95	85 2e		sta $2e				sta 	temp2
.4c97	a5 2f		lda $2f				lda 	temp2+1
.4c99	65 31		adc $31				adc 	temp3+1
.4c9b	85 2f		sta $2f				sta 	temp2+1
.4c9d					_MTBANotFloat:
.4c9d	06 2e		asl $2e				asl 	temp2 						; double it.
.4c9f	26 2f		rol $2f				rol 	temp2+1
.4ca1					_MTBAExit:
.4ca1	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e79					varHash:
>0e79							.fill	1
.0e7a					varType:
>0e7a							.fill 	1
.0e7b					varEnd:
>0e7b							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4ca2					AccessVariable:
.4ca2	aa		tax				tax 								; stack in X
.4ca3	c8		iny				iny									; look at second character
.4ca4	b1 28		lda ($28),y			lda 	(codePtr),y
.4ca6	88		dey				dey
.4ca7	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4ca9	d0 15		bne $4cc0			bne 	_AVLong 					; no, always use the hash tables.
.4cab	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4cad	38		sec				sec 	 							; make it 0-25
.4cae	e9 01		sbc #$01			sbc 	#1
.4cb0	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4cb1	0a		asl a				asl 	a
.4cb2	95 98		sta $98,x			sta 	esInt0,x
.4cb4	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4cb6	95 a0		sta $a0,x			sta 	esInt1,x
.4cb8	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4cba	95 90		sta $90,x			sta 	esType,x
.4cbc	c8		iny				iny 								; skip over the variable reference in the code.
.4cbd	c8		iny				iny  								; (1 letter, 1 type)
.4cbe	8a		txa				txa 								; stack in A to return.
.4cbf	60		rts				rts
.4cc0					_AVLong:
.4cc0	da		phx				phx
.4cc1	20 07 4d	jsr $4d07			jsr 	AccessSetup 				; set up the basic information we need for later
.4cc4	20 09 4e	jsr $4e09			jsr 	FindVariable 				; does the variable exist already ?
.4cc7	b0 0e		bcs $4cd7			bcs 	_AVFound 					; yes, then its found
.4cc9	ad 7a 0e	lda $0e7a			lda 	varType 					; otherwise, is the variable type an array
.4ccc	4a		lsr a				lsr 	a
.4ccd	90 05		bcc $4cd4			bcc 	_AVCanCreate 				; if not, we can autocreate
.4ccf	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4cd1	20 27 15	jsr $1527		jsr	errorHandler
.4cd4					_AVCanCreate:
.4cd4	20 42 4d	jsr $4d42			jsr 	CreateVariable 				; variable does not exist, create it.
.4cd7					_AVFound:
.4cd7	fa		plx				plx
.4cd8	18		clc				clc 								; copy temp0 (variable record address)
.4cd9	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4cdb	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4cdd	95 98		sta $98,x			sta 	esInt0,x
.4cdf	a5 2b		lda $2b				lda 	temp0+1
.4ce1	69 00		adc #$00			adc 	#0
.4ce3	95 a0		sta $a0,x			sta 	esInt1,x
.4ce5	a9 00		lda #$00			lda 	#0
.4ce7	95 a8		sta $a8,x			sta 	esInt2,x
.4ce9	95 b0		sta $b0,x			sta 	esInt3,x
.4ceb	ac 7a 0e	ldy $0e7a			ldy 	varType 					; get the type ID from the type.
.4cee	b9 c7 4c	lda $4cc7,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4cf1	95 90		sta $90,x			sta 	esType,x
.4cf3	ac 7b 0e	ldy $0e7b			ldy 	varEnd 						; restore Y
.4cf6	ad 7a 0e	lda $0e7a			lda 	VarType 					; get variable type, put LSB into C
.4cf9	4a		lsr a				lsr 	a
.4cfa	90 03		bcc $4cff			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4cfc	20 b0 4a	jsr $4ab0			jsr 	AccessArray 				; array lookup. if LSB was set.
.4cff					_AVNotArray:
.4cff	8a		txa				txa 								; return stack in A and return
.4d00	60		rts				rts
.4d01					_AVTypeTable:
>4d01	80 80						.byte 	$80,$80						; integer
>4d03	c0 c0						.byte 	$C0,$C0 					; string
>4d05	81 81						.byte 	$81,$81 					; float
.4d07					AccessSetup:
.4d07	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4d09	8d 79 0e	sta $0e79			sta 	varHash
.4d0c	5a		phy				phy
.4d0d	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4d0f	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4d11	b0 0b		bcs $4d1e			bcs 	_ASComplete
.4d13	18		clc				clc 								; add to the hash. Might improve this.
.4d14	6d 79 0e	adc $0e79			adc 	varHash
.4d17	8d 79 0e	sta $0e79			sta 	varHash
.4d1a	c8		iny				iny 								; next character
.4d1b	4c 0d 4d	jmp $4d0d			jmp 	_ASLoop
.4d1e					_ASComplete:
.4d1e	8d 7a 0e	sta $0e7a			sta 	varType 					; save variable type byte
.4d21	c8		iny				iny
.4d22	8c 7b 0e	sty $0e7b			sty 	varEnd 						; save the ending position.
.4d25	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4d26	e9 3a		sbc #$3a			sbc 	#$3A
.4d28	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4d29	0a		asl a				asl 	a
.4d2a	0a		asl a				asl 	a
.4d2b	0a		asl a				asl 	a 							; 2 bytes/word
.4d2c	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4d2e	ad 79 0e	lda $0e79			lda 	varHash 					; get hash
.4d31	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4d33	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4d34	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4d36	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4d38	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4d3a	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4d3c	69 00		adc #$00			adc 	#0
.4d3e	85 3c		sta $3c				sta 	hashList+1
.4d40	7a		ply				ply
.4d41	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4d42					CreateVariable:
.4d42	98		tya				tya 								; push Y on the stack twice.
.4d43	48		pha				pha									; position in code of the new variable.
.4d44	48		pha				pha
.4d45	ae 7a 0e	ldx $0e7a			ldx 	varType 					; get var type 0-5 from the var type
.4d48	bd 6b 4d	lda $4d6b,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4d4b	48		pha				pha 								; save length
.4d4c	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4d4e	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4d50	a5 36		lda $36				lda 	lowMemory+1
.4d52	85 2b		sta $2b				sta 	temp0+1
.4d54	68		pla				pla 								; get length
.4d55	18		clc				clc 								; add to low memory.
.4d56	65 35		adc $35				adc 	lowMemory
.4d58	85 35		sta $35				sta 	lowMemory
.4d5a	90 08		bcc $4d64			bcc 	_CVNoCarry
.4d5c	e6 36		inc $36				inc 	lowMemory+1
.4d5e	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4d60	c5 34		cmp $34				cmp 	highMemory+1
.4d62	b0 3c		bcs $4da0			bcs 	_CVMemory
.4d64					_CVNoCarry:
.4d64	ad 79 0e	lda $0e79			lda 	varHash 					; store hash at offset 4.
.4d67	a0 04		ldy #$04			ldy 	#4
.4d69	91 2a		sta ($2a),y			sta 	(temp0),y
.4d6b	68		pla				pla 								; offset, work out where the variable name is.
.4d6c	18		clc				clc
.4d6d	65 28		adc $28				adc 	codePtr
.4d6f	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4d71	91 2a		sta ($2a),y			sta 	(temp0),y
.4d73	a5 29		lda $29				lda 	codePtr+1
.4d75	69 00		adc #$00			adc 	#0
.4d77	c8		iny				iny
.4d78	91 2a		sta ($2a),y			sta 	(temp0),y
.4d7a	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4d7d	b0 03		bcs $4d82			bcs 	_CVNotImmediate
.4d7f	20 df 4d	jsr $4ddf			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4d82					_CVNotImmediate:
.4d82	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4d84	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4d86	91 2a		sta ($2a),y			sta 	(temp0),y
.4d88	c8		iny				iny
.4d89	b1 3b		lda ($3b),y			lda 	(hashList),y
.4d8b	91 2a		sta ($2a),y			sta 	(temp0),y
.4d8d	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4d8f	91 3b		sta ($3b),y			sta 	(hashList),y
.4d91	88		dey				dey
.4d92	a5 2a		lda $2a				lda 	temp0
.4d94	91 3b		sta ($3b),y			sta 	(hashList),y
.4d96	ad 7a 0e	lda $0e7a			lda 	varType 					; type in A
.4d99	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4d9b	20 ab 4d	jsr $4dab			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4d9e	7a		ply				ply
.4d9f	60		rts				rts
.4da0					_CVMemory:
.4da0	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4da2	20 27 15	jsr $1527		jsr	errorHandler
>4da5	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4da7	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4da9	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4dab					ZeroTemp0Y:
.4dab	4a		lsr a				lsr 	a 							; bit 0 in carry
.4dac	0a		asl a				asl 	a
.4dad	b0 17		bcs $4dc6			bcs 	_ZTExit 					; we don't initialise arrays.
.4daf	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4db1	f0 14		beq $4dc7			beq 	_ZTWriteNullString 			; write "" string
.4db3	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4db5	f0 20		beq $4dd7			beq 	_ZTWriteFloat
.4db7	5a		phy				phy
.4db8	a9 00		lda #$00			lda 	#0
.4dba	91 2a		sta ($2a),y			sta 	(temp0),y
.4dbc	c8		iny				iny
.4dbd	91 2a		sta ($2a),y			sta 	(temp0),y
.4dbf	c8		iny				iny
.4dc0	91 2a		sta ($2a),y			sta 	(temp0),y
.4dc2	c8		iny				iny
.4dc3	91 2a		sta ($2a),y			sta 	(temp0),y
.4dc5	7a		ply				ply
.4dc6					_ZTExit:
.4dc6	60		rts				rts
.4dc7					_ZTWriteNullString:
.4dc7	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4dc9	8d ce 0a	sta $0ace			sta 	NullString
.4dcc	a9 ce		lda #$ce			lda 	#NullString & $FF
.4dce	91 2a		sta ($2a),y			sta 	(temp0),y
.4dd0	a9 0a		lda #$0a			lda 	#NullString >> 8
.4dd2	c8		iny				iny
.4dd3	91 2a		sta ($2a),y			sta 	(temp0),y
.4dd5	88		dey				dey
.4dd6	60		rts				rts
.4dd7					_ZTWriteFloat:
.4dd7	da		phx				phx
.4dd8	a2 20		ldx #$20		ldx	#32
.4dda	20 22 27	jsr $2722		jsr	floatingpointHandler
.4ddd	fa		plx				plx
.4dde	60		rts				rts
.4ddf					CloneVariableName:
.4ddf	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4de1	b1 2a		lda ($2a),y			lda 	(temp0),y
.4de3	85 2e		sta $2e				sta 	temp2
.4de5	c8		iny				iny
.4de6	b1 2a		lda ($2a),y			lda 	(temp0),y
.4de8	85 2f		sta $2f				sta 	temp2+1
.4dea	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4dec	91 2a		sta ($2a),y			sta 	(temp0),y
.4dee	88		dey				dey
.4def	a5 35		lda $35				lda 	lowMemory
.4df1	91 2a		sta ($2a),y			sta 	(temp0),y
.4df3	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4df5					_CVNCopy:
.4df5	b1 2e		lda ($2e),y			lda		(temp2),y
.4df7	91 35		sta ($35),y			sta 	(lowMemory),y
.4df9	c8		iny				iny
.4dfa	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4dfc	90 f7		bcc $4df5			bcc 	_CVNCopy
.4dfe	98		tya				tya 								; add Y to low memory
.4dff	18		clc				clc
.4e00	65 35		adc $35				adc 	lowMemory
.4e02	85 35		sta $35				sta 	lowMemory
.4e04	90 02		bcc $4e08			bcc 	_CVNNoCarry
.4e06	e6 36		inc $36				inc 	lowMemory+1
.4e08					_CVNNoCarry:
.4e08	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4e09					FindVariable:
.4e09	5a		phy				phy
.4e0a	98		tya				tya 								; point temp2 to the actual name
.4e0b	18		clc				clc 								; in memory of the variable being created
.4e0c	65 28		adc $28				adc 	codePtr
.4e0e	85 2e		sta $2e				sta 	temp2
.4e10	a5 29		lda $29				lda 	codePtr+1
.4e12	69 00		adc #$00			adc 	#0
.4e14	85 2f		sta $2f				sta 	temp2+1
.4e16	a0 00		ldy #$00			ldy 	#0
.4e18	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4e1a	85 2a		sta $2a				sta 	temp0
.4e1c	a5 3c		lda $3c				lda 	hashList+1
.4e1e	85 2b		sta $2b				sta 	temp0+1
.4e20	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4e22	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e24	f0 2b		beq $4e51			beq 	_FVFail
.4e26	aa		tax				tax
.4e27	88		dey				dey		 							; get LSB
.4e28	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e2a	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4e2c	86 2b		stx $2b				stx 	temp0+1
.4e2e	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4e30	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e32	cd 79 0e	cmp $0e79			cmp 	varHash
.4e35	d0 e9		bne $4e20			bne 	_FVNext 					; if not, no point in checking the name.
.4e37	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4e38	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e3a	85 2d		sta $2d				sta 	temp1+1
.4e3c	88		dey				dey
.4e3d	b1 2a		lda ($2a),y			lda 	(temp0),y
.4e3f	85 2c		sta $2c				sta 	temp1
.4e41	a0 00		ldy #$00			ldy 	#0
.4e43					_FVCheck:
.4e43	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4e45	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4e47	d0 d7		bne $4e20			bne 	_FVNext		 				; fail if different.
.4e49	c8		iny				iny
.4e4a	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4e4c	90 f5		bcc $4e43			bcc 	_FVCheck
.4e4e	7a		ply				ply
.4e4f	38		sec				sec
.4e50	60		rts				rts
.4e51					_FVFail:
.4e51	7a		ply				ply
.4e52	18		clc				clc
.4e53	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4e54					HashTableReset:
.4e54	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4e56	a9 00		lda #$00			lda 	#0
.4e58					_HTRClear:
.4e58	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4e5b	ca		dex				dex
.4e5c	d0 fa		bne $4e58			bne 	_HTRClear
.4e5e	60		rts				rts

;******  Return to file: variable/variable.asm

.4e5f					variableHandler:
.4e5f	7c 62 4e	jmp ($4e62,x)			jmp 	(variableVectors,x)
.4e62					variableVectors:
>4e62	6a 4e					.word _DummyControlHandler ; index 0
>4e64	a2 4c					.word AccessVariable       ; index 2
>4e66	32 4b					.word CreateArray          ; index 4
>4e68	54 4e					.word HashTableReset       ; index 6
.4e6a					_DummyControlHandler:
.4e6a	60		rts			rts

;******  Return to file: basic.asm

.4e6b					section_end_variable:
.4e6b					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e7c					endStorage:
>4e6b							.align 	256
.4f00					programMemory:
>4eff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4f00					section_end_footer:

;******  End of listing
