
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Wed Apr 28 18:57:31 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=1					cputype = 1
=1					autorun = 1
=0					coldstartnew = 0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35
.0af2					jumpVector:
>0af2							.fill 	2

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$ea					TKW_TYPE                     = $ea ; type
=$eb					TKW_TIME                     = $eb ; time
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$93					TKW_SOUND                    = $93 ; sound
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(
=$8f					TKW_PLAYINGLPAREN            = $8f ; playing(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: device/option_x16/x16const.inc

=$ffde					KNLReadTimer = $FFDE
=$ffd2					KNLPrintChar = $FFD2
=$ffe4					KNLCheckKeyboarBuffer = $FFE4
=$ffcf					KNLInputLine = $FFCF
=$ffe1					KNLCheckBreak = $FFE1
=$ffbd					KNLFileSetName = $FFBD
=$ffba					KNLFileSetLFS = $FFBA
=$ffd5					KNLFileLoad = $FFD5
=$ffd8					KNLFileSave = $FFD8

;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.
=$9f20					X16VeraAddLow = $9F20
=$9f21					X16VeraAddMed = $9F21
=$9f22					X16VeraAddHigh = $9F22
=$9f23					X16VeraData0 = $9F23
=$9f24					X16VeraData1 = $9F24
=$9f25					X16VeraControl = $9F25
=$9f29					X16VeraDCVideo = $9F29
=$9f2a					X16VeraHScale = $9F2A
=$9f2b					X16VeraVScale = $9F2B
=$9f2d					X16VeraLayerConfig = $9F2D
=$9f2e					X16VeraLayerMapBase = $9F2E
=$9f2f					X16VeraLayerTileBase = $9F2F
=$ff56					X16KReadJoystick = $FF56
=$ff50					X16KReadRTC = $FF50
=$1f9c0					X16VeraSound = $1F9C0
=$1fa00					X16VeraPalette = $1FA00
=320					GrWidth = 320 								; gfx mode size.
=200					GrHeight = 200
=$f800					VeraDefaultFont = $F800 					; where font is in Vera

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	91 47						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 50		lda #$50			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 c6 29	jsr $29c6		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 ac 13	jsr $13ac		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 05 15	jsr $1505		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 c6 29	jsr $29c6		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 29 40	jsr $4029		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 d4 42	jsr $42d4		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 61 4b	jsr $4b61		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 20 4f	jsr $4f20		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 61 4b	jsr $4b61		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first character into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit 					; e.g. "INX"
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ? so it is lda (something
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A on its own. This is for ASL A
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it - this should be $3A
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1 (it may of course be absolute)
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 29 40	jsr $4029		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing 				; get ,X or ,Y if present
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit 					; neither present
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX 					; decide if ,X or ,Y
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 29 40	jsr $4029		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 27 15	jsr $1527		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 29 40	jsr $4029		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X) so get the ending and error on anything else.
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 29 40	jsr $4029		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma (e.g. ,X ,Y)
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af4					finalOpcode:
>0af4							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f4 0a	sta $0af4			sta 	finalOpcode					; save opcode.
.1113	5a		phy				phy
.1114	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O (e.g. what do we display/check.)
.1117	29 02		and #$02			and 	#2
.1119	f0 2b		beq $1146			beq 	_ASMWNoEcho 				; if bit 2 zero then don't echo.
.111b	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111e	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1121	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1124	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1127	ad f4 0a	lda $0af4			lda 	finalOpcode 				; write opcode
.112a	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.112d	e0 00		cpx #$00			cpx 	#0
.112f	f0 0e		beq $113f			beq 	_ASMWEchoExit
.1131	a5 98		lda $98				lda 	esInt0
.1133	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.1136	e0 01		cpx #$01			cpx 	#1
.1138	f0 05		beq $113f			beq 	_ASMWEchoExit
.113a	a5 a0		lda $a0				lda 	esInt1
.113c	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.113f					_ASMWEchoExit:
.113f	da		phx				phx
.1140	a2 04		ldx #$04		ldx	#4
.1142	20 05 15	jsr $1505		jsr	deviceHandler
.1145	fa		plx				plx
.1146					_ASMWNoEcho:
.1146	ad f4 0a	lda $0af4			lda 	finalOpcode 				; opcode
.1149	20 60 11	jsr $1160			jsr 	AsmWriteByte
.114c	e0 00		cpx #$00			cpx 	#0	 						; exit if no operands
.114e	f0 0e		beq $115e			beq 	_ASMWExit
.1150	a5 98		lda $98				lda 	esInt0	 					; low byte
.1152	20 60 11	jsr $1160			jsr 	AsmWriteByte
.1155	e0 01		cpx #$01			cpx 	#1
.1157	f0 05		beq $115e			beq 	_ASMWExit
.1159	a5 a0		lda $a0				lda 	esInt1 						; high byte
.115b	20 60 11	jsr $1160			jsr 	AsmWriteByte
.115e					_ASMWExit:
.115e	7a		ply				ply
.115f	60		rts				rts
.1160					AsmWriteByte:
.1160	a0 00		ldy #$00			ldy 	#0
.1162	48		pha				pha
.1163	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1166	85 2a		sta $2a				sta 	temp0
.1168	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116b	85 2b		sta $2b				sta 	temp0+1
.116d	68		pla				pla 								; write out the byte.
.116e	91 2a		sta ($2a),y			sta 	(temp0),y
.1170	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1173	d0 03		bne $1178			bne 	_AWBNoCarry
.1175	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1178					_AWBNoCarry:
.1178	60		rts				rts
.1179					AWIWriteHexSpace:
.1179	48		pha				pha
.117a	a9 20		lda #$20			lda 	#" "
.117c	20 93 11	jsr $1193			jsr 	AWIPrintChar
.117f	68		pla				pla
.1180					AWIWriteHex:
.1180	48		pha				pha
.1181	4a		lsr a				lsr 	a
.1182	4a		lsr a				lsr 	a
.1183	4a		lsr a				lsr 	a
.1184	4a		lsr a				lsr 	a
.1185	20 89 11	jsr $1189			jsr 	AWIPrintNibble
.1188	68		pla				pla
.1189					AWIPrintNibble:
.1189	29 0f		and #$0f			and 	#15
.118b	c9 0a		cmp #$0a			cmp 	#10
.118d	90 02		bcc $1191			bcc 	_AWIPNDigit
.118f	69 06		adc #$06			adc 	#6
.1191					_AWIPNDigit:
.1191	69 30		adc #$30			adc 	#48
.1193					AWIPrintChar:
.1193	85 32		sta $32				sta 	tempShort
.1195	da		phx				phx
.1196	a5 32		lda $32				lda 	tempShort
.1198	a2 14		ldx #$14		ldx	#20
.119a	20 05 15	jsr $1505		jsr	deviceHandler
.119d	fa		plx				plx
.119e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af5					asmToken:
>0af5							.fill 	1
.0af6					asmMode:
>0af6							.fill 	1 							; esInt0/1
.0af7					asmBaseOpcode:
>0af7							.fill 	1
.119f					AssembleOneInstruction:
.119f	8d f5 0a	sta $0af5			sta 	asmToken 					; save the token
.11a2	aa		tax				tax
.11a3	bd 6c 11	lda $116c,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11a6	8d f7 0a	sta $0af7			sta 	asmBaseOpcode
.11a9	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11ac	8d f6 0a	sta $0af6			sta 	asmMode
.11af	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b1	d0 05		bne $11b8			bne 	_AOIThreeBytes 				; if so, we have to use three byte, can't try zp before abs
.11b3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11b6	b0 10		bcs $11c8			bcs 	_AOISuccess 				; worked ok.
.11b8					_AOIThreeBytes:
.11b8	ae f6 0a	ldx $0af6			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11bb	bd f2 11	lda $11f2,x			lda 	AbsoluteVersionTable,x
.11be	30 09		bmi $11c9			bmi 	_AOIError					; not possible, no equivalent.
.11c0	8d f6 0a	sta $0af6			sta 	asmMode
.11c3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11c6	90 01		bcc $11c9			bcc 	_AOIError 					; didn't work.
.11c8					_AOISuccess:
.11c8	60		rts				rts
.11c9					_AOIError:
.11c9	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11cb	20 27 15	jsr $1527		jsr	errorHandler
.11ce					AssembleAttempt:
.11ce	20 d7 11	jsr $11d7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d1	b0 03		bcs $11d6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d3	20 7f 13	jsr $137f			jsr 	AssembleSpecialCase
.11d6					_AAExit:
.11d6	60		rts				rts
.11d7					_AADispatch:
.11d7	ad f5 0a	lda $0af5			lda 	asmToken
.11da	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11dc	b0 11		bcs $11ef			bcs 	_AAGroup4
.11de	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e0	b0 0a		bcs $11ec			bcs 	_AAGroup3
.11e2	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11e4	b0 03		bcs $11e9			bcs 	_AAGroup2
.11e6	4c c5 12	jmp $12c5			jmp 	AssembleGroup1
.11e9					_AAGroup2:
.11e9	4c 20 13	jmp $1320			jmp 	AssembleGroup2
.11ec					_AAGroup3:
.11ec	4c 41 13	jmp $1341			jmp 	AssembleGroup3
.11ef					_AAGroup4:
.11ef	4c 75 13	jmp $1375			jmp 	AssembleGroup4
.11f2					AbsoluteVersionTable:
>11f2	ff						.byte	$FF 			; fail AMD_IMM
>11f3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11f4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11f5	ff						.byte	$FF 			; fail AMD_ABS
>11f6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11f7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11f8	ff						.byte	$FF 			; fail AMD_ABSY
>11f9	ff						.byte	$FF 			; fail AMD_ABSX
>11fa	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11fb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11fc	ff						.byte	$FF 			; fail AMD_ABSIND
>11fd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11fe	ff						.byte	$FF 			; fail AMD_REL
>11ff	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1200					OpcodeTable:
>1200	01					.byte	$01			; $94 ora
>1201	21					.byte	$21			; $95 (and)
>1202	41					.byte	$41			; $96 eor
>1203	61					.byte	$61			; $97 adc
>1204	81					.byte	$81			; $98 sta
>1205	a1					.byte	$a1			; $99 lda
>1206	c1					.byte	$c1			; $9a cmp
>1207	e1					.byte	$e1			; $9b sbc
>1208	02					.byte	$02			; $9c asl
>1209	22					.byte	$22			; $9d rol
>120a	42					.byte	$42			; $9e lsr
>120b	62					.byte	$62			; $9f ror
>120c	82					.byte	$82			; $a0 stx
>120d	a2					.byte	$a2			; $a1 ldx
>120e	c2					.byte	$c2			; $a2 dec
>120f	e2					.byte	$e2			; $a3 inc
>1210	60					.byte	$60			; $a4 stz
>1211	20					.byte	$20			; $a5 bit
>1212	80					.byte	$80			; $a6 sty
>1213	a0					.byte	$a0			; $a7 ldy
>1214	c0					.byte	$c0			; $a8 cpy
>1215	e0					.byte	$e0			; $a9 cpx
>1216	00					.byte	$00			; $aa tsb
>1217	10					.byte	$10			; $ab trb
>1218	14					.byte	$14			; $ac jsr
>1219	40					.byte	$40			; $ad jmp
>121a	10					.byte	$10			; $ae bpl
>121b	30					.byte	$30			; $af bmi
>121c	50					.byte	$50			; $b0 bvc
>121d	70					.byte	$70			; $b1 bvs
>121e	90					.byte	$90			; $b2 bcc
>121f	b0					.byte	$b0			; $b3 bcs
>1220	d0					.byte	$d0			; $b4 bne
>1221	f0					.byte	$f0			; $b5 beq
>1222	80					.byte	$80			; $b6 bra
>1223	00					.byte	$00			; $b7 brk
>1224	08					.byte	$08			; $b8 php
>1225	18					.byte	$18			; $b9 clc
>1226	28					.byte	$28			; $ba plp
>1227	38					.byte	$38			; $bb sec
>1228	40					.byte	$40			; $bc rti
>1229	48					.byte	$48			; $bd pha
>122a	58					.byte	$58			; $be cli
>122b	5a					.byte	$5a			; $bf phy
>122c	60					.byte	$60			; $c0 rts
>122d	68					.byte	$68			; $c1 pla
>122e	78					.byte	$78			; $c2 sei
>122f	7a					.byte	$7a			; $c3 ply
>1230	88					.byte	$88			; $c4 dey
>1231	8a					.byte	$8a			; $c5 txa
>1232	98					.byte	$98			; $c6 tya
>1233	9a					.byte	$9a			; $c7 txs
>1234	a8					.byte	$a8			; $c8 tay
>1235	aa					.byte	$aa			; $c9 tax
>1236	b8					.byte	$b8			; $ca clv
>1237	ba					.byte	$ba			; $cb tsx
>1238	c8					.byte	$c8			; $cc iny
>1239	ca					.byte	$ca			; $cd dex
>123a	d8					.byte	$d8			; $ce cld
>123b	da					.byte	$da			; $cf phx
>123c	e8					.byte	$e8			; $d0 inx
>123d	ea					.byte	$ea			; $d1 nop
>123e	f8					.byte	$f8			; $d2 sed
>123f	fa					.byte	$fa			; $d3 plx
.1240					Group2OpcodeAvailability:
>1240	ae					.byte	$ae			; $9c asl $02
>1241	ae					.byte	$ae			; $9d rol $22
>1242	ae					.byte	$ae			; $9e lsr $42
>1243	ae					.byte	$ae			; $9f ror $62
>1244	0a					.byte	$0a			; $a0 stx $82
>1245	0b					.byte	$0b			; $a1 ldx $a2
>1246	aa					.byte	$aa			; $a2 dec $c2
>1247	aa					.byte	$aa			; $a3 inc $e2
>1248	22					.byte	$22			; $a4 stz $60
>1249	aa					.byte	$aa			; $a5 bit $20
>124a	2a					.byte	$2a			; $a6 sty $80
>124b	ab					.byte	$ab			; $a7 ldy $a0
>124c	2b					.byte	$2b			; $a8 cpy $c0
>124d	0b					.byte	$0b			; $a9 cpx $e0
>124e	0a					.byte	$0a			; $aa tsb $00
>124f	0a					.byte	$0a			; $ab trb $10
>1250	08					.byte	$08			; $ac jsr $14
>1251	08					.byte	$08			; $ad jmp $40
.1252					AssemblerSpecialCases:
>1252	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>1255	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>1258	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>125b	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>125e	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1261	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>1264	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>1267	a5 00 89				.byte	$a5,0,$89		; bit #
>126a	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>126d	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1270	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1271					AssembleLabel:
.1271	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1273	c9 3a		cmp #$3a			cmp 	#$3A 						; e.g. it isn't just '.'
.1275	b0 49		bcs $12c0			bcs 	_ALSyntax
.1277	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.1279	a2 02		ldx #$02		ldx	#2
.127b	20 20 4f	jsr $4f20		jsr	variableHandler
.127e	a5 90		lda $90				lda 	esType 						; check integer reference
.1280	c9 80		cmp #$80			cmp 	#$80
.1282	d0 3c		bne $12c0			bne 	_ALSyntax
.1284	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.1286	85 2a		sta $2a				sta 	temp0
.1288	a5 a0		lda $a0				lda 	esInt1
.128a	85 2b		sta $2b				sta 	temp0+1
.128c	5a		phy				phy
.128d	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2 ?
.1290	4a		lsr a				lsr 	a
.1291	90 11		bcc $12a4			bcc 	_ALWrite
.1293	a0 00		ldy #$00			ldy 	#0
.1295	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.1298	d1 2a		cmp ($2a),y			cmp 	(temp0),y 					; labels cannot change value, usually means address mode has changed.
.129a	d0 1f		bne $12bb			bne 	_ALChanged
.129c	c8		iny				iny
.129d	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a2	d0 17		bne $12bb			bne 	_ALChanged
.12a4					_ALWrite:
.12a4	a0 00		ldy #$00			ldy 	#0
.12a6	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12a9	91 2a		sta ($2a),y			sta 	(temp0),y
.12ab	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12ae	c8		iny				iny
.12af	91 2a		sta ($2a),y			sta 	(temp0),y
.12b1	a9 00		lda #$00			lda 	#0
.12b3	c8		iny				iny
.12b4	91 2a		sta ($2a),y			sta 	(temp0),y
.12b6	c8		iny				iny
.12b7	91 2a		sta ($2a),y			sta 	(temp0),y
.12b9	7a		ply				ply
.12ba	60		rts				rts
.12bb					_ALChanged:
.12bb	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12bd	20 27 15	jsr $1527		jsr	errorHandler
.12c0					_ALSyntax:
.12c0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12c2	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12c5					AssembleGroup1:
.12c5	ad f5 0a	lda $0af5			lda 	asmToken 					; firstly, we throw out STA immediate
.12c8	c9 98		cmp #$98			cmp 	#TKW_STA
.12ca	d0 07		bne $12d3			bne 	_AG1NotStoreImm
.12cc	ad f6 0a	lda $0af6			lda 	asmMode
.12cf	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d1	f0 2c		beq $12ff			beq 	AG1ModeError
.12d3					_AG1NotStoreImm:
.12d3	ae f6 0a	ldx $0af6			ldx 	asmMode						; get mode into X.
.12d6	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12d9	48		pha				pha
.12da	f0 23		beq $12ff			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12dc	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12de	d0 02		bne $12e2			bne 	_AG1NotImmediate
.12e0	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12e2					_AG1NotImmediate:
.12e2	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12e4	d0 02		bne $12e8			bne 	_AG1NotZX
.12e6	a2 00		ldx #$00			ldx 	#0
.12e8					_AG1NotZX:
.12e8	68		pla				pla 								; restore length
.12e9	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12eb	b0 10		bcs $12fd			bcs 	AG1Fail
.12ed					AG1ReturnValue:
.12ed	85 32		sta $32				sta 	tempShort 					; save size of operand
.12ef	18		clc				clc
.12f0	bd 12 13	lda $1312,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12f3	6d f7 0a	adc $0af7			adc 	asmBaseOpcode 				; add the base opcode.
.12f6	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12f8	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.12fb	38		sec				sec
.12fc	60		rts				rts
.12fd					AG1Fail:
.12fd	18		clc				clc
.12fe	60		rts				rts
.12ff					AG1ModeError:
.12ff	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1301	20 27 15	jsr $1527		jsr	errorHandler
.1304					AMDOperandSize:
>1304	01 01 00 02					.byte 	1,1,0,2
>1308	01 01 02 02					.byte 	1,1,2,2
>130c	01 01 02 02					.byte 	1,1,2,2
>1310	01 01						.byte 	1,1
.1312					AMDOffsetFromBase:
>1312	00 04 08 0c					.byte 	0,4,8,12
>1316	10 14 18 1c					.byte	16,20,24,28
>131a	11 00 00 00					.byte 	17,0,0,0
>131e	00 00						.byte 	0,0
.1320					AssembleGroup2:
.1320	ad f6 0a	lda $0af6			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.1323	c9 08		cmp #$08			cmp 	#8
.1325	b0 18		bcs $133f			bcs 	_AG2Fail
.1327	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1329	ae f5 0a	ldx $0af5			ldx 	asmToken					; get token in X, then get the availability flags for it
.132c	bd a4 11	lda $11a4,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.132f					_AG2Shift:
.132f	4a		lsr a				lsr 	a
.1330	c6 2a		dec $2a				dec 	temp0
.1332	10 fb		bpl $132f			bpl 	_AG2Shift
.1334	90 09		bcc $133f			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.1336	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.1339	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.133c	4c ed 12	jmp $12ed			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.133f					_AG2Fail:
.133f	18		clc				clc
.1340	60		rts				rts
.1341					AssembleGroup3:
.1341	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.1344	4a		lsr a				lsr 	a
.1345	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.1347	90 21		bcc $136a			bcc 	_AG3Default
.1349	38		sec				sec	 								; calculate branch offset
.134a	a5 98		lda $98				lda		esInt0
.134c	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.134f	aa		tax				tax
.1350	a5 a0		lda $a0				lda		esInt1
.1352	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.1355	85 a0		sta $a0				sta 	esInt1
.1357	8a		txa				txa 								; add 126, now 128 too many.
.1358	18		clc				clc 								; we can use this to check the range
.1359	69 7e		adc #$7e			adc 	#126
.135b	85 98		sta $98				sta 	esInt0
.135d	90 02		bcc $1361			bcc 	_AG3NoCarry
.135f	e6 a0		inc $a0				inc 	esInt1
.1361					_AG3NoCarry:
.1361	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.1363	d0 0b		bne $1370			bne 	_AG3Range
.1365	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.1367	38		sec				sec
.1368	e9 80		sbc #$80			sbc 	#128
.136a					_AG3Default:
.136a	85 98		sta $98				sta 	esInt0
.136c					_AG3ExitOk:
.136c	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.136e	d0 07		bne $1377			bne 	AG4Write
.1370					_AG3Range:
.1370	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.1372	20 27 15	jsr $1527		jsr	errorHandler
.1375					AssembleGroup4:
.1375	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1377					AG4Write:
.1377	ad f7 0a	lda $0af7			lda 	asmBaseOpcode				; the opcode is the opcode base.
.137a	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.137d	38		sec				sec
.137e	60		rts				rts
.137f					AssembleSpecialCase:
.137f	a2 00		ldx #$00			ldx 	#0
.1381					_ASCScan:
.1381	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.1384	cd f5 0a	cmp $0af5			cmp 	asmToken
.1387	d0 08		bne $1391			bne 	_ASCNext
.1389	bd 53 12	lda $1253,x			lda 	AssemblerSpecialCases+1,x
.138c	cd f6 0a	cmp $0af6			cmp 	asmMode
.138f	f0 0a		beq $139b			beq 	_ASCFound
.1391					_ASCNext:
.1391	e8		inx				inx									; next entry
.1392	e8		inx				inx
.1393	e8		inx				inx
.1394	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; until table ends
.1397	d0 e8		bne $1381			bne 	_ASCScan
.1399	18		clc				clc
.139a	60		rts				rts
.139b					_ASCFound:
.139b	bd 54 12	lda $1254,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.139e	48		pha				pha
.139f	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.13a2	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13a5	aa		tax				tax
.13a6	68		pla				pla 								; opcode back
.13a7	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13aa	38		sec				sec
.13ab	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13ac					assemblerHandler:
.13ac	7c af 13	jmp ($13af,x)			jmp 	(assemblerVectors,x)
.13af					assemblerVectors:
>13af	b5 13					.word _DummyControlHandler ; index 0
>13b1	9f 11					.word AssembleOneInstruction ; index 2
>13b3	71 12					.word AssembleLabel        ; index 4
.13b5					_DummyControlHandler:
.13b5	60		rts			rts

;******  Return to file: basic.asm

.13b6					section_end_assembler:
.13b6					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13b6					X16SyncBreak:
.13b6	5a		phy				phy
.13b7	20 de ff	jsr $ffde			jsr 	KNLReadTimer
.13ba	ac e8 0b	ldy $0be8			ldy 	nextSyncTick 				; if NST = 0 then always sync
.13bd	a8		tay				tay 								; save tick in Y
.13be	38		sec				sec
.13bf	ed e8 0b	sbc $0be8			sbc 	nextSyncTick 				; calculate timer - next tick
.13c2	30 0c		bmi $13d0			bmi 	_X16NoSync 					; if -ve then no sync.
.13c4					_X16Sync:
.13c4	98		tya				tya 								; get current time back
.13c5	18		clc				clc 								; work out time of next tick.
.13c6	69 06		adc #$06			adc 	#6 							; at 60Hz that is six ticks.
.13c8	8d e8 0b	sta $0be8			sta 	nextSyncTick
.13cb	a9 fd		lda #$fd			lda 	#$FD 						; call the extension update code.
.13cd	20 74 18	jsr $1874		jsr	extensionHandler
.13d0					_X16NoSync:
.13d0	7a		ply				ply
.13d1	20 e1 ff	jsr $ffe1			jsr 	KNLCheckBreak
.13d4	f0 01		beq $13d7			beq 	_IsBreak
.13d6	60		rts				rts
.13d7					_IsBreak:
.13d7	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13d9	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13dc					ExternSave:
.13dc	5a		phy				phy
.13dd	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.13e0	20 bd ff	jsr $ffbd			jsr 	KNLFileSetName 				; set name
.13e3	a9 01		lda #$01			lda 	#1
.13e5	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13e7	a0 00		ldy #$00			ldy 	#0
.13e9	20 ba ff	jsr $ffba			jsr 	KNLFileSetLFS 				; set LFS
.13ec	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13ee	85 2a		sta $2a				sta 	temp0
.13f0	a5 a1		lda $a1				lda 	esInt1+1
.13f2	85 2b		sta $2b				sta 	temp0+1
.13f4	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13f6	a4 a2		ldy $a2				ldy 	esInt1+2
.13f8	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13fa	20 d8 ff	jsr $ffd8			jsr 	KNLFileSave 				; save
.13fd	b0 02		bcs $1401			bcs 	_ESSave
.13ff	7a		ply				ply
.1400	60		rts				rts
.1401					_ESSave:
.1401	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.1403	20 27 15	jsr $1527		jsr	errorHandler
.1406					ExternLoad:
.1406	5a		phy				phy
.1407	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.140a	20 bd ff	jsr $ffbd			jsr 	KNLFileSetName 				; set name
.140d	a9 01		lda #$01			lda 	#1
.140f	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1411	a0 00		ldy #$00			ldy 	#0
.1413	20 ba ff	jsr $ffba			jsr 	KNLFileSetLFS 				; set LFS
.1416	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1418	a4 a1		ldy $a1				ldy 	esInt1+1
.141a	a9 00		lda #$00			lda 	#0 							; load command
.141c	20 d5 ff	jsr $ffd5			jsr 	KNLFileLoad
.141f	b0 02		bcs $1423			bcs 	_ESLoad
.1421	7a		ply				ply
.1422	60		rts				rts
.1423					_ESLoad:
.1423	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1425	20 27 15	jsr $1527		jsr	errorHandler
.1428					ExternGetLength:
.1428	a5 98		lda $98				lda 	esInt0 						; length into A.
.142a	85 2a		sta $2a				sta 	temp0
.142c	a5 a0		lda $a0				lda 	esInt1
.142e	85 2b		sta $2b				sta 	temp0+1
.1430	a0 00		ldy #$00			ldy 	#0
.1432	b1 2a		lda ($2a),y			lda 	(temp0),y
.1434	a6 98		ldx $98				ldx 	esInt0 						; name string address into YX
.1436	a4 a0		ldy $a0				ldy 	esInt1
.1438	e8		inx				inx 								; advance over the length byte.
.1439	d0 01		bne $143c			bne 	_ESNoCarry
.143b	c8		iny				iny
.143c					_ESNoCarry:
.143c	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af8					bufferCount:
>0af8							.fill 	0
.0af8					bufferStorage:
>0af8							.fill 	MaxLineInputSize
.0be8					nextSyncTick:
>0be8							.fill 	0
.143d					IOControlHandler:
.143d	c9 00		cmp #$00			cmp 	#0
.143f	d0 15		bne $1456			bne		_CHExit
.1441	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1443	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1446	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1448	20 99 14	jsr $1499			jsr 	IOInk
.144b	a9 00		lda #$00			lda 	#0
.144d	8d e8 0b	sta $0be8			sta 	nextSyncTick
.1450	20 ad 14	jsr $14ad			jsr 	IOPaper
.1453	20 57 14	jsr $1457			jsr 	IOClearScreen
.1456					_CHExit:
.1456	60		rts				rts
.1457					IOClearScreen:
.1457	48		pha				pha
.1458	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.145a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.145d	68		pla				pla
.145e	60		rts				rts
.145f					IONewLine:
.145f	48		pha				pha
.1460	a9 0d		lda #$0d			lda 	#13
.1462	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1465	68		pla				pla
.1466	60		rts				rts
.1467					IOTab:
.1467	48		pha				pha
.1468	a9 20		lda #$20			lda 	#32
.146a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.146d	68		pla				pla
.146e	60		rts				rts
.146f					IOPrintAscii:
.146f					IOPrintChar:
.146f	aa		tax				tax 								; save in X so we can save Y
.1470	5a		phy				phy
.1471	8a		txa				txa
.1472	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1474	d0 02		bne $1478			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1476	a9 14		lda #$14			lda 	#$14
.1478					_IOPCNotBS:
.1478	20 d2 ff	jsr $ffd2			jsr 	KNLPrintChar 				; CBM OS Call.
.147b	7a		ply				ply
.147c	60		rts				rts
.147d					IOInkey:
.147d	5a		phy				phy
.147e	20 e4 ff	jsr $ffe4			jsr 	KNLCheckKeyboarBuffer
.1481	85 32		sta $32				sta 	tempShort
.1483	7a		ply				ply
.1484	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1486	f0 10		beq $1498			beq 	_IOIExit
.1488	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.148a	f0 0c		beq $1498			beq 	_IOIExit
.148c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.148e	f0 06		beq $1496			beq 	_IOIBackspace
.1490	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1492	90 e9		bcc $147d			bcc 	IOInkey
.1494	b0 02		bcs $1498			bcs 	_IOIExit
.1496					_IOIBackspace:
.1496	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1498					_IOIExit:
.1498	60		rts				rts
.1499					IOInk:
.1499	48		pha				pha
.149a	29 07		and #$07			and 	#7 							; 8 primaries
.149c	aa		tax				tax
.149d	bd a5 14	lda $14a5,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.14a0	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14a3	68		pla				pla
.14a4	60		rts				rts
.14a5					_IOColourTable:
>14a5	90						.byte 	$90 					; 0 Black
>14a6	96						.byte 	$96 					; 1 Red
>14a7	1e						.byte 	$1E 					; 2 Green
>14a8	9e						.byte 	$9E 					; 3 Yellow
>14a9	9a						.byte 	$9A 					; 4 Blue
>14aa	9c						.byte 	$9C 					; 5 Magenta
>14ab	9f						.byte 	$9F 					; 6 Cyan
>14ac	05						.byte 	$05 					; 7 White
.14ad					IOPaper:
.14ad	48		pha				pha
.14ae	48		pha				pha
.14af	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14b1	20 6f 14	jsr $146f			jsr 	IOPrintChar 			; and then swap them again.
.14b4	68		pla				pla
.14b5	20 99 14	jsr $1499			jsr 	IOInk
.14b8	a9 01		lda #$01			lda 	#1
.14ba	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14bd	68		pla				pla
.14be	60		rts				rts
.14bf					IOLocate:
.14bf	48		pha				pha
.14c0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14c2	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14c5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14c7	20 cd 14	jsr $14cd			jsr 	_IOLoc2
.14ca	7a		ply				ply
.14cb	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14cd					_IOLoc2:
.14cd	c0 00		cpy #$00			cpy 	#0
.14cf	f0 06		beq $14d7			beq 	_IOLocExit
.14d1	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14d4	88		dey				dey
.14d5	d0 f6		bne $14cd			bne 	_IOLoc2
.14d7					_IOLocExit:
.14d7	60		rts				rts
.14d8					IOInput:
.14d8	a9 00		lda #$00			lda 	#0
.14da	8d f8 0a	sta $0af8			sta 	bufferCount
.14dd					_IOILoop:
.14dd	20 cf ff	jsr $ffcf			jsr 	KNLInputLine
.14e0	c9 0d		cmp #$0d			cmp 	#13
.14e2	f0 10		beq $14f4			beq 	_IOIExit
.14e4	ae f8 0a	ldx $0af8			ldx 	bufferCount
.14e7	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14e9	f0 f2		beq $14dd			beq 	_IOILoop
.14eb	ee f8 0a	inc $0af8			inc 	bufferCount
.14ee	9d f9 0a	sta $0af9,x			sta 	bufferStorage+1,x
.14f1	4c dd 14	jmp $14dd			jmp 	_IOILoop
.14f4					_IOIExit:
.14f4	a9 f8		lda #$f8			lda 	#(bufferCount) & $FF
.14f6	85 2a		sta $2a				sta 	temp0
.14f8	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14fa	85 2b		sta $2b				sta 	1+(temp0)
.14fc	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14fd					IOReadTimer:
.14fd	20 de ff	jsr $ffde			jsr 	KNLReadTimer 				; reads timer into YXA so we want only YA
.1500	48		pha				pha
.1501	8a		txa				txa
.1502	a8		tay				tay
.1503	68		pla				pla
.1504	60		rts				rts

;******  Return to file: device/device.asm

.1505					deviceHandler:
.1505	7c 08 15	jmp ($1508,x)			jmp 	(deviceVectors,x)
.1508					deviceVectors:
>1508	3d 14					.word IOControlHandler     ; index 0
>150a	57 14					.word IOClearScreen        ; index 2
>150c	5f 14					.word IONewLine            ; index 4
>150e	99 14					.word IOInk                ; index 6
>1510	7d 14					.word IOInkey              ; index 8
>1512	d8 14					.word IOInput              ; index 10
>1514	06 14					.word ExternLoad           ; index 12
>1516	bf 14					.word IOLocate             ; index 14
>1518	ad 14					.word IOPaper              ; index 16
>151a	6f 14					.word IOPrintChar          ; index 18
>151c	6f 14					.word IOPrintAscii         ; index 20
>151e	dc 13					.word ExternSave           ; index 22
>1520	b6 13					.word X16SyncBreak         ; index 24
>1522	67 14					.word IOTab                ; index 26
>1524	fd 14					.word IOReadTimer          ; index 28
.1526					_DummyControlHandler:
.1526	60		rts			rts

;******  Return to file: basic.asm

.1527					section_end_device:
.1527					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1527					ErrorHandler:
.1527	da		phx				phx
.1528	a9 01		lda #$01			lda 	#1 							; red
.152a	a2 06		ldx #$06		ldx	#6
.152c	20 05 15	jsr $1505		jsr	deviceHandler
.152f	fa		plx				plx
.1530	a9 9b		lda #$9b			lda 	#(ErrorTextList) & $FF
.1532	85 2a		sta $2a				sta 	temp0
.1534	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1536	85 2b		sta $2b				sta 	1+(temp0)
.1538	ca		dex		_EHFind:dex									; errors start at 1
.1539	f0 10		beq $154b			beq 	_EHFound
.153b	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.153d	38		sec				sec
.153e	a5 2a		lda $2a				lda 	temp0
.1540	71 2a		adc ($2a),y			adc 	(temp0),y
.1542	85 2a		sta $2a				sta 	temp0
.1544	90 f2		bcc $1538			bcc 	_EHFind
.1546	e6 2b		inc $2b				inc 	temp0+1
.1548	4c 38 15	jmp $1538			jmp 	_EHFind
.154b					_EHFound:
.154b	20 5f 18	jsr $185f			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.154e	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1550	b1 28		lda ($28),y			lda 	(codePtr),y
.1552	f0 39		beq $158d			beq 	_EHNoLine
.1554	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1556	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1559	90 32		bcc $158d			bcc 	_EHNoLine
.155b	a9 97		lda #$97			lda 	#(EHAtMsg) & $FF
.155d	85 2a		sta $2a				sta 	temp0
.155f	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1561	85 2b		sta $2b				sta 	1+(temp0)
.1563	20 5f 18	jsr $185f			jsr 	EHPrintAscii
.1566	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1568	a2 00		ldx #$00			ldx 	#0
.156a	b1 28		lda ($28),y			lda 	(codePtr),y
.156c	95 98		sta $98,x			sta 	esInt0,x
.156e	c8		iny				iny
.156f	b1 28		lda ($28),y			lda 	(codePtr),y
.1571	95 a0		sta $a0,x			sta 	esInt1,x
.1573	a9 00		lda #$00			lda 	#0
.1575	95 a8		sta $a8,x			sta 	esInt2,x
.1577	95 b0		sta $b0,x			sta 	esInt3,x
.1579	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.157b	85 2a		sta $2a				sta 	temp0
.157d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.157f	85 2b		sta $2b				sta 	1+(temp0)
.1581	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1583	a9 00		lda #$00			lda 	#0							; stack position zero.
.1585	a2 12		ldx #$12		ldx	#18
.1587	20 29 40	jsr $4029		jsr	mainHandler
.158a	20 5f 18	jsr $185f			jsr 	EHPrintAscii
.158d					_EHNoLine:
.158d	a2 04		ldx #$04		ldx	#4
.158f	20 05 15	jsr $1505		jsr	deviceHandler
.1592	a2 04		ldx #$04		ldx	#4
.1594	20 c6 29	jsr $29c6		jsr	interactionHandler
.1597					EHAtMsg:
>1597	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.159b					ErrorTextList:
>159b	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>15a3	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15af	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15b7	45 72 72 6f 72
>15bc	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15c4	64 69 73 61 62 6c 65 64
>15cc	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15d4	6f 6e 20 66 61 69 6c 65 64
>15dd	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15e5	42 79 20 5a 65 72 6f
>15ec	04 53 74 6f 70				.text 4,"Stop"
>15f1	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15f9	73 6d 61 74 63 68
>15ff	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1607	20 56 61 6c 75 65
>160d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1615	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1623	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>162b	20 63 6f 6d 6d 61
>1631	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1639	20 72 65 66 65 72 65 6e 63 65
>1643	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>164b	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1659	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1661	74 6f 6f 20 6c 6f 6e 67
>1669	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1671	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>167e	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1686	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1693	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>169b	74 68 6f 75 74 20 46 4f 52
>16a4	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>16ac	74 68 6f 75 74 20 57 48 49 4c 45
>16b7	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16bf	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16cc	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16d4	54 20 69 6e 64 65 78
>16db	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16e3	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16f3	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16fb	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>170a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1712	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1722	63 65
>1724	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>172c	20 50 72 6f 63 65 64 75 72 65
>1736	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>173e	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>174e	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1756	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1764	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>176c	75 69 72 65 73 20 61 72 72 61 79
>1777	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>177f	61 79 20 69 6e 64 65 78
>1787	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>178f	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>179f	6e 64 69 63 65 73
>17a5	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17ad	64 61 74 61
>17b1	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17b9	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17c6	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17ce	69 6c 65 64
>17d2	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17da	69 6c 65 64
>17de	05 42 72 65 61 6b			.text 5,"Break"
>17e4	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17ec	6d 65 6d 6f 72 79
>17f2	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17fa	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>1809	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1811	72 61 6e 64 2f 4d 6f 64 65
>181a	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1822	6f 75 74 20 6f 66 20 72 61 6e 67 65
>182e	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1836	68 61 6e 67 65 64 20 76 61 6c 75 65
>1842	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>184a	74 65 20 53 65 6c 65 63 74 65 64
>1855	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>185d	65
>185e	00					.byte 0

;******  Return to file: error/errorhandler.asm

.185f					EHPrintAscii:
.185f	a0 00		ldy #$00			ldy 	#0
.1861	b1 2a		lda ($2a),y			lda 	(temp0),y
.1863	aa		tax				tax
.1864	f0 0d		beq $1873			beq 	_EHPExit
.1866					_EHPLoop:
.1866	c8		iny				iny
.1867	da		phx				phx
.1868	b1 2a		lda ($2a),y			lda 	(temp0),y
.186a	a2 14		ldx #$14		ldx	#20
.186c	20 05 15	jsr $1505		jsr	deviceHandler
.186f	fa		plx				plx
.1870	ca		dex				dex
.1871	d0 f3		bne $1866			bne 	_EHPLoop
.1873					_EHPExit:
.1873	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1874					section_end_error:
.1874					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1874					ExtensionHandler:
.1874	c9 fd		cmp #$fd			cmp 	#$FD 						; check for sync
.1876	f0 21		beq $1899			beq 	_ExtensionSync
.1878	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.187a	f0 16		beq $1892			beq 	_ExtensionForce
.187c	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.187e	d0 08		bne $1888			bne 	_ExtensionUnary 			; is passed in A.
.1880	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1882	c8		iny				iny
.1883	0a		asl a				asl 	a
.1884	aa		tax				tax
.1885	7c 90 18	jmp ($1890,x)			jmp 	(Group2Vectors-12,x)
.1888					_ExtensionUnary:
.1888	48		pha				pha 								; save stack pos in A
.1889	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.188b	c8		iny				iny
.188c	0a		asl a				asl 	a
.188d	aa		tax				tax
.188e	68		pla				pla 								; restore stack pos and call group3 command.
.188f	7c ac 18	jmp ($18ac,x)			jmp 	(Group3Vectors-12,x)
.1892					_ExtensionForce:
.1892	20 e0 1f	jsr $1fe0			jsr 	SoundReset 					; all sound off as not updated
.1895	20 9b 24	jsr $249b			jsr 	ForceMode0 					; switch to mode 0 perhaps
.1898	60		rts				rts
.1899					_ExtensionSync:
.1899	4c ca 20	jmp $20ca			jmp 	SoundInterrupt

;******  Processing file: extension/../generated/tokenvectors2.inc

.189c					Group2Vectors:
>189c	78 26					.word	Command_VPoke            ; $86 vpoke
>189e	7b 26					.word	Command_VDoke            ; $87 vdoke
>18a0	50 26					.word	Command_VLoad            ; $88 vload
>18a2	ad 24					.word	CommandMode              ; $89 mode
>18a4	6c 25					.word	CommandPalette           ; $8a palette
>18a6	b3 21					.word	CommandSprite            ; $8b sprite
>18a8	ee 1d					.word	CommandClg               ; $8c clg
>18aa	f0 1a					.word	Command_Rect             ; $8d rect
>18ac	f8 1a					.word	Command_Frame            ; $8e frame
>18ae	a3 25					.word	Command_Draw             ; $8f draw
>18b0	dd 1a					.word	Command_Plot             ; $90 plot
>18b2	b7 19					.word	Command_Line             ; $91 line
>18b4	fe 22					.word	Command_Paint            ; $92 paint
>18b6	0f 20					.word	CommandSound             ; $93 sound

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18b8					Group3Vectors:
>18b8	c4 26					.word	Command_VPeek            ; $86 vpeek(
>18ba	c7 26					.word	Command_VDeek            ; $87 vdeek(
>18bc	46 24					.word	Sprite_GetX              ; $88 sprite.x(
>18be	49 24					.word	Sprite_GetY              ; $89 sprite.y(
>18c0	fb 20					.word	FunctionCollide          ; $8a hit(
>18c2	8d 1e					.word	Unary_JoyX               ; $8b joy.x(
>18c4	90 1e					.word	Unary_JoyY               ; $8c joy.y(
>18c6	c9 1e					.word	Unary_JButton            ; $8d joy.b(
>18c8	62 1e					.word	Unary_Clock              ; $8e clock(
>18ca	8f 1f					.word	Unary_Playing            ; $8f playing(

;******  Return to file: extension/extensionhandler.asm

.18cc					XEvaluateInteger:
.18cc	8a		txa				txa
.18cd	a2 0a		ldx #$0a		ldx	#10
.18cf	20 29 40	jsr $4029		jsr	mainHandler
.18d2	aa		tax				tax
.18d3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be8					gStartStorage:
.0be8					gCurrentXPos:
>0be8							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0bea					gCurrentYPos:
>0bea							.fill 	2
.0bec					gX1:
>0bec							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bee					gY1:
>0bee							.fill 	2
.0bf0					gX2:
>0bf0							.fill 	2
.0bf2					gY2:
>0bf2							.fill 	2
.0bf4					gError:
>0bf4							.fill 	2
.0bf6					g2Error:
>0bf6							.fill 	2
.0bf8					gdx:
>0bf8							.fill 	2
.0bfa					gdy:
>0bfa							.fill 	2
.0bfc					gWordHandler:
>0bfc							.fill 	2
.0bfe					gModifiers:
.0bfe					gdInk:
>0bfe							.fill 	1
.0bff					gdPaper:
>0bff							.fill 	1
.0c00					gdSize:
>0c00							.fill 	1
.0c01					gdImage:
>0c01							.fill 	1
.0c02					gdFlip:
>0c02							.fill 	1
.0c03					gEndStorage:
.0c03					gdXLimit:
>0c03							.fill 	2
.0c05					gdYLimit:
>0c05							.fill 	2
.0c07					gdText:
>0c07							.fill 	2
.18d4					GResetStorage:
.18d4	da		phx				phx
.18d5	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18d7	a9 00		lda #$00			lda 	#0
.18d9					_GRSLoop:
.18d9	9d e8 0b	sta $0be8,x			sta 	gStartStorage,x
.18dc	ca		dex				dex
.18dd	10 fa		bpl $18d9			bpl 	_GRSLoop
.18df	a9 01		lda #$01			lda 	#1 	 						; ink and size both 1, sensible defaults.
.18e1	8d fe 0b	sta $0bfe			sta 	gdInk
.18e4	8d 00 0c	sta $0c00			sta 	gdSize
.18e7	fa		plx				plx
.18e8	60		rts				rts
.18e9					GHandler:
.18e9	8e fd 0b	stx $0bfd			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18ec	8d fc 0b	sta $0bfc			sta 	gWordHandler
.18ef	a9 00		lda #$00			lda 	#0							; default no text.
.18f1	8d 08 0c	sta $0c08			sta 	gdText+1
.18f4	88		dey				dey 								; predecrement
.18f5					_GHLoopNext:
.18f5	c8		iny				iny									; advance one character
.18f6					_GHLoop:
.18f6	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18f8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18fa	f0 f9		beq $18f5			beq 	_GHLoopNext
.18fc	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18fe	f0 4c		beq $194c			beq 	_GHExit
.1900	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1902	f0 48		beq $194c			beq 	_GHExit
.1904	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.1906	f0 35		beq $193d			beq 	_GHCallHandler 				; update post & call the handler
.1908	c9 ce		cmp #$ce			cmp 	#TKW_TO
.190a	f0 31		beq $193d			beq 	_GHCallHandler
.190c	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.190e	f0 14		beq $1924			beq 	_GHCPairSkip
.1910	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.1912	f0 39		beq $194d			beq 	_GHText
.1914	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.1916					_GHCheckTokens:
.1916	b1 28		lda ($28),y			lda 	(codePtr),y
.1918	dd 62 19	cmp $1962,x			cmp 	_GHTokenTable,x
.191b	f0 0e		beq $192b			beq 	_GHFoundToken
.191d	e8		inx				inx
.191e	bd 62 19	lda $1962,x			lda 	_GHTokenTable,x
.1921	d0 f3		bne $1916			bne 	_GHCheckTokens
.1923	88		dey				dey
.1924					_GHCPairSkip:
.1924	c8		iny				iny
.1925					_GHCPair:
.1925	20 68 19	jsr $1968			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1928	4c f6 18	jmp $18f6			jmp 	_GHLoop
.192b					_GHFoundToken:
.192b	c8		iny				iny 								; skip token (INK/PAPER etc.)
.192c	da		phx				phx
.192d	a9 00		lda #$00			lda 	#0 							; evaluate byte
.192f	a2 0c		ldx #$0c		ldx	#12
.1931	20 29 40	jsr $4029		jsr	mainHandler
.1934	fa		plx				plx
.1935	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1937	9d fe 0b	sta $0bfe,x			sta 	gModifiers,x 				; update the modifiers
.193a	4c f6 18	jmp $18f6			jmp 	_GHLoop 					; and loop back
.193d					_GHCallHandler:
.193d	c8		iny				iny 								; consume AT or TO.
.193e	20 68 19	jsr $1968			jsr 	GHMakeCurrent 				; update the coordinates.
.1941	5a		phy				phy
.1942	20 49 19	jsr $1949			jsr 	_GHCallHandlerCode 			; call the handler code
.1945	7a		ply				ply
.1946	4c f6 18	jmp $18f6			jmp 	_GHLoop 					; and loop round.
.1949					_GHCallHandlerCode:
.1949	6c fc 0b	jmp ($0bfc)			jmp 	(gWordHandler)
.194c					_GHExit:
.194c	60		rts				rts
.194d					_GHText:
.194d	c8		iny				iny 								; skip token
.194e	a9 00		lda #$00			lda 	#0 							; get string.
.1950	a2 0e		ldx #$0e		ldx	#14
.1952	20 29 40	jsr $4029		jsr	mainHandler
.1955	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.1957	8d 07 0c	sta $0c07			sta 	gdText
.195a	a5 a0		lda $a0				lda 	esInt1
.195c	8d 08 0c	sta $0c08			sta 	gdText+1
.195f	4c f6 18	jmp $18f6			jmp 	_GHLoop
.1962					_GHTokenTable:
>1962	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1967	00						.byte 	0
.1968					GHMakeCurrent:
.1968	da		phx				phx
.1969	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.196b	20 7a 19	jsr $197a			jsr 	_GHMCDoIt
.196e	a2 02		ldx #$02		ldx	#2
.1970	20 29 40	jsr $4029		jsr	mainHandler
.1973	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1975	20 7a 19	jsr $197a			jsr 	_GHMCDoIt
.1978	fa		plx				plx
.1979	60		rts				rts
.197a					_GHMCDoIt:
.197a	bd e8 0b	lda $0be8,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.197d	9d ec 0b	sta $0bec,x			sta 	gX1,x
.1980	bd e9 0b	lda $0be9,x			lda 	gCurrentXPos+1,x
.1983	9d ed 0b	sta $0bed,x			sta 	gX1+1,x
.1986	da		phx				phx
.1987	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1989	a2 0a		ldx #$0a		ldx	#10
.198b	20 29 40	jsr $4029		jsr	mainHandler
.198e	fa		plx				plx
.198f	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1991	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1994	a5 a0		lda $a0				lda 	esInt1
.1996	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1999	b0 17		bcs $19b2			bcs 	_GMHCRange
.199b	a5 a8		lda $a8				lda 	esInt2
.199d	05 b0		ora $b0				ora 	esInt3
.199f	d0 11		bne $19b2			bne 	_GMHCRange
.19a1	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.19a3	9d e8 0b	sta $0be8,x			sta 	gCurrentXPos,x
.19a6	9d f0 0b	sta $0bf0,x			sta 	gX2,x
.19a9	a5 a0		lda $a0				lda 	esInt1
.19ab	9d e9 0b	sta $0be9,x			sta 	gCurrentXPos+1,x
.19ae	9d f1 0b	sta $0bf1,x			sta 	gX2+1,x
.19b1	60		rts				rts
.19b2					_GMHCRange:
.19b2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19b4	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c09					gdySign:
>0c09							.fill 	1
.19b7					Command_Line:
.19b7	a9 bf		lda #$bf			lda 	#LineHandler & $FF
.19b9	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.19bb	20 e9 18	jsr $18e9			jsr 	GHandler
.19be	60		rts				rts
.19bf					LineHandler:
.19bf	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19c1	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c3	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.19c6	f0 09		beq $19d1			beq 	_LHRectCode
.19c8	a2 02		ldx #$02			ldx 	#gY1-gX1
.19ca	a0 06		ldy #$06			ldy 	#gY2-gX1
.19cc	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.19cf	d0 03		bne $19d4			bne 	_LHLineDrawer
.19d1					_LHRectCode:
.19d1	4c 04 1b	jmp $1b04			jmp 	RectHandler
.19d4					_LHLineDrawer:
.19d4	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19d6	a0 04		ldy #$04			ldy 	#gX2-gX1
.19d8	20 88 1c	jsr $1c88			jsr 	CompareCoords
.19db	90 0a		bcc $19e7			bcc 	_LHNoSwap
.19dd	20 d0 1c	jsr $1cd0			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19e0	a2 02		ldx #$02			ldx 	#gY1-gX1
.19e2	a0 06		ldy #$06			ldy 	#gY2-gX1
.19e4	20 d0 1c	jsr $1cd0			jsr 	GSwapCoords
.19e7					_LHNoSwap:
.19e7	20 10 1a	jsr $1a10			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19ea	a0 00		ldy #$00			ldy 	#gX1-gX1
.19ec	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19ef	b0 15		bcs $1a06			bcs 	_LHExit 					; line off screen.
.19f1					_LHDrawLoop:
.19f1	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19f3	a0 04		ldy #$04			ldy 	#gX2-gX1
.19f5	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.19f8	d0 0d		bne $1a07			bne 	_LHNextPixel
.19fa	a2 06		ldx #$06			ldx 	#gY2-gX1
.19fc	a0 06		ldy #$06			ldy 	#gY2-gX1
.19fe	20 9d 1c	jsr $1c9d			jsr 	CompareCoordsEq
.1a01	d0 04		bne $1a07			bne 	_LHNextPixel
.1a03	20 4a 1d	jsr $1d4a			jsr 	gdPlotInk 					; plot the last pixel.
.1a06					_LHExit:
.1a06	60		rts				rts
.1a07					_LHNextPixel:
.1a07	20 4a 1d	jsr $1d4a			jsr 	gdPlotInk 					; plot the pixel.
.1a0a	20 64 1a	jsr $1a64			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.1a0d	4c f1 19	jmp $19f1			jmp  	_LHDrawLoop 				; and loop back if okay
.1a10					BresenhamInitialise:
.1a10	38		sec				sec
.1a11	ad f0 0b	lda $0bf0			lda 	gX2
.1a14	ed ec 0b	sbc $0bec			sbc 	gX1
.1a17	8d f8 0b	sta $0bf8			sta 	gdX
.1a1a	ad f1 0b	lda $0bf1			lda 	gX2+1
.1a1d	ed ed 0b	sbc $0bed			sbc 	gX1+1
.1a20	8d f9 0b	sta $0bf9			sta 	gdX+1
.1a23	38		sec				sec
.1a24	ad ee 0b	lda $0bee			lda 	gY1
.1a27	ed f2 0b	sbc $0bf2			sbc 	gY2
.1a2a	8d fa 0b	sta $0bfa			sta 	gdy
.1a2d	ad ef 0b	lda $0bef			lda 	gY1+1
.1a30	ed f3 0b	sbc $0bf3			sbc 	gY2+1
.1a33	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a36	ad fb 0b	lda $0bfb			lda 	gdy+1 						; save sign of dy
.1a39	8d 09 0c	sta $0c09			sta 	gdysign
.1a3c	30 12		bmi $1a50			bmi 	_BINormal
.1a3e	38		sec				sec
.1a3f	a9 00		lda #$00			lda 	#0
.1a41	ed fa 0b	sbc $0bfa			sbc 	gdy
.1a44	8d fa 0b	sta $0bfa			sta 	gdy
.1a47	a9 00		lda #$00			lda 	#0
.1a49	ed fb 0b	sbc $0bfb			sbc 	gdy+1
.1a4c	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a4f	60		rts				rts
.1a50					_BINormal:
.1a50	18		clc				clc
.1a51	ad f8 0b	lda $0bf8			lda 	gdx
.1a54	6d fa 0b	adc $0bfa			adc 	gdy
.1a57	8d f4 0b	sta $0bf4			sta 	gError
.1a5a	ad f9 0b	lda $0bf9			lda 	gdx+1
.1a5d	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a60	8d f5 0b	sta $0bf5			sta 	gError+1
.1a63	60		rts				rts
.1a64					BresenhamIteration:
.1a64	ad f4 0b	lda $0bf4			lda 	gError
.1a67	0a		asl a				asl 	a
.1a68	8d f6 0b	sta $0bf6			sta 	g2Error
.1a6b	ad f5 0b	lda $0bf5			lda 	gError+1
.1a6e	2a		rol a				rol 	a
.1a6f	8d f7 0b	sta $0bf7			sta 	g2Error+1
.1a72	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a74	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a76	20 95 1c	jsr $1c95			jsr 	CompareCoordsSigned
.1a79	30 03		bmi $1a7e			bmi 	_BINoE2DY
.1a7b	20 8b 1a	jsr $1a8b			jsr 	BresenhamE2GEDY
.1a7e					_BINoE2DY:
.1a7e	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a80	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a82	20 95 1c	jsr $1c95			jsr 	CompareCoordsSigned
.1a85	30 03		bmi $1a8a			bmi 	_BINoDXE2
.1a87	20 aa 1a	jsr $1aaa			jsr 	BresenhamDXGEE2
.1a8a					_BINoDXE2:
.1a8a	60		rts				rts
.1a8b					BresenhamE2GEDY:
.1a8b	18		clc				clc
.1a8c	ad f4 0b	lda $0bf4			lda 	gError
.1a8f	6d fa 0b	adc $0bfa			adc 	gdy
.1a92	8d f4 0b	sta $0bf4			sta 	gError
.1a95	ad f5 0b	lda $0bf5			lda 	gError+1
.1a98	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a9b	8d f5 0b	sta $0bf5			sta 	gError+1
.1a9e	ee ec 0b	inc $0bec			inc 	gX1
.1aa1	d0 03		bne $1aa6			bne 	_BE2Skip
.1aa3	ee ed 0b	inc $0bed			inc 	gX1+1
.1aa6					_BE2Skip:
.1aa6	20 ed 1c	jsr $1ced			jsr 	gdMvRight
.1aa9	60		rts				rts
.1aaa					BresenhamDXGEE2:
.1aaa	18		clc				clc
.1aab	ad f4 0b	lda $0bf4			lda 	gError
.1aae	6d f8 0b	adc $0bf8			adc 	gdx
.1ab1	8d f4 0b	sta $0bf4			sta 	gError
.1ab4	ad f5 0b	lda $0bf5			lda 	gError+1
.1ab7	6d f9 0b	adc $0bf9			adc 	gdx+1
.1aba	8d f5 0b	sta $0bf5			sta 	gError+1
.1abd	ad 09 0c	lda $0c09			lda 	gdySign
.1ac0	10 0c		bpl $1ace			bpl 	_BEDXInvertY
.1ac2	ee ee 0b	inc $0bee			inc 	gY1
.1ac5	d0 03		bne $1aca			bne 	_BEDXSkip
.1ac7	ee ef 0b	inc $0bef			inc 	gY1+1
.1aca					_BEDXSkip:
.1aca	20 28 1d	jsr $1d28			jsr 	gdMvDown
.1acd	60		rts				rts
.1ace					_BEDXInvertY:
.1ace	ad ee 0b	lda $0bee			lda 	gY1
.1ad1	d0 03		bne $1ad6			bne 	_BEDXSkip2
.1ad3	ce ef 0b	dec $0bef			dec 	gY1+1
.1ad6					_BEDXSkip2:
.1ad6	ce ee 0b	dec $0bee			dec 	gY1
.1ad9	20 03 1d	jsr $1d03			jsr 	gdMvUp
.1adc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1add					Command_Plot:
.1add	a9 e5		lda #$e5			lda 	#PlotHandler & $FF
.1adf	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ae1	20 e9 18	jsr $18e9			jsr 	GHandler
.1ae4	60		rts				rts
.1ae5					PlotHandler:
.1ae5	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ae7	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X2,Y2 to draw e.g. plot to 100,100
.1aea	b0 03		bcs $1aef			bcs 	_PHExit 					; off screen, return with CS.
.1aec	20 4a 1d	jsr $1d4a			jsr 	gdPlotInk 					; pixel in Ink.
.1aef	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c0a					frameFlag:
>0c0a							.fill 	1
.1af0					Command_Rect:
.1af0	a9 04		lda #$04			lda 	#RectHandler & $FF
.1af2	a2 1b		ldx #$1b			ldx 	#RectHandler >> 8
.1af4	20 e9 18	jsr $18e9			jsr 	GHandler
.1af7	60		rts				rts
.1af8					Command_Frame:
.1af8	a9 00		lda #$00			lda 	#FrameHandler & $FF
.1afa	a2 1b		ldx #$1b			ldx 	#FrameHandler >> 8
.1afc	20 e9 18	jsr $18e9			jsr 	GHandler
.1aff	60		rts				rts
.1b00					FrameHandler:
.1b00	a9 01		lda #$01			lda 	#1 							; set frame flag to 1/0 on entry.
.1b02	d0 02		bne $1b06			bne 	FRHandlerMain
.1b04					RectHandler:
.1b04	a9 00		lda #$00			lda 	#0
.1b06					FRHandlerMain:
.1b06	8d 0a 0c	sta $0c0a			sta 	frameFlag
.1b09	20 ac 1c	jsr $1cac			jsr 	BoxSort 					; sort so topleft/bottom right
.1b0c	20 35 1b	jsr $1b35			jsr 	DrawBoxPart 				; solid first line
.1b0f					_FHLoop:
.1b0f	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1b11	a0 06		ldy #$06			ldy 	#gY2-gX1
.1b13	20 88 1c	jsr $1c88			jsr 	CompareCoords
.1b16	b0 19		bcs $1b31			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1b18	ad 0a 0c	lda $0c0a			lda 	frameFlag 					; identify solid or frame ?
.1b1b	f0 06		beq $1b23			beq 	_FHIsSolidRect 				; if solid, draw the solid line.
.1b1d	20 4e 1b	jsr $1b4e			jsr 	DrawBoxEnds					; otherwise draw just the start and end
.1b20	4c 26 1b	jmp $1b26			jmp 	_FHNext
.1b23					_FHIsSolidRect:
.1b23	20 35 1b	jsr $1b35			jsr 	DrawBoxPart
.1b26					_FHNext:
.1b26	ee ee 0b	inc $0bee			inc 	gY1 						; bump Y1 and loop back.
.1b29	d0 e4		bne $1b0f			bne 	_FHLoop
.1b2b	ee ef 0b	inc $0bef			inc 	gY1+1
.1b2e	4c 0f 1b	jmp $1b0f			jmp 	_FHLoop
.1b31					_FHLastLine:
.1b31	20 35 1b	jsr $1b35			jsr 	DrawBoxPart 				; solid last line whatever
.1b34					_FHExit:
.1b34	60		rts				rts
.1b35					DrawBoxPart:
.1b35	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b37	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b3a	38		sec				sec 								; calculate line length => temp0
.1b3b	ad f0 0b	lda $0bf0			lda 	gX2
.1b3e	ed ec 0b	sbc $0bec			sbc 	gX1
.1b41	48		pha				pha
.1b42	ad f1 0b	lda $0bf1			lda 	gX2+1
.1b45	ed ed 0b	sbc $0bed			sbc 	gx1+1
.1b48	aa		tax				tax
.1b49	68		pla				pla 								; line length in XA.
.1b4a	20 66 1b	jsr $1b66			jsr 	DrawHorizontalLine
.1b4d	60		rts				rts
.1b4e					DrawBoxEnds:
.1b4e	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b50	20 72 1c	jsr $1c72			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b53	20 4a 1d	jsr $1d4a			jsr 	gdPlotInk 					; LH end.
.1b56	ad f0 0b	lda $0bf0			lda 	gX2 						; set position to X2,Y1
.1b59	ae f1 0b	ldx $0bf1			ldx 	gX2+1
.1b5c	20 39 1e	jsr $1e39			jsr 	gdSetX
.1b5f	20 5c 1d	jsr $1d5c			jsr		gdSetDrawPosition 			; update position.
.1b62	20 4a 1d	jsr $1d4a			jsr 	gdPlotInk 					; RH end.
.1b65	60		rts				rts
.1b66					DrawHorizontalLine:
.1b66	86 32		stx $32				stx 	tempShort
.1b68	aa		tax				tax
.1b69	a4 32		ldy $32				ldy 	tempShort
.1b6b	ad fe 0b	lda $0bfe			lda 	gdInk
.1b6e	4c 47 1e	jmp $1e47			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c0b					RenderFunction:
>0c0b							.fill 	2
.0c0d					RenderWidth:
>0c0d							.fill 	1
.0c0e					RenderHeight:
>0c0e							.fill 	1
.0c0f					RenderType:
>0c0f							.fill 	1
.0c10					RenderCache:
>0c10							.fill 	64
.1b71					ImageRenderer:
.1b71	8e 0c 0c	stx $0c0c			stx 	RenderFunction+1
.1b74	8d 0b 0c	sta $0c0b			sta 	RenderFunction
.1b77	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b79	20 5a 1c	jsr $1c5a			jsr 	CallRenderFunction
.1b7c	8d 0f 0c	sta $0c0f			sta 	RenderType 					; and save it.
.1b7f	8e 0d 0c	stx $0c0d			stx 	RenderWidth
.1b82	8c 0e 0c	sty $0c0e			sty 	RenderHeight
.1b85	8a		txa				txa 								; check X coordinate
.1b86	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b88	20 21 1c	jsr $1c21			jsr 	RenderCheckRange 			; this checks and throws error if off screen.
.1b8b	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; check Y coordinate
.1b8e	a2 02		ldx #$02			ldx 	#2
.1b90	20 21 1c	jsr $1c21			jsr 	RenderCheckRange
.1b93	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b95					_IRLoop1:
.1b95	5a		phy				phy
.1b96	20 fd 1b	jsr $1bfd			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1b99	20 5a 1c	jsr $1c5a			jsr 	CallRenderFunction 			; fill the rendering cache for this row.
.1b9c	7a		ply				ply
.1b9d	ae 00 0c	ldx $0c00			ldx 	gdSize 						; number of times to do the row is the scale value
.1ba0					_IRLoop2:
.1ba0	20 ad 1b	jsr $1bad			jsr 	RenderDrawRow 				; draw one row.
.1ba3	ca		dex				dex 								; scale # times.
.1ba4	d0 fa		bne $1ba0			bne 	_IRLoop2
.1ba6	c8		iny				iny 								; next vertical row
.1ba7	cc 0e 0c	cpy $0c0e			cpy 	RenderHeight 				; done the lot ?
.1baa	d0 e9		bne $1b95			bne 	_IRLoop1
.1bac	60		rts				rts
.1bad					RenderDrawRow:
.1bad	da		phx				phx
.1bae	5a		phy				phy
.1baf	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1bb1	20 72 1c	jsr $1c72			jsr 	SetupXY
.1bb4	7a		ply				ply
.1bb5	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1bb7					_RDRLoop1:
.1bb7	20 ca 1b	jsr $1bca			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1bba	e8		inx				inx
.1bbb	ec 0d 0c	cpx $0c0d			cpx 	RenderWidth 				; until done the whole lot.
.1bbe	d0 f7		bne $1bb7			bne 	_RDRLoop1
.1bc0	ee f2 0b	inc $0bf2			inc 	gY2 						; next line down
.1bc3	d0 03		bne $1bc8			bne 	_RDRNoCarry
.1bc5	ee f3 0b	inc $0bf3			inc 	gY2+1
.1bc8					_RDRNoCarry:
.1bc8	fa		plx				plx
.1bc9	60		rts				rts
.1bca					RenderDrawPixelSet:
.1bca	da		phx				phx
.1bcb	5a		phy				phy
.1bcc	20 fd 1b	jsr $1bfd			jsr 	RenderFlipXY 				; flip positions as required.
.1bcf	20 e7 1b	jsr $1be7			jsr 	RenderGetInk				; get colour to draw with.
.1bd2	ae 00 0c	ldx $0c00			ldx 	gdSize 						; X counts the size.
.1bd5					_RDPSLoop:
.1bd5	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bd7	f0 03		beq $1bdc			beq 	_RDPSNoDraw
.1bd9	20 4d 1d	jsr $1d4d			jsr 	gdPlotA 					; draw A otherwise
.1bdc					_RDPSNoDraw:
.1bdc	48		pha				pha 								; move right
.1bdd	20 ed 1c	jsr $1ced			jsr 	gdMvRight
.1be0	68		pla				pla
.1be1	ca		dex				dex
.1be2	d0 f1		bne $1bd5			bne 	_RDPSLoop 					; do it size times.
.1be4	7a		ply				ply
.1be5	fa		plx				plx
.1be6	60		rts				rts
.1be7					RenderGetInk:
.1be7	ad 0f 0c	lda $0c0f			lda 	RenderType 					; type, if 0 it's a bitmap
.1bea	f0 04		beq $1bf0			beq 	_RGIBitmap
.1bec	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bef	60		rts				rts
.1bf0					_RGIBitmap:
.1bf0	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1bf3	f0 04		beq $1bf9			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bf5	ad fe 0b	lda $0bfe			lda 	gdInk
.1bf8	60		rts				rts
.1bf9					_RGIBPaper:
.1bf9	ad ff 0b	lda $0bff			lda 	gdPaper
.1bfc	60		rts				rts
.1bfd					RenderFlipXY:
.1bfd	ad 02 0c	lda $0c02			lda 	gdFlip 						; check any flip at all
.1c00	29 03		and #$03			and 	#3
.1c02	f0 1c		beq $1c20			beq 	_RFExit
.1c04	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1c05	90 09		bcc $1c10			bcc 	_RFNoHFlip
.1c07	ad 0d 0c	lda $0c0d			lda 	RenderWidth 				; X Flip
.1c0a	86 32		stx $32				stx 	tempShort
.1c0c	18		clc				clc
.1c0d	e5 32		sbc $32				sbc 	tempShort
.1c0f	aa		tax				tax
.1c10					_RFNoHFlip:
.1c10	ad 02 0c	lda $0c02			lda 	gdFlip
.1c13	29 02		and #$02			and 	#2 							; bit 1 check
.1c15	f0 09		beq $1c20			beq 	_RFExit
.1c17	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; Y Flip
.1c1a	84 32		sty $32				sty 	tempShort
.1c1c	18		clc				clc
.1c1d	e5 32		sbc $32				sbc 	tempShort
.1c1f	a8		tay				tay
.1c20					_RFExit:
.1c20	60		rts				rts
.1c21					RenderCheckRange:
.1c21	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1c23	ac 00 0c	ldy $0c00			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1c26	84 2a		sty $2a				sty 	temp0
.1c28	f0 2b		beq $1c55			beq 	_RCRValue
.1c2a	a9 00		lda #$00			lda 	#0 							; total
.1c2c					_RCRMultiply:
.1c2c	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c2e	90 05		bcc $1c35			bcc 	_RCRNoAdd 					; not adding this time.
.1c30	18		clc				clc
.1c31	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c33	b0 20		bcs $1c55			bcs 	_RCRValue 					; overflow
.1c35					_RCRNoAdd:
.1c35	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c37	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c39	d0 f1		bne $1c2c			bne 	_RCRMultiply
.1c3b	18		clc				clc 								; add to x2 or y2, store in temp0
.1c3c	7d f0 0b	adc $0bf0,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c3f	85 2a		sta $2a				sta 	temp0
.1c41	bd f1 0b	lda $0bf1,x			lda 	gX2+1,x
.1c44	69 00		adc #$00			adc 	#0
.1c46	85 2b		sta $2b				sta 	temp0+1
.1c48	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c4a	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1c4d	a5 2b		lda $2b				lda 	temp0+1
.1c4f	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1c52	b0 01		bcs $1c55			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c54	60		rts				rts
.1c55					_RCRValue:
.1c55	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c57	20 27 15	jsr $1527		jsr	errorHandler
.1c5a					CallRenderFunction:
.1c5a	6c 0b 0c	jmp ($0c0b)			jmp 	(RenderFunction)
.1c5d					TestImageAccess:
.1c5d	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c5f	f0 0a		beq $1c6b			beq 	_TIAGetInfo
.1c61	a0 3f		ldy #$3f			ldy 	#63
.1c63					_TIACreate:
.1c63	98		tya				tya
.1c64	99 10 0c	sta $0c10,y			sta 	RenderCache,y
.1c67	88		dey				dey
.1c68	10 f9		bpl $1c63			bpl 	_TIACreate
.1c6a	60		rts				rts
.1c6b					_TIAGetInfo:
.1c6b	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c6d	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c6f	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c71	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c72					SetupXY:
.1c72	b9 ec 0b	lda $0bec,y			lda 	gX1,y 						; set the X position
.1c75	be ed 0b	ldx $0bed,y			ldx 	gX1+1,y
.1c78	20 39 1e	jsr $1e39			jsr 	gdSetX
.1c7b	b9 ee 0b	lda $0bee,y			lda 	gY1,y 						; set the Y position
.1c7e	be ef 0b	ldx $0bef,y			ldx 	gY1+1,y
.1c81	20 40 1e	jsr $1e40			jsr 	gdSetY
.1c84	20 5c 1d	jsr $1d5c			jsr 	gdSetDrawPosition 			; recalculate and set up Vera.
.1c87	60		rts				rts
.1c88					CompareCoords:
.1c88	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1c8b	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1c8e	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1c91	f9 ed 0b	sbc $0bed,y			sbc 	gX1+1,y
.1c94	60		rts				rts
.1c95					CompareCoordsSigned:
.1c95	20 88 1c	jsr $1c88			jsr 	CompareCoords
.1c98	50 02		bvc $1c9c			bvc 	_CCSExit
.1c9a	49 80		eor #$80			eor 	#$80
.1c9c					_CCSExit:
.1c9c	60		rts				rts
.1c9d					CompareCoordsEq:
.1c9d	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1ca0	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1ca3	d0 06		bne $1cab			bne 	_CCEExit
.1ca5	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1ca8	d9 ed 0b	cmp $0bed,y			cmp 	gX1+1,y
.1cab					_CCEExit:
.1cab	60		rts				rts
.1cac					BoxSort:
.1cac	a2 00		ldx #$00			ldx 	#gx1-gx1
.1cae	a0 04		ldy #$04			ldy 	#gx2-gx1
.1cb0	20 c1 1c	jsr $1cc1			jsr 	GCompareCoords
.1cb3	20 ce 1c	jsr $1cce			jsr 	GSortMinMaxCoords
.1cb6	a2 02		ldx #$02			ldx 	#gy1-gx1
.1cb8	a0 06		ldy #$06			ldy 	#gy2-gx1
.1cba	20 c1 1c	jsr $1cc1			jsr 	GCompareCoords
.1cbd	20 ce 1c	jsr $1cce			jsr 	GSortMinMaxCoords
.1cc0	60		rts				rts
.1cc1					GCompareCoords:
.1cc1	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1cc4	d9 ec 0b	cmp $0bec,y			cmp 	gx1,y
.1cc7	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1cca	f9 ed 0b	sbc $0bed,y			sbc 	gx1+1,y
.1ccd	60		rts				rts
.1cce					GSortMinMaxCoords:
.1cce	90 1c		bcc $1cec			bcc 	GSMMCExit
.1cd0					GSwapCoords:
.1cd0	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1cd3	48		pha				pha
.1cd4	b9 ec 0b	lda $0bec,y			lda 	gx1,y
.1cd7	9d ec 0b	sta $0bec,x			sta 	gx1,x
.1cda	68		pla				pla
.1cdb	99 ec 0b	sta $0bec,y			sta 	gx1,y
.1cde	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1ce1	48		pha				pha
.1ce2	b9 ed 0b	lda $0bed,y			lda 	gx1+1,y
.1ce5	9d ed 0b	sta $0bed,x			sta 	gx1+1,x
.1ce8	68		pla				pla
.1ce9	99 ed 0b	sta $0bed,y			sta 	gx1+1,y
.1cec					GSMMCExit:
.1cec	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1ced					gdMvRight:
.1ced	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; bump X16VeraAddLow
.1cf0	d0 08		bne $1cfa			bne 	_gdMR0
.1cf2	ee 21 9f	inc $9f21			inc 	X16VeraAddMed
.1cf5	d0 03		bne $1cfa			bne 	_gdMR0
.1cf7	ee 22 9f	inc $9f22			inc 	X16VeraAddHigh
.1cfa					_gdMR0:
.1cfa	ee 54 0c	inc $0c54			inc 	gdXPos
.1cfd	d0 03		bne $1d02			bne 	_gdMR1
.1cff	ee 55 0c	inc $0c55			inc 	gdXPos+1
.1d02					_gdMR1:
.1d02	60		rts				rts
.1d03					gdMvUp:
.1d03	ad 56 0c	lda $0c56			lda 	gdYPos 						; decrement Y Pos
.1d06	d0 03		bne $1d0b			bne 	_gdMU1
.1d08	ce 57 0c	dec $0c57			dec 	gdYPos+1
.1d0b	ce 56 0c	dec $0c56	_gdMU1:	dec 	gdYPos
.1d0e	38		sec				sec 								; adjust position by -320
.1d0f	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.1d12	e9 40		sbc #$40			sbc 	#GrWidth & $FF
.1d14	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d17	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.1d1a	e9 01		sbc #$01			sbc 	#GrWidth >> 8
.1d1c	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d1f	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh
.1d22	e9 00		sbc #$00			sbc 	#0
.1d24	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d27	60		rts				rts
.1d28					gdMvDown:
.1d28	ee 56 0c	inc $0c56			inc 	gdYPos 						; decrement Y Pos
.1d2b	d0 03		bne $1d30			bne 	_gdMU1
.1d2d	ee 57 0c	inc $0c57			inc 	gdYPos+1
.1d30					_gdMU1:
.1d30	18		clc				clc 								; adjust position by -320
.1d31	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.1d34	69 40		adc #$40			adc 	#GrWidth & $FF
.1d36	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d39	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.1d3c	69 01		adc #$01			adc 	#GrWidth >> 8
.1d3e	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d41	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh
.1d44	69 00		adc #$00			adc 	#0
.1d46	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d49	60		rts				rts
.1d4a					gdPlotInk:
.1d4a	ad fe 0b	lda $0bfe			lda 	gdInk
.1d4d					gdPlotA:
.1d4d	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1d50	60		rts				rts
.1d51					gdPlotPaper:
.1d51	ad ff 0b	lda $0bff			lda 	gdPaper
.1d54	c9 ff		cmp #$ff			cmp 	#$FF
.1d56	f0 03		beq $1d5b			beq 	_gdPPSkip
.1d58	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1d5b					_gdPPSkip:
.1d5b	60		rts				rts
.1d5c					gdSetDrawPosition:
.1d5c	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d5e	85 2a		sta $2a				sta 	temp0
.1d60	ad 56 0c	lda $0c56			lda 	gdYPos
.1d63	85 2b		sta $2b				sta 	temp0+1
.1d65	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d67	66 2a		ror $2a				ror 	temp0
.1d69	46 2b		lsr $2b				lsr 	temp0+1
.1d6b	66 2a		ror $2a				ror 	temp0
.1d6d	ad 56 0c	lda $0c56			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d70	18		clc				clc
.1d71	65 2b		adc $2b				adc 	temp0+1
.1d73	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d75	18		clc				clc
.1d76	a5 2a		lda $2a				lda 	temp0
.1d78	6d 54 0c	adc $0c54			adc 	gdXPos
.1d7b	85 2a		sta $2a				sta 	temp0
.1d7d	a5 2b		lda $2b				lda 	temp0+1
.1d7f	6d 55 0c	adc $0c55			adc 	gdXPos+1
.1d82	85 2b		sta $2b				sta 	temp0+1
.1d84	18		clc				clc 								; write bitmapaddress + temp0 to the vera address register
.1d85	ad 51 0c	lda $0c51			lda 	gdBitmapAddress
.1d88	65 2a		adc $2a				adc 	temp0
.1d8a	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d8d	ad 52 0c	lda $0c52			lda 	gdBitmapAddress+1
.1d90	65 2b		adc $2b				adc 	temp0+1
.1d92	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d95	ad 53 0c	lda $0c53			lda 	gdBitmapAddress+2
.1d98	69 00		adc #$00			adc 	#0
.1d9a	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d9d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c50					gdEnabled:
>0c50							.fill 	1
.0c51					gdBitmapAddress:
>0c51							.fill 	3
.0c54					gdXPos:
>0c54							.fill 	2
.0c56					gdYPos:
>0c56							.fill 	2
.1d9e					gdModeChanged:
.1d9e	da		phx				phx
.1d9f	5a		phy				phy
.1da0	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1da2	8d 50 0c	sta $0c50			sta 	gdEnabled
.1da5	ad 2a 9f	lda $9f2a			lda 	X16VeraHScale 				; requires $40 for H/V Scale
.1da8	c9 40		cmp #$40			cmp 	#$40
.1daa	d0 1f		bne $1dcb			bne 	_gdExit
.1dac	ad 2b 9f	lda $9f2b			lda 	X16VeraVScale
.1daf	c9 40		cmp #$40			cmp 	#$40
.1db1	d0 18		bne $1dcb			bne 	_gdExit
.1db3	ad 29 9f	lda $9f29			lda 	X16VeraDCVideo 				; read DC_Video, see which layers are enabled.
.1db6	0a		asl a				asl 	a 							;
.1db7	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1db8	10 09		bpl $1dc3			bpl 	_gdNotLayer1
.1dba	48		pha				pha 								; save A
.1dbb	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1dbd	20 d1 1d	jsr $1dd1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dc0	68		pla				pla 								; restore A
.1dc1	b0 08		bcs $1dcb			bcs 	_gdExit 					; if successful then exit
.1dc3					_gdNotLayer1:
.1dc3	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1dc4	10 05		bpl $1dcb			bpl 	_gdExit 					; if not enabled, exit
.1dc6	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at X16VeraLayerConfig)
.1dc8	20 d1 1d	jsr $1dd1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1dcb					_gdExit:
.1dcb	20 05 1e	jsr $1e05			jsr 	gdClearGraphics 			; clear graphics display.
.1dce	7a		ply				ply
.1dcf	fa		plx				plx
.1dd0	60		rts				rts
.1dd1					gdCheckBitmap:
.1dd1	bd 2d 9f	lda $9f2d,x			lda 	X16VeraLayerConfig,x 		; look at bitmap bit.
.1dd4	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1dd6	d0 14		bne $1dec			bne 	_gdCBFail
.1dd8	ee 50 0c	inc $0c50			inc 	gdEnabled 					; set the enabled flag to non zero.
.1ddb	bd 2f 9f	lda $9f2f,x			lda 	X16VeraLayerTileBase,x 		; this is the bitmap address / 2
.1dde	0a		asl a				asl 	a
.1ddf	8d 52 0c	sta $0c52			sta 	gdBitmapAddress+1
.1de2	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1de4	8d 53 0c	sta $0c53			sta 	gdBitmapAddress+2
.1de7	a9 00		lda #$00			lda 	#$00
.1de9	8d 51 0c	sta $0c51			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dec					_gdCBFail:
.1dec	18		clc				clc
.1ded	60		rts				rts
.1dee					CommandClg:
.1dee	b1 28		lda ($28),y			lda 	(codePtr),y 				; CLG PAPER x
.1df0	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1df2	d0 0d		bne $1e01			bne 	_CCLClear
.1df4	c8		iny				iny 								; skip paper
.1df5	a9 00		lda #$00			lda 	#0 							; get paper and update
.1df7	a2 0c		ldx #$0c		ldx	#12
.1df9	20 29 40	jsr $4029		jsr	mainHandler
.1dfc	a5 98		lda $98				lda 	esInt0
.1dfe	8d ff 0b	sta $0bff			sta 	gdPaper
.1e01					_CCLClear:
.1e01	20 05 1e	jsr $1e05			jsr 	gdClearGraphics 			; call graphics clear code.
.1e04	60		rts				rts
.1e05					gdClearGraphics:
.1e05	da		phx				phx
.1e06	5a		phy				phy
.1e07	ad 50 0c	lda $0c50			lda 	gdEnabled 					; bitmap screen enabled ?
.1e0a	f0 2a		beq $1e36			beq 	_gdCGExit 					; no, then can't clear
.1e0c	a9 40		lda #$40			lda 	#(GrWidth) & $FF
.1e0e	8d 03 0c	sta $0c03			sta 	gdXLimit
.1e11	a9 01		lda #$01			lda 	#(GrWidth) >> 8
.1e13	8d 04 0c	sta $0c04			sta 	1+(gdXLimit)
.1e16	a9 c8		lda #$c8			lda 	#(GrHeight) & $FF
.1e18	8d 05 0c	sta $0c05			sta 	gdYLimit
.1e1b	a9 00		lda #$00			lda 	#(GrHeight) >> 8
.1e1d	8d 06 0c	sta $0c06			sta 	1+(gdYLimit)
.1e20	a9 00		lda #$00			lda 	#0 							; home cursor
.1e22	aa		tax				tax
.1e23	20 39 1e	jsr $1e39			jsr 	gdSetX
.1e26	20 40 1e	jsr $1e40			jsr 	gdSetY
.1e29	20 5c 1d	jsr $1d5c			jsr 	gdSetDrawPosition 			; set the draw position.
.1e2c	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e2e	a2 00		ldx #$00			ldx 	#0
.1e30	ad ff 0b	lda $0bff			lda 	gdPaper
.1e33	20 47 1e	jsr $1e47			jsr 	gdOptHorizontalWriter		; call the optimised horizontal writer to do $FA00 of A
.1e36					_gdCGExit:
.1e36	7a		ply				ply
.1e37	fa		plx				plx
.1e38	60		rts				rts
.1e39					gdSetX:
.1e39	8d 54 0c	sta $0c54			sta 	gdXPos
.1e3c	8e 55 0c	stx $0c55			stx 	gdXPos+1
.1e3f	60		rts				rts
.1e40					gdSetY:
.1e40	8d 56 0c	sta $0c56			sta 	gdYPos
.1e43	8e 57 0c	stx $0c57			stx 	gdYPos+1
.1e46	60		rts				rts
.1e47					gdOptHorizontalWriter:
.1e47	48		pha				pha
.1e48	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh 						; make it autoincrement.
.1e4b	09 10		ora #$10			ora 	#$10
.1e4d	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1e50	68		pla				pla
.1e51					_gdOLoop:
.1e51	8d 23 9f	sta $9f23			sta 	X16VeraData0						; write colour out.
.1e54	e0 00		cpx #$00			cpx 	#0 									; exit if X = Y = 0
.1e56	d0 05		bne $1e5d			bne 	_gdNoBorrow 						; decrement YX in here.
.1e58	c0 00		cpy #$00			cpy 	#0
.1e5a	f0 05		beq $1e61			beq 	_gdExit
.1e5c	88		dey				dey 			 							; X 0 so borrow from Y
.1e5d					_gdNoBorrow:
.1e5d	ca		dex				dex
.1e5e	4c 51 1e	jmp $1e51			jmp 	_gdOLoop
.1e61					_gdExit:
.1e61	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e62					Unary_Clock:
.1e62	a2 0c		ldx #$0c		ldx	#12
.1e64	20 29 40	jsr $4029		jsr	mainHandler
.1e67	48		pha				pha 								; save stack pos
.1e68	a2 04		ldx #$04		ldx	#4
.1e6a	20 29 40	jsr $4029		jsr	mainHandler
.1e6d	5a		phy				phy
.1e6e	20 50 ff	jsr $ff50			jsr 	X16KReadRTC
.1e71	7a		ply				ply
.1e72	68		pla				pla 								; restore, repush, put into X to read offset
.1e73	48		pha				pha
.1e74	aa		tax				tax
.1e75	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e77	c9 06		cmp #$06			cmp 	#6
.1e79	b0 0d		bcs $1e88			bcs 	_UCValue
.1e7b	aa		tax				tax 								; index in X and read RTC.
.1e7c	b5 02		lda $02,x			lda 	2,x
.1e7e	85 32		sta $32				sta 	tempshort
.1e80	68		pla				pla 								; restore number stack index.
.1e81	aa		tax				tax
.1e82	a5 32		lda $32				lda 	tempShort
.1e84	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e86	8a		txa				txa
.1e87	60		rts				rts
.1e88					_UCValue:
.1e88	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e8a	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e8d					Unary_JoyX:
.1e8d	38		sec				sec
.1e8e	b0 01		bcs $1e91			bcs 	JoystickRead
.1e90					Unary_JoyY:
.1e90	18		clc				clc
.1e91					JoystickRead:
.1e91	48		pha				pha 								; save stack position
.1e92	08		php				php 								; save test flag.
.1e93	a2 04		ldx #$04		ldx	#4
.1e95	20 29 40	jsr $4029		jsr	mainHandler
.1e98	20 ef 1e	jsr $1eef			jsr 	ReadJoystick 				; read it.
.1e9b	28		plp				plp 								; get back axis
.1e9c	b0 02		bcs $1ea0			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y axis buttons
.1e9e	4a		lsr a				lsr 	a
.1e9f	4a		lsr a				lsr 	a
.1ea0					_JRNoShift:
.1ea0	29 03		and #$03			and 	#3 							; isolate the test bits.
.1ea2	f0 0d		beq $1eb1			beq 	JoyReturnA 					; if nothing pressed, return A.
.1ea4	c9 03		cmp #$03			cmp 	#3
.1ea6	f0 07		beq $1eaf			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1ea8	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1ea9	b0 15		bcs $1ec0			bcs 	JoyReturn1
.1eab					JoyReturnTrue:
.1eab	a9 ff		lda #$ff			lda 	#$FF
.1ead	d0 02		bne $1eb1			bne 	JoyReturnA
.1eaf					JoyReturnFalse:
.1eaf	a9 00		lda #$00			lda 	#0
.1eb1					JoyReturnA:
.1eb1	85 32		sta $32				sta 	tempShort 					; return A
.1eb3	fa		plx				plx
.1eb4	a5 32		lda $32				lda 	tempShort
.1eb6	95 98		sta $98,x			sta 	esInt0,x
.1eb8					JoyReturn13:
.1eb8	95 a0		sta $a0,x			sta 	esInt1,x
.1eba	95 a8		sta $a8,x			sta 	esInt2,x
.1ebc	95 b0		sta $b0,x			sta 	esInt3,x
.1ebe	8a		txa				txa 								; return NSP in A
.1ebf	60		rts				rts
.1ec0					JoyReturn1:
.1ec0	fa		plx				plx
.1ec1	a9 01		lda #$01			lda 	#1
.1ec3	95 98		sta $98,x			sta 	esInt0,x
.1ec5	a9 00		lda #$00			lda 	#0
.1ec7	f0 ef		beq $1eb8			beq 	JoyReturn13
.1ec9					Unary_JButton:
.1ec9	48		pha				pha 								; save X on stack, put in X
.1eca	a2 0c		ldx #$0c		ldx	#12
.1ecc	20 29 40	jsr $4029		jsr	mainHandler
.1ecf	aa		tax				tax 								; get value to check, push on stack.
.1ed0	b5 98		lda $98,x			lda 	esInt0,x
.1ed2	c9 04		cmp #$04			cmp 	#4 							; check button # 0-3
.1ed4	b0 14		bcs $1eea			bcs 	_UJBadValue
.1ed6	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ed8	48		pha				pha 								; save that shift count on the stack.
.1ed9	a2 04		ldx #$04		ldx	#4
.1edb	20 29 40	jsr $4029		jsr	mainHandler
.1ede	fa		plx				plx
.1edf	20 ef 1e	jsr $1eef			jsr 	ReadJoystick 				; joystick read
.1ee2					_UJShift:
.1ee2	4a		lsr a				lsr 	a
.1ee3	ca		dex				dex
.1ee4	d0 fc		bne $1ee2			bne 	_UJShift
.1ee6	b0 c3		bcs $1eab			bcs 	JoyReturnTrue
.1ee8	90 c5		bcc $1eaf			bcc 	JoyReturnFalse
.1eea					_UJBadValue:
.1eea	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1eec	20 27 15	jsr $1527		jsr	errorHandler
.1eef					ReadJoystick:
.1eef	da		phx				phx
.1ef0	5a		phy				phy
.1ef1	a9 00		lda #$00			lda 	#0
.1ef3	20 56 ff	jsr $ff56			jsr 	X16KReadJoystick
.1ef6	c0 00		cpy #$00			cpy 	#0
.1ef8	d0 0f		bne $1f09			bne 	_RJError
.1efa	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially, which means all the
.1efc	d0 02		bne $1f00			bne 	_RJNoBug 					; buttons are pressed, so we assume you haven't actually
.1efe	a9 ff		lda #$ff			lda 	#$FF 						; done this !
.1f00					_RJNoBug:
.1f00	85 32		sta $32				sta 	tempShort
.1f02	7a		ply				ply
.1f03	fa		plx				plx
.1f04	a5 32		lda $32				lda 	tempShort
.1f06	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1f08	60		rts				rts
.1f09					_RJError:
.1f09	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f0b	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndqueue.asm

.1f0e					SoundAddQueue:
.1f0e	86 2a		stx $2a				stx 	temp0 						; save XY in temp0
.1f10	84 2b		sty $2b				sty 	temp0+1
.1f12	a2 00		ldx #$00			ldx 	#0 							; look for empty spot.
.1f14					_SAQFind:
.1f14	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; check if first byte (time) zero means clear.
.1f17	f0 0e		beq $1f27			beq 	_SAQFound
.1f19	8a		txa				txa 								; forward 6
.1f1a	18		clc				clc
.1f1b	69 06		adc #$06			adc 	#6
.1f1d	aa		tax				tax
.1f1e	e0 60		cpx #$60			cpx 	#sndQueueSize*6 			; queue is full ?
.1f20	90 f2		bcc $1f14			bcc 	_SAQFind
.1f22	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f24	20 27 15	jsr $1527		jsr	errorHandler
.1f27					_SAQFound:
.1f27	a0 05		ldy #$05			ldy 	#5 							; get and save time
.1f29	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f2b	9d 71 0c	sta $0c71,x			sta 	sndQueue+0,x
.1f2e	88		dey				dey 								; get and save the channel.
.1f2f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f31	9d 72 0c	sta $0c72,x			sta 	sndQueue+1,x
.1f34	a0 00		ldy #$00			ldy 	#0
.1f36					_SAQCopy1:
.1f36	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy 4 bytes of PSG data in.
.1f38	9d 73 0c	sta $0c73,x			sta 	sndQueue+2,x
.1f3b	c8		iny				iny
.1f3c	e8		inx				inx
.1f3d	c0 04		cpy #$04			cpy 	#4
.1f3f	d0 f5		bne $1f36			bne		 _SAQCopy1
.1f41	60		rts				rts
.1f42					SoundCheckQueue:
.1f42	85 2a		sta $2a				sta 	temp0 						; save channel #
.1f44	da		phx				phx
.1f45	5a		phy				phy
.1f46	a6 2a		ldx $2a				ldx 	temp0 						; is the channel in use, if so we cannot play.
.1f48	bd 59 0c	lda $0c59,x			lda 	channelTime,x
.1f4b	d0 3f		bne $1f8c			bne 	_SCQExit
.1f4d	a2 00		ldx #$00			ldx 	#0 							; work through queue.
.1f4f					_SCQSearch:
.1f4f	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; reached the end, e.g. time = 0
.1f52	f0 38		beq $1f8c			beq 	_SCQExit
.1f54	bd 72 0c	lda $0c72,x			lda 	sndQueue+1,x 				; compare channel #
.1f57	c5 2a		cmp $2a				cmp 	temp0
.1f59	f0 08		beq $1f63			beq 	_SCQFound
.1f5b	8a		txa				txa
.1f5c	18		clc				clc
.1f5d	69 06		adc #$06			adc 	#6
.1f5f	8a		txa				txa
.1f60	4c 4f 1f	jmp $1f4f			jmp 	_SCQSearch
.1f63					_SCQFound:
.1f63	a4 2a		ldy $2a				ldy 	temp0 						; Y = channel #
.1f65	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; get time
.1f68	99 59 0c	sta $0c59,y			sta 	channelTime,y 				; write that in the time channel slot
.1f6b	ee 58 0c	inc $0c58			inc 	LiveChannels 				; one more playing.
.1f6e	da		phx				phx
.1f6f	a5 2a		lda $2a				lda 	temp0 						; get channel #
.1f71	20 ce 1f	jsr $1fce			jsr 	CSPointChannel  			; point VRAM pointer to it.
.1f74	a0 04		ldy #$04			ldy 	#4 							; counter
.1f76					_SCQCopy:
.1f76	bd 73 0c	lda $0c73,x			lda 	sndQueue+2,x 				; copy the sound production data to the PSG
.1f79	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1f7c	e8		inx				inx
.1f7d	88		dey				dey
.1f7e	d0 f6		bne $1f76			bne 	_SCQCopy
.1f80	fa		plx				plx
.1f81					_SCQDelete:
.1f81	bd 77 0c	lda $0c77,x			lda 	sndQueue+6,x 				; delete the queue entry
.1f84	9d 71 0c	sta $0c71,x			sta 	sndQueue,x
.1f87	e8		inx				inx
.1f88	e0 61		cpx #$61			cpx 	#sndQueueSize*6+1
.1f8a	d0 f5		bne $1f81			bne 	_SCQDelete
.1f8c					_SCQExit:
.1f8c	7a		ply				ply
.1f8d	fa		plx				plx
.1f8e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndunary.asm

.1f8f					Unary_Playing:
.1f8f	48		pha				pha 						; save stack position
.1f90	b1 28		lda ($28),y			lda 	(codePtr),y 		; check for playing()
.1f92	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f94	f0 2d		beq $1fc3			beq 	_UPCount
.1f96	68		pla				pla 						; get SP back.
.1f97	48		pha				pha
.1f98	a2 0c		ldx #$0c		ldx	#12
.1f9a	20 29 40	jsr $4029		jsr	mainHandler
.1f9d	a2 04		ldx #$04		ldx	#4
.1f9f	20 29 40	jsr $4029		jsr	mainHandler
.1fa2	fa		plx				plx
.1fa3	86 32		stx $32				stx 	tempShort 			; save X
.1fa5	b5 98		lda $98,x			lda 	esInt0,x 			; check level, must be < 16
.1fa7	c9 10		cmp #$10			cmp 	#16
.1fa9	b0 13		bcs $1fbe			bcs 	_UPValue
.1fab	aa		tax				tax 						; get the time
.1fac	bd 59 0c	lda $0c59,x			lda 	ChannelTime,x 		; 0 if zero, 255 if non-zero.
.1faf	f0 02		beq $1fb3			beq 	_UPZero
.1fb1	a9 ff		lda #$ff			lda 	#255
.1fb3					_UPZero:
.1fb3	a6 32		ldx $32				ldx 	tempShort 			; stack pointer back
.1fb5	95 98		sta $98,x			sta 	esInt0,x 			; return value
.1fb7					_UPSet13:
.1fb7	95 a0		sta $a0,x			sta 	esInt1,x
.1fb9	95 a8		sta $a8,x			sta 	esInt2,x
.1fbb	95 b0		sta $b0,x			sta 	esInt3,x
.1fbd	60		rts				rts
.1fbe					_UPValue:
.1fbe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fc0	20 27 15	jsr $1527		jsr	errorHandler
.1fc3					_UPCount:
.1fc3	c8		iny				iny 						; skip )
.1fc4	fa		plx				plx
.1fc5	ad 58 0c	lda $0c58			lda 	LiveChannels
.1fc8	95 98		sta $98,x			sta 	esInt0,x
.1fca	a9 00		lda #$00			lda 	#0
.1fcc	f0 e9		beq $1fb7			beq 	_UPSet13

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndutils.asm

.1fce					CSPointChannel:
.1fce	0a		asl a				asl 	a 							; 4 bytes / channel
.1fcf	0a		asl a				asl 	a
.1fd0	09 c0		ora #$c0			ora 	#X16VeraSound & $FF			; at $1F9C0
.1fd2	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1fd5	a9 f9		lda #$f9			lda 	#(X16VeraSound >> 8) & $FF
.1fd7	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1fda	a9 11		lda #$11			lda 	#(X16VeraSound >> 16) | $10
.1fdc	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1fdf	60		rts				rts
.1fe0					SoundReset:
.1fe0	a9 00		lda #$00			lda 	#0							; no channels playing
.1fe2	8d 58 0c	sta $0c58			sta 	LiveChannels
.1fe5	a2 0f		ldx #$0f			ldx 	#Channels-1
.1fe7					_SCClear:
.1fe7	9d 59 0c	sta $0c59,x			sta 	ChannelTime,x
.1fea	ca		dex				dex
.1feb	10 fa		bpl $1fe7			bpl 	_SCClear
.1fed	a2 61		ldx #$61			ldx 	#sndQueueSize*6+1 			; zero the sound queue.
.1fef					_SCClear2:
.1fef	9d 70 0c	sta $0c70,x			sta 	sndQueue-1,x
.1ff2	ca		dex				dex
.1ff3	d0 fa		bne $1fef			bne 	_SCClear2
.1ff5	a9 c0		lda #$c0			lda 	#X16VeraSound & $FF			; point VRAM data pointer to $1F9C0 increment
.1ff7	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1ffa	a9 f9		lda #$f9			lda 	#(X16VeraSound >> 8) & $FF
.1ffc	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1fff	a9 11		lda #$11			lda 	#(X16VeraSound >> 16) | $10
.2001	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2004					_SCClear3:
.2004	a9 00		lda #$00			lda 	#0
.2006	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2009	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.200c	d0 f6		bne $2004			bne 	_SCClear3
.200e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sound.asm

=16					Channels = 16 								; # of sound channels.
.0c58					LiveChannels:
>0c58							.fill 	1
.0c59					ChannelTime:
>0c59							.fill 	Channels 					; # of ticks until channels goes silent if non-zero
.0c69					sndPitch:
>0c69							.fill 	2
.0c6b					sndExtra:
>0c6b							.fill 	2
.0c6d					sndChannel:
>0c6d							.fill 	1
.0c6e					sndTime:
>0c6e							.fill 	1
.0c6f					sndType:
>0c6f							.fill 	1
.0c70					sndVolume:
>0c70							.fill 	1
=16					sndQueueSize = 16
.0c71					sndQueue:
>0c71							.fill	6*sndQueueSize+1 			; extra byte is so copy zero when deleting last element.
.200f					CommandSound:
.200f	a9 00		lda #$00			lda 	#0 							; clear the default sound options
.2011	8d 69 0c	sta $0c69			sta 	sndPitch
.2014	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.2017	8d 6f 0c	sta $0c6f			sta 	sndType
.201a	a9 ff		lda #$ff			lda 	#$FF 						; values are 255,63 are masked.
.201c	8d 6d 0c	sta $0c6d			sta 	sndChannel
.201f	8d 70 0c	sta $0c70			sta 	sndVolume
.2022	a9 05		lda #$05			lda 	#5 							; default time is 0.5s
.2024	8d 6e 0c	sta $0c6e			sta 	sndTime
.2027					_ComSoundLoop:
.2027	b1 28		lda ($28),y			lda 	(codePtr),y 				; next token
.2029	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line/colon do the sound
.202b	f0 55		beq $2082			beq 	_CSDoSound
.202d	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.202f	f0 51		beq $2082			beq 	_CSDoSound
.2031	c9 db		cmp #$db			cmp 	#TKW_AT 					; is it AT pitch ?
.2033	f0 29		beq $205e			beq 	_CSSetPitch
.2035	a2 03		ldx #$03			ldx 	#3 							; look up in the tokens table
.2037					_CSCheck:
.2037	dd 7e 20	cmp $207e,x			cmp 	_ComSoundTokens,x 			; if found token update value.
.203a	f0 10		beq $204c			beq 	_CSFoundToken
.203c	ca		dex				dex
.203d	10 f8		bpl $2037			bpl 	_CSCheck
.203f	c8		iny				iny
.2040	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR 					; was it sound CLEAR
.2042	d0 03		bne $2047			bne 	_CSSyntax
.2044	4c e0 1f	jmp $1fe0			jmp 	SoundReset
.2047					_CSSyntax:
.2047	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2049	20 27 15	jsr $1527		jsr	errorHandler
.204c					_CSFoundToken:
.204c	da		phx				phx
.204d	c8		iny				iny 								; skip it
.204e	a9 00		lda #$00			lda 	#0 							; get a small int
.2050	a2 0c		ldx #$0c		ldx	#12
.2052	20 29 40	jsr $4029		jsr	mainHandler
.2055	fa		plx				plx
.2056	a5 98		lda $98				lda 	esInt0 						; copy value to setup memory
.2058	9d 6d 0c	sta $0c6d,x			sta 	sndChannel,x
.205b	4c 27 20	jmp $2027			jmp 	_ComSoundLoop
.205e					_CSSetPitch:
.205e	c8		iny				iny 								; skip AT
.205f	a9 00		lda #$00			lda 	#0 							; get an integer.
.2061	a2 0a		ldx #$0a		ldx	#10
.2063	20 29 40	jsr $4029		jsr	mainHandler
.2066	a5 a8		lda $a8				lda 	esInt2 						; check range
.2068	05 b0		ora $b0				ora 	esInt3
.206a	d0 0d		bne $2079			bne 	_CSBadValue
.206c	a5 98		lda $98				lda 	esInt0	 					; copy into pitch and loop back
.206e	8d 69 0c	sta $0c69			sta 	sndPitch
.2071	a5 a0		lda $a0				lda 	esInt1
.2073	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.2076	4c 27 20	jmp $2027			jmp 	_ComSoundLoop
.2079					_CSBadValue:
.2079	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.207b	20 27 15	jsr $1527		jsr	errorHandler
.207e					_ComSoundTokens:
>207e	ce eb ea cf					.byte 	TKW_TO,TKW_TIME,TKW_TYPE,TKW_STEP
.2082					_CSDoSound:
.2082	ae 6d 0c	ldx $0c6d			ldx 	sndChannel 					; if channel >= 16 look for channel unused.
.2085	e0 10		cpx #$10			cpx 	#16
.2087	90 0f		bcc $2098			bcc 	_CSHaveChannel
.2089	a2 0f		ldx #$0f			ldx 	#15
.208b					_CSFindChannel:
.208b	bd 59 0c	lda $0c59,x			lda 	channelTime,x 				; time is zero e.g. sound off.
.208e	f0 08		beq $2098			beq 	_CSHaveChannel
.2090	ca		dex				dex
.2091	10 f8		bpl $208b			bpl 	_CSFindChannel 				; try all of them
.2093	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.2095	20 27 15	jsr $1527		jsr	errorHandler
.2098					_CSHaveChannel:
.2098	8e 6d 0c	stx $0c6d			stx 	sndChannel 					; update channel.
.209b	ad 6e 0c	lda $0c6e			lda 	sndTime 					; get how long
.209e	f0 29		beq $20c9			beq 	_CSExit 					; if zero then exit
.20a0	ad 70 0c	lda $0c70			lda 	sndVolume 					; get volume, max out at 63.
.20a3	c9 40		cmp #$40			cmp 	#64
.20a5	90 02		bcc $20a9			bcc 	_CSHaveVolume
.20a7	a9 3f		lda #$3f			lda 	#63
.20a9					_CSHaveVolume:
.20a9	09 c0		ora #$c0			ora 	#$C0 						; both channels
.20ab	8d 6b 0c	sta $0c6b			sta 	sndExtra 					; write out.
.20ae	ad 6f 0c	lda $0c6f			lda 	sndType 					; get waveform (bits 0-1 Pulse, Sawtooth, Triangle Noise)
.20b1	6a		ror a				ror 	a 							; rotate into position 7,6
.20b2	6a		ror a				ror 	a
.20b3	6a		ror a				ror 	a
.20b4	29 c0		and #$c0			and 	#$C0 						; mask other bits
.20b6	09 3f		ora #$3f			ora 	#63 						; 50% duty cycle.
.20b8	8d 6c 0c	sta $0c6c			sta 	sndExtra+1
.20bb	5a		phy				phy
.20bc	da		phx				phx
.20bd	a2 69		ldx #$69			ldx 	#sndPitch & 255 			; XY = sound data
.20bf	a0 0c		ldy #$0c			ldy 	#sndPitch >> 8
.20c1	20 0e 1f	jsr $1f0e			jsr 	SoundAddQueue 				; add it to the queue.
.20c4	68		pla				pla 								; get channel #
.20c5	20 42 1f	jsr $1f42			jsr 	SoundCheckQueue 			; check if we can play this one now, e.g. the queue was empty.
.20c8	7a		ply				ply
.20c9					_CSExit:
.20c9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/soundsync.asm

.20ca					SoundInterrupt:
.20ca	ad 58 0c	lda $0c58			lda 	LiveChannels 		; anything playing ?
.20cd	f0 2b		beq $20fa			beq 	_SIExit
.20cf	a2 0f		ldx #$0f			ldx 	#15 				; check each channel ?
.20d1	bd 59 0c	lda $0c59,x	_SILoop:lda 	channelTime,x 		; time left ?
.20d4	f0 21		beq $20f7			beq 	_SINext 	 		; if zero not playing
.20d6	38		sec				sec 						; subtract one from time
.20d7	e9 01		sbc #$01			sbc 	#1
.20d9	9d 59 0c	sta $0c59,x			sta 	channelTime,x
.20dc	d0 19		bne $20f7			bne 	_SINext 			; if non zero, time for sound off.
.20de	ce 58 0c	dec $0c58			dec 	LiveChannels 		; one fewer channels.
.20e1	8a		txa				txa 						; point to sound PSG
.20e2	20 ce 1f	jsr $1fce			jsr 	CSPointChannel
.20e5	a9 00		lda #$00			lda 	#0 					; zero it all out
.20e7	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20ea	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20ed	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20f0	8d 23 9f	sta $9f23			sta 	X16VeraData0
.20f3	8a		txa				txa 						; check the queue for this for more notes.
.20f4	20 42 1f	jsr $1f42			jsr 	SoundCheckQueue
.20f7	ca		dex		_SINext:dex
.20f8	10 d7		bpl $20d1			bpl 	_SILoop
.20fa					_SIExit:
.20fa	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0cd2					hitSprite1:
>0cd2							.fill 	1 							; this won't work ... if you nest HIT() which
.0cd3					hitSprite2:
>0cd3							.fill 	1
.0cd4					hitRange:
>0cd4							.fill 	1
.20fb					FunctionCollide:
.20fb	48		pha				pha 								; save and put index into X
.20fc	aa		tax				tax
.20fd	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.20ff	8d d4 0c	sta $0cd4			sta 	hitRange
.2102	20 a2 21	jsr $21a2			jsr 	_FCGetSpriteID
.2105	8d d2 0c	sta $0cd2			sta 	hitSprite1
.2108	da		phx				phx
.2109	a2 02		ldx #$02		ldx	#2
.210b	20 29 40	jsr $4029		jsr	mainHandler
.210e	fa		plx				plx
.210f	20 a2 21	jsr $21a2			jsr 	_FCGetSpriteID
.2112	8d d3 0c	sta $0cd3			sta 	hitSprite2
.2115	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.2117	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2119	f0 12		beq $212d			beq 	_FCParam2
.211b	da		phx				phx
.211c	a2 02		ldx #$02		ldx	#2
.211e	20 29 40	jsr $4029		jsr	mainHandler
.2121	68		pla				pla
.2122	a2 0c		ldx #$0c		ldx	#12
.2124	20 29 40	jsr $4029		jsr	mainHandler
.2127	aa		tax				tax
.2128	b5 98		lda $98,x			lda 	esInt0,x
.212a	8d d4 0c	sta $0cd4			sta 	hitRange
.212d					_FCParam2:
.212d	a2 04		ldx #$04		ldx	#4
.212f	20 29 40	jsr $4029		jsr	mainHandler
.2132	68		pla				pla 								; set X to point to the stack again.
.2133	48		pha				pha
.2134	aa		tax				tax
.2135	5a		phy				phy
.2136	18		clc				clc 								; do it with the horizontal values.
.2137	20 58 21	jsr $2158			jsr 	_FCCheck
.213a	90 0a		bcc $2146			bcc 	_FCFail
.213c	38		sec				sec 								; do it with the vertical values.
.213d	20 58 21	jsr $2158			jsr 	_FCCheck
.2140	90 04		bcc $2146			bcc 	_FCFail
.2142	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.2144	d0 02		bne $2148			bne 	_FCReturnA
.2146					_FCFail:
.2146	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.2148					_FCReturnA:
.2148	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.214a	7a		ply				ply
.214b	68		pla				pla 								; restore stack, return result and exit.
.214c	aa		tax				tax
.214d	a5 32		lda $32				lda 	tempShort
.214f	95 98		sta $98,x			sta 	esInt0,x
.2151	95 a0		sta $a0,x			sta 	esInt1,x
.2153	95 a8		sta $a8,x			sta 	esInt2,x
.2155	95 b0		sta $b0,x			sta 	esInt3,x
.2157	60		rts				rts
.2158					_FCCheck:
.2158	08		php				php 								; save the H/V flag twice
.2159	08		php				php
.215a	ad d2 0c	lda $0cd2			lda 	hitSprite1 					; select sprite 1 and read its location
.215d	20 e0 22	jsr $22e0			jsr 	SelectSpriteA 				; into X
.2160	28		plp				plp
.2161	20 04 24	jsr $2404			jsr 	SpriteReadCoordinate
.2164	ad d3 0c	lda $0cd3			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.2167	20 e0 22	jsr $22e0			jsr 	SelectSpriteA
.216a	e8		inx				inx
.216b	28		plp				plp
.216c	20 04 24	jsr $2404			jsr 	SpriteReadCoordinate
.216f	ca		dex				dex
.2170	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.2171	b5 98		lda $98,x			lda 	esInt0,x
.2173	f5 99		sbc $99,x			sbc 	esInt0+1,x
.2175	85 2a		sta $2a				sta 	temp0
.2177	b5 a0		lda $a0,x			lda 	esInt1,x
.2179	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.217b	85 2b		sta $2b				sta 	temp0+1
.217d	10 0d		bpl $218c			bpl 	_FCCIsPositive
.217f	38		sec				sec 								; if -ve calculate |difference|
.2180	a9 00		lda #$00			lda 	#0
.2182	e5 2a		sbc $2a				sbc 	temp0
.2184	85 2a		sta $2a				sta 	temp0
.2186	a9 00		lda #$00			lda 	#0
.2188	e5 2b		sbc $2b				sbc 	temp0+1
.218a	85 2b		sta $2b				sta 	temp0+1
.218c					_FCCIsPositive:
.218c	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.218e	d0 10		bne $21a0			bne 	_FCCFail
.2190	18		clc				clc 								; work out required min distance which is
.2191	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.2193	75 b1		adc $b1,x			adc 	esInt3+1,x
.2195	ac d4 0c	ldy $0cd4			ldy 	hitRange 					; get the hit range
.2198	f0 01		beq $219b			beq 	_FCCNoSetRange 				; override if non zero.
.219a	98		tya				tya
.219b					_FCCNoSetRange:
.219b	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.219d	f0 01		beq $21a0			beq 	_FCCFail
.219f	60		rts				rts
.21a0					_FCCFail:
.21a0	18		clc				clc
.21a1	60		rts				rts
.21a2					_FCGetSpriteID:
.21a2	8a		txa				txa
.21a3	a2 0c		ldx #$0c		ldx	#12
.21a5	20 29 40	jsr $4029		jsr	mainHandler
.21a8	aa		tax				tax
.21a9	b5 98		lda $98,x			lda 	esInt0,x
.21ab	30 01		bmi $21ae			bmi 	_FCGSValue
.21ad	60		rts				rts
.21ae					_FCGSValue:
.21ae	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.21b0	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0cd5					currSprite:
>0cd5							.fill 	2
.21b3					CommandSprite:
.21b3	20 b5 22	jsr $22b5			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.21b6	d0 0d		bne $21c5			bne 	_CSCheckClear
.21b8	ad 29 9f	lda $9f29			lda 	X16VeraDCVideo 				; sprite enable is bit 6.
.21bb	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.21bd	90 02		bcc $21c1			bcc 	_CSNotOn 					; if CS turn on, so set it
.21bf	09 40		ora #$40			ora 	#$40
.21c1					_CSNotOn:
.21c1	8d 29 9f	sta $9f29			sta 	X16VeraDCVideo 						; write it back in new state and exit
.21c4	60		rts				rts
.21c5					_CSCheckClear:
.21c5	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.21c7	8d d6 0c	sta $0cd6			sta 	currSprite+1
.21ca	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.21cc	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.21ce	d0 05		bne $21d5			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.21d0	20 c6 22	jsr $22c6			jsr 	CSClearSprites 				; clear all the sprites
.21d3	c8		iny				iny 								; consume CLEAR token and exit.
.21d4	60		rts				rts
.21d5					_CSCommandLoop:
.21d5	20 b5 22	jsr $22b5			jsr 	CSCheckOnOff 				; check sprite on/off
.21d8	f0 2c		beq $2206			beq 	_CSSetVisibility
.21da	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.21dc	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.21de	f0 25		beq $2205			beq 	_CSExit
.21e0	c8		iny				iny									; consume it
.21e1	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.21e3	f0 20		beq $2205			beq 	_CSExit
.21e5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.21e7	f0 ec		beq $21d5			beq 	_CSCommandLoop
.21e9	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.21eb	f0 69		beq $2256			beq 	_CSSetImage
.21ed	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.21ef	f0 2b		beq $221c			beq 	_CSSetFlip
.21f1	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.21f3	f0 46		beq $223b			beq 	_CSSetPos
.21f5	88		dey				dey 								; unpick DEY
.21f6	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.21f8	a2 0c		ldx #$0c		ldx	#12
.21fa	20 29 40	jsr $4029		jsr	mainHandler
.21fd	a5 98		lda $98				lda 	esInt0
.21ff	20 e0 22	jsr $22e0			jsr 	SelectSpriteA
.2202	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.2205					_CSExit:
.2205	60		rts				rts
.2206					_CSSetVisibility:
.2206	08		php				php 								; save carry
.2207	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.2209	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.220c	ad 23 9f	lda $9f23			lda 	X16VeraData0 						; read it.
.220f	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2211	28		plp				plp
.2212	90 02		bcc $2216			bcc 	_CSSetOff 					; check if carry was set
.2214	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2216					_CSSetOff:
.2216	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; update and loop back
.2219	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.221c					_CSSetFlip:
.221c	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.221e	a2 0c		ldx #$0c		ldx	#12
.2220	20 29 40	jsr $4029		jsr	mainHandler
.2223	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2225	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.2228	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.222a	29 03		and #$03			and 	#3
.222c	85 2a		sta $2a				sta 	temp0
.222e	ad 23 9f	lda $9f23			lda 	X16VeraData0 				; update the flip.
.2231	29 fc		and #$fc			and 	#$FC
.2233	05 2a		ora $2a				ora 	temp0
.2235	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2238	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.223b					_CSSetPos:
.223b	a9 00		lda #$00			lda 	#0 							; X now at level 0
.223d	a2 0a		ldx #$0a		ldx	#10
.223f	20 29 40	jsr $4029		jsr	mainHandler
.2242	a2 02		ldx #$02		ldx	#2
.2244	20 29 40	jsr $4029		jsr	mainHandler
.2247	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.2249	a2 0a		ldx #$0a		ldx	#10
.224b	20 29 40	jsr $4029		jsr	mainHandler
.224e	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2250	20 c2 23	jsr $23c2			jsr 	SpriteMove 					; move it.
.2253	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.2256					_CSSetImage:
.2256	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2258	a2 0c		ldx #$0c		ldx	#12
.225a	20 29 40	jsr $4029		jsr	mainHandler
.225d	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.225f	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.2262	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2264	bd 1d 0d	lda $0d1d,x			lda 	imageAddr32Low,x 			; copy low address in.
.2267	8d 23 9f	sta $9f23			sta 	X16VeraData0
.226a	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; bump to offset 1.
.226d	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2270	29 10		and #$10			and 	#$10
.2272	0a		asl a				asl 	a
.2273	0a		asl a				asl		a
.2274	0a		asl a				asl 	a 							; put into bit 7
.2275	1d 5d 0d	ora $0d5d,x			ora 	imageAddr32High,x 			; or high address with it.
.2278	8d 23 9f	sta $9f23			sta 	X16VeraData0 						; write the high byte.
.227b	a9 06		lda #$06			lda 	#6
.227d	20 9c 22	jsr $229c			jsr 	SpriteSetTarget 			; set sprite on.
.2280	ad 23 9f	lda $9f23			lda 	X16VeraData0
.2283	09 0c		ora #$0c			ora 	#$0C
.2285	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2288	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; point to byte 7 : height/width/palette offset
.228b	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get image info
.228e	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.228f	0a		asl a				asl 	a
.2290	0a		asl a				asl 	a
.2291	0a		asl a				asl 	a
.2292	b0 02		bcs $2296			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.2294	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.2296					_CSNoOffset:
.2296	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2299	4c d5 21	jmp $21d5			jmp 	_CSCommandLoop
.229c					SpriteSetTarget:
.229c	0d d5 0c	ora $0cd5			ora 	currSprite
.229f	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.22a2	ad d6 0c	lda $0cd6			lda 	currSprite+1
.22a5	f0 09		beq $22b0			beq 	_SSTNoSet
.22a7	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.22aa	a9 01		lda #$01			lda 	#$01
.22ac	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.22af	60		rts				rts
.22b0					_SSTNoSet:
.22b0	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.22b2	20 27 15	jsr $1527		jsr	errorHandler
.22b5					CSCheckOnOff:
.22b5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.22b7	c8		iny				iny
.22b8	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.22ba	18		clc				clc
.22bb	f0 08		beq $22c5			beq 	_CSCOExit
.22bd	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.22bf	38		sec				sec 								; return NE if neither.
.22c0	f0 03		beq $22c5			beq 	_CSCOExit
.22c2	88		dey				dey 								; undo consume
.22c3	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.22c5					_CSCOExit:
.22c5	60		rts				rts
.22c6					CSClearSprites:
.22c6	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.22c8	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.22cb	a9 fc		lda #$fc			lda 	#$FC
.22cd	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.22d0	a9 00		lda #$00			lda 	#0
.22d2	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.22d5					_CSClear:
.22d5	a9 00		lda #$00			lda 	#0 							; set everything to $00
.22d7	8d 23 9f	sta $9f23			sta 	X16VeraData0
.22da	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.22dd	d0 f6		bne $22d5			bne 	_CSClear
.22df	60		rts				rts
.22e0					SelectSpriteA:
.22e0	85 2a		sta $2a				sta 	temp0
.22e2	a9 00		lda #$00			lda 	#0
.22e4	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.22e6	b0 11		bcs $22f9			bcs 	_CSBadValue 				; sprites only 0-127
.22e8	06 2a		asl $2a				asl 	temp0
.22ea	2a		rol a				rol 	a
.22eb	06 2a		asl $2a				asl 	temp0
.22ed	2a		rol a				rol 	a
.22ee	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.22f0	8d d6 0c	sta $0cd6			sta 	currSprite+1
.22f3	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.22f5	8d d5 0c	sta $0cd5			sta 	currSprite+0
.22f8	60		rts				rts
.22f9					_CSBadValue
.22f9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.22fb	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0cd7					srenderWidth:
>0cd7							.fill 	1
.22fe					Command_Paint:
.22fe	a9 06		lda #$06			lda 	#ImageHandler & $FF
.2300	a2 23		ldx #$23			ldx 	#ImageHandler >> 8
.2302	20 e9 18	jsr $18e9			jsr 	GHandler
.2305	60		rts				rts
.2306					ImageHandler:
.2306	a9 0d		lda #$0d			lda 	#SpriteImageAccess & $FF
.2308	a2 23		ldx #$23			ldx 	#SpriteImageAccess >> 8
.230a	4c 71 1b	jmp $1b71			jmp 	ImageRenderer
.230d					SpriteImageAccess:
.230d	c0 ff		cpy #$ff			cpy 	#255
.230f	d0 22		bne $2333			bne 	_SIAGetPixel
.2311	ae 01 0c	ldx $0c01			ldx 	gdImage 					; get the image #
.2314	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get the image information.
.2317	48		pha				pha
.2318	29 03		and #$03			and 	#3 							; LSB x 2 width
.231a	aa		tax				tax
.231b	bd 2f 23	lda $232f,x			lda 	_SIASizeTable,x
.231e	8d d7 0c	sta $0cd7			sta 	sRenderWidth 				; save rendering width.
.2321	aa		tax				tax
.2322	68		pla				pla 								; get back next 2 bits are height
.2323	4a		lsr a				lsr 	a
.2324	4a		lsr a				lsr 	a
.2325	29 03		and #$03			and 	#3
.2327	a8		tay				tay
.2328	b9 2f 23	lda $232f,y			lda 	_SIASizeTable,y
.232b	a8		tay				tay
.232c	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.232e	60		rts				rts
.232f					_SIASizeTable:
>232f	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.2333					_SIAGetPixel:
.2333	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.2335	a9 00		lda #$00			lda 	#0
.2337	85 2b		sta $2b				sta 	temp0+1
.2339	ac 01 0c	ldy $0c01			ldy 	gdImage 					; get image info into A
.233c	b9 dd 0c	lda $0cdd,y			lda 	imageInfo,y
.233f	48		pha				pha
.2340	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.2342	85 2c		sta $2c				sta 	temp1
.2344	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.2345	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.2347	18		clc				clc
.2348	69 03		adc #$03			adc 	#3
.234a	a8		tay				tay
.234b					_SIAMultiply:
.234b	06 2a		asl $2a				asl 	temp0
.234d	26 2b		rol $2b				rol 	temp0+1
.234f	88		dey				dey
.2350	d0 f9		bne $234b			bne 	_SIAMultiply
.2352	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.2354	d0 04		bne $235a			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.2356	46 2b		lsr $2b				lsr 	temp0+1
.2358	66 2a		ror $2a				ror 	temp0
.235a					_SIANoHalf:
.235a	ae 01 0c	ldx $0c01			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.235d	bd 1d 0d	lda $0d1d,x			lda 	imageAddr32Low,x
.2360	85 2e		sta $2e				sta 	temp2
.2362	bd 5d 0d	lda $0d5d,x			lda 	imageAddr32High,x
.2365	85 2f		sta $2f				sta 	temp2+1
.2367	a9 00		lda #$00			lda 	#0
.2369	85 30		sta $30				sta 	temp3
.236b	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.236d					_SIMult32:
.236d	06 2e		asl $2e				asl 	temp2
.236f	26 2f		rol $2f				rol 	temp2+1
.2371	26 30		rol $30				rol 	temp3
.2373	ca		dex				dex
.2374	d0 f7		bne $236d			bne 	_SIMult32
.2376	ee 25 9f	inc $9f25			inc 	X16VeraControl 				; select alternate data port
.2379	18		clc				clc
.237a	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.237c	65 2e		adc $2e				adc 	temp2
.237e	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.2381	a5 2b		lda $2b				lda 	temp0+1
.2383	65 2f		adc $2f				adc 	temp2+1
.2385	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.2388	a9 10		lda #$10			lda 	#$10
.238a	65 30		adc $30				adc 	temp3
.238c	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.238f	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.2391					_SIFillCacheLoop:
.2391	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.2393	d0 12		bne $23a7			bne 	_SI8Bit
.2395	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; get data
.2398	48		pha				pha 								; save it
.2399	4a		lsr a				lsr 	a 							; MSB first
.239a	4a		lsr a				lsr 	a
.239b	4a		lsr a				lsr 	a
.239c	4a		lsr a				lsr 	a
.239d	20 b7 23	jsr $23b7			jsr 	_SIWrite4Bit
.23a0	68		pla				pla
.23a1	20 b7 23	jsr $23b7			jsr 	_SIWrite4Bit
.23a4	4c ae 23	jmp $23ae			jmp 	_SIAdvance
.23a7					_SI8Bit:
.23a7	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; copy data into render cache
.23aa	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.23ad	e8		inx				inx
.23ae					_SIAdvance:
.23ae	ec d7 0c	cpx $0cd7			cpx 	sRenderWidth 				; filled the cache to required width ?
.23b1	d0 de		bne $2391			bne 	_SIFillCacheLoop
.23b3	ce 25 9f	dec $9f25			dec 	X16VeraControl 				; select original data port.
.23b6	60		rts				rts
.23b7					_SIWrite4Bit:
.23b7	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.23b9	f0 02		beq $23bd			beq 	_SIW4Skip
.23bb	09 f0		ora #$f0			ora 	#$F0
.23bd					_SIW4Skip:
.23bd	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.23c0	e8		inx				inx
.23c1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.23c2					SpriteMove:
.23c2	5a		phy				phy
.23c3	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.23c5	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.23c8	ad 23 9f	lda $9f23			lda 	X16VeraData0
.23cb	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.23cc	4a		lsr a				lsr 	a
.23cd	4a		lsr a				lsr 	a
.23ce	4a		lsr a				lsr 	a
.23cf	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.23d1	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.23d3	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.23d6	20 e4 23	jsr $23e4			jsr 	SMWritePosition 					; write X position out.
.23d9	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.23db	46 2a		lsr $2a				lsr 	temp0
.23dd	e8		inx				inx 										; get the y position
.23de	20 e4 23	jsr $23e4			jsr 	SMWritePosition 					; and write that out.
.23e1	ca		dex				dex 										; fix X and quit.
.23e2	7a		ply				ply
.23e3	60		rts				rts
.23e4					SMWritePosition:
.23e4	a5 2a		lda $2a				lda 	temp0 								; get dim size
.23e6	29 03		and #$03			and 	#3 									; in range into Y
.23e8	a8		tay				tay
.23e9	38		sec				sec
.23ea	b5 98		lda $98,x			lda 	esInt0,x
.23ec	f9 00 24	sbc $2400,y			sbc 	SMHalfSize,y
.23ef	8d 23 9f	sta $9f23			sta 	X16VeraData0
.23f2	ee 20 9f	inc $9f20			inc 	X16VeraAddLow
.23f5	b5 a0		lda $a0,x			lda 	esInt1,x
.23f7	e9 00		sbc #$00			sbc 	#0
.23f9	8d 23 9f	sta $9f23			sta 	X16VeraData0
.23fc	ee 20 9f	inc $9f20			inc 	X16VeraAddLow
.23ff	60		rts				rts
.2400					SMHalfSize:
>2400	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2404					SpriteReadCoordinate:
.2404	5a		phy				phy
.2405	08		php				php 										; save CTR on stack
.2406	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2408	20 9c 22	jsr $229c			jsr 	SpriteSetTarget
.240b	ad 23 9f	lda $9f23			lda 	X16VeraData0
.240e	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.240f	4a		lsr a				lsr 	a
.2410	4a		lsr a				lsr 	a
.2411	4a		lsr a				lsr 	a
.2412	28		plp				plp 										; restore CTS
.2413	08		php				php
.2414	90 02		bcc $2418			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2416	4a		lsr a				lsr 	a
.2417	4a		lsr a				lsr 	a
.2418					_SPRCNotY1:
.2418	29 03		and #$03			and 	#3 									; point into half width/height
.241a	a8		tay				tay
.241b	b9 00 24	lda $2400,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.241e	95 b0		sta $b0,x			sta 	esInt3,x
.2420	28		plp				plp 										; CS Y CC X
.2421	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2423	2a		rol a				rol 	a
.2424	2a		rol a				rol 	a
.2425	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2427	20 9c 22	jsr $229c			jsr 	SpriteSetTarget 					; set data pointer offset by that
.242a	18		clc				clc 										; read and unfix centre.
.242b	ad 23 9f	lda $9f23			lda 	X16VeraData0
.242e	75 b0		adc $b0,x			adc 	esInt3,x
.2430	95 98		sta $98,x			sta 	esInt0,x
.2432	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 						; do MSB
.2435	ad 23 9f	lda $9f23			lda 	X16VeraData0
.2438	69 00		adc #$00			adc 	#0
.243a	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.243c	c9 08		cmp #$08			cmp		#$08
.243e	90 02		bcc $2442			bcc 	_SPRCNoSX
.2440	09 f0		ora #$f0			ora 	#$F0
.2442					_SPRCNoSX:
.2442	95 a0		sta $a0,x			sta 	esInt1,x
.2444	7a		ply				ply
.2445	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2446					Sprite_GetX:
.2446	18		clc				clc
.2447	90 01		bcc $244a			bcc 	SpriteGetCode
.2449					Sprite_GetY:
.2449	38		sec				sec
.244a					SpriteGetCode:
.244a	08		php				php 								; CLC : X SEC: Y, save on stack.
.244b	48		pha				pha 								; save stack position
.244c	20 67 24	jsr $2467			jsr 	GetSpriteNumber 			; get # of sprite.
.244f	a2 04		ldx #$04		ldx	#4
.2451	20 29 40	jsr $4029		jsr	mainHandler
.2454	fa		plx				plx
.2455	28		plp				plp 								; which one ?
.2456	20 04 24	jsr $2404			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.2459	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.245b	29 80		and #$80			and 	#$80
.245d	f0 02		beq $2461			beq 	_SGXYPos
.245f	a9 ff		lda #$ff			lda 	#$FF
.2461					_SGXYPos:
.2461	95 a8		sta $a8,x			sta 	esInt2,x
.2463	95 b0		sta $b0,x			sta 	esInt3,x
.2465	8a		txa				txa 								; return NSP in A
.2466	60		rts				rts
.2467					GetSpriteNumber:
.2467	48		pha				pha
.2468	a2 0c		ldx #$0c		ldx	#12
.246a	20 29 40	jsr $4029		jsr	mainHandler
.246d	fa		plx				plx
.246e	b5 98		lda $98,x			lda 	esInt0,x
.2470	20 e0 22	jsr $22e0			jsr 	SelectSpriteA
.2473	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/imagedef.asm

.2474					Command_Image:
.2474	a9 00		lda #$00			lda 	#0 							; get a small int
.2476	a2 0c		ldx #$0c		ldx	#12
.2478	20 29 40	jsr $4029		jsr	mainHandler
.247b	5a		phy				phy
.247c	a5 98		lda $98				lda 	esInt0 						; get character #
.247e	a0 00		ldy #$00			ldy 	#0 							; offset 0
.2480	20 2f 26	jsr $262f			jsr 	PointVeraCharacterA 		; routine in textdraw that points to character A
.2483	7a		ply				ply
.2484					_CILoop:
.2484	b1 28		lda ($28),y			lda 	(codePtr),Y 				; followed by ,
.2486	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2488	d0 10		bne $249a			bne 	_CIExit 					; no, then done.
.248a	c8		iny				iny 								; skip comma
.248b	a9 00		lda #$00			lda 	#0 							; get a small int
.248d	a2 0c		ldx #$0c		ldx	#12
.248f	20 29 40	jsr $4029		jsr	mainHandler
.2492	a5 98		lda $98				lda 	esInt0
.2494	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; write to vera
.2497	4c 84 24	jmp $2484			jmp 	_CILoop
.249a					_CIExit:
.249a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0cd8					currentMode:
>0cd8							.fill 	4
.249b					ForceMode0:
.249b	a2 00		ldx #$00			ldx 	#0
.249d	86 98		stx $98				stx 	esInt0 						; in case we do it, like mode n command, set +0
.249f					_FMCheck:
.249f	bd 34 25	lda $2534,x			lda 	CMModeList,x 				; do we need to switch ?
.24a2	dd d8 0c	cmp $0cd8,x			cmp 	currentMode,x
.24a5	d0 17		bne $24be			bne 	CMSetMode 					; different so switch.
.24a7	e8		inx				inx
.24a8	e0 04		cpx #$04			cpx 	#4 							; compared all four bytes.
.24aa	d0 f3		bne $249f			bne 	_FMCheck
.24ac	60		rts				rts
.24ad					CommandMode:
.24ad	a9 00		lda #$00			lda 	#0 							; get mode number
.24af	a2 0a		ldx #$0a		ldx	#10
.24b1	20 29 40	jsr $4029		jsr	mainHandler
.24b4	20 b8 24	jsr $24b8			jsr 	SetModeTOS
.24b7	60		rts				rts
.24b8					SetModeTOS:
.24b8	a5 b0		lda $b0				lda 	esInt3 						; these 3 bits goto $9F29 as Sprites/Layer enable
.24ba	29 70		and #$70			and 	#$70 						; so if they are all zero then this is likely a mode number
.24bc	d0 06		bne $24c4			bne 	CMNoExpand 					; otherwise it is a user defined 32 bit one.
.24be					CMSetMode:
.24be	20 15 25	jsr $2515			jsr 	CMExpandMode 				; mode number -> mode definition
.24c1	4c d8 24	jmp $24d8			jmp 	CMUpdateMode
.24c4					CMNoExpand:
.24c4	a5 98		lda $98				lda 	esInt0 						; copy 32 bit data to current mode.
.24c6	8d d8 0c	sta $0cd8			sta 	currentMode
.24c9	a5 a0		lda $a0				lda 	esInt1
.24cb	8d d9 0c	sta $0cd9			sta 	currentMode+1
.24ce	a5 a8		lda $a8				lda 	esInt2
.24d0	8d da 0c	sta $0cda			sta 	currentMode+2
.24d3	a5 b0		lda $b0				lda 	esInt3
.24d5	8d db 0c	sta $0cdb			sta 	currentMode+3
.24d8					CMUpdateMode:
.24d8	a2 11		ldx #$11			ldx 	#$11
.24da					_CMClear:
.24da	a9 00		lda #$00			lda 	#0
.24dc	9d 29 9f	sta $9f29,x			sta 	X16VeraDCVideo,X
.24df	ca		dex				dex
.24e0	10 f8		bpl $24da			bpl 	_CMClear
.24e2	ad db 0c	lda $0cdb			lda 	currentMode+3 				; get current mode
.24e5	48		pha				pha 								; stack twice.
.24e6	48		pha				pha
.24e7	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.24e9	09 01		ora #$01			ora 	#$01 						; turn the output on.
.24eb	8d 29 9f	sta $9f29			sta 	X16VeraDCVideo 				; write to DC_VIDEO
.24ee	68		pla				pla 								; get back
.24ef	20 44 25	jsr $2544			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.24f2	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.24f5	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.24f6	4a		lsr a				lsr 	a
.24f7	4a		lsr a				lsr 	a
.24f8	20 44 25	jsr $2544			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.24fb	8d 2b 9f	sta $9f2b			sta 	X16VeraVScale
.24fe	a2 00		ldx #$00			ldx 	#0 							; this is offset from X16VeraLayerConfig to do L0
.2500	ad d8 0c	lda $0cd8			lda 	currentMode					; get L0 config byte
.2503	20 4f 25	jsr $254f			jsr 	CMDecodeLayer 				; and decode layer 0
.2506	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2508	ad d9 0c	lda $0cd9			lda 	currentMode+1
.250b	20 4f 25	jsr $254f			jsr 	CMDecodeLayer
.250e	20 9e 1d	jsr $1d9e			jsr 	gdModeChanged 				; check the bitmap status.
.2511	20 d4 18	jsr $18d4			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2514	60		rts				rts
.2515					CMExpandMode:
.2515	a5 98		lda $98				lda 	esInt0 						; get mode number, check it is valid.
.2517	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2519	b0 14		bcs $252f			bcs 	_CMModeError
.251b	0a		asl a				asl 	a 							; x 4 into X
.251c	0a		asl a				asl 	a
.251d	aa		tax				tax
.251e	5a		phy				phy
.251f	a0 00		ldy #$00			ldy 	#0
.2521					_CMEMCopy:
.2521	bd 34 25	lda $2534,x			lda 	CMModeList,x 				; copy defined mode data in , 4 bytes
.2524	99 d8 0c	sta $0cd8,y			sta 	currentMode,y
.2527	e8		inx				inx
.2528	c8		iny				iny
.2529	c0 04		cpy #$04			cpy 	#4
.252b	d0 f4		bne $2521			bne 	_CMEMCopy
.252d	7a		ply				ply
.252e	60		rts				rts
.252f					_CMModeError:
.252f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2531	20 27 15	jsr $1527		jsr	errorHandler
.2534					CMModeList:
>2534	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2538	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>253c	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>2540	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2544					CMEndModeList:
.2544					CMToScale:
.2544	29 03		and #$03			and 	#3 							; lower 2 bits only
.2546	aa		tax				tax 								; put in X for counting
.2547	a9 00		lda #$00			lda 	#0 							; zero result
.2549	38		sec				sec 								; first time rotate CS in
.254a					_CMTSLoop:
.254a	6a		ror a				ror 	a
.254b	ca		dex				dex
.254c	10 fc		bpl $254a			bpl 	_CMTSLoop
.254e	60		rts				rts
.254f					CMDecodeLayer:
.254f	48		pha				pha 								; save it.
.2550	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2552	9d 2d 9f	sta $9f2d,x			sta 	X16VeraLayerConfig,X
.2555	68		pla				pla 								; get it back
.2556	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2558	f0 02		beq $255c			beq 	_CMDLNotSet
.255a	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.255c					_CMDLNotSet:
.255c	e0 00		cpx #$00			cpx 	#0
.255e	f0 06		beq $2566			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.2560	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2562	9d 2f 9f	sta $9f2f,x			sta 	X16VeraLayerTileBase,X
.2565	60		rts				rts
.2566					_CMDLayer0:
.2566	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2568	9d 2f 9f	sta $9f2f,x			sta 	X16VeraLayerTileBase,X
.256b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.256c					CommandPalette:
.256c	a9 00		lda #$00			lda 	#0
.256e	a2 0c		ldx #$0c		ldx	#12
.2570	20 29 40	jsr $4029		jsr	mainHandler
.2573	a2 02		ldx #$02		ldx	#2
.2575	20 29 40	jsr $4029		jsr	mainHandler
.2578	a9 01		lda #$01			lda 	#1 						; palette RGB -> 1
.257a	a2 08		ldx #$08		ldx	#8
.257c	20 29 40	jsr $4029		jsr	mainHandler
.257f	a5 98		lda $98				lda 	esInt0 					; get palette #
.2581	20 91 25	jsr $2591			jsr 	PointToPaletteA			; point to palette register
.2584	a5 99		lda $99				lda 	esInt0+1				; copy 12 bits of palette data to vera
.2586	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2589	a5 a1		lda $a1				lda 	esInt1+1
.258b	29 0f		and #$0f			and 	#$0F
.258d	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2590	60		rts				rts
.2591					PointToPaletteA:
.2591	0a		asl a				asl 	a 							; x 2 -> LSB
.2592	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.2595	a9 00		lda #$00			lda 	#0 							; carry into A
.2597	2a		rol a				rol 	a
.2598	09 fa		ora #$fa			ora 	#(X16VeraPalette >> 8)&$FF	; make correct address
.259a	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.259d	a9 11		lda #$11			lda 	#(X16VeraPalette >> 16)|$10	; $01 and single step => X16VeraAddHigh
.259f	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.25a2	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

.25a3					Command_Draw:
.25a3	a9 ab		lda #$ab			lda 	#TextHandler & $FF
.25a5	a2 25		ldx #$25			ldx 	#TextHandler >> 8
.25a7	20 e9 18	jsr $18e9			jsr 	GHandler
.25aa	60		rts				rts
.25ab					TextHandler:
.25ab	ad 08 0c	lda $0c08			lda 	gdText+1 					; do we have a string
.25ae	d0 1a		bne $25ca			bne 	_THHasString
.25b0					_THCallRenderer:
.25b0	da		phx				phx
.25b1	ad f2 0b	lda $0bf2			lda 	gy2
.25b4	48		pha				pha
.25b5	ad f3 0b	lda $0bf3			lda 	gy2+1
.25b8	48		pha				pha
.25b9	a9 fe		lda #$fe			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.25bb	a2 25		ldx #$25			ldx 	#BitmapTextAccess >> 8
.25bd	20 71 1b	jsr $1b71			jsr 	ImageRenderer
.25c0	68		pla				pla 								; restore y position and x register
.25c1	8d f3 0b	sta $0bf3			sta 	gy2+1
.25c4	68		pla				pla
.25c5	8d f2 0b	sta $0bf2			sta 	gy2
.25c8	fa		plx				plx
.25c9	60		rts				rts
.25ca					_THHasString:
.25ca	a2 00		ldx #$00			ldx 	#0 							; position in string
.25cc					_THStringLoop:
.25cc	ad 07 0c	lda $0c07			lda 	gdText 						; text => temp0
.25cf	85 2a		sta $2a				sta 	temp0
.25d1	ad 08 0c	lda $0c08			lda 	gdText+1
.25d4	85 2b		sta $2b				sta 	temp0+1
.25d6	8a		txa				txa 								; length = string length.
.25d7	a0 00		ldy #$00			ldy 	#0
.25d9	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.25db	f0 20		beq $25fd			beq 	_THExit 					; if so exit.
.25dd	e8		inx				inx 								; next character, put in Y
.25de	8a		txa				txa
.25df	a8		tay				tay
.25e0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.25e2	8d 01 0c	sta $0c01			sta 	gdImage
.25e5	20 b0 25	jsr $25b0			jsr 	_THCallRenderer 			; render the text
.25e8	ad 00 0c	lda $0c00			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.25eb	0a		asl a				asl		a
.25ec	0a		asl a				asl 	a
.25ed	0a		asl a				asl 	a
.25ee	18		clc				clc
.25ef	6d f0 0b	adc $0bf0			adc 	gX2 						; add to horizontal position
.25f2	8d f0 0b	sta $0bf0			sta 	gx2
.25f5	90 d5		bcc $25cc			bcc 	_THStringLoop
.25f7	ee f1 0b	inc $0bf1			inc 	gx2+1
.25fa	4c cc 25	jmp $25cc			jmp 	_THStringLoop 				; do the whole lot.
.25fd					_THExit:
.25fd	60		rts				rts
.25fe					BitmapTextAccess:
.25fe	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.2600	d0 07		bne $2609			bne 	_BTABitmap
.2602	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.2604	a2 08		ldx #$08			ldx 	#8
.2606	a0 08		ldy #$08			ldy 	#8
.2608	60		rts				rts
.2609					_BTABitmap:
.2609	ad 01 0c	lda $0c01			lda 	gdImage 					; Image => temp0:A
.260c	20 10 26	jsr $2610			jsr 	GetRenderCharacterA
.260f	60		rts				rts
.2610					GetRenderCharacterA:
.2610	ee 25 9f	inc $9f25			inc 	X16VeraControl 				; alternate port set.
.2613	20 2f 26	jsr $262f			jsr 	PointVeraCharacterA
.2616	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; get bitmap
.2619	ce 25 9f	dec $9f25			dec 	X16VeraControl 				; original port set back
.261c	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.261e	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.2620					_BTADoCache:
.2620	a9 00		lda #$00			lda 	#0
.2622	46 2a		lsr $2a				lsr 	temp0
.2624	90 02		bcc $2628			bcc 	_BTANotSet
.2626	a9 ff		lda #$ff			lda 	#255
.2628					_BTANotSet:
.2628	9d 10 0c	sta $0c10,x			sta 	renderCache,x
.262b	ca		dex				dex
.262c	10 f2		bpl $2620			bpl 	_BTADoCache
.262e	60		rts				rts
.262f					PointVeraCharacterA:
.262f	85 2a		sta $2a				sta 	temp0
.2631	a9 00		lda #$00			lda 	#0
.2633	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.2635	2a		rol a				rol 	a
.2636	06 2a		asl $2a				asl 	temp0
.2638	2a		rol a				rol 	a
.2639	06 2a		asl $2a				asl 	temp0
.263b	2a		rol a				rol 	a
.263c	09 f8		ora #$f8			ora 	#(VeraDefaultFont >> 8)&$FF ; A now points into font table.
.263e	8d 21 9f	sta $9f21			sta 	X16VeraAddMed 				; set up address
.2641	a9 10		lda #$10			lda 	#$10+(VeraDefaultFont >> 16)
.2643	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2646	84 32		sty $32				sty 	tempShort
.2648	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.264a	05 32		ora $32				ora 	tempShort
.264c	8d 20 9f	sta $9f20			sta 	X16VeraAddLow 				; address set up.
.264f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.2650					Command_VLoad:
.2650	a9 00		lda #$00			lda 	#0 								; string which is the file name
.2652	a2 0e		ldx #$0e		ldx	#14
.2654	20 29 40	jsr $4029		jsr	mainHandler
.2657	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.2659	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.265b	95 98		sta $98,x			sta 	esInt0,x
.265d	a5 36		lda $36				lda 	lowMemory+1
.265f	95 a0		sta $a0,x			sta 	esInt1,x
.2661	a9 00		lda #$00			lda 	#0
.2663	95 a8		sta $a8,x			sta 	esInt2,x
.2665	95 b0		sta $b0,x			sta 	esInt3,x
.2667	a2 0c		ldx #$0c		ldx	#12
.2669	20 05 15	jsr $1505		jsr	deviceHandler
.266c	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.266e	85 2a		sta $2a				sta 	temp0
.2670	a5 a1		lda $a1				lda 	esInt1+1
.2672	85 2b		sta $2b				sta 	temp0+1
.2674	20 ef 26	jsr $26ef			jsr 	LoadVRAMFile 					; load the VRAM file in.
.2677	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2678					Command_VPoke:
.2678	38		sec				sec 						; one byte , CS
.2679	b0 01		bcs $267c			bcs 	CmdVideoWrite
.267b					Command_VDoke:
.267b	18		clc				clc 						; two bytes, CC
.267c					CmdVideoWrite:
.267c	08		php				php 						; save one or two btes
.267d	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.267f	a2 0a		ldx #$0a		ldx	#10
.2681	20 29 40	jsr $4029		jsr	mainHandler
.2684	a2 02		ldx #$02		ldx	#2
.2686	20 29 40	jsr $4029		jsr	mainHandler
.2689	a9 01		lda #$01			lda 	#1
.268b	a2 0a		ldx #$0a		ldx	#10
.268d	20 29 40	jsr $4029		jsr	mainHandler
.2690	a2 00		ldx #$00			ldx 	#0
.2692	20 a3 26	jsr $26a3			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2695	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2697	8d 23 9f	sta $9f23			sta 	X16VeraData0
.269a	28		plp				plp 						; if it was Poke then exit
.269b	b0 05		bcs $26a2			bcs 	_CVWExit
.269d	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.269f	8d 23 9f	sta $9f23			sta 	X16VeraData0
.26a2					_CVWExit:
.26a2	60		rts				rts
.26a3					SetUpTOSVRamAddress:
.26a3	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.26a5	29 fe		and #$fe			and 	#$FE
.26a7	15 b0		ora $b0,x			ora 	esInt3,x
.26a9	d0 14		bne $26bf			bne 	CVWValue
.26ab	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.26ad	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.26b0	b5 a0		lda $a0,x			lda 	esInt1,x
.26b2	8d 21 9f	sta $9f21			sta	 	X16VeraAddMed
.26b5	b5 a8		lda $a8,x			lda 	esInt2,x
.26b7	29 01		and #$01			and 	#1
.26b9	09 10		ora #$10			ora 	#$10 				; step 1.
.26bb	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.26be	60		rts				rts
.26bf					CVWValue:
.26bf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.26c1	20 27 15	jsr $1527		jsr	errorHandler
.26c4					Command_VPeek:
.26c4	38		sec				sec 						; one byte , CS
.26c5	b0 01		bcs $26c8			bcs 	CmdVideoRead
.26c7					Command_VDeek:
.26c7	18		clc				clc 						; two bytes, CC
.26c8					CmdVideoRead:
.26c8	08		php				php 						; save action on stack.
.26c9	48		pha				pha 						; save stack position
.26ca	a2 0a		ldx #$0a		ldx	#10
.26cc	20 29 40	jsr $4029		jsr	mainHandler
.26cf	a2 04		ldx #$04		ldx	#4
.26d1	20 29 40	jsr $4029		jsr	mainHandler
.26d4	fa		plx				plx
.26d5	20 a3 26	jsr $26a3			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.26d8	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.26da	95 a0		sta $a0,x			sta 	esInt1,x
.26dc	95 a8		sta $a8,x			sta 	esInt2,x
.26de	95 b0		sta $b0,x			sta 	esInt3,x
.26e0	ad 23 9f	lda $9f23			lda 	X16VeraData0				; copy 1st byte
.26e3	95 98		sta $98,x			sta 	esInt0,x
.26e5	28		plp				plp 						; check if DOKE (carry was clear)
.26e6	b0 05		bcs $26ed			bcs 	_CVRExit
.26e8	ad 23 9f	lda $9f23			lda 	X16VeraData0 				; copy 2nd byte
.26eb	95 a0		sta $a0,x			sta 	esInt1,x
.26ed					_CVRExit:
.26ed	8a		txa				txa 						; return X position.
.26ee	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0cdc					compressMode:
>0cdc							.fill 	1
.0cdd					imageInfo:
>0cdd							.fill 	X16MaxImages
.0d1d					imageAddr32Low:
>0d1d							.fill  	X16MaxImages
.0d5d					imageAddr32High:
>0d5d							.fill  	X16MaxImages
.26ef					LoadVRAMFile:
.26ef	da		phx				phx
.26f0	5a		phy				phy
.26f1					_LVRLoop:
.26f1	20 cb 27	jsr $27cb			jsr 	LVFGet 						; get the next (never access direct)
.26f4	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.26f6	f0 42		beq $273a			beq 	_LVRExit
.26f8	b0 5a		bcs $2754			bcs 	_LVRLoad 					; load data in ?
.26fa	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.26fc	90 11		bcc $270f			bcc 	_LVRSetAddress
.26fe	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2700	f0 3b		beq $273d			beq 	_LVRSetPalette
.2702	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2704	90 2d		bcc $2733			bcc 	_LVRSetCompress
.2706	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2708	90 5e		bcc $2768			bcc 	_LVRSetSprite
.270a	a2 01		ldx #$01			ldx 	#ErrorID_missing
.270c	20 27 15	jsr $1527		jsr	errorHandler
.270f					_LVRSetAddress:
.270f	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2711	20 cb 27	jsr $27cb			jsr 	LVFGet
.2714	85 2c		sta $2c				sta 	temp1
.2716	a9 00		lda #$00			lda 	#0
.2718	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.271a	66 2c		ror $2c				ror 	temp1
.271c	6a		ror a				ror		a
.271d	46 2d		lsr $2d				lsr 	temp1+1
.271f	66 2c		ror $2c				ror 	temp1
.2721	6a		ror a				ror		a
.2722	8d 20 9f	sta $9f20			sta 	X16VeraAddLow 						; set write address with +1 increment
.2725	a5 2c		lda $2c				lda 	temp1
.2727	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.272a	a5 2d		lda $2d				lda 	temp1+1
.272c	09 10		ora #$10			ora 	#$10
.272e	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2731	d0 be		bne $26f1			bne 	_LVRLoop
.2733					_LVRSetCompress:
.2733	29 07		and #$07			and 	#7
.2735	8d dc 0c	sta $0cdc			sta 	compressMode
.2738	10 b7		bpl $26f1			bpl 	_LVRLoop
.273a					_LVRExit:
.273a	7a		ply				ply
.273b	fa		plx				plx
.273c	60		rts				rts
.273d					_LVRSetPalette:
.273d	20 cb 27	jsr $27cb			jsr 	LVFGet 						; get palette id.
.2740	20 91 25	jsr $2591			jsr 	PointToPaletteA 			; in palette.asm
.2743	20 cb 27	jsr $27cb			jsr 	LVFGet 						; copy 12 bit palette data in.
.2746	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; and send to Vera
.2749	20 cb 27	jsr $27cb			jsr 	LVFGet
.274c	29 0f		and #$0f			and 	#$0F
.274e	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2751	4c f1 26	jmp $26f1			jmp 	_LVRLoop
.2754					_LVRLoad:
.2754	ae dc 0c	ldx $0cdc			ldx 	compressMode
.2757	d0 55		bne $27ae			bne 	_LVRNotMode0
.2759	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.275b					_LVRLCopyX:
.275b	aa		tax				tax
.275c					_LVRLCopy:
.275c	20 cb 27	jsr $27cb			jsr 	LVFGet 						; write to data.
.275f	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2762	ca		dex				dex
.2763	d0 f7		bne $275c			bne 	_LVRLCopy
.2765	4c f1 26	jmp $26f1			jmp 	_LVRLoop
.2768					_LVRSetSprite:
.2768	48		pha				pha 								; save on stack
.2769	20 cb 27	jsr $27cb			jsr 	LVFGet 						; get the sprite number into X
.276c	aa		tax				tax
.276d	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.276f	b0 38		bcs $27a9			bcs 	_LVRSSValue
.2771	68		pla				pla 								; restore the data held in the first byte
.2772	9d dd 0c	sta $0cdd,x			sta 	imageInfo,x 				; and write into the sprite image table.
.2775					_LVRAlignVRAM:
.2775	ad 20 9f	lda $9f20			lda 	X16VeraAddLow 				; check VRAM on 32 byte boundary
.2778	29 1f		and #$1f			and 	#$1F 						; sprite image addresses are limited to this.
.277a	f0 07		beq $2783			beq 	_LVRAligned
.277c	a9 00		lda #$00			lda 	#$00
.277e	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2781	f0 f2		beq $2775			beq 	_LVRAlignVRAM
.2783					_LVRAligned:
.2783	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh 				; put address/32 in sprite image table
.2786	4a		lsr a				lsr 	a 	 						; first halve into temp1
.2787	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.278a	6a		ror a				ror 	a
.278b	85 2d		sta $2d				sta 	temp1+1
.278d	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.2790	6a		ror a				ror 	a
.2791	85 2c		sta $2c				sta 	temp1
.2793	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2795					_LVRShift:
.2795	46 2d		lsr $2d				lsr 	temp1+1
.2797	66 2c		ror $2c				ror 	temp1
.2799	88		dey				dey
.279a	d0 f9		bne $2795			bne 	_LVRShift
.279c	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.279e	9d 5d 0d	sta $0d5d,x			sta 	imageAddr32High,x
.27a1	a5 2c		lda $2c				lda 	temp1
.27a3	9d 1d 0d	sta $0d1d,x			sta 	imageAddr32Low,x
.27a6	4c f1 26	jmp $26f1			jmp 	_LVRLoop
.27a9					_LVRSSValue:
.27a9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.27ab	20 27 15	jsr $1527		jsr	errorHandler
.27ae					_LVRNotMode0:
.27ae	e0 01		cpx #$01			cpx 	#1
.27b0	d0 15		bne $27c7			bne 	_LVRNotMode1
.27b2	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.27b4	c9 40		cmp #$40			cmp 	#$40
.27b6	90 a3		bcc $275b			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.27b8					_LVRRLEGroup:
.27b8	29 3f		and #$3f			and 	#$3F 						; the number of copies of the following byte.
.27ba	aa		tax				tax
.27bb	20 cb 27	jsr $27cb			jsr 	LVFGet 						; get the byte to copy
.27be					_LVRLEGroupLoop:
.27be	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; write it out X times
.27c1	ca		dex				dex
.27c2	d0 fa		bne $27be			bne 	_LVRLEGroupLoop
.27c4	4c f1 26	jmp $26f1			jmp 	_LVRLoop
.27c7					_LVRNotMode1:
>27c7	db						.byte 	$DB
.27c8	4c c7 27	jmp $27c7			jmp 	_LVRNotMode1
.27cb	84 32		sty $32		LVFGet:	sty 	tempShort
.27cd	a0 00		ldy #$00			ldy 	#0
.27cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.27d1	a4 32		ldy $32				ldy	 	tempShort
.27d3	e6 2a		inc $2a				inc 	temp0
.27d5	d0 02		bne $27d9			bne 	_LVFGExit
.27d7	e6 2b		inc $2b				inc 	temp0+1
.27d9					_LVFGExit:
.27d9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.27da					section_end_extension:
.27da					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.27da					floatingpointHandler:
.27da	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.27dc	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: basic.asm

.27df					section_end_floatingpoint:
.27df					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.27df					ColdStartEntry:
.27df	a2 ff		ldx #$ff			ldx 	#$FF
.27e1	9a		txs				txs
.27e2	20 6b 28	jsr $286b			jsr 	ForceStandardMode
.27e5	a2 02		ldx #$02		ldx	#2
.27e7	20 05 15	jsr $1505		jsr	deviceHandler
.27ea	a0 ff		ldy #$ff			ldy 	#255
.27ec					_CSBanner:
.27ec	c8		iny				iny
.27ed	b9 13 28	lda $2813,y			lda 	Intro,y
.27f0	f0 14		beq $2806			beq 	_CSStart
.27f2	c9 08		cmp #$08			cmp 	#8
.27f4	90 08		bcc $27fe			bcc 	_CSInk
.27f6	a2 14		ldx #$14		ldx	#20
.27f8	20 05 15	jsr $1505		jsr	deviceHandler
.27fb	4c ec 27	jmp $27ec			jmp 	_CSBanner
.27fe					_CSInk:
.27fe	a2 06		ldx #$06		ldx	#6
.2800	20 05 15	jsr $1505		jsr	deviceHandler
.2803	4c ec 27	jmp $27ec			jmp 	_CSBanner
.2806					_CSStart:
.2806	a2 16		ldx #$16		ldx	#22
.2808	20 29 40	jsr $4029		jsr	mainHandler
.280b	a2 06		ldx #$06		ldx	#6
.280d	20 29 40	jsr $4029		jsr	mainHandler
.2810	4c 2b 29	jmp $292b			jmp 	WarmStartEntry
>2813	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>281b	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>282b	20 2a 2a 2a 0d 0d
>2831	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>2839	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>2849	32 30 32 31 0d 0d
>284f	02 42 61 73 69 63 20				.text 	2,"Basic "
>2856	30 2e 33 32					.text "0.32"
>285a	20 28						.text 	" ("
>285c	32 37 2d 41 70 72 2d 32				.text "27-Apr-2021"
>2864	30 32 31
>2867	29 0d 0d 00					.text 	")",13,13,0
.286b					ForceStandardMode:
.286b	a9 fe		lda #$fe			lda 	#$FE
.286d	20 74 18	jsr $1874		jsr	extensionHandler
.2870	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2871					DeleteLine:
.2871	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2874	85 2a		sta $2a				sta 	temp0
.2876	ad c9 0a	lda $0ac9			lda 	basePage+1
.2879	85 2b		sta $2b				sta 	temp0+1
.287b	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.287d	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.287f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2881	d0 07		bne $288a			bne 	_DLNext
.2883	c8		iny				iny
.2884	a5 a0		lda $a0				lda 	esInt1
.2886	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2888	f0 06		beq $2890			beq 	_DLFound
.288a	20 ae 28	jsr $28ae	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.288d	d0 ec		bne $287b			bne 	_DLLoop
.288f	60		rts				rts
.2890					_DLFound:
.2890	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2892	b1 2a		lda ($2a),y			lda 	(temp0),y
.2894	a8		tay				tay 								; so we copy from (temp0),y
.2895	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2897					_DLCopyDown:
.2897	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2899	81 2a		sta ($2a,x)			sta 	(temp0,x)
.289b	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.289d	d0 02		bne $28a1			bne 	_DLNoCarry
.289f	e6 2b		inc $2b				inc 	temp0+1
.28a1					_DLNoCarry:
.28a1	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.28a3	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.28a5	d0 f0		bne $2897			bne 	_DLCopyDown
.28a7	a5 2b		lda $2b				lda 	temp0+1
.28a9	c5 36		cmp $36				cmp 	lowMemory+1
.28ab	d0 ea		bne $2897			bne 	_DLCopyDown
.28ad	60		rts				rts
.28ae					IAdvanceTemp0:
.28ae	84 32		sty $32				sty 	tempShort
.28b0	18		clc				clc
.28b1	a0 00		ldy #$00			ldy 	#0 							; get offset
.28b3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.28b5	65 2a		adc $2a				adc 	temp0
.28b7	85 2a		sta $2a				sta 	temp0
.28b9	90 02		bcc $28bd			bcc 	_IATNoCarry
.28bb	e6 2b		inc $2b				inc 	temp0+1
.28bd					_IATNoCarry:
.28bd	b1 2a		lda ($2a),y			lda 	(temp0),y
.28bf	a4 32		ldy $32				ldy 	tempShort
.28c1	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.28c3	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.28c4					InsertLine:
.28c4	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.28c7	85 2a		sta $2a				sta 	temp0
.28c9	ad c9 0a	lda $0ac9			lda 	basePage+1
.28cc	85 2b		sta $2b				sta 	temp0+1
.28ce					_ILLoop:
.28ce	a0 01		ldy #$01			ldy 	#1
.28d0	b1 2a		lda ($2a),y			lda 	(temp0),y
.28d2	c5 98		cmp $98				cmp 	esInt0
.28d4	c8		iny				iny
.28d5	b1 2a		lda ($2a),y			lda 	(temp0),y
.28d7	e5 a0		sbc $a0				sbc 	esInt1
.28d9	b0 05		bcs $28e0			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.28db	20 ae 28	jsr $28ae			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.28de	d0 ee		bne $28ce			bne 	_ILLoop
.28e0					_ILFound:
.28e0	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.28e2	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.28e4	a5 36		lda $36				lda 	lowMemory+1
.28e6	85 2d		sta $2d				sta 	temp1+1
.28e8	ad da 0e	lda $0eda			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.28eb	18		clc				clc 								; add 3 for the line number and offset.
.28ec	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.28ee	a8		tay				tay
.28ef	a2 00		ldx #$00			ldx 	#0
.28f1	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.28f3	91 2c		sta ($2c),y			sta 	(temp1),y
.28f5	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.28f7	c5 2a		cmp $2a				cmp 	temp0
.28f9	d0 06		bne $2901			bne 	_ILMNext
.28fb	a5 2d		lda $2d				lda 	temp1+1
.28fd	c5 2b		cmp $2b				cmp 	temp0+1
.28ff	f0 0b		beq $290c			beq 	_ILMCopy
.2901					_ILMNext:
.2901	a5 2c		lda $2c				lda 	temp1
.2903	d0 02		bne $2907			bne 	_ILNoBorrow
.2905	c6 2d		dec $2d				dec 	temp1+1
.2907					_ILNoBorrow:
.2907	c6 2c		dec $2c				dec 	temp1
.2909	4c f1 28	jmp $28f1			jmp 	_ILMove 					; and go round again
.290c					_ILMCopy:
.290c	98		tya				tya 								; Y is the offset of the new line.
.290d	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.290f	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2911	a5 98		lda $98				lda 	esInt0
.2913	91 2a		sta ($2a),y			sta 	(temp0),y
.2915	c8		iny				iny
.2916	a5 a0		lda $a0				lda 	esInt1
.2918	91 2a		sta ($2a),y			sta 	(temp0),y
.291a	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.291c					_ILMCopy2:
.291c	b1 28		lda ($28),y			lda 	(codePtr),y
.291e	c8		iny				iny
.291f	c8		iny				iny
.2920	c8		iny				iny
.2921	91 2a		sta ($2a),y			sta 	(temp0),y
.2923	88		dey				dey
.2924	88		dey				dey
.2925	cc da 0e	cpy $0eda			cpy 	tokenBufferIndex
.2928	d0 f2		bne $291c			bne 	_ILMCopy2
.292a	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.292b					WarmStartEntry:
.292b	a2 ff		ldx #$ff			ldx 	#$FF
.292d	9a		txs				txs
.292e	20 6b 28	jsr $286b			jsr 	ForceStandardMode
.2931	a9 02		lda #$02			lda 	#2							; green text.
.2933	a2 06		ldx #$06		ldx	#6
.2935	20 05 15	jsr $1505		jsr	deviceHandler
.2938	a2 0a		ldx #$0a		ldx	#10
.293a	20 05 15	jsr $1505		jsr	deviceHandler
.293d	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.293f	85 28		sta $28				sta 	codePtr
.2941	a5 2b		lda $2b				lda 	temp0+1
.2943	85 29		sta $29				sta 	codePtr+1
.2945	a2 04		ldx #$04		ldx	#4
.2947	20 05 15	jsr $1505		jsr	deviceHandler
.294a	a2 08		ldx #$08		ldx	#8
.294c	20 61 4b	jsr $4b61		jsr	tokeniserHandler
.294f	c9 00		cmp #$00			cmp 	#0
.2951	f0 25		beq $2978			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2953	a9 d7		lda #$d7			lda 	#(tokenHeader) & $FF
.2955	85 28		sta $28				sta 	codePtr
.2957	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.2959	85 29		sta $29				sta 	1+(codePtr)
.295b	ad da 0d	lda $0dda			lda 	tokenBuffer 				; is it a blank line, go get another line.
.295e	c9 80		cmp #$80			cmp 	#$80
.2960	f0 c9		beq $292b			beq 	WarmStartEntry
.2962	29 c0		and #$c0			and 	#$C0						; does it start with a number
.2964	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.2966	f0 15		beq $297d			beq 	HasLineNumber
.2968	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.296a	8d d7 0d	sta $0dd7			sta 	tokenHeader 				; fake program line.
.296d	8d d8 0d	sta $0dd8			sta 	tokenHeader+1
.2970	8d d9 0d	sta $0dd9			sta 	tokenHeader+2
.2973	a2 18		ldx #$18		ldx	#24
.2975	20 29 40	jsr $4029		jsr	mainHandler
.2978					WSEError:
.2978	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.297a	20 27 15	jsr $1527		jsr	errorHandler
.297d					HasLineNumber:
.297d	a0 03		ldy #$03			ldy 	#3 							; get line number
.297f	a9 00		lda #$00			lda 	#0
.2981	a2 0a		ldx #$0a		ldx	#10
.2983	20 29 40	jsr $4029		jsr	mainHandler
.2986	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.2988	05 b0		ora $b0				ora 	esInt3
.298a	d0 ec		bne $2978			bne 	WSEError
.298c	98		tya				tya 								; make codePtr point to code after the line number.
.298d	18		clc				clc 								; by skipping over the tokenised number.
.298e	65 28		adc $28				adc 	codePtr
.2990	85 28		sta $28				sta 	codePtr
.2992	90 02		bcc $2996			bcc		_HLNNoCarry
.2994	e6 29		inc $29				inc 	codePtr+1
.2996					_HLNNoCarry:
.2996	98		tya				tya 								; subtract that offset from the code buffer index
.2997	38		sec				sec
.2998	49 ff		eor #$ff			eor 	#$FF
.299a	6d da 0e	adc $0eda			adc 	tokenBufferIndex
.299d	18		clc				clc 								; add space allowing for header & $80 trailer
.299e	69 04		adc #$04			adc 	#4
.29a0	8d da 0e	sta $0eda			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.29a3	20 71 28	jsr $2871			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.29a6					_HLNNoDelete:
.29a6	ad da 0e	lda $0eda			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.29a9	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.29ab	f0 0c		beq $29b9			beq 	_HLMEditDone
.29ad	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.29af	18		clc				clc 								; workspace (1k)
.29b0	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.29b2	c5 34		cmp $34				cmp 	highMemory+1
.29b4	b0 0b		bcs $29c1			bcs 	_HLMMemory 					; nope, won't allowit.
.29b6	20 c4 28	jsr $28c4			jsr 	InsertLine 					; insert the line in
.29b9					_HLMEditDone:
.29b9	a2 06		ldx #$06		ldx	#6
.29bb	20 29 40	jsr $4029		jsr	mainHandler
.29be	4c 2b 29	jmp $292b			jmp 	WarmStartEntry
.29c1					_HLMMemory:
.29c1	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.29c3	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.29c6					interactionHandler:
.29c6	7c c9 29	jmp ($29c9,x)			jmp 	(interactionVectors,x)
.29c9					interactionVectors:
>29c9	cf 29					.word _DummyControlHandler ; index 0
>29cb	df 27					.word ColdStartEntry       ; index 2
>29cd	2b 29					.word WarmStartEntry       ; index 4
.29cf					_DummyControlHandler:
.29cf	60		rts			rts

;******  Return to file: basic.asm

.29d0					section_end_interaction:
.29d0					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d9d					dataPtr:
>0d9d							.fill 	2
.0d9f					dataIndex:
>0d9f							.fill 	1
.29d0					CommandRead:
.29d0	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.29d2	20 f5 38	jsr $38f5			jsr 	EvaluateReference
.29d5	20 16 2a	jsr $2a16			jsr 	SwapDPCP 					; use the data pointer.
.29d8	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.29da	c8		iny				iny
.29db	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.29dd	f0 07		beq $29e6			beq 	_CRInData
.29df	88		dey				dey
.29e0	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.29e2	aa		tax				tax
.29e3	20 f3 30	jsr $30f3			jsr 	ScanForward
.29e6					_CRInData:
.29e6	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.29e8	20 9d 38	jsr $389d			jsr 	Evaluate
.29eb	ca		dex				dex 								; and write the value.
.29ec	20 5e 2c	jsr $2c5e			jsr 	WriteValue
.29ef	20 16 2a	jsr $2a16			jsr 	SwapDPCP 					; get the code pointer back.
.29f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.29f4	c8		iny				iny
.29f5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.29f7	f0 d7		beq $29d0			beq 	CommandRead
.29f9	88		dey				dey
.29fa	60		rts				rts
.29fb					CommandData:
.29fb	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.29fd	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.29ff	20 f3 30	jsr $30f3			jsr 	ScanForward
.2a02	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2a03	60		rts				rts
.2a04					CommandRestore:
.2a04	ad c8 0a	lda $0ac8			lda 	basePage
.2a07	8d 9d 0d	sta $0d9d			sta 	dataPtr
.2a0a	ad c9 0a	lda $0ac9			lda 	basePage+1
.2a0d	8d 9e 0d	sta $0d9e			sta 	dataPtr+1
.2a10	a9 03		lda #$03			lda 	#3
.2a12	8d 9f 0d	sta $0d9f			sta 	dataIndex
.2a15	60		rts				rts
.2a16					SwapDPCP:
.2a16	da		phx				phx
.2a17	98		tya				tya 								; swap Y, DataIndex
.2a18	ac 9f 0d	ldy $0d9f			ldy 	DataIndex
.2a1b	8d 9f 0d	sta $0d9f			sta 	DataIndex
.2a1e	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2a20	ae 9d 0d	ldx $0d9d			ldx 	dataptr
.2a23	8d 9d 0d	sta $0d9d			sta 	dataPtr
.2a26	86 28		stx $28				stx 	codePtr
.2a28	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2a2a	ae 9e 0d	ldx $0d9e			ldx 	dataptr+1
.2a2d	8d 9e 0d	sta $0d9e			sta 	dataPtr+1
.2a30	86 29		stx $29				stx 	codePtr+1
.2a32	fa		plx				plx
.2a33	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.2a34					CommandGOSUB:
.2a34	20 ba 38	jsr $38ba			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2a37	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2a39	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2a3b	20 d6 3f	jsr $3fd6			jsr 	RSClaim
.2a3e	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2a40	20 02 40	jsr $4002			jsr 	RSSavePosition
.2a43	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.2a45	f0 1b		beq $2a62			beq 	GotoTOS 					; and do a GOTO there.
.2a47					CommandRETURN:
.2a47	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a49	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a4b	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2a4d	f0 05		beq $2a54			beq 	_isok
.2a4f	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2a51	20 27 15	jsr $1527		jsr	errorHandler
.2a54					_isok:
.2a54	a9 01		lda #$01			lda 	#1
.2a56	20 15 40	jsr $4015			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2a59	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2a5b	20 f8 3f	jsr $3ff8			jsr 	RSFree
.2a5e	60		rts				rts
.2a5f					CommandGOTO:
.2a5f	20 ba 38	jsr $38ba			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2a62					GotoTOS:
.2a62	20 dc 33	jsr $33dc			jsr 	ResetCodeAddress 			; simple search.
.2a65					_GotoSearch:
.2a65	a0 00		ldy #$00			ldy 	#0 							; get offset
.2a67	b1 28		lda ($28),y			lda 	(codePtr),y
.2a69	f0 21		beq $2a8c			beq 	_GotoError 					; not found.
.2a6b	c8		iny				iny									; check LSB match
.2a6c	b1 28		lda ($28),y			lda 	(codePtr),y
.2a6e	d5 98		cmp $98,x			cmp 	esInt0,x
.2a70	d0 07		bne $2a79			bne 	_GotoNext
.2a72	c8		iny				iny
.2a73	b1 28		lda ($28),y			lda 	(codePtr),y
.2a75	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2a77	f0 10		beq $2a89			beq 	_GotoFound
.2a79					_GotoNext:
.2a79	a0 00		ldy #$00			ldy 	#0 							; go next line
.2a7b	b1 28		lda ($28),y			lda 	(codePtr),y
.2a7d	18		clc				clc
.2a7e	65 28		adc $28				adc 	codePtr
.2a80	85 28		sta $28				sta 	codePtr
.2a82	90 e1		bcc $2a65			bcc 	_GotoSearch
.2a84	e6 29		inc $29				inc 	codePtr+1
.2a86	4c 65 2a	jmp $2a65			jmp 	_GotoSearch
.2a89					_GotoFound:
.2a89	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2a8b	60		rts				rts
.2a8c					_GotoError:
.2a8c	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2a8e	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0da0					InputBuffer:
>0da0							.fill 	MaxInputSize+1
.2a91					Command_Input:
.2a91	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2a93	c8		iny				iny
.2a94	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2a96	f0 f9		beq $2a91			beq 	Command_Input
.2a98	88		dey				dey 							; undo consume
.2a99	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2a9b	f0 52		beq $2aef			beq 	_CIExit 				; : or EOL, exit
.2a9d	c9 80		cmp #$80			cmp 	#TOK_EOL
.2a9f	f0 4e		beq $2aef			beq 	_CIExit
.2aa1	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2aa3	90 12		bcc $2ab7			bcc 	_CIVariable
.2aa5	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2aa7	d0 41		bne $2aea			bne 	_CISyntax
.2aa9	a2 00		ldx #$00			ldx 	#0
.2aab	20 b1 38	jsr $38b1			jsr 	EvaluateString 			; evaluate and print string
.2aae	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0
.2ab1	20 be 2b	jsr $2bbe			jsr 	PrintString
.2ab4	4c 91 2a	jmp $2a91			jmp 	Command_Input
.2ab7					_CIVariable:
.2ab7	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2ab9	20 f5 38	jsr $38f5			jsr 	EvaluateReference  		; this is where its going
.2abc					_CIRetry:
.2abc	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2abe	a2 12		ldx #$12		ldx	#18
.2ac0	20 05 15	jsr $1505		jsr	deviceHandler
.2ac3	5a		phy				phy
.2ac4	20 03 2b	jsr $2b03			jsr 	InputString 			; input a string (manually)
.2ac7	a2 01		ldx #$01			ldx 	#1
.2ac9	20 f0 2a	jsr $2af0			jsr 	BufferToStackX 			; make stack,x ref input string.
.2acc	a5 90		lda $90				lda 	esType 					; if target type numeric
.2ace	29 40		and #$40			and 	#$40 					; then convert to number
.2ad0	d0 10		bne $2ae2			bne 	_CIWrite
.2ad2	a2 01		ldx #$01			ldx 	#1
.2ad4	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2ad7	a9 0a		lda #$0a			lda 	#10
.2ad9	20 b0 3d	jsr $3db0			jsr 	MInt32FromString 		; convert it back from a string.
.2adc	7a		ply				ply
.2add	b0 03		bcs $2ae2			bcs 	_CIWrite 				; successfully converted.
.2adf	18		clc				clc 							; default fail FP conversion
.2ae0	90 da		bcc $2abc			bcc		_CIRetry				; failed, try again.
.2ae2					_CIWrite:
.2ae2	a2 00		ldx #$00			ldx 	#0
.2ae4	20 5e 2c	jsr $2c5e			jsr 	WriteValue
.2ae7	4c 91 2a	jmp $2a91			jmp 	Command_Input
.2aea					_CISyntax:
.2aea	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2aec	20 27 15	jsr $1527		jsr	errorHandler
.2aef					_CIExit:
.2aef	60		rts				rts
.2af0					BufferToStackX:
.2af0	a9 a0		lda #$a0			lda 	#InputBuffer & $FF
.2af2	95 98		sta $98,x			sta 	esInt0,x
.2af4	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.2af6	95 a0		sta $a0,x			sta 	esInt1,x
.2af8	a9 00		lda #$00			lda 	#0
.2afa	95 a8		sta $a8,x			sta 	esInt2,x
.2afc	95 b0		sta $b0,x			sta 	esInt3,x
.2afe	a9 40		lda #$40			lda 	#$40
.2b00	95 90		sta $90,x			sta 	esType,x
.2b02	60		rts				rts
.2b03					InputString:
.2b03	a9 00		lda #$00			lda 	#0
.2b05	8d a0 0d	sta $0da0			sta 	InputBuffer
.2b08					_InputLoop:
.2b08	a2 18		ldx #$18		ldx	#24
.2b0a	20 05 15	jsr $1505		jsr	deviceHandler
.2b0d	a2 08		ldx #$08		ldx	#8
.2b0f	20 05 15	jsr $1505		jsr	deviceHandler
.2b12	c9 00		cmp #$00			cmp 	#0
.2b14	f0 f2		beq $2b08			beq 	_InputLoop
.2b16	c9 08		cmp #$08			cmp 	#8
.2b18	f0 19		beq $2b33			beq 	_InputBackspace
.2b1a	c9 0d		cmp #$0d			cmp 	#13
.2b1c	f0 21		beq $2b3f			beq 	_InputExit
.2b1e	ae a0 0d	ldx $0da0			ldx 	InputBuffer
.2b21	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2b23	f0 e3		beq $2b08			beq 	_InputLoop
.2b25	9d a1 0d	sta $0da1,x			sta 	InputBuffer+1,x 		; write char
.2b28	ee a0 0d	inc $0da0			inc 	InputBuffer 			; advance count.
.2b2b					_InputPrintLoop:
.2b2b	a2 12		ldx #$12		ldx	#18
.2b2d	20 05 15	jsr $1505		jsr	deviceHandler
.2b30	4c 08 2b	jmp $2b08			jmp	 	_InputLoop
.2b33					_InputBackspace:
.2b33	ad a0 0d	lda $0da0			lda 	InputBuffer 			; at start
.2b36	f0 d0		beq $2b08			beq 	_InputLoop
.2b38	ce a0 0d	dec $0da0			dec 	InputBuffer
.2b3b	a9 08		lda #$08			lda 	#8
.2b3d	d0 ec		bne $2b2b			bne 	_InputPrintLoop
.2b3f					_InputExit:
.2b3f	a2 04		ldx #$04		ldx	#4
.2b41	20 05 15	jsr $1505		jsr	deviceHandler
.2b44	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0dc1					lastPrintToken:
>0dc1							.fill 	1
.2b45					Command_Print:
.2b45	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2b47	8d c1 0d	sta $0dc1			sta 	lastPrintToken
.2b4a	88		dey				dey
.2b4b					_PrintLoopSkip:
.2b4b	c8		iny				iny
.2b4c					_PrintLoop:
.2b4c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2b4e	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2b50	f0 5b		beq $2bad			beq 	_PrintExit
.2b52	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2b54	f0 57		beq $2bad			beq 	_PrintExit
.2b56	8d c1 0d	sta $0dc1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2b59	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2b5b	f0 ee		beq $2b4b			beq 	_PrintLoopSkip
.2b5d	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2b5f	f0 3c		beq $2b9d			beq	 	_PrintNewLine
.2b61	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2b63	f0 40		beq $2ba5			beq 	_PrintTab
.2b65	20 9b 38	jsr $389b			jsr 	EvaluateRoot 				; evaluate something at the root
.2b68	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2b6a	85 2a		sta $2a				sta 	temp0
.2b6c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2b6e	85 2b		sta $2b				sta 	1+(temp0)
.2b70	a5 90		lda $90				lda 	esType 						; get type
.2b72	f0 15		beq $2b89			beq		_PrintInteger
.2b74	4a		lsr a				lsr 	a 							; check for floating point
.2b75	b0 08		bcs $2b7f			bcs 	_PrintFloat
.2b77					_PrintString:
.2b77	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2b79	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0
.2b7c	4c 97 2b	jmp $2b97			jmp 	_PrintTemp0 				; print no leading space.
.2b7f					_PrintFloat:
.2b7f	a9 00		lda #$00			lda 	#0 							; stack level.
.2b81	a2 16		ldx #$16		ldx	#22
.2b83	20 da 27	jsr $27da		jsr	floatingpointHandler
.2b86	4c 90 2b	jmp $2b90			jmp 	_PrintSpaceTemp0
.2b89					_PrintInteger:
.2b89	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2b8b	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2b8d	20 95 3e	jsr $3e95			jsr 	MInt32ToString				; convert to text
.2b90					_PrintSpaceTemp0:
.2b90	a9 20		lda #$20			lda 	#32
.2b92	a2 12		ldx #$12		ldx	#18
.2b94	20 05 15	jsr $1505		jsr	deviceHandler
.2b97					_PrintTemp0:
.2b97	20 be 2b	jsr $2bbe			jsr 	PrintString
.2b9a	4c 4c 2b	jmp $2b4c			jmp 	_PrintLoop
.2b9d					_PrintNewLine:
.2b9d	a2 04		ldx #$04		ldx	#4
.2b9f	20 05 15	jsr $1505		jsr	deviceHandler
.2ba2	4c 4b 2b	jmp $2b4b			jmp 	_PrintLoopSkip
.2ba5					_PrintTab:
.2ba5	a2 1a		ldx #$1a		ldx	#26
.2ba7	20 05 15	jsr $1505		jsr	deviceHandler
.2baa	4c 4b 2b	jmp $2b4b			jmp 	_PrintLoopSkip
.2bad					_PrintExit:
.2bad	ad c1 0d	lda $0dc1			lda		lastPrintToken 				; check last token
.2bb0	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2bb2	f0 09		beq $2bbd			beq 	_PrintExit2
.2bb4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2bb6	f0 05		beq $2bbd			beq 	_PrintExit2
.2bb8	a2 04		ldx #$04		ldx	#4
.2bba	20 05 15	jsr $1505		jsr	deviceHandler
.2bbd					_PrintExit2:
.2bbd	60		rts				rts
.2bbe					PrintString:
.2bbe	da		phx				phx
.2bbf	5a		phy				phy
.2bc0	a0 00		ldy #$00			ldy 	#0							; get length
.2bc2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bc4	aa		tax				tax 								; into X
.2bc5	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2bc7	f0 0e		beq $2bd7			beq 	_PSExit
.2bc9	ca		dex				dex
.2bca	da		phx				phx
.2bcb	c8		iny				iny
.2bcc	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bce	a2 12		ldx #$12		ldx	#18
.2bd0	20 05 15	jsr $1505		jsr	deviceHandler
.2bd3	fa		plx				plx
.2bd4	4c c5 2b	jmp $2bc5			jmp 	_PSLoop
.2bd7					_PSExit:
.2bd7	7a		ply				ply
.2bd8	fa		plx				plx
.2bd9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2bda					Command_CLS:
.2bda	a2 02		ldx #$02		ldx	#2
.2bdc	20 05 15	jsr $1505		jsr	deviceHandler
.2bdf	60		rts				rts
.2be0					Command_Ink:
.2be0	a2 00		ldx #$00			ldx 	#0
.2be2	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger
.2be5	a2 06		ldx #$06		ldx	#6
.2be7	20 05 15	jsr $1505		jsr	deviceHandler
.2bea	60		rts				rts
.2beb					Command_Paper:
.2beb	a2 00		ldx #$00			ldx 	#0
.2bed	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger
.2bf0	a2 10		ldx #$10		ldx	#16
.2bf2	20 05 15	jsr $1505		jsr	deviceHandler
.2bf5	60		rts				rts
.2bf6					Command_Locate:
.2bf6	a2 00		ldx #$00			ldx 	#0
.2bf8	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger
.2bfb	20 bb 3f	jsr $3fbb			jsr 	CheckComma
.2bfe	e8		inx				inx
.2bff	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger
.2c02	5a		phy				phy
.2c03	a4 99		ldy $99				ldy 	esInt0+1
.2c05	a5 98		lda $98				lda 	esInt0
.2c07	a2 0e		ldx #$0e		ldx	#14
.2c09	20 05 15	jsr $1505		jsr	deviceHandler
.2c0c	7a		ply				ply
.2c0d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2c0e					Command_VDU:
.2c0e	20 ba 38	jsr $38ba			jsr 	EvaluateRootInteger 			; get integer at root.
.2c11	a5 98		lda $98				lda 	esInt0
.2c13	a2 12		ldx #$12		ldx	#18
.2c15	20 05 15	jsr $1505		jsr	deviceHandler
.2c18					_CVNext:
.2c18	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2c1a	c8		iny				iny
.2c1b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2c1d	f0 ef		beq $2c0e			beq 	Command_VDU
.2c1f	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2c21	d0 0a		bne $2c2d			bne 	_CVExit
.2c23	a5 a0		lda $a0				lda 	esInt1
.2c25	a2 12		ldx #$12		ldx	#18
.2c27	20 05 15	jsr $1505		jsr	deviceHandler
.2c2a	4c 18 2c	jmp $2c18			jmp 	_CVNext
.2c2d	88		dey		_CVExit:dey
.2c2e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2c2f					Command_Assert:
.2c2f	20 ba 38	jsr $38ba			jsr 	EvaluateRootInteger 		; what is being asserted.
.2c32	20 64 3f	jsr $3f64			jsr 	MInt32Zero 					; is it true ?
.2c35	f0 01		beq $2c38			beq 	_CAError
.2c37	60		rts				rts
.2c38					_CAError:
.2c38	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2c3a	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2c3d					Command_Dim:
.2c3d	a2 04		ldx #$04		ldx	#4
.2c3f	20 20 4f	jsr $4f20		jsr	variableHandler
.2c42	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2c44	c8		iny				iny
.2c45	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2c47	f0 f4		beq $2c3d			beq 	Command_Dim
.2c49	88		dey				dey 								; unpick get
.2c4a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2c4b					CommandLet:
.2c4b	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2c4d	20 f5 38	jsr $38f5			jsr 	EvaluateReference
.2c50	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2c52	20 a3 3f	jsr $3fa3			jsr 	CheckToken
.2c55	e8		inx				inx 								; do RHS
.2c56	20 9d 38	jsr $389d			jsr 	Evaluate 					; evaluate and dereference
.2c59	ca		dex				dex
.2c5a	20 5e 2c	jsr $2c5e			jsr 	WriteValue 					; write it out
.2c5d	60		rts				rts
.2c5e					WriteValue:
.2c5e	5a		phy				phy
.2c5f	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2c62	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2c64	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2c66	29 40		and #$40			and 	#$40
.2c68	d0 4f		bne $2cb9			bne		_WVType
.2c6a	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2c6c	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2c6e	29 40		and #$40			and 	#$40
.2c70	d0 1f		bne $2c91			bne 	_WVCopyString
.2c72	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2c74	15 91		ora $91,x			ora 	esType+1,x
.2c76	4a		lsr a				lsr 	a
.2c77	90 22		bcc $2c9b			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2c79	b5 90		lda $90,x			lda 	esType,x
.2c7b	4a		lsr a				lsr 	a
.2c7c	90 3b		bcc $2cb9			bcc 	_WVType
.2c7e	e8		inx				inx 								; force the value being written to be a float.
.2c7f	20 01 35	jsr $3501			jsr 	BPMakeFloat
.2c82	ca		dex				dex
.2c83	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0 					; set Temp0 to write address
.2c86	e8		inx				inx
.2c87	8a		txa				txa
.2c88	a2 22		ldx #$22		ldx	#34
.2c8a	20 da 27	jsr $27da		jsr	floatingpointHandler
.2c8d	aa		tax				tax
.2c8e	4c b7 2c	jmp $2cb7			jmp 	_WVCopyExit
.2c91					_WVCopyString:
.2c91	8a		txa				txa
.2c92	a2 10		ldx #$10		ldx	#16
.2c94	20 d4 42	jsr $42d4		jsr	stringHandler
.2c97	aa		tax				tax
.2c98	4c b7 2c	jmp $2cb7			jmp 	_WVCopyExit
.2c9b					_WVCopyData4:
.2c9b	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2c9d	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2c9f	d0 10		bne $2cb1			bne 	_WVCopyData1
.2ca1	a0 03		ldy #$03			ldy 	#3
.2ca3	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2ca5	91 2a		sta ($2a),y			sta 	(temp0),y
.2ca7	88		dey				dey
.2ca8	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2caa	91 2a		sta ($2a),y			sta 	(temp0),y
.2cac	88		dey				dey
.2cad	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2caf	91 2a		sta ($2a),y			sta 	(temp0),y
.2cb1					_WVCopyData1:
.2cb1	a0 00		ldy #$00			ldy 	#0
.2cb3	b5 99		lda $99,x			lda 	esInt0+1,x
.2cb5	91 2a		sta ($2a),y			sta 	(temp0),y
.2cb7					_WVCopyExit:
.2cb7	7a		ply				ply
.2cb8	60		rts				rts
.2cb9					_WVType:
.2cb9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2cbb	20 27 15	jsr $1527		jsr	errorHandler
.2cbe					TOSToTemp0:
.2cbe	b5 98		lda $98,x			lda 	esInt0,x
.2cc0	85 2a		sta $2a				sta 	temp0
.2cc2	b5 a0		lda $a0,x			lda 	esInt1,x
.2cc4	85 2b		sta $2b				sta 	temp0+1
.2cc6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2cc7					Command_Poke:
.2cc7	a9 01		lda #$01			lda 	#1
.2cc9	d0 06		bne $2cd1			bne 	PokeGeneral
.2ccb					Command_Doke:
.2ccb	a9 02		lda #$02			lda 	#2
.2ccd	d0 02		bne $2cd1			bne 	PokeGeneral
.2ccf					Command_Loke:
.2ccf	a9 03		lda #$03			lda 	#3
.2cd1					PokeGeneral:
.2cd1	48		pha				pha 								; save id (PDL = 123)
.2cd2	20 ba 38	jsr $38ba			jsr 	EvaluateRootInteger 		; target address
.2cd5	20 bb 3f	jsr $3fbb			jsr	 	CheckComma
.2cd8	e8		inx				inx
.2cd9	20 bc 38	jsr $38bc			jsr 	EvaluateInteger 			; what value to POKE ?
.2cdc	ca		dex				dex
.2cdd	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0 					; temp0 points to the target address
.2ce0	84 32		sty $32				sty 	tempShort 					; save Y
.2ce2	68		pla				pla 								; get copy type (1-3) and dispatch
.2ce3	aa		tax				tax
.2ce4	ca		dex				dex
.2ce5	f0 14		beq $2cfb			beq 	_Poke1
.2ce7	ca		dex				dex
.2ce8	f0 0b		beq $2cf5			beq 	_Poke2
.2cea	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2cec	a5 b1		lda $b1				lda 	esInt3+1
.2cee	91 2a		sta ($2a),y			sta 	(temp0),y
.2cf0	88		dey				dey
.2cf1	a5 a9		lda $a9				lda 	esInt2+1
.2cf3	91 2a		sta ($2a),y			sta 	(temp0),y
.2cf5					_Poke2:
.2cf5	a0 01		ldy #$01			ldy 	#1
.2cf7	a5 a1		lda $a1				lda 	esInt1+1
.2cf9	91 2a		sta ($2a),y			sta 	(temp0),y
.2cfb					_Poke1:
.2cfb	a0 00		ldy #$00			ldy 	#0
.2cfd	a5 99		lda $99				lda 	esInt0+1
.2cff	91 2a		sta ($2a),y			sta 	(temp0),y
.2d01	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2d03	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2d04					Command_Rem:
.2d04					Command_Rem2:
.2d04	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2d06	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2d08	d0 06		bne $2d10			bne 	_CRNotString
.2d0a	c8		iny				iny
.2d0b	98		tya				tya
.2d0c	38		sec				sec
.2d0d	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2d0f	a8		tay				tay
.2d10					_CRNotString:
.2d10	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2d11					CommandStop:
.2d11	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2d13	20 27 15	jsr $1527		jsr	errorHandler
.2d16					CommandEnd:
.2d16	4c 24 40	jmp $4024			jmp 	WarmStart
.2d19					CommandXemu:
.2d19	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2d1c					AdvanceNextLine:
.2d1c	a0 00		ldy #$00			ldy 	#0 							; get offset
.2d1e	b1 28		lda ($28),y			lda 	(codePtr),y
.2d20	18		clc				clc 								; add to codePtr
.2d21	65 28		adc $28				adc 	codePtr
.2d23	85 28		sta $28				sta 	codePtr
.2d25	90 02		bcc $2d29			bcc 	_ANLNoCarry
.2d27	e6 29		inc $29				inc 	codePtr+1
.2d29					_ANLNoCarry:
.2d29	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2d2b	f0 e9		beq $2d16			beq 	CommandEnd 					; execute END
.2d2d	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2d2f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2d30					Command_FOR:
.2d30	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2d32	a2 0b		ldx #$0b			ldx 	#11
.2d34	20 d6 3f	jsr $3fd6			jsr 	RSClaim
.2d37	20 4b 2c	jsr $2c4b			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2d3a	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2d3c	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2d3e	d0 48		bne $2d88			bne 	_CFType
.2d40	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2d42	20 a3 3f	jsr $3fa3			jsr 	CheckToken
.2d45	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2d47	20 bc 38	jsr $38bc			jsr 	EvaluateInteger				; get terminal value in stack 1
.2d4a	5a		phy				phy
.2d4b	a0 04		ldy #$04			ldy 	#4
.2d4d	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2d4f	91 37		sta ($37),y			sta 	(rsPointer),y
.2d51	c8		iny				iny
.2d52	a5 a0		lda $a0				lda		esInt1
.2d54	91 37		sta ($37),y			sta 	(rsPointer),y
.2d56	c8		iny				iny
.2d57	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2d59	91 37		sta ($37),y			sta 	(rsPointer),y
.2d5b	c8		iny				iny
.2d5c	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2d5e	91 37		sta ($37),y			sta 	(rsPointer),y
.2d60	c8		iny				iny
.2d61	a5 a1		lda $a1				lda		esInt1+1
.2d63	91 37		sta ($37),y			sta 	(rsPointer),y
.2d65	c8		iny				iny
.2d66	a5 a9		lda $a9				lda		esInt2+1
.2d68	91 37		sta ($37),y			sta 	(rsPointer),y
.2d6a	c8		iny				iny
.2d6b	a5 b1		lda $b1				lda		esInt3+1
.2d6d	91 37		sta ($37),y			sta 	(rsPointer),y
.2d6f	7a		ply				ply
.2d70	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2d72	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2d74	d0 0c		bne $2d82			bne 	_CFDone
.2d76	c8		iny				iny									; skip over step.
.2d77	20 bc 38	jsr $38bc			jsr 	EvaluateInteger 			; get step
.2d7a	5a		phy				phy
.2d7b	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2d7d	a0 06		ldy #$06			ldy 	#6
.2d7f	91 37		sta ($37),y			sta 	(rsPointer),y
.2d81	7a		ply				ply
.2d82					_CFDone:
.2d82	a9 01		lda #$01			lda 	#1
.2d84	20 02 40	jsr $4002			jsr 	RSSavePosition 				; save position.
.2d87	60		rts				rts
.2d88					_CFType:
.2d88	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d8a	20 27 15	jsr $1527		jsr	errorHandler
.2d8d					Command_NEXT:
.2d8d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d8f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d91	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2d93	f0 05		beq $2d9a			beq 	_isok
.2d95	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2d97	20 27 15	jsr $1527		jsr	errorHandler
.2d9a					_isok:
.2d9a	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2d9c	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2d9e	b0 16		bcs $2db6			bcs 	_CNNoIndex
.2da0	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2da2	20 f5 38	jsr $38f5			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2da5	5a		phy				phy
.2da6	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2da8	b1 37		lda ($37),y			lda 	(rsPointer),y
.2daa	d5 98		cmp $98,x			cmp 	esInt0,x
.2dac	d0 72		bne $2e20			bne 	_CNBadIndex
.2dae	c8		iny				iny
.2daf	b1 37		lda ($37),y			lda 	(rsPointer),y
.2db1	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2db3	d0 6b		bne $2e20			bne 	_CNBadIndex
.2db5	7a		ply				ply
.2db6					_CNNoIndex:
.2db6	5a		phy				phy
.2db7	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2db9	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dbb	85 2a		sta $2a				sta 	temp0
.2dbd	c8		iny				iny
.2dbe	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dc0	85 2b		sta $2b				sta 	temp0+1
.2dc2	c8		iny				iny
.2dc3	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2dc5	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2dc7	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2dc9	10 01		bpl $2dcc			bpl 	_CNSignX
.2dcb	ca		dex				dex  								; X = $FF
.2dcc					_CNSignX:
.2dcc	18		clc				clc 								; add to the LSB
.2dcd	a0 00		ldy #$00			ldy 	#0
.2dcf	71 2a		adc ($2a),y			adc 	(temp0),y
.2dd1	91 2a		sta ($2a),y			sta 	(temp0),y
.2dd3					_CNPropogate:
.2dd3	c8		iny				iny  								; add the sign extended in X to the rest.
.2dd4	8a		txa				txa
.2dd5	71 2a		adc ($2a),y			adc 	(temp0),y
.2dd7	91 2a		sta ($2a),y			sta 	(temp0),y
.2dd9	c8		iny				iny
.2dda	8a		txa				txa
.2ddb	71 2a		adc ($2a),y			adc 	(temp0),y
.2ddd	91 2a		sta ($2a),y			sta 	(temp0),y
.2ddf	c8		iny				iny
.2de0	8a		txa				txa
.2de1	71 2a		adc ($2a),y			adc 	(temp0),y
.2de3	91 2a		sta ($2a),y			sta 	(temp0),y
.2de5	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2de6	a5 37		lda $37				lda 	rsPointer
.2de8	69 07		adc #$07			adc 	#7
.2dea	85 2c		sta $2c				sta 	temp1
.2dec	a9 00		lda #$00			lda 	#0
.2dee	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2df0	a8		tay				tay 								; and clear the Y register again.
.2df1	65 38		adc $38				adc 	rsPointer+1
.2df3	85 2d		sta $2d				sta 	temp1+1
.2df5	38		sec				sec 								; calculate current - limit oring interim values.
.2df6	20 2c 2e	jsr $2e2c			jsr 	_CNCompare 					; each of these does a byte.
.2df9	20 2c 2e	jsr $2e2c			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2dfc	20 2c 2e	jsr $2e2c			jsr 	_CNCompare 					; and the carry of the subtraction.
.2dff	20 2c 2e	jsr $2e2c			jsr 	_CNCompare
.2e02	50 02		bvc $2e06			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2e04	49 80		eor #$80			eor 	#$80
.2e06					_CNNoOverflow:
.2e06	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2e08	30 1b		bmi $2e25			bmi 	_CNCheckDownto
.2e0a	c9 00		cmp #$00			cmp 	#0
.2e0c	30 0b		bmi $2e19			bmi 	_CNLoopRound 				; loop round if < =
.2e0e	a5 2e		lda $2e				lda 	temp2
.2e10	f0 07		beq $2e19			beq 	_CNLoopRound
.2e12					_CNLoopExit:
.2e12	7a		ply				ply
.2e13	a9 0b		lda #$0b			lda 	#11
.2e15	20 f8 3f	jsr $3ff8			jsr 	RSFree
.2e18	60		rts				rts
.2e19					_CNLoopRound:
.2e19	7a		ply				ply
.2e1a	a9 01		lda #$01			lda 	#1
.2e1c	20 15 40	jsr $4015			jsr 	RSLoadPosition				; go back to the loop top
.2e1f	60		rts				rts
.2e20					_CNBadIndex:
.2e20	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2e22	20 27 15	jsr $1527		jsr	errorHandler
.2e25					_CNCheckDownto:
.2e25	c9 00		cmp #$00			cmp 	#0
.2e27	10 f0		bpl $2e19			bpl 	_CNLoopRound
.2e29	4c 12 2e	jmp $2e12			jmp 	_CNLoopExit
.2e2c					_CNCompare:
.2e2c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2e2e	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2e30	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2e32	85 2e		sta $2e				sta 	temp2
.2e34	c8		iny				iny
.2e35	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2e36					CommandIf:
.2e36	20 ba 38	jsr $38ba			jsr 	EvaluateRootInteger 		; get what's being tested.
.2e39	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2e3b	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2e3d	f0 04		beq $2e43			beq 	_IfSimple
.2e3f	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2e41	d0 1b		bne $2e5e			bne 	_IfComplex
.2e43					_IfSimple:
.2e43	20 64 3f	jsr $3f64			jsr 	MInt32Zero					; check if TOS zero
.2e46	f0 10		beq $2e58			beq 	_IfEOL 						; go to next line.
.2e48	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2e4a	c8		iny				iny
.2e4b	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2e4d	f0 0c		beq $2e5b			beq 	_IfGoto 					; do the Goto code
.2e4f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2e51	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2e53	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2e55	f0 04		beq $2e5b			beq 	_IfGoto
.2e57	60		rts				rts 								; else continue on this line.
.2e58					_IfEOL:
.2e58	4c 1c 2d	jmp $2d1c			jmp 	AdvanceNextLine 			; go to next line
.2e5b					_IfGoto:
.2e5b	4c 5f 2a	jmp $2a5f			jmp 	CommandGoto
.2e5e					_IfComplex:
.2e5e	20 64 3f	jsr $3f64			jsr 	MInt32Zero 					; is it true ?
.2e61	f0 01		beq $2e64			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2e63	60		rts				rts 								; else continue.
.2e64					_IFSkip:
.2e64	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2e66	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2e68	4c f3 30	jmp $30f3			jmp		ScanForward
.2e6b					Command_ELSE:
.2e6b	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2e6d	8a		txa				txa
.2e6e	4c f3 30	jmp $30f3			jmp		ScanForward
.2e71					Command_ENDIF:
.2e71	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0dc2					storeSize:
>0dc2							.fill 	1
.2e72					CommandLocal:
.2e72	a2 00		ldx #$00			ldx 	#0
.2e74	20 90 2e	jsr $2e90			jsr 	LocaliseVariable 			; localise one.
.2e77					_CLCheckNext:
.2e77	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2e79	c8		iny				iny
.2e7a	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2e7c	f0 06		beq $2e84			beq 	_CLAssignment
.2e7e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2e80	f0 f0		beq $2e72			beq 	CommandLocal
.2e82	88		dey				dey
.2e83	60		rts				rts
.2e84					_CLAssignment:
.2e84	a2 01		ldx #$01			ldx 	#1
.2e86	20 9d 38	jsr $389d			jsr 	Evaluate 					; evaluate RHS
.2e89	ca		dex				dex
.2e8a	20 5e 2c	jsr $2c5e			jsr 	WriteValue
.2e8d	4c 77 2e	jmp $2e77			jmp 	_CLCheckNext
.2e90					LocaliseVariable:
.2e90	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2e92	c9 40		cmp #$40			cmp 	#$40
.2e94	b0 63		bcs $2ef9			bcs 	_LVSyntax
.2e96	8a		txa				txa 								; get the address of that variable.
.2e97	a2 02		ldx #$02		ldx	#2
.2e99	20 20 4f	jsr $4f20		jsr	variableHandler
.2e9c	aa		tax				tax
.2e9d	da		phx				phx
.2e9e	5a		phy				phy
.2e9f	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2ea2	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2ea4	0a		asl a				asl 	a
.2ea5	10 16		bpl $2ebd			bpl 	_LVPushNumber
.2ea7	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2ea9	b1 2a		lda ($2a),y			lda 	(temp0),y
.2eab	c8		iny				iny
.2eac	85 2c		sta $2c				sta 	temp1
.2eae	b1 2a		lda ($2a),y			lda 	(temp0),y
.2eb0	85 2d		sta $2d				sta 	temp1+1
.2eb2	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2eb4	b1 2c		lda ($2c),y			lda 	(temp1),y
.2eb6	aa		tax				tax 								; into X
.2eb7	e8		inx				inx 								; +1 for length.
.2eb8	a9 24		lda #$24			lda 	#markerString
.2eba	4c d2 2e	jmp $2ed2			jmp 	_LVWriteFrame
.2ebd					_LVPushNumber:
.2ebd	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2ebf	85 2c		sta $2c				sta 	temp1
.2ec1	a5 2b		lda $2b				lda 	temp0+1
.2ec3	85 2d		sta $2d				sta 	temp1+1
.2ec5	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2ec7	4a		lsr a				lsr 	a
.2ec8	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2eca	a2 04		ldx #$04			ldx 	#VarISize
.2ecc	90 04		bcc $2ed2			bcc 	_LVIsInteger
.2ece	a9 23		lda #$23			lda 	#markerFloat
.2ed0	a2 06		ldx #$06			ldx 	#VarFSize
.2ed2					_LVIsInteger:
.2ed2					_LVWriteFrame:
.2ed2	8e c2 0d	stx $0dc2			stx 	storeSize 					; number of bytes to copy from (temp0)
.2ed5	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2ed6	e8		inx				inx
.2ed7	e8		inx				inx
.2ed8	20 d6 3f	jsr $3fd6			jsr 	RSClaim 					; create the stack frame.
.2edb	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2edd	a0 01		ldy #$01			ldy 	#1
.2edf	91 37		sta ($37),y			sta 	(rsPointer),y
.2ee1	c8		iny				iny
.2ee2	a5 2b		lda $2b				lda 	temp0+1
.2ee4	91 37		sta ($37),y			sta 	(rsPointer),y
.2ee6	a0 00		ldy #$00			ldy 	#0
.2ee8					_LVCopyData:
.2ee8	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2eea	c8		iny				iny 								; write allowing for the header bit.
.2eeb	c8		iny				iny
.2eec	c8		iny				iny
.2eed	91 37		sta ($37),y			sta 	(rsPointer),y
.2eef	88		dey				dey
.2ef0	88		dey				dey
.2ef1	ce c2 0d	dec $0dc2			dec 	storeSize 					; do it storesize times
.2ef4	d0 f2		bne $2ee8			bne 	_LVCopyData
.2ef6	7a		ply				ply
.2ef7	fa		plx				plx
.2ef8	60		rts				rts
.2ef9					_LVSyntax:
.2ef9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2efb	20 27 15	jsr $1527		jsr	errorHandler
.2efe					RestoreLocals:
.2efe	a2 00		ldx #$00			ldx 	#0
.2f00	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2f02	c9 40		cmp #$40			cmp	 	#64
.2f04	90 01		bcc $2f07			bcc 	_RLocal
.2f06	60		rts				rts
.2f07					_RLocal:
.2f07	da		phx				phx
.2f08	5a		phy				phy
.2f09	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2f0b	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f0d	85 2a		sta $2a				sta 	temp0
.2f0f	c8		iny				iny
.2f10	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f12	85 2b		sta $2b				sta 	temp0+1
.2f14	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2f16	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f18	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2f1a	f0 25		beq $2f41			beq 	_RString
.2f1c	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2f1e	c9 25		cmp #$25			cmp 	#markerInt
.2f20	f0 02		beq $2f24			beq 	_RIsInteger
.2f22	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2f24					_RIsInteger:
.2f24	da		phx				phx
.2f25	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2f27					_RCopyBack:
.2f27	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f29	88		dey				dey
.2f2a	88		dey				dey
.2f2b	88		dey				dey
.2f2c	91 2a		sta ($2a),y			sta 	(temp0),y
.2f2e	c8		iny				iny
.2f2f	c8		iny				iny
.2f30	c8		iny				iny
.2f31	c8		iny				iny
.2f32	ca		dex				dex
.2f33	d0 f2		bne $2f27			bne 	_RCopyBack
.2f35	68		pla				pla 								; get size add 3
.2f36	18		clc				clc
.2f37	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2f39					_RRestoreAAndLoop:
.2f39	20 f8 3f	jsr $3ff8			jsr 	RSFree
.2f3c	7a		ply				ply
.2f3d	fa		plx				plx
.2f3e	4c fe 2e	jmp $2efe			jmp 	RestoreLocals 				; go see if there are any more locals.
.2f41					_RString:
.2f41	a2 00		ldx #$00			ldx 	#0
.2f43	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2f45	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f47	95 98		sta $98,x			sta 	esInt0,x
.2f49	c8		iny				iny
.2f4a	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f4c	95 a0		sta $a0,x			sta 	esInt1,x
.2f4e	18		clc				clc
.2f4f	a5 37		lda $37				lda 	rsPointer
.2f51	69 03		adc #$03			adc 	#3
.2f53	95 99		sta $99,x			sta 	esInt0+1,x
.2f55	a5 38		lda $38				lda 	rsPointer+1
.2f57	69 00		adc #$00			adc 	#0
.2f59	95 a1		sta $a1,x			sta 	esInt1+1,x
.2f5b	8a		txa				txa
.2f5c	a2 10		ldx #$10		ldx	#16
.2f5e	20 d4 42	jsr $42d4		jsr	stringHandler
.2f61	a0 03		ldy #$03			ldy 	#3 							; get string length
.2f63	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f65	18		clc				clc
.2f66	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2f68	4c 39 2f	jmp $2f39			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0dc3					paramCount:
>0dc3							.fill 	1
.2f6b					CallProc:
.2f6b	20 f3 2f	jsr $2ff3			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2f6e	48		pha				pha 								; save length on stack
.2f6f	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2f71	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2f73	48		pha				pha
.2f74	a5 2a		lda $2a				lda 	temp0
.2f76	48		pha				pha
.2f77	98		tya				tya 								; calculate Y + length
.2f78	18		clc				clc
.2f79	65 32		adc $32				adc 	tempShort
.2f7b	a8		tay				tay
.2f7c	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2f7e					_CallProcEvalParams:
.2f7e	e8		inx				inx
.2f7f	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2f81	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f83	f0 0b		beq $2f90			beq 	_CPDoneParams
.2f85	20 9d 38	jsr $389d			jsr 	Evaluate 					; evaluate a parameter
.2f88	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2f8a	c8		iny				iny
.2f8b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2f8d	f0 ef		beq $2f7e			beq 	_CallProcEvalParams
.2f8f	88		dey				dey 								; undo consumption.
.2f90					_CPDoneParams:
.2f90	20 ae 3f	jsr $3fae			jsr 	CheckRightParen 			; check closing parenthesis.
.2f93	8e c3 0d	stx $0dc3			stx 	paramCount 					; store parameter count+1
.2f96	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2f98	a9 50		lda #$50			lda 	#markerPROC
.2f9a	20 d6 3f	jsr $3fd6			jsr 	RSClaim
.2f9d	a9 01		lda #$01			lda 	#1 							; store return address.
.2f9f	20 02 40	jsr $4002			jsr 	RSSavePosition
.2fa2	68		pla				pla 								; get the new code Ptr
.2fa3	85 28		sta $28				sta 	codePtr
.2fa5	68		pla				pla
.2fa6	85 29		sta $29				sta 	codePtr+1
.2fa8	68		pla				pla 								; length of name + 4 is the param start.
.2fa9	18		clc				clc
.2faa	69 04		adc #$04			adc 	#4
.2fac	a8		tay				tay
.2fad	a2 ff		ldx #$ff			ldx 	#$FF
.2faf					_CPLoadParameters:
.2faf	e8		inx				inx 								; point to where the address should be loaded.
.2fb0	ec c3 0d	cpx $0dc3			cpx 	paramCount 					; too many parameters in definition ?
.2fb3	f0 1e		beq $2fd3			beq 	_CPParamError
.2fb5	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2fb7	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2fb9	f0 0e		beq $2fc9			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2fbb	20 90 2e	jsr $2e90			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2fbe	20 5e 2c	jsr $2c5e			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2fc1	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2fc3	c8		iny				iny
.2fc4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2fc6	f0 e7		beq $2faf			beq 	_CPLoadParameters
.2fc8	88		dey				dey 								; no, unconsume and check for )
.2fc9					_CPParamComplete:
.2fc9	20 ae 3f	jsr $3fae			jsr 	CheckRightParen 			; check )
.2fcc	e8		inx				inx 								; check right number of parameters have been consumed
.2fcd	ec c3 0d	cpx $0dc3			cpx 	paramCount
.2fd0	d0 01		bne $2fd3			bne 	_CPParamError
.2fd2	60		rts				rts
.2fd3					_CPParamError:
.2fd3	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2fd5	20 27 15	jsr $1527		jsr	errorHandler
.2fd8					ReturnProc:
.2fd8	20 fe 2e	jsr $2efe			jsr 	RestoreLocals 				; get the locals back.
.2fdb	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2fdd	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2fdf	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2fe1	f0 05		beq $2fe8			beq 	_isok
.2fe3	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2fe5	20 27 15	jsr $1527		jsr	errorHandler
.2fe8					_isok:
.2fe8	a9 01		lda #$01			lda 	#1
.2fea	20 15 40	jsr $4015			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2fed	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2fef	20 f8 3f	jsr $3ff8			jsr 	RSFree
.2ff2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0dc4					procList:
>0dc4							.fill 	2		 					; terminated by name high being zero.
.0dc6					yInLine:
>0dc6							.fill 	1
.2ff3					FindProcedure:
.2ff3	8c c6 0d	sty $0dc6			sty 	yInLine 					; save current position.
.2ff6	20 ad 30	jsr $30ad			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2ff9	85 2c		sta $2c				sta 	temp1
.2ffb	ad c4 0d	lda $0dc4			lda		procList 					; put procList address in temp2
.2ffe	85 2e		sta $2e				sta 	temp2
.3000	ad c5 0d	lda $0dc5			lda 	procList+1
.3003	85 2f		sta $2f				sta 	temp2+1
.3005	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.3007					_FPLoop:
.3007	b1 2e		lda ($2e),y			lda 	(temp2),y
.3009	f0 4d		beq $3058			beq 	_FPError 					; if so, we don't know this procedure.
.300b	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.300d	c8		iny				iny
.300e	b1 2e		lda ($2e),y			lda 	(temp2),y
.3010	85 2a		sta $2a				sta 	temp0
.3012	c8		iny				iny
.3013	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.3015	c5 2c		cmp $2c				cmp 	temp1
.3017	d0 29		bne $3042			bne 	_FPNext 					; hash is different, go to next.
.3019	38		sec				sec
.301a	ad c6 0d	lda $0dc6			lda 	yInLine 					; position in line must be at least 4
.301d	e9 04		sbc #$04			sbc 	#4
.301f	18		clc				clc
.3020	65 28		adc $28				adc 	codePtr
.3022	85 30		sta $30				sta 	temp3
.3024	a5 29		lda $29				lda 	codePtr+1
.3026	69 00		adc #$00			adc 	#0
.3028	85 31		sta $31				sta 	temp3+1
.302a	5a		phy				phy
.302b	a0 04		ldy #$04			ldy 	#4
.302d					_FPCName:
.302d	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.302f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3031	d0 0e		bne $3041			bne 	_FPpulYNext 				; if different go to next one.
.3033	c8		iny				iny
.3034	c9 3a		cmp #$3a			cmp 	#$3A
.3036	90 f5		bcc $302d			bcc 	_FPCName 					; compare the whole lot....
.3038	68		pla				pla 								; throw away the saved Y
.3039	98		tya				tya 								; length of name is Y-4
.303a	38		sec				sec
.303b	e9 04		sbc #$04			sbc 	#4
.303d	ac c6 0d	ldy $0dc6			ldy 	yInLine  					; get the original Y back
.3040	60		rts				rts
.3041					_FPpulYNext:
.3041	7a		ply				ply
.3042					_FPNext:
.3042	c8		iny				iny 								; next procedure record.
.3043	10 c2		bpl $3007			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.3045	98		tya				tya 								; subtract 128 from Y
.3046	38		sec				sec
.3047	e9 80		sbc #$80			sbc 	#128
.3049	a8		tay				tay
.304a	18		clc				clc 								; add 128 to temp2, so we can have more than
.304b	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.304d	69 80		adc #$80			adc 	#128
.304f	85 2e		sta $2e				sta 	temp2
.3051	90 b4		bcc $3007			bcc 	_FPLoop
.3053	e6 2f		inc $2f				inc 	temp2+1
.3055	4c 07 30	jmp $3007			jmp 	_FPLoop
.3058					_FPError:
.3058	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.305a	20 27 15	jsr $1527		jsr	errorHandler
.305d					ScanProc:
.305d	5a		phy				phy
.305e	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.3060	8d c4 0d	sta $0dc4			sta 	procList
.3063	a5 36		lda $36				lda 	lowMemory+1
.3065	8d c5 0d	sta $0dc5			sta 	procList+1
.3068	20 dc 33	jsr $33dc			jsr 	ResetCodeAddress 			; back to the start.
.306b					_ScanLoop:
.306b	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.306d	b1 28		lda ($28),y			lda 	(codePtr),y
.306f	f0 2a		beq $309b			beq 	_ScanExit
.3071	a0 03		ldy #$03			ldy 	#3							; get first token
.3073	b1 28		lda ($28),y			lda 	(codePtr),y
.3075	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.3077	d0 12		bne $308b			bne 	_ScanNext
.3079	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.307b	20 a2 30	jsr $30a2			jsr 	_ScanWrite
.307e	a5 28		lda $28				lda 	codePtr
.3080	20 a2 30	jsr $30a2			jsr 	_ScanWrite
.3083	a0 04		ldy #$04			ldy 	#4 							; start of name part
.3085	20 ad 30	jsr $30ad			jsr 	CalculateProcedureHash 		; calculate procedure hash
.3088	20 a2 30	jsr $30a2			jsr 	_ScanWrite					; and write that
.308b					_ScanNext:
.308b	18		clc				clc
.308c	a0 00		ldy #$00			ldy 	#0
.308e	b1 28		lda ($28),y			lda 	(codePtr),y
.3090	65 28		adc $28				adc 	codePtr
.3092	85 28		sta $28				sta 	codePtr
.3094	90 d5		bcc $306b			bcc 	_ScanLoop
.3096	e6 29		inc $29				inc 	codePtr+1
.3098	4c 6b 30	jmp $306b			jmp 	_ScanLoop
.309b					_ScanExit:
.309b	a9 00		lda #$00			lda 	#0 							; write ending zero.
.309d	20 a2 30	jsr $30a2			jsr 	_ScanWrite
.30a0	7a		ply				ply
.30a1	60		rts				rts
.30a2					_ScanWrite:
.30a2	a0 00		ldy #$00			ldy 	#0
.30a4	91 35		sta ($35),y			sta 	(lowMemory),y
.30a6	e6 35		inc $35				inc 	lowMemory
.30a8	d0 02		bne $30ac			bne 	_SWNoCarry
.30aa	e6 36		inc $36				inc 	lowMemory+1
.30ac					_SWNoCarry:
.30ac	60		rts				rts
.30ad					CalculateProcedureHash:
.30ad	a9 00		lda #$00			lda 	#0 							; clear hash.
.30af	85 2a		sta $2a				sta 	temp0
.30b1					_CPHLoop:
.30b1	18		clc				clc 								; add character and rotate and add carry back in
.30b2	b1 28		lda ($28),y			lda 	(codePtr),y
.30b4	65 2a		adc $2a				adc 	temp0
.30b6	6a		ror a				ror 	a
.30b7	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.30b9	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.30bb	b1 28		lda ($28),y			lda 	(codePtr),y
.30bd	c8		iny				iny 								; advance incase we go round again.
.30be	c9 3a		cmp #$3a			cmp 	#$3A
.30c0	90 ef		bcc $30b1			bcc 	_CPHLoop
.30c2	a5 2a		lda $2a				lda 	temp0
.30c4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.30c5					Command_Repeat:
.30c5	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.30c7	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.30c9	20 d6 3f	jsr $3fd6			jsr 	RSClaim
.30cc	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.30ce	20 02 40	jsr $4002			jsr 	RSSavePosition
.30d1	60		rts				rts
.30d2					Command_Until:
.30d2	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.30d4	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.30d6	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.30d8	f0 05		beq $30df			beq 	_isok
.30da	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.30dc	20 27 15	jsr $1527		jsr	errorHandler
.30df					_isok:
.30df	20 ba 38	jsr $38ba			jsr 	EvaluateRootInteger 		; at the bottom.
.30e2	20 64 3f	jsr $3f64			jsr 	MInt32Zero					; check if TOS zero
.30e5	d0 06		bne $30ed			bne 	_CUExit
.30e7	a9 01		lda #$01			lda 	#1
.30e9	20 15 40	jsr $4015			jsr 	RSLoadPosition 				; reload the position from offset 1.
.30ec	60		rts				rts
.30ed					_CUExit:
.30ed	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.30ef	20 f8 3f	jsr $3ff8			jsr 	RSFree
.30f2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.30f3					ScanForward:
.30f3	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.30f5	86 2d		stx $2d				stx 	temp1+1
.30f7	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.30f9	85 2e		sta $2e				sta 	temp2
.30fb	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.30fd	c8		iny				iny
.30fe	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.3100	d0 08		bne $310a			bne 	_SFNoCheck 					; if so, check token against entered values.
.3102	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.3104	f0 24		beq $312a			beq 	_SFExit 					; at the same strcture depth.
.3106	c5 2d		cmp $2d				cmp 	temp1+1
.3108	f0 20		beq $312a			beq 	_SFExit
.310a					_SFNoCheck:
.310a	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.310c	90 ed		bcc $30fb			bcc 	_SFLoop
.310e	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.3110	90 19		bcc $312b			bcc 	_SFSpecials
.3112	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.3114	90 e5		bcc $30fb			bcc 	_SFLoop
.3116	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.3118	b0 e1		bcs $30fb			bcs 	_SFLoop
.311a	aa		tax				tax  								; token in X, and look up the adjuster.
.311b	bd d8 37	lda $37d8,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.311e	38		sec				sec 								; convert to an offset ($FF,$01)
.311f	e9 81		sbc #$81			sbc 	#$81
.3121	18		clc				clc 								; add to depth
.3122	65 2e		adc $2e				adc 	temp2
.3124	85 2e		sta $2e				sta 	temp2
.3126	10 d3		bpl $30fb			bpl 	_SFLoop 					; +ve okay to continue
.3128	30 07		bmi $3131			bmi 	SFError 					; if gone -ve then we have a nesting error
.312a	60		rts		_SFExit:rts
.312b					_SFSpecials:
.312b	20 36 31	jsr $3136			jsr 	ScannerSkipSpecial
.312e	4c fb 30	jmp $30fb			jmp 	_SFLoop
.3131					SFError:
.3131	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.3133	20 27 15	jsr $1527		jsr	errorHandler
.3136					ScannerSkipSpecial:
.3136	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.3138	f0 10		beq $314a			beq 	_SFNextLine
.313a	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.313c	f0 2b		beq $3169			beq 	_SFFloatSkip
.313e	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.3140	f0 02		beq $3144			beq 	_SFSkipString
.3142	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.3143	60		rts				rts 								; token.
.3144					_SFSkipString:
.3144	98		tya				tya
.3145	38		sec				sec
.3146	71 28		adc ($28),y			adc 	(codePtr),y
.3148	a8		tay				tay
.3149	60		rts				rts
.314a					_SFNextLine:
.314a	a0 00		ldy #$00			ldy 	#0 							; get offset
.314c	b1 28		lda ($28),y			lda 	(codePtr),y
.314e	18		clc				clc 								; add to code pointer.
.314f	65 28		adc $28				adc 	codePtr
.3151	85 28		sta $28				sta 	codePtr
.3153	90 02		bcc $3157			bcc		_SFNLNoCarry
.3155	e6 29		inc $29				inc 	codePtr+1
.3157					_SFNLNoCarry:
.3157	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.3159	d0 0b		bne $3166			bne		_SFXNL 						; no go round again
.315b	a5 2c		lda $2c				lda 	temp1
.315d	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.315f	d0 d0		bne $3131			bne 	SFError 					; read uses this to search for data statements
.3161	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.3163	20 27 15	jsr $1527		jsr	errorHandler
.3166	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.3168	60		rts				rts
.3169					_SFFloatSkip:
.3169	98		tya				tya 								; skip over an embedded float.
.316a	18		clc				clc
.316b	69 05		adc #$05			adc 	#FloatEmbeddedSize
.316d	a8		tay				tay
.316e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.316f					Command_While:
.316f	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.3171	a2 04		ldx #$04			ldx 	#4
.3173	20 d6 3f	jsr $3fd6			jsr 	RSClaim 					; create on stack.
.3176	88		dey				dey
.3177	a9 01		lda #$01			lda 	#1
.3179	20 02 40	jsr $4002			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.317c	c8		iny				iny
.317d	20 ba 38	jsr $38ba			jsr 	EvaluateRootInteger			; get the conditional
.3180	20 64 3f	jsr $3f64			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.3183	f0 01		beq $3186			beq 	_CWFail
.3185	60		rts				rts
.3186					_CWFail:
.3186	a9 04		lda #$04			lda 	#4
.3188	20 f8 3f	jsr $3ff8			jsr 	RSFree 						; close the just opened position.
.318b	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.318d	aa		tax				tax
.318e	20 f3 30	jsr $30f3			jsr 	ScanForward
.3191	60		rts				rts
.3192					Command_Wend:
.3192	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3194	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.3196	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.3198	f0 05		beq $319f			beq 	_isok
.319a	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.319c	20 27 15	jsr $1527		jsr	errorHandler
.319f					_isok:
.319f	a9 01		lda #$01			lda 	#1
.31a1	20 15 40	jsr $4015			jsr 	RSLoadPosition				; go back until true
.31a4	a9 04		lda #$04			lda 	#4
.31a6	20 f8 3f	jsr $3ff8			jsr 	RSFree 						; close the loop
.31a9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.31aa					CommandClear:
.31aa					XCommandClear:
.31aa	5a		phy				phy
.31ab	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.31ae	85 33		sta $33				sta 	highMemory
.31b0	ad cd 0a	lda $0acd			lda 	endMemory+1
.31b3	85 34		sta $34				sta 	highMemory+1
.31b5	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.31b8	85 2a		sta $2a				sta 	temp0
.31ba	ad c9 0a	lda $0ac9			lda 	basePage+1
.31bd	85 2b		sta $2b				sta 	temp0+1
.31bf					_CCFindEnd:
.31bf	a0 00		ldy #$00			ldy 	#0
.31c1	b1 2a		lda ($2a),y			lda 	(temp0),y
.31c3	f0 0c		beq $31d1			beq 	_CCFoundEnd 				; offset zero is end.
.31c5	18		clc				clc
.31c6	65 2a		adc $2a				adc 	temp0 						; move to next line
.31c8	85 2a		sta $2a				sta 	temp0
.31ca	90 f3		bcc $31bf			bcc 	_CCFindEnd
.31cc	e6 2b		inc $2b				inc 	temp0+1
.31ce	4c bf 31	jmp $31bf			jmp 	_CCFindEnd
.31d1					_CCFoundEnd:
.31d1	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.31d3	85 35		sta $35				sta 	lowMemory
.31d5	a5 2b		lda $2b				lda 	temp0+1
.31d7	85 36		sta $36				sta 	lowMemory+1
.31d9	18		clc				clc 								; put temp0+1 in endProgram
.31da	a5 2a		lda $2a				lda 	temp0
.31dc	69 01		adc #$01			adc 	#1
.31de	8d ca 0a	sta $0aca			sta 	endProgram
.31e1	a5 2b		lda $2b				lda 	temp0+1
.31e3	69 00		adc #$00			adc 	#0
.31e5	8d cb 0a	sta $0acb			sta 	endProgram+1
.31e8	18		clc				clc 								; put a bit of space in.
.31e9	a5 35		lda $35				lda 	lowMemory
.31eb	69 04		adc #$04			adc 	#4
.31ed	85 35		sta $35				sta 	lowMemory
.31ef	90 02		bcc $31f3			bcc 	_CCNoCarry
.31f1	e6 36		inc $36				inc 	lowMemory+1
.31f3					_CCNoCarry:
.31f3	20 c8 3f	jsr $3fc8			jsr 	RSReset 					; reset the return stack.
.31f6	a2 06		ldx #$06		ldx	#6
.31f8	20 20 4f	jsr $4f20		jsr	variableHandler
.31fb	20 5d 30	jsr $305d			jsr 	ScanProc 					; scan for procedures
.31fe	20 04 2a	jsr $2a04			jsr 	CommandRestore 				; do a restore
.3201	7a		ply				ply
.3202	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0dc7					structIndent:
>0dc7							.fill 	1
.3203					CommandList:
.3203	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.3205	8e c7 0d	stx $0dc7			stx 	structIndent
.3208	20 3d 3f	jsr $3f3d			jsr 	MInt32False
.320b	e8		inx				inx
.320c	20 39 3f	jsr $3f39			jsr 	MInt32True
.320f	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.3211	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.3213	f0 15		beq $322a			beq 	_CLEndLine
.3215	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.3217	30 1b		bmi $3234			bmi 	_CLDoListing 				; do the whole lot.
.3219	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.321b	20 bc 38	jsr $38bc			jsr 	EvaluateInteger
.321e	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.3220	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3222	f0 06		beq $322a			beq 	_CLEndLine
.3224	20 7d 3e	jsr $3e7d			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.3227	4c 34 32	jmp $3234			jmp 	_CLDoListing 				; own e.g. list 1100
.322a					_CLEndLine:
.322a	c8		iny				iny 								; skip comma
.322b	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.322d	30 05		bmi $3234			bmi 	_CLDoListing
.322f	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.3231	20 bc 38	jsr $38bc			jsr 	EvaluateInteger				; get end
.3234					_CLDoListing:
.3234	20 dc 33	jsr $33dc			jsr 	ResetCodeAddress 			; back to the start.
.3237					_CLCheckLoop:
.3237	a2 18		ldx #$18		ldx	#24
.3239	20 05 15	jsr $1505		jsr	deviceHandler
.323c	a0 00		ldy #$00			ldy 	#0							; check end.
.323e	b1 28		lda ($28),y			lda 	(codePtr),y
.3240	f0 41		beq $3283			beq 	_CLEnd
.3242	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3244	20 86 32	jsr $3286			jsr 	CLCompareLineTOS
.3247	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3249	f0 28		beq $3273			beq 	_CLNext
.324b	e8		inx				inx
.324c	20 86 32	jsr $3286			jsr 	CLCompareLineTOS 			; compare vs higher
.324f	c9 01		cmp #$01			cmp 	#1
.3251	f0 20		beq $3273			beq 	_CLNext
.3253	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.3255	20 a8 32	jsr $32a8			jsr 	CLStructureCheck
.3258	ad c7 0d	lda $0dc7			lda 	structIndent 				; indent level.
.325b	10 02		bpl $325f			bpl 	_CLPositive
.325d	a9 00		lda #$00			lda 	#0
.325f					_CLPositive:
.325f	a2 04		ldx #$04		ldx	#4
.3261	20 61 4b	jsr $4b61		jsr	tokeniserHandler
.3264	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.3266	20 a8 32	jsr $32a8			jsr 	CLStructureCheck
.3269	ad c7 0d	lda $0dc7			lda 	structIndent
.326c	10 05		bpl $3273			bpl 	_CLNext
.326e	a9 00		lda #$00			lda 	#0
.3270	8d c7 0d	sta $0dc7			sta 	structIndent
.3273					_CLNext:
.3273	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.3275	b1 28		lda ($28),y			lda 	(codePtr),y
.3277	18		clc				clc
.3278	65 28		adc $28				adc 	codePtr
.327a	85 28		sta $28				sta 	codePtr
.327c	90 b9		bcc $3237			bcc 	_CLCheckLoop
.327e	e6 29		inc $29				inc 	codePtr+1
.3280	4c 37 32	jmp $3237			jmp 	_CLCheckLoop
.3283					_CLEnd:
.3283	4c 24 40	jmp $4024			jmp 	WarmStart 					; warm start after list.
.3286					CLCompareLineTOS:
.3286	a0 01		ldy #$01			ldy 	#1
.3288	b1 28		lda ($28),y			lda 	(codePtr),y
.328a	55 98		eor $98,x			eor 	esInt0,x
.328c	85 2a		sta $2a				sta 	temp0
.328e	c8		iny				iny
.328f	b1 28		lda ($28),y			lda 	(codePtr),y
.3291	55 a0		eor $a0,x			eor 	esInt1,x
.3293	05 2a		ora $2a				ora 	temp0
.3295	f0 10		beq $32a7			beq 	_CLCLTExit
.3297	88		dey				dey
.3298	b1 28		lda ($28),y			lda 	(codePtr),y
.329a	d5 98		cmp $98,x			cmp 	esInt0,x
.329c	c8		iny				iny
.329d	b1 28		lda ($28),y			lda 	(codePtr),y
.329f	f5 a0		sbc $a0,x			sbc 	esInt1,x
.32a1	a9 ff		lda #$ff			lda 	#255
.32a3	90 02		bcc $32a7			bcc 	_CLCLTExit
.32a5	a9 01		lda #$01			lda 	#1
.32a7					_CLCLTExit:
.32a7	60		rts				rts
.32a8					CLStructureCheck:
.32a8	85 2a		sta $2a				sta 	temp0
.32aa	a0 03		ldy #$03			ldy 	#3
.32ac					_CLSCLoop:
.32ac	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.32ae	c8		iny				iny
.32af	c9 80		cmp #$80			cmp 	#$80
.32b1	90 f9		bcc $32ac			bcc 	_CLSCLoop 					; $00-$7F just step over.
.32b3	f0 28		beq $32dd			beq		_CLSCExit					; EOL return
.32b5	c9 86		cmp #$86			cmp 	#$86 						; special handler
.32b7	90 1e		bcc $32d7			bcc 	_CLSCSpecial
.32b9	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.32bb	90 ef		bcc $32ac			bcc 	_CLSCLoop
.32bd	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.32bf	b0 eb		bcs $32ac			bcs 	_CLSCLoop
.32c1	aa		tax				tax 								; get adjustment
.32c2	bd d8 37	lda $37d8,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.32c5	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.32c7	d0 e3		bne $32ac			bne 	_CLSCLoop
.32c9	38		sec				sec
.32ca	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.32cc	0a		asl a				asl 	a 							; double indent step
.32cd	18		clc				clc
.32ce	6d c7 0d	adc $0dc7			adc 	structIndent 				; add to structure indent
.32d1	8d c7 0d	sta $0dc7			sta 	structIndent
.32d4	4c ac 32	jmp $32ac			jmp 	_CLSCLoop
.32d7					_CLSCSpecial:
.32d7	20 36 31	jsr $3136			jsr 	ScannerSkipSpecial
.32da	4c ac 32	jmp $32ac			jmp 	_CLSCLoop
.32dd					_CLSCExit:
.32dd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.32de					CommandLoad:
.32de	20 06 33	jsr $3306			jsr 	CLSParameters 					; get parameters for load.
.32e1	08		php				php
.32e2	a2 0c		ldx #$0c		ldx	#12
.32e4	20 05 15	jsr $1505		jsr	deviceHandler
.32e7	28		plp				plp
.32e8	b0 08		bcs $32f2			bcs 	_CLExit 						; if CC then load a program, so warm start.
.32ea	20 aa 31	jsr $31aa			jsr 	CommandClear
.32ed	a2 04		ldx #$04		ldx	#4
.32ef	20 c6 29	jsr $29c6		jsr	interactionHandler
.32f2					_CLExit
.32f2	60		rts				rts
.32f3					CommandSave:
.32f3	20 06 33	jsr $3306			jsr 	CLSParameters					; get parameters for save
.32f6	90 08		bcc $3300			bcc 	_CSNoOverrideAddress
.32f8	20 bb 3f	jsr $3fbb			jsr 	CheckComma 						; should be a comma.
.32fb	a2 02		ldx #$02			ldx 	#2
.32fd	20 bc 38	jsr $38bc			jsr 	EvaluateInteger 				; get save end address.
.3300					_CSNoOverrideAddress:
.3300	a2 16		ldx #$16		ldx	#22
.3302	20 05 15	jsr $1505		jsr	deviceHandler
.3305	60		rts				rts
.3306					CLSParameters:
.3306	a2 00		ldx #$00			ldx 	#0 								; string at +0
.3308	20 b1 38	jsr $38b1			jsr 	EvaluateString
.330b	e8		inx				inx 									; erase out +1 (start) +2 (end, for save)
.330c	20 3d 3f	jsr $3f3d			jsr 	MInt32False
.330f	e8		inx				inx
.3310	20 3d 3f	jsr $3f3d			jsr 	MInt32False
.3313	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.3316	85 99		sta $99				sta 	esInt0+1
.3318	ad c9 0a	lda $0ac9			lda 	basePage+1
.331b	85 a1		sta $a1				sta 	esInt1+1
.331d	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.3320	85 9a		sta $9a				sta 	esInt0+2
.3322	ad cb 0a	lda $0acb			lda 	endProgram+1
.3325	85 a2		sta $a2				sta 	esInt1+2
.3327	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.3329	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.332b	d0 08		bne $3335			bne 	_CLSDefault
.332d	c8		iny				iny 									; skip comma
.332e	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.3330	20 bc 38	jsr $38bc			jsr 	EvaluateInteger 				; the load or start save address
.3333	38		sec				sec 									; return CS indicating override
.3334	60		rts				rts
.3335					_CLSDefault:
.3335	18		clc				clc
.3336	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.3337					Command_New:
.3337					Command_XNew:
.3337	20 dc 33	jsr $33dc			jsr 	ResetCodeAddress 			; point to first line
.333a	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.333c	98		tya				tya
.333d	91 28		sta ($28),y			sta 	(codePtr),y
.333f	20 aa 31	jsr $31aa			jsr 	CommandClear 				; clear everything down.
.3342	4c 16 2d	jmp $2d16			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0dc8					breakCounter:
>0dc8								.fill 	1
.0dc9					breakIncrement:
>0dc9								.fill 	1
.3345					Command_Run:
.3345					XCommand_Run:
.3345	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.3347	9a		txs				txs
.3348	20 d6 33	jsr $33d6			jsr 	BreakOn 					; turn break on
.334b	20 aa 31	jsr $31aa			jsr 	CommandClear 				; clear everything.
.334e	20 dc 33	jsr $33dc			jsr 	ResetCodeAddress 			; back to the start.
.3351					Command_RunFrom:
.3351	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.3353					CRNextInstruction:
.3353	a9 00		lda #$00			lda 	#0
.3355	85 3a		sta $3a				sta 	softMemAlloc+1
.3357	ad c8 0d	lda $0dc8			lda 	breakCounter 				; check for break.
.335a	6d c9 0d	adc $0dc9			adc 	breakIncrement
.335d	8d c8 0d	sta $0dc8			sta 	breakCounter
.3360	90 05		bcc $3367			bcc 	_CRNoChecks
.3362	a2 18		ldx #$18		ldx	#24
.3364	20 05 15	jsr $1505		jsr	deviceHandler
.3367					_CRNoChecks
.3367	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.3369	10 1c		bpl $3387			bpl 	_CRNotToken
.336b	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.336d	b0 0c		bcs $337b			bcs 	_CRExecute
.336f	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.3371	b0 55		bcs $33c8			bcs 	Unimplemented
.3373	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.3375	b0 04		bcs $337b			bcs 	_CRExecute
.3377	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.3379	b0 16		bcs $3391			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.337b					_CRExecute:
.337b	c8		iny				iny 								; consume it.
.337c	0a		asl a				asl 	a 							; double it, losing most significant bit.
.337d	aa		tax				tax
.337e	20 84 33	jsr $3384			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.3381	4c 53 33	jmp $3353			jmp 	CRNextInstruction
.3384					_CRRunRoutine:
.3384	7c ee 33	jmp ($33ee,x)			jmp 	(Group0Vectors,x)
.3387					_CRNotToken:
.3387	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.3389	b0 3d		bcs $33c8			bcs 	Unimplemented
.338b					_CRDefaultLet:
.338b	20 4b 2c	jsr $2c4b			jsr 	CommandLet 					; do the default, LET
.338e	4c 53 33	jmp $3353			jmp 	CRNextInstruction
.3391					_CRCheckIndirect:
.3391	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.3393	f0 0a		beq $339f			beq 	_CRAndCommand
.3395	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.3397	f0 f2		beq $338b			beq 	_CRDefaultLet
.3399	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.339b	f0 ee		beq $338b			beq 	_CRDefaultLet
.339d	d0 29		bne $33c8			bne 	Unimplemented
.339f					_CRAndCommand:
.339f	c8		iny				iny 								; skip over the AND token
.33a0	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.33a2	20 bc 33	jsr $33bc			jsr 	CommandAssembler 			; do the assembler command
.33a5	4c 53 33	jmp $3353			jmp 	CRNextInstruction 			; and loop round.
.33a8					CommandShift1:
.33a8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.33aa	10 1c		bpl $33c8			bpl 	Unimplemented 				; we have an error as this should not happen.
.33ac	c8		iny				iny 								; advance over it.
.33ad	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.33af	b0 0b		bcs $33bc			bcs 	CommandAssembler
.33b1	0a		asl a				asl 	a 							; double into X
.33b2	aa		tax				tax
.33b3	7c ba 34	jmp ($34ba,x)			jmp 	(Group1Vectors-12,x)
.33b6					CommandShift2:
.33b6	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.33b8	20 74 18	jsr $1874		jsr	extensionHandler
.33bb	60		rts				rts
.33bc					CommandAssembler:
.33bc	a2 02		ldx #$02		ldx	#2
.33be	20 ac 13	jsr $13ac		jsr	assemblerHandler
.33c1	60		rts				rts
.33c2					CommandAssemblerLabel:
.33c2	a2 04		ldx #$04		ldx	#4
.33c4	20 ac 13	jsr $13ac		jsr	assemblerHandler
.33c7	60		rts				rts
.33c8					Unimplemented:
.33c8	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.33ca	20 27 15	jsr $1527		jsr	errorHandler
.33cd					CommandColon:
.33cd	60		rts				rts
.33ce					CommandBreak:
.33ce	20 ba 38	jsr $38ba			jsr 	EvaluateRootInteger
.33d1	20 64 3f	jsr $3f64			jsr 	MInt32Zero
.33d4	f0 02		beq $33d8			beq 	BreakOff
.33d6					BreakOn:
.33d6	a2 04		ldx #$04			ldx 	#4 							; checks 1 in 256/X instructions.
.33d8					BreakOff:
.33d8	8e c9 0d	stx $0dc9			stx 	breakIncrement
.33db	60		rts				rts
.33dc					ResetCodeAddress:
.33dc	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.33df	85 28		sta $28				sta 	codePtr
.33e1	ad c9 0a	lda $0ac9			lda 	basePage+1
.33e4	85 29		sta $29				sta 	codePtr+1
.33e6	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.33e8	60		rts				rts
.33e9					TKErr01:
.33e9					TKErr02:
.33e9					TKErr03:
.33e9					TKErr04:
.33e9					TKErr05:
.33e9					TKErr06:
.33e9					TKErr07:
.33e9					TKErr08:
.33e9					TKErr09:
.33e9					TKErr10:
.33e9					TKErr11:
.33e9					TKErr12:
.33e9					TKErr13:
.33e9					TKErr14:
.33e9					TKErr15:
.33e9					TKErr16:
.33e9					TKErr17:
.33e9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.33eb	20 27 15	jsr $1527		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.33ee					Group0Vectors:
>33ee	1c 2d					.word	AdvanceNextLine          ; $80 [[eol]]
>33f0	a8 33					.word	CommandShift1            ; $81 [[sh1]]
>33f2	b6 33					.word	CommandShift2            ; $82 [[sh2]]
>33f4	e9 33					.word	TKErr09                  ; $83 [[sh3]]
>33f6	e9 33					.word	TKErr10                  ; $84 [[fpc]]
>33f8	e9 33					.word	TKErr08                  ; $85 [[str]]
>33fa	a3 35					.word	AndHandler               ; $86 and
>33fc	90 35					.word	OrHandler                ; $87 or
>33fe	7d 35					.word	XorHandler               ; $88 xor
>3400	c5 36					.word	CompareGreaterEq         ; $89 >=
>3402	cf 36					.word	CompareLessEq            ; $8a <=
>3404	b1 36					.word	CompareGreater           ; $8b >
>3406	a7 36					.word	CompareLess              ; $8c <
>3408	9d 36					.word	CompareEquals            ; $8d =
>340a	bb 36					.word	CompareNotEquals         ; $8e <>
>340c	0e 35					.word	AddHandler               ; $8f +
>340e	31 35					.word	SubHandler               ; $90 -
>3410	c9 35					.word	ShrHandler               ; $91 >>
>3412	b6 35					.word	ShlHandler               ; $92 <<
>3414	44 35					.word	MulHandler               ; $93 *
>3416	57 35					.word	DivHandler               ; $94 /
>3418	6a 35					.word	ModHandler               ; $95 mod
>341a	02 36					.word	PowerHandler             ; $96 ^
>341c	dc 35					.word	WordRefHandler           ; $97 !
>341e	ef 35					.word	ByteRefHandler           ; $98 ?
>3420	c5 30					.word	Command_Repeat           ; $99 repeat
>3422	6f 31					.word	Command_While            ; $9a while
>3424	30 2d					.word	Command_FOR              ; $9b for
>3426	36 2e					.word	CommandIf                ; $9c if
>3428	e9 33					.word	TKErr04                  ; $9d defproc
>342a	d2 30					.word	Command_Until            ; $9e until
>342c	92 31					.word	Command_Wend             ; $9f wend
>342e	8d 2d					.word	Command_NEXT             ; $a0 next
>3430	e9 33					.word	TKErr06                  ; $a1 then
>3432	71 2e					.word	Command_ENDIF            ; $a2 endif
>3434	d8 2f					.word	ReturnProc               ; $a3 endproc
>3436	27 38					.word	UnaryParenthesis         ; $a4 (
>3438	01 3a					.word	UnaryLen                 ; $a5 len(
>343a	45 3a					.word	UnarySgn                 ; $a6 sgn(
>343c	2e 3a					.word	UnaryAbs                 ; $a7 abs(
>343e	9e 3a					.word	Unary_Random             ; $a8 random(
>3440	e8 3a					.word	Unary_Page               ; $a9 page
>3442	39 3f					.word	MInt32True               ; $aa true
>3444	3d 3f					.word	MInt32False              ; $ab false
>3446	b3 3a					.word	Unary_Min                ; $ac min(
>3448	b7 3a					.word	Unary_Max                ; $ad max(
>344a	c0 3b					.word	UnarySys                 ; $ae sys(
>344c	69 3b					.word	UnaryTimer               ; $af timer(
>344e	83 39					.word	EventFunction            ; $b0 event(
>3450	90 3b					.word	UnaryGet                 ; $b1 get(
>3452	80 3b					.word	UnaryInkey               ; $b2 inkey(
>3454	39 3b					.word	UnaryAlloc               ; $b3 alloc(
>3456	f5 3b					.word	ExecChr                  ; $b4 chr$(
>3458	21 3c					.word	ExecLeft                 ; $b5 left$(
>345a	3e 3c					.word	ExecMid                  ; $b6 mid$(
>345c	66 3c					.word	ExecRight                ; $b7 right$(
>345e	08 39					.word	Event_Str                ; $b8 str$(
>3460	37 39					.word	UnaryVal                 ; $b9 val(
>3462	5c 3a					.word	UnaryPeek                ; $ba peek(
>3464	62 3a					.word	UnaryDeek                ; $bb deek(
>3466	68 3a					.word	UnaryLeek                ; $bc leek(
>3468	1f 3a					.word	UnaryAsc                 ; $bd asc(
>346a	13 3b					.word	UnaryIntToFloat          ; $be int(
>346c	26 3b					.word	UnaryFloatToInt          ; $bf float(
>346e	3a 39					.word	UnaryIsVal               ; $c0 isval(
>3470	0a 3c					.word	ExecUpper                ; $c1 upper$(
>3472	07 3c					.word	ExecLower                ; $c2 lower$(
>3474	f6 3a					.word	UnaryReference           ; $c3 @
>3476	0c 3b					.word	UnaryComplement          ; $c4 ~
>3478	09 3b					.word	UnaryHexMarker           ; $c5 &
>347a	ab 3b					.word	UnaryGetString           ; $c6 get$(
>347c	b1 3b					.word	UnaryInkeyString         ; $c7 inkey$(
>347e	e4 3b					.word	UnaryMem                 ; $c8 mem
>3480	e9 33					.word	TKErr01                  ; $c9 )
>3482	cd 33					.word	CommandColon             ; $ca :
>3484	e9 33					.word	TKErr02                  ; $cb ,
>3486	e9 33					.word	TKErr03                  ; $cc ;
>3488	04 2d					.word	Command_Rem2             ; $cd '
>348a	e9 33					.word	TKErr07                  ; $ce to
>348c	e9 33					.word	TKErr05                  ; $cf step
>348e	6b 2f					.word	CallProc                 ; $d0 proc
>3490	72 2e					.word	CommandLocal             ; $d1 local
>3492	3d 2c					.word	Command_Dim              ; $d2 dim
>3494	04 2d					.word	Command_Rem              ; $d3 rem
>3496	4b 2c					.word	CommandLet               ; $d4 let
>3498	91 2a					.word	Command_Input            ; $d5 input
>349a	6b 2e					.word	Command_ELSE             ; $d6 else
>349c	0e 2c					.word	Command_VDU              ; $d7 vdu
>349e	45 2b					.word	Command_Print            ; $d8 print
>34a0	fb 29					.word	CommandData              ; $d9 data
>34a2	74 24					.word	Command_Image            ; $da image
>34a4	e9 33					.word	TKErr12                  ; $db at
>34a6	e9 33					.word	TKErr14                  ; $dc flip
>34a8	2f 2c					.word	Command_Assert           ; $dd assert
>34aa	c7 2c					.word	Command_Poke             ; $de poke
>34ac	cb 2c					.word	Command_Doke             ; $df doke
>34ae	cf 2c					.word	Command_Loke             ; $e0 loke
>34b0	e0 2b					.word	Command_Ink              ; $e1 ink
>34b2	eb 2b					.word	Command_Paper            ; $e2 paper
>34b4	da 2b					.word	Command_CLS              ; $e3 cls
>34b6	f6 2b					.word	Command_Locate           ; $e4 locate
>34b8	c2 33					.word	CommandAssemblerLabel    ; $e5 .
>34ba	e9 33					.word	TKErr15                  ; $e6 from
>34bc	e9 33					.word	TKErr11                  ; $e7 #
>34be	aa 31					.word	CommandClear             ; $e8 clear
>34c0	e9 33					.word	TKErr16                  ; $e9 text
>34c2	e9 33					.word	TKErr17                  ; $ea type
>34c4	e9 33					.word	TKErr13                  ; $eb time

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.34c6					Group1Vectors:
>34c6	de 32					.word	CommandLoad              ; $86 load
>34c8	f3 32					.word	CommandSave              ; $87 save
>34ca	03 32					.word	CommandList              ; $88 list
>34cc	37 33					.word	Command_New              ; $89 new
>34ce	ce 33					.word	CommandBreak             ; $8a break
>34d0	45 33					.word	Command_Run              ; $8b run
>34d2	d0 29					.word	CommandRead              ; $8c read
>34d4	04 2a					.word	CommandRestore           ; $8d restore
>34d6	16 2d					.word	CommandEnd               ; $8e end
>34d8	11 2d					.word	CommandStop              ; $8f stop
>34da	19 2d					.word	CommandXemu              ; $90 xemu
>34dc	5f 2a					.word	CommandGOTO              ; $91 goto
>34de	34 2a					.word	CommandGOSUB             ; $92 gosub
>34e0	47 2a					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.34e2					BinaryProcess:
.34e2	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.34e4	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.34e6	0a		asl a				asl 	a
.34e7	30 0e		bmi $34f7			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.34e9	18		clc				clc 								; return CC for integer
.34ea	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.34ec	f0 08		beq $34f6			beq 	_BPExit 					; if both integer then return with CC.
.34ee	20 fc 34	jsr $34fc			jsr 	BPMakeBothFloat 			; make both float
.34f1	a9 01		lda #$01			lda 	#$01 						; set result type to float
.34f3	95 90		sta $90,x			sta 	esType,x
.34f5	38		sec				sec 								; and return with carry set.
.34f6					_BPExit:
.34f6	60		rts				rts
.34f7					_BPStringType:
.34f7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.34f9	20 27 15	jsr $1527		jsr	errorHandler
.34fc					BPMakeBothFloat:
.34fc	e8		inx				inx
.34fd	20 01 35	jsr $3501			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.3500	ca		dex				dex
.3501					BPMakeFloat:
.3501	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.3503	4a		lsr a				lsr 	a
.3504	b0 07		bcs $350d			bcs 	_BPIsFloat 					; already a float if set.
.3506	8a		txa				txa
.3507	a2 1c		ldx #$1c		ldx	#28
.3509	20 da 27	jsr $27da		jsr	floatingpointHandler
.350c	aa		tax				tax
.350d					_BPIsFloat:
.350d	60		rts				rts
.350e					AddHandler:
.350e	20 df 36	jsr $36df			jsr 	DereferenceTwo 				; dereference top two on stack.
.3511	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.3513	35 91		and $91,x			and 	esType+1,x
.3515	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.3517	d0 10		bne $3529			bne 	_AHStringConcat				; concatenate strings.
.3519	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.351c	b0 03		bcs $3521			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.351e	4c 23 3e	jmp $3e23			jmp 	MInt32Add 							; else do it as integer.
.3521					_IsFPOperation:
.3521	8a		txa				txa 								; call the relevant fp routine
.3522	a2 04		ldx #$04		ldx	#4
.3524	20 da 27	jsr $27da		jsr	floatingpointHandler
.3527	aa		tax				tax
.3528	60		rts				rts
.3529					_AHStringConcat:
.3529	8a		txa				txa 								; handled by the string module.
.352a	a2 06		ldx #$06		ldx	#6
.352c	20 d4 42	jsr $42d4		jsr	stringHandler
.352f	aa		tax				tax
.3530	60		rts				rts
.3531					SubHandler:
.3531	20 df 36	jsr $36df			jsr 	DereferenceTwo
.3534	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.3537	b0 03		bcs $353c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3539	4c 3d 3e	jmp $3e3d			jmp 	MInt32Sub 							; else do it as integer.
.353c					_IsFPOperation:
.353c	8a		txa				txa 								; call the relevant fp routine
.353d	a2 12		ldx #$12		ldx	#18
.353f	20 da 27	jsr $27da		jsr	floatingpointHandler
.3542	aa		tax				tax
.3543	60		rts				rts
.3544					MulHandler:
.3544	20 df 36	jsr $36df			jsr 	DereferenceTwo
.3547	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.354a	b0 03		bcs $354f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.354c	4c 57 3e	jmp $3e57			jmp 	MInt32Multiply 							; else do it as integer.
.354f					_IsFPOperation:
.354f	8a		txa				txa 								; call the relevant fp routine
.3550	a2 0c		ldx #$0c		ldx	#12
.3552	20 da 27	jsr $27da		jsr	floatingpointHandler
.3555	aa		tax				tax
.3556	60		rts				rts
.3557					DivHandler:
.3557	20 df 36	jsr $36df			jsr 	DereferenceTwo
.355a	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.355d	b0 03		bcs $3562			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.355f	4c 17 3d	jmp $3d17			jmp 	MInt32SDivide 							; else do it as integer.
.3562					_IsFPOperation:
.3562	8a		txa				txa 								; call the relevant fp routine
.3563	a2 08		ldx #$08		ldx	#8
.3565	20 da 27	jsr $27da		jsr	floatingpointHandler
.3568	aa		tax				tax
.3569	60		rts				rts
.356a					ModHandler:
.356a	20 df 36	jsr $36df			jsr 	DereferenceTwo
.356d	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.3570	b0 03		bcs $3575			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3572	4c 95 3d	jmp $3d95			jmp 	MInt32Modulus 							; else do it as integer.
.3575					_IsFPOperation:
.3575	8a		txa				txa 								; call the relevant fp routine
.3576	a2 0a		ldx #$0a		ldx	#10
.3578	20 da 27	jsr $27da		jsr	floatingpointHandler
.357b	aa		tax				tax
.357c	60		rts				rts
.357d					XorHandler:
.357d	20 df 36	jsr $36df			jsr 	DereferenceTwo
.3580	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.3583	b0 03		bcs $3588			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3585	4c c9 3c	jmp $3cc9			jmp 	MInt32Xor 							; else do it as integer.
.3588					_IsFPOperation:
.3588	8a		txa				txa 								; call the relevant fp routine
.3589	a2 0a		ldx #$0a		ldx	#10
.358b	20 da 27	jsr $27da		jsr	floatingpointHandler
.358e	aa		tax				tax
.358f	60		rts				rts
.3590					OrHandler:
.3590	20 df 36	jsr $36df			jsr 	DereferenceTwo
.3593	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.3596	b0 03		bcs $359b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3598	4c b0 3c	jmp $3cb0			jmp 	MInt32Or 							; else do it as integer.
.359b					_IsFPOperation:
.359b	8a		txa				txa 								; call the relevant fp routine
.359c	a2 0a		ldx #$0a		ldx	#10
.359e	20 da 27	jsr $27da		jsr	floatingpointHandler
.35a1	aa		tax				tax
.35a2	60		rts				rts
.35a3					AndHandler:
.35a3	20 df 36	jsr $36df			jsr 	DereferenceTwo
.35a6	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.35a9	b0 03		bcs $35ae			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35ab	4c 97 3c	jmp $3c97			jmp 	MInt32And 							; else do it as integer.
.35ae					_IsFPOperation:
.35ae	8a		txa				txa 								; call the relevant fp routine
.35af	a2 0a		ldx #$0a		ldx	#10
.35b1	20 da 27	jsr $27da		jsr	floatingpointHandler
.35b4	aa		tax				tax
.35b5	60		rts				rts
.35b6					ShlHandler:
.35b6	20 df 36	jsr $36df			jsr 	DereferenceTwo
.35b9	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.35bc	b0 03		bcs $35c1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35be	4c 37 36	jmp $3637			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.35c1					_IsFPOperation:
.35c1	8a		txa				txa 								; call the relevant fp routine
.35c2	a2 0a		ldx #$0a		ldx	#10
.35c4	20 da 27	jsr $27da		jsr	floatingpointHandler
.35c7	aa		tax				tax
.35c8	60		rts				rts
.35c9					ShrHandler:
.35c9	20 df 36	jsr $36df			jsr 	DereferenceTwo
.35cc	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.35cf	b0 03		bcs $35d4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35d1	4c 3a 36	jmp $363a			jmp 	MInt32ShiftRightX 							; else do it as integer.
.35d4					_IsFPOperation:
.35d4	8a		txa				txa 								; call the relevant fp routine
.35d5	a2 0a		ldx #$0a		ldx	#10
.35d7	20 da 27	jsr $27da		jsr	floatingpointHandler
.35da	aa		tax				tax
.35db	60		rts				rts
.35dc					WordRefHandler:
.35dc	20 df 36	jsr $36df			jsr 	DereferenceTwo
.35df	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.35e2	b0 03		bcs $35e7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35e4	4c 29 36	jmp $3629			jmp 	MInt32WordIndirect 							; else do it as integer.
.35e7					_IsFPOperation:
.35e7	8a		txa				txa 								; call the relevant fp routine
.35e8	a2 0a		ldx #$0a		ldx	#10
.35ea	20 da 27	jsr $27da		jsr	floatingpointHandler
.35ed	aa		tax				tax
.35ee	60		rts				rts
.35ef					ByteRefHandler:
.35ef	20 df 36	jsr $36df			jsr 	DereferenceTwo
.35f2	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.35f5	b0 03		bcs $35fa			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35f7	4c 2d 36	jmp $362d			jmp 	MInt32ByteIndirect 							; else do it as integer.
.35fa					_IsFPOperation:
.35fa	8a		txa				txa 								; call the relevant fp routine
.35fb	a2 0a		ldx #$0a		ldx	#10
.35fd	20 da 27	jsr $27da		jsr	floatingpointHandler
.3600	aa		tax				tax
.3601	60		rts				rts
.3602					PowerHandler:
.3602	20 df 36	jsr $36df			jsr 	DereferenceTwo
.3605	20 e2 34	jsr $34e2			jsr 	BinaryProcess 				; check to see if either is float
.3608	b0 03		bcs $360d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.360a	4c 15 36	jmp $3615			jmp 	PowerInteger 							; else do it as integer.
.360d					_IsFPOperation:
.360d	8a		txa				txa 								; call the relevant fp routine
.360e	a2 18		ldx #$18		ldx	#24
.3610	20 da 27	jsr $27da		jsr	floatingpointHandler
.3613	aa		tax				tax
.3614	60		rts				rts
.3615					PowerInteger:
.3615	20 fc 34	jsr $34fc			jsr 	BPMakeBothFloat				; make them float.
.3618	8a		txa				txa
.3619	a2 18		ldx #$18		ldx	#24
.361b	20 da 27	jsr $27da		jsr	floatingpointHandler
.361e	a2 14		ldx #$14		ldx	#20
.3620	20 da 27	jsr $27da		jsr	floatingpointHandler
.3623	aa		tax				tax
.3624	a9 00		lda #$00			lda 	#0 							; make type integer
.3626	95 90		sta $90,x			sta 	esType,x
.3628	60		rts				rts
.3629					Mint32WordIndirect:
.3629	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.362b	d0 02		bne $362f			bne 	Min32Indirect
.362d					Mint32ByteIndirect:
.362d	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.362f					Min32Indirect:
.362f	48		pha				pha 								; save the indirection
.3630	20 23 3e	jsr $3e23			jsr 	MInt32Add 					; add a!b a?b
.3633	68		pla				pla 								; and set the type to reference.
.3634	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.3636	60		rts				rts
.3637					Mint32ShiftLeftX:
.3637	18		clc				clc 								; CC shift left
.3638	90 01		bcc $363b			bcc 	Mint32Shift
.363a					Mint32ShiftRightX:
.363a	38		sec				sec 								; CS shift right
.363b					Mint32Shift:
.363b	08		php				php 								; save carry flag on stack.
.363c	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.363e	15 a9		ora $a9,x			ora 	esInt2+1,x
.3640	15 b1		ora $b1,x			ora 	esInt3+1,x
.3642	d0 1e		bne $3662			bne 	_MShiftZero
.3644	b5 99		lda $99,x			lda 	esInt0+1,x
.3646	c9 20		cmp #$20			cmp 	#32
.3648	b0 18		bcs $3662			bcs 	_MShiftZero
.364a					_MShiftLoop:
.364a	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.364c	f0 12		beq $3660			beq 	_MShiftExit
.364e	d6 99		dec $99,x			dec 	esInt0+1,x
.3650	28		plp				plp 								; restore and save carry
.3651	08		php				php
.3652	90 06		bcc $365a			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3654	20 5b 3f	jsr $3f5b			jsr 	Mint32ShiftRight
.3657	4c 4a 36	jmp $364a			jmp 	_MShiftLoop
.365a					_MShiftLeft:
.365a	20 52 3f	jsr $3f52			jsr 	Mint32ShiftLeft
.365d	4c 4a 36	jmp $364a			jmp 	_MShiftLoop
.3660					_MShiftExit:
.3660	28		plp				plp	 								; throw saved carry and exit
.3661	60		rts				rts
.3662					_MShiftZero:
.3662	4c 3d 3f	jmp $3f3d			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.3665					PerformComparison:
.3665	20 df 36	jsr $36df			jsr 	DereferenceTwo 				; make both values.
.3668	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.366a	35 91		and $91,x			and 	esType+1,x
.366c	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.366d	30 1d		bmi $368c			bmi 	_PCIsString
.366f	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.3671	15 91		ora $91,x			ora 	esType+1,x
.3673	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3674	30 22		bmi $3698			bmi 	_PCError
.3676	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.3678	f0 0f		beq $3689			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.367a	20 fc 34	jsr $34fc			jsr 	BPMakeBothFloat 			; make both float
.367d	8a		txa				txa
.367e	a2 06		ldx #$06		ldx	#6
.3680	20 da 27	jsr $27da		jsr	floatingpointHandler
.3683	86 32		stx $32				stx 	tempShort 					; save result
.3685	aa		tax				tax
.3686	a5 32		lda $32				lda 	tempShort
.3688	60		rts				rts
.3689					_PCIsInteger:
.3689	4c e2 3c	jmp $3ce2			jmp 	MInt32Compare
.368c					_PCIsString:
.368c	8a		txa				txa 								; A has SP
.368d	a2 0a		ldx #$0a		ldx	#10
.368f	20 d4 42	jsr $42d4		jsr	stringHandler
.3692	86 32		stx $32				stx 	tempShort 					; save result
.3694	aa		tax				tax 								; put SP back in X and get result.
.3695	a5 32		lda $32				lda 	tempShort
.3697	60		rts				rts
.3698					_PCError:
.3698	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.369a	20 27 15	jsr $1527		jsr	errorHandler
.369d					CompareEquals:
.369d	20 65 36	jsr $3665			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36a0	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.36a2	f0 35		beq $36d9			beq  	CompareTrue
.36a4	4c dc 36	jmp $36dc			jmp 	CompareFalse
.36a7					CompareLess:
.36a7	20 65 36	jsr $3665			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36aa	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.36ac	f0 2b		beq $36d9			beq  	CompareTrue
.36ae	4c dc 36	jmp $36dc			jmp 	CompareFalse
.36b1					CompareGreater:
.36b1	20 65 36	jsr $3665			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36b4	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.36b6	f0 21		beq $36d9			beq  	CompareTrue
.36b8	4c dc 36	jmp $36dc			jmp 	CompareFalse
.36bb					CompareNotEquals:
.36bb	20 65 36	jsr $3665			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36be	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.36c0	d0 17		bne $36d9			bne  	CompareTrue
.36c2	4c dc 36	jmp $36dc			jmp 	CompareFalse
.36c5					CompareGreaterEq:
.36c5	20 65 36	jsr $3665			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36c8	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.36ca	d0 0d		bne $36d9			bne  	CompareTrue
.36cc	4c dc 36	jmp $36dc			jmp 	CompareFalse
.36cf					CompareLessEq:
.36cf	20 65 36	jsr $3665			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36d2	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.36d4	d0 03		bne $36d9			bne  	CompareTrue
.36d6	4c dc 36	jmp $36dc			jmp 	CompareFalse
.36d9					CompareTrue:
.36d9	4c 39 3f	jmp $3f39			jmp 	MInt32True
.36dc					CompareFalse:
.36dc	4c 3d 3f	jmp $3f3d			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.36df					DereferenceTwo:
.36df	e8		inx				inx
.36e0	20 e4 36	jsr $36e4			jsr 	DereferenceOne
.36e3	ca		dex				dex
.36e4					DereferenceOne:
.36e4	b5 90		lda $90,x			lda 	esType,x
.36e6	10 3b		bpl $3723			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.36e8	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.36e9	b0 39		bcs $3724			bcs 	_DRFloatDeReference
.36eb	5a		phy				phy
.36ec	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.36ee	85 2a		sta $2a				sta 	temp0
.36f0	b5 a0		lda $a0,x			lda 	esInt1,x
.36f2	85 2b		sta $2b				sta 	temp0+1
.36f4	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.36f6	95 a0		sta $a0,x			sta 	esInt1,x
.36f8	95 a8		sta $a8,x			sta 	esInt2,x
.36fa	95 b0		sta $b0,x			sta 	esInt3,x
.36fc	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.36fe	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.3700	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.3701	30 0d		bmi $3710			bmi 	_DeRefString 				; string, 2 bytes only
.3703	d0 11		bne $3716			bne 	_DeRefByte 					; byte 1 byte only
.3705					_DeRefLong:
.3705	a0 03		ldy #$03			ldy 	#3
.3707	b1 2a		lda ($2a),y			lda 	(temp0),y
.3709	95 b0		sta $b0,x			sta 	esInt3,x
.370b	88		dey				dey
.370c	b1 2a		lda ($2a),y			lda 	(temp0),y
.370e	95 a8		sta $a8,x			sta 	esInt2,x
.3710					_DeRefString:
.3710	a0 01		ldy #$01			ldy 	#1
.3712	b1 2a		lda ($2a),y			lda 	(temp0),y
.3714	95 a0		sta $a0,x			sta 	esInt1,x
.3716					_DeRefByte:
.3716	a0 00		ldy #$00			ldy 	#0
.3718	b1 2a		lda ($2a),y			lda 	(temp0),y
.371a	95 98		sta $98,x			sta 	esInt0,x
.371c	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.371e	29 40		and #$40			and 	#$40
.3720	95 90		sta $90,x			sta 	esType,x
.3722	7a		ply				ply
.3723					_DRNotReference
.3723	60		rts				rts
.3724					_DRFloatDereference:
.3724	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0 					; address to deref in temp0
.3727	8a		txa				txa
.3728	a2 1e		ldx #$1e		ldx	#30
.372a	20 da 27	jsr $27da		jsr	floatingpointHandler
.372d	aa		tax				tax
.372e	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.3730	95 90		sta $90,x			sta 	esType,x
.3732	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.3733					EvaluateLevel:
.3733	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.3735	b0 1e		bcs $3755			bcs 	_ELStack
.3737	48		pha				pha 								; save precedence level.
.3738	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.373a	95 98		sta $98,x			sta 	esInt0,x
.373c	95 a0		sta $a0,x			sta 	esInt1,x
.373e	95 a8		sta $a8,x			sta 	esInt2,x
.3740	95 b0		sta $b0,x			sta 	esInt3,x
.3742	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.3744	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.3746	30 26		bmi $376e			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.3748	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3749	30 0f		bmi $375a			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.374b	8a		txa				txa 								; stack level in X
.374c	a2 02		ldx #$02		ldx	#2
.374e	20 20 4f	jsr $4f20		jsr	variableHandler
.3751	aa		tax				tax
.3752	4c 97 37	jmp $3797			jmp		_ELHasTerm
.3755					_ELStack:
.3755	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3757	20 27 15	jsr $1527		jsr	errorHandler
.375a					_ELIsConstant:
.375a	4a		lsr a				lsr 	a 							; get the value back
.375b	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.375d	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.375f					_ELCheckNext:
.375f	c8		iny				iny 								; look at next
.3760	b1 28		lda ($28),y			lda 	(codePtr),y
.3762	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.3764	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.3766	b0 2f		bcs $3797			bcs 	_ELHasTerm 					; done getting the constant.
.3768	20 30 38	jsr $3830			jsr 	ELShiftByteIn 				; shift byte into position.
.376b	4c 5f 37	jmp $375f			jmp 	_ELCheckNext
.376e					_ELIsToken:
.376e	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3770	f0 0f		beq $3781			beq 	_ELIsString
.3772	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3774	d0 5f		bne $37d5			bne 	_ELCheckUnary
.3776	8a		txa				txa 								; put X into A
.3777	c8		iny				iny 								; skip over the float marker
.3778	a2 1a		ldx #$1a		ldx	#26
.377a	20 da 27	jsr $27da		jsr	floatingpointHandler
.377d	aa		tax				tax 								; restore X
.377e	4c 97 37	jmp $3797			jmp 	_ELHasTerm
.3781					_ELIsString:
.3781	98		tya				tya 								; address of string is codePtr+y+1
.3782	38		sec				sec
.3783	65 28		adc $28				adc 	codePtr
.3785	95 98		sta $98,x			sta 	esInt0,x
.3787	a5 29		lda $29				lda 	codePtr+1
.3789	69 00		adc #$00			adc 	#0
.378b	95 a0		sta $a0,x			sta 	esInt1,x
.378d	a9 40		lda #$40			lda 	#$40 						; set type to string value
.378f	95 90		sta $90,x			sta 	esType,x
.3791	c8		iny				iny 								; skip over string.
.3792	98		tya				tya
.3793	38		sec				sec									; +1 for the length itself.
.3794	71 28		adc ($28),y			adc 	(codePtr),y
.3796	a8		tay				tay 								; and fall through to term loop code.
.3797					_ELHasTerm:
.3797	b1 28		lda ($28),y			lda 	(codePtr),y
.3799	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.379b	90 04		bcc $37a1			bcc 	_ELPopExit
.379d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.379f	90 02		bcc $37a3			bcc 	_ELHasBinaryTerm
.37a1					_ELPopExit:
.37a1	68		pla				pla
.37a2					_ELExit:
.37a2	60		rts				rts
.37a3					_ELHasBinaryTerm:
.37a3	84 32		sty $32				sty 	tempShort 					; save position
.37a5	a8		tay				tay 								; use token as an index and get the precedence.
.37a6	b9 d8 37	lda $37d8,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.37a9	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.37ab	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.37ad	68		pla				pla 								; restore current level.
.37ae	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.37b0	b0 f0		bcs $37a2			bcs 	_ELExit
.37b2	48		pha				pha 								; save current level back on the stack.
.37b3	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.37b5	48		pha				pha
.37b6	c8		iny				iny
.37b7	e8		inx				inx 								; calculate the RHS at the operator precedence.
.37b8	a5 32		lda $32				lda 	tempShort
.37ba	20 33 37	jsr $3733			jsr 	EvaluateLevel
.37bd	ca		dex				dex
.37be	68		pla				pla 								; get the operator back out.
.37bf					_ELExecuteA:
.37bf	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.37c1	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.37c2	aa		tax				tax
.37c3	bd ee 33	lda $33ee,x			lda 	Group0Vectors,x
.37c6	85 2a		sta $2a				sta 	temp0
.37c8	bd ef 33	lda $33ef,x			lda 	Group0Vectors+1,x
.37cb	85 2b		sta $2b				sta 	temp0+1
.37cd	a6 32		ldx $32				ldx 	tempShort
.37cf	20 1c 38	jsr $381c			jsr 	_ELCallTemp0
.37d2	4c 97 37	jmp $3797			jmp 	_ELHasTerm 					; and loop back round.
.37d5					_ELCheckUnary:
.37d5	c8		iny				iny 								; skip over token.
.37d6	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.37d8	f0 19		beq $37f3			beq 	_ELMinus
.37da	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.37dc	f0 2c		beq $380a			beq 	_ELIndirect
.37de	c9 98		cmp #$98			cmp 	#TKW_QMARK
.37e0	f0 28		beq $380a			beq 	_ELIndirect
.37e2	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.37e4	f0 39		beq $381f			beq 	_ELExtension
.37e6	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.37e8	90 04		bcc $37ee			bcc 	_ELUSyntax
.37ea	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.37ec	90 d1		bcc $37bf			bcc 	_ELExecuteA 				; if so do that token.
.37ee					_ELUSyntax:
.37ee	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.37f0	20 27 15	jsr $1527		jsr	errorHandler
.37f3					_ELMinus:
.37f3	20 85 38	jsr $3885			jsr 	EvaluateNumericTerm 		; get a number to negate.
.37f6	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.37f8	f0 0a		beq $3804			beq 	_ELMinusInteger
.37fa	8a		txa				txa
.37fb	a2 0e		ldx #$0e		ldx	#14
.37fd	20 da 27	jsr $27da		jsr	floatingpointHandler
.3800	aa		tax				tax
.3801	4c 97 37	jmp $3797			jmp 	_ELHasTerm
.3804					_ELMinusInteger:
.3804	20 f7 3e	jsr $3ef7			jsr 	MInt32Negate 				; do int negate
.3807	4c 97 37	jmp $3797			jmp 	_ELHasTerm
.380a					_ELIndirect:
.380a	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.380b	20 8e 38	jsr $388e			jsr 	EvaluateIntegerTerm 		; integer address
.380e	68		pla				pla
.380f	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.3811	f0 02		beq $3815			beq 	_ELHaveModifier
.3813	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.3815					_ELHaveModifier:
.3815	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.3817	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.3819	4c 97 37	jmp $3797			jmp 	_ELHasTerm
.381c					_ELCallTemp0:
.381c	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.381f					_ELExtension:
.381f	8a		txa				txa 								; stack pos in A
.3820	20 74 18	jsr $1874		jsr	extensionHandler
.3823	aa		tax				tax 								; restore stack
.3824	4c 97 37	jmp $3797			jmp 	_ELHasTerm
.3827					UnaryParenthesis:
.3827	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.3829	20 33 37	jsr $3733			jsr 	EvaluateLevel
.382c	20 ae 3f	jsr $3fae			jsr 	CheckRightParen 			; check for )
.382f	60		rts				rts
.3830					ELShiftByteIn:
.3830	48		pha				pha 								; save bits to shift in.
.3831	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.3833	48		pha				pha
.3834	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.3836	95 b0		sta $b0,x			sta 	esInt3,x
.3838	b5 a0		lda $a0,x			lda 	esInt1,x
.383a	95 a8		sta $a8,x			sta 	esInt2,x
.383c	b5 98		lda $98,x			lda 	esInt0,x
.383e	95 a0		sta $a0,x			sta 	esInt1,x
.3840	a9 00		lda #$00			lda 	#0
.3842	95 98		sta $98,x			sta 	esInt0,x
.3844	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.3845	29 03		and #$03			and 	#3 							; only want lower 2 bits
.3847	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3849					_ELShiftLoop:
.3849	4a		lsr a				lsr 	a
.384a	76 b0		ror $b0,x			ror 	esInt3,x
.384c	76 a8		ror $a8,x			ror 	esInt2,x
.384e	76 a0		ror $a0,x			ror 	esInt1,x
.3850	76 98		ror $98,x			ror 	esInt0,x
.3852	c9 01		cmp #$01			cmp 	#1
.3854	d0 f3		bne $3849			bne 	_ELShiftLoop
.3856	68		pla				pla 								; get original 6 bit value and OR in.
.3857	29 3f		and #$3f			and 	#$3F
.3859	15 98		ora $98,x			ora 	esInt0,x
.385b	95 98		sta $98,x			sta 	esInt0,x
.385d	60		rts				rts
.385e					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>385e	01					.byte	$01			; $86 and
>385f	01					.byte	$01			; $87 or
>3860	01					.byte	$01			; $88 xor
>3861	02					.byte	$02			; $89 >=
>3862	02					.byte	$02			; $8a <=
>3863	02					.byte	$02			; $8b >
>3864	02					.byte	$02			; $8c <
>3865	02					.byte	$02			; $8d =
>3866	02					.byte	$02			; $8e <>
>3867	03					.byte	$03			; $8f +
>3868	03					.byte	$03			; $90 -
>3869	04					.byte	$04			; $91 >>
>386a	04					.byte	$04			; $92 <<
>386b	04					.byte	$04			; $93 *
>386c	04					.byte	$04			; $94 /
>386d	04					.byte	$04			; $95 mod
>386e	05					.byte	$05			; $96 ^
>386f	06					.byte	$06			; $97 !
>3870	06					.byte	$06			; $98 ?
>3871	82					.byte	$82			; $99 repeat
>3872	82					.byte	$82			; $9a while
>3873	82					.byte	$82			; $9b for
>3874	82					.byte	$82			; $9c if
>3875	82					.byte	$82			; $9d defproc
>3876	80					.byte	$80			; $9e until
>3877	80					.byte	$80			; $9f wend
>3878	80					.byte	$80			; $a0 next
>3879	80					.byte	$80			; $a1 then
>387a	80					.byte	$80			; $a2 endif
>387b	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.387c					EvaluateTerm:
.387c	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.387e	20 33 37	jsr $3733			jsr 	EvaluateLevel
.3881	20 e4 36	jsr $36e4			jsr 	DereferenceOne
.3884	60		rts				rts
.3885					EvaluateNumericTerm:
.3885	20 7c 38	jsr $387c			jsr 	EvaluateTerm
.3888	b5 90		lda $90,x			lda 	esType,x
.388a	0a		asl a				asl 	a 							; see if it's a string.
.388b	30 09		bmi $3896			bmi 	ENTType
.388d	60		rts				rts
.388e					EvaluateIntegerTerm:
.388e	20 7c 38	jsr $387c			jsr 	EvaluateTerm
.3891	b5 90		lda $90,x			lda 	esType,x
.3893	d0 01		bne $3896			bne 	ENTType
.3895	60		rts				rts
.3896					ENTType:
.3896	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3898	20 27 15	jsr $1527		jsr	errorHandler
.389b					EvaluateRoot:
.389b	a2 00		ldx #$00			ldx 	#0
.389d					Evaluate:
.389d	a9 00		lda #$00			lda 	#0
.389f	20 33 37	jsr $3733			jsr 	EvaluateLevel
.38a2	20 e4 36	jsr $36e4			jsr 	DereferenceOne
.38a5	60		rts				rts
.38a6					EvaluateNumeric:
.38a6	20 9d 38	jsr $389d			jsr 	Evaluate
.38a9	b5 90		lda $90,x			lda 	esType,x
.38ab	0a		asl a				asl 	a 							; see if it's a string.
.38ac	30 e8		bmi $3896			bmi 	ENTType
.38ae	4a		lsr a				lsr 	a 							; shift float flag into carry.
.38af	4a		lsr a				lsr 	a
.38b0	60		rts				rts
.38b1					EvaluateString:
.38b1	20 9d 38	jsr $389d			jsr 	Evaluate
.38b4	b5 90		lda $90,x			lda 	esType,x
.38b6	0a		asl a				asl 	a 							; see if it's a string.
.38b7	10 dd		bpl $3896			bpl 	ENTType
.38b9	60		rts				rts
.38ba					EvaluateRootInteger:
.38ba	a2 00		ldx #$00			ldx 	#0
.38bc					EvaluateInteger:
.38bc	20 9d 38	jsr $389d			jsr 	Evaluate
.38bf	b5 90		lda $90,x			lda 	esType,x
.38c1	d0 d3		bne $3896			bne 	ENTType
.38c3	60		rts				rts
.38c4					EvaluateSmallInteger:
.38c4	20 bc 38	jsr $38bc			jsr 	EvaluateInteger
.38c7	b5 a0		lda $a0,x			lda 	esInt1,x
.38c9	15 a8		ora $a8,x			ora 	esInt2,x
.38cb	15 b0		ora $b0,x			ora 	esInt3,x
.38cd	d0 03		bne $38d2			bne 	_ESIValue
.38cf	b5 98		lda $98,x			lda 	esInt0,x
.38d1	60		rts				rts
.38d2					_ESIValue:
.38d2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.38d4	20 27 15	jsr $1527		jsr	errorHandler
.38d7					LinkEvaluate:
.38d7	aa		tax				tax
.38d8	20 9d 38	jsr $389d			jsr 	Evaluate
.38db	8a		txa				txa
.38dc	60		rts				rts
.38dd					LinkEvaluateTerm:
.38dd	aa		tax				tax
.38de	20 7c 38	jsr $387c			jsr 	EvaluateTerm
.38e1	8a		txa				txa
.38e2	60		rts				rts
.38e3					LinkEvaluateInteger:
.38e3	aa		tax				tax
.38e4	20 bc 38	jsr $38bc			jsr 	EvaluateInteger
.38e7	8a		txa				txa
.38e8	60		rts				rts
.38e9					LinkEvaluateString:
.38e9	aa		tax				tax
.38ea	20 b1 38	jsr $38b1			jsr 	EvaluateString
.38ed	8a		txa				txa
.38ee	60		rts				rts
.38ef					LinkEvaluateSmallInt:
.38ef	aa		tax				tax
.38f0	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger
.38f3	8a		txa				txa
.38f4	60		rts				rts
.38f5					EvaluateReference:
.38f5	ad 6f 38	lda $386f			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.38f8	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.38f9	e9 01		sbc #$01			sbc 	#1
.38fb	20 33 37	jsr $3733			jsr 	EvaluateLevel
.38fe	b5 90		lda $90,x			lda 	esType,x
.3900	10 01		bpl $3903			bpl 	_ERFail
.3902	60		rts				rts
.3903					_ERFail:
.3903	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.3905	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.3908					Event_Str:
.3908	20 a6 38	jsr $38a6			jsr 	EvaluateNumeric 			; get a number.
.390b	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.390d	d0 13		bne $3922			bne 	_ESFloat
.390f	20 62 39	jsr $3962			jsr 	ConvertGetBase 				; get base, or default.
.3912	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3914	85 2a		sta $2a				sta 	temp0
.3916	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3918	85 2b		sta $2b				sta 	1+(temp0)
.391a	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.391c	20 95 3e	jsr $3e95			jsr 	MInt32ToString 				; convert to string.
.391f	4c 2f 39	jmp $392f			jmp 	_ESCloneExit 				; clone and exit.
.3922					_ESFloat:
.3922	20 ae 3f	jsr $3fae			jsr 	CheckRightParen 			; check closing )
.3925	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3928	8a		txa				txa
.3929	a2 16		ldx #$16		ldx	#22
.392b	20 da 27	jsr $27da		jsr	floatingpointHandler
.392e	aa		tax				tax
.392f					_ESCloneExit:
.392f	8a		txa				txa
.3930	a2 04		ldx #$04		ldx	#4
.3932	20 d4 42	jsr $42d4		jsr	stringHandler
.3935	aa		tax				tax
.3936	60		rts				rts
.3937					UnaryVal:
.3937	38		sec				sec 								; Carry set to return value
.3938	b0 01		bcs $393b			bcs 	ValueMain
.393a					UnaryIsVal:
.393a	18		clc				clc									; Carry clear to return legitimacy
.393b					ValueMain:
.393b	08		php				php 								; save results (CS is value, CC is validation)
.393c	20 b1 38	jsr $38b1			jsr 	EvaluateString
.393f	20 62 39	jsr $3962			jsr 	ConvertGetBase 				; get base, if any.
.3942	5a		phy				phy
.3943	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3946	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3948	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.394a	20 b0 3d	jsr $3db0			jsr 	MInt32FromString 			; convert it back from a string.
.394d	b0 0b		bcs $395a			bcs 	_VMSuccess 					; successfully converted.
.394f	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.3951	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3953	f0 00		beq $3955			beq 	_VMFailed 	 				; so we failed.
.3955					_VMFailed:
.3955	7a		ply				ply
.3956	28		plp				plp
.3957	4c 3d 3f	jmp $3f3d			jmp 	MInt32False 				; return 0 whatever.
.395a					_VMSuccess:
.395a	7a		ply				ply
.395b	28		plp				plp 								; if CS the it was val() so we want the value.
.395c	b0 03		bcs $3961			bcs 	_VMExit
.395e	4c 39 3f	jmp $3f39			jmp 	MInt32True 					; otherwise return true as successful.
.3961					_VMExit:
.3961	60		rts				rts
.3962					ConvertGetBase:
.3962	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3964	95 99		sta $99,x			sta 	esInt0+1,x
.3966	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3968	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.396a	d0 0e		bne $397a			bne 	_CGBDone 					; not found, should be )
.396c	e8		inx				inx 								; next level
.396d	c8		iny				iny 								; skip comma.
.396e	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger		; evaluate the base.
.3971	ca		dex				dex
.3972	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3974	90 08		bcc $397e			bcc 	_CGBValue 					; (it should work as high as 37)
.3976	c9 11		cmp #$11			cmp 	#17
.3978	b0 04		bcs $397e			bcs 	_CGBValue
.397a					_CGBDone:
.397a	20 ae 3f	jsr $3fae			jsr 	CheckRightParen
.397d	60		rts				rts
.397e					_CGBValue:
.397e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3980	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.3983					EventFunction:
.3983	20 f5 38	jsr $38f5			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3986	b5 90		lda $90,x			lda 	esType,x
.3988	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.398a	d0 56		bne $39e2			bne 	_EFType
.398c	20 bb 3f	jsr $3fbb			jsr 	CheckComma
.398f	e8		inx				inx
.3990	20 bc 38	jsr $38bc			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.3993	20 ae 3f	jsr $3fae			jsr 	CheckRightParen 			; finish off with the right bracket
.3996	ca		dex				dex
.3997	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3999	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.399b	15 a8		ora $a8,x			ora 	esInt2,x
.399d	15 b0		ora $b0,x			ora 	esInt3,x
.399f	d0 3c		bne $39dd			bne 	_EFValue
.39a1	5a		phy				phy
.39a2	da		phx				phx
.39a3	a2 1c		ldx #$1c		ldx	#28
.39a5	20 05 15	jsr $1505		jsr	deviceHandler
.39a8	84 2d		sty $2d				sty 	temp1+1
.39aa	85 2c		sta $2c				sta 	temp1
.39ac	fa		plx				plx
.39ad	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.39b0	a0 03		ldy #$03			ldy 	#3							; if -ve
.39b2	b1 2a		lda ($2a),y			lda 	(temp0),y
.39b4	30 22		bmi $39d8			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.39b6	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.39b8	b1 2a		lda ($2a),y			lda 	(temp0),y
.39ba	c8		iny				iny
.39bb	11 2a		ora ($2a),y			ora 	(temp0),y
.39bd	f0 16		beq $39d5			beq 	_EFInitialise 				; if so, initialise the value but return false.
.39bf	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.39c1	38		sec				sec
.39c2	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c4	e5 2c		sbc $2c				sbc 	temp1
.39c6	c8		iny				iny
.39c7	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c9	e5 2d		sbc $2d				sbc 	temp1+1
.39cb	10 0b		bpl $39d8			bpl 	_EFFail 					; if trigger >= timer then return False
.39cd	20 e7 39	jsr $39e7			jsr 	SetEventTimer 				; reset the timer for next time.
.39d0	20 39 3f	jsr $3f39			jsr	 	MInt32True 					; and treutn true as fired.
.39d3	7a		ply				ply
.39d4	60		rts				rts
.39d5					_EFInitialise:
.39d5	20 e7 39	jsr $39e7			jsr		SetEventTimer 				; set trigger time to time + elapsed
.39d8					_EFFail:
.39d8	7a		ply				ply
.39d9	20 3d 3f	jsr $3f3d			jsr 	MInt32False
.39dc	60		rts				rts
.39dd					_EFValue:
.39dd	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.39df	20 27 15	jsr $1527		jsr	errorHandler
.39e2					_EFType:
.39e2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.39e4	20 27 15	jsr $1527		jsr	errorHandler
.39e7					SetEventTimer:
.39e7	a0 00		ldy #$00			ldy 	#0
.39e9	18		clc				clc
.39ea	a5 2c		lda $2c				lda 	temp1
.39ec	75 99		adc $99,x			adc 	esInt0+1,x
.39ee	91 2a		sta ($2a),y			sta		(temp0),y
.39f0	c8		iny				iny
.39f1	a5 2d		lda $2d				lda 	temp1+1
.39f3	75 a1		adc $a1,x			adc 	esInt1+1,x
.39f5	91 2a		sta ($2a),y			sta		(temp0),y
.39f7	88		dey				dey
.39f8	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.39fa	d0 04		bne $3a00			bne 	_SETExit 					; zero means initialise.....
.39fc	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.39fe	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.3a00					_SETExit:
.3a00	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.3a01					UnaryLen:
.3a01	20 0f 3a	jsr $3a0f			jsr 	ULStart
.3a04					ULFinish:
.3a04	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3a06	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3a08	20 4c 3f	jsr $3f4c			jsr 	MInt32Set8Bit 				; write it out.
.3a0b	20 ae 3f	jsr $3fae			jsr 	CheckRightParen
.3a0e	60		rts				rts
.3a0f	20 b1 38	jsr $38b1	ULStart:jsr 	EvaluateString
.3a12	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3a14	85 2a		sta $2a				sta 	temp0
.3a16	b5 a0		lda $a0,x			lda 	esInt1,x
.3a18	85 2b		sta $2b				sta 	temp0+1
.3a1a	84 32		sty $32				sty 	tempShort 					; get length
.3a1c	a0 00		ldy #$00			ldy 	#0
.3a1e	60		rts				rts
.3a1f					UnaryAsc:
.3a1f	20 0f 3a	jsr $3a0f			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3a22	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3a24	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3a25	c9 00		cmp #$00			cmp 	#0
.3a27	d0 db		bne $3a04			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3a29	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3a2b	20 27 15	jsr $1527		jsr	errorHandler
.3a2e					UnaryAbs:
.3a2e	20 a6 38	jsr $38a6			jsr 	EvaluateNumeric 			; some numeric value
.3a31	b0 07		bcs $3a3a			bcs 	_UAFloat 					; CS then float, so use that function
.3a33	20 f2 3e	jsr $3ef2			jsr 	MInt32Absolute 				; int version
.3a36	20 ae 3f	jsr $3fae			jsr 	CheckRightParen
.3a39	60		rts				rts
.3a3a					_UAFloat:
.3a3a	8a		txa				txa 								; float version
.3a3b	a2 02		ldx #$02		ldx	#2
.3a3d	20 da 27	jsr $27da		jsr	floatingpointHandler
.3a40	aa		tax				tax
.3a41	20 ae 3f	jsr $3fae			jsr 	CheckRightParen
.3a44	60		rts				rts
.3a45					UnarySgn:
.3a45	20 a6 38	jsr $38a6			jsr 	EvaluateNumeric 			; same as above but sign of value
.3a48	b0 07		bcs $3a51			bcs 	_USFloat
.3a4a	20 2a 3f	jsr $3f2a			jsr 	MInt32Sign
.3a4d	20 ae 3f	jsr $3fae			jsr 	CheckRightParen
.3a50	60		rts				rts
.3a51					_USFloat:
.3a51	8a		txa				txa
.3a52	a2 10		ldx #$10		ldx	#16
.3a54	20 da 27	jsr $27da		jsr	floatingpointHandler
.3a57	aa		tax				tax
.3a58	20 ae 3f	jsr $3fae			jsr 	CheckRightParen
.3a5b	60		rts				rts
.3a5c					UnaryPeek:
.3a5c	20 88 3a	jsr $3a88			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3a5f	4c 7c 3a	jmp $3a7c			jmp 	PDLByte0
.3a62					UnaryDeek:
.3a62	20 88 3a	jsr $3a88			jsr 	PDLCode
.3a65	4c 76 3a	jmp $3a76			jmp 	PDLByte1
.3a68					UnaryLeek:
.3a68	20 88 3a	jsr $3a88			jsr 	PDLCode
.3a6b	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3a6d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a6f	95 b0		sta $b0,x			sta 	esInt3,x
.3a71	88		dey				dey
.3a72	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a74	95 a8		sta $a8,x			sta 	esInt2,x
.3a76					PDLByte1:
.3a76	a0 01		ldy #$01			ldy 	#1
.3a78	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a7a	95 a0		sta $a0,x			sta 	esInt1,x
.3a7c					PDLByte0:
.3a7c	a0 00		ldy #$00			ldy 	#0
.3a7e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a80	95 98		sta $98,x			sta 	esInt0,x
.3a82	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3a84	20 ae 3f	jsr $3fae			jsr 	CheckRightParen 			; check right and return
.3a87	60		rts				rts
.3a88					PDLCode:
.3a88	20 bc 38	jsr $38bc			jsr 	EvaluateInteger 			; some address
.3a8b	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3a8d	85 2a		sta $2a				sta 	temp0
.3a8f	b5 a0		lda $a0,x			lda 	esInt1,x
.3a91	85 2b		sta $2b				sta 	temp0+1
.3a93	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3a95	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3a97	95 a8		sta $a8,x			sta 	esInt2,x
.3a99	95 b0		sta $b0,x			sta 	esInt3,x
.3a9b	84 32		sty $32				sty 	tempShort 					; save Y
.3a9d	60		rts				rts
.3a9e					Unary_Random:
.3a9e	20 6d 3f	jsr $3f6d			jsr 	MInt32Random 				; generate random number.
.3aa1	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3aa3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3aa5	f0 08		beq $3aaf			beq 	_URExit
.3aa7	e8		inx				inx 								; load range 0..r-1 into +1
.3aa8	20 bc 38	jsr $38bc			jsr 	EvaluateInteger
.3aab	ca		dex				dex
.3aac	20 95 3d	jsr $3d95			jsr 	MInt32Modulus 				; calculate random % modulus
.3aaf					_URExit:
.3aaf	20 ae 3f	jsr $3fae			jsr 	CheckRightParen 			; check right and return
.3ab2	60		rts				rts
.3ab3					Unary_Min:
.3ab3	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3ab5	d0 02		bne $3ab9			bne 	UnaryMBody
.3ab7					Unary_Max:
.3ab7	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3ab9					UnaryMBody:
.3ab9	48		pha				pha 								; save comparator on stack, shows min or max
.3aba	20 9d 38	jsr $389d			jsr 	Evaluate 					; get the first thing to check
.3abd					_UnaryMLoop:
.3abd	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3abf	c8		iny				iny
.3ac0	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3ac2	f0 09		beq $3acd			beq 	_UnaryMExit
.3ac4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3ac6	f0 07		beq $3acf			beq 	_UnaryMCompare
.3ac8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3aca	20 27 15	jsr $1527		jsr	errorHandler
.3acd					_UnaryMExit:
.3acd	68		pla				pla 								; done so throw comparator and return.
.3ace	60		rts				rts
.3acf					_UnaryMCompare:
.3acf	e8		inx				inx 								; get the 2nd thing to evaluate
.3ad0	20 9d 38	jsr $389d			jsr 	Evaluate
.3ad3	ca		dex				dex
.3ad4	20 65 36	jsr $3665			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3ad7	85 32		sta $32				sta 	tempShort 					; save result
.3ad9	68		pla				pla 								; get what we need
.3ada	48		pha				pha
.3adb	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3add	d0 de		bne $3abd			bne 	_UnaryMLoop 				; no, try another value.
.3adf	20 3d 3f	jsr $3f3d			jsr 	MInt32False 				; promote 2nd to 1st.
.3ae2	20 23 3e	jsr $3e23			jsr 	MInt32Add
.3ae5	4c bd 3a	jmp $3abd			jmp 	_UnaryMLoop
.3ae8					Unary_Page:
.3ae8	20 3d 3f	jsr $3f3d			jsr 	MInt32False 				; zero
.3aeb	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3aee	95 98		sta $98,x			sta 	esInt0,x
.3af0	ad c9 0a	lda $0ac9			lda 	basePage+1
.3af3	95 a0		sta $a0,x			sta 	esInt1,x
.3af5	60		rts				rts
.3af6					UnaryReference:
.3af6	a9 0f		lda #$0f			lda 	#15
.3af8	20 33 37	jsr $3733			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3afb	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.3afd	10 05		bpl $3b04			bpl 	UType
.3aff	a9 00		lda #$00			lda 	#0 							; make it an integer
.3b01	95 90		sta $90,x			sta 	esType,x
.3b03	60		rts				rts
.3b04					UType:
.3b04	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3b06	20 27 15	jsr $1527		jsr	errorHandler
.3b09					UnaryHexMarker:
.3b09	4c 8e 38	jmp $388e			jmp 	EvaluateIntegerTerm
.3b0c					UnaryComplement:
.3b0c	20 8e 38	jsr $388e			jsr 	EvaluateIntegerTerm
.3b0f	20 11 3f	jsr $3f11			jsr 	MInt32Not
.3b12	60		rts				rts
.3b13					UnaryIntToFloat:
.3b13	20 a6 38	jsr $38a6			jsr 	EvaluateNumeric				; some number
.3b16	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3b18	d0 0b		bne $3b25			bne 	_UIFExit
.3b1a	8a		txa				txa 								; convert and set type
.3b1b	a2 1c		ldx #$1c		ldx	#28
.3b1d	20 da 27	jsr $27da		jsr	floatingpointHandler
.3b20	aa		tax				tax
.3b21	a9 01		lda #$01			lda 	#1
.3b23	95 90		sta $90,x			sta 	esType,x
.3b25					_UIFExit:
.3b25	60		rts				rts
.3b26					UnaryFloatToInt:
.3b26	20 a6 38	jsr $38a6			jsr 	EvaluateNumeric 			; the number
.3b29	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3b2b	f0 0b		beq $3b38			beq 	_UFIExit
.3b2d	8a		txa				txa 								; convert to int
.3b2e	a2 14		ldx #$14		ldx	#20
.3b30	20 da 27	jsr $27da		jsr	floatingpointHandler
.3b33	aa		tax				tax
.3b34	a9 00		lda #$00			lda 	#0 							; set type
.3b36	95 90		sta $90,x			sta 	esType,x
.3b38					_UFIExit:
.3b38	60		rts				rts
.3b39					UnaryAlloc:
.3b39	e8		inx				inx 								; evaluate memory required
.3b3a	20 bc 38	jsr $38bc			jsr 	EvaluateInteger
.3b3d	20 ae 3f	jsr $3fae			jsr 	CheckRightParen
.3b40	ca		dex				dex
.3b41	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3b43	15 b1		ora $b1,x			ora 	esInt3+1,x
.3b45	d0 1d		bne $3b64			bne 	_UABadValue
.3b47	20 3d 3f	jsr $3f3d			jsr 	MInt32False					; zero return.
.3b4a	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3b4c	95 a0		sta $a0,x			sta 	esInt1,x
.3b4e	a5 35		lda $35				lda 	lowMemory
.3b50	95 98		sta $98,x			sta 	esInt0,x
.3b52	18		clc				clc 								; add alloc required.
.3b53	75 99		adc $99,x			adc 	esInt0+1,x
.3b55	85 35		sta $35				sta 	lowMemory
.3b57	a5 36		lda $36				lda 	lowMemory+1
.3b59	75 a1		adc $a1,x			adc 	esInt1+1,x
.3b5b	85 36		sta $36				sta 	lowMemory+1
.3b5d	b0 05		bcs $3b64			bcs		_UABadValue 				; overflow definitely bad.
.3b5f	c5 34		cmp $34				cmp 	highMemory+1
.3b61	b0 01		bcs $3b64			bcs 	_UABadValue 				; out of memory bad.
.3b63	60		rts				rts
.3b64					_UABadValue:
.3b64	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3b66	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3b69					UnaryTimer:
.3b69	20 ae 3f	jsr $3fae			jsr 	CheckRightParen 			; no parameters
.3b6c	5a		phy				phy
.3b6d	20 64 3f	jsr $3f64			jsr 	MInt32Zero 					; zero result
.3b70	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3b72	a2 1c		ldx #$1c		ldx	#28
.3b74	20 05 15	jsr $1505		jsr	deviceHandler
.3b77	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3b79	95 98		sta $98,x			sta 	esInt0,x
.3b7b	98		tya				tya
.3b7c	95 a0		sta $a0,x			sta 	esInt1,x
.3b7e	7a		ply				ply
.3b7f	60		rts				rts
.3b80					UnaryInkey:
.3b80	20 ae 3f	jsr $3fae			jsr 	CheckRightParen
.3b83	86 2a		stx $2a				stx 	temp0
.3b85	a2 08		ldx #$08		ldx	#8
.3b87	20 05 15	jsr $1505		jsr	deviceHandler
.3b8a	a6 2a		ldx $2a				ldx 	temp0
.3b8c	20 4c 3f	jsr $3f4c			jsr 	MInt32Set8Bit
.3b8f	60		rts				rts
.3b90					UnaryGet:
.3b90	20 ae 3f	jsr $3fae			jsr 	CheckRightParen
.3b93	da		phx				phx
.3b94					_UGLoop:
.3b94	a2 18		ldx #$18		ldx	#24
.3b96	20 05 15	jsr $1505		jsr	deviceHandler
.3b99	a2 08		ldx #$08		ldx	#8
.3b9b	20 05 15	jsr $1505		jsr	deviceHandler
.3b9e	c9 00		cmp #$00			cmp 	#0
.3ba0	f0 f2		beq $3b94			beq 	_UGLoop
.3ba2	85 32		sta $32				sta 	tempShort
.3ba4	fa		plx				plx
.3ba5	a5 32		lda $32				lda 	tempShort
.3ba7	20 4c 3f	jsr $3f4c			jsr 	MInt32Set8Bit
.3baa	60		rts				rts
.3bab					UnaryGetString:
.3bab	20 90 3b	jsr $3b90			jsr 	UnaryGet
.3bae					UGSDoChr:
.3bae	4c fb 3b	jmp $3bfb			jmp 	ChrCode
.3bb1					UnaryInkeyString:
.3bb1	20 80 3b	jsr $3b80			jsr 	UnaryInkey
.3bb4	b5 98		lda $98,x			lda 	esInt0,x
.3bb6	d0 f6		bne $3bae			bne 	UGSDoChr
.3bb8	8a		txa				txa
.3bb9	a2 08		ldx #$08		ldx	#8
.3bbb	20 d4 42	jsr $42d4		jsr	stringHandler
.3bbe	aa		tax				tax
.3bbf	60		rts				rts
.3bc0					UnarySys:
.3bc0	20 bc 38	jsr $38bc			jsr 	EvaluateInteger 				; get the address
.3bc3	20 ae 3f	jsr $3fae			jsr 	CheckRightParen
.3bc6	20 be 2c	jsr $2cbe			jsr 	TOSToTemp0 						; copy call address to temp0
.3bc9	da		phx				phx
.3bca	5a		phy				phy
.3bcb	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3bce	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3bd1	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3bd4	20 e1 3b	jsr $3be1			jsr 	_CallTemp0
.3bd7	85 32		sta $32				sta 	tempShort 						; restore YX
.3bd9	7a		ply				ply
.3bda	fa		plx				plx
.3bdb	a5 32		lda $32				lda 	tempShort
.3bdd	20 4c 3f	jsr $3f4c			jsr 	MInt32Set8Bit 					; return result.
.3be0	60		rts				rts
.3be1					_CallTemp0:
.3be1	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3be4					UnaryMem:
.3be4	20 3d 3f	jsr $3f3d			jsr 	MInt32False 					; set to false (e.g. 0)
.3be7	38		sec				sec
.3be8	a5 33		lda $33				lda 	highMemory 						; calculate value
.3bea	e5 35		sbc $35				sbc 	lowMemory
.3bec	95 98		sta $98,x			sta 	esInt0,x
.3bee	a5 34		lda $34				lda 	highMemory+1
.3bf0	e5 36		sbc $36				sbc 	lowMemory+1
.3bf2	95 a0		sta $a0,x			sta 	esInt1,x
.3bf4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3bf5					ExecChr:
.3bf5	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger		; character number 0-255
.3bf8	20 ae 3f	jsr $3fae			jsr 	CheckRightParen				; right bracket
.3bfb					ChrCode:
.3bfb	5a		phy				phy
.3bfc	8a		txa				txa 								; A = stack
.3bfd	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3bff	a2 02		ldx #$02		ldx	#2
.3c01	20 d4 42	jsr $42d4		jsr	stringHandler
.3c04	aa		tax				tax 								; X = stack
.3c05	7a		ply				ply
.3c06	60		rts				rts
.3c07					ExecLower:
.3c07	38		sec				sec 								; set carry is lower
.3c08	b0 01		bcs $3c0b			bcs 	ExecUpperLower
.3c0a					ExecUpper:
.3c0a	18		clc				clc 								; clear carry is upper
.3c0b					ExecUpperLower:
.3c0b	08		php				php 								; save carry
.3c0c	20 b1 38	jsr $38b1			jsr 	EvaluateString 				; string to stack,X
.3c0f	20 ae 3f	jsr $3fae			jsr 	CheckRightParen 			; check closing right bracket.
.3c12	28		plp				plp 								; restore carry, save Y
.3c13	5a		phy				phy
.3c14	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3c16	2a		rol a				rol 	a
.3c17	a8		tay				tay 								; now in Y
.3c18	8a		txa				txa 								; do the substring and exit.
.3c19	a2 0c		ldx #$0c		ldx	#12
.3c1b	20 d4 42	jsr $42d4		jsr	stringHandler
.3c1e	aa		tax				tax
.3c1f	7a		ply				ply
.3c20	60		rts				rts
.3c21					ExecLeft:
.3c21	20 b1 38	jsr $38b1			jsr 	EvaluateString 				; string to stack,X
.3c24	20 bb 3f	jsr $3fbb			jsr 	CheckComma
.3c27	e8		inx				inx
.3c28	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3c2a	20 4c 3f	jsr $3f4c			jsr 	MInt32Set8Bit
.3c2d	e8		inx				inx
.3c2e	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3c31					ExecSubstring:
.3c31	ca		dex				dex 								; fix up X
.3c32	ca		dex				dex
.3c33	20 ae 3f	jsr $3fae			jsr 	CheckRightParen 			; check closing right bracket.
.3c36	8a		txa				txa 								; do the substring and exit.
.3c37	a2 0e		ldx #$0e		ldx	#14
.3c39	20 d4 42	jsr $42d4		jsr	stringHandler
.3c3c	aa		tax				tax
.3c3d	60		rts				rts
.3c3e					ExecMid:
.3c3e	20 b1 38	jsr $38b1			jsr 	EvaluateString 				; string to stack,X
.3c41	20 bb 3f	jsr $3fbb			jsr 	CheckComma
.3c44	e8		inx				inx
.3c45	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3c48	c9 00		cmp #$00			cmp 	#0
.3c4a	f0 15		beq $3c61			beq 	_EMValue
.3c4c	e8		inx				inx
.3c4d	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3c4f	20 4c 3f	jsr $3f4c			jsr 	MInt32Set8Bit
.3c52	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3c54	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3c56	f0 d9		beq $3c31			beq 	ExecSubString
.3c58	20 bb 3f	jsr $3fbb			jsr 	CheckComma
.3c5b	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3c5e	4c 31 3c	jmp $3c31			jmp 	ExecSubString
.3c61					_EMValue:
.3c61	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3c63	20 27 15	jsr $1527		jsr	errorHandler
.3c66					ExecRight:
.3c66	20 b1 38	jsr $38b1			jsr 	EvaluateString 				; string to stack,X
.3c69	20 bb 3f	jsr $3fbb			jsr 	CheckComma
.3c6c	e8		inx				inx
.3c6d	20 c4 38	jsr $38c4			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3c70	ca		dex				dex
.3c71	5a		phy				phy
.3c72	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3c74	85 2a		sta $2a				sta 	temp0
.3c76	b5 a0		lda $a0,x			lda 	esInt1,x
.3c78	85 2b		sta $2b				sta 	temp0+1
.3c7a	a0 00		ldy #$00			ldy 	#0 							; point to length
.3c7c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3c7e	18		clc				clc 								; add 1.
.3c7f	69 01		adc #$01			adc 	#1
.3c81	38		sec				sec
.3c82	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3c84	f0 02		beq $3c88			beq		_ERMake1 					; if zero, make it 1.
.3c86	b0 02		bcs $3c8a			bcs		_EROkay
.3c88					_ERMake1:
.3c88	a9 01		lda #$01			lda 	#1 							; start position.
.3c8a					_EROkay:
.3c8a	e8		inx				inx 								; set start pos.
.3c8b	95 98		sta $98,x			sta 	esInt0,x
.3c8d	e8		inx				inx
.3c8e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3c90	20 4c 3f	jsr $3f4c			jsr 	MInt32Set8Bit
.3c93	7a		ply				ply
.3c94	4c 31 3c	jmp $3c31			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3c97					MInt32And:
.3c97	b5 98		lda $98,x			lda 	esInt0,x
.3c99	35 99		and $99,x			and 	esInt0+1,x
.3c9b	95 98		sta $98,x			sta 	esInt0,x
.3c9d	b5 a0		lda $a0,x			lda 	esInt1,x
.3c9f	35 a1		and $a1,x			and 	esInt1+1,x
.3ca1	95 a0		sta $a0,x			sta 	esInt1,x
.3ca3	b5 a8		lda $a8,x			lda 	esInt2,x
.3ca5	35 a9		and $a9,x			and 	esInt2+1,x
.3ca7	95 a8		sta $a8,x			sta 	esInt2,x
.3ca9	b5 b0		lda $b0,x			lda 	esInt3,x
.3cab	35 b1		and $b1,x			and 	esInt3+1,x
.3cad	95 b0		sta $b0,x			sta 	esInt3,x
.3caf	60		rts				rts
.3cb0					MInt32Or:
.3cb0	b5 98		lda $98,x			lda 	esInt0,x
.3cb2	15 99		ora $99,x			ora 	esInt0+1,x
.3cb4	95 98		sta $98,x			sta 	esInt0,x
.3cb6	b5 a0		lda $a0,x			lda 	esInt1,x
.3cb8	15 a1		ora $a1,x			ora 	esInt1+1,x
.3cba	95 a0		sta $a0,x			sta 	esInt1,x
.3cbc	b5 a8		lda $a8,x			lda 	esInt2,x
.3cbe	15 a9		ora $a9,x			ora 	esInt2+1,x
.3cc0	95 a8		sta $a8,x			sta 	esInt2,x
.3cc2	b5 b0		lda $b0,x			lda 	esInt3,x
.3cc4	15 b1		ora $b1,x			ora 	esInt3+1,x
.3cc6	95 b0		sta $b0,x			sta 	esInt3,x
.3cc8	60		rts				rts
.3cc9					MInt32Xor:
.3cc9	b5 98		lda $98,x			lda 	esInt0,x
.3ccb	55 99		eor $99,x			eor 	esInt0+1,x
.3ccd	95 98		sta $98,x			sta 	esInt0,x
.3ccf	b5 a0		lda $a0,x			lda 	esInt1,x
.3cd1	55 a1		eor $a1,x			eor 	esInt1+1,x
.3cd3	95 a0		sta $a0,x			sta 	esInt1,x
.3cd5	b5 a8		lda $a8,x			lda 	esInt2,x
.3cd7	55 a9		eor $a9,x			eor 	esInt2+1,x
.3cd9	95 a8		sta $a8,x			sta 	esInt2,x
.3cdb	b5 b0		lda $b0,x			lda 	esInt3,x
.3cdd	55 b1		eor $b1,x			eor 	esInt3+1,x
.3cdf	95 b0		sta $b0,x			sta 	esInt3,x
.3ce1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3ce2					MInt32Compare:
.3ce2	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3ce4	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3ce6	d0 13		bne $3cfb			bne 	MInt32Compare2
.3ce8	b5 a0		lda $a0,x			lda 	esInt1,x
.3cea	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3cec	d0 0d		bne $3cfb			bne 	MInt32Compare2
.3cee	b5 a8		lda $a8,x			lda 	esInt2,x
.3cf0	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3cf2	d0 07		bne $3cfb			bne 	MInt32Compare2
.3cf4	b5 b0		lda $b0,x			lda 	esInt3,x
.3cf6	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3cf8	d0 01		bne $3cfb			bne 	MInt32Compare2
.3cfa	60		rts				rts
.3cfb					MInt32Compare2:
.3cfb	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3cfd	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3cff	b5 a0		lda $a0,x			lda		esInt1,x
.3d01	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3d03	b5 a8		lda $a8,x			lda		esInt2,x
.3d05	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d07	b5 b0		lda $b0,x			lda		esInt3,x
.3d09	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d0b	50 02		bvc $3d0f			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3d0d	49 80		eor #$80			eor 	#$80
.3d0f					_I32LNoOverflow
.3d0f	30 03		bmi $3d14			bmi 	MInt32CLess					; if -ve then return $FF
.3d11	a9 01		lda #$01			lda 	#$01						; else return $01
.3d13	60		rts				rts
.3d14					MInt32CLess:
.3d14	a9 ff		lda #$ff			lda 	#$FF
.3d16	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3d17					MInt32SDivide:
.3d17	98		tya				tya  								; save Y, which is the count of negations
.3d18	48		pha				pha
.3d19	a0 00		ldy #$00			ldy 	#0 							; zero count
.3d1b	20 33 3d	jsr $3d33			jsr 	_MInt32SRemSign 			; unsign TOS
.3d1e	e8		inx				inx 								; unsign TOS+1
.3d1f	20 33 3d	jsr $3d33			jsr 	_MInt32SRemSign
.3d22	ca		dex				dex
.3d23	98		tya				tya 								; save sign count on stack
.3d24	48		pha				pha
.3d25	20 3c 3d	jsr $3d3c			jsr 	MInt32UDivide 				; unsigned division
.3d28	68		pla				pla 								; get sign count back
.3d29	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3d2b	f0 03		beq $3d30			beq 	_I32SNoNeg
.3d2d	20 f7 3e	jsr $3ef7			jsr 	MInt32Negate
.3d30					_I32SNoNeg:
.3d30	68		pla				pla 								; restoe Y and exit
.3d31	a8		tay				tay
.3d32	60		rts				rts
.3d33					_MInt32SRemSign:
.3d33	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3d35	10 04		bpl $3d3b			bpl 	_MInt32SRSExit
.3d37	c8		iny				iny 								; increment the sign count
.3d38	20 f7 3e	jsr $3ef7			jsr 	MInt32Negate 				; negate the value.
.3d3b					_MInt32SRSExit:
.3d3b	60		rts				rts
.3d3c					MInt32UDivide:
.3d3c	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3d3e	15 a1		ora $a1,x			ora 	esInt1+1,x
.3d40	15 a2		ora $a2,x			ora 	esInt1+2,x
.3d42	15 a3		ora $a3,x			ora 	esInt1+3,x
.3d44	f0 4a		beq $3d90			beq 	_MInt32DZero
.3d46	e8		inx				inx 								; clear A
.3d47	e8		inx				inx
.3d48	20 3d 3f	jsr $3f3d			jsr 	MInt32False
.3d4b	ca		dex				dex
.3d4c	ca		dex				dex
.3d4d	98		tya				tya 								; save Y on the stack
.3d4e	48		pha				pha
.3d4f	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3d51					_MInt32UDLoop:
.3d51	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3d53	36 a0		rol $a0,x			rol 	esInt1,x
.3d55	36 a8		rol $a8,x			rol 	esInt2,x
.3d57	36 b0		rol $b0,x			rol 	esInt3,x
.3d59	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3d5b	36 a2		rol $a2,x			rol 	esInt1+2,x
.3d5d	36 aa		rol $aa,x			rol 	esInt2+2,x
.3d5f	36 b2		rol $b2,x			rol 	esInt3+2,x
.3d61	38		sec				sec 								; calculate A-M saving result on the stack
.3d62	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3d64	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3d66	48		pha				pha
.3d67	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3d69	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3d6b	48		pha				pha
.3d6c	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3d6e	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d70	48		pha				pha
.3d71	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3d73	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d75	90 10		bcc $3d87			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3d77	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3d79	68		pla				pla
.3d7a	95 aa		sta $aa,x			sta 	esInt2+2,x
.3d7c	68		pla				pla
.3d7d	95 a2		sta $a2,x			sta 	esInt1+2,x
.3d7f	68		pla				pla
.3d80	95 9a		sta $9a,x			sta 	esInt0+2,x
.3d82	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3d84	4c 8a 3d	jmp $3d8a			jmp 	_MInt32Next 					; do the next iteration
.3d87					_MInt32NoSubtract:
.3d87	68		pla				pla
.3d88	68		pla				pla
.3d89	68		pla				pla
.3d8a					_MInt32Next:
.3d8a	88		dey				dey 								; do this 32 times.
.3d8b	d0 c4		bne $3d51			bne 	_MInt32UDLoop
.3d8d	68		pla				pla 								; restore Y and exit
.3d8e	a8		tay				tay
.3d8f	60		rts				rts
.3d90					_MInt32DZero:
.3d90	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3d92	20 27 15	jsr $1527		jsr	errorHandler
.3d95					MInt32Modulus:
.3d95	20 3c 3d	jsr $3d3c			jsr 	MInt32UDivide 				; do the division.
.3d98	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3d9a	95 b0		sta $b0,x			sta 	esInt3,x
.3d9c	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3d9e	95 a8		sta $a8,x			sta 	esInt2,x
.3da0	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3da2	95 a0		sta $a0,x			sta 	esInt1,x
.3da4	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3da6	95 98		sta $98,x			sta 	esInt0,x
.3da8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0dca					fs32Length:
>0dca							.fill 	1
.3da9					LinkInt32FromString:
.3da9	aa		tax				tax
.3daa	98		tya				tya
.3dab	20 b0 3d	jsr $3db0			jsr 	MInt32FromString
.3dae	8a		txa				txa
.3daf	60		rts				rts
.3db0					MInt32FromString:
.3db0	85 32		sta $32				sta 	tempShort 					; save base
.3db2	5a		phy				phy
.3db3	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3db5	b1 2a		lda ($2a),y			lda 	(temp0),y
.3db7	8d ca 0d	sta $0dca			sta 	fs32Length
.3dba	f0 64		beq $3e20			beq 	_I32FSFail2					; fail if length zero.
.3dbc	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3dbe	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3dc0	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3dc2	d0 09		bne $3dcd			bne 	_I32FSNotNegative
.3dc4	ad ca 0d	lda $0dca			lda 	fs32Length 					; get length back.
.3dc7	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3dc9	f0 55		beq $3e20			beq 	_I32FSFail2
.3dcb	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3dcd					_I32FSNotNegative:
.3dcd	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3dcf	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3dd1	d0 02		bne $3dd5			bne 	_I32FSNN2
.3dd3	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3dd5					_I32FSNN2:
.3dd5	48		pha				pha 								; save base + final sign on stack.
.3dd6	20 3d 3f	jsr $3f3d			jsr 	MInt32False 				; zero the return value.
.3dd9					_I32FSMainLoop:
.3dd9	68		pla				pla 								; get the base back into tempShort
.3dda	48		pha				pha
.3ddb	29 7f		and #$7f			and 	#$7F
.3ddd	85 32		sta $32				sta 	tempShort
.3ddf	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3de1	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3de3	90 02		bcc $3de7			bcc 	_I32FSNotLC
.3de5	e9 20		sbc #$20			sbc 	#32
.3de7					_I32FSNotLC:
.3de7	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3de8	e9 30		sbc #$30			sbc 	#"0"
.3dea	90 33		bcc $3e1f			bcc 	_I32FSFail 					; nothing more to do.
.3dec	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3dee	90 06		bcc $3df6			bcc 	_I32FSValidate
.3df0	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3df2	90 2b		bcc $3e1f			bcc 	_I32FSFail
.3df4	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3df6					_I32FSValidate:
.3df6	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3df8	b0 25		bcs $3e1f			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3dfa	48		pha				pha 								; save the new digit value.
.3dfb	e8		inx				inx 								; put base into next slot up on stack
.3dfc	a5 32		lda $32				lda 	tempShort
.3dfe	20 4c 3f	jsr $3f4c			jsr 	MInt32Set8Bit
.3e01	ca		dex				dex
.3e02	20 57 3e	jsr $3e57			jsr 	MInt32Multiply 				; multiply current by the base
.3e05	e8		inx				inx
.3e06	68		pla				pla  								; put additive into next slot
.3e07	20 4c 3f	jsr $3f4c			jsr 	MInt32Set8Bit
.3e0a	ca		dex				dex
.3e0b	20 23 3e	jsr $3e23			jsr 	MInt32Add 					; and add it
.3e0e	c8		iny				iny 								; bump the character pointer
.3e0f	cc ca 0d	cpy $0dca			cpy 	fs32Length 					; until > length.
.3e12	f0 c5		beq $3dd9			beq 	_I32FSMainLoop
.3e14	90 c3		bcc $3dd9			bcc 	_I32FSMainLoop
.3e16					_I32FSDone:
.3e16	68		pla				pla 								; get base/final sign back
.3e17	10 03		bpl $3e1c			bpl 	_I32FSNN3
.3e19	20 f7 3e	jsr $3ef7			jsr 	MInt32Negate 				; negate the result.
.3e1c					_I32FSNN3:
.3e1c	7a		ply				ply
.3e1d	38		sec				sec
.3e1e	60		rts				rts
.3e1f					_I32FSFail:
.3e1f	68		pla				pla
.3e20					_I32FSFail2:
.3e20	7a		ply				ply
.3e21	18		clc				clc
.3e22	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3e23					MInt32Add:
.3e23	18		clc				clc
.3e24	b5 98		lda $98,x			lda 	esInt0,x
.3e26	75 99		adc $99,x			adc 	esInt0+1,x
.3e28	95 98		sta $98,x			sta 	esInt0,x
.3e2a	b5 a0		lda $a0,x			lda 	esInt1,x
.3e2c	75 a1		adc $a1,x			adc 	esInt1+1,x
.3e2e	95 a0		sta $a0,x			sta 	esInt1,x
.3e30	b5 a8		lda $a8,x			lda 	esInt2,x
.3e32	75 a9		adc $a9,x			adc 	esInt2+1,x
.3e34	95 a8		sta $a8,x			sta 	esInt2,x
.3e36	b5 b0		lda $b0,x			lda 	esInt3,x
.3e38	75 b1		adc $b1,x			adc 	esInt3+1,x
.3e3a	95 b0		sta $b0,x			sta 	esInt3,x
.3e3c	60		rts				rts
.3e3d					MInt32Sub:
.3e3d	38		sec				sec
.3e3e	b5 98		lda $98,x			lda 	esInt0,x
.3e40	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3e42	95 98		sta $98,x			sta 	esInt0,x
.3e44	b5 a0		lda $a0,x			lda 	esInt1,x
.3e46	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3e48	95 a0		sta $a0,x			sta 	esInt1,x
.3e4a	b5 a8		lda $a8,x			lda 	esInt2,x
.3e4c	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3e4e	95 a8		sta $a8,x			sta 	esInt2,x
.3e50	b5 b0		lda $b0,x			lda 	esInt3,x
.3e52	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3e54	95 b0		sta $b0,x			sta 	esInt3,x
.3e56	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3e57					MInt32Multiply:
.3e57	e8		inx				inx 								; copy 2nd -> 3rd
.3e58	20 7d 3e	jsr $3e7d			jsr 	MInt32CopyUp
.3e5b	ca		dex				dex
.3e5c	20 7d 3e	jsr $3e7d			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3e5f	20 3d 3f	jsr $3f3d			jsr 	MInt32False 				; zero 1st.
.3e62					_I32Loop:
.3e62	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3e64	29 01		and #$01			and 	#1
.3e66	f0 03		beq $3e6b			beq 	_I32NoAdd 					; if set
.3e68	20 23 3e	jsr $3e23			jsr 	MInt32Add 					; add 2nd to 1st.
.3e6b					_I32NoAdd:
.3e6b	e8		inx				inx 								; shift 2nd left
.3e6c	20 52 3f	jsr $3f52			jsr 	MInt32ShiftLeft
.3e6f	e8		inx				inx  								; shift 3rd right
.3e70	20 5b 3f	jsr $3f5b			jsr 	MInt32ShiftRight
.3e73	20 64 3f	jsr $3f64			jsr 	MInt32Zero 					; check if zero.
.3e76	08		php				php 								; save status bits
.3e77	ca		dex				dex 	 							; point back to 1st
.3e78	ca		dex				dex
.3e79	28		plp				plp 								; get status bits
.3e7a	d0 e6		bne $3e62			bne 	_I32Loop 					; if non-zero keep going.
.3e7c	60		rts				rts
.3e7d					MInt32CopyUp:
.3e7d	b5 98		lda $98,x			lda 	esInt0,x
.3e7f	95 99		sta $99,x			sta 	esInt0+1,x
.3e81	b5 a0		lda $a0,x			lda 	esInt1,x
.3e83	95 a1		sta $a1,x			sta 	esInt1+1,x
.3e85	b5 a8		lda $a8,x			lda 	esInt2,x
.3e87	95 a9		sta $a9,x			sta 	esInt2+1,x
.3e89	b5 b0		lda $b0,x			lda 	esInt3,x
.3e8b	95 b1		sta $b1,x			sta 	esInt3+1,x
.3e8d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0dcb					MCharCount:	.fill 	1						; count of converted characters
.3e8e					MLInt32ToString:
.3e8e	aa		tax				tax									; module passes stack in A, base in Y
.3e8f	98		tya				tya
.3e90	20 95 3e	jsr $3e95			jsr 	MInt32ToString
.3e93	8a		txa				txa
.3e94	60		rts				rts
.3e95					MInt32ToString:
.3e95	48		pha				pha 								; save base
.3e96	85 32		sta $32				sta 	tempShort 					; save target base.
.3e98	a9 00		lda #$00			lda 	#0
.3e9a	8d cb 0d	sta $0dcb			sta 	MCharCount 					; clear character count to 0
.3e9d	5a		phy				phy
.3e9e	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3ea0	10 10		bpl $3eb2			bpl 	_I32TSUnsigned
.3ea2	48		pha				pha 								; save base on stack.
.3ea3	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3ea5	10 08		bpl $3eaf			bpl 	_I32TSNoFlip
.3ea7	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3ea9	20 e4 3e	jsr $3ee4			jsr 	MI32WriteCharacter
.3eac	20 f7 3e	jsr $3ef7			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3eaf					_I32TSNoFlip:
.3eaf	68		pla				pla 								; get the base back
.3eb0	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3eb2					_I32TSUnsigned:
.3eb2	20 bf 3e	jsr $3ebf			jsr 	MI32DivideWrite 			; recursive code to output string.
.3eb5	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3eb7	ad cb 0d	lda $0dcb			lda 	MCharCount
.3eba	91 2a		sta ($2a),y			sta 	(temp0),y
.3ebc	7a		ply				ply
.3ebd	68		pla				pla
.3ebe	60		rts				rts
.3ebf					MI32DivideWrite:
.3ebf	48		pha				pha 								; save the divisor/base
.3ec0	e8		inx				inx 								; write in the dividing position.
.3ec1	20 4c 3f	jsr $3f4c			jsr 	MInt32Set8Bit
.3ec4	ca		dex				dex
.3ec5	20 3c 3d	jsr $3d3c			jsr 	MInt32UDivide 				; divide number by base.
.3ec8	68		pla				pla 								; get the base into Y
.3ec9	a8		tay				tay
.3eca	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3ecc	48		pha				pha
.3ecd	20 64 3f	jsr $3f64			jsr 	MInt32Zero 					; is the result zero ?
.3ed0	f0 04		beq $3ed6			beq 	_I32NoRecurse 				; if so, don't recurse.
.3ed2	98		tya				tya 								; put base into A
.3ed3	20 bf 3e	jsr $3ebf			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3ed6					_I32NoRecurse:
.3ed6	68		pla				pla 								; get the remainder back
.3ed7	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3ed9	90 02		bcc $3edd			bcc 	_I32NotHex
.3edb	69 06		adc #$06			adc 	#7-1
.3edd					_I32NotHex:
.3edd	18		clc				clc 								; make it ASCII
.3ede	69 30		adc #$30			adc 	#48
.3ee0	20 e4 3e	jsr $3ee4			jsr 	MI32WriteCharacter 			; write the character out
.3ee3	60		rts				rts 								; and exit.
.3ee4					MI32WriteCharacter:
.3ee4	ee cb 0d	inc $0dcb			inc 	MCharCount 					; bump count (space for leading count)
.3ee7	ac cb 0d	ldy $0dcb			ldy 	MCharCount 					; get position
.3eea	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3eec	c8		iny				iny
.3eed	a9 00		lda #$00			lda 	#0
.3eef	91 2a		sta ($2a),y			sta 	(temp0),y
.3ef1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0dcc					MSeed32:	.fill 	4							; random number seed.
.3ef2					MInt32Absolute:
.3ef2	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3ef4	30 01		bmi $3ef7			bmi 	MInt32Negate
.3ef6	60		rts				rts
.3ef7					MInt32Negate:
.3ef7	38		sec				sec 								; subtract from zero.
.3ef8	a9 00		lda #$00			lda 	#0
.3efa	f5 98		sbc $98,x			sbc 	esInt0,x
.3efc	95 98		sta $98,x			sta 	esInt0,x
.3efe	a9 00		lda #$00			lda 	#0
.3f00	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3f02	95 a0		sta $a0,x			sta 	esInt1,x
.3f04	a9 00		lda #$00			lda 	#0
.3f06	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3f08	95 a8		sta $a8,x			sta 	esInt2,x
.3f0a	a9 00		lda #$00			lda 	#0
.3f0c	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3f0e	95 b0		sta $b0,x			sta 	esInt3,x
.3f10	60		rts				rts
.3f11					MInt32Not:
.3f11	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3f13	49 ff		eor #$ff			eor 	#$FF
.3f15	95 98		sta $98,x			sta 	esInt0,x
.3f17	b5 a0		lda $a0,x			lda 	esInt1,x
.3f19	49 ff		eor #$ff			eor 	#$FF
.3f1b	95 a0		sta $a0,x			sta 	esInt1,x
.3f1d	b5 a8		lda $a8,x			lda 	esInt2,x
.3f1f	49 ff		eor #$ff			eor 	#$FF
.3f21	95 a8		sta $a8,x			sta 	esInt2,x
.3f23	b5 b0		lda $b0,x			lda 	esInt3,x
.3f25	49 ff		eor #$ff			eor 	#$FF
.3f27	95 b0		sta $b0,x			sta 	esInt3,x
.3f29	60		rts				rts
.3f2a					MInt32Sign:
.3f2a	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3f2c	30 0b		bmi $3f39			bmi 	MInt32True 					; if set return -1 (true)
.3f2e	20 64 3f	jsr $3f64			jsr 	MInt32Zero 					; is it zero ?
.3f31	f0 0a		beq $3f3d			beq 	MInt32False 				; if zero return 0 (false)
.3f33	20 3d 3f	jsr $3f3d			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3f36	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3f38	60		rts				rts
.3f39					MInt32True:
.3f39	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3f3b	d0 02		bne $3f3f			bne 	MInt32WriteAll
.3f3d					MInt32False:
.3f3d	a9 00		lda #$00			lda 	#0
.3f3f					MInt32WriteAll:
.3f3f	95 98		sta $98,x			sta 	esInt0,x
.3f41					MInt32Write123:
.3f41	95 a0		sta $a0,x			sta 	esInt1,x
.3f43	95 a8		sta $a8,x			sta 	esInt2,x
.3f45	95 b0		sta $b0,x			sta 	esInt3,x
.3f47	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3f49	95 90		sta $90,x			sta 	esType,x
.3f4b	60		rts				rts
.3f4c					MInt32Set8Bit:
.3f4c	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3f4e	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3f50	f0 ef		beq $3f41			beq		MInt32Write123
.3f52					MInt32ShiftLeft:
.3f52	16 98		asl $98,x			asl 	esInt0,x
.3f54	36 a0		rol $a0,x			rol	 	esInt1,x
.3f56	36 a8		rol $a8,x			rol	 	esInt2,x
.3f58	36 b0		rol $b0,x			rol	 	esInt3,x
.3f5a	60		rts				rts
.3f5b					MInt32ShiftRight:
.3f5b	56 b0		lsr $b0,x			lsr 	esInt3,x
.3f5d	76 a8		ror $a8,x			ror 	esInt2,x
.3f5f	76 a0		ror $a0,x			ror 	esInt1,x
.3f61	76 98		ror $98,x			ror 	esInt0,x
.3f63	60		rts				rts
.3f64					MInt32Zero:
.3f64	b5 98		lda $98,x			lda 	esInt0,x
.3f66	15 a0		ora $a0,x			ora 	esInt1,x
.3f68	15 a8		ora $a8,x			ora 	esInt2,x
.3f6a	15 b0		ora $b0,x			ora 	esInt3,x
.3f6c	60		rts				rts
.3f6d					MInt32Random:
.3f6d	5a		phy				phy
.3f6e	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3f70	ad cc 0d	lda $0dcc			lda 	MSeed32+0 					; check the seed isn't zero
.3f73	d0 03		bne $3f78			bne 	_Random1
.3f75	a8		tay				tay 								; if so do it 256 times
.3f76	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3f78					_Random1:
.3f78	0a		asl a				asl 	a
.3f79	2e cd 0d	rol $0dcd			rol 	MSeed32+1
.3f7c	2e ce 0d	rol $0dce			rol 	MSeed32+2
.3f7f	2e cf 0d	rol $0dcf			rol 	MSeed32+3
.3f82	90 02		bcc $3f86			bcc 	_Random2
.3f84	49 c5		eor #$c5			eor 	#$C5
.3f86					_Random2:
.3f86	88		dey				dey
.3f87	d0 ef		bne $3f78			bne 	_Random1
.3f89	8d cc 0d	sta $0dcc			sta 	MSeed32+0 					; copy the seed in.
.3f8c	95 98		sta $98,x			sta 	esInt0,x
.3f8e	ad cd 0d	lda $0dcd			lda 	MSeed32+1
.3f91	95 a0		sta $a0,x			sta 	esInt1,x
.3f93	ad ce 0d	lda $0dce			lda 	MSeed32+2
.3f96	95 a8		sta $a8,x			sta 	esInt2,x
.3f98	ad cf 0d	lda $0dcf			lda 	MSeed32+3
.3f9b	95 b0		sta $b0,x			sta 	esInt3,x
.3f9d	7a		ply				ply
.3f9e	a9 00		lda #$00			lda 	#0
.3fa0	95 90		sta $90,x			sta 	esType,x
.3fa2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3fa3					CheckToken:
.3fa3	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3fa5	d0 02		bne $3fa9			bne 	_CTError
.3fa7	c8		iny				iny
.3fa8	60		rts				rts
.3fa9					_CTError:
.3fa9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3fab	20 27 15	jsr $1527		jsr	errorHandler
.3fae					CheckRightParen:
.3fae	b1 28		lda ($28),y			lda 	(codePtr),y
.3fb0	c8		iny				iny
.3fb1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3fb3	d0 01		bne $3fb6			bne 	_CRPError
.3fb5	60		rts				rts
.3fb6					_CRPError:
.3fb6	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3fb8	20 27 15	jsr $1527		jsr	errorHandler
.3fbb					CheckComma:
.3fbb	b1 28		lda ($28),y			lda 	(codePtr),y
.3fbd	c8		iny				iny
.3fbe	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3fc0	d0 01		bne $3fc3			bne 	_CCError
.3fc2	60		rts				rts
.3fc3					_CCError:
.3fc3	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3fc5	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3fc8					RSReset:
.3fc8	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3fca	85 37		sta $37				sta 	rsPointer
.3fcc	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3fce	85 38		sta $38				sta 	1+(rsPointer)
.3fd0	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3fd2	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3fd5	60		rts				rts
.3fd6					RSClaim:
.3fd6	84 32		sty $32				sty 	tempShort 					; preserve Y
.3fd8	48		pha				pha 								; save marker on stack.
.3fd9	8a		txa				txa 								; get bytes required.
.3fda	38		sec				sec
.3fdb	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3fdd	65 37		adc $37				adc 	rsPointer
.3fdf	85 37		sta $37				sta 	rsPointer
.3fe1	a5 38		lda $38				lda 	rsPointer+1
.3fe3	69 ff		adc #$ff			adc 	#$FF
.3fe5	85 38		sta $38				sta 	rsPointer+1
.3fe7	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3fe9	90 08		bcc $3ff3			bcc 	_RSCOverflow
.3feb	68		pla				pla 								; get marker back
.3fec	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3fee	91 37		sta ($37),y			sta 	(rsPointer),y
.3ff0	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3ff2	60		rts				rts
.3ff3					_RSCOverflow:
.3ff3	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3ff5	20 27 15	jsr $1527		jsr	errorHandler
.3ff8					RSFree:
.3ff8	18		clc				clc
.3ff9	65 37		adc $37				adc 	rsPointer
.3ffb	85 37		sta $37				sta 	rsPointer
.3ffd	90 02		bcc $4001			bcc 	_RSFExit
.3fff	e6 38		inc $38				inc 	rsPointer+1
.4001					_RSFExit:
.4001	60		rts				rts
.4002					RSSavePosition:
.4002	84 32		sty $32				sty 	tempShort 					; save Y position
.4004	a8		tay				tay 								; this is where we write it.
.4005	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.4007	91 37		sta ($37),y			sta 	(rsPointer),y
.4009	c8		iny				iny
.400a	a5 29		lda $29				lda 	codePtr+1
.400c	91 37		sta ($37),y			sta 	(rsPointer),y
.400e	c8		iny				iny
.400f	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.4011	91 37		sta ($37),y			sta 	(rsPointer),y
.4013	a8		tay				tay 								; fix Y back again to original value
.4014	60		rts				rts
.4015					RSLoadPosition:
.4015	a8		tay				tay
.4016	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.4018	85 28		sta $28				sta 	codePtr
.401a	c8		iny				iny
.401b	b1 37		lda ($37),y			lda 	(rsPointer),y
.401d	85 29		sta $29				sta 	codePtr+1
.401f	c8		iny				iny
.4020	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.4022	a8		tay				tay 								; to Y
.4023	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.4024					WarmStart:
.4024	a2 04		ldx #$04		ldx	#4
.4026	20 c6 29	jsr $29c6		jsr	interactionHandler

;******  Return to file: main/main.asm

.4029					mainHandler:
.4029	7c 2c 40	jmp ($402c,x)			jmp 	(mainVectors,x)
.402c					mainVectors:
>402c	48 40					.word _DummyControlHandler ; index 0
>402e	bb 3f					.word CheckComma           ; index 2
>4030	ae 3f					.word CheckRightParen      ; index 4
>4032	aa 31					.word XCommandClear        ; index 6
>4034	d7 38					.word LinkEvaluate         ; index 8
>4036	e3 38					.word LinkEvaluateInteger  ; index 10
>4038	ef 38					.word LinkEvaluateSmallInt ; index 12
>403a	e9 38					.word LinkEvaluateString   ; index 14
>403c	dd 38					.word LinkEvaluateTerm     ; index 16
>403e	8e 3e					.word MLInt32ToString      ; index 18
>4040	37 33					.word Command_XNew         ; index 20
>4042	45 33					.word XCommand_Run         ; index 22
>4044	51 33					.word Command_RunFrom      ; index 24
>4046	a9 3d					.word LinkInt32FromString  ; index 26
.4048					_DummyControlHandler:
.4048	60		rts			rts

;******  Return to file: basic.asm

.4049					section_end_main:
.4049					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.4049					StringChrs:
.4049	aa		tax				tax 								; set up stack
.404a	a9 02		lda #$02			lda 	#2
.404c	20 08 41	jsr $4108			jsr 	AllocateSoftString
.404f	98		tya				tya
.4050	20 2c 41	jsr $412c			jsr 	WriteSoftString
.4053					StringUpdate:
.4053	20 61 40	jsr $4061			jsr 	ReturnSoftString
.4056	8a		txa				txa
.4057	60		rts				rts
.4058					StringNull:
.4058	aa		tax				tax
.4059	a9 01		lda #$01			lda 	#1
.405b	20 08 41	jsr $4108			jsr 	AllocateSoftString
.405e	4c 53 40	jmp $4053			jmp 	StringUpdate
.4061					ReturnSoftString:
.4061	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.4063	95 98		sta $98,x			sta 	esInt0,x
.4065	a5 3a		lda $3a				lda 	softMemAlloc+1
.4067	95 a0		sta $a0,x			sta 	esInt1,x
.4069	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.406b	95 a8		sta $a8,x			sta 	esInt2,x
.406d	95 b0		sta $b0,x			sta 	esInt3,x
.406f	a9 40		lda #$40			lda 	#$40 						; type string.
.4071	95 90		sta $90,x			sta 	esType,x
.4073	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.4074					STRCompare:
.4074	48		pha				pha 								; save A
.4075	aa		tax				tax 								; put stack pos in X
.4076	5a		phy				phy
.4077	20 aa 40	jsr $40aa			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.407a	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.407c	b1 2a		lda ($2a),y			lda 	(temp0),y
.407e	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.4080	90 02		bcc $4084			bcc 	_SCNotSmaller
.4082	b1 2c		lda ($2c),y			lda 	(temp1),y
.4084					_SCNotSmaller:
.4084	aa		tax				tax 								; put that in X. We compare this many chars first.
.4085					_SCCompareLoop:
.4085	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.4087	f0 0c		beq $4095			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.4089	ca		dex				dex 								; decrement chars to compare.
.408a	c8		iny				iny 								; move to next character
.408b	38		sec				sec 								; calculate s1[y]-s2[y]
.408c	b1 2a		lda ($2a),y			lda 	(temp0),y
.408e	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.4090	d0 0a		bne $409c			bne 	_SCReturnResult 			; if different return sign of A
.4092	4c 85 40	jmp $4085			jmp 	_SCCompareLoop
.4095					_SCSameToEndShortest
.4095	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.4097	38		sec				sec
.4098	b1 2a		lda ($2a),y			lda 	(temp0),y
.409a	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.409c					_SCReturnResult:
.409c	08		php				php 								; set return to zero preserving PSW.
.409d	a2 00		ldx #$00			ldx 	#0
.409f	28		plp				plp
.40a0	f0 05		beq $40a7			beq 	_SCExit 					; two values equal, then exit
.40a2	ca		dex				dex 								; X = $FF
.40a3	90 02		bcc $40a7			bcc 	_SCExit 					; if 1st < 2nd then -1
.40a5	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.40a7					_SCExit:
.40a7	7a		ply				ply
.40a8	68		pla				pla
.40a9	60		rts				rts
.40aa					CopyStringPair:
.40aa	b5 99		lda $99,x			lda 	esInt0+1,x
.40ac	85 2c		sta $2c				sta 	temp1
.40ae	b5 a1		lda $a1,x			lda 	esInt1+1,x
.40b0	85 2d		sta $2d				sta 	temp1+1
.40b2					CopyStringTop:
.40b2	b5 98		lda $98,x			lda 	esInt0,x
.40b4	85 2a		sta $2a				sta 	temp0
.40b6	b5 a0		lda $a0,x			lda 	esInt1,x
.40b8	85 2b		sta $2b				sta 	temp0+1
.40ba	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.40bb					StringConcat:
.40bb	aa		tax				tax									; stack pos in X
.40bc	5a		phy				phy
.40bd	20 aa 40	jsr $40aa			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.40c0	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.40c1	a0 00		ldy #$00			ldy 	#0
.40c3	b1 2a		lda ($2a),y			lda 	(temp0),y
.40c5	71 2c		adc ($2c),y			adc 	(temp1),y
.40c7	b0 1b		bcs $40e4			bcs 	_SCError 					; just too many characters here.
.40c9	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.40cb	b0 17		bcs $40e4			bcs 	_SCError
.40cd	20 08 41	jsr $4108			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.40d0	20 ff 40	jsr $40ff			jsr 	CopySoftToStack 			; copy that to the stack.
.40d3	20 e9 40	jsr $40e9			jsr 	SCCopyTemp0 				; copy temp0
.40d6	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.40d8	85 2a		sta $2a				sta 	temp0
.40da	a5 2d		lda $2d				lda 	temp1+1
.40dc	85 2b		sta $2b				sta 	temp0+1
.40de	20 e9 40	jsr $40e9			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.40e1	7a		ply				ply
.40e2	8a		txa				txa 								; and A
.40e3	60		rts				rts
.40e4					_SCError:
.40e4	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.40e6	20 27 15	jsr $1527		jsr	errorHandler
.40e9					SCCopyTemp0:
.40e9	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.40eb	b1 2a		lda ($2a),y			lda 	(temp0),y
.40ed	85 2e		sta $2e				sta 	temp2
.40ef					_SCCopyLoop:
.40ef	a5 2e		lda $2e				lda 	temp2 						; done the lot
.40f1	f0 0b		beq $40fe			beq 	_SCCopyExit
.40f3	c6 2e		dec $2e				dec 	temp2
.40f5	c8		iny				iny 								; get next char
.40f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.40f8	20 2c 41	jsr $412c			jsr 	WriteSoftString 			; write to soft string.
.40fb	4c ef 40	jmp $40ef			jmp 	_SCCopyLoop
.40fe					_SCCopyExit:
.40fe	60		rts				rts
.40ff					CopySoftToStack:
.40ff	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.4101	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.4103	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.4105	95 a0		sta $a0,x			sta 	esInt1,x
.4107	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.4108					AllocateSoftString:
.4108	85 32		sta $32				sta 	tempShort 					; save count
.410a	5a		phy				phy
.410b	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.410d	d0 09		bne $4118			bne 	_ASSDone
.410f	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.4111	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.4113	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.4115	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.4116	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.4118					_ASSDone:
.4118	38		sec				sec 								; allocate downwards enough memory
.4119	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.411b	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.411d	85 39		sta $39				sta 	softMemAlloc
.411f	a5 3a		lda $3a				lda 	softMemAlloc+1
.4121	e9 00		sbc #$00			sbc 	#0
.4123	85 3a		sta $3a				sta 	softMemAlloc+1
.4125	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.4127	a8		tay				tay
.4128	91 39		sta ($39),y			sta 	(softMemAlloc),y
.412a	7a		ply				ply
.412b	60		rts				rts
.412c					WriteSoftString:
.412c	84 32		sty $32				sty 	tempShort 					; save Y
.412e	48		pha				pha 								; save character on stack
.412f	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.4131	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.4133	18		clc				clc
.4134	69 01		adc #$01			adc 	#1
.4136	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4138	a8		tay				tay 								; offset in Y
.4139	68		pla				pla 								; get char and write.
.413a	91 39		sta ($39),y			sta 	(softMemAlloc),y
.413c	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.413e	60		rts				rts
.413f					StrClone:
.413f	aa		tax				tax 								; set up stack.
.4140	5a		phy				phy
.4141	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.4143	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.4145	18		clc				clc
.4146	69 01		adc #$01			adc 	#1
.4148	20 08 41	jsr $4108			jsr 	AllocateSoftString 			; allocate soft memory
.414b	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.414d	95 98		sta $98,x			sta 	esInt0,x
.414f	a5 3a		lda $3a				lda 	softMemAlloc+1
.4151	95 a0		sta $a0,x			sta 	esInt1,x
.4153	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.4155	95 a8		sta $a8,x			sta 	esInt2,x
.4157	95 b0		sta $b0,x			sta 	esInt3,x
.4159	a9 40		lda #$40			lda 	#$40 						; set type to string.
.415b	95 90		sta $90,x			sta 	esType,x
.415d	20 e9 40	jsr $40e9			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.4160	7a		ply				ply
.4161	8a		txa				txa
.4162	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.4163					CaseString:
.4163	48		pha				pha 								; save A and copy to X
.4164	aa		tax				tax
.4165	5a		phy				phy
.4166	20 b2 40	jsr $40b2			jsr 	CopyStringTop 				; target string -> temp0
.4169	a0 00		ldy #$00			ldy 	#0
.416b	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.416d	18		clc				clc
.416e	69 01		adc #$01			adc 	#1 							; one more for length byte
.4170	20 08 41	jsr $4108			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.4173	20 ff 40	jsr $40ff			jsr 	CopySoftToStack 			; copy that to the stack.
.4176	a0 00		ldy #$00			ldy 	#0
.4178	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.417a	aa		tax				tax
.417b					_CSCopy:
.417b	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.417d	f0 24		beq $41a3			beq 	_CSExit
.417f	ca		dex				dex
.4180	c8		iny				iny
.4181	68		pla				pla 								; check direction
.4182	48		pha				pha
.4183	f0 0c		beq $4191			beq 	_CSUpper
.4185	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.4187	c9 41		cmp #$41			cmp 	#"A"
.4189	90 12		bcc $419d			bcc 	_CSWrite
.418b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.418d	b0 0e		bcs $419d			bcs 	_CSWrite
.418f	90 0a		bcc $419b			bcc 	_CSFlipWrite
.4191					_CSUpper:
.4191	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.4193	c9 61		cmp #$61			cmp 	#"a"
.4195	90 06		bcc $419d			bcc 	_CSWrite
.4197	c9 7b		cmp #$7b			cmp 	#"z"+1
.4199	b0 02		bcs $419d			bcs 	_CSWrite
.419b					_CSFlipWrite:
.419b	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.419d					_CSWrite:
.419d	20 2c 41	jsr $412c			jsr 	WriteSoftString 			; add to soft string.
.41a0	4c 7b 41	jmp $417b			jmp 	_CSCopy
.41a3					_CSExit:
.41a3	7a		ply				ply
.41a4	68		pla				pla
.41a5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.41a6					StringSubstring:
.41a6	48		pha				pha
.41a7	aa		tax				tax 								; access stack.
.41a8	5a		phy				phy
.41a9	20 b2 40	jsr $40b2			jsr 	CopyStringTop 				; point temp0 to the string.
.41ac	a0 00		ldy #$00			ldy 	#0 							; get length.
.41ae	b1 2a		lda ($2a),y			lda 	(temp0),Y
.41b0	85 2c		sta $2c				sta 	temp1
.41b2	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.41b4	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.41b6	f0 02		beq $41ba			beq 	_SSBOkay
.41b8	b0 2a		bcs $41e4			bcs 	_SSBReturnNull
.41ba					_SSBOkay:
.41ba	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.41bc	18		clc				clc
.41bd	69 01		adc #$01			adc 	#1
.41bf	38		sec				sec
.41c0	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.41c2	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.41c4	90 02		bcc $41c8			bcc		_SSBTrunc
.41c6	b5 9a		lda $9a,x			lda 	esInt0+2,x
.41c8					_SSBTrunc:
.41c8	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.41ca	18		clc				clc
.41cb	69 01		adc #$01			adc 	#1 							; add 1
.41cd	20 08 41	jsr $4108			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.41d0	20 ff 40	jsr $40ff			jsr 	CopySoftToStack 			; copy that to the stack.
.41d3	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.41d5					_SSBCopyLoop:
.41d5	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.41d7	f0 0e		beq $41e7			beq 	_SSBExit
.41d9	c6 2d		dec $2d				dec 	temp1+1
.41db	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.41dd	20 2c 41	jsr $412c			jsr 	WriteSoftString
.41e0	c8		iny				iny
.41e1	4c d5 41	jmp $41d5			jmp 	_SSBCopyLoop
.41e4					_SSBReturnNull:
.41e4	20 ea 41	jsr $41ea			jsr 	ReturnNull
.41e7					_SSBExit:
.41e7	7a		ply				ply
.41e8	68		pla				pla
.41e9	60		rts				rts
.41ea					ReturnNull:
.41ea	a9 00		lda #$00			lda 	#0 							; clear null string
.41ec	8d ce 0a	sta $0ace			sta 	NullString
.41ef	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.41f1	95 98		sta $98,x			sta 	esInt0,x
.41f3	a9 0a		lda #$0a			lda 	#NullString >> 8
.41f5	95 a0		sta $a0,x			sta 	esInt1,x
.41f7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0dd0					srcStrLen:
>0dd0							.fill 	1
.41f8					StringWrite:
.41f8	aa		tax				tax
.41f9	48		pha				pha
.41fa	5a		phy				phy
.41fb	20 21 42	jsr $4221			jsr 	CheckOverwriteCurrent
.41fe	b0 0d		bcs $420d			bcs		_SWCopyCurrent
.4200	20 5f 42	jsr $425f			jsr 	RequiresConcretion
.4203	90 0e		bcc $4213			bcc 	_SWWriteReference
.4205	20 be 42	jsr $42be			jsr 	CheckSpecialConcretion
.4208	b0 09		bcs $4213			bcs 	_SWWriteReference
.420a	20 73 42	jsr $4273			jsr 	AllocateHardMemory
.420d					_SWCopyCurrent:
.420d	20 a4 42	jsr $42a4			jsr 	CopyStringToHardMemory
.4210	4c 1e 42	jmp $421e			jmp 	_SWExit
.4213					_SWWriteReference
.4213	a0 00		ldy #$00			ldy 	#0
.4215	a5 2a		lda $2a				lda 	temp0
.4217	91 2c		sta ($2c),y			sta 	(temp1),y
.4219	c8		iny				iny
.421a	a5 2b		lda $2b				lda 	temp0+1
.421c	91 2c		sta ($2c),y			sta 	(temp1),y
.421e					_SWExit:
.421e	7a		ply				ply
.421f	68		pla				pla
.4220	60		rts				rts
.4221					CheckOverwriteCurrent:
.4221	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.4223	b5 a1		lda $a1,x			lda 	esInt1+1,x
.4225	85 2b		sta $2b				sta 	temp0+1
.4227	b5 99		lda $99,x			lda 	esInt0+1,x
.4229	85 2a		sta $2a				sta 	temp0
.422b	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.422d	8d d0 0d	sta $0dd0			sta 	srcStrLen
.4230	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.4232	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.4234	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4236	85 2d		sta $2d				sta 	temp1+1
.4238	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.423a	b1 2c		lda ($2c),y			lda 	(temp1),y
.423c	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.423e	90 1b		bcc $425b			bcc 	_COCFail 				; in hard memory.
.4240	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.4242	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.4244	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4246	85 2e		sta $2e				sta 	temp2
.4248	c8		iny				iny
.4249	b1 2c		lda ($2c),y			lda 	(temp1),y
.424b	e9 00		sbc #$00			sbc 	#0
.424d	85 2f		sta $2f				sta 	temp2+1
.424f	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.4251	b1 2e		lda ($2e),y			lda 	(temp2),y
.4253	38		sec				sec  							; maximum character capacity.
.4254	e9 02		sbc #$02			sbc 	#2
.4256	cd d0 0d	cmp $0dd0			cmp 	srcStrLen 				; if >= the required length
.4259	b0 02		bcs $425d			bcs 	_COCCanReuse
.425b					_COCFail:
.425b	18		clc				clc
.425c	60		rts				rts
.425d					_COCCanReuse:
.425d	38		sec				sec
.425e	60		rts				rts
.425f					RequiresConcretion:
.425f	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.4261	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.4263	b0 0a		bcs $426f			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.4265	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.4267	f0 08		beq $4271			beq 	_RCFail 				; if not, this cannot be soft memory.
.4269	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.426b	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.426d	90 02		bcc $4271			bcc 	_RCFail 				; so concreting
.426f					_RCSucceed:
.426f	38		sec				sec
.4270	60		rts				rts
.4271					_RCFail:
.4271	18		clc				clc
.4272	60		rts				rts
.4273					AllocateHardMemory:
.4273	5a		phy				phy
.4274	ad d0 0d	lda $0dd0			lda 	srcStrLen 				; characters in string
.4277	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.4279	b0 04		bcs $427f			bcs 	_AHMSetMax 				; max out that amount.
.427b	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.427d	90 02		bcc $4281			bcc 	_AHMIsOkay
.427f					_AHMSetMax:
.427f	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.4281					_AHMIsOkay:
.4281	48		pha				pha	 							; save size to be allocated
.4282	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.4284	38		sec				sec  							; and copy result to TOS as target address.
.4285	65 33		adc $33				adc 	highMemory
.4287	85 33		sta $33				sta 	highMemory
.4289	a5 34		lda $34				lda 	highMemory+1
.428b	69 ff		adc #$ff			adc 	#$FF
.428d	85 34		sta $34				sta 	highMemory+1
.428f	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.4291	68		pla				pla 							; get the total size of the storage block
.4292	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.4294	18		clc				clc
.4295	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.4297	69 01		adc #$01			adc 	#1
.4299	91 2c		sta ($2c),y			sta 	(temp1),y
.429b	a5 34		lda $34				lda 	highMemory+1
.429d	69 00		adc #$00			adc 	#0
.429f	c8		iny				iny
.42a0	91 2c		sta ($2c),y			sta 	(temp1),y
.42a2	7a		ply				ply
.42a3	60		rts				rts
.42a4					CopyStringToHardMemory:
.42a4	5a		phy				phy
.42a5	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.42a7	b1 2c		lda ($2c),y			lda 	(temp1),y
.42a9	85 2e		sta $2e				sta 	temp2
.42ab	c8		iny				iny
.42ac	b1 2c		lda ($2c),y			lda 	(temp1),y
.42ae	85 2f		sta $2f				sta 	temp2+1
.42b0	ac d0 0d	ldy $0dd0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.42b3					_CSTHMLoop:
.42b3	b1 2a		lda ($2a),y			lda 	(temp0),y
.42b5	91 2e		sta ($2e),y			sta 	(temp2),y
.42b7	88		dey				dey
.42b8	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.42ba	d0 f7		bne $42b3			bne 	_CSTHMLoop
.42bc	7a		ply				ply
.42bd	60		rts				rts
.42be					CheckSpecialConcretion:
.42be	ad d0 0d	lda $0dd0			lda 	srcStrLen 				; check string is null e.g. length = 0
.42c1	f0 02		beq $42c5			beq 	_CSCNullString
.42c3	18		clc				clc
.42c4	60		rts				rts
.42c5					_CSCNullString:
.42c5	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.42c7	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.42ca	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.42cc	85 2a		sta $2a				sta 	temp0
.42ce	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.42d0	85 2b		sta $2b				sta 	1+(temp0)
.42d2	38		sec				sec
.42d3	60		rts				rts

;******  Return to file: string/string.asm

.42d4					stringHandler:
.42d4	7c d7 42	jmp ($42d7,x)			jmp 	(stringVectors,x)
.42d7					stringVectors:
>42d7	e9 42					.word _DummyControlHandler ; index 0
>42d9	49 40					.word StringChrs           ; index 2
>42db	3f 41					.word StrClone             ; index 4
>42dd	bb 40					.word StringConcat         ; index 6
>42df	58 40					.word StringNull           ; index 8
>42e1	74 40					.word STRCompare           ; index 10
>42e3	63 41					.word CaseString           ; index 12
>42e5	a6 41					.word StringSubstring      ; index 14
>42e7	f8 41					.word StringWrite          ; index 16
.42e9					_DummyControlHandler:
.42e9	60		rts			rts

;******  Return to file: basic.asm

.42ea					section_end_string:
.42ea					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0dd1					deTokeniseVector:
>0dd1							.fill 	2
.0dd3					lastCharacterClass:
>0dd3							.fill 	1
.0dd4					indent:
>0dd4							.fill 	1
.42ea					ListLine:
.42ea	48		pha				pha								; enter here to list to console. sets the output vector
.42eb	a9 19		lda #$19			lda 	#(deTokenPrint) & $FF
.42ed	8d d1 0d	sta $0dd1			sta 	deTokeniseVector
.42f0	a9 44		lda #$44			lda 	#(deTokenPrint) >> 8
.42f2	8d d2 0d	sta $0dd2			sta 	1+(deTokeniseVector)
.42f5	68		pla				pla
.42f6					Detokenise:
.42f6	18		clc				clc 							; space required for line number.
.42f7	69 06		adc #$06			adc 	#6
.42f9	8d d4 0d	sta $0dd4			sta 	indent
.42fc	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.42fe	8d d3 0d	sta $0dd3			sta 	lastCharacterClass
.4301	a2 02		ldx #$02			ldx 	#2
.4303	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.4305	95 a8		sta $a8,x			sta 	esInt2,x
.4307	95 b0		sta $b0,x			sta 	esInt3,x
.4309	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.430b	b1 28		lda ($28),y			lda 	(codePtr),y
.430d	95 98		sta $98,x			sta 	esInt0,x
.430f	c8		iny				iny
.4310	b1 28		lda ($28),y			lda 	(codePtr),y
.4312	95 a0		sta $a0,x			sta 	esInt1,x
.4314	a9 84		lda #$84			lda 	#LTYLineNumber
.4316	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.4319	a9 0a		lda #$0a			lda 	#10 					; base 10
.431b	20 bf 43	jsr $43bf			jsr 	DTPrintInteger 			; print as integer.
.431e	a0 00		ldy #$00			ldy 	#0 						; get length
.4320	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.4322	aa		tax				tax
.4323					_DTPadOut:
.4323	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4325	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.4328	e8		inx				inx
.4329	ec d4 0d	cpx $0dd4			cpx 	indent
.432c	d0 f5		bne $4323			bne 	_DTPadOut
.432e	a0 03		ldy #$03			ldy 	#3 						; start position.
.4330					_DTListLoop:
.4330	b1 28		lda ($28),y			lda 	(codePtr),y
.4332	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.4334	f0 5c		beq $4392			beq 	_DTIsString
.4336	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.4338	f0 54		beq $438e			beq 	_DTIsFloat
.433a	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.433c	f0 16		beq $4354			beq 	_DTHexConstant
.433e	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.4340	d0 06		bne $4348			bne 	_DTNotEnd
.4342	a9 ff		lda #$ff			lda 	#255 					; print CR
.4344	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.4347	60		rts				rts
.4348					_DTNotEnd:
.4348	c9 00		cmp #$00			cmp 	#0
.434a	30 36		bmi $4382			bmi 	_DTIsToken
.434c	c9 40		cmp #$40			cmp 	#$40
.434e	90 38		bcc $4388			bcc 	_DTIsIdentifier
.4350	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.4352	d0 0d		bne $4361			bne 	_DTConstant
.4354					_DTHexConstant:
.4354	a9 26		lda #$26			lda 	#"&"
.4356	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.4359	c8		iny				iny
.435a	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.435c	20 35 44	jsr $4435			jsr 	DTSwitchMode
.435f	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.4361					_DTConstant:
.4361	48		pha				pha
.4362	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.4364	20 35 44	jsr $4435			jsr 	DTSwitchMode
.4367	a9 86		lda #$86			lda 	#LTYConstant
.4369	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.436c	a2 02		ldx #$02			ldx 	#2 						; get its value
.436e	8a		txa				txa
.436f	a2 10		ldx #$10		ldx	#16
.4371	20 29 40	jsr $4029		jsr	mainHandler
.4374	aa		tax				tax
.4375	68		pla				pla 							; get base back
.4376	85 32		sta $32				sta 	tempShort
.4378	5a		phy				phy
.4379	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.437b	20 bf 43	jsr $43bf			jsr 	DTPrintInteger
.437e	7a		ply				ply
.437f	4c 30 43	jmp $4330			jmp 	_DTListLoop
.4382					_DTIsToken:
.4382	20 8e 44	jsr $448e			jsr 	DTDecodeToken
.4385	4c 30 43	jmp $4330			jmp 	_DTListLoop
.4388					_DTIsIdentifier:
.4388	20 47 44	jsr $4447			jsr 	DTIdentifier
.438b	4c 30 43	jmp $4330			jmp 	_DTListLoop
.438e					_DTIsFloat:
>438e	db						.byte 	$DB
.438f	4c 8e 43	jmp $438e			jmp 	_DTIsFloat
.4392					_DTIsString:
.4392	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4394	20 35 44	jsr $4435			jsr 	DTSwitchMode
.4397	a9 81		lda #$81			lda 	#LTYString
.4399	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.439c	a9 22		lda #$22			lda 	#'"'						; open quote
.439e	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.43a1	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.43a3	8a		txa				txa
.43a4	a2 10		ldx #$10		ldx	#16
.43a6	20 29 40	jsr $4029		jsr	mainHandler
.43a9	aa		tax				tax
.43aa	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.43ac	85 2a		sta $2a				sta 	temp0
.43ae	b5 a0		lda $a0,x			lda 	esInt1,x
.43b0	85 2b		sta $2b				sta 	temp0+1
.43b2	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.43b4	20 d0 43	jsr $43d0			jsr 	DTPrintLengthPrefix
.43b7	a9 22		lda #$22			lda 	#'"'
.43b9	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.43bc	4c 30 43	jmp $4330			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0dd5					tPrintCount:
>0dd5							.fill 	1
.43bf					DTPrintInteger:
.43bf	48		pha				pha									; save base
.43c0	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.43c2	85 2a		sta $2a				sta 	temp0
.43c4	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.43c6	85 2b		sta $2b				sta 	1+(temp0)
.43c8	7a		ply				ply
.43c9	8a		txa				txa
.43ca	a2 12		ldx #$12		ldx	#18
.43cc	20 29 40	jsr $4029		jsr	mainHandler
.43cf	aa		tax				tax 								; then drop through here.
.43d0					DTPrintLengthPrefix:
.43d0	aa		tax				tax 								; A = 0 = don't case convert.
.43d1	5a		phy				phy
.43d2	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.43d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.43d6	8d d5 0d	sta $0dd5			sta 	tPrintCount
.43d9	f0 1b		beq $43f6			beq 	_DTPLPExit 					; empty string
.43db					_DTPLPLoop:
.43db	c8		iny				iny 								; get next.
.43dc	b1 2a		lda ($2a),y			lda 	(temp0),y
.43de	29 7f		and #$7f			and 	#$7F
.43e0	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.43e2	f0 0a		beq $43ee			beq 	_DTPLPNoCase
.43e4	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.43e6	90 06		bcc $43ee			bcc 	_DTPLPNoCase
.43e8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43ea	b0 02		bcs $43ee			bcs 	_DTPLPNoCase
.43ec	49 20		eor #$20			eor 	#"A"^"a"
.43ee					_DTPLPNoCase
.43ee	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter 		; call handler
.43f1	ce d5 0d	dec $0dd5			dec 	tPrintCount 				; do all the characters
.43f4	d0 e5		bne $43db			bne 	_DTPLPLoop
.43f6					_DTPLPExit:
.43f6	7a		ply				ply
.43f7	60		rts				rts
.43f8					ListOutputCharacter:
.43f8	85 32		sta $32				sta 	tempShort
.43fa	48		pha				pha
.43fb	da		phx				phx
.43fc	5a		phy				phy
.43fd	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.43ff	c9 20		cmp #$20			cmp 	#32
.4401	b0 0c		bcs $440f			bcs		_LOCHiBit
.4403	09 40		ora #$40			ora 	#64 						; conversion
.4405	c9 40		cmp #$40			cmp 	#64							; make l/c
.4407	f0 06		beq $440f			beq 	_LOCHiBit
.4409	c9 5b		cmp #$5b			cmp 	#65+26
.440b	b0 02		bcs $440f			bcs 	_LOCHiBit
.440d	69 20		adc #$20			adc 	#32
.440f					_LOCHiBit:
.440f	20 16 44	jsr $4416			jsr 	_LOCCallVector				; call o/p handler routine
.4412	7a		ply				ply
.4413	fa		plx				plx
.4414	68		pla				pla
.4415					_LOCExit:
.4415	60		rts				rts
.4416					_LOCCallVector:
.4416	6c d1 0d	jmp ($0dd1)			jmp 	(deTokeniseVector)
.4419					deTokenPrint:
.4419	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.441b	30 06		bmi $4423			bmi 	_dtpInk
.441d	a2 14		ldx #$14		ldx	#20
.441f	20 05 15	jsr $1505		jsr	deviceHandler
.4422	60		rts				rts
.4423	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4425	f0 08		beq $442f			beq 	_dtpCR						; except $FF => CRLF
.4427	29 07		and #$07			and 	#7
.4429	a2 06		ldx #$06		ldx	#6
.442b	20 05 15	jsr $1505		jsr	deviceHandler
.442e	60		rts				rts
.442f					_dtpCR:
.442f	a2 04		ldx #$04		ldx	#4
.4431	20 05 15	jsr $1505		jsr	deviceHandler
.4434	60		rts				rts
.4435					DTSwitchMode:
.4435	cd d3 0d	cmp $0dd3			cmp 	LastCharacterClass 			; if changed, update character class
.4438	f0 04		beq $443e			beq 	_DTSMNoChange
.443a	8d d3 0d	sta $0dd3			sta 	LastCharacterClass
.443d					_DTSMExit:
.443d	60		rts				rts
.443e					_DTSMNoChange:
.443e	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.4440	f0 fb		beq $443d			beq 	_DTSMExit 					; need a space.
.4442	a9 20		lda #$20			lda 	#" "
.4444	4c f8 43	jmp $43f8			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4447					DTIdentifier:
.4447	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4449	20 35 44	jsr $4435			jsr 	DTSwitchMode
.444c	a9 87		lda #$87			lda 	#LTYIdentifier
.444e	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.4451					_DTILoop:
.4451	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.4453	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4455	d0 02		bne $4459			bne 	_DTINotUS
.4457	a9 5f		lda #$5f			lda 	#"_"
.4459					_DTINotUS:
.4459	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.445c	c8		iny				iny
.445d	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.445f	c9 3a		cmp #$3a			cmp 	#$3A
.4461	90 ee		bcc $4451			bcc 	_DTILoop
.4463	c8		iny				iny
.4464	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4466	f0 25		beq $448d			beq 	_DTIExit 					; no postfix.
.4468	48		pha				pha
.4469	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.446b	8d d3 0d	sta $0dd3			sta 	LastCharacterClass
.446e	a9 82		lda #$82			lda 	#LTYPunctuation
.4470	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.4473	68		pla				pla
.4474	c9 3b		cmp #$3b			cmp 	#$3B
.4476	f0 10		beq $4488			beq 	_DTIArray
.4478	4a		lsr a				lsr 	a 							; array flag in C
.4479	08		php				php
.447a	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.447c	f0 02		beq $4480			beq 	_DTIDollar
.447e	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.4480					_DTIDollar:
.4480	49 24		eor #$24			eor 	#"$"
.4482	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.4485	28		plp				plp
.4486	90 05		bcc $448d			bcc 	_DTIExit
.4488					_DTIArray:
.4488	a9 28		lda #$28			lda 	#"("
.448a	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.448d					_DTIExit:
.448d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.448e					DTDecodeToken:
.448e	a2 00		ldx #$00			ldx 	#0 							; table number to use
.4490	b1 28		lda ($28),y			lda 	(codePtr),y
.4492	c9 84		cmp #$84			cmp 	#$84
.4494	b0 05		bcs $449b			bcs 	_DTNotShift
.4496	29 03		and #$03			and 	#3 							; get the shift 1..3
.4498	0a		asl a				asl 	a 							; put 2 x in X
.4499	aa		tax				tax
.449a	c8		iny				iny
.449b					_DTNotShift:
.449b	bd 91 47	lda $4791,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.449e	85 2a		sta $2a				sta 	temp0 						; point into temp0
.44a0	bd 92 47	lda $4792,x			lda 	TokenTableAddress+1,x
.44a3	85 2b		sta $2b				sta 	temp0+1
.44a5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.44a7	c8		iny				iny 								; consume it.
.44a8	aa		tax				tax
.44a9	5a		phy				phy
.44aa					_DTFindText:
.44aa	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.44ac	f0 11		beq $44bf			beq 	_DTFoundText
.44ae	ca		dex				dex
.44af	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.44b1	38		sec				sec
.44b2	b1 2a		lda ($2a),y			lda 	(temp0),y
.44b4	65 2a		adc $2a				adc 	temp0
.44b6	85 2a		sta $2a				sta 	temp0
.44b8	90 f0		bcc $44aa			bcc 	_DTFindText
.44ba	e6 2b		inc $2b				inc 	temp0+1
.44bc	4c aa 44	jmp $44aa			jmp 	_DTFindText
.44bf					_DTFoundText:
.44bf	a0 01		ldy #$01			ldy 	#1 							; get first character
.44c1	b1 2a		lda ($2a),y			lda 	(temp0),y
.44c3	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.44c5	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.44c7	90 11		bcc $44da			bcc 	_DTIsPunctuation
.44c9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44cb	b0 0d		bcs $44da			bcs 	_DTIsPunctuation
.44cd	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.44cf	20 35 44	jsr $4435			jsr 	DTSwitchMode
.44d2	a9 83		lda #$83			lda 	#LTYKeyword
.44d4	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.44d7	4c e4 44	jmp $44e4			jmp 	_DTPrint
.44da					_DTIsPunctuation:
.44da	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.44dc	20 35 44	jsr $4435			jsr 	DTSwitchMode
.44df	a9 82		lda #$82			lda 	#LTYPunctuation
.44e1	20 f8 43	jsr $43f8			jsr 	ListOutputCharacter
.44e4					_DTPrint:
.44e4	a9 01		lda #$01			lda 	#1 							; fix case.
.44e6	20 d0 43	jsr $43d0			jsr 	DTPrintLengthPrefix 		; print it out.
.44e9	a0 00		ldy #$00			ldy 	#0
.44eb	b1 2a		lda ($2a),y			lda 	(temp0),y
.44ed	a8		tay				tay
.44ee	b1 2a		lda ($2a),y			lda 	(temp0),y
.44f0	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.44f2	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.44f4	90 04		bcc $44fa			bcc 	_DTIsNowPunctuation
.44f6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44f8	90 05		bcc $44ff			bcc 	_DTPExit
.44fa					_DTIsNowPunctuation:
.44fa	a9 01		lda #$01			lda 	#1
.44fc	8d d3 0d	sta $0dd3			sta		LastCharacterClass
.44ff					_DTPExit:
.44ff	7a		ply				ply
.4500	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0dd6					currentSet:
>0dd6							.fill 	1
.4501					TokenSearch:
.4501	da		phx				phx
.4502	5a		phy				phy
.4503	a9 00		lda #$00			lda 	#0
.4505	8d d6 0d	sta $0dd6			sta 	currentSet
.4508					_TSLoop:
.4508	ad d6 0d	lda $0dd6			lda 	currentSet 					; 2 x currentset in X
.450b	0a		asl a				asl 	a
.450c	aa		tax				tax
.450d	bd 91 47	lda $4791,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.4510	85 2a		sta $2a				sta 	temp0
.4512	bd 92 47	lda $4792,x			lda 	TokenTableAddress+1,x
.4515	85 2b		sta $2b				sta 	temp0+1
.4517	20 3c 45	jsr $453c			jsr 	TokenSearchOne 				; search one table
.451a	b0 0d		bcs $4529			bcs 	_TSFound 					; found a token.
.451c	ee d6 0d	inc $0dd6			inc 	currentSet 					; next set
.451f	ad d6 0d	lda $0dd6			lda 	currentSet
.4522	c9 04		cmp #$04			cmp 	#4
.4524	d0 e2		bne $4508			bne 	_TSLoop 					; back if not done all four.
.4526	18		clc				clc 								; clear carry and exit
.4527	90 10		bcc $4539			bcc 	_TSExit
.4529					_TSFound:
.4529	48		pha				pha 								; save token
.452a	ad d6 0d	lda $0dd6			lda 	currentSet					; if set zero no shift
.452d	f0 05		beq $4534			beq 	_TSNoShift
.452f	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.4531	20 ed 45	jsr $45ed			jsr 	TokenWrite
.4534					_TSNoShift:
.4534	68		pla				pla 								; get token back
.4535	20 ed 45	jsr $45ed			jsr 	TokenWrite 					; write it
.4538	38		sec				sec 								; carry set indicating success
.4539					_TSExit:
.4539	7a		ply				ply
.453a	fa		plx				plx
.453b	60		rts				rts
.453c					TokenSearchOne:
.453c	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.453e					_TSOLoop:
.453e	a0 00		ldy #$00			ldy 	#0
.4540	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4542	f0 26		beq $456a			beq 	_TSOFail 					; if zero, end of table
.4544	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4547	f0 11		beq $455a			beq 	_TSOCheckText
.4549					_TSONext:
.4549	e8		inx				inx 								; bump token
.454a	a0 00		ldy #$00			ldy 	#0							; get length
.454c	b1 2a		lda ($2a),y			lda 	(temp0),y
.454e	38		sec				sec
.454f	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4551	85 2a		sta $2a				sta 	temp0
.4553	90 e9		bcc $453e			bcc 	_TSOLoop
.4555	e6 2b		inc $2b				inc 	temp0+1
.4557	4c 3e 45	jmp $453e			jmp 	_TSOLoop
.455a					_TSOCheckText:
.455a	a8		tay				tay 								; compare length downto 1.
.455b					_TSOCheckLoop:
.455b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.455d	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4560	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4562	d0 e5		bne $4549			bne 	_TSONext 					; different goto next.
.4564	88		dey				dey 								; do all
.4565	d0 f4		bne $455b			bne 	_TSOCheckLoop
.4567	8a		txa				txa 								; return token in A and carry set
.4568	38		sec				sec
.4569	60		rts				rts
.456a					_TSOFail:
.456a	18		clc				clc
.456b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.456c					TokTest:
.456c	a2 ff		ldx #$ff				ldx 	#$FF
.456e	9a		txs					txs
.456f	a9 8c		lda #$8c			lda 	#(TokenText1) & $FF
.4571	85 28		sta $28				sta 	codePtr
.4573	a9 45		lda #$45			lda 	#(TokenText1) >> 8
.4575	85 29		sta $29				sta 	1+(codePtr)
.4577	20 8c 45	jsr $458c				jsr 	Tokenise
.457a	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.457c	bd 8c 45	lda $458c,x	_TokCheck:	lda 	TokenBytes1,x
.457f	dd da 0d	cmp $0dda,x				cmp 	tokenBuffer,x
.4582	d0 fe		bne $4582	_TokFail:	bne 	_TokFail	 		; error.
.4584	e8		inx					inx
.4585	c9 80		cmp #$80				cmp 	#$80
.4587	d0 f3		bne $457c				bne 	_TokCheck
.4589	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.458c					TokenText1:
.458c					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0dd7					tokenHeader:
>0dd7							.fill 	3
.0dda					tokenBuffer:
>0dda							.fill 	256
.0eda					tokenBufferIndex:
>0eda							.fill 	1
.458c					Tokenise:
.458c	20 04 46	jsr $4604			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.458f					TokeniseASCIIZ:
.458f	20 15 46	jsr $4615			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4592	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4594	8d da 0e	sta $0eda			sta 	tokenBufferIndex
.4597	a8		tay				tay 								; start pointer
.4598	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.459a	8d da 0d	sta $0dda			sta 	tokenBuffer
.459d					_TokLoop:
.459d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.459f	f0 46		beq $45e7			beq 	_TokExit 					; if zero, then exit.
.45a1	c8		iny				iny 								; skip over spaces.
.45a2	c9 20		cmp #$20			cmp 	#" "
.45a4	f0 f7		beq $459d			beq 	_TokLoop
.45a6	88		dey				dey 								; point back to character.
.45a7	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.45a9	f0 18		beq $45c3			beq 	_TokHexConst
.45ab	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.45ad	f0 23		beq $45d2			beq 	_TokQString
.45af	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.45b1	b0 26		bcs $45d9			bcs 	_TokPunctuation
.45b3	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.45b5	b0 29		bcs $45e0			bcs 	_TokIdentifier
.45b7	c9 3a		cmp #$3a			cmp 	#"9"+1
.45b9	b0 1e		bcs $45d9			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.45bb	c9 30		cmp #$30			cmp 	#"0"
.45bd	90 1a		bcc $45d9			bcc 	_TokPunctuation 			; < 0, punctuation.
.45bf	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.45c1	d0 08		bne $45cb			bne 	_TokConst
.45c3					_TokHexConst:
.45c3	c8		iny				iny									; consume token.
.45c4	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.45c6	20 ed 45	jsr $45ed			jsr 	TokenWrite
.45c9	a9 10		lda #$10			lda 	#16
.45cb					_TokConst:
.45cb	20 d1 46	jsr $46d1			jsr 	TokeniseInteger
.45ce	b0 cd		bcs $459d			bcs 	_TokLoop
.45d0	90 18		bcc $45ea			bcc 	_TokFail
.45d2					_TokQString:
.45d2	20 65 47	jsr $4765			jsr 	TokeniseString
.45d5	b0 c6		bcs $459d			bcs 	_TokLoop
.45d7	90 11		bcc $45ea			bcc 	_TokFail
.45d9					_TokPunctuation:
.45d9	20 44 47	jsr $4744			jsr 	TokenisePunctuation
.45dc	b0 bf		bcs $459d			bcs 	_TokLoop
.45de	90 0a		bcc $45ea			bcc 	_TokFail
.45e0					_TokIdentifier:
.45e0	20 44 46	jsr $4644			jsr 	TokeniseIdentifier
.45e3	b0 b8		bcs $459d			bcs 	_TokLoop
.45e5	90 03		bcc $45ea			bcc 	_TokFail
.45e7					_TokExit:
.45e7	a9 01		lda #$01			lda 	#1
.45e9	60		rts				rts
.45ea					_TokFail:
.45ea	a9 00		lda #$00			lda 	#0
.45ec	60		rts				rts
.45ed					TokenWrite:
.45ed	85 32		sta $32				sta 	tempShort 					; save XA
.45ef	48		pha				pha
.45f0	da		phx				phx
.45f1	a5 32		lda $32				lda 	tempShort
.45f3	ae da 0e	ldx $0eda			ldx 	tokenBufferIndex 			; geet index
.45f6	9d da 0d	sta $0dda,x			sta 	tokenBuffer,x 				; write byte to buffer
.45f9	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.45fb	9d db 0d	sta $0ddb,x			sta 	tokenBuffer+1,x
.45fe	ee da 0e	inc $0eda			inc 	tokenBufferIndex 			; bump index
.4601	fa		plx				plx
.4602	68		pla				pla
.4603	60		rts				rts
.4604					TokeniseMakeASCIIZ:
.4604	a0 00		ldy #$00			ldy 	#0							; get length of string.
.4606	b1 28		lda ($28),y			lda 	(codePtr),y
.4608	a8		tay				tay
.4609	c8		iny				iny 								; +1, the NULL goes here.
.460a	a9 00		lda #$00			lda 	#0
.460c	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.460e	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4610	d0 02		bne $4614			bne 	_TMKAExit
.4612	e6 29		inc $29				inc 	codePtr+1
.4614					_TMKAExit:
.4614	60		rts				rts
.4615					TokeniseFixCase:
.4615	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4617	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.4619					_TFCFlipQ:
.4619	8a		txa				txa
.461a	49 01		eor #$01			eor 	#1
.461c	aa		tax				tax
.461d					_TFCLoop:
.461d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.461f	f0 22		beq $4643			beq 	_TFCExit 					; if zero exit.
.4621	c9 20		cmp #$20			cmp 	#32 						; if control
.4623	90 1a		bcc $463f			bcc 	_TFCControl
.4625	c8		iny				iny 								; preconsume
.4626	c9 22		cmp #$22			cmp 	#'"'
.4628	f0 ef		beq $4619			beq 	_TFCFlipQ
.462a	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.462c	90 ef		bcc $461d			bcc 	_TFCLoop
.462e	c9 7b		cmp #$7b			cmp 	#"z"+1
.4630	b0 eb		bcs $461d			bcs 	_TFCLoop
.4632	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4634	d0 e7		bne $461d			bne 	_TFCLoop
.4636	88		dey				dey
.4637	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4639					_TFCWrite:
.4639	91 28		sta ($28),y			sta 	(codePtr),y
.463b	c8		iny				iny
.463c	4c 1d 46	jmp $461d			jmp 	_TFCLoop
.463f					_TFCControl:
.463f	a9 20		lda #$20			lda 	#" "
.4641	d0 f6		bne $4639			bne 	_TFCWrite
.4643					_TFCExit:
.4643	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4644					TokeniseIdentifier:
.4644	a2 00		ldx #$00			ldx 	#0
.4646					_TICopyID:
.4646	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4648	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.464a	f0 16		beq $4662			beq 	_TICopyUnderscore
.464c	c9 2e		cmp #$2e			cmp 	#"."
.464e	f0 14		beq $4664			beq 	_TICopyIn
.4650	c9 30		cmp #$30			cmp 	#"0"
.4652	90 1b		bcc $466f			bcc 	_TIEndCopy
.4654	c9 3a		cmp #$3a			cmp 	#"9"+1
.4656	90 0c		bcc $4664			bcc 	_TICopyIn
.4658	c9 41		cmp #$41			cmp 	#"A"
.465a	90 13		bcc $466f			bcc 	_TIEndCopy
.465c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.465e	b0 0f		bcs $466f			bcs		_TIEndCopy
.4660	90 02		bcc $4664			bcc 	_TICopyIn
.4662					_TICopyUnderScore:
.4662	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4664					_TICopyIn:
.4664	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4665	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4668	8e cf 0a	stx $0acf			stx 	convertBuffer
.466b	c8		iny				iny 								; next character
.466c	4c 46 46	jmp $4646			jmp 	_TICopyID 					; loop round
.466f					_TIEndCopy:
.466f	a9 24		lda #$24			lda 	#"$"
.4671	20 c4 46	jsr $46c4			jsr 	TIDCheckCopy
.4674	a9 23		lda #$23			lda 	#"#"
.4676	20 c4 46	jsr $46c4			jsr 	TIDCheckCopy
.4679	a9 28		lda #$28			lda 	#"("
.467b	20 c4 46	jsr $46c4			jsr 	TIDCheckCopy
.467e	20 01 45	jsr $4501			jsr 	TokenSearch 				; is it a token
.4681	b0 3f		bcs $46c2			bcs 	_TIExit 					; if so, then exit.
.4683	5a		phy				phy
.4684	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4686	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.4689	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.468c	c9 28		cmp #$28			cmp 	#"("
.468e	d0 02		bne $4692			bne 	_TINotArray
.4690	ca		dex				dex 								; yes, remove it and convert to array.
.4691	c8		iny				iny
.4692					_TINotArray:
.4692	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4695	c9 24		cmp #$24			cmp 	#"$"
.4697	d0 03		bne $469c			bne 	_TINotString
.4699	ca		dex				dex
.469a	c8		iny				iny
.469b	c8		iny				iny
.469c					_TINotString:
.469c	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.469f	c9 23		cmp #$23			cmp 	#"#"
.46a1	d0 05		bne $46a8			bne 	_TINotFloat
.46a3	ca		dex				dex
.46a4	c8		iny				iny
.46a5	c8		iny				iny
.46a6	c8		iny				iny
.46a7	c8		iny				iny
.46a8					_TINotFloat:
.46a8	e8		inx				inx 								; write end marker for identifier.
.46a9	98		tya				tya
.46aa	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46ad	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.46b0	a2 01		ldx #$01			ldx 	#1
.46b2					_TIOutput:
.46b2	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.46b5	29 3f		and #$3f			and 	#$3F
.46b7	48		pha				pha
.46b8	20 ed 45	jsr $45ed			jsr 	TokenWrite
.46bb	e8		inx				inx
.46bc	68		pla				pla
.46bd	c9 3a		cmp #$3a			cmp 	#$3A
.46bf	90 f1		bcc $46b2			bcc 	_TIOutput
.46c1	7a		ply				ply
.46c2					_TIExit:
.46c2	38		sec				sec 								; this can't fail.
.46c3	60		rts				rts
.46c4					TIDCheckCopy:
.46c4	d1 28		cmp ($28),y			cmp 	(codePtr),y
.46c6	d0 08		bne $46d0			bne 	_TIDCCExit
.46c8	e8		inx				inx
.46c9	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46cc	8e cf 0a	stx $0acf			stx 	convertBuffer
.46cf	c8		iny				iny
.46d0					_TIDCCExit:
.46d0	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.46d1					TokeniseInteger:
.46d1	85 2c		sta $2c				sta 	temp1 						; save base
.46d3	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.46d5	8e cf 0a	stx $0acf			stx 	convertBuffer
.46d8					_TIGetChars:
.46d8	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.46da	c9 30		cmp #$30			cmp 	#"0"
.46dc	90 1f		bcc $46fd			bcc 	_TIEndGet
.46de	c9 3a		cmp #$3a			cmp 	#"9"+1
.46e0	90 10		bcc $46f2			bcc 	_TIHaveChar
.46e2	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.46e4	c9 0a		cmp #$0a			cmp 	#10
.46e6	f0 15		beq $46fd			beq 	_TIEndGet
.46e8	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.46ea	c9 41		cmp #$41			cmp 	#"A"
.46ec	90 0f		bcc $46fd			bcc 	_TIEndGet
.46ee	c9 5b		cmp #$5b			cmp 	#"Z"+1
.46f0	b0 0b		bcs $46fd			bcs 	_TIEndGet
.46f2					_TIHaveChar:
.46f2	e8		inx				inx 								; write into buffer.
.46f3	8e cf 0a	stx $0acf			stx 	convertBuffer
.46f6	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46f9	c8		iny				iny 								; next char
.46fa	4c d8 46	jmp $46d8			jmp 	_TIGetChars
.46fd					_TIEndGet:
.46fd	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.46ff	f0 1a		beq $471b			beq 	_TIFail
.4701	5a		phy				phy
.4702	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4704	85 2a		sta $2a				sta 	temp0
.4706	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4708	85 2b		sta $2b				sta 	1+(temp0)
.470a	a9 00		lda #$00			lda 	#0 							; stack level 0
.470c	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.470e	a2 1a		ldx #$1a		ldx	#26
.4710	20 29 40	jsr $4029		jsr	mainHandler
.4713	7a		ply				ply
.4714	90 05		bcc $471b			bcc 	_TIFail 					; didn't convert.
.4716	20 1d 47	jsr $471d			jsr 	TIRecursiveOut 				; recursive output ?
.4719	38		sec				sec
.471a	60		rts				rts
.471b					_TIFail:
.471b	18		clc				clc
.471c	60		rts				rts
.471d					TIRecursiveOut:
.471d	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.471f	29 3f		and #$3f			and 	#$3F
.4721	09 40		ora #$40			ora 	#$40
.4723	48		pha				pha
.4724	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.4726	29 c0		and #$c0			and 	#$C0
.4728	05 a0		ora $a0				ora 	esInt1
.472a	05 a8		ora $a8				ora 	esInt2
.472c	05 b0		ora $b0				ora 	esInt3
.472e	f0 10		beq $4740			beq 	_TIRONoRecursion
.4730	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4732					_TIROShift:
.4732	46 b0		lsr $b0				lsr 	esInt3
.4734	66 a8		ror $a8				ror 	esInt2
.4736	66 a0		ror $a0				ror 	esInt1
.4738	66 98		ror $98				ror 	esInt0
.473a	ca		dex				dex
.473b	d0 f5		bne $4732			bne 	_TIROShift
.473d	20 1d 47	jsr $471d			jsr 	TIRecursiveOut 				; call recursively
.4740					_TIRONoRecursion:
.4740	68		pla				pla 								; pull the old bit.
.4741	4c ed 45	jmp $45ed			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4744					TokenisePunctuation:
.4744	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4746	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4749	c8		iny				iny
.474a	b1 28		lda ($28),y			lda 	(codePtr),y
.474c	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.474f	c8		iny				iny 								; Y is +2
.4750	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4752	8d cf 0a	sta $0acf			sta 	convertBuffer
.4755	20 01 45	jsr $4501			jsr 	TokenSearch 				; search for that token.
.4758	b0 0a		bcs $4764			bcs 	_TIFound
.475a	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.475d	88		dey				dey 								; Y is now +1
.475e	20 01 45	jsr $4501			jsr 	TokenSearch 				; search for that token.
.4761	b0 01		bcs $4764			bcs 	_TIFound
.4763	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4764					_TIFound:
.4764	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4765					TokeniseString:
.4765	c8		iny				iny 								; skip opening quote
.4766	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4768	84 2a		sty $2a				sty 	temp0 						; save start.
.476a					_TSGetLength:
.476a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.476c	f0 21		beq $478f			beq 	_TSFail						; end of line, fail
.476e	c8		iny				iny
.476f	e8		inx				inx
.4770	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4772	d0 f6		bne $476a			bne 	_TSGetLength
.4774	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4776	20 ed 45	jsr $45ed			jsr 	TokenWrite
.4779	8a		txa				txa 								; output length
.477a	20 ed 45	jsr $45ed			jsr 	TokenWrite
.477d	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.477f	e0 00		cpx #$00			cpx 	#0 							; check ended
.4781	f0 09		beq $478c			beq 	_TSExit
.4783					_TSOutput:
.4783	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4785	20 ed 45	jsr $45ed			jsr 	TokenWrite
.4788	c8		iny				iny
.4789	ca		dex				dex
.478a	d0 f7		bne $4783			bne 	_TSOutput
.478c					_TSExit:
.478c	c8		iny				iny 								; skip ending quote
.478d	38		sec				sec 								; return CS.
.478e	60		rts				rts
.478f					_TSFail:
.478f	18		clc				clc
.4790	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4791					TokenTableAddress:
>4791	99 47						.word 	Group0Text
>4793	76 49						.word 	Group1Text
>4795	c3 4a						.word 	Group2Text
>4797	14 4b						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4799					Group0Text:
>4799	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>479d	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>47a0	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>47a4	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>47a7	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>47aa	01 be					.byte $01,$be                          ; $8b >
>47ac	01 bc					.byte $01,$bc                          ; $8c <
>47ae	01 bd					.byte $01,$bd                          ; $8d =
>47b0	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>47b3	01 ab					.byte $01,$ab                          ; $8f +
>47b5	01 ad					.byte $01,$ad                          ; $90 -
>47b7	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>47ba	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>47bd	01 aa					.byte $01,$aa                          ; $93 *
>47bf	01 af					.byte $01,$af                          ; $94 /
>47c1	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>47c5	01 de					.byte $01,$de                          ; $96 ^
>47c7	01 a1					.byte $01,$a1                          ; $97 !
>47c9	01 bf					.byte $01,$bf                          ; $98 ?
>47cb	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>47d2	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>47d8	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>47dc	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>47df	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>47e7	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>47ed	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>47f2	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>47f7	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>47fc	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>4802	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>480a	01 a8					.byte $01,$a8                          ; $a4 (
>480c	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>4811	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>4816	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>481b	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>4823	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4828	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>482d	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4833	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4838	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>483d	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4842	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4849	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4850	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4855	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>485c	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4863	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4869	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4870	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4876	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>487e	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4884	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4889	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>488f	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4895	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>489b	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>48a0	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>48a5	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>48ac	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>48b3	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>48bb	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>48c3	01 c0					.byte $01,$c0                          ; $c3 @
>48c5	01 fe					.byte $01,$fe                          ; $c4 ~
>48c7	01 a6					.byte $01,$a6                          ; $c5 &
>48c9	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>48cf	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>48d7	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>48db	01 a9					.byte $01,$a9                          ; $c9 )
>48dd	01 ba					.byte $01,$ba                          ; $ca :
>48df	01 ac					.byte $01,$ac                          ; $cb ,
>48e1	01 bb					.byte $01,$bb                          ; $cc ;
>48e3	01 a7					.byte $01,$a7                          ; $cd '
>48e5	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>48e8	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>48ed	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>48f2	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>48f8	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>48fc	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>4900	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>4904	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>490a	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>490f	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4913	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4919	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>491e	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4924	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4927	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>492c	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4933	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4938	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>493d	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4942	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4946	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>494c	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4950	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4957	01 ae					.byte $01,$ae                          ; $e5 .
>4959	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>495e	01 a3					.byte $01,$a3                          ; $e7 #
>4960	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4966	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>496b	04 54 59 50 c5				.byte $04,$54,$59,$50,$c5              ; $ea type
>4970	04 54 49 4d c5				.byte $04,$54,$49,$4d,$c5              ; $eb time
>4975	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4976					Group1Text:
>4976	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>497b	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4980	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4985	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4989	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>498f	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4993	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4998	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>49a0	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>49a4	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>49a9	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>49ae	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>49b3	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>49b9	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>49c0	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>49c4	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>49ca	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>49ce	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>49d2	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>49d6	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>49da	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>49de	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>49e2	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>49e6	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>49ea	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>49ee	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>49f2	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>49f6	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>49fa	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>49fe	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>4a02	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4a06	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4a0a	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>4a0e	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4a12	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4a16	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4a1a	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>4a1e	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4a22	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4a26	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4a2a	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4a2e	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4a32	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4a36	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4a3a	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4a3e	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4a42	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4a46	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4a4a	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4a4e	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4a52	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4a56	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4a5a	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4a5e	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4a62	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4a66	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4a6a	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4a6e	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4a72	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4a76	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4a7a	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4a7e	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4a82	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4a86	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4a8a	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4a8e	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4a92	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4a96	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4a9a	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4a9e	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4aa2	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4aa6	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4aaa	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4aae	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4ab2	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4ab6	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4aba	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4abe	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4ac2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4ac3					Group2Text:
>4ac3	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4ac9	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4acf	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4ad5	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4ada	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4ae2	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4ae9	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>4aed	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>4af2	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>4af8	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>4afd	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>4b02	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4b07	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>4b0d	05 53 4f 55 4e c4			.byte $05,$53,$4f,$55,$4e,$c4          ; $93 sound
>4b13	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4b14					Group3Text:
>4b14	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4b1b	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4b22	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4b2a	58 a8
>4b2c	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4b34	59 a8
>4b36	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4b3b	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4b42	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4b49	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4b50	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4b57	08 50 4c 41 59 49 4e 47			.byte $08,$50,$4c,$41,$59,$49,$4e,$47,$a8 ; $8f playing(
>4b5f	a8
>4b60	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4b61					tokeniserHandler:
.4b61	7c 64 4b	jmp ($4b64,x)			jmp 	(tokeniserVectors,x)
.4b64					tokeniserVectors:
>4b64	70 4b					.word _DummyControlHandler ; index 0
>4b66	f6 42					.word Detokenise           ; index 2
>4b68	ea 42					.word ListLine             ; index 4
>4b6a	6c 45					.word TokTest              ; index 6
>4b6c	8c 45					.word Tokenise             ; index 8
>4b6e	8f 45					.word TokeniseASCIIZ       ; index 10
.4b70					_DummyControlHandler:
.4b70	60		rts			rts

;******  Return to file: basic.asm

.4b71					section_end_tokeniser:
.4b71					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4b71					AccessArray:
.4b71	da		phx				phx
.4b72	e8		inx				inx
.4b73	20 37 4c	jsr $4c37			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4b76	fa		plx				plx
.4b77	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4b79	85 2a		sta $2a				sta 	temp0
.4b7b	b5 a0		lda $a0,x			lda 	esInt1,x
.4b7d	85 2b		sta $2b				sta 	temp0+1
.4b7f	da		phx				phx
.4b80	5a		phy				phy
.4b81					_AAFollow:
.4b81	a0 00		ldy #$00			ldy 	#0
.4b83	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b85	48		pha				pha
.4b86	c8		iny				iny
.4b87	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b89	85 2b		sta $2b				sta 	temp0+1
.4b8b	68		pla				pla
.4b8c	85 2a		sta $2a				sta 	temp0
.4b8e	e8		inx				inx 								; advance to next stack slot.
.4b8f	a0 00		ldy #$00			ldy 	#0
.4b91	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4b93	d5 98		cmp $98,x			cmp 	esInt0,x
.4b95	c8		iny				iny
.4b96	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4b98	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4b9a	29 7f		and #$7f			and 	#$7F
.4b9c	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4b9e	90 4e		bcc $4bee			bcc 	_AABadIndex 				; failed on index if max index < required.
.4ba0	18		clc				clc
.4ba1	a5 2a		lda $2a				lda 	temp0
.4ba3	69 02		adc #$02			adc 	#2
.4ba5	85 2a		sta $2a				sta 	temp0
.4ba7	90 02		bcc $4bab			bcc 	_AANoCarry
.4ba9	e6 2b		inc $2b				inc 	temp0+1
.4bab					_AANoCarry:
.4bab	b5 98		lda $98,x			lda 	esInt0,x
.4bad	85 2e		sta $2e				sta 	temp2
.4baf	b5 a0		lda $a0,x			lda 	esInt1,x
.4bb1	85 2f		sta $2f				sta 	temp2+1
.4bb3	ac dd 0e	ldy $0edd			ldy 	varType
.4bb6	b9 91 4c	lda $4c91,y			lda 	CAActualSize-$3A,y
.4bb9	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4bbb	30 02		bmi $4bbf			bmi 	_AANotPointer
.4bbd	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4bbf					_AANotPointer:
.4bbf	20 3b 4d	jsr $4d3b			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4bc2	18		clc				clc
.4bc3	a5 2a		lda $2a				lda 	temp0
.4bc5	65 2e		adc $2e				adc 	temp2
.4bc7	85 2a		sta $2a				sta 	temp0
.4bc9	a5 2b		lda $2b				lda 	temp0+1
.4bcb	65 2f		adc $2f				adc 	temp2+1
.4bcd	85 2b		sta $2b				sta 	temp0+1
.4bcf	b5 91		lda $91,x			lda 	esType+1,x
.4bd1	30 07		bmi $4bda			bmi 	_AAUsedAllIndices
.4bd3	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4bd5	10 12		bpl $4be9			bpl 	_AABadDepth 				; no, too many indexes.
.4bd7	4c 81 4b	jmp $4b81			jmp 	_AAFollow 					; otherwise follow them.
.4bda					_AAUsedAllIndices:
.4bda	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4bdc	30 0b		bmi $4be9			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4bde	7a		ply				ply
.4bdf	fa		plx				plx
.4be0	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4be2	95 98		sta $98,x			sta 	esInt0,x
.4be4	a5 2b		lda $2b				lda 	temp0+1
.4be6	95 a0		sta $a0,x			sta 	esInt1,x
.4be8	60		rts				rts
.4be9					_AABadDepth:
.4be9	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4beb	20 27 15	jsr $1527		jsr	errorHandler
.4bee					_AABadIndex:
.4bee	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4bf0	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0edb					elementSize:
>0edb							.fill	 1
.4bf3					CreateArray:
.4bf3	20 c8 4d	jsr $4dc8			jsr 	AccessSetup 				; set up the basic stuff, hashtables and so on.
.4bf6	ad dd 0e	lda $0edd			lda 	varType 					; is the variable type an array
.4bf9	4a		lsr a				lsr 	a
.4bfa	90 36		bcc $4c32			bcc 	CANotArray 					; no, cause an error.
.4bfc	20 ca 4e	jsr $4eca			jsr 	FindVariable 				; does the variable exist already
.4bff	b0 2c		bcs $4c2d			bcs 	CAFound 					; if so, error cannot redefine it.
.4c01	20 03 4e	jsr $4e03			jsr 	CreateVariable 				; create the variable entry.
.4c04	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4c06	48		pha				pha
.4c07	a5 2b		lda $2b				lda 	temp0+1
.4c09	48		pha				pha
.4c0a	a2 00		ldx #$00			ldx 	#0
.4c0c	20 37 4c	jsr $4c37			jsr 	GetArrayDimensions 			; get the array dimensions
.4c0f	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4c11	20 67 4c	jsr $4c67			jsr 	CreateArrayLevel 			; level to YA
.4c14	aa		tax				tax 								; level now in YX
.4c15	68		pla				pla 								; get address back to temp0 to write.
.4c16	85 2b		sta $2b				sta 	temp0+1
.4c18	68		pla				pla
.4c19	85 2a		sta $2a				sta 	temp0
.4c1b	98		tya				tya 								; write YX there (address in original record)
.4c1c	a0 06		ldy #$06			ldy 	#6
.4c1e	91 2a		sta ($2a),y			sta 	(temp0),y
.4c20	88		dey				dey
.4c21	8a		txa				txa
.4c22	91 2a		sta ($2a),y			sta 	(temp0),y
.4c24	ac de 0e	ldy $0ede			ldy 	varEnd 						; restore Y and exit.
.4c27	60		rts				rts
.4c28					CASize:
.4c28	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4c2a	20 27 15	jsr $1527		jsr	errorHandler
.4c2d					CAFound:
.4c2d	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4c2f	20 27 15	jsr $1527		jsr	errorHandler
.4c32					CANotArray:
.4c32	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4c34	20 27 15	jsr $1527		jsr	errorHandler
.4c37					GetArrayDimensions:
.4c37	ad dd 0e	lda $0edd			lda 	varType 					; push variable type on the stack.
.4c3a	48		pha				pha
.4c3b	ac de 0e	ldy $0ede			ldy 	varEnd
.4c3e					_CAGetDimensions:
.4c3e	8a		txa				txa 								; get the next level
.4c3f	a2 0a		ldx #$0a		ldx	#10
.4c41	20 29 40	jsr $4029		jsr	mainHandler
.4c44	aa		tax				tax
.4c45	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4c47	29 e0		and #$e0			and 	#$E0
.4c49	15 a8		ora $a8,x			ora 	esInt2,x
.4c4b	15 b0		ora $b0,x			ora 	esInt3,x
.4c4d	d0 d9		bne $4c28			bne 	CASize
.4c4f	e8		inx				inx 								; next level.
.4c50	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4c52	c8		iny				iny
.4c53	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4c55	f0 e7		beq $4c3e			beq 	_CAGetDimensions
.4c57	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4c59	d0 cd		bne $4c28			bne 	CASize
.4c5b	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4c5d	95 90		sta $90,x			sta 	esType,x 					; dimensions there are, it marks the end.
.4c5f	68		pla				pla 								; restore the variable type ($3A-$3F)
.4c60	8d dd 0e	sta $0edd			sta 	varType
.4c63	8c de 0e	sty $0ede			sty 	varEnd 						; save exit Y value, after dimensions
.4c66	60		rts				rts
.4c67					CreateArrayLevel:
.4c67	ac dd 0e	ldy $0edd			ldy 	varType
.4c6a	b9 91 4c	lda $4c91,y			lda 	CAActualSize-$3A,y 			; $3A is the first type marker.
.4c6d	8d db 0e	sta $0edb			sta 	elementSize 				; get element size this level.
.4c70	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4c72	30 05		bmi $4c79			bmi 	_CANotPointer 				; then its values, keep elementsize
.4c74	a9 02		lda #$02			lda 	#2 							; use array of pointers, each element is 2.
.4c76	8d db 0e	sta $0edb			sta 	elementSize
.4c79					_CANotPointer:
.4c79	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4c7b	85 2a		sta $2a				sta 	temp0
.4c7d	48		pha				pha
.4c7e	a5 36		lda $36				lda 	lowMemory+1
.4c80	85 2b		sta $2b				sta 	temp0+1
.4c82	48		pha				pha
.4c83	20 04 4d	jsr $4d04			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4c86	a0 00		ldy #$00			ldy 	#0
.4c88	b5 98		lda $98,x			lda 	esInt0,x
.4c8a	91 2a		sta ($2a),y			sta 	(temp0),y
.4c8c	c8		iny				iny
.4c8d	b5 a0		lda $a0,x			lda 	esInt1,x
.4c8f	91 2a		sta ($2a),y			sta 	(temp0),y
.4c91	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4c93	30 06		bmi $4c9b			bmi 	_CALNotLast
.4c95	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4c97	09 80		ora #$80			ora 	#$80
.4c99	91 2a		sta ($2a),y			sta 	(temp0),y
.4c9b					_CALNotLast:
.4c9b	a9 02		lda #$02			lda 	#2
.4c9d	20 c1 4c	jsr $4cc1			jsr 	_CALAddTemp0
.4ca0	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4ca2	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4ca4	b5 a0		lda $a0,x			lda 	esInt1,x
.4ca6	95 b0		sta $b0,x			sta 	esInt3,x
.4ca8					_CALClear:
.4ca8	20 d1 4c	jsr $4cd1			jsr 	EraseOneElement
.4cab	ad db 0e	lda $0edb			lda 	elementSize 				; move to next element
.4cae	20 c1 4c	jsr $4cc1			jsr 	_CALAddTemp0
.4cb1	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4cb3	d0 02		bne $4cb7			bne 	_CALNoBorrow
.4cb5	d6 b0		dec $b0,x			dec 	esInt3,x
.4cb7					_CALNoBorrow:
.4cb7	d6 a8		dec $a8,x			dec 	esInt2,x
.4cb9	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4cbb	10 eb		bpl $4ca8			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4cbd	68		pla				pla 								; restore the start of this into YA.
.4cbe	a8		tay				tay
.4cbf	68		pla				pla
.4cc0	60		rts				rts
.4cc1					_CALAddTemp0:
.4cc1	18		clc				clc
.4cc2	65 2a		adc $2a				adc 	temp0
.4cc4	85 2a		sta $2a				sta 	temp0
.4cc6	90 02		bcc $4cca			bcc 	_CALANoCarry
.4cc8	e6 2b		inc $2b				inc 	temp0+1
.4cca					_CALANoCarry:
.4cca	60		rts				rts
.4ccb					CAActualSize:
>4ccb	04 04						.byte 	VarISize,VarISize
>4ccd	02 02						.byte 	VarSSize,VarSSize
>4ccf	06 06						.byte 	VarFSize,VarFSize
.4cd1					EraseOneElement:
.4cd1	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4cd3	10 09		bpl $4cde			bpl 	_EOESubArray
.4cd5	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4cd7	ad dd 0e	lda $0edd			lda 	varType
.4cda	20 6c 4e	jsr $4e6c			jsr 	ZeroTemp0Y
.4cdd	60		rts				rts
.4cde					_EOESubArray:
.4cde	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4ce0	48		pha				pha
.4ce1	a5 2b		lda $2b				lda 	temp0+1
.4ce3	48		pha				pha
.4ce4	ad db 0e	lda $0edb			lda 	elementSize 				; save element size
.4ce7	48		pha				pha
.4ce8	e8		inx				inx 								; create at next level
.4ce9	20 67 4c	jsr $4c67			jsr 	CreateArrayLevel
.4cec	ca		dex				dex
.4ced	85 32		sta $32				sta 	tempShort 					; save A
.4cef	68		pla				pla  								; restore element size.
.4cf0	8d db 0e	sta $0edb			sta 	elementSize
.4cf3	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4cf4	85 2b		sta $2b				sta 	temp0+1
.4cf6	68		pla				pla
.4cf7	85 2a		sta $2a				sta 	temp0
.4cf9	98		tya				tya 								; store Y/A there
.4cfa	a0 01		ldy #$01			ldy 	#1
.4cfc	91 2a		sta ($2a),y			sta 	(temp0),y
.4cfe	a5 32		lda $32				lda 	tempShort
.4d00	88		dey				dey
.4d01	91 2a		sta ($2a),y			sta 	(temp0),y
.4d03	60		rts				rts
.4d04					AllocateArraySpace:
.4d04	18		clc				clc 								; element count + 1 => temp2.
.4d05	b5 98		lda $98,x			lda 	esInt0,x
.4d07	69 01		adc #$01			adc 	#1
.4d09	85 2e		sta $2e				sta 	temp2
.4d0b	b5 a0		lda $a0,x			lda 	esInt1,x
.4d0d	69 00		adc #$00			adc 	#0
.4d0f	85 2f		sta $2f				sta 	temp2+1
.4d11	ad db 0e	lda $0edb			lda 	elementSize 				; bytes per element
.4d14	20 3b 4d	jsr $4d3b			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4d17	18		clc				clc 								; add 2 for 'max element' byte.
.4d18	a5 2e		lda $2e				lda 	temp2
.4d1a	69 02		adc #$02			adc 	#2
.4d1c	85 2e		sta $2e				sta 	temp2
.4d1e	90 02		bcc $4d22			bcc 	_AASNoCarry
.4d20	e6 2f		inc $2f				inc 	temp2+1
.4d22					_AASNoCarry:
.4d22	18		clc				clc 								; add to low memory, allocating space.
.4d23	a5 35		lda $35				lda 	lowMemory
.4d25	65 2e		adc $2e				adc 	temp2
.4d27	85 35		sta $35				sta 	lowMemory
.4d29	a5 36		lda $36				lda 	lowMemory+1
.4d2b	65 2f		adc $2f				adc 	temp2+1
.4d2d	85 36		sta $36				sta 	lowMemory+1
.4d2f	b0 05		bcs $4d36			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4d31	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4d33	b0 01		bcs $4d36			bcs 	_AASFail
.4d35	60		rts				rts
.4d36					_AASFail:
.4d36	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4d38	20 27 15	jsr $1527		jsr	errorHandler
.4d3b					MultiplyTemp2ByA:
.4d3b	48		pha				pha
.4d3c	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4d3e	85 30		sta $30				sta 	temp3
.4d40	a5 2f		lda $2f				lda 	temp2+1
.4d42	85 31		sta $31				sta 	temp3+1
.4d44	68		pla				pla
.4d45	06 2e		asl $2e				asl 	temp2 						; double it.
.4d47	26 2f		rol $2f				rol 	temp2+1
.4d49	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4d4b	f0 15		beq $4d62			beq 	_MTBAExit
.4d4d	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4d4f	d0 0d		bne $4d5e			bne 	_MTBANotFloat
.4d51	18		clc				clc 								; so this will make it x 3
.4d52	a5 2e		lda $2e				lda 	temp2
.4d54	65 30		adc $30				adc 	temp3
.4d56	85 2e		sta $2e				sta 	temp2
.4d58	a5 2f		lda $2f				lda 	temp2+1
.4d5a	65 31		adc $31				adc 	temp3+1
.4d5c	85 2f		sta $2f				sta 	temp2+1
.4d5e					_MTBANotFloat:
.4d5e	06 2e		asl $2e				asl 	temp2 						; double it.
.4d60	26 2f		rol $2f				rol 	temp2+1
.4d62					_MTBAExit:
.4d62	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0edc					varHash:
>0edc							.fill	1
.0edd					varType:
>0edd							.fill 	1
.0ede					varEnd:
>0ede							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4d63					AccessVariable:
.4d63	aa		tax				tax 								; stack in X
.4d64	c8		iny				iny									; look at second character
.4d65	b1 28		lda ($28),y			lda 	(codePtr),y
.4d67	88		dey				dey
.4d68	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4d6a	d0 15		bne $4d81			bne 	_AVLong 					; no, always use the hash tables.
.4d6c	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4d6e	38		sec				sec 	 							; make it 0-25
.4d6f	e9 01		sbc #$01			sbc 	#1
.4d71	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4d72	0a		asl a				asl 	a
.4d73	95 98		sta $98,x			sta 	esInt0,x
.4d75	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4d77	95 a0		sta $a0,x			sta 	esInt1,x
.4d79	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4d7b	95 90		sta $90,x			sta 	esType,x
.4d7d	c8		iny				iny 								; skip over the variable reference in the code.
.4d7e	c8		iny				iny  								; (1 letter, 1 type)
.4d7f	8a		txa				txa 								; stack in A to return.
.4d80	60		rts				rts
.4d81					_AVLong:
.4d81	da		phx				phx
.4d82	20 c8 4d	jsr $4dc8			jsr 	AccessSetup 				; set up the basic information we need for later
.4d85	20 ca 4e	jsr $4eca			jsr 	FindVariable 				; does the variable exist already ?
.4d88	b0 0e		bcs $4d98			bcs 	_AVFound 					; yes, then its found
.4d8a	ad dd 0e	lda $0edd			lda 	varType 					; otherwise, is the variable type an array
.4d8d	4a		lsr a				lsr 	a
.4d8e	90 05		bcc $4d95			bcc 	_AVCanCreate 				; if not, we can autocreate
.4d90	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4d92	20 27 15	jsr $1527		jsr	errorHandler
.4d95					_AVCanCreate:
.4d95	20 03 4e	jsr $4e03			jsr 	CreateVariable 				; variable does not exist, create it.
.4d98					_AVFound:
.4d98	fa		plx				plx
.4d99	18		clc				clc 								; copy temp0 (variable record address)
.4d9a	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4d9c	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4d9e	95 98		sta $98,x			sta 	esInt0,x
.4da0	a5 2b		lda $2b				lda 	temp0+1
.4da2	69 00		adc #$00			adc 	#0
.4da4	95 a0		sta $a0,x			sta 	esInt1,x
.4da6	a9 00		lda #$00			lda 	#0
.4da8	95 a8		sta $a8,x			sta 	esInt2,x
.4daa	95 b0		sta $b0,x			sta 	esInt3,x
.4dac	ac dd 0e	ldy $0edd			ldy 	varType 					; get the type ID from the type.
.4daf	b9 88 4d	lda $4d88,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4db2	95 90		sta $90,x			sta 	esType,x
.4db4	ac de 0e	ldy $0ede			ldy 	varEnd 						; restore Y
.4db7	ad dd 0e	lda $0edd			lda 	VarType 					; get variable type, put LSB into C
.4dba	4a		lsr a				lsr 	a
.4dbb	90 03		bcc $4dc0			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4dbd	20 71 4b	jsr $4b71			jsr 	AccessArray 				; array lookup. if LSB was set.
.4dc0					_AVNotArray:
.4dc0	8a		txa				txa 								; return stack in A and return
.4dc1	60		rts				rts
.4dc2					_AVTypeTable:
>4dc2	80 80						.byte 	$80,$80						; integer
>4dc4	c0 c0						.byte 	$C0,$C0 					; string
>4dc6	81 81						.byte 	$81,$81 					; float
.4dc8					AccessSetup:
.4dc8	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4dca	8d dc 0e	sta $0edc			sta 	varHash
.4dcd	5a		phy				phy
.4dce	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4dd0	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4dd2	b0 0b		bcs $4ddf			bcs 	_ASComplete
.4dd4	18		clc				clc 								; add to the hash. Might improve this.
.4dd5	6d dc 0e	adc $0edc			adc 	varHash
.4dd8	8d dc 0e	sta $0edc			sta 	varHash
.4ddb	c8		iny				iny 								; next character
.4ddc	4c ce 4d	jmp $4dce			jmp 	_ASLoop
.4ddf					_ASComplete:
.4ddf	8d dd 0e	sta $0edd			sta 	varType 					; save variable type byte
.4de2	c8		iny				iny
.4de3	8c de 0e	sty $0ede			sty 	varEnd 						; save the ending position.
.4de6	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4de7	e9 3a		sbc #$3a			sbc 	#$3A
.4de9	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4dea	0a		asl a				asl 	a
.4deb	0a		asl a				asl 	a
.4dec	0a		asl a				asl 	a 							; 2 bytes/word
.4ded	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4def	ad dc 0e	lda $0edc			lda 	varHash 					; get hash
.4df2	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4df4	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4df5	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4df7	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4df9	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4dfb	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4dfd	69 00		adc #$00			adc 	#0
.4dff	85 3c		sta $3c				sta 	hashList+1
.4e01	7a		ply				ply
.4e02	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4e03					CreateVariable:
.4e03	98		tya				tya 								; push Y on the stack twice.
.4e04	48		pha				pha									; position in code of the new variable.
.4e05	48		pha				pha
.4e06	ae dd 0e	ldx $0edd			ldx 	varType 					; get var type 0-5 from the var type
.4e09	bd 2c 4e	lda $4e2c,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4e0c	48		pha				pha 								; save length
.4e0d	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4e0f	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4e11	a5 36		lda $36				lda 	lowMemory+1
.4e13	85 2b		sta $2b				sta 	temp0+1
.4e15	68		pla				pla 								; get length
.4e16	18		clc				clc 								; add to low memory.
.4e17	65 35		adc $35				adc 	lowMemory
.4e19	85 35		sta $35				sta 	lowMemory
.4e1b	90 08		bcc $4e25			bcc 	_CVNoCarry
.4e1d	e6 36		inc $36				inc 	lowMemory+1
.4e1f	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4e21	c5 34		cmp $34				cmp 	highMemory+1
.4e23	b0 3c		bcs $4e61			bcs 	_CVMemory
.4e25					_CVNoCarry:
.4e25	ad dc 0e	lda $0edc			lda 	varHash 					; store hash at offset 4.
.4e28	a0 04		ldy #$04			ldy 	#4
.4e2a	91 2a		sta ($2a),y			sta 	(temp0),y
.4e2c	68		pla				pla 								; offset, work out where the variable name is.
.4e2d	18		clc				clc
.4e2e	65 28		adc $28				adc 	codePtr
.4e30	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4e32	91 2a		sta ($2a),y			sta 	(temp0),y
.4e34	a5 29		lda $29				lda 	codePtr+1
.4e36	69 00		adc #$00			adc 	#0
.4e38	c8		iny				iny
.4e39	91 2a		sta ($2a),y			sta 	(temp0),y
.4e3b	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4e3e	b0 03		bcs $4e43			bcs 	_CVNotImmediate
.4e40	20 a0 4e	jsr $4ea0			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4e43					_CVNotImmediate:
.4e43	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4e45	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4e47	91 2a		sta ($2a),y			sta 	(temp0),y
.4e49	c8		iny				iny
.4e4a	b1 3b		lda ($3b),y			lda 	(hashList),y
.4e4c	91 2a		sta ($2a),y			sta 	(temp0),y
.4e4e	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4e50	91 3b		sta ($3b),y			sta 	(hashList),y
.4e52	88		dey				dey
.4e53	a5 2a		lda $2a				lda 	temp0
.4e55	91 3b		sta ($3b),y			sta 	(hashList),y
.4e57	ad dd 0e	lda $0edd			lda 	varType 					; type in A
.4e5a	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4e5c	20 6c 4e	jsr $4e6c			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4e5f	7a		ply				ply
.4e60	60		rts				rts
.4e61					_CVMemory:
.4e61	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4e63	20 27 15	jsr $1527		jsr	errorHandler
>4e66	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4e68	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4e6a	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4e6c					ZeroTemp0Y:
.4e6c	4a		lsr a				lsr 	a 							; bit 0 in carry
.4e6d	0a		asl a				asl 	a
.4e6e	b0 17		bcs $4e87			bcs 	_ZTExit 					; we don't initialise arrays.
.4e70	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4e72	f0 14		beq $4e88			beq 	_ZTWriteNullString 			; write "" string
.4e74	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4e76	f0 20		beq $4e98			beq 	_ZTWriteFloat
.4e78	5a		phy				phy
.4e79	a9 00		lda #$00			lda 	#0
.4e7b	91 2a		sta ($2a),y			sta 	(temp0),y
.4e7d	c8		iny				iny
.4e7e	91 2a		sta ($2a),y			sta 	(temp0),y
.4e80	c8		iny				iny
.4e81	91 2a		sta ($2a),y			sta 	(temp0),y
.4e83	c8		iny				iny
.4e84	91 2a		sta ($2a),y			sta 	(temp0),y
.4e86	7a		ply				ply
.4e87					_ZTExit:
.4e87	60		rts				rts
.4e88					_ZTWriteNullString:
.4e88	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4e8a	8d ce 0a	sta $0ace			sta 	NullString
.4e8d	a9 ce		lda #$ce			lda 	#NullString & $FF
.4e8f	91 2a		sta ($2a),y			sta 	(temp0),y
.4e91	a9 0a		lda #$0a			lda 	#NullString >> 8
.4e93	c8		iny				iny
.4e94	91 2a		sta ($2a),y			sta 	(temp0),y
.4e96	88		dey				dey
.4e97	60		rts				rts
.4e98					_ZTWriteFloat:
.4e98	da		phx				phx
.4e99	a2 20		ldx #$20		ldx	#32
.4e9b	20 da 27	jsr $27da		jsr	floatingpointHandler
.4e9e	fa		plx				plx
.4e9f	60		rts				rts
.4ea0					CloneVariableName:
.4ea0	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4ea2	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ea4	85 2e		sta $2e				sta 	temp2
.4ea6	c8		iny				iny
.4ea7	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ea9	85 2f		sta $2f				sta 	temp2+1
.4eab	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4ead	91 2a		sta ($2a),y			sta 	(temp0),y
.4eaf	88		dey				dey
.4eb0	a5 35		lda $35				lda 	lowMemory
.4eb2	91 2a		sta ($2a),y			sta 	(temp0),y
.4eb4	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4eb6					_CVNCopy:
.4eb6	b1 2e		lda ($2e),y			lda		(temp2),y
.4eb8	91 35		sta ($35),y			sta 	(lowMemory),y
.4eba	c8		iny				iny
.4ebb	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4ebd	90 f7		bcc $4eb6			bcc 	_CVNCopy
.4ebf	98		tya				tya 								; add Y to low memory
.4ec0	18		clc				clc
.4ec1	65 35		adc $35				adc 	lowMemory
.4ec3	85 35		sta $35				sta 	lowMemory
.4ec5	90 02		bcc $4ec9			bcc 	_CVNNoCarry
.4ec7	e6 36		inc $36				inc 	lowMemory+1
.4ec9					_CVNNoCarry:
.4ec9	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4eca					FindVariable:
.4eca	5a		phy				phy
.4ecb	98		tya				tya 								; point temp2 to the actual name
.4ecc	18		clc				clc 								; in memory of the variable being created
.4ecd	65 28		adc $28				adc 	codePtr
.4ecf	85 2e		sta $2e				sta 	temp2
.4ed1	a5 29		lda $29				lda 	codePtr+1
.4ed3	69 00		adc #$00			adc 	#0
.4ed5	85 2f		sta $2f				sta 	temp2+1
.4ed7	a0 00		ldy #$00			ldy 	#0
.4ed9	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4edb	85 2a		sta $2a				sta 	temp0
.4edd	a5 3c		lda $3c				lda 	hashList+1
.4edf	85 2b		sta $2b				sta 	temp0+1
.4ee1	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4ee3	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ee5	f0 2b		beq $4f12			beq 	_FVFail
.4ee7	aa		tax				tax
.4ee8	88		dey				dey		 							; get LSB
.4ee9	b1 2a		lda ($2a),y			lda 	(temp0),y
.4eeb	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4eed	86 2b		stx $2b				stx 	temp0+1
.4eef	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4ef1	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ef3	cd dc 0e	cmp $0edc			cmp 	varHash
.4ef6	d0 e9		bne $4ee1			bne 	_FVNext 					; if not, no point in checking the name.
.4ef8	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4ef9	b1 2a		lda ($2a),y			lda 	(temp0),y
.4efb	85 2d		sta $2d				sta 	temp1+1
.4efd	88		dey				dey
.4efe	b1 2a		lda ($2a),y			lda 	(temp0),y
.4f00	85 2c		sta $2c				sta 	temp1
.4f02	a0 00		ldy #$00			ldy 	#0
.4f04					_FVCheck:
.4f04	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4f06	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4f08	d0 d7		bne $4ee1			bne 	_FVNext		 				; fail if different.
.4f0a	c8		iny				iny
.4f0b	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4f0d	90 f5		bcc $4f04			bcc 	_FVCheck
.4f0f	7a		ply				ply
.4f10	38		sec				sec
.4f11	60		rts				rts
.4f12					_FVFail:
.4f12	7a		ply				ply
.4f13	18		clc				clc
.4f14	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4f15					HashTableReset:
.4f15	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4f17	a9 00		lda #$00			lda 	#0
.4f19					_HTRClear:
.4f19	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4f1c	ca		dex				dex
.4f1d	d0 fa		bne $4f19			bne 	_HTRClear
.4f1f	60		rts				rts

;******  Return to file: variable/variable.asm

.4f20					variableHandler:
.4f20	7c 23 4f	jmp ($4f23,x)			jmp 	(variableVectors,x)
.4f23					variableVectors:
>4f23	2b 4f					.word _DummyControlHandler ; index 0
>4f25	63 4d					.word AccessVariable       ; index 2
>4f27	f3 4b					.word CreateArray          ; index 4
>4f29	15 4f					.word HashTableReset       ; index 6
.4f2b					_DummyControlHandler:
.4f2b	60		rts			rts

;******  Return to file: basic.asm

.4f2c					section_end_variable:
.4f2c					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0edf					endStorage:
>4f2c							.align 	256
.5000					programMemory:
>4fff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.5000					section_end_footer:

;******  End of listing
