
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Apr  5 16:48:49 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=0					cputype = 0
=1					autorun=1
=0					coldstartnew=0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_TEXT                     = $8f ; text
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	9a 45						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4e		lda #$4e			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 6d 27	jsr $276d		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 6d 27	jsr $276d		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 c8 40	jsr $40c8		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 4c 49	jsr $494c		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 1d 4d	jsr $4d1d		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 4c 49	jsr $494c		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 0b 3e	jsr $3e0b		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 0b 3e	jsr $3e0b		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 0b 3e	jsr $3e0b		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 1d 4d	jsr $4d1d		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 0b 3e	jsr $3e0b		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 6d 27	jsr $276d		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 94 18	jmp ($1894,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c 7f 22	jmp $227f			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	1a 24					.word	Command_VPoke            ; $86 vpoke
>1888	1d 24					.word	Command_VDoke            ; $87 vdoke
>188a	f2 23					.word	Command_VLoad            ; $88 vload
>188c	91 22					.word	CommandMode              ; $89 mode
>188e	4e 23					.word	CommandPalette           ; $8a palette
>1890	b8 1f					.word	CommandSprite            ; $8b sprite
>1892	ce 1d					.word	CommandClg               ; $8c clg
>1894	c2 1a					.word	Command_Rect             ; $8d rect
>1896	ca 1a					.word	Command_Frame            ; $8e frame
>1898	85 23					.word	Command_Text             ; $8f text
>189a	af 1a					.word	Command_Plot             ; $90 plot
>189c	89 19					.word	Command_Line             ; $91 line
>189e	03 21					.word	Command_Paint            ; $92 paint

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a0					Group3Vectors:
>18a0	66 24					.word	Command_VPeek            ; $86 vpeek(
>18a2	69 24					.word	Command_VDeek            ; $87 vdeek(
>18a4	4f 22					.word	Sprite_GetX              ; $88 sprite.x(
>18a6	52 22					.word	Sprite_GetY              ; $89 sprite.y(
>18a8	fb 1e					.word	FunctionCollide          ; $8a hit(
>18aa	73 1e					.word	Unary_JoyX               ; $8b joy.x(
>18ac	76 1e					.word	Unary_JoyY               ; $8c joy.y(
>18ae	b1 1e					.word	Unary_JButton            ; $8d joy.b(
>18b0	46 1e					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b2					XEvaluateInteger:
.18b2	8a		txa				txa
.18b3	a2 0a		ldx #$0a		ldx	#10
.18b5	20 0b 3e	jsr $3e0b		jsr	mainHandler
.18b8	aa		tax				tax
.18b9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gModifiers:
.0bfc					gdInk:
>0bfc							.fill 	1
.0bfd					gdPaper:
>0bfd							.fill 	1
.0bfe					gdSize:
>0bfe							.fill 	1
.0bff					gdImage:
>0bff							.fill 	1
.0c00					gdFlip:
>0c00							.fill 	1
.0c01					gdXLimit:
>0c01							.fill 	2
.0c03					gdYLimit:
>0c03							.fill 	2
.0c05					gEndStorage:
.18ba					GResetStorage:
.18ba	8a		txa				txa
.18bb	48		pha				pha
.18bc	a2 1e		ldx #$1e			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18be	a9 00		lda #$00			lda 	#0
.18c0					_GRSLoop:
.18c0	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c3	ca		dex				dex
.18c4	10 fa		bpl $18c0			bpl 	_GRSLoop
.18c6	a9 01		lda #$01			lda 	#1
.18c8	8d fc 0b	sta $0bfc			sta 	gdInk
.18cb	8d fe 0b	sta $0bfe			sta 	gdSize
.18ce	68		pla				pla
.18cf	aa		tax				tax
.18d0	60		rts				rts
.18d1					GHandler:
.18d1	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18d4	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18d7	88		dey				dey 								; predecrement
.18d8					_GHLoopNext:
.18d8	c8		iny				iny									; advance one character
.18d9					_GHLoop:
.18d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18db	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18dd	f0 f9		beq $18d8			beq 	_GHLoopNext
.18df	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18e1	f0 4c		beq $192f			beq 	_GHExit
.18e3	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18e5	f0 48		beq $192f			beq 	_GHExit
.18e7	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e9	f0 33		beq $191e			beq 	_GHCallHandler 				; update post & call the handler
.18eb	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18ed	f0 2f		beq $191e			beq 	_GHCallHandler
.18ef	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18f1	f0 10		beq $1903			beq 	_GHCPairSkip
.18f3	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18f5					_GHCheckTokens:
.18f5	b1 28		lda ($28),y			lda 	(codePtr),y
.18f7	dd 30 19	cmp $1930,x			cmp 	_GHTokenTable,x
.18fa	f0 0e		beq $190a			beq 	_GHFoundToken
.18fc	e8		inx				inx
.18fd	bd 30 19	lda $1930,x			lda 	_GHTokenTable,x
.1900	d0 f3		bne $18f5			bne 	_GHCheckTokens
.1902	88		dey				dey
.1903					_GHCPairSkip:
.1903	c8		iny				iny
.1904					_GHCPair:
.1904	20 36 19	jsr $1936			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1907	4c d9 18	jmp $18d9			jmp 	_GHLoop
.190a					_GHFoundToken:
.190a	c8		iny				iny 								; skip token (INK/PAPER etc.)
.190b	8a		txa				txa
.190c	48		pha				pha
.190d	a9 00		lda #$00			lda 	#0 							; evaluate byte
.190f	a2 0c		ldx #$0c		ldx	#12
.1911	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1914	68		pla				pla
.1915	aa		tax				tax
.1916	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1918	9d fc 0b	sta $0bfc,x			sta 	gModifiers,x 				; update the modifiers
.191b	4c d9 18	jmp $18d9			jmp 	_GHLoop 					; and loop back
.191e					_GHCallHandler:
.191e	c8		iny				iny 								; consume AT or TO.
.191f	20 36 19	jsr $1936			jsr 	GHMakeCurrent 				; update the coordinates.
.1922	98		tya				tya
.1923	48		pha				pha
.1924	20 2c 19	jsr $192c			jsr 	_GHCallHandlerCode 			; call the handler code
.1927	68		pla				pla
.1928	a8		tay				tay
.1929	4c d9 18	jmp $18d9			jmp 	_GHLoop 					; and loop round.
.192c					_GHCallHandlerCode:
.192c	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.192f					_GHExit:
.192f	60		rts				rts
.1930					_GHTokenTable:
>1930	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1935	00						.byte 	0
.1936					GHMakeCurrent:
.1936	8a		txa				txa
.1937	48		pha				pha
.1938	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.193a	20 4a 19	jsr $194a			jsr 	_GHMCDoIt
.193d	a2 02		ldx #$02		ldx	#2
.193f	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1942	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1944	20 4a 19	jsr $194a			jsr 	_GHMCDoIt
.1947	68		pla				pla
.1948	aa		tax				tax
.1949	60		rts				rts
.194a					_GHMCDoIt:
.194a	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.194d	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1950	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.1953	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.1956	8a		txa				txa
.1957	48		pha				pha
.1958	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.195a	a2 0a		ldx #$0a		ldx	#10
.195c	20 0b 3e	jsr $3e0b		jsr	mainHandler
.195f	68		pla				pla
.1960	aa		tax				tax
.1961	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1963	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1966	a5 a0		lda $a0				lda 	esInt1
.1968	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.196b	b0 17		bcs $1984			bcs 	_GMHCRange
.196d	a5 a8		lda $a8				lda 	esInt2
.196f	05 b0		ora $b0				ora 	esInt3
.1971	d0 11		bne $1984			bne 	_GMHCRange
.1973	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.1975	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.1978	9d ee 0b	sta $0bee,x			sta 	gX2,x
.197b	a5 a0		lda $a0				lda 	esInt1
.197d	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1980	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.1983	60		rts				rts
.1984					_GMHCRange:
.1984	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1986	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c05					gdySign:
>0c05							.fill 	1
.1989					Command_Line:
.1989	a9 91		lda #$91			lda 	#LineHandler & $FF
.198b	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.198d	20 d1 18	jsr $18d1			jsr 	GHandler
.1990	60		rts				rts
.1991					LineHandler:
.1991	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.1993	a0 04		ldy #$04			ldy 	#gX2-gX1
.1995	20 79 1c	jsr $1c79			jsr 	CompareCoordsEq
.1998	f0 09		beq $19a3			beq 	_LHRectCode
.199a	a2 02		ldx #$02			ldx 	#gY1-gX1
.199c	a0 06		ldy #$06			ldy 	#gY2-gX1
.199e	20 79 1c	jsr $1c79			jsr 	CompareCoordsEq
.19a1	d0 03		bne $19a6			bne 	_LHLineDrawer
.19a3					_LHRectCode:
.19a3	4c d6 1a	jmp $1ad6			jmp 	RectHandler
.19a6					_LHLineDrawer:
.19a6	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19a8	a0 04		ldy #$04			ldy 	#gX2-gX1
.19aa	20 64 1c	jsr $1c64			jsr 	CompareCoords
.19ad	90 0a		bcc $19b9			bcc 	_LHNoSwap
.19af	20 ac 1c	jsr $1cac			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19b2	a2 02		ldx #$02			ldx 	#gY1-gX1
.19b4	a0 06		ldy #$06			ldy 	#gY2-gX1
.19b6	20 ac 1c	jsr $1cac			jsr 	GSwapCoords
.19b9					_LHNoSwap:
.19b9	20 e2 19	jsr $19e2			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19bc	a0 00		ldy #$00			ldy 	#gX1-gX1
.19be	20 4e 1c	jsr $1c4e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19c1	b0 15		bcs $19d8			bcs 	_LHExit 					; line off screen.
.19c3					_LHDrawLoop:
.19c3	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19c5	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c7	20 79 1c	jsr $1c79			jsr 	CompareCoordsEq
.19ca	d0 0d		bne $19d9			bne 	_LHNextPixel
.19cc	a2 06		ldx #$06			ldx 	#gY2-gX1
.19ce	a0 06		ldy #$06			ldy 	#gY2-gX1
.19d0	20 79 1c	jsr $1c79			jsr 	CompareCoordsEq
.19d3	d0 04		bne $19d9			bne 	_LHNextPixel
.19d5	20 68 1d	jsr $1d68			jsr 	gdPlotInk 					; plot the last pixel.
.19d8					_LHExit:
.19d8	60		rts				rts
.19d9					_LHNextPixel:
.19d9	20 68 1d	jsr $1d68			jsr 	gdPlotInk 					; plot the pixel.
.19dc	20 36 1a	jsr $1a36			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19df	4c c3 19	jmp $19c3			jmp  	_LHDrawLoop 				; and loop back if okay
.19e2					BresenhamInitialise:
.19e2	38		sec				sec
.19e3	ad ee 0b	lda $0bee			lda 	gX2
.19e6	ed ea 0b	sbc $0bea			sbc 	gX1
.19e9	8d f6 0b	sta $0bf6			sta 	gdX
.19ec	ad ef 0b	lda $0bef			lda 	gX2+1
.19ef	ed eb 0b	sbc $0beb			sbc 	gX1+1
.19f2	8d f7 0b	sta $0bf7			sta 	gdX+1
.19f5	38		sec				sec
.19f6	ad ec 0b	lda $0bec			lda 	gY1
.19f9	ed f0 0b	sbc $0bf0			sbc 	gY2
.19fc	8d f8 0b	sta $0bf8			sta 	gdy
.19ff	ad ed 0b	lda $0bed			lda 	gY1+1
.1a02	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.1a05	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a08	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a0b	8d 05 0c	sta $0c05			sta 	gdysign
.1a0e	30 12		bmi $1a22			bmi 	_BINormal
.1a10	38		sec				sec
.1a11	a9 00		lda #$00			lda 	#0
.1a13	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a16	8d f8 0b	sta $0bf8			sta 	gdy
.1a19	a9 00		lda #$00			lda 	#0
.1a1b	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a1e	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a21	60		rts				rts
.1a22					_BINormal:
.1a22	18		clc				clc
.1a23	ad f6 0b	lda $0bf6			lda 	gdx
.1a26	6d f8 0b	adc $0bf8			adc 	gdy
.1a29	8d f2 0b	sta $0bf2			sta 	gError
.1a2c	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a2f	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a32	8d f3 0b	sta $0bf3			sta 	gError+1
.1a35	60		rts				rts
.1a36					BresenhamIteration:
.1a36	ad f2 0b	lda $0bf2			lda 	gError
.1a39	0a		asl a				asl 	a
.1a3a	8d f4 0b	sta $0bf4			sta 	g2Error
.1a3d	ad f3 0b	lda $0bf3			lda 	gError+1
.1a40	2a		rol a				rol 	a
.1a41	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a44	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a46	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a48	20 71 1c	jsr $1c71			jsr 	CompareCoordsSigned
.1a4b	30 03		bmi $1a50			bmi 	_BINoE2DY
.1a4d	20 5d 1a	jsr $1a5d			jsr 	BresenhamE2GEDY
.1a50					_BINoE2DY:
.1a50	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a52	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a54	20 71 1c	jsr $1c71			jsr 	CompareCoordsSigned
.1a57	30 03		bmi $1a5c			bmi 	_BINoDXE2
.1a59	20 7c 1a	jsr $1a7c			jsr 	BresenhamDXGEE2
.1a5c					_BINoDXE2:
.1a5c	60		rts				rts
.1a5d					BresenhamE2GEDY:
.1a5d	18		clc				clc
.1a5e	ad f2 0b	lda $0bf2			lda 	gError
.1a61	6d f8 0b	adc $0bf8			adc 	gdy
.1a64	8d f2 0b	sta $0bf2			sta 	gError
.1a67	ad f3 0b	lda $0bf3			lda 	gError+1
.1a6a	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a6d	8d f3 0b	sta $0bf3			sta 	gError+1
.1a70	ee ea 0b	inc $0bea			inc 	gX1
.1a73	d0 03		bne $1a78			bne 	_BE2Skip
.1a75	ee eb 0b	inc $0beb			inc 	gX1+1
.1a78					_BE2Skip:
.1a78	20 c9 1c	jsr $1cc9			jsr 	gdMvRight
.1a7b	60		rts				rts
.1a7c					BresenhamDXGEE2:
.1a7c	18		clc				clc
.1a7d	ad f2 0b	lda $0bf2			lda 	gError
.1a80	6d f6 0b	adc $0bf6			adc 	gdx
.1a83	8d f2 0b	sta $0bf2			sta 	gError
.1a86	ad f3 0b	lda $0bf3			lda 	gError+1
.1a89	6d f7 0b	adc $0bf7			adc 	gdx+1
.1a8c	8d f3 0b	sta $0bf3			sta 	gError+1
.1a8f	ad 05 0c	lda $0c05			lda 	gdySign
.1a92	10 0c		bpl $1aa0			bpl 	_BEDXInvertY
.1a94	ee ec 0b	inc $0bec			inc 	gY1
.1a97	d0 03		bne $1a9c			bne 	_BEDXSkip
.1a99	ee ed 0b	inc $0bed			inc 	gY1+1
.1a9c					_BEDXSkip:
.1a9c	20 04 1d	jsr $1d04			jsr 	gdMvDown
.1a9f	60		rts				rts
.1aa0					_BEDXInvertY:
.1aa0	ad ec 0b	lda $0bec			lda 	gY1
.1aa3	d0 03		bne $1aa8			bne 	_BEDXSkip2
.1aa5	ce ed 0b	dec $0bed			dec 	gY1+1
.1aa8					_BEDXSkip2:
.1aa8	ce ec 0b	dec $0bec			dec 	gY1
.1aab	20 df 1c	jsr $1cdf			jsr 	gdMvUp
.1aae	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1aaf					Command_Plot:
.1aaf	a9 b7		lda #$b7			lda 	#PlotHandler & $FF
.1ab1	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ab3	20 d1 18	jsr $18d1			jsr 	GHandler
.1ab6	60		rts				rts
.1ab7					PlotHandler:
.1ab7	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ab9	20 4e 1c	jsr $1c4e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1abc	b0 03		bcs $1ac1			bcs 	_PHExit 					; off screen, return with CS.
.1abe	20 68 1d	jsr $1d68			jsr 	gdPlotInk 					; pixel in Ink.
.1ac1	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c06					frameFlag:
>0c06							.fill 	1
.1ac2					Command_Rect:
.1ac2	a9 d6		lda #$d6			lda 	#RectHandler & $FF
.1ac4	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1ac6	20 d1 18	jsr $18d1			jsr 	GHandler
.1ac9	60		rts				rts
.1aca					Command_Frame:
.1aca	a9 d2		lda #$d2			lda 	#FrameHandler & $FF
.1acc	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1ace	20 d1 18	jsr $18d1			jsr 	GHandler
.1ad1	60		rts				rts
.1ad2					FrameHandler:
.1ad2	a9 01		lda #$01			lda 	#1
.1ad4	d0 02		bne $1ad8			bne 	RectHandler+2
.1ad6					RectHandler:
.1ad6	a9 00		lda #$00			lda 	#0
.1ad8	8d 06 0c	sta $0c06			sta 	frameFlag
.1adb	20 88 1c	jsr $1c88			jsr 	BoxSort 					; sort so topleft/bottom right
.1ade	20 07 1b	jsr $1b07			jsr 	DrawBoxPart 				; solid first line
.1ae1					_FHLoop:
.1ae1	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1ae3	a0 06		ldy #$06			ldy 	#gY2-gX1
.1ae5	20 64 1c	jsr $1c64			jsr 	CompareCoords
.1ae8	b0 19		bcs $1b03			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1aea	ad 06 0c	lda $0c06			lda 	frameFlag 					; identify solid or frame ?
.1aed	f0 06		beq $1af5			beq 	_FHIsSolidRect
.1aef	20 20 1b	jsr $1b20			jsr 	DrawBoxEnds
.1af2	4c f8 1a	jmp $1af8			jmp 	_FHNext
.1af5					_FHIsSolidRect:
.1af5	20 07 1b	jsr $1b07			jsr 	DrawBoxPart
.1af8					_FHNext:
.1af8	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1afb	d0 e4		bne $1ae1			bne 	_FHLoop
.1afd	ee ed 0b	inc $0bed			inc 	gY1+1
.1b00	4c e1 1a	jmp $1ae1			jmp 	_FHLoop
.1b03					_FHLastLine:
.1b03	20 07 1b	jsr $1b07			jsr 	DrawBoxPart 				; solid last line whatever
.1b06					_FHExit:
.1b06	60		rts				rts
.1b07					DrawBoxPart:
.1b07	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b09	20 4e 1c	jsr $1c4e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b0c	38		sec				sec 								; calculate line length => temp0
.1b0d	ad ee 0b	lda $0bee			lda 	gX2
.1b10	ed ea 0b	sbc $0bea			sbc 	gX1
.1b13	48		pha				pha
.1b14	ad ef 0b	lda $0bef			lda 	gX2+1
.1b17	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b1a	aa		tax				tax
.1b1b	68		pla				pla 								; line length in XA.
.1b1c	20 38 1b	jsr $1b38			jsr 	DrawHorizontalLine
.1b1f	60		rts				rts
.1b20					DrawBoxEnds:
.1b20	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b22	20 4e 1c	jsr $1c4e			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b25	20 68 1d	jsr $1d68			jsr 	gdPlotInk 					; LH end.
.1b28	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b2b	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b2e	20 1d 1e	jsr $1e1d			jsr 	gdSetX
.1b31	20 26 1d	jsr $1d26			jsr		gdSetDrawPosition 			; update position.
.1b34	20 68 1d	jsr $1d68			jsr 	gdPlotInk 					; RH end.
.1b37	60		rts				rts
.1b38					DrawHorizontalLine:
.1b38	86 32		stx $32				stx 	tempShort
.1b3a	aa		tax				tax
.1b3b	a4 32		ldy $32				ldy 	tempShort
.1b3d	ad fc 0b	lda $0bfc			lda 	gdInk
.1b40	4c 2b 1e	jmp $1e2b			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c07					RenderFunction:
>0c07							.fill 	2
.0c09					RenderWidth:
>0c09							.fill 	1
.0c0a					RenderHeight:
>0c0a							.fill 	1
.0c0b					RenderType:
>0c0b							.fill 	1
.0c0c					RenderCache:
>0c0c							.fill 	64
.1b43					ImageRenderer:
.1b43	8e 08 0c	stx $0c08			stx 	RenderFunction+1
.1b46	8d 07 0c	sta $0c07			sta 	RenderFunction
.1b49	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b4b	20 36 1c	jsr $1c36			jsr 	CallRenderFunction
.1b4e	8d 0b 0c	sta $0c0b			sta 	RenderType 					; and save it.
.1b51	8e 09 0c	stx $0c09			stx 	RenderWidth
.1b54	8c 0a 0c	sty $0c0a			sty 	RenderHeight
.1b57	8a		txa				txa 								; check X coordinate
.1b58	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b5a	20 fd 1b	jsr $1bfd			jsr 	RenderCheckRange
.1b5d	ad 0a 0c	lda $0c0a			lda 	RenderHeight 				; check Y coordinate
.1b60	a2 02		ldx #$02			ldx 	#2
.1b62	20 fd 1b	jsr $1bfd			jsr 	RenderCheckRange
.1b65	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b67					_IRLoop1:
.1b67	98		tya				tya
.1b68	48		pha				pha
.1b69	20 d9 1b	jsr $1bd9			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1b6c	20 36 1c	jsr $1c36			jsr 	CallRenderFunction 			; fill the rendering cache.
.1b6f	68		pla				pla
.1b70	a8		tay				tay
.1b71	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; number of times to do the row.
.1b74					_IRLoop2:
.1b74	20 81 1b	jsr $1b81			jsr 	RenderDrawRow 				; draw one row.
.1b77	ca		dex				dex 								; scale # times.
.1b78	d0 fa		bne $1b74			bne 	_IRLoop2
.1b7a	c8		iny				iny 								; next vertical row
.1b7b	cc 0a 0c	cpy $0c0a			cpy 	RenderHeight 				; done the lot ?
.1b7e	d0 e7		bne $1b67			bne 	_IRLoop1
.1b80	60		rts				rts
.1b81					RenderDrawRow:
.1b81	8a		txa				txa
.1b82	48		pha				pha
.1b83	98		tya				tya
.1b84	48		pha				pha
.1b85	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1b87	20 4e 1c	jsr $1c4e			jsr 	SetupXY
.1b8a	68		pla				pla
.1b8b	a8		tay				tay
.1b8c	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1b8e					_RDRLoop1:
.1b8e	20 a2 1b	jsr $1ba2			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1b91	e8		inx				inx
.1b92	ec 09 0c	cpx $0c09			cpx 	RenderWidth 				; until done the whole lot.
.1b95	d0 f7		bne $1b8e			bne 	_RDRLoop1
.1b97	ee f0 0b	inc $0bf0			inc 	gY2 						; next line down
.1b9a	d0 03		bne $1b9f			bne 	_RDRNoCarry
.1b9c	ee f1 0b	inc $0bf1			inc 	gY2+1
.1b9f					_RDRNoCarry:
.1b9f	68		pla				pla
.1ba0	aa		tax				tax
.1ba1	60		rts				rts
.1ba2					RenderDrawPixelSet:
.1ba2	8a		txa				txa
.1ba3	48		pha				pha
.1ba4	98		tya				tya
.1ba5	48		pha				pha
.1ba6	20 d9 1b	jsr $1bd9			jsr 	RenderFlipXY 				; flip positions as required.
.1ba9	20 c3 1b	jsr $1bc3			jsr 	RenderGetInk				; get colour to draw with.
.1bac	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; X counts the size.
.1baf					_RDPSLoop:
.1baf	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bb1	f0 03		beq $1bb6			beq 	_RDPSNoDraw
.1bb3	20 6b 1d	jsr $1d6b			jsr 	gdPlotA 					; draw A otherwise
.1bb6					_RDPSNoDraw:
.1bb6	48		pha				pha 								; move right
.1bb7	20 c9 1c	jsr $1cc9			jsr 	gdMvRight
.1bba	68		pla				pla
.1bbb	ca		dex				dex
.1bbc	d0 f1		bne $1baf			bne 	_RDPSLoop 					; do it size times.
.1bbe	68		pla				pla
.1bbf	a8		tay				tay
.1bc0	68		pla				pla
.1bc1	aa		tax				tax
.1bc2	60		rts				rts
.1bc3					RenderGetInk:
.1bc3	ad 0b 0c	lda $0c0b			lda 	RenderType 					; type, if 0 it's a bitmap
.1bc6	f0 04		beq $1bcc			beq 	_RGIBitmap
.1bc8	bd 0c 0c	lda $0c0c,x			lda 	RenderCache,x 				; read from the cache.
.1bcb	60		rts				rts
.1bcc					_RGIBitmap:
.1bcc	bd 0c 0c	lda $0c0c,x			lda 	RenderCache,x 				; read from the cache.
.1bcf	f0 04		beq $1bd5			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bd1	ad fc 0b	lda $0bfc			lda 	gdInk
.1bd4	60		rts				rts
.1bd5					_RGIBPaper:
.1bd5	ad fd 0b	lda $0bfd			lda 	gdPaper
.1bd8	60		rts				rts
.1bd9					RenderFlipXY:
.1bd9	ad 00 0c	lda $0c00			lda 	gdFlip 						; check any flip at all
.1bdc	29 03		and #$03			and 	#3
.1bde	f0 1c		beq $1bfc			beq 	_RFExit
.1be0	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1be1	90 09		bcc $1bec			bcc 	_RFNoHFlip
.1be3	ad 09 0c	lda $0c09			lda 	RenderWidth 				; X Flip
.1be6	86 32		stx $32				stx 	tempShort
.1be8	18		clc				clc
.1be9	e5 32		sbc $32				sbc 	tempShort
.1beb	aa		tax				tax
.1bec					_RFNoHFlip:
.1bec	ad 00 0c	lda $0c00			lda 	gdFlip
.1bef	29 02		and #$02			and 	#2 							; bit 1 check
.1bf1	f0 09		beq $1bfc			beq 	_RFExit
.1bf3	ad 0a 0c	lda $0c0a			lda 	RenderHeight 				; Y Flip
.1bf6	84 32		sty $32				sty 	tempShort
.1bf8	18		clc				clc
.1bf9	e5 32		sbc $32				sbc 	tempShort
.1bfb	a8		tay				tay
.1bfc					_RFExit:
.1bfc	60		rts				rts
.1bfd					RenderCheckRange:
.1bfd	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1bff	ac fe 0b	ldy $0bfe			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1c02	84 2a		sty $2a				sty 	temp0
.1c04	f0 2b		beq $1c31			beq 	_RCRValue
.1c06	a9 00		lda #$00			lda 	#0 							; total
.1c08					_RCRMultiply:
.1c08	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c0a	90 05		bcc $1c11			bcc 	_RCRNoAdd 					; not adding this time.
.1c0c	18		clc				clc
.1c0d	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c0f	b0 20		bcs $1c31			bcs 	_RCRValue 					; overflow
.1c11					_RCRNoAdd:
.1c11	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c13	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c15	d0 f1		bne $1c08			bne 	_RCRMultiply
.1c17	18		clc				clc 								; add to x2 or y2, store in temp0
.1c18	7d ee 0b	adc $0bee,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c1b	85 2a		sta $2a				sta 	temp0
.1c1d	bd ef 0b	lda $0bef,x			lda 	gX2+1,x
.1c20	69 00		adc #$00			adc 	#0
.1c22	85 2b		sta $2b				sta 	temp0+1
.1c24	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c26	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1c29	a5 2b		lda $2b				lda 	temp0+1
.1c2b	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.1c2e	b0 01		bcs $1c31			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c30	60		rts				rts
.1c31					_RCRValue:
.1c31	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c33	20 18 15	jsr $1518		jsr	errorHandler
.1c36					CallRenderFunction:
.1c36	6c 07 0c	jmp ($0c07)			jmp 	(RenderFunction)
.1c39					TestImageAccess:
.1c39	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c3b	f0 0a		beq $1c47			beq 	_TIAGetInfo
.1c3d	a0 3f		ldy #$3f			ldy 	#63
.1c3f					_TIACreate:
.1c3f	98		tya				tya
.1c40	99 0c 0c	sta $0c0c,y			sta 	RenderCache,y
.1c43	88		dey				dey
.1c44	10 f9		bpl $1c3f			bpl 	_TIACreate
.1c46	60		rts				rts
.1c47					_TIAGetInfo:
.1c47	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c49	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c4b	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c4d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c4e					SetupXY:
.1c4e	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1c51	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1c54	20 1d 1e	jsr $1e1d			jsr 	gdSetX
.1c57	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1c5a	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1c5d	20 24 1e	jsr $1e24			jsr 	gdSetY
.1c60	20 26 1d	jsr $1d26			jsr 	gdSetDrawPosition
.1c63	60		rts				rts
.1c64					CompareCoords:
.1c64	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c67	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c6a	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c6d	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1c70	60		rts				rts
.1c71					CompareCoordsSigned:
.1c71	20 64 1c	jsr $1c64			jsr 	CompareCoords
.1c74	50 02		bvc $1c78			bvc 	_CCSExit
.1c76	49 80		eor #$80			eor 	#$80
.1c78					_CCSExit:
.1c78	60		rts				rts
.1c79					CompareCoordsEq:
.1c79	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c7c	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c7f	d0 06		bne $1c87			bne 	_CCEExit
.1c81	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c84	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1c87					_CCEExit:
.1c87	60		rts				rts
.1c88					BoxSort:
.1c88	a2 00		ldx #$00			ldx 	#gx1-gx1
.1c8a	a0 04		ldy #$04			ldy 	#gx2-gx1
.1c8c	20 9d 1c	jsr $1c9d			jsr 	GCompareCoords
.1c8f	20 aa 1c	jsr $1caa			jsr 	GSortMinMaxCoords
.1c92	a2 02		ldx #$02			ldx 	#gy1-gx1
.1c94	a0 06		ldy #$06			ldy 	#gy2-gx1
.1c96	20 9d 1c	jsr $1c9d			jsr 	GCompareCoords
.1c99	20 aa 1c	jsr $1caa			jsr 	GSortMinMaxCoords
.1c9c	60		rts				rts
.1c9d					GCompareCoords:
.1c9d	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1ca0	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1ca3	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1ca6	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1ca9	60		rts				rts
.1caa					GSortMinMaxCoords:
.1caa	90 1c		bcc $1cc8			bcc 	GSMMCExit
.1cac					GSwapCoords:
.1cac	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1caf	48		pha				pha
.1cb0	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1cb3	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1cb6	68		pla				pla
.1cb7	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1cba	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1cbd	48		pha				pha
.1cbe	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1cc1	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1cc4	68		pla				pla
.1cc5	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1cc8					GSMMCExit:
.1cc8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1cc9					gdMvRight:
.1cc9	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1ccc	d0 08		bne $1cd6			bne 	_gdMR0
.1cce	ee 21 9f	inc $9f21			inc 	$9F21
.1cd1	d0 03		bne $1cd6			bne 	_gdMR0
.1cd3	ee 22 9f	inc $9f22			inc 	$9F22
.1cd6					_gdMR0:
.1cd6	ee 50 0c	inc $0c50			inc 	gdXPos
.1cd9	d0 03		bne $1cde			bne 	_gdMR1
.1cdb	ee 51 0c	inc $0c51			inc 	gdXPos+1
.1cde					_gdMR1:
.1cde	60		rts				rts
.1cdf					gdMvUp:
.1cdf	ad 52 0c	lda $0c52			lda 	gdYPos 						; decrement Y Pos
.1ce2	d0 03		bne $1ce7			bne 	_gdMU1
.1ce4	ce 53 0c	dec $0c53			dec 	gdYPos+1
.1ce7	ce 52 0c	dec $0c52	_gdMU1:	dec 	gdYPos
.1cea	38		sec				sec 								; adjust position by -320
.1ceb	ad 20 9f	lda $9f20			lda 	$9F20
.1cee	e9 40		sbc #$40			sbc 	#64
.1cf0	8d 20 9f	sta $9f20			sta 	$9F20
.1cf3	ad 21 9f	lda $9f21			lda 	$9F21
.1cf6	e9 01		sbc #$01			sbc 	#1
.1cf8	8d 21 9f	sta $9f21			sta 	$9F21
.1cfb	ad 22 9f	lda $9f22			lda 	$9F22
.1cfe	e9 00		sbc #$00			sbc 	#0
.1d00	8d 22 9f	sta $9f22			sta 	$9F22
.1d03	60		rts				rts
.1d04					gdMvDown:
.1d04	ee 52 0c	inc $0c52			inc 	gdYPos 						; decrement Y Pos
.1d07	d0 03		bne $1d0c			bne 	_gdMU1
.1d09	ee 53 0c	inc $0c53			inc 	gdYPos+1
.1d0c					_gdMU1:
.1d0c	18		clc				clc 								; adjust position by -320
.1d0d	ad 20 9f	lda $9f20			lda 	$9F20
.1d10	69 40		adc #$40			adc 	#64
.1d12	8d 20 9f	sta $9f20			sta 	$9F20
.1d15	ad 21 9f	lda $9f21			lda 	$9F21
.1d18	69 01		adc #$01			adc 	#1
.1d1a	8d 21 9f	sta $9f21			sta 	$9F21
.1d1d	ad 22 9f	lda $9f22			lda 	$9F22
.1d20	69 00		adc #$00			adc 	#0
.1d22	8d 22 9f	sta $9f22			sta 	$9F22
.1d25	60		rts				rts
.1d26					gdSetDrawPosition:
.1d26	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d28	85 2a		sta $2a				sta 	temp0
.1d2a	ad 52 0c	lda $0c52			lda 	gdYPos
.1d2d	85 2b		sta $2b				sta 	temp0+1
.1d2f	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d31	66 2a		ror $2a				ror 	temp0
.1d33	46 2b		lsr $2b				lsr 	temp0+1
.1d35	66 2a		ror $2a				ror 	temp0
.1d37	ad 52 0c	lda $0c52			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d3a	18		clc				clc
.1d3b	65 2b		adc $2b				adc 	temp0+1
.1d3d	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d3f	18		clc				clc
.1d40	a5 2a		lda $2a				lda 	temp0
.1d42	6d 50 0c	adc $0c50			adc 	gdXPos
.1d45	85 2a		sta $2a				sta 	temp0
.1d47	a5 2b		lda $2b				lda 	temp0+1
.1d49	6d 51 0c	adc $0c51			adc 	gdXPos+1
.1d4c	85 2b		sta $2b				sta 	temp0+1
.1d4e	18		clc				clc
.1d4f	ad 4d 0c	lda $0c4d			lda 	gdBitmapAddress
.1d52	65 2a		adc $2a				adc 	temp0
.1d54	8d 20 9f	sta $9f20			sta 	$9F20
.1d57	ad 4e 0c	lda $0c4e			lda 	gdBitmapAddress+1
.1d5a	65 2b		adc $2b				adc 	temp0+1
.1d5c	8d 21 9f	sta $9f21			sta 	$9F21
.1d5f	ad 4f 0c	lda $0c4f			lda 	gdBitmapAddress+2
.1d62	69 00		adc #$00			adc 	#0
.1d64	8d 22 9f	sta $9f22			sta 	$9F22
.1d67	60		rts				rts
.1d68					gdPlotInk:
.1d68	ad fc 0b	lda $0bfc			lda 	gdInk
.1d6b					gdPlotA:
.1d6b	8d 23 9f	sta $9f23			sta 	$9F23
.1d6e	60		rts				rts
.1d6f					gdPlotPaper:
.1d6f	ad fd 0b	lda $0bfd			lda 	gdPaper
.1d72	c9 ff		cmp #$ff			cmp 	#$FF
.1d74	f0 03		beq $1d79			beq 	_gdPPSkip
.1d76	8d 23 9f	sta $9f23			sta 	$9F23
.1d79					_gdPPSkip:
.1d79	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c4c					gdEnabled:
>0c4c							.fill 	1
.0c4d					gdBitmapAddress:
>0c4d							.fill 	3
.0c50					gdXPos:
>0c50							.fill 	2
.0c52					gdYPos:
>0c52							.fill 	2
.1d7a					gdModeChanged:
.1d7a	8a		txa				txa
.1d7b	48		pha				pha
.1d7c	98		tya				tya
.1d7d	48		pha				pha
.1d7e	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d80	8d 4c 0c	sta $0c4c			sta 	gdEnabled
.1d83	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1d86	c9 40		cmp #$40			cmp 	#$40
.1d88	d0 1f		bne $1da9			bne 	_gdExit
.1d8a	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1d8d	c9 40		cmp #$40			cmp 	#$40
.1d8f	d0 18		bne $1da9			bne 	_gdExit
.1d91	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1d94	0a		asl a				asl 	a 							;
.1d95	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1d96	10 09		bpl $1da1			bpl 	_gdNotLayer1
.1d98	48		pha				pha 								; save A
.1d99	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1d9b	20 b1 1d	jsr $1db1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d9e	68		pla				pla 								; restore A
.1d9f	b0 08		bcs $1da9			bcs 	_gdExit 					; if successful then exit
.1da1					_gdNotLayer1:
.1da1	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1da2	10 05		bpl $1da9			bpl 	_gdExit 					; if not enabled, exit
.1da4	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1da6	20 b1 1d	jsr $1db1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1da9					_gdExit:
.1da9	20 e5 1d	jsr $1de5			jsr 	gdClearGraphics 			; clear graphics display.
.1dac	68		pla				pla
.1dad	a8		tay				tay
.1dae	68		pla				pla
.1daf	aa		tax				tax
.1db0	60		rts				rts
.1db1					gdCheckBitmap:
.1db1	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1db4	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1db6	d0 14		bne $1dcc			bne 	_gdCBFail
.1db8	ee 4c 0c	inc $0c4c			inc 	gdEnabled 					; set the enabled flag to non zero.
.1dbb	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1dbe	0a		asl a				asl 	a
.1dbf	8d 4e 0c	sta $0c4e			sta 	gdBitmapAddress+1
.1dc2	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1dc4	8d 4f 0c	sta $0c4f			sta 	gdBitmapAddress+2
.1dc7	a9 00		lda #$00			lda 	#$00
.1dc9	8d 4d 0c	sta $0c4d			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dcc					_gdCBFail:
.1dcc	18		clc				clc
.1dcd	60		rts				rts
.1dce					CommandClg:
.1dce	b1 28		lda ($28),y			lda 	(codePtr),y
.1dd0	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1dd2	d0 0d		bne $1de1			bne 	_CCLClear
.1dd4	c8		iny				iny
.1dd5	a9 00		lda #$00			lda 	#0
.1dd7	a2 0c		ldx #$0c		ldx	#12
.1dd9	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1ddc	a5 98		lda $98				lda 	esInt0
.1dde	8d fd 0b	sta $0bfd			sta 	gdPaper
.1de1					_CCLClear:
.1de1	20 e5 1d	jsr $1de5			jsr 	gdClearGraphics
.1de4	60		rts				rts
.1de5					gdClearGraphics:
.1de5	8a		txa				txa
.1de6	48		pha				pha
.1de7	98		tya				tya
.1de8	48		pha				pha
.1de9	ad 4c 0c	lda $0c4c			lda 	gdEnabled 					; screen enabled
.1dec	f0 2a		beq $1e18			beq 	_gdCGExit
.1dee	a9 00		lda #$00			lda 	#0 							; home cursor
.1df0	aa		tax				tax
.1df1	20 1d 1e	jsr $1e1d			jsr 	gdSetX
.1df4	20 24 1e	jsr $1e24			jsr 	gdSetY
.1df7	20 26 1d	jsr $1d26			jsr 	gdSetDrawPosition 			; set the draw position.
.1dfa	a9 40		lda #$40			lda 	#(320) & $FF
.1dfc	8d 01 0c	sta $0c01			sta 	gdXLimit
.1dff	a9 01		lda #$01			lda 	#(320) >> 8
.1e01	8d 02 0c	sta $0c02			sta 	1+(gdXLimit)
.1e04	a9 c8		lda #$c8			lda 	#(200) & $FF
.1e06	8d 03 0c	sta $0c03			sta 	gdYLimit
.1e09	a9 00		lda #$00			lda 	#(200) >> 8
.1e0b	8d 04 0c	sta $0c04			sta 	1+(gdYLimit)
.1e0e	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e10	a2 00		ldx #$00			ldx 	#0
.1e12	ad fd 0b	lda $0bfd			lda 	gdPaper
.1e15	20 2b 1e	jsr $1e2b			jsr 	gdOptHorizontalWriter
.1e18					_gdCGExit:
.1e18	68		pla				pla
.1e19	a8		tay				tay
.1e1a	68		pla				pla
.1e1b	aa		tax				tax
.1e1c	60		rts				rts
.1e1d					gdSetX:
.1e1d	8d 50 0c	sta $0c50			sta 	gdXPos
.1e20	8e 51 0c	stx $0c51			stx 	gdXPos+1
.1e23	60		rts				rts
.1e24					gdSetY:
.1e24	8d 52 0c	sta $0c52			sta 	gdYPos
.1e27	8e 53 0c	stx $0c53			stx 	gdYPos+1
.1e2a	60		rts				rts
.1e2b					gdOptHorizontalWriter:
.1e2b	48		pha				pha
.1e2c	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e2f	09 10		ora #$10			ora 	#$10
.1e31	8d 22 9f	sta $9f22			sta 	$9F22
.1e34	68		pla				pla
.1e35					_gdOLoop:
.1e35	8d 23 9f	sta $9f23			sta 	$9F23
.1e38	e0 00		cpx #$00			cpx 	#0
.1e3a	d0 05		bne $1e41			bne 	_gdNoBorrow
.1e3c	c0 00		cpy #$00			cpy 	#0
.1e3e	f0 05		beq $1e45			beq 	_gdExit
.1e40	88		dey				dey
.1e41					_gdNoBorrow:
.1e41	ca		dex				dex
.1e42	4c 35 1e	jmp $1e35			jmp 	_gdOLoop
.1e45					_gdExit:
.1e45	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e46					Unary_Clock:
.1e46	a2 0c		ldx #$0c		ldx	#12
.1e48	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1e4b	48		pha				pha 								; save stack pos
.1e4c	a2 04		ldx #$04		ldx	#4
.1e4e	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1e51	98		tya				tya
.1e52	48		pha				pha
.1e53	20 50 ff	jsr $ff50			jsr 	$FF50
.1e56	68		pla				pla
.1e57	a8		tay				tay
.1e58	68		pla				pla 								; restore, repush, put into X to read offset
.1e59	48		pha				pha
.1e5a	aa		tax				tax
.1e5b	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e5d	c9 06		cmp #$06			cmp 	#6
.1e5f	b0 0d		bcs $1e6e			bcs 	_UCValue
.1e61	aa		tax				tax 								; index in X and read RTC.
.1e62	b5 02		lda $02,x			lda 	2,x
.1e64	85 32		sta $32				sta 	tempshort
.1e66	68		pla				pla 								; restore number stack index.
.1e67	aa		tax				tax
.1e68	a5 32		lda $32				lda 	tempShort
.1e6a	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e6c	8a		txa				txa
.1e6d	60		rts				rts
.1e6e					_UCValue:
.1e6e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e70	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e73					Unary_JoyX:
.1e73	38		sec				sec
.1e74	b0 01		bcs $1e77			bcs 	JoystickRead
.1e76					Unary_JoyY:
.1e76	18		clc				clc
.1e77					JoystickRead:
.1e77	48		pha				pha 								; save stack position
.1e78	08		php				php 								; save test flag.
.1e79	a2 04		ldx #$04		ldx	#4
.1e7b	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1e7e	20 d8 1e	jsr $1ed8			jsr 	ReadJoystick 				; read it.
.1e81	28		plp				plp
.1e82	b0 02		bcs $1e86			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e84	4a		lsr a				lsr 	a
.1e85	4a		lsr a				lsr 	a
.1e86					_JRNoShift:
.1e86	29 03		and #$03			and 	#3 							; isolate the test bits.
.1e88	f0 0d		beq $1e97			beq 	JoyReturnA 					; if nothing pressed, return A.
.1e8a	c9 03		cmp #$03			cmp 	#3
.1e8c	f0 07		beq $1e95			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1e8e	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1e8f	b0 16		bcs $1ea7			bcs 	JoyReturn1
.1e91					JoyReturnTrue:
.1e91	a9 ff		lda #$ff			lda 	#$FF
.1e93	d0 02		bne $1e97			bne 	JoyReturnA
.1e95					JoyReturnFalse:
.1e95	a9 00		lda #$00			lda 	#0
.1e97					JoyReturnA:
.1e97	85 32		sta $32				sta 	tempShort 					; return A
.1e99	68		pla				pla
.1e9a	aa		tax				tax
.1e9b	a5 32		lda $32				lda 	tempShort
.1e9d	95 98		sta $98,x			sta 	esInt0,x
.1e9f					JoyReturn13:
.1e9f	95 a0		sta $a0,x			sta 	esInt1,x
.1ea1	95 a8		sta $a8,x			sta 	esInt2,x
.1ea3	95 b0		sta $b0,x			sta 	esInt3,x
.1ea5	8a		txa				txa 								; return NSP in A
.1ea6	60		rts				rts
.1ea7					JoyReturn1:
.1ea7	68		pla				pla
.1ea8	aa		tax				tax
.1ea9	a9 01		lda #$01			lda 	#1
.1eab	95 98		sta $98,x			sta 	esInt0,x
.1ead	a9 00		lda #$00			lda 	#0
.1eaf	f0 ee		beq $1e9f			beq 	JoyReturn13
.1eb1					Unary_JButton:
.1eb1	48		pha				pha 								; save X on stack, put in X
.1eb2	a2 0c		ldx #$0c		ldx	#12
.1eb4	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1eb7	aa		tax				tax 								; get value to check, push on stack.
.1eb8	b5 98		lda $98,x			lda 	esInt0,x
.1eba	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1ebc	b0 15		bcs $1ed3			bcs 	_UJBadValue
.1ebe	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ec0	48		pha				pha 								; save that shift count on the stack.
.1ec1	a2 04		ldx #$04		ldx	#4
.1ec3	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1ec6	68		pla				pla
.1ec7	aa		tax				tax
.1ec8	20 d8 1e	jsr $1ed8			jsr 	ReadJoystick 				; joystick read
.1ecb					_UJShift:
.1ecb	4a		lsr a				lsr 	a
.1ecc	ca		dex				dex
.1ecd	d0 fc		bne $1ecb			bne 	_UJShift
.1ecf	b0 c0		bcs $1e91			bcs 	JoyReturnTrue
.1ed1	90 c2		bcc $1e95			bcc 	JoyReturnFalse
.1ed3					_UJBadValue:
.1ed3	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ed5	20 18 15	jsr $1518		jsr	errorHandler
.1ed8					ReadJoystick:
.1ed8	8a		txa				txa
.1ed9	48		pha				pha
.1eda	98		tya				tya
.1edb	48		pha				pha
.1edc	a9 00		lda #$00			lda 	#0
.1ede	20 56 ff	jsr $ff56			jsr 	$FF56
.1ee1	c0 00		cpy #$00			cpy 	#0
.1ee3	d0 11		bne $1ef6			bne 	_RJError
.1ee5	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1ee7	d0 02		bne $1eeb			bne 	_RJNoBug
.1ee9	a9 ff		lda #$ff			lda 	#$FF
.1eeb					_RJNoBug:
.1eeb	85 32		sta $32				sta 	tempShort
.1eed	68		pla				pla
.1eee	a8		tay				tay
.1eef	68		pla				pla
.1ef0	aa		tax				tax
.1ef1	a5 32		lda $32				lda 	tempShort
.1ef3	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1ef5	60		rts				rts
.1ef6					_RJError:
.1ef6	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ef8	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c54					hitSprite1:
>0c54							.fill 	1 							; this won't work ... if you nest HIT() which
.0c55					hitSprite2:
>0c55							.fill 	1
.0c56					hitRange:
>0c56							.fill 	1
.1efb					FunctionCollide:
.1efb	48		pha				pha 								; save and put index into X
.1efc	aa		tax				tax
.1efd	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1eff	8d 56 0c	sta $0c56			sta 	hitRange
.1f02	20 a7 1f	jsr $1fa7			jsr 	_FCGetSpriteID
.1f05	8d 54 0c	sta $0c54			sta 	hitSprite1
.1f08	8a		txa				txa
.1f09	48		pha				pha
.1f0a	a2 02		ldx #$02		ldx	#2
.1f0c	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1f0f	68		pla				pla
.1f10	aa		tax				tax
.1f11	20 a7 1f	jsr $1fa7			jsr 	_FCGetSpriteID
.1f14	8d 55 0c	sta $0c55			sta 	hitSprite2
.1f17	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1f19	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f1b	f0 13		beq $1f30			beq 	_FCParam2
.1f1d	8a		txa				txa
.1f1e	48		pha				pha
.1f1f	a2 02		ldx #$02		ldx	#2
.1f21	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1f24	68		pla				pla
.1f25	a2 0c		ldx #$0c		ldx	#12
.1f27	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1f2a	aa		tax				tax
.1f2b	b5 98		lda $98,x			lda 	esInt0,x
.1f2d	8d 56 0c	sta $0c56			sta 	hitRange
.1f30					_FCParam2:
.1f30	a2 04		ldx #$04		ldx	#4
.1f32	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1f35	68		pla				pla 								; set X to point to the stack again.
.1f36	48		pha				pha
.1f37	aa		tax				tax
.1f38	98		tya				tya
.1f39	48		pha				pha
.1f3a	18		clc				clc 								; do it with the horizontal values.
.1f3b	20 5d 1f	jsr $1f5d			jsr 	_FCCheck
.1f3e	90 0a		bcc $1f4a			bcc 	_FCFail
.1f40	38		sec				sec 								; do it with the vertical values.
.1f41	20 5d 1f	jsr $1f5d			jsr 	_FCCheck
.1f44	90 04		bcc $1f4a			bcc 	_FCFail
.1f46	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1f48	d0 02		bne $1f4c			bne 	_FCReturnA
.1f4a					_FCFail:
.1f4a	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1f4c					_FCReturnA:
.1f4c	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1f4e	68		pla				pla
.1f4f	a8		tay				tay
.1f50	68		pla				pla 								; restore stack, return result and exit.
.1f51	aa		tax				tax
.1f52	a5 32		lda $32				lda 	tempShort
.1f54	95 98		sta $98,x			sta 	esInt0,x
.1f56	95 a0		sta $a0,x			sta 	esInt1,x
.1f58	95 a8		sta $a8,x			sta 	esInt2,x
.1f5a	95 b0		sta $b0,x			sta 	esInt3,x
.1f5c	60		rts				rts
.1f5d					_FCCheck:
.1f5d	08		php				php 								; save the H/V flag twice
.1f5e	08		php				php
.1f5f	ad 54 0c	lda $0c54			lda 	hitSprite1 					; select sprite 1 and read its location
.1f62	20 e5 20	jsr $20e5			jsr 	SelectSpriteA 				; into X
.1f65	28		plp				plp
.1f66	20 0b 22	jsr $220b			jsr 	SpriteReadCoordinate
.1f69	ad 55 0c	lda $0c55			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1f6c	20 e5 20	jsr $20e5			jsr 	SelectSpriteA
.1f6f	e8		inx				inx
.1f70	28		plp				plp
.1f71	20 0b 22	jsr $220b			jsr 	SpriteReadCoordinate
.1f74	ca		dex				dex
.1f75	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1f76	b5 98		lda $98,x			lda 	esInt0,x
.1f78	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1f7a	85 2a		sta $2a				sta 	temp0
.1f7c	b5 a0		lda $a0,x			lda 	esInt1,x
.1f7e	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1f80	85 2b		sta $2b				sta 	temp0+1
.1f82	10 0d		bpl $1f91			bpl 	_FCCIsPositive
.1f84	38		sec				sec 								; if -ve calculate |difference|
.1f85	a9 00		lda #$00			lda 	#0
.1f87	e5 2a		sbc $2a				sbc 	temp0
.1f89	85 2a		sta $2a				sta 	temp0
.1f8b	a9 00		lda #$00			lda 	#0
.1f8d	e5 2b		sbc $2b				sbc 	temp0+1
.1f8f	85 2b		sta $2b				sta 	temp0+1
.1f91					_FCCIsPositive:
.1f91	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1f93	d0 10		bne $1fa5			bne 	_FCCFail
.1f95	18		clc				clc 								; work out required min distance which is
.1f96	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1f98	75 b1		adc $b1,x			adc 	esInt3+1,x
.1f9a	ac 56 0c	ldy $0c56			ldy 	hitRange 					; get the hit range
.1f9d	f0 01		beq $1fa0			beq 	_FCCNoSetRange 				; override if non zero.
.1f9f	98		tya				tya
.1fa0					_FCCNoSetRange:
.1fa0	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1fa2	f0 01		beq $1fa5			beq 	_FCCFail
.1fa4	60		rts				rts
.1fa5					_FCCFail:
.1fa5	18		clc				clc
.1fa6	60		rts				rts
.1fa7					_FCGetSpriteID:
.1fa7	8a		txa				txa
.1fa8	a2 0c		ldx #$0c		ldx	#12
.1faa	20 0b 3e	jsr $3e0b		jsr	mainHandler
.1fad	aa		tax				tax
.1fae	b5 98		lda $98,x			lda 	esInt0,x
.1fb0	30 01		bmi $1fb3			bmi 	_FCGSValue
.1fb2	60		rts				rts
.1fb3					_FCGSValue:
.1fb3	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fb5	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c57					currSprite:
>0c57							.fill 	2
.1fb8					CommandSprite:
.1fb8	20 ba 20	jsr $20ba			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1fbb	d0 0d		bne $1fca			bne 	_CSCheckClear
.1fbd	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1fc0	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1fc2	90 02		bcc $1fc6			bcc 	_CSNotOn 					; if CS turn on, so set it
.1fc4	09 40		ora #$40			ora 	#$40
.1fc6					_CSNotOn:
.1fc6	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1fc9	60		rts				rts
.1fca					_CSCheckClear:
.1fca	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1fcc	8d 58 0c	sta $0c58			sta 	currSprite+1
.1fcf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1fd1	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1fd3	d0 05		bne $1fda			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1fd5	20 cb 20	jsr $20cb			jsr 	CSClearSprites 				; clear all the sprites
.1fd8	c8		iny				iny 								; consume CLEAR token and exit.
.1fd9	60		rts				rts
.1fda					_CSCommandLoop:
.1fda	20 ba 20	jsr $20ba			jsr 	CSCheckOnOff 				; check sprite on/off
.1fdd	f0 2c		beq $200b			beq 	_CSSetVisibility
.1fdf	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1fe1	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1fe3	f0 25		beq $200a			beq 	_CSExit
.1fe5	c8		iny				iny									; consume it
.1fe6	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1fe8	f0 20		beq $200a			beq 	_CSExit
.1fea	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1fec	f0 ec		beq $1fda			beq 	_CSCommandLoop
.1fee	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1ff0	f0 69		beq $205b			beq 	_CSSetImage
.1ff2	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1ff4	f0 2b		beq $2021			beq 	_CSSetFlip
.1ff6	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1ff8	f0 46		beq $2040			beq 	_CSSetPos
.1ffa	88		dey				dey 								; unpick DEY
.1ffb	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1ffd	a2 0c		ldx #$0c		ldx	#12
.1fff	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2002	a5 98		lda $98				lda 	esInt0
.2004	20 e5 20	jsr $20e5			jsr 	SelectSpriteA
.2007	4c da 1f	jmp $1fda			jmp 	_CSCommandLoop
.200a					_CSExit:
.200a	60		rts				rts
.200b					_CSSetVisibility:
.200b	08		php				php 								; save carry
.200c	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.200e	20 a1 20	jsr $20a1			jsr 	SpriteSetTarget
.2011	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2014	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2016	28		plp				plp
.2017	90 02		bcc $201b			bcc 	_CSSetOff 					; check if carry was set
.2019	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.201b					_CSSetOff:
.201b	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.201e	4c da 1f	jmp $1fda			jmp 	_CSCommandLoop
.2021					_CSSetFlip:
.2021	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2023	a2 0c		ldx #$0c		ldx	#12
.2025	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2028	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.202a	20 a1 20	jsr $20a1			jsr 	SpriteSetTarget
.202d	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.202f	29 03		and #$03			and 	#3
.2031	85 2a		sta $2a				sta 	temp0
.2033	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.2036	29 fc		and #$fc			and 	#$FC
.2038	05 2a		ora $2a				ora 	temp0
.203a	8d 23 9f	sta $9f23			sta 	$9F23
.203d	4c da 1f	jmp $1fda			jmp 	_CSCommandLoop
.2040					_CSSetPos:
.2040	a9 00		lda #$00			lda 	#0 							; X now at level 0
.2042	a2 0a		ldx #$0a		ldx	#10
.2044	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2047	a2 02		ldx #$02		ldx	#2
.2049	20 0b 3e	jsr $3e0b		jsr	mainHandler
.204c	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.204e	a2 0a		ldx #$0a		ldx	#10
.2050	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2053	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2055	20 c7 21	jsr $21c7			jsr 	SpriteMove 					; move it.
.2058	4c da 1f	jmp $1fda			jmp 	_CSCommandLoop
.205b					_CSSetImage:
.205b	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.205d	a2 0c		ldx #$0c		ldx	#12
.205f	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2062	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.2064	20 a1 20	jsr $20a1			jsr 	SpriteSetTarget
.2067	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2069	bd 9f 0c	lda $0c9f,x			lda 	imageAddr32Low,x 			; copy low address in.
.206c	8d 23 9f	sta $9f23			sta 	$9F23
.206f	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.2072	bd 5f 0c	lda $0c5f,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2075	29 10		and #$10			and 	#$10
.2077	0a		asl a				asl 	a
.2078	0a		asl a				asl		a
.2079	0a		asl a				asl 	a 							; put into bit 7
.207a	1d df 0c	ora $0cdf,x			ora 	imageAddr32High,x 			; or high address with it.
.207d	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.2080	a9 06		lda #$06			lda 	#6
.2082	20 a1 20	jsr $20a1			jsr 	SpriteSetTarget 			; set sprite on.
.2085	ad 23 9f	lda $9f23			lda 	$9F23
.2088	09 0c		ora #$0c			ora 	#$0C
.208a	8d 23 9f	sta $9f23			sta 	$9F23
.208d	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.2090	bd 5f 0c	lda $0c5f,x			lda 	imageInfo,x 				; get image info
.2093	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.2094	0a		asl a				asl 	a
.2095	0a		asl a				asl 	a
.2096	0a		asl a				asl 	a
.2097	b0 02		bcs $209b			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.2099	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.209b					_CSNoOffset:
.209b	8d 23 9f	sta $9f23			sta 	$9F23
.209e	4c da 1f	jmp $1fda			jmp 	_CSCommandLoop
.20a1					SpriteSetTarget:
.20a1	0d 57 0c	ora $0c57			ora 	currSprite
.20a4	8d 20 9f	sta $9f20			sta 	$9F20
.20a7	ad 58 0c	lda $0c58			lda 	currSprite+1
.20aa	f0 09		beq $20b5			beq 	_SSTNoSet
.20ac	8d 21 9f	sta $9f21			sta 	$9F21
.20af	a9 01		lda #$01			lda 	#$01
.20b1	8d 22 9f	sta $9f22			sta 	$9F22
.20b4	60		rts				rts
.20b5					_SSTNoSet:
.20b5	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.20b7	20 18 15	jsr $1518		jsr	errorHandler
.20ba					CSCheckOnOff:
.20ba	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.20bc	c8		iny				iny
.20bd	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.20bf	18		clc				clc
.20c0	f0 08		beq $20ca			beq 	_CSCOExit
.20c2	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.20c4	38		sec				sec 								; return NE if neither.
.20c5	f0 03		beq $20ca			beq 	_CSCOExit
.20c7	88		dey				dey 								; undo consume
.20c8	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.20ca					_CSCOExit:
.20ca	60		rts				rts
.20cb					CSClearSprites:
.20cb	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.20cd	8d 22 9f	sta $9f22			sta 	$9F22
.20d0	a9 fc		lda #$fc			lda 	#$FC
.20d2	8d 21 9f	sta $9f21			sta 	$9F21
.20d5	a9 00		lda #$00			lda 	#0
.20d7	8d 20 9f	sta $9f20			sta 	$9F20
.20da					_CSClear:
.20da	a9 00		lda #$00			lda 	#0 							; set everything to $00
.20dc	8d 23 9f	sta $9f23			sta 	$9F23
.20df	ad 21 9f	lda $9f21			lda 	$9F21
.20e2	d0 f6		bne $20da			bne 	_CSClear
.20e4	60		rts				rts
.20e5					SelectSpriteA:
.20e5	85 2a		sta $2a				sta 	temp0
.20e7	a9 00		lda #$00			lda 	#0
.20e9	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.20eb	b0 11		bcs $20fe			bcs 	_CSBadValue 				; sprites only 0-127
.20ed	06 2a		asl $2a				asl 	temp0
.20ef	2a		rol a				rol 	a
.20f0	06 2a		asl $2a				asl 	temp0
.20f2	2a		rol a				rol 	a
.20f3	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.20f5	8d 58 0c	sta $0c58			sta 	currSprite+1
.20f8	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.20fa	8d 57 0c	sta $0c57			sta 	currSprite+0
.20fd	60		rts				rts
.20fe					_CSBadValue
.20fe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2100	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0c59					srenderWidth:
>0c59							.fill 	1
.2103					Command_Paint:
.2103	a9 0b		lda #$0b			lda 	#ImageHandler & $FF
.2105	a2 21		ldx #$21			ldx 	#ImageHandler >> 8
.2107	20 d1 18	jsr $18d1			jsr 	GHandler
.210a	60		rts				rts
.210b					ImageHandler:
.210b	a9 12		lda #$12			lda 	#SpriteImageAccess & $FF
.210d	a2 21		ldx #$21			ldx 	#SpriteImageAccess >> 8
.210f	4c 43 1b	jmp $1b43			jmp 	ImageRenderer
.2112					SpriteImageAccess:
.2112	c0 ff		cpy #$ff			cpy 	#255
.2114	d0 22		bne $2138			bne 	_SIAGetPixel
.2116	ae ff 0b	ldx $0bff			ldx 	gdImage 					; get the image #
.2119	bd 5f 0c	lda $0c5f,x			lda 	imageInfo,x 				; get the image information.
.211c	48		pha				pha
.211d	29 03		and #$03			and 	#3 							; LSB x 2 width
.211f	aa		tax				tax
.2120	bd 34 21	lda $2134,x			lda 	_SIASizeTable,x
.2123	8d 59 0c	sta $0c59			sta 	sRenderWidth 				; save rendering width.
.2126	aa		tax				tax
.2127	68		pla				pla 								; get back next 2 bits are height
.2128	4a		lsr a				lsr 	a
.2129	4a		lsr a				lsr 	a
.212a	29 03		and #$03			and 	#3
.212c	a8		tay				tay
.212d	b9 34 21	lda $2134,y			lda 	_SIASizeTable,y
.2130	a8		tay				tay
.2131	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.2133	60		rts				rts
.2134					_SIASizeTable:
>2134	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.2138					_SIAGetPixel:
.2138	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.213a	a9 00		lda #$00			lda 	#0
.213c	85 2b		sta $2b				sta 	temp0+1
.213e	ac ff 0b	ldy $0bff			ldy 	gdImage 					; get image info into A
.2141	b9 5f 0c	lda $0c5f,y			lda 	imageInfo,y
.2144	48		pha				pha
.2145	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.2147	85 2c		sta $2c				sta 	temp1
.2149	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.214a	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.214c	18		clc				clc
.214d	69 03		adc #$03			adc 	#3
.214f	a8		tay				tay
.2150					_SIAMultiply:
.2150	06 2a		asl $2a				asl 	temp0
.2152	26 2b		rol $2b				rol 	temp0+1
.2154	88		dey				dey
.2155	d0 f9		bne $2150			bne 	_SIAMultiply
.2157	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.2159	d0 04		bne $215f			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.215b	46 2b		lsr $2b				lsr 	temp0+1
.215d	66 2a		ror $2a				ror 	temp0
.215f					_SIANoHalf:
.215f	ae ff 0b	ldx $0bff			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.2162	bd 9f 0c	lda $0c9f,x			lda 	imageAddr32Low,x
.2165	85 2e		sta $2e				sta 	temp2
.2167	bd df 0c	lda $0cdf,x			lda 	imageAddr32High,x
.216a	85 2f		sta $2f				sta 	temp2+1
.216c	a9 00		lda #$00			lda 	#0
.216e	85 30		sta $30				sta 	temp3
.2170	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.2172					_SIMult32:
.2172	06 2e		asl $2e				asl 	temp2
.2174	26 2f		rol $2f				rol 	temp2+1
.2176	26 30		rol $30				rol 	temp3
.2178	ca		dex				dex
.2179	d0 f7		bne $2172			bne 	_SIMult32
.217b	ee 25 9f	inc $9f25			inc 	$9F25 						; select alternate data port
.217e	18		clc				clc
.217f	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.2181	65 2e		adc $2e				adc 	temp2
.2183	8d 20 9f	sta $9f20			sta 	$9F20
.2186	a5 2b		lda $2b				lda 	temp0+1
.2188	65 2f		adc $2f				adc 	temp2+1
.218a	8d 21 9f	sta $9f21			sta 	$9F21
.218d	a9 10		lda #$10			lda 	#$10
.218f	65 30		adc $30				adc 	temp3
.2191	8d 22 9f	sta $9f22			sta 	$9F22
.2194	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.2196					_SIFillCacheLoop:
.2196	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.2198	d0 12		bne $21ac			bne 	_SI8Bit
.219a	ad 24 9f	lda $9f24			lda 	$9F24 						; get data
.219d	48		pha				pha 								; save it
.219e	4a		lsr a				lsr 	a 							; MSB first
.219f	4a		lsr a				lsr 	a
.21a0	4a		lsr a				lsr 	a
.21a1	4a		lsr a				lsr 	a
.21a2	20 bc 21	jsr $21bc			jsr 	_SIWrite4Bit
.21a5	68		pla				pla
.21a6	20 bc 21	jsr $21bc			jsr 	_SIWrite4Bit
.21a9	4c b3 21	jmp $21b3			jmp 	_SIAdvance
.21ac					_SI8Bit:
.21ac	ad 24 9f	lda $9f24			lda 	$9F24 						; copy data into render cache
.21af	9d 0c 0c	sta $0c0c,x			sta 	RenderCache,x
.21b2	e8		inx				inx
.21b3					_SIAdvance:
.21b3	ec 59 0c	cpx $0c59			cpx 	sRenderWidth 				; filled the cache to required width ?
.21b6	d0 de		bne $2196			bne 	_SIFillCacheLoop
.21b8	ce 25 9f	dec $9f25			dec 	$9F25 						; select original data port.
.21bb	60		rts				rts
.21bc					_SIWrite4Bit:
.21bc	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.21be	f0 02		beq $21c2			beq 	_SIW4Skip
.21c0	09 f0		ora #$f0			ora 	#$F0
.21c2					_SIW4Skip:
.21c2	9d 0c 0c	sta $0c0c,x			sta 	RenderCache,x
.21c5	e8		inx				inx
.21c6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.21c7					SpriteMove:
.21c7	98		tya				tya
.21c8	48		pha				pha
.21c9	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.21cb	20 a1 20	jsr $20a1			jsr 	SpriteSetTarget
.21ce	ad 23 9f	lda $9f23			lda 	$9F23
.21d1	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.21d2	4a		lsr a				lsr 	a
.21d3	4a		lsr a				lsr 	a
.21d4	4a		lsr a				lsr 	a
.21d5	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.21d7	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.21d9	20 a1 20	jsr $20a1			jsr 	SpriteSetTarget
.21dc	20 eb 21	jsr $21eb			jsr 	SMWritePosition 					; write X position out.
.21df	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.21e1	46 2a		lsr $2a				lsr 	temp0
.21e3	e8		inx				inx 										; get the y position
.21e4	20 eb 21	jsr $21eb			jsr 	SMWritePosition 					; and write that out.
.21e7	ca		dex				dex 										; fix X and quit.
.21e8	68		pla				pla
.21e9	a8		tay				tay
.21ea	60		rts				rts
.21eb					SMWritePosition:
.21eb	a5 2a		lda $2a				lda 	temp0 								; get dim size
.21ed	29 03		and #$03			and 	#3 									; in range into Y
.21ef	a8		tay				tay
.21f0	38		sec				sec
.21f1	b5 98		lda $98,x			lda 	esInt0,x
.21f3	f9 07 22	sbc $2207,y			sbc 	SMHalfSize,y
.21f6	8d 23 9f	sta $9f23			sta 	$9F23
.21f9	ee 20 9f	inc $9f20			inc 	$9F20
.21fc	b5 a0		lda $a0,x			lda 	esInt1,x
.21fe	e9 00		sbc #$00			sbc 	#0
.2200	8d 23 9f	sta $9f23			sta 	$9F23
.2203	ee 20 9f	inc $9f20			inc 	$9F20
.2206	60		rts				rts
.2207					SMHalfSize:
>2207	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.220b					SpriteReadCoordinate:
.220b	98		tya				tya
.220c	48		pha				pha
.220d	08		php				php 										; save CTR on stack
.220e	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2210	20 a1 20	jsr $20a1			jsr 	SpriteSetTarget
.2213	ad 23 9f	lda $9f23			lda 	$9F23
.2216	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2217	4a		lsr a				lsr 	a
.2218	4a		lsr a				lsr 	a
.2219	4a		lsr a				lsr 	a
.221a	28		plp				plp 										; restore CTS
.221b	08		php				php
.221c	90 02		bcc $2220			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.221e	4a		lsr a				lsr 	a
.221f	4a		lsr a				lsr 	a
.2220					_SPRCNotY1:
.2220	29 03		and #$03			and 	#3 									; point into half width/height
.2222	a8		tay				tay
.2223	b9 07 22	lda $2207,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2226	95 b0		sta $b0,x			sta 	esInt3,x
.2228	28		plp				plp 										; CS Y CC X
.2229	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.222b	2a		rol a				rol 	a
.222c	2a		rol a				rol 	a
.222d	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.222f	20 a1 20	jsr $20a1			jsr 	SpriteSetTarget 					; set data pointer offset by that
.2232	18		clc				clc 										; read and unfix centre.
.2233	ad 23 9f	lda $9f23			lda 	$9F23
.2236	75 b0		adc $b0,x			adc 	esInt3,x
.2238	95 98		sta $98,x			sta 	esInt0,x
.223a	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.223d	ad 23 9f	lda $9f23			lda 	$9F23
.2240	69 00		adc #$00			adc 	#0
.2242	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2244	c9 08		cmp #$08			cmp		#$08
.2246	90 02		bcc $224a			bcc 	_SPRCNoSX
.2248	09 f0		ora #$f0			ora 	#$F0
.224a					_SPRCNoSX:
.224a	95 a0		sta $a0,x			sta 	esInt1,x
.224c	68		pla				pla
.224d	a8		tay				tay
.224e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.224f					Sprite_GetX:
.224f	18		clc				clc
.2250	90 01		bcc $2253			bcc 	SpriteGetCode
.2252					Sprite_GetY:
.2252	38		sec				sec
.2253					SpriteGetCode:
.2253	08		php				php 								; CLC : X SEC: Y, save on stack.
.2254	48		pha				pha 								; save stack position
.2255	20 71 22	jsr $2271			jsr 	GetSpriteNumber 			; get # of sprite.
.2258	a2 04		ldx #$04		ldx	#4
.225a	20 0b 3e	jsr $3e0b		jsr	mainHandler
.225d	68		pla				pla
.225e	aa		tax				tax
.225f	28		plp				plp 								; which one ?
.2260	20 0b 22	jsr $220b			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.2263	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.2265	29 80		and #$80			and 	#$80
.2267	f0 02		beq $226b			beq 	_SGXYPos
.2269	a9 ff		lda #$ff			lda 	#$FF
.226b					_SGXYPos:
.226b	95 a8		sta $a8,x			sta 	esInt2,x
.226d	95 b0		sta $b0,x			sta 	esInt3,x
.226f	8a		txa				txa 								; return NSP in A
.2270	60		rts				rts
.2271					GetSpriteNumber:
.2271	48		pha				pha
.2272	a2 0c		ldx #$0c		ldx	#12
.2274	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2277	68		pla				pla
.2278	aa		tax				tax
.2279	b5 98		lda $98,x			lda 	esInt0,x
.227b	20 e5 20	jsr $20e5			jsr 	SelectSpriteA
.227e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c5a					currentMode:
>0c5a							.fill 	4
.227f					ForceMode0:
.227f	a2 00		ldx #$00			ldx 	#0
.2281	86 98		stx $98				stx 	esInt0 						; in case we do it.
.2283					_FMCheck:
.2283	bd 16 23	lda $2316,x			lda 	CMModeList,x 				; do we need to switch ?
.2286	dd 5a 0c	cmp $0c5a,x			cmp 	currentMode,x
.2289	d0 13		bne $229e			bne 	CMSetMode 					; different so switch.
.228b	e8		inx				inx
.228c	e0 04		cpx #$04			cpx 	#4
.228e	d0 f3		bne $2283			bne 	_FMCheck
.2290	60		rts				rts
.2291					CommandMode:
.2291	a9 00		lda #$00			lda 	#0
.2293	a2 0a		ldx #$0a		ldx	#10
.2295	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2298	a5 b0		lda $b0				lda 	esInt3
.229a	29 70		and #$70			and 	#$70
.229c	d0 06		bne $22a4			bne 	CMNoExpand
.229e					CMSetMode:
.229e	20 f5 22	jsr $22f5			jsr 	CMExpandMode
.22a1	4c b8 22	jmp $22b8			jmp 	CMUpdateMode
.22a4					CMNoExpand:
.22a4	a5 98		lda $98				lda 	esInt0
.22a6	8d 5a 0c	sta $0c5a			sta 	currentMode
.22a9	a5 a0		lda $a0				lda 	esInt1
.22ab	8d 5b 0c	sta $0c5b			sta 	currentMode+1
.22ae	a5 a8		lda $a8				lda 	esInt2
.22b0	8d 5c 0c	sta $0c5c			sta 	currentMode+2
.22b3	a5 b0		lda $b0				lda 	esInt3
.22b5	8d 5d 0c	sta $0c5d			sta 	currentMode+3
.22b8					CMUpdateMode:
.22b8	a2 11		ldx #$11			ldx 	#$11
.22ba					_CMClear:
.22ba	a9 00		lda #$00			lda 	#0
.22bc	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.22bf	ca		dex				dex
.22c0	10 f8		bpl $22ba			bpl 	_CMClear
.22c2	ad 5d 0c	lda $0c5d			lda 	currentMode+3 				; get current mode
.22c5	48		pha				pha 								; stack twice.
.22c6	48		pha				pha
.22c7	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.22c9	09 01		ora #$01			ora 	#$01 						; turn the output on.
.22cb	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.22ce	68		pla				pla 								; get back
.22cf	20 26 23	jsr $2326			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22d2	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.22d5	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.22d6	4a		lsr a				lsr 	a
.22d7	4a		lsr a				lsr 	a
.22d8	20 26 23	jsr $2326			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22db	8d 2b 9f	sta $9f2b			sta 	$9F2B
.22de	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.22e0	ad 5a 0c	lda $0c5a			lda 	currentMode					; get L0 config byte
.22e3	20 31 23	jsr $2331			jsr 	CMDecodeLayer 				; and decode layer 0
.22e6	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.22e8	ad 5b 0c	lda $0c5b			lda 	currentMode+1
.22eb	20 31 23	jsr $2331			jsr 	CMDecodeLayer
.22ee	20 7a 1d	jsr $1d7a			jsr 	gdModeChanged 				; check the bitmap status.
.22f1	20 ba 18	jsr $18ba			jsr 	GResetStorage 				; reset the graphics drawing storage.
.22f4	60		rts				rts
.22f5					CMExpandMode:
.22f5	a5 98		lda $98				lda 	esInt0 						; get mode number
.22f7	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.22f9	b0 16		bcs $2311			bcs 	_CMModeError
.22fb	0a		asl a				asl 	a 							; x 4 into X
.22fc	0a		asl a				asl 	a
.22fd	aa		tax				tax
.22fe	98		tya				tya
.22ff	48		pha				pha
.2300	a0 00		ldy #$00			ldy 	#0
.2302					_CMEMCopy:
.2302	bd 16 23	lda $2316,x			lda 	CMModeList,x
.2305	99 5a 0c	sta $0c5a,y			sta 	currentMode,y
.2308	e8		inx				inx
.2309	c8		iny				iny
.230a	c0 04		cpy #$04			cpy 	#4
.230c	d0 f4		bne $2302			bne 	_CMEMCopy
.230e	68		pla				pla
.230f	a8		tay				tay
.2310	60		rts				rts
.2311					_CMModeError:
.2311	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2313	20 18 15	jsr $1518		jsr	errorHandler
.2316					CMModeList:
>2316	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>231a	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>231e	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>2322	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2326					CMEndModeList:
.2326					CMToScale:
.2326	29 03		and #$03			and 	#3 							; lower 2 bits only
.2328	aa		tax				tax 								; put in X for counting
.2329	a9 00		lda #$00			lda 	#0 							; zero result
.232b	38		sec				sec 								; first time rotate CS in
.232c					_CMTSLoop:
.232c	6a		ror a				ror 	a
.232d	ca		dex				dex
.232e	10 fc		bpl $232c			bpl 	_CMTSLoop
.2330	60		rts				rts
.2331					CMDecodeLayer:
.2331	48		pha				pha 								; save it.
.2332	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2334	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.2337	68		pla				pla 								; get it back
.2338	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.233a	f0 02		beq $233e			beq 	_CMDLNotSet
.233c	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.233e					_CMDLNotSet:
.233e	e0 00		cpx #$00			cpx 	#0
.2340	f0 06		beq $2348			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.2342	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2344	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2347	60		rts				rts
.2348					_CMDLayer0:
.2348	09 80		ora #$80			ora 	#$80 						; tile base is $80
.234a	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.234d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.234e					CommandPalette:
.234e	a9 00		lda #$00			lda 	#0
.2350	a2 0c		ldx #$0c		ldx	#12
.2352	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2355	a2 02		ldx #$02		ldx	#2
.2357	20 0b 3e	jsr $3e0b		jsr	mainHandler
.235a	a9 01		lda #$01			lda 	#1
.235c	a2 08		ldx #$08		ldx	#8
.235e	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2361	a5 98		lda $98				lda 	esInt0 					; get palette #
.2363	20 73 23	jsr $2373			jsr 	PointToPaletteA			; point to palette register
.2366	a5 99		lda $99				lda 	esInt0+1
.2368	8d 23 9f	sta $9f23			sta 	$9F23
.236b	a5 a1		lda $a1				lda 	esInt1+1
.236d	29 0f		and #$0f			and 	#$0F
.236f	8d 23 9f	sta $9f23			sta 	$9F23
.2372	60		rts				rts
.2373					PointToPaletteA:
.2373	0a		asl a				asl 	a 							; x 2 -> LSB
.2374	8d 20 9f	sta $9f20			sta 	$9F20
.2377	a9 00		lda #$00			lda 	#0 							; carry into A
.2379	2a		rol a				rol 	a
.237a	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.237c	8d 21 9f	sta $9f21			sta 	$9F21
.237f	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.2381	8d 22 9f	sta $9f22			sta 	$9F22
.2384	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

=$f800					DefaultFont = $F800
.2385					Command_Text:
.2385	a9 8d		lda #$8d			lda 	#TextHandler & $FF
.2387	a2 23		ldx #$23			ldx 	#TextHandler >> 8
.2389	20 d1 18	jsr $18d1			jsr 	GHandler
.238c	60		rts				rts
.238d					TextHandler:
.238d	a9 94		lda #$94			lda 	#BitmapTextAccess & $FF
.238f	a2 23		ldx #$23			ldx 	#BitmapTextAccess >> 8
.2391	4c 43 1b	jmp $1b43			jmp 	ImageRenderer
.2394					BitmapTextAccess:
.2394	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.2396	d0 07		bne $239f			bne 	_BTABitmap
.2398	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.239a	a2 08		ldx #$08			ldx 	#8
.239c	a0 08		ldy #$08			ldy 	#8
.239e	60		rts				rts
.239f					_BTABitmap:
.239f	ad ff 0b	lda $0bff			lda 	gdImage 					; Image => temp0:A
.23a2	20 a6 23	jsr $23a6			jsr 	DrawCharacterA
.23a5	60		rts				rts
.23a6					DrawCharacterA:
.23a6	85 2a		sta $2a				sta 	temp0
.23a8	ad f0 0b	lda $0bf0			lda 	gY2
.23ab	48		pha				pha
.23ac	ad f1 0b	lda $0bf1			lda 	gY2+1
.23af	48		pha				pha
.23b0	a9 00		lda #$00			lda 	#0
.23b2	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.23b4	2a		rol a				rol 	a
.23b5	06 2a		asl $2a				asl 	temp0
.23b7	2a		rol a				rol 	a
.23b8	06 2a		asl $2a				asl 	temp0
.23ba	2a		rol a				rol 	a
.23bb	09 f8		ora #$f8			ora 	#DefaultFont >> 8 			; A now points into font table.
.23bd	ee 25 9f	inc $9f25			inc 	$9F25 						; alternate port set.
.23c0	8d 21 9f	sta $9f21			sta 	$9F21 						; set up address
.23c3	a9 10		lda #$10			lda 	#$10
.23c5	8d 22 9f	sta $9f22			sta 	$9F22
.23c8	84 32		sty $32				sty 	tempShort
.23ca	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.23cc	05 32		ora $32				ora 	tempShort
.23ce	8d 20 9f	sta $9f20			sta 	$9F20 						; address set up.
.23d1	ad 24 9f	lda $9f24			lda 	$9F24 						; get bitmap
.23d4	ce 25 9f	dec $9f25			dec 	$9F25 						; original port set back
.23d7	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.23d9	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.23db					_BTADoCache:
.23db	a9 00		lda #$00			lda 	#0
.23dd	46 2a		lsr $2a				lsr 	temp0
.23df	90 02		bcc $23e3			bcc 	_BTANotSet
.23e1	a9 ff		lda #$ff			lda 	#255
.23e3					_BTANotSet:
.23e3	9d 0c 0c	sta $0c0c,x			sta 	renderCache,x
.23e6	ca		dex				dex
.23e7	10 f2		bpl $23db			bpl 	_BTADoCache
.23e9	68		pla				pla
.23ea	8d f1 0b	sta $0bf1			sta 	gY2+1
.23ed	68		pla				pla
.23ee	8d f0 0b	sta $0bf0			sta 	gY2
.23f1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.23f2					Command_VLoad:
.23f2	a9 00		lda #$00			lda 	#0 								; string which is the file name
.23f4	a2 0e		ldx #$0e		ldx	#14
.23f6	20 0b 3e	jsr $3e0b		jsr	mainHandler
.23f9	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.23fb	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.23fd	95 98		sta $98,x			sta 	esInt0,x
.23ff	a5 36		lda $36				lda 	lowMemory+1
.2401	95 a0		sta $a0,x			sta 	esInt1,x
.2403	a9 00		lda #$00			lda 	#0
.2405	95 a8		sta $a8,x			sta 	esInt2,x
.2407	95 b0		sta $b0,x			sta 	esInt3,x
.2409	a2 0e		ldx #$0e		ldx	#14
.240b	20 f6 14	jsr $14f6		jsr	deviceHandler
.240e	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.2410	85 2a		sta $2a				sta 	temp0
.2412	a5 a1		lda $a1				lda 	esInt1+1
.2414	85 2b		sta $2b				sta 	temp0+1
.2416	20 92 24	jsr $2492			jsr 	LoadVRAMFile 					; load the VRAM file in.
.2419	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.241a					Command_VPoke:
.241a	38		sec				sec 						; one byte , CS
.241b	b0 01		bcs $241e			bcs 	CmdVideoWrite
.241d					Command_VDoke:
.241d	18		clc				clc 						; two bytes, CC
.241e					CmdVideoWrite:
.241e	08		php				php 						; save one or two btes
.241f	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.2421	a2 0a		ldx #$0a		ldx	#10
.2423	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2426	a2 02		ldx #$02		ldx	#2
.2428	20 0b 3e	jsr $3e0b		jsr	mainHandler
.242b	a9 01		lda #$01			lda 	#1
.242d	a2 0a		ldx #$0a		ldx	#10
.242f	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2432	a2 00		ldx #$00			ldx 	#0
.2434	20 45 24	jsr $2445			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2437	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2439	8d 23 9f	sta $9f23			sta 	$9F23
.243c	28		plp				plp 						; if it was Poke then exit
.243d	b0 05		bcs $2444			bcs 	_CVWExit
.243f	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2441	8d 23 9f	sta $9f23			sta 	$9F23
.2444					_CVWExit:
.2444	60		rts				rts
.2445					SetUpTOSVRamAddress:
.2445	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2447	29 fe		and #$fe			and 	#$FE
.2449	15 b0		ora $b0,x			ora 	esInt3,x
.244b	d0 14		bne $2461			bne 	CVWValue
.244d	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.244f	8d 20 9f	sta $9f20			sta 	$9F20
.2452	b5 a0		lda $a0,x			lda 	esInt1,x
.2454	8d 21 9f	sta $9f21			sta	 	$9F21
.2457	b5 a8		lda $a8,x			lda 	esInt2,x
.2459	29 01		and #$01			and 	#1
.245b	09 10		ora #$10			ora 	#$10 				; step 1.
.245d	8d 22 9f	sta $9f22			sta 	$9F22
.2460	60		rts				rts
.2461					CVWValue:
.2461	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2463	20 18 15	jsr $1518		jsr	errorHandler
.2466					Command_VPeek:
.2466	38		sec				sec 						; one byte , CS
.2467	b0 01		bcs $246a			bcs 	CmdVideoRead
.2469					Command_VDeek:
.2469	18		clc				clc 						; two bytes, CC
.246a					CmdVideoRead:
.246a	08		php				php 						; save action on stack.
.246b	48		pha				pha 						; save stack position
.246c	a2 0a		ldx #$0a		ldx	#10
.246e	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2471	a2 04		ldx #$04		ldx	#4
.2473	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2476	68		pla				pla
.2477	aa		tax				tax
.2478	20 45 24	jsr $2445			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.247b	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.247d	95 a0		sta $a0,x			sta 	esInt1,x
.247f	95 a8		sta $a8,x			sta 	esInt2,x
.2481	95 b0		sta $b0,x			sta 	esInt3,x
.2483	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2486	95 98		sta $98,x			sta 	esInt0,x
.2488	28		plp				plp 						; check if DOKE (carry was clear)
.2489	b0 05		bcs $2490			bcs 	_CVRExit
.248b	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.248e	95 a0		sta $a0,x			sta 	esInt1,x
.2490					_CVRExit:
.2490	8a		txa				txa 						; return X position.
.2491	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c5e					compressMode:
>0c5e							.fill 	1
.0c5f					imageInfo:
>0c5f							.fill 	X16MaxImages
.0c9f					imageAddr32Low:
>0c9f							.fill  	X16MaxImages
.0cdf					imageAddr32High:
>0cdf							.fill  	X16MaxImages
.2492					LoadVRAMFile:
.2492	8a		txa				txa
.2493	48		pha				pha
.2494	98		tya				tya
.2495	48		pha				pha
.2496					_LVRLoop:
.2496	20 72 25	jsr $2572			jsr 	LVFGet 						; get the next (never access direct)
.2499	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.249b	f0 42		beq $24df			beq 	_LVRExit
.249d	b0 5c		bcs $24fb			bcs 	_LVRLoad 					; load data in ?
.249f	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.24a1	90 11		bcc $24b4			bcc 	_LVRSetAddress
.24a3	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.24a5	f0 3d		beq $24e4			beq 	_LVRSetPalette
.24a7	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.24a9	90 2d		bcc $24d8			bcc 	_LVRSetCompress
.24ab	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.24ad	90 60		bcc $250f			bcc 	_LVRSetSprite
.24af	a2 01		ldx #$01			ldx 	#ErrorID_missing
.24b1	20 18 15	jsr $1518		jsr	errorHandler
.24b4					_LVRSetAddress:
.24b4	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.24b6	20 72 25	jsr $2572			jsr 	LVFGet
.24b9	85 2c		sta $2c				sta 	temp1
.24bb	a9 00		lda #$00			lda 	#0
.24bd	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.24bf	66 2c		ror $2c				ror 	temp1
.24c1	6a		ror a				ror		a
.24c2	46 2d		lsr $2d				lsr 	temp1+1
.24c4	66 2c		ror $2c				ror 	temp1
.24c6	6a		ror a				ror		a
.24c7	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.24ca	a5 2c		lda $2c				lda 	temp1
.24cc	8d 21 9f	sta $9f21			sta 	$9F21
.24cf	a5 2d		lda $2d				lda 	temp1+1
.24d1	09 10		ora #$10			ora 	#$10
.24d3	8d 22 9f	sta $9f22			sta 	$9F22
.24d6	d0 be		bne $2496			bne 	_LVRLoop
.24d8					_LVRSetCompress:
.24d8	29 07		and #$07			and 	#7
.24da	8d 5e 0c	sta $0c5e			sta 	compressMode
.24dd	10 b7		bpl $2496			bpl 	_LVRLoop
.24df					_LVRExit:
.24df	68		pla				pla
.24e0	a8		tay				tay
.24e1	68		pla				pla
.24e2	aa		tax				tax
.24e3	60		rts				rts
.24e4					_LVRSetPalette:
.24e4	20 72 25	jsr $2572			jsr 	LVFGet 						; get palette id.
.24e7	20 73 23	jsr $2373			jsr 	PointToPaletteA 			; in palette.asm
.24ea	20 72 25	jsr $2572			jsr 	LVFGet 						; copy 12 bit palette data in.
.24ed	8d 23 9f	sta $9f23			sta 	$9F23
.24f0	20 72 25	jsr $2572			jsr 	LVFGet
.24f3	29 0f		and #$0f			and 	#$0F
.24f5	8d 23 9f	sta $9f23			sta 	$9F23
.24f8	4c 96 24	jmp $2496			jmp 	_LVRLoop
.24fb					_LVRLoad:
.24fb	ae 5e 0c	ldx $0c5e			ldx 	compressMode
.24fe	d0 55		bne $2555			bne 	_LVRNotMode0
.2500	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.2502					_LVRLCopyX:
.2502	aa		tax				tax
.2503					_LVRLCopy:
.2503	20 72 25	jsr $2572			jsr 	LVFGet 						; write to data.
.2506	8d 23 9f	sta $9f23			sta 	$9F23
.2509	ca		dex				dex
.250a	d0 f7		bne $2503			bne 	_LVRLCopy
.250c	4c 96 24	jmp $2496			jmp 	_LVRLoop
.250f					_LVRSetSprite:
.250f	48		pha				pha 								; save on stack
.2510	20 72 25	jsr $2572			jsr 	LVFGet 						; get the sprite number into X
.2513	aa		tax				tax
.2514	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.2516	b0 38		bcs $2550			bcs 	_LVRSSValue
.2518	68		pla				pla 								; restore the data held in the first byte
.2519	9d 5f 0c	sta $0c5f,x			sta 	imageInfo,x 				; and write into the sprite image table.
.251c					_LVRAlignVRAM:
.251c	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.251f	29 1f		and #$1f			and 	#$1F
.2521	f0 07		beq $252a			beq 	_LVRAligned
.2523	a9 00		lda #$00			lda 	#$00
.2525	8d 23 9f	sta $9f23			sta 	$9F23
.2528	f0 f2		beq $251c			beq 	_LVRAlignVRAM
.252a					_LVRAligned:
.252a	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.252d	4a		lsr a				lsr 	a 	 						; first halve into temp1
.252e	ad 21 9f	lda $9f21			lda 	$9F21
.2531	6a		ror a				ror 	a
.2532	85 2d		sta $2d				sta 	temp1+1
.2534	ad 20 9f	lda $9f20			lda 	$9F20
.2537	6a		ror a				ror 	a
.2538	85 2c		sta $2c				sta 	temp1
.253a	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.253c					_LVRShift:
.253c	46 2d		lsr $2d				lsr 	temp1+1
.253e	66 2c		ror $2c				ror 	temp1
.2540	88		dey				dey
.2541	d0 f9		bne $253c			bne 	_LVRShift
.2543	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.2545	9d df 0c	sta $0cdf,x			sta 	imageAddr32High,x
.2548	a5 2c		lda $2c				lda 	temp1
.254a	9d 9f 0c	sta $0c9f,x			sta 	imageAddr32Low,x
.254d	4c 96 24	jmp $2496			jmp 	_LVRLoop
.2550					_LVRSSValue:
.2550	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2552	20 18 15	jsr $1518		jsr	errorHandler
.2555					_LVRNotMode0:
.2555	e0 01		cpx #$01			cpx 	#1
.2557	d0 15		bne $256e			bne 	_LVRNotMode1
.2559	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.255b	c9 40		cmp #$40			cmp 	#$40
.255d	90 a3		bcc $2502			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.255f					_LVRRLEGroup:
.255f	29 3f		and #$3f			and 	#$3F
.2561	aa		tax				tax
.2562	20 72 25	jsr $2572			jsr 	LVFGet
.2565					_LVRLEGroupLoop:
.2565	8d 23 9f	sta $9f23			sta 	$9F23
.2568	ca		dex				dex
.2569	d0 fa		bne $2565			bne 	_LVRLEGroupLoop
.256b	4c 96 24	jmp $2496			jmp 	_LVRLoop
.256e					_LVRNotMode1:
>256e	db						.byte 	$DB
.256f	4c 6e 25	jmp $256e			jmp 	_LVRNotMode1
.2572	84 32		sty $32		LVFGet:	sty 	tempShort
.2574	a0 00		ldy #$00			ldy 	#0
.2576	b1 2a		lda ($2a),y			lda 	(temp0),y
.2578	a4 32		ldy $32				ldy	 	tempShort
.257a	e6 2a		inc $2a				inc 	temp0
.257c	d0 02		bne $2580			bne 	_LVFGExit
.257e	e6 2b		inc $2b				inc 	temp0+1
.2580					_LVFGExit:
.2580	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2581					section_end_extension:
.2581					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2581					floatingpointHandler:
.2581	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2583	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.2586					section_end_floatingpoint:
.2586					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2586					ColdStartEntry:
.2586	a2 ff		ldx #$ff			ldx 	#$FF
.2588	9a		txs				txs
.2589	20 12 26	jsr $2612			jsr 	ForceStandardMode
.258c	a2 04		ldx #$04		ldx	#4
.258e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2591	a0 ff		ldy #$ff			ldy 	#255
.2593					_CSBanner:
.2593	c8		iny				iny
.2594	b9 ba 25	lda $25ba,y			lda 	Intro,y
.2597	f0 14		beq $25ad			beq 	_CSStart
.2599	c9 08		cmp #$08			cmp 	#8
.259b	90 08		bcc $25a5			bcc 	_CSInk
.259d	a2 16		ldx #$16		ldx	#22
.259f	20 f6 14	jsr $14f6		jsr	deviceHandler
.25a2	4c 93 25	jmp $2593			jmp 	_CSBanner
.25a5					_CSInk:
.25a5	a2 08		ldx #$08		ldx	#8
.25a7	20 f6 14	jsr $14f6		jsr	deviceHandler
.25aa	4c 93 25	jmp $2593			jmp 	_CSBanner
.25ad					_CSStart:
.25ad	a2 16		ldx #$16		ldx	#22
.25af	20 0b 3e	jsr $3e0b		jsr	mainHandler
.25b2	a2 06		ldx #$06		ldx	#6
.25b4	20 0b 3e	jsr $3e0b		jsr	mainHandler
.25b7	4c d2 26	jmp $26d2			jmp 	WarmStartEntry
>25ba	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>25c2	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>25d2	20 2a 2a 2a 0d 0d
>25d8	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>25e0	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>25f0	32 30 32 31 0d 0d
>25f6	02 42 61 73 69 63 20				.text 	2,"Basic "
>25fd	30 2e 32 30					.text "0.20"
>2601	20 28						.text 	" ("
>2603	30 33 2d 41 70 72 2d 32				.text "03-Apr-2021"
>260b	30 32 31
>260e	29 0d 0d 00					.text 	")",13,13,0
.2612					ForceStandardMode:
.2612	a9 fe		lda #$fe			lda 	#$FE
.2614	20 69 18	jsr $1869		jsr	extensionHandler
.2617	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2618					DeleteLine:
.2618	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.261b	85 2a		sta $2a				sta 	temp0
.261d	ad c9 0a	lda $0ac9			lda 	basePage+1
.2620	85 2b		sta $2b				sta 	temp0+1
.2622	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.2624	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.2626	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2628	d0 07		bne $2631			bne 	_DLNext
.262a	c8		iny				iny
.262b	a5 a0		lda $a0				lda 	esInt1
.262d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.262f	f0 06		beq $2637			beq 	_DLFound
.2631	20 55 26	jsr $2655	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2634	d0 ec		bne $2622			bne 	_DLLoop
.2636	60		rts				rts
.2637					_DLFound:
.2637	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2639	b1 2a		lda ($2a),y			lda 	(temp0),y
.263b	a8		tay				tay 								; so we copy from (temp0),y
.263c	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.263e					_DLCopyDown:
.263e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2640	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2642	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.2644	d0 02		bne $2648			bne 	_DLNoCarry
.2646	e6 2b		inc $2b				inc 	temp0+1
.2648					_DLNoCarry:
.2648	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.264a	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.264c	d0 f0		bne $263e			bne 	_DLCopyDown
.264e	a5 2b		lda $2b				lda 	temp0+1
.2650	c5 36		cmp $36				cmp 	lowMemory+1
.2652	d0 ea		bne $263e			bne 	_DLCopyDown
.2654	60		rts				rts
.2655					IAdvanceTemp0:
.2655	84 32		sty $32				sty 	tempShort
.2657	18		clc				clc
.2658	a0 00		ldy #$00			ldy 	#0 							; get offset
.265a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.265c	65 2a		adc $2a				adc 	temp0
.265e	85 2a		sta $2a				sta 	temp0
.2660	90 02		bcc $2664			bcc 	_IATNoCarry
.2662	e6 2b		inc $2b				inc 	temp0+1
.2664					_IATNoCarry:
.2664	b1 2a		lda ($2a),y			lda 	(temp0),y
.2666	a4 32		ldy $32				ldy 	tempShort
.2668	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.266a	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.266b					InsertLine:
.266b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.266e	85 2a		sta $2a				sta 	temp0
.2670	ad c9 0a	lda $0ac9			lda 	basePage+1
.2673	85 2b		sta $2b				sta 	temp0+1
.2675					_ILLoop:
.2675	a0 01		ldy #$01			ldy 	#1
.2677	b1 2a		lda ($2a),y			lda 	(temp0),y
.2679	c5 98		cmp $98				cmp 	esInt0
.267b	c8		iny				iny
.267c	b1 2a		lda ($2a),y			lda 	(temp0),y
.267e	e5 a0		sbc $a0				sbc 	esInt1
.2680	b0 05		bcs $2687			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2682	20 55 26	jsr $2655			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2685	d0 ee		bne $2675			bne 	_ILLoop
.2687					_ILFound:
.2687	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.2689	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.268b	a5 36		lda $36				lda 	lowMemory+1
.268d	85 2d		sta $2d				sta 	temp1+1
.268f	ad 5c 0e	lda $0e5c			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2692	18		clc				clc 								; add 3 for the line number and offset.
.2693	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2695	a8		tay				tay
.2696	a2 00		ldx #$00			ldx 	#0
.2698	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.269a	91 2c		sta ($2c),y			sta 	(temp1),y
.269c	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.269e	c5 2a		cmp $2a				cmp 	temp0
.26a0	d0 06		bne $26a8			bne 	_ILMNext
.26a2	a5 2d		lda $2d				lda 	temp1+1
.26a4	c5 2b		cmp $2b				cmp 	temp0+1
.26a6	f0 0b		beq $26b3			beq 	_ILMCopy
.26a8					_ILMNext:
.26a8	a5 2c		lda $2c				lda 	temp1
.26aa	d0 02		bne $26ae			bne 	_ILNoBorrow
.26ac	c6 2d		dec $2d				dec 	temp1+1
.26ae					_ILNoBorrow:
.26ae	c6 2c		dec $2c				dec 	temp1
.26b0	4c 98 26	jmp $2698			jmp 	_ILMove 					; and go round again
.26b3					_ILMCopy:
.26b3	98		tya				tya 								; Y is the offset of the new line.
.26b4	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.26b6	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.26b8	a5 98		lda $98				lda 	esInt0
.26ba	91 2a		sta ($2a),y			sta 	(temp0),y
.26bc	c8		iny				iny
.26bd	a5 a0		lda $a0				lda 	esInt1
.26bf	91 2a		sta ($2a),y			sta 	(temp0),y
.26c1	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.26c3					_ILMCopy2:
.26c3	b1 28		lda ($28),y			lda 	(codePtr),y
.26c5	c8		iny				iny
.26c6	c8		iny				iny
.26c7	c8		iny				iny
.26c8	91 2a		sta ($2a),y			sta 	(temp0),y
.26ca	88		dey				dey
.26cb	88		dey				dey
.26cc	cc 5c 0e	cpy $0e5c			cpy 	tokenBufferIndex
.26cf	d0 f2		bne $26c3			bne 	_ILMCopy2
.26d1	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.26d2					WarmStartEntry:
.26d2	a2 ff		ldx #$ff			ldx 	#$FF
.26d4	9a		txs				txs
.26d5	20 12 26	jsr $2612			jsr 	ForceStandardMode
.26d8	a9 02		lda #$02			lda 	#2							; green text.
.26da	a2 08		ldx #$08		ldx	#8
.26dc	20 f6 14	jsr $14f6		jsr	deviceHandler
.26df	a2 0c		ldx #$0c		ldx	#12
.26e1	20 f6 14	jsr $14f6		jsr	deviceHandler
.26e4	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.26e6	85 28		sta $28				sta 	codePtr
.26e8	a5 2b		lda $2b				lda 	temp0+1
.26ea	85 29		sta $29				sta 	codePtr+1
.26ec	a2 06		ldx #$06		ldx	#6
.26ee	20 f6 14	jsr $14f6		jsr	deviceHandler
.26f1	a2 08		ldx #$08		ldx	#8
.26f3	20 4c 49	jsr $494c		jsr	tokeniserHandler
.26f6	c9 00		cmp #$00			cmp 	#0
.26f8	f0 25		beq $271f			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.26fa	a9 59		lda #$59			lda 	#(tokenHeader) & $FF
.26fc	85 28		sta $28				sta 	codePtr
.26fe	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.2700	85 29		sta $29				sta 	1+(codePtr)
.2702	ad 5c 0d	lda $0d5c			lda 	tokenBuffer 				; is it a blank line, go get another line.
.2705	c9 80		cmp #$80			cmp 	#$80
.2707	f0 c9		beq $26d2			beq 	WarmStartEntry
.2709	29 c0		and #$c0			and 	#$C0						; does it start with a number
.270b	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.270d	f0 15		beq $2724			beq 	HasLineNumber
.270f	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2711	8d 59 0d	sta $0d59			sta 	tokenHeader 				; fake program line.
.2714	8d 5a 0d	sta $0d5a			sta 	tokenHeader+1
.2717	8d 5b 0d	sta $0d5b			sta 	tokenHeader+2
.271a	a2 18		ldx #$18		ldx	#24
.271c	20 0b 3e	jsr $3e0b		jsr	mainHandler
.271f					WSEError:
.271f	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2721	20 18 15	jsr $1518		jsr	errorHandler
.2724					HasLineNumber:
.2724	a0 03		ldy #$03			ldy 	#3 							; get line number
.2726	a9 00		lda #$00			lda 	#0
.2728	a2 0a		ldx #$0a		ldx	#10
.272a	20 0b 3e	jsr $3e0b		jsr	mainHandler
.272d	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.272f	05 b0		ora $b0				ora 	esInt3
.2731	d0 ec		bne $271f			bne 	WSEError
.2733	98		tya				tya 								; make codePtr point to code after the line number.
.2734	18		clc				clc 								; by skipping over the tokenised number.
.2735	65 28		adc $28				adc 	codePtr
.2737	85 28		sta $28				sta 	codePtr
.2739	90 02		bcc $273d			bcc		_HLNNoCarry
.273b	e6 29		inc $29				inc 	codePtr+1
.273d					_HLNNoCarry:
.273d	98		tya				tya 								; subtract that offset from the code buffer index
.273e	38		sec				sec
.273f	49 ff		eor #$ff			eor 	#$FF
.2741	6d 5c 0e	adc $0e5c			adc 	tokenBufferIndex
.2744	18		clc				clc 								; add space allowing for header & $80 trailer
.2745	69 04		adc #$04			adc 	#4
.2747	8d 5c 0e	sta $0e5c			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.274a	20 18 26	jsr $2618			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.274d					_HLNNoDelete:
.274d	ad 5c 0e	lda $0e5c			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2750	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2752	f0 0c		beq $2760			beq 	_HLMEditDone
.2754	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.2756	18		clc				clc 								; workspace (1k)
.2757	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.2759	c5 34		cmp $34				cmp 	highMemory+1
.275b	b0 0b		bcs $2768			bcs 	_HLMMemory 					; nope, won't allowit.
.275d	20 6b 26	jsr $266b			jsr 	InsertLine 					; insert the line in
.2760					_HLMEditDone:
.2760	a2 06		ldx #$06		ldx	#6
.2762	20 0b 3e	jsr $3e0b		jsr	mainHandler
.2765	4c d2 26	jmp $26d2			jmp 	WarmStartEntry
.2768					_HLMMemory:
.2768	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.276a	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.276d					interactionHandler:
.276d	7c 70 27	jmp ($2770,x)			jmp 	(interactionVectors,x)
.2770					interactionVectors:
>2770	76 27					.word _DummyControlHandler ; index 0
>2772	86 25					.word ColdStartEntry       ; index 2
>2774	d2 26					.word WarmStartEntry       ; index 4
.2776					_DummyControlHandler:
.2776	60		rts			rts

;******  Return to file: basic.asm

.2777					section_end_interaction:
.2777					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d1f					dataPtr:
>0d1f							.fill 	2
.0d21					dataIndex:
>0d21							.fill 	1
.2777					CommandRead:
.2777	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2779	20 be 36	jsr $36be			jsr 	EvaluateReference
.277c	20 bd 27	jsr $27bd			jsr 	SwapDPCP 					; use the data pointer.
.277f	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2781	c8		iny				iny
.2782	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2784	f0 07		beq $278d			beq 	_CRInData
.2786	88		dey				dey
.2787	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2789	aa		tax				tax
.278a	20 be 2e	jsr $2ebe			jsr 	ScanForward
.278d					_CRInData:
.278d	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.278f	20 66 36	jsr $3666			jsr 	Evaluate
.2792	ca		dex				dex 								; and write the value.
.2793	20 11 2a	jsr $2a11			jsr 	WriteValue
.2796	20 bd 27	jsr $27bd			jsr 	SwapDPCP 					; get the code pointer back.
.2799	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.279b	c8		iny				iny
.279c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.279e	f0 d7		beq $2777			beq 	CommandRead
.27a0	88		dey				dey
.27a1	60		rts				rts
.27a2					CommandData:
.27a2	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.27a4	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.27a6	20 be 2e	jsr $2ebe			jsr 	ScanForward
.27a9	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.27aa	60		rts				rts
.27ab					CommandRestore:
.27ab	ad c8 0a	lda $0ac8			lda 	basePage
.27ae	8d 1f 0d	sta $0d1f			sta 	dataPtr
.27b1	ad c9 0a	lda $0ac9			lda 	basePage+1
.27b4	8d 20 0d	sta $0d20			sta 	dataPtr+1
.27b7	a9 03		lda #$03			lda 	#3
.27b9	8d 21 0d	sta $0d21			sta 	dataIndex
.27bc	60		rts				rts
.27bd					SwapDPCP:
.27bd	8a		txa				txa
.27be	48		pha				pha
.27bf	98		tya				tya 								; swap Y, DataIndex
.27c0	ac 21 0d	ldy $0d21			ldy 	DataIndex
.27c3	8d 21 0d	sta $0d21			sta 	DataIndex
.27c6	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.27c8	ae 1f 0d	ldx $0d1f			ldx 	dataptr
.27cb	8d 1f 0d	sta $0d1f			sta 	dataPtr
.27ce	86 28		stx $28				stx 	codePtr
.27d0	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.27d2	ae 20 0d	ldx $0d20			ldx 	dataptr+1
.27d5	8d 20 0d	sta $0d20			sta 	dataPtr+1
.27d8	86 29		stx $29				stx 	codePtr+1
.27da	68		pla				pla
.27db	aa		tax				tax
.27dc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.27dd					CommandGOSUB:
.27dd	20 83 36	jsr $3683			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.27e0	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.27e2	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.27e4	20 b8 3d	jsr $3db8			jsr 	RSClaim
.27e7	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.27e9	20 e4 3d	jsr $3de4			jsr 	RSSavePosition
.27ec	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.27ee	f0 1b		beq $280b			beq 	GotoTOS 					; and do a GOTO there.
.27f0					CommandRETURN:
.27f0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.27f2	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.27f4	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.27f6	f0 05		beq $27fd			beq 	_isok
.27f8	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.27fa	20 18 15	jsr $1518		jsr	errorHandler
.27fd					_isok:
.27fd	a9 01		lda #$01			lda 	#1
.27ff	20 f7 3d	jsr $3df7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2802	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2804	20 da 3d	jsr $3dda			jsr 	RSFree
.2807	60		rts				rts
.2808					CommandGOTO:
.2808	20 83 36	jsr $3683			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.280b					GotoTOS:
.280b	20 a4 31	jsr $31a4			jsr 	ResetCodeAddress 			; simple search.
.280e					_GotoSearch:
.280e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2810	b1 28		lda ($28),y			lda 	(codePtr),y
.2812	f0 21		beq $2835			beq 	_GotoError 					; not found.
.2814	c8		iny				iny									; check LSB match
.2815	b1 28		lda ($28),y			lda 	(codePtr),y
.2817	d5 98		cmp $98,x			cmp 	esInt0,x
.2819	d0 07		bne $2822			bne 	_GotoNext
.281b	c8		iny				iny
.281c	b1 28		lda ($28),y			lda 	(codePtr),y
.281e	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2820	f0 10		beq $2832			beq 	_GotoFound
.2822					_GotoNext:
.2822	a0 00		ldy #$00			ldy 	#0 							; go next line
.2824	b1 28		lda ($28),y			lda 	(codePtr),y
.2826	18		clc				clc
.2827	65 28		adc $28				adc 	codePtr
.2829	85 28		sta $28				sta 	codePtr
.282b	90 e1		bcc $280e			bcc 	_GotoSearch
.282d	e6 29		inc $29				inc 	codePtr+1
.282f	4c 0e 28	jmp $280e			jmp 	_GotoSearch
.2832					_GotoFound:
.2832	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2834	60		rts				rts
.2835					_GotoError:
.2835	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2837	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0d22					InputBuffer:
>0d22							.fill 	MaxInputSize+1
.283a					Command_Input:
.283a	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.283c	c8		iny				iny
.283d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.283f	f0 f9		beq $283a			beq 	Command_Input
.2841	88		dey				dey 							; undo consume
.2842	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2844	f0 54		beq $289a			beq 	_CIExit 				; : or EOL, exit
.2846	c9 80		cmp #$80			cmp 	#TOK_EOL
.2848	f0 50		beq $289a			beq 	_CIExit
.284a	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.284c	90 12		bcc $2860			bcc 	_CIVariable
.284e	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2850	d0 43		bne $2895			bne 	_CISyntax
.2852	a2 00		ldx #$00			ldx 	#0
.2854	20 7a 36	jsr $367a			jsr 	EvaluateString 			; evaluate and print string
.2857	20 73 2a	jsr $2a73			jsr 	TOSToTemp0
.285a	20 69 29	jsr $2969			jsr 	PrintString
.285d	4c 3a 28	jmp $283a			jmp 	Command_Input
.2860					_CIVariable:
.2860	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2862	20 be 36	jsr $36be			jsr 	EvaluateReference  		; this is where its going
.2865					_CIRetry:
.2865	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2867	a2 14		ldx #$14		ldx	#20
.2869	20 f6 14	jsr $14f6		jsr	deviceHandler
.286c	98		tya				tya
.286d	48		pha				pha
.286e	20 ae 28	jsr $28ae			jsr 	InputString 			; input a string (manually)
.2871	a2 01		ldx #$01			ldx 	#1
.2873	20 9b 28	jsr $289b			jsr 	BufferToStackX 			; make stack,x ref input string.
.2876	a5 90		lda $90				lda 	esType 					; if target type numeric
.2878	29 40		and #$40			and 	#$40 					; then convert to number
.287a	d0 11		bne $288d			bne 	_CIWrite
.287c	a2 01		ldx #$01			ldx 	#1
.287e	20 73 2a	jsr $2a73			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2881	a9 0a		lda #$0a			lda 	#10
.2883	20 8b 3b	jsr $3b8b			jsr 	MInt32FromString 		; convert it back from a string.
.2886	68		pla				pla
.2887	a8		tay				tay
.2888	b0 03		bcs $288d			bcs 	_CIWrite 				; successfully converted.
.288a	18		clc				clc 							; default fail FP conversion
.288b	90 d8		bcc $2865			bcc		_CIRetry				; failed, try again.
.288d					_CIWrite:
.288d	a2 00		ldx #$00			ldx 	#0
.288f	20 11 2a	jsr $2a11			jsr 	WriteValue
.2892	4c 3a 28	jmp $283a			jmp 	Command_Input
.2895					_CISyntax:
.2895	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2897	20 18 15	jsr $1518		jsr	errorHandler
.289a					_CIExit:
.289a	60		rts				rts
.289b					BufferToStackX:
.289b	a9 22		lda #$22			lda 	#InputBuffer & $FF
.289d	95 98		sta $98,x			sta 	esInt0,x
.289f	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.28a1	95 a0		sta $a0,x			sta 	esInt1,x
.28a3	a9 00		lda #$00			lda 	#0
.28a5	95 a8		sta $a8,x			sta 	esInt2,x
.28a7	95 b0		sta $b0,x			sta 	esInt3,x
.28a9	a9 40		lda #$40			lda 	#$40
.28ab	95 90		sta $90,x			sta 	esType,x
.28ad	60		rts				rts
.28ae					InputString:
.28ae	a9 00		lda #$00			lda 	#0
.28b0	8d 22 0d	sta $0d22			sta 	InputBuffer
.28b3					_InputLoop:
.28b3	a2 02		ldx #$02		ldx	#2
.28b5	20 f6 14	jsr $14f6		jsr	deviceHandler
.28b8	a2 0a		ldx #$0a		ldx	#10
.28ba	20 f6 14	jsr $14f6		jsr	deviceHandler
.28bd	c9 00		cmp #$00			cmp 	#0
.28bf	f0 f2		beq $28b3			beq 	_InputLoop
.28c1	c9 08		cmp #$08			cmp 	#8
.28c3	f0 19		beq $28de			beq 	_InputBackspace
.28c5	c9 0d		cmp #$0d			cmp 	#13
.28c7	f0 21		beq $28ea			beq 	_InputExit
.28c9	ae 22 0d	ldx $0d22			ldx 	InputBuffer
.28cc	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.28ce	f0 e3		beq $28b3			beq 	_InputLoop
.28d0	9d 23 0d	sta $0d23,x			sta 	InputBuffer+1,x 		; write char
.28d3	ee 22 0d	inc $0d22			inc 	InputBuffer 			; advance count.
.28d6					_InputPrintLoop:
.28d6	a2 14		ldx #$14		ldx	#20
.28d8	20 f6 14	jsr $14f6		jsr	deviceHandler
.28db	4c b3 28	jmp $28b3			jmp	 	_InputLoop
.28de					_InputBackspace:
.28de	ad 22 0d	lda $0d22			lda 	InputBuffer 			; at start
.28e1	f0 d0		beq $28b3			beq 	_InputLoop
.28e3	ce 22 0d	dec $0d22			dec 	InputBuffer
.28e6	a9 08		lda #$08			lda 	#8
.28e8	d0 ec		bne $28d6			bne 	_InputPrintLoop
.28ea					_InputExit:
.28ea	a2 06		ldx #$06		ldx	#6
.28ec	20 f6 14	jsr $14f6		jsr	deviceHandler
.28ef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d43					lastPrintToken:
>0d43							.fill 	1
.28f0					Command_Print:
.28f0	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.28f2	8d 43 0d	sta $0d43			sta 	lastPrintToken
.28f5	88		dey				dey
.28f6					_PrintLoopSkip:
.28f6	c8		iny				iny
.28f7					_PrintLoop:
.28f7	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.28f9	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.28fb	f0 5b		beq $2958			beq 	_PrintExit
.28fd	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.28ff	f0 57		beq $2958			beq 	_PrintExit
.2901	8d 43 0d	sta $0d43			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2904	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2906	f0 ee		beq $28f6			beq 	_PrintLoopSkip
.2908	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.290a	f0 3c		beq $2948			beq	 	_PrintNewLine
.290c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.290e	f0 40		beq $2950			beq 	_PrintTab
.2910	20 64 36	jsr $3664			jsr 	EvaluateRoot 				; evaluate something at the root
.2913	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2915	85 2a		sta $2a				sta 	temp0
.2917	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2919	85 2b		sta $2b				sta 	1+(temp0)
.291b	a5 90		lda $90				lda 	esType 						; get type
.291d	f0 15		beq $2934			beq		_PrintInteger
.291f	4a		lsr a				lsr 	a 							; check for floating point
.2920	b0 08		bcs $292a			bcs 	_PrintFloat
.2922					_PrintString:
.2922	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2924	20 73 2a	jsr $2a73			jsr 	TOSToTemp0
.2927	4c 42 29	jmp $2942			jmp 	_PrintTemp0 				; print no leading space.
.292a					_PrintFloat:
.292a	a9 00		lda #$00			lda 	#0 							; stack level.
.292c	a2 16		ldx #$16		ldx	#22
.292e	20 81 25	jsr $2581		jsr	floatingpointHandler
.2931	4c 3b 29	jmp $293b			jmp 	_PrintSpaceTemp0
.2934					_PrintInteger:
.2934	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2936	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2938	20 73 3c	jsr $3c73			jsr 	MInt32ToString				; convert to text
.293b					_PrintSpaceTemp0:
.293b	a9 20		lda #$20			lda 	#32
.293d	a2 14		ldx #$14		ldx	#20
.293f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2942					_PrintTemp0:
.2942	20 69 29	jsr $2969			jsr 	PrintString
.2945	4c f7 28	jmp $28f7			jmp 	_PrintLoop
.2948					_PrintNewLine:
.2948	a2 06		ldx #$06		ldx	#6
.294a	20 f6 14	jsr $14f6		jsr	deviceHandler
.294d	4c f6 28	jmp $28f6			jmp 	_PrintLoopSkip
.2950					_PrintTab:
.2950	a2 1a		ldx #$1a		ldx	#26
.2952	20 f6 14	jsr $14f6		jsr	deviceHandler
.2955	4c f6 28	jmp $28f6			jmp 	_PrintLoopSkip
.2958					_PrintExit:
.2958	ad 43 0d	lda $0d43			lda		lastPrintToken 				; check last token
.295b	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.295d	f0 09		beq $2968			beq 	_PrintExit2
.295f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2961	f0 05		beq $2968			beq 	_PrintExit2
.2963	a2 06		ldx #$06		ldx	#6
.2965	20 f6 14	jsr $14f6		jsr	deviceHandler
.2968					_PrintExit2:
.2968	60		rts				rts
.2969					PrintString:
.2969	8a		txa				txa
.296a	48		pha				pha
.296b	98		tya				tya
.296c	48		pha				pha
.296d	a0 00		ldy #$00			ldy 	#0							; get length
.296f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2971	aa		tax				tax 								; into X
.2972	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2974	f0 10		beq $2986			beq 	_PSExit
.2976	ca		dex				dex
.2977	8a		txa				txa
.2978	48		pha				pha
.2979	c8		iny				iny
.297a	b1 2a		lda ($2a),y			lda 	(temp0),y
.297c	a2 14		ldx #$14		ldx	#20
.297e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2981	68		pla				pla
.2982	aa		tax				tax
.2983	4c 72 29	jmp $2972			jmp 	_PSLoop
.2986					_PSExit:
.2986	68		pla				pla
.2987	a8		tay				tay
.2988	68		pla				pla
.2989	aa		tax				tax
.298a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.298b					Command_CLS:
.298b	a2 04		ldx #$04		ldx	#4
.298d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2990	60		rts				rts
.2991					Command_Ink:
.2991	a2 00		ldx #$00			ldx 	#0
.2993	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger
.2996	a2 08		ldx #$08		ldx	#8
.2998	20 f6 14	jsr $14f6		jsr	deviceHandler
.299b	60		rts				rts
.299c					Command_Paper:
.299c	a2 00		ldx #$00			ldx 	#0
.299e	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger
.29a1	a2 12		ldx #$12		ldx	#18
.29a3	20 f6 14	jsr $14f6		jsr	deviceHandler
.29a6	60		rts				rts
.29a7					Command_Locate:
.29a7	a2 00		ldx #$00			ldx 	#0
.29a9	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger
.29ac	20 9d 3d	jsr $3d9d			jsr 	CheckComma
.29af	e8		inx				inx
.29b0	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger
.29b3	98		tya				tya
.29b4	48		pha				pha
.29b5	a4 99		ldy $99				ldy 	esInt0+1
.29b7	a5 98		lda $98				lda 	esInt0
.29b9	a2 10		ldx #$10		ldx	#16
.29bb	20 f6 14	jsr $14f6		jsr	deviceHandler
.29be	68		pla				pla
.29bf	a8		tay				tay
.29c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.29c1					Command_VDU:
.29c1	20 83 36	jsr $3683			jsr 	EvaluateRootInteger 			; get integer at root.
.29c4	a5 98		lda $98				lda 	esInt0
.29c6	a2 14		ldx #$14		ldx	#20
.29c8	20 f6 14	jsr $14f6		jsr	deviceHandler
.29cb					_CVNext:
.29cb	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.29cd	c8		iny				iny
.29ce	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.29d0	f0 ef		beq $29c1			beq 	Command_VDU
.29d2	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.29d4	d0 0a		bne $29e0			bne 	_CVExit
.29d6	a5 a0		lda $a0				lda 	esInt1
.29d8	a2 14		ldx #$14		ldx	#20
.29da	20 f6 14	jsr $14f6		jsr	deviceHandler
.29dd	4c cb 29	jmp $29cb			jmp 	_CVNext
.29e0	88		dey		_CVExit:dey
.29e1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.29e2					Command_Assert:
.29e2	20 83 36	jsr $3683			jsr 	EvaluateRootInteger 		; what is being asserted.
.29e5	20 44 3d	jsr $3d44			jsr 	MInt32Zero 					; is it true ?
.29e8	f0 01		beq $29eb			beq 	_CAError
.29ea	60		rts				rts
.29eb					_CAError:
.29eb	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.29ed	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.29f0					Command_Dim:
.29f0	a2 04		ldx #$04		ldx	#4
.29f2	20 1d 4d	jsr $4d1d		jsr	variableHandler
.29f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.29f7	c8		iny				iny
.29f8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.29fa	f0 f4		beq $29f0			beq 	Command_Dim
.29fc	88		dey				dey 								; unpick get
.29fd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.29fe					CommandLet:
.29fe	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2a00	20 be 36	jsr $36be			jsr 	EvaluateReference
.2a03	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2a05	20 85 3d	jsr $3d85			jsr 	CheckToken
.2a08	e8		inx				inx 								; do RHS
.2a09	20 66 36	jsr $3666			jsr 	Evaluate 					; evaluate and dereference
.2a0c	ca		dex				dex
.2a0d	20 11 2a	jsr $2a11			jsr 	WriteValue 					; write it out
.2a10	60		rts				rts
.2a11					WriteValue:
.2a11	98		tya				tya
.2a12	48		pha				pha
.2a13	20 73 2a	jsr $2a73			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2a16	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2a18	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2a1a	29 40		and #$40			and 	#$40
.2a1c	d0 50		bne $2a6e			bne		_WVType
.2a1e	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2a20	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2a22	29 40		and #$40			and 	#$40
.2a24	d0 1f		bne $2a45			bne 	_WVCopyString
.2a26	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2a28	15 91		ora $91,x			ora 	esType+1,x
.2a2a	4a		lsr a				lsr 	a
.2a2b	90 22		bcc $2a4f			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2a2d	b5 90		lda $90,x			lda 	esType,x
.2a2f	4a		lsr a				lsr 	a
.2a30	90 3c		bcc $2a6e			bcc 	_WVType
.2a32	e8		inx				inx 								; force the value being written to be a float.
.2a33	20 c8 32	jsr $32c8			jsr 	BPMakeFloat
.2a36	ca		dex				dex
.2a37	20 73 2a	jsr $2a73			jsr 	TOSToTemp0 					; set Temp0 to write address
.2a3a	e8		inx				inx
.2a3b	8a		txa				txa
.2a3c	a2 22		ldx #$22		ldx	#34
.2a3e	20 81 25	jsr $2581		jsr	floatingpointHandler
.2a41	aa		tax				tax
.2a42	4c 6b 2a	jmp $2a6b			jmp 	_WVCopyExit
.2a45					_WVCopyString:
.2a45	8a		txa				txa
.2a46	a2 10		ldx #$10		ldx	#16
.2a48	20 c8 40	jsr $40c8		jsr	stringHandler
.2a4b	aa		tax				tax
.2a4c	4c 6b 2a	jmp $2a6b			jmp 	_WVCopyExit
.2a4f					_WVCopyData4:
.2a4f	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2a51	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2a53	d0 10		bne $2a65			bne 	_WVCopyData1
.2a55	a0 03		ldy #$03			ldy 	#3
.2a57	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2a59	91 2a		sta ($2a),y			sta 	(temp0),y
.2a5b	88		dey				dey
.2a5c	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2a5e	91 2a		sta ($2a),y			sta 	(temp0),y
.2a60	88		dey				dey
.2a61	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2a63	91 2a		sta ($2a),y			sta 	(temp0),y
.2a65					_WVCopyData1:
.2a65	a0 00		ldy #$00			ldy 	#0
.2a67	b5 99		lda $99,x			lda 	esInt0+1,x
.2a69	91 2a		sta ($2a),y			sta 	(temp0),y
.2a6b					_WVCopyExit:
.2a6b	68		pla				pla
.2a6c	a8		tay				tay
.2a6d	60		rts				rts
.2a6e					_WVType:
.2a6e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a70	20 18 15	jsr $1518		jsr	errorHandler
.2a73					TOSToTemp0:
.2a73	b5 98		lda $98,x			lda 	esInt0,x
.2a75	85 2a		sta $2a				sta 	temp0
.2a77	b5 a0		lda $a0,x			lda 	esInt1,x
.2a79	85 2b		sta $2b				sta 	temp0+1
.2a7b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2a7c					Command_Poke:
.2a7c	a9 01		lda #$01			lda 	#1
.2a7e	d0 06		bne $2a86			bne 	PokeGeneral
.2a80					Command_Doke:
.2a80	a9 02		lda #$02			lda 	#2
.2a82	d0 02		bne $2a86			bne 	PokeGeneral
.2a84					Command_Loke:
.2a84	a9 03		lda #$03			lda 	#3
.2a86					PokeGeneral:
.2a86	48		pha				pha 								; save id (PDL = 123)
.2a87	20 83 36	jsr $3683			jsr 	EvaluateRootInteger 		; target address
.2a8a	20 9d 3d	jsr $3d9d			jsr	 	CheckComma
.2a8d	e8		inx				inx
.2a8e	20 85 36	jsr $3685			jsr 	EvaluateInteger 			; what value to POKE ?
.2a91	ca		dex				dex
.2a92	20 73 2a	jsr $2a73			jsr 	TOSToTemp0 					; temp0 points to the target address
.2a95	84 32		sty $32				sty 	tempShort 					; save Y
.2a97	68		pla				pla 								; get copy type (1-3) and dispatch
.2a98	aa		tax				tax
.2a99	ca		dex				dex
.2a9a	f0 14		beq $2ab0			beq 	_Poke1
.2a9c	ca		dex				dex
.2a9d	f0 0b		beq $2aaa			beq 	_Poke2
.2a9f	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2aa1	a5 b1		lda $b1				lda 	esInt3+1
.2aa3	91 2a		sta ($2a),y			sta 	(temp0),y
.2aa5	88		dey				dey
.2aa6	a5 a9		lda $a9				lda 	esInt2+1
.2aa8	91 2a		sta ($2a),y			sta 	(temp0),y
.2aaa					_Poke2:
.2aaa	a0 01		ldy #$01			ldy 	#1
.2aac	a5 a1		lda $a1				lda 	esInt1+1
.2aae	91 2a		sta ($2a),y			sta 	(temp0),y
.2ab0					_Poke1:
.2ab0	a0 00		ldy #$00			ldy 	#0
.2ab2	a5 99		lda $99				lda 	esInt0+1
.2ab4	91 2a		sta ($2a),y			sta 	(temp0),y
.2ab6	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2ab8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2ab9					Command_Rem:
.2ab9					Command_Rem2:
.2ab9	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2abb	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2abd	d0 06		bne $2ac5			bne 	_CRNotString
.2abf	c8		iny				iny
.2ac0	98		tya				tya
.2ac1	38		sec				sec
.2ac2	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2ac4	a8		tay				tay
.2ac5					_CRNotString:
.2ac5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2ac6					CommandStop:
.2ac6	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2ac8	20 18 15	jsr $1518		jsr	errorHandler
.2acb					CommandEnd:
.2acb	4c 06 3e	jmp $3e06			jmp 	WarmStart
.2ace					CommandXemu:
.2ace	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2ad1					AdvanceNextLine:
.2ad1	a0 00		ldy #$00			ldy 	#0 							; get offset
.2ad3	b1 28		lda ($28),y			lda 	(codePtr),y
.2ad5	18		clc				clc 								; add to codePtr
.2ad6	65 28		adc $28				adc 	codePtr
.2ad8	85 28		sta $28				sta 	codePtr
.2ada	90 02		bcc $2ade			bcc 	_ANLNoCarry
.2adc	e6 29		inc $29				inc 	codePtr+1
.2ade					_ANLNoCarry:
.2ade	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2ae0	f0 e9		beq $2acb			beq 	CommandEnd 					; execute END
.2ae2	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2ae4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2ae5					Command_FOR:
.2ae5	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2ae7	a2 0b		ldx #$0b			ldx 	#11
.2ae9	20 b8 3d	jsr $3db8			jsr 	RSClaim
.2aec	20 fe 29	jsr $29fe			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2aef	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2af1	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2af3	d0 4c		bne $2b41			bne 	_CFType
.2af5	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2af7	20 85 3d	jsr $3d85			jsr 	CheckToken
.2afa	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2afc	20 85 36	jsr $3685			jsr 	EvaluateInteger				; get terminal value in stack 1
.2aff	98		tya				tya
.2b00	48		pha				pha
.2b01	a0 04		ldy #$04			ldy 	#4
.2b03	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2b05	91 37		sta ($37),y			sta 	(rsPointer),y
.2b07	c8		iny				iny
.2b08	a5 a0		lda $a0				lda		esInt1
.2b0a	91 37		sta ($37),y			sta 	(rsPointer),y
.2b0c	c8		iny				iny
.2b0d	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2b0f	91 37		sta ($37),y			sta 	(rsPointer),y
.2b11	c8		iny				iny
.2b12	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2b14	91 37		sta ($37),y			sta 	(rsPointer),y
.2b16	c8		iny				iny
.2b17	a5 a1		lda $a1				lda		esInt1+1
.2b19	91 37		sta ($37),y			sta 	(rsPointer),y
.2b1b	c8		iny				iny
.2b1c	a5 a9		lda $a9				lda		esInt2+1
.2b1e	91 37		sta ($37),y			sta 	(rsPointer),y
.2b20	c8		iny				iny
.2b21	a5 b1		lda $b1				lda		esInt3+1
.2b23	91 37		sta ($37),y			sta 	(rsPointer),y
.2b25	68		pla				pla
.2b26	a8		tay				tay
.2b27	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2b29	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2b2b	d0 0e		bne $2b3b			bne 	_CFDone
.2b2d	c8		iny				iny									; skip over step.
.2b2e	20 85 36	jsr $3685			jsr 	EvaluateInteger 			; get step
.2b31	98		tya				tya
.2b32	48		pha				pha
.2b33	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2b35	a0 06		ldy #$06			ldy 	#6
.2b37	91 37		sta ($37),y			sta 	(rsPointer),y
.2b39	68		pla				pla
.2b3a	a8		tay				tay
.2b3b					_CFDone:
.2b3b	a9 01		lda #$01			lda 	#1
.2b3d	20 e4 3d	jsr $3de4			jsr 	RSSavePosition 				; save position.
.2b40	60		rts				rts
.2b41					_CFType:
.2b41	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b43	20 18 15	jsr $1518		jsr	errorHandler
.2b46					Command_NEXT:
.2b46	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b48	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2b4a	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2b4c	f0 05		beq $2b53			beq 	_isok
.2b4e	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2b50	20 18 15	jsr $1518		jsr	errorHandler
.2b53					_isok:
.2b53	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2b55	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2b57	b0 18		bcs $2b71			bcs 	_CNNoIndex
.2b59	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2b5b	20 be 36	jsr $36be			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2b5e	98		tya				tya
.2b5f	48		pha				pha
.2b60	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2b62	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b64	d5 98		cmp $98,x			cmp 	esInt0,x
.2b66	d0 76		bne $2bde			bne 	_CNBadIndex
.2b68	c8		iny				iny
.2b69	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b6b	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2b6d	d0 6f		bne $2bde			bne 	_CNBadIndex
.2b6f	68		pla				pla
.2b70	a8		tay				tay
.2b71					_CNNoIndex:
.2b71	98		tya				tya
.2b72	48		pha				pha
.2b73	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2b75	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b77	85 2a		sta $2a				sta 	temp0
.2b79	c8		iny				iny
.2b7a	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b7c	85 2b		sta $2b				sta 	temp0+1
.2b7e	c8		iny				iny
.2b7f	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2b81	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2b83	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2b85	10 01		bpl $2b88			bpl 	_CNSignX
.2b87	ca		dex				dex  								; X = $FF
.2b88					_CNSignX:
.2b88	18		clc				clc 								; add to the LSB
.2b89	a0 00		ldy #$00			ldy 	#0
.2b8b	71 2a		adc ($2a),y			adc 	(temp0),y
.2b8d	91 2a		sta ($2a),y			sta 	(temp0),y
.2b8f					_CNPropogate:
.2b8f	c8		iny				iny  								; add the sign extended in X to the rest.
.2b90	8a		txa				txa
.2b91	71 2a		adc ($2a),y			adc 	(temp0),y
.2b93	91 2a		sta ($2a),y			sta 	(temp0),y
.2b95	c8		iny				iny
.2b96	8a		txa				txa
.2b97	71 2a		adc ($2a),y			adc 	(temp0),y
.2b99	91 2a		sta ($2a),y			sta 	(temp0),y
.2b9b	c8		iny				iny
.2b9c	8a		txa				txa
.2b9d	71 2a		adc ($2a),y			adc 	(temp0),y
.2b9f	91 2a		sta ($2a),y			sta 	(temp0),y
.2ba1	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2ba2	a5 37		lda $37				lda 	rsPointer
.2ba4	69 07		adc #$07			adc 	#7
.2ba6	85 2c		sta $2c				sta 	temp1
.2ba8	a9 00		lda #$00			lda 	#0
.2baa	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2bac	a8		tay				tay 								; and clear the Y register again.
.2bad	65 38		adc $38				adc 	rsPointer+1
.2baf	85 2d		sta $2d				sta 	temp1+1
.2bb1	38		sec				sec 								; calculate current - limit oring interim values.
.2bb2	20 ea 2b	jsr $2bea			jsr 	_CNCompare 					; each of these does a byte.
.2bb5	20 ea 2b	jsr $2bea			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2bb8	20 ea 2b	jsr $2bea			jsr 	_CNCompare 					; and the carry of the subtraction.
.2bbb	20 ea 2b	jsr $2bea			jsr 	_CNCompare
.2bbe	50 02		bvc $2bc2			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2bc0	49 80		eor #$80			eor 	#$80
.2bc2					_CNNoOverflow:
.2bc2	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2bc4	30 1d		bmi $2be3			bmi 	_CNCheckDownto
.2bc6	c9 00		cmp #$00			cmp 	#0
.2bc8	30 0c		bmi $2bd6			bmi 	_CNLoopRound 				; loop round if < =
.2bca	a5 2e		lda $2e				lda 	temp2
.2bcc	f0 08		beq $2bd6			beq 	_CNLoopRound
.2bce					_CNLoopExit:
.2bce	68		pla				pla
.2bcf	a8		tay				tay
.2bd0	a9 0b		lda #$0b			lda 	#11
.2bd2	20 da 3d	jsr $3dda			jsr 	RSFree
.2bd5	60		rts				rts
.2bd6					_CNLoopRound:
.2bd6	68		pla				pla
.2bd7	a8		tay				tay
.2bd8	a9 01		lda #$01			lda 	#1
.2bda	20 f7 3d	jsr $3df7			jsr 	RSLoadPosition				; go back to the loop top
.2bdd	60		rts				rts
.2bde					_CNBadIndex:
.2bde	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2be0	20 18 15	jsr $1518		jsr	errorHandler
.2be3					_CNCheckDownto:
.2be3	c9 00		cmp #$00			cmp 	#0
.2be5	10 ef		bpl $2bd6			bpl 	_CNLoopRound
.2be7	4c ce 2b	jmp $2bce			jmp 	_CNLoopExit
.2bea					_CNCompare:
.2bea	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2bec	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2bee	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2bf0	85 2e		sta $2e				sta 	temp2
.2bf2	c8		iny				iny
.2bf3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2bf4					CommandIf:
.2bf4	20 83 36	jsr $3683			jsr 	EvaluateRootInteger 		; get what's being tested.
.2bf7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2bf9	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2bfb	f0 04		beq $2c01			beq 	_IfSimple
.2bfd	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2bff	d0 1b		bne $2c1c			bne 	_IfComplex
.2c01					_IfSimple:
.2c01	20 44 3d	jsr $3d44			jsr 	MInt32Zero					; check if TOS zero
.2c04	f0 10		beq $2c16			beq 	_IfEOL 						; go to next line.
.2c06	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2c08	c8		iny				iny
.2c09	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2c0b	f0 0c		beq $2c19			beq 	_IfGoto 					; do the Goto code
.2c0d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2c0f	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2c11	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2c13	f0 04		beq $2c19			beq 	_IfGoto
.2c15	60		rts				rts 								; else continue on this line.
.2c16					_IfEOL:
.2c16	4c d1 2a	jmp $2ad1			jmp 	AdvanceNextLine 			; go to next line
.2c19					_IfGoto:
.2c19	4c 08 28	jmp $2808			jmp 	CommandGoto
.2c1c					_IfComplex:
.2c1c	20 44 3d	jsr $3d44			jsr 	MInt32Zero 					; is it true ?
.2c1f	f0 01		beq $2c22			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2c21	60		rts				rts 								; else continue.
.2c22					_IFSkip:
.2c22	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2c24	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2c26	4c be 2e	jmp $2ebe			jmp		ScanForward
.2c29					Command_ELSE:
.2c29	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2c2b	8a		txa				txa
.2c2c	4c be 2e	jmp $2ebe			jmp		ScanForward
.2c2f					Command_ENDIF:
.2c2f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d44					storeSize:
>0d44							.fill 	1
.2c30					CommandLocal:
.2c30	a2 00		ldx #$00			ldx 	#0
.2c32	20 4e 2c	jsr $2c4e			jsr 	LocaliseVariable 			; localise one.
.2c35					_CLCheckNext:
.2c35	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2c37	c8		iny				iny
.2c38	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2c3a	f0 06		beq $2c42			beq 	_CLAssignment
.2c3c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2c3e	f0 f0		beq $2c30			beq 	CommandLocal
.2c40	88		dey				dey
.2c41	60		rts				rts
.2c42					_CLAssignment:
.2c42	a2 01		ldx #$01			ldx 	#1
.2c44	20 66 36	jsr $3666			jsr 	Evaluate 					; evaluate RHS
.2c47	ca		dex				dex
.2c48	20 11 2a	jsr $2a11			jsr 	WriteValue
.2c4b	4c 35 2c	jmp $2c35			jmp 	_CLCheckNext
.2c4e					LocaliseVariable:
.2c4e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2c50	c9 40		cmp #$40			cmp 	#$40
.2c52	b0 67		bcs $2cbb			bcs 	_LVSyntax
.2c54	8a		txa				txa 								; get the address of that variable.
.2c55	a2 02		ldx #$02		ldx	#2
.2c57	20 1d 4d	jsr $4d1d		jsr	variableHandler
.2c5a	aa		tax				tax
.2c5b	8a		txa				txa
.2c5c	48		pha				pha
.2c5d	98		tya				tya
.2c5e	48		pha				pha
.2c5f	20 73 2a	jsr $2a73			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2c62	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2c64	0a		asl a				asl 	a
.2c65	10 16		bpl $2c7d			bpl 	_LVPushNumber
.2c67	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2c69	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c6b	c8		iny				iny
.2c6c	85 2c		sta $2c				sta 	temp1
.2c6e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c70	85 2d		sta $2d				sta 	temp1+1
.2c72	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2c74	b1 2c		lda ($2c),y			lda 	(temp1),y
.2c76	aa		tax				tax 								; into X
.2c77	e8		inx				inx 								; +1 for length.
.2c78	a9 24		lda #$24			lda 	#markerString
.2c7a	4c 92 2c	jmp $2c92			jmp 	_LVWriteFrame
.2c7d					_LVPushNumber:
.2c7d	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2c7f	85 2c		sta $2c				sta 	temp1
.2c81	a5 2b		lda $2b				lda 	temp0+1
.2c83	85 2d		sta $2d				sta 	temp1+1
.2c85	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2c87	4a		lsr a				lsr 	a
.2c88	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2c8a	a2 04		ldx #$04			ldx 	#VarISize
.2c8c	90 04		bcc $2c92			bcc 	_LVIsInteger
.2c8e	a9 23		lda #$23			lda 	#markerFloat
.2c90	a2 06		ldx #$06			ldx 	#VarFSize
.2c92					_LVIsInteger:
.2c92					_LVWriteFrame:
.2c92	8e 44 0d	stx $0d44			stx 	storeSize 					; number of bytes to copy from (temp0)
.2c95	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2c96	e8		inx				inx
.2c97	e8		inx				inx
.2c98	20 b8 3d	jsr $3db8			jsr 	RSClaim 					; create the stack frame.
.2c9b	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2c9d	a0 01		ldy #$01			ldy 	#1
.2c9f	91 37		sta ($37),y			sta 	(rsPointer),y
.2ca1	c8		iny				iny
.2ca2	a5 2b		lda $2b				lda 	temp0+1
.2ca4	91 37		sta ($37),y			sta 	(rsPointer),y
.2ca6	a0 00		ldy #$00			ldy 	#0
.2ca8					_LVCopyData:
.2ca8	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2caa	c8		iny				iny 								; write allowing for the header bit.
.2cab	c8		iny				iny
.2cac	c8		iny				iny
.2cad	91 37		sta ($37),y			sta 	(rsPointer),y
.2caf	88		dey				dey
.2cb0	88		dey				dey
.2cb1	ce 44 0d	dec $0d44			dec 	storeSize 					; do it storesize times
.2cb4	d0 f2		bne $2ca8			bne 	_LVCopyData
.2cb6	68		pla				pla
.2cb7	a8		tay				tay
.2cb8	68		pla				pla
.2cb9	aa		tax				tax
.2cba	60		rts				rts
.2cbb					_LVSyntax:
.2cbb	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2cbd	20 18 15	jsr $1518		jsr	errorHandler
.2cc0					RestoreLocals:
.2cc0	a2 00		ldx #$00			ldx 	#0
.2cc2	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2cc4	c9 40		cmp #$40			cmp	 	#64
.2cc6	90 01		bcc $2cc9			bcc 	_RLocal
.2cc8	60		rts				rts
.2cc9					_RLocal:
.2cc9	8a		txa				txa
.2cca	48		pha				pha
.2ccb	98		tya				tya
.2ccc	48		pha				pha
.2ccd	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2ccf	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cd1	85 2a		sta $2a				sta 	temp0
.2cd3	c8		iny				iny
.2cd4	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cd6	85 2b		sta $2b				sta 	temp0+1
.2cd8	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2cda	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cdc	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2cde	f0 28		beq $2d08			beq 	_RString
.2ce0	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2ce2	c9 25		cmp #$25			cmp 	#markerInt
.2ce4	f0 02		beq $2ce8			beq 	_RIsInteger
.2ce6	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2ce8					_RIsInteger:
.2ce8	8a		txa				txa
.2ce9	48		pha				pha
.2cea	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2cec					_RCopyBack:
.2cec	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cee	88		dey				dey
.2cef	88		dey				dey
.2cf0	88		dey				dey
.2cf1	91 2a		sta ($2a),y			sta 	(temp0),y
.2cf3	c8		iny				iny
.2cf4	c8		iny				iny
.2cf5	c8		iny				iny
.2cf6	c8		iny				iny
.2cf7	ca		dex				dex
.2cf8	d0 f2		bne $2cec			bne 	_RCopyBack
.2cfa	68		pla				pla 								; get size add 3
.2cfb	18		clc				clc
.2cfc	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2cfe					_RRestoreAAndLoop:
.2cfe	20 da 3d	jsr $3dda			jsr 	RSFree
.2d01	68		pla				pla
.2d02	a8		tay				tay
.2d03	68		pla				pla
.2d04	aa		tax				tax
.2d05	4c c0 2c	jmp $2cc0			jmp 	RestoreLocals 				; go see if there are any more locals.
.2d08					_RString:
.2d08	a2 00		ldx #$00			ldx 	#0
.2d0a	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2d0c	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d0e	95 98		sta $98,x			sta 	esInt0,x
.2d10	c8		iny				iny
.2d11	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d13	95 a0		sta $a0,x			sta 	esInt1,x
.2d15	18		clc				clc
.2d16	a5 37		lda $37				lda 	rsPointer
.2d18	69 03		adc #$03			adc 	#3
.2d1a	95 99		sta $99,x			sta 	esInt0+1,x
.2d1c	a5 38		lda $38				lda 	rsPointer+1
.2d1e	69 00		adc #$00			adc 	#0
.2d20	95 a1		sta $a1,x			sta 	esInt1+1,x
.2d22	8a		txa				txa
.2d23	a2 10		ldx #$10		ldx	#16
.2d25	20 c8 40	jsr $40c8		jsr	stringHandler
.2d28	a0 03		ldy #$03			ldy 	#3 							; get string length
.2d2a	b1 37		lda ($37),y			lda 	(rsPointer),y
.2d2c	18		clc				clc
.2d2d	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2d2f	4c fe 2c	jmp $2cfe			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d45					paramCount:
>0d45							.fill 	1
.2d32					CallProc:
.2d32	20 ba 2d	jsr $2dba			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2d35	48		pha				pha 								; save length on stack
.2d36	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2d38	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2d3a	48		pha				pha
.2d3b	a5 2a		lda $2a				lda 	temp0
.2d3d	48		pha				pha
.2d3e	98		tya				tya 								; calculate Y + length
.2d3f	18		clc				clc
.2d40	65 32		adc $32				adc 	tempShort
.2d42	a8		tay				tay
.2d43	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2d45					_CallProcEvalParams:
.2d45	e8		inx				inx
.2d46	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2d48	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2d4a	f0 0b		beq $2d57			beq 	_CPDoneParams
.2d4c	20 66 36	jsr $3666			jsr 	Evaluate 					; evaluate a parameter
.2d4f	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2d51	c8		iny				iny
.2d52	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2d54	f0 ef		beq $2d45			beq 	_CallProcEvalParams
.2d56	88		dey				dey 								; undo consumption.
.2d57					_CPDoneParams:
.2d57	20 90 3d	jsr $3d90			jsr 	CheckRightParen 			; check closing parenthesis.
.2d5a	8e 45 0d	stx $0d45			stx 	paramCount 					; store parameter count+1
.2d5d	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2d5f	a9 50		lda #$50			lda 	#markerPROC
.2d61	20 b8 3d	jsr $3db8			jsr 	RSClaim
.2d64	a9 01		lda #$01			lda 	#1 							; store return address.
.2d66	20 e4 3d	jsr $3de4			jsr 	RSSavePosition
.2d69	68		pla				pla 								; get the new code Ptr
.2d6a	85 28		sta $28				sta 	codePtr
.2d6c	68		pla				pla
.2d6d	85 29		sta $29				sta 	codePtr+1
.2d6f	68		pla				pla 								; length of name + 4 is the param start.
.2d70	18		clc				clc
.2d71	69 04		adc #$04			adc 	#4
.2d73	a8		tay				tay
.2d74	a2 ff		ldx #$ff			ldx 	#$FF
.2d76					_CPLoadParameters:
.2d76	e8		inx				inx 								; point to where the address should be loaded.
.2d77	ec 45 0d	cpx $0d45			cpx 	paramCount 					; too many parameters in definition ?
.2d7a	f0 1e		beq $2d9a			beq 	_CPParamError
.2d7c	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2d7e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2d80	f0 0e		beq $2d90			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2d82	20 4e 2c	jsr $2c4e			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2d85	20 11 2a	jsr $2a11			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2d88	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2d8a	c8		iny				iny
.2d8b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2d8d	f0 e7		beq $2d76			beq 	_CPLoadParameters
.2d8f	88		dey				dey 								; no, unconsume and check for )
.2d90					_CPParamComplete:
.2d90	20 90 3d	jsr $3d90			jsr 	CheckRightParen 			; check )
.2d93	e8		inx				inx 								; check right number of parameters have been consumed
.2d94	ec 45 0d	cpx $0d45			cpx 	paramCount
.2d97	d0 01		bne $2d9a			bne 	_CPParamError
.2d99	60		rts				rts
.2d9a					_CPParamError:
.2d9a	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2d9c	20 18 15	jsr $1518		jsr	errorHandler
.2d9f					ReturnProc:
.2d9f	20 c0 2c	jsr $2cc0			jsr 	RestoreLocals 				; get the locals back.
.2da2	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2da4	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2da6	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2da8	f0 05		beq $2daf			beq 	_isok
.2daa	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2dac	20 18 15	jsr $1518		jsr	errorHandler
.2daf					_isok:
.2daf	a9 01		lda #$01			lda 	#1
.2db1	20 f7 3d	jsr $3df7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2db4	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2db6	20 da 3d	jsr $3dda			jsr 	RSFree
.2db9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d46					procList:
>0d46							.fill 	2		 					; terminated by name high being zero.
.0d48					yInLine:
>0d48							.fill 	1
.2dba					FindProcedure:
.2dba	8c 48 0d	sty $0d48			sty 	yInLine 					; save current position.
.2dbd	20 78 2e	jsr $2e78			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2dc0	85 2c		sta $2c				sta 	temp1
.2dc2	ad 46 0d	lda $0d46			lda		procList 					; put procList address in temp2
.2dc5	85 2e		sta $2e				sta 	temp2
.2dc7	ad 47 0d	lda $0d47			lda 	procList+1
.2dca	85 2f		sta $2f				sta 	temp2+1
.2dcc	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2dce					_FPLoop:
.2dce	b1 2e		lda ($2e),y			lda 	(temp2),y
.2dd0	f0 4f		beq $2e21			beq 	_FPError 					; if so, we don't know this procedure.
.2dd2	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2dd4	c8		iny				iny
.2dd5	b1 2e		lda ($2e),y			lda 	(temp2),y
.2dd7	85 2a		sta $2a				sta 	temp0
.2dd9	c8		iny				iny
.2dda	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2ddc	c5 2c		cmp $2c				cmp 	temp1
.2dde	d0 2b		bne $2e0b			bne 	_FPNext 					; hash is different, go to next.
.2de0	38		sec				sec
.2de1	ad 48 0d	lda $0d48			lda 	yInLine 					; position in line must be at least 4
.2de4	e9 04		sbc #$04			sbc 	#4
.2de6	18		clc				clc
.2de7	65 28		adc $28				adc 	codePtr
.2de9	85 30		sta $30				sta 	temp3
.2deb	a5 29		lda $29				lda 	codePtr+1
.2ded	69 00		adc #$00			adc 	#0
.2def	85 31		sta $31				sta 	temp3+1
.2df1	98		tya				tya
.2df2	48		pha				pha
.2df3	a0 04		ldy #$04			ldy 	#4
.2df5					_FPCName:
.2df5	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2df7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2df9	d0 0e		bne $2e09			bne 	_FPpulYNext 				; if different go to next one.
.2dfb	c8		iny				iny
.2dfc	c9 3a		cmp #$3a			cmp 	#$3A
.2dfe	90 f5		bcc $2df5			bcc 	_FPCName 					; compare the whole lot....
.2e00	68		pla				pla 								; throw away the saved Y
.2e01	98		tya				tya 								; length of name is Y-4
.2e02	38		sec				sec
.2e03	e9 04		sbc #$04			sbc 	#4
.2e05	ac 48 0d	ldy $0d48			ldy 	yInLine  					; get the original Y back
.2e08	60		rts				rts
.2e09					_FPpulYNext:
.2e09	68		pla				pla
.2e0a	a8		tay				tay
.2e0b					_FPNext:
.2e0b	c8		iny				iny 								; next procedure record.
.2e0c	10 c0		bpl $2dce			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2e0e	98		tya				tya 								; subtract 128 from Y
.2e0f	38		sec				sec
.2e10	e9 80		sbc #$80			sbc 	#128
.2e12	a8		tay				tay
.2e13	18		clc				clc 								; add 128 to temp2, so we can have more than
.2e14	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2e16	69 80		adc #$80			adc 	#128
.2e18	85 2e		sta $2e				sta 	temp2
.2e1a	90 b2		bcc $2dce			bcc 	_FPLoop
.2e1c	e6 2f		inc $2f				inc 	temp2+1
.2e1e	4c ce 2d	jmp $2dce			jmp 	_FPLoop
.2e21					_FPError:
.2e21	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2e23	20 18 15	jsr $1518		jsr	errorHandler
.2e26					ScanProc:
.2e26	98		tya				tya
.2e27	48		pha				pha
.2e28	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2e2a	8d 46 0d	sta $0d46			sta 	procList
.2e2d	a5 36		lda $36				lda 	lowMemory+1
.2e2f	8d 47 0d	sta $0d47			sta 	procList+1
.2e32	20 a4 31	jsr $31a4			jsr 	ResetCodeAddress 			; back to the start.
.2e35					_ScanLoop:
.2e35	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2e37	b1 28		lda ($28),y			lda 	(codePtr),y
.2e39	f0 2a		beq $2e65			beq 	_ScanExit
.2e3b	a0 03		ldy #$03			ldy 	#3							; get first token
.2e3d	b1 28		lda ($28),y			lda 	(codePtr),y
.2e3f	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2e41	d0 12		bne $2e55			bne 	_ScanNext
.2e43	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2e45	20 6d 2e	jsr $2e6d			jsr 	_ScanWrite
.2e48	a5 28		lda $28				lda 	codePtr
.2e4a	20 6d 2e	jsr $2e6d			jsr 	_ScanWrite
.2e4d	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2e4f	20 78 2e	jsr $2e78			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2e52	20 6d 2e	jsr $2e6d			jsr 	_ScanWrite					; and write that
.2e55					_ScanNext:
.2e55	18		clc				clc
.2e56	a0 00		ldy #$00			ldy 	#0
.2e58	b1 28		lda ($28),y			lda 	(codePtr),y
.2e5a	65 28		adc $28				adc 	codePtr
.2e5c	85 28		sta $28				sta 	codePtr
.2e5e	90 d5		bcc $2e35			bcc 	_ScanLoop
.2e60	e6 29		inc $29				inc 	codePtr+1
.2e62	4c 35 2e	jmp $2e35			jmp 	_ScanLoop
.2e65					_ScanExit:
.2e65	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2e67	20 6d 2e	jsr $2e6d			jsr 	_ScanWrite
.2e6a	68		pla				pla
.2e6b	a8		tay				tay
.2e6c	60		rts				rts
.2e6d					_ScanWrite:
.2e6d	a0 00		ldy #$00			ldy 	#0
.2e6f	91 35		sta ($35),y			sta 	(lowMemory),y
.2e71	e6 35		inc $35				inc 	lowMemory
.2e73	d0 02		bne $2e77			bne 	_SWNoCarry
.2e75	e6 36		inc $36				inc 	lowMemory+1
.2e77					_SWNoCarry:
.2e77	60		rts				rts
.2e78					CalculateProcedureHash:
.2e78	a9 00		lda #$00			lda 	#0 							; clear hash.
.2e7a	85 2a		sta $2a				sta 	temp0
.2e7c					_CPHLoop:
.2e7c	18		clc				clc 								; add character and rotate and add carry back in
.2e7d	b1 28		lda ($28),y			lda 	(codePtr),y
.2e7f	65 2a		adc $2a				adc 	temp0
.2e81	6a		ror a				ror 	a
.2e82	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2e84	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2e86	b1 28		lda ($28),y			lda 	(codePtr),y
.2e88	c8		iny				iny 								; advance incase we go round again.
.2e89	c9 3a		cmp #$3a			cmp 	#$3A
.2e8b	90 ef		bcc $2e7c			bcc 	_CPHLoop
.2e8d	a5 2a		lda $2a				lda 	temp0
.2e8f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2e90					Command_Repeat:
.2e90	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2e92	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2e94	20 b8 3d	jsr $3db8			jsr 	RSClaim
.2e97	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2e99	20 e4 3d	jsr $3de4			jsr 	RSSavePosition
.2e9c	60		rts				rts
.2e9d					Command_Until:
.2e9d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2e9f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ea1	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2ea3	f0 05		beq $2eaa			beq 	_isok
.2ea5	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2ea7	20 18 15	jsr $1518		jsr	errorHandler
.2eaa					_isok:
.2eaa	20 83 36	jsr $3683			jsr 	EvaluateRootInteger 		; at the bottom.
.2ead	20 44 3d	jsr $3d44			jsr 	MInt32Zero					; check if TOS zero
.2eb0	d0 06		bne $2eb8			bne 	_CUExit
.2eb2	a9 01		lda #$01			lda 	#1
.2eb4	20 f7 3d	jsr $3df7			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2eb7	60		rts				rts
.2eb8					_CUExit:
.2eb8	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2eba	20 da 3d	jsr $3dda			jsr 	RSFree
.2ebd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2ebe					ScanForward:
.2ebe	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2ec0	86 2d		stx $2d				stx 	temp1+1
.2ec2	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2ec4	85 2e		sta $2e				sta 	temp2
.2ec6	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2ec8	c8		iny				iny
.2ec9	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2ecb	d0 08		bne $2ed5			bne 	_SFNoCheck 					; if so, check token against entered values.
.2ecd	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2ecf	f0 24		beq $2ef5			beq 	_SFExit 					; at the same strcture depth.
.2ed1	c5 2d		cmp $2d				cmp 	temp1+1
.2ed3	f0 20		beq $2ef5			beq 	_SFExit
.2ed5					_SFNoCheck:
.2ed5	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2ed7	90 ed		bcc $2ec6			bcc 	_SFLoop
.2ed9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2edb	90 19		bcc $2ef6			bcc 	_SFSpecials
.2edd	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2edf	90 e5		bcc $2ec6			bcc 	_SFLoop
.2ee1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2ee3	b0 e1		bcs $2ec6			bcs 	_SFLoop
.2ee5	aa		tax				tax  								; token in X, and look up the adjuster.
.2ee6	bd a1 35	lda $35a1,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2ee9	38		sec				sec 								; convert to an offset ($FF,$01)
.2eea	e9 81		sbc #$81			sbc 	#$81
.2eec	18		clc				clc 								; add to depth
.2eed	65 2e		adc $2e				adc 	temp2
.2eef	85 2e		sta $2e				sta 	temp2
.2ef1	10 d3		bpl $2ec6			bpl 	_SFLoop 					; +ve okay to continue
.2ef3	30 07		bmi $2efc			bmi 	SFError 					; if gone -ve then we have a nesting error
.2ef5	60		rts		_SFExit:rts
.2ef6					_SFSpecials:
.2ef6	20 01 2f	jsr $2f01			jsr 	ScannerSkipSpecial
.2ef9	4c c6 2e	jmp $2ec6			jmp 	_SFLoop
.2efc					SFError:
.2efc	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2efe	20 18 15	jsr $1518		jsr	errorHandler
.2f01					ScannerSkipSpecial:
.2f01	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2f03	f0 10		beq $2f15			beq 	_SFNextLine
.2f05	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2f07	f0 2b		beq $2f34			beq 	_SFFloatSkip
.2f09	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2f0b	f0 02		beq $2f0f			beq 	_SFSkipString
.2f0d	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2f0e	60		rts				rts 								; token.
.2f0f					_SFSkipString:
.2f0f	98		tya				tya
.2f10	38		sec				sec
.2f11	71 28		adc ($28),y			adc 	(codePtr),y
.2f13	a8		tay				tay
.2f14	60		rts				rts
.2f15					_SFNextLine:
.2f15	a0 00		ldy #$00			ldy 	#0 							; get offset
.2f17	b1 28		lda ($28),y			lda 	(codePtr),y
.2f19	18		clc				clc 								; add to code pointer.
.2f1a	65 28		adc $28				adc 	codePtr
.2f1c	85 28		sta $28				sta 	codePtr
.2f1e	90 02		bcc $2f22			bcc		_SFNLNoCarry
.2f20	e6 29		inc $29				inc 	codePtr+1
.2f22					_SFNLNoCarry:
.2f22	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2f24	d0 0b		bne $2f31			bne		_SFXNL 						; no go round again
.2f26	a5 2c		lda $2c				lda 	temp1
.2f28	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2f2a	d0 d0		bne $2efc			bne 	SFError 					; read uses this to search for data statements
.2f2c	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2f2e	20 18 15	jsr $1518		jsr	errorHandler
.2f31	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2f33	60		rts				rts
.2f34					_SFFloatSkip:
.2f34	98		tya				tya 								; skip over an embedded float.
.2f35	18		clc				clc
.2f36	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2f38	a8		tay				tay
.2f39	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2f3a					Command_While:
.2f3a	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2f3c	a2 04		ldx #$04			ldx 	#4
.2f3e	20 b8 3d	jsr $3db8			jsr 	RSClaim 					; create on stack.
.2f41	88		dey				dey
.2f42	a9 01		lda #$01			lda 	#1
.2f44	20 e4 3d	jsr $3de4			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2f47	c8		iny				iny
.2f48	20 83 36	jsr $3683			jsr 	EvaluateRootInteger			; get the conditional
.2f4b	20 44 3d	jsr $3d44			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2f4e	f0 01		beq $2f51			beq 	_CWFail
.2f50	60		rts				rts
.2f51					_CWFail:
.2f51	a9 04		lda #$04			lda 	#4
.2f53	20 da 3d	jsr $3dda			jsr 	RSFree 						; close the just opened position.
.2f56	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2f58	aa		tax				tax
.2f59	20 be 2e	jsr $2ebe			jsr 	ScanForward
.2f5c	60		rts				rts
.2f5d					Command_Wend:
.2f5d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2f5f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2f61	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2f63	f0 05		beq $2f6a			beq 	_isok
.2f65	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2f67	20 18 15	jsr $1518		jsr	errorHandler
.2f6a					_isok:
.2f6a	a9 01		lda #$01			lda 	#1
.2f6c	20 f7 3d	jsr $3df7			jsr 	RSLoadPosition				; go back until true
.2f6f	a9 04		lda #$04			lda 	#4
.2f71	20 da 3d	jsr $3dda			jsr 	RSFree 						; close the loop
.2f74	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2f75					CommandClear:
.2f75					XCommandClear:
.2f75	98		tya				tya
.2f76	48		pha				pha
.2f77	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2f7a	85 33		sta $33				sta 	highMemory
.2f7c	ad cd 0a	lda $0acd			lda 	endMemory+1
.2f7f	85 34		sta $34				sta 	highMemory+1
.2f81	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2f84	85 2a		sta $2a				sta 	temp0
.2f86	ad c9 0a	lda $0ac9			lda 	basePage+1
.2f89	85 2b		sta $2b				sta 	temp0+1
.2f8b					_CCFindEnd:
.2f8b	a0 00		ldy #$00			ldy 	#0
.2f8d	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f8f	f0 0c		beq $2f9d			beq 	_CCFoundEnd 				; offset zero is end.
.2f91	18		clc				clc
.2f92	65 2a		adc $2a				adc 	temp0 						; move to next line
.2f94	85 2a		sta $2a				sta 	temp0
.2f96	90 f3		bcc $2f8b			bcc 	_CCFindEnd
.2f98	e6 2b		inc $2b				inc 	temp0+1
.2f9a	4c 8b 2f	jmp $2f8b			jmp 	_CCFindEnd
.2f9d					_CCFoundEnd:
.2f9d	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2f9f	85 35		sta $35				sta 	lowMemory
.2fa1	a5 2b		lda $2b				lda 	temp0+1
.2fa3	85 36		sta $36				sta 	lowMemory+1
.2fa5	18		clc				clc 								; put temp0+1 in endProgram
.2fa6	a5 2a		lda $2a				lda 	temp0
.2fa8	69 01		adc #$01			adc 	#1
.2faa	8d ca 0a	sta $0aca			sta 	endProgram
.2fad	a5 2b		lda $2b				lda 	temp0+1
.2faf	69 00		adc #$00			adc 	#0
.2fb1	8d cb 0a	sta $0acb			sta 	endProgram+1
.2fb4	18		clc				clc 								; put a bit of space in.
.2fb5	a5 35		lda $35				lda 	lowMemory
.2fb7	69 04		adc #$04			adc 	#4
.2fb9	85 35		sta $35				sta 	lowMemory
.2fbb	90 02		bcc $2fbf			bcc 	_CCNoCarry
.2fbd	e6 36		inc $36				inc 	lowMemory+1
.2fbf					_CCNoCarry:
.2fbf	20 aa 3d	jsr $3daa			jsr 	RSReset 					; reset the return stack.
.2fc2	a2 06		ldx #$06		ldx	#6
.2fc4	20 1d 4d	jsr $4d1d		jsr	variableHandler
.2fc7	20 26 2e	jsr $2e26			jsr 	ScanProc 					; scan for procedures
.2fca	20 ab 27	jsr $27ab			jsr 	CommandRestore 				; do a restore
.2fcd	68		pla				pla
.2fce	a8		tay				tay
.2fcf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d49					structIndent:
>0d49							.fill 	1
.2fd0					CommandList:
.2fd0	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2fd2	8e 49 0d	stx $0d49			stx 	structIndent
.2fd5	20 1d 3d	jsr $3d1d			jsr 	MInt32False
.2fd8	e8		inx				inx
.2fd9	20 19 3d	jsr $3d19			jsr 	MInt32True
.2fdc	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2fde	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2fe0	f0 15		beq $2ff7			beq 	_CLEndLine
.2fe2	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2fe4	30 1b		bmi $3001			bmi 	_CLDoListing 				; do the whole lot.
.2fe6	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2fe8	20 85 36	jsr $3685			jsr 	EvaluateInteger
.2feb	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2fed	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2fef	f0 06		beq $2ff7			beq 	_CLEndLine
.2ff1	20 5b 3c	jsr $3c5b			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2ff4	4c 01 30	jmp $3001			jmp 	_CLDoListing 				; own e.g. list 1100
.2ff7					_CLEndLine:
.2ff7	c8		iny				iny 								; skip comma
.2ff8	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2ffa	30 05		bmi $3001			bmi 	_CLDoListing
.2ffc	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2ffe	20 85 36	jsr $3685			jsr 	EvaluateInteger				; get end
.3001					_CLDoListing:
.3001	20 a4 31	jsr $31a4			jsr 	ResetCodeAddress 			; back to the start.
.3004					_CLCheckLoop:
.3004	a2 02		ldx #$02		ldx	#2
.3006	20 f6 14	jsr $14f6		jsr	deviceHandler
.3009	a0 00		ldy #$00			ldy 	#0							; check end.
.300b	b1 28		lda ($28),y			lda 	(codePtr),y
.300d	f0 41		beq $3050			beq 	_CLEnd
.300f	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3011	20 53 30	jsr $3053			jsr 	CLCompareLineTOS
.3014	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3016	f0 28		beq $3040			beq 	_CLNext
.3018	e8		inx				inx
.3019	20 53 30	jsr $3053			jsr 	CLCompareLineTOS 			; compare vs higher
.301c	c9 01		cmp #$01			cmp 	#1
.301e	f0 20		beq $3040			beq 	_CLNext
.3020	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.3022	20 75 30	jsr $3075			jsr 	CLStructureCheck
.3025	ad 49 0d	lda $0d49			lda 	structIndent 				; indent level.
.3028	10 02		bpl $302c			bpl 	_CLPositive
.302a	a9 00		lda #$00			lda 	#0
.302c					_CLPositive:
.302c	a2 04		ldx #$04		ldx	#4
.302e	20 4c 49	jsr $494c		jsr	tokeniserHandler
.3031	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.3033	20 75 30	jsr $3075			jsr 	CLStructureCheck
.3036	ad 49 0d	lda $0d49			lda 	structIndent
.3039	10 05		bpl $3040			bpl 	_CLNext
.303b	a9 00		lda #$00			lda 	#0
.303d	8d 49 0d	sta $0d49			sta 	structIndent
.3040					_CLNext:
.3040	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.3042	b1 28		lda ($28),y			lda 	(codePtr),y
.3044	18		clc				clc
.3045	65 28		adc $28				adc 	codePtr
.3047	85 28		sta $28				sta 	codePtr
.3049	90 b9		bcc $3004			bcc 	_CLCheckLoop
.304b	e6 29		inc $29				inc 	codePtr+1
.304d	4c 04 30	jmp $3004			jmp 	_CLCheckLoop
.3050					_CLEnd:
.3050	4c 06 3e	jmp $3e06			jmp 	WarmStart 					; warm start after list.
.3053					CLCompareLineTOS:
.3053	a0 01		ldy #$01			ldy 	#1
.3055	b1 28		lda ($28),y			lda 	(codePtr),y
.3057	55 98		eor $98,x			eor 	esInt0,x
.3059	85 2a		sta $2a				sta 	temp0
.305b	c8		iny				iny
.305c	b1 28		lda ($28),y			lda 	(codePtr),y
.305e	55 a0		eor $a0,x			eor 	esInt1,x
.3060	05 2a		ora $2a				ora 	temp0
.3062	f0 10		beq $3074			beq 	_CLCLTExit
.3064	88		dey				dey
.3065	b1 28		lda ($28),y			lda 	(codePtr),y
.3067	d5 98		cmp $98,x			cmp 	esInt0,x
.3069	c8		iny				iny
.306a	b1 28		lda ($28),y			lda 	(codePtr),y
.306c	f5 a0		sbc $a0,x			sbc 	esInt1,x
.306e	a9 ff		lda #$ff			lda 	#255
.3070	90 02		bcc $3074			bcc 	_CLCLTExit
.3072	a9 01		lda #$01			lda 	#1
.3074					_CLCLTExit:
.3074	60		rts				rts
.3075					CLStructureCheck:
.3075	85 2a		sta $2a				sta 	temp0
.3077	a0 03		ldy #$03			ldy 	#3
.3079					_CLSCLoop:
.3079	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.307b	c8		iny				iny
.307c	c9 80		cmp #$80			cmp 	#$80
.307e	90 f9		bcc $3079			bcc 	_CLSCLoop 					; $00-$7F just step over.
.3080	f0 28		beq $30aa			beq		_CLSCExit					; EOL return
.3082	c9 86		cmp #$86			cmp 	#$86 						; special handler
.3084	90 1e		bcc $30a4			bcc 	_CLSCSpecial
.3086	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.3088	90 ef		bcc $3079			bcc 	_CLSCLoop
.308a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.308c	b0 eb		bcs $3079			bcs 	_CLSCLoop
.308e	aa		tax				tax 								; get adjustment
.308f	bd a1 35	lda $35a1,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.3092	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.3094	d0 e3		bne $3079			bne 	_CLSCLoop
.3096	38		sec				sec
.3097	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.3099	0a		asl a				asl 	a 							; double indent step
.309a	18		clc				clc
.309b	6d 49 0d	adc $0d49			adc 	structIndent 				; add to structure indent
.309e	8d 49 0d	sta $0d49			sta 	structIndent
.30a1	4c 79 30	jmp $3079			jmp 	_CLSCLoop
.30a4					_CLSCSpecial:
.30a4	20 01 2f	jsr $2f01			jsr 	ScannerSkipSpecial
.30a7	4c 79 30	jmp $3079			jmp 	_CLSCLoop
.30aa					_CLSCExit:
.30aa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.30ab					CommandLoad:
.30ab	20 d3 30	jsr $30d3			jsr 	CLSParameters 					; get parameters for load.
.30ae	08		php				php
.30af	a2 0e		ldx #$0e		ldx	#14
.30b1	20 f6 14	jsr $14f6		jsr	deviceHandler
.30b4	28		plp				plp
.30b5	b0 08		bcs $30bf			bcs 	_CLExit 						; if CC then load a program, so warm start.
.30b7	20 75 2f	jsr $2f75			jsr 	CommandClear
.30ba	a2 04		ldx #$04		ldx	#4
.30bc	20 6d 27	jsr $276d		jsr	interactionHandler
.30bf					_CLExit
.30bf	60		rts				rts
.30c0					CommandSave:
.30c0	20 d3 30	jsr $30d3			jsr 	CLSParameters					; get parameters for save
.30c3	90 08		bcc $30cd			bcc 	_CSNoOverrideAddress
.30c5	20 9d 3d	jsr $3d9d			jsr 	CheckComma 						; should be a comma.
.30c8	a2 02		ldx #$02			ldx 	#2
.30ca	20 85 36	jsr $3685			jsr 	EvaluateInteger 				; get save end address.
.30cd					_CSNoOverrideAddress:
.30cd	a2 18		ldx #$18		ldx	#24
.30cf	20 f6 14	jsr $14f6		jsr	deviceHandler
.30d2	60		rts				rts
.30d3					CLSParameters:
.30d3	a2 00		ldx #$00			ldx 	#0 								; string
.30d5	20 7a 36	jsr $367a			jsr 	EvaluateString
.30d8	e8		inx				inx 									; erase out +1 +2
.30d9	20 1d 3d	jsr $3d1d			jsr 	MInt32False
.30dc	e8		inx				inx
.30dd	20 1d 3d	jsr $3d1d			jsr 	MInt32False
.30e0	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.30e3	85 99		sta $99				sta 	esInt0+1
.30e5	ad c9 0a	lda $0ac9			lda 	basePage+1
.30e8	85 a1		sta $a1				sta 	esInt1+1
.30ea	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.30ed	85 9a		sta $9a				sta 	esInt0+2
.30ef	ad cb 0a	lda $0acb			lda 	endProgram+1
.30f2	85 a2		sta $a2				sta 	esInt1+2
.30f4	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.30f6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.30f8	d0 08		bne $3102			bne 	_CLSDefault
.30fa	c8		iny				iny 									; skip comma
.30fb	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.30fd	20 85 36	jsr $3685			jsr 	EvaluateInteger
.3100	38		sec				sec
.3101	60		rts				rts
.3102					_CLSDefault:
.3102	18		clc				clc
.3103	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.3104					Command_New:
.3104					Command_XNew:
.3104	20 a4 31	jsr $31a4			jsr 	ResetCodeAddress 			; point to first line
.3107	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.3109	98		tya				tya
.310a	91 28		sta ($28),y			sta 	(codePtr),y
.310c	20 75 2f	jsr $2f75			jsr 	CommandClear 				; clear everything down.
.310f	4c cb 2a	jmp $2acb			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d4a					breakCounter:
>0d4a								.fill 	1
.0d4b					breakIncrement:
>0d4b								.fill 	1
.3112					Command_Run:
.3112					XCommand_Run:
.3112	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.3114	9a		txs				txs
.3115	20 9e 31	jsr $319e			jsr 	BreakOn 					; turn break on
.3118	20 75 2f	jsr $2f75			jsr 	CommandClear 				; clear everything.
.311b	20 a4 31	jsr $31a4			jsr 	ResetCodeAddress 			; back to the start.
.311e					Command_RunFrom:
.311e	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.3120					CRNextInstruction:
.3120	a9 00		lda #$00			lda 	#0
.3122	85 3a		sta $3a				sta 	softMemAlloc+1
.3124	ad 4a 0d	lda $0d4a			lda 	breakCounter 				; check for break.
.3127	6d 4b 0d	adc $0d4b			adc 	breakIncrement
.312a	8d 4a 0d	sta $0d4a			sta 	breakCounter
.312d	90 05		bcc $3134			bcc 	_CRNoChecks
.312f	a2 02		ldx #$02		ldx	#2
.3131	20 f6 14	jsr $14f6		jsr	deviceHandler
.3134					_CRNoChecks
.3134	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.3136	10 1c		bpl $3154			bpl 	_CRNotToken
.3138	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.313a	b0 0c		bcs $3148			bcs 	_CRExecute
.313c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.313e	b0 71		bcs $31b1			bcs 	Unimplemented
.3140	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.3142	b0 04		bcs $3148			bcs 	_CRExecute
.3144	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.3146	b0 16		bcs $315e			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.3148					_CRExecute:
.3148	c8		iny				iny 								; consume it.
.3149	0a		asl a				asl 	a 							; double it, losing most significant bit.
.314a	aa		tax				tax
.314b	20 51 31	jsr $3151			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.314e	4c 20 31	jmp $3120			jmp 	CRNextInstruction
.3151					_CRRunRoutine:
.3151	7c bb 31	jmp ($31bb,x)			jmp 	(Group0Vectors,x)
.3154					_CRNotToken:
.3154	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.3156	b0 59		bcs $31b1			bcs 	Unimplemented
.3158					_CRDefaultLet:
.3158	20 fe 29	jsr $29fe			jsr 	CommandLet 					; do the default, LET
.315b	4c 20 31	jmp $3120			jmp 	CRNextInstruction
.315e					_CRCheckIndirect:
.315e	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.3160	f0 0a		beq $316c			beq 	_CRAndCommand
.3162	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.3164	f0 f2		beq $3158			beq 	_CRDefaultLet
.3166	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.3168	f0 ee		beq $3158			beq 	_CRDefaultLet
.316a	d0 45		bne $31b1			bne 	Unimplemented
.316c					_CRAndCommand:
.316c	c8		iny				iny 								; skip over the AND token
.316d	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.316f	20 89 31	jsr $3189			jsr 	CommandAssembler 			; do the assembler command
.3172	4c 20 31	jmp $3120			jmp 	CRNextInstruction 			; and loop round.
.3175					CommandShift1:
.3175	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.3177	10 38		bpl $31b1			bpl 	Unimplemented 				; we have an error as this should not happen.
.3179	c8		iny				iny 								; advance over it.
.317a	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.317c	b0 0b		bcs $3189			bcs 	CommandAssembler
.317e	0a		asl a				asl 	a 							; double into X
.317f	aa		tax				tax
.3180	7c 81 32	jmp ($3281,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.3183					CommandShift2:
.3183	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.3185	20 69 18	jsr $1869		jsr	extensionHandler
.3188	60		rts				rts
.3189					CommandAssembler:
.3189	a2 02		ldx #$02		ldx	#2
.318b	20 b4 13	jsr $13b4		jsr	assemblerHandler
.318e	60		rts				rts
.318f					CommandAssemblerLabel:
.318f	a2 04		ldx #$04		ldx	#4
.3191	20 b4 13	jsr $13b4		jsr	assemblerHandler
.3194	60		rts				rts
.3195					CommandColon:
.3195	60		rts				rts
.3196					CommandBreak:
.3196	20 83 36	jsr $3683			jsr 	EvaluateRootInteger
.3199	20 44 3d	jsr $3d44			jsr 	MInt32Zero
.319c	f0 02		beq $31a0			beq 	BreakOff
.319e					BreakOn:
.319e	a2 08		ldx #$08			ldx 	#8
.31a0					BreakOff:
.31a0	8e 4b 0d	stx $0d4b			stx 	breakIncrement
.31a3	60		rts				rts
.31a4					ResetCodeAddress:
.31a4	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.31a7	85 28		sta $28				sta 	codePtr
.31a9	ad c9 0a	lda $0ac9			lda 	basePage+1
.31ac	85 29		sta $29				sta 	codePtr+1
.31ae	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.31b0	60		rts				rts
.31b1					Unimplemented:
.31b1	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.31b3	20 18 15	jsr $1518		jsr	errorHandler
.31b6					TKErr01:
.31b6					TKErr02:
.31b6					TKErr03:
.31b6					TKErr04:
.31b6					TKErr05:
.31b6					TKErr06:
.31b6					TKErr07:
.31b6					TKErr08:
.31b6					TKErr09:
.31b6					TKErr10:
.31b6					TKErr11:
.31b6					TKErr12:
.31b6					TKErr13:
.31b6					TKErr14:
.31b6					TKErr15:
.31b6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.31b8	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.31bb					Group0Vectors:
>31bb	d1 2a					.word	AdvanceNextLine          ; $80 [[eol]]
>31bd	75 31					.word	CommandShift1            ; $81 [[sh1]]
>31bf	83 31					.word	CommandShift2            ; $82 [[sh2]]
>31c1	b6 31					.word	TKErr09                  ; $83 [[sh3]]
>31c3	b6 31					.word	TKErr10                  ; $84 [[fpc]]
>31c5	b6 31					.word	TKErr08                  ; $85 [[str]]
>31c7	6a 33					.word	AndHandler               ; $86 and
>31c9	57 33					.word	OrHandler                ; $87 or
>31cb	44 33					.word	XorHandler               ; $88 xor
>31cd	8c 34					.word	CompareGreaterEq         ; $89 >=
>31cf	96 34					.word	CompareLessEq            ; $8a <=
>31d1	78 34					.word	CompareGreater           ; $8b >
>31d3	6e 34					.word	CompareLess              ; $8c <
>31d5	64 34					.word	CompareEquals            ; $8d =
>31d7	82 34					.word	CompareNotEquals         ; $8e <>
>31d9	d5 32					.word	AddHandler               ; $8f +
>31db	f8 32					.word	SubHandler               ; $90 -
>31dd	90 33					.word	ShrHandler               ; $91 >>
>31df	7d 33					.word	ShlHandler               ; $92 <<
>31e1	0b 33					.word	MulHandler               ; $93 *
>31e3	1e 33					.word	DivHandler               ; $94 /
>31e5	31 33					.word	ModHandler               ; $95 mod
>31e7	c9 33					.word	PowerHandler             ; $96 ^
>31e9	a3 33					.word	WordRefHandler           ; $97 !
>31eb	b6 33					.word	ByteRefHandler           ; $98 ?
>31ed	90 2e					.word	Command_Repeat           ; $99 repeat
>31ef	3a 2f					.word	Command_While            ; $9a while
>31f1	e5 2a					.word	Command_FOR              ; $9b for
>31f3	f4 2b					.word	CommandIf                ; $9c if
>31f5	b6 31					.word	TKErr04                  ; $9d defproc
>31f7	9d 2e					.word	Command_Until            ; $9e until
>31f9	5d 2f					.word	Command_Wend             ; $9f wend
>31fb	46 2b					.word	Command_NEXT             ; $a0 next
>31fd	b6 31					.word	TKErr06                  ; $a1 then
>31ff	2f 2c					.word	Command_ENDIF            ; $a2 endif
>3201	9f 2d					.word	ReturnProc               ; $a3 endproc
>3203	f0 35					.word	UnaryParenthesis         ; $a4 (
>3205	d2 37					.word	UnaryLen                 ; $a5 len(
>3207	16 38					.word	UnarySgn                 ; $a6 sgn(
>3209	ff 37					.word	UnaryAbs                 ; $a7 abs(
>320b	6f 38					.word	Unary_Random             ; $a8 random(
>320d	b9 38					.word	Unary_Page               ; $a9 page
>320f	19 3d					.word	MInt32True               ; $aa true
>3211	1d 3d					.word	MInt32False              ; $ab false
>3213	84 38					.word	Unary_Min                ; $ac min(
>3215	88 38					.word	Unary_Max                ; $ad max(
>3217	91 39					.word	UnarySys                 ; $ae sys(
>3219	3a 39					.word	UnaryTimer               ; $af timer(
>321b	4f 37					.word	EventFunction            ; $b0 event(
>321d	63 39					.word	UnaryGet                 ; $b1 get(
>321f	53 39					.word	UnaryInkey               ; $b2 inkey(
>3221	0a 39					.word	UnaryAlloc               ; $b3 alloc(
>3223	ca 39					.word	ExecChr                  ; $b4 chr$(
>3225	fa 39					.word	ExecLeft                 ; $b5 left$(
>3227	17 3a					.word	ExecMid                  ; $b6 mid$(
>3229	3f 3a					.word	ExecRight                ; $b7 right$(
>322b	d1 36					.word	Event_Str                ; $b8 str$(
>322d	00 37					.word	UnaryVal                 ; $b9 val(
>322f	2d 38					.word	UnaryPeek                ; $ba peek(
>3231	33 38					.word	UnaryDeek                ; $bb deek(
>3233	39 38					.word	UnaryLeek                ; $bc leek(
>3235	f0 37					.word	UnaryAsc                 ; $bd asc(
>3237	e4 38					.word	UnaryIntToFloat          ; $be int(
>3239	f7 38					.word	UnaryFloatToInt          ; $bf float(
>323b	03 37					.word	UnaryIsVal               ; $c0 isval(
>323d	e1 39					.word	ExecUpper                ; $c1 upper$(
>323f	de 39					.word	ExecLower                ; $c2 lower$(
>3241	c7 38					.word	UnaryReference           ; $c3 @
>3243	dd 38					.word	UnaryComplement          ; $c4 ~
>3245	da 38					.word	UnaryHexMarker           ; $c5 &
>3247	7c 39					.word	UnaryGetString           ; $c6 get$(
>3249	82 39					.word	UnaryInkeyString         ; $c7 inkey$(
>324b	b9 39					.word	UnaryMem                 ; $c8 mem
>324d	b6 31					.word	TKErr01                  ; $c9 )
>324f	95 31					.word	CommandColon             ; $ca :
>3251	b6 31					.word	TKErr02                  ; $cb ,
>3253	b6 31					.word	TKErr03                  ; $cc ;
>3255	b9 2a					.word	Command_Rem2             ; $cd '
>3257	b6 31					.word	TKErr07                  ; $ce to
>3259	b6 31					.word	TKErr05                  ; $cf step
>325b	32 2d					.word	CallProc                 ; $d0 proc
>325d	30 2c					.word	CommandLocal             ; $d1 local
>325f	f0 29					.word	Command_Dim              ; $d2 dim
>3261	b9 2a					.word	Command_Rem              ; $d3 rem
>3263	fe 29					.word	CommandLet               ; $d4 let
>3265	3a 28					.word	Command_Input            ; $d5 input
>3267	29 2c					.word	Command_ELSE             ; $d6 else
>3269	c1 29					.word	Command_VDU              ; $d7 vdu
>326b	f0 28					.word	Command_Print            ; $d8 print
>326d	a2 27					.word	CommandData              ; $d9 data
>326f	b6 31					.word	TKErr13                  ; $da image
>3271	b6 31					.word	TKErr12                  ; $db at
>3273	b6 31					.word	TKErr14                  ; $dc flip
>3275	e2 29					.word	Command_Assert           ; $dd assert
>3277	7c 2a					.word	Command_Poke             ; $de poke
>3279	80 2a					.word	Command_Doke             ; $df doke
>327b	84 2a					.word	Command_Loke             ; $e0 loke
>327d	91 29					.word	Command_Ink              ; $e1 ink
>327f	9c 29					.word	Command_Paper            ; $e2 paper
>3281	8b 29					.word	Command_CLS              ; $e3 cls
>3283	a7 29					.word	Command_Locate           ; $e4 locate
>3285	8f 31					.word	CommandAssemblerLabel    ; $e5 .
>3287	b6 31					.word	TKErr15                  ; $e6 from
>3289	b6 31					.word	TKErr11                  ; $e7 #
>328b	75 2f					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.328d					Group1Vectors:
>328d	ab 30					.word	CommandLoad              ; $86 load
>328f	c0 30					.word	CommandSave              ; $87 save
>3291	d0 2f					.word	CommandList              ; $88 list
>3293	04 31					.word	Command_New              ; $89 new
>3295	96 31					.word	CommandBreak             ; $8a break
>3297	12 31					.word	Command_Run              ; $8b run
>3299	77 27					.word	CommandRead              ; $8c read
>329b	ab 27					.word	CommandRestore           ; $8d restore
>329d	cb 2a					.word	CommandEnd               ; $8e end
>329f	c6 2a					.word	CommandStop              ; $8f stop
>32a1	ce 2a					.word	CommandXemu              ; $90 xemu
>32a3	08 28					.word	CommandGOTO              ; $91 goto
>32a5	dd 27					.word	CommandGOSUB             ; $92 gosub
>32a7	f0 27					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.32a9					BinaryProcess:
.32a9	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.32ab	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.32ad	0a		asl a				asl 	a
.32ae	30 0e		bmi $32be			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.32b0	18		clc				clc 								; return CC for integer
.32b1	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.32b3	f0 08		beq $32bd			beq 	_BPExit 					; if both integer then return with CC.
.32b5	20 c3 32	jsr $32c3			jsr 	BPMakeBothFloat 			; make both float
.32b8	a9 01		lda #$01			lda 	#$01 						; set result type to float
.32ba	95 90		sta $90,x			sta 	esType,x
.32bc	38		sec				sec 								; and return with carry set.
.32bd					_BPExit:
.32bd	60		rts				rts
.32be					_BPStringType:
.32be	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.32c0	20 18 15	jsr $1518		jsr	errorHandler
.32c3					BPMakeBothFloat:
.32c3	e8		inx				inx
.32c4	20 c8 32	jsr $32c8			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.32c7	ca		dex				dex
.32c8					BPMakeFloat:
.32c8	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.32ca	4a		lsr a				lsr 	a
.32cb	b0 07		bcs $32d4			bcs 	_BPIsFloat 					; already a float if set.
.32cd	8a		txa				txa
.32ce	a2 1c		ldx #$1c		ldx	#28
.32d0	20 81 25	jsr $2581		jsr	floatingpointHandler
.32d3	aa		tax				tax
.32d4					_BPIsFloat:
.32d4	60		rts				rts
.32d5					AddHandler:
.32d5	20 a6 34	jsr $34a6			jsr 	DereferenceTwo 				; dereference top two on stack.
.32d8	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.32da	35 91		and $91,x			and 	esType+1,x
.32dc	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.32de	d0 10		bne $32f0			bne 	_AHStringConcat				; concatenate strings.
.32e0	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.32e3	b0 03		bcs $32e8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32e5	4c 01 3c	jmp $3c01			jmp 	MInt32Add 							; else do it as integer.
.32e8					_IsFPOperation:
.32e8	8a		txa				txa 								; call the relevant fp routine
.32e9	a2 04		ldx #$04		ldx	#4
.32eb	20 81 25	jsr $2581		jsr	floatingpointHandler
.32ee	aa		tax				tax
.32ef	60		rts				rts
.32f0					_AHStringConcat:
.32f0	8a		txa				txa 								; handled by the string module.
.32f1	a2 06		ldx #$06		ldx	#6
.32f3	20 c8 40	jsr $40c8		jsr	stringHandler
.32f6	aa		tax				tax
.32f7	60		rts				rts
.32f8					SubHandler:
.32f8	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.32fb	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.32fe	b0 03		bcs $3303			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3300	4c 1b 3c	jmp $3c1b			jmp 	MInt32Sub 							; else do it as integer.
.3303					_IsFPOperation:
.3303	8a		txa				txa 								; call the relevant fp routine
.3304	a2 12		ldx #$12		ldx	#18
.3306	20 81 25	jsr $2581		jsr	floatingpointHandler
.3309	aa		tax				tax
.330a	60		rts				rts
.330b					MulHandler:
.330b	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.330e	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.3311	b0 03		bcs $3316			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3313	4c 35 3c	jmp $3c35			jmp 	MInt32Multiply 							; else do it as integer.
.3316					_IsFPOperation:
.3316	8a		txa				txa 								; call the relevant fp routine
.3317	a2 0c		ldx #$0c		ldx	#12
.3319	20 81 25	jsr $2581		jsr	floatingpointHandler
.331c	aa		tax				tax
.331d	60		rts				rts
.331e					DivHandler:
.331e	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.3321	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.3324	b0 03		bcs $3329			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3326	4c f2 3a	jmp $3af2			jmp 	MInt32SDivide 							; else do it as integer.
.3329					_IsFPOperation:
.3329	8a		txa				txa 								; call the relevant fp routine
.332a	a2 08		ldx #$08		ldx	#8
.332c	20 81 25	jsr $2581		jsr	floatingpointHandler
.332f	aa		tax				tax
.3330	60		rts				rts
.3331					ModHandler:
.3331	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.3334	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.3337	b0 03		bcs $333c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3339	4c 70 3b	jmp $3b70			jmp 	MInt32Modulus 							; else do it as integer.
.333c					_IsFPOperation:
.333c	8a		txa				txa 								; call the relevant fp routine
.333d	a2 0a		ldx #$0a		ldx	#10
.333f	20 81 25	jsr $2581		jsr	floatingpointHandler
.3342	aa		tax				tax
.3343	60		rts				rts
.3344					XorHandler:
.3344	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.3347	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.334a	b0 03		bcs $334f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.334c	4c a4 3a	jmp $3aa4			jmp 	MInt32Xor 							; else do it as integer.
.334f					_IsFPOperation:
.334f	8a		txa				txa 								; call the relevant fp routine
.3350	a2 0a		ldx #$0a		ldx	#10
.3352	20 81 25	jsr $2581		jsr	floatingpointHandler
.3355	aa		tax				tax
.3356	60		rts				rts
.3357					OrHandler:
.3357	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.335a	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.335d	b0 03		bcs $3362			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.335f	4c 8b 3a	jmp $3a8b			jmp 	MInt32Or 							; else do it as integer.
.3362					_IsFPOperation:
.3362	8a		txa				txa 								; call the relevant fp routine
.3363	a2 0a		ldx #$0a		ldx	#10
.3365	20 81 25	jsr $2581		jsr	floatingpointHandler
.3368	aa		tax				tax
.3369	60		rts				rts
.336a					AndHandler:
.336a	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.336d	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.3370	b0 03		bcs $3375			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3372	4c 72 3a	jmp $3a72			jmp 	MInt32And 							; else do it as integer.
.3375					_IsFPOperation:
.3375	8a		txa				txa 								; call the relevant fp routine
.3376	a2 0a		ldx #$0a		ldx	#10
.3378	20 81 25	jsr $2581		jsr	floatingpointHandler
.337b	aa		tax				tax
.337c	60		rts				rts
.337d					ShlHandler:
.337d	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.3380	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.3383	b0 03		bcs $3388			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3385	4c fe 33	jmp $33fe			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.3388					_IsFPOperation:
.3388	8a		txa				txa 								; call the relevant fp routine
.3389	a2 0a		ldx #$0a		ldx	#10
.338b	20 81 25	jsr $2581		jsr	floatingpointHandler
.338e	aa		tax				tax
.338f	60		rts				rts
.3390					ShrHandler:
.3390	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.3393	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.3396	b0 03		bcs $339b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3398	4c 01 34	jmp $3401			jmp 	MInt32ShiftRightX 							; else do it as integer.
.339b					_IsFPOperation:
.339b	8a		txa				txa 								; call the relevant fp routine
.339c	a2 0a		ldx #$0a		ldx	#10
.339e	20 81 25	jsr $2581		jsr	floatingpointHandler
.33a1	aa		tax				tax
.33a2	60		rts				rts
.33a3					WordRefHandler:
.33a3	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.33a6	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.33a9	b0 03		bcs $33ae			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33ab	4c f0 33	jmp $33f0			jmp 	MInt32WordIndirect 							; else do it as integer.
.33ae					_IsFPOperation:
.33ae	8a		txa				txa 								; call the relevant fp routine
.33af	a2 0a		ldx #$0a		ldx	#10
.33b1	20 81 25	jsr $2581		jsr	floatingpointHandler
.33b4	aa		tax				tax
.33b5	60		rts				rts
.33b6					ByteRefHandler:
.33b6	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.33b9	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.33bc	b0 03		bcs $33c1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33be	4c f4 33	jmp $33f4			jmp 	MInt32ByteIndirect 							; else do it as integer.
.33c1					_IsFPOperation:
.33c1	8a		txa				txa 								; call the relevant fp routine
.33c2	a2 0a		ldx #$0a		ldx	#10
.33c4	20 81 25	jsr $2581		jsr	floatingpointHandler
.33c7	aa		tax				tax
.33c8	60		rts				rts
.33c9					PowerHandler:
.33c9	20 a6 34	jsr $34a6			jsr 	DereferenceTwo
.33cc	20 a9 32	jsr $32a9			jsr 	BinaryProcess 				; check to see if either is float
.33cf	b0 03		bcs $33d4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.33d1	4c dc 33	jmp $33dc			jmp 	PowerInteger 							; else do it as integer.
.33d4					_IsFPOperation:
.33d4	8a		txa				txa 								; call the relevant fp routine
.33d5	a2 18		ldx #$18		ldx	#24
.33d7	20 81 25	jsr $2581		jsr	floatingpointHandler
.33da	aa		tax				tax
.33db	60		rts				rts
.33dc					PowerInteger:
.33dc	20 c3 32	jsr $32c3			jsr 	BPMakeBothFloat				; make them float.
.33df	8a		txa				txa
.33e0	a2 18		ldx #$18		ldx	#24
.33e2	20 81 25	jsr $2581		jsr	floatingpointHandler
.33e5	a2 14		ldx #$14		ldx	#20
.33e7	20 81 25	jsr $2581		jsr	floatingpointHandler
.33ea	aa		tax				tax
.33eb	a9 00		lda #$00			lda 	#0 							; make type integer
.33ed	95 90		sta $90,x			sta 	esType,x
.33ef	60		rts				rts
.33f0					Mint32WordIndirect:
.33f0	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.33f2	d0 02		bne $33f6			bne 	Min32Indirect
.33f4					Mint32ByteIndirect:
.33f4	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.33f6					Min32Indirect:
.33f6	48		pha				pha 								; save the indirection
.33f7	20 01 3c	jsr $3c01			jsr 	MInt32Add 					; add a!b a?b
.33fa	68		pla				pla 								; and set the type to reference.
.33fb	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.33fd	60		rts				rts
.33fe					Mint32ShiftLeftX:
.33fe	18		clc				clc 								; CC shift left
.33ff	90 01		bcc $3402			bcc 	Mint32Shift
.3401					Mint32ShiftRightX:
.3401	38		sec				sec 								; CS shift right
.3402					Mint32Shift:
.3402	08		php				php 								; save carry flag on stack.
.3403	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3405	15 a9		ora $a9,x			ora 	esInt2+1,x
.3407	15 b1		ora $b1,x			ora 	esInt3+1,x
.3409	d0 1e		bne $3429			bne 	_MShiftZero
.340b	b5 99		lda $99,x			lda 	esInt0+1,x
.340d	c9 20		cmp #$20			cmp 	#32
.340f	b0 18		bcs $3429			bcs 	_MShiftZero
.3411					_MShiftLoop:
.3411	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3413	f0 12		beq $3427			beq 	_MShiftExit
.3415	d6 99		dec $99,x			dec 	esInt0+1,x
.3417	28		plp				plp 								; restore and save carry
.3418	08		php				php
.3419	90 06		bcc $3421			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.341b	20 3b 3d	jsr $3d3b			jsr 	Mint32ShiftRight
.341e	4c 11 34	jmp $3411			jmp 	_MShiftLoop
.3421					_MShiftLeft:
.3421	20 32 3d	jsr $3d32			jsr 	Mint32ShiftLeft
.3424	4c 11 34	jmp $3411			jmp 	_MShiftLoop
.3427					_MShiftExit:
.3427	28		plp				plp	 								; throw saved carry and exit
.3428	60		rts				rts
.3429					_MShiftZero:
.3429	4c 1d 3d	jmp $3d1d			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.342c					PerformComparison:
.342c	20 a6 34	jsr $34a6			jsr 	DereferenceTwo 				; make both values.
.342f	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.3431	35 91		and $91,x			and 	esType+1,x
.3433	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3434	30 1d		bmi $3453			bmi 	_PCIsString
.3436	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.3438	15 91		ora $91,x			ora 	esType+1,x
.343a	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.343b	30 22		bmi $345f			bmi 	_PCError
.343d	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.343f	f0 0f		beq $3450			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3441	20 c3 32	jsr $32c3			jsr 	BPMakeBothFloat 			; make both float
.3444	8a		txa				txa
.3445	a2 06		ldx #$06		ldx	#6
.3447	20 81 25	jsr $2581		jsr	floatingpointHandler
.344a	86 32		stx $32				stx 	tempShort 					; save result
.344c	aa		tax				tax
.344d	a5 32		lda $32				lda 	tempShort
.344f	60		rts				rts
.3450					_PCIsInteger:
.3450	4c bd 3a	jmp $3abd			jmp 	MInt32Compare
.3453					_PCIsString:
.3453	8a		txa				txa 								; A has SP
.3454	a2 0a		ldx #$0a		ldx	#10
.3456	20 c8 40	jsr $40c8		jsr	stringHandler
.3459	86 32		stx $32				stx 	tempShort 					; save result
.345b	aa		tax				tax 								; put SP back in X and get result.
.345c	a5 32		lda $32				lda 	tempShort
.345e	60		rts				rts
.345f					_PCError:
.345f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3461	20 18 15	jsr $1518		jsr	errorHandler
.3464					CompareEquals:
.3464	20 2c 34	jsr $342c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3467	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3469	f0 35		beq $34a0			beq  	CompareTrue
.346b	4c a3 34	jmp $34a3			jmp 	CompareFalse
.346e					CompareLess:
.346e	20 2c 34	jsr $342c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3471	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3473	f0 2b		beq $34a0			beq  	CompareTrue
.3475	4c a3 34	jmp $34a3			jmp 	CompareFalse
.3478					CompareGreater:
.3478	20 2c 34	jsr $342c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.347b	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.347d	f0 21		beq $34a0			beq  	CompareTrue
.347f	4c a3 34	jmp $34a3			jmp 	CompareFalse
.3482					CompareNotEquals:
.3482	20 2c 34	jsr $342c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3485	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3487	d0 17		bne $34a0			bne  	CompareTrue
.3489	4c a3 34	jmp $34a3			jmp 	CompareFalse
.348c					CompareGreaterEq:
.348c	20 2c 34	jsr $342c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.348f	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3491	d0 0d		bne $34a0			bne  	CompareTrue
.3493	4c a3 34	jmp $34a3			jmp 	CompareFalse
.3496					CompareLessEq:
.3496	20 2c 34	jsr $342c			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3499	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.349b	d0 03		bne $34a0			bne  	CompareTrue
.349d	4c a3 34	jmp $34a3			jmp 	CompareFalse
.34a0					CompareTrue:
.34a0	4c 19 3d	jmp $3d19			jmp 	MInt32True
.34a3					CompareFalse:
.34a3	4c 1d 3d	jmp $3d1d			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.34a6					DereferenceTwo:
.34a6	e8		inx				inx
.34a7	20 ab 34	jsr $34ab			jsr 	DereferenceOne
.34aa	ca		dex				dex
.34ab					DereferenceOne:
.34ab	b5 90		lda $90,x			lda 	esType,x
.34ad	10 3d		bpl $34ec			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.34af	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.34b0	b0 3b		bcs $34ed			bcs 	_DRFloatDeReference
.34b2	98		tya				tya
.34b3	48		pha				pha
.34b4	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.34b6	85 2a		sta $2a				sta 	temp0
.34b8	b5 a0		lda $a0,x			lda 	esInt1,x
.34ba	85 2b		sta $2b				sta 	temp0+1
.34bc	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.34be	95 a0		sta $a0,x			sta 	esInt1,x
.34c0	95 a8		sta $a8,x			sta 	esInt2,x
.34c2	95 b0		sta $b0,x			sta 	esInt3,x
.34c4	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.34c6	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.34c8	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.34c9	30 0d		bmi $34d8			bmi 	_DeRefString 				; string, 2 bytes only
.34cb	d0 11		bne $34de			bne 	_DeRefByte 					; byte 1 byte only
.34cd					_DeRefLong:
.34cd	a0 03		ldy #$03			ldy 	#3
.34cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.34d1	95 b0		sta $b0,x			sta 	esInt3,x
.34d3	88		dey				dey
.34d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.34d6	95 a8		sta $a8,x			sta 	esInt2,x
.34d8					_DeRefString:
.34d8	a0 01		ldy #$01			ldy 	#1
.34da	b1 2a		lda ($2a),y			lda 	(temp0),y
.34dc	95 a0		sta $a0,x			sta 	esInt1,x
.34de					_DeRefByte:
.34de	a0 00		ldy #$00			ldy 	#0
.34e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.34e2	95 98		sta $98,x			sta 	esInt0,x
.34e4	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.34e6	29 40		and #$40			and 	#$40
.34e8	95 90		sta $90,x			sta 	esType,x
.34ea	68		pla				pla
.34eb	a8		tay				tay
.34ec					_DRNotReference
.34ec	60		rts				rts
.34ed					_DRFloatDereference:
.34ed	20 73 2a	jsr $2a73			jsr 	TOSToTemp0 					; address to deref in temp0
.34f0	8a		txa				txa
.34f1	a2 1e		ldx #$1e		ldx	#30
.34f3	20 81 25	jsr $2581		jsr	floatingpointHandler
.34f6	aa		tax				tax
.34f7	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.34f9	95 90		sta $90,x			sta 	esType,x
.34fb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.34fc					EvaluateLevel:
.34fc	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.34fe	b0 1e		bcs $351e			bcs 	_ELStack
.3500	48		pha				pha 								; save precedence level.
.3501	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3503	95 98		sta $98,x			sta 	esInt0,x
.3505	95 a0		sta $a0,x			sta 	esInt1,x
.3507	95 a8		sta $a8,x			sta 	esInt2,x
.3509	95 b0		sta $b0,x			sta 	esInt3,x
.350b	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.350d	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.350f	30 26		bmi $3537			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.3511	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3512	30 0f		bmi $3523			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3514	8a		txa				txa 								; stack level in X
.3515	a2 02		ldx #$02		ldx	#2
.3517	20 1d 4d	jsr $4d1d		jsr	variableHandler
.351a	aa		tax				tax
.351b	4c 60 35	jmp $3560			jmp		_ELHasTerm
.351e					_ELStack:
.351e	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3520	20 18 15	jsr $1518		jsr	errorHandler
.3523					_ELIsConstant:
.3523	4a		lsr a				lsr 	a 							; get the value back
.3524	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3526	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.3528					_ELCheckNext:
.3528	c8		iny				iny 								; look at next
.3529	b1 28		lda ($28),y			lda 	(codePtr),y
.352b	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.352d	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.352f	b0 2f		bcs $3560			bcs 	_ELHasTerm 					; done getting the constant.
.3531	20 f9 35	jsr $35f9			jsr 	ELShiftByteIn 				; shift byte into position.
.3534	4c 28 35	jmp $3528			jmp 	_ELCheckNext
.3537					_ELIsToken:
.3537	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3539	f0 0f		beq $354a			beq 	_ELIsString
.353b	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.353d	d0 5f		bne $359e			bne 	_ELCheckUnary
.353f	8a		txa				txa 								; put X into A
.3540	c8		iny				iny 								; skip over the float marker
.3541	a2 1a		ldx #$1a		ldx	#26
.3543	20 81 25	jsr $2581		jsr	floatingpointHandler
.3546	aa		tax				tax 								; restore X
.3547	4c 60 35	jmp $3560			jmp 	_ELHasTerm
.354a					_ELIsString:
.354a	98		tya				tya 								; address of string is codePtr+y+1
.354b	38		sec				sec
.354c	65 28		adc $28				adc 	codePtr
.354e	95 98		sta $98,x			sta 	esInt0,x
.3550	a5 29		lda $29				lda 	codePtr+1
.3552	69 00		adc #$00			adc 	#0
.3554	95 a0		sta $a0,x			sta 	esInt1,x
.3556	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3558	95 90		sta $90,x			sta 	esType,x
.355a	c8		iny				iny 								; skip over string.
.355b	98		tya				tya
.355c	38		sec				sec									; +1 for the length itself.
.355d	71 28		adc ($28),y			adc 	(codePtr),y
.355f	a8		tay				tay 								; and fall through to term loop code.
.3560					_ELHasTerm:
.3560	b1 28		lda ($28),y			lda 	(codePtr),y
.3562	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3564	90 04		bcc $356a			bcc 	_ELPopExit
.3566	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3568	90 02		bcc $356c			bcc 	_ELHasBinaryTerm
.356a					_ELPopExit:
.356a	68		pla				pla
.356b					_ELExit:
.356b	60		rts				rts
.356c					_ELHasBinaryTerm:
.356c	84 32		sty $32				sty 	tempShort 					; save position
.356e	a8		tay				tay 								; use token as an index and get the precedence.
.356f	b9 a1 35	lda $35a1,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3572	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3574	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.3576	68		pla				pla 								; restore current level.
.3577	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3579	b0 f0		bcs $356b			bcs 	_ELExit
.357b	48		pha				pha 								; save current level back on the stack.
.357c	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.357e	48		pha				pha
.357f	c8		iny				iny
.3580	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3581	a5 32		lda $32				lda 	tempShort
.3583	20 fc 34	jsr $34fc			jsr 	EvaluateLevel
.3586	ca		dex				dex
.3587	68		pla				pla 								; get the operator back out.
.3588					_ELExecuteA:
.3588	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.358a	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.358b	aa		tax				tax
.358c	bd bb 31	lda $31bb,x			lda 	Group0Vectors,x
.358f	85 2a		sta $2a				sta 	temp0
.3591	bd bc 31	lda $31bc,x			lda 	Group0Vectors+1,x
.3594	85 2b		sta $2b				sta 	temp0+1
.3596	a6 32		ldx $32				ldx 	tempShort
.3598	20 e5 35	jsr $35e5			jsr 	_ELCallTemp0
.359b	4c 60 35	jmp $3560			jmp 	_ELHasTerm 					; and loop back round.
.359e					_ELCheckUnary:
.359e	c8		iny				iny 								; skip over token.
.359f	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.35a1	f0 19		beq $35bc			beq 	_ELMinus
.35a3	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.35a5	f0 2c		beq $35d3			beq 	_ELIndirect
.35a7	c9 98		cmp #$98			cmp 	#TKW_QMARK
.35a9	f0 28		beq $35d3			beq 	_ELIndirect
.35ab	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.35ad	f0 39		beq $35e8			beq 	_ELExtension
.35af	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.35b1	90 04		bcc $35b7			bcc 	_ELUSyntax
.35b3	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.35b5	90 d1		bcc $3588			bcc 	_ELExecuteA 				; if so do that token.
.35b7					_ELUSyntax:
.35b7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.35b9	20 18 15	jsr $1518		jsr	errorHandler
.35bc					_ELMinus:
.35bc	20 4e 36	jsr $364e			jsr 	EvaluateNumericTerm 		; get a number to negate.
.35bf	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.35c1	f0 0a		beq $35cd			beq 	_ELMinusInteger
.35c3	8a		txa				txa
.35c4	a2 0e		ldx #$0e		ldx	#14
.35c6	20 81 25	jsr $2581		jsr	floatingpointHandler
.35c9	aa		tax				tax
.35ca	4c 60 35	jmp $3560			jmp 	_ELHasTerm
.35cd					_ELMinusInteger:
.35cd	20 d7 3c	jsr $3cd7			jsr 	MInt32Negate 				; do int negate
.35d0	4c 60 35	jmp $3560			jmp 	_ELHasTerm
.35d3					_ELIndirect:
.35d3	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.35d4	20 57 36	jsr $3657			jsr 	EvaluateIntegerTerm 		; integer address
.35d7	68		pla				pla
.35d8	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.35da	f0 02		beq $35de			beq 	_ELHaveModifier
.35dc	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.35de					_ELHaveModifier:
.35de	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.35e0	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.35e2	4c 60 35	jmp $3560			jmp 	_ELHasTerm
.35e5					_ELCallTemp0:
.35e5	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.35e8					_ELExtension:
.35e8	8a		txa				txa 								; stack pos in A
.35e9	20 69 18	jsr $1869		jsr	extensionHandler
.35ec	aa		tax				tax 								; restore stack
.35ed	4c 60 35	jmp $3560			jmp 	_ELHasTerm
.35f0					UnaryParenthesis:
.35f0	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.35f2	20 fc 34	jsr $34fc			jsr 	EvaluateLevel
.35f5	20 90 3d	jsr $3d90			jsr 	CheckRightParen 			; check for )
.35f8	60		rts				rts
.35f9					ELShiftByteIn:
.35f9	48		pha				pha 								; save bits to shift in.
.35fa	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.35fc	48		pha				pha
.35fd	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.35ff	95 b0		sta $b0,x			sta 	esInt3,x
.3601	b5 a0		lda $a0,x			lda 	esInt1,x
.3603	95 a8		sta $a8,x			sta 	esInt2,x
.3605	b5 98		lda $98,x			lda 	esInt0,x
.3607	95 a0		sta $a0,x			sta 	esInt1,x
.3609	a9 00		lda #$00			lda 	#0
.360b	95 98		sta $98,x			sta 	esInt0,x
.360d	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.360e	29 03		and #$03			and 	#3 							; only want lower 2 bits
.3610	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3612					_ELShiftLoop:
.3612	4a		lsr a				lsr 	a
.3613	76 b0		ror $b0,x			ror 	esInt3,x
.3615	76 a8		ror $a8,x			ror 	esInt2,x
.3617	76 a0		ror $a0,x			ror 	esInt1,x
.3619	76 98		ror $98,x			ror 	esInt0,x
.361b	c9 01		cmp #$01			cmp 	#1
.361d	d0 f3		bne $3612			bne 	_ELShiftLoop
.361f	68		pla				pla 								; get original 6 bit value and OR in.
.3620	29 3f		and #$3f			and 	#$3F
.3622	15 98		ora $98,x			ora 	esInt0,x
.3624	95 98		sta $98,x			sta 	esInt0,x
.3626	60		rts				rts
.3627					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3627	01					.byte	$01			; $86 and
>3628	01					.byte	$01			; $87 or
>3629	01					.byte	$01			; $88 xor
>362a	02					.byte	$02			; $89 >=
>362b	02					.byte	$02			; $8a <=
>362c	02					.byte	$02			; $8b >
>362d	02					.byte	$02			; $8c <
>362e	02					.byte	$02			; $8d =
>362f	02					.byte	$02			; $8e <>
>3630	03					.byte	$03			; $8f +
>3631	03					.byte	$03			; $90 -
>3632	04					.byte	$04			; $91 >>
>3633	04					.byte	$04			; $92 <<
>3634	04					.byte	$04			; $93 *
>3635	04					.byte	$04			; $94 /
>3636	04					.byte	$04			; $95 mod
>3637	05					.byte	$05			; $96 ^
>3638	06					.byte	$06			; $97 !
>3639	06					.byte	$06			; $98 ?
>363a	82					.byte	$82			; $99 repeat
>363b	82					.byte	$82			; $9a while
>363c	82					.byte	$82			; $9b for
>363d	82					.byte	$82			; $9c if
>363e	82					.byte	$82			; $9d defproc
>363f	80					.byte	$80			; $9e until
>3640	80					.byte	$80			; $9f wend
>3641	80					.byte	$80			; $a0 next
>3642	80					.byte	$80			; $a1 then
>3643	80					.byte	$80			; $a2 endif
>3644	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3645					EvaluateTerm:
.3645	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.3647	20 fc 34	jsr $34fc			jsr 	EvaluateLevel
.364a	20 ab 34	jsr $34ab			jsr 	DereferenceOne
.364d	60		rts				rts
.364e					EvaluateNumericTerm:
.364e	20 45 36	jsr $3645			jsr 	EvaluateTerm
.3651	b5 90		lda $90,x			lda 	esType,x
.3653	0a		asl a				asl 	a 							; see if it's a string.
.3654	30 09		bmi $365f			bmi 	ENTType
.3656	60		rts				rts
.3657					EvaluateIntegerTerm:
.3657	20 45 36	jsr $3645			jsr 	EvaluateTerm
.365a	b5 90		lda $90,x			lda 	esType,x
.365c	d0 01		bne $365f			bne 	ENTType
.365e	60		rts				rts
.365f					ENTType:
.365f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3661	20 18 15	jsr $1518		jsr	errorHandler
.3664					EvaluateRoot:
.3664	a2 00		ldx #$00			ldx 	#0
.3666					Evaluate:
.3666	a9 00		lda #$00			lda 	#0
.3668	20 fc 34	jsr $34fc			jsr 	EvaluateLevel
.366b	20 ab 34	jsr $34ab			jsr 	DereferenceOne
.366e	60		rts				rts
.366f					EvaluateNumeric:
.366f	20 66 36	jsr $3666			jsr 	Evaluate
.3672	b5 90		lda $90,x			lda 	esType,x
.3674	0a		asl a				asl 	a 							; see if it's a string.
.3675	30 e8		bmi $365f			bmi 	ENTType
.3677	4a		lsr a				lsr 	a 							; shift float flag into carry.
.3678	4a		lsr a				lsr 	a
.3679	60		rts				rts
.367a					EvaluateString:
.367a	20 66 36	jsr $3666			jsr 	Evaluate
.367d	b5 90		lda $90,x			lda 	esType,x
.367f	0a		asl a				asl 	a 							; see if it's a string.
.3680	10 dd		bpl $365f			bpl 	ENTType
.3682	60		rts				rts
.3683					EvaluateRootInteger:
.3683	a2 00		ldx #$00			ldx 	#0
.3685					EvaluateInteger:
.3685	20 66 36	jsr $3666			jsr 	Evaluate
.3688	b5 90		lda $90,x			lda 	esType,x
.368a	d0 d3		bne $365f			bne 	ENTType
.368c	60		rts				rts
.368d					EvaluateSmallInteger:
.368d	20 85 36	jsr $3685			jsr 	EvaluateInteger
.3690	b5 a0		lda $a0,x			lda 	esInt1,x
.3692	15 a8		ora $a8,x			ora 	esInt2,x
.3694	15 b0		ora $b0,x			ora 	esInt3,x
.3696	d0 03		bne $369b			bne 	_ESIValue
.3698	b5 98		lda $98,x			lda 	esInt0,x
.369a	60		rts				rts
.369b					_ESIValue:
.369b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.369d	20 18 15	jsr $1518		jsr	errorHandler
.36a0					LinkEvaluate:
.36a0	aa		tax				tax
.36a1	20 66 36	jsr $3666			jsr 	Evaluate
.36a4	8a		txa				txa
.36a5	60		rts				rts
.36a6					LinkEvaluateTerm:
.36a6	aa		tax				tax
.36a7	20 45 36	jsr $3645			jsr 	EvaluateTerm
.36aa	8a		txa				txa
.36ab	60		rts				rts
.36ac					LinkEvaluateInteger:
.36ac	aa		tax				tax
.36ad	20 85 36	jsr $3685			jsr 	EvaluateInteger
.36b0	8a		txa				txa
.36b1	60		rts				rts
.36b2					LinkEvaluateString:
.36b2	aa		tax				tax
.36b3	20 7a 36	jsr $367a			jsr 	EvaluateString
.36b6	8a		txa				txa
.36b7	60		rts				rts
.36b8					LinkEvaluateSmallInt:
.36b8	aa		tax				tax
.36b9	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger
.36bc	8a		txa				txa
.36bd	60		rts				rts
.36be					EvaluateReference:
.36be	ad 38 36	lda $3638			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.36c1	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.36c2	e9 01		sbc #$01			sbc 	#1
.36c4	20 fc 34	jsr $34fc			jsr 	EvaluateLevel
.36c7	b5 90		lda $90,x			lda 	esType,x
.36c9	10 01		bpl $36cc			bpl 	_ERFail
.36cb	60		rts				rts
.36cc					_ERFail:
.36cc	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.36ce	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.36d1					Event_Str:
.36d1	20 6f 36	jsr $366f			jsr 	EvaluateNumeric 			; get a number.
.36d4	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.36d6	d0 13		bne $36eb			bne 	_ESFloat
.36d8	20 2e 37	jsr $372e			jsr 	ConvertGetBase 				; get base, or default.
.36db	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.36dd	85 2a		sta $2a				sta 	temp0
.36df	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.36e1	85 2b		sta $2b				sta 	1+(temp0)
.36e3	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.36e5	20 73 3c	jsr $3c73			jsr 	MInt32ToString 				; convert to string.
.36e8	4c f8 36	jmp $36f8			jmp 	_ESCloneExit 				; clone and exit.
.36eb					_ESFloat:
.36eb	20 90 3d	jsr $3d90			jsr 	CheckRightParen 			; check closing )
.36ee	20 73 2a	jsr $2a73			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.36f1	8a		txa				txa
.36f2	a2 16		ldx #$16		ldx	#22
.36f4	20 81 25	jsr $2581		jsr	floatingpointHandler
.36f7	aa		tax				tax
.36f8					_ESCloneExit:
.36f8	8a		txa				txa
.36f9	a2 04		ldx #$04		ldx	#4
.36fb	20 c8 40	jsr $40c8		jsr	stringHandler
.36fe	aa		tax				tax
.36ff	60		rts				rts
.3700					UnaryVal:
.3700	38		sec				sec 								; Carry set to return value
.3701	b0 01		bcs $3704			bcs 	ValueMain
.3703					UnaryIsVal:
.3703	18		clc				clc									; Carry clear to return legitimacy
.3704					ValueMain:
.3704	08		php				php 								; save results (CS is value, CC is validation)
.3705	20 7a 36	jsr $367a			jsr 	EvaluateString
.3708	20 2e 37	jsr $372e			jsr 	ConvertGetBase 				; get base, if any.
.370b	98		tya				tya
.370c	48		pha				pha
.370d	20 73 2a	jsr $2a73			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3710	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3712	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3714	20 8b 3b	jsr $3b8b			jsr 	MInt32FromString 			; convert it back from a string.
.3717	b0 0c		bcs $3725			bcs 	_VMSuccess 					; successfully converted.
.3719	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.371b	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.371d	f0 00		beq $371f			beq 	_VMFailed 	 				; so we failed.
.371f					_VMFailed:
.371f	68		pla				pla
.3720	a8		tay				tay
.3721	28		plp				plp
.3722	4c 1d 3d	jmp $3d1d			jmp 	MInt32False 				; return 0 whatever.
.3725					_VMSuccess:
.3725	68		pla				pla
.3726	a8		tay				tay
.3727	28		plp				plp 								; if CS the it was val() so we want the value.
.3728	b0 03		bcs $372d			bcs 	_VMExit
.372a	4c 19 3d	jmp $3d19			jmp 	MInt32True 					; otherwise return true as successful.
.372d					_VMExit:
.372d	60		rts				rts
.372e					ConvertGetBase:
.372e	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3730	95 99		sta $99,x			sta 	esInt0+1,x
.3732	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3734	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3736	d0 0e		bne $3746			bne 	_CGBDone 					; not found, should be )
.3738	e8		inx				inx 								; next level
.3739	c8		iny				iny 								; skip comma.
.373a	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger		; evaluate the base.
.373d	ca		dex				dex
.373e	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3740	90 08		bcc $374a			bcc 	_CGBValue 					; (it should work as high as 37)
.3742	c9 11		cmp #$11			cmp 	#17
.3744	b0 04		bcs $374a			bcs 	_CGBValue
.3746					_CGBDone:
.3746	20 90 3d	jsr $3d90			jsr 	CheckRightParen
.3749	60		rts				rts
.374a					_CGBValue:
.374a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.374c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.374f					EventFunction:
.374f	20 be 36	jsr $36be			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3752	b5 90		lda $90,x			lda 	esType,x
.3754	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3756	d0 5b		bne $37b3			bne 	_EFType
.3758	20 9d 3d	jsr $3d9d			jsr 	CheckComma
.375b	e8		inx				inx
.375c	20 85 36	jsr $3685			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.375f	20 90 3d	jsr $3d90			jsr 	CheckRightParen 			; finish off with the right bracket
.3762	ca		dex				dex
.3763	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3765	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3767	15 a8		ora $a8,x			ora 	esInt2,x
.3769	15 b0		ora $b0,x			ora 	esInt3,x
.376b	d0 41		bne $37ae			bne 	_EFValue
.376d	98		tya				tya
.376e	48		pha				pha
.376f	8a		txa				txa
.3770	48		pha				pha
.3771	a2 1c		ldx #$1c		ldx	#28
.3773	20 f6 14	jsr $14f6		jsr	deviceHandler
.3776	84 2d		sty $2d				sty 	temp1+1
.3778	85 2c		sta $2c				sta 	temp1
.377a	68		pla				pla
.377b	aa		tax				tax
.377c	20 73 2a	jsr $2a73			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.377f	a0 03		ldy #$03			ldy 	#3							; if -ve
.3781	b1 2a		lda ($2a),y			lda 	(temp0),y
.3783	30 23		bmi $37a8			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3785	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3787	b1 2a		lda ($2a),y			lda 	(temp0),y
.3789	c8		iny				iny
.378a	11 2a		ora ($2a),y			ora 	(temp0),y
.378c	f0 17		beq $37a5			beq 	_EFInitialise 				; if so, initialise the value but return false.
.378e	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.3790	38		sec				sec
.3791	b1 2a		lda ($2a),y			lda 	(temp0),y
.3793	e5 2c		sbc $2c				sbc 	temp1
.3795	c8		iny				iny
.3796	b1 2a		lda ($2a),y			lda 	(temp0),y
.3798	e5 2d		sbc $2d				sbc 	temp1+1
.379a	10 0c		bpl $37a8			bpl 	_EFFail 					; if trigger >= timer then return False
.379c	20 b8 37	jsr $37b8			jsr 	SetEventTimer 				; reset the timer for next time.
.379f	20 19 3d	jsr $3d19			jsr	 	MInt32True 					; and treutn true as fired.
.37a2	68		pla				pla
.37a3	a8		tay				tay
.37a4	60		rts				rts
.37a5					_EFInitialise:
.37a5	20 b8 37	jsr $37b8			jsr		SetEventTimer 				; set trigger time to time + elapsed
.37a8					_EFFail:
.37a8	68		pla				pla
.37a9	a8		tay				tay
.37aa	20 1d 3d	jsr $3d1d			jsr 	MInt32False
.37ad	60		rts				rts
.37ae					_EFValue:
.37ae	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.37b0	20 18 15	jsr $1518		jsr	errorHandler
.37b3					_EFType:
.37b3	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.37b5	20 18 15	jsr $1518		jsr	errorHandler
.37b8					SetEventTimer:
.37b8	a0 00		ldy #$00			ldy 	#0
.37ba	18		clc				clc
.37bb	a5 2c		lda $2c				lda 	temp1
.37bd	75 99		adc $99,x			adc 	esInt0+1,x
.37bf	91 2a		sta ($2a),y			sta		(temp0),y
.37c1	c8		iny				iny
.37c2	a5 2d		lda $2d				lda 	temp1+1
.37c4	75 a1		adc $a1,x			adc 	esInt1+1,x
.37c6	91 2a		sta ($2a),y			sta		(temp0),y
.37c8	88		dey				dey
.37c9	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.37cb	d0 04		bne $37d1			bne 	_SETExit 					; zero means initialise.....
.37cd	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.37cf	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.37d1					_SETExit:
.37d1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.37d2					UnaryLen:
.37d2	20 e0 37	jsr $37e0			jsr 	ULStart
.37d5					ULFinish:
.37d5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.37d7	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.37d9	20 2c 3d	jsr $3d2c			jsr 	MInt32Set8Bit 				; write it out.
.37dc	20 90 3d	jsr $3d90			jsr 	CheckRightParen
.37df	60		rts				rts
.37e0	20 7a 36	jsr $367a	ULStart:jsr 	EvaluateString
.37e3	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.37e5	85 2a		sta $2a				sta 	temp0
.37e7	b5 a0		lda $a0,x			lda 	esInt1,x
.37e9	85 2b		sta $2b				sta 	temp0+1
.37eb	84 32		sty $32				sty 	tempShort 					; get length
.37ed	a0 00		ldy #$00			ldy 	#0
.37ef	60		rts				rts
.37f0					UnaryAsc:
.37f0	20 e0 37	jsr $37e0			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.37f3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.37f5	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.37f6	c9 00		cmp #$00			cmp 	#0
.37f8	d0 db		bne $37d5			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.37fa	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.37fc	20 18 15	jsr $1518		jsr	errorHandler
.37ff					UnaryAbs:
.37ff	20 6f 36	jsr $366f			jsr 	EvaluateNumeric 			; some numeric value
.3802	b0 07		bcs $380b			bcs 	_UAFloat 					; CS then float, so use that function
.3804	20 d2 3c	jsr $3cd2			jsr 	MInt32Absolute 				; int version
.3807	20 90 3d	jsr $3d90			jsr 	CheckRightParen
.380a	60		rts				rts
.380b					_UAFloat:
.380b	8a		txa				txa 								; float version
.380c	a2 02		ldx #$02		ldx	#2
.380e	20 81 25	jsr $2581		jsr	floatingpointHandler
.3811	aa		tax				tax
.3812	20 90 3d	jsr $3d90			jsr 	CheckRightParen
.3815	60		rts				rts
.3816					UnarySgn:
.3816	20 6f 36	jsr $366f			jsr 	EvaluateNumeric 			; same as above but sign of value
.3819	b0 07		bcs $3822			bcs 	_USFloat
.381b	20 0a 3d	jsr $3d0a			jsr 	MInt32Sign
.381e	20 90 3d	jsr $3d90			jsr 	CheckRightParen
.3821	60		rts				rts
.3822					_USFloat:
.3822	8a		txa				txa
.3823	a2 10		ldx #$10		ldx	#16
.3825	20 81 25	jsr $2581		jsr	floatingpointHandler
.3828	aa		tax				tax
.3829	20 90 3d	jsr $3d90			jsr 	CheckRightParen
.382c	60		rts				rts
.382d					UnaryPeek:
.382d	20 59 38	jsr $3859			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3830	4c 4d 38	jmp $384d			jmp 	PDLByte0
.3833					UnaryDeek:
.3833	20 59 38	jsr $3859			jsr 	PDLCode
.3836	4c 47 38	jmp $3847			jmp 	PDLByte1
.3839					UnaryLeek:
.3839	20 59 38	jsr $3859			jsr 	PDLCode
.383c	a0 03		ldy #$03			ldy 	#3							; read 3-2
.383e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3840	95 b0		sta $b0,x			sta 	esInt3,x
.3842	88		dey				dey
.3843	b1 2a		lda ($2a),y			lda 	(temp0),y
.3845	95 a8		sta $a8,x			sta 	esInt2,x
.3847					PDLByte1:
.3847	a0 01		ldy #$01			ldy 	#1
.3849	b1 2a		lda ($2a),y			lda 	(temp0),y
.384b	95 a0		sta $a0,x			sta 	esInt1,x
.384d					PDLByte0:
.384d	a0 00		ldy #$00			ldy 	#0
.384f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3851	95 98		sta $98,x			sta 	esInt0,x
.3853	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3855	20 90 3d	jsr $3d90			jsr 	CheckRightParen 			; check right and return
.3858	60		rts				rts
.3859					PDLCode:
.3859	20 85 36	jsr $3685			jsr 	EvaluateInteger 			; some address
.385c	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.385e	85 2a		sta $2a				sta 	temp0
.3860	b5 a0		lda $a0,x			lda 	esInt1,x
.3862	85 2b		sta $2b				sta 	temp0+1
.3864	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3866	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3868	95 a8		sta $a8,x			sta 	esInt2,x
.386a	95 b0		sta $b0,x			sta 	esInt3,x
.386c	84 32		sty $32				sty 	tempShort 					; save Y
.386e	60		rts				rts
.386f					Unary_Random:
.386f	20 4d 3d	jsr $3d4d			jsr 	MInt32Random 				; generate random number.
.3872	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3874	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3876	f0 08		beq $3880			beq 	_URExit
.3878	e8		inx				inx 								; load range 0..r-1 into +1
.3879	20 85 36	jsr $3685			jsr 	EvaluateInteger
.387c	ca		dex				dex
.387d	20 70 3b	jsr $3b70			jsr 	MInt32Modulus 				; calculate random % modulus
.3880					_URExit:
.3880	20 90 3d	jsr $3d90			jsr 	CheckRightParen 			; check right and return
.3883	60		rts				rts
.3884					Unary_Min:
.3884	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3886	d0 02		bne $388a			bne 	UnaryMBody
.3888					Unary_Max:
.3888	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.388a					UnaryMBody:
.388a	48		pha				pha 								; save comparator on stack, shows min or max
.388b	20 66 36	jsr $3666			jsr 	Evaluate 					; get the first thing to check
.388e					_UnaryMLoop:
.388e	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3890	c8		iny				iny
.3891	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3893	f0 09		beq $389e			beq 	_UnaryMExit
.3895	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3897	f0 07		beq $38a0			beq 	_UnaryMCompare
.3899	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.389b	20 18 15	jsr $1518		jsr	errorHandler
.389e					_UnaryMExit:
.389e	68		pla				pla 								; done so throw comparator and return.
.389f	60		rts				rts
.38a0					_UnaryMCompare:
.38a0	e8		inx				inx 								; get the 2nd thing to evaluate
.38a1	20 66 36	jsr $3666			jsr 	Evaluate
.38a4	ca		dex				dex
.38a5	20 2c 34	jsr $342c			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.38a8	85 32		sta $32				sta 	tempShort 					; save result
.38aa	68		pla				pla 								; get what we need
.38ab	48		pha				pha
.38ac	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.38ae	d0 de		bne $388e			bne 	_UnaryMLoop 				; no, try another value.
.38b0	20 1d 3d	jsr $3d1d			jsr 	MInt32False 				; promote 2nd to 1st.
.38b3	20 01 3c	jsr $3c01			jsr 	MInt32Add
.38b6	4c 8e 38	jmp $388e			jmp 	_UnaryMLoop
.38b9					Unary_Page:
.38b9	20 1d 3d	jsr $3d1d			jsr 	MInt32False 				; zero
.38bc	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.38bf	95 98		sta $98,x			sta 	esInt0,x
.38c1	ad c9 0a	lda $0ac9			lda 	basePage+1
.38c4	95 a0		sta $a0,x			sta 	esInt1,x
.38c6	60		rts				rts
.38c7					UnaryReference:
.38c7	a9 0f		lda #$0f			lda 	#15
.38c9	20 fc 34	jsr $34fc			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.38cc	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.38ce	10 05		bpl $38d5			bpl 	UType
.38d0	a9 00		lda #$00			lda 	#0 							; make it an integer
.38d2	95 90		sta $90,x			sta 	esType,x
.38d4	60		rts				rts
.38d5					UType:
.38d5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.38d7	20 18 15	jsr $1518		jsr	errorHandler
.38da					UnaryHexMarker:
.38da	4c 57 36	jmp $3657			jmp 	EvaluateIntegerTerm
.38dd					UnaryComplement:
.38dd	20 57 36	jsr $3657			jsr 	EvaluateIntegerTerm
.38e0	20 f1 3c	jsr $3cf1			jsr 	MInt32Not
.38e3	60		rts				rts
.38e4					UnaryIntToFloat:
.38e4	20 6f 36	jsr $366f			jsr 	EvaluateNumeric				; some number
.38e7	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.38e9	d0 0b		bne $38f6			bne 	_UIFExit
.38eb	8a		txa				txa 								; convert and set type
.38ec	a2 1c		ldx #$1c		ldx	#28
.38ee	20 81 25	jsr $2581		jsr	floatingpointHandler
.38f1	aa		tax				tax
.38f2	a9 01		lda #$01			lda 	#1
.38f4	95 90		sta $90,x			sta 	esType,x
.38f6					_UIFExit:
.38f6	60		rts				rts
.38f7					UnaryFloatToInt:
.38f7	20 6f 36	jsr $366f			jsr 	EvaluateNumeric 			; the number
.38fa	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.38fc	f0 0b		beq $3909			beq 	_UFIExit
.38fe	8a		txa				txa 								; convert to int
.38ff	a2 14		ldx #$14		ldx	#20
.3901	20 81 25	jsr $2581		jsr	floatingpointHandler
.3904	aa		tax				tax
.3905	a9 00		lda #$00			lda 	#0 							; set type
.3907	95 90		sta $90,x			sta 	esType,x
.3909					_UFIExit:
.3909	60		rts				rts
.390a					UnaryAlloc:
.390a	e8		inx				inx 								; evaluate memory required
.390b	20 85 36	jsr $3685			jsr 	EvaluateInteger
.390e	20 90 3d	jsr $3d90			jsr 	CheckRightParen
.3911	ca		dex				dex
.3912	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3914	15 b1		ora $b1,x			ora 	esInt3+1,x
.3916	d0 1d		bne $3935			bne 	_UABadValue
.3918	20 1d 3d	jsr $3d1d			jsr 	MInt32False					; zero return.
.391b	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.391d	95 a0		sta $a0,x			sta 	esInt1,x
.391f	a5 35		lda $35				lda 	lowMemory
.3921	95 98		sta $98,x			sta 	esInt0,x
.3923	18		clc				clc 								; add alloc required.
.3924	75 99		adc $99,x			adc 	esInt0+1,x
.3926	85 35		sta $35				sta 	lowMemory
.3928	a5 36		lda $36				lda 	lowMemory+1
.392a	75 a1		adc $a1,x			adc 	esInt1+1,x
.392c	85 36		sta $36				sta 	lowMemory+1
.392e	b0 05		bcs $3935			bcs		_UABadValue 				; overflow definitely bad.
.3930	c5 34		cmp $34				cmp 	highMemory+1
.3932	b0 01		bcs $3935			bcs 	_UABadValue 				; out of memory bad.
.3934	60		rts				rts
.3935					_UABadValue:
.3935	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3937	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.393a					UnaryTimer:
.393a	20 90 3d	jsr $3d90			jsr 	CheckRightParen 			; no parameters
.393d	98		tya				tya
.393e	48		pha				pha
.393f	20 44 3d	jsr $3d44			jsr 	MInt32Zero 					; zero result
.3942	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3944	a2 1c		ldx #$1c		ldx	#28
.3946	20 f6 14	jsr $14f6		jsr	deviceHandler
.3949	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.394b	95 98		sta $98,x			sta 	esInt0,x
.394d	98		tya				tya
.394e	95 a0		sta $a0,x			sta 	esInt1,x
.3950	68		pla				pla
.3951	a8		tay				tay
.3952	60		rts				rts
.3953					UnaryInkey:
.3953	20 90 3d	jsr $3d90			jsr 	CheckRightParen
.3956	86 2a		stx $2a				stx 	temp0
.3958	a2 0a		ldx #$0a		ldx	#10
.395a	20 f6 14	jsr $14f6		jsr	deviceHandler
.395d	a6 2a		ldx $2a				ldx 	temp0
.395f	20 2c 3d	jsr $3d2c			jsr 	MInt32Set8Bit
.3962	60		rts				rts
.3963					UnaryGet:
.3963	20 90 3d	jsr $3d90			jsr 	CheckRightParen
.3966	86 2a		stx $2a				stx 	temp0
.3968					_UGLoop:
.3968	a2 02		ldx #$02		ldx	#2
.396a	20 f6 14	jsr $14f6		jsr	deviceHandler
.396d	a2 0a		ldx #$0a		ldx	#10
.396f	20 f6 14	jsr $14f6		jsr	deviceHandler
.3972	c9 00		cmp #$00			cmp 	#0
.3974	f0 f2		beq $3968			beq 	_UGLoop
.3976	a6 2a		ldx $2a				ldx 	temp0
.3978	20 2c 3d	jsr $3d2c			jsr 	MInt32Set8Bit
.397b	60		rts				rts
.397c					UnaryGetString:
.397c	20 63 39	jsr $3963			jsr 	UnaryGet
.397f					UGSDoChr:
.397f	4c d0 39	jmp $39d0			jmp 	ChrCode
.3982					UnaryInkeyString:
.3982	20 53 39	jsr $3953			jsr 	UnaryInkey
.3985	b5 98		lda $98,x			lda 	esInt0,x
.3987	d0 f6		bne $397f			bne 	UGSDoChr
.3989	8a		txa				txa
.398a	a2 08		ldx #$08		ldx	#8
.398c	20 c8 40	jsr $40c8		jsr	stringHandler
.398f	aa		tax				tax
.3990	60		rts				rts
.3991					UnarySys:
.3991	20 85 36	jsr $3685			jsr 	EvaluateInteger 				; get the address
.3994	20 90 3d	jsr $3d90			jsr 	CheckRightParen
.3997	20 73 2a	jsr $2a73			jsr 	TOSToTemp0 						; copy call address to temp0
.399a	8a		txa				txa
.399b	48		pha				pha
.399c	98		tya				tya
.399d	48		pha				pha
.399e	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.39a1	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.39a4	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.39a7	20 b6 39	jsr $39b6			jsr 	_CallTemp0
.39aa	85 32		sta $32				sta 	tempShort 						; restore YX
.39ac	68		pla				pla
.39ad	a8		tay				tay
.39ae	68		pla				pla
.39af	aa		tax				tax
.39b0	a5 32		lda $32				lda 	tempShort
.39b2	20 2c 3d	jsr $3d2c			jsr 	MInt32Set8Bit 					; return result.
.39b5	60		rts				rts
.39b6					_CallTemp0:
.39b6	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.39b9					UnaryMem:
.39b9	20 1d 3d	jsr $3d1d			jsr 	MInt32False 					; set to false (e.g. 0)
.39bc	38		sec				sec
.39bd	a5 33		lda $33				lda 	highMemory 						; calculate value
.39bf	e5 35		sbc $35				sbc 	lowMemory
.39c1	95 98		sta $98,x			sta 	esInt0,x
.39c3	a5 34		lda $34				lda 	highMemory+1
.39c5	e5 36		sbc $36				sbc 	lowMemory+1
.39c7	95 a0		sta $a0,x			sta 	esInt1,x
.39c9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.39ca					ExecChr:
.39ca	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger		; character number 0-255
.39cd	20 90 3d	jsr $3d90			jsr 	CheckRightParen				; right bracket
.39d0					ChrCode:
.39d0	98		tya				tya
.39d1	48		pha				pha
.39d2	8a		txa				txa 								; A = stack
.39d3	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.39d5	a2 02		ldx #$02		ldx	#2
.39d7	20 c8 40	jsr $40c8		jsr	stringHandler
.39da	aa		tax				tax 								; X = stack
.39db	68		pla				pla
.39dc	a8		tay				tay
.39dd	60		rts				rts
.39de					ExecLower:
.39de	38		sec				sec 								; set carry is lower
.39df	b0 01		bcs $39e2			bcs 	ExecUpperLower
.39e1					ExecUpper:
.39e1	18		clc				clc 								; clear carry is upper
.39e2					ExecUpperLower:
.39e2	08		php				php 								; save carry
.39e3	20 7a 36	jsr $367a			jsr 	EvaluateString 				; string to stack,X
.39e6	20 90 3d	jsr $3d90			jsr 	CheckRightParen 			; check closing right bracket.
.39e9	28		plp				plp 								; restore carry, save Y
.39ea	98		tya				tya
.39eb	48		pha				pha
.39ec	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.39ee	2a		rol a				rol 	a
.39ef	a8		tay				tay 								; now in Y
.39f0	8a		txa				txa 								; do the substring and exit.
.39f1	a2 0c		ldx #$0c		ldx	#12
.39f3	20 c8 40	jsr $40c8		jsr	stringHandler
.39f6	aa		tax				tax
.39f7	68		pla				pla
.39f8	a8		tay				tay
.39f9	60		rts				rts
.39fa					ExecLeft:
.39fa	20 7a 36	jsr $367a			jsr 	EvaluateString 				; string to stack,X
.39fd	20 9d 3d	jsr $3d9d			jsr 	CheckComma
.3a00	e8		inx				inx
.3a01	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3a03	20 2c 3d	jsr $3d2c			jsr 	MInt32Set8Bit
.3a06	e8		inx				inx
.3a07	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3a0a					ExecSubstring:
.3a0a	ca		dex				dex 								; fix up X
.3a0b	ca		dex				dex
.3a0c	20 90 3d	jsr $3d90			jsr 	CheckRightParen 			; check closing right bracket.
.3a0f	8a		txa				txa 								; do the substring and exit.
.3a10	a2 0e		ldx #$0e		ldx	#14
.3a12	20 c8 40	jsr $40c8		jsr	stringHandler
.3a15	aa		tax				tax
.3a16	60		rts				rts
.3a17					ExecMid:
.3a17	20 7a 36	jsr $367a			jsr 	EvaluateString 				; string to stack,X
.3a1a	20 9d 3d	jsr $3d9d			jsr 	CheckComma
.3a1d	e8		inx				inx
.3a1e	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3a21	c9 00		cmp #$00			cmp 	#0
.3a23	f0 15		beq $3a3a			beq 	_EMValue
.3a25	e8		inx				inx
.3a26	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3a28	20 2c 3d	jsr $3d2c			jsr 	MInt32Set8Bit
.3a2b	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3a2d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3a2f	f0 d9		beq $3a0a			beq 	ExecSubString
.3a31	20 9d 3d	jsr $3d9d			jsr 	CheckComma
.3a34	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3a37	4c 0a 3a	jmp $3a0a			jmp 	ExecSubString
.3a3a					_EMValue:
.3a3a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3a3c	20 18 15	jsr $1518		jsr	errorHandler
.3a3f					ExecRight:
.3a3f	20 7a 36	jsr $367a			jsr 	EvaluateString 				; string to stack,X
.3a42	20 9d 3d	jsr $3d9d			jsr 	CheckComma
.3a45	e8		inx				inx
.3a46	20 8d 36	jsr $368d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3a49	ca		dex				dex
.3a4a	98		tya				tya
.3a4b	48		pha				pha
.3a4c	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3a4e	85 2a		sta $2a				sta 	temp0
.3a50	b5 a0		lda $a0,x			lda 	esInt1,x
.3a52	85 2b		sta $2b				sta 	temp0+1
.3a54	a0 00		ldy #$00			ldy 	#0 							; point to length
.3a56	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3a58	18		clc				clc 								; add 1.
.3a59	69 01		adc #$01			adc 	#1
.3a5b	38		sec				sec
.3a5c	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3a5e	f0 02		beq $3a62			beq		_ERMake1 					; if zero, make it 1.
.3a60	b0 02		bcs $3a64			bcs		_EROkay
.3a62					_ERMake1:
.3a62	a9 01		lda #$01			lda 	#1 							; start position.
.3a64					_EROkay:
.3a64	e8		inx				inx 								; set start pos.
.3a65	95 98		sta $98,x			sta 	esInt0,x
.3a67	e8		inx				inx
.3a68	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3a6a	20 2c 3d	jsr $3d2c			jsr 	MInt32Set8Bit
.3a6d	68		pla				pla
.3a6e	a8		tay				tay
.3a6f	4c 0a 3a	jmp $3a0a			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3a72					MInt32And:
.3a72	b5 98		lda $98,x			lda 	esInt0,x
.3a74	35 99		and $99,x			and 	esInt0+1,x
.3a76	95 98		sta $98,x			sta 	esInt0,x
.3a78	b5 a0		lda $a0,x			lda 	esInt1,x
.3a7a	35 a1		and $a1,x			and 	esInt1+1,x
.3a7c	95 a0		sta $a0,x			sta 	esInt1,x
.3a7e	b5 a8		lda $a8,x			lda 	esInt2,x
.3a80	35 a9		and $a9,x			and 	esInt2+1,x
.3a82	95 a8		sta $a8,x			sta 	esInt2,x
.3a84	b5 b0		lda $b0,x			lda 	esInt3,x
.3a86	35 b1		and $b1,x			and 	esInt3+1,x
.3a88	95 b0		sta $b0,x			sta 	esInt3,x
.3a8a	60		rts				rts
.3a8b					MInt32Or:
.3a8b	b5 98		lda $98,x			lda 	esInt0,x
.3a8d	15 99		ora $99,x			ora 	esInt0+1,x
.3a8f	95 98		sta $98,x			sta 	esInt0,x
.3a91	b5 a0		lda $a0,x			lda 	esInt1,x
.3a93	15 a1		ora $a1,x			ora 	esInt1+1,x
.3a95	95 a0		sta $a0,x			sta 	esInt1,x
.3a97	b5 a8		lda $a8,x			lda 	esInt2,x
.3a99	15 a9		ora $a9,x			ora 	esInt2+1,x
.3a9b	95 a8		sta $a8,x			sta 	esInt2,x
.3a9d	b5 b0		lda $b0,x			lda 	esInt3,x
.3a9f	15 b1		ora $b1,x			ora 	esInt3+1,x
.3aa1	95 b0		sta $b0,x			sta 	esInt3,x
.3aa3	60		rts				rts
.3aa4					MInt32Xor:
.3aa4	b5 98		lda $98,x			lda 	esInt0,x
.3aa6	55 99		eor $99,x			eor 	esInt0+1,x
.3aa8	95 98		sta $98,x			sta 	esInt0,x
.3aaa	b5 a0		lda $a0,x			lda 	esInt1,x
.3aac	55 a1		eor $a1,x			eor 	esInt1+1,x
.3aae	95 a0		sta $a0,x			sta 	esInt1,x
.3ab0	b5 a8		lda $a8,x			lda 	esInt2,x
.3ab2	55 a9		eor $a9,x			eor 	esInt2+1,x
.3ab4	95 a8		sta $a8,x			sta 	esInt2,x
.3ab6	b5 b0		lda $b0,x			lda 	esInt3,x
.3ab8	55 b1		eor $b1,x			eor 	esInt3+1,x
.3aba	95 b0		sta $b0,x			sta 	esInt3,x
.3abc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3abd					MInt32Compare:
.3abd	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3abf	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3ac1	d0 13		bne $3ad6			bne 	MInt32Compare2
.3ac3	b5 a0		lda $a0,x			lda 	esInt1,x
.3ac5	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3ac7	d0 0d		bne $3ad6			bne 	MInt32Compare2
.3ac9	b5 a8		lda $a8,x			lda 	esInt2,x
.3acb	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3acd	d0 07		bne $3ad6			bne 	MInt32Compare2
.3acf	b5 b0		lda $b0,x			lda 	esInt3,x
.3ad1	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3ad3	d0 01		bne $3ad6			bne 	MInt32Compare2
.3ad5	60		rts				rts
.3ad6					MInt32Compare2:
.3ad6	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3ad8	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3ada	b5 a0		lda $a0,x			lda		esInt1,x
.3adc	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3ade	b5 a8		lda $a8,x			lda		esInt2,x
.3ae0	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3ae2	b5 b0		lda $b0,x			lda		esInt3,x
.3ae4	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3ae6	50 02		bvc $3aea			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3ae8	49 80		eor #$80			eor 	#$80
.3aea					_I32LNoOverflow
.3aea	30 03		bmi $3aef			bmi 	MInt32CLess					; if -ve then return $FF
.3aec	a9 01		lda #$01			lda 	#$01						; else return $01
.3aee	60		rts				rts
.3aef					MInt32CLess:
.3aef	a9 ff		lda #$ff			lda 	#$FF
.3af1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3af2					MInt32SDivide:
.3af2	98		tya				tya  								; save Y, which is the count of negations
.3af3	48		pha				pha
.3af4	a0 00		ldy #$00			ldy 	#0 							; zero count
.3af6	20 0e 3b	jsr $3b0e			jsr 	_MInt32SRemSign 			; unsign TOS
.3af9	e8		inx				inx 								; unsign TOS+1
.3afa	20 0e 3b	jsr $3b0e			jsr 	_MInt32SRemSign
.3afd	ca		dex				dex
.3afe	98		tya				tya 								; save sign count on stack
.3aff	48		pha				pha
.3b00	20 17 3b	jsr $3b17			jsr 	MInt32UDivide 				; unsigned division
.3b03	68		pla				pla 								; get sign count back
.3b04	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3b06	f0 03		beq $3b0b			beq 	_I32SNoNeg
.3b08	20 d7 3c	jsr $3cd7			jsr 	MInt32Negate
.3b0b					_I32SNoNeg:
.3b0b	68		pla				pla 								; restoe Y and exit
.3b0c	a8		tay				tay
.3b0d	60		rts				rts
.3b0e					_MInt32SRemSign:
.3b0e	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3b10	10 04		bpl $3b16			bpl 	_MInt32SRSExit
.3b12	c8		iny				iny 								; increment the sign count
.3b13	20 d7 3c	jsr $3cd7			jsr 	MInt32Negate 				; negate the value.
.3b16					_MInt32SRSExit:
.3b16	60		rts				rts
.3b17					MInt32UDivide:
.3b17	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3b19	15 a1		ora $a1,x			ora 	esInt1+1,x
.3b1b	15 a2		ora $a2,x			ora 	esInt1+2,x
.3b1d	15 a3		ora $a3,x			ora 	esInt1+3,x
.3b1f	f0 4a		beq $3b6b			beq 	_MInt32DZero
.3b21	e8		inx				inx 								; clear A
.3b22	e8		inx				inx
.3b23	20 1d 3d	jsr $3d1d			jsr 	MInt32False
.3b26	ca		dex				dex
.3b27	ca		dex				dex
.3b28	98		tya				tya 								; save Y on the stack
.3b29	48		pha				pha
.3b2a	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3b2c					_MInt32UDLoop:
.3b2c	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3b2e	36 a0		rol $a0,x			rol 	esInt1,x
.3b30	36 a8		rol $a8,x			rol 	esInt2,x
.3b32	36 b0		rol $b0,x			rol 	esInt3,x
.3b34	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3b36	36 a2		rol $a2,x			rol 	esInt1+2,x
.3b38	36 aa		rol $aa,x			rol 	esInt2+2,x
.3b3a	36 b2		rol $b2,x			rol 	esInt3+2,x
.3b3c	38		sec				sec 								; calculate A-M saving result on the stack
.3b3d	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3b3f	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3b41	48		pha				pha
.3b42	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3b44	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3b46	48		pha				pha
.3b47	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3b49	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3b4b	48		pha				pha
.3b4c	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3b4e	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3b50	90 10		bcc $3b62			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3b52	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3b54	68		pla				pla
.3b55	95 aa		sta $aa,x			sta 	esInt2+2,x
.3b57	68		pla				pla
.3b58	95 a2		sta $a2,x			sta 	esInt1+2,x
.3b5a	68		pla				pla
.3b5b	95 9a		sta $9a,x			sta 	esInt0+2,x
.3b5d	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3b5f	4c 65 3b	jmp $3b65			jmp 	_MInt32Next 					; do the next iteration
.3b62					_MInt32NoSubtract:
.3b62	68		pla				pla
.3b63	68		pla				pla
.3b64	68		pla				pla
.3b65					_MInt32Next:
.3b65	88		dey				dey 								; do this 32 times.
.3b66	d0 c4		bne $3b2c			bne 	_MInt32UDLoop
.3b68	68		pla				pla 								; restore Y and exit
.3b69	a8		tay				tay
.3b6a	60		rts				rts
.3b6b					_MInt32DZero:
.3b6b	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3b6d	20 18 15	jsr $1518		jsr	errorHandler
.3b70					MInt32Modulus:
.3b70	20 17 3b	jsr $3b17			jsr 	MInt32UDivide 				; do the division.
.3b73	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3b75	95 b0		sta $b0,x			sta 	esInt3,x
.3b77	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3b79	95 a8		sta $a8,x			sta 	esInt2,x
.3b7b	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3b7d	95 a0		sta $a0,x			sta 	esInt1,x
.3b7f	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3b81	95 98		sta $98,x			sta 	esInt0,x
.3b83	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d4c					fs32Length:
>0d4c							.fill 	1
.3b84					LinkInt32FromString:
.3b84	aa		tax				tax
.3b85	98		tya				tya
.3b86	20 8b 3b	jsr $3b8b			jsr 	MInt32FromString
.3b89	8a		txa				txa
.3b8a	60		rts				rts
.3b8b					MInt32FromString:
.3b8b	85 32		sta $32				sta 	tempShort 					; save base
.3b8d	98		tya				tya
.3b8e	48		pha				pha
.3b8f	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3b91	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b93	8d 4c 0d	sta $0d4c			sta 	fs32Length
.3b96	f0 65		beq $3bfd			beq 	_I32FSFail2					; fail if length zero.
.3b98	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3b9a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3b9c	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3b9e	d0 09		bne $3ba9			bne 	_I32FSNotNegative
.3ba0	ad 4c 0d	lda $0d4c			lda 	fs32Length 					; get length back.
.3ba3	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3ba5	f0 56		beq $3bfd			beq 	_I32FSFail2
.3ba7	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3ba9					_I32FSNotNegative:
.3ba9	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3bab	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3bad	d0 02		bne $3bb1			bne 	_I32FSNN2
.3baf	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3bb1					_I32FSNN2:
.3bb1	48		pha				pha 								; save base + final sign on stack.
.3bb2	20 1d 3d	jsr $3d1d			jsr 	MInt32False 				; zero the return value.
.3bb5					_I32FSMainLoop:
.3bb5	68		pla				pla 								; get the base back into tempShort
.3bb6	48		pha				pha
.3bb7	29 7f		and #$7f			and 	#$7F
.3bb9	85 32		sta $32				sta 	tempShort
.3bbb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3bbd	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3bbf	90 02		bcc $3bc3			bcc 	_I32FSNotLC
.3bc1	e9 20		sbc #$20			sbc 	#32
.3bc3					_I32FSNotLC:
.3bc3	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3bc4	e9 30		sbc #$30			sbc 	#"0"
.3bc6	90 34		bcc $3bfc			bcc 	_I32FSFail 					; nothing more to do.
.3bc8	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3bca	90 06		bcc $3bd2			bcc 	_I32FSValidate
.3bcc	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3bce	90 2c		bcc $3bfc			bcc 	_I32FSFail
.3bd0	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3bd2					_I32FSValidate:
.3bd2	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3bd4	b0 26		bcs $3bfc			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3bd6	48		pha				pha 								; save the new digit value.
.3bd7	e8		inx				inx 								; put base into next slot up on stack
.3bd8	a5 32		lda $32				lda 	tempShort
.3bda	20 2c 3d	jsr $3d2c			jsr 	MInt32Set8Bit
.3bdd	ca		dex				dex
.3bde	20 35 3c	jsr $3c35			jsr 	MInt32Multiply 				; multiply current by the base
.3be1	e8		inx				inx
.3be2	68		pla				pla  								; put additive into next slot
.3be3	20 2c 3d	jsr $3d2c			jsr 	MInt32Set8Bit
.3be6	ca		dex				dex
.3be7	20 01 3c	jsr $3c01			jsr 	MInt32Add 					; and add it
.3bea	c8		iny				iny 								; bump the character pointer
.3beb	cc 4c 0d	cpy $0d4c			cpy 	fs32Length 					; until > length.
.3bee	f0 c5		beq $3bb5			beq 	_I32FSMainLoop
.3bf0	90 c3		bcc $3bb5			bcc 	_I32FSMainLoop
.3bf2					_I32FSDone:
.3bf2	68		pla				pla 								; get base/final sign back
.3bf3	10 03		bpl $3bf8			bpl 	_I32FSNN3
.3bf5	20 d7 3c	jsr $3cd7			jsr 	MInt32Negate 				; negate the result.
.3bf8					_I32FSNN3:
.3bf8	68		pla				pla
.3bf9	a8		tay				tay
.3bfa	38		sec				sec
.3bfb	60		rts				rts
.3bfc					_I32FSFail:
.3bfc	68		pla				pla
.3bfd					_I32FSFail2:
.3bfd	68		pla				pla
.3bfe	a8		tay				tay
.3bff	18		clc				clc
.3c00	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3c01					MInt32Add:
.3c01	18		clc				clc
.3c02	b5 98		lda $98,x			lda 	esInt0,x
.3c04	75 99		adc $99,x			adc 	esInt0+1,x
.3c06	95 98		sta $98,x			sta 	esInt0,x
.3c08	b5 a0		lda $a0,x			lda 	esInt1,x
.3c0a	75 a1		adc $a1,x			adc 	esInt1+1,x
.3c0c	95 a0		sta $a0,x			sta 	esInt1,x
.3c0e	b5 a8		lda $a8,x			lda 	esInt2,x
.3c10	75 a9		adc $a9,x			adc 	esInt2+1,x
.3c12	95 a8		sta $a8,x			sta 	esInt2,x
.3c14	b5 b0		lda $b0,x			lda 	esInt3,x
.3c16	75 b1		adc $b1,x			adc 	esInt3+1,x
.3c18	95 b0		sta $b0,x			sta 	esInt3,x
.3c1a	60		rts				rts
.3c1b					MInt32Sub:
.3c1b	38		sec				sec
.3c1c	b5 98		lda $98,x			lda 	esInt0,x
.3c1e	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3c20	95 98		sta $98,x			sta 	esInt0,x
.3c22	b5 a0		lda $a0,x			lda 	esInt1,x
.3c24	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3c26	95 a0		sta $a0,x			sta 	esInt1,x
.3c28	b5 a8		lda $a8,x			lda 	esInt2,x
.3c2a	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3c2c	95 a8		sta $a8,x			sta 	esInt2,x
.3c2e	b5 b0		lda $b0,x			lda 	esInt3,x
.3c30	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3c32	95 b0		sta $b0,x			sta 	esInt3,x
.3c34	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3c35					MInt32Multiply:
.3c35	e8		inx				inx 								; copy 2nd -> 3rd
.3c36	20 5b 3c	jsr $3c5b			jsr 	MInt32CopyUp
.3c39	ca		dex				dex
.3c3a	20 5b 3c	jsr $3c5b			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3c3d	20 1d 3d	jsr $3d1d			jsr 	MInt32False 				; zero 1st.
.3c40					_I32Loop:
.3c40	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3c42	29 01		and #$01			and 	#1
.3c44	f0 03		beq $3c49			beq 	_I32NoAdd 					; if set
.3c46	20 01 3c	jsr $3c01			jsr 	MInt32Add 					; add 2nd to 1st.
.3c49					_I32NoAdd:
.3c49	e8		inx				inx 								; shift 2nd left
.3c4a	20 32 3d	jsr $3d32			jsr 	MInt32ShiftLeft
.3c4d	e8		inx				inx  								; shift 3rd right
.3c4e	20 3b 3d	jsr $3d3b			jsr 	MInt32ShiftRight
.3c51	20 44 3d	jsr $3d44			jsr 	MInt32Zero 					; check if zero.
.3c54	08		php				php 								; save status bits
.3c55	ca		dex				dex 	 							; point back to 1st
.3c56	ca		dex				dex
.3c57	28		plp				plp 								; get status bits
.3c58	d0 e6		bne $3c40			bne 	_I32Loop 					; if non-zero keep going.
.3c5a	60		rts				rts
.3c5b					MInt32CopyUp:
.3c5b	b5 98		lda $98,x			lda 	esInt0,x
.3c5d	95 99		sta $99,x			sta 	esInt0+1,x
.3c5f	b5 a0		lda $a0,x			lda 	esInt1,x
.3c61	95 a1		sta $a1,x			sta 	esInt1+1,x
.3c63	b5 a8		lda $a8,x			lda 	esInt2,x
.3c65	95 a9		sta $a9,x			sta 	esInt2+1,x
.3c67	b5 b0		lda $b0,x			lda 	esInt3,x
.3c69	95 b1		sta $b1,x			sta 	esInt3+1,x
.3c6b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d4d					MCharCount:	.fill 	1						; count of converted characters
.3c6c					MLInt32ToString:
.3c6c	aa		tax				tax									; module passes stack in A, base in Y
.3c6d	98		tya				tya
.3c6e	20 73 3c	jsr $3c73			jsr 	MInt32ToString
.3c71	8a		txa				txa
.3c72	60		rts				rts
.3c73					MInt32ToString:
.3c73	48		pha				pha 								; save base
.3c74	85 32		sta $32				sta 	tempShort 					; save target base.
.3c76	a9 00		lda #$00			lda 	#0
.3c78	8d 4d 0d	sta $0d4d			sta 	MCharCount 					; clear character count to 0
.3c7b	98		tya				tya
.3c7c	48		pha				pha
.3c7d	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3c7f	10 10		bpl $3c91			bpl 	_I32TSUnsigned
.3c81	48		pha				pha 								; save base on stack.
.3c82	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3c84	10 08		bpl $3c8e			bpl 	_I32TSNoFlip
.3c86	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3c88	20 c4 3c	jsr $3cc4			jsr 	MI32WriteCharacter
.3c8b	20 d7 3c	jsr $3cd7			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3c8e					_I32TSNoFlip:
.3c8e	68		pla				pla 								; get the base back
.3c8f	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3c91					_I32TSUnsigned:
.3c91	20 9f 3c	jsr $3c9f			jsr 	MI32DivideWrite 			; recursive code to output string.
.3c94	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3c96	ad 4d 0d	lda $0d4d			lda 	MCharCount
.3c99	91 2a		sta ($2a),y			sta 	(temp0),y
.3c9b	68		pla				pla
.3c9c	a8		tay				tay
.3c9d	68		pla				pla
.3c9e	60		rts				rts
.3c9f					MI32DivideWrite:
.3c9f	48		pha				pha 								; save the divisor/base
.3ca0	e8		inx				inx 								; write in the dividing position.
.3ca1	20 2c 3d	jsr $3d2c			jsr 	MInt32Set8Bit
.3ca4	ca		dex				dex
.3ca5	20 17 3b	jsr $3b17			jsr 	MInt32UDivide 				; divide number by base.
.3ca8	68		pla				pla 								; get the base into Y
.3ca9	a8		tay				tay
.3caa	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3cac	48		pha				pha
.3cad	20 44 3d	jsr $3d44			jsr 	MInt32Zero 					; is the result zero ?
.3cb0	f0 04		beq $3cb6			beq 	_I32NoRecurse 				; if so, don't recurse.
.3cb2	98		tya				tya 								; put base into A
.3cb3	20 9f 3c	jsr $3c9f			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3cb6					_I32NoRecurse:
.3cb6	68		pla				pla 								; get the remainder back
.3cb7	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3cb9	90 02		bcc $3cbd			bcc 	_I32NotHex
.3cbb	69 06		adc #$06			adc 	#7-1
.3cbd					_I32NotHex:
.3cbd	18		clc				clc 								; make it ASCII
.3cbe	69 30		adc #$30			adc 	#48
.3cc0	20 c4 3c	jsr $3cc4			jsr 	MI32WriteCharacter 			; write the character out
.3cc3	60		rts				rts 								; and exit.
.3cc4					MI32WriteCharacter:
.3cc4	ee 4d 0d	inc $0d4d			inc 	MCharCount 					; bump count (space for leading count)
.3cc7	ac 4d 0d	ldy $0d4d			ldy 	MCharCount 					; get position
.3cca	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3ccc	c8		iny				iny
.3ccd	a9 00		lda #$00			lda 	#0
.3ccf	91 2a		sta ($2a),y			sta 	(temp0),y
.3cd1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d4e					MSeed32:	.fill 	4							; random number seed.
.3cd2					MInt32Absolute:
.3cd2	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3cd4	30 01		bmi $3cd7			bmi 	MInt32Negate
.3cd6	60		rts				rts
.3cd7					MInt32Negate:
.3cd7	38		sec				sec 								; subtract from zero.
.3cd8	a9 00		lda #$00			lda 	#0
.3cda	f5 98		sbc $98,x			sbc 	esInt0,x
.3cdc	95 98		sta $98,x			sta 	esInt0,x
.3cde	a9 00		lda #$00			lda 	#0
.3ce0	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3ce2	95 a0		sta $a0,x			sta 	esInt1,x
.3ce4	a9 00		lda #$00			lda 	#0
.3ce6	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3ce8	95 a8		sta $a8,x			sta 	esInt2,x
.3cea	a9 00		lda #$00			lda 	#0
.3cec	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3cee	95 b0		sta $b0,x			sta 	esInt3,x
.3cf0	60		rts				rts
.3cf1					MInt32Not:
.3cf1	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3cf3	49 ff		eor #$ff			eor 	#$FF
.3cf5	95 98		sta $98,x			sta 	esInt0,x
.3cf7	b5 a0		lda $a0,x			lda 	esInt1,x
.3cf9	49 ff		eor #$ff			eor 	#$FF
.3cfb	95 a0		sta $a0,x			sta 	esInt1,x
.3cfd	b5 a8		lda $a8,x			lda 	esInt2,x
.3cff	49 ff		eor #$ff			eor 	#$FF
.3d01	95 a8		sta $a8,x			sta 	esInt2,x
.3d03	b5 b0		lda $b0,x			lda 	esInt3,x
.3d05	49 ff		eor #$ff			eor 	#$FF
.3d07	95 b0		sta $b0,x			sta 	esInt3,x
.3d09	60		rts				rts
.3d0a					MInt32Sign:
.3d0a	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3d0c	30 0b		bmi $3d19			bmi 	MInt32True 					; if set return -1 (true)
.3d0e	20 44 3d	jsr $3d44			jsr 	MInt32Zero 					; is it zero ?
.3d11	f0 0a		beq $3d1d			beq 	MInt32False 				; if zero return 0 (false)
.3d13	20 1d 3d	jsr $3d1d			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3d16	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3d18	60		rts				rts
.3d19					MInt32True:
.3d19	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3d1b	d0 02		bne $3d1f			bne 	MInt32WriteAll
.3d1d					MInt32False:
.3d1d	a9 00		lda #$00			lda 	#0
.3d1f					MInt32WriteAll:
.3d1f	95 98		sta $98,x			sta 	esInt0,x
.3d21					MInt32Write123:
.3d21	95 a0		sta $a0,x			sta 	esInt1,x
.3d23	95 a8		sta $a8,x			sta 	esInt2,x
.3d25	95 b0		sta $b0,x			sta 	esInt3,x
.3d27	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3d29	95 90		sta $90,x			sta 	esType,x
.3d2b	60		rts				rts
.3d2c					MInt32Set8Bit:
.3d2c	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3d2e	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3d30	f0 ef		beq $3d21			beq		MInt32Write123
.3d32					MInt32ShiftLeft:
.3d32	16 98		asl $98,x			asl 	esInt0,x
.3d34	36 a0		rol $a0,x			rol	 	esInt1,x
.3d36	36 a8		rol $a8,x			rol	 	esInt2,x
.3d38	36 b0		rol $b0,x			rol	 	esInt3,x
.3d3a	60		rts				rts
.3d3b					MInt32ShiftRight:
.3d3b	56 b0		lsr $b0,x			lsr 	esInt3,x
.3d3d	76 a8		ror $a8,x			ror 	esInt2,x
.3d3f	76 a0		ror $a0,x			ror 	esInt1,x
.3d41	76 98		ror $98,x			ror 	esInt0,x
.3d43	60		rts				rts
.3d44					MInt32Zero:
.3d44	b5 98		lda $98,x			lda 	esInt0,x
.3d46	15 a0		ora $a0,x			ora 	esInt1,x
.3d48	15 a8		ora $a8,x			ora 	esInt2,x
.3d4a	15 b0		ora $b0,x			ora 	esInt3,x
.3d4c	60		rts				rts
.3d4d					MInt32Random:
.3d4d	98		tya				tya
.3d4e	48		pha				pha
.3d4f	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3d51	ad 4e 0d	lda $0d4e			lda 	MSeed32+0 					; check the seed isn't zero
.3d54	d0 03		bne $3d59			bne 	_Random1
.3d56	a8		tay				tay 								; if so do it 256 times
.3d57	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3d59					_Random1:
.3d59	0a		asl a				asl 	a
.3d5a	2e 4f 0d	rol $0d4f			rol 	MSeed32+1
.3d5d	2e 50 0d	rol $0d50			rol 	MSeed32+2
.3d60	2e 51 0d	rol $0d51			rol 	MSeed32+3
.3d63	90 02		bcc $3d67			bcc 	_Random2
.3d65	49 c5		eor #$c5			eor 	#$C5
.3d67					_Random2:
.3d67	88		dey				dey
.3d68	d0 ef		bne $3d59			bne 	_Random1
.3d6a	8d 4e 0d	sta $0d4e			sta 	MSeed32+0 					; copy the seed in.
.3d6d	95 98		sta $98,x			sta 	esInt0,x
.3d6f	ad 4f 0d	lda $0d4f			lda 	MSeed32+1
.3d72	95 a0		sta $a0,x			sta 	esInt1,x
.3d74	ad 50 0d	lda $0d50			lda 	MSeed32+2
.3d77	95 a8		sta $a8,x			sta 	esInt2,x
.3d79	ad 51 0d	lda $0d51			lda 	MSeed32+3
.3d7c	95 b0		sta $b0,x			sta 	esInt3,x
.3d7e	68		pla				pla
.3d7f	a8		tay				tay
.3d80	a9 00		lda #$00			lda 	#0
.3d82	95 90		sta $90,x			sta 	esType,x
.3d84	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3d85					CheckToken:
.3d85	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3d87	d0 02		bne $3d8b			bne 	_CTError
.3d89	c8		iny				iny
.3d8a	60		rts				rts
.3d8b					_CTError:
.3d8b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3d8d	20 18 15	jsr $1518		jsr	errorHandler
.3d90					CheckRightParen:
.3d90	b1 28		lda ($28),y			lda 	(codePtr),y
.3d92	c8		iny				iny
.3d93	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3d95	d0 01		bne $3d98			bne 	_CRPError
.3d97	60		rts				rts
.3d98					_CRPError:
.3d98	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3d9a	20 18 15	jsr $1518		jsr	errorHandler
.3d9d					CheckComma:
.3d9d	b1 28		lda ($28),y			lda 	(codePtr),y
.3d9f	c8		iny				iny
.3da0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3da2	d0 01		bne $3da5			bne 	_CCError
.3da4	60		rts				rts
.3da5					_CCError:
.3da5	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3da7	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3daa					RSReset:
.3daa	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3dac	85 37		sta $37				sta 	rsPointer
.3dae	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3db0	85 38		sta $38				sta 	1+(rsPointer)
.3db2	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3db4	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3db7	60		rts				rts
.3db8					RSClaim:
.3db8	84 32		sty $32				sty 	tempShort 					; preserve Y
.3dba	48		pha				pha 								; save marker on stack.
.3dbb	8a		txa				txa 								; get bytes required.
.3dbc	38		sec				sec
.3dbd	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3dbf	65 37		adc $37				adc 	rsPointer
.3dc1	85 37		sta $37				sta 	rsPointer
.3dc3	a5 38		lda $38				lda 	rsPointer+1
.3dc5	69 ff		adc #$ff			adc 	#$FF
.3dc7	85 38		sta $38				sta 	rsPointer+1
.3dc9	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3dcb	90 08		bcc $3dd5			bcc 	_RSCOverflow
.3dcd	68		pla				pla 								; get marker back
.3dce	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3dd0	91 37		sta ($37),y			sta 	(rsPointer),y
.3dd2	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3dd4	60		rts				rts
.3dd5					_RSCOverflow:
.3dd5	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3dd7	20 18 15	jsr $1518		jsr	errorHandler
.3dda					RSFree:
.3dda	18		clc				clc
.3ddb	65 37		adc $37				adc 	rsPointer
.3ddd	85 37		sta $37				sta 	rsPointer
.3ddf	90 02		bcc $3de3			bcc 	_RSFExit
.3de1	e6 38		inc $38				inc 	rsPointer+1
.3de3					_RSFExit:
.3de3	60		rts				rts
.3de4					RSSavePosition:
.3de4	84 32		sty $32				sty 	tempShort 					; save Y position
.3de6	a8		tay				tay 								; this is where we write it.
.3de7	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3de9	91 37		sta ($37),y			sta 	(rsPointer),y
.3deb	c8		iny				iny
.3dec	a5 29		lda $29				lda 	codePtr+1
.3dee	91 37		sta ($37),y			sta 	(rsPointer),y
.3df0	c8		iny				iny
.3df1	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3df3	91 37		sta ($37),y			sta 	(rsPointer),y
.3df5	a8		tay				tay 								; fix Y back again to original value
.3df6	60		rts				rts
.3df7					RSLoadPosition:
.3df7	a8		tay				tay
.3df8	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3dfa	85 28		sta $28				sta 	codePtr
.3dfc	c8		iny				iny
.3dfd	b1 37		lda ($37),y			lda 	(rsPointer),y
.3dff	85 29		sta $29				sta 	codePtr+1
.3e01	c8		iny				iny
.3e02	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3e04	a8		tay				tay 								; to Y
.3e05	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3e06					WarmStart:
.3e06	a2 04		ldx #$04		ldx	#4
.3e08	20 6d 27	jsr $276d		jsr	interactionHandler

;******  Return to file: main/main.asm

.3e0b					mainHandler:
.3e0b	7c 0e 3e	jmp ($3e0e,x)			jmp 	(mainVectors,x)
.3e0e					mainVectors:
>3e0e	2a 3e					.word _DummyControlHandler ; index 0
>3e10	9d 3d					.word CheckComma           ; index 2
>3e12	90 3d					.word CheckRightParen      ; index 4
>3e14	75 2f					.word XCommandClear        ; index 6
>3e16	a0 36					.word LinkEvaluate         ; index 8
>3e18	ac 36					.word LinkEvaluateInteger  ; index 10
>3e1a	b8 36					.word LinkEvaluateSmallInt ; index 12
>3e1c	b2 36					.word LinkEvaluateString   ; index 14
>3e1e	a6 36					.word LinkEvaluateTerm     ; index 16
>3e20	6c 3c					.word MLInt32ToString      ; index 18
>3e22	04 31					.word Command_XNew         ; index 20
>3e24	12 31					.word XCommand_Run         ; index 22
>3e26	1e 31					.word Command_RunFrom      ; index 24
>3e28	84 3b					.word LinkInt32FromString  ; index 26
.3e2a					_DummyControlHandler:
.3e2a	60		rts			rts

;******  Return to file: basic.asm

.3e2b					section_end_main:
.3e2b					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3e2b					StringChrs:
.3e2b	aa		tax				tax 								; set up stack
.3e2c	a9 02		lda #$02			lda 	#2
.3e2e	20 ee 3e	jsr $3eee			jsr 	AllocateSoftString
.3e31	98		tya				tya
.3e32	20 14 3f	jsr $3f14			jsr 	WriteSoftString
.3e35					StringUpdate:
.3e35	20 43 3e	jsr $3e43			jsr 	ReturnSoftString
.3e38	8a		txa				txa
.3e39	60		rts				rts
.3e3a					StringNull:
.3e3a	aa		tax				tax
.3e3b	a9 01		lda #$01			lda 	#1
.3e3d	20 ee 3e	jsr $3eee			jsr 	AllocateSoftString
.3e40	4c 35 3e	jmp $3e35			jmp 	StringUpdate
.3e43					ReturnSoftString:
.3e43	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3e45	95 98		sta $98,x			sta 	esInt0,x
.3e47	a5 3a		lda $3a				lda 	softMemAlloc+1
.3e49	95 a0		sta $a0,x			sta 	esInt1,x
.3e4b	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3e4d	95 a8		sta $a8,x			sta 	esInt2,x
.3e4f	95 b0		sta $b0,x			sta 	esInt3,x
.3e51	a9 40		lda #$40			lda 	#$40 						; type string.
.3e53	95 90		sta $90,x			sta 	esType,x
.3e55	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3e56					STRCompare:
.3e56	48		pha				pha 								; save A
.3e57	aa		tax				tax 								; put stack pos in X
.3e58	98		tya				tya
.3e59	48		pha				pha
.3e5a	20 8e 3e	jsr $3e8e			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3e5d	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3e5f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e61	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3e63	90 02		bcc $3e67			bcc 	_SCNotSmaller
.3e65	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e67					_SCNotSmaller:
.3e67	aa		tax				tax 								; put that in X. We compare this many chars first.
.3e68					_SCCompareLoop:
.3e68	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3e6a	f0 0c		beq $3e78			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3e6c	ca		dex				dex 								; decrement chars to compare.
.3e6d	c8		iny				iny 								; move to next character
.3e6e	38		sec				sec 								; calculate s1[y]-s2[y]
.3e6f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e71	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3e73	d0 0a		bne $3e7f			bne 	_SCReturnResult 			; if different return sign of A
.3e75	4c 68 3e	jmp $3e68			jmp 	_SCCompareLoop
.3e78					_SCSameToEndShortest
.3e78	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3e7a	38		sec				sec
.3e7b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e7d	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3e7f					_SCReturnResult:
.3e7f	08		php				php 								; set return to zero preserving PSW.
.3e80	a2 00		ldx #$00			ldx 	#0
.3e82	28		plp				plp
.3e83	f0 05		beq $3e8a			beq 	_SCExit 					; two values equal, then exit
.3e85	ca		dex				dex 								; X = $FF
.3e86	90 02		bcc $3e8a			bcc 	_SCExit 					; if 1st < 2nd then -1
.3e88	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3e8a					_SCExit:
.3e8a	68		pla				pla
.3e8b	a8		tay				tay
.3e8c	68		pla				pla
.3e8d	60		rts				rts
.3e8e					CopyStringPair:
.3e8e	b5 99		lda $99,x			lda 	esInt0+1,x
.3e90	85 2c		sta $2c				sta 	temp1
.3e92	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3e94	85 2d		sta $2d				sta 	temp1+1
.3e96					CopyStringTop:
.3e96	b5 98		lda $98,x			lda 	esInt0,x
.3e98	85 2a		sta $2a				sta 	temp0
.3e9a	b5 a0		lda $a0,x			lda 	esInt1,x
.3e9c	85 2b		sta $2b				sta 	temp0+1
.3e9e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3e9f					StringConcat:
.3e9f	aa		tax				tax									; stack pos in X
.3ea0	98		tya				tya
.3ea1	48		pha				pha
.3ea2	20 8e 3e	jsr $3e8e			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3ea5	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3ea6	a0 00		ldy #$00			ldy 	#0
.3ea8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3eaa	71 2c		adc ($2c),y			adc 	(temp1),y
.3eac	b0 1c		bcs $3eca			bcs 	_SCError 					; just too many characters here.
.3eae	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3eb0	b0 18		bcs $3eca			bcs 	_SCError
.3eb2	20 ee 3e	jsr $3eee			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3eb5	20 e5 3e	jsr $3ee5			jsr 	CopySoftToStack 			; copy that to the stack.
.3eb8	20 cf 3e	jsr $3ecf			jsr 	SCCopyTemp0 				; copy temp0
.3ebb	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3ebd	85 2a		sta $2a				sta 	temp0
.3ebf	a5 2d		lda $2d				lda 	temp1+1
.3ec1	85 2b		sta $2b				sta 	temp0+1
.3ec3	20 cf 3e	jsr $3ecf			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3ec6	68		pla				pla
.3ec7	a8		tay				tay
.3ec8	8a		txa				txa 								; and A
.3ec9	60		rts				rts
.3eca					_SCError:
.3eca	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3ecc	20 18 15	jsr $1518		jsr	errorHandler
.3ecf					SCCopyTemp0:
.3ecf	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3ed1	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ed3	85 2e		sta $2e				sta 	temp2
.3ed5					_SCCopyLoop:
.3ed5	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3ed7	f0 0b		beq $3ee4			beq 	_SCCopyExit
.3ed9	c6 2e		dec $2e				dec 	temp2
.3edb	c8		iny				iny 								; get next char
.3edc	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ede	20 14 3f	jsr $3f14			jsr 	WriteSoftString 			; write to soft string.
.3ee1	4c d5 3e	jmp $3ed5			jmp 	_SCCopyLoop
.3ee4					_SCCopyExit:
.3ee4	60		rts				rts
.3ee5					CopySoftToStack:
.3ee5	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3ee7	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3ee9	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3eeb	95 a0		sta $a0,x			sta 	esInt1,x
.3eed	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3eee					AllocateSoftString:
.3eee	85 32		sta $32				sta 	tempShort 					; save count
.3ef0	98		tya				tya
.3ef1	48		pha				pha
.3ef2	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3ef4	d0 09		bne $3eff			bne 	_ASSDone
.3ef6	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3ef8	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3efa	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3efc	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3efd	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3eff					_ASSDone:
.3eff	38		sec				sec 								; allocate downwards enough memory
.3f00	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3f02	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3f04	85 39		sta $39				sta 	softMemAlloc
.3f06	a5 3a		lda $3a				lda 	softMemAlloc+1
.3f08	e9 00		sbc #$00			sbc 	#0
.3f0a	85 3a		sta $3a				sta 	softMemAlloc+1
.3f0c	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3f0e	a8		tay				tay
.3f0f	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f11	68		pla				pla
.3f12	a8		tay				tay
.3f13	60		rts				rts
.3f14					WriteSoftString:
.3f14	84 32		sty $32				sty 	tempShort 					; save Y
.3f16	48		pha				pha 								; save character on stack
.3f17	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3f19	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3f1b	18		clc				clc
.3f1c	69 01		adc #$01			adc 	#1
.3f1e	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f20	a8		tay				tay 								; offset in Y
.3f21	68		pla				pla 								; get char and write.
.3f22	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3f24	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3f26	60		rts				rts
.3f27					StrClone:
.3f27	aa		tax				tax 								; set up stack.
.3f28	98		tya				tya
.3f29	48		pha				pha
.3f2a	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3f2c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3f2e	18		clc				clc
.3f2f	69 01		adc #$01			adc 	#1
.3f31	20 ee 3e	jsr $3eee			jsr 	AllocateSoftString 			; allocate soft memory
.3f34	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3f36	95 98		sta $98,x			sta 	esInt0,x
.3f38	a5 3a		lda $3a				lda 	softMemAlloc+1
.3f3a	95 a0		sta $a0,x			sta 	esInt1,x
.3f3c	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3f3e	95 a8		sta $a8,x			sta 	esInt2,x
.3f40	95 b0		sta $b0,x			sta 	esInt3,x
.3f42	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3f44	95 90		sta $90,x			sta 	esType,x
.3f46	20 cf 3e	jsr $3ecf			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3f49	68		pla				pla
.3f4a	a8		tay				tay
.3f4b	8a		txa				txa
.3f4c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3f4d					CaseString:
.3f4d	48		pha				pha 								; save A and copy to X
.3f4e	aa		tax				tax
.3f4f	98		tya				tya
.3f50	48		pha				pha
.3f51	20 96 3e	jsr $3e96			jsr 	CopyStringTop 				; target string -> temp0
.3f54	a0 00		ldy #$00			ldy 	#0
.3f56	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3f58	18		clc				clc
.3f59	69 01		adc #$01			adc 	#1 							; one more for length byte
.3f5b	20 ee 3e	jsr $3eee			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3f5e	20 e5 3e	jsr $3ee5			jsr 	CopySoftToStack 			; copy that to the stack.
.3f61	a0 00		ldy #$00			ldy 	#0
.3f63	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3f65	aa		tax				tax
.3f66					_CSCopy:
.3f66	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3f68	f0 24		beq $3f8e			beq 	_CSExit
.3f6a	ca		dex				dex
.3f6b	c8		iny				iny
.3f6c	68		pla				pla 								; check direction
.3f6d	48		pha				pha
.3f6e	f0 0c		beq $3f7c			beq 	_CSUpper
.3f70	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3f72	c9 41		cmp #$41			cmp 	#"A"
.3f74	90 12		bcc $3f88			bcc 	_CSWrite
.3f76	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3f78	b0 0e		bcs $3f88			bcs 	_CSWrite
.3f7a	90 0a		bcc $3f86			bcc 	_CSFlipWrite
.3f7c					_CSUpper:
.3f7c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3f7e	c9 61		cmp #$61			cmp 	#"a"
.3f80	90 06		bcc $3f88			bcc 	_CSWrite
.3f82	c9 7b		cmp #$7b			cmp 	#"z"+1
.3f84	b0 02		bcs $3f88			bcs 	_CSWrite
.3f86					_CSFlipWrite:
.3f86	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3f88					_CSWrite:
.3f88	20 14 3f	jsr $3f14			jsr 	WriteSoftString 			; add to soft string.
.3f8b	4c 66 3f	jmp $3f66			jmp 	_CSCopy
.3f8e					_CSExit:
.3f8e	68		pla				pla
.3f8f	a8		tay				tay
.3f90	68		pla				pla
.3f91	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3f92					StringSubstring:
.3f92	48		pha				pha
.3f93	aa		tax				tax 								; access stack.
.3f94	98		tya				tya
.3f95	48		pha				pha
.3f96	20 96 3e	jsr $3e96			jsr 	CopyStringTop 				; point temp0 to the string.
.3f99	a0 00		ldy #$00			ldy 	#0 							; get length.
.3f9b	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3f9d	85 2c		sta $2c				sta 	temp1
.3f9f	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3fa1	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3fa3	f0 02		beq $3fa7			beq 	_SSBOkay
.3fa5	b0 2a		bcs $3fd1			bcs 	_SSBReturnNull
.3fa7					_SSBOkay:
.3fa7	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3fa9	18		clc				clc
.3faa	69 01		adc #$01			adc 	#1
.3fac	38		sec				sec
.3fad	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3faf	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3fb1	90 02		bcc $3fb5			bcc		_SSBTrunc
.3fb3	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3fb5					_SSBTrunc:
.3fb5	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3fb7	18		clc				clc
.3fb8	69 01		adc #$01			adc 	#1 							; add 1
.3fba	20 ee 3e	jsr $3eee			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3fbd	20 e5 3e	jsr $3ee5			jsr 	CopySoftToStack 			; copy that to the stack.
.3fc0	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3fc2					_SSBCopyLoop:
.3fc2	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3fc4	f0 0e		beq $3fd4			beq 	_SSBExit
.3fc6	c6 2d		dec $2d				dec 	temp1+1
.3fc8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3fca	20 14 3f	jsr $3f14			jsr 	WriteSoftString
.3fcd	c8		iny				iny
.3fce	4c c2 3f	jmp $3fc2			jmp 	_SSBCopyLoop
.3fd1					_SSBReturnNull:
.3fd1	20 d8 3f	jsr $3fd8			jsr 	ReturnNull
.3fd4					_SSBExit:
.3fd4	68		pla				pla
.3fd5	a8		tay				tay
.3fd6	68		pla				pla
.3fd7	60		rts				rts
.3fd8					ReturnNull:
.3fd8	a9 00		lda #$00			lda 	#0 							; clear null string
.3fda	8d ce 0a	sta $0ace			sta 	NullString
.3fdd	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3fdf	95 98		sta $98,x			sta 	esInt0,x
.3fe1	a9 0a		lda #$0a			lda 	#NullString >> 8
.3fe3	95 a0		sta $a0,x			sta 	esInt1,x
.3fe5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d52					srcStrLen:
>0d52							.fill 	1
.3fe6					StringWrite:
.3fe6	aa		tax				tax
.3fe7	48		pha				pha
.3fe8	98		tya				tya
.3fe9	48		pha				pha
.3fea	20 11 40	jsr $4011			jsr 	CheckOverwriteCurrent
.3fed	b0 0d		bcs $3ffc			bcs		_SWCopyCurrent
.3fef	20 4f 40	jsr $404f			jsr 	RequiresConcretion
.3ff2	90 0e		bcc $4002			bcc 	_SWWriteReference
.3ff4	20 b2 40	jsr $40b2			jsr 	CheckSpecialConcretion
.3ff7	b0 09		bcs $4002			bcs 	_SWWriteReference
.3ff9	20 63 40	jsr $4063			jsr 	AllocateHardMemory
.3ffc					_SWCopyCurrent:
.3ffc	20 96 40	jsr $4096			jsr 	CopyStringToHardMemory
.3fff	4c 0d 40	jmp $400d			jmp 	_SWExit
.4002					_SWWriteReference
.4002	a0 00		ldy #$00			ldy 	#0
.4004	a5 2a		lda $2a				lda 	temp0
.4006	91 2c		sta ($2c),y			sta 	(temp1),y
.4008	c8		iny				iny
.4009	a5 2b		lda $2b				lda 	temp0+1
.400b	91 2c		sta ($2c),y			sta 	(temp1),y
.400d					_SWExit:
.400d	68		pla				pla
.400e	a8		tay				tay
.400f	68		pla				pla
.4010	60		rts				rts
.4011					CheckOverwriteCurrent:
.4011	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.4013	b5 a1		lda $a1,x			lda 	esInt1+1,x
.4015	85 2b		sta $2b				sta 	temp0+1
.4017	b5 99		lda $99,x			lda 	esInt0+1,x
.4019	85 2a		sta $2a				sta 	temp0
.401b	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.401d	8d 52 0d	sta $0d52			sta 	srcStrLen
.4020	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.4022	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.4024	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4026	85 2d		sta $2d				sta 	temp1+1
.4028	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.402a	b1 2c		lda ($2c),y			lda 	(temp1),y
.402c	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.402e	90 1b		bcc $404b			bcc 	_COCFail 				; in hard memory.
.4030	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.4032	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.4034	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4036	85 2e		sta $2e				sta 	temp2
.4038	c8		iny				iny
.4039	b1 2c		lda ($2c),y			lda 	(temp1),y
.403b	e9 00		sbc #$00			sbc 	#0
.403d	85 2f		sta $2f				sta 	temp2+1
.403f	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.4041	b1 2e		lda ($2e),y			lda 	(temp2),y
.4043	38		sec				sec  							; maximum character capacity.
.4044	e9 02		sbc #$02			sbc 	#2
.4046	cd 52 0d	cmp $0d52			cmp 	srcStrLen 				; if >= the required length
.4049	b0 02		bcs $404d			bcs 	_COCCanReuse
.404b					_COCFail:
.404b	18		clc				clc
.404c	60		rts				rts
.404d					_COCCanReuse:
.404d	38		sec				sec
.404e	60		rts				rts
.404f					RequiresConcretion:
.404f	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.4051	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.4053	b0 0a		bcs $405f			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.4055	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.4057	f0 08		beq $4061			beq 	_RCFail 				; if not, this cannot be soft memory.
.4059	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.405b	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.405d	90 02		bcc $4061			bcc 	_RCFail 				; so concreting
.405f					_RCSucceed:
.405f	38		sec				sec
.4060	60		rts				rts
.4061					_RCFail:
.4061	18		clc				clc
.4062	60		rts				rts
.4063					AllocateHardMemory:
.4063	98		tya				tya
.4064	48		pha				pha
.4065	ad 52 0d	lda $0d52			lda 	srcStrLen 				; characters in string
.4068	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.406a	b0 04		bcs $4070			bcs 	_AHMSetMax 				; max out that amount.
.406c	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.406e	90 02		bcc $4072			bcc 	_AHMIsOkay
.4070					_AHMSetMax:
.4070	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.4072					_AHMIsOkay:
.4072	48		pha				pha	 							; save size to be allocated
.4073	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.4075	38		sec				sec  							; and copy result to TOS as target address.
.4076	65 33		adc $33				adc 	highMemory
.4078	85 33		sta $33				sta 	highMemory
.407a	a5 34		lda $34				lda 	highMemory+1
.407c	69 ff		adc #$ff			adc 	#$FF
.407e	85 34		sta $34				sta 	highMemory+1
.4080	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.4082	68		pla				pla 							; get the total size of the storage block
.4083	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.4085	18		clc				clc
.4086	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.4088	69 01		adc #$01			adc 	#1
.408a	91 2c		sta ($2c),y			sta 	(temp1),y
.408c	a5 34		lda $34				lda 	highMemory+1
.408e	69 00		adc #$00			adc 	#0
.4090	c8		iny				iny
.4091	91 2c		sta ($2c),y			sta 	(temp1),y
.4093	68		pla				pla
.4094	a8		tay				tay
.4095	60		rts				rts
.4096					CopyStringToHardMemory:
.4096	98		tya				tya
.4097	48		pha				pha
.4098	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.409a	b1 2c		lda ($2c),y			lda 	(temp1),y
.409c	85 2e		sta $2e				sta 	temp2
.409e	c8		iny				iny
.409f	b1 2c		lda ($2c),y			lda 	(temp1),y
.40a1	85 2f		sta $2f				sta 	temp2+1
.40a3	ac 52 0d	ldy $0d52			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.40a6					_CSTHMLoop:
.40a6	b1 2a		lda ($2a),y			lda 	(temp0),y
.40a8	91 2e		sta ($2e),y			sta 	(temp2),y
.40aa	88		dey				dey
.40ab	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.40ad	d0 f7		bne $40a6			bne 	_CSTHMLoop
.40af	68		pla				pla
.40b0	a8		tay				tay
.40b1	60		rts				rts
.40b2					CheckSpecialConcretion:
.40b2	ad 52 0d	lda $0d52			lda 	srcStrLen 				; check string is null e.g. length = 0
.40b5	f0 02		beq $40b9			beq 	_CSCNullString
.40b7	18		clc				clc
.40b8	60		rts				rts
.40b9					_CSCNullString:
.40b9	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.40bb	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.40be	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.40c0	85 2a		sta $2a				sta 	temp0
.40c2	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.40c4	85 2b		sta $2b				sta 	1+(temp0)
.40c6	38		sec				sec
.40c7	60		rts				rts

;******  Return to file: string/string.asm

.40c8					stringHandler:
.40c8	7c cb 40	jmp ($40cb,x)			jmp 	(stringVectors,x)
.40cb					stringVectors:
>40cb	dd 40					.word _DummyControlHandler ; index 0
>40cd	2b 3e					.word StringChrs           ; index 2
>40cf	27 3f					.word StrClone             ; index 4
>40d1	9f 3e					.word StringConcat         ; index 6
>40d3	3a 3e					.word StringNull           ; index 8
>40d5	56 3e					.word STRCompare           ; index 10
>40d7	4d 3f					.word CaseString           ; index 12
>40d9	92 3f					.word StringSubstring      ; index 14
>40db	e6 3f					.word StringWrite          ; index 16
.40dd					_DummyControlHandler:
.40dd	60		rts			rts

;******  Return to file: basic.asm

.40de					section_end_string:
.40de					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d53					deTokeniseVector:
>0d53							.fill 	2
.0d55					lastCharacterClass:
>0d55							.fill 	1
.0d56					indent:
>0d56							.fill 	1
.40de					ListLine:
.40de	48		pha				pha								; enter here to list to console. sets the output vector
.40df	a9 16		lda #$16			lda 	#(deTokenPrint) & $FF
.40e1	8d 53 0d	sta $0d53			sta 	deTokeniseVector
.40e4	a9 42		lda #$42			lda 	#(deTokenPrint) >> 8
.40e6	8d 54 0d	sta $0d54			sta 	1+(deTokeniseVector)
.40e9	68		pla				pla
.40ea					Detokenise:
.40ea	18		clc				clc 							; space required for line number.
.40eb	69 06		adc #$06			adc 	#6
.40ed	8d 56 0d	sta $0d56			sta 	indent
.40f0	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.40f2	8d 55 0d	sta $0d55			sta 	lastCharacterClass
.40f5	a2 02		ldx #$02			ldx 	#2
.40f7	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.40f9	95 a8		sta $a8,x			sta 	esInt2,x
.40fb	95 b0		sta $b0,x			sta 	esInt3,x
.40fd	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.40ff	b1 28		lda ($28),y			lda 	(codePtr),y
.4101	95 98		sta $98,x			sta 	esInt0,x
.4103	c8		iny				iny
.4104	b1 28		lda ($28),y			lda 	(codePtr),y
.4106	95 a0		sta $a0,x			sta 	esInt1,x
.4108	a9 84		lda #$84			lda 	#LTYLineNumber
.410a	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.410d	a9 0a		lda #$0a			lda 	#10 					; base 10
.410f	20 b5 41	jsr $41b5			jsr 	DTPrintInteger 			; print as integer.
.4112	a0 00		ldy #$00			ldy 	#0 						; get length
.4114	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.4116	aa		tax				tax
.4117					_DTPadOut:
.4117	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4119	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.411c	e8		inx				inx
.411d	ec 56 0d	cpx $0d56			cpx 	indent
.4120	d0 f5		bne $4117			bne 	_DTPadOut
.4122	a0 03		ldy #$03			ldy 	#3 						; start position.
.4124					_DTListLoop:
.4124	b1 28		lda ($28),y			lda 	(codePtr),y
.4126	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.4128	f0 5e		beq $4188			beq 	_DTIsString
.412a	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.412c	f0 56		beq $4184			beq 	_DTIsFloat
.412e	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.4130	f0 16		beq $4148			beq 	_DTHexConstant
.4132	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.4134	d0 06		bne $413c			bne 	_DTNotEnd
.4136	a9 ff		lda #$ff			lda 	#255 					; print CR
.4138	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.413b	60		rts				rts
.413c					_DTNotEnd:
.413c	c9 00		cmp #$00			cmp 	#0
.413e	30 38		bmi $4178			bmi 	_DTIsToken
.4140	c9 40		cmp #$40			cmp 	#$40
.4142	90 3a		bcc $417e			bcc 	_DTIsIdentifier
.4144	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.4146	d0 0d		bne $4155			bne 	_DTConstant
.4148					_DTHexConstant:
.4148	a9 26		lda #$26			lda 	#"&"
.414a	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.414d	c8		iny				iny
.414e	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.4150	20 32 42	jsr $4232			jsr 	DTSwitchMode
.4153	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.4155					_DTConstant:
.4155	48		pha				pha
.4156	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.4158	20 32 42	jsr $4232			jsr 	DTSwitchMode
.415b	a9 86		lda #$86			lda 	#LTYConstant
.415d	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.4160	a2 02		ldx #$02			ldx 	#2 						; get its value
.4162	8a		txa				txa
.4163	a2 10		ldx #$10		ldx	#16
.4165	20 0b 3e	jsr $3e0b		jsr	mainHandler
.4168	aa		tax				tax
.4169	68		pla				pla 							; get base back
.416a	85 32		sta $32				sta 	tempShort
.416c	98		tya				tya
.416d	48		pha				pha
.416e	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.4170	20 b5 41	jsr $41b5			jsr 	DTPrintInteger
.4173	68		pla				pla
.4174	a8		tay				tay
.4175	4c 24 41	jmp $4124			jmp 	_DTListLoop
.4178					_DTIsToken:
.4178	20 8b 42	jsr $428b			jsr 	DTDecodeToken
.417b	4c 24 41	jmp $4124			jmp 	_DTListLoop
.417e					_DTIsIdentifier:
.417e	20 44 42	jsr $4244			jsr 	DTIdentifier
.4181	4c 24 41	jmp $4124			jmp 	_DTListLoop
.4184					_DTIsFloat:
>4184	db						.byte 	$DB
.4185	4c 84 41	jmp $4184			jmp 	_DTIsFloat
.4188					_DTIsString:
.4188	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.418a	20 32 42	jsr $4232			jsr 	DTSwitchMode
.418d	a9 81		lda #$81			lda 	#LTYString
.418f	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.4192	a9 22		lda #$22			lda 	#'"'						; open quote
.4194	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.4197	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.4199	8a		txa				txa
.419a	a2 10		ldx #$10		ldx	#16
.419c	20 0b 3e	jsr $3e0b		jsr	mainHandler
.419f	aa		tax				tax
.41a0	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.41a2	85 2a		sta $2a				sta 	temp0
.41a4	b5 a0		lda $a0,x			lda 	esInt1,x
.41a6	85 2b		sta $2b				sta 	temp0+1
.41a8	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.41aa	20 c7 41	jsr $41c7			jsr 	DTPrintLengthPrefix
.41ad	a9 22		lda #$22			lda 	#'"'
.41af	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.41b2	4c 24 41	jmp $4124			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d57					tPrintCount:
>0d57							.fill 	1
.41b5					DTPrintInteger:
.41b5	48		pha				pha									; save base
.41b6	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.41b8	85 2a		sta $2a				sta 	temp0
.41ba	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.41bc	85 2b		sta $2b				sta 	1+(temp0)
.41be	68		pla				pla
.41bf	a8		tay				tay
.41c0	8a		txa				txa
.41c1	a2 12		ldx #$12		ldx	#18
.41c3	20 0b 3e	jsr $3e0b		jsr	mainHandler
.41c6	aa		tax				tax 								; then drop through here.
.41c7					DTPrintLengthPrefix:
.41c7	aa		tax				tax 								; A = 0 = don't case convert.
.41c8	98		tya				tya
.41c9	48		pha				pha
.41ca	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.41cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.41ce	8d 57 0d	sta $0d57			sta 	tPrintCount
.41d1	f0 1b		beq $41ee			beq 	_DTPLPExit 					; empty string
.41d3					_DTPLPLoop:
.41d3	c8		iny				iny 								; get next.
.41d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.41d6	29 7f		and #$7f			and 	#$7F
.41d8	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.41da	f0 0a		beq $41e6			beq 	_DTPLPNoCase
.41dc	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.41de	90 06		bcc $41e6			bcc 	_DTPLPNoCase
.41e0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.41e2	b0 02		bcs $41e6			bcs 	_DTPLPNoCase
.41e4	49 20		eor #$20			eor 	#"A"^"a"
.41e6					_DTPLPNoCase
.41e6	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter 		; call handler
.41e9	ce 57 0d	dec $0d57			dec 	tPrintCount 				; do all the characters
.41ec	d0 e5		bne $41d3			bne 	_DTPLPLoop
.41ee					_DTPLPExit:
.41ee	68		pla				pla
.41ef	a8		tay				tay
.41f0	60		rts				rts
.41f1					ListOutputCharacter:
.41f1	85 32		sta $32				sta 	tempShort
.41f3	48		pha				pha
.41f4	8a		txa				txa
.41f5	48		pha				pha
.41f6	98		tya				tya
.41f7	48		pha				pha
.41f8	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.41fa	c9 20		cmp #$20			cmp 	#32
.41fc	b0 0c		bcs $420a			bcs		_LOCHiBit
.41fe	09 40		ora #$40			ora 	#64 						; conversion
.4200	c9 40		cmp #$40			cmp 	#64							; make l/c
.4202	f0 06		beq $420a			beq 	_LOCHiBit
.4204	c9 5b		cmp #$5b			cmp 	#65+26
.4206	b0 02		bcs $420a			bcs 	_LOCHiBit
.4208	69 20		adc #$20			adc 	#32
.420a					_LOCHiBit:
.420a	20 13 42	jsr $4213			jsr 	_LOCCallVector				; call o/p handler routine
.420d	68		pla				pla
.420e	a8		tay				tay
.420f	68		pla				pla
.4210	aa		tax				tax
.4211	68		pla				pla
.4212					_LOCExit:
.4212	60		rts				rts
.4213					_LOCCallVector:
.4213	6c 53 0d	jmp ($0d53)			jmp 	(deTokeniseVector)
.4216					deTokenPrint:
.4216	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.4218	30 06		bmi $4220			bmi 	_dtpInk
.421a	a2 16		ldx #$16		ldx	#22
.421c	20 f6 14	jsr $14f6		jsr	deviceHandler
.421f	60		rts				rts
.4220	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4222	f0 08		beq $422c			beq 	_dtpCR						; except $FF => CRLF
.4224	29 07		and #$07			and 	#7
.4226	a2 08		ldx #$08		ldx	#8
.4228	20 f6 14	jsr $14f6		jsr	deviceHandler
.422b	60		rts				rts
.422c					_dtpCR:
.422c	a2 06		ldx #$06		ldx	#6
.422e	20 f6 14	jsr $14f6		jsr	deviceHandler
.4231	60		rts				rts
.4232					DTSwitchMode:
.4232	cd 55 0d	cmp $0d55			cmp 	LastCharacterClass 			; if changed, update character class
.4235	f0 04		beq $423b			beq 	_DTSMNoChange
.4237	8d 55 0d	sta $0d55			sta 	LastCharacterClass
.423a					_DTSMExit:
.423a	60		rts				rts
.423b					_DTSMNoChange:
.423b	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.423d	f0 fb		beq $423a			beq 	_DTSMExit 					; need a space.
.423f	a9 20		lda #$20			lda 	#" "
.4241	4c f1 41	jmp $41f1			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4244					DTIdentifier:
.4244	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4246	20 32 42	jsr $4232			jsr 	DTSwitchMode
.4249	a9 87		lda #$87			lda 	#LTYIdentifier
.424b	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.424e					_DTILoop:
.424e	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.4250	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4252	d0 02		bne $4256			bne 	_DTINotUS
.4254	a9 5f		lda #$5f			lda 	#"_"
.4256					_DTINotUS:
.4256	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.4259	c8		iny				iny
.425a	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.425c	c9 3a		cmp #$3a			cmp 	#$3A
.425e	90 ee		bcc $424e			bcc 	_DTILoop
.4260	c8		iny				iny
.4261	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4263	f0 25		beq $428a			beq 	_DTIExit 					; no postfix.
.4265	48		pha				pha
.4266	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.4268	8d 55 0d	sta $0d55			sta 	LastCharacterClass
.426b	a9 82		lda #$82			lda 	#LTYPunctuation
.426d	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.4270	68		pla				pla
.4271	c9 3b		cmp #$3b			cmp 	#$3B
.4273	f0 10		beq $4285			beq 	_DTIArray
.4275	4a		lsr a				lsr 	a 							; array flag in C
.4276	08		php				php
.4277	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.4279	f0 02		beq $427d			beq 	_DTIDollar
.427b	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.427d					_DTIDollar:
.427d	49 24		eor #$24			eor 	#"$"
.427f	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.4282	28		plp				plp
.4283	90 05		bcc $428a			bcc 	_DTIExit
.4285					_DTIArray:
.4285	a9 28		lda #$28			lda 	#"("
.4287	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.428a					_DTIExit:
.428a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.428b					DTDecodeToken:
.428b	a2 00		ldx #$00			ldx 	#0 							; table number to use
.428d	b1 28		lda ($28),y			lda 	(codePtr),y
.428f	c9 84		cmp #$84			cmp 	#$84
.4291	b0 05		bcs $4298			bcs 	_DTNotShift
.4293	29 03		and #$03			and 	#3 							; get the shift 1..3
.4295	0a		asl a				asl 	a 							; put 2 x in X
.4296	aa		tax				tax
.4297	c8		iny				iny
.4298					_DTNotShift:
.4298	bd 9a 45	lda $459a,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.429b	85 2a		sta $2a				sta 	temp0 						; point into temp0
.429d	bd 9b 45	lda $459b,x			lda 	TokenTableAddress+1,x
.42a0	85 2b		sta $2b				sta 	temp0+1
.42a2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.42a4	c8		iny				iny 								; consume it.
.42a5	aa		tax				tax
.42a6	98		tya				tya
.42a7	48		pha				pha
.42a8					_DTFindText:
.42a8	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.42aa	f0 11		beq $42bd			beq 	_DTFoundText
.42ac	ca		dex				dex
.42ad	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.42af	38		sec				sec
.42b0	b1 2a		lda ($2a),y			lda 	(temp0),y
.42b2	65 2a		adc $2a				adc 	temp0
.42b4	85 2a		sta $2a				sta 	temp0
.42b6	90 f0		bcc $42a8			bcc 	_DTFindText
.42b8	e6 2b		inc $2b				inc 	temp0+1
.42ba	4c a8 42	jmp $42a8			jmp 	_DTFindText
.42bd					_DTFoundText:
.42bd	a0 01		ldy #$01			ldy 	#1 							; get first character
.42bf	b1 2a		lda ($2a),y			lda 	(temp0),y
.42c1	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.42c3	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.42c5	90 11		bcc $42d8			bcc 	_DTIsPunctuation
.42c7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.42c9	b0 0d		bcs $42d8			bcs 	_DTIsPunctuation
.42cb	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.42cd	20 32 42	jsr $4232			jsr 	DTSwitchMode
.42d0	a9 83		lda #$83			lda 	#LTYKeyword
.42d2	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.42d5	4c e2 42	jmp $42e2			jmp 	_DTPrint
.42d8					_DTIsPunctuation:
.42d8	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.42da	20 32 42	jsr $4232			jsr 	DTSwitchMode
.42dd	a9 82		lda #$82			lda 	#LTYPunctuation
.42df	20 f1 41	jsr $41f1			jsr 	ListOutputCharacter
.42e2					_DTPrint:
.42e2	a9 01		lda #$01			lda 	#1 							; fix case.
.42e4	20 c7 41	jsr $41c7			jsr 	DTPrintLengthPrefix 		; print it out.
.42e7	a0 00		ldy #$00			ldy 	#0
.42e9	b1 2a		lda ($2a),y			lda 	(temp0),y
.42eb	a8		tay				tay
.42ec	b1 2a		lda ($2a),y			lda 	(temp0),y
.42ee	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.42f0	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.42f2	90 04		bcc $42f8			bcc 	_DTIsNowPunctuation
.42f4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.42f6	90 05		bcc $42fd			bcc 	_DTPExit
.42f8					_DTIsNowPunctuation:
.42f8	a9 01		lda #$01			lda 	#1
.42fa	8d 55 0d	sta $0d55			sta		LastCharacterClass
.42fd					_DTPExit:
.42fd	68		pla				pla
.42fe	a8		tay				tay
.42ff	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d58					currentSet:
>0d58							.fill 	1
.4300					TokenSearch:
.4300	8a		txa				txa
.4301	48		pha				pha
.4302	98		tya				tya
.4303	48		pha				pha
.4304	a9 00		lda #$00			lda 	#0
.4306	8d 58 0d	sta $0d58			sta 	currentSet
.4309					_TSLoop:
.4309	ad 58 0d	lda $0d58			lda 	currentSet 					; 2 x currentset in X
.430c	0a		asl a				asl 	a
.430d	aa		tax				tax
.430e	bd 9a 45	lda $459a,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.4311	85 2a		sta $2a				sta 	temp0
.4313	bd 9b 45	lda $459b,x			lda 	TokenTableAddress+1,x
.4316	85 2b		sta $2b				sta 	temp0+1
.4318	20 3f 43	jsr $433f			jsr 	TokenSearchOne 				; search one table
.431b	b0 0d		bcs $432a			bcs 	_TSFound 					; found a token.
.431d	ee 58 0d	inc $0d58			inc 	currentSet 					; next set
.4320	ad 58 0d	lda $0d58			lda 	currentSet
.4323	c9 04		cmp #$04			cmp 	#4
.4325	d0 e2		bne $4309			bne 	_TSLoop 					; back if not done all four.
.4327	18		clc				clc 								; clear carry and exit
.4328	90 10		bcc $433a			bcc 	_TSExit
.432a					_TSFound:
.432a	48		pha				pha 								; save token
.432b	ad 58 0d	lda $0d58			lda 	currentSet					; if set zero no shift
.432e	f0 05		beq $4335			beq 	_TSNoShift
.4330	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.4332	20 f0 43	jsr $43f0			jsr 	TokenWrite
.4335					_TSNoShift:
.4335	68		pla				pla 								; get token back
.4336	20 f0 43	jsr $43f0			jsr 	TokenWrite 					; write it
.4339	38		sec				sec 								; carry set indicating success
.433a					_TSExit:
.433a	68		pla				pla
.433b	a8		tay				tay
.433c	68		pla				pla
.433d	aa		tax				tax
.433e	60		rts				rts
.433f					TokenSearchOne:
.433f	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.4341					_TSOLoop:
.4341	a0 00		ldy #$00			ldy 	#0
.4343	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4345	f0 26		beq $436d			beq 	_TSOFail 					; if zero, end of table
.4347	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.434a	f0 11		beq $435d			beq 	_TSOCheckText
.434c					_TSONext:
.434c	e8		inx				inx 								; bump token
.434d	a0 00		ldy #$00			ldy 	#0							; get length
.434f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4351	38		sec				sec
.4352	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4354	85 2a		sta $2a				sta 	temp0
.4356	90 e9		bcc $4341			bcc 	_TSOLoop
.4358	e6 2b		inc $2b				inc 	temp0+1
.435a	4c 41 43	jmp $4341			jmp 	_TSOLoop
.435d					_TSOCheckText:
.435d	a8		tay				tay 								; compare length downto 1.
.435e					_TSOCheckLoop:
.435e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.4360	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4363	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4365	d0 e5		bne $434c			bne 	_TSONext 					; different goto next.
.4367	88		dey				dey 								; do all
.4368	d0 f4		bne $435e			bne 	_TSOCheckLoop
.436a	8a		txa				txa 								; return token in A and carry set
.436b	38		sec				sec
.436c	60		rts				rts
.436d					_TSOFail:
.436d	18		clc				clc
.436e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.436f					TokTest:
.436f	a2 ff		ldx #$ff				ldx 	#$FF
.4371	9a		txs					txs
.4372	a9 8f		lda #$8f			lda 	#(TokenText1) & $FF
.4374	85 28		sta $28				sta 	codePtr
.4376	a9 43		lda #$43			lda 	#(TokenText1) >> 8
.4378	85 29		sta $29				sta 	1+(codePtr)
.437a	20 8f 43	jsr $438f				jsr 	Tokenise
.437d	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.437f	bd 8f 43	lda $438f,x	_TokCheck:	lda 	TokenBytes1,x
.4382	dd 5c 0d	cmp $0d5c,x				cmp 	tokenBuffer,x
.4385	d0 fe		bne $4385	_TokFail:	bne 	_TokFail	 		; error.
.4387	e8		inx					inx
.4388	c9 80		cmp #$80				cmp 	#$80
.438a	d0 f3		bne $437f				bne 	_TokCheck
.438c	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.438f					TokenText1:
.438f					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d59					tokenHeader:
>0d59							.fill 	3
.0d5c					tokenBuffer:
>0d5c							.fill 	256
.0e5c					tokenBufferIndex:
>0e5c							.fill 	1
.438f					Tokenise:
.438f	20 09 44	jsr $4409			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.4392					TokeniseASCIIZ:
.4392	20 1a 44	jsr $441a			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4395	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4397	8d 5c 0e	sta $0e5c			sta 	tokenBufferIndex
.439a	a8		tay				tay 								; start pointer
.439b	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.439d	8d 5c 0d	sta $0d5c			sta 	tokenBuffer
.43a0					_TokLoop:
.43a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.43a2	f0 46		beq $43ea			beq 	_TokExit 					; if zero, then exit.
.43a4	c8		iny				iny 								; skip over spaces.
.43a5	c9 20		cmp #$20			cmp 	#" "
.43a7	f0 f7		beq $43a0			beq 	_TokLoop
.43a9	88		dey				dey 								; point back to character.
.43aa	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.43ac	f0 18		beq $43c6			beq 	_TokHexConst
.43ae	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.43b0	f0 23		beq $43d5			beq 	_TokQString
.43b2	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.43b4	b0 26		bcs $43dc			bcs 	_TokPunctuation
.43b6	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.43b8	b0 29		bcs $43e3			bcs 	_TokIdentifier
.43ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.43bc	b0 1e		bcs $43dc			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.43be	c9 30		cmp #$30			cmp 	#"0"
.43c0	90 1a		bcc $43dc			bcc 	_TokPunctuation 			; < 0, punctuation.
.43c2	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.43c4	d0 08		bne $43ce			bne 	_TokConst
.43c6					_TokHexConst:
.43c6	c8		iny				iny									; consume token.
.43c7	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.43c9	20 f0 43	jsr $43f0			jsr 	TokenWrite
.43cc	a9 10		lda #$10			lda 	#16
.43ce					_TokConst:
.43ce	20 d8 44	jsr $44d8			jsr 	TokeniseInteger
.43d1	b0 cd		bcs $43a0			bcs 	_TokLoop
.43d3	90 18		bcc $43ed			bcc 	_TokFail
.43d5					_TokQString:
.43d5	20 6e 45	jsr $456e			jsr 	TokeniseString
.43d8	b0 c6		bcs $43a0			bcs 	_TokLoop
.43da	90 11		bcc $43ed			bcc 	_TokFail
.43dc					_TokPunctuation:
.43dc	20 4d 45	jsr $454d			jsr 	TokenisePunctuation
.43df	b0 bf		bcs $43a0			bcs 	_TokLoop
.43e1	90 0a		bcc $43ed			bcc 	_TokFail
.43e3					_TokIdentifier:
.43e3	20 49 44	jsr $4449			jsr 	TokeniseIdentifier
.43e6	b0 b8		bcs $43a0			bcs 	_TokLoop
.43e8	90 03		bcc $43ed			bcc 	_TokFail
.43ea					_TokExit:
.43ea	a9 01		lda #$01			lda 	#1
.43ec	60		rts				rts
.43ed					_TokFail:
.43ed	a9 00		lda #$00			lda 	#0
.43ef	60		rts				rts
.43f0					TokenWrite:
.43f0	85 32		sta $32				sta 	tempShort 					; save XA
.43f2	48		pha				pha
.43f3	8a		txa				txa
.43f4	48		pha				pha
.43f5	a5 32		lda $32				lda 	tempShort
.43f7	ae 5c 0e	ldx $0e5c			ldx 	tokenBufferIndex 			; geet index
.43fa	9d 5c 0d	sta $0d5c,x			sta 	tokenBuffer,x 				; write byte to buffer
.43fd	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.43ff	9d 5d 0d	sta $0d5d,x			sta 	tokenBuffer+1,x
.4402	ee 5c 0e	inc $0e5c			inc 	tokenBufferIndex 			; bump index
.4405	68		pla				pla
.4406	aa		tax				tax
.4407	68		pla				pla
.4408	60		rts				rts
.4409					TokeniseMakeASCIIZ:
.4409	a0 00		ldy #$00			ldy 	#0							; get length of string.
.440b	b1 28		lda ($28),y			lda 	(codePtr),y
.440d	a8		tay				tay
.440e	c8		iny				iny 								; +1, the NULL goes here.
.440f	a9 00		lda #$00			lda 	#0
.4411	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4413	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4415	d0 02		bne $4419			bne 	_TMKAExit
.4417	e6 29		inc $29				inc 	codePtr+1
.4419					_TMKAExit:
.4419	60		rts				rts
.441a					TokeniseFixCase:
.441a	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.441c	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.441e					_TFCFlipQ:
.441e	8a		txa				txa
.441f	49 01		eor #$01			eor 	#1
.4421	aa		tax				tax
.4422					_TFCLoop:
.4422	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4424	f0 22		beq $4448			beq 	_TFCExit 					; if zero exit.
.4426	c9 20		cmp #$20			cmp 	#32 						; if control
.4428	90 1a		bcc $4444			bcc 	_TFCControl
.442a	c8		iny				iny 								; preconsume
.442b	c9 22		cmp #$22			cmp 	#'"'
.442d	f0 ef		beq $441e			beq 	_TFCFlipQ
.442f	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.4431	90 ef		bcc $4422			bcc 	_TFCLoop
.4433	c9 7b		cmp #$7b			cmp 	#"z"+1
.4435	b0 eb		bcs $4422			bcs 	_TFCLoop
.4437	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4439	d0 e7		bne $4422			bne 	_TFCLoop
.443b	88		dey				dey
.443c	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.443e					_TFCWrite:
.443e	91 28		sta ($28),y			sta 	(codePtr),y
.4440	c8		iny				iny
.4441	4c 22 44	jmp $4422			jmp 	_TFCLoop
.4444					_TFCControl:
.4444	a9 20		lda #$20			lda 	#" "
.4446	d0 f6		bne $443e			bne 	_TFCWrite
.4448					_TFCExit:
.4448	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4449					TokeniseIdentifier:
.4449	a2 00		ldx #$00			ldx 	#0
.444b					_TICopyID:
.444b	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.444d	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.444f	f0 16		beq $4467			beq 	_TICopyUnderscore
.4451	c9 2e		cmp #$2e			cmp 	#"."
.4453	f0 14		beq $4469			beq 	_TICopyIn
.4455	c9 30		cmp #$30			cmp 	#"0"
.4457	90 1b		bcc $4474			bcc 	_TIEndCopy
.4459	c9 3a		cmp #$3a			cmp 	#"9"+1
.445b	90 0c		bcc $4469			bcc 	_TICopyIn
.445d	c9 41		cmp #$41			cmp 	#"A"
.445f	90 13		bcc $4474			bcc 	_TIEndCopy
.4461	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4463	b0 0f		bcs $4474			bcs		_TIEndCopy
.4465	90 02		bcc $4469			bcc 	_TICopyIn
.4467					_TICopyUnderScore:
.4467	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4469					_TICopyIn:
.4469	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.446a	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.446d	8e cf 0a	stx $0acf			stx 	convertBuffer
.4470	c8		iny				iny 								; next character
.4471	4c 4b 44	jmp $444b			jmp 	_TICopyID 					; loop round
.4474					_TIEndCopy:
.4474	a9 24		lda #$24			lda 	#"$"
.4476	20 cb 44	jsr $44cb			jsr 	TIDCheckCopy
.4479	a9 23		lda #$23			lda 	#"#"
.447b	20 cb 44	jsr $44cb			jsr 	TIDCheckCopy
.447e	a9 28		lda #$28			lda 	#"("
.4480	20 cb 44	jsr $44cb			jsr 	TIDCheckCopy
.4483	20 00 43	jsr $4300			jsr 	TokenSearch 				; is it a token
.4486	b0 41		bcs $44c9			bcs 	_TIExit 					; if so, then exit.
.4488	98		tya				tya
.4489	48		pha				pha
.448a	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.448c	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.448f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4492	c9 28		cmp #$28			cmp 	#"("
.4494	d0 02		bne $4498			bne 	_TINotArray
.4496	ca		dex				dex 								; yes, remove it and convert to array.
.4497	c8		iny				iny
.4498					_TINotArray:
.4498	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.449b	c9 24		cmp #$24			cmp 	#"$"
.449d	d0 03		bne $44a2			bne 	_TINotString
.449f	ca		dex				dex
.44a0	c8		iny				iny
.44a1	c8		iny				iny
.44a2					_TINotString:
.44a2	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.44a5	c9 23		cmp #$23			cmp 	#"#"
.44a7	d0 05		bne $44ae			bne 	_TINotFloat
.44a9	ca		dex				dex
.44aa	c8		iny				iny
.44ab	c8		iny				iny
.44ac	c8		iny				iny
.44ad	c8		iny				iny
.44ae					_TINotFloat:
.44ae	e8		inx				inx 								; write end marker for identifier.
.44af	98		tya				tya
.44b0	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.44b3	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.44b6	a2 01		ldx #$01			ldx 	#1
.44b8					_TIOutput:
.44b8	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.44bb	29 3f		and #$3f			and 	#$3F
.44bd	48		pha				pha
.44be	20 f0 43	jsr $43f0			jsr 	TokenWrite
.44c1	e8		inx				inx
.44c2	68		pla				pla
.44c3	c9 3a		cmp #$3a			cmp 	#$3A
.44c5	90 f1		bcc $44b8			bcc 	_TIOutput
.44c7	68		pla				pla
.44c8	a8		tay				tay
.44c9					_TIExit:
.44c9	38		sec				sec 								; this can't fail.
.44ca	60		rts				rts
.44cb					TIDCheckCopy:
.44cb	d1 28		cmp ($28),y			cmp 	(codePtr),y
.44cd	d0 08		bne $44d7			bne 	_TIDCCExit
.44cf	e8		inx				inx
.44d0	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.44d3	8e cf 0a	stx $0acf			stx 	convertBuffer
.44d6	c8		iny				iny
.44d7					_TIDCCExit:
.44d7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.44d8					TokeniseInteger:
.44d8	85 2c		sta $2c				sta 	temp1 						; save base
.44da	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.44dc	8e cf 0a	stx $0acf			stx 	convertBuffer
.44df					_TIGetChars:
.44df	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.44e1	c9 30		cmp #$30			cmp 	#"0"
.44e3	90 1f		bcc $4504			bcc 	_TIEndGet
.44e5	c9 3a		cmp #$3a			cmp 	#"9"+1
.44e7	90 10		bcc $44f9			bcc 	_TIHaveChar
.44e9	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.44eb	c9 0a		cmp #$0a			cmp 	#10
.44ed	f0 15		beq $4504			beq 	_TIEndGet
.44ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.44f1	c9 41		cmp #$41			cmp 	#"A"
.44f3	90 0f		bcc $4504			bcc 	_TIEndGet
.44f5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.44f7	b0 0b		bcs $4504			bcs 	_TIEndGet
.44f9					_TIHaveChar:
.44f9	e8		inx				inx 								; write into buffer.
.44fa	8e cf 0a	stx $0acf			stx 	convertBuffer
.44fd	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4500	c8		iny				iny 								; next char
.4501	4c df 44	jmp $44df			jmp 	_TIGetChars
.4504					_TIEndGet:
.4504	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.4506	f0 1c		beq $4524			beq 	_TIFail
.4508	98		tya				tya
.4509	48		pha				pha
.450a	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.450c	85 2a		sta $2a				sta 	temp0
.450e	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4510	85 2b		sta $2b				sta 	1+(temp0)
.4512	a9 00		lda #$00			lda 	#0 							; stack level 0
.4514	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4516	a2 1a		ldx #$1a		ldx	#26
.4518	20 0b 3e	jsr $3e0b		jsr	mainHandler
.451b	68		pla				pla
.451c	a8		tay				tay
.451d	90 05		bcc $4524			bcc 	_TIFail 					; didn't convert.
.451f	20 26 45	jsr $4526			jsr 	TIRecursiveOut 				; recursive output ?
.4522	38		sec				sec
.4523	60		rts				rts
.4524					_TIFail:
.4524	18		clc				clc
.4525	60		rts				rts
.4526					TIRecursiveOut:
.4526	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4528	29 3f		and #$3f			and 	#$3F
.452a	09 40		ora #$40			ora 	#$40
.452c	48		pha				pha
.452d	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.452f	29 c0		and #$c0			and 	#$C0
.4531	05 a0		ora $a0				ora 	esInt1
.4533	05 a8		ora $a8				ora 	esInt2
.4535	05 b0		ora $b0				ora 	esInt3
.4537	f0 10		beq $4549			beq 	_TIRONoRecursion
.4539	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.453b					_TIROShift:
.453b	46 b0		lsr $b0				lsr 	esInt3
.453d	66 a8		ror $a8				ror 	esInt2
.453f	66 a0		ror $a0				ror 	esInt1
.4541	66 98		ror $98				ror 	esInt0
.4543	ca		dex				dex
.4544	d0 f5		bne $453b			bne 	_TIROShift
.4546	20 26 45	jsr $4526			jsr 	TIRecursiveOut 				; call recursively
.4549					_TIRONoRecursion:
.4549	68		pla				pla 								; pull the old bit.
.454a	4c f0 43	jmp $43f0			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.454d					TokenisePunctuation:
.454d	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.454f	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4552	c8		iny				iny
.4553	b1 28		lda ($28),y			lda 	(codePtr),y
.4555	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4558	c8		iny				iny 								; Y is +2
.4559	a9 02		lda #$02			lda 	#2 							; 2 character string.
.455b	8d cf 0a	sta $0acf			sta 	convertBuffer
.455e	20 00 43	jsr $4300			jsr 	TokenSearch 				; search for that token.
.4561	b0 0a		bcs $456d			bcs 	_TIFound
.4563	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4566	88		dey				dey 								; Y is now +1
.4567	20 00 43	jsr $4300			jsr 	TokenSearch 				; search for that token.
.456a	b0 01		bcs $456d			bcs 	_TIFound
.456c	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.456d					_TIFound:
.456d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.456e					TokeniseString:
.456e	c8		iny				iny 								; skip opening quote
.456f	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4571	84 2a		sty $2a				sty 	temp0 						; save start.
.4573					_TSGetLength:
.4573	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4575	f0 21		beq $4598			beq 	_TSFail						; end of line, fail
.4577	c8		iny				iny
.4578	e8		inx				inx
.4579	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.457b	d0 f6		bne $4573			bne 	_TSGetLength
.457d	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.457f	20 f0 43	jsr $43f0			jsr 	TokenWrite
.4582	8a		txa				txa 								; output length
.4583	20 f0 43	jsr $43f0			jsr 	TokenWrite
.4586	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4588	e0 00		cpx #$00			cpx 	#0 							; check ended
.458a	f0 09		beq $4595			beq 	_TSExit
.458c					_TSOutput:
.458c	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.458e	20 f0 43	jsr $43f0			jsr 	TokenWrite
.4591	c8		iny				iny
.4592	ca		dex				dex
.4593	d0 f7		bne $458c			bne 	_TSOutput
.4595					_TSExit:
.4595	c8		iny				iny 								; skip ending quote
.4596	38		sec				sec 								; return CS.
.4597	60		rts				rts
.4598					_TSFail:
.4598	18		clc				clc
.4599	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.459a					TokenTableAddress:
>459a	a2 45						.word 	Group0Text
>459c	70 47						.word 	Group1Text
>459e	bd 48						.word 	Group2Text
>45a0	08 49						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.45a2					Group0Text:
>45a2	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>45a6	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>45a9	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>45ad	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>45b0	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>45b3	01 be					.byte $01,$be                          ; $8b >
>45b5	01 bc					.byte $01,$bc                          ; $8c <
>45b7	01 bd					.byte $01,$bd                          ; $8d =
>45b9	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>45bc	01 ab					.byte $01,$ab                          ; $8f +
>45be	01 ad					.byte $01,$ad                          ; $90 -
>45c0	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>45c3	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>45c6	01 aa					.byte $01,$aa                          ; $93 *
>45c8	01 af					.byte $01,$af                          ; $94 /
>45ca	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>45ce	01 de					.byte $01,$de                          ; $96 ^
>45d0	01 a1					.byte $01,$a1                          ; $97 !
>45d2	01 bf					.byte $01,$bf                          ; $98 ?
>45d4	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>45db	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>45e1	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>45e5	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>45e8	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>45f0	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>45f6	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>45fb	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>4600	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>4605	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>460b	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>4613	01 a8					.byte $01,$a8                          ; $a4 (
>4615	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>461a	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>461f	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4624	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>462c	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4631	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4636	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>463c	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4641	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4646	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>464b	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4652	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4659	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>465e	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4665	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>466c	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4672	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4679	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>467f	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4687	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>468d	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4692	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4698	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>469e	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>46a4	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>46a9	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>46ae	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>46b5	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>46bc	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>46c4	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>46cc	01 c0					.byte $01,$c0                          ; $c3 @
>46ce	01 fe					.byte $01,$fe                          ; $c4 ~
>46d0	01 a6					.byte $01,$a6                          ; $c5 &
>46d2	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>46d8	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>46e0	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>46e4	01 a9					.byte $01,$a9                          ; $c9 )
>46e6	01 ba					.byte $01,$ba                          ; $ca :
>46e8	01 ac					.byte $01,$ac                          ; $cb ,
>46ea	01 bb					.byte $01,$bb                          ; $cc ;
>46ec	01 a7					.byte $01,$a7                          ; $cd '
>46ee	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>46f1	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>46f6	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>46fb	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>4701	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4705	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>4709	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>470d	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>4713	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4718	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>471c	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4722	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4727	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>472d	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4730	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4735	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>473c	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4741	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4746	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>474b	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>474f	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4755	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4759	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4760	01 ae					.byte $01,$ae                          ; $e5 .
>4762	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>4767	01 a3					.byte $01,$a3                          ; $e7 #
>4769	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>476f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4770					Group1Text:
>4770	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4775	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>477a	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>477f	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4783	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4789	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>478d	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4792	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>479a	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>479e	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>47a3	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>47a8	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>47ad	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>47b3	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>47ba	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>47be	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>47c4	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>47c8	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>47cc	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>47d0	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>47d4	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>47d8	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>47dc	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>47e0	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>47e4	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>47e8	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>47ec	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>47f0	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>47f4	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>47f8	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>47fc	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4800	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4804	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>4808	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>480c	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4810	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4814	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>4818	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>481c	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4820	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4824	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4828	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>482c	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4830	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4834	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4838	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>483c	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4840	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4844	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4848	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>484c	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4850	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4854	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4858	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>485c	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4860	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4864	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4868	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>486c	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4870	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4874	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4878	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>487c	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4880	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4884	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4888	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>488c	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4890	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4894	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4898	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>489c	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>48a0	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>48a4	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>48a8	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>48ac	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>48b0	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>48b4	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>48b8	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>48bc	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.48bd					Group2Text:
>48bd	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>48c3	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>48c9	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>48cf	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>48d4	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>48dc	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>48e3	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>48e7	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>48ec	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>48f2	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $8f text
>48f7	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>48fc	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4901	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>4907	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4908					Group3Text:
>4908	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>490f	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4916	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>491e	58 a8
>4920	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4928	59 a8
>492a	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>492f	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4936	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>493d	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4944	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>494b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.494c					tokeniserHandler:
.494c	7c 4f 49	jmp ($494f,x)			jmp 	(tokeniserVectors,x)
.494f					tokeniserVectors:
>494f	5b 49					.word _DummyControlHandler ; index 0
>4951	ea 40					.word Detokenise           ; index 2
>4953	de 40					.word ListLine             ; index 4
>4955	6f 43					.word TokTest              ; index 6
>4957	8f 43					.word Tokenise             ; index 8
>4959	92 43					.word TokeniseASCIIZ       ; index 10
.495b					_DummyControlHandler:
.495b	60		rts			rts

;******  Return to file: basic.asm

.495c					section_end_tokeniser:
.495c					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.495c					AccessArray:
.495c	8a		txa				txa
.495d	48		pha				pha
.495e	e8		inx				inx
.495f	20 28 4a	jsr $4a28			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4962	68		pla				pla
.4963	aa		tax				tax
.4964	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4966	85 2a		sta $2a				sta 	temp0
.4968	b5 a0		lda $a0,x			lda 	esInt1,x
.496a	85 2b		sta $2b				sta 	temp0+1
.496c	8a		txa				txa
.496d	48		pha				pha
.496e	98		tya				tya
.496f	48		pha				pha
.4970					_AAFollow:
.4970	a0 00		ldy #$00			ldy 	#0
.4972	b1 2a		lda ($2a),y			lda 	(temp0),y
.4974	48		pha				pha
.4975	c8		iny				iny
.4976	b1 2a		lda ($2a),y			lda 	(temp0),y
.4978	85 2b		sta $2b				sta 	temp0+1
.497a	68		pla				pla
.497b	85 2a		sta $2a				sta 	temp0
.497d	e8		inx				inx 								; advance to next stack slot.
.497e	a0 00		ldy #$00			ldy 	#0
.4980	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4982	d5 98		cmp $98,x			cmp 	esInt0,x
.4984	c8		iny				iny
.4985	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4987	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4989	29 7f		and #$7f			and 	#$7F
.498b	f5 a0		sbc $a0,x			sbc 	esInt1,x
.498d	90 50		bcc $49df			bcc 	_AABadIndex 				; failed on index if max index < required.
.498f	18		clc				clc
.4990	a5 2a		lda $2a				lda 	temp0
.4992	69 02		adc #$02			adc 	#2
.4994	85 2a		sta $2a				sta 	temp0
.4996	90 02		bcc $499a			bcc 	_AANoCarry
.4998	e6 2b		inc $2b				inc 	temp0+1
.499a					_AANoCarry:
.499a	b5 98		lda $98,x			lda 	esInt0,x
.499c	85 2e		sta $2e				sta 	temp2
.499e	b5 a0		lda $a0,x			lda 	esInt1,x
.49a0	85 2f		sta $2f				sta 	temp2+1
.49a2	ac 5f 0e	ldy $0e5f			ldy 	varType
.49a5	b9 82 4a	lda $4a82,y			lda 	CAActualSize-$3A,y
.49a8	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.49aa	30 02		bmi $49ae			bmi 	_AANotPointer
.49ac	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.49ae					_AANotPointer:
.49ae	20 2c 4b	jsr $4b2c			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.49b1	18		clc				clc
.49b2	a5 2a		lda $2a				lda 	temp0
.49b4	65 2e		adc $2e				adc 	temp2
.49b6	85 2a		sta $2a				sta 	temp0
.49b8	a5 2b		lda $2b				lda 	temp0+1
.49ba	65 2f		adc $2f				adc 	temp2+1
.49bc	85 2b		sta $2b				sta 	temp0+1
.49be	b5 91		lda $91,x			lda 	esType+1,x
.49c0	30 07		bmi $49c9			bmi 	_AAUsedAllIndices
.49c2	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.49c4	10 14		bpl $49da			bpl 	_AABadDepth 				; no, too many indexes.
.49c6	4c 70 49	jmp $4970			jmp 	_AAFollow 					; otherwise follow them.
.49c9					_AAUsedAllIndices:
.49c9	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.49cb	30 0d		bmi $49da			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.49cd	68		pla				pla
.49ce	a8		tay				tay
.49cf	68		pla				pla
.49d0	aa		tax				tax
.49d1	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.49d3	95 98		sta $98,x			sta 	esInt0,x
.49d5	a5 2b		lda $2b				lda 	temp0+1
.49d7	95 a0		sta $a0,x			sta 	esInt1,x
.49d9	60		rts				rts
.49da					_AABadDepth:
.49da	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.49dc	20 18 15	jsr $1518		jsr	errorHandler
.49df					_AABadIndex:
.49df	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.49e1	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e5d					elementSize:
>0e5d							.fill	 1
.49e4					CreateArray:
.49e4	20 bb 4b	jsr $4bbb			jsr 	AccessSetup 				; set up the basic stuff.
.49e7	ad 5f 0e	lda $0e5f			lda 	varType 					; is the variable type an array
.49ea	4a		lsr a				lsr 	a
.49eb	90 36		bcc $4a23			bcc 	CANotArray 					; no, cause an error.
.49ed	20 c4 4c	jsr $4cc4			jsr 	FindVariable 				; does the variable exist already
.49f0	b0 2c		bcs $4a1e			bcs 	CAFound 					; cannot redefine it.
.49f2	20 f8 4b	jsr $4bf8			jsr 	CreateVariable 				; create the variable entry.
.49f5	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.49f7	48		pha				pha
.49f8	a5 2b		lda $2b				lda 	temp0+1
.49fa	48		pha				pha
.49fb	a2 00		ldx #$00			ldx 	#0
.49fd	20 28 4a	jsr $4a28			jsr 	GetArrayDimensions 			; get the array dimensions
.4a00	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4a02	20 58 4a	jsr $4a58			jsr 	CreateArrayLevel 			; level to YA
.4a05	aa		tax				tax 								; level now in YX
.4a06	68		pla				pla 								; get address back to temp0 to write.
.4a07	85 2b		sta $2b				sta 	temp0+1
.4a09	68		pla				pla
.4a0a	85 2a		sta $2a				sta 	temp0
.4a0c	98		tya				tya 								; write YX there.
.4a0d	a0 06		ldy #$06			ldy 	#6
.4a0f	91 2a		sta ($2a),y			sta 	(temp0),y
.4a11	88		dey				dey
.4a12	8a		txa				txa
.4a13	91 2a		sta ($2a),y			sta 	(temp0),y
.4a15	ac 60 0e	ldy $0e60			ldy 	varEnd 						; restore Y and exit.
.4a18	60		rts				rts
.4a19					CASize:
.4a19	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4a1b	20 18 15	jsr $1518		jsr	errorHandler
.4a1e					CAFound:
.4a1e	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4a20	20 18 15	jsr $1518		jsr	errorHandler
.4a23					CANotArray:
.4a23	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4a25	20 18 15	jsr $1518		jsr	errorHandler
.4a28					GetArrayDimensions:
.4a28	ad 5f 0e	lda $0e5f			lda 	varType 					; push variable type on the stack.
.4a2b	48		pha				pha
.4a2c	ac 60 0e	ldy $0e60			ldy 	varEnd
.4a2f					_CAGetDimensions:
.4a2f	8a		txa				txa 								; get the next level
.4a30	a2 0a		ldx #$0a		ldx	#10
.4a32	20 0b 3e	jsr $3e0b		jsr	mainHandler
.4a35	aa		tax				tax
.4a36	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4a38	29 e0		and #$e0			and 	#$E0
.4a3a	15 a8		ora $a8,x			ora 	esInt2,x
.4a3c	15 b0		ora $b0,x			ora 	esInt3,x
.4a3e	d0 d9		bne $4a19			bne 	CASize
.4a40	e8		inx				inx 								; next level.
.4a41	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4a43	c8		iny				iny
.4a44	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4a46	f0 e7		beq $4a2f			beq 	_CAGetDimensions
.4a48	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4a4a	d0 cd		bne $4a19			bne 	CASize
.4a4c	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4a4e	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.4a50	68		pla				pla 								; restore the variable type ($3A-$3F)
.4a51	8d 5f 0e	sta $0e5f			sta 	varType
.4a54	8c 60 0e	sty $0e60			sty 	varEnd 						; save exit Y value, after dimensions
.4a57	60		rts				rts
.4a58					CreateArrayLevel:
.4a58	ac 5f 0e	ldy $0e5f			ldy 	varType
.4a5b	b9 82 4a	lda $4a82,y			lda 	CAActualSize-$3A,y
.4a5e	8d 5d 0e	sta $0e5d			sta 	elementSize 				; get element size this level.
.4a61	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4a63	30 05		bmi $4a6a			bmi 	_CANotPointer
.4a65	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4a67	8d 5d 0e	sta $0e5d			sta 	elementSize
.4a6a					_CANotPointer:
.4a6a	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4a6c	85 2a		sta $2a				sta 	temp0
.4a6e	48		pha				pha
.4a6f	a5 36		lda $36				lda 	lowMemory+1
.4a71	85 2b		sta $2b				sta 	temp0+1
.4a73	48		pha				pha
.4a74	20 f5 4a	jsr $4af5			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4a77	a0 00		ldy #$00			ldy 	#0
.4a79	b5 98		lda $98,x			lda 	esInt0,x
.4a7b	91 2a		sta ($2a),y			sta 	(temp0),y
.4a7d	c8		iny				iny
.4a7e	b5 a0		lda $a0,x			lda 	esInt1,x
.4a80	91 2a		sta ($2a),y			sta 	(temp0),y
.4a82	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4a84	30 06		bmi $4a8c			bmi 	_CALNotLast
.4a86	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4a88	09 80		ora #$80			ora 	#$80
.4a8a	91 2a		sta ($2a),y			sta 	(temp0),y
.4a8c					_CALNotLast:
.4a8c	a9 02		lda #$02			lda 	#2
.4a8e	20 b2 4a	jsr $4ab2			jsr 	_CALAddTemp0
.4a91	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4a93	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4a95	b5 a0		lda $a0,x			lda 	esInt1,x
.4a97	95 b0		sta $b0,x			sta 	esInt3,x
.4a99					_CALClear:
.4a99	20 c2 4a	jsr $4ac2			jsr 	EraseOneElement
.4a9c	ad 5d 0e	lda $0e5d			lda 	elementSize 				; move to next element
.4a9f	20 b2 4a	jsr $4ab2			jsr 	_CALAddTemp0
.4aa2	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4aa4	d0 02		bne $4aa8			bne 	_CALNoBorrow
.4aa6	d6 b0		dec $b0,x			dec 	esInt3,x
.4aa8					_CALNoBorrow:
.4aa8	d6 a8		dec $a8,x			dec 	esInt2,x
.4aaa	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4aac	10 eb		bpl $4a99			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4aae	68		pla				pla 								; restore the start of this into YA.
.4aaf	a8		tay				tay
.4ab0	68		pla				pla
.4ab1	60		rts				rts
.4ab2					_CALAddTemp0:
.4ab2	18		clc				clc
.4ab3	65 2a		adc $2a				adc 	temp0
.4ab5	85 2a		sta $2a				sta 	temp0
.4ab7	90 02		bcc $4abb			bcc 	_CALANoCarry
.4ab9	e6 2b		inc $2b				inc 	temp0+1
.4abb					_CALANoCarry:
.4abb	60		rts				rts
.4abc					CAActualSize:
>4abc	04 04						.byte 	VarISize,VarISize
>4abe	02 02						.byte 	VarSSize,VarSSize
>4ac0	06 06						.byte 	VarFSize,VarFSize
.4ac2					EraseOneElement:
.4ac2	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4ac4	10 09		bpl $4acf			bpl 	_EOESubArray
.4ac6	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4ac8	ad 5f 0e	lda $0e5f			lda 	varType
.4acb	20 62 4c	jsr $4c62			jsr 	ZeroTemp0Y
.4ace	60		rts				rts
.4acf					_EOESubArray:
.4acf	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4ad1	48		pha				pha
.4ad2	a5 2b		lda $2b				lda 	temp0+1
.4ad4	48		pha				pha
.4ad5	ad 5d 0e	lda $0e5d			lda 	elementSize 				; save element size
.4ad8	48		pha				pha
.4ad9	e8		inx				inx 								; create at next level
.4ada	20 58 4a	jsr $4a58			jsr 	CreateArrayLevel
.4add	ca		dex				dex
.4ade	85 32		sta $32				sta 	tempShort 					; save A
.4ae0	68		pla				pla  								; restore element size.
.4ae1	8d 5d 0e	sta $0e5d			sta 	elementSize
.4ae4	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4ae5	85 2b		sta $2b				sta 	temp0+1
.4ae7	68		pla				pla
.4ae8	85 2a		sta $2a				sta 	temp0
.4aea	98		tya				tya 								; store Y/A there
.4aeb	a0 01		ldy #$01			ldy 	#1
.4aed	91 2a		sta ($2a),y			sta 	(temp0),y
.4aef	a5 32		lda $32				lda 	tempShort
.4af1	88		dey				dey
.4af2	91 2a		sta ($2a),y			sta 	(temp0),y
.4af4	60		rts				rts
.4af5					AllocateArraySpace:
.4af5	18		clc				clc 								; element count + 1 => temp2.
.4af6	b5 98		lda $98,x			lda 	esInt0,x
.4af8	69 01		adc #$01			adc 	#1
.4afa	85 2e		sta $2e				sta 	temp2
.4afc	b5 a0		lda $a0,x			lda 	esInt1,x
.4afe	69 00		adc #$00			adc 	#0
.4b00	85 2f		sta $2f				sta 	temp2+1
.4b02	ad 5d 0e	lda $0e5d			lda 	elementSize 				; bytes per element
.4b05	20 2c 4b	jsr $4b2c			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4b08	18		clc				clc 								; add 2 for 'max element' byte.
.4b09	a5 2e		lda $2e				lda 	temp2
.4b0b	69 02		adc #$02			adc 	#2
.4b0d	85 2e		sta $2e				sta 	temp2
.4b0f	90 02		bcc $4b13			bcc 	_AASNoCarry
.4b11	e6 2f		inc $2f				inc 	temp2+1
.4b13					_AASNoCarry:
.4b13	18		clc				clc 								; add to low memory, allocating space.
.4b14	a5 35		lda $35				lda 	lowMemory
.4b16	65 2e		adc $2e				adc 	temp2
.4b18	85 35		sta $35				sta 	lowMemory
.4b1a	a5 36		lda $36				lda 	lowMemory+1
.4b1c	65 2f		adc $2f				adc 	temp2+1
.4b1e	85 36		sta $36				sta 	lowMemory+1
.4b20	b0 05		bcs $4b27			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4b22	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4b24	b0 01		bcs $4b27			bcs 	_AASFail
.4b26	60		rts				rts
.4b27					_AASFail:
.4b27	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4b29	20 18 15	jsr $1518		jsr	errorHandler
.4b2c					MultiplyTemp2ByA:
.4b2c	48		pha				pha
.4b2d	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4b2f	85 30		sta $30				sta 	temp3
.4b31	a5 2f		lda $2f				lda 	temp2+1
.4b33	85 31		sta $31				sta 	temp3+1
.4b35	68		pla				pla
.4b36	06 2e		asl $2e				asl 	temp2 						; double it.
.4b38	26 2f		rol $2f				rol 	temp2+1
.4b3a	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4b3c	f0 15		beq $4b53			beq 	_MTBAExit
.4b3e	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4b40	d0 0d		bne $4b4f			bne 	_MTBANotFloat
.4b42	18		clc				clc 								; so this will make it x 3
.4b43	a5 2e		lda $2e				lda 	temp2
.4b45	65 30		adc $30				adc 	temp3
.4b47	85 2e		sta $2e				sta 	temp2
.4b49	a5 2f		lda $2f				lda 	temp2+1
.4b4b	65 31		adc $31				adc 	temp3+1
.4b4d	85 2f		sta $2f				sta 	temp2+1
.4b4f					_MTBANotFloat:
.4b4f	06 2e		asl $2e				asl 	temp2 						; double it.
.4b51	26 2f		rol $2f				rol 	temp2+1
.4b53					_MTBAExit:
.4b53	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e5e					varHash:
>0e5e							.fill	1
.0e5f					varType:
>0e5f							.fill 	1
.0e60					varEnd:
>0e60							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4b54					AccessVariable:
.4b54	aa		tax				tax 								; stack in X
.4b55	c8		iny				iny									; look at second character
.4b56	b1 28		lda ($28),y			lda 	(codePtr),y
.4b58	88		dey				dey
.4b59	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4b5b	d0 15		bne $4b72			bne 	_AVLong 					; no, always use the hash tables.
.4b5d	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4b5f	38		sec				sec 	 							; make it 0-25
.4b60	e9 01		sbc #$01			sbc 	#1
.4b62	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4b63	0a		asl a				asl 	a
.4b64	95 98		sta $98,x			sta 	esInt0,x
.4b66	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4b68	95 a0		sta $a0,x			sta 	esInt1,x
.4b6a	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4b6c	95 90		sta $90,x			sta 	esType,x
.4b6e	c8		iny				iny 								; skip over the variable reference in the code.
.4b6f	c8		iny				iny  								; (1 letter, 1 type)
.4b70	8a		txa				txa 								; stack in A to return.
.4b71	60		rts				rts
.4b72					_AVLong:
.4b72	8a		txa				txa
.4b73	48		pha				pha
.4b74	20 bb 4b	jsr $4bbb			jsr 	AccessSetup 				; set up the basic information we need for later
.4b77	20 c4 4c	jsr $4cc4			jsr 	FindVariable 				; does the variable exist already ?
.4b7a	b0 0e		bcs $4b8a			bcs 	_AVFound 					; yes, then its found
.4b7c	ad 5f 0e	lda $0e5f			lda 	varType 					; otherwise, is the variable type an array
.4b7f	4a		lsr a				lsr 	a
.4b80	90 05		bcc $4b87			bcc 	_AVCanCreate 				; if not, we can autocreate
.4b82	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4b84	20 18 15	jsr $1518		jsr	errorHandler
.4b87					_AVCanCreate:
.4b87	20 f8 4b	jsr $4bf8			jsr 	CreateVariable 				; variable does not exist, create it.
.4b8a					_AVFound:
.4b8a	68		pla				pla
.4b8b	aa		tax				tax
.4b8c	18		clc				clc 								; copy temp0 (variable record address)
.4b8d	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4b8f	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4b91	95 98		sta $98,x			sta 	esInt0,x
.4b93	a5 2b		lda $2b				lda 	temp0+1
.4b95	69 00		adc #$00			adc 	#0
.4b97	95 a0		sta $a0,x			sta 	esInt1,x
.4b99	a9 00		lda #$00			lda 	#0
.4b9b	95 a8		sta $a8,x			sta 	esInt2,x
.4b9d	95 b0		sta $b0,x			sta 	esInt3,x
.4b9f	ac 5f 0e	ldy $0e5f			ldy 	varType 					; get the type ID from the type.
.4ba2	b9 7b 4b	lda $4b7b,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4ba5	95 90		sta $90,x			sta 	esType,x
.4ba7	ac 60 0e	ldy $0e60			ldy 	varEnd 						; restore Y
.4baa	ad 5f 0e	lda $0e5f			lda 	VarType 					; get variable type, put LSB into C
.4bad	4a		lsr a				lsr 	a
.4bae	90 03		bcc $4bb3			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4bb0	20 5c 49	jsr $495c			jsr 	AccessArray 				; array lookup. if LSB was set.
.4bb3					_AVNotArray:
.4bb3	8a		txa				txa 								; return stack in A and return
.4bb4	60		rts				rts
.4bb5					_AVTypeTable:
>4bb5	80 80						.byte 	$80,$80						; integer
>4bb7	c0 c0						.byte 	$C0,$C0 					; string
>4bb9	81 81						.byte 	$81,$81 					; float
.4bbb					AccessSetup:
.4bbb	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4bbd	8d 5e 0e	sta $0e5e			sta 	varHash
.4bc0	98		tya				tya
.4bc1	48		pha				pha
.4bc2	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4bc4	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4bc6	b0 0b		bcs $4bd3			bcs 	_ASComplete
.4bc8	18		clc				clc 								; add to the hash. Might improve this.
.4bc9	6d 5e 0e	adc $0e5e			adc 	varHash
.4bcc	8d 5e 0e	sta $0e5e			sta 	varHash
.4bcf	c8		iny				iny 								; next character
.4bd0	4c c2 4b	jmp $4bc2			jmp 	_ASLoop
.4bd3					_ASComplete:
.4bd3	8d 5f 0e	sta $0e5f			sta 	varType 					; save variable type byte
.4bd6	c8		iny				iny
.4bd7	8c 60 0e	sty $0e60			sty 	varEnd 						; save the ending position.
.4bda	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4bdb	e9 3a		sbc #$3a			sbc 	#$3A
.4bdd	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4bde	0a		asl a				asl 	a
.4bdf	0a		asl a				asl 	a
.4be0	0a		asl a				asl 	a 							; 2 bytes/word
.4be1	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4be3	ad 5e 0e	lda $0e5e			lda 	varHash 					; get hash
.4be6	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4be8	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4be9	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4beb	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4bed	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4bef	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4bf1	69 00		adc #$00			adc 	#0
.4bf3	85 3c		sta $3c				sta 	hashList+1
.4bf5	68		pla				pla
.4bf6	a8		tay				tay
.4bf7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4bf8					CreateVariable:
.4bf8	98		tya				tya 								; push Y on the stack twice.
.4bf9	48		pha				pha									; position in code of the new variable.
.4bfa	48		pha				pha
.4bfb	ae 5f 0e	ldx $0e5f			ldx 	varType 					; get var type 0-5 from the var type
.4bfe	bd 22 4c	lda $4c22,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4c01	48		pha				pha 								; save length
.4c02	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4c04	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4c06	a5 36		lda $36				lda 	lowMemory+1
.4c08	85 2b		sta $2b				sta 	temp0+1
.4c0a	68		pla				pla 								; get length
.4c0b	18		clc				clc 								; add to low memory.
.4c0c	65 35		adc $35				adc 	lowMemory
.4c0e	85 35		sta $35				sta 	lowMemory
.4c10	90 08		bcc $4c1a			bcc 	_CVNoCarry
.4c12	e6 36		inc $36				inc 	lowMemory+1
.4c14	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4c16	c5 34		cmp $34				cmp 	highMemory+1
.4c18	b0 3d		bcs $4c57			bcs 	_CVMemory
.4c1a					_CVNoCarry:
.4c1a	ad 5e 0e	lda $0e5e			lda 	varHash 					; store hash at offset 4.
.4c1d	a0 04		ldy #$04			ldy 	#4
.4c1f	91 2a		sta ($2a),y			sta 	(temp0),y
.4c21	68		pla				pla 								; offset, work out where the variable name is.
.4c22	18		clc				clc
.4c23	65 28		adc $28				adc 	codePtr
.4c25	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4c27	91 2a		sta ($2a),y			sta 	(temp0),y
.4c29	a5 29		lda $29				lda 	codePtr+1
.4c2b	69 00		adc #$00			adc 	#0
.4c2d	c8		iny				iny
.4c2e	91 2a		sta ($2a),y			sta 	(temp0),y
.4c30	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4c33	b0 03		bcs $4c38			bcs 	_CVNotImmediate
.4c35	20 9a 4c	jsr $4c9a			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4c38					_CVNotImmediate:
.4c38	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4c3a	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4c3c	91 2a		sta ($2a),y			sta 	(temp0),y
.4c3e	c8		iny				iny
.4c3f	b1 3b		lda ($3b),y			lda 	(hashList),y
.4c41	91 2a		sta ($2a),y			sta 	(temp0),y
.4c43	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4c45	91 3b		sta ($3b),y			sta 	(hashList),y
.4c47	88		dey				dey
.4c48	a5 2a		lda $2a				lda 	temp0
.4c4a	91 3b		sta ($3b),y			sta 	(hashList),y
.4c4c	ad 5f 0e	lda $0e5f			lda 	varType 					; type in A
.4c4f	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4c51	20 62 4c	jsr $4c62			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4c54	68		pla				pla
.4c55	a8		tay				tay
.4c56	60		rts				rts
.4c57					_CVMemory:
.4c57	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4c59	20 18 15	jsr $1518		jsr	errorHandler
>4c5c	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4c5e	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4c60	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4c62					ZeroTemp0Y:
.4c62	4a		lsr a				lsr 	a 							; bit 0 in carry
.4c63	0a		asl a				asl 	a
.4c64	b0 19		bcs $4c7f			bcs 	_ZTExit 					; we don't initialise arrays.
.4c66	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4c68	f0 16		beq $4c80			beq 	_ZTWriteNullString 			; write "" string
.4c6a	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4c6c	f0 22		beq $4c90			beq 	_ZTWriteFloat
.4c6e	98		tya				tya
.4c6f	48		pha				pha
.4c70	a9 00		lda #$00			lda 	#0
.4c72	91 2a		sta ($2a),y			sta 	(temp0),y
.4c74	c8		iny				iny
.4c75	91 2a		sta ($2a),y			sta 	(temp0),y
.4c77	c8		iny				iny
.4c78	91 2a		sta ($2a),y			sta 	(temp0),y
.4c7a	c8		iny				iny
.4c7b	91 2a		sta ($2a),y			sta 	(temp0),y
.4c7d	68		pla				pla
.4c7e	a8		tay				tay
.4c7f					_ZTExit:
.4c7f	60		rts				rts
.4c80					_ZTWriteNullString:
.4c80	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4c82	8d ce 0a	sta $0ace			sta 	NullString
.4c85	a9 ce		lda #$ce			lda 	#NullString & $FF
.4c87	91 2a		sta ($2a),y			sta 	(temp0),y
.4c89	a9 0a		lda #$0a			lda 	#NullString >> 8
.4c8b	c8		iny				iny
.4c8c	91 2a		sta ($2a),y			sta 	(temp0),y
.4c8e	88		dey				dey
.4c8f	60		rts				rts
.4c90					_ZTWriteFloat:
.4c90	8a		txa				txa
.4c91	48		pha				pha
.4c92	a2 20		ldx #$20		ldx	#32
.4c94	20 81 25	jsr $2581		jsr	floatingpointHandler
.4c97	68		pla				pla
.4c98	aa		tax				tax
.4c99	60		rts				rts
.4c9a					CloneVariableName:
.4c9a	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4c9c	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c9e	85 2e		sta $2e				sta 	temp2
.4ca0	c8		iny				iny
.4ca1	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ca3	85 2f		sta $2f				sta 	temp2+1
.4ca5	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4ca7	91 2a		sta ($2a),y			sta 	(temp0),y
.4ca9	88		dey				dey
.4caa	a5 35		lda $35				lda 	lowMemory
.4cac	91 2a		sta ($2a),y			sta 	(temp0),y
.4cae	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4cb0					_CVNCopy:
.4cb0	b1 2e		lda ($2e),y			lda		(temp2),y
.4cb2	91 35		sta ($35),y			sta 	(lowMemory),y
.4cb4	c8		iny				iny
.4cb5	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4cb7	90 f7		bcc $4cb0			bcc 	_CVNCopy
.4cb9	98		tya				tya 								; add Y to low memory
.4cba	18		clc				clc
.4cbb	65 35		adc $35				adc 	lowMemory
.4cbd	85 35		sta $35				sta 	lowMemory
.4cbf	90 02		bcc $4cc3			bcc 	_CVNNoCarry
.4cc1	e6 36		inc $36				inc 	lowMemory+1
.4cc3					_CVNNoCarry:
.4cc3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4cc4					FindVariable:
.4cc4	98		tya				tya
.4cc5	48		pha				pha
.4cc6	98		tya				tya 								; point temp2 to the actual name
.4cc7	18		clc				clc 								; in memory of the variable being created
.4cc8	65 28		adc $28				adc 	codePtr
.4cca	85 2e		sta $2e				sta 	temp2
.4ccc	a5 29		lda $29				lda 	codePtr+1
.4cce	69 00		adc #$00			adc 	#0
.4cd0	85 2f		sta $2f				sta 	temp2+1
.4cd2	a0 00		ldy #$00			ldy 	#0
.4cd4	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4cd6	85 2a		sta $2a				sta 	temp0
.4cd8	a5 3c		lda $3c				lda 	hashList+1
.4cda	85 2b		sta $2b				sta 	temp0+1
.4cdc	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4cde	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ce0	f0 2c		beq $4d0e			beq 	_FVFail
.4ce2	aa		tax				tax
.4ce3	88		dey				dey		 							; get LSB
.4ce4	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ce6	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4ce8	86 2b		stx $2b				stx 	temp0+1
.4cea	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4cec	b1 2a		lda ($2a),y			lda 	(temp0),y
.4cee	cd 5e 0e	cmp $0e5e			cmp 	varHash
.4cf1	d0 e9		bne $4cdc			bne 	_FVNext 					; if not, no point in checking the name.
.4cf3	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4cf4	b1 2a		lda ($2a),y			lda 	(temp0),y
.4cf6	85 2d		sta $2d				sta 	temp1+1
.4cf8	88		dey				dey
.4cf9	b1 2a		lda ($2a),y			lda 	(temp0),y
.4cfb	85 2c		sta $2c				sta 	temp1
.4cfd	a0 00		ldy #$00			ldy 	#0
.4cff					_FVCheck:
.4cff	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4d01	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4d03	d0 d7		bne $4cdc			bne 	_FVNext		 				; fail if different.
.4d05	c8		iny				iny
.4d06	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4d08	90 f5		bcc $4cff			bcc 	_FVCheck
.4d0a	68		pla				pla
.4d0b	a8		tay				tay
.4d0c	38		sec				sec
.4d0d	60		rts				rts
.4d0e					_FVFail:
.4d0e	68		pla				pla
.4d0f	a8		tay				tay
.4d10	18		clc				clc
.4d11	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4d12					HashTableReset:
.4d12	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4d14	a9 00		lda #$00			lda 	#0
.4d16					_HTRClear:
.4d16	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4d19	ca		dex				dex
.4d1a	d0 fa		bne $4d16			bne 	_HTRClear
.4d1c	60		rts				rts

;******  Return to file: variable/variable.asm

.4d1d					variableHandler:
.4d1d	7c 20 4d	jmp ($4d20,x)			jmp 	(variableVectors,x)
.4d20					variableVectors:
>4d20	28 4d					.word _DummyControlHandler ; index 0
>4d22	54 4b					.word AccessVariable       ; index 2
>4d24	e4 49					.word CreateArray          ; index 4
>4d26	12 4d					.word HashTableReset       ; index 6
.4d28					_DummyControlHandler:
.4d28	60		rts			rts

;******  Return to file: basic.asm

.4d29					section_end_variable:
.4d29					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e61					endStorage:
>4d29							.align 	256
.4e00					programMemory:
>4dff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4e00					section_end_footer:

;******  End of listing
